{"nodes":[{"content":"Represents different collections of management objects retrieved through WMI. The objects in this collection are of <xref href=\"System.Management.ManagementBaseObject\"></xref>-derived types, including <xref href=\"System.Management.ManagementObject\"></xref> and <xref href=\"System.Management.ManagementClass\"></xref>. The collection can be the result of a WMI query executed through a <xref href=\"System.Management.ManagementObjectSearcher\"></xref>, or an enumeration of management objects of a specified type retrieved through a <xref href=\"System.Management.ManagementClass\"></xref> representing that type. In addition, this can be a collection of management objects related in a specified way to a specific management object - in this case the collection would be retrieved through a method such as <xref href=\"System.Management.ManagementObject.GetRelated\"></xref>. The collection can be walked using the <xref href=\"System.Management.ManagementObjectCollection.ManagementObjectEnumerator\"></xref> and objects in it can be inspected or manipulated for various management tasks.","nodes":[{"pos":[0,1080],"content":"Represents different collections of management objects retrieved through WMI. The objects in this collection are of <xref href=\"System.Management.ManagementBaseObject\"></xref>-derived types, including <xref href=\"System.Management.ManagementObject\"></xref> and <xref href=\"System.Management.ManagementClass\"></xref>. The collection can be the result of a WMI query executed through a <xref href=\"System.Management.ManagementObjectSearcher\"></xref>, or an enumeration of management objects of a specified type retrieved through a <xref href=\"System.Management.ManagementClass\"></xref> representing that type. In addition, this can be a collection of management objects related in a specified way to a specific management object - in this case the collection would be retrieved through a method such as <xref href=\"System.Management.ManagementObject.GetRelated\"></xref>. The collection can be walked using the <xref href=\"System.Management.ManagementObjectCollection.ManagementObjectEnumerator\"></xref> and objects in it can be inspected or manipulated for various management tasks.","nodes":[{"content":"Represents different collections of management objects retrieved through WMI.","pos":[0,77]},{"content":"The objects in this collection are of <ph id=\"ph1\">&lt;xref href=\"System.Management.ManagementBaseObject\"&gt;&lt;/xref&gt;</ph>-derived types, including <ph id=\"ph2\">&lt;xref href=\"System.Management.ManagementObject\"&gt;&lt;/xref&gt;</ph> and <ph id=\"ph3\">&lt;xref href=\"System.Management.ManagementClass\"&gt;&lt;/xref&gt;</ph>.","pos":[78,316],"source":" The objects in this collection are of <xref href=\"System.Management.ManagementBaseObject\"></xref>-derived types, including <xref href=\"System.Management.ManagementObject\"></xref> and <xref href=\"System.Management.ManagementClass\"></xref>."},{"content":"The collection can be the result of a WMI query executed through a <ph id=\"ph1\">&lt;xref href=\"System.Management.ManagementObjectSearcher\"&gt;&lt;/xref&gt;</ph>, or an enumeration of management objects of a specified type retrieved through a <ph id=\"ph2\">&lt;xref href=\"System.Management.ManagementClass\"&gt;&lt;/xref&gt;</ph> representing that type.","pos":[317,607],"source":" The collection can be the result of a WMI query executed through a <xref href=\"System.Management.ManagementObjectSearcher\"></xref>, or an enumeration of management objects of a specified type retrieved through a <xref href=\"System.Management.ManagementClass\"></xref> representing that type."},{"content":"In addition, this can be a collection of management objects related in a specified way to a specific management object - in this case the collection would be retrieved through a method such as <ph id=\"ph1\">&lt;xref href=\"System.Management.ManagementObject.GetRelated\"&gt;&lt;/xref&gt;</ph>.","pos":[608,868],"source":" In addition, this can be a collection of management objects related in a specified way to a specific management object - in this case the collection would be retrieved through a method such as <xref href=\"System.Management.ManagementObject.GetRelated\"></xref>."},{"content":"The collection can be walked using the <ph id=\"ph1\">&lt;xref href=\"System.Management.ManagementObjectCollection.ManagementObjectEnumerator\"&gt;&lt;/xref&gt;</ph> and objects in it can be inspected or manipulated for various management tasks.","pos":[869,1080],"source":" The collection can be walked using the <xref href=\"System.Management.ManagementObjectCollection.ManagementObjectEnumerator\"></xref> and objects in it can be inspected or manipulated for various management tasks."}]}],"pos":[1083,2164],"yaml":true},{"content":"Copies the collection to an array.","nodes":[{"pos":[0,34],"content":"Copies the collection to an array.","nodes":[{"content":"Copies the collection to an array.","pos":[0,34]}]}],"pos":[4023,4058],"yaml":true},{"content":"## .NET Framework Security  \n Full trust for the immediate caller. This member cannot be used by partially trusted code. For more information, see [Using Libraries from Partially Trusted Code](~/docs/framework/misc/using-libraries-from-partially-trusted-code.md).","nodes":[{"pos":[3,26],"content":".NET Framework Security","linkify":".NET Framework Security","nodes":[{"content":".NET Framework Security","pos":[0,23]}]},{"pos":[30,263],"content":"Full trust for the immediate caller. This member cannot be used by partially trusted code. For more information, see [Using Libraries from Partially Trusted Code](~/docs/framework/misc/using-libraries-from-partially-trusted-code.md).","nodes":[{"content":"Full trust for the immediate caller.","pos":[0,36]},{"content":"This member cannot be used by partially trusted code.","pos":[37,90]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Using Libraries from Partially Trusted Code<ept id=\"p1\">](~/docs/framework/misc/using-libraries-from-partially-trusted-code.md)</ept>.","pos":[91,233],"source":" For more information, see [Using Libraries from Partially Trusted Code](~/docs/framework/misc/using-libraries-from-partially-trusted-code.md)."}]}],"pos":[4069,4336],"yaml":true,"extradata":"MT"},{"content":"An array to copy to.","nodes":[{"pos":[0,20],"content":"An array to copy to.","nodes":[{"content":"An array to copy to.","pos":[0,20]}]}],"pos":[4480,4501],"yaml":true},{"content":"The index to start from.","nodes":[{"pos":[0,24],"content":"The index to start from.","nodes":[{"content":"The index to start from.","pos":[0,24]}]}],"pos":[4561,4586],"yaml":true},{"content":"Copies the items in the collection to a <xref href=\"System.Management.ManagementBaseObject\"></xref> array.","nodes":[{"pos":[0,106],"content":"Copies the items in the collection to a <ph id=\"ph1\">&lt;xref href=\"System.Management.ManagementBaseObject\"&gt;&lt;/xref&gt;</ph> array.","source":"Copies the items in the collection to a <xref href=\"System.Management.ManagementBaseObject\"></xref> array."}],"pos":[5848,5955],"yaml":true},{"content":"## .NET Framework Security  \n Full trust for the immediate caller. This member cannot be used by partially trusted code. For more information, see [Using Libraries from Partially Trusted Code](~/docs/framework/misc/using-libraries-from-partially-trusted-code.md).","nodes":[{"pos":[3,26],"content":".NET Framework Security","linkify":".NET Framework Security","nodes":[{"content":".NET Framework Security","pos":[0,23]}]},{"pos":[30,263],"content":"Full trust for the immediate caller. This member cannot be used by partially trusted code. For more information, see [Using Libraries from Partially Trusted Code](~/docs/framework/misc/using-libraries-from-partially-trusted-code.md).","nodes":[{"content":"Full trust for the immediate caller.","pos":[0,36]},{"content":"This member cannot be used by partially trusted code.","pos":[37,90]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Using Libraries from Partially Trusted Code<ept id=\"p1\">](~/docs/framework/misc/using-libraries-from-partially-trusted-code.md)</ept>.","pos":[91,233],"source":" For more information, see [Using Libraries from Partially Trusted Code](~/docs/framework/misc/using-libraries-from-partially-trusted-code.md)."}]}],"pos":[5966,6233],"yaml":true,"extradata":"MT"},{"content":"The target array.","nodes":[{"pos":[0,17],"content":"The target array.","nodes":[{"content":"The target array.","pos":[0,17]}]}],"pos":[6462,6480],"yaml":true},{"content":"The index to start from.","nodes":[{"pos":[0,24],"content":"The index to start from.","nodes":[{"content":"The index to start from.","pos":[0,24]}]}],"pos":[6540,6565],"yaml":true},{"content":"Gets a value indicating the number of objects in the collection.","nodes":[{"pos":[0,64],"content":"Gets a value indicating the number of objects in the collection.","nodes":[{"content":"Gets a value indicating the number of objects in the collection.","pos":[0,64]}]}],"pos":[7565,7630],"yaml":true},{"content":"This property is very expensive - it requires that all members of the collection be enumerated.  \n  \n## Property Value  \n The number of objects in the collection.  \n  \n## .NET Framework Security  \n Full trust for the immediate caller. This member cannot be used by partially trusted code. For more information, see [Using Libraries from Partially Trusted Code](~/docs/framework/misc/using-libraries-from-partially-trusted-code.md).","nodes":[{"pos":[0,95],"content":"This property is very expensive - it requires that all members of the collection be enumerated.","nodes":[{"content":"This property is very expensive - it requires that all members of the collection be enumerated.","pos":[0,95]}]},{"pos":[104,118],"content":"Property Value","linkify":"Property Value","nodes":[{"content":"Property Value","pos":[0,14]}]},{"pos":[122,162],"content":"The number of objects in the collection.","nodes":[{"content":"The number of objects in the collection.","pos":[0,40]}]},{"pos":[171,194],"content":".NET Framework Security","linkify":".NET Framework Security","nodes":[{"content":".NET Framework Security","pos":[0,23]}]},{"pos":[198,431],"content":"Full trust for the immediate caller. This member cannot be used by partially trusted code. For more information, see [Using Libraries from Partially Trusted Code](~/docs/framework/misc/using-libraries-from-partially-trusted-code.md).","nodes":[{"content":"Full trust for the immediate caller.","pos":[0,36]},{"content":"This member cannot be used by partially trusted code.","pos":[37,90]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Using Libraries from Partially Trusted Code<ept id=\"p1\">](~/docs/framework/misc/using-libraries-from-partially-trusted-code.md)</ept>.","pos":[91,233],"source":" For more information, see [Using Libraries from Partially Trusted Code](~/docs/framework/misc/using-libraries-from-partially-trusted-code.md)."}]}],"pos":[7641,8081],"yaml":true,"extradata":"MT"},{"content":"Returns an <xref href=\"System.Int32\"></xref> value indicating the number of objects in the collection.","nodes":[{"pos":[0,102],"content":"Returns an <ph id=\"ph1\">&lt;xref href=\"System.Int32\"&gt;&lt;/xref&gt;</ph> value indicating the number of objects in the collection.","source":"Returns an <xref href=\"System.Int32\"></xref> value indicating the number of objects in the collection."}],"pos":[8186,8289],"yaml":true},{"content":"Releases resources associated with this object. After this method has been called, an attempt to use this object will result in an <xref href=\"System.ObjectDisposedException\"></xref> being thrown.","nodes":[{"pos":[0,196],"content":"Releases resources associated with this object. After this method has been called, an attempt to use this object will result in an <xref href=\"System.ObjectDisposedException\"></xref> being thrown.","nodes":[{"content":"Releases resources associated with this object.","pos":[0,47]},{"content":"After this method has been called, an attempt to use this object will result in an <ph id=\"ph1\">&lt;xref href=\"System.ObjectDisposedException\"&gt;&lt;/xref&gt;</ph> being thrown.","pos":[48,196],"source":" After this method has been called, an attempt to use this object will result in an <xref href=\"System.ObjectDisposedException\"></xref> being thrown."}]}],"pos":[9304,9501],"yaml":true},{"content":"## .NET Framework Security  \n Full trust for the immediate caller. This member cannot be used by partially trusted code. For more information, see [Using Libraries from Partially Trusted Code](~/docs/framework/misc/using-libraries-from-partially-trusted-code.md).","nodes":[{"pos":[3,26],"content":".NET Framework Security","linkify":".NET Framework Security","nodes":[{"content":".NET Framework Security","pos":[0,23]}]},{"pos":[30,263],"content":"Full trust for the immediate caller. This member cannot be used by partially trusted code. For more information, see [Using Libraries from Partially Trusted Code](~/docs/framework/misc/using-libraries-from-partially-trusted-code.md).","nodes":[{"content":"Full trust for the immediate caller.","pos":[0,36]},{"content":"This member cannot be used by partially trusted code.","pos":[37,90]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Using Libraries from Partially Trusted Code<ept id=\"p1\">](~/docs/framework/misc/using-libraries-from-partially-trusted-code.md)</ept>.","pos":[91,233],"source":" For more information, see [Using Libraries from Partially Trusted Code](~/docs/framework/misc/using-libraries-from-partially-trusted-code.md)."}]}],"pos":[9512,9779],"yaml":true,"extradata":"MT"},{"content":"Disposes of resources the object is holding. This is the destructor for the object. Finalizers are expressed using destructor syntax.","nodes":[{"pos":[0,133],"content":"Disposes of resources the object is holding. This is the destructor for the object. Finalizers are expressed using destructor syntax.","nodes":[{"content":"Disposes of resources the object is holding. This is the destructor for the object. Finalizers are expressed using destructor syntax.","pos":[0,133],"nodes":[{"content":"Disposes of resources the object is holding.","pos":[0,44]},{"content":"This is the destructor for the object.","pos":[45,83]},{"content":"Finalizers are expressed using destructor syntax.","pos":[84,133]}]}]}],"pos":[10868,11002],"yaml":true},{"content":"## .NET Framework Security  \n Full trust for the immediate caller. This member cannot be used by partially trusted code. For more information, see [Using Libraries from Partially Trusted Code](~/docs/framework/misc/using-libraries-from-partially-trusted-code.md).","nodes":[{"pos":[3,26],"content":".NET Framework Security","linkify":".NET Framework Security","nodes":[{"content":".NET Framework Security","pos":[0,23]}]},{"pos":[30,263],"content":"Full trust for the immediate caller. This member cannot be used by partially trusted code. For more information, see [Using Libraries from Partially Trusted Code](~/docs/framework/misc/using-libraries-from-partially-trusted-code.md).","nodes":[{"content":"Full trust for the immediate caller.","pos":[0,36]},{"content":"This member cannot be used by partially trusted code.","pos":[37,90]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Using Libraries from Partially Trusted Code<ept id=\"p1\">](~/docs/framework/misc/using-libraries-from-partially-trusted-code.md)</ept>.","pos":[91,233],"source":" For more information, see [Using Libraries from Partially Trusted Code](~/docs/framework/misc/using-libraries-from-partially-trusted-code.md)."}]}],"pos":[11013,11280],"yaml":true,"extradata":"MT"},{"content":"Returns the enumerator for the collection.","nodes":[{"pos":[0,42],"content":"Returns the enumerator for the collection.","nodes":[{"content":"Returns the enumerator for the collection.","pos":[0,42]}]}],"pos":[12408,12451],"yaml":true},{"content":"You can only iterate (as in a Visual Basic .NET `For Each` statement or a C# `For` statement) through a forward-only enumerator one time. The memory containing the instances is released by WMI so that the enumerator cannot be rewound. Therefore, the <xref:System.Management.ManagementObjectCollection.Count%2A> method cannot be used since it requires rewinding the enumerator.  \n  \n Forward-only enumerators are generally much faster and use less memory than conventional enumerators, but they do not allow calls to  <xref:System.Management.ManagementObjectCollection.ManagementObjectEnumerator.Reset%2A>.  \n  \n If an enumerator is rewindable, the objects in the collection will be kept available for multiple enumerations.  \n  \n## .NET Framework Security  \n Full trust for the immediate caller. This member cannot be used by partially trusted code. For more information, see [Using Libraries from Partially Trusted Code](~/docs/framework/misc/using-libraries-from-partially-trusted-code.md).","nodes":[{"pos":[0,376],"content":"You can only iterate (as in a Visual Basic .NET `For Each` statement or a C# `For` statement) through a forward-only enumerator one time. The memory containing the instances is released by WMI so that the enumerator cannot be rewound. Therefore, the <xref:System.Management.ManagementObjectCollection.Count%2A> method cannot be used since it requires rewinding the enumerator.","nodes":[{"content":"You can only iterate (as in a Visual Basic .NET <ph id=\"ph1\">`For Each`</ph> statement or a C# <ph id=\"ph2\">`For`</ph> statement) through a forward-only enumerator one time.","pos":[0,137],"source":"You can only iterate (as in a Visual Basic .NET `For Each` statement or a C# `For` statement) through a forward-only enumerator one time."},{"content":"The memory containing the instances is released by WMI so that the enumerator cannot be rewound.","pos":[138,234]},{"content":"Therefore, the <ph id=\"ph1\">&lt;xref:System.Management.ManagementObjectCollection.Count%2A&gt;</ph> method cannot be used since it requires rewinding the enumerator.","pos":[235,376],"source":" Therefore, the <xref:System.Management.ManagementObjectCollection.Count%2A> method cannot be used since it requires rewinding the enumerator."}]},{"pos":[383,605],"content":"Forward-only enumerators are generally much faster and use less memory than conventional enumerators, but they do not allow calls to  <xref:System.Management.ManagementObjectCollection.ManagementObjectEnumerator.Reset%2A>.","nodes":[{"content":"Forward-only enumerators are generally much faster and use less memory than conventional enumerators, but they do not allow calls to  <ph id=\"ph1\">&lt;xref:System.Management.ManagementObjectCollection.ManagementObjectEnumerator.Reset%2A&gt;</ph>.","pos":[0,222],"source":"Forward-only enumerators are generally much faster and use less memory than conventional enumerators, but they do not allow calls to  <xref:System.Management.ManagementObjectCollection.ManagementObjectEnumerator.Reset%2A>."}]},{"pos":[612,723],"content":"If an enumerator is rewindable, the objects in the collection will be kept available for multiple enumerations.","nodes":[{"content":"If an enumerator is rewindable, the objects in the collection will be kept available for multiple enumerations.","pos":[0,111]}]},{"pos":[732,755],"content":".NET Framework Security","linkify":".NET Framework Security","nodes":[{"content":".NET Framework Security","pos":[0,23]}]},{"pos":[759,992],"content":"Full trust for the immediate caller. This member cannot be used by partially trusted code. For more information, see [Using Libraries from Partially Trusted Code](~/docs/framework/misc/using-libraries-from-partially-trusted-code.md).","nodes":[{"content":"Full trust for the immediate caller.","pos":[0,36]},{"content":"This member cannot be used by partially trusted code.","pos":[37,90]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Using Libraries from Partially Trusted Code<ept id=\"p1\">](~/docs/framework/misc/using-libraries-from-partially-trusted-code.md)</ept>.","pos":[91,233],"source":" For more information, see [Using Libraries from Partially Trusted Code](~/docs/framework/misc/using-libraries-from-partially-trusted-code.md)."}]}],"pos":[12462,13464],"yaml":true,"extradata":"MT"},{"content":"An <xref href=\"System.Collections.IEnumerator\"></xref> that can be used to iterate through the collection.","nodes":[{"pos":[0,106],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Collections.IEnumerator\"&gt;&lt;/xref&gt;</ph> that can be used to iterate through the collection.","source":"An <xref href=\"System.Collections.IEnumerator\"></xref> that can be used to iterate through the collection."}],"pos":[13718,13825],"yaml":true},{"content":"Gets a value indicating whether the object is synchronized.","nodes":[{"pos":[0,59],"content":"Gets a value indicating whether the object is synchronized.","nodes":[{"content":"Gets a value indicating whether the object is synchronized.","pos":[0,59]}]}],"pos":[14886,14946],"yaml":true},{"content":"## Property Value  \n `true`, if the object is synchronized, otherwise `false`.  \n  \n## .NET Framework Security  \n Full trust for the immediate caller. This member cannot be used by partially trusted code. For more information, see [Using Libraries from Partially Trusted Code](~/docs/framework/misc/using-libraries-from-partially-trusted-code.md).","nodes":[{"pos":[3,17],"content":"Property Value","linkify":"Property Value","nodes":[{"content":"Property Value","pos":[0,14]}]},{"pos":[21,78],"content":"<ph id=\"ph1\">`true`</ph>, if the object is synchronized, otherwise <ph id=\"ph2\">`false`</ph>.","source":"`true`, if the object is synchronized, otherwise `false`."},{"pos":[87,110],"content":".NET Framework Security","linkify":".NET Framework Security","nodes":[{"content":".NET Framework Security","pos":[0,23]}]},{"pos":[114,347],"content":"Full trust for the immediate caller. This member cannot be used by partially trusted code. For more information, see [Using Libraries from Partially Trusted Code](~/docs/framework/misc/using-libraries-from-partially-trusted-code.md).","nodes":[{"content":"Full trust for the immediate caller.","pos":[0,36]},{"content":"This member cannot be used by partially trusted code.","pos":[37,90]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Using Libraries from Partially Trusted Code<ept id=\"p1\">](~/docs/framework/misc/using-libraries-from-partially-trusted-code.md)</ept>.","pos":[91,233],"source":" For more information, see [Using Libraries from Partially Trusted Code](~/docs/framework/misc/using-libraries-from-partially-trusted-code.md)."}]}],"pos":[14957,15311],"yaml":true,"extradata":"MT"},{"content":"Returns a <xref href=\"System.Boolean\"></xref> value indicating whether the object is synchronized.","nodes":[{"pos":[0,98],"content":"Returns a <ph id=\"ph1\">&lt;xref href=\"System.Boolean\"&gt;&lt;/xref&gt;</ph> value indicating whether the object is synchronized.","source":"Returns a <xref href=\"System.Boolean\"></xref> value indicating whether the object is synchronized."}],"pos":[15428,15527],"yaml":true},{"content":"Gets the object to be used for synchronization.","nodes":[{"pos":[0,47],"content":"Gets the object to be used for synchronization.","nodes":[{"content":"Gets the object to be used for synchronization.","pos":[0,47]}]}],"pos":[16553,16601],"yaml":true},{"content":"## Property Value  \n The object to be used for synchronization.  \n  \n## .NET Framework Security  \n Full trust for the immediate caller. This member cannot be used by partially trusted code. For more information, see [Using Libraries from Partially Trusted Code](~/docs/framework/misc/using-libraries-from-partially-trusted-code.md).","nodes":[{"pos":[3,17],"content":"Property Value","linkify":"Property Value","nodes":[{"content":"Property Value","pos":[0,14]}]},{"pos":[21,63],"content":"The object to be used for synchronization.","nodes":[{"content":"The object to be used for synchronization.","pos":[0,42]}]},{"pos":[72,95],"content":".NET Framework Security","linkify":".NET Framework Security","nodes":[{"content":".NET Framework Security","pos":[0,23]}]},{"pos":[99,332],"content":"Full trust for the immediate caller. This member cannot be used by partially trusted code. For more information, see [Using Libraries from Partially Trusted Code](~/docs/framework/misc/using-libraries-from-partially-trusted-code.md).","nodes":[{"content":"Full trust for the immediate caller.","pos":[0,36]},{"content":"This member cannot be used by partially trusted code.","pos":[37,90]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Using Libraries from Partially Trusted Code<ept id=\"p1\">](~/docs/framework/misc/using-libraries-from-partially-trusted-code.md)</ept>.","pos":[91,233],"source":" For more information, see [Using Libraries from Partially Trusted Code](~/docs/framework/misc/using-libraries-from-partially-trusted-code.md)."}]}],"pos":[16612,16951],"yaml":true,"extradata":"MT"},{"content":"Returns an <xref href=\"System.Object\"></xref> value that represents the object to be used for synchronization.","nodes":[{"pos":[0,110],"content":"Returns an <ph id=\"ph1\">&lt;xref href=\"System.Object\"&gt;&lt;/xref&gt;</ph> value that represents the object to be used for synchronization.","source":"Returns an <xref href=\"System.Object\"></xref> value that represents the object to be used for synchronization."}],"pos":[17063,17174],"yaml":true},{"content":"Returns an <xref href=\"System.Collections.IEnumerator\"></xref> that iterates through the <xref href=\"System.Management.ManagementObjectCollection\"></xref>.","nodes":[{"pos":[0,155],"content":"Returns an <ph id=\"ph1\">&lt;xref href=\"System.Collections.IEnumerator\"&gt;&lt;/xref&gt;</ph> that iterates through the <ph id=\"ph2\">&lt;xref href=\"System.Management.ManagementObjectCollection\"&gt;&lt;/xref&gt;</ph>.","source":"Returns an <xref href=\"System.Collections.IEnumerator\"></xref> that iterates through the <xref href=\"System.Management.ManagementObjectCollection\"></xref>."}],"pos":[18371,18527],"yaml":true},{"content":"[Visual Basic, C#]  \n  \n The `foreach` statement of the C# language (`for each` in Visual Basic) hides the complexity of the enumerators.  Therefore, using `foreach` is recommended, instead of directly manipulating the enumerator.  \n  \n Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.  \n  \n Initially, the enumerator is positioned before the first element in the collection. <xref:System.Collections.IEnumerator.Reset%2A> also brings the enumerator back to this position. At this position, calling <xref:System.Collections.IEnumerator.Current%2A> throws an exception. Therefore, you must call <xref:System.Collections.IEnumerator.MoveNext%2A> to advance the enumerator to the first element of the collection before reading the value of <xref:System.Collections.IEnumerator.Current%2A>.  \n  \n <xref:System.Collections.IEnumerator.Current%2A> returns the same object until either <xref:System.Collections.IEnumerator.MoveNext%2A> or <xref:System.Collections.IEnumerator.Reset%2A> is called. <xref:System.Collections.IEnumerator.MoveNext%2A> sets <xref:System.Collections.IEnumerator.Current%2A> to the next element.  \n  \n If <xref:System.Collections.IEnumerator.MoveNext%2A> passes the end of the collection, the enumerator is positioned after the last element in the collection and <xref:System.Collections.IEnumerator.MoveNext%2A> returns `false`. When the enumerator is at this position, subsequent calls to <xref:System.Collections.IEnumerator.MoveNext%2A> also return `false`. If the last call to <xref:System.Collections.IEnumerator.MoveNext%2A> returned `false`, calling <xref:System.Collections.IEnumerator.Current%2A> throws an exception. To set <xref:System.Collections.IEnumerator.Current%2A> to the first element of the collection again, you can call <xref:System.Collections.IEnumerator.Reset%2A> followed by <xref:System.Collections.IEnumerator.MoveNext%2A>.  \n  \n An enumerator remains valid as long as the collection remains unchanged. If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and the next call to <xref:System.Collections.IEnumerator.MoveNext%2A> or <xref:System.Collections.IEnumerator.Reset%2A> throws an <xref:System.InvalidOperationException>. If the collection is modified between <xref:System.Collections.IEnumerator.MoveNext%2A> and <xref:System.Collections.IEnumerator.Current%2A>, <xref:System.Collections.IEnumerator.Current%2A> returns the element that it is set to, even if the enumerator is already invalidated.  \n  \n The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread safe procedure. Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception. To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.  \n  \n This method is an O(1) operation.","nodes":[{"pos":[0,18],"content":"[Visual Basic, C#]","nodes":[{"content":"[Visual Basic, C#]","pos":[0,18]}]},{"pos":[25,230],"content":"The `foreach` statement of the C# language (`for each` in Visual Basic) hides the complexity of the enumerators.  Therefore, using `foreach` is recommended, instead of directly manipulating the enumerator.","nodes":[{"content":"The <ph id=\"ph1\">`foreach`</ph> statement of the C# language (<ph id=\"ph2\">`for each`</ph> in Visual Basic) hides the complexity of the enumerators.","pos":[0,112],"source":"The `foreach` statement of the C# language (`for each` in Visual Basic) hides the complexity of the enumerators."},{"content":"Therefore, using <ph id=\"ph1\">`foreach`</ph> is recommended, instead of directly manipulating the enumerator.","pos":[114,205],"source":"  Therefore, using `foreach` is recommended, instead of directly manipulating the enumerator."}]},{"pos":[237,357],"content":"Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.","nodes":[{"content":"Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.","pos":[0,120]}]},{"pos":[364,858],"content":"Initially, the enumerator is positioned before the first element in the collection. <xref:System.Collections.IEnumerator.Reset%2A> also brings the enumerator back to this position. At this position, calling <xref:System.Collections.IEnumerator.Current%2A> throws an exception. Therefore, you must call <xref:System.Collections.IEnumerator.MoveNext%2A> to advance the enumerator to the first element of the collection before reading the value of <xref:System.Collections.IEnumerator.Current%2A>.","nodes":[{"content":"Initially, the enumerator is positioned before the first element in the collection. <xref:System.Collections.IEnumerator.Reset%2A> also brings the enumerator back to this position. At this position, calling <xref:System.Collections.IEnumerator.Current%2A> throws an exception. Therefore, you must call <xref:System.Collections.IEnumerator.MoveNext%2A> to advance the enumerator to the first element of the collection before reading the value of <xref:System.Collections.IEnumerator.Current%2A>.","pos":[0,494],"nodes":[{"content":"Initially, the enumerator is positioned before the first element in the collection.","pos":[0,83]},{"content":"<ph id=\"ph1\">&lt;xref:System.Collections.IEnumerator.Reset%2A&gt;</ph> also brings the enumerator back to this position.","pos":[84,180],"source":" <xref:System.Collections.IEnumerator.Reset%2A> also brings the enumerator back to this position."},{"content":"At this position, calling <ph id=\"ph1\">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> throws an exception.","pos":[181,276],"source":" At this position, calling <xref:System.Collections.IEnumerator.Current%2A> throws an exception."},{"content":"Therefore, you must call <ph id=\"ph1\">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> to advance the enumerator to the first element of the collection before reading the value of <ph id=\"ph2\">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph>.","pos":[277,494],"source":" Therefore, you must call <xref:System.Collections.IEnumerator.MoveNext%2A> to advance the enumerator to the first element of the collection before reading the value of <xref:System.Collections.IEnumerator.Current%2A>."}]}]},{"pos":[865,1186],"content":"<xref:System.Collections.IEnumerator.Current%2A> returns the same object until either <xref:System.Collections.IEnumerator.MoveNext%2A> or <xref:System.Collections.IEnumerator.Reset%2A> is called. <xref:System.Collections.IEnumerator.MoveNext%2A> sets <xref:System.Collections.IEnumerator.Current%2A> to the next element.","nodes":[{"content":"<xref:System.Collections.IEnumerator.Current%2A> returns the same object until either <xref:System.Collections.IEnumerator.MoveNext%2A> or <xref:System.Collections.IEnumerator.Reset%2A> is called. <xref:System.Collections.IEnumerator.MoveNext%2A> sets <xref:System.Collections.IEnumerator.Current%2A> to the next element.","pos":[0,321],"nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> returns the same object until either <ph id=\"ph2\">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> or <ph id=\"ph3\">&lt;xref:System.Collections.IEnumerator.Reset%2A&gt;</ph> is called.","pos":[0,196],"source":"<xref:System.Collections.IEnumerator.Current%2A> returns the same object until either <xref:System.Collections.IEnumerator.MoveNext%2A> or <xref:System.Collections.IEnumerator.Reset%2A> is called."},{"content":"<ph id=\"ph1\">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> sets <ph id=\"ph2\">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> to the next element.","pos":[197,321],"source":" <xref:System.Collections.IEnumerator.MoveNext%2A> sets <xref:System.Collections.IEnumerator.Current%2A> to the next element."}]}]},{"pos":[1193,1943],"content":"If <xref:System.Collections.IEnumerator.MoveNext%2A> passes the end of the collection, the enumerator is positioned after the last element in the collection and <xref:System.Collections.IEnumerator.MoveNext%2A> returns `false`. When the enumerator is at this position, subsequent calls to <xref:System.Collections.IEnumerator.MoveNext%2A> also return `false`. If the last call to <xref:System.Collections.IEnumerator.MoveNext%2A> returned `false`, calling <xref:System.Collections.IEnumerator.Current%2A> throws an exception. To set <xref:System.Collections.IEnumerator.Current%2A> to the first element of the collection again, you can call <xref:System.Collections.IEnumerator.Reset%2A> followed by <xref:System.Collections.IEnumerator.MoveNext%2A>.","nodes":[{"content":"If <ph id=\"ph1\">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> passes the end of the collection, the enumerator is positioned after the last element in the collection and <ph id=\"ph2\">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> returns <ph id=\"ph3\">`false`</ph>.","pos":[0,227],"source":"If <xref:System.Collections.IEnumerator.MoveNext%2A> passes the end of the collection, the enumerator is positioned after the last element in the collection and <xref:System.Collections.IEnumerator.MoveNext%2A> returns `false`."},{"content":"When the enumerator is at this position, subsequent calls to <ph id=\"ph1\">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> also return <ph id=\"ph2\">`false`</ph>.","pos":[228,359],"source":" When the enumerator is at this position, subsequent calls to <xref:System.Collections.IEnumerator.MoveNext%2A> also return `false`."},{"content":"If the last call to <ph id=\"ph1\">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> returned <ph id=\"ph2\">`false`</ph>, calling <ph id=\"ph3\">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> throws an exception.","pos":[360,525],"source":" If the last call to <xref:System.Collections.IEnumerator.MoveNext%2A> returned `false`, calling <xref:System.Collections.IEnumerator.Current%2A> throws an exception."},{"content":"To set <ph id=\"ph1\">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> to the first element of the collection again, you can call <ph id=\"ph2\">&lt;xref:System.Collections.IEnumerator.Reset%2A&gt;</ph> followed by <ph id=\"ph3\">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph>.","pos":[526,750],"source":" To set <xref:System.Collections.IEnumerator.Current%2A> to the first element of the collection again, you can call <xref:System.Collections.IEnumerator.Reset%2A> followed by <xref:System.Collections.IEnumerator.MoveNext%2A>."}]},{"pos":[1950,2603],"content":"An enumerator remains valid as long as the collection remains unchanged. If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and the next call to <xref:System.Collections.IEnumerator.MoveNext%2A> or <xref:System.Collections.IEnumerator.Reset%2A> throws an <xref:System.InvalidOperationException>. If the collection is modified between <xref:System.Collections.IEnumerator.MoveNext%2A> and <xref:System.Collections.IEnumerator.Current%2A>, <xref:System.Collections.IEnumerator.Current%2A> returns the element that it is set to, even if the enumerator is already invalidated.","nodes":[{"content":"An enumerator remains valid as long as the collection remains unchanged. If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and the next call to <xref:System.Collections.IEnumerator.MoveNext%2A> or <xref:System.Collections.IEnumerator.Reset%2A> throws an <xref:System.InvalidOperationException>. If the collection is modified between <xref:System.Collections.IEnumerator.MoveNext%2A> and <xref:System.Collections.IEnumerator.Current%2A>, <xref:System.Collections.IEnumerator.Current%2A> returns the element that it is set to, even if the enumerator is already invalidated.","pos":[0,653],"nodes":[{"content":"An enumerator remains valid as long as the collection remains unchanged.","pos":[0,72]},{"content":"If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and the next call to <ph id=\"ph1\">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> or <ph id=\"ph2\">&lt;xref:System.Collections.IEnumerator.Reset%2A&gt;</ph> throws an <ph id=\"ph3\">&lt;xref:System.InvalidOperationException&gt;</ph>.","pos":[73,376],"source":" If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and the next call to <xref:System.Collections.IEnumerator.MoveNext%2A> or <xref:System.Collections.IEnumerator.Reset%2A> throws an <xref:System.InvalidOperationException>."},{"content":"If the collection is modified between <ph id=\"ph1\">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph>, <ph id=\"ph3\">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> returns the element that it is set to, even if the enumerator is already invalidated.","pos":[377,653],"source":" If the collection is modified between <xref:System.Collections.IEnumerator.MoveNext%2A> and <xref:System.Collections.IEnumerator.Current%2A>, <xref:System.Collections.IEnumerator.Current%2A> returns the element that it is set to, even if the enumerator is already invalidated."}]}]},{"pos":[2610,3084],"content":"The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread safe procedure. Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception. To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.","nodes":[{"content":"The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread safe procedure. Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception. To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.","pos":[0,474],"nodes":[{"content":"The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread safe procedure.","pos":[0,154]},{"content":"Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception.","pos":[155,292]},{"content":"To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.","pos":[293,474]}]}]},{"pos":[3091,3124],"content":"This method is an O(1) operation.","nodes":[{"content":"This method is an O(1) operation.","pos":[0,33]}]}],"pos":[18538,21681],"yaml":true,"extradata":"MT"},{"content":"An <xref href=\"System.Collections.IEnumerator\"></xref> for the <xref href=\"System.Management.ManagementObjectCollection\"></xref>.","nodes":[{"pos":[0,129],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Collections.IEnumerator\"&gt;&lt;/xref&gt;</ph> for the <ph id=\"ph2\">&lt;xref href=\"System.Management.ManagementObjectCollection\"&gt;&lt;/xref&gt;</ph>.","source":"An <xref href=\"System.Collections.IEnumerator\"></xref> for the <xref href=\"System.Management.ManagementObjectCollection\"></xref>."}],"pos":[21858,21988],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Management.ManagementObjectCollection\n  commentId: T:System.Management.ManagementObjectCollection\n  id: ManagementObjectCollection\n  children:\n  - System.Management.ManagementObjectCollection.CopyTo(System.Array,System.Int32)\n  - System.Management.ManagementObjectCollection.CopyTo(System.Management.ManagementBaseObject[],System.Int32)\n  - System.Management.ManagementObjectCollection.Count\n  - System.Management.ManagementObjectCollection.Dispose\n  - System.Management.ManagementObjectCollection.Finalize\n  - System.Management.ManagementObjectCollection.GetEnumerator\n  - System.Management.ManagementObjectCollection.IsSynchronized\n  - System.Management.ManagementObjectCollection.SyncRoot\n  - System.Management.ManagementObjectCollection.System#Collections#IEnumerable#GetEnumerator\n  langs:\n  - csharp\n  name: ManagementObjectCollection\n  nameWithType: ManagementObjectCollection\n  fullName: System.Management.ManagementObjectCollection\n  type: Class\n  assemblies:\n  - System.Management\n  namespace: System.Management\n  summary: Represents different collections of management objects retrieved through WMI. The objects in this collection are of <xref href=\"System.Management.ManagementBaseObject\"></xref>-derived types, including <xref href=\"System.Management.ManagementObject\"></xref> and <xref href=\"System.Management.ManagementClass\"></xref>. The collection can be the result of a WMI query executed through a <xref href=\"System.Management.ManagementObjectSearcher\"></xref>, or an enumeration of management objects of a specified type retrieved through a <xref href=\"System.Management.ManagementClass\"></xref> representing that type. In addition, this can be a collection of management objects related in a specified way to a specific management object - in this case the collection would be retrieved through a method such as <xref href=\"System.Management.ManagementObject.GetRelated\"></xref>. The collection can be walked using the <xref href=\"System.Management.ManagementObjectCollection.ManagementObjectEnumerator\"></xref> and objects in it can be inspected or manipulated for various management tasks.\n  syntax:\n    content: 'public class ManagementObjectCollection : IDisposable, System.Collections.ICollection'\n  inheritance:\n  - System.Object\n  implements:\n  - System.Collections.ICollection\n  - System.IDisposable\n  inheritedMembers:\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.ToString\n  extensionMethods:\n  - System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)\n  - System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)\n  - System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)\n  - System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Management/ManagementObjectCollection.xml\n  ms.technology:\n  - dotnet-standard\n  manager: jillfra\n- uid: System.Management.ManagementObjectCollection.CopyTo(System.Array,System.Int32)\n  commentId: M:System.Management.ManagementObjectCollection.CopyTo(System.Array,System.Int32)\n  id: CopyTo(System.Array,System.Int32)\n  parent: System.Management.ManagementObjectCollection\n  langs:\n  - csharp\n  name: CopyTo(Array, Int32)\n  nameWithType: ManagementObjectCollection.CopyTo(Array, Int32)\n  fullName: ManagementObjectCollection.CopyTo(Array, Int32)\n  type: Method\n  assemblies:\n  - System.Management\n  namespace: System.Management\n  summary: Copies the collection to an array.\n  remarks: \"## .NET Framework Security  \\n Full trust for the immediate caller. This member cannot be used by partially trusted code. For more information, see [Using Libraries from Partially Trusted Code](~/docs/framework/misc/using-libraries-from-partially-trusted-code.md).\"\n  syntax:\n    content: public void CopyTo (Array array, int index);\n    parameters:\n    - id: array\n      type: System.Array\n      description: An array to copy to.\n    - id: index\n      type: System.Int32\n      description: The index to start from.\n  overload: System.Management.ManagementObjectCollection.CopyTo*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Management/ManagementObjectCollection.xml\n  ms.technology:\n  - dotnet-standard\n  manager: jillfra\n- uid: System.Management.ManagementObjectCollection.CopyTo(System.Management.ManagementBaseObject[],System.Int32)\n  commentId: M:System.Management.ManagementObjectCollection.CopyTo(System.Management.ManagementBaseObject[],System.Int32)\n  id: CopyTo(System.Management.ManagementBaseObject[],System.Int32)\n  parent: System.Management.ManagementObjectCollection\n  langs:\n  - csharp\n  name: CopyTo(ManagementBaseObject[], Int32)\n  nameWithType: ManagementObjectCollection.CopyTo(ManagementBaseObject[], Int32)\n  fullName: ManagementObjectCollection.CopyTo(ManagementBaseObject[], Int32)\n  type: Method\n  assemblies:\n  - System.Management\n  namespace: System.Management\n  summary: Copies the items in the collection to a <xref href=\"System.Management.ManagementBaseObject\"></xref> array.\n  remarks: \"## .NET Framework Security  \\n Full trust for the immediate caller. This member cannot be used by partially trusted code. For more information, see [Using Libraries from Partially Trusted Code](~/docs/framework/misc/using-libraries-from-partially-trusted-code.md).\"\n  syntax:\n    content: public void CopyTo (System.Management.ManagementBaseObject[] objectCollection, int index);\n    parameters:\n    - id: objectCollection\n      type: System.Management.ManagementBaseObject[]\n      description: The target array.\n    - id: index\n      type: System.Int32\n      description: The index to start from.\n  overload: System.Management.ManagementObjectCollection.CopyTo*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Management/ManagementObjectCollection.xml\n  ms.technology:\n  - dotnet-standard\n  manager: jillfra\n- uid: System.Management.ManagementObjectCollection.Count\n  commentId: P:System.Management.ManagementObjectCollection.Count\n  id: Count\n  parent: System.Management.ManagementObjectCollection\n  langs:\n  - csharp\n  name: Count\n  nameWithType: ManagementObjectCollection.Count\n  fullName: ManagementObjectCollection.Count\n  type: Property\n  assemblies:\n  - System.Management\n  namespace: System.Management\n  summary: Gets a value indicating the number of objects in the collection.\n  remarks: \"This property is very expensive - it requires that all members of the collection be enumerated.  \\n  \\n## Property Value  \\n The number of objects in the collection.  \\n  \\n## .NET Framework Security  \\n Full trust for the immediate caller. This member cannot be used by partially trusted code. For more information, see [Using Libraries from Partially Trusted Code](~/docs/framework/misc/using-libraries-from-partially-trusted-code.md).\"\n  syntax:\n    content: public int Count { get; }\n    return:\n      type: System.Int32\n      description: Returns an <xref href=\"System.Int32\"></xref> value indicating the number of objects in the collection.\n  overload: System.Management.ManagementObjectCollection.Count*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Management/ManagementObjectCollection.xml\n  ms.technology:\n  - dotnet-standard\n  manager: jillfra\n- uid: System.Management.ManagementObjectCollection.Dispose\n  commentId: M:System.Management.ManagementObjectCollection.Dispose\n  id: Dispose\n  parent: System.Management.ManagementObjectCollection\n  langs:\n  - csharp\n  name: Dispose()\n  nameWithType: ManagementObjectCollection.Dispose()\n  fullName: ManagementObjectCollection.Dispose()\n  type: Method\n  assemblies:\n  - System.Management\n  namespace: System.Management\n  summary: Releases resources associated with this object. After this method has been called, an attempt to use this object will result in an <xref href=\"System.ObjectDisposedException\"></xref> being thrown.\n  remarks: \"## .NET Framework Security  \\n Full trust for the immediate caller. This member cannot be used by partially trusted code. For more information, see [Using Libraries from Partially Trusted Code](~/docs/framework/misc/using-libraries-from-partially-trusted-code.md).\"\n  syntax:\n    content: public void Dispose ();\n    parameters: []\n  overload: System.Management.ManagementObjectCollection.Dispose*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Management/ManagementObjectCollection.xml\n  ms.technology:\n  - dotnet-standard\n  manager: jillfra\n- uid: System.Management.ManagementObjectCollection.Finalize\n  commentId: M:System.Management.ManagementObjectCollection.Finalize\n  id: Finalize\n  parent: System.Management.ManagementObjectCollection\n  langs:\n  - csharp\n  name: Finalize()\n  nameWithType: ManagementObjectCollection.Finalize()\n  fullName: ManagementObjectCollection.Finalize()\n  type: Method\n  assemblies:\n  - System.Management\n  namespace: System.Management\n  summary: Disposes of resources the object is holding. This is the destructor for the object. Finalizers are expressed using destructor syntax.\n  remarks: \"## .NET Framework Security  \\n Full trust for the immediate caller. This member cannot be used by partially trusted code. For more information, see [Using Libraries from Partially Trusted Code](~/docs/framework/misc/using-libraries-from-partially-trusted-code.md).\"\n  syntax:\n    content: ~ManagementObjectCollection ();\n    parameters: []\n  overload: System.Management.ManagementObjectCollection.Finalize*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Management/ManagementObjectCollection.xml\n  ms.technology:\n  - dotnet-standard\n  manager: jillfra\n- uid: System.Management.ManagementObjectCollection.GetEnumerator\n  commentId: M:System.Management.ManagementObjectCollection.GetEnumerator\n  id: GetEnumerator\n  parent: System.Management.ManagementObjectCollection\n  langs:\n  - csharp\n  name: GetEnumerator()\n  nameWithType: ManagementObjectCollection.GetEnumerator()\n  fullName: ManagementObjectCollection.GetEnumerator()\n  type: Method\n  assemblies:\n  - System.Management\n  namespace: System.Management\n  summary: Returns the enumerator for the collection.\n  remarks: \"You can only iterate (as in a Visual Basic .NET `For Each` statement or a C# `For` statement) through a forward-only enumerator one time. The memory containing the instances is released by WMI so that the enumerator cannot be rewound. Therefore, the <xref:System.Management.ManagementObjectCollection.Count%2A> method cannot be used since it requires rewinding the enumerator.  \\n  \\n Forward-only enumerators are generally much faster and use less memory than conventional enumerators, but they do not allow calls to  <xref:System.Management.ManagementObjectCollection.ManagementObjectEnumerator.Reset%2A>.  \\n  \\n If an enumerator is rewindable, the objects in the collection will be kept available for multiple enumerations.  \\n  \\n## .NET Framework Security  \\n Full trust for the immediate caller. This member cannot be used by partially trusted code. For more information, see [Using Libraries from Partially Trusted Code](~/docs/framework/misc/using-libraries-from-partially-trusted-code.md).\"\n  syntax:\n    content: public System.Management.ManagementObjectCollection.ManagementObjectEnumerator GetEnumerator ();\n    parameters: []\n    return:\n      type: System.Management.ManagementObjectCollection+ManagementObjectEnumerator\n      description: An <xref href=\"System.Collections.IEnumerator\"></xref> that can be used to iterate through the collection.\n  overload: System.Management.ManagementObjectCollection.GetEnumerator*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Management/ManagementObjectCollection.xml\n  ms.technology:\n  - dotnet-standard\n  manager: jillfra\n- uid: System.Management.ManagementObjectCollection.IsSynchronized\n  commentId: P:System.Management.ManagementObjectCollection.IsSynchronized\n  id: IsSynchronized\n  parent: System.Management.ManagementObjectCollection\n  langs:\n  - csharp\n  name: IsSynchronized\n  nameWithType: ManagementObjectCollection.IsSynchronized\n  fullName: ManagementObjectCollection.IsSynchronized\n  type: Property\n  assemblies:\n  - System.Management\n  namespace: System.Management\n  summary: Gets a value indicating whether the object is synchronized.\n  remarks: \"## Property Value  \\n `true`, if the object is synchronized, otherwise `false`.  \\n  \\n## .NET Framework Security  \\n Full trust for the immediate caller. This member cannot be used by partially trusted code. For more information, see [Using Libraries from Partially Trusted Code](~/docs/framework/misc/using-libraries-from-partially-trusted-code.md).\"\n  syntax:\n    content: public bool IsSynchronized { get; }\n    return:\n      type: System.Boolean\n      description: Returns a <xref href=\"System.Boolean\"></xref> value indicating whether the object is synchronized.\n  overload: System.Management.ManagementObjectCollection.IsSynchronized*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Management/ManagementObjectCollection.xml\n  ms.technology:\n  - dotnet-standard\n  manager: jillfra\n- uid: System.Management.ManagementObjectCollection.SyncRoot\n  commentId: P:System.Management.ManagementObjectCollection.SyncRoot\n  id: SyncRoot\n  parent: System.Management.ManagementObjectCollection\n  langs:\n  - csharp\n  name: SyncRoot\n  nameWithType: ManagementObjectCollection.SyncRoot\n  fullName: ManagementObjectCollection.SyncRoot\n  type: Property\n  assemblies:\n  - System.Management\n  namespace: System.Management\n  summary: Gets the object to be used for synchronization.\n  remarks: \"## Property Value  \\n The object to be used for synchronization.  \\n  \\n## .NET Framework Security  \\n Full trust for the immediate caller. This member cannot be used by partially trusted code. For more information, see [Using Libraries from Partially Trusted Code](~/docs/framework/misc/using-libraries-from-partially-trusted-code.md).\"\n  syntax:\n    content: public object SyncRoot { get; }\n    return:\n      type: System.Object\n      description: Returns an <xref href=\"System.Object\"></xref> value that represents the object to be used for synchronization.\n  overload: System.Management.ManagementObjectCollection.SyncRoot*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Management/ManagementObjectCollection.xml\n  ms.technology:\n  - dotnet-standard\n  manager: jillfra\n- uid: System.Management.ManagementObjectCollection.System#Collections#IEnumerable#GetEnumerator\n  commentId: M:System.Management.ManagementObjectCollection.System#Collections#IEnumerable#GetEnumerator\n  id: System#Collections#IEnumerable#GetEnumerator\n  isEii: true\n  parent: System.Management.ManagementObjectCollection\n  langs:\n  - csharp\n  name: IEnumerable.GetEnumerator()\n  nameWithType: ManagementObjectCollection.IEnumerable.GetEnumerator()\n  fullName: ManagementObjectCollection.IEnumerable.GetEnumerator()\n  type: Method\n  assemblies:\n  - System.Management\n  namespace: System.Management\n  summary: Returns an <xref href=\"System.Collections.IEnumerator\"></xref> that iterates through the <xref href=\"System.Management.ManagementObjectCollection\"></xref>.\n  remarks: \"[Visual Basic, C#]  \\n  \\n The `foreach` statement of the C# language (`for each` in Visual Basic) hides the complexity of the enumerators.  Therefore, using `foreach` is recommended, instead of directly manipulating the enumerator.  \\n  \\n Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.  \\n  \\n Initially, the enumerator is positioned before the first element in the collection. <xref:System.Collections.IEnumerator.Reset%2A> also brings the enumerator back to this position. At this position, calling <xref:System.Collections.IEnumerator.Current%2A> throws an exception. Therefore, you must call <xref:System.Collections.IEnumerator.MoveNext%2A> to advance the enumerator to the first element of the collection before reading the value of <xref:System.Collections.IEnumerator.Current%2A>.  \\n  \\n <xref:System.Collections.IEnumerator.Current%2A> returns the same object until either <xref:System.Collections.IEnumerator.MoveNext%2A> or <xref:System.Collections.IEnumerator.Reset%2A> is called. <xref:System.Collections.IEnumerator.MoveNext%2A> sets <xref:System.Collections.IEnumerator.Current%2A> to the next element.  \\n  \\n If <xref:System.Collections.IEnumerator.MoveNext%2A> passes the end of the collection, the enumerator is positioned after the last element in the collection and <xref:System.Collections.IEnumerator.MoveNext%2A> returns `false`. When the enumerator is at this position, subsequent calls to <xref:System.Collections.IEnumerator.MoveNext%2A> also return `false`. If the last call to <xref:System.Collections.IEnumerator.MoveNext%2A> returned `false`, calling <xref:System.Collections.IEnumerator.Current%2A> throws an exception. To set <xref:System.Collections.IEnumerator.Current%2A> to the first element of the collection again, you can call <xref:System.Collections.IEnumerator.Reset%2A> followed by <xref:System.Collections.IEnumerator.MoveNext%2A>.  \\n  \\n An enumerator remains valid as long as the collection remains unchanged. If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and the next call to <xref:System.Collections.IEnumerator.MoveNext%2A> or <xref:System.Collections.IEnumerator.Reset%2A> throws an <xref:System.InvalidOperationException>. If the collection is modified between <xref:System.Collections.IEnumerator.MoveNext%2A> and <xref:System.Collections.IEnumerator.Current%2A>, <xref:System.Collections.IEnumerator.Current%2A> returns the element that it is set to, even if the enumerator is already invalidated.  \\n  \\n The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread safe procedure. Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception. To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.  \\n  \\n This method is an O(1) operation.\"\n  syntax:\n    content: System.Collections.IEnumerator IEnumerable.GetEnumerator ();\n    parameters: []\n    return:\n      type: System.Collections.IEnumerator\n      description: An <xref href=\"System.Collections.IEnumerator\"></xref> for the <xref href=\"System.Management.ManagementObjectCollection\"></xref>.\n  overload: System.Management.ManagementObjectCollection.System#Collections#IEnumerable#GetEnumerator*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Management/ManagementObjectCollection.xml\n  ms.technology:\n  - dotnet-standard\n  manager: jillfra\nreferences:\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.Management.ManagementObjectCollection.CopyTo(System.Array,System.Int32)\n  parent: System.Management.ManagementObjectCollection\n  isExternal: false\n  name: CopyTo(Array, Int32)\n  nameWithType: ManagementObjectCollection.CopyTo(Array, Int32)\n  fullName: ManagementObjectCollection.CopyTo(Array, Int32)\n- uid: System.Array\n  parent: System\n  isExternal: false\n  name: Array\n  nameWithType: Array\n  fullName: System.Array\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Management.ManagementObjectCollection.CopyTo(System.Management.ManagementBaseObject[],System.Int32)\n  parent: System.Management.ManagementObjectCollection\n  isExternal: false\n  name: CopyTo(ManagementBaseObject[], Int32)\n  nameWithType: ManagementObjectCollection.CopyTo(ManagementBaseObject[], Int32)\n  fullName: ManagementObjectCollection.CopyTo(ManagementBaseObject[], Int32)\n- uid: System.Management.ManagementBaseObject\n  name: ManagementBaseObject\n  nameWithType: ManagementBaseObject\n  fullName: System.Management.ManagementBaseObject\n- uid: System.Management.ManagementBaseObject[]\n  parent: System.Management\n  isExternal: false\n  name: ManagementBaseObject[]\n  nameWithType: ManagementBaseObject[]\n  fullName: System.Management.ManagementBaseObject[]\n  spec.csharp:\n  - uid: System.Management.ManagementBaseObject\n    name: ManagementBaseObject\n    nameWithType: ManagementBaseObject\n    fullName: System.Management.ManagementBaseObject\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Management.ManagementObjectCollection.Count\n  parent: System.Management.ManagementObjectCollection\n  isExternal: false\n  name: Count\n  nameWithType: ManagementObjectCollection.Count\n  fullName: ManagementObjectCollection.Count\n- uid: System.Management.ManagementObjectCollection.Dispose\n  parent: System.Management.ManagementObjectCollection\n  isExternal: false\n  name: Dispose()\n  nameWithType: ManagementObjectCollection.Dispose()\n  fullName: ManagementObjectCollection.Dispose()\n- uid: System.Management.ManagementObjectCollection.Finalize\n  parent: System.Management.ManagementObjectCollection\n  isExternal: false\n  name: Finalize()\n  nameWithType: ManagementObjectCollection.Finalize()\n  fullName: ManagementObjectCollection.Finalize()\n- uid: System.Management.ManagementObjectCollection.GetEnumerator\n  parent: System.Management.ManagementObjectCollection\n  isExternal: false\n  name: GetEnumerator()\n  nameWithType: ManagementObjectCollection.GetEnumerator()\n  fullName: ManagementObjectCollection.GetEnumerator()\n- uid: System.Management.ManagementObjectCollection\n  parent: System.Management\n  isExternal: false\n  name: ManagementObjectCollection\n  nameWithType: ManagementObjectCollection\n  fullName: System.Management.ManagementObjectCollection+ManagementObjectEnumerator\n- uid: System.Management.ManagementObjectCollection.IsSynchronized\n  parent: System.Management.ManagementObjectCollection\n  isExternal: false\n  name: IsSynchronized\n  nameWithType: ManagementObjectCollection.IsSynchronized\n  fullName: ManagementObjectCollection.IsSynchronized\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Management.ManagementObjectCollection.SyncRoot\n  parent: System.Management.ManagementObjectCollection\n  isExternal: false\n  name: SyncRoot\n  nameWithType: ManagementObjectCollection.SyncRoot\n  fullName: ManagementObjectCollection.SyncRoot\n- uid: System.Management.ManagementObjectCollection.System#Collections#IEnumerable#GetEnumerator\n  parent: System.Management.ManagementObjectCollection\n  isExternal: false\n  name: IEnumerable.GetEnumerator()\n  nameWithType: ManagementObjectCollection.IEnumerable.GetEnumerator()\n  fullName: ManagementObjectCollection.IEnumerable.GetEnumerator()\n- uid: System.Collections.IEnumerator\n  parent: System.Collections\n  isExternal: false\n  name: IEnumerator\n  nameWithType: IEnumerator\n  fullName: System.Collections.IEnumerator\n- uid: System.Management.ManagementObjectCollection.CopyTo*\n  parent: System.Management.ManagementObjectCollection\n  isExternal: false\n  name: CopyTo\n  nameWithType: ManagementObjectCollection.CopyTo\n  fullName: ManagementObjectCollection.CopyTo\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Management/ManagementObjectCollection.xml\n- uid: System.Management.ManagementObjectCollection.Count*\n  parent: System.Management.ManagementObjectCollection\n  isExternal: false\n  name: Count\n  nameWithType: ManagementObjectCollection.Count\n  fullName: ManagementObjectCollection.Count\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Management/ManagementObjectCollection.xml\n- uid: System.Management.ManagementObjectCollection.Dispose*\n  parent: System.Management.ManagementObjectCollection\n  isExternal: false\n  name: Dispose\n  nameWithType: ManagementObjectCollection.Dispose\n  fullName: ManagementObjectCollection.Dispose\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Management/ManagementObjectCollection.xml\n- uid: System.Management.ManagementObjectCollection.Finalize*\n  parent: System.Management.ManagementObjectCollection\n  isExternal: false\n  name: Finalize\n  nameWithType: ManagementObjectCollection.Finalize\n  fullName: ManagementObjectCollection.Finalize\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Management/ManagementObjectCollection.xml\n- uid: System.Management.ManagementObjectCollection.GetEnumerator*\n  parent: System.Management.ManagementObjectCollection\n  isExternal: false\n  name: GetEnumerator\n  nameWithType: ManagementObjectCollection.GetEnumerator\n  fullName: ManagementObjectCollection.GetEnumerator\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Management/ManagementObjectCollection.xml\n- uid: System.Management.ManagementObjectCollection.IsSynchronized*\n  parent: System.Management.ManagementObjectCollection\n  isExternal: false\n  name: IsSynchronized\n  nameWithType: ManagementObjectCollection.IsSynchronized\n  fullName: ManagementObjectCollection.IsSynchronized\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Management/ManagementObjectCollection.xml\n- uid: System.Management.ManagementObjectCollection.SyncRoot*\n  parent: System.Management.ManagementObjectCollection\n  isExternal: false\n  name: SyncRoot\n  nameWithType: ManagementObjectCollection.SyncRoot\n  fullName: ManagementObjectCollection.SyncRoot\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Management/ManagementObjectCollection.xml\n- uid: System.Management.ManagementObjectCollection.System#Collections#IEnumerable#GetEnumerator*\n  parent: System.Management.ManagementObjectCollection\n  isExternal: false\n  name: System.Collections.IEnumerable.GetEnumerator\n  nameWithType: ManagementObjectCollection.System.Collections.IEnumerable.GetEnumerator\n  fullName: ManagementObjectCollection.System.Collections.IEnumerable.GetEnumerator\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Management/ManagementObjectCollection.xml\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: Object.Equals(Object)\n  fullName: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: Object.GetHashCode()\n  fullName: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: false\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: false\n  name: ToString()\n  nameWithType: Object.ToString()\n  fullName: Object.ToString()\n- uid: System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Cast<TResult>(IEnumerable)\n  nameWithType: Enumerable.Cast<TResult>(IEnumerable)\n  fullName: Enumerable.Cast<TResult>(IEnumerable)\n- uid: System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: OfType<TResult>(IEnumerable)\n  nameWithType: Enumerable.OfType<TResult>(IEnumerable)\n  fullName: Enumerable.OfType<TResult>(IEnumerable)\n- uid: System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)\n  parent: System.Linq.ParallelEnumerable\n  isExternal: false\n  name: AsParallel(IEnumerable)\n  nameWithType: ParallelEnumerable.AsParallel(IEnumerable)\n  fullName: ParallelEnumerable.AsParallel(IEnumerable)\n- uid: System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)\n  parent: System.Linq.Queryable\n  isExternal: false\n  name: AsQueryable(IEnumerable)\n  nameWithType: Queryable.AsQueryable(IEnumerable)\n  fullName: Queryable.AsQueryable(IEnumerable)\n- uid: System.Collections.ICollection\n  parent: System.Collections\n  isExternal: false\n  name: ICollection\n  nameWithType: ICollection\n  fullName: System.Collections.ICollection\n- uid: System.IDisposable\n  parent: System\n  isExternal: false\n  name: IDisposable\n  nameWithType: IDisposable\n  fullName: System.IDisposable\n"}