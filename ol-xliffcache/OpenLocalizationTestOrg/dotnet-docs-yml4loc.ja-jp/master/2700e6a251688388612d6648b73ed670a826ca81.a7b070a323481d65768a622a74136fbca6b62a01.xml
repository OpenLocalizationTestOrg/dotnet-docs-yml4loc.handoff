{"nodes":[{"content":"Specifies the name of a file containing the key pair used to generate a strong name.","nodes":[{"pos":[0,84],"content":"Specifies the name of a file containing the key pair used to generate a strong name.","nodes":[{"content":"Specifies the name of a file containing the key pair used to generate a strong name.","pos":[0,84]}]}],"pos":[577,662],"yaml":true},{"content":"When building a strong-named assembly, the author must supply either this attribute or <xref:System.Reflection.AssemblyKeyNameAttribute>. If <xref:System.Reflection.AssemblyDelaySignAttribute> has also been specified, it is likely that this file will only contain the public key.  \n  \n An example of the syntax is `[assembly:AssemblyKeyFileAttribute(\"myKey.snk\")]`.  \n  \n> [!CAUTION]\n>  Since the path and file name persist, ensure that the string you use with `AssemblyKeyFileAttribute` does not contain sensitive information.","nodes":[{"pos":[0,279],"content":"When building a strong-named assembly, the author must supply either this attribute or <xref:System.Reflection.AssemblyKeyNameAttribute>. If <xref:System.Reflection.AssemblyDelaySignAttribute> has also been specified, it is likely that this file will only contain the public key.","nodes":[{"content":"When building a strong-named assembly, the author must supply either this attribute or <xref:System.Reflection.AssemblyKeyNameAttribute>. If <xref:System.Reflection.AssemblyDelaySignAttribute> has also been specified, it is likely that this file will only contain the public key.","pos":[0,279],"nodes":[{"content":"When building a strong-named assembly, the author must supply either this attribute or <ph id=\"ph1\">&lt;xref:System.Reflection.AssemblyKeyNameAttribute&gt;</ph>.","pos":[0,137],"source":"When building a strong-named assembly, the author must supply either this attribute or <xref:System.Reflection.AssemblyKeyNameAttribute>."},{"content":"If <ph id=\"ph1\">&lt;xref:System.Reflection.AssemblyDelaySignAttribute&gt;</ph> has also been specified, it is likely that this file will only contain the public key.","pos":[138,279],"source":" If <xref:System.Reflection.AssemblyDelaySignAttribute> has also been specified, it is likely that this file will only contain the public key."}]}]},{"pos":[286,365],"content":"An example of the syntax is <ph id=\"ph1\">`[assembly:AssemblyKeyFileAttribute(\"myKey.snk\")]`</ph>.","source":"An example of the syntax is `[assembly:AssemblyKeyFileAttribute(\"myKey.snk\")]`."},{"pos":[373,527],"content":"[!CAUTION]\n Since the path and file name persist, ensure that the string you use with `AssemblyKeyFileAttribute` does not contain sensitive information.","leadings":["","> "],"nodes":[{"content":"Since the path and file name persist, ensure that the string you use with <ph id=\"ph1\">`AssemblyKeyFileAttribute`</ph> does not contain sensitive information.","pos":[12,152],"source":" Since the path and file name persist, ensure that the string you use with `AssemblyKeyFileAttribute` does not contain sensitive information."}]}],"pos":[673,1210],"yaml":true,"extradata":"MT"},{"content":"Initializes a new instance of the `AssemblyKeyFileAttribute` class with the name of the file containing the key pair to generate a strong name for the assembly being attributed.","nodes":[{"pos":[0,177],"content":"Initializes a new instance of the <ph id=\"ph1\">`AssemblyKeyFileAttribute`</ph> class with the name of the file containing the key pair to generate a strong name for the assembly being attributed.","source":"Initializes a new instance of the `AssemblyKeyFileAttribute` class with the name of the file containing the key pair to generate a strong name for the assembly being attributed."}],"pos":[7891,8069],"yaml":true},{"content":"There is no default path for the <xref:System.Reflection.AssemblyKeyFileAttribute> constructor. The value set by the constructor is interpreted by the linker, or by [!INCLUDE[vsprvsext](~/includes/vsprvsext-md.md)], that invokes the linker.  \n  \n The default setting for the [Al.exe (Assembly Linker)](~/docs/framework/tools/al-exe-assembly-linker.md) tool assumes that the key file is in the current directory. In [!INCLUDE[vsprvslong](~/includes/vsprvslong-md.md)], the Visual Basic and Visual C# compilers build and link to subdirectories of the project directory, so if you put the key file in the project directory the relative path might be \"..\\\\..\\keyfile.snk\" or \"..\\keyfile.snk\" in Visual Basic, or \"..\\\\\\\\..\\\\\\keyfile.snk\" or \"..\\\\\\keyfile.snk\" in C#. For C#, this attribute can be set in the project properties.  \n  \n> [!CAUTION]\n>  Because the path and file name persist, ensure that the string you use with `AssemblyKeyFileAttribute` does not contain sensitive information.","nodes":[{"pos":[0,240],"content":"There is no default path for the <xref:System.Reflection.AssemblyKeyFileAttribute> constructor. The value set by the constructor is interpreted by the linker, or by [!INCLUDE[vsprvsext](~/includes/vsprvsext-md.md)], that invokes the linker.","nodes":[{"content":"There is no default path for the <ph id=\"ph1\">&lt;xref:System.Reflection.AssemblyKeyFileAttribute&gt;</ph> constructor.","pos":[0,95],"source":"There is no default path for the <xref:System.Reflection.AssemblyKeyFileAttribute> constructor."},{"content":"The value set by the constructor is interpreted by the linker, or by <ph id=\"ph1\">[!INCLUDE[vsprvsext](~/includes/vsprvsext-md.md)]</ph>, that invokes the linker.","pos":[96,240],"source":" The value set by the constructor is interpreted by the linker, or by [!INCLUDE[vsprvsext](~/includes/vsprvsext-md.md)], that invokes the linker."}]},{"pos":[247,822],"content":"The default setting for the [Al.exe (Assembly Linker)](~/docs/framework/tools/al-exe-assembly-linker.md) tool assumes that the key file is in the current directory. In [!INCLUDE[vsprvslong](~/includes/vsprvslong-md.md)], the Visual Basic and Visual C# compilers build and link to subdirectories of the project directory, so if you put the key file in the project directory the relative path might be \"..\\\\..\\keyfile.snk\" or \"..\\keyfile.snk\" in Visual Basic, or \"..\\\\\\\\..\\\\\\keyfile.snk\" or \"..\\\\\\keyfile.snk\" in C#. For C#, this attribute can be set in the project properties.","nodes":[{"content":"The default setting for the <bpt id=\"p1\">[</bpt>Al.exe (Assembly Linker)<ept id=\"p1\">](~/docs/framework/tools/al-exe-assembly-linker.md)</ept> tool assumes that the key file is in the current directory.","pos":[0,164],"source":"The default setting for the [Al.exe (Assembly Linker)](~/docs/framework/tools/al-exe-assembly-linker.md) tool assumes that the key file is in the current directory."},{"content":"In <ph id=\"ph1\">[!INCLUDE[vsprvslong](~/includes/vsprvslong-md.md)]</ph>, the Visual Basic and Visual C# compilers build and link to subdirectories of the project directory, so if you put the key file in the project directory the relative path might be \"..<ph id=\"ph2\">\\\\</ph>..\\keyfile.snk\" or \"..\\keyfile.snk\" in Visual Basic, or \"..<ph id=\"ph3\">\\\\</ph><ph id=\"ph4\">\\\\</ph>..<ph id=\"ph5\">\\\\</ph>\\keyfile.snk\" or \"..<ph id=\"ph6\">\\\\</ph>\\keyfile.snk\" in C#.","pos":[165,514],"source":" In [!INCLUDE[vsprvslong](~/includes/vsprvslong-md.md)], the Visual Basic and Visual C# compilers build and link to subdirectories of the project directory, so if you put the key file in the project directory the relative path might be \"..\\\\..\\keyfile.snk\" or \"..\\keyfile.snk\" in Visual Basic, or \"..\\\\\\\\..\\\\\\keyfile.snk\" or \"..\\\\\\keyfile.snk\" in C#."},{"content":"For C#, this attribute can be set in the project properties.","pos":[515,575]}]},{"pos":[830,986],"content":"[!CAUTION]\n Because the path and file name persist, ensure that the string you use with `AssemblyKeyFileAttribute` does not contain sensitive information.","leadings":["","> "],"nodes":[{"content":"Because the path and file name persist, ensure that the string you use with <ph id=\"ph1\">`AssemblyKeyFileAttribute`</ph> does not contain sensitive information.","pos":[12,154],"source":" Because the path and file name persist, ensure that the string you use with `AssemblyKeyFileAttribute` does not contain sensitive information."}]}],"pos":[8080,9096],"yaml":true,"extradata":"MT"},{"content":"The name of the file containing the key pair.","nodes":[{"pos":[0,45],"content":"The name of the file containing the key pair.","nodes":[{"content":"The name of the file containing the key pair.","pos":[0,45]}]}],"pos":[9248,9294],"yaml":true},{"content":"Gets the name of the file containing the key pair used to generate a strong name for the attributed assembly.","nodes":[{"pos":[0,109],"content":"Gets the name of the file containing the key pair used to generate a strong name for the attributed assembly.","nodes":[{"content":"Gets the name of the file containing the key pair used to generate a strong name for the attributed assembly.","pos":[0,109]}]}],"pos":[10898,11008],"yaml":true},{"content":"> [!CAUTION]\n>  Because the path and file name persist, ensure that the string you use with `AssemblyKeyFileAttribute` does not contain sensitive information.","nodes":[{"pos":[2,158],"content":"[!CAUTION]\n Because the path and file name persist, ensure that the string you use with `AssemblyKeyFileAttribute` does not contain sensitive information.","leadings":["","> "],"nodes":[{"content":"Because the path and file name persist, ensure that the string you use with <ph id=\"ph1\">`AssemblyKeyFileAttribute`</ph> does not contain sensitive information.","pos":[12,154],"source":" Because the path and file name persist, ensure that the string you use with `AssemblyKeyFileAttribute` does not contain sensitive information."}]}],"pos":[11019,11190],"yaml":true,"extradata":"MT"},{"content":"A string containing the name of the file that contains the key pair.","nodes":[{"pos":[0,68],"content":"A string containing the name of the file that contains the key pair.","nodes":[{"content":"A string containing the name of the file that contains the key pair.","pos":[0,68]}]}],"pos":[11301,11370],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Reflection.AssemblyKeyFileAttribute\n  commentId: T:System.Reflection.AssemblyKeyFileAttribute\n  id: AssemblyKeyFileAttribute\n  children:\n  - System.Reflection.AssemblyKeyFileAttribute.#ctor(System.String)\n  - System.Reflection.AssemblyKeyFileAttribute.KeyFile\n  langs:\n  - csharp\n  name: AssemblyKeyFileAttribute\n  nameWithType: AssemblyKeyFileAttribute\n  fullName: System.Reflection.AssemblyKeyFileAttribute\n  type: Class\n  assemblies:\n  - System.Runtime\n  - mscorlib\n  - netstandard\n  namespace: System.Reflection\n  summary: Specifies the name of a file containing the key pair used to generate a strong name.\n  remarks: \"When building a strong-named assembly, the author must supply either this attribute or <xref:System.Reflection.AssemblyKeyNameAttribute>. If <xref:System.Reflection.AssemblyDelaySignAttribute> has also been specified, it is likely that this file will only contain the public key.  \\n  \\n An example of the syntax is `[assembly:AssemblyKeyFileAttribute(\\\"myKey.snk\\\")]`.  \\n  \\n> [!CAUTION]\\n>  Since the path and file name persist, ensure that the string you use with `AssemblyKeyFileAttribute` does not contain sensitive information.\"\n  example:\n  - \"The following code example shows the use of the <xref:System.Reflection.AssemblyDelaySignAttribute> attribute with the <xref:System.Reflection.AssemblyKeyFileAttribute>. To compile this example, you must create a strong-name key file named TestPublicKey.snk using the [Sn.exe (Strong Name Tool)](~/docs/framework/tools/sn-exe-strong-name-tool.md):  \\n  \\n```  \\nsn -k TestPublicKey.snk   \\n```  \\n  \\n Compile the example as a .dll. If you compile from the command line, use the `/t:library` option for C# or Visual Basic, or the `/LD` linker option for Visual C++.  \\n  \\n [!code-cpp[AssemblyDelaySignattribute#1](~/samples/snippets/cpp/VS_Snippets_CLR/AssemblyDelaySignAttribute/cpp/source.cpp#1)]\\n [!code-csharp[AssemblyDelaySignattribute#1](~/samples/snippets/csharp/VS_Snippets_CLR/AssemblyDelaySignAttribute/cs/source.cs#1)]\\n [!code-vb[AssemblyDelaySignattribute#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/AssemblyDelaySignAttribute/vb/source.vb#1)]\"\n  syntax:\n    content: >-\n      [System.AttributeUsage(System.AttributeTargets.Assembly, Inherited=false)]\n\n      [System.Runtime.InteropServices.ComVisible(true)]\n\n      public sealed class AssemblyKeyFileAttribute : Attribute\n  inheritance:\n  - System.Object\n  - System.Attribute\n  implements: []\n  inheritedMembers:\n  - System.Attribute.Equals(System.Object)\n  - System.Attribute.GetCustomAttribute(System.Reflection.Assembly,System.Type)\n  - System.Attribute.GetCustomAttribute(System.Reflection.Assembly,System.Type,System.Boolean)\n  - System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo,System.Type)\n  - System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo,System.Type,System.Boolean)\n  - System.Attribute.GetCustomAttribute(System.Reflection.Module,System.Type)\n  - System.Attribute.GetCustomAttribute(System.Reflection.Module,System.Type,System.Boolean)\n  - System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo,System.Type)\n  - System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo,System.Type,System.Boolean)\n  - System.Attribute.GetCustomAttributes(System.Reflection.Assembly)\n  - System.Attribute.GetCustomAttributes(System.Reflection.Assembly,System.Boolean)\n  - System.Attribute.GetCustomAttributes(System.Reflection.Assembly,System.Type)\n  - System.Attribute.GetCustomAttributes(System.Reflection.Assembly,System.Type,System.Boolean)\n  - System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo)\n  - System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo,System.Boolean)\n  - System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo,System.Type)\n  - System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo,System.Type,System.Boolean)\n  - System.Attribute.GetCustomAttributes(System.Reflection.Module)\n  - System.Attribute.GetCustomAttributes(System.Reflection.Module,System.Boolean)\n  - System.Attribute.GetCustomAttributes(System.Reflection.Module,System.Type)\n  - System.Attribute.GetCustomAttributes(System.Reflection.Module,System.Type,System.Boolean)\n  - System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo)\n  - System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo,System.Boolean)\n  - System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo,System.Type)\n  - System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo,System.Type,System.Boolean)\n  - System.Attribute.GetHashCode\n  - System.Attribute.IsDefaultAttribute\n  - System.Attribute.IsDefined(System.Reflection.Assembly,System.Type)\n  - System.Attribute.IsDefined(System.Reflection.Assembly,System.Type,System.Boolean)\n  - System.Attribute.IsDefined(System.Reflection.MemberInfo,System.Type)\n  - System.Attribute.IsDefined(System.Reflection.MemberInfo,System.Type,System.Boolean)\n  - System.Attribute.IsDefined(System.Reflection.Module,System.Type)\n  - System.Attribute.IsDefined(System.Reflection.Module,System.Type,System.Boolean)\n  - System.Attribute.IsDefined(System.Reflection.ParameterInfo,System.Type)\n  - System.Attribute.IsDefined(System.Reflection.ParameterInfo,System.Type,System.Boolean)\n  - System.Attribute.Match(System.Object)\n  - System.Attribute.System#Runtime#InteropServices#_Attribute#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)\n  - System.Attribute.System#Runtime#InteropServices#_Attribute#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)\n  - System.Attribute.System#Runtime#InteropServices#_Attribute#GetTypeInfoCount(System.UInt32@)\n  - System.Attribute.System#Runtime#InteropServices#_Attribute#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)\n  - System.Attribute.TypeId\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.ToString\n  attributes:\n  - type: System.AttributeUsageAttribute\n  - type: System.Runtime.InteropServices.ComVisibleAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/AssemblyKeyFileAttribute.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.AssemblyKeyFileAttribute.#ctor(System.String)\n  commentId: M:System.Reflection.AssemblyKeyFileAttribute.#ctor(System.String)\n  id: '#ctor(System.String)'\n  parent: System.Reflection.AssemblyKeyFileAttribute\n  langs:\n  - csharp\n  name: AssemblyKeyFileAttribute(String)\n  nameWithType: AssemblyKeyFileAttribute.AssemblyKeyFileAttribute(String)\n  fullName: AssemblyKeyFileAttribute.AssemblyKeyFileAttribute(String)\n  type: Constructor\n  assemblies:\n  - System.Runtime\n  - mscorlib\n  - netstandard\n  namespace: System.Reflection\n  summary: Initializes a new instance of the `AssemblyKeyFileAttribute` class with the name of the file containing the key pair to generate a strong name for the assembly being attributed.\n  remarks: \"There is no default path for the <xref:System.Reflection.AssemblyKeyFileAttribute> constructor. The value set by the constructor is interpreted by the linker, or by [!INCLUDE[vsprvsext](~/includes/vsprvsext-md.md)], that invokes the linker.  \\n  \\n The default setting for the [Al.exe (Assembly Linker)](~/docs/framework/tools/al-exe-assembly-linker.md) tool assumes that the key file is in the current directory. In [!INCLUDE[vsprvslong](~/includes/vsprvslong-md.md)], the Visual Basic and Visual C# compilers build and link to subdirectories of the project directory, so if you put the key file in the project directory the relative path might be \\\"..\\\\\\\\..\\\\keyfile.snk\\\" or \\\"..\\\\keyfile.snk\\\" in Visual Basic, or \\\"..\\\\\\\\\\\\\\\\..\\\\\\\\\\\\keyfile.snk\\\" or \\\"..\\\\\\\\\\\\keyfile.snk\\\" in C#. For C#, this attribute can be set in the project properties.  \\n  \\n> [!CAUTION]\\n>  Because the path and file name persist, ensure that the string you use with `AssemblyKeyFileAttribute` does not contain sensitive information.\"\n  syntax:\n    content: public AssemblyKeyFileAttribute (string keyFile);\n    parameters:\n    - id: keyFile\n      type: System.String\n      description: The name of the file containing the key pair.\n  overload: System.Reflection.AssemblyKeyFileAttribute.#ctor*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/AssemblyKeyFileAttribute.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.AssemblyKeyFileAttribute.KeyFile\n  commentId: P:System.Reflection.AssemblyKeyFileAttribute.KeyFile\n  id: KeyFile\n  parent: System.Reflection.AssemblyKeyFileAttribute\n  langs:\n  - csharp\n  name: KeyFile\n  nameWithType: AssemblyKeyFileAttribute.KeyFile\n  fullName: AssemblyKeyFileAttribute.KeyFile\n  type: Property\n  assemblies:\n  - System.Runtime\n  - mscorlib\n  - netstandard\n  namespace: System.Reflection\n  summary: Gets the name of the file containing the key pair used to generate a strong name for the attributed assembly.\n  remarks: >-\n    > [!CAUTION]\n\n    >  Because the path and file name persist, ensure that the string you use with `AssemblyKeyFileAttribute` does not contain sensitive information.\n  syntax:\n    content: public string KeyFile { get; }\n    return:\n      type: System.String\n      description: A string containing the name of the file that contains the key pair.\n  overload: System.Reflection.AssemblyKeyFileAttribute.KeyFile*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/AssemblyKeyFileAttribute.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\nreferences:\n- uid: System.Attribute\n  parent: System\n  isExternal: false\n  name: Attribute\n  nameWithType: Attribute\n  fullName: System.Attribute\n- uid: System.Reflection.AssemblyKeyFileAttribute.#ctor(System.String)\n  parent: System.Reflection.AssemblyKeyFileAttribute\n  isExternal: false\n  name: AssemblyKeyFileAttribute(String)\n  nameWithType: AssemblyKeyFileAttribute.AssemblyKeyFileAttribute(String)\n  fullName: AssemblyKeyFileAttribute.AssemblyKeyFileAttribute(String)\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Reflection.AssemblyKeyFileAttribute.KeyFile\n  parent: System.Reflection.AssemblyKeyFileAttribute\n  isExternal: false\n  name: KeyFile\n  nameWithType: AssemblyKeyFileAttribute.KeyFile\n  fullName: AssemblyKeyFileAttribute.KeyFile\n- uid: System.Reflection.AssemblyKeyFileAttribute.#ctor*\n  parent: System.Reflection.AssemblyKeyFileAttribute\n  isExternal: false\n  name: AssemblyKeyFileAttribute\n  nameWithType: AssemblyKeyFileAttribute.AssemblyKeyFileAttribute\n  fullName: AssemblyKeyFileAttribute.AssemblyKeyFileAttribute\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/AssemblyKeyFileAttribute.xml\n- uid: System.Reflection.AssemblyKeyFileAttribute.KeyFile*\n  parent: System.Reflection.AssemblyKeyFileAttribute\n  isExternal: false\n  name: KeyFile\n  nameWithType: AssemblyKeyFileAttribute.KeyFile\n  fullName: AssemblyKeyFileAttribute.KeyFile\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/AssemblyKeyFileAttribute.xml\n- uid: System.Attribute.Equals(System.Object)\n  parent: System.Attribute\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: Attribute.Equals(Object)\n  fullName: Attribute.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Attribute.GetHashCode\n  parent: System.Attribute\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: Attribute.GetHashCode()\n  fullName: Attribute.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: false\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: false\n  name: ToString()\n  nameWithType: Object.ToString()\n  fullName: Object.ToString()\n- uid: System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo,System.Type,System.Boolean)\n  parent: System.Attribute\n  isExternal: false\n  name: GetCustomAttribute(ParameterInfo, Type, Boolean)\n  nameWithType: Attribute.GetCustomAttribute(ParameterInfo, Type, Boolean)\n  fullName: Attribute.GetCustomAttribute(ParameterInfo, Type, Boolean)\n- uid: System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo,System.Type,System.Boolean)\n  parent: System.Attribute\n  isExternal: false\n  name: GetCustomAttribute(MemberInfo, Type, Boolean)\n  nameWithType: Attribute.GetCustomAttribute(MemberInfo, Type, Boolean)\n  fullName: Attribute.GetCustomAttribute(MemberInfo, Type, Boolean)\n- uid: System.Attribute.GetCustomAttribute(System.Reflection.Assembly,System.Type,System.Boolean)\n  parent: System.Attribute\n  isExternal: false\n  name: GetCustomAttribute(Assembly, Type, Boolean)\n  nameWithType: Attribute.GetCustomAttribute(Assembly, Type, Boolean)\n  fullName: Attribute.GetCustomAttribute(Assembly, Type, Boolean)\n- uid: System.Attribute.GetCustomAttribute(System.Reflection.Module,System.Type,System.Boolean)\n  parent: System.Attribute\n  isExternal: false\n  name: GetCustomAttribute(Module, Type, Boolean)\n  nameWithType: Attribute.GetCustomAttribute(Module, Type, Boolean)\n  fullName: Attribute.GetCustomAttribute(Module, Type, Boolean)\n- uid: System.Attribute.GetCustomAttribute(System.Reflection.Module,System.Type)\n  parent: System.Attribute\n  isExternal: false\n  name: GetCustomAttribute(Module, Type)\n  nameWithType: Attribute.GetCustomAttribute(Module, Type)\n  fullName: Attribute.GetCustomAttribute(Module, Type)\n- uid: System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo,System.Type)\n  parent: System.Attribute\n  isExternal: false\n  name: GetCustomAttribute(MemberInfo, Type)\n  nameWithType: Attribute.GetCustomAttribute(MemberInfo, Type)\n  fullName: Attribute.GetCustomAttribute(MemberInfo, Type)\n- uid: System.Attribute.GetCustomAttribute(System.Reflection.Assembly,System.Type)\n  parent: System.Attribute\n  isExternal: false\n  name: GetCustomAttribute(Assembly, Type)\n  nameWithType: Attribute.GetCustomAttribute(Assembly, Type)\n  fullName: Attribute.GetCustomAttribute(Assembly, Type)\n- uid: System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo,System.Type)\n  parent: System.Attribute\n  isExternal: false\n  name: GetCustomAttribute(ParameterInfo, Type)\n  nameWithType: Attribute.GetCustomAttribute(ParameterInfo, Type)\n  fullName: Attribute.GetCustomAttribute(ParameterInfo, Type)\n- uid: System.Attribute.GetCustomAttributes(System.Reflection.Module,System.Type)\n  parent: System.Attribute\n  isExternal: false\n  name: GetCustomAttributes(Module, Type)\n  nameWithType: Attribute.GetCustomAttributes(Module, Type)\n  fullName: Attribute.GetCustomAttributes(Module, Type)\n- uid: System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo,System.Type,System.Boolean)\n  parent: System.Attribute\n  isExternal: false\n  name: GetCustomAttributes(ParameterInfo, Type, Boolean)\n  nameWithType: Attribute.GetCustomAttributes(ParameterInfo, Type, Boolean)\n  fullName: Attribute.GetCustomAttributes(ParameterInfo, Type, Boolean)\n- uid: System.Attribute.GetCustomAttributes(System.Reflection.Module,System.Type,System.Boolean)\n  parent: System.Attribute\n  isExternal: false\n  name: GetCustomAttributes(Module, Type, Boolean)\n  nameWithType: Attribute.GetCustomAttributes(Module, Type, Boolean)\n  fullName: Attribute.GetCustomAttributes(Module, Type, Boolean)\n- uid: System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo,System.Type,System.Boolean)\n  parent: System.Attribute\n  isExternal: false\n  name: GetCustomAttributes(MemberInfo, Type, Boolean)\n  nameWithType: Attribute.GetCustomAttributes(MemberInfo, Type, Boolean)\n  fullName: Attribute.GetCustomAttributes(MemberInfo, Type, Boolean)\n- uid: System.Attribute.GetCustomAttributes(System.Reflection.Assembly,System.Type,System.Boolean)\n  parent: System.Attribute\n  isExternal: false\n  name: GetCustomAttributes(Assembly, Type, Boolean)\n  nameWithType: Attribute.GetCustomAttributes(Assembly, Type, Boolean)\n  fullName: Attribute.GetCustomAttributes(Assembly, Type, Boolean)\n- uid: System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo,System.Type)\n  parent: System.Attribute\n  isExternal: false\n  name: GetCustomAttributes(ParameterInfo, Type)\n  nameWithType: Attribute.GetCustomAttributes(ParameterInfo, Type)\n  fullName: Attribute.GetCustomAttributes(ParameterInfo, Type)\n- uid: System.Attribute.GetCustomAttributes(System.Reflection.Module,System.Boolean)\n  parent: System.Attribute\n  isExternal: false\n  name: GetCustomAttributes(Module, Boolean)\n  nameWithType: Attribute.GetCustomAttributes(Module, Boolean)\n  fullName: Attribute.GetCustomAttributes(Module, Boolean)\n- uid: System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo,System.Boolean)\n  parent: System.Attribute\n  isExternal: false\n  name: GetCustomAttributes(ParameterInfo, Boolean)\n  nameWithType: Attribute.GetCustomAttributes(ParameterInfo, Boolean)\n  fullName: Attribute.GetCustomAttributes(ParameterInfo, Boolean)\n- uid: System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo,System.Boolean)\n  parent: System.Attribute\n  isExternal: false\n  name: GetCustomAttributes(MemberInfo, Boolean)\n  nameWithType: Attribute.GetCustomAttributes(MemberInfo, Boolean)\n  fullName: Attribute.GetCustomAttributes(MemberInfo, Boolean)\n- uid: System.Attribute.GetCustomAttributes(System.Reflection.Assembly,System.Type)\n  parent: System.Attribute\n  isExternal: false\n  name: GetCustomAttributes(Assembly, Type)\n  nameWithType: Attribute.GetCustomAttributes(Assembly, Type)\n  fullName: Attribute.GetCustomAttributes(Assembly, Type)\n- uid: System.Attribute.GetCustomAttributes(System.Reflection.Assembly,System.Boolean)\n  parent: System.Attribute\n  isExternal: false\n  name: GetCustomAttributes(Assembly, Boolean)\n  nameWithType: Attribute.GetCustomAttributes(Assembly, Boolean)\n  fullName: Attribute.GetCustomAttributes(Assembly, Boolean)\n- uid: System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo)\n  parent: System.Attribute\n  isExternal: false\n  name: GetCustomAttributes(ParameterInfo)\n  nameWithType: Attribute.GetCustomAttributes(ParameterInfo)\n  fullName: Attribute.GetCustomAttributes(ParameterInfo)\n- uid: System.Attribute.GetCustomAttributes(System.Reflection.Module)\n  parent: System.Attribute\n  isExternal: false\n  name: GetCustomAttributes(Module)\n  nameWithType: Attribute.GetCustomAttributes(Module)\n  fullName: Attribute.GetCustomAttributes(Module)\n- uid: System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo)\n  parent: System.Attribute\n  isExternal: false\n  name: GetCustomAttributes(MemberInfo)\n  nameWithType: Attribute.GetCustomAttributes(MemberInfo)\n  fullName: Attribute.GetCustomAttributes(MemberInfo)\n- uid: System.Attribute.GetCustomAttributes(System.Reflection.Assembly)\n  parent: System.Attribute\n  isExternal: false\n  name: GetCustomAttributes(Assembly)\n  nameWithType: Attribute.GetCustomAttributes(Assembly)\n  fullName: Attribute.GetCustomAttributes(Assembly)\n- uid: System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo,System.Type)\n  parent: System.Attribute\n  isExternal: false\n  name: GetCustomAttributes(MemberInfo, Type)\n  nameWithType: Attribute.GetCustomAttributes(MemberInfo, Type)\n  fullName: Attribute.GetCustomAttributes(MemberInfo, Type)\n- uid: System.Attribute.IsDefaultAttribute\n  parent: System.Attribute\n  isExternal: false\n  name: IsDefaultAttribute()\n  nameWithType: Attribute.IsDefaultAttribute()\n  fullName: Attribute.IsDefaultAttribute()\n- uid: System.Attribute.IsDefined(System.Reflection.ParameterInfo,System.Type,System.Boolean)\n  parent: System.Attribute\n  isExternal: false\n  name: IsDefined(ParameterInfo, Type, Boolean)\n  nameWithType: Attribute.IsDefined(ParameterInfo, Type, Boolean)\n  fullName: Attribute.IsDefined(ParameterInfo, Type, Boolean)\n- uid: System.Attribute.IsDefined(System.Reflection.Module,System.Type,System.Boolean)\n  parent: System.Attribute\n  isExternal: false\n  name: IsDefined(Module, Type, Boolean)\n  nameWithType: Attribute.IsDefined(Module, Type, Boolean)\n  fullName: Attribute.IsDefined(Module, Type, Boolean)\n- uid: System.Attribute.IsDefined(System.Reflection.MemberInfo,System.Type,System.Boolean)\n  parent: System.Attribute\n  isExternal: false\n  name: IsDefined(MemberInfo, Type, Boolean)\n  nameWithType: Attribute.IsDefined(MemberInfo, Type, Boolean)\n  fullName: Attribute.IsDefined(MemberInfo, Type, Boolean)\n- uid: System.Attribute.IsDefined(System.Reflection.Assembly,System.Type,System.Boolean)\n  parent: System.Attribute\n  isExternal: false\n  name: IsDefined(Assembly, Type, Boolean)\n  nameWithType: Attribute.IsDefined(Assembly, Type, Boolean)\n  fullName: Attribute.IsDefined(Assembly, Type, Boolean)\n- uid: System.Attribute.IsDefined(System.Reflection.MemberInfo,System.Type)\n  parent: System.Attribute\n  isExternal: false\n  name: IsDefined(MemberInfo, Type)\n  nameWithType: Attribute.IsDefined(MemberInfo, Type)\n  fullName: Attribute.IsDefined(MemberInfo, Type)\n- uid: System.Attribute.IsDefined(System.Reflection.Module,System.Type)\n  parent: System.Attribute\n  isExternal: false\n  name: IsDefined(Module, Type)\n  nameWithType: Attribute.IsDefined(Module, Type)\n  fullName: Attribute.IsDefined(Module, Type)\n- uid: System.Attribute.IsDefined(System.Reflection.Assembly,System.Type)\n  parent: System.Attribute\n  isExternal: false\n  name: IsDefined(Assembly, Type)\n  nameWithType: Attribute.IsDefined(Assembly, Type)\n  fullName: Attribute.IsDefined(Assembly, Type)\n- uid: System.Attribute.IsDefined(System.Reflection.ParameterInfo,System.Type)\n  parent: System.Attribute\n  isExternal: false\n  name: IsDefined(ParameterInfo, Type)\n  nameWithType: Attribute.IsDefined(ParameterInfo, Type)\n  fullName: Attribute.IsDefined(ParameterInfo, Type)\n- uid: System.Attribute.Match(System.Object)\n  parent: System.Attribute\n  isExternal: false\n  name: Match(Object)\n  nameWithType: Attribute.Match(Object)\n  fullName: Attribute.Match(Object)\n- uid: System.Attribute.TypeId\n  parent: System.Attribute\n  isExternal: false\n  name: TypeId\n  nameWithType: Attribute.TypeId\n  fullName: Attribute.TypeId\n- uid: System.Attribute.System#Runtime#InteropServices#_Attribute#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)\n  parent: System.Attribute\n  isExternal: false\n  name: _Attribute.GetIDsOfNames(Guid, IntPtr, UInt32, UInt32, IntPtr)\n  nameWithType: Attribute._Attribute.GetIDsOfNames(Guid, IntPtr, UInt32, UInt32, IntPtr)\n  fullName: Attribute._Attribute.GetIDsOfNames(Guid, IntPtr, UInt32, UInt32, IntPtr)\n- uid: System.Attribute.System#Runtime#InteropServices#_Attribute#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)\n  parent: System.Attribute\n  isExternal: false\n  name: _Attribute.GetTypeInfo(UInt32, UInt32, IntPtr)\n  nameWithType: Attribute._Attribute.GetTypeInfo(UInt32, UInt32, IntPtr)\n  fullName: Attribute._Attribute.GetTypeInfo(UInt32, UInt32, IntPtr)\n- uid: System.Attribute.System#Runtime#InteropServices#_Attribute#GetTypeInfoCount(System.UInt32@)\n  parent: System.Attribute\n  isExternal: false\n  name: _Attribute.GetTypeInfoCount(UInt32)\n  nameWithType: Attribute._Attribute.GetTypeInfoCount(UInt32)\n  fullName: Attribute._Attribute.GetTypeInfoCount(UInt32)\n- uid: System.Attribute.System#Runtime#InteropServices#_Attribute#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)\n  parent: System.Attribute\n  isExternal: false\n  name: _Attribute.Invoke(UInt32, Guid, UInt32, Int16, IntPtr, IntPtr, IntPtr, IntPtr)\n  nameWithType: Attribute._Attribute.Invoke(UInt32, Guid, UInt32, Int16, IntPtr, IntPtr, IntPtr, IntPtr)\n  fullName: Attribute._Attribute.Invoke(UInt32, Guid, UInt32, Int16, IntPtr, IntPtr, IntPtr, IntPtr)\n"}