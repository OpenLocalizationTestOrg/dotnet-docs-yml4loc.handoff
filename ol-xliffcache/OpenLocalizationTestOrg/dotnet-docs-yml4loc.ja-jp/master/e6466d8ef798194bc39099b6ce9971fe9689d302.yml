### YamlMime:ManagedReference
items:
- uid: System.Windows.Input.CommandBinding
  commentId: T:System.Windows.Input.CommandBinding
  id: CommandBinding
  children:
  - System.Windows.Input.CommandBinding.#ctor
  - System.Windows.Input.CommandBinding.#ctor(System.Windows.Input.ICommand)
  - System.Windows.Input.CommandBinding.#ctor(System.Windows.Input.ICommand,System.Windows.Input.ExecutedRoutedEventHandler)
  - System.Windows.Input.CommandBinding.#ctor(System.Windows.Input.ICommand,System.Windows.Input.ExecutedRoutedEventHandler,System.Windows.Input.CanExecuteRoutedEventHandler)
  - System.Windows.Input.CommandBinding.CanExecute
  - System.Windows.Input.CommandBinding.Command
  - System.Windows.Input.CommandBinding.Executed
  - System.Windows.Input.CommandBinding.PreviewCanExecute
  - System.Windows.Input.CommandBinding.PreviewExecuted
  langs:
  - csharp
  name: CommandBinding
  nameWithType: CommandBinding
  fullName: System.Windows.Input.CommandBinding
  type: Class
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: Binds a <xref href="System.Windows.Input.RoutedCommand"></xref> to the event handlers that implement the command.
  remarks: "A <xref:System.Windows.Input.CommandBinding> associates a command with the <xref:System.Windows.Input.CommandBinding.PreviewExecuted>/<xref:System.Windows.Input.CommandBinding.Executed> and <xref:System.Windows.Input.CommandBinding.PreviewCanExecute>/<xref:System.Windows.Input.CommandBinding.CanExecute> events which implement and determine the status of the command.  \n  \n When the <xref:System.Windows.Input.RoutedCommand.Execute%2A> or <xref:System.Windows.Input.RoutedCommand.CanExecute%2A> method of a <xref:System.Windows.Input.RoutedCommand> is called, the <xref:System.Windows.Input.CommandBinding.PreviewExecuted>/<xref:System.Windows.Input.CommandBinding.Executed> or the <xref:System.Windows.Input.CommandBinding.PreviewCanExecute>/<xref:System.Windows.Input.CommandBinding.CanExecute> events are raised on the command target.  If the command target has a <xref:System.Windows.Input.CommandBinding> for the command, the appropriate handlers are called.  If the command target does not have a <xref:System.Windows.Input.CommandBinding> for the command, the events are routed through the element tree until an element that has a <xref:System.Windows.Input.CommandBinding> is found.  \n  \n A <xref:System.Windows.Input.CommandBinding> has limited use with an <xref:System.Windows.Input.ICommand> that is not a<xref:System.Windows.Input.RoutedCommand>.  This is because a <xref:System.Windows.Input.CommandBinding> binds the command to the <xref:System.Windows.Input.ExecutedRoutedEventHandler> and the <xref:System.Windows.Input.CanExecuteRoutedEventHandler> which listen to the <xref:System.Windows.Input.CommandManager.Executed> and <xref:System.Windows.Input.CommandManager.CanExecute> routed events which are raised when the <xref:System.Windows.Input.RoutedCommand.Execute%2A> and <xref:System.Windows.Input.RoutedCommand.CanExecute%2A> method of the <xref:System.Windows.Input.RoutedCommand> are called."
  syntax:
    content: public class CommandBinding
  inheritance:
  - System.Object
  implements: []
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Input/CommandBinding.xml
  ms.technology:
  - dotnet-wpf
  author: stevehoag
  ms.author: shoag
  manager: wpickett
- uid: System.Windows.Input.CommandBinding.#ctor
  commentId: M:System.Windows.Input.CommandBinding.#ctor
  id: '#ctor'
  parent: System.Windows.Input.CommandBinding
  langs:
  - csharp
  name: CommandBinding()
  nameWithType: CommandBinding.CommandBinding()
  fullName: CommandBinding.CommandBinding()
  type: Constructor
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: Initializes a new instance of the <xref href="System.Windows.Input.CommandBinding"></xref> class.
  syntax:
    content: public CommandBinding ();
    parameters: []
  overload: System.Windows.Input.CommandBinding.#ctor*
  exceptions: []
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Input/CommandBinding.xml
  ms.technology:
  - dotnet-wpf
  author: stevehoag
  ms.author: shoag
  manager: wpickett
- uid: System.Windows.Input.CommandBinding.#ctor(System.Windows.Input.ICommand)
  commentId: M:System.Windows.Input.CommandBinding.#ctor(System.Windows.Input.ICommand)
  id: '#ctor(System.Windows.Input.ICommand)'
  parent: System.Windows.Input.CommandBinding
  langs:
  - csharp
  name: CommandBinding(ICommand)
  nameWithType: CommandBinding.CommandBinding(ICommand)
  fullName: CommandBinding.CommandBinding(ICommand)
  type: Constructor
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: Initializes a new instance of the <xref href="System.Windows.Input.CommandBinding"></xref> class by using the specified <xref href="System.Windows.Input.ICommand"></xref>.
  syntax:
    content: public CommandBinding (System.Windows.Input.ICommand command);
    parameters:
    - id: command
      type: System.Windows.Input.ICommand
      description: The command to base the new <xref href="System.Windows.Input.RoutedCommand"></xref> on.
  overload: System.Windows.Input.CommandBinding.#ctor*
  exceptions: []
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Input/CommandBinding.xml
  ms.technology:
  - dotnet-wpf
  author: stevehoag
  ms.author: shoag
  manager: wpickett
- uid: System.Windows.Input.CommandBinding.#ctor(System.Windows.Input.ICommand,System.Windows.Input.ExecutedRoutedEventHandler)
  commentId: M:System.Windows.Input.CommandBinding.#ctor(System.Windows.Input.ICommand,System.Windows.Input.ExecutedRoutedEventHandler)
  id: '#ctor(System.Windows.Input.ICommand,System.Windows.Input.ExecutedRoutedEventHandler)'
  parent: System.Windows.Input.CommandBinding
  langs:
  - csharp
  name: CommandBinding(ICommand, ExecutedRoutedEventHandler)
  nameWithType: CommandBinding.CommandBinding(ICommand, ExecutedRoutedEventHandler)
  fullName: CommandBinding.CommandBinding(ICommand, ExecutedRoutedEventHandler)
  type: Constructor
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: Initializes a new instance of the <xref href="System.Windows.Input.CommandBinding"></xref> class by using the specified <xref href="System.Windows.Input.ICommand"></xref> and the specified <xref href="System.Windows.Input.CommandBinding.Executed"></xref> event handler.
  syntax:
    content: public CommandBinding (System.Windows.Input.ICommand command, System.Windows.Input.ExecutedRoutedEventHandler executed);
    parameters:
    - id: command
      type: System.Windows.Input.ICommand
      description: The command to base the new <xref href="System.Windows.Input.RoutedCommand"></xref> on.
    - id: executed
      type: System.Windows.Input.ExecutedRoutedEventHandler
      description: The handler for the <xref href="System.Windows.Input.CommandBinding.Executed"></xref> event on the new <xref href="System.Windows.Input.RoutedCommand"></xref>.
  overload: System.Windows.Input.CommandBinding.#ctor*
  exceptions: []
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Input/CommandBinding.xml
  ms.technology:
  - dotnet-wpf
  author: stevehoag
  ms.author: shoag
  manager: wpickett
- uid: System.Windows.Input.CommandBinding.#ctor(System.Windows.Input.ICommand,System.Windows.Input.ExecutedRoutedEventHandler,System.Windows.Input.CanExecuteRoutedEventHandler)
  commentId: M:System.Windows.Input.CommandBinding.#ctor(System.Windows.Input.ICommand,System.Windows.Input.ExecutedRoutedEventHandler,System.Windows.Input.CanExecuteRoutedEventHandler)
  id: '#ctor(System.Windows.Input.ICommand,System.Windows.Input.ExecutedRoutedEventHandler,System.Windows.Input.CanExecuteRoutedEventHandler)'
  parent: System.Windows.Input.CommandBinding
  langs:
  - csharp
  name: CommandBinding(ICommand, ExecutedRoutedEventHandler, CanExecuteRoutedEventHandler)
  nameWithType: CommandBinding.CommandBinding(ICommand, ExecutedRoutedEventHandler, CanExecuteRoutedEventHandler)
  fullName: CommandBinding.CommandBinding(ICommand, ExecutedRoutedEventHandler, CanExecuteRoutedEventHandler)
  type: Constructor
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: Initializes a new instance of the <xref href="System.Windows.Input.CommandBinding"></xref> class by using the specified <xref href="System.Windows.Input.ICommand"></xref> and the specified <xref href="System.Windows.Input.CommandBinding.Executed"></xref> and <xref href="System.Windows.Input.CommandBinding.CanExecute"></xref> event handlers.
  syntax:
    content: public CommandBinding (System.Windows.Input.ICommand command, System.Windows.Input.ExecutedRoutedEventHandler executed, System.Windows.Input.CanExecuteRoutedEventHandler canExecute);
    parameters:
    - id: command
      type: System.Windows.Input.ICommand
      description: The command to base the new <xref href="System.Windows.Input.RoutedCommand"></xref> on.
    - id: executed
      type: System.Windows.Input.ExecutedRoutedEventHandler
      description: The handler for the <xref href="System.Windows.Input.CommandBinding.Executed"></xref> event on the new <xref href="System.Windows.Input.RoutedCommand"></xref>.
    - id: canExecute
      type: System.Windows.Input.CanExecuteRoutedEventHandler
      description: The handler for the <xref href="System.Windows.Input.CommandBinding.CanExecute"></xref> event on the new <xref href="System.Windows.Input.RoutedCommand"></xref>.
  overload: System.Windows.Input.CommandBinding.#ctor*
  exceptions: []
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Input/CommandBinding.xml
  ms.technology:
  - dotnet-wpf
  author: stevehoag
  ms.author: shoag
  manager: wpickett
- uid: System.Windows.Input.CommandBinding.CanExecute
  commentId: E:System.Windows.Input.CommandBinding.CanExecute
  id: CanExecute
  parent: System.Windows.Input.CommandBinding
  langs:
  - csharp
  name: CanExecute
  nameWithType: CommandBinding.CanExecute
  fullName: CommandBinding.CanExecute
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: Occurs when the command associated with this <xref href="System.Windows.Input.CommandBinding"></xref> initiates a check to determine whether the command can be executed on the command target.
  remarks: "When the <xref:System.Windows.Input.RoutedCommand.CanExecute%2A> method on a <xref:System.Windows.Input.RoutedCommand> is called, the <xref:System.Windows.Input.CommandBinding.PreviewCanExecute> event is raised on the command target.  If the event is not handled, the <xref:System.Windows.Input.CommandBinding.CanExecute> event is raised.  If the command target has a <xref:System.Windows.Input.CommandBinding> for the command, the <xref:System.Windows.Input.CommandBinding.CanExecute> handler for that <xref:System.Windows.Input.CommandBinding> is called.  If the command target does not have a <xref:System.Windows.Input.CommandBinding> for the command, the <xref:System.Windows.Input.CommandBinding.CanExecute> event bubbles up the element tree searching for an element that has a <xref:System.Windows.Input.CommandBinding> associated with the command.  \n  \n<a name=\"routedEventInfo_CanExecute\"></a>   \n## Routed Event Information  \n  \n|||  \n|-|-|  \n|Identifier field|<xref:System.Windows.Input.CommandManager.CanExecuteEvent>|  \n|Routing strategy|Bubbling|  \n|Delegate|<xref:System.Windows.Input.CanExecuteRoutedEventHandler>|  \n  \n-   The corresponding tunneling event is <xref:System.Windows.Input.CommandBinding.PreviewCanExecute>."
  example:
  - "The following example creates a <xref:System.Windows.Input.CommandBinding> that maps an <xref:System.Windows.Input.ExecutedRoutedEventHandler> and a <xref:System.Windows.Input.CanExecuteRoutedEventArgs> handler to the <xref:System.Windows.Input.ApplicationCommands.Open%2A> command.  \n  \n [!code-xml[commandwithhandler#CommandHandlerCommandBinding](~/samples/snippets/csharp/VS_Snippets_Wpf/commandWithHandler/CSharp/Window1.xaml#commandhandlercommandbinding)]  \n  \n [!code-csharp[CommandHandlerProcedural#CommandHandlerBindingInit](~/samples/snippets/csharp/VS_Snippets_Wpf/CommandHandlerProcedural/CSharp/Window1.xaml.cs#commandhandlerbindinginit)]\n [!code-vb[CommandHandlerProcedural#CommandHandlerBindingInit](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CommandHandlerProcedural/visualbasic/window1.xaml.vb#commandhandlerbindinginit)]  \n  \n The following shows the <xref:System.Windows.Input.CanExecuteRoutedEventHandler> which sets <xref:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute%2A> to `true`.  \n  \n [!code-csharp[commandwithhandler#CommandHandlerCanExecuteHandler](~/samples/snippets/csharp/VS_Snippets_Wpf/commandWithHandler/CSharp/Window1.xaml.cs#commandhandlercanexecutehandler)]\n [!code-vb[commandwithhandler#CommandHandlerCanExecuteHandler](~/samples/snippets/visualbasic/VS_Snippets_Wpf/commandWithHandler/VisualBasic/Window1.xaml.vb#commandhandlercanexecutehandler)]"
  syntax:
    content: public event System.Windows.Input.CanExecuteRoutedEventHandler CanExecute;
    return:
      type: System.Windows.Input.CanExecuteRoutedEventHandler
      description: ''
  exceptions: []
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Input/CommandBinding.xml
  ms.technology:
  - dotnet-wpf
  author: stevehoag
  ms.author: shoag
  manager: wpickett
- uid: System.Windows.Input.CommandBinding.Command
  commentId: P:System.Windows.Input.CommandBinding.Command
  id: Command
  parent: System.Windows.Input.CommandBinding
  langs:
  - csharp
  name: Command
  nameWithType: CommandBinding.Command
  fullName: CommandBinding.Command
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: Gets or sets the <xref href="System.Windows.Input.ICommand"></xref> associated with this <xref href="System.Windows.Input.CommandBinding"></xref>.
  remarks: ''
  example:
  - "The following example creates a <xref:System.Windows.Input.CommandBinding> that maps an <xref:System.Windows.Input.ExecutedRoutedEventHandler> and a <xref:System.Windows.Input.CanExecuteRoutedEventArgs> handler to the <xref:System.Windows.Input.ApplicationCommands.Open%2A> command.  \n  \n [!code-xml[commandWithHandler#CommandHandlerCommandBinding](~/samples/snippets/csharp/VS_Snippets_Wpf/commandWithHandler/CSharp/Window1.xaml#commandhandlercommandbinding)]  \n  \n [!code-csharp[commandhandlerprocedural#CommandHandlerBindingInit](~/samples/snippets/csharp/VS_Snippets_Wpf/CommandHandlerProcedural/CSharp/Window1.xaml.cs#commandhandlerbindinginit)]\n [!code-vb[commandhandlerprocedural#CommandHandlerBindingInit](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CommandHandlerProcedural/visualbasic/window1.xaml.vb#commandhandlerbindinginit)]  \n  \n The following shows the <xref:System.Windows.Input.CanExecuteRoutedEventHandler> which sets <xref:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute%2A> to `true`.  \n  \n [!code-csharp[commandWithHandler#CommandHandlerCanExecuteHandler](~/samples/snippets/csharp/VS_Snippets_Wpf/commandWithHandler/CSharp/Window1.xaml.cs#commandhandlercanexecutehandler)]\n [!code-vb[commandWithHandler#CommandHandlerCanExecuteHandler](~/samples/snippets/visualbasic/VS_Snippets_Wpf/commandWithHandler/VisualBasic/Window1.xaml.vb#commandhandlercanexecutehandler)]  \n  \n The following shows the <xref:System.Windows.Input.ExecutedRoutedEventHandler> which creates a <xref:System.Windows.MessageBox> when the command is executed.  \n  \n [!code-csharp[commandWithHandler#CommandHandlerExecutedHandler](~/samples/snippets/csharp/VS_Snippets_Wpf/commandWithHandler/CSharp/Window1.xaml.cs#commandhandlerexecutedhandler)]\n [!code-vb[commandWithHandler#CommandHandlerExecutedHandler](~/samples/snippets/visualbasic/VS_Snippets_Wpf/commandWithHandler/VisualBasic/Window1.xaml.vb#commandhandlerexecutedhandler)]"
  syntax:
    content: >-
      [System.Windows.Localizability(System.Windows.LocalizationCategory.NeverLocalize)]

      public System.Windows.Input.ICommand Command { get; set; }
    return:
      type: System.Windows.Input.ICommand
      description: The command associated with this binding.
  overload: System.Windows.Input.CommandBinding.Command*
  exceptions: []
  attributes:
  - type: System.Windows.LocalizabilityAttribute
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Input/CommandBinding.xml
  ms.technology:
  - dotnet-wpf
  author: stevehoag
  ms.author: shoag
  manager: wpickett
- uid: System.Windows.Input.CommandBinding.Executed
  commentId: E:System.Windows.Input.CommandBinding.Executed
  id: Executed
  parent: System.Windows.Input.CommandBinding
  langs:
  - csharp
  name: Executed
  nameWithType: CommandBinding.Executed
  fullName: CommandBinding.Executed
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: Occurs when the command associated with this <xref href="System.Windows.Input.CommandBinding"></xref> executes.
  remarks: "When a <xref:System.Windows.Input.RoutedCommand> executes, it raises the <xref:System.Windows.Input.CommandBinding.PreviewExecuted> event on the command target.  If the <xref:System.Windows.Input.CommandBinding.PreviewExecuted> event is not handled, the <xref:System.Windows.Input.CommandBinding.Executed> event is raised on the command target.  If the command target has a <xref:System.Windows.Input.CommandBinding> for the specific command, the <xref:System.Windows.Input.CommandBinding.Executed> handler for that <xref:System.Windows.Input.CommandBinding> is called.  If the command target does not have a <xref:System.Windows.Input.CommandBinding> for that specific command the <xref:System.Windows.Input.CommandBinding.Executed> event bubbles up the element tree searching for an element that has a <xref:System.Windows.Input.CommandBinding> associated with the command.  If a <xref:System.Windows.Input.CommandBinding> is not found, the command is not handled.  \n  \n<a name=\"routedEventInfo_Executed\"></a>   \n## Routed Event Information  \n  \n|||  \n|-|-|  \n|Identifier field|<xref:System.Windows.Input.CommandManager.ExecutedEvent>|  \n|Routing strategy|Bubbling|  \n|Delegate|<xref:System.Windows.Input.ExecutedRoutedEventHandler>|  \n  \n-   The corresponding tunneling event is <xref:System.Windows.Input.CommandBinding.PreviewExecuted>."
  example:
  - "The following example creates a <xref:System.Windows.Input.CommandBinding> that maps an <xref:System.Windows.Input.ExecutedRoutedEventHandler> and a <xref:System.Windows.Input.CanExecuteRoutedEventArgs> handler to the <xref:System.Windows.Input.ApplicationCommands.Open%2A> command.  \n  \n [!code-xml[commandwithhandler#CommandHandlerCommandBinding](~/samples/snippets/csharp/VS_Snippets_Wpf/commandWithHandler/CSharp/Window1.xaml#commandhandlercommandbinding)]  \n  \n [!code-csharp[CommandHandlerProcedural#CommandHandlerBindingInit](~/samples/snippets/csharp/VS_Snippets_Wpf/CommandHandlerProcedural/CSharp/Window1.xaml.cs#commandhandlerbindinginit)]\n [!code-vb[CommandHandlerProcedural#CommandHandlerBindingInit](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CommandHandlerProcedural/visualbasic/window1.xaml.vb#commandhandlerbindinginit)]  \n  \n The following shows the <xref:System.Windows.Input.ExecutedRoutedEventHandler> which creates a <xref:System.Windows.MessageBox> when the command is executed.  \n  \n [!code-csharp[commandWithHandler#CommandHandlerExecutedHandler](~/samples/snippets/csharp/VS_Snippets_Wpf/commandWithHandler/CSharp/Window1.xaml.cs#commandhandlerexecutedhandler)]\n [!code-vb[commandWithHandler#CommandHandlerExecutedHandler](~/samples/snippets/visualbasic/VS_Snippets_Wpf/commandWithHandler/VisualBasic/Window1.xaml.vb#commandhandlerexecutedhandler)]"
  syntax:
    content: public event System.Windows.Input.ExecutedRoutedEventHandler Executed;
    return:
      type: System.Windows.Input.ExecutedRoutedEventHandler
      description: ''
  exceptions: []
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Input/CommandBinding.xml
  ms.technology:
  - dotnet-wpf
  author: stevehoag
  ms.author: shoag
  manager: wpickett
- uid: System.Windows.Input.CommandBinding.PreviewCanExecute
  commentId: E:System.Windows.Input.CommandBinding.PreviewCanExecute
  id: PreviewCanExecute
  parent: System.Windows.Input.CommandBinding
  langs:
  - csharp
  name: PreviewCanExecute
  nameWithType: CommandBinding.PreviewCanExecute
  fullName: CommandBinding.PreviewCanExecute
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: Occurs when the command associated with this <xref href="System.Windows.Input.CommandBinding"></xref> initiates a check to determine whether the command can be executed on the current command target.
  remarks: "When the <xref:System.Windows.Input.RoutedCommand.CanExecute%2A> method on a <xref:System.Windows.Input.RoutedCommand> is called, the <xref:System.Windows.Input.CommandBinding.PreviewCanExecute> event is raised on the command target if the command target has a <xref:System.Windows.Input.CommandBinding> for the command. Then the <xref:System.Windows.Input.CommandBinding.CanExecute> handler for that <xref:System.Windows.Input.CommandBinding> is called.  If the command target does not have a <xref:System.Windows.Input.CommandBinding> for the command, the <xref:System.Windows.Input.CommandBinding.CanExecute> event bubbles up the element tree searching for an element that has a <xref:System.Windows.Input.CommandBinding> associated with the command.  If the event is not handled, the <xref:System.Windows.Input.CommandBinding.CanExecute> event is raised.  \n  \n<a name=\"routedEventInfo_PreviewCanExecute\"></a>   \n## Routed Event Information  \n  \n|||  \n|-|-|  \n|Identifier field|<xref:System.Windows.Input.CommandManager.PreviewCanExecuteEvent>|  \n|Routing strategy|Tunneling|  \n|Delegate|<xref:System.Windows.Input.CanExecuteRoutedEventHandler>|  \n  \n-   The corresponding bubbling event is <xref:System.Windows.Input.CommandBinding.CanExecute>."
  syntax:
    content: public event System.Windows.Input.CanExecuteRoutedEventHandler PreviewCanExecute;
    return:
      type: System.Windows.Input.CanExecuteRoutedEventHandler
      description: ''
  exceptions: []
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Input/CommandBinding.xml
  ms.technology:
  - dotnet-wpf
  author: stevehoag
  ms.author: shoag
  manager: wpickett
- uid: System.Windows.Input.CommandBinding.PreviewExecuted
  commentId: E:System.Windows.Input.CommandBinding.PreviewExecuted
  id: PreviewExecuted
  parent: System.Windows.Input.CommandBinding
  langs:
  - csharp
  name: PreviewExecuted
  nameWithType: CommandBinding.PreviewExecuted
  fullName: CommandBinding.PreviewExecuted
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: Occurs when the command associated with this <xref href="System.Windows.Input.CommandBinding"></xref> executes.
  remarks: "When a <xref:System.Windows.Input.RoutedCommand> executes, it raises the <xref:System.Windows.Input.CommandBinding.PreviewExecuted> event on the command target.  If the command target has a <xref:System.Windows.Input.CommandBinding> for the command the <xref:System.Windows.Input.CommandBinding.PreviewExecuted> handler for that <xref:System.Windows.Input.CommandBinding> is called.  If the command target does not have a <xref:System.Windows.Input.CommandBinding> for the command the <xref:System.Windows.Input.CommandBinding.PreviewExecuted> event tunnels down the element tree searching for an element that has a <xref:System.Windows.Input.CommandBinding> associated with the command.  If the preview event is not handled, the <xref:System.Windows.Input.CommandBinding.Executed> event is raised on command target.  \n  \n<a name=\"routedEventInfo_PreviewExecuted\"></a>   \n## Routed Event Information  \n  \n|||  \n|-|-|  \n|Identifier field|<xref:System.Windows.Input.CommandManager.PreviewExecutedEvent>|  \n|Routing strategy|Tunneling|  \n|Delegate|<xref:System.Windows.Input.ExecutedRoutedEventHandler>|  \n  \n-   The corresponding bubbling event is <xref:System.Windows.Input.CommandBinding.Executed>."
  syntax:
    content: public event System.Windows.Input.ExecutedRoutedEventHandler PreviewExecuted;
    return:
      type: System.Windows.Input.ExecutedRoutedEventHandler
      description: ''
  exceptions: []
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Input/CommandBinding.xml
  ms.technology:
  - dotnet-wpf
  ms.author: kempb
  manager: ghogen
references:
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Windows.Input.CommandBinding.#ctor
  parent: System.Windows.Input.CommandBinding
  isExternal: false
  name: CommandBinding()
  nameWithType: CommandBinding.CommandBinding()
  fullName: CommandBinding.CommandBinding()
- uid: System.Windows.Input.CommandBinding.#ctor(System.Windows.Input.ICommand)
  parent: System.Windows.Input.CommandBinding
  isExternal: false
  name: CommandBinding(ICommand)
  nameWithType: CommandBinding.CommandBinding(ICommand)
  fullName: CommandBinding.CommandBinding(ICommand)
- uid: System.Windows.Input.ICommand
  parent: System.Windows.Input
  isExternal: false
  name: ICommand
  nameWithType: ICommand
  fullName: System.Windows.Input.ICommand
- uid: System.Windows.Input.CommandBinding.#ctor(System.Windows.Input.ICommand,System.Windows.Input.ExecutedRoutedEventHandler)
  parent: System.Windows.Input.CommandBinding
  isExternal: false
  name: CommandBinding(ICommand, ExecutedRoutedEventHandler)
  nameWithType: CommandBinding.CommandBinding(ICommand, ExecutedRoutedEventHandler)
  fullName: CommandBinding.CommandBinding(ICommand, ExecutedRoutedEventHandler)
- uid: System.Windows.Input.ExecutedRoutedEventHandler
  parent: System.Windows.Input
  isExternal: false
  name: ExecutedRoutedEventHandler
  nameWithType: ExecutedRoutedEventHandler
  fullName: System.Windows.Input.ExecutedRoutedEventHandler
- uid: System.Windows.Input.CommandBinding.#ctor(System.Windows.Input.ICommand,System.Windows.Input.ExecutedRoutedEventHandler,System.Windows.Input.CanExecuteRoutedEventHandler)
  parent: System.Windows.Input.CommandBinding
  isExternal: false
  name: CommandBinding(ICommand, ExecutedRoutedEventHandler, CanExecuteRoutedEventHandler)
  nameWithType: CommandBinding.CommandBinding(ICommand, ExecutedRoutedEventHandler, CanExecuteRoutedEventHandler)
  fullName: CommandBinding.CommandBinding(ICommand, ExecutedRoutedEventHandler, CanExecuteRoutedEventHandler)
- uid: System.Windows.Input.CanExecuteRoutedEventHandler
  parent: System.Windows.Input
  isExternal: false
  name: CanExecuteRoutedEventHandler
  nameWithType: CanExecuteRoutedEventHandler
  fullName: System.Windows.Input.CanExecuteRoutedEventHandler
- uid: System.Windows.Input.CommandBinding.CanExecute
  parent: System.Windows.Input.CommandBinding
  isExternal: false
  name: CanExecute
  nameWithType: CommandBinding.CanExecute
  fullName: CommandBinding.CanExecute
- uid: System.Windows.Input.CommandBinding.Command
  parent: System.Windows.Input.CommandBinding
  isExternal: false
  name: Command
  nameWithType: CommandBinding.Command
  fullName: CommandBinding.Command
- uid: System.Windows.Input.CommandBinding.Executed
  parent: System.Windows.Input.CommandBinding
  isExternal: false
  name: Executed
  nameWithType: CommandBinding.Executed
  fullName: CommandBinding.Executed
- uid: System.Windows.Input.CommandBinding.PreviewCanExecute
  parent: System.Windows.Input.CommandBinding
  isExternal: false
  name: PreviewCanExecute
  nameWithType: CommandBinding.PreviewCanExecute
  fullName: CommandBinding.PreviewCanExecute
- uid: System.Windows.Input.CommandBinding.PreviewExecuted
  parent: System.Windows.Input.CommandBinding
  isExternal: false
  name: PreviewExecuted
  nameWithType: CommandBinding.PreviewExecuted
  fullName: CommandBinding.PreviewExecuted
- uid: System.Windows.Input.CommandBinding.#ctor*
  parent: System.Windows.Input.CommandBinding
  isExternal: false
  name: CommandBinding
  nameWithType: CommandBinding.CommandBinding
  fullName: CommandBinding.CommandBinding
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Input/CommandBinding.xml
- uid: System.Windows.Input.CommandBinding.Command*
  parent: System.Windows.Input.CommandBinding
  isExternal: false
  name: Command
  nameWithType: CommandBinding.Command
  fullName: CommandBinding.Command
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Input/CommandBinding.xml
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: false
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: Object.Equals(Object)
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: false
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: Object.Equals(Object, Object)
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: false
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: Object.GetHashCode()
- uid: System.Object.GetType
  parent: System.Object
  isExternal: false
  name: GetType()
  nameWithType: Object.GetType()
  fullName: Object.GetType()
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: false
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: Object.MemberwiseClone()
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: false
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: Object.ReferenceEquals(Object, Object)
- uid: System.Object.ToString
  parent: System.Object
  isExternal: false
  name: ToString()
  nameWithType: Object.ToString()
  fullName: Object.ToString()
