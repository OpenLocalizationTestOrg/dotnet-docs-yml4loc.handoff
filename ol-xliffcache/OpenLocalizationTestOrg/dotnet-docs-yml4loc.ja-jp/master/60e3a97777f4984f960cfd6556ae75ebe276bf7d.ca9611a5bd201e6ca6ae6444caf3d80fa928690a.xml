{"nodes":[{"content":"Represents a security descriptor. A security descriptor includes an owner, a primary group, a Discretionary Access Control List (DACL), and a System Access Control List (SACL).","nodes":[{"pos":[0,176],"content":"Represents a security descriptor. A security descriptor includes an owner, a primary group, a Discretionary Access Control List (DACL), and a System Access Control List (SACL).","nodes":[{"content":"Represents a security descriptor. A security descriptor includes an owner, a primary group, a Discretionary Access Control List (DACL), and a System Access Control List (SACL).","pos":[0,176],"nodes":[{"content":"Represents a security descriptor.","pos":[0,33]},{"content":"A security descriptor includes an owner, a primary group, a Discretionary Access Control List (DACL), and a System Access Control List (SACL).","pos":[34,176]}]}]}],"pos":[2523,2700],"yaml":true},{"content":"Initializes a new instance of the <xref href=\"System.Security.AccessControl.CommonSecurityDescriptor\"></xref> class from the specified <xref href=\"System.Security.AccessControl.RawSecurityDescriptor\"></xref> object.","nodes":[{"pos":[0,215],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Security.AccessControl.CommonSecurityDescriptor\"&gt;&lt;/xref&gt;</ph> class from the specified <ph id=\"ph2\">&lt;xref href=\"System.Security.AccessControl.RawSecurityDescriptor\"&gt;&lt;/xref&gt;</ph> object.","source":"Initializes a new instance of the <xref href=\"System.Security.AccessControl.CommonSecurityDescriptor\"></xref> class from the specified <xref href=\"System.Security.AccessControl.RawSecurityDescriptor\"></xref> object."}],"pos":[5370,5586],"yaml":true},{"content":"If the underlying security descriptor from which the new <xref:System.Security.AccessControl.RawSecurityDescriptor> object is created contains `null` for its discretionary access control list (DACL), a single access control entry (ACE) that allows everyone full access (AEFA) is added to the DACL. If an application modifies the DACL of a security descriptor to which an AEFA ACE has been added, the AEFA ACE is persisted with the DACL when that DACL is persisted.  \n  \n This can result in an application unintentionally allowing access to principals. Because of this, an application should check for the existence of an AEFA ACE and remove it before modifying any security descriptor.","nodes":[{"pos":[0,464],"content":"If the underlying security descriptor from which the new <xref:System.Security.AccessControl.RawSecurityDescriptor> object is created contains `null` for its discretionary access control list (DACL), a single access control entry (ACE) that allows everyone full access (AEFA) is added to the DACL. If an application modifies the DACL of a security descriptor to which an AEFA ACE has been added, the AEFA ACE is persisted with the DACL when that DACL is persisted.","nodes":[{"content":"If the underlying security descriptor from which the new <ph id=\"ph1\">&lt;xref:System.Security.AccessControl.RawSecurityDescriptor&gt;</ph> object is created contains <ph id=\"ph2\">`null`</ph> for its discretionary access control list (DACL), a single access control entry (ACE) that allows everyone full access (AEFA) is added to the DACL.","pos":[0,297],"source":"If the underlying security descriptor from which the new <xref:System.Security.AccessControl.RawSecurityDescriptor> object is created contains `null` for its discretionary access control list (DACL), a single access control entry (ACE) that allows everyone full access (AEFA) is added to the DACL."},{"content":"If an application modifies the DACL of a security descriptor to which an AEFA ACE has been added, the AEFA ACE is persisted with the DACL when that DACL is persisted.","pos":[298,464]}]},{"pos":[471,685],"content":"This can result in an application unintentionally allowing access to principals. Because of this, an application should check for the existence of an AEFA ACE and remove it before modifying any security descriptor.","nodes":[{"content":"This can result in an application unintentionally allowing access to principals. Because of this, an application should check for the existence of an AEFA ACE and remove it before modifying any security descriptor.","pos":[0,214],"nodes":[{"content":"This can result in an application unintentionally allowing access to principals.","pos":[0,80]},{"content":"Because of this, an application should check for the existence of an AEFA ACE and remove it before modifying any security descriptor.","pos":[81,214]}]}]}],"pos":[5597,6287],"yaml":true,"extradata":"MT"},{"content":"`true` if the new security descriptor is associated with a container object.","nodes":[{"pos":[0,76],"content":"<ph id=\"ph1\">`true`</ph> if the new security descriptor is associated with a container object.","source":"`true` if the new security descriptor is associated with a container object."}],"pos":[6532,6611],"yaml":true},{"content":"`true` if the new security descriptor is associated with a directory object.","nodes":[{"pos":[0,76],"content":"<ph id=\"ph1\">`true`</ph> if the new security descriptor is associated with a directory object.","source":"`true` if the new security descriptor is associated with a directory object."}],"pos":[6672,6751],"yaml":true},{"content":"The <xref href=\"System.Security.AccessControl.RawSecurityDescriptor\"></xref> object from which to create the new <xref href=\"System.Security.AccessControl.CommonSecurityDescriptor\"></xref> object.","nodes":[{"pos":[0,196],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Security.AccessControl.RawSecurityDescriptor\"&gt;&lt;/xref&gt;</ph> object from which to create the new <ph id=\"ph2\">&lt;xref href=\"System.Security.AccessControl.CommonSecurityDescriptor\"&gt;&lt;/xref&gt;</ph> object.","source":"The <xref href=\"System.Security.AccessControl.RawSecurityDescriptor\"></xref> object from which to create the new <xref href=\"System.Security.AccessControl.CommonSecurityDescriptor\"></xref> object."}],"pos":[6866,7063],"yaml":true},{"content":"Initializes a new instance of the <xref href=\"System.Security.AccessControl.CommonSecurityDescriptor\"></xref> class from the specified Security Descriptor Definition Language (SDDL) string.","nodes":[{"pos":[0,189],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Security.AccessControl.CommonSecurityDescriptor\"&gt;&lt;/xref&gt;</ph> class from the specified Security Descriptor Definition Language (SDDL) string.","source":"Initializes a new instance of the <xref href=\"System.Security.AccessControl.CommonSecurityDescriptor\"></xref> class from the specified Security Descriptor Definition Language (SDDL) string."}],"pos":[8678,8868],"yaml":true},{"content":"If the underlying security descriptor from which the new <xref:System.Security.AccessControl.RawSecurityDescriptor> object is created contains `null` for its discretionary access control list (DACL), a single access control entry (ACE) that allows everyone full access (AEFA) is added to the DACL. If an application modifies the DACL of a security descriptor to which an AEFA ACE has been added, the AEFA ACE is persisted with the DACL when that DACL is persisted.  \n  \n This can result in an application unintentionally allowing access to principals. Because of this, an application should check for the existence of an AEFA ACE and remove it before modifying any security descriptor.","nodes":[{"pos":[0,464],"content":"If the underlying security descriptor from which the new <xref:System.Security.AccessControl.RawSecurityDescriptor> object is created contains `null` for its discretionary access control list (DACL), a single access control entry (ACE) that allows everyone full access (AEFA) is added to the DACL. If an application modifies the DACL of a security descriptor to which an AEFA ACE has been added, the AEFA ACE is persisted with the DACL when that DACL is persisted.","nodes":[{"content":"If the underlying security descriptor from which the new <ph id=\"ph1\">&lt;xref:System.Security.AccessControl.RawSecurityDescriptor&gt;</ph> object is created contains <ph id=\"ph2\">`null`</ph> for its discretionary access control list (DACL), a single access control entry (ACE) that allows everyone full access (AEFA) is added to the DACL.","pos":[0,297],"source":"If the underlying security descriptor from which the new <xref:System.Security.AccessControl.RawSecurityDescriptor> object is created contains `null` for its discretionary access control list (DACL), a single access control entry (ACE) that allows everyone full access (AEFA) is added to the DACL."},{"content":"If an application modifies the DACL of a security descriptor to which an AEFA ACE has been added, the AEFA ACE is persisted with the DACL when that DACL is persisted.","pos":[298,464]}]},{"pos":[471,685],"content":"This can result in an application unintentionally allowing access to principals. Because of this, an application should check for the existence of an AEFA ACE and remove it before modifying any security descriptor.","nodes":[{"content":"This can result in an application unintentionally allowing access to principals. Because of this, an application should check for the existence of an AEFA ACE and remove it before modifying any security descriptor.","pos":[0,214],"nodes":[{"content":"This can result in an application unintentionally allowing access to principals.","pos":[0,80]},{"content":"Because of this, an application should check for the existence of an AEFA ACE and remove it before modifying any security descriptor.","pos":[81,214]}]}]}],"pos":[8879,9569],"yaml":true,"extradata":"MT"},{"content":"`true` if the new security descriptor is associated with a container object.","nodes":[{"pos":[0,76],"content":"<ph id=\"ph1\">`true`</ph> if the new security descriptor is associated with a container object.","source":"`true` if the new security descriptor is associated with a container object."}],"pos":[9756,9835],"yaml":true},{"content":"`true` if the new security descriptor is associated with a directory object.","nodes":[{"pos":[0,76],"content":"<ph id=\"ph1\">`true`</ph> if the new security descriptor is associated with a directory object.","source":"`true` if the new security descriptor is associated with a directory object."}],"pos":[9896,9975],"yaml":true},{"content":"The SDDL string from which to create the new <xref href=\"System.Security.AccessControl.CommonSecurityDescriptor\"></xref> object.","nodes":[{"pos":[0,128],"content":"The SDDL string from which to create the new <ph id=\"ph1\">&lt;xref href=\"System.Security.AccessControl.CommonSecurityDescriptor\"&gt;&lt;/xref&gt;</ph> object.","source":"The SDDL string from which to create the new <xref href=\"System.Security.AccessControl.CommonSecurityDescriptor\"></xref> object."}],"pos":[10039,10168],"yaml":true},{"content":"Initializes a new instance of the <xref href=\"System.Security.AccessControl.CommonSecurityDescriptor\"></xref> class from the specified array of byte values.","nodes":[{"pos":[0,156],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Security.AccessControl.CommonSecurityDescriptor\"&gt;&lt;/xref&gt;</ph> class from the specified array of byte values.","source":"Initializes a new instance of the <xref href=\"System.Security.AccessControl.CommonSecurityDescriptor\"></xref> class from the specified array of byte values."}],"pos":[11843,12000],"yaml":true},{"content":"If the underlying security descriptor from which the new <xref:System.Security.AccessControl.RawSecurityDescriptor> object is created contains `null` for its discretionary access control list (DACL),a single access control entry (ACE) that allows everyone full access (AEFA) is added to the DACL. If an application modifies the DACL of a security descriptor to which an AEFA ACE has been added, the AEFA ACE is persisted with the DACL when that DACL is persisted.  \n  \n This can result in an application unintentionally allowing access to principals. Because of this, an application should check for the existence of an AEFA ACE and remove it before modifying any security descriptor.","nodes":[{"pos":[0,463],"content":"If the underlying security descriptor from which the new <xref:System.Security.AccessControl.RawSecurityDescriptor> object is created contains `null` for its discretionary access control list (DACL),a single access control entry (ACE) that allows everyone full access (AEFA) is added to the DACL. If an application modifies the DACL of a security descriptor to which an AEFA ACE has been added, the AEFA ACE is persisted with the DACL when that DACL is persisted.","nodes":[{"content":"If the underlying security descriptor from which the new <ph id=\"ph1\">&lt;xref:System.Security.AccessControl.RawSecurityDescriptor&gt;</ph> object is created contains <ph id=\"ph2\">`null`</ph> for its discretionary access control list (DACL),a single access control entry (ACE) that allows everyone full access (AEFA) is added to the DACL.","pos":[0,296],"source":"If the underlying security descriptor from which the new <xref:System.Security.AccessControl.RawSecurityDescriptor> object is created contains `null` for its discretionary access control list (DACL),a single access control entry (ACE) that allows everyone full access (AEFA) is added to the DACL."},{"content":"If an application modifies the DACL of a security descriptor to which an AEFA ACE has been added, the AEFA ACE is persisted with the DACL when that DACL is persisted.","pos":[297,463]}]},{"pos":[470,684],"content":"This can result in an application unintentionally allowing access to principals. Because of this, an application should check for the existence of an AEFA ACE and remove it before modifying any security descriptor.","nodes":[{"content":"This can result in an application unintentionally allowing access to principals. Because of this, an application should check for the existence of an AEFA ACE and remove it before modifying any security descriptor.","pos":[0,214],"nodes":[{"content":"This can result in an application unintentionally allowing access to principals.","pos":[0,80]},{"content":"Because of this, an application should check for the existence of an AEFA ACE and remove it before modifying any security descriptor.","pos":[81,214]}]}]}],"pos":[12011,12700],"yaml":true,"extradata":"MT"},{"content":"`true` if the new security descriptor is associated with a container object.","nodes":[{"pos":[0,76],"content":"<ph id=\"ph1\">`true`</ph> if the new security descriptor is associated with a container object.","source":"`true` if the new security descriptor is associated with a container object."}],"pos":[12901,12980],"yaml":true},{"content":"`true` if the new security descriptor is associated with a directory object.","nodes":[{"pos":[0,76],"content":"<ph id=\"ph1\">`true`</ph> if the new security descriptor is associated with a directory object.","source":"`true` if the new security descriptor is associated with a directory object."}],"pos":[13041,13120],"yaml":true},{"content":"The array of byte values from which to create the new <xref href=\"System.Security.AccessControl.CommonSecurityDescriptor\"></xref> object.","nodes":[{"pos":[0,137],"content":"The array of byte values from which to create the new <ph id=\"ph1\">&lt;xref href=\"System.Security.AccessControl.CommonSecurityDescriptor\"&gt;&lt;/xref&gt;</ph> object.","source":"The array of byte values from which to create the new <xref href=\"System.Security.AccessControl.CommonSecurityDescriptor\"></xref> object."}],"pos":[13186,13324],"yaml":true},{"content":"The offset in the <code>binaryForm</code> array at which to begin copying.","nodes":[{"pos":[0,74],"content":"The offset in the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">binaryForm</ph><ept id=\"p1\">&lt;/code&gt;</ept> array at which to begin copying.","source":"The offset in the <code>binaryForm</code> array at which to begin copying."}],"pos":[13385,13460],"yaml":true},{"content":"Initializes a new instance of the <xref href=\"System.Security.AccessControl.CommonSecurityDescriptor\"></xref> class from the specified information.","nodes":[{"pos":[0,147],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Security.AccessControl.CommonSecurityDescriptor\"&gt;&lt;/xref&gt;</ph> class from the specified information.","source":"Initializes a new instance of the <xref href=\"System.Security.AccessControl.CommonSecurityDescriptor\"></xref> class from the specified information."}],"pos":[15918,16066],"yaml":true},{"content":"If the underlying security descriptor from which the new <xref:System.Security.AccessControl.RawSecurityDescriptor> object is created contains `null` for its discretionary access control list (DACL), a single access control entry (ACE) that allows everyone full access (AEFA) is added to the DACL. If an application modifies the DACL of a security descriptor to which an AEFA ACE has been added, the AEFA ACE is persisted with the DACL when that DACL is persisted.  \n  \n This can result in an application unintentionally allowing access to principals. Because of this, an application should check for the existence of an AEFA ACE and remove it before modifying any security descriptor.","nodes":[{"pos":[0,464],"content":"If the underlying security descriptor from which the new <xref:System.Security.AccessControl.RawSecurityDescriptor> object is created contains `null` for its discretionary access control list (DACL), a single access control entry (ACE) that allows everyone full access (AEFA) is added to the DACL. If an application modifies the DACL of a security descriptor to which an AEFA ACE has been added, the AEFA ACE is persisted with the DACL when that DACL is persisted.","nodes":[{"content":"If the underlying security descriptor from which the new <ph id=\"ph1\">&lt;xref:System.Security.AccessControl.RawSecurityDescriptor&gt;</ph> object is created contains <ph id=\"ph2\">`null`</ph> for its discretionary access control list (DACL), a single access control entry (ACE) that allows everyone full access (AEFA) is added to the DACL.","pos":[0,297],"source":"If the underlying security descriptor from which the new <xref:System.Security.AccessControl.RawSecurityDescriptor> object is created contains `null` for its discretionary access control list (DACL), a single access control entry (ACE) that allows everyone full access (AEFA) is added to the DACL."},{"content":"If an application modifies the DACL of a security descriptor to which an AEFA ACE has been added, the AEFA ACE is persisted with the DACL when that DACL is persisted.","pos":[298,464]}]},{"pos":[471,685],"content":"This can result in an application unintentionally allowing access to principals. Because of this, an application should check for the existence of an AEFA ACE and remove it before modifying any security descriptor.","nodes":[{"content":"This can result in an application unintentionally allowing access to principals. Because of this, an application should check for the existence of an AEFA ACE and remove it before modifying any security descriptor.","pos":[0,214],"nodes":[{"content":"This can result in an application unintentionally allowing access to principals.","pos":[0,80]},{"content":"Because of this, an application should check for the existence of an AEFA ACE and remove it before modifying any security descriptor.","pos":[81,214]}]}]}],"pos":[16077,16767],"yaml":true,"extradata":"MT"},{"content":"`true` if the new security descriptor is associated with a container object.","nodes":[{"pos":[0,76],"content":"<ph id=\"ph1\">`true`</ph> if the new security descriptor is associated with a container object.","source":"`true` if the new security descriptor is associated with a container object."}],"pos":[17207,17286],"yaml":true},{"content":"`true` if the new security descriptor is associated with a directory object.","nodes":[{"pos":[0,76],"content":"<ph id=\"ph1\">`true`</ph> if the new security descriptor is associated with a directory object.","source":"`true` if the new security descriptor is associated with a directory object."}],"pos":[17347,17426],"yaml":true},{"content":"Flags that specify behavior of the new <xref href=\"System.Security.AccessControl.CommonSecurityDescriptor\"></xref> object.","nodes":[{"pos":[0,122],"content":"Flags that specify behavior of the new <ph id=\"ph1\">&lt;xref href=\"System.Security.AccessControl.CommonSecurityDescriptor\"&gt;&lt;/xref&gt;</ph> object.","source":"Flags that specify behavior of the new <xref href=\"System.Security.AccessControl.CommonSecurityDescriptor\"></xref> object."}],"pos":[17516,17639],"yaml":true},{"content":"The owner for the new <xref href=\"System.Security.AccessControl.CommonSecurityDescriptor\"></xref> object.","nodes":[{"pos":[0,105],"content":"The owner for the new <ph id=\"ph1\">&lt;xref href=\"System.Security.AccessControl.CommonSecurityDescriptor\"&gt;&lt;/xref&gt;</ph> object.","source":"The owner for the new <xref href=\"System.Security.AccessControl.CommonSecurityDescriptor\"></xref> object."}],"pos":[17731,17837],"yaml":true},{"content":"The primary group for the new <xref href=\"System.Security.AccessControl.CommonSecurityDescriptor\"></xref> object.","nodes":[{"pos":[0,113],"content":"The primary group for the new <ph id=\"ph1\">&lt;xref href=\"System.Security.AccessControl.CommonSecurityDescriptor\"&gt;&lt;/xref&gt;</ph> object.","source":"The primary group for the new <xref href=\"System.Security.AccessControl.CommonSecurityDescriptor\"></xref> object."}],"pos":[17929,18043],"yaml":true},{"content":"The System Access Control List (SACL) for the new <xref href=\"System.Security.AccessControl.CommonSecurityDescriptor\"></xref> object.","nodes":[{"pos":[0,133],"content":"The System Access Control List (SACL) for the new <ph id=\"ph1\">&lt;xref href=\"System.Security.AccessControl.CommonSecurityDescriptor\"&gt;&lt;/xref&gt;</ph> object.","source":"The System Access Control List (SACL) for the new <xref href=\"System.Security.AccessControl.CommonSecurityDescriptor\"></xref> object."}],"pos":[18134,18268],"yaml":true},{"content":"The Discretionary Access Control List (DACL) for the new <xref href=\"System.Security.AccessControl.CommonSecurityDescriptor\"></xref> object.","nodes":[{"pos":[0,140],"content":"The Discretionary Access Control List (DACL) for the new <ph id=\"ph1\">&lt;xref href=\"System.Security.AccessControl.CommonSecurityDescriptor\"&gt;&lt;/xref&gt;</ph> object.","source":"The Discretionary Access Control List (DACL) for the new <xref href=\"System.Security.AccessControl.CommonSecurityDescriptor\"></xref> object."}],"pos":[18373,18514],"yaml":true},{"content":"Sets the <xref href=\"System.Security.AccessControl.CommonSecurityDescriptor.DiscretionaryAcl\"></xref> property for this <xref href=\"System.Security.AccessControl.CommonSecurityDescriptor\"></xref> instance and sets the <xref href=\"System.Security.AccessControl.ControlFlags.DiscretionaryAclPresent\"></xref> flag.","nodes":[{"pos":[0,311],"content":"Sets the <ph id=\"ph1\">&lt;xref href=\"System.Security.AccessControl.CommonSecurityDescriptor.DiscretionaryAcl\"&gt;&lt;/xref&gt;</ph> property for this <ph id=\"ph2\">&lt;xref href=\"System.Security.AccessControl.CommonSecurityDescriptor\"&gt;&lt;/xref&gt;</ph> instance and sets the <ph id=\"ph3\">&lt;xref href=\"System.Security.AccessControl.ControlFlags.DiscretionaryAclPresent\"&gt;&lt;/xref&gt;</ph> flag.","source":"Sets the <xref href=\"System.Security.AccessControl.CommonSecurityDescriptor.DiscretionaryAcl\"></xref> property for this <xref href=\"System.Security.AccessControl.CommonSecurityDescriptor\"></xref> instance and sets the <xref href=\"System.Security.AccessControl.ControlFlags.DiscretionaryAclPresent\"></xref> flag."}],"pos":[20053,20365],"yaml":true},{"content":"The constructor for the <xref:System.Security.AccessControl.DiscretionaryAcl> uses the <xref:System.Security.AccessControl.CommonSecurityDescriptor.IsContainer%2A> and <xref:System.Security.AccessControl.CommonSecurityDescriptor.IsDS%2A> properties for this <xref:System.Security.AccessControl.CommonSecurityDescriptor>.","nodes":[{"pos":[0,320],"content":"The constructor for the <xref:System.Security.AccessControl.DiscretionaryAcl> uses the <xref:System.Security.AccessControl.CommonSecurityDescriptor.IsContainer%2A> and <xref:System.Security.AccessControl.CommonSecurityDescriptor.IsDS%2A> properties for this <xref:System.Security.AccessControl.CommonSecurityDescriptor>.","nodes":[{"content":"The constructor for the <ph id=\"ph1\">&lt;xref:System.Security.AccessControl.DiscretionaryAcl&gt;</ph> uses the <ph id=\"ph2\">&lt;xref:System.Security.AccessControl.CommonSecurityDescriptor.IsContainer%2A&gt;</ph> and <ph id=\"ph3\">&lt;xref:System.Security.AccessControl.CommonSecurityDescriptor.IsDS%2A&gt;</ph> properties for this <ph id=\"ph4\">&lt;xref:System.Security.AccessControl.CommonSecurityDescriptor&gt;</ph>.","pos":[0,320],"source":"The constructor for the <xref:System.Security.AccessControl.DiscretionaryAcl> uses the <xref:System.Security.AccessControl.CommonSecurityDescriptor.IsContainer%2A> and <xref:System.Security.AccessControl.CommonSecurityDescriptor.IsDS%2A> properties for this <xref:System.Security.AccessControl.CommonSecurityDescriptor>."}]}],"pos":[20376,20697],"yaml":true,"extradata":"MT"},{"content":"The revision level of the new <xref href=\"System.Security.AccessControl.DiscretionaryAcl\"></xref> object.","nodes":[{"pos":[0,105],"content":"The revision level of the new <ph id=\"ph1\">&lt;xref href=\"System.Security.AccessControl.DiscretionaryAcl\"&gt;&lt;/xref&gt;</ph> object.","source":"The revision level of the new <xref href=\"System.Security.AccessControl.DiscretionaryAcl\"></xref> object."}],"pos":[20860,20966],"yaml":true},{"content":"The number of Access Control Entries (ACEs) this <xref href=\"System.Security.AccessControl.DiscretionaryAcl\"></xref> object can contain. This number is to be used only as a hint.","nodes":[{"pos":[0,178],"content":"The number of Access Control Entries (ACEs) this <xref href=\"System.Security.AccessControl.DiscretionaryAcl\"></xref> object can contain. This number is to be used only as a hint.","nodes":[{"content":"The number of Access Control Entries (ACEs) this <ph id=\"ph1\">&lt;xref href=\"System.Security.AccessControl.DiscretionaryAcl\"&gt;&lt;/xref&gt;</ph> object can contain.","pos":[0,136],"source":"The number of Access Control Entries (ACEs) this <xref href=\"System.Security.AccessControl.DiscretionaryAcl\"></xref> object can contain."},{"content":"This number is to be used only as a hint.","pos":[137,178]}]}],"pos":[21028,21207],"yaml":true},{"content":"Sets the <xref href=\"System.Security.AccessControl.CommonSecurityDescriptor.SystemAcl\"></xref> property for this <xref href=\"System.Security.AccessControl.CommonSecurityDescriptor\"></xref> instance and sets the <xref href=\"System.Security.AccessControl.ControlFlags.SystemAclPresent\"></xref> flag.","nodes":[{"pos":[0,297],"content":"Sets the <ph id=\"ph1\">&lt;xref href=\"System.Security.AccessControl.CommonSecurityDescriptor.SystemAcl\"&gt;&lt;/xref&gt;</ph> property for this <ph id=\"ph2\">&lt;xref href=\"System.Security.AccessControl.CommonSecurityDescriptor\"&gt;&lt;/xref&gt;</ph> instance and sets the <ph id=\"ph3\">&lt;xref href=\"System.Security.AccessControl.ControlFlags.SystemAclPresent\"&gt;&lt;/xref&gt;</ph> flag.","source":"Sets the <xref href=\"System.Security.AccessControl.CommonSecurityDescriptor.SystemAcl\"></xref> property for this <xref href=\"System.Security.AccessControl.CommonSecurityDescriptor\"></xref> instance and sets the <xref href=\"System.Security.AccessControl.ControlFlags.SystemAclPresent\"></xref> flag."}],"pos":[22584,22882],"yaml":true},{"content":"The constructor for the <xref:System.Security.AccessControl.SystemAcl> uses the <xref:System.Security.AccessControl.CommonSecurityDescriptor.IsContainer%2A> and <xref:System.Security.AccessControl.CommonSecurityDescriptor.IsDS%2A> properties for this <xref:System.Security.AccessControl.CommonSecurityDescriptor>.","nodes":[{"pos":[0,313],"content":"The constructor for the <xref:System.Security.AccessControl.SystemAcl> uses the <xref:System.Security.AccessControl.CommonSecurityDescriptor.IsContainer%2A> and <xref:System.Security.AccessControl.CommonSecurityDescriptor.IsDS%2A> properties for this <xref:System.Security.AccessControl.CommonSecurityDescriptor>.","nodes":[{"content":"The constructor for the <ph id=\"ph1\">&lt;xref:System.Security.AccessControl.SystemAcl&gt;</ph> uses the <ph id=\"ph2\">&lt;xref:System.Security.AccessControl.CommonSecurityDescriptor.IsContainer%2A&gt;</ph> and <ph id=\"ph3\">&lt;xref:System.Security.AccessControl.CommonSecurityDescriptor.IsDS%2A&gt;</ph> properties for this <ph id=\"ph4\">&lt;xref:System.Security.AccessControl.CommonSecurityDescriptor&gt;</ph>.","pos":[0,313],"source":"The constructor for the <xref:System.Security.AccessControl.SystemAcl> uses the <xref:System.Security.AccessControl.CommonSecurityDescriptor.IsContainer%2A> and <xref:System.Security.AccessControl.CommonSecurityDescriptor.IsDS%2A> properties for this <xref:System.Security.AccessControl.CommonSecurityDescriptor>."}]}],"pos":[22893,23207],"yaml":true,"extradata":"MT"},{"content":"The revision level of the new <xref href=\"System.Security.AccessControl.SystemAcl\"></xref> object.","nodes":[{"pos":[0,98],"content":"The revision level of the new <ph id=\"ph1\">&lt;xref href=\"System.Security.AccessControl.SystemAcl\"&gt;&lt;/xref&gt;</ph> object.","source":"The revision level of the new <xref href=\"System.Security.AccessControl.SystemAcl\"></xref> object."}],"pos":[23363,23462],"yaml":true},{"content":"Gets values that specify behavior of the <xref href=\"System.Security.AccessControl.CommonSecurityDescriptor\"></xref> object.","nodes":[{"pos":[0,124],"content":"Gets values that specify behavior of the <ph id=\"ph1\">&lt;xref href=\"System.Security.AccessControl.CommonSecurityDescriptor\"&gt;&lt;/xref&gt;</ph> object.","source":"Gets values that specify behavior of the <xref href=\"System.Security.AccessControl.CommonSecurityDescriptor\"></xref> object."}],"pos":[24782,24907],"yaml":true},{"content":"One or more values of the <xref href=\"System.Security.AccessControl.ControlFlags\"></xref> enumeration combined with a logical OR operation.","nodes":[{"pos":[0,139],"content":"One or more values of the <ph id=\"ph1\">&lt;xref href=\"System.Security.AccessControl.ControlFlags\"&gt;&lt;/xref&gt;</ph> enumeration combined with a logical OR operation.","source":"One or more values of the <xref href=\"System.Security.AccessControl.ControlFlags\"></xref> enumeration combined with a logical OR operation."}],"pos":[25097,25237],"yaml":true},{"content":"Gets or sets the discretionary access control list (DACL) for this <xref href=\"System.Security.AccessControl.CommonSecurityDescriptor\"></xref> object. The DACL contains access rules.","nodes":[{"pos":[0,182],"content":"Gets or sets the discretionary access control list (DACL) for this <xref href=\"System.Security.AccessControl.CommonSecurityDescriptor\"></xref> object. The DACL contains access rules.","nodes":[{"content":"Gets or sets the discretionary access control list (DACL) for this <ph id=\"ph1\">&lt;xref href=\"System.Security.AccessControl.CommonSecurityDescriptor\"&gt;&lt;/xref&gt;</ph> object.","pos":[0,150],"source":"Gets or sets the discretionary access control list (DACL) for this <xref href=\"System.Security.AccessControl.CommonSecurityDescriptor\"></xref> object."},{"content":"The DACL contains access rules.","pos":[151,182]}]}],"pos":[26650,26833],"yaml":true},{"content":"If this property is set to `null`, a single access control entry (ACE) that allows everyone full access (AEFA) is added to the DACL. If an application modifies the DACL of a security descriptor to which an AEFA ACE has been added, the AEFA ACE is persisted with the DACL when that DACL is persisted.  \n  \n This can result in an application unintentionally allowing access to principals. Because of this, an application should check for the existence of an AEFA ACE and remove it before modifying any security descriptor.","nodes":[{"pos":[0,299],"content":"If this property is set to `null`, a single access control entry (ACE) that allows everyone full access (AEFA) is added to the DACL. If an application modifies the DACL of a security descriptor to which an AEFA ACE has been added, the AEFA ACE is persisted with the DACL when that DACL is persisted.","nodes":[{"content":"If this property is set to <ph id=\"ph1\">`null`</ph>, a single access control entry (ACE) that allows everyone full access (AEFA) is added to the DACL.","pos":[0,132],"source":"If this property is set to `null`, a single access control entry (ACE) that allows everyone full access (AEFA) is added to the DACL."},{"content":"If an application modifies the DACL of a security descriptor to which an AEFA ACE has been added, the AEFA ACE is persisted with the DACL when that DACL is persisted.","pos":[133,299]}]},{"pos":[306,520],"content":"This can result in an application unintentionally allowing access to principals. Because of this, an application should check for the existence of an AEFA ACE and remove it before modifying any security descriptor.","nodes":[{"content":"This can result in an application unintentionally allowing access to principals. Because of this, an application should check for the existence of an AEFA ACE and remove it before modifying any security descriptor.","pos":[0,214],"nodes":[{"content":"This can result in an application unintentionally allowing access to principals.","pos":[0,80]},{"content":"Because of this, an application should check for the existence of an AEFA ACE and remove it before modifying any security descriptor.","pos":[81,214]}]}]}],"pos":[26844,27369],"yaml":true,"extradata":"MT"},{"content":"The DACL for this <xref href=\"System.Security.AccessControl.CommonSecurityDescriptor\"></xref> object.","nodes":[{"pos":[0,101],"content":"The DACL for this <ph id=\"ph1\">&lt;xref href=\"System.Security.AccessControl.CommonSecurityDescriptor\"&gt;&lt;/xref&gt;</ph> object.","source":"The DACL for this <xref href=\"System.Security.AccessControl.CommonSecurityDescriptor\"></xref> object."}],"pos":[27567,27669],"yaml":true},{"content":"Gets or sets the primary group for this <xref href=\"System.Security.AccessControl.CommonSecurityDescriptor\"></xref> object.","nodes":[{"pos":[0,123],"content":"Gets or sets the primary group for this <ph id=\"ph1\">&lt;xref href=\"System.Security.AccessControl.CommonSecurityDescriptor\"&gt;&lt;/xref&gt;</ph> object.","source":"Gets or sets the primary group for this <xref href=\"System.Security.AccessControl.CommonSecurityDescriptor\"></xref> object."}],"pos":[29020,29144],"yaml":true},{"content":"The primary group for this <xref href=\"System.Security.AccessControl.CommonSecurityDescriptor\"></xref> object.","nodes":[{"pos":[0,110],"content":"The primary group for this <ph id=\"ph1\">&lt;xref href=\"System.Security.AccessControl.CommonSecurityDescriptor\"&gt;&lt;/xref&gt;</ph> object.","source":"The primary group for this <xref href=\"System.Security.AccessControl.CommonSecurityDescriptor\"></xref> object."}],"pos":[29336,29447],"yaml":true},{"content":"Gets a Boolean value that specifies whether the object associated with this <xref href=\"System.Security.AccessControl.CommonSecurityDescriptor\"></xref> object is a container object.","nodes":[{"pos":[0,181],"content":"Gets a Boolean value that specifies whether the object associated with this <ph id=\"ph1\">&lt;xref href=\"System.Security.AccessControl.CommonSecurityDescriptor\"&gt;&lt;/xref&gt;</ph> object is a container object.","source":"Gets a Boolean value that specifies whether the object associated with this <xref href=\"System.Security.AccessControl.CommonSecurityDescriptor\"></xref> object is a container object."}],"pos":[30823,31005],"yaml":true},{"content":"`true` if the object associated with this <xref href=\"System.Security.AccessControl.CommonSecurityDescriptor\"></xref> object is a container object; otherwise, `false`.","nodes":[{"pos":[0,167],"content":"<ph id=\"ph1\">`true`</ph> if the object associated with this <ph id=\"ph2\">&lt;xref href=\"System.Security.AccessControl.CommonSecurityDescriptor\"&gt;&lt;/xref&gt;</ph> object is a container object; otherwise, <ph id=\"ph3\">`false`</ph>.","source":"`true` if the object associated with this <xref href=\"System.Security.AccessControl.CommonSecurityDescriptor\"></xref> object is a container object; otherwise, `false`."}],"pos":[31119,31289],"yaml":true},{"content":"Gets a Boolean value that specifies whether the Discretionary Access Control List (DACL) associated with this <xref href=\"System.Security.AccessControl.CommonSecurityDescriptor\"></xref> object is in canonical order.","nodes":[{"pos":[0,215],"content":"Gets a Boolean value that specifies whether the Discretionary Access Control List (DACL) associated with this <ph id=\"ph1\">&lt;xref href=\"System.Security.AccessControl.CommonSecurityDescriptor\"&gt;&lt;/xref&gt;</ph> object is in canonical order.","source":"Gets a Boolean value that specifies whether the Discretionary Access Control List (DACL) associated with this <xref href=\"System.Security.AccessControl.CommonSecurityDescriptor\"></xref> object is in canonical order."}],"pos":[32767,32983],"yaml":true},{"content":"`true` if the DACL associated with this <xref href=\"System.Security.AccessControl.CommonSecurityDescriptor\"></xref> object is in canonical order; otherwise, `false`.","nodes":[{"pos":[0,165],"content":"<ph id=\"ph1\">`true`</ph> if the DACL associated with this <ph id=\"ph2\">&lt;xref href=\"System.Security.AccessControl.CommonSecurityDescriptor\"&gt;&lt;/xref&gt;</ph> object is in canonical order; otherwise, <ph id=\"ph3\">`false`</ph>.","source":"`true` if the DACL associated with this <xref href=\"System.Security.AccessControl.CommonSecurityDescriptor\"></xref> object is in canonical order; otherwise, `false`."}],"pos":[33113,33281],"yaml":true},{"content":"Gets a Boolean value that specifies whether the object associated with this <xref href=\"System.Security.AccessControl.CommonSecurityDescriptor\"></xref> object is a directory object.","nodes":[{"pos":[0,181],"content":"Gets a Boolean value that specifies whether the object associated with this <ph id=\"ph1\">&lt;xref href=\"System.Security.AccessControl.CommonSecurityDescriptor\"&gt;&lt;/xref&gt;</ph> object is a directory object.","source":"Gets a Boolean value that specifies whether the object associated with this <xref href=\"System.Security.AccessControl.CommonSecurityDescriptor\"></xref> object is a directory object."}],"pos":[34637,34819],"yaml":true},{"content":"`true` if the object associated with this <xref href=\"System.Security.AccessControl.CommonSecurityDescriptor\"></xref> object is a directory object; otherwise, `false`.","nodes":[{"pos":[0,167],"content":"<ph id=\"ph1\">`true`</ph> if the object associated with this <ph id=\"ph2\">&lt;xref href=\"System.Security.AccessControl.CommonSecurityDescriptor\"&gt;&lt;/xref&gt;</ph> object is a directory object; otherwise, <ph id=\"ph3\">`false`</ph>.","source":"`true` if the object associated with this <xref href=\"System.Security.AccessControl.CommonSecurityDescriptor\"></xref> object is a directory object; otherwise, `false`."}],"pos":[34926,35096],"yaml":true},{"content":"Gets a Boolean value that specifies whether the System Access Control List (SACL) associated with this <xref href=\"System.Security.AccessControl.CommonSecurityDescriptor\"></xref> object is in canonical order.","nodes":[{"pos":[0,208],"content":"Gets a Boolean value that specifies whether the System Access Control List (SACL) associated with this <ph id=\"ph1\">&lt;xref href=\"System.Security.AccessControl.CommonSecurityDescriptor\"&gt;&lt;/xref&gt;</ph> object is in canonical order.","source":"Gets a Boolean value that specifies whether the System Access Control List (SACL) associated with this <xref href=\"System.Security.AccessControl.CommonSecurityDescriptor\"></xref> object is in canonical order."}],"pos":[36525,36734],"yaml":true},{"content":"`true` if the SACL associated with this <xref href=\"System.Security.AccessControl.CommonSecurityDescriptor\"></xref> object is in canonical order; otherwise, `false`.","nodes":[{"pos":[0,165],"content":"<ph id=\"ph1\">`true`</ph> if the SACL associated with this <ph id=\"ph2\">&lt;xref href=\"System.Security.AccessControl.CommonSecurityDescriptor\"&gt;&lt;/xref&gt;</ph> object is in canonical order; otherwise, <ph id=\"ph3\">`false`</ph>.","source":"`true` if the SACL associated with this <xref href=\"System.Security.AccessControl.CommonSecurityDescriptor\"></xref> object is in canonical order; otherwise, `false`."}],"pos":[36857,37025],"yaml":true},{"content":"Gets or sets the owner of the object associated with this <xref href=\"System.Security.AccessControl.CommonSecurityDescriptor\"></xref> object.","nodes":[{"pos":[0,141],"content":"Gets or sets the owner of the object associated with this <ph id=\"ph1\">&lt;xref href=\"System.Security.AccessControl.CommonSecurityDescriptor\"&gt;&lt;/xref&gt;</ph> object.","source":"Gets or sets the owner of the object associated with this <xref href=\"System.Security.AccessControl.CommonSecurityDescriptor\"></xref> object."}],"pos":[38380,38522],"yaml":true},{"content":"The owner of the object associated with this <xref href=\"System.Security.AccessControl.CommonSecurityDescriptor\"></xref> object.","nodes":[{"pos":[0,128],"content":"The owner of the object associated with this <ph id=\"ph1\">&lt;xref href=\"System.Security.AccessControl.CommonSecurityDescriptor\"&gt;&lt;/xref&gt;</ph> object.","source":"The owner of the object associated with this <xref href=\"System.Security.AccessControl.CommonSecurityDescriptor\"></xref> object."}],"pos":[38714,38843],"yaml":true},{"content":"Removes all access rules for the specified security identifier from the Discretionary Access Control List (DACL) associated with this <xref href=\"System.Security.AccessControl.CommonSecurityDescriptor\"></xref> object.","nodes":[{"pos":[0,217],"content":"Removes all access rules for the specified security identifier from the Discretionary Access Control List (DACL) associated with this <ph id=\"ph1\">&lt;xref href=\"System.Security.AccessControl.CommonSecurityDescriptor\"&gt;&lt;/xref&gt;</ph> object.","source":"Removes all access rules for the specified security identifier from the Discretionary Access Control List (DACL) associated with this <xref href=\"System.Security.AccessControl.CommonSecurityDescriptor\"></xref> object."}],"pos":[40457,40675],"yaml":true},{"content":"To avoid unintentionally allowing access to principals, applications should check for the existence of an allow everyone full access (AEFA) access control entry (ACE) and remove it before modifying a DACL.","nodes":[{"pos":[0,205],"content":"To avoid unintentionally allowing access to principals, applications should check for the existence of an allow everyone full access (AEFA) access control entry (ACE) and remove it before modifying a DACL.","nodes":[{"content":"To avoid unintentionally allowing access to principals, applications should check for the existence of an allow everyone full access (AEFA) access control entry (ACE) and remove it before modifying a DACL.","pos":[0,205]}]}],"pos":[40686,40892],"yaml":true,"extradata":"MT"},{"content":"The security identifier for which to remove access rules.","nodes":[{"pos":[0,57],"content":"The security identifier for which to remove access rules.","nodes":[{"content":"The security identifier for which to remove access rules.","pos":[0,57]}]}],"pos":[41104,41162],"yaml":true},{"content":"Removes all audit rules for the specified security identifier from the System Access Control List (SACL) associated with this <xref href=\"System.Security.AccessControl.CommonSecurityDescriptor\"></xref> object.","nodes":[{"pos":[0,209],"content":"Removes all audit rules for the specified security identifier from the System Access Control List (SACL) associated with this <ph id=\"ph1\">&lt;xref href=\"System.Security.AccessControl.CommonSecurityDescriptor\"&gt;&lt;/xref&gt;</ph> object.","source":"Removes all audit rules for the specified security identifier from the System Access Control List (SACL) associated with this <xref href=\"System.Security.AccessControl.CommonSecurityDescriptor\"></xref> object."}],"pos":[42741,42951],"yaml":true},{"content":"The security identifier for which to remove audit rules.","nodes":[{"pos":[0,56],"content":"The security identifier for which to remove audit rules.","nodes":[{"content":"The security identifier for which to remove audit rules.","pos":[0,56]}]}],"pos":[43155,43212],"yaml":true},{"content":"Sets the inheritance protection for the Discretionary Access Control List (DACL) associated with this <xref href=\"System.Security.AccessControl.CommonSecurityDescriptor\"></xref> object. DACLs that are protected do not inherit access rules from parent containers.","nodes":[{"pos":[0,262],"content":"Sets the inheritance protection for the Discretionary Access Control List (DACL) associated with this <xref href=\"System.Security.AccessControl.CommonSecurityDescriptor\"></xref> object. DACLs that are protected do not inherit access rules from parent containers.","nodes":[{"content":"Sets the inheritance protection for the Discretionary Access Control List (DACL) associated with this <ph id=\"ph1\">&lt;xref href=\"System.Security.AccessControl.CommonSecurityDescriptor\"&gt;&lt;/xref&gt;</ph> object.","pos":[0,185],"source":"Sets the inheritance protection for the Discretionary Access Control List (DACL) associated with this <xref href=\"System.Security.AccessControl.CommonSecurityDescriptor\"></xref> object."},{"content":"DACLs that are protected do not inherit access rules from parent containers.","pos":[186,262]}]}],"pos":[44846,45109],"yaml":true},{"content":"`true` to protect the DACL from inheritance.","nodes":[{"pos":[0,44],"content":"<ph id=\"ph1\">`true`</ph> to protect the DACL from inheritance.","source":"`true` to protect the DACL from inheritance."}],"pos":[45304,45351],"yaml":true},{"content":"`true` to keep inherited access rules in the DACL; `false` to remove inherited access rules from the DACL.","nodes":[{"pos":[0,106],"content":"<ph id=\"ph1\">`true`</ph> to keep inherited access rules in the DACL; <ph id=\"ph2\">`false`</ph> to remove inherited access rules from the DACL.","source":"`true` to keep inherited access rules in the DACL; `false` to remove inherited access rules from the DACL."}],"pos":[45427,45536],"yaml":true},{"content":"Sets the inheritance protection for the System Access Control List (SACL) associated with this <xref href=\"System.Security.AccessControl.CommonSecurityDescriptor\"></xref> object. SACLs that are protected do not inherit audit rules from parent containers.","nodes":[{"pos":[0,254],"content":"Sets the inheritance protection for the System Access Control List (SACL) associated with this <xref href=\"System.Security.AccessControl.CommonSecurityDescriptor\"></xref> object. SACLs that are protected do not inherit audit rules from parent containers.","nodes":[{"content":"Sets the inheritance protection for the System Access Control List (SACL) associated with this <ph id=\"ph1\">&lt;xref href=\"System.Security.AccessControl.CommonSecurityDescriptor\"&gt;&lt;/xref&gt;</ph> object.","pos":[0,178],"source":"Sets the inheritance protection for the System Access Control List (SACL) associated with this <xref href=\"System.Security.AccessControl.CommonSecurityDescriptor\"></xref> object."},{"content":"SACLs that are protected do not inherit audit rules from parent containers.","pos":[179,254]}]}],"pos":[47147,47402],"yaml":true},{"content":"`true` to protect the SACL from inheritance.","nodes":[{"pos":[0,44],"content":"<ph id=\"ph1\">`true`</ph> to protect the SACL from inheritance.","source":"`true` to protect the SACL from inheritance."}],"pos":[47590,47637],"yaml":true},{"content":"`true` to keep inherited audit rules in the SACL; `false` to remove inherited audit rules from the SACL.","nodes":[{"pos":[0,104],"content":"<ph id=\"ph1\">`true`</ph> to keep inherited audit rules in the SACL; <ph id=\"ph2\">`false`</ph> to remove inherited audit rules from the SACL.","source":"`true` to keep inherited audit rules in the SACL; `false` to remove inherited audit rules from the SACL."}],"pos":[47713,47820],"yaml":true},{"content":"Gets or sets the System Access Control List (SACL) for this <xref href=\"System.Security.AccessControl.CommonSecurityDescriptor\"></xref> object. The SACL contains audit rules.","nodes":[{"pos":[0,174],"content":"Gets or sets the System Access Control List (SACL) for this <xref href=\"System.Security.AccessControl.CommonSecurityDescriptor\"></xref> object. The SACL contains audit rules.","nodes":[{"content":"Gets or sets the System Access Control List (SACL) for this <ph id=\"ph1\">&lt;xref href=\"System.Security.AccessControl.CommonSecurityDescriptor\"&gt;&lt;/xref&gt;</ph> object.","pos":[0,143],"source":"Gets or sets the System Access Control List (SACL) for this <xref href=\"System.Security.AccessControl.CommonSecurityDescriptor\"></xref> object."},{"content":"The SACL contains audit rules.","pos":[144,174]}]}],"pos":[49201,49376],"yaml":true},{"content":"The SACL for this <xref href=\"System.Security.AccessControl.CommonSecurityDescriptor\"></xref> object.","nodes":[{"pos":[0,101],"content":"The SACL for this <ph id=\"ph1\">&lt;xref href=\"System.Security.AccessControl.CommonSecurityDescriptor\"&gt;&lt;/xref&gt;</ph> object.","source":"The SACL for this <xref href=\"System.Security.AccessControl.CommonSecurityDescriptor\"></xref> object."}],"pos":[49553,49655],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Security.AccessControl.CommonSecurityDescriptor\n  commentId: T:System.Security.AccessControl.CommonSecurityDescriptor\n  id: CommonSecurityDescriptor\n  children:\n  - System.Security.AccessControl.CommonSecurityDescriptor.#ctor(System.Boolean,System.Boolean,System.Security.AccessControl.RawSecurityDescriptor)\n  - System.Security.AccessControl.CommonSecurityDescriptor.#ctor(System.Boolean,System.Boolean,System.String)\n  - System.Security.AccessControl.CommonSecurityDescriptor.#ctor(System.Boolean,System.Boolean,System.Byte[],System.Int32)\n  - System.Security.AccessControl.CommonSecurityDescriptor.#ctor(System.Boolean,System.Boolean,System.Security.AccessControl.ControlFlags,System.Security.Principal.SecurityIdentifier,System.Security.Principal.SecurityIdentifier,System.Security.AccessControl.SystemAcl,System.Security.AccessControl.DiscretionaryAcl)\n  - System.Security.AccessControl.CommonSecurityDescriptor.AddDiscretionaryAcl(System.Byte,System.Int32)\n  - System.Security.AccessControl.CommonSecurityDescriptor.AddSystemAcl(System.Byte,System.Int32)\n  - System.Security.AccessControl.CommonSecurityDescriptor.ControlFlags\n  - System.Security.AccessControl.CommonSecurityDescriptor.DiscretionaryAcl\n  - System.Security.AccessControl.CommonSecurityDescriptor.Group\n  - System.Security.AccessControl.CommonSecurityDescriptor.IsContainer\n  - System.Security.AccessControl.CommonSecurityDescriptor.IsDiscretionaryAclCanonical\n  - System.Security.AccessControl.CommonSecurityDescriptor.IsDS\n  - System.Security.AccessControl.CommonSecurityDescriptor.IsSystemAclCanonical\n  - System.Security.AccessControl.CommonSecurityDescriptor.Owner\n  - System.Security.AccessControl.CommonSecurityDescriptor.PurgeAccessControl(System.Security.Principal.SecurityIdentifier)\n  - System.Security.AccessControl.CommonSecurityDescriptor.PurgeAudit(System.Security.Principal.SecurityIdentifier)\n  - System.Security.AccessControl.CommonSecurityDescriptor.SetDiscretionaryAclProtection(System.Boolean,System.Boolean)\n  - System.Security.AccessControl.CommonSecurityDescriptor.SetSystemAclProtection(System.Boolean,System.Boolean)\n  - System.Security.AccessControl.CommonSecurityDescriptor.SystemAcl\n  langs:\n  - csharp\n  name: CommonSecurityDescriptor\n  nameWithType: CommonSecurityDescriptor\n  fullName: System.Security.AccessControl.CommonSecurityDescriptor\n  type: Class\n  assemblies:\n  - System.Security.AccessControl\n  - mscorlib\n  namespace: System.Security.AccessControl\n  summary: Represents a security descriptor. A security descriptor includes an owner, a primary group, a Discretionary Access Control List (DACL), and a System Access Control List (SACL).\n  syntax:\n    content: 'public sealed class CommonSecurityDescriptor : System.Security.AccessControl.GenericSecurityDescriptor'\n  inheritance:\n  - System.Object\n  - System.Security.AccessControl.GenericSecurityDescriptor\n  implements: []\n  inheritedMembers:\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.ToString\n  - System.Security.AccessControl.GenericSecurityDescriptor.BinaryLength\n  - System.Security.AccessControl.GenericSecurityDescriptor.GetBinaryForm(System.Byte[],System.Int32)\n  - System.Security.AccessControl.GenericSecurityDescriptor.GetSddlForm(System.Security.AccessControl.AccessControlSections)\n  - System.Security.AccessControl.GenericSecurityDescriptor.IsSddlConversionSupported\n  - System.Security.AccessControl.GenericSecurityDescriptor.Revision\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.AccessControl/CommonSecurityDescriptor.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.AccessControl.CommonSecurityDescriptor.#ctor(System.Boolean,System.Boolean,System.Security.AccessControl.RawSecurityDescriptor)\n  commentId: M:System.Security.AccessControl.CommonSecurityDescriptor.#ctor(System.Boolean,System.Boolean,System.Security.AccessControl.RawSecurityDescriptor)\n  id: '#ctor(System.Boolean,System.Boolean,System.Security.AccessControl.RawSecurityDescriptor)'\n  parent: System.Security.AccessControl.CommonSecurityDescriptor\n  langs:\n  - csharp\n  name: CommonSecurityDescriptor(Boolean, Boolean, RawSecurityDescriptor)\n  nameWithType: CommonSecurityDescriptor.CommonSecurityDescriptor(Boolean, Boolean, RawSecurityDescriptor)\n  fullName: CommonSecurityDescriptor.CommonSecurityDescriptor(Boolean, Boolean, RawSecurityDescriptor)\n  type: Constructor\n  assemblies:\n  - System.Security.AccessControl\n  - mscorlib\n  namespace: System.Security.AccessControl\n  summary: Initializes a new instance of the <xref href=\"System.Security.AccessControl.CommonSecurityDescriptor\"></xref> class from the specified <xref href=\"System.Security.AccessControl.RawSecurityDescriptor\"></xref> object.\n  remarks: \"If the underlying security descriptor from which the new <xref:System.Security.AccessControl.RawSecurityDescriptor> object is created contains `null` for its discretionary access control list (DACL), a single access control entry (ACE) that allows everyone full access (AEFA) is added to the DACL. If an application modifies the DACL of a security descriptor to which an AEFA ACE has been added, the AEFA ACE is persisted with the DACL when that DACL is persisted.  \\n  \\n This can result in an application unintentionally allowing access to principals. Because of this, an application should check for the existence of an AEFA ACE and remove it before modifying any security descriptor.\"\n  syntax:\n    content: public CommonSecurityDescriptor (bool isContainer, bool isDS, System.Security.AccessControl.RawSecurityDescriptor rawSecurityDescriptor);\n    parameters:\n    - id: isContainer\n      type: System.Boolean\n      description: '`true` if the new security descriptor is associated with a container object.'\n    - id: isDS\n      type: System.Boolean\n      description: '`true` if the new security descriptor is associated with a directory object.'\n    - id: rawSecurityDescriptor\n      type: System.Security.AccessControl.RawSecurityDescriptor\n      description: The <xref href=\"System.Security.AccessControl.RawSecurityDescriptor\"></xref> object from which to create the new <xref href=\"System.Security.AccessControl.CommonSecurityDescriptor\"></xref> object.\n  overload: System.Security.AccessControl.CommonSecurityDescriptor.#ctor*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.AccessControl/CommonSecurityDescriptor.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.AccessControl.CommonSecurityDescriptor.#ctor(System.Boolean,System.Boolean,System.String)\n  commentId: M:System.Security.AccessControl.CommonSecurityDescriptor.#ctor(System.Boolean,System.Boolean,System.String)\n  id: '#ctor(System.Boolean,System.Boolean,System.String)'\n  parent: System.Security.AccessControl.CommonSecurityDescriptor\n  langs:\n  - csharp\n  name: CommonSecurityDescriptor(Boolean, Boolean, String)\n  nameWithType: CommonSecurityDescriptor.CommonSecurityDescriptor(Boolean, Boolean, String)\n  fullName: CommonSecurityDescriptor.CommonSecurityDescriptor(Boolean, Boolean, String)\n  type: Constructor\n  assemblies:\n  - System.Security.AccessControl\n  - mscorlib\n  namespace: System.Security.AccessControl\n  summary: Initializes a new instance of the <xref href=\"System.Security.AccessControl.CommonSecurityDescriptor\"></xref> class from the specified Security Descriptor Definition Language (SDDL) string.\n  remarks: \"If the underlying security descriptor from which the new <xref:System.Security.AccessControl.RawSecurityDescriptor> object is created contains `null` for its discretionary access control list (DACL), a single access control entry (ACE) that allows everyone full access (AEFA) is added to the DACL. If an application modifies the DACL of a security descriptor to which an AEFA ACE has been added, the AEFA ACE is persisted with the DACL when that DACL is persisted.  \\n  \\n This can result in an application unintentionally allowing access to principals. Because of this, an application should check for the existence of an AEFA ACE and remove it before modifying any security descriptor.\"\n  syntax:\n    content: public CommonSecurityDescriptor (bool isContainer, bool isDS, string sddlForm);\n    parameters:\n    - id: isContainer\n      type: System.Boolean\n      description: '`true` if the new security descriptor is associated with a container object.'\n    - id: isDS\n      type: System.Boolean\n      description: '`true` if the new security descriptor is associated with a directory object.'\n    - id: sddlForm\n      type: System.String\n      description: The SDDL string from which to create the new <xref href=\"System.Security.AccessControl.CommonSecurityDescriptor\"></xref> object.\n  overload: System.Security.AccessControl.CommonSecurityDescriptor.#ctor*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.AccessControl/CommonSecurityDescriptor.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.AccessControl.CommonSecurityDescriptor.#ctor(System.Boolean,System.Boolean,System.Byte[],System.Int32)\n  commentId: M:System.Security.AccessControl.CommonSecurityDescriptor.#ctor(System.Boolean,System.Boolean,System.Byte[],System.Int32)\n  id: '#ctor(System.Boolean,System.Boolean,System.Byte[],System.Int32)'\n  parent: System.Security.AccessControl.CommonSecurityDescriptor\n  langs:\n  - csharp\n  name: CommonSecurityDescriptor(Boolean, Boolean, Byte[], Int32)\n  nameWithType: CommonSecurityDescriptor.CommonSecurityDescriptor(Boolean, Boolean, Byte[], Int32)\n  fullName: CommonSecurityDescriptor.CommonSecurityDescriptor(Boolean, Boolean, Byte[], Int32)\n  type: Constructor\n  assemblies:\n  - System.Security.AccessControl\n  - mscorlib\n  namespace: System.Security.AccessControl\n  summary: Initializes a new instance of the <xref href=\"System.Security.AccessControl.CommonSecurityDescriptor\"></xref> class from the specified array of byte values.\n  remarks: \"If the underlying security descriptor from which the new <xref:System.Security.AccessControl.RawSecurityDescriptor> object is created contains `null` for its discretionary access control list (DACL),a single access control entry (ACE) that allows everyone full access (AEFA) is added to the DACL. If an application modifies the DACL of a security descriptor to which an AEFA ACE has been added, the AEFA ACE is persisted with the DACL when that DACL is persisted.  \\n  \\n This can result in an application unintentionally allowing access to principals. Because of this, an application should check for the existence of an AEFA ACE and remove it before modifying any security descriptor.\"\n  syntax:\n    content: public CommonSecurityDescriptor (bool isContainer, bool isDS, byte[] binaryForm, int offset);\n    parameters:\n    - id: isContainer\n      type: System.Boolean\n      description: '`true` if the new security descriptor is associated with a container object.'\n    - id: isDS\n      type: System.Boolean\n      description: '`true` if the new security descriptor is associated with a directory object.'\n    - id: binaryForm\n      type: System.Byte[]\n      description: The array of byte values from which to create the new <xref href=\"System.Security.AccessControl.CommonSecurityDescriptor\"></xref> object.\n    - id: offset\n      type: System.Int32\n      description: The offset in the <code>binaryForm</code> array at which to begin copying.\n  overload: System.Security.AccessControl.CommonSecurityDescriptor.#ctor*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.AccessControl/CommonSecurityDescriptor.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.AccessControl.CommonSecurityDescriptor.#ctor(System.Boolean,System.Boolean,System.Security.AccessControl.ControlFlags,System.Security.Principal.SecurityIdentifier,System.Security.Principal.SecurityIdentifier,System.Security.AccessControl.SystemAcl,System.Security.AccessControl.DiscretionaryAcl)\n  commentId: M:System.Security.AccessControl.CommonSecurityDescriptor.#ctor(System.Boolean,System.Boolean,System.Security.AccessControl.ControlFlags,System.Security.Principal.SecurityIdentifier,System.Security.Principal.SecurityIdentifier,System.Security.AccessControl.SystemAcl,System.Security.AccessControl.DiscretionaryAcl)\n  id: '#ctor(System.Boolean,System.Boolean,System.Security.AccessControl.ControlFlags,System.Security.Principal.SecurityIdentifier,System.Security.Principal.SecurityIdentifier,System.Security.AccessControl.SystemAcl,System.Security.AccessControl.DiscretionaryAcl)'\n  parent: System.Security.AccessControl.CommonSecurityDescriptor\n  langs:\n  - csharp\n  name: CommonSecurityDescriptor(Boolean, Boolean, ControlFlags, SecurityIdentifier, SecurityIdentifier, SystemAcl, DiscretionaryAcl)\n  nameWithType: CommonSecurityDescriptor.CommonSecurityDescriptor(Boolean, Boolean, ControlFlags, SecurityIdentifier, SecurityIdentifier, SystemAcl, DiscretionaryAcl)\n  fullName: CommonSecurityDescriptor.CommonSecurityDescriptor(Boolean, Boolean, ControlFlags, SecurityIdentifier, SecurityIdentifier, SystemAcl, DiscretionaryAcl)\n  type: Constructor\n  assemblies:\n  - System.Security.AccessControl\n  - mscorlib\n  namespace: System.Security.AccessControl\n  summary: Initializes a new instance of the <xref href=\"System.Security.AccessControl.CommonSecurityDescriptor\"></xref> class from the specified information.\n  remarks: \"If the underlying security descriptor from which the new <xref:System.Security.AccessControl.RawSecurityDescriptor> object is created contains `null` for its discretionary access control list (DACL), a single access control entry (ACE) that allows everyone full access (AEFA) is added to the DACL. If an application modifies the DACL of a security descriptor to which an AEFA ACE has been added, the AEFA ACE is persisted with the DACL when that DACL is persisted.  \\n  \\n This can result in an application unintentionally allowing access to principals. Because of this, an application should check for the existence of an AEFA ACE and remove it before modifying any security descriptor.\"\n  syntax:\n    content: public CommonSecurityDescriptor (bool isContainer, bool isDS, System.Security.AccessControl.ControlFlags flags, System.Security.Principal.SecurityIdentifier owner, System.Security.Principal.SecurityIdentifier group, System.Security.AccessControl.SystemAcl systemAcl, System.Security.AccessControl.DiscretionaryAcl discretionaryAcl);\n    parameters:\n    - id: isContainer\n      type: System.Boolean\n      description: '`true` if the new security descriptor is associated with a container object.'\n    - id: isDS\n      type: System.Boolean\n      description: '`true` if the new security descriptor is associated with a directory object.'\n    - id: flags\n      type: System.Security.AccessControl.ControlFlags\n      description: Flags that specify behavior of the new <xref href=\"System.Security.AccessControl.CommonSecurityDescriptor\"></xref> object.\n    - id: owner\n      type: System.Security.Principal.SecurityIdentifier\n      description: The owner for the new <xref href=\"System.Security.AccessControl.CommonSecurityDescriptor\"></xref> object.\n    - id: group\n      type: System.Security.Principal.SecurityIdentifier\n      description: The primary group for the new <xref href=\"System.Security.AccessControl.CommonSecurityDescriptor\"></xref> object.\n    - id: systemAcl\n      type: System.Security.AccessControl.SystemAcl\n      description: The System Access Control List (SACL) for the new <xref href=\"System.Security.AccessControl.CommonSecurityDescriptor\"></xref> object.\n    - id: discretionaryAcl\n      type: System.Security.AccessControl.DiscretionaryAcl\n      description: The Discretionary Access Control List (DACL) for the new <xref href=\"System.Security.AccessControl.CommonSecurityDescriptor\"></xref> object.\n  overload: System.Security.AccessControl.CommonSecurityDescriptor.#ctor*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.AccessControl/CommonSecurityDescriptor.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.AccessControl.CommonSecurityDescriptor.AddDiscretionaryAcl(System.Byte,System.Int32)\n  commentId: M:System.Security.AccessControl.CommonSecurityDescriptor.AddDiscretionaryAcl(System.Byte,System.Int32)\n  id: AddDiscretionaryAcl(System.Byte,System.Int32)\n  parent: System.Security.AccessControl.CommonSecurityDescriptor\n  langs:\n  - csharp\n  name: AddDiscretionaryAcl(Byte, Int32)\n  nameWithType: CommonSecurityDescriptor.AddDiscretionaryAcl(Byte, Int32)\n  fullName: CommonSecurityDescriptor.AddDiscretionaryAcl(Byte, Int32)\n  type: Method\n  assemblies:\n  - System.Security.AccessControl\n  - mscorlib\n  namespace: System.Security.AccessControl\n  summary: Sets the <xref href=\"System.Security.AccessControl.CommonSecurityDescriptor.DiscretionaryAcl\"></xref> property for this <xref href=\"System.Security.AccessControl.CommonSecurityDescriptor\"></xref> instance and sets the <xref href=\"System.Security.AccessControl.ControlFlags.DiscretionaryAclPresent\"></xref> flag.\n  remarks: The constructor for the <xref:System.Security.AccessControl.DiscretionaryAcl> uses the <xref:System.Security.AccessControl.CommonSecurityDescriptor.IsContainer%2A> and <xref:System.Security.AccessControl.CommonSecurityDescriptor.IsDS%2A> properties for this <xref:System.Security.AccessControl.CommonSecurityDescriptor>.\n  syntax:\n    content: public void AddDiscretionaryAcl (byte revision, int trusted);\n    parameters:\n    - id: revision\n      type: System.Byte\n      description: The revision level of the new <xref href=\"System.Security.AccessControl.DiscretionaryAcl\"></xref> object.\n    - id: trusted\n      type: System.Int32\n      description: The number of Access Control Entries (ACEs) this <xref href=\"System.Security.AccessControl.DiscretionaryAcl\"></xref> object can contain. This number is to be used only as a hint.\n  overload: System.Security.AccessControl.CommonSecurityDescriptor.AddDiscretionaryAcl*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.AccessControl/CommonSecurityDescriptor.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.AccessControl.CommonSecurityDescriptor.AddSystemAcl(System.Byte,System.Int32)\n  commentId: M:System.Security.AccessControl.CommonSecurityDescriptor.AddSystemAcl(System.Byte,System.Int32)\n  id: AddSystemAcl(System.Byte,System.Int32)\n  parent: System.Security.AccessControl.CommonSecurityDescriptor\n  langs:\n  - csharp\n  name: AddSystemAcl(Byte, Int32)\n  nameWithType: CommonSecurityDescriptor.AddSystemAcl(Byte, Int32)\n  fullName: CommonSecurityDescriptor.AddSystemAcl(Byte, Int32)\n  type: Method\n  assemblies:\n  - System.Security.AccessControl\n  - mscorlib\n  namespace: System.Security.AccessControl\n  summary: Sets the <xref href=\"System.Security.AccessControl.CommonSecurityDescriptor.SystemAcl\"></xref> property for this <xref href=\"System.Security.AccessControl.CommonSecurityDescriptor\"></xref> instance and sets the <xref href=\"System.Security.AccessControl.ControlFlags.SystemAclPresent\"></xref> flag.\n  remarks: The constructor for the <xref:System.Security.AccessControl.SystemAcl> uses the <xref:System.Security.AccessControl.CommonSecurityDescriptor.IsContainer%2A> and <xref:System.Security.AccessControl.CommonSecurityDescriptor.IsDS%2A> properties for this <xref:System.Security.AccessControl.CommonSecurityDescriptor>.\n  syntax:\n    content: public void AddSystemAcl (byte revision, int trusted);\n    parameters:\n    - id: revision\n      type: System.Byte\n      description: The revision level of the new <xref href=\"System.Security.AccessControl.SystemAcl\"></xref> object.\n    - id: trusted\n      type: System.Int32\n      description: ''\n  overload: System.Security.AccessControl.CommonSecurityDescriptor.AddSystemAcl*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.AccessControl/CommonSecurityDescriptor.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.AccessControl.CommonSecurityDescriptor.ControlFlags\n  commentId: P:System.Security.AccessControl.CommonSecurityDescriptor.ControlFlags\n  id: ControlFlags\n  parent: System.Security.AccessControl.CommonSecurityDescriptor\n  langs:\n  - csharp\n  name: ControlFlags\n  nameWithType: CommonSecurityDescriptor.ControlFlags\n  fullName: CommonSecurityDescriptor.ControlFlags\n  type: Property\n  assemblies:\n  - System.Security.AccessControl\n  - mscorlib\n  namespace: System.Security.AccessControl\n  summary: Gets values that specify behavior of the <xref href=\"System.Security.AccessControl.CommonSecurityDescriptor\"></xref> object.\n  syntax:\n    content: public override System.Security.AccessControl.ControlFlags ControlFlags { get; }\n    return:\n      type: System.Security.AccessControl.ControlFlags\n      description: One or more values of the <xref href=\"System.Security.AccessControl.ControlFlags\"></xref> enumeration combined with a logical OR operation.\n  overload: System.Security.AccessControl.CommonSecurityDescriptor.ControlFlags*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.AccessControl/CommonSecurityDescriptor.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.AccessControl.CommonSecurityDescriptor.DiscretionaryAcl\n  commentId: P:System.Security.AccessControl.CommonSecurityDescriptor.DiscretionaryAcl\n  id: DiscretionaryAcl\n  parent: System.Security.AccessControl.CommonSecurityDescriptor\n  langs:\n  - csharp\n  name: DiscretionaryAcl\n  nameWithType: CommonSecurityDescriptor.DiscretionaryAcl\n  fullName: CommonSecurityDescriptor.DiscretionaryAcl\n  type: Property\n  assemblies:\n  - System.Security.AccessControl\n  - mscorlib\n  namespace: System.Security.AccessControl\n  summary: Gets or sets the discretionary access control list (DACL) for this <xref href=\"System.Security.AccessControl.CommonSecurityDescriptor\"></xref> object. The DACL contains access rules.\n  remarks: \"If this property is set to `null`, a single access control entry (ACE) that allows everyone full access (AEFA) is added to the DACL. If an application modifies the DACL of a security descriptor to which an AEFA ACE has been added, the AEFA ACE is persisted with the DACL when that DACL is persisted.  \\n  \\n This can result in an application unintentionally allowing access to principals. Because of this, an application should check for the existence of an AEFA ACE and remove it before modifying any security descriptor.\"\n  syntax:\n    content: public System.Security.AccessControl.DiscretionaryAcl DiscretionaryAcl { get; set; }\n    return:\n      type: System.Security.AccessControl.DiscretionaryAcl\n      description: The DACL for this <xref href=\"System.Security.AccessControl.CommonSecurityDescriptor\"></xref> object.\n  overload: System.Security.AccessControl.CommonSecurityDescriptor.DiscretionaryAcl*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.AccessControl/CommonSecurityDescriptor.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.AccessControl.CommonSecurityDescriptor.Group\n  commentId: P:System.Security.AccessControl.CommonSecurityDescriptor.Group\n  id: Group\n  parent: System.Security.AccessControl.CommonSecurityDescriptor\n  langs:\n  - csharp\n  name: Group\n  nameWithType: CommonSecurityDescriptor.Group\n  fullName: CommonSecurityDescriptor.Group\n  type: Property\n  assemblies:\n  - System.Security.AccessControl\n  - mscorlib\n  namespace: System.Security.AccessControl\n  summary: Gets or sets the primary group for this <xref href=\"System.Security.AccessControl.CommonSecurityDescriptor\"></xref> object.\n  syntax:\n    content: public override System.Security.Principal.SecurityIdentifier Group { get; set; }\n    return:\n      type: System.Security.Principal.SecurityIdentifier\n      description: The primary group for this <xref href=\"System.Security.AccessControl.CommonSecurityDescriptor\"></xref> object.\n  overload: System.Security.AccessControl.CommonSecurityDescriptor.Group*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.AccessControl/CommonSecurityDescriptor.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.AccessControl.CommonSecurityDescriptor.IsContainer\n  commentId: P:System.Security.AccessControl.CommonSecurityDescriptor.IsContainer\n  id: IsContainer\n  parent: System.Security.AccessControl.CommonSecurityDescriptor\n  langs:\n  - csharp\n  name: IsContainer\n  nameWithType: CommonSecurityDescriptor.IsContainer\n  fullName: CommonSecurityDescriptor.IsContainer\n  type: Property\n  assemblies:\n  - System.Security.AccessControl\n  - mscorlib\n  namespace: System.Security.AccessControl\n  summary: Gets a Boolean value that specifies whether the object associated with this <xref href=\"System.Security.AccessControl.CommonSecurityDescriptor\"></xref> object is a container object.\n  syntax:\n    content: public bool IsContainer { get; }\n    return:\n      type: System.Boolean\n      description: '`true` if the object associated with this <xref href=\"System.Security.AccessControl.CommonSecurityDescriptor\"></xref> object is a container object; otherwise, `false`.'\n  overload: System.Security.AccessControl.CommonSecurityDescriptor.IsContainer*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.AccessControl/CommonSecurityDescriptor.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.AccessControl.CommonSecurityDescriptor.IsDiscretionaryAclCanonical\n  commentId: P:System.Security.AccessControl.CommonSecurityDescriptor.IsDiscretionaryAclCanonical\n  id: IsDiscretionaryAclCanonical\n  parent: System.Security.AccessControl.CommonSecurityDescriptor\n  langs:\n  - csharp\n  name: IsDiscretionaryAclCanonical\n  nameWithType: CommonSecurityDescriptor.IsDiscretionaryAclCanonical\n  fullName: CommonSecurityDescriptor.IsDiscretionaryAclCanonical\n  type: Property\n  assemblies:\n  - System.Security.AccessControl\n  - mscorlib\n  namespace: System.Security.AccessControl\n  summary: Gets a Boolean value that specifies whether the Discretionary Access Control List (DACL) associated with this <xref href=\"System.Security.AccessControl.CommonSecurityDescriptor\"></xref> object is in canonical order.\n  syntax:\n    content: public bool IsDiscretionaryAclCanonical { get; }\n    return:\n      type: System.Boolean\n      description: '`true` if the DACL associated with this <xref href=\"System.Security.AccessControl.CommonSecurityDescriptor\"></xref> object is in canonical order; otherwise, `false`.'\n  overload: System.Security.AccessControl.CommonSecurityDescriptor.IsDiscretionaryAclCanonical*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.AccessControl/CommonSecurityDescriptor.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.AccessControl.CommonSecurityDescriptor.IsDS\n  commentId: P:System.Security.AccessControl.CommonSecurityDescriptor.IsDS\n  id: IsDS\n  parent: System.Security.AccessControl.CommonSecurityDescriptor\n  langs:\n  - csharp\n  name: IsDS\n  nameWithType: CommonSecurityDescriptor.IsDS\n  fullName: CommonSecurityDescriptor.IsDS\n  type: Property\n  assemblies:\n  - System.Security.AccessControl\n  - mscorlib\n  namespace: System.Security.AccessControl\n  summary: Gets a Boolean value that specifies whether the object associated with this <xref href=\"System.Security.AccessControl.CommonSecurityDescriptor\"></xref> object is a directory object.\n  syntax:\n    content: public bool IsDS { get; }\n    return:\n      type: System.Boolean\n      description: '`true` if the object associated with this <xref href=\"System.Security.AccessControl.CommonSecurityDescriptor\"></xref> object is a directory object; otherwise, `false`.'\n  overload: System.Security.AccessControl.CommonSecurityDescriptor.IsDS*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.AccessControl/CommonSecurityDescriptor.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.AccessControl.CommonSecurityDescriptor.IsSystemAclCanonical\n  commentId: P:System.Security.AccessControl.CommonSecurityDescriptor.IsSystemAclCanonical\n  id: IsSystemAclCanonical\n  parent: System.Security.AccessControl.CommonSecurityDescriptor\n  langs:\n  - csharp\n  name: IsSystemAclCanonical\n  nameWithType: CommonSecurityDescriptor.IsSystemAclCanonical\n  fullName: CommonSecurityDescriptor.IsSystemAclCanonical\n  type: Property\n  assemblies:\n  - System.Security.AccessControl\n  - mscorlib\n  namespace: System.Security.AccessControl\n  summary: Gets a Boolean value that specifies whether the System Access Control List (SACL) associated with this <xref href=\"System.Security.AccessControl.CommonSecurityDescriptor\"></xref> object is in canonical order.\n  syntax:\n    content: public bool IsSystemAclCanonical { get; }\n    return:\n      type: System.Boolean\n      description: '`true` if the SACL associated with this <xref href=\"System.Security.AccessControl.CommonSecurityDescriptor\"></xref> object is in canonical order; otherwise, `false`.'\n  overload: System.Security.AccessControl.CommonSecurityDescriptor.IsSystemAclCanonical*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.AccessControl/CommonSecurityDescriptor.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.AccessControl.CommonSecurityDescriptor.Owner\n  commentId: P:System.Security.AccessControl.CommonSecurityDescriptor.Owner\n  id: Owner\n  parent: System.Security.AccessControl.CommonSecurityDescriptor\n  langs:\n  - csharp\n  name: Owner\n  nameWithType: CommonSecurityDescriptor.Owner\n  fullName: CommonSecurityDescriptor.Owner\n  type: Property\n  assemblies:\n  - System.Security.AccessControl\n  - mscorlib\n  namespace: System.Security.AccessControl\n  summary: Gets or sets the owner of the object associated with this <xref href=\"System.Security.AccessControl.CommonSecurityDescriptor\"></xref> object.\n  syntax:\n    content: public override System.Security.Principal.SecurityIdentifier Owner { get; set; }\n    return:\n      type: System.Security.Principal.SecurityIdentifier\n      description: The owner of the object associated with this <xref href=\"System.Security.AccessControl.CommonSecurityDescriptor\"></xref> object.\n  overload: System.Security.AccessControl.CommonSecurityDescriptor.Owner*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.AccessControl/CommonSecurityDescriptor.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.AccessControl.CommonSecurityDescriptor.PurgeAccessControl(System.Security.Principal.SecurityIdentifier)\n  commentId: M:System.Security.AccessControl.CommonSecurityDescriptor.PurgeAccessControl(System.Security.Principal.SecurityIdentifier)\n  id: PurgeAccessControl(System.Security.Principal.SecurityIdentifier)\n  parent: System.Security.AccessControl.CommonSecurityDescriptor\n  langs:\n  - csharp\n  name: PurgeAccessControl(SecurityIdentifier)\n  nameWithType: CommonSecurityDescriptor.PurgeAccessControl(SecurityIdentifier)\n  fullName: CommonSecurityDescriptor.PurgeAccessControl(SecurityIdentifier)\n  type: Method\n  assemblies:\n  - System.Security.AccessControl\n  - mscorlib\n  namespace: System.Security.AccessControl\n  summary: Removes all access rules for the specified security identifier from the Discretionary Access Control List (DACL) associated with this <xref href=\"System.Security.AccessControl.CommonSecurityDescriptor\"></xref> object.\n  remarks: To avoid unintentionally allowing access to principals, applications should check for the existence of an allow everyone full access (AEFA) access control entry (ACE) and remove it before modifying a DACL.\n  syntax:\n    content: public void PurgeAccessControl (System.Security.Principal.SecurityIdentifier sid);\n    parameters:\n    - id: sid\n      type: System.Security.Principal.SecurityIdentifier\n      description: The security identifier for which to remove access rules.\n  overload: System.Security.AccessControl.CommonSecurityDescriptor.PurgeAccessControl*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.AccessControl/CommonSecurityDescriptor.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.AccessControl.CommonSecurityDescriptor.PurgeAudit(System.Security.Principal.SecurityIdentifier)\n  commentId: M:System.Security.AccessControl.CommonSecurityDescriptor.PurgeAudit(System.Security.Principal.SecurityIdentifier)\n  id: PurgeAudit(System.Security.Principal.SecurityIdentifier)\n  parent: System.Security.AccessControl.CommonSecurityDescriptor\n  langs:\n  - csharp\n  name: PurgeAudit(SecurityIdentifier)\n  nameWithType: CommonSecurityDescriptor.PurgeAudit(SecurityIdentifier)\n  fullName: CommonSecurityDescriptor.PurgeAudit(SecurityIdentifier)\n  type: Method\n  assemblies:\n  - System.Security.AccessControl\n  - mscorlib\n  namespace: System.Security.AccessControl\n  summary: Removes all audit rules for the specified security identifier from the System Access Control List (SACL) associated with this <xref href=\"System.Security.AccessControl.CommonSecurityDescriptor\"></xref> object.\n  syntax:\n    content: public void PurgeAudit (System.Security.Principal.SecurityIdentifier sid);\n    parameters:\n    - id: sid\n      type: System.Security.Principal.SecurityIdentifier\n      description: The security identifier for which to remove audit rules.\n  overload: System.Security.AccessControl.CommonSecurityDescriptor.PurgeAudit*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.AccessControl/CommonSecurityDescriptor.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.AccessControl.CommonSecurityDescriptor.SetDiscretionaryAclProtection(System.Boolean,System.Boolean)\n  commentId: M:System.Security.AccessControl.CommonSecurityDescriptor.SetDiscretionaryAclProtection(System.Boolean,System.Boolean)\n  id: SetDiscretionaryAclProtection(System.Boolean,System.Boolean)\n  parent: System.Security.AccessControl.CommonSecurityDescriptor\n  langs:\n  - csharp\n  name: SetDiscretionaryAclProtection(Boolean, Boolean)\n  nameWithType: CommonSecurityDescriptor.SetDiscretionaryAclProtection(Boolean, Boolean)\n  fullName: CommonSecurityDescriptor.SetDiscretionaryAclProtection(Boolean, Boolean)\n  type: Method\n  assemblies:\n  - System.Security.AccessControl\n  - mscorlib\n  namespace: System.Security.AccessControl\n  summary: Sets the inheritance protection for the Discretionary Access Control List (DACL) associated with this <xref href=\"System.Security.AccessControl.CommonSecurityDescriptor\"></xref> object. DACLs that are protected do not inherit access rules from parent containers.\n  syntax:\n    content: public void SetDiscretionaryAclProtection (bool isProtected, bool preserveInheritance);\n    parameters:\n    - id: isProtected\n      type: System.Boolean\n      description: '`true` to protect the DACL from inheritance.'\n    - id: preserveInheritance\n      type: System.Boolean\n      description: '`true` to keep inherited access rules in the DACL; `false` to remove inherited access rules from the DACL.'\n  overload: System.Security.AccessControl.CommonSecurityDescriptor.SetDiscretionaryAclProtection*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.AccessControl/CommonSecurityDescriptor.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.AccessControl.CommonSecurityDescriptor.SetSystemAclProtection(System.Boolean,System.Boolean)\n  commentId: M:System.Security.AccessControl.CommonSecurityDescriptor.SetSystemAclProtection(System.Boolean,System.Boolean)\n  id: SetSystemAclProtection(System.Boolean,System.Boolean)\n  parent: System.Security.AccessControl.CommonSecurityDescriptor\n  langs:\n  - csharp\n  name: SetSystemAclProtection(Boolean, Boolean)\n  nameWithType: CommonSecurityDescriptor.SetSystemAclProtection(Boolean, Boolean)\n  fullName: CommonSecurityDescriptor.SetSystemAclProtection(Boolean, Boolean)\n  type: Method\n  assemblies:\n  - System.Security.AccessControl\n  - mscorlib\n  namespace: System.Security.AccessControl\n  summary: Sets the inheritance protection for the System Access Control List (SACL) associated with this <xref href=\"System.Security.AccessControl.CommonSecurityDescriptor\"></xref> object. SACLs that are protected do not inherit audit rules from parent containers.\n  syntax:\n    content: public void SetSystemAclProtection (bool isProtected, bool preserveInheritance);\n    parameters:\n    - id: isProtected\n      type: System.Boolean\n      description: '`true` to protect the SACL from inheritance.'\n    - id: preserveInheritance\n      type: System.Boolean\n      description: '`true` to keep inherited audit rules in the SACL; `false` to remove inherited audit rules from the SACL.'\n  overload: System.Security.AccessControl.CommonSecurityDescriptor.SetSystemAclProtection*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.AccessControl/CommonSecurityDescriptor.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.AccessControl.CommonSecurityDescriptor.SystemAcl\n  commentId: P:System.Security.AccessControl.CommonSecurityDescriptor.SystemAcl\n  id: SystemAcl\n  parent: System.Security.AccessControl.CommonSecurityDescriptor\n  langs:\n  - csharp\n  name: SystemAcl\n  nameWithType: CommonSecurityDescriptor.SystemAcl\n  fullName: CommonSecurityDescriptor.SystemAcl\n  type: Property\n  assemblies:\n  - System.Security.AccessControl\n  - mscorlib\n  namespace: System.Security.AccessControl\n  summary: Gets or sets the System Access Control List (SACL) for this <xref href=\"System.Security.AccessControl.CommonSecurityDescriptor\"></xref> object. The SACL contains audit rules.\n  syntax:\n    content: public System.Security.AccessControl.SystemAcl SystemAcl { get; set; }\n    return:\n      type: System.Security.AccessControl.SystemAcl\n      description: The SACL for this <xref href=\"System.Security.AccessControl.CommonSecurityDescriptor\"></xref> object.\n  overload: System.Security.AccessControl.CommonSecurityDescriptor.SystemAcl*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.AccessControl/CommonSecurityDescriptor.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\nreferences:\n- uid: System.Security.AccessControl.GenericSecurityDescriptor\n  parent: System.Security.AccessControl\n  isExternal: false\n  name: GenericSecurityDescriptor\n  nameWithType: GenericSecurityDescriptor\n  fullName: System.Security.AccessControl.GenericSecurityDescriptor\n- uid: System.Security.AccessControl.CommonSecurityDescriptor.#ctor(System.Boolean,System.Boolean,System.Security.AccessControl.RawSecurityDescriptor)\n  parent: System.Security.AccessControl.CommonSecurityDescriptor\n  isExternal: false\n  name: CommonSecurityDescriptor(Boolean, Boolean, RawSecurityDescriptor)\n  nameWithType: CommonSecurityDescriptor.CommonSecurityDescriptor(Boolean, Boolean, RawSecurityDescriptor)\n  fullName: CommonSecurityDescriptor.CommonSecurityDescriptor(Boolean, Boolean, RawSecurityDescriptor)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Security.AccessControl.RawSecurityDescriptor\n  parent: System.Security.AccessControl\n  isExternal: false\n  name: RawSecurityDescriptor\n  nameWithType: RawSecurityDescriptor\n  fullName: System.Security.AccessControl.RawSecurityDescriptor\n- uid: System.Security.AccessControl.CommonSecurityDescriptor.#ctor(System.Boolean,System.Boolean,System.String)\n  parent: System.Security.AccessControl.CommonSecurityDescriptor\n  isExternal: false\n  name: CommonSecurityDescriptor(Boolean, Boolean, String)\n  nameWithType: CommonSecurityDescriptor.CommonSecurityDescriptor(Boolean, Boolean, String)\n  fullName: CommonSecurityDescriptor.CommonSecurityDescriptor(Boolean, Boolean, String)\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Security.AccessControl.CommonSecurityDescriptor.#ctor(System.Boolean,System.Boolean,System.Byte[],System.Int32)\n  parent: System.Security.AccessControl.CommonSecurityDescriptor\n  isExternal: false\n  name: CommonSecurityDescriptor(Boolean, Boolean, Byte[], Int32)\n  nameWithType: CommonSecurityDescriptor.CommonSecurityDescriptor(Boolean, Boolean, Byte[], Int32)\n  fullName: CommonSecurityDescriptor.CommonSecurityDescriptor(Boolean, Boolean, Byte[], Int32)\n- uid: System.Byte\n  name: Byte\n  nameWithType: Byte\n  fullName: System.Byte\n- uid: System.Byte[]\n  parent: System\n  isExternal: false\n  name: Byte[]\n  nameWithType: Byte[]\n  fullName: System.Byte[]\n  spec.csharp:\n  - uid: System.Byte\n    name: Byte\n    nameWithType: Byte\n    fullName: System.Byte\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Security.AccessControl.CommonSecurityDescriptor.#ctor(System.Boolean,System.Boolean,System.Security.AccessControl.ControlFlags,System.Security.Principal.SecurityIdentifier,System.Security.Principal.SecurityIdentifier,System.Security.AccessControl.SystemAcl,System.Security.AccessControl.DiscretionaryAcl)\n  parent: System.Security.AccessControl.CommonSecurityDescriptor\n  isExternal: false\n  name: CommonSecurityDescriptor(Boolean, Boolean, ControlFlags, SecurityIdentifier, SecurityIdentifier, SystemAcl, DiscretionaryAcl)\n  nameWithType: CommonSecurityDescriptor.CommonSecurityDescriptor(Boolean, Boolean, ControlFlags, SecurityIdentifier, SecurityIdentifier, SystemAcl, DiscretionaryAcl)\n  fullName: CommonSecurityDescriptor.CommonSecurityDescriptor(Boolean, Boolean, ControlFlags, SecurityIdentifier, SecurityIdentifier, SystemAcl, DiscretionaryAcl)\n- uid: System.Security.AccessControl.ControlFlags\n  parent: System.Security.AccessControl\n  isExternal: false\n  name: ControlFlags\n  nameWithType: ControlFlags\n  fullName: System.Security.AccessControl.ControlFlags\n- uid: System.Security.Principal.SecurityIdentifier\n  parent: System.Security.Principal\n  isExternal: false\n  name: SecurityIdentifier\n  nameWithType: SecurityIdentifier\n  fullName: System.Security.Principal.SecurityIdentifier\n- uid: System.Security.AccessControl.SystemAcl\n  parent: System.Security.AccessControl\n  isExternal: false\n  name: SystemAcl\n  nameWithType: SystemAcl\n  fullName: System.Security.AccessControl.SystemAcl\n- uid: System.Security.AccessControl.DiscretionaryAcl\n  parent: System.Security.AccessControl\n  isExternal: false\n  name: DiscretionaryAcl\n  nameWithType: DiscretionaryAcl\n  fullName: System.Security.AccessControl.DiscretionaryAcl\n- uid: System.Security.AccessControl.CommonSecurityDescriptor.AddDiscretionaryAcl(System.Byte,System.Int32)\n  parent: System.Security.AccessControl.CommonSecurityDescriptor\n  isExternal: false\n  name: AddDiscretionaryAcl(Byte, Int32)\n  nameWithType: CommonSecurityDescriptor.AddDiscretionaryAcl(Byte, Int32)\n  fullName: CommonSecurityDescriptor.AddDiscretionaryAcl(Byte, Int32)\n- uid: System.Security.AccessControl.CommonSecurityDescriptor.AddSystemAcl(System.Byte,System.Int32)\n  parent: System.Security.AccessControl.CommonSecurityDescriptor\n  isExternal: false\n  name: AddSystemAcl(Byte, Int32)\n  nameWithType: CommonSecurityDescriptor.AddSystemAcl(Byte, Int32)\n  fullName: CommonSecurityDescriptor.AddSystemAcl(Byte, Int32)\n- uid: System.Security.AccessControl.CommonSecurityDescriptor.ControlFlags\n  parent: System.Security.AccessControl.CommonSecurityDescriptor\n  isExternal: false\n  name: ControlFlags\n  nameWithType: CommonSecurityDescriptor.ControlFlags\n  fullName: CommonSecurityDescriptor.ControlFlags\n- uid: System.Security.AccessControl.CommonSecurityDescriptor.DiscretionaryAcl\n  parent: System.Security.AccessControl.CommonSecurityDescriptor\n  isExternal: false\n  name: DiscretionaryAcl\n  nameWithType: CommonSecurityDescriptor.DiscretionaryAcl\n  fullName: CommonSecurityDescriptor.DiscretionaryAcl\n- uid: System.Security.AccessControl.CommonSecurityDescriptor.Group\n  parent: System.Security.AccessControl.CommonSecurityDescriptor\n  isExternal: false\n  name: Group\n  nameWithType: CommonSecurityDescriptor.Group\n  fullName: CommonSecurityDescriptor.Group\n- uid: System.Security.AccessControl.CommonSecurityDescriptor.IsContainer\n  parent: System.Security.AccessControl.CommonSecurityDescriptor\n  isExternal: false\n  name: IsContainer\n  nameWithType: CommonSecurityDescriptor.IsContainer\n  fullName: CommonSecurityDescriptor.IsContainer\n- uid: System.Security.AccessControl.CommonSecurityDescriptor.IsDiscretionaryAclCanonical\n  parent: System.Security.AccessControl.CommonSecurityDescriptor\n  isExternal: false\n  name: IsDiscretionaryAclCanonical\n  nameWithType: CommonSecurityDescriptor.IsDiscretionaryAclCanonical\n  fullName: CommonSecurityDescriptor.IsDiscretionaryAclCanonical\n- uid: System.Security.AccessControl.CommonSecurityDescriptor.IsDS\n  parent: System.Security.AccessControl.CommonSecurityDescriptor\n  isExternal: false\n  name: IsDS\n  nameWithType: CommonSecurityDescriptor.IsDS\n  fullName: CommonSecurityDescriptor.IsDS\n- uid: System.Security.AccessControl.CommonSecurityDescriptor.IsSystemAclCanonical\n  parent: System.Security.AccessControl.CommonSecurityDescriptor\n  isExternal: false\n  name: IsSystemAclCanonical\n  nameWithType: CommonSecurityDescriptor.IsSystemAclCanonical\n  fullName: CommonSecurityDescriptor.IsSystemAclCanonical\n- uid: System.Security.AccessControl.CommonSecurityDescriptor.Owner\n  parent: System.Security.AccessControl.CommonSecurityDescriptor\n  isExternal: false\n  name: Owner\n  nameWithType: CommonSecurityDescriptor.Owner\n  fullName: CommonSecurityDescriptor.Owner\n- uid: System.Security.AccessControl.CommonSecurityDescriptor.PurgeAccessControl(System.Security.Principal.SecurityIdentifier)\n  parent: System.Security.AccessControl.CommonSecurityDescriptor\n  isExternal: false\n  name: PurgeAccessControl(SecurityIdentifier)\n  nameWithType: CommonSecurityDescriptor.PurgeAccessControl(SecurityIdentifier)\n  fullName: CommonSecurityDescriptor.PurgeAccessControl(SecurityIdentifier)\n- uid: System.Security.AccessControl.CommonSecurityDescriptor.PurgeAudit(System.Security.Principal.SecurityIdentifier)\n  parent: System.Security.AccessControl.CommonSecurityDescriptor\n  isExternal: false\n  name: PurgeAudit(SecurityIdentifier)\n  nameWithType: CommonSecurityDescriptor.PurgeAudit(SecurityIdentifier)\n  fullName: CommonSecurityDescriptor.PurgeAudit(SecurityIdentifier)\n- uid: System.Security.AccessControl.CommonSecurityDescriptor.SetDiscretionaryAclProtection(System.Boolean,System.Boolean)\n  parent: System.Security.AccessControl.CommonSecurityDescriptor\n  isExternal: false\n  name: SetDiscretionaryAclProtection(Boolean, Boolean)\n  nameWithType: CommonSecurityDescriptor.SetDiscretionaryAclProtection(Boolean, Boolean)\n  fullName: CommonSecurityDescriptor.SetDiscretionaryAclProtection(Boolean, Boolean)\n- uid: System.Security.AccessControl.CommonSecurityDescriptor.SetSystemAclProtection(System.Boolean,System.Boolean)\n  parent: System.Security.AccessControl.CommonSecurityDescriptor\n  isExternal: false\n  name: SetSystemAclProtection(Boolean, Boolean)\n  nameWithType: CommonSecurityDescriptor.SetSystemAclProtection(Boolean, Boolean)\n  fullName: CommonSecurityDescriptor.SetSystemAclProtection(Boolean, Boolean)\n- uid: System.Security.AccessControl.CommonSecurityDescriptor.SystemAcl\n  parent: System.Security.AccessControl.CommonSecurityDescriptor\n  isExternal: false\n  name: SystemAcl\n  nameWithType: CommonSecurityDescriptor.SystemAcl\n  fullName: CommonSecurityDescriptor.SystemAcl\n- uid: System.Security.AccessControl.CommonSecurityDescriptor.#ctor*\n  parent: System.Security.AccessControl.CommonSecurityDescriptor\n  isExternal: false\n  name: CommonSecurityDescriptor\n  nameWithType: CommonSecurityDescriptor.CommonSecurityDescriptor\n  fullName: CommonSecurityDescriptor.CommonSecurityDescriptor\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.AccessControl/CommonSecurityDescriptor.xml\n- uid: System.Security.AccessControl.CommonSecurityDescriptor.AddDiscretionaryAcl*\n  parent: System.Security.AccessControl.CommonSecurityDescriptor\n  isExternal: false\n  name: AddDiscretionaryAcl\n  nameWithType: CommonSecurityDescriptor.AddDiscretionaryAcl\n  fullName: CommonSecurityDescriptor.AddDiscretionaryAcl\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.AccessControl/CommonSecurityDescriptor.xml\n- uid: System.Security.AccessControl.CommonSecurityDescriptor.AddSystemAcl*\n  parent: System.Security.AccessControl.CommonSecurityDescriptor\n  isExternal: false\n  name: AddSystemAcl\n  nameWithType: CommonSecurityDescriptor.AddSystemAcl\n  fullName: CommonSecurityDescriptor.AddSystemAcl\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.AccessControl/CommonSecurityDescriptor.xml\n- uid: System.Security.AccessControl.CommonSecurityDescriptor.ControlFlags*\n  parent: System.Security.AccessControl.CommonSecurityDescriptor\n  isExternal: false\n  name: ControlFlags\n  nameWithType: CommonSecurityDescriptor.ControlFlags\n  fullName: CommonSecurityDescriptor.ControlFlags\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.AccessControl/CommonSecurityDescriptor.xml\n- uid: System.Security.AccessControl.CommonSecurityDescriptor.DiscretionaryAcl*\n  parent: System.Security.AccessControl.CommonSecurityDescriptor\n  isExternal: false\n  name: DiscretionaryAcl\n  nameWithType: CommonSecurityDescriptor.DiscretionaryAcl\n  fullName: CommonSecurityDescriptor.DiscretionaryAcl\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.AccessControl/CommonSecurityDescriptor.xml\n- uid: System.Security.AccessControl.CommonSecurityDescriptor.Group*\n  parent: System.Security.AccessControl.CommonSecurityDescriptor\n  isExternal: false\n  name: Group\n  nameWithType: CommonSecurityDescriptor.Group\n  fullName: CommonSecurityDescriptor.Group\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.AccessControl/CommonSecurityDescriptor.xml\n- uid: System.Security.AccessControl.CommonSecurityDescriptor.IsContainer*\n  parent: System.Security.AccessControl.CommonSecurityDescriptor\n  isExternal: false\n  name: IsContainer\n  nameWithType: CommonSecurityDescriptor.IsContainer\n  fullName: CommonSecurityDescriptor.IsContainer\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.AccessControl/CommonSecurityDescriptor.xml\n- uid: System.Security.AccessControl.CommonSecurityDescriptor.IsDiscretionaryAclCanonical*\n  parent: System.Security.AccessControl.CommonSecurityDescriptor\n  isExternal: false\n  name: IsDiscretionaryAclCanonical\n  nameWithType: CommonSecurityDescriptor.IsDiscretionaryAclCanonical\n  fullName: CommonSecurityDescriptor.IsDiscretionaryAclCanonical\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.AccessControl/CommonSecurityDescriptor.xml\n- uid: System.Security.AccessControl.CommonSecurityDescriptor.IsDS*\n  parent: System.Security.AccessControl.CommonSecurityDescriptor\n  isExternal: false\n  name: IsDS\n  nameWithType: CommonSecurityDescriptor.IsDS\n  fullName: CommonSecurityDescriptor.IsDS\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.AccessControl/CommonSecurityDescriptor.xml\n- uid: System.Security.AccessControl.CommonSecurityDescriptor.IsSystemAclCanonical*\n  parent: System.Security.AccessControl.CommonSecurityDescriptor\n  isExternal: false\n  name: IsSystemAclCanonical\n  nameWithType: CommonSecurityDescriptor.IsSystemAclCanonical\n  fullName: CommonSecurityDescriptor.IsSystemAclCanonical\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.AccessControl/CommonSecurityDescriptor.xml\n- uid: System.Security.AccessControl.CommonSecurityDescriptor.Owner*\n  parent: System.Security.AccessControl.CommonSecurityDescriptor\n  isExternal: false\n  name: Owner\n  nameWithType: CommonSecurityDescriptor.Owner\n  fullName: CommonSecurityDescriptor.Owner\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.AccessControl/CommonSecurityDescriptor.xml\n- uid: System.Security.AccessControl.CommonSecurityDescriptor.PurgeAccessControl*\n  parent: System.Security.AccessControl.CommonSecurityDescriptor\n  isExternal: false\n  name: PurgeAccessControl\n  nameWithType: CommonSecurityDescriptor.PurgeAccessControl\n  fullName: CommonSecurityDescriptor.PurgeAccessControl\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.AccessControl/CommonSecurityDescriptor.xml\n- uid: System.Security.AccessControl.CommonSecurityDescriptor.PurgeAudit*\n  parent: System.Security.AccessControl.CommonSecurityDescriptor\n  isExternal: false\n  name: PurgeAudit\n  nameWithType: CommonSecurityDescriptor.PurgeAudit\n  fullName: CommonSecurityDescriptor.PurgeAudit\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.AccessControl/CommonSecurityDescriptor.xml\n- uid: System.Security.AccessControl.CommonSecurityDescriptor.SetDiscretionaryAclProtection*\n  parent: System.Security.AccessControl.CommonSecurityDescriptor\n  isExternal: false\n  name: SetDiscretionaryAclProtection\n  nameWithType: CommonSecurityDescriptor.SetDiscretionaryAclProtection\n  fullName: CommonSecurityDescriptor.SetDiscretionaryAclProtection\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.AccessControl/CommonSecurityDescriptor.xml\n- uid: System.Security.AccessControl.CommonSecurityDescriptor.SetSystemAclProtection*\n  parent: System.Security.AccessControl.CommonSecurityDescriptor\n  isExternal: false\n  name: SetSystemAclProtection\n  nameWithType: CommonSecurityDescriptor.SetSystemAclProtection\n  fullName: CommonSecurityDescriptor.SetSystemAclProtection\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.AccessControl/CommonSecurityDescriptor.xml\n- uid: System.Security.AccessControl.CommonSecurityDescriptor.SystemAcl*\n  parent: System.Security.AccessControl.CommonSecurityDescriptor\n  isExternal: false\n  name: SystemAcl\n  nameWithType: CommonSecurityDescriptor.SystemAcl\n  fullName: CommonSecurityDescriptor.SystemAcl\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.AccessControl/CommonSecurityDescriptor.xml\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: Object.Equals(Object)\n  fullName: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: Object.GetHashCode()\n  fullName: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: false\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: false\n  name: ToString()\n  nameWithType: Object.ToString()\n  fullName: Object.ToString()\n- uid: System.Security.AccessControl.GenericSecurityDescriptor.BinaryLength\n  parent: System.Security.AccessControl.GenericSecurityDescriptor\n  isExternal: false\n  name: BinaryLength\n  nameWithType: GenericSecurityDescriptor.BinaryLength\n  fullName: GenericSecurityDescriptor.BinaryLength\n- uid: System.Security.AccessControl.GenericSecurityDescriptor.GetBinaryForm(System.Byte[],System.Int32)\n  parent: System.Security.AccessControl.GenericSecurityDescriptor\n  isExternal: false\n  name: GetBinaryForm(Byte[], Int32)\n  nameWithType: GenericSecurityDescriptor.GetBinaryForm(Byte[], Int32)\n  fullName: GenericSecurityDescriptor.GetBinaryForm(Byte[], Int32)\n- uid: System.Security.AccessControl.GenericSecurityDescriptor.GetSddlForm(System.Security.AccessControl.AccessControlSections)\n  parent: System.Security.AccessControl.GenericSecurityDescriptor\n  isExternal: false\n  name: GetSddlForm(AccessControlSections)\n  nameWithType: GenericSecurityDescriptor.GetSddlForm(AccessControlSections)\n  fullName: GenericSecurityDescriptor.GetSddlForm(AccessControlSections)\n- uid: System.Security.AccessControl.GenericSecurityDescriptor.IsSddlConversionSupported\n  parent: System.Security.AccessControl.GenericSecurityDescriptor\n  isExternal: false\n  name: IsSddlConversionSupported()\n  nameWithType: GenericSecurityDescriptor.IsSddlConversionSupported()\n  fullName: GenericSecurityDescriptor.IsSddlConversionSupported()\n- uid: System.Security.AccessControl.GenericSecurityDescriptor.Revision\n  parent: System.Security.AccessControl.GenericSecurityDescriptor\n  isExternal: false\n  name: Revision\n  nameWithType: GenericSecurityDescriptor.Revision\n  fullName: GenericSecurityDescriptor.Revision\n"}