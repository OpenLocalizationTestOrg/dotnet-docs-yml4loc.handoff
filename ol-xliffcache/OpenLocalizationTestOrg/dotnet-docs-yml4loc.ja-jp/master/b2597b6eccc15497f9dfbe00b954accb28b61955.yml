### YamlMime:ManagedReference
items:
- uid: System.IO.MemoryStream
  commentId: T:System.IO.MemoryStream
  id: MemoryStream
  children:
  - System.IO.MemoryStream.#ctor
  - System.IO.MemoryStream.#ctor(System.Byte[])
  - System.IO.MemoryStream.#ctor(System.Int32)
  - System.IO.MemoryStream.#ctor(System.Byte[],System.Boolean)
  - System.IO.MemoryStream.#ctor(System.Byte[],System.Int32,System.Int32)
  - System.IO.MemoryStream.#ctor(System.Byte[],System.Int32,System.Int32,System.Boolean)
  - System.IO.MemoryStream.#ctor(System.Byte[],System.Int32,System.Int32,System.Boolean,System.Boolean)
  - System.IO.MemoryStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)
  - System.IO.MemoryStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)
  - System.IO.MemoryStream.CanRead
  - System.IO.MemoryStream.CanSeek
  - System.IO.MemoryStream.CanWrite
  - System.IO.MemoryStream.Capacity
  - System.IO.MemoryStream.CopyTo(System.IO.Stream,System.Int32)
  - System.IO.MemoryStream.CopyToAsync(System.IO.Stream,System.Int32,System.Threading.CancellationToken)
  - System.IO.MemoryStream.Dispose(System.Boolean)
  - System.IO.MemoryStream.EndRead(System.IAsyncResult)
  - System.IO.MemoryStream.EndWrite(System.IAsyncResult)
  - System.IO.MemoryStream.Flush
  - System.IO.MemoryStream.FlushAsync(System.Threading.CancellationToken)
  - System.IO.MemoryStream.GetBuffer
  - System.IO.MemoryStream.Length
  - System.IO.MemoryStream.Position
  - System.IO.MemoryStream.Read(System.Byte[],System.Int32,System.Int32)
  - System.IO.MemoryStream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)
  - System.IO.MemoryStream.ReadByte
  - System.IO.MemoryStream.Seek(System.Int64,System.IO.SeekOrigin)
  - System.IO.MemoryStream.SetLength(System.Int64)
  - System.IO.MemoryStream.ToArray
  - System.IO.MemoryStream.TryGetBuffer(System.ArraySegment{System.Byte}@)
  - System.IO.MemoryStream.Write(System.Byte[],System.Int32,System.Int32)
  - System.IO.MemoryStream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)
  - System.IO.MemoryStream.WriteByte(System.Byte)
  - System.IO.MemoryStream.WriteTo(System.IO.Stream)
  langs:
  - csharp
  name: MemoryStream
  nameWithType: MemoryStream
  fullName: System.IO.MemoryStream
  type: Class
  assemblies:
  - System.IO
  - mscorlib
  - netstandard
  - System.Runtime.Extensions
  namespace: System.IO
  summary: Creates a stream whose backing store is memory.
  remarks: "> [!NOTE]\n>  To view the .NET Framework source code for this type, see the [Reference Source](http://referencesource.microsoft.com/#mscorlib/system/io/memorystream.cs#1a4dcb744a23ba6f). You can browse through the source code online, download the reference for offline viewing, and step through the sources (including patches and updates) during debugging; see [instructions](http://referencesource.microsoft.com/).  \n  \n The current position of a stream is the position at which the next read or write operation could take place. The current position can be retrieved or set through the <xref:System.IO.MemoryStream.Seek%2A> method. When a new instance of <xref:System.IO.MemoryStream> is created, the current position is set to zero.  \n  \n> [!IMPORTANT]\n>  This type implements the <xref:System.IDisposable> interface. When you have finished using the type, you should dispose of it either directly or indirectly. To dispose of the type directly, call its <xref:System.IDisposable.Dispose%2A> method in a `try`/`catch` block. To dispose of it indirectly, use a language construct such as `using` (in C#) or `Using` (in Visual Basic). For more information, see the \"Using an Object that Implements IDisposable\" section in the <xref:System.IDisposable> interface topic.  \n  \n Memory streams created with an unsigned byte array provide a non-resizable stream of the data. When using a byte array, you can neither append to nor shrink the stream, although you might be able to modify the existing contents depending on the parameters passed into the constructor. Empty memory streams are resizable, and can be written to and read from.  \n  \n If a <xref:System.IO.MemoryStream> object is added to a ResX file or a .resources file, call the <xref:System.Resources.ResourceManager.GetStream%2A> method at runtime to retrieve it.  \n  \n If a <xref:System.IO.MemoryStream> object is serialized to a resource file it will actually be serialized as an <xref:System.IO.UnmanagedMemoryStream>. This behavior provides better performance, as well as the ability to get a pointer to the data directly, without having to go through <xref:System.IO.Stream> methods."
  example:
  - "The following code example shows how to read and write data using memory as a backing store.  \n  \n [!code-cpp[System.IO.MemoryStream#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IO.MemoryStream/CPP/memstream.cpp#1)]\n [!code-csharp[System.IO.MemoryStream#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.MemoryStream/CS/memstream.cs#1)]\n [!code-vb[System.IO.MemoryStream#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.MemoryStream/VB/memstream.vb#1)]"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public class MemoryStream : System.IO.Stream
  inheritance:
  - System.Object
  - System.IO.Stream
  implements: []
  inheritedMembers:
  - System.IO.Stream.CanTimeout
  - System.IO.Stream.Close
  - System.IO.Stream.CopyTo(System.IO.Stream)
  - System.IO.Stream.CopyToAsync(System.IO.Stream)
  - System.IO.Stream.CopyToAsync(System.IO.Stream,System.Int32)
  - System.IO.Stream.CreateWaitHandle
  - System.IO.Stream.Dispose
  - System.IO.Stream.FlushAsync
  - System.IO.Stream.Null
  - System.IO.Stream.ObjectInvariant
  - System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32)
  - System.IO.Stream.ReadTimeout
  - System.IO.Stream.Synchronized(System.IO.Stream)
  - System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32)
  - System.IO.Stream.WriteTimeout
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  attributes:
  - type: System.Runtime.InteropServices.ComVisibleAttribute
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/MemoryStream.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.IO.MemoryStream.#ctor
  commentId: M:System.IO.MemoryStream.#ctor
  id: '#ctor'
  parent: System.IO.MemoryStream
  langs:
  - csharp
  name: MemoryStream()
  nameWithType: MemoryStream.MemoryStream()
  fullName: MemoryStream.MemoryStream()
  type: Constructor
  assemblies:
  - System.IO
  - mscorlib
  - netstandard
  - System.Runtime.Extensions
  namespace: System.IO
  summary: Initializes a new instance of the <xref href="System.IO.MemoryStream"></xref> class with an expandable capacity initialized to zero.
  remarks: "The <xref:System.IO.MemoryStream.CanRead%2A>, <xref:System.IO.MemoryStream.CanSeek%2A>, and <xref:System.IO.MemoryStream.CanWrite%2A> properties are all set to `true`.  \n  \n The capacity of the current stream automatically increases when you use the <xref:System.IO.MemoryStream.SetLength%2A> method to set the length to a value larger than the capacity of the current stream.  \n  \n This constructor exposes the underlying stream, which <xref:System.IO.MemoryStream.GetBuffer%2A> returns."
  syntax:
    content: public MemoryStream ();
    parameters: []
  overload: System.IO.MemoryStream.#ctor*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/MemoryStream.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.IO.MemoryStream.#ctor(System.Byte[])
  commentId: M:System.IO.MemoryStream.#ctor(System.Byte[])
  id: '#ctor(System.Byte[])'
  parent: System.IO.MemoryStream
  langs:
  - csharp
  name: MemoryStream(Byte[])
  nameWithType: MemoryStream.MemoryStream(Byte[])
  fullName: MemoryStream.MemoryStream(Byte[])
  type: Constructor
  assemblies:
  - System.IO
  - mscorlib
  - netstandard
  - System.Runtime.Extensions
  namespace: System.IO
  summary: Initializes a new non-resizable instance of the <xref href="System.IO.MemoryStream"></xref> class based on the specified byte array.
  remarks: "The <xref:System.IO.MemoryStream.CanRead%2A>, <xref:System.IO.MemoryStream.CanSeek%2A>, and <xref:System.IO.MemoryStream.CanWrite%2A> properties are all set to `true`. <xref:System.IO.MemoryStream.Capacity%2A> is set to the length of the specified byte array. The new stream can be written to, but is not resizable.  \n  \n The length of the stream cannot be set to a value greater than the initial length of the specified byte array; however, the stream can be truncated (see <xref:System.IO.MemoryStream.SetLength%2A>).  \n  \n This constructor does not expose the underlying stream. <xref:System.IO.MemoryStream.GetBuffer%2A> throws <xref:System.UnauthorizedAccessException>."
  syntax:
    content: public MemoryStream (byte[] buffer);
    parameters:
    - id: buffer
      type: System.Byte[]
      description: The array of unsigned bytes from which to create the current stream.
  overload: System.IO.MemoryStream.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>buffer</code> is `null`.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/MemoryStream.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.IO.MemoryStream.#ctor(System.Int32)
  commentId: M:System.IO.MemoryStream.#ctor(System.Int32)
  id: '#ctor(System.Int32)'
  parent: System.IO.MemoryStream
  langs:
  - csharp
  name: MemoryStream(Int32)
  nameWithType: MemoryStream.MemoryStream(Int32)
  fullName: MemoryStream.MemoryStream(Int32)
  type: Constructor
  assemblies:
  - System.IO
  - mscorlib
  - netstandard
  - System.Runtime.Extensions
  namespace: System.IO
  summary: Initializes a new instance of the <xref href="System.IO.MemoryStream"></xref> class with an expandable capacity initialized as specified.
  remarks: "The <xref:System.IO.MemoryStream.CanRead%2A>, <xref:System.IO.MemoryStream.CanSeek%2A>, and <xref:System.IO.MemoryStream.CanWrite%2A> properties are all set to `true`.  \n  \n The capacity automatically increases when you use the <xref:System.IO.MemoryStream.SetLength%2A> method to set the length to a value larger than the capacity of the current stream. Except for a `MemoryStream` constructed with a byte[] parameter, write operations at the end of a `MemoryStream` expand the `MemoryStream`.  \n  \n This constructor exposes the underlying stream that <xref:System.IO.MemoryStream.GetBuffer%2A> returns."
  example:
  - "This code example is part of a larger example provided for the <xref:System.IO.MemoryStream> class.  \n  \n [!code-cpp[System.IO.MemoryStream#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IO.MemoryStream/CPP/memstream.cpp#2)]\n [!code-csharp[System.IO.MemoryStream#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.MemoryStream/CS/memstream.cs#2)]\n [!code-vb[System.IO.MemoryStream#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.MemoryStream/VB/memstream.vb#2)]"
  syntax:
    content: public MemoryStream (int capacity);
    parameters:
    - id: capacity
      type: System.Int32
      description: The initial size of the internal array in bytes.
  overload: System.IO.MemoryStream.#ctor*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: <code>capacity</code> is negative.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/MemoryStream.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.IO.MemoryStream.#ctor(System.Byte[],System.Boolean)
  commentId: M:System.IO.MemoryStream.#ctor(System.Byte[],System.Boolean)
  id: '#ctor(System.Byte[],System.Boolean)'
  parent: System.IO.MemoryStream
  langs:
  - csharp
  name: MemoryStream(Byte[], Boolean)
  nameWithType: MemoryStream.MemoryStream(Byte[], Boolean)
  fullName: MemoryStream.MemoryStream(Byte[], Boolean)
  type: Constructor
  assemblies:
  - System.IO
  - mscorlib
  - netstandard
  - System.Runtime.Extensions
  namespace: System.IO
  summary: Initializes a new non-resizable instance of the <xref href="System.IO.MemoryStream"></xref> class based on the specified byte array with the <xref href="System.IO.MemoryStream.CanWrite"></xref> property set as specified.
  remarks: "The <xref:System.IO.MemoryStream.CanRead%2A> and <xref:System.IO.MemoryStream.CanSeek%2A> properties are both set to `true`. <xref:System.IO.MemoryStream.Capacity%2A> is set to the length of the specified byte array.  \n  \n The length of the stream cannot be set to a value greater than the initial length of the specified byte array; however, the stream can be truncated (see <xref:System.IO.MemoryStream.SetLength%2A>).  \n  \n This constructor does not expose the underlying stream. <xref:System.IO.MemoryStream.GetBuffer%2A> throws <xref:System.UnauthorizedAccessException>."
  syntax:
    content: public MemoryStream (byte[] buffer, bool writable);
    parameters:
    - id: buffer
      type: System.Byte[]
      description: The array of unsigned bytes from which to create this stream.
    - id: writable
      type: System.Boolean
      description: The setting of the <xref href="System.IO.MemoryStream.CanWrite"></xref> property, which determines whether the stream supports writing.
  overload: System.IO.MemoryStream.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>buffer</code> is `null`.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/MemoryStream.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.IO.MemoryStream.#ctor(System.Byte[],System.Int32,System.Int32)
  commentId: M:System.IO.MemoryStream.#ctor(System.Byte[],System.Int32,System.Int32)
  id: '#ctor(System.Byte[],System.Int32,System.Int32)'
  parent: System.IO.MemoryStream
  langs:
  - csharp
  name: MemoryStream(Byte[], Int32, Int32)
  nameWithType: MemoryStream.MemoryStream(Byte[], Int32, Int32)
  fullName: MemoryStream.MemoryStream(Byte[], Int32, Int32)
  type: Constructor
  assemblies:
  - System.IO
  - mscorlib
  - netstandard
  - System.Runtime.Extensions
  namespace: System.IO
  summary: Initializes a new non-resizable instance of the <xref href="System.IO.MemoryStream"></xref> class based on the specified region (index) of a byte array.
  remarks: "The <xref:System.IO.MemoryStream.CanRead%2A>, <xref:System.IO.MemoryStream.CanSeek%2A>, and <xref:System.IO.MemoryStream.CanWrite%2A> properties are all set to `true`, but the capacity cannot be changed. <xref:System.IO.MemoryStream.Capacity%2A> is set to `count`.  \n  \n The length of the stream cannot be set to a value greater than the initial length of the specified byte array; however, the stream can be truncated (see <xref:System.IO.MemoryStream.SetLength%2A>).  \n  \n This constructor does not expose the underlying stream. <xref:System.IO.MemoryStream.GetBuffer%2A> throws <xref:System.UnauthorizedAccessException>. However, you can write to the stream."
  syntax:
    content: public MemoryStream (byte[] buffer, int index, int count);
    parameters:
    - id: buffer
      type: System.Byte[]
      description: The array of unsigned bytes from which to create this stream.
    - id: index
      type: System.Int32
      description: The index into <code>buffer</code> at which the stream begins.
    - id: count
      type: System.Int32
      description: The length of the stream in bytes.
  overload: System.IO.MemoryStream.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>buffer</code> is `null`.
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: <code>index</code> or <code>count</code> is less than zero.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: The buffer length minus <code>index</code> is less than <code>count</code>.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/MemoryStream.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.IO.MemoryStream.#ctor(System.Byte[],System.Int32,System.Int32,System.Boolean)
  commentId: M:System.IO.MemoryStream.#ctor(System.Byte[],System.Int32,System.Int32,System.Boolean)
  id: '#ctor(System.Byte[],System.Int32,System.Int32,System.Boolean)'
  parent: System.IO.MemoryStream
  langs:
  - csharp
  name: MemoryStream(Byte[], Int32, Int32, Boolean)
  nameWithType: MemoryStream.MemoryStream(Byte[], Int32, Int32, Boolean)
  fullName: MemoryStream.MemoryStream(Byte[], Int32, Int32, Boolean)
  type: Constructor
  assemblies:
  - System.IO
  - mscorlib
  - netstandard
  - System.Runtime.Extensions
  namespace: System.IO
  summary: Initializes a new non-resizable instance of the <xref href="System.IO.MemoryStream"></xref> class based on the specified region of a byte array, with the <xref href="System.IO.MemoryStream.CanWrite"></xref> property set as specified.
  remarks: "The <xref:System.IO.MemoryStream.CanRead%2A> and <xref:System.IO.MemoryStream.CanSeek%2A> properties are both set to `true`. <xref:System.IO.MemoryStream.Capacity%2A> is set to `count`.  \n  \n The length of the stream cannot be set to a value greater than the initial length of the specified byte array; however, the stream can be truncated (see <xref:System.IO.MemoryStream.SetLength%2A>).  \n  \n This constructor does not expose the underlying stream. <xref:System.IO.MemoryStream.GetBuffer%2A> throws <xref:System.UnauthorizedAccessException>. However, you can write to the stream if `writable` is `true`."
  syntax:
    content: public MemoryStream (byte[] buffer, int index, int count, bool writable);
    parameters:
    - id: buffer
      type: System.Byte[]
      description: The array of unsigned bytes from which to create this stream.
    - id: index
      type: System.Int32
      description: The index in <code>buffer</code> at which the stream begins.
    - id: count
      type: System.Int32
      description: The length of the stream in bytes.
    - id: writable
      type: System.Boolean
      description: The setting of the <xref href="System.IO.MemoryStream.CanWrite"></xref> property, which determines whether the stream supports writing.
  overload: System.IO.MemoryStream.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>buffer</code> is `null`.
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: <code>index</code> or <code>count</code> are negative.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: The buffer length minus <code>index</code> is less than <code>count</code>.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/MemoryStream.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.IO.MemoryStream.#ctor(System.Byte[],System.Int32,System.Int32,System.Boolean,System.Boolean)
  commentId: M:System.IO.MemoryStream.#ctor(System.Byte[],System.Int32,System.Int32,System.Boolean,System.Boolean)
  id: '#ctor(System.Byte[],System.Int32,System.Int32,System.Boolean,System.Boolean)'
  parent: System.IO.MemoryStream
  langs:
  - csharp
  name: MemoryStream(Byte[], Int32, Int32, Boolean, Boolean)
  nameWithType: MemoryStream.MemoryStream(Byte[], Int32, Int32, Boolean, Boolean)
  fullName: MemoryStream.MemoryStream(Byte[], Int32, Int32, Boolean, Boolean)
  type: Constructor
  assemblies:
  - System.IO
  - mscorlib
  - netstandard
  - System.Runtime.Extensions
  namespace: System.IO
  summary: Initializes a new instance of the <xref href="System.IO.MemoryStream"></xref> class based on the specified region of a byte array, with the <xref href="System.IO.MemoryStream.CanWrite"></xref> property set as specified, and the ability to call <xref href="System.IO.MemoryStream.GetBuffer"></xref> set as specified.
  remarks: "The <xref:System.IO.MemoryStream.CanRead%2A> and <xref:System.IO.MemoryStream.CanSeek%2A> properties are both set to `true`. <xref:System.IO.MemoryStream.Capacity%2A> is set to `count`.  \n  \n The new stream instance can be written to, but the <xref:System.IO.MemoryStream.Capacity%2A> of the underlying byte array cannot be changed. The length of the stream cannot be set to a value greater than the initial length of the specified byte array; however, the stream can be truncated (see <xref:System.IO.MemoryStream.SetLength%2A>)."
  syntax:
    content: public MemoryStream (byte[] buffer, int index, int count, bool writable, bool publiclyVisible);
    parameters:
    - id: buffer
      type: System.Byte[]
      description: The array of unsigned bytes from which to create this stream.
    - id: index
      type: System.Int32
      description: The index into <code>buffer</code> at which the stream begins.
    - id: count
      type: System.Int32
      description: The length of the stream in bytes.
    - id: writable
      type: System.Boolean
      description: The setting of the <xref href="System.IO.MemoryStream.CanWrite"></xref> property, which determines whether the stream supports writing.
    - id: publiclyVisible
      type: System.Boolean
      description: '`true` to enable <xref href="System.IO.MemoryStream.GetBuffer"></xref>, which returns the unsigned byte array from which the stream was created; otherwise, `false`.'
  overload: System.IO.MemoryStream.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>buffer</code> is `null`.
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: <code>index</code> or <code>count</code> is negative.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: The buffer length minus <code>index</code> is less than <code>count</code>.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/MemoryStream.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.IO.MemoryStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)
  commentId: M:System.IO.MemoryStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)
  id: BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)
  parent: System.IO.MemoryStream
  langs:
  - csharp
  name: BeginRead(Byte[], Int32, Int32, AsyncCallback, Object)
  nameWithType: MemoryStream.BeginRead(Byte[], Int32, Int32, AsyncCallback, Object)
  fullName: MemoryStream.BeginRead(Byte[], Int32, Int32, AsyncCallback, Object)
  type: Method
  assemblies:
  - System.Runtime.Extensions
  namespace: System.IO
  syntax:
    content: public override IAsyncResult BeginRead (byte[] buffer, int offset, int count, AsyncCallback callback, object state);
    parameters:
    - id: buffer
      type: System.Byte[]
      description: ''
    - id: offset
      type: System.Int32
      description: ''
    - id: count
      type: System.Int32
      description: ''
    - id: callback
      type: System.AsyncCallback
      description: ''
    - id: state
      type: System.Object
      description: ''
    return:
      type: System.IAsyncResult
      description: ''
  overload: System.IO.MemoryStream.BeginRead*
  exceptions: []
  version:
  - netcore-2.0
  monikers:
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/MemoryStream.xml
- uid: System.IO.MemoryStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)
  commentId: M:System.IO.MemoryStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)
  id: BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)
  parent: System.IO.MemoryStream
  langs:
  - csharp
  name: BeginWrite(Byte[], Int32, Int32, AsyncCallback, Object)
  nameWithType: MemoryStream.BeginWrite(Byte[], Int32, Int32, AsyncCallback, Object)
  fullName: MemoryStream.BeginWrite(Byte[], Int32, Int32, AsyncCallback, Object)
  type: Method
  assemblies:
  - System.Runtime.Extensions
  namespace: System.IO
  syntax:
    content: public override IAsyncResult BeginWrite (byte[] buffer, int offset, int count, AsyncCallback callback, object state);
    parameters:
    - id: buffer
      type: System.Byte[]
      description: ''
    - id: offset
      type: System.Int32
      description: ''
    - id: count
      type: System.Int32
      description: ''
    - id: callback
      type: System.AsyncCallback
      description: ''
    - id: state
      type: System.Object
      description: ''
    return:
      type: System.IAsyncResult
      description: ''
  overload: System.IO.MemoryStream.BeginWrite*
  exceptions: []
  version:
  - netcore-2.0
  monikers:
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/MemoryStream.xml
- uid: System.IO.MemoryStream.CanRead
  commentId: P:System.IO.MemoryStream.CanRead
  id: CanRead
  parent: System.IO.MemoryStream
  langs:
  - csharp
  name: CanRead
  nameWithType: MemoryStream.CanRead
  fullName: MemoryStream.CanRead
  type: Property
  assemblies:
  - System.IO
  - mscorlib
  - netstandard
  - System.Runtime.Extensions
  namespace: System.IO
  summary: Gets a value indicating whether the current stream supports reading.
  remarks: "If a class derived from <xref:System.IO.Stream> does not support reading, calls to the <xref:System.IO.MemoryStream.Read%2A> and <xref:System.IO.MemoryStream.ReadByte%2A> methods throw a <xref:System.NotSupportedException>.  \n  \n If the stream is closed, this property returns `false`."
  syntax:
    content: public override bool CanRead { get; }
    return:
      type: System.Boolean
      description: '`true` if the stream is open.'
  overload: System.IO.MemoryStream.CanRead*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/MemoryStream.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.IO.MemoryStream.CanSeek
  commentId: P:System.IO.MemoryStream.CanSeek
  id: CanSeek
  parent: System.IO.MemoryStream
  langs:
  - csharp
  name: CanSeek
  nameWithType: MemoryStream.CanSeek
  fullName: MemoryStream.CanSeek
  type: Property
  assemblies:
  - System.IO
  - mscorlib
  - netstandard
  - System.Runtime.Extensions
  namespace: System.IO
  summary: Gets a value indicating whether the current stream supports seeking.
  remarks: "If a class derived from <xref:System.IO.Stream> does not support seeking, calls to <xref:System.IO.MemoryStream.Length%2A>, <xref:System.IO.MemoryStream.SetLength%2A>, <xref:System.IO.MemoryStream.Position%2A>, and <xref:System.IO.MemoryStream.Seek%2A> throw a <xref:System.NotSupportedException>.  \n  \n If the stream is closed, this property returns `false`."
  syntax:
    content: public override bool CanSeek { get; }
    return:
      type: System.Boolean
      description: '`true` if the stream is open.'
  overload: System.IO.MemoryStream.CanSeek*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/MemoryStream.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.IO.MemoryStream.CanWrite
  commentId: P:System.IO.MemoryStream.CanWrite
  id: CanWrite
  parent: System.IO.MemoryStream
  langs:
  - csharp
  name: CanWrite
  nameWithType: MemoryStream.CanWrite
  fullName: MemoryStream.CanWrite
  type: Property
  assemblies:
  - System.IO
  - mscorlib
  - netstandard
  - System.Runtime.Extensions
  namespace: System.IO
  summary: Gets a value indicating whether the current stream supports writing.
  remarks: "If a class derived from <xref:System.IO.Stream> does not support writing, a call to <xref:System.IO.Stream.SetLength%2A>, <xref:System.IO.Stream.Write%2A>, or <xref:System.IO.Stream.WriteByte%2A> throws a <xref:System.NotSupportedException>.  \n  \n If the stream is closed, this property returns `false`."
  syntax:
    content: public override bool CanWrite { get; }
    return:
      type: System.Boolean
      description: '`true` if the stream supports writing; otherwise, `false`.'
  overload: System.IO.MemoryStream.CanWrite*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/MemoryStream.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.IO.MemoryStream.Capacity
  commentId: P:System.IO.MemoryStream.Capacity
  id: Capacity
  parent: System.IO.MemoryStream
  langs:
  - csharp
  name: Capacity
  nameWithType: MemoryStream.Capacity
  fullName: MemoryStream.Capacity
  type: Property
  assemblies:
  - System.IO
  - mscorlib
  - netstandard
  - System.Runtime.Extensions
  namespace: System.IO
  summary: Gets or sets the number of bytes allocated for this stream.
  remarks: '`Capacity` is the buffer length for system-provided byte arrays. `Capacity` cannot be set to a value less than the current length of the stream.'
  example:
  - "This code example is part of a larger example provided for the <xref:System.IO.MemoryStream> class.  \n  \n [!code-cpp[System.IO.MemoryStream#5](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IO.MemoryStream/CPP/memstream.cpp#5)]\n [!code-csharp[System.IO.MemoryStream#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.MemoryStream/CS/memstream.cs#5)]\n [!code-vb[System.IO.MemoryStream#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.MemoryStream/VB/memstream.vb#5)]"
  syntax:
    content: public virtual int Capacity { get; set; }
    return:
      type: System.Int32
      description: The length of the usable portion of the buffer for the stream.
  overload: System.IO.MemoryStream.Capacity*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: A capacity is set that is negative or less than the current length of the stream.
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: The current stream is closed.
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: '`set` is invoked on a stream whose capacity cannot be modified.'
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/MemoryStream.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.IO.MemoryStream.CopyTo(System.IO.Stream,System.Int32)
  commentId: M:System.IO.MemoryStream.CopyTo(System.IO.Stream,System.Int32)
  id: CopyTo(System.IO.Stream,System.Int32)
  parent: System.IO.MemoryStream
  langs:
  - csharp
  name: CopyTo(Stream, Int32)
  nameWithType: MemoryStream.CopyTo(Stream, Int32)
  fullName: MemoryStream.CopyTo(Stream, Int32)
  type: Method
  assemblies:
  - System.Runtime.Extensions
  namespace: System.IO
  syntax:
    content: public override void CopyTo (System.IO.Stream destination, int bufferSize);
    parameters:
    - id: destination
      type: System.IO.Stream
      description: ''
    - id: bufferSize
      type: System.Int32
      description: ''
  overload: System.IO.MemoryStream.CopyTo*
  exceptions: []
  version:
  - netcore-2.0
  monikers:
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/MemoryStream.xml
- uid: System.IO.MemoryStream.CopyToAsync(System.IO.Stream,System.Int32,System.Threading.CancellationToken)
  commentId: M:System.IO.MemoryStream.CopyToAsync(System.IO.Stream,System.Int32,System.Threading.CancellationToken)
  id: CopyToAsync(System.IO.Stream,System.Int32,System.Threading.CancellationToken)
  parent: System.IO.MemoryStream
  langs:
  - csharp
  name: CopyToAsync(Stream, Int32, CancellationToken)
  nameWithType: MemoryStream.CopyToAsync(Stream, Int32, CancellationToken)
  fullName: MemoryStream.CopyToAsync(Stream, Int32, CancellationToken)
  type: Method
  assemblies:
  - System.IO
  - mscorlib
  - netstandard
  - System.Runtime.Extensions
  namespace: System.IO
  summary: Asynchronously reads all the bytes from the current stream and writes them to another stream, using a specified buffer size and cancellation token.
  syntax:
    content: public override System.Threading.Tasks.Task CopyToAsync (System.IO.Stream destination, int bufferSize, System.Threading.CancellationToken cancellationToken);
    parameters:
    - id: destination
      type: System.IO.Stream
      description: The stream to which the contents of the current stream will be copied.
    - id: bufferSize
      type: System.Int32
      description: The size, in bytes, of the buffer. This value must be greater than zero.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The token to monitor for cancellation requests.
    return:
      type: System.Threading.Tasks.Task
      description: A task that represents the asynchronous copy operation.
  overload: System.IO.MemoryStream.CopyToAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>destination</code> is `null`.
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: <code>buffersize</code> is negative or zero.
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: Either the current stream or the destination stream is disposed.
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: The current stream does not support reading, or the destination stream does not support writing.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/MemoryStream.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.IO.MemoryStream.Dispose(System.Boolean)
  commentId: M:System.IO.MemoryStream.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.IO.MemoryStream
  langs:
  - csharp
  name: Dispose(Boolean)
  nameWithType: MemoryStream.Dispose(Boolean)
  fullName: MemoryStream.Dispose(Boolean)
  type: Method
  assemblies:
  - System.IO
  - mscorlib
  - netstandard
  - System.Runtime.Extensions
  namespace: System.IO
  summary: Releases the unmanaged resources used by the <xref href="System.IO.MemoryStream"></xref> class and optionally releases the managed resources.
  remarks: "This method is called by the public <xref:System.ComponentModel.Component.Dispose%2A> method and the <xref:System.Object.Finalize%2A> method. <xref:System.ComponentModel.Component.Dispose%2A> invokes the protected <xref:System.IO.MemoryStream.Dispose%2A> method with the `disposing` parameter set to `true`. <xref:System.Object.Finalize%2A> invokes <xref:System.IO.MemoryStream.Dispose%2A> with `disposing` set to `false`.  \n  \n When the `disposing` parameter is `true`, this method releases all resources held by any managed objects that this <xref:System.IO.MemoryStream> references. This method invokes the <xref:System.ComponentModel.Component.Dispose%2A> method of each referenced object."
  syntax:
    content: protected override void Dispose (bool disposing);
    parameters:
    - id: disposing
      type: System.Boolean
      description: '`true` to release both managed and unmanaged resources; `false` to release only unmanaged resources.'
  overload: System.IO.MemoryStream.Dispose*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/MemoryStream.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.IO.MemoryStream.EndRead(System.IAsyncResult)
  commentId: M:System.IO.MemoryStream.EndRead(System.IAsyncResult)
  id: EndRead(System.IAsyncResult)
  parent: System.IO.MemoryStream
  langs:
  - csharp
  name: EndRead(IAsyncResult)
  nameWithType: MemoryStream.EndRead(IAsyncResult)
  fullName: MemoryStream.EndRead(IAsyncResult)
  type: Method
  assemblies:
  - System.Runtime.Extensions
  namespace: System.IO
  syntax:
    content: public override int EndRead (IAsyncResult asyncResult);
    parameters:
    - id: asyncResult
      type: System.IAsyncResult
      description: ''
    return:
      type: System.Int32
      description: ''
  overload: System.IO.MemoryStream.EndRead*
  exceptions: []
  version:
  - netcore-2.0
  monikers:
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/MemoryStream.xml
- uid: System.IO.MemoryStream.EndWrite(System.IAsyncResult)
  commentId: M:System.IO.MemoryStream.EndWrite(System.IAsyncResult)
  id: EndWrite(System.IAsyncResult)
  parent: System.IO.MemoryStream
  langs:
  - csharp
  name: EndWrite(IAsyncResult)
  nameWithType: MemoryStream.EndWrite(IAsyncResult)
  fullName: MemoryStream.EndWrite(IAsyncResult)
  type: Method
  assemblies:
  - System.Runtime.Extensions
  namespace: System.IO
  syntax:
    content: public override void EndWrite (IAsyncResult asyncResult);
    parameters:
    - id: asyncResult
      type: System.IAsyncResult
      description: ''
  overload: System.IO.MemoryStream.EndWrite*
  exceptions: []
  version:
  - netcore-2.0
  monikers:
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/MemoryStream.xml
- uid: System.IO.MemoryStream.Flush
  commentId: M:System.IO.MemoryStream.Flush
  id: Flush
  parent: System.IO.MemoryStream
  langs:
  - csharp
  name: Flush()
  nameWithType: MemoryStream.Flush()
  fullName: MemoryStream.Flush()
  type: Method
  assemblies:
  - System.IO
  - mscorlib
  - netstandard
  - System.Runtime.Extensions
  namespace: System.IO
  summary: Overrides the <xref href="System.IO.Stream.Flush"></xref> method so that no action is performed.
  remarks: "This method overrides the <xref:System.IO.Stream.Flush%2A?displayProperty=fullName> method.  \n  \n Because any data written to a <xref:System.IO.MemoryStream> object is written into RAM, this method is redundant."
  syntax:
    content: public override void Flush ();
    parameters: []
  overload: System.IO.MemoryStream.Flush*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/MemoryStream.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.IO.MemoryStream.FlushAsync(System.Threading.CancellationToken)
  commentId: M:System.IO.MemoryStream.FlushAsync(System.Threading.CancellationToken)
  id: FlushAsync(System.Threading.CancellationToken)
  parent: System.IO.MemoryStream
  langs:
  - csharp
  name: FlushAsync(CancellationToken)
  nameWithType: MemoryStream.FlushAsync(CancellationToken)
  fullName: MemoryStream.FlushAsync(CancellationToken)
  type: Method
  assemblies:
  - System.IO
  - mscorlib
  - netstandard
  - System.Runtime.Extensions
  namespace: System.IO
  summary: Asynchronously clears all buffers for this stream, and monitors cancellation requests.
  remarks: "Because any data written to a <xref:System.IO.MemoryStream> object is written into RAM, this method is redundant.  \n  \n If the operation is canceled before it completes, the returned task contains the <xref:System.Threading.Tasks.TaskStatus.Canceled> value for the <xref:System.Threading.Tasks.Task.Status%2A> property.  \n  \n You can create a cancellation token by creating an instance of the <xref:System.Threading.CancellationTokenSource> class and passing the <xref:System.Threading.CancellationTokenSource.Token%2A> property as the `cancellationToken` parameter."
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(false)]

      public override System.Threading.Tasks.Task FlushAsync (System.Threading.CancellationToken cancellationToken);
    parameters:
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The token to monitor for cancellation requests.
    return:
      type: System.Threading.Tasks.Task
      description: A task that represents the asynchronous flush operation.
  overload: System.IO.MemoryStream.FlushAsync*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: The stream has been disposed.
  attributes:
  - type: System.Runtime.InteropServices.ComVisibleAttribute
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/MemoryStream.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.IO.MemoryStream.GetBuffer
  commentId: M:System.IO.MemoryStream.GetBuffer
  id: GetBuffer
  parent: System.IO.MemoryStream
  langs:
  - csharp
  name: GetBuffer()
  nameWithType: MemoryStream.GetBuffer()
  fullName: MemoryStream.GetBuffer()
  type: Method
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime.Extensions
  namespace: System.IO
  summary: Returns the array of unsigned bytes from which this stream was created.
  remarks: "Note that the buffer contains allocated bytes which might be unused. For example, if the string \"test\" is written into the <xref:System.IO.MemoryStream> object, the length of the buffer returned from <xref:System.IO.MemoryStream.GetBuffer%2A> is 256, not 4, with 252 bytes unused. To obtain only the data in the buffer, use the <xref:System.IO.MemoryStream.ToArray%2A> method; however, <xref:System.IO.MemoryStream.ToArray%2A> creates a copy of the data in memory.  \n  \n The buffer can also be `null`.  \n  \n To create a `MemoryStream` instance with a publicly visible buffer, use <xref:System.IO.MemoryStream.%23ctor%2A>, <xref:System.IO.MemoryStream.%23ctor%28System.Byte%5B%5D%2CSystem.Int32%2CSystem.Int32%2CSystem.Boolean%2CSystem.Boolean%29>, or <xref:System.IO.MemoryStream.%23ctor%28System.Int32%29>. If the current stream is resizable, two calls to this method do not return the same array if the underlying byte array is resized between calls. For additional information, see <xref:System.IO.MemoryStream.Capacity%2A>.  \n  \n> [!NOTE]\n>  This method works when the memory stream is closed."
  syntax:
    content: public virtual byte[] GetBuffer ();
    parameters: []
    return:
      type: System.Byte[]
      description: The byte array from which this stream was created, or the underlying array if a byte array was not provided to the <xref href="System.IO.MemoryStream"></xref> constructor during construction of the current instance.
  overload: System.IO.MemoryStream.GetBuffer*
  exceptions:
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: The `MemoryStream` instance was not created with a publicly visible buffer.
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/MemoryStream.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.IO.MemoryStream.Length
  commentId: P:System.IO.MemoryStream.Length
  id: Length
  parent: System.IO.MemoryStream
  langs:
  - csharp
  name: Length
  nameWithType: MemoryStream.Length
  fullName: MemoryStream.Length
  type: Property
  assemblies:
  - System.IO
  - mscorlib
  - netstandard
  - System.Runtime.Extensions
  namespace: System.IO
  summary: Gets the length of the stream in bytes.
  remarks: ''
  example:
  - "This code example is part of a larger example provided for the <xref:System.IO.MemoryStream> class.  \n  \n [!code-cpp[System.IO.MemoryStream#5](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IO.MemoryStream/CPP/memstream.cpp#5)]\n [!code-csharp[System.IO.MemoryStream#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.MemoryStream/CS/memstream.cs#5)]\n [!code-vb[System.IO.MemoryStream#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.MemoryStream/VB/memstream.vb#5)]"
  syntax:
    content: public override long Length { get; }
    return:
      type: System.Int64
      description: The length of the stream in bytes.
  overload: System.IO.MemoryStream.Length*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: The stream is closed.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/MemoryStream.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.IO.MemoryStream.Position
  commentId: P:System.IO.MemoryStream.Position
  id: Position
  parent: System.IO.MemoryStream
  langs:
  - csharp
  name: Position
  nameWithType: MemoryStream.Position
  fullName: MemoryStream.Position
  type: Property
  assemblies:
  - System.IO
  - mscorlib
  - netstandard
  - System.Runtime.Extensions
  namespace: System.IO
  summary: Gets or sets the current position within the stream.
  remarks: ''
  example:
  - "This code example is part of a larger example provided for the <xref:System.IO.MemoryStream> class.  \n  \n [!code-cpp[System.IO.MemoryStream#5](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IO.MemoryStream/CPP/memstream.cpp#5)]\n [!code-csharp[System.IO.MemoryStream#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.MemoryStream/CS/memstream.cs#5)]\n [!code-vb[System.IO.MemoryStream#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.MemoryStream/VB/memstream.vb#5)]"
  syntax:
    content: public override long Position { get; set; }
    return:
      type: System.Int64
      description: The current position within the stream.
  overload: System.IO.MemoryStream.Position*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: The position is set to a negative value or a value greater than <xref href="System.Int32.MaxValue"></xref>.
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: The stream is closed.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/MemoryStream.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.IO.MemoryStream.Read(System.Byte[],System.Int32,System.Int32)
  commentId: M:System.IO.MemoryStream.Read(System.Byte[],System.Int32,System.Int32)
  id: Read(System.Byte[],System.Int32,System.Int32)
  parent: System.IO.MemoryStream
  langs:
  - csharp
  name: Read(Byte[], Int32, Int32)
  nameWithType: MemoryStream.Read(Byte[], Int32, Int32)
  fullName: MemoryStream.Read(Byte[], Int32, Int32)
  type: Method
  assemblies:
  - System.IO
  - mscorlib
  - netstandard
  - System.Runtime.Extensions
  namespace: System.IO
  summary: Reads a block of bytes from the current stream and writes the data to a buffer.
  remarks: "This method overrides <xref:System.IO.Stream.Read%2A>.  \n  \n The `offset` parameter gives the offset of the first byte in `buffer` to which data from the current stream is written. The `count` parameter gives the maximum number of bytes to read from the current stream. The returned value is the actual number of bytes read, or zero if the end of the stream is reached.  \n  \n If the read operation is successful, the current position within the stream advances by the number of bytes read. If an exception occurs, the current position within the stream remains unchanged.  \n  \n The `Read` method will return zero only if the end of the stream is reached. In all other cases, `Read` always reads at least one byte from the stream before returning. By definition, if no data is available from the stream upon a call to `Read`, the `Read` method returns zero (the end of the stream is reached automatically). An implementation is free to return fewer bytes than requested even if the end of the stream has not been reached.  \n  \n Use <xref:System.IO.BinaryReader> for reading primitive data types.  \n  \n> [!CAUTION]\n>  If the byte array specified in the `buffer` parameter is the underlying buffer returned by the <xref:System.IO.MemoryStream.GetBuffer%2A> method, the array contents are overwritten, and no exception is thrown."
  example:
  - "This code example is part of a larger example provided for the <xref:System.IO.MemoryStream> class.  \n  \n [!code-cpp[System.IO.MemoryStream#7](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IO.MemoryStream/CPP/memstream.cpp#7)]\n [!code-csharp[System.IO.MemoryStream#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.MemoryStream/CS/memstream.cs#7)]\n [!code-vb[System.IO.MemoryStream#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.MemoryStream/VB/memstream.vb#7)]"
  syntax:
    content: public override int Read (byte[] buffer, int offset, int count);
    parameters:
    - id: buffer
      type: System.Byte[]
      description: When this method returns, contains the specified byte array with the values between <code>offset</code> and (<code>offset</code> + <code>count</code> - 1) replaced by the characters read from the current stream.
    - id: offset
      type: System.Int32
      description: The zero-based byte offset in <code>buffer</code> at which to begin storing data from the current stream.
    - id: count
      type: System.Int32
      description: The maximum number of bytes to read.
    return:
      type: System.Int32
      description: The total number of bytes written into the buffer. This can be less than the number of bytes requested if that number of bytes are not currently available, or zero if the end of the stream is reached before any bytes are read.
  overload: System.IO.MemoryStream.Read*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>buffer</code> is `null`.
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: <code>offset</code> or <code>count</code> is negative.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: <code>offset</code> subtracted from the buffer length is less than <code>count</code>.
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: The current stream instance is closed.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/MemoryStream.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.IO.MemoryStream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)
  commentId: M:System.IO.MemoryStream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)
  id: ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)
  parent: System.IO.MemoryStream
  langs:
  - csharp
  name: ReadAsync(Byte[], Int32, Int32, CancellationToken)
  nameWithType: MemoryStream.ReadAsync(Byte[], Int32, Int32, CancellationToken)
  fullName: MemoryStream.ReadAsync(Byte[], Int32, Int32, CancellationToken)
  type: Method
  assemblies:
  - System.IO
  - mscorlib
  - netstandard
  - System.Runtime.Extensions
  namespace: System.IO
  summary: Asynchronously reads a sequence of bytes from the current stream, advances the position within the stream by the number of bytes read, and monitors cancellation requests.
  remarks: "If the operation is canceled before it completes, the returned task contains the <xref:System.Threading.Tasks.TaskStatus.Canceled> value for the <xref:System.Threading.Tasks.Task.Status%2A> property.  \n  \n You can create a cancellation token by creating an instance of the <xref:System.Threading.CancellationTokenSource> class and passing the <xref:System.Threading.CancellationTokenSource.Token%2A> property as the `cancellationToken` parameter."
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(false)]

      public override System.Threading.Tasks.Task<int> ReadAsync (byte[] buffer, int offset, int count, System.Threading.CancellationToken cancellationToken);
    parameters:
    - id: buffer
      type: System.Byte[]
      description: The buffer to write the data into.
    - id: offset
      type: System.Int32
      description: The byte offset in <code>buffer</code> at which to begin writing data from the stream.
    - id: count
      type: System.Int32
      description: The maximum number of bytes to read.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The token to monitor for cancellation requests. The default value is <xref href="System.Threading.CancellationToken.None"></xref>.
    return:
      type: System.Threading.Tasks.Task{System.Int32}
      description: A task that represents the asynchronous read operation. The value of the <code>TResult</code> parameter contains the total number of bytes read into the buffer. The result value can be less than the number of bytes requested if the number of bytes currently available is less than the requested number, or it can be 0 (zero) if the end of the stream has been reached.
  overload: System.IO.MemoryStream.ReadAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>buffer</code> is `null`.
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: <code>offset</code> or <code>count</code> is negative.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: The sum of <code>offset</code> and <code>count</code> is larger than the buffer length.
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: The stream does not support reading.
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: The stream has been disposed.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: The stream is currently in use by a previous read operation.
  attributes:
  - type: System.Runtime.InteropServices.ComVisibleAttribute
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/MemoryStream.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.IO.MemoryStream.ReadByte
  commentId: M:System.IO.MemoryStream.ReadByte
  id: ReadByte
  parent: System.IO.MemoryStream
  langs:
  - csharp
  name: ReadByte()
  nameWithType: MemoryStream.ReadByte()
  fullName: MemoryStream.ReadByte()
  type: Method
  assemblies:
  - System.IO
  - mscorlib
  - netstandard
  - System.Runtime.Extensions
  namespace: System.IO
  summary: Reads a byte from the current stream.
  remarks: "This method overrides <xref:System.IO.Stream.ReadByte%2A>.  \n  \n If the read operation is successful, the current position within the stream is advanced by one byte. If an exception occurs, the current position within the stream is unchanged."
  example:
  - "This code example is part of a larger example provided for the <xref:System.IO.MemoryStream> class.  \n  \n [!code-cpp[System.IO.MemoryStream#8](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IO.MemoryStream/CPP/memstream.cpp#8)]\n [!code-csharp[System.IO.MemoryStream#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.MemoryStream/CS/memstream.cs#8)]\n [!code-vb[System.IO.MemoryStream#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.MemoryStream/VB/memstream.vb#8)]"
  syntax:
    content: public override int ReadByte ();
    parameters: []
    return:
      type: System.Int32
      description: The byte cast to a <xref href="System.Int32"></xref>, or -1 if the end of the stream has been reached.
  overload: System.IO.MemoryStream.ReadByte*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: The current stream instance is closed.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/MemoryStream.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.IO.MemoryStream.Seek(System.Int64,System.IO.SeekOrigin)
  commentId: M:System.IO.MemoryStream.Seek(System.Int64,System.IO.SeekOrigin)
  id: Seek(System.Int64,System.IO.SeekOrigin)
  parent: System.IO.MemoryStream
  langs:
  - csharp
  name: Seek(Int64, SeekOrigin)
  nameWithType: MemoryStream.Seek(Int64, SeekOrigin)
  fullName: MemoryStream.Seek(Int64, SeekOrigin)
  type: Method
  assemblies:
  - System.IO
  - mscorlib
  - netstandard
  - System.Runtime.Extensions
  namespace: System.IO
  summary: Sets the position within the current stream to the specified value.
  remarks: "This method overrides <xref:System.IO.Stream.Seek%2A?displayProperty=fullName>.  \n  \n Seeking to any location beyond the length of the stream is supported.  \n  \n Do not use the <xref:System.IO.MemoryStream.Seek%2A> method to determine the new position in the stream if the <xref:System.IO.MemoryStream> was initialized with a non-zero offset. If you do, <xref:System.IO.MemoryStream.Seek%2A> will return an inaccurate value. Instead, use the <xref:System.IO.MemoryStream.Position%2A> property to get the new position of the stream."
  example:
  - "This code example is part of a larger example provided for the <xref:System.IO.MemoryStream> class.  \n  \n [!code-cpp[System.IO.MemoryStream#6](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IO.MemoryStream/CPP/memstream.cpp#6)]\n [!code-csharp[System.IO.MemoryStream#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.MemoryStream/CS/memstream.cs#6)]\n [!code-vb[System.IO.MemoryStream#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.MemoryStream/VB/memstream.vb#6)]"
  syntax:
    content: public override long Seek (long offset, System.IO.SeekOrigin loc);
    parameters:
    - id: offset
      type: System.Int64
      description: The new position within the stream. This is relative to the <code>loc</code> parameter, and can be positive or negative.
    - id: loc
      type: System.IO.SeekOrigin
      description: A value of type <xref href="System.IO.SeekOrigin"></xref>, which acts as the seek reference point.
    return:
      type: System.Int64
      description: The new position within the stream, calculated by combining the initial reference point and the offset.
  overload: System.IO.MemoryStream.Seek*
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: Seeking is attempted before the beginning of the stream.
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: <code>offset</code> is greater than <xref href="System.Int32.MaxValue"></xref>.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "There is an invalid <xref href=\"System.IO.SeekOrigin\"></xref>.  \n  \n -or-  \n  \n <code>offset</code> caused an arithmetic overflow."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: The current stream instance is closed.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/MemoryStream.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.IO.MemoryStream.SetLength(System.Int64)
  commentId: M:System.IO.MemoryStream.SetLength(System.Int64)
  id: SetLength(System.Int64)
  parent: System.IO.MemoryStream
  langs:
  - csharp
  name: SetLength(Int64)
  nameWithType: MemoryStream.SetLength(Int64)
  fullName: MemoryStream.SetLength(Int64)
  type: Method
  assemblies:
  - System.IO
  - mscorlib
  - netstandard
  - System.Runtime.Extensions
  namespace: System.IO
  summary: Sets the length of the current stream to the specified value.
  remarks: "This method overrides <xref:System.IO.Stream.SetLength%2A>.  \n  \n If the specified value is less than the current length of the stream, the stream is truncated. If after the truncation the current position within the stream is past the end of the stream, the <xref:System.IO.MemoryStream.ReadByte%2A> method returns -1, the <xref:System.IO.MemoryStream.Read%2A> method reads zero bytes into the provided byte array, and <xref:System.IO.MemoryStream.Write%2A> and <xref:System.IO.MemoryStream.WriteByte%2A> methods append specified bytes at the end of the stream, increasing its length. If the specified value is larger than the current capacity and the stream is resizable, the capacity is increased, and the current position within the stream is unchanged. If the length is increased, the contents of the stream between the old and the new length are initialized to zeros.  \n  \n> [!NOTE]\n>  A <xref:System.IO.MemoryStream> instance must support writing for this method to work. Use the <xref:System.IO.MemoryStream.CanWrite%2A> property to determine whether the current instance supports writing. For additional information, see <xref:System.IO.Stream.CanWrite%2A>."
  syntax:
    content: public override void SetLength (long value);
    parameters:
    - id: value
      type: System.Int64
      description: The value at which to set the length.
  overload: System.IO.MemoryStream.SetLength*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "The current stream is not resizable and <code>value</code> is larger than the current capacity.  \n  \n -or-  \n  \n The current stream does not support writing."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: <code>value</code> is negative or is greater than the maximum length of the <xref href="System.IO.MemoryStream"></xref>, where the maximum length is(<xref href="System.Int32.MaxValue"></xref> - origin), and origin is the index into the underlying buffer at which the stream starts.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/MemoryStream.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.IO.MemoryStream.ToArray
  commentId: M:System.IO.MemoryStream.ToArray
  id: ToArray
  parent: System.IO.MemoryStream
  langs:
  - csharp
  name: ToArray()
  nameWithType: MemoryStream.ToArray()
  fullName: MemoryStream.ToArray()
  type: Method
  assemblies:
  - System.IO
  - mscorlib
  - netstandard
  - System.Runtime.Extensions
  namespace: System.IO
  summary: Writes the stream contents to a byte array, regardless of the <xref href="System.IO.MemoryStream.Position"></xref> property.
  remarks: "This method omits unused bytes in <xref:System.IO.MemoryStream> from the array. To get the entire buffer, use the <xref:System.IO.MemoryStream.GetBuffer%2A> method.  \n  \n This method returns a copy of the contents of the <xref:System.IO.MemoryStream> as a byte array. If the current instance was constructed on a provided byte array, a copy of the section of the array to which this instance has access is returned. See the <xref:System.IO.MemoryStream.%23ctor%2A> constructor for details.  \n  \n> [!NOTE]\n>  This method works when the <xref:System.IO.MemoryStream> is closed."
  syntax:
    content: public virtual byte[] ToArray ();
    parameters: []
    return:
      type: System.Byte[]
      description: A new byte array.
  overload: System.IO.MemoryStream.ToArray*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/MemoryStream.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.IO.MemoryStream.TryGetBuffer(System.ArraySegment{System.Byte}@)
  commentId: M:System.IO.MemoryStream.TryGetBuffer(System.ArraySegment{System.Byte}@)
  id: TryGetBuffer(System.ArraySegment{System.Byte}@)
  parent: System.IO.MemoryStream
  langs:
  - csharp
  name: TryGetBuffer(ArraySegment<Byte>)
  nameWithType: MemoryStream.TryGetBuffer(ArraySegment<Byte>)
  fullName: MemoryStream.TryGetBuffer(ArraySegment<Byte>)
  type: Method
  assemblies:
  - System.IO
  - mscorlib
  - netstandard
  - System.Runtime.Extensions
  namespace: System.IO
  summary: Returns the array of unsigned bytes from which this stream was created. The return value indicates whether the conversion succeeded.
  syntax:
    content: public virtual bool TryGetBuffer (out ArraySegment<byte> buffer);
    parameters:
    - id: buffer
      type: System.ArraySegment{System.Byte}
      description: The byte array segment from which this stream was created.
    return:
      type: System.Boolean
      description: '`true` if the conversion was successful; otherwise, `false`.'
  overload: System.IO.MemoryStream.TryGetBuffer*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/MemoryStream.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.IO.MemoryStream.Write(System.Byte[],System.Int32,System.Int32)
  commentId: M:System.IO.MemoryStream.Write(System.Byte[],System.Int32,System.Int32)
  id: Write(System.Byte[],System.Int32,System.Int32)
  parent: System.IO.MemoryStream
  langs:
  - csharp
  name: Write(Byte[], Int32, Int32)
  nameWithType: MemoryStream.Write(Byte[], Int32, Int32)
  fullName: MemoryStream.Write(Byte[], Int32, Int32)
  type: Method
  assemblies:
  - System.IO
  - mscorlib
  - netstandard
  - System.Runtime.Extensions
  namespace: System.IO
  summary: Writes a block of bytes to the current stream using data read from a buffer.
  remarks: "This method overrides <xref:System.IO.Stream.Write%2A>.  \n  \n The `offset` parameter gives the offset of the first byte in `buffer` to write from, and the `count` parameter gives the number of bytes to write. If the write operation is successful, the current position within the stream is advanced by the number of bytes written. If an exception occurs, the current position within the stream is unchanged.  \n  \n Except for a `MemoryStream` constructed with a byte[] parameter, write operations at the end of a `MemoryStream` expand the `MemoryStream`."
  example:
  - "This code example is part of a larger example provided for the <xref:System.IO.MemoryStream> class.  \n  \n [!code-cpp[System.IO.MemoryStream#3](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IO.MemoryStream/CPP/memstream.cpp#3)]\n [!code-csharp[System.IO.MemoryStream#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.MemoryStream/CS/memstream.cs#3)]\n [!code-vb[System.IO.MemoryStream#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.MemoryStream/VB/memstream.vb#3)]"
  syntax:
    content: public override void Write (byte[] buffer, int offset, int count);
    parameters:
    - id: buffer
      type: System.Byte[]
      description: The buffer to write data from.
    - id: offset
      type: System.Int32
      description: The zero-based byte offset in <code>buffer</code> at which to begin copying bytes to the current stream.
    - id: count
      type: System.Int32
      description: The maximum number of bytes to write.
  overload: System.IO.MemoryStream.Write*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>buffer</code> is `null`.
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "The stream does not support writing. For additional information see <xref href=\"System.IO.Stream.CanWrite\"></xref>.  \n  \n -or-  \n  \n The current position is closer than <code>count</code> bytes to the end of the stream, and the capacity cannot be modified."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: <code>offset</code> subtracted from the buffer length is less than <code>count</code>.
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: <code>offset</code> or <code>count</code> are negative.
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: An I/O error occurs.
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: The current stream instance is closed.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/MemoryStream.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.IO.MemoryStream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)
  commentId: M:System.IO.MemoryStream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)
  id: WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)
  parent: System.IO.MemoryStream
  langs:
  - csharp
  name: WriteAsync(Byte[], Int32, Int32, CancellationToken)
  nameWithType: MemoryStream.WriteAsync(Byte[], Int32, Int32, CancellationToken)
  fullName: MemoryStream.WriteAsync(Byte[], Int32, Int32, CancellationToken)
  type: Method
  assemblies:
  - System.IO
  - mscorlib
  - netstandard
  - System.Runtime.Extensions
  namespace: System.IO
  summary: Asynchronously writes a sequence of bytes to the current stream, advances the current position within this stream by the number of bytes written, and monitors cancellation requests.
  remarks: "If the operation is canceled before it completes, the returned task contains the <xref:System.Threading.Tasks.TaskStatus.Canceled> value for the <xref:System.Threading.Tasks.Task.Status%2A> property.  \n  \n You can create a cancellation token by creating an instance of the <xref:System.Threading.CancellationTokenSource> class and passing the <xref:System.Threading.CancellationTokenSource.Token%2A> property as the `cancellationToken` parameter."
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(false)]

      public override System.Threading.Tasks.Task WriteAsync (byte[] buffer, int offset, int count, System.Threading.CancellationToken cancellationToken);
    parameters:
    - id: buffer
      type: System.Byte[]
      description: The buffer to write data from.
    - id: offset
      type: System.Int32
      description: The zero-based byte offset in <code>buffer</code> from which to begin copying bytes to the stream.
    - id: count
      type: System.Int32
      description: The maximum number of bytes to write.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The token to monitor for cancellation requests. The default value is <xref href="System.Threading.CancellationToken.None"></xref>.
    return:
      type: System.Threading.Tasks.Task
      description: A task that represents the asynchronous write operation.
  overload: System.IO.MemoryStream.WriteAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>buffer</code> is `null`.
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: <code>offset</code> or <code>count</code> is negative.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: The sum of <code>offset</code> and <code>count</code> is larger than the buffer length.
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: The stream does not support writing.
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: The stream has been disposed.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: The stream is currently in use by a previous write operation.
  attributes:
  - type: System.Runtime.InteropServices.ComVisibleAttribute
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/MemoryStream.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.IO.MemoryStream.WriteByte(System.Byte)
  commentId: M:System.IO.MemoryStream.WriteByte(System.Byte)
  id: WriteByte(System.Byte)
  parent: System.IO.MemoryStream
  langs:
  - csharp
  name: WriteByte(Byte)
  nameWithType: MemoryStream.WriteByte(Byte)
  fullName: MemoryStream.WriteByte(Byte)
  type: Method
  assemblies:
  - System.IO
  - mscorlib
  - netstandard
  - System.Runtime.Extensions
  namespace: System.IO
  summary: Writes a byte to the current stream at the current position.
  remarks: "This method overrides <xref:System.IO.Stream.WriteByte%2A>.  \n  \n Except for a `MemoryStream` constructed with a byte[] parameter, write operations at the end of a `MemoryStream` expand the `MemoryStream`."
  example:
  - "This code example is part of a larger example provided for the <xref:System.IO.MemoryStream> class.  \n  \n [!code-cpp[System.IO.MemoryStream#4](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IO.MemoryStream/CPP/memstream.cpp#4)]\n [!code-csharp[System.IO.MemoryStream#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.MemoryStream/CS/memstream.cs#4)]\n [!code-vb[System.IO.MemoryStream#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.MemoryStream/VB/memstream.vb#4)]"
  syntax:
    content: public override void WriteByte (byte value);
    parameters:
    - id: value
      type: System.Byte
      description: The byte to write.
  overload: System.IO.MemoryStream.WriteByte*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "The stream does not support writing. For additional information see <xref href=\"System.IO.Stream.CanWrite\"></xref>.  \n  \n -or-  \n  \n The current position is at the end of the stream, and the capacity cannot be modified."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: The current stream is closed.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/MemoryStream.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.IO.MemoryStream.WriteTo(System.IO.Stream)
  commentId: M:System.IO.MemoryStream.WriteTo(System.IO.Stream)
  id: WriteTo(System.IO.Stream)
  parent: System.IO.MemoryStream
  langs:
  - csharp
  name: WriteTo(Stream)
  nameWithType: MemoryStream.WriteTo(Stream)
  fullName: MemoryStream.WriteTo(Stream)
  type: Method
  assemblies:
  - System.IO
  - mscorlib
  - netstandard
  - System.Runtime.Extensions
  namespace: System.IO
  summary: Writes the entire contents of this memory stream to another stream.
  remarks: When the current stream is open, this method is equivalent to calling <xref:System.IO.Stream.Write%2A?displayProperty=fullName> on the underlying buffer of this stream.
  syntax:
    content: public virtual void WriteTo (System.IO.Stream stream);
    parameters:
    - id: stream
      type: System.IO.Stream
      description: The stream to write this memory stream to.
  overload: System.IO.MemoryStream.WriteTo*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>stream</code> is `null`.
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: The current or target stream is closed.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/MemoryStream.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
references:
- uid: System.IO.Stream
  parent: System.IO
  isExternal: false
  name: Stream
  nameWithType: Stream
  fullName: System.IO.Stream
- uid: System.ArgumentNullException
  parent: System
  isExternal: false
  name: ArgumentNullException
  nameWithType: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: System.ArgumentOutOfRangeException
  parent: System
  isExternal: false
  name: ArgumentOutOfRangeException
  nameWithType: ArgumentOutOfRangeException
  fullName: System.ArgumentOutOfRangeException
- uid: System.ArgumentException
  parent: System
  isExternal: false
  name: ArgumentException
  nameWithType: ArgumentException
  fullName: System.ArgumentException
- uid: System.ObjectDisposedException
  parent: System
  isExternal: false
  name: ObjectDisposedException
  nameWithType: ObjectDisposedException
  fullName: System.ObjectDisposedException
- uid: System.NotSupportedException
  parent: System
  isExternal: false
  name: NotSupportedException
  nameWithType: NotSupportedException
  fullName: System.NotSupportedException
- uid: System.UnauthorizedAccessException
  parent: System
  isExternal: false
  name: UnauthorizedAccessException
  nameWithType: UnauthorizedAccessException
  fullName: System.UnauthorizedAccessException
- uid: System.InvalidOperationException
  parent: System
  isExternal: false
  name: InvalidOperationException
  nameWithType: InvalidOperationException
  fullName: System.InvalidOperationException
- uid: System.IO.IOException
  parent: System.IO
  isExternal: false
  name: IOException
  nameWithType: IOException
  fullName: System.IO.IOException
- uid: System.IO.MemoryStream.#ctor
  parent: System.IO.MemoryStream
  isExternal: false
  name: MemoryStream()
  nameWithType: MemoryStream.MemoryStream()
  fullName: MemoryStream.MemoryStream()
- uid: System.IO.MemoryStream.#ctor(System.Byte[])
  parent: System.IO.MemoryStream
  isExternal: false
  name: MemoryStream(Byte[])
  nameWithType: MemoryStream.MemoryStream(Byte[])
  fullName: MemoryStream.MemoryStream(Byte[])
- uid: System.Byte
  name: Byte
  nameWithType: Byte
  fullName: System.Byte
- uid: System.Byte[]
  parent: System
  isExternal: false
  name: Byte[]
  nameWithType: Byte[]
  fullName: System.Byte[]
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.IO.MemoryStream.#ctor(System.Int32)
  parent: System.IO.MemoryStream
  isExternal: false
  name: MemoryStream(Int32)
  nameWithType: MemoryStream.MemoryStream(Int32)
  fullName: MemoryStream.MemoryStream(Int32)
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.IO.MemoryStream.#ctor(System.Byte[],System.Boolean)
  parent: System.IO.MemoryStream
  isExternal: false
  name: MemoryStream(Byte[], Boolean)
  nameWithType: MemoryStream.MemoryStream(Byte[], Boolean)
  fullName: MemoryStream.MemoryStream(Byte[], Boolean)
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.IO.MemoryStream.#ctor(System.Byte[],System.Int32,System.Int32)
  parent: System.IO.MemoryStream
  isExternal: false
  name: MemoryStream(Byte[], Int32, Int32)
  nameWithType: MemoryStream.MemoryStream(Byte[], Int32, Int32)
  fullName: MemoryStream.MemoryStream(Byte[], Int32, Int32)
- uid: System.IO.MemoryStream.#ctor(System.Byte[],System.Int32,System.Int32,System.Boolean)
  parent: System.IO.MemoryStream
  isExternal: false
  name: MemoryStream(Byte[], Int32, Int32, Boolean)
  nameWithType: MemoryStream.MemoryStream(Byte[], Int32, Int32, Boolean)
  fullName: MemoryStream.MemoryStream(Byte[], Int32, Int32, Boolean)
- uid: System.IO.MemoryStream.#ctor(System.Byte[],System.Int32,System.Int32,System.Boolean,System.Boolean)
  parent: System.IO.MemoryStream
  isExternal: false
  name: MemoryStream(Byte[], Int32, Int32, Boolean, Boolean)
  nameWithType: MemoryStream.MemoryStream(Byte[], Int32, Int32, Boolean, Boolean)
  fullName: MemoryStream.MemoryStream(Byte[], Int32, Int32, Boolean, Boolean)
- uid: System.IO.MemoryStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)
  parent: System.IO.MemoryStream
  isExternal: false
  name: BeginRead(Byte[], Int32, Int32, AsyncCallback, Object)
  nameWithType: MemoryStream.BeginRead(Byte[], Int32, Int32, AsyncCallback, Object)
  fullName: MemoryStream.BeginRead(Byte[], Int32, Int32, AsyncCallback, Object)
- uid: System.IAsyncResult
  parent: System
  isExternal: false
  name: IAsyncResult
  nameWithType: IAsyncResult
  fullName: System.IAsyncResult
- uid: System.AsyncCallback
  parent: System
  isExternal: false
  name: AsyncCallback
  nameWithType: AsyncCallback
  fullName: System.AsyncCallback
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.IO.MemoryStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)
  parent: System.IO.MemoryStream
  isExternal: false
  name: BeginWrite(Byte[], Int32, Int32, AsyncCallback, Object)
  nameWithType: MemoryStream.BeginWrite(Byte[], Int32, Int32, AsyncCallback, Object)
  fullName: MemoryStream.BeginWrite(Byte[], Int32, Int32, AsyncCallback, Object)
- uid: System.IO.MemoryStream.CanRead
  parent: System.IO.MemoryStream
  isExternal: false
  name: CanRead
  nameWithType: MemoryStream.CanRead
  fullName: MemoryStream.CanRead
- uid: System.IO.MemoryStream.CanSeek
  parent: System.IO.MemoryStream
  isExternal: false
  name: CanSeek
  nameWithType: MemoryStream.CanSeek
  fullName: MemoryStream.CanSeek
- uid: System.IO.MemoryStream.CanWrite
  parent: System.IO.MemoryStream
  isExternal: false
  name: CanWrite
  nameWithType: MemoryStream.CanWrite
  fullName: MemoryStream.CanWrite
- uid: System.IO.MemoryStream.Capacity
  parent: System.IO.MemoryStream
  isExternal: false
  name: Capacity
  nameWithType: MemoryStream.Capacity
  fullName: MemoryStream.Capacity
- uid: System.IO.MemoryStream.CopyTo(System.IO.Stream,System.Int32)
  parent: System.IO.MemoryStream
  isExternal: false
  name: CopyTo(Stream, Int32)
  nameWithType: MemoryStream.CopyTo(Stream, Int32)
  fullName: MemoryStream.CopyTo(Stream, Int32)
- uid: System.IO.MemoryStream.CopyToAsync(System.IO.Stream,System.Int32,System.Threading.CancellationToken)
  parent: System.IO.MemoryStream
  isExternal: false
  name: CopyToAsync(Stream, Int32, CancellationToken)
  nameWithType: MemoryStream.CopyToAsync(Stream, Int32, CancellationToken)
  fullName: MemoryStream.CopyToAsync(Stream, Int32, CancellationToken)
- uid: System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: false
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: System.Threading.CancellationToken
  parent: System.Threading
  isExternal: false
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.IO.MemoryStream.Dispose(System.Boolean)
  parent: System.IO.MemoryStream
  isExternal: false
  name: Dispose(Boolean)
  nameWithType: MemoryStream.Dispose(Boolean)
  fullName: MemoryStream.Dispose(Boolean)
- uid: System.IO.MemoryStream.EndRead(System.IAsyncResult)
  parent: System.IO.MemoryStream
  isExternal: false
  name: EndRead(IAsyncResult)
  nameWithType: MemoryStream.EndRead(IAsyncResult)
  fullName: MemoryStream.EndRead(IAsyncResult)
- uid: System.IO.MemoryStream.EndWrite(System.IAsyncResult)
  parent: System.IO.MemoryStream
  isExternal: false
  name: EndWrite(IAsyncResult)
  nameWithType: MemoryStream.EndWrite(IAsyncResult)
  fullName: MemoryStream.EndWrite(IAsyncResult)
- uid: System.IO.MemoryStream.Flush
  parent: System.IO.MemoryStream
  isExternal: false
  name: Flush()
  nameWithType: MemoryStream.Flush()
  fullName: MemoryStream.Flush()
- uid: System.IO.MemoryStream.FlushAsync(System.Threading.CancellationToken)
  parent: System.IO.MemoryStream
  isExternal: false
  name: FlushAsync(CancellationToken)
  nameWithType: MemoryStream.FlushAsync(CancellationToken)
  fullName: MemoryStream.FlushAsync(CancellationToken)
- uid: System.IO.MemoryStream.GetBuffer
  parent: System.IO.MemoryStream
  isExternal: false
  name: GetBuffer()
  nameWithType: MemoryStream.GetBuffer()
  fullName: MemoryStream.GetBuffer()
- uid: System.IO.MemoryStream.Length
  parent: System.IO.MemoryStream
  isExternal: false
  name: Length
  nameWithType: MemoryStream.Length
  fullName: MemoryStream.Length
- uid: System.Int64
  parent: System
  isExternal: false
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: System.IO.MemoryStream.Position
  parent: System.IO.MemoryStream
  isExternal: false
  name: Position
  nameWithType: MemoryStream.Position
  fullName: MemoryStream.Position
- uid: System.IO.MemoryStream.Read(System.Byte[],System.Int32,System.Int32)
  parent: System.IO.MemoryStream
  isExternal: false
  name: Read(Byte[], Int32, Int32)
  nameWithType: MemoryStream.Read(Byte[], Int32, Int32)
  fullName: MemoryStream.Read(Byte[], Int32, Int32)
- uid: System.IO.MemoryStream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)
  parent: System.IO.MemoryStream
  isExternal: false
  name: ReadAsync(Byte[], Int32, Int32, CancellationToken)
  nameWithType: MemoryStream.ReadAsync(Byte[], Int32, Int32, CancellationToken)
  fullName: MemoryStream.ReadAsync(Byte[], Int32, Int32, CancellationToken)
- uid: System.Threading.Tasks.Task`1
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
- uid: System.Threading.Tasks.Task{System.Int32}
  parent: System.Threading.Tasks
  isExternal: false
  name: Task<Int32>
  nameWithType: Task<Int32>
  fullName: System.Threading.Tasks.Task<System.Int32>
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.IO.MemoryStream.ReadByte
  parent: System.IO.MemoryStream
  isExternal: false
  name: ReadByte()
  nameWithType: MemoryStream.ReadByte()
  fullName: MemoryStream.ReadByte()
- uid: System.IO.MemoryStream.Seek(System.Int64,System.IO.SeekOrigin)
  parent: System.IO.MemoryStream
  isExternal: false
  name: Seek(Int64, SeekOrigin)
  nameWithType: MemoryStream.Seek(Int64, SeekOrigin)
  fullName: MemoryStream.Seek(Int64, SeekOrigin)
- uid: System.IO.SeekOrigin
  parent: System.IO
  isExternal: false
  name: SeekOrigin
  nameWithType: SeekOrigin
  fullName: System.IO.SeekOrigin
- uid: System.IO.MemoryStream.SetLength(System.Int64)
  parent: System.IO.MemoryStream
  isExternal: false
  name: SetLength(Int64)
  nameWithType: MemoryStream.SetLength(Int64)
  fullName: MemoryStream.SetLength(Int64)
- uid: System.IO.MemoryStream.ToArray
  parent: System.IO.MemoryStream
  isExternal: false
  name: ToArray()
  nameWithType: MemoryStream.ToArray()
  fullName: MemoryStream.ToArray()
- uid: System.IO.MemoryStream.TryGetBuffer(System.ArraySegment{System.Byte}@)
  parent: System.IO.MemoryStream
  isExternal: false
  name: TryGetBuffer(ArraySegment<Byte>)
  nameWithType: MemoryStream.TryGetBuffer(ArraySegment<Byte>)
  fullName: MemoryStream.TryGetBuffer(ArraySegment<Byte>)
- uid: System.ArraySegment`1
  name: ArraySegment<T>
  nameWithType: ArraySegment<T>
  fullName: System.ArraySegment<T>
- uid: System.ArraySegment{System.Byte}
  parent: System
  isExternal: false
  name: ArraySegment<Byte>
  nameWithType: ArraySegment<Byte>
  fullName: System.ArraySegment<System.Byte>
  spec.csharp:
  - uid: System.ArraySegment`1
    name: ArraySegment
    nameWithType: ArraySegment
    fullName: System.ArraySegment
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.IO.MemoryStream.Write(System.Byte[],System.Int32,System.Int32)
  parent: System.IO.MemoryStream
  isExternal: false
  name: Write(Byte[], Int32, Int32)
  nameWithType: MemoryStream.Write(Byte[], Int32, Int32)
  fullName: MemoryStream.Write(Byte[], Int32, Int32)
- uid: System.IO.MemoryStream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)
  parent: System.IO.MemoryStream
  isExternal: false
  name: WriteAsync(Byte[], Int32, Int32, CancellationToken)
  nameWithType: MemoryStream.WriteAsync(Byte[], Int32, Int32, CancellationToken)
  fullName: MemoryStream.WriteAsync(Byte[], Int32, Int32, CancellationToken)
- uid: System.IO.MemoryStream.WriteByte(System.Byte)
  parent: System.IO.MemoryStream
  isExternal: false
  name: WriteByte(Byte)
  nameWithType: MemoryStream.WriteByte(Byte)
  fullName: MemoryStream.WriteByte(Byte)
- uid: System.IO.MemoryStream.WriteTo(System.IO.Stream)
  parent: System.IO.MemoryStream
  isExternal: false
  name: WriteTo(Stream)
  nameWithType: MemoryStream.WriteTo(Stream)
  fullName: MemoryStream.WriteTo(Stream)
- uid: System.IO.MemoryStream.#ctor*
  parent: System.IO.MemoryStream
  isExternal: false
  name: MemoryStream
  nameWithType: MemoryStream.MemoryStream
  fullName: MemoryStream.MemoryStream
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/MemoryStream.xml
- uid: System.IO.MemoryStream.BeginRead*
  parent: System.IO.MemoryStream
  isExternal: false
  name: BeginRead
  nameWithType: MemoryStream.BeginRead
  fullName: MemoryStream.BeginRead
  monikers:
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/MemoryStream.xml
- uid: System.IO.MemoryStream.BeginWrite*
  parent: System.IO.MemoryStream
  isExternal: false
  name: BeginWrite
  nameWithType: MemoryStream.BeginWrite
  fullName: MemoryStream.BeginWrite
  monikers:
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/MemoryStream.xml
- uid: System.IO.MemoryStream.CanRead*
  parent: System.IO.MemoryStream
  isExternal: false
  name: CanRead
  nameWithType: MemoryStream.CanRead
  fullName: MemoryStream.CanRead
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/MemoryStream.xml
- uid: System.IO.MemoryStream.CanSeek*
  parent: System.IO.MemoryStream
  isExternal: false
  name: CanSeek
  nameWithType: MemoryStream.CanSeek
  fullName: MemoryStream.CanSeek
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/MemoryStream.xml
- uid: System.IO.MemoryStream.CanWrite*
  parent: System.IO.MemoryStream
  isExternal: false
  name: CanWrite
  nameWithType: MemoryStream.CanWrite
  fullName: MemoryStream.CanWrite
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/MemoryStream.xml
- uid: System.IO.MemoryStream.Capacity*
  parent: System.IO.MemoryStream
  isExternal: false
  name: Capacity
  nameWithType: MemoryStream.Capacity
  fullName: MemoryStream.Capacity
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/MemoryStream.xml
- uid: System.IO.MemoryStream.CopyTo*
  parent: System.IO.MemoryStream
  isExternal: false
  name: CopyTo
  nameWithType: MemoryStream.CopyTo
  fullName: MemoryStream.CopyTo
  monikers:
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/MemoryStream.xml
- uid: System.IO.MemoryStream.CopyToAsync*
  parent: System.IO.MemoryStream
  isExternal: false
  name: CopyToAsync
  nameWithType: MemoryStream.CopyToAsync
  fullName: MemoryStream.CopyToAsync
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/MemoryStream.xml
- uid: System.IO.MemoryStream.Dispose*
  parent: System.IO.MemoryStream
  isExternal: false
  name: Dispose
  nameWithType: MemoryStream.Dispose
  fullName: MemoryStream.Dispose
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/MemoryStream.xml
- uid: System.IO.MemoryStream.EndRead*
  parent: System.IO.MemoryStream
  isExternal: false
  name: EndRead
  nameWithType: MemoryStream.EndRead
  fullName: MemoryStream.EndRead
  monikers:
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/MemoryStream.xml
- uid: System.IO.MemoryStream.EndWrite*
  parent: System.IO.MemoryStream
  isExternal: false
  name: EndWrite
  nameWithType: MemoryStream.EndWrite
  fullName: MemoryStream.EndWrite
  monikers:
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/MemoryStream.xml
- uid: System.IO.MemoryStream.Flush*
  parent: System.IO.MemoryStream
  isExternal: false
  name: Flush
  nameWithType: MemoryStream.Flush
  fullName: MemoryStream.Flush
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/MemoryStream.xml
- uid: System.IO.MemoryStream.FlushAsync*
  parent: System.IO.MemoryStream
  isExternal: false
  name: FlushAsync
  nameWithType: MemoryStream.FlushAsync
  fullName: MemoryStream.FlushAsync
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/MemoryStream.xml
- uid: System.IO.MemoryStream.GetBuffer*
  parent: System.IO.MemoryStream
  isExternal: false
  name: GetBuffer
  nameWithType: MemoryStream.GetBuffer
  fullName: MemoryStream.GetBuffer
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/MemoryStream.xml
- uid: System.IO.MemoryStream.Length*
  parent: System.IO.MemoryStream
  isExternal: false
  name: Length
  nameWithType: MemoryStream.Length
  fullName: MemoryStream.Length
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/MemoryStream.xml
- uid: System.IO.MemoryStream.Position*
  parent: System.IO.MemoryStream
  isExternal: false
  name: Position
  nameWithType: MemoryStream.Position
  fullName: MemoryStream.Position
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/MemoryStream.xml
- uid: System.IO.MemoryStream.Read*
  parent: System.IO.MemoryStream
  isExternal: false
  name: Read
  nameWithType: MemoryStream.Read
  fullName: MemoryStream.Read
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/MemoryStream.xml
- uid: System.IO.MemoryStream.ReadAsync*
  parent: System.IO.MemoryStream
  isExternal: false
  name: ReadAsync
  nameWithType: MemoryStream.ReadAsync
  fullName: MemoryStream.ReadAsync
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/MemoryStream.xml
- uid: System.IO.MemoryStream.ReadByte*
  parent: System.IO.MemoryStream
  isExternal: false
  name: ReadByte
  nameWithType: MemoryStream.ReadByte
  fullName: MemoryStream.ReadByte
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/MemoryStream.xml
- uid: System.IO.MemoryStream.Seek*
  parent: System.IO.MemoryStream
  isExternal: false
  name: Seek
  nameWithType: MemoryStream.Seek
  fullName: MemoryStream.Seek
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/MemoryStream.xml
- uid: System.IO.MemoryStream.SetLength*
  parent: System.IO.MemoryStream
  isExternal: false
  name: SetLength
  nameWithType: MemoryStream.SetLength
  fullName: MemoryStream.SetLength
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/MemoryStream.xml
- uid: System.IO.MemoryStream.ToArray*
  parent: System.IO.MemoryStream
  isExternal: false
  name: ToArray
  nameWithType: MemoryStream.ToArray
  fullName: MemoryStream.ToArray
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/MemoryStream.xml
- uid: System.IO.MemoryStream.TryGetBuffer*
  parent: System.IO.MemoryStream
  isExternal: false
  name: TryGetBuffer
  nameWithType: MemoryStream.TryGetBuffer
  fullName: MemoryStream.TryGetBuffer
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/MemoryStream.xml
- uid: System.IO.MemoryStream.Write*
  parent: System.IO.MemoryStream
  isExternal: false
  name: Write
  nameWithType: MemoryStream.Write
  fullName: MemoryStream.Write
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/MemoryStream.xml
- uid: System.IO.MemoryStream.WriteAsync*
  parent: System.IO.MemoryStream
  isExternal: false
  name: WriteAsync
  nameWithType: MemoryStream.WriteAsync
  fullName: MemoryStream.WriteAsync
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/MemoryStream.xml
- uid: System.IO.MemoryStream.WriteByte*
  parent: System.IO.MemoryStream
  isExternal: false
  name: WriteByte
  nameWithType: MemoryStream.WriteByte
  fullName: MemoryStream.WriteByte
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/MemoryStream.xml
- uid: System.IO.MemoryStream.WriteTo*
  parent: System.IO.MemoryStream
  isExternal: false
  name: WriteTo
  nameWithType: MemoryStream.WriteTo
  fullName: MemoryStream.WriteTo
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/MemoryStream.xml
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: false
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: Object.Equals(Object)
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: false
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: Object.Equals(Object, Object)
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: false
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: Object.GetHashCode()
- uid: System.Object.GetType
  parent: System.Object
  isExternal: false
  name: GetType()
  nameWithType: Object.GetType()
  fullName: Object.GetType()
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: false
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: Object.MemberwiseClone()
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: false
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: Object.ReferenceEquals(Object, Object)
- uid: System.Object.ToString
  parent: System.Object
  isExternal: false
  name: ToString()
  nameWithType: Object.ToString()
  fullName: Object.ToString()
- uid: System.IO.Stream.CanTimeout
  parent: System.IO.Stream
  isExternal: false
  name: CanTimeout
  nameWithType: Stream.CanTimeout
  fullName: Stream.CanTimeout
- uid: System.IO.Stream.Close
  parent: System.IO.Stream
  isExternal: false
  name: Close()
  nameWithType: Stream.Close()
  fullName: Stream.Close()
- uid: System.IO.Stream.CopyTo(System.IO.Stream)
  parent: System.IO.Stream
  isExternal: false
  name: CopyTo(Stream)
  nameWithType: Stream.CopyTo(Stream)
  fullName: Stream.CopyTo(Stream)
- uid: System.IO.Stream.CopyToAsync(System.IO.Stream)
  parent: System.IO.Stream
  isExternal: false
  name: CopyToAsync(Stream)
  nameWithType: Stream.CopyToAsync(Stream)
  fullName: Stream.CopyToAsync(Stream)
- uid: System.IO.Stream.CopyToAsync(System.IO.Stream,System.Int32)
  parent: System.IO.Stream
  isExternal: false
  name: CopyToAsync(Stream, Int32)
  nameWithType: Stream.CopyToAsync(Stream, Int32)
  fullName: Stream.CopyToAsync(Stream, Int32)
- uid: System.IO.Stream.CreateWaitHandle
  parent: System.IO.Stream
  isExternal: false
  name: CreateWaitHandle()
  nameWithType: Stream.CreateWaitHandle()
  fullName: Stream.CreateWaitHandle()
- uid: System.IO.Stream.Dispose
  parent: System.IO.Stream
  isExternal: false
  name: Dispose()
  nameWithType: Stream.Dispose()
  fullName: Stream.Dispose()
- uid: System.IO.Stream.FlushAsync
  parent: System.IO.Stream
  isExternal: false
  name: FlushAsync()
  nameWithType: Stream.FlushAsync()
  fullName: Stream.FlushAsync()
- uid: System.IO.Stream.Null
  parent: System.IO.Stream
  isExternal: false
  name: "Null"
  nameWithType: Stream.Null
  fullName: Stream.Null
- uid: System.IO.Stream.ObjectInvariant
  parent: System.IO.Stream
  isExternal: false
  name: ObjectInvariant()
  nameWithType: Stream.ObjectInvariant()
  fullName: Stream.ObjectInvariant()
- uid: System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32)
  parent: System.IO.Stream
  isExternal: false
  name: ReadAsync(Byte[], Int32, Int32)
  nameWithType: Stream.ReadAsync(Byte[], Int32, Int32)
  fullName: Stream.ReadAsync(Byte[], Int32, Int32)
- uid: System.IO.Stream.ReadTimeout
  parent: System.IO.Stream
  isExternal: false
  name: ReadTimeout
  nameWithType: Stream.ReadTimeout
  fullName: Stream.ReadTimeout
- uid: System.IO.Stream.Synchronized(System.IO.Stream)
  parent: System.IO.Stream
  isExternal: false
  name: Synchronized(Stream)
  nameWithType: Stream.Synchronized(Stream)
  fullName: Stream.Synchronized(Stream)
- uid: System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32)
  parent: System.IO.Stream
  isExternal: false
  name: WriteAsync(Byte[], Int32, Int32)
  nameWithType: Stream.WriteAsync(Byte[], Int32, Int32)
  fullName: Stream.WriteAsync(Byte[], Int32, Int32)
- uid: System.IO.Stream.WriteTimeout
  parent: System.IO.Stream
  isExternal: false
  name: WriteTimeout
  nameWithType: Stream.WriteTimeout
  fullName: Stream.WriteTimeout
