{"nodes":[{"content":"Base class for asymmetric keys.","nodes":[{"pos":[0,31],"content":"Base class for asymmetric keys.","nodes":[{"content":"Base class for asymmetric keys.","pos":[0,31]}]}],"pos":[970,1002],"yaml":true},{"content":"You cannot use this class when [!INCLUDE[vsindigo](~/includes/vsindigo-md.md)] is running under partial trust.","nodes":[{"pos":[0,110],"content":"You cannot use this class when <ph id=\"ph1\">[!INCLUDE[vsindigo](~/includes/vsindigo-md.md)]</ph> is running under partial trust.","source":"You cannot use this class when [!INCLUDE[vsindigo](~/includes/vsindigo-md.md)] is running under partial trust."}],"pos":[1013,1124],"yaml":true,"extradata":"MT"},{"content":"Initializes a new instance of the <xref href=\"System.IdentityModel.Tokens.AsymmetricSecurityKey\"></xref> class.","nodes":[{"pos":[0,111],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.IdentityModel.Tokens.AsymmetricSecurityKey\"&gt;&lt;/xref&gt;</ph> class.","source":"Initializes a new instance of the <xref href=\"System.IdentityModel.Tokens.AsymmetricSecurityKey\"></xref> class."}],"pos":[3267,3379],"yaml":true},{"content":"When overridden in a derived class, gets the specified asymmetric cryptographic algorithm.","nodes":[{"pos":[0,90],"content":"When overridden in a derived class, gets the specified asymmetric cryptographic algorithm.","nodes":[{"content":"When overridden in a derived class, gets the specified asymmetric cryptographic algorithm.","pos":[0,90]}]}],"pos":[4785,4876],"yaml":true},{"content":"Use the static fields of the <xref:System.IdentityModel.Tokens.SecurityAlgorithms> class to specify the algorithm.","nodes":[{"pos":[0,114],"content":"Use the static fields of the <xref:System.IdentityModel.Tokens.SecurityAlgorithms> class to specify the algorithm.","nodes":[{"content":"Use the static fields of the <ph id=\"ph1\">&lt;xref:System.IdentityModel.Tokens.SecurityAlgorithms&gt;</ph> class to specify the algorithm.","pos":[0,114],"source":"Use the static fields of the <xref:System.IdentityModel.Tokens.SecurityAlgorithms> class to specify the algorithm."}]}],"pos":[4887,5002],"yaml":true,"extradata":"MT"},{"content":"The asymmetric algorithm to create.","nodes":[{"pos":[0,35],"content":"The asymmetric algorithm to create.","nodes":[{"content":"The asymmetric algorithm to create.","pos":[0,35]}]}],"pos":[5231,5267],"yaml":true},{"content":"`true` when a private key is required to create the algorithm; otherwise, `false`.","nodes":[{"pos":[0,82],"content":"<ph id=\"ph1\">`true`</ph> when a private key is required to create the algorithm; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` when a private key is required to create the algorithm; otherwise, `false`."}],"pos":[5334,5419],"yaml":true},{"content":"An <xref href=\"System.Security.Cryptography.AsymmetricAlgorithm\"></xref> that represents the specified asymmetric cryptographic algorithm.  \n  \n Typically, `true` is passed into the <code>privateKey</code> parameter, as a private key is typically required for decryption.","nodes":[{"pos":[0,138],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Security.Cryptography.AsymmetricAlgorithm\"&gt;&lt;/xref&gt;</ph> that represents the specified asymmetric cryptographic algorithm.","source":"An <xref href=\"System.Security.Cryptography.AsymmetricAlgorithm\"></xref> that represents the specified asymmetric cryptographic algorithm."},{"pos":[145,271],"content":"Typically, <ph id=\"ph1\">`true`</ph> is passed into the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">privateKey</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter, as a private key is typically required for decryption.","source":"Typically, `true` is passed into the <code>privateKey</code> parameter, as a private key is typically required for decryption."}],"pos":[5511,5789],"yaml":true},{"content":"When overridden in a derived class, gets a cryptographic algorithm that generates a hash for a digital signature.","nodes":[{"pos":[0,113],"content":"When overridden in a derived class, gets a cryptographic algorithm that generates a hash for a digital signature.","nodes":[{"content":"When overridden in a derived class, gets a cryptographic algorithm that generates a hash for a digital signature.","pos":[0,113]}]}],"pos":[7098,7212],"yaml":true},{"content":"Use the static fields of the <xref:System.IdentityModel.Tokens.SecurityAlgorithms> class to specify the algorithm.","nodes":[{"pos":[0,114],"content":"Use the static fields of the <xref:System.IdentityModel.Tokens.SecurityAlgorithms> class to specify the algorithm.","nodes":[{"content":"Use the static fields of the <ph id=\"ph1\">&lt;xref:System.IdentityModel.Tokens.SecurityAlgorithms&gt;</ph> class to specify the algorithm.","pos":[0,114],"source":"Use the static fields of the <xref:System.IdentityModel.Tokens.SecurityAlgorithms> class to specify the algorithm."}]}],"pos":[7223,7338],"yaml":true,"extradata":"MT"},{"content":"The hash algorithm.","nodes":[{"pos":[0,19],"content":"The hash algorithm.","nodes":[{"content":"The hash algorithm.","pos":[0,19]}]}],"pos":[7550,7570],"yaml":true},{"content":"A <xref href=\"System.Security.Cryptography.HashAlgorithm\"></xref> that generates hashes for digital signatures.","nodes":[{"pos":[0,111],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Security.Cryptography.HashAlgorithm\"&gt;&lt;/xref&gt;</ph> that generates hashes for digital signatures.","source":"A <xref href=\"System.Security.Cryptography.HashAlgorithm\"></xref> that generates hashes for digital signatures."}],"pos":[7656,7768],"yaml":true},{"content":"When overridden in a derived class, gets the deformatter algorithm for the digital signature.","nodes":[{"pos":[0,93],"content":"When overridden in a derived class, gets the deformatter algorithm for the digital signature.","nodes":[{"content":"When overridden in a derived class, gets the deformatter algorithm for the digital signature.","pos":[0,93]}]}],"pos":[9053,9147],"yaml":true},{"content":"A signature deformatter is typically used to verify a digital signature.  \n  \n Use the static fields of the <xref:System.IdentityModel.Tokens.SecurityAlgorithms> class to specify the algorithm.","nodes":[{"pos":[0,72],"content":"A signature deformatter is typically used to verify a digital signature.","nodes":[{"content":"A signature deformatter is typically used to verify a digital signature.","pos":[0,72]}]},{"pos":[79,193],"content":"Use the static fields of the <xref:System.IdentityModel.Tokens.SecurityAlgorithms> class to specify the algorithm.","nodes":[{"content":"Use the static fields of the <ph id=\"ph1\">&lt;xref:System.IdentityModel.Tokens.SecurityAlgorithms&gt;</ph> class to specify the algorithm.","pos":[0,114],"source":"Use the static fields of the <xref:System.IdentityModel.Tokens.SecurityAlgorithms> class to specify the algorithm."}]}],"pos":[9158,9356],"yaml":true,"extradata":"MT"},{"content":"The deformatter algorithm for the digital signature.","nodes":[{"pos":[0,52],"content":"The deformatter algorithm for the digital signature.","nodes":[{"content":"The deformatter algorithm for the digital signature.","pos":[0,52]}]}],"pos":[9580,9633],"yaml":true},{"content":"An <xref href=\"System.Security.Cryptography.AsymmetricSignatureDeformatter\"></xref> that represents the deformatter algorithm for the digital signature.","nodes":[{"pos":[0,152],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Security.Cryptography.AsymmetricSignatureDeformatter\"&gt;&lt;/xref&gt;</ph> that represents the deformatter algorithm for the digital signature.","source":"An <xref href=\"System.Security.Cryptography.AsymmetricSignatureDeformatter\"></xref> that represents the deformatter algorithm for the digital signature."}],"pos":[9736,9889],"yaml":true},{"content":"When overridden in a derived class, gets the formatter algorithm for the digital signature.","nodes":[{"pos":[0,91],"content":"When overridden in a derived class, gets the formatter algorithm for the digital signature.","nodes":[{"content":"When overridden in a derived class, gets the formatter algorithm for the digital signature.","pos":[0,91]}]}],"pos":[11157,11249],"yaml":true},{"content":"Typically, a signature formatter is used to generate a digital signature.  \n  \n Use the static fields of the <xref:System.IdentityModel.Tokens.SecurityAlgorithms> class to specify the algorithm.","nodes":[{"pos":[0,73],"content":"Typically, a signature formatter is used to generate a digital signature.","nodes":[{"content":"Typically, a signature formatter is used to generate a digital signature.","pos":[0,73]}]},{"pos":[80,194],"content":"Use the static fields of the <xref:System.IdentityModel.Tokens.SecurityAlgorithms> class to specify the algorithm.","nodes":[{"content":"Use the static fields of the <ph id=\"ph1\">&lt;xref:System.IdentityModel.Tokens.SecurityAlgorithms&gt;</ph> class to specify the algorithm.","pos":[0,114],"source":"Use the static fields of the <xref:System.IdentityModel.Tokens.SecurityAlgorithms> class to specify the algorithm."}]}],"pos":[11260,11459],"yaml":true,"extradata":"MT"},{"content":"The formatter algorithm for the digital signature.","nodes":[{"pos":[0,50],"content":"The formatter algorithm for the digital signature.","nodes":[{"content":"The formatter algorithm for the digital signature.","pos":[0,50]}]}],"pos":[11679,11730],"yaml":true},{"content":"An <xref href=\"System.Security.Cryptography.AsymmetricSignatureFormatter\"></xref> that represents the formatter algorithm for the digital signature.","nodes":[{"pos":[0,148],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Security.Cryptography.AsymmetricSignatureFormatter\"&gt;&lt;/xref&gt;</ph> that represents the formatter algorithm for the digital signature.","source":"An <xref href=\"System.Security.Cryptography.AsymmetricSignatureFormatter\"></xref> that represents the formatter algorithm for the digital signature."}],"pos":[11831,11980],"yaml":true},{"content":"When overridden in a derived class, gets a value that indicates whether the private key is available.","nodes":[{"pos":[0,101],"content":"When overridden in a derived class, gets a value that indicates whether the private key is available.","nodes":[{"content":"When overridden in a derived class, gets a value that indicates whether the private key is available.","pos":[0,101]}]}],"pos":[13135,13237],"yaml":true},{"content":"`true` when the private key is available; otherwise, `false`.","nodes":[{"pos":[0,61],"content":"<ph id=\"ph1\">`true`</ph> when the private key is available; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` when the private key is available; otherwise, `false`."}],"pos":[13376,13440],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.IdentityModel.Tokens.AsymmetricSecurityKey\n  commentId: T:System.IdentityModel.Tokens.AsymmetricSecurityKey\n  id: AsymmetricSecurityKey\n  children:\n  - System.IdentityModel.Tokens.AsymmetricSecurityKey.#ctor\n  - System.IdentityModel.Tokens.AsymmetricSecurityKey.GetAsymmetricAlgorithm(System.String,System.Boolean)\n  - System.IdentityModel.Tokens.AsymmetricSecurityKey.GetHashAlgorithmForSignature(System.String)\n  - System.IdentityModel.Tokens.AsymmetricSecurityKey.GetSignatureDeformatter(System.String)\n  - System.IdentityModel.Tokens.AsymmetricSecurityKey.GetSignatureFormatter(System.String)\n  - System.IdentityModel.Tokens.AsymmetricSecurityKey.HasPrivateKey\n  langs:\n  - csharp\n  name: AsymmetricSecurityKey\n  nameWithType: AsymmetricSecurityKey\n  fullName: System.IdentityModel.Tokens.AsymmetricSecurityKey\n  type: Class\n  assemblies:\n  - System.IdentityModel\n  namespace: System.IdentityModel.Tokens\n  summary: Base class for asymmetric keys.\n  remarks: You cannot use this class when [!INCLUDE[vsindigo](~/includes/vsindigo-md.md)] is running under partial trust.\n  syntax:\n    content: 'public abstract class AsymmetricSecurityKey : System.IdentityModel.Tokens.SecurityKey'\n  inheritance:\n  - System.Object\n  - System.IdentityModel.Tokens.SecurityKey\n  derivedClasses:\n  - System.IdentityModel.Tokens.RsaSecurityKey\n  - System.IdentityModel.Tokens.X509AsymmetricSecurityKey\n  implements: []\n  inheritedMembers:\n  - System.IdentityModel.Tokens.SecurityKey.DecryptKey(System.String,System.Byte[])\n  - System.IdentityModel.Tokens.SecurityKey.EncryptKey(System.String,System.Byte[])\n  - System.IdentityModel.Tokens.SecurityKey.IsAsymmetricAlgorithm(System.String)\n  - System.IdentityModel.Tokens.SecurityKey.IsSupportedAlgorithm(System.String)\n  - System.IdentityModel.Tokens.SecurityKey.IsSymmetricAlgorithm(System.String)\n  - System.IdentityModel.Tokens.SecurityKey.KeySize\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.ToString\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IdentityModel.Tokens/AsymmetricSecurityKey.xml\n  ms.technology:\n  - dotnet-standard\n  ms.author: v-jibran\n  manager: markgal\n- uid: System.IdentityModel.Tokens.AsymmetricSecurityKey.#ctor\n  commentId: M:System.IdentityModel.Tokens.AsymmetricSecurityKey.#ctor\n  id: '#ctor'\n  parent: System.IdentityModel.Tokens.AsymmetricSecurityKey\n  langs:\n  - csharp\n  name: AsymmetricSecurityKey()\n  nameWithType: AsymmetricSecurityKey.AsymmetricSecurityKey()\n  fullName: AsymmetricSecurityKey.AsymmetricSecurityKey()\n  type: Constructor\n  assemblies:\n  - System.IdentityModel\n  namespace: System.IdentityModel.Tokens\n  summary: Initializes a new instance of the <xref href=\"System.IdentityModel.Tokens.AsymmetricSecurityKey\"></xref> class.\n  syntax:\n    content: protected AsymmetricSecurityKey ();\n    parameters: []\n  overload: System.IdentityModel.Tokens.AsymmetricSecurityKey.#ctor*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IdentityModel.Tokens/AsymmetricSecurityKey.xml\n  ms.technology:\n  - dotnet-standard\n  ms.author: v-jibran\n  manager: markgal\n- uid: System.IdentityModel.Tokens.AsymmetricSecurityKey.GetAsymmetricAlgorithm(System.String,System.Boolean)\n  commentId: M:System.IdentityModel.Tokens.AsymmetricSecurityKey.GetAsymmetricAlgorithm(System.String,System.Boolean)\n  id: GetAsymmetricAlgorithm(System.String,System.Boolean)\n  parent: System.IdentityModel.Tokens.AsymmetricSecurityKey\n  langs:\n  - csharp\n  name: GetAsymmetricAlgorithm(String, Boolean)\n  nameWithType: AsymmetricSecurityKey.GetAsymmetricAlgorithm(String, Boolean)\n  fullName: AsymmetricSecurityKey.GetAsymmetricAlgorithm(String, Boolean)\n  type: Method\n  assemblies:\n  - System.IdentityModel\n  namespace: System.IdentityModel.Tokens\n  summary: When overridden in a derived class, gets the specified asymmetric cryptographic algorithm.\n  remarks: Use the static fields of the <xref:System.IdentityModel.Tokens.SecurityAlgorithms> class to specify the algorithm.\n  syntax:\n    content: public abstract System.Security.Cryptography.AsymmetricAlgorithm GetAsymmetricAlgorithm (string algorithm, bool privateKey);\n    parameters:\n    - id: algorithm\n      type: System.String\n      description: The asymmetric algorithm to create.\n    - id: privateKey\n      type: System.Boolean\n      description: '`true` when a private key is required to create the algorithm; otherwise, `false`.'\n    return:\n      type: System.Security.Cryptography.AsymmetricAlgorithm\n      description: \"An <xref href=\\\"System.Security.Cryptography.AsymmetricAlgorithm\\\"></xref> that represents the specified asymmetric cryptographic algorithm.  \\n  \\n Typically, `true` is passed into the <code>privateKey</code> parameter, as a private key is typically required for decryption.\"\n  overload: System.IdentityModel.Tokens.AsymmetricSecurityKey.GetAsymmetricAlgorithm*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IdentityModel.Tokens/AsymmetricSecurityKey.xml\n  ms.technology:\n  - dotnet-standard\n  ms.author: v-jibran\n  manager: markgal\n- uid: System.IdentityModel.Tokens.AsymmetricSecurityKey.GetHashAlgorithmForSignature(System.String)\n  commentId: M:System.IdentityModel.Tokens.AsymmetricSecurityKey.GetHashAlgorithmForSignature(System.String)\n  id: GetHashAlgorithmForSignature(System.String)\n  parent: System.IdentityModel.Tokens.AsymmetricSecurityKey\n  langs:\n  - csharp\n  name: GetHashAlgorithmForSignature(String)\n  nameWithType: AsymmetricSecurityKey.GetHashAlgorithmForSignature(String)\n  fullName: AsymmetricSecurityKey.GetHashAlgorithmForSignature(String)\n  type: Method\n  assemblies:\n  - System.IdentityModel\n  namespace: System.IdentityModel.Tokens\n  summary: When overridden in a derived class, gets a cryptographic algorithm that generates a hash for a digital signature.\n  remarks: Use the static fields of the <xref:System.IdentityModel.Tokens.SecurityAlgorithms> class to specify the algorithm.\n  syntax:\n    content: public abstract System.Security.Cryptography.HashAlgorithm GetHashAlgorithmForSignature (string algorithm);\n    parameters:\n    - id: algorithm\n      type: System.String\n      description: The hash algorithm.\n    return:\n      type: System.Security.Cryptography.HashAlgorithm\n      description: A <xref href=\"System.Security.Cryptography.HashAlgorithm\"></xref> that generates hashes for digital signatures.\n  overload: System.IdentityModel.Tokens.AsymmetricSecurityKey.GetHashAlgorithmForSignature*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IdentityModel.Tokens/AsymmetricSecurityKey.xml\n  ms.technology:\n  - dotnet-standard\n  ms.author: v-jibran\n  manager: markgal\n- uid: System.IdentityModel.Tokens.AsymmetricSecurityKey.GetSignatureDeformatter(System.String)\n  commentId: M:System.IdentityModel.Tokens.AsymmetricSecurityKey.GetSignatureDeformatter(System.String)\n  id: GetSignatureDeformatter(System.String)\n  parent: System.IdentityModel.Tokens.AsymmetricSecurityKey\n  langs:\n  - csharp\n  name: GetSignatureDeformatter(String)\n  nameWithType: AsymmetricSecurityKey.GetSignatureDeformatter(String)\n  fullName: AsymmetricSecurityKey.GetSignatureDeformatter(String)\n  type: Method\n  assemblies:\n  - System.IdentityModel\n  namespace: System.IdentityModel.Tokens\n  summary: When overridden in a derived class, gets the deformatter algorithm for the digital signature.\n  remarks: \"A signature deformatter is typically used to verify a digital signature.  \\n  \\n Use the static fields of the <xref:System.IdentityModel.Tokens.SecurityAlgorithms> class to specify the algorithm.\"\n  syntax:\n    content: public abstract System.Security.Cryptography.AsymmetricSignatureDeformatter GetSignatureDeformatter (string algorithm);\n    parameters:\n    - id: algorithm\n      type: System.String\n      description: The deformatter algorithm for the digital signature.\n    return:\n      type: System.Security.Cryptography.AsymmetricSignatureDeformatter\n      description: An <xref href=\"System.Security.Cryptography.AsymmetricSignatureDeformatter\"></xref> that represents the deformatter algorithm for the digital signature.\n  overload: System.IdentityModel.Tokens.AsymmetricSecurityKey.GetSignatureDeformatter*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IdentityModel.Tokens/AsymmetricSecurityKey.xml\n  ms.technology:\n  - dotnet-standard\n  ms.author: v-jibran\n  manager: markgal\n- uid: System.IdentityModel.Tokens.AsymmetricSecurityKey.GetSignatureFormatter(System.String)\n  commentId: M:System.IdentityModel.Tokens.AsymmetricSecurityKey.GetSignatureFormatter(System.String)\n  id: GetSignatureFormatter(System.String)\n  parent: System.IdentityModel.Tokens.AsymmetricSecurityKey\n  langs:\n  - csharp\n  name: GetSignatureFormatter(String)\n  nameWithType: AsymmetricSecurityKey.GetSignatureFormatter(String)\n  fullName: AsymmetricSecurityKey.GetSignatureFormatter(String)\n  type: Method\n  assemblies:\n  - System.IdentityModel\n  namespace: System.IdentityModel.Tokens\n  summary: When overridden in a derived class, gets the formatter algorithm for the digital signature.\n  remarks: \"Typically, a signature formatter is used to generate a digital signature.  \\n  \\n Use the static fields of the <xref:System.IdentityModel.Tokens.SecurityAlgorithms> class to specify the algorithm.\"\n  syntax:\n    content: public abstract System.Security.Cryptography.AsymmetricSignatureFormatter GetSignatureFormatter (string algorithm);\n    parameters:\n    - id: algorithm\n      type: System.String\n      description: The formatter algorithm for the digital signature.\n    return:\n      type: System.Security.Cryptography.AsymmetricSignatureFormatter\n      description: An <xref href=\"System.Security.Cryptography.AsymmetricSignatureFormatter\"></xref> that represents the formatter algorithm for the digital signature.\n  overload: System.IdentityModel.Tokens.AsymmetricSecurityKey.GetSignatureFormatter*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IdentityModel.Tokens/AsymmetricSecurityKey.xml\n  ms.technology:\n  - dotnet-standard\n  ms.author: v-jibran\n  manager: markgal\n- uid: System.IdentityModel.Tokens.AsymmetricSecurityKey.HasPrivateKey\n  commentId: M:System.IdentityModel.Tokens.AsymmetricSecurityKey.HasPrivateKey\n  id: HasPrivateKey\n  parent: System.IdentityModel.Tokens.AsymmetricSecurityKey\n  langs:\n  - csharp\n  name: HasPrivateKey()\n  nameWithType: AsymmetricSecurityKey.HasPrivateKey()\n  fullName: AsymmetricSecurityKey.HasPrivateKey()\n  type: Method\n  assemblies:\n  - System.IdentityModel\n  namespace: System.IdentityModel.Tokens\n  summary: When overridden in a derived class, gets a value that indicates whether the private key is available.\n  syntax:\n    content: public abstract bool HasPrivateKey ();\n    parameters: []\n    return:\n      type: System.Boolean\n      description: '`true` when the private key is available; otherwise, `false`.'\n  overload: System.IdentityModel.Tokens.AsymmetricSecurityKey.HasPrivateKey*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IdentityModel.Tokens/AsymmetricSecurityKey.xml\n  ms.technology:\n  - dotnet-standard\n  ms.author: v-jibran\n  manager: markgal\nreferences:\n- uid: System.IdentityModel.Tokens.SecurityKey\n  parent: System.IdentityModel.Tokens\n  isExternal: false\n  name: SecurityKey\n  nameWithType: SecurityKey\n  fullName: System.IdentityModel.Tokens.SecurityKey\n- uid: System.IdentityModel.Tokens.AsymmetricSecurityKey.#ctor\n  parent: System.IdentityModel.Tokens.AsymmetricSecurityKey\n  isExternal: false\n  name: AsymmetricSecurityKey()\n  nameWithType: AsymmetricSecurityKey.AsymmetricSecurityKey()\n  fullName: AsymmetricSecurityKey.AsymmetricSecurityKey()\n- uid: System.IdentityModel.Tokens.AsymmetricSecurityKey.GetAsymmetricAlgorithm(System.String,System.Boolean)\n  parent: System.IdentityModel.Tokens.AsymmetricSecurityKey\n  isExternal: false\n  name: GetAsymmetricAlgorithm(String, Boolean)\n  nameWithType: AsymmetricSecurityKey.GetAsymmetricAlgorithm(String, Boolean)\n  fullName: AsymmetricSecurityKey.GetAsymmetricAlgorithm(String, Boolean)\n- uid: System.Security.Cryptography.AsymmetricAlgorithm\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: AsymmetricAlgorithm\n  nameWithType: AsymmetricAlgorithm\n  fullName: System.Security.Cryptography.AsymmetricAlgorithm\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.IdentityModel.Tokens.AsymmetricSecurityKey.GetHashAlgorithmForSignature(System.String)\n  parent: System.IdentityModel.Tokens.AsymmetricSecurityKey\n  isExternal: false\n  name: GetHashAlgorithmForSignature(String)\n  nameWithType: AsymmetricSecurityKey.GetHashAlgorithmForSignature(String)\n  fullName: AsymmetricSecurityKey.GetHashAlgorithmForSignature(String)\n- uid: System.Security.Cryptography.HashAlgorithm\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: HashAlgorithm\n  nameWithType: HashAlgorithm\n  fullName: System.Security.Cryptography.HashAlgorithm\n- uid: System.IdentityModel.Tokens.AsymmetricSecurityKey.GetSignatureDeformatter(System.String)\n  parent: System.IdentityModel.Tokens.AsymmetricSecurityKey\n  isExternal: false\n  name: GetSignatureDeformatter(String)\n  nameWithType: AsymmetricSecurityKey.GetSignatureDeformatter(String)\n  fullName: AsymmetricSecurityKey.GetSignatureDeformatter(String)\n- uid: System.Security.Cryptography.AsymmetricSignatureDeformatter\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: AsymmetricSignatureDeformatter\n  nameWithType: AsymmetricSignatureDeformatter\n  fullName: System.Security.Cryptography.AsymmetricSignatureDeformatter\n- uid: System.IdentityModel.Tokens.AsymmetricSecurityKey.GetSignatureFormatter(System.String)\n  parent: System.IdentityModel.Tokens.AsymmetricSecurityKey\n  isExternal: false\n  name: GetSignatureFormatter(String)\n  nameWithType: AsymmetricSecurityKey.GetSignatureFormatter(String)\n  fullName: AsymmetricSecurityKey.GetSignatureFormatter(String)\n- uid: System.Security.Cryptography.AsymmetricSignatureFormatter\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: AsymmetricSignatureFormatter\n  nameWithType: AsymmetricSignatureFormatter\n  fullName: System.Security.Cryptography.AsymmetricSignatureFormatter\n- uid: System.IdentityModel.Tokens.AsymmetricSecurityKey.HasPrivateKey\n  parent: System.IdentityModel.Tokens.AsymmetricSecurityKey\n  isExternal: false\n  name: HasPrivateKey()\n  nameWithType: AsymmetricSecurityKey.HasPrivateKey()\n  fullName: AsymmetricSecurityKey.HasPrivateKey()\n- uid: System.IdentityModel.Tokens.AsymmetricSecurityKey.#ctor*\n  parent: System.IdentityModel.Tokens.AsymmetricSecurityKey\n  isExternal: false\n  name: AsymmetricSecurityKey\n  nameWithType: AsymmetricSecurityKey.AsymmetricSecurityKey\n  fullName: AsymmetricSecurityKey.AsymmetricSecurityKey\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IdentityModel.Tokens/AsymmetricSecurityKey.xml\n- uid: System.IdentityModel.Tokens.AsymmetricSecurityKey.GetAsymmetricAlgorithm*\n  parent: System.IdentityModel.Tokens.AsymmetricSecurityKey\n  isExternal: false\n  name: GetAsymmetricAlgorithm\n  nameWithType: AsymmetricSecurityKey.GetAsymmetricAlgorithm\n  fullName: AsymmetricSecurityKey.GetAsymmetricAlgorithm\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IdentityModel.Tokens/AsymmetricSecurityKey.xml\n- uid: System.IdentityModel.Tokens.AsymmetricSecurityKey.GetHashAlgorithmForSignature*\n  parent: System.IdentityModel.Tokens.AsymmetricSecurityKey\n  isExternal: false\n  name: GetHashAlgorithmForSignature\n  nameWithType: AsymmetricSecurityKey.GetHashAlgorithmForSignature\n  fullName: AsymmetricSecurityKey.GetHashAlgorithmForSignature\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IdentityModel.Tokens/AsymmetricSecurityKey.xml\n- uid: System.IdentityModel.Tokens.AsymmetricSecurityKey.GetSignatureDeformatter*\n  parent: System.IdentityModel.Tokens.AsymmetricSecurityKey\n  isExternal: false\n  name: GetSignatureDeformatter\n  nameWithType: AsymmetricSecurityKey.GetSignatureDeformatter\n  fullName: AsymmetricSecurityKey.GetSignatureDeformatter\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IdentityModel.Tokens/AsymmetricSecurityKey.xml\n- uid: System.IdentityModel.Tokens.AsymmetricSecurityKey.GetSignatureFormatter*\n  parent: System.IdentityModel.Tokens.AsymmetricSecurityKey\n  isExternal: false\n  name: GetSignatureFormatter\n  nameWithType: AsymmetricSecurityKey.GetSignatureFormatter\n  fullName: AsymmetricSecurityKey.GetSignatureFormatter\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IdentityModel.Tokens/AsymmetricSecurityKey.xml\n- uid: System.IdentityModel.Tokens.AsymmetricSecurityKey.HasPrivateKey*\n  parent: System.IdentityModel.Tokens.AsymmetricSecurityKey\n  isExternal: false\n  name: HasPrivateKey\n  nameWithType: AsymmetricSecurityKey.HasPrivateKey\n  fullName: AsymmetricSecurityKey.HasPrivateKey\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IdentityModel.Tokens/AsymmetricSecurityKey.xml\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: Object.Equals(Object)\n  fullName: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: Object.GetHashCode()\n  fullName: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: false\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: false\n  name: ToString()\n  nameWithType: Object.ToString()\n  fullName: Object.ToString()\n- uid: System.IdentityModel.Tokens.SecurityKey.DecryptKey(System.String,System.Byte[])\n  parent: System.IdentityModel.Tokens.SecurityKey\n  isExternal: false\n  name: DecryptKey(String, Byte[])\n  nameWithType: SecurityKey.DecryptKey(String, Byte[])\n  fullName: SecurityKey.DecryptKey(String, Byte[])\n- uid: System.IdentityModel.Tokens.SecurityKey.EncryptKey(System.String,System.Byte[])\n  parent: System.IdentityModel.Tokens.SecurityKey\n  isExternal: false\n  name: EncryptKey(String, Byte[])\n  nameWithType: SecurityKey.EncryptKey(String, Byte[])\n  fullName: SecurityKey.EncryptKey(String, Byte[])\n- uid: System.IdentityModel.Tokens.SecurityKey.IsAsymmetricAlgorithm(System.String)\n  parent: System.IdentityModel.Tokens.SecurityKey\n  isExternal: false\n  name: IsAsymmetricAlgorithm(String)\n  nameWithType: SecurityKey.IsAsymmetricAlgorithm(String)\n  fullName: SecurityKey.IsAsymmetricAlgorithm(String)\n- uid: System.IdentityModel.Tokens.SecurityKey.IsSupportedAlgorithm(System.String)\n  parent: System.IdentityModel.Tokens.SecurityKey\n  isExternal: false\n  name: IsSupportedAlgorithm(String)\n  nameWithType: SecurityKey.IsSupportedAlgorithm(String)\n  fullName: SecurityKey.IsSupportedAlgorithm(String)\n- uid: System.IdentityModel.Tokens.SecurityKey.IsSymmetricAlgorithm(System.String)\n  parent: System.IdentityModel.Tokens.SecurityKey\n  isExternal: false\n  name: IsSymmetricAlgorithm(String)\n  nameWithType: SecurityKey.IsSymmetricAlgorithm(String)\n  fullName: SecurityKey.IsSymmetricAlgorithm(String)\n- uid: System.IdentityModel.Tokens.SecurityKey.KeySize\n  parent: System.IdentityModel.Tokens.SecurityKey\n  isExternal: false\n  name: KeySize\n  nameWithType: SecurityKey.KeySize\n  fullName: SecurityKey.KeySize\n"}