{"nodes":[{"content":"Enumerates the elements of a collection and executes an embedded statement for each element of the collection in parallel.","nodes":[{"pos":[0,122],"content":"Enumerates the elements of a collection and executes an embedded statement for each element of the collection in parallel.","nodes":[{"content":"Enumerates the elements of a collection and executes an embedded statement for each element of the collection in parallel.","pos":[0,122]}]}],"pos":[1050,1173],"yaml":true},{"content":"The embedded statements are scheduled together and run asynchronously, but unless the scheduled activites themselves are asynchronous (such as messaging activities, <xref:System.Activities.Statements.InvokeMethod>, or activities that derive from <xref:System.Activities.AsyncCodeActivity>), they do not run on separate threads, so each successive activity will only execute when the previously scheduled activity completes or goes idle.  If none of the child activities of this activity are asynchronous or go idle, this activity execute in the same way that a <xref:System.Activities.Statements.ForEach%601> activity does.","nodes":[{"pos":[0,623],"content":"The embedded statements are scheduled together and run asynchronously, but unless the scheduled activites themselves are asynchronous (such as messaging activities, <xref:System.Activities.Statements.InvokeMethod>, or activities that derive from <xref:System.Activities.AsyncCodeActivity>), they do not run on separate threads, so each successive activity will only execute when the previously scheduled activity completes or goes idle.  If none of the child activities of this activity are asynchronous or go idle, this activity execute in the same way that a <xref:System.Activities.Statements.ForEach%601> activity does.","nodes":[{"content":"The embedded statements are scheduled together and run asynchronously, but unless the scheduled activites themselves are asynchronous (such as messaging activities, <xref:System.Activities.Statements.InvokeMethod>, or activities that derive from <xref:System.Activities.AsyncCodeActivity>), they do not run on separate threads, so each successive activity will only execute when the previously scheduled activity completes or goes idle.  If none of the child activities of this activity are asynchronous or go idle, this activity execute in the same way that a <xref:System.Activities.Statements.ForEach%601> activity does.","pos":[0,623],"nodes":[{"content":"The embedded statements are scheduled together and run asynchronously, but unless the scheduled activites themselves are asynchronous (such as messaging activities, <ph id=\"ph1\">&lt;xref:System.Activities.Statements.InvokeMethod&gt;</ph>, or activities that derive from <ph id=\"ph2\">&lt;xref:System.Activities.AsyncCodeActivity&gt;</ph>), they do not run on separate threads, so each successive activity will only execute when the previously scheduled activity completes or goes idle.","pos":[0,436],"source":"The embedded statements are scheduled together and run asynchronously, but unless the scheduled activites themselves are asynchronous (such as messaging activities, <xref:System.Activities.Statements.InvokeMethod>, or activities that derive from <xref:System.Activities.AsyncCodeActivity>), they do not run on separate threads, so each successive activity will only execute when the previously scheduled activity completes or goes idle."},{"content":"If none of the child activities of this activity are asynchronous or go idle, this activity execute in the same way that a <ph id=\"ph1\">&lt;xref:System.Activities.Statements.ForEach%601&gt;</ph> activity does.","pos":[438,623],"source":"  If none of the child activities of this activity are asynchronous or go idle, this activity execute in the same way that a <xref:System.Activities.Statements.ForEach%601> activity does."}]}]}],"pos":[1184,1808],"yaml":true,"extradata":"MT"},{"content":"The type of the values provided in the <xref href=\"System.Activities.Statements.ParallelForEach`1.Values\"></xref> collection.","nodes":[{"pos":[0,125],"content":"The type of the values provided in the <ph id=\"ph1\">&lt;xref href=\"System.Activities.Statements.ParallelForEach`1.Values\"&gt;&lt;/xref&gt;</ph> collection.","source":"The type of the values provided in the <xref href=\"System.Activities.Statements.ParallelForEach`1.Values\"></xref> collection."}],"pos":[2440,2566],"yaml":true},{"content":"Creates a new instance of the <xref href=\"System.Activities.Statements.ParallelForEach`1\"></xref> class.","nodes":[{"pos":[0,104],"content":"Creates a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Activities.Statements.ParallelForEach`1\"&gt;&lt;/xref&gt;</ph> class.","source":"Creates a new instance of the <xref href=\"System.Activities.Statements.ParallelForEach`1\"></xref> class."}],"pos":[4962,5067],"yaml":true},{"content":"The <xref href=\"System.Activities.ActivityAction\"></xref> that is executed once for every value contained in the <xref href=\"System.Activities.Statements.ParallelForEach`1.Values\"></xref> collection.","nodes":[{"pos":[0,199],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Activities.ActivityAction\"&gt;&lt;/xref&gt;</ph> that is executed once for every value contained in the <ph id=\"ph2\">&lt;xref href=\"System.Activities.Statements.ParallelForEach`1.Values\"&gt;&lt;/xref&gt;</ph> collection.","source":"The <xref href=\"System.Activities.ActivityAction\"></xref> that is executed once for every value contained in the <xref href=\"System.Activities.Statements.ParallelForEach`1.Values\"></xref> collection."}],"pos":[6604,6804],"yaml":true},{"content":"The contained activity action.","nodes":[{"pos":[0,30],"content":"The contained activity action.","nodes":[{"content":"The contained activity action.","pos":[0,30]}]}],"pos":[7421,7452],"yaml":true},{"content":"Evaluated after each iteration completes.","nodes":[{"pos":[0,41],"content":"Evaluated after each iteration completes.","nodes":[{"content":"Evaluated after each iteration completes.","pos":[0,41]}]}],"pos":[10005,10047],"yaml":true},{"content":"If it evaluates to `true`, then the scheduled pending iterations are canceled. If this property is not set, all scheduled statements execute until completion.","nodes":[{"pos":[0,158],"content":"If it evaluates to `true`, then the scheduled pending iterations are canceled. If this property is not set, all scheduled statements execute until completion.","nodes":[{"content":"If it evaluates to <ph id=\"ph1\">`true`</ph>, then the scheduled pending iterations are canceled.","pos":[0,78],"source":"If it evaluates to `true`, then the scheduled pending iterations are canceled."},{"content":"If this property is not set, all scheduled statements execute until completion.","pos":[79,158]}]}],"pos":[10058,10217],"yaml":true,"extradata":"MT"},{"content":"The completion expression.","nodes":[{"pos":[0,26],"content":"The completion expression.","nodes":[{"content":"The completion expression.","pos":[0,26]}]}],"pos":[10400,10427],"yaml":true},{"content":"The collection of values used as parameters for each iteration of the activity contained in the <xref href=\"System.Activities.Statements.ParallelForEach`1.Body\"></xref>.","nodes":[{"pos":[0,169],"content":"The collection of values used as parameters for each iteration of the activity contained in the <ph id=\"ph1\">&lt;xref href=\"System.Activities.Statements.ParallelForEach`1.Body\"&gt;&lt;/xref&gt;</ph>.","source":"The collection of values used as parameters for each iteration of the activity contained in the <xref href=\"System.Activities.Statements.ParallelForEach`1.Body\"></xref>."}],"pos":[14746,14916],"yaml":true},{"content":"The collection of values.","nodes":[{"pos":[0,25],"content":"The collection of values.","nodes":[{"content":"The collection of values.","pos":[0,25]}]}],"pos":[15663,15689],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Activities.Statements.ParallelForEach`1\n  commentId: T:System.Activities.Statements.ParallelForEach`1\n  id: ParallelForEach`1\n  children:\n  - System.Activities.Statements.ParallelForEach`1.#ctor\n  - System.Activities.Statements.ParallelForEach`1.Body\n  - System.Activities.Statements.ParallelForEach`1.CacheMetadata(System.Activities.NativeActivityMetadata)\n  - System.Activities.Statements.ParallelForEach`1.CompletionCondition\n  - System.Activities.Statements.ParallelForEach`1.Execute(System.Activities.NativeActivityContext)\n  - System.Activities.Statements.ParallelForEach`1.OnCreateDynamicUpdateMap(System.Activities.DynamicUpdate.NativeActivityUpdateMapMetadata,System.Activities.Activity)\n  - System.Activities.Statements.ParallelForEach`1.Values\n  langs:\n  - csharp\n  name: ParallelForEach<T>\n  nameWithType: ParallelForEach<T>\n  fullName: System.Activities.Statements.ParallelForEach<T>\n  type: Class\n  assemblies:\n  - System.Activities\n  namespace: System.Activities.Statements\n  summary: Enumerates the elements of a collection and executes an embedded statement for each element of the collection in parallel.\n  remarks: The embedded statements are scheduled together and run asynchronously, but unless the scheduled activites themselves are asynchronous (such as messaging activities, <xref:System.Activities.Statements.InvokeMethod>, or activities that derive from <xref:System.Activities.AsyncCodeActivity>), they do not run on separate threads, so each successive activity will only execute when the previously scheduled activity completes or goes idle.  If none of the child activities of this activity are asynchronous or go idle, this activity execute in the same way that a <xref:System.Activities.Statements.ForEach%601> activity does.\n  example:\n  - \"The following code sample demonstrates creating a <xref:System.Activities.Statements.ParallelForEach%601> activity. This example is from the [Corporate Purchase Process](~/docs/framework/windows-workflow-foundation/samples/corporate-purchase-process.md) sample.  \\n  \\n [!code-csharp[wfs_PurchaseProcess#1](~/samples/snippets/csharp/VS_Snippets_CFX/wfs_purchaseprocess/cs/purchaseprocessworkflow.cs#1)]\"\n  syntax:\n    content: >-\n      [System.Windows.Markup.ContentProperty(\"Body\")]\n\n      public sealed class ParallelForEach<T> : System.Activities.NativeActivity\n    typeParameters:\n    - id: T\n      description: The type of the values provided in the <xref href=\"System.Activities.Statements.ParallelForEach`1.Values\"></xref> collection.\n  inheritance:\n  - System.Object\n  - System.Activities.Activity\n  - System.Activities.NativeActivity\n  implements: []\n  inheritedMembers:\n  - System.Activities.Activity.CacheId\n  - System.Activities.Activity.Constraints\n  - System.Activities.Activity.DisplayName\n  - System.Activities.Activity.Id\n  - System.Activities.Activity.ShouldSerializeDisplayName\n  - System.Activities.Activity.ToString\n  - System.Activities.NativeActivity.Abort(System.Activities.NativeActivityAbortContext)\n  - System.Activities.NativeActivity.CacheMetadata(System.Activities.ActivityMetadata)\n  - System.Activities.NativeActivity.Cancel(System.Activities.NativeActivityContext)\n  - System.Activities.NativeActivity.CanInduceIdle\n  - System.Activities.NativeActivity.Implementation\n  - System.Activities.NativeActivity.ImplementationVersion\n  - System.Activities.NativeActivity.OnCreateDynamicUpdateMap(System.Activities.DynamicUpdate.UpdateMapMetadata,System.Activities.Activity)\n  - System.Activities.NativeActivity.UpdateInstance(System.Activities.DynamicUpdate.NativeActivityUpdateContext)\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  attributes:\n  - type: System.Windows.Markup.ContentPropertyAttribute\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Activities.Statements/ParallelForEach`1.xml\n  ms.technology:\n  - dotnet-standard\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.Activities.Statements.ParallelForEach`1.#ctor\n  commentId: M:System.Activities.Statements.ParallelForEach`1.#ctor\n  id: '#ctor'\n  parent: System.Activities.Statements.ParallelForEach`1\n  langs:\n  - csharp\n  name: ParallelForEach<T>()\n  nameWithType: ParallelForEach<T>.ParallelForEach<T>()\n  fullName: ParallelForEach<T>.ParallelForEach<T>()\n  type: Constructor\n  assemblies:\n  - System.Activities\n  namespace: System.Activities.Statements\n  summary: Creates a new instance of the <xref href=\"System.Activities.Statements.ParallelForEach`1\"></xref> class.\n  remarks: ''\n  example:\n  - \"The following code sample demonstrates creating a <xref:System.Activities.Statements.ParallelForEach%601> activity. This example is from the [Corporate Purchase Process](~/docs/framework/windows-workflow-foundation/samples/corporate-purchase-process.md) sample.  \\n  \\n [!code-csharp[wfs_PurchaseProcess#1](~/samples/snippets/csharp/VS_Snippets_CFX/wfs_purchaseprocess/cs/purchaseprocessworkflow.cs#1)]\"\n  syntax:\n    content: public ParallelForEach ();\n    parameters: []\n  overload: System.Activities.Statements.ParallelForEach`1.#ctor*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Activities.Statements/ParallelForEach`1.xml\n  ms.technology:\n  - dotnet-standard\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.Activities.Statements.ParallelForEach`1.Body\n  commentId: P:System.Activities.Statements.ParallelForEach`1.Body\n  id: Body\n  parent: System.Activities.Statements.ParallelForEach`1\n  langs:\n  - csharp\n  name: Body\n  nameWithType: ParallelForEach<T>.Body\n  fullName: ParallelForEach<T>.Body\n  type: Property\n  assemblies:\n  - System.Activities\n  namespace: System.Activities.Statements\n  summary: The <xref href=\"System.Activities.ActivityAction\"></xref> that is executed once for every value contained in the <xref href=\"System.Activities.Statements.ParallelForEach`1.Values\"></xref> collection.\n  remarks: ''\n  example:\n  - \"The following code sample demonstrates setting the Body property of a <xref:System.Activities.Statements.ParallelForEach%601> activity. This example is from the [Corporate Purchase Process](~/docs/framework/windows-workflow-foundation/samples/corporate-purchase-process.md) sample.  \\n  \\n [!code-csharp[wfs_PurchaseProcess#1](~/samples/snippets/csharp/VS_Snippets_CFX/wfs_purchaseprocess/cs/purchaseprocessworkflow.cs#1)]\"\n  syntax:\n    content: public System.Activities.ActivityAction<T> Body { get; set; }\n    return:\n      type: System.Activities.ActivityAction`1\n      description: The contained activity action.\n  overload: System.Activities.Statements.ParallelForEach`1.Body*\n  exceptions: []\n  attributes: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Activities.Statements/ParallelForEach`1.xml\n  ms.technology:\n  - dotnet-standard\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.Activities.Statements.ParallelForEach`1.CacheMetadata(System.Activities.NativeActivityMetadata)\n  commentId: M:System.Activities.Statements.ParallelForEach`1.CacheMetadata(System.Activities.NativeActivityMetadata)\n  id: CacheMetadata(System.Activities.NativeActivityMetadata)\n  parent: System.Activities.Statements.ParallelForEach`1\n  langs:\n  - csharp\n  name: CacheMetadata(NativeActivityMetadata)\n  nameWithType: ParallelForEach<T>.CacheMetadata(NativeActivityMetadata)\n  fullName: ParallelForEach<T>.CacheMetadata(NativeActivityMetadata)\n  type: Method\n  assemblies:\n  - System.Activities\n  namespace: System.Activities.Statements\n  syntax:\n    content: protected override void CacheMetadata (System.Activities.NativeActivityMetadata metadata);\n    parameters:\n    - id: metadata\n      type: System.Activities.NativeActivityMetadata\n      description: ''\n  overload: System.Activities.Statements.ParallelForEach`1.CacheMetadata*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Activities.Statements/ParallelForEach`1.xml\n- uid: System.Activities.Statements.ParallelForEach`1.CompletionCondition\n  commentId: P:System.Activities.Statements.ParallelForEach`1.CompletionCondition\n  id: CompletionCondition\n  parent: System.Activities.Statements.ParallelForEach`1\n  langs:\n  - csharp\n  name: CompletionCondition\n  nameWithType: ParallelForEach<T>.CompletionCondition\n  fullName: ParallelForEach<T>.CompletionCondition\n  type: Property\n  assemblies:\n  - System.Activities\n  namespace: System.Activities.Statements\n  summary: Evaluated after each iteration completes.\n  remarks: If it evaluates to `true`, then the scheduled pending iterations are canceled. If this property is not set, all scheduled statements execute until completion.\n  syntax:\n    content: public System.Activities.Activity<bool> CompletionCondition { get; set; }\n    return:\n      type: System.Activities.Activity{System.Boolean}\n      description: The completion expression.\n  overload: System.Activities.Statements.ParallelForEach`1.CompletionCondition*\n  exceptions: []\n  attributes: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Activities.Statements/ParallelForEach`1.xml\n  ms.technology:\n  - dotnet-standard\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.Activities.Statements.ParallelForEach`1.Execute(System.Activities.NativeActivityContext)\n  commentId: M:System.Activities.Statements.ParallelForEach`1.Execute(System.Activities.NativeActivityContext)\n  id: Execute(System.Activities.NativeActivityContext)\n  parent: System.Activities.Statements.ParallelForEach`1\n  langs:\n  - csharp\n  name: Execute(NativeActivityContext)\n  nameWithType: ParallelForEach<T>.Execute(NativeActivityContext)\n  fullName: ParallelForEach<T>.Execute(NativeActivityContext)\n  type: Method\n  assemblies:\n  - System.Activities\n  namespace: System.Activities.Statements\n  syntax:\n    content: protected override void Execute (System.Activities.NativeActivityContext context);\n    parameters:\n    - id: context\n      type: System.Activities.NativeActivityContext\n      description: ''\n  overload: System.Activities.Statements.ParallelForEach`1.Execute*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Activities.Statements/ParallelForEach`1.xml\n- uid: System.Activities.Statements.ParallelForEach`1.OnCreateDynamicUpdateMap(System.Activities.DynamicUpdate.NativeActivityUpdateMapMetadata,System.Activities.Activity)\n  commentId: M:System.Activities.Statements.ParallelForEach`1.OnCreateDynamicUpdateMap(System.Activities.DynamicUpdate.NativeActivityUpdateMapMetadata,System.Activities.Activity)\n  id: OnCreateDynamicUpdateMap(System.Activities.DynamicUpdate.NativeActivityUpdateMapMetadata,System.Activities.Activity)\n  parent: System.Activities.Statements.ParallelForEach`1\n  langs:\n  - csharp\n  name: OnCreateDynamicUpdateMap(NativeActivityUpdateMapMetadata, Activity)\n  nameWithType: ParallelForEach<T>.OnCreateDynamicUpdateMap(NativeActivityUpdateMapMetadata, Activity)\n  fullName: ParallelForEach<T>.OnCreateDynamicUpdateMap(NativeActivityUpdateMapMetadata, Activity)\n  type: Method\n  assemblies:\n  - System.Activities\n  namespace: System.Activities.Statements\n  syntax:\n    content: protected override void OnCreateDynamicUpdateMap (System.Activities.DynamicUpdate.NativeActivityUpdateMapMetadata metadata, System.Activities.Activity originalActivity);\n    parameters:\n    - id: metadata\n      type: System.Activities.DynamicUpdate.NativeActivityUpdateMapMetadata\n      description: ''\n    - id: originalActivity\n      type: System.Activities.Activity\n      description: ''\n  overload: System.Activities.Statements.ParallelForEach`1.OnCreateDynamicUpdateMap*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Activities.Statements/ParallelForEach`1.xml\n- uid: System.Activities.Statements.ParallelForEach`1.Values\n  commentId: P:System.Activities.Statements.ParallelForEach`1.Values\n  id: Values\n  parent: System.Activities.Statements.ParallelForEach`1\n  langs:\n  - csharp\n  name: Values\n  nameWithType: ParallelForEach<T>.Values\n  fullName: ParallelForEach<T>.Values\n  type: Property\n  assemblies:\n  - System.Activities\n  namespace: System.Activities.Statements\n  summary: The collection of values used as parameters for each iteration of the activity contained in the <xref href=\"System.Activities.Statements.ParallelForEach`1.Body\"></xref>.\n  remarks: ''\n  example:\n  - \"The following code sample demonstrates setting the Values property of a <xref:System.Activities.Statements.ParallelForEach%601> activity. This example is from the [Corporate Purchase Process](~/docs/framework/windows-workflow-foundation/samples/corporate-purchase-process.md) sample.  \\n  \\n [!code-csharp[wfs_PurchaseProcess#1](~/samples/snippets/csharp/VS_Snippets_CFX/wfs_purchaseprocess/cs/purchaseprocessworkflow.cs#1)]\"\n  syntax:\n    content: >-\n      [System.Activities.RequiredArgument]\n\n      public System.Activities.InArgument<System.Collections.Generic.IEnumerable<T>> Values { get; set; }\n    return:\n      type: System.Activities.InArgument{System.Collections.Generic.IEnumerable{T}}\n      description: The collection of values.\n  overload: System.Activities.Statements.ParallelForEach`1.Values*\n  exceptions: []\n  attributes:\n  - type: System.Activities.RequiredArgumentAttribute\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Activities.Statements/ParallelForEach`1.xml\n  ms.technology:\n  - dotnet-standard\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\nreferences:\n- uid: System.Activities.NativeActivity\n  parent: System.Activities\n  isExternal: false\n  name: NativeActivity\n  nameWithType: NativeActivity\n  fullName: System.Activities.NativeActivity\n- uid: System.Activities.Statements.ParallelForEach`1.#ctor\n  parent: System.Activities.Statements.ParallelForEach`1\n  isExternal: false\n  name: ParallelForEach<T>()\n  nameWithType: ParallelForEach<T>.ParallelForEach<T>()\n  fullName: ParallelForEach<T>.ParallelForEach<T>()\n- uid: System.Activities.Statements.ParallelForEach`1.Body\n  parent: System.Activities.Statements.ParallelForEach`1\n  isExternal: false\n  name: Body\n  nameWithType: ParallelForEach<T>.Body\n  fullName: ParallelForEach<T>.Body\n- uid: System.Activities.ActivityAction`1\n  parent: System.Activities\n  isExternal: false\n  name: ActivityAction<T>\n  nameWithType: ActivityAction<T>\n  fullName: System.Activities.ActivityAction<T>\n- uid: System.Activities.Statements.ParallelForEach`1.CacheMetadata(System.Activities.NativeActivityMetadata)\n  parent: System.Activities.Statements.ParallelForEach`1\n  isExternal: false\n  name: CacheMetadata(NativeActivityMetadata)\n  nameWithType: ParallelForEach<T>.CacheMetadata(NativeActivityMetadata)\n  fullName: ParallelForEach<T>.CacheMetadata(NativeActivityMetadata)\n- uid: System.Activities.NativeActivityMetadata\n  parent: System.Activities\n  isExternal: false\n  name: NativeActivityMetadata\n  nameWithType: NativeActivityMetadata\n  fullName: System.Activities.NativeActivityMetadata\n- uid: System.Activities.Statements.ParallelForEach`1.CompletionCondition\n  parent: System.Activities.Statements.ParallelForEach`1\n  isExternal: false\n  name: CompletionCondition\n  nameWithType: ParallelForEach<T>.CompletionCondition\n  fullName: ParallelForEach<T>.CompletionCondition\n- uid: System.Activities.Activity`1\n  name: Activity<TResult>\n  nameWithType: Activity<TResult>\n  fullName: System.Activities.Activity<TResult>\n- uid: System.Boolean\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Activities.Activity{System.Boolean}\n  parent: System.Activities\n  isExternal: false\n  name: Activity<Boolean>\n  nameWithType: Activity<Boolean>\n  fullName: System.Activities.Activity<System.Boolean>\n  spec.csharp:\n  - uid: System.Activities.Activity`1\n    name: Activity\n    nameWithType: Activity\n    fullName: System.Activities.Activity\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Boolean\n    name: Boolean\n    nameWithType: Boolean\n    fullName: System.Boolean\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Activities.Statements.ParallelForEach`1.Execute(System.Activities.NativeActivityContext)\n  parent: System.Activities.Statements.ParallelForEach`1\n  isExternal: false\n  name: Execute(NativeActivityContext)\n  nameWithType: ParallelForEach<T>.Execute(NativeActivityContext)\n  fullName: ParallelForEach<T>.Execute(NativeActivityContext)\n- uid: System.Activities.NativeActivityContext\n  parent: System.Activities\n  isExternal: false\n  name: NativeActivityContext\n  nameWithType: NativeActivityContext\n  fullName: System.Activities.NativeActivityContext\n- uid: System.Activities.Statements.ParallelForEach`1.OnCreateDynamicUpdateMap(System.Activities.DynamicUpdate.NativeActivityUpdateMapMetadata,System.Activities.Activity)\n  parent: System.Activities.Statements.ParallelForEach`1\n  isExternal: false\n  name: OnCreateDynamicUpdateMap(NativeActivityUpdateMapMetadata, Activity)\n  nameWithType: ParallelForEach<T>.OnCreateDynamicUpdateMap(NativeActivityUpdateMapMetadata, Activity)\n  fullName: ParallelForEach<T>.OnCreateDynamicUpdateMap(NativeActivityUpdateMapMetadata, Activity)\n- uid: System.Activities.DynamicUpdate.NativeActivityUpdateMapMetadata\n  parent: System.Activities.DynamicUpdate\n  isExternal: false\n  name: NativeActivityUpdateMapMetadata\n  nameWithType: NativeActivityUpdateMapMetadata\n  fullName: System.Activities.DynamicUpdate.NativeActivityUpdateMapMetadata\n- uid: System.Activities.Activity\n  parent: System.Activities\n  isExternal: false\n  name: Activity\n  nameWithType: Activity\n  fullName: System.Activities.Activity\n- uid: System.Activities.Statements.ParallelForEach`1.Values\n  parent: System.Activities.Statements.ParallelForEach`1\n  isExternal: false\n  name: Values\n  nameWithType: ParallelForEach<T>.Values\n  fullName: ParallelForEach<T>.Values\n- uid: System.Activities.InArgument`1\n  name: InArgument<T>\n  nameWithType: InArgument<T>\n  fullName: System.Activities.InArgument<T>\n- uid: System.Collections.Generic.IEnumerable`1\n  name: IEnumerable<T>\n  nameWithType: IEnumerable<T>\n  fullName: System.Collections.Generic.IEnumerable<T>\n- uid: T\n  name: T\n  nameWithType: T\n  fullName: T\n- uid: System.Activities.InArgument{System.Collections.Generic.IEnumerable{T}}\n  parent: System.Activities\n  isExternal: false\n  name: InArgument<IEnumerable<T>>\n  nameWithType: InArgument<IEnumerable<T>>\n  fullName: System.Activities.InArgument<System.Collections.Generic.IEnumerable<T>>\n  spec.csharp:\n  - uid: System.Activities.InArgument`1\n    name: InArgument\n    nameWithType: InArgument\n    fullName: System.Activities.InArgument\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    nameWithType: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: T\n    name: T\n    nameWithType: T\n    fullName: T\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Activities.Statements.ParallelForEach`1.#ctor*\n  parent: System.Activities.Statements.ParallelForEach`1\n  isExternal: false\n  name: ParallelForEach<T>\n  nameWithType: ParallelForEach<T>.ParallelForEach<T>\n  fullName: ParallelForEach<T>.ParallelForEach<T>\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Activities.Statements/ParallelForEach`1.xml\n- uid: System.Activities.Statements.ParallelForEach`1.Body*\n  parent: System.Activities.Statements.ParallelForEach`1\n  isExternal: false\n  name: Body\n  nameWithType: ParallelForEach<T>.Body\n  fullName: ParallelForEach<T>.Body\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Activities.Statements/ParallelForEach`1.xml\n- uid: System.Activities.Statements.ParallelForEach`1.CacheMetadata*\n  parent: System.Activities.Statements.ParallelForEach`1\n  isExternal: false\n  name: CacheMetadata\n  nameWithType: ParallelForEach<T>.CacheMetadata\n  fullName: ParallelForEach<T>.CacheMetadata\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Activities.Statements/ParallelForEach`1.xml\n- uid: System.Activities.Statements.ParallelForEach`1.CompletionCondition*\n  parent: System.Activities.Statements.ParallelForEach`1\n  isExternal: false\n  name: CompletionCondition\n  nameWithType: ParallelForEach<T>.CompletionCondition\n  fullName: ParallelForEach<T>.CompletionCondition\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Activities.Statements/ParallelForEach`1.xml\n- uid: System.Activities.Statements.ParallelForEach`1.Execute*\n  parent: System.Activities.Statements.ParallelForEach`1\n  isExternal: false\n  name: Execute\n  nameWithType: ParallelForEach<T>.Execute\n  fullName: ParallelForEach<T>.Execute\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Activities.Statements/ParallelForEach`1.xml\n- uid: System.Activities.Statements.ParallelForEach`1.OnCreateDynamicUpdateMap*\n  parent: System.Activities.Statements.ParallelForEach`1\n  isExternal: false\n  name: OnCreateDynamicUpdateMap\n  nameWithType: ParallelForEach<T>.OnCreateDynamicUpdateMap\n  fullName: ParallelForEach<T>.OnCreateDynamicUpdateMap\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Activities.Statements/ParallelForEach`1.xml\n- uid: System.Activities.Statements.ParallelForEach`1.Values*\n  parent: System.Activities.Statements.ParallelForEach`1\n  isExternal: false\n  name: Values\n  nameWithType: ParallelForEach<T>.Values\n  fullName: ParallelForEach<T>.Values\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Activities.Statements/ParallelForEach`1.xml\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: Object.Equals(Object)\n  fullName: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: Object.GetHashCode()\n  fullName: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: false\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n- uid: System.Activities.Activity.ToString\n  parent: System.Activities.Activity\n  isExternal: false\n  name: ToString()\n  nameWithType: Activity.ToString()\n  fullName: Activity.ToString()\n- uid: System.Activities.Activity.CacheId\n  parent: System.Activities.Activity\n  isExternal: false\n  name: CacheId\n  nameWithType: Activity.CacheId\n  fullName: Activity.CacheId\n- uid: System.Activities.NativeActivity.CacheMetadata(System.Activities.ActivityMetadata)\n  parent: System.Activities.NativeActivity\n  isExternal: false\n  name: CacheMetadata(ActivityMetadata)\n  nameWithType: NativeActivity.CacheMetadata(ActivityMetadata)\n  fullName: NativeActivity.CacheMetadata(ActivityMetadata)\n- uid: System.Activities.Activity.Constraints\n  parent: System.Activities.Activity\n  isExternal: false\n  name: Constraints\n  nameWithType: Activity.Constraints\n  fullName: Activity.Constraints\n- uid: System.Activities.Activity.DisplayName\n  parent: System.Activities.Activity\n  isExternal: false\n  name: DisplayName\n  nameWithType: Activity.DisplayName\n  fullName: Activity.DisplayName\n- uid: System.Activities.Activity.Id\n  parent: System.Activities.Activity\n  isExternal: false\n  name: Id\n  nameWithType: Activity.Id\n  fullName: Activity.Id\n- uid: System.Activities.NativeActivity.Implementation\n  parent: System.Activities.NativeActivity\n  isExternal: false\n  name: Implementation\n  nameWithType: NativeActivity.Implementation\n  fullName: NativeActivity.Implementation\n- uid: System.Activities.NativeActivity.ImplementationVersion\n  parent: System.Activities.NativeActivity\n  isExternal: false\n  name: ImplementationVersion\n  nameWithType: NativeActivity.ImplementationVersion\n  fullName: NativeActivity.ImplementationVersion\n- uid: System.Activities.NativeActivity.OnCreateDynamicUpdateMap(System.Activities.DynamicUpdate.UpdateMapMetadata,System.Activities.Activity)\n  parent: System.Activities.NativeActivity\n  isExternal: false\n  name: OnCreateDynamicUpdateMap(UpdateMapMetadata, Activity)\n  nameWithType: NativeActivity.OnCreateDynamicUpdateMap(UpdateMapMetadata, Activity)\n  fullName: NativeActivity.OnCreateDynamicUpdateMap(UpdateMapMetadata, Activity)\n- uid: System.Activities.Activity.ShouldSerializeDisplayName\n  parent: System.Activities.Activity\n  isExternal: false\n  name: ShouldSerializeDisplayName()\n  nameWithType: Activity.ShouldSerializeDisplayName()\n  fullName: Activity.ShouldSerializeDisplayName()\n- uid: System.Activities.NativeActivity.Abort(System.Activities.NativeActivityAbortContext)\n  parent: System.Activities.NativeActivity\n  isExternal: false\n  name: Abort(NativeActivityAbortContext)\n  nameWithType: NativeActivity.Abort(NativeActivityAbortContext)\n  fullName: NativeActivity.Abort(NativeActivityAbortContext)\n- uid: System.Activities.NativeActivity.Cancel(System.Activities.NativeActivityContext)\n  parent: System.Activities.NativeActivity\n  isExternal: false\n  name: Cancel(NativeActivityContext)\n  nameWithType: NativeActivity.Cancel(NativeActivityContext)\n  fullName: NativeActivity.Cancel(NativeActivityContext)\n- uid: System.Activities.NativeActivity.CanInduceIdle\n  parent: System.Activities.NativeActivity\n  isExternal: false\n  name: CanInduceIdle\n  nameWithType: NativeActivity.CanInduceIdle\n  fullName: NativeActivity.CanInduceIdle\n- uid: System.Activities.NativeActivity.UpdateInstance(System.Activities.DynamicUpdate.NativeActivityUpdateContext)\n  parent: System.Activities.NativeActivity\n  isExternal: false\n  name: UpdateInstance(NativeActivityUpdateContext)\n  nameWithType: NativeActivity.UpdateInstance(NativeActivityUpdateContext)\n  fullName: NativeActivity.UpdateInstance(NativeActivityUpdateContext)\n"}