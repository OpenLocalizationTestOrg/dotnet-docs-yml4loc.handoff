{"nodes":[{"content":"Directs tracing or debugging output of end-to-end events to an XML-encoded, schema-compliant log file.","nodes":[{"pos":[0,102],"content":"Directs tracing or debugging output of end-to-end events to an XML-encoded, schema-compliant log file.","nodes":[{"content":"Directs tracing or debugging output of end-to-end events to an XML-encoded, schema-compliant log file.","pos":[0,102]}]}],"pos":[2760,2863],"yaml":true},{"content":"The <xref:System.Diagnostics.EventSchemaTraceListener> class provides tracing of end-to-end schema-compliant events. You can use end-to-end tracing for a system that has heterogeneous components that cross thread, <xref:System.AppDomain>, process, and computer boundaries. A standardized event schema (see [Event Representation for Event Consumers](http://go.microsoft.com/fwlink/?LinkId=78955)) has been defined to enable tracing across these boundaries. The schema enables the addition of custom, schema-compliant elements. You can use the [Service Trace Viewer Tool (SvcTraceViewer.exe)](http://go.microsoft.com/fwlink/p/?LinkId=240129) to display the event data.  \n  \n <xref:System.Diagnostics.EventSchemaTraceListener> is tuned for logging performance with implicit support for lock-free tracing.  \n  \n The <xref:System.Diagnostics.EventSchemaTraceListener> class converts tracing and debugging information into an XML-encoded text stream. The description of the XML output is shown in the tables later in this section.  \n  \n You can enable or disable an <xref:System.Diagnostics.EventSchemaTraceListener> object through the application configuration file, and then use the configured <xref:System.Diagnostics.EventSchemaTraceListener> object in your application. Alternately, you can create an <xref:System.Diagnostics.EventSchemaTraceListener> object in your code. We recommend that you enable trace listeners through the application configuration file. For information about the use of configuration files for tracing and debugging, see [Trace and Debug Settings Schema](http://msdn.microsoft.com/library/277ca5f6-e1c4-41b6-a47f-3a67ce5b94ac).  \n  \n To configure an <xref:System.Diagnostics.EventSchemaTraceListener> object, modify the configuration file that corresponds to the name of your application. In this file, you can add, remove, or set the properties for a listener. The configuration file should be formatted as follows:  \n  \n```  \n<configuration>  \n    <system.diagnostics>  \n        <sources>  \n            <source name=\"TestSource\" >  \n                <listeners>  \n                    <!--Remove the default trace listener for better performance.-->  \n                    <remove name=\"Default\"/>  \n                    <!--Note: Removing the default trace listener prevents the dialog box   \n                    from being displayed for Debug.Fail or Debug.Assert commands that are   \n                    executed in user mode.-->  \n                    <add name=\"eventListener\"   \n                      type=\"System.Diagnostics.EventSchemaTraceListener,  system.core\"  \n                      initializeData=\"TraceOutput.xml\"   \n                      traceOutputOptions=\"ProcessId, DateTime, Timestamp\"   \n                      bufferSize=\"65536\"  \n                      maximumFileSize=\"20480000\"  \n                      logRetentionOption=\"LimitedCircularFiles\"  \n                      maximumNumberOfFiles=\"2\"/>  \n                </listeners>  \n            </source>  \n        </sources>  \n    </system.diagnostics>  \n```  \n  \n The <xref:System.Diagnostics.EventSchemaTraceListener> class inherits the <xref:System.Diagnostics.TraceListener.Filter%2A> property from the base class <xref:System.Diagnostics.TraceListener>. The <xref:System.Diagnostics.TraceListener.Filter%2A> property allows for an additional level of trace output filtering at the listener. If a filter is present, the `Trace` methods of the trace listener call the <xref:System.Diagnostics.TraceFilter.ShouldTrace%2A> method of the filter to determine whether to emit the trace.  \n  \n If an attempt is made to write to a file that is being used or is unavailable, a GUID suffix is automatically added to the file name.  \n  \n> [!NOTE]\n>  Listener methods are intended to be called by methods of the <xref:System.Diagnostics.Debug>, <xref:System.Diagnostics.Trace>, and <xref:System.Diagnostics.TraceSource> classes. Do not call the listener methods directly from application code. The <xref:System.Diagnostics.EventSchemaTraceListener> listener is primarily intended for use by the <xref:System.Diagnostics.TraceSource> class.  \n  \n The following table describes the elements and attributes of the XML output.  \n  \n|Element|Attributes|Output|Notes|  \n|-------------|----------------|------------|-----------|  \n|`CallStack`|None|Depends on the presence of the <xref:System.Diagnostics.TraceOptions.Callstack> flag in the <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> property.|Special characters such as > or < are replaced with escape sequences. See the escaped character translation table in the next table.|  \n|`Computer`|None|Always present.|This element represents the value of the <xref:System.Environment.MachineName%2A> property.|  \n|`Correlation`|`ActivityID`|Always present.|If `ActivityID` is not specified, the default is an empty GUID.|  \n||`RelatedActivityID`|Depends on the presence of the `relatedActivityId` parameter in the `Trace` method call.|The `RelatedActivityID` attribute corresponds to the `relatedActivityId` parameter of the <xref:System.Diagnostics.EventSchemaTraceListener.TraceTransfer%2A> method.|  \n|`Data`|None|Always present.|This element represents parameter input (`data`). One element is provided for each data object. In the case of event logs, the `Data` element contains escaped XML data. In the case of data logs, the `Data` element contains unescaped data. The data log output uses the `ToString` method of the passed-in data objects.|  \n|`Event`|None|Always present.|This element contains a trace event.|  \n|`EventData`|None|Present for event logs.|This element represents parameter input (`message`, `args`). It contains `Data` elements with escaped XML data that is created by calling the <xref:System.Diagnostics.EventSchemaTraceListener.TraceEvent%2A> method.|  \n|`EventID`|None|Always present.|This element represents parameter input (`id`).|  \n|`Execution`|`ProcessID`|Depends on the presence of the <xref:System.Diagnostics.TraceOptions.ProcessId> flag in the <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> property.|The `ProcessID` attribute is specified in the <xref:System.Diagnostics.TraceEventCache>. On the Microsoft Windows 98 and Windows Millenium Edition operating systems, if `ProcessID` is larger than 2,147,483,647, it is a positive representation of a negative number and should be converted to obtain the correct process identifier.|  \n||`ThreadID`|Present when `ProcessID` is present.|The `ThreadID` attribute is specified in the <xref:System.Diagnostics.TraceEventCache>.|  \n|`Level`|None|Always present.|This element represents parameter input (the numeric value of `eventType`). Parameter values that are larger than 255 are output as a level 8, which represents <xref:System.Diagnostics.TraceEventType?displayProperty=fullName>. Trace event types <xref:System.Diagnostics.TraceEventType.Critical>, <xref:System.Diagnostics.TraceEventType.Error>, <xref:System.Diagnostics.TraceEventType.Warning>, <xref:System.Diagnostics.TraceEventType.Information>, and <xref:System.Diagnostics.TraceEventType.Verbose> are output as levels 1, 2, 4, 8, and 10, respectively.|  \n|`LogicalOperationStack`|None|Depends on the presence of the <xref:System.Diagnostics.TraceOptions.LogicalOperationStack> flag in the <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> property.|Only one logical operation can exist. Therefore, the values are written as `LogicalOperation` nodes under the `LogicalOperationStack` element.|  \n|`OpCode`|None|Present when `Level` is greater than 255.|This element represents Trace event types that have numeric values greater than 255. <xref:System.Diagnostics.TraceEventType.Start>, <xref:System.Diagnostics.TraceEventType.Stop>, <xref:System.Diagnostics.TraceEventType.Suspend>, <xref:System.Diagnostics.TraceEventType.Resume>, or <xref:System.Diagnostics.TraceEventType.Transfer> are output as levels 1, 2, 4, 8, and 10, respectively.|  \n|`Provider`|`GUID`|Always present.|Always empty.|  \n|`RenderingInfo`|`Culture`|Always present.|This attribute represents a resource string for the event type. It is always \"en-EN\\\\\".|  \n|`System`|`Name`|Always present.||  \n|`TimeCreated`|`SystemTime`|Depends on the presence of the <xref:System.Diagnostics.TraceOptions.DateTime> flag in the <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> property.|The time is the value of the <xref:System.Diagnostics.TraceEventCache.DateTime%2A?displayProperty=fullName> property. This property is expressed as Coordinated Universal Time|  \n|`TimeStamp`|None|Depends on the presence of the <xref:System.Diagnostics.TraceOptions.Timestamp> flag in the <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> property.|This element is specified in the <xref:System.Diagnostics.TraceEventCache>.|  \n|`UserData`|None|Present for data logs.|This element contains `Data` elements with unescaped, user-provided data from a <xref:System.Diagnostics.EventSchemaTraceListener.TraceData%2A> method.|  \n  \n The following table shows the characters that are escaped in the XML output. Escaping occurs in all the elements and attributes except for the `UserData` element, which contains user-provided, unescaped data. The `UserData` element is a result of calls to the <xref:System.Diagnostics.EventSchemaTraceListener.TraceData%2A> method.  \n  \n|Escaped character|Value|  \n|-----------------------|-----------|  \n|&|&amp;|  \n|\\<|&lt;|  \n|>|&gt;|  \n|\"|&quot;|  \n|\\|&apos;|  \n|0xD|&\\#xD;|  \n|0xA|&\\#xA;|","nodes":[{"pos":[0,666],"content":"The <xref:System.Diagnostics.EventSchemaTraceListener> class provides tracing of end-to-end schema-compliant events. You can use end-to-end tracing for a system that has heterogeneous components that cross thread, <xref:System.AppDomain>, process, and computer boundaries. A standardized event schema (see [Event Representation for Event Consumers](http://go.microsoft.com/fwlink/?LinkId=78955)) has been defined to enable tracing across these boundaries. The schema enables the addition of custom, schema-compliant elements. You can use the [Service Trace Viewer Tool (SvcTraceViewer.exe)](http://go.microsoft.com/fwlink/p/?LinkId=240129) to display the event data.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Diagnostics.EventSchemaTraceListener&gt;</ph> class provides tracing of end-to-end schema-compliant events.","pos":[0,116],"source":"The <xref:System.Diagnostics.EventSchemaTraceListener> class provides tracing of end-to-end schema-compliant events."},{"content":"You can use end-to-end tracing for a system that has heterogeneous components that cross thread, <ph id=\"ph1\">&lt;xref:System.AppDomain&gt;</ph>, process, and computer boundaries.","pos":[117,272],"source":" You can use end-to-end tracing for a system that has heterogeneous components that cross thread, <xref:System.AppDomain>, process, and computer boundaries."},{"content":"A standardized event schema (see <bpt id=\"p1\">[</bpt>Event Representation for Event Consumers<ept id=\"p1\">](http://go.microsoft.com/fwlink/?LinkId=78955)</ept>) has been defined to enable tracing across these boundaries.","pos":[273,455],"source":" A standardized event schema (see [Event Representation for Event Consumers](http://go.microsoft.com/fwlink/?LinkId=78955)) has been defined to enable tracing across these boundaries."},{"content":"The schema enables the addition of custom, schema-compliant elements.","pos":[456,525]},{"content":"You can use the <bpt id=\"p1\">[</bpt>Service Trace Viewer Tool (SvcTraceViewer.exe)<ept id=\"p1\">](http://go.microsoft.com/fwlink/p/?LinkId=240129)</ept> to display the event data.","pos":[526,666],"source":" You can use the [Service Trace Viewer Tool (SvcTraceViewer.exe)](http://go.microsoft.com/fwlink/p/?LinkId=240129) to display the event data."}]},{"pos":[673,801],"content":"<xref:System.Diagnostics.EventSchemaTraceListener> is tuned for logging performance with implicit support for lock-free tracing.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Diagnostics.EventSchemaTraceListener&gt;</ph> is tuned for logging performance with implicit support for lock-free tracing.","pos":[0,128],"source":"<xref:System.Diagnostics.EventSchemaTraceListener> is tuned for logging performance with implicit support for lock-free tracing."}]},{"pos":[808,1024],"content":"The <xref:System.Diagnostics.EventSchemaTraceListener> class converts tracing and debugging information into an XML-encoded text stream. The description of the XML output is shown in the tables later in this section.","nodes":[{"content":"The <xref:System.Diagnostics.EventSchemaTraceListener> class converts tracing and debugging information into an XML-encoded text stream. The description of the XML output is shown in the tables later in this section.","pos":[0,216],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Diagnostics.EventSchemaTraceListener&gt;</ph> class converts tracing and debugging information into an XML-encoded text stream.","pos":[0,136],"source":"The <xref:System.Diagnostics.EventSchemaTraceListener> class converts tracing and debugging information into an XML-encoded text stream."},{"content":"The description of the XML output is shown in the tables later in this section.","pos":[137,216]}]}]},{"pos":[1031,1651],"content":"You can enable or disable an <xref:System.Diagnostics.EventSchemaTraceListener> object through the application configuration file, and then use the configured <xref:System.Diagnostics.EventSchemaTraceListener> object in your application. Alternately, you can create an <xref:System.Diagnostics.EventSchemaTraceListener> object in your code. We recommend that you enable trace listeners through the application configuration file. For information about the use of configuration files for tracing and debugging, see [Trace and Debug Settings Schema](http://msdn.microsoft.com/library/277ca5f6-e1c4-41b6-a47f-3a67ce5b94ac).","nodes":[{"content":"You can enable or disable an <ph id=\"ph1\">&lt;xref:System.Diagnostics.EventSchemaTraceListener&gt;</ph> object through the application configuration file, and then use the configured <ph id=\"ph2\">&lt;xref:System.Diagnostics.EventSchemaTraceListener&gt;</ph> object in your application.","pos":[0,237],"source":"You can enable or disable an <xref:System.Diagnostics.EventSchemaTraceListener> object through the application configuration file, and then use the configured <xref:System.Diagnostics.EventSchemaTraceListener> object in your application."},{"content":"Alternately, you can create an <ph id=\"ph1\">&lt;xref:System.Diagnostics.EventSchemaTraceListener&gt;</ph> object in your code.","pos":[238,340],"source":" Alternately, you can create an <xref:System.Diagnostics.EventSchemaTraceListener> object in your code."},{"content":"We recommend that you enable trace listeners through the application configuration file.","pos":[341,429]},{"content":"For information about the use of configuration files for tracing and debugging, see <bpt id=\"p1\">[</bpt>Trace and Debug Settings Schema<ept id=\"p1\">](http://msdn.microsoft.com/library/277ca5f6-e1c4-41b6-a47f-3a67ce5b94ac)</ept>.","pos":[430,620],"source":" For information about the use of configuration files for tracing and debugging, see [Trace and Debug Settings Schema](http://msdn.microsoft.com/library/277ca5f6-e1c4-41b6-a47f-3a67ce5b94ac)."}]},{"pos":[1658,1940],"content":"To configure an <xref:System.Diagnostics.EventSchemaTraceListener> object, modify the configuration file that corresponds to the name of your application. In this file, you can add, remove, or set the properties for a listener. The configuration file should be formatted as follows:","nodes":[{"content":"To configure an <xref:System.Diagnostics.EventSchemaTraceListener> object, modify the configuration file that corresponds to the name of your application. In this file, you can add, remove, or set the properties for a listener. The configuration file should be formatted as follows:","pos":[0,282],"nodes":[{"content":"To configure an <ph id=\"ph1\">&lt;xref:System.Diagnostics.EventSchemaTraceListener&gt;</ph> object, modify the configuration file that corresponds to the name of your application.","pos":[0,154],"source":"To configure an <xref:System.Diagnostics.EventSchemaTraceListener> object, modify the configuration file that corresponds to the name of your application."},{"content":"In this file, you can add, remove, or set the properties for a listener.","pos":[155,227]},{"content":"The configuration file should be formatted as follows:","pos":[228,282]}]}]},{"pos":[3055,3574],"content":"The <xref:System.Diagnostics.EventSchemaTraceListener> class inherits the <xref:System.Diagnostics.TraceListener.Filter%2A> property from the base class <xref:System.Diagnostics.TraceListener>. The <xref:System.Diagnostics.TraceListener.Filter%2A> property allows for an additional level of trace output filtering at the listener. If a filter is present, the `Trace` methods of the trace listener call the <xref:System.Diagnostics.TraceFilter.ShouldTrace%2A> method of the filter to determine whether to emit the trace.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Diagnostics.EventSchemaTraceListener&gt;</ph> class inherits the <ph id=\"ph2\">&lt;xref:System.Diagnostics.TraceListener.Filter%2A&gt;</ph> property from the base class <ph id=\"ph3\">&lt;xref:System.Diagnostics.TraceListener&gt;</ph>.","pos":[0,193],"source":"The <xref:System.Diagnostics.EventSchemaTraceListener> class inherits the <xref:System.Diagnostics.TraceListener.Filter%2A> property from the base class <xref:System.Diagnostics.TraceListener>."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Diagnostics.TraceListener.Filter%2A&gt;</ph> property allows for an additional level of trace output filtering at the listener.","pos":[194,330],"source":" The <xref:System.Diagnostics.TraceListener.Filter%2A> property allows for an additional level of trace output filtering at the listener."},{"content":"If a filter is present, the <ph id=\"ph1\">`Trace`</ph> methods of the trace listener call the <ph id=\"ph2\">&lt;xref:System.Diagnostics.TraceFilter.ShouldTrace%2A&gt;</ph> method of the filter to determine whether to emit the trace.","pos":[331,519],"source":" If a filter is present, the `Trace` methods of the trace listener call the <xref:System.Diagnostics.TraceFilter.ShouldTrace%2A> method of the filter to determine whether to emit the trace."}]},{"pos":[3581,3714],"content":"If an attempt is made to write to a file that is being used or is unavailable, a GUID suffix is automatically added to the file name.","nodes":[{"content":"If an attempt is made to write to a file that is being used or is unavailable, a GUID suffix is automatically added to the file name.","pos":[0,133]}]},{"pos":[3722,4121],"content":"[!NOTE]\n Listener methods are intended to be called by methods of the <xref:System.Diagnostics.Debug>, <xref:System.Diagnostics.Trace>, and <xref:System.Diagnostics.TraceSource> classes. Do not call the listener methods directly from application code. The <xref:System.Diagnostics.EventSchemaTraceListener> listener is primarily intended for use by the <xref:System.Diagnostics.TraceSource> class.","leadings":["","> "],"nodes":[{"content":" Listener methods are intended to be called by methods of the <xref:System.Diagnostics.Debug>, <xref:System.Diagnostics.Trace>, and <xref:System.Diagnostics.TraceSource> classes. Do not call the listener methods directly from application code. The <xref:System.Diagnostics.EventSchemaTraceListener> listener is primarily intended for use by the <xref:System.Diagnostics.TraceSource> class.","pos":[8,397],"nodes":[{"content":"Listener methods are intended to be called by methods of the <ph id=\"ph1\">&lt;xref:System.Diagnostics.Debug&gt;</ph>, <ph id=\"ph2\">&lt;xref:System.Diagnostics.Trace&gt;</ph>, and <ph id=\"ph3\">&lt;xref:System.Diagnostics.TraceSource&gt;</ph> classes.","pos":[1,178],"source":" Listener methods are intended to be called by methods of the <xref:System.Diagnostics.Debug>, <xref:System.Diagnostics.Trace>, and <xref:System.Diagnostics.TraceSource> classes."},{"content":"Do not call the listener methods directly from application code.","pos":[179,243]},{"content":"The <ph id=\"ph1\">&lt;xref:System.Diagnostics.EventSchemaTraceListener&gt;</ph> listener is primarily intended for use by the <ph id=\"ph2\">&lt;xref:System.Diagnostics.TraceSource&gt;</ph> class.","pos":[244,389],"source":" The <xref:System.Diagnostics.EventSchemaTraceListener> listener is primarily intended for use by the <xref:System.Diagnostics.TraceSource> class."}]}]},{"pos":[4128,4204],"content":"The following table describes the elements and attributes of the XML output.","nodes":[{"content":"The following table describes the elements and attributes of the XML output.","pos":[0,76]}]},{"pos":[4211,4218],"content":"Element","nodes":[{"content":"Element","pos":[0,7]}]},{"pos":[4219,4229],"content":"Attributes","nodes":[{"content":"Attributes","pos":[0,10]}]},{"pos":[4230,4236],"content":"Output","nodes":[{"content":"Output","pos":[0,6]}]},{"pos":[4237,4242],"content":"Notes","nodes":[{"content":"Notes","pos":[0,5]}]},{"pos":[4319,4323],"content":"None","nodes":[{"content":"None","pos":[0,4]}]},{"pos":[4324,4487],"content":"Depends on the presence of the <xref:System.Diagnostics.TraceOptions.Callstack> flag in the <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> property.","nodes":[{"content":"Depends on the presence of the <ph id=\"ph1\">&lt;xref:System.Diagnostics.TraceOptions.Callstack&gt;</ph> flag in the <ph id=\"ph2\">&lt;xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A&gt;</ph> property.","pos":[0,163],"source":"Depends on the presence of the <xref:System.Diagnostics.TraceOptions.Callstack> flag in the <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> property."}]},{"pos":[4488,4620],"content":"Special characters such as > or < are replaced with escape sequences. See the escaped character translation table in the next table.","nodes":[{"content":"Special characters such as > or < are replaced with escape sequences. See the escaped character translation table in the next table.","pos":[0,132],"nodes":[{"content":"Special characters such as &gt; or &lt; are replaced with escape sequences.","pos":[0,69],"source":"Special characters such as > or < are replaced with escape sequences."},{"content":"See the escaped character translation table in the next table.","pos":[70,132]}]}]},{"pos":[4636,4640],"content":"None","nodes":[{"content":"None","pos":[0,4]}]},{"pos":[4641,4656],"content":"Always present.","nodes":[{"content":"Always present.","pos":[0,15]}]},{"pos":[4657,4748],"content":"This element represents the value of the <xref:System.Environment.MachineName%2A> property.","nodes":[{"content":"This element represents the value of the <ph id=\"ph1\">&lt;xref:System.Environment.MachineName%2A&gt;</ph> property.","pos":[0,91],"source":"This element represents the value of the <xref:System.Environment.MachineName%2A> property."}]},{"pos":[4780,4795],"content":"Always present.","nodes":[{"content":"Always present.","pos":[0,15]}]},{"pos":[4796,4859],"content":"If <ph id=\"ph1\">`ActivityID`</ph> is not specified, the default is an empty GUID.","source":"If `ActivityID` is not specified, the default is an empty GUID."},{"pos":[4885,4973],"content":"Depends on the presence of the <ph id=\"ph1\">`relatedActivityId`</ph> parameter in the <ph id=\"ph2\">`Trace`</ph> method call.","source":"Depends on the presence of the `relatedActivityId` parameter in the `Trace` method call."},{"pos":[4974,5139],"content":"The <ph id=\"ph1\">`RelatedActivityID`</ph> attribute corresponds to the <ph id=\"ph2\">`relatedActivityId`</ph> parameter of the <ph id=\"ph3\">&lt;xref:System.Diagnostics.EventSchemaTraceListener.TraceTransfer%2A&gt;</ph> method.","source":"The `RelatedActivityID` attribute corresponds to the `relatedActivityId` parameter of the <xref:System.Diagnostics.EventSchemaTraceListener.TraceTransfer%2A> method."},{"pos":[5151,5155],"content":"None","nodes":[{"content":"None","pos":[0,4]}]},{"pos":[5156,5171],"content":"Always present.","nodes":[{"content":"Always present.","pos":[0,15]}]},{"pos":[5172,5488],"content":"This element represents parameter input (`data`). One element is provided for each data object. In the case of event logs, the `Data` element contains escaped XML data. In the case of data logs, the `Data` element contains unescaped data. The data log output uses the `ToString` method of the passed-in data objects.","nodes":[{"content":"This element represents parameter input (<ph id=\"ph1\">`data`</ph>).","pos":[0,49],"source":"This element represents parameter input (`data`)."},{"content":"One element is provided for each data object.","pos":[50,95]},{"content":"In the case of event logs, the <ph id=\"ph1\">`Data`</ph> element contains escaped XML data.","pos":[96,168],"source":" In the case of event logs, the `Data` element contains escaped XML data."},{"content":"In the case of data logs, the <ph id=\"ph1\">`Data`</ph> element contains unescaped data.","pos":[169,238],"source":" In the case of data logs, the `Data` element contains unescaped data."},{"content":"The data log output uses the <ph id=\"ph1\">`ToString`</ph> method of the passed-in data objects.","pos":[239,316],"source":" The data log output uses the `ToString` method of the passed-in data objects."}]},{"pos":[5501,5505],"content":"None","nodes":[{"content":"None","pos":[0,4]}]},{"pos":[5506,5521],"content":"Always present.","nodes":[{"content":"Always present.","pos":[0,15]}]},{"pos":[5522,5558],"content":"This element contains a trace event.","nodes":[{"content":"This element contains a trace event.","pos":[0,36]}]},{"pos":[5575,5579],"content":"None","nodes":[{"content":"None","pos":[0,4]}]},{"pos":[5580,5603],"content":"Present for event logs.","nodes":[{"content":"Present for event logs.","pos":[0,23]}]},{"pos":[5604,5818],"content":"This element represents parameter input (`message`, `args`). It contains `Data` elements with escaped XML data that is created by calling the <xref:System.Diagnostics.EventSchemaTraceListener.TraceEvent%2A> method.","nodes":[{"content":"This element represents parameter input (<ph id=\"ph1\">`message`</ph>, <ph id=\"ph2\">`args`</ph>).","pos":[0,60],"source":"This element represents parameter input (`message`, `args`)."},{"content":"It contains <ph id=\"ph1\">`Data`</ph> elements with escaped XML data that is created by calling the <ph id=\"ph2\">&lt;xref:System.Diagnostics.EventSchemaTraceListener.TraceEvent%2A&gt;</ph> method.","pos":[61,214],"source":" It contains `Data` elements with escaped XML data that is created by calling the <xref:System.Diagnostics.EventSchemaTraceListener.TraceEvent%2A> method."}]},{"pos":[5833,5837],"content":"None","nodes":[{"content":"None","pos":[0,4]}]},{"pos":[5838,5853],"content":"Always present.","nodes":[{"content":"Always present.","pos":[0,15]}]},{"pos":[5854,5901],"content":"This element represents parameter input (<ph id=\"ph1\">`id`</ph>).","source":"This element represents parameter input (`id`)."},{"pos":[5930,6093],"content":"Depends on the presence of the <xref:System.Diagnostics.TraceOptions.ProcessId> flag in the <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> property.","nodes":[{"content":"Depends on the presence of the <ph id=\"ph1\">&lt;xref:System.Diagnostics.TraceOptions.ProcessId&gt;</ph> flag in the <ph id=\"ph2\">&lt;xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A&gt;</ph> property.","pos":[0,163],"source":"Depends on the presence of the <xref:System.Diagnostics.TraceOptions.ProcessId> flag in the <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> property."}]},{"pos":[6094,6423],"content":"The `ProcessID` attribute is specified in the <xref:System.Diagnostics.TraceEventCache>. On the Microsoft Windows 98 and Windows Millenium Edition operating systems, if `ProcessID` is larger than 2,147,483,647, it is a positive representation of a negative number and should be converted to obtain the correct process identifier.","nodes":[{"content":"The <ph id=\"ph1\">`ProcessID`</ph> attribute is specified in the <ph id=\"ph2\">&lt;xref:System.Diagnostics.TraceEventCache&gt;</ph>.","pos":[0,88],"source":"The `ProcessID` attribute is specified in the <xref:System.Diagnostics.TraceEventCache>."},{"content":"On the Microsoft Windows 98 and Windows Millenium Edition operating systems, if <ph id=\"ph1\">`ProcessID`</ph> is larger than 2,147,483,647, it is a positive representation of a negative number and should be converted to obtain the correct process identifier.","pos":[89,329],"source":" On the Microsoft Windows 98 and Windows Millenium Edition operating systems, if `ProcessID` is larger than 2,147,483,647, it is a positive representation of a negative number and should be converted to obtain the correct process identifier."}]},{"pos":[6440,6476],"content":"Present when <ph id=\"ph1\">`ProcessID`</ph> is present.","source":"Present when `ProcessID` is present."},{"pos":[6477,6564],"content":"The <ph id=\"ph1\">`ThreadID`</ph> attribute is specified in the <ph id=\"ph2\">&lt;xref:System.Diagnostics.TraceEventCache&gt;</ph>.","source":"The `ThreadID` attribute is specified in the <xref:System.Diagnostics.TraceEventCache>."},{"pos":[6577,6581],"content":"None","nodes":[{"content":"None","pos":[0,4]}]},{"pos":[6582,6597],"content":"Always present.","nodes":[{"content":"Always present.","pos":[0,15]}]},{"pos":[6598,7153],"content":"This element represents parameter input (the numeric value of `eventType`). Parameter values that are larger than 255 are output as a level 8, which represents <xref:System.Diagnostics.TraceEventType?displayProperty=fullName>. Trace event types <xref:System.Diagnostics.TraceEventType.Critical>, <xref:System.Diagnostics.TraceEventType.Error>, <xref:System.Diagnostics.TraceEventType.Warning>, <xref:System.Diagnostics.TraceEventType.Information>, and <xref:System.Diagnostics.TraceEventType.Verbose> are output as levels 1, 2, 4, 8, and 10, respectively.","nodes":[{"content":"This element represents parameter input (the numeric value of <ph id=\"ph1\">`eventType`</ph>).","pos":[0,75],"source":"This element represents parameter input (the numeric value of `eventType`)."},{"content":"Parameter values that are larger than 255 are output as a level 8, which represents <ph id=\"ph1\">&lt;xref:System.Diagnostics.TraceEventType?displayProperty=fullName&gt;</ph>.","pos":[76,226],"source":" Parameter values that are larger than 255 are output as a level 8, which represents <xref:System.Diagnostics.TraceEventType?displayProperty=fullName>."},{"content":"Trace event types <ph id=\"ph1\">&lt;xref:System.Diagnostics.TraceEventType.Critical&gt;</ph>, <ph id=\"ph2\">&lt;xref:System.Diagnostics.TraceEventType.Error&gt;</ph>, <ph id=\"ph3\">&lt;xref:System.Diagnostics.TraceEventType.Warning&gt;</ph>, <ph id=\"ph4\">&lt;xref:System.Diagnostics.TraceEventType.Information&gt;</ph>, and <ph id=\"ph5\">&lt;xref:System.Diagnostics.TraceEventType.Verbose&gt;</ph> are output as levels 1, 2, 4, 8, and 10, respectively.","pos":[227,555],"source":" Trace event types <xref:System.Diagnostics.TraceEventType.Critical>, <xref:System.Diagnostics.TraceEventType.Error>, <xref:System.Diagnostics.TraceEventType.Warning>, <xref:System.Diagnostics.TraceEventType.Information>, and <xref:System.Diagnostics.TraceEventType.Verbose> are output as levels 1, 2, 4, 8, and 10, respectively."}]},{"pos":[7182,7186],"content":"None","nodes":[{"content":"None","pos":[0,4]}]},{"pos":[7187,7362],"content":"Depends on the presence of the <xref:System.Diagnostics.TraceOptions.LogicalOperationStack> flag in the <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> property.","nodes":[{"content":"Depends on the presence of the <ph id=\"ph1\">&lt;xref:System.Diagnostics.TraceOptions.LogicalOperationStack&gt;</ph> flag in the <ph id=\"ph2\">&lt;xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A&gt;</ph> property.","pos":[0,175],"source":"Depends on the presence of the <xref:System.Diagnostics.TraceOptions.LogicalOperationStack> flag in the <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> property."}]},{"pos":[7363,7505],"content":"Only one logical operation can exist. Therefore, the values are written as `LogicalOperation` nodes under the `LogicalOperationStack` element.","nodes":[{"content":"Only one logical operation can exist.","pos":[0,37]},{"content":"Therefore, the values are written as <ph id=\"ph1\">`LogicalOperation`</ph> nodes under the <ph id=\"ph2\">`LogicalOperationStack`</ph> element.","pos":[38,142],"source":" Therefore, the values are written as `LogicalOperation` nodes under the `LogicalOperationStack` element."}]},{"pos":[7519,7523],"content":"None","nodes":[{"content":"None","pos":[0,4]}]},{"pos":[7524,7565],"content":"Present when <ph id=\"ph1\">`Level`</ph> is greater than 255.","source":"Present when `Level` is greater than 255."},{"pos":[7566,7952],"content":"This element represents Trace event types that have numeric values greater than 255. <xref:System.Diagnostics.TraceEventType.Start>, <xref:System.Diagnostics.TraceEventType.Stop>, <xref:System.Diagnostics.TraceEventType.Suspend>, <xref:System.Diagnostics.TraceEventType.Resume>, or <xref:System.Diagnostics.TraceEventType.Transfer> are output as levels 1, 2, 4, 8, and 10, respectively.","nodes":[{"content":"This element represents Trace event types that have numeric values greater than 255. <xref:System.Diagnostics.TraceEventType.Start>, <xref:System.Diagnostics.TraceEventType.Stop>, <xref:System.Diagnostics.TraceEventType.Suspend>, <xref:System.Diagnostics.TraceEventType.Resume>, or <xref:System.Diagnostics.TraceEventType.Transfer> are output as levels 1, 2, 4, 8, and 10, respectively.","pos":[0,386],"nodes":[{"content":"This element represents Trace event types that have numeric values greater than 255.","pos":[0,84]},{"content":"<ph id=\"ph1\">&lt;xref:System.Diagnostics.TraceEventType.Start&gt;</ph>, <ph id=\"ph2\">&lt;xref:System.Diagnostics.TraceEventType.Stop&gt;</ph>, <ph id=\"ph3\">&lt;xref:System.Diagnostics.TraceEventType.Suspend&gt;</ph>, <ph id=\"ph4\">&lt;xref:System.Diagnostics.TraceEventType.Resume&gt;</ph>, or <ph id=\"ph5\">&lt;xref:System.Diagnostics.TraceEventType.Transfer&gt;</ph> are output as levels 1, 2, 4, 8, and 10, respectively.","pos":[85,386],"source":" <xref:System.Diagnostics.TraceEventType.Start>, <xref:System.Diagnostics.TraceEventType.Stop>, <xref:System.Diagnostics.TraceEventType.Suspend>, <xref:System.Diagnostics.TraceEventType.Resume>, or <xref:System.Diagnostics.TraceEventType.Transfer> are output as levels 1, 2, 4, 8, and 10, respectively."}]}]},{"pos":[7975,7990],"content":"Always present.","nodes":[{"content":"Always present.","pos":[0,15]}]},{"pos":[7991,8004],"content":"Always empty.","nodes":[{"content":"Always empty.","pos":[0,13]}]},{"pos":[8035,8050],"content":"Always present.","nodes":[{"content":"Always present.","pos":[0,15]}]},{"pos":[8051,8138],"content":"This attribute represents a resource string for the event type. It is always \"en-EN\\\\\".","nodes":[{"content":"This attribute represents a resource string for the event type. It is always \"en-EN\\\\\".","pos":[0,87],"nodes":[{"content":"This attribute represents a resource string for the event type.","pos":[0,63]},{"content":"It is always \"en-EN<ph id=\"ph1\">\\\\</ph>\".","pos":[64,87],"source":" It is always \"en-EN\\\\\"."}]}]},{"pos":[8159,8174],"content":"Always present.","nodes":[{"content":"Always present.","pos":[0,15]}]},{"pos":[8207,8369],"content":"Depends on the presence of the <xref:System.Diagnostics.TraceOptions.DateTime> flag in the <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> property.","nodes":[{"content":"Depends on the presence of the <ph id=\"ph1\">&lt;xref:System.Diagnostics.TraceOptions.DateTime&gt;</ph> flag in the <ph id=\"ph2\">&lt;xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A&gt;</ph> property.","pos":[0,162],"source":"Depends on the presence of the <xref:System.Diagnostics.TraceOptions.DateTime> flag in the <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> property."}]},{"pos":[8370,8544],"content":"The time is the value of the <xref:System.Diagnostics.TraceEventCache.DateTime%2A?displayProperty=fullName> property. This property is expressed as Coordinated Universal Time","nodes":[{"content":"The time is the value of the <xref:System.Diagnostics.TraceEventCache.DateTime%2A?displayProperty=fullName> property. This property is expressed as Coordinated Universal Time","pos":[0,174],"nodes":[{"content":"The time is the value of the <ph id=\"ph1\">&lt;xref:System.Diagnostics.TraceEventCache.DateTime%2A?displayProperty=fullName&gt;</ph> property.","pos":[0,117],"source":"The time is the value of the <xref:System.Diagnostics.TraceEventCache.DateTime%2A?displayProperty=fullName> property."},{"content":"This property is expressed as Coordinated Universal Time","pos":[118,174]}]}]},{"pos":[8561,8565],"content":"None","nodes":[{"content":"None","pos":[0,4]}]},{"pos":[8566,8729],"content":"Depends on the presence of the <xref:System.Diagnostics.TraceOptions.Timestamp> flag in the <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> property.","nodes":[{"content":"Depends on the presence of the <ph id=\"ph1\">&lt;xref:System.Diagnostics.TraceOptions.Timestamp&gt;</ph> flag in the <ph id=\"ph2\">&lt;xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A&gt;</ph> property.","pos":[0,163],"source":"Depends on the presence of the <xref:System.Diagnostics.TraceOptions.Timestamp> flag in the <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> property."}]},{"pos":[8730,8805],"content":"This element is specified in the <xref:System.Diagnostics.TraceEventCache>.","nodes":[{"content":"This element is specified in the <ph id=\"ph1\">&lt;xref:System.Diagnostics.TraceEventCache&gt;</ph>.","pos":[0,75],"source":"This element is specified in the <xref:System.Diagnostics.TraceEventCache>."}]},{"pos":[8821,8825],"content":"None","nodes":[{"content":"None","pos":[0,4]}]},{"pos":[8826,8848],"content":"Present for data logs.","nodes":[{"content":"Present for data logs.","pos":[0,22]}]},{"pos":[8849,9000],"content":"This element contains <ph id=\"ph1\">`Data`</ph> elements with unescaped, user-provided data from a <ph id=\"ph2\">&lt;xref:System.Diagnostics.EventSchemaTraceListener.TraceData%2A&gt;</ph> method.","source":"This element contains `Data` elements with unescaped, user-provided data from a <xref:System.Diagnostics.EventSchemaTraceListener.TraceData%2A> method."},{"pos":[9008,9339],"content":"The following table shows the characters that are escaped in the XML output. Escaping occurs in all the elements and attributes except for the `UserData` element, which contains user-provided, unescaped data. The `UserData` element is a result of calls to the <xref:System.Diagnostics.EventSchemaTraceListener.TraceData%2A> method.","nodes":[{"content":"The following table shows the characters that are escaped in the XML output.","pos":[0,76]},{"content":"Escaping occurs in all the elements and attributes except for the <ph id=\"ph1\">`UserData`</ph> element, which contains user-provided, unescaped data.","pos":[77,208],"source":" Escaping occurs in all the elements and attributes except for the `UserData` element, which contains user-provided, unescaped data."},{"content":"The <ph id=\"ph1\">`UserData`</ph> element is a result of calls to the <ph id=\"ph2\">&lt;xref:System.Diagnostics.EventSchemaTraceListener.TraceData%2A&gt;</ph> method.","pos":[209,331],"source":" The `UserData` element is a result of calls to the <xref:System.Diagnostics.EventSchemaTraceListener.TraceData%2A> method."}]},{"pos":[9346,9363],"content":"Escaped character","nodes":[{"content":"Escaped character","pos":[0,17]}]},{"pos":[9364,9369],"content":"Value","nodes":[{"content":"Value","pos":[0,5]}]},{"pos":[9414,9415],"content":"&","nodes":[]},{"pos":[9416,9421],"content":"&amp;","nodes":[]},{"pos":[9426,9428],"content":"\\<","nodes":[]},{"pos":[9429,9433],"content":"&lt;","nodes":[]},{"pos":[9438,9439],"content":">","nodes":[]},{"pos":[9440,9444],"content":"&gt;","nodes":[]},{"pos":[9449,9450],"content":"\"","nodes":[{"content":"\"","pos":[0,1]}]},{"pos":[9451,9457],"content":"&quot;","nodes":[]},{"pos":[9462,9463],"content":"\\","nodes":[]},{"pos":[9464,9470],"content":"&apos;","nodes":[]},{"pos":[9475,9478],"content":"0xD","nodes":[{"content":"0xD","pos":[0,3]}]},{"pos":[9479,9485],"content":"&\\#xD;","nodes":[{"content":"<ph id=\"ph1\">&amp;</ph><ph id=\"ph2\">\\#</ph>xD;","pos":[0,6],"source":"&\\#xD;"}]},{"pos":[9490,9493],"content":"0xA","nodes":[{"content":"0xA","pos":[0,3]}]},{"pos":[9494,9500],"content":"&\\#xA;","nodes":[{"content":"<ph id=\"ph1\">&amp;</ph><ph id=\"ph2\">\\#</ph>xA;","pos":[0,6],"source":"&\\#xA;"}]}],"pos":[2874,12483],"yaml":true,"extradata":"MT"},{"content":"Initializes a new instance of the <xref href=\"System.Diagnostics.EventSchemaTraceListener\"></xref> class, using the specified file as the recipient of debugging and tracing output.","nodes":[{"pos":[0,180],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Diagnostics.EventSchemaTraceListener\"&gt;&lt;/xref&gt;</ph> class, using the specified file as the recipient of debugging and tracing output.","source":"Initializes a new instance of the <xref href=\"System.Diagnostics.EventSchemaTraceListener\"></xref> class, using the specified file as the recipient of debugging and tracing output."}],"pos":[15883,16064],"yaml":true},{"content":"By default, one file of unrestricted size is logged.","nodes":[{"pos":[0,52],"content":"By default, one file of unrestricted size is logged.","nodes":[{"content":"By default, one file of unrestricted size is logged.","pos":[0,52]}]}],"pos":[16075,16128],"yaml":true,"extradata":"MT"},{"content":"The path for the log file.","nodes":[{"pos":[0,26],"content":"The path for the log file.","nodes":[{"content":"The path for the log file.","pos":[0,26]}]}],"pos":[16849,16876],"yaml":true},{"content":"Initializes a new instance of the <xref href=\"System.Diagnostics.EventSchemaTraceListener\"></xref> class with the specified name, using the specified file as the recipient of debugging and tracing output.","nodes":[{"pos":[0,204],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Diagnostics.EventSchemaTraceListener\"&gt;&lt;/xref&gt;</ph> class with the specified name, using the specified file as the recipient of debugging and tracing output.","source":"Initializes a new instance of the <xref href=\"System.Diagnostics.EventSchemaTraceListener\"></xref> class with the specified name, using the specified file as the recipient of debugging and tracing output."}],"pos":[18096,18301],"yaml":true},{"content":"The path for the log file.","nodes":[{"pos":[0,26],"content":"The path for the log file.","nodes":[{"content":"The path for the log file.","pos":[0,26]}]}],"pos":[19080,19107],"yaml":true},{"content":"The name of the listener.","nodes":[{"pos":[0,25],"content":"The name of the listener.","nodes":[{"content":"The name of the listener.","pos":[0,25]}]}],"pos":[19167,19193],"yaml":true},{"content":"Initializes a new instance of the <xref href=\"System.Diagnostics.EventSchemaTraceListener\"></xref> class with the specified name and specified buffer size, using the specified file as the recipient of debugging and tracing output.","nodes":[{"pos":[0,230],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Diagnostics.EventSchemaTraceListener\"&gt;&lt;/xref&gt;</ph> class with the specified name and specified buffer size, using the specified file as the recipient of debugging and tracing output.","source":"Initializes a new instance of the <xref href=\"System.Diagnostics.EventSchemaTraceListener\"></xref> class with the specified name and specified buffer size, using the specified file as the recipient of debugging and tracing output."}],"pos":[20473,20704],"yaml":true},{"content":"For performance considerations, `bufferSize` should be a multiple of 1024 bytes.","nodes":[{"pos":[0,80],"content":"For performance considerations, <ph id=\"ph1\">`bufferSize`</ph> should be a multiple of 1024 bytes.","source":"For performance considerations, `bufferSize` should be a multiple of 1024 bytes."}],"pos":[20715,20796],"yaml":true,"extradata":"MT"},{"content":"The path for the log file.","nodes":[{"pos":[0,26],"content":"The path for the log file.","nodes":[{"content":"The path for the log file.","pos":[0,26]}]}],"pos":[21577,21604],"yaml":true},{"content":"The name of the listener.","nodes":[{"pos":[0,25],"content":"The name of the listener.","nodes":[{"content":"The name of the listener.","pos":[0,25]}]}],"pos":[21664,21690],"yaml":true},{"content":"The size of the output buffer, in bytes.","nodes":[{"pos":[0,40],"content":"The size of the output buffer, in bytes.","nodes":[{"content":"The size of the output buffer, in bytes.","pos":[0,40]}]}],"pos":[21755,21796],"yaml":true},{"content":"Initializes a new instance of the <xref href=\"System.Diagnostics.EventSchemaTraceListener\"></xref> class with the specified name and specified buffer size, using the specified file with the specified log retention policy as the recipient of the debugging and tracing output.","nodes":[{"pos":[0,274],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Diagnostics.EventSchemaTraceListener\"&gt;&lt;/xref&gt;</ph> class with the specified name and specified buffer size, using the specified file with the specified log retention policy as the recipient of the debugging and tracing output.","source":"Initializes a new instance of the <xref href=\"System.Diagnostics.EventSchemaTraceListener\"></xref> class with the specified name and specified buffer size, using the specified file with the specified log retention policy as the recipient of the debugging and tracing output."}],"pos":[23280,23555],"yaml":true},{"content":"For performance considerations, `bufferSize` should be a multiple of 1024 bytes.","nodes":[{"pos":[0,80],"content":"For performance considerations, <ph id=\"ph1\">`bufferSize`</ph> should be a multiple of 1024 bytes.","source":"For performance considerations, `bufferSize` should be a multiple of 1024 bytes."}],"pos":[23566,23647],"yaml":true,"extradata":"MT"},{"content":"The path for the log file.","nodes":[{"pos":[0,26],"content":"The path for the log file.","nodes":[{"content":"The path for the log file.","pos":[0,26]}]}],"pos":[24536,24563],"yaml":true},{"content":"The name of the listener.","nodes":[{"pos":[0,25],"content":"The name of the listener.","nodes":[{"content":"The name of the listener.","pos":[0,25]}]}],"pos":[24623,24649],"yaml":true},{"content":"The size of the output buffer, in bytes.","nodes":[{"pos":[0,40],"content":"The size of the output buffer, in bytes.","nodes":[{"content":"The size of the output buffer, in bytes.","pos":[0,40]}]}],"pos":[24714,24755],"yaml":true},{"content":"One of the <xref href=\"System.Diagnostics.TraceLogRetentionOption\"></xref> values.","nodes":[{"pos":[0,82],"content":"One of the <ph id=\"ph1\">&lt;xref href=\"System.Diagnostics.TraceLogRetentionOption\"&gt;&lt;/xref&gt;</ph> values.","source":"One of the <xref href=\"System.Diagnostics.TraceLogRetentionOption\"></xref> values."}],"pos":[24858,24941],"yaml":true},{"content":"Initializes a new instance of the <xref href=\"System.Diagnostics.EventSchemaTraceListener\"></xref> class with the specified name and specified buffer size, using the specified file with the specified log retention policy and maximum size as the recipient of the debugging and tracing output.","nodes":[{"pos":[0,291],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Diagnostics.EventSchemaTraceListener\"&gt;&lt;/xref&gt;</ph> class with the specified name and specified buffer size, using the specified file with the specified log retention policy and maximum size as the recipient of the debugging and tracing output.","source":"Initializes a new instance of the <xref href=\"System.Diagnostics.EventSchemaTraceListener\"></xref> class with the specified name and specified buffer size, using the specified file with the specified log retention policy and maximum size as the recipient of the debugging and tracing output."}],"pos":[26485,26777],"yaml":true},{"content":"For performance considerations, `bufferSize` and `maximumFileSize` should be multiples of 1024 bytes. `maximumFileSize` is not an absolute value, it is a threshold which can be exceeded up to the size of the last message.","nodes":[{"pos":[0,221],"content":"For performance considerations, `bufferSize` and `maximumFileSize` should be multiples of 1024 bytes. `maximumFileSize` is not an absolute value, it is a threshold which can be exceeded up to the size of the last message.","nodes":[{"content":"For performance considerations, <ph id=\"ph1\">`bufferSize`</ph> and <ph id=\"ph2\">`maximumFileSize`</ph> should be multiples of 1024 bytes.","pos":[0,101],"source":"For performance considerations, `bufferSize` and `maximumFileSize` should be multiples of 1024 bytes."},{"content":"<ph id=\"ph1\">`maximumFileSize`</ph> is not an absolute value, it is a threshold which can be exceeded up to the size of the last message.","pos":[102,221],"source":"`maximumFileSize` is not an absolute value, it is a threshold which can be exceeded up to the size of the last message."}]}],"pos":[26788,27010],"yaml":true,"extradata":"MT"},{"content":"The path for the log file.","nodes":[{"pos":[0,26],"content":"The path for the log file.","nodes":[{"content":"The path for the log file.","pos":[0,26]}]}],"pos":[27936,27963],"yaml":true},{"content":"The name of the listener.","nodes":[{"pos":[0,25],"content":"The name of the listener.","nodes":[{"content":"The name of the listener.","pos":[0,25]}]}],"pos":[28023,28049],"yaml":true},{"content":"The size of the output buffer, in bytes.","nodes":[{"pos":[0,40],"content":"The size of the output buffer, in bytes.","nodes":[{"content":"The size of the output buffer, in bytes.","pos":[0,40]}]}],"pos":[28114,28155],"yaml":true},{"content":"One of the <xref href=\"System.Diagnostics.TraceLogRetentionOption\"></xref> values.","nodes":[{"pos":[0,82],"content":"One of the <ph id=\"ph1\">&lt;xref href=\"System.Diagnostics.TraceLogRetentionOption\"&gt;&lt;/xref&gt;</ph> values.","source":"One of the <xref href=\"System.Diagnostics.TraceLogRetentionOption\"></xref> values."}],"pos":[28258,28341],"yaml":true},{"content":"The maximum file size, in bytes.","nodes":[{"pos":[0,32],"content":"The maximum file size, in bytes.","nodes":[{"content":"The maximum file size, in bytes.","pos":[0,32]}]}],"pos":[28411,28444],"yaml":true},{"content":"<code>maximumFileSize</code> is a negative number.","nodes":[{"pos":[0,50],"content":"<ph id=\"ph1\">&lt;code&gt;maximumFileSize&lt;/code&gt;</ph> is a negative number.","source":"<code>maximumFileSize</code> is a negative number."}],"pos":[28635,28686],"yaml":true},{"content":"Initializes a new instance of the <xref href=\"System.Diagnostics.EventSchemaTraceListener\"></xref> class with the specified name and specified buffer size, using the specified file with the specified log retention policy, maximum size, and file count as the recipient of the debugging and tracing output.","nodes":[{"pos":[0,304],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Diagnostics.EventSchemaTraceListener\"&gt;&lt;/xref&gt;</ph> class with the specified name and specified buffer size, using the specified file with the specified log retention policy, maximum size, and file count as the recipient of the debugging and tracing output.","source":"Initializes a new instance of the <xref href=\"System.Diagnostics.EventSchemaTraceListener\"></xref> class with the specified name and specified buffer size, using the specified file with the specified log retention policy, maximum size, and file count as the recipient of the debugging and tracing output."}],"pos":[30210,30515],"yaml":true},{"content":"For performance considerations, `bufferSize` and `maximumFileSize` should be multiples of 1024 bytes. `maximumFileSize` is not an absolute value; it is a threshold that can be exceeded up to the size of the last message.","nodes":[{"pos":[0,220],"content":"For performance considerations, `bufferSize` and `maximumFileSize` should be multiples of 1024 bytes. `maximumFileSize` is not an absolute value; it is a threshold that can be exceeded up to the size of the last message.","nodes":[{"content":"For performance considerations, <ph id=\"ph1\">`bufferSize`</ph> and <ph id=\"ph2\">`maximumFileSize`</ph> should be multiples of 1024 bytes.","pos":[0,101],"source":"For performance considerations, `bufferSize` and `maximumFileSize` should be multiples of 1024 bytes."},{"content":"<ph id=\"ph1\">`maximumFileSize`</ph> is not an absolute value; it is a threshold that can be exceeded up to the size of the last message.","pos":[102,220],"source":"`maximumFileSize` is not an absolute value; it is a threshold that can be exceeded up to the size of the last message."}]}],"pos":[30526,30747],"yaml":true,"extradata":"MT"},{"content":"The path for the log file.","nodes":[{"pos":[0,26],"content":"The path for the log file.","nodes":[{"content":"The path for the log file.","pos":[0,26]}]}],"pos":[31672,31699],"yaml":true},{"content":"The name of the listener.","nodes":[{"pos":[0,25],"content":"The name of the listener.","nodes":[{"content":"The name of the listener.","pos":[0,25]}]}],"pos":[31759,31785],"yaml":true},{"content":"The size of the output buffer, in bytes.","nodes":[{"pos":[0,40],"content":"The size of the output buffer, in bytes.","nodes":[{"content":"The size of the output buffer, in bytes.","pos":[0,40]}]}],"pos":[31850,31891],"yaml":true},{"content":"One of the <xref href=\"System.Diagnostics.TraceLogRetentionOption\"></xref> values.","nodes":[{"pos":[0,82],"content":"One of the <ph id=\"ph1\">&lt;xref href=\"System.Diagnostics.TraceLogRetentionOption\"&gt;&lt;/xref&gt;</ph> values.","source":"One of the <xref href=\"System.Diagnostics.TraceLogRetentionOption\"></xref> values."}],"pos":[31994,32077],"yaml":true},{"content":"The maximum file size, in bytes.","nodes":[{"pos":[0,32],"content":"The maximum file size, in bytes.","nodes":[{"content":"The maximum file size, in bytes.","pos":[0,32]}]}],"pos":[32147,32180],"yaml":true},{"content":"The maximum number of output log files.","nodes":[{"pos":[0,39],"content":"The maximum number of output log files.","nodes":[{"content":"The maximum number of output log files.","pos":[0,39]}]}],"pos":[32255,32295],"yaml":true},{"content":"<code>maximumNumberOfFiles</code> is less than 2, and <code>logRetentionOption</code> is <xref href=\"System.Diagnostics.TraceLogRetentionOption.LimitedCircularFiles\"></xref>.","nodes":[{"pos":[0,174],"content":"<ph id=\"ph1\">&lt;code&gt;maximumNumberOfFiles&lt;/code&gt;</ph> is less than 2, and <ph id=\"ph2\">&lt;code&gt;logRetentionOption&lt;/code&gt;</ph> is <ph id=\"ph3\">&lt;xref href=\"System.Diagnostics.TraceLogRetentionOption.LimitedCircularFiles\"&gt;&lt;/xref&gt;</ph>.","source":"<code>maximumNumberOfFiles</code> is less than 2, and <code>logRetentionOption</code> is <xref href=\"System.Diagnostics.TraceLogRetentionOption.LimitedCircularFiles\"></xref>."}],"pos":[32486,32661],"yaml":true},{"content":"Gets the size of the output buffer.","nodes":[{"pos":[0,35],"content":"Gets the size of the output buffer.","nodes":[{"content":"Gets the size of the output buffer.","pos":[0,35]}]}],"pos":[33634,33670],"yaml":true},{"content":"The property value is set by the `bufferSize` parameter in the constructor. For performance reasons, the buffer size should be set to a multiple of 1024 bytes. We recommend either the default size of 32*1024 bytes or 64\\*1024 bytes for best performance.","nodes":[{"pos":[0,253],"content":"The property value is set by the `bufferSize` parameter in the constructor. For performance reasons, the buffer size should be set to a multiple of 1024 bytes. We recommend either the default size of 32*1024 bytes or 64\\*1024 bytes for best performance.","nodes":[{"content":"The property value is set by the <ph id=\"ph1\">`bufferSize`</ph> parameter in the constructor.","pos":[0,75],"source":"The property value is set by the `bufferSize` parameter in the constructor."},{"content":"For performance reasons, the buffer size should be set to a multiple of 1024 bytes.","pos":[76,159]},{"content":"We recommend either the default size of 32*1024 bytes or 64<ph id=\"ph1\">\\*</ph>1024 bytes for best performance.","pos":[160,253],"source":" We recommend either the default size of 32*1024 bytes or 64\\*1024 bytes for best performance."}]}],"pos":[33681,33935],"yaml":true,"extradata":"MT"},{"content":"The size of the output buffer, in bytes.","nodes":[{"pos":[0,40],"content":"The size of the output buffer, in bytes.","nodes":[{"content":"The size of the output buffer, in bytes.","pos":[0,40]}]}],"pos":[34693,34734],"yaml":true},{"content":"Closes the log file for this listener so that it no longer receives tracing or debugging output.","nodes":[{"pos":[0,96],"content":"Closes the log file for this listener so that it no longer receives tracing or debugging output.","nodes":[{"content":"Closes the log file for this listener so that it no longer receives tracing or debugging output.","pos":[0,96]}]}],"pos":[35766,35863],"yaml":true},{"content":"Writes error information, including a basic error message and a detailed error message, to the log file.","nodes":[{"pos":[0,104],"content":"Writes error information, including a basic error message and a detailed error message, to the log file.","nodes":[{"content":"Writes error information, including a basic error message and a detailed error message, to the log file.","pos":[0,104]}]}],"pos":[37086,37191],"yaml":true},{"content":"The basic error message to write.","nodes":[{"pos":[0,33],"content":"The basic error message to write.","nodes":[{"content":"The basic error message to write.","pos":[0,33]}]}],"pos":[37359,37393],"yaml":true},{"content":"The detailed error message to append to the basic error message.","nodes":[{"pos":[0,64],"content":"The detailed error message to append to the basic error message.","nodes":[{"content":"The detailed error message to append to the basic error message.","pos":[0,64]}]}],"pos":[37462,37527],"yaml":true},{"content":"Causes buffered data to be written to the log for this listener.","nodes":[{"pos":[0,64],"content":"Causes buffered data to be written to the log for this listener.","nodes":[{"content":"Causes buffered data to be written to the log for this listener.","pos":[0,64]}]}],"pos":[38553,38618],"yaml":true},{"content":"Gets the custom XML configuration attributes that the trace listener supports.","nodes":[{"pos":[0,78],"content":"Gets the custom XML configuration attributes that the trace listener supports.","nodes":[{"content":"Gets the custom XML configuration attributes that the trace listener supports.","pos":[0,78]}]}],"pos":[39937,40016],"yaml":true},{"content":"The custom attributes that are returned by this method can be used in the XML configuration file to control the behavior of an instance of the <xref:System.Diagnostics.EventSchemaTraceListener> class. Using any other attribute causes a configuration exception. The <xref:System.Diagnostics.EventSchemaTraceListener.GetSupportedAttributes%2A> method for the <xref:System.Diagnostics.EventSchemaTraceListener> returns the following string array values: \"bufferSize\", \"logRetentionOption\", \"maximumFileSize\", and \"maximumNumberOfFiles\".","nodes":[{"pos":[0,533],"content":"The custom attributes that are returned by this method can be used in the XML configuration file to control the behavior of an instance of the <xref:System.Diagnostics.EventSchemaTraceListener> class. Using any other attribute causes a configuration exception. The <xref:System.Diagnostics.EventSchemaTraceListener.GetSupportedAttributes%2A> method for the <xref:System.Diagnostics.EventSchemaTraceListener> returns the following string array values: \"bufferSize\", \"logRetentionOption\", \"maximumFileSize\", and \"maximumNumberOfFiles\".","nodes":[{"content":"The custom attributes that are returned by this method can be used in the XML configuration file to control the behavior of an instance of the <xref:System.Diagnostics.EventSchemaTraceListener> class. Using any other attribute causes a configuration exception. The <xref:System.Diagnostics.EventSchemaTraceListener.GetSupportedAttributes%2A> method for the <xref:System.Diagnostics.EventSchemaTraceListener> returns the following string array values: \"bufferSize\", \"logRetentionOption\", \"maximumFileSize\", and \"maximumNumberOfFiles\".","pos":[0,533],"nodes":[{"content":"The custom attributes that are returned by this method can be used in the XML configuration file to control the behavior of an instance of the <ph id=\"ph1\">&lt;xref:System.Diagnostics.EventSchemaTraceListener&gt;</ph> class.","pos":[0,200],"source":"The custom attributes that are returned by this method can be used in the XML configuration file to control the behavior of an instance of the <xref:System.Diagnostics.EventSchemaTraceListener> class."},{"content":"Using any other attribute causes a configuration exception.","pos":[201,260]},{"content":"The <ph id=\"ph1\">&lt;xref:System.Diagnostics.EventSchemaTraceListener.GetSupportedAttributes%2A&gt;</ph> method for the <ph id=\"ph2\">&lt;xref:System.Diagnostics.EventSchemaTraceListener&gt;</ph> returns the following string array values: \"bufferSize\", \"logRetentionOption\", \"maximumFileSize\", and \"maximumNumberOfFiles\".","pos":[261,533],"source":" The <xref:System.Diagnostics.EventSchemaTraceListener.GetSupportedAttributes%2A> method for the <xref:System.Diagnostics.EventSchemaTraceListener> returns the following string array values: \"bufferSize\", \"logRetentionOption\", \"maximumFileSize\", and \"maximumNumberOfFiles\"."}]}]}],"pos":[40027,40563],"yaml":true,"extradata":"MT"},{"content":"A <xref href=\"System.String\"></xref> array that contains the XML configuration attributes recognized by this listener.","nodes":[{"pos":[0,118],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.String\"&gt;&lt;/xref&gt;</ph> array that contains the XML configuration attributes recognized by this listener.","source":"A <xref href=\"System.String\"></xref> array that contains the XML configuration attributes recognized by this listener."}],"pos":[40719,40838],"yaml":true},{"content":"Gets a value indicating whether the trace listener is thread safe.","nodes":[{"pos":[0,66],"content":"Gets a value indicating whether the trace listener is thread safe.","nodes":[{"content":"Gets a value indicating whether the trace listener is thread safe.","pos":[0,66]}]}],"pos":[41920,41987],"yaml":true},{"content":"Always returns `true`.","nodes":[{"pos":[0,22],"content":"Always returns <ph id=\"ph1\">`true`</ph>.","source":"Always returns `true`."}],"pos":[42775,42798],"yaml":true},{"content":"Gets the maximum size of the log file.","nodes":[{"pos":[0,38],"content":"Gets the maximum size of the log file.","nodes":[{"content":"Gets the maximum size of the log file.","pos":[0,38]}]}],"pos":[43888,43927],"yaml":true},{"content":"The property value is set by the `maximumFileSize` parameter in the constructor or the `maximumFileSize` attribute in the configuration file. For performance reasons, you should set the maximum file size to a multiple of 1024 bytes. The <xref:System.Diagnostics.EventSchemaTraceListener.MaximumFileSize%2A> property value is not an absolute; it is a threshold that can be exceeded up to the size of the last message.  \n  \n The following table shows the possible and default values for file size that are associated with each trace log retention option. The values marked as N/A indicate that the <xref:System.Diagnostics.EventSchemaTraceListener.MaximumFileSize%2A> property is not checked for that <xref:System.Diagnostics.TraceLogRetentionOption> value.  \n  \n|TraceLogRetentionOption|Maximum file size|Default file size|  \n|-----------------------------|-----------------------|-----------------------|  \n|<xref:System.Diagnostics.TraceLogRetentionOption.LimitedCircularFiles>|N/A|-1|  \n|<xref:System.Diagnostics.TraceLogRetentionOption.LimitedSequentialFiles>|>0|4 KB|  \n|<xref:System.Diagnostics.TraceLogRetentionOption.SingleFileBoundedSize>|>0|4 KB|  \n|<xref:System.Diagnostics.TraceLogRetentionOption.SingleFileUnboundedSize>|>0|4 KB|  \n|<xref:System.Diagnostics.TraceLogRetentionOption.UnlimitedSequentialFiles>|>0|4 KB|","nodes":[{"pos":[0,416],"content":"The property value is set by the `maximumFileSize` parameter in the constructor or the `maximumFileSize` attribute in the configuration file. For performance reasons, you should set the maximum file size to a multiple of 1024 bytes. The <xref:System.Diagnostics.EventSchemaTraceListener.MaximumFileSize%2A> property value is not an absolute; it is a threshold that can be exceeded up to the size of the last message.","nodes":[{"content":"The property value is set by the <ph id=\"ph1\">`maximumFileSize`</ph> parameter in the constructor or the <ph id=\"ph2\">`maximumFileSize`</ph> attribute in the configuration file.","pos":[0,141],"source":"The property value is set by the `maximumFileSize` parameter in the constructor or the `maximumFileSize` attribute in the configuration file."},{"content":"For performance reasons, you should set the maximum file size to a multiple of 1024 bytes.","pos":[142,232]},{"content":"The <ph id=\"ph1\">&lt;xref:System.Diagnostics.EventSchemaTraceListener.MaximumFileSize%2A&gt;</ph> property value is not an absolute; it is a threshold that can be exceeded up to the size of the last message.","pos":[233,416],"source":" The <xref:System.Diagnostics.EventSchemaTraceListener.MaximumFileSize%2A> property value is not an absolute; it is a threshold that can be exceeded up to the size of the last message."}]},{"pos":[423,755],"content":"The following table shows the possible and default values for file size that are associated with each trace log retention option. The values marked as N/A indicate that the <xref:System.Diagnostics.EventSchemaTraceListener.MaximumFileSize%2A> property is not checked for that <xref:System.Diagnostics.TraceLogRetentionOption> value.","nodes":[{"content":"The following table shows the possible and default values for file size that are associated with each trace log retention option. The values marked as N/A indicate that the <xref:System.Diagnostics.EventSchemaTraceListener.MaximumFileSize%2A> property is not checked for that <xref:System.Diagnostics.TraceLogRetentionOption> value.","pos":[0,332],"nodes":[{"content":"The following table shows the possible and default values for file size that are associated with each trace log retention option.","pos":[0,129]},{"content":"The values marked as N/A indicate that the <ph id=\"ph1\">&lt;xref:System.Diagnostics.EventSchemaTraceListener.MaximumFileSize%2A&gt;</ph> property is not checked for that <ph id=\"ph2\">&lt;xref:System.Diagnostics.TraceLogRetentionOption&gt;</ph> value.","pos":[130,332],"source":" The values marked as N/A indicate that the <xref:System.Diagnostics.EventSchemaTraceListener.MaximumFileSize%2A> property is not checked for that <xref:System.Diagnostics.TraceLogRetentionOption> value."}]}]},{"pos":[762,785],"content":"TraceLogRetentionOption","nodes":[{"content":"TraceLogRetentionOption","pos":[0,23]}]},{"pos":[786,803],"content":"Maximum file size","nodes":[{"content":"Maximum file size","pos":[0,17]}]},{"pos":[804,821],"content":"Default file size","nodes":[{"content":"Default file size","pos":[0,17]}]},{"pos":[908,978],"content":"<xref:System.Diagnostics.TraceLogRetentionOption.LimitedCircularFiles>","nodes":[]},{"pos":[979,982],"content":"N/A","nodes":[{"content":"N/A","pos":[0,3]}]},{"pos":[983,985],"content":"-1","nodes":[{"content":"-1","pos":[0,2]}]},{"pos":[990,1062],"content":"<xref:System.Diagnostics.TraceLogRetentionOption.LimitedSequentialFiles>","nodes":[]},{"pos":[1063,1065],"content":">0","nodes":[{"content":"&gt;0","pos":[0,2],"source":">0"}]},{"pos":[1066,1070],"content":"4 KB","nodes":[{"content":"4 KB","pos":[0,4]}]},{"pos":[1075,1146],"content":"<xref:System.Diagnostics.TraceLogRetentionOption.SingleFileBoundedSize>","nodes":[]},{"pos":[1147,1149],"content":">0","nodes":[{"content":"&gt;0","pos":[0,2],"source":">0"}]},{"pos":[1150,1154],"content":"4 KB","nodes":[{"content":"4 KB","pos":[0,4]}]},{"pos":[1159,1232],"content":"<xref:System.Diagnostics.TraceLogRetentionOption.SingleFileUnboundedSize>","nodes":[]},{"pos":[1233,1235],"content":">0","nodes":[{"content":"&gt;0","pos":[0,2],"source":">0"}]},{"pos":[1236,1240],"content":"4 KB","nodes":[{"content":"4 KB","pos":[0,4]}]},{"pos":[1245,1319],"content":"<xref:System.Diagnostics.TraceLogRetentionOption.UnlimitedSequentialFiles>","nodes":[]},{"pos":[1320,1322],"content":">0","nodes":[{"content":"&gt;0","pos":[0,2],"source":">0"}]},{"pos":[1323,1327],"content":"4 KB","nodes":[{"content":"4 KB","pos":[0,4]}]}],"pos":[43938,45279],"yaml":true,"extradata":"MT"},{"content":"The maximum file size, in bytes.","nodes":[{"pos":[0,32],"content":"The maximum file size, in bytes.","nodes":[{"content":"The maximum file size, in bytes.","pos":[0,32]}]}],"pos":[46048,46081],"yaml":true},{"content":"Gets the maximum number of log files.","nodes":[{"pos":[0,37],"content":"Gets the maximum number of log files.","nodes":[{"content":"Gets the maximum number of log files.","pos":[0,37]}]}],"pos":[47204,47242],"yaml":true},{"content":"The property value is set by the `maximumNumberOfFiles` parameter in the constructor or the `maximumNumberOfFiles` attribute in the configuration file.  \n  \n The following table shows the possible and default values for file size and file count that are associated with each trace log retention option. The values marked as N/A indicate that the <xref:System.Diagnostics.EventSchemaTraceListener.MaximumNumberOfFiles%2A> property is not checked for that <xref:System.Diagnostics.TraceLogRetentionOption> value.  \n  \n|TraceLogRetentionOption|Maximum number of files|Default number of files|  \n|-----------------------------|-----------------------------|-----------------------------|  \n|<xref:System.Diagnostics.TraceLogRetentionOption.LimitedCircularFiles>|N/A|1|  \n|<xref:System.Diagnostics.TraceLogRetentionOption.LimitedSequentialFiles>|N/A|1|  \n|<xref:System.Diagnostics.TraceLogRetentionOption.SingleFileBoundedSize>|N/A|-1|  \n|<xref:System.Diagnostics.TraceLogRetentionOption.SingleFileUnboundedSize>|>0|1|  \n|<xref:System.Diagnostics.TraceLogRetentionOption.UnlimitedSequentialFiles>|>1|2|","nodes":[{"pos":[0,151],"content":"The property value is set by the <ph id=\"ph1\">`maximumNumberOfFiles`</ph> parameter in the constructor or the <ph id=\"ph2\">`maximumNumberOfFiles`</ph> attribute in the configuration file.","source":"The property value is set by the `maximumNumberOfFiles` parameter in the constructor or the `maximumNumberOfFiles` attribute in the configuration file."},{"pos":[158,510],"content":"The following table shows the possible and default values for file size and file count that are associated with each trace log retention option. The values marked as N/A indicate that the <xref:System.Diagnostics.EventSchemaTraceListener.MaximumNumberOfFiles%2A> property is not checked for that <xref:System.Diagnostics.TraceLogRetentionOption> value.","nodes":[{"content":"The following table shows the possible and default values for file size and file count that are associated with each trace log retention option. The values marked as N/A indicate that the <xref:System.Diagnostics.EventSchemaTraceListener.MaximumNumberOfFiles%2A> property is not checked for that <xref:System.Diagnostics.TraceLogRetentionOption> value.","pos":[0,352],"nodes":[{"content":"The following table shows the possible and default values for file size and file count that are associated with each trace log retention option.","pos":[0,144]},{"content":"The values marked as N/A indicate that the <ph id=\"ph1\">&lt;xref:System.Diagnostics.EventSchemaTraceListener.MaximumNumberOfFiles%2A&gt;</ph> property is not checked for that <ph id=\"ph2\">&lt;xref:System.Diagnostics.TraceLogRetentionOption&gt;</ph> value.","pos":[145,352],"source":" The values marked as N/A indicate that the <xref:System.Diagnostics.EventSchemaTraceListener.MaximumNumberOfFiles%2A> property is not checked for that <xref:System.Diagnostics.TraceLogRetentionOption> value."}]}]},{"pos":[517,540],"content":"TraceLogRetentionOption","nodes":[{"content":"TraceLogRetentionOption","pos":[0,23]}]},{"pos":[541,564],"content":"Maximum number of files","nodes":[{"content":"Maximum number of files","pos":[0,23]}]},{"pos":[565,588],"content":"Default number of files","nodes":[{"content":"Default number of files","pos":[0,23]}]},{"pos":[687,757],"content":"<xref:System.Diagnostics.TraceLogRetentionOption.LimitedCircularFiles>","nodes":[]},{"pos":[758,761],"content":"N/A","nodes":[{"content":"N/A","pos":[0,3]}]},{"pos":[762,763],"content":"1","nodes":[{"content":"1","pos":[0,1]}]},{"pos":[768,840],"content":"<xref:System.Diagnostics.TraceLogRetentionOption.LimitedSequentialFiles>","nodes":[]},{"pos":[841,844],"content":"N/A","nodes":[{"content":"N/A","pos":[0,3]}]},{"pos":[845,846],"content":"1","nodes":[{"content":"1","pos":[0,1]}]},{"pos":[851,922],"content":"<xref:System.Diagnostics.TraceLogRetentionOption.SingleFileBoundedSize>","nodes":[]},{"pos":[923,926],"content":"N/A","nodes":[{"content":"N/A","pos":[0,3]}]},{"pos":[927,929],"content":"-1","nodes":[{"content":"-1","pos":[0,2]}]},{"pos":[934,1007],"content":"<xref:System.Diagnostics.TraceLogRetentionOption.SingleFileUnboundedSize>","nodes":[]},{"pos":[1008,1010],"content":">0","nodes":[{"content":"&gt;0","pos":[0,2],"source":">0"}]},{"pos":[1011,1012],"content":"1","nodes":[{"content":"1","pos":[0,1]}]},{"pos":[1017,1091],"content":"<xref:System.Diagnostics.TraceLogRetentionOption.UnlimitedSequentialFiles>","nodes":[]},{"pos":[1092,1094],"content":">1","nodes":[{"content":"&gt;1","pos":[0,2],"source":">1"}]},{"pos":[1095,1096],"content":"2","nodes":[{"content":"2","pos":[0,1]}]}],"pos":[47253,48363],"yaml":true,"extradata":"MT"},{"content":"The maximum number of log files, determined by the value of the <xref href=\"System.Diagnostics.EventSchemaTraceListener.TraceLogRetentionOption\"></xref> property for the file.","nodes":[{"pos":[0,175],"content":"The maximum number of log files, determined by the value of the <ph id=\"ph1\">&lt;xref href=\"System.Diagnostics.EventSchemaTraceListener.TraceLogRetentionOption\"&gt;&lt;/xref&gt;</ph> property for the file.","source":"The maximum number of log files, determined by the value of the <xref href=\"System.Diagnostics.EventSchemaTraceListener.TraceLogRetentionOption\"></xref> property for the file."}],"pos":[49141,49317],"yaml":true},{"content":"Writes trace information, a single data object, and event information to the log file.","nodes":[{"pos":[0,86],"content":"Writes trace information, a single data object, and event information to the log file.","nodes":[{"content":"Writes trace information, a single data object, and event information to the log file.","pos":[0,86]}]}],"pos":[50878,50965],"yaml":true},{"content":"The `eventCache`, `source`, `eventType`, and `id` parameters are used in the header and footer of the trace. The `id` parameter is converted to an unsigned integer before it is written. Therefore, a negative `id` value is written as a large positive integer. The `data` parameter is written as a `Data` node in the `UserData` element. The `ToString` method of the data object is used to convert the object to a string.  \n  \n> [!IMPORTANT]\n>  This method is not intended to be called directly by application code. It is called by methods of the <xref:System.Diagnostics.Debug>, <xref:System.Diagnostics.Trace>, and <xref:System.Diagnostics.TraceSource> classes to write trace data.","nodes":[{"pos":[0,418],"content":"The `eventCache`, `source`, `eventType`, and `id` parameters are used in the header and footer of the trace. The `id` parameter is converted to an unsigned integer before it is written. Therefore, a negative `id` value is written as a large positive integer. The `data` parameter is written as a `Data` node in the `UserData` element. The `ToString` method of the data object is used to convert the object to a string.","nodes":[{"content":"The <ph id=\"ph1\">`eventCache`</ph>, <ph id=\"ph2\">`source`</ph>, <ph id=\"ph3\">`eventType`</ph>, and <ph id=\"ph4\">`id`</ph> parameters are used in the header and footer of the trace.","pos":[0,108],"source":"The `eventCache`, `source`, `eventType`, and `id` parameters are used in the header and footer of the trace."},{"content":"The <ph id=\"ph1\">`id`</ph> parameter is converted to an unsigned integer before it is written.","pos":[109,185],"source":" The `id` parameter is converted to an unsigned integer before it is written."},{"content":"Therefore, a negative <ph id=\"ph1\">`id`</ph> value is written as a large positive integer.","pos":[186,258],"source":" Therefore, a negative `id` value is written as a large positive integer."},{"content":"The <ph id=\"ph1\">`data`</ph> parameter is written as a <ph id=\"ph2\">`Data`</ph> node in the <ph id=\"ph3\">`UserData`</ph> element.","pos":[259,334],"source":" The `data` parameter is written as a `Data` node in the `UserData` element."},{"content":"The <ph id=\"ph1\">`ToString`</ph> method of the data object is used to convert the object to a string.","pos":[335,418],"source":" The `ToString` method of the data object is used to convert the object to a string."}]},{"pos":[426,680],"content":"[!IMPORTANT]\n This method is not intended to be called directly by application code. It is called by methods of the <xref:System.Diagnostics.Debug>, <xref:System.Diagnostics.Trace>, and <xref:System.Diagnostics.TraceSource> classes to write trace data.","leadings":["","> "],"nodes":[{"content":" This method is not intended to be called directly by application code. It is called by methods of the <xref:System.Diagnostics.Debug>, <xref:System.Diagnostics.Trace>, and <xref:System.Diagnostics.TraceSource> classes to write trace data.","pos":[13,252],"nodes":[{"content":"This method is not intended to be called directly by application code.","pos":[1,71]},{"content":"It is called by methods of the <ph id=\"ph1\">&lt;xref:System.Diagnostics.Debug&gt;</ph>, <ph id=\"ph2\">&lt;xref:System.Diagnostics.Trace&gt;</ph>, and <ph id=\"ph3\">&lt;xref:System.Diagnostics.TraceSource&gt;</ph> classes to write trace data.","pos":[72,239],"source":" It is called by methods of the <xref:System.Diagnostics.Debug>, <xref:System.Diagnostics.Trace>, and <xref:System.Diagnostics.TraceSource> classes to write trace data."}]}]}],"pos":[50976,51662],"yaml":true,"extradata":"MT"},{"content":"A <xref href=\"System.Diagnostics.TraceEventCache\"></xref> that contains the current process ID, thread ID, and stack trace information.","nodes":[{"pos":[0,135],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Diagnostics.TraceEventCache\"&gt;&lt;/xref&gt;</ph> that contains the current process ID, thread ID, and stack trace information.","source":"A <xref href=\"System.Diagnostics.TraceEventCache\"></xref> that contains the current process ID, thread ID, and stack trace information."}],"pos":[52000,52136],"yaml":true},{"content":"The source name.","nodes":[{"pos":[0,16],"content":"The source name.","nodes":[{"content":"The source name.","pos":[0,16]}]}],"pos":[52198,52215],"yaml":true},{"content":"One of the <xref href=\"System.Diagnostics.TraceEventType\"></xref> values.","nodes":[{"pos":[0,73],"content":"One of the <ph id=\"ph1\">&lt;xref href=\"System.Diagnostics.TraceEventType\"&gt;&lt;/xref&gt;</ph> values.","source":"One of the <xref href=\"System.Diagnostics.TraceEventType\"></xref> values."}],"pos":[52300,52374],"yaml":true},{"content":"A numeric identifier for the event.","nodes":[{"pos":[0,35],"content":"A numeric identifier for the event.","nodes":[{"content":"A numeric identifier for the event.","pos":[0,35]}]}],"pos":[52431,52467],"yaml":true},{"content":"A data object to emit.","nodes":[{"pos":[0,22],"content":"A data object to emit.","nodes":[{"content":"A data object to emit.","pos":[0,22]}]}],"pos":[52527,52550],"yaml":true},{"content":"Writes trace information, multiple data objects, and event information to the log file.","nodes":[{"pos":[0,87],"content":"Writes trace information, multiple data objects, and event information to the log file.","nodes":[{"content":"Writes trace information, multiple data objects, and event information to the log file.","pos":[0,87]}]}],"pos":[54178,54266],"yaml":true},{"content":"The `eventCache`, `source`, `eventType`, and `id` parameters are used in the header and footer of the trace. The `id` parameter is converted to an unsigned integer before it is written. Therefore, a negative `id` value is written as a large positive integer. The objects in the `data` parameter array are written as `Data` nodes in the `UserData` element. The `ToString` method of each data object is used to convert the object to a string.  \n  \n> [!IMPORTANT]\n>  This method is not intended to be called directly by application code. It is called by methods of the <xref:System.Diagnostics.Debug>, <xref:System.Diagnostics.Trace>, and <xref:System.Diagnostics.TraceSource> classes to write trace data.","nodes":[{"pos":[0,440],"content":"The `eventCache`, `source`, `eventType`, and `id` parameters are used in the header and footer of the trace. The `id` parameter is converted to an unsigned integer before it is written. Therefore, a negative `id` value is written as a large positive integer. The objects in the `data` parameter array are written as `Data` nodes in the `UserData` element. The `ToString` method of each data object is used to convert the object to a string.","nodes":[{"content":"The <ph id=\"ph1\">`eventCache`</ph>, <ph id=\"ph2\">`source`</ph>, <ph id=\"ph3\">`eventType`</ph>, and <ph id=\"ph4\">`id`</ph> parameters are used in the header and footer of the trace.","pos":[0,108],"source":"The `eventCache`, `source`, `eventType`, and `id` parameters are used in the header and footer of the trace."},{"content":"The <ph id=\"ph1\">`id`</ph> parameter is converted to an unsigned integer before it is written.","pos":[109,185],"source":" The `id` parameter is converted to an unsigned integer before it is written."},{"content":"Therefore, a negative <ph id=\"ph1\">`id`</ph> value is written as a large positive integer.","pos":[186,258],"source":" Therefore, a negative `id` value is written as a large positive integer."},{"content":"The objects in the <ph id=\"ph1\">`data`</ph> parameter array are written as <ph id=\"ph2\">`Data`</ph> nodes in the <ph id=\"ph3\">`UserData`</ph> element.","pos":[259,355],"source":" The objects in the `data` parameter array are written as `Data` nodes in the `UserData` element."},{"content":"The <ph id=\"ph1\">`ToString`</ph> method of each data object is used to convert the object to a string.","pos":[356,440],"source":" The `ToString` method of each data object is used to convert the object to a string."}]},{"pos":[448,702],"content":"[!IMPORTANT]\n This method is not intended to be called directly by application code. It is called by methods of the <xref:System.Diagnostics.Debug>, <xref:System.Diagnostics.Trace>, and <xref:System.Diagnostics.TraceSource> classes to write trace data.","leadings":["","> "],"nodes":[{"content":" This method is not intended to be called directly by application code. It is called by methods of the <xref:System.Diagnostics.Debug>, <xref:System.Diagnostics.Trace>, and <xref:System.Diagnostics.TraceSource> classes to write trace data.","pos":[13,252],"nodes":[{"content":"This method is not intended to be called directly by application code.","pos":[1,71]},{"content":"It is called by methods of the <ph id=\"ph1\">&lt;xref:System.Diagnostics.Debug&gt;</ph>, <ph id=\"ph2\">&lt;xref:System.Diagnostics.Trace&gt;</ph>, and <ph id=\"ph3\">&lt;xref:System.Diagnostics.TraceSource&gt;</ph> classes to write trace data.","pos":[72,239],"source":" It is called by methods of the <xref:System.Diagnostics.Debug>, <xref:System.Diagnostics.Trace>, and <xref:System.Diagnostics.TraceSource> classes to write trace data."}]}]}],"pos":[54277,54985],"yaml":true,"extradata":"MT"},{"content":"A <xref href=\"System.Diagnostics.TraceEventCache\"></xref> that contains the current process ID, thread ID, and stack trace information.","nodes":[{"pos":[0,135],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Diagnostics.TraceEventCache\"&gt;&lt;/xref&gt;</ph> that contains the current process ID, thread ID, and stack trace information.","source":"A <xref href=\"System.Diagnostics.TraceEventCache\"></xref> that contains the current process ID, thread ID, and stack trace information."}],"pos":[55325,55461],"yaml":true},{"content":"The source name.","nodes":[{"pos":[0,16],"content":"The source name.","nodes":[{"content":"The source name.","pos":[0,16]}]}],"pos":[55523,55540],"yaml":true},{"content":"One of the <xref href=\"System.Diagnostics.TraceEventType\"></xref> values.","nodes":[{"pos":[0,73],"content":"One of the <ph id=\"ph1\">&lt;xref href=\"System.Diagnostics.TraceEventType\"&gt;&lt;/xref&gt;</ph> values.","source":"One of the <xref href=\"System.Diagnostics.TraceEventType\"></xref> values."}],"pos":[55625,55699],"yaml":true},{"content":"A numeric identifier for the event.","nodes":[{"pos":[0,35],"content":"A numeric identifier for the event.","nodes":[{"content":"A numeric identifier for the event.","pos":[0,35]}]}],"pos":[55756,55792],"yaml":true},{"content":"An array of data objects to emit.","nodes":[{"pos":[0,33],"content":"An array of data objects to emit.","nodes":[{"content":"An array of data objects to emit.","pos":[0,33]}]}],"pos":[55854,55888],"yaml":true},{"content":"Writes trace information, a message, and event information to the log file.","nodes":[{"pos":[0,75],"content":"Writes trace information, a message, and event information to the log file.","nodes":[{"content":"Writes trace information, a message, and event information to the log file.","pos":[0,75]}]}],"pos":[57510,57586],"yaml":true},{"content":"The `eventCache`, `source`, `eventType`, and `id` parameters are used in the header and footer of the trace. The `id` parameter is converted to an unsigned integer before it is written. Therefore, a negative `id` value is written as a large positive integer. The `message` parameter is written as a `Data` node in the `EventData` element.  \n  \n> [!IMPORTANT]\n>  This method is not intended to be called directly by application code. It is called by methods of the <xref:System.Diagnostics.Debug>, <xref:System.Diagnostics.Trace>, and <xref:System.Diagnostics.TraceSource> classes to write trace data.","nodes":[{"pos":[0,338],"content":"The `eventCache`, `source`, `eventType`, and `id` parameters are used in the header and footer of the trace. The `id` parameter is converted to an unsigned integer before it is written. Therefore, a negative `id` value is written as a large positive integer. The `message` parameter is written as a `Data` node in the `EventData` element.","nodes":[{"content":"The <ph id=\"ph1\">`eventCache`</ph>, <ph id=\"ph2\">`source`</ph>, <ph id=\"ph3\">`eventType`</ph>, and <ph id=\"ph4\">`id`</ph> parameters are used in the header and footer of the trace.","pos":[0,108],"source":"The `eventCache`, `source`, `eventType`, and `id` parameters are used in the header and footer of the trace."},{"content":"The <ph id=\"ph1\">`id`</ph> parameter is converted to an unsigned integer before it is written.","pos":[109,185],"source":" The `id` parameter is converted to an unsigned integer before it is written."},{"content":"Therefore, a negative <ph id=\"ph1\">`id`</ph> value is written as a large positive integer.","pos":[186,258],"source":" Therefore, a negative `id` value is written as a large positive integer."},{"content":"The <ph id=\"ph1\">`message`</ph> parameter is written as a <ph id=\"ph2\">`Data`</ph> node in the <ph id=\"ph3\">`EventData`</ph> element.","pos":[259,338],"source":" The `message` parameter is written as a `Data` node in the `EventData` element."}]},{"pos":[346,600],"content":"[!IMPORTANT]\n This method is not intended to be called directly by application code. It is called by methods of the <xref:System.Diagnostics.Debug>, <xref:System.Diagnostics.Trace>, and <xref:System.Diagnostics.TraceSource> classes to write trace data.","leadings":["","> "],"nodes":[{"content":" This method is not intended to be called directly by application code. It is called by methods of the <xref:System.Diagnostics.Debug>, <xref:System.Diagnostics.Trace>, and <xref:System.Diagnostics.TraceSource> classes to write trace data.","pos":[13,252],"nodes":[{"content":"This method is not intended to be called directly by application code.","pos":[1,71]},{"content":"It is called by methods of the <ph id=\"ph1\">&lt;xref:System.Diagnostics.Debug&gt;</ph>, <ph id=\"ph2\">&lt;xref:System.Diagnostics.Trace&gt;</ph>, and <ph id=\"ph3\">&lt;xref:System.Diagnostics.TraceSource&gt;</ph> classes to write trace data.","pos":[72,239],"source":" It is called by methods of the <xref:System.Diagnostics.Debug>, <xref:System.Diagnostics.Trace>, and <xref:System.Diagnostics.TraceSource> classes to write trace data."}]}]}],"pos":[57597,58203],"yaml":true,"extradata":"MT"},{"content":"A <xref href=\"System.Diagnostics.TraceEventCache\"></xref> that contains the current process ID, thread ID, and stack trace information.","nodes":[{"pos":[0,135],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Diagnostics.TraceEventCache\"&gt;&lt;/xref&gt;</ph> that contains the current process ID, thread ID, and stack trace information.","source":"A <xref href=\"System.Diagnostics.TraceEventCache\"></xref> that contains the current process ID, thread ID, and stack trace information."}],"pos":[58545,58681],"yaml":true},{"content":"The source name.","nodes":[{"pos":[0,16],"content":"The source name.","nodes":[{"content":"The source name.","pos":[0,16]}]}],"pos":[58743,58760],"yaml":true},{"content":"One of the <xref href=\"System.Diagnostics.TraceEventType\"></xref> values.","nodes":[{"pos":[0,73],"content":"One of the <ph id=\"ph1\">&lt;xref href=\"System.Diagnostics.TraceEventType\"&gt;&lt;/xref&gt;</ph> values.","source":"One of the <xref href=\"System.Diagnostics.TraceEventType\"></xref> values."}],"pos":[58845,58919],"yaml":true},{"content":"A numeric identifier for the event.","nodes":[{"pos":[0,35],"content":"A numeric identifier for the event.","nodes":[{"content":"A numeric identifier for the event.","pos":[0,35]}]}],"pos":[58976,59012],"yaml":true},{"content":"The message to write.","nodes":[{"pos":[0,21],"content":"The message to write.","nodes":[{"content":"The message to write.","pos":[0,21]}]}],"pos":[59075,59097],"yaml":true},{"content":"Writes trace information, a formatted message, and event information to the log file.","nodes":[{"pos":[0,85],"content":"Writes trace information, a formatted message, and event information to the log file.","nodes":[{"content":"Writes trace information, a formatted message, and event information to the log file.","pos":[0,85]}]}],"pos":[60798,60884],"yaml":true},{"content":"The `eventCache`, `source`, `eventType`, and `id` parameters are used in the header and footer of the trace. The `id` parameter is converted to an unsigned integer before it is written. Therefore, a negative `id` value is written as a large positive integer. The <xref:System.String.Format%28System.String%2CSystem.Object%5B%5D%29?displayProperty=fullName> method is called and the `format` string and `args` array are passed in as parameters. This method formats the `args` object array and writes the formatted array as the `Data` node in the `EventData` element.  \n  \n> [!IMPORTANT]\n>  This method is not intended to be called directly by application code. It is called by methods of the <xref:System.Diagnostics.Debug>, <xref:System.Diagnostics.Trace>, and <xref:System.Diagnostics.TraceSource> classes to write trace data.","nodes":[{"pos":[0,565],"content":"The `eventCache`, `source`, `eventType`, and `id` parameters are used in the header and footer of the trace. The `id` parameter is converted to an unsigned integer before it is written. Therefore, a negative `id` value is written as a large positive integer. The <xref:System.String.Format%28System.String%2CSystem.Object%5B%5D%29?displayProperty=fullName> method is called and the `format` string and `args` array are passed in as parameters. This method formats the `args` object array and writes the formatted array as the `Data` node in the `EventData` element.","nodes":[{"content":"The <ph id=\"ph1\">`eventCache`</ph>, <ph id=\"ph2\">`source`</ph>, <ph id=\"ph3\">`eventType`</ph>, and <ph id=\"ph4\">`id`</ph> parameters are used in the header and footer of the trace.","pos":[0,108],"source":"The `eventCache`, `source`, `eventType`, and `id` parameters are used in the header and footer of the trace."},{"content":"The <ph id=\"ph1\">`id`</ph> parameter is converted to an unsigned integer before it is written.","pos":[109,185],"source":" The `id` parameter is converted to an unsigned integer before it is written."},{"content":"Therefore, a negative <ph id=\"ph1\">`id`</ph> value is written as a large positive integer.","pos":[186,258],"source":" Therefore, a negative `id` value is written as a large positive integer."},{"content":"The <ph id=\"ph1\">&lt;xref:System.String.Format%28System.String%2CSystem.Object%5B%5D%29?displayProperty=fullName&gt;</ph> method is called and the <ph id=\"ph2\">`format`</ph> string and <ph id=\"ph3\">`args`</ph> array are passed in as parameters.","pos":[259,443],"source":" The <xref:System.String.Format%28System.String%2CSystem.Object%5B%5D%29?displayProperty=fullName> method is called and the `format` string and `args` array are passed in as parameters."},{"content":"This method formats the <ph id=\"ph1\">`args`</ph> object array and writes the formatted array as the <ph id=\"ph2\">`Data`</ph> node in the <ph id=\"ph3\">`EventData`</ph> element.","pos":[444,565],"source":" This method formats the `args` object array and writes the formatted array as the `Data` node in the `EventData` element."}]},{"pos":[573,827],"content":"[!IMPORTANT]\n This method is not intended to be called directly by application code. It is called by methods of the <xref:System.Diagnostics.Debug>, <xref:System.Diagnostics.Trace>, and <xref:System.Diagnostics.TraceSource> classes to write trace data.","leadings":["","> "],"nodes":[{"content":" This method is not intended to be called directly by application code. It is called by methods of the <xref:System.Diagnostics.Debug>, <xref:System.Diagnostics.Trace>, and <xref:System.Diagnostics.TraceSource> classes to write trace data.","pos":[13,252],"nodes":[{"content":"This method is not intended to be called directly by application code.","pos":[1,71]},{"content":"It is called by methods of the <ph id=\"ph1\">&lt;xref:System.Diagnostics.Debug&gt;</ph>, <ph id=\"ph2\">&lt;xref:System.Diagnostics.Trace&gt;</ph>, and <ph id=\"ph3\">&lt;xref:System.Diagnostics.TraceSource&gt;</ph> classes to write trace data.","pos":[72,239],"source":" It is called by methods of the <xref:System.Diagnostics.Debug>, <xref:System.Diagnostics.Trace>, and <xref:System.Diagnostics.TraceSource> classes to write trace data."}]}]}],"pos":[60895,61728],"yaml":true,"extradata":"MT"},{"content":"A <xref href=\"System.Diagnostics.TraceEventCache\"></xref> that contains the current process ID, thread ID, and stack trace information.","nodes":[{"pos":[0,135],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Diagnostics.TraceEventCache\"&gt;&lt;/xref&gt;</ph> that contains the current process ID, thread ID, and stack trace information.","source":"A <xref href=\"System.Diagnostics.TraceEventCache\"></xref> that contains the current process ID, thread ID, and stack trace information."}],"pos":[62084,62220],"yaml":true},{"content":"The source name.","nodes":[{"pos":[0,16],"content":"The source name.","nodes":[{"content":"The source name.","pos":[0,16]}]}],"pos":[62282,62299],"yaml":true},{"content":"One of the <xref href=\"System.Diagnostics.TraceEventType\"></xref> values.","nodes":[{"pos":[0,73],"content":"One of the <ph id=\"ph1\">&lt;xref href=\"System.Diagnostics.TraceEventType\"&gt;&lt;/xref&gt;</ph> values.","source":"One of the <xref href=\"System.Diagnostics.TraceEventType\"></xref> values."}],"pos":[62384,62458],"yaml":true},{"content":"A numeric identifier for the event.","nodes":[{"pos":[0,35],"content":"A numeric identifier for the event.","nodes":[{"content":"A numeric identifier for the event.","pos":[0,35]}]}],"pos":[62515,62551],"yaml":true},{"content":"A format string that contains zero or more format items that correspond to objects in the <code>args</code> array.","nodes":[{"pos":[0,114],"content":"A format string that contains zero or more format items that correspond to objects in the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">args</ph><ept id=\"p1\">&lt;/code&gt;</ept> array.","source":"A format string that contains zero or more format items that correspond to objects in the <code>args</code> array."}],"pos":[62613,62728],"yaml":true},{"content":"An object array that contains zero or more objects to format.","nodes":[{"pos":[0,61],"content":"An object array that contains zero or more objects to format.","nodes":[{"content":"An object array that contains zero or more objects to format.","pos":[0,61]}]}],"pos":[62790,62852],"yaml":true},{"content":"Gets the trace log retention option for the file.","nodes":[{"pos":[0,49],"content":"Gets the trace log retention option for the file.","nodes":[{"content":"Gets the trace log retention option for the file.","pos":[0,49]}]}],"pos":[64054,64104],"yaml":true},{"content":"One of the <xref href=\"System.Diagnostics.TraceLogRetentionOption\"></xref> values. The default is <xref href=\"System.Diagnostics.TraceLogRetentionOption.SingleFileUnboundedSize\"></xref>.","nodes":[{"pos":[0,186],"content":"One of the <xref href=\"System.Diagnostics.TraceLogRetentionOption\"></xref> values. The default is <xref href=\"System.Diagnostics.TraceLogRetentionOption.SingleFileUnboundedSize\"></xref>.","nodes":[{"content":"One of the <ph id=\"ph1\">&lt;xref href=\"System.Diagnostics.TraceLogRetentionOption\"&gt;&lt;/xref&gt;</ph> values.","pos":[0,82],"source":"One of the <xref href=\"System.Diagnostics.TraceLogRetentionOption\"></xref> values."},{"content":"The default is <ph id=\"ph1\">&lt;xref href=\"System.Diagnostics.TraceLogRetentionOption.SingleFileUnboundedSize\"&gt;&lt;/xref&gt;</ph>.","pos":[83,186],"source":" The default is <xref href=\"System.Diagnostics.TraceLogRetentionOption.SingleFileUnboundedSize\"></xref>."}]}],"pos":[64971,65158],"yaml":true},{"content":"Writes trace information, including the identity of a related activity, a message, and event information, to the log file.","nodes":[{"pos":[0,122],"content":"Writes trace information, including the identity of a related activity, a message, and event information, to the log file.","nodes":[{"content":"Writes trace information, including the identity of a related activity, a message, and event information, to the log file.","pos":[0,122]}]}],"pos":[66650,66773],"yaml":true},{"content":"The <xref:System.Diagnostics.EventSchemaTraceListener.TraceTransfer%2A> method is used to correlate related traces. The `eventCache`, `source`, `id`, and `relatedActivityId` parameters are used in the header and footer of the trace. The `id` parameter is converted to an unsigned integer before it is written. Therefore, a negative `id` value is written as a large positive integer. The `message` parameter is written as the `Data` element. The <xref:System.Guid.ToString%28System.String%29?displayProperty=fullName> method is called to convert the `relatedActivityId` value to a \"B\" formatted string, which appears in the header. The `Opcode` element in the footer identifies the trace event type as a <xref:System.Diagnostics.TraceEventType.Transfer>.  \n  \n> [!IMPORTANT]\n>  The <xref:System.Diagnostics.EventSchemaTraceListener.TraceTransfer%2A> method should not be called by application code. It is intended to be used by a <xref:System.Diagnostics.TraceSource> object to emit the trace information for its <xref:System.Diagnostics.TraceSource.TraceTransfer%2A> method.","nodes":[{"pos":[0,753],"content":"The <xref:System.Diagnostics.EventSchemaTraceListener.TraceTransfer%2A> method is used to correlate related traces. The `eventCache`, `source`, `id`, and `relatedActivityId` parameters are used in the header and footer of the trace. The `id` parameter is converted to an unsigned integer before it is written. Therefore, a negative `id` value is written as a large positive integer. The `message` parameter is written as the `Data` element. The <xref:System.Guid.ToString%28System.String%29?displayProperty=fullName> method is called to convert the `relatedActivityId` value to a \"B\" formatted string, which appears in the header. The `Opcode` element in the footer identifies the trace event type as a <xref:System.Diagnostics.TraceEventType.Transfer>.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Diagnostics.EventSchemaTraceListener.TraceTransfer%2A&gt;</ph> method is used to correlate related traces.","pos":[0,115],"source":"The <xref:System.Diagnostics.EventSchemaTraceListener.TraceTransfer%2A> method is used to correlate related traces."},{"content":"The <ph id=\"ph1\">`eventCache`</ph>, <ph id=\"ph2\">`source`</ph>, <ph id=\"ph3\">`id`</ph>, and <ph id=\"ph4\">`relatedActivityId`</ph> parameters are used in the header and footer of the trace.","pos":[116,232],"source":" The `eventCache`, `source`, `id`, and `relatedActivityId` parameters are used in the header and footer of the trace."},{"content":"The <ph id=\"ph1\">`id`</ph> parameter is converted to an unsigned integer before it is written.","pos":[233,309],"source":" The `id` parameter is converted to an unsigned integer before it is written."},{"content":"Therefore, a negative <ph id=\"ph1\">`id`</ph> value is written as a large positive integer.","pos":[310,382],"source":" Therefore, a negative `id` value is written as a large positive integer."},{"content":"The <ph id=\"ph1\">`message`</ph> parameter is written as the <ph id=\"ph2\">`Data`</ph> element.","pos":[383,440],"source":" The `message` parameter is written as the `Data` element."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Guid.ToString%28System.String%29?displayProperty=fullName&gt;</ph> method is called to convert the <ph id=\"ph2\">`relatedActivityId`</ph> value to a \"B\" formatted string, which appears in the header.","pos":[441,630],"source":" The <xref:System.Guid.ToString%28System.String%29?displayProperty=fullName> method is called to convert the `relatedActivityId` value to a \"B\" formatted string, which appears in the header."},{"content":"The <ph id=\"ph1\">`Opcode`</ph> element in the footer identifies the trace event type as a <ph id=\"ph2\">&lt;xref:System.Diagnostics.TraceEventType.Transfer&gt;</ph>.","pos":[631,753],"source":" The `Opcode` element in the footer identifies the trace event type as a <xref:System.Diagnostics.TraceEventType.Transfer>."}]},{"pos":[761,1074],"content":"[!IMPORTANT]\n The <xref:System.Diagnostics.EventSchemaTraceListener.TraceTransfer%2A> method should not be called by application code. It is intended to be used by a <xref:System.Diagnostics.TraceSource> object to emit the trace information for its <xref:System.Diagnostics.TraceSource.TraceTransfer%2A> method.","leadings":["","> "],"nodes":[{"content":" The <xref:System.Diagnostics.EventSchemaTraceListener.TraceTransfer%2A> method should not be called by application code. It is intended to be used by a <xref:System.Diagnostics.TraceSource> object to emit the trace information for its <xref:System.Diagnostics.TraceSource.TraceTransfer%2A> method.","pos":[13,311],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Diagnostics.EventSchemaTraceListener.TraceTransfer%2A&gt;</ph> method should not be called by application code.","pos":[1,121],"source":" The <xref:System.Diagnostics.EventSchemaTraceListener.TraceTransfer%2A> method should not be called by application code."},{"content":"It is intended to be used by a <ph id=\"ph1\">&lt;xref:System.Diagnostics.TraceSource&gt;</ph> object to emit the trace information for its <ph id=\"ph2\">&lt;xref:System.Diagnostics.TraceSource.TraceTransfer%2A&gt;</ph> method.","pos":[122,298],"source":" It is intended to be used by a <xref:System.Diagnostics.TraceSource> object to emit the trace information for its <xref:System.Diagnostics.TraceSource.TraceTransfer%2A> method."}]}]}],"pos":[66784,67866],"yaml":true,"extradata":"MT"},{"content":"A <xref href=\"System.Diagnostics.TraceEventCache\"></xref> that contains the current process ID, thread ID, and stack trace information.","nodes":[{"pos":[0,135],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Diagnostics.TraceEventCache\"&gt;&lt;/xref&gt;</ph> that contains the current process ID, thread ID, and stack trace information.","source":"A <xref href=\"System.Diagnostics.TraceEventCache\"></xref> that contains the current process ID, thread ID, and stack trace information."}],"pos":[68190,68326],"yaml":true},{"content":"The source name.","nodes":[{"pos":[0,16],"content":"The source name.","nodes":[{"content":"The source name.","pos":[0,16]}]}],"pos":[68388,68405],"yaml":true},{"content":"A numeric identifier for the event.","nodes":[{"pos":[0,35],"content":"A numeric identifier for the event.","nodes":[{"content":"A numeric identifier for the event.","pos":[0,35]}]}],"pos":[68462,68498],"yaml":true},{"content":"A trace message to write.","nodes":[{"pos":[0,25],"content":"A trace message to write.","nodes":[{"content":"A trace message to write.","pos":[0,25]}]}],"pos":[68561,68587],"yaml":true},{"content":"A <xref href=\"System.Guid\"></xref> structure that identifies a related activity.","nodes":[{"pos":[0,80],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Guid\"&gt;&lt;/xref&gt;</ph> structure that identifies a related activity.","source":"A <xref href=\"System.Guid\"></xref> structure that identifies a related activity."}],"pos":[68658,68739],"yaml":true},{"content":"Writes a message to the log file without providing any additional context information.","nodes":[{"pos":[0,86],"content":"Writes a message to the log file without providing any additional context information.","nodes":[{"content":"Writes a message to the log file without providing any additional context information.","pos":[0,86]}]}],"pos":[69903,69990],"yaml":true},{"content":"The <xref:System.Diagnostics.EventSchemaTraceListener.TraceEvent%2A> method is called to log the message as an <xref:System.Diagnostics.TraceEventType.Information> event.  \n  \n> [!IMPORTANT]\n>  This method is not intended to be called directly by application code. It is called by methods of the <xref:System.Diagnostics.Debug>, <xref:System.Diagnostics.Trace>, and <xref:System.Diagnostics.TraceSource> classes to write trace data.","nodes":[{"pos":[0,170],"content":"The <xref:System.Diagnostics.EventSchemaTraceListener.TraceEvent%2A> method is called to log the message as an <xref:System.Diagnostics.TraceEventType.Information> event.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Diagnostics.EventSchemaTraceListener.TraceEvent%2A&gt;</ph> method is called to log the message as an <ph id=\"ph2\">&lt;xref:System.Diagnostics.TraceEventType.Information&gt;</ph> event.","pos":[0,170],"source":"The <xref:System.Diagnostics.EventSchemaTraceListener.TraceEvent%2A> method is called to log the message as an <xref:System.Diagnostics.TraceEventType.Information> event."}]},{"pos":[178,432],"content":"[!IMPORTANT]\n This method is not intended to be called directly by application code. It is called by methods of the <xref:System.Diagnostics.Debug>, <xref:System.Diagnostics.Trace>, and <xref:System.Diagnostics.TraceSource> classes to write trace data.","leadings":["","> "],"nodes":[{"content":" This method is not intended to be called directly by application code. It is called by methods of the <xref:System.Diagnostics.Debug>, <xref:System.Diagnostics.Trace>, and <xref:System.Diagnostics.TraceSource> classes to write trace data.","pos":[13,252],"nodes":[{"content":"This method is not intended to be called directly by application code.","pos":[1,71]},{"content":"It is called by methods of the <ph id=\"ph1\">&lt;xref:System.Diagnostics.Debug&gt;</ph>, <ph id=\"ph2\">&lt;xref:System.Diagnostics.Trace&gt;</ph>, and <ph id=\"ph3\">&lt;xref:System.Diagnostics.TraceSource&gt;</ph> classes to write trace data.","pos":[72,239],"source":" It is called by methods of the <xref:System.Diagnostics.Debug>, <xref:System.Diagnostics.Trace>, and <xref:System.Diagnostics.TraceSource> classes to write trace data."}]}]}],"pos":[70001,70439],"yaml":true,"extradata":"MT"},{"content":"The message to write.","nodes":[{"pos":[0,21],"content":"The message to write.","nodes":[{"content":"The message to write.","pos":[0,21]}]}],"pos":[70586,70608],"yaml":true},{"content":"Writes a message followed by the current line terminator to the log file without providing any additional context information.","nodes":[{"pos":[0,126],"content":"Writes a message followed by the current line terminator to the log file without providing any additional context information.","nodes":[{"content":"Writes a message followed by the current line terminator to the log file without providing any additional context information.","pos":[0,126]}]}],"pos":[71722,71849],"yaml":true},{"content":"The <xref:System.Diagnostics.EventSchemaTraceListener.TraceEvent%2A> method is called to log the message as an <xref:System.Diagnostics.TraceEventType.Information> event.  \n  \n> [!IMPORTANT]\n>  This method is not intended to be called directly by application code. It is called by methods of the <xref:System.Diagnostics.Debug>, <xref:System.Diagnostics.Trace>, and <xref:System.Diagnostics.TraceSource> classes to write trace data.","nodes":[{"pos":[0,170],"content":"The <xref:System.Diagnostics.EventSchemaTraceListener.TraceEvent%2A> method is called to log the message as an <xref:System.Diagnostics.TraceEventType.Information> event.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Diagnostics.EventSchemaTraceListener.TraceEvent%2A&gt;</ph> method is called to log the message as an <ph id=\"ph2\">&lt;xref:System.Diagnostics.TraceEventType.Information&gt;</ph> event.","pos":[0,170],"source":"The <xref:System.Diagnostics.EventSchemaTraceListener.TraceEvent%2A> method is called to log the message as an <xref:System.Diagnostics.TraceEventType.Information> event."}]},{"pos":[178,432],"content":"[!IMPORTANT]\n This method is not intended to be called directly by application code. It is called by methods of the <xref:System.Diagnostics.Debug>, <xref:System.Diagnostics.Trace>, and <xref:System.Diagnostics.TraceSource> classes to write trace data.","leadings":["","> "],"nodes":[{"content":" This method is not intended to be called directly by application code. It is called by methods of the <xref:System.Diagnostics.Debug>, <xref:System.Diagnostics.Trace>, and <xref:System.Diagnostics.TraceSource> classes to write trace data.","pos":[13,252],"nodes":[{"content":"This method is not intended to be called directly by application code.","pos":[1,71]},{"content":"It is called by methods of the <ph id=\"ph1\">&lt;xref:System.Diagnostics.Debug&gt;</ph>, <ph id=\"ph2\">&lt;xref:System.Diagnostics.Trace&gt;</ph>, and <ph id=\"ph3\">&lt;xref:System.Diagnostics.TraceSource&gt;</ph> classes to write trace data.","pos":[72,239],"source":" It is called by methods of the <xref:System.Diagnostics.Debug>, <xref:System.Diagnostics.Trace>, and <xref:System.Diagnostics.TraceSource> classes to write trace data."}]}]}],"pos":[71860,72298],"yaml":true,"extradata":"MT"},{"content":"The message to write.","nodes":[{"pos":[0,21],"content":"The message to write.","nodes":[{"content":"The message to write.","pos":[0,21]}]}],"pos":[72449,72471],"yaml":true},{"content":"Gets or sets the underlying text writer that writes to the log file.","nodes":[{"pos":[0,68],"content":"Gets or sets the underlying text writer that writes to the log file.","nodes":[{"content":"Gets or sets the underlying text writer that writes to the log file.","pos":[0,68]}]}],"pos":[73504,73573],"yaml":true},{"content":"An attempt to use the set accessor for the <xref:System.Diagnostics.EventSchemaTraceListener.Writer%2A> property raises a <xref:System.NotSupportedException>.","nodes":[{"pos":[0,158],"content":"An attempt to use the set accessor for the <xref:System.Diagnostics.EventSchemaTraceListener.Writer%2A> property raises a <xref:System.NotSupportedException>.","nodes":[{"content":"An attempt to use the set accessor for the <ph id=\"ph1\">&lt;xref:System.Diagnostics.EventSchemaTraceListener.Writer%2A&gt;</ph> property raises a <ph id=\"ph2\">&lt;xref:System.NotSupportedException&gt;</ph>.","pos":[0,158],"source":"An attempt to use the set accessor for the <xref:System.Diagnostics.EventSchemaTraceListener.Writer%2A> property raises a <xref:System.NotSupportedException>."}]}],"pos":[73584,73743],"yaml":true,"extradata":"MT"},{"content":"A <xref href=\"System.IO.TextWriter\"></xref> object.","nodes":[{"pos":[0,51],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.IO.TextWriter\"&gt;&lt;/xref&gt;</ph> object.","source":"A <xref href=\"System.IO.TextWriter\"></xref> object."}],"pos":[73935,73987],"yaml":true},{"content":"An attempt was made to assign a value to the <xref href=\"System.Diagnostics.EventSchemaTraceListener.Writer\"></xref> property.","nodes":[{"pos":[0,126],"content":"An attempt was made to assign a value to the <ph id=\"ph1\">&lt;xref href=\"System.Diagnostics.EventSchemaTraceListener.Writer\"&gt;&lt;/xref&gt;</ph> property.","source":"An attempt was made to assign a value to the <xref href=\"System.Diagnostics.EventSchemaTraceListener.Writer\"></xref> property."}],"pos":[74167,74294],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Diagnostics.EventSchemaTraceListener\n  commentId: T:System.Diagnostics.EventSchemaTraceListener\n  id: EventSchemaTraceListener\n  children:\n  - System.Diagnostics.EventSchemaTraceListener.#ctor(System.String)\n  - System.Diagnostics.EventSchemaTraceListener.#ctor(System.String,System.String)\n  - System.Diagnostics.EventSchemaTraceListener.#ctor(System.String,System.String,System.Int32)\n  - System.Diagnostics.EventSchemaTraceListener.#ctor(System.String,System.String,System.Int32,System.Diagnostics.TraceLogRetentionOption)\n  - System.Diagnostics.EventSchemaTraceListener.#ctor(System.String,System.String,System.Int32,System.Diagnostics.TraceLogRetentionOption,System.Int64)\n  - System.Diagnostics.EventSchemaTraceListener.#ctor(System.String,System.String,System.Int32,System.Diagnostics.TraceLogRetentionOption,System.Int64,System.Int32)\n  - System.Diagnostics.EventSchemaTraceListener.BufferSize\n  - System.Diagnostics.EventSchemaTraceListener.Close\n  - System.Diagnostics.EventSchemaTraceListener.Fail(System.String,System.String)\n  - System.Diagnostics.EventSchemaTraceListener.Flush\n  - System.Diagnostics.EventSchemaTraceListener.GetSupportedAttributes\n  - System.Diagnostics.EventSchemaTraceListener.IsThreadSafe\n  - System.Diagnostics.EventSchemaTraceListener.MaximumFileSize\n  - System.Diagnostics.EventSchemaTraceListener.MaximumNumberOfFiles\n  - System.Diagnostics.EventSchemaTraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object)\n  - System.Diagnostics.EventSchemaTraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object[])\n  - System.Diagnostics.EventSchemaTraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String)\n  - System.Diagnostics.EventSchemaTraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String,System.Object[])\n  - System.Diagnostics.EventSchemaTraceListener.TraceLogRetentionOption\n  - System.Diagnostics.EventSchemaTraceListener.TraceTransfer(System.Diagnostics.TraceEventCache,System.String,System.Int32,System.String,System.Guid)\n  - System.Diagnostics.EventSchemaTraceListener.Write(System.String)\n  - System.Diagnostics.EventSchemaTraceListener.WriteLine(System.String)\n  - System.Diagnostics.EventSchemaTraceListener.Writer\n  langs:\n  - csharp\n  name: EventSchemaTraceListener\n  nameWithType: EventSchemaTraceListener\n  fullName: System.Diagnostics.EventSchemaTraceListener\n  type: Class\n  assemblies:\n  - System.Core\n  namespace: System.Diagnostics\n  summary: Directs tracing or debugging output of end-to-end events to an XML-encoded, schema-compliant log file.\n  remarks: \"The <xref:System.Diagnostics.EventSchemaTraceListener> class provides tracing of end-to-end schema-compliant events. You can use end-to-end tracing for a system that has heterogeneous components that cross thread, <xref:System.AppDomain>, process, and computer boundaries. A standardized event schema (see [Event Representation for Event Consumers](http://go.microsoft.com/fwlink/?LinkId=78955)) has been defined to enable tracing across these boundaries. The schema enables the addition of custom, schema-compliant elements. You can use the [Service Trace Viewer Tool (SvcTraceViewer.exe)](http://go.microsoft.com/fwlink/p/?LinkId=240129) to display the event data.  \\n  \\n <xref:System.Diagnostics.EventSchemaTraceListener> is tuned for logging performance with implicit support for lock-free tracing.  \\n  \\n The <xref:System.Diagnostics.EventSchemaTraceListener> class converts tracing and debugging information into an XML-encoded text stream. The description of the XML output is shown in the tables later in this section.  \\n  \\n You can enable or disable an <xref:System.Diagnostics.EventSchemaTraceListener> object through the application configuration file, and then use the configured <xref:System.Diagnostics.EventSchemaTraceListener> object in your application. Alternately, you can create an <xref:System.Diagnostics.EventSchemaTraceListener> object in your code. We recommend that you enable trace listeners through the application configuration file. For information about the use of configuration files for tracing and debugging, see [Trace and Debug Settings Schema](http://msdn.microsoft.com/library/277ca5f6-e1c4-41b6-a47f-3a67ce5b94ac).  \\n  \\n To configure an <xref:System.Diagnostics.EventSchemaTraceListener> object, modify the configuration file that corresponds to the name of your application. In this file, you can add, remove, or set the properties for a listener. The configuration file should be formatted as follows:  \\n  \\n```  \\n<configuration>  \\n    <system.diagnostics>  \\n        <sources>  \\n            <source name=\\\"TestSource\\\" >  \\n                <listeners>  \\n                    <!--Remove the default trace listener for better performance.-->  \\n                    <remove name=\\\"Default\\\"/>  \\n                    <!--Note: Removing the default trace listener prevents the dialog box   \\n                    from being displayed for Debug.Fail or Debug.Assert commands that are   \\n                    executed in user mode.-->  \\n                    <add name=\\\"eventListener\\\"   \\n                      type=\\\"System.Diagnostics.EventSchemaTraceListener,  system.core\\\"  \\n                      initializeData=\\\"TraceOutput.xml\\\"   \\n                      traceOutputOptions=\\\"ProcessId, DateTime, Timestamp\\\"   \\n                      bufferSize=\\\"65536\\\"  \\n                      maximumFileSize=\\\"20480000\\\"  \\n                      logRetentionOption=\\\"LimitedCircularFiles\\\"  \\n                      maximumNumberOfFiles=\\\"2\\\"/>  \\n                </listeners>  \\n            </source>  \\n        </sources>  \\n    </system.diagnostics>  \\n```  \\n  \\n The <xref:System.Diagnostics.EventSchemaTraceListener> class inherits the <xref:System.Diagnostics.TraceListener.Filter%2A> property from the base class <xref:System.Diagnostics.TraceListener>. The <xref:System.Diagnostics.TraceListener.Filter%2A> property allows for an additional level of trace output filtering at the listener. If a filter is present, the `Trace` methods of the trace listener call the <xref:System.Diagnostics.TraceFilter.ShouldTrace%2A> method of the filter to determine whether to emit the trace.  \\n  \\n If an attempt is made to write to a file that is being used or is unavailable, a GUID suffix is automatically added to the file name.  \\n  \\n> [!NOTE]\\n>  Listener methods are intended to be called by methods of the <xref:System.Diagnostics.Debug>, <xref:System.Diagnostics.Trace>, and <xref:System.Diagnostics.TraceSource> classes. Do not call the listener methods directly from application code. The <xref:System.Diagnostics.EventSchemaTraceListener> listener is primarily intended for use by the <xref:System.Diagnostics.TraceSource> class.  \\n  \\n The following table describes the elements and attributes of the XML output.  \\n  \\n|Element|Attributes|Output|Notes|  \\n|-------------|----------------|------------|-----------|  \\n|`CallStack`|None|Depends on the presence of the <xref:System.Diagnostics.TraceOptions.Callstack> flag in the <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> property.|Special characters such as > or < are replaced with escape sequences. See the escaped character translation table in the next table.|  \\n|`Computer`|None|Always present.|This element represents the value of the <xref:System.Environment.MachineName%2A> property.|  \\n|`Correlation`|`ActivityID`|Always present.|If `ActivityID` is not specified, the default is an empty GUID.|  \\n||`RelatedActivityID`|Depends on the presence of the `relatedActivityId` parameter in the `Trace` method call.|The `RelatedActivityID` attribute corresponds to the `relatedActivityId` parameter of the <xref:System.Diagnostics.EventSchemaTraceListener.TraceTransfer%2A> method.|  \\n|`Data`|None|Always present.|This element represents parameter input (`data`). One element is provided for each data object. In the case of event logs, the `Data` element contains escaped XML data. In the case of data logs, the `Data` element contains unescaped data. The data log output uses the `ToString` method of the passed-in data objects.|  \\n|`Event`|None|Always present.|This element contains a trace event.|  \\n|`EventData`|None|Present for event logs.|This element represents parameter input (`message`, `args`). It contains `Data` elements with escaped XML data that is created by calling the <xref:System.Diagnostics.EventSchemaTraceListener.TraceEvent%2A> method.|  \\n|`EventID`|None|Always present.|This element represents parameter input (`id`).|  \\n|`Execution`|`ProcessID`|Depends on the presence of the <xref:System.Diagnostics.TraceOptions.ProcessId> flag in the <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> property.|The `ProcessID` attribute is specified in the <xref:System.Diagnostics.TraceEventCache>. On the Microsoft Windows 98 and Windows Millenium Edition operating systems, if `ProcessID` is larger than 2,147,483,647, it is a positive representation of a negative number and should be converted to obtain the correct process identifier.|  \\n||`ThreadID`|Present when `ProcessID` is present.|The `ThreadID` attribute is specified in the <xref:System.Diagnostics.TraceEventCache>.|  \\n|`Level`|None|Always present.|This element represents parameter input (the numeric value of `eventType`). Parameter values that are larger than 255 are output as a level 8, which represents <xref:System.Diagnostics.TraceEventType?displayProperty=fullName>. Trace event types <xref:System.Diagnostics.TraceEventType.Critical>, <xref:System.Diagnostics.TraceEventType.Error>, <xref:System.Diagnostics.TraceEventType.Warning>, <xref:System.Diagnostics.TraceEventType.Information>, and <xref:System.Diagnostics.TraceEventType.Verbose> are output as levels 1, 2, 4, 8, and 10, respectively.|  \\n|`LogicalOperationStack`|None|Depends on the presence of the <xref:System.Diagnostics.TraceOptions.LogicalOperationStack> flag in the <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> property.|Only one logical operation can exist. Therefore, the values are written as `LogicalOperation` nodes under the `LogicalOperationStack` element.|  \\n|`OpCode`|None|Present when `Level` is greater than 255.|This element represents Trace event types that have numeric values greater than 255. <xref:System.Diagnostics.TraceEventType.Start>, <xref:System.Diagnostics.TraceEventType.Stop>, <xref:System.Diagnostics.TraceEventType.Suspend>, <xref:System.Diagnostics.TraceEventType.Resume>, or <xref:System.Diagnostics.TraceEventType.Transfer> are output as levels 1, 2, 4, 8, and 10, respectively.|  \\n|`Provider`|`GUID`|Always present.|Always empty.|  \\n|`RenderingInfo`|`Culture`|Always present.|This attribute represents a resource string for the event type. It is always \\\"en-EN\\\\\\\\\\\".|  \\n|`System`|`Name`|Always present.||  \\n|`TimeCreated`|`SystemTime`|Depends on the presence of the <xref:System.Diagnostics.TraceOptions.DateTime> flag in the <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> property.|The time is the value of the <xref:System.Diagnostics.TraceEventCache.DateTime%2A?displayProperty=fullName> property. This property is expressed as Coordinated Universal Time|  \\n|`TimeStamp`|None|Depends on the presence of the <xref:System.Diagnostics.TraceOptions.Timestamp> flag in the <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> property.|This element is specified in the <xref:System.Diagnostics.TraceEventCache>.|  \\n|`UserData`|None|Present for data logs.|This element contains `Data` elements with unescaped, user-provided data from a <xref:System.Diagnostics.EventSchemaTraceListener.TraceData%2A> method.|  \\n  \\n The following table shows the characters that are escaped in the XML output. Escaping occurs in all the elements and attributes except for the `UserData` element, which contains user-provided, unescaped data. The `UserData` element is a result of calls to the <xref:System.Diagnostics.EventSchemaTraceListener.TraceData%2A> method.  \\n  \\n|Escaped character|Value|  \\n|-----------------------|-----------|  \\n|&|&amp;|  \\n|\\\\<|&lt;|  \\n|>|&gt;|  \\n|\\\"|&quot;|  \\n|\\\\|&apos;|  \\n|0xD|&\\\\#xD;|  \\n|0xA|&\\\\#xA;|\"\n  example:\n  - \"The following code example demonstrates how to use the <xref:System.Diagnostics.EventSchemaTraceListener> class.  \\n  \\n [!code-cpp[System.Diagnostics.EventSchemaTraceListener#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Diagnostics.EventSchemaTraceListener/CPP/eventschematracelistener.cpp#1)]\\n [!code-csharp[System.Diagnostics.EventSchemaTraceListener#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Diagnostics.EventSchemaTraceListener/cs/program.cs#1)]\\n [!code-vb[System.Diagnostics.EventSchemaTraceListener#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Diagnostics.EventSchemaTraceListener/vb/program.vb#1)]\"\n  syntax:\n    content: 'public class EventSchemaTraceListener : System.Diagnostics.TextWriterTraceListener'\n  inheritance:\n  - System.Object\n  - System.Diagnostics.TraceListener\n  - System.Diagnostics.TextWriterTraceListener\n  implements: []\n  inheritedMembers:\n  - System.Diagnostics.TextWriterTraceListener.Dispose(System.Boolean)\n  - System.Diagnostics.TraceListener.Attributes\n  - System.Diagnostics.TraceListener.Dispose\n  - System.Diagnostics.TraceListener.Fail(System.String)\n  - System.Diagnostics.TraceListener.Filter\n  - System.Diagnostics.TraceListener.IndentLevel\n  - System.Diagnostics.TraceListener.IndentSize\n  - System.Diagnostics.TraceListener.Name\n  - System.Diagnostics.TraceListener.NeedIndent\n  - System.Diagnostics.TraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32)\n  - System.Diagnostics.TraceListener.TraceOutputOptions\n  - System.Diagnostics.TraceListener.Write(System.Object)\n  - System.Diagnostics.TraceListener.Write(System.Object,System.String)\n  - System.Diagnostics.TraceListener.Write(System.String,System.String)\n  - System.Diagnostics.TraceListener.WriteIndent\n  - System.Diagnostics.TraceListener.WriteLine(System.Object)\n  - System.Diagnostics.TraceListener.WriteLine(System.Object,System.String)\n  - System.Diagnostics.TraceListener.WriteLine(System.String,System.String)\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.ToString\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics/EventSchemaTraceListener.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Diagnostics.EventSchemaTraceListener.#ctor(System.String)\n  commentId: M:System.Diagnostics.EventSchemaTraceListener.#ctor(System.String)\n  id: '#ctor(System.String)'\n  parent: System.Diagnostics.EventSchemaTraceListener\n  langs:\n  - csharp\n  name: EventSchemaTraceListener(String)\n  nameWithType: EventSchemaTraceListener.EventSchemaTraceListener(String)\n  fullName: EventSchemaTraceListener.EventSchemaTraceListener(String)\n  type: Constructor\n  assemblies:\n  - System.Core\n  namespace: System.Diagnostics\n  summary: Initializes a new instance of the <xref href=\"System.Diagnostics.EventSchemaTraceListener\"></xref> class, using the specified file as the recipient of debugging and tracing output.\n  remarks: By default, one file of unrestricted size is logged.\n  example:\n  - \"The following code example demonstrates how to use the <xref:System.Diagnostics.EventSchemaTraceListener.%23ctor%28System.String%29?displayProperty=fullName> constructor.  \\n  \\n [!code-csharp[System.Diagnostics.EventSchemaTraceListener.Ctors#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Diagnostics.EventSchemaTraceListener.Ctors/CS/program.cs#1)]\\n [!code-vb[System.Diagnostics.EventSchemaTraceListener.Ctors#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Diagnostics.EventSchemaTraceListener.Ctors/VB/program.vb#1)]\"\n  syntax:\n    content: public EventSchemaTraceListener (string fileName);\n    parameters:\n    - id: fileName\n      type: System.String\n      description: The path for the log file.\n  overload: System.Diagnostics.EventSchemaTraceListener.#ctor*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics/EventSchemaTraceListener.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Diagnostics.EventSchemaTraceListener.#ctor(System.String,System.String)\n  commentId: M:System.Diagnostics.EventSchemaTraceListener.#ctor(System.String,System.String)\n  id: '#ctor(System.String,System.String)'\n  parent: System.Diagnostics.EventSchemaTraceListener\n  langs:\n  - csharp\n  name: EventSchemaTraceListener(String, String)\n  nameWithType: EventSchemaTraceListener.EventSchemaTraceListener(String, String)\n  fullName: EventSchemaTraceListener.EventSchemaTraceListener(String, String)\n  type: Constructor\n  assemblies:\n  - System.Core\n  namespace: System.Diagnostics\n  summary: Initializes a new instance of the <xref href=\"System.Diagnostics.EventSchemaTraceListener\"></xref> class with the specified name, using the specified file as the recipient of debugging and tracing output.\n  remarks: ''\n  example:\n  - \"The following code example demonstrates how to use the <xref:System.Diagnostics.EventSchemaTraceListener.%23ctor%28System.String%2CSystem.String%2CSystem.Int32%29?displayProperty=fullName> constructor.  \\n  \\n [!code-csharp[System.Diagnostics.EventSchemaTraceListener.Ctors#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Diagnostics.EventSchemaTraceListener.Ctors/CS/program.cs#2)]\\n [!code-vb[System.Diagnostics.EventSchemaTraceListener.Ctors#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Diagnostics.EventSchemaTraceListener.Ctors/VB/program.vb#2)]\"\n  syntax:\n    content: public EventSchemaTraceListener (string fileName, string name);\n    parameters:\n    - id: fileName\n      type: System.String\n      description: The path for the log file.\n    - id: name\n      type: System.String\n      description: The name of the listener.\n  overload: System.Diagnostics.EventSchemaTraceListener.#ctor*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics/EventSchemaTraceListener.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Diagnostics.EventSchemaTraceListener.#ctor(System.String,System.String,System.Int32)\n  commentId: M:System.Diagnostics.EventSchemaTraceListener.#ctor(System.String,System.String,System.Int32)\n  id: '#ctor(System.String,System.String,System.Int32)'\n  parent: System.Diagnostics.EventSchemaTraceListener\n  langs:\n  - csharp\n  name: EventSchemaTraceListener(String, String, Int32)\n  nameWithType: EventSchemaTraceListener.EventSchemaTraceListener(String, String, Int32)\n  fullName: EventSchemaTraceListener.EventSchemaTraceListener(String, String, Int32)\n  type: Constructor\n  assemblies:\n  - System.Core\n  namespace: System.Diagnostics\n  summary: Initializes a new instance of the <xref href=\"System.Diagnostics.EventSchemaTraceListener\"></xref> class with the specified name and specified buffer size, using the specified file as the recipient of debugging and tracing output.\n  remarks: For performance considerations, `bufferSize` should be a multiple of 1024 bytes.\n  example:\n  - \"The following code example demonstrates how to use the <xref:System.Diagnostics.EventSchemaTraceListener.%23ctor%28System.String%2CSystem.String%2CSystem.Int32%29?displayProperty=fullName> constructor.  \\n  \\n [!code-csharp[System.Diagnostics.EventSchemaTraceListener.Ctors#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Diagnostics.EventSchemaTraceListener.Ctors/CS/program.cs#3)]\\n [!code-vb[System.Diagnostics.EventSchemaTraceListener.Ctors#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Diagnostics.EventSchemaTraceListener.Ctors/VB/program.vb#3)]\"\n  syntax:\n    content: public EventSchemaTraceListener (string fileName, string name, int bufferSize);\n    parameters:\n    - id: fileName\n      type: System.String\n      description: The path for the log file.\n    - id: name\n      type: System.String\n      description: The name of the listener.\n    - id: bufferSize\n      type: System.Int32\n      description: The size of the output buffer, in bytes.\n  overload: System.Diagnostics.EventSchemaTraceListener.#ctor*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics/EventSchemaTraceListener.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Diagnostics.EventSchemaTraceListener.#ctor(System.String,System.String,System.Int32,System.Diagnostics.TraceLogRetentionOption)\n  commentId: M:System.Diagnostics.EventSchemaTraceListener.#ctor(System.String,System.String,System.Int32,System.Diagnostics.TraceLogRetentionOption)\n  id: '#ctor(System.String,System.String,System.Int32,System.Diagnostics.TraceLogRetentionOption)'\n  parent: System.Diagnostics.EventSchemaTraceListener\n  langs:\n  - csharp\n  name: EventSchemaTraceListener(String, String, Int32, TraceLogRetentionOption)\n  nameWithType: EventSchemaTraceListener.EventSchemaTraceListener(String, String, Int32, TraceLogRetentionOption)\n  fullName: EventSchemaTraceListener.EventSchemaTraceListener(String, String, Int32, TraceLogRetentionOption)\n  type: Constructor\n  assemblies:\n  - System.Core\n  namespace: System.Diagnostics\n  summary: Initializes a new instance of the <xref href=\"System.Diagnostics.EventSchemaTraceListener\"></xref> class with the specified name and specified buffer size, using the specified file with the specified log retention policy as the recipient of the debugging and tracing output.\n  remarks: For performance considerations, `bufferSize` should be a multiple of 1024 bytes.\n  example:\n  - \"The following code example demonstrates how to use the <xref:System.Diagnostics.EventSchemaTraceListener.%23ctor%28System.String%2CSystem.String%2CSystem.Int32%2CSystem.Diagnostics.TraceLogRetentionOption%29?displayProperty=fullName> constructor.  \\n  \\n [!code-csharp[System.Diagnostics.EventSchemaTraceListener.Ctors#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Diagnostics.EventSchemaTraceListener.Ctors/CS/program.cs#4)]\\n [!code-vb[System.Diagnostics.EventSchemaTraceListener.Ctors#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Diagnostics.EventSchemaTraceListener.Ctors/VB/program.vb#4)]\"\n  syntax:\n    content: public EventSchemaTraceListener (string fileName, string name, int bufferSize, System.Diagnostics.TraceLogRetentionOption logRetentionOption);\n    parameters:\n    - id: fileName\n      type: System.String\n      description: The path for the log file.\n    - id: name\n      type: System.String\n      description: The name of the listener.\n    - id: bufferSize\n      type: System.Int32\n      description: The size of the output buffer, in bytes.\n    - id: logRetentionOption\n      type: System.Diagnostics.TraceLogRetentionOption\n      description: One of the <xref href=\"System.Diagnostics.TraceLogRetentionOption\"></xref> values.\n  overload: System.Diagnostics.EventSchemaTraceListener.#ctor*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics/EventSchemaTraceListener.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Diagnostics.EventSchemaTraceListener.#ctor(System.String,System.String,System.Int32,System.Diagnostics.TraceLogRetentionOption,System.Int64)\n  commentId: M:System.Diagnostics.EventSchemaTraceListener.#ctor(System.String,System.String,System.Int32,System.Diagnostics.TraceLogRetentionOption,System.Int64)\n  id: '#ctor(System.String,System.String,System.Int32,System.Diagnostics.TraceLogRetentionOption,System.Int64)'\n  parent: System.Diagnostics.EventSchemaTraceListener\n  langs:\n  - csharp\n  name: EventSchemaTraceListener(String, String, Int32, TraceLogRetentionOption, Int64)\n  nameWithType: EventSchemaTraceListener.EventSchemaTraceListener(String, String, Int32, TraceLogRetentionOption, Int64)\n  fullName: EventSchemaTraceListener.EventSchemaTraceListener(String, String, Int32, TraceLogRetentionOption, Int64)\n  type: Constructor\n  assemblies:\n  - System.Core\n  namespace: System.Diagnostics\n  summary: Initializes a new instance of the <xref href=\"System.Diagnostics.EventSchemaTraceListener\"></xref> class with the specified name and specified buffer size, using the specified file with the specified log retention policy and maximum size as the recipient of the debugging and tracing output.\n  remarks: For performance considerations, `bufferSize` and `maximumFileSize` should be multiples of 1024 bytes. `maximumFileSize` is not an absolute value, it is a threshold which can be exceeded up to the size of the last message.\n  example:\n  - \"The following code example demonstrates how to use the <xref:System.Diagnostics.EventSchemaTraceListener.%23ctor%28System.String%2CSystem.String%2CSystem.Int32%2CSystem.Diagnostics.TraceLogRetentionOption%2CSystem.Int64%29?displayProperty=fullName> constructor.  \\n  \\n [!code-csharp[System.Diagnostics.EventSchemaTraceListener.Ctors#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Diagnostics.EventSchemaTraceListener.Ctors/CS/program.cs#5)]\\n [!code-vb[System.Diagnostics.EventSchemaTraceListener.Ctors#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Diagnostics.EventSchemaTraceListener.Ctors/VB/program.vb#5)]\"\n  syntax:\n    content: public EventSchemaTraceListener (string fileName, string name, int bufferSize, System.Diagnostics.TraceLogRetentionOption logRetentionOption, long maximumFileSize);\n    parameters:\n    - id: fileName\n      type: System.String\n      description: The path for the log file.\n    - id: name\n      type: System.String\n      description: The name of the listener.\n    - id: bufferSize\n      type: System.Int32\n      description: The size of the output buffer, in bytes.\n    - id: logRetentionOption\n      type: System.Diagnostics.TraceLogRetentionOption\n      description: One of the <xref href=\"System.Diagnostics.TraceLogRetentionOption\"></xref> values.\n    - id: maximumFileSize\n      type: System.Int64\n      description: The maximum file size, in bytes.\n  overload: System.Diagnostics.EventSchemaTraceListener.#ctor*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>maximumFileSize</code> is a negative number.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics/EventSchemaTraceListener.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Diagnostics.EventSchemaTraceListener.#ctor(System.String,System.String,System.Int32,System.Diagnostics.TraceLogRetentionOption,System.Int64,System.Int32)\n  commentId: M:System.Diagnostics.EventSchemaTraceListener.#ctor(System.String,System.String,System.Int32,System.Diagnostics.TraceLogRetentionOption,System.Int64,System.Int32)\n  id: '#ctor(System.String,System.String,System.Int32,System.Diagnostics.TraceLogRetentionOption,System.Int64,System.Int32)'\n  parent: System.Diagnostics.EventSchemaTraceListener\n  langs:\n  - csharp\n  name: EventSchemaTraceListener(String, String, Int32, TraceLogRetentionOption, Int64, Int32)\n  nameWithType: EventSchemaTraceListener.EventSchemaTraceListener(String, String, Int32, TraceLogRetentionOption, Int64, Int32)\n  fullName: EventSchemaTraceListener.EventSchemaTraceListener(String, String, Int32, TraceLogRetentionOption, Int64, Int32)\n  type: Constructor\n  assemblies:\n  - System.Core\n  namespace: System.Diagnostics\n  summary: Initializes a new instance of the <xref href=\"System.Diagnostics.EventSchemaTraceListener\"></xref> class with the specified name and specified buffer size, using the specified file with the specified log retention policy, maximum size, and file count as the recipient of the debugging and tracing output.\n  remarks: For performance considerations, `bufferSize` and `maximumFileSize` should be multiples of 1024 bytes. `maximumFileSize` is not an absolute value; it is a threshold that can be exceeded up to the size of the last message.\n  example:\n  - \"The following code example demonstrates how to use the <xref:System.Diagnostics.EventSchemaTraceListener.%23ctor%2A> constructor. This code example is part of a larger example that is provided for the <xref:System.Diagnostics.EventSchemaTraceListener> class.  \\n  \\n [!code-csharp[System.Diagnostics.EventSchemaTraceListener#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Diagnostics.EventSchemaTraceListener/cs/program.cs#2)]\\n [!code-vb[System.Diagnostics.EventSchemaTraceListener#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Diagnostics.EventSchemaTraceListener/vb/program.vb#2)]\"\n  syntax:\n    content: public EventSchemaTraceListener (string fileName, string name, int bufferSize, System.Diagnostics.TraceLogRetentionOption logRetentionOption, long maximumFileSize, int maximumNumberOfFiles);\n    parameters:\n    - id: fileName\n      type: System.String\n      description: The path for the log file.\n    - id: name\n      type: System.String\n      description: The name of the listener.\n    - id: bufferSize\n      type: System.Int32\n      description: The size of the output buffer, in bytes.\n    - id: logRetentionOption\n      type: System.Diagnostics.TraceLogRetentionOption\n      description: One of the <xref href=\"System.Diagnostics.TraceLogRetentionOption\"></xref> values.\n    - id: maximumFileSize\n      type: System.Int64\n      description: The maximum file size, in bytes.\n    - id: maximumNumberOfFiles\n      type: System.Int32\n      description: The maximum number of output log files.\n  overload: System.Diagnostics.EventSchemaTraceListener.#ctor*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>maximumNumberOfFiles</code> is less than 2, and <code>logRetentionOption</code> is <xref href=\"System.Diagnostics.TraceLogRetentionOption.LimitedCircularFiles\"></xref>.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics/EventSchemaTraceListener.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Diagnostics.EventSchemaTraceListener.BufferSize\n  commentId: P:System.Diagnostics.EventSchemaTraceListener.BufferSize\n  id: BufferSize\n  parent: System.Diagnostics.EventSchemaTraceListener\n  langs:\n  - csharp\n  name: BufferSize\n  nameWithType: EventSchemaTraceListener.BufferSize\n  fullName: EventSchemaTraceListener.BufferSize\n  type: Property\n  assemblies:\n  - System.Core\n  namespace: System.Diagnostics\n  summary: Gets the size of the output buffer.\n  remarks: The property value is set by the `bufferSize` parameter in the constructor. For performance reasons, the buffer size should be set to a multiple of 1024 bytes. We recommend either the default size of 32*1024 bytes or 64\\*1024 bytes for best performance.\n  example:\n  - \"The following code example demonstrates how to display the value of the <xref:System.Diagnostics.EventSchemaTraceListener.BufferSize%2A> property. This code example is part of a larger example that is provided for the <xref:System.Diagnostics.EventSchemaTraceListener> class.  \\n  \\n [!code-csharp[System.Diagnostics.EventSchemaTraceListener#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Diagnostics.EventSchemaTraceListener/cs/program.cs#5)]\\n [!code-vb[System.Diagnostics.EventSchemaTraceListener#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Diagnostics.EventSchemaTraceListener/vb/program.vb#5)]\"\n  syntax:\n    content: public int BufferSize { get; }\n    return:\n      type: System.Int32\n      description: The size of the output buffer, in bytes.\n  overload: System.Diagnostics.EventSchemaTraceListener.BufferSize*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics/EventSchemaTraceListener.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Diagnostics.EventSchemaTraceListener.Close\n  commentId: M:System.Diagnostics.EventSchemaTraceListener.Close\n  id: Close\n  parent: System.Diagnostics.EventSchemaTraceListener\n  langs:\n  - csharp\n  name: Close()\n  nameWithType: EventSchemaTraceListener.Close()\n  fullName: EventSchemaTraceListener.Close()\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Diagnostics\n  summary: Closes the log file for this listener so that it no longer receives tracing or debugging output.\n  syntax:\n    content: public override void Close ();\n    parameters: []\n  overload: System.Diagnostics.EventSchemaTraceListener.Close*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics/EventSchemaTraceListener.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Diagnostics.EventSchemaTraceListener.Fail(System.String,System.String)\n  commentId: M:System.Diagnostics.EventSchemaTraceListener.Fail(System.String,System.String)\n  id: Fail(System.String,System.String)\n  parent: System.Diagnostics.EventSchemaTraceListener\n  langs:\n  - csharp\n  name: Fail(String, String)\n  nameWithType: EventSchemaTraceListener.Fail(String, String)\n  fullName: EventSchemaTraceListener.Fail(String, String)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Diagnostics\n  summary: Writes error information, including a basic error message and a detailed error message, to the log file.\n  syntax:\n    content: public override void Fail (string message, string detailMessage);\n    parameters:\n    - id: message\n      type: System.String\n      description: The basic error message to write.\n    - id: detailMessage\n      type: System.String\n      description: The detailed error message to append to the basic error message.\n  overload: System.Diagnostics.EventSchemaTraceListener.Fail*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics/EventSchemaTraceListener.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Diagnostics.EventSchemaTraceListener.Flush\n  commentId: M:System.Diagnostics.EventSchemaTraceListener.Flush\n  id: Flush\n  parent: System.Diagnostics.EventSchemaTraceListener\n  langs:\n  - csharp\n  name: Flush()\n  nameWithType: EventSchemaTraceListener.Flush()\n  fullName: EventSchemaTraceListener.Flush()\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Diagnostics\n  summary: Causes buffered data to be written to the log for this listener.\n  syntax:\n    content: >-\n      [System.Security.SecurityCritical]\n\n      public override void Flush ();\n    parameters: []\n  overload: System.Diagnostics.EventSchemaTraceListener.Flush*\n  exceptions: []\n  attributes:\n  - type: System.Security.SecurityCriticalAttribute\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics/EventSchemaTraceListener.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Diagnostics.EventSchemaTraceListener.GetSupportedAttributes\n  commentId: M:System.Diagnostics.EventSchemaTraceListener.GetSupportedAttributes\n  id: GetSupportedAttributes\n  parent: System.Diagnostics.EventSchemaTraceListener\n  langs:\n  - csharp\n  name: GetSupportedAttributes()\n  nameWithType: EventSchemaTraceListener.GetSupportedAttributes()\n  fullName: EventSchemaTraceListener.GetSupportedAttributes()\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Diagnostics\n  summary: Gets the custom XML configuration attributes that the trace listener supports.\n  remarks: 'The custom attributes that are returned by this method can be used in the XML configuration file to control the behavior of an instance of the <xref:System.Diagnostics.EventSchemaTraceListener> class. Using any other attribute causes a configuration exception. The <xref:System.Diagnostics.EventSchemaTraceListener.GetSupportedAttributes%2A> method for the <xref:System.Diagnostics.EventSchemaTraceListener> returns the following string array values: \"bufferSize\", \"logRetentionOption\", \"maximumFileSize\", and \"maximumNumberOfFiles\".'\n  syntax:\n    content: protected override string[] GetSupportedAttributes ();\n    parameters: []\n    return:\n      type: System.String[]\n      description: A <xref href=\"System.String\"></xref> array that contains the XML configuration attributes recognized by this listener.\n  overload: System.Diagnostics.EventSchemaTraceListener.GetSupportedAttributes*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics/EventSchemaTraceListener.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Diagnostics.EventSchemaTraceListener.IsThreadSafe\n  commentId: P:System.Diagnostics.EventSchemaTraceListener.IsThreadSafe\n  id: IsThreadSafe\n  parent: System.Diagnostics.EventSchemaTraceListener\n  langs:\n  - csharp\n  name: IsThreadSafe\n  nameWithType: EventSchemaTraceListener.IsThreadSafe\n  fullName: EventSchemaTraceListener.IsThreadSafe\n  type: Property\n  assemblies:\n  - System.Core\n  namespace: System.Diagnostics\n  summary: Gets a value indicating whether the trace listener is thread safe.\n  remarks: ''\n  example:\n  - \"The following code example demonstrates how to display the value of the <xref:System.Diagnostics.EventSchemaTraceListener.IsThreadSafe%2A> property. This code example is part of a larger example that is provided for the <xref:System.Diagnostics.EventSchemaTraceListener> class.  \\n  \\n [!code-csharp[System.Diagnostics.EventSchemaTraceListener#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Diagnostics.EventSchemaTraceListener/cs/program.cs#4)]\\n [!code-vb[System.Diagnostics.EventSchemaTraceListener#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Diagnostics.EventSchemaTraceListener/vb/program.vb#4)]\"\n  syntax:\n    content: public override bool IsThreadSafe { get; }\n    return:\n      type: System.Boolean\n      description: Always returns `true`.\n  overload: System.Diagnostics.EventSchemaTraceListener.IsThreadSafe*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics/EventSchemaTraceListener.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Diagnostics.EventSchemaTraceListener.MaximumFileSize\n  commentId: P:System.Diagnostics.EventSchemaTraceListener.MaximumFileSize\n  id: MaximumFileSize\n  parent: System.Diagnostics.EventSchemaTraceListener\n  langs:\n  - csharp\n  name: MaximumFileSize\n  nameWithType: EventSchemaTraceListener.MaximumFileSize\n  fullName: EventSchemaTraceListener.MaximumFileSize\n  type: Property\n  assemblies:\n  - System.Core\n  namespace: System.Diagnostics\n  summary: Gets the maximum size of the log file.\n  remarks: \"The property value is set by the `maximumFileSize` parameter in the constructor or the `maximumFileSize` attribute in the configuration file. For performance reasons, you should set the maximum file size to a multiple of 1024 bytes. The <xref:System.Diagnostics.EventSchemaTraceListener.MaximumFileSize%2A> property value is not an absolute; it is a threshold that can be exceeded up to the size of the last message.  \\n  \\n The following table shows the possible and default values for file size that are associated with each trace log retention option. The values marked as N/A indicate that the <xref:System.Diagnostics.EventSchemaTraceListener.MaximumFileSize%2A> property is not checked for that <xref:System.Diagnostics.TraceLogRetentionOption> value.  \\n  \\n|TraceLogRetentionOption|Maximum file size|Default file size|  \\n|-----------------------------|-----------------------|-----------------------|  \\n|<xref:System.Diagnostics.TraceLogRetentionOption.LimitedCircularFiles>|N/A|-1|  \\n|<xref:System.Diagnostics.TraceLogRetentionOption.LimitedSequentialFiles>|>0|4 KB|  \\n|<xref:System.Diagnostics.TraceLogRetentionOption.SingleFileBoundedSize>|>0|4 KB|  \\n|<xref:System.Diagnostics.TraceLogRetentionOption.SingleFileUnboundedSize>|>0|4 KB|  \\n|<xref:System.Diagnostics.TraceLogRetentionOption.UnlimitedSequentialFiles>|>0|4 KB|\"\n  example:\n  - \"The following code example demonstrates how to display the value of the <xref:System.Diagnostics.EventSchemaTraceListener.MaximumFileSize%2A> property. This code example is part of a larger example that is provided for the <xref:System.Diagnostics.EventSchemaTraceListener> class.  \\n  \\n [!code-csharp[System.Diagnostics.EventSchemaTraceListener#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Diagnostics.EventSchemaTraceListener/cs/program.cs#6)]\\n [!code-vb[System.Diagnostics.EventSchemaTraceListener#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Diagnostics.EventSchemaTraceListener/vb/program.vb#6)]\"\n  syntax:\n    content: public long MaximumFileSize { get; }\n    return:\n      type: System.Int64\n      description: The maximum file size, in bytes.\n  overload: System.Diagnostics.EventSchemaTraceListener.MaximumFileSize*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics/EventSchemaTraceListener.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Diagnostics.EventSchemaTraceListener.MaximumNumberOfFiles\n  commentId: P:System.Diagnostics.EventSchemaTraceListener.MaximumNumberOfFiles\n  id: MaximumNumberOfFiles\n  parent: System.Diagnostics.EventSchemaTraceListener\n  langs:\n  - csharp\n  name: MaximumNumberOfFiles\n  nameWithType: EventSchemaTraceListener.MaximumNumberOfFiles\n  fullName: EventSchemaTraceListener.MaximumNumberOfFiles\n  type: Property\n  assemblies:\n  - System.Core\n  namespace: System.Diagnostics\n  summary: Gets the maximum number of log files.\n  remarks: \"The property value is set by the `maximumNumberOfFiles` parameter in the constructor or the `maximumNumberOfFiles` attribute in the configuration file.  \\n  \\n The following table shows the possible and default values for file size and file count that are associated with each trace log retention option. The values marked as N/A indicate that the <xref:System.Diagnostics.EventSchemaTraceListener.MaximumNumberOfFiles%2A> property is not checked for that <xref:System.Diagnostics.TraceLogRetentionOption> value.  \\n  \\n|TraceLogRetentionOption|Maximum number of files|Default number of files|  \\n|-----------------------------|-----------------------------|-----------------------------|  \\n|<xref:System.Diagnostics.TraceLogRetentionOption.LimitedCircularFiles>|N/A|1|  \\n|<xref:System.Diagnostics.TraceLogRetentionOption.LimitedSequentialFiles>|N/A|1|  \\n|<xref:System.Diagnostics.TraceLogRetentionOption.SingleFileBoundedSize>|N/A|-1|  \\n|<xref:System.Diagnostics.TraceLogRetentionOption.SingleFileUnboundedSize>|>0|1|  \\n|<xref:System.Diagnostics.TraceLogRetentionOption.UnlimitedSequentialFiles>|>1|2|\"\n  example:\n  - \"The following code example demonstrates how to display the value of the <xref:System.Diagnostics.EventSchemaTraceListener.MaximumNumberOfFiles%2A> property. This code example is part of a larger example that is provided for the <xref:System.Diagnostics.EventSchemaTraceListener> class.  \\n  \\n [!code-csharp[System.Diagnostics.EventSchemaTraceListener#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Diagnostics.EventSchemaTraceListener/cs/program.cs#7)]\\n [!code-vb[System.Diagnostics.EventSchemaTraceListener#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Diagnostics.EventSchemaTraceListener/vb/program.vb#7)]\"\n  syntax:\n    content: public int MaximumNumberOfFiles { get; }\n    return:\n      type: System.Int32\n      description: The maximum number of log files, determined by the value of the <xref href=\"System.Diagnostics.EventSchemaTraceListener.TraceLogRetentionOption\"></xref> property for the file.\n  overload: System.Diagnostics.EventSchemaTraceListener.MaximumNumberOfFiles*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics/EventSchemaTraceListener.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Diagnostics.EventSchemaTraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object)\n  commentId: M:System.Diagnostics.EventSchemaTraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object)\n  id: TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object)\n  parent: System.Diagnostics.EventSchemaTraceListener\n  langs:\n  - csharp\n  name: TraceData(TraceEventCache, String, TraceEventType, Int32, Object)\n  nameWithType: EventSchemaTraceListener.TraceData(TraceEventCache, String, TraceEventType, Int32, Object)\n  fullName: EventSchemaTraceListener.TraceData(TraceEventCache, String, TraceEventType, Int32, Object)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Diagnostics\n  summary: Writes trace information, a single data object, and event information to the log file.\n  remarks: \"The `eventCache`, `source`, `eventType`, and `id` parameters are used in the header and footer of the trace. The `id` parameter is converted to an unsigned integer before it is written. Therefore, a negative `id` value is written as a large positive integer. The `data` parameter is written as a `Data` node in the `UserData` element. The `ToString` method of the data object is used to convert the object to a string.  \\n  \\n> [!IMPORTANT]\\n>  This method is not intended to be called directly by application code. It is called by methods of the <xref:System.Diagnostics.Debug>, <xref:System.Diagnostics.Trace>, and <xref:System.Diagnostics.TraceSource> classes to write trace data.\"\n  syntax:\n    content: >-\n      [System.Security.SecurityCritical]\n\n      public override void TraceData (System.Diagnostics.TraceEventCache eventCache, string source, System.Diagnostics.TraceEventType eventType, int id, object data);\n    parameters:\n    - id: eventCache\n      type: System.Diagnostics.TraceEventCache\n      description: A <xref href=\"System.Diagnostics.TraceEventCache\"></xref> that contains the current process ID, thread ID, and stack trace information.\n    - id: source\n      type: System.String\n      description: The source name.\n    - id: eventType\n      type: System.Diagnostics.TraceEventType\n      description: One of the <xref href=\"System.Diagnostics.TraceEventType\"></xref> values.\n    - id: id\n      type: System.Int32\n      description: A numeric identifier for the event.\n    - id: data\n      type: System.Object\n      description: A data object to emit.\n  overload: System.Diagnostics.EventSchemaTraceListener.TraceData*\n  exceptions: []\n  attributes:\n  - type: System.Security.SecurityCriticalAttribute\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics/EventSchemaTraceListener.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Diagnostics.EventSchemaTraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object[])\n  commentId: M:System.Diagnostics.EventSchemaTraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object[])\n  id: TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object[])\n  parent: System.Diagnostics.EventSchemaTraceListener\n  langs:\n  - csharp\n  name: TraceData(TraceEventCache, String, TraceEventType, Int32, Object[])\n  nameWithType: EventSchemaTraceListener.TraceData(TraceEventCache, String, TraceEventType, Int32, Object[])\n  fullName: EventSchemaTraceListener.TraceData(TraceEventCache, String, TraceEventType, Int32, Object[])\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Diagnostics\n  summary: Writes trace information, multiple data objects, and event information to the log file.\n  remarks: \"The `eventCache`, `source`, `eventType`, and `id` parameters are used in the header and footer of the trace. The `id` parameter is converted to an unsigned integer before it is written. Therefore, a negative `id` value is written as a large positive integer. The objects in the `data` parameter array are written as `Data` nodes in the `UserData` element. The `ToString` method of each data object is used to convert the object to a string.  \\n  \\n> [!IMPORTANT]\\n>  This method is not intended to be called directly by application code. It is called by methods of the <xref:System.Diagnostics.Debug>, <xref:System.Diagnostics.Trace>, and <xref:System.Diagnostics.TraceSource> classes to write trace data.\"\n  syntax:\n    content: >-\n      [System.Security.SecurityCritical]\n\n      public override void TraceData (System.Diagnostics.TraceEventCache eventCache, string source, System.Diagnostics.TraceEventType eventType, int id, object[] data);\n    parameters:\n    - id: eventCache\n      type: System.Diagnostics.TraceEventCache\n      description: A <xref href=\"System.Diagnostics.TraceEventCache\"></xref> that contains the current process ID, thread ID, and stack trace information.\n    - id: source\n      type: System.String\n      description: The source name.\n    - id: eventType\n      type: System.Diagnostics.TraceEventType\n      description: One of the <xref href=\"System.Diagnostics.TraceEventType\"></xref> values.\n    - id: id\n      type: System.Int32\n      description: A numeric identifier for the event.\n    - id: data\n      type: System.Object[]\n      description: An array of data objects to emit.\n  overload: System.Diagnostics.EventSchemaTraceListener.TraceData*\n  exceptions: []\n  attributes:\n  - type: System.Security.SecurityCriticalAttribute\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics/EventSchemaTraceListener.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Diagnostics.EventSchemaTraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String)\n  commentId: M:System.Diagnostics.EventSchemaTraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String)\n  id: TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String)\n  parent: System.Diagnostics.EventSchemaTraceListener\n  langs:\n  - csharp\n  name: TraceEvent(TraceEventCache, String, TraceEventType, Int32, String)\n  nameWithType: EventSchemaTraceListener.TraceEvent(TraceEventCache, String, TraceEventType, Int32, String)\n  fullName: EventSchemaTraceListener.TraceEvent(TraceEventCache, String, TraceEventType, Int32, String)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Diagnostics\n  summary: Writes trace information, a message, and event information to the log file.\n  remarks: \"The `eventCache`, `source`, `eventType`, and `id` parameters are used in the header and footer of the trace. The `id` parameter is converted to an unsigned integer before it is written. Therefore, a negative `id` value is written as a large positive integer. The `message` parameter is written as a `Data` node in the `EventData` element.  \\n  \\n> [!IMPORTANT]\\n>  This method is not intended to be called directly by application code. It is called by methods of the <xref:System.Diagnostics.Debug>, <xref:System.Diagnostics.Trace>, and <xref:System.Diagnostics.TraceSource> classes to write trace data.\"\n  syntax:\n    content: >-\n      [System.Security.SecurityCritical]\n\n      public override void TraceEvent (System.Diagnostics.TraceEventCache eventCache, string source, System.Diagnostics.TraceEventType eventType, int id, string message);\n    parameters:\n    - id: eventCache\n      type: System.Diagnostics.TraceEventCache\n      description: A <xref href=\"System.Diagnostics.TraceEventCache\"></xref> that contains the current process ID, thread ID, and stack trace information.\n    - id: source\n      type: System.String\n      description: The source name.\n    - id: eventType\n      type: System.Diagnostics.TraceEventType\n      description: One of the <xref href=\"System.Diagnostics.TraceEventType\"></xref> values.\n    - id: id\n      type: System.Int32\n      description: A numeric identifier for the event.\n    - id: message\n      type: System.String\n      description: The message to write.\n  overload: System.Diagnostics.EventSchemaTraceListener.TraceEvent*\n  exceptions: []\n  attributes:\n  - type: System.Security.SecurityCriticalAttribute\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics/EventSchemaTraceListener.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Diagnostics.EventSchemaTraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String,System.Object[])\n  commentId: M:System.Diagnostics.EventSchemaTraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String,System.Object[])\n  id: TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String,System.Object[])\n  parent: System.Diagnostics.EventSchemaTraceListener\n  langs:\n  - csharp\n  name: TraceEvent(TraceEventCache, String, TraceEventType, Int32, String, Object[])\n  nameWithType: EventSchemaTraceListener.TraceEvent(TraceEventCache, String, TraceEventType, Int32, String, Object[])\n  fullName: EventSchemaTraceListener.TraceEvent(TraceEventCache, String, TraceEventType, Int32, String, Object[])\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Diagnostics\n  summary: Writes trace information, a formatted message, and event information to the log file.\n  remarks: \"The `eventCache`, `source`, `eventType`, and `id` parameters are used in the header and footer of the trace. The `id` parameter is converted to an unsigned integer before it is written. Therefore, a negative `id` value is written as a large positive integer. The <xref:System.String.Format%28System.String%2CSystem.Object%5B%5D%29?displayProperty=fullName> method is called and the `format` string and `args` array are passed in as parameters. This method formats the `args` object array and writes the formatted array as the `Data` node in the `EventData` element.  \\n  \\n> [!IMPORTANT]\\n>  This method is not intended to be called directly by application code. It is called by methods of the <xref:System.Diagnostics.Debug>, <xref:System.Diagnostics.Trace>, and <xref:System.Diagnostics.TraceSource> classes to write trace data.\"\n  syntax:\n    content: >-\n      [System.Security.SecurityCritical]\n\n      public override void TraceEvent (System.Diagnostics.TraceEventCache eventCache, string source, System.Diagnostics.TraceEventType eventType, int id, string format, object[] args);\n    parameters:\n    - id: eventCache\n      type: System.Diagnostics.TraceEventCache\n      description: A <xref href=\"System.Diagnostics.TraceEventCache\"></xref> that contains the current process ID, thread ID, and stack trace information.\n    - id: source\n      type: System.String\n      description: The source name.\n    - id: eventType\n      type: System.Diagnostics.TraceEventType\n      description: One of the <xref href=\"System.Diagnostics.TraceEventType\"></xref> values.\n    - id: id\n      type: System.Int32\n      description: A numeric identifier for the event.\n    - id: format\n      type: System.String\n      description: A format string that contains zero or more format items that correspond to objects in the <code>args</code> array.\n    - id: args\n      type: System.Object[]\n      description: An object array that contains zero or more objects to format.\n  overload: System.Diagnostics.EventSchemaTraceListener.TraceEvent*\n  exceptions: []\n  attributes:\n  - type: System.Security.SecurityCriticalAttribute\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics/EventSchemaTraceListener.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Diagnostics.EventSchemaTraceListener.TraceLogRetentionOption\n  commentId: P:System.Diagnostics.EventSchemaTraceListener.TraceLogRetentionOption\n  id: TraceLogRetentionOption\n  parent: System.Diagnostics.EventSchemaTraceListener\n  langs:\n  - csharp\n  name: TraceLogRetentionOption\n  nameWithType: EventSchemaTraceListener.TraceLogRetentionOption\n  fullName: EventSchemaTraceListener.TraceLogRetentionOption\n  type: Property\n  assemblies:\n  - System.Core\n  namespace: System.Diagnostics\n  summary: Gets the trace log retention option for the file.\n  remarks: ''\n  example:\n  - \"The following code example demonstrates how to display the value of the <xref:System.Diagnostics.EventSchemaTraceListener.TraceLogRetentionOption%2A> property. This code example is part of a larger example that is provided for the <xref:System.Diagnostics.EventSchemaTraceListener> class.  \\n  \\n [!code-csharp[System.Diagnostics.EventSchemaTraceListener#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Diagnostics.EventSchemaTraceListener/cs/program.cs#9)]\\n [!code-vb[System.Diagnostics.EventSchemaTraceListener#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Diagnostics.EventSchemaTraceListener/vb/program.vb#9)]\"\n  syntax:\n    content: public System.Diagnostics.TraceLogRetentionOption TraceLogRetentionOption { get; }\n    return:\n      type: System.Diagnostics.TraceLogRetentionOption\n      description: One of the <xref href=\"System.Diagnostics.TraceLogRetentionOption\"></xref> values. The default is <xref href=\"System.Diagnostics.TraceLogRetentionOption.SingleFileUnboundedSize\"></xref>.\n  overload: System.Diagnostics.EventSchemaTraceListener.TraceLogRetentionOption*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics/EventSchemaTraceListener.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Diagnostics.EventSchemaTraceListener.TraceTransfer(System.Diagnostics.TraceEventCache,System.String,System.Int32,System.String,System.Guid)\n  commentId: M:System.Diagnostics.EventSchemaTraceListener.TraceTransfer(System.Diagnostics.TraceEventCache,System.String,System.Int32,System.String,System.Guid)\n  id: TraceTransfer(System.Diagnostics.TraceEventCache,System.String,System.Int32,System.String,System.Guid)\n  parent: System.Diagnostics.EventSchemaTraceListener\n  langs:\n  - csharp\n  name: TraceTransfer(TraceEventCache, String, Int32, String, Guid)\n  nameWithType: EventSchemaTraceListener.TraceTransfer(TraceEventCache, String, Int32, String, Guid)\n  fullName: EventSchemaTraceListener.TraceTransfer(TraceEventCache, String, Int32, String, Guid)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Diagnostics\n  summary: Writes trace information, including the identity of a related activity, a message, and event information, to the log file.\n  remarks: \"The <xref:System.Diagnostics.EventSchemaTraceListener.TraceTransfer%2A> method is used to correlate related traces. The `eventCache`, `source`, `id`, and `relatedActivityId` parameters are used in the header and footer of the trace. The `id` parameter is converted to an unsigned integer before it is written. Therefore, a negative `id` value is written as a large positive integer. The `message` parameter is written as the `Data` element. The <xref:System.Guid.ToString%28System.String%29?displayProperty=fullName> method is called to convert the `relatedActivityId` value to a \\\"B\\\" formatted string, which appears in the header. The `Opcode` element in the footer identifies the trace event type as a <xref:System.Diagnostics.TraceEventType.Transfer>.  \\n  \\n> [!IMPORTANT]\\n>  The <xref:System.Diagnostics.EventSchemaTraceListener.TraceTransfer%2A> method should not be called by application code. It is intended to be used by a <xref:System.Diagnostics.TraceSource> object to emit the trace information for its <xref:System.Diagnostics.TraceSource.TraceTransfer%2A> method.\"\n  syntax:\n    content: >-\n      [System.Security.SecurityCritical]\n\n      public override void TraceTransfer (System.Diagnostics.TraceEventCache eventCache, string source, int id, string message, Guid relatedActivityId);\n    parameters:\n    - id: eventCache\n      type: System.Diagnostics.TraceEventCache\n      description: A <xref href=\"System.Diagnostics.TraceEventCache\"></xref> that contains the current process ID, thread ID, and stack trace information.\n    - id: source\n      type: System.String\n      description: The source name.\n    - id: id\n      type: System.Int32\n      description: A numeric identifier for the event.\n    - id: message\n      type: System.String\n      description: A trace message to write.\n    - id: relatedActivityId\n      type: System.Guid\n      description: A <xref href=\"System.Guid\"></xref> structure that identifies a related activity.\n  overload: System.Diagnostics.EventSchemaTraceListener.TraceTransfer*\n  exceptions: []\n  attributes:\n  - type: System.Security.SecurityCriticalAttribute\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics/EventSchemaTraceListener.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Diagnostics.EventSchemaTraceListener.Write(System.String)\n  commentId: M:System.Diagnostics.EventSchemaTraceListener.Write(System.String)\n  id: Write(System.String)\n  parent: System.Diagnostics.EventSchemaTraceListener\n  langs:\n  - csharp\n  name: Write(String)\n  nameWithType: EventSchemaTraceListener.Write(String)\n  fullName: EventSchemaTraceListener.Write(String)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Diagnostics\n  summary: Writes a message to the log file without providing any additional context information.\n  remarks: \"The <xref:System.Diagnostics.EventSchemaTraceListener.TraceEvent%2A> method is called to log the message as an <xref:System.Diagnostics.TraceEventType.Information> event.  \\n  \\n> [!IMPORTANT]\\n>  This method is not intended to be called directly by application code. It is called by methods of the <xref:System.Diagnostics.Debug>, <xref:System.Diagnostics.Trace>, and <xref:System.Diagnostics.TraceSource> classes to write trace data.\"\n  syntax:\n    content: public override void Write (string message);\n    parameters:\n    - id: message\n      type: System.String\n      description: The message to write.\n  overload: System.Diagnostics.EventSchemaTraceListener.Write*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics/EventSchemaTraceListener.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Diagnostics.EventSchemaTraceListener.WriteLine(System.String)\n  commentId: M:System.Diagnostics.EventSchemaTraceListener.WriteLine(System.String)\n  id: WriteLine(System.String)\n  parent: System.Diagnostics.EventSchemaTraceListener\n  langs:\n  - csharp\n  name: WriteLine(String)\n  nameWithType: EventSchemaTraceListener.WriteLine(String)\n  fullName: EventSchemaTraceListener.WriteLine(String)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Diagnostics\n  summary: Writes a message followed by the current line terminator to the log file without providing any additional context information.\n  remarks: \"The <xref:System.Diagnostics.EventSchemaTraceListener.TraceEvent%2A> method is called to log the message as an <xref:System.Diagnostics.TraceEventType.Information> event.  \\n  \\n> [!IMPORTANT]\\n>  This method is not intended to be called directly by application code. It is called by methods of the <xref:System.Diagnostics.Debug>, <xref:System.Diagnostics.Trace>, and <xref:System.Diagnostics.TraceSource> classes to write trace data.\"\n  syntax:\n    content: public override void WriteLine (string message);\n    parameters:\n    - id: message\n      type: System.String\n      description: The message to write.\n  overload: System.Diagnostics.EventSchemaTraceListener.WriteLine*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics/EventSchemaTraceListener.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Diagnostics.EventSchemaTraceListener.Writer\n  commentId: P:System.Diagnostics.EventSchemaTraceListener.Writer\n  id: Writer\n  parent: System.Diagnostics.EventSchemaTraceListener\n  langs:\n  - csharp\n  name: Writer\n  nameWithType: EventSchemaTraceListener.Writer\n  fullName: EventSchemaTraceListener.Writer\n  type: Property\n  assemblies:\n  - System.Core\n  namespace: System.Diagnostics\n  summary: Gets or sets the underlying text writer that writes to the log file.\n  remarks: An attempt to use the set accessor for the <xref:System.Diagnostics.EventSchemaTraceListener.Writer%2A> property raises a <xref:System.NotSupportedException>.\n  syntax:\n    content: >-\n      [get: System.Security.SecurityCritical]\n\n      public System.IO.TextWriter Writer { get; set; }\n    return:\n      type: System.IO.TextWriter\n      description: A <xref href=\"System.IO.TextWriter\"></xref> object.\n  overload: System.Diagnostics.EventSchemaTraceListener.Writer*\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: An attempt was made to assign a value to the <xref href=\"System.Diagnostics.EventSchemaTraceListener.Writer\"></xref> property.\n  attributes:\n  - type: 'get: System.Security.SecurityCritical'\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics/EventSchemaTraceListener.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\nreferences:\n- uid: System.Diagnostics.TextWriterTraceListener\n  parent: System.Diagnostics\n  isExternal: false\n  name: TextWriterTraceListener\n  nameWithType: TextWriterTraceListener\n  fullName: System.Diagnostics.TextWriterTraceListener\n- uid: System.ArgumentOutOfRangeException\n  parent: System\n  isExternal: false\n  name: ArgumentOutOfRangeException\n  nameWithType: ArgumentOutOfRangeException\n  fullName: System.ArgumentOutOfRangeException\n- uid: System.NotSupportedException\n  parent: System\n  isExternal: false\n  name: NotSupportedException\n  nameWithType: NotSupportedException\n  fullName: System.NotSupportedException\n- uid: System.Diagnostics.EventSchemaTraceListener.#ctor(System.String)\n  parent: System.Diagnostics.EventSchemaTraceListener\n  isExternal: false\n  name: EventSchemaTraceListener(String)\n  nameWithType: EventSchemaTraceListener.EventSchemaTraceListener(String)\n  fullName: EventSchemaTraceListener.EventSchemaTraceListener(String)\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Diagnostics.EventSchemaTraceListener.#ctor(System.String,System.String)\n  parent: System.Diagnostics.EventSchemaTraceListener\n  isExternal: false\n  name: EventSchemaTraceListener(String, String)\n  nameWithType: EventSchemaTraceListener.EventSchemaTraceListener(String, String)\n  fullName: EventSchemaTraceListener.EventSchemaTraceListener(String, String)\n- uid: System.Diagnostics.EventSchemaTraceListener.#ctor(System.String,System.String,System.Int32)\n  parent: System.Diagnostics.EventSchemaTraceListener\n  isExternal: false\n  name: EventSchemaTraceListener(String, String, Int32)\n  nameWithType: EventSchemaTraceListener.EventSchemaTraceListener(String, String, Int32)\n  fullName: EventSchemaTraceListener.EventSchemaTraceListener(String, String, Int32)\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Diagnostics.EventSchemaTraceListener.#ctor(System.String,System.String,System.Int32,System.Diagnostics.TraceLogRetentionOption)\n  parent: System.Diagnostics.EventSchemaTraceListener\n  isExternal: false\n  name: EventSchemaTraceListener(String, String, Int32, TraceLogRetentionOption)\n  nameWithType: EventSchemaTraceListener.EventSchemaTraceListener(String, String, Int32, TraceLogRetentionOption)\n  fullName: EventSchemaTraceListener.EventSchemaTraceListener(String, String, Int32, TraceLogRetentionOption)\n- uid: System.Diagnostics.TraceLogRetentionOption\n  parent: System.Diagnostics\n  isExternal: false\n  name: TraceLogRetentionOption\n  nameWithType: TraceLogRetentionOption\n  fullName: System.Diagnostics.TraceLogRetentionOption\n- uid: System.Diagnostics.EventSchemaTraceListener.#ctor(System.String,System.String,System.Int32,System.Diagnostics.TraceLogRetentionOption,System.Int64)\n  parent: System.Diagnostics.EventSchemaTraceListener\n  isExternal: false\n  name: EventSchemaTraceListener(String, String, Int32, TraceLogRetentionOption, Int64)\n  nameWithType: EventSchemaTraceListener.EventSchemaTraceListener(String, String, Int32, TraceLogRetentionOption, Int64)\n  fullName: EventSchemaTraceListener.EventSchemaTraceListener(String, String, Int32, TraceLogRetentionOption, Int64)\n- uid: System.Int64\n  parent: System\n  isExternal: false\n  name: Int64\n  nameWithType: Int64\n  fullName: System.Int64\n- uid: System.Diagnostics.EventSchemaTraceListener.#ctor(System.String,System.String,System.Int32,System.Diagnostics.TraceLogRetentionOption,System.Int64,System.Int32)\n  parent: System.Diagnostics.EventSchemaTraceListener\n  isExternal: false\n  name: EventSchemaTraceListener(String, String, Int32, TraceLogRetentionOption, Int64, Int32)\n  nameWithType: EventSchemaTraceListener.EventSchemaTraceListener(String, String, Int32, TraceLogRetentionOption, Int64, Int32)\n  fullName: EventSchemaTraceListener.EventSchemaTraceListener(String, String, Int32, TraceLogRetentionOption, Int64, Int32)\n- uid: System.Diagnostics.EventSchemaTraceListener.BufferSize\n  parent: System.Diagnostics.EventSchemaTraceListener\n  isExternal: false\n  name: BufferSize\n  nameWithType: EventSchemaTraceListener.BufferSize\n  fullName: EventSchemaTraceListener.BufferSize\n- uid: System.Diagnostics.EventSchemaTraceListener.Close\n  parent: System.Diagnostics.EventSchemaTraceListener\n  isExternal: false\n  name: Close()\n  nameWithType: EventSchemaTraceListener.Close()\n  fullName: EventSchemaTraceListener.Close()\n- uid: System.Diagnostics.EventSchemaTraceListener.Fail(System.String,System.String)\n  parent: System.Diagnostics.EventSchemaTraceListener\n  isExternal: false\n  name: Fail(String, String)\n  nameWithType: EventSchemaTraceListener.Fail(String, String)\n  fullName: EventSchemaTraceListener.Fail(String, String)\n- uid: System.Diagnostics.EventSchemaTraceListener.Flush\n  parent: System.Diagnostics.EventSchemaTraceListener\n  isExternal: false\n  name: Flush()\n  nameWithType: EventSchemaTraceListener.Flush()\n  fullName: EventSchemaTraceListener.Flush()\n- uid: System.Diagnostics.EventSchemaTraceListener.GetSupportedAttributes\n  parent: System.Diagnostics.EventSchemaTraceListener\n  isExternal: false\n  name: GetSupportedAttributes()\n  nameWithType: EventSchemaTraceListener.GetSupportedAttributes()\n  fullName: EventSchemaTraceListener.GetSupportedAttributes()\n- uid: System.String[]\n  parent: System\n  isExternal: false\n  name: String[]\n  nameWithType: String[]\n  fullName: System.String[]\n  spec.csharp:\n  - uid: System.String\n    name: String\n    nameWithType: String\n    fullName: System.String\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Diagnostics.EventSchemaTraceListener.IsThreadSafe\n  parent: System.Diagnostics.EventSchemaTraceListener\n  isExternal: false\n  name: IsThreadSafe\n  nameWithType: EventSchemaTraceListener.IsThreadSafe\n  fullName: EventSchemaTraceListener.IsThreadSafe\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Diagnostics.EventSchemaTraceListener.MaximumFileSize\n  parent: System.Diagnostics.EventSchemaTraceListener\n  isExternal: false\n  name: MaximumFileSize\n  nameWithType: EventSchemaTraceListener.MaximumFileSize\n  fullName: EventSchemaTraceListener.MaximumFileSize\n- uid: System.Diagnostics.EventSchemaTraceListener.MaximumNumberOfFiles\n  parent: System.Diagnostics.EventSchemaTraceListener\n  isExternal: false\n  name: MaximumNumberOfFiles\n  nameWithType: EventSchemaTraceListener.MaximumNumberOfFiles\n  fullName: EventSchemaTraceListener.MaximumNumberOfFiles\n- uid: System.Diagnostics.EventSchemaTraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object)\n  parent: System.Diagnostics.EventSchemaTraceListener\n  isExternal: false\n  name: TraceData(TraceEventCache, String, TraceEventType, Int32, Object)\n  nameWithType: EventSchemaTraceListener.TraceData(TraceEventCache, String, TraceEventType, Int32, Object)\n  fullName: EventSchemaTraceListener.TraceData(TraceEventCache, String, TraceEventType, Int32, Object)\n- uid: System.Diagnostics.TraceEventCache\n  parent: System.Diagnostics\n  isExternal: false\n  name: TraceEventCache\n  nameWithType: TraceEventCache\n  fullName: System.Diagnostics.TraceEventCache\n- uid: System.Diagnostics.TraceEventType\n  parent: System.Diagnostics\n  isExternal: false\n  name: TraceEventType\n  nameWithType: TraceEventType\n  fullName: System.Diagnostics.TraceEventType\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.Diagnostics.EventSchemaTraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object[])\n  parent: System.Diagnostics.EventSchemaTraceListener\n  isExternal: false\n  name: TraceData(TraceEventCache, String, TraceEventType, Int32, Object[])\n  nameWithType: EventSchemaTraceListener.TraceData(TraceEventCache, String, TraceEventType, Int32, Object[])\n  fullName: EventSchemaTraceListener.TraceData(TraceEventCache, String, TraceEventType, Int32, Object[])\n- uid: System.Object[]\n  parent: System\n  isExternal: false\n  name: Object[]\n  nameWithType: Object[]\n  fullName: System.Object[]\n  spec.csharp:\n  - uid: System.Object\n    name: Object\n    nameWithType: Object\n    fullName: System.Object\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Diagnostics.EventSchemaTraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String)\n  parent: System.Diagnostics.EventSchemaTraceListener\n  isExternal: false\n  name: TraceEvent(TraceEventCache, String, TraceEventType, Int32, String)\n  nameWithType: EventSchemaTraceListener.TraceEvent(TraceEventCache, String, TraceEventType, Int32, String)\n  fullName: EventSchemaTraceListener.TraceEvent(TraceEventCache, String, TraceEventType, Int32, String)\n- uid: System.Diagnostics.EventSchemaTraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String,System.Object[])\n  parent: System.Diagnostics.EventSchemaTraceListener\n  isExternal: false\n  name: TraceEvent(TraceEventCache, String, TraceEventType, Int32, String, Object[])\n  nameWithType: EventSchemaTraceListener.TraceEvent(TraceEventCache, String, TraceEventType, Int32, String, Object[])\n  fullName: EventSchemaTraceListener.TraceEvent(TraceEventCache, String, TraceEventType, Int32, String, Object[])\n- uid: System.Diagnostics.EventSchemaTraceListener.TraceLogRetentionOption\n  parent: System.Diagnostics.EventSchemaTraceListener\n  isExternal: false\n  name: TraceLogRetentionOption\n  nameWithType: EventSchemaTraceListener.TraceLogRetentionOption\n  fullName: EventSchemaTraceListener.TraceLogRetentionOption\n- uid: System.Diagnostics.EventSchemaTraceListener.TraceTransfer(System.Diagnostics.TraceEventCache,System.String,System.Int32,System.String,System.Guid)\n  parent: System.Diagnostics.EventSchemaTraceListener\n  isExternal: false\n  name: TraceTransfer(TraceEventCache, String, Int32, String, Guid)\n  nameWithType: EventSchemaTraceListener.TraceTransfer(TraceEventCache, String, Int32, String, Guid)\n  fullName: EventSchemaTraceListener.TraceTransfer(TraceEventCache, String, Int32, String, Guid)\n- uid: System.Guid\n  parent: System\n  isExternal: false\n  name: Guid\n  nameWithType: Guid\n  fullName: System.Guid\n- uid: System.Diagnostics.EventSchemaTraceListener.Write(System.String)\n  parent: System.Diagnostics.EventSchemaTraceListener\n  isExternal: false\n  name: Write(String)\n  nameWithType: EventSchemaTraceListener.Write(String)\n  fullName: EventSchemaTraceListener.Write(String)\n- uid: System.Diagnostics.EventSchemaTraceListener.WriteLine(System.String)\n  parent: System.Diagnostics.EventSchemaTraceListener\n  isExternal: false\n  name: WriteLine(String)\n  nameWithType: EventSchemaTraceListener.WriteLine(String)\n  fullName: EventSchemaTraceListener.WriteLine(String)\n- uid: System.Diagnostics.EventSchemaTraceListener.Writer\n  parent: System.Diagnostics.EventSchemaTraceListener\n  isExternal: false\n  name: Writer\n  nameWithType: EventSchemaTraceListener.Writer\n  fullName: EventSchemaTraceListener.Writer\n- uid: System.IO.TextWriter\n  parent: System.IO\n  isExternal: false\n  name: TextWriter\n  nameWithType: TextWriter\n  fullName: System.IO.TextWriter\n- uid: System.Diagnostics.EventSchemaTraceListener.#ctor*\n  parent: System.Diagnostics.EventSchemaTraceListener\n  isExternal: false\n  name: EventSchemaTraceListener\n  nameWithType: EventSchemaTraceListener.EventSchemaTraceListener\n  fullName: EventSchemaTraceListener.EventSchemaTraceListener\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics/EventSchemaTraceListener.xml\n- uid: System.Diagnostics.EventSchemaTraceListener.BufferSize*\n  parent: System.Diagnostics.EventSchemaTraceListener\n  isExternal: false\n  name: BufferSize\n  nameWithType: EventSchemaTraceListener.BufferSize\n  fullName: EventSchemaTraceListener.BufferSize\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics/EventSchemaTraceListener.xml\n- uid: System.Diagnostics.EventSchemaTraceListener.Close*\n  parent: System.Diagnostics.EventSchemaTraceListener\n  isExternal: false\n  name: Close\n  nameWithType: EventSchemaTraceListener.Close\n  fullName: EventSchemaTraceListener.Close\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics/EventSchemaTraceListener.xml\n- uid: System.Diagnostics.EventSchemaTraceListener.Fail*\n  parent: System.Diagnostics.EventSchemaTraceListener\n  isExternal: false\n  name: Fail\n  nameWithType: EventSchemaTraceListener.Fail\n  fullName: EventSchemaTraceListener.Fail\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics/EventSchemaTraceListener.xml\n- uid: System.Diagnostics.EventSchemaTraceListener.Flush*\n  parent: System.Diagnostics.EventSchemaTraceListener\n  isExternal: false\n  name: Flush\n  nameWithType: EventSchemaTraceListener.Flush\n  fullName: EventSchemaTraceListener.Flush\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics/EventSchemaTraceListener.xml\n- uid: System.Diagnostics.EventSchemaTraceListener.GetSupportedAttributes*\n  parent: System.Diagnostics.EventSchemaTraceListener\n  isExternal: false\n  name: GetSupportedAttributes\n  nameWithType: EventSchemaTraceListener.GetSupportedAttributes\n  fullName: EventSchemaTraceListener.GetSupportedAttributes\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics/EventSchemaTraceListener.xml\n- uid: System.Diagnostics.EventSchemaTraceListener.IsThreadSafe*\n  parent: System.Diagnostics.EventSchemaTraceListener\n  isExternal: false\n  name: IsThreadSafe\n  nameWithType: EventSchemaTraceListener.IsThreadSafe\n  fullName: EventSchemaTraceListener.IsThreadSafe\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics/EventSchemaTraceListener.xml\n- uid: System.Diagnostics.EventSchemaTraceListener.MaximumFileSize*\n  parent: System.Diagnostics.EventSchemaTraceListener\n  isExternal: false\n  name: MaximumFileSize\n  nameWithType: EventSchemaTraceListener.MaximumFileSize\n  fullName: EventSchemaTraceListener.MaximumFileSize\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics/EventSchemaTraceListener.xml\n- uid: System.Diagnostics.EventSchemaTraceListener.MaximumNumberOfFiles*\n  parent: System.Diagnostics.EventSchemaTraceListener\n  isExternal: false\n  name: MaximumNumberOfFiles\n  nameWithType: EventSchemaTraceListener.MaximumNumberOfFiles\n  fullName: EventSchemaTraceListener.MaximumNumberOfFiles\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics/EventSchemaTraceListener.xml\n- uid: System.Diagnostics.EventSchemaTraceListener.TraceData*\n  parent: System.Diagnostics.EventSchemaTraceListener\n  isExternal: false\n  name: TraceData\n  nameWithType: EventSchemaTraceListener.TraceData\n  fullName: EventSchemaTraceListener.TraceData\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics/EventSchemaTraceListener.xml\n- uid: System.Diagnostics.EventSchemaTraceListener.TraceEvent*\n  parent: System.Diagnostics.EventSchemaTraceListener\n  isExternal: false\n  name: TraceEvent\n  nameWithType: EventSchemaTraceListener.TraceEvent\n  fullName: EventSchemaTraceListener.TraceEvent\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics/EventSchemaTraceListener.xml\n- uid: System.Diagnostics.EventSchemaTraceListener.TraceLogRetentionOption*\n  parent: System.Diagnostics.EventSchemaTraceListener\n  isExternal: false\n  name: TraceLogRetentionOption\n  nameWithType: EventSchemaTraceListener.TraceLogRetentionOption\n  fullName: EventSchemaTraceListener.TraceLogRetentionOption\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics/EventSchemaTraceListener.xml\n- uid: System.Diagnostics.EventSchemaTraceListener.TraceTransfer*\n  parent: System.Diagnostics.EventSchemaTraceListener\n  isExternal: false\n  name: TraceTransfer\n  nameWithType: EventSchemaTraceListener.TraceTransfer\n  fullName: EventSchemaTraceListener.TraceTransfer\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics/EventSchemaTraceListener.xml\n- uid: System.Diagnostics.EventSchemaTraceListener.Write*\n  parent: System.Diagnostics.EventSchemaTraceListener\n  isExternal: false\n  name: Write\n  nameWithType: EventSchemaTraceListener.Write\n  fullName: EventSchemaTraceListener.Write\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics/EventSchemaTraceListener.xml\n- uid: System.Diagnostics.EventSchemaTraceListener.WriteLine*\n  parent: System.Diagnostics.EventSchemaTraceListener\n  isExternal: false\n  name: WriteLine\n  nameWithType: EventSchemaTraceListener.WriteLine\n  fullName: EventSchemaTraceListener.WriteLine\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics/EventSchemaTraceListener.xml\n- uid: System.Diagnostics.EventSchemaTraceListener.Writer*\n  parent: System.Diagnostics.EventSchemaTraceListener\n  isExternal: false\n  name: Writer\n  nameWithType: EventSchemaTraceListener.Writer\n  fullName: EventSchemaTraceListener.Writer\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics/EventSchemaTraceListener.xml\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: Object.Equals(Object)\n  fullName: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: Object.GetHashCode()\n  fullName: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: false\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: false\n  name: ToString()\n  nameWithType: Object.ToString()\n  fullName: Object.ToString()\n- uid: System.Diagnostics.TraceListener.Attributes\n  parent: System.Diagnostics.TraceListener\n  isExternal: false\n  name: Attributes\n  nameWithType: TraceListener.Attributes\n  fullName: TraceListener.Attributes\n- uid: System.Diagnostics.TraceListener.Dispose\n  parent: System.Diagnostics.TraceListener\n  isExternal: false\n  name: Dispose()\n  nameWithType: TraceListener.Dispose()\n  fullName: TraceListener.Dispose()\n- uid: System.Diagnostics.TextWriterTraceListener.Dispose(System.Boolean)\n  parent: System.Diagnostics.TextWriterTraceListener\n  isExternal: false\n  name: Dispose(Boolean)\n  nameWithType: TextWriterTraceListener.Dispose(Boolean)\n  fullName: TextWriterTraceListener.Dispose(Boolean)\n- uid: System.Diagnostics.TraceListener.Fail(System.String)\n  parent: System.Diagnostics.TraceListener\n  isExternal: false\n  name: Fail(String)\n  nameWithType: TraceListener.Fail(String)\n  fullName: TraceListener.Fail(String)\n- uid: System.Diagnostics.TraceListener.Filter\n  parent: System.Diagnostics.TraceListener\n  isExternal: false\n  name: Filter\n  nameWithType: TraceListener.Filter\n  fullName: TraceListener.Filter\n- uid: System.Diagnostics.TraceListener.IndentLevel\n  parent: System.Diagnostics.TraceListener\n  isExternal: false\n  name: IndentLevel\n  nameWithType: TraceListener.IndentLevel\n  fullName: TraceListener.IndentLevel\n- uid: System.Diagnostics.TraceListener.IndentSize\n  parent: System.Diagnostics.TraceListener\n  isExternal: false\n  name: IndentSize\n  nameWithType: TraceListener.IndentSize\n  fullName: TraceListener.IndentSize\n- uid: System.Diagnostics.TraceListener.Name\n  parent: System.Diagnostics.TraceListener\n  isExternal: false\n  name: Name\n  nameWithType: TraceListener.Name\n  fullName: TraceListener.Name\n- uid: System.Diagnostics.TraceListener.NeedIndent\n  parent: System.Diagnostics.TraceListener\n  isExternal: false\n  name: NeedIndent\n  nameWithType: TraceListener.NeedIndent\n  fullName: TraceListener.NeedIndent\n- uid: System.Diagnostics.TraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32)\n  parent: System.Diagnostics.TraceListener\n  isExternal: false\n  name: TraceEvent(TraceEventCache, String, TraceEventType, Int32)\n  nameWithType: TraceListener.TraceEvent(TraceEventCache, String, TraceEventType, Int32)\n  fullName: TraceListener.TraceEvent(TraceEventCache, String, TraceEventType, Int32)\n- uid: System.Diagnostics.TraceListener.TraceOutputOptions\n  parent: System.Diagnostics.TraceListener\n  isExternal: false\n  name: TraceOutputOptions\n  nameWithType: TraceListener.TraceOutputOptions\n  fullName: TraceListener.TraceOutputOptions\n- uid: System.Diagnostics.TraceListener.Write(System.Object)\n  parent: System.Diagnostics.TraceListener\n  isExternal: false\n  name: Write(Object)\n  nameWithType: TraceListener.Write(Object)\n  fullName: TraceListener.Write(Object)\n- uid: System.Diagnostics.TraceListener.Write(System.Object,System.String)\n  parent: System.Diagnostics.TraceListener\n  isExternal: false\n  name: Write(Object, String)\n  nameWithType: TraceListener.Write(Object, String)\n  fullName: TraceListener.Write(Object, String)\n- uid: System.Diagnostics.TraceListener.Write(System.String,System.String)\n  parent: System.Diagnostics.TraceListener\n  isExternal: false\n  name: Write(String, String)\n  nameWithType: TraceListener.Write(String, String)\n  fullName: TraceListener.Write(String, String)\n- uid: System.Diagnostics.TraceListener.WriteIndent\n  parent: System.Diagnostics.TraceListener\n  isExternal: false\n  name: WriteIndent()\n  nameWithType: TraceListener.WriteIndent()\n  fullName: TraceListener.WriteIndent()\n- uid: System.Diagnostics.TraceListener.WriteLine(System.Object)\n  parent: System.Diagnostics.TraceListener\n  isExternal: false\n  name: WriteLine(Object)\n  nameWithType: TraceListener.WriteLine(Object)\n  fullName: TraceListener.WriteLine(Object)\n- uid: System.Diagnostics.TraceListener.WriteLine(System.Object,System.String)\n  parent: System.Diagnostics.TraceListener\n  isExternal: false\n  name: WriteLine(Object, String)\n  nameWithType: TraceListener.WriteLine(Object, String)\n  fullName: TraceListener.WriteLine(Object, String)\n- uid: System.Diagnostics.TraceListener.WriteLine(System.String,System.String)\n  parent: System.Diagnostics.TraceListener\n  isExternal: false\n  name: WriteLine(String, String)\n  nameWithType: TraceListener.WriteLine(String, String)\n  fullName: TraceListener.WriteLine(String, String)\n"}