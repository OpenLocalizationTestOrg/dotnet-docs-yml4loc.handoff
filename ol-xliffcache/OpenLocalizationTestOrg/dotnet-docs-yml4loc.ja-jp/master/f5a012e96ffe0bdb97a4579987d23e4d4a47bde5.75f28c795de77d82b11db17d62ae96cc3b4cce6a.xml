{"nodes":[{"content":"Represents a randomly accessed view of a memory-mapped file.","nodes":[{"pos":[0,60],"content":"Represents a randomly accessed view of a memory-mapped file.","nodes":[{"content":"Represents a randomly accessed view of a memory-mapped file.","pos":[0,60]}]}],"pos":[809,870],"yaml":true},{"content":"Use the <xref:System.IO.MemoryMappedFiles.MemoryMappedFile.CreateViewAccessor%2A> method of a <xref:System.IO.MemoryMappedFiles.MemoryMappedFile> object to get this view.","nodes":[{"pos":[0,170],"content":"Use the <xref:System.IO.MemoryMappedFiles.MemoryMappedFile.CreateViewAccessor%2A> method of a <xref:System.IO.MemoryMappedFiles.MemoryMappedFile> object to get this view.","nodes":[{"content":"Use the <ph id=\"ph1\">&lt;xref:System.IO.MemoryMappedFiles.MemoryMappedFile.CreateViewAccessor%2A&gt;</ph> method of a <ph id=\"ph2\">&lt;xref:System.IO.MemoryMappedFiles.MemoryMappedFile&gt;</ph> object to get this view.","pos":[0,170],"source":"Use the <xref:System.IO.MemoryMappedFiles.MemoryMappedFile.CreateViewAccessor%2A> method of a <xref:System.IO.MemoryMappedFiles.MemoryMappedFile> object to get this view."}]}],"pos":[881,1052],"yaml":true,"extradata":"MT"},{"content":"Clears all buffers for this view and causes any buffered data to be written to the underlying file.","nodes":[{"pos":[0,99],"content":"Clears all buffers for this view and causes any buffered data to be written to the underlying file.","nodes":[{"content":"Clears all buffers for this view and causes any buffered data to be written to the underlying file.","pos":[0,99]}]}],"pos":[7470,7570],"yaml":true},{"content":"If you are using views that are adjacent to each other, this method will also clear the following data, provided its size is equal to a multiple of the system page size:  \n  \n-   Any data that precedes the view up until the latest file offset.  \n  \n-   Any data that follows the view up until the earliest file offset.","nodes":[{"pos":[0,169],"content":"If you are using views that are adjacent to each other, this method will also clear the following data, provided its size is equal to a multiple of the system page size:","nodes":[{"content":"If you are using views that are adjacent to each other, this method will also clear the following data, provided its size is equal to a multiple of the system page size:","pos":[0,169]}]},{"pos":[179,243],"content":"Any data that precedes the view up until the latest file offset.","nodes":[{"content":"Any data that precedes the view up until the latest file offset.","pos":[0,64]}]},{"pos":[253,318],"content":"Any data that follows the view up until the earliest file offset.","nodes":[{"content":"Any data that follows the view up until the earliest file offset.","pos":[0,65]}]}],"pos":[7581,7906],"yaml":true,"extradata":"MT"},{"content":"Methods were called after the accessor was closed.","nodes":[{"pos":[0,50],"content":"Methods were called after the accessor was closed.","nodes":[{"content":"Methods were called after the accessor was closed.","pos":[0,50]}]}],"pos":[8213,8264],"yaml":true},{"content":"[Supported in the .NET Framework 4.5.1 and later versions]  \n  \n Gets the number of bytes by which the starting position of this view is offset from the beginning of the memory-mapped file.","nodes":[{"pos":[0,58],"content":"[Supported in the .NET Framework 4.5.1 and later versions]","nodes":[{"content":"[Supported in the .NET Framework 4.5.1 and later versions]","pos":[0,58]}]},{"pos":[65,189],"content":"Gets the number of bytes by which the starting position of this view is offset from the beginning of the memory-mapped file.","nodes":[{"content":"Gets the number of bytes by which the starting position of this view is offset from the beginning of the memory-mapped file.","pos":[0,124]}]}],"pos":[9674,9868],"yaml":true},{"content":"The number of bytes between the starting position of this view and the beginning of the memory-mapped file.","nodes":[{"pos":[0,107],"content":"The number of bytes between the starting position of this view and the beginning of the memory-mapped file.","nodes":[{"content":"The number of bytes between the starting position of this view and the beginning of the memory-mapped file.","pos":[0,107]}]}],"pos":[9982,10090],"yaml":true},{"content":"The object from which this instance was created is `null`.","nodes":[{"pos":[0,58],"content":"The object from which this instance was created is <ph id=\"ph1\">`null`</ph>.","source":"The object from which this instance was created is `null`."}],"pos":[10294,10353],"yaml":true},{"content":"Gets a handle to the view of a memory-mapped file.","nodes":[{"pos":[0,50],"content":"Gets a handle to the view of a memory-mapped file.","nodes":[{"content":"Gets a handle to the view of a memory-mapped file.","pos":[0,50]}]}],"pos":[11733,11784],"yaml":true},{"content":"A wrapper for the operating system's handle to the view of the file.","nodes":[{"pos":[0,68],"content":"A wrapper for the operating system's handle to the view of the file.","nodes":[{"content":"A wrapper for the operating system's handle to the view of the file.","pos":[0,68]}]}],"pos":[12059,12128],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.IO.MemoryMappedFiles.MemoryMappedViewAccessor\n  commentId: T:System.IO.MemoryMappedFiles.MemoryMappedViewAccessor\n  id: MemoryMappedViewAccessor\n  children:\n  - System.IO.MemoryMappedFiles.MemoryMappedViewAccessor.Dispose(System.Boolean)\n  - System.IO.MemoryMappedFiles.MemoryMappedViewAccessor.Flush\n  - System.IO.MemoryMappedFiles.MemoryMappedViewAccessor.PointerOffset\n  - System.IO.MemoryMappedFiles.MemoryMappedViewAccessor.SafeMemoryMappedViewHandle\n  langs:\n  - csharp\n  name: MemoryMappedViewAccessor\n  nameWithType: MemoryMappedViewAccessor\n  fullName: System.IO.MemoryMappedFiles.MemoryMappedViewAccessor\n  type: Class\n  assemblies:\n  - System.IO.MemoryMappedFiles\n  - System.Core\n  - netstandard\n  namespace: System.IO.MemoryMappedFiles\n  summary: Represents a randomly accessed view of a memory-mapped file.\n  remarks: Use the <xref:System.IO.MemoryMappedFiles.MemoryMappedFile.CreateViewAccessor%2A> method of a <xref:System.IO.MemoryMappedFiles.MemoryMappedFile> object to get this view.\n  example:\n  - \"The following example obtains a <xref:System.IO.MemoryMappedFiles.MemoryMappedViewAccessor> from a large memory-mapped file for editing.  \\n  \\n This code example is part of a larger example provided for the <xref:System.IO.MemoryMappedFiles.MemoryMappedFile> class.  \\n  \\n [!code-csharp[memorymappedfiles.memorymappedfile.createfromfile#2](~/samples/snippets/csharp/VS_Snippets_CLR/memorymappedfiles.memorymappedfile.createfromfile/cs/program.cs#2)]\\n [!code-vb[memorymappedfiles.memorymappedfile.createfromfile#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/memorymappedfiles.memorymappedfile.createfromfile/vb/program.vb#2)]\"\n  syntax:\n    content: 'public sealed class MemoryMappedViewAccessor : System.IO.UnmanagedMemoryAccessor'\n  inheritance:\n  - System.Object\n  - System.IO.UnmanagedMemoryAccessor\n  implements: []\n  inheritedMembers:\n  - System.IO.UnmanagedMemoryAccessor.CanRead\n  - System.IO.UnmanagedMemoryAccessor.CanWrite\n  - System.IO.UnmanagedMemoryAccessor.Capacity\n  - System.IO.UnmanagedMemoryAccessor.Dispose\n  - System.IO.UnmanagedMemoryAccessor.Initialize(System.Runtime.InteropServices.SafeBuffer,System.Int64,System.Int64,System.IO.FileAccess)\n  - System.IO.UnmanagedMemoryAccessor.IsOpen\n  - System.IO.UnmanagedMemoryAccessor.Read``1(System.Int64,``0@)\n  - System.IO.UnmanagedMemoryAccessor.ReadArray``1(System.Int64,``0[],System.Int32,System.Int32)\n  - System.IO.UnmanagedMemoryAccessor.ReadBoolean(System.Int64)\n  - System.IO.UnmanagedMemoryAccessor.ReadByte(System.Int64)\n  - System.IO.UnmanagedMemoryAccessor.ReadChar(System.Int64)\n  - System.IO.UnmanagedMemoryAccessor.ReadDecimal(System.Int64)\n  - System.IO.UnmanagedMemoryAccessor.ReadDouble(System.Int64)\n  - System.IO.UnmanagedMemoryAccessor.ReadInt16(System.Int64)\n  - System.IO.UnmanagedMemoryAccessor.ReadInt32(System.Int64)\n  - System.IO.UnmanagedMemoryAccessor.ReadInt64(System.Int64)\n  - System.IO.UnmanagedMemoryAccessor.ReadSByte(System.Int64)\n  - System.IO.UnmanagedMemoryAccessor.ReadSingle(System.Int64)\n  - System.IO.UnmanagedMemoryAccessor.ReadUInt16(System.Int64)\n  - System.IO.UnmanagedMemoryAccessor.ReadUInt32(System.Int64)\n  - System.IO.UnmanagedMemoryAccessor.ReadUInt64(System.Int64)\n  - System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.Boolean)\n  - System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.Byte)\n  - System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.Char)\n  - System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.Decimal)\n  - System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.Double)\n  - System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.Int16)\n  - System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.Int32)\n  - System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.Int64)\n  - System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.SByte)\n  - System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.Single)\n  - System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.UInt16)\n  - System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.UInt32)\n  - System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.UInt64)\n  - System.IO.UnmanagedMemoryAccessor.Write``1(System.Int64,``0@)\n  - System.IO.UnmanagedMemoryAccessor.WriteArray``1(System.Int64,``0[],System.Int32,System.Int32)\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.ToString\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO.MemoryMappedFiles/MemoryMappedViewAccessor.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.IO.MemoryMappedFiles.MemoryMappedViewAccessor.Dispose(System.Boolean)\n  commentId: M:System.IO.MemoryMappedFiles.MemoryMappedViewAccessor.Dispose(System.Boolean)\n  id: Dispose(System.Boolean)\n  parent: System.IO.MemoryMappedFiles.MemoryMappedViewAccessor\n  langs:\n  - csharp\n  name: Dispose(Boolean)\n  nameWithType: MemoryMappedViewAccessor.Dispose(Boolean)\n  fullName: MemoryMappedViewAccessor.Dispose(Boolean)\n  type: Method\n  assemblies:\n  - System.IO.MemoryMappedFiles\n  - System.Core\n  - netstandard\n  namespace: System.IO.MemoryMappedFiles\n  syntax:\n    content: protected override void Dispose (bool disposing);\n    parameters:\n    - id: disposing\n      type: System.Boolean\n      description: ''\n  overload: System.IO.MemoryMappedFiles.MemoryMappedViewAccessor.Dispose*\n  exceptions: []\n  attributes: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO.MemoryMappedFiles/MemoryMappedViewAccessor.xml\n- uid: System.IO.MemoryMappedFiles.MemoryMappedViewAccessor.Flush\n  commentId: M:System.IO.MemoryMappedFiles.MemoryMappedViewAccessor.Flush\n  id: Flush\n  parent: System.IO.MemoryMappedFiles.MemoryMappedViewAccessor\n  langs:\n  - csharp\n  name: Flush()\n  nameWithType: MemoryMappedViewAccessor.Flush()\n  fullName: MemoryMappedViewAccessor.Flush()\n  type: Method\n  assemblies:\n  - System.IO.MemoryMappedFiles\n  - System.Core\n  - netstandard\n  namespace: System.IO.MemoryMappedFiles\n  summary: Clears all buffers for this view and causes any buffered data to be written to the underlying file.\n  remarks: \"If you are using views that are adjacent to each other, this method will also clear the following data, provided its size is equal to a multiple of the system page size:  \\n  \\n-   Any data that precedes the view up until the latest file offset.  \\n  \\n-   Any data that follows the view up until the earliest file offset.\"\n  syntax:\n    content: >-\n      [System.Security.SecurityCritical]\n\n      public void Flush ();\n    parameters: []\n  overload: System.IO.MemoryMappedFiles.MemoryMappedViewAccessor.Flush*\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: Methods were called after the accessor was closed.\n  attributes:\n  - type: System.Security.SecurityCriticalAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO.MemoryMappedFiles/MemoryMappedViewAccessor.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.IO.MemoryMappedFiles.MemoryMappedViewAccessor.PointerOffset\n  commentId: P:System.IO.MemoryMappedFiles.MemoryMappedViewAccessor.PointerOffset\n  id: PointerOffset\n  parent: System.IO.MemoryMappedFiles.MemoryMappedViewAccessor\n  langs:\n  - csharp\n  name: PointerOffset\n  nameWithType: MemoryMappedViewAccessor.PointerOffset\n  fullName: MemoryMappedViewAccessor.PointerOffset\n  type: Property\n  assemblies:\n  - System.IO.MemoryMappedFiles\n  - System.Core\n  - netstandard\n  namespace: System.IO.MemoryMappedFiles\n  summary: \"[Supported in the .NET Framework 4.5.1 and later versions]  \\n  \\n Gets the number of bytes by which the starting position of this view is offset from the beginning of the memory-mapped file.\"\n  syntax:\n    content: public long PointerOffset { get; }\n    return:\n      type: System.Int64\n      description: The number of bytes between the starting position of this view and the beginning of the memory-mapped file.\n  overload: System.IO.MemoryMappedFiles.MemoryMappedViewAccessor.PointerOffset*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The object from which this instance was created is `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO.MemoryMappedFiles/MemoryMappedViewAccessor.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.IO.MemoryMappedFiles.MemoryMappedViewAccessor.SafeMemoryMappedViewHandle\n  commentId: P:System.IO.MemoryMappedFiles.MemoryMappedViewAccessor.SafeMemoryMappedViewHandle\n  id: SafeMemoryMappedViewHandle\n  parent: System.IO.MemoryMappedFiles.MemoryMappedViewAccessor\n  langs:\n  - csharp\n  name: SafeMemoryMappedViewHandle\n  nameWithType: MemoryMappedViewAccessor.SafeMemoryMappedViewHandle\n  fullName: MemoryMappedViewAccessor.SafeMemoryMappedViewHandle\n  type: Property\n  assemblies:\n  - System.IO.MemoryMappedFiles\n  - System.Core\n  - netstandard\n  namespace: System.IO.MemoryMappedFiles\n  summary: Gets a handle to the view of a memory-mapped file.\n  syntax:\n    content: >-\n      [get: System.Security.SecurityCritical]\n\n      public Microsoft.Win32.SafeHandles.SafeMemoryMappedViewHandle SafeMemoryMappedViewHandle { get; }\n    return:\n      type: Microsoft.Win32.SafeHandles.SafeMemoryMappedViewHandle\n      description: A wrapper for the operating system's handle to the view of the file.\n  overload: System.IO.MemoryMappedFiles.MemoryMappedViewAccessor.SafeMemoryMappedViewHandle*\n  exceptions: []\n  attributes:\n  - type: 'get: System.Security.SecurityCritical'\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO.MemoryMappedFiles/MemoryMappedViewAccessor.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\nreferences:\n- uid: System.IO.UnmanagedMemoryAccessor\n  parent: System.IO\n  isExternal: false\n  name: UnmanagedMemoryAccessor\n  nameWithType: UnmanagedMemoryAccessor\n  fullName: System.IO.UnmanagedMemoryAccessor\n- uid: System.ObjectDisposedException\n  parent: System\n  isExternal: false\n  name: ObjectDisposedException\n  nameWithType: ObjectDisposedException\n  fullName: System.ObjectDisposedException\n- uid: System.InvalidOperationException\n  parent: System\n  isExternal: false\n  name: InvalidOperationException\n  nameWithType: InvalidOperationException\n  fullName: System.InvalidOperationException\n- uid: System.IO.MemoryMappedFiles.MemoryMappedViewAccessor.Dispose(System.Boolean)\n  parent: System.IO.MemoryMappedFiles.MemoryMappedViewAccessor\n  isExternal: false\n  name: Dispose(Boolean)\n  nameWithType: MemoryMappedViewAccessor.Dispose(Boolean)\n  fullName: MemoryMappedViewAccessor.Dispose(Boolean)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.IO.MemoryMappedFiles.MemoryMappedViewAccessor.Flush\n  parent: System.IO.MemoryMappedFiles.MemoryMappedViewAccessor\n  isExternal: false\n  name: Flush()\n  nameWithType: MemoryMappedViewAccessor.Flush()\n  fullName: MemoryMappedViewAccessor.Flush()\n- uid: System.IO.MemoryMappedFiles.MemoryMappedViewAccessor.PointerOffset\n  parent: System.IO.MemoryMappedFiles.MemoryMappedViewAccessor\n  isExternal: false\n  name: PointerOffset\n  nameWithType: MemoryMappedViewAccessor.PointerOffset\n  fullName: MemoryMappedViewAccessor.PointerOffset\n- uid: System.Int64\n  parent: System\n  isExternal: false\n  name: Int64\n  nameWithType: Int64\n  fullName: System.Int64\n- uid: System.IO.MemoryMappedFiles.MemoryMappedViewAccessor.SafeMemoryMappedViewHandle\n  parent: System.IO.MemoryMappedFiles.MemoryMappedViewAccessor\n  isExternal: false\n  name: SafeMemoryMappedViewHandle\n  nameWithType: MemoryMappedViewAccessor.SafeMemoryMappedViewHandle\n  fullName: MemoryMappedViewAccessor.SafeMemoryMappedViewHandle\n- uid: Microsoft.Win32.SafeHandles.SafeMemoryMappedViewHandle\n  parent: Microsoft.Win32.SafeHandles\n  isExternal: false\n  name: SafeMemoryMappedViewHandle\n  nameWithType: SafeMemoryMappedViewHandle\n  fullName: Microsoft.Win32.SafeHandles.SafeMemoryMappedViewHandle\n- uid: System.IO.MemoryMappedFiles.MemoryMappedViewAccessor.Dispose*\n  parent: System.IO.MemoryMappedFiles.MemoryMappedViewAccessor\n  isExternal: false\n  name: Dispose\n  nameWithType: MemoryMappedViewAccessor.Dispose\n  fullName: MemoryMappedViewAccessor.Dispose\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO.MemoryMappedFiles/MemoryMappedViewAccessor.xml\n- uid: System.IO.MemoryMappedFiles.MemoryMappedViewAccessor.Flush*\n  parent: System.IO.MemoryMappedFiles.MemoryMappedViewAccessor\n  isExternal: false\n  name: Flush\n  nameWithType: MemoryMappedViewAccessor.Flush\n  fullName: MemoryMappedViewAccessor.Flush\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO.MemoryMappedFiles/MemoryMappedViewAccessor.xml\n- uid: System.IO.MemoryMappedFiles.MemoryMappedViewAccessor.PointerOffset*\n  parent: System.IO.MemoryMappedFiles.MemoryMappedViewAccessor\n  isExternal: false\n  name: PointerOffset\n  nameWithType: MemoryMappedViewAccessor.PointerOffset\n  fullName: MemoryMappedViewAccessor.PointerOffset\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO.MemoryMappedFiles/MemoryMappedViewAccessor.xml\n- uid: System.IO.MemoryMappedFiles.MemoryMappedViewAccessor.SafeMemoryMappedViewHandle*\n  parent: System.IO.MemoryMappedFiles.MemoryMappedViewAccessor\n  isExternal: false\n  name: SafeMemoryMappedViewHandle\n  nameWithType: MemoryMappedViewAccessor.SafeMemoryMappedViewHandle\n  fullName: MemoryMappedViewAccessor.SafeMemoryMappedViewHandle\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO.MemoryMappedFiles/MemoryMappedViewAccessor.xml\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: Object.Equals(Object)\n  fullName: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: Object.GetHashCode()\n  fullName: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: false\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: false\n  name: ToString()\n  nameWithType: Object.ToString()\n  fullName: Object.ToString()\n- uid: System.IO.UnmanagedMemoryAccessor.CanRead\n  parent: System.IO.UnmanagedMemoryAccessor\n  isExternal: false\n  name: CanRead\n  nameWithType: UnmanagedMemoryAccessor.CanRead\n  fullName: UnmanagedMemoryAccessor.CanRead\n- uid: System.IO.UnmanagedMemoryAccessor.CanWrite\n  parent: System.IO.UnmanagedMemoryAccessor\n  isExternal: false\n  name: CanWrite\n  nameWithType: UnmanagedMemoryAccessor.CanWrite\n  fullName: UnmanagedMemoryAccessor.CanWrite\n- uid: System.IO.UnmanagedMemoryAccessor.Capacity\n  parent: System.IO.UnmanagedMemoryAccessor\n  isExternal: false\n  name: Capacity\n  nameWithType: UnmanagedMemoryAccessor.Capacity\n  fullName: UnmanagedMemoryAccessor.Capacity\n- uid: System.IO.UnmanagedMemoryAccessor.Dispose\n  parent: System.IO.UnmanagedMemoryAccessor\n  isExternal: false\n  name: Dispose()\n  nameWithType: UnmanagedMemoryAccessor.Dispose()\n  fullName: UnmanagedMemoryAccessor.Dispose()\n- uid: System.IO.UnmanagedMemoryAccessor.Initialize(System.Runtime.InteropServices.SafeBuffer,System.Int64,System.Int64,System.IO.FileAccess)\n  parent: System.IO.UnmanagedMemoryAccessor\n  isExternal: false\n  name: Initialize(SafeBuffer, Int64, Int64, FileAccess)\n  nameWithType: UnmanagedMemoryAccessor.Initialize(SafeBuffer, Int64, Int64, FileAccess)\n  fullName: UnmanagedMemoryAccessor.Initialize(SafeBuffer, Int64, Int64, FileAccess)\n- uid: System.IO.UnmanagedMemoryAccessor.IsOpen\n  parent: System.IO.UnmanagedMemoryAccessor\n  isExternal: false\n  name: IsOpen\n  nameWithType: UnmanagedMemoryAccessor.IsOpen\n  fullName: UnmanagedMemoryAccessor.IsOpen\n- uid: System.IO.UnmanagedMemoryAccessor.Read``1(System.Int64,``0@)\n  parent: System.IO.UnmanagedMemoryAccessor\n  isExternal: false\n  name: Read<T>(Int64, T)\n  nameWithType: UnmanagedMemoryAccessor.Read<T>(Int64, T)\n  fullName: UnmanagedMemoryAccessor.Read<T>(Int64, T)\n- uid: System.IO.UnmanagedMemoryAccessor.ReadArray``1(System.Int64,``0[],System.Int32,System.Int32)\n  parent: System.IO.UnmanagedMemoryAccessor\n  isExternal: false\n  name: ReadArray<T>(Int64, T[], Int32, Int32)\n  nameWithType: UnmanagedMemoryAccessor.ReadArray<T>(Int64, T[], Int32, Int32)\n  fullName: UnmanagedMemoryAccessor.ReadArray<T>(Int64, T[], Int32, Int32)\n- uid: System.IO.UnmanagedMemoryAccessor.ReadBoolean(System.Int64)\n  parent: System.IO.UnmanagedMemoryAccessor\n  isExternal: false\n  name: ReadBoolean(Int64)\n  nameWithType: UnmanagedMemoryAccessor.ReadBoolean(Int64)\n  fullName: UnmanagedMemoryAccessor.ReadBoolean(Int64)\n- uid: System.IO.UnmanagedMemoryAccessor.ReadByte(System.Int64)\n  parent: System.IO.UnmanagedMemoryAccessor\n  isExternal: false\n  name: ReadByte(Int64)\n  nameWithType: UnmanagedMemoryAccessor.ReadByte(Int64)\n  fullName: UnmanagedMemoryAccessor.ReadByte(Int64)\n- uid: System.IO.UnmanagedMemoryAccessor.ReadChar(System.Int64)\n  parent: System.IO.UnmanagedMemoryAccessor\n  isExternal: false\n  name: ReadChar(Int64)\n  nameWithType: UnmanagedMemoryAccessor.ReadChar(Int64)\n  fullName: UnmanagedMemoryAccessor.ReadChar(Int64)\n- uid: System.IO.UnmanagedMemoryAccessor.ReadDecimal(System.Int64)\n  parent: System.IO.UnmanagedMemoryAccessor\n  isExternal: false\n  name: ReadDecimal(Int64)\n  nameWithType: UnmanagedMemoryAccessor.ReadDecimal(Int64)\n  fullName: UnmanagedMemoryAccessor.ReadDecimal(Int64)\n- uid: System.IO.UnmanagedMemoryAccessor.ReadDouble(System.Int64)\n  parent: System.IO.UnmanagedMemoryAccessor\n  isExternal: false\n  name: ReadDouble(Int64)\n  nameWithType: UnmanagedMemoryAccessor.ReadDouble(Int64)\n  fullName: UnmanagedMemoryAccessor.ReadDouble(Int64)\n- uid: System.IO.UnmanagedMemoryAccessor.ReadInt16(System.Int64)\n  parent: System.IO.UnmanagedMemoryAccessor\n  isExternal: false\n  name: ReadInt16(Int64)\n  nameWithType: UnmanagedMemoryAccessor.ReadInt16(Int64)\n  fullName: UnmanagedMemoryAccessor.ReadInt16(Int64)\n- uid: System.IO.UnmanagedMemoryAccessor.ReadInt32(System.Int64)\n  parent: System.IO.UnmanagedMemoryAccessor\n  isExternal: false\n  name: ReadInt32(Int64)\n  nameWithType: UnmanagedMemoryAccessor.ReadInt32(Int64)\n  fullName: UnmanagedMemoryAccessor.ReadInt32(Int64)\n- uid: System.IO.UnmanagedMemoryAccessor.ReadInt64(System.Int64)\n  parent: System.IO.UnmanagedMemoryAccessor\n  isExternal: false\n  name: ReadInt64(Int64)\n  nameWithType: UnmanagedMemoryAccessor.ReadInt64(Int64)\n  fullName: UnmanagedMemoryAccessor.ReadInt64(Int64)\n- uid: System.IO.UnmanagedMemoryAccessor.ReadSByte(System.Int64)\n  parent: System.IO.UnmanagedMemoryAccessor\n  isExternal: false\n  name: ReadSByte(Int64)\n  nameWithType: UnmanagedMemoryAccessor.ReadSByte(Int64)\n  fullName: UnmanagedMemoryAccessor.ReadSByte(Int64)\n- uid: System.IO.UnmanagedMemoryAccessor.ReadSingle(System.Int64)\n  parent: System.IO.UnmanagedMemoryAccessor\n  isExternal: false\n  name: ReadSingle(Int64)\n  nameWithType: UnmanagedMemoryAccessor.ReadSingle(Int64)\n  fullName: UnmanagedMemoryAccessor.ReadSingle(Int64)\n- uid: System.IO.UnmanagedMemoryAccessor.ReadUInt16(System.Int64)\n  parent: System.IO.UnmanagedMemoryAccessor\n  isExternal: false\n  name: ReadUInt16(Int64)\n  nameWithType: UnmanagedMemoryAccessor.ReadUInt16(Int64)\n  fullName: UnmanagedMemoryAccessor.ReadUInt16(Int64)\n- uid: System.IO.UnmanagedMemoryAccessor.ReadUInt32(System.Int64)\n  parent: System.IO.UnmanagedMemoryAccessor\n  isExternal: false\n  name: ReadUInt32(Int64)\n  nameWithType: UnmanagedMemoryAccessor.ReadUInt32(Int64)\n  fullName: UnmanagedMemoryAccessor.ReadUInt32(Int64)\n- uid: System.IO.UnmanagedMemoryAccessor.ReadUInt64(System.Int64)\n  parent: System.IO.UnmanagedMemoryAccessor\n  isExternal: false\n  name: ReadUInt64(Int64)\n  nameWithType: UnmanagedMemoryAccessor.ReadUInt64(Int64)\n  fullName: UnmanagedMemoryAccessor.ReadUInt64(Int64)\n- uid: System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.UInt64)\n  parent: System.IO.UnmanagedMemoryAccessor\n  isExternal: false\n  name: Write(Int64, UInt64)\n  nameWithType: UnmanagedMemoryAccessor.Write(Int64, UInt64)\n  fullName: UnmanagedMemoryAccessor.Write(Int64, UInt64)\n- uid: System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.UInt32)\n  parent: System.IO.UnmanagedMemoryAccessor\n  isExternal: false\n  name: Write(Int64, UInt32)\n  nameWithType: UnmanagedMemoryAccessor.Write(Int64, UInt32)\n  fullName: UnmanagedMemoryAccessor.Write(Int64, UInt32)\n- uid: System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.UInt16)\n  parent: System.IO.UnmanagedMemoryAccessor\n  isExternal: false\n  name: Write(Int64, UInt16)\n  nameWithType: UnmanagedMemoryAccessor.Write(Int64, UInt16)\n  fullName: UnmanagedMemoryAccessor.Write(Int64, UInt16)\n- uid: System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.Single)\n  parent: System.IO.UnmanagedMemoryAccessor\n  isExternal: false\n  name: Write(Int64, Single)\n  nameWithType: UnmanagedMemoryAccessor.Write(Int64, Single)\n  fullName: UnmanagedMemoryAccessor.Write(Int64, Single)\n- uid: System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.SByte)\n  parent: System.IO.UnmanagedMemoryAccessor\n  isExternal: false\n  name: Write(Int64, SByte)\n  nameWithType: UnmanagedMemoryAccessor.Write(Int64, SByte)\n  fullName: UnmanagedMemoryAccessor.Write(Int64, SByte)\n- uid: System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.Int64)\n  parent: System.IO.UnmanagedMemoryAccessor\n  isExternal: false\n  name: Write(Int64, Int64)\n  nameWithType: UnmanagedMemoryAccessor.Write(Int64, Int64)\n  fullName: UnmanagedMemoryAccessor.Write(Int64, Int64)\n- uid: System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.Double)\n  parent: System.IO.UnmanagedMemoryAccessor\n  isExternal: false\n  name: Write(Int64, Double)\n  nameWithType: UnmanagedMemoryAccessor.Write(Int64, Double)\n  fullName: UnmanagedMemoryAccessor.Write(Int64, Double)\n- uid: System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.Int16)\n  parent: System.IO.UnmanagedMemoryAccessor\n  isExternal: false\n  name: Write(Int64, Int16)\n  nameWithType: UnmanagedMemoryAccessor.Write(Int64, Int16)\n  fullName: UnmanagedMemoryAccessor.Write(Int64, Int16)\n- uid: System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.Decimal)\n  parent: System.IO.UnmanagedMemoryAccessor\n  isExternal: false\n  name: Write(Int64, Decimal)\n  nameWithType: UnmanagedMemoryAccessor.Write(Int64, Decimal)\n  fullName: UnmanagedMemoryAccessor.Write(Int64, Decimal)\n- uid: System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.Char)\n  parent: System.IO.UnmanagedMemoryAccessor\n  isExternal: false\n  name: Write(Int64, Char)\n  nameWithType: UnmanagedMemoryAccessor.Write(Int64, Char)\n  fullName: UnmanagedMemoryAccessor.Write(Int64, Char)\n- uid: System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.Byte)\n  parent: System.IO.UnmanagedMemoryAccessor\n  isExternal: false\n  name: Write(Int64, Byte)\n  nameWithType: UnmanagedMemoryAccessor.Write(Int64, Byte)\n  fullName: UnmanagedMemoryAccessor.Write(Int64, Byte)\n- uid: System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.Boolean)\n  parent: System.IO.UnmanagedMemoryAccessor\n  isExternal: false\n  name: Write(Int64, Boolean)\n  nameWithType: UnmanagedMemoryAccessor.Write(Int64, Boolean)\n  fullName: UnmanagedMemoryAccessor.Write(Int64, Boolean)\n- uid: System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.Int32)\n  parent: System.IO.UnmanagedMemoryAccessor\n  isExternal: false\n  name: Write(Int64, Int32)\n  nameWithType: UnmanagedMemoryAccessor.Write(Int64, Int32)\n  fullName: UnmanagedMemoryAccessor.Write(Int64, Int32)\n- uid: System.IO.UnmanagedMemoryAccessor.Write``1(System.Int64,``0@)\n  parent: System.IO.UnmanagedMemoryAccessor\n  isExternal: false\n  name: Write<T>(Int64, T)\n  nameWithType: UnmanagedMemoryAccessor.Write<T>(Int64, T)\n  fullName: UnmanagedMemoryAccessor.Write<T>(Int64, T)\n- uid: System.IO.UnmanagedMemoryAccessor.WriteArray``1(System.Int64,``0[],System.Int32,System.Int32)\n  parent: System.IO.UnmanagedMemoryAccessor\n  isExternal: false\n  name: WriteArray<T>(Int64, T[], Int32, Int32)\n  nameWithType: UnmanagedMemoryAccessor.WriteArray<T>(Int64, T[], Int32, Int32)\n  fullName: UnmanagedMemoryAccessor.WriteArray<T>(Int64, T[], Int32, Int32)\n"}