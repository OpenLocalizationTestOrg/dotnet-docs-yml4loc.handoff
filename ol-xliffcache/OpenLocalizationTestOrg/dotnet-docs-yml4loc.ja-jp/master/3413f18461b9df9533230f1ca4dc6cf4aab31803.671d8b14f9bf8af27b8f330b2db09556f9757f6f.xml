{"nodes":[{"content":"Controls the.NET remoting lifetime services.","nodes":[{"pos":[0,44],"content":"Controls the.NET remoting lifetime services.","nodes":[{"content":"Controls the.NET remoting lifetime services.","pos":[0,44]}]}],"pos":[773,818],"yaml":true},{"content":"Distributed garbage collection is responsible for controlling the lifetimes of server applications, and for deleting them when their lifetimes have expired. Traditionally, distributed garbage collection uses reference counts and pinging for control. This works well when there are a few clients per object, but does not work well when there are thousands of clients per each object. The lifetime service can assume the function of a traditional distributed garbage collector, and scales well when the number of clients increases.  \n  \n The lifetime service associates a lease with each remotely activated object. When the lease expires, the object is removed.  \n  \n> [!NOTE]\n>  This class makes a link demand. A SecurityException is thrown if the immediate caller does not have infrastructure permission. See [Link Demands](~/docs/framework/misc/link-demands.md) for more information.","nodes":[{"pos":[0,529],"content":"Distributed garbage collection is responsible for controlling the lifetimes of server applications, and for deleting them when their lifetimes have expired. Traditionally, distributed garbage collection uses reference counts and pinging for control. This works well when there are a few clients per object, but does not work well when there are thousands of clients per each object. The lifetime service can assume the function of a traditional distributed garbage collector, and scales well when the number of clients increases.","nodes":[{"content":"Distributed garbage collection is responsible for controlling the lifetimes of server applications, and for deleting them when their lifetimes have expired. Traditionally, distributed garbage collection uses reference counts and pinging for control. This works well when there are a few clients per object, but does not work well when there are thousands of clients per each object. The lifetime service can assume the function of a traditional distributed garbage collector, and scales well when the number of clients increases.","pos":[0,529],"nodes":[{"content":"Distributed garbage collection is responsible for controlling the lifetimes of server applications, and for deleting them when their lifetimes have expired.","pos":[0,156]},{"content":"Traditionally, distributed garbage collection uses reference counts and pinging for control.","pos":[157,249]},{"content":"This works well when there are a few clients per object, but does not work well when there are thousands of clients per each object.","pos":[250,382]},{"content":"The lifetime service can assume the function of a traditional distributed garbage collector, and scales well when the number of clients increases.","pos":[383,529]}]}]},{"pos":[536,659],"content":"The lifetime service associates a lease with each remotely activated object. When the lease expires, the object is removed.","nodes":[{"content":"The lifetime service associates a lease with each remotely activated object. When the lease expires, the object is removed.","pos":[0,123],"nodes":[{"content":"The lifetime service associates a lease with each remotely activated object.","pos":[0,76]},{"content":"When the lease expires, the object is removed.","pos":[77,123]}]}]},{"pos":[667,884],"content":"[!NOTE]\n This class makes a link demand. A SecurityException is thrown if the immediate caller does not have infrastructure permission. See [Link Demands](~/docs/framework/misc/link-demands.md) for more information.","leadings":["","> "],"nodes":[{"content":" This class makes a link demand. A SecurityException is thrown if the immediate caller does not have infrastructure permission. See [Link Demands](~/docs/framework/misc/link-demands.md) for more information.","pos":[8,215],"nodes":[{"content":"This class makes a link demand.","pos":[1,32]},{"content":"A SecurityException is thrown if the immediate caller does not have infrastructure permission.","pos":[33,127]},{"content":"See <bpt id=\"p1\">[</bpt>Link Demands<ept id=\"p1\">](~/docs/framework/misc/link-demands.md)</ept> for more information.","pos":[128,207],"source":" See [Link Demands](~/docs/framework/misc/link-demands.md) for more information."}]}]}],"pos":[829,1721],"yaml":true,"extradata":"MT"},{"content":"Creates an instance of <xref href=\"System.Runtime.Remoting.Lifetime.LifetimeServices\"></xref>.","nodes":[{"pos":[0,94],"content":"Creates an instance of <ph id=\"ph1\">&lt;xref href=\"System.Runtime.Remoting.Lifetime.LifetimeServices\"&gt;&lt;/xref&gt;</ph>.","source":"Creates an instance of <xref href=\"System.Runtime.Remoting.Lifetime.LifetimeServices\"></xref>."}],"pos":[3827,3922],"yaml":true},{"content":"Gets or sets the time interval between each activation of the lease manager to clean up expired leases.","nodes":[{"pos":[0,103],"content":"Gets or sets the time interval between each activation of the lease manager to clean up expired leases.","nodes":[{"content":"Gets or sets the time interval between each activation of the lease manager to clean up expired leases.","pos":[0,103]}]}],"pos":[5361,5465],"yaml":true},{"content":"The current property defines the frequency at which the lease manager becomes active to clean up expired leases. For example, if <xref:System.Runtime.Remoting.Lifetime.LifetimeServices.LeaseManagerPollTime%2A> is set to 100 seconds, the lease list is inspected for cleanups and renewals every 100 seconds.  \n  \n The default value of the <xref:System.Runtime.Remoting.Lifetime.LifetimeServices.LeaseManagerPollTime%2A> property is 10 seconds.","nodes":[{"pos":[0,305],"content":"The current property defines the frequency at which the lease manager becomes active to clean up expired leases. For example, if <xref:System.Runtime.Remoting.Lifetime.LifetimeServices.LeaseManagerPollTime%2A> is set to 100 seconds, the lease list is inspected for cleanups and renewals every 100 seconds.","nodes":[{"content":"The current property defines the frequency at which the lease manager becomes active to clean up expired leases. For example, if <xref:System.Runtime.Remoting.Lifetime.LifetimeServices.LeaseManagerPollTime%2A> is set to 100 seconds, the lease list is inspected for cleanups and renewals every 100 seconds.","pos":[0,305],"nodes":[{"content":"The current property defines the frequency at which the lease manager becomes active to clean up expired leases.","pos":[0,112]},{"content":"For example, if <ph id=\"ph1\">&lt;xref:System.Runtime.Remoting.Lifetime.LifetimeServices.LeaseManagerPollTime%2A&gt;</ph> is set to 100 seconds, the lease list is inspected for cleanups and renewals every 100 seconds.","pos":[113,305],"source":" For example, if <xref:System.Runtime.Remoting.Lifetime.LifetimeServices.LeaseManagerPollTime%2A> is set to 100 seconds, the lease list is inspected for cleanups and renewals every 100 seconds."}]}]},{"pos":[312,441],"content":"The default value of the <xref:System.Runtime.Remoting.Lifetime.LifetimeServices.LeaseManagerPollTime%2A> property is 10 seconds.","nodes":[{"content":"The default value of the <ph id=\"ph1\">&lt;xref:System.Runtime.Remoting.Lifetime.LifetimeServices.LeaseManagerPollTime%2A&gt;</ph> property is 10 seconds.","pos":[0,129],"source":"The default value of the <xref:System.Runtime.Remoting.Lifetime.LifetimeServices.LeaseManagerPollTime%2A> property is 10 seconds."}]}],"pos":[5476,5922],"yaml":true,"extradata":"MT"},{"content":"The default amount of time the lease manager sleeps after checking for expired leases.","nodes":[{"pos":[0,86],"content":"The default amount of time the lease manager sleeps after checking for expired leases.","nodes":[{"content":"The default amount of time the lease manager sleeps after checking for expired leases.","pos":[0,86]}]}],"pos":[6062,6149],"yaml":true},{"content":"At least one of the callers higher in the callstack does not have permission to configure remoting types and channels. This exception is thrown only when setting the property value.","nodes":[{"pos":[0,181],"content":"At least one of the callers higher in the callstack does not have permission to configure remoting types and channels. This exception is thrown only when setting the property value.","nodes":[{"content":"At least one of the callers higher in the callstack does not have permission to configure remoting types and channels. This exception is thrown only when setting the property value.","pos":[0,181],"nodes":[{"content":"At least one of the callers higher in the callstack does not have permission to configure remoting types and channels.","pos":[0,118]},{"content":"This exception is thrown only when setting the property value.","pos":[119,181]}]}]}],"pos":[6359,6541],"yaml":true},{"content":"Gets or sets the initial lease time span for an <xref href=\"System.AppDomain\"></xref>.","nodes":[{"pos":[0,86],"content":"Gets or sets the initial lease time span for an <ph id=\"ph1\">&lt;xref href=\"System.AppDomain\"&gt;&lt;/xref&gt;</ph>.","source":"Gets or sets the initial lease time span for an <xref href=\"System.AppDomain\"></xref>."}],"pos":[7612,7699],"yaml":true},{"content":"The default lease time span is 5 minutes.","nodes":[{"pos":[0,41],"content":"The default lease time span is 5 minutes.","nodes":[{"content":"The default lease time span is 5 minutes.","pos":[0,41]}]}],"pos":[7710,7752],"yaml":true,"extradata":"MT"},{"content":"The initial lease <xref href=\"System.TimeSpan\"></xref> for objects that can have leases in the <xref href=\"System.AppDomain\"></xref>.","nodes":[{"pos":[0,133],"content":"The initial lease <ph id=\"ph1\">&lt;xref href=\"System.TimeSpan\"&gt;&lt;/xref&gt;</ph> for objects that can have leases in the <ph id=\"ph2\">&lt;xref href=\"System.AppDomain\"&gt;&lt;/xref&gt;</ph>.","source":"The initial lease <xref href=\"System.TimeSpan\"></xref> for objects that can have leases in the <xref href=\"System.AppDomain\"></xref>."}],"pos":[7881,8015],"yaml":true},{"content":"At least one of the callers higher in the callstack does not have permission to configure remoting types and channels. This exception is thrown only when setting the property value.","nodes":[{"pos":[0,181],"content":"At least one of the callers higher in the callstack does not have permission to configure remoting types and channels. This exception is thrown only when setting the property value.","nodes":[{"content":"At least one of the callers higher in the callstack does not have permission to configure remoting types and channels. This exception is thrown only when setting the property value.","pos":[0,181],"nodes":[{"content":"At least one of the callers higher in the callstack does not have permission to configure remoting types and channels.","pos":[0,118]},{"content":"This exception is thrown only when setting the property value.","pos":[119,181]}]}]}],"pos":[8214,8396],"yaml":true},{"content":"Gets or sets the amount of time by which the lease is extended every time a call comes in on the server object.","nodes":[{"pos":[0,111],"content":"Gets or sets the amount of time by which the lease is extended every time a call comes in on the server object.","nodes":[{"content":"Gets or sets the amount of time by which the lease is extended every time a call comes in on the server object.","pos":[0,111]}]}],"pos":[9503,9615],"yaml":true},{"content":"The default renewal time by which a lifetime lease is extended is 2 minutes.","nodes":[{"pos":[0,76],"content":"The default renewal time by which a lifetime lease is extended is 2 minutes.","nodes":[{"content":"The default renewal time by which a lifetime lease is extended is 2 minutes.","pos":[0,76]}]}],"pos":[9626,9703],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.TimeSpan\"></xref> by which a lifetime lease in the current <xref href=\"System.AppDomain\"></xref> is extended after each call.","nodes":[{"pos":[0,148],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.TimeSpan\"&gt;&lt;/xref&gt;</ph> by which a lifetime lease in the current <ph id=\"ph2\">&lt;xref href=\"System.AppDomain\"&gt;&lt;/xref&gt;</ph> is extended after each call.","source":"The <xref href=\"System.TimeSpan\"></xref> by which a lifetime lease in the current <xref href=\"System.AppDomain\"></xref> is extended after each call."}],"pos":[10215,10364],"yaml":true},{"content":"At least one of the callers higher in the callstack does not have permission to configure remoting types and channels. This exception is thrown only when setting the property value.","nodes":[{"pos":[0,181],"content":"At least one of the callers higher in the callstack does not have permission to configure remoting types and channels. This exception is thrown only when setting the property value.","nodes":[{"content":"At least one of the callers higher in the callstack does not have permission to configure remoting types and channels. This exception is thrown only when setting the property value.","pos":[0,181],"nodes":[{"content":"At least one of the callers higher in the callstack does not have permission to configure remoting types and channels.","pos":[0,118]},{"content":"This exception is thrown only when setting the property value.","pos":[119,181]}]}]}],"pos":[10569,10751],"yaml":true},{"content":"Gets or sets the amount of time the lease manager waits for a sponsor to return with a lease renewal time.","nodes":[{"pos":[0,106],"content":"Gets or sets the amount of time the lease manager waits for a sponsor to return with a lease renewal time.","nodes":[{"content":"Gets or sets the amount of time the lease manager waits for a sponsor to return with a lease renewal time.","pos":[0,106]}]}],"pos":[11876,11983],"yaml":true},{"content":"The default time until a call to a sponsor is timed out is 2 minutes.","nodes":[{"pos":[0,69],"content":"The default time until a call to a sponsor is timed out is 2 minutes.","nodes":[{"content":"The default time until a call to a sponsor is timed out is 2 minutes.","pos":[0,69]}]}],"pos":[11994,12064],"yaml":true,"extradata":"MT"},{"content":"The initial sponsorship time-out.","nodes":[{"pos":[0,33],"content":"The initial sponsorship time-out.","nodes":[{"content":"The initial sponsorship time-out.","pos":[0,33]}]}],"pos":[12579,12613],"yaml":true},{"content":"At least one of the callers higher in the callstack does not have permission to configure remoting types and channels. This exception is thrown only when setting the property value.","nodes":[{"pos":[0,181],"content":"At least one of the callers higher in the callstack does not have permission to configure remoting types and channels. This exception is thrown only when setting the property value.","nodes":[{"content":"At least one of the callers higher in the callstack does not have permission to configure remoting types and channels. This exception is thrown only when setting the property value.","pos":[0,181],"nodes":[{"content":"At least one of the callers higher in the callstack does not have permission to configure remoting types and channels.","pos":[0,118]},{"content":"This exception is thrown only when setting the property value.","pos":[119,181]}]}]}],"pos":[12821,13003],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Runtime.Remoting.Lifetime.LifetimeServices\n  commentId: T:System.Runtime.Remoting.Lifetime.LifetimeServices\n  id: LifetimeServices\n  children:\n  - System.Runtime.Remoting.Lifetime.LifetimeServices.#ctor\n  - System.Runtime.Remoting.Lifetime.LifetimeServices.LeaseManagerPollTime\n  - System.Runtime.Remoting.Lifetime.LifetimeServices.LeaseTime\n  - System.Runtime.Remoting.Lifetime.LifetimeServices.RenewOnCallTime\n  - System.Runtime.Remoting.Lifetime.LifetimeServices.SponsorshipTimeout\n  langs:\n  - csharp\n  name: LifetimeServices\n  nameWithType: LifetimeServices\n  fullName: System.Runtime.Remoting.Lifetime.LifetimeServices\n  type: Class\n  assemblies:\n  - mscorlib\n  namespace: System.Runtime.Remoting.Lifetime\n  summary: Controls the.NET remoting lifetime services.\n  remarks: \"Distributed garbage collection is responsible for controlling the lifetimes of server applications, and for deleting them when their lifetimes have expired. Traditionally, distributed garbage collection uses reference counts and pinging for control. This works well when there are a few clients per object, but does not work well when there are thousands of clients per each object. The lifetime service can assume the function of a traditional distributed garbage collector, and scales well when the number of clients increases.  \\n  \\n The lifetime service associates a lease with each remotely activated object. When the lease expires, the object is removed.  \\n  \\n> [!NOTE]\\n>  This class makes a link demand. A SecurityException is thrown if the immediate caller does not have infrastructure permission. See [Link Demands](~/docs/framework/misc/link-demands.md) for more information.\"\n  example:\n  - >-\n    [!code-cpp[System.Runtime.Remoting.Lifetime#2](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Runtime.Remoting.Lifetime/CPP/server.cpp#2)]\n     [!code-csharp[System.Runtime.Remoting.Lifetime#2](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Runtime.Remoting.Lifetime/CS/server.cs#2)]\n     [!code-vb[System.Runtime.Remoting.Lifetime#2](~/samples/snippets/visualbasic/VS_Snippets_Remoting/System.Runtime.Remoting.Lifetime/VB/server.vb#2)]\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(true)]\n\n      public sealed class LifetimeServices\n  inheritance:\n  - System.Object\n  implements: []\n  inheritedMembers:\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.ToString\n  attributes:\n  - type: System.Runtime.InteropServices.ComVisibleAttribute\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.Remoting.Lifetime/LifetimeServices.xml\n  ms.technology:\n  - dotnet-standard\n  manager: ghogen\n- uid: System.Runtime.Remoting.Lifetime.LifetimeServices.#ctor\n  commentId: M:System.Runtime.Remoting.Lifetime.LifetimeServices.#ctor\n  id: '#ctor'\n  parent: System.Runtime.Remoting.Lifetime.LifetimeServices\n  langs:\n  - csharp\n  name: LifetimeServices()\n  nameWithType: LifetimeServices.LifetimeServices()\n  fullName: LifetimeServices.LifetimeServices()\n  type: Constructor\n  assemblies:\n  - mscorlib\n  namespace: System.Runtime.Remoting.Lifetime\n  summary: Creates an instance of <xref href=\"System.Runtime.Remoting.Lifetime.LifetimeServices\"></xref>.\n  syntax:\n    content: >-\n      [System.Obsolete(\"Call the static methods directly on this type instead\", true)]\n\n      public LifetimeServices ();\n    parameters: []\n  overload: System.Runtime.Remoting.Lifetime.LifetimeServices.#ctor*\n  exceptions: []\n  attributes:\n  - type: System.ObsoleteAttribute\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.Remoting.Lifetime/LifetimeServices.xml\n  ms.technology:\n  - dotnet-standard\n  manager: ghogen\n- uid: System.Runtime.Remoting.Lifetime.LifetimeServices.LeaseManagerPollTime\n  commentId: P:System.Runtime.Remoting.Lifetime.LifetimeServices.LeaseManagerPollTime\n  id: LeaseManagerPollTime\n  parent: System.Runtime.Remoting.Lifetime.LifetimeServices\n  langs:\n  - csharp\n  name: LeaseManagerPollTime\n  nameWithType: LifetimeServices.LeaseManagerPollTime\n  fullName: LifetimeServices.LeaseManagerPollTime\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Runtime.Remoting.Lifetime\n  summary: Gets or sets the time interval between each activation of the lease manager to clean up expired leases.\n  remarks: \"The current property defines the frequency at which the lease manager becomes active to clean up expired leases. For example, if <xref:System.Runtime.Remoting.Lifetime.LifetimeServices.LeaseManagerPollTime%2A> is set to 100 seconds, the lease list is inspected for cleanups and renewals every 100 seconds.  \\n  \\n The default value of the <xref:System.Runtime.Remoting.Lifetime.LifetimeServices.LeaseManagerPollTime%2A> property is 10 seconds.\"\n  syntax:\n    content: public static TimeSpan LeaseManagerPollTime { get; set; }\n    return:\n      type: System.TimeSpan\n      description: The default amount of time the lease manager sleeps after checking for expired leases.\n  overload: System.Runtime.Remoting.Lifetime.LifetimeServices.LeaseManagerPollTime*\n  exceptions:\n  - type: System.Security.SecurityException\n    commentId: T:System.Security.SecurityException\n    description: At least one of the callers higher in the callstack does not have permission to configure remoting types and channels. This exception is thrown only when setting the property value.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.Remoting.Lifetime/LifetimeServices.xml\n  ms.technology:\n  - dotnet-standard\n  manager: ghogen\n- uid: System.Runtime.Remoting.Lifetime.LifetimeServices.LeaseTime\n  commentId: P:System.Runtime.Remoting.Lifetime.LifetimeServices.LeaseTime\n  id: LeaseTime\n  parent: System.Runtime.Remoting.Lifetime.LifetimeServices\n  langs:\n  - csharp\n  name: LeaseTime\n  nameWithType: LifetimeServices.LeaseTime\n  fullName: LifetimeServices.LeaseTime\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Runtime.Remoting.Lifetime\n  summary: Gets or sets the initial lease time span for an <xref href=\"System.AppDomain\"></xref>.\n  remarks: The default lease time span is 5 minutes.\n  syntax:\n    content: public static TimeSpan LeaseTime { get; set; }\n    return:\n      type: System.TimeSpan\n      description: The initial lease <xref href=\"System.TimeSpan\"></xref> for objects that can have leases in the <xref href=\"System.AppDomain\"></xref>.\n  overload: System.Runtime.Remoting.Lifetime.LifetimeServices.LeaseTime*\n  exceptions:\n  - type: System.Security.SecurityException\n    commentId: T:System.Security.SecurityException\n    description: At least one of the callers higher in the callstack does not have permission to configure remoting types and channels. This exception is thrown only when setting the property value.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.Remoting.Lifetime/LifetimeServices.xml\n  ms.technology:\n  - dotnet-standard\n  manager: ghogen\n- uid: System.Runtime.Remoting.Lifetime.LifetimeServices.RenewOnCallTime\n  commentId: P:System.Runtime.Remoting.Lifetime.LifetimeServices.RenewOnCallTime\n  id: RenewOnCallTime\n  parent: System.Runtime.Remoting.Lifetime.LifetimeServices\n  langs:\n  - csharp\n  name: RenewOnCallTime\n  nameWithType: LifetimeServices.RenewOnCallTime\n  fullName: LifetimeServices.RenewOnCallTime\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Runtime.Remoting.Lifetime\n  summary: Gets or sets the amount of time by which the lease is extended every time a call comes in on the server object.\n  remarks: The default renewal time by which a lifetime lease is extended is 2 minutes.\n  example:\n  - >-\n    [!code-cpp[ILease_ILease#3](~/samples/snippets/cpp/VS_Snippets_Remoting/ILease_ILease/CPP/ilease_client.cpp#3)]\n     [!code-csharp[ILease_ILease#3](~/samples/snippets/csharp/VS_Snippets_Remoting/ILease_ILease/CS/ilease_client.cs#3)]\n     [!code-vb[ILease_ILease#3](~/samples/snippets/visualbasic/VS_Snippets_Remoting/ILease_ILease/VB/ilease_client.vb#3)]\n  syntax:\n    content: public static TimeSpan RenewOnCallTime { get; set; }\n    return:\n      type: System.TimeSpan\n      description: The <xref href=\"System.TimeSpan\"></xref> by which a lifetime lease in the current <xref href=\"System.AppDomain\"></xref> is extended after each call.\n  overload: System.Runtime.Remoting.Lifetime.LifetimeServices.RenewOnCallTime*\n  exceptions:\n  - type: System.Security.SecurityException\n    commentId: T:System.Security.SecurityException\n    description: At least one of the callers higher in the callstack does not have permission to configure remoting types and channels. This exception is thrown only when setting the property value.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.Remoting.Lifetime/LifetimeServices.xml\n  ms.technology:\n  - dotnet-standard\n  manager: ghogen\n- uid: System.Runtime.Remoting.Lifetime.LifetimeServices.SponsorshipTimeout\n  commentId: P:System.Runtime.Remoting.Lifetime.LifetimeServices.SponsorshipTimeout\n  id: SponsorshipTimeout\n  parent: System.Runtime.Remoting.Lifetime.LifetimeServices\n  langs:\n  - csharp\n  name: SponsorshipTimeout\n  nameWithType: LifetimeServices.SponsorshipTimeout\n  fullName: LifetimeServices.SponsorshipTimeout\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Runtime.Remoting.Lifetime\n  summary: Gets or sets the amount of time the lease manager waits for a sponsor to return with a lease renewal time.\n  remarks: The default time until a call to a sponsor is timed out is 2 minutes.\n  example:\n  - >-\n    [!code-cpp[ILease_ILease#3](~/samples/snippets/cpp/VS_Snippets_Remoting/ILease_ILease/CPP/ilease_client.cpp#3)]\n     [!code-csharp[ILease_ILease#3](~/samples/snippets/csharp/VS_Snippets_Remoting/ILease_ILease/CS/ilease_client.cs#3)]\n     [!code-vb[ILease_ILease#3](~/samples/snippets/visualbasic/VS_Snippets_Remoting/ILease_ILease/VB/ilease_client.vb#3)]\n  syntax:\n    content: public static TimeSpan SponsorshipTimeout { get; set; }\n    return:\n      type: System.TimeSpan\n      description: The initial sponsorship time-out.\n  overload: System.Runtime.Remoting.Lifetime.LifetimeServices.SponsorshipTimeout*\n  exceptions:\n  - type: System.Security.SecurityException\n    commentId: T:System.Security.SecurityException\n    description: At least one of the callers higher in the callstack does not have permission to configure remoting types and channels. This exception is thrown only when setting the property value.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.Remoting.Lifetime/LifetimeServices.xml\n  ms.technology:\n  - dotnet-standard\n  manager: ghogen\nreferences:\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.Security.SecurityException\n  parent: System.Security\n  isExternal: false\n  name: SecurityException\n  nameWithType: SecurityException\n  fullName: System.Security.SecurityException\n- uid: System.Runtime.Remoting.Lifetime.LifetimeServices.#ctor\n  parent: System.Runtime.Remoting.Lifetime.LifetimeServices\n  isExternal: false\n  name: LifetimeServices()\n  nameWithType: LifetimeServices.LifetimeServices()\n  fullName: LifetimeServices.LifetimeServices()\n- uid: System.Runtime.Remoting.Lifetime.LifetimeServices.LeaseManagerPollTime\n  parent: System.Runtime.Remoting.Lifetime.LifetimeServices\n  isExternal: false\n  name: LeaseManagerPollTime\n  nameWithType: LifetimeServices.LeaseManagerPollTime\n  fullName: LifetimeServices.LeaseManagerPollTime\n- uid: System.TimeSpan\n  parent: System\n  isExternal: false\n  name: TimeSpan\n  nameWithType: TimeSpan\n  fullName: System.TimeSpan\n- uid: System.Runtime.Remoting.Lifetime.LifetimeServices.LeaseTime\n  parent: System.Runtime.Remoting.Lifetime.LifetimeServices\n  isExternal: false\n  name: LeaseTime\n  nameWithType: LifetimeServices.LeaseTime\n  fullName: LifetimeServices.LeaseTime\n- uid: System.Runtime.Remoting.Lifetime.LifetimeServices.RenewOnCallTime\n  parent: System.Runtime.Remoting.Lifetime.LifetimeServices\n  isExternal: false\n  name: RenewOnCallTime\n  nameWithType: LifetimeServices.RenewOnCallTime\n  fullName: LifetimeServices.RenewOnCallTime\n- uid: System.Runtime.Remoting.Lifetime.LifetimeServices.SponsorshipTimeout\n  parent: System.Runtime.Remoting.Lifetime.LifetimeServices\n  isExternal: false\n  name: SponsorshipTimeout\n  nameWithType: LifetimeServices.SponsorshipTimeout\n  fullName: LifetimeServices.SponsorshipTimeout\n- uid: System.Runtime.Remoting.Lifetime.LifetimeServices.#ctor*\n  parent: System.Runtime.Remoting.Lifetime.LifetimeServices\n  isExternal: false\n  name: LifetimeServices\n  nameWithType: LifetimeServices.LifetimeServices\n  fullName: LifetimeServices.LifetimeServices\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.Remoting.Lifetime/LifetimeServices.xml\n- uid: System.Runtime.Remoting.Lifetime.LifetimeServices.LeaseManagerPollTime*\n  parent: System.Runtime.Remoting.Lifetime.LifetimeServices\n  isExternal: false\n  name: LeaseManagerPollTime\n  nameWithType: LifetimeServices.LeaseManagerPollTime\n  fullName: LifetimeServices.LeaseManagerPollTime\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.Remoting.Lifetime/LifetimeServices.xml\n- uid: System.Runtime.Remoting.Lifetime.LifetimeServices.LeaseTime*\n  parent: System.Runtime.Remoting.Lifetime.LifetimeServices\n  isExternal: false\n  name: LeaseTime\n  nameWithType: LifetimeServices.LeaseTime\n  fullName: LifetimeServices.LeaseTime\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.Remoting.Lifetime/LifetimeServices.xml\n- uid: System.Runtime.Remoting.Lifetime.LifetimeServices.RenewOnCallTime*\n  parent: System.Runtime.Remoting.Lifetime.LifetimeServices\n  isExternal: false\n  name: RenewOnCallTime\n  nameWithType: LifetimeServices.RenewOnCallTime\n  fullName: LifetimeServices.RenewOnCallTime\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.Remoting.Lifetime/LifetimeServices.xml\n- uid: System.Runtime.Remoting.Lifetime.LifetimeServices.SponsorshipTimeout*\n  parent: System.Runtime.Remoting.Lifetime.LifetimeServices\n  isExternal: false\n  name: SponsorshipTimeout\n  nameWithType: LifetimeServices.SponsorshipTimeout\n  fullName: LifetimeServices.SponsorshipTimeout\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.Remoting.Lifetime/LifetimeServices.xml\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: Object.Equals(Object)\n  fullName: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: Object.GetHashCode()\n  fullName: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: false\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: false\n  name: ToString()\n  nameWithType: Object.ToString()\n  fullName: Object.ToString()\n"}