{"nodes":[{"content":"Provides a built-in collection list for storing listeners for a <xref href=\"System.Windows.WeakEventManager\"></xref>.","nodes":[{"pos":[0,117],"content":"Provides a built-in collection list for storing listeners for a <ph id=\"ph1\">&lt;xref href=\"System.Windows.WeakEventManager\"&gt;&lt;/xref&gt;</ph>.","source":"Provides a built-in collection list for storing listeners for a <xref href=\"System.Windows.WeakEventManager\"></xref>."}],"pos":[1681,1799],"yaml":true},{"content":"Although this list contains members that resemble those defined by <xref:System.Collections.IList> and <xref:System.Collections.ICollection>, and provide similar functionality, this class implements neither of those interfaces.  \n  \n Most <xref:System.Windows.WeakEventManager> derived classes do not need to use any members on <xref:System.Windows.WeakEventManager.ListenerList>. The <xref:System.Windows.WeakEventManager> methods <xref:System.Windows.WeakEventManager.ProtectedAddListener%2A> and <xref:System.Windows.WeakEventManager.ProtectedRemoveListener%2A>use a default <xref:System.Windows.WeakEventManager.ListenerList> internally, one list for each `source`.  \n  \n You only need to call <xref:System.Windows.WeakEventManager.ListenerList> methods if your <xref:System.Windows.WeakEventManager> class maintains multiple lists for the same event-source combination, with each list created to account for different conditions of the event. In this case, you would not use <xref:System.Windows.WeakEventManager.ProtectedAddListener%2A> and <xref:System.Windows.WeakEventManager.ProtectedRemoveListener%2A> and would instead implement `AddListener` or `RemoveListener` to act upon listeners in just one of the internal listener lists, typically based on a parameter that you add to `AddListener` or `RemoveListener`. Also, the handler implementation that receives the raw event cannot simply call <xref:System.Windows.WeakEventManager.DeliverEvent%2A>; you must instead keep track of the specifics of the event and deliver the event only to the appropriate list using <xref:System.Windows.WeakEventManager.DeliverEventToList%2A>.  \n  \n The various methods of <xref:System.Windows.WeakEventManager.ListenerList> are provided so that you can work with your internal lists and so that you can prevent modification of the list during actual delivery of the event.  \n  \n An example class that used this implementation technique is <xref:System.ComponentModel.PropertyChangedEventManager>, which maintains separate listener lists for `PropertyChanged` based on which property changed.  \n  \n<a name=\"xamlTextUsage_ListenerList\"></a>   \n## XAML Text Usage  \n You cannot use this class in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)].","nodes":[{"pos":[0,227],"content":"Although this list contains members that resemble those defined by <xref:System.Collections.IList> and <xref:System.Collections.ICollection>, and provide similar functionality, this class implements neither of those interfaces.","nodes":[{"content":"Although this list contains members that resemble those defined by <ph id=\"ph1\">&lt;xref:System.Collections.IList&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Collections.ICollection&gt;</ph>, and provide similar functionality, this class implements neither of those interfaces.","pos":[0,227],"source":"Although this list contains members that resemble those defined by <xref:System.Collections.IList> and <xref:System.Collections.ICollection>, and provide similar functionality, this class implements neither of those interfaces."}]},{"pos":[234,669],"content":"Most <xref:System.Windows.WeakEventManager> derived classes do not need to use any members on <xref:System.Windows.WeakEventManager.ListenerList>. The <xref:System.Windows.WeakEventManager> methods <xref:System.Windows.WeakEventManager.ProtectedAddListener%2A> and <xref:System.Windows.WeakEventManager.ProtectedRemoveListener%2A>use a default <xref:System.Windows.WeakEventManager.ListenerList> internally, one list for each `source`.","nodes":[{"content":"Most <ph id=\"ph1\">&lt;xref:System.Windows.WeakEventManager&gt;</ph> derived classes do not need to use any members on <ph id=\"ph2\">&lt;xref:System.Windows.WeakEventManager.ListenerList&gt;</ph>.","pos":[0,146],"source":"Most <xref:System.Windows.WeakEventManager> derived classes do not need to use any members on <xref:System.Windows.WeakEventManager.ListenerList>."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Windows.WeakEventManager&gt;</ph> methods <ph id=\"ph2\">&lt;xref:System.Windows.WeakEventManager.ProtectedAddListener%2A&gt;</ph> and <ph id=\"ph3\">&lt;xref:System.Windows.WeakEventManager.ProtectedRemoveListener%2A&gt;</ph>use a default <ph id=\"ph4\">&lt;xref:System.Windows.WeakEventManager.ListenerList&gt;</ph> internally, one list for each <ph id=\"ph5\">`source`</ph>.","pos":[147,435],"source":" The <xref:System.Windows.WeakEventManager> methods <xref:System.Windows.WeakEventManager.ProtectedAddListener%2A> and <xref:System.Windows.WeakEventManager.ProtectedRemoveListener%2A>use a default <xref:System.Windows.WeakEventManager.ListenerList> internally, one list for each `source`."}]},{"pos":[676,1635],"content":"You only need to call <xref:System.Windows.WeakEventManager.ListenerList> methods if your <xref:System.Windows.WeakEventManager> class maintains multiple lists for the same event-source combination, with each list created to account for different conditions of the event. In this case, you would not use <xref:System.Windows.WeakEventManager.ProtectedAddListener%2A> and <xref:System.Windows.WeakEventManager.ProtectedRemoveListener%2A> and would instead implement `AddListener` or `RemoveListener` to act upon listeners in just one of the internal listener lists, typically based on a parameter that you add to `AddListener` or `RemoveListener`. Also, the handler implementation that receives the raw event cannot simply call <xref:System.Windows.WeakEventManager.DeliverEvent%2A>; you must instead keep track of the specifics of the event and deliver the event only to the appropriate list using <xref:System.Windows.WeakEventManager.DeliverEventToList%2A>.","nodes":[{"content":"You only need to call <ph id=\"ph1\">&lt;xref:System.Windows.WeakEventManager.ListenerList&gt;</ph> methods if your <ph id=\"ph2\">&lt;xref:System.Windows.WeakEventManager&gt;</ph> class maintains multiple lists for the same event-source combination, with each list created to account for different conditions of the event.","pos":[0,271],"source":"You only need to call <xref:System.Windows.WeakEventManager.ListenerList> methods if your <xref:System.Windows.WeakEventManager> class maintains multiple lists for the same event-source combination, with each list created to account for different conditions of the event."},{"content":"In this case, you would not use <ph id=\"ph1\">&lt;xref:System.Windows.WeakEventManager.ProtectedAddListener%2A&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Windows.WeakEventManager.ProtectedRemoveListener%2A&gt;</ph> and would instead implement <ph id=\"ph3\">`AddListener`</ph> or <ph id=\"ph4\">`RemoveListener`</ph> to act upon listeners in just one of the internal listener lists, typically based on a parameter that you add to <ph id=\"ph5\">`AddListener`</ph> or <ph id=\"ph6\">`RemoveListener`</ph>.","pos":[272,646],"source":" In this case, you would not use <xref:System.Windows.WeakEventManager.ProtectedAddListener%2A> and <xref:System.Windows.WeakEventManager.ProtectedRemoveListener%2A> and would instead implement `AddListener` or `RemoveListener` to act upon listeners in just one of the internal listener lists, typically based on a parameter that you add to `AddListener` or `RemoveListener`."},{"content":"Also, the handler implementation that receives the raw event cannot simply call <ph id=\"ph1\">&lt;xref:System.Windows.WeakEventManager.DeliverEvent%2A&gt;</ph>; you must instead keep track of the specifics of the event and deliver the event only to the appropriate list using <ph id=\"ph2\">&lt;xref:System.Windows.WeakEventManager.DeliverEventToList%2A&gt;</ph>.","pos":[647,959],"source":" Also, the handler implementation that receives the raw event cannot simply call <xref:System.Windows.WeakEventManager.DeliverEvent%2A>; you must instead keep track of the specifics of the event and deliver the event only to the appropriate list using <xref:System.Windows.WeakEventManager.DeliverEventToList%2A>."}]},{"pos":[1642,1865],"content":"The various methods of <xref:System.Windows.WeakEventManager.ListenerList> are provided so that you can work with your internal lists and so that you can prevent modification of the list during actual delivery of the event.","nodes":[{"content":"The various methods of <ph id=\"ph1\">&lt;xref:System.Windows.WeakEventManager.ListenerList&gt;</ph> are provided so that you can work with your internal lists and so that you can prevent modification of the list during actual delivery of the event.","pos":[0,223],"source":"The various methods of <xref:System.Windows.WeakEventManager.ListenerList> are provided so that you can work with your internal lists and so that you can prevent modification of the list during actual delivery of the event."}]},{"pos":[1872,2084],"content":"An example class that used this implementation technique is <ph id=\"ph1\">&lt;xref:System.ComponentModel.PropertyChangedEventManager&gt;</ph>, which maintains separate listener lists for <ph id=\"ph2\">`PropertyChanged`</ph> based on which property changed.","source":"An example class that used this implementation technique is <xref:System.ComponentModel.PropertyChangedEventManager>, which maintains separate listener lists for `PropertyChanged` based on which property changed."},{"pos":[2138,2153],"content":"XAML Text Usage","linkify":"XAML Text Usage","nodes":[{"content":"XAML Text Usage","pos":[0,15]}]},{"pos":[2157,2248],"content":"You cannot use this class in <ph id=\"ph1\">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph>.","source":"You cannot use this class in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]."}],"pos":[1810,4075],"yaml":true,"extradata":"MT"},{"content":"Initializes a new instance of the <xref href=\"System.Windows.WeakEventManager.ListenerList\"></xref> class.","nodes":[{"pos":[0,106],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Windows.WeakEventManager.ListenerList\"&gt;&lt;/xref&gt;</ph> class.","source":"Initializes a new instance of the <xref href=\"System.Windows.WeakEventManager.ListenerList\"></xref> class."}],"pos":[5521,5628],"yaml":true},{"content":"Initializes a new instance of the <xref href=\"System.Windows.WeakEventManager.ListenerList\"></xref> class with the specified initial capacity.","nodes":[{"pos":[0,142],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Windows.WeakEventManager.ListenerList\"&gt;&lt;/xref&gt;</ph> class with the specified initial capacity.","source":"Initializes a new instance of the <xref href=\"System.Windows.WeakEventManager.ListenerList\"></xref> class with the specified initial capacity."}],"pos":[6865,7008],"yaml":true},{"content":"The number of items that should be allocated in the initial list.","nodes":[{"pos":[0,65],"content":"The number of items that should be allocated in the initial list.","nodes":[{"content":"The number of items that should be allocated in the initial list.","pos":[0,65]}]}],"pos":[7146,7212],"yaml":true},{"content":"Adds a <xref href=\"System.Windows.IWeakEventListener\"></xref> object to the <xref href=\"System.Windows.WeakEventManager.ListenerList\"></xref>.","nodes":[{"pos":[0,142],"content":"Adds a <ph id=\"ph1\">&lt;xref href=\"System.Windows.IWeakEventListener\"&gt;&lt;/xref&gt;</ph> object to the <ph id=\"ph2\">&lt;xref href=\"System.Windows.WeakEventManager.ListenerList\"&gt;&lt;/xref&gt;</ph>.","source":"Adds a <xref href=\"System.Windows.IWeakEventListener\"></xref> object to the <xref href=\"System.Windows.WeakEventManager.ListenerList\"></xref>."}],"pos":[8394,8537],"yaml":true},{"content":"The object provided as listener should be a <xref:System.Windows.DependencyObject> that implements the <xref:System.Windows.IWeakEventListener> interface and therefore has a working <xref:System.Windows.IWeakEventListener.ReceiveWeakEvent%2A> implementation.  \n  \n You should always call <xref:System.Windows.WeakEventManager.ListenerList.PrepareForWriting%2A> before changing the list contents. Otherwise, the list may be in process of delivering events and therefore the original is locked. Calling <xref:System.Windows.WeakEventManager.ListenerList.PrepareForWriting%2A> changes the input `list` to be a clone so that your <xref:System.Windows.WeakEventManager.ListenerList.Add%2A> call can still work on the clone. If <xref:System.Windows.WeakEventManager.ListenerList.PrepareForWriting%2A> returns `true`, you might need to update any private references to the list that you maintain in other areas of your code.","nodes":[{"pos":[0,258],"content":"The object provided as listener should be a <xref:System.Windows.DependencyObject> that implements the <xref:System.Windows.IWeakEventListener> interface and therefore has a working <xref:System.Windows.IWeakEventListener.ReceiveWeakEvent%2A> implementation.","nodes":[{"content":"The object provided as listener should be a <ph id=\"ph1\">&lt;xref:System.Windows.DependencyObject&gt;</ph> that implements the <ph id=\"ph2\">&lt;xref:System.Windows.IWeakEventListener&gt;</ph> interface and therefore has a working <ph id=\"ph3\">&lt;xref:System.Windows.IWeakEventListener.ReceiveWeakEvent%2A&gt;</ph> implementation.","pos":[0,258],"source":"The object provided as listener should be a <xref:System.Windows.DependencyObject> that implements the <xref:System.Windows.IWeakEventListener> interface and therefore has a working <xref:System.Windows.IWeakEventListener.ReceiveWeakEvent%2A> implementation."}]},{"pos":[265,917],"content":"You should always call <xref:System.Windows.WeakEventManager.ListenerList.PrepareForWriting%2A> before changing the list contents. Otherwise, the list may be in process of delivering events and therefore the original is locked. Calling <xref:System.Windows.WeakEventManager.ListenerList.PrepareForWriting%2A> changes the input `list` to be a clone so that your <xref:System.Windows.WeakEventManager.ListenerList.Add%2A> call can still work on the clone. If <xref:System.Windows.WeakEventManager.ListenerList.PrepareForWriting%2A> returns `true`, you might need to update any private references to the list that you maintain in other areas of your code.","nodes":[{"content":"You should always call <ph id=\"ph1\">&lt;xref:System.Windows.WeakEventManager.ListenerList.PrepareForWriting%2A&gt;</ph> before changing the list contents.","pos":[0,130],"source":"You should always call <xref:System.Windows.WeakEventManager.ListenerList.PrepareForWriting%2A> before changing the list contents."},{"content":"Otherwise, the list may be in process of delivering events and therefore the original is locked.","pos":[131,227]},{"content":"Calling <ph id=\"ph1\">&lt;xref:System.Windows.WeakEventManager.ListenerList.PrepareForWriting%2A&gt;</ph> changes the input <ph id=\"ph2\">`list`</ph> to be a clone so that your <ph id=\"ph3\">&lt;xref:System.Windows.WeakEventManager.ListenerList.Add%2A&gt;</ph> call can still work on the clone.","pos":[228,453],"source":" Calling <xref:System.Windows.WeakEventManager.ListenerList.PrepareForWriting%2A> changes the input `list` to be a clone so that your <xref:System.Windows.WeakEventManager.ListenerList.Add%2A> call can still work on the clone."},{"content":"If <ph id=\"ph1\">&lt;xref:System.Windows.WeakEventManager.ListenerList.PrepareForWriting%2A&gt;</ph> returns <ph id=\"ph2\">`true`</ph>, you might need to update any private references to the list that you maintain in other areas of your code.","pos":[454,652],"source":" If <xref:System.Windows.WeakEventManager.ListenerList.PrepareForWriting%2A> returns `true`, you might need to update any private references to the list that you maintain in other areas of your code."}]}],"pos":[8548,9470],"yaml":true,"extradata":"MT"},{"content":"The listener element to add to the <xref href=\"System.Windows.WeakEventManager.ListenerList\"></xref>.","nodes":[{"pos":[0,101],"content":"The listener element to add to the <ph id=\"ph1\">&lt;xref href=\"System.Windows.WeakEventManager.ListenerList\"&gt;&lt;/xref&gt;</ph>.","source":"The listener element to add to the <xref href=\"System.Windows.WeakEventManager.ListenerList\"></xref>."}],"pos":[9655,9757],"yaml":true},{"content":"Adds an event handler to the <xref href=\"System.Windows.WeakEventManager.ListenerList\"></xref>.","nodes":[{"pos":[0,95],"content":"Adds an event handler to the <ph id=\"ph1\">&lt;xref href=\"System.Windows.WeakEventManager.ListenerList\"&gt;&lt;/xref&gt;</ph>.","source":"Adds an event handler to the <xref href=\"System.Windows.WeakEventManager.ListenerList\"></xref>."}],"pos":[10895,10991],"yaml":true},{"content":"The event handler to add to the <xref href=\"System.Windows.WeakEventManager.ListenerList\"></xref>.","nodes":[{"pos":[0,98],"content":"The event handler to add to the <ph id=\"ph1\">&lt;xref href=\"System.Windows.WeakEventManager.ListenerList\"&gt;&lt;/xref&gt;</ph>.","source":"The event handler to add to the <xref href=\"System.Windows.WeakEventManager.ListenerList\"></xref>."}],"pos":[11138,11237],"yaml":true},{"content":"Declares the list to be in use. This prevents direct changes to the list during iterations of the list items.","nodes":[{"pos":[0,109],"content":"Declares the list to be in use. This prevents direct changes to the list during iterations of the list items.","nodes":[{"content":"Declares the list to be in use. This prevents direct changes to the list during iterations of the list items.","pos":[0,109],"nodes":[{"content":"Declares the list to be in use.","pos":[0,31]},{"content":"This prevents direct changes to the list during iterations of the list items.","pos":[32,109]}]}]}],"pos":[12295,12405],"yaml":true},{"content":"A <xref:System.Windows.WeakEventManager> implementation should call <xref:System.Windows.WeakEventManager.ListenerList.BeginUse%2A> before iterating through the list to deliver an event to the listeners, and should call <xref:System.Windows.WeakEventManager.ListenerList.EndUse%2A> when it is done. This prevents another caller from modifying the list while the iteration for purposes of event delivery is in progress. If the list is modified during this time, then the list is cloned. If the list is cloned, then <xref:System.Windows.WeakEventManager.ListenerList.PrepareForWriting%2A> returns `true`, which means that you have missed a recent listener change in the last delivery.","nodes":[{"pos":[0,682],"content":"A <xref:System.Windows.WeakEventManager> implementation should call <xref:System.Windows.WeakEventManager.ListenerList.BeginUse%2A> before iterating through the list to deliver an event to the listeners, and should call <xref:System.Windows.WeakEventManager.ListenerList.EndUse%2A> when it is done. This prevents another caller from modifying the list while the iteration for purposes of event delivery is in progress. If the list is modified during this time, then the list is cloned. If the list is cloned, then <xref:System.Windows.WeakEventManager.ListenerList.PrepareForWriting%2A> returns `true`, which means that you have missed a recent listener change in the last delivery.","nodes":[{"content":"A <ph id=\"ph1\">&lt;xref:System.Windows.WeakEventManager&gt;</ph> implementation should call <ph id=\"ph2\">&lt;xref:System.Windows.WeakEventManager.ListenerList.BeginUse%2A&gt;</ph> before iterating through the list to deliver an event to the listeners, and should call <ph id=\"ph3\">&lt;xref:System.Windows.WeakEventManager.ListenerList.EndUse%2A&gt;</ph> when it is done.","pos":[0,298],"source":"A <xref:System.Windows.WeakEventManager> implementation should call <xref:System.Windows.WeakEventManager.ListenerList.BeginUse%2A> before iterating through the list to deliver an event to the listeners, and should call <xref:System.Windows.WeakEventManager.ListenerList.EndUse%2A> when it is done."},{"content":"This prevents another caller from modifying the list while the iteration for purposes of event delivery is in progress.","pos":[299,418]},{"content":"If the list is modified during this time, then the list is cloned.","pos":[419,485]},{"content":"If the list is cloned, then <ph id=\"ph1\">&lt;xref:System.Windows.WeakEventManager.ListenerList.PrepareForWriting%2A&gt;</ph> returns <ph id=\"ph2\">`true`</ph>, which means that you have missed a recent listener change in the last delivery.","pos":[486,682],"source":" If the list is cloned, then <xref:System.Windows.WeakEventManager.ListenerList.PrepareForWriting%2A> returns `true`, which means that you have missed a recent listener change in the last delivery."}]}],"pos":[12416,13099],"yaml":true,"extradata":"MT"},{"content":"`true` if the list was already declared to be in use; otherwise, `false`.","nodes":[{"pos":[0,73],"content":"<ph id=\"ph1\">`true`</ph> if the list was already declared to be in use; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` if the list was already declared to be in use; otherwise, `false`."}],"pos":[13224,13300],"yaml":true},{"content":"Creates a modifiable clone of this <xref href=\"System.Windows.WeakEventManager.ListenerList\"></xref>.","nodes":[{"pos":[0,101],"content":"Creates a modifiable clone of this <ph id=\"ph1\">&lt;xref href=\"System.Windows.WeakEventManager.ListenerList\"&gt;&lt;/xref&gt;</ph>.","source":"Creates a modifiable clone of this <xref href=\"System.Windows.WeakEventManager.ListenerList\"></xref>."}],"pos":[14338,14440],"yaml":true},{"content":"A modifiable clone of the current object.","nodes":[{"pos":[0,41],"content":"A modifiable clone of the current object.","nodes":[{"content":"A modifiable clone of the current object.","pos":[0,41]}]}],"pos":[14640,14682],"yaml":true},{"content":"Copies the current <xref href=\"System.Windows.WeakEventManager.ListenerList\"></xref> to the specified <xref href=\"System.Windows.WeakEventManager.ListenerList\"></xref>","nodes":[{"pos":[0,167],"content":"Copies the current <ph id=\"ph1\">&lt;xref href=\"System.Windows.WeakEventManager.ListenerList\"&gt;&lt;/xref&gt;</ph> to the specified <ph id=\"ph2\">&lt;xref href=\"System.Windows.WeakEventManager.ListenerList\"&gt;&lt;/xref&gt;</ph>","source":"Copies the current <xref href=\"System.Windows.WeakEventManager.ListenerList\"></xref> to the specified <xref href=\"System.Windows.WeakEventManager.ListenerList\"></xref>"}],"pos":[15948,16116],"yaml":true},{"content":"The object to copy to.","nodes":[{"pos":[0,22],"content":"The object to copy to.","nodes":[{"content":"The object to copy to.","pos":[0,22]}]}],"pos":[16327,16350],"yaml":true},{"content":"Gets the number of items contained in the <xref href=\"System.Windows.WeakEventManager.ListenerList\"></xref>.","nodes":[{"pos":[0,108],"content":"Gets the number of items contained in the <ph id=\"ph1\">&lt;xref href=\"System.Windows.WeakEventManager.ListenerList\"&gt;&lt;/xref&gt;</ph>.","source":"Gets the number of items contained in the <xref href=\"System.Windows.WeakEventManager.ListenerList\"></xref>."}],"pos":[17382,17491],"yaml":true},{"content":"The number of items contained in the <xref href=\"System.Windows.WeakEventManager.ListenerList\"></xref>.","nodes":[{"pos":[0,103],"content":"The number of items contained in the <ph id=\"ph1\">&lt;xref href=\"System.Windows.WeakEventManager.ListenerList\"&gt;&lt;/xref&gt;</ph>.","source":"The number of items contained in the <xref href=\"System.Windows.WeakEventManager.ListenerList\"></xref>."}],"pos":[17596,17700],"yaml":true},{"content":"Delivers the event being managed to each listener in the <xref href=\"System.Windows.WeakEventManager.ListenerList\"></xref>.","nodes":[{"pos":[0,123],"content":"Delivers the event being managed to each listener in the <ph id=\"ph1\">&lt;xref href=\"System.Windows.WeakEventManager.ListenerList\"&gt;&lt;/xref&gt;</ph>.","source":"Delivers the event being managed to each listener in the <xref href=\"System.Windows.WeakEventManager.ListenerList\"></xref>."}],"pos":[18956,19080],"yaml":true},{"content":"The object that raised the event.","nodes":[{"pos":[0,33],"content":"The object that raised the event.","nodes":[{"content":"The object that raised the event.","pos":[0,33]}]}],"pos":[19265,19299],"yaml":true},{"content":"An object that contains the event data.","nodes":[{"pos":[0,39],"content":"An object that contains the event data.","nodes":[{"content":"An object that contains the event data.","pos":[0,39]}]}],"pos":[19362,19402],"yaml":true},{"content":"The type of the <xref href=\"System.Windows.WeakEventManager\"></xref> that calls this method.","nodes":[{"pos":[0,92],"content":"The type of the <ph id=\"ph1\">&lt;xref href=\"System.Windows.WeakEventManager\"&gt;&lt;/xref&gt;</ph> that calls this method.","source":"The type of the <xref href=\"System.Windows.WeakEventManager\"></xref> that calls this method."}],"pos":[19467,19560],"yaml":true},{"content":"`true` if any of the listeners in the <xref href=\"System.Windows.WeakEventManager.ListenerList\"></xref> refer to an object that has been garbage collected; otherwise, `false`.","nodes":[{"pos":[0,175],"content":"<ph id=\"ph1\">`true`</ph> if any of the listeners in the <ph id=\"ph2\">&lt;xref href=\"System.Windows.WeakEventManager.ListenerList\"&gt;&lt;/xref&gt;</ph> refer to an object that has been garbage collected; otherwise, <ph id=\"ph3\">`false`</ph>.","source":"`true` if any of the listeners in the <xref href=\"System.Windows.WeakEventManager.ListenerList\"></xref> refer to an object that has been garbage collected; otherwise, `false`."}],"pos":[19618,19796],"yaml":true},{"content":"Gets a value that represents an empty list for purposes of comparisons.","nodes":[{"pos":[0,71],"content":"Gets a value that represents an empty list for purposes of comparisons.","nodes":[{"content":"Gets a value that represents an empty list for purposes of comparisons.","pos":[0,71]}]}],"pos":[20834,20906],"yaml":true},{"content":"The empty list representation.","nodes":[{"pos":[0,30],"content":"The empty list representation.","nodes":[{"content":"The empty list representation.","pos":[0,30]}]}],"pos":[21091,21122],"yaml":true},{"content":"Unlocks the locked state initiated by <xref href=\"System.Windows.WeakEventManager.ListenerList.BeginUse\"></xref>.","nodes":[{"pos":[0,113],"content":"Unlocks the locked state initiated by <ph id=\"ph1\">&lt;xref href=\"System.Windows.WeakEventManager.ListenerList.BeginUse\"&gt;&lt;/xref&gt;</ph>.","source":"Unlocks the locked state initiated by <xref href=\"System.Windows.WeakEventManager.ListenerList.BeginUse\"></xref>."}],"pos":[22141,22255],"yaml":true},{"content":"Gets a value that declares whether this <xref href=\"System.Windows.WeakEventManager.ListenerList\"></xref> is empty.","nodes":[{"pos":[0,115],"content":"Gets a value that declares whether this <ph id=\"ph1\">&lt;xref href=\"System.Windows.WeakEventManager.ListenerList\"&gt;&lt;/xref&gt;</ph> is empty.","source":"Gets a value that declares whether this <xref href=\"System.Windows.WeakEventManager.ListenerList\"></xref> is empty."}],"pos":[23364,23480],"yaml":true},{"content":"This method is equivalent to checking whether the <xref:System.Windows.WeakEventManager.ListenerList.Count%2A> is zero, and does not check whether any of the references in the list are now stale. If you want to assure that all references are still valid, call <xref:System.Windows.WeakEventManager.ListenerList.Purge%2A> just prior to checking the empty status of the list.","nodes":[{"pos":[0,373],"content":"This method is equivalent to checking whether the <xref:System.Windows.WeakEventManager.ListenerList.Count%2A> is zero, and does not check whether any of the references in the list are now stale. If you want to assure that all references are still valid, call <xref:System.Windows.WeakEventManager.ListenerList.Purge%2A> just prior to checking the empty status of the list.","nodes":[{"content":"This method is equivalent to checking whether the <xref:System.Windows.WeakEventManager.ListenerList.Count%2A> is zero, and does not check whether any of the references in the list are now stale. If you want to assure that all references are still valid, call <xref:System.Windows.WeakEventManager.ListenerList.Purge%2A> just prior to checking the empty status of the list.","pos":[0,373],"nodes":[{"content":"This method is equivalent to checking whether the <ph id=\"ph1\">&lt;xref:System.Windows.WeakEventManager.ListenerList.Count%2A&gt;</ph> is zero, and does not check whether any of the references in the list are now stale.","pos":[0,195],"source":"This method is equivalent to checking whether the <xref:System.Windows.WeakEventManager.ListenerList.Count%2A> is zero, and does not check whether any of the references in the list are now stale."},{"content":"If you want to assure that all references are still valid, call <ph id=\"ph1\">&lt;xref:System.Windows.WeakEventManager.ListenerList.Purge%2A&gt;</ph> just prior to checking the empty status of the list.","pos":[196,373],"source":" If you want to assure that all references are still valid, call <xref:System.Windows.WeakEventManager.ListenerList.Purge%2A> just prior to checking the empty status of the list."}]}]}],"pos":[23491,23865],"yaml":true,"extradata":"MT"},{"content":"`true` if the list is empty; otherwise, `false`.","nodes":[{"pos":[0,48],"content":"<ph id=\"ph1\">`true`</ph> if the list is empty; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` if the list is empty; otherwise, `false`."}],"pos":[23975,24026],"yaml":true},{"content":"Gets or sets a specific listener item in the <xref href=\"System.Windows.WeakEventManager.ListenerList\"></xref> .","nodes":[{"pos":[0,112],"content":"Gets or sets a specific listener item in the <ph id=\"ph1\">&lt;xref href=\"System.Windows.WeakEventManager.ListenerList\"&gt;&lt;/xref&gt;</ph> .","source":"Gets or sets a specific listener item in the <xref href=\"System.Windows.WeakEventManager.ListenerList\"></xref> ."}],"pos":[25116,25229],"yaml":true},{"content":"The zero-based index of the listener in the list.","nodes":[{"pos":[0,49],"content":"The zero-based index of the listener in the list.","nodes":[{"content":"The zero-based index of the listener in the list.","pos":[0,49]}]}],"pos":[25394,25444],"yaml":true},{"content":"The item at that index, or a null reference if no item was at that index.","nodes":[{"pos":[0,73],"content":"The item at that index, or a null reference if no item was at that index.","nodes":[{"content":"The item at that index, or a null reference if no item was at that index.","pos":[0,73]}]}],"pos":[25521,25595],"yaml":true},{"content":"Checks to see whether the provided list is in use, and if so, sets the list reference parameter to a copy of that list rather than the original.","nodes":[{"pos":[0,144],"content":"Checks to see whether the provided list is in use, and if so, sets the list reference parameter to a copy of that list rather than the original.","nodes":[{"content":"Checks to see whether the provided list is in use, and if so, sets the list reference parameter to a copy of that list rather than the original.","pos":[0,144]}]}],"pos":[26929,27074],"yaml":true},{"content":"If the given list is in use (which means an event is currently being delivered), calling this method will replace the input `list` with a clone.  The existing users will finish delivering the event to the original list, without interference from changes to the new list.  \n  \n If the method returns `true`, callers may want to insert the new list in their own data structures, since this indicates the possibility that the provided list is no longer current.  \n  \n This method calls <xref:System.Windows.WeakEventManager.ListenerList.BeginUse%2A> internally and then immediately calls <xref:System.Windows.WeakEventManager.ListenerList.EndUse%2A>. Therefore calling <xref:System.Windows.WeakEventManager.ListenerList.PrepareForWriting%2A> does not itself introduce a lock on the list. Even the clone copy is done as a secondary operation after calling <xref:System.Windows.WeakEventManager.ListenerList.EndUse%2A>.","nodes":[{"pos":[0,270],"content":"If the given list is in use (which means an event is currently being delivered), calling this method will replace the input `list` with a clone.  The existing users will finish delivering the event to the original list, without interference from changes to the new list.","nodes":[{"content":"If the given list is in use (which means an event is currently being delivered), calling this method will replace the input <ph id=\"ph1\">`list`</ph> with a clone.","pos":[0,144],"source":"If the given list is in use (which means an event is currently being delivered), calling this method will replace the input `list` with a clone."},{"content":"The existing users will finish delivering the event to the original list, without interference from changes to the new list.","pos":[146,270]}]},{"pos":[277,458],"content":"If the method returns <ph id=\"ph1\">`true`</ph>, callers may want to insert the new list in their own data structures, since this indicates the possibility that the provided list is no longer current.","source":"If the method returns `true`, callers may want to insert the new list in their own data structures, since this indicates the possibility that the provided list is no longer current."},{"pos":[465,914],"content":"This method calls <xref:System.Windows.WeakEventManager.ListenerList.BeginUse%2A> internally and then immediately calls <xref:System.Windows.WeakEventManager.ListenerList.EndUse%2A>. Therefore calling <xref:System.Windows.WeakEventManager.ListenerList.PrepareForWriting%2A> does not itself introduce a lock on the list. Even the clone copy is done as a secondary operation after calling <xref:System.Windows.WeakEventManager.ListenerList.EndUse%2A>.","nodes":[{"content":"This method calls <xref:System.Windows.WeakEventManager.ListenerList.BeginUse%2A> internally and then immediately calls <xref:System.Windows.WeakEventManager.ListenerList.EndUse%2A>. Therefore calling <xref:System.Windows.WeakEventManager.ListenerList.PrepareForWriting%2A> does not itself introduce a lock on the list. Even the clone copy is done as a secondary operation after calling <xref:System.Windows.WeakEventManager.ListenerList.EndUse%2A>.","pos":[0,449],"nodes":[{"content":"This method calls <ph id=\"ph1\">&lt;xref:System.Windows.WeakEventManager.ListenerList.BeginUse%2A&gt;</ph> internally and then immediately calls <ph id=\"ph2\">&lt;xref:System.Windows.WeakEventManager.ListenerList.EndUse%2A&gt;</ph>.","pos":[0,182],"source":"This method calls <xref:System.Windows.WeakEventManager.ListenerList.BeginUse%2A> internally and then immediately calls <xref:System.Windows.WeakEventManager.ListenerList.EndUse%2A>."},{"content":"Therefore calling <ph id=\"ph1\">&lt;xref:System.Windows.WeakEventManager.ListenerList.PrepareForWriting%2A&gt;</ph> does not itself introduce a lock on the list.","pos":[183,319],"source":" Therefore calling <xref:System.Windows.WeakEventManager.ListenerList.PrepareForWriting%2A> does not itself introduce a lock on the list."},{"content":"Even the clone copy is done as a secondary operation after calling <ph id=\"ph1\">&lt;xref:System.Windows.WeakEventManager.ListenerList.EndUse%2A&gt;</ph>.","pos":[320,449],"source":" Even the clone copy is done as a secondary operation after calling <xref:System.Windows.WeakEventManager.ListenerList.EndUse%2A>."}]}]}],"pos":[27085,28006],"yaml":true,"extradata":"MT"},{"content":"The list to check for use state and potentially copy.","nodes":[{"pos":[0,53],"content":"The list to check for use state and potentially copy.","nodes":[{"content":"The list to check for use state and potentially copy.","pos":[0,53]}]}],"pos":[28230,28284],"yaml":true},{"content":"`true` if the provided list was in use at the time of call and therefore the <code>list</code> parameter reference was reset to be a copy. `false` if the provided list was not in use, in which case the <code>list</code> parameter reference remains unaltered.","nodes":[{"pos":[0,258],"content":"`true` if the provided list was in use at the time of call and therefore the <code>list</code> parameter reference was reset to be a copy. `false` if the provided list was not in use, in which case the <code>list</code> parameter reference remains unaltered.","nodes":[{"content":"<ph id=\"ph1\">`true`</ph> if the provided list was in use at the time of call and therefore the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">list</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter reference was reset to be a copy.","pos":[0,138],"source":"`true` if the provided list was in use at the time of call and therefore the <code>list</code> parameter reference was reset to be a copy."},{"content":"<ph id=\"ph1\">`false`</ph> if the provided list was not in use, in which case the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">list</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter reference remains unaltered.","pos":[139,258],"source":"`false` if the provided list was not in use, in which case the <code>list</code> parameter reference remains unaltered."}]}],"pos":[28342,28603],"yaml":true},{"content":"Removes all entries from the list where the underlying reference target is a null reference.","nodes":[{"pos":[0,92],"content":"Removes all entries from the list where the underlying reference target is a null reference.","nodes":[{"content":"Removes all entries from the list where the underlying reference target is a null reference.","pos":[0,92]}]}],"pos":[29628,29721],"yaml":true},{"content":"Returns `true` if any entries were purged; otherwise, `false`.","nodes":[{"pos":[0,62],"content":"Returns <ph id=\"ph1\">`true`</ph> if any entries were purged; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"Returns `true` if any entries were purged; otherwise, `false`."}],"pos":[29843,29906],"yaml":true},{"content":"Removes the first occurrence of a listener item from the <xref href=\"System.Windows.WeakEventManager.ListenerList\"></xref>.","nodes":[{"pos":[0,123],"content":"Removes the first occurrence of a listener item from the <ph id=\"ph1\">&lt;xref href=\"System.Windows.WeakEventManager.ListenerList\"&gt;&lt;/xref&gt;</ph>.","source":"Removes the first occurrence of a listener item from the <xref href=\"System.Windows.WeakEventManager.ListenerList\"></xref>."}],"pos":[31106,31230],"yaml":true},{"content":"You should always call <xref:System.Windows.WeakEventManager.ListenerList.PrepareForWriting%2A> before changing the list contents. Otherwise, the list may be in process of delivering events and therefore the original is locked. Calling <xref:System.Windows.WeakEventManager.ListenerList.PrepareForWriting%2A> changes the input `list` to be a clone so that your <xref:System.Windows.WeakEventManager.ListenerList.Remove%2A> call can still work on the clone. If <xref:System.Windows.WeakEventManager.ListenerList.PrepareForWriting%2A> returns `true`, you might need to update any private references to the list that you maintain in other areas of your code.","nodes":[{"pos":[0,655],"content":"You should always call <xref:System.Windows.WeakEventManager.ListenerList.PrepareForWriting%2A> before changing the list contents. Otherwise, the list may be in process of delivering events and therefore the original is locked. Calling <xref:System.Windows.WeakEventManager.ListenerList.PrepareForWriting%2A> changes the input `list` to be a clone so that your <xref:System.Windows.WeakEventManager.ListenerList.Remove%2A> call can still work on the clone. If <xref:System.Windows.WeakEventManager.ListenerList.PrepareForWriting%2A> returns `true`, you might need to update any private references to the list that you maintain in other areas of your code.","nodes":[{"content":"You should always call <ph id=\"ph1\">&lt;xref:System.Windows.WeakEventManager.ListenerList.PrepareForWriting%2A&gt;</ph> before changing the list contents.","pos":[0,130],"source":"You should always call <xref:System.Windows.WeakEventManager.ListenerList.PrepareForWriting%2A> before changing the list contents."},{"content":"Otherwise, the list may be in process of delivering events and therefore the original is locked.","pos":[131,227]},{"content":"Calling <ph id=\"ph1\">&lt;xref:System.Windows.WeakEventManager.ListenerList.PrepareForWriting%2A&gt;</ph> changes the input <ph id=\"ph2\">`list`</ph> to be a clone so that your <ph id=\"ph3\">&lt;xref:System.Windows.WeakEventManager.ListenerList.Remove%2A&gt;</ph> call can still work on the clone.","pos":[228,456],"source":" Calling <xref:System.Windows.WeakEventManager.ListenerList.PrepareForWriting%2A> changes the input `list` to be a clone so that your <xref:System.Windows.WeakEventManager.ListenerList.Remove%2A> call can still work on the clone."},{"content":"If <ph id=\"ph1\">&lt;xref:System.Windows.WeakEventManager.ListenerList.PrepareForWriting%2A&gt;</ph> returns <ph id=\"ph2\">`true`</ph>, you might need to update any private references to the list that you maintain in other areas of your code.","pos":[457,655],"source":" If <xref:System.Windows.WeakEventManager.ListenerList.PrepareForWriting%2A> returns `true`, you might need to update any private references to the list that you maintain in other areas of your code."}]}],"pos":[31241,31897],"yaml":true,"extradata":"MT"},{"content":"The item to remove.","nodes":[{"pos":[0,19],"content":"The item to remove.","nodes":[{"content":"The item to remove.","pos":[0,19]}]}],"pos":[32085,32105],"yaml":true},{"content":"Removes an event handler from the <xref href=\"System.Windows.WeakEventManager.ListenerList\"></xref>.","nodes":[{"pos":[0,100],"content":"Removes an event handler from the <ph id=\"ph1\">&lt;xref href=\"System.Windows.WeakEventManager.ListenerList\"&gt;&lt;/xref&gt;</ph>.","source":"Removes an event handler from the <xref href=\"System.Windows.WeakEventManager.ListenerList\"></xref>."}],"pos":[33264,33365],"yaml":true},{"content":"The event handler to remove from the <xref href=\"System.Windows.WeakEventManager.ListenerList\"></xref>.","nodes":[{"pos":[0,103],"content":"The event handler to remove from the <ph id=\"ph1\">&lt;xref href=\"System.Windows.WeakEventManager.ListenerList\"&gt;&lt;/xref&gt;</ph>.","source":"The event handler to remove from the <xref href=\"System.Windows.WeakEventManager.ListenerList\"></xref>."}],"pos":[33515,33619],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Windows.WeakEventManager.ListenerList\n  commentId: T:System.Windows.WeakEventManager.ListenerList\n  id: WeakEventManager.ListenerList\n  children:\n  - System.Windows.WeakEventManager.ListenerList.#ctor\n  - System.Windows.WeakEventManager.ListenerList.#ctor(System.Int32)\n  - System.Windows.WeakEventManager.ListenerList.Add(System.Windows.IWeakEventListener)\n  - System.Windows.WeakEventManager.ListenerList.AddHandler(System.Delegate)\n  - System.Windows.WeakEventManager.ListenerList.BeginUse\n  - System.Windows.WeakEventManager.ListenerList.Clone\n  - System.Windows.WeakEventManager.ListenerList.CopyTo(System.Windows.WeakEventManager.ListenerList)\n  - System.Windows.WeakEventManager.ListenerList.Count\n  - System.Windows.WeakEventManager.ListenerList.DeliverEvent(System.Object,System.EventArgs,System.Type)\n  - System.Windows.WeakEventManager.ListenerList.Empty\n  - System.Windows.WeakEventManager.ListenerList.EndUse\n  - System.Windows.WeakEventManager.ListenerList.IsEmpty\n  - System.Windows.WeakEventManager.ListenerList.Item(System.Int32)\n  - System.Windows.WeakEventManager.ListenerList.PrepareForWriting(System.Windows.WeakEventManager.ListenerList@)\n  - System.Windows.WeakEventManager.ListenerList.Purge\n  - System.Windows.WeakEventManager.ListenerList.Remove(System.Windows.IWeakEventListener)\n  - System.Windows.WeakEventManager.ListenerList.RemoveHandler(System.Delegate)\n  langs:\n  - csharp\n  name: WeakEventManager.ListenerList\n  nameWithType: WeakEventManager.ListenerList\n  fullName: System.Windows.WeakEventManager.ListenerList\n  type: Class\n  assemblies:\n  - WindowsBase\n  namespace: System.Windows\n  summary: Provides a built-in collection list for storing listeners for a <xref href=\"System.Windows.WeakEventManager\"></xref>.\n  remarks: \"Although this list contains members that resemble those defined by <xref:System.Collections.IList> and <xref:System.Collections.ICollection>, and provide similar functionality, this class implements neither of those interfaces.  \\n  \\n Most <xref:System.Windows.WeakEventManager> derived classes do not need to use any members on <xref:System.Windows.WeakEventManager.ListenerList>. The <xref:System.Windows.WeakEventManager> methods <xref:System.Windows.WeakEventManager.ProtectedAddListener%2A> and <xref:System.Windows.WeakEventManager.ProtectedRemoveListener%2A>use a default <xref:System.Windows.WeakEventManager.ListenerList> internally, one list for each `source`.  \\n  \\n You only need to call <xref:System.Windows.WeakEventManager.ListenerList> methods if your <xref:System.Windows.WeakEventManager> class maintains multiple lists for the same event-source combination, with each list created to account for different conditions of the event. In this case, you would not use <xref:System.Windows.WeakEventManager.ProtectedAddListener%2A> and <xref:System.Windows.WeakEventManager.ProtectedRemoveListener%2A> and would instead implement `AddListener` or `RemoveListener` to act upon listeners in just one of the internal listener lists, typically based on a parameter that you add to `AddListener` or `RemoveListener`. Also, the handler implementation that receives the raw event cannot simply call <xref:System.Windows.WeakEventManager.DeliverEvent%2A>; you must instead keep track of the specifics of the event and deliver the event only to the appropriate list using <xref:System.Windows.WeakEventManager.DeliverEventToList%2A>.  \\n  \\n The various methods of <xref:System.Windows.WeakEventManager.ListenerList> are provided so that you can work with your internal lists and so that you can prevent modification of the list during actual delivery of the event.  \\n  \\n An example class that used this implementation technique is <xref:System.ComponentModel.PropertyChangedEventManager>, which maintains separate listener lists for `PropertyChanged` based on which property changed.  \\n  \\n<a name=\\\"xamlTextUsage_ListenerList\\\"></a>   \\n## XAML Text Usage  \\n You cannot use this class in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)].\"\n  syntax:\n    content: protected class WeakEventManager.ListenerList\n  inheritance:\n  - System.Object\n  implements: []\n  inheritedMembers:\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.ToString\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/WeakEventManager+ListenerList.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.WeakEventManager.ListenerList.#ctor\n  commentId: M:System.Windows.WeakEventManager.ListenerList.#ctor\n  id: '#ctor'\n  parent: System.Windows.WeakEventManager.ListenerList\n  langs:\n  - csharp\n  name: WeakEventManager.ListenerList()\n  nameWithType: WeakEventManager.ListenerList.WeakEventManager.ListenerList()\n  fullName: WeakEventManager.ListenerList.WeakEventManager.ListenerList()\n  type: Constructor\n  assemblies:\n  - WindowsBase\n  namespace: System.Windows\n  summary: Initializes a new instance of the <xref href=\"System.Windows.WeakEventManager.ListenerList\"></xref> class.\n  syntax:\n    content: public ListenerList ();\n    parameters: []\n  overload: System.Windows.WeakEventManager.ListenerList.#ctor*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/WeakEventManager+ListenerList.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.WeakEventManager.ListenerList.#ctor(System.Int32)\n  commentId: M:System.Windows.WeakEventManager.ListenerList.#ctor(System.Int32)\n  id: '#ctor(System.Int32)'\n  parent: System.Windows.WeakEventManager.ListenerList\n  langs:\n  - csharp\n  name: WeakEventManager.ListenerList(Int32)\n  nameWithType: WeakEventManager.ListenerList.WeakEventManager.ListenerList(Int32)\n  fullName: WeakEventManager.ListenerList.WeakEventManager.ListenerList(Int32)\n  type: Constructor\n  assemblies:\n  - WindowsBase\n  namespace: System.Windows\n  summary: Initializes a new instance of the <xref href=\"System.Windows.WeakEventManager.ListenerList\"></xref> class with the specified initial capacity.\n  syntax:\n    content: public ListenerList (int capacity);\n    parameters:\n    - id: capacity\n      type: System.Int32\n      description: The number of items that should be allocated in the initial list.\n  overload: System.Windows.WeakEventManager.ListenerList.#ctor*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/WeakEventManager+ListenerList.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.WeakEventManager.ListenerList.Add(System.Windows.IWeakEventListener)\n  commentId: M:System.Windows.WeakEventManager.ListenerList.Add(System.Windows.IWeakEventListener)\n  id: Add(System.Windows.IWeakEventListener)\n  parent: System.Windows.WeakEventManager.ListenerList\n  langs:\n  - csharp\n  name: Add(IWeakEventListener)\n  nameWithType: WeakEventManager.ListenerList.Add(IWeakEventListener)\n  fullName: WeakEventManager.ListenerList.Add(IWeakEventListener)\n  type: Method\n  assemblies:\n  - WindowsBase\n  namespace: System.Windows\n  summary: Adds a <xref href=\"System.Windows.IWeakEventListener\"></xref> object to the <xref href=\"System.Windows.WeakEventManager.ListenerList\"></xref>.\n  remarks: \"The object provided as listener should be a <xref:System.Windows.DependencyObject> that implements the <xref:System.Windows.IWeakEventListener> interface and therefore has a working <xref:System.Windows.IWeakEventListener.ReceiveWeakEvent%2A> implementation.  \\n  \\n You should always call <xref:System.Windows.WeakEventManager.ListenerList.PrepareForWriting%2A> before changing the list contents. Otherwise, the list may be in process of delivering events and therefore the original is locked. Calling <xref:System.Windows.WeakEventManager.ListenerList.PrepareForWriting%2A> changes the input `list` to be a clone so that your <xref:System.Windows.WeakEventManager.ListenerList.Add%2A> call can still work on the clone. If <xref:System.Windows.WeakEventManager.ListenerList.PrepareForWriting%2A> returns `true`, you might need to update any private references to the list that you maintain in other areas of your code.\"\n  syntax:\n    content: public void Add (System.Windows.IWeakEventListener listener);\n    parameters:\n    - id: listener\n      type: System.Windows.IWeakEventListener\n      description: The listener element to add to the <xref href=\"System.Windows.WeakEventManager.ListenerList\"></xref>.\n  overload: System.Windows.WeakEventManager.ListenerList.Add*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/WeakEventManager+ListenerList.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.WeakEventManager.ListenerList.AddHandler(System.Delegate)\n  commentId: M:System.Windows.WeakEventManager.ListenerList.AddHandler(System.Delegate)\n  id: AddHandler(System.Delegate)\n  parent: System.Windows.WeakEventManager.ListenerList\n  langs:\n  - csharp\n  name: AddHandler(Delegate)\n  nameWithType: WeakEventManager.ListenerList.AddHandler(Delegate)\n  fullName: WeakEventManager.ListenerList.AddHandler(Delegate)\n  type: Method\n  assemblies:\n  - WindowsBase\n  namespace: System.Windows\n  summary: Adds an event handler to the <xref href=\"System.Windows.WeakEventManager.ListenerList\"></xref>.\n  syntax:\n    content: public void AddHandler (Delegate handler);\n    parameters:\n    - id: handler\n      type: System.Delegate\n      description: The event handler to add to the <xref href=\"System.Windows.WeakEventManager.ListenerList\"></xref>.\n  overload: System.Windows.WeakEventManager.ListenerList.AddHandler*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/WeakEventManager+ListenerList.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.WeakEventManager.ListenerList.BeginUse\n  commentId: M:System.Windows.WeakEventManager.ListenerList.BeginUse\n  id: BeginUse\n  parent: System.Windows.WeakEventManager.ListenerList\n  langs:\n  - csharp\n  name: BeginUse()\n  nameWithType: WeakEventManager.ListenerList.BeginUse()\n  fullName: WeakEventManager.ListenerList.BeginUse()\n  type: Method\n  assemblies:\n  - WindowsBase\n  namespace: System.Windows\n  summary: Declares the list to be in use. This prevents direct changes to the list during iterations of the list items.\n  remarks: A <xref:System.Windows.WeakEventManager> implementation should call <xref:System.Windows.WeakEventManager.ListenerList.BeginUse%2A> before iterating through the list to deliver an event to the listeners, and should call <xref:System.Windows.WeakEventManager.ListenerList.EndUse%2A> when it is done. This prevents another caller from modifying the list while the iteration for purposes of event delivery is in progress. If the list is modified during this time, then the list is cloned. If the list is cloned, then <xref:System.Windows.WeakEventManager.ListenerList.PrepareForWriting%2A> returns `true`, which means that you have missed a recent listener change in the last delivery.\n  syntax:\n    content: public bool BeginUse ();\n    parameters: []\n    return:\n      type: System.Boolean\n      description: '`true` if the list was already declared to be in use; otherwise, `false`.'\n  overload: System.Windows.WeakEventManager.ListenerList.BeginUse*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/WeakEventManager+ListenerList.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.WeakEventManager.ListenerList.Clone\n  commentId: M:System.Windows.WeakEventManager.ListenerList.Clone\n  id: Clone\n  parent: System.Windows.WeakEventManager.ListenerList\n  langs:\n  - csharp\n  name: Clone()\n  nameWithType: WeakEventManager.ListenerList.Clone()\n  fullName: WeakEventManager.ListenerList.Clone()\n  type: Method\n  assemblies:\n  - WindowsBase\n  namespace: System.Windows\n  summary: Creates a modifiable clone of this <xref href=\"System.Windows.WeakEventManager.ListenerList\"></xref>.\n  syntax:\n    content: public virtual System.Windows.WeakEventManager.ListenerList Clone ();\n    parameters: []\n    return:\n      type: System.Windows.WeakEventManager+ListenerList\n      description: A modifiable clone of the current object.\n  overload: System.Windows.WeakEventManager.ListenerList.Clone*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/WeakEventManager+ListenerList.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.WeakEventManager.ListenerList.CopyTo(System.Windows.WeakEventManager.ListenerList)\n  commentId: M:System.Windows.WeakEventManager.ListenerList.CopyTo(System.Windows.WeakEventManager.ListenerList)\n  id: CopyTo(System.Windows.WeakEventManager.ListenerList)\n  parent: System.Windows.WeakEventManager.ListenerList\n  langs:\n  - csharp\n  name: CopyTo(WeakEventManager+ListenerList)\n  nameWithType: WeakEventManager.ListenerList.CopyTo(WeakEventManager+ListenerList)\n  fullName: WeakEventManager.ListenerList.CopyTo(WeakEventManager+ListenerList)\n  type: Method\n  assemblies:\n  - WindowsBase\n  namespace: System.Windows\n  summary: Copies the current <xref href=\"System.Windows.WeakEventManager.ListenerList\"></xref> to the specified <xref href=\"System.Windows.WeakEventManager.ListenerList\"></xref>\n  syntax:\n    content: protected void CopyTo (System.Windows.WeakEventManager.ListenerList newList);\n    parameters:\n    - id: newList\n      type: System.Windows.WeakEventManager+ListenerList\n      description: The object to copy to.\n  overload: System.Windows.WeakEventManager.ListenerList.CopyTo*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/WeakEventManager+ListenerList.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.WeakEventManager.ListenerList.Count\n  commentId: P:System.Windows.WeakEventManager.ListenerList.Count\n  id: Count\n  parent: System.Windows.WeakEventManager.ListenerList\n  langs:\n  - csharp\n  name: Count\n  nameWithType: WeakEventManager.ListenerList.Count\n  fullName: WeakEventManager.ListenerList.Count\n  type: Property\n  assemblies:\n  - WindowsBase\n  namespace: System.Windows\n  summary: Gets the number of items contained in the <xref href=\"System.Windows.WeakEventManager.ListenerList\"></xref>.\n  syntax:\n    content: public int Count { get; }\n    return:\n      type: System.Int32\n      description: The number of items contained in the <xref href=\"System.Windows.WeakEventManager.ListenerList\"></xref>.\n  overload: System.Windows.WeakEventManager.ListenerList.Count*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/WeakEventManager+ListenerList.xml\n  ms.technology:\n  - dotnet-wpf\n  ms.author: kempb\n  manager: ghogen\n- uid: System.Windows.WeakEventManager.ListenerList.DeliverEvent(System.Object,System.EventArgs,System.Type)\n  commentId: M:System.Windows.WeakEventManager.ListenerList.DeliverEvent(System.Object,System.EventArgs,System.Type)\n  id: DeliverEvent(System.Object,System.EventArgs,System.Type)\n  parent: System.Windows.WeakEventManager.ListenerList\n  langs:\n  - csharp\n  name: DeliverEvent(Object, EventArgs, Type)\n  nameWithType: WeakEventManager.ListenerList.DeliverEvent(Object, EventArgs, Type)\n  fullName: WeakEventManager.ListenerList.DeliverEvent(Object, EventArgs, Type)\n  type: Method\n  assemblies:\n  - WindowsBase\n  namespace: System.Windows\n  summary: Delivers the event being managed to each listener in the <xref href=\"System.Windows.WeakEventManager.ListenerList\"></xref>.\n  syntax:\n    content: public virtual bool DeliverEvent (object sender, EventArgs args, Type managerType);\n    parameters:\n    - id: sender\n      type: System.Object\n      description: The object that raised the event.\n    - id: args\n      type: System.EventArgs\n      description: An object that contains the event data.\n    - id: managerType\n      type: System.Type\n      description: The type of the <xref href=\"System.Windows.WeakEventManager\"></xref> that calls this method.\n    return:\n      type: System.Boolean\n      description: '`true` if any of the listeners in the <xref href=\"System.Windows.WeakEventManager.ListenerList\"></xref> refer to an object that has been garbage collected; otherwise, `false`.'\n  overload: System.Windows.WeakEventManager.ListenerList.DeliverEvent*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/WeakEventManager+ListenerList.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.WeakEventManager.ListenerList.Empty\n  commentId: P:System.Windows.WeakEventManager.ListenerList.Empty\n  id: Empty\n  parent: System.Windows.WeakEventManager.ListenerList\n  langs:\n  - csharp\n  name: Empty\n  nameWithType: WeakEventManager.ListenerList.Empty\n  fullName: WeakEventManager.ListenerList.Empty\n  type: Property\n  assemblies:\n  - WindowsBase\n  namespace: System.Windows\n  summary: Gets a value that represents an empty list for purposes of comparisons.\n  syntax:\n    content: public static System.Windows.WeakEventManager.ListenerList Empty { get; }\n    return:\n      type: System.Windows.WeakEventManager+ListenerList\n      description: The empty list representation.\n  overload: System.Windows.WeakEventManager.ListenerList.Empty*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/WeakEventManager+ListenerList.xml\n  ms.technology:\n  - dotnet-wpf\n  ms.author: kempb\n  manager: ghogen\n- uid: System.Windows.WeakEventManager.ListenerList.EndUse\n  commentId: M:System.Windows.WeakEventManager.ListenerList.EndUse\n  id: EndUse\n  parent: System.Windows.WeakEventManager.ListenerList\n  langs:\n  - csharp\n  name: EndUse()\n  nameWithType: WeakEventManager.ListenerList.EndUse()\n  fullName: WeakEventManager.ListenerList.EndUse()\n  type: Method\n  assemblies:\n  - WindowsBase\n  namespace: System.Windows\n  summary: Unlocks the locked state initiated by <xref href=\"System.Windows.WeakEventManager.ListenerList.BeginUse\"></xref>.\n  syntax:\n    content: public void EndUse ();\n    parameters: []\n  overload: System.Windows.WeakEventManager.ListenerList.EndUse*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/WeakEventManager+ListenerList.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.WeakEventManager.ListenerList.IsEmpty\n  commentId: P:System.Windows.WeakEventManager.ListenerList.IsEmpty\n  id: IsEmpty\n  parent: System.Windows.WeakEventManager.ListenerList\n  langs:\n  - csharp\n  name: IsEmpty\n  nameWithType: WeakEventManager.ListenerList.IsEmpty\n  fullName: WeakEventManager.ListenerList.IsEmpty\n  type: Property\n  assemblies:\n  - WindowsBase\n  namespace: System.Windows\n  summary: Gets a value that declares whether this <xref href=\"System.Windows.WeakEventManager.ListenerList\"></xref> is empty.\n  remarks: This method is equivalent to checking whether the <xref:System.Windows.WeakEventManager.ListenerList.Count%2A> is zero, and does not check whether any of the references in the list are now stale. If you want to assure that all references are still valid, call <xref:System.Windows.WeakEventManager.ListenerList.Purge%2A> just prior to checking the empty status of the list.\n  syntax:\n    content: public bool IsEmpty { get; }\n    return:\n      type: System.Boolean\n      description: '`true` if the list is empty; otherwise, `false`.'\n  overload: System.Windows.WeakEventManager.ListenerList.IsEmpty*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/WeakEventManager+ListenerList.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.WeakEventManager.ListenerList.Item(System.Int32)\n  commentId: P:System.Windows.WeakEventManager.ListenerList.Item(System.Int32)\n  id: Item(System.Int32)\n  parent: System.Windows.WeakEventManager.ListenerList\n  langs:\n  - csharp\n  name: Item(Int32)\n  nameWithType: WeakEventManager.ListenerList.Item(Int32)\n  fullName: WeakEventManager.ListenerList.Item(Int32)\n  type: Property\n  assemblies:\n  - WindowsBase\n  namespace: System.Windows\n  summary: Gets or sets a specific listener item in the <xref href=\"System.Windows.WeakEventManager.ListenerList\"></xref> .\n  syntax:\n    content: public System.Windows.IWeakEventListener this[int index] { get; }\n    parameters:\n    - id: index\n      type: System.Int32\n      description: The zero-based index of the listener in the list.\n    return:\n      type: System.Windows.IWeakEventListener\n      description: The item at that index, or a null reference if no item was at that index.\n  overload: System.Windows.WeakEventManager.ListenerList.Item*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/WeakEventManager+ListenerList.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.WeakEventManager.ListenerList.PrepareForWriting(System.Windows.WeakEventManager.ListenerList@)\n  commentId: M:System.Windows.WeakEventManager.ListenerList.PrepareForWriting(System.Windows.WeakEventManager.ListenerList@)\n  id: PrepareForWriting(System.Windows.WeakEventManager.ListenerList@)\n  parent: System.Windows.WeakEventManager.ListenerList\n  langs:\n  - csharp\n  name: PrepareForWriting(WeakEventManager+ListenerList)\n  nameWithType: WeakEventManager.ListenerList.PrepareForWriting(WeakEventManager+ListenerList)\n  fullName: WeakEventManager.ListenerList.PrepareForWriting(WeakEventManager+ListenerList)\n  type: Method\n  assemblies:\n  - WindowsBase\n  namespace: System.Windows\n  summary: Checks to see whether the provided list is in use, and if so, sets the list reference parameter to a copy of that list rather than the original.\n  remarks: \"If the given list is in use (which means an event is currently being delivered), calling this method will replace the input `list` with a clone.  The existing users will finish delivering the event to the original list, without interference from changes to the new list.  \\n  \\n If the method returns `true`, callers may want to insert the new list in their own data structures, since this indicates the possibility that the provided list is no longer current.  \\n  \\n This method calls <xref:System.Windows.WeakEventManager.ListenerList.BeginUse%2A> internally and then immediately calls <xref:System.Windows.WeakEventManager.ListenerList.EndUse%2A>. Therefore calling <xref:System.Windows.WeakEventManager.ListenerList.PrepareForWriting%2A> does not itself introduce a lock on the list. Even the clone copy is done as a secondary operation after calling <xref:System.Windows.WeakEventManager.ListenerList.EndUse%2A>.\"\n  syntax:\n    content: public static bool PrepareForWriting (ref System.Windows.WeakEventManager.ListenerList list);\n    parameters:\n    - id: list\n      type: System.Windows.WeakEventManager+ListenerList\n      description: The list to check for use state and potentially copy.\n    return:\n      type: System.Boolean\n      description: '`true` if the provided list was in use at the time of call and therefore the <code>list</code> parameter reference was reset to be a copy. `false` if the provided list was not in use, in which case the <code>list</code> parameter reference remains unaltered.'\n  overload: System.Windows.WeakEventManager.ListenerList.PrepareForWriting*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/WeakEventManager+ListenerList.xml\n  ms.technology:\n  - dotnet-wpf\n  ms.author: kempb\n  manager: ghogen\n- uid: System.Windows.WeakEventManager.ListenerList.Purge\n  commentId: M:System.Windows.WeakEventManager.ListenerList.Purge\n  id: Purge\n  parent: System.Windows.WeakEventManager.ListenerList\n  langs:\n  - csharp\n  name: Purge()\n  nameWithType: WeakEventManager.ListenerList.Purge()\n  fullName: WeakEventManager.ListenerList.Purge()\n  type: Method\n  assemblies:\n  - WindowsBase\n  namespace: System.Windows\n  summary: Removes all entries from the list where the underlying reference target is a null reference.\n  syntax:\n    content: public bool Purge ();\n    parameters: []\n    return:\n      type: System.Boolean\n      description: Returns `true` if any entries were purged; otherwise, `false`.\n  overload: System.Windows.WeakEventManager.ListenerList.Purge*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/WeakEventManager+ListenerList.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.WeakEventManager.ListenerList.Remove(System.Windows.IWeakEventListener)\n  commentId: M:System.Windows.WeakEventManager.ListenerList.Remove(System.Windows.IWeakEventListener)\n  id: Remove(System.Windows.IWeakEventListener)\n  parent: System.Windows.WeakEventManager.ListenerList\n  langs:\n  - csharp\n  name: Remove(IWeakEventListener)\n  nameWithType: WeakEventManager.ListenerList.Remove(IWeakEventListener)\n  fullName: WeakEventManager.ListenerList.Remove(IWeakEventListener)\n  type: Method\n  assemblies:\n  - WindowsBase\n  namespace: System.Windows\n  summary: Removes the first occurrence of a listener item from the <xref href=\"System.Windows.WeakEventManager.ListenerList\"></xref>.\n  remarks: You should always call <xref:System.Windows.WeakEventManager.ListenerList.PrepareForWriting%2A> before changing the list contents. Otherwise, the list may be in process of delivering events and therefore the original is locked. Calling <xref:System.Windows.WeakEventManager.ListenerList.PrepareForWriting%2A> changes the input `list` to be a clone so that your <xref:System.Windows.WeakEventManager.ListenerList.Remove%2A> call can still work on the clone. If <xref:System.Windows.WeakEventManager.ListenerList.PrepareForWriting%2A> returns `true`, you might need to update any private references to the list that you maintain in other areas of your code.\n  syntax:\n    content: public void Remove (System.Windows.IWeakEventListener listener);\n    parameters:\n    - id: listener\n      type: System.Windows.IWeakEventListener\n      description: The item to remove.\n  overload: System.Windows.WeakEventManager.ListenerList.Remove*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/WeakEventManager+ListenerList.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.WeakEventManager.ListenerList.RemoveHandler(System.Delegate)\n  commentId: M:System.Windows.WeakEventManager.ListenerList.RemoveHandler(System.Delegate)\n  id: RemoveHandler(System.Delegate)\n  parent: System.Windows.WeakEventManager.ListenerList\n  langs:\n  - csharp\n  name: RemoveHandler(Delegate)\n  nameWithType: WeakEventManager.ListenerList.RemoveHandler(Delegate)\n  fullName: WeakEventManager.ListenerList.RemoveHandler(Delegate)\n  type: Method\n  assemblies:\n  - WindowsBase\n  namespace: System.Windows\n  summary: Removes an event handler from the <xref href=\"System.Windows.WeakEventManager.ListenerList\"></xref>.\n  syntax:\n    content: public void RemoveHandler (Delegate handler);\n    parameters:\n    - id: handler\n      type: System.Delegate\n      description: The event handler to remove from the <xref href=\"System.Windows.WeakEventManager.ListenerList\"></xref>.\n  overload: System.Windows.WeakEventManager.ListenerList.RemoveHandler*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/WeakEventManager+ListenerList.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\nreferences:\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.Windows.WeakEventManager.ListenerList.#ctor\n  parent: System.Windows.WeakEventManager.ListenerList\n  isExternal: false\n  name: WeakEventManager.ListenerList()\n  nameWithType: WeakEventManager.ListenerList.WeakEventManager.ListenerList()\n  fullName: WeakEventManager.ListenerList.WeakEventManager.ListenerList()\n- uid: System.Windows.WeakEventManager.ListenerList.#ctor(System.Int32)\n  parent: System.Windows.WeakEventManager.ListenerList\n  isExternal: false\n  name: WeakEventManager.ListenerList(Int32)\n  nameWithType: WeakEventManager.ListenerList.WeakEventManager.ListenerList(Int32)\n  fullName: WeakEventManager.ListenerList.WeakEventManager.ListenerList(Int32)\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Windows.WeakEventManager.ListenerList.Add(System.Windows.IWeakEventListener)\n  parent: System.Windows.WeakEventManager.ListenerList\n  isExternal: false\n  name: Add(IWeakEventListener)\n  nameWithType: WeakEventManager.ListenerList.Add(IWeakEventListener)\n  fullName: WeakEventManager.ListenerList.Add(IWeakEventListener)\n- uid: System.Windows.IWeakEventListener\n  parent: System.Windows\n  isExternal: false\n  name: IWeakEventListener\n  nameWithType: IWeakEventListener\n  fullName: System.Windows.IWeakEventListener\n- uid: System.Windows.WeakEventManager.ListenerList.AddHandler(System.Delegate)\n  parent: System.Windows.WeakEventManager.ListenerList\n  isExternal: false\n  name: AddHandler(Delegate)\n  nameWithType: WeakEventManager.ListenerList.AddHandler(Delegate)\n  fullName: WeakEventManager.ListenerList.AddHandler(Delegate)\n- uid: System.Delegate\n  parent: System\n  isExternal: false\n  name: Delegate\n  nameWithType: Delegate\n  fullName: System.Delegate\n- uid: System.Windows.WeakEventManager.ListenerList.BeginUse\n  parent: System.Windows.WeakEventManager.ListenerList\n  isExternal: false\n  name: BeginUse()\n  nameWithType: WeakEventManager.ListenerList.BeginUse()\n  fullName: WeakEventManager.ListenerList.BeginUse()\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Windows.WeakEventManager.ListenerList.Clone\n  parent: System.Windows.WeakEventManager.ListenerList\n  isExternal: false\n  name: Clone()\n  nameWithType: WeakEventManager.ListenerList.Clone()\n  fullName: WeakEventManager.ListenerList.Clone()\n- uid: System.Windows.WeakEventManager\n  parent: System.Windows\n  isExternal: false\n  name: WeakEventManager\n  nameWithType: WeakEventManager\n  fullName: System.Windows.WeakEventManager+ListenerList\n- uid: System.Windows.WeakEventManager.ListenerList.CopyTo(System.Windows.WeakEventManager.ListenerList)\n  parent: System.Windows.WeakEventManager.ListenerList\n  isExternal: false\n  name: CopyTo(WeakEventManager+ListenerList)\n  nameWithType: WeakEventManager.ListenerList.CopyTo(WeakEventManager+ListenerList)\n  fullName: WeakEventManager.ListenerList.CopyTo(WeakEventManager+ListenerList)\n- uid: System.Windows.WeakEventManager.ListenerList.Count\n  parent: System.Windows.WeakEventManager.ListenerList\n  isExternal: false\n  name: Count\n  nameWithType: WeakEventManager.ListenerList.Count\n  fullName: WeakEventManager.ListenerList.Count\n- uid: System.Windows.WeakEventManager.ListenerList.DeliverEvent(System.Object,System.EventArgs,System.Type)\n  parent: System.Windows.WeakEventManager.ListenerList\n  isExternal: false\n  name: DeliverEvent(Object, EventArgs, Type)\n  nameWithType: WeakEventManager.ListenerList.DeliverEvent(Object, EventArgs, Type)\n  fullName: WeakEventManager.ListenerList.DeliverEvent(Object, EventArgs, Type)\n- uid: System.EventArgs\n  parent: System\n  isExternal: false\n  name: EventArgs\n  nameWithType: EventArgs\n  fullName: System.EventArgs\n- uid: System.Type\n  parent: System\n  isExternal: false\n  name: Type\n  nameWithType: Type\n  fullName: System.Type\n- uid: System.Windows.WeakEventManager.ListenerList.Empty\n  parent: System.Windows.WeakEventManager.ListenerList\n  isExternal: false\n  name: Empty\n  nameWithType: WeakEventManager.ListenerList.Empty\n  fullName: WeakEventManager.ListenerList.Empty\n- uid: System.Windows.WeakEventManager.ListenerList.EndUse\n  parent: System.Windows.WeakEventManager.ListenerList\n  isExternal: false\n  name: EndUse()\n  nameWithType: WeakEventManager.ListenerList.EndUse()\n  fullName: WeakEventManager.ListenerList.EndUse()\n- uid: System.Windows.WeakEventManager.ListenerList.IsEmpty\n  parent: System.Windows.WeakEventManager.ListenerList\n  isExternal: false\n  name: IsEmpty\n  nameWithType: WeakEventManager.ListenerList.IsEmpty\n  fullName: WeakEventManager.ListenerList.IsEmpty\n- uid: System.Windows.WeakEventManager.ListenerList.Item(System.Int32)\n  parent: System.Windows.WeakEventManager.ListenerList\n  isExternal: false\n  name: Item(Int32)\n  nameWithType: WeakEventManager.ListenerList.Item(Int32)\n  fullName: WeakEventManager.ListenerList.Item(Int32)\n- uid: System.Windows.WeakEventManager.ListenerList.PrepareForWriting(System.Windows.WeakEventManager.ListenerList@)\n  parent: System.Windows.WeakEventManager.ListenerList\n  isExternal: false\n  name: PrepareForWriting(WeakEventManager+ListenerList)\n  nameWithType: WeakEventManager.ListenerList.PrepareForWriting(WeakEventManager+ListenerList)\n  fullName: WeakEventManager.ListenerList.PrepareForWriting(WeakEventManager+ListenerList)\n- uid: System.Windows.WeakEventManager.ListenerList.Purge\n  parent: System.Windows.WeakEventManager.ListenerList\n  isExternal: false\n  name: Purge()\n  nameWithType: WeakEventManager.ListenerList.Purge()\n  fullName: WeakEventManager.ListenerList.Purge()\n- uid: System.Windows.WeakEventManager.ListenerList.Remove(System.Windows.IWeakEventListener)\n  parent: System.Windows.WeakEventManager.ListenerList\n  isExternal: false\n  name: Remove(IWeakEventListener)\n  nameWithType: WeakEventManager.ListenerList.Remove(IWeakEventListener)\n  fullName: WeakEventManager.ListenerList.Remove(IWeakEventListener)\n- uid: System.Windows.WeakEventManager.ListenerList.RemoveHandler(System.Delegate)\n  parent: System.Windows.WeakEventManager.ListenerList\n  isExternal: false\n  name: RemoveHandler(Delegate)\n  nameWithType: WeakEventManager.ListenerList.RemoveHandler(Delegate)\n  fullName: WeakEventManager.ListenerList.RemoveHandler(Delegate)\n- uid: System.Windows.WeakEventManager.ListenerList.#ctor*\n  parent: System.Windows.WeakEventManager.ListenerList\n  isExternal: false\n  name: WeakEventManager.ListenerList\n  nameWithType: WeakEventManager.ListenerList.WeakEventManager.ListenerList\n  fullName: WeakEventManager.ListenerList.WeakEventManager.ListenerList\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/WeakEventManager+ListenerList.xml\n- uid: System.Windows.WeakEventManager.ListenerList.Add*\n  parent: System.Windows.WeakEventManager.ListenerList\n  isExternal: false\n  name: Add\n  nameWithType: WeakEventManager.ListenerList.Add\n  fullName: WeakEventManager.ListenerList.Add\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/WeakEventManager+ListenerList.xml\n- uid: System.Windows.WeakEventManager.ListenerList.AddHandler*\n  parent: System.Windows.WeakEventManager.ListenerList\n  isExternal: false\n  name: AddHandler\n  nameWithType: WeakEventManager.ListenerList.AddHandler\n  fullName: WeakEventManager.ListenerList.AddHandler\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/WeakEventManager+ListenerList.xml\n- uid: System.Windows.WeakEventManager.ListenerList.BeginUse*\n  parent: System.Windows.WeakEventManager.ListenerList\n  isExternal: false\n  name: BeginUse\n  nameWithType: WeakEventManager.ListenerList.BeginUse\n  fullName: WeakEventManager.ListenerList.BeginUse\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/WeakEventManager+ListenerList.xml\n- uid: System.Windows.WeakEventManager.ListenerList.Clone*\n  parent: System.Windows.WeakEventManager.ListenerList\n  isExternal: false\n  name: Clone\n  nameWithType: WeakEventManager.ListenerList.Clone\n  fullName: WeakEventManager.ListenerList.Clone\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/WeakEventManager+ListenerList.xml\n- uid: System.Windows.WeakEventManager.ListenerList.CopyTo*\n  parent: System.Windows.WeakEventManager.ListenerList\n  isExternal: false\n  name: CopyTo\n  nameWithType: WeakEventManager.ListenerList.CopyTo\n  fullName: WeakEventManager.ListenerList.CopyTo\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/WeakEventManager+ListenerList.xml\n- uid: System.Windows.WeakEventManager.ListenerList.Count*\n  parent: System.Windows.WeakEventManager.ListenerList\n  isExternal: false\n  name: Count\n  nameWithType: WeakEventManager.ListenerList.Count\n  fullName: WeakEventManager.ListenerList.Count\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/WeakEventManager+ListenerList.xml\n- uid: System.Windows.WeakEventManager.ListenerList.DeliverEvent*\n  parent: System.Windows.WeakEventManager.ListenerList\n  isExternal: false\n  name: DeliverEvent\n  nameWithType: WeakEventManager.ListenerList.DeliverEvent\n  fullName: WeakEventManager.ListenerList.DeliverEvent\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/WeakEventManager+ListenerList.xml\n- uid: System.Windows.WeakEventManager.ListenerList.Empty*\n  parent: System.Windows.WeakEventManager.ListenerList\n  isExternal: false\n  name: Empty\n  nameWithType: WeakEventManager.ListenerList.Empty\n  fullName: WeakEventManager.ListenerList.Empty\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/WeakEventManager+ListenerList.xml\n- uid: System.Windows.WeakEventManager.ListenerList.EndUse*\n  parent: System.Windows.WeakEventManager.ListenerList\n  isExternal: false\n  name: EndUse\n  nameWithType: WeakEventManager.ListenerList.EndUse\n  fullName: WeakEventManager.ListenerList.EndUse\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/WeakEventManager+ListenerList.xml\n- uid: System.Windows.WeakEventManager.ListenerList.IsEmpty*\n  parent: System.Windows.WeakEventManager.ListenerList\n  isExternal: false\n  name: IsEmpty\n  nameWithType: WeakEventManager.ListenerList.IsEmpty\n  fullName: WeakEventManager.ListenerList.IsEmpty\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/WeakEventManager+ListenerList.xml\n- uid: System.Windows.WeakEventManager.ListenerList.Item*\n  parent: System.Windows.WeakEventManager.ListenerList\n  isExternal: false\n  name: Item\n  nameWithType: WeakEventManager.ListenerList.Item\n  fullName: WeakEventManager.ListenerList.Item\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/WeakEventManager+ListenerList.xml\n- uid: System.Windows.WeakEventManager.ListenerList.PrepareForWriting*\n  parent: System.Windows.WeakEventManager.ListenerList\n  isExternal: false\n  name: PrepareForWriting\n  nameWithType: WeakEventManager.ListenerList.PrepareForWriting\n  fullName: WeakEventManager.ListenerList.PrepareForWriting\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/WeakEventManager+ListenerList.xml\n- uid: System.Windows.WeakEventManager.ListenerList.Purge*\n  parent: System.Windows.WeakEventManager.ListenerList\n  isExternal: false\n  name: Purge\n  nameWithType: WeakEventManager.ListenerList.Purge\n  fullName: WeakEventManager.ListenerList.Purge\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/WeakEventManager+ListenerList.xml\n- uid: System.Windows.WeakEventManager.ListenerList.Remove*\n  parent: System.Windows.WeakEventManager.ListenerList\n  isExternal: false\n  name: Remove\n  nameWithType: WeakEventManager.ListenerList.Remove\n  fullName: WeakEventManager.ListenerList.Remove\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/WeakEventManager+ListenerList.xml\n- uid: System.Windows.WeakEventManager.ListenerList.RemoveHandler*\n  parent: System.Windows.WeakEventManager.ListenerList\n  isExternal: false\n  name: RemoveHandler\n  nameWithType: WeakEventManager.ListenerList.RemoveHandler\n  fullName: WeakEventManager.ListenerList.RemoveHandler\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/WeakEventManager+ListenerList.xml\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: Object.Equals(Object)\n  fullName: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: Object.GetHashCode()\n  fullName: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: false\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: false\n  name: ToString()\n  nameWithType: Object.ToString()\n  fullName: Object.ToString()\n"}