{"nodes":[{"content":"Represents a collection of key/value pairs that are sorted by the keys and are accessible by key and by index.","nodes":[{"pos":[0,110],"content":"Represents a collection of key/value pairs that are sorted by the keys and are accessible by key and by index.","nodes":[{"content":"Represents a collection of key/value pairs that are sorted by the keys and are accessible by key and by index.","pos":[0,110]}]}],"pos":[2370,2481],"yaml":true},{"content":"For the generic version of this collection, see <xref:System.Collections.Generic.SortedList%602?displayProperty=fullName>.  \n  \n A <xref:System.Collections.SortedList> element can be accessed by its key, like an element in any <xref:System.Collections.IDictionary> implementation, or by its index, like an element in any <xref:System.Collections.IList> implementation.  \n  \n A <xref:System.Collections.SortedList> object internally maintains two arrays to store the elements of the list; that is, one array for the keys and another array for the associated values. Each element is a key/value pair that can be accessed as a <xref:System.Collections.DictionaryEntry> object. A key cannot be `null`, but a value can be.  \n  \n The capacity of a <xref:System.Collections.SortedList> object is the number of elements the <xref:System.Collections.SortedList> can hold. As elements are added to a <xref:System.Collections.SortedList>, the capacity is automatically increased as required through reallocation. The capacity can be decreased by calling <xref:System.Collections.SortedList.TrimToSize%2A> or by setting the <xref:System.Collections.SortedList.Capacity%2A> property explicitly.  \n  \n For very large <xref:System.Collections.SortedList> objects, you can increase the maximum capacity to 2 billion elements on a 64-bit system by setting the `enabled` attribute of the  configuration element to `true` in the run-time environment.  \n  \n The elements of a <xref:System.Collections.SortedList> object are sorted by the keys either according to a specific <xref:System.Collections.IComparer> implementation specified when the <xref:System.Collections.SortedList> is created or according to the <xref:System.IComparable> implementation provided by the keys themselves. In either case, a <xref:System.Collections.SortedList> does not allow duplicate keys.  \n  \n The index sequence is based on the sort sequence. When an element is added, it is inserted into <xref:System.Collections.SortedList> in the correct sort order, and the indexing adjusts accordingly. When an element is removed, the indexing also adjusts accordingly. Therefore, the index of a specific key/value pair might change as elements are added or removed from the <xref:System.Collections.SortedList> object.  \n  \n Operations on a <xref:System.Collections.SortedList> object tend to be slower than operations on a <xref:System.Collections.Hashtable> object because of the sorting. However, the <xref:System.Collections.SortedList> offers more flexibility by allowing access to the values either through the associated keys or through the indexes.  \n  \n Elements in this collection can be accessed using an integer index.  Indexes in this collection are zero-based.  \n  \n The `foreach` statement of the C# language (`for each` in Visual Basic) returns an object of the type of the elements in the collection. Since each element of the <xref:System.Collections.SortedList> object is a key/value pair, the element type is not the type of the key or the type of the value. Rather, the element type is <xref:System.Collections.DictionaryEntry>. For example:  \n  \n [!code-cpp[Classic SortedList Example#2](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic SortedList Example/CPP/remarks.cpp#2)]\n [!code-csharp[Classic SortedList Example#2](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic SortedList Example/CS/remarks.cs#2)]\n [!code-vb[Classic SortedList Example#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic SortedList Example/VB/remarks.vb#2)]  \n  \n The `foreach` statement is a wrapper around the enumerator, which allows only reading from, not writing to, the collection.","nodes":[{"pos":[0,122],"content":"For the generic version of this collection, see <xref:System.Collections.Generic.SortedList%602?displayProperty=fullName>.","nodes":[{"content":"For the generic version of this collection, see <ph id=\"ph1\">&lt;xref:System.Collections.Generic.SortedList%602?displayProperty=fullName&gt;</ph>.","pos":[0,122],"source":"For the generic version of this collection, see <xref:System.Collections.Generic.SortedList%602?displayProperty=fullName>."}]},{"pos":[129,368],"content":"A <xref:System.Collections.SortedList> element can be accessed by its key, like an element in any <xref:System.Collections.IDictionary> implementation, or by its index, like an element in any <xref:System.Collections.IList> implementation.","nodes":[{"content":"A <ph id=\"ph1\">&lt;xref:System.Collections.SortedList&gt;</ph> element can be accessed by its key, like an element in any <ph id=\"ph2\">&lt;xref:System.Collections.IDictionary&gt;</ph> implementation, or by its index, like an element in any <ph id=\"ph3\">&lt;xref:System.Collections.IList&gt;</ph> implementation.","pos":[0,239],"source":"A <xref:System.Collections.SortedList> element can be accessed by its key, like an element in any <xref:System.Collections.IDictionary> implementation, or by its index, like an element in any <xref:System.Collections.IList> implementation."}]},{"pos":[375,717],"content":"A <xref:System.Collections.SortedList> object internally maintains two arrays to store the elements of the list; that is, one array for the keys and another array for the associated values. Each element is a key/value pair that can be accessed as a <xref:System.Collections.DictionaryEntry> object. A key cannot be `null`, but a value can be.","nodes":[{"content":"A <ph id=\"ph1\">&lt;xref:System.Collections.SortedList&gt;</ph> object internally maintains two arrays to store the elements of the list; that is, one array for the keys and another array for the associated values.","pos":[0,189],"source":"A <xref:System.Collections.SortedList> object internally maintains two arrays to store the elements of the list; that is, one array for the keys and another array for the associated values."},{"content":"Each element is a key/value pair that can be accessed as a <ph id=\"ph1\">&lt;xref:System.Collections.DictionaryEntry&gt;</ph> object.","pos":[190,298],"source":" Each element is a key/value pair that can be accessed as a <xref:System.Collections.DictionaryEntry> object."},{"content":"A key cannot be <ph id=\"ph1\">`null`</ph>, but a value can be.","pos":[299,342],"source":" A key cannot be `null`, but a value can be."}]},{"pos":[724,1181],"content":"The capacity of a <xref:System.Collections.SortedList> object is the number of elements the <xref:System.Collections.SortedList> can hold. As elements are added to a <xref:System.Collections.SortedList>, the capacity is automatically increased as required through reallocation. The capacity can be decreased by calling <xref:System.Collections.SortedList.TrimToSize%2A> or by setting the <xref:System.Collections.SortedList.Capacity%2A> property explicitly.","nodes":[{"content":"The capacity of a <xref:System.Collections.SortedList> object is the number of elements the <xref:System.Collections.SortedList> can hold. As elements are added to a <xref:System.Collections.SortedList>, the capacity is automatically increased as required through reallocation. The capacity can be decreased by calling <xref:System.Collections.SortedList.TrimToSize%2A> or by setting the <xref:System.Collections.SortedList.Capacity%2A> property explicitly.","pos":[0,457],"nodes":[{"content":"The capacity of a <ph id=\"ph1\">&lt;xref:System.Collections.SortedList&gt;</ph> object is the number of elements the <ph id=\"ph2\">&lt;xref:System.Collections.SortedList&gt;</ph> can hold.","pos":[0,138],"source":"The capacity of a <xref:System.Collections.SortedList> object is the number of elements the <xref:System.Collections.SortedList> can hold."},{"content":"As elements are added to a <ph id=\"ph1\">&lt;xref:System.Collections.SortedList&gt;</ph>, the capacity is automatically increased as required through reallocation.","pos":[139,277],"source":" As elements are added to a <xref:System.Collections.SortedList>, the capacity is automatically increased as required through reallocation."},{"content":"The capacity can be decreased by calling <ph id=\"ph1\">&lt;xref:System.Collections.SortedList.TrimToSize%2A&gt;</ph> or by setting the <ph id=\"ph2\">&lt;xref:System.Collections.SortedList.Capacity%2A&gt;</ph> property explicitly.","pos":[278,457],"source":" The capacity can be decreased by calling <xref:System.Collections.SortedList.TrimToSize%2A> or by setting the <xref:System.Collections.SortedList.Capacity%2A> property explicitly."}]}]},{"pos":[1188,1431],"content":"For very large <ph id=\"ph1\">&lt;xref:System.Collections.SortedList&gt;</ph> objects, you can increase the maximum capacity to 2 billion elements on a 64-bit system by setting the <ph id=\"ph2\">`enabled`</ph> attribute of the  configuration element to <ph id=\"ph3\">`true`</ph> in the run-time environment.","source":"For very large <xref:System.Collections.SortedList> objects, you can increase the maximum capacity to 2 billion elements on a 64-bit system by setting the `enabled` attribute of the  configuration element to `true` in the run-time environment."},{"pos":[1438,1851],"content":"The elements of a <xref:System.Collections.SortedList> object are sorted by the keys either according to a specific <xref:System.Collections.IComparer> implementation specified when the <xref:System.Collections.SortedList> is created or according to the <xref:System.IComparable> implementation provided by the keys themselves. In either case, a <xref:System.Collections.SortedList> does not allow duplicate keys.","nodes":[{"content":"The elements of a <xref:System.Collections.SortedList> object are sorted by the keys either according to a specific <xref:System.Collections.IComparer> implementation specified when the <xref:System.Collections.SortedList> is created or according to the <xref:System.IComparable> implementation provided by the keys themselves. In either case, a <xref:System.Collections.SortedList> does not allow duplicate keys.","pos":[0,413],"nodes":[{"content":"The elements of a <ph id=\"ph1\">&lt;xref:System.Collections.SortedList&gt;</ph> object are sorted by the keys either according to a specific <ph id=\"ph2\">&lt;xref:System.Collections.IComparer&gt;</ph> implementation specified when the <ph id=\"ph3\">&lt;xref:System.Collections.SortedList&gt;</ph> is created or according to the <ph id=\"ph4\">&lt;xref:System.IComparable&gt;</ph> implementation provided by the keys themselves.","pos":[0,327],"source":"The elements of a <xref:System.Collections.SortedList> object are sorted by the keys either according to a specific <xref:System.Collections.IComparer> implementation specified when the <xref:System.Collections.SortedList> is created or according to the <xref:System.IComparable> implementation provided by the keys themselves."},{"content":"In either case, a <ph id=\"ph1\">&lt;xref:System.Collections.SortedList&gt;</ph> does not allow duplicate keys.","pos":[328,413],"source":" In either case, a <xref:System.Collections.SortedList> does not allow duplicate keys."}]}]},{"pos":[1858,2272],"content":"The index sequence is based on the sort sequence. When an element is added, it is inserted into <xref:System.Collections.SortedList> in the correct sort order, and the indexing adjusts accordingly. When an element is removed, the indexing also adjusts accordingly. Therefore, the index of a specific key/value pair might change as elements are added or removed from the <xref:System.Collections.SortedList> object.","nodes":[{"content":"The index sequence is based on the sort sequence. When an element is added, it is inserted into <xref:System.Collections.SortedList> in the correct sort order, and the indexing adjusts accordingly. When an element is removed, the indexing also adjusts accordingly. Therefore, the index of a specific key/value pair might change as elements are added or removed from the <xref:System.Collections.SortedList> object.","pos":[0,414],"nodes":[{"content":"The index sequence is based on the sort sequence.","pos":[0,49]},{"content":"When an element is added, it is inserted into <ph id=\"ph1\">&lt;xref:System.Collections.SortedList&gt;</ph> in the correct sort order, and the indexing adjusts accordingly.","pos":[50,197],"source":" When an element is added, it is inserted into <xref:System.Collections.SortedList> in the correct sort order, and the indexing adjusts accordingly."},{"content":"When an element is removed, the indexing also adjusts accordingly.","pos":[198,264]},{"content":"Therefore, the index of a specific key/value pair might change as elements are added or removed from the <ph id=\"ph1\">&lt;xref:System.Collections.SortedList&gt;</ph> object.","pos":[265,414],"source":" Therefore, the index of a specific key/value pair might change as elements are added or removed from the <xref:System.Collections.SortedList> object."}]}]},{"pos":[2279,2610],"content":"Operations on a <xref:System.Collections.SortedList> object tend to be slower than operations on a <xref:System.Collections.Hashtable> object because of the sorting. However, the <xref:System.Collections.SortedList> offers more flexibility by allowing access to the values either through the associated keys or through the indexes.","nodes":[{"content":"Operations on a <xref:System.Collections.SortedList> object tend to be slower than operations on a <xref:System.Collections.Hashtable> object because of the sorting. However, the <xref:System.Collections.SortedList> offers more flexibility by allowing access to the values either through the associated keys or through the indexes.","pos":[0,331],"nodes":[{"content":"Operations on a <ph id=\"ph1\">&lt;xref:System.Collections.SortedList&gt;</ph> object tend to be slower than operations on a <ph id=\"ph2\">&lt;xref:System.Collections.Hashtable&gt;</ph> object because of the sorting.","pos":[0,165],"source":"Operations on a <xref:System.Collections.SortedList> object tend to be slower than operations on a <xref:System.Collections.Hashtable> object because of the sorting."},{"content":"However, the <ph id=\"ph1\">&lt;xref:System.Collections.SortedList&gt;</ph> offers more flexibility by allowing access to the values either through the associated keys or through the indexes.","pos":[166,331],"source":" However, the <xref:System.Collections.SortedList> offers more flexibility by allowing access to the values either through the associated keys or through the indexes."}]}]},{"pos":[2617,2728],"content":"Elements in this collection can be accessed using an integer index.  Indexes in this collection are zero-based.","nodes":[{"content":"Elements in this collection can be accessed using an integer index.  Indexes in this collection are zero-based.","pos":[0,111],"nodes":[{"content":"Elements in this collection can be accessed using an integer index.","pos":[0,67]},{"content":"Indexes in this collection are zero-based.","pos":[69,111]}]}]},{"pos":[2735,3116],"content":"The `foreach` statement of the C# language (`for each` in Visual Basic) returns an object of the type of the elements in the collection. Since each element of the <xref:System.Collections.SortedList> object is a key/value pair, the element type is not the type of the key or the type of the value. Rather, the element type is <xref:System.Collections.DictionaryEntry>. For example:","nodes":[{"content":"The <ph id=\"ph1\">`foreach`</ph> statement of the C# language (<ph id=\"ph2\">`for each`</ph> in Visual Basic) returns an object of the type of the elements in the collection.","pos":[0,136],"source":"The `foreach` statement of the C# language (`for each` in Visual Basic) returns an object of the type of the elements in the collection."},{"content":"Since each element of the <ph id=\"ph1\">&lt;xref:System.Collections.SortedList&gt;</ph> object is a key/value pair, the element type is not the type of the key or the type of the value.","pos":[137,297],"source":" Since each element of the <xref:System.Collections.SortedList> object is a key/value pair, the element type is not the type of the key or the type of the value."},{"content":"Rather, the element type is <ph id=\"ph1\">&lt;xref:System.Collections.DictionaryEntry&gt;</ph>.","pos":[298,368],"source":" Rather, the element type is <xref:System.Collections.DictionaryEntry>."},{"content":"For example:","pos":[369,381]}]},{"pos":[3123,3538],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>Classic SortedList Example#2<ept id=\"p2\">](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic SortedList Example/CPP/remarks.cpp#2)</ept><ept id=\"p1\">]</ept> <bpt id=\"p3\">[!code-csharp</bpt><bpt id=\"p4\">[</bpt>Classic SortedList Example#2<ept id=\"p4\">](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic SortedList Example/CS/remarks.cs#2)</ept><ept id=\"p3\">]</ept> <bpt id=\"p5\">[!code-vb</bpt><bpt id=\"p6\">[</bpt>Classic SortedList Example#2<ept id=\"p6\">](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic SortedList Example/VB/remarks.vb#2)</ept><ept id=\"p5\">]</ept>","source":"[!code-cpp[Classic SortedList Example#2](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic SortedList Example/CPP/remarks.cpp#2)]\n [!code-csharp[Classic SortedList Example#2](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic SortedList Example/CS/remarks.cs#2)]\n [!code-vb[Classic SortedList Example#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic SortedList Example/VB/remarks.vb#2)]"},{"pos":[3545,3668],"content":"The <ph id=\"ph1\">`foreach`</ph> statement is a wrapper around the enumerator, which allows only reading from, not writing to, the collection.","source":"The `foreach` statement is a wrapper around the enumerator, which allows only reading from, not writing to, the collection."}],"pos":[2492,6187],"yaml":true,"extradata":"MT"},{"content":"Initializes a new instance of the <xref href=\"System.Collections.SortedList\"></xref> class that is empty, has the default initial capacity, and is sorted according to the <xref href=\"System.IComparable\"></xref> interface implemented by each key added to the <xref href=\"System.Collections.SortedList\"></xref> object.","nodes":[{"pos":[0,316],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Collections.SortedList\"&gt;&lt;/xref&gt;</ph> class that is empty, has the default initial capacity, and is sorted according to the <ph id=\"ph2\">&lt;xref href=\"System.IComparable\"&gt;&lt;/xref&gt;</ph> interface implemented by each key added to the <ph id=\"ph3\">&lt;xref href=\"System.Collections.SortedList\"&gt;&lt;/xref&gt;</ph> object.","source":"Initializes a new instance of the <xref href=\"System.Collections.SortedList\"></xref> class that is empty, has the default initial capacity, and is sorted according to the <xref href=\"System.IComparable\"></xref> interface implemented by each key added to the <xref href=\"System.Collections.SortedList\"></xref> object."}],"pos":[8904,9221],"yaml":true},{"content":"Each key must implement the <xref:System.IComparable> interface to be capable of comparisons with every other key in the <xref:System.Collections.SortedList> object. The elements are sorted according to the <xref:System.IComparable> implementation of each key added to the <xref:System.Collections.SortedList>.  \n  \n The capacity of a <xref:System.Collections.SortedList> object is the number of elements that the <xref:System.Collections.SortedList> can hold. As elements are added to a <xref:System.Collections.SortedList>, the capacity is automatically increased as required by reallocating the internal array.  \n  \n If the size of the collection can be estimated, specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <xref:System.Collections.SortedList> object.  \n  \n This constructor is an O(1) operation.","nodes":[{"pos":[0,310],"content":"Each key must implement the <xref:System.IComparable> interface to be capable of comparisons with every other key in the <xref:System.Collections.SortedList> object. The elements are sorted according to the <xref:System.IComparable> implementation of each key added to the <xref:System.Collections.SortedList>.","nodes":[{"content":"Each key must implement the <xref:System.IComparable> interface to be capable of comparisons with every other key in the <xref:System.Collections.SortedList> object. The elements are sorted according to the <xref:System.IComparable> implementation of each key added to the <xref:System.Collections.SortedList>.","pos":[0,310],"nodes":[{"content":"Each key must implement the <ph id=\"ph1\">&lt;xref:System.IComparable&gt;</ph> interface to be capable of comparisons with every other key in the <ph id=\"ph2\">&lt;xref:System.Collections.SortedList&gt;</ph> object.","pos":[0,165],"source":"Each key must implement the <xref:System.IComparable> interface to be capable of comparisons with every other key in the <xref:System.Collections.SortedList> object."},{"content":"The elements are sorted according to the <ph id=\"ph1\">&lt;xref:System.IComparable&gt;</ph> implementation of each key added to the <ph id=\"ph2\">&lt;xref:System.Collections.SortedList&gt;</ph>.","pos":[166,310],"source":" The elements are sorted according to the <xref:System.IComparable> implementation of each key added to the <xref:System.Collections.SortedList>."}]}]},{"pos":[317,613],"content":"The capacity of a <xref:System.Collections.SortedList> object is the number of elements that the <xref:System.Collections.SortedList> can hold. As elements are added to a <xref:System.Collections.SortedList>, the capacity is automatically increased as required by reallocating the internal array.","nodes":[{"content":"The capacity of a <xref:System.Collections.SortedList> object is the number of elements that the <xref:System.Collections.SortedList> can hold. As elements are added to a <xref:System.Collections.SortedList>, the capacity is automatically increased as required by reallocating the internal array.","pos":[0,296],"nodes":[{"content":"The capacity of a <ph id=\"ph1\">&lt;xref:System.Collections.SortedList&gt;</ph> object is the number of elements that the <ph id=\"ph2\">&lt;xref:System.Collections.SortedList&gt;</ph> can hold.","pos":[0,143],"source":"The capacity of a <xref:System.Collections.SortedList> object is the number of elements that the <xref:System.Collections.SortedList> can hold."},{"content":"As elements are added to a <ph id=\"ph1\">&lt;xref:System.Collections.SortedList&gt;</ph>, the capacity is automatically increased as required by reallocating the internal array.","pos":[144,296],"source":" As elements are added to a <xref:System.Collections.SortedList>, the capacity is automatically increased as required by reallocating the internal array."}]}]},{"pos":[620,836],"content":"If the size of the collection can be estimated, specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <xref:System.Collections.SortedList> object.","nodes":[{"content":"If the size of the collection can be estimated, specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <ph id=\"ph1\">&lt;xref:System.Collections.SortedList&gt;</ph> object.","pos":[0,216],"source":"If the size of the collection can be estimated, specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <xref:System.Collections.SortedList> object."}]},{"pos":[843,881],"content":"This constructor is an O(1) operation.","nodes":[{"content":"This constructor is an O(1) operation.","pos":[0,38]}]}],"pos":[9232,10122],"yaml":true,"extradata":"MT"},{"content":"Initializes a new instance of the <xref href=\"System.Collections.SortedList\"></xref> class that is empty, has the default initial capacity, and is sorted according to the specified <xref href=\"System.Collections.IComparer\"></xref> interface.","nodes":[{"pos":[0,241],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Collections.SortedList\"&gt;&lt;/xref&gt;</ph> class that is empty, has the default initial capacity, and is sorted according to the specified <ph id=\"ph2\">&lt;xref href=\"System.Collections.IComparer\"&gt;&lt;/xref&gt;</ph> interface.","source":"Initializes a new instance of the <xref href=\"System.Collections.SortedList\"></xref> class that is empty, has the default initial capacity, and is sorted according to the specified <xref href=\"System.Collections.IComparer\"></xref> interface."}],"pos":[12255,12497],"yaml":true},{"content":"The elements are sorted according to the specified <xref:System.Collections.IComparer> implementation. If the `comparer` parameter is `null`, the <xref:System.IComparable> implementation of each key is used; therefore, each key must implement the <xref:System.IComparable> interface to be capable of comparisons with every other key in the <xref:System.Collections.SortedList> object.  \n  \n The capacity of a <xref:System.Collections.SortedList> object is the number of elements that the <xref:System.Collections.SortedList> can hold. As elements are added to a <xref:System.Collections.SortedList>, the capacity is automatically increased as required by reallocating the internal array.  \n  \n If the size of the collection can be estimated, specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <xref:System.Collections.SortedList> object.  \n  \n This constructor is an O(1) operation.","nodes":[{"pos":[0,384],"content":"The elements are sorted according to the specified <xref:System.Collections.IComparer> implementation. If the `comparer` parameter is `null`, the <xref:System.IComparable> implementation of each key is used; therefore, each key must implement the <xref:System.IComparable> interface to be capable of comparisons with every other key in the <xref:System.Collections.SortedList> object.","nodes":[{"content":"The elements are sorted according to the specified <ph id=\"ph1\">&lt;xref:System.Collections.IComparer&gt;</ph> implementation.","pos":[0,102],"source":"The elements are sorted according to the specified <xref:System.Collections.IComparer> implementation."},{"content":"If the <ph id=\"ph1\">`comparer`</ph> parameter is <ph id=\"ph2\">`null`</ph>, the <ph id=\"ph3\">&lt;xref:System.IComparable&gt;</ph> implementation of each key is used; therefore, each key must implement the <ph id=\"ph4\">&lt;xref:System.IComparable&gt;</ph> interface to be capable of comparisons with every other key in the <ph id=\"ph5\">&lt;xref:System.Collections.SortedList&gt;</ph> object.","pos":[103,384],"source":" If the `comparer` parameter is `null`, the <xref:System.IComparable> implementation of each key is used; therefore, each key must implement the <xref:System.IComparable> interface to be capable of comparisons with every other key in the <xref:System.Collections.SortedList> object."}]},{"pos":[391,687],"content":"The capacity of a <xref:System.Collections.SortedList> object is the number of elements that the <xref:System.Collections.SortedList> can hold. As elements are added to a <xref:System.Collections.SortedList>, the capacity is automatically increased as required by reallocating the internal array.","nodes":[{"content":"The capacity of a <xref:System.Collections.SortedList> object is the number of elements that the <xref:System.Collections.SortedList> can hold. As elements are added to a <xref:System.Collections.SortedList>, the capacity is automatically increased as required by reallocating the internal array.","pos":[0,296],"nodes":[{"content":"The capacity of a <ph id=\"ph1\">&lt;xref:System.Collections.SortedList&gt;</ph> object is the number of elements that the <ph id=\"ph2\">&lt;xref:System.Collections.SortedList&gt;</ph> can hold.","pos":[0,143],"source":"The capacity of a <xref:System.Collections.SortedList> object is the number of elements that the <xref:System.Collections.SortedList> can hold."},{"content":"As elements are added to a <ph id=\"ph1\">&lt;xref:System.Collections.SortedList&gt;</ph>, the capacity is automatically increased as required by reallocating the internal array.","pos":[144,296],"source":" As elements are added to a <xref:System.Collections.SortedList>, the capacity is automatically increased as required by reallocating the internal array."}]}]},{"pos":[694,910],"content":"If the size of the collection can be estimated, specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <xref:System.Collections.SortedList> object.","nodes":[{"content":"If the size of the collection can be estimated, specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <ph id=\"ph1\">&lt;xref:System.Collections.SortedList&gt;</ph> object.","pos":[0,216],"source":"If the size of the collection can be estimated, specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <xref:System.Collections.SortedList> object."}]},{"pos":[917,955],"content":"This constructor is an O(1) operation.","nodes":[{"content":"This constructor is an O(1) operation.","pos":[0,38]}]}],"pos":[12508,13472],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Collections.IComparer\"></xref> implementation to use when comparing keys.  \n  \n -or-  \n  \n `null` to use the <xref href=\"System.IComparable\"></xref> implementation of each key.","nodes":[{"pos":[0,96],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Collections.IComparer\"&gt;&lt;/xref&gt;</ph> implementation to use when comparing keys.","source":"The <xref href=\"System.Collections.IComparer\"></xref> implementation to use when comparing keys."},{"pos":[103,107],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[114,199],"content":"<ph id=\"ph1\">`null`</ph> to use the <ph id=\"ph2\">&lt;xref href=\"System.IComparable\"&gt;&lt;/xref&gt;</ph> implementation of each key.","source":"`null` to use the <xref href=\"System.IComparable\"></xref> implementation of each key."}],"pos":[14343,14553],"yaml":true},{"content":"Initializes a new instance of the <xref href=\"System.Collections.SortedList\"></xref> class that contains elements copied from the specified dictionary, has the same initial capacity as the number of elements copied, and is sorted according to the <xref href=\"System.IComparable\"></xref> interface implemented by each key.","nodes":[{"pos":[0,321],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Collections.SortedList\"&gt;&lt;/xref&gt;</ph> class that contains elements copied from the specified dictionary, has the same initial capacity as the number of elements copied, and is sorted according to the <ph id=\"ph2\">&lt;xref href=\"System.IComparable\"&gt;&lt;/xref&gt;</ph> interface implemented by each key.","source":"Initializes a new instance of the <xref href=\"System.Collections.SortedList\"></xref> class that contains elements copied from the specified dictionary, has the same initial capacity as the number of elements copied, and is sorted according to the <xref href=\"System.IComparable\"></xref> interface implemented by each key."}],"pos":[15940,16262],"yaml":true},{"content":"Each key must implement the <xref:System.IComparable> interface to be capable of comparisons with every other key in the <xref:System.Collections.SortedList> object. The elements are sorted according to the <xref:System.IComparable> implementation of each key added to the <xref:System.Collections.SortedList>.  \n  \n A <xref:System.Collections.Hashtable> object is an example of an <xref:System.Collections.IDictionary> implementation that can be passed to this constructor. The new <xref:System.Collections.SortedList> object contains a copy of the keys and values stored in the <xref:System.Collections.Hashtable>.  \n  \n The capacity of a <xref:System.Collections.SortedList> object is the number of elements that the <xref:System.Collections.SortedList> can hold. As elements are added to a <xref:System.Collections.SortedList>, the capacity is automatically increased as required by reallocating the internal array.  \n  \n If the size of the collection can be estimated, specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <xref:System.Collections.SortedList> object.  \n  \n This constructor is an O(`n`) operation, where `n` is the number of elements in `d`.","nodes":[{"pos":[0,310],"content":"Each key must implement the <xref:System.IComparable> interface to be capable of comparisons with every other key in the <xref:System.Collections.SortedList> object. The elements are sorted according to the <xref:System.IComparable> implementation of each key added to the <xref:System.Collections.SortedList>.","nodes":[{"content":"Each key must implement the <xref:System.IComparable> interface to be capable of comparisons with every other key in the <xref:System.Collections.SortedList> object. The elements are sorted according to the <xref:System.IComparable> implementation of each key added to the <xref:System.Collections.SortedList>.","pos":[0,310],"nodes":[{"content":"Each key must implement the <ph id=\"ph1\">&lt;xref:System.IComparable&gt;</ph> interface to be capable of comparisons with every other key in the <ph id=\"ph2\">&lt;xref:System.Collections.SortedList&gt;</ph> object.","pos":[0,165],"source":"Each key must implement the <xref:System.IComparable> interface to be capable of comparisons with every other key in the <xref:System.Collections.SortedList> object."},{"content":"The elements are sorted according to the <ph id=\"ph1\">&lt;xref:System.IComparable&gt;</ph> implementation of each key added to the <ph id=\"ph2\">&lt;xref:System.Collections.SortedList&gt;</ph>.","pos":[166,310],"source":" The elements are sorted according to the <xref:System.IComparable> implementation of each key added to the <xref:System.Collections.SortedList>."}]}]},{"pos":[317,616],"content":"A <xref:System.Collections.Hashtable> object is an example of an <xref:System.Collections.IDictionary> implementation that can be passed to this constructor. The new <xref:System.Collections.SortedList> object contains a copy of the keys and values stored in the <xref:System.Collections.Hashtable>.","nodes":[{"content":"A <xref:System.Collections.Hashtable> object is an example of an <xref:System.Collections.IDictionary> implementation that can be passed to this constructor. The new <xref:System.Collections.SortedList> object contains a copy of the keys and values stored in the <xref:System.Collections.Hashtable>.","pos":[0,299],"nodes":[{"content":"A <ph id=\"ph1\">&lt;xref:System.Collections.Hashtable&gt;</ph> object is an example of an <ph id=\"ph2\">&lt;xref:System.Collections.IDictionary&gt;</ph> implementation that can be passed to this constructor.","pos":[0,157],"source":"A <xref:System.Collections.Hashtable> object is an example of an <xref:System.Collections.IDictionary> implementation that can be passed to this constructor."},{"content":"The new <ph id=\"ph1\">&lt;xref:System.Collections.SortedList&gt;</ph> object contains a copy of the keys and values stored in the <ph id=\"ph2\">&lt;xref:System.Collections.Hashtable&gt;</ph>.","pos":[158,299],"source":" The new <xref:System.Collections.SortedList> object contains a copy of the keys and values stored in the <xref:System.Collections.Hashtable>."}]}]},{"pos":[623,919],"content":"The capacity of a <xref:System.Collections.SortedList> object is the number of elements that the <xref:System.Collections.SortedList> can hold. As elements are added to a <xref:System.Collections.SortedList>, the capacity is automatically increased as required by reallocating the internal array.","nodes":[{"content":"The capacity of a <xref:System.Collections.SortedList> object is the number of elements that the <xref:System.Collections.SortedList> can hold. As elements are added to a <xref:System.Collections.SortedList>, the capacity is automatically increased as required by reallocating the internal array.","pos":[0,296],"nodes":[{"content":"The capacity of a <ph id=\"ph1\">&lt;xref:System.Collections.SortedList&gt;</ph> object is the number of elements that the <ph id=\"ph2\">&lt;xref:System.Collections.SortedList&gt;</ph> can hold.","pos":[0,143],"source":"The capacity of a <xref:System.Collections.SortedList> object is the number of elements that the <xref:System.Collections.SortedList> can hold."},{"content":"As elements are added to a <ph id=\"ph1\">&lt;xref:System.Collections.SortedList&gt;</ph>, the capacity is automatically increased as required by reallocating the internal array.","pos":[144,296],"source":" As elements are added to a <xref:System.Collections.SortedList>, the capacity is automatically increased as required by reallocating the internal array."}]}]},{"pos":[926,1142],"content":"If the size of the collection can be estimated, specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <xref:System.Collections.SortedList> object.","nodes":[{"content":"If the size of the collection can be estimated, specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <ph id=\"ph1\">&lt;xref:System.Collections.SortedList&gt;</ph> object.","pos":[0,216],"source":"If the size of the collection can be estimated, specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <xref:System.Collections.SortedList> object."}]},{"pos":[1149,1233],"content":"This constructor is an O(<ph id=\"ph1\">`n`</ph>) operation, where <ph id=\"ph2\">`n`</ph> is the number of elements in <ph id=\"ph3\">`d`</ph>.","source":"This constructor is an O(`n`) operation, where `n` is the number of elements in `d`."}],"pos":[16273,17517],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Collections.IDictionary\"></xref> implementation to copy to a new <xref href=\"System.Collections.SortedList\"></xref> object.","nodes":[{"pos":[0,146],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Collections.IDictionary\"&gt;&lt;/xref&gt;</ph> implementation to copy to a new <ph id=\"ph2\">&lt;xref href=\"System.Collections.SortedList\"&gt;&lt;/xref&gt;</ph> object.","source":"The <xref href=\"System.Collections.IDictionary\"></xref> implementation to copy to a new <xref href=\"System.Collections.SortedList\"></xref> object."}],"pos":[18468,18615],"yaml":true},{"content":"<code>d</code> is `null`.","nodes":[{"pos":[0,25],"content":"<ph id=\"ph1\">&lt;code&gt;d&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>d</code> is `null`."}],"pos":[18780,18806],"yaml":true},{"content":"One or more elements in <code>d</code> do not implement the <xref href=\"System.IComparable\"></xref> interface.","nodes":[{"pos":[0,110],"content":"One or more elements in <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">d</ph><ept id=\"p1\">&lt;/code&gt;</ept> do not implement the <ph id=\"ph2\">&lt;xref href=\"System.IComparable\"&gt;&lt;/xref&gt;</ph> interface.","source":"One or more elements in <code>d</code> do not implement the <xref href=\"System.IComparable\"></xref> interface."}],"pos":[18906,19017],"yaml":true},{"content":"Initializes a new instance of the <xref href=\"System.Collections.SortedList\"></xref> class that is empty, has the specified initial capacity, and is sorted according to the <xref href=\"System.IComparable\"></xref> interface implemented by each key added to the <xref href=\"System.Collections.SortedList\"></xref> object.","nodes":[{"pos":[0,318],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Collections.SortedList\"&gt;&lt;/xref&gt;</ph> class that is empty, has the specified initial capacity, and is sorted according to the <ph id=\"ph2\">&lt;xref href=\"System.IComparable\"&gt;&lt;/xref&gt;</ph> interface implemented by each key added to the <ph id=\"ph3\">&lt;xref href=\"System.Collections.SortedList\"&gt;&lt;/xref&gt;</ph> object.","source":"Initializes a new instance of the <xref href=\"System.Collections.SortedList\"></xref> class that is empty, has the specified initial capacity, and is sorted according to the <xref href=\"System.IComparable\"></xref> interface implemented by each key added to the <xref href=\"System.Collections.SortedList\"></xref> object."}],"pos":[20266,20585],"yaml":true},{"content":"Each key must implement the <xref:System.IComparable> interface to be capable of comparisons with every other key in the <xref:System.Collections.SortedList> object. The elements are sorted according to the <xref:System.IComparable> implementation of each key added to the <xref:System.Collections.SortedList>.  \n  \n The capacity of a <xref:System.Collections.SortedList> object is the number of elements that the <xref:System.Collections.SortedList> can hold. As elements are added to a <xref:System.Collections.SortedList>, the capacity is automatically increased as required by reallocating the internal array.  \n  \n If the size of the collection can be estimated, specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <xref:System.Collections.SortedList> object.  \n  \n This constructor is an O(`n`) operation, where `n` is `initialCapacity`.","nodes":[{"pos":[0,310],"content":"Each key must implement the <xref:System.IComparable> interface to be capable of comparisons with every other key in the <xref:System.Collections.SortedList> object. The elements are sorted according to the <xref:System.IComparable> implementation of each key added to the <xref:System.Collections.SortedList>.","nodes":[{"content":"Each key must implement the <xref:System.IComparable> interface to be capable of comparisons with every other key in the <xref:System.Collections.SortedList> object. The elements are sorted according to the <xref:System.IComparable> implementation of each key added to the <xref:System.Collections.SortedList>.","pos":[0,310],"nodes":[{"content":"Each key must implement the <ph id=\"ph1\">&lt;xref:System.IComparable&gt;</ph> interface to be capable of comparisons with every other key in the <ph id=\"ph2\">&lt;xref:System.Collections.SortedList&gt;</ph> object.","pos":[0,165],"source":"Each key must implement the <xref:System.IComparable> interface to be capable of comparisons with every other key in the <xref:System.Collections.SortedList> object."},{"content":"The elements are sorted according to the <ph id=\"ph1\">&lt;xref:System.IComparable&gt;</ph> implementation of each key added to the <ph id=\"ph2\">&lt;xref:System.Collections.SortedList&gt;</ph>.","pos":[166,310],"source":" The elements are sorted according to the <xref:System.IComparable> implementation of each key added to the <xref:System.Collections.SortedList>."}]}]},{"pos":[317,613],"content":"The capacity of a <xref:System.Collections.SortedList> object is the number of elements that the <xref:System.Collections.SortedList> can hold. As elements are added to a <xref:System.Collections.SortedList>, the capacity is automatically increased as required by reallocating the internal array.","nodes":[{"content":"The capacity of a <xref:System.Collections.SortedList> object is the number of elements that the <xref:System.Collections.SortedList> can hold. As elements are added to a <xref:System.Collections.SortedList>, the capacity is automatically increased as required by reallocating the internal array.","pos":[0,296],"nodes":[{"content":"The capacity of a <ph id=\"ph1\">&lt;xref:System.Collections.SortedList&gt;</ph> object is the number of elements that the <ph id=\"ph2\">&lt;xref:System.Collections.SortedList&gt;</ph> can hold.","pos":[0,143],"source":"The capacity of a <xref:System.Collections.SortedList> object is the number of elements that the <xref:System.Collections.SortedList> can hold."},{"content":"As elements are added to a <ph id=\"ph1\">&lt;xref:System.Collections.SortedList&gt;</ph>, the capacity is automatically increased as required by reallocating the internal array.","pos":[144,296],"source":" As elements are added to a <xref:System.Collections.SortedList>, the capacity is automatically increased as required by reallocating the internal array."}]}]},{"pos":[620,836],"content":"If the size of the collection can be estimated, specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <xref:System.Collections.SortedList> object.","nodes":[{"content":"If the size of the collection can be estimated, specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <ph id=\"ph1\">&lt;xref:System.Collections.SortedList&gt;</ph> object.","pos":[0,216],"source":"If the size of the collection can be estimated, specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <xref:System.Collections.SortedList> object."}]},{"pos":[843,915],"content":"This constructor is an O(<ph id=\"ph1\">`n`</ph>) operation, where <ph id=\"ph2\">`n`</ph> is <ph id=\"ph3\">`initialCapacity`</ph>.","source":"This constructor is an O(`n`) operation, where `n` is `initialCapacity`."}],"pos":[20596,21520],"yaml":true,"extradata":"MT"},{"content":"The initial number of elements that the <xref href=\"System.Collections.SortedList\"></xref> object can contain.","nodes":[{"pos":[0,110],"content":"The initial number of elements that the <ph id=\"ph1\">&lt;xref href=\"System.Collections.SortedList\"&gt;&lt;/xref&gt;</ph> object can contain.","source":"The initial number of elements that the <xref href=\"System.Collections.SortedList\"></xref> object can contain."}],"pos":[22391,22502],"yaml":true},{"content":"<code>initialCapacity</code> is less than zero.","nodes":[{"pos":[0,47],"content":"<ph id=\"ph1\">&lt;code&gt;initialCapacity&lt;/code&gt;</ph> is less than zero.","source":"<code>initialCapacity</code> is less than zero."}],"pos":[22679,22727],"yaml":true},{"content":"There is not enough available memory to create a <xref href=\"System.Collections.SortedList\"></xref> object with the specified <code>initialCapacity</code>.","nodes":[{"pos":[0,155],"content":"There is not enough available memory to create a <ph id=\"ph1\">&lt;xref href=\"System.Collections.SortedList\"&gt;&lt;/xref&gt;</ph> object with the specified <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">initialCapacity</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"There is not enough available memory to create a <xref href=\"System.Collections.SortedList\"></xref> object with the specified <code>initialCapacity</code>."}],"pos":[22827,22983],"yaml":true},{"content":"Initializes a new instance of the <xref href=\"System.Collections.SortedList\"></xref> class that is empty, has the specified initial capacity, and is sorted according to the specified <xref href=\"System.Collections.IComparer\"></xref> interface.","nodes":[{"pos":[0,243],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Collections.SortedList\"&gt;&lt;/xref&gt;</ph> class that is empty, has the specified initial capacity, and is sorted according to the specified <ph id=\"ph2\">&lt;xref href=\"System.Collections.IComparer\"&gt;&lt;/xref&gt;</ph> interface.","source":"Initializes a new instance of the <xref href=\"System.Collections.SortedList\"></xref> class that is empty, has the specified initial capacity, and is sorted according to the specified <xref href=\"System.Collections.IComparer\"></xref> interface."}],"pos":[24352,24596],"yaml":true},{"content":"The elements are sorted according to the specified <xref:System.Collections.IComparer> implementation. If the `comparer` parameter is `null`, the <xref:System.IComparable> implementation of each key is used; therefore, each key must implement the <xref:System.IComparable> interface to be capable of comparisons with every other key in the <xref:System.Collections.SortedList> object.  \n  \n The capacity of a <xref:System.Collections.SortedList> object is the number of elements that the <xref:System.Collections.SortedList> can hold. As elements are added to a <xref:System.Collections.SortedList>, the capacity is automatically increased as required by reallocating the internal array.  \n  \n If the size of the collection can be estimated, specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <xref:System.Collections.SortedList> object.  \n  \n This constructor is an O(`n`) operation, where `n` is `capacity`.","nodes":[{"pos":[0,384],"content":"The elements are sorted according to the specified <xref:System.Collections.IComparer> implementation. If the `comparer` parameter is `null`, the <xref:System.IComparable> implementation of each key is used; therefore, each key must implement the <xref:System.IComparable> interface to be capable of comparisons with every other key in the <xref:System.Collections.SortedList> object.","nodes":[{"content":"The elements are sorted according to the specified <ph id=\"ph1\">&lt;xref:System.Collections.IComparer&gt;</ph> implementation.","pos":[0,102],"source":"The elements are sorted according to the specified <xref:System.Collections.IComparer> implementation."},{"content":"If the <ph id=\"ph1\">`comparer`</ph> parameter is <ph id=\"ph2\">`null`</ph>, the <ph id=\"ph3\">&lt;xref:System.IComparable&gt;</ph> implementation of each key is used; therefore, each key must implement the <ph id=\"ph4\">&lt;xref:System.IComparable&gt;</ph> interface to be capable of comparisons with every other key in the <ph id=\"ph5\">&lt;xref:System.Collections.SortedList&gt;</ph> object.","pos":[103,384],"source":" If the `comparer` parameter is `null`, the <xref:System.IComparable> implementation of each key is used; therefore, each key must implement the <xref:System.IComparable> interface to be capable of comparisons with every other key in the <xref:System.Collections.SortedList> object."}]},{"pos":[391,687],"content":"The capacity of a <xref:System.Collections.SortedList> object is the number of elements that the <xref:System.Collections.SortedList> can hold. As elements are added to a <xref:System.Collections.SortedList>, the capacity is automatically increased as required by reallocating the internal array.","nodes":[{"content":"The capacity of a <xref:System.Collections.SortedList> object is the number of elements that the <xref:System.Collections.SortedList> can hold. As elements are added to a <xref:System.Collections.SortedList>, the capacity is automatically increased as required by reallocating the internal array.","pos":[0,296],"nodes":[{"content":"The capacity of a <ph id=\"ph1\">&lt;xref:System.Collections.SortedList&gt;</ph> object is the number of elements that the <ph id=\"ph2\">&lt;xref:System.Collections.SortedList&gt;</ph> can hold.","pos":[0,143],"source":"The capacity of a <xref:System.Collections.SortedList> object is the number of elements that the <xref:System.Collections.SortedList> can hold."},{"content":"As elements are added to a <ph id=\"ph1\">&lt;xref:System.Collections.SortedList&gt;</ph>, the capacity is automatically increased as required by reallocating the internal array.","pos":[144,296],"source":" As elements are added to a <xref:System.Collections.SortedList>, the capacity is automatically increased as required by reallocating the internal array."}]}]},{"pos":[694,910],"content":"If the size of the collection can be estimated, specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <xref:System.Collections.SortedList> object.","nodes":[{"content":"If the size of the collection can be estimated, specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <ph id=\"ph1\">&lt;xref:System.Collections.SortedList&gt;</ph> object.","pos":[0,216],"source":"If the size of the collection can be estimated, specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <xref:System.Collections.SortedList> object."}]},{"pos":[917,982],"content":"This constructor is an O(<ph id=\"ph1\">`n`</ph>) operation, where <ph id=\"ph2\">`n`</ph> is <ph id=\"ph3\">`capacity`</ph>.","source":"This constructor is an O(`n`) operation, where `n` is `capacity`."}],"pos":[24607,25598],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Collections.IComparer\"></xref> implementation to use when comparing keys.  \n  \n -or-  \n  \n `null` to use the <xref href=\"System.IComparable\"></xref> implementation of each key.","nodes":[{"pos":[0,96],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Collections.IComparer\"&gt;&lt;/xref&gt;</ph> implementation to use when comparing keys.","source":"The <xref href=\"System.Collections.IComparer\"></xref> implementation to use when comparing keys."},{"pos":[103,107],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[114,199],"content":"<ph id=\"ph1\">`null`</ph> to use the <ph id=\"ph2\">&lt;xref href=\"System.IComparable\"&gt;&lt;/xref&gt;</ph> implementation of each key.","source":"`null` to use the <xref href=\"System.IComparable\"></xref> implementation of each key."}],"pos":[26510,26720],"yaml":true},{"content":"The initial number of elements that the <xref href=\"System.Collections.SortedList\"></xref> object can contain.","nodes":[{"pos":[0,110],"content":"The initial number of elements that the <ph id=\"ph1\">&lt;xref href=\"System.Collections.SortedList\"&gt;&lt;/xref&gt;</ph> object can contain.","source":"The initial number of elements that the <xref href=\"System.Collections.SortedList\"></xref> object can contain."}],"pos":[26783,26894],"yaml":true},{"content":"<code>capacity</code> is less than zero.","nodes":[{"pos":[0,40],"content":"<ph id=\"ph1\">&lt;code&gt;capacity&lt;/code&gt;</ph> is less than zero.","source":"<code>capacity</code> is less than zero."}],"pos":[27071,27112],"yaml":true},{"content":"There is not enough available memory to create a <xref href=\"System.Collections.SortedList\"></xref> object with the specified <code>capacity</code>.","nodes":[{"pos":[0,148],"content":"There is not enough available memory to create a <ph id=\"ph1\">&lt;xref href=\"System.Collections.SortedList\"&gt;&lt;/xref&gt;</ph> object with the specified <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">capacity</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"There is not enough available memory to create a <xref href=\"System.Collections.SortedList\"></xref> object with the specified <code>capacity</code>."}],"pos":[27212,27361],"yaml":true},{"content":"Initializes a new instance of the <xref href=\"System.Collections.SortedList\"></xref> class that contains elements copied from the specified dictionary, has the same initial capacity as the number of elements copied, and is sorted according to the specified <xref href=\"System.Collections.IComparer\"></xref> interface.","nodes":[{"pos":[0,317],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Collections.SortedList\"&gt;&lt;/xref&gt;</ph> class that contains elements copied from the specified dictionary, has the same initial capacity as the number of elements copied, and is sorted according to the specified <ph id=\"ph2\">&lt;xref href=\"System.Collections.IComparer\"&gt;&lt;/xref&gt;</ph> interface.","source":"Initializes a new instance of the <xref href=\"System.Collections.SortedList\"></xref> class that contains elements copied from the specified dictionary, has the same initial capacity as the number of elements copied, and is sorted according to the specified <xref href=\"System.Collections.IComparer\"></xref> interface."}],"pos":[28802,29120],"yaml":true},{"content":"The elements are sorted according to the specified <xref:System.Collections.IComparer> implementation. If the `comparer` parameter is `null`, the <xref:System.IComparable> implementation of each key is used; therefore, each key must implement the <xref:System.IComparable> interface to be capable of comparisons with every other key in the <xref:System.Collections.SortedList> object.  \n  \n A <xref:System.Collections.Hashtable> object is an example of an <xref:System.Collections.IDictionary> implementation that can be passed to this constructor. The new <xref:System.Collections.SortedList> object contains a copy of the keys and values stored in the <xref:System.Collections.Hashtable>.  \n  \n The capacity of a <xref:System.Collections.SortedList> object is the number of elements that the <xref:System.Collections.SortedList> can hold. As elements are added to a <xref:System.Collections.SortedList>, the capacity is automatically increased as required by reallocating the internal array.  \n  \n If the size of the collection can be estimated, specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <xref:System.Collections.SortedList> object.  \n  \n This constructor is an O(`n`) operation, where `n` is the number of elements in `d`.","nodes":[{"pos":[0,384],"content":"The elements are sorted according to the specified <xref:System.Collections.IComparer> implementation. If the `comparer` parameter is `null`, the <xref:System.IComparable> implementation of each key is used; therefore, each key must implement the <xref:System.IComparable> interface to be capable of comparisons with every other key in the <xref:System.Collections.SortedList> object.","nodes":[{"content":"The elements are sorted according to the specified <ph id=\"ph1\">&lt;xref:System.Collections.IComparer&gt;</ph> implementation.","pos":[0,102],"source":"The elements are sorted according to the specified <xref:System.Collections.IComparer> implementation."},{"content":"If the <ph id=\"ph1\">`comparer`</ph> parameter is <ph id=\"ph2\">`null`</ph>, the <ph id=\"ph3\">&lt;xref:System.IComparable&gt;</ph> implementation of each key is used; therefore, each key must implement the <ph id=\"ph4\">&lt;xref:System.IComparable&gt;</ph> interface to be capable of comparisons with every other key in the <ph id=\"ph5\">&lt;xref:System.Collections.SortedList&gt;</ph> object.","pos":[103,384],"source":" If the `comparer` parameter is `null`, the <xref:System.IComparable> implementation of each key is used; therefore, each key must implement the <xref:System.IComparable> interface to be capable of comparisons with every other key in the <xref:System.Collections.SortedList> object."}]},{"pos":[391,690],"content":"A <xref:System.Collections.Hashtable> object is an example of an <xref:System.Collections.IDictionary> implementation that can be passed to this constructor. The new <xref:System.Collections.SortedList> object contains a copy of the keys and values stored in the <xref:System.Collections.Hashtable>.","nodes":[{"content":"A <xref:System.Collections.Hashtable> object is an example of an <xref:System.Collections.IDictionary> implementation that can be passed to this constructor. The new <xref:System.Collections.SortedList> object contains a copy of the keys and values stored in the <xref:System.Collections.Hashtable>.","pos":[0,299],"nodes":[{"content":"A <ph id=\"ph1\">&lt;xref:System.Collections.Hashtable&gt;</ph> object is an example of an <ph id=\"ph2\">&lt;xref:System.Collections.IDictionary&gt;</ph> implementation that can be passed to this constructor.","pos":[0,157],"source":"A <xref:System.Collections.Hashtable> object is an example of an <xref:System.Collections.IDictionary> implementation that can be passed to this constructor."},{"content":"The new <ph id=\"ph1\">&lt;xref:System.Collections.SortedList&gt;</ph> object contains a copy of the keys and values stored in the <ph id=\"ph2\">&lt;xref:System.Collections.Hashtable&gt;</ph>.","pos":[158,299],"source":" The new <xref:System.Collections.SortedList> object contains a copy of the keys and values stored in the <xref:System.Collections.Hashtable>."}]}]},{"pos":[697,993],"content":"The capacity of a <xref:System.Collections.SortedList> object is the number of elements that the <xref:System.Collections.SortedList> can hold. As elements are added to a <xref:System.Collections.SortedList>, the capacity is automatically increased as required by reallocating the internal array.","nodes":[{"content":"The capacity of a <xref:System.Collections.SortedList> object is the number of elements that the <xref:System.Collections.SortedList> can hold. As elements are added to a <xref:System.Collections.SortedList>, the capacity is automatically increased as required by reallocating the internal array.","pos":[0,296],"nodes":[{"content":"The capacity of a <ph id=\"ph1\">&lt;xref:System.Collections.SortedList&gt;</ph> object is the number of elements that the <ph id=\"ph2\">&lt;xref:System.Collections.SortedList&gt;</ph> can hold.","pos":[0,143],"source":"The capacity of a <xref:System.Collections.SortedList> object is the number of elements that the <xref:System.Collections.SortedList> can hold."},{"content":"As elements are added to a <ph id=\"ph1\">&lt;xref:System.Collections.SortedList&gt;</ph>, the capacity is automatically increased as required by reallocating the internal array.","pos":[144,296],"source":" As elements are added to a <xref:System.Collections.SortedList>, the capacity is automatically increased as required by reallocating the internal array."}]}]},{"pos":[1000,1216],"content":"If the size of the collection can be estimated, specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <xref:System.Collections.SortedList> object.","nodes":[{"content":"If the size of the collection can be estimated, specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <ph id=\"ph1\">&lt;xref:System.Collections.SortedList&gt;</ph> object.","pos":[0,216],"source":"If the size of the collection can be estimated, specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <xref:System.Collections.SortedList> object."}]},{"pos":[1223,1307],"content":"This constructor is an O(<ph id=\"ph1\">`n`</ph>) operation, where <ph id=\"ph2\">`n`</ph> is the number of elements in <ph id=\"ph3\">`d`</ph>.","source":"This constructor is an O(`n`) operation, where `n` is the number of elements in `d`."}],"pos":[29131,30449],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Collections.IDictionary\"></xref> implementation to copy to a new <xref href=\"System.Collections.SortedList\"></xref> object.","nodes":[{"pos":[0,146],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Collections.IDictionary\"&gt;&lt;/xref&gt;</ph> implementation to copy to a new <ph id=\"ph2\">&lt;xref href=\"System.Collections.SortedList\"&gt;&lt;/xref&gt;</ph> object.","source":"The <xref href=\"System.Collections.IDictionary\"></xref> implementation to copy to a new <xref href=\"System.Collections.SortedList\"></xref> object."}],"pos":[31439,31586],"yaml":true},{"content":"The <xref href=\"System.Collections.IComparer\"></xref> implementation to use when comparing keys.  \n  \n -or-  \n  \n `null` to use the <xref href=\"System.IComparable\"></xref> implementation of each key.","nodes":[{"pos":[0,96],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Collections.IComparer\"&gt;&lt;/xref&gt;</ph> implementation to use when comparing keys.","source":"The <xref href=\"System.Collections.IComparer\"></xref> implementation to use when comparing keys."},{"pos":[103,107],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[114,199],"content":"<ph id=\"ph1\">`null`</ph> to use the <ph id=\"ph2\">&lt;xref href=\"System.IComparable\"&gt;&lt;/xref&gt;</ph> implementation of each key.","source":"`null` to use the <xref href=\"System.IComparable\"></xref> implementation of each key."}],"pos":[31665,31875],"yaml":true},{"content":"<code>d</code> is `null`.","nodes":[{"pos":[0,25],"content":"<ph id=\"ph1\">&lt;code&gt;d&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>d</code> is `null`."}],"pos":[32040,32066],"yaml":true},{"content":"<code>comparer</code> is `null`, and one or more elements in <code>d</code> do not implement the <xref href=\"System.IComparable\"></xref> interface.","nodes":[{"pos":[0,147],"content":"<ph id=\"ph1\">&lt;code&gt;comparer&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>, and one or more elements in <ph id=\"ph3\">&lt;code&gt;d&lt;/code&gt;</ph> do not implement the <ph id=\"ph4\">&lt;xref href=\"System.IComparable\"&gt;&lt;/xref&gt;</ph> interface.","source":"<code>comparer</code> is `null`, and one or more elements in <code>d</code> do not implement the <xref href=\"System.IComparable\"></xref> interface."}],"pos":[32166,32314],"yaml":true},{"content":"Adds an element with the specified key and value to a <xref href=\"System.Collections.SortedList\"></xref> object.","nodes":[{"pos":[0,112],"content":"Adds an element with the specified key and value to a <ph id=\"ph1\">&lt;xref href=\"System.Collections.SortedList\"&gt;&lt;/xref&gt;</ph> object.","source":"Adds an element with the specified key and value to a <xref href=\"System.Collections.SortedList\"></xref> object."}],"pos":[33601,33714],"yaml":true},{"content":"The insertion point is determined based on the comparer selected, either explicitly or by default, when the <xref:System.Collections.SortedList> object was created.  \n  \n If <xref:System.Collections.SortedList.Count%2A> already equals <xref:System.Collections.SortedList.Capacity%2A>, the capacity of the <xref:System.Collections.SortedList> object is increased by automatically reallocating the internal array, and the existing elements are copied to the new array before the new element is added.  \n  \n You can also use the <xref:System.Collections.SortedList.Item%2A> property to add new elements by setting the value of a key that does not exist in the <xref:System.Collections.SortedList> object (for example, `myCollection[\"myNonexistentKey\"] = myValue`). However, if the specified key already exists in the <xref:System.Collections.SortedList>, setting the <xref:System.Collections.SortedList.Item%2A> property overwrites the old value. In contrast, the <xref:System.Collections.SortedList.Add%2A> method does not modify existing elements.  \n  \n The elements of a <xref:System.Collections.SortedList> object are sorted by the keys either according to a specific <xref:System.Collections.IComparer> implementation specified when the <xref:System.Collections.SortedList> is created or according to the <xref:System.IComparable> implementation provided by the keys themselves.  \n  \n A key cannot be `null`, but a value can be.  \n  \n This method is an O(`n`) operation for unsorted data, where `n` is <xref:System.Collections.SortedList.Count%2A>. It is an O(log `n`) operation if the new element is added at the end of the list. If insertion causes a resize, the operation is O(`n`).","nodes":[{"pos":[0,164],"content":"The insertion point is determined based on the comparer selected, either explicitly or by default, when the <xref:System.Collections.SortedList> object was created.","nodes":[{"content":"The insertion point is determined based on the comparer selected, either explicitly or by default, when the <ph id=\"ph1\">&lt;xref:System.Collections.SortedList&gt;</ph> object was created.","pos":[0,164],"source":"The insertion point is determined based on the comparer selected, either explicitly or by default, when the <xref:System.Collections.SortedList> object was created."}]},{"pos":[171,498],"content":"If <xref:System.Collections.SortedList.Count%2A> already equals <xref:System.Collections.SortedList.Capacity%2A>, the capacity of the <xref:System.Collections.SortedList> object is increased by automatically reallocating the internal array, and the existing elements are copied to the new array before the new element is added.","nodes":[{"content":"If <ph id=\"ph1\">&lt;xref:System.Collections.SortedList.Count%2A&gt;</ph> already equals <ph id=\"ph2\">&lt;xref:System.Collections.SortedList.Capacity%2A&gt;</ph>, the capacity of the <ph id=\"ph3\">&lt;xref:System.Collections.SortedList&gt;</ph> object is increased by automatically reallocating the internal array, and the existing elements are copied to the new array before the new element is added.","pos":[0,327],"source":"If <xref:System.Collections.SortedList.Count%2A> already equals <xref:System.Collections.SortedList.Capacity%2A>, the capacity of the <xref:System.Collections.SortedList> object is increased by automatically reallocating the internal array, and the existing elements are copied to the new array before the new element is added."}]},{"pos":[505,1046],"content":"You can also use the <xref:System.Collections.SortedList.Item%2A> property to add new elements by setting the value of a key that does not exist in the <xref:System.Collections.SortedList> object (for example, `myCollection[\"myNonexistentKey\"] = myValue`). However, if the specified key already exists in the <xref:System.Collections.SortedList>, setting the <xref:System.Collections.SortedList.Item%2A> property overwrites the old value. In contrast, the <xref:System.Collections.SortedList.Add%2A> method does not modify existing elements.","nodes":[{"content":"You can also use the <ph id=\"ph1\">&lt;xref:System.Collections.SortedList.Item%2A&gt;</ph> property to add new elements by setting the value of a key that does not exist in the <ph id=\"ph2\">&lt;xref:System.Collections.SortedList&gt;</ph> object (for example, <ph id=\"ph3\">`myCollection[\"myNonexistentKey\"] = myValue`</ph>).","pos":[0,256],"source":"You can also use the <xref:System.Collections.SortedList.Item%2A> property to add new elements by setting the value of a key that does not exist in the <xref:System.Collections.SortedList> object (for example, `myCollection[\"myNonexistentKey\"] = myValue`)."},{"content":"However, if the specified key already exists in the <ph id=\"ph1\">&lt;xref:System.Collections.SortedList&gt;</ph>, setting the <ph id=\"ph2\">&lt;xref:System.Collections.SortedList.Item%2A&gt;</ph> property overwrites the old value.","pos":[257,438],"source":" However, if the specified key already exists in the <xref:System.Collections.SortedList>, setting the <xref:System.Collections.SortedList.Item%2A> property overwrites the old value."},{"content":"In contrast, the <ph id=\"ph1\">&lt;xref:System.Collections.SortedList.Add%2A&gt;</ph> method does not modify existing elements.","pos":[439,541],"source":" In contrast, the <xref:System.Collections.SortedList.Add%2A> method does not modify existing elements."}]},{"pos":[1053,1380],"content":"The elements of a <xref:System.Collections.SortedList> object are sorted by the keys either according to a specific <xref:System.Collections.IComparer> implementation specified when the <xref:System.Collections.SortedList> is created or according to the <xref:System.IComparable> implementation provided by the keys themselves.","nodes":[{"content":"The elements of a <ph id=\"ph1\">&lt;xref:System.Collections.SortedList&gt;</ph> object are sorted by the keys either according to a specific <ph id=\"ph2\">&lt;xref:System.Collections.IComparer&gt;</ph> implementation specified when the <ph id=\"ph3\">&lt;xref:System.Collections.SortedList&gt;</ph> is created or according to the <ph id=\"ph4\">&lt;xref:System.IComparable&gt;</ph> implementation provided by the keys themselves.","pos":[0,327],"source":"The elements of a <xref:System.Collections.SortedList> object are sorted by the keys either according to a specific <xref:System.Collections.IComparer> implementation specified when the <xref:System.Collections.SortedList> is created or according to the <xref:System.IComparable> implementation provided by the keys themselves."}]},{"pos":[1387,1430],"content":"A key cannot be <ph id=\"ph1\">`null`</ph>, but a value can be.","source":"A key cannot be `null`, but a value can be."},{"pos":[1437,1687],"content":"This method is an O(`n`) operation for unsorted data, where `n` is <xref:System.Collections.SortedList.Count%2A>. It is an O(log `n`) operation if the new element is added at the end of the list. If insertion causes a resize, the operation is O(`n`).","nodes":[{"content":"This method is an O(<ph id=\"ph1\">`n`</ph>) operation for unsorted data, where <ph id=\"ph2\">`n`</ph> is <ph id=\"ph3\">&lt;xref:System.Collections.SortedList.Count%2A&gt;</ph>.","pos":[0,113],"source":"This method is an O(`n`) operation for unsorted data, where `n` is <xref:System.Collections.SortedList.Count%2A>."},{"content":"It is an O(log <ph id=\"ph1\">`n`</ph>) operation if the new element is added at the end of the list.","pos":[114,195],"source":" It is an O(log `n`) operation if the new element is added at the end of the list."},{"content":"If insertion causes a resize, the operation is O(<ph id=\"ph1\">`n`</ph>).","pos":[196,250],"source":" If insertion causes a resize, the operation is O(`n`)."}]}],"pos":[33725,35427],"yaml":true,"extradata":"MT"},{"content":"The key of the element to add.","nodes":[{"pos":[0,30],"content":"The key of the element to add.","nodes":[{"content":"The key of the element to add.","pos":[0,30]}]}],"pos":[36144,36175],"yaml":true},{"content":"The value of the element to add. The value can be `null`.","nodes":[{"pos":[0,57],"content":"The value of the element to add. The value can be `null`.","nodes":[{"content":"The value of the element to add.","pos":[0,32]},{"content":"The value can be <ph id=\"ph1\">`null`</ph>.","pos":[33,57],"source":" The value can be `null`."}]}],"pos":[36236,36294],"yaml":true},{"content":"<code>key</code> is `null`.","nodes":[{"pos":[0,27],"content":"<ph id=\"ph1\">&lt;code&gt;key&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>key</code> is `null`."}],"pos":[36457,36485],"yaml":true},{"content":"An element with the specified <code>key</code> already exists in the <xref href=\"System.Collections.SortedList\"></xref> object.  \n  \n -or-  \n  \n The <xref href=\"System.Collections.SortedList\"></xref> is set to use the <xref href=\"System.IComparable\"></xref> interface, and <code>key</code> does not implement the <xref href=\"System.IComparable\"></xref> interface.","nodes":[{"pos":[0,127],"content":"An element with the specified <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">key</ph><ept id=\"p1\">&lt;/code&gt;</ept> already exists in the <ph id=\"ph2\">&lt;xref href=\"System.Collections.SortedList\"&gt;&lt;/xref&gt;</ph> object.","source":"An element with the specified <code>key</code> already exists in the <xref href=\"System.Collections.SortedList\"></xref> object."},{"pos":[134,138],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[145,363],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Collections.SortedList\"&gt;&lt;/xref&gt;</ph> is set to use the <ph id=\"ph2\">&lt;xref href=\"System.IComparable\"&gt;&lt;/xref&gt;</ph> interface, and <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph3\">key</ph><ept id=\"p1\">&lt;/code&gt;</ept> does not implement the <ph id=\"ph4\">&lt;xref href=\"System.IComparable\"&gt;&lt;/xref&gt;</ph> interface.","source":"The <xref href=\"System.Collections.SortedList\"></xref> is set to use the <xref href=\"System.IComparable\"></xref> interface, and <code>key</code> does not implement the <xref href=\"System.IComparable\"></xref> interface."}],"pos":[36579,36957],"yaml":true},{"content":"The <xref href=\"System.Collections.SortedList\"></xref> is read-only.  \n  \n -or-  \n  \n The <xref href=\"System.Collections.SortedList\"></xref> has a fixed size.","nodes":[{"pos":[0,68],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Collections.SortedList\"&gt;&lt;/xref&gt;</ph> is read-only.","source":"The <xref href=\"System.Collections.SortedList\"></xref> is read-only."},{"pos":[75,79],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[86,158],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Collections.SortedList\"&gt;&lt;/xref&gt;</ph> has a fixed size.","source":"The <xref href=\"System.Collections.SortedList\"></xref> has a fixed size."}],"pos":[37059,37228],"yaml":true},{"content":"There is not enough available memory to add the element to the <xref href=\"System.Collections.SortedList\"></xref>.","nodes":[{"pos":[0,114],"content":"There is not enough available memory to add the element to the <ph id=\"ph1\">&lt;xref href=\"System.Collections.SortedList\"&gt;&lt;/xref&gt;</ph>.","source":"There is not enough available memory to add the element to the <xref href=\"System.Collections.SortedList\"></xref>."}],"pos":[37328,37443],"yaml":true},{"content":"The comparer throws an exception.","nodes":[{"pos":[0,33],"content":"The comparer throws an exception.","nodes":[{"content":"The comparer throws an exception.","pos":[0,33]}]}],"pos":[37553,37587],"yaml":true},{"content":"Gets or sets the capacity of a <xref href=\"System.Collections.SortedList\"></xref> object.","nodes":[{"pos":[0,89],"content":"Gets or sets the capacity of a <ph id=\"ph1\">&lt;xref href=\"System.Collections.SortedList\"&gt;&lt;/xref&gt;</ph> object.","source":"Gets or sets the capacity of a <xref href=\"System.Collections.SortedList\"></xref> object."}],"pos":[38771,38861],"yaml":true},{"content":"<xref:System.Collections.SortedList.Capacity%2A> is the number of elements that the <xref:System.Collections.SortedList> object can store. <xref:System.Collections.SortedList.Count%2A> is the number of elements that are actually in the <xref:System.Collections.SortedList>.  \n  \n <xref:System.Collections.SortedList.Capacity%2A> is always greater than or equal to <xref:System.Collections.SortedList.Count%2A>. If <xref:System.Collections.SortedList.Count%2A> exceeds <xref:System.Collections.SortedList.Capacity%2A> while adding elements, the capacity is automatically increased by reallocating the internal array before copying the old elements and adding the new elements.  \n  \n The capacity can be decreased by calling <xref:System.Collections.SortedList.TrimToSize%2A> or by setting the <xref:System.Collections.SortedList.Capacity%2A> property explicitly. When the value of <xref:System.Collections.SortedList.Capacity%2A> is set explicitly, the internal array is also reallocated to accommodate the specified capacity.  \n  \n Retrieving the value of this property is an O(1) operation; setting the property is an O(`n`) operation, where `n` is the new capacity.","nodes":[{"pos":[0,273],"content":"<xref:System.Collections.SortedList.Capacity%2A> is the number of elements that the <xref:System.Collections.SortedList> object can store. <xref:System.Collections.SortedList.Count%2A> is the number of elements that are actually in the <xref:System.Collections.SortedList>.","nodes":[{"content":"<xref:System.Collections.SortedList.Capacity%2A> is the number of elements that the <xref:System.Collections.SortedList> object can store. <xref:System.Collections.SortedList.Count%2A> is the number of elements that are actually in the <xref:System.Collections.SortedList>.","pos":[0,273],"nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Collections.SortedList.Capacity%2A&gt;</ph> is the number of elements that the <ph id=\"ph2\">&lt;xref:System.Collections.SortedList&gt;</ph> object can store.","pos":[0,138],"source":"<xref:System.Collections.SortedList.Capacity%2A> is the number of elements that the <xref:System.Collections.SortedList> object can store."},{"content":"<ph id=\"ph1\">&lt;xref:System.Collections.SortedList.Count%2A&gt;</ph> is the number of elements that are actually in the <ph id=\"ph2\">&lt;xref:System.Collections.SortedList&gt;</ph>.","pos":[139,273],"source":" <xref:System.Collections.SortedList.Count%2A> is the number of elements that are actually in the <xref:System.Collections.SortedList>."}]}]},{"pos":[280,675],"content":"<xref:System.Collections.SortedList.Capacity%2A> is always greater than or equal to <xref:System.Collections.SortedList.Count%2A>. If <xref:System.Collections.SortedList.Count%2A> exceeds <xref:System.Collections.SortedList.Capacity%2A> while adding elements, the capacity is automatically increased by reallocating the internal array before copying the old elements and adding the new elements.","nodes":[{"content":"<xref:System.Collections.SortedList.Capacity%2A> is always greater than or equal to <xref:System.Collections.SortedList.Count%2A>. If <xref:System.Collections.SortedList.Count%2A> exceeds <xref:System.Collections.SortedList.Capacity%2A> while adding elements, the capacity is automatically increased by reallocating the internal array before copying the old elements and adding the new elements.","pos":[0,395],"nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Collections.SortedList.Capacity%2A&gt;</ph> is always greater than or equal to <ph id=\"ph2\">&lt;xref:System.Collections.SortedList.Count%2A&gt;</ph>.","pos":[0,130],"source":"<xref:System.Collections.SortedList.Capacity%2A> is always greater than or equal to <xref:System.Collections.SortedList.Count%2A>."},{"content":"If <ph id=\"ph1\">&lt;xref:System.Collections.SortedList.Count%2A&gt;</ph> exceeds <ph id=\"ph2\">&lt;xref:System.Collections.SortedList.Capacity%2A&gt;</ph> while adding elements, the capacity is automatically increased by reallocating the internal array before copying the old elements and adding the new elements.","pos":[131,395],"source":" If <xref:System.Collections.SortedList.Count%2A> exceeds <xref:System.Collections.SortedList.Capacity%2A> while adding elements, the capacity is automatically increased by reallocating the internal array before copying the old elements and adding the new elements."}]}]},{"pos":[682,1025],"content":"The capacity can be decreased by calling <xref:System.Collections.SortedList.TrimToSize%2A> or by setting the <xref:System.Collections.SortedList.Capacity%2A> property explicitly. When the value of <xref:System.Collections.SortedList.Capacity%2A> is set explicitly, the internal array is also reallocated to accommodate the specified capacity.","nodes":[{"content":"The capacity can be decreased by calling <xref:System.Collections.SortedList.TrimToSize%2A> or by setting the <xref:System.Collections.SortedList.Capacity%2A> property explicitly. When the value of <xref:System.Collections.SortedList.Capacity%2A> is set explicitly, the internal array is also reallocated to accommodate the specified capacity.","pos":[0,343],"nodes":[{"content":"The capacity can be decreased by calling <ph id=\"ph1\">&lt;xref:System.Collections.SortedList.TrimToSize%2A&gt;</ph> or by setting the <ph id=\"ph2\">&lt;xref:System.Collections.SortedList.Capacity%2A&gt;</ph> property explicitly.","pos":[0,179],"source":"The capacity can be decreased by calling <xref:System.Collections.SortedList.TrimToSize%2A> or by setting the <xref:System.Collections.SortedList.Capacity%2A> property explicitly."},{"content":"When the value of <ph id=\"ph1\">&lt;xref:System.Collections.SortedList.Capacity%2A&gt;</ph> is set explicitly, the internal array is also reallocated to accommodate the specified capacity.","pos":[180,343],"source":" When the value of <xref:System.Collections.SortedList.Capacity%2A> is set explicitly, the internal array is also reallocated to accommodate the specified capacity."}]}]},{"pos":[1032,1167],"content":"Retrieving the value of this property is an O(1) operation; setting the property is an O(<ph id=\"ph1\">`n`</ph>) operation, where <ph id=\"ph2\">`n`</ph> is the new capacity.","source":"Retrieving the value of this property is an O(1) operation; setting the property is an O(`n`) operation, where `n` is the new capacity."}],"pos":[38872,40048],"yaml":true,"extradata":"MT"},{"content":"The number of elements that the <xref href=\"System.Collections.SortedList\"></xref> object can contain.","nodes":[{"pos":[0,102],"content":"The number of elements that the <ph id=\"ph1\">&lt;xref href=\"System.Collections.SortedList\"&gt;&lt;/xref&gt;</ph> object can contain.","source":"The number of elements that the <xref href=\"System.Collections.SortedList\"></xref> object can contain."}],"pos":[40169,40272],"yaml":true},{"content":"The value assigned is less than the current number of elements in the <xref href=\"System.Collections.SortedList\"></xref> object.","nodes":[{"pos":[0,128],"content":"The value assigned is less than the current number of elements in the <ph id=\"ph1\">&lt;xref href=\"System.Collections.SortedList\"&gt;&lt;/xref&gt;</ph> object.","source":"The value assigned is less than the current number of elements in the <xref href=\"System.Collections.SortedList\"></xref> object."}],"pos":[40452,40581],"yaml":true},{"content":"There is not enough memory available on the system.","nodes":[{"pos":[0,51],"content":"There is not enough memory available on the system.","nodes":[{"content":"There is not enough memory available on the system.","pos":[0,51]}]}],"pos":[40681,40733],"yaml":true},{"content":"Removes all elements from a <xref href=\"System.Collections.SortedList\"></xref> object.","nodes":[{"pos":[0,86],"content":"Removes all elements from a <ph id=\"ph1\">&lt;xref href=\"System.Collections.SortedList\"&gt;&lt;/xref&gt;</ph> object.","source":"Removes all elements from a <xref href=\"System.Collections.SortedList\"></xref> object."}],"pos":[41903,41990],"yaml":true},{"content":"<xref:System.Collections.SortedList.Count%2A> is set to zero and references to other objects from elements of the collection are also released.  \n  \n <xref:System.Collections.SortedList.Capacity%2A> remains unchanged. To reset the capacity of the <xref:System.Collections.SortedList> object, call <xref:System.Collections.SortedList.TrimToSize%2A> or set the <xref:System.Collections.SortedList.Capacity%2A> property directly. Trimming an empty <xref:System.Collections.SortedList> sets the capacity of the <xref:System.Collections.SortedList> to the default capacity.  \n  \n This method is an O(`n`) operation, where `n` is <xref:System.Collections.SortedList.Count%2A>.","nodes":[{"pos":[0,143],"content":"<xref:System.Collections.SortedList.Count%2A> is set to zero and references to other objects from elements of the collection are also released.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Collections.SortedList.Count%2A&gt;</ph> is set to zero and references to other objects from elements of the collection are also released.","pos":[0,143],"source":"<xref:System.Collections.SortedList.Count%2A> is set to zero and references to other objects from elements of the collection are also released."}]},{"pos":[150,568],"content":"<xref:System.Collections.SortedList.Capacity%2A> remains unchanged. To reset the capacity of the <xref:System.Collections.SortedList> object, call <xref:System.Collections.SortedList.TrimToSize%2A> or set the <xref:System.Collections.SortedList.Capacity%2A> property directly. Trimming an empty <xref:System.Collections.SortedList> sets the capacity of the <xref:System.Collections.SortedList> to the default capacity.","nodes":[{"content":"<xref:System.Collections.SortedList.Capacity%2A> remains unchanged. To reset the capacity of the <xref:System.Collections.SortedList> object, call <xref:System.Collections.SortedList.TrimToSize%2A> or set the <xref:System.Collections.SortedList.Capacity%2A> property directly. Trimming an empty <xref:System.Collections.SortedList> sets the capacity of the <xref:System.Collections.SortedList> to the default capacity.","pos":[0,418],"nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Collections.SortedList.Capacity%2A&gt;</ph> remains unchanged.","pos":[0,67],"source":"<xref:System.Collections.SortedList.Capacity%2A> remains unchanged."},{"content":"To reset the capacity of the <ph id=\"ph1\">&lt;xref:System.Collections.SortedList&gt;</ph> object, call <ph id=\"ph2\">&lt;xref:System.Collections.SortedList.TrimToSize%2A&gt;</ph> or set the <ph id=\"ph3\">&lt;xref:System.Collections.SortedList.Capacity%2A&gt;</ph> property directly.","pos":[68,276],"source":" To reset the capacity of the <xref:System.Collections.SortedList> object, call <xref:System.Collections.SortedList.TrimToSize%2A> or set the <xref:System.Collections.SortedList.Capacity%2A> property directly."},{"content":"Trimming an empty <ph id=\"ph1\">&lt;xref:System.Collections.SortedList&gt;</ph> sets the capacity of the <ph id=\"ph2\">&lt;xref:System.Collections.SortedList&gt;</ph> to the default capacity.","pos":[277,418],"source":" Trimming an empty <xref:System.Collections.SortedList> sets the capacity of the <xref:System.Collections.SortedList> to the default capacity."}]}]},{"pos":[575,670],"content":"This method is an O(<ph id=\"ph1\">`n`</ph>) operation, where <ph id=\"ph2\">`n`</ph> is <ph id=\"ph3\">&lt;xref:System.Collections.SortedList.Count%2A&gt;</ph>.","source":"This method is an O(`n`) operation, where `n` is <xref:System.Collections.SortedList.Count%2A>."}],"pos":[42001,42678],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Collections.SortedList\"></xref> object is read-only.  \n  \n -or-  \n  \n The <xref href=\"System.Collections.SortedList\"></xref> has a fixed size.","nodes":[{"pos":[0,75],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Collections.SortedList\"&gt;&lt;/xref&gt;</ph> object is read-only.","source":"The <xref href=\"System.Collections.SortedList\"></xref> object is read-only."},{"pos":[82,86],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[93,165],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Collections.SortedList\"&gt;&lt;/xref&gt;</ph> has a fixed size.","source":"The <xref href=\"System.Collections.SortedList\"></xref> has a fixed size."}],"pos":[43578,43754],"yaml":true},{"content":"Creates a shallow copy of a <xref href=\"System.Collections.SortedList\"></xref> object.","nodes":[{"pos":[0,86],"content":"Creates a shallow copy of a <ph id=\"ph1\">&lt;xref href=\"System.Collections.SortedList\"&gt;&lt;/xref&gt;</ph> object.","source":"Creates a shallow copy of a <xref href=\"System.Collections.SortedList\"></xref> object."}],"pos":[44924,45011],"yaml":true},{"content":"A shallow copy of a collection copies only the elements of the collection, whether they are reference types or value types, but does not copy the objects that the references refer to. The references in the new collection point to the same objects that the references in the original collection point to.  \n  \n In contrast, a deep copy of a collection copies the elements and everything directly or indirectly referenced by the elements.  \n  \n This method is an O(`n`) operation, where `n` is <xref:System.Collections.SortedList.Count%2A>.","nodes":[{"pos":[0,303],"content":"A shallow copy of a collection copies only the elements of the collection, whether they are reference types or value types, but does not copy the objects that the references refer to. The references in the new collection point to the same objects that the references in the original collection point to.","nodes":[{"content":"A shallow copy of a collection copies only the elements of the collection, whether they are reference types or value types, but does not copy the objects that the references refer to. The references in the new collection point to the same objects that the references in the original collection point to.","pos":[0,303],"nodes":[{"content":"A shallow copy of a collection copies only the elements of the collection, whether they are reference types or value types, but does not copy the objects that the references refer to.","pos":[0,183]},{"content":"The references in the new collection point to the same objects that the references in the original collection point to.","pos":[184,303]}]}]},{"pos":[310,436],"content":"In contrast, a deep copy of a collection copies the elements and everything directly or indirectly referenced by the elements.","nodes":[{"content":"In contrast, a deep copy of a collection copies the elements and everything directly or indirectly referenced by the elements.","pos":[0,126]}]},{"pos":[443,538],"content":"This method is an O(<ph id=\"ph1\">`n`</ph>) operation, where <ph id=\"ph2\">`n`</ph> is <ph id=\"ph3\">&lt;xref:System.Collections.SortedList.Count%2A&gt;</ph>.","source":"This method is an O(`n`) operation, where `n` is <xref:System.Collections.SortedList.Count%2A>."}],"pos":[45022,45567],"yaml":true,"extradata":"MT"},{"content":"A shallow copy of the <xref href=\"System.Collections.SortedList\"></xref> object.","nodes":[{"pos":[0,80],"content":"A shallow copy of the <ph id=\"ph1\">&lt;xref href=\"System.Collections.SortedList\"&gt;&lt;/xref&gt;</ph> object.","source":"A shallow copy of the <xref href=\"System.Collections.SortedList\"></xref> object."}],"pos":[45698,45779],"yaml":true},{"content":"Determines whether a <xref href=\"System.Collections.SortedList\"></xref> object contains a specific key.","nodes":[{"pos":[0,103],"content":"Determines whether a <ph id=\"ph1\">&lt;xref href=\"System.Collections.SortedList\"&gt;&lt;/xref&gt;</ph> object contains a specific key.","source":"Determines whether a <xref href=\"System.Collections.SortedList\"></xref> object contains a specific key."}],"pos":[47096,47200],"yaml":true},{"content":"The elements of a <xref:System.Collections.SortedList> object are sorted by the keys either according to a specific <xref:System.Collections.IComparer> implementation specified when the <xref:System.Collections.SortedList> is created or according to the <xref:System.IComparable> implementation provided by the keys themselves.  \n  \n <xref:System.Collections.SortedList.Contains%2A> implements <xref:System.Collections.IDictionary.Contains%2A?displayProperty=fullName>. It behaves exactly as <xref:System.Collections.SortedList.ContainsKey%2A>.  \n  \n This method uses a binary search algorithm; therefore, this method is an O(log `n`) operation, where `n` is <xref:System.Collections.SortedList.Count%2A>.  \n  \n Starting with the .NET Framework 2.0, this method uses the collection’s objects’ <xref:System.Object.Equals%2A> and <xref:System.IComparable.CompareTo%2A> methods on `item` to determine whether item exists. In the earlier versions of the .NET Framework, this determination was made by using the <xref:System.Object.Equals%2A> and <xref:System.IComparable.CompareTo%2A> methods of the `item` parameter on the objects in the collection.","nodes":[{"pos":[0,327],"content":"The elements of a <xref:System.Collections.SortedList> object are sorted by the keys either according to a specific <xref:System.Collections.IComparer> implementation specified when the <xref:System.Collections.SortedList> is created or according to the <xref:System.IComparable> implementation provided by the keys themselves.","nodes":[{"content":"The elements of a <ph id=\"ph1\">&lt;xref:System.Collections.SortedList&gt;</ph> object are sorted by the keys either according to a specific <ph id=\"ph2\">&lt;xref:System.Collections.IComparer&gt;</ph> implementation specified when the <ph id=\"ph3\">&lt;xref:System.Collections.SortedList&gt;</ph> is created or according to the <ph id=\"ph4\">&lt;xref:System.IComparable&gt;</ph> implementation provided by the keys themselves.","pos":[0,327],"source":"The elements of a <xref:System.Collections.SortedList> object are sorted by the keys either according to a specific <xref:System.Collections.IComparer> implementation specified when the <xref:System.Collections.SortedList> is created or according to the <xref:System.IComparable> implementation provided by the keys themselves."}]},{"pos":[334,544],"content":"<xref:System.Collections.SortedList.Contains%2A> implements <xref:System.Collections.IDictionary.Contains%2A?displayProperty=fullName>. It behaves exactly as <xref:System.Collections.SortedList.ContainsKey%2A>.","nodes":[{"content":"<xref:System.Collections.SortedList.Contains%2A> implements <xref:System.Collections.IDictionary.Contains%2A?displayProperty=fullName>. It behaves exactly as <xref:System.Collections.SortedList.ContainsKey%2A>.","pos":[0,210],"nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Collections.SortedList.Contains%2A&gt;</ph> implements <ph id=\"ph2\">&lt;xref:System.Collections.IDictionary.Contains%2A?displayProperty=fullName&gt;</ph>.","pos":[0,135],"source":"<xref:System.Collections.SortedList.Contains%2A> implements <xref:System.Collections.IDictionary.Contains%2A?displayProperty=fullName>."},{"content":"It behaves exactly as <ph id=\"ph1\">&lt;xref:System.Collections.SortedList.ContainsKey%2A&gt;</ph>.","pos":[136,210],"source":" It behaves exactly as <xref:System.Collections.SortedList.ContainsKey%2A>."}]}]},{"pos":[551,705],"content":"This method uses a binary search algorithm; therefore, this method is an O(log <ph id=\"ph1\">`n`</ph>) operation, where <ph id=\"ph2\">`n`</ph> is <ph id=\"ph3\">&lt;xref:System.Collections.SortedList.Count%2A&gt;</ph>.","source":"This method uses a binary search algorithm; therefore, this method is an O(log `n`) operation, where `n` is <xref:System.Collections.SortedList.Count%2A>."},{"pos":[712,1146],"content":"Starting with the .NET Framework 2.0, this method uses the collection’s objects’ <xref:System.Object.Equals%2A> and <xref:System.IComparable.CompareTo%2A> methods on `item` to determine whether item exists. In the earlier versions of the .NET Framework, this determination was made by using the <xref:System.Object.Equals%2A> and <xref:System.IComparable.CompareTo%2A> methods of the `item` parameter on the objects in the collection.","nodes":[{"content":"Starting with the .NET Framework 2.0, this method uses the collection’s objects’ <ph id=\"ph1\">&lt;xref:System.Object.Equals%2A&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.IComparable.CompareTo%2A&gt;</ph> methods on <ph id=\"ph3\">`item`</ph> to determine whether item exists.","pos":[0,206],"source":"Starting with the .NET Framework 2.0, this method uses the collection’s objects’ <xref:System.Object.Equals%2A> and <xref:System.IComparable.CompareTo%2A> methods on `item` to determine whether item exists."},{"content":"In the earlier versions of the .NET Framework, this determination was made by using the <ph id=\"ph1\">&lt;xref:System.Object.Equals%2A&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.IComparable.CompareTo%2A&gt;</ph> methods of the <ph id=\"ph3\">`item`</ph> parameter on the objects in the collection.","pos":[207,434],"source":" In the earlier versions of the .NET Framework, this determination was made by using the <xref:System.Object.Equals%2A> and <xref:System.IComparable.CompareTo%2A> methods of the `item` parameter on the objects in the collection."}]}],"pos":[47211,48366],"yaml":true,"extradata":"MT"},{"content":"The key to locate in the <xref href=\"System.Collections.SortedList\"></xref> object.","nodes":[{"pos":[0,83],"content":"The key to locate in the <ph id=\"ph1\">&lt;xref href=\"System.Collections.SortedList\"&gt;&lt;/xref&gt;</ph> object.","source":"The key to locate in the <xref href=\"System.Collections.SortedList\"></xref> object."}],"pos":[49134,49218],"yaml":true},{"content":"`true` if the <xref href=\"System.Collections.SortedList\"></xref> object contains an element with the specified <code>key</code>; otherwise, `false`.","nodes":[{"pos":[0,148],"content":"<ph id=\"ph1\">`true`</ph> if the <ph id=\"ph2\">&lt;xref href=\"System.Collections.SortedList\"&gt;&lt;/xref&gt;</ph> object contains an element with the specified <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph3\">key</ph><ept id=\"p1\">&lt;/code&gt;</ept>; otherwise, <ph id=\"ph4\">`false`</ph>.","source":"`true` if the <xref href=\"System.Collections.SortedList\"></xref> object contains an element with the specified <code>key</code>; otherwise, `false`."}],"pos":[49276,49427],"yaml":true},{"content":"<code>key</code> is `null`.","nodes":[{"pos":[0,27],"content":"<ph id=\"ph1\">&lt;code&gt;key&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>key</code> is `null`."}],"pos":[49595,49623],"yaml":true},{"content":"The comparer throws an exception.","nodes":[{"pos":[0,33],"content":"The comparer throws an exception.","nodes":[{"content":"The comparer throws an exception.","pos":[0,33]}]}],"pos":[49733,49767],"yaml":true},{"content":"Determines whether a <xref href=\"System.Collections.SortedList\"></xref> object contains a specific key.","nodes":[{"pos":[0,103],"content":"Determines whether a <ph id=\"ph1\">&lt;xref href=\"System.Collections.SortedList\"&gt;&lt;/xref&gt;</ph> object contains a specific key.","source":"Determines whether a <xref href=\"System.Collections.SortedList\"></xref> object contains a specific key."}],"pos":[51036,51140],"yaml":true},{"content":"The elements of a <xref:System.Collections.SortedList> object are sorted by the keys either according to a specific <xref:System.Collections.IComparer> implementation specified when the <xref:System.Collections.SortedList> is created or according to the <xref:System.IComparable> implementation provided by the keys themselves.  \n  \n This method behaves exactly as the <xref:System.Collections.SortedList.Contains%2A> method.  \n  \n This method uses a binary search algorithm; therefore, this method is an O(log `n`) operation, where `n` is <xref:System.Collections.SortedList.Count%2A>.  \n  \n Starting with the .NET Framework 2.0, this method uses the collection’s objects’ <xref:System.Object.Equals%2A> and <xref:System.IComparable.CompareTo%2A> methods on `item` to determine whether item exists. In the earlier versions of the .NET Framework, this determination was made by using the <xref:System.Object.Equals%2A> and <xref:System.IComparable.CompareTo%2A> methods of the `item` parameter on the objects in the collection.","nodes":[{"pos":[0,327],"content":"The elements of a <xref:System.Collections.SortedList> object are sorted by the keys either according to a specific <xref:System.Collections.IComparer> implementation specified when the <xref:System.Collections.SortedList> is created or according to the <xref:System.IComparable> implementation provided by the keys themselves.","nodes":[{"content":"The elements of a <ph id=\"ph1\">&lt;xref:System.Collections.SortedList&gt;</ph> object are sorted by the keys either according to a specific <ph id=\"ph2\">&lt;xref:System.Collections.IComparer&gt;</ph> implementation specified when the <ph id=\"ph3\">&lt;xref:System.Collections.SortedList&gt;</ph> is created or according to the <ph id=\"ph4\">&lt;xref:System.IComparable&gt;</ph> implementation provided by the keys themselves.","pos":[0,327],"source":"The elements of a <xref:System.Collections.SortedList> object are sorted by the keys either according to a specific <xref:System.Collections.IComparer> implementation specified when the <xref:System.Collections.SortedList> is created or according to the <xref:System.IComparable> implementation provided by the keys themselves."}]},{"pos":[334,425],"content":"This method behaves exactly as the <xref:System.Collections.SortedList.Contains%2A> method.","nodes":[{"content":"This method behaves exactly as the <ph id=\"ph1\">&lt;xref:System.Collections.SortedList.Contains%2A&gt;</ph> method.","pos":[0,91],"source":"This method behaves exactly as the <xref:System.Collections.SortedList.Contains%2A> method."}]},{"pos":[432,586],"content":"This method uses a binary search algorithm; therefore, this method is an O(log <ph id=\"ph1\">`n`</ph>) operation, where <ph id=\"ph2\">`n`</ph> is <ph id=\"ph3\">&lt;xref:System.Collections.SortedList.Count%2A&gt;</ph>.","source":"This method uses a binary search algorithm; therefore, this method is an O(log `n`) operation, where `n` is <xref:System.Collections.SortedList.Count%2A>."},{"pos":[593,1027],"content":"Starting with the .NET Framework 2.0, this method uses the collection’s objects’ <xref:System.Object.Equals%2A> and <xref:System.IComparable.CompareTo%2A> methods on `item` to determine whether item exists. In the earlier versions of the .NET Framework, this determination was made by using the <xref:System.Object.Equals%2A> and <xref:System.IComparable.CompareTo%2A> methods of the `item` parameter on the objects in the collection.","nodes":[{"content":"Starting with the .NET Framework 2.0, this method uses the collection’s objects’ <ph id=\"ph1\">&lt;xref:System.Object.Equals%2A&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.IComparable.CompareTo%2A&gt;</ph> methods on <ph id=\"ph3\">`item`</ph> to determine whether item exists.","pos":[0,206],"source":"Starting with the .NET Framework 2.0, this method uses the collection’s objects’ <xref:System.Object.Equals%2A> and <xref:System.IComparable.CompareTo%2A> methods on `item` to determine whether item exists."},{"content":"In the earlier versions of the .NET Framework, this determination was made by using the <ph id=\"ph1\">&lt;xref:System.Object.Equals%2A&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.IComparable.CompareTo%2A&gt;</ph> methods of the <ph id=\"ph3\">`item`</ph> parameter on the objects in the collection.","pos":[207,434],"source":" In the earlier versions of the .NET Framework, this determination was made by using the <xref:System.Object.Equals%2A> and <xref:System.IComparable.CompareTo%2A> methods of the `item` parameter on the objects in the collection."}]}],"pos":[51151,52187],"yaml":true,"extradata":"MT"},{"content":"The key to locate in the <xref href=\"System.Collections.SortedList\"></xref> object.","nodes":[{"pos":[0,83],"content":"The key to locate in the <ph id=\"ph1\">&lt;xref href=\"System.Collections.SortedList\"&gt;&lt;/xref&gt;</ph> object.","source":"The key to locate in the <xref href=\"System.Collections.SortedList\"></xref> object."}],"pos":[52958,53042],"yaml":true},{"content":"`true` if the <xref href=\"System.Collections.SortedList\"></xref> object contains an element with the specified <code>key</code>; otherwise, `false`.","nodes":[{"pos":[0,148],"content":"<ph id=\"ph1\">`true`</ph> if the <ph id=\"ph2\">&lt;xref href=\"System.Collections.SortedList\"&gt;&lt;/xref&gt;</ph> object contains an element with the specified <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph3\">key</ph><ept id=\"p1\">&lt;/code&gt;</ept>; otherwise, <ph id=\"ph4\">`false`</ph>.","source":"`true` if the <xref href=\"System.Collections.SortedList\"></xref> object contains an element with the specified <code>key</code>; otherwise, `false`."}],"pos":[53100,53251],"yaml":true},{"content":"<code>key</code> is `null`.","nodes":[{"pos":[0,27],"content":"<ph id=\"ph1\">&lt;code&gt;key&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>key</code> is `null`."}],"pos":[53422,53450],"yaml":true},{"content":"The comparer throws an exception.","nodes":[{"pos":[0,33],"content":"The comparer throws an exception.","nodes":[{"content":"The comparer throws an exception.","pos":[0,33]}]}],"pos":[53560,53594],"yaml":true},{"content":"Determines whether a <xref href=\"System.Collections.SortedList\"></xref> object contains a specific value.","nodes":[{"pos":[0,105],"content":"Determines whether a <ph id=\"ph1\">&lt;xref href=\"System.Collections.SortedList\"&gt;&lt;/xref&gt;</ph> object contains a specific value.","source":"Determines whether a <xref href=\"System.Collections.SortedList\"></xref> object contains a specific value."}],"pos":[54875,54981],"yaml":true},{"content":"The values of the elements of the <xref:System.Collections.SortedList> object are compared to the specified value using the <xref:System.Object.Equals%2A> method.  \n  \n This method performs a linear search; therefore, the average execution time is proportional to <xref:System.Collections.SortedList.Count%2A>. That is, this method is an O(`n`) operation, where `n` is <xref:System.Collections.SortedList.Count%2A>.  \n  \n Starting with the .NET Framework 2.0, this method uses the collection’s objects’ <xref:System.Object.Equals%2A> and <xref:System.IComparable.CompareTo%2A> methods on `item` to determine whether item exists. In the earlier versions of the .NET Framework, this determination was made by using the <xref:System.Object.Equals%2A> and <xref:System.IComparable.CompareTo%2A> methods of the `item` parameter on the objects in the collection.","nodes":[{"pos":[0,162],"content":"The values of the elements of the <xref:System.Collections.SortedList> object are compared to the specified value using the <xref:System.Object.Equals%2A> method.","nodes":[{"content":"The values of the elements of the <ph id=\"ph1\">&lt;xref:System.Collections.SortedList&gt;</ph> object are compared to the specified value using the <ph id=\"ph2\">&lt;xref:System.Object.Equals%2A&gt;</ph> method.","pos":[0,162],"source":"The values of the elements of the <xref:System.Collections.SortedList> object are compared to the specified value using the <xref:System.Object.Equals%2A> method."}]},{"pos":[169,415],"content":"This method performs a linear search; therefore, the average execution time is proportional to <xref:System.Collections.SortedList.Count%2A>. That is, this method is an O(`n`) operation, where `n` is <xref:System.Collections.SortedList.Count%2A>.","nodes":[{"content":"This method performs a linear search; therefore, the average execution time is proportional to <ph id=\"ph1\">&lt;xref:System.Collections.SortedList.Count%2A&gt;</ph>.","pos":[0,141],"source":"This method performs a linear search; therefore, the average execution time is proportional to <xref:System.Collections.SortedList.Count%2A>."},{"content":"That is, this method is an O(<ph id=\"ph1\">`n`</ph>) operation, where <ph id=\"ph2\">`n`</ph> is <ph id=\"ph3\">&lt;xref:System.Collections.SortedList.Count%2A&gt;</ph>.","pos":[142,246],"source":" That is, this method is an O(`n`) operation, where `n` is <xref:System.Collections.SortedList.Count%2A>."}]},{"pos":[422,856],"content":"Starting with the .NET Framework 2.0, this method uses the collection’s objects’ <xref:System.Object.Equals%2A> and <xref:System.IComparable.CompareTo%2A> methods on `item` to determine whether item exists. In the earlier versions of the .NET Framework, this determination was made by using the <xref:System.Object.Equals%2A> and <xref:System.IComparable.CompareTo%2A> methods of the `item` parameter on the objects in the collection.","nodes":[{"content":"Starting with the .NET Framework 2.0, this method uses the collection’s objects’ <ph id=\"ph1\">&lt;xref:System.Object.Equals%2A&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.IComparable.CompareTo%2A&gt;</ph> methods on <ph id=\"ph3\">`item`</ph> to determine whether item exists.","pos":[0,206],"source":"Starting with the .NET Framework 2.0, this method uses the collection’s objects’ <xref:System.Object.Equals%2A> and <xref:System.IComparable.CompareTo%2A> methods on `item` to determine whether item exists."},{"content":"In the earlier versions of the .NET Framework, this determination was made by using the <ph id=\"ph1\">&lt;xref:System.Object.Equals%2A&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.IComparable.CompareTo%2A&gt;</ph> methods of the <ph id=\"ph3\">`item`</ph> parameter on the objects in the collection.","pos":[207,434],"source":" In the earlier versions of the .NET Framework, this determination was made by using the <xref:System.Object.Equals%2A> and <xref:System.IComparable.CompareTo%2A> methods of the `item` parameter on the objects in the collection."}]}],"pos":[54992,55855],"yaml":true,"extradata":"MT"},{"content":"The value to locate in the <xref href=\"System.Collections.SortedList\"></xref> object. The value can be `null`.","nodes":[{"pos":[0,110],"content":"The value to locate in the <xref href=\"System.Collections.SortedList\"></xref> object. The value can be `null`.","nodes":[{"content":"The value to locate in the <ph id=\"ph1\">&lt;xref href=\"System.Collections.SortedList\"&gt;&lt;/xref&gt;</ph> object.","pos":[0,85],"source":"The value to locate in the <xref href=\"System.Collections.SortedList\"></xref> object."},{"content":"The value can be <ph id=\"ph1\">`null`</ph>.","pos":[86,110],"source":" The value can be `null`."}]}],"pos":[56632,56743],"yaml":true},{"content":"`true` if the <xref href=\"System.Collections.SortedList\"></xref> object contains an element with the specified <code>value</code>; otherwise, `false`.","nodes":[{"pos":[0,150],"content":"<ph id=\"ph1\">`true`</ph> if the <ph id=\"ph2\">&lt;xref href=\"System.Collections.SortedList\"&gt;&lt;/xref&gt;</ph> object contains an element with the specified <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph3\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept>; otherwise, <ph id=\"ph4\">`false`</ph>.","source":"`true` if the <xref href=\"System.Collections.SortedList\"></xref> object contains an element with the specified <code>value</code>; otherwise, `false`."}],"pos":[56801,56954],"yaml":true},{"content":"Copies <xref href=\"System.Collections.SortedList\"></xref> elements to a one-dimensional <xref href=\"System.Array\"></xref> object, starting at the specified index in the array.","nodes":[{"pos":[0,175],"content":"Copies <ph id=\"ph1\">&lt;xref href=\"System.Collections.SortedList\"&gt;&lt;/xref&gt;</ph> elements to a one-dimensional <ph id=\"ph2\">&lt;xref href=\"System.Array\"&gt;&lt;/xref&gt;</ph> object, starting at the specified index in the array.","source":"Copies <xref href=\"System.Collections.SortedList\"></xref> elements to a one-dimensional <xref href=\"System.Array\"></xref> object, starting at the specified index in the array."}],"pos":[58321,58497],"yaml":true},{"content":"The key/value pairs are copied to the <xref:System.Array> object in the same order in which the enumerator iterates through the <xref:System.Collections.SortedList> object.  \n  \n To copy only the keys in the <xref:System.Collections.SortedList>, use `SortedList.Keys.CopyTo`.  \n  \n To copy only the values in the <xref:System.Collections.SortedList>, use `SortedList.Values.CopyTo`.  \n  \n This method is an O(`n`) operation, where `n` is <xref:System.Collections.SortedList.Count%2A>.","nodes":[{"pos":[0,172],"content":"The key/value pairs are copied to the <xref:System.Array> object in the same order in which the enumerator iterates through the <xref:System.Collections.SortedList> object.","nodes":[{"content":"The key/value pairs are copied to the <ph id=\"ph1\">&lt;xref:System.Array&gt;</ph> object in the same order in which the enumerator iterates through the <ph id=\"ph2\">&lt;xref:System.Collections.SortedList&gt;</ph> object.","pos":[0,172],"source":"The key/value pairs are copied to the <xref:System.Array> object in the same order in which the enumerator iterates through the <xref:System.Collections.SortedList> object."}]},{"pos":[179,275],"content":"To copy only the keys in the <ph id=\"ph1\">&lt;xref:System.Collections.SortedList&gt;</ph>, use <ph id=\"ph2\">`SortedList.Keys.CopyTo`</ph>.","source":"To copy only the keys in the <xref:System.Collections.SortedList>, use `SortedList.Keys.CopyTo`."},{"pos":[282,382],"content":"To copy only the values in the <ph id=\"ph1\">&lt;xref:System.Collections.SortedList&gt;</ph>, use <ph id=\"ph2\">`SortedList.Values.CopyTo`</ph>.","source":"To copy only the values in the <xref:System.Collections.SortedList>, use `SortedList.Values.CopyTo`."},{"pos":[389,484],"content":"This method is an O(<ph id=\"ph1\">`n`</ph>) operation, where <ph id=\"ph2\">`n`</ph> is <ph id=\"ph3\">&lt;xref:System.Collections.SortedList.Count%2A&gt;</ph>.","source":"This method is an O(`n`) operation, where `n` is <xref:System.Collections.SortedList.Count%2A>."}],"pos":[58508,59001],"yaml":true,"extradata":"MT"},{"content":"The one-dimensional <xref href=\"System.Array\"></xref> object that is the destination of the <xref href=\"System.Collections.DictionaryEntry\"></xref> objects copied from <xref href=\"System.Collections.SortedList\"></xref>. The <xref href=\"System.Array\"></xref> must have zero-based indexing.","nodes":[{"pos":[0,288],"content":"The one-dimensional <xref href=\"System.Array\"></xref> object that is the destination of the <xref href=\"System.Collections.DictionaryEntry\"></xref> objects copied from <xref href=\"System.Collections.SortedList\"></xref>. The <xref href=\"System.Array\"></xref> must have zero-based indexing.","nodes":[{"content":"The one-dimensional <ph id=\"ph1\">&lt;xref href=\"System.Array\"&gt;&lt;/xref&gt;</ph> object that is the destination of the <ph id=\"ph2\">&lt;xref href=\"System.Collections.DictionaryEntry\"&gt;&lt;/xref&gt;</ph> objects copied from <ph id=\"ph3\">&lt;xref href=\"System.Collections.SortedList\"&gt;&lt;/xref&gt;</ph>.","pos":[0,219],"source":"The one-dimensional <xref href=\"System.Array\"></xref> object that is the destination of the <xref href=\"System.Collections.DictionaryEntry\"></xref> objects copied from <xref href=\"System.Collections.SortedList\"></xref>."},{"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Array\"&gt;&lt;/xref&gt;</ph> must have zero-based indexing.","pos":[220,288],"source":" The <xref href=\"System.Array\"></xref> must have zero-based indexing."}]}],"pos":[59796,60085],"yaml":true},{"content":"The zero-based index in <code>array</code> at which copying begins.","nodes":[{"pos":[0,67],"content":"The zero-based index in <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">array</ph><ept id=\"p1\">&lt;/code&gt;</ept> at which copying begins.","source":"The zero-based index in <code>array</code> at which copying begins."}],"pos":[60150,60218],"yaml":true},{"content":"<code>array</code> is `null`.","nodes":[{"pos":[0,29],"content":"<ph id=\"ph1\">&lt;code&gt;array&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>array</code> is `null`."}],"pos":[60384,60414],"yaml":true},{"content":"<code>arrayIndex</code> is less than zero.","nodes":[{"pos":[0,42],"content":"<ph id=\"ph1\">&lt;code&gt;arrayIndex&lt;/code&gt;</ph> is less than zero.","source":"<code>arrayIndex</code> is less than zero."}],"pos":[60528,60571],"yaml":true},{"content":"<code>array</code> is multidimensional.  \n  \n -or-  \n  \n The number of elements in the source <xref href=\"System.Collections.SortedList\"></xref> object is greater than the available space from <code>arrayIndex</code> to the end of the destination <code>array</code>.","nodes":[{"pos":[0,39],"content":"<ph id=\"ph1\">&lt;code&gt;array&lt;/code&gt;</ph> is multidimensional.","source":"<code>array</code> is multidimensional."},{"pos":[46,50],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[57,266],"content":"The number of elements in the source <ph id=\"ph1\">&lt;xref href=\"System.Collections.SortedList\"&gt;&lt;/xref&gt;</ph> object is greater than the available space from <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">arrayIndex</ph><ept id=\"p1\">&lt;/code&gt;</ept> to the end of the destination <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph3\">array</ph><ept id=\"p2\">&lt;/code&gt;</ept>.","source":"The number of elements in the source <xref href=\"System.Collections.SortedList\"></xref> object is greater than the available space from <code>arrayIndex</code> to the end of the destination <code>array</code>."}],"pos":[60665,60940],"yaml":true},{"content":"The type of the source <xref href=\"System.Collections.SortedList\"></xref> cannot be cast automatically to the type of the destination <code>array</code>.","nodes":[{"pos":[0,153],"content":"The type of the source <ph id=\"ph1\">&lt;xref href=\"System.Collections.SortedList\"&gt;&lt;/xref&gt;</ph> cannot be cast automatically to the type of the destination <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">array</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The type of the source <xref href=\"System.Collections.SortedList\"></xref> cannot be cast automatically to the type of the destination <code>array</code>."}],"pos":[61040,61194],"yaml":true},{"content":"Gets the number of elements contained in a <xref href=\"System.Collections.SortedList\"></xref> object.","nodes":[{"pos":[0,101],"content":"Gets the number of elements contained in a <ph id=\"ph1\">&lt;xref href=\"System.Collections.SortedList\"&gt;&lt;/xref&gt;</ph> object.","source":"Gets the number of elements contained in a <xref href=\"System.Collections.SortedList\"></xref> object."}],"pos":[62360,62462],"yaml":true},{"content":"Each element is a key/value pair that can be accessed as a <xref:System.Collections.DictionaryEntry> object.  \n  \n <xref:System.Collections.SortedList.Capacity%2A> is the number of elements that the <xref:System.Collections.SortedList> object can store. <xref:System.Collections.SortedList.Count%2A> is the number of elements that are actually in the <xref:System.Collections.SortedList>.  \n  \n <xref:System.Collections.SortedList.Capacity%2A> is always greater than or equal to <xref:System.Collections.SortedList.Count%2A>. If <xref:System.Collections.SortedList.Count%2A> exceeds <xref:System.Collections.SortedList.Capacity%2A> while adding elements, the capacity is automatically increased by reallocating the internal array before copying the old elements and adding the new elements.  \n  \n Retrieving the value of this property is an O(1) operation.","nodes":[{"pos":[0,108],"content":"Each element is a key/value pair that can be accessed as a <xref:System.Collections.DictionaryEntry> object.","nodes":[{"content":"Each element is a key/value pair that can be accessed as a <ph id=\"ph1\">&lt;xref:System.Collections.DictionaryEntry&gt;</ph> object.","pos":[0,108],"source":"Each element is a key/value pair that can be accessed as a <xref:System.Collections.DictionaryEntry> object."}]},{"pos":[115,388],"content":"<xref:System.Collections.SortedList.Capacity%2A> is the number of elements that the <xref:System.Collections.SortedList> object can store. <xref:System.Collections.SortedList.Count%2A> is the number of elements that are actually in the <xref:System.Collections.SortedList>.","nodes":[{"content":"<xref:System.Collections.SortedList.Capacity%2A> is the number of elements that the <xref:System.Collections.SortedList> object can store. <xref:System.Collections.SortedList.Count%2A> is the number of elements that are actually in the <xref:System.Collections.SortedList>.","pos":[0,273],"nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Collections.SortedList.Capacity%2A&gt;</ph> is the number of elements that the <ph id=\"ph2\">&lt;xref:System.Collections.SortedList&gt;</ph> object can store.","pos":[0,138],"source":"<xref:System.Collections.SortedList.Capacity%2A> is the number of elements that the <xref:System.Collections.SortedList> object can store."},{"content":"<ph id=\"ph1\">&lt;xref:System.Collections.SortedList.Count%2A&gt;</ph> is the number of elements that are actually in the <ph id=\"ph2\">&lt;xref:System.Collections.SortedList&gt;</ph>.","pos":[139,273],"source":" <xref:System.Collections.SortedList.Count%2A> is the number of elements that are actually in the <xref:System.Collections.SortedList>."}]}]},{"pos":[395,790],"content":"<xref:System.Collections.SortedList.Capacity%2A> is always greater than or equal to <xref:System.Collections.SortedList.Count%2A>. If <xref:System.Collections.SortedList.Count%2A> exceeds <xref:System.Collections.SortedList.Capacity%2A> while adding elements, the capacity is automatically increased by reallocating the internal array before copying the old elements and adding the new elements.","nodes":[{"content":"<xref:System.Collections.SortedList.Capacity%2A> is always greater than or equal to <xref:System.Collections.SortedList.Count%2A>. If <xref:System.Collections.SortedList.Count%2A> exceeds <xref:System.Collections.SortedList.Capacity%2A> while adding elements, the capacity is automatically increased by reallocating the internal array before copying the old elements and adding the new elements.","pos":[0,395],"nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Collections.SortedList.Capacity%2A&gt;</ph> is always greater than or equal to <ph id=\"ph2\">&lt;xref:System.Collections.SortedList.Count%2A&gt;</ph>.","pos":[0,130],"source":"<xref:System.Collections.SortedList.Capacity%2A> is always greater than or equal to <xref:System.Collections.SortedList.Count%2A>."},{"content":"If <ph id=\"ph1\">&lt;xref:System.Collections.SortedList.Count%2A&gt;</ph> exceeds <ph id=\"ph2\">&lt;xref:System.Collections.SortedList.Capacity%2A&gt;</ph> while adding elements, the capacity is automatically increased by reallocating the internal array before copying the old elements and adding the new elements.","pos":[131,395],"source":" If <xref:System.Collections.SortedList.Count%2A> exceeds <xref:System.Collections.SortedList.Capacity%2A> while adding elements, the capacity is automatically increased by reallocating the internal array before copying the old elements and adding the new elements."}]}]},{"pos":[797,856],"content":"Retrieving the value of this property is an O(1) operation.","nodes":[{"content":"Retrieving the value of this property is an O(1) operation.","pos":[0,59]}]}],"pos":[62473,63338],"yaml":true,"extradata":"MT"},{"content":"The number of elements contained in the <xref href=\"System.Collections.SortedList\"></xref> object.","nodes":[{"pos":[0,98],"content":"The number of elements contained in the <ph id=\"ph1\">&lt;xref href=\"System.Collections.SortedList\"&gt;&lt;/xref&gt;</ph> object.","source":"The number of elements contained in the <xref href=\"System.Collections.SortedList\"></xref> object."}],"pos":[63451,63550],"yaml":true},{"content":"Gets the value at the specified index of a <xref href=\"System.Collections.SortedList\"></xref> object.","nodes":[{"pos":[0,101],"content":"Gets the value at the specified index of a <ph id=\"ph1\">&lt;xref href=\"System.Collections.SortedList\"&gt;&lt;/xref&gt;</ph> object.","source":"Gets the value at the specified index of a <xref href=\"System.Collections.SortedList\"></xref> object."}],"pos":[64873,64975],"yaml":true},{"content":"The index sequence is based on the sort sequence. When an element is added, it is inserted into <xref:System.Collections.SortedList> in the correct sort order, and the indexing adjusts accordingly. When an element is removed, the indexing also adjusts accordingly. Therefore, the index of a specific key/value pair might change as elements are added or removed from the <xref:System.Collections.SortedList> object.  \n  \n This method is an O(1) operation.","nodes":[{"pos":[0,414],"content":"The index sequence is based on the sort sequence. When an element is added, it is inserted into <xref:System.Collections.SortedList> in the correct sort order, and the indexing adjusts accordingly. When an element is removed, the indexing also adjusts accordingly. Therefore, the index of a specific key/value pair might change as elements are added or removed from the <xref:System.Collections.SortedList> object.","nodes":[{"content":"The index sequence is based on the sort sequence. When an element is added, it is inserted into <xref:System.Collections.SortedList> in the correct sort order, and the indexing adjusts accordingly. When an element is removed, the indexing also adjusts accordingly. Therefore, the index of a specific key/value pair might change as elements are added or removed from the <xref:System.Collections.SortedList> object.","pos":[0,414],"nodes":[{"content":"The index sequence is based on the sort sequence.","pos":[0,49]},{"content":"When an element is added, it is inserted into <ph id=\"ph1\">&lt;xref:System.Collections.SortedList&gt;</ph> in the correct sort order, and the indexing adjusts accordingly.","pos":[50,197],"source":" When an element is added, it is inserted into <xref:System.Collections.SortedList> in the correct sort order, and the indexing adjusts accordingly."},{"content":"When an element is removed, the indexing also adjusts accordingly.","pos":[198,264]},{"content":"Therefore, the index of a specific key/value pair might change as elements are added or removed from the <ph id=\"ph1\">&lt;xref:System.Collections.SortedList&gt;</ph> object.","pos":[265,414],"source":" Therefore, the index of a specific key/value pair might change as elements are added or removed from the <xref:System.Collections.SortedList> object."}]}]},{"pos":[421,454],"content":"This method is an O(1) operation.","nodes":[{"content":"This method is an O(1) operation.","pos":[0,33]}]}],"pos":[64986,65445],"yaml":true,"extradata":"MT"},{"content":"The zero-based index of the value to get.","nodes":[{"pos":[0,41],"content":"The zero-based index of the value to get.","nodes":[{"content":"The zero-based index of the value to get.","pos":[0,41]}]}],"pos":[66220,66262],"yaml":true},{"content":"The value at the specified index of the <xref href=\"System.Collections.SortedList\"></xref> object.","nodes":[{"pos":[0,98],"content":"The value at the specified index of the <ph id=\"ph1\">&lt;xref href=\"System.Collections.SortedList\"&gt;&lt;/xref&gt;</ph> object.","source":"The value at the specified index of the <xref href=\"System.Collections.SortedList\"></xref> object."}],"pos":[66319,66418],"yaml":true},{"content":"<code>index</code> is outside the range of valid indexes for the <xref href=\"System.Collections.SortedList\"></xref> object.","nodes":[{"pos":[0,123],"content":"<ph id=\"ph1\">&lt;code&gt;index&lt;/code&gt;</ph> is outside the range of valid indexes for the <ph id=\"ph2\">&lt;xref href=\"System.Collections.SortedList\"&gt;&lt;/xref&gt;</ph> object.","source":"<code>index</code> is outside the range of valid indexes for the <xref href=\"System.Collections.SortedList\"></xref> object."}],"pos":[66600,66724],"yaml":true},{"content":"Returns an <xref href=\"System.Collections.IDictionaryEnumerator\"></xref> object that iterates through a <xref href=\"System.Collections.SortedList\"></xref> object.","nodes":[{"pos":[0,162],"content":"Returns an <ph id=\"ph1\">&lt;xref href=\"System.Collections.IDictionaryEnumerator\"&gt;&lt;/xref&gt;</ph> object that iterates through a <ph id=\"ph2\">&lt;xref href=\"System.Collections.SortedList\"&gt;&lt;/xref&gt;</ph> object.","source":"Returns an <xref href=\"System.Collections.IDictionaryEnumerator\"></xref> object that iterates through a <xref href=\"System.Collections.SortedList\"></xref> object."}],"pos":[67942,68105],"yaml":true},{"content":"The `foreach` statement of the C# language (`for each` in Visual Basic) hides the complexity of the enumerators.  Therefore, using `foreach` is recommended, instead of directly manipulating the enumerator.  \n  \n Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.  \n  \n Initially, the enumerator is positioned before the first element in the collection. <xref:System.Collections.IEnumerator.Reset%2A> also brings the enumerator back to this position.  At this position, <xref:System.Collections.IEnumerator.Current%2A> is undefined. Therefore, you must call <xref:System.Collections.IEnumerator.MoveNext%2A> to advance the enumerator to the first element of the collection before reading the value of <xref:System.Collections.IEnumerator.Current%2A>.  \n  \n <xref:System.Collections.IEnumerator.Current%2A> returns the same object until either <xref:System.Collections.IEnumerator.MoveNext%2A> or <xref:System.Collections.IEnumerator.Reset%2A> is called. <xref:System.Collections.IEnumerator.MoveNext%2A> sets <xref:System.Collections.IEnumerator.Current%2A> to the next element.  \n  \n If <xref:System.Collections.IEnumerator.MoveNext%2A> passes the end of the collection, the enumerator is positioned after the last element in the collection and <xref:System.Collections.IEnumerator.MoveNext%2A> returns `false`. When the enumerator is at this position, subsequent calls to <xref:System.Collections.IEnumerator.MoveNext%2A> also return `false`. If the last call to <xref:System.Collections.IEnumerator.MoveNext%2A> returned `false`, <xref:System.Collections.IEnumerator.Current%2A> is undefined. To set <xref:System.Collections.IEnumerator.Current%2A> to the first element of the collection again, you can call <xref:System.Collections.IEnumerator.Reset%2A> followed by <xref:System.Collections.IEnumerator.MoveNext%2A>.  \n  \n An enumerator remains valid as long as the collection remains unchanged. If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and its behavior is undefined.  \n  \n The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure.  To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.  To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.  \n  \n This method is an O(1) operation.","nodes":[{"pos":[0,205],"content":"The `foreach` statement of the C# language (`for each` in Visual Basic) hides the complexity of the enumerators.  Therefore, using `foreach` is recommended, instead of directly manipulating the enumerator.","nodes":[{"content":"The <ph id=\"ph1\">`foreach`</ph> statement of the C# language (<ph id=\"ph2\">`for each`</ph> in Visual Basic) hides the complexity of the enumerators.","pos":[0,112],"source":"The `foreach` statement of the C# language (`for each` in Visual Basic) hides the complexity of the enumerators."},{"content":"Therefore, using <ph id=\"ph1\">`foreach`</ph> is recommended, instead of directly manipulating the enumerator.","pos":[114,205],"source":"  Therefore, using `foreach` is recommended, instead of directly manipulating the enumerator."}]},{"pos":[212,332],"content":"Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.","nodes":[{"content":"Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.","pos":[0,120]}]},{"pos":[339,819],"content":"Initially, the enumerator is positioned before the first element in the collection. <xref:System.Collections.IEnumerator.Reset%2A> also brings the enumerator back to this position.  At this position, <xref:System.Collections.IEnumerator.Current%2A> is undefined. Therefore, you must call <xref:System.Collections.IEnumerator.MoveNext%2A> to advance the enumerator to the first element of the collection before reading the value of <xref:System.Collections.IEnumerator.Current%2A>.","nodes":[{"content":"Initially, the enumerator is positioned before the first element in the collection. <xref:System.Collections.IEnumerator.Reset%2A> also brings the enumerator back to this position.  At this position, <xref:System.Collections.IEnumerator.Current%2A> is undefined. Therefore, you must call <xref:System.Collections.IEnumerator.MoveNext%2A> to advance the enumerator to the first element of the collection before reading the value of <xref:System.Collections.IEnumerator.Current%2A>.","pos":[0,480],"nodes":[{"content":"Initially, the enumerator is positioned before the first element in the collection.","pos":[0,83]},{"content":"<ph id=\"ph1\">&lt;xref:System.Collections.IEnumerator.Reset%2A&gt;</ph> also brings the enumerator back to this position.","pos":[84,180],"source":" <xref:System.Collections.IEnumerator.Reset%2A> also brings the enumerator back to this position."},{"content":"At this position, <ph id=\"ph1\">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> is undefined.","pos":[182,262],"source":"  At this position, <xref:System.Collections.IEnumerator.Current%2A> is undefined."},{"content":"Therefore, you must call <ph id=\"ph1\">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> to advance the enumerator to the first element of the collection before reading the value of <ph id=\"ph2\">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph>.","pos":[263,480],"source":" Therefore, you must call <xref:System.Collections.IEnumerator.MoveNext%2A> to advance the enumerator to the first element of the collection before reading the value of <xref:System.Collections.IEnumerator.Current%2A>."}]}]},{"pos":[826,1147],"content":"<xref:System.Collections.IEnumerator.Current%2A> returns the same object until either <xref:System.Collections.IEnumerator.MoveNext%2A> or <xref:System.Collections.IEnumerator.Reset%2A> is called. <xref:System.Collections.IEnumerator.MoveNext%2A> sets <xref:System.Collections.IEnumerator.Current%2A> to the next element.","nodes":[{"content":"<xref:System.Collections.IEnumerator.Current%2A> returns the same object until either <xref:System.Collections.IEnumerator.MoveNext%2A> or <xref:System.Collections.IEnumerator.Reset%2A> is called. <xref:System.Collections.IEnumerator.MoveNext%2A> sets <xref:System.Collections.IEnumerator.Current%2A> to the next element.","pos":[0,321],"nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> returns the same object until either <ph id=\"ph2\">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> or <ph id=\"ph3\">&lt;xref:System.Collections.IEnumerator.Reset%2A&gt;</ph> is called.","pos":[0,196],"source":"<xref:System.Collections.IEnumerator.Current%2A> returns the same object until either <xref:System.Collections.IEnumerator.MoveNext%2A> or <xref:System.Collections.IEnumerator.Reset%2A> is called."},{"content":"<ph id=\"ph1\">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> sets <ph id=\"ph2\">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> to the next element.","pos":[197,321],"source":" <xref:System.Collections.IEnumerator.MoveNext%2A> sets <xref:System.Collections.IEnumerator.Current%2A> to the next element."}]}]},{"pos":[1154,1889],"content":"If <xref:System.Collections.IEnumerator.MoveNext%2A> passes the end of the collection, the enumerator is positioned after the last element in the collection and <xref:System.Collections.IEnumerator.MoveNext%2A> returns `false`. When the enumerator is at this position, subsequent calls to <xref:System.Collections.IEnumerator.MoveNext%2A> also return `false`. If the last call to <xref:System.Collections.IEnumerator.MoveNext%2A> returned `false`, <xref:System.Collections.IEnumerator.Current%2A> is undefined. To set <xref:System.Collections.IEnumerator.Current%2A> to the first element of the collection again, you can call <xref:System.Collections.IEnumerator.Reset%2A> followed by <xref:System.Collections.IEnumerator.MoveNext%2A>.","nodes":[{"content":"If <ph id=\"ph1\">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> passes the end of the collection, the enumerator is positioned after the last element in the collection and <ph id=\"ph2\">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> returns <ph id=\"ph3\">`false`</ph>.","pos":[0,227],"source":"If <xref:System.Collections.IEnumerator.MoveNext%2A> passes the end of the collection, the enumerator is positioned after the last element in the collection and <xref:System.Collections.IEnumerator.MoveNext%2A> returns `false`."},{"content":"When the enumerator is at this position, subsequent calls to <ph id=\"ph1\">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> also return <ph id=\"ph2\">`false`</ph>.","pos":[228,359],"source":" When the enumerator is at this position, subsequent calls to <xref:System.Collections.IEnumerator.MoveNext%2A> also return `false`."},{"content":"If the last call to <ph id=\"ph1\">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> returned <ph id=\"ph2\">`false`</ph>, <ph id=\"ph3\">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> is undefined.","pos":[360,510],"source":" If the last call to <xref:System.Collections.IEnumerator.MoveNext%2A> returned `false`, <xref:System.Collections.IEnumerator.Current%2A> is undefined."},{"content":"To set <ph id=\"ph1\">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> to the first element of the collection again, you can call <ph id=\"ph2\">&lt;xref:System.Collections.IEnumerator.Reset%2A&gt;</ph> followed by <ph id=\"ph3\">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph>.","pos":[511,735],"source":" To set <xref:System.Collections.IEnumerator.Current%2A> to the first element of the collection again, you can call <xref:System.Collections.IEnumerator.Reset%2A> followed by <xref:System.Collections.IEnumerator.MoveNext%2A>."}]},{"pos":[1896,2131],"content":"An enumerator remains valid as long as the collection remains unchanged. If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and its behavior is undefined.","nodes":[{"content":"An enumerator remains valid as long as the collection remains unchanged. If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and its behavior is undefined.","pos":[0,235],"nodes":[{"content":"An enumerator remains valid as long as the collection remains unchanged.","pos":[0,72]},{"content":"If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and its behavior is undefined.","pos":[73,235]}]}]},{"pos":[2138,2529],"content":"The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure.  To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.  To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.","nodes":[{"content":"The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure.  To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.  To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.","pos":[0,391],"nodes":[{"content":"The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure.","pos":[0,154]},{"content":"To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.","pos":[156,261]},{"content":"To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.","pos":[263,391]}]}]},{"pos":[2536,2569],"content":"This method is an O(1) operation.","nodes":[{"content":"This method is an O(1) operation.","pos":[0,33]}]}],"pos":[68116,70702],"yaml":true,"extradata":"MT"},{"content":"An <xref href=\"System.Collections.IDictionaryEnumerator\"></xref> object for the <xref href=\"System.Collections.SortedList\"></xref> object.","nodes":[{"pos":[0,138],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Collections.IDictionaryEnumerator\"&gt;&lt;/xref&gt;</ph> object for the <ph id=\"ph2\">&lt;xref href=\"System.Collections.SortedList\"&gt;&lt;/xref&gt;</ph> object.","source":"An <xref href=\"System.Collections.IDictionaryEnumerator\"></xref> object for the <xref href=\"System.Collections.SortedList\"></xref> object."}],"pos":[70902,71041],"yaml":true},{"content":"Gets the key at the specified index of a <xref href=\"System.Collections.SortedList\"></xref> object.","nodes":[{"pos":[0,99],"content":"Gets the key at the specified index of a <ph id=\"ph1\">&lt;xref href=\"System.Collections.SortedList\"&gt;&lt;/xref&gt;</ph> object.","source":"Gets the key at the specified index of a <xref href=\"System.Collections.SortedList\"></xref> object."}],"pos":[72348,72448],"yaml":true},{"content":"The index sequence is based on the sort sequence. When an element is added, it is inserted into <xref:System.Collections.SortedList> in the correct sort order, and the indexing adjusts accordingly. When an element is removed, the indexing also adjusts accordingly. Therefore, the index of a specific key/value pair might change as elements are added or removed from the <xref:System.Collections.SortedList> object.  \n  \n This method is an O(1) operation.","nodes":[{"pos":[0,414],"content":"The index sequence is based on the sort sequence. When an element is added, it is inserted into <xref:System.Collections.SortedList> in the correct sort order, and the indexing adjusts accordingly. When an element is removed, the indexing also adjusts accordingly. Therefore, the index of a specific key/value pair might change as elements are added or removed from the <xref:System.Collections.SortedList> object.","nodes":[{"content":"The index sequence is based on the sort sequence. When an element is added, it is inserted into <xref:System.Collections.SortedList> in the correct sort order, and the indexing adjusts accordingly. When an element is removed, the indexing also adjusts accordingly. Therefore, the index of a specific key/value pair might change as elements are added or removed from the <xref:System.Collections.SortedList> object.","pos":[0,414],"nodes":[{"content":"The index sequence is based on the sort sequence.","pos":[0,49]},{"content":"When an element is added, it is inserted into <ph id=\"ph1\">&lt;xref:System.Collections.SortedList&gt;</ph> in the correct sort order, and the indexing adjusts accordingly.","pos":[50,197],"source":" When an element is added, it is inserted into <xref:System.Collections.SortedList> in the correct sort order, and the indexing adjusts accordingly."},{"content":"When an element is removed, the indexing also adjusts accordingly.","pos":[198,264]},{"content":"Therefore, the index of a specific key/value pair might change as elements are added or removed from the <ph id=\"ph1\">&lt;xref:System.Collections.SortedList&gt;</ph> object.","pos":[265,414],"source":" Therefore, the index of a specific key/value pair might change as elements are added or removed from the <xref:System.Collections.SortedList> object."}]}]},{"pos":[421,454],"content":"This method is an O(1) operation.","nodes":[{"content":"This method is an O(1) operation.","pos":[0,33]}]}],"pos":[72459,72918],"yaml":true,"extradata":"MT"},{"content":"The zero-based index of the key to get.","nodes":[{"pos":[0,39],"content":"The zero-based index of the key to get.","nodes":[{"content":"The zero-based index of the key to get.","pos":[0,39]}]}],"pos":[73689,73729],"yaml":true},{"content":"The key at the specified index of the <xref href=\"System.Collections.SortedList\"></xref> object.","nodes":[{"pos":[0,96],"content":"The key at the specified index of the <ph id=\"ph1\">&lt;xref href=\"System.Collections.SortedList\"&gt;&lt;/xref&gt;</ph> object.","source":"The key at the specified index of the <xref href=\"System.Collections.SortedList\"></xref> object."}],"pos":[73786,73883],"yaml":true},{"content":"<code>index</code> is outside the range of valid indexes for the <xref href=\"System.Collections.SortedList\"></xref> object.","nodes":[{"pos":[0,123],"content":"<ph id=\"ph1\">&lt;code&gt;index&lt;/code&gt;</ph> is outside the range of valid indexes for the <ph id=\"ph2\">&lt;xref href=\"System.Collections.SortedList\"&gt;&lt;/xref&gt;</ph> object.","source":"<code>index</code> is outside the range of valid indexes for the <xref href=\"System.Collections.SortedList\"></xref> object."}],"pos":[74061,74185],"yaml":true},{"content":"Gets the keys in a <xref href=\"System.Collections.SortedList\"></xref> object.","nodes":[{"pos":[0,77],"content":"Gets the keys in a <ph id=\"ph1\">&lt;xref href=\"System.Collections.SortedList\"&gt;&lt;/xref&gt;</ph> object.","source":"Gets the keys in a <xref href=\"System.Collections.SortedList\"></xref> object."}],"pos":[75385,75463],"yaml":true},{"content":"The returned <xref:System.Collections.IList> object is a read-only view of the keys of the <xref:System.Collections.SortedList> object. Modifications made to the underlying <xref:System.Collections.SortedList> are immediately reflected in the <xref:System.Collections.IList>.  \n  \n The elements of the returned <xref:System.Collections.IList> are sorted in the same order as the keys of the <xref:System.Collections.SortedList>.  \n  \n This method is similar to the <xref:System.Collections.SortedList.Keys%2A> property, but returns an <xref:System.Collections.IList> object instead of an <xref:System.Collections.ICollection> object.  \n  \n This method is an O(1) operation.","nodes":[{"pos":[0,275],"content":"The returned <xref:System.Collections.IList> object is a read-only view of the keys of the <xref:System.Collections.SortedList> object. Modifications made to the underlying <xref:System.Collections.SortedList> are immediately reflected in the <xref:System.Collections.IList>.","nodes":[{"content":"The returned <xref:System.Collections.IList> object is a read-only view of the keys of the <xref:System.Collections.SortedList> object. Modifications made to the underlying <xref:System.Collections.SortedList> are immediately reflected in the <xref:System.Collections.IList>.","pos":[0,275],"nodes":[{"content":"The returned <ph id=\"ph1\">&lt;xref:System.Collections.IList&gt;</ph> object is a read-only view of the keys of the <ph id=\"ph2\">&lt;xref:System.Collections.SortedList&gt;</ph> object.","pos":[0,135],"source":"The returned <xref:System.Collections.IList> object is a read-only view of the keys of the <xref:System.Collections.SortedList> object."},{"content":"Modifications made to the underlying <ph id=\"ph1\">&lt;xref:System.Collections.SortedList&gt;</ph> are immediately reflected in the <ph id=\"ph2\">&lt;xref:System.Collections.IList&gt;</ph>.","pos":[136,275],"source":" Modifications made to the underlying <xref:System.Collections.SortedList> are immediately reflected in the <xref:System.Collections.IList>."}]}]},{"pos":[282,428],"content":"The elements of the returned <xref:System.Collections.IList> are sorted in the same order as the keys of the <xref:System.Collections.SortedList>.","nodes":[{"content":"The elements of the returned <ph id=\"ph1\">&lt;xref:System.Collections.IList&gt;</ph> are sorted in the same order as the keys of the <ph id=\"ph2\">&lt;xref:System.Collections.SortedList&gt;</ph>.","pos":[0,146],"source":"The elements of the returned <xref:System.Collections.IList> are sorted in the same order as the keys of the <xref:System.Collections.SortedList>."}]},{"pos":[435,633],"content":"This method is similar to the <xref:System.Collections.SortedList.Keys%2A> property, but returns an <xref:System.Collections.IList> object instead of an <xref:System.Collections.ICollection> object.","nodes":[{"content":"This method is similar to the <ph id=\"ph1\">&lt;xref:System.Collections.SortedList.Keys%2A&gt;</ph> property, but returns an <ph id=\"ph2\">&lt;xref:System.Collections.IList&gt;</ph> object instead of an <ph id=\"ph3\">&lt;xref:System.Collections.ICollection&gt;</ph> object.","pos":[0,198],"source":"This method is similar to the <xref:System.Collections.SortedList.Keys%2A> property, but returns an <xref:System.Collections.IList> object instead of an <xref:System.Collections.ICollection> object."}]},{"pos":[640,673],"content":"This method is an O(1) operation.","nodes":[{"content":"This method is an O(1) operation.","pos":[0,33]}]}],"pos":[75474,76156],"yaml":true,"extradata":"MT"},{"content":"An <xref href=\"System.Collections.IList\"></xref> object containing the keys in the <xref href=\"System.Collections.SortedList\"></xref> object.","nodes":[{"pos":[0,141],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Collections.IList\"&gt;&lt;/xref&gt;</ph> object containing the keys in the <ph id=\"ph2\">&lt;xref href=\"System.Collections.SortedList\"&gt;&lt;/xref&gt;</ph> object.","source":"An <xref href=\"System.Collections.IList\"></xref> object containing the keys in the <xref href=\"System.Collections.SortedList\"></xref> object."}],"pos":[76951,77093],"yaml":true},{"content":"Gets the values in a <xref href=\"System.Collections.SortedList\"></xref> object.","nodes":[{"pos":[0,79],"content":"Gets the values in a <ph id=\"ph1\">&lt;xref href=\"System.Collections.SortedList\"&gt;&lt;/xref&gt;</ph> object.","source":"Gets the values in a <xref href=\"System.Collections.SortedList\"></xref> object."}],"pos":[78376,78456],"yaml":true},{"content":"The returned <xref:System.Collections.IList> object is a read-only view of the values of the <xref:System.Collections.SortedList> object. Modifications made to the underlying <xref:System.Collections.SortedList> are immediately reflected in the <xref:System.Collections.IList>.  \n  \n The elements of the returned <xref:System.Collections.IList> are sorted in the same order as the values of the <xref:System.Collections.SortedList>.  \n  \n This method is similar to the <xref:System.Collections.SortedList.Values%2A> property, but returns an <xref:System.Collections.IList> object instead of an <xref:System.Collections.ICollection> object.  \n  \n This method is an O(1) operation.","nodes":[{"pos":[0,277],"content":"The returned <xref:System.Collections.IList> object is a read-only view of the values of the <xref:System.Collections.SortedList> object. Modifications made to the underlying <xref:System.Collections.SortedList> are immediately reflected in the <xref:System.Collections.IList>.","nodes":[{"content":"The returned <xref:System.Collections.IList> object is a read-only view of the values of the <xref:System.Collections.SortedList> object. Modifications made to the underlying <xref:System.Collections.SortedList> are immediately reflected in the <xref:System.Collections.IList>.","pos":[0,277],"nodes":[{"content":"The returned <ph id=\"ph1\">&lt;xref:System.Collections.IList&gt;</ph> object is a read-only view of the values of the <ph id=\"ph2\">&lt;xref:System.Collections.SortedList&gt;</ph> object.","pos":[0,137],"source":"The returned <xref:System.Collections.IList> object is a read-only view of the values of the <xref:System.Collections.SortedList> object."},{"content":"Modifications made to the underlying <ph id=\"ph1\">&lt;xref:System.Collections.SortedList&gt;</ph> are immediately reflected in the <ph id=\"ph2\">&lt;xref:System.Collections.IList&gt;</ph>.","pos":[138,277],"source":" Modifications made to the underlying <xref:System.Collections.SortedList> are immediately reflected in the <xref:System.Collections.IList>."}]}]},{"pos":[284,432],"content":"The elements of the returned <xref:System.Collections.IList> are sorted in the same order as the values of the <xref:System.Collections.SortedList>.","nodes":[{"content":"The elements of the returned <ph id=\"ph1\">&lt;xref:System.Collections.IList&gt;</ph> are sorted in the same order as the values of the <ph id=\"ph2\">&lt;xref:System.Collections.SortedList&gt;</ph>.","pos":[0,148],"source":"The elements of the returned <xref:System.Collections.IList> are sorted in the same order as the values of the <xref:System.Collections.SortedList>."}]},{"pos":[439,639],"content":"This method is similar to the <xref:System.Collections.SortedList.Values%2A> property, but returns an <xref:System.Collections.IList> object instead of an <xref:System.Collections.ICollection> object.","nodes":[{"content":"This method is similar to the <ph id=\"ph1\">&lt;xref:System.Collections.SortedList.Values%2A&gt;</ph> property, but returns an <ph id=\"ph2\">&lt;xref:System.Collections.IList&gt;</ph> object instead of an <ph id=\"ph3\">&lt;xref:System.Collections.ICollection&gt;</ph> object.","pos":[0,200],"source":"This method is similar to the <xref:System.Collections.SortedList.Values%2A> property, but returns an <xref:System.Collections.IList> object instead of an <xref:System.Collections.ICollection> object."}]},{"pos":[646,679],"content":"This method is an O(1) operation.","nodes":[{"content":"This method is an O(1) operation.","pos":[0,33]}]}],"pos":[78467,79155],"yaml":true,"extradata":"MT"},{"content":"An <xref href=\"System.Collections.IList\"></xref> object containing the values in the <xref href=\"System.Collections.SortedList\"></xref> object.","nodes":[{"pos":[0,143],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Collections.IList\"&gt;&lt;/xref&gt;</ph> object containing the values in the <ph id=\"ph2\">&lt;xref href=\"System.Collections.SortedList\"&gt;&lt;/xref&gt;</ph> object.","source":"An <xref href=\"System.Collections.IList\"></xref> object containing the values in the <xref href=\"System.Collections.SortedList\"></xref> object."}],"pos":[79952,80096],"yaml":true},{"content":"Returns the zero-based index of the specified key in a <xref href=\"System.Collections.SortedList\"></xref> object.","nodes":[{"pos":[0,113],"content":"Returns the zero-based index of the specified key in a <ph id=\"ph1\">&lt;xref href=\"System.Collections.SortedList\"&gt;&lt;/xref&gt;</ph> object.","source":"Returns the zero-based index of the specified key in a <xref href=\"System.Collections.SortedList\"></xref> object."}],"pos":[81432,81546],"yaml":true},{"content":"The elements of a <xref:System.Collections.SortedList> object are sorted by the keys either according to a specific <xref:System.Collections.IComparer> implementation specified when the <xref:System.Collections.SortedList> is created, or according to the <xref:System.IComparable> implementation provided by the keys themselves.  \n  \n The index sequence is based on the sort sequence. When an element is added, it is inserted into <xref:System.Collections.SortedList> in the correct sort order, and the indexing adjusts accordingly. When an element is removed, the indexing also adjusts accordingly. Therefore, the index of a specific key/value pair might change as elements are added or removed from the <xref:System.Collections.SortedList>.  \n  \n This method uses a binary search algorithm; therefore, this method is an O(log `n`) operation, where `n` is <xref:System.Collections.SortedList.Count%2A>.  \n  \n Starting with the .NET Framework 2.0, this method uses the collection’s objects’ <xref:System.Object.Equals%2A> and <xref:System.IComparable.CompareTo%2A> methods on `item` to determine whether item exists. In the earlier versions of the .NET Framework, this determination was made by using the <xref:System.Object.Equals%2A> and <xref:System.IComparable.CompareTo%2A> methods of the `item` parameter on the objects in the collection.","nodes":[{"pos":[0,328],"content":"The elements of a <xref:System.Collections.SortedList> object are sorted by the keys either according to a specific <xref:System.Collections.IComparer> implementation specified when the <xref:System.Collections.SortedList> is created, or according to the <xref:System.IComparable> implementation provided by the keys themselves.","nodes":[{"content":"The elements of a <ph id=\"ph1\">&lt;xref:System.Collections.SortedList&gt;</ph> object are sorted by the keys either according to a specific <ph id=\"ph2\">&lt;xref:System.Collections.IComparer&gt;</ph> implementation specified when the <ph id=\"ph3\">&lt;xref:System.Collections.SortedList&gt;</ph> is created, or according to the <ph id=\"ph4\">&lt;xref:System.IComparable&gt;</ph> implementation provided by the keys themselves.","pos":[0,328],"source":"The elements of a <xref:System.Collections.SortedList> object are sorted by the keys either according to a specific <xref:System.Collections.IComparer> implementation specified when the <xref:System.Collections.SortedList> is created, or according to the <xref:System.IComparable> implementation provided by the keys themselves."}]},{"pos":[335,742],"content":"The index sequence is based on the sort sequence. When an element is added, it is inserted into <xref:System.Collections.SortedList> in the correct sort order, and the indexing adjusts accordingly. When an element is removed, the indexing also adjusts accordingly. Therefore, the index of a specific key/value pair might change as elements are added or removed from the <xref:System.Collections.SortedList>.","nodes":[{"content":"The index sequence is based on the sort sequence. When an element is added, it is inserted into <xref:System.Collections.SortedList> in the correct sort order, and the indexing adjusts accordingly. When an element is removed, the indexing also adjusts accordingly. Therefore, the index of a specific key/value pair might change as elements are added or removed from the <xref:System.Collections.SortedList>.","pos":[0,407],"nodes":[{"content":"The index sequence is based on the sort sequence.","pos":[0,49]},{"content":"When an element is added, it is inserted into <ph id=\"ph1\">&lt;xref:System.Collections.SortedList&gt;</ph> in the correct sort order, and the indexing adjusts accordingly.","pos":[50,197],"source":" When an element is added, it is inserted into <xref:System.Collections.SortedList> in the correct sort order, and the indexing adjusts accordingly."},{"content":"When an element is removed, the indexing also adjusts accordingly.","pos":[198,264]},{"content":"Therefore, the index of a specific key/value pair might change as elements are added or removed from the <ph id=\"ph1\">&lt;xref:System.Collections.SortedList&gt;</ph>.","pos":[265,407],"source":" Therefore, the index of a specific key/value pair might change as elements are added or removed from the <xref:System.Collections.SortedList>."}]}]},{"pos":[749,903],"content":"This method uses a binary search algorithm; therefore, this method is an O(log <ph id=\"ph1\">`n`</ph>) operation, where <ph id=\"ph2\">`n`</ph> is <ph id=\"ph3\">&lt;xref:System.Collections.SortedList.Count%2A&gt;</ph>.","source":"This method uses a binary search algorithm; therefore, this method is an O(log `n`) operation, where `n` is <xref:System.Collections.SortedList.Count%2A>."},{"pos":[910,1344],"content":"Starting with the .NET Framework 2.0, this method uses the collection’s objects’ <xref:System.Object.Equals%2A> and <xref:System.IComparable.CompareTo%2A> methods on `item` to determine whether item exists. In the earlier versions of the .NET Framework, this determination was made by using the <xref:System.Object.Equals%2A> and <xref:System.IComparable.CompareTo%2A> methods of the `item` parameter on the objects in the collection.","nodes":[{"content":"Starting with the .NET Framework 2.0, this method uses the collection’s objects’ <ph id=\"ph1\">&lt;xref:System.Object.Equals%2A&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.IComparable.CompareTo%2A&gt;</ph> methods on <ph id=\"ph3\">`item`</ph> to determine whether item exists.","pos":[0,206],"source":"Starting with the .NET Framework 2.0, this method uses the collection’s objects’ <xref:System.Object.Equals%2A> and <xref:System.IComparable.CompareTo%2A> methods on `item` to determine whether item exists."},{"content":"In the earlier versions of the .NET Framework, this determination was made by using the <ph id=\"ph1\">&lt;xref:System.Object.Equals%2A&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.IComparable.CompareTo%2A&gt;</ph> methods of the <ph id=\"ph3\">`item`</ph> parameter on the objects in the collection.","pos":[207,434],"source":" In the earlier versions of the .NET Framework, this determination was made by using the <xref:System.Object.Equals%2A> and <xref:System.IComparable.CompareTo%2A> methods of the `item` parameter on the objects in the collection."}]}],"pos":[81557,82910],"yaml":true,"extradata":"MT"},{"content":"The key to locate in the <xref href=\"System.Collections.SortedList\"></xref> object.","nodes":[{"pos":[0,83],"content":"The key to locate in the <ph id=\"ph1\">&lt;xref href=\"System.Collections.SortedList\"&gt;&lt;/xref&gt;</ph> object.","source":"The key to locate in the <xref href=\"System.Collections.SortedList\"></xref> object."}],"pos":[83688,83772],"yaml":true},{"content":"The zero-based index of the <code>key</code> parameter, if <code>key</code> is found in the <xref href=\"System.Collections.SortedList\"></xref> object; otherwise, -1.","nodes":[{"pos":[0,165],"content":"The zero-based index of the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">key</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter, if <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">key</ph><ept id=\"p2\">&lt;/code&gt;</ept> is found in the <ph id=\"ph3\">&lt;xref href=\"System.Collections.SortedList\"&gt;&lt;/xref&gt;</ph> object; otherwise, -1.","source":"The zero-based index of the <code>key</code> parameter, if <code>key</code> is found in the <xref href=\"System.Collections.SortedList\"></xref> object; otherwise, -1."}],"pos":[83828,83994],"yaml":true},{"content":"<code>key</code> is `null`.","nodes":[{"pos":[0,27],"content":"<ph id=\"ph1\">&lt;code&gt;key&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>key</code> is `null`."}],"pos":[84164,84192],"yaml":true},{"content":"The comparer throws an exception.","nodes":[{"pos":[0,33],"content":"The comparer throws an exception.","nodes":[{"content":"The comparer throws an exception.","pos":[0,33]}]}],"pos":[84302,84336],"yaml":true},{"content":"Returns the zero-based index of the first occurrence of the specified value in a <xref href=\"System.Collections.SortedList\"></xref> object.","nodes":[{"pos":[0,139],"content":"Returns the zero-based index of the first occurrence of the specified value in a <ph id=\"ph1\">&lt;xref href=\"System.Collections.SortedList\"&gt;&lt;/xref&gt;</ph> object.","source":"Returns the zero-based index of the first occurrence of the specified value in a <xref href=\"System.Collections.SortedList\"></xref> object."}],"pos":[85611,85751],"yaml":true},{"content":"The index sequence is based on the sort sequence. When an element is added, it is inserted into <xref:System.Collections.SortedList> in the correct sort order, and the indexing adjusts accordingly. When an element is removed, the indexing also adjusts accordingly. Therefore, the index of a specific key/value pair might change as elements are added or removed from the <xref:System.Collections.SortedList> object.  \n  \n The values of the elements of the <xref:System.Collections.SortedList> are compared to the specified value using the <xref:System.Object.Equals%2A> method.  \n  \n This method uses a linear search; therefore, this method is an O(`n`) operation, where `n` is <xref:System.Collections.SortedList.Count%2A>.  \n  \n Starting with the .NET Framework 2.0, this method uses the collection’s objects’ <xref:System.Object.Equals%2A> and <xref:System.IComparable.CompareTo%2A> methods on `item` to determine whether item exists. In the earlier versions of the .NET Framework, this determination was made by using the <xref:System.Object.Equals%2A> and <xref:System.IComparable.CompareTo%2A> methods of the `item` parameter on the objects in the collection.","nodes":[{"pos":[0,414],"content":"The index sequence is based on the sort sequence. When an element is added, it is inserted into <xref:System.Collections.SortedList> in the correct sort order, and the indexing adjusts accordingly. When an element is removed, the indexing also adjusts accordingly. Therefore, the index of a specific key/value pair might change as elements are added or removed from the <xref:System.Collections.SortedList> object.","nodes":[{"content":"The index sequence is based on the sort sequence. When an element is added, it is inserted into <xref:System.Collections.SortedList> in the correct sort order, and the indexing adjusts accordingly. When an element is removed, the indexing also adjusts accordingly. Therefore, the index of a specific key/value pair might change as elements are added or removed from the <xref:System.Collections.SortedList> object.","pos":[0,414],"nodes":[{"content":"The index sequence is based on the sort sequence.","pos":[0,49]},{"content":"When an element is added, it is inserted into <ph id=\"ph1\">&lt;xref:System.Collections.SortedList&gt;</ph> in the correct sort order, and the indexing adjusts accordingly.","pos":[50,197],"source":" When an element is added, it is inserted into <xref:System.Collections.SortedList> in the correct sort order, and the indexing adjusts accordingly."},{"content":"When an element is removed, the indexing also adjusts accordingly.","pos":[198,264]},{"content":"Therefore, the index of a specific key/value pair might change as elements are added or removed from the <ph id=\"ph1\">&lt;xref:System.Collections.SortedList&gt;</ph> object.","pos":[265,414],"source":" Therefore, the index of a specific key/value pair might change as elements are added or removed from the <xref:System.Collections.SortedList> object."}]}]},{"pos":[421,576],"content":"The values of the elements of the <xref:System.Collections.SortedList> are compared to the specified value using the <xref:System.Object.Equals%2A> method.","nodes":[{"content":"The values of the elements of the <ph id=\"ph1\">&lt;xref:System.Collections.SortedList&gt;</ph> are compared to the specified value using the <ph id=\"ph2\">&lt;xref:System.Object.Equals%2A&gt;</ph> method.","pos":[0,155],"source":"The values of the elements of the <xref:System.Collections.SortedList> are compared to the specified value using the <xref:System.Object.Equals%2A> method."}]},{"pos":[583,723],"content":"This method uses a linear search; therefore, this method is an O(<ph id=\"ph1\">`n`</ph>) operation, where <ph id=\"ph2\">`n`</ph> is <ph id=\"ph3\">&lt;xref:System.Collections.SortedList.Count%2A&gt;</ph>.","source":"This method uses a linear search; therefore, this method is an O(`n`) operation, where `n` is <xref:System.Collections.SortedList.Count%2A>."},{"pos":[730,1164],"content":"Starting with the .NET Framework 2.0, this method uses the collection’s objects’ <xref:System.Object.Equals%2A> and <xref:System.IComparable.CompareTo%2A> methods on `item` to determine whether item exists. In the earlier versions of the .NET Framework, this determination was made by using the <xref:System.Object.Equals%2A> and <xref:System.IComparable.CompareTo%2A> methods of the `item` parameter on the objects in the collection.","nodes":[{"content":"Starting with the .NET Framework 2.0, this method uses the collection’s objects’ <ph id=\"ph1\">&lt;xref:System.Object.Equals%2A&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.IComparable.CompareTo%2A&gt;</ph> methods on <ph id=\"ph3\">`item`</ph> to determine whether item exists.","pos":[0,206],"source":"Starting with the .NET Framework 2.0, this method uses the collection’s objects’ <xref:System.Object.Equals%2A> and <xref:System.IComparable.CompareTo%2A> methods on `item` to determine whether item exists."},{"content":"In the earlier versions of the .NET Framework, this determination was made by using the <ph id=\"ph1\">&lt;xref:System.Object.Equals%2A&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.IComparable.CompareTo%2A&gt;</ph> methods of the <ph id=\"ph3\">`item`</ph> parameter on the objects in the collection.","pos":[207,434],"source":" In the earlier versions of the .NET Framework, this determination was made by using the <xref:System.Object.Equals%2A> and <xref:System.IComparable.CompareTo%2A> methods of the `item` parameter on the objects in the collection."}]}],"pos":[85762,86935],"yaml":true,"extradata":"MT"},{"content":"The value to locate in the <xref href=\"System.Collections.SortedList\"></xref> object. The value can be `null`.","nodes":[{"pos":[0,110],"content":"The value to locate in the <xref href=\"System.Collections.SortedList\"></xref> object. The value can be `null`.","nodes":[{"content":"The value to locate in the <ph id=\"ph1\">&lt;xref href=\"System.Collections.SortedList\"&gt;&lt;/xref&gt;</ph> object.","pos":[0,85],"source":"The value to locate in the <xref href=\"System.Collections.SortedList\"></xref> object."},{"content":"The value can be <ph id=\"ph1\">`null`</ph>.","pos":[86,110],"source":" The value can be `null`."}]}],"pos":[87719,87830],"yaml":true},{"content":"The zero-based index of the first occurrence of the <code>value</code> parameter, if <code>value</code> is found in the <xref href=\"System.Collections.SortedList\"></xref> object; otherwise, -1.","nodes":[{"pos":[0,193],"content":"The zero-based index of the first occurrence of the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter, if <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">value</ph><ept id=\"p2\">&lt;/code&gt;</ept> is found in the <ph id=\"ph3\">&lt;xref href=\"System.Collections.SortedList\"&gt;&lt;/xref&gt;</ph> object; otherwise, -1.","source":"The zero-based index of the first occurrence of the <code>value</code> parameter, if <code>value</code> is found in the <xref href=\"System.Collections.SortedList\"></xref> object; otherwise, -1."}],"pos":[87886,88080],"yaml":true},{"content":"Gets a value indicating whether a <xref href=\"System.Collections.SortedList\"></xref> object has a fixed size.","nodes":[{"pos":[0,109],"content":"Gets a value indicating whether a <ph id=\"ph1\">&lt;xref href=\"System.Collections.SortedList\"&gt;&lt;/xref&gt;</ph> object has a fixed size.","source":"Gets a value indicating whether a <xref href=\"System.Collections.SortedList\"></xref> object has a fixed size."}],"pos":[89355,89465],"yaml":true},{"content":"A collection with a fixed size does not allow the addition or removal of elements after the collection is created, but does allow the modification of existing elements.  \n  \n A collection with a fixed size is simply a collection with a wrapper that prevents adding and removing elements; therefore, if changes are made to the underlying collection, including the addition or removal of elements, the fixed-size collection reflects those changes.  \n  \n Retrieving the value of this property is an O(1) operation.","nodes":[{"pos":[0,168],"content":"A collection with a fixed size does not allow the addition or removal of elements after the collection is created, but does allow the modification of existing elements.","nodes":[{"content":"A collection with a fixed size does not allow the addition or removal of elements after the collection is created, but does allow the modification of existing elements.","pos":[0,168]}]},{"pos":[175,445],"content":"A collection with a fixed size is simply a collection with a wrapper that prevents adding and removing elements; therefore, if changes are made to the underlying collection, including the addition or removal of elements, the fixed-size collection reflects those changes.","nodes":[{"content":"A collection with a fixed size is simply a collection with a wrapper that prevents adding and removing elements; therefore, if changes are made to the underlying collection, including the addition or removal of elements, the fixed-size collection reflects those changes.","pos":[0,270]}]},{"pos":[452,511],"content":"Retrieving the value of this property is an O(1) operation.","nodes":[{"content":"Retrieving the value of this property is an O(1) operation.","pos":[0,59]}]}],"pos":[89476,89994],"yaml":true,"extradata":"MT"},{"content":"`true` if the <xref href=\"System.Collections.SortedList\"></xref> object has a fixed size; otherwise, `false`. The default is `false`.","nodes":[{"pos":[0,133],"content":"`true` if the <xref href=\"System.Collections.SortedList\"></xref> object has a fixed size; otherwise, `false`. The default is `false`.","nodes":[{"content":"<ph id=\"ph1\">`true`</ph> if the <ph id=\"ph2\">&lt;xref href=\"System.Collections.SortedList\"&gt;&lt;/xref&gt;</ph> object has a fixed size; otherwise, <ph id=\"ph3\">`false`</ph>.","pos":[0,109],"source":"`true` if the <xref href=\"System.Collections.SortedList\"></xref> object has a fixed size; otherwise, `false`."},{"content":"The default is <ph id=\"ph1\">`false`</ph>.","pos":[110,133],"source":" The default is `false`."}]}],"pos":[90116,90252],"yaml":true},{"content":"Gets a value indicating whether a <xref href=\"System.Collections.SortedList\"></xref> object is read-only.","nodes":[{"pos":[0,105],"content":"Gets a value indicating whether a <ph id=\"ph1\">&lt;xref href=\"System.Collections.SortedList\"&gt;&lt;/xref&gt;</ph> object is read-only.","source":"Gets a value indicating whether a <xref href=\"System.Collections.SortedList\"></xref> object is read-only."}],"pos":[91520,91626],"yaml":true},{"content":"A collection that is read-only does not allow the addition, removal, or modification of elements after the collection is created.  \n  \n A collection that is read-only is simply a collection with a wrapper that prevents modifying the collection; therefore, if changes are made to the underlying collection, the read-only collection reflects those changes.  \n  \n Retrieving the value of this property is an O(1) operation.","nodes":[{"pos":[0,129],"content":"A collection that is read-only does not allow the addition, removal, or modification of elements after the collection is created.","nodes":[{"content":"A collection that is read-only does not allow the addition, removal, or modification of elements after the collection is created.","pos":[0,129]}]},{"pos":[136,354],"content":"A collection that is read-only is simply a collection with a wrapper that prevents modifying the collection; therefore, if changes are made to the underlying collection, the read-only collection reflects those changes.","nodes":[{"content":"A collection that is read-only is simply a collection with a wrapper that prevents modifying the collection; therefore, if changes are made to the underlying collection, the read-only collection reflects those changes.","pos":[0,218]}]},{"pos":[361,420],"content":"Retrieving the value of this property is an O(1) operation.","nodes":[{"content":"Retrieving the value of this property is an O(1) operation.","pos":[0,59]}]}],"pos":[91637,92064],"yaml":true,"extradata":"MT"},{"content":"`true` if the <xref href=\"System.Collections.SortedList\"></xref> object is read-only; otherwise, `false`. The default is `false`.","nodes":[{"pos":[0,129],"content":"`true` if the <xref href=\"System.Collections.SortedList\"></xref> object is read-only; otherwise, `false`. The default is `false`.","nodes":[{"content":"<ph id=\"ph1\">`true`</ph> if the <ph id=\"ph2\">&lt;xref href=\"System.Collections.SortedList\"&gt;&lt;/xref&gt;</ph> object is read-only; otherwise, <ph id=\"ph3\">`false`</ph>.","pos":[0,105],"source":"`true` if the <xref href=\"System.Collections.SortedList\"></xref> object is read-only; otherwise, `false`."},{"content":"The default is <ph id=\"ph1\">`false`</ph>.","pos":[106,129],"source":" The default is `false`."}]}],"pos":[92185,92317],"yaml":true},{"content":"Gets a value indicating whether access to a <xref href=\"System.Collections.SortedList\"></xref> object is synchronized (thread safe).","nodes":[{"pos":[0,132],"content":"Gets a value indicating whether access to a <ph id=\"ph1\">&lt;xref href=\"System.Collections.SortedList\"&gt;&lt;/xref&gt;</ph> object is synchronized (thread safe).","source":"Gets a value indicating whether access to a <xref href=\"System.Collections.SortedList\"></xref> object is synchronized (thread safe)."}],"pos":[93608,93741],"yaml":true},{"content":"To guarantee the thread safety of a <xref:System.Collections.SortedList> object, all operations must be done through the wrapper returned by the <xref:System.Collections.SortedList.Synchronized%2A> method.  \n  \n Enumerating through a collection is intrinsically not a thread-safe procedure. Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception. To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.","nodes":[{"pos":[0,205],"content":"To guarantee the thread safety of a <xref:System.Collections.SortedList> object, all operations must be done through the wrapper returned by the <xref:System.Collections.SortedList.Synchronized%2A> method.","nodes":[{"content":"To guarantee the thread safety of a <ph id=\"ph1\">&lt;xref:System.Collections.SortedList&gt;</ph> object, all operations must be done through the wrapper returned by the <ph id=\"ph2\">&lt;xref:System.Collections.SortedList.Synchronized%2A&gt;</ph> method.","pos":[0,205],"source":"To guarantee the thread safety of a <xref:System.Collections.SortedList> object, all operations must be done through the wrapper returned by the <xref:System.Collections.SortedList.Synchronized%2A> method."}]},{"pos":[212,610],"content":"Enumerating through a collection is intrinsically not a thread-safe procedure. Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception. To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.","nodes":[{"content":"Enumerating through a collection is intrinsically not a thread-safe procedure. Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception. To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.","pos":[0,398],"nodes":[{"content":"Enumerating through a collection is intrinsically not a thread-safe procedure.","pos":[0,78]},{"content":"Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception.","pos":[79,216]},{"content":"To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.","pos":[217,398]}]}]}],"pos":[93752,94367],"yaml":true,"extradata":"MT"},{"content":"`true` if access to the <xref href=\"System.Collections.SortedList\"></xref> object is synchronized (thread safe); otherwise, `false`. The default is `false`.","nodes":[{"pos":[0,156],"content":"`true` if access to the <xref href=\"System.Collections.SortedList\"></xref> object is synchronized (thread safe); otherwise, `false`. The default is `false`.","nodes":[{"content":"<ph id=\"ph1\">`true`</ph> if access to the <ph id=\"ph2\">&lt;xref href=\"System.Collections.SortedList\"&gt;&lt;/xref&gt;</ph> object is synchronized (thread safe); otherwise, <ph id=\"ph3\">`false`</ph>.","pos":[0,132],"source":"`true` if access to the <xref href=\"System.Collections.SortedList\"></xref> object is synchronized (thread safe); otherwise, `false`."},{"content":"The default is <ph id=\"ph1\">`false`</ph>.","pos":[133,156],"source":" The default is `false`."}]}],"pos":[96005,96164],"yaml":true},{"content":"Gets and sets the value associated with a specific key in a <xref href=\"System.Collections.SortedList\"></xref> object.","nodes":[{"pos":[0,118],"content":"Gets and sets the value associated with a specific key in a <ph id=\"ph1\">&lt;xref href=\"System.Collections.SortedList\"&gt;&lt;/xref&gt;</ph> object.","source":"Gets and sets the value associated with a specific key in a <xref href=\"System.Collections.SortedList\"></xref> object."}],"pos":[97468,97587],"yaml":true},{"content":"You can use the <xref:System.Collections.SortedList.Item%2A> property to access a specific element in a collection by specifying the following syntax: `myCollection[key]`.  \n  \n You can also use this property to add new elements by setting the value of a key that does not exist in the <xref:System.Collections.SortedList> object (for example, `myCollection[\"myNonexistentKey\"] = myValue)`. However, if the specified key already exists in the <xref:System.Collections.SortedList>, setting the <xref:System.Collections.SortedList.Item%2A> property overwrites the old value. In contrast, the <xref:System.Collections.SortedList.Add%2A> method does not modify existing elements.  \n  \n A key cannot be `null`, but a value can be. To distinguish between `null` that is returned because the specified key is not found and `null` that is returned because the value of the specified key is `null`, use the <xref:System.Collections.SortedList.Contains%2A> method or the <xref:System.Collections.SortedList.ContainsKey%2A> method to determine if the key exists in the list.  \n  \n The elements of a <xref:System.Collections.SortedList> are sorted by the keys either according to a specific <xref:System.Collections.IComparer> implementation specified when the <xref:System.Collections.SortedList> is created or according to the <xref:System.IComparable> implementation provided by the keys themselves.  \n  \n The C# language uses the  keyword to define the indexers instead of implementing the <xref:System.Collections.SortedList.Keys%2A>property. Visual Basic implements <xref:System.Collections.SortedList.Item%2A> as a default property, which provides the same indexing functionality.  \n  \n Retrieving the value of this property is an O(log `n`) operation, where `n` is <xref:System.Collections.SortedList.Count%2A>. Setting the property is an O(log `n`) operation if the key is already in the <xref:System.Collections.SortedList>. If the key is not in the list, setting the property is an O(`n`) operation for unsorted data, or O(log `n`) if the new element is added at the end of the list. If insertion causes a resize, the operation is O(`n`).","nodes":[{"pos":[0,171],"content":"You can use the <ph id=\"ph1\">&lt;xref:System.Collections.SortedList.Item%2A&gt;</ph> property to access a specific element in a collection by specifying the following syntax: <ph id=\"ph2\">`myCollection[key]`</ph>.","source":"You can use the <xref:System.Collections.SortedList.Item%2A> property to access a specific element in a collection by specifying the following syntax: `myCollection[key]`."},{"pos":[178,675],"content":"You can also use this property to add new elements by setting the value of a key that does not exist in the <xref:System.Collections.SortedList> object (for example, `myCollection[\"myNonexistentKey\"] = myValue)`. However, if the specified key already exists in the <xref:System.Collections.SortedList>, setting the <xref:System.Collections.SortedList.Item%2A> property overwrites the old value. In contrast, the <xref:System.Collections.SortedList.Add%2A> method does not modify existing elements.","nodes":[{"content":"You can also use this property to add new elements by setting the value of a key that does not exist in the <ph id=\"ph1\">&lt;xref:System.Collections.SortedList&gt;</ph> object (for example, <ph id=\"ph2\">`myCollection[\"myNonexistentKey\"] = myValue)`</ph>.","pos":[0,212],"source":"You can also use this property to add new elements by setting the value of a key that does not exist in the <xref:System.Collections.SortedList> object (for example, `myCollection[\"myNonexistentKey\"] = myValue)`."},{"content":"However, if the specified key already exists in the <ph id=\"ph1\">&lt;xref:System.Collections.SortedList&gt;</ph>, setting the <ph id=\"ph2\">&lt;xref:System.Collections.SortedList.Item%2A&gt;</ph> property overwrites the old value.","pos":[213,394],"source":" However, if the specified key already exists in the <xref:System.Collections.SortedList>, setting the <xref:System.Collections.SortedList.Item%2A> property overwrites the old value."},{"content":"In contrast, the <ph id=\"ph1\">&lt;xref:System.Collections.SortedList.Add%2A&gt;</ph> method does not modify existing elements.","pos":[395,497],"source":" In contrast, the <xref:System.Collections.SortedList.Add%2A> method does not modify existing elements."}]},{"pos":[682,1063],"content":"A key cannot be `null`, but a value can be. To distinguish between `null` that is returned because the specified key is not found and `null` that is returned because the value of the specified key is `null`, use the <xref:System.Collections.SortedList.Contains%2A> method or the <xref:System.Collections.SortedList.ContainsKey%2A> method to determine if the key exists in the list.","nodes":[{"content":"A key cannot be <ph id=\"ph1\">`null`</ph>, but a value can be.","pos":[0,43],"source":"A key cannot be `null`, but a value can be."},{"content":"To distinguish between <ph id=\"ph1\">`null`</ph> that is returned because the specified key is not found and <ph id=\"ph2\">`null`</ph> that is returned because the value of the specified key is <ph id=\"ph3\">`null`</ph>, use the <ph id=\"ph4\">&lt;xref:System.Collections.SortedList.Contains%2A&gt;</ph> method or the <ph id=\"ph5\">&lt;xref:System.Collections.SortedList.ContainsKey%2A&gt;</ph> method to determine if the key exists in the list.","pos":[44,381],"source":" To distinguish between `null` that is returned because the specified key is not found and `null` that is returned because the value of the specified key is `null`, use the <xref:System.Collections.SortedList.Contains%2A> method or the <xref:System.Collections.SortedList.ContainsKey%2A> method to determine if the key exists in the list."}]},{"pos":[1070,1390],"content":"The elements of a <xref:System.Collections.SortedList> are sorted by the keys either according to a specific <xref:System.Collections.IComparer> implementation specified when the <xref:System.Collections.SortedList> is created or according to the <xref:System.IComparable> implementation provided by the keys themselves.","nodes":[{"content":"The elements of a <ph id=\"ph1\">&lt;xref:System.Collections.SortedList&gt;</ph> are sorted by the keys either according to a specific <ph id=\"ph2\">&lt;xref:System.Collections.IComparer&gt;</ph> implementation specified when the <ph id=\"ph3\">&lt;xref:System.Collections.SortedList&gt;</ph> is created or according to the <ph id=\"ph4\">&lt;xref:System.IComparable&gt;</ph> implementation provided by the keys themselves.","pos":[0,320],"source":"The elements of a <xref:System.Collections.SortedList> are sorted by the keys either according to a specific <xref:System.Collections.IComparer> implementation specified when the <xref:System.Collections.SortedList> is created or according to the <xref:System.IComparable> implementation provided by the keys themselves."}]},{"pos":[1397,1675],"content":"The C# language uses the  keyword to define the indexers instead of implementing the <xref:System.Collections.SortedList.Keys%2A>property. Visual Basic implements <xref:System.Collections.SortedList.Item%2A> as a default property, which provides the same indexing functionality.","nodes":[{"content":"The C# language uses the  keyword to define the indexers instead of implementing the <xref:System.Collections.SortedList.Keys%2A>property. Visual Basic implements <xref:System.Collections.SortedList.Item%2A> as a default property, which provides the same indexing functionality.","pos":[0,278],"nodes":[{"content":"The C# language uses the  keyword to define the indexers instead of implementing the <ph id=\"ph1\">&lt;xref:System.Collections.SortedList.Keys%2A&gt;</ph>property.","pos":[0,138],"source":"The C# language uses the  keyword to define the indexers instead of implementing the <xref:System.Collections.SortedList.Keys%2A>property."},{"content":"Visual Basic implements <ph id=\"ph1\">&lt;xref:System.Collections.SortedList.Item%2A&gt;</ph> as a default property, which provides the same indexing functionality.","pos":[139,278],"source":" Visual Basic implements <xref:System.Collections.SortedList.Item%2A> as a default property, which provides the same indexing functionality."}]}]},{"pos":[1682,2137],"content":"Retrieving the value of this property is an O(log `n`) operation, where `n` is <xref:System.Collections.SortedList.Count%2A>. Setting the property is an O(log `n`) operation if the key is already in the <xref:System.Collections.SortedList>. If the key is not in the list, setting the property is an O(`n`) operation for unsorted data, or O(log `n`) if the new element is added at the end of the list. If insertion causes a resize, the operation is O(`n`).","nodes":[{"content":"Retrieving the value of this property is an O(log <ph id=\"ph1\">`n`</ph>) operation, where <ph id=\"ph2\">`n`</ph> is <ph id=\"ph3\">&lt;xref:System.Collections.SortedList.Count%2A&gt;</ph>.","pos":[0,125],"source":"Retrieving the value of this property is an O(log `n`) operation, where `n` is <xref:System.Collections.SortedList.Count%2A>."},{"content":"Setting the property is an O(log <ph id=\"ph1\">`n`</ph>) operation if the key is already in the <ph id=\"ph2\">&lt;xref:System.Collections.SortedList&gt;</ph>.","pos":[126,240],"source":" Setting the property is an O(log `n`) operation if the key is already in the <xref:System.Collections.SortedList>."},{"content":"If the key is not in the list, setting the property is an O(<ph id=\"ph1\">`n`</ph>) operation for unsorted data, or O(log <ph id=\"ph2\">`n`</ph>) if the new element is added at the end of the list.","pos":[241,400],"source":" If the key is not in the list, setting the property is an O(`n`) operation for unsorted data, or O(log `n`) if the new element is added at the end of the list."},{"content":"If insertion causes a resize, the operation is O(<ph id=\"ph1\">`n`</ph>).","pos":[401,455],"source":" If insertion causes a resize, the operation is O(`n`)."}]}],"pos":[97598,99750],"yaml":true,"extradata":"MT"},{"content":"The key associated with the value to get or set.","nodes":[{"pos":[0,48],"content":"The key associated with the value to get or set.","nodes":[{"content":"The key associated with the value to get or set.","pos":[0,48]}]}],"pos":[99901,99950],"yaml":true},{"content":"The value associated with the <code>key</code> parameter in the <xref href=\"System.Collections.SortedList\"></xref> object, if <code>key</code> is found; otherwise, `null`.","nodes":[{"pos":[0,171],"content":"The value associated with the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">key</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter in the <ph id=\"ph2\">&lt;xref href=\"System.Collections.SortedList\"&gt;&lt;/xref&gt;</ph> object, if <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph3\">key</ph><ept id=\"p2\">&lt;/code&gt;</ept> is found; otherwise, <ph id=\"ph4\">`null`</ph>.","source":"The value associated with the <code>key</code> parameter in the <xref href=\"System.Collections.SortedList\"></xref> object, if <code>key</code> is found; otherwise, `null`."}],"pos":[100007,100179],"yaml":true},{"content":"<code>key</code> is `null`.","nodes":[{"pos":[0,27],"content":"<ph id=\"ph1\">&lt;code&gt;key&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>key</code> is `null`."}],"pos":[100343,100371],"yaml":true},{"content":"The property is set and the <xref href=\"System.Collections.SortedList\"></xref> object is read-only.  \n  \n -or-  \n  \n The property is set, <code>key</code> does not exist in the collection, and the <xref href=\"System.Collections.SortedList\"></xref> has a fixed size.","nodes":[{"pos":[0,99],"content":"The property is set and the <ph id=\"ph1\">&lt;xref href=\"System.Collections.SortedList\"&gt;&lt;/xref&gt;</ph> object is read-only.","source":"The property is set and the <xref href=\"System.Collections.SortedList\"></xref> object is read-only."},{"pos":[106,110],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[117,265],"content":"The property is set, <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">key</ph><ept id=\"p1\">&lt;/code&gt;</ept> does not exist in the collection, and the <ph id=\"ph2\">&lt;xref href=\"System.Collections.SortedList\"&gt;&lt;/xref&gt;</ph> has a fixed size.","source":"The property is set, <code>key</code> does not exist in the collection, and the <xref href=\"System.Collections.SortedList\"></xref> has a fixed size."}],"pos":[100473,100749],"yaml":true},{"content":"There is not enough available memory to add the element to the <xref href=\"System.Collections.SortedList\"></xref>.","nodes":[{"pos":[0,114],"content":"There is not enough available memory to add the element to the <ph id=\"ph1\">&lt;xref href=\"System.Collections.SortedList\"&gt;&lt;/xref&gt;</ph>.","source":"There is not enough available memory to add the element to the <xref href=\"System.Collections.SortedList\"></xref>."}],"pos":[100849,100964],"yaml":true},{"content":"The comparer throws an exception.","nodes":[{"pos":[0,33],"content":"The comparer throws an exception.","nodes":[{"content":"The comparer throws an exception.","pos":[0,33]}]}],"pos":[101074,101108],"yaml":true},{"content":"Gets the keys in a <xref href=\"System.Collections.SortedList\"></xref> object.","nodes":[{"pos":[0,77],"content":"Gets the keys in a <ph id=\"ph1\">&lt;xref href=\"System.Collections.SortedList\"&gt;&lt;/xref&gt;</ph> object.","source":"Gets the keys in a <xref href=\"System.Collections.SortedList\"></xref> object."}],"pos":[102268,102346],"yaml":true},{"content":"The <xref:System.Collections.ICollection> object is a read-only view of the keys of the <xref:System.Collections.SortedList> object. Modifications made to the underlying <xref:System.Collections.SortedList> are immediately reflected in the <xref:System.Collections.ICollection>.  \n  \n The elements of the <xref:System.Collections.ICollection> are sorted in the same order as the keys of the <xref:System.Collections.SortedList>.  \n  \n This property is similar to the <xref:System.Collections.SortedList.GetKeyList%2A> method, but returns an <xref:System.Collections.ICollection> object instead of an <xref:System.Collections.IList> object.  \n  \n This method is an O(1) operation.","nodes":[{"pos":[0,278],"content":"The <xref:System.Collections.ICollection> object is a read-only view of the keys of the <xref:System.Collections.SortedList> object. Modifications made to the underlying <xref:System.Collections.SortedList> are immediately reflected in the <xref:System.Collections.ICollection>.","nodes":[{"content":"The <xref:System.Collections.ICollection> object is a read-only view of the keys of the <xref:System.Collections.SortedList> object. Modifications made to the underlying <xref:System.Collections.SortedList> are immediately reflected in the <xref:System.Collections.ICollection>.","pos":[0,278],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Collections.ICollection&gt;</ph> object is a read-only view of the keys of the <ph id=\"ph2\">&lt;xref:System.Collections.SortedList&gt;</ph> object.","pos":[0,132],"source":"The <xref:System.Collections.ICollection> object is a read-only view of the keys of the <xref:System.Collections.SortedList> object."},{"content":"Modifications made to the underlying <ph id=\"ph1\">&lt;xref:System.Collections.SortedList&gt;</ph> are immediately reflected in the <ph id=\"ph2\">&lt;xref:System.Collections.ICollection&gt;</ph>.","pos":[133,278],"source":" Modifications made to the underlying <xref:System.Collections.SortedList> are immediately reflected in the <xref:System.Collections.ICollection>."}]}]},{"pos":[285,428],"content":"The elements of the <xref:System.Collections.ICollection> are sorted in the same order as the keys of the <xref:System.Collections.SortedList>.","nodes":[{"content":"The elements of the <ph id=\"ph1\">&lt;xref:System.Collections.ICollection&gt;</ph> are sorted in the same order as the keys of the <ph id=\"ph2\">&lt;xref:System.Collections.SortedList&gt;</ph>.","pos":[0,143],"source":"The elements of the <xref:System.Collections.ICollection> are sorted in the same order as the keys of the <xref:System.Collections.SortedList>."}]},{"pos":[435,639],"content":"This property is similar to the <xref:System.Collections.SortedList.GetKeyList%2A> method, but returns an <xref:System.Collections.ICollection> object instead of an <xref:System.Collections.IList> object.","nodes":[{"content":"This property is similar to the <ph id=\"ph1\">&lt;xref:System.Collections.SortedList.GetKeyList%2A&gt;</ph> method, but returns an <ph id=\"ph2\">&lt;xref:System.Collections.ICollection&gt;</ph> object instead of an <ph id=\"ph3\">&lt;xref:System.Collections.IList&gt;</ph> object.","pos":[0,204],"source":"This property is similar to the <xref:System.Collections.SortedList.GetKeyList%2A> method, but returns an <xref:System.Collections.ICollection> object instead of an <xref:System.Collections.IList> object."}]},{"pos":[646,679],"content":"This method is an O(1) operation.","nodes":[{"content":"This method is an O(1) operation.","pos":[0,33]}]}],"pos":[102357,103045],"yaml":true,"extradata":"MT"},{"content":"An <xref href=\"System.Collections.ICollection\"></xref> object containing the keys in the <xref href=\"System.Collections.SortedList\"></xref> object.","nodes":[{"pos":[0,147],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Collections.ICollection\"&gt;&lt;/xref&gt;</ph> object containing the keys in the <ph id=\"ph2\">&lt;xref href=\"System.Collections.SortedList\"&gt;&lt;/xref&gt;</ph> object.","source":"An <xref href=\"System.Collections.ICollection\"></xref> object containing the keys in the <xref href=\"System.Collections.SortedList\"></xref> object."}],"pos":[103202,103350],"yaml":true},{"content":"Removes the element with the specified key from a <xref href=\"System.Collections.SortedList\"></xref> object.","nodes":[{"pos":[0,108],"content":"Removes the element with the specified key from a <ph id=\"ph1\">&lt;xref href=\"System.Collections.SortedList\"&gt;&lt;/xref&gt;</ph> object.","source":"Removes the element with the specified key from a <xref href=\"System.Collections.SortedList\"></xref> object."}],"pos":[104654,104763],"yaml":true},{"content":"If the <xref:System.Collections.SortedList> object does not contain an element with the specified key, the <xref:System.Collections.SortedList> remains unchanged. No exception is thrown.  \n  \n In collections of contiguous elements, such as lists, the elements that follow the removed element move up to occupy the vacated spot. If the collection is indexed, the indexes of the elements that are moved are also updated. This behavior does not apply to collections where elements are conceptually grouped into buckets, such as a hash table.  \n  \n This method is an O(`n`) operation, where `n` is <xref:System.Collections.SortedList.Count%2A>.","nodes":[{"pos":[0,186],"content":"If the <xref:System.Collections.SortedList> object does not contain an element with the specified key, the <xref:System.Collections.SortedList> remains unchanged. No exception is thrown.","nodes":[{"content":"If the <xref:System.Collections.SortedList> object does not contain an element with the specified key, the <xref:System.Collections.SortedList> remains unchanged. No exception is thrown.","pos":[0,186],"nodes":[{"content":"If the <ph id=\"ph1\">&lt;xref:System.Collections.SortedList&gt;</ph> object does not contain an element with the specified key, the <ph id=\"ph2\">&lt;xref:System.Collections.SortedList&gt;</ph> remains unchanged.","pos":[0,162],"source":"If the <xref:System.Collections.SortedList> object does not contain an element with the specified key, the <xref:System.Collections.SortedList> remains unchanged."},{"content":"No exception is thrown.","pos":[163,186]}]}]},{"pos":[193,538],"content":"In collections of contiguous elements, such as lists, the elements that follow the removed element move up to occupy the vacated spot. If the collection is indexed, the indexes of the elements that are moved are also updated. This behavior does not apply to collections where elements are conceptually grouped into buckets, such as a hash table.","nodes":[{"content":"In collections of contiguous elements, such as lists, the elements that follow the removed element move up to occupy the vacated spot. If the collection is indexed, the indexes of the elements that are moved are also updated. This behavior does not apply to collections where elements are conceptually grouped into buckets, such as a hash table.","pos":[0,345],"nodes":[{"content":"In collections of contiguous elements, such as lists, the elements that follow the removed element move up to occupy the vacated spot.","pos":[0,134]},{"content":"If the collection is indexed, the indexes of the elements that are moved are also updated.","pos":[135,225]},{"content":"This behavior does not apply to collections where elements are conceptually grouped into buckets, such as a hash table.","pos":[226,345]}]}]},{"pos":[545,640],"content":"This method is an O(<ph id=\"ph1\">`n`</ph>) operation, where <ph id=\"ph2\">`n`</ph> is <ph id=\"ph3\">&lt;xref:System.Collections.SortedList.Count%2A&gt;</ph>.","source":"This method is an O(`n`) operation, where `n` is <xref:System.Collections.SortedList.Count%2A>."}],"pos":[104774,105421],"yaml":true,"extradata":"MT"},{"content":"The key of the element to remove.","nodes":[{"pos":[0,33],"content":"The key of the element to remove.","nodes":[{"content":"The key of the element to remove.","pos":[0,33]}]}],"pos":[106162,106196],"yaml":true},{"content":"<code>key</code> is `null`.","nodes":[{"pos":[0,27],"content":"<ph id=\"ph1\">&lt;code&gt;key&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>key</code> is `null`."}],"pos":[106362,106390],"yaml":true},{"content":"The <xref href=\"System.Collections.SortedList\"></xref> object is read-only.  \n  \n -or-  \n  \n The <xref href=\"System.Collections.SortedList\"></xref> has a fixed size.","nodes":[{"pos":[0,75],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Collections.SortedList\"&gt;&lt;/xref&gt;</ph> object is read-only.","source":"The <xref href=\"System.Collections.SortedList\"></xref> object is read-only."},{"pos":[82,86],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[93,165],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Collections.SortedList\"&gt;&lt;/xref&gt;</ph> has a fixed size.","source":"The <xref href=\"System.Collections.SortedList\"></xref> has a fixed size."}],"pos":[106492,106668],"yaml":true},{"content":"Removes the element at the specified index of a <xref href=\"System.Collections.SortedList\"></xref> object.","nodes":[{"pos":[0,106],"content":"Removes the element at the specified index of a <ph id=\"ph1\">&lt;xref href=\"System.Collections.SortedList\"&gt;&lt;/xref&gt;</ph> object.","source":"Removes the element at the specified index of a <xref href=\"System.Collections.SortedList\"></xref> object."}],"pos":[107913,108020],"yaml":true},{"content":"The index sequence is based on the sort sequence. When an element is added, it is inserted into <xref:System.Collections.SortedList> in the correct sort order, and the indexing adjusts accordingly. When an element is removed, the indexing also adjusts accordingly. Therefore, the index of a specific key/value pair might change as elements are added or removed from the <xref:System.Collections.SortedList> object.  \n  \n In collections of contiguous elements, such as lists, the elements that follow the removed element move up to occupy the vacated spot. If the collection is indexed, the indexes of the elements that are moved are also updated. This behavior does not apply to collections where elements are conceptually grouped into buckets, such as a hash table.  \n  \n This method is an O(`n`) operation, where `n` is <xref:System.Collections.SortedList.Count%2A>.","nodes":[{"pos":[0,414],"content":"The index sequence is based on the sort sequence. When an element is added, it is inserted into <xref:System.Collections.SortedList> in the correct sort order, and the indexing adjusts accordingly. When an element is removed, the indexing also adjusts accordingly. Therefore, the index of a specific key/value pair might change as elements are added or removed from the <xref:System.Collections.SortedList> object.","nodes":[{"content":"The index sequence is based on the sort sequence. When an element is added, it is inserted into <xref:System.Collections.SortedList> in the correct sort order, and the indexing adjusts accordingly. When an element is removed, the indexing also adjusts accordingly. Therefore, the index of a specific key/value pair might change as elements are added or removed from the <xref:System.Collections.SortedList> object.","pos":[0,414],"nodes":[{"content":"The index sequence is based on the sort sequence.","pos":[0,49]},{"content":"When an element is added, it is inserted into <ph id=\"ph1\">&lt;xref:System.Collections.SortedList&gt;</ph> in the correct sort order, and the indexing adjusts accordingly.","pos":[50,197],"source":" When an element is added, it is inserted into <xref:System.Collections.SortedList> in the correct sort order, and the indexing adjusts accordingly."},{"content":"When an element is removed, the indexing also adjusts accordingly.","pos":[198,264]},{"content":"Therefore, the index of a specific key/value pair might change as elements are added or removed from the <ph id=\"ph1\">&lt;xref:System.Collections.SortedList&gt;</ph> object.","pos":[265,414],"source":" Therefore, the index of a specific key/value pair might change as elements are added or removed from the <xref:System.Collections.SortedList> object."}]}]},{"pos":[421,766],"content":"In collections of contiguous elements, such as lists, the elements that follow the removed element move up to occupy the vacated spot. If the collection is indexed, the indexes of the elements that are moved are also updated. This behavior does not apply to collections where elements are conceptually grouped into buckets, such as a hash table.","nodes":[{"content":"In collections of contiguous elements, such as lists, the elements that follow the removed element move up to occupy the vacated spot. If the collection is indexed, the indexes of the elements that are moved are also updated. This behavior does not apply to collections where elements are conceptually grouped into buckets, such as a hash table.","pos":[0,345],"nodes":[{"content":"In collections of contiguous elements, such as lists, the elements that follow the removed element move up to occupy the vacated spot.","pos":[0,134]},{"content":"If the collection is indexed, the indexes of the elements that are moved are also updated.","pos":[135,225]},{"content":"This behavior does not apply to collections where elements are conceptually grouped into buckets, such as a hash table.","pos":[226,345]}]}]},{"pos":[773,868],"content":"This method is an O(<ph id=\"ph1\">`n`</ph>) operation, where <ph id=\"ph2\">`n`</ph> is <ph id=\"ph3\">&lt;xref:System.Collections.SortedList.Count%2A&gt;</ph>.","source":"This method is an O(`n`) operation, where `n` is <xref:System.Collections.SortedList.Count%2A>."}],"pos":[108031,108906],"yaml":true,"extradata":"MT"},{"content":"The zero-based index of the element to remove.","nodes":[{"pos":[0,46],"content":"The zero-based index of the element to remove.","nodes":[{"content":"The zero-based index of the element to remove.","pos":[0,46]}]}],"pos":[109649,109696],"yaml":true},{"content":"<code>index</code> is outside the range of valid indexes for the <xref href=\"System.Collections.SortedList\"></xref> object.","nodes":[{"pos":[0,123],"content":"<ph id=\"ph1\">&lt;code&gt;index&lt;/code&gt;</ph> is outside the range of valid indexes for the <ph id=\"ph2\">&lt;xref href=\"System.Collections.SortedList\"&gt;&lt;/xref&gt;</ph> object.","source":"<code>index</code> is outside the range of valid indexes for the <xref href=\"System.Collections.SortedList\"></xref> object."}],"pos":[109876,110000],"yaml":true},{"content":"The <xref href=\"System.Collections.SortedList\"></xref> is read-only.  \n  \n -or-  \n  \n The <xref href=\"System.Collections.SortedList\"></xref> has a fixed size.","nodes":[{"pos":[0,68],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Collections.SortedList\"&gt;&lt;/xref&gt;</ph> is read-only.","source":"The <xref href=\"System.Collections.SortedList\"></xref> is read-only."},{"pos":[75,79],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[86,158],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Collections.SortedList\"&gt;&lt;/xref&gt;</ph> has a fixed size.","source":"The <xref href=\"System.Collections.SortedList\"></xref> has a fixed size."}],"pos":[110102,110271],"yaml":true},{"content":"Replaces the value at a specific index in a <xref href=\"System.Collections.SortedList\"></xref> object.","nodes":[{"pos":[0,102],"content":"Replaces the value at a specific index in a <ph id=\"ph1\">&lt;xref href=\"System.Collections.SortedList\"&gt;&lt;/xref&gt;</ph> object.","source":"Replaces the value at a specific index in a <xref href=\"System.Collections.SortedList\"></xref> object."}],"pos":[111594,111697],"yaml":true},{"content":"The index sequence is based on the sort sequence. When an element is added, it is inserted into <xref:System.Collections.SortedList> in the correct sort order, and the indexing adjusts accordingly. When an element is removed, the indexing also adjusts accordingly. Therefore, the index of a specific key/value pair might change as elements are added or removed from the <xref:System.Collections.SortedList> object.  \n  \n This method is an O(1) operation.","nodes":[{"pos":[0,414],"content":"The index sequence is based on the sort sequence. When an element is added, it is inserted into <xref:System.Collections.SortedList> in the correct sort order, and the indexing adjusts accordingly. When an element is removed, the indexing also adjusts accordingly. Therefore, the index of a specific key/value pair might change as elements are added or removed from the <xref:System.Collections.SortedList> object.","nodes":[{"content":"The index sequence is based on the sort sequence. When an element is added, it is inserted into <xref:System.Collections.SortedList> in the correct sort order, and the indexing adjusts accordingly. When an element is removed, the indexing also adjusts accordingly. Therefore, the index of a specific key/value pair might change as elements are added or removed from the <xref:System.Collections.SortedList> object.","pos":[0,414],"nodes":[{"content":"The index sequence is based on the sort sequence.","pos":[0,49]},{"content":"When an element is added, it is inserted into <ph id=\"ph1\">&lt;xref:System.Collections.SortedList&gt;</ph> in the correct sort order, and the indexing adjusts accordingly.","pos":[50,197],"source":" When an element is added, it is inserted into <xref:System.Collections.SortedList> in the correct sort order, and the indexing adjusts accordingly."},{"content":"When an element is removed, the indexing also adjusts accordingly.","pos":[198,264]},{"content":"Therefore, the index of a specific key/value pair might change as elements are added or removed from the <ph id=\"ph1\">&lt;xref:System.Collections.SortedList&gt;</ph> object.","pos":[265,414],"source":" Therefore, the index of a specific key/value pair might change as elements are added or removed from the <xref:System.Collections.SortedList> object."}]}]},{"pos":[421,454],"content":"This method is an O(1) operation.","nodes":[{"content":"This method is an O(1) operation.","pos":[0,33]}]}],"pos":[111708,112167],"yaml":true,"extradata":"MT"},{"content":"The zero-based index at which to save <code>value</code>.","nodes":[{"pos":[0,57],"content":"The zero-based index at which to save <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The zero-based index at which to save <code>value</code>."}],"pos":[112961,113019],"yaml":true},{"content":"The <xref href=\"System.Object\"></xref> to save into the <xref href=\"System.Collections.SortedList\"></xref> object. The value can be `null`.","nodes":[{"pos":[0,139],"content":"The <xref href=\"System.Object\"></xref> to save into the <xref href=\"System.Collections.SortedList\"></xref> object. The value can be `null`.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Object\"&gt;&lt;/xref&gt;</ph> to save into the <ph id=\"ph2\">&lt;xref href=\"System.Collections.SortedList\"&gt;&lt;/xref&gt;</ph> object.","pos":[0,114],"source":"The <xref href=\"System.Object\"></xref> to save into the <xref href=\"System.Collections.SortedList\"></xref> object."},{"content":"The value can be <ph id=\"ph1\">`null`</ph>.","pos":[115,139],"source":" The value can be `null`."}]}],"pos":[113080,113220],"yaml":true},{"content":"<code>index</code> is outside the range of valid indexes for the <xref href=\"System.Collections.SortedList\"></xref> object.","nodes":[{"pos":[0,123],"content":"<ph id=\"ph1\">&lt;code&gt;index&lt;/code&gt;</ph> is outside the range of valid indexes for the <ph id=\"ph2\">&lt;xref href=\"System.Collections.SortedList\"&gt;&lt;/xref&gt;</ph> object.","source":"<code>index</code> is outside the range of valid indexes for the <xref href=\"System.Collections.SortedList\"></xref> object."}],"pos":[113402,113526],"yaml":true},{"content":"Returns a synchronized (thread-safe) wrapper for a <xref href=\"System.Collections.SortedList\"></xref> object.","nodes":[{"pos":[0,109],"content":"Returns a synchronized (thread-safe) wrapper for a <ph id=\"ph1\">&lt;xref href=\"System.Collections.SortedList\"&gt;&lt;/xref&gt;</ph> object.","source":"Returns a synchronized (thread-safe) wrapper for a <xref href=\"System.Collections.SortedList\"></xref> object."}],"pos":[114861,114971],"yaml":true},{"content":"To guarantee the thread safety of a <xref:System.Collections.SortedList> object, all operations must be done through this wrapper only.  \n  \n Enumerating through a collection is intrinsically not a thread-safe procedure. Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception. To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.","nodes":[{"pos":[0,135],"content":"To guarantee the thread safety of a <xref:System.Collections.SortedList> object, all operations must be done through this wrapper only.","nodes":[{"content":"To guarantee the thread safety of a <ph id=\"ph1\">&lt;xref:System.Collections.SortedList&gt;</ph> object, all operations must be done through this wrapper only.","pos":[0,135],"source":"To guarantee the thread safety of a <xref:System.Collections.SortedList> object, all operations must be done through this wrapper only."}]},{"pos":[142,540],"content":"Enumerating through a collection is intrinsically not a thread-safe procedure. Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception. To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.","nodes":[{"content":"Enumerating through a collection is intrinsically not a thread-safe procedure. Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception. To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.","pos":[0,398],"nodes":[{"content":"Enumerating through a collection is intrinsically not a thread-safe procedure.","pos":[0,78]},{"content":"Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception.","pos":[79,216]},{"content":"To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.","pos":[217,398]}]}]}],"pos":[114982,115527],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Collections.SortedList\"></xref> object to synchronize.","nodes":[{"pos":[0,77],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Collections.SortedList\"&gt;&lt;/xref&gt;</ph> object to synchronize.","source":"The <xref href=\"System.Collections.SortedList\"></xref> object to synchronize."}],"pos":[117226,117304],"yaml":true},{"content":"A synchronized (thread-safe) wrapper for the <xref href=\"System.Collections.SortedList\"></xref> object.","nodes":[{"pos":[0,103],"content":"A synchronized (thread-safe) wrapper for the <ph id=\"ph1\">&lt;xref href=\"System.Collections.SortedList\"&gt;&lt;/xref&gt;</ph> object.","source":"A synchronized (thread-safe) wrapper for the <xref href=\"System.Collections.SortedList\"></xref> object."}],"pos":[117377,117481],"yaml":true},{"content":"<code>list</code> is `null`.","nodes":[{"pos":[0,28],"content":"<ph id=\"ph1\">&lt;code&gt;list&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>list</code> is `null`."}],"pos":[117653,117682],"yaml":true},{"content":"Gets an object that can be used to synchronize access to a <xref href=\"System.Collections.SortedList\"></xref> object.","nodes":[{"pos":[0,117],"content":"Gets an object that can be used to synchronize access to a <ph id=\"ph1\">&lt;xref href=\"System.Collections.SortedList\"&gt;&lt;/xref&gt;</ph> object.","source":"Gets an object that can be used to synchronize access to a <xref href=\"System.Collections.SortedList\"></xref> object."}],"pos":[118866,118984],"yaml":true},{"content":"To create a synchronized version of the <xref:System.Collections.SortedList> object, use the <xref:System.Collections.SortedList.Synchronized%2A> method. However, derived classes can provide their own synchronized version of the <xref:System.Collections.SortedList> using the <xref:System.Collections.SortedList.SyncRoot%2A> property. The synchronizing code must perform operations on the <xref:System.Collections.SortedList.SyncRoot%2A> of the <xref:System.Collections.SortedList>, not directly on the <xref:System.Collections.SortedList>. This ensures proper operation of collections that are derived from other objects. Specifically, it maintains proper synchronization with other threads that might be simultaneously modifying the <xref:System.Collections.SortedList> object.  \n  \n Enumerating through a collection is intrinsically not a thread-safe procedure. Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception. To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.","nodes":[{"pos":[0,779],"content":"To create a synchronized version of the <xref:System.Collections.SortedList> object, use the <xref:System.Collections.SortedList.Synchronized%2A> method. However, derived classes can provide their own synchronized version of the <xref:System.Collections.SortedList> using the <xref:System.Collections.SortedList.SyncRoot%2A> property. The synchronizing code must perform operations on the <xref:System.Collections.SortedList.SyncRoot%2A> of the <xref:System.Collections.SortedList>, not directly on the <xref:System.Collections.SortedList>. This ensures proper operation of collections that are derived from other objects. Specifically, it maintains proper synchronization with other threads that might be simultaneously modifying the <xref:System.Collections.SortedList> object.","nodes":[{"content":"To create a synchronized version of the <xref:System.Collections.SortedList> object, use the <xref:System.Collections.SortedList.Synchronized%2A> method. However, derived classes can provide their own synchronized version of the <xref:System.Collections.SortedList> using the <xref:System.Collections.SortedList.SyncRoot%2A> property. The synchronizing code must perform operations on the <xref:System.Collections.SortedList.SyncRoot%2A> of the <xref:System.Collections.SortedList>, not directly on the <xref:System.Collections.SortedList>. This ensures proper operation of collections that are derived from other objects. Specifically, it maintains proper synchronization with other threads that might be simultaneously modifying the <xref:System.Collections.SortedList> object.","pos":[0,779],"nodes":[{"content":"To create a synchronized version of the <ph id=\"ph1\">&lt;xref:System.Collections.SortedList&gt;</ph> object, use the <ph id=\"ph2\">&lt;xref:System.Collections.SortedList.Synchronized%2A&gt;</ph> method.","pos":[0,153],"source":"To create a synchronized version of the <xref:System.Collections.SortedList> object, use the <xref:System.Collections.SortedList.Synchronized%2A> method."},{"content":"However, derived classes can provide their own synchronized version of the <ph id=\"ph1\">&lt;xref:System.Collections.SortedList&gt;</ph> using the <ph id=\"ph2\">&lt;xref:System.Collections.SortedList.SyncRoot%2A&gt;</ph> property.","pos":[154,334],"source":" However, derived classes can provide their own synchronized version of the <xref:System.Collections.SortedList> using the <xref:System.Collections.SortedList.SyncRoot%2A> property."},{"content":"The synchronizing code must perform operations on the <ph id=\"ph1\">&lt;xref:System.Collections.SortedList.SyncRoot%2A&gt;</ph> of the <ph id=\"ph2\">&lt;xref:System.Collections.SortedList&gt;</ph>, not directly on the <ph id=\"ph3\">&lt;xref:System.Collections.SortedList&gt;</ph>.","pos":[335,540],"source":" The synchronizing code must perform operations on the <xref:System.Collections.SortedList.SyncRoot%2A> of the <xref:System.Collections.SortedList>, not directly on the <xref:System.Collections.SortedList>."},{"content":"This ensures proper operation of collections that are derived from other objects.","pos":[541,622]},{"content":"Specifically, it maintains proper synchronization with other threads that might be simultaneously modifying the <ph id=\"ph1\">&lt;xref:System.Collections.SortedList&gt;</ph> object.","pos":[623,779],"source":" Specifically, it maintains proper synchronization with other threads that might be simultaneously modifying the <xref:System.Collections.SortedList> object."}]}]},{"pos":[786,1184],"content":"Enumerating through a collection is intrinsically not a thread-safe procedure. Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception. To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.","nodes":[{"content":"Enumerating through a collection is intrinsically not a thread-safe procedure. Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception. To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.","pos":[0,398],"nodes":[{"content":"Enumerating through a collection is intrinsically not a thread-safe procedure.","pos":[0,78]},{"content":"Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception.","pos":[79,216]},{"content":"To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.","pos":[217,398]}]}]}],"pos":[118995,120184],"yaml":true,"extradata":"MT"},{"content":"An object that can be used to synchronize access to the <xref href=\"System.Collections.SortedList\"></xref> object.","nodes":[{"pos":[0,114],"content":"An object that can be used to synchronize access to the <ph id=\"ph1\">&lt;xref href=\"System.Collections.SortedList\"&gt;&lt;/xref&gt;</ph> object.","source":"An object that can be used to synchronize access to the <xref href=\"System.Collections.SortedList\"></xref> object."}],"pos":[121064,121179],"yaml":true},{"content":"Sets the capacity to the actual number of elements in a <xref href=\"System.Collections.SortedList\"></xref> object.","nodes":[{"pos":[0,114],"content":"Sets the capacity to the actual number of elements in a <ph id=\"ph1\">&lt;xref href=\"System.Collections.SortedList\"&gt;&lt;/xref&gt;</ph> object.","source":"Sets the capacity to the actual number of elements in a <xref href=\"System.Collections.SortedList\"></xref> object."}],"pos":[122448,122563],"yaml":true},{"content":"This method can be used to minimize a collection's memory overhead if no new elements will be added to the collection.  \n  \n To reset a <xref:System.Collections.SortedList> object to its initial state, call the <xref:System.Collections.SortedList.Clear%2A> method before calling <xref:System.Collections.SortedList.TrimToSize%2A>. Trimming an empty <xref:System.Collections.SortedList> sets the capacity of the <xref:System.Collections.SortedList> to the default capacity.  \n  \n This method is an O(`n`) operation, where `n` is <xref:System.Collections.SortedList.Count%2A>.","nodes":[{"pos":[0,118],"content":"This method can be used to minimize a collection's memory overhead if no new elements will be added to the collection.","nodes":[{"content":"This method can be used to minimize a collection's memory overhead if no new elements will be added to the collection.","pos":[0,118]}]},{"pos":[125,472],"content":"To reset a <xref:System.Collections.SortedList> object to its initial state, call the <xref:System.Collections.SortedList.Clear%2A> method before calling <xref:System.Collections.SortedList.TrimToSize%2A>. Trimming an empty <xref:System.Collections.SortedList> sets the capacity of the <xref:System.Collections.SortedList> to the default capacity.","nodes":[{"content":"To reset a <xref:System.Collections.SortedList> object to its initial state, call the <xref:System.Collections.SortedList.Clear%2A> method before calling <xref:System.Collections.SortedList.TrimToSize%2A>. Trimming an empty <xref:System.Collections.SortedList> sets the capacity of the <xref:System.Collections.SortedList> to the default capacity.","pos":[0,347],"nodes":[{"content":"To reset a <ph id=\"ph1\">&lt;xref:System.Collections.SortedList&gt;</ph> object to its initial state, call the <ph id=\"ph2\">&lt;xref:System.Collections.SortedList.Clear%2A&gt;</ph> method before calling <ph id=\"ph3\">&lt;xref:System.Collections.SortedList.TrimToSize%2A&gt;</ph>.","pos":[0,205],"source":"To reset a <xref:System.Collections.SortedList> object to its initial state, call the <xref:System.Collections.SortedList.Clear%2A> method before calling <xref:System.Collections.SortedList.TrimToSize%2A>."},{"content":"Trimming an empty <ph id=\"ph1\">&lt;xref:System.Collections.SortedList&gt;</ph> sets the capacity of the <ph id=\"ph2\">&lt;xref:System.Collections.SortedList&gt;</ph> to the default capacity.","pos":[206,347],"source":" Trimming an empty <xref:System.Collections.SortedList> sets the capacity of the <xref:System.Collections.SortedList> to the default capacity."}]}]},{"pos":[479,574],"content":"This method is an O(<ph id=\"ph1\">`n`</ph>) operation, where <ph id=\"ph2\">`n`</ph> is <ph id=\"ph3\">&lt;xref:System.Collections.SortedList.Count%2A&gt;</ph>.","source":"This method is an O(`n`) operation, where `n` is <xref:System.Collections.SortedList.Count%2A>."}],"pos":[122574,123155],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Collections.SortedList\"></xref> object is read-only.  \n  \n -or-  \n  \n The <xref href=\"System.Collections.SortedList\"></xref> has a fixed size.","nodes":[{"pos":[0,75],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Collections.SortedList\"&gt;&lt;/xref&gt;</ph> object is read-only.","source":"The <xref href=\"System.Collections.SortedList\"></xref> object is read-only."},{"pos":[82,86],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[93,165],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Collections.SortedList\"&gt;&lt;/xref&gt;</ph> has a fixed size.","source":"The <xref href=\"System.Collections.SortedList\"></xref> has a fixed size."}],"pos":[124021,124197],"yaml":true},{"content":"Gets the values in a <xref href=\"System.Collections.SortedList\"></xref> object.","nodes":[{"pos":[0,79],"content":"Gets the values in a <ph id=\"ph1\">&lt;xref href=\"System.Collections.SortedList\"&gt;&lt;/xref&gt;</ph> object.","source":"Gets the values in a <xref href=\"System.Collections.SortedList\"></xref> object."}],"pos":[125369,125449],"yaml":true},{"content":"The <xref:System.Collections.ICollection> object is a read-only view of the values of the <xref:System.Collections.SortedList> object. Modifications made to the underlying <xref:System.Collections.SortedList> are immediately reflected in the <xref:System.Collections.ICollection>.  \n  \n The elements of the <xref:System.Collections.ICollection> are sorted in the same order as the values of the <xref:System.Collections.SortedList>.  \n  \n This property is similar to the <xref:System.Collections.SortedList.GetValueList%2A> method, but returns an <xref:System.Collections.ICollection> object instead of an <xref:System.Collections.IList> object.  \n  \n This method is an O(1) operation.","nodes":[{"pos":[0,280],"content":"The <xref:System.Collections.ICollection> object is a read-only view of the values of the <xref:System.Collections.SortedList> object. Modifications made to the underlying <xref:System.Collections.SortedList> are immediately reflected in the <xref:System.Collections.ICollection>.","nodes":[{"content":"The <xref:System.Collections.ICollection> object is a read-only view of the values of the <xref:System.Collections.SortedList> object. Modifications made to the underlying <xref:System.Collections.SortedList> are immediately reflected in the <xref:System.Collections.ICollection>.","pos":[0,280],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Collections.ICollection&gt;</ph> object is a read-only view of the values of the <ph id=\"ph2\">&lt;xref:System.Collections.SortedList&gt;</ph> object.","pos":[0,134],"source":"The <xref:System.Collections.ICollection> object is a read-only view of the values of the <xref:System.Collections.SortedList> object."},{"content":"Modifications made to the underlying <ph id=\"ph1\">&lt;xref:System.Collections.SortedList&gt;</ph> are immediately reflected in the <ph id=\"ph2\">&lt;xref:System.Collections.ICollection&gt;</ph>.","pos":[135,280],"source":" Modifications made to the underlying <xref:System.Collections.SortedList> are immediately reflected in the <xref:System.Collections.ICollection>."}]}]},{"pos":[287,432],"content":"The elements of the <xref:System.Collections.ICollection> are sorted in the same order as the values of the <xref:System.Collections.SortedList>.","nodes":[{"content":"The elements of the <ph id=\"ph1\">&lt;xref:System.Collections.ICollection&gt;</ph> are sorted in the same order as the values of the <ph id=\"ph2\">&lt;xref:System.Collections.SortedList&gt;</ph>.","pos":[0,145],"source":"The elements of the <xref:System.Collections.ICollection> are sorted in the same order as the values of the <xref:System.Collections.SortedList>."}]},{"pos":[439,645],"content":"This property is similar to the <xref:System.Collections.SortedList.GetValueList%2A> method, but returns an <xref:System.Collections.ICollection> object instead of an <xref:System.Collections.IList> object.","nodes":[{"content":"This property is similar to the <ph id=\"ph1\">&lt;xref:System.Collections.SortedList.GetValueList%2A&gt;</ph> method, but returns an <ph id=\"ph2\">&lt;xref:System.Collections.ICollection&gt;</ph> object instead of an <ph id=\"ph3\">&lt;xref:System.Collections.IList&gt;</ph> object.","pos":[0,206],"source":"This property is similar to the <xref:System.Collections.SortedList.GetValueList%2A> method, but returns an <xref:System.Collections.ICollection> object instead of an <xref:System.Collections.IList> object."}]},{"pos":[652,685],"content":"This method is an O(1) operation.","nodes":[{"content":"This method is an O(1) operation.","pos":[0,33]}]}],"pos":[125460,126154],"yaml":true,"extradata":"MT"},{"content":"An <xref href=\"System.Collections.ICollection\"></xref> object containing the values in the <xref href=\"System.Collections.SortedList\"></xref> object.","nodes":[{"pos":[0,149],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Collections.ICollection\"&gt;&lt;/xref&gt;</ph> object containing the values in the <ph id=\"ph2\">&lt;xref href=\"System.Collections.SortedList\"&gt;&lt;/xref&gt;</ph> object.","source":"An <xref href=\"System.Collections.ICollection\"></xref> object containing the values in the <xref href=\"System.Collections.SortedList\"></xref> object."}],"pos":[126313,126463],"yaml":true},{"content":"Returns an <xref href=\"System.Collections.IEnumerator\"></xref> that iterates through the <xref href=\"System.Collections.SortedList\"></xref>.","nodes":[{"pos":[0,140],"content":"Returns an <ph id=\"ph1\">&lt;xref href=\"System.Collections.IEnumerator\"&gt;&lt;/xref&gt;</ph> that iterates through the <ph id=\"ph2\">&lt;xref href=\"System.Collections.SortedList\"&gt;&lt;/xref&gt;</ph>.","source":"Returns an <xref href=\"System.Collections.IEnumerator\"></xref> that iterates through the <xref href=\"System.Collections.SortedList\"></xref>."}],"pos":[127891,128032],"yaml":true},{"content":"[Visual Basic, C#]  \n  \n The `foreach` statement of the C# language (`for each` in Visual Basic) hides the complexity of the enumerators.  Therefore, using `foreach` is recommended, instead of directly manipulating the enumerator.  \n  \n Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.  \n  \n Initially, the enumerator is positioned before the first element in the collection. <xref:System.Collections.IEnumerator.Reset%2A> also brings the enumerator back to this position. At this position, calling <xref:System.Collections.IEnumerator.Current%2A> throws an exception. Therefore, you must call <xref:System.Collections.IEnumerator.MoveNext%2A> to advance the enumerator to the first element of the collection before reading the value of <xref:System.Collections.IEnumerator.Current%2A>.  \n  \n <xref:System.Collections.IEnumerator.Current%2A> returns the same object until either <xref:System.Collections.IEnumerator.MoveNext%2A> or <xref:System.Collections.IEnumerator.Reset%2A> is called. <xref:System.Collections.IEnumerator.MoveNext%2A> sets <xref:System.Collections.IEnumerator.Current%2A> to the next element.  \n  \n If <xref:System.Collections.IEnumerator.MoveNext%2A> passes the end of the collection, the enumerator is positioned after the last element in the collection and <xref:System.Collections.IEnumerator.MoveNext%2A> returns `false`. When the enumerator is at this position, subsequent calls to <xref:System.Collections.IEnumerator.MoveNext%2A> also return `false`. If the last call to <xref:System.Collections.IEnumerator.MoveNext%2A> returned `false`, calling <xref:System.Collections.IEnumerator.Current%2A> throws an exception. To set <xref:System.Collections.IEnumerator.Current%2A> to the first element of the collection again, you can call <xref:System.Collections.IEnumerator.Reset%2A> followed by <xref:System.Collections.IEnumerator.MoveNext%2A>.  \n  \n An enumerator remains valid as long as the collection remains unchanged. If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and the next call to <xref:System.Collections.IEnumerator.MoveNext%2A> or <xref:System.Collections.IEnumerator.Reset%2A> throws an <xref:System.InvalidOperationException>. If the collection is modified between <xref:System.Collections.IEnumerator.MoveNext%2A> and <xref:System.Collections.IEnumerator.Current%2A>, <xref:System.Collections.IEnumerator.Current%2A> returns the element that it is set to, even if the enumerator is already invalidated.  \n  \n The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure. Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception. To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.  \n  \n This method is an O(1) operation.","nodes":[{"pos":[0,18],"content":"[Visual Basic, C#]","nodes":[{"content":"[Visual Basic, C#]","pos":[0,18]}]},{"pos":[25,230],"content":"The `foreach` statement of the C# language (`for each` in Visual Basic) hides the complexity of the enumerators.  Therefore, using `foreach` is recommended, instead of directly manipulating the enumerator.","nodes":[{"content":"The <ph id=\"ph1\">`foreach`</ph> statement of the C# language (<ph id=\"ph2\">`for each`</ph> in Visual Basic) hides the complexity of the enumerators.","pos":[0,112],"source":"The `foreach` statement of the C# language (`for each` in Visual Basic) hides the complexity of the enumerators."},{"content":"Therefore, using <ph id=\"ph1\">`foreach`</ph> is recommended, instead of directly manipulating the enumerator.","pos":[114,205],"source":"  Therefore, using `foreach` is recommended, instead of directly manipulating the enumerator."}]},{"pos":[237,357],"content":"Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.","nodes":[{"content":"Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.","pos":[0,120]}]},{"pos":[364,858],"content":"Initially, the enumerator is positioned before the first element in the collection. <xref:System.Collections.IEnumerator.Reset%2A> also brings the enumerator back to this position. At this position, calling <xref:System.Collections.IEnumerator.Current%2A> throws an exception. Therefore, you must call <xref:System.Collections.IEnumerator.MoveNext%2A> to advance the enumerator to the first element of the collection before reading the value of <xref:System.Collections.IEnumerator.Current%2A>.","nodes":[{"content":"Initially, the enumerator is positioned before the first element in the collection. <xref:System.Collections.IEnumerator.Reset%2A> also brings the enumerator back to this position. At this position, calling <xref:System.Collections.IEnumerator.Current%2A> throws an exception. Therefore, you must call <xref:System.Collections.IEnumerator.MoveNext%2A> to advance the enumerator to the first element of the collection before reading the value of <xref:System.Collections.IEnumerator.Current%2A>.","pos":[0,494],"nodes":[{"content":"Initially, the enumerator is positioned before the first element in the collection.","pos":[0,83]},{"content":"<ph id=\"ph1\">&lt;xref:System.Collections.IEnumerator.Reset%2A&gt;</ph> also brings the enumerator back to this position.","pos":[84,180],"source":" <xref:System.Collections.IEnumerator.Reset%2A> also brings the enumerator back to this position."},{"content":"At this position, calling <ph id=\"ph1\">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> throws an exception.","pos":[181,276],"source":" At this position, calling <xref:System.Collections.IEnumerator.Current%2A> throws an exception."},{"content":"Therefore, you must call <ph id=\"ph1\">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> to advance the enumerator to the first element of the collection before reading the value of <ph id=\"ph2\">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph>.","pos":[277,494],"source":" Therefore, you must call <xref:System.Collections.IEnumerator.MoveNext%2A> to advance the enumerator to the first element of the collection before reading the value of <xref:System.Collections.IEnumerator.Current%2A>."}]}]},{"pos":[865,1186],"content":"<xref:System.Collections.IEnumerator.Current%2A> returns the same object until either <xref:System.Collections.IEnumerator.MoveNext%2A> or <xref:System.Collections.IEnumerator.Reset%2A> is called. <xref:System.Collections.IEnumerator.MoveNext%2A> sets <xref:System.Collections.IEnumerator.Current%2A> to the next element.","nodes":[{"content":"<xref:System.Collections.IEnumerator.Current%2A> returns the same object until either <xref:System.Collections.IEnumerator.MoveNext%2A> or <xref:System.Collections.IEnumerator.Reset%2A> is called. <xref:System.Collections.IEnumerator.MoveNext%2A> sets <xref:System.Collections.IEnumerator.Current%2A> to the next element.","pos":[0,321],"nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> returns the same object until either <ph id=\"ph2\">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> or <ph id=\"ph3\">&lt;xref:System.Collections.IEnumerator.Reset%2A&gt;</ph> is called.","pos":[0,196],"source":"<xref:System.Collections.IEnumerator.Current%2A> returns the same object until either <xref:System.Collections.IEnumerator.MoveNext%2A> or <xref:System.Collections.IEnumerator.Reset%2A> is called."},{"content":"<ph id=\"ph1\">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> sets <ph id=\"ph2\">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> to the next element.","pos":[197,321],"source":" <xref:System.Collections.IEnumerator.MoveNext%2A> sets <xref:System.Collections.IEnumerator.Current%2A> to the next element."}]}]},{"pos":[1193,1943],"content":"If <xref:System.Collections.IEnumerator.MoveNext%2A> passes the end of the collection, the enumerator is positioned after the last element in the collection and <xref:System.Collections.IEnumerator.MoveNext%2A> returns `false`. When the enumerator is at this position, subsequent calls to <xref:System.Collections.IEnumerator.MoveNext%2A> also return `false`. If the last call to <xref:System.Collections.IEnumerator.MoveNext%2A> returned `false`, calling <xref:System.Collections.IEnumerator.Current%2A> throws an exception. To set <xref:System.Collections.IEnumerator.Current%2A> to the first element of the collection again, you can call <xref:System.Collections.IEnumerator.Reset%2A> followed by <xref:System.Collections.IEnumerator.MoveNext%2A>.","nodes":[{"content":"If <ph id=\"ph1\">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> passes the end of the collection, the enumerator is positioned after the last element in the collection and <ph id=\"ph2\">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> returns <ph id=\"ph3\">`false`</ph>.","pos":[0,227],"source":"If <xref:System.Collections.IEnumerator.MoveNext%2A> passes the end of the collection, the enumerator is positioned after the last element in the collection and <xref:System.Collections.IEnumerator.MoveNext%2A> returns `false`."},{"content":"When the enumerator is at this position, subsequent calls to <ph id=\"ph1\">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> also return <ph id=\"ph2\">`false`</ph>.","pos":[228,359],"source":" When the enumerator is at this position, subsequent calls to <xref:System.Collections.IEnumerator.MoveNext%2A> also return `false`."},{"content":"If the last call to <ph id=\"ph1\">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> returned <ph id=\"ph2\">`false`</ph>, calling <ph id=\"ph3\">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> throws an exception.","pos":[360,525],"source":" If the last call to <xref:System.Collections.IEnumerator.MoveNext%2A> returned `false`, calling <xref:System.Collections.IEnumerator.Current%2A> throws an exception."},{"content":"To set <ph id=\"ph1\">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> to the first element of the collection again, you can call <ph id=\"ph2\">&lt;xref:System.Collections.IEnumerator.Reset%2A&gt;</ph> followed by <ph id=\"ph3\">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph>.","pos":[526,750],"source":" To set <xref:System.Collections.IEnumerator.Current%2A> to the first element of the collection again, you can call <xref:System.Collections.IEnumerator.Reset%2A> followed by <xref:System.Collections.IEnumerator.MoveNext%2A>."}]},{"pos":[1950,2603],"content":"An enumerator remains valid as long as the collection remains unchanged. If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and the next call to <xref:System.Collections.IEnumerator.MoveNext%2A> or <xref:System.Collections.IEnumerator.Reset%2A> throws an <xref:System.InvalidOperationException>. If the collection is modified between <xref:System.Collections.IEnumerator.MoveNext%2A> and <xref:System.Collections.IEnumerator.Current%2A>, <xref:System.Collections.IEnumerator.Current%2A> returns the element that it is set to, even if the enumerator is already invalidated.","nodes":[{"content":"An enumerator remains valid as long as the collection remains unchanged. If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and the next call to <xref:System.Collections.IEnumerator.MoveNext%2A> or <xref:System.Collections.IEnumerator.Reset%2A> throws an <xref:System.InvalidOperationException>. If the collection is modified between <xref:System.Collections.IEnumerator.MoveNext%2A> and <xref:System.Collections.IEnumerator.Current%2A>, <xref:System.Collections.IEnumerator.Current%2A> returns the element that it is set to, even if the enumerator is already invalidated.","pos":[0,653],"nodes":[{"content":"An enumerator remains valid as long as the collection remains unchanged.","pos":[0,72]},{"content":"If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and the next call to <ph id=\"ph1\">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> or <ph id=\"ph2\">&lt;xref:System.Collections.IEnumerator.Reset%2A&gt;</ph> throws an <ph id=\"ph3\">&lt;xref:System.InvalidOperationException&gt;</ph>.","pos":[73,376],"source":" If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and the next call to <xref:System.Collections.IEnumerator.MoveNext%2A> or <xref:System.Collections.IEnumerator.Reset%2A> throws an <xref:System.InvalidOperationException>."},{"content":"If the collection is modified between <ph id=\"ph1\">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph>, <ph id=\"ph3\">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> returns the element that it is set to, even if the enumerator is already invalidated.","pos":[377,653],"source":" If the collection is modified between <xref:System.Collections.IEnumerator.MoveNext%2A> and <xref:System.Collections.IEnumerator.Current%2A>, <xref:System.Collections.IEnumerator.Current%2A> returns the element that it is set to, even if the enumerator is already invalidated."}]}]},{"pos":[2610,3084],"content":"The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure. Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception. To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.","nodes":[{"content":"The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure. Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception. To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.","pos":[0,474],"nodes":[{"content":"The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure.","pos":[0,154]},{"content":"Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception.","pos":[155,292]},{"content":"To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.","pos":[293,474]}]}]},{"pos":[3091,3124],"content":"This method is an O(1) operation.","nodes":[{"content":"This method is an O(1) operation.","pos":[0,33]}]}],"pos":[128043,131186],"yaml":true,"extradata":"MT"},{"content":"An <xref href=\"System.Collections.IEnumerator\"></xref> for the <xref href=\"System.Collections.SortedList\"></xref>.","nodes":[{"pos":[0,114],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Collections.IEnumerator\"&gt;&lt;/xref&gt;</ph> for the <ph id=\"ph2\">&lt;xref href=\"System.Collections.SortedList\"&gt;&lt;/xref&gt;</ph>.","source":"An <xref href=\"System.Collections.IEnumerator\"></xref> for the <xref href=\"System.Collections.SortedList\"></xref>."}],"pos":[131363,131478],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Collections.SortedList\n  commentId: T:System.Collections.SortedList\n  id: SortedList\n  children:\n  - System.Collections.SortedList.#ctor\n  - System.Collections.SortedList.#ctor(System.Collections.IComparer)\n  - System.Collections.SortedList.#ctor(System.Collections.IDictionary)\n  - System.Collections.SortedList.#ctor(System.Int32)\n  - System.Collections.SortedList.#ctor(System.Collections.IComparer,System.Int32)\n  - System.Collections.SortedList.#ctor(System.Collections.IDictionary,System.Collections.IComparer)\n  - System.Collections.SortedList.Add(System.Object,System.Object)\n  - System.Collections.SortedList.Capacity\n  - System.Collections.SortedList.Clear\n  - System.Collections.SortedList.Clone\n  - System.Collections.SortedList.Contains(System.Object)\n  - System.Collections.SortedList.ContainsKey(System.Object)\n  - System.Collections.SortedList.ContainsValue(System.Object)\n  - System.Collections.SortedList.CopyTo(System.Array,System.Int32)\n  - System.Collections.SortedList.Count\n  - System.Collections.SortedList.GetByIndex(System.Int32)\n  - System.Collections.SortedList.GetEnumerator\n  - System.Collections.SortedList.GetKey(System.Int32)\n  - System.Collections.SortedList.GetKeyList\n  - System.Collections.SortedList.GetValueList\n  - System.Collections.SortedList.IndexOfKey(System.Object)\n  - System.Collections.SortedList.IndexOfValue(System.Object)\n  - System.Collections.SortedList.IsFixedSize\n  - System.Collections.SortedList.IsReadOnly\n  - System.Collections.SortedList.IsSynchronized\n  - System.Collections.SortedList.Item(System.Object)\n  - System.Collections.SortedList.Keys\n  - System.Collections.SortedList.Remove(System.Object)\n  - System.Collections.SortedList.RemoveAt(System.Int32)\n  - System.Collections.SortedList.SetByIndex(System.Int32,System.Object)\n  - System.Collections.SortedList.Synchronized(System.Collections.SortedList)\n  - System.Collections.SortedList.SyncRoot\n  - System.Collections.SortedList.TrimToSize\n  - System.Collections.SortedList.Values\n  - System.Collections.SortedList.System#Collections#IEnumerable#GetEnumerator\n  langs:\n  - csharp\n  name: SortedList\n  nameWithType: SortedList\n  fullName: System.Collections.SortedList\n  type: Class\n  assemblies:\n  - System.Collections.NonGeneric\n  - mscorlib\n  - netstandard\n  namespace: System.Collections\n  summary: Represents a collection of key/value pairs that are sorted by the keys and are accessible by key and by index.\n  remarks: \"For the generic version of this collection, see <xref:System.Collections.Generic.SortedList%602?displayProperty=fullName>.  \\n  \\n A <xref:System.Collections.SortedList> element can be accessed by its key, like an element in any <xref:System.Collections.IDictionary> implementation, or by its index, like an element in any <xref:System.Collections.IList> implementation.  \\n  \\n A <xref:System.Collections.SortedList> object internally maintains two arrays to store the elements of the list; that is, one array for the keys and another array for the associated values. Each element is a key/value pair that can be accessed as a <xref:System.Collections.DictionaryEntry> object. A key cannot be `null`, but a value can be.  \\n  \\n The capacity of a <xref:System.Collections.SortedList> object is the number of elements the <xref:System.Collections.SortedList> can hold. As elements are added to a <xref:System.Collections.SortedList>, the capacity is automatically increased as required through reallocation. The capacity can be decreased by calling <xref:System.Collections.SortedList.TrimToSize%2A> or by setting the <xref:System.Collections.SortedList.Capacity%2A> property explicitly.  \\n  \\n For very large <xref:System.Collections.SortedList> objects, you can increase the maximum capacity to 2 billion elements on a 64-bit system by setting the `enabled` attribute of the  configuration element to `true` in the run-time environment.  \\n  \\n The elements of a <xref:System.Collections.SortedList> object are sorted by the keys either according to a specific <xref:System.Collections.IComparer> implementation specified when the <xref:System.Collections.SortedList> is created or according to the <xref:System.IComparable> implementation provided by the keys themselves. In either case, a <xref:System.Collections.SortedList> does not allow duplicate keys.  \\n  \\n The index sequence is based on the sort sequence. When an element is added, it is inserted into <xref:System.Collections.SortedList> in the correct sort order, and the indexing adjusts accordingly. When an element is removed, the indexing also adjusts accordingly. Therefore, the index of a specific key/value pair might change as elements are added or removed from the <xref:System.Collections.SortedList> object.  \\n  \\n Operations on a <xref:System.Collections.SortedList> object tend to be slower than operations on a <xref:System.Collections.Hashtable> object because of the sorting. However, the <xref:System.Collections.SortedList> offers more flexibility by allowing access to the values either through the associated keys or through the indexes.  \\n  \\n Elements in this collection can be accessed using an integer index.  Indexes in this collection are zero-based.  \\n  \\n The `foreach` statement of the C# language (`for each` in Visual Basic) returns an object of the type of the elements in the collection. Since each element of the <xref:System.Collections.SortedList> object is a key/value pair, the element type is not the type of the key or the type of the value. Rather, the element type is <xref:System.Collections.DictionaryEntry>. For example:  \\n  \\n [!code-cpp[Classic SortedList Example#2](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic SortedList Example/CPP/remarks.cpp#2)]\\n [!code-csharp[Classic SortedList Example#2](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic SortedList Example/CS/remarks.cs#2)]\\n [!code-vb[Classic SortedList Example#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic SortedList Example/VB/remarks.vb#2)]  \\n  \\n The `foreach` statement is a wrapper around the enumerator, which allows only reading from, not writing to, the collection.\"\n  example:\n  - \"The following code example shows how to create and initialize a <xref:System.Collections.SortedList> object and how to print out its keys and values.  \\n  \\n [!code-cpp[Classic SortedList Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic SortedList Example/CPP/source.cpp#1)]\\n [!code-csharp[Classic SortedList Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic SortedList Example/CS/source.cs#1)]\\n [!code-vb[Classic SortedList Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic SortedList Example/VB/source.vb#1)]\"\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(true)]\n\n      public class SortedList : ICloneable, System.Collections.IDictionary\n  inheritance:\n  - System.Object\n  implements:\n  - System.Collections.IDictionary\n  - System.ICloneable\n  inheritedMembers:\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.ToString\n  extensionMethods:\n  - System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)\n  - System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)\n  - System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)\n  - System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)\n  attributes:\n  - type: System.Runtime.InteropServices.ComVisibleAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections/SortedList.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.SortedList.#ctor\n  commentId: M:System.Collections.SortedList.#ctor\n  id: '#ctor'\n  parent: System.Collections.SortedList\n  langs:\n  - csharp\n  name: SortedList()\n  nameWithType: SortedList.SortedList()\n  fullName: SortedList.SortedList()\n  type: Constructor\n  assemblies:\n  - System.Collections.NonGeneric\n  - mscorlib\n  - netstandard\n  namespace: System.Collections\n  summary: Initializes a new instance of the <xref href=\"System.Collections.SortedList\"></xref> class that is empty, has the default initial capacity, and is sorted according to the <xref href=\"System.IComparable\"></xref> interface implemented by each key added to the <xref href=\"System.Collections.SortedList\"></xref> object.\n  remarks: \"Each key must implement the <xref:System.IComparable> interface to be capable of comparisons with every other key in the <xref:System.Collections.SortedList> object. The elements are sorted according to the <xref:System.IComparable> implementation of each key added to the <xref:System.Collections.SortedList>.  \\n  \\n The capacity of a <xref:System.Collections.SortedList> object is the number of elements that the <xref:System.Collections.SortedList> can hold. As elements are added to a <xref:System.Collections.SortedList>, the capacity is automatically increased as required by reallocating the internal array.  \\n  \\n If the size of the collection can be estimated, specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <xref:System.Collections.SortedList> object.  \\n  \\n This constructor is an O(1) operation.\"\n  example:\n  - \"The following code example creates collections using different <xref:System.Collections.SortedList> constructors and demonstrates the differences in the behavior of the collections.  \\n  \\n [!code-cpp[System.Collections.SortedList_ctor#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Collections.SortedList_ctor/CPP/sortedlist_ctor.cpp#1)]\\n [!code-csharp[System.Collections.SortedList_ctor#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Collections.SortedList_ctor/CS/sortedlist_ctor.cs#1)]\\n [!code-vb[System.Collections.SortedList_ctor#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Collections.SortedList_ctor/VB/sortedlist_ctor.vb#1)]\"\n  syntax:\n    content: public SortedList ();\n    parameters: []\n  overload: System.Collections.SortedList.#ctor*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections/SortedList.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.SortedList.#ctor(System.Collections.IComparer)\n  commentId: M:System.Collections.SortedList.#ctor(System.Collections.IComparer)\n  id: '#ctor(System.Collections.IComparer)'\n  parent: System.Collections.SortedList\n  langs:\n  - csharp\n  name: SortedList(IComparer)\n  nameWithType: SortedList.SortedList(IComparer)\n  fullName: SortedList.SortedList(IComparer)\n  type: Constructor\n  assemblies:\n  - System.Collections.NonGeneric\n  - mscorlib\n  - netstandard\n  namespace: System.Collections\n  summary: Initializes a new instance of the <xref href=\"System.Collections.SortedList\"></xref> class that is empty, has the default initial capacity, and is sorted according to the specified <xref href=\"System.Collections.IComparer\"></xref> interface.\n  remarks: \"The elements are sorted according to the specified <xref:System.Collections.IComparer> implementation. If the `comparer` parameter is `null`, the <xref:System.IComparable> implementation of each key is used; therefore, each key must implement the <xref:System.IComparable> interface to be capable of comparisons with every other key in the <xref:System.Collections.SortedList> object.  \\n  \\n The capacity of a <xref:System.Collections.SortedList> object is the number of elements that the <xref:System.Collections.SortedList> can hold. As elements are added to a <xref:System.Collections.SortedList>, the capacity is automatically increased as required by reallocating the internal array.  \\n  \\n If the size of the collection can be estimated, specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <xref:System.Collections.SortedList> object.  \\n  \\n This constructor is an O(1) operation.\"\n  example:\n  - \"The following code example creates collections using different <xref:System.Collections.SortedList> constructors and demonstrates the differences in the behavior of the collections.  \\n  \\n [!code-cpp[System.Collections.SortedList_ctor#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Collections.SortedList_ctor/CPP/sortedlist_ctor.cpp#1)]\\n [!code-csharp[System.Collections.SortedList_ctor#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Collections.SortedList_ctor/CS/sortedlist_ctor.cs#1)]\\n [!code-vb[System.Collections.SortedList_ctor#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Collections.SortedList_ctor/VB/sortedlist_ctor.vb#1)]\"\n  syntax:\n    content: public SortedList (System.Collections.IComparer comparer);\n    parameters:\n    - id: comparer\n      type: System.Collections.IComparer\n      description: \"The <xref href=\\\"System.Collections.IComparer\\\"></xref> implementation to use when comparing keys.  \\n  \\n -or-  \\n  \\n `null` to use the <xref href=\\\"System.IComparable\\\"></xref> implementation of each key.\"\n  overload: System.Collections.SortedList.#ctor*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections/SortedList.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.SortedList.#ctor(System.Collections.IDictionary)\n  commentId: M:System.Collections.SortedList.#ctor(System.Collections.IDictionary)\n  id: '#ctor(System.Collections.IDictionary)'\n  parent: System.Collections.SortedList\n  langs:\n  - csharp\n  name: SortedList(IDictionary)\n  nameWithType: SortedList.SortedList(IDictionary)\n  fullName: SortedList.SortedList(IDictionary)\n  type: Constructor\n  assemblies:\n  - System.Collections.NonGeneric\n  - mscorlib\n  - netstandard\n  namespace: System.Collections\n  summary: Initializes a new instance of the <xref href=\"System.Collections.SortedList\"></xref> class that contains elements copied from the specified dictionary, has the same initial capacity as the number of elements copied, and is sorted according to the <xref href=\"System.IComparable\"></xref> interface implemented by each key.\n  remarks: \"Each key must implement the <xref:System.IComparable> interface to be capable of comparisons with every other key in the <xref:System.Collections.SortedList> object. The elements are sorted according to the <xref:System.IComparable> implementation of each key added to the <xref:System.Collections.SortedList>.  \\n  \\n A <xref:System.Collections.Hashtable> object is an example of an <xref:System.Collections.IDictionary> implementation that can be passed to this constructor. The new <xref:System.Collections.SortedList> object contains a copy of the keys and values stored in the <xref:System.Collections.Hashtable>.  \\n  \\n The capacity of a <xref:System.Collections.SortedList> object is the number of elements that the <xref:System.Collections.SortedList> can hold. As elements are added to a <xref:System.Collections.SortedList>, the capacity is automatically increased as required by reallocating the internal array.  \\n  \\n If the size of the collection can be estimated, specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <xref:System.Collections.SortedList> object.  \\n  \\n This constructor is an O(`n`) operation, where `n` is the number of elements in `d`.\"\n  example:\n  - \"The following code example creates collections using different <xref:System.Collections.SortedList> constructors and demonstrates the differences in the behavior of the collections.  \\n  \\n [!code-cpp[System.Collections.SortedList_ctorDictionary#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Collections.SortedList_ctorDictionary/CPP/sortedlist_ctordictionary.cpp#1)]\\n [!code-csharp[System.Collections.SortedList_ctorDictionary#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Collections.SortedList_ctorDictionary/CS/sortedlist_ctordictionary.cs#1)]\\n [!code-vb[System.Collections.SortedList_ctorDictionary#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Collections.SortedList_ctorDictionary/VB/sortedlist_ctordictionary.vb#1)]\"\n  syntax:\n    content: public SortedList (System.Collections.IDictionary d);\n    parameters:\n    - id: d\n      type: System.Collections.IDictionary\n      description: The <xref href=\"System.Collections.IDictionary\"></xref> implementation to copy to a new <xref href=\"System.Collections.SortedList\"></xref> object.\n  overload: System.Collections.SortedList.#ctor*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>d</code> is `null`.\n  - type: System.InvalidCastException\n    commentId: T:System.InvalidCastException\n    description: One or more elements in <code>d</code> do not implement the <xref href=\"System.IComparable\"></xref> interface.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections/SortedList.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.SortedList.#ctor(System.Int32)\n  commentId: M:System.Collections.SortedList.#ctor(System.Int32)\n  id: '#ctor(System.Int32)'\n  parent: System.Collections.SortedList\n  langs:\n  - csharp\n  name: SortedList(Int32)\n  nameWithType: SortedList.SortedList(Int32)\n  fullName: SortedList.SortedList(Int32)\n  type: Constructor\n  assemblies:\n  - System.Collections.NonGeneric\n  - mscorlib\n  - netstandard\n  namespace: System.Collections\n  summary: Initializes a new instance of the <xref href=\"System.Collections.SortedList\"></xref> class that is empty, has the specified initial capacity, and is sorted according to the <xref href=\"System.IComparable\"></xref> interface implemented by each key added to the <xref href=\"System.Collections.SortedList\"></xref> object.\n  remarks: \"Each key must implement the <xref:System.IComparable> interface to be capable of comparisons with every other key in the <xref:System.Collections.SortedList> object. The elements are sorted according to the <xref:System.IComparable> implementation of each key added to the <xref:System.Collections.SortedList>.  \\n  \\n The capacity of a <xref:System.Collections.SortedList> object is the number of elements that the <xref:System.Collections.SortedList> can hold. As elements are added to a <xref:System.Collections.SortedList>, the capacity is automatically increased as required by reallocating the internal array.  \\n  \\n If the size of the collection can be estimated, specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <xref:System.Collections.SortedList> object.  \\n  \\n This constructor is an O(`n`) operation, where `n` is `initialCapacity`.\"\n  example:\n  - \"The following code example creates collections using different <xref:System.Collections.SortedList> constructors and demonstrates the differences in the behavior of the collections.  \\n  \\n [!code-cpp[System.Collections.SortedList_ctorInt#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Collections.SortedList_ctorInt/CPP/sortedlist_ctorint.cpp#1)]\\n [!code-csharp[System.Collections.SortedList_ctorInt#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Collections.SortedList_ctorInt/CS/sortedlist_ctorint.cs#1)]\\n [!code-vb[System.Collections.SortedList_ctorInt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Collections.SortedList_ctorInt/VB/sortedlist_ctorint.vb#1)]\"\n  syntax:\n    content: public SortedList (int initialCapacity);\n    parameters:\n    - id: initialCapacity\n      type: System.Int32\n      description: The initial number of elements that the <xref href=\"System.Collections.SortedList\"></xref> object can contain.\n  overload: System.Collections.SortedList.#ctor*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>initialCapacity</code> is less than zero.\n  - type: System.OutOfMemoryException\n    commentId: T:System.OutOfMemoryException\n    description: There is not enough available memory to create a <xref href=\"System.Collections.SortedList\"></xref> object with the specified <code>initialCapacity</code>.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections/SortedList.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.SortedList.#ctor(System.Collections.IComparer,System.Int32)\n  commentId: M:System.Collections.SortedList.#ctor(System.Collections.IComparer,System.Int32)\n  id: '#ctor(System.Collections.IComparer,System.Int32)'\n  parent: System.Collections.SortedList\n  langs:\n  - csharp\n  name: SortedList(IComparer, Int32)\n  nameWithType: SortedList.SortedList(IComparer, Int32)\n  fullName: SortedList.SortedList(IComparer, Int32)\n  type: Constructor\n  assemblies:\n  - System.Collections.NonGeneric\n  - mscorlib\n  - netstandard\n  namespace: System.Collections\n  summary: Initializes a new instance of the <xref href=\"System.Collections.SortedList\"></xref> class that is empty, has the specified initial capacity, and is sorted according to the specified <xref href=\"System.Collections.IComparer\"></xref> interface.\n  remarks: \"The elements are sorted according to the specified <xref:System.Collections.IComparer> implementation. If the `comparer` parameter is `null`, the <xref:System.IComparable> implementation of each key is used; therefore, each key must implement the <xref:System.IComparable> interface to be capable of comparisons with every other key in the <xref:System.Collections.SortedList> object.  \\n  \\n The capacity of a <xref:System.Collections.SortedList> object is the number of elements that the <xref:System.Collections.SortedList> can hold. As elements are added to a <xref:System.Collections.SortedList>, the capacity is automatically increased as required by reallocating the internal array.  \\n  \\n If the size of the collection can be estimated, specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <xref:System.Collections.SortedList> object.  \\n  \\n This constructor is an O(`n`) operation, where `n` is `capacity`.\"\n  example:\n  - \"The following code example creates collections using different <xref:System.Collections.SortedList> constructors and demonstrates the differences in the behavior of the collections.  \\n  \\n [!code-cpp[System.Collections.SortedList_ctorInt#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Collections.SortedList_ctorInt/CPP/sortedlist_ctorint.cpp#1)]\\n [!code-csharp[System.Collections.SortedList_ctorInt#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Collections.SortedList_ctorInt/CS/sortedlist_ctorint.cs#1)]\\n [!code-vb[System.Collections.SortedList_ctorInt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Collections.SortedList_ctorInt/VB/sortedlist_ctorint.vb#1)]\"\n  syntax:\n    content: public SortedList (System.Collections.IComparer comparer, int capacity);\n    parameters:\n    - id: comparer\n      type: System.Collections.IComparer\n      description: \"The <xref href=\\\"System.Collections.IComparer\\\"></xref> implementation to use when comparing keys.  \\n  \\n -or-  \\n  \\n `null` to use the <xref href=\\\"System.IComparable\\\"></xref> implementation of each key.\"\n    - id: capacity\n      type: System.Int32\n      description: The initial number of elements that the <xref href=\"System.Collections.SortedList\"></xref> object can contain.\n  overload: System.Collections.SortedList.#ctor*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>capacity</code> is less than zero.\n  - type: System.OutOfMemoryException\n    commentId: T:System.OutOfMemoryException\n    description: There is not enough available memory to create a <xref href=\"System.Collections.SortedList\"></xref> object with the specified <code>capacity</code>.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections/SortedList.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.SortedList.#ctor(System.Collections.IDictionary,System.Collections.IComparer)\n  commentId: M:System.Collections.SortedList.#ctor(System.Collections.IDictionary,System.Collections.IComparer)\n  id: '#ctor(System.Collections.IDictionary,System.Collections.IComparer)'\n  parent: System.Collections.SortedList\n  langs:\n  - csharp\n  name: SortedList(IDictionary, IComparer)\n  nameWithType: SortedList.SortedList(IDictionary, IComparer)\n  fullName: SortedList.SortedList(IDictionary, IComparer)\n  type: Constructor\n  assemblies:\n  - System.Collections.NonGeneric\n  - mscorlib\n  - netstandard\n  namespace: System.Collections\n  summary: Initializes a new instance of the <xref href=\"System.Collections.SortedList\"></xref> class that contains elements copied from the specified dictionary, has the same initial capacity as the number of elements copied, and is sorted according to the specified <xref href=\"System.Collections.IComparer\"></xref> interface.\n  remarks: \"The elements are sorted according to the specified <xref:System.Collections.IComparer> implementation. If the `comparer` parameter is `null`, the <xref:System.IComparable> implementation of each key is used; therefore, each key must implement the <xref:System.IComparable> interface to be capable of comparisons with every other key in the <xref:System.Collections.SortedList> object.  \\n  \\n A <xref:System.Collections.Hashtable> object is an example of an <xref:System.Collections.IDictionary> implementation that can be passed to this constructor. The new <xref:System.Collections.SortedList> object contains a copy of the keys and values stored in the <xref:System.Collections.Hashtable>.  \\n  \\n The capacity of a <xref:System.Collections.SortedList> object is the number of elements that the <xref:System.Collections.SortedList> can hold. As elements are added to a <xref:System.Collections.SortedList>, the capacity is automatically increased as required by reallocating the internal array.  \\n  \\n If the size of the collection can be estimated, specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <xref:System.Collections.SortedList> object.  \\n  \\n This constructor is an O(`n`) operation, where `n` is the number of elements in `d`.\"\n  example:\n  - \"The following code example creates collections using different <xref:System.Collections.SortedList> constructors and demonstrates the differences in the behavior of the collections.  \\n  \\n [!code-cpp[System.Collections.SortedList_ctorDictionary#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Collections.SortedList_ctorDictionary/CPP/sortedlist_ctordictionary.cpp#1)]\\n [!code-csharp[System.Collections.SortedList_ctorDictionary#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Collections.SortedList_ctorDictionary/CS/sortedlist_ctordictionary.cs#1)]\\n [!code-vb[System.Collections.SortedList_ctorDictionary#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Collections.SortedList_ctorDictionary/VB/sortedlist_ctordictionary.vb#1)]\"\n  syntax:\n    content: public SortedList (System.Collections.IDictionary d, System.Collections.IComparer comparer);\n    parameters:\n    - id: d\n      type: System.Collections.IDictionary\n      description: The <xref href=\"System.Collections.IDictionary\"></xref> implementation to copy to a new <xref href=\"System.Collections.SortedList\"></xref> object.\n    - id: comparer\n      type: System.Collections.IComparer\n      description: \"The <xref href=\\\"System.Collections.IComparer\\\"></xref> implementation to use when comparing keys.  \\n  \\n -or-  \\n  \\n `null` to use the <xref href=\\\"System.IComparable\\\"></xref> implementation of each key.\"\n  overload: System.Collections.SortedList.#ctor*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>d</code> is `null`.\n  - type: System.InvalidCastException\n    commentId: T:System.InvalidCastException\n    description: <code>comparer</code> is `null`, and one or more elements in <code>d</code> do not implement the <xref href=\"System.IComparable\"></xref> interface.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections/SortedList.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.SortedList.Add(System.Object,System.Object)\n  commentId: M:System.Collections.SortedList.Add(System.Object,System.Object)\n  id: Add(System.Object,System.Object)\n  parent: System.Collections.SortedList\n  langs:\n  - csharp\n  name: Add(Object, Object)\n  nameWithType: SortedList.Add(Object, Object)\n  fullName: SortedList.Add(Object, Object)\n  type: Method\n  assemblies:\n  - System.Collections.NonGeneric\n  - mscorlib\n  - netstandard\n  namespace: System.Collections\n  summary: Adds an element with the specified key and value to a <xref href=\"System.Collections.SortedList\"></xref> object.\n  remarks: \"The insertion point is determined based on the comparer selected, either explicitly or by default, when the <xref:System.Collections.SortedList> object was created.  \\n  \\n If <xref:System.Collections.SortedList.Count%2A> already equals <xref:System.Collections.SortedList.Capacity%2A>, the capacity of the <xref:System.Collections.SortedList> object is increased by automatically reallocating the internal array, and the existing elements are copied to the new array before the new element is added.  \\n  \\n You can also use the <xref:System.Collections.SortedList.Item%2A> property to add new elements by setting the value of a key that does not exist in the <xref:System.Collections.SortedList> object (for example, `myCollection[\\\"myNonexistentKey\\\"] = myValue`). However, if the specified key already exists in the <xref:System.Collections.SortedList>, setting the <xref:System.Collections.SortedList.Item%2A> property overwrites the old value. In contrast, the <xref:System.Collections.SortedList.Add%2A> method does not modify existing elements.  \\n  \\n The elements of a <xref:System.Collections.SortedList> object are sorted by the keys either according to a specific <xref:System.Collections.IComparer> implementation specified when the <xref:System.Collections.SortedList> is created or according to the <xref:System.IComparable> implementation provided by the keys themselves.  \\n  \\n A key cannot be `null`, but a value can be.  \\n  \\n This method is an O(`n`) operation for unsorted data, where `n` is <xref:System.Collections.SortedList.Count%2A>. It is an O(log `n`) operation if the new element is added at the end of the list. If insertion causes a resize, the operation is O(`n`).\"\n  example:\n  - \"The following code example shows how to add elements to a <xref:System.Collections.SortedList> object.  \\n  \\n [!code-cpp[Classic SortedList.Add Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic SortedList.Add Example/CPP/source.cpp#1)]\\n [!code-csharp[Classic SortedList.Add Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic SortedList.Add Example/CS/source.cs#1)]\\n [!code-vb[Classic SortedList.Add Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic SortedList.Add Example/VB/source.vb#1)]\"\n  syntax:\n    content: public virtual void Add (object key, object value);\n    parameters:\n    - id: key\n      type: System.Object\n      description: The key of the element to add.\n    - id: value\n      type: System.Object\n      description: The value of the element to add. The value can be `null`.\n  overload: System.Collections.SortedList.Add*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>key</code> is `null`.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"An element with the specified <code>key</code> already exists in the <xref href=\\\"System.Collections.SortedList\\\"></xref> object.  \\n  \\n -or-  \\n  \\n The <xref href=\\\"System.Collections.SortedList\\\"></xref> is set to use the <xref href=\\\"System.IComparable\\\"></xref> interface, and <code>key</code> does not implement the <xref href=\\\"System.IComparable\\\"></xref> interface.\"\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: \"The <xref href=\\\"System.Collections.SortedList\\\"></xref> is read-only.  \\n  \\n -or-  \\n  \\n The <xref href=\\\"System.Collections.SortedList\\\"></xref> has a fixed size.\"\n  - type: System.OutOfMemoryException\n    commentId: T:System.OutOfMemoryException\n    description: There is not enough available memory to add the element to the <xref href=\"System.Collections.SortedList\"></xref>.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The comparer throws an exception.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections/SortedList.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.SortedList.Capacity\n  commentId: P:System.Collections.SortedList.Capacity\n  id: Capacity\n  parent: System.Collections.SortedList\n  langs:\n  - csharp\n  name: Capacity\n  nameWithType: SortedList.Capacity\n  fullName: SortedList.Capacity\n  type: Property\n  assemblies:\n  - System.Collections.NonGeneric\n  - mscorlib\n  - netstandard\n  namespace: System.Collections\n  summary: Gets or sets the capacity of a <xref href=\"System.Collections.SortedList\"></xref> object.\n  remarks: \"<xref:System.Collections.SortedList.Capacity%2A> is the number of elements that the <xref:System.Collections.SortedList> object can store. <xref:System.Collections.SortedList.Count%2A> is the number of elements that are actually in the <xref:System.Collections.SortedList>.  \\n  \\n <xref:System.Collections.SortedList.Capacity%2A> is always greater than or equal to <xref:System.Collections.SortedList.Count%2A>. If <xref:System.Collections.SortedList.Count%2A> exceeds <xref:System.Collections.SortedList.Capacity%2A> while adding elements, the capacity is automatically increased by reallocating the internal array before copying the old elements and adding the new elements.  \\n  \\n The capacity can be decreased by calling <xref:System.Collections.SortedList.TrimToSize%2A> or by setting the <xref:System.Collections.SortedList.Capacity%2A> property explicitly. When the value of <xref:System.Collections.SortedList.Capacity%2A> is set explicitly, the internal array is also reallocated to accommodate the specified capacity.  \\n  \\n Retrieving the value of this property is an O(1) operation; setting the property is an O(`n`) operation, where `n` is the new capacity.\"\n  syntax:\n    content: public virtual int Capacity { get; set; }\n    return:\n      type: System.Int32\n      description: The number of elements that the <xref href=\"System.Collections.SortedList\"></xref> object can contain.\n  overload: System.Collections.SortedList.Capacity*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: The value assigned is less than the current number of elements in the <xref href=\"System.Collections.SortedList\"></xref> object.\n  - type: System.OutOfMemoryException\n    commentId: T:System.OutOfMemoryException\n    description: There is not enough memory available on the system.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections/SortedList.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.SortedList.Clear\n  commentId: M:System.Collections.SortedList.Clear\n  id: Clear\n  parent: System.Collections.SortedList\n  langs:\n  - csharp\n  name: Clear()\n  nameWithType: SortedList.Clear()\n  fullName: SortedList.Clear()\n  type: Method\n  assemblies:\n  - System.Collections.NonGeneric\n  - mscorlib\n  - netstandard\n  namespace: System.Collections\n  summary: Removes all elements from a <xref href=\"System.Collections.SortedList\"></xref> object.\n  remarks: \"<xref:System.Collections.SortedList.Count%2A> is set to zero and references to other objects from elements of the collection are also released.  \\n  \\n <xref:System.Collections.SortedList.Capacity%2A> remains unchanged. To reset the capacity of the <xref:System.Collections.SortedList> object, call <xref:System.Collections.SortedList.TrimToSize%2A> or set the <xref:System.Collections.SortedList.Capacity%2A> property directly. Trimming an empty <xref:System.Collections.SortedList> sets the capacity of the <xref:System.Collections.SortedList> to the default capacity.  \\n  \\n This method is an O(`n`) operation, where `n` is <xref:System.Collections.SortedList.Count%2A>.\"\n  example:\n  - \"The following code example shows how to trim the unused portions of a <xref:System.Collections.SortedList> object and how to clear the values of the <xref:System.Collections.SortedList>.  \\n  \\n [!code-cpp[Classic SortedList.Clear Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic SortedList.Clear Example/CPP/source.cpp#1)]\\n [!code-csharp[Classic SortedList.Clear Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic SortedList.Clear Example/CS/source.cs#1)]\\n [!code-vb[Classic SortedList.Clear Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic SortedList.Clear Example/VB/source.vb#1)]\"\n  syntax:\n    content: public virtual void Clear ();\n    parameters: []\n  overload: System.Collections.SortedList.Clear*\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: \"The <xref href=\\\"System.Collections.SortedList\\\"></xref> object is read-only.  \\n  \\n -or-  \\n  \\n The <xref href=\\\"System.Collections.SortedList\\\"></xref> has a fixed size.\"\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections/SortedList.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.SortedList.Clone\n  commentId: M:System.Collections.SortedList.Clone\n  id: Clone\n  parent: System.Collections.SortedList\n  langs:\n  - csharp\n  name: Clone()\n  nameWithType: SortedList.Clone()\n  fullName: SortedList.Clone()\n  type: Method\n  assemblies:\n  - System.Collections.NonGeneric\n  - mscorlib\n  - netstandard\n  namespace: System.Collections\n  summary: Creates a shallow copy of a <xref href=\"System.Collections.SortedList\"></xref> object.\n  remarks: \"A shallow copy of a collection copies only the elements of the collection, whether they are reference types or value types, but does not copy the objects that the references refer to. The references in the new collection point to the same objects that the references in the original collection point to.  \\n  \\n In contrast, a deep copy of a collection copies the elements and everything directly or indirectly referenced by the elements.  \\n  \\n This method is an O(`n`) operation, where `n` is <xref:System.Collections.SortedList.Count%2A>.\"\n  syntax:\n    content: public virtual object Clone ();\n    parameters: []\n    return:\n      type: System.Object\n      description: A shallow copy of the <xref href=\"System.Collections.SortedList\"></xref> object.\n  overload: System.Collections.SortedList.Clone*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections/SortedList.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.SortedList.Contains(System.Object)\n  commentId: M:System.Collections.SortedList.Contains(System.Object)\n  id: Contains(System.Object)\n  parent: System.Collections.SortedList\n  langs:\n  - csharp\n  name: Contains(Object)\n  nameWithType: SortedList.Contains(Object)\n  fullName: SortedList.Contains(Object)\n  type: Method\n  assemblies:\n  - System.Collections.NonGeneric\n  - mscorlib\n  - netstandard\n  namespace: System.Collections\n  summary: Determines whether a <xref href=\"System.Collections.SortedList\"></xref> object contains a specific key.\n  remarks: \"The elements of a <xref:System.Collections.SortedList> object are sorted by the keys either according to a specific <xref:System.Collections.IComparer> implementation specified when the <xref:System.Collections.SortedList> is created or according to the <xref:System.IComparable> implementation provided by the keys themselves.  \\n  \\n <xref:System.Collections.SortedList.Contains%2A> implements <xref:System.Collections.IDictionary.Contains%2A?displayProperty=fullName>. It behaves exactly as <xref:System.Collections.SortedList.ContainsKey%2A>.  \\n  \\n This method uses a binary search algorithm; therefore, this method is an O(log `n`) operation, where `n` is <xref:System.Collections.SortedList.Count%2A>.  \\n  \\n Starting with the .NET Framework 2.0, this method uses the collection’s objects’ <xref:System.Object.Equals%2A> and <xref:System.IComparable.CompareTo%2A> methods on `item` to determine whether item exists. In the earlier versions of the .NET Framework, this determination was made by using the <xref:System.Object.Equals%2A> and <xref:System.IComparable.CompareTo%2A> methods of the `item` parameter on the objects in the collection.\"\n  example:\n  - \"The following code example shows how to determine whether a <xref:System.Collections.SortedList> object contains a specific element.  \\n  \\n [!code-cpp[Classic SortedList.Contains Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic SortedList.Contains Example/CPP/source.cpp#1)]\\n [!code-csharp[Classic SortedList.Contains Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic SortedList.Contains Example/CS/source.cs#1)]\\n [!code-vb[Classic SortedList.Contains Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic SortedList.Contains Example/VB/source.vb#1)]\"\n  syntax:\n    content: public virtual bool Contains (object key);\n    parameters:\n    - id: key\n      type: System.Object\n      description: The key to locate in the <xref href=\"System.Collections.SortedList\"></xref> object.\n    return:\n      type: System.Boolean\n      description: '`true` if the <xref href=\"System.Collections.SortedList\"></xref> object contains an element with the specified <code>key</code>; otherwise, `false`.'\n  overload: System.Collections.SortedList.Contains*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>key</code> is `null`.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The comparer throws an exception.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections/SortedList.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.SortedList.ContainsKey(System.Object)\n  commentId: M:System.Collections.SortedList.ContainsKey(System.Object)\n  id: ContainsKey(System.Object)\n  parent: System.Collections.SortedList\n  langs:\n  - csharp\n  name: ContainsKey(Object)\n  nameWithType: SortedList.ContainsKey(Object)\n  fullName: SortedList.ContainsKey(Object)\n  type: Method\n  assemblies:\n  - System.Collections.NonGeneric\n  - mscorlib\n  - netstandard\n  namespace: System.Collections\n  summary: Determines whether a <xref href=\"System.Collections.SortedList\"></xref> object contains a specific key.\n  remarks: \"The elements of a <xref:System.Collections.SortedList> object are sorted by the keys either according to a specific <xref:System.Collections.IComparer> implementation specified when the <xref:System.Collections.SortedList> is created or according to the <xref:System.IComparable> implementation provided by the keys themselves.  \\n  \\n This method behaves exactly as the <xref:System.Collections.SortedList.Contains%2A> method.  \\n  \\n This method uses a binary search algorithm; therefore, this method is an O(log `n`) operation, where `n` is <xref:System.Collections.SortedList.Count%2A>.  \\n  \\n Starting with the .NET Framework 2.0, this method uses the collection’s objects’ <xref:System.Object.Equals%2A> and <xref:System.IComparable.CompareTo%2A> methods on `item` to determine whether item exists. In the earlier versions of the .NET Framework, this determination was made by using the <xref:System.Object.Equals%2A> and <xref:System.IComparable.CompareTo%2A> methods of the `item` parameter on the objects in the collection.\"\n  example:\n  - \"The following code example shows how to determine whether a <xref:System.Collections.SortedList> object contains a specific element.  \\n  \\n [!code-cpp[Classic SortedList.Contains Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic SortedList.Contains Example/CPP/source.cpp#1)]\\n [!code-csharp[Classic SortedList.Contains Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic SortedList.Contains Example/CS/source.cs#1)]\\n [!code-vb[Classic SortedList.Contains Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic SortedList.Contains Example/VB/source.vb#1)]\"\n  syntax:\n    content: public virtual bool ContainsKey (object key);\n    parameters:\n    - id: key\n      type: System.Object\n      description: The key to locate in the <xref href=\"System.Collections.SortedList\"></xref> object.\n    return:\n      type: System.Boolean\n      description: '`true` if the <xref href=\"System.Collections.SortedList\"></xref> object contains an element with the specified <code>key</code>; otherwise, `false`.'\n  overload: System.Collections.SortedList.ContainsKey*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>key</code> is `null`.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The comparer throws an exception.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections/SortedList.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.SortedList.ContainsValue(System.Object)\n  commentId: M:System.Collections.SortedList.ContainsValue(System.Object)\n  id: ContainsValue(System.Object)\n  parent: System.Collections.SortedList\n  langs:\n  - csharp\n  name: ContainsValue(Object)\n  nameWithType: SortedList.ContainsValue(Object)\n  fullName: SortedList.ContainsValue(Object)\n  type: Method\n  assemblies:\n  - System.Collections.NonGeneric\n  - mscorlib\n  - netstandard\n  namespace: System.Collections\n  summary: Determines whether a <xref href=\"System.Collections.SortedList\"></xref> object contains a specific value.\n  remarks: \"The values of the elements of the <xref:System.Collections.SortedList> object are compared to the specified value using the <xref:System.Object.Equals%2A> method.  \\n  \\n This method performs a linear search; therefore, the average execution time is proportional to <xref:System.Collections.SortedList.Count%2A>. That is, this method is an O(`n`) operation, where `n` is <xref:System.Collections.SortedList.Count%2A>.  \\n  \\n Starting with the .NET Framework 2.0, this method uses the collection’s objects’ <xref:System.Object.Equals%2A> and <xref:System.IComparable.CompareTo%2A> methods on `item` to determine whether item exists. In the earlier versions of the .NET Framework, this determination was made by using the <xref:System.Object.Equals%2A> and <xref:System.IComparable.CompareTo%2A> methods of the `item` parameter on the objects in the collection.\"\n  example:\n  - \"The following code example shows how to determine whether a <xref:System.Collections.SortedList> object contains a specific element.  \\n  \\n [!code-cpp[Classic SortedList.Contains Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic SortedList.Contains Example/CPP/source.cpp#1)]\\n [!code-csharp[Classic SortedList.Contains Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic SortedList.Contains Example/CS/source.cs#1)]\\n [!code-vb[Classic SortedList.Contains Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic SortedList.Contains Example/VB/source.vb#1)]\"\n  syntax:\n    content: public virtual bool ContainsValue (object value);\n    parameters:\n    - id: value\n      type: System.Object\n      description: The value to locate in the <xref href=\"System.Collections.SortedList\"></xref> object. The value can be `null`.\n    return:\n      type: System.Boolean\n      description: '`true` if the <xref href=\"System.Collections.SortedList\"></xref> object contains an element with the specified <code>value</code>; otherwise, `false`.'\n  overload: System.Collections.SortedList.ContainsValue*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections/SortedList.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.SortedList.CopyTo(System.Array,System.Int32)\n  commentId: M:System.Collections.SortedList.CopyTo(System.Array,System.Int32)\n  id: CopyTo(System.Array,System.Int32)\n  parent: System.Collections.SortedList\n  langs:\n  - csharp\n  name: CopyTo(Array, Int32)\n  nameWithType: SortedList.CopyTo(Array, Int32)\n  fullName: SortedList.CopyTo(Array, Int32)\n  type: Method\n  assemblies:\n  - System.Collections.NonGeneric\n  - mscorlib\n  - netstandard\n  namespace: System.Collections\n  summary: Copies <xref href=\"System.Collections.SortedList\"></xref> elements to a one-dimensional <xref href=\"System.Array\"></xref> object, starting at the specified index in the array.\n  remarks: \"The key/value pairs are copied to the <xref:System.Array> object in the same order in which the enumerator iterates through the <xref:System.Collections.SortedList> object.  \\n  \\n To copy only the keys in the <xref:System.Collections.SortedList>, use `SortedList.Keys.CopyTo`.  \\n  \\n To copy only the values in the <xref:System.Collections.SortedList>, use `SortedList.Values.CopyTo`.  \\n  \\n This method is an O(`n`) operation, where `n` is <xref:System.Collections.SortedList.Count%2A>.\"\n  example:\n  - \"The following code example shows how to copy the values in a <xref:System.Collections.SortedList> object into a one-dimensional <xref:System.Array> object.  \\n  \\n [!code-cpp[Classic SortedList.CopyTo Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic SortedList.CopyTo Example/CPP/source.cpp#1)]\\n [!code-csharp[Classic SortedList.CopyTo Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic SortedList.CopyTo Example/CS/source.cs#1)]\\n [!code-vb[Classic SortedList.CopyTo Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic SortedList.CopyTo Example/VB/source.vb#1)]\"\n  syntax:\n    content: public virtual void CopyTo (Array array, int arrayIndex);\n    parameters:\n    - id: array\n      type: System.Array\n      description: The one-dimensional <xref href=\"System.Array\"></xref> object that is the destination of the <xref href=\"System.Collections.DictionaryEntry\"></xref> objects copied from <xref href=\"System.Collections.SortedList\"></xref>. The <xref href=\"System.Array\"></xref> must have zero-based indexing.\n    - id: arrayIndex\n      type: System.Int32\n      description: The zero-based index in <code>array</code> at which copying begins.\n  overload: System.Collections.SortedList.CopyTo*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>array</code> is `null`.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>arrayIndex</code> is less than zero.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"<code>array</code> is multidimensional.  \\n  \\n -or-  \\n  \\n The number of elements in the source <xref href=\\\"System.Collections.SortedList\\\"></xref> object is greater than the available space from <code>arrayIndex</code> to the end of the destination <code>array</code>.\"\n  - type: System.InvalidCastException\n    commentId: T:System.InvalidCastException\n    description: The type of the source <xref href=\"System.Collections.SortedList\"></xref> cannot be cast automatically to the type of the destination <code>array</code>.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections/SortedList.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.SortedList.Count\n  commentId: P:System.Collections.SortedList.Count\n  id: Count\n  parent: System.Collections.SortedList\n  langs:\n  - csharp\n  name: Count\n  nameWithType: SortedList.Count\n  fullName: SortedList.Count\n  type: Property\n  assemblies:\n  - System.Collections.NonGeneric\n  - mscorlib\n  - netstandard\n  namespace: System.Collections\n  summary: Gets the number of elements contained in a <xref href=\"System.Collections.SortedList\"></xref> object.\n  remarks: \"Each element is a key/value pair that can be accessed as a <xref:System.Collections.DictionaryEntry> object.  \\n  \\n <xref:System.Collections.SortedList.Capacity%2A> is the number of elements that the <xref:System.Collections.SortedList> object can store. <xref:System.Collections.SortedList.Count%2A> is the number of elements that are actually in the <xref:System.Collections.SortedList>.  \\n  \\n <xref:System.Collections.SortedList.Capacity%2A> is always greater than or equal to <xref:System.Collections.SortedList.Count%2A>. If <xref:System.Collections.SortedList.Count%2A> exceeds <xref:System.Collections.SortedList.Capacity%2A> while adding elements, the capacity is automatically increased by reallocating the internal array before copying the old elements and adding the new elements.  \\n  \\n Retrieving the value of this property is an O(1) operation.\"\n  syntax:\n    content: public virtual int Count { get; }\n    return:\n      type: System.Int32\n      description: The number of elements contained in the <xref href=\"System.Collections.SortedList\"></xref> object.\n  overload: System.Collections.SortedList.Count*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections/SortedList.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.SortedList.GetByIndex(System.Int32)\n  commentId: M:System.Collections.SortedList.GetByIndex(System.Int32)\n  id: GetByIndex(System.Int32)\n  parent: System.Collections.SortedList\n  langs:\n  - csharp\n  name: GetByIndex(Int32)\n  nameWithType: SortedList.GetByIndex(Int32)\n  fullName: SortedList.GetByIndex(Int32)\n  type: Method\n  assemblies:\n  - System.Collections.NonGeneric\n  - mscorlib\n  - netstandard\n  namespace: System.Collections\n  summary: Gets the value at the specified index of a <xref href=\"System.Collections.SortedList\"></xref> object.\n  remarks: \"The index sequence is based on the sort sequence. When an element is added, it is inserted into <xref:System.Collections.SortedList> in the correct sort order, and the indexing adjusts accordingly. When an element is removed, the indexing also adjusts accordingly. Therefore, the index of a specific key/value pair might change as elements are added or removed from the <xref:System.Collections.SortedList> object.  \\n  \\n This method is an O(1) operation.\"\n  example:\n  - \"The following code example shows how to get one or all the keys or values in a <xref:System.Collections.SortedList> object.  \\n  \\n [!code-cpp[Classic SortedList.GetByIndex Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic SortedList.GetByIndex Example/CPP/source.cpp#1)]\\n [!code-csharp[Classic SortedList.GetByIndex Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic SortedList.GetByIndex Example/CS/source.cs#1)]\\n [!code-vb[Classic SortedList.GetByIndex Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic SortedList.GetByIndex Example/VB/source.vb#1)]\"\n  syntax:\n    content: public virtual object GetByIndex (int index);\n    parameters:\n    - id: index\n      type: System.Int32\n      description: The zero-based index of the value to get.\n    return:\n      type: System.Object\n      description: The value at the specified index of the <xref href=\"System.Collections.SortedList\"></xref> object.\n  overload: System.Collections.SortedList.GetByIndex*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>index</code> is outside the range of valid indexes for the <xref href=\"System.Collections.SortedList\"></xref> object.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections/SortedList.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.SortedList.GetEnumerator\n  commentId: M:System.Collections.SortedList.GetEnumerator\n  id: GetEnumerator\n  parent: System.Collections.SortedList\n  langs:\n  - csharp\n  name: GetEnumerator()\n  nameWithType: SortedList.GetEnumerator()\n  fullName: SortedList.GetEnumerator()\n  type: Method\n  assemblies:\n  - System.Collections.NonGeneric\n  - mscorlib\n  - netstandard\n  namespace: System.Collections\n  summary: Returns an <xref href=\"System.Collections.IDictionaryEnumerator\"></xref> object that iterates through a <xref href=\"System.Collections.SortedList\"></xref> object.\n  remarks: \"The `foreach` statement of the C# language (`for each` in Visual Basic) hides the complexity of the enumerators.  Therefore, using `foreach` is recommended, instead of directly manipulating the enumerator.  \\n  \\n Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.  \\n  \\n Initially, the enumerator is positioned before the first element in the collection. <xref:System.Collections.IEnumerator.Reset%2A> also brings the enumerator back to this position.  At this position, <xref:System.Collections.IEnumerator.Current%2A> is undefined. Therefore, you must call <xref:System.Collections.IEnumerator.MoveNext%2A> to advance the enumerator to the first element of the collection before reading the value of <xref:System.Collections.IEnumerator.Current%2A>.  \\n  \\n <xref:System.Collections.IEnumerator.Current%2A> returns the same object until either <xref:System.Collections.IEnumerator.MoveNext%2A> or <xref:System.Collections.IEnumerator.Reset%2A> is called. <xref:System.Collections.IEnumerator.MoveNext%2A> sets <xref:System.Collections.IEnumerator.Current%2A> to the next element.  \\n  \\n If <xref:System.Collections.IEnumerator.MoveNext%2A> passes the end of the collection, the enumerator is positioned after the last element in the collection and <xref:System.Collections.IEnumerator.MoveNext%2A> returns `false`. When the enumerator is at this position, subsequent calls to <xref:System.Collections.IEnumerator.MoveNext%2A> also return `false`. If the last call to <xref:System.Collections.IEnumerator.MoveNext%2A> returned `false`, <xref:System.Collections.IEnumerator.Current%2A> is undefined. To set <xref:System.Collections.IEnumerator.Current%2A> to the first element of the collection again, you can call <xref:System.Collections.IEnumerator.Reset%2A> followed by <xref:System.Collections.IEnumerator.MoveNext%2A>.  \\n  \\n An enumerator remains valid as long as the collection remains unchanged. If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and its behavior is undefined.  \\n  \\n The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure.  To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.  To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.  \\n  \\n This method is an O(1) operation.\"\n  syntax:\n    content: public virtual System.Collections.IDictionaryEnumerator GetEnumerator ();\n    parameters: []\n    return:\n      type: System.Collections.IDictionaryEnumerator\n      description: An <xref href=\"System.Collections.IDictionaryEnumerator\"></xref> object for the <xref href=\"System.Collections.SortedList\"></xref> object.\n  overload: System.Collections.SortedList.GetEnumerator*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections/SortedList.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.SortedList.GetKey(System.Int32)\n  commentId: M:System.Collections.SortedList.GetKey(System.Int32)\n  id: GetKey(System.Int32)\n  parent: System.Collections.SortedList\n  langs:\n  - csharp\n  name: GetKey(Int32)\n  nameWithType: SortedList.GetKey(Int32)\n  fullName: SortedList.GetKey(Int32)\n  type: Method\n  assemblies:\n  - System.Collections.NonGeneric\n  - mscorlib\n  - netstandard\n  namespace: System.Collections\n  summary: Gets the key at the specified index of a <xref href=\"System.Collections.SortedList\"></xref> object.\n  remarks: \"The index sequence is based on the sort sequence. When an element is added, it is inserted into <xref:System.Collections.SortedList> in the correct sort order, and the indexing adjusts accordingly. When an element is removed, the indexing also adjusts accordingly. Therefore, the index of a specific key/value pair might change as elements are added or removed from the <xref:System.Collections.SortedList> object.  \\n  \\n This method is an O(1) operation.\"\n  example:\n  - \"The following code example shows how to get one or all the keys or values in a <xref:System.Collections.SortedList> object.  \\n  \\n [!code-cpp[Classic SortedList.GetByIndex Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic SortedList.GetByIndex Example/CPP/source.cpp#1)]\\n [!code-csharp[Classic SortedList.GetByIndex Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic SortedList.GetByIndex Example/CS/source.cs#1)]\\n [!code-vb[Classic SortedList.GetByIndex Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic SortedList.GetByIndex Example/VB/source.vb#1)]\"\n  syntax:\n    content: public virtual object GetKey (int index);\n    parameters:\n    - id: index\n      type: System.Int32\n      description: The zero-based index of the key to get.\n    return:\n      type: System.Object\n      description: The key at the specified index of the <xref href=\"System.Collections.SortedList\"></xref> object.\n  overload: System.Collections.SortedList.GetKey*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>index</code> is outside the range of valid indexes for the <xref href=\"System.Collections.SortedList\"></xref> object.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections/SortedList.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.SortedList.GetKeyList\n  commentId: M:System.Collections.SortedList.GetKeyList\n  id: GetKeyList\n  parent: System.Collections.SortedList\n  langs:\n  - csharp\n  name: GetKeyList()\n  nameWithType: SortedList.GetKeyList()\n  fullName: SortedList.GetKeyList()\n  type: Method\n  assemblies:\n  - System.Collections.NonGeneric\n  - mscorlib\n  - netstandard\n  namespace: System.Collections\n  summary: Gets the keys in a <xref href=\"System.Collections.SortedList\"></xref> object.\n  remarks: \"The returned <xref:System.Collections.IList> object is a read-only view of the keys of the <xref:System.Collections.SortedList> object. Modifications made to the underlying <xref:System.Collections.SortedList> are immediately reflected in the <xref:System.Collections.IList>.  \\n  \\n The elements of the returned <xref:System.Collections.IList> are sorted in the same order as the keys of the <xref:System.Collections.SortedList>.  \\n  \\n This method is similar to the <xref:System.Collections.SortedList.Keys%2A> property, but returns an <xref:System.Collections.IList> object instead of an <xref:System.Collections.ICollection> object.  \\n  \\n This method is an O(1) operation.\"\n  example:\n  - \"The following code example shows how to get one or all the keys or values in a <xref:System.Collections.SortedList> object.  \\n  \\n [!code-cpp[Classic SortedList.GetByIndex Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic SortedList.GetByIndex Example/CPP/source.cpp#1)]\\n [!code-csharp[Classic SortedList.GetByIndex Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic SortedList.GetByIndex Example/CS/source.cs#1)]\\n [!code-vb[Classic SortedList.GetByIndex Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic SortedList.GetByIndex Example/VB/source.vb#1)]\"\n  syntax:\n    content: public virtual System.Collections.IList GetKeyList ();\n    parameters: []\n    return:\n      type: System.Collections.IList\n      description: An <xref href=\"System.Collections.IList\"></xref> object containing the keys in the <xref href=\"System.Collections.SortedList\"></xref> object.\n  overload: System.Collections.SortedList.GetKeyList*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections/SortedList.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.SortedList.GetValueList\n  commentId: M:System.Collections.SortedList.GetValueList\n  id: GetValueList\n  parent: System.Collections.SortedList\n  langs:\n  - csharp\n  name: GetValueList()\n  nameWithType: SortedList.GetValueList()\n  fullName: SortedList.GetValueList()\n  type: Method\n  assemblies:\n  - System.Collections.NonGeneric\n  - mscorlib\n  - netstandard\n  namespace: System.Collections\n  summary: Gets the values in a <xref href=\"System.Collections.SortedList\"></xref> object.\n  remarks: \"The returned <xref:System.Collections.IList> object is a read-only view of the values of the <xref:System.Collections.SortedList> object. Modifications made to the underlying <xref:System.Collections.SortedList> are immediately reflected in the <xref:System.Collections.IList>.  \\n  \\n The elements of the returned <xref:System.Collections.IList> are sorted in the same order as the values of the <xref:System.Collections.SortedList>.  \\n  \\n This method is similar to the <xref:System.Collections.SortedList.Values%2A> property, but returns an <xref:System.Collections.IList> object instead of an <xref:System.Collections.ICollection> object.  \\n  \\n This method is an O(1) operation.\"\n  example:\n  - \"The following code example shows how to get one or all the keys or values in a <xref:System.Collections.SortedList> object.  \\n  \\n [!code-cpp[Classic SortedList.GetByIndex Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic SortedList.GetByIndex Example/CPP/source.cpp#1)]\\n [!code-csharp[Classic SortedList.GetByIndex Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic SortedList.GetByIndex Example/CS/source.cs#1)]\\n [!code-vb[Classic SortedList.GetByIndex Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic SortedList.GetByIndex Example/VB/source.vb#1)]\"\n  syntax:\n    content: public virtual System.Collections.IList GetValueList ();\n    parameters: []\n    return:\n      type: System.Collections.IList\n      description: An <xref href=\"System.Collections.IList\"></xref> object containing the values in the <xref href=\"System.Collections.SortedList\"></xref> object.\n  overload: System.Collections.SortedList.GetValueList*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections/SortedList.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.SortedList.IndexOfKey(System.Object)\n  commentId: M:System.Collections.SortedList.IndexOfKey(System.Object)\n  id: IndexOfKey(System.Object)\n  parent: System.Collections.SortedList\n  langs:\n  - csharp\n  name: IndexOfKey(Object)\n  nameWithType: SortedList.IndexOfKey(Object)\n  fullName: SortedList.IndexOfKey(Object)\n  type: Method\n  assemblies:\n  - System.Collections.NonGeneric\n  - mscorlib\n  - netstandard\n  namespace: System.Collections\n  summary: Returns the zero-based index of the specified key in a <xref href=\"System.Collections.SortedList\"></xref> object.\n  remarks: \"The elements of a <xref:System.Collections.SortedList> object are sorted by the keys either according to a specific <xref:System.Collections.IComparer> implementation specified when the <xref:System.Collections.SortedList> is created, or according to the <xref:System.IComparable> implementation provided by the keys themselves.  \\n  \\n The index sequence is based on the sort sequence. When an element is added, it is inserted into <xref:System.Collections.SortedList> in the correct sort order, and the indexing adjusts accordingly. When an element is removed, the indexing also adjusts accordingly. Therefore, the index of a specific key/value pair might change as elements are added or removed from the <xref:System.Collections.SortedList>.  \\n  \\n This method uses a binary search algorithm; therefore, this method is an O(log `n`) operation, where `n` is <xref:System.Collections.SortedList.Count%2A>.  \\n  \\n Starting with the .NET Framework 2.0, this method uses the collection’s objects’ <xref:System.Object.Equals%2A> and <xref:System.IComparable.CompareTo%2A> methods on `item` to determine whether item exists. In the earlier versions of the .NET Framework, this determination was made by using the <xref:System.Object.Equals%2A> and <xref:System.IComparable.CompareTo%2A> methods of the `item` parameter on the objects in the collection.\"\n  example:\n  - \"The following code example shows how to determine the index of a key or a value in a <xref:System.Collections.SortedList> object.  \\n  \\n [!code-cpp[Classic SortedList.IndexOfKey Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic SortedList.IndexOfKey Example/CPP/source.cpp#1)]\\n [!code-csharp[Classic SortedList.IndexOfKey Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic SortedList.IndexOfKey Example/CS/source.cs#1)]\\n [!code-vb[Classic SortedList.IndexOfKey Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic SortedList.IndexOfKey Example/VB/source.vb#1)]\"\n  syntax:\n    content: public virtual int IndexOfKey (object key);\n    parameters:\n    - id: key\n      type: System.Object\n      description: The key to locate in the <xref href=\"System.Collections.SortedList\"></xref> object.\n    return:\n      type: System.Int32\n      description: The zero-based index of the <code>key</code> parameter, if <code>key</code> is found in the <xref href=\"System.Collections.SortedList\"></xref> object; otherwise, -1.\n  overload: System.Collections.SortedList.IndexOfKey*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>key</code> is `null`.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The comparer throws an exception.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections/SortedList.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.SortedList.IndexOfValue(System.Object)\n  commentId: M:System.Collections.SortedList.IndexOfValue(System.Object)\n  id: IndexOfValue(System.Object)\n  parent: System.Collections.SortedList\n  langs:\n  - csharp\n  name: IndexOfValue(Object)\n  nameWithType: SortedList.IndexOfValue(Object)\n  fullName: SortedList.IndexOfValue(Object)\n  type: Method\n  assemblies:\n  - System.Collections.NonGeneric\n  - mscorlib\n  - netstandard\n  namespace: System.Collections\n  summary: Returns the zero-based index of the first occurrence of the specified value in a <xref href=\"System.Collections.SortedList\"></xref> object.\n  remarks: \"The index sequence is based on the sort sequence. When an element is added, it is inserted into <xref:System.Collections.SortedList> in the correct sort order, and the indexing adjusts accordingly. When an element is removed, the indexing also adjusts accordingly. Therefore, the index of a specific key/value pair might change as elements are added or removed from the <xref:System.Collections.SortedList> object.  \\n  \\n The values of the elements of the <xref:System.Collections.SortedList> are compared to the specified value using the <xref:System.Object.Equals%2A> method.  \\n  \\n This method uses a linear search; therefore, this method is an O(`n`) operation, where `n` is <xref:System.Collections.SortedList.Count%2A>.  \\n  \\n Starting with the .NET Framework 2.0, this method uses the collection’s objects’ <xref:System.Object.Equals%2A> and <xref:System.IComparable.CompareTo%2A> methods on `item` to determine whether item exists. In the earlier versions of the .NET Framework, this determination was made by using the <xref:System.Object.Equals%2A> and <xref:System.IComparable.CompareTo%2A> methods of the `item` parameter on the objects in the collection.\"\n  example:\n  - \"The following code example shows how to determine the index of a key or a value in a <xref:System.Collections.SortedList> object.  \\n  \\n [!code-cpp[Classic SortedList.IndexOfKey Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic SortedList.IndexOfKey Example/CPP/source.cpp#1)]\\n [!code-csharp[Classic SortedList.IndexOfKey Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic SortedList.IndexOfKey Example/CS/source.cs#1)]\\n [!code-vb[Classic SortedList.IndexOfKey Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic SortedList.IndexOfKey Example/VB/source.vb#1)]\"\n  syntax:\n    content: public virtual int IndexOfValue (object value);\n    parameters:\n    - id: value\n      type: System.Object\n      description: The value to locate in the <xref href=\"System.Collections.SortedList\"></xref> object. The value can be `null`.\n    return:\n      type: System.Int32\n      description: The zero-based index of the first occurrence of the <code>value</code> parameter, if <code>value</code> is found in the <xref href=\"System.Collections.SortedList\"></xref> object; otherwise, -1.\n  overload: System.Collections.SortedList.IndexOfValue*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections/SortedList.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.SortedList.IsFixedSize\n  commentId: P:System.Collections.SortedList.IsFixedSize\n  id: IsFixedSize\n  parent: System.Collections.SortedList\n  langs:\n  - csharp\n  name: IsFixedSize\n  nameWithType: SortedList.IsFixedSize\n  fullName: SortedList.IsFixedSize\n  type: Property\n  assemblies:\n  - System.Collections.NonGeneric\n  - mscorlib\n  - netstandard\n  namespace: System.Collections\n  summary: Gets a value indicating whether a <xref href=\"System.Collections.SortedList\"></xref> object has a fixed size.\n  remarks: \"A collection with a fixed size does not allow the addition or removal of elements after the collection is created, but does allow the modification of existing elements.  \\n  \\n A collection with a fixed size is simply a collection with a wrapper that prevents adding and removing elements; therefore, if changes are made to the underlying collection, including the addition or removal of elements, the fixed-size collection reflects those changes.  \\n  \\n Retrieving the value of this property is an O(1) operation.\"\n  syntax:\n    content: public virtual bool IsFixedSize { get; }\n    return:\n      type: System.Boolean\n      description: '`true` if the <xref href=\"System.Collections.SortedList\"></xref> object has a fixed size; otherwise, `false`. The default is `false`.'\n  overload: System.Collections.SortedList.IsFixedSize*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections/SortedList.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.SortedList.IsReadOnly\n  commentId: P:System.Collections.SortedList.IsReadOnly\n  id: IsReadOnly\n  parent: System.Collections.SortedList\n  langs:\n  - csharp\n  name: IsReadOnly\n  nameWithType: SortedList.IsReadOnly\n  fullName: SortedList.IsReadOnly\n  type: Property\n  assemblies:\n  - System.Collections.NonGeneric\n  - mscorlib\n  - netstandard\n  namespace: System.Collections\n  summary: Gets a value indicating whether a <xref href=\"System.Collections.SortedList\"></xref> object is read-only.\n  remarks: \"A collection that is read-only does not allow the addition, removal, or modification of elements after the collection is created.  \\n  \\n A collection that is read-only is simply a collection with a wrapper that prevents modifying the collection; therefore, if changes are made to the underlying collection, the read-only collection reflects those changes.  \\n  \\n Retrieving the value of this property is an O(1) operation.\"\n  syntax:\n    content: public virtual bool IsReadOnly { get; }\n    return:\n      type: System.Boolean\n      description: '`true` if the <xref href=\"System.Collections.SortedList\"></xref> object is read-only; otherwise, `false`. The default is `false`.'\n  overload: System.Collections.SortedList.IsReadOnly*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections/SortedList.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.SortedList.IsSynchronized\n  commentId: P:System.Collections.SortedList.IsSynchronized\n  id: IsSynchronized\n  parent: System.Collections.SortedList\n  langs:\n  - csharp\n  name: IsSynchronized\n  nameWithType: SortedList.IsSynchronized\n  fullName: SortedList.IsSynchronized\n  type: Property\n  assemblies:\n  - System.Collections.NonGeneric\n  - mscorlib\n  - netstandard\n  namespace: System.Collections\n  summary: Gets a value indicating whether access to a <xref href=\"System.Collections.SortedList\"></xref> object is synchronized (thread safe).\n  remarks: \"To guarantee the thread safety of a <xref:System.Collections.SortedList> object, all operations must be done through the wrapper returned by the <xref:System.Collections.SortedList.Synchronized%2A> method.  \\n  \\n Enumerating through a collection is intrinsically not a thread-safe procedure. Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception. To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.\"\n  example:\n  - \"The following code example shows how to lock a collection using the <xref:System.Collections.SortedList.SyncRoot%2A> property during the entire enumeration.  \\n  \\n [!code-cpp[Classic SortedList.IsSynchronized Example#2](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic SortedList.IsSynchronized Example/CPP/source2.cpp#2)]\\n [!code-csharp[Classic SortedList.IsSynchronized Example#2](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic SortedList.IsSynchronized Example/CS/source2.cs#2)]\\n [!code-vb[Classic SortedList.IsSynchronized Example#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic SortedList.IsSynchronized Example/VB/source2.vb#2)]  \\n  \\n Retrieving the value of this property is an O(1) operation.  \\n  \\n The following code example shows how to synchronize a <xref:System.Collections.SortedList> object, determine whether a <xref:System.Collections.SortedList> is synchronized, and use a synchronized <xref:System.Collections.SortedList>.  \\n  \\n [!code-cpp[Classic SortedList.IsSynchronized Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic SortedList.IsSynchronized Example/CPP/source.cpp#1)]\\n [!code-csharp[Classic SortedList.IsSynchronized Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic SortedList.IsSynchronized Example/CS/source.cs#1)]\\n [!code-vb[Classic SortedList.IsSynchronized Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic SortedList.IsSynchronized Example/VB/source.vb#1)]\"\n  syntax:\n    content: public virtual bool IsSynchronized { get; }\n    return:\n      type: System.Boolean\n      description: '`true` if access to the <xref href=\"System.Collections.SortedList\"></xref> object is synchronized (thread safe); otherwise, `false`. The default is `false`.'\n  overload: System.Collections.SortedList.IsSynchronized*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections/SortedList.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.SortedList.Item(System.Object)\n  commentId: P:System.Collections.SortedList.Item(System.Object)\n  id: Item(System.Object)\n  parent: System.Collections.SortedList\n  langs:\n  - csharp\n  name: Item(Object)\n  nameWithType: SortedList.Item(Object)\n  fullName: SortedList.Item(Object)\n  type: Property\n  assemblies:\n  - System.Collections.NonGeneric\n  - mscorlib\n  - netstandard\n  namespace: System.Collections\n  summary: Gets and sets the value associated with a specific key in a <xref href=\"System.Collections.SortedList\"></xref> object.\n  remarks: \"You can use the <xref:System.Collections.SortedList.Item%2A> property to access a specific element in a collection by specifying the following syntax: `myCollection[key]`.  \\n  \\n You can also use this property to add new elements by setting the value of a key that does not exist in the <xref:System.Collections.SortedList> object (for example, `myCollection[\\\"myNonexistentKey\\\"] = myValue)`. However, if the specified key already exists in the <xref:System.Collections.SortedList>, setting the <xref:System.Collections.SortedList.Item%2A> property overwrites the old value. In contrast, the <xref:System.Collections.SortedList.Add%2A> method does not modify existing elements.  \\n  \\n A key cannot be `null`, but a value can be. To distinguish between `null` that is returned because the specified key is not found and `null` that is returned because the value of the specified key is `null`, use the <xref:System.Collections.SortedList.Contains%2A> method or the <xref:System.Collections.SortedList.ContainsKey%2A> method to determine if the key exists in the list.  \\n  \\n The elements of a <xref:System.Collections.SortedList> are sorted by the keys either according to a specific <xref:System.Collections.IComparer> implementation specified when the <xref:System.Collections.SortedList> is created or according to the <xref:System.IComparable> implementation provided by the keys themselves.  \\n  \\n The C# language uses the  keyword to define the indexers instead of implementing the <xref:System.Collections.SortedList.Keys%2A>property. Visual Basic implements <xref:System.Collections.SortedList.Item%2A> as a default property, which provides the same indexing functionality.  \\n  \\n Retrieving the value of this property is an O(log `n`) operation, where `n` is <xref:System.Collections.SortedList.Count%2A>. Setting the property is an O(log `n`) operation if the key is already in the <xref:System.Collections.SortedList>. If the key is not in the list, setting the property is an O(`n`) operation for unsorted data, or O(log `n`) if the new element is added at the end of the list. If insertion causes a resize, the operation is O(`n`).\"\n  syntax:\n    content: public virtual object this[object key] { get; set; }\n    parameters:\n    - id: key\n      type: System.Object\n      description: The key associated with the value to get or set.\n    return:\n      type: System.Object\n      description: The value associated with the <code>key</code> parameter in the <xref href=\"System.Collections.SortedList\"></xref> object, if <code>key</code> is found; otherwise, `null`.\n  overload: System.Collections.SortedList.Item*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>key</code> is `null`.\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: \"The property is set and the <xref href=\\\"System.Collections.SortedList\\\"></xref> object is read-only.  \\n  \\n -or-  \\n  \\n The property is set, <code>key</code> does not exist in the collection, and the <xref href=\\\"System.Collections.SortedList\\\"></xref> has a fixed size.\"\n  - type: System.OutOfMemoryException\n    commentId: T:System.OutOfMemoryException\n    description: There is not enough available memory to add the element to the <xref href=\"System.Collections.SortedList\"></xref>.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The comparer throws an exception.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections/SortedList.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.SortedList.Keys\n  commentId: P:System.Collections.SortedList.Keys\n  id: Keys\n  parent: System.Collections.SortedList\n  langs:\n  - csharp\n  name: Keys\n  nameWithType: SortedList.Keys\n  fullName: SortedList.Keys\n  type: Property\n  assemblies:\n  - System.Collections.NonGeneric\n  - mscorlib\n  - netstandard\n  namespace: System.Collections\n  summary: Gets the keys in a <xref href=\"System.Collections.SortedList\"></xref> object.\n  remarks: \"The <xref:System.Collections.ICollection> object is a read-only view of the keys of the <xref:System.Collections.SortedList> object. Modifications made to the underlying <xref:System.Collections.SortedList> are immediately reflected in the <xref:System.Collections.ICollection>.  \\n  \\n The elements of the <xref:System.Collections.ICollection> are sorted in the same order as the keys of the <xref:System.Collections.SortedList>.  \\n  \\n This property is similar to the <xref:System.Collections.SortedList.GetKeyList%2A> method, but returns an <xref:System.Collections.ICollection> object instead of an <xref:System.Collections.IList> object.  \\n  \\n This method is an O(1) operation.\"\n  syntax:\n    content: public virtual System.Collections.ICollection Keys { get; }\n    return:\n      type: System.Collections.ICollection\n      description: An <xref href=\"System.Collections.ICollection\"></xref> object containing the keys in the <xref href=\"System.Collections.SortedList\"></xref> object.\n  overload: System.Collections.SortedList.Keys*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections/SortedList.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.SortedList.Remove(System.Object)\n  commentId: M:System.Collections.SortedList.Remove(System.Object)\n  id: Remove(System.Object)\n  parent: System.Collections.SortedList\n  langs:\n  - csharp\n  name: Remove(Object)\n  nameWithType: SortedList.Remove(Object)\n  fullName: SortedList.Remove(Object)\n  type: Method\n  assemblies:\n  - System.Collections.NonGeneric\n  - mscorlib\n  - netstandard\n  namespace: System.Collections\n  summary: Removes the element with the specified key from a <xref href=\"System.Collections.SortedList\"></xref> object.\n  remarks: \"If the <xref:System.Collections.SortedList> object does not contain an element with the specified key, the <xref:System.Collections.SortedList> remains unchanged. No exception is thrown.  \\n  \\n In collections of contiguous elements, such as lists, the elements that follow the removed element move up to occupy the vacated spot. If the collection is indexed, the indexes of the elements that are moved are also updated. This behavior does not apply to collections where elements are conceptually grouped into buckets, such as a hash table.  \\n  \\n This method is an O(`n`) operation, where `n` is <xref:System.Collections.SortedList.Count%2A>.\"\n  example:\n  - \"The following code example shows how to remove elements from a <xref:System.Collections.SortedList> object.  \\n  \\n [!code-cpp[Classic SortedList.RemoveAt Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic SortedList.RemoveAt Example/CPP/source.cpp#1)]\\n [!code-csharp[Classic SortedList.RemoveAt Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic SortedList.RemoveAt Example/CS/source.cs#1)]\\n [!code-vb[Classic SortedList.RemoveAt Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic SortedList.RemoveAt Example/VB/source.vb#1)]\"\n  syntax:\n    content: public virtual void Remove (object key);\n    parameters:\n    - id: key\n      type: System.Object\n      description: The key of the element to remove.\n  overload: System.Collections.SortedList.Remove*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>key</code> is `null`.\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: \"The <xref href=\\\"System.Collections.SortedList\\\"></xref> object is read-only.  \\n  \\n -or-  \\n  \\n The <xref href=\\\"System.Collections.SortedList\\\"></xref> has a fixed size.\"\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections/SortedList.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.SortedList.RemoveAt(System.Int32)\n  commentId: M:System.Collections.SortedList.RemoveAt(System.Int32)\n  id: RemoveAt(System.Int32)\n  parent: System.Collections.SortedList\n  langs:\n  - csharp\n  name: RemoveAt(Int32)\n  nameWithType: SortedList.RemoveAt(Int32)\n  fullName: SortedList.RemoveAt(Int32)\n  type: Method\n  assemblies:\n  - System.Collections.NonGeneric\n  - mscorlib\n  - netstandard\n  namespace: System.Collections\n  summary: Removes the element at the specified index of a <xref href=\"System.Collections.SortedList\"></xref> object.\n  remarks: \"The index sequence is based on the sort sequence. When an element is added, it is inserted into <xref:System.Collections.SortedList> in the correct sort order, and the indexing adjusts accordingly. When an element is removed, the indexing also adjusts accordingly. Therefore, the index of a specific key/value pair might change as elements are added or removed from the <xref:System.Collections.SortedList> object.  \\n  \\n In collections of contiguous elements, such as lists, the elements that follow the removed element move up to occupy the vacated spot. If the collection is indexed, the indexes of the elements that are moved are also updated. This behavior does not apply to collections where elements are conceptually grouped into buckets, such as a hash table.  \\n  \\n This method is an O(`n`) operation, where `n` is <xref:System.Collections.SortedList.Count%2A>.\"\n  example:\n  - \"The following code example shows how to remove elements from a <xref:System.Collections.SortedList> object.  \\n  \\n [!code-cpp[Classic SortedList.RemoveAt Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic SortedList.RemoveAt Example/CPP/source.cpp#1)]\\n [!code-csharp[Classic SortedList.RemoveAt Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic SortedList.RemoveAt Example/CS/source.cs#1)]\\n [!code-vb[Classic SortedList.RemoveAt Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic SortedList.RemoveAt Example/VB/source.vb#1)]\"\n  syntax:\n    content: public virtual void RemoveAt (int index);\n    parameters:\n    - id: index\n      type: System.Int32\n      description: The zero-based index of the element to remove.\n  overload: System.Collections.SortedList.RemoveAt*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>index</code> is outside the range of valid indexes for the <xref href=\"System.Collections.SortedList\"></xref> object.\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: \"The <xref href=\\\"System.Collections.SortedList\\\"></xref> is read-only.  \\n  \\n -or-  \\n  \\n The <xref href=\\\"System.Collections.SortedList\\\"></xref> has a fixed size.\"\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections/SortedList.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.SortedList.SetByIndex(System.Int32,System.Object)\n  commentId: M:System.Collections.SortedList.SetByIndex(System.Int32,System.Object)\n  id: SetByIndex(System.Int32,System.Object)\n  parent: System.Collections.SortedList\n  langs:\n  - csharp\n  name: SetByIndex(Int32, Object)\n  nameWithType: SortedList.SetByIndex(Int32, Object)\n  fullName: SortedList.SetByIndex(Int32, Object)\n  type: Method\n  assemblies:\n  - System.Collections.NonGeneric\n  - mscorlib\n  - netstandard\n  namespace: System.Collections\n  summary: Replaces the value at a specific index in a <xref href=\"System.Collections.SortedList\"></xref> object.\n  remarks: \"The index sequence is based on the sort sequence. When an element is added, it is inserted into <xref:System.Collections.SortedList> in the correct sort order, and the indexing adjusts accordingly. When an element is removed, the indexing also adjusts accordingly. Therefore, the index of a specific key/value pair might change as elements are added or removed from the <xref:System.Collections.SortedList> object.  \\n  \\n This method is an O(1) operation.\"\n  example:\n  - \"The following code example shows how to replace the value of an existing element in a <xref:System.Collections.SortedList> object.  \\n  \\n [!code-cpp[Classic SortedList.SetByIndex Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic SortedList.SetByIndex Example/CPP/source.cpp#1)]\\n [!code-csharp[Classic SortedList.SetByIndex Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic SortedList.SetByIndex Example/CS/source.cs#1)]\\n [!code-vb[Classic SortedList.SetByIndex Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic SortedList.SetByIndex Example/VB/source.vb#1)]\"\n  syntax:\n    content: public virtual void SetByIndex (int index, object value);\n    parameters:\n    - id: index\n      type: System.Int32\n      description: The zero-based index at which to save <code>value</code>.\n    - id: value\n      type: System.Object\n      description: The <xref href=\"System.Object\"></xref> to save into the <xref href=\"System.Collections.SortedList\"></xref> object. The value can be `null`.\n  overload: System.Collections.SortedList.SetByIndex*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>index</code> is outside the range of valid indexes for the <xref href=\"System.Collections.SortedList\"></xref> object.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections/SortedList.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.SortedList.Synchronized(System.Collections.SortedList)\n  commentId: M:System.Collections.SortedList.Synchronized(System.Collections.SortedList)\n  id: Synchronized(System.Collections.SortedList)\n  parent: System.Collections.SortedList\n  langs:\n  - csharp\n  name: Synchronized(SortedList)\n  nameWithType: SortedList.Synchronized(SortedList)\n  fullName: SortedList.Synchronized(SortedList)\n  type: Method\n  assemblies:\n  - System.Collections.NonGeneric\n  - mscorlib\n  - netstandard\n  namespace: System.Collections\n  summary: Returns a synchronized (thread-safe) wrapper for a <xref href=\"System.Collections.SortedList\"></xref> object.\n  remarks: \"To guarantee the thread safety of a <xref:System.Collections.SortedList> object, all operations must be done through this wrapper only.  \\n  \\n Enumerating through a collection is intrinsically not a thread-safe procedure. Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception. To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.\"\n  example:\n  - \"The following code example shows how to lock the collection using the <xref:System.Collections.SortedList.SyncRoot%2A> property during the entire enumeration.  \\n  \\n [!code-cpp[Classic SortedList.IsSynchronized Example#2](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic SortedList.IsSynchronized Example/CPP/source2.cpp#2)]\\n [!code-csharp[Classic SortedList.IsSynchronized Example#2](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic SortedList.IsSynchronized Example/CS/source2.cs#2)]\\n [!code-vb[Classic SortedList.IsSynchronized Example#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic SortedList.IsSynchronized Example/VB/source2.vb#2)]  \\n  \\n This method is an O(1) operation.  \\n  \\n The following code example shows how to synchronize a <xref:System.Collections.SortedList> object, determine whether a <xref:System.Collections.SortedList> is synchronized, and use a synchronized <xref:System.Collections.SortedList>.  \\n  \\n [!code-cpp[Classic SortedList.IsSynchronized Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic SortedList.IsSynchronized Example/CPP/source.cpp#1)]\\n [!code-csharp[Classic SortedList.IsSynchronized Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic SortedList.IsSynchronized Example/CS/source.cs#1)]\\n [!code-vb[Classic SortedList.IsSynchronized Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic SortedList.IsSynchronized Example/VB/source.vb#1)]\"\n  syntax:\n    content: public static System.Collections.SortedList Synchronized (System.Collections.SortedList list);\n    parameters:\n    - id: list\n      type: System.Collections.SortedList\n      description: The <xref href=\"System.Collections.SortedList\"></xref> object to synchronize.\n    return:\n      type: System.Collections.SortedList\n      description: A synchronized (thread-safe) wrapper for the <xref href=\"System.Collections.SortedList\"></xref> object.\n  overload: System.Collections.SortedList.Synchronized*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>list</code> is `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections/SortedList.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.SortedList.SyncRoot\n  commentId: P:System.Collections.SortedList.SyncRoot\n  id: SyncRoot\n  parent: System.Collections.SortedList\n  langs:\n  - csharp\n  name: SyncRoot\n  nameWithType: SortedList.SyncRoot\n  fullName: SortedList.SyncRoot\n  type: Property\n  assemblies:\n  - System.Collections.NonGeneric\n  - mscorlib\n  - netstandard\n  namespace: System.Collections\n  summary: Gets an object that can be used to synchronize access to a <xref href=\"System.Collections.SortedList\"></xref> object.\n  remarks: \"To create a synchronized version of the <xref:System.Collections.SortedList> object, use the <xref:System.Collections.SortedList.Synchronized%2A> method. However, derived classes can provide their own synchronized version of the <xref:System.Collections.SortedList> using the <xref:System.Collections.SortedList.SyncRoot%2A> property. The synchronizing code must perform operations on the <xref:System.Collections.SortedList.SyncRoot%2A> of the <xref:System.Collections.SortedList>, not directly on the <xref:System.Collections.SortedList>. This ensures proper operation of collections that are derived from other objects. Specifically, it maintains proper synchronization with other threads that might be simultaneously modifying the <xref:System.Collections.SortedList> object.  \\n  \\n Enumerating through a collection is intrinsically not a thread-safe procedure. Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception. To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.\"\n  example:\n  - \"The following code example shows how to lock the collection using the <xref:System.Collections.SortedList.SyncRoot%2A> property during the entire enumeration.  \\n  \\n [!code-cpp[Classic SortedList.IsSynchronized Example#2](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic SortedList.IsSynchronized Example/CPP/source2.cpp#2)]\\n [!code-csharp[Classic SortedList.IsSynchronized Example#2](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic SortedList.IsSynchronized Example/CS/source2.cs#2)]\\n [!code-vb[Classic SortedList.IsSynchronized Example#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic SortedList.IsSynchronized Example/VB/source2.vb#2)]  \\n  \\n Retrieving the value of this property is an O(1) operation.\"\n  syntax:\n    content: public virtual object SyncRoot { get; }\n    return:\n      type: System.Object\n      description: An object that can be used to synchronize access to the <xref href=\"System.Collections.SortedList\"></xref> object.\n  overload: System.Collections.SortedList.SyncRoot*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections/SortedList.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.SortedList.TrimToSize\n  commentId: M:System.Collections.SortedList.TrimToSize\n  id: TrimToSize\n  parent: System.Collections.SortedList\n  langs:\n  - csharp\n  name: TrimToSize()\n  nameWithType: SortedList.TrimToSize()\n  fullName: SortedList.TrimToSize()\n  type: Method\n  assemblies:\n  - System.Collections.NonGeneric\n  - mscorlib\n  - netstandard\n  namespace: System.Collections\n  summary: Sets the capacity to the actual number of elements in a <xref href=\"System.Collections.SortedList\"></xref> object.\n  remarks: \"This method can be used to minimize a collection's memory overhead if no new elements will be added to the collection.  \\n  \\n To reset a <xref:System.Collections.SortedList> object to its initial state, call the <xref:System.Collections.SortedList.Clear%2A> method before calling <xref:System.Collections.SortedList.TrimToSize%2A>. Trimming an empty <xref:System.Collections.SortedList> sets the capacity of the <xref:System.Collections.SortedList> to the default capacity.  \\n  \\n This method is an O(`n`) operation, where `n` is <xref:System.Collections.SortedList.Count%2A>.\"\n  example:\n  - \"The following code example shows how to trim the unused portions of a <xref:System.Collections.SortedList> object and how to clear its values.  \\n  \\n [!code-cpp[Classic SortedList.Clear Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic SortedList.Clear Example/CPP/source.cpp#1)]\\n [!code-csharp[Classic SortedList.Clear Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic SortedList.Clear Example/CS/source.cs#1)]\\n [!code-vb[Classic SortedList.Clear Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic SortedList.Clear Example/VB/source.vb#1)]\"\n  syntax:\n    content: public virtual void TrimToSize ();\n    parameters: []\n  overload: System.Collections.SortedList.TrimToSize*\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: \"The <xref href=\\\"System.Collections.SortedList\\\"></xref> object is read-only.  \\n  \\n -or-  \\n  \\n The <xref href=\\\"System.Collections.SortedList\\\"></xref> has a fixed size.\"\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections/SortedList.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.SortedList.Values\n  commentId: P:System.Collections.SortedList.Values\n  id: Values\n  parent: System.Collections.SortedList\n  langs:\n  - csharp\n  name: Values\n  nameWithType: SortedList.Values\n  fullName: SortedList.Values\n  type: Property\n  assemblies:\n  - System.Collections.NonGeneric\n  - mscorlib\n  - netstandard\n  namespace: System.Collections\n  summary: Gets the values in a <xref href=\"System.Collections.SortedList\"></xref> object.\n  remarks: \"The <xref:System.Collections.ICollection> object is a read-only view of the values of the <xref:System.Collections.SortedList> object. Modifications made to the underlying <xref:System.Collections.SortedList> are immediately reflected in the <xref:System.Collections.ICollection>.  \\n  \\n The elements of the <xref:System.Collections.ICollection> are sorted in the same order as the values of the <xref:System.Collections.SortedList>.  \\n  \\n This property is similar to the <xref:System.Collections.SortedList.GetValueList%2A> method, but returns an <xref:System.Collections.ICollection> object instead of an <xref:System.Collections.IList> object.  \\n  \\n This method is an O(1) operation.\"\n  syntax:\n    content: public virtual System.Collections.ICollection Values { get; }\n    return:\n      type: System.Collections.ICollection\n      description: An <xref href=\"System.Collections.ICollection\"></xref> object containing the values in the <xref href=\"System.Collections.SortedList\"></xref> object.\n  overload: System.Collections.SortedList.Values*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections/SortedList.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.SortedList.System#Collections#IEnumerable#GetEnumerator\n  commentId: M:System.Collections.SortedList.System#Collections#IEnumerable#GetEnumerator\n  id: System#Collections#IEnumerable#GetEnumerator\n  isEii: true\n  parent: System.Collections.SortedList\n  langs:\n  - csharp\n  name: IEnumerable.GetEnumerator()\n  nameWithType: SortedList.IEnumerable.GetEnumerator()\n  fullName: SortedList.IEnumerable.GetEnumerator()\n  type: Method\n  assemblies:\n  - System.Collections.NonGeneric\n  - mscorlib\n  - netstandard\n  namespace: System.Collections\n  summary: Returns an <xref href=\"System.Collections.IEnumerator\"></xref> that iterates through the <xref href=\"System.Collections.SortedList\"></xref>.\n  remarks: \"[Visual Basic, C#]  \\n  \\n The `foreach` statement of the C# language (`for each` in Visual Basic) hides the complexity of the enumerators.  Therefore, using `foreach` is recommended, instead of directly manipulating the enumerator.  \\n  \\n Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.  \\n  \\n Initially, the enumerator is positioned before the first element in the collection. <xref:System.Collections.IEnumerator.Reset%2A> also brings the enumerator back to this position. At this position, calling <xref:System.Collections.IEnumerator.Current%2A> throws an exception. Therefore, you must call <xref:System.Collections.IEnumerator.MoveNext%2A> to advance the enumerator to the first element of the collection before reading the value of <xref:System.Collections.IEnumerator.Current%2A>.  \\n  \\n <xref:System.Collections.IEnumerator.Current%2A> returns the same object until either <xref:System.Collections.IEnumerator.MoveNext%2A> or <xref:System.Collections.IEnumerator.Reset%2A> is called. <xref:System.Collections.IEnumerator.MoveNext%2A> sets <xref:System.Collections.IEnumerator.Current%2A> to the next element.  \\n  \\n If <xref:System.Collections.IEnumerator.MoveNext%2A> passes the end of the collection, the enumerator is positioned after the last element in the collection and <xref:System.Collections.IEnumerator.MoveNext%2A> returns `false`. When the enumerator is at this position, subsequent calls to <xref:System.Collections.IEnumerator.MoveNext%2A> also return `false`. If the last call to <xref:System.Collections.IEnumerator.MoveNext%2A> returned `false`, calling <xref:System.Collections.IEnumerator.Current%2A> throws an exception. To set <xref:System.Collections.IEnumerator.Current%2A> to the first element of the collection again, you can call <xref:System.Collections.IEnumerator.Reset%2A> followed by <xref:System.Collections.IEnumerator.MoveNext%2A>.  \\n  \\n An enumerator remains valid as long as the collection remains unchanged. If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and the next call to <xref:System.Collections.IEnumerator.MoveNext%2A> or <xref:System.Collections.IEnumerator.Reset%2A> throws an <xref:System.InvalidOperationException>. If the collection is modified between <xref:System.Collections.IEnumerator.MoveNext%2A> and <xref:System.Collections.IEnumerator.Current%2A>, <xref:System.Collections.IEnumerator.Current%2A> returns the element that it is set to, even if the enumerator is already invalidated.  \\n  \\n The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure. Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception. To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.  \\n  \\n This method is an O(1) operation.\"\n  syntax:\n    content: System.Collections.IEnumerator IEnumerable.GetEnumerator ();\n    parameters: []\n    return:\n      type: System.Collections.IEnumerator\n      description: An <xref href=\"System.Collections.IEnumerator\"></xref> for the <xref href=\"System.Collections.SortedList\"></xref>.\n  overload: System.Collections.SortedList.System#Collections#IEnumerable#GetEnumerator*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections/SortedList.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\nreferences:\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.ArgumentNullException\n  parent: System\n  isExternal: false\n  name: ArgumentNullException\n  nameWithType: ArgumentNullException\n  fullName: System.ArgumentNullException\n- uid: System.InvalidCastException\n  parent: System\n  isExternal: false\n  name: InvalidCastException\n  nameWithType: InvalidCastException\n  fullName: System.InvalidCastException\n- uid: System.ArgumentOutOfRangeException\n  parent: System\n  isExternal: false\n  name: ArgumentOutOfRangeException\n  nameWithType: ArgumentOutOfRangeException\n  fullName: System.ArgumentOutOfRangeException\n- uid: System.OutOfMemoryException\n  parent: System\n  isExternal: false\n  name: OutOfMemoryException\n  nameWithType: OutOfMemoryException\n  fullName: System.OutOfMemoryException\n- uid: System.ArgumentException\n  parent: System\n  isExternal: false\n  name: ArgumentException\n  nameWithType: ArgumentException\n  fullName: System.ArgumentException\n- uid: System.NotSupportedException\n  parent: System\n  isExternal: false\n  name: NotSupportedException\n  nameWithType: NotSupportedException\n  fullName: System.NotSupportedException\n- uid: System.InvalidOperationException\n  parent: System\n  isExternal: false\n  name: InvalidOperationException\n  nameWithType: InvalidOperationException\n  fullName: System.InvalidOperationException\n- uid: System.Collections.SortedList.#ctor\n  parent: System.Collections.SortedList\n  isExternal: false\n  name: SortedList()\n  nameWithType: SortedList.SortedList()\n  fullName: SortedList.SortedList()\n- uid: System.Collections.SortedList.#ctor(System.Collections.IComparer)\n  parent: System.Collections.SortedList\n  isExternal: false\n  name: SortedList(IComparer)\n  nameWithType: SortedList.SortedList(IComparer)\n  fullName: SortedList.SortedList(IComparer)\n- uid: System.Collections.IComparer\n  parent: System.Collections\n  isExternal: false\n  name: IComparer\n  nameWithType: IComparer\n  fullName: System.Collections.IComparer\n- uid: System.Collections.SortedList.#ctor(System.Collections.IDictionary)\n  parent: System.Collections.SortedList\n  isExternal: false\n  name: SortedList(IDictionary)\n  nameWithType: SortedList.SortedList(IDictionary)\n  fullName: SortedList.SortedList(IDictionary)\n- uid: System.Collections.IDictionary\n  parent: System.Collections\n  isExternal: false\n  name: IDictionary\n  nameWithType: IDictionary\n  fullName: System.Collections.IDictionary\n- uid: System.Collections.SortedList.#ctor(System.Int32)\n  parent: System.Collections.SortedList\n  isExternal: false\n  name: SortedList(Int32)\n  nameWithType: SortedList.SortedList(Int32)\n  fullName: SortedList.SortedList(Int32)\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Collections.SortedList.#ctor(System.Collections.IComparer,System.Int32)\n  parent: System.Collections.SortedList\n  isExternal: false\n  name: SortedList(IComparer, Int32)\n  nameWithType: SortedList.SortedList(IComparer, Int32)\n  fullName: SortedList.SortedList(IComparer, Int32)\n- uid: System.Collections.SortedList.#ctor(System.Collections.IDictionary,System.Collections.IComparer)\n  parent: System.Collections.SortedList\n  isExternal: false\n  name: SortedList(IDictionary, IComparer)\n  nameWithType: SortedList.SortedList(IDictionary, IComparer)\n  fullName: SortedList.SortedList(IDictionary, IComparer)\n- uid: System.Collections.SortedList.Add(System.Object,System.Object)\n  parent: System.Collections.SortedList\n  isExternal: false\n  name: Add(Object, Object)\n  nameWithType: SortedList.Add(Object, Object)\n  fullName: SortedList.Add(Object, Object)\n- uid: System.Collections.SortedList.Capacity\n  parent: System.Collections.SortedList\n  isExternal: false\n  name: Capacity\n  nameWithType: SortedList.Capacity\n  fullName: SortedList.Capacity\n- uid: System.Collections.SortedList.Clear\n  parent: System.Collections.SortedList\n  isExternal: false\n  name: Clear()\n  nameWithType: SortedList.Clear()\n  fullName: SortedList.Clear()\n- uid: System.Collections.SortedList.Clone\n  parent: System.Collections.SortedList\n  isExternal: false\n  name: Clone()\n  nameWithType: SortedList.Clone()\n  fullName: SortedList.Clone()\n- uid: System.Collections.SortedList.Contains(System.Object)\n  parent: System.Collections.SortedList\n  isExternal: false\n  name: Contains(Object)\n  nameWithType: SortedList.Contains(Object)\n  fullName: SortedList.Contains(Object)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Collections.SortedList.ContainsKey(System.Object)\n  parent: System.Collections.SortedList\n  isExternal: false\n  name: ContainsKey(Object)\n  nameWithType: SortedList.ContainsKey(Object)\n  fullName: SortedList.ContainsKey(Object)\n- uid: System.Collections.SortedList.ContainsValue(System.Object)\n  parent: System.Collections.SortedList\n  isExternal: false\n  name: ContainsValue(Object)\n  nameWithType: SortedList.ContainsValue(Object)\n  fullName: SortedList.ContainsValue(Object)\n- uid: System.Collections.SortedList.CopyTo(System.Array,System.Int32)\n  parent: System.Collections.SortedList\n  isExternal: false\n  name: CopyTo(Array, Int32)\n  nameWithType: SortedList.CopyTo(Array, Int32)\n  fullName: SortedList.CopyTo(Array, Int32)\n- uid: System.Array\n  parent: System\n  isExternal: false\n  name: Array\n  nameWithType: Array\n  fullName: System.Array\n- uid: System.Collections.SortedList.Count\n  parent: System.Collections.SortedList\n  isExternal: false\n  name: Count\n  nameWithType: SortedList.Count\n  fullName: SortedList.Count\n- uid: System.Collections.SortedList.GetByIndex(System.Int32)\n  parent: System.Collections.SortedList\n  isExternal: false\n  name: GetByIndex(Int32)\n  nameWithType: SortedList.GetByIndex(Int32)\n  fullName: SortedList.GetByIndex(Int32)\n- uid: System.Collections.SortedList.GetEnumerator\n  parent: System.Collections.SortedList\n  isExternal: false\n  name: GetEnumerator()\n  nameWithType: SortedList.GetEnumerator()\n  fullName: SortedList.GetEnumerator()\n- uid: System.Collections.IDictionaryEnumerator\n  parent: System.Collections\n  isExternal: false\n  name: IDictionaryEnumerator\n  nameWithType: IDictionaryEnumerator\n  fullName: System.Collections.IDictionaryEnumerator\n- uid: System.Collections.SortedList.GetKey(System.Int32)\n  parent: System.Collections.SortedList\n  isExternal: false\n  name: GetKey(Int32)\n  nameWithType: SortedList.GetKey(Int32)\n  fullName: SortedList.GetKey(Int32)\n- uid: System.Collections.SortedList.GetKeyList\n  parent: System.Collections.SortedList\n  isExternal: false\n  name: GetKeyList()\n  nameWithType: SortedList.GetKeyList()\n  fullName: SortedList.GetKeyList()\n- uid: System.Collections.IList\n  parent: System.Collections\n  isExternal: false\n  name: IList\n  nameWithType: IList\n  fullName: System.Collections.IList\n- uid: System.Collections.SortedList.GetValueList\n  parent: System.Collections.SortedList\n  isExternal: false\n  name: GetValueList()\n  nameWithType: SortedList.GetValueList()\n  fullName: SortedList.GetValueList()\n- uid: System.Collections.SortedList.IndexOfKey(System.Object)\n  parent: System.Collections.SortedList\n  isExternal: false\n  name: IndexOfKey(Object)\n  nameWithType: SortedList.IndexOfKey(Object)\n  fullName: SortedList.IndexOfKey(Object)\n- uid: System.Collections.SortedList.IndexOfValue(System.Object)\n  parent: System.Collections.SortedList\n  isExternal: false\n  name: IndexOfValue(Object)\n  nameWithType: SortedList.IndexOfValue(Object)\n  fullName: SortedList.IndexOfValue(Object)\n- uid: System.Collections.SortedList.IsFixedSize\n  parent: System.Collections.SortedList\n  isExternal: false\n  name: IsFixedSize\n  nameWithType: SortedList.IsFixedSize\n  fullName: SortedList.IsFixedSize\n- uid: System.Collections.SortedList.IsReadOnly\n  parent: System.Collections.SortedList\n  isExternal: false\n  name: IsReadOnly\n  nameWithType: SortedList.IsReadOnly\n  fullName: SortedList.IsReadOnly\n- uid: System.Collections.SortedList.IsSynchronized\n  parent: System.Collections.SortedList\n  isExternal: false\n  name: IsSynchronized\n  nameWithType: SortedList.IsSynchronized\n  fullName: SortedList.IsSynchronized\n- uid: System.Collections.SortedList.Item(System.Object)\n  parent: System.Collections.SortedList\n  isExternal: false\n  name: Item(Object)\n  nameWithType: SortedList.Item(Object)\n  fullName: SortedList.Item(Object)\n- uid: System.Collections.SortedList.Keys\n  parent: System.Collections.SortedList\n  isExternal: false\n  name: Keys\n  nameWithType: SortedList.Keys\n  fullName: SortedList.Keys\n- uid: System.Collections.ICollection\n  parent: System.Collections\n  isExternal: false\n  name: ICollection\n  nameWithType: ICollection\n  fullName: System.Collections.ICollection\n- uid: System.Collections.SortedList.Remove(System.Object)\n  parent: System.Collections.SortedList\n  isExternal: false\n  name: Remove(Object)\n  nameWithType: SortedList.Remove(Object)\n  fullName: SortedList.Remove(Object)\n- uid: System.Collections.SortedList.RemoveAt(System.Int32)\n  parent: System.Collections.SortedList\n  isExternal: false\n  name: RemoveAt(Int32)\n  nameWithType: SortedList.RemoveAt(Int32)\n  fullName: SortedList.RemoveAt(Int32)\n- uid: System.Collections.SortedList.SetByIndex(System.Int32,System.Object)\n  parent: System.Collections.SortedList\n  isExternal: false\n  name: SetByIndex(Int32, Object)\n  nameWithType: SortedList.SetByIndex(Int32, Object)\n  fullName: SortedList.SetByIndex(Int32, Object)\n- uid: System.Collections.SortedList.Synchronized(System.Collections.SortedList)\n  parent: System.Collections.SortedList\n  isExternal: false\n  name: Synchronized(SortedList)\n  nameWithType: SortedList.Synchronized(SortedList)\n  fullName: SortedList.Synchronized(SortedList)\n- uid: System.Collections.SortedList\n  parent: System.Collections\n  isExternal: false\n  name: SortedList\n  nameWithType: SortedList\n  fullName: System.Collections.SortedList\n- uid: System.Collections.SortedList.SyncRoot\n  parent: System.Collections.SortedList\n  isExternal: false\n  name: SyncRoot\n  nameWithType: SortedList.SyncRoot\n  fullName: SortedList.SyncRoot\n- uid: System.Collections.SortedList.TrimToSize\n  parent: System.Collections.SortedList\n  isExternal: false\n  name: TrimToSize()\n  nameWithType: SortedList.TrimToSize()\n  fullName: SortedList.TrimToSize()\n- uid: System.Collections.SortedList.Values\n  parent: System.Collections.SortedList\n  isExternal: false\n  name: Values\n  nameWithType: SortedList.Values\n  fullName: SortedList.Values\n- uid: System.Collections.SortedList.System#Collections#IEnumerable#GetEnumerator\n  parent: System.Collections.SortedList\n  isExternal: false\n  name: IEnumerable.GetEnumerator()\n  nameWithType: SortedList.IEnumerable.GetEnumerator()\n  fullName: SortedList.IEnumerable.GetEnumerator()\n- uid: System.Collections.IEnumerator\n  parent: System.Collections\n  isExternal: false\n  name: IEnumerator\n  nameWithType: IEnumerator\n  fullName: System.Collections.IEnumerator\n- uid: System.Collections.SortedList.#ctor*\n  parent: System.Collections.SortedList\n  isExternal: false\n  name: SortedList\n  nameWithType: SortedList.SortedList\n  fullName: SortedList.SortedList\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections/SortedList.xml\n- uid: System.Collections.SortedList.Add*\n  parent: System.Collections.SortedList\n  isExternal: false\n  name: Add\n  nameWithType: SortedList.Add\n  fullName: SortedList.Add\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections/SortedList.xml\n- uid: System.Collections.SortedList.Capacity*\n  parent: System.Collections.SortedList\n  isExternal: false\n  name: Capacity\n  nameWithType: SortedList.Capacity\n  fullName: SortedList.Capacity\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections/SortedList.xml\n- uid: System.Collections.SortedList.Clear*\n  parent: System.Collections.SortedList\n  isExternal: false\n  name: Clear\n  nameWithType: SortedList.Clear\n  fullName: SortedList.Clear\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections/SortedList.xml\n- uid: System.Collections.SortedList.Clone*\n  parent: System.Collections.SortedList\n  isExternal: false\n  name: Clone\n  nameWithType: SortedList.Clone\n  fullName: SortedList.Clone\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections/SortedList.xml\n- uid: System.Collections.SortedList.Contains*\n  parent: System.Collections.SortedList\n  isExternal: false\n  name: Contains\n  nameWithType: SortedList.Contains\n  fullName: SortedList.Contains\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections/SortedList.xml\n- uid: System.Collections.SortedList.ContainsKey*\n  parent: System.Collections.SortedList\n  isExternal: false\n  name: ContainsKey\n  nameWithType: SortedList.ContainsKey\n  fullName: SortedList.ContainsKey\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections/SortedList.xml\n- uid: System.Collections.SortedList.ContainsValue*\n  parent: System.Collections.SortedList\n  isExternal: false\n  name: ContainsValue\n  nameWithType: SortedList.ContainsValue\n  fullName: SortedList.ContainsValue\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections/SortedList.xml\n- uid: System.Collections.SortedList.CopyTo*\n  parent: System.Collections.SortedList\n  isExternal: false\n  name: CopyTo\n  nameWithType: SortedList.CopyTo\n  fullName: SortedList.CopyTo\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections/SortedList.xml\n- uid: System.Collections.SortedList.Count*\n  parent: System.Collections.SortedList\n  isExternal: false\n  name: Count\n  nameWithType: SortedList.Count\n  fullName: SortedList.Count\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections/SortedList.xml\n- uid: System.Collections.SortedList.GetByIndex*\n  parent: System.Collections.SortedList\n  isExternal: false\n  name: GetByIndex\n  nameWithType: SortedList.GetByIndex\n  fullName: SortedList.GetByIndex\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections/SortedList.xml\n- uid: System.Collections.SortedList.GetEnumerator*\n  parent: System.Collections.SortedList\n  isExternal: false\n  name: GetEnumerator\n  nameWithType: SortedList.GetEnumerator\n  fullName: SortedList.GetEnumerator\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections/SortedList.xml\n- uid: System.Collections.SortedList.GetKey*\n  parent: System.Collections.SortedList\n  isExternal: false\n  name: GetKey\n  nameWithType: SortedList.GetKey\n  fullName: SortedList.GetKey\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections/SortedList.xml\n- uid: System.Collections.SortedList.GetKeyList*\n  parent: System.Collections.SortedList\n  isExternal: false\n  name: GetKeyList\n  nameWithType: SortedList.GetKeyList\n  fullName: SortedList.GetKeyList\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections/SortedList.xml\n- uid: System.Collections.SortedList.GetValueList*\n  parent: System.Collections.SortedList\n  isExternal: false\n  name: GetValueList\n  nameWithType: SortedList.GetValueList\n  fullName: SortedList.GetValueList\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections/SortedList.xml\n- uid: System.Collections.SortedList.IndexOfKey*\n  parent: System.Collections.SortedList\n  isExternal: false\n  name: IndexOfKey\n  nameWithType: SortedList.IndexOfKey\n  fullName: SortedList.IndexOfKey\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections/SortedList.xml\n- uid: System.Collections.SortedList.IndexOfValue*\n  parent: System.Collections.SortedList\n  isExternal: false\n  name: IndexOfValue\n  nameWithType: SortedList.IndexOfValue\n  fullName: SortedList.IndexOfValue\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections/SortedList.xml\n- uid: System.Collections.SortedList.IsFixedSize*\n  parent: System.Collections.SortedList\n  isExternal: false\n  name: IsFixedSize\n  nameWithType: SortedList.IsFixedSize\n  fullName: SortedList.IsFixedSize\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections/SortedList.xml\n- uid: System.Collections.SortedList.IsReadOnly*\n  parent: System.Collections.SortedList\n  isExternal: false\n  name: IsReadOnly\n  nameWithType: SortedList.IsReadOnly\n  fullName: SortedList.IsReadOnly\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections/SortedList.xml\n- uid: System.Collections.SortedList.IsSynchronized*\n  parent: System.Collections.SortedList\n  isExternal: false\n  name: IsSynchronized\n  nameWithType: SortedList.IsSynchronized\n  fullName: SortedList.IsSynchronized\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections/SortedList.xml\n- uid: System.Collections.SortedList.Item*\n  parent: System.Collections.SortedList\n  isExternal: false\n  name: Item\n  nameWithType: SortedList.Item\n  fullName: SortedList.Item\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections/SortedList.xml\n- uid: System.Collections.SortedList.Keys*\n  parent: System.Collections.SortedList\n  isExternal: false\n  name: Keys\n  nameWithType: SortedList.Keys\n  fullName: SortedList.Keys\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections/SortedList.xml\n- uid: System.Collections.SortedList.Remove*\n  parent: System.Collections.SortedList\n  isExternal: false\n  name: Remove\n  nameWithType: SortedList.Remove\n  fullName: SortedList.Remove\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections/SortedList.xml\n- uid: System.Collections.SortedList.RemoveAt*\n  parent: System.Collections.SortedList\n  isExternal: false\n  name: RemoveAt\n  nameWithType: SortedList.RemoveAt\n  fullName: SortedList.RemoveAt\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections/SortedList.xml\n- uid: System.Collections.SortedList.SetByIndex*\n  parent: System.Collections.SortedList\n  isExternal: false\n  name: SetByIndex\n  nameWithType: SortedList.SetByIndex\n  fullName: SortedList.SetByIndex\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections/SortedList.xml\n- uid: System.Collections.SortedList.Synchronized*\n  parent: System.Collections.SortedList\n  isExternal: false\n  name: Synchronized\n  nameWithType: SortedList.Synchronized\n  fullName: SortedList.Synchronized\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections/SortedList.xml\n- uid: System.Collections.SortedList.SyncRoot*\n  parent: System.Collections.SortedList\n  isExternal: false\n  name: SyncRoot\n  nameWithType: SortedList.SyncRoot\n  fullName: SortedList.SyncRoot\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections/SortedList.xml\n- uid: System.Collections.SortedList.TrimToSize*\n  parent: System.Collections.SortedList\n  isExternal: false\n  name: TrimToSize\n  nameWithType: SortedList.TrimToSize\n  fullName: SortedList.TrimToSize\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections/SortedList.xml\n- uid: System.Collections.SortedList.Values*\n  parent: System.Collections.SortedList\n  isExternal: false\n  name: Values\n  nameWithType: SortedList.Values\n  fullName: SortedList.Values\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections/SortedList.xml\n- uid: System.Collections.SortedList.System#Collections#IEnumerable#GetEnumerator*\n  parent: System.Collections.SortedList\n  isExternal: false\n  name: System.Collections.IEnumerable.GetEnumerator\n  nameWithType: SortedList.System.Collections.IEnumerable.GetEnumerator\n  fullName: SortedList.System.Collections.IEnumerable.GetEnumerator\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections/SortedList.xml\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: Object.Equals(Object)\n  fullName: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: Object.GetHashCode()\n  fullName: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: false\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: false\n  name: ToString()\n  nameWithType: Object.ToString()\n  fullName: Object.ToString()\n- uid: System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Cast<TResult>(IEnumerable)\n  nameWithType: Enumerable.Cast<TResult>(IEnumerable)\n  fullName: Enumerable.Cast<TResult>(IEnumerable)\n- uid: System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: OfType<TResult>(IEnumerable)\n  nameWithType: Enumerable.OfType<TResult>(IEnumerable)\n  fullName: Enumerable.OfType<TResult>(IEnumerable)\n- uid: System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)\n  parent: System.Linq.ParallelEnumerable\n  isExternal: false\n  name: AsParallel(IEnumerable)\n  nameWithType: ParallelEnumerable.AsParallel(IEnumerable)\n  fullName: ParallelEnumerable.AsParallel(IEnumerable)\n- uid: System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)\n  parent: System.Linq.Queryable\n  isExternal: false\n  name: AsQueryable(IEnumerable)\n  nameWithType: Queryable.AsQueryable(IEnumerable)\n  fullName: Queryable.AsQueryable(IEnumerable)\n- uid: System.ICloneable\n  parent: System\n  isExternal: false\n  name: ICloneable\n  nameWithType: ICloneable\n  fullName: System.ICloneable\n"}