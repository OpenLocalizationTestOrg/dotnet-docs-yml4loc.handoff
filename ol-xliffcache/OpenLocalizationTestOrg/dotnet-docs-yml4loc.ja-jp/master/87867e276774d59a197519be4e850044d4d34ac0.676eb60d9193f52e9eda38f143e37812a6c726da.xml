{"nodes":[{"content":"Represents the abstract base class from which the workflow runtime engine core services are derived.","nodes":[{"pos":[0,100],"content":"Represents the abstract base class from which the workflow runtime engine core services are derived.","nodes":[{"content":"Represents the abstract base class from which the workflow runtime engine core services are derived.","pos":[0,100]}]}],"pos":[1069,1170],"yaml":true},{"content":"> [!NOTE]\n>  [!INCLUDE[DeprecatedContent](~/includes/deprecatedcontent-md.md)]  \n  \n Services that derive from the <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService> class can be started and stopped by the workflow runtime engine. The order in which the services are started or stopped, however, is indeterminate, and services may require the support of other services in order to properly initialize themselves when they are started, and, conversely, may require the to support of other services in order to properly shut down when they are stopped. To address this problem, the workflow runtime engine provides two-phase mechanisms for starting and stopping services. When <xref:System.Workflow.Runtime.WorkflowRuntime.StartRuntime%2A> is called, the workflow runtime engine invokes the <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Start%2A> method for each of its services that derive from the <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService> class.  After all of these services have been started, the workflow runtime engine raises the <xref:System.Workflow.Runtime.WorkflowRuntime.Started?displayProperty=fullName> event, which causes the <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.OnStarted%2A> method to be invoked for each workflow runtime engine service. Your service can override the <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.OnStarted%2A> method to participate in this two phase process. Similarly, when <xref:System.Workflow.Runtime.WorkflowRuntime.StopRuntime%2A> is called, the <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Stop%2A> method, the <xref:System.Workflow.Runtime.WorkflowRuntime.Stopped?displayProperty=fullName> event, and the <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.OnStopped%2A> method provide this two-phase mechanism.  The State property contains a <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeServiceState> value that indicates whether the service is in the process of starting or stopping or is completely started or stopped.  \n  \n Services that derive from the <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService> class can raise the <xref:System.Workflow.Runtime.WorkflowRuntime.ServicesExceptionNotHandled?displayProperty=fullName> event when they encounter a condition that causes an unhandled exception by calling <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.RaiseServicesExceptionNotHandledEvent%2A>.  \n  \n Services derived from the <xref:System.Workflow.Runtime.Hosting.WorkflowSchedulerService> class, the <xref:System.Workflow.Runtime.Hosting.WorkflowCommitWorkBatchService> class, the <xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService> class, and the <xref:System.Workflow.Runtime.Tracking.TrackingService> class ultimately derives from the <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService> class.","nodes":[{"pos":[2,78],"content":"[!NOTE]\n [!INCLUDE[DeprecatedContent](~/includes/deprecatedcontent-md.md)]","leadings":["","> "],"nodes":[]},{"pos":[85,2079],"content":"Services that derive from the <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService> class can be started and stopped by the workflow runtime engine. The order in which the services are started or stopped, however, is indeterminate, and services may require the support of other services in order to properly initialize themselves when they are started, and, conversely, may require the to support of other services in order to properly shut down when they are stopped. To address this problem, the workflow runtime engine provides two-phase mechanisms for starting and stopping services. When <xref:System.Workflow.Runtime.WorkflowRuntime.StartRuntime%2A> is called, the workflow runtime engine invokes the <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Start%2A> method for each of its services that derive from the <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService> class.  After all of these services have been started, the workflow runtime engine raises the <xref:System.Workflow.Runtime.WorkflowRuntime.Started?displayProperty=fullName> event, which causes the <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.OnStarted%2A> method to be invoked for each workflow runtime engine service. Your service can override the <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.OnStarted%2A> method to participate in this two phase process. Similarly, when <xref:System.Workflow.Runtime.WorkflowRuntime.StopRuntime%2A> is called, the <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Stop%2A> method, the <xref:System.Workflow.Runtime.WorkflowRuntime.Stopped?displayProperty=fullName> event, and the <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.OnStopped%2A> method provide this two-phase mechanism.  The State property contains a <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeServiceState> value that indicates whether the service is in the process of starting or stopping or is completely started or stopped.","nodes":[{"content":"Services that derive from the <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService> class can be started and stopped by the workflow runtime engine. The order in which the services are started or stopped, however, is indeterminate, and services may require the support of other services in order to properly initialize themselves when they are started, and, conversely, may require the to support of other services in order to properly shut down when they are stopped. To address this problem, the workflow runtime engine provides two-phase mechanisms for starting and stopping services. When <xref:System.Workflow.Runtime.WorkflowRuntime.StartRuntime%2A> is called, the workflow runtime engine invokes the <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Start%2A> method for each of its services that derive from the <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService> class.  After all of these services have been started, the workflow runtime engine raises the <xref:System.Workflow.Runtime.WorkflowRuntime.Started?displayProperty=fullName> event, which causes the <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.OnStarted%2A> method to be invoked for each workflow runtime engine service. Your service can override the <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.OnStarted%2A> method to participate in this two phase process. Similarly, when <xref:System.Workflow.Runtime.WorkflowRuntime.StopRuntime%2A> is called, the <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Stop%2A> method, the <xref:System.Workflow.Runtime.WorkflowRuntime.Stopped?displayProperty=fullName> event, and the <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.OnStopped%2A> method provide this two-phase mechanism.  The State property contains a <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeServiceState> value that indicates whether the service is in the process of starting or stopping or is completely started or stopped.","pos":[0,1994],"nodes":[{"content":"Services that derive from the <ph id=\"ph1\">&lt;xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService&gt;</ph> class can be started and stopped by the workflow runtime engine.","pos":[0,156],"source":"Services that derive from the <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService> class can be started and stopped by the workflow runtime engine."},{"content":"The order in which the services are started or stopped, however, is indeterminate, and services may require the support of other services in order to properly initialize themselves when they are started, and, conversely, may require the to support of other services in order to properly shut down when they are stopped.","pos":[157,476]},{"content":"To address this problem, the workflow runtime engine provides two-phase mechanisms for starting and stopping services.","pos":[477,595]},{"content":"When <ph id=\"ph1\">&lt;xref:System.Workflow.Runtime.WorkflowRuntime.StartRuntime%2A&gt;</ph> is called, the workflow runtime engine invokes the <ph id=\"ph2\">&lt;xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Start%2A&gt;</ph> method for each of its services that derive from the <ph id=\"ph3\">&lt;xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService&gt;</ph> class.","pos":[596,907],"source":" When <xref:System.Workflow.Runtime.WorkflowRuntime.StartRuntime%2A> is called, the workflow runtime engine invokes the <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Start%2A> method for each of its services that derive from the <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService> class."},{"content":"After all of these services have been started, the workflow runtime engine raises the <ph id=\"ph1\">&lt;xref:System.Workflow.Runtime.WorkflowRuntime.Started?displayProperty=fullName&gt;</ph> event, which causes the <ph id=\"ph2\">&lt;xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.OnStarted%2A&gt;</ph> method to be invoked for each workflow runtime engine service.","pos":[909,1236],"source":"  After all of these services have been started, the workflow runtime engine raises the <xref:System.Workflow.Runtime.WorkflowRuntime.Started?displayProperty=fullName> event, which causes the <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.OnStarted%2A> method to be invoked for each workflow runtime engine service."},{"content":"Your service can override the <ph id=\"ph1\">&lt;xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.OnStarted%2A&gt;</ph> method to participate in this two phase process.","pos":[1237,1390],"source":" Your service can override the <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.OnStarted%2A> method to participate in this two phase process."},{"content":"Similarly, when <ph id=\"ph1\">&lt;xref:System.Workflow.Runtime.WorkflowRuntime.StopRuntime%2A&gt;</ph> is called, the <ph id=\"ph2\">&lt;xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Stop%2A&gt;</ph> method, the <ph id=\"ph3\">&lt;xref:System.Workflow.Runtime.WorkflowRuntime.Stopped?displayProperty=fullName&gt;</ph> event, and the <ph id=\"ph4\">&lt;xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.OnStopped%2A&gt;</ph> method provide this two-phase mechanism.","pos":[1391,1776],"source":" Similarly, when <xref:System.Workflow.Runtime.WorkflowRuntime.StopRuntime%2A> is called, the <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Stop%2A> method, the <xref:System.Workflow.Runtime.WorkflowRuntime.Stopped?displayProperty=fullName> event, and the <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.OnStopped%2A> method provide this two-phase mechanism."},{"content":"The State property contains a <ph id=\"ph1\">&lt;xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeServiceState&gt;</ph> value that indicates whether the service is in the process of starting or stopping or is completely started or stopped.","pos":[1778,1994],"source":"  The State property contains a <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeServiceState> value that indicates whether the service is in the process of starting or stopping or is completely started or stopped."}]}]},{"pos":[2086,2485],"content":"Services that derive from the <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService> class can raise the <xref:System.Workflow.Runtime.WorkflowRuntime.ServicesExceptionNotHandled?displayProperty=fullName> event when they encounter a condition that causes an unhandled exception by calling <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.RaiseServicesExceptionNotHandledEvent%2A>.","nodes":[{"content":"Services that derive from the <ph id=\"ph1\">&lt;xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService&gt;</ph> class can raise the <ph id=\"ph2\">&lt;xref:System.Workflow.Runtime.WorkflowRuntime.ServicesExceptionNotHandled?displayProperty=fullName&gt;</ph> event when they encounter a condition that causes an unhandled exception by calling <ph id=\"ph3\">&lt;xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.RaiseServicesExceptionNotHandledEvent%2A&gt;</ph>.","pos":[0,399],"source":"Services that derive from the <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService> class can raise the <xref:System.Workflow.Runtime.WorkflowRuntime.ServicesExceptionNotHandled?displayProperty=fullName> event when they encounter a condition that causes an unhandled exception by calling <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.RaiseServicesExceptionNotHandledEvent%2A>."}]},{"pos":[2492,2913],"content":"Services derived from the <xref:System.Workflow.Runtime.Hosting.WorkflowSchedulerService> class, the <xref:System.Workflow.Runtime.Hosting.WorkflowCommitWorkBatchService> class, the <xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService> class, and the <xref:System.Workflow.Runtime.Tracking.TrackingService> class ultimately derives from the <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService> class.","nodes":[{"content":"Services derived from the <ph id=\"ph1\">&lt;xref:System.Workflow.Runtime.Hosting.WorkflowSchedulerService&gt;</ph> class, the <ph id=\"ph2\">&lt;xref:System.Workflow.Runtime.Hosting.WorkflowCommitWorkBatchService&gt;</ph> class, the <ph id=\"ph3\">&lt;xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService&gt;</ph> class, and the <ph id=\"ph4\">&lt;xref:System.Workflow.Runtime.Tracking.TrackingService&gt;</ph> class ultimately derives from the <ph id=\"ph5\">&lt;xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService&gt;</ph> class.","pos":[0,421],"source":"Services derived from the <xref:System.Workflow.Runtime.Hosting.WorkflowSchedulerService> class, the <xref:System.Workflow.Runtime.Hosting.WorkflowCommitWorkBatchService> class, the <xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService> class, and the <xref:System.Workflow.Runtime.Tracking.TrackingService> class ultimately derives from the <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService> class."}]}],"pos":[1181,4104],"yaml":true,"extradata":"MT"},{"content":"When implemented in a derived class, initializes a new instance of the <xref href=\"System.Workflow.Runtime.Hosting.WorkflowRuntimeService\"></xref> class.","nodes":[{"pos":[0,153],"content":"When implemented in a derived class, initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Workflow.Runtime.Hosting.WorkflowRuntimeService\"&gt;&lt;/xref&gt;</ph> class.","source":"When implemented in a derived class, initializes a new instance of the <xref href=\"System.Workflow.Runtime.Hosting.WorkflowRuntimeService\"></xref> class."}],"pos":[6174,6328],"yaml":true},{"content":"<xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.State%2A> is initialized to <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeServiceState.Stopped>.","nodes":[{"pos":[0,164],"content":"<xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.State%2A> is initialized to <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeServiceState.Stopped>.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.State%2A&gt;</ph> is initialized to <ph id=\"ph2\">&lt;xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeServiceState.Stopped&gt;</ph>.","pos":[0,164],"source":"<xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.State%2A> is initialized to <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeServiceState.Stopped>."}]}],"pos":[6339,6504],"yaml":true,"extradata":"MT"},{"content":"When overridden in a derived class, represents the method that will be called when the workflow runtime engine raises the <xref href=\"System.Workflow.Runtime.WorkflowRuntime.Started\"></xref> event.","nodes":[{"pos":[0,197],"content":"When overridden in a derived class, represents the method that will be called when the workflow runtime engine raises the <ph id=\"ph1\">&lt;xref href=\"System.Workflow.Runtime.WorkflowRuntime.Started\"&gt;&lt;/xref&gt;</ph> event.","source":"When overridden in a derived class, represents the method that will be called when the workflow runtime engine raises the <xref href=\"System.Workflow.Runtime.WorkflowRuntime.Started\"></xref> event."}],"pos":[7671,7869],"yaml":true},{"content":"The <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService> class implements a two-phase starting mechanism so that workflow runtime engine services may perform any initialization that depends on other services after the workflow runtime engine has invoked the  <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Start%2A> method for all of its workflow runtime engine services. After the workflow runtime engine has called the <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Start%2A> method of all of its workflow runtime engine services, it raises the <xref:System.Workflow.Runtime.WorkflowRuntime.Started?displayProperty=fullName> event. You can override the <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.OnStarted%2A> method to provide any final startup functionality required by your service when the <xref:System.Workflow.Runtime.WorkflowRuntime.Started?displayProperty=fullName> event is raised. The mechanics of subscribing and unsubscribing from the <xref:System.Workflow.Runtime.WorkflowRuntime.Started?displayProperty=fullName> event is handled internally.  \n  \n> [!NOTE]\n>  If your service is added to the workflow runtime engine by a call to <xref:System.Workflow.Runtime.WorkflowRuntime.AddService%2A> after the workflow runtime engine has already been started, the workflow runtime engine will call <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Start%2A> on your service. However, in this situation, the <xref:System.Workflow.Runtime.WorkflowRuntime.Started> event has already occurred, therefore, your service may have to perform any initialization that it would ordinarily perform in <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.OnStarted%2A> from inside the <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Start%2A> method. You can test <xref:System.Workflow.Runtime.WorkflowRuntime.IsStarted%2A> to determine whether the workflow runtime engine has been started.  \n  \n <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.State%2A> is set to <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeServiceState.Started> before <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.OnStarted%2A> is invoked.  The default implementation of <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.OnStarted%2A> performs no action.","nodes":[{"pos":[0,1112],"content":"The <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService> class implements a two-phase starting mechanism so that workflow runtime engine services may perform any initialization that depends on other services after the workflow runtime engine has invoked the  <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Start%2A> method for all of its workflow runtime engine services. After the workflow runtime engine has called the <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Start%2A> method of all of its workflow runtime engine services, it raises the <xref:System.Workflow.Runtime.WorkflowRuntime.Started?displayProperty=fullName> event. You can override the <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.OnStarted%2A> method to provide any final startup functionality required by your service when the <xref:System.Workflow.Runtime.WorkflowRuntime.Started?displayProperty=fullName> event is raised. The mechanics of subscribing and unsubscribing from the <xref:System.Workflow.Runtime.WorkflowRuntime.Started?displayProperty=fullName> event is handled internally.","nodes":[{"content":"The <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService> class implements a two-phase starting mechanism so that workflow runtime engine services may perform any initialization that depends on other services after the workflow runtime engine has invoked the  <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Start%2A> method for all of its workflow runtime engine services. After the workflow runtime engine has called the <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Start%2A> method of all of its workflow runtime engine services, it raises the <xref:System.Workflow.Runtime.WorkflowRuntime.Started?displayProperty=fullName> event. You can override the <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.OnStarted%2A> method to provide any final startup functionality required by your service when the <xref:System.Workflow.Runtime.WorkflowRuntime.Started?displayProperty=fullName> event is raised. The mechanics of subscribing and unsubscribing from the <xref:System.Workflow.Runtime.WorkflowRuntime.Started?displayProperty=fullName> event is handled internally.","pos":[0,1112],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService&gt;</ph> class implements a two-phase starting mechanism so that workflow runtime engine services may perform any initialization that depends on other services after the workflow runtime engine has invoked the  <ph id=\"ph2\">&lt;xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Start%2A&gt;</ph> method for all of its workflow runtime engine services.","pos":[0,394],"source":"The <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService> class implements a two-phase starting mechanism so that workflow runtime engine services may perform any initialization that depends on other services after the workflow runtime engine has invoked the  <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Start%2A> method for all of its workflow runtime engine services."},{"content":"After the workflow runtime engine has called the <ph id=\"ph1\">&lt;xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Start%2A&gt;</ph> method of all of its workflow runtime engine services, it raises the <ph id=\"ph2\">&lt;xref:System.Workflow.Runtime.WorkflowRuntime.Started?displayProperty=fullName&gt;</ph> event.","pos":[395,670],"source":" After the workflow runtime engine has called the <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Start%2A> method of all of its workflow runtime engine services, it raises the <xref:System.Workflow.Runtime.WorkflowRuntime.Started?displayProperty=fullName> event."},{"content":"You can override the <ph id=\"ph1\">&lt;xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.OnStarted%2A&gt;</ph> method to provide any final startup functionality required by your service when the <ph id=\"ph2\">&lt;xref:System.Workflow.Runtime.WorkflowRuntime.Started?displayProperty=fullName&gt;</ph> event is raised.","pos":[671,947],"source":" You can override the <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.OnStarted%2A> method to provide any final startup functionality required by your service when the <xref:System.Workflow.Runtime.WorkflowRuntime.Started?displayProperty=fullName> event is raised."},{"content":"The mechanics of subscribing and unsubscribing from the <ph id=\"ph1\">&lt;xref:System.Workflow.Runtime.WorkflowRuntime.Started?displayProperty=fullName&gt;</ph> event is handled internally.","pos":[948,1112],"source":" The mechanics of subscribing and unsubscribing from the <xref:System.Workflow.Runtime.WorkflowRuntime.Started?displayProperty=fullName> event is handled internally."}]}]},{"pos":[1120,1970],"content":"[!NOTE]\n If your service is added to the workflow runtime engine by a call to <xref:System.Workflow.Runtime.WorkflowRuntime.AddService%2A> after the workflow runtime engine has already been started, the workflow runtime engine will call <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Start%2A> on your service. However, in this situation, the <xref:System.Workflow.Runtime.WorkflowRuntime.Started> event has already occurred, therefore, your service may have to perform any initialization that it would ordinarily perform in <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.OnStarted%2A> from inside the <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Start%2A> method. You can test <xref:System.Workflow.Runtime.WorkflowRuntime.IsStarted%2A> to determine whether the workflow runtime engine has been started.","leadings":["","> "],"nodes":[{"content":" If your service is added to the workflow runtime engine by a call to <xref:System.Workflow.Runtime.WorkflowRuntime.AddService%2A> after the workflow runtime engine has already been started, the workflow runtime engine will call <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Start%2A> on your service. However, in this situation, the <xref:System.Workflow.Runtime.WorkflowRuntime.Started> event has already occurred, therefore, your service may have to perform any initialization that it would ordinarily perform in <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.OnStarted%2A> from inside the <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Start%2A> method. You can test <xref:System.Workflow.Runtime.WorkflowRuntime.IsStarted%2A> to determine whether the workflow runtime engine has been started.","pos":[8,848],"nodes":[{"content":"If your service is added to the workflow runtime engine by a call to <ph id=\"ph1\">&lt;xref:System.Workflow.Runtime.WorkflowRuntime.AddService%2A&gt;</ph> after the workflow runtime engine has already been started, the workflow runtime engine will call <ph id=\"ph2\">&lt;xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Start%2A&gt;</ph> on your service.","pos":[1,316],"source":" If your service is added to the workflow runtime engine by a call to <xref:System.Workflow.Runtime.WorkflowRuntime.AddService%2A> after the workflow runtime engine has already been started, the workflow runtime engine will call <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Start%2A> on your service."},{"content":"However, in this situation, the <ph id=\"ph1\">&lt;xref:System.Workflow.Runtime.WorkflowRuntime.Started&gt;</ph> event has already occurred, therefore, your service may have to perform any initialization that it would ordinarily perform in <ph id=\"ph2\">&lt;xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.OnStarted%2A&gt;</ph> from inside the <ph id=\"ph3\">&lt;xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Start%2A&gt;</ph> method.","pos":[317,700],"source":" However, in this situation, the <xref:System.Workflow.Runtime.WorkflowRuntime.Started> event has already occurred, therefore, your service may have to perform any initialization that it would ordinarily perform in <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.OnStarted%2A> from inside the <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Start%2A> method."},{"content":"You can test <ph id=\"ph1\">&lt;xref:System.Workflow.Runtime.WorkflowRuntime.IsStarted%2A&gt;</ph> to determine whether the workflow runtime engine has been started.","pos":[701,840],"source":" You can test <xref:System.Workflow.Runtime.WorkflowRuntime.IsStarted%2A> to determine whether the workflow runtime engine has been started."}]}]},{"pos":[1977,2352],"content":"<xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.State%2A> is set to <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeServiceState.Started> before <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.OnStarted%2A> is invoked.  The default implementation of <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.OnStarted%2A> performs no action.","nodes":[{"content":"<xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.State%2A> is set to <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeServiceState.Started> before <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.OnStarted%2A> is invoked.  The default implementation of <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.OnStarted%2A> performs no action.","pos":[0,375],"nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.State%2A&gt;</ph> is set to <ph id=\"ph2\">&lt;xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeServiceState.Started&gt;</ph> before <ph id=\"ph3\">&lt;xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.OnStarted%2A&gt;</ph> is invoked.","pos":[0,249],"source":"<xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.State%2A> is set to <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeServiceState.Started> before <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.OnStarted%2A> is invoked."},{"content":"The default implementation of <ph id=\"ph1\">&lt;xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.OnStarted%2A&gt;</ph> performs no action.","pos":[251,375],"source":"  The default implementation of <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.OnStarted%2A> performs no action."}]}]}],"pos":[7880,10240],"yaml":true,"extradata":"MT"},{"content":"When overridden in a derived class, represents the method that will be called when the workflow runtime engine raises the <xref href=\"System.Workflow.Runtime.WorkflowRuntime.Stopped\"></xref> event.","nodes":[{"pos":[0,197],"content":"When overridden in a derived class, represents the method that will be called when the workflow runtime engine raises the <ph id=\"ph1\">&lt;xref href=\"System.Workflow.Runtime.WorkflowRuntime.Stopped\"&gt;&lt;/xref&gt;</ph> event.","source":"When overridden in a derived class, represents the method that will be called when the workflow runtime engine raises the <xref href=\"System.Workflow.Runtime.WorkflowRuntime.Stopped\"></xref> event."}],"pos":[11411,11609],"yaml":true},{"content":"The <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService> class implements a two-phase stopping mechanism so that workflow runtime engine services may retain some functionality after their <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Stop%2A> method is invoked by the workflow runtime engine in order that they may, if necessary, support the shutdown of other services. After the workflow runtime engine has called the <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Stop%2A> method of all of its workflow runtime engine services, it raises the <xref:System.Workflow.Runtime.WorkflowRuntime.Stopped?displayProperty=fullName> event. You can override the <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.OnStopped%2A> method to provide any final shutdown functionality required by your service when the <xref:System.Workflow.Runtime.WorkflowRuntime.Stopped?displayProperty=fullName> event is raised. The mechanics of subscribing and unsubscribing from the <xref:System.Workflow.Runtime.WorkflowRuntime.Stopped?displayProperty=fullName> event is handled internally.  \n  \n> [!NOTE]\n>  If your <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService> is removed from the workflow runtime engine by a call to <xref:System.Workflow.Runtime.WorkflowRuntime.RemoveService%2A> while the workflow runtime engine is running, the workflow runtime engine will call <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Stop%2A> on your service. However, in this situation, the <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.OnStopped%2A> method will not be called for your service. Therefore, your service may have to perform any final shutdown that it would ordinarily perform in <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.OnStopped%2A> from inside the <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Stop%2A> method. You can test <xref:System.Workflow.Runtime.WorkflowRuntime.IsStarted%2A> to determine whether the workflow runtime engine is running.  \n  \n <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.State%2A> is set to <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeServiceState.Stopped> before <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.OnStopped%2A> is invoked.  The default implementation of <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.OnStopped%2A> performs no action.","nodes":[{"pos":[0,1111],"content":"The <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService> class implements a two-phase stopping mechanism so that workflow runtime engine services may retain some functionality after their <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Stop%2A> method is invoked by the workflow runtime engine in order that they may, if necessary, support the shutdown of other services. After the workflow runtime engine has called the <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Stop%2A> method of all of its workflow runtime engine services, it raises the <xref:System.Workflow.Runtime.WorkflowRuntime.Stopped?displayProperty=fullName> event. You can override the <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.OnStopped%2A> method to provide any final shutdown functionality required by your service when the <xref:System.Workflow.Runtime.WorkflowRuntime.Stopped?displayProperty=fullName> event is raised. The mechanics of subscribing and unsubscribing from the <xref:System.Workflow.Runtime.WorkflowRuntime.Stopped?displayProperty=fullName> event is handled internally.","nodes":[{"content":"The <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService> class implements a two-phase stopping mechanism so that workflow runtime engine services may retain some functionality after their <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Stop%2A> method is invoked by the workflow runtime engine in order that they may, if necessary, support the shutdown of other services. After the workflow runtime engine has called the <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Stop%2A> method of all of its workflow runtime engine services, it raises the <xref:System.Workflow.Runtime.WorkflowRuntime.Stopped?displayProperty=fullName> event. You can override the <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.OnStopped%2A> method to provide any final shutdown functionality required by your service when the <xref:System.Workflow.Runtime.WorkflowRuntime.Stopped?displayProperty=fullName> event is raised. The mechanics of subscribing and unsubscribing from the <xref:System.Workflow.Runtime.WorkflowRuntime.Stopped?displayProperty=fullName> event is handled internally.","pos":[0,1111],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService&gt;</ph> class implements a two-phase stopping mechanism so that workflow runtime engine services may retain some functionality after their <ph id=\"ph2\">&lt;xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Stop%2A&gt;</ph> method is invoked by the workflow runtime engine in order that they may, if necessary, support the shutdown of other services.","pos":[0,393],"source":"The <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService> class implements a two-phase stopping mechanism so that workflow runtime engine services may retain some functionality after their <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Stop%2A> method is invoked by the workflow runtime engine in order that they may, if necessary, support the shutdown of other services."},{"content":"After the workflow runtime engine has called the <ph id=\"ph1\">&lt;xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Stop%2A&gt;</ph> method of all of its workflow runtime engine services, it raises the <ph id=\"ph2\">&lt;xref:System.Workflow.Runtime.WorkflowRuntime.Stopped?displayProperty=fullName&gt;</ph> event.","pos":[394,668],"source":" After the workflow runtime engine has called the <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Stop%2A> method of all of its workflow runtime engine services, it raises the <xref:System.Workflow.Runtime.WorkflowRuntime.Stopped?displayProperty=fullName> event."},{"content":"You can override the <ph id=\"ph1\">&lt;xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.OnStopped%2A&gt;</ph> method to provide any final shutdown functionality required by your service when the <ph id=\"ph2\">&lt;xref:System.Workflow.Runtime.WorkflowRuntime.Stopped?displayProperty=fullName&gt;</ph> event is raised.","pos":[669,946],"source":" You can override the <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.OnStopped%2A> method to provide any final shutdown functionality required by your service when the <xref:System.Workflow.Runtime.WorkflowRuntime.Stopped?displayProperty=fullName> event is raised."},{"content":"The mechanics of subscribing and unsubscribing from the <ph id=\"ph1\">&lt;xref:System.Workflow.Runtime.WorkflowRuntime.Stopped?displayProperty=fullName&gt;</ph> event is handled internally.","pos":[947,1111],"source":" The mechanics of subscribing and unsubscribing from the <xref:System.Workflow.Runtime.WorkflowRuntime.Stopped?displayProperty=fullName> event is handled internally."}]}]},{"pos":[1119,2044],"content":"[!NOTE]\n If your <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService> is removed from the workflow runtime engine by a call to <xref:System.Workflow.Runtime.WorkflowRuntime.RemoveService%2A> while the workflow runtime engine is running, the workflow runtime engine will call <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Stop%2A> on your service. However, in this situation, the <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.OnStopped%2A> method will not be called for your service. Therefore, your service may have to perform any final shutdown that it would ordinarily perform in <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.OnStopped%2A> from inside the <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Stop%2A> method. You can test <xref:System.Workflow.Runtime.WorkflowRuntime.IsStarted%2A> to determine whether the workflow runtime engine is running.","leadings":["","> "],"nodes":[{"content":" If your <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService> is removed from the workflow runtime engine by a call to <xref:System.Workflow.Runtime.WorkflowRuntime.RemoveService%2A> while the workflow runtime engine is running, the workflow runtime engine will call <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Stop%2A> on your service. However, in this situation, the <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.OnStopped%2A> method will not be called for your service. Therefore, your service may have to perform any final shutdown that it would ordinarily perform in <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.OnStopped%2A> from inside the <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Stop%2A> method. You can test <xref:System.Workflow.Runtime.WorkflowRuntime.IsStarted%2A> to determine whether the workflow runtime engine is running.","pos":[8,923],"nodes":[{"content":"If your <ph id=\"ph1\">&lt;xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService&gt;</ph> is removed from the workflow runtime engine by a call to <ph id=\"ph2\">&lt;xref:System.Workflow.Runtime.WorkflowRuntime.RemoveService%2A&gt;</ph> while the workflow runtime engine is running, the workflow runtime engine will call <ph id=\"ph3\">&lt;xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Stop%2A&gt;</ph> on your service.","pos":[1,362],"source":" If your <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService> is removed from the workflow runtime engine by a call to <xref:System.Workflow.Runtime.WorkflowRuntime.RemoveService%2A> while the workflow runtime engine is running, the workflow runtime engine will call <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Stop%2A> on your service."},{"content":"However, in this situation, the <ph id=\"ph1\">&lt;xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.OnStopped%2A&gt;</ph> method will not be called for your service.","pos":[363,513],"source":" However, in this situation, the <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.OnStopped%2A> method will not be called for your service."},{"content":"Therefore, your service may have to perform any final shutdown that it would ordinarily perform in <ph id=\"ph1\">&lt;xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.OnStopped%2A&gt;</ph> from inside the <ph id=\"ph2\">&lt;xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Stop%2A&gt;</ph> method.","pos":[514,781],"source":" Therefore, your service may have to perform any final shutdown that it would ordinarily perform in <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.OnStopped%2A> from inside the <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Stop%2A> method."},{"content":"You can test <ph id=\"ph1\">&lt;xref:System.Workflow.Runtime.WorkflowRuntime.IsStarted%2A&gt;</ph> to determine whether the workflow runtime engine is running.","pos":[782,915],"source":" You can test <xref:System.Workflow.Runtime.WorkflowRuntime.IsStarted%2A> to determine whether the workflow runtime engine is running."}]}]},{"pos":[2051,2426],"content":"<xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.State%2A> is set to <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeServiceState.Stopped> before <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.OnStopped%2A> is invoked.  The default implementation of <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.OnStopped%2A> performs no action.","nodes":[{"content":"<xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.State%2A> is set to <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeServiceState.Stopped> before <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.OnStopped%2A> is invoked.  The default implementation of <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.OnStopped%2A> performs no action.","pos":[0,375],"nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.State%2A&gt;</ph> is set to <ph id=\"ph2\">&lt;xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeServiceState.Stopped&gt;</ph> before <ph id=\"ph3\">&lt;xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.OnStopped%2A&gt;</ph> is invoked.","pos":[0,249],"source":"<xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.State%2A> is set to <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeServiceState.Stopped> before <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.OnStopped%2A> is invoked."},{"content":"The default implementation of <ph id=\"ph1\">&lt;xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.OnStopped%2A&gt;</ph> performs no action.","pos":[251,375],"source":"  The default implementation of <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.OnStopped%2A> performs no action."}]}]}],"pos":[11620,14054],"yaml":true,"extradata":"MT"},{"content":"Raises the <xref href=\"System.Workflow.Runtime.WorkflowRuntime.ServicesExceptionNotHandled\"></xref> event.","nodes":[{"pos":[0,106],"content":"Raises the <ph id=\"ph1\">&lt;xref href=\"System.Workflow.Runtime.WorkflowRuntime.ServicesExceptionNotHandled\"&gt;&lt;/xref&gt;</ph> event.","source":"Raises the <xref href=\"System.Workflow.Runtime.WorkflowRuntime.ServicesExceptionNotHandled\"></xref> event."}],"pos":[15528,15635],"yaml":true},{"content":"Your service can call <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.RaiseServicesExceptionNotHandledEvent%2A> to raise the <xref:System.Workflow.Runtime.WorkflowRuntime.ServicesExceptionNotHandled?displayProperty=fullName> event when it encounters an exception that it cannot handle during its execution. You should pass the <xref:System.Guid> of the workflow instance associated with the unhandled exception. For example, a timer service might pass the <xref:System.Guid> associated with the timer for which the exception occurred.","nodes":[{"pos":[0,547],"content":"Your service can call <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.RaiseServicesExceptionNotHandledEvent%2A> to raise the <xref:System.Workflow.Runtime.WorkflowRuntime.ServicesExceptionNotHandled?displayProperty=fullName> event when it encounters an exception that it cannot handle during its execution. You should pass the <xref:System.Guid> of the workflow instance associated with the unhandled exception. For example, a timer service might pass the <xref:System.Guid> associated with the timer for which the exception occurred.","nodes":[{"content":"Your service can call <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.RaiseServicesExceptionNotHandledEvent%2A> to raise the <xref:System.Workflow.Runtime.WorkflowRuntime.ServicesExceptionNotHandled?displayProperty=fullName> event when it encounters an exception that it cannot handle during its execution. You should pass the <xref:System.Guid> of the workflow instance associated with the unhandled exception. For example, a timer service might pass the <xref:System.Guid> associated with the timer for which the exception occurred.","pos":[0,547],"nodes":[{"content":"Your service can call <ph id=\"ph1\">&lt;xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.RaiseServicesExceptionNotHandledEvent%2A&gt;</ph> to raise the <ph id=\"ph2\">&lt;xref:System.Workflow.Runtime.WorkflowRuntime.ServicesExceptionNotHandled?displayProperty=fullName&gt;</ph> event when it encounters an exception that it cannot handle during its execution.","pos":[0,319],"source":"Your service can call <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.RaiseServicesExceptionNotHandledEvent%2A> to raise the <xref:System.Workflow.Runtime.WorkflowRuntime.ServicesExceptionNotHandled?displayProperty=fullName> event when it encounters an exception that it cannot handle during its execution."},{"content":"You should pass the <ph id=\"ph1\">&lt;xref:System.Guid&gt;</ph> of the workflow instance associated with the unhandled exception.","pos":[320,424],"source":" You should pass the <xref:System.Guid> of the workflow instance associated with the unhandled exception."},{"content":"For example, a timer service might pass the <ph id=\"ph1\">&lt;xref:System.Guid&gt;</ph> associated with the timer for which the exception occurred.","pos":[425,547],"source":" For example, a timer service might pass the <xref:System.Guid> associated with the timer for which the exception occurred."}]}]}],"pos":[15646,16194],"yaml":true,"extradata":"MT"},{"content":"The exception that could not be handled.","nodes":[{"pos":[0,40],"content":"The exception that could not be handled.","nodes":[{"content":"The exception that could not be handled.","pos":[0,40]}]}],"pos":[16394,16435],"yaml":true},{"content":"The <xref href=\"System.Guid\"></xref> of the workflow instance associated with the unhandled exception.","nodes":[{"pos":[0,102],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Guid\"&gt;&lt;/xref&gt;</ph> of the workflow instance associated with the unhandled exception.","source":"The <xref href=\"System.Guid\"></xref> of the workflow instance associated with the unhandled exception."}],"pos":[16499,16602],"yaml":true},{"content":"Gets the <xref href=\"System.Workflow.Runtime.WorkflowRuntime\"></xref> for this service.","nodes":[{"pos":[0,87],"content":"Gets the <ph id=\"ph1\">&lt;xref href=\"System.Workflow.Runtime.WorkflowRuntime\"&gt;&lt;/xref&gt;</ph> for this service.","source":"Gets the <xref href=\"System.Workflow.Runtime.WorkflowRuntime\"></xref> for this service."}],"pos":[17706,17794],"yaml":true},{"content":"The workflow runtime engine sets this property before it calls <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Start%2A> on the service.","nodes":[{"pos":[0,149],"content":"The workflow runtime engine sets this property before it calls <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Start%2A> on the service.","nodes":[{"content":"The workflow runtime engine sets this property before it calls <ph id=\"ph1\">&lt;xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Start%2A&gt;</ph> on the service.","pos":[0,149],"source":"The workflow runtime engine sets this property before it calls <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Start%2A> on the service."}]}],"pos":[17805,17955],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Workflow.Runtime.Hosting.WorkflowRuntimeService\"></xref> object.","nodes":[{"pos":[0,87],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Workflow.Runtime.Hosting.WorkflowRuntimeService\"&gt;&lt;/xref&gt;</ph> object.","source":"The <xref href=\"System.Workflow.Runtime.Hosting.WorkflowRuntimeService\"></xref> object."}],"pos":[18128,18216],"yaml":true},{"content":"When overridden in a derived class, starts the service and changes the <xref href=\"System.Workflow.Runtime.Hosting.WorkflowRuntimeService.State\"></xref> to <xref href=\"System.Workflow.Runtime.Hosting.WorkflowRuntimeServiceState.Starting\"></xref>.","nodes":[{"pos":[0,246],"content":"When overridden in a derived class, starts the service and changes the <ph id=\"ph1\">&lt;xref href=\"System.Workflow.Runtime.Hosting.WorkflowRuntimeService.State\"&gt;&lt;/xref&gt;</ph> to <ph id=\"ph2\">&lt;xref href=\"System.Workflow.Runtime.Hosting.WorkflowRuntimeServiceState.Starting\"&gt;&lt;/xref&gt;</ph>.","source":"When overridden in a derived class, starts the service and changes the <xref href=\"System.Workflow.Runtime.Hosting.WorkflowRuntimeService.State\"></xref> to <xref href=\"System.Workflow.Runtime.Hosting.WorkflowRuntimeServiceState.Starting\"></xref>."}],"pos":[19282,19529],"yaml":true},{"content":"<xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Start%2A> is invoked by the workflow runtime engine on all of its services that derive from the <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService> class when <xref:System.Workflow.Runtime.WorkflowRuntime.StartRuntime%2A> is called.  \n  \n <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Start%2A> is also invoked by the workflow runtime engine when a workflow runtime engine service is added to the workflow runtime engine by a call to <xref:System.Workflow.Runtime.WorkflowRuntime.AddService%2A> after the workflow runtime engine has already started. The default implementation of <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Start%2A> tracks whether the service has been started and uses this information to throw the appropriate exception if the service is started while it is already running.  \n  \n You can provide additional functionality necessary to have your service started by the workflow runtime engine by overriding this method. There is no guarantee about which, if any, services will be running when the workflow runtime engine calls <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Start%2A> on your service. Therefore, in the <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Start%2A> method, you should only perform any initialization that does not depend on functionality provided by other services. This includes functionality provided by core services such as the scheduler service. The workflow runtime engine raises the <xref:System.Workflow.Runtime.WorkflowRuntime.Started?displayProperty=fullName> event after it has called the <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Start%2A> method of all of its workflow runtime engine services. If your service requires additional initialization after all of the workflow runtime engine services have been started, you can override the <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.OnStarted%2A> method in order to perform this initialization when the <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Start%2A> event is raised.  \n  \n> [!NOTE]\n>  If your service is added to the workflow runtime engine by a call to <xref:System.Workflow.Runtime.WorkflowRuntime.AddService%2A> after the workflow runtime engine has already been started, the workflow runtime engine will call <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Start%2A> on your service. However, in this situation, the <xref:System.Workflow.Runtime.WorkflowRuntime.Started> event has already occurred, therefore, your service may have to perform any initialization that it would ordinarily perform in <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.OnStarted%2A> from inside the <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Start%2A> method. You can test <xref:System.Workflow.Runtime.WorkflowRuntime.IsStarted%2A> to determine whether the workflow runtime engine has been started.  \n  \n <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Start%2A> should only be called by the workflow runtime engine.","nodes":[{"pos":[0,303],"content":"<xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Start%2A> is invoked by the workflow runtime engine on all of its services that derive from the <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService> class when <xref:System.Workflow.Runtime.WorkflowRuntime.StartRuntime%2A> is called.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Start%2A&gt;</ph> is invoked by the workflow runtime engine on all of its services that derive from the <ph id=\"ph2\">&lt;xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService&gt;</ph> class when <ph id=\"ph3\">&lt;xref:System.Workflow.Runtime.WorkflowRuntime.StartRuntime%2A&gt;</ph> is called.","pos":[0,303],"source":"<xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Start%2A> is invoked by the workflow runtime engine on all of its services that derive from the <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService> class when <xref:System.Workflow.Runtime.WorkflowRuntime.StartRuntime%2A> is called."}]},{"pos":[310,896],"content":"<xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Start%2A> is also invoked by the workflow runtime engine when a workflow runtime engine service is added to the workflow runtime engine by a call to <xref:System.Workflow.Runtime.WorkflowRuntime.AddService%2A> after the workflow runtime engine has already started. The default implementation of <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Start%2A> tracks whether the service has been started and uses this information to throw the appropriate exception if the service is started while it is already running.","nodes":[{"content":"<xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Start%2A> is also invoked by the workflow runtime engine when a workflow runtime engine service is added to the workflow runtime engine by a call to <xref:System.Workflow.Runtime.WorkflowRuntime.AddService%2A> after the workflow runtime engine has already started. The default implementation of <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Start%2A> tracks whether the service has been started and uses this information to throw the appropriate exception if the service is started while it is already running.","pos":[0,586],"nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Start%2A&gt;</ph> is also invoked by the workflow runtime engine when a workflow runtime engine service is added to the workflow runtime engine by a call to <ph id=\"ph2\">&lt;xref:System.Workflow.Runtime.WorkflowRuntime.AddService%2A&gt;</ph> after the workflow runtime engine has already started.","pos":[0,325],"source":"<xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Start%2A> is also invoked by the workflow runtime engine when a workflow runtime engine service is added to the workflow runtime engine by a call to <xref:System.Workflow.Runtime.WorkflowRuntime.AddService%2A> after the workflow runtime engine has already started."},{"content":"The default implementation of <ph id=\"ph1\">&lt;xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Start%2A&gt;</ph> tracks whether the service has been started and uses this information to throw the appropriate exception if the service is started while it is already running.","pos":[326,586],"source":" The default implementation of <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Start%2A> tracks whether the service has been started and uses this information to throw the appropriate exception if the service is started while it is already running."}]}]},{"pos":[903,2161],"content":"You can provide additional functionality necessary to have your service started by the workflow runtime engine by overriding this method. There is no guarantee about which, if any, services will be running when the workflow runtime engine calls <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Start%2A> on your service. Therefore, in the <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Start%2A> method, you should only perform any initialization that does not depend on functionality provided by other services. This includes functionality provided by core services such as the scheduler service. The workflow runtime engine raises the <xref:System.Workflow.Runtime.WorkflowRuntime.Started?displayProperty=fullName> event after it has called the <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Start%2A> method of all of its workflow runtime engine services. If your service requires additional initialization after all of the workflow runtime engine services have been started, you can override the <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.OnStarted%2A> method in order to perform this initialization when the <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Start%2A> event is raised.","nodes":[{"content":"You can provide additional functionality necessary to have your service started by the workflow runtime engine by overriding this method. There is no guarantee about which, if any, services will be running when the workflow runtime engine calls <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Start%2A> on your service. Therefore, in the <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Start%2A> method, you should only perform any initialization that does not depend on functionality provided by other services. This includes functionality provided by core services such as the scheduler service. The workflow runtime engine raises the <xref:System.Workflow.Runtime.WorkflowRuntime.Started?displayProperty=fullName> event after it has called the <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Start%2A> method of all of its workflow runtime engine services. If your service requires additional initialization after all of the workflow runtime engine services have been started, you can override the <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.OnStarted%2A> method in order to perform this initialization when the <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Start%2A> event is raised.","pos":[0,1258],"nodes":[{"content":"You can provide additional functionality necessary to have your service started by the workflow runtime engine by overriding this method.","pos":[0,137]},{"content":"There is no guarantee about which, if any, services will be running when the workflow runtime engine calls <ph id=\"ph1\">&lt;xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Start%2A&gt;</ph> on your service.","pos":[138,332],"source":" There is no guarantee about which, if any, services will be running when the workflow runtime engine calls <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Start%2A> on your service."},{"content":"Therefore, in the <ph id=\"ph1\">&lt;xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Start%2A&gt;</ph> method, you should only perform any initialization that does not depend on functionality provided by other services.","pos":[333,538],"source":" Therefore, in the <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Start%2A> method, you should only perform any initialization that does not depend on functionality provided by other services."},{"content":"This includes functionality provided by core services such as the scheduler service.","pos":[539,623]},{"content":"The workflow runtime engine raises the <ph id=\"ph1\">&lt;xref:System.Workflow.Runtime.WorkflowRuntime.Started?displayProperty=fullName&gt;</ph> event after it has called the <ph id=\"ph2\">&lt;xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Start%2A&gt;</ph> method of all of its workflow runtime engine services.","pos":[624,898],"source":" The workflow runtime engine raises the <xref:System.Workflow.Runtime.WorkflowRuntime.Started?displayProperty=fullName> event after it has called the <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Start%2A> method of all of its workflow runtime engine services."},{"content":"If your service requires additional initialization after all of the workflow runtime engine services have been started, you can override the <ph id=\"ph1\">&lt;xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.OnStarted%2A&gt;</ph> method in order to perform this initialization when the <ph id=\"ph2\">&lt;xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Start%2A&gt;</ph> event is raised.","pos":[899,1258],"source":" If your service requires additional initialization after all of the workflow runtime engine services have been started, you can override the <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.OnStarted%2A> method in order to perform this initialization when the <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Start%2A> event is raised."}]}]},{"pos":[2169,3019],"content":"[!NOTE]\n If your service is added to the workflow runtime engine by a call to <xref:System.Workflow.Runtime.WorkflowRuntime.AddService%2A> after the workflow runtime engine has already been started, the workflow runtime engine will call <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Start%2A> on your service. However, in this situation, the <xref:System.Workflow.Runtime.WorkflowRuntime.Started> event has already occurred, therefore, your service may have to perform any initialization that it would ordinarily perform in <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.OnStarted%2A> from inside the <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Start%2A> method. You can test <xref:System.Workflow.Runtime.WorkflowRuntime.IsStarted%2A> to determine whether the workflow runtime engine has been started.","leadings":["","> "],"nodes":[{"content":" If your service is added to the workflow runtime engine by a call to <xref:System.Workflow.Runtime.WorkflowRuntime.AddService%2A> after the workflow runtime engine has already been started, the workflow runtime engine will call <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Start%2A> on your service. However, in this situation, the <xref:System.Workflow.Runtime.WorkflowRuntime.Started> event has already occurred, therefore, your service may have to perform any initialization that it would ordinarily perform in <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.OnStarted%2A> from inside the <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Start%2A> method. You can test <xref:System.Workflow.Runtime.WorkflowRuntime.IsStarted%2A> to determine whether the workflow runtime engine has been started.","pos":[8,848],"nodes":[{"content":"If your service is added to the workflow runtime engine by a call to <ph id=\"ph1\">&lt;xref:System.Workflow.Runtime.WorkflowRuntime.AddService%2A&gt;</ph> after the workflow runtime engine has already been started, the workflow runtime engine will call <ph id=\"ph2\">&lt;xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Start%2A&gt;</ph> on your service.","pos":[1,316],"source":" If your service is added to the workflow runtime engine by a call to <xref:System.Workflow.Runtime.WorkflowRuntime.AddService%2A> after the workflow runtime engine has already been started, the workflow runtime engine will call <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Start%2A> on your service."},{"content":"However, in this situation, the <ph id=\"ph1\">&lt;xref:System.Workflow.Runtime.WorkflowRuntime.Started&gt;</ph> event has already occurred, therefore, your service may have to perform any initialization that it would ordinarily perform in <ph id=\"ph2\">&lt;xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.OnStarted%2A&gt;</ph> from inside the <ph id=\"ph3\">&lt;xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Start%2A&gt;</ph> method.","pos":[317,700],"source":" However, in this situation, the <xref:System.Workflow.Runtime.WorkflowRuntime.Started> event has already occurred, therefore, your service may have to perform any initialization that it would ordinarily perform in <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.OnStarted%2A> from inside the <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Start%2A> method."},{"content":"You can test <ph id=\"ph1\">&lt;xref:System.Workflow.Runtime.WorkflowRuntime.IsStarted%2A&gt;</ph> to determine whether the workflow runtime engine has been started.","pos":[701,840],"source":" You can test <xref:System.Workflow.Runtime.WorkflowRuntime.IsStarted%2A> to determine whether the workflow runtime engine has been started."}]}]},{"pos":[3026,3150],"content":"<xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Start%2A> should only be called by the workflow runtime engine.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Start%2A&gt;</ph> should only be called by the workflow runtime engine.","pos":[0,124],"source":"<xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Start%2A> should only be called by the workflow runtime engine."}]}],"pos":[19540,22702],"yaml":true,"extradata":"MT"},{"content":"<xref href=\"System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Runtime\"></xref> is a null reference (`Nothing` in Visual Basic)  \n  \n -or-  \n  \n The service has already been started.","nodes":[{"pos":[0,131],"content":"<ph id=\"ph1\">&lt;xref href=\"System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Runtime\"&gt;&lt;/xref&gt;</ph> is a null reference (<ph id=\"ph2\">`Nothing`</ph> in Visual Basic)","source":"<xref href=\"System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Runtime\"></xref> is a null reference (`Nothing` in Visual Basic)"},{"pos":[138,142],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[149,186],"content":"The service has already been started.","nodes":[{"content":"The service has already been started.","pos":[0,37]}]}],"pos":[23593,23788],"yaml":true},{"content":"Gets the state of the <xref href=\"System.Workflow.Runtime.Hosting.WorkflowRuntimeService\"></xref>.","nodes":[{"pos":[0,98],"content":"Gets the state of the <ph id=\"ph1\">&lt;xref href=\"System.Workflow.Runtime.Hosting.WorkflowRuntimeService\"&gt;&lt;/xref&gt;</ph>.","source":"Gets the state of the <xref href=\"System.Workflow.Runtime.Hosting.WorkflowRuntimeService\"></xref>."}],"pos":[24757,24856],"yaml":true},{"content":"The <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService> class implements two-phase mechanisms for both starting and stopping a workflow runtime engine service. The first phase of the start mechanism begins when the workflow runtime engine calls the implementation of the <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Start%2A> method for the service. This method should call the base implementation of <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Start%2A>, which sets <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.State%2A> to <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeServiceState.Starting>. The second phase occurs after the workflow runtime engine starts all of its workflow runtime engine services when it raises the <xref:System.Workflow.Runtime.WorkflowRuntime.Started> event. The <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService> internally manages a subscription to this event and its handler will set <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.State%2A> to <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeServiceState.Started>.  \n  \n The two-phase mechanism for stopping a workflow runtime engine service begins when the workflow runtime engine calls the implementation of the <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Stop%2A> method for the service. This method should call the base implementation of <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Stop%2A>, which sets <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.State%2A> to <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeServiceState.Stopping>. After it has stopped all of its workflow runtime engine services, the workflow runtime engine raises the <xref:System.Workflow.Runtime.WorkflowRuntime.Stopped> event. The <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService> internally manages a subscription to this event and its handler will set <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.State%2A> to <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeServiceState.Stopped>.","nodes":[{"pos":[0,1139],"content":"The <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService> class implements two-phase mechanisms for both starting and stopping a workflow runtime engine service. The first phase of the start mechanism begins when the workflow runtime engine calls the implementation of the <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Start%2A> method for the service. This method should call the base implementation of <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Start%2A>, which sets <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.State%2A> to <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeServiceState.Starting>. The second phase occurs after the workflow runtime engine starts all of its workflow runtime engine services when it raises the <xref:System.Workflow.Runtime.WorkflowRuntime.Started> event. The <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService> internally manages a subscription to this event and its handler will set <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.State%2A> to <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeServiceState.Started>.","nodes":[{"content":"The <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService> class implements two-phase mechanisms for both starting and stopping a workflow runtime engine service. The first phase of the start mechanism begins when the workflow runtime engine calls the implementation of the <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Start%2A> method for the service. This method should call the base implementation of <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Start%2A>, which sets <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.State%2A> to <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeServiceState.Starting>. The second phase occurs after the workflow runtime engine starts all of its workflow runtime engine services when it raises the <xref:System.Workflow.Runtime.WorkflowRuntime.Started> event. The <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService> internally manages a subscription to this event and its handler will set <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.State%2A> to <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeServiceState.Started>.","pos":[0,1139],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService&gt;</ph> class implements two-phase mechanisms for both starting and stopping a workflow runtime engine service.","pos":[0,169],"source":"The <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService> class implements two-phase mechanisms for both starting and stopping a workflow runtime engine service."},{"content":"The first phase of the start mechanism begins when the workflow runtime engine calls the implementation of the <ph id=\"ph1\">&lt;xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Start%2A&gt;</ph> method for the service.","pos":[170,375],"source":" The first phase of the start mechanism begins when the workflow runtime engine calls the implementation of the <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Start%2A> method for the service."},{"content":"This method should call the base implementation of <ph id=\"ph1\">&lt;xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Start%2A&gt;</ph>, which sets <ph id=\"ph2\">&lt;xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.State%2A&gt;</ph> to <ph id=\"ph3\">&lt;xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeServiceState.Starting&gt;</ph>.","pos":[376,660],"source":" This method should call the base implementation of <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Start%2A>, which sets <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.State%2A> to <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeServiceState.Starting>."},{"content":"The second phase occurs after the workflow runtime engine starts all of its workflow runtime engine services when it raises the <ph id=\"ph1\">&lt;xref:System.Workflow.Runtime.WorkflowRuntime.Started&gt;</ph> event.","pos":[661,850],"source":" The second phase occurs after the workflow runtime engine starts all of its workflow runtime engine services when it raises the <xref:System.Workflow.Runtime.WorkflowRuntime.Started> event."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService&gt;</ph> internally manages a subscription to this event and its handler will set <ph id=\"ph2\">&lt;xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.State%2A&gt;</ph> to <ph id=\"ph3\">&lt;xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeServiceState.Started&gt;</ph>.","pos":[851,1139],"source":" The <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService> internally manages a subscription to this event and its handler will set <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.State%2A> to <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeServiceState.Started>."}]}]},{"pos":[1146,2122],"content":"The two-phase mechanism for stopping a workflow runtime engine service begins when the workflow runtime engine calls the implementation of the <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Stop%2A> method for the service. This method should call the base implementation of <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Stop%2A>, which sets <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.State%2A> to <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeServiceState.Stopping>. After it has stopped all of its workflow runtime engine services, the workflow runtime engine raises the <xref:System.Workflow.Runtime.WorkflowRuntime.Stopped> event. The <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService> internally manages a subscription to this event and its handler will set <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.State%2A> to <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeServiceState.Stopped>.","nodes":[{"content":"The two-phase mechanism for stopping a workflow runtime engine service begins when the workflow runtime engine calls the implementation of the <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Stop%2A> method for the service. This method should call the base implementation of <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Stop%2A>, which sets <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.State%2A> to <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeServiceState.Stopping>. After it has stopped all of its workflow runtime engine services, the workflow runtime engine raises the <xref:System.Workflow.Runtime.WorkflowRuntime.Stopped> event. The <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService> internally manages a subscription to this event and its handler will set <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.State%2A> to <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeServiceState.Stopped>.","pos":[0,976],"nodes":[{"content":"The two-phase mechanism for stopping a workflow runtime engine service begins when the workflow runtime engine calls the implementation of the <ph id=\"ph1\">&lt;xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Stop%2A&gt;</ph> method for the service.","pos":[0,236],"source":"The two-phase mechanism for stopping a workflow runtime engine service begins when the workflow runtime engine calls the implementation of the <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Stop%2A> method for the service."},{"content":"This method should call the base implementation of <ph id=\"ph1\">&lt;xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Stop%2A&gt;</ph>, which sets <ph id=\"ph2\">&lt;xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.State%2A&gt;</ph> to <ph id=\"ph3\">&lt;xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeServiceState.Stopping&gt;</ph>.","pos":[237,520],"source":" This method should call the base implementation of <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Stop%2A>, which sets <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.State%2A> to <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeServiceState.Stopping>."},{"content":"After it has stopped all of its workflow runtime engine services, the workflow runtime engine raises the <ph id=\"ph1\">&lt;xref:System.Workflow.Runtime.WorkflowRuntime.Stopped&gt;</ph> event.","pos":[521,687],"source":" After it has stopped all of its workflow runtime engine services, the workflow runtime engine raises the <xref:System.Workflow.Runtime.WorkflowRuntime.Stopped> event."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService&gt;</ph> internally manages a subscription to this event and its handler will set <ph id=\"ph2\">&lt;xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.State%2A&gt;</ph> to <ph id=\"ph3\">&lt;xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeServiceState.Stopped&gt;</ph>.","pos":[688,976],"source":" The <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService> internally manages a subscription to this event and its handler will set <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.State%2A> to <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeServiceState.Stopped>."}]}]}],"pos":[24867,26994],"yaml":true,"extradata":"MT"},{"content":"One of the <xref href=\"System.Workflow.Runtime.Hosting.WorkflowRuntimeServiceState\"></xref> values.","nodes":[{"pos":[0,99],"content":"One of the <ph id=\"ph1\">&lt;xref href=\"System.Workflow.Runtime.Hosting.WorkflowRuntimeServiceState\"&gt;&lt;/xref&gt;</ph> values.","source":"One of the <xref href=\"System.Workflow.Runtime.Hosting.WorkflowRuntimeServiceState\"></xref> values."}],"pos":[27205,27305],"yaml":true},{"content":"When overridden in a derived class, stops the service and changes the <xref href=\"System.Workflow.Runtime.Hosting.WorkflowRuntimeService.State\"></xref> to <xref href=\"System.Workflow.Runtime.Hosting.WorkflowRuntimeServiceState.Stopping\"></xref>.","nodes":[{"pos":[0,245],"content":"When overridden in a derived class, stops the service and changes the <ph id=\"ph1\">&lt;xref href=\"System.Workflow.Runtime.Hosting.WorkflowRuntimeService.State\"&gt;&lt;/xref&gt;</ph> to <ph id=\"ph2\">&lt;xref href=\"System.Workflow.Runtime.Hosting.WorkflowRuntimeServiceState.Stopping\"&gt;&lt;/xref&gt;</ph>.","source":"When overridden in a derived class, stops the service and changes the <xref href=\"System.Workflow.Runtime.Hosting.WorkflowRuntimeService.State\"></xref> to <xref href=\"System.Workflow.Runtime.Hosting.WorkflowRuntimeServiceState.Stopping\"></xref>."}],"pos":[28363,28609],"yaml":true},{"content":"<xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Stop%2A> is invoked by the workflow runtime engine on all of its services that derive from the <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService> class when <xref:System.Workflow.Runtime.WorkflowRuntime.StopRuntime%2A> is called.  <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Stop%2A> is also invoked by the workflow runtime engine when a workflow runtime engine service is removed from the workflow runtime engine by a call to <xref:System.Workflow.Runtime.WorkflowRuntime.RemoveService%2A>. The default implementation of <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Stop%2A> tracks whether the service has been started and uses this information to throw the appropriate exception if the service is stopped before it is started.  \n  \n You can provide additional functionality necessary to have your service stopped by the workflow runtime engine by overriding this method. There is no guarantee about which, if any, services will be stopped or running when <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Stop%2A> is called on your service. The workflow runtime engine raises the <xref:System.Workflow.Runtime.WorkflowRuntime.Stopped?displayProperty=fullName> event after it has called the <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Stop%2A> method of all of its workflow runtime engine services. Your service may need to retain some residual functionality to support other services until all the workflow runtime engine services have had their stop methods invoked by the workflow runtime engine. If your service must retain such functionality, you can override the <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.OnStopped%2A> method to perform any additional action required to finish stopping your service when the <xref:System.Workflow.Runtime.WorkflowRuntime.Stopped?displayProperty=fullName> event is raised.  \n  \n> [!NOTE]\n>  If your <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService> is removed from the workflow runtime engine by a call to <xref:System.Workflow.Runtime.WorkflowRuntime.RemoveService%2A> while the workflow runtime engine is running, the workflow runtime engine will call <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Stop%2A> on your service. However, in this situation, the <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.OnStopped%2A> method will not be called for your service. Therefore, your service may have to perform any additional shutdown functionality that it would ordinarily perform in <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.OnStopped%2A> from inside the <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Stop%2A> method. You can test <xref:System.Workflow.Runtime.WorkflowRuntime.IsStarted%2A> to determine whether the workflow runtime engine is running.  \n  \n <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Stop%2A> should only be called by the workflow runtime engine.","nodes":[{"pos":[0,833],"content":"<xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Stop%2A> is invoked by the workflow runtime engine on all of its services that derive from the <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService> class when <xref:System.Workflow.Runtime.WorkflowRuntime.StopRuntime%2A> is called.  <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Stop%2A> is also invoked by the workflow runtime engine when a workflow runtime engine service is removed from the workflow runtime engine by a call to <xref:System.Workflow.Runtime.WorkflowRuntime.RemoveService%2A>. The default implementation of <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Stop%2A> tracks whether the service has been started and uses this information to throw the appropriate exception if the service is stopped before it is started.","nodes":[{"content":"<xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Stop%2A> is invoked by the workflow runtime engine on all of its services that derive from the <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService> class when <xref:System.Workflow.Runtime.WorkflowRuntime.StopRuntime%2A> is called.  <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Stop%2A> is also invoked by the workflow runtime engine when a workflow runtime engine service is removed from the workflow runtime engine by a call to <xref:System.Workflow.Runtime.WorkflowRuntime.RemoveService%2A>. The default implementation of <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Stop%2A> tracks whether the service has been started and uses this information to throw the appropriate exception if the service is stopped before it is started.","pos":[0,833],"nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Stop%2A&gt;</ph> is invoked by the workflow runtime engine on all of its services that derive from the <ph id=\"ph2\">&lt;xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService&gt;</ph> class when <ph id=\"ph3\">&lt;xref:System.Workflow.Runtime.WorkflowRuntime.StopRuntime%2A&gt;</ph> is called.","pos":[0,301],"source":"<xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Stop%2A> is invoked by the workflow runtime engine on all of its services that derive from the <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService> class when <xref:System.Workflow.Runtime.WorkflowRuntime.StopRuntime%2A> is called."},{"content":"<ph id=\"ph1\">&lt;xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Stop%2A&gt;</ph> is also invoked by the workflow runtime engine when a workflow runtime engine service is removed from the workflow runtime engine by a call to <ph id=\"ph2\">&lt;xref:System.Workflow.Runtime.WorkflowRuntime.RemoveService%2A&gt;</ph>.","pos":[303,580],"source":"  <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Stop%2A> is also invoked by the workflow runtime engine when a workflow runtime engine service is removed from the workflow runtime engine by a call to <xref:System.Workflow.Runtime.WorkflowRuntime.RemoveService%2A>."},{"content":"The default implementation of <ph id=\"ph1\">&lt;xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Stop%2A&gt;</ph> tracks whether the service has been started and uses this information to throw the appropriate exception if the service is stopped before it is started.","pos":[581,833],"source":" The default implementation of <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Stop%2A> tracks whether the service has been started and uses this information to throw the appropriate exception if the service is stopped before it is started."}]}]},{"pos":[840,1964],"content":"You can provide additional functionality necessary to have your service stopped by the workflow runtime engine by overriding this method. There is no guarantee about which, if any, services will be stopped or running when <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Stop%2A> is called on your service. The workflow runtime engine raises the <xref:System.Workflow.Runtime.WorkflowRuntime.Stopped?displayProperty=fullName> event after it has called the <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Stop%2A> method of all of its workflow runtime engine services. Your service may need to retain some residual functionality to support other services until all the workflow runtime engine services have had their stop methods invoked by the workflow runtime engine. If your service must retain such functionality, you can override the <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.OnStopped%2A> method to perform any additional action required to finish stopping your service when the <xref:System.Workflow.Runtime.WorkflowRuntime.Stopped?displayProperty=fullName> event is raised.","nodes":[{"content":"You can provide additional functionality necessary to have your service stopped by the workflow runtime engine by overriding this method. There is no guarantee about which, if any, services will be stopped or running when <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Stop%2A> is called on your service. The workflow runtime engine raises the <xref:System.Workflow.Runtime.WorkflowRuntime.Stopped?displayProperty=fullName> event after it has called the <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Stop%2A> method of all of its workflow runtime engine services. Your service may need to retain some residual functionality to support other services until all the workflow runtime engine services have had their stop methods invoked by the workflow runtime engine. If your service must retain such functionality, you can override the <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.OnStopped%2A> method to perform any additional action required to finish stopping your service when the <xref:System.Workflow.Runtime.WorkflowRuntime.Stopped?displayProperty=fullName> event is raised.","pos":[0,1124],"nodes":[{"content":"You can provide additional functionality necessary to have your service stopped by the workflow runtime engine by overriding this method.","pos":[0,137]},{"content":"There is no guarantee about which, if any, services will be stopped or running when <ph id=\"ph1\">&lt;xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Stop%2A&gt;</ph> is called on your service.","pos":[138,318],"source":" There is no guarantee about which, if any, services will be stopped or running when <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Stop%2A> is called on your service."},{"content":"The workflow runtime engine raises the <ph id=\"ph1\">&lt;xref:System.Workflow.Runtime.WorkflowRuntime.Stopped?displayProperty=fullName&gt;</ph> event after it has called the <ph id=\"ph2\">&lt;xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Stop%2A&gt;</ph> method of all of its workflow runtime engine services.","pos":[319,592],"source":" The workflow runtime engine raises the <xref:System.Workflow.Runtime.WorkflowRuntime.Stopped?displayProperty=fullName> event after it has called the <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Stop%2A> method of all of its workflow runtime engine services."},{"content":"Your service may need to retain some residual functionality to support other services until all the workflow runtime engine services have had their stop methods invoked by the workflow runtime engine.","pos":[593,793]},{"content":"If your service must retain such functionality, you can override the <ph id=\"ph1\">&lt;xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.OnStopped%2A&gt;</ph> method to perform any additional action required to finish stopping your service when the <ph id=\"ph2\">&lt;xref:System.Workflow.Runtime.WorkflowRuntime.Stopped?displayProperty=fullName&gt;</ph> event is raised.","pos":[794,1124],"source":" If your service must retain such functionality, you can override the <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.OnStopped%2A> method to perform any additional action required to finish stopping your service when the <xref:System.Workflow.Runtime.WorkflowRuntime.Stopped?displayProperty=fullName> event is raised."}]}]},{"pos":[1972,2916],"content":"[!NOTE]\n If your <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService> is removed from the workflow runtime engine by a call to <xref:System.Workflow.Runtime.WorkflowRuntime.RemoveService%2A> while the workflow runtime engine is running, the workflow runtime engine will call <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Stop%2A> on your service. However, in this situation, the <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.OnStopped%2A> method will not be called for your service. Therefore, your service may have to perform any additional shutdown functionality that it would ordinarily perform in <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.OnStopped%2A> from inside the <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Stop%2A> method. You can test <xref:System.Workflow.Runtime.WorkflowRuntime.IsStarted%2A> to determine whether the workflow runtime engine is running.","leadings":["","> "],"nodes":[{"content":" If your <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService> is removed from the workflow runtime engine by a call to <xref:System.Workflow.Runtime.WorkflowRuntime.RemoveService%2A> while the workflow runtime engine is running, the workflow runtime engine will call <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Stop%2A> on your service. However, in this situation, the <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.OnStopped%2A> method will not be called for your service. Therefore, your service may have to perform any additional shutdown functionality that it would ordinarily perform in <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.OnStopped%2A> from inside the <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Stop%2A> method. You can test <xref:System.Workflow.Runtime.WorkflowRuntime.IsStarted%2A> to determine whether the workflow runtime engine is running.","pos":[8,942],"nodes":[{"content":"If your <ph id=\"ph1\">&lt;xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService&gt;</ph> is removed from the workflow runtime engine by a call to <ph id=\"ph2\">&lt;xref:System.Workflow.Runtime.WorkflowRuntime.RemoveService%2A&gt;</ph> while the workflow runtime engine is running, the workflow runtime engine will call <ph id=\"ph3\">&lt;xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Stop%2A&gt;</ph> on your service.","pos":[1,362],"source":" If your <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService> is removed from the workflow runtime engine by a call to <xref:System.Workflow.Runtime.WorkflowRuntime.RemoveService%2A> while the workflow runtime engine is running, the workflow runtime engine will call <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Stop%2A> on your service."},{"content":"However, in this situation, the <ph id=\"ph1\">&lt;xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.OnStopped%2A&gt;</ph> method will not be called for your service.","pos":[363,513],"source":" However, in this situation, the <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.OnStopped%2A> method will not be called for your service."},{"content":"Therefore, your service may have to perform any additional shutdown functionality that it would ordinarily perform in <ph id=\"ph1\">&lt;xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.OnStopped%2A&gt;</ph> from inside the <ph id=\"ph2\">&lt;xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Stop%2A&gt;</ph> method.","pos":[514,800],"source":" Therefore, your service may have to perform any additional shutdown functionality that it would ordinarily perform in <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.OnStopped%2A> from inside the <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Stop%2A> method."},{"content":"You can test <ph id=\"ph1\">&lt;xref:System.Workflow.Runtime.WorkflowRuntime.IsStarted%2A&gt;</ph> to determine whether the workflow runtime engine is running.","pos":[801,934],"source":" You can test <xref:System.Workflow.Runtime.WorkflowRuntime.IsStarted%2A> to determine whether the workflow runtime engine is running."}]}]},{"pos":[2923,3046],"content":"<xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Stop%2A> should only be called by the workflow runtime engine.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Stop%2A&gt;</ph> should only be called by the workflow runtime engine.","pos":[0,123],"source":"<xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Stop%2A> should only be called by the workflow runtime engine."}]}],"pos":[28620,31676],"yaml":true,"extradata":"MT"},{"content":"<xref href=\"System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Runtime\"></xref> is a null reference (`Nothing` in Visual Basic).  \n  \n -or-  \n  \n The service has not yet been started.","nodes":[{"pos":[0,132],"content":"<ph id=\"ph1\">&lt;xref href=\"System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Runtime\"&gt;&lt;/xref&gt;</ph> is a null reference (<ph id=\"ph2\">`Nothing`</ph> in Visual Basic).","source":"<xref href=\"System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Runtime\"></xref> is a null reference (`Nothing` in Visual Basic)."},{"pos":[139,143],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[150,187],"content":"The service has not yet been started.","nodes":[{"content":"The service has not yet been started.","pos":[0,37]}]}],"pos":[31947,32143],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Workflow.Runtime.Hosting.WorkflowRuntimeService\n  commentId: T:System.Workflow.Runtime.Hosting.WorkflowRuntimeService\n  id: WorkflowRuntimeService\n  children:\n  - System.Workflow.Runtime.Hosting.WorkflowRuntimeService.#ctor\n  - System.Workflow.Runtime.Hosting.WorkflowRuntimeService.OnStarted\n  - System.Workflow.Runtime.Hosting.WorkflowRuntimeService.OnStopped\n  - System.Workflow.Runtime.Hosting.WorkflowRuntimeService.RaiseServicesExceptionNotHandledEvent(System.Exception,System.Guid)\n  - System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Runtime\n  - System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Start\n  - System.Workflow.Runtime.Hosting.WorkflowRuntimeService.State\n  - System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Stop\n  langs:\n  - csharp\n  name: WorkflowRuntimeService\n  nameWithType: WorkflowRuntimeService\n  fullName: System.Workflow.Runtime.Hosting.WorkflowRuntimeService\n  type: Class\n  assemblies:\n  - System.Workflow.Runtime\n  namespace: System.Workflow.Runtime.Hosting\n  summary: Represents the abstract base class from which the workflow runtime engine core services are derived.\n  remarks: \"> [!NOTE]\\n>  [!INCLUDE[DeprecatedContent](~/includes/deprecatedcontent-md.md)]  \\n  \\n Services that derive from the <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService> class can be started and stopped by the workflow runtime engine. The order in which the services are started or stopped, however, is indeterminate, and services may require the support of other services in order to properly initialize themselves when they are started, and, conversely, may require the to support of other services in order to properly shut down when they are stopped. To address this problem, the workflow runtime engine provides two-phase mechanisms for starting and stopping services. When <xref:System.Workflow.Runtime.WorkflowRuntime.StartRuntime%2A> is called, the workflow runtime engine invokes the <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Start%2A> method for each of its services that derive from the <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService> class.  After all of these services have been started, the workflow runtime engine raises the <xref:System.Workflow.Runtime.WorkflowRuntime.Started?displayProperty=fullName> event, which causes the <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.OnStarted%2A> method to be invoked for each workflow runtime engine service. Your service can override the <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.OnStarted%2A> method to participate in this two phase process. Similarly, when <xref:System.Workflow.Runtime.WorkflowRuntime.StopRuntime%2A> is called, the <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Stop%2A> method, the <xref:System.Workflow.Runtime.WorkflowRuntime.Stopped?displayProperty=fullName> event, and the <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.OnStopped%2A> method provide this two-phase mechanism.  The State property contains a <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeServiceState> value that indicates whether the service is in the process of starting or stopping or is completely started or stopped.  \\n  \\n Services that derive from the <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService> class can raise the <xref:System.Workflow.Runtime.WorkflowRuntime.ServicesExceptionNotHandled?displayProperty=fullName> event when they encounter a condition that causes an unhandled exception by calling <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.RaiseServicesExceptionNotHandledEvent%2A>.  \\n  \\n Services derived from the <xref:System.Workflow.Runtime.Hosting.WorkflowSchedulerService> class, the <xref:System.Workflow.Runtime.Hosting.WorkflowCommitWorkBatchService> class, the <xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService> class, and the <xref:System.Workflow.Runtime.Tracking.TrackingService> class ultimately derives from the <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService> class.\"\n  syntax:\n    content: >-\n      [System.Obsolete(\"The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*\")]\n\n      public abstract class WorkflowRuntimeService\n  inheritance:\n  - System.Object\n  derivedClasses:\n  - System.Workflow.Activities.ExternalDataExchangeService\n  - System.Workflow.Runtime.Hosting.ChannelManagerService\n  - System.Workflow.Runtime.Hosting.WorkflowCommitWorkBatchService\n  - System.Workflow.Runtime.Hosting.WorkflowLoaderService\n  - System.Workflow.Runtime.Hosting.WorkflowPersistenceService\n  - System.Workflow.Runtime.Hosting.WorkflowSchedulerService\n  - System.Workflow.Runtime.Tracking.TrackingService\n  implements: []\n  inheritedMembers:\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.ToString\n  attributes:\n  - type: System.ObsoleteAttribute\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Workflow.Runtime.Hosting/WorkflowRuntimeService.xml\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.Workflow.Runtime.Hosting.WorkflowRuntimeService.#ctor\n  commentId: M:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.#ctor\n  id: '#ctor'\n  parent: System.Workflow.Runtime.Hosting.WorkflowRuntimeService\n  langs:\n  - csharp\n  name: WorkflowRuntimeService()\n  nameWithType: WorkflowRuntimeService.WorkflowRuntimeService()\n  fullName: WorkflowRuntimeService.WorkflowRuntimeService()\n  type: Constructor\n  assemblies:\n  - System.Workflow.Runtime\n  namespace: System.Workflow.Runtime.Hosting\n  summary: When implemented in a derived class, initializes a new instance of the <xref href=\"System.Workflow.Runtime.Hosting.WorkflowRuntimeService\"></xref> class.\n  remarks: <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.State%2A> is initialized to <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeServiceState.Stopped>.\n  syntax:\n    content: protected WorkflowRuntimeService ();\n    parameters: []\n  overload: System.Workflow.Runtime.Hosting.WorkflowRuntimeService.#ctor*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Workflow.Runtime.Hosting/WorkflowRuntimeService.xml\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.Workflow.Runtime.Hosting.WorkflowRuntimeService.OnStarted\n  commentId: M:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.OnStarted\n  id: OnStarted\n  parent: System.Workflow.Runtime.Hosting.WorkflowRuntimeService\n  langs:\n  - csharp\n  name: OnStarted()\n  nameWithType: WorkflowRuntimeService.OnStarted()\n  fullName: WorkflowRuntimeService.OnStarted()\n  type: Method\n  assemblies:\n  - System.Workflow.Runtime\n  namespace: System.Workflow.Runtime.Hosting\n  summary: When overridden in a derived class, represents the method that will be called when the workflow runtime engine raises the <xref href=\"System.Workflow.Runtime.WorkflowRuntime.Started\"></xref> event.\n  remarks: \"The <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService> class implements a two-phase starting mechanism so that workflow runtime engine services may perform any initialization that depends on other services after the workflow runtime engine has invoked the  <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Start%2A> method for all of its workflow runtime engine services. After the workflow runtime engine has called the <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Start%2A> method of all of its workflow runtime engine services, it raises the <xref:System.Workflow.Runtime.WorkflowRuntime.Started?displayProperty=fullName> event. You can override the <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.OnStarted%2A> method to provide any final startup functionality required by your service when the <xref:System.Workflow.Runtime.WorkflowRuntime.Started?displayProperty=fullName> event is raised. The mechanics of subscribing and unsubscribing from the <xref:System.Workflow.Runtime.WorkflowRuntime.Started?displayProperty=fullName> event is handled internally.  \\n  \\n> [!NOTE]\\n>  If your service is added to the workflow runtime engine by a call to <xref:System.Workflow.Runtime.WorkflowRuntime.AddService%2A> after the workflow runtime engine has already been started, the workflow runtime engine will call <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Start%2A> on your service. However, in this situation, the <xref:System.Workflow.Runtime.WorkflowRuntime.Started> event has already occurred, therefore, your service may have to perform any initialization that it would ordinarily perform in <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.OnStarted%2A> from inside the <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Start%2A> method. You can test <xref:System.Workflow.Runtime.WorkflowRuntime.IsStarted%2A> to determine whether the workflow runtime engine has been started.  \\n  \\n <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.State%2A> is set to <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeServiceState.Started> before <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.OnStarted%2A> is invoked.  The default implementation of <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.OnStarted%2A> performs no action.\"\n  syntax:\n    content: protected virtual void OnStarted ();\n    parameters: []\n  overload: System.Workflow.Runtime.Hosting.WorkflowRuntimeService.OnStarted*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Workflow.Runtime.Hosting/WorkflowRuntimeService.xml\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.Workflow.Runtime.Hosting.WorkflowRuntimeService.OnStopped\n  commentId: M:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.OnStopped\n  id: OnStopped\n  parent: System.Workflow.Runtime.Hosting.WorkflowRuntimeService\n  langs:\n  - csharp\n  name: OnStopped()\n  nameWithType: WorkflowRuntimeService.OnStopped()\n  fullName: WorkflowRuntimeService.OnStopped()\n  type: Method\n  assemblies:\n  - System.Workflow.Runtime\n  namespace: System.Workflow.Runtime.Hosting\n  summary: When overridden in a derived class, represents the method that will be called when the workflow runtime engine raises the <xref href=\"System.Workflow.Runtime.WorkflowRuntime.Stopped\"></xref> event.\n  remarks: \"The <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService> class implements a two-phase stopping mechanism so that workflow runtime engine services may retain some functionality after their <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Stop%2A> method is invoked by the workflow runtime engine in order that they may, if necessary, support the shutdown of other services. After the workflow runtime engine has called the <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Stop%2A> method of all of its workflow runtime engine services, it raises the <xref:System.Workflow.Runtime.WorkflowRuntime.Stopped?displayProperty=fullName> event. You can override the <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.OnStopped%2A> method to provide any final shutdown functionality required by your service when the <xref:System.Workflow.Runtime.WorkflowRuntime.Stopped?displayProperty=fullName> event is raised. The mechanics of subscribing and unsubscribing from the <xref:System.Workflow.Runtime.WorkflowRuntime.Stopped?displayProperty=fullName> event is handled internally.  \\n  \\n> [!NOTE]\\n>  If your <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService> is removed from the workflow runtime engine by a call to <xref:System.Workflow.Runtime.WorkflowRuntime.RemoveService%2A> while the workflow runtime engine is running, the workflow runtime engine will call <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Stop%2A> on your service. However, in this situation, the <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.OnStopped%2A> method will not be called for your service. Therefore, your service may have to perform any final shutdown that it would ordinarily perform in <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.OnStopped%2A> from inside the <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Stop%2A> method. You can test <xref:System.Workflow.Runtime.WorkflowRuntime.IsStarted%2A> to determine whether the workflow runtime engine is running.  \\n  \\n <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.State%2A> is set to <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeServiceState.Stopped> before <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.OnStopped%2A> is invoked.  The default implementation of <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.OnStopped%2A> performs no action.\"\n  syntax:\n    content: protected virtual void OnStopped ();\n    parameters: []\n  overload: System.Workflow.Runtime.Hosting.WorkflowRuntimeService.OnStopped*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Workflow.Runtime.Hosting/WorkflowRuntimeService.xml\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.Workflow.Runtime.Hosting.WorkflowRuntimeService.RaiseServicesExceptionNotHandledEvent(System.Exception,System.Guid)\n  commentId: M:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.RaiseServicesExceptionNotHandledEvent(System.Exception,System.Guid)\n  id: RaiseServicesExceptionNotHandledEvent(System.Exception,System.Guid)\n  parent: System.Workflow.Runtime.Hosting.WorkflowRuntimeService\n  langs:\n  - csharp\n  name: RaiseServicesExceptionNotHandledEvent(Exception, Guid)\n  nameWithType: WorkflowRuntimeService.RaiseServicesExceptionNotHandledEvent(Exception, Guid)\n  fullName: WorkflowRuntimeService.RaiseServicesExceptionNotHandledEvent(Exception, Guid)\n  type: Method\n  assemblies:\n  - System.Workflow.Runtime\n  namespace: System.Workflow.Runtime.Hosting\n  summary: Raises the <xref href=\"System.Workflow.Runtime.WorkflowRuntime.ServicesExceptionNotHandled\"></xref> event.\n  remarks: Your service can call <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.RaiseServicesExceptionNotHandledEvent%2A> to raise the <xref:System.Workflow.Runtime.WorkflowRuntime.ServicesExceptionNotHandled?displayProperty=fullName> event when it encounters an exception that it cannot handle during its execution. You should pass the <xref:System.Guid> of the workflow instance associated with the unhandled exception. For example, a timer service might pass the <xref:System.Guid> associated with the timer for which the exception occurred.\n  syntax:\n    content: protected void RaiseServicesExceptionNotHandledEvent (Exception exception, Guid instanceId);\n    parameters:\n    - id: exception\n      type: System.Exception\n      description: The exception that could not be handled.\n    - id: instanceId\n      type: System.Guid\n      description: The <xref href=\"System.Guid\"></xref> of the workflow instance associated with the unhandled exception.\n  overload: System.Workflow.Runtime.Hosting.WorkflowRuntimeService.RaiseServicesExceptionNotHandledEvent*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Workflow.Runtime.Hosting/WorkflowRuntimeService.xml\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Runtime\n  commentId: P:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Runtime\n  id: Runtime\n  parent: System.Workflow.Runtime.Hosting.WorkflowRuntimeService\n  langs:\n  - csharp\n  name: Runtime\n  nameWithType: WorkflowRuntimeService.Runtime\n  fullName: WorkflowRuntimeService.Runtime\n  type: Property\n  assemblies:\n  - System.Workflow.Runtime\n  namespace: System.Workflow.Runtime.Hosting\n  summary: Gets the <xref href=\"System.Workflow.Runtime.WorkflowRuntime\"></xref> for this service.\n  remarks: The workflow runtime engine sets this property before it calls <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Start%2A> on the service.\n  syntax:\n    content: protected System.Workflow.Runtime.WorkflowRuntime Runtime { get; }\n    return:\n      type: System.Workflow.Runtime.WorkflowRuntime\n      description: The <xref href=\"System.Workflow.Runtime.Hosting.WorkflowRuntimeService\"></xref> object.\n  overload: System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Runtime*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Workflow.Runtime.Hosting/WorkflowRuntimeService.xml\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Start\n  commentId: M:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Start\n  id: Start\n  parent: System.Workflow.Runtime.Hosting.WorkflowRuntimeService\n  langs:\n  - csharp\n  name: Start()\n  nameWithType: WorkflowRuntimeService.Start()\n  fullName: WorkflowRuntimeService.Start()\n  type: Method\n  assemblies:\n  - System.Workflow.Runtime\n  namespace: System.Workflow.Runtime.Hosting\n  summary: When overridden in a derived class, starts the service and changes the <xref href=\"System.Workflow.Runtime.Hosting.WorkflowRuntimeService.State\"></xref> to <xref href=\"System.Workflow.Runtime.Hosting.WorkflowRuntimeServiceState.Starting\"></xref>.\n  remarks: \"<xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Start%2A> is invoked by the workflow runtime engine on all of its services that derive from the <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService> class when <xref:System.Workflow.Runtime.WorkflowRuntime.StartRuntime%2A> is called.  \\n  \\n <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Start%2A> is also invoked by the workflow runtime engine when a workflow runtime engine service is added to the workflow runtime engine by a call to <xref:System.Workflow.Runtime.WorkflowRuntime.AddService%2A> after the workflow runtime engine has already started. The default implementation of <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Start%2A> tracks whether the service has been started and uses this information to throw the appropriate exception if the service is started while it is already running.  \\n  \\n You can provide additional functionality necessary to have your service started by the workflow runtime engine by overriding this method. There is no guarantee about which, if any, services will be running when the workflow runtime engine calls <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Start%2A> on your service. Therefore, in the <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Start%2A> method, you should only perform any initialization that does not depend on functionality provided by other services. This includes functionality provided by core services such as the scheduler service. The workflow runtime engine raises the <xref:System.Workflow.Runtime.WorkflowRuntime.Started?displayProperty=fullName> event after it has called the <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Start%2A> method of all of its workflow runtime engine services. If your service requires additional initialization after all of the workflow runtime engine services have been started, you can override the <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.OnStarted%2A> method in order to perform this initialization when the <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Start%2A> event is raised.  \\n  \\n> [!NOTE]\\n>  If your service is added to the workflow runtime engine by a call to <xref:System.Workflow.Runtime.WorkflowRuntime.AddService%2A> after the workflow runtime engine has already been started, the workflow runtime engine will call <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Start%2A> on your service. However, in this situation, the <xref:System.Workflow.Runtime.WorkflowRuntime.Started> event has already occurred, therefore, your service may have to perform any initialization that it would ordinarily perform in <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.OnStarted%2A> from inside the <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Start%2A> method. You can test <xref:System.Workflow.Runtime.WorkflowRuntime.IsStarted%2A> to determine whether the workflow runtime engine has been started.  \\n  \\n <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Start%2A> should only be called by the workflow runtime engine.\"\n  example:\n  - \"The following example demonstrates calling the Start method on an object derived from <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService>, TerminationTrackingService.  This example is from the Termination Tracking Service SDK sample.  For more information, see [Termination Tracking Service Sample](http://msdn.microsoft.com/en-us/29b7c0d7-cece-4bb9-96d0-c5b6c6e14439).  \\n  \\n [!code-csharp[WF_Samples#112](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets1.cs#112)]\\n [!code-vb[WF_Samples#112](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets1.vb#112)]\"\n  syntax:\n    content: protected virtual void Start ();\n    parameters: []\n  overload: System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Start*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"<xref href=\\\"System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Runtime\\\"></xref> is a null reference (`Nothing` in Visual Basic)  \\n  \\n -or-  \\n  \\n The service has already been started.\"\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Workflow.Runtime.Hosting/WorkflowRuntimeService.xml\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.Workflow.Runtime.Hosting.WorkflowRuntimeService.State\n  commentId: P:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.State\n  id: State\n  parent: System.Workflow.Runtime.Hosting.WorkflowRuntimeService\n  langs:\n  - csharp\n  name: State\n  nameWithType: WorkflowRuntimeService.State\n  fullName: WorkflowRuntimeService.State\n  type: Property\n  assemblies:\n  - System.Workflow.Runtime\n  namespace: System.Workflow.Runtime.Hosting\n  summary: Gets the state of the <xref href=\"System.Workflow.Runtime.Hosting.WorkflowRuntimeService\"></xref>.\n  remarks: \"The <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService> class implements two-phase mechanisms for both starting and stopping a workflow runtime engine service. The first phase of the start mechanism begins when the workflow runtime engine calls the implementation of the <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Start%2A> method for the service. This method should call the base implementation of <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Start%2A>, which sets <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.State%2A> to <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeServiceState.Starting>. The second phase occurs after the workflow runtime engine starts all of its workflow runtime engine services when it raises the <xref:System.Workflow.Runtime.WorkflowRuntime.Started> event. The <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService> internally manages a subscription to this event and its handler will set <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.State%2A> to <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeServiceState.Started>.  \\n  \\n The two-phase mechanism for stopping a workflow runtime engine service begins when the workflow runtime engine calls the implementation of the <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Stop%2A> method for the service. This method should call the base implementation of <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Stop%2A>, which sets <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.State%2A> to <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeServiceState.Stopping>. After it has stopped all of its workflow runtime engine services, the workflow runtime engine raises the <xref:System.Workflow.Runtime.WorkflowRuntime.Stopped> event. The <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService> internally manages a subscription to this event and its handler will set <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.State%2A> to <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeServiceState.Stopped>.\"\n  syntax:\n    content: protected System.Workflow.Runtime.Hosting.WorkflowRuntimeServiceState State { get; }\n    return:\n      type: System.Workflow.Runtime.Hosting.WorkflowRuntimeServiceState\n      description: One of the <xref href=\"System.Workflow.Runtime.Hosting.WorkflowRuntimeServiceState\"></xref> values.\n  overload: System.Workflow.Runtime.Hosting.WorkflowRuntimeService.State*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Workflow.Runtime.Hosting/WorkflowRuntimeService.xml\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Stop\n  commentId: M:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Stop\n  id: Stop\n  parent: System.Workflow.Runtime.Hosting.WorkflowRuntimeService\n  langs:\n  - csharp\n  name: Stop()\n  nameWithType: WorkflowRuntimeService.Stop()\n  fullName: WorkflowRuntimeService.Stop()\n  type: Method\n  assemblies:\n  - System.Workflow.Runtime\n  namespace: System.Workflow.Runtime.Hosting\n  summary: When overridden in a derived class, stops the service and changes the <xref href=\"System.Workflow.Runtime.Hosting.WorkflowRuntimeService.State\"></xref> to <xref href=\"System.Workflow.Runtime.Hosting.WorkflowRuntimeServiceState.Stopping\"></xref>.\n  remarks: \"<xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Stop%2A> is invoked by the workflow runtime engine on all of its services that derive from the <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService> class when <xref:System.Workflow.Runtime.WorkflowRuntime.StopRuntime%2A> is called.  <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Stop%2A> is also invoked by the workflow runtime engine when a workflow runtime engine service is removed from the workflow runtime engine by a call to <xref:System.Workflow.Runtime.WorkflowRuntime.RemoveService%2A>. The default implementation of <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Stop%2A> tracks whether the service has been started and uses this information to throw the appropriate exception if the service is stopped before it is started.  \\n  \\n You can provide additional functionality necessary to have your service stopped by the workflow runtime engine by overriding this method. There is no guarantee about which, if any, services will be stopped or running when <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Stop%2A> is called on your service. The workflow runtime engine raises the <xref:System.Workflow.Runtime.WorkflowRuntime.Stopped?displayProperty=fullName> event after it has called the <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Stop%2A> method of all of its workflow runtime engine services. Your service may need to retain some residual functionality to support other services until all the workflow runtime engine services have had their stop methods invoked by the workflow runtime engine. If your service must retain such functionality, you can override the <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.OnStopped%2A> method to perform any additional action required to finish stopping your service when the <xref:System.Workflow.Runtime.WorkflowRuntime.Stopped?displayProperty=fullName> event is raised.  \\n  \\n> [!NOTE]\\n>  If your <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService> is removed from the workflow runtime engine by a call to <xref:System.Workflow.Runtime.WorkflowRuntime.RemoveService%2A> while the workflow runtime engine is running, the workflow runtime engine will call <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Stop%2A> on your service. However, in this situation, the <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.OnStopped%2A> method will not be called for your service. Therefore, your service may have to perform any additional shutdown functionality that it would ordinarily perform in <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.OnStopped%2A> from inside the <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Stop%2A> method. You can test <xref:System.Workflow.Runtime.WorkflowRuntime.IsStarted%2A> to determine whether the workflow runtime engine is running.  \\n  \\n <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Stop%2A> should only be called by the workflow runtime engine.\"\n  syntax:\n    content: protected virtual void Stop ();\n    parameters: []\n  overload: System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Stop*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"<xref href=\\\"System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Runtime\\\"></xref> is a null reference (`Nothing` in Visual Basic).  \\n  \\n -or-  \\n  \\n The service has not yet been started.\"\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Workflow.Runtime.Hosting/WorkflowRuntimeService.xml\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\nreferences:\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.InvalidOperationException\n  parent: System\n  isExternal: false\n  name: InvalidOperationException\n  nameWithType: InvalidOperationException\n  fullName: System.InvalidOperationException\n- uid: System.Workflow.Runtime.Hosting.WorkflowRuntimeService.#ctor\n  parent: System.Workflow.Runtime.Hosting.WorkflowRuntimeService\n  isExternal: false\n  name: WorkflowRuntimeService()\n  nameWithType: WorkflowRuntimeService.WorkflowRuntimeService()\n  fullName: WorkflowRuntimeService.WorkflowRuntimeService()\n- uid: System.Workflow.Runtime.Hosting.WorkflowRuntimeService.OnStarted\n  parent: System.Workflow.Runtime.Hosting.WorkflowRuntimeService\n  isExternal: false\n  name: OnStarted()\n  nameWithType: WorkflowRuntimeService.OnStarted()\n  fullName: WorkflowRuntimeService.OnStarted()\n- uid: System.Workflow.Runtime.Hosting.WorkflowRuntimeService.OnStopped\n  parent: System.Workflow.Runtime.Hosting.WorkflowRuntimeService\n  isExternal: false\n  name: OnStopped()\n  nameWithType: WorkflowRuntimeService.OnStopped()\n  fullName: WorkflowRuntimeService.OnStopped()\n- uid: System.Workflow.Runtime.Hosting.WorkflowRuntimeService.RaiseServicesExceptionNotHandledEvent(System.Exception,System.Guid)\n  parent: System.Workflow.Runtime.Hosting.WorkflowRuntimeService\n  isExternal: false\n  name: RaiseServicesExceptionNotHandledEvent(Exception, Guid)\n  nameWithType: WorkflowRuntimeService.RaiseServicesExceptionNotHandledEvent(Exception, Guid)\n  fullName: WorkflowRuntimeService.RaiseServicesExceptionNotHandledEvent(Exception, Guid)\n- uid: System.Exception\n  parent: System\n  isExternal: false\n  name: Exception\n  nameWithType: Exception\n  fullName: System.Exception\n- uid: System.Guid\n  parent: System\n  isExternal: false\n  name: Guid\n  nameWithType: Guid\n  fullName: System.Guid\n- uid: System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Runtime\n  parent: System.Workflow.Runtime.Hosting.WorkflowRuntimeService\n  isExternal: false\n  name: Runtime\n  nameWithType: WorkflowRuntimeService.Runtime\n  fullName: WorkflowRuntimeService.Runtime\n- uid: System.Workflow.Runtime.WorkflowRuntime\n  parent: System.Workflow.Runtime\n  isExternal: false\n  name: WorkflowRuntime\n  nameWithType: WorkflowRuntime\n  fullName: System.Workflow.Runtime.WorkflowRuntime\n- uid: System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Start\n  parent: System.Workflow.Runtime.Hosting.WorkflowRuntimeService\n  isExternal: false\n  name: Start()\n  nameWithType: WorkflowRuntimeService.Start()\n  fullName: WorkflowRuntimeService.Start()\n- uid: System.Workflow.Runtime.Hosting.WorkflowRuntimeService.State\n  parent: System.Workflow.Runtime.Hosting.WorkflowRuntimeService\n  isExternal: false\n  name: State\n  nameWithType: WorkflowRuntimeService.State\n  fullName: WorkflowRuntimeService.State\n- uid: System.Workflow.Runtime.Hosting.WorkflowRuntimeServiceState\n  parent: System.Workflow.Runtime.Hosting\n  isExternal: false\n  name: WorkflowRuntimeServiceState\n  nameWithType: WorkflowRuntimeServiceState\n  fullName: System.Workflow.Runtime.Hosting.WorkflowRuntimeServiceState\n- uid: System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Stop\n  parent: System.Workflow.Runtime.Hosting.WorkflowRuntimeService\n  isExternal: false\n  name: Stop()\n  nameWithType: WorkflowRuntimeService.Stop()\n  fullName: WorkflowRuntimeService.Stop()\n- uid: System.Workflow.Runtime.Hosting.WorkflowRuntimeService.#ctor*\n  parent: System.Workflow.Runtime.Hosting.WorkflowRuntimeService\n  isExternal: false\n  name: WorkflowRuntimeService\n  nameWithType: WorkflowRuntimeService.WorkflowRuntimeService\n  fullName: WorkflowRuntimeService.WorkflowRuntimeService\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Workflow.Runtime.Hosting/WorkflowRuntimeService.xml\n- uid: System.Workflow.Runtime.Hosting.WorkflowRuntimeService.OnStarted*\n  parent: System.Workflow.Runtime.Hosting.WorkflowRuntimeService\n  isExternal: false\n  name: OnStarted\n  nameWithType: WorkflowRuntimeService.OnStarted\n  fullName: WorkflowRuntimeService.OnStarted\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Workflow.Runtime.Hosting/WorkflowRuntimeService.xml\n- uid: System.Workflow.Runtime.Hosting.WorkflowRuntimeService.OnStopped*\n  parent: System.Workflow.Runtime.Hosting.WorkflowRuntimeService\n  isExternal: false\n  name: OnStopped\n  nameWithType: WorkflowRuntimeService.OnStopped\n  fullName: WorkflowRuntimeService.OnStopped\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Workflow.Runtime.Hosting/WorkflowRuntimeService.xml\n- uid: System.Workflow.Runtime.Hosting.WorkflowRuntimeService.RaiseServicesExceptionNotHandledEvent*\n  parent: System.Workflow.Runtime.Hosting.WorkflowRuntimeService\n  isExternal: false\n  name: RaiseServicesExceptionNotHandledEvent\n  nameWithType: WorkflowRuntimeService.RaiseServicesExceptionNotHandledEvent\n  fullName: WorkflowRuntimeService.RaiseServicesExceptionNotHandledEvent\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Workflow.Runtime.Hosting/WorkflowRuntimeService.xml\n- uid: System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Runtime*\n  parent: System.Workflow.Runtime.Hosting.WorkflowRuntimeService\n  isExternal: false\n  name: Runtime\n  nameWithType: WorkflowRuntimeService.Runtime\n  fullName: WorkflowRuntimeService.Runtime\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Workflow.Runtime.Hosting/WorkflowRuntimeService.xml\n- uid: System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Start*\n  parent: System.Workflow.Runtime.Hosting.WorkflowRuntimeService\n  isExternal: false\n  name: Start\n  nameWithType: WorkflowRuntimeService.Start\n  fullName: WorkflowRuntimeService.Start\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Workflow.Runtime.Hosting/WorkflowRuntimeService.xml\n- uid: System.Workflow.Runtime.Hosting.WorkflowRuntimeService.State*\n  parent: System.Workflow.Runtime.Hosting.WorkflowRuntimeService\n  isExternal: false\n  name: State\n  nameWithType: WorkflowRuntimeService.State\n  fullName: WorkflowRuntimeService.State\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Workflow.Runtime.Hosting/WorkflowRuntimeService.xml\n- uid: System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Stop*\n  parent: System.Workflow.Runtime.Hosting.WorkflowRuntimeService\n  isExternal: false\n  name: Stop\n  nameWithType: WorkflowRuntimeService.Stop\n  fullName: WorkflowRuntimeService.Stop\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Workflow.Runtime.Hosting/WorkflowRuntimeService.xml\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: Object.Equals(Object)\n  fullName: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: Object.GetHashCode()\n  fullName: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: false\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: false\n  name: ToString()\n  nameWithType: Object.ToString()\n  fullName: Object.ToString()\n"}