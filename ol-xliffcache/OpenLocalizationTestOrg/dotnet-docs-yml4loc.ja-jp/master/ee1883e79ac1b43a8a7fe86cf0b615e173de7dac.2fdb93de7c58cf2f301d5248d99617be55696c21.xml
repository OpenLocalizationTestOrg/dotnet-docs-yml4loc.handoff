{"nodes":[{"content":"The CMK Store provider implementation for using the Microsoft Cryptography API: Next Generation (CNG) with [Always Encrypted](https://msdn.microsoft.com/library/mt163865.aspx).","nodes":[{"pos":[0,176],"content":"The CMK Store provider implementation for using the Microsoft Cryptography API: Next Generation (CNG) with <bpt id=\"p1\">[</bpt>Always Encrypted<ept id=\"p1\">](https://msdn.microsoft.com/library/mt163865.aspx)</ept>.","source":"The CMK Store provider implementation for using the Microsoft Cryptography API: Next Generation (CNG) with [Always Encrypted](https://msdn.microsoft.com/library/mt163865.aspx)."}],"pos":[861,1040],"yaml":true},{"content":"Enables storing Always Encrypted column master key keys in a store, such as a hardware security module (HSM), that supports the Microsoft Cryptography API: Next Generation (CNG).","nodes":[{"pos":[0,178],"content":"Enables storing Always Encrypted column master key keys in a store, such as a hardware security module (HSM), that supports the Microsoft Cryptography API: Next Generation (CNG).","nodes":[{"content":"Enables storing Always Encrypted column master key keys in a store, such as a hardware security module (HSM), that supports the Microsoft Cryptography API: Next Generation (CNG).","pos":[0,178]}]}],"pos":[1051,1232],"yaml":true,"extradata":"MT"},{"content":"Initializes a new instance of the <xref href=\"System.Data.SqlClient.SqlColumnEncryptionCngProvider\"></xref> class.","nodes":[{"pos":[0,114],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Data.SqlClient.SqlColumnEncryptionCngProvider\"&gt;&lt;/xref&gt;</ph> class.","source":"Initializes a new instance of the <xref href=\"System.Data.SqlClient.SqlColumnEncryptionCngProvider\"></xref> class."}],"pos":[2675,2790],"yaml":true},{"content":"Decrypts the given encrypted value using an asymmetric key specified by the key path and the specified algorithm. The key path will be in the format of [ProviderName]/KeyIdentifier and should be an asymmetric key stored in the specified CNG key store provider. The valid algorithm used to encrypt/decrypt the CEK is 'RSA_OAEP'.","nodes":[{"pos":[0,327],"content":"Decrypts the given encrypted value using an asymmetric key specified by the key path and the specified algorithm. The key path will be in the format of [ProviderName]/KeyIdentifier and should be an asymmetric key stored in the specified CNG key store provider. The valid algorithm used to encrypt/decrypt the CEK is 'RSA_OAEP'.","nodes":[{"content":"Decrypts the given encrypted value using an asymmetric key specified by the key path and the specified algorithm. The key path will be in the format of [ProviderName]/KeyIdentifier and should be an asymmetric key stored in the specified CNG key store provider. The valid algorithm used to encrypt/decrypt the CEK is 'RSA_OAEP'.","pos":[0,327],"nodes":[{"content":"Decrypts the given encrypted value using an asymmetric key specified by the key path and the specified algorithm.","pos":[0,113]},{"content":"The key path will be in the format of [ProviderName]/KeyIdentifier and should be an asymmetric key stored in the specified CNG key store provider.","pos":[114,260]},{"content":"The valid algorithm used to encrypt/decrypt the CEK is 'RSA_OAEP'.","pos":[261,327]}]}]}],"pos":[4110,4438],"yaml":true},{"content":"The master key path.","nodes":[{"pos":[0,20],"content":"The master key path.","nodes":[{"content":"The master key path.","pos":[0,20]}]}],"pos":[4685,4706],"yaml":true},{"content":"The encryption algorithm.","nodes":[{"pos":[0,25],"content":"The encryption algorithm.","nodes":[{"content":"The encryption algorithm.","pos":[0,25]}]}],"pos":[4781,4807],"yaml":true},{"content":"The encrypted column encryption key.","nodes":[{"pos":[0,36],"content":"The encrypted column encryption key.","nodes":[{"content":"The encrypted column encryption key.","pos":[0,36]}]}],"pos":[4891,4928],"yaml":true},{"content":"The decrypted column encryption key.","nodes":[{"pos":[0,36],"content":"The decrypted column encryption key.","nodes":[{"content":"The decrypted column encryption key.","pos":[0,36]}]}],"pos":[4985,5022],"yaml":true},{"content":"Encrypts the given plain text column encryption key using an asymmetric key specified by the key path and the specified algorithm. The key path will be in the format of [ProviderName]/KeyIdentifier and should be an asymmetric key stored in the specified CNG key store provider. The valid algorithm used to encrypt/decrypt the CEK is 'RSA_OAEP'.","nodes":[{"pos":[0,344],"content":"Encrypts the given plain text column encryption key using an asymmetric key specified by the key path and the specified algorithm. The key path will be in the format of [ProviderName]/KeyIdentifier and should be an asymmetric key stored in the specified CNG key store provider. The valid algorithm used to encrypt/decrypt the CEK is 'RSA_OAEP'.","nodes":[{"content":"Encrypts the given plain text column encryption key using an asymmetric key specified by the key path and the specified algorithm. The key path will be in the format of [ProviderName]/KeyIdentifier and should be an asymmetric key stored in the specified CNG key store provider. The valid algorithm used to encrypt/decrypt the CEK is 'RSA_OAEP'.","pos":[0,344],"nodes":[{"content":"Encrypts the given plain text column encryption key using an asymmetric key specified by the key path and the specified algorithm.","pos":[0,130]},{"content":"The key path will be in the format of [ProviderName]/KeyIdentifier and should be an asymmetric key stored in the specified CNG key store provider.","pos":[131,277]},{"content":"The valid algorithm used to encrypt/decrypt the CEK is 'RSA_OAEP'.","pos":[278,344]}]}]}],"pos":[6279,6624],"yaml":true},{"content":"The master key path.","nodes":[{"pos":[0,20],"content":"The master key path.","nodes":[{"content":"The master key path.","pos":[0,20]}]}],"pos":[6862,6883],"yaml":true},{"content":"The encryption algorithm.","nodes":[{"pos":[0,25],"content":"The encryption algorithm.","nodes":[{"content":"The encryption algorithm.","pos":[0,25]}]}],"pos":[6958,6984],"yaml":true},{"content":"The encrypted column encryption key.","nodes":[{"pos":[0,36],"content":"The encrypted column encryption key.","nodes":[{"content":"The encrypted column encryption key.","pos":[0,36]}]}],"pos":[7059,7096],"yaml":true},{"content":"The encrypted column encryption key.","nodes":[{"pos":[0,36],"content":"The encrypted column encryption key.","nodes":[{"content":"The encrypted column encryption key.","pos":[0,36]}]}],"pos":[7153,7190],"yaml":true},{"content":"A constant string for the provider name 'MSSQL_CNG_STORE'.","nodes":[{"pos":[0,58],"content":"A constant string for the provider name 'MSSQL_CNG_STORE'.","nodes":[{"content":"A constant string for the provider name 'MSSQL_CNG_STORE'.","pos":[0,58]}]}],"pos":[8161,8220],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Data.SqlClient.SqlColumnEncryptionCngProvider\n  commentId: T:System.Data.SqlClient.SqlColumnEncryptionCngProvider\n  id: SqlColumnEncryptionCngProvider\n  children:\n  - System.Data.SqlClient.SqlColumnEncryptionCngProvider.#ctor\n  - System.Data.SqlClient.SqlColumnEncryptionCngProvider.DecryptColumnEncryptionKey(System.String,System.String,System.Byte[])\n  - System.Data.SqlClient.SqlColumnEncryptionCngProvider.EncryptColumnEncryptionKey(System.String,System.String,System.Byte[])\n  - System.Data.SqlClient.SqlColumnEncryptionCngProvider.ProviderName\n  langs:\n  - csharp\n  name: SqlColumnEncryptionCngProvider\n  nameWithType: SqlColumnEncryptionCngProvider\n  fullName: System.Data.SqlClient.SqlColumnEncryptionCngProvider\n  type: Class\n  assemblies:\n  - System.Data\n  namespace: System.Data.SqlClient\n  summary: 'The CMK Store provider implementation for using the Microsoft Cryptography API: Next Generation (CNG) with [Always Encrypted](https://msdn.microsoft.com/library/mt163865.aspx).'\n  remarks: 'Enables storing Always Encrypted column master key keys in a store, such as a hardware security module (HSM), that supports the Microsoft Cryptography API: Next Generation (CNG).'\n  syntax:\n    content: 'public class SqlColumnEncryptionCngProvider : System.Data.SqlClient.SqlColumnEncryptionKeyStoreProvider'\n  inheritance:\n  - System.Object\n  - System.Data.SqlClient.SqlColumnEncryptionKeyStoreProvider\n  implements: []\n  inheritedMembers:\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.ToString\n  version:\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.7\n  monikers:\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Data.SqlClient/SqlColumnEncryptionCngProvider.xml\n  ms.technology:\n  - dotnet-ado\n  author: JennieHubbard\n  ms.author: jhubbard\n  manager: jhubbard\n- uid: System.Data.SqlClient.SqlColumnEncryptionCngProvider.#ctor\n  commentId: M:System.Data.SqlClient.SqlColumnEncryptionCngProvider.#ctor\n  id: '#ctor'\n  parent: System.Data.SqlClient.SqlColumnEncryptionCngProvider\n  langs:\n  - csharp\n  name: SqlColumnEncryptionCngProvider()\n  nameWithType: SqlColumnEncryptionCngProvider.SqlColumnEncryptionCngProvider()\n  fullName: SqlColumnEncryptionCngProvider.SqlColumnEncryptionCngProvider()\n  type: Constructor\n  assemblies:\n  - System.Data\n  namespace: System.Data.SqlClient\n  summary: Initializes a new instance of the <xref href=\"System.Data.SqlClient.SqlColumnEncryptionCngProvider\"></xref> class.\n  syntax:\n    content: public SqlColumnEncryptionCngProvider ();\n    parameters: []\n  overload: System.Data.SqlClient.SqlColumnEncryptionCngProvider.#ctor*\n  exceptions: []\n  version:\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.7\n  monikers:\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Data.SqlClient/SqlColumnEncryptionCngProvider.xml\n  ms.technology:\n  - dotnet-ado\n  author: JennieHubbard\n  ms.author: jhubbard\n  manager: jhubbard\n- uid: System.Data.SqlClient.SqlColumnEncryptionCngProvider.DecryptColumnEncryptionKey(System.String,System.String,System.Byte[])\n  commentId: M:System.Data.SqlClient.SqlColumnEncryptionCngProvider.DecryptColumnEncryptionKey(System.String,System.String,System.Byte[])\n  id: DecryptColumnEncryptionKey(System.String,System.String,System.Byte[])\n  parent: System.Data.SqlClient.SqlColumnEncryptionCngProvider\n  langs:\n  - csharp\n  name: DecryptColumnEncryptionKey(String, String, Byte[])\n  nameWithType: SqlColumnEncryptionCngProvider.DecryptColumnEncryptionKey(String, String, Byte[])\n  fullName: SqlColumnEncryptionCngProvider.DecryptColumnEncryptionKey(String, String, Byte[])\n  type: Method\n  assemblies:\n  - System.Data\n  namespace: System.Data.SqlClient\n  summary: Decrypts the given encrypted value using an asymmetric key specified by the key path and the specified algorithm. The key path will be in the format of [ProviderName]/KeyIdentifier and should be an asymmetric key stored in the specified CNG key store provider. The valid algorithm used to encrypt/decrypt the CEK is 'RSA_OAEP'.\n  syntax:\n    content: public override byte[] DecryptColumnEncryptionKey (string masterKeyPath, string encryptionAlgorithm, byte[] encryptedColumnEncryptionKey);\n    parameters:\n    - id: masterKeyPath\n      type: System.String\n      description: The master key path.\n    - id: encryptionAlgorithm\n      type: System.String\n      description: The encryption algorithm.\n    - id: encryptedColumnEncryptionKey\n      type: System.Byte[]\n      description: The encrypted column encryption key.\n    return:\n      type: System.Byte[]\n      description: The decrypted column encryption key.\n  overload: System.Data.SqlClient.SqlColumnEncryptionCngProvider.DecryptColumnEncryptionKey*\n  exceptions: []\n  version:\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.7\n  monikers:\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Data.SqlClient/SqlColumnEncryptionCngProvider.xml\n  ms.technology:\n  - dotnet-ado\n  author: JennieHubbard\n  ms.author: jhubbard\n  manager: jhubbard\n- uid: System.Data.SqlClient.SqlColumnEncryptionCngProvider.EncryptColumnEncryptionKey(System.String,System.String,System.Byte[])\n  commentId: M:System.Data.SqlClient.SqlColumnEncryptionCngProvider.EncryptColumnEncryptionKey(System.String,System.String,System.Byte[])\n  id: EncryptColumnEncryptionKey(System.String,System.String,System.Byte[])\n  parent: System.Data.SqlClient.SqlColumnEncryptionCngProvider\n  langs:\n  - csharp\n  name: EncryptColumnEncryptionKey(String, String, Byte[])\n  nameWithType: SqlColumnEncryptionCngProvider.EncryptColumnEncryptionKey(String, String, Byte[])\n  fullName: SqlColumnEncryptionCngProvider.EncryptColumnEncryptionKey(String, String, Byte[])\n  type: Method\n  assemblies:\n  - System.Data\n  namespace: System.Data.SqlClient\n  summary: Encrypts the given plain text column encryption key using an asymmetric key specified by the key path and the specified algorithm. The key path will be in the format of [ProviderName]/KeyIdentifier and should be an asymmetric key stored in the specified CNG key store provider. The valid algorithm used to encrypt/decrypt the CEK is 'RSA_OAEP'.\n  syntax:\n    content: public override byte[] EncryptColumnEncryptionKey (string masterKeyPath, string encryptionAlgorithm, byte[] columnEncryptionKey);\n    parameters:\n    - id: masterKeyPath\n      type: System.String\n      description: The master key path.\n    - id: encryptionAlgorithm\n      type: System.String\n      description: The encryption algorithm.\n    - id: columnEncryptionKey\n      type: System.Byte[]\n      description: The encrypted column encryption key.\n    return:\n      type: System.Byte[]\n      description: The encrypted column encryption key.\n  overload: System.Data.SqlClient.SqlColumnEncryptionCngProvider.EncryptColumnEncryptionKey*\n  exceptions: []\n  version:\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.7\n  monikers:\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Data.SqlClient/SqlColumnEncryptionCngProvider.xml\n  ms.technology:\n  - dotnet-ado\n  author: JennieHubbard\n  ms.author: jhubbard\n  manager: jhubbard\n- uid: System.Data.SqlClient.SqlColumnEncryptionCngProvider.ProviderName\n  commentId: F:System.Data.SqlClient.SqlColumnEncryptionCngProvider.ProviderName\n  id: ProviderName\n  parent: System.Data.SqlClient.SqlColumnEncryptionCngProvider\n  langs:\n  - csharp\n  name: ProviderName\n  nameWithType: SqlColumnEncryptionCngProvider.ProviderName\n  fullName: SqlColumnEncryptionCngProvider.ProviderName\n  type: Field\n  assemblies:\n  - System.Data\n  namespace: System.Data.SqlClient\n  summary: A constant string for the provider name 'MSSQL_CNG_STORE'.\n  syntax:\n    content: public const string ProviderName;\n    return:\n      type: System.String\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.7\n  monikers:\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Data.SqlClient/SqlColumnEncryptionCngProvider.xml\n  ms.technology:\n  - dotnet-ado\n  author: JennieHubbard\n  ms.author: jhubbard\n  manager: jhubbard\nreferences:\n- uid: System.Data.SqlClient.SqlColumnEncryptionKeyStoreProvider\n  parent: System.Data.SqlClient\n  isExternal: false\n  name: SqlColumnEncryptionKeyStoreProvider\n  nameWithType: SqlColumnEncryptionKeyStoreProvider\n  fullName: System.Data.SqlClient.SqlColumnEncryptionKeyStoreProvider\n- uid: System.Data.SqlClient.SqlColumnEncryptionCngProvider.#ctor\n  parent: System.Data.SqlClient.SqlColumnEncryptionCngProvider\n  isExternal: false\n  name: SqlColumnEncryptionCngProvider()\n  nameWithType: SqlColumnEncryptionCngProvider.SqlColumnEncryptionCngProvider()\n  fullName: SqlColumnEncryptionCngProvider.SqlColumnEncryptionCngProvider()\n- uid: System.Data.SqlClient.SqlColumnEncryptionCngProvider.DecryptColumnEncryptionKey(System.String,System.String,System.Byte[])\n  parent: System.Data.SqlClient.SqlColumnEncryptionCngProvider\n  isExternal: false\n  name: DecryptColumnEncryptionKey(String, String, Byte[])\n  nameWithType: SqlColumnEncryptionCngProvider.DecryptColumnEncryptionKey(String, String, Byte[])\n  fullName: SqlColumnEncryptionCngProvider.DecryptColumnEncryptionKey(String, String, Byte[])\n- uid: System.Byte\n  name: Byte\n  nameWithType: Byte\n  fullName: System.Byte\n- uid: System.Byte[]\n  parent: System\n  isExternal: false\n  name: Byte[]\n  nameWithType: Byte[]\n  fullName: System.Byte[]\n  spec.csharp:\n  - uid: System.Byte\n    name: Byte\n    nameWithType: Byte\n    fullName: System.Byte\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Data.SqlClient.SqlColumnEncryptionCngProvider.EncryptColumnEncryptionKey(System.String,System.String,System.Byte[])\n  parent: System.Data.SqlClient.SqlColumnEncryptionCngProvider\n  isExternal: false\n  name: EncryptColumnEncryptionKey(String, String, Byte[])\n  nameWithType: SqlColumnEncryptionCngProvider.EncryptColumnEncryptionKey(String, String, Byte[])\n  fullName: SqlColumnEncryptionCngProvider.EncryptColumnEncryptionKey(String, String, Byte[])\n- uid: System.Data.SqlClient.SqlColumnEncryptionCngProvider.ProviderName\n  parent: System.Data.SqlClient.SqlColumnEncryptionCngProvider\n  isExternal: false\n  name: ProviderName\n  nameWithType: SqlColumnEncryptionCngProvider.ProviderName\n  fullName: SqlColumnEncryptionCngProvider.ProviderName\n- uid: System.Data.SqlClient.SqlColumnEncryptionCngProvider.#ctor*\n  parent: System.Data.SqlClient.SqlColumnEncryptionCngProvider\n  isExternal: false\n  name: SqlColumnEncryptionCngProvider\n  nameWithType: SqlColumnEncryptionCngProvider.SqlColumnEncryptionCngProvider\n  fullName: SqlColumnEncryptionCngProvider.SqlColumnEncryptionCngProvider\n  monikers:\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Data.SqlClient/SqlColumnEncryptionCngProvider.xml\n- uid: System.Data.SqlClient.SqlColumnEncryptionCngProvider.DecryptColumnEncryptionKey*\n  parent: System.Data.SqlClient.SqlColumnEncryptionCngProvider\n  isExternal: false\n  name: DecryptColumnEncryptionKey\n  nameWithType: SqlColumnEncryptionCngProvider.DecryptColumnEncryptionKey\n  fullName: SqlColumnEncryptionCngProvider.DecryptColumnEncryptionKey\n  monikers:\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Data.SqlClient/SqlColumnEncryptionCngProvider.xml\n- uid: System.Data.SqlClient.SqlColumnEncryptionCngProvider.EncryptColumnEncryptionKey*\n  parent: System.Data.SqlClient.SqlColumnEncryptionCngProvider\n  isExternal: false\n  name: EncryptColumnEncryptionKey\n  nameWithType: SqlColumnEncryptionCngProvider.EncryptColumnEncryptionKey\n  fullName: SqlColumnEncryptionCngProvider.EncryptColumnEncryptionKey\n  monikers:\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Data.SqlClient/SqlColumnEncryptionCngProvider.xml\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: Object.Equals(Object)\n  fullName: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: Object.GetHashCode()\n  fullName: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: false\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: false\n  name: ToString()\n  nameWithType: Object.ToString()\n  fullName: Object.ToString()\n"}