{"nodes":[{"content":"Represents an XML namespace. This class cannot be inherited.","nodes":[{"pos":[0,60],"content":"Represents an XML namespace. This class cannot be inherited.","nodes":[{"content":"Represents an XML namespace. This class cannot be inherited.","pos":[0,60],"nodes":[{"content":"Represents an XML namespace.","pos":[0,28]},{"content":"This class cannot be inherited.","pos":[29,60]}]}]}],"pos":[1139,1200],"yaml":true},{"content":"This class represents the XML construct of namespaces.  \n  \n Every <xref:System.Xml.Linq.XName> contains an <xref:System.Xml.Linq.XNamespace>. Even if an element is not in a namespace, the element's <xref:System.Xml.Linq.XName> still contains a namespace, <xref:System.Xml.Linq.XNamespace.None%2A?displayProperty=fullName>. The <xref:System.Xml.Linq.XName.Namespace%2A?displayProperty=fullName> property is guaranteed to not be `null`.  \n  \n## Creating an XNamespace Object  \n The most common way to create an <xref:System.Xml.Linq.XNamespace> object is to simply assign a string to it. You can then combine the namespace with a local name by using the override of the addition operator. The following example shows this idiom:  \n  \n```csharp  \n  \n                XNamespace aw = \"http://www.adventure-works.com\";  \nXElement root = new XElement(aw + \"Root\", \"Content\");  \nConsole.WriteLine(root);  \n```  \n  \n```vb  \n  \n                Dim aw As XNamespace = \"http://www.adventure-works.com\"  \nDim root As XElement = New XElement(aw + \"Root\", \"Content\")  \nConsole.WriteLine(root)  \n```  \n  \n However, in Visual Basic, you would typically declare a global default namespace, as follows:  \n  \n```vb  \n  \n                Imports <xmlns='http://www.adventure-works.com'>  \n  \nModule Module1  \n    Sub Main()  \n        Dim root As XElement = _  \n            <Root>Content</Root>  \n        Console.WriteLine(root)  \n    End Sub  \nEnd Module  \n```  \n  \n This example produces the following output:  \n  \n```xml  \n  \n<Root xmlns=\"http://www.adventure-works.com\">Content</Root>  \n```  \n  \n Assigning a string to an <xref:System.Xml.Linq.XNamespace> uses the implicit conversion from <xref:System.String>.  \n  \n See [How to: Create a Document with Namespaces (C#) (LINQ to XML)](http://msdn.microsoft.com/library/af4a595e-ffb2-4187-a61b-d5ed71642c4c) for more information and examples.  \n  \n See [Namespaces in Visual Basic (LINQ to XML)](http://msdn.microsoft.com/library/10b7ba7b-518c-4f14-899f-892575d14dcc) for more information on using namespaces in [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)].  \n  \n## Controlling Namespace Prefixes  \n If you create an attribute that declares a namespace, the prefix specified in the attribute will be persisted in the serialized XML. To create an attribute that declares a namespace with a prefix, you create an attribute where the namespace of the name of the attribute is <xref:System.Xml.Linq.XNamespace.Xmlns%2A>, and the name of the attribute is the namespace prefix. The value of the attribute is the URI of the namespace. The following example shows this idiom:  \n  \n```csharp  \n  \n                XNamespace aw = \"http://www.adventure-works.com\";  \nXElement root = new XElement(aw + \"Root\",  \n    new XAttribute(XNamespace.Xmlns + \"aw\", \"http://www.adventure-works.com\"),  \n    \"Content\");  \nConsole.WriteLine(root);  \n```  \n  \n```vb  \n  \n                Dim aw As XNamespace = \"http://www.adventure-works.com\"  \nDim root As XElement = New XElement(aw + \"Root\", _  \n    New XAttribute(XNamespace.Xmlns + \"aw\", \"http://www.adventure-works.com\"), _  \n    \"Content\")  \nConsole.WriteLine(root)  \n```  \n  \n In [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)], instead of creating a namespace node to control namespace prefixes, you would typically use a global namespace declaration:  \n  \n```vb  \n  \n                Imports <xmlns:aw='http://www.adventure-works.com'>  \n  \nModule Module1  \n    Sub Main()  \n        Dim root As XElement = _  \n            <aw:Root>Content</aw:Root>  \n        Console.WriteLine(root)  \n    End Sub  \nEnd Module  \n```  \n  \n This example produces the following output:  \n  \n```  \n<aw:Root xmlns:aw=\"http://www.adventure-works.com\">Content</aw:Root>  \n```  \n  \n For more information, see [How to: Control Namespace Prefixes (C#) (LINQ to XML)](http://msdn.microsoft.com/library/a40d4479-f1b9-4d8b-8623-445648caed28).  \n  \n## Creating a Default Namespace  \n When constructing an attribute that will be a namespace, if the attribute name has the special value of \"xmlns\", then when the XML tree is serialized, the namespace will be declared as the default namespace. The special attribute with the name of \"xmlns\" itself is not in any namespace. The value of the attribute is the namespace URI.  \n  \n The following example creates an XML tree that contains an attribute that is declared in such a way that the namespace will become the default namespace:  \n  \n```csharp  \n  \n                XNamespace aw = \"http://www.adventure-works.com\";  \nXElement root = new XElement(aw + \"Root\",  \n    new XAttribute(\"xmlns\", \"http://www.adventure-works.com\"),  \n    new XElement(aw + \"Child\", \"content\")  \n);  \nConsole.WriteLine(root);  \n```  \n  \n```vb  \n  \n                Dim aw As XNamespace = \"http://www.adventure-works.com\"  \nDim root As XElement = New XElement(aw + \"Root\", _  \n    New XAttribute(\"xmlns\", \"http://www.adventure-works.com\"), _  \n    New XElement(aw + \"Child\", \"content\") _  \n)  \nConsole.WriteLine(root)  \n```  \n  \n In [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)], instead of creating a namespace node to create a default namespace, you would typically use a global default namespace declaration:  \n  \n```vb  \n  \n                Imports <xmlns='http://www.adventure-works.com'>  \n  \nModule Module1  \n    Sub Main()  \n        Dim root As XElement = _  \n            <Root>  \n                <Child>content</Child>  \n            </Root>  \n        Console.WriteLine(root)  \n    End Sub  \nEnd Module  \n```  \n  \n This example produces the following output:  \n  \n```  \n<Root xmlns=\"http://www.adventure-works.com\">  \n  <Child>content</Child>  \n</Root>  \n```  \n  \n## XNamespace Atomization  \n <xref:System.Xml.Linq.XNamespace> objects are guaranteed to be atomized; that is, if two <xref:System.Xml.Linq.XNamespace> objects have exactly the same URI, they will share the same instance. The equality and comparison operators are provided explicitly for this purpose.  \n  \n## Using Expanded Names  \n Another way to specify a namespace and a local name is to use an expanded name in the form `{namespace}name`:  \n  \n```csharp  \nXElement e = new XElement(\"{http://www.adventure-works.com}Root\",  \n     new XAttribute(\"{http://www.adventure-works.com}Att\", \"content\")  \n);  \nConsole.WriteLine(e);  \n```  \n  \n```vb  \n  \n                Dim e As XElement = New XElement(\"{http://www.adventure-works.com}Root\", _  \n     New XAttribute(\"{http://www.adventure-works.com}Att\", \"content\") _  \n)  \nConsole.WriteLine(e)  \n```  \n  \n This example produces the following output:  \n  \n```  \n<Root p1:Att=\"content\" xmlns:p1=\"http://www.adventure-works.com\" xmlns=\"http://www.adventure-works.com\" />  \n```  \n  \n This approach has performance implications. Each time that you pass a string that contains an expanded name to [!INCLUDE[sqltecxlinq](~/includes/sqltecxlinq-md.md)], it must parse the name, find the atomized namespace, and find the atomized name. This process takes CPU time. If performance is important, you may want to use a different approach.  \n  \n With Visual Basic, the recommended approach is to use XML literals, which does not involve the use of expanded names.","nodes":[{"pos":[0,54],"content":"This class represents the XML construct of namespaces.","nodes":[{"content":"This class represents the XML construct of namespaces.","pos":[0,54]}]},{"pos":[61,435],"content":"Every <xref:System.Xml.Linq.XName> contains an <xref:System.Xml.Linq.XNamespace>. Even if an element is not in a namespace, the element's <xref:System.Xml.Linq.XName> still contains a namespace, <xref:System.Xml.Linq.XNamespace.None%2A?displayProperty=fullName>. The <xref:System.Xml.Linq.XName.Namespace%2A?displayProperty=fullName> property is guaranteed to not be `null`.","nodes":[{"content":"Every <ph id=\"ph1\">&lt;xref:System.Xml.Linq.XName&gt;</ph> contains an <ph id=\"ph2\">&lt;xref:System.Xml.Linq.XNamespace&gt;</ph>.","pos":[0,81],"source":"Every <xref:System.Xml.Linq.XName> contains an <xref:System.Xml.Linq.XNamespace>."},{"content":"Even if an element is not in a namespace, the element's <ph id=\"ph1\">&lt;xref:System.Xml.Linq.XName&gt;</ph> still contains a namespace, <ph id=\"ph2\">&lt;xref:System.Xml.Linq.XNamespace.None%2A?displayProperty=fullName&gt;</ph>.","pos":[82,262],"source":" Even if an element is not in a namespace, the element's <xref:System.Xml.Linq.XName> still contains a namespace, <xref:System.Xml.Linq.XNamespace.None%2A?displayProperty=fullName>."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Xml.Linq.XName.Namespace%2A?displayProperty=fullName&gt;</ph> property is guaranteed to not be <ph id=\"ph2\">`null`</ph>.","pos":[263,374],"source":" The <xref:System.Xml.Linq.XName.Namespace%2A?displayProperty=fullName> property is guaranteed to not be `null`."}]},{"pos":[444,473],"content":"Creating an XNamespace Object","linkify":"Creating an XNamespace Object","nodes":[{"content":"Creating an XNamespace Object","pos":[0,29]}]},{"pos":[477,727],"content":"The most common way to create an <xref:System.Xml.Linq.XNamespace> object is to simply assign a string to it. You can then combine the namespace with a local name by using the override of the addition operator. The following example shows this idiom:","nodes":[{"content":"The most common way to create an <xref:System.Xml.Linq.XNamespace> object is to simply assign a string to it. You can then combine the namespace with a local name by using the override of the addition operator. The following example shows this idiom:","pos":[0,250],"nodes":[{"content":"The most common way to create an <ph id=\"ph1\">&lt;xref:System.Xml.Linq.XNamespace&gt;</ph> object is to simply assign a string to it.","pos":[0,109],"source":"The most common way to create an <xref:System.Xml.Linq.XNamespace> object is to simply assign a string to it."},{"content":"You can then combine the namespace with a local name by using the override of the addition operator.","pos":[110,210]},{"content":"The following example shows this idiom:","pos":[211,250]}]}]},{"pos":[1091,1184],"content":"However, in Visual Basic, you would typically declare a global default namespace, as follows:","nodes":[{"content":"However, in Visual Basic, you would typically declare a global default namespace, as follows:","pos":[0,93]}]},{"pos":[1446,1489],"content":"This example produces the following output:","nodes":[{"content":"This example produces the following output:","pos":[0,43]}]},{"pos":[1579,1693],"content":"Assigning a string to an <xref:System.Xml.Linq.XNamespace> uses the implicit conversion from <xref:System.String>.","nodes":[{"content":"Assigning a string to an <ph id=\"ph1\">&lt;xref:System.Xml.Linq.XNamespace&gt;</ph> uses the implicit conversion from <ph id=\"ph2\">&lt;xref:System.String&gt;</ph>.","pos":[0,114],"source":"Assigning a string to an <xref:System.Xml.Linq.XNamespace> uses the implicit conversion from <xref:System.String>."}]},{"pos":[1700,1873],"content":"See <bpt id=\"p1\">[</bpt>How to: Create a Document with Namespaces (C#) (LINQ to XML)<ept id=\"p1\">](http://msdn.microsoft.com/library/af4a595e-ffb2-4187-a61b-d5ed71642c4c)</ept> for more information and examples.","source":"See [How to: Create a Document with Namespaces (C#) (LINQ to XML)](http://msdn.microsoft.com/library/af4a595e-ffb2-4187-a61b-d5ed71642c4c) for more information and examples."},{"pos":[1880,2087],"content":"See <bpt id=\"p1\">[</bpt>Namespaces in Visual Basic (LINQ to XML)<ept id=\"p1\">](http://msdn.microsoft.com/library/10b7ba7b-518c-4f14-899f-892575d14dcc)</ept> for more information on using namespaces in <ph id=\"ph1\">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.","source":"See [Namespaces in Visual Basic (LINQ to XML)](http://msdn.microsoft.com/library/10b7ba7b-518c-4f14-899f-892575d14dcc) for more information on using namespaces in [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]."},{"pos":[2096,2126],"content":"Controlling Namespace Prefixes","linkify":"Controlling Namespace Prefixes","nodes":[{"content":"Controlling Namespace Prefixes","pos":[0,30]}]},{"pos":[2130,2597],"content":"If you create an attribute that declares a namespace, the prefix specified in the attribute will be persisted in the serialized XML. To create an attribute that declares a namespace with a prefix, you create an attribute where the namespace of the name of the attribute is <xref:System.Xml.Linq.XNamespace.Xmlns%2A>, and the name of the attribute is the namespace prefix. The value of the attribute is the URI of the namespace. The following example shows this idiom:","nodes":[{"content":"If you create an attribute that declares a namespace, the prefix specified in the attribute will be persisted in the serialized XML. To create an attribute that declares a namespace with a prefix, you create an attribute where the namespace of the name of the attribute is <xref:System.Xml.Linq.XNamespace.Xmlns%2A>, and the name of the attribute is the namespace prefix. The value of the attribute is the URI of the namespace. The following example shows this idiom:","pos":[0,467],"nodes":[{"content":"If you create an attribute that declares a namespace, the prefix specified in the attribute will be persisted in the serialized XML.","pos":[0,132]},{"content":"To create an attribute that declares a namespace with a prefix, you create an attribute where the namespace of the name of the attribute is <ph id=\"ph1\">&lt;xref:System.Xml.Linq.XNamespace.Xmlns%2A&gt;</ph>, and the name of the attribute is the namespace prefix.","pos":[133,371],"source":" To create an attribute that declares a namespace with a prefix, you create an attribute where the namespace of the name of the attribute is <xref:System.Xml.Linq.XNamespace.Xmlns%2A>, and the name of the attribute is the namespace prefix."},{"content":"The value of the attribute is the URI of the namespace.","pos":[372,427]},{"content":"The following example shows this idiom:","pos":[428,467]}]}]},{"pos":[3139,3310],"content":"In <ph id=\"ph1\">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>, instead of creating a namespace node to control namespace prefixes, you would typically use a global namespace declaration:","source":"In [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)], instead of creating a namespace node to control namespace prefixes, you would typically use a global namespace declaration:"},{"pos":[3581,3624],"content":"This example produces the following output:","nodes":[{"content":"This example produces the following output:","pos":[0,43]}]},{"pos":[3717,3871],"content":"For more information, see <bpt id=\"p1\">[</bpt>How to: Control Namespace Prefixes (C#) (LINQ to XML)<ept id=\"p1\">](http://msdn.microsoft.com/library/a40d4479-f1b9-4d8b-8623-445648caed28)</ept>.","source":"For more information, see [How to: Control Namespace Prefixes (C#) (LINQ to XML)](http://msdn.microsoft.com/library/a40d4479-f1b9-4d8b-8623-445648caed28)."},{"pos":[3880,3908],"content":"Creating a Default Namespace","linkify":"Creating a Default Namespace","nodes":[{"content":"Creating a Default Namespace","pos":[0,28]}]},{"pos":[3912,4247],"content":"When constructing an attribute that will be a namespace, if the attribute name has the special value of \"xmlns\", then when the XML tree is serialized, the namespace will be declared as the default namespace. The special attribute with the name of \"xmlns\" itself is not in any namespace. The value of the attribute is the namespace URI.","nodes":[{"content":"When constructing an attribute that will be a namespace, if the attribute name has the special value of \"xmlns\", then when the XML tree is serialized, the namespace will be declared as the default namespace. The special attribute with the name of \"xmlns\" itself is not in any namespace. The value of the attribute is the namespace URI.","pos":[0,335],"nodes":[{"content":"When constructing an attribute that will be a namespace, if the attribute name has the special value of \"xmlns\", then when the XML tree is serialized, the namespace will be declared as the default namespace.","pos":[0,207]},{"content":"The special attribute with the name of \"xmlns\" itself is not in any namespace.","pos":[208,286]},{"content":"The value of the attribute is the namespace URI.","pos":[287,335]}]}]},{"pos":[4254,4407],"content":"The following example creates an XML tree that contains an attribute that is declared in such a way that the namespace will become the default namespace:","nodes":[{"content":"The following example creates an XML tree that contains an attribute that is declared in such a way that the namespace will become the default namespace:","pos":[0,153]}]},{"pos":[4981,5160],"content":"In <ph id=\"ph1\">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>, instead of creating a namespace node to create a default namespace, you would typically use a global default namespace declaration:","source":"In [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)], instead of creating a namespace node to create a default namespace, you would typically use a global default namespace declaration:"},{"pos":[5471,5514],"content":"This example produces the following output:","nodes":[{"content":"This example produces the following output:","pos":[0,43]}]},{"pos":[5623,5645],"content":"XNamespace Atomization","linkify":"XNamespace Atomization","nodes":[{"content":"XNamespace Atomization","pos":[0,22]}]},{"pos":[5649,5921],"content":"<xref:System.Xml.Linq.XNamespace> objects are guaranteed to be atomized; that is, if two <xref:System.Xml.Linq.XNamespace> objects have exactly the same URI, they will share the same instance. The equality and comparison operators are provided explicitly for this purpose.","nodes":[{"content":"<xref:System.Xml.Linq.XNamespace> objects are guaranteed to be atomized; that is, if two <xref:System.Xml.Linq.XNamespace> objects have exactly the same URI, they will share the same instance. The equality and comparison operators are provided explicitly for this purpose.","pos":[0,272],"nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Xml.Linq.XNamespace&gt;</ph> objects are guaranteed to be atomized; that is, if two <ph id=\"ph2\">&lt;xref:System.Xml.Linq.XNamespace&gt;</ph> objects have exactly the same URI, they will share the same instance.","pos":[0,192],"source":"<xref:System.Xml.Linq.XNamespace> objects are guaranteed to be atomized; that is, if two <xref:System.Xml.Linq.XNamespace> objects have exactly the same URI, they will share the same instance."},{"content":"The equality and comparison operators are provided explicitly for this purpose.","pos":[193,272]}]}]},{"pos":[5930,5950],"content":"Using Expanded Names","linkify":"Using Expanded Names","nodes":[{"content":"Using Expanded Names","pos":[0,20]}]},{"pos":[5954,6063],"content":"Another way to specify a namespace and a local name is to use an expanded name in the form <ph id=\"ph1\">`{namespace}name`</ph>:","source":"Another way to specify a namespace and a local name is to use an expanded name in the form `{namespace}name`:"},{"pos":[6474,6517],"content":"This example produces the following output:","nodes":[{"content":"This example produces the following output:","pos":[0,43]}]},{"pos":[6648,6994],"content":"This approach has performance implications. Each time that you pass a string that contains an expanded name to [!INCLUDE[sqltecxlinq](~/includes/sqltecxlinq-md.md)], it must parse the name, find the atomized namespace, and find the atomized name. This process takes CPU time. If performance is important, you may want to use a different approach.","nodes":[{"content":"This approach has performance implications.","pos":[0,43]},{"content":"Each time that you pass a string that contains an expanded name to <ph id=\"ph1\">[!INCLUDE[sqltecxlinq](~/includes/sqltecxlinq-md.md)]</ph>, it must parse the name, find the atomized namespace, and find the atomized name.","pos":[44,246],"source":" Each time that you pass a string that contains an expanded name to [!INCLUDE[sqltecxlinq](~/includes/sqltecxlinq-md.md)], it must parse the name, find the atomized namespace, and find the atomized name."},{"content":"This process takes CPU time.","pos":[247,275]},{"content":"If performance is important, you may want to use a different approach.","pos":[276,346]}]},{"pos":[7001,7118],"content":"With Visual Basic, the recommended approach is to use XML literals, which does not involve the use of expanded names.","nodes":[{"content":"With Visual Basic, the recommended approach is to use XML literals, which does not involve the use of expanded names.","pos":[0,117]}]}],"pos":[1211,8588],"yaml":true,"extradata":"MT"},{"content":"Determines whether the specified <xref href=\"System.Xml.Linq.XNamespace\"></xref> is equal to the current <xref href=\"System.Xml.Linq.XNamespace\"></xref>.","nodes":[{"pos":[0,153],"content":"Determines whether the specified <ph id=\"ph1\">&lt;xref href=\"System.Xml.Linq.XNamespace\"&gt;&lt;/xref&gt;</ph> is equal to the current <ph id=\"ph2\">&lt;xref href=\"System.Xml.Linq.XNamespace\"&gt;&lt;/xref&gt;</ph>.","source":"Determines whether the specified <xref href=\"System.Xml.Linq.XNamespace\"></xref> is equal to the current <xref href=\"System.Xml.Linq.XNamespace\"></xref>."}],"pos":[10351,10505],"yaml":true},{"content":"For two <xref:System.Xml.Linq.XNamespace> objects to be equal, they must have the same URI.","nodes":[{"pos":[0,91],"content":"For two <xref:System.Xml.Linq.XNamespace> objects to be equal, they must have the same URI.","nodes":[{"content":"For two <ph id=\"ph1\">&lt;xref:System.Xml.Linq.XNamespace&gt;</ph> objects to be equal, they must have the same URI.","pos":[0,91],"source":"For two <xref:System.Xml.Linq.XNamespace> objects to be equal, they must have the same URI."}]}],"pos":[10516,10608],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Xml.Linq.XNamespace\"></xref> to compare to the current <xref href=\"System.Xml.Linq.XNamespace\"></xref>.","nodes":[{"pos":[0,126],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Xml.Linq.XNamespace\"&gt;&lt;/xref&gt;</ph> to compare to the current <ph id=\"ph2\">&lt;xref href=\"System.Xml.Linq.XNamespace\"&gt;&lt;/xref&gt;</ph>.","source":"The <xref href=\"System.Xml.Linq.XNamespace\"></xref> to compare to the current <xref href=\"System.Xml.Linq.XNamespace\"></xref>."}],"pos":[11333,11460],"yaml":true},{"content":"A <xref href=\"System.Boolean\"></xref> that indicates whether the specified <xref href=\"System.Xml.Linq.XNamespace\"></xref> is equal to the current <xref href=\"System.Xml.Linq.XNamespace\"></xref>.","nodes":[{"pos":[0,195],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Boolean\"&gt;&lt;/xref&gt;</ph> that indicates whether the specified <ph id=\"ph2\">&lt;xref href=\"System.Xml.Linq.XNamespace\"&gt;&lt;/xref&gt;</ph> is equal to the current <ph id=\"ph3\">&lt;xref href=\"System.Xml.Linq.XNamespace\"&gt;&lt;/xref&gt;</ph>.","source":"A <xref href=\"System.Boolean\"></xref> that indicates whether the specified <xref href=\"System.Xml.Linq.XNamespace\"></xref> is equal to the current <xref href=\"System.Xml.Linq.XNamespace\"></xref>."}],"pos":[11518,11714],"yaml":true},{"content":"Gets an <xref href=\"System.Xml.Linq.XNamespace\"></xref> for the specified Uniform Resource Identifier (URI).","nodes":[{"pos":[0,108],"content":"Gets an <ph id=\"ph1\">&lt;xref href=\"System.Xml.Linq.XNamespace\"&gt;&lt;/xref&gt;</ph> for the specified Uniform Resource Identifier (URI).","source":"Gets an <xref href=\"System.Xml.Linq.XNamespace\"></xref> for the specified Uniform Resource Identifier (URI)."}],"pos":[13222,13331],"yaml":true},{"content":"The returned <xref:System.Xml.Linq.XNamespace> object is guaranteed to be atomic (that is, it is the only one in the system for that particular URI).","nodes":[{"pos":[0,149],"content":"The returned <xref:System.Xml.Linq.XNamespace> object is guaranteed to be atomic (that is, it is the only one in the system for that particular URI).","nodes":[{"content":"The returned <ph id=\"ph1\">&lt;xref:System.Xml.Linq.XNamespace&gt;</ph> object is guaranteed to be atomic (that is, it is the only one in the system for that particular URI).","pos":[0,149],"source":"The returned <xref:System.Xml.Linq.XNamespace> object is guaranteed to be atomic (that is, it is the only one in the system for that particular URI)."}]}],"pos":[13342,13492],"yaml":true,"extradata":"MT"},{"content":"A <xref href=\"System.String\"></xref> that contains a namespace URI.","nodes":[{"pos":[0,67],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.String\"&gt;&lt;/xref&gt;</ph> that contains a namespace URI.","source":"A <xref href=\"System.String\"></xref> that contains a namespace URI."}],"pos":[14589,14657],"yaml":true},{"content":"An <xref href=\"System.Xml.Linq.XNamespace\"></xref> created from the specified URI.","nodes":[{"pos":[0,82],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Xml.Linq.XNamespace\"&gt;&lt;/xref&gt;</ph> created from the specified URI.","source":"An <xref href=\"System.Xml.Linq.XNamespace\"></xref> created from the specified URI."}],"pos":[14727,14810],"yaml":true},{"content":"Gets a hash code for this <xref href=\"System.Xml.Linq.XNamespace\"></xref>.","nodes":[{"pos":[0,74],"content":"Gets a hash code for this <ph id=\"ph1\">&lt;xref href=\"System.Xml.Linq.XNamespace\"&gt;&lt;/xref&gt;</ph>.","source":"Gets a hash code for this <xref href=\"System.Xml.Linq.XNamespace\"></xref>."}],"pos":[16300,16375],"yaml":true},{"content":"This method serves as a hash function for <xref:System.Xml.Linq.XNamespace>. You can use <xref:System.Xml.Linq.XNamespace.GetHashCode%2A> in hashing algorithms and data structures like a hash table.","nodes":[{"pos":[0,198],"content":"This method serves as a hash function for <xref:System.Xml.Linq.XNamespace>. You can use <xref:System.Xml.Linq.XNamespace.GetHashCode%2A> in hashing algorithms and data structures like a hash table.","nodes":[{"content":"This method serves as a hash function for <xref:System.Xml.Linq.XNamespace>. You can use <xref:System.Xml.Linq.XNamespace.GetHashCode%2A> in hashing algorithms and data structures like a hash table.","pos":[0,198],"nodes":[{"content":"This method serves as a hash function for <ph id=\"ph1\">&lt;xref:System.Xml.Linq.XNamespace&gt;</ph>.","pos":[0,76],"source":"This method serves as a hash function for <xref:System.Xml.Linq.XNamespace>."},{"content":"You can use <ph id=\"ph1\">&lt;xref:System.Xml.Linq.XNamespace.GetHashCode%2A&gt;</ph> in hashing algorithms and data structures like a hash table.","pos":[77,198],"source":" You can use <xref:System.Xml.Linq.XNamespace.GetHashCode%2A> in hashing algorithms and data structures like a hash table."}]}]}],"pos":[16386,16585],"yaml":true,"extradata":"MT"},{"content":"An <xref href=\"System.Int32\"></xref> that contains the hash code for the <xref href=\"System.Xml.Linq.XNamespace\"></xref>.","nodes":[{"pos":[0,121],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Int32\"&gt;&lt;/xref&gt;</ph> that contains the hash code for the <ph id=\"ph2\">&lt;xref href=\"System.Xml.Linq.XNamespace\"&gt;&lt;/xref&gt;</ph>.","source":"An <xref href=\"System.Int32\"></xref> that contains the hash code for the <xref href=\"System.Xml.Linq.XNamespace\"></xref>."}],"pos":[16719,16841],"yaml":true},{"content":"Returns an <xref href=\"System.Xml.Linq.XName\"></xref> object created from this <xref href=\"System.Xml.Linq.XNamespace\"></xref> and the specified local name.","nodes":[{"pos":[0,156],"content":"Returns an <ph id=\"ph1\">&lt;xref href=\"System.Xml.Linq.XName\"&gt;&lt;/xref&gt;</ph> object created from this <ph id=\"ph2\">&lt;xref href=\"System.Xml.Linq.XNamespace\"&gt;&lt;/xref&gt;</ph> and the specified local name.","source":"Returns an <xref href=\"System.Xml.Linq.XName\"></xref> object created from this <xref href=\"System.Xml.Linq.XNamespace\"></xref> and the specified local name."}],"pos":[18378,18535],"yaml":true},{"content":"The returned <xref:System.Xml.Linq.XName> object is guaranteed to be atomic (that is, it is the only one in the system for a specific expanded name).","nodes":[{"pos":[0,149],"content":"The returned <xref:System.Xml.Linq.XName> object is guaranteed to be atomic (that is, it is the only one in the system for a specific expanded name).","nodes":[{"content":"The returned <ph id=\"ph1\">&lt;xref:System.Xml.Linq.XName&gt;</ph> object is guaranteed to be atomic (that is, it is the only one in the system for a specific expanded name).","pos":[0,149],"source":"The returned <xref:System.Xml.Linq.XName> object is guaranteed to be atomic (that is, it is the only one in the system for a specific expanded name)."}]}],"pos":[18546,18696],"yaml":true,"extradata":"MT"},{"content":"A <xref href=\"System.String\"></xref> that contains a local name.","nodes":[{"pos":[0,64],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.String\"&gt;&lt;/xref&gt;</ph> that contains a local name.","source":"A <xref href=\"System.String\"></xref> that contains a local name."}],"pos":[19560,19625],"yaml":true},{"content":"An <xref href=\"System.Xml.Linq.XName\"></xref> created from this <xref href=\"System.Xml.Linq.XNamespace\"></xref> and the specified local name.","nodes":[{"pos":[0,141],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Xml.Linq.XName\"&gt;&lt;/xref&gt;</ph> created from this <ph id=\"ph2\">&lt;xref href=\"System.Xml.Linq.XNamespace\"&gt;&lt;/xref&gt;</ph> and the specified local name.","source":"An <xref href=\"System.Xml.Linq.XName\"></xref> created from this <xref href=\"System.Xml.Linq.XNamespace\"></xref> and the specified local name."}],"pos":[19690,19832],"yaml":true},{"content":"Gets the Uniform Resource Identifier (URI) of this namespace.","nodes":[{"pos":[0,61],"content":"Gets the Uniform Resource Identifier (URI) of this namespace.","nodes":[{"content":"Gets the Uniform Resource Identifier (URI) of this namespace.","pos":[0,61]}]}],"pos":[21334,21396],"yaml":true},{"content":"A <xref href=\"System.String\"></xref> that contains the URI of the namespace.","nodes":[{"pos":[0,76],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.String\"&gt;&lt;/xref&gt;</ph> that contains the URI of the namespace.","source":"A <xref href=\"System.String\"></xref> that contains the URI of the namespace."}],"pos":[22263,22340],"yaml":true},{"content":"Gets the <xref href=\"System.Xml.Linq.XNamespace\"></xref> object that corresponds to no namespace.","nodes":[{"pos":[0,97],"content":"Gets the <ph id=\"ph1\">&lt;xref href=\"System.Xml.Linq.XNamespace\"&gt;&lt;/xref&gt;</ph> object that corresponds to no namespace.","source":"Gets the <xref href=\"System.Xml.Linq.XNamespace\"></xref> object that corresponds to no namespace."}],"pos":[23794,23892],"yaml":true},{"content":"If an element or attribute is in no namespace, its namespace will be set to the namespace returned by this property.","nodes":[{"pos":[0,116],"content":"If an element or attribute is in no namespace, its namespace will be set to the namespace returned by this property.","nodes":[{"content":"If an element or attribute is in no namespace, its namespace will be set to the namespace returned by this property.","pos":[0,116]}]}],"pos":[23903,24020],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Xml.Linq.XNamespace\"></xref> that corresponds to no namespace.","nodes":[{"pos":[0,85],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Xml.Linq.XNamespace\"&gt;&lt;/xref&gt;</ph> that corresponds to no namespace.","source":"The <xref href=\"System.Xml.Linq.XNamespace\"></xref> that corresponds to no namespace."}],"pos":[26697,26783],"yaml":true},{"content":"Combines an <xref href=\"System.Xml.Linq.XNamespace\"></xref> object with a local name to create an <xref href=\"System.Xml.Linq.XName\"></xref>.","nodes":[{"pos":[0,141],"content":"Combines an <ph id=\"ph1\">&lt;xref href=\"System.Xml.Linq.XNamespace\"&gt;&lt;/xref&gt;</ph> object with a local name to create an <ph id=\"ph2\">&lt;xref href=\"System.Xml.Linq.XName\"&gt;&lt;/xref&gt;</ph>.","source":"Combines an <xref href=\"System.Xml.Linq.XNamespace\"></xref> object with a local name to create an <xref href=\"System.Xml.Linq.XName\"></xref>."}],"pos":[28456,28598],"yaml":true},{"content":"This operator enables the common idiom of combining a namespace and a local name in the construction of an element or attribute. This idiom provides some of the benefits of having namespace prefixes, in that you can refer to a namespace using a variable that is short. This eliminates syntactic noise in the code that creates XML trees.  \n  \n The equivalent method for this operator is ?qualifyHint=True&autoUpgrade=False","nodes":[{"pos":[0,336],"content":"This operator enables the common idiom of combining a namespace and a local name in the construction of an element or attribute. This idiom provides some of the benefits of having namespace prefixes, in that you can refer to a namespace using a variable that is short. This eliminates syntactic noise in the code that creates XML trees.","nodes":[{"content":"This operator enables the common idiom of combining a namespace and a local name in the construction of an element or attribute. This idiom provides some of the benefits of having namespace prefixes, in that you can refer to a namespace using a variable that is short. This eliminates syntactic noise in the code that creates XML trees.","pos":[0,336],"nodes":[{"content":"This operator enables the common idiom of combining a namespace and a local name in the construction of an element or attribute.","pos":[0,128]},{"content":"This idiom provides some of the benefits of having namespace prefixes, in that you can refer to a namespace using a variable that is short.","pos":[129,268]},{"content":"This eliminates syntactic noise in the code that creates XML trees.","pos":[269,336]}]}]},{"pos":[343,421],"content":"The equivalent method for this operator is ?qualifyHint=True&autoUpgrade=False","nodes":[{"content":"The equivalent method for this operator is ?qualifyHint=True&amp;autoUpgrade=False","pos":[0,78],"source":"The equivalent method for this operator is ?qualifyHint=True&autoUpgrade=False"}]}],"pos":[28609,29035],"yaml":true,"extradata":"MT"},{"content":"An <xref href=\"System.Xml.Linq.XNamespace\"></xref> that contains the namespace.","nodes":[{"pos":[0,79],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Xml.Linq.XNamespace\"&gt;&lt;/xref&gt;</ph> that contains the namespace.","source":"An <xref href=\"System.Xml.Linq.XNamespace\"></xref> that contains the namespace."}],"pos":[30422,30502],"yaml":true},{"content":"A <xref href=\"System.String\"></xref> that contains the local name.","nodes":[{"pos":[0,66],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.String\"&gt;&lt;/xref&gt;</ph> that contains the local name.","source":"A <xref href=\"System.String\"></xref> that contains the local name."}],"pos":[30567,30634],"yaml":true},{"content":"The new <xref href=\"System.Xml.Linq.XName\"></xref> constructed from the namespace and local name.","nodes":[{"pos":[0,97],"content":"The new <ph id=\"ph1\">&lt;xref href=\"System.Xml.Linq.XName\"&gt;&lt;/xref&gt;</ph> constructed from the namespace and local name.","source":"The new <xref href=\"System.Xml.Linq.XName\"></xref> constructed from the namespace and local name."}],"pos":[30699,30797],"yaml":true},{"content":"Returns a value indicating whether two instances of <xref href=\"System.Xml.Linq.XNamespace\"></xref> are equal.","nodes":[{"pos":[0,110],"content":"Returns a value indicating whether two instances of <ph id=\"ph1\">&lt;xref href=\"System.Xml.Linq.XNamespace\"&gt;&lt;/xref&gt;</ph> are equal.","source":"Returns a value indicating whether two instances of <xref href=\"System.Xml.Linq.XNamespace\"></xref> are equal."}],"pos":[32528,32639],"yaml":true},{"content":"The operator overloads `==` and `!=` are provided to enable comparisons between <xref:System.Xml.Linq.XNamespace> and string (for example, `element.Name.Namespace == \"http://www.adventure-works.com\"`). The predefined reference equality operators in C# require one operand to be convertible to the type of the other through reference conversions only, and do not consider the implicit conversion from string to <xref:System.Xml.Linq.XNamespace>.  \n  \n The equivalent method for this operator is ?qualifyHint=True&autoUpgrade=False","nodes":[{"pos":[0,444],"content":"The operator overloads `==` and `!=` are provided to enable comparisons between <xref:System.Xml.Linq.XNamespace> and string (for example, `element.Name.Namespace == \"http://www.adventure-works.com\"`). The predefined reference equality operators in C# require one operand to be convertible to the type of the other through reference conversions only, and do not consider the implicit conversion from string to <xref:System.Xml.Linq.XNamespace>.","nodes":[{"content":"The operator overloads <ph id=\"ph1\">`==`</ph> and <ph id=\"ph2\">`!=`</ph> are provided to enable comparisons between <ph id=\"ph3\">&lt;xref:System.Xml.Linq.XNamespace&gt;</ph> and string (for example, <ph id=\"ph4\">`element.Name.Namespace == \"http://www.adventure-works.com\"`</ph>).","pos":[0,201],"source":"The operator overloads `==` and `!=` are provided to enable comparisons between <xref:System.Xml.Linq.XNamespace> and string (for example, `element.Name.Namespace == \"http://www.adventure-works.com\"`)."},{"content":"The predefined reference equality operators in C# require one operand to be convertible to the type of the other through reference conversions only, and do not consider the implicit conversion from string to <ph id=\"ph1\">&lt;xref:System.Xml.Linq.XNamespace&gt;</ph>.","pos":[202,444],"source":" The predefined reference equality operators in C# require one operand to be convertible to the type of the other through reference conversions only, and do not consider the implicit conversion from string to <xref:System.Xml.Linq.XNamespace>."}]},{"pos":[451,529],"content":"The equivalent method for this operator is ?qualifyHint=True&autoUpgrade=False","nodes":[{"content":"The equivalent method for this operator is ?qualifyHint=True&amp;autoUpgrade=False","pos":[0,78],"source":"The equivalent method for this operator is ?qualifyHint=True&autoUpgrade=False"}]}],"pos":[32650,33186],"yaml":true,"extradata":"MT"},{"content":"The first <xref href=\"System.Xml.Linq.XNamespace\"></xref> to compare.","nodes":[{"pos":[0,69],"content":"The first <ph id=\"ph1\">&lt;xref href=\"System.Xml.Linq.XNamespace\"&gt;&lt;/xref&gt;</ph> to compare.","source":"The first <xref href=\"System.Xml.Linq.XNamespace\"></xref> to compare."}],"pos":[34038,34108],"yaml":true},{"content":"The second <xref href=\"System.Xml.Linq.XNamespace\"></xref> to compare.","nodes":[{"pos":[0,70],"content":"The second <ph id=\"ph1\">&lt;xref href=\"System.Xml.Linq.XNamespace\"&gt;&lt;/xref&gt;</ph> to compare.","source":"The second <xref href=\"System.Xml.Linq.XNamespace\"></xref> to compare."}],"pos":[34182,34253],"yaml":true},{"content":"A <xref href=\"System.Boolean\"></xref> that indicates whether <code>left</code> and <code>right</code> are equal.","nodes":[{"pos":[0,112],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Boolean\"&gt;&lt;/xref&gt;</ph> that indicates whether <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">left</ph><ept id=\"p1\">&lt;/code&gt;</ept> and <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph3\">right</ph><ept id=\"p2\">&lt;/code&gt;</ept> are equal.","source":"A <xref href=\"System.Boolean\"></xref> that indicates whether <code>left</code> and <code>right</code> are equal."}],"pos":[34311,34424],"yaml":true},{"content":"Returns a value indicating whether two instances of <xref href=\"System.Xml.Linq.XNamespace\"></xref> are not equal.","nodes":[{"pos":[0,114],"content":"Returns a value indicating whether two instances of <ph id=\"ph1\">&lt;xref href=\"System.Xml.Linq.XNamespace\"&gt;&lt;/xref&gt;</ph> are not equal.","source":"Returns a value indicating whether two instances of <xref href=\"System.Xml.Linq.XNamespace\"></xref> are not equal."}],"pos":[38113,38228],"yaml":true},{"content":"The operator overloads `==` and `!=` are provided to enable comparisons between <xref:System.Xml.Linq.XNamespace> and string (for example, `element.Name.Namespace == \"http://www.adventure-works.com\"`). The predefined reference equality operators in C# require one operand to be convertible to the type of the other through reference conversions only, and do not consider the implicit conversion from string to <xref:System.Xml.Linq.XNamespace>.  \n  \n The equivalent method for this operator is ?qualifyHint=True&autoUpgrade=False","nodes":[{"pos":[0,444],"content":"The operator overloads `==` and `!=` are provided to enable comparisons between <xref:System.Xml.Linq.XNamespace> and string (for example, `element.Name.Namespace == \"http://www.adventure-works.com\"`). The predefined reference equality operators in C# require one operand to be convertible to the type of the other through reference conversions only, and do not consider the implicit conversion from string to <xref:System.Xml.Linq.XNamespace>.","nodes":[{"content":"The operator overloads <ph id=\"ph1\">`==`</ph> and <ph id=\"ph2\">`!=`</ph> are provided to enable comparisons between <ph id=\"ph3\">&lt;xref:System.Xml.Linq.XNamespace&gt;</ph> and string (for example, <ph id=\"ph4\">`element.Name.Namespace == \"http://www.adventure-works.com\"`</ph>).","pos":[0,201],"source":"The operator overloads `==` and `!=` are provided to enable comparisons between <xref:System.Xml.Linq.XNamespace> and string (for example, `element.Name.Namespace == \"http://www.adventure-works.com\"`)."},{"content":"The predefined reference equality operators in C# require one operand to be convertible to the type of the other through reference conversions only, and do not consider the implicit conversion from string to <ph id=\"ph1\">&lt;xref:System.Xml.Linq.XNamespace&gt;</ph>.","pos":[202,444],"source":" The predefined reference equality operators in C# require one operand to be convertible to the type of the other through reference conversions only, and do not consider the implicit conversion from string to <xref:System.Xml.Linq.XNamespace>."}]},{"pos":[451,529],"content":"The equivalent method for this operator is ?qualifyHint=True&autoUpgrade=False","nodes":[{"content":"The equivalent method for this operator is ?qualifyHint=True&amp;autoUpgrade=False","pos":[0,78],"source":"The equivalent method for this operator is ?qualifyHint=True&autoUpgrade=False"}]}],"pos":[38239,38775],"yaml":true,"extradata":"MT"},{"content":"The first <xref href=\"System.Xml.Linq.XNamespace\"></xref> to compare.","nodes":[{"pos":[0,69],"content":"The first <ph id=\"ph1\">&lt;xref href=\"System.Xml.Linq.XNamespace\"&gt;&lt;/xref&gt;</ph> to compare.","source":"The first <xref href=\"System.Xml.Linq.XNamespace\"></xref> to compare."}],"pos":[39627,39697],"yaml":true},{"content":"The second <xref href=\"System.Xml.Linq.XNamespace\"></xref> to compare.","nodes":[{"pos":[0,70],"content":"The second <ph id=\"ph1\">&lt;xref href=\"System.Xml.Linq.XNamespace\"&gt;&lt;/xref&gt;</ph> to compare.","source":"The second <xref href=\"System.Xml.Linq.XNamespace\"></xref> to compare."}],"pos":[39771,39842],"yaml":true},{"content":"A <xref href=\"System.Boolean\"></xref> that indicates whether <code>left</code> and <code>right</code> are not equal.","nodes":[{"pos":[0,116],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Boolean\"&gt;&lt;/xref&gt;</ph> that indicates whether <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">left</ph><ept id=\"p1\">&lt;/code&gt;</ept> and <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph3\">right</ph><ept id=\"p2\">&lt;/code&gt;</ept> are not equal.","source":"A <xref href=\"System.Boolean\"></xref> that indicates whether <code>left</code> and <code>right</code> are not equal."}],"pos":[39900,40017],"yaml":true},{"content":"Returns the URI of this <xref href=\"System.Xml.Linq.XNamespace\"></xref>.","nodes":[{"pos":[0,72],"content":"Returns the URI of this <ph id=\"ph1\">&lt;xref href=\"System.Xml.Linq.XNamespace\"&gt;&lt;/xref&gt;</ph>.","source":"Returns the URI of this <xref href=\"System.Xml.Linq.XNamespace\"></xref>."}],"pos":[41499,41572],"yaml":true},{"content":"The URI of this <xref href=\"System.Xml.Linq.XNamespace\"></xref>.","nodes":[{"pos":[0,64],"content":"The URI of this <ph id=\"ph1\">&lt;xref href=\"System.Xml.Linq.XNamespace\"&gt;&lt;/xref&gt;</ph>.","source":"The URI of this <xref href=\"System.Xml.Linq.XNamespace\"></xref>."}],"pos":[42320,42385],"yaml":true},{"content":"Gets the <xref href=\"System.Xml.Linq.XNamespace\"></xref> object that corresponds to the XML URI (<code>http://www.w3.org/XML/1998/namespace</code>).","nodes":[{"pos":[0,148],"content":"Gets the <ph id=\"ph1\">&lt;xref href=\"System.Xml.Linq.XNamespace\"&gt;&lt;/xref&gt;</ph> object that corresponds to the XML URI (<bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">http://www.w3.org/XML/1998/namespace</ph><ept id=\"p1\">&lt;/code&gt;</ept>).","source":"Gets the <xref href=\"System.Xml.Linq.XNamespace\"></xref> object that corresponds to the XML URI (<code>http://www.w3.org/XML/1998/namespace</code>)."}],"pos":[43828,43977],"yaml":true},{"content":"Certain standardized attributes, such as `space`, are in the `http://www.w3.org/XML/1998/namespace` namespace. The W3C standard specifies that this namespace does not have to be declared as an attribute in the XML tree. It is a reserved namespace that is always automatically available in the XML parser.","nodes":[{"pos":[0,304],"content":"Certain standardized attributes, such as `space`, are in the `http://www.w3.org/XML/1998/namespace` namespace. The W3C standard specifies that this namespace does not have to be declared as an attribute in the XML tree. It is a reserved namespace that is always automatically available in the XML parser.","nodes":[{"content":"Certain standardized attributes, such as <ph id=\"ph1\">`space`</ph>, are in the <ph id=\"ph2\">`http://www.w3.org/XML/1998/namespace`</ph> namespace.","pos":[0,110],"source":"Certain standardized attributes, such as `space`, are in the `http://www.w3.org/XML/1998/namespace` namespace."},{"content":"The W3C standard specifies that this namespace does not have to be declared as an attribute in the XML tree.","pos":[111,219]},{"content":"It is a reserved namespace that is always automatically available in the XML parser.","pos":[220,304]}]}],"pos":[43988,44293],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Xml.Linq.XNamespace\"></xref> that corresponds to the XML URI (<code>http://www.w3.org/XML/1998/namespace</code>).","nodes":[{"pos":[0,136],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Xml.Linq.XNamespace\"&gt;&lt;/xref&gt;</ph> that corresponds to the XML URI (<bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">http://www.w3.org/XML/1998/namespace</ph><ept id=\"p1\">&lt;/code&gt;</ept>).","source":"The <xref href=\"System.Xml.Linq.XNamespace\"></xref> that corresponds to the XML URI (<code>http://www.w3.org/XML/1998/namespace</code>)."}],"pos":[45105,45242],"yaml":true},{"content":"Gets the <xref href=\"System.Xml.Linq.XNamespace\"></xref> object that corresponds to the xmlns URI (<code>http://www.w3.org/2000/xmlns/</code>).","nodes":[{"pos":[0,143],"content":"Gets the <ph id=\"ph1\">&lt;xref href=\"System.Xml.Linq.XNamespace\"&gt;&lt;/xref&gt;</ph> object that corresponds to the xmlns URI (<bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">http://www.w3.org/2000/xmlns/</ph><ept id=\"p1\">&lt;/code&gt;</ept>).","source":"Gets the <xref href=\"System.Xml.Linq.XNamespace\"></xref> object that corresponds to the xmlns URI (<code>http://www.w3.org/2000/xmlns/</code>)."}],"pos":[46692,46836],"yaml":true},{"content":"When you declare namespaces, the namespace attributes themselves are in the **xmlns** namespace. The W3C standard specifies that this namespace does not have to be declared as an attribute in the XML tree. It is a reserved namespace that is always automatically available in the XML parser.","nodes":[{"pos":[0,290],"content":"When you declare namespaces, the namespace attributes themselves are in the **xmlns** namespace. The W3C standard specifies that this namespace does not have to be declared as an attribute in the XML tree. It is a reserved namespace that is always automatically available in the XML parser.","nodes":[{"content":"When you declare namespaces, the namespace attributes themselves are in the <bpt id=\"p1\">**</bpt>xmlns<ept id=\"p1\">**</ept> namespace.","pos":[0,96],"source":"When you declare namespaces, the namespace attributes themselves are in the **xmlns** namespace."},{"content":"The W3C standard specifies that this namespace does not have to be declared as an attribute in the XML tree.","pos":[97,205]},{"content":"It is a reserved namespace that is always automatically available in the XML parser.","pos":[206,290]}]}],"pos":[46847,47138],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Xml.Linq.XNamespace\"></xref> that corresponds to the **xmlns** URI (<code>http://www.w3.org/2000/xmlns/</code>).","nodes":[{"pos":[0,135],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Xml.Linq.XNamespace\"&gt;&lt;/xref&gt;</ph> that corresponds to the <bpt id=\"p1\">**</bpt>xmlns<ept id=\"p1\">**</ept> URI (<bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">http://www.w3.org/2000/xmlns/</ph><ept id=\"p2\">&lt;/code&gt;</ept>).","source":"The <xref href=\"System.Xml.Linq.XNamespace\"></xref> that corresponds to the **xmlns** URI (<code>http://www.w3.org/2000/xmlns/</code>)."}],"pos":[48535,48671],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Xml.Linq.XNamespace\n  commentId: T:System.Xml.Linq.XNamespace\n  id: XNamespace\n  children:\n  - System.Xml.Linq.XNamespace.Equals(System.Object)\n  - System.Xml.Linq.XNamespace.Get(System.String)\n  - System.Xml.Linq.XNamespace.GetHashCode\n  - System.Xml.Linq.XNamespace.GetName(System.String)\n  - System.Xml.Linq.XNamespace.NamespaceName\n  - System.Xml.Linq.XNamespace.None\n  - System.Xml.Linq.XNamespace.op_Addition(System.Xml.Linq.XNamespace,System.String)\n  - System.Xml.Linq.XNamespace.op_Equality(System.Xml.Linq.XNamespace,System.Xml.Linq.XNamespace)\n  - System.Xml.Linq.XNamespace.op_Implicit(System.String to System.Xml.Linq.XNamespace)\n  - System.Xml.Linq.XNamespace.op_Inequality(System.Xml.Linq.XNamespace,System.Xml.Linq.XNamespace)\n  - System.Xml.Linq.XNamespace.ToString\n  - System.Xml.Linq.XNamespace.Xml\n  - System.Xml.Linq.XNamespace.Xmlns\n  langs:\n  - csharp\n  name: XNamespace\n  nameWithType: XNamespace\n  fullName: System.Xml.Linq.XNamespace\n  type: Class\n  assemblies:\n  - System.Xml.XDocument\n  - System.Xml.Linq\n  - netstandard\n  namespace: System.Xml.Linq\n  summary: Represents an XML namespace. This class cannot be inherited.\n  remarks: \"This class represents the XML construct of namespaces.  \\n  \\n Every <xref:System.Xml.Linq.XName> contains an <xref:System.Xml.Linq.XNamespace>. Even if an element is not in a namespace, the element's <xref:System.Xml.Linq.XName> still contains a namespace, <xref:System.Xml.Linq.XNamespace.None%2A?displayProperty=fullName>. The <xref:System.Xml.Linq.XName.Namespace%2A?displayProperty=fullName> property is guaranteed to not be `null`.  \\n  \\n## Creating an XNamespace Object  \\n The most common way to create an <xref:System.Xml.Linq.XNamespace> object is to simply assign a string to it. You can then combine the namespace with a local name by using the override of the addition operator. The following example shows this idiom:  \\n  \\n```csharp  \\n  \\n                XNamespace aw = \\\"http://www.adventure-works.com\\\";  \\nXElement root = new XElement(aw + \\\"Root\\\", \\\"Content\\\");  \\nConsole.WriteLine(root);  \\n```  \\n  \\n```vb  \\n  \\n                Dim aw As XNamespace = \\\"http://www.adventure-works.com\\\"  \\nDim root As XElement = New XElement(aw + \\\"Root\\\", \\\"Content\\\")  \\nConsole.WriteLine(root)  \\n```  \\n  \\n However, in Visual Basic, you would typically declare a global default namespace, as follows:  \\n  \\n```vb  \\n  \\n                Imports <xmlns='http://www.adventure-works.com'>  \\n  \\nModule Module1  \\n    Sub Main()  \\n        Dim root As XElement = _  \\n            <Root>Content</Root>  \\n        Console.WriteLine(root)  \\n    End Sub  \\nEnd Module  \\n```  \\n  \\n This example produces the following output:  \\n  \\n```xml  \\n  \\n<Root xmlns=\\\"http://www.adventure-works.com\\\">Content</Root>  \\n```  \\n  \\n Assigning a string to an <xref:System.Xml.Linq.XNamespace> uses the implicit conversion from <xref:System.String>.  \\n  \\n See [How to: Create a Document with Namespaces (C#) (LINQ to XML)](http://msdn.microsoft.com/library/af4a595e-ffb2-4187-a61b-d5ed71642c4c) for more information and examples.  \\n  \\n See [Namespaces in Visual Basic (LINQ to XML)](http://msdn.microsoft.com/library/10b7ba7b-518c-4f14-899f-892575d14dcc) for more information on using namespaces in [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)].  \\n  \\n## Controlling Namespace Prefixes  \\n If you create an attribute that declares a namespace, the prefix specified in the attribute will be persisted in the serialized XML. To create an attribute that declares a namespace with a prefix, you create an attribute where the namespace of the name of the attribute is <xref:System.Xml.Linq.XNamespace.Xmlns%2A>, and the name of the attribute is the namespace prefix. The value of the attribute is the URI of the namespace. The following example shows this idiom:  \\n  \\n```csharp  \\n  \\n                XNamespace aw = \\\"http://www.adventure-works.com\\\";  \\nXElement root = new XElement(aw + \\\"Root\\\",  \\n    new XAttribute(XNamespace.Xmlns + \\\"aw\\\", \\\"http://www.adventure-works.com\\\"),  \\n    \\\"Content\\\");  \\nConsole.WriteLine(root);  \\n```  \\n  \\n```vb  \\n  \\n                Dim aw As XNamespace = \\\"http://www.adventure-works.com\\\"  \\nDim root As XElement = New XElement(aw + \\\"Root\\\", _  \\n    New XAttribute(XNamespace.Xmlns + \\\"aw\\\", \\\"http://www.adventure-works.com\\\"), _  \\n    \\\"Content\\\")  \\nConsole.WriteLine(root)  \\n```  \\n  \\n In [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)], instead of creating a namespace node to control namespace prefixes, you would typically use a global namespace declaration:  \\n  \\n```vb  \\n  \\n                Imports <xmlns:aw='http://www.adventure-works.com'>  \\n  \\nModule Module1  \\n    Sub Main()  \\n        Dim root As XElement = _  \\n            <aw:Root>Content</aw:Root>  \\n        Console.WriteLine(root)  \\n    End Sub  \\nEnd Module  \\n```  \\n  \\n This example produces the following output:  \\n  \\n```  \\n<aw:Root xmlns:aw=\\\"http://www.adventure-works.com\\\">Content</aw:Root>  \\n```  \\n  \\n For more information, see [How to: Control Namespace Prefixes (C#) (LINQ to XML)](http://msdn.microsoft.com/library/a40d4479-f1b9-4d8b-8623-445648caed28).  \\n  \\n## Creating a Default Namespace  \\n When constructing an attribute that will be a namespace, if the attribute name has the special value of \\\"xmlns\\\", then when the XML tree is serialized, the namespace will be declared as the default namespace. The special attribute with the name of \\\"xmlns\\\" itself is not in any namespace. The value of the attribute is the namespace URI.  \\n  \\n The following example creates an XML tree that contains an attribute that is declared in such a way that the namespace will become the default namespace:  \\n  \\n```csharp  \\n  \\n                XNamespace aw = \\\"http://www.adventure-works.com\\\";  \\nXElement root = new XElement(aw + \\\"Root\\\",  \\n    new XAttribute(\\\"xmlns\\\", \\\"http://www.adventure-works.com\\\"),  \\n    new XElement(aw + \\\"Child\\\", \\\"content\\\")  \\n);  \\nConsole.WriteLine(root);  \\n```  \\n  \\n```vb  \\n  \\n                Dim aw As XNamespace = \\\"http://www.adventure-works.com\\\"  \\nDim root As XElement = New XElement(aw + \\\"Root\\\", _  \\n    New XAttribute(\\\"xmlns\\\", \\\"http://www.adventure-works.com\\\"), _  \\n    New XElement(aw + \\\"Child\\\", \\\"content\\\") _  \\n)  \\nConsole.WriteLine(root)  \\n```  \\n  \\n In [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)], instead of creating a namespace node to create a default namespace, you would typically use a global default namespace declaration:  \\n  \\n```vb  \\n  \\n                Imports <xmlns='http://www.adventure-works.com'>  \\n  \\nModule Module1  \\n    Sub Main()  \\n        Dim root As XElement = _  \\n            <Root>  \\n                <Child>content</Child>  \\n            </Root>  \\n        Console.WriteLine(root)  \\n    End Sub  \\nEnd Module  \\n```  \\n  \\n This example produces the following output:  \\n  \\n```  \\n<Root xmlns=\\\"http://www.adventure-works.com\\\">  \\n  <Child>content</Child>  \\n</Root>  \\n```  \\n  \\n## XNamespace Atomization  \\n <xref:System.Xml.Linq.XNamespace> objects are guaranteed to be atomized; that is, if two <xref:System.Xml.Linq.XNamespace> objects have exactly the same URI, they will share the same instance. The equality and comparison operators are provided explicitly for this purpose.  \\n  \\n## Using Expanded Names  \\n Another way to specify a namespace and a local name is to use an expanded name in the form `{namespace}name`:  \\n  \\n```csharp  \\nXElement e = new XElement(\\\"{http://www.adventure-works.com}Root\\\",  \\n     new XAttribute(\\\"{http://www.adventure-works.com}Att\\\", \\\"content\\\")  \\n);  \\nConsole.WriteLine(e);  \\n```  \\n  \\n```vb  \\n  \\n                Dim e As XElement = New XElement(\\\"{http://www.adventure-works.com}Root\\\", _  \\n     New XAttribute(\\\"{http://www.adventure-works.com}Att\\\", \\\"content\\\") _  \\n)  \\nConsole.WriteLine(e)  \\n```  \\n  \\n This example produces the following output:  \\n  \\n```  \\n<Root p1:Att=\\\"content\\\" xmlns:p1=\\\"http://www.adventure-works.com\\\" xmlns=\\\"http://www.adventure-works.com\\\" />  \\n```  \\n  \\n This approach has performance implications. Each time that you pass a string that contains an expanded name to [!INCLUDE[sqltecxlinq](~/includes/sqltecxlinq-md.md)], it must parse the name, find the atomized namespace, and find the atomized name. This process takes CPU time. If performance is important, you may want to use a different approach.  \\n  \\n With Visual Basic, the recommended approach is to use XML literals, which does not involve the use of expanded names.\"\n  syntax:\n    content: public sealed class XNamespace\n  inheritance:\n  - System.Object\n  implements: []\n  inheritedMembers:\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XNamespace.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Xml.Linq.XNamespace.Equals(System.Object)\n  commentId: M:System.Xml.Linq.XNamespace.Equals(System.Object)\n  id: Equals(System.Object)\n  parent: System.Xml.Linq.XNamespace\n  langs:\n  - csharp\n  name: Equals(Object)\n  nameWithType: XNamespace.Equals(Object)\n  fullName: XNamespace.Equals(Object)\n  type: Method\n  assemblies:\n  - System.Xml.XDocument\n  - System.Xml.Linq\n  - netstandard\n  namespace: System.Xml.Linq\n  summary: Determines whether the specified <xref href=\"System.Xml.Linq.XNamespace\"></xref> is equal to the current <xref href=\"System.Xml.Linq.XNamespace\"></xref>.\n  remarks: For two <xref:System.Xml.Linq.XNamespace> objects to be equal, they must have the same URI.\n  example:\n  - \"The following example compares two namespaces that refer to the same URI.  \\n  \\n```csharp  \\n  \\n                XNamespace aw = \\\"http://www.adventure-works.com\\\";  \\nConsole.WriteLine(aw == \\\"http://www.adventure-works.com\\\");  \\n```  \\n  \\n```vb  \\n  \\n                Imports <xmlns:aw=\\\"http://www.adventure-works.com\\\">  \\n  \\nModule Module1  \\n    Sub Main()  \\n        Console.WriteLine(GetXmlNamespace(aw) = \\\"http://www.adventure-works.com\\\")  \\n    End Sub  \\nEnd Module  \\n```  \\n  \\n This example produces the following output:  \\n  \\n```  \\nTrue  \\n```\"\n  syntax:\n    content: public override bool Equals (object obj);\n    parameters:\n    - id: obj\n      type: System.Object\n      description: The <xref href=\"System.Xml.Linq.XNamespace\"></xref> to compare to the current <xref href=\"System.Xml.Linq.XNamespace\"></xref>.\n    return:\n      type: System.Boolean\n      description: A <xref href=\"System.Boolean\"></xref> that indicates whether the specified <xref href=\"System.Xml.Linq.XNamespace\"></xref> is equal to the current <xref href=\"System.Xml.Linq.XNamespace\"></xref>.\n  overload: System.Xml.Linq.XNamespace.Equals*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XNamespace.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Xml.Linq.XNamespace.Get(System.String)\n  commentId: M:System.Xml.Linq.XNamespace.Get(System.String)\n  id: Get(System.String)\n  parent: System.Xml.Linq.XNamespace\n  langs:\n  - csharp\n  name: Get(String)\n  nameWithType: XNamespace.Get(String)\n  fullName: XNamespace.Get(String)\n  type: Method\n  assemblies:\n  - System.Xml.XDocument\n  - System.Xml.Linq\n  - netstandard\n  namespace: System.Xml.Linq\n  summary: Gets an <xref href=\"System.Xml.Linq.XNamespace\"></xref> for the specified Uniform Resource Identifier (URI).\n  remarks: The returned <xref:System.Xml.Linq.XNamespace> object is guaranteed to be atomic (that is, it is the only one in the system for that particular URI).\n  example:\n  - \"The following example gets a <xref:System.Xml.Linq.XNamespace> from a specified URI.  \\n  \\n```csharp  \\n  \\n                XNamespace aw = XNamespace.Get(\\\"http://www.adventure-works.com\\\");  \\n  \\n// This is the preferred form.  \\nXNamespace aw2 = \\\"http://www.adventure-works.com\\\";  \\nConsole.WriteLine(aw);  \\nConsole.WriteLine(aw2);  \\n```  \\n  \\n```vb  \\n  \\n                Imports <xmlns:aw=\\\"http://www.adventure-works.com\\\">  \\n  \\nModule Module1  \\n    Sub Main()  \\n        Dim aw As XNamespace = XNamespace.Get(\\\"http://www.adventure-works.com\\\")  \\n  \\n        ' This is the preferred form.  \\n        Dim aw2 As XNamespace = GetXmlNamespace(aw)  \\n        Console.WriteLine(aw)  \\n        Console.WriteLine(aw2)  \\n    End Sub  \\nEnd Module  \\n```  \\n  \\n This example produces the following output:  \\n  \\n```  \\nhttp://www.adventure-works.com  \\nhttp://www.adventure-works.com  \\n```\"\n  syntax:\n    content: public static System.Xml.Linq.XNamespace Get (string namespaceName);\n    parameters:\n    - id: namespaceName\n      type: System.String\n      description: A <xref href=\"System.String\"></xref> that contains a namespace URI.\n    return:\n      type: System.Xml.Linq.XNamespace\n      description: An <xref href=\"System.Xml.Linq.XNamespace\"></xref> created from the specified URI.\n  overload: System.Xml.Linq.XNamespace.Get*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XNamespace.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Xml.Linq.XNamespace.GetHashCode\n  commentId: M:System.Xml.Linq.XNamespace.GetHashCode\n  id: GetHashCode\n  parent: System.Xml.Linq.XNamespace\n  langs:\n  - csharp\n  name: GetHashCode()\n  nameWithType: XNamespace.GetHashCode()\n  fullName: XNamespace.GetHashCode()\n  type: Method\n  assemblies:\n  - System.Xml.XDocument\n  - System.Xml.Linq\n  - netstandard\n  namespace: System.Xml.Linq\n  summary: Gets a hash code for this <xref href=\"System.Xml.Linq.XNamespace\"></xref>.\n  remarks: This method serves as a hash function for <xref:System.Xml.Linq.XNamespace>. You can use <xref:System.Xml.Linq.XNamespace.GetHashCode%2A> in hashing algorithms and data structures like a hash table.\n  syntax:\n    content: public override int GetHashCode ();\n    parameters: []\n    return:\n      type: System.Int32\n      description: An <xref href=\"System.Int32\"></xref> that contains the hash code for the <xref href=\"System.Xml.Linq.XNamespace\"></xref>.\n  overload: System.Xml.Linq.XNamespace.GetHashCode*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XNamespace.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Xml.Linq.XNamespace.GetName(System.String)\n  commentId: M:System.Xml.Linq.XNamespace.GetName(System.String)\n  id: GetName(System.String)\n  parent: System.Xml.Linq.XNamespace\n  langs:\n  - csharp\n  name: GetName(String)\n  nameWithType: XNamespace.GetName(String)\n  fullName: XNamespace.GetName(String)\n  type: Method\n  assemblies:\n  - System.Xml.XDocument\n  - System.Xml.Linq\n  - netstandard\n  namespace: System.Xml.Linq\n  summary: Returns an <xref href=\"System.Xml.Linq.XName\"></xref> object created from this <xref href=\"System.Xml.Linq.XNamespace\"></xref> and the specified local name.\n  remarks: The returned <xref:System.Xml.Linq.XName> object is guaranteed to be atomic (that is, it is the only one in the system for a specific expanded name).\n  example:\n  - \"The following example uses this property to retrieve an <xref:System.Xml.Linq.XName>.  \\n  \\n```csharp  \\n  \\n                XNamespace aw = \\\"http://www.adventure-works.com\\\";  \\nXName name = aw.GetName(\\\"Root\\\");  \\nConsole.WriteLine(\\\"{0}\\\", name);  \\n```  \\n  \\n```vb  \\n  \\n                Imports <xmlns:aw=\\\"http://www.adventure-works.com\\\">  \\n  \\nModule Module1  \\n    Sub Main()  \\n        Dim aw As XNamespace = GetXmlNamespace(aw)  \\n        Dim name As XName = aw.GetName(\\\"Root\\\")  \\n        Console.WriteLine(\\\"{0}\\\", name)  \\n    End Sub  \\nEnd Module  \\n```  \\n  \\n This example produces the following output:  \\n  \\n```  \\n{http://www.adventure-works.com}Root  \\n```\"\n  syntax:\n    content: public System.Xml.Linq.XName GetName (string localName);\n    parameters:\n    - id: localName\n      type: System.String\n      description: A <xref href=\"System.String\"></xref> that contains a local name.\n    return:\n      type: System.Xml.Linq.XName\n      description: An <xref href=\"System.Xml.Linq.XName\"></xref> created from this <xref href=\"System.Xml.Linq.XNamespace\"></xref> and the specified local name.\n  overload: System.Xml.Linq.XNamespace.GetName*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XNamespace.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Xml.Linq.XNamespace.NamespaceName\n  commentId: P:System.Xml.Linq.XNamespace.NamespaceName\n  id: NamespaceName\n  parent: System.Xml.Linq.XNamespace\n  langs:\n  - csharp\n  name: NamespaceName\n  nameWithType: XNamespace.NamespaceName\n  fullName: XNamespace.NamespaceName\n  type: Property\n  assemblies:\n  - System.Xml.XDocument\n  - System.Xml.Linq\n  - netstandard\n  namespace: System.Xml.Linq\n  summary: Gets the Uniform Resource Identifier (URI) of this namespace.\n  remarks: ''\n  example:\n  - \"The following example shows how to use this property:  \\n  \\n```csharp  \\n  \\n                string markup =  \\n@\\\"<aw:Root  \\n    xmlns:aw='http://www.adventure-works.com'/>\\\";  \\nXElement root = XElement.Parse(markup);  \\nConsole.WriteLine(root.Name.Namespace.NamespaceName);  \\n```  \\n  \\n```vb  \\n  \\n                Imports <xmlns:aw=\\\"http://www.adventure-works.com\\\">  \\n  \\nModule Module1  \\n    Sub Main()  \\n        Dim aw As XNamespace = GetXmlNamespace(aw)  \\n        Dim root As XElement = <aw:Root/>  \\n        Console.WriteLine(root.Name.Namespace.NamespaceName)  \\n    End Sub  \\nEnd Module  \\n```  \\n  \\n This example produces the following output:  \\n  \\n```  \\nhttp://www.adventure-works.com  \\n```\"\n  syntax:\n    content: public string NamespaceName { get; }\n    return:\n      type: System.String\n      description: A <xref href=\"System.String\"></xref> that contains the URI of the namespace.\n  overload: System.Xml.Linq.XNamespace.NamespaceName*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XNamespace.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Xml.Linq.XNamespace.None\n  commentId: P:System.Xml.Linq.XNamespace.None\n  id: None\n  parent: System.Xml.Linq.XNamespace\n  langs:\n  - csharp\n  name: None\n  nameWithType: XNamespace.None\n  fullName: XNamespace.None\n  type: Property\n  assemblies:\n  - System.Xml.XDocument\n  - System.Xml.Linq\n  - netstandard\n  namespace: System.Xml.Linq\n  summary: Gets the <xref href=\"System.Xml.Linq.XNamespace\"></xref> object that corresponds to no namespace.\n  remarks: If an element or attribute is in no namespace, its namespace will be set to the namespace returned by this property.\n  example:\n  - \"The following example shows uses this property to determine which elements are in no namespace.  \\n  \\n```csharp  \\n  \\n                XNamespace aw = \\\"http://www.adventure-works.com\\\";  \\n  \\nXElement root = new XElement(\\\"Root\\\",  \\n    new XElement(aw + \\\"ChildInNamespace\\\", \\\"content\\\"),  \\n    new XElement(\\\"ChildInNoNamespace\\\", \\\"content\\\")  \\n);  \\n  \\nif (root.Name.Namespace == XNamespace.None)  \\n    Console.WriteLine(\\\"Root element is in no namespace\\\");  \\nelse  \\n    Console.WriteLine(\\\"Root element is in a namespace\\\");  \\n  \\nif (root.Element(aw + \\\"ChildInNamespace\\\").Name.Namespace == XNamespace.None)  \\n    Console.WriteLine(\\\"ChildInNamespace element is in no namespace\\\");  \\nelse  \\n    Console.WriteLine(\\\"ChildInNamespace element is in a namespace\\\");  \\n  \\nif (root.Element(\\\"ChildInNoNamespace\\\").Name.Namespace == XNamespace.None)  \\n    Console.WriteLine(\\\"ChildInNoNamespace element is in no namespace\\\");  \\nelse  \\n    Console.WriteLine(\\\"ChildInNoNamespace element is in a namespace\\\");  \\n```  \\n  \\n```vb  \\n  \\n                Imports <xmlns:aw=\\\"http://www.adventure-works.com\\\">  \\n  \\nModule Module1  \\n    Sub Main()  \\n        Dim root As XElement = _  \\n            <Root>  \\n                <aw:ChildInNamespace>content</aw:ChildInNamespace>  \\n                <ChildInNoNamespace>content</ChildInNoNamespace>  \\n            </Root>  \\n  \\n        If (root.Name.Namespace Is XNamespace.None) Then  \\n            Console.WriteLine(\\\"Root element is in no namespace\\\")  \\n        Else  \\n            Console.WriteLine(\\\"Root element is in a namespace\\\")  \\n        End If  \\n  \\n        If (root.Element(GetXmlNamespace(aw) + \\\"ChildInNamespace\\\") _  \\n                .Name.Namespace Is XNamespace.None) Then  \\n            Console.WriteLine(\\\"ChildInNamespace element is in no namespace\\\")  \\n        Else  \\n            Console.WriteLine(\\\"ChildInNamespace element is in a namespace\\\")  \\n        End If  \\n  \\n        If (root.Element(\\\"ChildInNoNamespace\\\") _  \\n                .Name.Namespace Is XNamespace.None) Then  \\n            Console.WriteLine(\\\"ChildInNoNamespace element is in no namespace\\\")  \\n        Else  \\n            Console.WriteLine(\\\"ChildInNoNamespace element is in a namespace\\\")  \\n        End If  \\n    End Sub  \\nEnd Module  \\n```  \\n  \\n This example produces the following output:  \\n  \\n```  \\nRoot element is in no namespace  \\nChildInNamespace element is in a namespace  \\nChildInNoNamespace element is in no namespace  \\n```\"\n  syntax:\n    content: public static System.Xml.Linq.XNamespace None { get; }\n    return:\n      type: System.Xml.Linq.XNamespace\n      description: The <xref href=\"System.Xml.Linq.XNamespace\"></xref> that corresponds to no namespace.\n  overload: System.Xml.Linq.XNamespace.None*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XNamespace.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Xml.Linq.XNamespace.op_Addition(System.Xml.Linq.XNamespace,System.String)\n  commentId: M:System.Xml.Linq.XNamespace.op_Addition(System.Xml.Linq.XNamespace,System.String)\n  id: op_Addition(System.Xml.Linq.XNamespace,System.String)\n  parent: System.Xml.Linq.XNamespace\n  langs:\n  - csharp\n  name: op_Addition(XNamespace, String)\n  nameWithType: XNamespace.op_Addition(XNamespace, String)\n  fullName: XNamespace.op_Addition(XNamespace, String)\n  type: Operator\n  assemblies:\n  - System.Xml.XDocument\n  - System.Xml.Linq\n  - netstandard\n  namespace: System.Xml.Linq\n  summary: Combines an <xref href=\"System.Xml.Linq.XNamespace\"></xref> object with a local name to create an <xref href=\"System.Xml.Linq.XName\"></xref>.\n  remarks: \"This operator enables the common idiom of combining a namespace and a local name in the construction of an element or attribute. This idiom provides some of the benefits of having namespace prefixes, in that you can refer to a namespace using a variable that is short. This eliminates syntactic noise in the code that creates XML trees.  \\n  \\n The equivalent method for this operator is ?qualifyHint=True&autoUpgrade=False\"\n  example:\n  - \"The following example shows the use of the `+` operator to create an <xref:System.Xml.Linq.XName> from an <xref:System.Xml.Linq.XNamespace> and a local name.  \\n  \\n```csharp  \\n  \\n                XNamespace aw = \\\"http://www.adventure-works.com\\\";  \\nXElement root = new XElement(aw + \\\"Root\\\",  \\n    new XElement(aw + \\\"Child\\\")  \\n);  \\nConsole.WriteLine(root);  \\n```  \\n  \\n```vb  \\n  \\n                Dim aw As XNamespace = \\\"http://www.adventure-works.com\\\"  \\nDim root As XElement = New XElement(aw + \\\"Root\\\", _  \\n    New XElement(aw + \\\"Child\\\") _  \\n)  \\nConsole.WriteLine(root)  \\n```  \\n  \\n In Visual Basic, this is the preferred idiom:  \\n  \\n```vb  \\n  \\n                Imports <xmlns=\\\"http://www.adventure-works.com\\\">  \\n  \\nModule Module1  \\n    Sub Main()  \\n        Dim aw As XNamespace = GetXmlNamespace()  \\n        Dim root As XElement = _  \\n            <Root>  \\n                <Child/>  \\n            </Root>  \\n        Console.WriteLine(root)  \\n    End Sub  \\nEnd Module  \\n```  \\n  \\n This example produces the following output:  \\n  \\n```  \\n<Root xmlns=\\\"http://www.adventure-works.com\\\">  \\n  <Child />  \\n</Root>  \\n```\"\n  syntax:\n    content: public static System.Xml.Linq.XName op_Addition (System.Xml.Linq.XNamespace ns, string localName);\n    parameters:\n    - id: ns\n      type: System.Xml.Linq.XNamespace\n      description: An <xref href=\"System.Xml.Linq.XNamespace\"></xref> that contains the namespace.\n    - id: localName\n      type: System.String\n      description: A <xref href=\"System.String\"></xref> that contains the local name.\n    return:\n      type: System.Xml.Linq.XName\n      description: The new <xref href=\"System.Xml.Linq.XName\"></xref> constructed from the namespace and local name.\n  overload: System.Xml.Linq.XNamespace.op_Addition*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XNamespace.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Xml.Linq.XNamespace.op_Equality(System.Xml.Linq.XNamespace,System.Xml.Linq.XNamespace)\n  commentId: M:System.Xml.Linq.XNamespace.op_Equality(System.Xml.Linq.XNamespace,System.Xml.Linq.XNamespace)\n  id: op_Equality(System.Xml.Linq.XNamespace,System.Xml.Linq.XNamespace)\n  parent: System.Xml.Linq.XNamespace\n  langs:\n  - csharp\n  name: op_Equality(XNamespace, XNamespace)\n  nameWithType: XNamespace.op_Equality(XNamespace, XNamespace)\n  fullName: XNamespace.op_Equality(XNamespace, XNamespace)\n  type: Operator\n  assemblies:\n  - System.Xml.XDocument\n  - System.Xml.Linq\n  - netstandard\n  namespace: System.Xml.Linq\n  summary: Returns a value indicating whether two instances of <xref href=\"System.Xml.Linq.XNamespace\"></xref> are equal.\n  remarks: \"The operator overloads `==` and `!=` are provided to enable comparisons between <xref:System.Xml.Linq.XNamespace> and string (for example, `element.Name.Namespace == \\\"http://www.adventure-works.com\\\"`). The predefined reference equality operators in C# require one operand to be convertible to the type of the other through reference conversions only, and do not consider the implicit conversion from string to <xref:System.Xml.Linq.XNamespace>.  \\n  \\n The equivalent method for this operator is ?qualifyHint=True&autoUpgrade=False\"\n  example:\n  - \"The following example shows the comparison of an <xref:System.Xml.Linq.XNamespace> and a string.  \\n  \\n```csharp  \\n  \\n                XNamespace aw = \\\"http://www.adventure-works.com\\\";  \\nConsole.WriteLine(aw == \\\"http://www.adventure-works.com\\\");  \\n```  \\n  \\n```vb  \\n  \\n                Imports <xmlns=\\\"http://www.adventure-works.com\\\">  \\n  \\nModule Module1  \\n    Sub Main()  \\n        Dim aw As XNamespace = GetXmlNamespace()  \\n        Console.WriteLine(aw = \\\"http://www.adventure-works.com\\\")  \\n    End Sub  \\nEnd Module  \\n```  \\n  \\n This example produces the following output:  \\n  \\n```  \\nTrue  \\n```\"\n  syntax:\n    content: public static bool op_Equality (System.Xml.Linq.XNamespace left, System.Xml.Linq.XNamespace right);\n    parameters:\n    - id: left\n      type: System.Xml.Linq.XNamespace\n      description: The first <xref href=\"System.Xml.Linq.XNamespace\"></xref> to compare.\n    - id: right\n      type: System.Xml.Linq.XNamespace\n      description: The second <xref href=\"System.Xml.Linq.XNamespace\"></xref> to compare.\n    return:\n      type: System.Boolean\n      description: A <xref href=\"System.Boolean\"></xref> that indicates whether <code>left</code> and <code>right</code> are equal.\n  overload: System.Xml.Linq.XNamespace.op_Equality*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XNamespace.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Xml.Linq.XNamespace.op_Implicit(System.String to System.Xml.Linq.XNamespace)\n  commentId: M:System.Xml.Linq.XNamespace.op_Implicit(System.String)~System.Xml.Linq.XNamespace\n  id: op_Implicit(System.String to System.Xml.Linq.XNamespace)\n  parent: System.Xml.Linq.XNamespace\n  langs:\n  - csharp\n  name: op_Implicit(String to XNamespace)\n  nameWithType: XNamespace.op_Implicit(String to XNamespace)\n  fullName: XNamespace.op_Implicit(String to XNamespace)\n  type: Operator\n  assemblies:\n  - System.Xml.XDocument\n  - System.Xml.Linq\n  - netstandard\n  namespace: System.Xml.Linq\n  syntax:\n    content: >-\n      [System.CLSCompliant(false)]\n\n      public static System.Xml.Linq.XNamespace op_Implicit (string namespaceName);\n    parameters:\n    - id: namespaceName\n      type: System.String\n      description: ''\n    return:\n      type: System.Xml.Linq.XNamespace\n      description: ''\n  overload: System.Xml.Linq.XNamespace.op_Implicit*\n  exceptions: []\n  attributes:\n  - type: System.CLSCompliantAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XNamespace.xml\n- uid: System.Xml.Linq.XNamespace.op_Inequality(System.Xml.Linq.XNamespace,System.Xml.Linq.XNamespace)\n  commentId: M:System.Xml.Linq.XNamespace.op_Inequality(System.Xml.Linq.XNamespace,System.Xml.Linq.XNamespace)\n  id: op_Inequality(System.Xml.Linq.XNamespace,System.Xml.Linq.XNamespace)\n  parent: System.Xml.Linq.XNamespace\n  langs:\n  - csharp\n  name: op_Inequality(XNamespace, XNamespace)\n  nameWithType: XNamespace.op_Inequality(XNamespace, XNamespace)\n  fullName: XNamespace.op_Inequality(XNamespace, XNamespace)\n  type: Operator\n  assemblies:\n  - System.Xml.XDocument\n  - System.Xml.Linq\n  - netstandard\n  namespace: System.Xml.Linq\n  summary: Returns a value indicating whether two instances of <xref href=\"System.Xml.Linq.XNamespace\"></xref> are not equal.\n  remarks: \"The operator overloads `==` and `!=` are provided to enable comparisons between <xref:System.Xml.Linq.XNamespace> and string (for example, `element.Name.Namespace == \\\"http://www.adventure-works.com\\\"`). The predefined reference equality operators in C# require one operand to be convertible to the type of the other through reference conversions only, and do not consider the implicit conversion from string to <xref:System.Xml.Linq.XNamespace>.  \\n  \\n The equivalent method for this operator is ?qualifyHint=True&autoUpgrade=False\"\n  example:\n  - \"The following example shows a comparison of a <xref:System.Xml.Linq.XNamespace> to a string.  \\n  \\n```csharp  \\n  \\n                XNamespace aw = \\\"http://www.adventure-works.com\\\";  \\nConsole.WriteLine(aw != \\\"http://www.adventure-works.com\\\");  \\n```  \\n  \\n```vb  \\n  \\n                Imports <xmlns=\\\"http://www.adventure-works.com\\\">  \\n  \\nModule Module1  \\n    Sub Main()  \\n        Dim aw As XNamespace = GetXmlNamespace()  \\n        Console.WriteLine(aw <> \\\"http://www.adventure-works.com\\\")  \\n    End Sub  \\nEnd Module  \\n```  \\n  \\n This example produces the following output:  \\n  \\n```  \\nFalse  \\n```\"\n  syntax:\n    content: public static bool op_Inequality (System.Xml.Linq.XNamespace left, System.Xml.Linq.XNamespace right);\n    parameters:\n    - id: left\n      type: System.Xml.Linq.XNamespace\n      description: The first <xref href=\"System.Xml.Linq.XNamespace\"></xref> to compare.\n    - id: right\n      type: System.Xml.Linq.XNamespace\n      description: The second <xref href=\"System.Xml.Linq.XNamespace\"></xref> to compare.\n    return:\n      type: System.Boolean\n      description: A <xref href=\"System.Boolean\"></xref> that indicates whether <code>left</code> and <code>right</code> are not equal.\n  overload: System.Xml.Linq.XNamespace.op_Inequality*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XNamespace.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Xml.Linq.XNamespace.ToString\n  commentId: M:System.Xml.Linq.XNamespace.ToString\n  id: ToString\n  parent: System.Xml.Linq.XNamespace\n  langs:\n  - csharp\n  name: ToString()\n  nameWithType: XNamespace.ToString()\n  fullName: XNamespace.ToString()\n  type: Method\n  assemblies:\n  - System.Xml.XDocument\n  - System.Xml.Linq\n  - netstandard\n  namespace: System.Xml.Linq\n  summary: Returns the URI of this <xref href=\"System.Xml.Linq.XNamespace\"></xref>.\n  remarks: ''\n  example:\n  - \"The following example uses this method to print a namespace on the console.  \\n  \\n```csharp  \\n  \\n                XNamespace aw = \\\"http://www.adventure-works.com\\\";  \\nConsole.WriteLine(\\\"{0}\\\", aw.ToString());  \\n```  \\n  \\n```vb  \\n  \\n                Imports <xmlns=\\\"http://www.adventure-works.com\\\">  \\n  \\nModule Module1  \\n    Sub Main()  \\n        Dim aw As XNamespace = GetXmlNamespace()  \\n        Console.WriteLine(\\\"{0}\\\", aw)  \\n    End Sub  \\nEnd Module  \\n```  \\n  \\n This example produces the following output:  \\n  \\n```  \\nhttp://www.adventure-works.com  \\n```\"\n  syntax:\n    content: public override string ToString ();\n    parameters: []\n    return:\n      type: System.String\n      description: The URI of this <xref href=\"System.Xml.Linq.XNamespace\"></xref>.\n  overload: System.Xml.Linq.XNamespace.ToString*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XNamespace.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Xml.Linq.XNamespace.Xml\n  commentId: P:System.Xml.Linq.XNamespace.Xml\n  id: Xml\n  parent: System.Xml.Linq.XNamespace\n  langs:\n  - csharp\n  name: Xml\n  nameWithType: XNamespace.Xml\n  fullName: XNamespace.Xml\n  type: Property\n  assemblies:\n  - System.Xml.XDocument\n  - System.Xml.Linq\n  - netstandard\n  namespace: System.Xml.Linq\n  summary: Gets the <xref href=\"System.Xml.Linq.XNamespace\"></xref> object that corresponds to the XML URI (<code>http://www.w3.org/XML/1998/namespace</code>).\n  remarks: Certain standardized attributes, such as `space`, are in the `http://www.w3.org/XML/1998/namespace` namespace. The W3C standard specifies that this namespace does not have to be declared as an attribute in the XML tree. It is a reserved namespace that is always automatically available in the XML parser.\n  example:\n  - \"The following example shows how to create an `xml:space=\\\"preserve\\\"` attribute in an XML tree:  \\n  \\n```csharp  \\n  \\n                XElement root = new XElement(\\\"Root\\\",  \\n    new XAttribute(XNamespace.Xml + \\\"space\\\", \\\"preserve\\\"),  \\n    new XElement(\\\"Child\\\", \\\"content\\\")  \\n);  \\nConsole.WriteLine(root);  \\n```  \\n  \\n```vb  \\n  \\n                Dim root As XElement = _  \\n    <Root xml:space=\\\"preserve\\\">  \\n        <Child>content</Child>  \\n    </Root>  \\nConsole.WriteLine(root)  \\n```  \\n  \\n This example produces the following output:  \\n  \\n```  \\n<Root xml:space=\\\"preserve\\\">  \\n  <Child>content</Child>  \\n</Root>  \\n```\"\n  syntax:\n    content: public static System.Xml.Linq.XNamespace Xml { get; }\n    return:\n      type: System.Xml.Linq.XNamespace\n      description: The <xref href=\"System.Xml.Linq.XNamespace\"></xref> that corresponds to the XML URI (<code>http://www.w3.org/XML/1998/namespace</code>).\n  overload: System.Xml.Linq.XNamespace.Xml*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XNamespace.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Xml.Linq.XNamespace.Xmlns\n  commentId: P:System.Xml.Linq.XNamespace.Xmlns\n  id: Xmlns\n  parent: System.Xml.Linq.XNamespace\n  langs:\n  - csharp\n  name: Xmlns\n  nameWithType: XNamespace.Xmlns\n  fullName: XNamespace.Xmlns\n  type: Property\n  assemblies:\n  - System.Xml.XDocument\n  - System.Xml.Linq\n  - netstandard\n  namespace: System.Xml.Linq\n  summary: Gets the <xref href=\"System.Xml.Linq.XNamespace\"></xref> object that corresponds to the xmlns URI (<code>http://www.w3.org/2000/xmlns/</code>).\n  remarks: When you declare namespaces, the namespace attributes themselves are in the **xmlns** namespace. The W3C standard specifies that this namespace does not have to be declared as an attribute in the XML tree. It is a reserved namespace that is always automatically available in the XML parser.\n  example:\n  - \"The following example shows how to add a namespace to an XML tree. The namespace for the attribute that declares the namespace is the namespace returned by this property.  \\n  \\n```csharp  \\n  \\n                XNamespace aw = \\\"http://www.adventure-works.com\\\";  \\nXElement root = new XElement(aw + \\\"Root\\\",  \\n    new XAttribute(XNamespace.Xmlns + \\\"aw\\\", \\\"http://www.adventure-works.com\\\"),  \\n    new XElement(aw + \\\"Child\\\", \\\"content\\\")  \\n);  \\nConsole.WriteLine(root);  \\n```  \\n  \\n```vb  \\n  \\n                Dim root = <aw:Root xmlns:aw=\\\"http://www.adventure-works.com\\\">  \\n               <aw:Child>content</aw:Child>  \\n           </aw:Root>  \\nConsole.WriteLine(root)  \\n```  \\n  \\n In Visual Basic, the preferred idiom is:  \\n  \\n```vb  \\nImports <xmlns:aw='http://www.adventure-works.com'>  \\n  \\nModule Module1  \\n    Sub Main()  \\n        Dim root As XElement = _  \\n            <aw:Root>  \\n                <aw:Child>content</aw:Child>  \\n            </aw:Root>  \\n        Console.WriteLine(root)  \\n    End Sub  \\nEnd Module  \\n```  \\n  \\n This example produces the following output:  \\n  \\n```  \\n<aw:Root xmlns:aw=\\\"http://www.adventure-works.com\\\">  \\n  <aw:Child>content</aw:Child>  \\n</aw:Root>  \\n```\"\n  syntax:\n    content: public static System.Xml.Linq.XNamespace Xmlns { get; }\n    return:\n      type: System.Xml.Linq.XNamespace\n      description: The <xref href=\"System.Xml.Linq.XNamespace\"></xref> that corresponds to the **xmlns** URI (<code>http://www.w3.org/2000/xmlns/</code>).\n  overload: System.Xml.Linq.XNamespace.Xmlns*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XNamespace.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\nreferences:\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.Xml.Linq.XNamespace.Equals(System.Object)\n  parent: System.Xml.Linq.XNamespace\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: XNamespace.Equals(Object)\n  fullName: XNamespace.Equals(Object)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Xml.Linq.XNamespace.Get(System.String)\n  parent: System.Xml.Linq.XNamespace\n  isExternal: false\n  name: Get(String)\n  nameWithType: XNamespace.Get(String)\n  fullName: XNamespace.Get(String)\n- uid: System.Xml.Linq.XNamespace\n  parent: System.Xml.Linq\n  isExternal: false\n  name: XNamespace\n  nameWithType: XNamespace\n  fullName: System.Xml.Linq.XNamespace\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Xml.Linq.XNamespace.GetHashCode\n  parent: System.Xml.Linq.XNamespace\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: XNamespace.GetHashCode()\n  fullName: XNamespace.GetHashCode()\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Xml.Linq.XNamespace.GetName(System.String)\n  parent: System.Xml.Linq.XNamespace\n  isExternal: false\n  name: GetName(String)\n  nameWithType: XNamespace.GetName(String)\n  fullName: XNamespace.GetName(String)\n- uid: System.Xml.Linq.XName\n  parent: System.Xml.Linq\n  isExternal: false\n  name: XName\n  nameWithType: XName\n  fullName: System.Xml.Linq.XName\n- uid: System.Xml.Linq.XNamespace.NamespaceName\n  parent: System.Xml.Linq.XNamespace\n  isExternal: false\n  name: NamespaceName\n  nameWithType: XNamespace.NamespaceName\n  fullName: XNamespace.NamespaceName\n- uid: System.Xml.Linq.XNamespace.None\n  parent: System.Xml.Linq.XNamespace\n  isExternal: false\n  name: None\n  nameWithType: XNamespace.None\n  fullName: XNamespace.None\n- uid: System.Xml.Linq.XNamespace.op_Addition(System.Xml.Linq.XNamespace,System.String)\n  parent: System.Xml.Linq.XNamespace\n  isExternal: false\n  name: op_Addition(XNamespace, String)\n  nameWithType: XNamespace.op_Addition(XNamespace, String)\n  fullName: XNamespace.op_Addition(XNamespace, String)\n- uid: System.Xml.Linq.XNamespace.op_Equality(System.Xml.Linq.XNamespace,System.Xml.Linq.XNamespace)\n  parent: System.Xml.Linq.XNamespace\n  isExternal: false\n  name: op_Equality(XNamespace, XNamespace)\n  nameWithType: XNamespace.op_Equality(XNamespace, XNamespace)\n  fullName: XNamespace.op_Equality(XNamespace, XNamespace)\n- uid: System.Xml.Linq.XNamespace.op_Implicit(System.String to System.Xml.Linq.XNamespace)\n  parent: System.Xml.Linq.XNamespace\n  isExternal: false\n  name: op_Implicit(String to XNamespace)\n  nameWithType: XNamespace.op_Implicit(String to XNamespace)\n  fullName: XNamespace.op_Implicit(String to XNamespace)\n- uid: System.Xml.Linq.XNamespace.op_Inequality(System.Xml.Linq.XNamespace,System.Xml.Linq.XNamespace)\n  parent: System.Xml.Linq.XNamespace\n  isExternal: false\n  name: op_Inequality(XNamespace, XNamespace)\n  nameWithType: XNamespace.op_Inequality(XNamespace, XNamespace)\n  fullName: XNamespace.op_Inequality(XNamespace, XNamespace)\n- uid: System.Xml.Linq.XNamespace.ToString\n  parent: System.Xml.Linq.XNamespace\n  isExternal: false\n  name: ToString()\n  nameWithType: XNamespace.ToString()\n  fullName: XNamespace.ToString()\n- uid: System.Xml.Linq.XNamespace.Xml\n  parent: System.Xml.Linq.XNamespace\n  isExternal: false\n  name: Xml\n  nameWithType: XNamespace.Xml\n  fullName: XNamespace.Xml\n- uid: System.Xml.Linq.XNamespace.Xmlns\n  parent: System.Xml.Linq.XNamespace\n  isExternal: false\n  name: Xmlns\n  nameWithType: XNamespace.Xmlns\n  fullName: XNamespace.Xmlns\n- uid: System.Xml.Linq.XNamespace.Equals*\n  parent: System.Xml.Linq.XNamespace\n  isExternal: false\n  name: Equals\n  nameWithType: XNamespace.Equals\n  fullName: XNamespace.Equals\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XNamespace.xml\n- uid: System.Xml.Linq.XNamespace.Get*\n  parent: System.Xml.Linq.XNamespace\n  isExternal: false\n  name: Get\n  nameWithType: XNamespace.Get\n  fullName: XNamespace.Get\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XNamespace.xml\n- uid: System.Xml.Linq.XNamespace.GetHashCode*\n  parent: System.Xml.Linq.XNamespace\n  isExternal: false\n  name: GetHashCode\n  nameWithType: XNamespace.GetHashCode\n  fullName: XNamespace.GetHashCode\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XNamespace.xml\n- uid: System.Xml.Linq.XNamespace.GetName*\n  parent: System.Xml.Linq.XNamespace\n  isExternal: false\n  name: GetName\n  nameWithType: XNamespace.GetName\n  fullName: XNamespace.GetName\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XNamespace.xml\n- uid: System.Xml.Linq.XNamespace.NamespaceName*\n  parent: System.Xml.Linq.XNamespace\n  isExternal: false\n  name: NamespaceName\n  nameWithType: XNamespace.NamespaceName\n  fullName: XNamespace.NamespaceName\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XNamespace.xml\n- uid: System.Xml.Linq.XNamespace.None*\n  parent: System.Xml.Linq.XNamespace\n  isExternal: false\n  name: None\n  nameWithType: XNamespace.None\n  fullName: XNamespace.None\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XNamespace.xml\n- uid: System.Xml.Linq.XNamespace.op_Addition*\n  parent: System.Xml.Linq.XNamespace\n  isExternal: false\n  name: op_Addition\n  nameWithType: XNamespace.op_Addition\n  fullName: XNamespace.op_Addition\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XNamespace.xml\n- uid: System.Xml.Linq.XNamespace.op_Equality*\n  parent: System.Xml.Linq.XNamespace\n  isExternal: false\n  name: op_Equality\n  nameWithType: XNamespace.op_Equality\n  fullName: XNamespace.op_Equality\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XNamespace.xml\n- uid: System.Xml.Linq.XNamespace.op_Implicit*\n  parent: System.Xml.Linq.XNamespace\n  isExternal: false\n  name: op_Implicit\n  nameWithType: XNamespace.op_Implicit\n  fullName: XNamespace.op_Implicit\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XNamespace.xml\n- uid: System.Xml.Linq.XNamespace.op_Inequality*\n  parent: System.Xml.Linq.XNamespace\n  isExternal: false\n  name: op_Inequality\n  nameWithType: XNamespace.op_Inequality\n  fullName: XNamespace.op_Inequality\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XNamespace.xml\n- uid: System.Xml.Linq.XNamespace.ToString*\n  parent: System.Xml.Linq.XNamespace\n  isExternal: false\n  name: ToString\n  nameWithType: XNamespace.ToString\n  fullName: XNamespace.ToString\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XNamespace.xml\n- uid: System.Xml.Linq.XNamespace.Xml*\n  parent: System.Xml.Linq.XNamespace\n  isExternal: false\n  name: Xml\n  nameWithType: XNamespace.Xml\n  fullName: XNamespace.Xml\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XNamespace.xml\n- uid: System.Xml.Linq.XNamespace.Xmlns*\n  parent: System.Xml.Linq.XNamespace\n  isExternal: false\n  name: Xmlns\n  nameWithType: XNamespace.Xmlns\n  fullName: XNamespace.Xmlns\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XNamespace.xml\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: false\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n"}