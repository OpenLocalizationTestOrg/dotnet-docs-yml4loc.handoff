### YamlMime:ManagedReference
items:
- uid: System.Threading.AsyncFlowControl
  commentId: T:System.Threading.AsyncFlowControl
  id: AsyncFlowControl
  children:
  - System.Threading.AsyncFlowControl.Dispose
  - System.Threading.AsyncFlowControl.Equals(System.Object)
  - System.Threading.AsyncFlowControl.Equals(System.Threading.AsyncFlowControl)
  - System.Threading.AsyncFlowControl.GetHashCode
  - System.Threading.AsyncFlowControl.op_Equality(System.Threading.AsyncFlowControl,System.Threading.AsyncFlowControl)
  - System.Threading.AsyncFlowControl.op_Inequality(System.Threading.AsyncFlowControl,System.Threading.AsyncFlowControl)
  - System.Threading.AsyncFlowControl.Undo
  langs:
  - csharp
  name: AsyncFlowControl
  nameWithType: AsyncFlowControl
  fullName: System.Threading.AsyncFlowControl
  type: Struct
  assemblies:
  - mscorlib
  - netstandard
  - System.Threading
  namespace: System.Threading
  summary: Provides the functionality to restore the migration, or flow, of the execution context between threads.
  remarks: An execution context contains all execution-related information for a logical thread. The flow of the execution context to other threads can be prevented by using the <xref:System.Threading.ExecutionContext.SuppressFlow%2A?displayProperty=fullName> method, which returns an <xref:System.Threading.AsyncFlowControl> structure. The <xref:System.Threading.AsyncFlowControl.Undo%2A> method of the returned <xref:System.Threading.AsyncFlowControl> structure can be used to undo the flow suppression. The <xref:System.Threading.AsyncFlowControl> structure must be used on the same thread on which it was created.
  syntax:
    content: 'public struct AsyncFlowControl : IDisposable'
  inheritance:
  - System.Object
  - System.ValueType
  implements:
  - System.IDisposable
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/AsyncFlowControl.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Threading.AsyncFlowControl.Dispose
  commentId: M:System.Threading.AsyncFlowControl.Dispose
  id: Dispose
  parent: System.Threading.AsyncFlowControl
  langs:
  - csharp
  name: Dispose()
  nameWithType: AsyncFlowControl.Dispose()
  fullName: AsyncFlowControl.Dispose()
  type: Method
  assemblies:
  - mscorlib
  - netstandard
  - System.Threading
  namespace: System.Threading
  summary: Releases all resources used by the current instance of the <xref href="System.Threading.AsyncFlowControl"></xref> class.
  remarks: "Call `Dispose` when you are finished using the <xref:System.Threading.AsyncFlowControl>. The `Dispose` method leaves the <xref:System.Threading.AsyncFlowControl> in an unusable state. After calling `Dispose`, you must release all references to the <xref:System.Threading.AsyncFlowControl> so the garbage collector can reclaim the memory that the <xref:System.Threading.AsyncFlowControl> was occupying.  \n  \n For more information, see [Cleaning Up Unmanaged Resources](~/docs/standard/garbage-collection/unmanaged.md) and [Implementing a Dispose Method](~/docs/standard/garbage-collection/implementing-dispose.md).  \n  \n> [!NOTE]\n>  Always call `Dispose` before you release your last reference to the <xref:System.Threading.AsyncFlowControl>. Otherwise, the resources it is using will not be freed until the garbage collector calls the <xref:System.Threading.AsyncFlowControl> object's `Finalize` method."
  syntax:
    content: public void Dispose ();
    parameters: []
  overload: System.Threading.AsyncFlowControl.Dispose*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "The <xref href=\"System.Threading.AsyncFlowControl\"></xref> structure is not used on the thread where it was created.  \n  \n -or-  \n  \n The <xref href=\"System.Threading.AsyncFlowControl\"></xref> structure has already been used to call <xref href=\"System.Threading.AsyncFlowControl.Dispose\"></xref> or <xref href=\"System.Threading.AsyncFlowControl.Undo\"></xref>."
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/AsyncFlowControl.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Threading.AsyncFlowControl.Equals(System.Object)
  commentId: M:System.Threading.AsyncFlowControl.Equals(System.Object)
  id: Equals(System.Object)
  parent: System.Threading.AsyncFlowControl
  langs:
  - csharp
  name: Equals(Object)
  nameWithType: AsyncFlowControl.Equals(Object)
  fullName: AsyncFlowControl.Equals(Object)
  type: Method
  assemblies:
  - mscorlib
  - netstandard
  - System.Threading
  namespace: System.Threading
  summary: Determines whether the specified object is equal to the current <xref href="System.Threading.AsyncFlowControl"></xref> structure.
  syntax:
    content: public override bool Equals (object obj);
    parameters:
    - id: obj
      type: System.Object
      description: An object to compare with the current structure.
    return:
      type: System.Boolean
      description: '`true` if <code>obj</code> is an <xref href="System.Threading.AsyncFlowControl"></xref> structure and is equal to the current <xref href="System.Threading.AsyncFlowControl"></xref> structure; otherwise, `false`.'
  overload: System.Threading.AsyncFlowControl.Equals*
  exceptions: []
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/AsyncFlowControl.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Threading.AsyncFlowControl.Equals(System.Threading.AsyncFlowControl)
  commentId: M:System.Threading.AsyncFlowControl.Equals(System.Threading.AsyncFlowControl)
  id: Equals(System.Threading.AsyncFlowControl)
  parent: System.Threading.AsyncFlowControl
  langs:
  - csharp
  name: Equals(AsyncFlowControl)
  nameWithType: AsyncFlowControl.Equals(AsyncFlowControl)
  fullName: AsyncFlowControl.Equals(AsyncFlowControl)
  type: Method
  assemblies:
  - mscorlib
  - netstandard
  - System.Threading
  namespace: System.Threading
  summary: Determines whether the specified <xref href="System.Threading.AsyncFlowControl"></xref> structure is equal to the current <xref href="System.Threading.AsyncFlowControl"></xref> structure.
  syntax:
    content: public bool Equals (System.Threading.AsyncFlowControl obj);
    parameters:
    - id: obj
      type: System.Threading.AsyncFlowControl
      description: An <xref href="System.Threading.AsyncFlowControl"></xref> structure to compare with the current structure.
    return:
      type: System.Boolean
      description: '`true` if <code>obj</code> is equal to the current <xref href="System.Threading.AsyncFlowControl"></xref> structure; otherwise, `false`.'
  overload: System.Threading.AsyncFlowControl.Equals*
  exceptions: []
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/AsyncFlowControl.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Threading.AsyncFlowControl.GetHashCode
  commentId: M:System.Threading.AsyncFlowControl.GetHashCode
  id: GetHashCode
  parent: System.Threading.AsyncFlowControl
  langs:
  - csharp
  name: GetHashCode()
  nameWithType: AsyncFlowControl.GetHashCode()
  fullName: AsyncFlowControl.GetHashCode()
  type: Method
  assemblies:
  - mscorlib
  - netstandard
  - System.Threading
  namespace: System.Threading
  summary: Gets a hash code for the current <xref href="System.Threading.AsyncFlowControl"></xref> structure.
  syntax:
    content: public override int GetHashCode ();
    parameters: []
    return:
      type: System.Int32
      description: A hash code for the current <xref href="System.Threading.AsyncFlowControl"></xref> structure.
  overload: System.Threading.AsyncFlowControl.GetHashCode*
  exceptions: []
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/AsyncFlowControl.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Threading.AsyncFlowControl.op_Equality(System.Threading.AsyncFlowControl,System.Threading.AsyncFlowControl)
  commentId: M:System.Threading.AsyncFlowControl.op_Equality(System.Threading.AsyncFlowControl,System.Threading.AsyncFlowControl)
  id: op_Equality(System.Threading.AsyncFlowControl,System.Threading.AsyncFlowControl)
  parent: System.Threading.AsyncFlowControl
  langs:
  - csharp
  name: op_Equality(AsyncFlowControl, AsyncFlowControl)
  nameWithType: AsyncFlowControl.op_Equality(AsyncFlowControl, AsyncFlowControl)
  fullName: AsyncFlowControl.op_Equality(AsyncFlowControl, AsyncFlowControl)
  type: Operator
  assemblies:
  - mscorlib
  - netstandard
  - System.Threading
  namespace: System.Threading
  summary: Compares two <xref href="System.Threading.AsyncFlowControl"></xref> structures to determine whether they are equal.
  remarks: The equivalent method for this operator is <xref:System.Threading.AsyncFlowControl.Equals%28System.Threading.AsyncFlowControl%2CSystem.Threading.AsyncFlowControl%29?displayProperty=fullName>
  syntax:
    content: public static bool op_Equality (System.Threading.AsyncFlowControl a, System.Threading.AsyncFlowControl b);
    parameters:
    - id: a
      type: System.Threading.AsyncFlowControl
      description: An <xref href="System.Threading.AsyncFlowControl"></xref> structure.
    - id: b
      type: System.Threading.AsyncFlowControl
      description: An <xref href="System.Threading.AsyncFlowControl"></xref> structure.
    return:
      type: System.Boolean
      description: '`true` if the two structures are equal; otherwise, `false`.'
  overload: System.Threading.AsyncFlowControl.op_Equality*
  exceptions: []
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/AsyncFlowControl.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Threading.AsyncFlowControl.op_Inequality(System.Threading.AsyncFlowControl,System.Threading.AsyncFlowControl)
  commentId: M:System.Threading.AsyncFlowControl.op_Inequality(System.Threading.AsyncFlowControl,System.Threading.AsyncFlowControl)
  id: op_Inequality(System.Threading.AsyncFlowControl,System.Threading.AsyncFlowControl)
  parent: System.Threading.AsyncFlowControl
  langs:
  - csharp
  name: op_Inequality(AsyncFlowControl, AsyncFlowControl)
  nameWithType: AsyncFlowControl.op_Inequality(AsyncFlowControl, AsyncFlowControl)
  fullName: AsyncFlowControl.op_Inequality(AsyncFlowControl, AsyncFlowControl)
  type: Operator
  assemblies:
  - mscorlib
  - netstandard
  - System.Threading
  namespace: System.Threading
  summary: Compares two <xref href="System.Threading.AsyncFlowControl"></xref> structures to determine whether they are not equal.
  remarks: The equivalent method for this operator is <xref:System.Threading.AsyncFlowControl.Equals%28System.Threading.AsyncFlowControl%2CSystem.Threading.AsyncFlowControl%29?displayProperty=fullName>
  syntax:
    content: public static bool op_Inequality (System.Threading.AsyncFlowControl a, System.Threading.AsyncFlowControl b);
    parameters:
    - id: a
      type: System.Threading.AsyncFlowControl
      description: An <xref href="System.Threading.AsyncFlowControl"></xref> structure.
    - id: b
      type: System.Threading.AsyncFlowControl
      description: An <xref href="System.Threading.AsyncFlowControl"></xref> structure.
    return:
      type: System.Boolean
      description: '`true` if the structures are not equal; otherwise, `false`.'
  overload: System.Threading.AsyncFlowControl.op_Inequality*
  exceptions: []
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/AsyncFlowControl.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Threading.AsyncFlowControl.Undo
  commentId: M:System.Threading.AsyncFlowControl.Undo
  id: Undo
  parent: System.Threading.AsyncFlowControl
  langs:
  - csharp
  name: Undo()
  nameWithType: AsyncFlowControl.Undo()
  fullName: AsyncFlowControl.Undo()
  type: Method
  assemblies:
  - mscorlib
  - netstandard
  - System.Threading
  namespace: System.Threading
  summary: Restores the flow of the execution context between threads.
  remarks: "The <xref:System.Threading.ExecutionContext.SuppressFlow%2A?displayProperty=fullName> method returns an <xref:System.Threading.AsyncFlowControl> structure that is used to restore the flow.  \n  \n The <xref:System.Threading.AsyncFlowControl.Undo%2A> method must be called only on the <xref:System.Threading.AsyncFlowControl> structure returned by its associated <xref:System.Threading.ExecutionContext.SuppressFlow%2A> method."
  syntax:
    content: public void Undo ();
    parameters: []
  overload: System.Threading.AsyncFlowControl.Undo*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "The <xref href=\"System.Threading.AsyncFlowControl\"></xref> structure is not used on the thread where it was created.  \n  \n -or-  \n  \n The <xref href=\"System.Threading.AsyncFlowControl\"></xref> structure has already been used to call <xref href=\"System.Threading.AsyncFlowControl.Dispose\"></xref> or <xref href=\"System.Threading.AsyncFlowControl.Undo\"></xref>."
  attributes: []
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/AsyncFlowControl.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
references:
- uid: System.ValueType
  parent: System
  isExternal: false
  name: ValueType
  nameWithType: ValueType
  fullName: System.ValueType
- uid: System.InvalidOperationException
  parent: System
  isExternal: false
  name: InvalidOperationException
  nameWithType: InvalidOperationException
  fullName: System.InvalidOperationException
- uid: System.Threading.AsyncFlowControl.Dispose
  parent: System.Threading.AsyncFlowControl
  isExternal: false
  name: Dispose()
  nameWithType: AsyncFlowControl.Dispose()
  fullName: AsyncFlowControl.Dispose()
- uid: System.Threading.AsyncFlowControl.Equals(System.Object)
  parent: System.Threading.AsyncFlowControl
  isExternal: false
  name: Equals(Object)
  nameWithType: AsyncFlowControl.Equals(Object)
  fullName: AsyncFlowControl.Equals(Object)
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Threading.AsyncFlowControl.Equals(System.Threading.AsyncFlowControl)
  parent: System.Threading.AsyncFlowControl
  isExternal: false
  name: Equals(AsyncFlowControl)
  nameWithType: AsyncFlowControl.Equals(AsyncFlowControl)
  fullName: AsyncFlowControl.Equals(AsyncFlowControl)
- uid: System.Threading.AsyncFlowControl
  parent: System.Threading
  isExternal: false
  name: AsyncFlowControl
  nameWithType: AsyncFlowControl
  fullName: System.Threading.AsyncFlowControl
- uid: System.Threading.AsyncFlowControl.GetHashCode
  parent: System.Threading.AsyncFlowControl
  isExternal: false
  name: GetHashCode()
  nameWithType: AsyncFlowControl.GetHashCode()
  fullName: AsyncFlowControl.GetHashCode()
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Threading.AsyncFlowControl.op_Equality(System.Threading.AsyncFlowControl,System.Threading.AsyncFlowControl)
  parent: System.Threading.AsyncFlowControl
  isExternal: false
  name: op_Equality(AsyncFlowControl, AsyncFlowControl)
  nameWithType: AsyncFlowControl.op_Equality(AsyncFlowControl, AsyncFlowControl)
  fullName: AsyncFlowControl.op_Equality(AsyncFlowControl, AsyncFlowControl)
- uid: System.Threading.AsyncFlowControl.op_Inequality(System.Threading.AsyncFlowControl,System.Threading.AsyncFlowControl)
  parent: System.Threading.AsyncFlowControl
  isExternal: false
  name: op_Inequality(AsyncFlowControl, AsyncFlowControl)
  nameWithType: AsyncFlowControl.op_Inequality(AsyncFlowControl, AsyncFlowControl)
  fullName: AsyncFlowControl.op_Inequality(AsyncFlowControl, AsyncFlowControl)
- uid: System.Threading.AsyncFlowControl.Undo
  parent: System.Threading.AsyncFlowControl
  isExternal: false
  name: Undo()
  nameWithType: AsyncFlowControl.Undo()
  fullName: AsyncFlowControl.Undo()
- uid: System.Threading.AsyncFlowControl.Dispose*
  parent: System.Threading.AsyncFlowControl
  isExternal: false
  name: Dispose
  nameWithType: AsyncFlowControl.Dispose
  fullName: AsyncFlowControl.Dispose
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/AsyncFlowControl.xml
- uid: System.Threading.AsyncFlowControl.Equals*
  parent: System.Threading.AsyncFlowControl
  isExternal: false
  name: Equals
  nameWithType: AsyncFlowControl.Equals
  fullName: AsyncFlowControl.Equals
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/AsyncFlowControl.xml
- uid: System.Threading.AsyncFlowControl.GetHashCode*
  parent: System.Threading.AsyncFlowControl
  isExternal: false
  name: GetHashCode
  nameWithType: AsyncFlowControl.GetHashCode
  fullName: AsyncFlowControl.GetHashCode
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/AsyncFlowControl.xml
- uid: System.Threading.AsyncFlowControl.op_Equality*
  parent: System.Threading.AsyncFlowControl
  isExternal: false
  name: op_Equality
  nameWithType: AsyncFlowControl.op_Equality
  fullName: AsyncFlowControl.op_Equality
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/AsyncFlowControl.xml
- uid: System.Threading.AsyncFlowControl.op_Inequality*
  parent: System.Threading.AsyncFlowControl
  isExternal: false
  name: op_Inequality
  nameWithType: AsyncFlowControl.op_Inequality
  fullName: AsyncFlowControl.op_Inequality
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/AsyncFlowControl.xml
- uid: System.Threading.AsyncFlowControl.Undo*
  parent: System.Threading.AsyncFlowControl
  isExternal: false
  name: Undo
  nameWithType: AsyncFlowControl.Undo
  fullName: AsyncFlowControl.Undo
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/AsyncFlowControl.xml
- uid: System.IDisposable
  parent: System
  isExternal: false
  name: IDisposable
  nameWithType: IDisposable
  fullName: System.IDisposable
