{"nodes":[{"content":"Provides the base implementation for the <xref href=\"System.ComponentModel.INestedContainer\"></xref> interface, which enables containers to have an owning component.","nodes":[{"pos":[0,165],"content":"Provides the base implementation for the <ph id=\"ph1\">&lt;xref href=\"System.ComponentModel.INestedContainer\"&gt;&lt;/xref&gt;</ph> interface, which enables containers to have an owning component.","source":"Provides the base implementation for the <xref href=\"System.ComponentModel.INestedContainer\"></xref> interface, which enables containers to have an owning component."}],"pos":[850,1016],"yaml":true},{"content":"The <xref:System.ComponentModel.NestedContainer> class is a simple implementation of the <xref:System.ComponentModel.INestedContainer> interface, which defines a component that logically contains zero or more other components and is owned by a parent component. The behavior of nested containers differs from a standard <xref:System.ComponentModel.Container> in a number of ways, including the following:  \n  \n-   Site characteristics such as <xref:System.ComponentModel.Component.DesignMode%2A> and <xref:System.ComponentModel.Component.GetService%2A> are routed through the owning component’s site.  \n  \n-   The site’s <xref:System.ComponentModel.ISite.Name%2A> property is a qualified name that includes the owning component’s name followed by a period (.) and the child component’s name.  \n  \n-   <xref:System.ComponentModel.NestedContainer.GetService%2A> provides support for the <xref:System.ComponentModel.INestedContainer> as a service.  \n  \n-   When the owning component is disposed, the container is disposed as well.  \n  \n In addition, designers treat nested containers differently. A designer host is only interested in one container—the one associated with the host. Therefore, component add and remove events are not raised when a component is added to or removed from a nested container. However, because services flow through to the nested container, component change events are raised when a component in a nested container is changed.  \n  \n This disparity in event tracking also impacts undo functionality, which is closely tied to serialization. The standard undo engine uses <xref:System.ComponentModel.Design.IReferenceService> to track changes made to components. If the undo engine cannot identify a name for a component through the reference service, the engine will ignore any changes for that component. This service automatically recognizes changes to contained components only if they are exposed as public read-only properties of the same name in their owners. Otherwise, the developer must pass component change events up to the owner. For example, if a nested component’s `Text` property is resurfaced on its owning component as an `Address` property, when the `Text` property is changed, a property change must be programmatically made for the corresponding `Address` property or else that change will not be tracked by undo.","nodes":[{"pos":[0,404],"content":"The <xref:System.ComponentModel.NestedContainer> class is a simple implementation of the <xref:System.ComponentModel.INestedContainer> interface, which defines a component that logically contains zero or more other components and is owned by a parent component. The behavior of nested containers differs from a standard <xref:System.ComponentModel.Container> in a number of ways, including the following:","nodes":[{"content":"The <xref:System.ComponentModel.NestedContainer> class is a simple implementation of the <xref:System.ComponentModel.INestedContainer> interface, which defines a component that logically contains zero or more other components and is owned by a parent component. The behavior of nested containers differs from a standard <xref:System.ComponentModel.Container> in a number of ways, including the following:","pos":[0,404],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.ComponentModel.NestedContainer&gt;</ph> class is a simple implementation of the <ph id=\"ph2\">&lt;xref:System.ComponentModel.INestedContainer&gt;</ph> interface, which defines a component that logically contains zero or more other components and is owned by a parent component.","pos":[0,261],"source":"The <xref:System.ComponentModel.NestedContainer> class is a simple implementation of the <xref:System.ComponentModel.INestedContainer> interface, which defines a component that logically contains zero or more other components and is owned by a parent component."},{"content":"The behavior of nested containers differs from a standard <ph id=\"ph1\">&lt;xref:System.ComponentModel.Container&gt;</ph> in a number of ways, including the following:","pos":[262,404],"source":" The behavior of nested containers differs from a standard <xref:System.ComponentModel.Container> in a number of ways, including the following:"}]}]},{"pos":[414,600],"content":"Site characteristics such as <xref:System.ComponentModel.Component.DesignMode%2A> and <xref:System.ComponentModel.Component.GetService%2A> are routed through the owning component’s site.","nodes":[{"content":"Site characteristics such as <ph id=\"ph1\">&lt;xref:System.ComponentModel.Component.DesignMode%2A&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.ComponentModel.Component.GetService%2A&gt;</ph> are routed through the owning component’s site.","pos":[0,186],"source":"Site characteristics such as <xref:System.ComponentModel.Component.DesignMode%2A> and <xref:System.ComponentModel.Component.GetService%2A> are routed through the owning component’s site."}]},{"pos":[610,791],"content":"The site’s <xref:System.ComponentModel.ISite.Name%2A> property is a qualified name that includes the owning component’s name followed by a period (.) and the child component’s name.","nodes":[{"content":"The site’s <ph id=\"ph1\">&lt;xref:System.ComponentModel.ISite.Name%2A&gt;</ph> property is a qualified name that includes the owning component’s name followed by a period (.) and the child component’s name.","pos":[0,181],"source":"The site’s <xref:System.ComponentModel.ISite.Name%2A> property is a qualified name that includes the owning component’s name followed by a period (.) and the child component’s name."}]},{"pos":[801,944],"content":"<xref:System.ComponentModel.NestedContainer.GetService%2A> provides support for the <xref:System.ComponentModel.INestedContainer> as a service.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.ComponentModel.NestedContainer.GetService%2A&gt;</ph> provides support for the <ph id=\"ph2\">&lt;xref:System.ComponentModel.INestedContainer&gt;</ph> as a service.","pos":[0,143],"source":"<xref:System.ComponentModel.NestedContainer.GetService%2A> provides support for the <xref:System.ComponentModel.INestedContainer> as a service."}]},{"pos":[954,1027],"content":"When the owning component is disposed, the container is disposed as well.","nodes":[{"content":"When the owning component is disposed, the container is disposed as well.","pos":[0,73]}]},{"pos":[1034,1452],"content":"In addition, designers treat nested containers differently. A designer host is only interested in one container—the one associated with the host. Therefore, component add and remove events are not raised when a component is added to or removed from a nested container. However, because services flow through to the nested container, component change events are raised when a component in a nested container is changed.","nodes":[{"content":"In addition, designers treat nested containers differently. A designer host is only interested in one container—the one associated with the host. Therefore, component add and remove events are not raised when a component is added to or removed from a nested container. However, because services flow through to the nested container, component change events are raised when a component in a nested container is changed.","pos":[0,418],"nodes":[{"content":"In addition, designers treat nested containers differently.","pos":[0,59]},{"content":"A designer host is only interested in one container—the one associated with the host.","pos":[60,145]},{"content":"Therefore, component add and remove events are not raised when a component is added to or removed from a nested container.","pos":[146,268]},{"content":"However, because services flow through to the nested container, component change events are raised when a component in a nested container is changed.","pos":[269,418]}]}]},{"pos":[1459,2357],"content":"This disparity in event tracking also impacts undo functionality, which is closely tied to serialization. The standard undo engine uses <xref:System.ComponentModel.Design.IReferenceService> to track changes made to components. If the undo engine cannot identify a name for a component through the reference service, the engine will ignore any changes for that component. This service automatically recognizes changes to contained components only if they are exposed as public read-only properties of the same name in their owners. Otherwise, the developer must pass component change events up to the owner. For example, if a nested component’s `Text` property is resurfaced on its owning component as an `Address` property, when the `Text` property is changed, a property change must be programmatically made for the corresponding `Address` property or else that change will not be tracked by undo.","nodes":[{"content":"This disparity in event tracking also impacts undo functionality, which is closely tied to serialization.","pos":[0,105]},{"content":"The standard undo engine uses <ph id=\"ph1\">&lt;xref:System.ComponentModel.Design.IReferenceService&gt;</ph> to track changes made to components.","pos":[106,226],"source":" The standard undo engine uses <xref:System.ComponentModel.Design.IReferenceService> to track changes made to components."},{"content":"If the undo engine cannot identify a name for a component through the reference service, the engine will ignore any changes for that component.","pos":[227,370]},{"content":"This service automatically recognizes changes to contained components only if they are exposed as public read-only properties of the same name in their owners.","pos":[371,530]},{"content":"Otherwise, the developer must pass component change events up to the owner.","pos":[531,606]},{"content":"For example, if a nested component’s <ph id=\"ph1\">`Text`</ph> property is resurfaced on its owning component as an <ph id=\"ph2\">`Address`</ph> property, when the <ph id=\"ph3\">`Text`</ph> property is changed, a property change must be programmatically made for the corresponding <ph id=\"ph4\">`Address`</ph> property or else that change will not be tracked by undo.","pos":[607,898],"source":" For example, if a nested component’s `Text` property is resurfaced on its owning component as an `Address` property, when the `Text` property is changed, a property change must be programmatically made for the corresponding `Address` property or else that change will not be tracked by undo."}]}],"pos":[1027,3399],"yaml":true,"extradata":"MT"},{"content":"Initializes a new instance of the <xref href=\"System.ComponentModel.NestedContainer\"></xref> class.","nodes":[{"pos":[0,99],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.ComponentModel.NestedContainer\"&gt;&lt;/xref&gt;</ph> class.","source":"Initializes a new instance of the <xref href=\"System.ComponentModel.NestedContainer\"></xref> class."}],"pos":[5828,5928],"yaml":true},{"content":"This constructor enlists in its owner's <xref:System.ComponentModel.IComponent.Disposed> event so that the nested container's <xref:System.ComponentModel.NestedContainer.Dispose%2A> method will automatically be called.","nodes":[{"pos":[0,218],"content":"This constructor enlists in its owner's <xref:System.ComponentModel.IComponent.Disposed> event so that the nested container's <xref:System.ComponentModel.NestedContainer.Dispose%2A> method will automatically be called.","nodes":[{"content":"This constructor enlists in its owner's <ph id=\"ph1\">&lt;xref:System.ComponentModel.IComponent.Disposed&gt;</ph> event so that the nested container's <ph id=\"ph2\">&lt;xref:System.ComponentModel.NestedContainer.Dispose%2A&gt;</ph> method will automatically be called.","pos":[0,218],"source":"This constructor enlists in its owner's <xref:System.ComponentModel.IComponent.Disposed> event so that the nested container's <xref:System.ComponentModel.NestedContainer.Dispose%2A> method will automatically be called."}]}],"pos":[5939,6158],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.ComponentModel.IComponent\"></xref> that owns this nested container.","nodes":[{"pos":[0,90],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.ComponentModel.IComponent\"&gt;&lt;/xref&gt;</ph> that owns this nested container.","source":"The <xref href=\"System.ComponentModel.IComponent\"></xref> that owns this nested container."}],"pos":[6342,6433],"yaml":true},{"content":"<code>owner</code> is `null`.","nodes":[{"pos":[0,29],"content":"<ph id=\"ph1\">&lt;code&gt;owner&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>owner</code> is `null`."}],"pos":[6606,6636],"yaml":true},{"content":"Creates a site for the component within the container.","nodes":[{"pos":[0,54],"content":"Creates a site for the component within the container.","nodes":[{"content":"Creates a site for the component within the container.","pos":[0,54]}]}],"pos":[8021,8076],"yaml":true},{"content":"If the `name` parameter is `null`, the <xref:System.ComponentModel.IComponent> is added to the nested container without an identifying name.","nodes":[{"pos":[0,140],"content":"If the <ph id=\"ph1\">`name`</ph> parameter is <ph id=\"ph2\">`null`</ph>, the <ph id=\"ph3\">&lt;xref:System.ComponentModel.IComponent&gt;</ph> is added to the nested container without an identifying name.","source":"If the `name` parameter is `null`, the <xref:System.ComponentModel.IComponent> is added to the nested container without an identifying name."}],"pos":[8087,8228],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.ComponentModel.IComponent\"></xref> to create a site for.","nodes":[{"pos":[0,79],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.ComponentModel.IComponent\"&gt;&lt;/xref&gt;</ph> to create a site for.","source":"The <xref href=\"System.ComponentModel.IComponent\"></xref> to create a site for."}],"pos":[8468,8548],"yaml":true},{"content":"The name to assign to <code>component</code>, or `null` to skip the name assignment.","nodes":[{"pos":[0,84],"content":"The name to assign to <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">component</ph><ept id=\"p1\">&lt;/code&gt;</ept>, or <ph id=\"ph2\">`null`</ph> to skip the name assignment.","source":"The name to assign to <code>component</code>, or `null` to skip the name assignment."}],"pos":[8608,8693],"yaml":true},{"content":"The newly created <xref href=\"System.ComponentModel.ISite\"></xref>.","nodes":[{"pos":[0,67],"content":"The newly created <ph id=\"ph1\">&lt;xref href=\"System.ComponentModel.ISite\"&gt;&lt;/xref&gt;</ph>.","source":"The newly created <xref href=\"System.ComponentModel.ISite\"></xref>."}],"pos":[8764,8832],"yaml":true},{"content":"<code>component</code> is `null`.","nodes":[{"pos":[0,33],"content":"<ph id=\"ph1\">&lt;code&gt;component&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>component</code> is `null`."}],"pos":[9010,9044],"yaml":true},{"content":"Releases the resources used by the nested container.","nodes":[{"pos":[0,52],"content":"Releases the resources used by the nested container.","nodes":[{"content":"Releases the resources used by the nested container.","pos":[0,52]}]}],"pos":[10282,10335],"yaml":true},{"content":"This method is called by the public `Dispose()` method and the <xref:System.Object.Finalize%2A> method. `Dispose()` invokes the protected `Dispose(Boolean)` method with the `disposing` parameter set to `true`. <xref:System.Object.Finalize%2A> invokes `Dispose` with `disposing` set to `false`.  \n  \n When the `disposing` parameter is true, this method releases all resources held by any managed objects that this <xref:System.ComponentModel.NestedContainer> references. This method invokes the `Dispose()` method of each referenced object.","nodes":[{"pos":[0,293],"content":"This method is called by the public `Dispose()` method and the <xref:System.Object.Finalize%2A> method. `Dispose()` invokes the protected `Dispose(Boolean)` method with the `disposing` parameter set to `true`. <xref:System.Object.Finalize%2A> invokes `Dispose` with `disposing` set to `false`.","nodes":[{"content":"This method is called by the public <ph id=\"ph1\">`Dispose()`</ph> method and the <ph id=\"ph2\">&lt;xref:System.Object.Finalize%2A&gt;</ph> method.","pos":[0,103],"source":"This method is called by the public `Dispose()` method and the <xref:System.Object.Finalize%2A> method."},{"content":"<ph id=\"ph1\">`Dispose()`</ph> invokes the protected <ph id=\"ph2\">`Dispose(Boolean)`</ph> method with the <ph id=\"ph3\">`disposing`</ph> parameter set to <ph id=\"ph4\">`true`</ph>.","pos":[104,209],"source":"`Dispose()` invokes the protected `Dispose(Boolean)` method with the `disposing` parameter set to `true`."},{"content":"<ph id=\"ph1\">&lt;xref:System.Object.Finalize%2A&gt;</ph> invokes <ph id=\"ph2\">`Dispose`</ph> with <ph id=\"ph3\">`disposing`</ph> set to <ph id=\"ph4\">`false`</ph>.","pos":[210,293],"source":" <xref:System.Object.Finalize%2A> invokes `Dispose` with `disposing` set to `false`."}]},{"pos":[300,539],"content":"When the `disposing` parameter is true, this method releases all resources held by any managed objects that this <xref:System.ComponentModel.NestedContainer> references. This method invokes the `Dispose()` method of each referenced object.","nodes":[{"content":"When the <ph id=\"ph1\">`disposing`</ph> parameter is true, this method releases all resources held by any managed objects that this <ph id=\"ph2\">&lt;xref:System.ComponentModel.NestedContainer&gt;</ph> references.","pos":[0,169],"source":"When the `disposing` parameter is true, this method releases all resources held by any managed objects that this <xref:System.ComponentModel.NestedContainer> references."},{"content":"This method invokes the <ph id=\"ph1\">`Dispose()`</ph> method of each referenced object.","pos":[170,239],"source":" This method invokes the `Dispose()` method of each referenced object."}]}],"pos":[10346,10890],"yaml":true,"extradata":"MT"},{"content":"`true` to release both managed and unmanaged resources; `false` to release only unmanaged resources.","nodes":[{"pos":[0,100],"content":"<ph id=\"ph1\">`true`</ph> to release both managed and unmanaged resources; <ph id=\"ph2\">`false`</ph> to release only unmanaged resources.","source":"`true` to release both managed and unmanaged resources; `false` to release only unmanaged resources."}],"pos":[11045,11148],"yaml":true},{"content":"Gets the service object of the specified type, if it is available.","nodes":[{"pos":[0,66],"content":"Gets the service object of the specified type, if it is available.","nodes":[{"content":"Gets the service object of the specified type, if it is available.","pos":[0,66]}]}],"pos":[12462,12529],"yaml":true},{"content":"This method overrides the <xref:System.ComponentModel.Container.GetService%2A?displayProperty=fullName> method. This implementation only resolves requests for the <xref:System.ComponentModel.INestedContainer> and <xref:System.ComponentModel.IContainer> services.","nodes":[{"pos":[0,262],"content":"This method overrides the <xref:System.ComponentModel.Container.GetService%2A?displayProperty=fullName> method. This implementation only resolves requests for the <xref:System.ComponentModel.INestedContainer> and <xref:System.ComponentModel.IContainer> services.","nodes":[{"content":"This method overrides the <xref:System.ComponentModel.Container.GetService%2A?displayProperty=fullName> method. This implementation only resolves requests for the <xref:System.ComponentModel.INestedContainer> and <xref:System.ComponentModel.IContainer> services.","pos":[0,262],"nodes":[{"content":"This method overrides the <ph id=\"ph1\">&lt;xref:System.ComponentModel.Container.GetService%2A?displayProperty=fullName&gt;</ph> method.","pos":[0,111],"source":"This method overrides the <xref:System.ComponentModel.Container.GetService%2A?displayProperty=fullName> method."},{"content":"This implementation only resolves requests for the <ph id=\"ph1\">&lt;xref:System.ComponentModel.INestedContainer&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.ComponentModel.IContainer&gt;</ph> services.","pos":[112,262],"source":" This implementation only resolves requests for the <xref:System.ComponentModel.INestedContainer> and <xref:System.ComponentModel.IContainer> services."}]}]}],"pos":[12540,12803],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Type\"></xref> of the service to retrieve.","nodes":[{"pos":[0,64],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Type\"&gt;&lt;/xref&gt;</ph> of the service to retrieve.","source":"The <xref href=\"System.Type\"></xref> of the service to retrieve."}],"pos":[12956,13021],"yaml":true},{"content":"An <xref href=\"System.Object\"></xref> that implements the requested service, or `null` if the service cannot be resolved.","nodes":[{"pos":[0,121],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Object\"&gt;&lt;/xref&gt;</ph> that implements the requested service, or <ph id=\"ph2\">`null`</ph> if the service cannot be resolved.","source":"An <xref href=\"System.Object\"></xref> that implements the requested service, or `null` if the service cannot be resolved."}],"pos":[13078,13200],"yaml":true},{"content":"Gets the owning component for this nested container.","nodes":[{"pos":[0,52],"content":"Gets the owning component for this nested container.","nodes":[{"content":"Gets the owning component for this nested container.","pos":[0,52]}]}],"pos":[14432,14485],"yaml":true},{"content":"The owning component is the characteristic that differentiates nested containers from ordinary containers.","nodes":[{"pos":[0,106],"content":"The owning component is the characteristic that differentiates nested containers from ordinary containers.","nodes":[{"content":"The owning component is the characteristic that differentiates nested containers from ordinary containers.","pos":[0,106]}]}],"pos":[14496,14603],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.ComponentModel.IComponent\"></xref> that owns this nested container.","nodes":[{"pos":[0,90],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.ComponentModel.IComponent\"&gt;&lt;/xref&gt;</ph> that owns this nested container.","source":"The <xref href=\"System.ComponentModel.IComponent\"></xref> that owns this nested container."}],"pos":[14757,14848],"yaml":true},{"content":"Gets the name of the owning component.","nodes":[{"pos":[0,38],"content":"Gets the name of the owning component.","nodes":[{"content":"Gets the name of the owning component.","pos":[0,38]}]}],"pos":[16099,16138],"yaml":true},{"content":"This property may be overridden to provide a custom owner name. The default implementation searches the owner's site for <xref:System.ComponentModel.INestedSite> and calls <xref:System.ComponentModel.INestedSite.FullName%2A>, or <xref:System.ComponentModel.ISite.Name%2A> if there is no nested site. If neither is available, this property returns `null`.","nodes":[{"pos":[0,354],"content":"This property may be overridden to provide a custom owner name. The default implementation searches the owner's site for <xref:System.ComponentModel.INestedSite> and calls <xref:System.ComponentModel.INestedSite.FullName%2A>, or <xref:System.ComponentModel.ISite.Name%2A> if there is no nested site. If neither is available, this property returns `null`.","nodes":[{"content":"This property may be overridden to provide a custom owner name.","pos":[0,63]},{"content":"The default implementation searches the owner's site for <ph id=\"ph1\">&lt;xref:System.ComponentModel.INestedSite&gt;</ph> and calls <ph id=\"ph2\">&lt;xref:System.ComponentModel.INestedSite.FullName%2A&gt;</ph>, or <ph id=\"ph3\">&lt;xref:System.ComponentModel.ISite.Name%2A&gt;</ph> if there is no nested site.","pos":[64,299],"source":" The default implementation searches the owner's site for <xref:System.ComponentModel.INestedSite> and calls <xref:System.ComponentModel.INestedSite.FullName%2A>, or <xref:System.ComponentModel.ISite.Name%2A> if there is no nested site."},{"content":"If neither is available, this property returns <ph id=\"ph1\">`null`</ph>.","pos":[300,354],"source":" If neither is available, this property returns `null`."}]}],"pos":[16149,16504],"yaml":true,"extradata":"MT"},{"content":"The name of the owning component.","nodes":[{"pos":[0,33],"content":"The name of the owning component.","nodes":[{"content":"The name of the owning component.","pos":[0,33]}]}],"pos":[16628,16662],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.ComponentModel.NestedContainer\n  commentId: T:System.ComponentModel.NestedContainer\n  id: NestedContainer\n  children:\n  - System.ComponentModel.NestedContainer.#ctor(System.ComponentModel.IComponent)\n  - System.ComponentModel.NestedContainer.CreateSite(System.ComponentModel.IComponent,System.String)\n  - System.ComponentModel.NestedContainer.Dispose(System.Boolean)\n  - System.ComponentModel.NestedContainer.GetService(System.Type)\n  - System.ComponentModel.NestedContainer.Owner\n  - System.ComponentModel.NestedContainer.OwnerName\n  langs:\n  - csharp\n  name: NestedContainer\n  nameWithType: NestedContainer\n  fullName: System.ComponentModel.NestedContainer\n  type: Class\n  assemblies:\n  - System\n  - netstandard\n  - System.ComponentModel.TypeConverter\n  namespace: System.ComponentModel\n  summary: Provides the base implementation for the <xref href=\"System.ComponentModel.INestedContainer\"></xref> interface, which enables containers to have an owning component.\n  remarks: \"The <xref:System.ComponentModel.NestedContainer> class is a simple implementation of the <xref:System.ComponentModel.INestedContainer> interface, which defines a component that logically contains zero or more other components and is owned by a parent component. The behavior of nested containers differs from a standard <xref:System.ComponentModel.Container> in a number of ways, including the following:  \\n  \\n-   Site characteristics such as <xref:System.ComponentModel.Component.DesignMode%2A> and <xref:System.ComponentModel.Component.GetService%2A> are routed through the owning component’s site.  \\n  \\n-   The site’s <xref:System.ComponentModel.ISite.Name%2A> property is a qualified name that includes the owning component’s name followed by a period (.) and the child component’s name.  \\n  \\n-   <xref:System.ComponentModel.NestedContainer.GetService%2A> provides support for the <xref:System.ComponentModel.INestedContainer> as a service.  \\n  \\n-   When the owning component is disposed, the container is disposed as well.  \\n  \\n In addition, designers treat nested containers differently. A designer host is only interested in one container—the one associated with the host. Therefore, component add and remove events are not raised when a component is added to or removed from a nested container. However, because services flow through to the nested container, component change events are raised when a component in a nested container is changed.  \\n  \\n This disparity in event tracking also impacts undo functionality, which is closely tied to serialization. The standard undo engine uses <xref:System.ComponentModel.Design.IReferenceService> to track changes made to components. If the undo engine cannot identify a name for a component through the reference service, the engine will ignore any changes for that component. This service automatically recognizes changes to contained components only if they are exposed as public read-only properties of the same name in their owners. Otherwise, the developer must pass component change events up to the owner. For example, if a nested component’s `Text` property is resurfaced on its owning component as an `Address` property, when the `Text` property is changed, a property change must be programmatically made for the corresponding `Address` property or else that change will not be tracked by undo.\"\n  syntax:\n    content: 'public class NestedContainer : System.ComponentModel.Container, IDisposable, System.ComponentModel.INestedContainer'\n  inheritance:\n  - System.Object\n  - System.ComponentModel.Container\n  implements:\n  - System.ComponentModel.INestedContainer\n  - System.IDisposable\n  inheritedMembers:\n  - System.ComponentModel.Container.Add(System.ComponentModel.IComponent)\n  - System.ComponentModel.Container.Add(System.ComponentModel.IComponent,System.String)\n  - System.ComponentModel.Container.Components\n  - System.ComponentModel.Container.Dispose\n  - System.ComponentModel.Container.Remove(System.ComponentModel.IComponent)\n  - System.ComponentModel.Container.RemoveWithoutUnsiting(System.ComponentModel.IComponent)\n  - System.ComponentModel.Container.ValidateName(System.ComponentModel.IComponent,System.String)\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.ToString\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ComponentModel/NestedContainer.xml\n  ms.technology:\n  - dotnet-standard\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.ComponentModel.NestedContainer.#ctor(System.ComponentModel.IComponent)\n  commentId: M:System.ComponentModel.NestedContainer.#ctor(System.ComponentModel.IComponent)\n  id: '#ctor(System.ComponentModel.IComponent)'\n  parent: System.ComponentModel.NestedContainer\n  langs:\n  - csharp\n  name: NestedContainer(IComponent)\n  nameWithType: NestedContainer.NestedContainer(IComponent)\n  fullName: NestedContainer.NestedContainer(IComponent)\n  type: Constructor\n  assemblies:\n  - System\n  - netstandard\n  - System.ComponentModel.TypeConverter\n  namespace: System.ComponentModel\n  summary: Initializes a new instance of the <xref href=\"System.ComponentModel.NestedContainer\"></xref> class.\n  remarks: This constructor enlists in its owner's <xref:System.ComponentModel.IComponent.Disposed> event so that the nested container's <xref:System.ComponentModel.NestedContainer.Dispose%2A> method will automatically be called.\n  syntax:\n    content: public NestedContainer (System.ComponentModel.IComponent owner);\n    parameters:\n    - id: owner\n      type: System.ComponentModel.IComponent\n      description: The <xref href=\"System.ComponentModel.IComponent\"></xref> that owns this nested container.\n  overload: System.ComponentModel.NestedContainer.#ctor*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>owner</code> is `null`.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ComponentModel/NestedContainer.xml\n  ms.technology:\n  - dotnet-standard\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.ComponentModel.NestedContainer.CreateSite(System.ComponentModel.IComponent,System.String)\n  commentId: M:System.ComponentModel.NestedContainer.CreateSite(System.ComponentModel.IComponent,System.String)\n  id: CreateSite(System.ComponentModel.IComponent,System.String)\n  parent: System.ComponentModel.NestedContainer\n  langs:\n  - csharp\n  name: CreateSite(IComponent, String)\n  nameWithType: NestedContainer.CreateSite(IComponent, String)\n  fullName: NestedContainer.CreateSite(IComponent, String)\n  type: Method\n  assemblies:\n  - System\n  - netstandard\n  - System.ComponentModel.TypeConverter\n  namespace: System.ComponentModel\n  summary: Creates a site for the component within the container.\n  remarks: If the `name` parameter is `null`, the <xref:System.ComponentModel.IComponent> is added to the nested container without an identifying name.\n  syntax:\n    content: protected override System.ComponentModel.ISite CreateSite (System.ComponentModel.IComponent component, string name);\n    parameters:\n    - id: component\n      type: System.ComponentModel.IComponent\n      description: The <xref href=\"System.ComponentModel.IComponent\"></xref> to create a site for.\n    - id: name\n      type: System.String\n      description: The name to assign to <code>component</code>, or `null` to skip the name assignment.\n    return:\n      type: System.ComponentModel.ISite\n      description: The newly created <xref href=\"System.ComponentModel.ISite\"></xref>.\n  overload: System.ComponentModel.NestedContainer.CreateSite*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>component</code> is `null`.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ComponentModel/NestedContainer.xml\n  ms.technology:\n  - dotnet-standard\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.ComponentModel.NestedContainer.Dispose(System.Boolean)\n  commentId: M:System.ComponentModel.NestedContainer.Dispose(System.Boolean)\n  id: Dispose(System.Boolean)\n  parent: System.ComponentModel.NestedContainer\n  langs:\n  - csharp\n  name: Dispose(Boolean)\n  nameWithType: NestedContainer.Dispose(Boolean)\n  fullName: NestedContainer.Dispose(Boolean)\n  type: Method\n  assemblies:\n  - System\n  - netstandard\n  - System.ComponentModel.TypeConverter\n  namespace: System.ComponentModel\n  summary: Releases the resources used by the nested container.\n  remarks: \"This method is called by the public `Dispose()` method and the <xref:System.Object.Finalize%2A> method. `Dispose()` invokes the protected `Dispose(Boolean)` method with the `disposing` parameter set to `true`. <xref:System.Object.Finalize%2A> invokes `Dispose` with `disposing` set to `false`.  \\n  \\n When the `disposing` parameter is true, this method releases all resources held by any managed objects that this <xref:System.ComponentModel.NestedContainer> references. This method invokes the `Dispose()` method of each referenced object.\"\n  syntax:\n    content: protected override void Dispose (bool disposing);\n    parameters:\n    - id: disposing\n      type: System.Boolean\n      description: '`true` to release both managed and unmanaged resources; `false` to release only unmanaged resources.'\n  overload: System.ComponentModel.NestedContainer.Dispose*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ComponentModel/NestedContainer.xml\n  ms.technology:\n  - dotnet-standard\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.ComponentModel.NestedContainer.GetService(System.Type)\n  commentId: M:System.ComponentModel.NestedContainer.GetService(System.Type)\n  id: GetService(System.Type)\n  parent: System.ComponentModel.NestedContainer\n  langs:\n  - csharp\n  name: GetService(Type)\n  nameWithType: NestedContainer.GetService(Type)\n  fullName: NestedContainer.GetService(Type)\n  type: Method\n  assemblies:\n  - System\n  - netstandard\n  - System.ComponentModel.TypeConverter\n  namespace: System.ComponentModel\n  summary: Gets the service object of the specified type, if it is available.\n  remarks: This method overrides the <xref:System.ComponentModel.Container.GetService%2A?displayProperty=fullName> method. This implementation only resolves requests for the <xref:System.ComponentModel.INestedContainer> and <xref:System.ComponentModel.IContainer> services.\n  syntax:\n    content: protected override object GetService (Type service);\n    parameters:\n    - id: service\n      type: System.Type\n      description: The <xref href=\"System.Type\"></xref> of the service to retrieve.\n    return:\n      type: System.Object\n      description: An <xref href=\"System.Object\"></xref> that implements the requested service, or `null` if the service cannot be resolved.\n  overload: System.ComponentModel.NestedContainer.GetService*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ComponentModel/NestedContainer.xml\n  ms.technology:\n  - dotnet-standard\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.ComponentModel.NestedContainer.Owner\n  commentId: P:System.ComponentModel.NestedContainer.Owner\n  id: Owner\n  parent: System.ComponentModel.NestedContainer\n  langs:\n  - csharp\n  name: Owner\n  nameWithType: NestedContainer.Owner\n  fullName: NestedContainer.Owner\n  type: Property\n  assemblies:\n  - System\n  - netstandard\n  - System.ComponentModel.TypeConverter\n  namespace: System.ComponentModel\n  summary: Gets the owning component for this nested container.\n  remarks: The owning component is the characteristic that differentiates nested containers from ordinary containers.\n  syntax:\n    content: public System.ComponentModel.IComponent Owner { get; }\n    return:\n      type: System.ComponentModel.IComponent\n      description: The <xref href=\"System.ComponentModel.IComponent\"></xref> that owns this nested container.\n  overload: System.ComponentModel.NestedContainer.Owner*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ComponentModel/NestedContainer.xml\n  ms.technology:\n  - dotnet-standard\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.ComponentModel.NestedContainer.OwnerName\n  commentId: P:System.ComponentModel.NestedContainer.OwnerName\n  id: OwnerName\n  parent: System.ComponentModel.NestedContainer\n  langs:\n  - csharp\n  name: OwnerName\n  nameWithType: NestedContainer.OwnerName\n  fullName: NestedContainer.OwnerName\n  type: Property\n  assemblies:\n  - System\n  - netstandard\n  - System.ComponentModel.TypeConverter\n  namespace: System.ComponentModel\n  summary: Gets the name of the owning component.\n  remarks: This property may be overridden to provide a custom owner name. The default implementation searches the owner's site for <xref:System.ComponentModel.INestedSite> and calls <xref:System.ComponentModel.INestedSite.FullName%2A>, or <xref:System.ComponentModel.ISite.Name%2A> if there is no nested site. If neither is available, this property returns `null`.\n  syntax:\n    content: protected virtual string OwnerName { get; }\n    return:\n      type: System.String\n      description: The name of the owning component.\n  overload: System.ComponentModel.NestedContainer.OwnerName*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ComponentModel/NestedContainer.xml\n  ms.technology:\n  - dotnet-standard\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\nreferences:\n- uid: System.ComponentModel.Container\n  parent: System.ComponentModel\n  isExternal: false\n  name: Container\n  nameWithType: Container\n  fullName: System.ComponentModel.Container\n- uid: System.ArgumentNullException\n  parent: System\n  isExternal: false\n  name: ArgumentNullException\n  nameWithType: ArgumentNullException\n  fullName: System.ArgumentNullException\n- uid: System.ComponentModel.NestedContainer.#ctor(System.ComponentModel.IComponent)\n  parent: System.ComponentModel.NestedContainer\n  isExternal: false\n  name: NestedContainer(IComponent)\n  nameWithType: NestedContainer.NestedContainer(IComponent)\n  fullName: NestedContainer.NestedContainer(IComponent)\n- uid: System.ComponentModel.IComponent\n  parent: System.ComponentModel\n  isExternal: false\n  name: IComponent\n  nameWithType: IComponent\n  fullName: System.ComponentModel.IComponent\n- uid: System.ComponentModel.NestedContainer.CreateSite(System.ComponentModel.IComponent,System.String)\n  parent: System.ComponentModel.NestedContainer\n  isExternal: false\n  name: CreateSite(IComponent, String)\n  nameWithType: NestedContainer.CreateSite(IComponent, String)\n  fullName: NestedContainer.CreateSite(IComponent, String)\n- uid: System.ComponentModel.ISite\n  parent: System.ComponentModel\n  isExternal: false\n  name: ISite\n  nameWithType: ISite\n  fullName: System.ComponentModel.ISite\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.ComponentModel.NestedContainer.Dispose(System.Boolean)\n  parent: System.ComponentModel.NestedContainer\n  isExternal: false\n  name: Dispose(Boolean)\n  nameWithType: NestedContainer.Dispose(Boolean)\n  fullName: NestedContainer.Dispose(Boolean)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.ComponentModel.NestedContainer.GetService(System.Type)\n  parent: System.ComponentModel.NestedContainer\n  isExternal: false\n  name: GetService(Type)\n  nameWithType: NestedContainer.GetService(Type)\n  fullName: NestedContainer.GetService(Type)\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.Type\n  parent: System\n  isExternal: false\n  name: Type\n  nameWithType: Type\n  fullName: System.Type\n- uid: System.ComponentModel.NestedContainer.Owner\n  parent: System.ComponentModel.NestedContainer\n  isExternal: false\n  name: Owner\n  nameWithType: NestedContainer.Owner\n  fullName: NestedContainer.Owner\n- uid: System.ComponentModel.NestedContainer.OwnerName\n  parent: System.ComponentModel.NestedContainer\n  isExternal: false\n  name: OwnerName\n  nameWithType: NestedContainer.OwnerName\n  fullName: NestedContainer.OwnerName\n- uid: System.ComponentModel.NestedContainer.#ctor*\n  parent: System.ComponentModel.NestedContainer\n  isExternal: false\n  name: NestedContainer\n  nameWithType: NestedContainer.NestedContainer\n  fullName: NestedContainer.NestedContainer\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ComponentModel/NestedContainer.xml\n- uid: System.ComponentModel.NestedContainer.CreateSite*\n  parent: System.ComponentModel.NestedContainer\n  isExternal: false\n  name: CreateSite\n  nameWithType: NestedContainer.CreateSite\n  fullName: NestedContainer.CreateSite\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ComponentModel/NestedContainer.xml\n- uid: System.ComponentModel.NestedContainer.Dispose*\n  parent: System.ComponentModel.NestedContainer\n  isExternal: false\n  name: Dispose\n  nameWithType: NestedContainer.Dispose\n  fullName: NestedContainer.Dispose\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ComponentModel/NestedContainer.xml\n- uid: System.ComponentModel.NestedContainer.GetService*\n  parent: System.ComponentModel.NestedContainer\n  isExternal: false\n  name: GetService\n  nameWithType: NestedContainer.GetService\n  fullName: NestedContainer.GetService\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ComponentModel/NestedContainer.xml\n- uid: System.ComponentModel.NestedContainer.Owner*\n  parent: System.ComponentModel.NestedContainer\n  isExternal: false\n  name: Owner\n  nameWithType: NestedContainer.Owner\n  fullName: NestedContainer.Owner\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ComponentModel/NestedContainer.xml\n- uid: System.ComponentModel.NestedContainer.OwnerName*\n  parent: System.ComponentModel.NestedContainer\n  isExternal: false\n  name: OwnerName\n  nameWithType: NestedContainer.OwnerName\n  fullName: NestedContainer.OwnerName\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ComponentModel/NestedContainer.xml\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: Object.Equals(Object)\n  fullName: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: Object.GetHashCode()\n  fullName: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: false\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: false\n  name: ToString()\n  nameWithType: Object.ToString()\n  fullName: Object.ToString()\n- uid: System.ComponentModel.Container.Add(System.ComponentModel.IComponent)\n  parent: System.ComponentModel.Container\n  isExternal: false\n  name: Add(IComponent)\n  nameWithType: Container.Add(IComponent)\n  fullName: Container.Add(IComponent)\n- uid: System.ComponentModel.Container.Add(System.ComponentModel.IComponent,System.String)\n  parent: System.ComponentModel.Container\n  isExternal: false\n  name: Add(IComponent, String)\n  nameWithType: Container.Add(IComponent, String)\n  fullName: Container.Add(IComponent, String)\n- uid: System.ComponentModel.Container.Components\n  parent: System.ComponentModel.Container\n  isExternal: false\n  name: Components\n  nameWithType: Container.Components\n  fullName: Container.Components\n- uid: System.ComponentModel.Container.Dispose\n  parent: System.ComponentModel.Container\n  isExternal: false\n  name: Dispose()\n  nameWithType: Container.Dispose()\n  fullName: Container.Dispose()\n- uid: System.ComponentModel.Container.Remove(System.ComponentModel.IComponent)\n  parent: System.ComponentModel.Container\n  isExternal: false\n  name: Remove(IComponent)\n  nameWithType: Container.Remove(IComponent)\n  fullName: Container.Remove(IComponent)\n- uid: System.ComponentModel.Container.RemoveWithoutUnsiting(System.ComponentModel.IComponent)\n  parent: System.ComponentModel.Container\n  isExternal: false\n  name: RemoveWithoutUnsiting(IComponent)\n  nameWithType: Container.RemoveWithoutUnsiting(IComponent)\n  fullName: Container.RemoveWithoutUnsiting(IComponent)\n- uid: System.ComponentModel.Container.ValidateName(System.ComponentModel.IComponent,System.String)\n  parent: System.ComponentModel.Container\n  isExternal: false\n  name: ValidateName(IComponent, String)\n  nameWithType: Container.ValidateName(IComponent, String)\n  fullName: Container.ValidateName(IComponent, String)\n- uid: System.ComponentModel.INestedContainer\n  parent: System.ComponentModel\n  isExternal: false\n  name: INestedContainer\n  nameWithType: INestedContainer\n  fullName: System.ComponentModel.INestedContainer\n- uid: System.IDisposable\n  parent: System\n  isExternal: false\n  name: IDisposable\n  nameWithType: IDisposable\n  fullName: System.IDisposable\n"}