{"nodes":[{"content":"Represents a collection of key/value pairs that are sorted by key based on the associated <xref href=\"System.Collections.Generic.IComparer`1\"></xref> implementation.","nodes":[{"pos":[0,165],"content":"Represents a collection of key/value pairs that are sorted by key based on the associated <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.IComparer`1\"&gt;&lt;/xref&gt;</ph> implementation.","source":"Represents a collection of key/value pairs that are sorted by key based on the associated <xref href=\"System.Collections.Generic.IComparer`1\"></xref> implementation."}],"pos":[4654,4820],"yaml":true},{"content":"The <xref:System.Collections.Generic.SortedList%602> generic class is an array of key/value pairs with O(log `n`) retrieval, where n is the number of elements in the dictionary. In this, it is similar to the <xref:System.Collections.Generic.SortedDictionary%602> generic class. The two classes have similar object models, and both have O(log `n`) retrieval. Where the two classes differ is in memory use and speed of insertion and removal:  \n  \n-   <xref:System.Collections.Generic.SortedList%602> uses less memory than <xref:System.Collections.Generic.SortedDictionary%602>.  \n  \n-   <xref:System.Collections.Generic.SortedDictionary%602> has faster insertion and removal operations for unsorted data, O(log `n`) as opposed to O(`n`) for <xref:System.Collections.Generic.SortedList%602>.  \n  \n-   If the list is populated all at once from sorted data, <xref:System.Collections.Generic.SortedList%602> is faster than <xref:System.Collections.Generic.SortedDictionary%602>.  \n  \n Another difference between the <xref:System.Collections.Generic.SortedDictionary%602> and <xref:System.Collections.Generic.SortedList%602> classes is that <xref:System.Collections.Generic.SortedList%602> supports efficient indexed retrieval of keys and values through the collections returned by the <xref:System.Collections.Generic.SortedList%602.Keys%2A> and <xref:System.Collections.Generic.SortedList%602.Values%2A> properties. It is not necessary to regenerate the lists when the properties are accessed, because the lists are just wrappers for the internal arrays of keys and values. The following code shows the use of the <xref:System.Collections.Generic.SortedList%602.Values%2A> property for indexed retrieval of values from a sorted list of strings:  \n  \n [!code-cpp[Generic.SortedList#11](~/samples/snippets/cpp/VS_Snippets_CLR/Generic.SortedList/cpp/remarks.cpp#11)]\n [!code-csharp[Generic.SortedList#11](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.SortedList/CS/remarks.cs#11)]\n [!code-vb[Generic.SortedList#11](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.SortedList/VB/remarks.vb#11)]  \n  \n <xref:System.Collections.Generic.SortedList%602> is implemented as an array of key/value pairs, sorted by the key.  Each element can be retrieved as a <xref:System.Collections.Generic.KeyValuePair%602> object.  \n  \n Key objects must be immutable as long as they are used as keys in the <xref:System.Collections.Generic.SortedList%602>. Every key in a <xref:System.Collections.Generic.SortedList%602> must be unique. A key cannot be `null`, but a value can be, if the type of values in the list, `TValue`, is a reference type.  \n  \n <xref:System.Collections.Generic.SortedList%602> requires a comparer implementation to sort and to perform comparisons.  The default comparer <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=fullName> checks whether the key type `TKey` implements <xref:System.IComparable%601?displayProperty=fullName> and uses that implementation, if available.  If not, <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=fullName> checks whether the key type `TKey` implements <xref:System.IComparable?displayProperty=fullName>.  If the key type `TKey` does not implement either interface, you can specify a <xref:System.Collections.Generic.IComparer%601?displayProperty=fullName> implementation in a constructor overload that accepts a `comparer` parameter.  \n  \n The capacity of a <xref:System.Collections.Generic.SortedList%602> is the number of elements the <xref:System.Collections.Generic.SortedList%602> can hold. As elements are added to a <xref:System.Collections.Generic.SortedList%602>, the capacity is automatically increased as required by reallocating the internal array. The capacity can be decreased by calling <xref:System.Collections.Generic.SortedList%602.TrimExcess%2A> or by setting the <xref:System.Collections.Generic.SortedList%602.Capacity%2A> property explicitly. Decreasing the capacity reallocates memory and copies all the elements in the <xref:System.Collections.Generic.SortedList%602>.  \n  \n For very large <xref:System.Collections.Generic.SortedList%602> objects, you can increase the maximum capacity to 2 billion elements on a 64-bit system by setting the `enabled` attribute of the  configuration element to `true` in the run-time environment.  \n  \n The `foreach` statement of the C# language (`for each` in C++, `For Each` in Visual Basic) returns an object of the type of the elements in the collection. Since the elements of the <xref:System.Collections.Generic.SortedList%602> are key/value pairs, the element type is not the type of the key or the type of the value. Instead, the element type is <xref:System.Collections.Generic.KeyValuePair%602>. For example:  \n  \n [!code-cpp[Generic.SortedList#12](~/samples/snippets/cpp/VS_Snippets_CLR/Generic.SortedList/cpp/remarks.cpp#12)]\n [!code-csharp[Generic.SortedList#12](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.SortedList/CS/remarks.cs#12)]\n [!code-vb[Generic.SortedList#12](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.SortedList/VB/remarks.vb#12)]  \n  \n The `foreach` statement is a wrapper around the enumerator, which only allows reading from, not writing to, the collection.","nodes":[{"pos":[0,439],"content":"The <xref:System.Collections.Generic.SortedList%602> generic class is an array of key/value pairs with O(log `n`) retrieval, where n is the number of elements in the dictionary. In this, it is similar to the <xref:System.Collections.Generic.SortedDictionary%602> generic class. The two classes have similar object models, and both have O(log `n`) retrieval. Where the two classes differ is in memory use and speed of insertion and removal:","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph> generic class is an array of key/value pairs with O(log <ph id=\"ph2\">`n`</ph>) retrieval, where n is the number of elements in the dictionary.","pos":[0,177],"source":"The <xref:System.Collections.Generic.SortedList%602> generic class is an array of key/value pairs with O(log `n`) retrieval, where n is the number of elements in the dictionary."},{"content":"In this, it is similar to the <ph id=\"ph1\">&lt;xref:System.Collections.Generic.SortedDictionary%602&gt;</ph> generic class.","pos":[178,277],"source":" In this, it is similar to the <xref:System.Collections.Generic.SortedDictionary%602> generic class."},{"content":"The two classes have similar object models, and both have O(log <ph id=\"ph1\">`n`</ph>) retrieval.","pos":[278,357],"source":" The two classes have similar object models, and both have O(log `n`) retrieval."},{"content":"Where the two classes differ is in memory use and speed of insertion and removal:","pos":[358,439]}]},{"pos":[449,575],"content":"<xref:System.Collections.Generic.SortedList%602> uses less memory than <xref:System.Collections.Generic.SortedDictionary%602>.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph> uses less memory than <ph id=\"ph2\">&lt;xref:System.Collections.Generic.SortedDictionary%602&gt;</ph>.","pos":[0,126],"source":"<xref:System.Collections.Generic.SortedList%602> uses less memory than <xref:System.Collections.Generic.SortedDictionary%602>."}]},{"pos":[585,788],"content":"<ph id=\"ph1\">&lt;xref:System.Collections.Generic.SortedDictionary%602&gt;</ph> has faster insertion and removal operations for unsorted data, O(log <ph id=\"ph2\">`n`</ph>) as opposed to O(<ph id=\"ph3\">`n`</ph>) for <ph id=\"ph4\">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph>.","source":"<xref:System.Collections.Generic.SortedDictionary%602> has faster insertion and removal operations for unsorted data, O(log `n`) as opposed to O(`n`) for <xref:System.Collections.Generic.SortedList%602>."},{"pos":[798,972],"content":"If the list is populated all at once from sorted data, <xref:System.Collections.Generic.SortedList%602> is faster than <xref:System.Collections.Generic.SortedDictionary%602>.","nodes":[{"content":"If the list is populated all at once from sorted data, <ph id=\"ph1\">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph> is faster than <ph id=\"ph2\">&lt;xref:System.Collections.Generic.SortedDictionary%602&gt;</ph>.","pos":[0,174],"source":"If the list is populated all at once from sorted data, <xref:System.Collections.Generic.SortedList%602> is faster than <xref:System.Collections.Generic.SortedDictionary%602>."}]},{"pos":[979,1739],"content":"Another difference between the <xref:System.Collections.Generic.SortedDictionary%602> and <xref:System.Collections.Generic.SortedList%602> classes is that <xref:System.Collections.Generic.SortedList%602> supports efficient indexed retrieval of keys and values through the collections returned by the <xref:System.Collections.Generic.SortedList%602.Keys%2A> and <xref:System.Collections.Generic.SortedList%602.Values%2A> properties. It is not necessary to regenerate the lists when the properties are accessed, because the lists are just wrappers for the internal arrays of keys and values. The following code shows the use of the <xref:System.Collections.Generic.SortedList%602.Values%2A> property for indexed retrieval of values from a sorted list of strings:","nodes":[{"content":"Another difference between the <xref:System.Collections.Generic.SortedDictionary%602> and <xref:System.Collections.Generic.SortedList%602> classes is that <xref:System.Collections.Generic.SortedList%602> supports efficient indexed retrieval of keys and values through the collections returned by the <xref:System.Collections.Generic.SortedList%602.Keys%2A> and <xref:System.Collections.Generic.SortedList%602.Values%2A> properties. It is not necessary to regenerate the lists when the properties are accessed, because the lists are just wrappers for the internal arrays of keys and values. The following code shows the use of the <xref:System.Collections.Generic.SortedList%602.Values%2A> property for indexed retrieval of values from a sorted list of strings:","pos":[0,760],"nodes":[{"content":"Another difference between the <ph id=\"ph1\">&lt;xref:System.Collections.Generic.SortedDictionary%602&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph> classes is that <ph id=\"ph3\">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph> supports efficient indexed retrieval of keys and values through the collections returned by the <ph id=\"ph4\">&lt;xref:System.Collections.Generic.SortedList%602.Keys%2A&gt;</ph> and <ph id=\"ph5\">&lt;xref:System.Collections.Generic.SortedList%602.Values%2A&gt;</ph> properties.","pos":[0,431],"source":"Another difference between the <xref:System.Collections.Generic.SortedDictionary%602> and <xref:System.Collections.Generic.SortedList%602> classes is that <xref:System.Collections.Generic.SortedList%602> supports efficient indexed retrieval of keys and values through the collections returned by the <xref:System.Collections.Generic.SortedList%602.Keys%2A> and <xref:System.Collections.Generic.SortedList%602.Values%2A> properties."},{"content":"It is not necessary to regenerate the lists when the properties are accessed, because the lists are just wrappers for the internal arrays of keys and values.","pos":[432,589]},{"content":"The following code shows the use of the <ph id=\"ph1\">&lt;xref:System.Collections.Generic.SortedList%602.Values%2A&gt;</ph> property for indexed retrieval of values from a sorted list of strings:","pos":[590,760],"source":" The following code shows the use of the <xref:System.Collections.Generic.SortedList%602.Values%2A> property for indexed retrieval of values from a sorted list of strings:"}]}]},{"pos":[1746,2095],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>Generic.SortedList#11<ept id=\"p2\">](~/samples/snippets/cpp/VS_Snippets_CLR/Generic.SortedList/cpp/remarks.cpp#11)</ept><ept id=\"p1\">]</ept> <bpt id=\"p3\">[!code-csharp</bpt><bpt id=\"p4\">[</bpt>Generic.SortedList#11<ept id=\"p4\">](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.SortedList/CS/remarks.cs#11)</ept><ept id=\"p3\">]</ept> <bpt id=\"p5\">[!code-vb</bpt><bpt id=\"p6\">[</bpt>Generic.SortedList#11<ept id=\"p6\">](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.SortedList/VB/remarks.vb#11)</ept><ept id=\"p5\">]</ept>","leadings":[""," "," "],"source":"[!code-cpp[Generic.SortedList#11](~/samples/snippets/cpp/VS_Snippets_CLR/Generic.SortedList/cpp/remarks.cpp#11)]\n[!code-csharp[Generic.SortedList#11](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.SortedList/CS/remarks.cs#11)]\n[!code-vb[Generic.SortedList#11](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.SortedList/VB/remarks.vb#11)]"},{"pos":[2102,2311],"content":"<xref:System.Collections.Generic.SortedList%602> is implemented as an array of key/value pairs, sorted by the key.  Each element can be retrieved as a <xref:System.Collections.Generic.KeyValuePair%602> object.","nodes":[{"content":"<xref:System.Collections.Generic.SortedList%602> is implemented as an array of key/value pairs, sorted by the key.  Each element can be retrieved as a <xref:System.Collections.Generic.KeyValuePair%602> object.","pos":[0,209],"nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph> is implemented as an array of key/value pairs, sorted by the key.","pos":[0,114],"source":"<xref:System.Collections.Generic.SortedList%602> is implemented as an array of key/value pairs, sorted by the key."},{"content":"Each element can be retrieved as a <ph id=\"ph1\">&lt;xref:System.Collections.Generic.KeyValuePair%602&gt;</ph> object.","pos":[116,209],"source":"  Each element can be retrieved as a <xref:System.Collections.Generic.KeyValuePair%602> object."}]}]},{"pos":[2318,2627],"content":"Key objects must be immutable as long as they are used as keys in the <xref:System.Collections.Generic.SortedList%602>. Every key in a <xref:System.Collections.Generic.SortedList%602> must be unique. A key cannot be `null`, but a value can be, if the type of values in the list, `TValue`, is a reference type.","nodes":[{"content":"Key objects must be immutable as long as they are used as keys in the <ph id=\"ph1\">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph>.","pos":[0,119],"source":"Key objects must be immutable as long as they are used as keys in the <xref:System.Collections.Generic.SortedList%602>."},{"content":"Every key in a <ph id=\"ph1\">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph> must be unique.","pos":[120,199],"source":" Every key in a <xref:System.Collections.Generic.SortedList%602> must be unique."},{"content":"A key cannot be <ph id=\"ph1\">`null`</ph>, but a value can be, if the type of values in the list, <ph id=\"ph2\">`TValue`</ph>, is a reference type.","pos":[200,309],"source":" A key cannot be `null`, but a value can be, if the type of values in the list, `TValue`, is a reference type."}]},{"pos":[2634,3423],"content":"<xref:System.Collections.Generic.SortedList%602> requires a comparer implementation to sort and to perform comparisons.  The default comparer <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=fullName> checks whether the key type `TKey` implements <xref:System.IComparable%601?displayProperty=fullName> and uses that implementation, if available.  If not, <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=fullName> checks whether the key type `TKey` implements <xref:System.IComparable?displayProperty=fullName>.  If the key type `TKey` does not implement either interface, you can specify a <xref:System.Collections.Generic.IComparer%601?displayProperty=fullName> implementation in a constructor overload that accepts a `comparer` parameter.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph> requires a comparer implementation to sort and to perform comparisons.","pos":[0,119],"source":"<xref:System.Collections.Generic.SortedList%602> requires a comparer implementation to sort and to perform comparisons."},{"content":"The default comparer <ph id=\"ph1\">&lt;xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=fullName&gt;</ph> checks whether the key type <ph id=\"ph2\">`TKey`</ph> implements <ph id=\"ph3\">&lt;xref:System.IComparable%601?displayProperty=fullName&gt;</ph> and uses that implementation, if available.","pos":[121,369],"source":"  The default comparer <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=fullName> checks whether the key type `TKey` implements <xref:System.IComparable%601?displayProperty=fullName> and uses that implementation, if available."},{"content":"If not, <ph id=\"ph1\">&lt;xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=fullName&gt;</ph> checks whether the key type <ph id=\"ph2\">`TKey`</ph> implements <ph id=\"ph3\">&lt;xref:System.IComparable?displayProperty=fullName&gt;</ph>.","pos":[371,559],"source":"  If not, <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=fullName> checks whether the key type `TKey` implements <xref:System.IComparable?displayProperty=fullName>."},{"content":"If the key type <ph id=\"ph1\">`TKey`</ph> does not implement either interface, you can specify a <ph id=\"ph2\">&lt;xref:System.Collections.Generic.IComparer%601?displayProperty=fullName&gt;</ph> implementation in a constructor overload that accepts a <ph id=\"ph3\">`comparer`</ph> parameter.","pos":[561,789],"source":"  If the key type `TKey` does not implement either interface, you can specify a <xref:System.Collections.Generic.IComparer%601?displayProperty=fullName> implementation in a constructor overload that accepts a `comparer` parameter."}]},{"pos":[3430,4082],"content":"The capacity of a <xref:System.Collections.Generic.SortedList%602> is the number of elements the <xref:System.Collections.Generic.SortedList%602> can hold. As elements are added to a <xref:System.Collections.Generic.SortedList%602>, the capacity is automatically increased as required by reallocating the internal array. The capacity can be decreased by calling <xref:System.Collections.Generic.SortedList%602.TrimExcess%2A> or by setting the <xref:System.Collections.Generic.SortedList%602.Capacity%2A> property explicitly. Decreasing the capacity reallocates memory and copies all the elements in the <xref:System.Collections.Generic.SortedList%602>.","nodes":[{"content":"The capacity of a <xref:System.Collections.Generic.SortedList%602> is the number of elements the <xref:System.Collections.Generic.SortedList%602> can hold. As elements are added to a <xref:System.Collections.Generic.SortedList%602>, the capacity is automatically increased as required by reallocating the internal array. The capacity can be decreased by calling <xref:System.Collections.Generic.SortedList%602.TrimExcess%2A> or by setting the <xref:System.Collections.Generic.SortedList%602.Capacity%2A> property explicitly. Decreasing the capacity reallocates memory and copies all the elements in the <xref:System.Collections.Generic.SortedList%602>.","pos":[0,652],"nodes":[{"content":"The capacity of a <ph id=\"ph1\">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph> is the number of elements the <ph id=\"ph2\">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph> can hold.","pos":[0,155],"source":"The capacity of a <xref:System.Collections.Generic.SortedList%602> is the number of elements the <xref:System.Collections.Generic.SortedList%602> can hold."},{"content":"As elements are added to a <ph id=\"ph1\">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph>, the capacity is automatically increased as required by reallocating the internal array.","pos":[156,320],"source":" As elements are added to a <xref:System.Collections.Generic.SortedList%602>, the capacity is automatically increased as required by reallocating the internal array."},{"content":"The capacity can be decreased by calling <ph id=\"ph1\">&lt;xref:System.Collections.Generic.SortedList%602.TrimExcess%2A&gt;</ph> or by setting the <ph id=\"ph2\">&lt;xref:System.Collections.Generic.SortedList%602.Capacity%2A&gt;</ph> property explicitly.","pos":[321,524],"source":" The capacity can be decreased by calling <xref:System.Collections.Generic.SortedList%602.TrimExcess%2A> or by setting the <xref:System.Collections.Generic.SortedList%602.Capacity%2A> property explicitly."},{"content":"Decreasing the capacity reallocates memory and copies all the elements in the <ph id=\"ph1\">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph>.","pos":[525,652],"source":" Decreasing the capacity reallocates memory and copies all the elements in the <xref:System.Collections.Generic.SortedList%602>."}]}]},{"pos":[4089,4344],"content":"For very large <ph id=\"ph1\">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph> objects, you can increase the maximum capacity to 2 billion elements on a 64-bit system by setting the <ph id=\"ph2\">`enabled`</ph> attribute of the  configuration element to <ph id=\"ph3\">`true`</ph> in the run-time environment.","source":"For very large <xref:System.Collections.Generic.SortedList%602> objects, you can increase the maximum capacity to 2 billion elements on a 64-bit system by setting the `enabled` attribute of the  configuration element to `true` in the run-time environment."},{"pos":[4351,4766],"content":"The `foreach` statement of the C# language (`for each` in C++, `For Each` in Visual Basic) returns an object of the type of the elements in the collection. Since the elements of the <xref:System.Collections.Generic.SortedList%602> are key/value pairs, the element type is not the type of the key or the type of the value. Instead, the element type is <xref:System.Collections.Generic.KeyValuePair%602>. For example:","nodes":[{"content":"The <ph id=\"ph1\">`foreach`</ph> statement of the C# language (<ph id=\"ph2\">`for each`</ph> in C++, <ph id=\"ph3\">`For Each`</ph> in Visual Basic) returns an object of the type of the elements in the collection.","pos":[0,155],"source":"The `foreach` statement of the C# language (`for each` in C++, `For Each` in Visual Basic) returns an object of the type of the elements in the collection."},{"content":"Since the elements of the <ph id=\"ph1\">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph> are key/value pairs, the element type is not the type of the key or the type of the value.","pos":[156,321],"source":" Since the elements of the <xref:System.Collections.Generic.SortedList%602> are key/value pairs, the element type is not the type of the key or the type of the value."},{"content":"Instead, the element type is <ph id=\"ph1\">&lt;xref:System.Collections.Generic.KeyValuePair%602&gt;</ph>.","pos":[322,402],"source":" Instead, the element type is <xref:System.Collections.Generic.KeyValuePair%602>."},{"content":"For example:","pos":[403,415]}]},{"pos":[4773,5122],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>Generic.SortedList#12<ept id=\"p2\">](~/samples/snippets/cpp/VS_Snippets_CLR/Generic.SortedList/cpp/remarks.cpp#12)</ept><ept id=\"p1\">]</ept> <bpt id=\"p3\">[!code-csharp</bpt><bpt id=\"p4\">[</bpt>Generic.SortedList#12<ept id=\"p4\">](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.SortedList/CS/remarks.cs#12)</ept><ept id=\"p3\">]</ept> <bpt id=\"p5\">[!code-vb</bpt><bpt id=\"p6\">[</bpt>Generic.SortedList#12<ept id=\"p6\">](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.SortedList/VB/remarks.vb#12)</ept><ept id=\"p5\">]</ept>","leadings":[""," "," "],"source":"[!code-cpp[Generic.SortedList#12](~/samples/snippets/cpp/VS_Snippets_CLR/Generic.SortedList/cpp/remarks.cpp#12)]\n[!code-csharp[Generic.SortedList#12](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.SortedList/CS/remarks.cs#12)]\n[!code-vb[Generic.SortedList#12](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.SortedList/VB/remarks.vb#12)]"},{"pos":[5129,5252],"content":"The <ph id=\"ph1\">`foreach`</ph> statement is a wrapper around the enumerator, which only allows reading from, not writing to, the collection.","source":"The `foreach` statement is a wrapper around the enumerator, which only allows reading from, not writing to, the collection."}],"pos":[4831,10116],"yaml":true,"extradata":"MT"},{"content":"The type of keys in the collection.","nodes":[{"pos":[0,35],"content":"The type of keys in the collection.","nodes":[{"content":"The type of keys in the collection.","pos":[0,35]}]}],"pos":[12657,12693],"yaml":true},{"content":"The type of values in the collection.","nodes":[{"pos":[0,37],"content":"The type of values in the collection.","nodes":[{"content":"The type of values in the collection.","pos":[0,37]}]}],"pos":[12729,12767],"yaml":true},{"content":"Initializes a new instance of the <xref href=\"System.Collections.Generic.SortedList`2\"></xref> class that is empty, has the default initial capacity, and uses the default <xref href=\"System.Collections.Generic.IComparer`1\"></xref>.","nodes":[{"pos":[0,231],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.SortedList`2\"&gt;&lt;/xref&gt;</ph> class that is empty, has the default initial capacity, and uses the default <ph id=\"ph2\">&lt;xref href=\"System.Collections.Generic.IComparer`1\"&gt;&lt;/xref&gt;</ph>.","source":"Initializes a new instance of the <xref href=\"System.Collections.Generic.SortedList`2\"></xref> class that is empty, has the default initial capacity, and uses the default <xref href=\"System.Collections.Generic.IComparer`1\"></xref>."}],"pos":[42517,42749],"yaml":true},{"content":"Every key in a <xref:System.Collections.Generic.SortedList%602> must be unique according to the default comparer.  \n  \n This constructor uses the default value for the initial capacity of the <xref:System.Collections.Generic.SortedList%602>. To set the initial capacity, use the <xref:System.Collections.Generic.SortedList%602.%23ctor%28System.Int32%29> constructor. If the final size of the collection can be estimated, specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <xref:System.Collections.Generic.SortedList%602>.  \n  \n This constructor uses the default comparer for `TKey`. To specify a comparer, use the <xref:System.Collections.Generic.SortedList%602.%23ctor%28System.Collections.Generic.IComparer%7B%600%7D%29> constructor. The default comparer <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=fullName> checks whether the key type `TKey` implements <xref:System.IComparable%601?displayProperty=fullName> and uses that implementation, if available.  If not, <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=fullName> checks whether the key type `TKey` implements <xref:System.IComparable?displayProperty=fullName>.  If the key type `TKey` does not implement either interface, you can specify a <xref:System.Collections.Generic.IComparer%601?displayProperty=fullName> implementation in a constructor overload that accepts a `comparer` parameter.  \n  \n This constructor is an O(1) operation.","nodes":[{"pos":[0,113],"content":"Every key in a <xref:System.Collections.Generic.SortedList%602> must be unique according to the default comparer.","nodes":[{"content":"Every key in a <ph id=\"ph1\">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph> must be unique according to the default comparer.","pos":[0,113],"source":"Every key in a <xref:System.Collections.Generic.SortedList%602> must be unique according to the default comparer."}]},{"pos":[120,594],"content":"This constructor uses the default value for the initial capacity of the <xref:System.Collections.Generic.SortedList%602>. To set the initial capacity, use the <xref:System.Collections.Generic.SortedList%602.%23ctor%28System.Int32%29> constructor. If the final size of the collection can be estimated, specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <xref:System.Collections.Generic.SortedList%602>.","nodes":[{"content":"This constructor uses the default value for the initial capacity of the <xref:System.Collections.Generic.SortedList%602>. To set the initial capacity, use the <xref:System.Collections.Generic.SortedList%602.%23ctor%28System.Int32%29> constructor. If the final size of the collection can be estimated, specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <xref:System.Collections.Generic.SortedList%602>.","pos":[0,474],"nodes":[{"content":"This constructor uses the default value for the initial capacity of the <ph id=\"ph1\">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph>.","pos":[0,121],"source":"This constructor uses the default value for the initial capacity of the <xref:System.Collections.Generic.SortedList%602>."},{"content":"To set the initial capacity, use the <ph id=\"ph1\">&lt;xref:System.Collections.Generic.SortedList%602.%23ctor%28System.Int32%29&gt;</ph> constructor.","pos":[122,246],"source":" To set the initial capacity, use the <xref:System.Collections.Generic.SortedList%602.%23ctor%28System.Int32%29> constructor."},{"content":"If the final size of the collection can be estimated, specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <ph id=\"ph1\">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph>.","pos":[247,474],"source":" If the final size of the collection can be estimated, specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <xref:System.Collections.Generic.SortedList%602>."}]}]},{"pos":[601,1477],"content":"This constructor uses the default comparer for `TKey`. To specify a comparer, use the <xref:System.Collections.Generic.SortedList%602.%23ctor%28System.Collections.Generic.IComparer%7B%600%7D%29> constructor. The default comparer <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=fullName> checks whether the key type `TKey` implements <xref:System.IComparable%601?displayProperty=fullName> and uses that implementation, if available.  If not, <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=fullName> checks whether the key type `TKey` implements <xref:System.IComparable?displayProperty=fullName>.  If the key type `TKey` does not implement either interface, you can specify a <xref:System.Collections.Generic.IComparer%601?displayProperty=fullName> implementation in a constructor overload that accepts a `comparer` parameter.","nodes":[{"content":"This constructor uses the default comparer for <ph id=\"ph1\">`TKey`</ph>.","pos":[0,54],"source":"This constructor uses the default comparer for `TKey`."},{"content":"To specify a comparer, use the <ph id=\"ph1\">&lt;xref:System.Collections.Generic.SortedList%602.%23ctor%28System.Collections.Generic.IComparer%7B%600%7D%29&gt;</ph> constructor.","pos":[55,207],"source":" To specify a comparer, use the <xref:System.Collections.Generic.SortedList%602.%23ctor%28System.Collections.Generic.IComparer%7B%600%7D%29> constructor."},{"content":"The default comparer <ph id=\"ph1\">&lt;xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=fullName&gt;</ph> checks whether the key type <ph id=\"ph2\">`TKey`</ph> implements <ph id=\"ph3\">&lt;xref:System.IComparable%601?displayProperty=fullName&gt;</ph> and uses that implementation, if available.","pos":[208,456],"source":" The default comparer <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=fullName> checks whether the key type `TKey` implements <xref:System.IComparable%601?displayProperty=fullName> and uses that implementation, if available."},{"content":"If not, <ph id=\"ph1\">&lt;xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=fullName&gt;</ph> checks whether the key type <ph id=\"ph2\">`TKey`</ph> implements <ph id=\"ph3\">&lt;xref:System.IComparable?displayProperty=fullName&gt;</ph>.","pos":[458,646],"source":"  If not, <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=fullName> checks whether the key type `TKey` implements <xref:System.IComparable?displayProperty=fullName>."},{"content":"If the key type <ph id=\"ph1\">`TKey`</ph> does not implement either interface, you can specify a <ph id=\"ph2\">&lt;xref:System.Collections.Generic.IComparer%601?displayProperty=fullName&gt;</ph> implementation in a constructor overload that accepts a <ph id=\"ph3\">`comparer`</ph> parameter.","pos":[648,876],"source":"  If the key type `TKey` does not implement either interface, you can specify a <xref:System.Collections.Generic.IComparer%601?displayProperty=fullName> implementation in a constructor overload that accepts a `comparer` parameter."}]},{"pos":[1484,1522],"content":"This constructor is an O(1) operation.","nodes":[{"content":"This constructor is an O(1) operation.","pos":[0,38]}]}],"pos":[42760,44291],"yaml":true,"extradata":"MT"},{"content":"Initializes a new instance of the <xref href=\"System.Collections.Generic.SortedList`2\"></xref> class that is empty, has the default initial capacity, and uses the specified <xref href=\"System.Collections.Generic.IComparer`1\"></xref>.","nodes":[{"pos":[0,233],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.SortedList`2\"&gt;&lt;/xref&gt;</ph> class that is empty, has the default initial capacity, and uses the specified <ph id=\"ph2\">&lt;xref href=\"System.Collections.Generic.IComparer`1\"&gt;&lt;/xref&gt;</ph>.","source":"Initializes a new instance of the <xref href=\"System.Collections.Generic.SortedList`2\"></xref> class that is empty, has the default initial capacity, and uses the specified <xref href=\"System.Collections.Generic.IComparer`1\"></xref>."}],"pos":[46907,47141],"yaml":true},{"content":"Every key in a <xref:System.Collections.Generic.SortedList%602> must be unique according to the specified comparer.  \n  \n This constructor uses the default value for the initial capacity of the <xref:System.Collections.Generic.SortedList%602>. To set the initial capacity, use the <xref:System.Collections.Generic.SortedList%602.%23ctor%28System.Int32%2CSystem.Collections.Generic.IComparer%7B%600%7D%29> constructor. If the final size of the collection can be estimated, specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <xref:System.Collections.Generic.SortedList%602>.  \n  \n This constructor is an O(1) operation.","nodes":[{"pos":[0,115],"content":"Every key in a <xref:System.Collections.Generic.SortedList%602> must be unique according to the specified comparer.","nodes":[{"content":"Every key in a <ph id=\"ph1\">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph> must be unique according to the specified comparer.","pos":[0,115],"source":"Every key in a <xref:System.Collections.Generic.SortedList%602> must be unique according to the specified comparer."}]},{"pos":[122,645],"content":"This constructor uses the default value for the initial capacity of the <xref:System.Collections.Generic.SortedList%602>. To set the initial capacity, use the <xref:System.Collections.Generic.SortedList%602.%23ctor%28System.Int32%2CSystem.Collections.Generic.IComparer%7B%600%7D%29> constructor. If the final size of the collection can be estimated, specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <xref:System.Collections.Generic.SortedList%602>.","nodes":[{"content":"This constructor uses the default value for the initial capacity of the <xref:System.Collections.Generic.SortedList%602>. To set the initial capacity, use the <xref:System.Collections.Generic.SortedList%602.%23ctor%28System.Int32%2CSystem.Collections.Generic.IComparer%7B%600%7D%29> constructor. If the final size of the collection can be estimated, specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <xref:System.Collections.Generic.SortedList%602>.","pos":[0,523],"nodes":[{"content":"This constructor uses the default value for the initial capacity of the <ph id=\"ph1\">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph>.","pos":[0,121],"source":"This constructor uses the default value for the initial capacity of the <xref:System.Collections.Generic.SortedList%602>."},{"content":"To set the initial capacity, use the <ph id=\"ph1\">&lt;xref:System.Collections.Generic.SortedList%602.%23ctor%28System.Int32%2CSystem.Collections.Generic.IComparer%7B%600%7D%29&gt;</ph> constructor.","pos":[122,295],"source":" To set the initial capacity, use the <xref:System.Collections.Generic.SortedList%602.%23ctor%28System.Int32%2CSystem.Collections.Generic.IComparer%7B%600%7D%29> constructor."},{"content":"If the final size of the collection can be estimated, specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <ph id=\"ph1\">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph>.","pos":[296,523],"source":" If the final size of the collection can be estimated, specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <xref:System.Collections.Generic.SortedList%602>."}]}]},{"pos":[652,690],"content":"This constructor is an O(1) operation.","nodes":[{"content":"This constructor is an O(1) operation.","pos":[0,38]}]}],"pos":[47152,47849],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Collections.Generic.IComparer`1\"></xref> implementation to use when comparing keys.  \n  \n -or-  \n  \n `null` to use the default <xref href=\"System.Collections.Generic.Comparer`1\"></xref> for the type of the key.","nodes":[{"pos":[0,106],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.IComparer`1\"&gt;&lt;/xref&gt;</ph> implementation to use when comparing keys.","source":"The <xref href=\"System.Collections.Generic.IComparer`1\"></xref> implementation to use when comparing keys."},{"pos":[113,117],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[124,233],"content":"<ph id=\"ph1\">`null`</ph> to use the default <ph id=\"ph2\">&lt;xref href=\"System.Collections.Generic.Comparer`1\"&gt;&lt;/xref&gt;</ph> for the type of the key.","source":"`null` to use the default <xref href=\"System.Collections.Generic.Comparer`1\"></xref> for the type of the key."}],"pos":[48792,49036],"yaml":true},{"content":"Initializes a new instance of the <xref href=\"System.Collections.Generic.SortedList`2\"></xref> class that contains elements copied from the specified <xref href=\"System.Collections.Generic.IDictionary`2\"></xref>, has sufficient capacity to accommodate the number of elements copied, and uses the default <xref href=\"System.Collections.Generic.IComparer`1\"></xref>.","nodes":[{"pos":[0,364],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.SortedList`2\"&gt;&lt;/xref&gt;</ph> class that contains elements copied from the specified <ph id=\"ph2\">&lt;xref href=\"System.Collections.Generic.IDictionary`2\"&gt;&lt;/xref&gt;</ph>, has sufficient capacity to accommodate the number of elements copied, and uses the default <ph id=\"ph3\">&lt;xref href=\"System.Collections.Generic.IComparer`1\"&gt;&lt;/xref&gt;</ph>.","source":"Initializes a new instance of the <xref href=\"System.Collections.Generic.SortedList`2\"></xref> class that contains elements copied from the specified <xref href=\"System.Collections.Generic.IDictionary`2\"></xref>, has sufficient capacity to accommodate the number of elements copied, and uses the default <xref href=\"System.Collections.Generic.IComparer`1\"></xref>."}],"pos":[50737,51102],"yaml":true},{"content":"Every key in a <xref:System.Collections.Generic.SortedList%602> must be unique according to the default comparer; likewise, every key in the source `dictionary` must also be unique according to the default comparer.  \n  \n The capacity of the new <xref:System.Collections.Generic.SortedList%602> is set to the number of elements in `dictionary`, so no resizing takes place while the list is being populated.  \n  \n This constructor uses the default comparer for `TKey`. To specify a comparer, use the <xref:System.Collections.Generic.SortedList%602.%23ctor%28System.Collections.Generic.IDictionary%7B%600%2C%601%7D%2CSystem.Collections.Generic.IComparer%7B%600%7D%29> constructor. The default comparer <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=fullName> checks whether the key type `TKey` implements <xref:System.IComparable%601?displayProperty=fullName> and uses that implementation, if available.  If not, <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=fullName> checks whether the key type `TKey` implements <xref:System.IComparable?displayProperty=fullName>.  If the key type `TKey` does not implement either interface, you can specify a <xref:System.Collections.Generic.IComparer%601?displayProperty=fullName> implementation in a constructor overload that accepts a `comparer` parameter.  \n  \n If the data in `dictionary` are sorted, this constructor is an O(`n`) operation, where `n` is the number of elements in `dictionary`. Otherwise it is an O(`n`*`n`) operation.","nodes":[{"pos":[0,215],"content":"Every key in a <ph id=\"ph1\">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph> must be unique according to the default comparer; likewise, every key in the source <ph id=\"ph2\">`dictionary`</ph> must also be unique according to the default comparer.","source":"Every key in a <xref:System.Collections.Generic.SortedList%602> must be unique according to the default comparer; likewise, every key in the source `dictionary` must also be unique according to the default comparer."},{"pos":[222,406],"content":"The capacity of the new <ph id=\"ph1\">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph> is set to the number of elements in <ph id=\"ph2\">`dictionary`</ph>, so no resizing takes place while the list is being populated.","source":"The capacity of the new <xref:System.Collections.Generic.SortedList%602> is set to the number of elements in `dictionary`, so no resizing takes place while the list is being populated."},{"pos":[413,1347],"content":"This constructor uses the default comparer for `TKey`. To specify a comparer, use the <xref:System.Collections.Generic.SortedList%602.%23ctor%28System.Collections.Generic.IDictionary%7B%600%2C%601%7D%2CSystem.Collections.Generic.IComparer%7B%600%7D%29> constructor. The default comparer <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=fullName> checks whether the key type `TKey` implements <xref:System.IComparable%601?displayProperty=fullName> and uses that implementation, if available.  If not, <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=fullName> checks whether the key type `TKey` implements <xref:System.IComparable?displayProperty=fullName>.  If the key type `TKey` does not implement either interface, you can specify a <xref:System.Collections.Generic.IComparer%601?displayProperty=fullName> implementation in a constructor overload that accepts a `comparer` parameter.","nodes":[{"content":"This constructor uses the default comparer for <ph id=\"ph1\">`TKey`</ph>.","pos":[0,54],"source":"This constructor uses the default comparer for `TKey`."},{"content":"To specify a comparer, use the <ph id=\"ph1\">&lt;xref:System.Collections.Generic.SortedList%602.%23ctor%28System.Collections.Generic.IDictionary%7B%600%2C%601%7D%2CSystem.Collections.Generic.IComparer%7B%600%7D%29&gt;</ph> constructor.","pos":[55,265],"source":" To specify a comparer, use the <xref:System.Collections.Generic.SortedList%602.%23ctor%28System.Collections.Generic.IDictionary%7B%600%2C%601%7D%2CSystem.Collections.Generic.IComparer%7B%600%7D%29> constructor."},{"content":"The default comparer <ph id=\"ph1\">&lt;xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=fullName&gt;</ph> checks whether the key type <ph id=\"ph2\">`TKey`</ph> implements <ph id=\"ph3\">&lt;xref:System.IComparable%601?displayProperty=fullName&gt;</ph> and uses that implementation, if available.","pos":[266,514],"source":" The default comparer <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=fullName> checks whether the key type `TKey` implements <xref:System.IComparable%601?displayProperty=fullName> and uses that implementation, if available."},{"content":"If not, <ph id=\"ph1\">&lt;xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=fullName&gt;</ph> checks whether the key type <ph id=\"ph2\">`TKey`</ph> implements <ph id=\"ph3\">&lt;xref:System.IComparable?displayProperty=fullName&gt;</ph>.","pos":[516,704],"source":"  If not, <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=fullName> checks whether the key type `TKey` implements <xref:System.IComparable?displayProperty=fullName>."},{"content":"If the key type <ph id=\"ph1\">`TKey`</ph> does not implement either interface, you can specify a <ph id=\"ph2\">&lt;xref:System.Collections.Generic.IComparer%601?displayProperty=fullName&gt;</ph> implementation in a constructor overload that accepts a <ph id=\"ph3\">`comparer`</ph> parameter.","pos":[706,934],"source":"  If the key type `TKey` does not implement either interface, you can specify a <xref:System.Collections.Generic.IComparer%601?displayProperty=fullName> implementation in a constructor overload that accepts a `comparer` parameter."}]},{"pos":[1354,1528],"content":"If the data in `dictionary` are sorted, this constructor is an O(`n`) operation, where `n` is the number of elements in `dictionary`. Otherwise it is an O(`n`*`n`) operation.","nodes":[{"content":"If the data in <ph id=\"ph1\">`dictionary`</ph> are sorted, this constructor is an O(<ph id=\"ph2\">`n`</ph>) operation, where <ph id=\"ph3\">`n`</ph> is the number of elements in <ph id=\"ph4\">`dictionary`</ph>.","pos":[0,133],"source":"If the data in `dictionary` are sorted, this constructor is an O(`n`) operation, where `n` is the number of elements in `dictionary`."},{"content":"Otherwise it is an O(<ph id=\"ph1\">`n`</ph><ph id=\"ph2\">*</ph><ph id=\"ph3\">`n`</ph>) operation.","pos":[134,174],"source":" Otherwise it is an O(`n`*`n`) operation."}]}],"pos":[51113,52650],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Collections.Generic.IDictionary`2\"></xref> whose elements are copied to the new <xref href=\"System.Collections.Generic.SortedList`2\"></xref>.","nodes":[{"pos":[0,164],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.IDictionary`2\"&gt;&lt;/xref&gt;</ph> whose elements are copied to the new <ph id=\"ph2\">&lt;xref href=\"System.Collections.Generic.SortedList`2\"&gt;&lt;/xref&gt;</ph>.","source":"The <xref href=\"System.Collections.Generic.IDictionary`2\"></xref> whose elements are copied to the new <xref href=\"System.Collections.Generic.SortedList`2\"></xref>."}],"pos":[53555,53720],"yaml":true},{"content":"<code>dictionary</code> is `null`.","nodes":[{"pos":[0,34],"content":"<ph id=\"ph1\">&lt;code&gt;dictionary&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>dictionary</code> is `null`."}],"pos":[53895,53930],"yaml":true},{"content":"<code>dictionary</code> contains one or more duplicate keys.","nodes":[{"pos":[0,60],"content":"<ph id=\"ph1\">&lt;code&gt;dictionary&lt;/code&gt;</ph> contains one or more duplicate keys.","source":"<code>dictionary</code> contains one or more duplicate keys."}],"pos":[54024,54085],"yaml":true},{"content":"Initializes a new instance of the <xref href=\"System.Collections.Generic.SortedList`2\"></xref> class that is empty, has the specified initial capacity, and uses the default <xref href=\"System.Collections.Generic.IComparer`1\"></xref>.","nodes":[{"pos":[0,233],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.SortedList`2\"&gt;&lt;/xref&gt;</ph> class that is empty, has the specified initial capacity, and uses the default <ph id=\"ph2\">&lt;xref href=\"System.Collections.Generic.IComparer`1\"&gt;&lt;/xref&gt;</ph>.","source":"Initializes a new instance of the <xref href=\"System.Collections.Generic.SortedList`2\"></xref> class that is empty, has the specified initial capacity, and uses the default <xref href=\"System.Collections.Generic.IComparer`1\"></xref>."}],"pos":[55554,55788],"yaml":true},{"content":"Every key in a <xref:System.Collections.Generic.SortedList%602> must be unique according to the default comparer.  \n  \n The capacity of a <xref:System.Collections.Generic.SortedList%602> is the number of elements that the <xref:System.Collections.Generic.SortedList%602> can hold before resizing. As elements are added to a <xref:System.Collections.Generic.SortedList%602>, the capacity is automatically increased as required by reallocating the internal array.  \n  \n If the size of the collection can be estimated, specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <xref:System.Collections.Generic.SortedList%602>.  \n  \n The capacity can be decreased by calling <xref:System.Collections.Generic.SortedList%602.TrimExcess%2A> or by setting the <xref:System.Collections.Generic.SortedList%602.Capacity%2A> property explicitly. Decreasing the capacity reallocates memory and copies all the elements in the <xref:System.Collections.Generic.SortedList%602>.  \n  \n This constructor uses the default comparer for `TKey`. To specify a comparer, use the <xref:System.Collections.Generic.SortedList%602.%23ctor%28System.Int32%2CSystem.Collections.Generic.IComparer%7B%600%7D%29> constructor. The default comparer <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=fullName> checks whether the key type `TKey` implements <xref:System.IComparable%601?displayProperty=fullName> and uses that implementation, if available.  If not, <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=fullName> checks whether the key type `TKey` implements <xref:System.IComparable?displayProperty=fullName>.  If the key type `TKey` does not implement either interface, you can specify a <xref:System.Collections.Generic.IComparer%601?displayProperty=fullName> implementation in a constructor overload that accepts a `comparer` parameter.  \n  \n This constructor is an O(`n`) operation, where `n` is `capacity`.","nodes":[{"pos":[0,113],"content":"Every key in a <xref:System.Collections.Generic.SortedList%602> must be unique according to the default comparer.","nodes":[{"content":"Every key in a <ph id=\"ph1\">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph> must be unique according to the default comparer.","pos":[0,113],"source":"Every key in a <xref:System.Collections.Generic.SortedList%602> must be unique according to the default comparer."}]},{"pos":[120,461],"content":"The capacity of a <xref:System.Collections.Generic.SortedList%602> is the number of elements that the <xref:System.Collections.Generic.SortedList%602> can hold before resizing. As elements are added to a <xref:System.Collections.Generic.SortedList%602>, the capacity is automatically increased as required by reallocating the internal array.","nodes":[{"content":"The capacity of a <xref:System.Collections.Generic.SortedList%602> is the number of elements that the <xref:System.Collections.Generic.SortedList%602> can hold before resizing. As elements are added to a <xref:System.Collections.Generic.SortedList%602>, the capacity is automatically increased as required by reallocating the internal array.","pos":[0,341],"nodes":[{"content":"The capacity of a <ph id=\"ph1\">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph> is the number of elements that the <ph id=\"ph2\">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph> can hold before resizing.","pos":[0,176],"source":"The capacity of a <xref:System.Collections.Generic.SortedList%602> is the number of elements that the <xref:System.Collections.Generic.SortedList%602> can hold before resizing."},{"content":"As elements are added to a <ph id=\"ph1\">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph>, the capacity is automatically increased as required by reallocating the internal array.","pos":[177,341],"source":" As elements are added to a <xref:System.Collections.Generic.SortedList%602>, the capacity is automatically increased as required by reallocating the internal array."}]}]},{"pos":[468,689],"content":"If the size of the collection can be estimated, specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <xref:System.Collections.Generic.SortedList%602>.","nodes":[{"content":"If the size of the collection can be estimated, specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <ph id=\"ph1\">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph>.","pos":[0,221],"source":"If the size of the collection can be estimated, specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <xref:System.Collections.Generic.SortedList%602>."}]},{"pos":[696,1027],"content":"The capacity can be decreased by calling <xref:System.Collections.Generic.SortedList%602.TrimExcess%2A> or by setting the <xref:System.Collections.Generic.SortedList%602.Capacity%2A> property explicitly. Decreasing the capacity reallocates memory and copies all the elements in the <xref:System.Collections.Generic.SortedList%602>.","nodes":[{"content":"The capacity can be decreased by calling <xref:System.Collections.Generic.SortedList%602.TrimExcess%2A> or by setting the <xref:System.Collections.Generic.SortedList%602.Capacity%2A> property explicitly. Decreasing the capacity reallocates memory and copies all the elements in the <xref:System.Collections.Generic.SortedList%602>.","pos":[0,331],"nodes":[{"content":"The capacity can be decreased by calling <ph id=\"ph1\">&lt;xref:System.Collections.Generic.SortedList%602.TrimExcess%2A&gt;</ph> or by setting the <ph id=\"ph2\">&lt;xref:System.Collections.Generic.SortedList%602.Capacity%2A&gt;</ph> property explicitly.","pos":[0,203],"source":"The capacity can be decreased by calling <xref:System.Collections.Generic.SortedList%602.TrimExcess%2A> or by setting the <xref:System.Collections.Generic.SortedList%602.Capacity%2A> property explicitly."},{"content":"Decreasing the capacity reallocates memory and copies all the elements in the <ph id=\"ph1\">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph>.","pos":[204,331],"source":" Decreasing the capacity reallocates memory and copies all the elements in the <xref:System.Collections.Generic.SortedList%602>."}]}]},{"pos":[1034,1925],"content":"This constructor uses the default comparer for `TKey`. To specify a comparer, use the <xref:System.Collections.Generic.SortedList%602.%23ctor%28System.Int32%2CSystem.Collections.Generic.IComparer%7B%600%7D%29> constructor. The default comparer <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=fullName> checks whether the key type `TKey` implements <xref:System.IComparable%601?displayProperty=fullName> and uses that implementation, if available.  If not, <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=fullName> checks whether the key type `TKey` implements <xref:System.IComparable?displayProperty=fullName>.  If the key type `TKey` does not implement either interface, you can specify a <xref:System.Collections.Generic.IComparer%601?displayProperty=fullName> implementation in a constructor overload that accepts a `comparer` parameter.","nodes":[{"content":"This constructor uses the default comparer for <ph id=\"ph1\">`TKey`</ph>.","pos":[0,54],"source":"This constructor uses the default comparer for `TKey`."},{"content":"To specify a comparer, use the <ph id=\"ph1\">&lt;xref:System.Collections.Generic.SortedList%602.%23ctor%28System.Int32%2CSystem.Collections.Generic.IComparer%7B%600%7D%29&gt;</ph> constructor.","pos":[55,222],"source":" To specify a comparer, use the <xref:System.Collections.Generic.SortedList%602.%23ctor%28System.Int32%2CSystem.Collections.Generic.IComparer%7B%600%7D%29> constructor."},{"content":"The default comparer <ph id=\"ph1\">&lt;xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=fullName&gt;</ph> checks whether the key type <ph id=\"ph2\">`TKey`</ph> implements <ph id=\"ph3\">&lt;xref:System.IComparable%601?displayProperty=fullName&gt;</ph> and uses that implementation, if available.","pos":[223,471],"source":" The default comparer <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=fullName> checks whether the key type `TKey` implements <xref:System.IComparable%601?displayProperty=fullName> and uses that implementation, if available."},{"content":"If not, <ph id=\"ph1\">&lt;xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=fullName&gt;</ph> checks whether the key type <ph id=\"ph2\">`TKey`</ph> implements <ph id=\"ph3\">&lt;xref:System.IComparable?displayProperty=fullName&gt;</ph>.","pos":[473,661],"source":"  If not, <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=fullName> checks whether the key type `TKey` implements <xref:System.IComparable?displayProperty=fullName>."},{"content":"If the key type <ph id=\"ph1\">`TKey`</ph> does not implement either interface, you can specify a <ph id=\"ph2\">&lt;xref:System.Collections.Generic.IComparer%601?displayProperty=fullName&gt;</ph> implementation in a constructor overload that accepts a <ph id=\"ph3\">`comparer`</ph> parameter.","pos":[663,891],"source":"  If the key type `TKey` does not implement either interface, you can specify a <xref:System.Collections.Generic.IComparer%601?displayProperty=fullName> implementation in a constructor overload that accepts a `comparer` parameter."}]},{"pos":[1932,1997],"content":"This constructor is an O(<ph id=\"ph1\">`n`</ph>) operation, where <ph id=\"ph2\">`n`</ph> is <ph id=\"ph3\">`capacity`</ph>.","source":"This constructor is an O(`n`) operation, where `n` is `capacity`."}],"pos":[55799,57809],"yaml":true,"extradata":"MT"},{"content":"The initial number of elements that the <xref href=\"System.Collections.Generic.SortedList`2\"></xref> can contain.","nodes":[{"pos":[0,113],"content":"The initial number of elements that the <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.SortedList`2\"&gt;&lt;/xref&gt;</ph> can contain.","source":"The initial number of elements that the <xref href=\"System.Collections.Generic.SortedList`2\"></xref> can contain."}],"pos":[58357,58471],"yaml":true},{"content":"<code>capacity</code> is less than zero.","nodes":[{"pos":[0,40],"content":"<ph id=\"ph1\">&lt;code&gt;capacity&lt;/code&gt;</ph> is less than zero.","source":"<code>capacity</code> is less than zero."}],"pos":[58658,58699],"yaml":true},{"content":"Initializes a new instance of the <xref href=\"System.Collections.Generic.SortedList`2\"></xref> class that contains elements copied from the specified <xref href=\"System.Collections.Generic.IDictionary`2\"></xref>, has sufficient capacity to accommodate the number of elements copied, and uses the specified <xref href=\"System.Collections.Generic.IComparer`1\"></xref>.","nodes":[{"pos":[0,366],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.SortedList`2\"&gt;&lt;/xref&gt;</ph> class that contains elements copied from the specified <ph id=\"ph2\">&lt;xref href=\"System.Collections.Generic.IDictionary`2\"&gt;&lt;/xref&gt;</ph>, has sufficient capacity to accommodate the number of elements copied, and uses the specified <ph id=\"ph3\">&lt;xref href=\"System.Collections.Generic.IComparer`1\"&gt;&lt;/xref&gt;</ph>.","source":"Initializes a new instance of the <xref href=\"System.Collections.Generic.SortedList`2\"></xref> class that contains elements copied from the specified <xref href=\"System.Collections.Generic.IDictionary`2\"></xref>, has sufficient capacity to accommodate the number of elements copied, and uses the specified <xref href=\"System.Collections.Generic.IComparer`1\"></xref>."}],"pos":[60498,60865],"yaml":true},{"content":"Every key in a <xref:System.Collections.Generic.SortedList%602> must be unique according to the specified comparer; likewise, every key in the source `dictionary` must also be unique according to the specified comparer.  \n  \n The capacity of the new <xref:System.Collections.Generic.SortedList%602> is set to the number of elements in `dictionary`, so no resizing takes place while the list is being populated.  \n  \n If the data in `dictionary` are sorted, this constructor is an O(`n`) operation, where `n` is the number of elements in `dictionary`. Otherwise it is an O(`n`*`n`) operation.","nodes":[{"pos":[0,219],"content":"Every key in a <ph id=\"ph1\">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph> must be unique according to the specified comparer; likewise, every key in the source <ph id=\"ph2\">`dictionary`</ph> must also be unique according to the specified comparer.","source":"Every key in a <xref:System.Collections.Generic.SortedList%602> must be unique according to the specified comparer; likewise, every key in the source `dictionary` must also be unique according to the specified comparer."},{"pos":[226,410],"content":"The capacity of the new <ph id=\"ph1\">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph> is set to the number of elements in <ph id=\"ph2\">`dictionary`</ph>, so no resizing takes place while the list is being populated.","source":"The capacity of the new <xref:System.Collections.Generic.SortedList%602> is set to the number of elements in `dictionary`, so no resizing takes place while the list is being populated."},{"pos":[417,591],"content":"If the data in `dictionary` are sorted, this constructor is an O(`n`) operation, where `n` is the number of elements in `dictionary`. Otherwise it is an O(`n`*`n`) operation.","nodes":[{"content":"If the data in <ph id=\"ph1\">`dictionary`</ph> are sorted, this constructor is an O(<ph id=\"ph2\">`n`</ph>) operation, where <ph id=\"ph3\">`n`</ph> is the number of elements in <ph id=\"ph4\">`dictionary`</ph>.","pos":[0,133],"source":"If the data in `dictionary` are sorted, this constructor is an O(`n`) operation, where `n` is the number of elements in `dictionary`."},{"content":"Otherwise it is an O(<ph id=\"ph1\">`n`</ph><ph id=\"ph2\">*</ph><ph id=\"ph3\">`n`</ph>) operation.","pos":[134,174],"source":" Otherwise it is an O(`n`*`n`) operation."}]}],"pos":[60876,61474],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Collections.Generic.IDictionary`2\"></xref> whose elements are copied to the new <xref href=\"System.Collections.Generic.SortedList`2\"></xref>.","nodes":[{"pos":[0,164],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.IDictionary`2\"&gt;&lt;/xref&gt;</ph> whose elements are copied to the new <ph id=\"ph2\">&lt;xref href=\"System.Collections.Generic.SortedList`2\"&gt;&lt;/xref&gt;</ph>.","source":"The <xref href=\"System.Collections.Generic.IDictionary`2\"></xref> whose elements are copied to the new <xref href=\"System.Collections.Generic.SortedList`2\"></xref>."}],"pos":[62612,62777],"yaml":true},{"content":"The <xref href=\"System.Collections.Generic.IComparer`1\"></xref> implementation to use when comparing keys.  \n  \n -or-  \n  \n `null` to use the default <xref href=\"System.Collections.Generic.Comparer`1\"></xref> for the type of the key.","nodes":[{"pos":[0,106],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.IComparer`1\"&gt;&lt;/xref&gt;</ph> implementation to use when comparing keys.","source":"The <xref href=\"System.Collections.Generic.IComparer`1\"></xref> implementation to use when comparing keys."},{"pos":[113,117],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[124,233],"content":"<ph id=\"ph1\">`null`</ph> to use the default <ph id=\"ph2\">&lt;xref href=\"System.Collections.Generic.Comparer`1\"&gt;&lt;/xref&gt;</ph> for the type of the key.","source":"`null` to use the default <xref href=\"System.Collections.Generic.Comparer`1\"></xref> for the type of the key."}],"pos":[62870,63114],"yaml":true},{"content":"<code>dictionary</code> is `null`.","nodes":[{"pos":[0,34],"content":"<ph id=\"ph1\">&lt;code&gt;dictionary&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>dictionary</code> is `null`."}],"pos":[63289,63324],"yaml":true},{"content":"<code>dictionary</code> contains one or more duplicate keys.","nodes":[{"pos":[0,60],"content":"<ph id=\"ph1\">&lt;code&gt;dictionary&lt;/code&gt;</ph> contains one or more duplicate keys.","source":"<code>dictionary</code> contains one or more duplicate keys."}],"pos":[63418,63479],"yaml":true},{"content":"Initializes a new instance of the <xref href=\"System.Collections.Generic.SortedList`2\"></xref> class that is empty, has the specified initial capacity, and uses the specified <xref href=\"System.Collections.Generic.IComparer`1\"></xref>.","nodes":[{"pos":[0,235],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.SortedList`2\"&gt;&lt;/xref&gt;</ph> class that is empty, has the specified initial capacity, and uses the specified <ph id=\"ph2\">&lt;xref href=\"System.Collections.Generic.IComparer`1\"&gt;&lt;/xref&gt;</ph>.","source":"Initializes a new instance of the <xref href=\"System.Collections.Generic.SortedList`2\"></xref> class that is empty, has the specified initial capacity, and uses the specified <xref href=\"System.Collections.Generic.IComparer`1\"></xref>."}],"pos":[65122,65358],"yaml":true},{"content":"Every key in a <xref:System.Collections.Generic.SortedList%602> must be unique according to the specified comparer.  \n  \n The capacity of a <xref:System.Collections.Generic.SortedList%602> is the number of elements that the <xref:System.Collections.Generic.SortedList%602> can hold before resizing. As elements are added to a <xref:System.Collections.Generic.SortedList%602>, the capacity is automatically increased as required by reallocating the internal array.  \n  \n If the size of the collection can be estimated, specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <xref:System.Collections.Generic.SortedList%602>.  \n  \n The capacity can be decreased by calling <xref:System.Collections.Generic.SortedList%602.TrimExcess%2A> or by setting the <xref:System.Collections.Generic.SortedList%602.Capacity%2A> property explicitly. Decreasing the capacity reallocates memory and copies all the elements in the <xref:System.Collections.Generic.SortedList%602>.  \n  \n This constructor is an O(`n`) operation, where `n` is `capacity`.","nodes":[{"pos":[0,115],"content":"Every key in a <xref:System.Collections.Generic.SortedList%602> must be unique according to the specified comparer.","nodes":[{"content":"Every key in a <ph id=\"ph1\">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph> must be unique according to the specified comparer.","pos":[0,115],"source":"Every key in a <xref:System.Collections.Generic.SortedList%602> must be unique according to the specified comparer."}]},{"pos":[122,463],"content":"The capacity of a <xref:System.Collections.Generic.SortedList%602> is the number of elements that the <xref:System.Collections.Generic.SortedList%602> can hold before resizing. As elements are added to a <xref:System.Collections.Generic.SortedList%602>, the capacity is automatically increased as required by reallocating the internal array.","nodes":[{"content":"The capacity of a <xref:System.Collections.Generic.SortedList%602> is the number of elements that the <xref:System.Collections.Generic.SortedList%602> can hold before resizing. As elements are added to a <xref:System.Collections.Generic.SortedList%602>, the capacity is automatically increased as required by reallocating the internal array.","pos":[0,341],"nodes":[{"content":"The capacity of a <ph id=\"ph1\">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph> is the number of elements that the <ph id=\"ph2\">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph> can hold before resizing.","pos":[0,176],"source":"The capacity of a <xref:System.Collections.Generic.SortedList%602> is the number of elements that the <xref:System.Collections.Generic.SortedList%602> can hold before resizing."},{"content":"As elements are added to a <ph id=\"ph1\">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph>, the capacity is automatically increased as required by reallocating the internal array.","pos":[177,341],"source":" As elements are added to a <xref:System.Collections.Generic.SortedList%602>, the capacity is automatically increased as required by reallocating the internal array."}]}]},{"pos":[470,691],"content":"If the size of the collection can be estimated, specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <xref:System.Collections.Generic.SortedList%602>.","nodes":[{"content":"If the size of the collection can be estimated, specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <ph id=\"ph1\">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph>.","pos":[0,221],"source":"If the size of the collection can be estimated, specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <xref:System.Collections.Generic.SortedList%602>."}]},{"pos":[698,1029],"content":"The capacity can be decreased by calling <xref:System.Collections.Generic.SortedList%602.TrimExcess%2A> or by setting the <xref:System.Collections.Generic.SortedList%602.Capacity%2A> property explicitly. Decreasing the capacity reallocates memory and copies all the elements in the <xref:System.Collections.Generic.SortedList%602>.","nodes":[{"content":"The capacity can be decreased by calling <xref:System.Collections.Generic.SortedList%602.TrimExcess%2A> or by setting the <xref:System.Collections.Generic.SortedList%602.Capacity%2A> property explicitly. Decreasing the capacity reallocates memory and copies all the elements in the <xref:System.Collections.Generic.SortedList%602>.","pos":[0,331],"nodes":[{"content":"The capacity can be decreased by calling <ph id=\"ph1\">&lt;xref:System.Collections.Generic.SortedList%602.TrimExcess%2A&gt;</ph> or by setting the <ph id=\"ph2\">&lt;xref:System.Collections.Generic.SortedList%602.Capacity%2A&gt;</ph> property explicitly.","pos":[0,203],"source":"The capacity can be decreased by calling <xref:System.Collections.Generic.SortedList%602.TrimExcess%2A> or by setting the <xref:System.Collections.Generic.SortedList%602.Capacity%2A> property explicitly."},{"content":"Decreasing the capacity reallocates memory and copies all the elements in the <ph id=\"ph1\">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph>.","pos":[204,331],"source":" Decreasing the capacity reallocates memory and copies all the elements in the <xref:System.Collections.Generic.SortedList%602>."}]}]},{"pos":[1036,1101],"content":"This constructor is an O(<ph id=\"ph1\">`n`</ph>) operation, where <ph id=\"ph2\">`n`</ph> is <ph id=\"ph3\">`capacity`</ph>.","source":"This constructor is an O(`n`) operation, where `n` is `capacity`."}],"pos":[65369,66481],"yaml":true,"extradata":"MT"},{"content":"The initial number of elements that the <xref href=\"System.Collections.Generic.SortedList`2\"></xref> can contain.","nodes":[{"pos":[0,113],"content":"The initial number of elements that the <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.SortedList`2\"&gt;&lt;/xref&gt;</ph> can contain.","source":"The initial number of elements that the <xref href=\"System.Collections.Generic.SortedList`2\"></xref> can contain."}],"pos":[67457,67571],"yaml":true},{"content":"The <xref href=\"System.Collections.Generic.IComparer`1\"></xref> implementation to use when comparing keys.  \n  \n -or-  \n  \n `null` to use the default <xref href=\"System.Collections.Generic.Comparer`1\"></xref> for the type of the key.","nodes":[{"pos":[0,106],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.IComparer`1\"&gt;&lt;/xref&gt;</ph> implementation to use when comparing keys.","source":"The <xref href=\"System.Collections.Generic.IComparer`1\"></xref> implementation to use when comparing keys."},{"pos":[113,117],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[124,233],"content":"<ph id=\"ph1\">`null`</ph> to use the default <ph id=\"ph2\">&lt;xref href=\"System.Collections.Generic.Comparer`1\"&gt;&lt;/xref&gt;</ph> for the type of the key.","source":"`null` to use the default <xref href=\"System.Collections.Generic.Comparer`1\"></xref> for the type of the key."}],"pos":[67664,67908],"yaml":true},{"content":"<code>capacity</code> is less than zero.","nodes":[{"pos":[0,40],"content":"<ph id=\"ph1\">&lt;code&gt;capacity&lt;/code&gt;</ph> is less than zero.","source":"<code>capacity</code> is less than zero."}],"pos":[68095,68136],"yaml":true},{"content":"Adds an element with the specified key and value into the <xref href=\"System.Collections.Generic.SortedList`2\"></xref>.","nodes":[{"pos":[0,119],"content":"Adds an element with the specified key and value into the <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.SortedList`2\"&gt;&lt;/xref&gt;</ph>.","source":"Adds an element with the specified key and value into the <xref href=\"System.Collections.Generic.SortedList`2\"></xref>."}],"pos":[69532,69652],"yaml":true},{"content":"A key cannot be `null`, but a value can be, if the type of values in the sorted list, `TValue`, is a reference type.  \n  \n You can also use the <xref:System.Collections.Generic.SortedList%602.Item%2A> property to add new elements by setting the value of a key that does not exist in the <xref:System.Collections.Generic.SortedList%602>; for example, `myCollection[\"myNonexistentKey\"] = myValue`. However, if the specified key already exists in the <xref:System.Collections.Generic.SortedList%602>, setting the <xref:System.Collections.Generic.SortedList%602.Item%2A> property overwrites the old value. In contrast, the <xref:System.Collections.Generic.SortedList%602.Add%2A> method does not modify existing elements.  \n  \n If <xref:System.Collections.Generic.SortedList%602.Count%2A> already equals <xref:System.Collections.Generic.SortedList%602.Capacity%2A>, the capacity of the <xref:System.Collections.Generic.SortedList%602> is increased by automatically reallocating the internal array, and the existing elements are copied to the new array before the new element is added.  \n  \n This method is an O(`n`) operation for unsorted data, where `n` is <xref:System.Collections.Generic.SortedList%602.Count%2A>. It is an O(log `n`) operation if the new element is added at the end of the list. If insertion causes a resize, the operation is O(`n`).","nodes":[{"pos":[0,116],"content":"A key cannot be <ph id=\"ph1\">`null`</ph>, but a value can be, if the type of values in the sorted list, <ph id=\"ph2\">`TValue`</ph>, is a reference type.","source":"A key cannot be `null`, but a value can be, if the type of values in the sorted list, `TValue`, is a reference type."},{"pos":[123,716],"content":"You can also use the <xref:System.Collections.Generic.SortedList%602.Item%2A> property to add new elements by setting the value of a key that does not exist in the <xref:System.Collections.Generic.SortedList%602>; for example, `myCollection[\"myNonexistentKey\"] = myValue`. However, if the specified key already exists in the <xref:System.Collections.Generic.SortedList%602>, setting the <xref:System.Collections.Generic.SortedList%602.Item%2A> property overwrites the old value. In contrast, the <xref:System.Collections.Generic.SortedList%602.Add%2A> method does not modify existing elements.","nodes":[{"content":"You can also use the <ph id=\"ph1\">&lt;xref:System.Collections.Generic.SortedList%602.Item%2A&gt;</ph> property to add new elements by setting the value of a key that does not exist in the <ph id=\"ph2\">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph>; for example, <ph id=\"ph3\">`myCollection[\"myNonexistentKey\"] = myValue`</ph>.","pos":[0,272],"source":"You can also use the <xref:System.Collections.Generic.SortedList%602.Item%2A> property to add new elements by setting the value of a key that does not exist in the <xref:System.Collections.Generic.SortedList%602>; for example, `myCollection[\"myNonexistentKey\"] = myValue`."},{"content":"However, if the specified key already exists in the <ph id=\"ph1\">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph>, setting the <ph id=\"ph2\">&lt;xref:System.Collections.Generic.SortedList%602.Item%2A&gt;</ph> property overwrites the old value.","pos":[273,478],"source":" However, if the specified key already exists in the <xref:System.Collections.Generic.SortedList%602>, setting the <xref:System.Collections.Generic.SortedList%602.Item%2A> property overwrites the old value."},{"content":"In contrast, the <ph id=\"ph1\">&lt;xref:System.Collections.Generic.SortedList%602.Add%2A&gt;</ph> method does not modify existing elements.","pos":[479,593],"source":" In contrast, the <xref:System.Collections.Generic.SortedList%602.Add%2A> method does not modify existing elements."}]},{"pos":[723,1079],"content":"If <xref:System.Collections.Generic.SortedList%602.Count%2A> already equals <xref:System.Collections.Generic.SortedList%602.Capacity%2A>, the capacity of the <xref:System.Collections.Generic.SortedList%602> is increased by automatically reallocating the internal array, and the existing elements are copied to the new array before the new element is added.","nodes":[{"content":"If <ph id=\"ph1\">&lt;xref:System.Collections.Generic.SortedList%602.Count%2A&gt;</ph> already equals <ph id=\"ph2\">&lt;xref:System.Collections.Generic.SortedList%602.Capacity%2A&gt;</ph>, the capacity of the <ph id=\"ph3\">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph> is increased by automatically reallocating the internal array, and the existing elements are copied to the new array before the new element is added.","pos":[0,356],"source":"If <xref:System.Collections.Generic.SortedList%602.Count%2A> already equals <xref:System.Collections.Generic.SortedList%602.Capacity%2A>, the capacity of the <xref:System.Collections.Generic.SortedList%602> is increased by automatically reallocating the internal array, and the existing elements are copied to the new array before the new element is added."}]},{"pos":[1086,1348],"content":"This method is an O(`n`) operation for unsorted data, where `n` is <xref:System.Collections.Generic.SortedList%602.Count%2A>. It is an O(log `n`) operation if the new element is added at the end of the list. If insertion causes a resize, the operation is O(`n`).","nodes":[{"content":"This method is an O(<ph id=\"ph1\">`n`</ph>) operation for unsorted data, where <ph id=\"ph2\">`n`</ph> is <ph id=\"ph3\">&lt;xref:System.Collections.Generic.SortedList%602.Count%2A&gt;</ph>.","pos":[0,125],"source":"This method is an O(`n`) operation for unsorted data, where `n` is <xref:System.Collections.Generic.SortedList%602.Count%2A>."},{"content":"It is an O(log <ph id=\"ph1\">`n`</ph>) operation if the new element is added at the end of the list.","pos":[126,207],"source":" It is an O(log `n`) operation if the new element is added at the end of the list."},{"content":"If insertion causes a resize, the operation is O(<ph id=\"ph1\">`n`</ph>).","pos":[208,262],"source":" If insertion causes a resize, the operation is O(`n`)."}]}],"pos":[69663,71022],"yaml":true,"extradata":"MT"},{"content":"The key of the element to add.","nodes":[{"pos":[0,30],"content":"The key of the element to add.","nodes":[{"content":"The key of the element to add.","pos":[0,30]}]}],"pos":[72046,72077],"yaml":true},{"content":"The value of the element to add. The value can be `null` for reference types.","nodes":[{"pos":[0,77],"content":"The value of the element to add. The value can be `null` for reference types.","nodes":[{"content":"The value of the element to add.","pos":[0,32]},{"content":"The value can be <ph id=\"ph1\">`null`</ph> for reference types.","pos":[33,77],"source":" The value can be `null` for reference types."}]}],"pos":[72131,72209],"yaml":true},{"content":"<code>key</code> is `null`.","nodes":[{"pos":[0,27],"content":"<ph id=\"ph1\">&lt;code&gt;key&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>key</code> is `null`."}],"pos":[72382,72410],"yaml":true},{"content":"An element with the same key already exists in the <xref href=\"System.Collections.Generic.SortedList`2\"></xref>.","nodes":[{"pos":[0,112],"content":"An element with the same key already exists in the <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.SortedList`2\"&gt;&lt;/xref&gt;</ph>.","source":"An element with the same key already exists in the <xref href=\"System.Collections.Generic.SortedList`2\"></xref>."}],"pos":[72504,72617],"yaml":true},{"content":"Gets or sets the number of elements that the <xref href=\"System.Collections.Generic.SortedList`2\"></xref> can contain.","nodes":[{"pos":[0,118],"content":"Gets or sets the number of elements that the <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.SortedList`2\"&gt;&lt;/xref&gt;</ph> can contain.","source":"Gets or sets the number of elements that the <xref href=\"System.Collections.Generic.SortedList`2\"></xref> can contain."}],"pos":[73982,74101],"yaml":true},{"content":"<xref:System.Collections.Generic.SortedList%602.Capacity%2A> is the number of elements that the <xref:System.Collections.Generic.SortedList%602> can store. <xref:System.Collections.Generic.SortedList%602.Count%2A> is the number of elements that are actually in the <xref:System.Collections.Generic.SortedList%602>.  \n  \n <xref:System.Collections.Generic.SortedList%602.Capacity%2A> is always greater than or equal to <xref:System.Collections.Generic.SortedList%602.Count%2A>. If <xref:System.Collections.Generic.SortedList%602.Count%2A> exceeds <xref:System.Collections.Generic.SortedList%602.Capacity%2A> while adding elements, the capacity is increased by automatically reallocating the internal array before copying the old elements and adding the new elements.  \n  \n The capacity can be decreased by calling <xref:System.Collections.Generic.SortedList%602.TrimExcess%2A> or by setting the <xref:System.Collections.Generic.SortedList%602.Capacity%2A> property explicitly. When the value of <xref:System.Collections.Generic.SortedList%602.Capacity%2A> is set explicitly, the internal array is also reallocated to accommodate the specified capacity.  \n  \n Retrieving the value of this property is an O(1) operation; setting the property is an O(`n`) operation, where `n` is the new capacity.","nodes":[{"pos":[0,314],"content":"<xref:System.Collections.Generic.SortedList%602.Capacity%2A> is the number of elements that the <xref:System.Collections.Generic.SortedList%602> can store. <xref:System.Collections.Generic.SortedList%602.Count%2A> is the number of elements that are actually in the <xref:System.Collections.Generic.SortedList%602>.","nodes":[{"content":"<xref:System.Collections.Generic.SortedList%602.Capacity%2A> is the number of elements that the <xref:System.Collections.Generic.SortedList%602> can store. <xref:System.Collections.Generic.SortedList%602.Count%2A> is the number of elements that are actually in the <xref:System.Collections.Generic.SortedList%602>.","pos":[0,314],"nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Collections.Generic.SortedList%602.Capacity%2A&gt;</ph> is the number of elements that the <ph id=\"ph2\">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph> can store.","pos":[0,155],"source":"<xref:System.Collections.Generic.SortedList%602.Capacity%2A> is the number of elements that the <xref:System.Collections.Generic.SortedList%602> can store."},{"content":"<ph id=\"ph1\">&lt;xref:System.Collections.Generic.SortedList%602.Count%2A&gt;</ph> is the number of elements that are actually in the <ph id=\"ph2\">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph>.","pos":[156,314],"source":" <xref:System.Collections.Generic.SortedList%602.Count%2A> is the number of elements that are actually in the <xref:System.Collections.Generic.SortedList%602>."}]}]},{"pos":[321,764],"content":"<xref:System.Collections.Generic.SortedList%602.Capacity%2A> is always greater than or equal to <xref:System.Collections.Generic.SortedList%602.Count%2A>. If <xref:System.Collections.Generic.SortedList%602.Count%2A> exceeds <xref:System.Collections.Generic.SortedList%602.Capacity%2A> while adding elements, the capacity is increased by automatically reallocating the internal array before copying the old elements and adding the new elements.","nodes":[{"content":"<xref:System.Collections.Generic.SortedList%602.Capacity%2A> is always greater than or equal to <xref:System.Collections.Generic.SortedList%602.Count%2A>. If <xref:System.Collections.Generic.SortedList%602.Count%2A> exceeds <xref:System.Collections.Generic.SortedList%602.Capacity%2A> while adding elements, the capacity is increased by automatically reallocating the internal array before copying the old elements and adding the new elements.","pos":[0,443],"nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Collections.Generic.SortedList%602.Capacity%2A&gt;</ph> is always greater than or equal to <ph id=\"ph2\">&lt;xref:System.Collections.Generic.SortedList%602.Count%2A&gt;</ph>.","pos":[0,154],"source":"<xref:System.Collections.Generic.SortedList%602.Capacity%2A> is always greater than or equal to <xref:System.Collections.Generic.SortedList%602.Count%2A>."},{"content":"If <ph id=\"ph1\">&lt;xref:System.Collections.Generic.SortedList%602.Count%2A&gt;</ph> exceeds <ph id=\"ph2\">&lt;xref:System.Collections.Generic.SortedList%602.Capacity%2A&gt;</ph> while adding elements, the capacity is increased by automatically reallocating the internal array before copying the old elements and adding the new elements.","pos":[155,443],"source":" If <xref:System.Collections.Generic.SortedList%602.Count%2A> exceeds <xref:System.Collections.Generic.SortedList%602.Capacity%2A> while adding elements, the capacity is increased by automatically reallocating the internal array before copying the old elements and adding the new elements."}]}]},{"pos":[771,1150],"content":"The capacity can be decreased by calling <xref:System.Collections.Generic.SortedList%602.TrimExcess%2A> or by setting the <xref:System.Collections.Generic.SortedList%602.Capacity%2A> property explicitly. When the value of <xref:System.Collections.Generic.SortedList%602.Capacity%2A> is set explicitly, the internal array is also reallocated to accommodate the specified capacity.","nodes":[{"content":"The capacity can be decreased by calling <xref:System.Collections.Generic.SortedList%602.TrimExcess%2A> or by setting the <xref:System.Collections.Generic.SortedList%602.Capacity%2A> property explicitly. When the value of <xref:System.Collections.Generic.SortedList%602.Capacity%2A> is set explicitly, the internal array is also reallocated to accommodate the specified capacity.","pos":[0,379],"nodes":[{"content":"The capacity can be decreased by calling <ph id=\"ph1\">&lt;xref:System.Collections.Generic.SortedList%602.TrimExcess%2A&gt;</ph> or by setting the <ph id=\"ph2\">&lt;xref:System.Collections.Generic.SortedList%602.Capacity%2A&gt;</ph> property explicitly.","pos":[0,203],"source":"The capacity can be decreased by calling <xref:System.Collections.Generic.SortedList%602.TrimExcess%2A> or by setting the <xref:System.Collections.Generic.SortedList%602.Capacity%2A> property explicitly."},{"content":"When the value of <ph id=\"ph1\">&lt;xref:System.Collections.Generic.SortedList%602.Capacity%2A&gt;</ph> is set explicitly, the internal array is also reallocated to accommodate the specified capacity.","pos":[204,379],"source":" When the value of <xref:System.Collections.Generic.SortedList%602.Capacity%2A> is set explicitly, the internal array is also reallocated to accommodate the specified capacity."}]}]},{"pos":[1157,1292],"content":"Retrieving the value of this property is an O(1) operation; setting the property is an O(<ph id=\"ph1\">`n`</ph>) operation, where <ph id=\"ph2\">`n`</ph> is the new capacity.","source":"Retrieving the value of this property is an O(1) operation; setting the property is an O(`n`) operation, where `n` is the new capacity."}],"pos":[74112,75413],"yaml":true,"extradata":"MT"},{"content":"The number of elements that the <xref href=\"System.Collections.Generic.SortedList`2\"></xref> can contain.","nodes":[{"pos":[0,105],"content":"The number of elements that the <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.SortedList`2\"&gt;&lt;/xref&gt;</ph> can contain.","source":"The number of elements that the <xref href=\"System.Collections.Generic.SortedList`2\"></xref> can contain."}],"pos":[75526,75632],"yaml":true},{"content":"<xref href=\"System.Collections.Generic.SortedList`2.Capacity\"></xref> is set to a value that is less than <xref href=\"System.Collections.Generic.SortedList`2.Count\"></xref>.","nodes":[{"pos":[0,173],"content":"<ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.SortedList`2.Capacity\"&gt;&lt;/xref&gt;</ph> is set to a value that is less than <ph id=\"ph2\">&lt;xref href=\"System.Collections.Generic.SortedList`2.Count\"&gt;&lt;/xref&gt;</ph>.","source":"<xref href=\"System.Collections.Generic.SortedList`2.Capacity\"></xref> is set to a value that is less than <xref href=\"System.Collections.Generic.SortedList`2.Count\"></xref>."}],"pos":[75822,75996],"yaml":true},{"content":"There is not enough memory available on the system.","nodes":[{"pos":[0,51],"content":"There is not enough memory available on the system.","nodes":[{"content":"There is not enough memory available on the system.","pos":[0,51]}]}],"pos":[76096,76148],"yaml":true},{"content":"Removes all elements from the <xref href=\"System.Collections.Generic.SortedList`2\"></xref>.","nodes":[{"pos":[0,91],"content":"Removes all elements from the <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.SortedList`2\"&gt;&lt;/xref&gt;</ph>.","source":"Removes all elements from the <xref href=\"System.Collections.Generic.SortedList`2\"></xref>."}],"pos":[77499,77591],"yaml":true},{"content":"<xref:System.Collections.Generic.SortedList%602.Count%2A> is set to zero, and references to other objects from elements of the collection are also released.  \n  \n <xref:System.Collections.Generic.SortedList%602.Capacity%2A> remains unchanged. To reset the capacity of the <xref:System.Collections.Generic.SortedList%602>, call <xref:System.Collections.Generic.SortedList%602.TrimExcess%2A> or set the <xref:System.Collections.Generic.SortedList%602.Capacity%2A> property directly. Trimming an empty <xref:System.Collections.Generic.SortedList%602> sets the capacity of the <xref:System.Collections.Generic.SortedList%602> to the default capacity.  \n  \n This method is an O(`n`) operation, where `n` is <xref:System.Collections.Generic.SortedList%602.Count%2A>.","nodes":[{"pos":[0,156],"content":"<xref:System.Collections.Generic.SortedList%602.Count%2A> is set to zero, and references to other objects from elements of the collection are also released.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Collections.Generic.SortedList%602.Count%2A&gt;</ph> is set to zero, and references to other objects from elements of the collection are also released.","pos":[0,156],"source":"<xref:System.Collections.Generic.SortedList%602.Count%2A> is set to zero, and references to other objects from elements of the collection are also released."}]},{"pos":[163,646],"content":"<xref:System.Collections.Generic.SortedList%602.Capacity%2A> remains unchanged. To reset the capacity of the <xref:System.Collections.Generic.SortedList%602>, call <xref:System.Collections.Generic.SortedList%602.TrimExcess%2A> or set the <xref:System.Collections.Generic.SortedList%602.Capacity%2A> property directly. Trimming an empty <xref:System.Collections.Generic.SortedList%602> sets the capacity of the <xref:System.Collections.Generic.SortedList%602> to the default capacity.","nodes":[{"content":"<xref:System.Collections.Generic.SortedList%602.Capacity%2A> remains unchanged. To reset the capacity of the <xref:System.Collections.Generic.SortedList%602>, call <xref:System.Collections.Generic.SortedList%602.TrimExcess%2A> or set the <xref:System.Collections.Generic.SortedList%602.Capacity%2A> property directly. Trimming an empty <xref:System.Collections.Generic.SortedList%602> sets the capacity of the <xref:System.Collections.Generic.SortedList%602> to the default capacity.","pos":[0,483],"nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Collections.Generic.SortedList%602.Capacity%2A&gt;</ph> remains unchanged.","pos":[0,79],"source":"<xref:System.Collections.Generic.SortedList%602.Capacity%2A> remains unchanged."},{"content":"To reset the capacity of the <ph id=\"ph1\">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph>, call <ph id=\"ph2\">&lt;xref:System.Collections.Generic.SortedList%602.TrimExcess%2A&gt;</ph> or set the <ph id=\"ph3\">&lt;xref:System.Collections.Generic.SortedList%602.Capacity%2A&gt;</ph> property directly.","pos":[80,317],"source":" To reset the capacity of the <xref:System.Collections.Generic.SortedList%602>, call <xref:System.Collections.Generic.SortedList%602.TrimExcess%2A> or set the <xref:System.Collections.Generic.SortedList%602.Capacity%2A> property directly."},{"content":"Trimming an empty <ph id=\"ph1\">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph> sets the capacity of the <ph id=\"ph2\">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph> to the default capacity.","pos":[318,483],"source":" Trimming an empty <xref:System.Collections.Generic.SortedList%602> sets the capacity of the <xref:System.Collections.Generic.SortedList%602> to the default capacity."}]}]},{"pos":[653,760],"content":"This method is an O(<ph id=\"ph1\">`n`</ph>) operation, where <ph id=\"ph2\">`n`</ph> is <ph id=\"ph3\">&lt;xref:System.Collections.Generic.SortedList%602.Count%2A&gt;</ph>.","source":"This method is an O(`n`) operation, where `n` is <xref:System.Collections.Generic.SortedList%602.Count%2A>."}],"pos":[77602,78369],"yaml":true,"extradata":"MT"},{"content":"Gets the <xref href=\"System.Collections.Generic.IComparer`1\"></xref> for the sorted list.","nodes":[{"pos":[0,89],"content":"Gets the <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.IComparer`1\"&gt;&lt;/xref&gt;</ph> for the sorted list.","source":"Gets the <xref href=\"System.Collections.Generic.IComparer`1\"></xref> for the sorted list."}],"pos":[79874,79964],"yaml":true},{"content":"Retrieving the value of this property is an O(1) operation.","nodes":[{"pos":[0,59],"content":"Retrieving the value of this property is an O(1) operation.","nodes":[{"content":"Retrieving the value of this property is an O(1) operation.","pos":[0,59]}]}],"pos":[79975,80035],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.IComparable`1\"></xref> for the current <xref href=\"System.Collections.Generic.SortedList`2\"></xref>.","nodes":[{"pos":[0,123],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.IComparable`1\"&gt;&lt;/xref&gt;</ph> for the current <ph id=\"ph2\">&lt;xref href=\"System.Collections.Generic.SortedList`2\"&gt;&lt;/xref&gt;</ph>.","source":"The <xref href=\"System.IComparable`1\"></xref> for the current <xref href=\"System.Collections.Generic.SortedList`2\"></xref>."}],"pos":[80212,80336],"yaml":true},{"content":"Determines whether the <xref href=\"System.Collections.Generic.SortedList`2\"></xref> contains a specific key.","nodes":[{"pos":[0,108],"content":"Determines whether the <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.SortedList`2\"&gt;&lt;/xref&gt;</ph> contains a specific key.","source":"Determines whether the <xref href=\"System.Collections.Generic.SortedList`2\"></xref> contains a specific key."}],"pos":[81826,81935],"yaml":true},{"content":"This method is an O(log `n`) operation, where `n` is <xref:System.Collections.Generic.SortedList%602.Count%2A>.","nodes":[{"pos":[0,111],"content":"This method is an O(log <ph id=\"ph1\">`n`</ph>) operation, where <ph id=\"ph2\">`n`</ph> is <ph id=\"ph3\">&lt;xref:System.Collections.Generic.SortedList%602.Count%2A&gt;</ph>.","source":"This method is an O(log `n`) operation, where `n` is <xref:System.Collections.Generic.SortedList%602.Count%2A>."}],"pos":[81946,82058],"yaml":true,"extradata":"MT"},{"content":"The key to locate in the <xref href=\"System.Collections.Generic.SortedList`2\"></xref>.","nodes":[{"pos":[0,86],"content":"The key to locate in the <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.SortedList`2\"&gt;&lt;/xref&gt;</ph>.","source":"The key to locate in the <xref href=\"System.Collections.Generic.SortedList`2\"></xref>."}],"pos":[84004,84091],"yaml":true},{"content":"`true` if the <xref href=\"System.Collections.Generic.SortedList`2\"></xref> contains an element with the specified key; otherwise, `false`.","nodes":[{"pos":[0,138],"content":"<ph id=\"ph1\">`true`</ph> if the <ph id=\"ph2\">&lt;xref href=\"System.Collections.Generic.SortedList`2\"&gt;&lt;/xref&gt;</ph> contains an element with the specified key; otherwise, <ph id=\"ph3\">`false`</ph>.","source":"`true` if the <xref href=\"System.Collections.Generic.SortedList`2\"></xref> contains an element with the specified key; otherwise, `false`."}],"pos":[84149,84290],"yaml":true},{"content":"<code>key</code> is `null`.","nodes":[{"pos":[0,27],"content":"<ph id=\"ph1\">&lt;code&gt;key&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>key</code> is `null`."}],"pos":[84471,84499],"yaml":true},{"content":"Determines whether the <xref href=\"System.Collections.Generic.SortedList`2\"></xref> contains a specific value.","nodes":[{"pos":[0,110],"content":"Determines whether the <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.SortedList`2\"&gt;&lt;/xref&gt;</ph> contains a specific value.","source":"Determines whether the <xref href=\"System.Collections.Generic.SortedList`2\"></xref> contains a specific value."}],"pos":[85928,86039],"yaml":true},{"content":"This method determines equality using the default comparer <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=fullName> for the value type `TValue`.  <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=fullName> checks whether the value type `TValue` implements <xref:System.IComparable%601?displayProperty=fullName> and uses that implementation, if available.  If not, <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=fullName> checks whether the value type `TValue` implements <xref:System.IComparable?displayProperty=fullName>.  If the value type `TValue` does not implement either interface, this method uses <xref:System.Object.Equals%2A?displayProperty=fullName>.  \n  \n This method performs a linear search; therefore, the average execution time is proportional to <xref:System.Collections.Generic.SortedList%602.Count%2A>. That is, this method is an O(`n`) operation, where `n` is <xref:System.Collections.Generic.SortedList%602.Count%2A>.","nodes":[{"pos":[0,736],"content":"This method determines equality using the default comparer <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=fullName> for the value type `TValue`.  <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=fullName> checks whether the value type `TValue` implements <xref:System.IComparable%601?displayProperty=fullName> and uses that implementation, if available.  If not, <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=fullName> checks whether the value type `TValue` implements <xref:System.IComparable?displayProperty=fullName>.  If the value type `TValue` does not implement either interface, this method uses <xref:System.Object.Equals%2A?displayProperty=fullName>.","nodes":[{"content":"This method determines equality using the default comparer <ph id=\"ph1\">&lt;xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=fullName&gt;</ph> for the value type <ph id=\"ph2\">`TValue`</ph>.","pos":[0,170],"source":"This method determines equality using the default comparer <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=fullName> for the value type `TValue`."},{"content":"<ph id=\"ph1\">&lt;xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=fullName&gt;</ph> checks whether the value type <ph id=\"ph2\">`TValue`</ph> implements <ph id=\"ph3\">&lt;xref:System.IComparable%601?displayProperty=fullName&gt;</ph> and uses that implementation, if available.","pos":[172,403],"source":"  <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=fullName> checks whether the value type `TValue` implements <xref:System.IComparable%601?displayProperty=fullName> and uses that implementation, if available."},{"content":"If not, <ph id=\"ph1\">&lt;xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=fullName&gt;</ph> checks whether the value type <ph id=\"ph2\">`TValue`</ph> implements <ph id=\"ph3\">&lt;xref:System.IComparable?displayProperty=fullName&gt;</ph>.","pos":[405,597],"source":"  If not, <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=fullName> checks whether the value type `TValue` implements <xref:System.IComparable?displayProperty=fullName>."},{"content":"If the value type <ph id=\"ph1\">`TValue`</ph> does not implement either interface, this method uses <ph id=\"ph2\">&lt;xref:System.Object.Equals%2A?displayProperty=fullName&gt;</ph>.","pos":[599,736],"source":"  If the value type `TValue` does not implement either interface, this method uses <xref:System.Object.Equals%2A?displayProperty=fullName>."}]},{"pos":[743,1013],"content":"This method performs a linear search; therefore, the average execution time is proportional to <xref:System.Collections.Generic.SortedList%602.Count%2A>. That is, this method is an O(`n`) operation, where `n` is <xref:System.Collections.Generic.SortedList%602.Count%2A>.","nodes":[{"content":"This method performs a linear search; therefore, the average execution time is proportional to <ph id=\"ph1\">&lt;xref:System.Collections.Generic.SortedList%602.Count%2A&gt;</ph>.","pos":[0,153],"source":"This method performs a linear search; therefore, the average execution time is proportional to <xref:System.Collections.Generic.SortedList%602.Count%2A>."},{"content":"That is, this method is an O(<ph id=\"ph1\">`n`</ph>) operation, where <ph id=\"ph2\">`n`</ph> is <ph id=\"ph3\">&lt;xref:System.Collections.Generic.SortedList%602.Count%2A&gt;</ph>.","pos":[154,270],"source":" That is, this method is an O(`n`) operation, where `n` is <xref:System.Collections.Generic.SortedList%602.Count%2A>."}]}],"pos":[86050,87068],"yaml":true,"extradata":"MT"},{"content":"The value to locate in the <xref href=\"System.Collections.Generic.SortedList`2\"></xref>. The value can be `null` for reference types.","nodes":[{"pos":[0,133],"content":"The value to locate in the <xref href=\"System.Collections.Generic.SortedList`2\"></xref>. The value can be `null` for reference types.","nodes":[{"content":"The value to locate in the <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.SortedList`2\"&gt;&lt;/xref&gt;</ph>.","pos":[0,88],"source":"The value to locate in the <xref href=\"System.Collections.Generic.SortedList`2\"></xref>."},{"content":"The value can be <ph id=\"ph1\">`null`</ph> for reference types.","pos":[89,133],"source":" The value can be `null` for reference types."}]}],"pos":[87203,87337],"yaml":true},{"content":"`true` if the <xref href=\"System.Collections.Generic.SortedList`2\"></xref> contains an element with the specified value; otherwise, `false`.","nodes":[{"pos":[0,140],"content":"<ph id=\"ph1\">`true`</ph> if the <ph id=\"ph2\">&lt;xref href=\"System.Collections.Generic.SortedList`2\"&gt;&lt;/xref&gt;</ph> contains an element with the specified value; otherwise, <ph id=\"ph3\">`false`</ph>.","source":"`true` if the <xref href=\"System.Collections.Generic.SortedList`2\"></xref> contains an element with the specified value; otherwise, `false`."}],"pos":[87395,87538],"yaml":true},{"content":"Gets the number of key/value pairs contained in the <xref href=\"System.Collections.Generic.SortedList`2\"></xref>.","nodes":[{"pos":[0,113],"content":"Gets the number of key/value pairs contained in the <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.SortedList`2\"&gt;&lt;/xref&gt;</ph>.","source":"Gets the number of key/value pairs contained in the <xref href=\"System.Collections.Generic.SortedList`2\"></xref>."}],"pos":[88969,89083],"yaml":true},{"content":"<xref:System.Collections.Generic.SortedList%602.Capacity%2A> is the number of elements that the <xref:System.Collections.Generic.SortedList%602> can store. <xref:System.Collections.Generic.SortedList%602.Count%2A> is the number of elements that are actually in the <xref:System.Collections.Generic.SortedList%602>.  \n  \n <xref:System.Collections.Generic.SortedList%602.Capacity%2A> is always greater than or equal to <xref:System.Collections.Generic.SortedList%602.Count%2A>. If <xref:System.Collections.Generic.SortedList%602.Count%2A> exceeds <xref:System.Collections.Generic.SortedList%602.Capacity%2A> while adding elements, the capacity is increased by automatically reallocating the internal array before copying the old elements and adding the new elements.  \n  \n Retrieving the value of this property is an O(1) operation.","nodes":[{"pos":[0,314],"content":"<xref:System.Collections.Generic.SortedList%602.Capacity%2A> is the number of elements that the <xref:System.Collections.Generic.SortedList%602> can store. <xref:System.Collections.Generic.SortedList%602.Count%2A> is the number of elements that are actually in the <xref:System.Collections.Generic.SortedList%602>.","nodes":[{"content":"<xref:System.Collections.Generic.SortedList%602.Capacity%2A> is the number of elements that the <xref:System.Collections.Generic.SortedList%602> can store. <xref:System.Collections.Generic.SortedList%602.Count%2A> is the number of elements that are actually in the <xref:System.Collections.Generic.SortedList%602>.","pos":[0,314],"nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Collections.Generic.SortedList%602.Capacity%2A&gt;</ph> is the number of elements that the <ph id=\"ph2\">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph> can store.","pos":[0,155],"source":"<xref:System.Collections.Generic.SortedList%602.Capacity%2A> is the number of elements that the <xref:System.Collections.Generic.SortedList%602> can store."},{"content":"<ph id=\"ph1\">&lt;xref:System.Collections.Generic.SortedList%602.Count%2A&gt;</ph> is the number of elements that are actually in the <ph id=\"ph2\">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph>.","pos":[156,314],"source":" <xref:System.Collections.Generic.SortedList%602.Count%2A> is the number of elements that are actually in the <xref:System.Collections.Generic.SortedList%602>."}]}]},{"pos":[321,764],"content":"<xref:System.Collections.Generic.SortedList%602.Capacity%2A> is always greater than or equal to <xref:System.Collections.Generic.SortedList%602.Count%2A>. If <xref:System.Collections.Generic.SortedList%602.Count%2A> exceeds <xref:System.Collections.Generic.SortedList%602.Capacity%2A> while adding elements, the capacity is increased by automatically reallocating the internal array before copying the old elements and adding the new elements.","nodes":[{"content":"<xref:System.Collections.Generic.SortedList%602.Capacity%2A> is always greater than or equal to <xref:System.Collections.Generic.SortedList%602.Count%2A>. If <xref:System.Collections.Generic.SortedList%602.Count%2A> exceeds <xref:System.Collections.Generic.SortedList%602.Capacity%2A> while adding elements, the capacity is increased by automatically reallocating the internal array before copying the old elements and adding the new elements.","pos":[0,443],"nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Collections.Generic.SortedList%602.Capacity%2A&gt;</ph> is always greater than or equal to <ph id=\"ph2\">&lt;xref:System.Collections.Generic.SortedList%602.Count%2A&gt;</ph>.","pos":[0,154],"source":"<xref:System.Collections.Generic.SortedList%602.Capacity%2A> is always greater than or equal to <xref:System.Collections.Generic.SortedList%602.Count%2A>."},{"content":"If <ph id=\"ph1\">&lt;xref:System.Collections.Generic.SortedList%602.Count%2A&gt;</ph> exceeds <ph id=\"ph2\">&lt;xref:System.Collections.Generic.SortedList%602.Capacity%2A&gt;</ph> while adding elements, the capacity is increased by automatically reallocating the internal array before copying the old elements and adding the new elements.","pos":[155,443],"source":" If <xref:System.Collections.Generic.SortedList%602.Count%2A> exceeds <xref:System.Collections.Generic.SortedList%602.Capacity%2A> while adding elements, the capacity is increased by automatically reallocating the internal array before copying the old elements and adding the new elements."}]}]},{"pos":[771,830],"content":"Retrieving the value of this property is an O(1) operation.","nodes":[{"content":"Retrieving the value of this property is an O(1) operation.","pos":[0,59]}]}],"pos":[89094,89931],"yaml":true,"extradata":"MT"},{"content":"The number of key/value pairs contained in the <xref href=\"System.Collections.Generic.SortedList`2\"></xref>.","nodes":[{"pos":[0,108],"content":"The number of key/value pairs contained in the <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.SortedList`2\"&gt;&lt;/xref&gt;</ph>.","source":"The number of key/value pairs contained in the <xref href=\"System.Collections.Generic.SortedList`2\"></xref>."}],"pos":[90036,90145],"yaml":true},{"content":"Returns an enumerator that iterates through the <xref href=\"System.Collections.Generic.SortedList`2\"></xref>.","nodes":[{"pos":[0,109],"content":"Returns an enumerator that iterates through the <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.SortedList`2\"&gt;&lt;/xref&gt;</ph>.","source":"Returns an enumerator that iterates through the <xref href=\"System.Collections.Generic.SortedList`2\"></xref>."}],"pos":[91620,91730],"yaml":true},{"content":"The `foreach` statement of the C# language (`for each` in C++, `For Each` in Visual Basic) hides the complexity of the enumerators.  Therefore, using `foreach` is recommended, instead of directly manipulating the enumerator.  \n  \n Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.  \n  \n The dictionary is maintained in a sorted order using an internal tree. Every new element is positioned at the correct sort position, and the tree is adjusted to maintain the sort order whenever an element is removed. While enumerating, the sort order is maintained.  \n  \n Initially, the enumerator is positioned before the first element in the collection. At this position, <xref:System.Collections.Generic.IEnumerator%601.Current%2A> is undefined. Therefore, you must call <xref:System.Collections.IEnumerator.MoveNext%2A> to advance the enumerator to the first element of the collection before reading the value of <xref:System.Collections.Generic.IEnumerator%601.Current%2A>.  \n  \n <xref:System.Collections.Generic.IEnumerator%601.Current%2A> returns the same object until <xref:System.Collections.IEnumerator.MoveNext%2A> is called. <xref:System.Collections.IEnumerator.MoveNext%2A> sets <xref:System.Collections.Generic.IEnumerator%601.Current%2A> to the next element.  \n  \n If <xref:System.Collections.IEnumerator.MoveNext%2A> passes the end of the collection, the enumerator is positioned after the last element in the collection and <xref:System.Collections.IEnumerator.MoveNext%2A> returns `false`. When the enumerator is at this position, subsequent calls to <xref:System.Collections.IEnumerator.MoveNext%2A> return `false`. If the last call to <xref:System.Collections.IEnumerator.MoveNext%2A> returned `false`, <xref:System.Collections.Generic.IEnumerator%601.Current%2A> is undefined. You cannot set <xref:System.Collections.Generic.IEnumerator%601.Current%2A> to the first element of the collection again; you must create a new enumerator instance instead.  \n  \n An enumerator remains valid as long as the collection remains unchanged. If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and its behavior is undefined.  \n  \n The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure. To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.  To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.  \n  \n Default implementations of collections in <xref:System.Collections.Generic?displayProperty=fullName> are not synchronized.  \n  \n This method is an O(1) operation.","nodes":[{"pos":[0,224],"content":"The `foreach` statement of the C# language (`for each` in C++, `For Each` in Visual Basic) hides the complexity of the enumerators.  Therefore, using `foreach` is recommended, instead of directly manipulating the enumerator.","nodes":[{"content":"The <ph id=\"ph1\">`foreach`</ph> statement of the C# language (<ph id=\"ph2\">`for each`</ph> in C++, <ph id=\"ph3\">`For Each`</ph> in Visual Basic) hides the complexity of the enumerators.","pos":[0,131],"source":"The `foreach` statement of the C# language (`for each` in C++, `For Each` in Visual Basic) hides the complexity of the enumerators."},{"content":"Therefore, using <ph id=\"ph1\">`foreach`</ph> is recommended, instead of directly manipulating the enumerator.","pos":[133,224],"source":"  Therefore, using `foreach` is recommended, instead of directly manipulating the enumerator."}]},{"pos":[231,351],"content":"Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.","nodes":[{"content":"Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.","pos":[0,120]}]},{"pos":[358,623],"content":"The dictionary is maintained in a sorted order using an internal tree. Every new element is positioned at the correct sort position, and the tree is adjusted to maintain the sort order whenever an element is removed. While enumerating, the sort order is maintained.","nodes":[{"content":"The dictionary is maintained in a sorted order using an internal tree. Every new element is positioned at the correct sort position, and the tree is adjusted to maintain the sort order whenever an element is removed. While enumerating, the sort order is maintained.","pos":[0,265],"nodes":[{"content":"The dictionary is maintained in a sorted order using an internal tree.","pos":[0,70]},{"content":"Every new element is positioned at the correct sort position, and the tree is adjusted to maintain the sort order whenever an element is removed.","pos":[71,216]},{"content":"While enumerating, the sort order is maintained.","pos":[217,265]}]}]},{"pos":[630,1036],"content":"Initially, the enumerator is positioned before the first element in the collection. At this position, <xref:System.Collections.Generic.IEnumerator%601.Current%2A> is undefined. Therefore, you must call <xref:System.Collections.IEnumerator.MoveNext%2A> to advance the enumerator to the first element of the collection before reading the value of <xref:System.Collections.Generic.IEnumerator%601.Current%2A>.","nodes":[{"content":"Initially, the enumerator is positioned before the first element in the collection. At this position, <xref:System.Collections.Generic.IEnumerator%601.Current%2A> is undefined. Therefore, you must call <xref:System.Collections.IEnumerator.MoveNext%2A> to advance the enumerator to the first element of the collection before reading the value of <xref:System.Collections.Generic.IEnumerator%601.Current%2A>.","pos":[0,406],"nodes":[{"content":"Initially, the enumerator is positioned before the first element in the collection.","pos":[0,83]},{"content":"At this position, <ph id=\"ph1\">&lt;xref:System.Collections.Generic.IEnumerator%601.Current%2A&gt;</ph> is undefined.","pos":[84,176],"source":" At this position, <xref:System.Collections.Generic.IEnumerator%601.Current%2A> is undefined."},{"content":"Therefore, you must call <ph id=\"ph1\">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> to advance the enumerator to the first element of the collection before reading the value of <ph id=\"ph2\">&lt;xref:System.Collections.Generic.IEnumerator%601.Current%2A&gt;</ph>.","pos":[177,406],"source":" Therefore, you must call <xref:System.Collections.IEnumerator.MoveNext%2A> to advance the enumerator to the first element of the collection before reading the value of <xref:System.Collections.Generic.IEnumerator%601.Current%2A>."}]}]},{"pos":[1043,1331],"content":"<xref:System.Collections.Generic.IEnumerator%601.Current%2A> returns the same object until <xref:System.Collections.IEnumerator.MoveNext%2A> is called. <xref:System.Collections.IEnumerator.MoveNext%2A> sets <xref:System.Collections.Generic.IEnumerator%601.Current%2A> to the next element.","nodes":[{"content":"<xref:System.Collections.Generic.IEnumerator%601.Current%2A> returns the same object until <xref:System.Collections.IEnumerator.MoveNext%2A> is called. <xref:System.Collections.IEnumerator.MoveNext%2A> sets <xref:System.Collections.Generic.IEnumerator%601.Current%2A> to the next element.","pos":[0,288],"nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Collections.Generic.IEnumerator%601.Current%2A&gt;</ph> returns the same object until <ph id=\"ph2\">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> is called.","pos":[0,151],"source":"<xref:System.Collections.Generic.IEnumerator%601.Current%2A> returns the same object until <xref:System.Collections.IEnumerator.MoveNext%2A> is called."},{"content":"<ph id=\"ph1\">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> sets <ph id=\"ph2\">&lt;xref:System.Collections.Generic.IEnumerator%601.Current%2A&gt;</ph> to the next element.","pos":[152,288],"source":" <xref:System.Collections.IEnumerator.MoveNext%2A> sets <xref:System.Collections.Generic.IEnumerator%601.Current%2A> to the next element."}]}]},{"pos":[1338,2028],"content":"If <xref:System.Collections.IEnumerator.MoveNext%2A> passes the end of the collection, the enumerator is positioned after the last element in the collection and <xref:System.Collections.IEnumerator.MoveNext%2A> returns `false`. When the enumerator is at this position, subsequent calls to <xref:System.Collections.IEnumerator.MoveNext%2A> return `false`. If the last call to <xref:System.Collections.IEnumerator.MoveNext%2A> returned `false`, <xref:System.Collections.Generic.IEnumerator%601.Current%2A> is undefined. You cannot set <xref:System.Collections.Generic.IEnumerator%601.Current%2A> to the first element of the collection again; you must create a new enumerator instance instead.","nodes":[{"content":"If <ph id=\"ph1\">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> passes the end of the collection, the enumerator is positioned after the last element in the collection and <ph id=\"ph2\">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> returns <ph id=\"ph3\">`false`</ph>.","pos":[0,227],"source":"If <xref:System.Collections.IEnumerator.MoveNext%2A> passes the end of the collection, the enumerator is positioned after the last element in the collection and <xref:System.Collections.IEnumerator.MoveNext%2A> returns `false`."},{"content":"When the enumerator is at this position, subsequent calls to <ph id=\"ph1\">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> return <ph id=\"ph2\">`false`</ph>.","pos":[228,354],"source":" When the enumerator is at this position, subsequent calls to <xref:System.Collections.IEnumerator.MoveNext%2A> return `false`."},{"content":"If the last call to <ph id=\"ph1\">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> returned <ph id=\"ph2\">`false`</ph>, <ph id=\"ph3\">&lt;xref:System.Collections.Generic.IEnumerator%601.Current%2A&gt;</ph> is undefined.","pos":[355,517],"source":" If the last call to <xref:System.Collections.IEnumerator.MoveNext%2A> returned `false`, <xref:System.Collections.Generic.IEnumerator%601.Current%2A> is undefined."},{"content":"You cannot set <ph id=\"ph1\">&lt;xref:System.Collections.Generic.IEnumerator%601.Current%2A&gt;</ph> to the first element of the collection again; you must create a new enumerator instance instead.","pos":[518,690],"source":" You cannot set <xref:System.Collections.Generic.IEnumerator%601.Current%2A> to the first element of the collection again; you must create a new enumerator instance instead."}]},{"pos":[2035,2270],"content":"An enumerator remains valid as long as the collection remains unchanged. If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and its behavior is undefined.","nodes":[{"content":"An enumerator remains valid as long as the collection remains unchanged. If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and its behavior is undefined.","pos":[0,235],"nodes":[{"content":"An enumerator remains valid as long as the collection remains unchanged.","pos":[0,72]},{"content":"If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and its behavior is undefined.","pos":[73,235]}]}]},{"pos":[2277,2667],"content":"The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure. To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.  To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.","nodes":[{"content":"The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure. To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.  To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.","pos":[0,390],"nodes":[{"content":"The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure.","pos":[0,154]},{"content":"To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.","pos":[155,260]},{"content":"To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.","pos":[262,390]}]}]},{"pos":[2674,2796],"content":"Default implementations of collections in <xref:System.Collections.Generic?displayProperty=fullName> are not synchronized.","nodes":[{"content":"Default implementations of collections in <ph id=\"ph1\">&lt;xref:System.Collections.Generic?displayProperty=fullName&gt;</ph> are not synchronized.","pos":[0,122],"source":"Default implementations of collections in <xref:System.Collections.Generic?displayProperty=fullName> are not synchronized."}]},{"pos":[2803,2836],"content":"This method is an O(1) operation.","nodes":[{"content":"This method is an O(1) operation.","pos":[0,33]}]}],"pos":[91741,94598],"yaml":true,"extradata":"MT"},{"content":"An <xref href=\"System.Collections.Generic.IEnumerator`1\"></xref> of type <xref href=\"System.Collections.Generic.KeyValuePair`2\"></xref> for the <xref href=\"System.Collections.Generic.SortedList`2\"></xref>.","nodes":[{"pos":[0,205],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.IEnumerator`1\"&gt;&lt;/xref&gt;</ph> of type <ph id=\"ph2\">&lt;xref href=\"System.Collections.Generic.KeyValuePair`2\"&gt;&lt;/xref&gt;</ph> for the <ph id=\"ph3\">&lt;xref href=\"System.Collections.Generic.SortedList`2\"&gt;&lt;/xref&gt;</ph>.","source":"An <xref href=\"System.Collections.Generic.IEnumerator`1\"></xref> of type <xref href=\"System.Collections.Generic.KeyValuePair`2\"></xref> for the <xref href=\"System.Collections.Generic.SortedList`2\"></xref>."}],"pos":[94894,95100],"yaml":true},{"content":"Searches for the specified key and returns the zero-based index within the entire <xref href=\"System.Collections.Generic.SortedList`2\"></xref>.","nodes":[{"pos":[0,143],"content":"Searches for the specified key and returns the zero-based index within the entire <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.SortedList`2\"&gt;&lt;/xref&gt;</ph>.","source":"Searches for the specified key and returns the zero-based index within the entire <xref href=\"System.Collections.Generic.SortedList`2\"></xref>."}],"pos":[96589,96733],"yaml":true},{"content":"This method performs a binary search; therefore, this method is an O(log `n`) operation, where `n` is <xref:System.Collections.Generic.SortedList%602.Count%2A>.","nodes":[{"pos":[0,160],"content":"This method performs a binary search; therefore, this method is an O(log <ph id=\"ph1\">`n`</ph>) operation, where <ph id=\"ph2\">`n`</ph> is <ph id=\"ph3\">&lt;xref:System.Collections.Generic.SortedList%602.Count%2A&gt;</ph>.","source":"This method performs a binary search; therefore, this method is an O(log `n`) operation, where `n` is <xref:System.Collections.Generic.SortedList%602.Count%2A>."}],"pos":[96744,96905],"yaml":true,"extradata":"MT"},{"content":"The key to locate in the <xref href=\"System.Collections.Generic.SortedList`2\"></xref>.","nodes":[{"pos":[0,86],"content":"The key to locate in the <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.SortedList`2\"&gt;&lt;/xref&gt;</ph>.","source":"The key to locate in the <xref href=\"System.Collections.Generic.SortedList`2\"></xref>."}],"pos":[97028,97115],"yaml":true},{"content":"The zero-based index of <code>key</code> within the entire <xref href=\"System.Collections.Generic.SortedList`2\"></xref>, if found; otherwise, -1.","nodes":[{"pos":[0,145],"content":"The zero-based index of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">key</ph><ept id=\"p1\">&lt;/code&gt;</ept> within the entire <ph id=\"ph2\">&lt;xref href=\"System.Collections.Generic.SortedList`2\"&gt;&lt;/xref&gt;</ph>, if found; otherwise, -1.","source":"The zero-based index of <code>key</code> within the entire <xref href=\"System.Collections.Generic.SortedList`2\"></xref>, if found; otherwise, -1."}],"pos":[97171,97317],"yaml":true},{"content":"<code>key</code> is `null`.","nodes":[{"pos":[0,27],"content":"<ph id=\"ph1\">&lt;code&gt;key&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>key</code> is `null`."}],"pos":[97497,97525],"yaml":true},{"content":"Searches for the specified value and returns the zero-based index of the first occurrence within the entire <xref href=\"System.Collections.Generic.SortedList`2\"></xref>.","nodes":[{"pos":[0,169],"content":"Searches for the specified value and returns the zero-based index of the first occurrence within the entire <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.SortedList`2\"&gt;&lt;/xref&gt;</ph>.","source":"Searches for the specified value and returns the zero-based index of the first occurrence within the entire <xref href=\"System.Collections.Generic.SortedList`2\"></xref>."}],"pos":[98948,99118],"yaml":true},{"content":"This method determines equality using the default comparer <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=fullName> for the value type `TValue`.  <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=fullName> checks whether the value type `TValue` implements <xref:System.IComparable%601?displayProperty=fullName> and uses that implementation, if available.  If not, <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=fullName> checks whether the value type `TValue` implements <xref:System.IComparable?displayProperty=fullName>.  If the value type `TValue` does not implement either interface, this method uses <xref:System.Object.Equals%2A?displayProperty=fullName>.  \n  \n This method performs a linear search; therefore, the average execution time is proportional to <xref:System.Collections.Generic.SortedList%602.Count%2A>. That is, this method is an O(`n`) operation, where `n` is <xref:System.Collections.Generic.SortedList%602.Count%2A>.","nodes":[{"pos":[0,736],"content":"This method determines equality using the default comparer <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=fullName> for the value type `TValue`.  <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=fullName> checks whether the value type `TValue` implements <xref:System.IComparable%601?displayProperty=fullName> and uses that implementation, if available.  If not, <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=fullName> checks whether the value type `TValue` implements <xref:System.IComparable?displayProperty=fullName>.  If the value type `TValue` does not implement either interface, this method uses <xref:System.Object.Equals%2A?displayProperty=fullName>.","nodes":[{"content":"This method determines equality using the default comparer <ph id=\"ph1\">&lt;xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=fullName&gt;</ph> for the value type <ph id=\"ph2\">`TValue`</ph>.","pos":[0,170],"source":"This method determines equality using the default comparer <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=fullName> for the value type `TValue`."},{"content":"<ph id=\"ph1\">&lt;xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=fullName&gt;</ph> checks whether the value type <ph id=\"ph2\">`TValue`</ph> implements <ph id=\"ph3\">&lt;xref:System.IComparable%601?displayProperty=fullName&gt;</ph> and uses that implementation, if available.","pos":[172,403],"source":"  <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=fullName> checks whether the value type `TValue` implements <xref:System.IComparable%601?displayProperty=fullName> and uses that implementation, if available."},{"content":"If not, <ph id=\"ph1\">&lt;xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=fullName&gt;</ph> checks whether the value type <ph id=\"ph2\">`TValue`</ph> implements <ph id=\"ph3\">&lt;xref:System.IComparable?displayProperty=fullName&gt;</ph>.","pos":[405,597],"source":"  If not, <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=fullName> checks whether the value type `TValue` implements <xref:System.IComparable?displayProperty=fullName>."},{"content":"If the value type <ph id=\"ph1\">`TValue`</ph> does not implement either interface, this method uses <ph id=\"ph2\">&lt;xref:System.Object.Equals%2A?displayProperty=fullName&gt;</ph>.","pos":[599,736],"source":"  If the value type `TValue` does not implement either interface, this method uses <xref:System.Object.Equals%2A?displayProperty=fullName>."}]},{"pos":[743,1013],"content":"This method performs a linear search; therefore, the average execution time is proportional to <xref:System.Collections.Generic.SortedList%602.Count%2A>. That is, this method is an O(`n`) operation, where `n` is <xref:System.Collections.Generic.SortedList%602.Count%2A>.","nodes":[{"content":"This method performs a linear search; therefore, the average execution time is proportional to <ph id=\"ph1\">&lt;xref:System.Collections.Generic.SortedList%602.Count%2A&gt;</ph>.","pos":[0,153],"source":"This method performs a linear search; therefore, the average execution time is proportional to <xref:System.Collections.Generic.SortedList%602.Count%2A>."},{"content":"That is, this method is an O(<ph id=\"ph1\">`n`</ph>) operation, where <ph id=\"ph2\">`n`</ph> is <ph id=\"ph3\">&lt;xref:System.Collections.Generic.SortedList%602.Count%2A&gt;</ph>.","pos":[154,270],"source":" That is, this method is an O(`n`) operation, where `n` is <xref:System.Collections.Generic.SortedList%602.Count%2A>."}]}],"pos":[99129,100147],"yaml":true,"extradata":"MT"},{"content":"The value to locate in the <xref href=\"System.Collections.Generic.SortedList`2\"></xref>.  The value can be `null` for reference types.","nodes":[{"pos":[0,134],"content":"The value to locate in the <xref href=\"System.Collections.Generic.SortedList`2\"></xref>.  The value can be `null` for reference types.","nodes":[{"content":"The value to locate in the <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.SortedList`2\"&gt;&lt;/xref&gt;</ph>.","pos":[0,88],"source":"The value to locate in the <xref href=\"System.Collections.Generic.SortedList`2\"></xref>."},{"content":"The value can be <ph id=\"ph1\">`null`</ph> for reference types.","pos":[90,134],"source":"  The value can be `null` for reference types."}]}],"pos":[100280,100415],"yaml":true},{"content":"The zero-based index of the first occurrence of <code>value</code> within the entire <xref href=\"System.Collections.Generic.SortedList`2\"></xref>, if found; otherwise, -1.","nodes":[{"pos":[0,171],"content":"The zero-based index of the first occurrence of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept> within the entire <ph id=\"ph2\">&lt;xref href=\"System.Collections.Generic.SortedList`2\"&gt;&lt;/xref&gt;</ph>, if found; otherwise, -1.","source":"The zero-based index of the first occurrence of <code>value</code> within the entire <xref href=\"System.Collections.Generic.SortedList`2\"></xref>, if found; otherwise, -1."}],"pos":[100471,100643],"yaml":true},{"content":"Gets or sets the value associated with the specified key.","nodes":[{"pos":[0,57],"content":"Gets or sets the value associated with the specified key.","nodes":[{"content":"Gets or sets the value associated with the specified key.","pos":[0,57]}]}],"pos":[102097,102155],"yaml":true},{"content":"This property provides the ability to access a specific element in the collection by using the following syntax: `myCollection[key]`.  \n  \n A key cannot be `null`, but a value can be, if the type of values in the list, `TValue`, is a reference type.  \n  \n If the key is not found when a value is being retrieved, <xref:System.Collections.Generic.KeyNotFoundException> is thrown. If the key is not found when a value is being set, the key and value are added.  \n  \n You can also use the <xref:System.Collections.Generic.SortedList%602.Item%2A> property to add new elements by setting the value of a key that does not exist in the <xref:System.Collections.Generic.SortedList%602>; for example, `myCollection[\"myNonexistentKey\"] = myValue`. However, if the specified key already exists in the <xref:System.Collections.Generic.SortedList%602>, setting the <xref:System.Collections.Generic.SortedList%602.Item%2A> property overwrites the old value. In contrast, the <xref:System.Collections.Generic.SortedList%602.Add%2A> method does not modify existing elements.  \n  \n The C# language uses the  keyword to define the indexers instead of implementing the <xref:System.Collections.Generic.SortedList%602.Item%2A> property. Visual Basic implements <xref:System.Collections.Generic.SortedList%602.Item%2A> as a default property, which provides the same indexing functionality.  \n  \n Retrieving the value of this property is an O(log `n`) operation, where n is <xref:System.Collections.Generic.SortedList%602.Count%2A>. Setting the property is an O(log `n`) operation if the key is already in the <xref:System.Collections.Generic.SortedList%602>. If the key is not in the list, setting the property is an O(`n`) operation for unsorted data, or O(log `n`) if the new element is added at the end of the list. If insertion causes a resize, the operation is O(`n`).","nodes":[{"pos":[0,133],"content":"This property provides the ability to access a specific element in the collection by using the following syntax: <ph id=\"ph1\">`myCollection[key]`</ph>.","source":"This property provides the ability to access a specific element in the collection by using the following syntax: `myCollection[key]`."},{"pos":[140,249],"content":"A key cannot be <ph id=\"ph1\">`null`</ph>, but a value can be, if the type of values in the list, <ph id=\"ph2\">`TValue`</ph>, is a reference type.","source":"A key cannot be `null`, but a value can be, if the type of values in the list, `TValue`, is a reference type."},{"pos":[256,458],"content":"If the key is not found when a value is being retrieved, <xref:System.Collections.Generic.KeyNotFoundException> is thrown. If the key is not found when a value is being set, the key and value are added.","nodes":[{"content":"If the key is not found when a value is being retrieved, <xref:System.Collections.Generic.KeyNotFoundException> is thrown. If the key is not found when a value is being set, the key and value are added.","pos":[0,202],"nodes":[{"content":"If the key is not found when a value is being retrieved, <ph id=\"ph1\">&lt;xref:System.Collections.Generic.KeyNotFoundException&gt;</ph> is thrown.","pos":[0,122],"source":"If the key is not found when a value is being retrieved, <xref:System.Collections.Generic.KeyNotFoundException> is thrown."},{"content":"If the key is not found when a value is being set, the key and value are added.","pos":[123,202]}]}]},{"pos":[465,1058],"content":"You can also use the <xref:System.Collections.Generic.SortedList%602.Item%2A> property to add new elements by setting the value of a key that does not exist in the <xref:System.Collections.Generic.SortedList%602>; for example, `myCollection[\"myNonexistentKey\"] = myValue`. However, if the specified key already exists in the <xref:System.Collections.Generic.SortedList%602>, setting the <xref:System.Collections.Generic.SortedList%602.Item%2A> property overwrites the old value. In contrast, the <xref:System.Collections.Generic.SortedList%602.Add%2A> method does not modify existing elements.","nodes":[{"content":"You can also use the <ph id=\"ph1\">&lt;xref:System.Collections.Generic.SortedList%602.Item%2A&gt;</ph> property to add new elements by setting the value of a key that does not exist in the <ph id=\"ph2\">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph>; for example, <ph id=\"ph3\">`myCollection[\"myNonexistentKey\"] = myValue`</ph>.","pos":[0,272],"source":"You can also use the <xref:System.Collections.Generic.SortedList%602.Item%2A> property to add new elements by setting the value of a key that does not exist in the <xref:System.Collections.Generic.SortedList%602>; for example, `myCollection[\"myNonexistentKey\"] = myValue`."},{"content":"However, if the specified key already exists in the <ph id=\"ph1\">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph>, setting the <ph id=\"ph2\">&lt;xref:System.Collections.Generic.SortedList%602.Item%2A&gt;</ph> property overwrites the old value.","pos":[273,478],"source":" However, if the specified key already exists in the <xref:System.Collections.Generic.SortedList%602>, setting the <xref:System.Collections.Generic.SortedList%602.Item%2A> property overwrites the old value."},{"content":"In contrast, the <ph id=\"ph1\">&lt;xref:System.Collections.Generic.SortedList%602.Add%2A&gt;</ph> method does not modify existing elements.","pos":[479,593],"source":" In contrast, the <xref:System.Collections.Generic.SortedList%602.Add%2A> method does not modify existing elements."}]},{"pos":[1065,1368],"content":"The C# language uses the  keyword to define the indexers instead of implementing the <xref:System.Collections.Generic.SortedList%602.Item%2A> property. Visual Basic implements <xref:System.Collections.Generic.SortedList%602.Item%2A> as a default property, which provides the same indexing functionality.","nodes":[{"content":"The C# language uses the  keyword to define the indexers instead of implementing the <xref:System.Collections.Generic.SortedList%602.Item%2A> property. Visual Basic implements <xref:System.Collections.Generic.SortedList%602.Item%2A> as a default property, which provides the same indexing functionality.","pos":[0,303],"nodes":[{"content":"The C# language uses the  keyword to define the indexers instead of implementing the <ph id=\"ph1\">&lt;xref:System.Collections.Generic.SortedList%602.Item%2A&gt;</ph> property.","pos":[0,151],"source":"The C# language uses the  keyword to define the indexers instead of implementing the <xref:System.Collections.Generic.SortedList%602.Item%2A> property."},{"content":"Visual Basic implements <ph id=\"ph1\">&lt;xref:System.Collections.Generic.SortedList%602.Item%2A&gt;</ph> as a default property, which provides the same indexing functionality.","pos":[152,303],"source":" Visual Basic implements <xref:System.Collections.Generic.SortedList%602.Item%2A> as a default property, which provides the same indexing functionality."}]}]},{"pos":[1375,1852],"content":"Retrieving the value of this property is an O(log `n`) operation, where n is <xref:System.Collections.Generic.SortedList%602.Count%2A>. Setting the property is an O(log `n`) operation if the key is already in the <xref:System.Collections.Generic.SortedList%602>. If the key is not in the list, setting the property is an O(`n`) operation for unsorted data, or O(log `n`) if the new element is added at the end of the list. If insertion causes a resize, the operation is O(`n`).","nodes":[{"content":"Retrieving the value of this property is an O(log <ph id=\"ph1\">`n`</ph>) operation, where n is <ph id=\"ph2\">&lt;xref:System.Collections.Generic.SortedList%602.Count%2A&gt;</ph>.","pos":[0,135],"source":"Retrieving the value of this property is an O(log `n`) operation, where n is <xref:System.Collections.Generic.SortedList%602.Count%2A>."},{"content":"Setting the property is an O(log <ph id=\"ph1\">`n`</ph>) operation if the key is already in the <ph id=\"ph2\">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph>.","pos":[136,262],"source":" Setting the property is an O(log `n`) operation if the key is already in the <xref:System.Collections.Generic.SortedList%602>."},{"content":"If the key is not in the list, setting the property is an O(<ph id=\"ph1\">`n`</ph>) operation for unsorted data, or O(log <ph id=\"ph2\">`n`</ph>) if the new element is added at the end of the list.","pos":[263,422],"source":" If the key is not in the list, setting the property is an O(`n`) operation for unsorted data, or O(log `n`) if the new element is added at the end of the list."},{"content":"If insertion causes a resize, the operation is O(<ph id=\"ph1\">`n`</ph>).","pos":[423,477],"source":" If insertion causes a resize, the operation is O(`n`)."}]}],"pos":[102166,104033],"yaml":true,"extradata":"MT"},{"content":"The key whose value to get or set.","nodes":[{"pos":[0,34],"content":"The key whose value to get or set.","nodes":[{"content":"The key whose value to get or set.","pos":[0,34]}]}],"pos":[105911,105946],"yaml":true},{"content":"The value associated with the specified key. If the specified key is not found, a get operation throws a <xref href=\"System.Collections.Generic.KeyNotFoundException\"></xref> and a set operation creates a new element using the specified key.","nodes":[{"pos":[0,240],"content":"The value associated with the specified key. If the specified key is not found, a get operation throws a <xref href=\"System.Collections.Generic.KeyNotFoundException\"></xref> and a set operation creates a new element using the specified key.","nodes":[{"content":"The value associated with the specified key.","pos":[0,44]},{"content":"If the specified key is not found, a get operation throws a <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.KeyNotFoundException\"&gt;&lt;/xref&gt;</ph> and a set operation creates a new element using the specified key.","pos":[45,240],"source":" If the specified key is not found, a get operation throws a <xref href=\"System.Collections.Generic.KeyNotFoundException\"></xref> and a set operation creates a new element using the specified key."}]}],"pos":[105996,106237],"yaml":true},{"content":"<code>key</code> is `null`.","nodes":[{"pos":[0,27],"content":"<ph id=\"ph1\">&lt;code&gt;key&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>key</code> is `null`."}],"pos":[106411,106439],"yaml":true},{"content":"The property is retrieved and <code>key</code> does not exist in the collection.","nodes":[{"pos":[0,80],"content":"The property is retrieved and <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">key</ph><ept id=\"p1\">&lt;/code&gt;</ept> does not exist in the collection.","source":"The property is retrieved and <code>key</code> does not exist in the collection."}],"pos":[106579,106660],"yaml":true},{"content":"Gets a collection containing the keys in the <xref href=\"System.Collections.Generic.SortedList`2\"></xref>, in sorted order.","nodes":[{"pos":[0,123],"content":"Gets a collection containing the keys in the <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.SortedList`2\"&gt;&lt;/xref&gt;</ph>, in sorted order.","source":"Gets a collection containing the keys in the <xref href=\"System.Collections.Generic.SortedList`2\"></xref>, in sorted order."}],"pos":[108001,108125],"yaml":true},{"content":"The order of the keys in the <xref:System.Collections.Generic.IList%601> is the same as the order in the <xref:System.Collections.Generic.SortedList%602>.  \n  \n The returned <xref:System.Collections.Generic.IList%601> is not a static copy; instead, the <xref:System.Collections.Generic.IList%601> refers back to the keys in the original <xref:System.Collections.Generic.SortedList%602>. Therefore, changes to the <xref:System.Collections.Generic.SortedList%602> continue to be reflected in the <xref:System.Collections.Generic.IList%601>.  \n  \n The collection returned by the <xref:System.Collections.Generic.SortedList%602.Keys%2A> property provides an efficient way to retrieve keys by index. It is not necessary to regenerate the list when the property is accessed, because the list is just a wrapper for the internal array of keys. The following code shows the use of the <xref:System.Collections.Generic.SortedList%602.Keys%2A> property for indexed retrieval of keys from a sorted list of elements with string keys:  \n  \n [!code-cpp[Generic.SortedList#11](~/samples/snippets/cpp/VS_Snippets_CLR/Generic.SortedList/cpp/remarks.cpp#11)]\n [!code-csharp[Generic.SortedList#11](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.SortedList/CS/remarks.cs#11)]\n [!code-vb[Generic.SortedList#11](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.SortedList/VB/remarks.vb#11)]  \n  \n Retrieving the value of this property is an O(1) operation.","nodes":[{"pos":[0,154],"content":"The order of the keys in the <xref:System.Collections.Generic.IList%601> is the same as the order in the <xref:System.Collections.Generic.SortedList%602>.","nodes":[{"content":"The order of the keys in the <ph id=\"ph1\">&lt;xref:System.Collections.Generic.IList%601&gt;</ph> is the same as the order in the <ph id=\"ph2\">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph>.","pos":[0,154],"source":"The order of the keys in the <xref:System.Collections.Generic.IList%601> is the same as the order in the <xref:System.Collections.Generic.SortedList%602>."}]},{"pos":[161,538],"content":"The returned <xref:System.Collections.Generic.IList%601> is not a static copy; instead, the <xref:System.Collections.Generic.IList%601> refers back to the keys in the original <xref:System.Collections.Generic.SortedList%602>. Therefore, changes to the <xref:System.Collections.Generic.SortedList%602> continue to be reflected in the <xref:System.Collections.Generic.IList%601>.","nodes":[{"content":"The returned <xref:System.Collections.Generic.IList%601> is not a static copy; instead, the <xref:System.Collections.Generic.IList%601> refers back to the keys in the original <xref:System.Collections.Generic.SortedList%602>. Therefore, changes to the <xref:System.Collections.Generic.SortedList%602> continue to be reflected in the <xref:System.Collections.Generic.IList%601>.","pos":[0,377],"nodes":[{"content":"The returned <ph id=\"ph1\">&lt;xref:System.Collections.Generic.IList%601&gt;</ph> is not a static copy; instead, the <ph id=\"ph2\">&lt;xref:System.Collections.Generic.IList%601&gt;</ph> refers back to the keys in the original <ph id=\"ph3\">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph>.","pos":[0,225],"source":"The returned <xref:System.Collections.Generic.IList%601> is not a static copy; instead, the <xref:System.Collections.Generic.IList%601> refers back to the keys in the original <xref:System.Collections.Generic.SortedList%602>."},{"content":"Therefore, changes to the <ph id=\"ph1\">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph> continue to be reflected in the <ph id=\"ph2\">&lt;xref:System.Collections.Generic.IList%601&gt;</ph>.","pos":[226,377],"source":" Therefore, changes to the <xref:System.Collections.Generic.SortedList%602> continue to be reflected in the <xref:System.Collections.Generic.IList%601>."}]}]},{"pos":[545,1020],"content":"The collection returned by the <xref:System.Collections.Generic.SortedList%602.Keys%2A> property provides an efficient way to retrieve keys by index. It is not necessary to regenerate the list when the property is accessed, because the list is just a wrapper for the internal array of keys. The following code shows the use of the <xref:System.Collections.Generic.SortedList%602.Keys%2A> property for indexed retrieval of keys from a sorted list of elements with string keys:","nodes":[{"content":"The collection returned by the <xref:System.Collections.Generic.SortedList%602.Keys%2A> property provides an efficient way to retrieve keys by index. It is not necessary to regenerate the list when the property is accessed, because the list is just a wrapper for the internal array of keys. The following code shows the use of the <xref:System.Collections.Generic.SortedList%602.Keys%2A> property for indexed retrieval of keys from a sorted list of elements with string keys:","pos":[0,475],"nodes":[{"content":"The collection returned by the <ph id=\"ph1\">&lt;xref:System.Collections.Generic.SortedList%602.Keys%2A&gt;</ph> property provides an efficient way to retrieve keys by index.","pos":[0,149],"source":"The collection returned by the <xref:System.Collections.Generic.SortedList%602.Keys%2A> property provides an efficient way to retrieve keys by index."},{"content":"It is not necessary to regenerate the list when the property is accessed, because the list is just a wrapper for the internal array of keys.","pos":[150,290]},{"content":"The following code shows the use of the <ph id=\"ph1\">&lt;xref:System.Collections.Generic.SortedList%602.Keys%2A&gt;</ph> property for indexed retrieval of keys from a sorted list of elements with string keys:","pos":[291,475],"source":" The following code shows the use of the <xref:System.Collections.Generic.SortedList%602.Keys%2A> property for indexed retrieval of keys from a sorted list of elements with string keys:"}]}]},{"pos":[1027,1376],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>Generic.SortedList#11<ept id=\"p2\">](~/samples/snippets/cpp/VS_Snippets_CLR/Generic.SortedList/cpp/remarks.cpp#11)</ept><ept id=\"p1\">]</ept> <bpt id=\"p3\">[!code-csharp</bpt><bpt id=\"p4\">[</bpt>Generic.SortedList#11<ept id=\"p4\">](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.SortedList/CS/remarks.cs#11)</ept><ept id=\"p3\">]</ept> <bpt id=\"p5\">[!code-vb</bpt><bpt id=\"p6\">[</bpt>Generic.SortedList#11<ept id=\"p6\">](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.SortedList/VB/remarks.vb#11)</ept><ept id=\"p5\">]</ept>","source":"[!code-cpp[Generic.SortedList#11](~/samples/snippets/cpp/VS_Snippets_CLR/Generic.SortedList/cpp/remarks.cpp#11)]\n [!code-csharp[Generic.SortedList#11](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.SortedList/CS/remarks.cs#11)]\n [!code-vb[Generic.SortedList#11](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.SortedList/VB/remarks.vb#11)]"},{"pos":[1383,1442],"content":"Retrieving the value of this property is an O(1) operation.","nodes":[{"content":"Retrieving the value of this property is an O(1) operation.","pos":[0,59]}]}],"pos":[108136,109591],"yaml":true,"extradata":"MT"},{"content":"A <xref href=\"System.Collections.Generic.IList`1\"></xref> containing the keys in the <xref href=\"System.Collections.Generic.SortedList`2\"></xref>.","nodes":[{"pos":[0,146],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.IList`1\"&gt;&lt;/xref&gt;</ph> containing the keys in the <ph id=\"ph2\">&lt;xref href=\"System.Collections.Generic.SortedList`2\"&gt;&lt;/xref&gt;</ph>.","source":"A <xref href=\"System.Collections.Generic.IList`1\"></xref> containing the keys in the <xref href=\"System.Collections.Generic.SortedList`2\"></xref>."}],"pos":[110972,111119],"yaml":true},{"content":"Removes the element with the specified key from the <xref href=\"System.Collections.Generic.SortedList`2\"></xref>.","nodes":[{"pos":[0,113],"content":"Removes the element with the specified key from the <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.SortedList`2\"&gt;&lt;/xref&gt;</ph>.","source":"Removes the element with the specified key from the <xref href=\"System.Collections.Generic.SortedList`2\"></xref>."}],"pos":[112575,112689],"yaml":true},{"content":"This method performs a binary search; however, the elements are moved up to fill in the open spot, so this method is an O(`n`) operation, where `n` is <xref:System.Collections.Generic.SortedList%602.Count%2A>.","nodes":[{"pos":[0,209],"content":"This method performs a binary search; however, the elements are moved up to fill in the open spot, so this method is an O(<ph id=\"ph1\">`n`</ph>) operation, where <ph id=\"ph2\">`n`</ph> is <ph id=\"ph3\">&lt;xref:System.Collections.Generic.SortedList%602.Count%2A&gt;</ph>.","source":"This method performs a binary search; however, the elements are moved up to fill in the open spot, so this method is an O(`n`) operation, where `n` is <xref:System.Collections.Generic.SortedList%602.Count%2A>."}],"pos":[112700,112910],"yaml":true,"extradata":"MT"},{"content":"The key of the element to remove.","nodes":[{"pos":[0,33],"content":"The key of the element to remove.","nodes":[{"content":"The key of the element to remove.","pos":[0,33]}]}],"pos":[113693,113727],"yaml":true},{"content":"`true` if the element is successfully removed; otherwise, `false`.  This method also returns `false` if <code>key</code> was not found in the original <xref href=\"System.Collections.Generic.SortedList`2\"></xref>.","nodes":[{"pos":[0,212],"content":"`true` if the element is successfully removed; otherwise, `false`.  This method also returns `false` if <code>key</code> was not found in the original <xref href=\"System.Collections.Generic.SortedList`2\"></xref>.","nodes":[{"content":"<ph id=\"ph1\">`true`</ph> if the element is successfully removed; otherwise, <ph id=\"ph2\">`false`</ph>.","pos":[0,66],"source":"`true` if the element is successfully removed; otherwise, `false`."},{"content":"This method also returns <ph id=\"ph1\">`false`</ph> if <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">key</ph><ept id=\"p1\">&lt;/code&gt;</ept> was not found in the original <ph id=\"ph3\">&lt;xref href=\"System.Collections.Generic.SortedList`2\"&gt;&lt;/xref&gt;</ph>.","pos":[68,212],"source":"  This method also returns `false` if <code>key</code> was not found in the original <xref href=\"System.Collections.Generic.SortedList`2\"></xref>."}]}],"pos":[113785,114000],"yaml":true},{"content":"<code>key</code> is `null`.","nodes":[{"pos":[0,27],"content":"<ph id=\"ph1\">&lt;code&gt;key&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>key</code> is `null`."}],"pos":[114176,114204],"yaml":true},{"content":"Removes the element at the specified index of the <xref href=\"System.Collections.Generic.SortedList`2\"></xref>.","nodes":[{"pos":[0,111],"content":"Removes the element at the specified index of the <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.SortedList`2\"&gt;&lt;/xref&gt;</ph>.","source":"Removes the element at the specified index of the <xref href=\"System.Collections.Generic.SortedList`2\"></xref>."}],"pos":[115630,115742],"yaml":true},{"content":"This method performs a binary search; however, the elements are moved up to fill in the open spot, so this method is an O(`n`) operation, where `n` is <xref:System.Collections.Generic.SortedList%602.Count%2A>.","nodes":[{"pos":[0,209],"content":"This method performs a binary search; however, the elements are moved up to fill in the open spot, so this method is an O(<ph id=\"ph1\">`n`</ph>) operation, where <ph id=\"ph2\">`n`</ph> is <ph id=\"ph3\">&lt;xref:System.Collections.Generic.SortedList%602.Count%2A&gt;</ph>.","source":"This method performs a binary search; however, the elements are moved up to fill in the open spot, so this method is an O(`n`) operation, where `n` is <xref:System.Collections.Generic.SortedList%602.Count%2A>."}],"pos":[115753,115963],"yaml":true,"extradata":"MT"},{"content":"The zero-based index of the element to remove.","nodes":[{"pos":[0,46],"content":"The zero-based index of the element to remove.","nodes":[{"content":"The zero-based index of the element to remove.","pos":[0,46]}]}],"pos":[116096,116143],"yaml":true},{"content":"<code>index</code> is less than zero.  \n  \n -or-  \n  \n <code>index</code> is equal to or greater than <xref href=\"System.Collections.Generic.SortedList`2.Count\"></xref>.","nodes":[{"pos":[0,37],"content":"<ph id=\"ph1\">&lt;code&gt;index&lt;/code&gt;</ph> is less than zero.","source":"<code>index</code> is less than zero."},{"pos":[44,48],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[55,169],"content":"<ph id=\"ph1\">&lt;code&gt;index&lt;/code&gt;</ph> is equal to or greater than <ph id=\"ph2\">&lt;xref href=\"System.Collections.Generic.SortedList`2.Count\"&gt;&lt;/xref&gt;</ph>.","source":"<code>index</code> is equal to or greater than <xref href=\"System.Collections.Generic.SortedList`2.Count\"></xref>."}],"pos":[116333,116511],"yaml":true},{"content":"Sets the capacity to the actual number of elements in the <xref href=\"System.Collections.Generic.SortedList`2\"></xref>, if that number is less than 90 percent of current capacity.","nodes":[{"pos":[0,179],"content":"Sets the capacity to the actual number of elements in the <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.SortedList`2\"&gt;&lt;/xref&gt;</ph>, if that number is less than 90 percent of current capacity.","source":"Sets the capacity to the actual number of elements in the <xref href=\"System.Collections.Generic.SortedList`2\"></xref>, if that number is less than 90 percent of current capacity."}],"pos":[117892,118072],"yaml":true},{"content":"This method can be used to minimize a collection's memory overhead if no new elements will be added to the collection. The cost of reallocating and copying a large <xref:System.Collections.Generic.SortedList%602> can be considerable, however, so the <xref:System.Collections.Generic.SortedList%602.TrimExcess%2A> method does nothing if the list is at more than 90 percent of capacity. This avoids incurring a large reallocation cost for a relatively small gain.  \n  \n This method is an O(`n`) operation, where `n` is <xref:System.Collections.Generic.SortedList%602.Count%2A>.  \n  \n To reset a <xref:System.Collections.Generic.SortedList%602> to its initial state, call the <xref:System.Collections.Generic.SortedList%602.Clear%2A> method before calling <xref:System.Collections.Generic.SortedList%602.TrimExcess%2A> method. Trimming an empty <xref:System.Collections.Generic.SortedList%602> sets the capacity of the <xref:System.Collections.Generic.SortedList%602> to the default capacity.  \n  \n The capacity can also be set using the <xref:System.Collections.Generic.SortedList%602.Capacity%2A> property.","nodes":[{"pos":[0,461],"content":"This method can be used to minimize a collection's memory overhead if no new elements will be added to the collection. The cost of reallocating and copying a large <xref:System.Collections.Generic.SortedList%602> can be considerable, however, so the <xref:System.Collections.Generic.SortedList%602.TrimExcess%2A> method does nothing if the list is at more than 90 percent of capacity. This avoids incurring a large reallocation cost for a relatively small gain.","nodes":[{"content":"This method can be used to minimize a collection's memory overhead if no new elements will be added to the collection. The cost of reallocating and copying a large <xref:System.Collections.Generic.SortedList%602> can be considerable, however, so the <xref:System.Collections.Generic.SortedList%602.TrimExcess%2A> method does nothing if the list is at more than 90 percent of capacity. This avoids incurring a large reallocation cost for a relatively small gain.","pos":[0,461],"nodes":[{"content":"This method can be used to minimize a collection's memory overhead if no new elements will be added to the collection.","pos":[0,118]},{"content":"The cost of reallocating and copying a large <ph id=\"ph1\">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph> can be considerable, however, so the <ph id=\"ph2\">&lt;xref:System.Collections.Generic.SortedList%602.TrimExcess%2A&gt;</ph> method does nothing if the list is at more than 90 percent of capacity.","pos":[119,384],"source":" The cost of reallocating and copying a large <xref:System.Collections.Generic.SortedList%602> can be considerable, however, so the <xref:System.Collections.Generic.SortedList%602.TrimExcess%2A> method does nothing if the list is at more than 90 percent of capacity."},{"content":"This avoids incurring a large reallocation cost for a relatively small gain.","pos":[385,461]}]}]},{"pos":[468,575],"content":"This method is an O(<ph id=\"ph1\">`n`</ph>) operation, where <ph id=\"ph2\">`n`</ph> is <ph id=\"ph3\">&lt;xref:System.Collections.Generic.SortedList%602.Count%2A&gt;</ph>.","source":"This method is an O(`n`) operation, where `n` is <xref:System.Collections.Generic.SortedList%602.Count%2A>."},{"pos":[582,989],"content":"To reset a <xref:System.Collections.Generic.SortedList%602> to its initial state, call the <xref:System.Collections.Generic.SortedList%602.Clear%2A> method before calling <xref:System.Collections.Generic.SortedList%602.TrimExcess%2A> method. Trimming an empty <xref:System.Collections.Generic.SortedList%602> sets the capacity of the <xref:System.Collections.Generic.SortedList%602> to the default capacity.","nodes":[{"content":"To reset a <xref:System.Collections.Generic.SortedList%602> to its initial state, call the <xref:System.Collections.Generic.SortedList%602.Clear%2A> method before calling <xref:System.Collections.Generic.SortedList%602.TrimExcess%2A> method. Trimming an empty <xref:System.Collections.Generic.SortedList%602> sets the capacity of the <xref:System.Collections.Generic.SortedList%602> to the default capacity.","pos":[0,407],"nodes":[{"content":"To reset a <ph id=\"ph1\">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph> to its initial state, call the <ph id=\"ph2\">&lt;xref:System.Collections.Generic.SortedList%602.Clear%2A&gt;</ph> method before calling <ph id=\"ph3\">&lt;xref:System.Collections.Generic.SortedList%602.TrimExcess%2A&gt;</ph> method.","pos":[0,241],"source":"To reset a <xref:System.Collections.Generic.SortedList%602> to its initial state, call the <xref:System.Collections.Generic.SortedList%602.Clear%2A> method before calling <xref:System.Collections.Generic.SortedList%602.TrimExcess%2A> method."},{"content":"Trimming an empty <ph id=\"ph1\">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph> sets the capacity of the <ph id=\"ph2\">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph> to the default capacity.","pos":[242,407],"source":" Trimming an empty <xref:System.Collections.Generic.SortedList%602> sets the capacity of the <xref:System.Collections.Generic.SortedList%602> to the default capacity."}]}]},{"pos":[996,1105],"content":"The capacity can also be set using the <xref:System.Collections.Generic.SortedList%602.Capacity%2A> property.","nodes":[{"content":"The capacity can also be set using the <ph id=\"ph1\">&lt;xref:System.Collections.Generic.SortedList%602.Capacity%2A&gt;</ph> property.","pos":[0,109],"source":"The capacity can also be set using the <xref:System.Collections.Generic.SortedList%602.Capacity%2A> property."}]}],"pos":[118083,119197],"yaml":true,"extradata":"MT"},{"content":"Gets the value associated with the specified key.","nodes":[{"pos":[0,49],"content":"Gets the value associated with the specified key.","nodes":[{"content":"Gets the value associated with the specified key.","pos":[0,49]}]}],"pos":[120794,120844],"yaml":true},{"content":"This method combines the functionality of the <xref:System.Collections.Generic.SortedList%602.ContainsKey%2A> method and the <xref:System.Collections.Generic.SortedList%602.Item%2A> property.  \n  \n If the key is not found, then the `value` parameter gets the appropriate default value for the value type `TValue`; for example, zero (0) for integer types, `false` for Boolean types, and `null` for reference types.  \n  \n This method performs a binary search; therefore, this method is an O(log `n`) operation, where `n` is <xref:System.Collections.Generic.SortedList%602.Count%2A>.","nodes":[{"pos":[0,191],"content":"This method combines the functionality of the <xref:System.Collections.Generic.SortedList%602.ContainsKey%2A> method and the <xref:System.Collections.Generic.SortedList%602.Item%2A> property.","nodes":[{"content":"This method combines the functionality of the <ph id=\"ph1\">&lt;xref:System.Collections.Generic.SortedList%602.ContainsKey%2A&gt;</ph> method and the <ph id=\"ph2\">&lt;xref:System.Collections.Generic.SortedList%602.Item%2A&gt;</ph> property.","pos":[0,191],"source":"This method combines the functionality of the <xref:System.Collections.Generic.SortedList%602.ContainsKey%2A> method and the <xref:System.Collections.Generic.SortedList%602.Item%2A> property."}]},{"pos":[198,413],"content":"If the key is not found, then the <ph id=\"ph1\">`value`</ph> parameter gets the appropriate default value for the value type <ph id=\"ph2\">`TValue`</ph>; for example, zero (0) for integer types, <ph id=\"ph3\">`false`</ph> for Boolean types, and <ph id=\"ph4\">`null`</ph> for reference types.","source":"If the key is not found, then the `value` parameter gets the appropriate default value for the value type `TValue`; for example, zero (0) for integer types, `false` for Boolean types, and `null` for reference types."},{"pos":[420,580],"content":"This method performs a binary search; therefore, this method is an O(log <ph id=\"ph1\">`n`</ph>) operation, where <ph id=\"ph2\">`n`</ph> is <ph id=\"ph3\">&lt;xref:System.Collections.Generic.SortedList%602.Count%2A&gt;</ph>.","source":"This method performs a binary search; therefore, this method is an O(log `n`) operation, where `n` is <xref:System.Collections.Generic.SortedList%602.Count%2A>."}],"pos":[120855,121442],"yaml":true,"extradata":"MT"},{"content":"The key whose value to get.","nodes":[{"pos":[0,27],"content":"The key whose value to get.","nodes":[{"content":"The key whose value to get.","pos":[0,27]}]}],"pos":[122839,122867],"yaml":true},{"content":"When this method returns, the value associated with the specified key, if the key is found; otherwise, the default value for the type of the <code>value</code> parameter. This parameter is passed uninitialized.","nodes":[{"pos":[0,210],"content":"When this method returns, the value associated with the specified key, if the key is found; otherwise, the default value for the type of the <code>value</code> parameter. This parameter is passed uninitialized.","nodes":[{"content":"When this method returns, the value associated with the specified key, if the key is found; otherwise, the default value for the type of the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter.","pos":[0,170],"source":"When this method returns, the value associated with the specified key, if the key is found; otherwise, the default value for the type of the <code>value</code> parameter."},{"content":"This parameter is passed uninitialized.","pos":[171,210]}]}],"pos":[122921,123132],"yaml":true},{"content":"`true` if the <xref href=\"System.Collections.Generic.SortedList`2\"></xref> contains an element with the specified key; otherwise, `false`.","nodes":[{"pos":[0,138],"content":"<ph id=\"ph1\">`true`</ph> if the <ph id=\"ph2\">&lt;xref href=\"System.Collections.Generic.SortedList`2\"&gt;&lt;/xref&gt;</ph> contains an element with the specified key; otherwise, <ph id=\"ph3\">`false`</ph>.","source":"`true` if the <xref href=\"System.Collections.Generic.SortedList`2\"></xref> contains an element with the specified key; otherwise, `false`."}],"pos":[123190,123331],"yaml":true},{"content":"<code>key</code> is `null`.","nodes":[{"pos":[0,27],"content":"<ph id=\"ph1\">&lt;code&gt;key&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>key</code> is `null`."}],"pos":[123512,123540],"yaml":true},{"content":"Gets a collection containing the values in the <xref href=\"System.Collections.Generic.SortedList`2\"></xref>.","nodes":[{"pos":[0,108],"content":"Gets a collection containing the values in the <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.SortedList`2\"&gt;&lt;/xref&gt;</ph>.","source":"Gets a collection containing the values in the <xref href=\"System.Collections.Generic.SortedList`2\"></xref>."}],"pos":[124893,125002],"yaml":true},{"content":"The order of the values in the <xref:System.Collections.Generic.IList%601> is the same as the order in the <xref:System.Collections.Generic.SortedList%602>.  \n  \n The returned <xref:System.Collections.Generic.IList%601> is not a static copy; instead, the <xref:System.Collections.Generic.IList%601> refers back to the values in the original <xref:System.Collections.Generic.SortedList%602>. Therefore, changes to the <xref:System.Collections.Generic.SortedList%602> continue to be reflected in the <xref:System.Collections.Generic.IList%601>.  \n  \n The collection returned by the <xref:System.Collections.Generic.SortedList%602.Values%2A> property provides an efficient way to retrieve values by index. It is not necessary to regenerate the list when the property is accessed, because the list is just a wrapper for the internal array of values. The following code shows the use of the <xref:System.Collections.Generic.SortedList%602.Values%2A> property for indexed retrieval of values from a sorted list of strings:  \n  \n [!code-cpp[Generic.SortedList#11](~/samples/snippets/cpp/VS_Snippets_CLR/Generic.SortedList/cpp/remarks.cpp#11)]\n [!code-csharp[Generic.SortedList#11](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.SortedList/CS/remarks.cs#11)]\n [!code-vb[Generic.SortedList#11](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.SortedList/VB/remarks.vb#11)]  \n  \n Retrieving the value of this property is an O(1) operation.","nodes":[{"pos":[0,156],"content":"The order of the values in the <xref:System.Collections.Generic.IList%601> is the same as the order in the <xref:System.Collections.Generic.SortedList%602>.","nodes":[{"content":"The order of the values in the <ph id=\"ph1\">&lt;xref:System.Collections.Generic.IList%601&gt;</ph> is the same as the order in the <ph id=\"ph2\">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph>.","pos":[0,156],"source":"The order of the values in the <xref:System.Collections.Generic.IList%601> is the same as the order in the <xref:System.Collections.Generic.SortedList%602>."}]},{"pos":[163,542],"content":"The returned <xref:System.Collections.Generic.IList%601> is not a static copy; instead, the <xref:System.Collections.Generic.IList%601> refers back to the values in the original <xref:System.Collections.Generic.SortedList%602>. Therefore, changes to the <xref:System.Collections.Generic.SortedList%602> continue to be reflected in the <xref:System.Collections.Generic.IList%601>.","nodes":[{"content":"The returned <xref:System.Collections.Generic.IList%601> is not a static copy; instead, the <xref:System.Collections.Generic.IList%601> refers back to the values in the original <xref:System.Collections.Generic.SortedList%602>. Therefore, changes to the <xref:System.Collections.Generic.SortedList%602> continue to be reflected in the <xref:System.Collections.Generic.IList%601>.","pos":[0,379],"nodes":[{"content":"The returned <ph id=\"ph1\">&lt;xref:System.Collections.Generic.IList%601&gt;</ph> is not a static copy; instead, the <ph id=\"ph2\">&lt;xref:System.Collections.Generic.IList%601&gt;</ph> refers back to the values in the original <ph id=\"ph3\">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph>.","pos":[0,227],"source":"The returned <xref:System.Collections.Generic.IList%601> is not a static copy; instead, the <xref:System.Collections.Generic.IList%601> refers back to the values in the original <xref:System.Collections.Generic.SortedList%602>."},{"content":"Therefore, changes to the <ph id=\"ph1\">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph> continue to be reflected in the <ph id=\"ph2\">&lt;xref:System.Collections.Generic.IList%601&gt;</ph>.","pos":[228,379],"source":" Therefore, changes to the <xref:System.Collections.Generic.SortedList%602> continue to be reflected in the <xref:System.Collections.Generic.IList%601>."}]}]},{"pos":[549,1016],"content":"The collection returned by the <xref:System.Collections.Generic.SortedList%602.Values%2A> property provides an efficient way to retrieve values by index. It is not necessary to regenerate the list when the property is accessed, because the list is just a wrapper for the internal array of values. The following code shows the use of the <xref:System.Collections.Generic.SortedList%602.Values%2A> property for indexed retrieval of values from a sorted list of strings:","nodes":[{"content":"The collection returned by the <xref:System.Collections.Generic.SortedList%602.Values%2A> property provides an efficient way to retrieve values by index. It is not necessary to regenerate the list when the property is accessed, because the list is just a wrapper for the internal array of values. The following code shows the use of the <xref:System.Collections.Generic.SortedList%602.Values%2A> property for indexed retrieval of values from a sorted list of strings:","pos":[0,467],"nodes":[{"content":"The collection returned by the <ph id=\"ph1\">&lt;xref:System.Collections.Generic.SortedList%602.Values%2A&gt;</ph> property provides an efficient way to retrieve values by index.","pos":[0,153],"source":"The collection returned by the <xref:System.Collections.Generic.SortedList%602.Values%2A> property provides an efficient way to retrieve values by index."},{"content":"It is not necessary to regenerate the list when the property is accessed, because the list is just a wrapper for the internal array of values.","pos":[154,296]},{"content":"The following code shows the use of the <ph id=\"ph1\">&lt;xref:System.Collections.Generic.SortedList%602.Values%2A&gt;</ph> property for indexed retrieval of values from a sorted list of strings:","pos":[297,467],"source":" The following code shows the use of the <xref:System.Collections.Generic.SortedList%602.Values%2A> property for indexed retrieval of values from a sorted list of strings:"}]}]},{"pos":[1023,1372],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>Generic.SortedList#11<ept id=\"p2\">](~/samples/snippets/cpp/VS_Snippets_CLR/Generic.SortedList/cpp/remarks.cpp#11)</ept><ept id=\"p1\">]</ept> <bpt id=\"p3\">[!code-csharp</bpt><bpt id=\"p4\">[</bpt>Generic.SortedList#11<ept id=\"p4\">](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.SortedList/CS/remarks.cs#11)</ept><ept id=\"p3\">]</ept> <bpt id=\"p5\">[!code-vb</bpt><bpt id=\"p6\">[</bpt>Generic.SortedList#11<ept id=\"p6\">](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.SortedList/VB/remarks.vb#11)</ept><ept id=\"p5\">]</ept>","source":"[!code-cpp[Generic.SortedList#11](~/samples/snippets/cpp/VS_Snippets_CLR/Generic.SortedList/cpp/remarks.cpp#11)]\n [!code-csharp[Generic.SortedList#11](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.SortedList/CS/remarks.cs#11)]\n [!code-vb[Generic.SortedList#11](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.SortedList/VB/remarks.vb#11)]"},{"pos":[1379,1438],"content":"Retrieving the value of this property is an O(1) operation.","nodes":[{"content":"Retrieving the value of this property is an O(1) operation.","pos":[0,59]}]}],"pos":[125013,126464],"yaml":true,"extradata":"MT"},{"content":"A <xref href=\"System.Collections.Generic.IList`1\"></xref> containing the values in the <xref href=\"System.Collections.Generic.SortedList`2\"></xref>.","nodes":[{"pos":[0,148],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.IList`1\"&gt;&lt;/xref&gt;</ph> containing the values in the <ph id=\"ph2\">&lt;xref href=\"System.Collections.Generic.SortedList`2\"&gt;&lt;/xref&gt;</ph>.","source":"A <xref href=\"System.Collections.Generic.IList`1\"></xref> containing the values in the <xref href=\"System.Collections.Generic.SortedList`2\"></xref>."}],"pos":[127842,127991],"yaml":true},{"content":"Copies the elements of the <xref href=\"System.Collections.ICollection\"></xref> to an <xref href=\"System.Array\"></xref>, starting at a particular <xref href=\"System.Array\"></xref> index.","nodes":[{"pos":[0,185],"content":"Copies the elements of the <ph id=\"ph1\">&lt;xref href=\"System.Collections.ICollection\"&gt;&lt;/xref&gt;</ph> to an <ph id=\"ph2\">&lt;xref href=\"System.Array\"&gt;&lt;/xref&gt;</ph>, starting at a particular <ph id=\"ph3\">&lt;xref href=\"System.Array\"&gt;&lt;/xref&gt;</ph> index.","source":"Copies the elements of the <xref href=\"System.Collections.ICollection\"></xref> to an <xref href=\"System.Array\"></xref>, starting at a particular <xref href=\"System.Array\"></xref> index."}],"pos":[150694,150880],"yaml":true},{"content":"> [!NOTE]\n>  If the type of the source <xref:System.Collections.ICollection> cannot be cast automatically to the type of the destination `array`, the non-generic implementations of <xref:System.Collections.ICollection.CopyTo%2A?displayProperty=fullName> throw <xref:System.InvalidCastException>, whereas the generic implementations throw <xref:System.ArgumentException>.  \n  \n This method is an O(`n`) operation, where `n` is <xref:System.Collections.Generic.SortedList%602.Count%2A>.","nodes":[{"pos":[2,370],"content":"[!NOTE]\n If the type of the source <xref:System.Collections.ICollection> cannot be cast automatically to the type of the destination `array`, the non-generic implementations of <xref:System.Collections.ICollection.CopyTo%2A?displayProperty=fullName> throw <xref:System.InvalidCastException>, whereas the generic implementations throw <xref:System.ArgumentException>.","leadings":["","> "],"nodes":[{"content":"If the type of the source <ph id=\"ph1\">&lt;xref:System.Collections.ICollection&gt;</ph> cannot be cast automatically to the type of the destination <ph id=\"ph2\">`array`</ph>, the non-generic implementations of <ph id=\"ph3\">&lt;xref:System.Collections.ICollection.CopyTo%2A?displayProperty=fullName&gt;</ph> throw <ph id=\"ph4\">&lt;xref:System.InvalidCastException&gt;</ph>, whereas the generic implementations throw <ph id=\"ph5\">&lt;xref:System.ArgumentException&gt;</ph>.","pos":[9,366],"source":" If the type of the source <xref:System.Collections.ICollection> cannot be cast automatically to the type of the destination `array`, the non-generic implementations of <xref:System.Collections.ICollection.CopyTo%2A?displayProperty=fullName> throw <xref:System.InvalidCastException>, whereas the generic implementations throw <xref:System.ArgumentException>."}]},{"pos":[377,484],"content":"This method is an O(<ph id=\"ph1\">`n`</ph>) operation, where <ph id=\"ph2\">`n`</ph> is <ph id=\"ph3\">&lt;xref:System.Collections.Generic.SortedList%602.Count%2A&gt;</ph>.","source":"This method is an O(`n`) operation, where `n` is <xref:System.Collections.Generic.SortedList%602.Count%2A>."}],"pos":[150891,151381],"yaml":true,"extradata":"MT"},{"content":"The one-dimensional <xref href=\"System.Array\"></xref> that is the destination of the elements copied from <xref href=\"System.Collections.ICollection\"></xref>. The <xref href=\"System.Array\"></xref> must have zero-based indexing.","nodes":[{"pos":[0,227],"content":"The one-dimensional <xref href=\"System.Array\"></xref> that is the destination of the elements copied from <xref href=\"System.Collections.ICollection\"></xref>. The <xref href=\"System.Array\"></xref> must have zero-based indexing.","nodes":[{"content":"The one-dimensional <ph id=\"ph1\">&lt;xref href=\"System.Array\"&gt;&lt;/xref&gt;</ph> that is the destination of the elements copied from <ph id=\"ph2\">&lt;xref href=\"System.Collections.ICollection\"&gt;&lt;/xref&gt;</ph>.","pos":[0,158],"source":"The one-dimensional <xref href=\"System.Array\"></xref> that is the destination of the elements copied from <xref href=\"System.Collections.ICollection\"></xref>."},{"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Array\"&gt;&lt;/xref&gt;</ph> must have zero-based indexing.","pos":[159,227],"source":" The <xref href=\"System.Array\"></xref> must have zero-based indexing."}]}],"pos":[151535,151763],"yaml":true},{"content":"The zero-based index in <code>array</code> at which copying begins.","nodes":[{"pos":[0,67],"content":"The zero-based index in <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">array</ph><ept id=\"p1\">&lt;/code&gt;</ept> at which copying begins.","source":"The zero-based index in <code>array</code> at which copying begins."}],"pos":[151828,151896],"yaml":true},{"content":"<code>array</code> is `null`.","nodes":[{"pos":[0,29],"content":"<ph id=\"ph1\">&lt;code&gt;array&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>array</code> is `null`."}],"pos":[152103,152133],"yaml":true},{"content":"<code>arrayIndex</code> is less than zero.","nodes":[{"pos":[0,42],"content":"<ph id=\"ph1\">&lt;code&gt;arrayIndex&lt;/code&gt;</ph> is less than zero.","source":"<code>arrayIndex</code> is less than zero."}],"pos":[152247,152290],"yaml":true},{"content":"<code>array</code> is multidimensional.  \n  \n -or-  \n  \n <code>array</code> does not have zero-based indexing.  \n  \n -or-  \n  \n The number of elements in the source <xref href=\"System.Collections.ICollection\"></xref> is greater than the available space from <code>arrayIndex</code> to the end of the destination <code>array</code>.  \n  \n -or-  \n  \n The type of the source <xref href=\"System.Collections.ICollection\"></xref> cannot be cast automatically to the type of the destination <code>array</code>.","nodes":[{"pos":[0,39],"content":"<ph id=\"ph1\">&lt;code&gt;array&lt;/code&gt;</ph> is multidimensional.","source":"<code>array</code> is multidimensional."},{"pos":[46,50],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[57,110],"content":"<ph id=\"ph1\">&lt;code&gt;array&lt;/code&gt;</ph> does not have zero-based indexing.","source":"<code>array</code> does not have zero-based indexing."},{"pos":[117,121],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[128,331],"content":"The number of elements in the source <ph id=\"ph1\">&lt;xref href=\"System.Collections.ICollection\"&gt;&lt;/xref&gt;</ph> is greater than the available space from <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">arrayIndex</ph><ept id=\"p1\">&lt;/code&gt;</ept> to the end of the destination <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph3\">array</ph><ept id=\"p2\">&lt;/code&gt;</ept>.","source":"The number of elements in the source <xref href=\"System.Collections.ICollection\"></xref> is greater than the available space from <code>arrayIndex</code> to the end of the destination <code>array</code>."},{"pos":[338,342],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[349,503],"content":"The type of the source <ph id=\"ph1\">&lt;xref href=\"System.Collections.ICollection\"&gt;&lt;/xref&gt;</ph> cannot be cast automatically to the type of the destination <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">array</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The type of the source <xref href=\"System.Collections.ICollection\"></xref> cannot be cast automatically to the type of the destination <code>array</code>."}],"pos":[152384,152906],"yaml":true},{"content":"Gets a value indicating whether access to the <xref href=\"System.Collections.ICollection\"></xref> is synchronized (thread safe).","nodes":[{"pos":[0,128],"content":"Gets a value indicating whether access to the <ph id=\"ph1\">&lt;xref href=\"System.Collections.ICollection\"&gt;&lt;/xref&gt;</ph> is synchronized (thread safe).","source":"Gets a value indicating whether access to the <xref href=\"System.Collections.ICollection\"></xref> is synchronized (thread safe)."}],"pos":[154450,154579],"yaml":true},{"content":"Default implementations of collections in <xref:System.Collections.Generic?displayProperty=fullName> are not synchronized.  \n  \n Enumerating through a collection is intrinsically not a thread-safe procedure.  To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.  To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.  \n  \n The <xref:System.Collections.ICollection.SyncRoot%2A> property returns an object that can be used to synchronize access to the <xref:System.Collections.ICollection>. Synchronization is effective only if all threads lock this object before accessing the collection.  \n  \n Retrieving the value of this property is an O(1) operation.","nodes":[{"pos":[0,122],"content":"Default implementations of collections in <xref:System.Collections.Generic?displayProperty=fullName> are not synchronized.","nodes":[{"content":"Default implementations of collections in <ph id=\"ph1\">&lt;xref:System.Collections.Generic?displayProperty=fullName&gt;</ph> are not synchronized.","pos":[0,122],"source":"Default implementations of collections in <xref:System.Collections.Generic?displayProperty=fullName> are not synchronized."}]},{"pos":[129,444],"content":"Enumerating through a collection is intrinsically not a thread-safe procedure.  To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.  To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.","nodes":[{"content":"Enumerating through a collection is intrinsically not a thread-safe procedure.  To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.  To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.","pos":[0,315],"nodes":[{"content":"Enumerating through a collection is intrinsically not a thread-safe procedure.","pos":[0,78]},{"content":"To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.","pos":[80,185]},{"content":"To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.","pos":[187,315]}]}]},{"pos":[451,715],"content":"The <xref:System.Collections.ICollection.SyncRoot%2A> property returns an object that can be used to synchronize access to the <xref:System.Collections.ICollection>. Synchronization is effective only if all threads lock this object before accessing the collection.","nodes":[{"content":"The <xref:System.Collections.ICollection.SyncRoot%2A> property returns an object that can be used to synchronize access to the <xref:System.Collections.ICollection>. Synchronization is effective only if all threads lock this object before accessing the collection.","pos":[0,264],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Collections.ICollection.SyncRoot%2A&gt;</ph> property returns an object that can be used to synchronize access to the <ph id=\"ph2\">&lt;xref:System.Collections.ICollection&gt;</ph>.","pos":[0,165],"source":"The <xref:System.Collections.ICollection.SyncRoot%2A> property returns an object that can be used to synchronize access to the <xref:System.Collections.ICollection>."},{"content":"Synchronization is effective only if all threads lock this object before accessing the collection.","pos":[166,264]}]}]},{"pos":[722,781],"content":"Retrieving the value of this property is an O(1) operation.","nodes":[{"content":"Retrieving the value of this property is an O(1) operation.","pos":[0,59]}]}],"pos":[154590,155380],"yaml":true,"extradata":"MT"},{"content":"`true` if access to the <xref href=\"System.Collections.ICollection\"></xref> is synchronized (thread safe); otherwise, `false`.  In the default implementation of <xref href=\"System.Collections.Generic.SortedList`2\"></xref>, this property always returns `false`.","nodes":[{"pos":[0,260],"content":"`true` if access to the <xref href=\"System.Collections.ICollection\"></xref> is synchronized (thread safe); otherwise, `false`.  In the default implementation of <xref href=\"System.Collections.Generic.SortedList`2\"></xref>, this property always returns `false`.","nodes":[{"content":"<ph id=\"ph1\">`true`</ph> if access to the <ph id=\"ph2\">&lt;xref href=\"System.Collections.ICollection\"&gt;&lt;/xref&gt;</ph> is synchronized (thread safe); otherwise, <ph id=\"ph3\">`false`</ph>.","pos":[0,126],"source":"`true` if access to the <xref href=\"System.Collections.ICollection\"></xref> is synchronized (thread safe); otherwise, `false`."},{"content":"In the default implementation of <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.SortedList`2\"&gt;&lt;/xref&gt;</ph>, this property always returns <ph id=\"ph2\">`false`</ph>.","pos":[128,260],"source":"  In the default implementation of <xref href=\"System.Collections.Generic.SortedList`2\"></xref>, this property always returns `false`."}]}],"pos":[155521,155784],"yaml":true},{"content":"Gets an object that can be used to synchronize access to the <xref href=\"System.Collections.ICollection\"></xref>.","nodes":[{"pos":[0,113],"content":"Gets an object that can be used to synchronize access to the <ph id=\"ph1\">&lt;xref href=\"System.Collections.ICollection\"&gt;&lt;/xref&gt;</ph>.","source":"Gets an object that can be used to synchronize access to the <xref href=\"System.Collections.ICollection\"></xref>."}],"pos":[157371,157485],"yaml":true},{"content":"Default implementations of collections in <xref:System.Collections.Generic?displayProperty=fullName> are not synchronized.  \n  \n Enumerating through a collection is intrinsically not a thread-safe procedure. To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration. To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.  \n  \n The <xref:System.Collections.ICollection.SyncRoot%2A> property returns an object that can be used to synchronize access to the <xref:System.Collections.ICollection>. Synchronization is effective only if all threads lock this object before accessing the collection. The following code shows the use of the <xref:System.Collections.ICollection.SyncRoot%2A> property for C#, C++, and Visual Basic.  \n  \n```csharp  \nICollection ic = ...;  \nlock (ic.SyncRoot) {  \n   // Access the collection.  \n}  \n```  \n  \n```vb  \nDim ic As ICollection = ...  \nSyncLock ic.SyncRoot  \n   ' Access the collection.  \nEnd SyncLock  \n```  \n  \n```cpp#  \nICollection^ ic = ...;  \ntry {  \n   Monitor::Enter(ic->SyncRoot);  \n   // Access the collection.  \n}  \nfinally {  \n   Monitor::Exit(ic->SyncRoot);  \n}  \n```  \n  \n Retrieving the value of this property is an O(1) operation.","nodes":[{"pos":[0,122],"content":"Default implementations of collections in <xref:System.Collections.Generic?displayProperty=fullName> are not synchronized.","nodes":[{"content":"Default implementations of collections in <ph id=\"ph1\">&lt;xref:System.Collections.Generic?displayProperty=fullName&gt;</ph> are not synchronized.","pos":[0,122],"source":"Default implementations of collections in <xref:System.Collections.Generic?displayProperty=fullName> are not synchronized."}]},{"pos":[129,442],"content":"Enumerating through a collection is intrinsically not a thread-safe procedure. To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration. To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.","nodes":[{"content":"Enumerating through a collection is intrinsically not a thread-safe procedure. To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration. To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.","pos":[0,313],"nodes":[{"content":"Enumerating through a collection is intrinsically not a thread-safe procedure.","pos":[0,78]},{"content":"To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.","pos":[79,184]},{"content":"To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.","pos":[185,313]}]}]},{"pos":[449,843],"content":"The <xref:System.Collections.ICollection.SyncRoot%2A> property returns an object that can be used to synchronize access to the <xref:System.Collections.ICollection>. Synchronization is effective only if all threads lock this object before accessing the collection. The following code shows the use of the <xref:System.Collections.ICollection.SyncRoot%2A> property for C#, C++, and Visual Basic.","nodes":[{"content":"The <xref:System.Collections.ICollection.SyncRoot%2A> property returns an object that can be used to synchronize access to the <xref:System.Collections.ICollection>. Synchronization is effective only if all threads lock this object before accessing the collection. The following code shows the use of the <xref:System.Collections.ICollection.SyncRoot%2A> property for C#, C++, and Visual Basic.","pos":[0,394],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Collections.ICollection.SyncRoot%2A&gt;</ph> property returns an object that can be used to synchronize access to the <ph id=\"ph2\">&lt;xref:System.Collections.ICollection&gt;</ph>.","pos":[0,165],"source":"The <xref:System.Collections.ICollection.SyncRoot%2A> property returns an object that can be used to synchronize access to the <xref:System.Collections.ICollection>."},{"content":"Synchronization is effective only if all threads lock this object before accessing the collection.","pos":[166,264]},{"content":"The following code shows the use of the <ph id=\"ph1\">&lt;xref:System.Collections.ICollection.SyncRoot%2A&gt;</ph> property for C#, C++, and Visual Basic.","pos":[265,394],"source":" The following code shows the use of the <xref:System.Collections.ICollection.SyncRoot%2A> property for C#, C++, and Visual Basic."}]}]},{"pos":[1240,1299],"content":"Retrieving the value of this property is an O(1) operation.","nodes":[{"content":"Retrieving the value of this property is an O(1) operation.","pos":[0,59]}]}],"pos":[157496,158829],"yaml":true,"extradata":"MT"},{"content":"An object that can be used to synchronize access to the <xref href=\"System.Collections.ICollection\"></xref>.  In the default implementation of <xref href=\"System.Collections.Generic.SortedList`2\"></xref>, this property always returns the current instance.","nodes":[{"pos":[0,255],"content":"An object that can be used to synchronize access to the <xref href=\"System.Collections.ICollection\"></xref>.  In the default implementation of <xref href=\"System.Collections.Generic.SortedList`2\"></xref>, this property always returns the current instance.","nodes":[{"content":"An object that can be used to synchronize access to the <ph id=\"ph1\">&lt;xref href=\"System.Collections.ICollection\"&gt;&lt;/xref&gt;</ph>.","pos":[0,108],"source":"An object that can be used to synchronize access to the <xref href=\"System.Collections.ICollection\"></xref>."},{"content":"In the default implementation of <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.SortedList`2\"&gt;&lt;/xref&gt;</ph>, this property always returns the current instance.","pos":[110,255],"source":"  In the default implementation of <xref href=\"System.Collections.Generic.SortedList`2\"></xref>, this property always returns the current instance."}]}],"pos":[158965,159221],"yaml":true},{"content":"Adds an element with the provided key and value to the <xref href=\"System.Collections.IDictionary\"></xref>.","nodes":[{"pos":[0,107],"content":"Adds an element with the provided key and value to the <ph id=\"ph1\">&lt;xref href=\"System.Collections.IDictionary\"&gt;&lt;/xref&gt;</ph>.","source":"Adds an element with the provided key and value to the <xref href=\"System.Collections.IDictionary\"></xref>."}],"pos":[160905,161013],"yaml":true},{"content":"You can also use the <xref:System.Collections.IDictionary.Item%2A> property to add new elements by setting the value of a key that does not exist in the dictionary; for example, `myCollection[\"myNonexistentKey\"] = myValue`. However, if the specified key already exists in the dictionary, setting the <xref:System.Collections.IDictionary.Item%2A> property overwrites the old value. In contrast, the <xref:System.Collections.IDictionary.Add%2A> method does not modify existing elements.  \n  \n This method is an O(`n`) operation for unsorted data, where `n` is <xref:System.Collections.Generic.SortedList%602.Count%2A>. It is an O(log `n`) operation if the new element is added at the end of the list. If insertion causes a resize, the operation is O(`n`).","nodes":[{"pos":[0,484],"content":"You can also use the <xref:System.Collections.IDictionary.Item%2A> property to add new elements by setting the value of a key that does not exist in the dictionary; for example, `myCollection[\"myNonexistentKey\"] = myValue`. However, if the specified key already exists in the dictionary, setting the <xref:System.Collections.IDictionary.Item%2A> property overwrites the old value. In contrast, the <xref:System.Collections.IDictionary.Add%2A> method does not modify existing elements.","nodes":[{"content":"You can also use the <ph id=\"ph1\">&lt;xref:System.Collections.IDictionary.Item%2A&gt;</ph> property to add new elements by setting the value of a key that does not exist in the dictionary; for example, <ph id=\"ph2\">`myCollection[\"myNonexistentKey\"] = myValue`</ph>.","pos":[0,223],"source":"You can also use the <xref:System.Collections.IDictionary.Item%2A> property to add new elements by setting the value of a key that does not exist in the dictionary; for example, `myCollection[\"myNonexistentKey\"] = myValue`."},{"content":"However, if the specified key already exists in the dictionary, setting the <ph id=\"ph1\">&lt;xref:System.Collections.IDictionary.Item%2A&gt;</ph> property overwrites the old value.","pos":[224,380],"source":" However, if the specified key already exists in the dictionary, setting the <xref:System.Collections.IDictionary.Item%2A> property overwrites the old value."},{"content":"In contrast, the <ph id=\"ph1\">&lt;xref:System.Collections.IDictionary.Add%2A&gt;</ph> method does not modify existing elements.","pos":[381,484],"source":" In contrast, the <xref:System.Collections.IDictionary.Add%2A> method does not modify existing elements."}]},{"pos":[491,753],"content":"This method is an O(`n`) operation for unsorted data, where `n` is <xref:System.Collections.Generic.SortedList%602.Count%2A>. It is an O(log `n`) operation if the new element is added at the end of the list. If insertion causes a resize, the operation is O(`n`).","nodes":[{"content":"This method is an O(<ph id=\"ph1\">`n`</ph>) operation for unsorted data, where <ph id=\"ph2\">`n`</ph> is <ph id=\"ph3\">&lt;xref:System.Collections.Generic.SortedList%602.Count%2A&gt;</ph>.","pos":[0,125],"source":"This method is an O(`n`) operation for unsorted data, where `n` is <xref:System.Collections.Generic.SortedList%602.Count%2A>."},{"content":"It is an O(log <ph id=\"ph1\">`n`</ph>) operation if the new element is added at the end of the list.","pos":[126,207],"source":" It is an O(log `n`) operation if the new element is added at the end of the list."},{"content":"If insertion causes a resize, the operation is O(<ph id=\"ph1\">`n`</ph>).","pos":[208,262],"source":" If insertion causes a resize, the operation is O(`n`)."}]}],"pos":[161024,161784],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Object\"></xref> to use as the key of the element to add.","nodes":[{"pos":[0,79],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Object\"&gt;&lt;/xref&gt;</ph> to use as the key of the element to add.","source":"The <xref href=\"System.Object\"></xref> to use as the key of the element to add."}],"pos":[163100,163180],"yaml":true},{"content":"The <xref href=\"System.Object\"></xref> to use as the value of the element to add.","nodes":[{"pos":[0,81],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Object\"&gt;&lt;/xref&gt;</ph> to use as the value of the element to add.","source":"The <xref href=\"System.Object\"></xref> to use as the value of the element to add."}],"pos":[163241,163323],"yaml":true},{"content":"<code>key</code> is `null`.","nodes":[{"pos":[0,27],"content":"<ph id=\"ph1\">&lt;code&gt;key&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>key</code> is `null`."}],"pos":[163527,163555],"yaml":true},{"content":"<code>key</code> is of a type that is not assignable to the key type <code>TKey</code> of the <xref href=\"System.Collections.IDictionary\"></xref>.  \n  \n -or-  \n  \n <code>value</code> is of a type that is not assignable to the value type <code>TValue</code> of the <xref href=\"System.Collections.IDictionary\"></xref>.  \n  \n -or-  \n  \n An element with the same key already exists in the <xref href=\"System.Collections.IDictionary\"></xref>.","nodes":[{"pos":[0,146],"content":"<ph id=\"ph1\">&lt;code&gt;key&lt;/code&gt;</ph> is of a type that is not assignable to the key type <ph id=\"ph2\">&lt;code&gt;TKey&lt;/code&gt;</ph> of the <ph id=\"ph3\">&lt;xref href=\"System.Collections.IDictionary\"&gt;&lt;/xref&gt;</ph>.","source":"<code>key</code> is of a type that is not assignable to the key type <code>TKey</code> of the <xref href=\"System.Collections.IDictionary\"></xref>."},{"pos":[153,157],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[164,316],"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> is of a type that is not assignable to the value type <ph id=\"ph2\">&lt;code&gt;TValue&lt;/code&gt;</ph> of the <ph id=\"ph3\">&lt;xref href=\"System.Collections.IDictionary\"&gt;&lt;/xref&gt;</ph>.","source":"<code>value</code> is of a type that is not assignable to the value type <code>TValue</code> of the <xref href=\"System.Collections.IDictionary\"></xref>."},{"pos":[323,327],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[334,437],"content":"An element with the same key already exists in the <ph id=\"ph1\">&lt;xref href=\"System.Collections.IDictionary\"&gt;&lt;/xref&gt;</ph>.","source":"An element with the same key already exists in the <xref href=\"System.Collections.IDictionary\"></xref>."}],"pos":[163649,164103],"yaml":true},{"content":"Determines whether the <xref href=\"System.Collections.IDictionary\"></xref> contains an element with the specified key.","nodes":[{"pos":[0,118],"content":"Determines whether the <ph id=\"ph1\">&lt;xref href=\"System.Collections.IDictionary\"&gt;&lt;/xref&gt;</ph> contains an element with the specified key.","source":"Determines whether the <xref href=\"System.Collections.IDictionary\"></xref> contains an element with the specified key."}],"pos":[165678,165797],"yaml":true},{"content":"This method returns `false` if `key` is of a type that is not assignable to the key type `TKey` of the <xref:System.Collections.Generic.SortedList%602>.  \n  \n This method is an O(log `n`) operation, where `n` is <xref:System.Collections.Generic.SortedList%602.Count%2A>.","nodes":[{"pos":[0,152],"content":"This method returns <ph id=\"ph1\">`false`</ph> if <ph id=\"ph2\">`key`</ph> is of a type that is not assignable to the key type <ph id=\"ph3\">`TKey`</ph> of the <ph id=\"ph4\">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph>.","source":"This method returns `false` if `key` is of a type that is not assignable to the key type `TKey` of the <xref:System.Collections.Generic.SortedList%602>."},{"pos":[159,270],"content":"This method is an O(log <ph id=\"ph1\">`n`</ph>) operation, where <ph id=\"ph2\">`n`</ph> is <ph id=\"ph3\">&lt;xref:System.Collections.Generic.SortedList%602.Count%2A&gt;</ph>.","source":"This method is an O(log `n`) operation, where `n` is <xref:System.Collections.Generic.SortedList%602.Count%2A>."}],"pos":[165808,166083],"yaml":true,"extradata":"MT"},{"content":"The key to locate in the <xref href=\"System.Collections.IDictionary\"></xref>.","nodes":[{"pos":[0,77],"content":"The key to locate in the <ph id=\"ph1\">&lt;xref href=\"System.Collections.IDictionary\"&gt;&lt;/xref&gt;</ph>.","source":"The key to locate in the <xref href=\"System.Collections.IDictionary\"></xref>."}],"pos":[167677,167755],"yaml":true},{"content":"`true` if the <xref href=\"System.Collections.IDictionary\"></xref> contains an element with the key; otherwise, `false`.","nodes":[{"pos":[0,119],"content":"<ph id=\"ph1\">`true`</ph> if the <ph id=\"ph2\">&lt;xref href=\"System.Collections.IDictionary\"&gt;&lt;/xref&gt;</ph> contains an element with the key; otherwise, <ph id=\"ph3\">`false`</ph>.","source":"`true` if the <xref href=\"System.Collections.IDictionary\"></xref> contains an element with the key; otherwise, `false`."}],"pos":[167813,167935],"yaml":true},{"content":"<code>key</code> is `null`.","nodes":[{"pos":[0,27],"content":"<ph id=\"ph1\">&lt;code&gt;key&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>key</code> is `null`."}],"pos":[168144,168172],"yaml":true},{"content":"Returns an <xref href=\"System.Collections.IDictionaryEnumerator\"></xref> for the <xref href=\"System.Collections.IDictionary\"></xref>.","nodes":[{"pos":[0,133],"content":"Returns an <ph id=\"ph1\">&lt;xref href=\"System.Collections.IDictionaryEnumerator\"&gt;&lt;/xref&gt;</ph> for the <ph id=\"ph2\">&lt;xref href=\"System.Collections.IDictionary\"&gt;&lt;/xref&gt;</ph>.","source":"Returns an <xref href=\"System.Collections.IDictionaryEnumerator\"></xref> for the <xref href=\"System.Collections.IDictionary\"></xref>."}],"pos":[169714,169848],"yaml":true},{"content":"The `foreach` statement of the C# language (`for each` in C++, `For Each` in Visual Basic) hides the complexity of the enumerators.  Therefore, using `foreach` is recommended, instead of directly manipulating the enumerator.  \n  \n Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.  \n  \n Initially, the enumerator is positioned before the first element in the collection. <xref:System.Collections.IEnumerator.Reset%2A> also brings the enumerator back to this position.  At this position, <xref:System.Collections.IDictionaryEnumerator.Entry%2A> is undefined. Therefore, you must call <xref:System.Collections.IEnumerator.MoveNext%2A> to advance the enumerator to the first element of the collection before reading the value of <xref:System.Collections.IDictionaryEnumerator.Entry%2A>.  \n  \n <xref:System.Collections.IDictionaryEnumerator.Entry%2A> returns the same object until either <xref:System.Collections.IEnumerator.MoveNext%2A> or <xref:System.Collections.IEnumerator.Reset%2A> is called. <xref:System.Collections.IEnumerator.MoveNext%2A> sets <xref:System.Collections.IDictionaryEnumerator.Entry%2A> to the next element.  \n  \n If <xref:System.Collections.IEnumerator.MoveNext%2A> passes the end of the collection, the enumerator is positioned after the last element in the collection and <xref:System.Collections.IEnumerator.MoveNext%2A> returns `false`. When the enumerator is at this position, subsequent calls to <xref:System.Collections.IEnumerator.MoveNext%2A> also return `false`. If the last call to <xref:System.Collections.IEnumerator.MoveNext%2A> returned `false`, <xref:System.Collections.IDictionaryEnumerator.Entry%2A> is undefined. To set <xref:System.Collections.IDictionaryEnumerator.Entry%2A> to the first element of the collection again, you can call <xref:System.Collections.IEnumerator.Reset%2A> followed by <xref:System.Collections.IEnumerator.MoveNext%2A>.  \n  \n An enumerator remains valid as long as the collection remains unchanged. If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and its behavior is undefined.  \n  \n The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure.  To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.  To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.  \n  \n Default implementations of collections in <xref:System.Collections.Generic?displayProperty=fullName> are not synchronized.  \n  \n This method is an O(1) operation.","nodes":[{"pos":[0,224],"content":"The `foreach` statement of the C# language (`for each` in C++, `For Each` in Visual Basic) hides the complexity of the enumerators.  Therefore, using `foreach` is recommended, instead of directly manipulating the enumerator.","nodes":[{"content":"The <ph id=\"ph1\">`foreach`</ph> statement of the C# language (<ph id=\"ph2\">`for each`</ph> in C++, <ph id=\"ph3\">`For Each`</ph> in Visual Basic) hides the complexity of the enumerators.","pos":[0,131],"source":"The `foreach` statement of the C# language (`for each` in C++, `For Each` in Visual Basic) hides the complexity of the enumerators."},{"content":"Therefore, using <ph id=\"ph1\">`foreach`</ph> is recommended, instead of directly manipulating the enumerator.","pos":[133,224],"source":"  Therefore, using `foreach` is recommended, instead of directly manipulating the enumerator."}]},{"pos":[231,351],"content":"Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.","nodes":[{"content":"Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.","pos":[0,120]}]},{"pos":[358,854],"content":"Initially, the enumerator is positioned before the first element in the collection. <xref:System.Collections.IEnumerator.Reset%2A> also brings the enumerator back to this position.  At this position, <xref:System.Collections.IDictionaryEnumerator.Entry%2A> is undefined. Therefore, you must call <xref:System.Collections.IEnumerator.MoveNext%2A> to advance the enumerator to the first element of the collection before reading the value of <xref:System.Collections.IDictionaryEnumerator.Entry%2A>.","nodes":[{"content":"Initially, the enumerator is positioned before the first element in the collection. <xref:System.Collections.IEnumerator.Reset%2A> also brings the enumerator back to this position.  At this position, <xref:System.Collections.IDictionaryEnumerator.Entry%2A> is undefined. Therefore, you must call <xref:System.Collections.IEnumerator.MoveNext%2A> to advance the enumerator to the first element of the collection before reading the value of <xref:System.Collections.IDictionaryEnumerator.Entry%2A>.","pos":[0,496],"nodes":[{"content":"Initially, the enumerator is positioned before the first element in the collection.","pos":[0,83]},{"content":"<ph id=\"ph1\">&lt;xref:System.Collections.IEnumerator.Reset%2A&gt;</ph> also brings the enumerator back to this position.","pos":[84,180],"source":" <xref:System.Collections.IEnumerator.Reset%2A> also brings the enumerator back to this position."},{"content":"At this position, <ph id=\"ph1\">&lt;xref:System.Collections.IDictionaryEnumerator.Entry%2A&gt;</ph> is undefined.","pos":[182,270],"source":"  At this position, <xref:System.Collections.IDictionaryEnumerator.Entry%2A> is undefined."},{"content":"Therefore, you must call <ph id=\"ph1\">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> to advance the enumerator to the first element of the collection before reading the value of <ph id=\"ph2\">&lt;xref:System.Collections.IDictionaryEnumerator.Entry%2A&gt;</ph>.","pos":[271,496],"source":" Therefore, you must call <xref:System.Collections.IEnumerator.MoveNext%2A> to advance the enumerator to the first element of the collection before reading the value of <xref:System.Collections.IDictionaryEnumerator.Entry%2A>."}]}]},{"pos":[861,1198],"content":"<xref:System.Collections.IDictionaryEnumerator.Entry%2A> returns the same object until either <xref:System.Collections.IEnumerator.MoveNext%2A> or <xref:System.Collections.IEnumerator.Reset%2A> is called. <xref:System.Collections.IEnumerator.MoveNext%2A> sets <xref:System.Collections.IDictionaryEnumerator.Entry%2A> to the next element.","nodes":[{"content":"<xref:System.Collections.IDictionaryEnumerator.Entry%2A> returns the same object until either <xref:System.Collections.IEnumerator.MoveNext%2A> or <xref:System.Collections.IEnumerator.Reset%2A> is called. <xref:System.Collections.IEnumerator.MoveNext%2A> sets <xref:System.Collections.IDictionaryEnumerator.Entry%2A> to the next element.","pos":[0,337],"nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Collections.IDictionaryEnumerator.Entry%2A&gt;</ph> returns the same object until either <ph id=\"ph2\">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> or <ph id=\"ph3\">&lt;xref:System.Collections.IEnumerator.Reset%2A&gt;</ph> is called.","pos":[0,204],"source":"<xref:System.Collections.IDictionaryEnumerator.Entry%2A> returns the same object until either <xref:System.Collections.IEnumerator.MoveNext%2A> or <xref:System.Collections.IEnumerator.Reset%2A> is called."},{"content":"<ph id=\"ph1\">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> sets <ph id=\"ph2\">&lt;xref:System.Collections.IDictionaryEnumerator.Entry%2A&gt;</ph> to the next element.","pos":[205,337],"source":" <xref:System.Collections.IEnumerator.MoveNext%2A> sets <xref:System.Collections.IDictionaryEnumerator.Entry%2A> to the next element."}]}]},{"pos":[1205,1956],"content":"If <xref:System.Collections.IEnumerator.MoveNext%2A> passes the end of the collection, the enumerator is positioned after the last element in the collection and <xref:System.Collections.IEnumerator.MoveNext%2A> returns `false`. When the enumerator is at this position, subsequent calls to <xref:System.Collections.IEnumerator.MoveNext%2A> also return `false`. If the last call to <xref:System.Collections.IEnumerator.MoveNext%2A> returned `false`, <xref:System.Collections.IDictionaryEnumerator.Entry%2A> is undefined. To set <xref:System.Collections.IDictionaryEnumerator.Entry%2A> to the first element of the collection again, you can call <xref:System.Collections.IEnumerator.Reset%2A> followed by <xref:System.Collections.IEnumerator.MoveNext%2A>.","nodes":[{"content":"If <ph id=\"ph1\">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> passes the end of the collection, the enumerator is positioned after the last element in the collection and <ph id=\"ph2\">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> returns <ph id=\"ph3\">`false`</ph>.","pos":[0,227],"source":"If <xref:System.Collections.IEnumerator.MoveNext%2A> passes the end of the collection, the enumerator is positioned after the last element in the collection and <xref:System.Collections.IEnumerator.MoveNext%2A> returns `false`."},{"content":"When the enumerator is at this position, subsequent calls to <ph id=\"ph1\">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> also return <ph id=\"ph2\">`false`</ph>.","pos":[228,359],"source":" When the enumerator is at this position, subsequent calls to <xref:System.Collections.IEnumerator.MoveNext%2A> also return `false`."},{"content":"If the last call to <ph id=\"ph1\">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> returned <ph id=\"ph2\">`false`</ph>, <ph id=\"ph3\">&lt;xref:System.Collections.IDictionaryEnumerator.Entry%2A&gt;</ph> is undefined.","pos":[360,518],"source":" If the last call to <xref:System.Collections.IEnumerator.MoveNext%2A> returned `false`, <xref:System.Collections.IDictionaryEnumerator.Entry%2A> is undefined."},{"content":"To set <ph id=\"ph1\">&lt;xref:System.Collections.IDictionaryEnumerator.Entry%2A&gt;</ph> to the first element of the collection again, you can call <ph id=\"ph2\">&lt;xref:System.Collections.IEnumerator.Reset%2A&gt;</ph> followed by <ph id=\"ph3\">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph>.","pos":[519,751],"source":" To set <xref:System.Collections.IDictionaryEnumerator.Entry%2A> to the first element of the collection again, you can call <xref:System.Collections.IEnumerator.Reset%2A> followed by <xref:System.Collections.IEnumerator.MoveNext%2A>."}]},{"pos":[1963,2198],"content":"An enumerator remains valid as long as the collection remains unchanged. If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and its behavior is undefined.","nodes":[{"content":"An enumerator remains valid as long as the collection remains unchanged. If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and its behavior is undefined.","pos":[0,235],"nodes":[{"content":"An enumerator remains valid as long as the collection remains unchanged.","pos":[0,72]},{"content":"If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and its behavior is undefined.","pos":[73,235]}]}]},{"pos":[2205,2596],"content":"The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure.  To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.  To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.","nodes":[{"content":"The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure.  To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.  To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.","pos":[0,391],"nodes":[{"content":"The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure.","pos":[0,154]},{"content":"To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.","pos":[156,261]},{"content":"To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.","pos":[263,391]}]}]},{"pos":[2603,2725],"content":"Default implementations of collections in <xref:System.Collections.Generic?displayProperty=fullName> are not synchronized.","nodes":[{"content":"Default implementations of collections in <ph id=\"ph1\">&lt;xref:System.Collections.Generic?displayProperty=fullName&gt;</ph> are not synchronized.","pos":[0,122],"source":"Default implementations of collections in <xref:System.Collections.Generic?displayProperty=fullName> are not synchronized."}]},{"pos":[2732,2765],"content":"This method is an O(1) operation.","nodes":[{"content":"This method is an O(1) operation.","pos":[0,33]}]}],"pos":[169859,172643],"yaml":true,"extradata":"MT"},{"content":"An <xref href=\"System.Collections.IDictionaryEnumerator\"></xref> for the <xref href=\"System.Collections.IDictionary\"></xref>.","nodes":[{"pos":[0,125],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Collections.IDictionaryEnumerator\"&gt;&lt;/xref&gt;</ph> for the <ph id=\"ph2\">&lt;xref href=\"System.Collections.IDictionary\"&gt;&lt;/xref&gt;</ph>.","source":"An <xref href=\"System.Collections.IDictionaryEnumerator\"></xref> for the <xref href=\"System.Collections.IDictionary\"></xref>."}],"pos":[174365,174491],"yaml":true},{"content":"Gets a value indicating whether the <xref href=\"System.Collections.IDictionary\"></xref> has a fixed size.","nodes":[{"pos":[0,105],"content":"Gets a value indicating whether the <ph id=\"ph1\">&lt;xref href=\"System.Collections.IDictionary\"&gt;&lt;/xref&gt;</ph> has a fixed size.","source":"Gets a value indicating whether the <xref href=\"System.Collections.IDictionary\"></xref> has a fixed size."}],"pos":[176132,176238],"yaml":true},{"content":"A collection with a fixed size does not allow the addition or removal of elements after the collection is created, but it allows the modification of existing elements.  \n  \n A collection with a fixed size is simply a collection with a wrapper that prevents adding and removing elements; therefore, if changes are made to the underlying collection, including the addition or removal of elements, the fixed-size collection reflects those changes.  \n  \n Retrieving the value of this property is an O(1) operation.","nodes":[{"pos":[0,167],"content":"A collection with a fixed size does not allow the addition or removal of elements after the collection is created, but it allows the modification of existing elements.","nodes":[{"content":"A collection with a fixed size does not allow the addition or removal of elements after the collection is created, but it allows the modification of existing elements.","pos":[0,167]}]},{"pos":[174,444],"content":"A collection with a fixed size is simply a collection with a wrapper that prevents adding and removing elements; therefore, if changes are made to the underlying collection, including the addition or removal of elements, the fixed-size collection reflects those changes.","nodes":[{"content":"A collection with a fixed size is simply a collection with a wrapper that prevents adding and removing elements; therefore, if changes are made to the underlying collection, including the addition or removal of elements, the fixed-size collection reflects those changes.","pos":[0,270]}]},{"pos":[451,510],"content":"Retrieving the value of this property is an O(1) operation.","nodes":[{"content":"Retrieving the value of this property is an O(1) operation.","pos":[0,59]}]}],"pos":[176249,176766],"yaml":true,"extradata":"MT"},{"content":"`true` if the <xref href=\"System.Collections.IDictionary\"></xref> has a fixed size; otherwise, `false`.  In the default implementation of <xref href=\"System.Collections.Generic.SortedList`2\"></xref>, this property always returns `false`.","nodes":[{"pos":[0,237],"content":"`true` if the <xref href=\"System.Collections.IDictionary\"></xref> has a fixed size; otherwise, `false`.  In the default implementation of <xref href=\"System.Collections.Generic.SortedList`2\"></xref>, this property always returns `false`.","nodes":[{"content":"<ph id=\"ph1\">`true`</ph> if the <ph id=\"ph2\">&lt;xref href=\"System.Collections.IDictionary\"&gt;&lt;/xref&gt;</ph> has a fixed size; otherwise, <ph id=\"ph3\">`false`</ph>.","pos":[0,103],"source":"`true` if the <xref href=\"System.Collections.IDictionary\"></xref> has a fixed size; otherwise, `false`."},{"content":"In the default implementation of <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.SortedList`2\"&gt;&lt;/xref&gt;</ph>, this property always returns <ph id=\"ph2\">`false`</ph>.","pos":[105,237],"source":"  In the default implementation of <xref href=\"System.Collections.Generic.SortedList`2\"></xref>, this property always returns `false`."}]}],"pos":[176904,177144],"yaml":true},{"content":"Gets a value indicating whether the <xref href=\"System.Collections.IDictionary\"></xref> is read-only.","nodes":[{"pos":[0,101],"content":"Gets a value indicating whether the <ph id=\"ph1\">&lt;xref href=\"System.Collections.IDictionary\"&gt;&lt;/xref&gt;</ph> is read-only.","source":"Gets a value indicating whether the <xref href=\"System.Collections.IDictionary\"></xref> is read-only."}],"pos":[178740,178842],"yaml":true},{"content":"A collection that is read-only does not allow the addition, removal, or modification of elements after the collection is created.  \n  \n A collection that is read-only is simply a collection with a wrapper that prevents modifying the collection; therefore, if changes are made to the underlying collection, the read-only collection reflects those changes.  \n  \n Retrieving the value of this property is an O(1) operation.","nodes":[{"pos":[0,129],"content":"A collection that is read-only does not allow the addition, removal, or modification of elements after the collection is created.","nodes":[{"content":"A collection that is read-only does not allow the addition, removal, or modification of elements after the collection is created.","pos":[0,129]}]},{"pos":[136,354],"content":"A collection that is read-only is simply a collection with a wrapper that prevents modifying the collection; therefore, if changes are made to the underlying collection, the read-only collection reflects those changes.","nodes":[{"content":"A collection that is read-only is simply a collection with a wrapper that prevents modifying the collection; therefore, if changes are made to the underlying collection, the read-only collection reflects those changes.","pos":[0,218]}]},{"pos":[361,420],"content":"Retrieving the value of this property is an O(1) operation.","nodes":[{"content":"Retrieving the value of this property is an O(1) operation.","pos":[0,59]}]}],"pos":[178853,179280],"yaml":true,"extradata":"MT"},{"content":"`true` if the <xref href=\"System.Collections.IDictionary\"></xref> is read-only; otherwise, `false`.  In the default implementation of <xref href=\"System.Collections.Generic.SortedList`2\"></xref>, this property always returns `false`.","nodes":[{"pos":[0,233],"content":"`true` if the <xref href=\"System.Collections.IDictionary\"></xref> is read-only; otherwise, `false`.  In the default implementation of <xref href=\"System.Collections.Generic.SortedList`2\"></xref>, this property always returns `false`.","nodes":[{"content":"<ph id=\"ph1\">`true`</ph> if the <ph id=\"ph2\">&lt;xref href=\"System.Collections.IDictionary\"&gt;&lt;/xref&gt;</ph> is read-only; otherwise, <ph id=\"ph3\">`false`</ph>.","pos":[0,99],"source":"`true` if the <xref href=\"System.Collections.IDictionary\"></xref> is read-only; otherwise, `false`."},{"content":"In the default implementation of <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.SortedList`2\"&gt;&lt;/xref&gt;</ph>, this property always returns <ph id=\"ph2\">`false`</ph>.","pos":[101,233],"source":"  In the default implementation of <xref href=\"System.Collections.Generic.SortedList`2\"></xref>, this property always returns `false`."}]}],"pos":[179417,179653],"yaml":true},{"content":"Gets or sets the element with the specified key.","nodes":[{"pos":[0,48],"content":"Gets or sets the element with the specified key.","nodes":[{"content":"Gets or sets the element with the specified key.","pos":[0,48]}]}],"pos":[181281,181330],"yaml":true},{"content":"This property returns `null` if `key` is of a type that is not assignable to the key type `TKey` of the <xref:System.Collections.Generic.SortedList%602>.  \n  \n This property provides the ability to access a specific element in the collection by using the following syntax: `myCollection[key]`.  \n  \n You can also use the <xref:System.Collections.IDictionary.Item%2A> property to add new elements by setting the value of a key that does not exist in the dictionary; for example, `myCollection[\"myNonexistentKey\"] = myValue`. However, if the specified key already exists in the dictionary, setting the <xref:System.Collections.IDictionary.Item%2A> property overwrites the old value. In contrast, the <xref:System.Collections.IDictionary.Add%2A> method does not modify existing elements.  \n  \n The C# language uses the [this](~/docs/csharp/language-reference/keywords/this.md) keyword to define the indexers instead of implementing the <xref:System.Collections.Generic.SortedList%602.System%23Collections%23IDictionary%23Item%2A> property. Visual Basic implements <xref:System.Collections.Generic.SortedList%602.System%23Collections%23IDictionary%23Item%2A> as a default property, which provides the same indexing functionality.  \n  \n Retrieving the value of this property is an O(log `n`) operation, where n is <xref:System.Collections.Generic.SortedList%602.Count%2A>. Setting the property is an O(log `n`) operation if the key is already in the <xref:System.Collections.Generic.SortedList%602>. If the key is not in the list, setting the property is an O(`n`) operation for unsorted data, or O(log `n`) if the new element is added at the end of the list. If insertion causes a resize, the operation is O(`n`).","nodes":[{"pos":[0,153],"content":"This property returns <ph id=\"ph1\">`null`</ph> if <ph id=\"ph2\">`key`</ph> is of a type that is not assignable to the key type <ph id=\"ph3\">`TKey`</ph> of the <ph id=\"ph4\">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph>.","source":"This property returns `null` if `key` is of a type that is not assignable to the key type `TKey` of the <xref:System.Collections.Generic.SortedList%602>."},{"pos":[160,293],"content":"This property provides the ability to access a specific element in the collection by using the following syntax: <ph id=\"ph1\">`myCollection[key]`</ph>.","source":"This property provides the ability to access a specific element in the collection by using the following syntax: `myCollection[key]`."},{"pos":[300,784],"content":"You can also use the <xref:System.Collections.IDictionary.Item%2A> property to add new elements by setting the value of a key that does not exist in the dictionary; for example, `myCollection[\"myNonexistentKey\"] = myValue`. However, if the specified key already exists in the dictionary, setting the <xref:System.Collections.IDictionary.Item%2A> property overwrites the old value. In contrast, the <xref:System.Collections.IDictionary.Add%2A> method does not modify existing elements.","nodes":[{"content":"You can also use the <ph id=\"ph1\">&lt;xref:System.Collections.IDictionary.Item%2A&gt;</ph> property to add new elements by setting the value of a key that does not exist in the dictionary; for example, <ph id=\"ph2\">`myCollection[\"myNonexistentKey\"] = myValue`</ph>.","pos":[0,223],"source":"You can also use the <xref:System.Collections.IDictionary.Item%2A> property to add new elements by setting the value of a key that does not exist in the dictionary; for example, `myCollection[\"myNonexistentKey\"] = myValue`."},{"content":"However, if the specified key already exists in the dictionary, setting the <ph id=\"ph1\">&lt;xref:System.Collections.IDictionary.Item%2A&gt;</ph> property overwrites the old value.","pos":[224,380],"source":" However, if the specified key already exists in the dictionary, setting the <xref:System.Collections.IDictionary.Item%2A> property overwrites the old value."},{"content":"In contrast, the <ph id=\"ph1\">&lt;xref:System.Collections.IDictionary.Add%2A&gt;</ph> method does not modify existing elements.","pos":[381,484],"source":" In contrast, the <xref:System.Collections.IDictionary.Add%2A> method does not modify existing elements."}]},{"pos":[791,1225],"content":"The C# language uses the [this](~/docs/csharp/language-reference/keywords/this.md) keyword to define the indexers instead of implementing the <xref:System.Collections.Generic.SortedList%602.System%23Collections%23IDictionary%23Item%2A> property. Visual Basic implements <xref:System.Collections.Generic.SortedList%602.System%23Collections%23IDictionary%23Item%2A> as a default property, which provides the same indexing functionality.","nodes":[{"content":"The C# language uses the <bpt id=\"p1\">[</bpt>this<ept id=\"p1\">](~/docs/csharp/language-reference/keywords/this.md)</ept> keyword to define the indexers instead of implementing the <ph id=\"ph1\">&lt;xref:System.Collections.Generic.SortedList%602.System%23Collections%23IDictionary%23Item%2A&gt;</ph> property.","pos":[0,245],"source":"The C# language uses the [this](~/docs/csharp/language-reference/keywords/this.md) keyword to define the indexers instead of implementing the <xref:System.Collections.Generic.SortedList%602.System%23Collections%23IDictionary%23Item%2A> property."},{"content":"Visual Basic implements <ph id=\"ph1\">&lt;xref:System.Collections.Generic.SortedList%602.System%23Collections%23IDictionary%23Item%2A&gt;</ph> as a default property, which provides the same indexing functionality.","pos":[246,434],"source":" Visual Basic implements <xref:System.Collections.Generic.SortedList%602.System%23Collections%23IDictionary%23Item%2A> as a default property, which provides the same indexing functionality."}]},{"pos":[1232,1709],"content":"Retrieving the value of this property is an O(log `n`) operation, where n is <xref:System.Collections.Generic.SortedList%602.Count%2A>. Setting the property is an O(log `n`) operation if the key is already in the <xref:System.Collections.Generic.SortedList%602>. If the key is not in the list, setting the property is an O(`n`) operation for unsorted data, or O(log `n`) if the new element is added at the end of the list. If insertion causes a resize, the operation is O(`n`).","nodes":[{"content":"Retrieving the value of this property is an O(log <ph id=\"ph1\">`n`</ph>) operation, where n is <ph id=\"ph2\">&lt;xref:System.Collections.Generic.SortedList%602.Count%2A&gt;</ph>.","pos":[0,135],"source":"Retrieving the value of this property is an O(log `n`) operation, where n is <xref:System.Collections.Generic.SortedList%602.Count%2A>."},{"content":"Setting the property is an O(log <ph id=\"ph1\">`n`</ph>) operation if the key is already in the <ph id=\"ph2\">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph>.","pos":[136,262],"source":" Setting the property is an O(log `n`) operation if the key is already in the <xref:System.Collections.Generic.SortedList%602>."},{"content":"If the key is not in the list, setting the property is an O(<ph id=\"ph1\">`n`</ph>) operation for unsorted data, or O(log <ph id=\"ph2\">`n`</ph>) if the new element is added at the end of the list.","pos":[263,422],"source":" If the key is not in the list, setting the property is an O(`n`) operation for unsorted data, or O(log `n`) if the new element is added at the end of the list."},{"content":"If insertion causes a resize, the operation is O(<ph id=\"ph1\">`n`</ph>).","pos":[423,477],"source":" If insertion causes a resize, the operation is O(`n`)."}]}],"pos":[181341,183063],"yaml":true,"extradata":"MT"},{"content":"The key of the element to get or set.","nodes":[{"pos":[0,37],"content":"The key of the element to get or set.","nodes":[{"content":"The key of the element to get or set.","pos":[0,37]}]}],"pos":[186119,186157],"yaml":true},{"content":"The element with the specified key, or `null` if <code>key</code> is not in the dictionary or <code>key</code> is of a type that is not assignable to the key type <code>TKey</code> of the <xref href=\"System.Collections.Generic.SortedList`2\"></xref>.","nodes":[{"pos":[0,249],"content":"The element with the specified key, or <ph id=\"ph1\">`null`</ph> if <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">key</ph><ept id=\"p1\">&lt;/code&gt;</ept> is not in the dictionary or <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph3\">key</ph><ept id=\"p2\">&lt;/code&gt;</ept> is of a type that is not assignable to the key type <bpt id=\"p3\">&lt;code&gt;</bpt><ph id=\"ph4\">TKey</ph><ept id=\"p3\">&lt;/code&gt;</ept> of the <ph id=\"ph5\">&lt;xref href=\"System.Collections.Generic.SortedList`2\"&gt;&lt;/xref&gt;</ph>.","source":"The element with the specified key, or `null` if <code>key</code> is not in the dictionary or <code>key</code> is of a type that is not assignable to the key type <code>TKey</code> of the <xref href=\"System.Collections.Generic.SortedList`2\"></xref>."}],"pos":[186214,186464],"yaml":true},{"content":"<code>key</code> is `null`.","nodes":[{"pos":[0,27],"content":"<ph id=\"ph1\">&lt;code&gt;key&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>key</code> is `null`."}],"pos":[186669,186697],"yaml":true},{"content":"A value is being assigned, and <code>key</code> is of a type that is not assignable to the key type <code>TKey</code> of the <xref href=\"System.Collections.Generic.SortedList`2\"></xref>.  \n  \n -or-  \n  \n A value is being assigned, and <code>value</code> is of a type that is not assignable to the value type <code>TValue</code> of the <xref href=\"System.Collections.Generic.SortedList`2\"></xref>.","nodes":[{"pos":[0,186],"content":"A value is being assigned, and <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">key</ph><ept id=\"p1\">&lt;/code&gt;</ept> is of a type that is not assignable to the key type <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">TKey</ph><ept id=\"p2\">&lt;/code&gt;</ept> of the <ph id=\"ph3\">&lt;xref href=\"System.Collections.Generic.SortedList`2\"&gt;&lt;/xref&gt;</ph>.","source":"A value is being assigned, and <code>key</code> is of a type that is not assignable to the key type <code>TKey</code> of the <xref href=\"System.Collections.Generic.SortedList`2\"></xref>."},{"pos":[193,197],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[204,396],"content":"A value is being assigned, and <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept> is of a type that is not assignable to the value type <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">TValue</ph><ept id=\"p2\">&lt;/code&gt;</ept> of the <ph id=\"ph3\">&lt;xref href=\"System.Collections.Generic.SortedList`2\"&gt;&lt;/xref&gt;</ph>.","source":"A value is being assigned, and <code>value</code> is of a type that is not assignable to the value type <code>TValue</code> of the <xref href=\"System.Collections.Generic.SortedList`2\"></xref>."}],"pos":[186791,187198],"yaml":true},{"content":"Gets an <xref href=\"System.Collections.ICollection\"></xref> containing the keys of the <xref href=\"System.Collections.IDictionary\"></xref>.","nodes":[{"pos":[0,139],"content":"Gets an <ph id=\"ph1\">&lt;xref href=\"System.Collections.ICollection\"&gt;&lt;/xref&gt;</ph> containing the keys of the <ph id=\"ph2\">&lt;xref href=\"System.Collections.IDictionary\"&gt;&lt;/xref&gt;</ph>.","source":"Gets an <xref href=\"System.Collections.ICollection\"></xref> containing the keys of the <xref href=\"System.Collections.IDictionary\"></xref>."}],"pos":[188645,188785],"yaml":true},{"content":"The order of the keys in the <xref:System.Collections.ICollection> is the same as the order in the <xref:System.Collections.Generic.SortedList%602>.  \n  \n Retrieving the value of this property is an O(1) operation.","nodes":[{"pos":[0,148],"content":"The order of the keys in the <xref:System.Collections.ICollection> is the same as the order in the <xref:System.Collections.Generic.SortedList%602>.","nodes":[{"content":"The order of the keys in the <ph id=\"ph1\">&lt;xref:System.Collections.ICollection&gt;</ph> is the same as the order in the <ph id=\"ph2\">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph>.","pos":[0,148],"source":"The order of the keys in the <xref:System.Collections.ICollection> is the same as the order in the <xref:System.Collections.Generic.SortedList%602>."}]},{"pos":[155,214],"content":"Retrieving the value of this property is an O(1) operation.","nodes":[{"content":"Retrieving the value of this property is an O(1) operation.","pos":[0,59]}]}],"pos":[188796,189015],"yaml":true,"extradata":"MT"},{"content":"An <xref href=\"System.Collections.ICollection\"></xref> containing the keys of the <xref href=\"System.Collections.IDictionary\"></xref>.","nodes":[{"pos":[0,134],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Collections.ICollection\"&gt;&lt;/xref&gt;</ph> containing the keys of the <ph id=\"ph2\">&lt;xref href=\"System.Collections.IDictionary\"&gt;&lt;/xref&gt;</ph>.","source":"An <xref href=\"System.Collections.ICollection\"></xref> containing the keys of the <xref href=\"System.Collections.IDictionary\"></xref>."}],"pos":[191203,191338],"yaml":true},{"content":"Removes the element with the specified key from the <xref href=\"System.Collections.IDictionary\"></xref>.","nodes":[{"pos":[0,104],"content":"Removes the element with the specified key from the <ph id=\"ph1\">&lt;xref href=\"System.Collections.IDictionary\"&gt;&lt;/xref&gt;</ph>.","source":"Removes the element with the specified key from the <xref href=\"System.Collections.IDictionary\"></xref>."}],"pos":[192970,193075],"yaml":true},{"content":"This method performs a binary search; however, the elements are moved up to fill in the open spot, so this method is an O(`n`) operation, where `n` is <xref:System.Collections.Generic.SortedList%602.Count%2A>.","nodes":[{"pos":[0,209],"content":"This method performs a binary search; however, the elements are moved up to fill in the open spot, so this method is an O(<ph id=\"ph1\">`n`</ph>) operation, where <ph id=\"ph2\">`n`</ph> is <ph id=\"ph3\">&lt;xref:System.Collections.Generic.SortedList%602.Count%2A&gt;</ph>.","source":"This method performs a binary search; however, the elements are moved up to fill in the open spot, so this method is an O(`n`) operation, where `n` is <xref:System.Collections.Generic.SortedList%602.Count%2A>."}],"pos":[193086,193296],"yaml":true,"extradata":"MT"},{"content":"The key of the element to remove.","nodes":[{"pos":[0,33],"content":"The key of the element to remove.","nodes":[{"content":"The key of the element to remove.","pos":[0,33]}]}],"pos":[194781,194815],"yaml":true},{"content":"<code>key</code> is `null`.","nodes":[{"pos":[0,27],"content":"<ph id=\"ph1\">&lt;code&gt;key&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>key</code> is `null`."}],"pos":[195022,195050],"yaml":true},{"content":"Gets an <xref href=\"System.Collections.ICollection\"></xref> containing the values in the <xref href=\"System.Collections.IDictionary\"></xref>.","nodes":[{"pos":[0,141],"content":"Gets an <ph id=\"ph1\">&lt;xref href=\"System.Collections.ICollection\"&gt;&lt;/xref&gt;</ph> containing the values in the <ph id=\"ph2\">&lt;xref href=\"System.Collections.IDictionary\"&gt;&lt;/xref&gt;</ph>.","source":"Gets an <xref href=\"System.Collections.ICollection\"></xref> containing the values in the <xref href=\"System.Collections.IDictionary\"></xref>."}],"pos":[196546,196688],"yaml":true},{"content":"The order of the values in the <xref:System.Collections.ICollection> is the same as the order in the <xref:System.Collections.Generic.SortedList%602>.  \n  \n Retrieving the value of this property is an O(1) operation.","nodes":[{"pos":[0,150],"content":"The order of the values in the <xref:System.Collections.ICollection> is the same as the order in the <xref:System.Collections.Generic.SortedList%602>.","nodes":[{"content":"The order of the values in the <ph id=\"ph1\">&lt;xref:System.Collections.ICollection&gt;</ph> is the same as the order in the <ph id=\"ph2\">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph>.","pos":[0,150],"source":"The order of the values in the <xref:System.Collections.ICollection> is the same as the order in the <xref:System.Collections.Generic.SortedList%602>."}]},{"pos":[157,216],"content":"Retrieving the value of this property is an O(1) operation.","nodes":[{"content":"Retrieving the value of this property is an O(1) operation.","pos":[0,59]}]}],"pos":[196699,196920],"yaml":true,"extradata":"MT"},{"content":"An <xref href=\"System.Collections.ICollection\"></xref> containing the values in the <xref href=\"System.Collections.IDictionary\"></xref>.","nodes":[{"pos":[0,136],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Collections.ICollection\"&gt;&lt;/xref&gt;</ph> containing the values in the <ph id=\"ph2\">&lt;xref href=\"System.Collections.IDictionary\"&gt;&lt;/xref&gt;</ph>.","source":"An <xref href=\"System.Collections.ICollection\"></xref> containing the values in the <xref href=\"System.Collections.IDictionary\"></xref>."}],"pos":[199085,199222],"yaml":true},{"content":"Returns an enumerator that iterates through a collection.","nodes":[{"pos":[0,57],"content":"Returns an enumerator that iterates through a collection.","nodes":[{"content":"Returns an enumerator that iterates through a collection.","pos":[0,57]}]}],"pos":[200835,200893],"yaml":true},{"content":"The `foreach` statement of the C# language (`for each` in C++, `For Each` in Visual Basic) hides the complexity of the enumerators.  Therefore, using `foreach` is recommended, instead of directly manipulating the enumerator.  \n  \n Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.  \n  \n Initially, the enumerator is positioned before the first element in the collection. <xref:System.Collections.IEnumerator.Reset%2A> also brings the enumerator back to this position.  At this position, <xref:System.Collections.IEnumerator.Current%2A> is undefined. Therefore, you must call <xref:System.Collections.IEnumerator.MoveNext%2A> to advance the enumerator to the first element of the collection before reading the value of <xref:System.Collections.IEnumerator.Current%2A>.  \n  \n <xref:System.Collections.IEnumerator.Current%2A> returns the same object until either <xref:System.Collections.IEnumerator.MoveNext%2A> or <xref:System.Collections.IEnumerator.Reset%2A> is called. <xref:System.Collections.IEnumerator.MoveNext%2A> sets <xref:System.Collections.IEnumerator.Current%2A> to the next element.  \n  \n If <xref:System.Collections.IEnumerator.MoveNext%2A> passes the end of the collection, the enumerator is positioned after the last element in the collection and <xref:System.Collections.IEnumerator.MoveNext%2A> returns `false`. When the enumerator is at this position, subsequent calls to <xref:System.Collections.IEnumerator.MoveNext%2A> also return `false`. If the last call to <xref:System.Collections.IEnumerator.MoveNext%2A> returned `false`, <xref:System.Collections.IEnumerator.Current%2A> is undefined. To set <xref:System.Collections.IEnumerator.Current%2A> to the first element of the collection again, you can call <xref:System.Collections.IEnumerator.Reset%2A> followed by <xref:System.Collections.IEnumerator.MoveNext%2A>.  \n  \n An enumerator remains valid as long as the collection remains unchanged. If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and its behavior is undefined.  \n  \n The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure.  To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.  To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.  \n  \n Default implementations of collections in <xref:System.Collections.Generic?displayProperty=fullName> are not synchronized.  \n  \n This method is an O(1) operation.","nodes":[{"pos":[0,224],"content":"The `foreach` statement of the C# language (`for each` in C++, `For Each` in Visual Basic) hides the complexity of the enumerators.  Therefore, using `foreach` is recommended, instead of directly manipulating the enumerator.","nodes":[{"content":"The <ph id=\"ph1\">`foreach`</ph> statement of the C# language (<ph id=\"ph2\">`for each`</ph> in C++, <ph id=\"ph3\">`For Each`</ph> in Visual Basic) hides the complexity of the enumerators.","pos":[0,131],"source":"The `foreach` statement of the C# language (`for each` in C++, `For Each` in Visual Basic) hides the complexity of the enumerators."},{"content":"Therefore, using <ph id=\"ph1\">`foreach`</ph> is recommended, instead of directly manipulating the enumerator.","pos":[133,224],"source":"  Therefore, using `foreach` is recommended, instead of directly manipulating the enumerator."}]},{"pos":[231,351],"content":"Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.","nodes":[{"content":"Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.","pos":[0,120]}]},{"pos":[358,838],"content":"Initially, the enumerator is positioned before the first element in the collection. <xref:System.Collections.IEnumerator.Reset%2A> also brings the enumerator back to this position.  At this position, <xref:System.Collections.IEnumerator.Current%2A> is undefined. Therefore, you must call <xref:System.Collections.IEnumerator.MoveNext%2A> to advance the enumerator to the first element of the collection before reading the value of <xref:System.Collections.IEnumerator.Current%2A>.","nodes":[{"content":"Initially, the enumerator is positioned before the first element in the collection. <xref:System.Collections.IEnumerator.Reset%2A> also brings the enumerator back to this position.  At this position, <xref:System.Collections.IEnumerator.Current%2A> is undefined. Therefore, you must call <xref:System.Collections.IEnumerator.MoveNext%2A> to advance the enumerator to the first element of the collection before reading the value of <xref:System.Collections.IEnumerator.Current%2A>.","pos":[0,480],"nodes":[{"content":"Initially, the enumerator is positioned before the first element in the collection.","pos":[0,83]},{"content":"<ph id=\"ph1\">&lt;xref:System.Collections.IEnumerator.Reset%2A&gt;</ph> also brings the enumerator back to this position.","pos":[84,180],"source":" <xref:System.Collections.IEnumerator.Reset%2A> also brings the enumerator back to this position."},{"content":"At this position, <ph id=\"ph1\">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> is undefined.","pos":[182,262],"source":"  At this position, <xref:System.Collections.IEnumerator.Current%2A> is undefined."},{"content":"Therefore, you must call <ph id=\"ph1\">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> to advance the enumerator to the first element of the collection before reading the value of <ph id=\"ph2\">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph>.","pos":[263,480],"source":" Therefore, you must call <xref:System.Collections.IEnumerator.MoveNext%2A> to advance the enumerator to the first element of the collection before reading the value of <xref:System.Collections.IEnumerator.Current%2A>."}]}]},{"pos":[845,1166],"content":"<xref:System.Collections.IEnumerator.Current%2A> returns the same object until either <xref:System.Collections.IEnumerator.MoveNext%2A> or <xref:System.Collections.IEnumerator.Reset%2A> is called. <xref:System.Collections.IEnumerator.MoveNext%2A> sets <xref:System.Collections.IEnumerator.Current%2A> to the next element.","nodes":[{"content":"<xref:System.Collections.IEnumerator.Current%2A> returns the same object until either <xref:System.Collections.IEnumerator.MoveNext%2A> or <xref:System.Collections.IEnumerator.Reset%2A> is called. <xref:System.Collections.IEnumerator.MoveNext%2A> sets <xref:System.Collections.IEnumerator.Current%2A> to the next element.","pos":[0,321],"nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> returns the same object until either <ph id=\"ph2\">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> or <ph id=\"ph3\">&lt;xref:System.Collections.IEnumerator.Reset%2A&gt;</ph> is called.","pos":[0,196],"source":"<xref:System.Collections.IEnumerator.Current%2A> returns the same object until either <xref:System.Collections.IEnumerator.MoveNext%2A> or <xref:System.Collections.IEnumerator.Reset%2A> is called."},{"content":"<ph id=\"ph1\">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> sets <ph id=\"ph2\">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> to the next element.","pos":[197,321],"source":" <xref:System.Collections.IEnumerator.MoveNext%2A> sets <xref:System.Collections.IEnumerator.Current%2A> to the next element."}]}]},{"pos":[1173,1908],"content":"If <xref:System.Collections.IEnumerator.MoveNext%2A> passes the end of the collection, the enumerator is positioned after the last element in the collection and <xref:System.Collections.IEnumerator.MoveNext%2A> returns `false`. When the enumerator is at this position, subsequent calls to <xref:System.Collections.IEnumerator.MoveNext%2A> also return `false`. If the last call to <xref:System.Collections.IEnumerator.MoveNext%2A> returned `false`, <xref:System.Collections.IEnumerator.Current%2A> is undefined. To set <xref:System.Collections.IEnumerator.Current%2A> to the first element of the collection again, you can call <xref:System.Collections.IEnumerator.Reset%2A> followed by <xref:System.Collections.IEnumerator.MoveNext%2A>.","nodes":[{"content":"If <ph id=\"ph1\">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> passes the end of the collection, the enumerator is positioned after the last element in the collection and <ph id=\"ph2\">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> returns <ph id=\"ph3\">`false`</ph>.","pos":[0,227],"source":"If <xref:System.Collections.IEnumerator.MoveNext%2A> passes the end of the collection, the enumerator is positioned after the last element in the collection and <xref:System.Collections.IEnumerator.MoveNext%2A> returns `false`."},{"content":"When the enumerator is at this position, subsequent calls to <ph id=\"ph1\">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> also return <ph id=\"ph2\">`false`</ph>.","pos":[228,359],"source":" When the enumerator is at this position, subsequent calls to <xref:System.Collections.IEnumerator.MoveNext%2A> also return `false`."},{"content":"If the last call to <ph id=\"ph1\">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> returned <ph id=\"ph2\">`false`</ph>, <ph id=\"ph3\">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> is undefined.","pos":[360,510],"source":" If the last call to <xref:System.Collections.IEnumerator.MoveNext%2A> returned `false`, <xref:System.Collections.IEnumerator.Current%2A> is undefined."},{"content":"To set <ph id=\"ph1\">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> to the first element of the collection again, you can call <ph id=\"ph2\">&lt;xref:System.Collections.IEnumerator.Reset%2A&gt;</ph> followed by <ph id=\"ph3\">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph>.","pos":[511,735],"source":" To set <xref:System.Collections.IEnumerator.Current%2A> to the first element of the collection again, you can call <xref:System.Collections.IEnumerator.Reset%2A> followed by <xref:System.Collections.IEnumerator.MoveNext%2A>."}]},{"pos":[1915,2150],"content":"An enumerator remains valid as long as the collection remains unchanged. If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and its behavior is undefined.","nodes":[{"content":"An enumerator remains valid as long as the collection remains unchanged. If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and its behavior is undefined.","pos":[0,235],"nodes":[{"content":"An enumerator remains valid as long as the collection remains unchanged.","pos":[0,72]},{"content":"If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and its behavior is undefined.","pos":[73,235]}]}]},{"pos":[2157,2548],"content":"The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure.  To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.  To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.","nodes":[{"content":"The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure.  To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.  To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.","pos":[0,391],"nodes":[{"content":"The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure.","pos":[0,154]},{"content":"To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.","pos":[156,261]},{"content":"To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.","pos":[263,391]}]}]},{"pos":[2555,2677],"content":"Default implementations of collections in <xref:System.Collections.Generic?displayProperty=fullName> are not synchronized.","nodes":[{"content":"Default implementations of collections in <ph id=\"ph1\">&lt;xref:System.Collections.Generic?displayProperty=fullName&gt;</ph> are not synchronized.","pos":[0,122],"source":"Default implementations of collections in <xref:System.Collections.Generic?displayProperty=fullName> are not synchronized."}]},{"pos":[2684,2717],"content":"This method is an O(1) operation.","nodes":[{"content":"This method is an O(1) operation.","pos":[0,33]}]}],"pos":[200904,203640],"yaml":true,"extradata":"MT"},{"content":"An <xref href=\"System.Collections.IEnumerator\"></xref> that can be used to iterate through the collection.","nodes":[{"pos":[0,106],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Collections.IEnumerator\"&gt;&lt;/xref&gt;</ph> that can be used to iterate through the collection.","source":"An <xref href=\"System.Collections.IEnumerator\"></xref> that can be used to iterate through the collection."}],"pos":[203817,203924],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Collections.Generic.SortedList`2\n  commentId: T:System.Collections.Generic.SortedList`2\n  id: SortedList`2\n  children:\n  - System.Collections.Generic.SortedList`2.#ctor\n  - System.Collections.Generic.SortedList`2.#ctor(System.Collections.Generic.IComparer{`0})\n  - System.Collections.Generic.SortedList`2.#ctor(System.Collections.Generic.IDictionary{`0,`1})\n  - System.Collections.Generic.SortedList`2.#ctor(System.Int32)\n  - System.Collections.Generic.SortedList`2.#ctor(System.Collections.Generic.IDictionary{`0,`1},System.Collections.Generic.IComparer{`0})\n  - System.Collections.Generic.SortedList`2.#ctor(System.Int32,System.Collections.Generic.IComparer{`0})\n  - System.Collections.Generic.SortedList`2.Add(`0,`1)\n  - System.Collections.Generic.SortedList`2.Capacity\n  - System.Collections.Generic.SortedList`2.Clear\n  - System.Collections.Generic.SortedList`2.Comparer\n  - System.Collections.Generic.SortedList`2.ContainsKey(`0)\n  - System.Collections.Generic.SortedList`2.ContainsValue(`1)\n  - System.Collections.Generic.SortedList`2.Count\n  - System.Collections.Generic.SortedList`2.GetEnumerator\n  - System.Collections.Generic.SortedList`2.IndexOfKey(`0)\n  - System.Collections.Generic.SortedList`2.IndexOfValue(`1)\n  - System.Collections.Generic.SortedList`2.Item(`0)\n  - System.Collections.Generic.SortedList`2.Keys\n  - System.Collections.Generic.SortedList`2.Remove(`0)\n  - System.Collections.Generic.SortedList`2.RemoveAt(System.Int32)\n  - System.Collections.Generic.SortedList`2.TrimExcess\n  - System.Collections.Generic.SortedList`2.TryGetValue(`0,`1@)\n  - System.Collections.Generic.SortedList`2.Values\n  - System.Collections.Generic.SortedList`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#Add(System.Collections.Generic.KeyValuePair{`0,`1})\n  - System.Collections.Generic.SortedList`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#Contains(System.Collections.Generic.KeyValuePair{`0,`1})\n  - System.Collections.Generic.SortedList`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)\n  - System.Collections.Generic.SortedList`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#IsReadOnly\n  - System.Collections.Generic.SortedList`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#Remove(System.Collections.Generic.KeyValuePair{`0,`1})\n  - System.Collections.Generic.SortedList`2.System#Collections#Generic#IDictionary{TKey,TValue}#Keys\n  - System.Collections.Generic.SortedList`2.System#Collections#Generic#IDictionary{TKey,TValue}#Values\n  - System.Collections.Generic.SortedList`2.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{TKey,TValue}}#GetEnumerator\n  - System.Collections.Generic.SortedList`2.System#Collections#Generic#IReadOnlyDictionary{TKey,TValue}#Keys\n  - System.Collections.Generic.SortedList`2.System#Collections#Generic#IReadOnlyDictionary{TKey,TValue}#Values\n  - System.Collections.Generic.SortedList`2.System#Collections#ICollection#CopyTo(System.Array,System.Int32)\n  - System.Collections.Generic.SortedList`2.System#Collections#ICollection#IsSynchronized\n  - System.Collections.Generic.SortedList`2.System#Collections#ICollection#SyncRoot\n  - System.Collections.Generic.SortedList`2.System#Collections#IDictionary#Add(System.Object,System.Object)\n  - System.Collections.Generic.SortedList`2.System#Collections#IDictionary#Contains(System.Object)\n  - System.Collections.Generic.SortedList`2.System#Collections#IDictionary#GetEnumerator\n  - System.Collections.Generic.SortedList`2.System#Collections#IDictionary#IsFixedSize\n  - System.Collections.Generic.SortedList`2.System#Collections#IDictionary#IsReadOnly\n  - System.Collections.Generic.SortedList`2.System#Collections#IDictionary#Item(System.Object)\n  - System.Collections.Generic.SortedList`2.System#Collections#IDictionary#Keys\n  - System.Collections.Generic.SortedList`2.System#Collections#IDictionary#Remove(System.Object)\n  - System.Collections.Generic.SortedList`2.System#Collections#IDictionary#Values\n  - System.Collections.Generic.SortedList`2.System#Collections#IEnumerable#GetEnumerator\n  langs:\n  - csharp\n  name: SortedList<TKey,TValue>\n  nameWithType: SortedList<TKey,TValue>\n  fullName: System.Collections.Generic.SortedList<TKey,TValue>\n  type: Class\n  assemblies:\n  - System.Collections\n  - System\n  - netstandard\n  namespace: System.Collections.Generic\n  summary: Represents a collection of key/value pairs that are sorted by key based on the associated <xref href=\"System.Collections.Generic.IComparer`1\"></xref> implementation.\n  remarks: \"The <xref:System.Collections.Generic.SortedList%602> generic class is an array of key/value pairs with O(log `n`) retrieval, where n is the number of elements in the dictionary. In this, it is similar to the <xref:System.Collections.Generic.SortedDictionary%602> generic class. The two classes have similar object models, and both have O(log `n`) retrieval. Where the two classes differ is in memory use and speed of insertion and removal:  \\n  \\n-   <xref:System.Collections.Generic.SortedList%602> uses less memory than <xref:System.Collections.Generic.SortedDictionary%602>.  \\n  \\n-   <xref:System.Collections.Generic.SortedDictionary%602> has faster insertion and removal operations for unsorted data, O(log `n`) as opposed to O(`n`) for <xref:System.Collections.Generic.SortedList%602>.  \\n  \\n-   If the list is populated all at once from sorted data, <xref:System.Collections.Generic.SortedList%602> is faster than <xref:System.Collections.Generic.SortedDictionary%602>.  \\n  \\n Another difference between the <xref:System.Collections.Generic.SortedDictionary%602> and <xref:System.Collections.Generic.SortedList%602> classes is that <xref:System.Collections.Generic.SortedList%602> supports efficient indexed retrieval of keys and values through the collections returned by the <xref:System.Collections.Generic.SortedList%602.Keys%2A> and <xref:System.Collections.Generic.SortedList%602.Values%2A> properties. It is not necessary to regenerate the lists when the properties are accessed, because the lists are just wrappers for the internal arrays of keys and values. The following code shows the use of the <xref:System.Collections.Generic.SortedList%602.Values%2A> property for indexed retrieval of values from a sorted list of strings:  \\n  \\n [!code-cpp[Generic.SortedList#11](~/samples/snippets/cpp/VS_Snippets_CLR/Generic.SortedList/cpp/remarks.cpp#11)]\\n [!code-csharp[Generic.SortedList#11](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.SortedList/CS/remarks.cs#11)]\\n [!code-vb[Generic.SortedList#11](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.SortedList/VB/remarks.vb#11)]  \\n  \\n <xref:System.Collections.Generic.SortedList%602> is implemented as an array of key/value pairs, sorted by the key.  Each element can be retrieved as a <xref:System.Collections.Generic.KeyValuePair%602> object.  \\n  \\n Key objects must be immutable as long as they are used as keys in the <xref:System.Collections.Generic.SortedList%602>. Every key in a <xref:System.Collections.Generic.SortedList%602> must be unique. A key cannot be `null`, but a value can be, if the type of values in the list, `TValue`, is a reference type.  \\n  \\n <xref:System.Collections.Generic.SortedList%602> requires a comparer implementation to sort and to perform comparisons.  The default comparer <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=fullName> checks whether the key type `TKey` implements <xref:System.IComparable%601?displayProperty=fullName> and uses that implementation, if available.  If not, <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=fullName> checks whether the key type `TKey` implements <xref:System.IComparable?displayProperty=fullName>.  If the key type `TKey` does not implement either interface, you can specify a <xref:System.Collections.Generic.IComparer%601?displayProperty=fullName> implementation in a constructor overload that accepts a `comparer` parameter.  \\n  \\n The capacity of a <xref:System.Collections.Generic.SortedList%602> is the number of elements the <xref:System.Collections.Generic.SortedList%602> can hold. As elements are added to a <xref:System.Collections.Generic.SortedList%602>, the capacity is automatically increased as required by reallocating the internal array. The capacity can be decreased by calling <xref:System.Collections.Generic.SortedList%602.TrimExcess%2A> or by setting the <xref:System.Collections.Generic.SortedList%602.Capacity%2A> property explicitly. Decreasing the capacity reallocates memory and copies all the elements in the <xref:System.Collections.Generic.SortedList%602>.  \\n  \\n For very large <xref:System.Collections.Generic.SortedList%602> objects, you can increase the maximum capacity to 2 billion elements on a 64-bit system by setting the `enabled` attribute of the  configuration element to `true` in the run-time environment.  \\n  \\n The `foreach` statement of the C# language (`for each` in C++, `For Each` in Visual Basic) returns an object of the type of the elements in the collection. Since the elements of the <xref:System.Collections.Generic.SortedList%602> are key/value pairs, the element type is not the type of the key or the type of the value. Instead, the element type is <xref:System.Collections.Generic.KeyValuePair%602>. For example:  \\n  \\n [!code-cpp[Generic.SortedList#12](~/samples/snippets/cpp/VS_Snippets_CLR/Generic.SortedList/cpp/remarks.cpp#12)]\\n [!code-csharp[Generic.SortedList#12](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.SortedList/CS/remarks.cs#12)]\\n [!code-vb[Generic.SortedList#12](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.SortedList/VB/remarks.vb#12)]  \\n  \\n The `foreach` statement is a wrapper around the enumerator, which only allows reading from, not writing to, the collection.\"\n  example:\n  - \"The following code example creates an empty <xref:System.Collections.Generic.SortedList%602> of strings with string keys and uses the <xref:System.Collections.Generic.SortedList%602.Add%2A> method to add some elements. The example demonstrates that the <xref:System.Collections.Generic.SortedList%602.Add%2A> method throws an <xref:System.ArgumentException> when attempting to add a duplicate key.  \\n  \\n The example uses the <xref:System.Collections.Generic.SortedList%602.Item%2A> property (the indexer in C#) to retrieve values, demonstrating that a <xref:System.Collections.Generic.KeyNotFoundException> is thrown when a requested key is not present, and showing that the value associated with a key can be replaced.  \\n  \\n The example shows how to use the <xref:System.Collections.Generic.SortedList%602.TryGetValue%2A> method as a more efficient way to retrieve values if a program often must try key values that are not in the sorted list, and it shows how to use the <xref:System.Collections.Generic.SortedList%602.ContainsKey%2A> method to test whether a key exists before calling the <xref:System.Collections.Generic.SortedList%602.Add%2A> method.  \\n  \\n The example shows how to enumerate the keys and values in the sorted list and how to enumerate the keys and values alone using the <xref:System.Collections.Generic.SortedList%602.Keys%2A> property and the <xref:System.Collections.Generic.SortedList%602.Values%2A> property.  \\n  \\n Finally, the example demonstrates the <xref:System.Collections.Generic.SortedList%602.Remove%2A> method.  \\n  \\n [!code-cpp[Generic.SortedList#1](~/samples/snippets/cpp/VS_Snippets_CLR/Generic.SortedList/cpp/source.cpp#1)]\\n [!code-csharp[Generic.SortedList#1](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.SortedList/CS/source.cs#1)]\\n [!code-vb[Generic.SortedList#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.SortedList/VB/source.vb#1)]\"\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(false)]\n\n      public class SortedList<TKey,TValue> : System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>, System.Collections.Generic.IDictionary<TKey,TValue>, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<TKey,TValue>>, System.Collections.Generic.IReadOnlyCollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>, System.Collections.Generic.IReadOnlyDictionary<TKey,TValue>, System.Collections.IDictionary\n    typeParameters:\n    - id: TKey\n      description: The type of keys in the collection.\n    - id: TValue\n      description: The type of values in the collection.\n  inheritance:\n  - System.Object\n  derivedClasses:\n  - System.IdentityModel.Metadata.IndexedProtocolEndpointDictionary\n  implements:\n  - System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{TKey,TValue}}\n  - System.Collections.Generic.IDictionary{TKey,TValue}\n  - System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{TKey,TValue}}\n  - System.Collections.Generic.IReadOnlyCollection{System.Collections.Generic.KeyValuePair{TKey,TValue}}\n  - System.Collections.Generic.IReadOnlyDictionary{TKey,TValue}\n  - System.Collections.IDictionary\n  inheritedMembers:\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.ToString\n  extensionMethods:\n  - System.Collections.Generic.CollectionExtensions.GetValueOrDefault``2(System.Collections.Generic.IReadOnlyDictionary{``0,``1},``0)\n  - System.Collections.Generic.CollectionExtensions.GetValueOrDefault``2(System.Collections.Generic.IReadOnlyDictionary{``0,``1},``0,``1)\n  - System.Collections.Generic.CollectionExtensions.Remove``2(System.Collections.Generic.IDictionary{``0,``1},``0,``1@)\n  - System.Collections.Generic.CollectionExtensions.TryAdd``2(System.Collections.Generic.IDictionary{``0,``1},``0,``1)\n  - System.Collections.Immutable.ImmutableArray.ToImmutableArray``1(System.Collections.Generic.IEnumerable{``0})\n  - System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})\n  - System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})\n  - System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}})\n  - System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}},System.Collections.Generic.IEqualityComparer{``0})\n  - System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}},System.Collections.Generic.IEqualityComparer{``0},System.Collections.Generic.IEqualityComparer{``1})\n  - System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})\n  - System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})\n  - System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1},System.Collections.Generic.IEqualityComparer{``2})\n  - System.Collections.Immutable.ImmutableHashSet.ToImmutableHashSet``1(System.Collections.Generic.IEnumerable{``0})\n  - System.Collections.Immutable.ImmutableHashSet.ToImmutableHashSet``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})\n  - System.Collections.Immutable.ImmutableList.ToImmutableList``1(System.Collections.Generic.IEnumerable{``0})\n  - System.Collections.Immutable.ImmutableSortedDictionary.ToImmutableSortedDictionary``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}})\n  - System.Collections.Immutable.ImmutableSortedDictionary.ToImmutableSortedDictionary``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}},System.Collections.Generic.IComparer{``0})\n  - System.Collections.Immutable.ImmutableSortedDictionary.ToImmutableSortedDictionary``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}},System.Collections.Generic.IComparer{``0},System.Collections.Generic.IEqualityComparer{``1})\n  - System.Collections.Immutable.ImmutableSortedDictionary.ToImmutableSortedDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})\n  - System.Collections.Immutable.ImmutableSortedDictionary.ToImmutableSortedDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IComparer{``1})\n  - System.Collections.Immutable.ImmutableSortedDictionary.ToImmutableSortedDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IComparer{``1},System.Collections.Generic.IEqualityComparer{``2})\n  - System.Collections.Immutable.ImmutableSortedSet.ToImmutableSortedSet``1(System.Collections.Generic.IEnumerable{``0})\n  - System.Collections.Immutable.ImmutableSortedSet.ToImmutableSortedSet``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IComparer{``0})\n  - System.Data.DataTableExtensions.CopyToDataTable``1(System.Collections.Generic.IEnumerable{``0})\n  - System.Data.DataTableExtensions.CopyToDataTable``1(System.Collections.Generic.IEnumerable{``0},System.Data.DataTable,System.Data.LoadOption)\n  - System.Data.DataTableExtensions.CopyToDataTable``1(System.Collections.Generic.IEnumerable{``0},System.Data.DataTable,System.Data.LoadOption,System.Data.FillErrorEventHandler)\n  - System.Linq.Enumerable.Aggregate``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,``0})\n  - System.Linq.Enumerable.Aggregate``2(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1})\n  - System.Linq.Enumerable.Aggregate``3(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``2})\n  - System.Linq.Enumerable.All``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})\n  - System.Linq.Enumerable.Any``1(System.Collections.Generic.IEnumerable{``0})\n  - System.Linq.Enumerable.Any``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})\n  - System.Linq.Enumerable.Append``1(System.Collections.Generic.IEnumerable{``0},``0)\n  - System.Linq.Enumerable.AsEnumerable``1(System.Collections.Generic.IEnumerable{``0})\n  - System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Decimal})\n  - System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Double})\n  - System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Int32})\n  - System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Int64})\n  - System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})\n  - System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})\n  - System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})\n  - System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})\n  - System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})\n  - System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Single})\n  - System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})\n  - System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})\n  - System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})\n  - System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})\n  - System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})\n  - System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})\n  - System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})\n  - System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})\n  - System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})\n  - System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})\n  - System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)\n  - System.Linq.Enumerable.Concat``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})\n  - System.Linq.Enumerable.Contains``1(System.Collections.Generic.IEnumerable{``0},``0)\n  - System.Linq.Enumerable.Contains``1(System.Collections.Generic.IEnumerable{``0},``0,System.Collections.Generic.IEqualityComparer{``0})\n  - System.Linq.Enumerable.Count``1(System.Collections.Generic.IEnumerable{``0})\n  - System.Linq.Enumerable.Count``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})\n  - System.Linq.Enumerable.DefaultIfEmpty``1(System.Collections.Generic.IEnumerable{``0})\n  - System.Linq.Enumerable.DefaultIfEmpty``1(System.Collections.Generic.IEnumerable{``0},``0)\n  - System.Linq.Enumerable.Distinct``1(System.Collections.Generic.IEnumerable{``0})\n  - System.Linq.Enumerable.Distinct``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})\n  - System.Linq.Enumerable.ElementAt``1(System.Collections.Generic.IEnumerable{``0},System.Int32)\n  - System.Linq.Enumerable.ElementAtOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Int32)\n  - System.Linq.Enumerable.Except``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})\n  - System.Linq.Enumerable.Except``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})\n  - System.Linq.Enumerable.First``1(System.Collections.Generic.IEnumerable{``0})\n  - System.Linq.Enumerable.First``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})\n  - System.Linq.Enumerable.FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0})\n  - System.Linq.Enumerable.FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})\n  - System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})\n  - System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})\n  - System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})\n  - System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})\n  - System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2})\n  - System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2},System.Collections.Generic.IEqualityComparer{``1})\n  - System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3})\n  - System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3},System.Collections.Generic.IEqualityComparer{``1})\n  - System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})\n  - System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})\n  - System.Linq.Enumerable.Intersect``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})\n  - System.Linq.Enumerable.Intersect``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})\n  - System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})\n  - System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})\n  - System.Linq.Enumerable.Last``1(System.Collections.Generic.IEnumerable{``0})\n  - System.Linq.Enumerable.Last``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})\n  - System.Linq.Enumerable.LastOrDefault``1(System.Collections.Generic.IEnumerable{``0})\n  - System.Linq.Enumerable.LastOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})\n  - System.Linq.Enumerable.LongCount``1(System.Collections.Generic.IEnumerable{``0})\n  - System.Linq.Enumerable.LongCount``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})\n  - System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Decimal})\n  - System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Double})\n  - System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Int32})\n  - System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Int64})\n  - System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})\n  - System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})\n  - System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})\n  - System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})\n  - System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})\n  - System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Single})\n  - System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0})\n  - System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})\n  - System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})\n  - System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})\n  - System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})\n  - System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})\n  - System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})\n  - System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})\n  - System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})\n  - System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})\n  - System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})\n  - System.Linq.Enumerable.Max``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})\n  - System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Decimal})\n  - System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Double})\n  - System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Int32})\n  - System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Int64})\n  - System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})\n  - System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})\n  - System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})\n  - System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})\n  - System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})\n  - System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Single})\n  - System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0})\n  - System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})\n  - System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})\n  - System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})\n  - System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})\n  - System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})\n  - System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})\n  - System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})\n  - System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})\n  - System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})\n  - System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})\n  - System.Linq.Enumerable.Min``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})\n  - System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)\n  - System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})\n  - System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})\n  - System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})\n  - System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})\n  - System.Linq.Enumerable.Prepend``1(System.Collections.Generic.IEnumerable{``0},``0)\n  - System.Linq.Enumerable.Reverse``1(System.Collections.Generic.IEnumerable{``0})\n  - System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})\n  - System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,``1})\n  - System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}})\n  - System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}})\n  - System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})\n  - System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})\n  - System.Linq.Enumerable.SequenceEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})\n  - System.Linq.Enumerable.SequenceEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})\n  - System.Linq.Enumerable.Single``1(System.Collections.Generic.IEnumerable{``0})\n  - System.Linq.Enumerable.Single``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})\n  - System.Linq.Enumerable.SingleOrDefault``1(System.Collections.Generic.IEnumerable{``0})\n  - System.Linq.Enumerable.SingleOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})\n  - System.Linq.Enumerable.Skip``1(System.Collections.Generic.IEnumerable{``0},System.Int32)\n  - System.Linq.Enumerable.SkipLast``1(System.Collections.Generic.IEnumerable{``0},System.Int32)\n  - System.Linq.Enumerable.SkipWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})\n  - System.Linq.Enumerable.SkipWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})\n  - System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Decimal})\n  - System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Double})\n  - System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Int32})\n  - System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Int64})\n  - System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})\n  - System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})\n  - System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})\n  - System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})\n  - System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})\n  - System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Single})\n  - System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})\n  - System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})\n  - System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})\n  - System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})\n  - System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})\n  - System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})\n  - System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})\n  - System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})\n  - System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})\n  - System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})\n  - System.Linq.Enumerable.Take``1(System.Collections.Generic.IEnumerable{``0},System.Int32)\n  - System.Linq.Enumerable.TakeLast``1(System.Collections.Generic.IEnumerable{``0},System.Int32)\n  - System.Linq.Enumerable.TakeWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})\n  - System.Linq.Enumerable.TakeWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})\n  - System.Linq.Enumerable.ToArray``1(System.Collections.Generic.IEnumerable{``0})\n  - System.Linq.Enumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})\n  - System.Linq.Enumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})\n  - System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})\n  - System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})\n  - System.Linq.Enumerable.ToHashSet``1(System.Collections.Generic.IEnumerable{``0})\n  - System.Linq.Enumerable.ToHashSet``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})\n  - System.Linq.Enumerable.ToList``1(System.Collections.Generic.IEnumerable{``0})\n  - System.Linq.Enumerable.ToLookup``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})\n  - System.Linq.Enumerable.ToLookup``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})\n  - System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})\n  - System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})\n  - System.Linq.Enumerable.Union``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})\n  - System.Linq.Enumerable.Union``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})\n  - System.Linq.Enumerable.Where``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})\n  - System.Linq.Enumerable.Where``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})\n  - System.Linq.Enumerable.Zip``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,``2})\n  - System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)\n  - System.Linq.ParallelEnumerable.AsParallel``1(System.Collections.Generic.IEnumerable{``0})\n  - System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)\n  - System.Linq.Queryable.AsQueryable``1(System.Collections.Generic.IEnumerable{``0})\n  - System.Xml.Linq.Extensions.Ancestors``1(System.Collections.Generic.IEnumerable{``0})\n  - System.Xml.Linq.Extensions.Ancestors``1(System.Collections.Generic.IEnumerable{``0},System.Xml.Linq.XName)\n  - System.Xml.Linq.Extensions.AncestorsAndSelf(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement})\n  - System.Xml.Linq.Extensions.AncestorsAndSelf(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement},System.Xml.Linq.XName)\n  - System.Xml.Linq.Extensions.Attributes(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement})\n  - System.Xml.Linq.Extensions.Attributes(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement},System.Xml.Linq.XName)\n  - System.Xml.Linq.Extensions.DescendantNodes``1(System.Collections.Generic.IEnumerable{``0})\n  - System.Xml.Linq.Extensions.DescendantNodesAndSelf(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement})\n  - System.Xml.Linq.Extensions.Descendants``1(System.Collections.Generic.IEnumerable{``0})\n  - System.Xml.Linq.Extensions.Descendants``1(System.Collections.Generic.IEnumerable{``0},System.Xml.Linq.XName)\n  - System.Xml.Linq.Extensions.DescendantsAndSelf(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement})\n  - System.Xml.Linq.Extensions.DescendantsAndSelf(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement},System.Xml.Linq.XName)\n  - System.Xml.Linq.Extensions.Elements``1(System.Collections.Generic.IEnumerable{``0})\n  - System.Xml.Linq.Extensions.Elements``1(System.Collections.Generic.IEnumerable{``0},System.Xml.Linq.XName)\n  - System.Xml.Linq.Extensions.InDocumentOrder``1(System.Collections.Generic.IEnumerable{``0})\n  - System.Xml.Linq.Extensions.Nodes``1(System.Collections.Generic.IEnumerable{``0})\n  - System.Xml.Linq.Extensions.Remove(System.Collections.Generic.IEnumerable{System.Xml.Linq.XAttribute})\n  - System.Xml.Linq.Extensions.Remove``1(System.Collections.Generic.IEnumerable{``0})\n  attributes:\n  - type: System.Runtime.InteropServices.ComVisibleAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/SortedList`2.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.Generic.SortedList`2.#ctor\n  commentId: M:System.Collections.Generic.SortedList`2.#ctor\n  id: '#ctor'\n  parent: System.Collections.Generic.SortedList`2\n  langs:\n  - csharp\n  name: SortedList<TKey,TValue>()\n  nameWithType: SortedList<TKey,TValue>.SortedList<TKey,TValue>()\n  fullName: SortedList<TKey,TValue>.SortedList<TKey,TValue>()\n  type: Constructor\n  assemblies:\n  - System.Collections\n  - System\n  - netstandard\n  namespace: System.Collections.Generic\n  summary: Initializes a new instance of the <xref href=\"System.Collections.Generic.SortedList`2\"></xref> class that is empty, has the default initial capacity, and uses the default <xref href=\"System.Collections.Generic.IComparer`1\"></xref>.\n  remarks: \"Every key in a <xref:System.Collections.Generic.SortedList%602> must be unique according to the default comparer.  \\n  \\n This constructor uses the default value for the initial capacity of the <xref:System.Collections.Generic.SortedList%602>. To set the initial capacity, use the <xref:System.Collections.Generic.SortedList%602.%23ctor%28System.Int32%29> constructor. If the final size of the collection can be estimated, specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <xref:System.Collections.Generic.SortedList%602>.  \\n  \\n This constructor uses the default comparer for `TKey`. To specify a comparer, use the <xref:System.Collections.Generic.SortedList%602.%23ctor%28System.Collections.Generic.IComparer%7B%600%7D%29> constructor. The default comparer <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=fullName> checks whether the key type `TKey` implements <xref:System.IComparable%601?displayProperty=fullName> and uses that implementation, if available.  If not, <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=fullName> checks whether the key type `TKey` implements <xref:System.IComparable?displayProperty=fullName>.  If the key type `TKey` does not implement either interface, you can specify a <xref:System.Collections.Generic.IComparer%601?displayProperty=fullName> implementation in a constructor overload that accepts a `comparer` parameter.  \\n  \\n This constructor is an O(1) operation.\"\n  example:\n  - \"The following code example creates an empty <xref:System.Collections.Generic.SortedList%602> of strings with string keys and uses the <xref:System.Collections.Generic.SortedList%602.Add%2A> method to add some elements. The example demonstrates that the <xref:System.Collections.Generic.SortedList%602.Add%2A> method throws an <xref:System.ArgumentException> when attempting to add a duplicate key.  \\n  \\n This code example is part of a larger example provided for the <xref:System.Collections.Generic.SortedList%602> class.  \\n  \\n [!code-cpp[Generic.SortedList#2](~/samples/snippets/cpp/VS_Snippets_CLR/Generic.SortedList/cpp/source.cpp#2)]\\n [!code-csharp[Generic.SortedList#2](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.SortedList/CS/source.cs#2)]\\n [!code-vb[Generic.SortedList#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.SortedList/VB/source.vb#2)]\"\n  syntax:\n    content: public SortedList ();\n    parameters: []\n  overload: System.Collections.Generic.SortedList`2.#ctor*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/SortedList`2.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.Generic.SortedList`2.#ctor(System.Collections.Generic.IComparer{`0})\n  commentId: M:System.Collections.Generic.SortedList`2.#ctor(System.Collections.Generic.IComparer{`0})\n  id: '#ctor(System.Collections.Generic.IComparer{`0})'\n  parent: System.Collections.Generic.SortedList`2\n  langs:\n  - csharp\n  name: SortedList<TKey,TValue>(IComparer<TKey>)\n  nameWithType: SortedList<TKey,TValue>.SortedList<TKey,TValue>(IComparer<TKey>)\n  fullName: SortedList<TKey,TValue>.SortedList<TKey,TValue>(IComparer<TKey>)\n  type: Constructor\n  assemblies:\n  - System.Collections\n  - System\n  - netstandard\n  namespace: System.Collections.Generic\n  summary: Initializes a new instance of the <xref href=\"System.Collections.Generic.SortedList`2\"></xref> class that is empty, has the default initial capacity, and uses the specified <xref href=\"System.Collections.Generic.IComparer`1\"></xref>.\n  remarks: \"Every key in a <xref:System.Collections.Generic.SortedList%602> must be unique according to the specified comparer.  \\n  \\n This constructor uses the default value for the initial capacity of the <xref:System.Collections.Generic.SortedList%602>. To set the initial capacity, use the <xref:System.Collections.Generic.SortedList%602.%23ctor%28System.Int32%2CSystem.Collections.Generic.IComparer%7B%600%7D%29> constructor. If the final size of the collection can be estimated, specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <xref:System.Collections.Generic.SortedList%602>.  \\n  \\n This constructor is an O(1) operation.\"\n  example:\n  - \"The following code example creates a sorted list with a case-insensitive comparer for the current culture. The example adds four elements, some with lower-case keys and some with upper-case keys. The example then attempts to add an element with a key that differs from an existing key only by case, catches the resulting exception, and displays an error message. Finally, the example displays the elements in case-insensitive sort order.  \\n  \\n [!code-csharp[Generic.SortedList.ctor_IComp#1](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.SortedList.ctor_IComp/CS/source.cs#1)]\\n [!code-vb[Generic.SortedList.ctor_IComp#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.SortedList.ctor_IComp/VB/source.vb#1)]\"\n  syntax:\n    content: public SortedList (System.Collections.Generic.IComparer<TKey> comparer);\n    parameters:\n    - id: comparer\n      type: System.Collections.Generic.IComparer{TKey}\n      description: \"The <xref href=\\\"System.Collections.Generic.IComparer`1\\\"></xref> implementation to use when comparing keys.  \\n  \\n -or-  \\n  \\n `null` to use the default <xref href=\\\"System.Collections.Generic.Comparer`1\\\"></xref> for the type of the key.\"\n  overload: System.Collections.Generic.SortedList`2.#ctor*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/SortedList`2.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.Generic.SortedList`2.#ctor(System.Collections.Generic.IDictionary{`0,`1})\n  commentId: M:System.Collections.Generic.SortedList`2.#ctor(System.Collections.Generic.IDictionary{`0,`1})\n  id: '#ctor(System.Collections.Generic.IDictionary{`0,`1})'\n  parent: System.Collections.Generic.SortedList`2\n  langs:\n  - csharp\n  name: SortedList<TKey,TValue>(IDictionary<TKey,TValue>)\n  nameWithType: SortedList<TKey,TValue>.SortedList<TKey,TValue>(IDictionary<TKey,TValue>)\n  fullName: SortedList<TKey,TValue>.SortedList<TKey,TValue>(IDictionary<TKey,TValue>)\n  type: Constructor\n  assemblies:\n  - System.Collections\n  - System\n  - netstandard\n  namespace: System.Collections.Generic\n  summary: Initializes a new instance of the <xref href=\"System.Collections.Generic.SortedList`2\"></xref> class that contains elements copied from the specified <xref href=\"System.Collections.Generic.IDictionary`2\"></xref>, has sufficient capacity to accommodate the number of elements copied, and uses the default <xref href=\"System.Collections.Generic.IComparer`1\"></xref>.\n  remarks: \"Every key in a <xref:System.Collections.Generic.SortedList%602> must be unique according to the default comparer; likewise, every key in the source `dictionary` must also be unique according to the default comparer.  \\n  \\n The capacity of the new <xref:System.Collections.Generic.SortedList%602> is set to the number of elements in `dictionary`, so no resizing takes place while the list is being populated.  \\n  \\n This constructor uses the default comparer for `TKey`. To specify a comparer, use the <xref:System.Collections.Generic.SortedList%602.%23ctor%28System.Collections.Generic.IDictionary%7B%600%2C%601%7D%2CSystem.Collections.Generic.IComparer%7B%600%7D%29> constructor. The default comparer <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=fullName> checks whether the key type `TKey` implements <xref:System.IComparable%601?displayProperty=fullName> and uses that implementation, if available.  If not, <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=fullName> checks whether the key type `TKey` implements <xref:System.IComparable?displayProperty=fullName>.  If the key type `TKey` does not implement either interface, you can specify a <xref:System.Collections.Generic.IComparer%601?displayProperty=fullName> implementation in a constructor overload that accepts a `comparer` parameter.  \\n  \\n If the data in `dictionary` are sorted, this constructor is an O(`n`) operation, where `n` is the number of elements in `dictionary`. Otherwise it is an O(`n`*`n`) operation.\"\n  example:\n  - \"The following code example shows how to use <xref:System.Collections.Generic.SortedList%602> to create a sorted copy of the information in a <xref:System.Collections.Generic.Dictionary%602>, by passing the <xref:System.Collections.Generic.Dictionary%602> to the <xref:System.Collections.Generic.SortedList%602.%23ctor%28System.Collections.Generic.IDictionary%7B%600%2C%601%7D%29> constructor.  \\n  \\n [!code-csharp[Generic.SortedList.ctor_IDic#1](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.SortedList.ctor_IDic/CS/source.cs#1)]\\n [!code-vb[Generic.SortedList.ctor_IDic#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.SortedList.ctor_IDic/VB/source.vb#1)]\"\n  syntax:\n    content: public SortedList (System.Collections.Generic.IDictionary<TKey,TValue> dictionary);\n    parameters:\n    - id: dictionary\n      type: System.Collections.Generic.IDictionary`2\n      description: The <xref href=\"System.Collections.Generic.IDictionary`2\"></xref> whose elements are copied to the new <xref href=\"System.Collections.Generic.SortedList`2\"></xref>.\n  overload: System.Collections.Generic.SortedList`2.#ctor*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>dictionary</code> is `null`.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>dictionary</code> contains one or more duplicate keys.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/SortedList`2.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.Generic.SortedList`2.#ctor(System.Int32)\n  commentId: M:System.Collections.Generic.SortedList`2.#ctor(System.Int32)\n  id: '#ctor(System.Int32)'\n  parent: System.Collections.Generic.SortedList`2\n  langs:\n  - csharp\n  name: SortedList<TKey,TValue>(Int32)\n  nameWithType: SortedList<TKey,TValue>.SortedList<TKey,TValue>(Int32)\n  fullName: SortedList<TKey,TValue>.SortedList<TKey,TValue>(Int32)\n  type: Constructor\n  assemblies:\n  - System.Collections\n  - System\n  - netstandard\n  namespace: System.Collections.Generic\n  summary: Initializes a new instance of the <xref href=\"System.Collections.Generic.SortedList`2\"></xref> class that is empty, has the specified initial capacity, and uses the default <xref href=\"System.Collections.Generic.IComparer`1\"></xref>.\n  remarks: \"Every key in a <xref:System.Collections.Generic.SortedList%602> must be unique according to the default comparer.  \\n  \\n The capacity of a <xref:System.Collections.Generic.SortedList%602> is the number of elements that the <xref:System.Collections.Generic.SortedList%602> can hold before resizing. As elements are added to a <xref:System.Collections.Generic.SortedList%602>, the capacity is automatically increased as required by reallocating the internal array.  \\n  \\n If the size of the collection can be estimated, specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <xref:System.Collections.Generic.SortedList%602>.  \\n  \\n The capacity can be decreased by calling <xref:System.Collections.Generic.SortedList%602.TrimExcess%2A> or by setting the <xref:System.Collections.Generic.SortedList%602.Capacity%2A> property explicitly. Decreasing the capacity reallocates memory and copies all the elements in the <xref:System.Collections.Generic.SortedList%602>.  \\n  \\n This constructor uses the default comparer for `TKey`. To specify a comparer, use the <xref:System.Collections.Generic.SortedList%602.%23ctor%28System.Int32%2CSystem.Collections.Generic.IComparer%7B%600%7D%29> constructor. The default comparer <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=fullName> checks whether the key type `TKey` implements <xref:System.IComparable%601?displayProperty=fullName> and uses that implementation, if available.  If not, <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=fullName> checks whether the key type `TKey` implements <xref:System.IComparable?displayProperty=fullName>.  If the key type `TKey` does not implement either interface, you can specify a <xref:System.Collections.Generic.IComparer%601?displayProperty=fullName> implementation in a constructor overload that accepts a `comparer` parameter.  \\n  \\n This constructor is an O(`n`) operation, where `n` is `capacity`.\"\n  example:\n  - \"The following code example creates a sorted list with an initial capacity of 4 and populates it with 4 entries.  \\n  \\n [!code-csharp[Generic.SortedList.ctor_Int32#1](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.SortedList.ctor_Int32/CS/source.cs#1)]\\n [!code-vb[Generic.SortedList.ctor_Int32#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.SortedList.ctor_Int32/VB/source.vb#1)]\"\n  syntax:\n    content: public SortedList (int capacity);\n    parameters:\n    - id: capacity\n      type: System.Int32\n      description: The initial number of elements that the <xref href=\"System.Collections.Generic.SortedList`2\"></xref> can contain.\n  overload: System.Collections.Generic.SortedList`2.#ctor*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>capacity</code> is less than zero.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/SortedList`2.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.Generic.SortedList`2.#ctor(System.Collections.Generic.IDictionary{`0,`1},System.Collections.Generic.IComparer{`0})\n  commentId: M:System.Collections.Generic.SortedList`2.#ctor(System.Collections.Generic.IDictionary{`0,`1},System.Collections.Generic.IComparer{`0})\n  id: '#ctor(System.Collections.Generic.IDictionary{`0,`1},System.Collections.Generic.IComparer{`0})'\n  parent: System.Collections.Generic.SortedList`2\n  langs:\n  - csharp\n  name: SortedList<TKey,TValue>(IDictionary<TKey,TValue>, IComparer<TKey>)\n  nameWithType: SortedList<TKey,TValue>.SortedList<TKey,TValue>(IDictionary<TKey,TValue>, IComparer<TKey>)\n  fullName: SortedList<TKey,TValue>.SortedList<TKey,TValue>(IDictionary<TKey,TValue>, IComparer<TKey>)\n  type: Constructor\n  assemblies:\n  - System.Collections\n  - System\n  - netstandard\n  namespace: System.Collections.Generic\n  summary: Initializes a new instance of the <xref href=\"System.Collections.Generic.SortedList`2\"></xref> class that contains elements copied from the specified <xref href=\"System.Collections.Generic.IDictionary`2\"></xref>, has sufficient capacity to accommodate the number of elements copied, and uses the specified <xref href=\"System.Collections.Generic.IComparer`1\"></xref>.\n  remarks: \"Every key in a <xref:System.Collections.Generic.SortedList%602> must be unique according to the specified comparer; likewise, every key in the source `dictionary` must also be unique according to the specified comparer.  \\n  \\n The capacity of the new <xref:System.Collections.Generic.SortedList%602> is set to the number of elements in `dictionary`, so no resizing takes place while the list is being populated.  \\n  \\n If the data in `dictionary` are sorted, this constructor is an O(`n`) operation, where `n` is the number of elements in `dictionary`. Otherwise it is an O(`n`*`n`) operation.\"\n  example:\n  - \"The following code example shows how to use <xref:System.Collections.Generic.SortedList%602> to create a case-insensitive sorted copy of the information in a case-insensitive <xref:System.Collections.Generic.Dictionary%602>, by passing the <xref:System.Collections.Generic.Dictionary%602> to the <xref:System.Collections.Generic.SortedList%602.%23ctor%28System.Collections.Generic.IDictionary%7B%600%2C%601%7D%2CSystem.Collections.Generic.IComparer%7B%600%7D%29> constructor. In this example, the case-insensitive comparers are for the current culture.  \\n  \\n [!code-csharp[Generic.SortedList.ctor_IDicIComp#1](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.SortedList.ctor_IDicIComp/CS/source.cs#1)]\\n [!code-vb[Generic.SortedList.ctor_IDicIComp#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.SortedList.ctor_IDicIComp/VB/source.vb#1)]\"\n  syntax:\n    content: public SortedList (System.Collections.Generic.IDictionary<TKey,TValue> dictionary, System.Collections.Generic.IComparer<TKey> comparer);\n    parameters:\n    - id: dictionary\n      type: System.Collections.Generic.IDictionary`2\n      description: The <xref href=\"System.Collections.Generic.IDictionary`2\"></xref> whose elements are copied to the new <xref href=\"System.Collections.Generic.SortedList`2\"></xref>.\n    - id: comparer\n      type: System.Collections.Generic.IComparer{TKey}\n      description: \"The <xref href=\\\"System.Collections.Generic.IComparer`1\\\"></xref> implementation to use when comparing keys.  \\n  \\n -or-  \\n  \\n `null` to use the default <xref href=\\\"System.Collections.Generic.Comparer`1\\\"></xref> for the type of the key.\"\n  overload: System.Collections.Generic.SortedList`2.#ctor*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>dictionary</code> is `null`.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>dictionary</code> contains one or more duplicate keys.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/SortedList`2.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.Generic.SortedList`2.#ctor(System.Int32,System.Collections.Generic.IComparer{`0})\n  commentId: M:System.Collections.Generic.SortedList`2.#ctor(System.Int32,System.Collections.Generic.IComparer{`0})\n  id: '#ctor(System.Int32,System.Collections.Generic.IComparer{`0})'\n  parent: System.Collections.Generic.SortedList`2\n  langs:\n  - csharp\n  name: SortedList<TKey,TValue>(Int32, IComparer<TKey>)\n  nameWithType: SortedList<TKey,TValue>.SortedList<TKey,TValue>(Int32, IComparer<TKey>)\n  fullName: SortedList<TKey,TValue>.SortedList<TKey,TValue>(Int32, IComparer<TKey>)\n  type: Constructor\n  assemblies:\n  - System.Collections\n  - System\n  - netstandard\n  namespace: System.Collections.Generic\n  summary: Initializes a new instance of the <xref href=\"System.Collections.Generic.SortedList`2\"></xref> class that is empty, has the specified initial capacity, and uses the specified <xref href=\"System.Collections.Generic.IComparer`1\"></xref>.\n  remarks: \"Every key in a <xref:System.Collections.Generic.SortedList%602> must be unique according to the specified comparer.  \\n  \\n The capacity of a <xref:System.Collections.Generic.SortedList%602> is the number of elements that the <xref:System.Collections.Generic.SortedList%602> can hold before resizing. As elements are added to a <xref:System.Collections.Generic.SortedList%602>, the capacity is automatically increased as required by reallocating the internal array.  \\n  \\n If the size of the collection can be estimated, specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <xref:System.Collections.Generic.SortedList%602>.  \\n  \\n The capacity can be decreased by calling <xref:System.Collections.Generic.SortedList%602.TrimExcess%2A> or by setting the <xref:System.Collections.Generic.SortedList%602.Capacity%2A> property explicitly. Decreasing the capacity reallocates memory and copies all the elements in the <xref:System.Collections.Generic.SortedList%602>.  \\n  \\n This constructor is an O(`n`) operation, where `n` is `capacity`.\"\n  example:\n  - \"The following code example creates a sorted list with an initial capacity of 5 and a case-insensitive comparer for the current culture. The example adds four elements, some with lower-case keys and some with upper-case keys. The example then attempts to add an element with a key that differs from an existing key only by case, catches the resulting exception, and displays an error message. Finally, the example displays the elements in case-insensitive sort order.  \\n  \\n [!code-csharp[Generic.SortedList.ctor_Int32IComp#1](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.SortedList.ctor_Int32IComp/CS/source.cs#1)]\\n [!code-vb[Generic.SortedList.ctor_Int32IComp#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.SortedList.ctor_Int32IComp/VB/source.vb#1)]\"\n  syntax:\n    content: public SortedList (int capacity, System.Collections.Generic.IComparer<TKey> comparer);\n    parameters:\n    - id: capacity\n      type: System.Int32\n      description: The initial number of elements that the <xref href=\"System.Collections.Generic.SortedList`2\"></xref> can contain.\n    - id: comparer\n      type: System.Collections.Generic.IComparer{TKey}\n      description: \"The <xref href=\\\"System.Collections.Generic.IComparer`1\\\"></xref> implementation to use when comparing keys.  \\n  \\n -or-  \\n  \\n `null` to use the default <xref href=\\\"System.Collections.Generic.Comparer`1\\\"></xref> for the type of the key.\"\n  overload: System.Collections.Generic.SortedList`2.#ctor*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>capacity</code> is less than zero.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/SortedList`2.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.Generic.SortedList`2.Add(`0,`1)\n  commentId: M:System.Collections.Generic.SortedList`2.Add(`0,`1)\n  id: Add(`0,`1)\n  parent: System.Collections.Generic.SortedList`2\n  langs:\n  - csharp\n  name: Add(TKey, TValue)\n  nameWithType: SortedList<TKey,TValue>.Add(TKey, TValue)\n  fullName: SortedList<TKey,TValue>.Add(TKey, TValue)\n  type: Method\n  assemblies:\n  - System.Collections\n  - System\n  - netstandard\n  namespace: System.Collections.Generic\n  summary: Adds an element with the specified key and value into the <xref href=\"System.Collections.Generic.SortedList`2\"></xref>.\n  remarks: \"A key cannot be `null`, but a value can be, if the type of values in the sorted list, `TValue`, is a reference type.  \\n  \\n You can also use the <xref:System.Collections.Generic.SortedList%602.Item%2A> property to add new elements by setting the value of a key that does not exist in the <xref:System.Collections.Generic.SortedList%602>; for example, `myCollection[\\\"myNonexistentKey\\\"] = myValue`. However, if the specified key already exists in the <xref:System.Collections.Generic.SortedList%602>, setting the <xref:System.Collections.Generic.SortedList%602.Item%2A> property overwrites the old value. In contrast, the <xref:System.Collections.Generic.SortedList%602.Add%2A> method does not modify existing elements.  \\n  \\n If <xref:System.Collections.Generic.SortedList%602.Count%2A> already equals <xref:System.Collections.Generic.SortedList%602.Capacity%2A>, the capacity of the <xref:System.Collections.Generic.SortedList%602> is increased by automatically reallocating the internal array, and the existing elements are copied to the new array before the new element is added.  \\n  \\n This method is an O(`n`) operation for unsorted data, where `n` is <xref:System.Collections.Generic.SortedList%602.Count%2A>. It is an O(log `n`) operation if the new element is added at the end of the list. If insertion causes a resize, the operation is O(`n`).\"\n  example:\n  - \"The following code example creates an empty <xref:System.Collections.Generic.SortedList%602> of strings with string keys and uses the <xref:System.Collections.Generic.SortedList%602.Add%2A> method to add some elements. The example demonstrates that the <xref:System.Collections.Generic.SortedList%602.Add%2A> method throws an <xref:System.ArgumentException> when attempting to add a duplicate key.  \\n  \\n This code example is part of a larger example provided for the <xref:System.Collections.Generic.SortedList%602> class.  \\n  \\n [!code-cpp[Generic.SortedList#2](~/samples/snippets/cpp/VS_Snippets_CLR/Generic.SortedList/cpp/source.cpp#2)]\\n [!code-csharp[Generic.SortedList#2](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.SortedList/CS/source.cs#2)]\\n [!code-vb[Generic.SortedList#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.SortedList/VB/source.vb#2)]\"\n  syntax:\n    content: public void Add (TKey key, TValue value);\n    parameters:\n    - id: key\n      type: TKey\n      description: The key of the element to add.\n    - id: value\n      type: TValue\n      description: The value of the element to add. The value can be `null` for reference types.\n  overload: System.Collections.Generic.SortedList`2.Add*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>key</code> is `null`.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: An element with the same key already exists in the <xref href=\"System.Collections.Generic.SortedList`2\"></xref>.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/SortedList`2.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.Generic.SortedList`2.Capacity\n  commentId: P:System.Collections.Generic.SortedList`2.Capacity\n  id: Capacity\n  parent: System.Collections.Generic.SortedList`2\n  langs:\n  - csharp\n  name: Capacity\n  nameWithType: SortedList<TKey,TValue>.Capacity\n  fullName: SortedList<TKey,TValue>.Capacity\n  type: Property\n  assemblies:\n  - System.Collections\n  - System\n  - netstandard\n  namespace: System.Collections.Generic\n  summary: Gets or sets the number of elements that the <xref href=\"System.Collections.Generic.SortedList`2\"></xref> can contain.\n  remarks: \"<xref:System.Collections.Generic.SortedList%602.Capacity%2A> is the number of elements that the <xref:System.Collections.Generic.SortedList%602> can store. <xref:System.Collections.Generic.SortedList%602.Count%2A> is the number of elements that are actually in the <xref:System.Collections.Generic.SortedList%602>.  \\n  \\n <xref:System.Collections.Generic.SortedList%602.Capacity%2A> is always greater than or equal to <xref:System.Collections.Generic.SortedList%602.Count%2A>. If <xref:System.Collections.Generic.SortedList%602.Count%2A> exceeds <xref:System.Collections.Generic.SortedList%602.Capacity%2A> while adding elements, the capacity is increased by automatically reallocating the internal array before copying the old elements and adding the new elements.  \\n  \\n The capacity can be decreased by calling <xref:System.Collections.Generic.SortedList%602.TrimExcess%2A> or by setting the <xref:System.Collections.Generic.SortedList%602.Capacity%2A> property explicitly. When the value of <xref:System.Collections.Generic.SortedList%602.Capacity%2A> is set explicitly, the internal array is also reallocated to accommodate the specified capacity.  \\n  \\n Retrieving the value of this property is an O(1) operation; setting the property is an O(`n`) operation, where `n` is the new capacity.\"\n  syntax:\n    content: public int Capacity { get; set; }\n    return:\n      type: System.Int32\n      description: The number of elements that the <xref href=\"System.Collections.Generic.SortedList`2\"></xref> can contain.\n  overload: System.Collections.Generic.SortedList`2.Capacity*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <xref href=\"System.Collections.Generic.SortedList`2.Capacity\"></xref> is set to a value that is less than <xref href=\"System.Collections.Generic.SortedList`2.Count\"></xref>.\n  - type: System.OutOfMemoryException\n    commentId: T:System.OutOfMemoryException\n    description: There is not enough memory available on the system.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/SortedList`2.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.Generic.SortedList`2.Clear\n  commentId: M:System.Collections.Generic.SortedList`2.Clear\n  id: Clear\n  parent: System.Collections.Generic.SortedList`2\n  langs:\n  - csharp\n  name: Clear()\n  nameWithType: SortedList<TKey,TValue>.Clear()\n  fullName: SortedList<TKey,TValue>.Clear()\n  type: Method\n  assemblies:\n  - System.Collections\n  - System\n  - netstandard\n  namespace: System.Collections.Generic\n  summary: Removes all elements from the <xref href=\"System.Collections.Generic.SortedList`2\"></xref>.\n  remarks: \"<xref:System.Collections.Generic.SortedList%602.Count%2A> is set to zero, and references to other objects from elements of the collection are also released.  \\n  \\n <xref:System.Collections.Generic.SortedList%602.Capacity%2A> remains unchanged. To reset the capacity of the <xref:System.Collections.Generic.SortedList%602>, call <xref:System.Collections.Generic.SortedList%602.TrimExcess%2A> or set the <xref:System.Collections.Generic.SortedList%602.Capacity%2A> property directly. Trimming an empty <xref:System.Collections.Generic.SortedList%602> sets the capacity of the <xref:System.Collections.Generic.SortedList%602> to the default capacity.  \\n  \\n This method is an O(`n`) operation, where `n` is <xref:System.Collections.Generic.SortedList%602.Count%2A>.\"\n  syntax:\n    content: public void Clear ();\n    parameters: []\n  overload: System.Collections.Generic.SortedList`2.Clear*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/SortedList`2.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.Generic.SortedList`2.Comparer\n  commentId: P:System.Collections.Generic.SortedList`2.Comparer\n  id: Comparer\n  parent: System.Collections.Generic.SortedList`2\n  langs:\n  - csharp\n  name: Comparer\n  nameWithType: SortedList<TKey,TValue>.Comparer\n  fullName: SortedList<TKey,TValue>.Comparer\n  type: Property\n  assemblies:\n  - System.Collections\n  - System\n  - netstandard\n  namespace: System.Collections.Generic\n  summary: Gets the <xref href=\"System.Collections.Generic.IComparer`1\"></xref> for the sorted list.\n  remarks: Retrieving the value of this property is an O(1) operation.\n  syntax:\n    content: public System.Collections.Generic.IComparer<TKey> Comparer { get; }\n    return:\n      type: System.Collections.Generic.IComparer{TKey}\n      description: The <xref href=\"System.IComparable`1\"></xref> for the current <xref href=\"System.Collections.Generic.SortedList`2\"></xref>.\n  overload: System.Collections.Generic.SortedList`2.Comparer*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/SortedList`2.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.Generic.SortedList`2.ContainsKey(`0)\n  commentId: M:System.Collections.Generic.SortedList`2.ContainsKey(`0)\n  id: ContainsKey(`0)\n  parent: System.Collections.Generic.SortedList`2\n  langs:\n  - csharp\n  name: ContainsKey(TKey)\n  nameWithType: SortedList<TKey,TValue>.ContainsKey(TKey)\n  fullName: SortedList<TKey,TValue>.ContainsKey(TKey)\n  type: Method\n  assemblies:\n  - System.Collections\n  - System\n  - netstandard\n  namespace: System.Collections.Generic\n  summary: Determines whether the <xref href=\"System.Collections.Generic.SortedList`2\"></xref> contains a specific key.\n  remarks: This method is an O(log `n`) operation, where `n` is <xref:System.Collections.Generic.SortedList%602.Count%2A>.\n  example:\n  - \"The following code example shows how to use the <xref:System.Collections.Generic.SortedList%602.ContainsKey%2A> method to test whether a key exists prior to calling the <xref:System.Collections.Generic.SortedList%602.Add%2A> method. It also shows how to use the <xref:System.Collections.Generic.SortedList%602.TryGetValue%2A> method to retrieve values, which is an efficient way to retrieve values when a program frequently tries keys that are not in the sorted list. Finally, it shows the least efficient way to test whether keys exist, by using the <xref:System.Collections.Generic.SortedList%602.Item%2A> property (the indexer in C#).  \\n  \\n This code example is part of a larger example provided for the <xref:System.Collections.Generic.SortedList%602> class.  \\n  \\n [!code-cpp[Generic.SortedList#6](~/samples/snippets/cpp/VS_Snippets_CLR/Generic.SortedList/cpp/source.cpp#6)]\\n [!code-csharp[Generic.SortedList#6](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.SortedList/CS/source.cs#6)]\\n [!code-vb[Generic.SortedList#6](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.SortedList/VB/source.vb#6)]  \\n[!code-cpp[Generic.SortedList#5](~/samples/snippets/cpp/VS_Snippets_CLR/Generic.SortedList/cpp/source.cpp#5)]\\n[!code-csharp[Generic.SortedList#5](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.SortedList/CS/source.cs#5)]\\n[!code-vb[Generic.SortedList#5](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.SortedList/VB/source.vb#5)]  \\n[!code-cpp[Generic.SortedList#4](~/samples/snippets/cpp/VS_Snippets_CLR/Generic.SortedList/cpp/source.cpp#4)]\\n[!code-csharp[Generic.SortedList#4](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.SortedList/CS/source.cs#4)]\\n[!code-vb[Generic.SortedList#4](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.SortedList/VB/source.vb#4)]\"\n  syntax:\n    content: public bool ContainsKey (TKey key);\n    parameters:\n    - id: key\n      type: TKey\n      description: The key to locate in the <xref href=\"System.Collections.Generic.SortedList`2\"></xref>.\n    return:\n      type: System.Boolean\n      description: '`true` if the <xref href=\"System.Collections.Generic.SortedList`2\"></xref> contains an element with the specified key; otherwise, `false`.'\n  overload: System.Collections.Generic.SortedList`2.ContainsKey*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>key</code> is `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/SortedList`2.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.Generic.SortedList`2.ContainsValue(`1)\n  commentId: M:System.Collections.Generic.SortedList`2.ContainsValue(`1)\n  id: ContainsValue(`1)\n  parent: System.Collections.Generic.SortedList`2\n  langs:\n  - csharp\n  name: ContainsValue(TValue)\n  nameWithType: SortedList<TKey,TValue>.ContainsValue(TValue)\n  fullName: SortedList<TKey,TValue>.ContainsValue(TValue)\n  type: Method\n  assemblies:\n  - System.Collections\n  - System\n  - netstandard\n  namespace: System.Collections.Generic\n  summary: Determines whether the <xref href=\"System.Collections.Generic.SortedList`2\"></xref> contains a specific value.\n  remarks: \"This method determines equality using the default comparer <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=fullName> for the value type `TValue`.  <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=fullName> checks whether the value type `TValue` implements <xref:System.IComparable%601?displayProperty=fullName> and uses that implementation, if available.  If not, <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=fullName> checks whether the value type `TValue` implements <xref:System.IComparable?displayProperty=fullName>.  If the value type `TValue` does not implement either interface, this method uses <xref:System.Object.Equals%2A?displayProperty=fullName>.  \\n  \\n This method performs a linear search; therefore, the average execution time is proportional to <xref:System.Collections.Generic.SortedList%602.Count%2A>. That is, this method is an O(`n`) operation, where `n` is <xref:System.Collections.Generic.SortedList%602.Count%2A>.\"\n  syntax:\n    content: public bool ContainsValue (TValue value);\n    parameters:\n    - id: value\n      type: TValue\n      description: The value to locate in the <xref href=\"System.Collections.Generic.SortedList`2\"></xref>. The value can be `null` for reference types.\n    return:\n      type: System.Boolean\n      description: '`true` if the <xref href=\"System.Collections.Generic.SortedList`2\"></xref> contains an element with the specified value; otherwise, `false`.'\n  overload: System.Collections.Generic.SortedList`2.ContainsValue*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/SortedList`2.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.Generic.SortedList`2.Count\n  commentId: P:System.Collections.Generic.SortedList`2.Count\n  id: Count\n  parent: System.Collections.Generic.SortedList`2\n  langs:\n  - csharp\n  name: Count\n  nameWithType: SortedList<TKey,TValue>.Count\n  fullName: SortedList<TKey,TValue>.Count\n  type: Property\n  assemblies:\n  - System.Collections\n  - System\n  - netstandard\n  namespace: System.Collections.Generic\n  summary: Gets the number of key/value pairs contained in the <xref href=\"System.Collections.Generic.SortedList`2\"></xref>.\n  remarks: \"<xref:System.Collections.Generic.SortedList%602.Capacity%2A> is the number of elements that the <xref:System.Collections.Generic.SortedList%602> can store. <xref:System.Collections.Generic.SortedList%602.Count%2A> is the number of elements that are actually in the <xref:System.Collections.Generic.SortedList%602>.  \\n  \\n <xref:System.Collections.Generic.SortedList%602.Capacity%2A> is always greater than or equal to <xref:System.Collections.Generic.SortedList%602.Count%2A>. If <xref:System.Collections.Generic.SortedList%602.Count%2A> exceeds <xref:System.Collections.Generic.SortedList%602.Capacity%2A> while adding elements, the capacity is increased by automatically reallocating the internal array before copying the old elements and adding the new elements.  \\n  \\n Retrieving the value of this property is an O(1) operation.\"\n  syntax:\n    content: public int Count { get; }\n    return:\n      type: System.Int32\n      description: The number of key/value pairs contained in the <xref href=\"System.Collections.Generic.SortedList`2\"></xref>.\n  overload: System.Collections.Generic.SortedList`2.Count*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/SortedList`2.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.Generic.SortedList`2.GetEnumerator\n  commentId: M:System.Collections.Generic.SortedList`2.GetEnumerator\n  id: GetEnumerator\n  parent: System.Collections.Generic.SortedList`2\n  langs:\n  - csharp\n  name: GetEnumerator()\n  nameWithType: SortedList<TKey,TValue>.GetEnumerator()\n  fullName: SortedList<TKey,TValue>.GetEnumerator()\n  type: Method\n  assemblies:\n  - System.Collections\n  - System\n  - netstandard\n  namespace: System.Collections.Generic\n  summary: Returns an enumerator that iterates through the <xref href=\"System.Collections.Generic.SortedList`2\"></xref>.\n  remarks: \"The `foreach` statement of the C# language (`for each` in C++, `For Each` in Visual Basic) hides the complexity of the enumerators.  Therefore, using `foreach` is recommended, instead of directly manipulating the enumerator.  \\n  \\n Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.  \\n  \\n The dictionary is maintained in a sorted order using an internal tree. Every new element is positioned at the correct sort position, and the tree is adjusted to maintain the sort order whenever an element is removed. While enumerating, the sort order is maintained.  \\n  \\n Initially, the enumerator is positioned before the first element in the collection. At this position, <xref:System.Collections.Generic.IEnumerator%601.Current%2A> is undefined. Therefore, you must call <xref:System.Collections.IEnumerator.MoveNext%2A> to advance the enumerator to the first element of the collection before reading the value of <xref:System.Collections.Generic.IEnumerator%601.Current%2A>.  \\n  \\n <xref:System.Collections.Generic.IEnumerator%601.Current%2A> returns the same object until <xref:System.Collections.IEnumerator.MoveNext%2A> is called. <xref:System.Collections.IEnumerator.MoveNext%2A> sets <xref:System.Collections.Generic.IEnumerator%601.Current%2A> to the next element.  \\n  \\n If <xref:System.Collections.IEnumerator.MoveNext%2A> passes the end of the collection, the enumerator is positioned after the last element in the collection and <xref:System.Collections.IEnumerator.MoveNext%2A> returns `false`. When the enumerator is at this position, subsequent calls to <xref:System.Collections.IEnumerator.MoveNext%2A> return `false`. If the last call to <xref:System.Collections.IEnumerator.MoveNext%2A> returned `false`, <xref:System.Collections.Generic.IEnumerator%601.Current%2A> is undefined. You cannot set <xref:System.Collections.Generic.IEnumerator%601.Current%2A> to the first element of the collection again; you must create a new enumerator instance instead.  \\n  \\n An enumerator remains valid as long as the collection remains unchanged. If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and its behavior is undefined.  \\n  \\n The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure. To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.  To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.  \\n  \\n Default implementations of collections in <xref:System.Collections.Generic?displayProperty=fullName> are not synchronized.  \\n  \\n This method is an O(1) operation.\"\n  syntax:\n    content: public System.Collections.Generic.IEnumerator<System.Collections.Generic.KeyValuePair<TKey,TValue>> GetEnumerator ();\n    parameters: []\n    return:\n      type: System.Collections.Generic.IEnumerator{System.Collections.Generic.KeyValuePair{TKey,TValue}}\n      description: An <xref href=\"System.Collections.Generic.IEnumerator`1\"></xref> of type <xref href=\"System.Collections.Generic.KeyValuePair`2\"></xref> for the <xref href=\"System.Collections.Generic.SortedList`2\"></xref>.\n  overload: System.Collections.Generic.SortedList`2.GetEnumerator*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/SortedList`2.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.Generic.SortedList`2.IndexOfKey(`0)\n  commentId: M:System.Collections.Generic.SortedList`2.IndexOfKey(`0)\n  id: IndexOfKey(`0)\n  parent: System.Collections.Generic.SortedList`2\n  langs:\n  - csharp\n  name: IndexOfKey(TKey)\n  nameWithType: SortedList<TKey,TValue>.IndexOfKey(TKey)\n  fullName: SortedList<TKey,TValue>.IndexOfKey(TKey)\n  type: Method\n  assemblies:\n  - System.Collections\n  - System\n  - netstandard\n  namespace: System.Collections.Generic\n  summary: Searches for the specified key and returns the zero-based index within the entire <xref href=\"System.Collections.Generic.SortedList`2\"></xref>.\n  remarks: This method performs a binary search; therefore, this method is an O(log `n`) operation, where `n` is <xref:System.Collections.Generic.SortedList%602.Count%2A>.\n  syntax:\n    content: public int IndexOfKey (TKey key);\n    parameters:\n    - id: key\n      type: TKey\n      description: The key to locate in the <xref href=\"System.Collections.Generic.SortedList`2\"></xref>.\n    return:\n      type: System.Int32\n      description: The zero-based index of <code>key</code> within the entire <xref href=\"System.Collections.Generic.SortedList`2\"></xref>, if found; otherwise, -1.\n  overload: System.Collections.Generic.SortedList`2.IndexOfKey*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>key</code> is `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/SortedList`2.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.Generic.SortedList`2.IndexOfValue(`1)\n  commentId: M:System.Collections.Generic.SortedList`2.IndexOfValue(`1)\n  id: IndexOfValue(`1)\n  parent: System.Collections.Generic.SortedList`2\n  langs:\n  - csharp\n  name: IndexOfValue(TValue)\n  nameWithType: SortedList<TKey,TValue>.IndexOfValue(TValue)\n  fullName: SortedList<TKey,TValue>.IndexOfValue(TValue)\n  type: Method\n  assemblies:\n  - System.Collections\n  - System\n  - netstandard\n  namespace: System.Collections.Generic\n  summary: Searches for the specified value and returns the zero-based index of the first occurrence within the entire <xref href=\"System.Collections.Generic.SortedList`2\"></xref>.\n  remarks: \"This method determines equality using the default comparer <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=fullName> for the value type `TValue`.  <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=fullName> checks whether the value type `TValue` implements <xref:System.IComparable%601?displayProperty=fullName> and uses that implementation, if available.  If not, <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=fullName> checks whether the value type `TValue` implements <xref:System.IComparable?displayProperty=fullName>.  If the value type `TValue` does not implement either interface, this method uses <xref:System.Object.Equals%2A?displayProperty=fullName>.  \\n  \\n This method performs a linear search; therefore, the average execution time is proportional to <xref:System.Collections.Generic.SortedList%602.Count%2A>. That is, this method is an O(`n`) operation, where `n` is <xref:System.Collections.Generic.SortedList%602.Count%2A>.\"\n  syntax:\n    content: public int IndexOfValue (TValue value);\n    parameters:\n    - id: value\n      type: TValue\n      description: The value to locate in the <xref href=\"System.Collections.Generic.SortedList`2\"></xref>.  The value can be `null` for reference types.\n    return:\n      type: System.Int32\n      description: The zero-based index of the first occurrence of <code>value</code> within the entire <xref href=\"System.Collections.Generic.SortedList`2\"></xref>, if found; otherwise, -1.\n  overload: System.Collections.Generic.SortedList`2.IndexOfValue*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/SortedList`2.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.Generic.SortedList`2.Item(`0)\n  commentId: P:System.Collections.Generic.SortedList`2.Item(`0)\n  id: Item(`0)\n  parent: System.Collections.Generic.SortedList`2\n  langs:\n  - csharp\n  name: Item(TKey)\n  nameWithType: SortedList<TKey,TValue>.Item(TKey)\n  fullName: SortedList<TKey,TValue>.Item(TKey)\n  type: Property\n  assemblies:\n  - System.Collections\n  - System\n  - netstandard\n  namespace: System.Collections.Generic\n  summary: Gets or sets the value associated with the specified key.\n  remarks: \"This property provides the ability to access a specific element in the collection by using the following syntax: `myCollection[key]`.  \\n  \\n A key cannot be `null`, but a value can be, if the type of values in the list, `TValue`, is a reference type.  \\n  \\n If the key is not found when a value is being retrieved, <xref:System.Collections.Generic.KeyNotFoundException> is thrown. If the key is not found when a value is being set, the key and value are added.  \\n  \\n You can also use the <xref:System.Collections.Generic.SortedList%602.Item%2A> property to add new elements by setting the value of a key that does not exist in the <xref:System.Collections.Generic.SortedList%602>; for example, `myCollection[\\\"myNonexistentKey\\\"] = myValue`. However, if the specified key already exists in the <xref:System.Collections.Generic.SortedList%602>, setting the <xref:System.Collections.Generic.SortedList%602.Item%2A> property overwrites the old value. In contrast, the <xref:System.Collections.Generic.SortedList%602.Add%2A> method does not modify existing elements.  \\n  \\n The C# language uses the  keyword to define the indexers instead of implementing the <xref:System.Collections.Generic.SortedList%602.Item%2A> property. Visual Basic implements <xref:System.Collections.Generic.SortedList%602.Item%2A> as a default property, which provides the same indexing functionality.  \\n  \\n Retrieving the value of this property is an O(log `n`) operation, where n is <xref:System.Collections.Generic.SortedList%602.Count%2A>. Setting the property is an O(log `n`) operation if the key is already in the <xref:System.Collections.Generic.SortedList%602>. If the key is not in the list, setting the property is an O(`n`) operation for unsorted data, or O(log `n`) if the new element is added at the end of the list. If insertion causes a resize, the operation is O(`n`).\"\n  example:\n  - \"The following code example uses the <xref:System.Collections.Generic.SortedList%602.Item%2A> property (the indexer in C#) to retrieve values, demonstrating that a <xref:System.Collections.Generic.KeyNotFoundException> is thrown when a requested key is not present, and showing that the value associated with a key can be replaced.  \\n  \\n The example also shows how to use the <xref:System.Collections.Generic.SortedList%602.TryGetValue%2A> method as a more efficient way to retrieve values if a program often must try key values that are not in the sorted list.  \\n  \\n This code example is part of a larger example provided for the <xref:System.Collections.Generic.SortedList%602> class.  \\n  \\n [!code-cpp[Generic.SortedList#3](~/samples/snippets/cpp/VS_Snippets_CLR/Generic.SortedList/cpp/source.cpp#3)]\\n [!code-csharp[Generic.SortedList#3](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.SortedList/CS/source.cs#3)]\\n [!code-vb[Generic.SortedList#3](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.SortedList/VB/source.vb#3)]  \\n[!code-cpp[Generic.SortedList#4](~/samples/snippets/cpp/VS_Snippets_CLR/Generic.SortedList/cpp/source.cpp#4)]\\n[!code-csharp[Generic.SortedList#4](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.SortedList/CS/source.cs#4)]\\n[!code-vb[Generic.SortedList#4](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.SortedList/VB/source.vb#4)]  \\n[!code-cpp[Generic.SortedList#5](~/samples/snippets/cpp/VS_Snippets_CLR/Generic.SortedList/cpp/source.cpp#5)]\\n[!code-csharp[Generic.SortedList#5](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.SortedList/CS/source.cs#5)]\\n[!code-vb[Generic.SortedList#5](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.SortedList/VB/source.vb#5)]\"\n  syntax:\n    content: public TValue this[TKey key] { get; set; }\n    parameters:\n    - id: key\n      type: TKey\n      description: The key whose value to get or set.\n    return:\n      type: TValue\n      description: The value associated with the specified key. If the specified key is not found, a get operation throws a <xref href=\"System.Collections.Generic.KeyNotFoundException\"></xref> and a set operation creates a new element using the specified key.\n  overload: System.Collections.Generic.SortedList`2.Item*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>key</code> is `null`.\n  - type: System.Collections.Generic.KeyNotFoundException\n    commentId: T:System.Collections.Generic.KeyNotFoundException\n    description: The property is retrieved and <code>key</code> does not exist in the collection.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/SortedList`2.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.Generic.SortedList`2.Keys\n  commentId: P:System.Collections.Generic.SortedList`2.Keys\n  id: Keys\n  parent: System.Collections.Generic.SortedList`2\n  langs:\n  - csharp\n  name: Keys\n  nameWithType: SortedList<TKey,TValue>.Keys\n  fullName: SortedList<TKey,TValue>.Keys\n  type: Property\n  assemblies:\n  - System.Collections\n  - System\n  - netstandard\n  namespace: System.Collections.Generic\n  summary: Gets a collection containing the keys in the <xref href=\"System.Collections.Generic.SortedList`2\"></xref>, in sorted order.\n  remarks: \"The order of the keys in the <xref:System.Collections.Generic.IList%601> is the same as the order in the <xref:System.Collections.Generic.SortedList%602>.  \\n  \\n The returned <xref:System.Collections.Generic.IList%601> is not a static copy; instead, the <xref:System.Collections.Generic.IList%601> refers back to the keys in the original <xref:System.Collections.Generic.SortedList%602>. Therefore, changes to the <xref:System.Collections.Generic.SortedList%602> continue to be reflected in the <xref:System.Collections.Generic.IList%601>.  \\n  \\n The collection returned by the <xref:System.Collections.Generic.SortedList%602.Keys%2A> property provides an efficient way to retrieve keys by index. It is not necessary to regenerate the list when the property is accessed, because the list is just a wrapper for the internal array of keys. The following code shows the use of the <xref:System.Collections.Generic.SortedList%602.Keys%2A> property for indexed retrieval of keys from a sorted list of elements with string keys:  \\n  \\n [!code-cpp[Generic.SortedList#11](~/samples/snippets/cpp/VS_Snippets_CLR/Generic.SortedList/cpp/remarks.cpp#11)]\\n [!code-csharp[Generic.SortedList#11](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.SortedList/CS/remarks.cs#11)]\\n [!code-vb[Generic.SortedList#11](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.SortedList/VB/remarks.vb#11)]  \\n  \\n Retrieving the value of this property is an O(1) operation.\"\n  example:\n  - \"The following code example shows how to enumerate the keys in the sorted list using the <xref:System.Collections.Generic.SortedList%602.Keys%2A> property, and how to enumerate the keys and values in the sorted list.  \\n  \\n The example also shows how to use the <xref:System.Collections.Generic.SortedList%602.Keys%2A> property for efficient indexed retrieval of keys.  \\n  \\n This code is part of a larger example that can be compiled and executed. See <xref:System.Collections.Generic.SortedList%602>.  \\n  \\n [!code-cpp[Generic.SortedList#9](~/samples/snippets/cpp/VS_Snippets_CLR/Generic.SortedList/cpp/source.cpp#9)]\\n [!code-csharp[Generic.SortedList#9](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.SortedList/CS/source.cs#9)]\\n [!code-vb[Generic.SortedList#9](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.SortedList/VB/source.vb#9)]  \\n[!code-cpp[Generic.SortedList#7](~/samples/snippets/cpp/VS_Snippets_CLR/Generic.SortedList/cpp/source.cpp#7)]\\n[!code-csharp[Generic.SortedList#7](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.SortedList/CS/source.cs#7)]\\n[!code-vb[Generic.SortedList#7](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.SortedList/VB/source.vb#7)]\"\n  syntax:\n    content: public System.Collections.Generic.IList<TKey> Keys { get; }\n    return:\n      type: System.Collections.Generic.IList{TKey}\n      description: A <xref href=\"System.Collections.Generic.IList`1\"></xref> containing the keys in the <xref href=\"System.Collections.Generic.SortedList`2\"></xref>.\n  overload: System.Collections.Generic.SortedList`2.Keys*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/SortedList`2.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.Generic.SortedList`2.Remove(`0)\n  commentId: M:System.Collections.Generic.SortedList`2.Remove(`0)\n  id: Remove(`0)\n  parent: System.Collections.Generic.SortedList`2\n  langs:\n  - csharp\n  name: Remove(TKey)\n  nameWithType: SortedList<TKey,TValue>.Remove(TKey)\n  fullName: SortedList<TKey,TValue>.Remove(TKey)\n  type: Method\n  assemblies:\n  - System.Collections\n  - System\n  - netstandard\n  namespace: System.Collections.Generic\n  summary: Removes the element with the specified key from the <xref href=\"System.Collections.Generic.SortedList`2\"></xref>.\n  remarks: This method performs a binary search; however, the elements are moved up to fill in the open spot, so this method is an O(`n`) operation, where `n` is <xref:System.Collections.Generic.SortedList%602.Count%2A>.\n  example:\n  - \"The following code example shows how to remove a key/value pair from the sorted list using the <xref:System.Collections.Generic.SortedList%602.Remove%2A> method.  \\n  \\n This code example is part of a larger example provided for the <xref:System.Collections.Generic.SortedList%602> class.  \\n  \\n [!code-cpp[Generic.SortedList#10](~/samples/snippets/cpp/VS_Snippets_CLR/Generic.SortedList/cpp/source.cpp#10)]\\n [!code-csharp[Generic.SortedList#10](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.SortedList/CS/source.cs#10)]\\n [!code-vb[Generic.SortedList#10](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.SortedList/VB/source.vb#10)]\"\n  syntax:\n    content: public bool Remove (TKey key);\n    parameters:\n    - id: key\n      type: TKey\n      description: The key of the element to remove.\n    return:\n      type: System.Boolean\n      description: '`true` if the element is successfully removed; otherwise, `false`.  This method also returns `false` if <code>key</code> was not found in the original <xref href=\"System.Collections.Generic.SortedList`2\"></xref>.'\n  overload: System.Collections.Generic.SortedList`2.Remove*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>key</code> is `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/SortedList`2.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.Generic.SortedList`2.RemoveAt(System.Int32)\n  commentId: M:System.Collections.Generic.SortedList`2.RemoveAt(System.Int32)\n  id: RemoveAt(System.Int32)\n  parent: System.Collections.Generic.SortedList`2\n  langs:\n  - csharp\n  name: RemoveAt(Int32)\n  nameWithType: SortedList<TKey,TValue>.RemoveAt(Int32)\n  fullName: SortedList<TKey,TValue>.RemoveAt(Int32)\n  type: Method\n  assemblies:\n  - System.Collections\n  - System\n  - netstandard\n  namespace: System.Collections.Generic\n  summary: Removes the element at the specified index of the <xref href=\"System.Collections.Generic.SortedList`2\"></xref>.\n  remarks: This method performs a binary search; however, the elements are moved up to fill in the open spot, so this method is an O(`n`) operation, where `n` is <xref:System.Collections.Generic.SortedList%602.Count%2A>.\n  syntax:\n    content: public void RemoveAt (int index);\n    parameters:\n    - id: index\n      type: System.Int32\n      description: The zero-based index of the element to remove.\n  overload: System.Collections.Generic.SortedList`2.RemoveAt*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"<code>index</code> is less than zero.  \\n  \\n -or-  \\n  \\n <code>index</code> is equal to or greater than <xref href=\\\"System.Collections.Generic.SortedList`2.Count\\\"></xref>.\"\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/SortedList`2.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.Generic.SortedList`2.TrimExcess\n  commentId: M:System.Collections.Generic.SortedList`2.TrimExcess\n  id: TrimExcess\n  parent: System.Collections.Generic.SortedList`2\n  langs:\n  - csharp\n  name: TrimExcess()\n  nameWithType: SortedList<TKey,TValue>.TrimExcess()\n  fullName: SortedList<TKey,TValue>.TrimExcess()\n  type: Method\n  assemblies:\n  - System.Collections\n  - System\n  - netstandard\n  namespace: System.Collections.Generic\n  summary: Sets the capacity to the actual number of elements in the <xref href=\"System.Collections.Generic.SortedList`2\"></xref>, if that number is less than 90 percent of current capacity.\n  remarks: \"This method can be used to minimize a collection's memory overhead if no new elements will be added to the collection. The cost of reallocating and copying a large <xref:System.Collections.Generic.SortedList%602> can be considerable, however, so the <xref:System.Collections.Generic.SortedList%602.TrimExcess%2A> method does nothing if the list is at more than 90 percent of capacity. This avoids incurring a large reallocation cost for a relatively small gain.  \\n  \\n This method is an O(`n`) operation, where `n` is <xref:System.Collections.Generic.SortedList%602.Count%2A>.  \\n  \\n To reset a <xref:System.Collections.Generic.SortedList%602> to its initial state, call the <xref:System.Collections.Generic.SortedList%602.Clear%2A> method before calling <xref:System.Collections.Generic.SortedList%602.TrimExcess%2A> method. Trimming an empty <xref:System.Collections.Generic.SortedList%602> sets the capacity of the <xref:System.Collections.Generic.SortedList%602> to the default capacity.  \\n  \\n The capacity can also be set using the <xref:System.Collections.Generic.SortedList%602.Capacity%2A> property.\"\n  syntax:\n    content: public void TrimExcess ();\n    parameters: []\n  overload: System.Collections.Generic.SortedList`2.TrimExcess*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/SortedList`2.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.Generic.SortedList`2.TryGetValue(`0,`1@)\n  commentId: M:System.Collections.Generic.SortedList`2.TryGetValue(`0,`1@)\n  id: TryGetValue(`0,`1@)\n  parent: System.Collections.Generic.SortedList`2\n  langs:\n  - csharp\n  name: TryGetValue(TKey, TValue)\n  nameWithType: SortedList<TKey,TValue>.TryGetValue(TKey, TValue)\n  fullName: SortedList<TKey,TValue>.TryGetValue(TKey, TValue)\n  type: Method\n  assemblies:\n  - System.Collections\n  - System\n  - netstandard\n  namespace: System.Collections.Generic\n  summary: Gets the value associated with the specified key.\n  remarks: \"This method combines the functionality of the <xref:System.Collections.Generic.SortedList%602.ContainsKey%2A> method and the <xref:System.Collections.Generic.SortedList%602.Item%2A> property.  \\n  \\n If the key is not found, then the `value` parameter gets the appropriate default value for the value type `TValue`; for example, zero (0) for integer types, `false` for Boolean types, and `null` for reference types.  \\n  \\n This method performs a binary search; therefore, this method is an O(log `n`) operation, where `n` is <xref:System.Collections.Generic.SortedList%602.Count%2A>.\"\n  example:\n  - \"The example shows how to use the <xref:System.Collections.Generic.SortedList%602.TryGetValue%2A> method as a more efficient way to retrieve values in a program that frequently tries keys that are not in the sorted list. For contrast, the example also shows how the <xref:System.Collections.Generic.SortedList%602.Item%2A> property (the indexer in C#) throws exceptions when attempting to retrieve nonexistent keys.  \\n  \\n This code example is part of a larger example provided for the <xref:System.Collections.Generic.SortedList%602> class.  \\n  \\n [!code-cpp[Generic.SortedList#5](~/samples/snippets/cpp/VS_Snippets_CLR/Generic.SortedList/cpp/source.cpp#5)]\\n [!code-csharp[Generic.SortedList#5](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.SortedList/CS/source.cs#5)]\\n [!code-vb[Generic.SortedList#5](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.SortedList/VB/source.vb#5)]  \\n[!code-cpp[Generic.SortedList#4](~/samples/snippets/cpp/VS_Snippets_CLR/Generic.SortedList/cpp/source.cpp#4)]\\n[!code-csharp[Generic.SortedList#4](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.SortedList/CS/source.cs#4)]\\n[!code-vb[Generic.SortedList#4](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.SortedList/VB/source.vb#4)]\"\n  syntax:\n    content: public bool TryGetValue (TKey key, out TValue value);\n    parameters:\n    - id: key\n      type: TKey\n      description: The key whose value to get.\n    - id: value\n      type: TValue\n      description: When this method returns, the value associated with the specified key, if the key is found; otherwise, the default value for the type of the <code>value</code> parameter. This parameter is passed uninitialized.\n    return:\n      type: System.Boolean\n      description: '`true` if the <xref href=\"System.Collections.Generic.SortedList`2\"></xref> contains an element with the specified key; otherwise, `false`.'\n  overload: System.Collections.Generic.SortedList`2.TryGetValue*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>key</code> is `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/SortedList`2.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.Generic.SortedList`2.Values\n  commentId: P:System.Collections.Generic.SortedList`2.Values\n  id: Values\n  parent: System.Collections.Generic.SortedList`2\n  langs:\n  - csharp\n  name: Values\n  nameWithType: SortedList<TKey,TValue>.Values\n  fullName: SortedList<TKey,TValue>.Values\n  type: Property\n  assemblies:\n  - System.Collections\n  - System\n  - netstandard\n  namespace: System.Collections.Generic\n  summary: Gets a collection containing the values in the <xref href=\"System.Collections.Generic.SortedList`2\"></xref>.\n  remarks: \"The order of the values in the <xref:System.Collections.Generic.IList%601> is the same as the order in the <xref:System.Collections.Generic.SortedList%602>.  \\n  \\n The returned <xref:System.Collections.Generic.IList%601> is not a static copy; instead, the <xref:System.Collections.Generic.IList%601> refers back to the values in the original <xref:System.Collections.Generic.SortedList%602>. Therefore, changes to the <xref:System.Collections.Generic.SortedList%602> continue to be reflected in the <xref:System.Collections.Generic.IList%601>.  \\n  \\n The collection returned by the <xref:System.Collections.Generic.SortedList%602.Values%2A> property provides an efficient way to retrieve values by index. It is not necessary to regenerate the list when the property is accessed, because the list is just a wrapper for the internal array of values. The following code shows the use of the <xref:System.Collections.Generic.SortedList%602.Values%2A> property for indexed retrieval of values from a sorted list of strings:  \\n  \\n [!code-cpp[Generic.SortedList#11](~/samples/snippets/cpp/VS_Snippets_CLR/Generic.SortedList/cpp/remarks.cpp#11)]\\n [!code-csharp[Generic.SortedList#11](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.SortedList/CS/remarks.cs#11)]\\n [!code-vb[Generic.SortedList#11](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.SortedList/VB/remarks.vb#11)]  \\n  \\n Retrieving the value of this property is an O(1) operation.\"\n  example:\n  - \"This code example shows how to enumerate the values in the sorted list using the <xref:System.Collections.Generic.SortedList%602.Values%2A> property, and how to enumerate the keys and values in the sorted list.  \\n  \\n The example also shows how to use the <xref:System.Collections.Generic.SortedList%602.Values%2A> property for efficient indexed retrieval of values.  \\n  \\n This code example is part of a larger example provided for the <xref:System.Collections.Generic.SortedList%602> class.  \\n  \\n [!code-cpp[Generic.SortedList#8](~/samples/snippets/cpp/VS_Snippets_CLR/Generic.SortedList/cpp/source.cpp#8)]\\n [!code-csharp[Generic.SortedList#8](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.SortedList/CS/source.cs#8)]\\n [!code-vb[Generic.SortedList#8](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.SortedList/VB/source.vb#8)]  \\n[!code-cpp[Generic.SortedList#7](~/samples/snippets/cpp/VS_Snippets_CLR/Generic.SortedList/cpp/source.cpp#7)]\\n[!code-csharp[Generic.SortedList#7](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.SortedList/CS/source.cs#7)]\\n[!code-vb[Generic.SortedList#7](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.SortedList/VB/source.vb#7)]\"\n  syntax:\n    content: public System.Collections.Generic.IList<TValue> Values { get; }\n    return:\n      type: System.Collections.Generic.IList{TValue}\n      description: A <xref href=\"System.Collections.Generic.IList`1\"></xref> containing the values in the <xref href=\"System.Collections.Generic.SortedList`2\"></xref>.\n  overload: System.Collections.Generic.SortedList`2.Values*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/SortedList`2.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.Generic.SortedList`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#Add(System.Collections.Generic.KeyValuePair{`0,`1})\n  commentId: M:System.Collections.Generic.SortedList`2.System#Collections#Generic#ICollection<System#Collections#Generic#KeyValuePair<TKey,TValue>>#Add(System.Collections.Generic.KeyValuePair{`0,`1})\n  id: System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#Add(System.Collections.Generic.KeyValuePair{`0,`1})\n  isEii: true\n  parent: System.Collections.Generic.SortedList`2\n  langs:\n  - csharp\n  name: ICollection<KeyValuePair<TKey,TValue>>.Add(KeyValuePair<TKey,TValue>)\n  nameWithType: SortedList<TKey,TValue>.ICollection<KeyValuePair<TKey,TValue>>.Add(KeyValuePair<TKey,TValue>)\n  fullName: SortedList<TKey,TValue>.ICollection<KeyValuePair<TKey,TValue>>.Add(KeyValuePair<TKey,TValue>)\n  type: Method\n  assemblies:\n  - System.Collections\n  - System\n  - netstandard\n  namespace: System.Collections.Generic\n  syntax:\n    content: void ICollection<KeyValuePair<TKey,TValue>>.Add (System.Collections.Generic.KeyValuePair<TKey,TValue> keyValuePair);\n    parameters:\n    - id: keyValuePair\n      type: System.Collections.Generic.KeyValuePair`2\n      description: ''\n  overload: System.Collections.Generic.SortedList`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#Add*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/SortedList`2.xml\n- uid: System.Collections.Generic.SortedList`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#Contains(System.Collections.Generic.KeyValuePair{`0,`1})\n  commentId: M:System.Collections.Generic.SortedList`2.System#Collections#Generic#ICollection<System#Collections#Generic#KeyValuePair<TKey,TValue>>#Contains(System.Collections.Generic.KeyValuePair{`0,`1})\n  id: System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#Contains(System.Collections.Generic.KeyValuePair{`0,`1})\n  isEii: true\n  parent: System.Collections.Generic.SortedList`2\n  langs:\n  - csharp\n  name: ICollection<KeyValuePair<TKey,TValue>>.Contains(KeyValuePair<TKey,TValue>)\n  nameWithType: SortedList<TKey,TValue>.ICollection<KeyValuePair<TKey,TValue>>.Contains(KeyValuePair<TKey,TValue>)\n  fullName: SortedList<TKey,TValue>.ICollection<KeyValuePair<TKey,TValue>>.Contains(KeyValuePair<TKey,TValue>)\n  type: Method\n  assemblies:\n  - System.Collections\n  - System\n  - netstandard\n  namespace: System.Collections.Generic\n  syntax:\n    content: bool ICollection<KeyValuePair<TKey,TValue>>.Contains (System.Collections.Generic.KeyValuePair<TKey,TValue> keyValuePair);\n    parameters:\n    - id: keyValuePair\n      type: System.Collections.Generic.KeyValuePair`2\n      description: ''\n    return:\n      type: System.Boolean\n      description: ''\n  overload: System.Collections.Generic.SortedList`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#Contains*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/SortedList`2.xml\n- uid: System.Collections.Generic.SortedList`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)\n  commentId: M:System.Collections.Generic.SortedList`2.System#Collections#Generic#ICollection<System#Collections#Generic#KeyValuePair<TKey,TValue>>#CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)\n  id: System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)\n  isEii: true\n  parent: System.Collections.Generic.SortedList`2\n  langs:\n  - csharp\n  name: ICollection<KeyValuePair<TKey,TValue>>.CopyTo(KeyValuePair<TKey,TValue>[], Int32)\n  nameWithType: SortedList<TKey,TValue>.ICollection<KeyValuePair<TKey,TValue>>.CopyTo(KeyValuePair<TKey,TValue>[], Int32)\n  fullName: SortedList<TKey,TValue>.ICollection<KeyValuePair<TKey,TValue>>.CopyTo(KeyValuePair<TKey,TValue>[], Int32)\n  type: Method\n  assemblies:\n  - System.Collections\n  - System\n  - netstandard\n  namespace: System.Collections.Generic\n  syntax:\n    content: void ICollection<KeyValuePair<TKey,TValue>>.CopyTo (System.Collections.Generic.KeyValuePair<TKey,TValue>[] array, int arrayIndex);\n    parameters:\n    - id: array\n      type: System.Collections.Generic.KeyValuePair{TKey,TValue}[]\n      description: ''\n    - id: arrayIndex\n      type: System.Int32\n      description: ''\n  overload: System.Collections.Generic.SortedList`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#CopyTo*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/SortedList`2.xml\n- uid: System.Collections.Generic.SortedList`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#IsReadOnly\n  commentId: P:System.Collections.Generic.SortedList`2.System#Collections#Generic#ICollection<System#Collections#Generic#KeyValuePair<TKey,TValue>>#IsReadOnly\n  id: System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#IsReadOnly\n  isEii: true\n  parent: System.Collections.Generic.SortedList`2\n  langs:\n  - csharp\n  name: ICollection<KeyValuePair<TKey,TValue>>.IsReadOnly\n  nameWithType: SortedList<TKey,TValue>.ICollection<KeyValuePair<TKey,TValue>>.IsReadOnly\n  fullName: SortedList<TKey,TValue>.ICollection<KeyValuePair<TKey,TValue>>.IsReadOnly\n  type: Property\n  assemblies:\n  - System.Collections\n  - System\n  - netstandard\n  namespace: System.Collections.Generic\n  syntax:\n    content: bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.IsReadOnly { get; }\n    return:\n      type: System.Boolean\n      description: ''\n  overload: System.Collections.Generic.SortedList`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#IsReadOnly*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/SortedList`2.xml\n- uid: System.Collections.Generic.SortedList`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#Remove(System.Collections.Generic.KeyValuePair{`0,`1})\n  commentId: M:System.Collections.Generic.SortedList`2.System#Collections#Generic#ICollection<System#Collections#Generic#KeyValuePair<TKey,TValue>>#Remove(System.Collections.Generic.KeyValuePair{`0,`1})\n  id: System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#Remove(System.Collections.Generic.KeyValuePair{`0,`1})\n  isEii: true\n  parent: System.Collections.Generic.SortedList`2\n  langs:\n  - csharp\n  name: ICollection<KeyValuePair<TKey,TValue>>.Remove(KeyValuePair<TKey,TValue>)\n  nameWithType: SortedList<TKey,TValue>.ICollection<KeyValuePair<TKey,TValue>>.Remove(KeyValuePair<TKey,TValue>)\n  fullName: SortedList<TKey,TValue>.ICollection<KeyValuePair<TKey,TValue>>.Remove(KeyValuePair<TKey,TValue>)\n  type: Method\n  assemblies:\n  - System.Collections\n  - System\n  - netstandard\n  namespace: System.Collections.Generic\n  syntax:\n    content: bool ICollection<KeyValuePair<TKey,TValue>>.Remove (System.Collections.Generic.KeyValuePair<TKey,TValue> keyValuePair);\n    parameters:\n    - id: keyValuePair\n      type: System.Collections.Generic.KeyValuePair`2\n      description: ''\n    return:\n      type: System.Boolean\n      description: ''\n  overload: System.Collections.Generic.SortedList`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#Remove*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/SortedList`2.xml\n- uid: System.Collections.Generic.SortedList`2.System#Collections#Generic#IDictionary{TKey,TValue}#Keys\n  commentId: P:System.Collections.Generic.SortedList`2.System#Collections#Generic#IDictionary<TKey,TValue>#Keys\n  id: System#Collections#Generic#IDictionary{TKey,TValue}#Keys\n  isEii: true\n  parent: System.Collections.Generic.SortedList`2\n  langs:\n  - csharp\n  name: IDictionary<TKey,TValue>.Keys\n  nameWithType: SortedList<TKey,TValue>.IDictionary<TKey,TValue>.Keys\n  fullName: SortedList<TKey,TValue>.IDictionary<TKey,TValue>.Keys\n  type: Property\n  assemblies:\n  - System.Collections\n  - System\n  - netstandard\n  namespace: System.Collections.Generic\n  syntax:\n    content: System.Collections.Generic.ICollection<TKey> System.Collections.Generic.IDictionary<TKey,TValue>.Keys { get; }\n    return:\n      type: System.Collections.Generic.ICollection{TKey}\n      description: ''\n  overload: System.Collections.Generic.SortedList`2.System#Collections#Generic#IDictionary{TKey,TValue}#Keys*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/SortedList`2.xml\n- uid: System.Collections.Generic.SortedList`2.System#Collections#Generic#IDictionary{TKey,TValue}#Values\n  commentId: P:System.Collections.Generic.SortedList`2.System#Collections#Generic#IDictionary<TKey,TValue>#Values\n  id: System#Collections#Generic#IDictionary{TKey,TValue}#Values\n  isEii: true\n  parent: System.Collections.Generic.SortedList`2\n  langs:\n  - csharp\n  name: IDictionary<TKey,TValue>.Values\n  nameWithType: SortedList<TKey,TValue>.IDictionary<TKey,TValue>.Values\n  fullName: SortedList<TKey,TValue>.IDictionary<TKey,TValue>.Values\n  type: Property\n  assemblies:\n  - System.Collections\n  - System\n  - netstandard\n  namespace: System.Collections.Generic\n  syntax:\n    content: System.Collections.Generic.ICollection<TValue> System.Collections.Generic.IDictionary<TKey,TValue>.Values { get; }\n    return:\n      type: System.Collections.Generic.ICollection{TValue}\n      description: ''\n  overload: System.Collections.Generic.SortedList`2.System#Collections#Generic#IDictionary{TKey,TValue}#Values*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/SortedList`2.xml\n- uid: System.Collections.Generic.SortedList`2.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{TKey,TValue}}#GetEnumerator\n  commentId: M:System.Collections.Generic.SortedList`2.System#Collections#Generic#IEnumerable<System#Collections#Generic#KeyValuePair<TKey,TValue>>#GetEnumerator\n  id: System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{TKey,TValue}}#GetEnumerator\n  isEii: true\n  parent: System.Collections.Generic.SortedList`2\n  langs:\n  - csharp\n  name: IEnumerable<KeyValuePair<TKey,TValue>>.GetEnumerator()\n  nameWithType: SortedList<TKey,TValue>.IEnumerable<KeyValuePair<TKey,TValue>>.GetEnumerator()\n  fullName: SortedList<TKey,TValue>.IEnumerable<KeyValuePair<TKey,TValue>>.GetEnumerator()\n  type: Method\n  assemblies:\n  - System.Collections\n  - System\n  - netstandard\n  namespace: System.Collections.Generic\n  syntax:\n    content: System.Collections.Generic.IEnumerator<System.Collections.Generic.KeyValuePair<TKey,TValue>> IEnumerable<KeyValuePair<TKey,TValue>>.GetEnumerator ();\n    parameters: []\n    return:\n      type: System.Collections.Generic.IEnumerator{System.Collections.Generic.KeyValuePair{TKey,TValue}}\n      description: ''\n  overload: System.Collections.Generic.SortedList`2.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{TKey,TValue}}#GetEnumerator*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/SortedList`2.xml\n- uid: System.Collections.Generic.SortedList`2.System#Collections#Generic#IReadOnlyDictionary{TKey,TValue}#Keys\n  commentId: P:System.Collections.Generic.SortedList`2.System#Collections#Generic#IReadOnlyDictionary<TKey,TValue>#Keys\n  id: System#Collections#Generic#IReadOnlyDictionary{TKey,TValue}#Keys\n  isEii: true\n  parent: System.Collections.Generic.SortedList`2\n  langs:\n  - csharp\n  name: IReadOnlyDictionary<TKey,TValue>.Keys\n  nameWithType: SortedList<TKey,TValue>.IReadOnlyDictionary<TKey,TValue>.Keys\n  fullName: SortedList<TKey,TValue>.IReadOnlyDictionary<TKey,TValue>.Keys\n  type: Property\n  assemblies:\n  - System.Collections\n  - System\n  - netstandard\n  namespace: System.Collections.Generic\n  syntax:\n    content: System.Collections.Generic.IEnumerable<TKey> System.Collections.Generic.IReadOnlyDictionary<TKey,TValue>.Keys { get; }\n    return:\n      type: System.Collections.Generic.IEnumerable{TKey}\n      description: ''\n  overload: System.Collections.Generic.SortedList`2.System#Collections#Generic#IReadOnlyDictionary{TKey,TValue}#Keys*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/SortedList`2.xml\n- uid: System.Collections.Generic.SortedList`2.System#Collections#Generic#IReadOnlyDictionary{TKey,TValue}#Values\n  commentId: P:System.Collections.Generic.SortedList`2.System#Collections#Generic#IReadOnlyDictionary<TKey,TValue>#Values\n  id: System#Collections#Generic#IReadOnlyDictionary{TKey,TValue}#Values\n  isEii: true\n  parent: System.Collections.Generic.SortedList`2\n  langs:\n  - csharp\n  name: IReadOnlyDictionary<TKey,TValue>.Values\n  nameWithType: SortedList<TKey,TValue>.IReadOnlyDictionary<TKey,TValue>.Values\n  fullName: SortedList<TKey,TValue>.IReadOnlyDictionary<TKey,TValue>.Values\n  type: Property\n  assemblies:\n  - System.Collections\n  - System\n  - netstandard\n  namespace: System.Collections.Generic\n  syntax:\n    content: System.Collections.Generic.IEnumerable<TValue> System.Collections.Generic.IReadOnlyDictionary<TKey,TValue>.Values { get; }\n    return:\n      type: System.Collections.Generic.IEnumerable{TValue}\n      description: ''\n  overload: System.Collections.Generic.SortedList`2.System#Collections#Generic#IReadOnlyDictionary{TKey,TValue}#Values*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/SortedList`2.xml\n- uid: System.Collections.Generic.SortedList`2.System#Collections#ICollection#CopyTo(System.Array,System.Int32)\n  commentId: M:System.Collections.Generic.SortedList`2.System#Collections#ICollection#CopyTo(System.Array,System.Int32)\n  id: System#Collections#ICollection#CopyTo(System.Array,System.Int32)\n  isEii: true\n  parent: System.Collections.Generic.SortedList`2\n  langs:\n  - csharp\n  name: ICollection.CopyTo(Array, Int32)\n  nameWithType: SortedList<TKey,TValue>.ICollection.CopyTo(Array, Int32)\n  fullName: SortedList<TKey,TValue>.ICollection.CopyTo(Array, Int32)\n  type: Method\n  assemblies:\n  - System.Collections\n  - System\n  - netstandard\n  namespace: System.Collections.Generic\n  summary: Copies the elements of the <xref href=\"System.Collections.ICollection\"></xref> to an <xref href=\"System.Array\"></xref>, starting at a particular <xref href=\"System.Array\"></xref> index.\n  remarks: \"> [!NOTE]\\n>  If the type of the source <xref:System.Collections.ICollection> cannot be cast automatically to the type of the destination `array`, the non-generic implementations of <xref:System.Collections.ICollection.CopyTo%2A?displayProperty=fullName> throw <xref:System.InvalidCastException>, whereas the generic implementations throw <xref:System.ArgumentException>.  \\n  \\n This method is an O(`n`) operation, where `n` is <xref:System.Collections.Generic.SortedList%602.Count%2A>.\"\n  syntax:\n    content: void ICollection.CopyTo (Array array, int arrayIndex);\n    parameters:\n    - id: array\n      type: System.Array\n      description: The one-dimensional <xref href=\"System.Array\"></xref> that is the destination of the elements copied from <xref href=\"System.Collections.ICollection\"></xref>. The <xref href=\"System.Array\"></xref> must have zero-based indexing.\n    - id: arrayIndex\n      type: System.Int32\n      description: The zero-based index in <code>array</code> at which copying begins.\n  overload: System.Collections.Generic.SortedList`2.System#Collections#ICollection#CopyTo*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>array</code> is `null`.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>arrayIndex</code> is less than zero.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"<code>array</code> is multidimensional.  \\n  \\n -or-  \\n  \\n <code>array</code> does not have zero-based indexing.  \\n  \\n -or-  \\n  \\n The number of elements in the source <xref href=\\\"System.Collections.ICollection\\\"></xref> is greater than the available space from <code>arrayIndex</code> to the end of the destination <code>array</code>.  \\n  \\n -or-  \\n  \\n The type of the source <xref href=\\\"System.Collections.ICollection\\\"></xref> cannot be cast automatically to the type of the destination <code>array</code>.\"\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/SortedList`2.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.Generic.SortedList`2.System#Collections#ICollection#IsSynchronized\n  commentId: P:System.Collections.Generic.SortedList`2.System#Collections#ICollection#IsSynchronized\n  id: System#Collections#ICollection#IsSynchronized\n  isEii: true\n  parent: System.Collections.Generic.SortedList`2\n  langs:\n  - csharp\n  name: ICollection.IsSynchronized\n  nameWithType: SortedList<TKey,TValue>.ICollection.IsSynchronized\n  fullName: SortedList<TKey,TValue>.ICollection.IsSynchronized\n  type: Property\n  assemblies:\n  - System.Collections\n  - System\n  - netstandard\n  namespace: System.Collections.Generic\n  summary: Gets a value indicating whether access to the <xref href=\"System.Collections.ICollection\"></xref> is synchronized (thread safe).\n  remarks: \"Default implementations of collections in <xref:System.Collections.Generic?displayProperty=fullName> are not synchronized.  \\n  \\n Enumerating through a collection is intrinsically not a thread-safe procedure.  To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.  To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.  \\n  \\n The <xref:System.Collections.ICollection.SyncRoot%2A> property returns an object that can be used to synchronize access to the <xref:System.Collections.ICollection>. Synchronization is effective only if all threads lock this object before accessing the collection.  \\n  \\n Retrieving the value of this property is an O(1) operation.\"\n  syntax:\n    content: bool System.Collections.ICollection.IsSynchronized { get; }\n    return:\n      type: System.Boolean\n      description: '`true` if access to the <xref href=\"System.Collections.ICollection\"></xref> is synchronized (thread safe); otherwise, `false`.  In the default implementation of <xref href=\"System.Collections.Generic.SortedList`2\"></xref>, this property always returns `false`.'\n  overload: System.Collections.Generic.SortedList`2.System#Collections#ICollection#IsSynchronized*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/SortedList`2.xml\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.Generic.SortedList`2.System#Collections#ICollection#SyncRoot\n  commentId: P:System.Collections.Generic.SortedList`2.System#Collections#ICollection#SyncRoot\n  id: System#Collections#ICollection#SyncRoot\n  isEii: true\n  parent: System.Collections.Generic.SortedList`2\n  langs:\n  - csharp\n  name: ICollection.SyncRoot\n  nameWithType: SortedList<TKey,TValue>.ICollection.SyncRoot\n  fullName: SortedList<TKey,TValue>.ICollection.SyncRoot\n  type: Property\n  assemblies:\n  - System.Collections\n  - System\n  - netstandard\n  namespace: System.Collections.Generic\n  summary: Gets an object that can be used to synchronize access to the <xref href=\"System.Collections.ICollection\"></xref>.\n  remarks: \"Default implementations of collections in <xref:System.Collections.Generic?displayProperty=fullName> are not synchronized.  \\n  \\n Enumerating through a collection is intrinsically not a thread-safe procedure. To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration. To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.  \\n  \\n The <xref:System.Collections.ICollection.SyncRoot%2A> property returns an object that can be used to synchronize access to the <xref:System.Collections.ICollection>. Synchronization is effective only if all threads lock this object before accessing the collection. The following code shows the use of the <xref:System.Collections.ICollection.SyncRoot%2A> property for C#, C++, and Visual Basic.  \\n  \\n```csharp  \\nICollection ic = ...;  \\nlock (ic.SyncRoot) {  \\n   // Access the collection.  \\n}  \\n```  \\n  \\n```vb  \\nDim ic As ICollection = ...  \\nSyncLock ic.SyncRoot  \\n   ' Access the collection.  \\nEnd SyncLock  \\n```  \\n  \\n```cpp#  \\nICollection^ ic = ...;  \\ntry {  \\n   Monitor::Enter(ic->SyncRoot);  \\n   // Access the collection.  \\n}  \\nfinally {  \\n   Monitor::Exit(ic->SyncRoot);  \\n}  \\n```  \\n  \\n Retrieving the value of this property is an O(1) operation.\"\n  syntax:\n    content: object System.Collections.ICollection.SyncRoot { get; }\n    return:\n      type: System.Object\n      description: An object that can be used to synchronize access to the <xref href=\"System.Collections.ICollection\"></xref>.  In the default implementation of <xref href=\"System.Collections.Generic.SortedList`2\"></xref>, this property always returns the current instance.\n  overload: System.Collections.Generic.SortedList`2.System#Collections#ICollection#SyncRoot*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/SortedList`2.xml\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.Generic.SortedList`2.System#Collections#IDictionary#Add(System.Object,System.Object)\n  commentId: M:System.Collections.Generic.SortedList`2.System#Collections#IDictionary#Add(System.Object,System.Object)\n  id: System#Collections#IDictionary#Add(System.Object,System.Object)\n  isEii: true\n  parent: System.Collections.Generic.SortedList`2\n  langs:\n  - csharp\n  name: IDictionary.Add(Object, Object)\n  nameWithType: SortedList<TKey,TValue>.IDictionary.Add(Object, Object)\n  fullName: SortedList<TKey,TValue>.IDictionary.Add(Object, Object)\n  type: Method\n  assemblies:\n  - System.Collections\n  - System\n  - netstandard\n  namespace: System.Collections.Generic\n  summary: Adds an element with the provided key and value to the <xref href=\"System.Collections.IDictionary\"></xref>.\n  remarks: \"You can also use the <xref:System.Collections.IDictionary.Item%2A> property to add new elements by setting the value of a key that does not exist in the dictionary; for example, `myCollection[\\\"myNonexistentKey\\\"] = myValue`. However, if the specified key already exists in the dictionary, setting the <xref:System.Collections.IDictionary.Item%2A> property overwrites the old value. In contrast, the <xref:System.Collections.IDictionary.Add%2A> method does not modify existing elements.  \\n  \\n This method is an O(`n`) operation for unsorted data, where `n` is <xref:System.Collections.Generic.SortedList%602.Count%2A>. It is an O(log `n`) operation if the new element is added at the end of the list. If insertion causes a resize, the operation is O(`n`).\"\n  example:\n  - \"The following code example shows how to access the <xref:System.Collections.Generic.SortedList%602> class through the <xref:System.Collections.IDictionary?displayProperty=fullName> interface. The code example creates an empty <xref:System.Collections.Generic.SortedList%602> of strings with string keys and uses the <xref:System.Collections.Generic.SortedList%602.System%23Collections%23IDictionary%23Add%2A> method to add some elements. The example demonstrates that the <xref:System.Collections.Generic.SortedList%602.System%23Collections%23IDictionary%23Add%2A> method throws an <xref:System.ArgumentException> when attempting to add a duplicate key, or when a key or value of the wrong data type is supplied.  \\n  \\n The code example demonstrates the use of several other members of the <xref:System.Collections.IDictionary?displayProperty=fullName> interface.  \\n  \\n [!code-csharp[Generic.SortedList.IDictionary#1](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.SortedList.IDictionary/CS/source.cs#1)]\\n [!code-vb[Generic.SortedList.IDictionary#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.SortedList.IDictionary/VB/source.vb#1)]\"\n  syntax:\n    content: void IDictionary.Add (object key, object value);\n    parameters:\n    - id: key\n      type: System.Object\n      description: The <xref href=\"System.Object\"></xref> to use as the key of the element to add.\n    - id: value\n      type: System.Object\n      description: The <xref href=\"System.Object\"></xref> to use as the value of the element to add.\n  overload: System.Collections.Generic.SortedList`2.System#Collections#IDictionary#Add*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>key</code> is `null`.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"<code>key</code> is of a type that is not assignable to the key type <code>TKey</code> of the <xref href=\\\"System.Collections.IDictionary\\\"></xref>.  \\n  \\n -or-  \\n  \\n <code>value</code> is of a type that is not assignable to the value type <code>TValue</code> of the <xref href=\\\"System.Collections.IDictionary\\\"></xref>.  \\n  \\n -or-  \\n  \\n An element with the same key already exists in the <xref href=\\\"System.Collections.IDictionary\\\"></xref>.\"\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/SortedList`2.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.Generic.SortedList`2.System#Collections#IDictionary#Contains(System.Object)\n  commentId: M:System.Collections.Generic.SortedList`2.System#Collections#IDictionary#Contains(System.Object)\n  id: System#Collections#IDictionary#Contains(System.Object)\n  isEii: true\n  parent: System.Collections.Generic.SortedList`2\n  langs:\n  - csharp\n  name: IDictionary.Contains(Object)\n  nameWithType: SortedList<TKey,TValue>.IDictionary.Contains(Object)\n  fullName: SortedList<TKey,TValue>.IDictionary.Contains(Object)\n  type: Method\n  assemblies:\n  - System.Collections\n  - System\n  - netstandard\n  namespace: System.Collections.Generic\n  summary: Determines whether the <xref href=\"System.Collections.IDictionary\"></xref> contains an element with the specified key.\n  remarks: \"This method returns `false` if `key` is of a type that is not assignable to the key type `TKey` of the <xref:System.Collections.Generic.SortedList%602>.  \\n  \\n This method is an O(log `n`) operation, where `n` is <xref:System.Collections.Generic.SortedList%602.Count%2A>.\"\n  example:\n  - \"The following code example shows how to use the <xref:System.Collections.Generic.SortedList%602.System%23Collections%23IDictionary%23Contains%2A> method of the <xref:System.Collections.IDictionary?displayProperty=fullName> interface with a <xref:System.Collections.Generic.SortedList%602>. The example demonstrates that the method returns `false` if a key of the wrong data type is supplied.  \\n  \\n The code example is part of a larger example, including output, provided for the <xref:System.Collections.Generic.SortedList%602.System%23Collections%23IDictionary%23Add%2A> method.  \\n  \\n [!code-csharp[Generic.SortedList.IDictionary#31](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.SortedList.IDictionary/CS/source.cs#31)]\\n [!code-vb[Generic.SortedList.IDictionary#31](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.SortedList.IDictionary/VB/source.vb#31)]  \\n[!code-csharp[Generic.SortedList.IDictionary#6](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.SortedList.IDictionary/CS/source.cs#6)]\\n[!code-vb[Generic.SortedList.IDictionary#6](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.SortedList.IDictionary/VB/source.vb#6)]  \\n[!code-csharp[Generic.SortedList.IDictionary#32](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.SortedList.IDictionary/CS/source.cs#32)]\\n[!code-vb[Generic.SortedList.IDictionary#32](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.SortedList.IDictionary/VB/source.vb#32)]\"\n  syntax:\n    content: bool IDictionary.Contains (object key);\n    parameters:\n    - id: key\n      type: System.Object\n      description: The key to locate in the <xref href=\"System.Collections.IDictionary\"></xref>.\n    return:\n      type: System.Boolean\n      description: '`true` if the <xref href=\"System.Collections.IDictionary\"></xref> contains an element with the key; otherwise, `false`.'\n  overload: System.Collections.Generic.SortedList`2.System#Collections#IDictionary#Contains*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>key</code> is `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/SortedList`2.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.Generic.SortedList`2.System#Collections#IDictionary#GetEnumerator\n  commentId: M:System.Collections.Generic.SortedList`2.System#Collections#IDictionary#GetEnumerator\n  id: System#Collections#IDictionary#GetEnumerator\n  isEii: true\n  parent: System.Collections.Generic.SortedList`2\n  langs:\n  - csharp\n  name: IDictionary.GetEnumerator()\n  nameWithType: SortedList<TKey,TValue>.IDictionary.GetEnumerator()\n  fullName: SortedList<TKey,TValue>.IDictionary.GetEnumerator()\n  type: Method\n  assemblies:\n  - System.Collections\n  - System\n  - netstandard\n  namespace: System.Collections.Generic\n  summary: Returns an <xref href=\"System.Collections.IDictionaryEnumerator\"></xref> for the <xref href=\"System.Collections.IDictionary\"></xref>.\n  remarks: \"The `foreach` statement of the C# language (`for each` in C++, `For Each` in Visual Basic) hides the complexity of the enumerators.  Therefore, using `foreach` is recommended, instead of directly manipulating the enumerator.  \\n  \\n Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.  \\n  \\n Initially, the enumerator is positioned before the first element in the collection. <xref:System.Collections.IEnumerator.Reset%2A> also brings the enumerator back to this position.  At this position, <xref:System.Collections.IDictionaryEnumerator.Entry%2A> is undefined. Therefore, you must call <xref:System.Collections.IEnumerator.MoveNext%2A> to advance the enumerator to the first element of the collection before reading the value of <xref:System.Collections.IDictionaryEnumerator.Entry%2A>.  \\n  \\n <xref:System.Collections.IDictionaryEnumerator.Entry%2A> returns the same object until either <xref:System.Collections.IEnumerator.MoveNext%2A> or <xref:System.Collections.IEnumerator.Reset%2A> is called. <xref:System.Collections.IEnumerator.MoveNext%2A> sets <xref:System.Collections.IDictionaryEnumerator.Entry%2A> to the next element.  \\n  \\n If <xref:System.Collections.IEnumerator.MoveNext%2A> passes the end of the collection, the enumerator is positioned after the last element in the collection and <xref:System.Collections.IEnumerator.MoveNext%2A> returns `false`. When the enumerator is at this position, subsequent calls to <xref:System.Collections.IEnumerator.MoveNext%2A> also return `false`. If the last call to <xref:System.Collections.IEnumerator.MoveNext%2A> returned `false`, <xref:System.Collections.IDictionaryEnumerator.Entry%2A> is undefined. To set <xref:System.Collections.IDictionaryEnumerator.Entry%2A> to the first element of the collection again, you can call <xref:System.Collections.IEnumerator.Reset%2A> followed by <xref:System.Collections.IEnumerator.MoveNext%2A>.  \\n  \\n An enumerator remains valid as long as the collection remains unchanged. If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and its behavior is undefined.  \\n  \\n The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure.  To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.  To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.  \\n  \\n Default implementations of collections in <xref:System.Collections.Generic?displayProperty=fullName> are not synchronized.  \\n  \\n This method is an O(1) operation.\"\n  example:\n  - \"The following code example shows how to enumerate the key/value pairs in the sorted list by using the `foreach` statement (`For Each` in Visual Basic, `for each` in C++), which hides the use of the enumerator. In particular, note that the enumerator for the <xref:System.Collections.IDictionary?displayProperty=fullName> interface returns <xref:System.Collections.DictionaryEntry> objects rather than <xref:System.Collections.Generic.KeyValuePair%602> objects.  \\n  \\n The code example is part of a larger example, including output, provided for the <xref:System.Collections.Generic.SortedList%602.System%23Collections%23IDictionary%23Add%2A> method.  \\n  \\n [!code-csharp[Generic.SortedList.IDictionary#31](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.SortedList.IDictionary/CS/source.cs#31)]\\n [!code-vb[Generic.SortedList.IDictionary#31](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.SortedList.IDictionary/VB/source.vb#31)]  \\n[!code-csharp[Generic.SortedList.IDictionary#7](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.SortedList.IDictionary/CS/source.cs#7)]\\n[!code-vb[Generic.SortedList.IDictionary#7](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.SortedList.IDictionary/VB/source.vb#7)]  \\n[!code-csharp[Generic.SortedList.IDictionary#32](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.SortedList.IDictionary/CS/source.cs#32)]\\n[!code-vb[Generic.SortedList.IDictionary#32](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.SortedList.IDictionary/VB/source.vb#32)]\"\n  syntax:\n    content: System.Collections.IDictionaryEnumerator IDictionary.GetEnumerator ();\n    parameters: []\n    return:\n      type: System.Collections.IDictionaryEnumerator\n      description: An <xref href=\"System.Collections.IDictionaryEnumerator\"></xref> for the <xref href=\"System.Collections.IDictionary\"></xref>.\n  overload: System.Collections.Generic.SortedList`2.System#Collections#IDictionary#GetEnumerator*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/SortedList`2.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.Generic.SortedList`2.System#Collections#IDictionary#IsFixedSize\n  commentId: P:System.Collections.Generic.SortedList`2.System#Collections#IDictionary#IsFixedSize\n  id: System#Collections#IDictionary#IsFixedSize\n  isEii: true\n  parent: System.Collections.Generic.SortedList`2\n  langs:\n  - csharp\n  name: IDictionary.IsFixedSize\n  nameWithType: SortedList<TKey,TValue>.IDictionary.IsFixedSize\n  fullName: SortedList<TKey,TValue>.IDictionary.IsFixedSize\n  type: Property\n  assemblies:\n  - System.Collections\n  - System\n  - netstandard\n  namespace: System.Collections.Generic\n  summary: Gets a value indicating whether the <xref href=\"System.Collections.IDictionary\"></xref> has a fixed size.\n  remarks: \"A collection with a fixed size does not allow the addition or removal of elements after the collection is created, but it allows the modification of existing elements.  \\n  \\n A collection with a fixed size is simply a collection with a wrapper that prevents adding and removing elements; therefore, if changes are made to the underlying collection, including the addition or removal of elements, the fixed-size collection reflects those changes.  \\n  \\n Retrieving the value of this property is an O(1) operation.\"\n  syntax:\n    content: bool System.Collections.IDictionary.IsFixedSize { get; }\n    return:\n      type: System.Boolean\n      description: '`true` if the <xref href=\"System.Collections.IDictionary\"></xref> has a fixed size; otherwise, `false`.  In the default implementation of <xref href=\"System.Collections.Generic.SortedList`2\"></xref>, this property always returns `false`.'\n  overload: System.Collections.Generic.SortedList`2.System#Collections#IDictionary#IsFixedSize*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/SortedList`2.xml\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.Generic.SortedList`2.System#Collections#IDictionary#IsReadOnly\n  commentId: P:System.Collections.Generic.SortedList`2.System#Collections#IDictionary#IsReadOnly\n  id: System#Collections#IDictionary#IsReadOnly\n  isEii: true\n  parent: System.Collections.Generic.SortedList`2\n  langs:\n  - csharp\n  name: IDictionary.IsReadOnly\n  nameWithType: SortedList<TKey,TValue>.IDictionary.IsReadOnly\n  fullName: SortedList<TKey,TValue>.IDictionary.IsReadOnly\n  type: Property\n  assemblies:\n  - System.Collections\n  - System\n  - netstandard\n  namespace: System.Collections.Generic\n  summary: Gets a value indicating whether the <xref href=\"System.Collections.IDictionary\"></xref> is read-only.\n  remarks: \"A collection that is read-only does not allow the addition, removal, or modification of elements after the collection is created.  \\n  \\n A collection that is read-only is simply a collection with a wrapper that prevents modifying the collection; therefore, if changes are made to the underlying collection, the read-only collection reflects those changes.  \\n  \\n Retrieving the value of this property is an O(1) operation.\"\n  syntax:\n    content: bool System.Collections.IDictionary.IsReadOnly { get; }\n    return:\n      type: System.Boolean\n      description: '`true` if the <xref href=\"System.Collections.IDictionary\"></xref> is read-only; otherwise, `false`.  In the default implementation of <xref href=\"System.Collections.Generic.SortedList`2\"></xref>, this property always returns `false`.'\n  overload: System.Collections.Generic.SortedList`2.System#Collections#IDictionary#IsReadOnly*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/SortedList`2.xml\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.Generic.SortedList`2.System#Collections#IDictionary#Item(System.Object)\n  commentId: P:System.Collections.Generic.SortedList`2.System#Collections#IDictionary#Item(System.Object)\n  id: System#Collections#IDictionary#Item(System.Object)\n  isEii: true\n  parent: System.Collections.Generic.SortedList`2\n  langs:\n  - csharp\n  name: IDictionary.Item(Object)\n  nameWithType: SortedList<TKey,TValue>.IDictionary.Item(Object)\n  fullName: SortedList<TKey,TValue>.IDictionary.Item(Object)\n  type: Property\n  assemblies:\n  - System.Collections\n  - System\n  - netstandard\n  namespace: System.Collections.Generic\n  summary: Gets or sets the element with the specified key.\n  remarks: \"This property returns `null` if `key` is of a type that is not assignable to the key type `TKey` of the <xref:System.Collections.Generic.SortedList%602>.  \\n  \\n This property provides the ability to access a specific element in the collection by using the following syntax: `myCollection[key]`.  \\n  \\n You can also use the <xref:System.Collections.IDictionary.Item%2A> property to add new elements by setting the value of a key that does not exist in the dictionary; for example, `myCollection[\\\"myNonexistentKey\\\"] = myValue`. However, if the specified key already exists in the dictionary, setting the <xref:System.Collections.IDictionary.Item%2A> property overwrites the old value. In contrast, the <xref:System.Collections.IDictionary.Add%2A> method does not modify existing elements.  \\n  \\n The C# language uses the [this](~/docs/csharp/language-reference/keywords/this.md) keyword to define the indexers instead of implementing the <xref:System.Collections.Generic.SortedList%602.System%23Collections%23IDictionary%23Item%2A> property. Visual Basic implements <xref:System.Collections.Generic.SortedList%602.System%23Collections%23IDictionary%23Item%2A> as a default property, which provides the same indexing functionality.  \\n  \\n Retrieving the value of this property is an O(log `n`) operation, where n is <xref:System.Collections.Generic.SortedList%602.Count%2A>. Setting the property is an O(log `n`) operation if the key is already in the <xref:System.Collections.Generic.SortedList%602>. If the key is not in the list, setting the property is an O(`n`) operation for unsorted data, or O(log `n`) if the new element is added at the end of the list. If insertion causes a resize, the operation is O(`n`).\"\n  example:\n  - \"The following code example shows how to use the <xref:System.Collections.Generic.SortedList%602.System%23Collections%23IDictionary%23Item%2A> property (the indexer in C#) of the <xref:System.Collections.IDictionary?displayProperty=fullName> interface with a <xref:System.Collections.Generic.SortedList%602>, and ways the property differs from the <xref:System.Collections.Generic.SortedList%602.Item%2A?displayProperty=fullName> property.  \\n  \\n The example shows that, like the <xref:System.Collections.Generic.SortedList%602.Item%2A?displayProperty=fullName> property, the <xref:System.Collections.Generic.SortedList%602.System%23Collections%23IDictionary%23Item%2A?displayProperty=fullName> property can change the value associated with an existing key and can be used to add a new key/value pair if the specified key is not in the sorted list. The example also shows that unlike the <xref:System.Collections.Generic.SortedList%602.Item%2A?displayProperty=fullName> property, the <xref:System.Collections.Generic.SortedList%602.System%23Collections%23IDictionary%23Item%2A?displayProperty=fullName> property does not throw an exception if `key` is not in the sorted list, returning a null reference instead. Finally, the example demonstrates that getting the <xref:System.Collections.Generic.SortedList%602.System%23Collections%23IDictionary%23Item%2A?displayProperty=fullName> property returns a null reference if `key` is not the correct data type, and that setting the property throws an exception if `key` is not the correct data type.  \\n  \\n The code example is part of a larger example, including output, provided for the <xref:System.Collections.Generic.SortedList%602.System%23Collections%23IDictionary%23Add%2A> method.  \\n  \\n [!code-csharp[Generic.SortedList.IDictionary#31](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.SortedList.IDictionary/CS/source.cs#31)]\\n [!code-vb[Generic.SortedList.IDictionary#31](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.SortedList.IDictionary/VB/source.vb#31)]  \\n[!code-csharp[Generic.SortedList.IDictionary#3](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.SortedList.IDictionary/CS/source.cs#3)]\\n[!code-vb[Generic.SortedList.IDictionary#3](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.SortedList.IDictionary/VB/source.vb#3)]  \\n[!code-csharp[Generic.SortedList.IDictionary#4](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.SortedList.IDictionary/CS/source.cs#4)]\\n[!code-vb[Generic.SortedList.IDictionary#4](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.SortedList.IDictionary/VB/source.vb#4)]  \\n[!code-csharp[Generic.SortedList.IDictionary#32](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.SortedList.IDictionary/CS/source.cs#32)]\\n[!code-vb[Generic.SortedList.IDictionary#32](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.SortedList.IDictionary/VB/source.vb#32)]\"\n  syntax:\n    content: object System.Collections.IDictionary.Item[object key] { get; set; }\n    parameters:\n    - id: key\n      type: System.Object\n      description: The key of the element to get or set.\n    return:\n      type: System.Object\n      description: The element with the specified key, or `null` if <code>key</code> is not in the dictionary or <code>key</code> is of a type that is not assignable to the key type <code>TKey</code> of the <xref href=\"System.Collections.Generic.SortedList`2\"></xref>.\n  overload: System.Collections.Generic.SortedList`2.System#Collections#IDictionary#Item*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>key</code> is `null`.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"A value is being assigned, and <code>key</code> is of a type that is not assignable to the key type <code>TKey</code> of the <xref href=\\\"System.Collections.Generic.SortedList`2\\\"></xref>.  \\n  \\n -or-  \\n  \\n A value is being assigned, and <code>value</code> is of a type that is not assignable to the value type <code>TValue</code> of the <xref href=\\\"System.Collections.Generic.SortedList`2\\\"></xref>.\"\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/SortedList`2.xml\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.Generic.SortedList`2.System#Collections#IDictionary#Keys\n  commentId: P:System.Collections.Generic.SortedList`2.System#Collections#IDictionary#Keys\n  id: System#Collections#IDictionary#Keys\n  isEii: true\n  parent: System.Collections.Generic.SortedList`2\n  langs:\n  - csharp\n  name: IDictionary.Keys\n  nameWithType: SortedList<TKey,TValue>.IDictionary.Keys\n  fullName: SortedList<TKey,TValue>.IDictionary.Keys\n  type: Property\n  assemblies:\n  - System.Collections\n  - System\n  - netstandard\n  namespace: System.Collections.Generic\n  summary: Gets an <xref href=\"System.Collections.ICollection\"></xref> containing the keys of the <xref href=\"System.Collections.IDictionary\"></xref>.\n  remarks: \"The order of the keys in the <xref:System.Collections.ICollection> is the same as the order in the <xref:System.Collections.Generic.SortedList%602>.  \\n  \\n Retrieving the value of this property is an O(1) operation.\"\n  example:\n  - \"The following code example shows how to use the <xref:System.Collections.Generic.SortedList%602.System%23Collections%23Generic%23IDictionary%7BTKey%40TValue%7D%23Keys%2A> property of the <xref:System.Collections.IDictionary?displayProperty=fullName> interface with a <xref:System.Collections.Generic.SortedList%602>, to list the keys in the sorted list. The example also shows how to enumerate the key/value pairs in the sorted list; note that the enumerator for the <xref:System.Collections.IDictionary?displayProperty=fullName> interface returns <xref:System.Collections.DictionaryEntry> objects rather than <xref:System.Collections.Generic.KeyValuePair%602> objects.  \\n  \\n The code example is part of a larger example, including output, provided for the <xref:System.Collections.Generic.SortedList%602.System%23Collections%23IDictionary%23Add%2A> method.  \\n  \\n [!code-csharp[Generic.SortedList.IDictionary#31](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.SortedList.IDictionary/CS/source.cs#31)]\\n [!code-vb[Generic.SortedList.IDictionary#31](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.SortedList.IDictionary/VB/source.vb#31)]  \\n[!code-csharp[Generic.SortedList.IDictionary#9](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.SortedList.IDictionary/CS/source.cs#9)]\\n[!code-vb[Generic.SortedList.IDictionary#9](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.SortedList.IDictionary/VB/source.vb#9)]  \\n[!code-csharp[Generic.SortedList.IDictionary#7](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.SortedList.IDictionary/CS/source.cs#7)]\\n[!code-vb[Generic.SortedList.IDictionary#7](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.SortedList.IDictionary/VB/source.vb#7)]  \\n[!code-csharp[Generic.SortedList.IDictionary#32](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.SortedList.IDictionary/CS/source.cs#32)]\\n[!code-vb[Generic.SortedList.IDictionary#32](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.SortedList.IDictionary/VB/source.vb#32)]\"\n  syntax:\n    content: System.Collections.ICollection System.Collections.IDictionary.Keys { get; }\n    return:\n      type: System.Collections.ICollection\n      description: An <xref href=\"System.Collections.ICollection\"></xref> containing the keys of the <xref href=\"System.Collections.IDictionary\"></xref>.\n  overload: System.Collections.Generic.SortedList`2.System#Collections#IDictionary#Keys*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/SortedList`2.xml\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.Generic.SortedList`2.System#Collections#IDictionary#Remove(System.Object)\n  commentId: M:System.Collections.Generic.SortedList`2.System#Collections#IDictionary#Remove(System.Object)\n  id: System#Collections#IDictionary#Remove(System.Object)\n  isEii: true\n  parent: System.Collections.Generic.SortedList`2\n  langs:\n  - csharp\n  name: IDictionary.Remove(Object)\n  nameWithType: SortedList<TKey,TValue>.IDictionary.Remove(Object)\n  fullName: SortedList<TKey,TValue>.IDictionary.Remove(Object)\n  type: Method\n  assemblies:\n  - System.Collections\n  - System\n  - netstandard\n  namespace: System.Collections.Generic\n  summary: Removes the element with the specified key from the <xref href=\"System.Collections.IDictionary\"></xref>.\n  remarks: This method performs a binary search; however, the elements are moved up to fill in the open spot, so this method is an O(`n`) operation, where `n` is <xref:System.Collections.Generic.SortedList%602.Count%2A>.\n  example:\n  - \"The following code example shows how to use the <xref:System.Collections.Generic.SortedList%602.System%23Collections%23IDictionary%23Remove%2A> of the <xref:System.Collections.IDictionary?displayProperty=fullName> interface with a <xref:System.Collections.Generic.SortedList%602>.  \\n  \\n The code example is part of a larger example, including output, provided for the <xref:System.Collections.Generic.SortedList%602.System%23Collections%23IDictionary%23Add%2A> method.  \\n  \\n [!code-csharp[Generic.SortedList.IDictionary#31](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.SortedList.IDictionary/CS/source.cs#31)]\\n [!code-vb[Generic.SortedList.IDictionary#31](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.SortedList.IDictionary/VB/source.vb#31)]  \\n[!code-csharp[Generic.SortedList.IDictionary#10](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.SortedList.IDictionary/CS/source.cs#10)]\\n[!code-vb[Generic.SortedList.IDictionary#10](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.SortedList.IDictionary/VB/source.vb#10)]  \\n[!code-csharp[Generic.SortedList.IDictionary#32](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.SortedList.IDictionary/CS/source.cs#32)]\\n[!code-vb[Generic.SortedList.IDictionary#32](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.SortedList.IDictionary/VB/source.vb#32)]\"\n  syntax:\n    content: void IDictionary.Remove (object key);\n    parameters:\n    - id: key\n      type: System.Object\n      description: The key of the element to remove.\n  overload: System.Collections.Generic.SortedList`2.System#Collections#IDictionary#Remove*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>key</code> is `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/SortedList`2.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.Generic.SortedList`2.System#Collections#IDictionary#Values\n  commentId: P:System.Collections.Generic.SortedList`2.System#Collections#IDictionary#Values\n  id: System#Collections#IDictionary#Values\n  isEii: true\n  parent: System.Collections.Generic.SortedList`2\n  langs:\n  - csharp\n  name: IDictionary.Values\n  nameWithType: SortedList<TKey,TValue>.IDictionary.Values\n  fullName: SortedList<TKey,TValue>.IDictionary.Values\n  type: Property\n  assemblies:\n  - System.Collections\n  - System\n  - netstandard\n  namespace: System.Collections.Generic\n  summary: Gets an <xref href=\"System.Collections.ICollection\"></xref> containing the values in the <xref href=\"System.Collections.IDictionary\"></xref>.\n  remarks: \"The order of the values in the <xref:System.Collections.ICollection> is the same as the order in the <xref:System.Collections.Generic.SortedList%602>.  \\n  \\n Retrieving the value of this property is an O(1) operation.\"\n  example:\n  - \"The following code example shows how to use the <xref:System.Collections.Generic.SortedList%602.System%23Collections%23IDictionary%23Values%2A> property of the <xref:System.Collections.IDictionary?displayProperty=fullName> interface with a <xref:System.Collections.Generic.SortedList%602>, to list the values in the sorted list. The example also shows how to enumerate the key/value pairs in the sorted list; note that the enumerator for the <xref:System.Collections.IDictionary?displayProperty=fullName> interface returns <xref:System.Collections.DictionaryEntry> objects rather than <xref:System.Collections.Generic.KeyValuePair%602> objects.  \\n  \\n The code example is part of a larger example, including output, provided for the <xref:System.Collections.Generic.SortedList%602.System%23Collections%23IDictionary%23Add%2A> method.  \\n  \\n [!code-csharp[Generic.SortedList.IDictionary#31](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.SortedList.IDictionary/CS/source.cs#31)]\\n [!code-vb[Generic.SortedList.IDictionary#31](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.SortedList.IDictionary/VB/source.vb#31)]  \\n[!code-csharp[Generic.SortedList.IDictionary#8](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.SortedList.IDictionary/CS/source.cs#8)]\\n[!code-vb[Generic.SortedList.IDictionary#8](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.SortedList.IDictionary/VB/source.vb#8)]  \\n[!code-csharp[Generic.SortedList.IDictionary#7](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.SortedList.IDictionary/CS/source.cs#7)]\\n[!code-vb[Generic.SortedList.IDictionary#7](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.SortedList.IDictionary/VB/source.vb#7)]  \\n[!code-csharp[Generic.SortedList.IDictionary#32](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.SortedList.IDictionary/CS/source.cs#32)]\\n[!code-vb[Generic.SortedList.IDictionary#32](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.SortedList.IDictionary/VB/source.vb#32)]\"\n  syntax:\n    content: System.Collections.ICollection System.Collections.IDictionary.Values { get; }\n    return:\n      type: System.Collections.ICollection\n      description: An <xref href=\"System.Collections.ICollection\"></xref> containing the values in the <xref href=\"System.Collections.IDictionary\"></xref>.\n  overload: System.Collections.Generic.SortedList`2.System#Collections#IDictionary#Values*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/SortedList`2.xml\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.Generic.SortedList`2.System#Collections#IEnumerable#GetEnumerator\n  commentId: M:System.Collections.Generic.SortedList`2.System#Collections#IEnumerable#GetEnumerator\n  id: System#Collections#IEnumerable#GetEnumerator\n  isEii: true\n  parent: System.Collections.Generic.SortedList`2\n  langs:\n  - csharp\n  name: IEnumerable.GetEnumerator()\n  nameWithType: SortedList<TKey,TValue>.IEnumerable.GetEnumerator()\n  fullName: SortedList<TKey,TValue>.IEnumerable.GetEnumerator()\n  type: Method\n  assemblies:\n  - System.Collections\n  - System\n  - netstandard\n  namespace: System.Collections.Generic\n  summary: Returns an enumerator that iterates through a collection.\n  remarks: \"The `foreach` statement of the C# language (`for each` in C++, `For Each` in Visual Basic) hides the complexity of the enumerators.  Therefore, using `foreach` is recommended, instead of directly manipulating the enumerator.  \\n  \\n Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.  \\n  \\n Initially, the enumerator is positioned before the first element in the collection. <xref:System.Collections.IEnumerator.Reset%2A> also brings the enumerator back to this position.  At this position, <xref:System.Collections.IEnumerator.Current%2A> is undefined. Therefore, you must call <xref:System.Collections.IEnumerator.MoveNext%2A> to advance the enumerator to the first element of the collection before reading the value of <xref:System.Collections.IEnumerator.Current%2A>.  \\n  \\n <xref:System.Collections.IEnumerator.Current%2A> returns the same object until either <xref:System.Collections.IEnumerator.MoveNext%2A> or <xref:System.Collections.IEnumerator.Reset%2A> is called. <xref:System.Collections.IEnumerator.MoveNext%2A> sets <xref:System.Collections.IEnumerator.Current%2A> to the next element.  \\n  \\n If <xref:System.Collections.IEnumerator.MoveNext%2A> passes the end of the collection, the enumerator is positioned after the last element in the collection and <xref:System.Collections.IEnumerator.MoveNext%2A> returns `false`. When the enumerator is at this position, subsequent calls to <xref:System.Collections.IEnumerator.MoveNext%2A> also return `false`. If the last call to <xref:System.Collections.IEnumerator.MoveNext%2A> returned `false`, <xref:System.Collections.IEnumerator.Current%2A> is undefined. To set <xref:System.Collections.IEnumerator.Current%2A> to the first element of the collection again, you can call <xref:System.Collections.IEnumerator.Reset%2A> followed by <xref:System.Collections.IEnumerator.MoveNext%2A>.  \\n  \\n An enumerator remains valid as long as the collection remains unchanged. If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and its behavior is undefined.  \\n  \\n The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure.  To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.  To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.  \\n  \\n Default implementations of collections in <xref:System.Collections.Generic?displayProperty=fullName> are not synchronized.  \\n  \\n This method is an O(1) operation.\"\n  syntax:\n    content: System.Collections.IEnumerator IEnumerable.GetEnumerator ();\n    parameters: []\n    return:\n      type: System.Collections.IEnumerator\n      description: An <xref href=\"System.Collections.IEnumerator\"></xref> that can be used to iterate through the collection.\n  overload: System.Collections.Generic.SortedList`2.System#Collections#IEnumerable#GetEnumerator*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/SortedList`2.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\nreferences:\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.ArgumentNullException\n  parent: System\n  isExternal: false\n  name: ArgumentNullException\n  nameWithType: ArgumentNullException\n  fullName: System.ArgumentNullException\n- uid: System.ArgumentException\n  parent: System\n  isExternal: false\n  name: ArgumentException\n  nameWithType: ArgumentException\n  fullName: System.ArgumentException\n- uid: System.ArgumentOutOfRangeException\n  parent: System\n  isExternal: false\n  name: ArgumentOutOfRangeException\n  nameWithType: ArgumentOutOfRangeException\n  fullName: System.ArgumentOutOfRangeException\n- uid: System.OutOfMemoryException\n  parent: System\n  isExternal: false\n  name: OutOfMemoryException\n  nameWithType: OutOfMemoryException\n  fullName: System.OutOfMemoryException\n- uid: System.Collections.Generic.KeyNotFoundException\n  parent: System.Collections.Generic\n  isExternal: false\n  name: KeyNotFoundException\n  nameWithType: KeyNotFoundException\n  fullName: System.Collections.Generic.KeyNotFoundException\n- uid: System.Collections.Generic.SortedList`2.#ctor\n  parent: System.Collections.Generic.SortedList`2\n  isExternal: false\n  name: SortedList<TKey,TValue>()\n  nameWithType: SortedList<TKey,TValue>.SortedList<TKey,TValue>()\n  fullName: SortedList<TKey,TValue>.SortedList<TKey,TValue>()\n- uid: System.Collections.Generic.SortedList`2.#ctor(System.Collections.Generic.IComparer{`0})\n  parent: System.Collections.Generic.SortedList`2\n  isExternal: false\n  name: SortedList<TKey,TValue>(IComparer<TKey>)\n  nameWithType: SortedList<TKey,TValue>.SortedList<TKey,TValue>(IComparer<TKey>)\n  fullName: SortedList<TKey,TValue>.SortedList<TKey,TValue>(IComparer<TKey>)\n- uid: System.Collections.Generic.IComparer`1\n  name: IComparer<T>\n  nameWithType: IComparer<T>\n  fullName: System.Collections.Generic.IComparer<T>\n- uid: TKey\n  name: TKey\n  nameWithType: TKey\n  fullName: TKey\n- uid: System.Collections.Generic.IComparer{TKey}\n  parent: System.Collections.Generic\n  isExternal: false\n  name: IComparer<TKey>\n  nameWithType: IComparer<TKey>\n  fullName: System.Collections.Generic.IComparer<TKey>\n  spec.csharp:\n  - uid: System.Collections.Generic.IComparer`1\n    name: IComparer\n    nameWithType: IComparer\n    fullName: System.Collections.Generic.IComparer\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: TKey\n    name: TKey\n    nameWithType: TKey\n    fullName: TKey\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Collections.Generic.SortedList`2.#ctor(System.Collections.Generic.IDictionary{`0,`1})\n  parent: System.Collections.Generic.SortedList`2\n  isExternal: false\n  name: SortedList<TKey,TValue>(IDictionary<TKey,TValue>)\n  nameWithType: SortedList<TKey,TValue>.SortedList<TKey,TValue>(IDictionary<TKey,TValue>)\n  fullName: SortedList<TKey,TValue>.SortedList<TKey,TValue>(IDictionary<TKey,TValue>)\n- uid: System.Collections.Generic.IDictionary`2\n  parent: System.Collections.Generic\n  isExternal: false\n  name: IDictionary<TKey,TValue>\n  nameWithType: IDictionary<TKey,TValue>\n  fullName: System.Collections.Generic.IDictionary<TKey,TValue>\n- uid: System.Collections.Generic.SortedList`2.#ctor(System.Int32)\n  parent: System.Collections.Generic.SortedList`2\n  isExternal: false\n  name: SortedList<TKey,TValue>(Int32)\n  nameWithType: SortedList<TKey,TValue>.SortedList<TKey,TValue>(Int32)\n  fullName: SortedList<TKey,TValue>.SortedList<TKey,TValue>(Int32)\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Collections.Generic.SortedList`2.#ctor(System.Collections.Generic.IDictionary{`0,`1},System.Collections.Generic.IComparer{`0})\n  parent: System.Collections.Generic.SortedList`2\n  isExternal: false\n  name: SortedList<TKey,TValue>(IDictionary<TKey,TValue>, IComparer<TKey>)\n  nameWithType: SortedList<TKey,TValue>.SortedList<TKey,TValue>(IDictionary<TKey,TValue>, IComparer<TKey>)\n  fullName: SortedList<TKey,TValue>.SortedList<TKey,TValue>(IDictionary<TKey,TValue>, IComparer<TKey>)\n- uid: System.Collections.Generic.SortedList`2.#ctor(System.Int32,System.Collections.Generic.IComparer{`0})\n  parent: System.Collections.Generic.SortedList`2\n  isExternal: false\n  name: SortedList<TKey,TValue>(Int32, IComparer<TKey>)\n  nameWithType: SortedList<TKey,TValue>.SortedList<TKey,TValue>(Int32, IComparer<TKey>)\n  fullName: SortedList<TKey,TValue>.SortedList<TKey,TValue>(Int32, IComparer<TKey>)\n- uid: System.Collections.Generic.SortedList`2.Add(`0,`1)\n  parent: System.Collections.Generic.SortedList`2\n  isExternal: false\n  name: Add(TKey, TValue)\n  nameWithType: SortedList<TKey,TValue>.Add(TKey, TValue)\n  fullName: SortedList<TKey,TValue>.Add(TKey, TValue)\n- uid: TValue\n  isExternal: true\n  name: TValue\n  nameWithType: TValue\n  fullName: TValue\n- uid: System.Collections.Generic.SortedList`2.Capacity\n  parent: System.Collections.Generic.SortedList`2\n  isExternal: false\n  name: Capacity\n  nameWithType: SortedList<TKey,TValue>.Capacity\n  fullName: SortedList<TKey,TValue>.Capacity\n- uid: System.Collections.Generic.SortedList`2.Clear\n  parent: System.Collections.Generic.SortedList`2\n  isExternal: false\n  name: Clear()\n  nameWithType: SortedList<TKey,TValue>.Clear()\n  fullName: SortedList<TKey,TValue>.Clear()\n- uid: System.Collections.Generic.SortedList`2.Comparer\n  parent: System.Collections.Generic.SortedList`2\n  isExternal: false\n  name: Comparer\n  nameWithType: SortedList<TKey,TValue>.Comparer\n  fullName: SortedList<TKey,TValue>.Comparer\n- uid: System.Collections.Generic.SortedList`2.ContainsKey(`0)\n  parent: System.Collections.Generic.SortedList`2\n  isExternal: false\n  name: ContainsKey(TKey)\n  nameWithType: SortedList<TKey,TValue>.ContainsKey(TKey)\n  fullName: SortedList<TKey,TValue>.ContainsKey(TKey)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Collections.Generic.SortedList`2.ContainsValue(`1)\n  parent: System.Collections.Generic.SortedList`2\n  isExternal: false\n  name: ContainsValue(TValue)\n  nameWithType: SortedList<TKey,TValue>.ContainsValue(TValue)\n  fullName: SortedList<TKey,TValue>.ContainsValue(TValue)\n- uid: System.Collections.Generic.SortedList`2.Count\n  parent: System.Collections.Generic.SortedList`2\n  isExternal: false\n  name: Count\n  nameWithType: SortedList<TKey,TValue>.Count\n  fullName: SortedList<TKey,TValue>.Count\n- uid: System.Collections.Generic.SortedList`2.GetEnumerator\n  parent: System.Collections.Generic.SortedList`2\n  isExternal: false\n  name: GetEnumerator()\n  nameWithType: SortedList<TKey,TValue>.GetEnumerator()\n  fullName: SortedList<TKey,TValue>.GetEnumerator()\n- uid: System.Collections.Generic.IEnumerator`1\n  name: IEnumerator<T>\n  nameWithType: IEnumerator<T>\n  fullName: System.Collections.Generic.IEnumerator<T>\n- uid: System.Collections.Generic.KeyValuePair`2\n  name: KeyValuePair<TKey,TValue>\n  nameWithType: KeyValuePair<TKey,TValue>\n  fullName: System.Collections.Generic.KeyValuePair<TKey,TValue>\n- uid: System.Collections.Generic.IEnumerator{System.Collections.Generic.KeyValuePair{TKey,TValue}}\n  parent: System.Collections.Generic\n  isExternal: false\n  name: IEnumerator<KeyValuePair<TKey,TValue>>\n  nameWithType: IEnumerator<KeyValuePair<TKey,TValue>>\n  fullName: System.Collections.Generic.IEnumerator<System.Collections.Generic.KeyValuePair<TKey,TValue>>\n  spec.csharp:\n  - uid: System.Collections.Generic.IEnumerator`1\n    name: IEnumerator\n    nameWithType: IEnumerator\n    fullName: System.Collections.Generic.IEnumerator\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Collections.Generic.KeyValuePair`2\n    name: KeyValuePair\n    nameWithType: KeyValuePair\n    fullName: System.Collections.Generic.KeyValuePair\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: TKey\n    name: TKey\n    nameWithType: TKey\n    fullName: TKey\n  - name: ','\n    nameWithType: ','\n    fullName: ','\n  - uid: TValue\n    name: TValue\n    nameWithType: TValue\n    fullName: TValue\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Collections.Generic.SortedList`2.IndexOfKey(`0)\n  parent: System.Collections.Generic.SortedList`2\n  isExternal: false\n  name: IndexOfKey(TKey)\n  nameWithType: SortedList<TKey,TValue>.IndexOfKey(TKey)\n  fullName: SortedList<TKey,TValue>.IndexOfKey(TKey)\n- uid: System.Collections.Generic.SortedList`2.IndexOfValue(`1)\n  parent: System.Collections.Generic.SortedList`2\n  isExternal: false\n  name: IndexOfValue(TValue)\n  nameWithType: SortedList<TKey,TValue>.IndexOfValue(TValue)\n  fullName: SortedList<TKey,TValue>.IndexOfValue(TValue)\n- uid: System.Collections.Generic.SortedList`2.Item(`0)\n  parent: System.Collections.Generic.SortedList`2\n  isExternal: false\n  name: Item(TKey)\n  nameWithType: SortedList<TKey,TValue>.Item(TKey)\n  fullName: SortedList<TKey,TValue>.Item(TKey)\n- uid: System.Collections.Generic.SortedList`2.Keys\n  parent: System.Collections.Generic.SortedList`2\n  isExternal: false\n  name: Keys\n  nameWithType: SortedList<TKey,TValue>.Keys\n  fullName: SortedList<TKey,TValue>.Keys\n- uid: System.Collections.Generic.IList`1\n  name: IList<T>\n  nameWithType: IList<T>\n  fullName: System.Collections.Generic.IList<T>\n- uid: System.Collections.Generic.IList{TKey}\n  parent: System.Collections.Generic\n  isExternal: false\n  name: IList<TKey>\n  nameWithType: IList<TKey>\n  fullName: System.Collections.Generic.IList<TKey>\n  spec.csharp:\n  - uid: System.Collections.Generic.IList`1\n    name: IList\n    nameWithType: IList\n    fullName: System.Collections.Generic.IList\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: TKey\n    name: TKey\n    nameWithType: TKey\n    fullName: TKey\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Collections.Generic.SortedList`2.Remove(`0)\n  parent: System.Collections.Generic.SortedList`2\n  isExternal: false\n  name: Remove(TKey)\n  nameWithType: SortedList<TKey,TValue>.Remove(TKey)\n  fullName: SortedList<TKey,TValue>.Remove(TKey)\n- uid: System.Collections.Generic.SortedList`2.RemoveAt(System.Int32)\n  parent: System.Collections.Generic.SortedList`2\n  isExternal: false\n  name: RemoveAt(Int32)\n  nameWithType: SortedList<TKey,TValue>.RemoveAt(Int32)\n  fullName: SortedList<TKey,TValue>.RemoveAt(Int32)\n- uid: System.Collections.Generic.SortedList`2.TrimExcess\n  parent: System.Collections.Generic.SortedList`2\n  isExternal: false\n  name: TrimExcess()\n  nameWithType: SortedList<TKey,TValue>.TrimExcess()\n  fullName: SortedList<TKey,TValue>.TrimExcess()\n- uid: System.Collections.Generic.SortedList`2.TryGetValue(`0,`1@)\n  parent: System.Collections.Generic.SortedList`2\n  isExternal: false\n  name: TryGetValue(TKey, TValue)\n  nameWithType: SortedList<TKey,TValue>.TryGetValue(TKey, TValue)\n  fullName: SortedList<TKey,TValue>.TryGetValue(TKey, TValue)\n- uid: System.Collections.Generic.SortedList`2.Values\n  parent: System.Collections.Generic.SortedList`2\n  isExternal: false\n  name: Values\n  nameWithType: SortedList<TKey,TValue>.Values\n  fullName: SortedList<TKey,TValue>.Values\n- uid: System.Collections.Generic.IList{TValue}\n  parent: System.Collections.Generic\n  isExternal: false\n  name: IList<TValue>\n  nameWithType: IList<TValue>\n  fullName: System.Collections.Generic.IList<TValue>\n  spec.csharp:\n  - uid: System.Collections.Generic.IList`1\n    name: IList\n    nameWithType: IList\n    fullName: System.Collections.Generic.IList\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: TValue\n    name: TValue\n    nameWithType: TValue\n    fullName: TValue\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Collections.Generic.SortedList`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#Add(System.Collections.Generic.KeyValuePair{`0,`1})\n  parent: System.Collections.Generic.SortedList`2\n  isExternal: false\n  name: ICollection<KeyValuePair<TKey,TValue>>.Add(KeyValuePair<TKey,TValue>)\n  nameWithType: SortedList<TKey,TValue>.ICollection<KeyValuePair<TKey,TValue>>.Add(KeyValuePair<TKey,TValue>)\n  fullName: SortedList<TKey,TValue>.ICollection<KeyValuePair<TKey,TValue>>.Add(KeyValuePair<TKey,TValue>)\n- uid: System.Collections.Generic.SortedList`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#Contains(System.Collections.Generic.KeyValuePair{`0,`1})\n  parent: System.Collections.Generic.SortedList`2\n  isExternal: false\n  name: ICollection<KeyValuePair<TKey,TValue>>.Contains(KeyValuePair<TKey,TValue>)\n  nameWithType: SortedList<TKey,TValue>.ICollection<KeyValuePair<TKey,TValue>>.Contains(KeyValuePair<TKey,TValue>)\n  fullName: SortedList<TKey,TValue>.ICollection<KeyValuePair<TKey,TValue>>.Contains(KeyValuePair<TKey,TValue>)\n- uid: System.Collections.Generic.SortedList`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)\n  parent: System.Collections.Generic.SortedList`2\n  isExternal: false\n  name: ICollection<KeyValuePair<TKey,TValue>>.CopyTo(KeyValuePair<TKey,TValue>[], Int32)\n  nameWithType: SortedList<TKey,TValue>.ICollection<KeyValuePair<TKey,TValue>>.CopyTo(KeyValuePair<TKey,TValue>[], Int32)\n  fullName: SortedList<TKey,TValue>.ICollection<KeyValuePair<TKey,TValue>>.CopyTo(KeyValuePair<TKey,TValue>[], Int32)\n- uid: System.Collections.Generic.KeyValuePair{TKey,TValue}[]\n  parent: System.Collections.Generic\n  isExternal: false\n  name: KeyValuePair<TKey,TValue>[]\n  nameWithType: KeyValuePair<TKey,TValue>[]\n  fullName: System.Collections.Generic.KeyValuePair<TKey,TValue>[]\n  spec.csharp:\n  - uid: System.Collections.Generic.KeyValuePair`2\n    name: KeyValuePair\n    nameWithType: KeyValuePair\n    fullName: System.Collections.Generic.KeyValuePair\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: TKey\n    name: TKey\n    nameWithType: TKey\n    fullName: TKey\n  - name: ','\n    nameWithType: ','\n    fullName: ','\n  - uid: TValue\n    name: TValue\n    nameWithType: TValue\n    fullName: TValue\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Collections.Generic.SortedList`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#IsReadOnly\n  parent: System.Collections.Generic.SortedList`2\n  isExternal: false\n  name: ICollection<KeyValuePair<TKey,TValue>>.IsReadOnly\n  nameWithType: SortedList<TKey,TValue>.ICollection<KeyValuePair<TKey,TValue>>.IsReadOnly\n  fullName: SortedList<TKey,TValue>.ICollection<KeyValuePair<TKey,TValue>>.IsReadOnly\n- uid: System.Collections.Generic.SortedList`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#Remove(System.Collections.Generic.KeyValuePair{`0,`1})\n  parent: System.Collections.Generic.SortedList`2\n  isExternal: false\n  name: ICollection<KeyValuePair<TKey,TValue>>.Remove(KeyValuePair<TKey,TValue>)\n  nameWithType: SortedList<TKey,TValue>.ICollection<KeyValuePair<TKey,TValue>>.Remove(KeyValuePair<TKey,TValue>)\n  fullName: SortedList<TKey,TValue>.ICollection<KeyValuePair<TKey,TValue>>.Remove(KeyValuePair<TKey,TValue>)\n- uid: System.Collections.Generic.SortedList`2.System#Collections#Generic#IDictionary{TKey,TValue}#Keys\n  parent: System.Collections.Generic.SortedList`2\n  isExternal: false\n  name: IDictionary<TKey,TValue>.Keys\n  nameWithType: SortedList<TKey,TValue>.IDictionary<TKey,TValue>.Keys\n  fullName: SortedList<TKey,TValue>.IDictionary<TKey,TValue>.Keys\n- uid: System.Collections.Generic.ICollection`1\n  name: ICollection<T>\n  nameWithType: ICollection<T>\n  fullName: System.Collections.Generic.ICollection<T>\n- uid: System.Collections.Generic.ICollection{TKey}\n  parent: System.Collections.Generic\n  isExternal: false\n  name: ICollection<TKey>\n  nameWithType: ICollection<TKey>\n  fullName: System.Collections.Generic.ICollection<TKey>\n  spec.csharp:\n  - uid: System.Collections.Generic.ICollection`1\n    name: ICollection\n    nameWithType: ICollection\n    fullName: System.Collections.Generic.ICollection\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: TKey\n    name: TKey\n    nameWithType: TKey\n    fullName: TKey\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Collections.Generic.SortedList`2.System#Collections#Generic#IDictionary{TKey,TValue}#Values\n  parent: System.Collections.Generic.SortedList`2\n  isExternal: false\n  name: IDictionary<TKey,TValue>.Values\n  nameWithType: SortedList<TKey,TValue>.IDictionary<TKey,TValue>.Values\n  fullName: SortedList<TKey,TValue>.IDictionary<TKey,TValue>.Values\n- uid: System.Collections.Generic.ICollection{TValue}\n  parent: System.Collections.Generic\n  isExternal: false\n  name: ICollection<TValue>\n  nameWithType: ICollection<TValue>\n  fullName: System.Collections.Generic.ICollection<TValue>\n  spec.csharp:\n  - uid: System.Collections.Generic.ICollection`1\n    name: ICollection\n    nameWithType: ICollection\n    fullName: System.Collections.Generic.ICollection\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: TValue\n    name: TValue\n    nameWithType: TValue\n    fullName: TValue\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Collections.Generic.SortedList`2.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{TKey,TValue}}#GetEnumerator\n  parent: System.Collections.Generic.SortedList`2\n  isExternal: false\n  name: IEnumerable<KeyValuePair<TKey,TValue>>.GetEnumerator()\n  nameWithType: SortedList<TKey,TValue>.IEnumerable<KeyValuePair<TKey,TValue>>.GetEnumerator()\n  fullName: SortedList<TKey,TValue>.IEnumerable<KeyValuePair<TKey,TValue>>.GetEnumerator()\n- uid: System.Collections.Generic.SortedList`2.System#Collections#Generic#IReadOnlyDictionary{TKey,TValue}#Keys\n  parent: System.Collections.Generic.SortedList`2\n  isExternal: false\n  name: IReadOnlyDictionary<TKey,TValue>.Keys\n  nameWithType: SortedList<TKey,TValue>.IReadOnlyDictionary<TKey,TValue>.Keys\n  fullName: SortedList<TKey,TValue>.IReadOnlyDictionary<TKey,TValue>.Keys\n- uid: System.Collections.Generic.IEnumerable`1\n  name: IEnumerable<T>\n  nameWithType: IEnumerable<T>\n  fullName: System.Collections.Generic.IEnumerable<T>\n- uid: System.Collections.Generic.IEnumerable{TKey}\n  parent: System.Collections.Generic\n  isExternal: false\n  name: IEnumerable<TKey>\n  nameWithType: IEnumerable<TKey>\n  fullName: System.Collections.Generic.IEnumerable<TKey>\n  spec.csharp:\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    nameWithType: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: TKey\n    name: TKey\n    nameWithType: TKey\n    fullName: TKey\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Collections.Generic.SortedList`2.System#Collections#Generic#IReadOnlyDictionary{TKey,TValue}#Values\n  parent: System.Collections.Generic.SortedList`2\n  isExternal: false\n  name: IReadOnlyDictionary<TKey,TValue>.Values\n  nameWithType: SortedList<TKey,TValue>.IReadOnlyDictionary<TKey,TValue>.Values\n  fullName: SortedList<TKey,TValue>.IReadOnlyDictionary<TKey,TValue>.Values\n- uid: System.Collections.Generic.IEnumerable{TValue}\n  parent: System.Collections.Generic\n  isExternal: false\n  name: IEnumerable<TValue>\n  nameWithType: IEnumerable<TValue>\n  fullName: System.Collections.Generic.IEnumerable<TValue>\n  spec.csharp:\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    nameWithType: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: TValue\n    name: TValue\n    nameWithType: TValue\n    fullName: TValue\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Collections.Generic.SortedList`2.System#Collections#ICollection#CopyTo(System.Array,System.Int32)\n  parent: System.Collections.Generic.SortedList`2\n  isExternal: false\n  name: ICollection.CopyTo(Array, Int32)\n  nameWithType: SortedList<TKey,TValue>.ICollection.CopyTo(Array, Int32)\n  fullName: SortedList<TKey,TValue>.ICollection.CopyTo(Array, Int32)\n- uid: System.Array\n  parent: System\n  isExternal: false\n  name: Array\n  nameWithType: Array\n  fullName: System.Array\n- uid: System.Collections.Generic.SortedList`2.System#Collections#ICollection#IsSynchronized\n  parent: System.Collections.Generic.SortedList`2\n  isExternal: false\n  name: ICollection.IsSynchronized\n  nameWithType: SortedList<TKey,TValue>.ICollection.IsSynchronized\n  fullName: SortedList<TKey,TValue>.ICollection.IsSynchronized\n- uid: System.Collections.Generic.SortedList`2.System#Collections#ICollection#SyncRoot\n  parent: System.Collections.Generic.SortedList`2\n  isExternal: false\n  name: ICollection.SyncRoot\n  nameWithType: SortedList<TKey,TValue>.ICollection.SyncRoot\n  fullName: SortedList<TKey,TValue>.ICollection.SyncRoot\n- uid: System.Collections.Generic.SortedList`2.System#Collections#IDictionary#Add(System.Object,System.Object)\n  parent: System.Collections.Generic.SortedList`2\n  isExternal: false\n  name: IDictionary.Add(Object, Object)\n  nameWithType: SortedList<TKey,TValue>.IDictionary.Add(Object, Object)\n  fullName: SortedList<TKey,TValue>.IDictionary.Add(Object, Object)\n- uid: System.Collections.Generic.SortedList`2.System#Collections#IDictionary#Contains(System.Object)\n  parent: System.Collections.Generic.SortedList`2\n  isExternal: false\n  name: IDictionary.Contains(Object)\n  nameWithType: SortedList<TKey,TValue>.IDictionary.Contains(Object)\n  fullName: SortedList<TKey,TValue>.IDictionary.Contains(Object)\n- uid: System.Collections.Generic.SortedList`2.System#Collections#IDictionary#GetEnumerator\n  parent: System.Collections.Generic.SortedList`2\n  isExternal: false\n  name: IDictionary.GetEnumerator()\n  nameWithType: SortedList<TKey,TValue>.IDictionary.GetEnumerator()\n  fullName: SortedList<TKey,TValue>.IDictionary.GetEnumerator()\n- uid: System.Collections.IDictionaryEnumerator\n  parent: System.Collections\n  isExternal: false\n  name: IDictionaryEnumerator\n  nameWithType: IDictionaryEnumerator\n  fullName: System.Collections.IDictionaryEnumerator\n- uid: System.Collections.Generic.SortedList`2.System#Collections#IDictionary#IsFixedSize\n  parent: System.Collections.Generic.SortedList`2\n  isExternal: false\n  name: IDictionary.IsFixedSize\n  nameWithType: SortedList<TKey,TValue>.IDictionary.IsFixedSize\n  fullName: SortedList<TKey,TValue>.IDictionary.IsFixedSize\n- uid: System.Collections.Generic.SortedList`2.System#Collections#IDictionary#IsReadOnly\n  parent: System.Collections.Generic.SortedList`2\n  isExternal: false\n  name: IDictionary.IsReadOnly\n  nameWithType: SortedList<TKey,TValue>.IDictionary.IsReadOnly\n  fullName: SortedList<TKey,TValue>.IDictionary.IsReadOnly\n- uid: System.Collections.Generic.SortedList`2.System#Collections#IDictionary#Item(System.Object)\n  parent: System.Collections.Generic.SortedList`2\n  isExternal: false\n  name: IDictionary.Item(Object)\n  nameWithType: SortedList<TKey,TValue>.IDictionary.Item(Object)\n  fullName: SortedList<TKey,TValue>.IDictionary.Item(Object)\n- uid: System.Collections.Generic.SortedList`2.System#Collections#IDictionary#Keys\n  parent: System.Collections.Generic.SortedList`2\n  isExternal: false\n  name: IDictionary.Keys\n  nameWithType: SortedList<TKey,TValue>.IDictionary.Keys\n  fullName: SortedList<TKey,TValue>.IDictionary.Keys\n- uid: System.Collections.ICollection\n  parent: System.Collections\n  isExternal: false\n  name: ICollection\n  nameWithType: ICollection\n  fullName: System.Collections.ICollection\n- uid: System.Collections.Generic.SortedList`2.System#Collections#IDictionary#Remove(System.Object)\n  parent: System.Collections.Generic.SortedList`2\n  isExternal: false\n  name: IDictionary.Remove(Object)\n  nameWithType: SortedList<TKey,TValue>.IDictionary.Remove(Object)\n  fullName: SortedList<TKey,TValue>.IDictionary.Remove(Object)\n- uid: System.Collections.Generic.SortedList`2.System#Collections#IDictionary#Values\n  parent: System.Collections.Generic.SortedList`2\n  isExternal: false\n  name: IDictionary.Values\n  nameWithType: SortedList<TKey,TValue>.IDictionary.Values\n  fullName: SortedList<TKey,TValue>.IDictionary.Values\n- uid: System.Collections.Generic.SortedList`2.System#Collections#IEnumerable#GetEnumerator\n  parent: System.Collections.Generic.SortedList`2\n  isExternal: false\n  name: IEnumerable.GetEnumerator()\n  nameWithType: SortedList<TKey,TValue>.IEnumerable.GetEnumerator()\n  fullName: SortedList<TKey,TValue>.IEnumerable.GetEnumerator()\n- uid: System.Collections.IEnumerator\n  parent: System.Collections\n  isExternal: false\n  name: IEnumerator\n  nameWithType: IEnumerator\n  fullName: System.Collections.IEnumerator\n- uid: System.Collections.Generic.SortedList`2.#ctor*\n  parent: System.Collections.Generic.SortedList`2\n  isExternal: false\n  name: SortedList<TKey,TValue>\n  nameWithType: SortedList<TKey,TValue>.SortedList<TKey,TValue>\n  fullName: SortedList<TKey,TValue>.SortedList<TKey,TValue>\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/SortedList`2.xml\n- uid: System.Collections.Generic.SortedList`2.Add*\n  parent: System.Collections.Generic.SortedList`2\n  isExternal: false\n  name: Add\n  nameWithType: SortedList<TKey,TValue>.Add\n  fullName: SortedList<TKey,TValue>.Add\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/SortedList`2.xml\n- uid: System.Collections.Generic.SortedList`2.Capacity*\n  parent: System.Collections.Generic.SortedList`2\n  isExternal: false\n  name: Capacity\n  nameWithType: SortedList<TKey,TValue>.Capacity\n  fullName: SortedList<TKey,TValue>.Capacity\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/SortedList`2.xml\n- uid: System.Collections.Generic.SortedList`2.Clear*\n  parent: System.Collections.Generic.SortedList`2\n  isExternal: false\n  name: Clear\n  nameWithType: SortedList<TKey,TValue>.Clear\n  fullName: SortedList<TKey,TValue>.Clear\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/SortedList`2.xml\n- uid: System.Collections.Generic.SortedList`2.Comparer*\n  parent: System.Collections.Generic.SortedList`2\n  isExternal: false\n  name: Comparer\n  nameWithType: SortedList<TKey,TValue>.Comparer\n  fullName: SortedList<TKey,TValue>.Comparer\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/SortedList`2.xml\n- uid: System.Collections.Generic.SortedList`2.ContainsKey*\n  parent: System.Collections.Generic.SortedList`2\n  isExternal: false\n  name: ContainsKey\n  nameWithType: SortedList<TKey,TValue>.ContainsKey\n  fullName: SortedList<TKey,TValue>.ContainsKey\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/SortedList`2.xml\n- uid: System.Collections.Generic.SortedList`2.ContainsValue*\n  parent: System.Collections.Generic.SortedList`2\n  isExternal: false\n  name: ContainsValue\n  nameWithType: SortedList<TKey,TValue>.ContainsValue\n  fullName: SortedList<TKey,TValue>.ContainsValue\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/SortedList`2.xml\n- uid: System.Collections.Generic.SortedList`2.Count*\n  parent: System.Collections.Generic.SortedList`2\n  isExternal: false\n  name: Count\n  nameWithType: SortedList<TKey,TValue>.Count\n  fullName: SortedList<TKey,TValue>.Count\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/SortedList`2.xml\n- uid: System.Collections.Generic.SortedList`2.GetEnumerator*\n  parent: System.Collections.Generic.SortedList`2\n  isExternal: false\n  name: GetEnumerator\n  nameWithType: SortedList<TKey,TValue>.GetEnumerator\n  fullName: SortedList<TKey,TValue>.GetEnumerator\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/SortedList`2.xml\n- uid: System.Collections.Generic.SortedList`2.IndexOfKey*\n  parent: System.Collections.Generic.SortedList`2\n  isExternal: false\n  name: IndexOfKey\n  nameWithType: SortedList<TKey,TValue>.IndexOfKey\n  fullName: SortedList<TKey,TValue>.IndexOfKey\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/SortedList`2.xml\n- uid: System.Collections.Generic.SortedList`2.IndexOfValue*\n  parent: System.Collections.Generic.SortedList`2\n  isExternal: false\n  name: IndexOfValue\n  nameWithType: SortedList<TKey,TValue>.IndexOfValue\n  fullName: SortedList<TKey,TValue>.IndexOfValue\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/SortedList`2.xml\n- uid: System.Collections.Generic.SortedList`2.Item*\n  parent: System.Collections.Generic.SortedList`2\n  isExternal: false\n  name: Item\n  nameWithType: SortedList<TKey,TValue>.Item\n  fullName: SortedList<TKey,TValue>.Item\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/SortedList`2.xml\n- uid: System.Collections.Generic.SortedList`2.Keys*\n  parent: System.Collections.Generic.SortedList`2\n  isExternal: false\n  name: Keys\n  nameWithType: SortedList<TKey,TValue>.Keys\n  fullName: SortedList<TKey,TValue>.Keys\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/SortedList`2.xml\n- uid: System.Collections.Generic.SortedList`2.Remove*\n  parent: System.Collections.Generic.SortedList`2\n  isExternal: false\n  name: Remove\n  nameWithType: SortedList<TKey,TValue>.Remove\n  fullName: SortedList<TKey,TValue>.Remove\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/SortedList`2.xml\n- uid: System.Collections.Generic.SortedList`2.RemoveAt*\n  parent: System.Collections.Generic.SortedList`2\n  isExternal: false\n  name: RemoveAt\n  nameWithType: SortedList<TKey,TValue>.RemoveAt\n  fullName: SortedList<TKey,TValue>.RemoveAt\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/SortedList`2.xml\n- uid: System.Collections.Generic.SortedList`2.TrimExcess*\n  parent: System.Collections.Generic.SortedList`2\n  isExternal: false\n  name: TrimExcess\n  nameWithType: SortedList<TKey,TValue>.TrimExcess\n  fullName: SortedList<TKey,TValue>.TrimExcess\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/SortedList`2.xml\n- uid: System.Collections.Generic.SortedList`2.TryGetValue*\n  parent: System.Collections.Generic.SortedList`2\n  isExternal: false\n  name: TryGetValue\n  nameWithType: SortedList<TKey,TValue>.TryGetValue\n  fullName: SortedList<TKey,TValue>.TryGetValue\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/SortedList`2.xml\n- uid: System.Collections.Generic.SortedList`2.Values*\n  parent: System.Collections.Generic.SortedList`2\n  isExternal: false\n  name: Values\n  nameWithType: SortedList<TKey,TValue>.Values\n  fullName: SortedList<TKey,TValue>.Values\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/SortedList`2.xml\n- uid: System.Collections.Generic.SortedList`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#Add*\n  parent: System.Collections.Generic.SortedList`2\n  isExternal: false\n  name: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Add\n  nameWithType: SortedList<TKey,TValue>.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Add\n  fullName: SortedList<TKey,TValue>.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Add\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/SortedList`2.xml\n- uid: System.Collections.Generic.SortedList`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#Contains*\n  parent: System.Collections.Generic.SortedList`2\n  isExternal: false\n  name: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Contains\n  nameWithType: SortedList<TKey,TValue>.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Contains\n  fullName: SortedList<TKey,TValue>.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Contains\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/SortedList`2.xml\n- uid: System.Collections.Generic.SortedList`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#CopyTo*\n  parent: System.Collections.Generic.SortedList`2\n  isExternal: false\n  name: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.CopyTo\n  nameWithType: SortedList<TKey,TValue>.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.CopyTo\n  fullName: SortedList<TKey,TValue>.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.CopyTo\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/SortedList`2.xml\n- uid: System.Collections.Generic.SortedList`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#IsReadOnly*\n  parent: System.Collections.Generic.SortedList`2\n  isExternal: false\n  name: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.IsReadOnly\n  nameWithType: SortedList<TKey,TValue>.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.IsReadOnly\n  fullName: SortedList<TKey,TValue>.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.IsReadOnly\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/SortedList`2.xml\n- uid: System.Collections.Generic.SortedList`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#Remove*\n  parent: System.Collections.Generic.SortedList`2\n  isExternal: false\n  name: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Remove\n  nameWithType: SortedList<TKey,TValue>.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Remove\n  fullName: SortedList<TKey,TValue>.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Remove\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/SortedList`2.xml\n- uid: System.Collections.Generic.SortedList`2.System#Collections#Generic#IDictionary{TKey,TValue}#Keys*\n  parent: System.Collections.Generic.SortedList`2\n  isExternal: false\n  name: System.Collections.Generic.IDictionary<TKey,TValue>.Keys\n  nameWithType: SortedList<TKey,TValue>.System.Collections.Generic.IDictionary<TKey,TValue>.Keys\n  fullName: SortedList<TKey,TValue>.System.Collections.Generic.IDictionary<TKey,TValue>.Keys\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/SortedList`2.xml\n- uid: System.Collections.Generic.SortedList`2.System#Collections#Generic#IDictionary{TKey,TValue}#Values*\n  parent: System.Collections.Generic.SortedList`2\n  isExternal: false\n  name: System.Collections.Generic.IDictionary<TKey,TValue>.Values\n  nameWithType: SortedList<TKey,TValue>.System.Collections.Generic.IDictionary<TKey,TValue>.Values\n  fullName: SortedList<TKey,TValue>.System.Collections.Generic.IDictionary<TKey,TValue>.Values\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/SortedList`2.xml\n- uid: System.Collections.Generic.SortedList`2.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{TKey,TValue}}#GetEnumerator*\n  parent: System.Collections.Generic.SortedList`2\n  isExternal: false\n  name: System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<TKey,TValue>>.GetEnumerator\n  nameWithType: SortedList<TKey,TValue>.System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<TKey,TValue>>.GetEnumerator\n  fullName: SortedList<TKey,TValue>.System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<TKey,TValue>>.GetEnumerator\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/SortedList`2.xml\n- uid: System.Collections.Generic.SortedList`2.System#Collections#Generic#IReadOnlyDictionary{TKey,TValue}#Keys*\n  parent: System.Collections.Generic.SortedList`2\n  isExternal: false\n  name: System.Collections.Generic.IReadOnlyDictionary<TKey,TValue>.Keys\n  nameWithType: SortedList<TKey,TValue>.System.Collections.Generic.IReadOnlyDictionary<TKey,TValue>.Keys\n  fullName: SortedList<TKey,TValue>.System.Collections.Generic.IReadOnlyDictionary<TKey,TValue>.Keys\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/SortedList`2.xml\n- uid: System.Collections.Generic.SortedList`2.System#Collections#Generic#IReadOnlyDictionary{TKey,TValue}#Values*\n  parent: System.Collections.Generic.SortedList`2\n  isExternal: false\n  name: System.Collections.Generic.IReadOnlyDictionary<TKey,TValue>.Values\n  nameWithType: SortedList<TKey,TValue>.System.Collections.Generic.IReadOnlyDictionary<TKey,TValue>.Values\n  fullName: SortedList<TKey,TValue>.System.Collections.Generic.IReadOnlyDictionary<TKey,TValue>.Values\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/SortedList`2.xml\n- uid: System.Collections.Generic.SortedList`2.System#Collections#ICollection#CopyTo*\n  parent: System.Collections.Generic.SortedList`2\n  isExternal: false\n  name: System.Collections.ICollection.CopyTo\n  nameWithType: SortedList<TKey,TValue>.System.Collections.ICollection.CopyTo\n  fullName: SortedList<TKey,TValue>.System.Collections.ICollection.CopyTo\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/SortedList`2.xml\n- uid: System.Collections.Generic.SortedList`2.System#Collections#ICollection#IsSynchronized*\n  parent: System.Collections.Generic.SortedList`2\n  isExternal: false\n  name: System.Collections.ICollection.IsSynchronized\n  nameWithType: SortedList<TKey,TValue>.System.Collections.ICollection.IsSynchronized\n  fullName: SortedList<TKey,TValue>.System.Collections.ICollection.IsSynchronized\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/SortedList`2.xml\n- uid: System.Collections.Generic.SortedList`2.System#Collections#ICollection#SyncRoot*\n  parent: System.Collections.Generic.SortedList`2\n  isExternal: false\n  name: System.Collections.ICollection.SyncRoot\n  nameWithType: SortedList<TKey,TValue>.System.Collections.ICollection.SyncRoot\n  fullName: SortedList<TKey,TValue>.System.Collections.ICollection.SyncRoot\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/SortedList`2.xml\n- uid: System.Collections.Generic.SortedList`2.System#Collections#IDictionary#Add*\n  parent: System.Collections.Generic.SortedList`2\n  isExternal: false\n  name: System.Collections.IDictionary.Add\n  nameWithType: SortedList<TKey,TValue>.System.Collections.IDictionary.Add\n  fullName: SortedList<TKey,TValue>.System.Collections.IDictionary.Add\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/SortedList`2.xml\n- uid: System.Collections.Generic.SortedList`2.System#Collections#IDictionary#Contains*\n  parent: System.Collections.Generic.SortedList`2\n  isExternal: false\n  name: System.Collections.IDictionary.Contains\n  nameWithType: SortedList<TKey,TValue>.System.Collections.IDictionary.Contains\n  fullName: SortedList<TKey,TValue>.System.Collections.IDictionary.Contains\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/SortedList`2.xml\n- uid: System.Collections.Generic.SortedList`2.System#Collections#IDictionary#GetEnumerator*\n  parent: System.Collections.Generic.SortedList`2\n  isExternal: false\n  name: System.Collections.IDictionary.GetEnumerator\n  nameWithType: SortedList<TKey,TValue>.System.Collections.IDictionary.GetEnumerator\n  fullName: SortedList<TKey,TValue>.System.Collections.IDictionary.GetEnumerator\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/SortedList`2.xml\n- uid: System.Collections.Generic.SortedList`2.System#Collections#IDictionary#IsFixedSize*\n  parent: System.Collections.Generic.SortedList`2\n  isExternal: false\n  name: System.Collections.IDictionary.IsFixedSize\n  nameWithType: SortedList<TKey,TValue>.System.Collections.IDictionary.IsFixedSize\n  fullName: SortedList<TKey,TValue>.System.Collections.IDictionary.IsFixedSize\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/SortedList`2.xml\n- uid: System.Collections.Generic.SortedList`2.System#Collections#IDictionary#IsReadOnly*\n  parent: System.Collections.Generic.SortedList`2\n  isExternal: false\n  name: System.Collections.IDictionary.IsReadOnly\n  nameWithType: SortedList<TKey,TValue>.System.Collections.IDictionary.IsReadOnly\n  fullName: SortedList<TKey,TValue>.System.Collections.IDictionary.IsReadOnly\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/SortedList`2.xml\n- uid: System.Collections.Generic.SortedList`2.System#Collections#IDictionary#Item*\n  parent: System.Collections.Generic.SortedList`2\n  isExternal: false\n  name: System.Collections.IDictionary.Item\n  nameWithType: SortedList<TKey,TValue>.System.Collections.IDictionary.Item\n  fullName: SortedList<TKey,TValue>.System.Collections.IDictionary.Item\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/SortedList`2.xml\n- uid: System.Collections.Generic.SortedList`2.System#Collections#IDictionary#Keys*\n  parent: System.Collections.Generic.SortedList`2\n  isExternal: false\n  name: System.Collections.IDictionary.Keys\n  nameWithType: SortedList<TKey,TValue>.System.Collections.IDictionary.Keys\n  fullName: SortedList<TKey,TValue>.System.Collections.IDictionary.Keys\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/SortedList`2.xml\n- uid: System.Collections.Generic.SortedList`2.System#Collections#IDictionary#Remove*\n  parent: System.Collections.Generic.SortedList`2\n  isExternal: false\n  name: System.Collections.IDictionary.Remove\n  nameWithType: SortedList<TKey,TValue>.System.Collections.IDictionary.Remove\n  fullName: SortedList<TKey,TValue>.System.Collections.IDictionary.Remove\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/SortedList`2.xml\n- uid: System.Collections.Generic.SortedList`2.System#Collections#IDictionary#Values*\n  parent: System.Collections.Generic.SortedList`2\n  isExternal: false\n  name: System.Collections.IDictionary.Values\n  nameWithType: SortedList<TKey,TValue>.System.Collections.IDictionary.Values\n  fullName: SortedList<TKey,TValue>.System.Collections.IDictionary.Values\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/SortedList`2.xml\n- uid: System.Collections.Generic.SortedList`2.System#Collections#IEnumerable#GetEnumerator*\n  parent: System.Collections.Generic.SortedList`2\n  isExternal: false\n  name: System.Collections.IEnumerable.GetEnumerator\n  nameWithType: SortedList<TKey,TValue>.System.Collections.IEnumerable.GetEnumerator\n  fullName: SortedList<TKey,TValue>.System.Collections.IEnumerable.GetEnumerator\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/SortedList`2.xml\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: Object.Equals(Object)\n  fullName: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: Object.GetHashCode()\n  fullName: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: false\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: false\n  name: ToString()\n  nameWithType: Object.ToString()\n  fullName: Object.ToString()\n- uid: System.Collections.Generic.CollectionExtensions.GetValueOrDefault``2(System.Collections.Generic.IReadOnlyDictionary{``0,``1},``0)\n  parent: System.Collections.Generic.CollectionExtensions\n  isExternal: false\n  name: GetValueOrDefault<TKey,TValue>(IReadOnlyDictionary<TKey,TValue>, TKey)\n  nameWithType: CollectionExtensions.GetValueOrDefault<TKey,TValue>(IReadOnlyDictionary<TKey,TValue>, TKey)\n  fullName: CollectionExtensions.GetValueOrDefault<TKey,TValue>(IReadOnlyDictionary<TKey,TValue>, TKey)\n- uid: System.Collections.Generic.CollectionExtensions.GetValueOrDefault``2(System.Collections.Generic.IReadOnlyDictionary{``0,``1},``0,``1)\n  parent: System.Collections.Generic.CollectionExtensions\n  isExternal: false\n  name: GetValueOrDefault<TKey,TValue>(IReadOnlyDictionary<TKey,TValue>, TKey, TValue)\n  nameWithType: CollectionExtensions.GetValueOrDefault<TKey,TValue>(IReadOnlyDictionary<TKey,TValue>, TKey, TValue)\n  fullName: CollectionExtensions.GetValueOrDefault<TKey,TValue>(IReadOnlyDictionary<TKey,TValue>, TKey, TValue)\n- uid: System.Collections.Generic.CollectionExtensions.Remove``2(System.Collections.Generic.IDictionary{``0,``1},``0,``1@)\n  parent: System.Collections.Generic.CollectionExtensions\n  isExternal: false\n  name: Remove<TKey,TValue>(IDictionary<TKey,TValue>, TKey, TValue)\n  nameWithType: CollectionExtensions.Remove<TKey,TValue>(IDictionary<TKey,TValue>, TKey, TValue)\n  fullName: CollectionExtensions.Remove<TKey,TValue>(IDictionary<TKey,TValue>, TKey, TValue)\n- uid: System.Collections.Generic.CollectionExtensions.TryAdd``2(System.Collections.Generic.IDictionary{``0,``1},``0,``1)\n  parent: System.Collections.Generic.CollectionExtensions\n  isExternal: false\n  name: TryAdd<TKey,TValue>(IDictionary<TKey,TValue>, TKey, TValue)\n  nameWithType: CollectionExtensions.TryAdd<TKey,TValue>(IDictionary<TKey,TValue>, TKey, TValue)\n  fullName: CollectionExtensions.TryAdd<TKey,TValue>(IDictionary<TKey,TValue>, TKey, TValue)\n- uid: System.Collections.Immutable.ImmutableArray.ToImmutableArray``1(System.Collections.Generic.IEnumerable{``0})\n  parent: System.Collections.Immutable.ImmutableArray\n  isExternal: false\n  name: ToImmutableArray<TSource>(IEnumerable<TSource>)\n  nameWithType: ImmutableArray.ToImmutableArray<TSource>(IEnumerable<TSource>)\n  fullName: ImmutableArray.ToImmutableArray<TSource>(IEnumerable<TSource>)\n- uid: System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})\n  parent: System.Collections.Immutable.ImmutableDictionary\n  isExternal: false\n  name: ToImmutableDictionary<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>)\n  nameWithType: ImmutableDictionary.ToImmutableDictionary<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>)\n  fullName: ImmutableDictionary.ToImmutableDictionary<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>)\n- uid: System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})\n  parent: System.Collections.Immutable.ImmutableDictionary\n  isExternal: false\n  name: ToImmutableDictionary<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>, IEqualityComparer<TKey>)\n  nameWithType: ImmutableDictionary.ToImmutableDictionary<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>, IEqualityComparer<TKey>)\n  fullName: ImmutableDictionary.ToImmutableDictionary<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>, IEqualityComparer<TKey>)\n- uid: System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}})\n  parent: System.Collections.Immutable.ImmutableDictionary\n  isExternal: false\n  name: ToImmutableDictionary<TKey,TValue>(IEnumerable<KeyValuePair<TKey,TValue>>)\n  nameWithType: ImmutableDictionary.ToImmutableDictionary<TKey,TValue>(IEnumerable<KeyValuePair<TKey,TValue>>)\n  fullName: ImmutableDictionary.ToImmutableDictionary<TKey,TValue>(IEnumerable<KeyValuePair<TKey,TValue>>)\n- uid: System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}},System.Collections.Generic.IEqualityComparer{``0})\n  parent: System.Collections.Immutable.ImmutableDictionary\n  isExternal: false\n  name: ToImmutableDictionary<TKey,TValue>(IEnumerable<KeyValuePair<TKey,TValue>>, IEqualityComparer<TKey>)\n  nameWithType: ImmutableDictionary.ToImmutableDictionary<TKey,TValue>(IEnumerable<KeyValuePair<TKey,TValue>>, IEqualityComparer<TKey>)\n  fullName: ImmutableDictionary.ToImmutableDictionary<TKey,TValue>(IEnumerable<KeyValuePair<TKey,TValue>>, IEqualityComparer<TKey>)\n- uid: System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}},System.Collections.Generic.IEqualityComparer{``0},System.Collections.Generic.IEqualityComparer{``1})\n  parent: System.Collections.Immutable.ImmutableDictionary\n  isExternal: false\n  name: ToImmutableDictionary<TKey,TValue>(IEnumerable<KeyValuePair<TKey,TValue>>, IEqualityComparer<TKey>, IEqualityComparer<TValue>)\n  nameWithType: ImmutableDictionary.ToImmutableDictionary<TKey,TValue>(IEnumerable<KeyValuePair<TKey,TValue>>, IEqualityComparer<TKey>, IEqualityComparer<TValue>)\n  fullName: ImmutableDictionary.ToImmutableDictionary<TKey,TValue>(IEnumerable<KeyValuePair<TKey,TValue>>, IEqualityComparer<TKey>, IEqualityComparer<TValue>)\n- uid: System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})\n  parent: System.Collections.Immutable.ImmutableDictionary\n  isExternal: false\n  name: ToImmutableDictionary<TSource,TKey,TValue>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TValue>)\n  nameWithType: ImmutableDictionary.ToImmutableDictionary<TSource,TKey,TValue>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TValue>)\n  fullName: ImmutableDictionary.ToImmutableDictionary<TSource,TKey,TValue>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TValue>)\n- uid: System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})\n  parent: System.Collections.Immutable.ImmutableDictionary\n  isExternal: false\n  name: ToImmutableDictionary<TSource,TKey,TValue>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TValue>, IEqualityComparer<TKey>)\n  nameWithType: ImmutableDictionary.ToImmutableDictionary<TSource,TKey,TValue>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TValue>, IEqualityComparer<TKey>)\n  fullName: ImmutableDictionary.ToImmutableDictionary<TSource,TKey,TValue>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TValue>, IEqualityComparer<TKey>)\n- uid: System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1},System.Collections.Generic.IEqualityComparer{``2})\n  parent: System.Collections.Immutable.ImmutableDictionary\n  isExternal: false\n  name: ToImmutableDictionary<TSource,TKey,TValue>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TValue>, IEqualityComparer<TKey>, IEqualityComparer<TValue>)\n  nameWithType: ImmutableDictionary.ToImmutableDictionary<TSource,TKey,TValue>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TValue>, IEqualityComparer<TKey>, IEqualityComparer<TValue>)\n  fullName: ImmutableDictionary.ToImmutableDictionary<TSource,TKey,TValue>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TValue>, IEqualityComparer<TKey>, IEqualityComparer<TValue>)\n- uid: System.Collections.Immutable.ImmutableHashSet.ToImmutableHashSet``1(System.Collections.Generic.IEnumerable{``0})\n  parent: System.Collections.Immutable.ImmutableHashSet\n  isExternal: false\n  name: ToImmutableHashSet<TSource>(IEnumerable<TSource>)\n  nameWithType: ImmutableHashSet.ToImmutableHashSet<TSource>(IEnumerable<TSource>)\n  fullName: ImmutableHashSet.ToImmutableHashSet<TSource>(IEnumerable<TSource>)\n- uid: System.Collections.Immutable.ImmutableHashSet.ToImmutableHashSet``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})\n  parent: System.Collections.Immutable.ImmutableHashSet\n  isExternal: false\n  name: ToImmutableHashSet<TSource>(IEnumerable<TSource>, IEqualityComparer<TSource>)\n  nameWithType: ImmutableHashSet.ToImmutableHashSet<TSource>(IEnumerable<TSource>, IEqualityComparer<TSource>)\n  fullName: ImmutableHashSet.ToImmutableHashSet<TSource>(IEnumerable<TSource>, IEqualityComparer<TSource>)\n- uid: System.Collections.Immutable.ImmutableList.ToImmutableList``1(System.Collections.Generic.IEnumerable{``0})\n  parent: System.Collections.Immutable.ImmutableList\n  isExternal: false\n  name: ToImmutableList<TSource>(IEnumerable<TSource>)\n  nameWithType: ImmutableList.ToImmutableList<TSource>(IEnumerable<TSource>)\n  fullName: ImmutableList.ToImmutableList<TSource>(IEnumerable<TSource>)\n- uid: System.Collections.Immutable.ImmutableSortedDictionary.ToImmutableSortedDictionary``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}})\n  parent: System.Collections.Immutable.ImmutableSortedDictionary\n  isExternal: false\n  name: ToImmutableSortedDictionary<TKey,TValue>(IEnumerable<KeyValuePair<TKey,TValue>>)\n  nameWithType: ImmutableSortedDictionary.ToImmutableSortedDictionary<TKey,TValue>(IEnumerable<KeyValuePair<TKey,TValue>>)\n  fullName: ImmutableSortedDictionary.ToImmutableSortedDictionary<TKey,TValue>(IEnumerable<KeyValuePair<TKey,TValue>>)\n- uid: System.Collections.Immutable.ImmutableSortedDictionary.ToImmutableSortedDictionary``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}},System.Collections.Generic.IComparer{``0})\n  parent: System.Collections.Immutable.ImmutableSortedDictionary\n  isExternal: false\n  name: ToImmutableSortedDictionary<TKey,TValue>(IEnumerable<KeyValuePair<TKey,TValue>>, IComparer<TKey>)\n  nameWithType: ImmutableSortedDictionary.ToImmutableSortedDictionary<TKey,TValue>(IEnumerable<KeyValuePair<TKey,TValue>>, IComparer<TKey>)\n  fullName: ImmutableSortedDictionary.ToImmutableSortedDictionary<TKey,TValue>(IEnumerable<KeyValuePair<TKey,TValue>>, IComparer<TKey>)\n- uid: System.Collections.Immutable.ImmutableSortedDictionary.ToImmutableSortedDictionary``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}},System.Collections.Generic.IComparer{``0},System.Collections.Generic.IEqualityComparer{``1})\n  parent: System.Collections.Immutable.ImmutableSortedDictionary\n  isExternal: false\n  name: ToImmutableSortedDictionary<TKey,TValue>(IEnumerable<KeyValuePair<TKey,TValue>>, IComparer<TKey>, IEqualityComparer<TValue>)\n  nameWithType: ImmutableSortedDictionary.ToImmutableSortedDictionary<TKey,TValue>(IEnumerable<KeyValuePair<TKey,TValue>>, IComparer<TKey>, IEqualityComparer<TValue>)\n  fullName: ImmutableSortedDictionary.ToImmutableSortedDictionary<TKey,TValue>(IEnumerable<KeyValuePair<TKey,TValue>>, IComparer<TKey>, IEqualityComparer<TValue>)\n- uid: System.Collections.Immutable.ImmutableSortedDictionary.ToImmutableSortedDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})\n  parent: System.Collections.Immutable.ImmutableSortedDictionary\n  isExternal: false\n  name: ToImmutableSortedDictionary<TSource,TKey,TValue>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TValue>)\n  nameWithType: ImmutableSortedDictionary.ToImmutableSortedDictionary<TSource,TKey,TValue>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TValue>)\n  fullName: ImmutableSortedDictionary.ToImmutableSortedDictionary<TSource,TKey,TValue>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TValue>)\n- uid: System.Collections.Immutable.ImmutableSortedDictionary.ToImmutableSortedDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IComparer{``1})\n  parent: System.Collections.Immutable.ImmutableSortedDictionary\n  isExternal: false\n  name: ToImmutableSortedDictionary<TSource,TKey,TValue>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TValue>, IComparer<TKey>)\n  nameWithType: ImmutableSortedDictionary.ToImmutableSortedDictionary<TSource,TKey,TValue>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TValue>, IComparer<TKey>)\n  fullName: ImmutableSortedDictionary.ToImmutableSortedDictionary<TSource,TKey,TValue>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TValue>, IComparer<TKey>)\n- uid: System.Collections.Immutable.ImmutableSortedDictionary.ToImmutableSortedDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IComparer{``1},System.Collections.Generic.IEqualityComparer{``2})\n  parent: System.Collections.Immutable.ImmutableSortedDictionary\n  isExternal: false\n  name: ToImmutableSortedDictionary<TSource,TKey,TValue>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TValue>, IComparer<TKey>, IEqualityComparer<TValue>)\n  nameWithType: ImmutableSortedDictionary.ToImmutableSortedDictionary<TSource,TKey,TValue>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TValue>, IComparer<TKey>, IEqualityComparer<TValue>)\n  fullName: ImmutableSortedDictionary.ToImmutableSortedDictionary<TSource,TKey,TValue>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TValue>, IComparer<TKey>, IEqualityComparer<TValue>)\n- uid: System.Collections.Immutable.ImmutableSortedSet.ToImmutableSortedSet``1(System.Collections.Generic.IEnumerable{``0})\n  parent: System.Collections.Immutable.ImmutableSortedSet\n  isExternal: false\n  name: ToImmutableSortedSet<TSource>(IEnumerable<TSource>)\n  nameWithType: ImmutableSortedSet.ToImmutableSortedSet<TSource>(IEnumerable<TSource>)\n  fullName: ImmutableSortedSet.ToImmutableSortedSet<TSource>(IEnumerable<TSource>)\n- uid: System.Collections.Immutable.ImmutableSortedSet.ToImmutableSortedSet``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IComparer{``0})\n  parent: System.Collections.Immutable.ImmutableSortedSet\n  isExternal: false\n  name: ToImmutableSortedSet<TSource>(IEnumerable<TSource>, IComparer<TSource>)\n  nameWithType: ImmutableSortedSet.ToImmutableSortedSet<TSource>(IEnumerable<TSource>, IComparer<TSource>)\n  fullName: ImmutableSortedSet.ToImmutableSortedSet<TSource>(IEnumerable<TSource>, IComparer<TSource>)\n- uid: System.Data.DataTableExtensions.CopyToDataTable``1(System.Collections.Generic.IEnumerable{``0})\n  parent: System.Data.DataTableExtensions\n  isExternal: false\n  name: CopyToDataTable<T>(IEnumerable<T>)\n  nameWithType: DataTableExtensions.CopyToDataTable<T>(IEnumerable<T>)\n  fullName: DataTableExtensions.CopyToDataTable<T>(IEnumerable<T>)\n- uid: System.Data.DataTableExtensions.CopyToDataTable``1(System.Collections.Generic.IEnumerable{``0},System.Data.DataTable,System.Data.LoadOption)\n  parent: System.Data.DataTableExtensions\n  isExternal: false\n  name: CopyToDataTable<T>(IEnumerable<T>, DataTable, LoadOption)\n  nameWithType: DataTableExtensions.CopyToDataTable<T>(IEnumerable<T>, DataTable, LoadOption)\n  fullName: DataTableExtensions.CopyToDataTable<T>(IEnumerable<T>, DataTable, LoadOption)\n- uid: System.Data.DataTableExtensions.CopyToDataTable``1(System.Collections.Generic.IEnumerable{``0},System.Data.DataTable,System.Data.LoadOption,System.Data.FillErrorEventHandler)\n  parent: System.Data.DataTableExtensions\n  isExternal: false\n  name: CopyToDataTable<T>(IEnumerable<T>, DataTable, LoadOption, FillErrorEventHandler)\n  nameWithType: DataTableExtensions.CopyToDataTable<T>(IEnumerable<T>, DataTable, LoadOption, FillErrorEventHandler)\n  fullName: DataTableExtensions.CopyToDataTable<T>(IEnumerable<T>, DataTable, LoadOption, FillErrorEventHandler)\n- uid: System.Linq.Enumerable.Aggregate``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,``0})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Aggregate<TSource>(IEnumerable<TSource>, Func<TSource,TSource,TSource>)\n  nameWithType: Enumerable.Aggregate<TSource>(IEnumerable<TSource>, Func<TSource,TSource,TSource>)\n  fullName: Enumerable.Aggregate<TSource>(IEnumerable<TSource>, Func<TSource,TSource,TSource>)\n- uid: System.Linq.Enumerable.Aggregate``2(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Aggregate<TSource,TAccumulate>(IEnumerable<TSource>, TAccumulate, Func<TAccumulate,TSource,TAccumulate>)\n  nameWithType: Enumerable.Aggregate<TSource,TAccumulate>(IEnumerable<TSource>, TAccumulate, Func<TAccumulate,TSource,TAccumulate>)\n  fullName: Enumerable.Aggregate<TSource,TAccumulate>(IEnumerable<TSource>, TAccumulate, Func<TAccumulate,TSource,TAccumulate>)\n- uid: System.Linq.Enumerable.Aggregate``3(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``2})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Aggregate<TSource,TAccumulate,TResult>(IEnumerable<TSource>, TAccumulate, Func<TAccumulate,TSource,TAccumulate>, Func<TAccumulate,TResult>)\n  nameWithType: Enumerable.Aggregate<TSource,TAccumulate,TResult>(IEnumerable<TSource>, TAccumulate, Func<TAccumulate,TSource,TAccumulate>, Func<TAccumulate,TResult>)\n  fullName: Enumerable.Aggregate<TSource,TAccumulate,TResult>(IEnumerable<TSource>, TAccumulate, Func<TAccumulate,TSource,TAccumulate>, Func<TAccumulate,TResult>)\n- uid: System.Linq.Enumerable.All``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: All<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n  nameWithType: Enumerable.All<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n  fullName: Enumerable.All<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n- uid: System.Linq.Enumerable.Any``1(System.Collections.Generic.IEnumerable{``0})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Any<TSource>(IEnumerable<TSource>)\n  nameWithType: Enumerable.Any<TSource>(IEnumerable<TSource>)\n  fullName: Enumerable.Any<TSource>(IEnumerable<TSource>)\n- uid: System.Linq.Enumerable.Any``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Any<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n  nameWithType: Enumerable.Any<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n  fullName: Enumerable.Any<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n- uid: System.Linq.Enumerable.Append``1(System.Collections.Generic.IEnumerable{``0},``0)\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Append<TSource>(IEnumerable<TSource>, TSource)\n  nameWithType: Enumerable.Append<TSource>(IEnumerable<TSource>, TSource)\n  fullName: Enumerable.Append<TSource>(IEnumerable<TSource>, TSource)\n- uid: System.Linq.Enumerable.AsEnumerable``1(System.Collections.Generic.IEnumerable{``0})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: AsEnumerable<TSource>(IEnumerable<TSource>)\n  nameWithType: Enumerable.AsEnumerable<TSource>(IEnumerable<TSource>)\n  fullName: Enumerable.AsEnumerable<TSource>(IEnumerable<TSource>)\n- uid: System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Decimal})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Average(IEnumerable<Decimal>)\n  nameWithType: Enumerable.Average(IEnumerable<Decimal>)\n  fullName: Enumerable.Average(IEnumerable<Decimal>)\n- uid: System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Double})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Average(IEnumerable<Double>)\n  nameWithType: Enumerable.Average(IEnumerable<Double>)\n  fullName: Enumerable.Average(IEnumerable<Double>)\n- uid: System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Int32})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Average(IEnumerable<Int32>)\n  nameWithType: Enumerable.Average(IEnumerable<Int32>)\n  fullName: Enumerable.Average(IEnumerable<Int32>)\n- uid: System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Int64})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Average(IEnumerable<Int64>)\n  nameWithType: Enumerable.Average(IEnumerable<Int64>)\n  fullName: Enumerable.Average(IEnumerable<Int64>)\n- uid: System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Average(IEnumerable<Nullable<Decimal>>)\n  nameWithType: Enumerable.Average(IEnumerable<Nullable<Decimal>>)\n  fullName: Enumerable.Average(IEnumerable<Nullable<Decimal>>)\n- uid: System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Average(IEnumerable<Nullable<Double>>)\n  nameWithType: Enumerable.Average(IEnumerable<Nullable<Double>>)\n  fullName: Enumerable.Average(IEnumerable<Nullable<Double>>)\n- uid: System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Average(IEnumerable<Nullable<Int32>>)\n  nameWithType: Enumerable.Average(IEnumerable<Nullable<Int32>>)\n  fullName: Enumerable.Average(IEnumerable<Nullable<Int32>>)\n- uid: System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Average(IEnumerable<Nullable<Int64>>)\n  nameWithType: Enumerable.Average(IEnumerable<Nullable<Int64>>)\n  fullName: Enumerable.Average(IEnumerable<Nullable<Int64>>)\n- uid: System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Average(IEnumerable<Nullable<Single>>)\n  nameWithType: Enumerable.Average(IEnumerable<Nullable<Single>>)\n  fullName: Enumerable.Average(IEnumerable<Nullable<Single>>)\n- uid: System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Single})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Average(IEnumerable<Single>)\n  nameWithType: Enumerable.Average(IEnumerable<Single>)\n  fullName: Enumerable.Average(IEnumerable<Single>)\n- uid: System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Average<TSource>(IEnumerable<TSource>, Func<TSource,Decimal>)\n  nameWithType: Enumerable.Average<TSource>(IEnumerable<TSource>, Func<TSource,Decimal>)\n  fullName: Enumerable.Average<TSource>(IEnumerable<TSource>, Func<TSource,Decimal>)\n- uid: System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Average<TSource>(IEnumerable<TSource>, Func<TSource,Double>)\n  nameWithType: Enumerable.Average<TSource>(IEnumerable<TSource>, Func<TSource,Double>)\n  fullName: Enumerable.Average<TSource>(IEnumerable<TSource>, Func<TSource,Double>)\n- uid: System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Average<TSource>(IEnumerable<TSource>, Func<TSource,Int32>)\n  nameWithType: Enumerable.Average<TSource>(IEnumerable<TSource>, Func<TSource,Int32>)\n  fullName: Enumerable.Average<TSource>(IEnumerable<TSource>, Func<TSource,Int32>)\n- uid: System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Average<TSource>(IEnumerable<TSource>, Func<TSource,Int64>)\n  nameWithType: Enumerable.Average<TSource>(IEnumerable<TSource>, Func<TSource,Int64>)\n  fullName: Enumerable.Average<TSource>(IEnumerable<TSource>, Func<TSource,Int64>)\n- uid: System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Average<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Decimal>>)\n  nameWithType: Enumerable.Average<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Decimal>>)\n  fullName: Enumerable.Average<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Decimal>>)\n- uid: System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Average<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Double>>)\n  nameWithType: Enumerable.Average<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Double>>)\n  fullName: Enumerable.Average<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Double>>)\n- uid: System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Average<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Int32>>)\n  nameWithType: Enumerable.Average<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Int32>>)\n  fullName: Enumerable.Average<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Int32>>)\n- uid: System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Average<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Int64>>)\n  nameWithType: Enumerable.Average<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Int64>>)\n  fullName: Enumerable.Average<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Int64>>)\n- uid: System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Average<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Single>>)\n  nameWithType: Enumerable.Average<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Single>>)\n  fullName: Enumerable.Average<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Single>>)\n- uid: System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Average<TSource>(IEnumerable<TSource>, Func<TSource,Single>)\n  nameWithType: Enumerable.Average<TSource>(IEnumerable<TSource>, Func<TSource,Single>)\n  fullName: Enumerable.Average<TSource>(IEnumerable<TSource>, Func<TSource,Single>)\n- uid: System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Cast<TResult>(IEnumerable)\n  nameWithType: Enumerable.Cast<TResult>(IEnumerable)\n  fullName: Enumerable.Cast<TResult>(IEnumerable)\n- uid: System.Linq.Enumerable.Concat``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Concat<TSource>(IEnumerable<TSource>, IEnumerable<TSource>)\n  nameWithType: Enumerable.Concat<TSource>(IEnumerable<TSource>, IEnumerable<TSource>)\n  fullName: Enumerable.Concat<TSource>(IEnumerable<TSource>, IEnumerable<TSource>)\n- uid: System.Linq.Enumerable.Contains``1(System.Collections.Generic.IEnumerable{``0},``0)\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Contains<TSource>(IEnumerable<TSource>, TSource)\n  nameWithType: Enumerable.Contains<TSource>(IEnumerable<TSource>, TSource)\n  fullName: Enumerable.Contains<TSource>(IEnumerable<TSource>, TSource)\n- uid: System.Linq.Enumerable.Contains``1(System.Collections.Generic.IEnumerable{``0},``0,System.Collections.Generic.IEqualityComparer{``0})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Contains<TSource>(IEnumerable<TSource>, TSource, IEqualityComparer<TSource>)\n  nameWithType: Enumerable.Contains<TSource>(IEnumerable<TSource>, TSource, IEqualityComparer<TSource>)\n  fullName: Enumerable.Contains<TSource>(IEnumerable<TSource>, TSource, IEqualityComparer<TSource>)\n- uid: System.Linq.Enumerable.Count``1(System.Collections.Generic.IEnumerable{``0})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Count<TSource>(IEnumerable<TSource>)\n  nameWithType: Enumerable.Count<TSource>(IEnumerable<TSource>)\n  fullName: Enumerable.Count<TSource>(IEnumerable<TSource>)\n- uid: System.Linq.Enumerable.Count``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Count<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n  nameWithType: Enumerable.Count<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n  fullName: Enumerable.Count<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n- uid: System.Linq.Enumerable.DefaultIfEmpty``1(System.Collections.Generic.IEnumerable{``0})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: DefaultIfEmpty<TSource>(IEnumerable<TSource>)\n  nameWithType: Enumerable.DefaultIfEmpty<TSource>(IEnumerable<TSource>)\n  fullName: Enumerable.DefaultIfEmpty<TSource>(IEnumerable<TSource>)\n- uid: System.Linq.Enumerable.DefaultIfEmpty``1(System.Collections.Generic.IEnumerable{``0},``0)\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: DefaultIfEmpty<TSource>(IEnumerable<TSource>, TSource)\n  nameWithType: Enumerable.DefaultIfEmpty<TSource>(IEnumerable<TSource>, TSource)\n  fullName: Enumerable.DefaultIfEmpty<TSource>(IEnumerable<TSource>, TSource)\n- uid: System.Linq.Enumerable.Distinct``1(System.Collections.Generic.IEnumerable{``0})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Distinct<TSource>(IEnumerable<TSource>)\n  nameWithType: Enumerable.Distinct<TSource>(IEnumerable<TSource>)\n  fullName: Enumerable.Distinct<TSource>(IEnumerable<TSource>)\n- uid: System.Linq.Enumerable.Distinct``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Distinct<TSource>(IEnumerable<TSource>, IEqualityComparer<TSource>)\n  nameWithType: Enumerable.Distinct<TSource>(IEnumerable<TSource>, IEqualityComparer<TSource>)\n  fullName: Enumerable.Distinct<TSource>(IEnumerable<TSource>, IEqualityComparer<TSource>)\n- uid: System.Linq.Enumerable.ElementAt``1(System.Collections.Generic.IEnumerable{``0},System.Int32)\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: ElementAt<TSource>(IEnumerable<TSource>, Int32)\n  nameWithType: Enumerable.ElementAt<TSource>(IEnumerable<TSource>, Int32)\n  fullName: Enumerable.ElementAt<TSource>(IEnumerable<TSource>, Int32)\n- uid: System.Linq.Enumerable.ElementAtOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Int32)\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: ElementAtOrDefault<TSource>(IEnumerable<TSource>, Int32)\n  nameWithType: Enumerable.ElementAtOrDefault<TSource>(IEnumerable<TSource>, Int32)\n  fullName: Enumerable.ElementAtOrDefault<TSource>(IEnumerable<TSource>, Int32)\n- uid: System.Linq.Enumerable.Except``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Except<TSource>(IEnumerable<TSource>, IEnumerable<TSource>)\n  nameWithType: Enumerable.Except<TSource>(IEnumerable<TSource>, IEnumerable<TSource>)\n  fullName: Enumerable.Except<TSource>(IEnumerable<TSource>, IEnumerable<TSource>)\n- uid: System.Linq.Enumerable.Except``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Except<TSource>(IEnumerable<TSource>, IEnumerable<TSource>, IEqualityComparer<TSource>)\n  nameWithType: Enumerable.Except<TSource>(IEnumerable<TSource>, IEnumerable<TSource>, IEqualityComparer<TSource>)\n  fullName: Enumerable.Except<TSource>(IEnumerable<TSource>, IEnumerable<TSource>, IEqualityComparer<TSource>)\n- uid: System.Linq.Enumerable.First``1(System.Collections.Generic.IEnumerable{``0})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: First<TSource>(IEnumerable<TSource>)\n  nameWithType: Enumerable.First<TSource>(IEnumerable<TSource>)\n  fullName: Enumerable.First<TSource>(IEnumerable<TSource>)\n- uid: System.Linq.Enumerable.First``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: First<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n  nameWithType: Enumerable.First<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n  fullName: Enumerable.First<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n- uid: System.Linq.Enumerable.FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: FirstOrDefault<TSource>(IEnumerable<TSource>)\n  nameWithType: Enumerable.FirstOrDefault<TSource>(IEnumerable<TSource>)\n  fullName: Enumerable.FirstOrDefault<TSource>(IEnumerable<TSource>)\n- uid: System.Linq.Enumerable.FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: FirstOrDefault<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n  nameWithType: Enumerable.FirstOrDefault<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n  fullName: Enumerable.FirstOrDefault<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n- uid: System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: GroupBy<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>)\n  nameWithType: Enumerable.GroupBy<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>)\n  fullName: Enumerable.GroupBy<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>)\n- uid: System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: GroupBy<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>, IEqualityComparer<TKey>)\n  nameWithType: Enumerable.GroupBy<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>, IEqualityComparer<TKey>)\n  fullName: Enumerable.GroupBy<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>, IEqualityComparer<TKey>)\n- uid: System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: GroupBy<TSource,TKey,TElement>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TElement>)\n  nameWithType: Enumerable.GroupBy<TSource,TKey,TElement>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TElement>)\n  fullName: Enumerable.GroupBy<TSource,TKey,TElement>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TElement>)\n- uid: System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: GroupBy<TSource,TKey,TElement>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TElement>, IEqualityComparer<TKey>)\n  nameWithType: Enumerable.GroupBy<TSource,TKey,TElement>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TElement>, IEqualityComparer<TKey>)\n  fullName: Enumerable.GroupBy<TSource,TKey,TElement>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TElement>, IEqualityComparer<TKey>)\n- uid: System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: GroupBy<TSource,TKey,TResult>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TKey,IEnumerable<TSource>,TResult>)\n  nameWithType: Enumerable.GroupBy<TSource,TKey,TResult>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TKey,IEnumerable<TSource>,TResult>)\n  fullName: Enumerable.GroupBy<TSource,TKey,TResult>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TKey,IEnumerable<TSource>,TResult>)\n- uid: System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2},System.Collections.Generic.IEqualityComparer{``1})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: GroupBy<TSource,TKey,TResult>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TKey,IEnumerable<TSource>,TResult>, IEqualityComparer<TKey>)\n  nameWithType: Enumerable.GroupBy<TSource,TKey,TResult>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TKey,IEnumerable<TSource>,TResult>, IEqualityComparer<TKey>)\n  fullName: Enumerable.GroupBy<TSource,TKey,TResult>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TKey,IEnumerable<TSource>,TResult>, IEqualityComparer<TKey>)\n- uid: System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: GroupBy<TSource,TKey,TElement,TResult>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TElement>, Func<TKey,IEnumerable<TElement>,TResult>)\n  nameWithType: Enumerable.GroupBy<TSource,TKey,TElement,TResult>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TElement>, Func<TKey,IEnumerable<TElement>,TResult>)\n  fullName: Enumerable.GroupBy<TSource,TKey,TElement,TResult>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TElement>, Func<TKey,IEnumerable<TElement>,TResult>)\n- uid: System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3},System.Collections.Generic.IEqualityComparer{``1})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: GroupBy<TSource,TKey,TElement,TResult>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TElement>, Func<TKey,IEnumerable<TElement>,TResult>, IEqualityComparer<TKey>)\n  nameWithType: Enumerable.GroupBy<TSource,TKey,TElement,TResult>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TElement>, Func<TKey,IEnumerable<TElement>,TResult>, IEqualityComparer<TKey>)\n  fullName: Enumerable.GroupBy<TSource,TKey,TElement,TResult>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TElement>, Func<TKey,IEnumerable<TElement>,TResult>, IEqualityComparer<TKey>)\n- uid: System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: GroupJoin<TOuter,TInner,TKey,TResult>(IEnumerable<TOuter>, IEnumerable<TInner>, Func<TOuter,TKey>, Func<TInner,TKey>, Func<TOuter,IEnumerable<TInner>,TResult>)\n  nameWithType: Enumerable.GroupJoin<TOuter,TInner,TKey,TResult>(IEnumerable<TOuter>, IEnumerable<TInner>, Func<TOuter,TKey>, Func<TInner,TKey>, Func<TOuter,IEnumerable<TInner>,TResult>)\n  fullName: Enumerable.GroupJoin<TOuter,TInner,TKey,TResult>(IEnumerable<TOuter>, IEnumerable<TInner>, Func<TOuter,TKey>, Func<TInner,TKey>, Func<TOuter,IEnumerable<TInner>,TResult>)\n- uid: System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: GroupJoin<TOuter,TInner,TKey,TResult>(IEnumerable<TOuter>, IEnumerable<TInner>, Func<TOuter,TKey>, Func<TInner,TKey>, Func<TOuter,IEnumerable<TInner>,TResult>, IEqualityComparer<TKey>)\n  nameWithType: Enumerable.GroupJoin<TOuter,TInner,TKey,TResult>(IEnumerable<TOuter>, IEnumerable<TInner>, Func<TOuter,TKey>, Func<TInner,TKey>, Func<TOuter,IEnumerable<TInner>,TResult>, IEqualityComparer<TKey>)\n  fullName: Enumerable.GroupJoin<TOuter,TInner,TKey,TResult>(IEnumerable<TOuter>, IEnumerable<TInner>, Func<TOuter,TKey>, Func<TInner,TKey>, Func<TOuter,IEnumerable<TInner>,TResult>, IEqualityComparer<TKey>)\n- uid: System.Linq.Enumerable.Intersect``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Intersect<TSource>(IEnumerable<TSource>, IEnumerable<TSource>)\n  nameWithType: Enumerable.Intersect<TSource>(IEnumerable<TSource>, IEnumerable<TSource>)\n  fullName: Enumerable.Intersect<TSource>(IEnumerable<TSource>, IEnumerable<TSource>)\n- uid: System.Linq.Enumerable.Intersect``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Intersect<TSource>(IEnumerable<TSource>, IEnumerable<TSource>, IEqualityComparer<TSource>)\n  nameWithType: Enumerable.Intersect<TSource>(IEnumerable<TSource>, IEnumerable<TSource>, IEqualityComparer<TSource>)\n  fullName: Enumerable.Intersect<TSource>(IEnumerable<TSource>, IEnumerable<TSource>, IEqualityComparer<TSource>)\n- uid: System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Join<TOuter,TInner,TKey,TResult>(IEnumerable<TOuter>, IEnumerable<TInner>, Func<TOuter,TKey>, Func<TInner,TKey>, Func<TOuter,TInner,TResult>)\n  nameWithType: Enumerable.Join<TOuter,TInner,TKey,TResult>(IEnumerable<TOuter>, IEnumerable<TInner>, Func<TOuter,TKey>, Func<TInner,TKey>, Func<TOuter,TInner,TResult>)\n  fullName: Enumerable.Join<TOuter,TInner,TKey,TResult>(IEnumerable<TOuter>, IEnumerable<TInner>, Func<TOuter,TKey>, Func<TInner,TKey>, Func<TOuter,TInner,TResult>)\n- uid: System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Join<TOuter,TInner,TKey,TResult>(IEnumerable<TOuter>, IEnumerable<TInner>, Func<TOuter,TKey>, Func<TInner,TKey>, Func<TOuter,TInner,TResult>, IEqualityComparer<TKey>)\n  nameWithType: Enumerable.Join<TOuter,TInner,TKey,TResult>(IEnumerable<TOuter>, IEnumerable<TInner>, Func<TOuter,TKey>, Func<TInner,TKey>, Func<TOuter,TInner,TResult>, IEqualityComparer<TKey>)\n  fullName: Enumerable.Join<TOuter,TInner,TKey,TResult>(IEnumerable<TOuter>, IEnumerable<TInner>, Func<TOuter,TKey>, Func<TInner,TKey>, Func<TOuter,TInner,TResult>, IEqualityComparer<TKey>)\n- uid: System.Linq.Enumerable.Last``1(System.Collections.Generic.IEnumerable{``0})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Last<TSource>(IEnumerable<TSource>)\n  nameWithType: Enumerable.Last<TSource>(IEnumerable<TSource>)\n  fullName: Enumerable.Last<TSource>(IEnumerable<TSource>)\n- uid: System.Linq.Enumerable.Last``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Last<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n  nameWithType: Enumerable.Last<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n  fullName: Enumerable.Last<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n- uid: System.Linq.Enumerable.LastOrDefault``1(System.Collections.Generic.IEnumerable{``0})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: LastOrDefault<TSource>(IEnumerable<TSource>)\n  nameWithType: Enumerable.LastOrDefault<TSource>(IEnumerable<TSource>)\n  fullName: Enumerable.LastOrDefault<TSource>(IEnumerable<TSource>)\n- uid: System.Linq.Enumerable.LastOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: LastOrDefault<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n  nameWithType: Enumerable.LastOrDefault<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n  fullName: Enumerable.LastOrDefault<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n- uid: System.Linq.Enumerable.LongCount``1(System.Collections.Generic.IEnumerable{``0})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: LongCount<TSource>(IEnumerable<TSource>)\n  nameWithType: Enumerable.LongCount<TSource>(IEnumerable<TSource>)\n  fullName: Enumerable.LongCount<TSource>(IEnumerable<TSource>)\n- uid: System.Linq.Enumerable.LongCount``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: LongCount<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n  nameWithType: Enumerable.LongCount<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n  fullName: Enumerable.LongCount<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n- uid: System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Decimal})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Max(IEnumerable<Decimal>)\n  nameWithType: Enumerable.Max(IEnumerable<Decimal>)\n  fullName: Enumerable.Max(IEnumerable<Decimal>)\n- uid: System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Double})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Max(IEnumerable<Double>)\n  nameWithType: Enumerable.Max(IEnumerable<Double>)\n  fullName: Enumerable.Max(IEnumerable<Double>)\n- uid: System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Int32})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Max(IEnumerable<Int32>)\n  nameWithType: Enumerable.Max(IEnumerable<Int32>)\n  fullName: Enumerable.Max(IEnumerable<Int32>)\n- uid: System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Int64})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Max(IEnumerable<Int64>)\n  nameWithType: Enumerable.Max(IEnumerable<Int64>)\n  fullName: Enumerable.Max(IEnumerable<Int64>)\n- uid: System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Max(IEnumerable<Nullable<Decimal>>)\n  nameWithType: Enumerable.Max(IEnumerable<Nullable<Decimal>>)\n  fullName: Enumerable.Max(IEnumerable<Nullable<Decimal>>)\n- uid: System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Max(IEnumerable<Nullable<Double>>)\n  nameWithType: Enumerable.Max(IEnumerable<Nullable<Double>>)\n  fullName: Enumerable.Max(IEnumerable<Nullable<Double>>)\n- uid: System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Max(IEnumerable<Nullable<Int32>>)\n  nameWithType: Enumerable.Max(IEnumerable<Nullable<Int32>>)\n  fullName: Enumerable.Max(IEnumerable<Nullable<Int32>>)\n- uid: System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Max(IEnumerable<Nullable<Int64>>)\n  nameWithType: Enumerable.Max(IEnumerable<Nullable<Int64>>)\n  fullName: Enumerable.Max(IEnumerable<Nullable<Int64>>)\n- uid: System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Max(IEnumerable<Nullable<Single>>)\n  nameWithType: Enumerable.Max(IEnumerable<Nullable<Single>>)\n  fullName: Enumerable.Max(IEnumerable<Nullable<Single>>)\n- uid: System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Single})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Max(IEnumerable<Single>)\n  nameWithType: Enumerable.Max(IEnumerable<Single>)\n  fullName: Enumerable.Max(IEnumerable<Single>)\n- uid: System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Max<TSource>(IEnumerable<TSource>)\n  nameWithType: Enumerable.Max<TSource>(IEnumerable<TSource>)\n  fullName: Enumerable.Max<TSource>(IEnumerable<TSource>)\n- uid: System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Max<TSource>(IEnumerable<TSource>, Func<TSource,Decimal>)\n  nameWithType: Enumerable.Max<TSource>(IEnumerable<TSource>, Func<TSource,Decimal>)\n  fullName: Enumerable.Max<TSource>(IEnumerable<TSource>, Func<TSource,Decimal>)\n- uid: System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Max<TSource>(IEnumerable<TSource>, Func<TSource,Double>)\n  nameWithType: Enumerable.Max<TSource>(IEnumerable<TSource>, Func<TSource,Double>)\n  fullName: Enumerable.Max<TSource>(IEnumerable<TSource>, Func<TSource,Double>)\n- uid: System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Max<TSource>(IEnumerable<TSource>, Func<TSource,Int32>)\n  nameWithType: Enumerable.Max<TSource>(IEnumerable<TSource>, Func<TSource,Int32>)\n  fullName: Enumerable.Max<TSource>(IEnumerable<TSource>, Func<TSource,Int32>)\n- uid: System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Max<TSource>(IEnumerable<TSource>, Func<TSource,Int64>)\n  nameWithType: Enumerable.Max<TSource>(IEnumerable<TSource>, Func<TSource,Int64>)\n  fullName: Enumerable.Max<TSource>(IEnumerable<TSource>, Func<TSource,Int64>)\n- uid: System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Max<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Decimal>>)\n  nameWithType: Enumerable.Max<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Decimal>>)\n  fullName: Enumerable.Max<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Decimal>>)\n- uid: System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Max<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Double>>)\n  nameWithType: Enumerable.Max<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Double>>)\n  fullName: Enumerable.Max<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Double>>)\n- uid: System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Max<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Int32>>)\n  nameWithType: Enumerable.Max<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Int32>>)\n  fullName: Enumerable.Max<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Int32>>)\n- uid: System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Max<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Int64>>)\n  nameWithType: Enumerable.Max<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Int64>>)\n  fullName: Enumerable.Max<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Int64>>)\n- uid: System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Max<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Single>>)\n  nameWithType: Enumerable.Max<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Single>>)\n  fullName: Enumerable.Max<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Single>>)\n- uid: System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Max<TSource>(IEnumerable<TSource>, Func<TSource,Single>)\n  nameWithType: Enumerable.Max<TSource>(IEnumerable<TSource>, Func<TSource,Single>)\n  fullName: Enumerable.Max<TSource>(IEnumerable<TSource>, Func<TSource,Single>)\n- uid: System.Linq.Enumerable.Max``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Max<TSource,TResult>(IEnumerable<TSource>, Func<TSource,TResult>)\n  nameWithType: Enumerable.Max<TSource,TResult>(IEnumerable<TSource>, Func<TSource,TResult>)\n  fullName: Enumerable.Max<TSource,TResult>(IEnumerable<TSource>, Func<TSource,TResult>)\n- uid: System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Decimal})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Min(IEnumerable<Decimal>)\n  nameWithType: Enumerable.Min(IEnumerable<Decimal>)\n  fullName: Enumerable.Min(IEnumerable<Decimal>)\n- uid: System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Double})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Min(IEnumerable<Double>)\n  nameWithType: Enumerable.Min(IEnumerable<Double>)\n  fullName: Enumerable.Min(IEnumerable<Double>)\n- uid: System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Int32})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Min(IEnumerable<Int32>)\n  nameWithType: Enumerable.Min(IEnumerable<Int32>)\n  fullName: Enumerable.Min(IEnumerable<Int32>)\n- uid: System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Int64})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Min(IEnumerable<Int64>)\n  nameWithType: Enumerable.Min(IEnumerable<Int64>)\n  fullName: Enumerable.Min(IEnumerable<Int64>)\n- uid: System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Min(IEnumerable<Nullable<Decimal>>)\n  nameWithType: Enumerable.Min(IEnumerable<Nullable<Decimal>>)\n  fullName: Enumerable.Min(IEnumerable<Nullable<Decimal>>)\n- uid: System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Min(IEnumerable<Nullable<Double>>)\n  nameWithType: Enumerable.Min(IEnumerable<Nullable<Double>>)\n  fullName: Enumerable.Min(IEnumerable<Nullable<Double>>)\n- uid: System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Min(IEnumerable<Nullable<Int32>>)\n  nameWithType: Enumerable.Min(IEnumerable<Nullable<Int32>>)\n  fullName: Enumerable.Min(IEnumerable<Nullable<Int32>>)\n- uid: System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Min(IEnumerable<Nullable<Int64>>)\n  nameWithType: Enumerable.Min(IEnumerable<Nullable<Int64>>)\n  fullName: Enumerable.Min(IEnumerable<Nullable<Int64>>)\n- uid: System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Min(IEnumerable<Nullable<Single>>)\n  nameWithType: Enumerable.Min(IEnumerable<Nullable<Single>>)\n  fullName: Enumerable.Min(IEnumerable<Nullable<Single>>)\n- uid: System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Single})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Min(IEnumerable<Single>)\n  nameWithType: Enumerable.Min(IEnumerable<Single>)\n  fullName: Enumerable.Min(IEnumerable<Single>)\n- uid: System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Min<TSource>(IEnumerable<TSource>)\n  nameWithType: Enumerable.Min<TSource>(IEnumerable<TSource>)\n  fullName: Enumerable.Min<TSource>(IEnumerable<TSource>)\n- uid: System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Min<TSource>(IEnumerable<TSource>, Func<TSource,Decimal>)\n  nameWithType: Enumerable.Min<TSource>(IEnumerable<TSource>, Func<TSource,Decimal>)\n  fullName: Enumerable.Min<TSource>(IEnumerable<TSource>, Func<TSource,Decimal>)\n- uid: System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Min<TSource>(IEnumerable<TSource>, Func<TSource,Double>)\n  nameWithType: Enumerable.Min<TSource>(IEnumerable<TSource>, Func<TSource,Double>)\n  fullName: Enumerable.Min<TSource>(IEnumerable<TSource>, Func<TSource,Double>)\n- uid: System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Min<TSource>(IEnumerable<TSource>, Func<TSource,Int32>)\n  nameWithType: Enumerable.Min<TSource>(IEnumerable<TSource>, Func<TSource,Int32>)\n  fullName: Enumerable.Min<TSource>(IEnumerable<TSource>, Func<TSource,Int32>)\n- uid: System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Min<TSource>(IEnumerable<TSource>, Func<TSource,Int64>)\n  nameWithType: Enumerable.Min<TSource>(IEnumerable<TSource>, Func<TSource,Int64>)\n  fullName: Enumerable.Min<TSource>(IEnumerable<TSource>, Func<TSource,Int64>)\n- uid: System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Min<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Decimal>>)\n  nameWithType: Enumerable.Min<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Decimal>>)\n  fullName: Enumerable.Min<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Decimal>>)\n- uid: System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Min<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Double>>)\n  nameWithType: Enumerable.Min<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Double>>)\n  fullName: Enumerable.Min<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Double>>)\n- uid: System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Min<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Int32>>)\n  nameWithType: Enumerable.Min<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Int32>>)\n  fullName: Enumerable.Min<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Int32>>)\n- uid: System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Min<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Int64>>)\n  nameWithType: Enumerable.Min<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Int64>>)\n  fullName: Enumerable.Min<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Int64>>)\n- uid: System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Min<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Single>>)\n  nameWithType: Enumerable.Min<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Single>>)\n  fullName: Enumerable.Min<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Single>>)\n- uid: System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Min<TSource>(IEnumerable<TSource>, Func<TSource,Single>)\n  nameWithType: Enumerable.Min<TSource>(IEnumerable<TSource>, Func<TSource,Single>)\n  fullName: Enumerable.Min<TSource>(IEnumerable<TSource>, Func<TSource,Single>)\n- uid: System.Linq.Enumerable.Min``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Min<TSource,TResult>(IEnumerable<TSource>, Func<TSource,TResult>)\n  nameWithType: Enumerable.Min<TSource,TResult>(IEnumerable<TSource>, Func<TSource,TResult>)\n  fullName: Enumerable.Min<TSource,TResult>(IEnumerable<TSource>, Func<TSource,TResult>)\n- uid: System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: OfType<TResult>(IEnumerable)\n  nameWithType: Enumerable.OfType<TResult>(IEnumerable)\n  fullName: Enumerable.OfType<TResult>(IEnumerable)\n- uid: System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: OrderBy<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>)\n  nameWithType: Enumerable.OrderBy<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>)\n  fullName: Enumerable.OrderBy<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>)\n- uid: System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: OrderBy<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>, IComparer<TKey>)\n  nameWithType: Enumerable.OrderBy<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>, IComparer<TKey>)\n  fullName: Enumerable.OrderBy<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>, IComparer<TKey>)\n- uid: System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: OrderByDescending<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>)\n  nameWithType: Enumerable.OrderByDescending<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>)\n  fullName: Enumerable.OrderByDescending<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>)\n- uid: System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: OrderByDescending<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>, IComparer<TKey>)\n  nameWithType: Enumerable.OrderByDescending<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>, IComparer<TKey>)\n  fullName: Enumerable.OrderByDescending<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>, IComparer<TKey>)\n- uid: System.Linq.Enumerable.Prepend``1(System.Collections.Generic.IEnumerable{``0},``0)\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Prepend<TSource>(IEnumerable<TSource>, TSource)\n  nameWithType: Enumerable.Prepend<TSource>(IEnumerable<TSource>, TSource)\n  fullName: Enumerable.Prepend<TSource>(IEnumerable<TSource>, TSource)\n- uid: System.Linq.Enumerable.Reverse``1(System.Collections.Generic.IEnumerable{``0})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Reverse<TSource>(IEnumerable<TSource>)\n  nameWithType: Enumerable.Reverse<TSource>(IEnumerable<TSource>)\n  fullName: Enumerable.Reverse<TSource>(IEnumerable<TSource>)\n- uid: System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Select<TSource,TResult>(IEnumerable<TSource>, Func<TSource,TResult>)\n  nameWithType: Enumerable.Select<TSource,TResult>(IEnumerable<TSource>, Func<TSource,TResult>)\n  fullName: Enumerable.Select<TSource,TResult>(IEnumerable<TSource>, Func<TSource,TResult>)\n- uid: System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,``1})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Select<TSource,TResult>(IEnumerable<TSource>, Func<TSource,Int32,TResult>)\n  nameWithType: Enumerable.Select<TSource,TResult>(IEnumerable<TSource>, Func<TSource,Int32,TResult>)\n  fullName: Enumerable.Select<TSource,TResult>(IEnumerable<TSource>, Func<TSource,Int32,TResult>)\n- uid: System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: SelectMany<TSource,TResult>(IEnumerable<TSource>, Func<TSource,IEnumerable<TResult>>)\n  nameWithType: Enumerable.SelectMany<TSource,TResult>(IEnumerable<TSource>, Func<TSource,IEnumerable<TResult>>)\n  fullName: Enumerable.SelectMany<TSource,TResult>(IEnumerable<TSource>, Func<TSource,IEnumerable<TResult>>)\n- uid: System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: SelectMany<TSource,TResult>(IEnumerable<TSource>, Func<TSource,Int32,IEnumerable<TResult>>)\n  nameWithType: Enumerable.SelectMany<TSource,TResult>(IEnumerable<TSource>, Func<TSource,Int32,IEnumerable<TResult>>)\n  fullName: Enumerable.SelectMany<TSource,TResult>(IEnumerable<TSource>, Func<TSource,Int32,IEnumerable<TResult>>)\n- uid: System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: SelectMany<TSource,TCollection,TResult>(IEnumerable<TSource>, Func<TSource,IEnumerable<TCollection>>, Func<TSource,TCollection,TResult>)\n  nameWithType: Enumerable.SelectMany<TSource,TCollection,TResult>(IEnumerable<TSource>, Func<TSource,IEnumerable<TCollection>>, Func<TSource,TCollection,TResult>)\n  fullName: Enumerable.SelectMany<TSource,TCollection,TResult>(IEnumerable<TSource>, Func<TSource,IEnumerable<TCollection>>, Func<TSource,TCollection,TResult>)\n- uid: System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: SelectMany<TSource,TCollection,TResult>(IEnumerable<TSource>, Func<TSource,Int32,IEnumerable<TCollection>>, Func<TSource,TCollection,TResult>)\n  nameWithType: Enumerable.SelectMany<TSource,TCollection,TResult>(IEnumerable<TSource>, Func<TSource,Int32,IEnumerable<TCollection>>, Func<TSource,TCollection,TResult>)\n  fullName: Enumerable.SelectMany<TSource,TCollection,TResult>(IEnumerable<TSource>, Func<TSource,Int32,IEnumerable<TCollection>>, Func<TSource,TCollection,TResult>)\n- uid: System.Linq.Enumerable.SequenceEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: SequenceEqual<TSource>(IEnumerable<TSource>, IEnumerable<TSource>)\n  nameWithType: Enumerable.SequenceEqual<TSource>(IEnumerable<TSource>, IEnumerable<TSource>)\n  fullName: Enumerable.SequenceEqual<TSource>(IEnumerable<TSource>, IEnumerable<TSource>)\n- uid: System.Linq.Enumerable.SequenceEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: SequenceEqual<TSource>(IEnumerable<TSource>, IEnumerable<TSource>, IEqualityComparer<TSource>)\n  nameWithType: Enumerable.SequenceEqual<TSource>(IEnumerable<TSource>, IEnumerable<TSource>, IEqualityComparer<TSource>)\n  fullName: Enumerable.SequenceEqual<TSource>(IEnumerable<TSource>, IEnumerable<TSource>, IEqualityComparer<TSource>)\n- uid: System.Linq.Enumerable.Single``1(System.Collections.Generic.IEnumerable{``0})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Single<TSource>(IEnumerable<TSource>)\n  nameWithType: Enumerable.Single<TSource>(IEnumerable<TSource>)\n  fullName: Enumerable.Single<TSource>(IEnumerable<TSource>)\n- uid: System.Linq.Enumerable.Single``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Single<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n  nameWithType: Enumerable.Single<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n  fullName: Enumerable.Single<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n- uid: System.Linq.Enumerable.SingleOrDefault``1(System.Collections.Generic.IEnumerable{``0})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: SingleOrDefault<TSource>(IEnumerable<TSource>)\n  nameWithType: Enumerable.SingleOrDefault<TSource>(IEnumerable<TSource>)\n  fullName: Enumerable.SingleOrDefault<TSource>(IEnumerable<TSource>)\n- uid: System.Linq.Enumerable.SingleOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: SingleOrDefault<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n  nameWithType: Enumerable.SingleOrDefault<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n  fullName: Enumerable.SingleOrDefault<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n- uid: System.Linq.Enumerable.Skip``1(System.Collections.Generic.IEnumerable{``0},System.Int32)\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Skip<TSource>(IEnumerable<TSource>, Int32)\n  nameWithType: Enumerable.Skip<TSource>(IEnumerable<TSource>, Int32)\n  fullName: Enumerable.Skip<TSource>(IEnumerable<TSource>, Int32)\n- uid: System.Linq.Enumerable.SkipLast``1(System.Collections.Generic.IEnumerable{``0},System.Int32)\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: SkipLast<TSource>(IEnumerable<TSource>, Int32)\n  nameWithType: Enumerable.SkipLast<TSource>(IEnumerable<TSource>, Int32)\n  fullName: Enumerable.SkipLast<TSource>(IEnumerable<TSource>, Int32)\n- uid: System.Linq.Enumerable.SkipWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: SkipWhile<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n  nameWithType: Enumerable.SkipWhile<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n  fullName: Enumerable.SkipWhile<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n- uid: System.Linq.Enumerable.SkipWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: SkipWhile<TSource>(IEnumerable<TSource>, Func<TSource,Int32,Boolean>)\n  nameWithType: Enumerable.SkipWhile<TSource>(IEnumerable<TSource>, Func<TSource,Int32,Boolean>)\n  fullName: Enumerable.SkipWhile<TSource>(IEnumerable<TSource>, Func<TSource,Int32,Boolean>)\n- uid: System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Decimal})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Sum(IEnumerable<Decimal>)\n  nameWithType: Enumerable.Sum(IEnumerable<Decimal>)\n  fullName: Enumerable.Sum(IEnumerable<Decimal>)\n- uid: System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Double})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Sum(IEnumerable<Double>)\n  nameWithType: Enumerable.Sum(IEnumerable<Double>)\n  fullName: Enumerable.Sum(IEnumerable<Double>)\n- uid: System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Int32})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Sum(IEnumerable<Int32>)\n  nameWithType: Enumerable.Sum(IEnumerable<Int32>)\n  fullName: Enumerable.Sum(IEnumerable<Int32>)\n- uid: System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Int64})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Sum(IEnumerable<Int64>)\n  nameWithType: Enumerable.Sum(IEnumerable<Int64>)\n  fullName: Enumerable.Sum(IEnumerable<Int64>)\n- uid: System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Sum(IEnumerable<Nullable<Decimal>>)\n  nameWithType: Enumerable.Sum(IEnumerable<Nullable<Decimal>>)\n  fullName: Enumerable.Sum(IEnumerable<Nullable<Decimal>>)\n- uid: System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Sum(IEnumerable<Nullable<Double>>)\n  nameWithType: Enumerable.Sum(IEnumerable<Nullable<Double>>)\n  fullName: Enumerable.Sum(IEnumerable<Nullable<Double>>)\n- uid: System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Sum(IEnumerable<Nullable<Int32>>)\n  nameWithType: Enumerable.Sum(IEnumerable<Nullable<Int32>>)\n  fullName: Enumerable.Sum(IEnumerable<Nullable<Int32>>)\n- uid: System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Sum(IEnumerable<Nullable<Int64>>)\n  nameWithType: Enumerable.Sum(IEnumerable<Nullable<Int64>>)\n  fullName: Enumerable.Sum(IEnumerable<Nullable<Int64>>)\n- uid: System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Sum(IEnumerable<Nullable<Single>>)\n  nameWithType: Enumerable.Sum(IEnumerable<Nullable<Single>>)\n  fullName: Enumerable.Sum(IEnumerable<Nullable<Single>>)\n- uid: System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Single})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Sum(IEnumerable<Single>)\n  nameWithType: Enumerable.Sum(IEnumerable<Single>)\n  fullName: Enumerable.Sum(IEnumerable<Single>)\n- uid: System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Sum<TSource>(IEnumerable<TSource>, Func<TSource,Decimal>)\n  nameWithType: Enumerable.Sum<TSource>(IEnumerable<TSource>, Func<TSource,Decimal>)\n  fullName: Enumerable.Sum<TSource>(IEnumerable<TSource>, Func<TSource,Decimal>)\n- uid: System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Sum<TSource>(IEnumerable<TSource>, Func<TSource,Double>)\n  nameWithType: Enumerable.Sum<TSource>(IEnumerable<TSource>, Func<TSource,Double>)\n  fullName: Enumerable.Sum<TSource>(IEnumerable<TSource>, Func<TSource,Double>)\n- uid: System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Sum<TSource>(IEnumerable<TSource>, Func<TSource,Int32>)\n  nameWithType: Enumerable.Sum<TSource>(IEnumerable<TSource>, Func<TSource,Int32>)\n  fullName: Enumerable.Sum<TSource>(IEnumerable<TSource>, Func<TSource,Int32>)\n- uid: System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Sum<TSource>(IEnumerable<TSource>, Func<TSource,Int64>)\n  nameWithType: Enumerable.Sum<TSource>(IEnumerable<TSource>, Func<TSource,Int64>)\n  fullName: Enumerable.Sum<TSource>(IEnumerable<TSource>, Func<TSource,Int64>)\n- uid: System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Sum<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Decimal>>)\n  nameWithType: Enumerable.Sum<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Decimal>>)\n  fullName: Enumerable.Sum<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Decimal>>)\n- uid: System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Sum<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Double>>)\n  nameWithType: Enumerable.Sum<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Double>>)\n  fullName: Enumerable.Sum<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Double>>)\n- uid: System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Sum<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Int32>>)\n  nameWithType: Enumerable.Sum<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Int32>>)\n  fullName: Enumerable.Sum<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Int32>>)\n- uid: System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Sum<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Int64>>)\n  nameWithType: Enumerable.Sum<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Int64>>)\n  fullName: Enumerable.Sum<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Int64>>)\n- uid: System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Sum<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Single>>)\n  nameWithType: Enumerable.Sum<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Single>>)\n  fullName: Enumerable.Sum<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Single>>)\n- uid: System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Sum<TSource>(IEnumerable<TSource>, Func<TSource,Single>)\n  nameWithType: Enumerable.Sum<TSource>(IEnumerable<TSource>, Func<TSource,Single>)\n  fullName: Enumerable.Sum<TSource>(IEnumerable<TSource>, Func<TSource,Single>)\n- uid: System.Linq.Enumerable.Take``1(System.Collections.Generic.IEnumerable{``0},System.Int32)\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Take<TSource>(IEnumerable<TSource>, Int32)\n  nameWithType: Enumerable.Take<TSource>(IEnumerable<TSource>, Int32)\n  fullName: Enumerable.Take<TSource>(IEnumerable<TSource>, Int32)\n- uid: System.Linq.Enumerable.TakeLast``1(System.Collections.Generic.IEnumerable{``0},System.Int32)\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: TakeLast<TSource>(IEnumerable<TSource>, Int32)\n  nameWithType: Enumerable.TakeLast<TSource>(IEnumerable<TSource>, Int32)\n  fullName: Enumerable.TakeLast<TSource>(IEnumerable<TSource>, Int32)\n- uid: System.Linq.Enumerable.TakeWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: TakeWhile<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n  nameWithType: Enumerable.TakeWhile<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n  fullName: Enumerable.TakeWhile<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n- uid: System.Linq.Enumerable.TakeWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: TakeWhile<TSource>(IEnumerable<TSource>, Func<TSource,Int32,Boolean>)\n  nameWithType: Enumerable.TakeWhile<TSource>(IEnumerable<TSource>, Func<TSource,Int32,Boolean>)\n  fullName: Enumerable.TakeWhile<TSource>(IEnumerable<TSource>, Func<TSource,Int32,Boolean>)\n- uid: System.Linq.Enumerable.ToArray``1(System.Collections.Generic.IEnumerable{``0})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: ToArray<TSource>(IEnumerable<TSource>)\n  nameWithType: Enumerable.ToArray<TSource>(IEnumerable<TSource>)\n  fullName: Enumerable.ToArray<TSource>(IEnumerable<TSource>)\n- uid: System.Linq.Enumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: ToDictionary<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>)\n  nameWithType: Enumerable.ToDictionary<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>)\n  fullName: Enumerable.ToDictionary<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>)\n- uid: System.Linq.Enumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: ToDictionary<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>, IEqualityComparer<TKey>)\n  nameWithType: Enumerable.ToDictionary<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>, IEqualityComparer<TKey>)\n  fullName: Enumerable.ToDictionary<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>, IEqualityComparer<TKey>)\n- uid: System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: ToDictionary<TSource,TKey,TElement>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TElement>)\n  nameWithType: Enumerable.ToDictionary<TSource,TKey,TElement>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TElement>)\n  fullName: Enumerable.ToDictionary<TSource,TKey,TElement>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TElement>)\n- uid: System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: ToDictionary<TSource,TKey,TElement>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TElement>, IEqualityComparer<TKey>)\n  nameWithType: Enumerable.ToDictionary<TSource,TKey,TElement>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TElement>, IEqualityComparer<TKey>)\n  fullName: Enumerable.ToDictionary<TSource,TKey,TElement>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TElement>, IEqualityComparer<TKey>)\n- uid: System.Linq.Enumerable.ToHashSet``1(System.Collections.Generic.IEnumerable{``0})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: ToHashSet<TSource>(IEnumerable<TSource>)\n  nameWithType: Enumerable.ToHashSet<TSource>(IEnumerable<TSource>)\n  fullName: Enumerable.ToHashSet<TSource>(IEnumerable<TSource>)\n- uid: System.Linq.Enumerable.ToHashSet``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: ToHashSet<TSource>(IEnumerable<TSource>, IEqualityComparer<TSource>)\n  nameWithType: Enumerable.ToHashSet<TSource>(IEnumerable<TSource>, IEqualityComparer<TSource>)\n  fullName: Enumerable.ToHashSet<TSource>(IEnumerable<TSource>, IEqualityComparer<TSource>)\n- uid: System.Linq.Enumerable.ToList``1(System.Collections.Generic.IEnumerable{``0})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: ToList<TSource>(IEnumerable<TSource>)\n  nameWithType: Enumerable.ToList<TSource>(IEnumerable<TSource>)\n  fullName: Enumerable.ToList<TSource>(IEnumerable<TSource>)\n- uid: System.Linq.Enumerable.ToLookup``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: ToLookup<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>)\n  nameWithType: Enumerable.ToLookup<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>)\n  fullName: Enumerable.ToLookup<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>)\n- uid: System.Linq.Enumerable.ToLookup``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: ToLookup<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>, IEqualityComparer<TKey>)\n  nameWithType: Enumerable.ToLookup<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>, IEqualityComparer<TKey>)\n  fullName: Enumerable.ToLookup<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>, IEqualityComparer<TKey>)\n- uid: System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: ToLookup<TSource,TKey,TElement>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TElement>)\n  nameWithType: Enumerable.ToLookup<TSource,TKey,TElement>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TElement>)\n  fullName: Enumerable.ToLookup<TSource,TKey,TElement>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TElement>)\n- uid: System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: ToLookup<TSource,TKey,TElement>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TElement>, IEqualityComparer<TKey>)\n  nameWithType: Enumerable.ToLookup<TSource,TKey,TElement>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TElement>, IEqualityComparer<TKey>)\n  fullName: Enumerable.ToLookup<TSource,TKey,TElement>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TElement>, IEqualityComparer<TKey>)\n- uid: System.Linq.Enumerable.Union``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Union<TSource>(IEnumerable<TSource>, IEnumerable<TSource>)\n  nameWithType: Enumerable.Union<TSource>(IEnumerable<TSource>, IEnumerable<TSource>)\n  fullName: Enumerable.Union<TSource>(IEnumerable<TSource>, IEnumerable<TSource>)\n- uid: System.Linq.Enumerable.Union``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Union<TSource>(IEnumerable<TSource>, IEnumerable<TSource>, IEqualityComparer<TSource>)\n  nameWithType: Enumerable.Union<TSource>(IEnumerable<TSource>, IEnumerable<TSource>, IEqualityComparer<TSource>)\n  fullName: Enumerable.Union<TSource>(IEnumerable<TSource>, IEnumerable<TSource>, IEqualityComparer<TSource>)\n- uid: System.Linq.Enumerable.Where``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Where<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n  nameWithType: Enumerable.Where<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n  fullName: Enumerable.Where<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n- uid: System.Linq.Enumerable.Where``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Where<TSource>(IEnumerable<TSource>, Func<TSource,Int32,Boolean>)\n  nameWithType: Enumerable.Where<TSource>(IEnumerable<TSource>, Func<TSource,Int32,Boolean>)\n  fullName: Enumerable.Where<TSource>(IEnumerable<TSource>, Func<TSource,Int32,Boolean>)\n- uid: System.Linq.Enumerable.Zip``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,``2})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Zip<TFirst,TSecond,TResult>(IEnumerable<TFirst>, IEnumerable<TSecond>, Func<TFirst,TSecond,TResult>)\n  nameWithType: Enumerable.Zip<TFirst,TSecond,TResult>(IEnumerable<TFirst>, IEnumerable<TSecond>, Func<TFirst,TSecond,TResult>)\n  fullName: Enumerable.Zip<TFirst,TSecond,TResult>(IEnumerable<TFirst>, IEnumerable<TSecond>, Func<TFirst,TSecond,TResult>)\n- uid: System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)\n  parent: System.Linq.ParallelEnumerable\n  isExternal: false\n  name: AsParallel(IEnumerable)\n  nameWithType: ParallelEnumerable.AsParallel(IEnumerable)\n  fullName: ParallelEnumerable.AsParallel(IEnumerable)\n- uid: System.Linq.ParallelEnumerable.AsParallel``1(System.Collections.Generic.IEnumerable{``0})\n  parent: System.Linq.ParallelEnumerable\n  isExternal: false\n  name: AsParallel<TSource>(IEnumerable<TSource>)\n  nameWithType: ParallelEnumerable.AsParallel<TSource>(IEnumerable<TSource>)\n  fullName: ParallelEnumerable.AsParallel<TSource>(IEnumerable<TSource>)\n- uid: System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)\n  parent: System.Linq.Queryable\n  isExternal: false\n  name: AsQueryable(IEnumerable)\n  nameWithType: Queryable.AsQueryable(IEnumerable)\n  fullName: Queryable.AsQueryable(IEnumerable)\n- uid: System.Linq.Queryable.AsQueryable``1(System.Collections.Generic.IEnumerable{``0})\n  parent: System.Linq.Queryable\n  isExternal: false\n  name: AsQueryable<TElement>(IEnumerable<TElement>)\n  nameWithType: Queryable.AsQueryable<TElement>(IEnumerable<TElement>)\n  fullName: Queryable.AsQueryable<TElement>(IEnumerable<TElement>)\n- uid: System.Xml.Linq.Extensions.Ancestors``1(System.Collections.Generic.IEnumerable{``0})\n  parent: System.Xml.Linq.Extensions\n  isExternal: false\n  name: Ancestors<T>(IEnumerable<T>)\n  nameWithType: Extensions.Ancestors<T>(IEnumerable<T>)\n  fullName: Extensions.Ancestors<T>(IEnumerable<T>)\n- uid: System.Xml.Linq.Extensions.Ancestors``1(System.Collections.Generic.IEnumerable{``0},System.Xml.Linq.XName)\n  parent: System.Xml.Linq.Extensions\n  isExternal: false\n  name: Ancestors<T>(IEnumerable<T>, XName)\n  nameWithType: Extensions.Ancestors<T>(IEnumerable<T>, XName)\n  fullName: Extensions.Ancestors<T>(IEnumerable<T>, XName)\n- uid: System.Xml.Linq.Extensions.AncestorsAndSelf(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement})\n  parent: System.Xml.Linq.Extensions\n  isExternal: false\n  name: AncestorsAndSelf(IEnumerable<XElement>)\n  nameWithType: Extensions.AncestorsAndSelf(IEnumerable<XElement>)\n  fullName: Extensions.AncestorsAndSelf(IEnumerable<XElement>)\n- uid: System.Xml.Linq.Extensions.AncestorsAndSelf(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement},System.Xml.Linq.XName)\n  parent: System.Xml.Linq.Extensions\n  isExternal: false\n  name: AncestorsAndSelf(IEnumerable<XElement>, XName)\n  nameWithType: Extensions.AncestorsAndSelf(IEnumerable<XElement>, XName)\n  fullName: Extensions.AncestorsAndSelf(IEnumerable<XElement>, XName)\n- uid: System.Xml.Linq.Extensions.Attributes(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement})\n  parent: System.Xml.Linq.Extensions\n  isExternal: false\n  name: Attributes(IEnumerable<XElement>)\n  nameWithType: Extensions.Attributes(IEnumerable<XElement>)\n  fullName: Extensions.Attributes(IEnumerable<XElement>)\n- uid: System.Xml.Linq.Extensions.Attributes(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement},System.Xml.Linq.XName)\n  parent: System.Xml.Linq.Extensions\n  isExternal: false\n  name: Attributes(IEnumerable<XElement>, XName)\n  nameWithType: Extensions.Attributes(IEnumerable<XElement>, XName)\n  fullName: Extensions.Attributes(IEnumerable<XElement>, XName)\n- uid: System.Xml.Linq.Extensions.DescendantNodes``1(System.Collections.Generic.IEnumerable{``0})\n  parent: System.Xml.Linq.Extensions\n  isExternal: false\n  name: DescendantNodes<T>(IEnumerable<T>)\n  nameWithType: Extensions.DescendantNodes<T>(IEnumerable<T>)\n  fullName: Extensions.DescendantNodes<T>(IEnumerable<T>)\n- uid: System.Xml.Linq.Extensions.DescendantNodesAndSelf(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement})\n  parent: System.Xml.Linq.Extensions\n  isExternal: false\n  name: DescendantNodesAndSelf(IEnumerable<XElement>)\n  nameWithType: Extensions.DescendantNodesAndSelf(IEnumerable<XElement>)\n  fullName: Extensions.DescendantNodesAndSelf(IEnumerable<XElement>)\n- uid: System.Xml.Linq.Extensions.Descendants``1(System.Collections.Generic.IEnumerable{``0})\n  parent: System.Xml.Linq.Extensions\n  isExternal: false\n  name: Descendants<T>(IEnumerable<T>)\n  nameWithType: Extensions.Descendants<T>(IEnumerable<T>)\n  fullName: Extensions.Descendants<T>(IEnumerable<T>)\n- uid: System.Xml.Linq.Extensions.Descendants``1(System.Collections.Generic.IEnumerable{``0},System.Xml.Linq.XName)\n  parent: System.Xml.Linq.Extensions\n  isExternal: false\n  name: Descendants<T>(IEnumerable<T>, XName)\n  nameWithType: Extensions.Descendants<T>(IEnumerable<T>, XName)\n  fullName: Extensions.Descendants<T>(IEnumerable<T>, XName)\n- uid: System.Xml.Linq.Extensions.DescendantsAndSelf(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement})\n  parent: System.Xml.Linq.Extensions\n  isExternal: false\n  name: DescendantsAndSelf(IEnumerable<XElement>)\n  nameWithType: Extensions.DescendantsAndSelf(IEnumerable<XElement>)\n  fullName: Extensions.DescendantsAndSelf(IEnumerable<XElement>)\n- uid: System.Xml.Linq.Extensions.DescendantsAndSelf(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement},System.Xml.Linq.XName)\n  parent: System.Xml.Linq.Extensions\n  isExternal: false\n  name: DescendantsAndSelf(IEnumerable<XElement>, XName)\n  nameWithType: Extensions.DescendantsAndSelf(IEnumerable<XElement>, XName)\n  fullName: Extensions.DescendantsAndSelf(IEnumerable<XElement>, XName)\n- uid: System.Xml.Linq.Extensions.Elements``1(System.Collections.Generic.IEnumerable{``0})\n  parent: System.Xml.Linq.Extensions\n  isExternal: false\n  name: Elements<T>(IEnumerable<T>)\n  nameWithType: Extensions.Elements<T>(IEnumerable<T>)\n  fullName: Extensions.Elements<T>(IEnumerable<T>)\n- uid: System.Xml.Linq.Extensions.Elements``1(System.Collections.Generic.IEnumerable{``0},System.Xml.Linq.XName)\n  parent: System.Xml.Linq.Extensions\n  isExternal: false\n  name: Elements<T>(IEnumerable<T>, XName)\n  nameWithType: Extensions.Elements<T>(IEnumerable<T>, XName)\n  fullName: Extensions.Elements<T>(IEnumerable<T>, XName)\n- uid: System.Xml.Linq.Extensions.InDocumentOrder``1(System.Collections.Generic.IEnumerable{``0})\n  parent: System.Xml.Linq.Extensions\n  isExternal: false\n  name: InDocumentOrder<T>(IEnumerable<T>)\n  nameWithType: Extensions.InDocumentOrder<T>(IEnumerable<T>)\n  fullName: Extensions.InDocumentOrder<T>(IEnumerable<T>)\n- uid: System.Xml.Linq.Extensions.Nodes``1(System.Collections.Generic.IEnumerable{``0})\n  parent: System.Xml.Linq.Extensions\n  isExternal: false\n  name: Nodes<T>(IEnumerable<T>)\n  nameWithType: Extensions.Nodes<T>(IEnumerable<T>)\n  fullName: Extensions.Nodes<T>(IEnumerable<T>)\n- uid: System.Xml.Linq.Extensions.Remove(System.Collections.Generic.IEnumerable{System.Xml.Linq.XAttribute})\n  parent: System.Xml.Linq.Extensions\n  isExternal: false\n  name: Remove(IEnumerable<XAttribute>)\n  nameWithType: Extensions.Remove(IEnumerable<XAttribute>)\n  fullName: Extensions.Remove(IEnumerable<XAttribute>)\n- uid: System.Xml.Linq.Extensions.Remove``1(System.Collections.Generic.IEnumerable{``0})\n  parent: System.Xml.Linq.Extensions\n  isExternal: false\n  name: Remove<T>(IEnumerable<T>)\n  nameWithType: Extensions.Remove<T>(IEnumerable<T>)\n  fullName: Extensions.Remove<T>(IEnumerable<T>)\n- uid: System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{TKey,TValue}}\n  parent: System.Collections.Generic\n  isExternal: false\n  name: ICollection<KeyValuePair<TKey,TValue>>\n  nameWithType: ICollection<KeyValuePair<TKey,TValue>>\n  fullName: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>\n  spec.csharp:\n  - uid: System.Collections.Generic.ICollection`1\n    name: ICollection\n    nameWithType: ICollection\n    fullName: System.Collections.Generic.ICollection\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Collections.Generic.KeyValuePair`2\n    name: KeyValuePair\n    nameWithType: KeyValuePair\n    fullName: System.Collections.Generic.KeyValuePair\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: TKey\n    name: TKey\n    nameWithType: TKey\n    fullName: TKey\n  - name: ','\n    nameWithType: ','\n    fullName: ','\n  - uid: TValue\n    name: TValue\n    nameWithType: TValue\n    fullName: TValue\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{TKey,TValue}}\n  parent: System.Collections.Generic\n  isExternal: false\n  name: IEnumerable<KeyValuePair<TKey,TValue>>\n  nameWithType: IEnumerable<KeyValuePair<TKey,TValue>>\n  fullName: System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<TKey,TValue>>\n  spec.csharp:\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    nameWithType: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Collections.Generic.KeyValuePair`2\n    name: KeyValuePair\n    nameWithType: KeyValuePair\n    fullName: System.Collections.Generic.KeyValuePair\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: TKey\n    name: TKey\n    nameWithType: TKey\n    fullName: TKey\n  - name: ','\n    nameWithType: ','\n    fullName: ','\n  - uid: TValue\n    name: TValue\n    nameWithType: TValue\n    fullName: TValue\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Collections.Generic.IReadOnlyCollection`1\n  name: IReadOnlyCollection<T>\n  nameWithType: IReadOnlyCollection<T>\n  fullName: System.Collections.Generic.IReadOnlyCollection<T>\n- uid: System.Collections.Generic.IReadOnlyCollection{System.Collections.Generic.KeyValuePair{TKey,TValue}}\n  parent: System.Collections.Generic\n  isExternal: false\n  name: IReadOnlyCollection<KeyValuePair<TKey,TValue>>\n  nameWithType: IReadOnlyCollection<KeyValuePair<TKey,TValue>>\n  fullName: System.Collections.Generic.IReadOnlyCollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>\n  spec.csharp:\n  - uid: System.Collections.Generic.IReadOnlyCollection`1\n    name: IReadOnlyCollection\n    nameWithType: IReadOnlyCollection\n    fullName: System.Collections.Generic.IReadOnlyCollection\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Collections.Generic.KeyValuePair`2\n    name: KeyValuePair\n    nameWithType: KeyValuePair\n    fullName: System.Collections.Generic.KeyValuePair\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: TKey\n    name: TKey\n    nameWithType: TKey\n    fullName: TKey\n  - name: ','\n    nameWithType: ','\n    fullName: ','\n  - uid: TValue\n    name: TValue\n    nameWithType: TValue\n    fullName: TValue\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Collections.Generic.IReadOnlyDictionary`2\n  parent: System.Collections.Generic\n  isExternal: false\n  name: IReadOnlyDictionary<TKey,TValue>\n  nameWithType: IReadOnlyDictionary<TKey,TValue>\n  fullName: System.Collections.Generic.IReadOnlyDictionary<TKey,TValue>\n- uid: System.Collections.IDictionary\n  parent: System.Collections\n  isExternal: false\n  name: IDictionary\n  nameWithType: IDictionary\n  fullName: System.Collections.IDictionary\n"}