{"nodes":[{"content":"The exception that is thrown when a method attempts to use a type that it does not have access to.","nodes":[{"pos":[0,98],"content":"The exception that is thrown when a method attempts to use a type that it does not have access to.","nodes":[{"content":"The exception that is thrown when a method attempts to use a type that it does not have access to.","pos":[0,98]}]}],"pos":[669,768],"yaml":true},{"content":"<xref:System.TypeAccessException> is thrown when a method attempts to cast an object to a type that is not accessible from the method. For example, an anonymously hosted dynamic method cannot access a security-critical type because the method is [transparent](~/docs/framework/misc/security-transparent-code.md). If the method contains a <xref:System.Reflection.Emit.OpCodes.Castclass?displayProperty=fullName> instruction that casts an object to a security-critical type, or to a generic type that has a security-critical type as one of its type parameters, <xref:System.TypeAccessException> is thrown by the JIT compiler.  \n  \n Similarly, <xref:System.TypeAccessException> is thrown for a dynamic method that uses an internal type from another assembly. A method might not have access to its containing type, its return type, or one of its parameter types.  \n  \n Apps compiled by using the [!INCLUDE[net_native](~/includes/net-native-md.md)] tool chain may throw a  exception at runtime.  is an internal-only exception type derived from <xref:System.TypeAccessException>. The exception indicates that metadata needed for the successful execution of an app is not present at runtime. You should not use a `try`/`catch` block to handle the exception. Instead, you should determine what metadata is missing and modify your app's  to ensure that it is present at runtime.","nodes":[{"pos":[0,623],"content":"<xref:System.TypeAccessException> is thrown when a method attempts to cast an object to a type that is not accessible from the method. For example, an anonymously hosted dynamic method cannot access a security-critical type because the method is [transparent](~/docs/framework/misc/security-transparent-code.md). If the method contains a <xref:System.Reflection.Emit.OpCodes.Castclass?displayProperty=fullName> instruction that casts an object to a security-critical type, or to a generic type that has a security-critical type as one of its type parameters, <xref:System.TypeAccessException> is thrown by the JIT compiler.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.TypeAccessException&gt;</ph> is thrown when a method attempts to cast an object to a type that is not accessible from the method.","pos":[0,134],"source":"<xref:System.TypeAccessException> is thrown when a method attempts to cast an object to a type that is not accessible from the method."},{"content":"For example, an anonymously hosted dynamic method cannot access a security-critical type because the method is <bpt id=\"p1\">[</bpt>transparent<ept id=\"p1\">](~/docs/framework/misc/security-transparent-code.md)</ept>.","pos":[135,312],"source":" For example, an anonymously hosted dynamic method cannot access a security-critical type because the method is [transparent](~/docs/framework/misc/security-transparent-code.md)."},{"content":"If the method contains a <ph id=\"ph1\">&lt;xref:System.Reflection.Emit.OpCodes.Castclass?displayProperty=fullName&gt;</ph> instruction that casts an object to a security-critical type, or to a generic type that has a security-critical type as one of its type parameters, <ph id=\"ph2\">&lt;xref:System.TypeAccessException&gt;</ph> is thrown by the JIT compiler.","pos":[313,623],"source":" If the method contains a <xref:System.Reflection.Emit.OpCodes.Castclass?displayProperty=fullName> instruction that casts an object to a security-critical type, or to a generic type that has a security-critical type as one of its type parameters, <xref:System.TypeAccessException> is thrown by the JIT compiler."}]},{"pos":[630,858],"content":"Similarly, <xref:System.TypeAccessException> is thrown for a dynamic method that uses an internal type from another assembly. A method might not have access to its containing type, its return type, or one of its parameter types.","nodes":[{"content":"Similarly, <xref:System.TypeAccessException> is thrown for a dynamic method that uses an internal type from another assembly. A method might not have access to its containing type, its return type, or one of its parameter types.","pos":[0,228],"nodes":[{"content":"Similarly, <ph id=\"ph1\">&lt;xref:System.TypeAccessException&gt;</ph> is thrown for a dynamic method that uses an internal type from another assembly.","pos":[0,125],"source":"Similarly, <xref:System.TypeAccessException> is thrown for a dynamic method that uses an internal type from another assembly."},{"content":"A method might not have access to its containing type, its return type, or one of its parameter types.","pos":[126,228]}]}]},{"pos":[865,1369],"content":"Apps compiled by using the [!INCLUDE[net_native](~/includes/net-native-md.md)] tool chain may throw a  exception at runtime.  is an internal-only exception type derived from <xref:System.TypeAccessException>. The exception indicates that metadata needed for the successful execution of an app is not present at runtime. You should not use a `try`/`catch` block to handle the exception. Instead, you should determine what metadata is missing and modify your app's  to ensure that it is present at runtime.","nodes":[{"content":"Apps compiled by using the <ph id=\"ph1\">[!INCLUDE[net_native](~/includes/net-native-md.md)]</ph> tool chain may throw a  exception at runtime.","pos":[0,124],"source":"Apps compiled by using the [!INCLUDE[net_native](~/includes/net-native-md.md)] tool chain may throw a  exception at runtime."},{"content":"is an internal-only exception type derived from <ph id=\"ph1\">&lt;xref:System.TypeAccessException&gt;</ph>.","pos":[126,208],"source":"  is an internal-only exception type derived from <xref:System.TypeAccessException>."},{"content":"The exception indicates that metadata needed for the successful execution of an app is not present at runtime.","pos":[209,319]},{"content":"You should not use a <ph id=\"ph1\">`try`</ph><ph id=\"ph2\">/</ph><ph id=\"ph3\">`catch`</ph> block to handle the exception.","pos":[320,385],"source":" You should not use a `try`/`catch` block to handle the exception."},{"content":"Instead, you should determine what metadata is missing and modify your app's  to ensure that it is present at runtime.","pos":[386,504]}]}],"pos":[779,2155],"yaml":true,"extradata":"MT"},{"content":"Initializes a new instance of the <xref href=\"System.TypeAccessException\"></xref> class with a system-supplied message that describes the error.","nodes":[{"pos":[0,144],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.TypeAccessException\"&gt;&lt;/xref&gt;</ph> class with a system-supplied message that describes the error.","source":"Initializes a new instance of the <xref href=\"System.TypeAccessException\"></xref> class with a system-supplied message that describes the error."}],"pos":[4619,4764],"yaml":true},{"content":"This constructor initializes the <xref:System.Exception.Message%2A> property of the new instance to a system-supplied message that describes the error, such as \"Attempt to access the type failed.\" This message takes the current system culture into account.  \n  \n The following table shows the initial property values for an instance of <xref:System.TypeAccessException>.  \n  \n|Property|Value|  \n|--------------|-----------|  \n|<xref:System.Exception.InnerException%2A>|A null reference (`Nothing` in Visual Basic).|  \n|<xref:System.Exception.Message%2A>|The localized error message string.|","nodes":[{"pos":[0,256],"content":"This constructor initializes the <xref:System.Exception.Message%2A> property of the new instance to a system-supplied message that describes the error, such as \"Attempt to access the type failed.\" This message takes the current system culture into account.","nodes":[{"content":"This constructor initializes the <xref:System.Exception.Message%2A> property of the new instance to a system-supplied message that describes the error, such as \"Attempt to access the type failed.\" This message takes the current system culture into account.","pos":[0,256],"nodes":[{"content":"This constructor initializes the <ph id=\"ph1\">&lt;xref:System.Exception.Message%2A&gt;</ph> property of the new instance to a system-supplied message that describes the error, such as \"Attempt to access the type failed.\"","pos":[0,196],"source":"This constructor initializes the <xref:System.Exception.Message%2A> property of the new instance to a system-supplied message that describes the error, such as \"Attempt to access the type failed.\""},{"content":"This message takes the current system culture into account.","pos":[197,256]}]}]},{"pos":[263,370],"content":"The following table shows the initial property values for an instance of <xref:System.TypeAccessException>.","nodes":[{"content":"The following table shows the initial property values for an instance of <ph id=\"ph1\">&lt;xref:System.TypeAccessException&gt;</ph>.","pos":[0,107],"source":"The following table shows the initial property values for an instance of <xref:System.TypeAccessException>."}]},{"pos":[377,385],"content":"Property","nodes":[{"content":"Property","pos":[0,8]}]},{"pos":[386,391],"content":"Value","nodes":[{"content":"Value","pos":[0,5]}]},{"pos":[427,468],"content":"<xref:System.Exception.InnerException%2A>","nodes":[]},{"pos":[469,514],"content":"A null reference (<ph id=\"ph1\">`Nothing`</ph> in Visual Basic).","source":"A null reference (`Nothing` in Visual Basic)."},{"pos":[519,553],"content":"<xref:System.Exception.Message%2A>","nodes":[]},{"pos":[554,589],"content":"The localized error message string.","nodes":[{"content":"The localized error message string.","pos":[0,35]}]}],"pos":[4775,5377],"yaml":true,"extradata":"MT"},{"content":"Initializes a new instance of the <xref href=\"System.TypeAccessException\"></xref> class with a specified message that describes the error.","nodes":[{"pos":[0,138],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.TypeAccessException\"&gt;&lt;/xref&gt;</ph> class with a specified message that describes the error.","source":"Initializes a new instance of the <xref href=\"System.TypeAccessException\"></xref> class with a specified message that describes the error."}],"pos":[7057,7196],"yaml":true},{"content":"The following table shows the initial property values for an instance of <xref:System.TypeAccessException>.  \n  \n|Property|Value|  \n|--------------|-----------|  \n|<xref:System.Exception.InnerException%2A>|A null reference (`Nothing` in Visual Basic).|  \n|<xref:System.Exception.Message%2A>|The error message string specified in `message`.|","nodes":[{"pos":[0,107],"content":"The following table shows the initial property values for an instance of <xref:System.TypeAccessException>.","nodes":[{"content":"The following table shows the initial property values for an instance of <ph id=\"ph1\">&lt;xref:System.TypeAccessException&gt;</ph>.","pos":[0,107],"source":"The following table shows the initial property values for an instance of <xref:System.TypeAccessException>."}]},{"pos":[114,122],"content":"Property","nodes":[{"content":"Property","pos":[0,8]}]},{"pos":[123,128],"content":"Value","nodes":[{"content":"Value","pos":[0,5]}]},{"pos":[164,205],"content":"<xref:System.Exception.InnerException%2A>","nodes":[]},{"pos":[206,251],"content":"A null reference (<ph id=\"ph1\">`Nothing`</ph> in Visual Basic).","source":"A null reference (`Nothing` in Visual Basic)."},{"pos":[256,290],"content":"<xref:System.Exception.Message%2A>","nodes":[]},{"pos":[291,339],"content":"The error message string specified in <ph id=\"ph1\">`message`</ph>.","source":"The error message string specified in `message`."}],"pos":[7207,7555],"yaml":true,"extradata":"MT"},{"content":"The message that describes the exception. The caller of this constructor must ensure that this string has been localized for the current system culture.","nodes":[{"pos":[0,152],"content":"The message that describes the exception. The caller of this constructor must ensure that this string has been localized for the current system culture.","nodes":[{"content":"The message that describes the exception. The caller of this constructor must ensure that this string has been localized for the current system culture.","pos":[0,152],"nodes":[{"content":"The message that describes the exception.","pos":[0,41]},{"content":"The caller of this constructor must ensure that this string has been localized for the current system culture.","pos":[42,152]}]}]}],"pos":[7702,7855],"yaml":true},{"content":"Initializes a new instance of the <xref href=\"System.TypeAccessException\"></xref> class with serialized data.","nodes":[{"pos":[0,109],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.TypeAccessException\"&gt;&lt;/xref&gt;</ph> class with serialized data.","source":"Initializes a new instance of the <xref href=\"System.TypeAccessException\"></xref> class with serialized data."}],"pos":[9786,9896],"yaml":true},{"content":"This constructor is called during deserialization to reconstitute the exception object that was transmitted over a stream. For more information, see [XML and SOAP Serialization](~/docs/framework/serialization/xml-and-soap-serialization.md).","nodes":[{"pos":[0,240],"content":"This constructor is called during deserialization to reconstitute the exception object that was transmitted over a stream. For more information, see [XML and SOAP Serialization](~/docs/framework/serialization/xml-and-soap-serialization.md).","nodes":[{"content":"This constructor is called during deserialization to reconstitute the exception object that was transmitted over a stream.","pos":[0,122]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>XML and SOAP Serialization<ept id=\"p1\">](~/docs/framework/serialization/xml-and-soap-serialization.md)</ept>.","pos":[123,240],"source":" For more information, see [XML and SOAP Serialization](~/docs/framework/serialization/xml-and-soap-serialization.md)."}]}],"pos":[9907,10148],"yaml":true,"extradata":"MT"},{"content":"The object that holds the serialized data.","nodes":[{"pos":[0,42],"content":"The object that holds the serialized data.","nodes":[{"content":"The object that holds the serialized data.","pos":[0,42]}]}],"pos":[10420,10463],"yaml":true},{"content":"The contextual information about the source or destination.","nodes":[{"pos":[0,59],"content":"The contextual information about the source or destination.","nodes":[{"content":"The contextual information about the source or destination.","pos":[0,59]}]}],"pos":[10558,10618],"yaml":true},{"content":"Initializes a new instance of the <xref href=\"System.TypeAccessException\"></xref> class with a specified error message and a reference to the inner exception that is the cause of this exception.","nodes":[{"pos":[0,194],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.TypeAccessException\"&gt;&lt;/xref&gt;</ph> class with a specified error message and a reference to the inner exception that is the cause of this exception.","source":"Initializes a new instance of the <xref href=\"System.TypeAccessException\"></xref> class with a specified error message and a reference to the inner exception that is the cause of this exception."}],"pos":[11965,12160],"yaml":true},{"content":"An exception that is thrown as a direct result of a previous exception should include a reference to the previous exception in the <xref:System.Exception.InnerException%2A> property. The <xref:System.Exception.InnerException%2A> property returns the same value that is passed into the constructor, or `null` if the <xref:System.Exception.InnerException%2A> property does not supply the inner exception value to the constructor.  \n  \n The following table shows the initial property values for an instance of <xref:System.TypeAccessException>.  \n  \n|Property|Value|  \n|--------------|-----------|  \n|<xref:System.Exception.InnerException%2A>|A null reference (`Nothing` in Visual Basic).|  \n|<xref:System.Exception.Message%2A>|The error message string specified in `message`.|","nodes":[{"pos":[0,427],"content":"An exception that is thrown as a direct result of a previous exception should include a reference to the previous exception in the <xref:System.Exception.InnerException%2A> property. The <xref:System.Exception.InnerException%2A> property returns the same value that is passed into the constructor, or `null` if the <xref:System.Exception.InnerException%2A> property does not supply the inner exception value to the constructor.","nodes":[{"content":"An exception that is thrown as a direct result of a previous exception should include a reference to the previous exception in the <ph id=\"ph1\">&lt;xref:System.Exception.InnerException%2A&gt;</ph> property.","pos":[0,182],"source":"An exception that is thrown as a direct result of a previous exception should include a reference to the previous exception in the <xref:System.Exception.InnerException%2A> property."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Exception.InnerException%2A&gt;</ph> property returns the same value that is passed into the constructor, or <ph id=\"ph2\">`null`</ph> if the <ph id=\"ph3\">&lt;xref:System.Exception.InnerException%2A&gt;</ph> property does not supply the inner exception value to the constructor.","pos":[183,427],"source":" The <xref:System.Exception.InnerException%2A> property returns the same value that is passed into the constructor, or `null` if the <xref:System.Exception.InnerException%2A> property does not supply the inner exception value to the constructor."}]},{"pos":[434,541],"content":"The following table shows the initial property values for an instance of <xref:System.TypeAccessException>.","nodes":[{"content":"The following table shows the initial property values for an instance of <ph id=\"ph1\">&lt;xref:System.TypeAccessException&gt;</ph>.","pos":[0,107],"source":"The following table shows the initial property values for an instance of <xref:System.TypeAccessException>."}]},{"pos":[548,556],"content":"Property","nodes":[{"content":"Property","pos":[0,8]}]},{"pos":[557,562],"content":"Value","nodes":[{"content":"Value","pos":[0,5]}]},{"pos":[598,639],"content":"<xref:System.Exception.InnerException%2A>","nodes":[]},{"pos":[640,685],"content":"A null reference (<ph id=\"ph1\">`Nothing`</ph> in Visual Basic).","source":"A null reference (`Nothing` in Visual Basic)."},{"pos":[690,724],"content":"<xref:System.Exception.Message%2A>","nodes":[]},{"pos":[725,773],"content":"The error message string specified in <ph id=\"ph1\">`message`</ph>.","source":"The error message string specified in `message`."}],"pos":[12171,12955],"yaml":true,"extradata":"MT"},{"content":"The message that describes the exception. The caller of this constructor must ensure that this string has been localized for the current system culture.","nodes":[{"pos":[0,152],"content":"The message that describes the exception. The caller of this constructor must ensure that this string has been localized for the current system culture.","nodes":[{"content":"The message that describes the exception. The caller of this constructor must ensure that this string has been localized for the current system culture.","pos":[0,152],"nodes":[{"content":"The message that describes the exception.","pos":[0,41]},{"content":"The caller of this constructor must ensure that this string has been localized for the current system culture.","pos":[42,152]}]}]}],"pos":[13119,13272],"yaml":true},{"content":"The exception that is the cause of the current exception. If the <code>inner</code> parameter is not `null`, the current exception is raised in a `catch` block that handles the inner exception.","nodes":[{"pos":[0,193],"content":"The exception that is the cause of the current exception. If the <code>inner</code> parameter is not `null`, the current exception is raised in a `catch` block that handles the inner exception.","nodes":[{"content":"The exception that is the cause of the current exception.","pos":[0,57]},{"content":"If the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">inner</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is not <ph id=\"ph2\">`null`</ph>, the current exception is raised in a <ph id=\"ph3\">`catch`</ph> block that handles the inner exception.","pos":[58,193],"source":" If the <code>inner</code> parameter is not `null`, the current exception is raised in a `catch` block that handles the inner exception."}]}],"pos":[13336,13530],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.TypeAccessException\n  commentId: T:System.TypeAccessException\n  id: TypeAccessException\n  children:\n  - System.TypeAccessException.#ctor\n  - System.TypeAccessException.#ctor(System.String)\n  - System.TypeAccessException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)\n  - System.TypeAccessException.#ctor(System.String,System.Exception)\n  langs:\n  - csharp\n  name: TypeAccessException\n  nameWithType: TypeAccessException\n  fullName: System.TypeAccessException\n  type: Class\n  assemblies:\n  - System.Runtime\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: The exception that is thrown when a method attempts to use a type that it does not have access to.\n  remarks: \"<xref:System.TypeAccessException> is thrown when a method attempts to cast an object to a type that is not accessible from the method. For example, an anonymously hosted dynamic method cannot access a security-critical type because the method is [transparent](~/docs/framework/misc/security-transparent-code.md). If the method contains a <xref:System.Reflection.Emit.OpCodes.Castclass?displayProperty=fullName> instruction that casts an object to a security-critical type, or to a generic type that has a security-critical type as one of its type parameters, <xref:System.TypeAccessException> is thrown by the JIT compiler.  \\n  \\n Similarly, <xref:System.TypeAccessException> is thrown for a dynamic method that uses an internal type from another assembly. A method might not have access to its containing type, its return type, or one of its parameter types.  \\n  \\n Apps compiled by using the [!INCLUDE[net_native](~/includes/net-native-md.md)] tool chain may throw a  exception at runtime.  is an internal-only exception type derived from <xref:System.TypeAccessException>. The exception indicates that metadata needed for the successful execution of an app is not present at runtime. You should not use a `try`/`catch` block to handle the exception. Instead, you should determine what metadata is missing and modify your app's  to ensure that it is present at runtime.\"\n  syntax:\n    content: 'public class TypeAccessException : TypeLoadException'\n  inheritance:\n  - System.Object\n  - System.Exception\n  - System.TypeLoadException\n  implements: []\n  inheritedMembers:\n  - System.Exception.Data\n  - System.Exception.GetBaseException\n  - System.Exception.GetType\n  - System.Exception.HelpLink\n  - System.Exception.HResult\n  - System.Exception.InnerException\n  - System.Exception.SerializeObjectState\n  - System.Exception.Source\n  - System.Exception.StackTrace\n  - System.Exception.TargetSite\n  - System.Exception.ToString\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.TypeLoadException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)\n  - System.TypeLoadException.Message\n  - System.TypeLoadException.TypeName\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/TypeAccessException.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.TypeAccessException.#ctor\n  commentId: M:System.TypeAccessException.#ctor\n  id: '#ctor'\n  parent: System.TypeAccessException\n  langs:\n  - csharp\n  name: TypeAccessException()\n  nameWithType: TypeAccessException.TypeAccessException()\n  fullName: TypeAccessException.TypeAccessException()\n  type: Constructor\n  assemblies:\n  - System.Runtime\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Initializes a new instance of the <xref href=\"System.TypeAccessException\"></xref> class with a system-supplied message that describes the error.\n  remarks: \"This constructor initializes the <xref:System.Exception.Message%2A> property of the new instance to a system-supplied message that describes the error, such as \\\"Attempt to access the type failed.\\\" This message takes the current system culture into account.  \\n  \\n The following table shows the initial property values for an instance of <xref:System.TypeAccessException>.  \\n  \\n|Property|Value|  \\n|--------------|-----------|  \\n|<xref:System.Exception.InnerException%2A>|A null reference (`Nothing` in Visual Basic).|  \\n|<xref:System.Exception.Message%2A>|The localized error message string.|\"\n  syntax:\n    content: public TypeAccessException ();\n    parameters: []\n  overload: System.TypeAccessException.#ctor*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/TypeAccessException.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.TypeAccessException.#ctor(System.String)\n  commentId: M:System.TypeAccessException.#ctor(System.String)\n  id: '#ctor(System.String)'\n  parent: System.TypeAccessException\n  langs:\n  - csharp\n  name: TypeAccessException(String)\n  nameWithType: TypeAccessException.TypeAccessException(String)\n  fullName: TypeAccessException.TypeAccessException(String)\n  type: Constructor\n  assemblies:\n  - System.Runtime\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Initializes a new instance of the <xref href=\"System.TypeAccessException\"></xref> class with a specified message that describes the error.\n  remarks: \"The following table shows the initial property values for an instance of <xref:System.TypeAccessException>.  \\n  \\n|Property|Value|  \\n|--------------|-----------|  \\n|<xref:System.Exception.InnerException%2A>|A null reference (`Nothing` in Visual Basic).|  \\n|<xref:System.Exception.Message%2A>|The error message string specified in `message`.|\"\n  syntax:\n    content: public TypeAccessException (string message);\n    parameters:\n    - id: message\n      type: System.String\n      description: The message that describes the exception. The caller of this constructor must ensure that this string has been localized for the current system culture.\n  overload: System.TypeAccessException.#ctor*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/TypeAccessException.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.TypeAccessException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)\n  commentId: M:System.TypeAccessException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)\n  id: '#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)'\n  parent: System.TypeAccessException\n  langs:\n  - csharp\n  name: TypeAccessException(SerializationInfo, StreamingContext)\n  nameWithType: TypeAccessException.TypeAccessException(SerializationInfo, StreamingContext)\n  fullName: TypeAccessException.TypeAccessException(SerializationInfo, StreamingContext)\n  type: Constructor\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System\n  summary: Initializes a new instance of the <xref href=\"System.TypeAccessException\"></xref> class with serialized data.\n  remarks: This constructor is called during deserialization to reconstitute the exception object that was transmitted over a stream. For more information, see [XML and SOAP Serialization](~/docs/framework/serialization/xml-and-soap-serialization.md).\n  syntax:\n    content: protected TypeAccessException (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);\n    parameters:\n    - id: info\n      type: System.Runtime.Serialization.SerializationInfo\n      description: The object that holds the serialized data.\n    - id: context\n      type: System.Runtime.Serialization.StreamingContext\n      description: The contextual information about the source or destination.\n  overload: System.TypeAccessException.#ctor*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/TypeAccessException.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.TypeAccessException.#ctor(System.String,System.Exception)\n  commentId: M:System.TypeAccessException.#ctor(System.String,System.Exception)\n  id: '#ctor(System.String,System.Exception)'\n  parent: System.TypeAccessException\n  langs:\n  - csharp\n  name: TypeAccessException(String, Exception)\n  nameWithType: TypeAccessException.TypeAccessException(String, Exception)\n  fullName: TypeAccessException.TypeAccessException(String, Exception)\n  type: Constructor\n  assemblies:\n  - System.Runtime\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Initializes a new instance of the <xref href=\"System.TypeAccessException\"></xref> class with a specified error message and a reference to the inner exception that is the cause of this exception.\n  remarks: \"An exception that is thrown as a direct result of a previous exception should include a reference to the previous exception in the <xref:System.Exception.InnerException%2A> property. The <xref:System.Exception.InnerException%2A> property returns the same value that is passed into the constructor, or `null` if the <xref:System.Exception.InnerException%2A> property does not supply the inner exception value to the constructor.  \\n  \\n The following table shows the initial property values for an instance of <xref:System.TypeAccessException>.  \\n  \\n|Property|Value|  \\n|--------------|-----------|  \\n|<xref:System.Exception.InnerException%2A>|A null reference (`Nothing` in Visual Basic).|  \\n|<xref:System.Exception.Message%2A>|The error message string specified in `message`.|\"\n  syntax:\n    content: public TypeAccessException (string message, Exception inner);\n    parameters:\n    - id: message\n      type: System.String\n      description: The message that describes the exception. The caller of this constructor must ensure that this string has been localized for the current system culture.\n    - id: inner\n      type: System.Exception\n      description: The exception that is the cause of the current exception. If the <code>inner</code> parameter is not `null`, the current exception is raised in a `catch` block that handles the inner exception.\n  overload: System.TypeAccessException.#ctor*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/TypeAccessException.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\nreferences:\n- uid: System.TypeLoadException\n  parent: System\n  isExternal: false\n  name: TypeLoadException\n  nameWithType: TypeLoadException\n  fullName: System.TypeLoadException\n- uid: System.TypeAccessException.#ctor\n  parent: System.TypeAccessException\n  isExternal: false\n  name: TypeAccessException()\n  nameWithType: TypeAccessException.TypeAccessException()\n  fullName: TypeAccessException.TypeAccessException()\n- uid: System.TypeAccessException.#ctor(System.String)\n  parent: System.TypeAccessException\n  isExternal: false\n  name: TypeAccessException(String)\n  nameWithType: TypeAccessException.TypeAccessException(String)\n  fullName: TypeAccessException.TypeAccessException(String)\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.TypeAccessException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)\n  parent: System.TypeAccessException\n  isExternal: false\n  name: TypeAccessException(SerializationInfo, StreamingContext)\n  nameWithType: TypeAccessException.TypeAccessException(SerializationInfo, StreamingContext)\n  fullName: TypeAccessException.TypeAccessException(SerializationInfo, StreamingContext)\n- uid: System.Runtime.Serialization.SerializationInfo\n  parent: System.Runtime.Serialization\n  isExternal: false\n  name: SerializationInfo\n  nameWithType: SerializationInfo\n  fullName: System.Runtime.Serialization.SerializationInfo\n- uid: System.Runtime.Serialization.StreamingContext\n  parent: System.Runtime.Serialization\n  isExternal: false\n  name: StreamingContext\n  nameWithType: StreamingContext\n  fullName: System.Runtime.Serialization.StreamingContext\n- uid: System.TypeAccessException.#ctor(System.String,System.Exception)\n  parent: System.TypeAccessException\n  isExternal: false\n  name: TypeAccessException(String, Exception)\n  nameWithType: TypeAccessException.TypeAccessException(String, Exception)\n  fullName: TypeAccessException.TypeAccessException(String, Exception)\n- uid: System.Exception\n  parent: System\n  isExternal: false\n  name: Exception\n  nameWithType: Exception\n  fullName: System.Exception\n- uid: System.TypeAccessException.#ctor*\n  parent: System.TypeAccessException\n  isExternal: false\n  name: TypeAccessException\n  nameWithType: TypeAccessException.TypeAccessException\n  fullName: TypeAccessException.TypeAccessException\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/TypeAccessException.xml\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: Object.Equals(Object)\n  fullName: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: Object.GetHashCode()\n  fullName: Object.GetHashCode()\n- uid: System.Exception.GetType\n  parent: System.Exception\n  isExternal: false\n  name: GetType()\n  nameWithType: Exception.GetType()\n  fullName: Exception.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n- uid: System.Exception.ToString\n  parent: System.Exception\n  isExternal: false\n  name: ToString()\n  nameWithType: Exception.ToString()\n  fullName: Exception.ToString()\n- uid: System.Exception.Data\n  parent: System.Exception\n  isExternal: false\n  name: Data\n  nameWithType: Exception.Data\n  fullName: Exception.Data\n- uid: System.Exception.GetBaseException\n  parent: System.Exception\n  isExternal: false\n  name: GetBaseException()\n  nameWithType: Exception.GetBaseException()\n  fullName: Exception.GetBaseException()\n- uid: System.TypeLoadException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)\n  parent: System.TypeLoadException\n  isExternal: false\n  name: GetObjectData(SerializationInfo, StreamingContext)\n  nameWithType: TypeLoadException.GetObjectData(SerializationInfo, StreamingContext)\n  fullName: TypeLoadException.GetObjectData(SerializationInfo, StreamingContext)\n- uid: System.Exception.HelpLink\n  parent: System.Exception\n  isExternal: false\n  name: HelpLink\n  nameWithType: Exception.HelpLink\n  fullName: Exception.HelpLink\n- uid: System.Exception.HResult\n  parent: System.Exception\n  isExternal: false\n  name: HResult\n  nameWithType: Exception.HResult\n  fullName: Exception.HResult\n- uid: System.Exception.InnerException\n  parent: System.Exception\n  isExternal: false\n  name: InnerException\n  nameWithType: Exception.InnerException\n  fullName: Exception.InnerException\n- uid: System.TypeLoadException.Message\n  parent: System.TypeLoadException\n  isExternal: false\n  name: Message\n  nameWithType: TypeLoadException.Message\n  fullName: TypeLoadException.Message\n- uid: System.Exception.SerializeObjectState\n  parent: System.Exception\n  isExternal: false\n  name: SerializeObjectState\n  nameWithType: Exception.SerializeObjectState\n  fullName: Exception.SerializeObjectState\n- uid: System.Exception.Source\n  parent: System.Exception\n  isExternal: false\n  name: Source\n  nameWithType: Exception.Source\n  fullName: Exception.Source\n- uid: System.Exception.StackTrace\n  parent: System.Exception\n  isExternal: false\n  name: StackTrace\n  nameWithType: Exception.StackTrace\n  fullName: Exception.StackTrace\n- uid: System.Exception.TargetSite\n  parent: System.Exception\n  isExternal: false\n  name: TargetSite\n  nameWithType: Exception.TargetSite\n  fullName: Exception.TargetSite\n- uid: System.TypeLoadException.TypeName\n  parent: System.TypeLoadException\n  isExternal: false\n  name: TypeName\n  nameWithType: TypeLoadException.TypeName\n  fullName: TypeLoadException.TypeName\n"}