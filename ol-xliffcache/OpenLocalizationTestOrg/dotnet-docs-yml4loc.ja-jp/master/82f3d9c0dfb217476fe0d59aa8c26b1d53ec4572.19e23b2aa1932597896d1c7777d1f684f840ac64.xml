{"nodes":[{"content":"Represents a communication error in either the service or client application.","nodes":[{"pos":[0,77],"content":"Represents a communication error in either the service or client application.","nodes":[{"content":"Represents a communication error in either the service or client application.","pos":[0,77]}]}],"pos":[779,857],"yaml":true},{"content":"Robust client and service [!INCLUDE[indigo1](~/includes/indigo1-md.md)] applications handle <xref:System.ServiceModel.CommunicationException> objects that may be thrown during communication. There are also two <xref:System.ServiceModel.CommunicationException>-derived exception types (<xref:System.ServiceModel.FaultException%601> and <xref:System.ServiceModel.FaultException>) that clients also often expect. Therefore, in order to prevent the generic <xref:System.ServiceModel.CommunicationException> handler from catching these more specific exception types, catch these exceptions prior to handling <xref:System.ServiceModel.CommunicationException>.  \n  \n-   <xref:System.ServiceModel.FaultException%601> objects are thrown on the client when a SOAP fault that is specified in the operation contract is received in response to a two-way operation (that is, a method with an <xref:System.ServiceModel.OperationContractAttribute> attribute with <xref:System.ServiceModel.OperationContractAttribute.IsOneWay%2A> set to `false`).  \n  \n <xref:System.ServiceModel.FaultException> objects are thrown when a listener receives a SOAP fault that is not expected or specified in the operation contract. This usually occurs when the application is being debugged and the service has the <xref:System.ServiceModel.ServiceBehaviorAttribute.IncludeExceptionDetailInFaults%2A> property set to `true`.  \n  \n> [!NOTE]\n>  When implementing custom channels and binding elements, it is strongly recommended that your components throw only <xref:System.TimeoutException?displayProperty=fullName> or <xref:System.ServiceModel.CommunicationException>-derived objects. In the case where your components throw a recoverable exception that is specific to the component, wrap that exception inside a <xref:System.ServiceModel.CommunicationException>object.  \n  \n For more details about designing and using the [!INCLUDE[indigo2](~/includes/indigo2-md.md)] fault system, see [Specifying and Handling Faults in Contracts and Services](~/docs/framework/wcf/specifying-and-handling-faults-in-contracts-and-services.md).  \n  \n> [!IMPORTANT]\n>  The WCF Runtime will not throw a <xref:System.ServiceModel.CommunicationException> that is unsafe to handle at the point where it leaves the WCF Runtime and enters user code.","nodes":[{"pos":[0,653],"content":"Robust client and service [!INCLUDE[indigo1](~/includes/indigo1-md.md)] applications handle <xref:System.ServiceModel.CommunicationException> objects that may be thrown during communication. There are also two <xref:System.ServiceModel.CommunicationException>-derived exception types (<xref:System.ServiceModel.FaultException%601> and <xref:System.ServiceModel.FaultException>) that clients also often expect. Therefore, in order to prevent the generic <xref:System.ServiceModel.CommunicationException> handler from catching these more specific exception types, catch these exceptions prior to handling <xref:System.ServiceModel.CommunicationException>.","nodes":[{"content":"Robust client and service <ph id=\"ph1\">[!INCLUDE[indigo1](~/includes/indigo1-md.md)]</ph> applications handle <ph id=\"ph2\">&lt;xref:System.ServiceModel.CommunicationException&gt;</ph> objects that may be thrown during communication.","pos":[0,190],"source":"Robust client and service [!INCLUDE[indigo1](~/includes/indigo1-md.md)] applications handle <xref:System.ServiceModel.CommunicationException> objects that may be thrown during communication."},{"content":"There are also two <ph id=\"ph1\">&lt;xref:System.ServiceModel.CommunicationException&gt;</ph>-derived exception types (<ph id=\"ph2\">&lt;xref:System.ServiceModel.FaultException%601&gt;</ph> and <ph id=\"ph3\">&lt;xref:System.ServiceModel.FaultException&gt;</ph>) that clients also often expect.","pos":[191,409],"source":" There are also two <xref:System.ServiceModel.CommunicationException>-derived exception types (<xref:System.ServiceModel.FaultException%601> and <xref:System.ServiceModel.FaultException>) that clients also often expect."},{"content":"Therefore, in order to prevent the generic <ph id=\"ph1\">&lt;xref:System.ServiceModel.CommunicationException&gt;</ph> handler from catching these more specific exception types, catch these exceptions prior to handling <ph id=\"ph2\">&lt;xref:System.ServiceModel.CommunicationException&gt;</ph>.","pos":[410,653],"source":" Therefore, in order to prevent the generic <xref:System.ServiceModel.CommunicationException> handler from catching these more specific exception types, catch these exceptions prior to handling <xref:System.ServiceModel.CommunicationException>."}]},{"pos":[663,1029],"content":"<ph id=\"ph1\">&lt;xref:System.ServiceModel.FaultException%601&gt;</ph> objects are thrown on the client when a SOAP fault that is specified in the operation contract is received in response to a two-way operation (that is, a method with an <ph id=\"ph2\">&lt;xref:System.ServiceModel.OperationContractAttribute&gt;</ph> attribute with <ph id=\"ph3\">&lt;xref:System.ServiceModel.OperationContractAttribute.IsOneWay%2A&gt;</ph> set to <ph id=\"ph4\">`false`</ph>).","source":"<xref:System.ServiceModel.FaultException%601> objects are thrown on the client when a SOAP fault that is specified in the operation contract is received in response to a two-way operation (that is, a method with an <xref:System.ServiceModel.OperationContractAttribute> attribute with <xref:System.ServiceModel.OperationContractAttribute.IsOneWay%2A> set to `false`)."},{"pos":[1036,1388],"content":"<xref:System.ServiceModel.FaultException> objects are thrown when a listener receives a SOAP fault that is not expected or specified in the operation contract. This usually occurs when the application is being debugged and the service has the <xref:System.ServiceModel.ServiceBehaviorAttribute.IncludeExceptionDetailInFaults%2A> property set to `true`.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.ServiceModel.FaultException&gt;</ph> objects are thrown when a listener receives a SOAP fault that is not expected or specified in the operation contract.","pos":[0,159],"source":"<xref:System.ServiceModel.FaultException> objects are thrown when a listener receives a SOAP fault that is not expected or specified in the operation contract."},{"content":"This usually occurs when the application is being debugged and the service has the <ph id=\"ph1\">&lt;xref:System.ServiceModel.ServiceBehaviorAttribute.IncludeExceptionDetailInFaults%2A&gt;</ph> property set to <ph id=\"ph2\">`true`</ph>.","pos":[160,352],"source":" This usually occurs when the application is being debugged and the service has the <xref:System.ServiceModel.ServiceBehaviorAttribute.IncludeExceptionDetailInFaults%2A> property set to `true`."}]},{"pos":[1396,1832],"content":"[!NOTE]\n When implementing custom channels and binding elements, it is strongly recommended that your components throw only <xref:System.TimeoutException?displayProperty=fullName> or <xref:System.ServiceModel.CommunicationException>-derived objects. In the case where your components throw a recoverable exception that is specific to the component, wrap that exception inside a <xref:System.ServiceModel.CommunicationException>object.","leadings":["","> "],"nodes":[{"content":" When implementing custom channels and binding elements, it is strongly recommended that your components throw only <xref:System.TimeoutException?displayProperty=fullName> or <xref:System.ServiceModel.CommunicationException>-derived objects. In the case where your components throw a recoverable exception that is specific to the component, wrap that exception inside a <xref:System.ServiceModel.CommunicationException>object.","pos":[8,434],"nodes":[{"content":"When implementing custom channels and binding elements, it is strongly recommended that your components throw only <ph id=\"ph1\">&lt;xref:System.TimeoutException?displayProperty=fullName&gt;</ph> or <ph id=\"ph2\">&lt;xref:System.ServiceModel.CommunicationException&gt;</ph>-derived objects.","pos":[1,241],"source":" When implementing custom channels and binding elements, it is strongly recommended that your components throw only <xref:System.TimeoutException?displayProperty=fullName> or <xref:System.ServiceModel.CommunicationException>-derived objects."},{"content":"In the case where your components throw a recoverable exception that is specific to the component, wrap that exception inside a <ph id=\"ph1\">&lt;xref:System.ServiceModel.CommunicationException&gt;</ph>object.","pos":[242,426],"source":" In the case where your components throw a recoverable exception that is specific to the component, wrap that exception inside a <xref:System.ServiceModel.CommunicationException>object."}]}]},{"pos":[1839,2091],"content":"For more details about designing and using the <ph id=\"ph1\">[!INCLUDE[indigo2](~/includes/indigo2-md.md)]</ph> fault system, see <bpt id=\"p1\">[</bpt>Specifying and Handling Faults in Contracts and Services<ept id=\"p1\">](~/docs/framework/wcf/specifying-and-handling-faults-in-contracts-and-services.md)</ept>.","source":"For more details about designing and using the [!INCLUDE[indigo2](~/includes/indigo2-md.md)] fault system, see [Specifying and Handling Faults in Contracts and Services](~/docs/framework/wcf/specifying-and-handling-faults-in-contracts-and-services.md)."},{"pos":[2099,2289],"content":"[!IMPORTANT]\n The WCF Runtime will not throw a <xref:System.ServiceModel.CommunicationException> that is unsafe to handle at the point where it leaves the WCF Runtime and enters user code.","leadings":["","> "],"nodes":[{"content":"The WCF Runtime will not throw a <ph id=\"ph1\">&lt;xref:System.ServiceModel.CommunicationException&gt;</ph> that is unsafe to handle at the point where it leaves the WCF Runtime and enters user code.","pos":[14,188],"source":" The WCF Runtime will not throw a <xref:System.ServiceModel.CommunicationException> that is unsafe to handle at the point where it leaves the WCF Runtime and enters user code."}]}],"pos":[868,3172],"yaml":true,"extradata":"MT"},{"content":"Initializes a new instance of the <xref href=\"System.ServiceModel.CommunicationException\"></xref> class.","nodes":[{"pos":[0,104],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.ServiceModel.CommunicationException\"&gt;&lt;/xref&gt;</ph> class.","source":"Initializes a new instance of the <xref href=\"System.ServiceModel.CommunicationException\"></xref> class."}],"pos":[6799,6904],"yaml":true},{"content":"Initializes a new instance of the <xref href=\"System.ServiceModel.CommunicationException\"></xref> class, using the specified message.","nodes":[{"pos":[0,133],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.ServiceModel.CommunicationException\"&gt;&lt;/xref&gt;</ph> class, using the specified message.","source":"Initializes a new instance of the <xref href=\"System.ServiceModel.CommunicationException\"></xref> class, using the specified message."}],"pos":[8250,8384],"yaml":true},{"content":"The description of the error condition.","nodes":[{"pos":[0,39],"content":"The description of the error condition.","nodes":[{"content":"The description of the error condition.","pos":[0,39]}]}],"pos":[8534,8574],"yaml":true},{"content":"Initializes a new instance of the <xref href=\"System.ServiceModel.CommunicationException\"></xref> class, using the specified serialization information and context objects.","nodes":[{"pos":[0,171],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.ServiceModel.CommunicationException\"&gt;&lt;/xref&gt;</ph> class, using the specified serialization information and context objects.","source":"Initializes a new instance of the <xref href=\"System.ServiceModel.CommunicationException\"></xref> class, using the specified serialization information and context objects."}],"pos":[10168,10340],"yaml":true},{"content":"Information relevant to the deserialization process.","nodes":[{"pos":[0,52],"content":"Information relevant to the deserialization process.","nodes":[{"content":"Information relevant to the deserialization process.","pos":[0,52]}]}],"pos":[10615,10668],"yaml":true},{"content":"The context of the deserialization process.","nodes":[{"pos":[0,43],"content":"The context of the deserialization process.","nodes":[{"content":"The context of the deserialization process.","pos":[0,43]}]}],"pos":[10763,10807],"yaml":true},{"content":"Initializes a new instance of the <xref href=\"System.ServiceModel.CommunicationException\"></xref> class, using the specified message and the inner exception.","nodes":[{"pos":[0,157],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.ServiceModel.CommunicationException\"&gt;&lt;/xref&gt;</ph> class, using the specified message and the inner exception.","source":"Initializes a new instance of the <xref href=\"System.ServiceModel.CommunicationException\"></xref> class, using the specified message and the inner exception."}],"pos":[12161,12319],"yaml":true},{"content":"The description of the error condition.","nodes":[{"pos":[0,39],"content":"The description of the error condition.","nodes":[{"content":"The description of the error condition.","pos":[0,39]}]}],"pos":[12495,12535],"yaml":true},{"content":"The inner exception to be used.","nodes":[{"pos":[0,31],"content":"The inner exception to be used.","nodes":[{"content":"The inner exception to be used.","pos":[0,31]}]}],"pos":[12608,12640],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.ServiceModel.CommunicationException\n  commentId: T:System.ServiceModel.CommunicationException\n  id: CommunicationException\n  children:\n  - System.ServiceModel.CommunicationException.#ctor\n  - System.ServiceModel.CommunicationException.#ctor(System.String)\n  - System.ServiceModel.CommunicationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)\n  - System.ServiceModel.CommunicationException.#ctor(System.String,System.Exception)\n  langs:\n  - csharp\n  name: CommunicationException\n  nameWithType: CommunicationException\n  fullName: System.ServiceModel.CommunicationException\n  type: Class\n  assemblies:\n  - System.ServiceModel\n  namespace: System.ServiceModel\n  summary: Represents a communication error in either the service or client application.\n  remarks: \"Robust client and service [!INCLUDE[indigo1](~/includes/indigo1-md.md)] applications handle <xref:System.ServiceModel.CommunicationException> objects that may be thrown during communication. There are also two <xref:System.ServiceModel.CommunicationException>-derived exception types (<xref:System.ServiceModel.FaultException%601> and <xref:System.ServiceModel.FaultException>) that clients also often expect. Therefore, in order to prevent the generic <xref:System.ServiceModel.CommunicationException> handler from catching these more specific exception types, catch these exceptions prior to handling <xref:System.ServiceModel.CommunicationException>.  \\n  \\n-   <xref:System.ServiceModel.FaultException%601> objects are thrown on the client when a SOAP fault that is specified in the operation contract is received in response to a two-way operation (that is, a method with an <xref:System.ServiceModel.OperationContractAttribute> attribute with <xref:System.ServiceModel.OperationContractAttribute.IsOneWay%2A> set to `false`).  \\n  \\n <xref:System.ServiceModel.FaultException> objects are thrown when a listener receives a SOAP fault that is not expected or specified in the operation contract. This usually occurs when the application is being debugged and the service has the <xref:System.ServiceModel.ServiceBehaviorAttribute.IncludeExceptionDetailInFaults%2A> property set to `true`.  \\n  \\n> [!NOTE]\\n>  When implementing custom channels and binding elements, it is strongly recommended that your components throw only <xref:System.TimeoutException?displayProperty=fullName> or <xref:System.ServiceModel.CommunicationException>-derived objects. In the case where your components throw a recoverable exception that is specific to the component, wrap that exception inside a <xref:System.ServiceModel.CommunicationException>object.  \\n  \\n For more details about designing and using the [!INCLUDE[indigo2](~/includes/indigo2-md.md)] fault system, see [Specifying and Handling Faults in Contracts and Services](~/docs/framework/wcf/specifying-and-handling-faults-in-contracts-and-services.md).  \\n  \\n> [!IMPORTANT]\\n>  The WCF Runtime will not throw a <xref:System.ServiceModel.CommunicationException> that is unsafe to handle at the point where it leaves the WCF Runtime and enters user code.\"\n  example:\n  - \"The following code example shows a client that handles <xref:System.ServiceModel.CommunicationException> types. This client also handles <xref:System.ServiceModel.FaultException> objects because the service has <xref:System.ServiceModel.ServiceBehaviorAttribute.IncludeExceptionDetailInFaults%2A> set to `true`.  \\n  \\n [!code-csharp[IErrorHandler#3](~/samples/snippets/csharp/VS_Snippets_CFX/ierrorhandler/cs/client.cs#3)]\\n [!code-vb[IErrorHandler#3](~/samples/snippets/visualbasic/VS_Snippets_CFX/ierrorhandler/vb/client.vb#3)]\"\n  syntax:\n    content: 'public class CommunicationException : SystemException'\n  inheritance:\n  - System.Object\n  - System.Exception\n  - System.SystemException\n  derivedClasses:\n  - System.ServiceModel.ActionNotSupportedException\n  - System.ServiceModel.AddressAccessDeniedException\n  - System.ServiceModel.AddressAlreadyInUseException\n  - System.ServiceModel.ChannelTerminatedException\n  - System.ServiceModel.CommunicationObjectAbortedException\n  - System.ServiceModel.CommunicationObjectFaultedException\n  - System.ServiceModel.EndpointNotFoundException\n  - System.ServiceModel.FaultException\n  - System.ServiceModel.PoisonMessageException\n  - System.ServiceModel.ProtocolException\n  - System.ServiceModel.ServerTooBusyException\n  - System.ServiceModel.ServiceActivationException\n  - System.ServiceModel.Channels.RedirectionException\n  - System.ServiceModel.Channels.RetryException\n  - System.ServiceModel.Dispatcher.MessageFilterException\n  - System.ServiceModel.Persistence.PersistenceException\n  - System.ServiceModel.Security.MessageSecurityException\n  - System.ServiceModel.Security.SecurityAccessDeniedException\n  - System.ServiceModel.Security.SecurityNegotiationException\n  implements: []\n  inheritedMembers:\n  - System.Exception.Data\n  - System.Exception.GetBaseException\n  - System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)\n  - System.Exception.GetType\n  - System.Exception.HelpLink\n  - System.Exception.HResult\n  - System.Exception.InnerException\n  - System.Exception.Message\n  - System.Exception.SerializeObjectState\n  - System.Exception.Source\n  - System.Exception.StackTrace\n  - System.Exception.TargetSite\n  - System.Exception.ToString\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ServiceModel/CommunicationException.xml\n  ms.technology:\n  - dotnet-standard\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.ServiceModel.CommunicationException.#ctor\n  commentId: M:System.ServiceModel.CommunicationException.#ctor\n  id: '#ctor'\n  parent: System.ServiceModel.CommunicationException\n  langs:\n  - csharp\n  name: CommunicationException()\n  nameWithType: CommunicationException.CommunicationException()\n  fullName: CommunicationException.CommunicationException()\n  type: Constructor\n  assemblies:\n  - System.ServiceModel\n  namespace: System.ServiceModel\n  summary: Initializes a new instance of the <xref href=\"System.ServiceModel.CommunicationException\"></xref> class.\n  syntax:\n    content: public CommunicationException ();\n    parameters: []\n  overload: System.ServiceModel.CommunicationException.#ctor*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ServiceModel/CommunicationException.xml\n  ms.technology:\n  - dotnet-standard\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.ServiceModel.CommunicationException.#ctor(System.String)\n  commentId: M:System.ServiceModel.CommunicationException.#ctor(System.String)\n  id: '#ctor(System.String)'\n  parent: System.ServiceModel.CommunicationException\n  langs:\n  - csharp\n  name: CommunicationException(String)\n  nameWithType: CommunicationException.CommunicationException(String)\n  fullName: CommunicationException.CommunicationException(String)\n  type: Constructor\n  assemblies:\n  - System.ServiceModel\n  namespace: System.ServiceModel\n  summary: Initializes a new instance of the <xref href=\"System.ServiceModel.CommunicationException\"></xref> class, using the specified message.\n  syntax:\n    content: public CommunicationException (string message);\n    parameters:\n    - id: message\n      type: System.String\n      description: The description of the error condition.\n  overload: System.ServiceModel.CommunicationException.#ctor*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ServiceModel/CommunicationException.xml\n  ms.technology:\n  - dotnet-standard\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.ServiceModel.CommunicationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)\n  commentId: M:System.ServiceModel.CommunicationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)\n  id: '#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)'\n  parent: System.ServiceModel.CommunicationException\n  langs:\n  - csharp\n  name: CommunicationException(SerializationInfo, StreamingContext)\n  nameWithType: CommunicationException.CommunicationException(SerializationInfo, StreamingContext)\n  fullName: CommunicationException.CommunicationException(SerializationInfo, StreamingContext)\n  type: Constructor\n  assemblies:\n  - System.ServiceModel\n  namespace: System.ServiceModel\n  summary: Initializes a new instance of the <xref href=\"System.ServiceModel.CommunicationException\"></xref> class, using the specified serialization information and context objects.\n  syntax:\n    content: protected CommunicationException (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);\n    parameters:\n    - id: info\n      type: System.Runtime.Serialization.SerializationInfo\n      description: Information relevant to the deserialization process.\n    - id: context\n      type: System.Runtime.Serialization.StreamingContext\n      description: The context of the deserialization process.\n  overload: System.ServiceModel.CommunicationException.#ctor*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ServiceModel/CommunicationException.xml\n  ms.technology:\n  - dotnet-standard\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.ServiceModel.CommunicationException.#ctor(System.String,System.Exception)\n  commentId: M:System.ServiceModel.CommunicationException.#ctor(System.String,System.Exception)\n  id: '#ctor(System.String,System.Exception)'\n  parent: System.ServiceModel.CommunicationException\n  langs:\n  - csharp\n  name: CommunicationException(String, Exception)\n  nameWithType: CommunicationException.CommunicationException(String, Exception)\n  fullName: CommunicationException.CommunicationException(String, Exception)\n  type: Constructor\n  assemblies:\n  - System.ServiceModel\n  namespace: System.ServiceModel\n  summary: Initializes a new instance of the <xref href=\"System.ServiceModel.CommunicationException\"></xref> class, using the specified message and the inner exception.\n  syntax:\n    content: public CommunicationException (string message, Exception innerException);\n    parameters:\n    - id: message\n      type: System.String\n      description: The description of the error condition.\n    - id: innerException\n      type: System.Exception\n      description: The inner exception to be used.\n  overload: System.ServiceModel.CommunicationException.#ctor*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ServiceModel/CommunicationException.xml\n  ms.technology:\n  - dotnet-standard\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\nreferences:\n- uid: System.SystemException\n  parent: System\n  isExternal: false\n  name: SystemException\n  nameWithType: SystemException\n  fullName: System.SystemException\n- uid: System.ServiceModel.CommunicationException.#ctor\n  parent: System.ServiceModel.CommunicationException\n  isExternal: false\n  name: CommunicationException()\n  nameWithType: CommunicationException.CommunicationException()\n  fullName: CommunicationException.CommunicationException()\n- uid: System.ServiceModel.CommunicationException.#ctor(System.String)\n  parent: System.ServiceModel.CommunicationException\n  isExternal: false\n  name: CommunicationException(String)\n  nameWithType: CommunicationException.CommunicationException(String)\n  fullName: CommunicationException.CommunicationException(String)\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.ServiceModel.CommunicationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)\n  parent: System.ServiceModel.CommunicationException\n  isExternal: false\n  name: CommunicationException(SerializationInfo, StreamingContext)\n  nameWithType: CommunicationException.CommunicationException(SerializationInfo, StreamingContext)\n  fullName: CommunicationException.CommunicationException(SerializationInfo, StreamingContext)\n- uid: System.Runtime.Serialization.SerializationInfo\n  parent: System.Runtime.Serialization\n  isExternal: false\n  name: SerializationInfo\n  nameWithType: SerializationInfo\n  fullName: System.Runtime.Serialization.SerializationInfo\n- uid: System.Runtime.Serialization.StreamingContext\n  parent: System.Runtime.Serialization\n  isExternal: false\n  name: StreamingContext\n  nameWithType: StreamingContext\n  fullName: System.Runtime.Serialization.StreamingContext\n- uid: System.ServiceModel.CommunicationException.#ctor(System.String,System.Exception)\n  parent: System.ServiceModel.CommunicationException\n  isExternal: false\n  name: CommunicationException(String, Exception)\n  nameWithType: CommunicationException.CommunicationException(String, Exception)\n  fullName: CommunicationException.CommunicationException(String, Exception)\n- uid: System.Exception\n  parent: System\n  isExternal: false\n  name: Exception\n  nameWithType: Exception\n  fullName: System.Exception\n- uid: System.ServiceModel.CommunicationException.#ctor*\n  parent: System.ServiceModel.CommunicationException\n  isExternal: false\n  name: CommunicationException\n  nameWithType: CommunicationException.CommunicationException\n  fullName: CommunicationException.CommunicationException\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ServiceModel/CommunicationException.xml\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: Object.Equals(Object)\n  fullName: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: Object.GetHashCode()\n  fullName: Object.GetHashCode()\n- uid: System.Exception.GetType\n  parent: System.Exception\n  isExternal: false\n  name: GetType()\n  nameWithType: Exception.GetType()\n  fullName: Exception.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n- uid: System.Exception.ToString\n  parent: System.Exception\n  isExternal: false\n  name: ToString()\n  nameWithType: Exception.ToString()\n  fullName: Exception.ToString()\n- uid: System.Exception.Data\n  parent: System.Exception\n  isExternal: false\n  name: Data\n  nameWithType: Exception.Data\n  fullName: Exception.Data\n- uid: System.Exception.GetBaseException\n  parent: System.Exception\n  isExternal: false\n  name: GetBaseException()\n  nameWithType: Exception.GetBaseException()\n  fullName: Exception.GetBaseException()\n- uid: System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)\n  parent: System.Exception\n  isExternal: false\n  name: GetObjectData(SerializationInfo, StreamingContext)\n  nameWithType: Exception.GetObjectData(SerializationInfo, StreamingContext)\n  fullName: Exception.GetObjectData(SerializationInfo, StreamingContext)\n- uid: System.Exception.HelpLink\n  parent: System.Exception\n  isExternal: false\n  name: HelpLink\n  nameWithType: Exception.HelpLink\n  fullName: Exception.HelpLink\n- uid: System.Exception.HResult\n  parent: System.Exception\n  isExternal: false\n  name: HResult\n  nameWithType: Exception.HResult\n  fullName: Exception.HResult\n- uid: System.Exception.InnerException\n  parent: System.Exception\n  isExternal: false\n  name: InnerException\n  nameWithType: Exception.InnerException\n  fullName: Exception.InnerException\n- uid: System.Exception.Message\n  parent: System.Exception\n  isExternal: false\n  name: Message\n  nameWithType: Exception.Message\n  fullName: Exception.Message\n- uid: System.Exception.SerializeObjectState\n  parent: System.Exception\n  isExternal: false\n  name: SerializeObjectState\n  nameWithType: Exception.SerializeObjectState\n  fullName: Exception.SerializeObjectState\n- uid: System.Exception.Source\n  parent: System.Exception\n  isExternal: false\n  name: Source\n  nameWithType: Exception.Source\n  fullName: Exception.Source\n- uid: System.Exception.StackTrace\n  parent: System.Exception\n  isExternal: false\n  name: StackTrace\n  nameWithType: Exception.StackTrace\n  fullName: Exception.StackTrace\n- uid: System.Exception.TargetSite\n  parent: System.Exception\n  isExternal: false\n  name: TargetSite\n  nameWithType: Exception.TargetSite\n  fullName: Exception.TargetSite\n"}