{"nodes":[{"content":"The `Financial` module contains procedures used to perform financial operations.","nodes":[{"pos":[0,80],"content":"The <ph id=\"ph1\">`Financial`</ph> module contains procedures used to perform financial operations.","source":"The `Financial` module contains procedures used to perform financial operations."}],"pos":[1813,1894],"yaml":true},{"content":"This module supports the Visual Basic run-time library members that perform financial calculations such as depreciation, present and future values, interest rates, rates of return, and payments.","nodes":[{"pos":[0,194],"content":"This module supports the Visual Basic run-time library members that perform financial calculations such as depreciation, present and future values, interest rates, rates of return, and payments.","nodes":[{"content":"This module supports the Visual Basic run-time library members that perform financial calculations such as depreciation, present and future values, interest rates, rates of return, and payments.","pos":[0,194]}]}],"pos":[1905,2100],"yaml":true,"extradata":"MT"},{"content":"Returns a `Double` specifying the depreciation of an asset for a specific time period using the double-declining balance method or some other method you specify.","nodes":[{"pos":[0,161],"content":"Returns a <ph id=\"ph1\">`Double`</ph> specifying the depreciation of an asset for a specific time period using the double-declining balance method or some other method you specify.","source":"Returns a `Double` specifying the depreciation of an asset for a specific time period using the double-declining balance method or some other method you specify."}],"pos":[4385,4547],"yaml":true},{"content":"The double-declining balance method computes depreciation at an accelerated rate. Depreciation is highest in the first period and decreases in successive periods.  \n  \n The `Life` and `Period` arguments must be expressed in the same units. For example, if `Life` is given in months, `Period` must also be given in months. All arguments must be positive numbers.  \n  \n The `DDB` function uses the following formula to calculate depreciation for a given period:  \n  \n Depreciation / Period = ((Cost – Salvage) * Factor) / Life","nodes":[{"pos":[0,162],"content":"The double-declining balance method computes depreciation at an accelerated rate. Depreciation is highest in the first period and decreases in successive periods.","nodes":[{"content":"The double-declining balance method computes depreciation at an accelerated rate. Depreciation is highest in the first period and decreases in successive periods.","pos":[0,162],"nodes":[{"content":"The double-declining balance method computes depreciation at an accelerated rate.","pos":[0,81]},{"content":"Depreciation is highest in the first period and decreases in successive periods.","pos":[82,162]}]}]},{"pos":[169,361],"content":"The `Life` and `Period` arguments must be expressed in the same units. For example, if `Life` is given in months, `Period` must also be given in months. All arguments must be positive numbers.","nodes":[{"content":"The <ph id=\"ph1\">`Life`</ph> and <ph id=\"ph2\">`Period`</ph> arguments must be expressed in the same units.","pos":[0,70],"source":"The `Life` and `Period` arguments must be expressed in the same units."},{"content":"For example, if <ph id=\"ph1\">`Life`</ph> is given in months, <ph id=\"ph2\">`Period`</ph> must also be given in months.","pos":[71,152],"source":" For example, if `Life` is given in months, `Period` must also be given in months."},{"content":"All arguments must be positive numbers.","pos":[153,192]}]},{"pos":[368,459],"content":"The <ph id=\"ph1\">`DDB`</ph> function uses the following formula to calculate depreciation for a given period:","source":"The `DDB` function uses the following formula to calculate depreciation for a given period:"},{"pos":[466,524],"content":"Depreciation / Period = ((Cost – Salvage) * Factor) / Life","nodes":[{"content":"Depreciation / Period = ((Cost – Salvage) * Factor) / Life","pos":[0,58]}]}],"pos":[4558,5091],"yaml":true,"extradata":"MT"},{"content":"Required. `Double` specifying initial cost of the asset.","nodes":[{"pos":[0,56],"content":"Required. `Double` specifying initial cost of the asset.","nodes":[{"content":"Required.","pos":[0,9]},{"content":"<ph id=\"ph1\">`Double`</ph> specifying initial cost of the asset.","pos":[10,56],"source":"`Double` specifying initial cost of the asset."}]}],"pos":[5758,5815],"yaml":true},{"content":"Required. `Double` specifying value of the asset at the end of its useful life.","nodes":[{"pos":[0,79],"content":"Required. `Double` specifying value of the asset at the end of its useful life.","nodes":[{"content":"Required.","pos":[0,9]},{"content":"<ph id=\"ph1\">`Double`</ph> specifying value of the asset at the end of its useful life.","pos":[10,79],"source":"`Double` specifying value of the asset at the end of its useful life."}]}],"pos":[5878,5958],"yaml":true},{"content":"Required. `Double` specifying length of useful life of the asset.","nodes":[{"pos":[0,65],"content":"Required. `Double` specifying length of useful life of the asset.","nodes":[{"content":"Required.","pos":[0,9]},{"content":"<ph id=\"ph1\">`Double`</ph> specifying length of useful life of the asset.","pos":[10,65],"source":"`Double` specifying length of useful life of the asset."}]}],"pos":[6018,6084],"yaml":true},{"content":"Required. `Double` specifying period for which asset depreciation is calculated.","nodes":[{"pos":[0,80],"content":"Required. `Double` specifying period for which asset depreciation is calculated.","nodes":[{"content":"Required.","pos":[0,9]},{"content":"<ph id=\"ph1\">`Double`</ph> specifying period for which asset depreciation is calculated.","pos":[10,80],"source":"`Double` specifying period for which asset depreciation is calculated."}]}],"pos":[6146,6227],"yaml":true},{"content":"Optional. `Double` specifying rate at which the balance declines. If omitted, 2 (double-declining method) is assumed.","nodes":[{"pos":[0,117],"content":"Optional. `Double` specifying rate at which the balance declines. If omitted, 2 (double-declining method) is assumed.","nodes":[{"content":"Optional.","pos":[0,9]},{"content":"<ph id=\"ph1\">`Double`</ph> specifying rate at which the balance declines.","pos":[10,65],"source":"`Double` specifying rate at which the balance declines."},{"content":"If omitted, 2 (double-declining method) is assumed.","pos":[66,117]}]}],"pos":[6289,6407],"yaml":true},{"content":"Returns a `Double` specifying the depreciation of an asset for a specific time period using the double-declining balance method or some other method you specify.","nodes":[{"pos":[0,161],"content":"Returns a <ph id=\"ph1\">`Double`</ph> specifying the depreciation of an asset for a specific time period using the double-declining balance method or some other method you specify.","source":"Returns a `Double` specifying the depreciation of an asset for a specific time period using the double-declining balance method or some other method you specify."}],"pos":[6464,6626],"yaml":true},{"content":"<code>Factor</code> <= 0, <code>Salvage</code> < 0, <code>Period</code> <= 0, or <code>Period</code> > <code>Life.</code>","nodes":[{"pos":[0,121],"content":"<ph id=\"ph1\">&lt;code&gt;Factor&lt;/code&gt;</ph> &lt;= 0, <bpt id=\"p1\">&lt;code&gt;</bpt>Salvage<ept id=\"p1\">&lt;/code&gt;</ept> &lt; 0, <ph id=\"ph2\">&lt;code&gt;Period&lt;/code&gt;</ph> &lt;= 0, or <bpt id=\"p2\">&lt;code&gt;</bpt>Period<ept id=\"p2\">&lt;/code&gt;</ept><ph id=\"ph3\"> &gt; </ph><ph id=\"ph4\">&lt;code&gt;Life.&lt;/code&gt;</ph>","source":"<code>Factor</code> <= 0, <code>Salvage</code> < 0, <code>Period</code> <= 0, or <code>Period</code> > <code>Life.</code>"}],"pos":[6783,6905],"yaml":true},{"content":"Returns a `Double` specifying the future value of an annuity based on periodic, fixed payments and a fixed interest rate.","nodes":[{"pos":[0,121],"content":"Returns a <ph id=\"ph1\">`Double`</ph> specifying the future value of an annuity based on periodic, fixed payments and a fixed interest rate.","source":"Returns a `Double` specifying the future value of an annuity based on periodic, fixed payments and a fixed interest rate."}],"pos":[8112,8234],"yaml":true},{"content":"An annuity is a series of fixed cash payments made over time. An annuity can be a loan (such as a home mortgage) or an investment (such as a monthly savings plan).  \n  \n The `Rate` and `NPer` arguments must be calculated using payment periods expressed in the same units. For example, if `Rate` is calculated using months, `NPer` must also be calculated using months.  \n  \n For all arguments, cash paid out (such as deposits to savings) is represented by negative numbers; cash received (such as dividend checks) is represented by positive numbers.","nodes":[{"pos":[0,163],"content":"An annuity is a series of fixed cash payments made over time. An annuity can be a loan (such as a home mortgage) or an investment (such as a monthly savings plan).","nodes":[{"content":"An annuity is a series of fixed cash payments made over time. An annuity can be a loan (such as a home mortgage) or an investment (such as a monthly savings plan).","pos":[0,163],"nodes":[{"content":"An annuity is a series of fixed cash payments made over time.","pos":[0,61]},{"content":"An annuity can be a loan (such as a home mortgage) or an investment (such as a monthly savings plan).","pos":[62,163]}]}]},{"pos":[170,367],"content":"The `Rate` and `NPer` arguments must be calculated using payment periods expressed in the same units. For example, if `Rate` is calculated using months, `NPer` must also be calculated using months.","nodes":[{"content":"The <ph id=\"ph1\">`Rate`</ph> and <ph id=\"ph2\">`NPer`</ph> arguments must be calculated using payment periods expressed in the same units.","pos":[0,101],"source":"The `Rate` and `NPer` arguments must be calculated using payment periods expressed in the same units."},{"content":"For example, if <ph id=\"ph1\">`Rate`</ph> is calculated using months, <ph id=\"ph2\">`NPer`</ph> must also be calculated using months.","pos":[102,197],"source":" For example, if `Rate` is calculated using months, `NPer` must also be calculated using months."}]},{"pos":[374,548],"content":"For all arguments, cash paid out (such as deposits to savings) is represented by negative numbers; cash received (such as dividend checks) is represented by positive numbers.","nodes":[{"content":"For all arguments, cash paid out (such as deposits to savings) is represented by negative numbers; cash received (such as dividend checks) is represented by positive numbers.","pos":[0,174]}]}],"pos":[8245,8800],"yaml":true,"extradata":"MT"},{"content":"Required. `Double` specifying interest rate per period. For example, if you get a car loan at an annual percentage rate (APR) of 10 percent and make monthly payments, the rate per period is 0.1/12, or 0.0083.","nodes":[{"pos":[0,208],"content":"Required. `Double` specifying interest rate per period. For example, if you get a car loan at an annual percentage rate (APR) of 10 percent and make monthly payments, the rate per period is 0.1/12, or 0.0083.","nodes":[{"content":"Required.","pos":[0,9]},{"content":"<ph id=\"ph1\">`Double`</ph> specifying interest rate per period.","pos":[10,55],"source":"`Double` specifying interest rate per period."},{"content":"For example, if you get a car loan at an annual percentage rate (APR) of 10 percent and make monthly payments, the rate per period is 0.1/12, or 0.0083.","pos":[56,208]}]}],"pos":[9641,9850],"yaml":true},{"content":"Required. `Double` specifying total number of payment periods in the annuity. For example, if you make monthly payments on a four-year car loan, your loan has a total of 4 x 12 (or 48) payment periods.","nodes":[{"pos":[0,201],"content":"Required. `Double` specifying total number of payment periods in the annuity. For example, if you make monthly payments on a four-year car loan, your loan has a total of 4 x 12 (or 48) payment periods.","nodes":[{"content":"Required.","pos":[0,9]},{"content":"<ph id=\"ph1\">`Double`</ph> specifying total number of payment periods in the annuity.","pos":[10,77],"source":"`Double` specifying total number of payment periods in the annuity."},{"content":"For example, if you make monthly payments on a four-year car loan, your loan has a total of 4 x 12 (or 48) payment periods.","pos":[78,201]}]}],"pos":[9910,10112],"yaml":true},{"content":"Required. `Double` specifying payment to be made each period. Payments usually contain principal and interest that doesn't change over the life of the annuity.","nodes":[{"pos":[0,159],"content":"Required. `Double` specifying payment to be made each period. Payments usually contain principal and interest that doesn't change over the life of the annuity.","nodes":[{"content":"Required.","pos":[0,9]},{"content":"<ph id=\"ph1\">`Double`</ph> specifying payment to be made each period.","pos":[10,61],"source":"`Double` specifying payment to be made each period."},{"content":"Payments usually contain principal and interest that doesn't change over the life of the annuity.","pos":[62,159]}]}],"pos":[10171,10331],"yaml":true},{"content":"Optional. `Double` specifying present value (or lump sum) of a series of future payments. For example, when you borrow money to buy a car, the loan amount is the present value to the lender of the monthly car payments you will make. If omitted, 0 is assumed.","nodes":[{"pos":[0,258],"content":"Optional. `Double` specifying present value (or lump sum) of a series of future payments. For example, when you borrow money to buy a car, the loan amount is the present value to the lender of the monthly car payments you will make. If omitted, 0 is assumed.","nodes":[{"content":"Optional.","pos":[0,9]},{"content":"<ph id=\"ph1\">`Double`</ph> specifying present value (or lump sum) of a series of future payments.","pos":[10,89],"source":"`Double` specifying present value (or lump sum) of a series of future payments."},{"content":"For example, when you borrow money to buy a car, the loan amount is the present value to the lender of the monthly car payments you will make.","pos":[90,232]},{"content":"If omitted, 0 is assumed.","pos":[233,258]}]}],"pos":[10389,10648],"yaml":true},{"content":"Optional. Object of type <xref href=\"Microsoft.VisualBasic.DueDate\"></xref> that specifies when payments are due. This argument must be either `DueDate.EndOfPeriod` if payments are due at the end of the payment period, or `DueDate.BegOfPeriod` if payments are due at the beginning of the period. If omitted, `DueDate.EndOfPeriod` is assumed.","nodes":[{"pos":[0,341],"content":"Optional. Object of type <xref href=\"Microsoft.VisualBasic.DueDate\"></xref> that specifies when payments are due. This argument must be either `DueDate.EndOfPeriod` if payments are due at the end of the payment period, or `DueDate.BegOfPeriod` if payments are due at the beginning of the period. If omitted, `DueDate.EndOfPeriod` is assumed.","nodes":[{"content":"Optional.","pos":[0,9]},{"content":"Object of type <ph id=\"ph1\">&lt;xref href=\"Microsoft.VisualBasic.DueDate\"&gt;&lt;/xref&gt;</ph> that specifies when payments are due.","pos":[10,113],"source":" Object of type <xref href=\"Microsoft.VisualBasic.DueDate\"></xref> that specifies when payments are due."},{"content":"This argument must be either <ph id=\"ph1\">`DueDate.EndOfPeriod`</ph> if payments are due at the end of the payment period, or <ph id=\"ph2\">`DueDate.BegOfPeriod`</ph> if payments are due at the beginning of the period.","pos":[114,295],"source":" This argument must be either `DueDate.EndOfPeriod` if payments are due at the end of the payment period, or `DueDate.BegOfPeriod` if payments are due at the beginning of the period."},{"content":"If omitted, <ph id=\"ph1\">`DueDate.EndOfPeriod`</ph> is assumed.","pos":[296,341],"source":" If omitted, `DueDate.EndOfPeriod` is assumed."}]}],"pos":[10723,11065],"yaml":true},{"content":"Returns a `Double` specifying the future value of an annuity based on periodic, fixed payments and a fixed interest rate.","nodes":[{"pos":[0,121],"content":"Returns a <ph id=\"ph1\">`Double`</ph> specifying the future value of an annuity based on periodic, fixed payments and a fixed interest rate.","source":"Returns a `Double` specifying the future value of an annuity based on periodic, fixed payments and a fixed interest rate."}],"pos":[11122,11244],"yaml":true},{"content":"Returns a `Double` specifying the interest payment for a given period of an annuity based on periodic, fixed payments and a fixed interest rate.","nodes":[{"pos":[0,144],"content":"Returns a <ph id=\"ph1\">`Double`</ph> specifying the interest payment for a given period of an annuity based on periodic, fixed payments and a fixed interest rate.","source":"Returns a `Double` specifying the interest payment for a given period of an annuity based on periodic, fixed payments and a fixed interest rate."}],"pos":[12594,12739],"yaml":true},{"content":"An annuity is a series of fixed cash payments made over time. An annuity can be a loan (such as a home mortgage) or an investment (such as a monthly savings plan).  \n  \n The `Rate` and `NPer` arguments must be calculated using payment periods expressed in the same units. For example, if `Rate` is calculated using months, `NPer` must also be calculated using months.  \n  \n For all arguments, cash paid out (such as deposits to savings) is represented by negative numbers; cash received (such as dividend checks) is represented by positive numbers.","nodes":[{"pos":[0,163],"content":"An annuity is a series of fixed cash payments made over time. An annuity can be a loan (such as a home mortgage) or an investment (such as a monthly savings plan).","nodes":[{"content":"An annuity is a series of fixed cash payments made over time. An annuity can be a loan (such as a home mortgage) or an investment (such as a monthly savings plan).","pos":[0,163],"nodes":[{"content":"An annuity is a series of fixed cash payments made over time.","pos":[0,61]},{"content":"An annuity can be a loan (such as a home mortgage) or an investment (such as a monthly savings plan).","pos":[62,163]}]}]},{"pos":[170,367],"content":"The `Rate` and `NPer` arguments must be calculated using payment periods expressed in the same units. For example, if `Rate` is calculated using months, `NPer` must also be calculated using months.","nodes":[{"content":"The <ph id=\"ph1\">`Rate`</ph> and <ph id=\"ph2\">`NPer`</ph> arguments must be calculated using payment periods expressed in the same units.","pos":[0,101],"source":"The `Rate` and `NPer` arguments must be calculated using payment periods expressed in the same units."},{"content":"For example, if <ph id=\"ph1\">`Rate`</ph> is calculated using months, <ph id=\"ph2\">`NPer`</ph> must also be calculated using months.","pos":[102,197],"source":" For example, if `Rate` is calculated using months, `NPer` must also be calculated using months."}]},{"pos":[374,548],"content":"For all arguments, cash paid out (such as deposits to savings) is represented by negative numbers; cash received (such as dividend checks) is represented by positive numbers.","nodes":[{"content":"For all arguments, cash paid out (such as deposits to savings) is represented by negative numbers; cash received (such as dividend checks) is represented by positive numbers.","pos":[0,174]}]}],"pos":[12750,13305],"yaml":true,"extradata":"MT"},{"content":"Required. `Double` specifying interest rate per period. For example, if you get a car loan at an annual percentage rate (APR) of 10 percent and make monthly payments, the rate per period is 0.1/12, or 0.0083.","nodes":[{"pos":[0,208],"content":"Required. `Double` specifying interest rate per period. For example, if you get a car loan at an annual percentage rate (APR) of 10 percent and make monthly payments, the rate per period is 0.1/12, or 0.0083.","nodes":[{"content":"Required.","pos":[0,9]},{"content":"<ph id=\"ph1\">`Double`</ph> specifying interest rate per period.","pos":[10,55],"source":"`Double` specifying interest rate per period."},{"content":"For example, if you get a car loan at an annual percentage rate (APR) of 10 percent and make monthly payments, the rate per period is 0.1/12, or 0.0083.","pos":[56,208]}]}],"pos":[14220,14429],"yaml":true},{"content":"Required. `Double` specifying payment period in the range 1 through <code>NPer</code>.","nodes":[{"pos":[0,86],"content":"Required. `Double` specifying payment period in the range 1 through <code>NPer</code>.","nodes":[{"content":"Required.","pos":[0,9]},{"content":"<ph id=\"ph1\">`Double`</ph> specifying payment period in the range 1 through <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">NPer</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","pos":[10,86],"source":"`Double` specifying payment period in the range 1 through <code>NPer</code>."}]}],"pos":[14488,14575],"yaml":true},{"content":"Required. `Double` specifying total number of payment periods in the annuity. For example, if you make monthly payments on a four-year car loan, your loan has a total of 4 x 12 (or 48) payment periods.","nodes":[{"pos":[0,201],"content":"Required. `Double` specifying total number of payment periods in the annuity. For example, if you make monthly payments on a four-year car loan, your loan has a total of 4 x 12 (or 48) payment periods.","nodes":[{"content":"Required.","pos":[0,9]},{"content":"<ph id=\"ph1\">`Double`</ph> specifying total number of payment periods in the annuity.","pos":[10,77],"source":"`Double` specifying total number of payment periods in the annuity."},{"content":"For example, if you make monthly payments on a four-year car loan, your loan has a total of 4 x 12 (or 48) payment periods.","pos":[78,201]}]}],"pos":[14635,14837],"yaml":true},{"content":"Required. `Double` specifying present value, or value today, of a series of future payments or receipts. For example, when you borrow money to buy a car, the loan amount is the present value to the lender of the monthly car payments you will make.","nodes":[{"pos":[0,247],"content":"Required. `Double` specifying present value, or value today, of a series of future payments or receipts. For example, when you borrow money to buy a car, the loan amount is the present value to the lender of the monthly car payments you will make.","nodes":[{"content":"Required.","pos":[0,9]},{"content":"<ph id=\"ph1\">`Double`</ph> specifying present value, or value today, of a series of future payments or receipts.","pos":[10,104],"source":"`Double` specifying present value, or value today, of a series of future payments or receipts."},{"content":"For example, when you borrow money to buy a car, the loan amount is the present value to the lender of the monthly car payments you will make.","pos":[105,247]}]}],"pos":[14895,15143],"yaml":true},{"content":"Optional. `Double` specifying future value or cash balance you want after you've made the final payment. For example, the future value of a loan is $0 because that's its value after the final payment. However, if you want to save $50,000 over 18 years for your child's education, then $50,000 is the future value. If omitted, 0 is assumed.","nodes":[{"pos":[0,339],"content":"Optional. `Double` specifying future value or cash balance you want after you've made the final payment. For example, the future value of a loan is $0 because that's its value after the final payment. However, if you want to save $50,000 over 18 years for your child's education, then $50,000 is the future value. If omitted, 0 is assumed.","nodes":[{"content":"Optional.","pos":[0,9]},{"content":"<ph id=\"ph1\">`Double`</ph> specifying future value or cash balance you want after you've made the final payment.","pos":[10,104],"source":"`Double` specifying future value or cash balance you want after you've made the final payment."},{"content":"For example, the future value of a loan is $0 because that's its value after the final payment.","pos":[105,200]},{"content":"However, if you want to save $50,000 over 18 years for your child's education, then $50,000 is the future value.","pos":[201,313]},{"content":"If omitted, 0 is assumed.","pos":[314,339]}]}],"pos":[15201,15541],"yaml":true},{"content":"Optional. Object of type <xref href=\"Microsoft.VisualBasic.DueDate\"></xref> that specifies when payments are due. This argument must be either <code>DueDate.EndOfPeriod</code> if payments are due at the end of the payment period, or <code>DueDate.BegOfPeriod</code> if payments are due at the beginning of the period. If omitted, <code>DueDate.EndOfPeriod</code> is assumed.","nodes":[{"pos":[0,374],"content":"Optional. Object of type <xref href=\"Microsoft.VisualBasic.DueDate\"></xref> that specifies when payments are due. This argument must be either <code>DueDate.EndOfPeriod</code> if payments are due at the end of the payment period, or <code>DueDate.BegOfPeriod</code> if payments are due at the beginning of the period. If omitted, <code>DueDate.EndOfPeriod</code> is assumed.","nodes":[{"content":"Optional.","pos":[0,9]},{"content":"Object of type <ph id=\"ph1\">&lt;xref href=\"Microsoft.VisualBasic.DueDate\"&gt;&lt;/xref&gt;</ph> that specifies when payments are due.","pos":[10,113],"source":" Object of type <xref href=\"Microsoft.VisualBasic.DueDate\"></xref> that specifies when payments are due."},{"content":"This argument must be either <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">DueDate.EndOfPeriod</ph><ept id=\"p1\">&lt;/code&gt;</ept> if payments are due at the end of the payment period, or <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">DueDate.BegOfPeriod</ph><ept id=\"p2\">&lt;/code&gt;</ept> if payments are due at the beginning of the period.","pos":[114,317],"source":" This argument must be either <code>DueDate.EndOfPeriod</code> if payments are due at the end of the payment period, or <code>DueDate.BegOfPeriod</code> if payments are due at the beginning of the period."},{"content":"If omitted, <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">DueDate.EndOfPeriod</ph><ept id=\"p1\">&lt;/code&gt;</ept> is assumed.","pos":[318,374],"source":" If omitted, <code>DueDate.EndOfPeriod</code> is assumed."}]}],"pos":[15616,15991],"yaml":true},{"content":"Returns a `Double` specifying the interest payment for a given period of an annuity based on periodic, fixed payments and a fixed interest rate.","nodes":[{"pos":[0,144],"content":"Returns a <ph id=\"ph1\">`Double`</ph> specifying the interest payment for a given period of an annuity based on periodic, fixed payments and a fixed interest rate.","source":"Returns a `Double` specifying the interest payment for a given period of an annuity based on periodic, fixed payments and a fixed interest rate."}],"pos":[16048,16193],"yaml":true},{"content":"<code>Per</code> <= 0 or <code>Per</code> > <code>NPer</code>","nodes":[{"pos":[0,61],"content":"<ph id=\"ph1\">&lt;code&gt;Per&lt;/code&gt;</ph> &lt;= 0 or <bpt id=\"p1\">&lt;code&gt;</bpt>Per<ept id=\"p1\">&lt;/code&gt;</ept><ph id=\"ph2\"> &gt; </ph><ph id=\"ph3\">&lt;code&gt;NPer&lt;/code&gt;</ph>","source":"<code>Per</code> <= 0 or <code>Per</code> > <code>NPer</code>"}],"pos":[16351,16413],"yaml":true},{"content":"Returns a `Double` specifying the internal rate of return for a series of periodic cash flows (payments and receipts).","nodes":[{"pos":[0,118],"content":"Returns a <ph id=\"ph1\">`Double`</ph> specifying the internal rate of return for a series of periodic cash flows (payments and receipts).","source":"Returns a `Double` specifying the internal rate of return for a series of periodic cash flows (payments and receipts)."}],"pos":[17392,17511],"yaml":true},{"content":"The internal rate of return is the interest rate received for an investment consisting of payments and receipts that occur at regular intervals.  \n  \n The `IRR` function uses the order of values within the array to interpret the order of payments and receipts. Be sure to enter your payment and receipt values in the correct sequence. The cash flow for each period does not need to be fixed, as it is for an annuity.  \n  \n `IRR` is calculated by iteration. Starting with the value of `Guess`, `IRR` cycles through the calculation until the result is accurate to within 0.00001 percent. If `IRR` cannot find a result after 20 tries, it fails.","nodes":[{"pos":[0,144],"content":"The internal rate of return is the interest rate received for an investment consisting of payments and receipts that occur at regular intervals.","nodes":[{"content":"The internal rate of return is the interest rate received for an investment consisting of payments and receipts that occur at regular intervals.","pos":[0,144]}]},{"pos":[151,416],"content":"The `IRR` function uses the order of values within the array to interpret the order of payments and receipts. Be sure to enter your payment and receipt values in the correct sequence. The cash flow for each period does not need to be fixed, as it is for an annuity.","nodes":[{"content":"The <ph id=\"ph1\">`IRR`</ph> function uses the order of values within the array to interpret the order of payments and receipts.","pos":[0,109],"source":"The `IRR` function uses the order of values within the array to interpret the order of payments and receipts."},{"content":"Be sure to enter your payment and receipt values in the correct sequence.","pos":[110,183]},{"content":"The cash flow for each period does not need to be fixed, as it is for an annuity.","pos":[184,265]}]},{"pos":[423,641],"content":"`IRR` is calculated by iteration. Starting with the value of `Guess`, `IRR` cycles through the calculation until the result is accurate to within 0.00001 percent. If `IRR` cannot find a result after 20 tries, it fails.","nodes":[{"content":"<ph id=\"ph1\">`IRR`</ph> is calculated by iteration.","pos":[0,33],"source":"`IRR` is calculated by iteration."},{"content":"Starting with the value of <ph id=\"ph1\">`Guess`</ph>, <ph id=\"ph2\">`IRR`</ph> cycles through the calculation until the result is accurate to within 0.00001 percent.","pos":[34,162],"source":" Starting with the value of `Guess`, `IRR` cycles through the calculation until the result is accurate to within 0.00001 percent."},{"content":"If <ph id=\"ph1\">`IRR`</ph> cannot find a result after 20 tries, it fails.","pos":[163,218],"source":" If `IRR` cannot find a result after 20 tries, it fails."}]}],"pos":[17522,18170],"yaml":true,"extradata":"MT"},{"content":"Required. Array of `Double` specifying cash flow values. The array must contain at least one negative value (a payment) and one positive value (a receipt).","nodes":[{"pos":[0,155],"content":"Required. Array of `Double` specifying cash flow values. The array must contain at least one negative value (a payment) and one positive value (a receipt).","nodes":[{"content":"Required.","pos":[0,9]},{"content":"Array of <ph id=\"ph1\">`Double`</ph> specifying cash flow values.","pos":[10,56],"source":" Array of `Double` specifying cash flow values."},{"content":"The array must contain at least one negative value (a payment) and one positive value (a receipt).","pos":[57,155]}]}],"pos":[18848,19004],"yaml":true},{"content":"Optional. Object specifying value you estimate will be returned by `IRR`. If omitted, <code>Guess</code> is 0.1 (10 percent).","nodes":[{"pos":[0,125],"content":"Optional. Object specifying value you estimate will be returned by `IRR`. If omitted, <code>Guess</code> is 0.1 (10 percent).","nodes":[{"content":"Optional.","pos":[0,9]},{"content":"Object specifying value you estimate will be returned by <ph id=\"ph1\">`IRR`</ph>.","pos":[10,73],"source":" Object specifying value you estimate will be returned by `IRR`."},{"content":"If omitted, <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">Guess</ph><ept id=\"p1\">&lt;/code&gt;</ept> is 0.1 (10 percent).","pos":[74,125],"source":" If omitted, <code>Guess</code> is 0.1 (10 percent)."}]}],"pos":[19065,19191],"yaml":true},{"content":"Returns a `Double` specifying the internal rate of return for a series of periodic cash flows (payments and receipts).","nodes":[{"pos":[0,118],"content":"Returns a <ph id=\"ph1\">`Double`</ph> specifying the internal rate of return for a series of periodic cash flows (payments and receipts).","source":"Returns a `Double` specifying the internal rate of return for a series of periodic cash flows (payments and receipts)."}],"pos":[19248,19367],"yaml":true},{"content":"Array argument values are invalid or <code>Guess</code> <= -1.","nodes":[{"pos":[0,62],"content":"Array argument values are invalid or <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">Guess</ph><ept id=\"p1\">&lt;/code&gt;</ept> &lt;= -1.","source":"Array argument values are invalid or <code>Guess</code> <= -1."}],"pos":[19524,19587],"yaml":true},{"content":"Returns a `Double` specifying the modified internal rate of return for a series of periodic cash flows (payments and receipts).","nodes":[{"pos":[0,127],"content":"Returns a <ph id=\"ph1\">`Double`</ph> specifying the modified internal rate of return for a series of periodic cash flows (payments and receipts).","source":"Returns a `Double` specifying the modified internal rate of return for a series of periodic cash flows (payments and receipts)."}],"pos":[20638,20766],"yaml":true},{"content":"The modified internal rate of return is the internal rate of return when payments and receipts are financed at different rates. The `MIRR` function takes into account both the cost of the investment (`FinanceRate`) and the interest rate received on reinvestment of cash (`ReinvestRate`).  \n  \n The `FinanceRate` and `ReinvestRatearguments` are percentages expressed as decimal values. For example, 12 percent is expressed as 0.12.  \n  \n The `MIRR` function uses the order of values within the array to interpret the order of payments and receipts. Be sure to enter your payment and receipt values in the correct sequence.","nodes":[{"pos":[0,287],"content":"The modified internal rate of return is the internal rate of return when payments and receipts are financed at different rates. The `MIRR` function takes into account both the cost of the investment (`FinanceRate`) and the interest rate received on reinvestment of cash (`ReinvestRate`).","nodes":[{"content":"The modified internal rate of return is the internal rate of return when payments and receipts are financed at different rates.","pos":[0,127]},{"content":"The <ph id=\"ph1\">`MIRR`</ph> function takes into account both the cost of the investment (<ph id=\"ph2\">`FinanceRate`</ph>) and the interest rate received on reinvestment of cash (<ph id=\"ph3\">`ReinvestRate`</ph>).","pos":[128,287],"source":" The `MIRR` function takes into account both the cost of the investment (`FinanceRate`) and the interest rate received on reinvestment of cash (`ReinvestRate`)."}]},{"pos":[294,430],"content":"The `FinanceRate` and `ReinvestRatearguments` are percentages expressed as decimal values. For example, 12 percent is expressed as 0.12.","nodes":[{"content":"The <ph id=\"ph1\">`FinanceRate`</ph> and <ph id=\"ph2\">`ReinvestRatearguments`</ph> are percentages expressed as decimal values.","pos":[0,90],"source":"The `FinanceRate` and `ReinvestRatearguments` are percentages expressed as decimal values."},{"content":"For example, 12 percent is expressed as 0.12.","pos":[91,136]}]},{"pos":[437,621],"content":"The `MIRR` function uses the order of values within the array to interpret the order of payments and receipts. Be sure to enter your payment and receipt values in the correct sequence.","nodes":[{"content":"The <ph id=\"ph1\">`MIRR`</ph> function uses the order of values within the array to interpret the order of payments and receipts.","pos":[0,110],"source":"The `MIRR` function uses the order of values within the array to interpret the order of payments and receipts."},{"content":"Be sure to enter your payment and receipt values in the correct sequence.","pos":[111,184]}]}],"pos":[20777,21405],"yaml":true,"extradata":"MT"},{"content":"Required. Array of `Double` specifying cash-flow values. The array must contain at least one negative value (a payment) and one positive value (a receipt).","nodes":[{"pos":[0,155],"content":"Required. Array of `Double` specifying cash-flow values. The array must contain at least one negative value (a payment) and one positive value (a receipt).","nodes":[{"content":"Required.","pos":[0,9]},{"content":"Array of <ph id=\"ph1\">`Double`</ph> specifying cash-flow values.","pos":[10,56],"source":" Array of `Double` specifying cash-flow values."},{"content":"The array must contain at least one negative value (a payment) and one positive value (a receipt).","pos":[57,155]}]}],"pos":[21999,22155],"yaml":true},{"content":"Required. `Double` specifying interest rate paid as the cost of financing.","nodes":[{"pos":[0,74],"content":"Required. `Double` specifying interest rate paid as the cost of financing.","nodes":[{"content":"Required.","pos":[0,9]},{"content":"<ph id=\"ph1\">`Double`</ph> specifying interest rate paid as the cost of financing.","pos":[10,74],"source":"`Double` specifying interest rate paid as the cost of financing."}]}],"pos":[22222,22297],"yaml":true},{"content":"Required. `Double` specifying interest rate received on gains from cash reinvestment.","nodes":[{"pos":[0,85],"content":"Required. `Double` specifying interest rate received on gains from cash reinvestment.","nodes":[{"content":"Required.","pos":[0,9]},{"content":"<ph id=\"ph1\">`Double`</ph> specifying interest rate received on gains from cash reinvestment.","pos":[10,85],"source":"`Double` specifying interest rate received on gains from cash reinvestment."}]}],"pos":[22365,22451],"yaml":true},{"content":"Returns a `Double` specifying the modified internal rate of return for a series of periodic cash flows (payments and receipts).","nodes":[{"pos":[0,127],"content":"Returns a <ph id=\"ph1\">`Double`</ph> specifying the modified internal rate of return for a series of periodic cash flows (payments and receipts).","source":"Returns a `Double` specifying the modified internal rate of return for a series of periodic cash flows (payments and receipts)."}],"pos":[22508,22636],"yaml":true},{"content":"Rank of <code>ValueArray</code> does not equal 1, <code>FinanceRate</code> = -1, or <code>ReinvestRate</code> = -1","nodes":[{"pos":[0,114],"content":"Rank of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">ValueArray</ph><ept id=\"p1\">&lt;/code&gt;</ept> does not equal 1, <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">FinanceRate</ph><ept id=\"p2\">&lt;/code&gt;</ept> = -1, or <bpt id=\"p3\">&lt;code&gt;</bpt><ph id=\"ph3\">ReinvestRate</ph><ept id=\"p3\">&lt;/code&gt;</ept> = -1","source":"Rank of <code>ValueArray</code> does not equal 1, <code>FinanceRate</code> = -1, or <code>ReinvestRate</code> = -1"}],"pos":[22794,22909],"yaml":true},{"content":"Division by zero has occurred.","nodes":[{"pos":[0,30],"content":"Division by zero has occurred.","nodes":[{"content":"Division by zero has occurred.","pos":[0,30]}]}],"pos":[23011,23042],"yaml":true},{"content":"Returns a `Double` specifying the number of periods for an annuity based on periodic fixed payments and a fixed interest rate.","nodes":[{"pos":[0,126],"content":"Returns a <ph id=\"ph1\">`Double`</ph> specifying the number of periods for an annuity based on periodic fixed payments and a fixed interest rate.","source":"Returns a `Double` specifying the number of periods for an annuity based on periodic fixed payments and a fixed interest rate."}],"pos":[24261,24388],"yaml":true},{"content":"An annuity is a series of fixed cash payments made over a period of time. An annuity can be a loan (such as a home mortgage) or an investment (such as a monthly savings plan).  \n  \n For all arguments, cash paid out (such as deposits to savings) is represented by negative numbers; cash received (such as dividend checks) is represented by positive numbers.","nodes":[{"pos":[0,175],"content":"An annuity is a series of fixed cash payments made over a period of time. An annuity can be a loan (such as a home mortgage) or an investment (such as a monthly savings plan).","nodes":[{"content":"An annuity is a series of fixed cash payments made over a period of time. An annuity can be a loan (such as a home mortgage) or an investment (such as a monthly savings plan).","pos":[0,175],"nodes":[{"content":"An annuity is a series of fixed cash payments made over a period of time.","pos":[0,73]},{"content":"An annuity can be a loan (such as a home mortgage) or an investment (such as a monthly savings plan).","pos":[74,175]}]}]},{"pos":[182,356],"content":"For all arguments, cash paid out (such as deposits to savings) is represented by negative numbers; cash received (such as dividend checks) is represented by positive numbers.","nodes":[{"content":"For all arguments, cash paid out (such as deposits to savings) is represented by negative numbers; cash received (such as dividend checks) is represented by positive numbers.","pos":[0,174]}]}],"pos":[24399,24760],"yaml":true,"extradata":"MT"},{"content":"Required. `Double` specifying interest rate per period. For example, if you get a car loan at an annual percentage rate (APR) of 10 percent and make monthly payments, the rate per period is 0.1/12, or 0.0083.","nodes":[{"pos":[0,208],"content":"Required. `Double` specifying interest rate per period. For example, if you get a car loan at an annual percentage rate (APR) of 10 percent and make monthly payments, the rate per period is 0.1/12, or 0.0083.","nodes":[{"content":"Required.","pos":[0,9]},{"content":"<ph id=\"ph1\">`Double`</ph> specifying interest rate per period.","pos":[10,55],"source":"`Double` specifying interest rate per period."},{"content":"For example, if you get a car loan at an annual percentage rate (APR) of 10 percent and make monthly payments, the rate per period is 0.1/12, or 0.0083.","pos":[56,208]}]}],"pos":[25559,25768],"yaml":true},{"content":"Required. `Double` specifying payment to be made each period. Payments usually contain principal and interest that does not change over the life of the annuity.","nodes":[{"pos":[0,160],"content":"Required. `Double` specifying payment to be made each period. Payments usually contain principal and interest that does not change over the life of the annuity.","nodes":[{"content":"Required.","pos":[0,9]},{"content":"<ph id=\"ph1\">`Double`</ph> specifying payment to be made each period.","pos":[10,61],"source":"`Double` specifying payment to be made each period."},{"content":"Payments usually contain principal and interest that does not change over the life of the annuity.","pos":[62,160]}]}],"pos":[25827,25988],"yaml":true},{"content":"Required. `Double` specifying present value, or value today, of a series of future payments or receipts. For example, when you borrow money to buy a car, the loan amount is the present value to the lender of the monthly car payments you will make.","nodes":[{"pos":[0,247],"content":"Required. `Double` specifying present value, or value today, of a series of future payments or receipts. For example, when you borrow money to buy a car, the loan amount is the present value to the lender of the monthly car payments you will make.","nodes":[{"content":"Required.","pos":[0,9]},{"content":"<ph id=\"ph1\">`Double`</ph> specifying present value, or value today, of a series of future payments or receipts.","pos":[10,104],"source":"`Double` specifying present value, or value today, of a series of future payments or receipts."},{"content":"For example, when you borrow money to buy a car, the loan amount is the present value to the lender of the monthly car payments you will make.","pos":[105,247]}]}],"pos":[26046,26294],"yaml":true},{"content":"Optional. `Double` specifying future value or cash balance you want after you have made the final payment. For example, the future value of a loan is $0 because that is its value after the final payment. However, if you want to save $50,000 over 18 years for your child's education, then $50,000 is the future value. If omitted, 0 is assumed.","nodes":[{"pos":[0,342],"content":"Optional. `Double` specifying future value or cash balance you want after you have made the final payment. For example, the future value of a loan is $0 because that is its value after the final payment. However, if you want to save $50,000 over 18 years for your child's education, then $50,000 is the future value. If omitted, 0 is assumed.","nodes":[{"content":"Optional.","pos":[0,9]},{"content":"<ph id=\"ph1\">`Double`</ph> specifying future value or cash balance you want after you have made the final payment.","pos":[10,106],"source":"`Double` specifying future value or cash balance you want after you have made the final payment."},{"content":"For example, the future value of a loan is $0 because that is its value after the final payment.","pos":[107,203]},{"content":"However, if you want to save $50,000 over 18 years for your child's education, then $50,000 is the future value.","pos":[204,316]},{"content":"If omitted, 0 is assumed.","pos":[317,342]}]}],"pos":[26352,26695],"yaml":true},{"content":"Optional. Object of type <xref href=\"Microsoft.VisualBasic.DueDate\"></xref> that specifies when payments are due. This argument must be either <code>DueDate.EndOfPeriod</code> if payments are due at the end of the payment period, or <code>DueDate.BegOfPeriod</code> if payments are due at the beginning of the period. If omitted, <code>DueDate.EndOfPeriod</code> is assumed.","nodes":[{"pos":[0,374],"content":"Optional. Object of type <xref href=\"Microsoft.VisualBasic.DueDate\"></xref> that specifies when payments are due. This argument must be either <code>DueDate.EndOfPeriod</code> if payments are due at the end of the payment period, or <code>DueDate.BegOfPeriod</code> if payments are due at the beginning of the period. If omitted, <code>DueDate.EndOfPeriod</code> is assumed.","nodes":[{"content":"Optional.","pos":[0,9]},{"content":"Object of type <ph id=\"ph1\">&lt;xref href=\"Microsoft.VisualBasic.DueDate\"&gt;&lt;/xref&gt;</ph> that specifies when payments are due.","pos":[10,113],"source":" Object of type <xref href=\"Microsoft.VisualBasic.DueDate\"></xref> that specifies when payments are due."},{"content":"This argument must be either <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">DueDate.EndOfPeriod</ph><ept id=\"p1\">&lt;/code&gt;</ept> if payments are due at the end of the payment period, or <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">DueDate.BegOfPeriod</ph><ept id=\"p2\">&lt;/code&gt;</ept> if payments are due at the beginning of the period.","pos":[114,317],"source":" This argument must be either <code>DueDate.EndOfPeriod</code> if payments are due at the end of the payment period, or <code>DueDate.BegOfPeriod</code> if payments are due at the beginning of the period."},{"content":"If omitted, <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">DueDate.EndOfPeriod</ph><ept id=\"p1\">&lt;/code&gt;</ept> is assumed.","pos":[318,374],"source":" If omitted, <code>DueDate.EndOfPeriod</code> is assumed."}]}],"pos":[26770,27145],"yaml":true},{"content":"Returns a `Double` specifying the number of periods for an annuity based on periodic fixed payments and a fixed interest rate.","nodes":[{"pos":[0,126],"content":"Returns a <ph id=\"ph1\">`Double`</ph> specifying the number of periods for an annuity based on periodic fixed payments and a fixed interest rate.","source":"Returns a `Double` specifying the number of periods for an annuity based on periodic fixed payments and a fixed interest rate."}],"pos":[27202,27329],"yaml":true},{"content":"<code>Rate</code> = 0 and <code>Pmt</code> = 0","nodes":[{"pos":[0,46],"content":"<ph id=\"ph1\">&lt;code&gt;Rate&lt;/code&gt;</ph> = 0 and <ph id=\"ph2\">&lt;code&gt;Pmt&lt;/code&gt;</ph> = 0","source":"<code>Rate</code> = 0 and <code>Pmt</code> = 0"}],"pos":[27487,27534],"yaml":true},{"content":"Returns a `Double` specifying the net present value of an investment based on a series of periodic cash flows (payments and receipts) and a discount rate.","nodes":[{"pos":[0,154],"content":"Returns a <ph id=\"ph1\">`Double`</ph> specifying the net present value of an investment based on a series of periodic cash flows (payments and receipts) and a discount rate.","source":"Returns a `Double` specifying the net present value of an investment based on a series of periodic cash flows (payments and receipts) and a discount rate."}],"pos":[28513,28668],"yaml":true},{"content":"The net present value of an investment is the current value of a future series of payments and receipts.  \n  \n The `NPV` function uses the order of values within the array to interpret the order of payments and receipts. Be sure to enter your payment and receipt values in the correct sequence.  \n  \n The `NPV` investment begins one period before the date of the first cash flow value and ends with the last cash flow value in the array.  \n  \n The net present value calculation is based on future cash flows. If your first cash flow occurs at the beginning of the first period, the first value must be added to the value returned by `NPV` and must not be included in the cash flow values of `ValueArray`.  \n  \n The `NPV` function is similar to the `PV` function (present value) except that the `PV` function allows cash flows to begin either at the end or the beginning of a period. Unlike the variable `NPV` cash flow values, `PV` cash flows must be fixed throughout the investment.","nodes":[{"pos":[0,104],"content":"The net present value of an investment is the current value of a future series of payments and receipts.","nodes":[{"content":"The net present value of an investment is the current value of a future series of payments and receipts.","pos":[0,104]}]},{"pos":[111,294],"content":"The `NPV` function uses the order of values within the array to interpret the order of payments and receipts. Be sure to enter your payment and receipt values in the correct sequence.","nodes":[{"content":"The <ph id=\"ph1\">`NPV`</ph> function uses the order of values within the array to interpret the order of payments and receipts.","pos":[0,109],"source":"The `NPV` function uses the order of values within the array to interpret the order of payments and receipts."},{"content":"Be sure to enter your payment and receipt values in the correct sequence.","pos":[110,183]}]},{"pos":[301,437],"content":"The <ph id=\"ph1\">`NPV`</ph> investment begins one period before the date of the first cash flow value and ends with the last cash flow value in the array.","source":"The `NPV` investment begins one period before the date of the first cash flow value and ends with the last cash flow value in the array."},{"pos":[444,704],"content":"The net present value calculation is based on future cash flows. If your first cash flow occurs at the beginning of the first period, the first value must be added to the value returned by `NPV` and must not be included in the cash flow values of `ValueArray`.","nodes":[{"content":"The net present value calculation is based on future cash flows.","pos":[0,64]},{"content":"If your first cash flow occurs at the beginning of the first period, the first value must be added to the value returned by <ph id=\"ph1\">`NPV`</ph> and must not be included in the cash flow values of <ph id=\"ph2\">`ValueArray`</ph>.","pos":[65,260],"source":" If your first cash flow occurs at the beginning of the first period, the first value must be added to the value returned by `NPV` and must not be included in the cash flow values of `ValueArray`."}]},{"pos":[711,983],"content":"The `NPV` function is similar to the `PV` function (present value) except that the `PV` function allows cash flows to begin either at the end or the beginning of a period. Unlike the variable `NPV` cash flow values, `PV` cash flows must be fixed throughout the investment.","nodes":[{"content":"The <ph id=\"ph1\">`NPV`</ph> function is similar to the <ph id=\"ph2\">`PV`</ph> function (present value) except that the <ph id=\"ph3\">`PV`</ph> function allows cash flows to begin either at the end or the beginning of a period.","pos":[0,171],"source":"The `NPV` function is similar to the `PV` function (present value) except that the `PV` function allows cash flows to begin either at the end or the beginning of a period."},{"content":"Unlike the variable <ph id=\"ph1\">`NPV`</ph> cash flow values, <ph id=\"ph2\">`PV`</ph> cash flows must be fixed throughout the investment.","pos":[172,272],"source":" Unlike the variable `NPV` cash flow values, `PV` cash flows must be fixed throughout the investment."}]}],"pos":[28679,29673],"yaml":true,"extradata":"MT"},{"content":"Required. `Double` specifying discount rate over the length of the period, expressed as a decimal.","nodes":[{"pos":[0,98],"content":"Required. `Double` specifying discount rate over the length of the period, expressed as a decimal.","nodes":[{"content":"Required.","pos":[0,9]},{"content":"<ph id=\"ph1\">`Double`</ph> specifying discount rate over the length of the period, expressed as a decimal.","pos":[10,98],"source":"`Double` specifying discount rate over the length of the period, expressed as a decimal."}]}],"pos":[30189,30288],"yaml":true},{"content":"Required. Array of `Double` specifying cash flow values. The array must contain at least one negative value (a payment) and one positive value (a receipt).","nodes":[{"pos":[0,155],"content":"Required. Array of `Double` specifying cash flow values. The array must contain at least one negative value (a payment) and one positive value (a receipt).","nodes":[{"content":"Required.","pos":[0,9]},{"content":"Array of <ph id=\"ph1\">`Double`</ph> specifying cash flow values.","pos":[10,56],"source":" Array of `Double` specifying cash flow values."},{"content":"The array must contain at least one negative value (a payment) and one positive value (a receipt).","pos":[57,155]}]}],"pos":[30356,30512],"yaml":true},{"content":"Returns a `Double` specifying the net present value of an investment based on a series of periodic cash flows (payments and receipts) and a discount rate.","nodes":[{"pos":[0,154],"content":"Returns a <ph id=\"ph1\">`Double`</ph> specifying the net present value of an investment based on a series of periodic cash flows (payments and receipts) and a discount rate.","source":"Returns a `Double` specifying the net present value of an investment based on a series of periodic cash flows (payments and receipts) and a discount rate."}],"pos":[30569,30724],"yaml":true},{"content":"<code>ValueArray</code> is `Nothing`, rank of <code>ValueArray</code> <> 1, or <code>Rate</code> = -1","nodes":[{"pos":[0,101],"content":"<ph id=\"ph1\">&lt;code&gt;ValueArray&lt;/code&gt;</ph> is <ph id=\"ph2\">`Nothing`</ph>, rank of <ph id=\"ph3\">&lt;code&gt;ValueArray&lt;/code&gt;</ph> &lt;&gt; 1, or <ph id=\"ph4\">&lt;code&gt;Rate&lt;/code&gt;</ph> = -1","source":"<code>ValueArray</code> is `Nothing`, rank of <code>ValueArray</code> <> 1, or <code>Rate</code> = -1"}],"pos":[30881,30983],"yaml":true},{"content":"Returns a `Double` specifying the payment for an annuity based on periodic, fixed payments and a fixed interest rate.","nodes":[{"pos":[0,117],"content":"Returns a <ph id=\"ph1\">`Double`</ph> specifying the payment for an annuity based on periodic, fixed payments and a fixed interest rate.","source":"Returns a `Double` specifying the payment for an annuity based on periodic, fixed payments and a fixed interest rate."}],"pos":[32196,32314],"yaml":true},{"content":"An annuity is a series of fixed cash payments made during a period of time. An annuity can be a loan (such as a home mortgage) or an investment (such as a monthly savings plan).  \n  \n The `Rate` and `NPer` arguments must be calculated using payment periods expressed in the same units. For example, if `Rate` is calculated using months, `NPer` must also be calculated using months.  \n  \n For all arguments, cash paid (such as deposits to savings) is represented by negative numbers; cash received (such as dividend checks) is represented by positive numbers.","nodes":[{"pos":[0,177],"content":"An annuity is a series of fixed cash payments made during a period of time. An annuity can be a loan (such as a home mortgage) or an investment (such as a monthly savings plan).","nodes":[{"content":"An annuity is a series of fixed cash payments made during a period of time. An annuity can be a loan (such as a home mortgage) or an investment (such as a monthly savings plan).","pos":[0,177],"nodes":[{"content":"An annuity is a series of fixed cash payments made during a period of time.","pos":[0,75]},{"content":"An annuity can be a loan (such as a home mortgage) or an investment (such as a monthly savings plan).","pos":[76,177]}]}]},{"pos":[184,381],"content":"The `Rate` and `NPer` arguments must be calculated using payment periods expressed in the same units. For example, if `Rate` is calculated using months, `NPer` must also be calculated using months.","nodes":[{"content":"The <ph id=\"ph1\">`Rate`</ph> and <ph id=\"ph2\">`NPer`</ph> arguments must be calculated using payment periods expressed in the same units.","pos":[0,101],"source":"The `Rate` and `NPer` arguments must be calculated using payment periods expressed in the same units."},{"content":"For example, if <ph id=\"ph1\">`Rate`</ph> is calculated using months, <ph id=\"ph2\">`NPer`</ph> must also be calculated using months.","pos":[102,197],"source":" For example, if `Rate` is calculated using months, `NPer` must also be calculated using months."}]},{"pos":[388,558],"content":"For all arguments, cash paid (such as deposits to savings) is represented by negative numbers; cash received (such as dividend checks) is represented by positive numbers.","nodes":[{"content":"For all arguments, cash paid (such as deposits to savings) is represented by negative numbers; cash received (such as dividend checks) is represented by positive numbers.","pos":[0,170]}]}],"pos":[32325,32890],"yaml":true,"extradata":"MT"},{"content":"Required. `Double` specifies the interest rate per period. For example, if you get a car loan at an annual percentage rate (APR) of 10 percent and make monthly payments, the rate per period is 0.1/12, or 0.0083.","nodes":[{"pos":[0,211],"content":"Required. `Double` specifies the interest rate per period. For example, if you get a car loan at an annual percentage rate (APR) of 10 percent and make monthly payments, the rate per period is 0.1/12, or 0.0083.","nodes":[{"content":"Required.","pos":[0,9]},{"content":"<ph id=\"ph1\">`Double`</ph> specifies the interest rate per period.","pos":[10,58],"source":"`Double` specifies the interest rate per period."},{"content":"For example, if you get a car loan at an annual percentage rate (APR) of 10 percent and make monthly payments, the rate per period is 0.1/12, or 0.0083.","pos":[59,211]}]}],"pos":[33691,33903],"yaml":true},{"content":"Required. `Double` specifies the total number of payment periods in the annuity. For example, if you make monthly payments on a four-year car loan, your loan has a total of 4 × 12 (or 48) payment periods.","nodes":[{"pos":[0,204],"content":"Required. `Double` specifies the total number of payment periods in the annuity. For example, if you make monthly payments on a four-year car loan, your loan has a total of 4 × 12 (or 48) payment periods.","nodes":[{"content":"Required.","pos":[0,9]},{"content":"<ph id=\"ph1\">`Double`</ph> specifies the total number of payment periods in the annuity.","pos":[10,80],"source":"`Double` specifies the total number of payment periods in the annuity."},{"content":"For example, if you make monthly payments on a four-year car loan, your loan has a total of 4 × 12 (or 48) payment periods.","pos":[81,204]}]}],"pos":[33963,34168],"yaml":true},{"content":"Required. `Double` specifies the present value (or lump sum) that a series of payments to be paid in the future is worth now. For example, when you borrow money to buy a car, the loan amount is the present value to the lender of the monthly car payments you will make.","nodes":[{"pos":[0,268],"content":"Required. `Double` specifies the present value (or lump sum) that a series of payments to be paid in the future is worth now. For example, when you borrow money to buy a car, the loan amount is the present value to the lender of the monthly car payments you will make.","nodes":[{"content":"Required.","pos":[0,9]},{"content":"<ph id=\"ph1\">`Double`</ph> specifies the present value (or lump sum) that a series of payments to be paid in the future is worth now.","pos":[10,125],"source":"`Double` specifies the present value (or lump sum) that a series of payments to be paid in the future is worth now."},{"content":"For example, when you borrow money to buy a car, the loan amount is the present value to the lender of the monthly car payments you will make.","pos":[126,268]}]}],"pos":[34226,34495],"yaml":true},{"content":"Optional. `Double` specifying future value or cash balance you want after you have made the final payment. For example, the future value of a loan is $0 because that is its value after the final payment. However, if you want to save $50,000 during 18 years for your child's education, then $50,000 is the future value. If omitted, 0 is assumed.","nodes":[{"pos":[0,344],"content":"Optional. `Double` specifying future value or cash balance you want after you have made the final payment. For example, the future value of a loan is $0 because that is its value after the final payment. However, if you want to save $50,000 during 18 years for your child's education, then $50,000 is the future value. If omitted, 0 is assumed.","nodes":[{"content":"Optional.","pos":[0,9]},{"content":"<ph id=\"ph1\">`Double`</ph> specifying future value or cash balance you want after you have made the final payment.","pos":[10,106],"source":"`Double` specifying future value or cash balance you want after you have made the final payment."},{"content":"For example, the future value of a loan is $0 because that is its value after the final payment.","pos":[107,203]},{"content":"However, if you want to save $50,000 during 18 years for your child's education, then $50,000 is the future value.","pos":[204,318]},{"content":"If omitted, 0 is assumed.","pos":[319,344]}]}],"pos":[34553,34898],"yaml":true},{"content":"Optional. Object of type <xref href=\"Microsoft.VisualBasic.DueDate\"></xref> that specifies when payments are due. This argument must be either <code>DueDate.EndOfPeriod</code> if payments are due at the end of the payment period, or <code>DueDate.BegOfPeriod</code> if payments are due at the beginning of the period. If omitted, <code>DueDate.EndOfPeriod</code> is assumed.","nodes":[{"pos":[0,374],"content":"Optional. Object of type <xref href=\"Microsoft.VisualBasic.DueDate\"></xref> that specifies when payments are due. This argument must be either <code>DueDate.EndOfPeriod</code> if payments are due at the end of the payment period, or <code>DueDate.BegOfPeriod</code> if payments are due at the beginning of the period. If omitted, <code>DueDate.EndOfPeriod</code> is assumed.","nodes":[{"content":"Optional.","pos":[0,9]},{"content":"Object of type <ph id=\"ph1\">&lt;xref href=\"Microsoft.VisualBasic.DueDate\"&gt;&lt;/xref&gt;</ph> that specifies when payments are due.","pos":[10,113],"source":" Object of type <xref href=\"Microsoft.VisualBasic.DueDate\"></xref> that specifies when payments are due."},{"content":"This argument must be either <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">DueDate.EndOfPeriod</ph><ept id=\"p1\">&lt;/code&gt;</ept> if payments are due at the end of the payment period, or <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">DueDate.BegOfPeriod</ph><ept id=\"p2\">&lt;/code&gt;</ept> if payments are due at the beginning of the period.","pos":[114,317],"source":" This argument must be either <code>DueDate.EndOfPeriod</code> if payments are due at the end of the payment period, or <code>DueDate.BegOfPeriod</code> if payments are due at the beginning of the period."},{"content":"If omitted, <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">DueDate.EndOfPeriod</ph><ept id=\"p1\">&lt;/code&gt;</ept> is assumed.","pos":[318,374],"source":" If omitted, <code>DueDate.EndOfPeriod</code> is assumed."}]}],"pos":[34973,35348],"yaml":true},{"content":"Returns a `Double` specifying the payment for an annuity based on periodic, fixed payments and a fixed interest rate.","nodes":[{"pos":[0,117],"content":"Returns a <ph id=\"ph1\">`Double`</ph> specifying the payment for an annuity based on periodic, fixed payments and a fixed interest rate.","source":"Returns a `Double` specifying the payment for an annuity based on periodic, fixed payments and a fixed interest rate."}],"pos":[35405,35523],"yaml":true},{"content":"<code>NPer</code> = 0.","nodes":[{"pos":[0,22],"content":"<ph id=\"ph1\">&lt;code&gt;NPer&lt;/code&gt;</ph> = 0.","source":"<code>NPer</code> = 0."}],"pos":[35680,35703],"yaml":true},{"content":"Returns a `Double` specifying the principal payment for a given period of an annuity based on periodic fixed payments and a fixed interest rate.","nodes":[{"pos":[0,144],"content":"Returns a <ph id=\"ph1\">`Double`</ph> specifying the principal payment for a given period of an annuity based on periodic fixed payments and a fixed interest rate.","source":"Returns a `Double` specifying the principal payment for a given period of an annuity based on periodic fixed payments and a fixed interest rate."}],"pos":[36988,37133],"yaml":true},{"content":"An annuity is a series of fixed cash payments made over a period of time. An annuity can be a loan (such as a home mortgage) or an investment (such as a monthly savings plan).  \n  \n The `Rate` and `NPer` arguments must be calculated using payment periods expressed in the same units. For example, if `Rate` is calculated using months, `NPer` must also be calculated using months.  \n  \n For all arguments, cash paid (such as deposits to savings) is represented by negative numbers; cash received (such as dividend checks) is represented by positive numbers.","nodes":[{"pos":[0,175],"content":"An annuity is a series of fixed cash payments made over a period of time. An annuity can be a loan (such as a home mortgage) or an investment (such as a monthly savings plan).","nodes":[{"content":"An annuity is a series of fixed cash payments made over a period of time. An annuity can be a loan (such as a home mortgage) or an investment (such as a monthly savings plan).","pos":[0,175],"nodes":[{"content":"An annuity is a series of fixed cash payments made over a period of time.","pos":[0,73]},{"content":"An annuity can be a loan (such as a home mortgage) or an investment (such as a monthly savings plan).","pos":[74,175]}]}]},{"pos":[182,379],"content":"The `Rate` and `NPer` arguments must be calculated using payment periods expressed in the same units. For example, if `Rate` is calculated using months, `NPer` must also be calculated using months.","nodes":[{"content":"The <ph id=\"ph1\">`Rate`</ph> and <ph id=\"ph2\">`NPer`</ph> arguments must be calculated using payment periods expressed in the same units.","pos":[0,101],"source":"The `Rate` and `NPer` arguments must be calculated using payment periods expressed in the same units."},{"content":"For example, if <ph id=\"ph1\">`Rate`</ph> is calculated using months, <ph id=\"ph2\">`NPer`</ph> must also be calculated using months.","pos":[102,197],"source":" For example, if `Rate` is calculated using months, `NPer` must also be calculated using months."}]},{"pos":[386,556],"content":"For all arguments, cash paid (such as deposits to savings) is represented by negative numbers; cash received (such as dividend checks) is represented by positive numbers.","nodes":[{"content":"For all arguments, cash paid (such as deposits to savings) is represented by negative numbers; cash received (such as dividend checks) is represented by positive numbers.","pos":[0,170]}]}],"pos":[37144,37707],"yaml":true,"extradata":"MT"},{"content":"Required. `Double` specifies the interest rate per period. For example, if you get a car loan at an annual percentage rate (APR) of 10 percent and make monthly payments, the rate per period is 0.1/12, or 0.0083.","nodes":[{"pos":[0,211],"content":"Required. `Double` specifies the interest rate per period. For example, if you get a car loan at an annual percentage rate (APR) of 10 percent and make monthly payments, the rate per period is 0.1/12, or 0.0083.","nodes":[{"content":"Required.","pos":[0,9]},{"content":"<ph id=\"ph1\">`Double`</ph> specifies the interest rate per period.","pos":[10,58],"source":"`Double` specifies the interest rate per period."},{"content":"For example, if you get a car loan at an annual percentage rate (APR) of 10 percent and make monthly payments, the rate per period is 0.1/12, or 0.0083.","pos":[59,211]}]}],"pos":[38646,38858],"yaml":true},{"content":"Required. `Double` specifies the payment period in the range 1 through <code>NPer</code>.","nodes":[{"pos":[0,89],"content":"Required. `Double` specifies the payment period in the range 1 through <code>NPer</code>.","nodes":[{"content":"Required.","pos":[0,9]},{"content":"<ph id=\"ph1\">`Double`</ph> specifies the payment period in the range 1 through <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">NPer</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","pos":[10,89],"source":"`Double` specifies the payment period in the range 1 through <code>NPer</code>."}]}],"pos":[38917,39007],"yaml":true},{"content":"Required. `Double` specifies the total number of payment periods in the annuity. For example, if you make monthly payments on a four-year car loan, your loan has a total of 4 x 12 (or 48) payment periods.","nodes":[{"pos":[0,204],"content":"Required. `Double` specifies the total number of payment periods in the annuity. For example, if you make monthly payments on a four-year car loan, your loan has a total of 4 x 12 (or 48) payment periods.","nodes":[{"content":"Required.","pos":[0,9]},{"content":"<ph id=\"ph1\">`Double`</ph> specifies the total number of payment periods in the annuity.","pos":[10,80],"source":"`Double` specifies the total number of payment periods in the annuity."},{"content":"For example, if you make monthly payments on a four-year car loan, your loan has a total of 4 x 12 (or 48) payment periods.","pos":[81,204]}]}],"pos":[39067,39272],"yaml":true},{"content":"Required. `Double` specifies the current value of a series of future payments or receipts. For example, when you borrow money to buy a car, the loan amount is the present value to the lender of the monthly car payments you will make.","nodes":[{"pos":[0,233],"content":"Required. `Double` specifies the current value of a series of future payments or receipts. For example, when you borrow money to buy a car, the loan amount is the present value to the lender of the monthly car payments you will make.","nodes":[{"content":"Required.","pos":[0,9]},{"content":"<ph id=\"ph1\">`Double`</ph> specifies the current value of a series of future payments or receipts.","pos":[10,90],"source":"`Double` specifies the current value of a series of future payments or receipts."},{"content":"For example, when you borrow money to buy a car, the loan amount is the present value to the lender of the monthly car payments you will make.","pos":[91,233]}]}],"pos":[39330,39564],"yaml":true},{"content":"Optional. `Double` specifying future value or cash balance you want after you have made the final payment. For example, the future value of a loan is $0 because that is its value after the final payment. However, if you want to save $50,000 over 18 years for your child's education, then $50,000 is the future value. If omitted, 0 is assumed.","nodes":[{"pos":[0,342],"content":"Optional. `Double` specifying future value or cash balance you want after you have made the final payment. For example, the future value of a loan is $0 because that is its value after the final payment. However, if you want to save $50,000 over 18 years for your child's education, then $50,000 is the future value. If omitted, 0 is assumed.","nodes":[{"content":"Optional.","pos":[0,9]},{"content":"<ph id=\"ph1\">`Double`</ph> specifying future value or cash balance you want after you have made the final payment.","pos":[10,106],"source":"`Double` specifying future value or cash balance you want after you have made the final payment."},{"content":"For example, the future value of a loan is $0 because that is its value after the final payment.","pos":[107,203]},{"content":"However, if you want to save $50,000 over 18 years for your child's education, then $50,000 is the future value.","pos":[204,316]},{"content":"If omitted, 0 is assumed.","pos":[317,342]}]}],"pos":[39622,39965],"yaml":true},{"content":"Optional. Object of type <xref href=\"Microsoft.VisualBasic.DueDate\"></xref> that specifies when payments are due. This argument must be either <code>DueDate.EndOfPeriod</code> if payments are due at the end of the payment period, or <code>DueDate.BegOfPeriod</code> if payments are due at the beginning of the period. If omitted, <code>DueDate.EndOfPeriod</code> is assumed.","nodes":[{"pos":[0,374],"content":"Optional. Object of type <xref href=\"Microsoft.VisualBasic.DueDate\"></xref> that specifies when payments are due. This argument must be either <code>DueDate.EndOfPeriod</code> if payments are due at the end of the payment period, or <code>DueDate.BegOfPeriod</code> if payments are due at the beginning of the period. If omitted, <code>DueDate.EndOfPeriod</code> is assumed.","nodes":[{"content":"Optional.","pos":[0,9]},{"content":"Object of type <ph id=\"ph1\">&lt;xref href=\"Microsoft.VisualBasic.DueDate\"&gt;&lt;/xref&gt;</ph> that specifies when payments are due.","pos":[10,113],"source":" Object of type <xref href=\"Microsoft.VisualBasic.DueDate\"></xref> that specifies when payments are due."},{"content":"This argument must be either <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">DueDate.EndOfPeriod</ph><ept id=\"p1\">&lt;/code&gt;</ept> if payments are due at the end of the payment period, or <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">DueDate.BegOfPeriod</ph><ept id=\"p2\">&lt;/code&gt;</ept> if payments are due at the beginning of the period.","pos":[114,317],"source":" This argument must be either <code>DueDate.EndOfPeriod</code> if payments are due at the end of the payment period, or <code>DueDate.BegOfPeriod</code> if payments are due at the beginning of the period."},{"content":"If omitted, <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">DueDate.EndOfPeriod</ph><ept id=\"p1\">&lt;/code&gt;</ept> is assumed.","pos":[318,374],"source":" If omitted, <code>DueDate.EndOfPeriod</code> is assumed."}]}],"pos":[40040,40415],"yaml":true},{"content":"Returns a `Double` specifying the principal payment for a given period of an annuity based on periodic fixed payments and a fixed interest rate.","nodes":[{"pos":[0,144],"content":"Returns a <ph id=\"ph1\">`Double`</ph> specifying the principal payment for a given period of an annuity based on periodic fixed payments and a fixed interest rate.","source":"Returns a `Double` specifying the principal payment for a given period of an annuity based on periodic fixed payments and a fixed interest rate."}],"pos":[40472,40617],"yaml":true},{"content":"<code>Per</code> <=0 or <code>Per</code> > <code>NPer</code>.","nodes":[{"pos":[0,61],"content":"<ph id=\"ph1\">&lt;code&gt;Per&lt;/code&gt;</ph> &lt;=0 or <bpt id=\"p1\">&lt;code&gt;</bpt>Per<ept id=\"p1\">&lt;/code&gt;</ept><ph id=\"ph2\"> &gt; </ph><ph id=\"ph3\">&lt;code&gt;NPer&lt;/code&gt;</ph>.","source":"<code>Per</code> <=0 or <code>Per</code> > <code>NPer</code>."}],"pos":[40775,40837],"yaml":true},{"content":"Returns a `Double` specifying the present value of an annuity based on periodic, fixed payments to be paid in the future and a fixed interest rate.","nodes":[{"pos":[0,147],"content":"Returns a <ph id=\"ph1\">`Double`</ph> specifying the present value of an annuity based on periodic, fixed payments to be paid in the future and a fixed interest rate.","source":"Returns a `Double` specifying the present value of an annuity based on periodic, fixed payments to be paid in the future and a fixed interest rate."}],"pos":[42044,42192],"yaml":true},{"content":"An annuity is a series of fixed cash payments made over a period of time. An annuity can be a loan (such as a home mortgage) or an investment (such as a monthly savings plan).  \n  \n The `Rate` and `NPer` arguments must be calculated using payment periods expressed in the same units. For example, if `Rate` is calculated using months, `NPer` must also be calculated using months.  \n  \n For all arguments, cash paid out (such as deposits to savings) is represented by negative numbers; cash received (such as dividend checks) is represented by positive numbers.","nodes":[{"pos":[0,175],"content":"An annuity is a series of fixed cash payments made over a period of time. An annuity can be a loan (such as a home mortgage) or an investment (such as a monthly savings plan).","nodes":[{"content":"An annuity is a series of fixed cash payments made over a period of time. An annuity can be a loan (such as a home mortgage) or an investment (such as a monthly savings plan).","pos":[0,175],"nodes":[{"content":"An annuity is a series of fixed cash payments made over a period of time.","pos":[0,73]},{"content":"An annuity can be a loan (such as a home mortgage) or an investment (such as a monthly savings plan).","pos":[74,175]}]}]},{"pos":[182,379],"content":"The `Rate` and `NPer` arguments must be calculated using payment periods expressed in the same units. For example, if `Rate` is calculated using months, `NPer` must also be calculated using months.","nodes":[{"content":"The <ph id=\"ph1\">`Rate`</ph> and <ph id=\"ph2\">`NPer`</ph> arguments must be calculated using payment periods expressed in the same units.","pos":[0,101],"source":"The `Rate` and `NPer` arguments must be calculated using payment periods expressed in the same units."},{"content":"For example, if <ph id=\"ph1\">`Rate`</ph> is calculated using months, <ph id=\"ph2\">`NPer`</ph> must also be calculated using months.","pos":[102,197],"source":" For example, if `Rate` is calculated using months, `NPer` must also be calculated using months."}]},{"pos":[386,560],"content":"For all arguments, cash paid out (such as deposits to savings) is represented by negative numbers; cash received (such as dividend checks) is represented by positive numbers.","nodes":[{"content":"For all arguments, cash paid out (such as deposits to savings) is represented by negative numbers; cash received (such as dividend checks) is represented by positive numbers.","pos":[0,174]}]}],"pos":[42203,42770],"yaml":true,"extradata":"MT"},{"content":"Required. `Double` specifies the interest rate per period. For example, if you get a car loan at an annual percentage rate (APR) of 10 percent and make monthly payments, the rate per period is 0.1/12, or 0.0083.","nodes":[{"pos":[0,211],"content":"Required. `Double` specifies the interest rate per period. For example, if you get a car loan at an annual percentage rate (APR) of 10 percent and make monthly payments, the rate per period is 0.1/12, or 0.0083.","nodes":[{"content":"Required.","pos":[0,9]},{"content":"<ph id=\"ph1\">`Double`</ph> specifies the interest rate per period.","pos":[10,58],"source":"`Double` specifies the interest rate per period."},{"content":"For example, if you get a car loan at an annual percentage rate (APR) of 10 percent and make monthly payments, the rate per period is 0.1/12, or 0.0083.","pos":[59,211]}]}],"pos":[43716,43928],"yaml":true},{"content":"Required. `Double` specifies the total number of payment periods in the annuity. For example, if you make monthly payments on a four-year car loan, your loan has 4 x 12 (or 48) payment periods.","nodes":[{"pos":[0,193],"content":"Required. `Double` specifies the total number of payment periods in the annuity. For example, if you make monthly payments on a four-year car loan, your loan has 4 x 12 (or 48) payment periods.","nodes":[{"content":"Required.","pos":[0,9]},{"content":"<ph id=\"ph1\">`Double`</ph> specifies the total number of payment periods in the annuity.","pos":[10,80],"source":"`Double` specifies the total number of payment periods in the annuity."},{"content":"For example, if you make monthly payments on a four-year car loan, your loan has 4 x 12 (or 48) payment periods.","pos":[81,193]}]}],"pos":[43988,44182],"yaml":true},{"content":"Required. `Double` specifies the payment to be made each period. Payments usually contain principal and interest that does not change during the life of the annuity.","nodes":[{"pos":[0,165],"content":"Required. `Double` specifies the payment to be made each period. Payments usually contain principal and interest that does not change during the life of the annuity.","nodes":[{"content":"Required.","pos":[0,9]},{"content":"<ph id=\"ph1\">`Double`</ph> specifies the payment to be made each period.","pos":[10,64],"source":"`Double` specifies the payment to be made each period."},{"content":"Payments usually contain principal and interest that does not change during the life of the annuity.","pos":[65,165]}]}],"pos":[44241,44407],"yaml":true},{"content":"Optional. `Double` specifies the future value or cash balance you want after you make the final payment. For example, the future value of a loan is $0 because that is its value after the final payment. However, if you want to save $50,000 over 18 years for your child's education, then $50,000 is the future value. If omitted, 0 is assumed.","nodes":[{"pos":[0,340],"content":"Optional. `Double` specifies the future value or cash balance you want after you make the final payment. For example, the future value of a loan is $0 because that is its value after the final payment. However, if you want to save $50,000 over 18 years for your child's education, then $50,000 is the future value. If omitted, 0 is assumed.","nodes":[{"content":"Optional.","pos":[0,9]},{"content":"<ph id=\"ph1\">`Double`</ph> specifies the future value or cash balance you want after you make the final payment.","pos":[10,104],"source":"`Double` specifies the future value or cash balance you want after you make the final payment."},{"content":"For example, the future value of a loan is $0 because that is its value after the final payment.","pos":[105,201]},{"content":"However, if you want to save $50,000 over 18 years for your child's education, then $50,000 is the future value.","pos":[202,314]},{"content":"If omitted, 0 is assumed.","pos":[315,340]}]}],"pos":[44465,44806],"yaml":true},{"content":"Optional. Object of type <xref href=\"Microsoft.VisualBasic.DueDate\"></xref> that specifies when payments are due. This argument must be either <code>DueDate.EndOfPeriod</code> if payments are due at the end of the payment period, or <code>DueDate.BegOfPeriod</code> if payments are due at the beginning of the period. If omitted, <code>DueDate.EndOfPeriod</code> is assumed.","nodes":[{"pos":[0,374],"content":"Optional. Object of type <xref href=\"Microsoft.VisualBasic.DueDate\"></xref> that specifies when payments are due. This argument must be either <code>DueDate.EndOfPeriod</code> if payments are due at the end of the payment period, or <code>DueDate.BegOfPeriod</code> if payments are due at the beginning of the period. If omitted, <code>DueDate.EndOfPeriod</code> is assumed.","nodes":[{"content":"Optional.","pos":[0,9]},{"content":"Object of type <ph id=\"ph1\">&lt;xref href=\"Microsoft.VisualBasic.DueDate\"&gt;&lt;/xref&gt;</ph> that specifies when payments are due.","pos":[10,113],"source":" Object of type <xref href=\"Microsoft.VisualBasic.DueDate\"></xref> that specifies when payments are due."},{"content":"This argument must be either <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">DueDate.EndOfPeriod</ph><ept id=\"p1\">&lt;/code&gt;</ept> if payments are due at the end of the payment period, or <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">DueDate.BegOfPeriod</ph><ept id=\"p2\">&lt;/code&gt;</ept> if payments are due at the beginning of the period.","pos":[114,317],"source":" This argument must be either <code>DueDate.EndOfPeriod</code> if payments are due at the end of the payment period, or <code>DueDate.BegOfPeriod</code> if payments are due at the beginning of the period."},{"content":"If omitted, <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">DueDate.EndOfPeriod</ph><ept id=\"p1\">&lt;/code&gt;</ept> is assumed.","pos":[318,374],"source":" If omitted, <code>DueDate.EndOfPeriod</code> is assumed."}]}],"pos":[44881,45256],"yaml":true},{"content":"Returns a `Double` specifying the present value of an annuity based on periodic, fixed payments to be paid in the future and a fixed interest rate.","nodes":[{"pos":[0,147],"content":"Returns a <ph id=\"ph1\">`Double`</ph> specifying the present value of an annuity based on periodic, fixed payments to be paid in the future and a fixed interest rate.","source":"Returns a `Double` specifying the present value of an annuity based on periodic, fixed payments to be paid in the future and a fixed interest rate."}],"pos":[45313,45461],"yaml":true},{"content":"Returns a `Double` specifying the interest rate per period for an annuity.","nodes":[{"pos":[0,74],"content":"Returns a <ph id=\"ph1\">`Double`</ph> specifying the interest rate per period for an annuity.","source":"Returns a `Double` specifying the interest rate per period for an annuity."}],"pos":[46811,46886],"yaml":true},{"content":"An annuity is a series of fixed cash payments made over a period of time. An annuity can be a loan (such as a home mortgage) or an investment (such as a monthly savings plan).  \n  \n For all arguments, cash paid out (such as deposits to savings) is represented by negative numbers; cash received (such as dividend checks) is represented by positive numbers.  \n  \n `Rate` is calculated by iteration. Starting with the value of `Guess`, `Rate` cycles through the calculation until the result is accurate to within 0.00001 percent. If `Rate` cannot find a result after 20 tries, it fails. If your guess is 10 percent and `Rate` fails, try a different value for `Guess`.","nodes":[{"pos":[0,175],"content":"An annuity is a series of fixed cash payments made over a period of time. An annuity can be a loan (such as a home mortgage) or an investment (such as a monthly savings plan).","nodes":[{"content":"An annuity is a series of fixed cash payments made over a period of time. An annuity can be a loan (such as a home mortgage) or an investment (such as a monthly savings plan).","pos":[0,175],"nodes":[{"content":"An annuity is a series of fixed cash payments made over a period of time.","pos":[0,73]},{"content":"An annuity can be a loan (such as a home mortgage) or an investment (such as a monthly savings plan).","pos":[74,175]}]}]},{"pos":[182,356],"content":"For all arguments, cash paid out (such as deposits to savings) is represented by negative numbers; cash received (such as dividend checks) is represented by positive numbers.","nodes":[{"content":"For all arguments, cash paid out (such as deposits to savings) is represented by negative numbers; cash received (such as dividend checks) is represented by positive numbers.","pos":[0,174]}]},{"pos":[363,665],"content":"`Rate` is calculated by iteration. Starting with the value of `Guess`, `Rate` cycles through the calculation until the result is accurate to within 0.00001 percent. If `Rate` cannot find a result after 20 tries, it fails. If your guess is 10 percent and `Rate` fails, try a different value for `Guess`.","nodes":[{"content":"<ph id=\"ph1\">`Rate`</ph> is calculated by iteration.","pos":[0,34],"source":"`Rate` is calculated by iteration."},{"content":"Starting with the value of <ph id=\"ph1\">`Guess`</ph>, <ph id=\"ph2\">`Rate`</ph> cycles through the calculation until the result is accurate to within 0.00001 percent.","pos":[35,164],"source":" Starting with the value of `Guess`, `Rate` cycles through the calculation until the result is accurate to within 0.00001 percent."},{"content":"If <ph id=\"ph1\">`Rate`</ph> cannot find a result after 20 tries, it fails.","pos":[165,221],"source":" If `Rate` cannot find a result after 20 tries, it fails."},{"content":"If your guess is 10 percent and <ph id=\"ph1\">`Rate`</ph> fails, try a different value for <ph id=\"ph2\">`Guess`</ph>.","pos":[222,302],"source":" If your guess is 10 percent and `Rate` fails, try a different value for `Guess`."}]}],"pos":[46897,47569],"yaml":true,"extradata":"MT"},{"content":"Required. `Double` specifies the total number of payment periods in the annuity. For example, if you make monthly payments on a four-year car loan, your loan has a total of 4 * 12 (or 48) payment periods.","nodes":[{"pos":[0,204],"content":"Required. `Double` specifies the total number of payment periods in the annuity. For example, if you make monthly payments on a four-year car loan, your loan has a total of 4 * 12 (or 48) payment periods.","nodes":[{"content":"Required.","pos":[0,9]},{"content":"<ph id=\"ph1\">`Double`</ph> specifies the total number of payment periods in the annuity.","pos":[10,80],"source":"`Double` specifies the total number of payment periods in the annuity."},{"content":"For example, if you make monthly payments on a four-year car loan, your loan has a total of 4 * 12 (or 48) payment periods.","pos":[81,204]}]}],"pos":[48412,48617],"yaml":true},{"content":"Required. `Double` specifies the payment to be made each period. Payments usually contain principal and interest that doesn't change over the life of the annuity.","nodes":[{"pos":[0,162],"content":"Required. `Double` specifies the payment to be made each period. Payments usually contain principal and interest that doesn't change over the life of the annuity.","nodes":[{"content":"Required.","pos":[0,9]},{"content":"<ph id=\"ph1\">`Double`</ph> specifies the payment to be made each period.","pos":[10,64],"source":"`Double` specifies the payment to be made each period."},{"content":"Payments usually contain principal and interest that doesn't change over the life of the annuity.","pos":[65,162]}]}],"pos":[48676,48839],"yaml":true},{"content":"Required. `Double` specifies the present value, or value today, of a series of future payments or receipts. For example, when you borrow money to buy a car, the loan amount is the present value to the lender of the monthly car payments you will make.","nodes":[{"pos":[0,250],"content":"Required. `Double` specifies the present value, or value today, of a series of future payments or receipts. For example, when you borrow money to buy a car, the loan amount is the present value to the lender of the monthly car payments you will make.","nodes":[{"content":"Required.","pos":[0,9]},{"content":"<ph id=\"ph1\">`Double`</ph> specifies the present value, or value today, of a series of future payments or receipts.","pos":[10,107],"source":"`Double` specifies the present value, or value today, of a series of future payments or receipts."},{"content":"For example, when you borrow money to buy a car, the loan amount is the present value to the lender of the monthly car payments you will make.","pos":[108,250]}]}],"pos":[48897,49148],"yaml":true},{"content":"Optional. `Double` specifies the future value or cash balance you want after you make the final payment. For example, the future value of a loan is $0 because that is its value after the final payment. However, if you want to save $50,000 over 18 years for your child's education, then $50,000 is the future value. If omitted, 0 is assumed.","nodes":[{"pos":[0,340],"content":"Optional. `Double` specifies the future value or cash balance you want after you make the final payment. For example, the future value of a loan is $0 because that is its value after the final payment. However, if you want to save $50,000 over 18 years for your child's education, then $50,000 is the future value. If omitted, 0 is assumed.","nodes":[{"content":"Optional.","pos":[0,9]},{"content":"<ph id=\"ph1\">`Double`</ph> specifies the future value or cash balance you want after you make the final payment.","pos":[10,104],"source":"`Double` specifies the future value or cash balance you want after you make the final payment."},{"content":"For example, the future value of a loan is $0 because that is its value after the final payment.","pos":[105,201]},{"content":"However, if you want to save $50,000 over 18 years for your child's education, then $50,000 is the future value.","pos":[202,314]},{"content":"If omitted, 0 is assumed.","pos":[315,340]}]}],"pos":[49206,49547],"yaml":true},{"content":"Optional. Object of type <xref href=\"Microsoft.VisualBasic.DueDate\"></xref> that specifies when payments are due. This argument must be either <code>DueDate.EndOfPeriod</code> if payments are due at the end of the payment period, or <code>DueDate.BegOfPeriod</code> if payments are due at the beginning of the period. If omitted, <code>DueDate.EndOfPeriod</code> is assumed.","nodes":[{"pos":[0,374],"content":"Optional. Object of type <xref href=\"Microsoft.VisualBasic.DueDate\"></xref> that specifies when payments are due. This argument must be either <code>DueDate.EndOfPeriod</code> if payments are due at the end of the payment period, or <code>DueDate.BegOfPeriod</code> if payments are due at the beginning of the period. If omitted, <code>DueDate.EndOfPeriod</code> is assumed.","nodes":[{"content":"Optional.","pos":[0,9]},{"content":"Object of type <ph id=\"ph1\">&lt;xref href=\"Microsoft.VisualBasic.DueDate\"&gt;&lt;/xref&gt;</ph> that specifies when payments are due.","pos":[10,113],"source":" Object of type <xref href=\"Microsoft.VisualBasic.DueDate\"></xref> that specifies when payments are due."},{"content":"This argument must be either <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">DueDate.EndOfPeriod</ph><ept id=\"p1\">&lt;/code&gt;</ept> if payments are due at the end of the payment period, or <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">DueDate.BegOfPeriod</ph><ept id=\"p2\">&lt;/code&gt;</ept> if payments are due at the beginning of the period.","pos":[114,317],"source":" This argument must be either <code>DueDate.EndOfPeriod</code> if payments are due at the end of the payment period, or <code>DueDate.BegOfPeriod</code> if payments are due at the beginning of the period."},{"content":"If omitted, <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">DueDate.EndOfPeriod</ph><ept id=\"p1\">&lt;/code&gt;</ept> is assumed.","pos":[318,374],"source":" If omitted, <code>DueDate.EndOfPeriod</code> is assumed."}]}],"pos":[49622,49997],"yaml":true},{"content":"Optional. `Double` specifying value you estimate is returned by `Rate`. If omitted, <code>Guess</code> is 0.1 (10 percent).","nodes":[{"pos":[0,123],"content":"Optional. `Double` specifying value you estimate is returned by `Rate`. If omitted, <code>Guess</code> is 0.1 (10 percent).","nodes":[{"content":"Optional.","pos":[0,9]},{"content":"<ph id=\"ph1\">`Double`</ph> specifying value you estimate is returned by <ph id=\"ph2\">`Rate`</ph>.","pos":[10,71],"source":"`Double` specifying value you estimate is returned by `Rate`."},{"content":"If omitted, <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">Guess</ph><ept id=\"p1\">&lt;/code&gt;</ept> is 0.1 (10 percent).","pos":[72,123],"source":" If omitted, <code>Guess</code> is 0.1 (10 percent)."}]}],"pos":[50058,50182],"yaml":true},{"content":"Returns a `Double` specifying the interest rate per period for an annuity.","nodes":[{"pos":[0,74],"content":"Returns a <ph id=\"ph1\">`Double`</ph> specifying the interest rate per period for an annuity.","source":"Returns a `Double` specifying the interest rate per period for an annuity."}],"pos":[50239,50314],"yaml":true},{"content":"<code>NPer</code> <= 0.","nodes":[],"pos":[50472,50496],"yaml":true},{"content":"Returns a `Double` specifying the straight-line depreciation of an asset for a single period.","nodes":[{"pos":[0,93],"content":"Returns a <ph id=\"ph1\">`Double`</ph> specifying the straight-line depreciation of an asset for a single period.","source":"Returns a `Double` specifying the straight-line depreciation of an asset for a single period."}],"pos":[51526,51620],"yaml":true},{"content":"The depreciation period must be expressed in the same unit as the `Life` argument. All arguments must be positive numbers.","nodes":[{"pos":[0,122],"content":"The depreciation period must be expressed in the same unit as the `Life` argument. All arguments must be positive numbers.","nodes":[{"content":"The depreciation period must be expressed in the same unit as the <ph id=\"ph1\">`Life`</ph> argument.","pos":[0,82],"source":"The depreciation period must be expressed in the same unit as the `Life` argument."},{"content":"All arguments must be positive numbers.","pos":[83,122]}]}],"pos":[51631,51754],"yaml":true,"extradata":"MT"},{"content":"Required. `Double` specifying initial cost of the asset.","nodes":[{"pos":[0,56],"content":"Required. `Double` specifying initial cost of the asset.","nodes":[{"content":"Required.","pos":[0,9]},{"content":"<ph id=\"ph1\">`Double`</ph> specifying initial cost of the asset.","pos":[10,56],"source":"`Double` specifying initial cost of the asset."}]}],"pos":[52335,52392],"yaml":true},{"content":"Required. `Double` specifying value of the asset at the end of its useful life.","nodes":[{"pos":[0,79],"content":"Required. `Double` specifying value of the asset at the end of its useful life.","nodes":[{"content":"Required.","pos":[0,9]},{"content":"<ph id=\"ph1\">`Double`</ph> specifying value of the asset at the end of its useful life.","pos":[10,79],"source":"`Double` specifying value of the asset at the end of its useful life."}]}],"pos":[52455,52535],"yaml":true},{"content":"Required. `Double` specifying length of the useful life of the asset.","nodes":[{"pos":[0,69],"content":"Required. `Double` specifying length of the useful life of the asset.","nodes":[{"content":"Required.","pos":[0,9]},{"content":"<ph id=\"ph1\">`Double`</ph> specifying length of the useful life of the asset.","pos":[10,69],"source":"`Double` specifying length of the useful life of the asset."}]}],"pos":[52595,52665],"yaml":true},{"content":"Returns a `Double` specifying the straight-line depreciation of an asset for a single period.","nodes":[{"pos":[0,93],"content":"Returns a <ph id=\"ph1\">`Double`</ph> specifying the straight-line depreciation of an asset for a single period.","source":"Returns a `Double` specifying the straight-line depreciation of an asset for a single period."}],"pos":[52722,52816],"yaml":true},{"content":"<code>Life</code> = 0.","nodes":[{"pos":[0,22],"content":"<ph id=\"ph1\">&lt;code&gt;Life&lt;/code&gt;</ph> = 0.","source":"<code>Life</code> = 0."}],"pos":[52973,52996],"yaml":true},{"content":"Returns a `Double` specifying the sum-of-years digits depreciation of an asset for a specified period.","nodes":[{"pos":[0,102],"content":"Returns a <ph id=\"ph1\">`Double`</ph> specifying the sum-of-years digits depreciation of an asset for a specified period.","source":"Returns a `Double` specifying the sum-of-years digits depreciation of an asset for a specified period."}],"pos":[54092,54195],"yaml":true},{"content":"The `Life` and `Period` arguments must be expressed in the same units. For example, if `Life` is given in months, `Period` must also be given in months. All arguments must be positive numbers.","nodes":[{"pos":[0,192],"content":"The `Life` and `Period` arguments must be expressed in the same units. For example, if `Life` is given in months, `Period` must also be given in months. All arguments must be positive numbers.","nodes":[{"content":"The <ph id=\"ph1\">`Life`</ph> and <ph id=\"ph2\">`Period`</ph> arguments must be expressed in the same units.","pos":[0,70],"source":"The `Life` and `Period` arguments must be expressed in the same units."},{"content":"For example, if <ph id=\"ph1\">`Life`</ph> is given in months, <ph id=\"ph2\">`Period`</ph> must also be given in months.","pos":[71,152],"source":" For example, if `Life` is given in months, `Period` must also be given in months."},{"content":"All arguments must be positive numbers.","pos":[153,192]}]}],"pos":[54206,54399],"yaml":true,"extradata":"MT"},{"content":"Required. `Double` specifying the initial cost of the asset.","nodes":[{"pos":[0,60],"content":"Required. `Double` specifying the initial cost of the asset.","nodes":[{"content":"Required.","pos":[0,9]},{"content":"<ph id=\"ph1\">`Double`</ph> specifying the initial cost of the asset.","pos":[10,60],"source":"`Double` specifying the initial cost of the asset."}]}],"pos":[54984,55045],"yaml":true},{"content":"Required. `Double` specifying the value of the asset at the end of its useful life.","nodes":[{"pos":[0,83],"content":"Required. `Double` specifying the value of the asset at the end of its useful life.","nodes":[{"content":"Required.","pos":[0,9]},{"content":"<ph id=\"ph1\">`Double`</ph> specifying the value of the asset at the end of its useful life.","pos":[10,83],"source":"`Double` specifying the value of the asset at the end of its useful life."}]}],"pos":[55108,55192],"yaml":true},{"content":"Required. `Double` specifying the length of the useful life of the asset.","nodes":[{"pos":[0,73],"content":"Required. `Double` specifying the length of the useful life of the asset.","nodes":[{"content":"Required.","pos":[0,9]},{"content":"<ph id=\"ph1\">`Double`</ph> specifying the length of the useful life of the asset.","pos":[10,73],"source":"`Double` specifying the length of the useful life of the asset."}]}],"pos":[55252,55326],"yaml":true},{"content":"Required. `Double` specifying the period for which asset depreciation is calculated.","nodes":[{"pos":[0,84],"content":"Required. `Double` specifying the period for which asset depreciation is calculated.","nodes":[{"content":"Required.","pos":[0,9]},{"content":"<ph id=\"ph1\">`Double`</ph> specifying the period for which asset depreciation is calculated.","pos":[10,84],"source":"`Double` specifying the period for which asset depreciation is calculated."}]}],"pos":[55388,55473],"yaml":true},{"content":"Returns a `Double` specifying the sum-of-years digits depreciation of an asset for a specified period.","nodes":[{"pos":[0,102],"content":"Returns a <ph id=\"ph1\">`Double`</ph> specifying the sum-of-years digits depreciation of an asset for a specified period.","source":"Returns a `Double` specifying the sum-of-years digits depreciation of an asset for a specified period."}],"pos":[55530,55633],"yaml":true},{"content":"<code>Salvage</code> < 0, <code>Period</code> > <code>Life</code>, or <code>Period</code> <=0.","nodes":[{"pos":[0,94],"content":"<ph id=\"ph1\">&lt;code&gt;Salvage&lt;/code&gt;</ph> &lt; 0, <ph id=\"ph2\">&lt;code&gt;Period&lt;/code&gt;</ph><ph id=\"ph3\"> &gt; &lt;code&gt;Life&lt;/code&gt;</ph>, or <ph id=\"ph4\">&lt;code&gt;Period&lt;/code&gt;</ph><ph id=\"ph5\"> &lt;=0.</ph>","source":"<code>Salvage</code> < 0, <code>Period</code> > <code>Life</code>, or <code>Period</code> <=0."}],"pos":[55790,55885],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: Microsoft.VisualBasic.Financial\n  commentId: T:Microsoft.VisualBasic.Financial\n  id: Financial\n  children:\n  - Microsoft.VisualBasic.Financial.DDB(System.Double,System.Double,System.Double,System.Double,System.Double)\n  - Microsoft.VisualBasic.Financial.FV(System.Double,System.Double,System.Double,System.Double,Microsoft.VisualBasic.DueDate)\n  - Microsoft.VisualBasic.Financial.IPmt(System.Double,System.Double,System.Double,System.Double,System.Double,Microsoft.VisualBasic.DueDate)\n  - Microsoft.VisualBasic.Financial.IRR(System.Double[]@,System.Double)\n  - Microsoft.VisualBasic.Financial.MIRR(System.Double[]@,System.Double,System.Double)\n  - Microsoft.VisualBasic.Financial.NPer(System.Double,System.Double,System.Double,System.Double,Microsoft.VisualBasic.DueDate)\n  - Microsoft.VisualBasic.Financial.NPV(System.Double,System.Double[]@)\n  - Microsoft.VisualBasic.Financial.Pmt(System.Double,System.Double,System.Double,System.Double,Microsoft.VisualBasic.DueDate)\n  - Microsoft.VisualBasic.Financial.PPmt(System.Double,System.Double,System.Double,System.Double,System.Double,Microsoft.VisualBasic.DueDate)\n  - Microsoft.VisualBasic.Financial.PV(System.Double,System.Double,System.Double,System.Double,Microsoft.VisualBasic.DueDate)\n  - Microsoft.VisualBasic.Financial.Rate(System.Double,System.Double,System.Double,System.Double,Microsoft.VisualBasic.DueDate,System.Double)\n  - Microsoft.VisualBasic.Financial.SLN(System.Double,System.Double,System.Double)\n  - Microsoft.VisualBasic.Financial.SYD(System.Double,System.Double,System.Double,System.Double)\n  langs:\n  - csharp\n  name: Financial\n  nameWithType: Financial\n  fullName: Microsoft.VisualBasic.Financial\n  type: Class\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic\n  summary: The `Financial` module contains procedures used to perform financial operations.\n  remarks: This module supports the Visual Basic run-time library members that perform financial calculations such as depreciation, present and future values, interest rates, rates of return, and payments.\n  example:\n  - \"This example uses the `Rate` function to calculate the interest rate of a loan, given the total number of payments (`TotPmts`), the amount of the loan payment (`Payment`), the present value or principal of the loan (`PVal`), the future value of the loan (`FVal`), a number that indicates whether the payment is due at the beginning or end of the payment period (`PayType`), and an approximation of the expected interest rate (`Guess`).  \\n  \\n [!code-vb[VbVbalrMath#2](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#2)]\"\n  syntax:\n    content: >-\n      [Microsoft.VisualBasic.CompilerServices.StandardModule]\n\n      public sealed class Financial\n  inheritance:\n  - System.Object\n  implements: []\n  inheritedMembers:\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.ToString\n  attributes:\n  - type: Microsoft.VisualBasic.CompilerServices.StandardModuleAttribute\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualBasic/Financial.xml\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: Microsoft.VisualBasic.Financial.DDB(System.Double,System.Double,System.Double,System.Double,System.Double)\n  commentId: M:Microsoft.VisualBasic.Financial.DDB(System.Double,System.Double,System.Double,System.Double,System.Double)\n  id: DDB(System.Double,System.Double,System.Double,System.Double,System.Double)\n  parent: Microsoft.VisualBasic.Financial\n  langs:\n  - csharp\n  name: DDB(Double, Double, Double, Double, Double)\n  nameWithType: Financial.DDB(Double, Double, Double, Double, Double)\n  fullName: Financial.DDB(Double, Double, Double, Double, Double)\n  type: Method\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic\n  summary: Returns a `Double` specifying the depreciation of an asset for a specific time period using the double-declining balance method or some other method you specify.\n  remarks: \"The double-declining balance method computes depreciation at an accelerated rate. Depreciation is highest in the first period and decreases in successive periods.  \\n  \\n The `Life` and `Period` arguments must be expressed in the same units. For example, if `Life` is given in months, `Period` must also be given in months. All arguments must be positive numbers.  \\n  \\n The `DDB` function uses the following formula to calculate depreciation for a given period:  \\n  \\n Depreciation / Period = ((Cost – Salvage) * Factor) / Life\"\n  example:\n  - \"This example uses the `DDB` function to return the depreciation of an asset for a specified period given the initial cost (`InitCost`), the salvage value at the end of the asset's useful life (`SalvageVal`), the total life of the asset in years (`LifeTime`), and the period in years for which the depreciation is calculated (`Depr`).  \\n  \\n [!code-vb[VbVbalrMath#3](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#3)]\"\n  syntax:\n    content: public static double DDB (double Cost, double Salvage, double Life, double Period, double Factor = 2);\n    parameters:\n    - id: Cost\n      type: System.Double\n      description: Required. `Double` specifying initial cost of the asset.\n    - id: Salvage\n      type: System.Double\n      description: Required. `Double` specifying value of the asset at the end of its useful life.\n    - id: Life\n      type: System.Double\n      description: Required. `Double` specifying length of useful life of the asset.\n    - id: Period\n      type: System.Double\n      description: Required. `Double` specifying period for which asset depreciation is calculated.\n    - id: Factor\n      type: System.Double\n      description: Optional. `Double` specifying rate at which the balance declines. If omitted, 2 (double-declining method) is assumed.\n    return:\n      type: System.Double\n      description: Returns a `Double` specifying the depreciation of an asset for a specific time period using the double-declining balance method or some other method you specify.\n  overload: Microsoft.VisualBasic.Financial.DDB*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>Factor</code> <= 0, <code>Salvage</code> < 0, <code>Period</code> <= 0, or <code>Period</code> > <code>Life.</code>\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualBasic/Financial.xml\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: Microsoft.VisualBasic.Financial.FV(System.Double,System.Double,System.Double,System.Double,Microsoft.VisualBasic.DueDate)\n  commentId: M:Microsoft.VisualBasic.Financial.FV(System.Double,System.Double,System.Double,System.Double,Microsoft.VisualBasic.DueDate)\n  id: FV(System.Double,System.Double,System.Double,System.Double,Microsoft.VisualBasic.DueDate)\n  parent: Microsoft.VisualBasic.Financial\n  langs:\n  - csharp\n  name: FV(Double, Double, Double, Double, DueDate)\n  nameWithType: Financial.FV(Double, Double, Double, Double, DueDate)\n  fullName: Financial.FV(Double, Double, Double, Double, DueDate)\n  type: Method\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic\n  summary: Returns a `Double` specifying the future value of an annuity based on periodic, fixed payments and a fixed interest rate.\n  remarks: \"An annuity is a series of fixed cash payments made over time. An annuity can be a loan (such as a home mortgage) or an investment (such as a monthly savings plan).  \\n  \\n The `Rate` and `NPer` arguments must be calculated using payment periods expressed in the same units. For example, if `Rate` is calculated using months, `NPer` must also be calculated using months.  \\n  \\n For all arguments, cash paid out (such as deposits to savings) is represented by negative numbers; cash received (such as dividend checks) is represented by positive numbers.\"\n  example:\n  - \"This example uses the `FV` function to return the future value of an investment given the percentage rate that accrues per period (`APR / 12`), the total number of payments (`TotPmts`), the payment (`Payment`), the current value of the investment (`PVal`), and a number that indicates whether the payment is made at the beginning or end of the payment period (`PayType`). Note that because `Payment` represents cash paid out, it is a negative number.  \\n  \\n [!code-vb[VbVbalrMath#22](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#22)]\"\n  syntax:\n    content: public static double FV (double Rate, double NPer, double Pmt, double PV = 0, Microsoft.VisualBasic.DueDate Due = Microsoft.VisualBasic.DueDate.EndOfPeriod);\n    parameters:\n    - id: Rate\n      type: System.Double\n      description: Required. `Double` specifying interest rate per period. For example, if you get a car loan at an annual percentage rate (APR) of 10 percent and make monthly payments, the rate per period is 0.1/12, or 0.0083.\n    - id: NPer\n      type: System.Double\n      description: Required. `Double` specifying total number of payment periods in the annuity. For example, if you make monthly payments on a four-year car loan, your loan has a total of 4 x 12 (or 48) payment periods.\n    - id: Pmt\n      type: System.Double\n      description: Required. `Double` specifying payment to be made each period. Payments usually contain principal and interest that doesn't change over the life of the annuity.\n    - id: PV\n      type: System.Double\n      description: Optional. `Double` specifying present value (or lump sum) of a series of future payments. For example, when you borrow money to buy a car, the loan amount is the present value to the lender of the monthly car payments you will make. If omitted, 0 is assumed.\n    - id: Due\n      type: Microsoft.VisualBasic.DueDate\n      description: Optional. Object of type <xref href=\"Microsoft.VisualBasic.DueDate\"></xref> that specifies when payments are due. This argument must be either `DueDate.EndOfPeriod` if payments are due at the end of the payment period, or `DueDate.BegOfPeriod` if payments are due at the beginning of the period. If omitted, `DueDate.EndOfPeriod` is assumed.\n    return:\n      type: System.Double\n      description: Returns a `Double` specifying the future value of an annuity based on periodic, fixed payments and a fixed interest rate.\n  overload: Microsoft.VisualBasic.Financial.FV*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualBasic/Financial.xml\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: Microsoft.VisualBasic.Financial.IPmt(System.Double,System.Double,System.Double,System.Double,System.Double,Microsoft.VisualBasic.DueDate)\n  commentId: M:Microsoft.VisualBasic.Financial.IPmt(System.Double,System.Double,System.Double,System.Double,System.Double,Microsoft.VisualBasic.DueDate)\n  id: IPmt(System.Double,System.Double,System.Double,System.Double,System.Double,Microsoft.VisualBasic.DueDate)\n  parent: Microsoft.VisualBasic.Financial\n  langs:\n  - csharp\n  name: IPmt(Double, Double, Double, Double, Double, DueDate)\n  nameWithType: Financial.IPmt(Double, Double, Double, Double, Double, DueDate)\n  fullName: Financial.IPmt(Double, Double, Double, Double, Double, DueDate)\n  type: Method\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic\n  summary: Returns a `Double` specifying the interest payment for a given period of an annuity based on periodic, fixed payments and a fixed interest rate.\n  remarks: \"An annuity is a series of fixed cash payments made over time. An annuity can be a loan (such as a home mortgage) or an investment (such as a monthly savings plan).  \\n  \\n The `Rate` and `NPer` arguments must be calculated using payment periods expressed in the same units. For example, if `Rate` is calculated using months, `NPer` must also be calculated using months.  \\n  \\n For all arguments, cash paid out (such as deposits to savings) is represented by negative numbers; cash received (such as dividend checks) is represented by positive numbers.\"\n  example:\n  - \"This example uses the `IPmt` function to calculate how much of a payment is interest when all the payments are of equal value. Given are the interest percentage rate per period (`APR / 12`), the payment period for which the interest portion is desired (`Period`), the total number of payments (`TotPmts`), the present value or principal of the loan (`PVal`), the future value of the loan (`FVal`), and a number that indicates whether the payment is due at the beginning or end of the payment period (`PayType`).  \\n  \\n [!code-vb[VbVbalrMath#26](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#26)]\"\n  syntax:\n    content: public static double IPmt (double Rate, double Per, double NPer, double PV, double FV = 0, Microsoft.VisualBasic.DueDate Due = Microsoft.VisualBasic.DueDate.EndOfPeriod);\n    parameters:\n    - id: Rate\n      type: System.Double\n      description: Required. `Double` specifying interest rate per period. For example, if you get a car loan at an annual percentage rate (APR) of 10 percent and make monthly payments, the rate per period is 0.1/12, or 0.0083.\n    - id: Per\n      type: System.Double\n      description: Required. `Double` specifying payment period in the range 1 through <code>NPer</code>.\n    - id: NPer\n      type: System.Double\n      description: Required. `Double` specifying total number of payment periods in the annuity. For example, if you make monthly payments on a four-year car loan, your loan has a total of 4 x 12 (or 48) payment periods.\n    - id: PV\n      type: System.Double\n      description: Required. `Double` specifying present value, or value today, of a series of future payments or receipts. For example, when you borrow money to buy a car, the loan amount is the present value to the lender of the monthly car payments you will make.\n    - id: FV\n      type: System.Double\n      description: Optional. `Double` specifying future value or cash balance you want after you've made the final payment. For example, the future value of a loan is $0 because that's its value after the final payment. However, if you want to save $50,000 over 18 years for your child's education, then $50,000 is the future value. If omitted, 0 is assumed.\n    - id: Due\n      type: Microsoft.VisualBasic.DueDate\n      description: Optional. Object of type <xref href=\"Microsoft.VisualBasic.DueDate\"></xref> that specifies when payments are due. This argument must be either <code>DueDate.EndOfPeriod</code> if payments are due at the end of the payment period, or <code>DueDate.BegOfPeriod</code> if payments are due at the beginning of the period. If omitted, <code>DueDate.EndOfPeriod</code> is assumed.\n    return:\n      type: System.Double\n      description: Returns a `Double` specifying the interest payment for a given period of an annuity based on periodic, fixed payments and a fixed interest rate.\n  overload: Microsoft.VisualBasic.Financial.IPmt*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>Per</code> <= 0 or <code>Per</code> > <code>NPer</code>\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualBasic/Financial.xml\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: Microsoft.VisualBasic.Financial.IRR(System.Double[]@,System.Double)\n  commentId: M:Microsoft.VisualBasic.Financial.IRR(System.Double[]@,System.Double)\n  id: IRR(System.Double[]@,System.Double)\n  parent: Microsoft.VisualBasic.Financial\n  langs:\n  - csharp\n  name: IRR(Double[], Double)\n  nameWithType: Financial.IRR(Double[], Double)\n  fullName: Financial.IRR(Double[], Double)\n  type: Method\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic\n  summary: Returns a `Double` specifying the internal rate of return for a series of periodic cash flows (payments and receipts).\n  remarks: \"The internal rate of return is the interest rate received for an investment consisting of payments and receipts that occur at regular intervals.  \\n  \\n The `IRR` function uses the order of values within the array to interpret the order of payments and receipts. Be sure to enter your payment and receipt values in the correct sequence. The cash flow for each period does not need to be fixed, as it is for an annuity.  \\n  \\n `IRR` is calculated by iteration. Starting with the value of `Guess`, `IRR` cycles through the calculation until the result is accurate to within 0.00001 percent. If `IRR` cannot find a result after 20 tries, it fails.\"\n  example:\n  - \"In this example, the `IRR` function returns the internal rate of return for a series of five cash flows contained in the array `Values()`. The first array element is a negative cash flow representing business start-up costs. The remaining four cash flows represent positive cash flows for the subsequent four years. `Guess` is the estimated internal rate of return.  \\n  \\n [!code-vb[VbVbalrMath#20](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#20)]\"\n  syntax:\n    content: public static double IRR (ref double[] ValueArray, double Guess = 0.1);\n    parameters:\n    - id: ValueArray\n      type: System.Double[]\n      description: Required. Array of `Double` specifying cash flow values. The array must contain at least one negative value (a payment) and one positive value (a receipt).\n    - id: Guess\n      type: System.Double\n      description: Optional. Object specifying value you estimate will be returned by `IRR`. If omitted, <code>Guess</code> is 0.1 (10 percent).\n    return:\n      type: System.Double\n      description: Returns a `Double` specifying the internal rate of return for a series of periodic cash flows (payments and receipts).\n  overload: Microsoft.VisualBasic.Financial.IRR*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: Array argument values are invalid or <code>Guess</code> <= -1.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualBasic/Financial.xml\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: Microsoft.VisualBasic.Financial.MIRR(System.Double[]@,System.Double,System.Double)\n  commentId: M:Microsoft.VisualBasic.Financial.MIRR(System.Double[]@,System.Double,System.Double)\n  id: MIRR(System.Double[]@,System.Double,System.Double)\n  parent: Microsoft.VisualBasic.Financial\n  langs:\n  - csharp\n  name: MIRR(Double[], Double, Double)\n  nameWithType: Financial.MIRR(Double[], Double, Double)\n  fullName: Financial.MIRR(Double[], Double, Double)\n  type: Method\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic\n  summary: Returns a `Double` specifying the modified internal rate of return for a series of periodic cash flows (payments and receipts).\n  remarks: \"The modified internal rate of return is the internal rate of return when payments and receipts are financed at different rates. The `MIRR` function takes into account both the cost of the investment (`FinanceRate`) and the interest rate received on reinvestment of cash (`ReinvestRate`).  \\n  \\n The `FinanceRate` and `ReinvestRatearguments` are percentages expressed as decimal values. For example, 12 percent is expressed as 0.12.  \\n  \\n The `MIRR` function uses the order of values within the array to interpret the order of payments and receipts. Be sure to enter your payment and receipt values in the correct sequence.\"\n  example:\n  - \"This example uses the `MIRR` function to return the modified internal rate of return for a series of cash flows contained in the array `Values()`. `LoanAPR` represents the financing interest, and `InvAPR` represents the interest rate received on reinvestment.  \\n  \\n [!code-vb[VbVbalrMath#29](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#29)]\"\n  syntax:\n    content: public static double MIRR (ref double[] ValueArray, double FinanceRate, double ReinvestRate);\n    parameters:\n    - id: ValueArray\n      type: System.Double[]\n      description: Required. Array of `Double` specifying cash-flow values. The array must contain at least one negative value (a payment) and one positive value (a receipt).\n    - id: FinanceRate\n      type: System.Double\n      description: Required. `Double` specifying interest rate paid as the cost of financing.\n    - id: ReinvestRate\n      type: System.Double\n      description: Required. `Double` specifying interest rate received on gains from cash reinvestment.\n    return:\n      type: System.Double\n      description: Returns a `Double` specifying the modified internal rate of return for a series of periodic cash flows (payments and receipts).\n  overload: Microsoft.VisualBasic.Financial.MIRR*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: Rank of <code>ValueArray</code> does not equal 1, <code>FinanceRate</code> = -1, or <code>ReinvestRate</code> = -1\n  - type: System.DivideByZeroException\n    commentId: T:System.DivideByZeroException\n    description: Division by zero has occurred.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualBasic/Financial.xml\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: Microsoft.VisualBasic.Financial.NPer(System.Double,System.Double,System.Double,System.Double,Microsoft.VisualBasic.DueDate)\n  commentId: M:Microsoft.VisualBasic.Financial.NPer(System.Double,System.Double,System.Double,System.Double,Microsoft.VisualBasic.DueDate)\n  id: NPer(System.Double,System.Double,System.Double,System.Double,Microsoft.VisualBasic.DueDate)\n  parent: Microsoft.VisualBasic.Financial\n  langs:\n  - csharp\n  name: NPer(Double, Double, Double, Double, DueDate)\n  nameWithType: Financial.NPer(Double, Double, Double, Double, DueDate)\n  fullName: Financial.NPer(Double, Double, Double, Double, DueDate)\n  type: Method\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic\n  summary: Returns a `Double` specifying the number of periods for an annuity based on periodic fixed payments and a fixed interest rate.\n  remarks: \"An annuity is a series of fixed cash payments made over a period of time. An annuity can be a loan (such as a home mortgage) or an investment (such as a monthly savings plan).  \\n  \\n For all arguments, cash paid out (such as deposits to savings) is represented by negative numbers; cash received (such as dividend checks) is represented by positive numbers.\"\n  example:\n  - \"This example uses the `NPer` function to return the number of periods during which payments must be made to pay off a loan whose value is contained in `PVal`. Also provided are the interest percentage rate per period (`APR / 12`), the payment (`Payment`), the future value of the loan (`FVal`), and a number that indicates whether the payment is due at the beginning or end of the payment period (`PayType`).  \\n  \\n [!code-vb[VbVbalrMath#19](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#19)]\"\n  syntax:\n    content: public static double NPer (double Rate, double Pmt, double PV, double FV = 0, Microsoft.VisualBasic.DueDate Due = Microsoft.VisualBasic.DueDate.EndOfPeriod);\n    parameters:\n    - id: Rate\n      type: System.Double\n      description: Required. `Double` specifying interest rate per period. For example, if you get a car loan at an annual percentage rate (APR) of 10 percent and make monthly payments, the rate per period is 0.1/12, or 0.0083.\n    - id: Pmt\n      type: System.Double\n      description: Required. `Double` specifying payment to be made each period. Payments usually contain principal and interest that does not change over the life of the annuity.\n    - id: PV\n      type: System.Double\n      description: Required. `Double` specifying present value, or value today, of a series of future payments or receipts. For example, when you borrow money to buy a car, the loan amount is the present value to the lender of the monthly car payments you will make.\n    - id: FV\n      type: System.Double\n      description: Optional. `Double` specifying future value or cash balance you want after you have made the final payment. For example, the future value of a loan is $0 because that is its value after the final payment. However, if you want to save $50,000 over 18 years for your child's education, then $50,000 is the future value. If omitted, 0 is assumed.\n    - id: Due\n      type: Microsoft.VisualBasic.DueDate\n      description: Optional. Object of type <xref href=\"Microsoft.VisualBasic.DueDate\"></xref> that specifies when payments are due. This argument must be either <code>DueDate.EndOfPeriod</code> if payments are due at the end of the payment period, or <code>DueDate.BegOfPeriod</code> if payments are due at the beginning of the period. If omitted, <code>DueDate.EndOfPeriod</code> is assumed.\n    return:\n      type: System.Double\n      description: Returns a `Double` specifying the number of periods for an annuity based on periodic fixed payments and a fixed interest rate.\n  overload: Microsoft.VisualBasic.Financial.NPer*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>Rate</code> = 0 and <code>Pmt</code> = 0\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualBasic/Financial.xml\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: Microsoft.VisualBasic.Financial.NPV(System.Double,System.Double[]@)\n  commentId: M:Microsoft.VisualBasic.Financial.NPV(System.Double,System.Double[]@)\n  id: NPV(System.Double,System.Double[]@)\n  parent: Microsoft.VisualBasic.Financial\n  langs:\n  - csharp\n  name: NPV(Double, Double[])\n  nameWithType: Financial.NPV(Double, Double[])\n  fullName: Financial.NPV(Double, Double[])\n  type: Method\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic\n  summary: Returns a `Double` specifying the net present value of an investment based on a series of periodic cash flows (payments and receipts) and a discount rate.\n  remarks: \"The net present value of an investment is the current value of a future series of payments and receipts.  \\n  \\n The `NPV` function uses the order of values within the array to interpret the order of payments and receipts. Be sure to enter your payment and receipt values in the correct sequence.  \\n  \\n The `NPV` investment begins one period before the date of the first cash flow value and ends with the last cash flow value in the array.  \\n  \\n The net present value calculation is based on future cash flows. If your first cash flow occurs at the beginning of the first period, the first value must be added to the value returned by `NPV` and must not be included in the cash flow values of `ValueArray`.  \\n  \\n The `NPV` function is similar to the `PV` function (present value) except that the `PV` function allows cash flows to begin either at the end or the beginning of a period. Unlike the variable `NPV` cash flow values, `PV` cash flows must be fixed throughout the investment.\"\n  example:\n  - \"This example uses the `NPV` function to return the net present value for a series of cash flows contained in the array `values()`. The return value, stored in `FixedRetRate`, represents the fixed internal rate of return.  \\n  \\n [!code-vb[VbVbalrMath#1](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#1)]\"\n  syntax:\n    content: public static double NPV (double Rate, ref double[] ValueArray);\n    parameters:\n    - id: Rate\n      type: System.Double\n      description: Required. `Double` specifying discount rate over the length of the period, expressed as a decimal.\n    - id: ValueArray\n      type: System.Double[]\n      description: Required. Array of `Double` specifying cash flow values. The array must contain at least one negative value (a payment) and one positive value (a receipt).\n    return:\n      type: System.Double\n      description: Returns a `Double` specifying the net present value of an investment based on a series of periodic cash flows (payments and receipts) and a discount rate.\n  overload: Microsoft.VisualBasic.Financial.NPV*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>ValueArray</code> is `Nothing`, rank of <code>ValueArray</code> <> 1, or <code>Rate</code> = -1\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualBasic/Financial.xml\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: Microsoft.VisualBasic.Financial.Pmt(System.Double,System.Double,System.Double,System.Double,Microsoft.VisualBasic.DueDate)\n  commentId: M:Microsoft.VisualBasic.Financial.Pmt(System.Double,System.Double,System.Double,System.Double,Microsoft.VisualBasic.DueDate)\n  id: Pmt(System.Double,System.Double,System.Double,System.Double,Microsoft.VisualBasic.DueDate)\n  parent: Microsoft.VisualBasic.Financial\n  langs:\n  - csharp\n  name: Pmt(Double, Double, Double, Double, DueDate)\n  nameWithType: Financial.Pmt(Double, Double, Double, Double, DueDate)\n  fullName: Financial.Pmt(Double, Double, Double, Double, DueDate)\n  type: Method\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic\n  summary: Returns a `Double` specifying the payment for an annuity based on periodic, fixed payments and a fixed interest rate.\n  remarks: \"An annuity is a series of fixed cash payments made during a period of time. An annuity can be a loan (such as a home mortgage) or an investment (such as a monthly savings plan).  \\n  \\n The `Rate` and `NPer` arguments must be calculated using payment periods expressed in the same units. For example, if `Rate` is calculated using months, `NPer` must also be calculated using months.  \\n  \\n For all arguments, cash paid (such as deposits to savings) is represented by negative numbers; cash received (such as dividend checks) is represented by positive numbers.\"\n  example:\n  - \"This example uses the `Pmt` function to return the monthly payment for a loan during a fixed period. Given are the interest percentage rate per period (`APR / 12`), the total number of payments (`TotPmts`), the present value or principal of the loan (`PVal`), the future value of the loan (`FVal`), and a number that indicates whether the payment is due at the beginning or end of the payment period `(PayType).`  \\n  \\n [!code-vb[VbVbalrMath#7](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#7)]\"\n  syntax:\n    content: public static double Pmt (double Rate, double NPer, double PV, double FV = 0, Microsoft.VisualBasic.DueDate Due = Microsoft.VisualBasic.DueDate.EndOfPeriod);\n    parameters:\n    - id: Rate\n      type: System.Double\n      description: Required. `Double` specifies the interest rate per period. For example, if you get a car loan at an annual percentage rate (APR) of 10 percent and make monthly payments, the rate per period is 0.1/12, or 0.0083.\n    - id: NPer\n      type: System.Double\n      description: Required. `Double` specifies the total number of payment periods in the annuity. For example, if you make monthly payments on a four-year car loan, your loan has a total of 4 × 12 (or 48) payment periods.\n    - id: PV\n      type: System.Double\n      description: Required. `Double` specifies the present value (or lump sum) that a series of payments to be paid in the future is worth now. For example, when you borrow money to buy a car, the loan amount is the present value to the lender of the monthly car payments you will make.\n    - id: FV\n      type: System.Double\n      description: Optional. `Double` specifying future value or cash balance you want after you have made the final payment. For example, the future value of a loan is $0 because that is its value after the final payment. However, if you want to save $50,000 during 18 years for your child's education, then $50,000 is the future value. If omitted, 0 is assumed.\n    - id: Due\n      type: Microsoft.VisualBasic.DueDate\n      description: Optional. Object of type <xref href=\"Microsoft.VisualBasic.DueDate\"></xref> that specifies when payments are due. This argument must be either <code>DueDate.EndOfPeriod</code> if payments are due at the end of the payment period, or <code>DueDate.BegOfPeriod</code> if payments are due at the beginning of the period. If omitted, <code>DueDate.EndOfPeriod</code> is assumed.\n    return:\n      type: System.Double\n      description: Returns a `Double` specifying the payment for an annuity based on periodic, fixed payments and a fixed interest rate.\n  overload: Microsoft.VisualBasic.Financial.Pmt*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>NPer</code> = 0.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualBasic/Financial.xml\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: Microsoft.VisualBasic.Financial.PPmt(System.Double,System.Double,System.Double,System.Double,System.Double,Microsoft.VisualBasic.DueDate)\n  commentId: M:Microsoft.VisualBasic.Financial.PPmt(System.Double,System.Double,System.Double,System.Double,System.Double,Microsoft.VisualBasic.DueDate)\n  id: PPmt(System.Double,System.Double,System.Double,System.Double,System.Double,Microsoft.VisualBasic.DueDate)\n  parent: Microsoft.VisualBasic.Financial\n  langs:\n  - csharp\n  name: PPmt(Double, Double, Double, Double, Double, DueDate)\n  nameWithType: Financial.PPmt(Double, Double, Double, Double, Double, DueDate)\n  fullName: Financial.PPmt(Double, Double, Double, Double, Double, DueDate)\n  type: Method\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic\n  summary: Returns a `Double` specifying the principal payment for a given period of an annuity based on periodic fixed payments and a fixed interest rate.\n  remarks: \"An annuity is a series of fixed cash payments made over a period of time. An annuity can be a loan (such as a home mortgage) or an investment (such as a monthly savings plan).  \\n  \\n The `Rate` and `NPer` arguments must be calculated using payment periods expressed in the same units. For example, if `Rate` is calculated using months, `NPer` must also be calculated using months.  \\n  \\n For all arguments, cash paid (such as deposits to savings) is represented by negative numbers; cash received (such as dividend checks) is represented by positive numbers.\"\n  example:\n  - \"This example uses the `PPmt` function to calculate how much of a payment for a specific period is principal when all the payments are of equal value. Given are the interest percentage rate per period (`APR / 12`), the payment period for which the principal portion is desired (`Period`), the total number of payments (`TotPmts`), the present value or principal of the loan (`PVal`), the future value of the loan (`FVal`), and a number that indicates whether the payment is due at the beginning or end of the payment period (`PayType`).  \\n  \\n [!code-vb[VbVbalrMath#24](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#24)]\"\n  syntax:\n    content: public static double PPmt (double Rate, double Per, double NPer, double PV, double FV = 0, Microsoft.VisualBasic.DueDate Due = Microsoft.VisualBasic.DueDate.EndOfPeriod);\n    parameters:\n    - id: Rate\n      type: System.Double\n      description: Required. `Double` specifies the interest rate per period. For example, if you get a car loan at an annual percentage rate (APR) of 10 percent and make monthly payments, the rate per period is 0.1/12, or 0.0083.\n    - id: Per\n      type: System.Double\n      description: Required. `Double` specifies the payment period in the range 1 through <code>NPer</code>.\n    - id: NPer\n      type: System.Double\n      description: Required. `Double` specifies the total number of payment periods in the annuity. For example, if you make monthly payments on a four-year car loan, your loan has a total of 4 x 12 (or 48) payment periods.\n    - id: PV\n      type: System.Double\n      description: Required. `Double` specifies the current value of a series of future payments or receipts. For example, when you borrow money to buy a car, the loan amount is the present value to the lender of the monthly car payments you will make.\n    - id: FV\n      type: System.Double\n      description: Optional. `Double` specifying future value or cash balance you want after you have made the final payment. For example, the future value of a loan is $0 because that is its value after the final payment. However, if you want to save $50,000 over 18 years for your child's education, then $50,000 is the future value. If omitted, 0 is assumed.\n    - id: Due\n      type: Microsoft.VisualBasic.DueDate\n      description: Optional. Object of type <xref href=\"Microsoft.VisualBasic.DueDate\"></xref> that specifies when payments are due. This argument must be either <code>DueDate.EndOfPeriod</code> if payments are due at the end of the payment period, or <code>DueDate.BegOfPeriod</code> if payments are due at the beginning of the period. If omitted, <code>DueDate.EndOfPeriod</code> is assumed.\n    return:\n      type: System.Double\n      description: Returns a `Double` specifying the principal payment for a given period of an annuity based on periodic fixed payments and a fixed interest rate.\n  overload: Microsoft.VisualBasic.Financial.PPmt*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>Per</code> <=0 or <code>Per</code> > <code>NPer</code>.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualBasic/Financial.xml\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: Microsoft.VisualBasic.Financial.PV(System.Double,System.Double,System.Double,System.Double,Microsoft.VisualBasic.DueDate)\n  commentId: M:Microsoft.VisualBasic.Financial.PV(System.Double,System.Double,System.Double,System.Double,Microsoft.VisualBasic.DueDate)\n  id: PV(System.Double,System.Double,System.Double,System.Double,Microsoft.VisualBasic.DueDate)\n  parent: Microsoft.VisualBasic.Financial\n  langs:\n  - csharp\n  name: PV(Double, Double, Double, Double, DueDate)\n  nameWithType: Financial.PV(Double, Double, Double, Double, DueDate)\n  fullName: Financial.PV(Double, Double, Double, Double, DueDate)\n  type: Method\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic\n  summary: Returns a `Double` specifying the present value of an annuity based on periodic, fixed payments to be paid in the future and a fixed interest rate.\n  remarks: \"An annuity is a series of fixed cash payments made over a period of time. An annuity can be a loan (such as a home mortgage) or an investment (such as a monthly savings plan).  \\n  \\n The `Rate` and `NPer` arguments must be calculated using payment periods expressed in the same units. For example, if `Rate` is calculated using months, `NPer` must also be calculated using months.  \\n  \\n For all arguments, cash paid out (such as deposits to savings) is represented by negative numbers; cash received (such as dividend checks) is represented by positive numbers.\"\n  example:\n  - \"In this example, the `PV` function returns the present value of an $1,000,000 annuity that will provide $50,000 a year for the next 20 years. Provided are the expected annual percentage rate (`APR`), the total number of payments (`TotPmts`), the amount of each payment (`YrIncome`), the total future value of the investment (`FVal`), and a number that indicates whether each payment is made at the beginning or end of the payment period (`PayType`). Note that `YrIncome` is a negative number because it represents cash paid out from the annuity each year.  \\n  \\n [!code-vb[VbVbalrMath#25](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#25)]\"\n  syntax:\n    content: public static double PV (double Rate, double NPer, double Pmt, double FV = 0, Microsoft.VisualBasic.DueDate Due = Microsoft.VisualBasic.DueDate.EndOfPeriod);\n    parameters:\n    - id: Rate\n      type: System.Double\n      description: Required. `Double` specifies the interest rate per period. For example, if you get a car loan at an annual percentage rate (APR) of 10 percent and make monthly payments, the rate per period is 0.1/12, or 0.0083.\n    - id: NPer\n      type: System.Double\n      description: Required. `Double` specifies the total number of payment periods in the annuity. For example, if you make monthly payments on a four-year car loan, your loan has 4 x 12 (or 48) payment periods.\n    - id: Pmt\n      type: System.Double\n      description: Required. `Double` specifies the payment to be made each period. Payments usually contain principal and interest that does not change during the life of the annuity.\n    - id: FV\n      type: System.Double\n      description: Optional. `Double` specifies the future value or cash balance you want after you make the final payment. For example, the future value of a loan is $0 because that is its value after the final payment. However, if you want to save $50,000 over 18 years for your child's education, then $50,000 is the future value. If omitted, 0 is assumed.\n    - id: Due\n      type: Microsoft.VisualBasic.DueDate\n      description: Optional. Object of type <xref href=\"Microsoft.VisualBasic.DueDate\"></xref> that specifies when payments are due. This argument must be either <code>DueDate.EndOfPeriod</code> if payments are due at the end of the payment period, or <code>DueDate.BegOfPeriod</code> if payments are due at the beginning of the period. If omitted, <code>DueDate.EndOfPeriod</code> is assumed.\n    return:\n      type: System.Double\n      description: Returns a `Double` specifying the present value of an annuity based on periodic, fixed payments to be paid in the future and a fixed interest rate.\n  overload: Microsoft.VisualBasic.Financial.PV*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualBasic/Financial.xml\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: Microsoft.VisualBasic.Financial.Rate(System.Double,System.Double,System.Double,System.Double,Microsoft.VisualBasic.DueDate,System.Double)\n  commentId: M:Microsoft.VisualBasic.Financial.Rate(System.Double,System.Double,System.Double,System.Double,Microsoft.VisualBasic.DueDate,System.Double)\n  id: Rate(System.Double,System.Double,System.Double,System.Double,Microsoft.VisualBasic.DueDate,System.Double)\n  parent: Microsoft.VisualBasic.Financial\n  langs:\n  - csharp\n  name: Rate(Double, Double, Double, Double, DueDate, Double)\n  nameWithType: Financial.Rate(Double, Double, Double, Double, DueDate, Double)\n  fullName: Financial.Rate(Double, Double, Double, Double, DueDate, Double)\n  type: Method\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic\n  summary: Returns a `Double` specifying the interest rate per period for an annuity.\n  remarks: \"An annuity is a series of fixed cash payments made over a period of time. An annuity can be a loan (such as a home mortgage) or an investment (such as a monthly savings plan).  \\n  \\n For all arguments, cash paid out (such as deposits to savings) is represented by negative numbers; cash received (such as dividend checks) is represented by positive numbers.  \\n  \\n `Rate` is calculated by iteration. Starting with the value of `Guess`, `Rate` cycles through the calculation until the result is accurate to within 0.00001 percent. If `Rate` cannot find a result after 20 tries, it fails. If your guess is 10 percent and `Rate` fails, try a different value for `Guess`.\"\n  example:\n  - \"This example uses the `Rate` function to calculate the interest rate of a loan given the total number of payments (`TotPmts`), the amount of the loan payment (`Payment`), the present value or principal of the loan (`PVal`), the future value of the loan (`FVal`), a number that indicates whether the payment is due at the beginning or end of the payment period (`PayType`), and an approximation of the expected interest rate (`Guess`).  \\n  \\n [!code-vb[VbVbalrMath#2](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#2)]\"\n  syntax:\n    content: public static double Rate (double NPer, double Pmt, double PV, double FV = 0, Microsoft.VisualBasic.DueDate Due = Microsoft.VisualBasic.DueDate.EndOfPeriod, double Guess = 0.1);\n    parameters:\n    - id: NPer\n      type: System.Double\n      description: Required. `Double` specifies the total number of payment periods in the annuity. For example, if you make monthly payments on a four-year car loan, your loan has a total of 4 * 12 (or 48) payment periods.\n    - id: Pmt\n      type: System.Double\n      description: Required. `Double` specifies the payment to be made each period. Payments usually contain principal and interest that doesn't change over the life of the annuity.\n    - id: PV\n      type: System.Double\n      description: Required. `Double` specifies the present value, or value today, of a series of future payments or receipts. For example, when you borrow money to buy a car, the loan amount is the present value to the lender of the monthly car payments you will make.\n    - id: FV\n      type: System.Double\n      description: Optional. `Double` specifies the future value or cash balance you want after you make the final payment. For example, the future value of a loan is $0 because that is its value after the final payment. However, if you want to save $50,000 over 18 years for your child's education, then $50,000 is the future value. If omitted, 0 is assumed.\n    - id: Due\n      type: Microsoft.VisualBasic.DueDate\n      description: Optional. Object of type <xref href=\"Microsoft.VisualBasic.DueDate\"></xref> that specifies when payments are due. This argument must be either <code>DueDate.EndOfPeriod</code> if payments are due at the end of the payment period, or <code>DueDate.BegOfPeriod</code> if payments are due at the beginning of the period. If omitted, <code>DueDate.EndOfPeriod</code> is assumed.\n    - id: Guess\n      type: System.Double\n      description: Optional. `Double` specifying value you estimate is returned by `Rate`. If omitted, <code>Guess</code> is 0.1 (10 percent).\n    return:\n      type: System.Double\n      description: Returns a `Double` specifying the interest rate per period for an annuity.\n  overload: Microsoft.VisualBasic.Financial.Rate*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>NPer</code> <= 0.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualBasic/Financial.xml\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: Microsoft.VisualBasic.Financial.SLN(System.Double,System.Double,System.Double)\n  commentId: M:Microsoft.VisualBasic.Financial.SLN(System.Double,System.Double,System.Double)\n  id: SLN(System.Double,System.Double,System.Double)\n  parent: Microsoft.VisualBasic.Financial\n  langs:\n  - csharp\n  name: SLN(Double, Double, Double)\n  nameWithType: Financial.SLN(Double, Double, Double)\n  fullName: Financial.SLN(Double, Double, Double)\n  type: Method\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic\n  summary: Returns a `Double` specifying the straight-line depreciation of an asset for a single period.\n  remarks: The depreciation period must be expressed in the same unit as the `Life` argument. All arguments must be positive numbers.\n  example:\n  - \"This example uses the `SLN` function to return the straight-line depreciation of an asset for a single period given the asset's initial cost (`InitCost`), the salvage value at the end of the asset's useful life (`SalvageVal`), and the total life of the asset in years (`LifeTime`).  \\n  \\n [!code-vb[VbVbalrMath#3](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#3)]\"\n  syntax:\n    content: public static double SLN (double Cost, double Salvage, double Life);\n    parameters:\n    - id: Cost\n      type: System.Double\n      description: Required. `Double` specifying initial cost of the asset.\n    - id: Salvage\n      type: System.Double\n      description: Required. `Double` specifying value of the asset at the end of its useful life.\n    - id: Life\n      type: System.Double\n      description: Required. `Double` specifying length of the useful life of the asset.\n    return:\n      type: System.Double\n      description: Returns a `Double` specifying the straight-line depreciation of an asset for a single period.\n  overload: Microsoft.VisualBasic.Financial.SLN*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>Life</code> = 0.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualBasic/Financial.xml\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: Microsoft.VisualBasic.Financial.SYD(System.Double,System.Double,System.Double,System.Double)\n  commentId: M:Microsoft.VisualBasic.Financial.SYD(System.Double,System.Double,System.Double,System.Double)\n  id: SYD(System.Double,System.Double,System.Double,System.Double)\n  parent: Microsoft.VisualBasic.Financial\n  langs:\n  - csharp\n  name: SYD(Double, Double, Double, Double)\n  nameWithType: Financial.SYD(Double, Double, Double, Double)\n  fullName: Financial.SYD(Double, Double, Double, Double)\n  type: Method\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic\n  summary: Returns a `Double` specifying the sum-of-years digits depreciation of an asset for a specified period.\n  remarks: The `Life` and `Period` arguments must be expressed in the same units. For example, if `Life` is given in months, `Period` must also be given in months. All arguments must be positive numbers.\n  example:\n  - \"This example uses the `SYD` function to return the depreciation of an asset for a specified period given the asset's initial cost (`InitCost`), the salvage value at the end of the asset's useful life (`SalvageVal`), and the total life of the asset in years (`LifeTime`).  \\n  \\n [!code-vb[VbVbalrMath#3](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#3)]\"\n  syntax:\n    content: public static double SYD (double Cost, double Salvage, double Life, double Period);\n    parameters:\n    - id: Cost\n      type: System.Double\n      description: Required. `Double` specifying the initial cost of the asset.\n    - id: Salvage\n      type: System.Double\n      description: Required. `Double` specifying the value of the asset at the end of its useful life.\n    - id: Life\n      type: System.Double\n      description: Required. `Double` specifying the length of the useful life of the asset.\n    - id: Period\n      type: System.Double\n      description: Required. `Double` specifying the period for which asset depreciation is calculated.\n    return:\n      type: System.Double\n      description: Returns a `Double` specifying the sum-of-years digits depreciation of an asset for a specified period.\n  overload: Microsoft.VisualBasic.Financial.SYD*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>Salvage</code> < 0, <code>Period</code> > <code>Life</code>, or <code>Period</code> <=0.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualBasic/Financial.xml\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\nreferences:\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.ArgumentException\n  parent: System\n  isExternal: false\n  name: ArgumentException\n  nameWithType: ArgumentException\n  fullName: System.ArgumentException\n- uid: System.DivideByZeroException\n  parent: System\n  isExternal: false\n  name: DivideByZeroException\n  nameWithType: DivideByZeroException\n  fullName: System.DivideByZeroException\n- uid: Microsoft.VisualBasic.Financial.DDB(System.Double,System.Double,System.Double,System.Double,System.Double)\n  parent: Microsoft.VisualBasic.Financial\n  isExternal: false\n  name: DDB(Double, Double, Double, Double, Double)\n  nameWithType: Financial.DDB(Double, Double, Double, Double, Double)\n  fullName: Financial.DDB(Double, Double, Double, Double, Double)\n- uid: System.Double\n  parent: System\n  isExternal: false\n  name: Double\n  nameWithType: Double\n  fullName: System.Double\n- uid: Microsoft.VisualBasic.Financial.FV(System.Double,System.Double,System.Double,System.Double,Microsoft.VisualBasic.DueDate)\n  parent: Microsoft.VisualBasic.Financial\n  isExternal: false\n  name: FV(Double, Double, Double, Double, DueDate)\n  nameWithType: Financial.FV(Double, Double, Double, Double, DueDate)\n  fullName: Financial.FV(Double, Double, Double, Double, DueDate)\n- uid: Microsoft.VisualBasic.DueDate\n  parent: Microsoft.VisualBasic\n  isExternal: false\n  name: DueDate\n  nameWithType: DueDate\n  fullName: Microsoft.VisualBasic.DueDate\n- uid: Microsoft.VisualBasic.Financial.IPmt(System.Double,System.Double,System.Double,System.Double,System.Double,Microsoft.VisualBasic.DueDate)\n  parent: Microsoft.VisualBasic.Financial\n  isExternal: false\n  name: IPmt(Double, Double, Double, Double, Double, DueDate)\n  nameWithType: Financial.IPmt(Double, Double, Double, Double, Double, DueDate)\n  fullName: Financial.IPmt(Double, Double, Double, Double, Double, DueDate)\n- uid: Microsoft.VisualBasic.Financial.IRR(System.Double[]@,System.Double)\n  parent: Microsoft.VisualBasic.Financial\n  isExternal: false\n  name: IRR(Double[], Double)\n  nameWithType: Financial.IRR(Double[], Double)\n  fullName: Financial.IRR(Double[], Double)\n- uid: System.Double[]\n  parent: System\n  isExternal: false\n  name: Double[]\n  nameWithType: Double[]\n  fullName: System.Double[]\n  spec.csharp:\n  - uid: System.Double\n    name: Double\n    nameWithType: Double\n    fullName: System.Double\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: Microsoft.VisualBasic.Financial.MIRR(System.Double[]@,System.Double,System.Double)\n  parent: Microsoft.VisualBasic.Financial\n  isExternal: false\n  name: MIRR(Double[], Double, Double)\n  nameWithType: Financial.MIRR(Double[], Double, Double)\n  fullName: Financial.MIRR(Double[], Double, Double)\n- uid: Microsoft.VisualBasic.Financial.NPer(System.Double,System.Double,System.Double,System.Double,Microsoft.VisualBasic.DueDate)\n  parent: Microsoft.VisualBasic.Financial\n  isExternal: false\n  name: NPer(Double, Double, Double, Double, DueDate)\n  nameWithType: Financial.NPer(Double, Double, Double, Double, DueDate)\n  fullName: Financial.NPer(Double, Double, Double, Double, DueDate)\n- uid: Microsoft.VisualBasic.Financial.NPV(System.Double,System.Double[]@)\n  parent: Microsoft.VisualBasic.Financial\n  isExternal: false\n  name: NPV(Double, Double[])\n  nameWithType: Financial.NPV(Double, Double[])\n  fullName: Financial.NPV(Double, Double[])\n- uid: Microsoft.VisualBasic.Financial.Pmt(System.Double,System.Double,System.Double,System.Double,Microsoft.VisualBasic.DueDate)\n  parent: Microsoft.VisualBasic.Financial\n  isExternal: false\n  name: Pmt(Double, Double, Double, Double, DueDate)\n  nameWithType: Financial.Pmt(Double, Double, Double, Double, DueDate)\n  fullName: Financial.Pmt(Double, Double, Double, Double, DueDate)\n- uid: Microsoft.VisualBasic.Financial.PPmt(System.Double,System.Double,System.Double,System.Double,System.Double,Microsoft.VisualBasic.DueDate)\n  parent: Microsoft.VisualBasic.Financial\n  isExternal: false\n  name: PPmt(Double, Double, Double, Double, Double, DueDate)\n  nameWithType: Financial.PPmt(Double, Double, Double, Double, Double, DueDate)\n  fullName: Financial.PPmt(Double, Double, Double, Double, Double, DueDate)\n- uid: Microsoft.VisualBasic.Financial.PV(System.Double,System.Double,System.Double,System.Double,Microsoft.VisualBasic.DueDate)\n  parent: Microsoft.VisualBasic.Financial\n  isExternal: false\n  name: PV(Double, Double, Double, Double, DueDate)\n  nameWithType: Financial.PV(Double, Double, Double, Double, DueDate)\n  fullName: Financial.PV(Double, Double, Double, Double, DueDate)\n- uid: Microsoft.VisualBasic.Financial.Rate(System.Double,System.Double,System.Double,System.Double,Microsoft.VisualBasic.DueDate,System.Double)\n  parent: Microsoft.VisualBasic.Financial\n  isExternal: false\n  name: Rate(Double, Double, Double, Double, DueDate, Double)\n  nameWithType: Financial.Rate(Double, Double, Double, Double, DueDate, Double)\n  fullName: Financial.Rate(Double, Double, Double, Double, DueDate, Double)\n- uid: Microsoft.VisualBasic.Financial.SLN(System.Double,System.Double,System.Double)\n  parent: Microsoft.VisualBasic.Financial\n  isExternal: false\n  name: SLN(Double, Double, Double)\n  nameWithType: Financial.SLN(Double, Double, Double)\n  fullName: Financial.SLN(Double, Double, Double)\n- uid: Microsoft.VisualBasic.Financial.SYD(System.Double,System.Double,System.Double,System.Double)\n  parent: Microsoft.VisualBasic.Financial\n  isExternal: false\n  name: SYD(Double, Double, Double, Double)\n  nameWithType: Financial.SYD(Double, Double, Double, Double)\n  fullName: Financial.SYD(Double, Double, Double, Double)\n- uid: Microsoft.VisualBasic.Financial.DDB*\n  parent: Microsoft.VisualBasic.Financial\n  isExternal: false\n  name: DDB\n  nameWithType: Financial.DDB\n  fullName: Financial.DDB\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualBasic/Financial.xml\n- uid: Microsoft.VisualBasic.Financial.FV*\n  parent: Microsoft.VisualBasic.Financial\n  isExternal: false\n  name: FV\n  nameWithType: Financial.FV\n  fullName: Financial.FV\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualBasic/Financial.xml\n- uid: Microsoft.VisualBasic.Financial.IPmt*\n  parent: Microsoft.VisualBasic.Financial\n  isExternal: false\n  name: IPmt\n  nameWithType: Financial.IPmt\n  fullName: Financial.IPmt\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualBasic/Financial.xml\n- uid: Microsoft.VisualBasic.Financial.IRR*\n  parent: Microsoft.VisualBasic.Financial\n  isExternal: false\n  name: IRR\n  nameWithType: Financial.IRR\n  fullName: Financial.IRR\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualBasic/Financial.xml\n- uid: Microsoft.VisualBasic.Financial.MIRR*\n  parent: Microsoft.VisualBasic.Financial\n  isExternal: false\n  name: MIRR\n  nameWithType: Financial.MIRR\n  fullName: Financial.MIRR\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualBasic/Financial.xml\n- uid: Microsoft.VisualBasic.Financial.NPer*\n  parent: Microsoft.VisualBasic.Financial\n  isExternal: false\n  name: NPer\n  nameWithType: Financial.NPer\n  fullName: Financial.NPer\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualBasic/Financial.xml\n- uid: Microsoft.VisualBasic.Financial.NPV*\n  parent: Microsoft.VisualBasic.Financial\n  isExternal: false\n  name: NPV\n  nameWithType: Financial.NPV\n  fullName: Financial.NPV\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualBasic/Financial.xml\n- uid: Microsoft.VisualBasic.Financial.Pmt*\n  parent: Microsoft.VisualBasic.Financial\n  isExternal: false\n  name: Pmt\n  nameWithType: Financial.Pmt\n  fullName: Financial.Pmt\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualBasic/Financial.xml\n- uid: Microsoft.VisualBasic.Financial.PPmt*\n  parent: Microsoft.VisualBasic.Financial\n  isExternal: false\n  name: PPmt\n  nameWithType: Financial.PPmt\n  fullName: Financial.PPmt\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualBasic/Financial.xml\n- uid: Microsoft.VisualBasic.Financial.PV*\n  parent: Microsoft.VisualBasic.Financial\n  isExternal: false\n  name: PV\n  nameWithType: Financial.PV\n  fullName: Financial.PV\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualBasic/Financial.xml\n- uid: Microsoft.VisualBasic.Financial.Rate*\n  parent: Microsoft.VisualBasic.Financial\n  isExternal: false\n  name: Rate\n  nameWithType: Financial.Rate\n  fullName: Financial.Rate\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualBasic/Financial.xml\n- uid: Microsoft.VisualBasic.Financial.SLN*\n  parent: Microsoft.VisualBasic.Financial\n  isExternal: false\n  name: SLN\n  nameWithType: Financial.SLN\n  fullName: Financial.SLN\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualBasic/Financial.xml\n- uid: Microsoft.VisualBasic.Financial.SYD*\n  parent: Microsoft.VisualBasic.Financial\n  isExternal: false\n  name: SYD\n  nameWithType: Financial.SYD\n  fullName: Financial.SYD\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualBasic/Financial.xml\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: Object.Equals(Object)\n  fullName: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: Object.GetHashCode()\n  fullName: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: false\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: false\n  name: ToString()\n  nameWithType: Object.ToString()\n  fullName: Object.ToString()\n"}