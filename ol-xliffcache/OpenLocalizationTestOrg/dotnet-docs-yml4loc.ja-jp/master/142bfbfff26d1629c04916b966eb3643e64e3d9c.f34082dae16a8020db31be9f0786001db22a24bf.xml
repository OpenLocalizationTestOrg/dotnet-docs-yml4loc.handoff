{"nodes":[{"content":"Defines a callback method for notifying applications before a cached item is removed from the cache.","nodes":[{"pos":[0,100],"content":"Defines a callback method for notifying applications before a cached item is removed from the cache.","nodes":[{"content":"Defines a callback method for notifying applications before a cached item is removed from the cache.","pos":[0,100]}]}],"pos":[410,511],"yaml":true},{"content":"When an object expires in the cache, ASP.NET calls the <xref:System.Web.Caching.CacheItemUpdateCallback> method with the key for the cache item and the reason you might want to update the item. The remaining parameters of this method are out parameters. You supply the new cached item and optional expiration and dependency values to use when refreshing the cached item.  \n  \n The update callback is not called if the cached item is explicitly removed by using a call to <xref:System.Web.Caching.Cache.Remove%2A>.  \n  \n If you want the cached item to be removed from the cache, you must return `null` in the `expensiveObject` parameter. Otherwise, you return a reference to the new cached data by using the `expensiveObject` parameter. If you do not specify expiration or dependency values, the item will be removed from the cache only when memory is needed.  \n  \n If the callback method throws an exception, ASP.NET suppresses the exception and removes the cached value.","nodes":[{"pos":[0,370],"content":"When an object expires in the cache, ASP.NET calls the <xref:System.Web.Caching.CacheItemUpdateCallback> method with the key for the cache item and the reason you might want to update the item. The remaining parameters of this method are out parameters. You supply the new cached item and optional expiration and dependency values to use when refreshing the cached item.","nodes":[{"content":"When an object expires in the cache, ASP.NET calls the <xref:System.Web.Caching.CacheItemUpdateCallback> method with the key for the cache item and the reason you might want to update the item. The remaining parameters of this method are out parameters. You supply the new cached item and optional expiration and dependency values to use when refreshing the cached item.","pos":[0,370],"nodes":[{"content":"When an object expires in the cache, ASP.NET calls the <ph id=\"ph1\">&lt;xref:System.Web.Caching.CacheItemUpdateCallback&gt;</ph> method with the key for the cache item and the reason you might want to update the item.","pos":[0,193],"source":"When an object expires in the cache, ASP.NET calls the <xref:System.Web.Caching.CacheItemUpdateCallback> method with the key for the cache item and the reason you might want to update the item."},{"content":"The remaining parameters of this method are out parameters.","pos":[194,253]},{"content":"You supply the new cached item and optional expiration and dependency values to use when refreshing the cached item.","pos":[254,370]}]}]},{"pos":[377,513],"content":"The update callback is not called if the cached item is explicitly removed by using a call to <xref:System.Web.Caching.Cache.Remove%2A>.","nodes":[{"content":"The update callback is not called if the cached item is explicitly removed by using a call to <ph id=\"ph1\">&lt;xref:System.Web.Caching.Cache.Remove%2A&gt;</ph>.","pos":[0,136],"source":"The update callback is not called if the cached item is explicitly removed by using a call to <xref:System.Web.Caching.Cache.Remove%2A>."}]},{"pos":[520,858],"content":"If you want the cached item to be removed from the cache, you must return `null` in the `expensiveObject` parameter. Otherwise, you return a reference to the new cached data by using the `expensiveObject` parameter. If you do not specify expiration or dependency values, the item will be removed from the cache only when memory is needed.","nodes":[{"content":"If you want the cached item to be removed from the cache, you must return <ph id=\"ph1\">`null`</ph> in the <ph id=\"ph2\">`expensiveObject`</ph> parameter.","pos":[0,116],"source":"If you want the cached item to be removed from the cache, you must return `null` in the `expensiveObject` parameter."},{"content":"Otherwise, you return a reference to the new cached data by using the <ph id=\"ph1\">`expensiveObject`</ph> parameter.","pos":[117,215],"source":" Otherwise, you return a reference to the new cached data by using the `expensiveObject` parameter."},{"content":"If you do not specify expiration or dependency values, the item will be removed from the cache only when memory is needed.","pos":[216,338]}]},{"pos":[865,971],"content":"If the callback method throws an exception, ASP.NET suppresses the exception and removes the cached value.","nodes":[{"content":"If the callback method throws an exception, ASP.NET suppresses the exception and removes the cached value.","pos":[0,106]}]}],"pos":[522,1502],"yaml":true,"extradata":"MT"}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Web.Caching.CacheItemUpdateCallback\n  commentId: T:System.Web.Caching.CacheItemUpdateCallback\n  id: CacheItemUpdateCallback\n  langs:\n  - csharp\n  name: CacheItemUpdateCallback\n  nameWithType: CacheItemUpdateCallback\n  fullName: System.Web.Caching.CacheItemUpdateCallback\n  type: Delegate\n  assemblies:\n  - System.Web\n  namespace: System.Web.Caching\n  summary: Defines a callback method for notifying applications before a cached item is removed from the cache.\n  remarks: \"When an object expires in the cache, ASP.NET calls the <xref:System.Web.Caching.CacheItemUpdateCallback> method with the key for the cache item and the reason you might want to update the item. The remaining parameters of this method are out parameters. You supply the new cached item and optional expiration and dependency values to use when refreshing the cached item.  \\n  \\n The update callback is not called if the cached item is explicitly removed by using a call to <xref:System.Web.Caching.Cache.Remove%2A>.  \\n  \\n If you want the cached item to be removed from the cache, you must return `null` in the `expensiveObject` parameter. Otherwise, you return a reference to the new cached data by using the `expensiveObject` parameter. If you do not specify expiration or dependency values, the item will be removed from the cache only when memory is needed.  \\n  \\n If the callback method throws an exception, ASP.NET suppresses the exception and removes the cached value.\"\n  syntax:\n    content: public delegate void CacheItemUpdateCallback(string key, CacheItemUpdateReason reason, out object expensiveObject, out CacheDependency dependency, out DateTime absoluteExpiration, out TimeSpan slidingExpiration);\n  inheritance:\n  - System.Object\n  - System.Delegate\n  extensionMethods:\n  - System.Reflection.RuntimeReflectionExtensions.GetMethodInfo(System.Delegate)\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Web.Caching/CacheItemUpdateCallback.xml\n  ms.technology:\n  - dotnet-webforms\n  manager: wpickett\nreferences:\n- uid: System.Delegate\n  parent: System\n  isExternal: false\n  name: Delegate\n  nameWithType: Delegate\n  fullName: System.Delegate\n- uid: System.Reflection.RuntimeReflectionExtensions.GetMethodInfo(System.Delegate)\n  parent: System.Reflection.RuntimeReflectionExtensions\n  isExternal: false\n  name: GetMethodInfo(Delegate)\n  nameWithType: RuntimeReflectionExtensions.GetMethodInfo(Delegate)\n  fullName: RuntimeReflectionExtensions.GetMethodInfo(Delegate)\n"}