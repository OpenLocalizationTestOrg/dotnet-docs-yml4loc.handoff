{"nodes":[{"content":"Manages the execution context for the current thread. This class cannot be inherited.","nodes":[{"pos":[0,85],"content":"Manages the execution context for the current thread. This class cannot be inherited.","nodes":[{"content":"Manages the execution context for the current thread. This class cannot be inherited.","pos":[0,85],"nodes":[{"content":"Manages the execution context for the current thread.","pos":[0,53]},{"content":"This class cannot be inherited.","pos":[54,85]}]}]}],"pos":[971,1057],"yaml":true},{"content":"The <xref:System.Threading.ExecutionContext> class provides a single container for all information relevant to a logical thread of execution. This includes security context, call context, and synchronization context.  \n  \n The <xref:System.Threading.ExecutionContext> class provides the functionality for user code to capture and transfer this context across user-defined asynchronous points. The common language runtime ensures that the <xref:System.Threading.ExecutionContext> is consistently transferred across runtime-defined asynchronous points within the managed process.  \n  \n An execution context is the managed equivalent of a COM apartment. Within an application domain, the entire execution context must be transferred whenever a thread is transferred. This situation occurs during transfers made by the <xref:System.Threading.Thread.Start%2A?displayProperty=fullName> method, most thread pool operations, and Windows Forms thread marshaling through the Windows message pump. It does not occur in unsafe thread pool operations (such as the <xref:System.Threading.ThreadPool.UnsafeQueueUserWorkItem%2A> method), which do not transfer the compressed stack. Wherever the compressed stack flows, the managed principal, synchronization, locale, and user context also flow. The <xref:System.Threading.ExecutionContext> class provides the <xref:System.Threading.ExecutionContext.Capture%2A> and <xref:System.Threading.ExecutionContext.CreateCopy%2A> methods to get the execution context and the <xref:System.Threading.ExecutionContext.Run%2A> method to set the execution context for the current thread.  \n  \n An <xref:System.Threading.ExecutionContext> that is associated with a thread cannot be set on another thread. Attempting to do so will result in an exception being thrown. To propagate the <xref:System.Threading.ExecutionContext> from one thread to another, make a copy of the <xref:System.Threading.ExecutionContext>.  \n  \n Internally, the <xref:System.Threading.ExecutionContext> stores all data that is associated with the <xref:System.Runtime.Remoting.Messaging.LogicalCallContext>. This allows the <xref:System.Runtime.Remoting.Messaging.LogicalCallContext> data to be propagated when the <xref:System.Threading.ExecutionContext> is copied and transferred.","nodes":[{"pos":[0,216],"content":"The <xref:System.Threading.ExecutionContext> class provides a single container for all information relevant to a logical thread of execution. This includes security context, call context, and synchronization context.","nodes":[{"content":"The <xref:System.Threading.ExecutionContext> class provides a single container for all information relevant to a logical thread of execution. This includes security context, call context, and synchronization context.","pos":[0,216],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Threading.ExecutionContext&gt;</ph> class provides a single container for all information relevant to a logical thread of execution.","pos":[0,141],"source":"The <xref:System.Threading.ExecutionContext> class provides a single container for all information relevant to a logical thread of execution."},{"content":"This includes security context, call context, and synchronization context.","pos":[142,216]}]}]},{"pos":[223,577],"content":"The <xref:System.Threading.ExecutionContext> class provides the functionality for user code to capture and transfer this context across user-defined asynchronous points. The common language runtime ensures that the <xref:System.Threading.ExecutionContext> is consistently transferred across runtime-defined asynchronous points within the managed process.","nodes":[{"content":"The <xref:System.Threading.ExecutionContext> class provides the functionality for user code to capture and transfer this context across user-defined asynchronous points. The common language runtime ensures that the <xref:System.Threading.ExecutionContext> is consistently transferred across runtime-defined asynchronous points within the managed process.","pos":[0,354],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Threading.ExecutionContext&gt;</ph> class provides the functionality for user code to capture and transfer this context across user-defined asynchronous points.","pos":[0,169],"source":"The <xref:System.Threading.ExecutionContext> class provides the functionality for user code to capture and transfer this context across user-defined asynchronous points."},{"content":"The common language runtime ensures that the <ph id=\"ph1\">&lt;xref:System.Threading.ExecutionContext&gt;</ph> is consistently transferred across runtime-defined asynchronous points within the managed process.","pos":[170,354],"source":" The common language runtime ensures that the <xref:System.Threading.ExecutionContext> is consistently transferred across runtime-defined asynchronous points within the managed process."}]}]},{"pos":[584,1606],"content":"An execution context is the managed equivalent of a COM apartment. Within an application domain, the entire execution context must be transferred whenever a thread is transferred. This situation occurs during transfers made by the <xref:System.Threading.Thread.Start%2A?displayProperty=fullName> method, most thread pool operations, and Windows Forms thread marshaling through the Windows message pump. It does not occur in unsafe thread pool operations (such as the <xref:System.Threading.ThreadPool.UnsafeQueueUserWorkItem%2A> method), which do not transfer the compressed stack. Wherever the compressed stack flows, the managed principal, synchronization, locale, and user context also flow. The <xref:System.Threading.ExecutionContext> class provides the <xref:System.Threading.ExecutionContext.Capture%2A> and <xref:System.Threading.ExecutionContext.CreateCopy%2A> methods to get the execution context and the <xref:System.Threading.ExecutionContext.Run%2A> method to set the execution context for the current thread.","nodes":[{"content":"An execution context is the managed equivalent of a COM apartment. Within an application domain, the entire execution context must be transferred whenever a thread is transferred. This situation occurs during transfers made by the <xref:System.Threading.Thread.Start%2A?displayProperty=fullName> method, most thread pool operations, and Windows Forms thread marshaling through the Windows message pump. It does not occur in unsafe thread pool operations (such as the <xref:System.Threading.ThreadPool.UnsafeQueueUserWorkItem%2A> method), which do not transfer the compressed stack. Wherever the compressed stack flows, the managed principal, synchronization, locale, and user context also flow. The <xref:System.Threading.ExecutionContext> class provides the <xref:System.Threading.ExecutionContext.Capture%2A> and <xref:System.Threading.ExecutionContext.CreateCopy%2A> methods to get the execution context and the <xref:System.Threading.ExecutionContext.Run%2A> method to set the execution context for the current thread.","pos":[0,1022],"nodes":[{"content":"An execution context is the managed equivalent of a COM apartment.","pos":[0,66]},{"content":"Within an application domain, the entire execution context must be transferred whenever a thread is transferred.","pos":[67,179]},{"content":"This situation occurs during transfers made by the <ph id=\"ph1\">&lt;xref:System.Threading.Thread.Start%2A?displayProperty=fullName&gt;</ph> method, most thread pool operations, and Windows Forms thread marshaling through the Windows message pump.","pos":[180,402],"source":" This situation occurs during transfers made by the <xref:System.Threading.Thread.Start%2A?displayProperty=fullName> method, most thread pool operations, and Windows Forms thread marshaling through the Windows message pump."},{"content":"It does not occur in unsafe thread pool operations (such as the <ph id=\"ph1\">&lt;xref:System.Threading.ThreadPool.UnsafeQueueUserWorkItem%2A&gt;</ph> method), which do not transfer the compressed stack.","pos":[403,581],"source":" It does not occur in unsafe thread pool operations (such as the <xref:System.Threading.ThreadPool.UnsafeQueueUserWorkItem%2A> method), which do not transfer the compressed stack."},{"content":"Wherever the compressed stack flows, the managed principal, synchronization, locale, and user context also flow.","pos":[582,694]},{"content":"The <ph id=\"ph1\">&lt;xref:System.Threading.ExecutionContext&gt;</ph> class provides the <ph id=\"ph2\">&lt;xref:System.Threading.ExecutionContext.Capture%2A&gt;</ph> and <ph id=\"ph3\">&lt;xref:System.Threading.ExecutionContext.CreateCopy%2A&gt;</ph> methods to get the execution context and the <ph id=\"ph4\">&lt;xref:System.Threading.ExecutionContext.Run%2A&gt;</ph> method to set the execution context for the current thread.","pos":[695,1022],"source":" The <xref:System.Threading.ExecutionContext> class provides the <xref:System.Threading.ExecutionContext.Capture%2A> and <xref:System.Threading.ExecutionContext.CreateCopy%2A> methods to get the execution context and the <xref:System.Threading.ExecutionContext.Run%2A> method to set the execution context for the current thread."}]}]},{"pos":[1613,1931],"content":"An <xref:System.Threading.ExecutionContext> that is associated with a thread cannot be set on another thread. Attempting to do so will result in an exception being thrown. To propagate the <xref:System.Threading.ExecutionContext> from one thread to another, make a copy of the <xref:System.Threading.ExecutionContext>.","nodes":[{"content":"An <xref:System.Threading.ExecutionContext> that is associated with a thread cannot be set on another thread. Attempting to do so will result in an exception being thrown. To propagate the <xref:System.Threading.ExecutionContext> from one thread to another, make a copy of the <xref:System.Threading.ExecutionContext>.","pos":[0,318],"nodes":[{"content":"An <ph id=\"ph1\">&lt;xref:System.Threading.ExecutionContext&gt;</ph> that is associated with a thread cannot be set on another thread.","pos":[0,109],"source":"An <xref:System.Threading.ExecutionContext> that is associated with a thread cannot be set on another thread."},{"content":"Attempting to do so will result in an exception being thrown.","pos":[110,171]},{"content":"To propagate the <ph id=\"ph1\">&lt;xref:System.Threading.ExecutionContext&gt;</ph> from one thread to another, make a copy of the <ph id=\"ph2\">&lt;xref:System.Threading.ExecutionContext&gt;</ph>.","pos":[172,318],"source":" To propagate the <xref:System.Threading.ExecutionContext> from one thread to another, make a copy of the <xref:System.Threading.ExecutionContext>."}]}]},{"pos":[1938,2274],"content":"Internally, the <xref:System.Threading.ExecutionContext> stores all data that is associated with the <xref:System.Runtime.Remoting.Messaging.LogicalCallContext>. This allows the <xref:System.Runtime.Remoting.Messaging.LogicalCallContext> data to be propagated when the <xref:System.Threading.ExecutionContext> is copied and transferred.","nodes":[{"content":"Internally, the <xref:System.Threading.ExecutionContext> stores all data that is associated with the <xref:System.Runtime.Remoting.Messaging.LogicalCallContext>. This allows the <xref:System.Runtime.Remoting.Messaging.LogicalCallContext> data to be propagated when the <xref:System.Threading.ExecutionContext> is copied and transferred.","pos":[0,336],"nodes":[{"content":"Internally, the <ph id=\"ph1\">&lt;xref:System.Threading.ExecutionContext&gt;</ph> stores all data that is associated with the <ph id=\"ph2\">&lt;xref:System.Runtime.Remoting.Messaging.LogicalCallContext&gt;</ph>.","pos":[0,161],"source":"Internally, the <xref:System.Threading.ExecutionContext> stores all data that is associated with the <xref:System.Runtime.Remoting.Messaging.LogicalCallContext>."},{"content":"This allows the <ph id=\"ph1\">&lt;xref:System.Runtime.Remoting.Messaging.LogicalCallContext&gt;</ph> data to be propagated when the <ph id=\"ph2\">&lt;xref:System.Threading.ExecutionContext&gt;</ph> is copied and transferred.","pos":[162,336],"source":" This allows the <xref:System.Runtime.Remoting.Messaging.LogicalCallContext> data to be propagated when the <xref:System.Threading.ExecutionContext> is copied and transferred."}]}]}],"pos":[1068,3353],"yaml":true,"extradata":"MT"},{"content":"Captures the execution context from the current thread.","nodes":[{"pos":[0,55],"content":"Captures the execution context from the current thread.","nodes":[{"content":"Captures the execution context from the current thread.","pos":[0,55]}]}],"pos":[5202,5258],"yaml":true},{"content":"The captured execution context can be used as the `executionContext` parameter for the <xref:System.Threading.ExecutionContext.Run%2A> method.","nodes":[{"pos":[0,142],"content":"The captured execution context can be used as the <ph id=\"ph1\">`executionContext`</ph> parameter for the <ph id=\"ph2\">&lt;xref:System.Threading.ExecutionContext.Run%2A&gt;</ph> method.","source":"The captured execution context can be used as the `executionContext` parameter for the <xref:System.Threading.ExecutionContext.Run%2A> method."}],"pos":[5269,5412],"yaml":true,"extradata":"MT"},{"content":"An <xref href=\"System.Threading.ExecutionContext\"></xref> object representing the execution context for the current thread.","nodes":[{"pos":[0,123],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Threading.ExecutionContext\"&gt;&lt;/xref&gt;</ph> object representing the execution context for the current thread.","source":"An <xref href=\"System.Threading.ExecutionContext\"></xref> object representing the execution context for the current thread."}],"pos":[5591,5715],"yaml":true},{"content":"Creates a copy of the current execution context.","nodes":[{"pos":[0,48],"content":"Creates a copy of the current execution context.","nodes":[{"content":"Creates a copy of the current execution context.","pos":[0,48]}]}],"pos":[7140,7189],"yaml":true},{"content":"This method is useful for propagating an execution context from one thread to another.","nodes":[{"pos":[0,86],"content":"This method is useful for propagating an execution context from one thread to another.","nodes":[{"content":"This method is useful for propagating an execution context from one thread to another.","pos":[0,86]}]}],"pos":[7200,7287],"yaml":true,"extradata":"MT"},{"content":"An <xref href=\"System.Threading.ExecutionContext\"></xref> object representing the current execution context.","nodes":[{"pos":[0,108],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Threading.ExecutionContext\"&gt;&lt;/xref&gt;</ph> object representing the current execution context.","source":"An <xref href=\"System.Threading.ExecutionContext\"></xref> object representing the current execution context."}],"pos":[7462,7571],"yaml":true},{"content":"This context cannot be copied because it is used. Only newly captured contexts can be copied.","nodes":[{"pos":[0,93],"content":"This context cannot be copied because it is used. Only newly captured contexts can be copied.","nodes":[{"content":"This context cannot be copied because it is used. Only newly captured contexts can be copied.","pos":[0,93],"nodes":[{"content":"This context cannot be copied because it is used.","pos":[0,49]},{"content":"Only newly captured contexts can be copied.","pos":[50,93]}]}]}],"pos":[7753,7847],"yaml":true},{"content":"Releases all resources used by the current instance of the <xref href=\"System.Threading.ExecutionContext\"></xref> class.","nodes":[{"pos":[0,120],"content":"Releases all resources used by the current instance of the <ph id=\"ph1\">&lt;xref href=\"System.Threading.ExecutionContext\"&gt;&lt;/xref&gt;</ph> class.","source":"Releases all resources used by the current instance of the <xref href=\"System.Threading.ExecutionContext\"></xref> class."}],"pos":[8998,9119],"yaml":true},{"content":"Call `Dispose` when you are finished using the <xref:System.Threading.ExecutionContext>. The `Dispose` method leaves the <xref:System.Threading.ExecutionContext> in an unusable state. After calling `Dispose`, you must release all references to the <xref:System.Threading.ExecutionContext> so the garbage collector can reclaim the memory that the <xref:System.Threading.ExecutionContext> was occupying.  \n  \n For more information, see [Cleaning Up Unmanaged Resources](~/docs/standard/garbage-collection/unmanaged.md) and [Implementing a Dispose Method](~/docs/standard/garbage-collection/implementing-dispose.md).  \n  \n> [!NOTE]\n>  Always call `Dispose` before you release your last reference to the <xref:System.Threading.ExecutionContext>. Otherwise, the resources it is using will not be freed until the garbage collector calls the <xref:System.Threading.ExecutionContext> object's `Finalize` method.","nodes":[{"pos":[0,401],"content":"Call `Dispose` when you are finished using the <xref:System.Threading.ExecutionContext>. The `Dispose` method leaves the <xref:System.Threading.ExecutionContext> in an unusable state. After calling `Dispose`, you must release all references to the <xref:System.Threading.ExecutionContext> so the garbage collector can reclaim the memory that the <xref:System.Threading.ExecutionContext> was occupying.","nodes":[{"content":"Call <ph id=\"ph1\">`Dispose`</ph> when you are finished using the <ph id=\"ph2\">&lt;xref:System.Threading.ExecutionContext&gt;</ph>.","pos":[0,88],"source":"Call `Dispose` when you are finished using the <xref:System.Threading.ExecutionContext>."},{"content":"The <ph id=\"ph1\">`Dispose`</ph> method leaves the <ph id=\"ph2\">&lt;xref:System.Threading.ExecutionContext&gt;</ph> in an unusable state.","pos":[89,183],"source":" The `Dispose` method leaves the <xref:System.Threading.ExecutionContext> in an unusable state."},{"content":"After calling <ph id=\"ph1\">`Dispose`</ph>, you must release all references to the <ph id=\"ph2\">&lt;xref:System.Threading.ExecutionContext&gt;</ph> so the garbage collector can reclaim the memory that the <ph id=\"ph3\">&lt;xref:System.Threading.ExecutionContext&gt;</ph> was occupying.","pos":[184,401],"source":" After calling `Dispose`, you must release all references to the <xref:System.Threading.ExecutionContext> so the garbage collector can reclaim the memory that the <xref:System.Threading.ExecutionContext> was occupying."}]},{"pos":[408,613],"content":"For more information, see <bpt id=\"p1\">[</bpt>Cleaning Up Unmanaged Resources<ept id=\"p1\">](~/docs/standard/garbage-collection/unmanaged.md)</ept> and <bpt id=\"p2\">[</bpt>Implementing a Dispose Method<ept id=\"p2\">](~/docs/standard/garbage-collection/implementing-dispose.md)</ept>.","source":"For more information, see [Cleaning Up Unmanaged Resources](~/docs/standard/garbage-collection/unmanaged.md) and [Implementing a Dispose Method](~/docs/standard/garbage-collection/implementing-dispose.md)."},{"pos":[621,903],"content":"[!NOTE]\n Always call `Dispose` before you release your last reference to the <xref:System.Threading.ExecutionContext>. Otherwise, the resources it is using will not be freed until the garbage collector calls the <xref:System.Threading.ExecutionContext> object's `Finalize` method.","leadings":["","> "],"nodes":[{"content":" Always call `Dispose` before you release your last reference to the <xref:System.Threading.ExecutionContext>. Otherwise, the resources it is using will not be freed until the garbage collector calls the <xref:System.Threading.ExecutionContext> object's `Finalize` method.","pos":[8,280],"nodes":[{"content":"Always call <ph id=\"ph1\">`Dispose`</ph> before you release your last reference to the <ph id=\"ph2\">&lt;xref:System.Threading.ExecutionContext&gt;</ph>.","pos":[1,110],"source":" Always call `Dispose` before you release your last reference to the <xref:System.Threading.ExecutionContext>."},{"content":"Otherwise, the resources it is using will not be freed until the garbage collector calls the <ph id=\"ph1\">&lt;xref:System.Threading.ExecutionContext&gt;</ph> object's <ph id=\"ph2\">`Finalize`</ph> method.","pos":[111,272],"source":" Otherwise, the resources it is using will not be freed until the garbage collector calls the <xref:System.Threading.ExecutionContext> object's `Finalize` method."}]}]}],"pos":[9130,10041],"yaml":true,"extradata":"MT"},{"content":"Sets the specified <xref href=\"System.Runtime.Serialization.SerializationInfo\"></xref> object with the logical context information needed to recreate an instance of the current execution context.","nodes":[{"pos":[0,195],"content":"Sets the specified <ph id=\"ph1\">&lt;xref href=\"System.Runtime.Serialization.SerializationInfo\"&gt;&lt;/xref&gt;</ph> object with the logical context information needed to recreate an instance of the current execution context.","source":"Sets the specified <xref href=\"System.Runtime.Serialization.SerializationInfo\"></xref> object with the logical context information needed to recreate an instance of the current execution context."}],"pos":[11736,11932],"yaml":true},{"content":"<xref:System.Threading.ExecutionContext.GetObjectData%2A> sets a <xref:System.Runtime.Serialization.SerializationInfo> with the logical call context information. During deserialization, the execution context object is reconstituted from the <xref:System.Runtime.Serialization.SerializationInfo> transmitted over the stream.  \n  \n For more information, see <xref:System.Runtime.Serialization.SerializationInfo>.","nodes":[{"pos":[0,323],"content":"<xref:System.Threading.ExecutionContext.GetObjectData%2A> sets a <xref:System.Runtime.Serialization.SerializationInfo> with the logical call context information. During deserialization, the execution context object is reconstituted from the <xref:System.Runtime.Serialization.SerializationInfo> transmitted over the stream.","nodes":[{"content":"<xref:System.Threading.ExecutionContext.GetObjectData%2A> sets a <xref:System.Runtime.Serialization.SerializationInfo> with the logical call context information. During deserialization, the execution context object is reconstituted from the <xref:System.Runtime.Serialization.SerializationInfo> transmitted over the stream.","pos":[0,323],"nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Threading.ExecutionContext.GetObjectData%2A&gt;</ph> sets a <ph id=\"ph2\">&lt;xref:System.Runtime.Serialization.SerializationInfo&gt;</ph> with the logical call context information.","pos":[0,161],"source":"<xref:System.Threading.ExecutionContext.GetObjectData%2A> sets a <xref:System.Runtime.Serialization.SerializationInfo> with the logical call context information."},{"content":"During deserialization, the execution context object is reconstituted from the <ph id=\"ph1\">&lt;xref:System.Runtime.Serialization.SerializationInfo&gt;</ph> transmitted over the stream.","pos":[162,323],"source":" During deserialization, the execution context object is reconstituted from the <xref:System.Runtime.Serialization.SerializationInfo> transmitted over the stream."}]}]},{"pos":[330,410],"content":"For more information, see <xref:System.Runtime.Serialization.SerializationInfo>.","nodes":[{"content":"For more information, see <ph id=\"ph1\">&lt;xref:System.Runtime.Serialization.SerializationInfo&gt;</ph>.","pos":[0,80],"source":"For more information, see <xref:System.Runtime.Serialization.SerializationInfo>."}]}],"pos":[11943,12358],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Runtime.Serialization.SerializationInfo\"></xref> object to be populated with serialization information.","nodes":[{"pos":[0,126],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Runtime.Serialization.SerializationInfo\"&gt;&lt;/xref&gt;</ph> object to be populated with serialization information.","source":"The <xref href=\"System.Runtime.Serialization.SerializationInfo\"></xref> object to be populated with serialization information."}],"pos":[12677,12804],"yaml":true},{"content":"The <xref href=\"System.Runtime.Serialization.StreamingContext\"></xref> structure representing the destination context of the serialization.","nodes":[{"pos":[0,139],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Runtime.Serialization.StreamingContext\"&gt;&lt;/xref&gt;</ph> structure representing the destination context of the serialization.","source":"The <xref href=\"System.Runtime.Serialization.StreamingContext\"></xref> structure representing the destination context of the serialization."}],"pos":[12899,13039],"yaml":true},{"content":"<code>info</code> is `null`.","nodes":[{"pos":[0,28],"content":"<ph id=\"ph1\">&lt;code&gt;info&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>info</code> is `null`."}],"pos":[13216,13245],"yaml":true},{"content":"Indicates whether the flow of the execution context is currently suppressed.","nodes":[{"pos":[0,76],"content":"Indicates whether the flow of the execution context is currently suppressed.","nodes":[{"content":"Indicates whether the flow of the execution context is currently suppressed.","pos":[0,76]}]}],"pos":[14499,14576],"yaml":true},{"content":"The <xref:System.Threading.ExecutionContext.IsFlowSuppressed%2A> method is used by infrastructure components to determine whether to transfer the <xref:System.Threading.ExecutionContext> during asynchronous operations.","nodes":[{"pos":[0,218],"content":"The <xref:System.Threading.ExecutionContext.IsFlowSuppressed%2A> method is used by infrastructure components to determine whether to transfer the <xref:System.Threading.ExecutionContext> during asynchronous operations.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Threading.ExecutionContext.IsFlowSuppressed%2A&gt;</ph> method is used by infrastructure components to determine whether to transfer the <ph id=\"ph2\">&lt;xref:System.Threading.ExecutionContext&gt;</ph> during asynchronous operations.","pos":[0,218],"source":"The <xref:System.Threading.ExecutionContext.IsFlowSuppressed%2A> method is used by infrastructure components to determine whether to transfer the <xref:System.Threading.ExecutionContext> during asynchronous operations."}]}],"pos":[14587,14806],"yaml":true,"extradata":"MT"},{"content":"`true` if the flow is suppressed; otherwise, `false`.","nodes":[{"pos":[0,53],"content":"<ph id=\"ph1\">`true`</ph> if the flow is suppressed; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` if the flow is suppressed; otherwise, `false`."}],"pos":[14946,15002],"yaml":true},{"content":"Restores the flow of the execution context across asynchronous threads.","nodes":[{"pos":[0,71],"content":"Restores the flow of the execution context across asynchronous threads.","nodes":[{"content":"Restores the flow of the execution context across asynchronous threads.","pos":[0,71]}]}],"pos":[16241,16313],"yaml":true},{"content":"<xref:System.Threading.ExecutionContext.RestoreFlow%2A> reverses the effect of a prior <xref:System.Threading.ExecutionContext.SuppressFlow%2A> method call.  \n  \n This method is called by the <xref:System.Threading.AsyncFlowControl.Undo%2A> method of the <xref:System.Threading.AsyncFlowControl> structure returned by the <xref:System.Threading.ExecutionContext.SuppressFlow%2A> method.  You should use the <xref:System.Threading.AsyncFlowControl.Undo%2A> method to restore the flow of the execution context, not the <xref:System.Threading.ExecutionContext.RestoreFlow%2A> method.","nodes":[{"pos":[0,156],"content":"<xref:System.Threading.ExecutionContext.RestoreFlow%2A> reverses the effect of a prior <xref:System.Threading.ExecutionContext.SuppressFlow%2A> method call.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Threading.ExecutionContext.RestoreFlow%2A&gt;</ph> reverses the effect of a prior <ph id=\"ph2\">&lt;xref:System.Threading.ExecutionContext.SuppressFlow%2A&gt;</ph> method call.","pos":[0,156],"source":"<xref:System.Threading.ExecutionContext.RestoreFlow%2A> reverses the effect of a prior <xref:System.Threading.ExecutionContext.SuppressFlow%2A> method call."}]},{"pos":[163,580],"content":"This method is called by the <xref:System.Threading.AsyncFlowControl.Undo%2A> method of the <xref:System.Threading.AsyncFlowControl> structure returned by the <xref:System.Threading.ExecutionContext.SuppressFlow%2A> method.  You should use the <xref:System.Threading.AsyncFlowControl.Undo%2A> method to restore the flow of the execution context, not the <xref:System.Threading.ExecutionContext.RestoreFlow%2A> method.","nodes":[{"content":"This method is called by the <xref:System.Threading.AsyncFlowControl.Undo%2A> method of the <xref:System.Threading.AsyncFlowControl> structure returned by the <xref:System.Threading.ExecutionContext.SuppressFlow%2A> method.  You should use the <xref:System.Threading.AsyncFlowControl.Undo%2A> method to restore the flow of the execution context, not the <xref:System.Threading.ExecutionContext.RestoreFlow%2A> method.","pos":[0,417],"nodes":[{"content":"This method is called by the <ph id=\"ph1\">&lt;xref:System.Threading.AsyncFlowControl.Undo%2A&gt;</ph> method of the <ph id=\"ph2\">&lt;xref:System.Threading.AsyncFlowControl&gt;</ph> structure returned by the <ph id=\"ph3\">&lt;xref:System.Threading.ExecutionContext.SuppressFlow%2A&gt;</ph> method.","pos":[0,223],"source":"This method is called by the <xref:System.Threading.AsyncFlowControl.Undo%2A> method of the <xref:System.Threading.AsyncFlowControl> structure returned by the <xref:System.Threading.ExecutionContext.SuppressFlow%2A> method."},{"content":"You should use the <ph id=\"ph1\">&lt;xref:System.Threading.AsyncFlowControl.Undo%2A&gt;</ph> method to restore the flow of the execution context, not the <ph id=\"ph2\">&lt;xref:System.Threading.ExecutionContext.RestoreFlow%2A&gt;</ph> method.","pos":[225,417],"source":"  You should use the <xref:System.Threading.AsyncFlowControl.Undo%2A> method to restore the flow of the execution context, not the <xref:System.Threading.ExecutionContext.RestoreFlow%2A> method."}]}]}],"pos":[16324,16909],"yaml":true,"extradata":"MT"},{"content":"The context flow cannot be restored because it is not being suppressed.","nodes":[{"pos":[0,71],"content":"The context flow cannot be restored because it is not being suppressed.","nodes":[{"content":"The context flow cannot be restored because it is not being suppressed.","pos":[0,71]}]}],"pos":[17169,17241],"yaml":true},{"content":"Runs a method in a specified execution context on the current thread.","nodes":[{"pos":[0,69],"content":"Runs a method in a specified execution context on the current thread.","nodes":[{"content":"Runs a method in a specified execution context on the current thread.","pos":[0,69]}]}],"pos":[18737,18807],"yaml":true},{"content":"The execution context is returned to its previous state when the method completes.","nodes":[{"pos":[0,82],"content":"The execution context is returned to its previous state when the method completes.","nodes":[{"content":"The execution context is returned to its previous state when the method completes.","pos":[0,82]}]}],"pos":[18818,18901],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Threading.ExecutionContext\"></xref> to set.","nodes":[{"pos":[0,66],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Threading.ExecutionContext\"&gt;&lt;/xref&gt;</ph> to set.","source":"The <xref href=\"System.Threading.ExecutionContext\"></xref> to set."}],"pos":[19217,19284],"yaml":true},{"content":"A <xref href=\"System.Threading.ContextCallback\"></xref> delegate that represents the method to be run in the provided execution context.","nodes":[{"pos":[0,136],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Threading.ContextCallback\"&gt;&lt;/xref&gt;</ph> delegate that represents the method to be run in the provided execution context.","source":"A <xref href=\"System.Threading.ContextCallback\"></xref> delegate that represents the method to be run in the provided execution context."}],"pos":[19367,19504],"yaml":true},{"content":"The object to pass to the callback method.","nodes":[{"pos":[0,42],"content":"The object to pass to the callback method.","nodes":[{"content":"The object to pass to the callback method.","pos":[0,42]}]}],"pos":[19565,19608],"yaml":true},{"content":"<code>executionContext</code> is `null`.  \n  \n -or-  \n  \n <code>executionContext</code> was not acquired through a capture operation.  \n  \n -or-  \n  \n <code>executionContext</code> has already been used as the argument to a <xref href=\"System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext,System.Threading.ContextCallback,System.Object)\"></xref> call.","nodes":[{"pos":[0,40],"content":"<ph id=\"ph1\">&lt;code&gt;executionContext&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>executionContext</code> is `null`."},{"pos":[47,51],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[58,133],"content":"<ph id=\"ph1\">&lt;code&gt;executionContext&lt;/code&gt;</ph> was not acquired through a capture operation.","source":"<code>executionContext</code> was not acquired through a capture operation."},{"pos":[140,144],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[151,370],"content":"<ph id=\"ph1\">&lt;code&gt;executionContext&lt;/code&gt;</ph> has already been used as the argument to a <ph id=\"ph2\">&lt;xref href=\"System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext,System.Threading.ContextCallback,System.Object)\"&gt;&lt;/xref&gt;</ph> call.","source":"<code>executionContext</code> has already been used as the argument to a <xref href=\"System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext,System.Threading.ContextCallback,System.Object)\"></xref> call."}],"pos":[19783,20166],"yaml":true},{"content":"Suppresses the flow of the execution context across asynchronous threads.","nodes":[{"pos":[0,73],"content":"Suppresses the flow of the execution context across asynchronous threads.","nodes":[{"content":"Suppresses the flow of the execution context across asynchronous threads.","pos":[0,73]}]}],"pos":[21580,21654],"yaml":true},{"content":"Use this method to suppress the flow of the <xref:System.Threading.ExecutionContext> on the current thread.  \n  \n You must use the <xref:System.Threading.AsyncFlowControl.Undo%2A> method on the returned <xref:System.Threading.AsyncFlowControl> structure to restore the flow of the <xref:System.Threading.ExecutionContext>.  \n  \n This method is protected with a <xref:System.Security.Permissions.SecurityAction?displayProperty=fullName> for <xref:System.Security.Permissions.SecurityPermissionFlag?displayProperty=fullName> permission. A fully trusted component can call this method to suppress the flow of the <xref:System.Threading.ExecutionContext> during asynchronous calls. While the flow is suppressed, the <xref:System.Security.SecurityContext.Capture%2A> method returns `null`.","nodes":[{"pos":[0,107],"content":"Use this method to suppress the flow of the <xref:System.Threading.ExecutionContext> on the current thread.","nodes":[{"content":"Use this method to suppress the flow of the <ph id=\"ph1\">&lt;xref:System.Threading.ExecutionContext&gt;</ph> on the current thread.","pos":[0,107],"source":"Use this method to suppress the flow of the <xref:System.Threading.ExecutionContext> on the current thread."}]},{"pos":[114,322],"content":"You must use the <xref:System.Threading.AsyncFlowControl.Undo%2A> method on the returned <xref:System.Threading.AsyncFlowControl> structure to restore the flow of the <xref:System.Threading.ExecutionContext>.","nodes":[{"content":"You must use the <ph id=\"ph1\">&lt;xref:System.Threading.AsyncFlowControl.Undo%2A&gt;</ph> method on the returned <ph id=\"ph2\">&lt;xref:System.Threading.AsyncFlowControl&gt;</ph> structure to restore the flow of the <ph id=\"ph3\">&lt;xref:System.Threading.ExecutionContext&gt;</ph>.","pos":[0,208],"source":"You must use the <xref:System.Threading.AsyncFlowControl.Undo%2A> method on the returned <xref:System.Threading.AsyncFlowControl> structure to restore the flow of the <xref:System.Threading.ExecutionContext>."}]},{"pos":[329,784],"content":"This method is protected with a <xref:System.Security.Permissions.SecurityAction?displayProperty=fullName> for <xref:System.Security.Permissions.SecurityPermissionFlag?displayProperty=fullName> permission. A fully trusted component can call this method to suppress the flow of the <xref:System.Threading.ExecutionContext> during asynchronous calls. While the flow is suppressed, the <xref:System.Security.SecurityContext.Capture%2A> method returns `null`.","nodes":[{"content":"This method is protected with a <ph id=\"ph1\">&lt;xref:System.Security.Permissions.SecurityAction?displayProperty=fullName&gt;</ph> for <ph id=\"ph2\">&lt;xref:System.Security.Permissions.SecurityPermissionFlag?displayProperty=fullName&gt;</ph> permission.","pos":[0,205],"source":"This method is protected with a <xref:System.Security.Permissions.SecurityAction?displayProperty=fullName> for <xref:System.Security.Permissions.SecurityPermissionFlag?displayProperty=fullName> permission."},{"content":"A fully trusted component can call this method to suppress the flow of the <ph id=\"ph1\">&lt;xref:System.Threading.ExecutionContext&gt;</ph> during asynchronous calls.","pos":[206,348],"source":" A fully trusted component can call this method to suppress the flow of the <xref:System.Threading.ExecutionContext> during asynchronous calls."},{"content":"While the flow is suppressed, the <ph id=\"ph1\">&lt;xref:System.Security.SecurityContext.Capture%2A&gt;</ph> method returns <ph id=\"ph2\">`null`</ph>.","pos":[349,455],"source":" While the flow is suppressed, the <xref:System.Security.SecurityContext.Capture%2A> method returns `null`."}]}],"pos":[21665,22456],"yaml":true,"extradata":"MT"},{"content":"An <xref href=\"System.Threading.AsyncFlowControl\"></xref> structure for restoring the flow.","nodes":[{"pos":[0,91],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Threading.AsyncFlowControl\"&gt;&lt;/xref&gt;</ph> structure for restoring the flow.","source":"An <xref href=\"System.Threading.AsyncFlowControl\"></xref> structure for restoring the flow."}],"pos":[22691,22783],"yaml":true},{"content":"The context flow is already suppressed.","nodes":[{"pos":[0,39],"content":"The context flow is already suppressed.","nodes":[{"content":"The context flow is already suppressed.","pos":[0,39]}]}],"pos":[22967,23007],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Threading.ExecutionContext\n  commentId: T:System.Threading.ExecutionContext\n  id: ExecutionContext\n  children:\n  - System.Threading.ExecutionContext.Capture\n  - System.Threading.ExecutionContext.CreateCopy\n  - System.Threading.ExecutionContext.Dispose\n  - System.Threading.ExecutionContext.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)\n  - System.Threading.ExecutionContext.IsFlowSuppressed\n  - System.Threading.ExecutionContext.RestoreFlow\n  - System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext,System.Threading.ContextCallback,System.Object)\n  - System.Threading.ExecutionContext.SuppressFlow\n  langs:\n  - csharp\n  name: ExecutionContext\n  nameWithType: ExecutionContext\n  fullName: System.Threading.ExecutionContext\n  type: Class\n  assemblies:\n  - System.Threading\n  - mscorlib\n  - netstandard\n  namespace: System.Threading\n  summary: Manages the execution context for the current thread. This class cannot be inherited.\n  remarks: \"The <xref:System.Threading.ExecutionContext> class provides a single container for all information relevant to a logical thread of execution. This includes security context, call context, and synchronization context.  \\n  \\n The <xref:System.Threading.ExecutionContext> class provides the functionality for user code to capture and transfer this context across user-defined asynchronous points. The common language runtime ensures that the <xref:System.Threading.ExecutionContext> is consistently transferred across runtime-defined asynchronous points within the managed process.  \\n  \\n An execution context is the managed equivalent of a COM apartment. Within an application domain, the entire execution context must be transferred whenever a thread is transferred. This situation occurs during transfers made by the <xref:System.Threading.Thread.Start%2A?displayProperty=fullName> method, most thread pool operations, and Windows Forms thread marshaling through the Windows message pump. It does not occur in unsafe thread pool operations (such as the <xref:System.Threading.ThreadPool.UnsafeQueueUserWorkItem%2A> method), which do not transfer the compressed stack. Wherever the compressed stack flows, the managed principal, synchronization, locale, and user context also flow. The <xref:System.Threading.ExecutionContext> class provides the <xref:System.Threading.ExecutionContext.Capture%2A> and <xref:System.Threading.ExecutionContext.CreateCopy%2A> methods to get the execution context and the <xref:System.Threading.ExecutionContext.Run%2A> method to set the execution context for the current thread.  \\n  \\n An <xref:System.Threading.ExecutionContext> that is associated with a thread cannot be set on another thread. Attempting to do so will result in an exception being thrown. To propagate the <xref:System.Threading.ExecutionContext> from one thread to another, make a copy of the <xref:System.Threading.ExecutionContext>.  \\n  \\n Internally, the <xref:System.Threading.ExecutionContext> stores all data that is associated with the <xref:System.Runtime.Remoting.Messaging.LogicalCallContext>. This allows the <xref:System.Runtime.Remoting.Messaging.LogicalCallContext> data to be propagated when the <xref:System.Threading.ExecutionContext> is copied and transferred.\"\n  syntax:\n    content: 'public sealed class ExecutionContext : IDisposable, System.Runtime.Serialization.ISerializable'\n  inheritance:\n  - System.Object\n  implements:\n  - System.IDisposable\n  - System.Runtime.Serialization.ISerializable\n  inheritedMembers:\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.ToString\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/ExecutionContext.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.ExecutionContext.Capture\n  commentId: M:System.Threading.ExecutionContext.Capture\n  id: Capture\n  parent: System.Threading.ExecutionContext\n  langs:\n  - csharp\n  name: Capture()\n  nameWithType: ExecutionContext.Capture()\n  fullName: ExecutionContext.Capture()\n  type: Method\n  assemblies:\n  - System.Threading\n  - mscorlib\n  - netstandard\n  namespace: System.Threading\n  summary: Captures the execution context from the current thread.\n  remarks: The captured execution context can be used as the `executionContext` parameter for the <xref:System.Threading.ExecutionContext.Run%2A> method.\n  syntax:\n    content: public static System.Threading.ExecutionContext Capture ();\n    parameters: []\n    return:\n      type: System.Threading.ExecutionContext\n      description: An <xref href=\"System.Threading.ExecutionContext\"></xref> object representing the execution context for the current thread.\n  overload: System.Threading.ExecutionContext.Capture*\n  exceptions: []\n  attributes: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/ExecutionContext.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.ExecutionContext.CreateCopy\n  commentId: M:System.Threading.ExecutionContext.CreateCopy\n  id: CreateCopy\n  parent: System.Threading.ExecutionContext\n  langs:\n  - csharp\n  name: CreateCopy()\n  nameWithType: ExecutionContext.CreateCopy()\n  fullName: ExecutionContext.CreateCopy()\n  type: Method\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Threading\n  namespace: System.Threading\n  summary: Creates a copy of the current execution context.\n  remarks: This method is useful for propagating an execution context from one thread to another.\n  syntax:\n    content: public System.Threading.ExecutionContext CreateCopy ();\n    parameters: []\n    return:\n      type: System.Threading.ExecutionContext\n      description: An <xref href=\"System.Threading.ExecutionContext\"></xref> object representing the current execution context.\n  overload: System.Threading.ExecutionContext.CreateCopy*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: This context cannot be copied because it is used. Only newly captured contexts can be copied.\n  attributes: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/ExecutionContext.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.ExecutionContext.Dispose\n  commentId: M:System.Threading.ExecutionContext.Dispose\n  id: Dispose\n  parent: System.Threading.ExecutionContext\n  langs:\n  - csharp\n  name: Dispose()\n  nameWithType: ExecutionContext.Dispose()\n  fullName: ExecutionContext.Dispose()\n  type: Method\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Threading\n  namespace: System.Threading\n  summary: Releases all resources used by the current instance of the <xref href=\"System.Threading.ExecutionContext\"></xref> class.\n  remarks: \"Call `Dispose` when you are finished using the <xref:System.Threading.ExecutionContext>. The `Dispose` method leaves the <xref:System.Threading.ExecutionContext> in an unusable state. After calling `Dispose`, you must release all references to the <xref:System.Threading.ExecutionContext> so the garbage collector can reclaim the memory that the <xref:System.Threading.ExecutionContext> was occupying.  \\n  \\n For more information, see [Cleaning Up Unmanaged Resources](~/docs/standard/garbage-collection/unmanaged.md) and [Implementing a Dispose Method](~/docs/standard/garbage-collection/implementing-dispose.md).  \\n  \\n> [!NOTE]\\n>  Always call `Dispose` before you release your last reference to the <xref:System.Threading.ExecutionContext>. Otherwise, the resources it is using will not be freed until the garbage collector calls the <xref:System.Threading.ExecutionContext> object's `Finalize` method.\"\n  syntax:\n    content: public void Dispose ();\n    parameters: []\n  overload: System.Threading.ExecutionContext.Dispose*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/ExecutionContext.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.ExecutionContext.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)\n  commentId: M:System.Threading.ExecutionContext.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)\n  id: GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)\n  parent: System.Threading.ExecutionContext\n  langs:\n  - csharp\n  name: GetObjectData(SerializationInfo, StreamingContext)\n  nameWithType: ExecutionContext.GetObjectData(SerializationInfo, StreamingContext)\n  fullName: ExecutionContext.GetObjectData(SerializationInfo, StreamingContext)\n  type: Method\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Threading\n  namespace: System.Threading\n  summary: Sets the specified <xref href=\"System.Runtime.Serialization.SerializationInfo\"></xref> object with the logical context information needed to recreate an instance of the current execution context.\n  remarks: \"<xref:System.Threading.ExecutionContext.GetObjectData%2A> sets a <xref:System.Runtime.Serialization.SerializationInfo> with the logical call context information. During deserialization, the execution context object is reconstituted from the <xref:System.Runtime.Serialization.SerializationInfo> transmitted over the stream.  \\n  \\n For more information, see <xref:System.Runtime.Serialization.SerializationInfo>.\"\n  syntax:\n    content: >-\n      [System.Security.SecurityCritical]\n\n      public void GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);\n    parameters:\n    - id: info\n      type: System.Runtime.Serialization.SerializationInfo\n      description: The <xref href=\"System.Runtime.Serialization.SerializationInfo\"></xref> object to be populated with serialization information.\n    - id: context\n      type: System.Runtime.Serialization.StreamingContext\n      description: The <xref href=\"System.Runtime.Serialization.StreamingContext\"></xref> structure representing the destination context of the serialization.\n  overload: System.Threading.ExecutionContext.GetObjectData*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>info</code> is `null`.\n  attributes:\n  - type: System.Security.SecurityCriticalAttribute\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/ExecutionContext.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.ExecutionContext.IsFlowSuppressed\n  commentId: M:System.Threading.ExecutionContext.IsFlowSuppressed\n  id: IsFlowSuppressed\n  parent: System.Threading.ExecutionContext\n  langs:\n  - csharp\n  name: IsFlowSuppressed()\n  nameWithType: ExecutionContext.IsFlowSuppressed()\n  fullName: ExecutionContext.IsFlowSuppressed()\n  type: Method\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Threading\n  namespace: System.Threading\n  summary: Indicates whether the flow of the execution context is currently suppressed.\n  remarks: The <xref:System.Threading.ExecutionContext.IsFlowSuppressed%2A> method is used by infrastructure components to determine whether to transfer the <xref:System.Threading.ExecutionContext> during asynchronous operations.\n  syntax:\n    content: public static bool IsFlowSuppressed ();\n    parameters: []\n    return:\n      type: System.Boolean\n      description: '`true` if the flow is suppressed; otherwise, `false`.'\n  overload: System.Threading.ExecutionContext.IsFlowSuppressed*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/ExecutionContext.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.ExecutionContext.RestoreFlow\n  commentId: M:System.Threading.ExecutionContext.RestoreFlow\n  id: RestoreFlow\n  parent: System.Threading.ExecutionContext\n  langs:\n  - csharp\n  name: RestoreFlow()\n  nameWithType: ExecutionContext.RestoreFlow()\n  fullName: ExecutionContext.RestoreFlow()\n  type: Method\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Threading\n  namespace: System.Threading\n  summary: Restores the flow of the execution context across asynchronous threads.\n  remarks: \"<xref:System.Threading.ExecutionContext.RestoreFlow%2A> reverses the effect of a prior <xref:System.Threading.ExecutionContext.SuppressFlow%2A> method call.  \\n  \\n This method is called by the <xref:System.Threading.AsyncFlowControl.Undo%2A> method of the <xref:System.Threading.AsyncFlowControl> structure returned by the <xref:System.Threading.ExecutionContext.SuppressFlow%2A> method.  You should use the <xref:System.Threading.AsyncFlowControl.Undo%2A> method to restore the flow of the execution context, not the <xref:System.Threading.ExecutionContext.RestoreFlow%2A> method.\"\n  syntax:\n    content: public static void RestoreFlow ();\n    parameters: []\n  overload: System.Threading.ExecutionContext.RestoreFlow*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The context flow cannot be restored because it is not being suppressed.\n  attributes: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/ExecutionContext.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext,System.Threading.ContextCallback,System.Object)\n  commentId: M:System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext,System.Threading.ContextCallback,System.Object)\n  id: Run(System.Threading.ExecutionContext,System.Threading.ContextCallback,System.Object)\n  parent: System.Threading.ExecutionContext\n  langs:\n  - csharp\n  name: Run(ExecutionContext, ContextCallback, Object)\n  nameWithType: ExecutionContext.Run(ExecutionContext, ContextCallback, Object)\n  fullName: ExecutionContext.Run(ExecutionContext, ContextCallback, Object)\n  type: Method\n  assemblies:\n  - System.Threading\n  - mscorlib\n  - netstandard\n  namespace: System.Threading\n  summary: Runs a method in a specified execution context on the current thread.\n  remarks: The execution context is returned to its previous state when the method completes.\n  syntax:\n    content: >-\n      [System.Security.SecurityCritical]\n\n      public static void Run (System.Threading.ExecutionContext executionContext, System.Threading.ContextCallback callback, object state);\n    parameters:\n    - id: executionContext\n      type: System.Threading.ExecutionContext\n      description: The <xref href=\"System.Threading.ExecutionContext\"></xref> to set.\n    - id: callback\n      type: System.Threading.ContextCallback\n      description: A <xref href=\"System.Threading.ContextCallback\"></xref> delegate that represents the method to be run in the provided execution context.\n    - id: state\n      type: System.Object\n      description: The object to pass to the callback method.\n  overload: System.Threading.ExecutionContext.Run*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"<code>executionContext</code> is `null`.  \\n  \\n -or-  \\n  \\n <code>executionContext</code> was not acquired through a capture operation.  \\n  \\n -or-  \\n  \\n <code>executionContext</code> has already been used as the argument to a <xref href=\\\"System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext,System.Threading.ContextCallback,System.Object)\\\"></xref> call.\"\n  attributes:\n  - type: System.Security.SecurityCriticalAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/ExecutionContext.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.ExecutionContext.SuppressFlow\n  commentId: M:System.Threading.ExecutionContext.SuppressFlow\n  id: SuppressFlow\n  parent: System.Threading.ExecutionContext\n  langs:\n  - csharp\n  name: SuppressFlow()\n  nameWithType: ExecutionContext.SuppressFlow()\n  fullName: ExecutionContext.SuppressFlow()\n  type: Method\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Threading\n  namespace: System.Threading\n  summary: Suppresses the flow of the execution context across asynchronous threads.\n  remarks: \"Use this method to suppress the flow of the <xref:System.Threading.ExecutionContext> on the current thread.  \\n  \\n You must use the <xref:System.Threading.AsyncFlowControl.Undo%2A> method on the returned <xref:System.Threading.AsyncFlowControl> structure to restore the flow of the <xref:System.Threading.ExecutionContext>.  \\n  \\n This method is protected with a <xref:System.Security.Permissions.SecurityAction?displayProperty=fullName> for <xref:System.Security.Permissions.SecurityPermissionFlag?displayProperty=fullName> permission. A fully trusted component can call this method to suppress the flow of the <xref:System.Threading.ExecutionContext> during asynchronous calls. While the flow is suppressed, the <xref:System.Security.SecurityContext.Capture%2A> method returns `null`.\"\n  syntax:\n    content: >-\n      [System.Security.SecurityCritical]\n\n      public static System.Threading.AsyncFlowControl SuppressFlow ();\n    parameters: []\n    return:\n      type: System.Threading.AsyncFlowControl\n      description: An <xref href=\"System.Threading.AsyncFlowControl\"></xref> structure for restoring the flow.\n  overload: System.Threading.ExecutionContext.SuppressFlow*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The context flow is already suppressed.\n  attributes:\n  - type: System.Security.SecurityCriticalAttribute\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/ExecutionContext.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\nreferences:\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.InvalidOperationException\n  parent: System\n  isExternal: false\n  name: InvalidOperationException\n  nameWithType: InvalidOperationException\n  fullName: System.InvalidOperationException\n- uid: System.ArgumentNullException\n  parent: System\n  isExternal: false\n  name: ArgumentNullException\n  nameWithType: ArgumentNullException\n  fullName: System.ArgumentNullException\n- uid: System.Threading.ExecutionContext.Capture\n  parent: System.Threading.ExecutionContext\n  isExternal: false\n  name: Capture()\n  nameWithType: ExecutionContext.Capture()\n  fullName: ExecutionContext.Capture()\n- uid: System.Threading.ExecutionContext\n  parent: System.Threading\n  isExternal: false\n  name: ExecutionContext\n  nameWithType: ExecutionContext\n  fullName: System.Threading.ExecutionContext\n- uid: System.Threading.ExecutionContext.CreateCopy\n  parent: System.Threading.ExecutionContext\n  isExternal: false\n  name: CreateCopy()\n  nameWithType: ExecutionContext.CreateCopy()\n  fullName: ExecutionContext.CreateCopy()\n- uid: System.Threading.ExecutionContext.Dispose\n  parent: System.Threading.ExecutionContext\n  isExternal: false\n  name: Dispose()\n  nameWithType: ExecutionContext.Dispose()\n  fullName: ExecutionContext.Dispose()\n- uid: System.Threading.ExecutionContext.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)\n  parent: System.Threading.ExecutionContext\n  isExternal: false\n  name: GetObjectData(SerializationInfo, StreamingContext)\n  nameWithType: ExecutionContext.GetObjectData(SerializationInfo, StreamingContext)\n  fullName: ExecutionContext.GetObjectData(SerializationInfo, StreamingContext)\n- uid: System.Runtime.Serialization.SerializationInfo\n  parent: System.Runtime.Serialization\n  isExternal: false\n  name: SerializationInfo\n  nameWithType: SerializationInfo\n  fullName: System.Runtime.Serialization.SerializationInfo\n- uid: System.Runtime.Serialization.StreamingContext\n  parent: System.Runtime.Serialization\n  isExternal: false\n  name: StreamingContext\n  nameWithType: StreamingContext\n  fullName: System.Runtime.Serialization.StreamingContext\n- uid: System.Threading.ExecutionContext.IsFlowSuppressed\n  parent: System.Threading.ExecutionContext\n  isExternal: false\n  name: IsFlowSuppressed()\n  nameWithType: ExecutionContext.IsFlowSuppressed()\n  fullName: ExecutionContext.IsFlowSuppressed()\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Threading.ExecutionContext.RestoreFlow\n  parent: System.Threading.ExecutionContext\n  isExternal: false\n  name: RestoreFlow()\n  nameWithType: ExecutionContext.RestoreFlow()\n  fullName: ExecutionContext.RestoreFlow()\n- uid: System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext,System.Threading.ContextCallback,System.Object)\n  parent: System.Threading.ExecutionContext\n  isExternal: false\n  name: Run(ExecutionContext, ContextCallback, Object)\n  nameWithType: ExecutionContext.Run(ExecutionContext, ContextCallback, Object)\n  fullName: ExecutionContext.Run(ExecutionContext, ContextCallback, Object)\n- uid: System.Threading.ContextCallback\n  parent: System.Threading\n  isExternal: false\n  name: ContextCallback\n  nameWithType: ContextCallback\n  fullName: System.Threading.ContextCallback\n- uid: System.Threading.ExecutionContext.SuppressFlow\n  parent: System.Threading.ExecutionContext\n  isExternal: false\n  name: SuppressFlow()\n  nameWithType: ExecutionContext.SuppressFlow()\n  fullName: ExecutionContext.SuppressFlow()\n- uid: System.Threading.AsyncFlowControl\n  parent: System.Threading\n  isExternal: false\n  name: AsyncFlowControl\n  nameWithType: AsyncFlowControl\n  fullName: System.Threading.AsyncFlowControl\n- uid: System.Threading.ExecutionContext.Capture*\n  parent: System.Threading.ExecutionContext\n  isExternal: false\n  name: Capture\n  nameWithType: ExecutionContext.Capture\n  fullName: ExecutionContext.Capture\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/ExecutionContext.xml\n- uid: System.Threading.ExecutionContext.CreateCopy*\n  parent: System.Threading.ExecutionContext\n  isExternal: false\n  name: CreateCopy\n  nameWithType: ExecutionContext.CreateCopy\n  fullName: ExecutionContext.CreateCopy\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/ExecutionContext.xml\n- uid: System.Threading.ExecutionContext.Dispose*\n  parent: System.Threading.ExecutionContext\n  isExternal: false\n  name: Dispose\n  nameWithType: ExecutionContext.Dispose\n  fullName: ExecutionContext.Dispose\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/ExecutionContext.xml\n- uid: System.Threading.ExecutionContext.GetObjectData*\n  parent: System.Threading.ExecutionContext\n  isExternal: false\n  name: GetObjectData\n  nameWithType: ExecutionContext.GetObjectData\n  fullName: ExecutionContext.GetObjectData\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/ExecutionContext.xml\n- uid: System.Threading.ExecutionContext.IsFlowSuppressed*\n  parent: System.Threading.ExecutionContext\n  isExternal: false\n  name: IsFlowSuppressed\n  nameWithType: ExecutionContext.IsFlowSuppressed\n  fullName: ExecutionContext.IsFlowSuppressed\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/ExecutionContext.xml\n- uid: System.Threading.ExecutionContext.RestoreFlow*\n  parent: System.Threading.ExecutionContext\n  isExternal: false\n  name: RestoreFlow\n  nameWithType: ExecutionContext.RestoreFlow\n  fullName: ExecutionContext.RestoreFlow\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/ExecutionContext.xml\n- uid: System.Threading.ExecutionContext.Run*\n  parent: System.Threading.ExecutionContext\n  isExternal: false\n  name: Run\n  nameWithType: ExecutionContext.Run\n  fullName: ExecutionContext.Run\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/ExecutionContext.xml\n- uid: System.Threading.ExecutionContext.SuppressFlow*\n  parent: System.Threading.ExecutionContext\n  isExternal: false\n  name: SuppressFlow\n  nameWithType: ExecutionContext.SuppressFlow\n  fullName: ExecutionContext.SuppressFlow\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/ExecutionContext.xml\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: Object.Equals(Object)\n  fullName: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: Object.GetHashCode()\n  fullName: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: false\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: false\n  name: ToString()\n  nameWithType: Object.ToString()\n  fullName: Object.ToString()\n- uid: System.IDisposable\n  parent: System\n  isExternal: false\n  name: IDisposable\n  nameWithType: IDisposable\n  fullName: System.IDisposable\n- uid: System.Runtime.Serialization.ISerializable\n  parent: System.Runtime.Serialization\n  isExternal: false\n  name: ISerializable\n  nameWithType: ISerializable\n  fullName: System.Runtime.Serialization.ISerializable\n"}