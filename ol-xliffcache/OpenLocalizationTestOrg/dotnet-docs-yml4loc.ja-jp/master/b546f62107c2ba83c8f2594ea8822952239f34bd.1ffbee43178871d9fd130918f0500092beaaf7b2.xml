{"nodes":[{"content":"Represents ambient data that is local to a given asynchronous control flow, such as an asynchronous method.","nodes":[{"pos":[0,107],"content":"Represents ambient data that is local to a given asynchronous control flow, such as an asynchronous method.","nodes":[{"content":"Represents ambient data that is local to a given asynchronous control flow, such as an asynchronous method.","pos":[0,107]}]}],"pos":[567,675],"yaml":true},{"content":"Because the task-based asynchronous programming model tends to abstract the use of threads, <xref:System.Threading.AsyncLocal%601> instances can be used to persist data across threads.  \n  \n The <xref:System.Threading.AsyncLocal%601> class also provides optional notifications when the value associated with the current thread changes, either because it was explicitly changed by setting the <xref:System.Threading.AsyncLocal%601.Value%2A> property, or implicitly changed when the thread encountered an `await` or other context transition.","nodes":[{"pos":[0,184],"content":"Because the task-based asynchronous programming model tends to abstract the use of threads, <xref:System.Threading.AsyncLocal%601> instances can be used to persist data across threads.","nodes":[{"content":"Because the task-based asynchronous programming model tends to abstract the use of threads, <ph id=\"ph1\">&lt;xref:System.Threading.AsyncLocal%601&gt;</ph> instances can be used to persist data across threads.","pos":[0,184],"source":"Because the task-based asynchronous programming model tends to abstract the use of threads, <xref:System.Threading.AsyncLocal%601> instances can be used to persist data across threads."}]},{"pos":[191,539],"content":"The <ph id=\"ph1\">&lt;xref:System.Threading.AsyncLocal%601&gt;</ph> class also provides optional notifications when the value associated with the current thread changes, either because it was explicitly changed by setting the <ph id=\"ph2\">&lt;xref:System.Threading.AsyncLocal%601.Value%2A&gt;</ph> property, or implicitly changed when the thread encountered an <ph id=\"ph3\">`await`</ph> or other context transition.","source":"The <xref:System.Threading.AsyncLocal%601> class also provides optional notifications when the value associated with the current thread changes, either because it was explicitly changed by setting the <xref:System.Threading.AsyncLocal%601.Value%2A> property, or implicitly changed when the thread encountered an `await` or other context transition."}],"pos":[686,1230],"yaml":true,"extradata":"MT"},{"content":"The type of the ambient data.","nodes":[{"pos":[0,29],"content":"The type of the ambient data.","nodes":[{"content":"The type of the ambient data.","pos":[0,29]}]}],"pos":[1894,1924],"yaml":true},{"content":"Instantiates an <xref href=\"System.Threading.AsyncLocal`1\"></xref> instance that does not receive change notifications.","nodes":[{"pos":[0,119],"content":"Instantiates an <ph id=\"ph1\">&lt;xref href=\"System.Threading.AsyncLocal`1\"&gt;&lt;/xref&gt;</ph> instance that does not receive change notifications.","source":"Instantiates an <xref href=\"System.Threading.AsyncLocal`1\"></xref> instance that does not receive change notifications."}],"pos":[3449,3569],"yaml":true},{"content":"Instantiates an <xref href=\"System.Threading.AsyncLocal`1\"></xref> local instance that receives change notifications.","nodes":[{"pos":[0,117],"content":"Instantiates an <ph id=\"ph1\">&lt;xref href=\"System.Threading.AsyncLocal`1\"&gt;&lt;/xref&gt;</ph> local instance that receives change notifications.","source":"Instantiates an <xref href=\"System.Threading.AsyncLocal`1\"></xref> local instance that receives change notifications."}],"pos":[5183,5301],"yaml":true},{"content":"The delegate's signature is `Action<ASyncLocalValueChangedArgs<T>`.","nodes":[{"pos":[0,67],"content":"The delegate's signature is <ph id=\"ph1\">`Action&lt;ASyncLocalValueChangedArgs&lt;T&gt;`</ph>.","source":"The delegate's signature is `Action<ASyncLocalValueChangedArgs<T>`."}],"pos":[5312,5380],"yaml":true,"extradata":"MT"},{"content":"The delegate that is called whenever the current value changes on any thread.","nodes":[{"pos":[0,77],"content":"The delegate that is called whenever the current value changes on any thread.","nodes":[{"content":"The delegate that is called whenever the current value changes on any thread.","pos":[0,77]}]}],"pos":[5689,5767],"yaml":true},{"content":"Gets or sets the value of the ambient data.","nodes":[{"pos":[0,43],"content":"Gets or sets the value of the ambient data.","nodes":[{"content":"Gets or sets the value of the ambient data.","pos":[0,43]}]}],"pos":[7045,7089],"yaml":true},{"content":"The value of the ambient data.","nodes":[{"pos":[0,30],"content":"The value of the ambient data.","nodes":[{"content":"The value of the ambient data.","pos":[0,30]}]}],"pos":[7297,7328],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Threading.AsyncLocal`1\n  commentId: T:System.Threading.AsyncLocal`1\n  id: AsyncLocal`1\n  children:\n  - System.Threading.AsyncLocal`1.#ctor\n  - System.Threading.AsyncLocal`1.#ctor(System.Action{System.Threading.AsyncLocalValueChangedArgs{`0}})\n  - System.Threading.AsyncLocal`1.Value\n  langs:\n  - csharp\n  name: AsyncLocal<T>\n  nameWithType: AsyncLocal<T>\n  fullName: System.Threading.AsyncLocal<T>\n  type: Class\n  assemblies:\n  - System.Threading\n  - mscorlib\n  - netstandard\n  namespace: System.Threading\n  summary: Represents ambient data that is local to a given asynchronous control flow, such as an asynchronous method.\n  remarks: \"Because the task-based asynchronous programming model tends to abstract the use of threads, <xref:System.Threading.AsyncLocal%601> instances can be used to persist data across threads.  \\n  \\n The <xref:System.Threading.AsyncLocal%601> class also provides optional notifications when the value associated with the current thread changes, either because it was explicitly changed by setting the <xref:System.Threading.AsyncLocal%601.Value%2A> property, or implicitly changed when the thread encountered an `await` or other context transition.\"\n  example:\n  - \"The following example uses the <xref:System.Threading.AsyncLocal%601> class to persist a string value across an asynchronous flow. It also contrasts the use of  <xref:System.Threading.AsyncLocal%601> with <xref:System.Threading.ThreadLocal%601>.  \\n  \\n [!code-csharp[System.Threading.AsyncLocal#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.asynclocal/cs/Example1.cs#1)]\\n [!code-vb[System.Threading.AsyncLocal#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.asynclocal/vb/Example1.vb#1)]\"\n  syntax:\n    content: public sealed class AsyncLocal<T>\n    typeParameters:\n    - id: T\n      description: The type of the ambient data.\n  inheritance:\n  - System.Object\n  implements: []\n  inheritedMembers:\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.ToString\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/AsyncLocal`1.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.AsyncLocal`1.#ctor\n  commentId: M:System.Threading.AsyncLocal`1.#ctor\n  id: '#ctor'\n  parent: System.Threading.AsyncLocal`1\n  langs:\n  - csharp\n  name: AsyncLocal<T>()\n  nameWithType: AsyncLocal<T>.AsyncLocal<T>()\n  fullName: AsyncLocal<T>.AsyncLocal<T>()\n  type: Constructor\n  assemblies:\n  - System.Threading\n  - mscorlib\n  - netstandard\n  namespace: System.Threading\n  summary: Instantiates an <xref href=\"System.Threading.AsyncLocal`1\"></xref> instance that does not receive change notifications.\n  syntax:\n    content: public AsyncLocal ();\n    parameters: []\n  overload: System.Threading.AsyncLocal`1.#ctor*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/AsyncLocal`1.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.AsyncLocal`1.#ctor(System.Action{System.Threading.AsyncLocalValueChangedArgs{`0}})\n  commentId: M:System.Threading.AsyncLocal`1.#ctor(System.Action{System.Threading.AsyncLocalValueChangedArgs{`0}})\n  id: '#ctor(System.Action{System.Threading.AsyncLocalValueChangedArgs{`0}})'\n  parent: System.Threading.AsyncLocal`1\n  langs:\n  - csharp\n  name: AsyncLocal<T>(Action<AsyncLocalValueChangedArgs<T>>)\n  nameWithType: AsyncLocal<T>.AsyncLocal<T>(Action<AsyncLocalValueChangedArgs<T>>)\n  fullName: AsyncLocal<T>.AsyncLocal<T>(Action<AsyncLocalValueChangedArgs<T>>)\n  type: Constructor\n  assemblies:\n  - System.Threading\n  - mscorlib\n  - netstandard\n  namespace: System.Threading\n  summary: Instantiates an <xref href=\"System.Threading.AsyncLocal`1\"></xref> local instance that receives change notifications.\n  remarks: The delegate's signature is `Action<ASyncLocalValueChangedArgs<T>`.\n  syntax:\n    content: >-\n      [System.Security.SecurityCritical]\n\n      public AsyncLocal (Action<System.Threading.AsyncLocalValueChangedArgs<T>> valueChangedHandler);\n    parameters:\n    - id: valueChangedHandler\n      type: System.Action{System.Threading.AsyncLocalValueChangedArgs{T}}\n      description: The delegate that is called whenever the current value changes on any thread.\n  overload: System.Threading.AsyncLocal`1.#ctor*\n  exceptions: []\n  attributes:\n  - type: System.Security.SecurityCriticalAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/AsyncLocal`1.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.AsyncLocal`1.Value\n  commentId: P:System.Threading.AsyncLocal`1.Value\n  id: Value\n  parent: System.Threading.AsyncLocal`1\n  langs:\n  - csharp\n  name: Value\n  nameWithType: AsyncLocal<T>.Value\n  fullName: AsyncLocal<T>.Value\n  type: Property\n  assemblies:\n  - System.Threading\n  - mscorlib\n  - netstandard\n  namespace: System.Threading\n  summary: Gets or sets the value of the ambient data.\n  syntax:\n    content: >-\n      [get: System.Security.SecuritySafeCritical]\n\n      [set: System.Security.SecuritySafeCritical]\n\n      public T Value { get; set; }\n    return:\n      type: T\n      description: The value of the ambient data.\n  overload: System.Threading.AsyncLocal`1.Value*\n  exceptions: []\n  attributes:\n  - type: 'get: System.Security.SecuritySafeCritical'\n  - type: 'set: System.Security.SecuritySafeCritical'\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/AsyncLocal`1.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\nreferences:\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.Threading.AsyncLocal`1.#ctor\n  parent: System.Threading.AsyncLocal`1\n  isExternal: false\n  name: AsyncLocal<T>()\n  nameWithType: AsyncLocal<T>.AsyncLocal<T>()\n  fullName: AsyncLocal<T>.AsyncLocal<T>()\n- uid: System.Threading.AsyncLocal`1.#ctor(System.Action{System.Threading.AsyncLocalValueChangedArgs{`0}})\n  parent: System.Threading.AsyncLocal`1\n  isExternal: false\n  name: AsyncLocal<T>(Action<AsyncLocalValueChangedArgs<T>>)\n  nameWithType: AsyncLocal<T>.AsyncLocal<T>(Action<AsyncLocalValueChangedArgs<T>>)\n  fullName: AsyncLocal<T>.AsyncLocal<T>(Action<AsyncLocalValueChangedArgs<T>>)\n- uid: System.Action`1\n  name: Action<T>\n  nameWithType: Action<T>\n  fullName: System.Action<T>\n- uid: System.Threading.AsyncLocalValueChangedArgs`1\n  name: AsyncLocalValueChangedArgs<T>\n  nameWithType: AsyncLocalValueChangedArgs<T>\n  fullName: System.Threading.AsyncLocalValueChangedArgs<T>\n- uid: T\n  name: T\n  nameWithType: T\n  fullName: T\n- uid: System.Action{System.Threading.AsyncLocalValueChangedArgs{T}}\n  parent: System\n  isExternal: false\n  name: Action<AsyncLocalValueChangedArgs<T>>\n  nameWithType: Action<AsyncLocalValueChangedArgs<T>>\n  fullName: System.Action<System.Threading.AsyncLocalValueChangedArgs<T>>\n  spec.csharp:\n  - uid: System.Action`1\n    name: Action\n    nameWithType: Action\n    fullName: System.Action\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Threading.AsyncLocalValueChangedArgs`1\n    name: AsyncLocalValueChangedArgs\n    nameWithType: AsyncLocalValueChangedArgs\n    fullName: System.Threading.AsyncLocalValueChangedArgs\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: T\n    name: T\n    nameWithType: T\n    fullName: T\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Threading.AsyncLocal`1.Value\n  parent: System.Threading.AsyncLocal`1\n  isExternal: false\n  name: Value\n  nameWithType: AsyncLocal<T>.Value\n  fullName: AsyncLocal<T>.Value\n- uid: System.Threading.AsyncLocal`1.#ctor*\n  parent: System.Threading.AsyncLocal`1\n  isExternal: false\n  name: AsyncLocal<T>\n  nameWithType: AsyncLocal<T>.AsyncLocal<T>\n  fullName: AsyncLocal<T>.AsyncLocal<T>\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/AsyncLocal`1.xml\n- uid: System.Threading.AsyncLocal`1.Value*\n  parent: System.Threading.AsyncLocal`1\n  isExternal: false\n  name: Value\n  nameWithType: AsyncLocal<T>.Value\n  fullName: AsyncLocal<T>.Value\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/AsyncLocal`1.xml\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: Object.Equals(Object)\n  fullName: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: Object.GetHashCode()\n  fullName: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: false\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: false\n  name: ToString()\n  nameWithType: Object.ToString()\n  fullName: Object.ToString()\n"}