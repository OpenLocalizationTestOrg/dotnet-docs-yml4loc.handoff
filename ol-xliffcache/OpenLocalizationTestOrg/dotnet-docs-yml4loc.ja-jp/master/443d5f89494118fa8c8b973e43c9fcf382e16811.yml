### YamlMime:ManagedReference
items:
- uid: System.Web.UI.Design.ExpressionEditor
  commentId: T:System.Web.UI.Design.ExpressionEditor
  id: ExpressionEditor
  children:
  - System.Web.UI.Design.ExpressionEditor.#ctor
  - System.Web.UI.Design.ExpressionEditor.EvaluateExpression(System.String,System.Object,System.Type,System.IServiceProvider)
  - System.Web.UI.Design.ExpressionEditor.ExpressionPrefix
  - System.Web.UI.Design.ExpressionEditor.GetExpressionEditor(System.String,System.IServiceProvider)
  - System.Web.UI.Design.ExpressionEditor.GetExpressionEditor(System.Type,System.IServiceProvider)
  - System.Web.UI.Design.ExpressionEditor.GetExpressionEditorSheet(System.String,System.IServiceProvider)
  langs:
  - csharp
  name: ExpressionEditor
  nameWithType: ExpressionEditor
  fullName: System.Web.UI.Design.ExpressionEditor
  type: Class
  assemblies:
  - System.Design
  namespace: System.Web.UI.Design
  summary: Defines a set of properties and methods for evaluating an expression that is associated with a control property at design time and to provide an expression editor sheet to the visual design host for use in the expression editor dialog box. This class is abstract.
  remarks: "A visual designer host, such as [!INCLUDE[vsprvslong](~/includes/vsprvslong-md.md)], uses the <xref:System.Web.UI.Design.ExpressionEditor> class to present custom expression editor sheets to the user, and then evaluate the selected expression for design-time rendering.  \n  \n When you browse the <xref:System.Web.UI.Design.HtmlControlDesigner.Expressions%2A> property for a control in the design-time Properties grid, the visual designer displays a dialog box to set expressions for a control property. You can select the expression type based on a list of expression prefixes. When you select an expression prefix from the list, the visual designer uses the associated <xref:System.Web.UI.Design.ExpressionEditor> and <xref:System.Web.UI.Design.ExpressionEditorSheet> objects to set, evaluate, and convert the expression string based on the syntax for that type of expression. The visual designer sets the expression for the associated control property, and then uses the evaluated expression result to assign control property values that are rendered on the design surface.  \n  \n The static <xref:System.Web.UI.Design.ExpressionEditor.GetExpressionEditor%2A> methods get the expression editor that is associated with a particular expression prefix or expression builder. The <xref:System.Web.UI.Design.ExpressionEditor.ExpressionPrefix%2A> property for an <xref:System.Web.UI.Design.ExpressionEditor> object returns the configured expression prefix. The <xref:System.Web.UI.Design.ExpressionEditor.EvaluateExpression%2A> method evaluates an input expression string. The <xref:System.Web.UI.Design.ExpressionEditor.GetExpressionEditorSheet%2A> method returns the <xref:System.Web.UI.Design.ExpressionEditorSheet> implementation that is used to prompt for the custom expression properties in the expressions dialog box.  \n  \n Typically, to support a new expression type at design time, you define a unique expression prefix and provide custom <xref:System.Web.Compilation.ExpressionBuilder> and <xref:System.Web.UI.Design.ExpressionEditor> implementations. Optionally, you can provide a custom <xref:System.Web.UI.Design.ExpressionEditorSheet> implementation that defines properties that are used to form the expression in the expressions dialog box.  \n  \n The expression prefix identifies the custom expression type and associates an expression with the expression builder and expression editor. When custom expressions are parsed in a page, the expression prefix is used to create instances of the associated <xref:System.Web.Compilation.ExpressionBuilder> and <xref:System.Web.UI.Design.ExpressionEditor> classes. To associate an expression prefix with an expression builder and expression editor, apply the <xref:System.Web.Compilation.ExpressionEditorAttribute> and <xref:System.Web.Compilation.ExpressionPrefixAttribute> attributes to the custom <xref:System.Web.Compilation.ExpressionBuilder> class and configure the expression prefix for an expression builder in the `expressionBuilders` element in the Web configuration file. The prefix is not required, but highly recommended."
  example:
  - "The following code example demonstrates how to derive from the <xref:System.Web.UI.Design.ExpressionEditor> class to define a custom expression editor.  \n  \n [!code-csharp[CustomExpressionEditor#1](~/samples/snippets/csharp/VS_Snippets_WebNet/customexpressioneditor/cs/CustomAppSettingsExpression.cs#1)]"
  syntax:
    content: public abstract class ExpressionEditor
  inheritance:
  - System.Object
  derivedClasses:
  - System.Web.UI.Design.AppSettingsExpressionEditor
  - System.Web.UI.Design.ConnectionStringsExpressionEditor
  - System.Web.UI.Design.ResourceExpressionEditor
  - System.Web.UI.Design.RouteUrlExpressionEditor
  - System.Web.UI.Design.RouteValueExpressionEditor
  implements: []
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Web.UI.Design/ExpressionEditor.xml
  ms.technology:
  - dotnet-webforms
  ms.author: riande
  manager: wpickett
- uid: System.Web.UI.Design.ExpressionEditor.#ctor
  commentId: M:System.Web.UI.Design.ExpressionEditor.#ctor
  id: '#ctor'
  parent: System.Web.UI.Design.ExpressionEditor
  langs:
  - csharp
  name: ExpressionEditor()
  nameWithType: ExpressionEditor.ExpressionEditor()
  fullName: ExpressionEditor.ExpressionEditor()
  type: Constructor
  assemblies:
  - System.Design
  namespace: System.Web.UI.Design
  summary: Initializes a new instance of the <xref href="System.Web.UI.Design.ExpressionEditor"></xref> class.
  remarks: Because the <xref:System.Web.UI.Design.ExpressionEditor> class is abstract, you cannot create an instance of the  <xref:System.Web.UI.Design.ExpressionEditor> class directly using the <xref:System.Web.UI.Design.ExpressionEditor.%23ctor%2A> constructor.
  syntax:
    content: protected ExpressionEditor ();
    parameters: []
  overload: System.Web.UI.Design.ExpressionEditor.#ctor*
  exceptions: []
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Web.UI.Design/ExpressionEditor.xml
  ms.technology:
  - dotnet-webforms
  ms.author: riande
  manager: wpickett
- uid: System.Web.UI.Design.ExpressionEditor.EvaluateExpression(System.String,System.Object,System.Type,System.IServiceProvider)
  commentId: M:System.Web.UI.Design.ExpressionEditor.EvaluateExpression(System.String,System.Object,System.Type,System.IServiceProvider)
  id: EvaluateExpression(System.String,System.Object,System.Type,System.IServiceProvider)
  parent: System.Web.UI.Design.ExpressionEditor
  langs:
  - csharp
  name: EvaluateExpression(String, Object, Type, IServiceProvider)
  nameWithType: ExpressionEditor.EvaluateExpression(String, Object, Type, IServiceProvider)
  fullName: ExpressionEditor.EvaluateExpression(String, Object, Type, IServiceProvider)
  type: Method
  assemblies:
  - System.Design
  namespace: System.Web.UI.Design
  summary: Evaluates an expression string and provides the design-time value for a control property.
  remarks: "The visual designer host uses the <xref:System.Web.UI.Design.ExpressionEditor.EvaluateExpression%2A> method to evaluate an expression and provide the design-time value for an associated control property.  \n  \n The visual designer uses the <xref:System.Web.Compilation.ExpressionBuilder.ParseExpression%2A?displayProperty=fullName> method to parse the expression string at design time, and then calls the <xref:System.Web.UI.Design.ExpressionEditor.EvaluateExpression%2A> method with the parsed expression data. The visual designer uses the evaluated expression result to assign control property values that are rendered on the design surface."
  syntax:
    content: public abstract object EvaluateExpression (string expression, object parseTimeData, Type propertyType, IServiceProvider serviceProvider);
    parameters:
    - id: expression
      type: System.String
      description: An expression string to evaluate. The expression does not include the expression prefix.
    - id: parseTimeData
      type: System.Object
      description: An object containing additional parsing information for evaluating <code>expression</code>. This typically is provided by the expression builder.
    - id: propertyType
      type: System.Type
      description: The type of the control property to which <code>expression</code> is bound.
    - id: serviceProvider
      type: System.IServiceProvider
      description: A service provider implementation supplied by the designer host, used to obtain additional design-time services.
    return:
      type: System.Object
      description: The object referenced by the evaluated expression string, if the expression evaluation succeeded; otherwise, `null`.
  overload: System.Web.UI.Design.ExpressionEditor.EvaluateExpression*
  exceptions: []
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Web.UI.Design/ExpressionEditor.xml
  ms.technology:
  - dotnet-webforms
  ms.author: riande
  manager: wpickett
- uid: System.Web.UI.Design.ExpressionEditor.ExpressionPrefix
  commentId: P:System.Web.UI.Design.ExpressionEditor.ExpressionPrefix
  id: ExpressionPrefix
  parent: System.Web.UI.Design.ExpressionEditor
  langs:
  - csharp
  name: ExpressionPrefix
  nameWithType: ExpressionEditor.ExpressionPrefix
  fullName: ExpressionEditor.ExpressionPrefix
  type: Property
  assemblies:
  - System.Design
  namespace: System.Web.UI.Design
  summary: Gets the expression prefix that identifies expression strings that are supported by the expression editor implementation.
  remarks: "The expression prefix identifies the custom expression type and associates an expression with the expression builder and expression editor. When custom expressions are parsed in a page, the expression prefix is used to create instances of the associated <xref:System.Web.Compilation.ExpressionBuilder> and <xref:System.Web.UI.Design.ExpressionEditor> classes. To associate an expression prefix with an expression builder and expression editor, apply the <xref:System.Web.Compilation.ExpressionEditorAttribute> and <xref:System.Web.Compilation.ExpressionPrefixAttribute> attributes to the custom <xref:System.Web.Compilation.ExpressionBuilder> class and configure the expression prefix for an expression builder in the `expressionBuilders` element in the Web configuration file.  \n  \n Typically, derived classes do not override the <xref:System.Web.UI.Design.ExpressionEditor.ExpressionPrefix%2A> property. The base <xref:System.Web.UI.Design.ExpressionEditor> class sets the <xref:System.Web.UI.Design.ExpressionEditor.ExpressionPrefix%2A> value based on the <xref:System.Web.Compilation.ExpressionPrefixAttribute> attribute for the associated <xref:System.Web.Compilation.ExpressionBuilder> object."
  syntax:
    content: public string ExpressionPrefix { get; }
    return:
      type: System.String
      description: A string representing the prefix for expressions supported by the class derived from the <xref href="System.Web.UI.Design.ExpressionEditor"></xref>; otherwise, an empty string (""), if the expression editor does not have an associated expression prefix.
  overload: System.Web.UI.Design.ExpressionEditor.ExpressionPrefix*
  exceptions: []
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Web.UI.Design/ExpressionEditor.xml
  ms.technology:
  - dotnet-webforms
  ms.author: riande
  manager: wpickett
- uid: System.Web.UI.Design.ExpressionEditor.GetExpressionEditor(System.String,System.IServiceProvider)
  commentId: M:System.Web.UI.Design.ExpressionEditor.GetExpressionEditor(System.String,System.IServiceProvider)
  id: GetExpressionEditor(System.String,System.IServiceProvider)
  parent: System.Web.UI.Design.ExpressionEditor
  langs:
  - csharp
  name: GetExpressionEditor(String, IServiceProvider)
  nameWithType: ExpressionEditor.GetExpressionEditor(String, IServiceProvider)
  fullName: ExpressionEditor.GetExpressionEditor(String, IServiceProvider)
  type: Method
  assemblies:
  - System.Design
  namespace: System.Web.UI.Design
  summary: Returns an <xref href="System.Web.UI.Design.ExpressionEditor"></xref> implementation that is associated with the specified expression prefix.
  remarks: "Use the static <xref:System.Web.UI.Design.ExpressionEditor.GetExpressionEditor%2A> method overloads to find the <xref:System.Web.UI.Design.ExpressionEditor> object that is associated with a particular expression prefix or expression builder type.  \n  \n For each custom expression type, an expression prefix identifies the associated expression builder and expression editor. When custom expressions are parsed in a page, the expression prefix is used to create instances of the associated <xref:System.Web.Compilation.ExpressionBuilder> and <xref:System.Web.UI.Design.ExpressionEditor> classes.  \n  \n To associate an expression prefix with an expression builder and expression editor, apply the <xref:System.Web.Compilation.ExpressionEditorAttribute> and <xref:System.Web.Compilation.ExpressionPrefixAttribute> attributes to the custom <xref:System.Web.Compilation.ExpressionBuilder> class and configure the expression prefix for an expression builder in the `expressionBuilders` element in the Web configuration file.  \n  \n To find the associated expression editor for an expression prefix, the <xref:System.Web.UI.Design.ExpressionEditor.GetExpressionEditor%2A> method enumerates the available <xref:System.Web.Compilation.ExpressionBuilder> implementations for a matching prefix. The <xref:System.Web.Compilation.ExpressionBuilder> implementations can be configured in the `expressionBuilders` section of the Web configuration file. If an available <xref:System.Web.Compilation.ExpressionBuilder> implementation defines the expression prefix, the <xref:System.Web.UI.Design.ExpressionEditor.GetExpressionEditor%2A> method returns the type that is specified in the <xref:System.Web.Compilation.ExpressionEditorAttribute> attribute of the <xref:System.Web.Compilation.ExpressionBuilder> metadata."
  syntax:
    content: public static System.Web.UI.Design.ExpressionEditor GetExpressionEditor (string expressionPrefix, IServiceProvider serviceProvider);
    parameters:
    - id: expressionPrefix
      type: System.String
      description: The expression prefix used to find the associated expression editor.
    - id: serviceProvider
      type: System.IServiceProvider
      description: A service provider implementation supplied by the designer host, used to obtain additional design-time services.
    return:
      type: System.Web.UI.Design.ExpressionEditor
      description: An <xref href="System.Web.UI.Design.ExpressionEditor"></xref> implementation associated with <code>expressionPrefix</code>; otherwise, `null`, if <code>expressionPrefix</code> is not defined or is not associated with an <xref href="System.Web.UI.Design.ExpressionEditor"></xref>.
  overload: System.Web.UI.Design.ExpressionEditor.GetExpressionEditor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>serviceProvider</code> is `null`.
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Web.UI.Design/ExpressionEditor.xml
  ms.technology:
  - dotnet-webforms
  ms.author: riande
  manager: wpickett
- uid: System.Web.UI.Design.ExpressionEditor.GetExpressionEditor(System.Type,System.IServiceProvider)
  commentId: M:System.Web.UI.Design.ExpressionEditor.GetExpressionEditor(System.Type,System.IServiceProvider)
  id: GetExpressionEditor(System.Type,System.IServiceProvider)
  parent: System.Web.UI.Design.ExpressionEditor
  langs:
  - csharp
  name: GetExpressionEditor(Type, IServiceProvider)
  nameWithType: ExpressionEditor.GetExpressionEditor(Type, IServiceProvider)
  fullName: ExpressionEditor.GetExpressionEditor(Type, IServiceProvider)
  type: Method
  assemblies:
  - System.Design
  namespace: System.Web.UI.Design
  summary: Returns an <xref href="System.Web.UI.Design.ExpressionEditor"></xref> implementation that is associated with the specified expression builder type.
  remarks: "Use the static <xref:System.Web.UI.Design.ExpressionEditor.GetExpressionEditor%2A> overloads to find the <xref:System.Web.UI.Design.ExpressionEditor> object that is associated with a particular expression prefix or expression builder type.  \n  \n For each custom expression type, an expression prefix identifies the associated expression builder and expression editor. When custom expressions are parsed in a page, the expression prefix is used to create instances of the associated <xref:System.Web.Compilation.ExpressionBuilder> and <xref:System.Web.UI.Design.ExpressionEditor> classes.  \n  \n To associate an expression prefix with an expression builder and expression editor, apply the <xref:System.Web.Compilation.ExpressionEditorAttribute> and <xref:System.Web.Compilation.ExpressionPrefixAttribute> attributes to the custom <xref:System.Web.Compilation.ExpressionBuilder> class and configure the expression prefix for an expression builder in the `expressionBuilders` element in the Web configuration file.  \n  \n The <xref:System.Web.UI.Design.ExpressionEditor.GetExpressionEditor%2A> method enumerates the available <xref:System.Web.Compilation.ExpressionBuilder> implementations to locate `expressionBuilderType`. The <xref:System.Web.Compilation.ExpressionBuilder> implementations can be configured in the `expressionBuilders` section of the Web configuration file. If `expressionBuilderType` is found in the set of available <xref:System.Web.Compilation.ExpressionBuilder> implementations, the <xref:System.Web.UI.Design.ExpressionEditor.GetExpressionEditor%2A> method returns the type that is specified in the <xref:System.Web.Compilation.ExpressionEditorAttribute> attribute of the <xref:System.Web.Compilation.ExpressionBuilder> metadata."
  syntax:
    content: public static System.Web.UI.Design.ExpressionEditor GetExpressionEditor (Type expressionBuilderType, IServiceProvider serviceProvider);
    parameters:
    - id: expressionBuilderType
      type: System.Type
      description: The type of the derived expression builder class, used to locate the associated expression editor.
    - id: serviceProvider
      type: System.IServiceProvider
      description: A service provider implementation supplied by the designer host, used to obtain additional design-time services.
    return:
      type: System.Web.UI.Design.ExpressionEditor
      description: An <xref href="System.Web.UI.Design.ExpressionEditor"></xref> implementation associated with <code>expressionBuilderType</code>; otherwise, `null`, if <code>expressionBuilderType</code> cannot be located or has no associated <xref href="System.Web.UI.Design.ExpressionEditor"></xref>.
  overload: System.Web.UI.Design.ExpressionEditor.GetExpressionEditor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>expressionBuilderType</code> is `null`.  \n  \n \\- or -  \n  \n <code>serviceProvider</code> is `null`."
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Web.UI.Design/ExpressionEditor.xml
  ms.technology:
  - dotnet-webforms
  ms.author: riande
  manager: wpickett
- uid: System.Web.UI.Design.ExpressionEditor.GetExpressionEditorSheet(System.String,System.IServiceProvider)
  commentId: M:System.Web.UI.Design.ExpressionEditor.GetExpressionEditorSheet(System.String,System.IServiceProvider)
  id: GetExpressionEditorSheet(System.String,System.IServiceProvider)
  parent: System.Web.UI.Design.ExpressionEditor
  langs:
  - csharp
  name: GetExpressionEditorSheet(String, IServiceProvider)
  nameWithType: ExpressionEditor.GetExpressionEditorSheet(String, IServiceProvider)
  fullName: ExpressionEditor.GetExpressionEditorSheet(String, IServiceProvider)
  type: Method
  assemblies:
  - System.Design
  namespace: System.Web.UI.Design
  summary: Returns an expression editor sheet that is associated with the current expression editor.
  remarks: "The <xref:System.Web.UI.Design.ExpressionEditor.GetExpressionEditorSheet%2A> method returns an <xref:System.Web.UI.Design.ExpressionEditorSheet> implementation that defines the strings that are combined to form a custom expression. The visual designer uses an expression editor sheet to prompt for one or more strings that combine into a custom expression. The base class method returns a default expression editor sheet, which uses a single input string to form the expression. The expression editor sheet defines the property grid for the expression. Therefore, the properties that the expression editor exposes become properties that can be defined for the expression in the dialog box.  \n  \n Classes deriving from the <xref:System.Web.UI.Design.ExpressionEditor> class optionally can override the <xref:System.Web.UI.Design.ExpressionEditor.GetExpressionEditorSheet%2A> method to provide a custom expression editor sheet. A custom expression editor sheet can allow design-time input for multiple properties, which are combined together to form the expression string.  \n  \n For example, the <xref:System.Web.UI.Design.ResourceExpressionEditor> class derives from the <xref:System.Web.UI.Design.ExpressionEditor> class and provides an implementation for evaluating and associating a resource string reference with a control property at design time. The <xref:System.Web.Compilation.ResourceExpressionBuilder> class is associated with the expression prefix `Resources` and the <xref:System.Web.UI.Design.ResourceExpressionEditor> implementation. The <xref:System.Web.UI.Design.ResourceExpressionEditor.GetExpressionEditorSheet%2A?displayProperty=fullName> method returns a <xref:System.Web.UI.Design.ResourceExpressionEditorSheet>, which defines the individual properties that form a resource reference expression."
  syntax:
    content: public virtual System.Web.UI.Design.ExpressionEditorSheet GetExpressionEditorSheet (string expression, IServiceProvider serviceProvider);
    parameters:
    - id: expression
      type: System.String
      description: The expression string set for a control property, used to initialize the expression editor sheet.
    - id: serviceProvider
      type: System.IServiceProvider
      description: A service provider implementation supplied by the designer host, used to obtain additional design-time services.
    return:
      type: System.Web.UI.Design.ExpressionEditorSheet
      description: An <xref href="System.Web.UI.Design.ExpressionEditorSheet"></xref> that defines the custom expression properties.
  overload: System.Web.UI.Design.ExpressionEditor.GetExpressionEditorSheet*
  exceptions: []
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Web.UI.Design/ExpressionEditor.xml
  ms.technology:
  - dotnet-webforms
  ms.author: riande
  manager: wpickett
references:
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.ArgumentNullException
  parent: System
  isExternal: false
  name: ArgumentNullException
  nameWithType: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: System.Web.UI.Design.ExpressionEditor.#ctor
  parent: System.Web.UI.Design.ExpressionEditor
  isExternal: false
  name: ExpressionEditor()
  nameWithType: ExpressionEditor.ExpressionEditor()
  fullName: ExpressionEditor.ExpressionEditor()
- uid: System.Web.UI.Design.ExpressionEditor.EvaluateExpression(System.String,System.Object,System.Type,System.IServiceProvider)
  parent: System.Web.UI.Design.ExpressionEditor
  isExternal: false
  name: EvaluateExpression(String, Object, Type, IServiceProvider)
  nameWithType: ExpressionEditor.EvaluateExpression(String, Object, Type, IServiceProvider)
  fullName: ExpressionEditor.EvaluateExpression(String, Object, Type, IServiceProvider)
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Type
  parent: System
  isExternal: false
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.IServiceProvider
  parent: System
  isExternal: false
  name: IServiceProvider
  nameWithType: IServiceProvider
  fullName: System.IServiceProvider
- uid: System.Web.UI.Design.ExpressionEditor.ExpressionPrefix
  parent: System.Web.UI.Design.ExpressionEditor
  isExternal: false
  name: ExpressionPrefix
  nameWithType: ExpressionEditor.ExpressionPrefix
  fullName: ExpressionEditor.ExpressionPrefix
- uid: System.Web.UI.Design.ExpressionEditor.GetExpressionEditor(System.String,System.IServiceProvider)
  parent: System.Web.UI.Design.ExpressionEditor
  isExternal: false
  name: GetExpressionEditor(String, IServiceProvider)
  nameWithType: ExpressionEditor.GetExpressionEditor(String, IServiceProvider)
  fullName: ExpressionEditor.GetExpressionEditor(String, IServiceProvider)
- uid: System.Web.UI.Design.ExpressionEditor
  parent: System.Web.UI.Design
  isExternal: false
  name: ExpressionEditor
  nameWithType: ExpressionEditor
  fullName: System.Web.UI.Design.ExpressionEditor
- uid: System.Web.UI.Design.ExpressionEditor.GetExpressionEditor(System.Type,System.IServiceProvider)
  parent: System.Web.UI.Design.ExpressionEditor
  isExternal: false
  name: GetExpressionEditor(Type, IServiceProvider)
  nameWithType: ExpressionEditor.GetExpressionEditor(Type, IServiceProvider)
  fullName: ExpressionEditor.GetExpressionEditor(Type, IServiceProvider)
- uid: System.Web.UI.Design.ExpressionEditor.GetExpressionEditorSheet(System.String,System.IServiceProvider)
  parent: System.Web.UI.Design.ExpressionEditor
  isExternal: false
  name: GetExpressionEditorSheet(String, IServiceProvider)
  nameWithType: ExpressionEditor.GetExpressionEditorSheet(String, IServiceProvider)
  fullName: ExpressionEditor.GetExpressionEditorSheet(String, IServiceProvider)
- uid: System.Web.UI.Design.ExpressionEditorSheet
  parent: System.Web.UI.Design
  isExternal: false
  name: ExpressionEditorSheet
  nameWithType: ExpressionEditorSheet
  fullName: System.Web.UI.Design.ExpressionEditorSheet
- uid: System.Web.UI.Design.ExpressionEditor.#ctor*
  parent: System.Web.UI.Design.ExpressionEditor
  isExternal: false
  name: ExpressionEditor
  nameWithType: ExpressionEditor.ExpressionEditor
  fullName: ExpressionEditor.ExpressionEditor
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Web.UI.Design/ExpressionEditor.xml
- uid: System.Web.UI.Design.ExpressionEditor.EvaluateExpression*
  parent: System.Web.UI.Design.ExpressionEditor
  isExternal: false
  name: EvaluateExpression
  nameWithType: ExpressionEditor.EvaluateExpression
  fullName: ExpressionEditor.EvaluateExpression
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Web.UI.Design/ExpressionEditor.xml
- uid: System.Web.UI.Design.ExpressionEditor.ExpressionPrefix*
  parent: System.Web.UI.Design.ExpressionEditor
  isExternal: false
  name: ExpressionPrefix
  nameWithType: ExpressionEditor.ExpressionPrefix
  fullName: ExpressionEditor.ExpressionPrefix
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Web.UI.Design/ExpressionEditor.xml
- uid: System.Web.UI.Design.ExpressionEditor.GetExpressionEditor*
  parent: System.Web.UI.Design.ExpressionEditor
  isExternal: false
  name: GetExpressionEditor
  nameWithType: ExpressionEditor.GetExpressionEditor
  fullName: ExpressionEditor.GetExpressionEditor
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Web.UI.Design/ExpressionEditor.xml
- uid: System.Web.UI.Design.ExpressionEditor.GetExpressionEditorSheet*
  parent: System.Web.UI.Design.ExpressionEditor
  isExternal: false
  name: GetExpressionEditorSheet
  nameWithType: ExpressionEditor.GetExpressionEditorSheet
  fullName: ExpressionEditor.GetExpressionEditorSheet
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Web.UI.Design/ExpressionEditor.xml
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: false
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: Object.Equals(Object)
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: false
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: Object.Equals(Object, Object)
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: false
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: Object.GetHashCode()
- uid: System.Object.GetType
  parent: System.Object
  isExternal: false
  name: GetType()
  nameWithType: Object.GetType()
  fullName: Object.GetType()
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: false
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: Object.MemberwiseClone()
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: false
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: Object.ReferenceEquals(Object, Object)
- uid: System.Object.ToString
  parent: System.Object
  isExternal: false
  name: ToString()
  nameWithType: Object.ToString()
  fullName: Object.ToString()
