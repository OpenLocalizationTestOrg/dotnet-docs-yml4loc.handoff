{"nodes":[{"content":"Represents the abstract class from which all implementations of Hash-based Message Authentication Code (HMAC) must derive.","nodes":[{"pos":[0,122],"content":"Represents the abstract class from which all implementations of Hash-based Message Authentication Code (HMAC) must derive.","nodes":[{"content":"Represents the abstract class from which all implementations of Hash-based Message Authentication Code (HMAC) must derive.","pos":[0,122]}]}],"pos":[941,1064],"yaml":true},{"content":"A Hash-based Message Authentication Code (HMAC) can be used to determine whether a message sent over an insecure channel has been tampered with, provided that the sender and receiver share a secret key. The sender computes the hash value for the original data and sends both the original data and the HMAC as a single message. The receiver recomputes the hash value on the received message and checks that the computed hash value matches the transmitted hash value.  \n  \n HMAC can be used with any iterative cryptographic hash function, such as MD5 or SHA-1, in combination with a secret shared key. The cryptographic strength of HMAC depends on the properties of the underlying hash function.  \n  \n Any change to the data or the hash value results in a mismatch, because knowledge of the secret key is required to change the message and reproduce the correct hash value. Therefore, if the original and computed hash values match, the message is authenticated.","nodes":[{"pos":[0,465],"content":"A Hash-based Message Authentication Code (HMAC) can be used to determine whether a message sent over an insecure channel has been tampered with, provided that the sender and receiver share a secret key. The sender computes the hash value for the original data and sends both the original data and the HMAC as a single message. The receiver recomputes the hash value on the received message and checks that the computed hash value matches the transmitted hash value.","nodes":[{"content":"A Hash-based Message Authentication Code (HMAC) can be used to determine whether a message sent over an insecure channel has been tampered with, provided that the sender and receiver share a secret key. The sender computes the hash value for the original data and sends both the original data and the HMAC as a single message. The receiver recomputes the hash value on the received message and checks that the computed hash value matches the transmitted hash value.","pos":[0,465],"nodes":[{"content":"A Hash-based Message Authentication Code (HMAC) can be used to determine whether a message sent over an insecure channel has been tampered with, provided that the sender and receiver share a secret key.","pos":[0,202]},{"content":"The sender computes the hash value for the original data and sends both the original data and the HMAC as a single message.","pos":[203,326]},{"content":"The receiver recomputes the hash value on the received message and checks that the computed hash value matches the transmitted hash value.","pos":[327,465]}]}]},{"pos":[472,693],"content":"HMAC can be used with any iterative cryptographic hash function, such as MD5 or SHA-1, in combination with a secret shared key. The cryptographic strength of HMAC depends on the properties of the underlying hash function.","nodes":[{"content":"HMAC can be used with any iterative cryptographic hash function, such as MD5 or SHA-1, in combination with a secret shared key. The cryptographic strength of HMAC depends on the properties of the underlying hash function.","pos":[0,221],"nodes":[{"content":"HMAC can be used with any iterative cryptographic hash function, such as MD5 or SHA-1, in combination with a secret shared key.","pos":[0,127]},{"content":"The cryptographic strength of HMAC depends on the properties of the underlying hash function.","pos":[128,221]}]}]},{"pos":[700,960],"content":"Any change to the data or the hash value results in a mismatch, because knowledge of the secret key is required to change the message and reproduce the correct hash value. Therefore, if the original and computed hash values match, the message is authenticated.","nodes":[{"content":"Any change to the data or the hash value results in a mismatch, because knowledge of the secret key is required to change the message and reproduce the correct hash value. Therefore, if the original and computed hash values match, the message is authenticated.","pos":[0,260],"nodes":[{"content":"Any change to the data or the hash value results in a mismatch, because knowledge of the secret key is required to change the message and reproduce the correct hash value.","pos":[0,171]},{"content":"Therefore, if the original and computed hash values match, the message is authenticated.","pos":[172,260]}]}]}],"pos":[1075,2042],"yaml":true,"extradata":"MT"},{"content":"Initializes a new instance of the <xref href=\"System.Security.Cryptography.HMAC\"></xref> class.","nodes":[{"pos":[0,95],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Security.Cryptography.HMAC\"&gt;&lt;/xref&gt;</ph> class.","source":"Initializes a new instance of the <xref href=\"System.Security.Cryptography.HMAC\"></xref> class."}],"pos":[5525,5621],"yaml":true},{"content":"Gets or sets the block size to use in the hash value.","nodes":[{"pos":[0,53],"content":"Gets or sets the block size to use in the hash value.","nodes":[{"content":"Gets or sets the block size to use in the hash value.","pos":[0,53]}]}],"pos":[7116,7170],"yaml":true},{"content":"A Hash-based Message Authentication Code (HMAC) uses a hash function where data is hashed by iterating a basic compression function on blocks of data. <xref:System.Security.Cryptography.HMAC.BlockSizeValue%2A> is the byte size of such a block. Its value is 64 bytes.","nodes":[{"pos":[0,266],"content":"A Hash-based Message Authentication Code (HMAC) uses a hash function where data is hashed by iterating a basic compression function on blocks of data. <xref:System.Security.Cryptography.HMAC.BlockSizeValue%2A> is the byte size of such a block. Its value is 64 bytes.","nodes":[{"content":"A Hash-based Message Authentication Code (HMAC) uses a hash function where data is hashed by iterating a basic compression function on blocks of data. <xref:System.Security.Cryptography.HMAC.BlockSizeValue%2A> is the byte size of such a block. Its value is 64 bytes.","pos":[0,266],"nodes":[{"content":"A Hash-based Message Authentication Code (HMAC) uses a hash function where data is hashed by iterating a basic compression function on blocks of data.","pos":[0,150]},{"content":"<ph id=\"ph1\">&lt;xref:System.Security.Cryptography.HMAC.BlockSizeValue%2A&gt;</ph> is the byte size of such a block.","pos":[151,243],"source":" <xref:System.Security.Cryptography.HMAC.BlockSizeValue%2A> is the byte size of such a block."},{"content":"Its value is 64 bytes.","pos":[244,266]}]}]}],"pos":[7181,7448],"yaml":true,"extradata":"MT"},{"content":"The block size to use in the hash value.","nodes":[{"pos":[0,40],"content":"The block size to use in the hash value.","nodes":[{"content":"The block size to use in the hash value.","pos":[0,40]}]}],"pos":[7570,7611],"yaml":true},{"content":"Creates an instance of the default implementation of a Hash-based Message Authentication Code (HMAC).","nodes":[{"pos":[0,101],"content":"Creates an instance of the default implementation of a Hash-based Message Authentication Code (HMAC).","nodes":[{"content":"Creates an instance of the default implementation of a Hash-based Message Authentication Code (HMAC).","pos":[0,101]}]}],"pos":[8826,8928],"yaml":true},{"content":"By default, this overload uses the SHA-1 implementation of HMAC. If you want to specify a different implementation, use the <xref:System.Security.Cryptography.HMAC.Create%28System.String%29> overload, which lets you specify an algorithm name, instead.","nodes":[{"pos":[0,251],"content":"By default, this overload uses the SHA-1 implementation of HMAC. If you want to specify a different implementation, use the <xref:System.Security.Cryptography.HMAC.Create%28System.String%29> overload, which lets you specify an algorithm name, instead.","nodes":[{"content":"By default, this overload uses the SHA-1 implementation of HMAC. If you want to specify a different implementation, use the <xref:System.Security.Cryptography.HMAC.Create%28System.String%29> overload, which lets you specify an algorithm name, instead.","pos":[0,251],"nodes":[{"content":"By default, this overload uses the SHA-1 implementation of HMAC.","pos":[0,64]},{"content":"If you want to specify a different implementation, use the <ph id=\"ph1\">&lt;xref:System.Security.Cryptography.HMAC.Create%28System.String%29&gt;</ph> overload, which lets you specify an algorithm name, instead.","pos":[65,251],"source":" If you want to specify a different implementation, use the <xref:System.Security.Cryptography.HMAC.Create%28System.String%29> overload, which lets you specify an algorithm name, instead."}]}]}],"pos":[8939,9191],"yaml":true,"extradata":"MT"},{"content":"A new SHA-1 instance, unless the default settings have been changed by using the [<cryptoClass> element](~/docs/framework/configure-apps/file-schema/cryptography/cryptoclass-element.md).","nodes":[{"pos":[0,186],"content":"A new SHA-1 instance, unless the default settings have been changed by using the <bpt id=\"p1\">[</bpt><ph id=\"ph1\">&lt;cryptoClass&gt;</ph> element<ept id=\"p1\">](~/docs/framework/configure-apps/file-schema/cryptography/cryptoclass-element.md)</ept>.","source":"A new SHA-1 instance, unless the default settings have been changed by using the [<cryptoClass> element](~/docs/framework/configure-apps/file-schema/cryptography/cryptoclass-element.md)."}],"pos":[9369,9556],"yaml":true},{"content":"Creates an instance of the specified implementation of a Hash-based Message Authentication Code (HMAC).","nodes":[{"pos":[0,103],"content":"Creates an instance of the specified implementation of a Hash-based Message Authentication Code (HMAC).","nodes":[{"content":"Creates an instance of the specified implementation of a Hash-based Message Authentication Code (HMAC).","pos":[0,103]}]}],"pos":[10826,10930],"yaml":true},{"content":"HMAC supports a number of hash algorithms, including MD5, SHA-1, SHA-256, and RIPEMD160. For the full list, see the supported values for the `algorithmName` parameter.","nodes":[{"pos":[0,167],"content":"HMAC supports a number of hash algorithms, including MD5, SHA-1, SHA-256, and RIPEMD160. For the full list, see the supported values for the `algorithmName` parameter.","nodes":[{"content":"HMAC supports a number of hash algorithms, including MD5, SHA-1, SHA-256, and RIPEMD160.","pos":[0,88]},{"content":"For the full list, see the supported values for the <ph id=\"ph1\">`algorithmName`</ph> parameter.","pos":[89,167],"source":" For the full list, see the supported values for the `algorithmName` parameter."}]}],"pos":[10941,11109],"yaml":true,"extradata":"MT"},{"content":"The HMAC implementation to use. The following table shows the valid values for the <code>algorithmName</code> parameter and the algorithms they map to.  \n  \n <table><thead><tr><th> Parameter value  \n  \n </th><th> Implements  \n  \n </th></tr></thead><tbody><tr><td> System.Security.Cryptography.HMAC  \n  \n </td><td><xref href=\"System.Security.Cryptography.HMACSHA1\"></xref></td></tr><tr><td> System.Security.Cryptography.KeyedHashAlgorithm  \n  \n </td><td><xref href=\"System.Security.Cryptography.HMACSHA1\"></xref></td></tr><tr><td> HMACMD5  \n  \n </td><td><xref href=\"System.Security.Cryptography.HMACMD5\"></xref></td></tr><tr><td> System.Security.Cryptography.HMACMD5  \n  \n </td><td><xref href=\"System.Security.Cryptography.HMACMD5\"></xref></td></tr><tr><td> HMACRIPEMD160  \n  \n </td><td><xref href=\"System.Security.Cryptography.HMACRIPEMD160\"></xref></td></tr><tr><td> System.Security.Cryptography.HMACRIPEMD160  \n  \n </td><td><xref href=\"System.Security.Cryptography.HMACRIPEMD160\"></xref></td></tr><tr><td> HMACSHA1  \n  \n </td><td><xref href=\"System.Security.Cryptography.HMACSHA1\"></xref></td></tr><tr><td> System.Security.Cryptography.HMACSHA1  \n  \n </td><td><xref href=\"System.Security.Cryptography.HMACSHA1\"></xref></td></tr><tr><td> HMACSHA256  \n  \n </td><td><xref href=\"System.Security.Cryptography.HMACSHA256\"></xref></td></tr><tr><td> System.Security.Cryptography.HMACSHA256  \n  \n </td><td><xref href=\"System.Security.Cryptography.HMACSHA256\"></xref></td></tr><tr><td> HMACSHA384  \n  \n </td><td><xref href=\"System.Security.Cryptography.HMACSHA384\"></xref></td></tr><tr><td> System.Security.Cryptography.HMACSHA384  \n  \n </td><td><xref href=\"System.Security.Cryptography.HMACSHA384\"></xref></td></tr><tr><td> HMACSHA512  \n  \n </td><td><xref href=\"System.Security.Cryptography.HMACSHA512\"></xref></td></tr><tr><td> System.Security.Cryptography.HMACSHA512  \n  \n </td><td><xref href=\"System.Security.Cryptography.HMACSHA512\"></xref></td></tr><tr><td> MACTripleDES  \n  \n </td><td><xref href=\"System.Security.Cryptography.MACTripleDES\"></xref></td></tr><tr><td> System.Security.Cryptography.MACTripleDES  \n  \n </td><td><xref href=\"System.Security.Cryptography.MACTripleDES\"></xref></td></tr></tbody></table>","nodes":[{"pos":[0,151],"content":"The HMAC implementation to use. The following table shows the valid values for the <code>algorithmName</code> parameter and the algorithms they map to.","nodes":[{"content":"The HMAC implementation to use.","pos":[0,31]},{"content":"The following table shows the valid values for the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">algorithmName</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter and the algorithms they map to.","pos":[32,151],"source":" The following table shows the valid values for the <code>algorithmName</code> parameter and the algorithms they map to."}]},{"pos":[158,2211],"content":"<table><thead><tr><th> Parameter value  \n  \n </th><th> Implements  \n  \n </th></tr></thead><tbody><tr><td> System.Security.Cryptography.HMAC  \n  \n </td><td><xref href=\"System.Security.Cryptography.HMACSHA1\"></xref></td></tr><tr><td> System.Security.Cryptography.KeyedHashAlgorithm  \n  \n </td><td><xref href=\"System.Security.Cryptography.HMACSHA1\"></xref></td></tr><tr><td> HMACMD5  \n  \n </td><td><xref href=\"System.Security.Cryptography.HMACMD5\"></xref></td></tr><tr><td> System.Security.Cryptography.HMACMD5  \n  \n </td><td><xref href=\"System.Security.Cryptography.HMACMD5\"></xref></td></tr><tr><td> HMACRIPEMD160  \n  \n </td><td><xref href=\"System.Security.Cryptography.HMACRIPEMD160\"></xref></td></tr><tr><td> System.Security.Cryptography.HMACRIPEMD160  \n  \n </td><td><xref href=\"System.Security.Cryptography.HMACRIPEMD160\"></xref></td></tr><tr><td> HMACSHA1  \n  \n </td><td><xref href=\"System.Security.Cryptography.HMACSHA1\"></xref></td></tr><tr><td> System.Security.Cryptography.HMACSHA1  \n  \n </td><td><xref href=\"System.Security.Cryptography.HMACSHA1\"></xref></td></tr><tr><td> HMACSHA256  \n  \n </td><td><xref href=\"System.Security.Cryptography.HMACSHA256\"></xref></td></tr><tr><td> System.Security.Cryptography.HMACSHA256  \n  \n </td><td><xref href=\"System.Security.Cryptography.HMACSHA256\"></xref></td></tr><tr><td> HMACSHA384  \n  \n </td><td><xref href=\"System.Security.Cryptography.HMACSHA384\"></xref></td></tr><tr><td> System.Security.Cryptography.HMACSHA384  \n  \n </td><td><xref href=\"System.Security.Cryptography.HMACSHA384\"></xref></td></tr><tr><td> HMACSHA512  \n  \n </td><td><xref href=\"System.Security.Cryptography.HMACSHA512\"></xref></td></tr><tr><td> System.Security.Cryptography.HMACSHA512  \n  \n </td><td><xref href=\"System.Security.Cryptography.HMACSHA512\"></xref></td></tr><tr><td> MACTripleDES  \n  \n </td><td><xref href=\"System.Security.Cryptography.MACTripleDES\"></xref></td></tr><tr><td> System.Security.Cryptography.MACTripleDES  \n  \n </td><td><xref href=\"System.Security.Cryptography.MACTripleDES\"></xref></td></tr></tbody></table>","nodes":[{"content":"Parameter value","pos":[23,43],"source":" Parameter value  \n  \n "},{"content":"Implements","pos":[55,70],"source":" Implements  \n  \n "},{"content":"System.Security.Cryptography.HMAC","pos":[106,144],"source":" System.Security.Cryptography.HMAC  \n  \n "},{"content":"System.Security.Cryptography.KeyedHashAlgorithm","pos":[232,284],"source":" System.Security.Cryptography.KeyedHashAlgorithm  \n  \n "},{"content":"HMACMD5","pos":[372,384],"source":" HMACMD5  \n  \n "},{"content":"System.Security.Cryptography.HMACMD5","pos":[471,512],"source":" System.Security.Cryptography.HMACMD5  \n  \n "},{"content":"HMACRIPEMD160","pos":[599,617],"source":" HMACRIPEMD160  \n  \n "},{"content":"System.Security.Cryptography.HMACRIPEMD160","pos":[710,757],"source":" System.Security.Cryptography.HMACRIPEMD160  \n  \n "},{"content":"HMACSHA1","pos":[850,863],"source":" HMACSHA1  \n  \n "},{"content":"System.Security.Cryptography.HMACSHA1","pos":[951,993],"source":" System.Security.Cryptography.HMACSHA1  \n  \n "},{"content":"HMACSHA256","pos":[1081,1096],"source":" HMACSHA256  \n  \n "},{"content":"System.Security.Cryptography.HMACSHA256","pos":[1186,1230],"source":" System.Security.Cryptography.HMACSHA256  \n  \n "},{"content":"HMACSHA384","pos":[1320,1335],"source":" HMACSHA384  \n  \n "},{"content":"System.Security.Cryptography.HMACSHA384","pos":[1425,1469],"source":" System.Security.Cryptography.HMACSHA384  \n  \n "},{"content":"HMACSHA512","pos":[1559,1574],"source":" HMACSHA512  \n  \n "},{"content":"System.Security.Cryptography.HMACSHA512","pos":[1664,1708],"source":" System.Security.Cryptography.HMACSHA512  \n  \n "},{"content":"MACTripleDES","pos":[1798,1815],"source":" MACTripleDES  \n  \n "},{"content":"System.Security.Cryptography.MACTripleDES","pos":[1907,1953],"source":" System.Security.Cryptography.MACTripleDES  \n  \n "}]}],"pos":[11296,13579],"yaml":true},{"content":"A new instance of the specified HMAC implementation.","nodes":[{"pos":[0,52],"content":"A new instance of the specified HMAC implementation.","nodes":[{"content":"A new instance of the specified HMAC implementation.","pos":[0,52]}]}],"pos":[13656,13709],"yaml":true},{"content":"Releases the unmanaged resources used by the <xref href=\"System.Security.Cryptography.HMAC\"></xref> class when a key change is legitimate and optionally releases the managed resources.","nodes":[{"pos":[0,184],"content":"Releases the unmanaged resources used by the <ph id=\"ph1\">&lt;xref href=\"System.Security.Cryptography.HMAC\"&gt;&lt;/xref&gt;</ph> class when a key change is legitimate and optionally releases the managed resources.","source":"Releases the unmanaged resources used by the <xref href=\"System.Security.Cryptography.HMAC\"></xref> class when a key change is legitimate and optionally releases the managed resources."}],"pos":[14991,15176],"yaml":true},{"content":"This method is called by the public `Dispose()` method and the `Finalize` method. `Dispose()` invokes the protected `Dispose(Boolean)` method with the `disposing` parameter set to `true`. `Finalize` invokes `Dispose` with `disposing` set to `false`.  \n  \n When the `disposing` parameter is `true`, this method releases all resources held by any managed objects that this <xref:System.Security.Cryptography.HMAC> references. This method invokes the `Dispose()` method of each referenced object.","nodes":[{"pos":[0,249],"content":"This method is called by the public `Dispose()` method and the `Finalize` method. `Dispose()` invokes the protected `Dispose(Boolean)` method with the `disposing` parameter set to `true`. `Finalize` invokes `Dispose` with `disposing` set to `false`.","nodes":[{"content":"This method is called by the public <ph id=\"ph1\">`Dispose()`</ph> method and the <ph id=\"ph2\">`Finalize`</ph> method.","pos":[0,81],"source":"This method is called by the public `Dispose()` method and the `Finalize` method."},{"content":"<ph id=\"ph1\">`Dispose()`</ph> invokes the protected <ph id=\"ph2\">`Dispose(Boolean)`</ph> method with the <ph id=\"ph3\">`disposing`</ph> parameter set to <ph id=\"ph4\">`true`</ph>.","pos":[82,187],"source":"`Dispose()` invokes the protected `Dispose(Boolean)` method with the `disposing` parameter set to `true`."},{"content":"<ph id=\"ph1\">`Finalize`</ph> invokes <ph id=\"ph2\">`Dispose`</ph> with <ph id=\"ph3\">`disposing`</ph> set to <ph id=\"ph4\">`false`</ph>.","pos":[188,249],"source":"`Finalize` invokes `Dispose` with `disposing` set to `false`."}]},{"pos":[256,493],"content":"When the `disposing` parameter is `true`, this method releases all resources held by any managed objects that this <xref:System.Security.Cryptography.HMAC> references. This method invokes the `Dispose()` method of each referenced object.","nodes":[{"content":"When the <ph id=\"ph1\">`disposing`</ph> parameter is <ph id=\"ph2\">`true`</ph>, this method releases all resources held by any managed objects that this <ph id=\"ph3\">&lt;xref:System.Security.Cryptography.HMAC&gt;</ph> references.","pos":[0,167],"source":"When the `disposing` parameter is `true`, this method releases all resources held by any managed objects that this <xref:System.Security.Cryptography.HMAC> references."},{"content":"This method invokes the <ph id=\"ph1\">`Dispose()`</ph> method of each referenced object.","pos":[168,237],"source":" This method invokes the `Dispose()` method of each referenced object."}]}],"pos":[15187,15685],"yaml":true,"extradata":"MT"},{"content":"`true` to release both managed and unmanaged resources; `false` to release only unmanaged resources.","nodes":[{"pos":[0,100],"content":"<ph id=\"ph1\">`true`</ph> to release both managed and unmanaged resources; <ph id=\"ph2\">`false`</ph> to release only unmanaged resources.","source":"`true` to release both managed and unmanaged resources; `false` to release only unmanaged resources."}],"pos":[15840,15943],"yaml":true},{"content":"When overridden in a derived class, routes data written to the object into the default <xref href=\"System.Security.Cryptography.HMAC\"></xref> hash algorithm for computing the hash value.","nodes":[{"pos":[0,186],"content":"When overridden in a derived class, routes data written to the object into the default <ph id=\"ph1\">&lt;xref href=\"System.Security.Cryptography.HMAC\"&gt;&lt;/xref&gt;</ph> hash algorithm for computing the hash value.","source":"When overridden in a derived class, routes data written to the object into the default <xref href=\"System.Security.Cryptography.HMAC\"></xref> hash algorithm for computing the hash value."}],"pos":[17530,17717],"yaml":true},{"content":"This method is not called by application code.  \n  \n This abstract method performs the hash computation. Every write to the cryptographic stream object passes the data through this method. For each block of data, this method updates the state of the hash object so that a correct hash value is returned at the end of the data stream.","nodes":[{"pos":[0,46],"content":"This method is not called by application code.","nodes":[{"content":"This method is not called by application code.","pos":[0,46]}]},{"pos":[53,333],"content":"This abstract method performs the hash computation. Every write to the cryptographic stream object passes the data through this method. For each block of data, this method updates the state of the hash object so that a correct hash value is returned at the end of the data stream.","nodes":[{"content":"This abstract method performs the hash computation. Every write to the cryptographic stream object passes the data through this method. For each block of data, this method updates the state of the hash object so that a correct hash value is returned at the end of the data stream.","pos":[0,280],"nodes":[{"content":"This abstract method performs the hash computation.","pos":[0,51]},{"content":"Every write to the cryptographic stream object passes the data through this method.","pos":[52,135]},{"content":"For each block of data, this method updates the state of the hash object so that a correct hash value is returned at the end of the data stream.","pos":[136,280]}]}]}],"pos":[17728,18066],"yaml":true,"extradata":"MT"},{"content":"The input data.","nodes":[{"pos":[0,15],"content":"The input data.","nodes":[{"content":"The input data.","pos":[0,15]}]}],"pos":[18227,18243],"yaml":true},{"content":"The offset into the byte array from which to begin using data.","nodes":[{"pos":[0,62],"content":"The offset into the byte array from which to begin using data.","nodes":[{"content":"The offset into the byte array from which to begin using data.","pos":[0,62]}]}],"pos":[18300,18363],"yaml":true},{"content":"The number of bytes in the array to use as data.","nodes":[{"pos":[0,48],"content":"The number of bytes in the array to use as data.","nodes":[{"content":"The number of bytes in the array to use as data.","pos":[0,48]}]}],"pos":[18420,18469],"yaml":true},{"content":"When overridden in a derived class, finalizes the hash computation after the last data is processed by the cryptographic stream object.","nodes":[{"pos":[0,135],"content":"When overridden in a derived class, finalizes the hash computation after the last data is processed by the cryptographic stream object.","nodes":[{"content":"When overridden in a derived class, finalizes the hash computation after the last data is processed by the cryptographic stream object.","pos":[0,135]}]}],"pos":[19880,20016],"yaml":true},{"content":"This method is not called by application code. This method finalizes any partial computation and returns the correct hash value of the data stream.","nodes":[{"pos":[0,147],"content":"This method is not called by application code. This method finalizes any partial computation and returns the correct hash value of the data stream.","nodes":[{"content":"This method is not called by application code. This method finalizes any partial computation and returns the correct hash value of the data stream.","pos":[0,147],"nodes":[{"content":"This method is not called by application code.","pos":[0,46]},{"content":"This method finalizes any partial computation and returns the correct hash value of the data stream.","pos":[47,147]}]}]}],"pos":[20027,20175],"yaml":true,"extradata":"MT"},{"content":"The computed hash code in a byte array.","nodes":[{"pos":[0,39],"content":"The computed hash code in a byte array.","nodes":[{"content":"The computed hash code in a byte array.","pos":[0,39]}]}],"pos":[20314,20354],"yaml":true},{"content":"Gets or sets the name of the hash algorithm to use for hashing.","nodes":[{"pos":[0,63],"content":"Gets or sets the name of the hash algorithm to use for hashing.","nodes":[{"content":"Gets or sets the name of the hash algorithm to use for hashing.","pos":[0,63]}]}],"pos":[21756,21820],"yaml":true},{"content":"The name of the hash algorithm.","nodes":[{"pos":[0,31],"content":"The name of the hash algorithm.","nodes":[{"content":"The name of the hash algorithm.","pos":[0,31]}]}],"pos":[21937,21969],"yaml":true},{"content":"The current hash algorithm cannot be changed.","nodes":[{"pos":[0,45],"content":"The current hash algorithm cannot be changed.","nodes":[{"content":"The current hash algorithm cannot be changed.","pos":[0,45]}]}],"pos":[22187,22233],"yaml":true},{"content":"Initializes an instance of the default implementation of <xref href=\"System.Security.Cryptography.HMAC\"></xref>.","nodes":[{"pos":[0,112],"content":"Initializes an instance of the default implementation of <ph id=\"ph1\">&lt;xref href=\"System.Security.Cryptography.HMAC\"&gt;&lt;/xref&gt;</ph>.","source":"Initializes an instance of the default implementation of <xref href=\"System.Security.Cryptography.HMAC\"></xref>."}],"pos":[23577,23690],"yaml":true},{"content":"A Hash-based Message Authentication Code (HMAC) can be used to determine whether a message sent over an insecure channel has been tampered with, provided that the sender and receiver share a secret key. The sender computes the hash value for the original data and sends both the original data and the HMAC as a single message. The receiver recomputes the hash value on the received message and checks that the computed hash value matches the transmitted hash value.  \n  \n HMAC can be used with any iterative cryptographic hash function, such as MD5 or SHA-1, in combination with a secret shared key. The cryptographic strength of HMAC depends on the properties of the underlying hash function.  \n  \n Any change to the data or the hash value will result in a mismatch, because knowledge of the secret key is required to change the message and reproduce the correct hash value. Therefore, if the original and computed hash values match, the message is authenticated.","nodes":[{"pos":[0,465],"content":"A Hash-based Message Authentication Code (HMAC) can be used to determine whether a message sent over an insecure channel has been tampered with, provided that the sender and receiver share a secret key. The sender computes the hash value for the original data and sends both the original data and the HMAC as a single message. The receiver recomputes the hash value on the received message and checks that the computed hash value matches the transmitted hash value.","nodes":[{"content":"A Hash-based Message Authentication Code (HMAC) can be used to determine whether a message sent over an insecure channel has been tampered with, provided that the sender and receiver share a secret key. The sender computes the hash value for the original data and sends both the original data and the HMAC as a single message. The receiver recomputes the hash value on the received message and checks that the computed hash value matches the transmitted hash value.","pos":[0,465],"nodes":[{"content":"A Hash-based Message Authentication Code (HMAC) can be used to determine whether a message sent over an insecure channel has been tampered with, provided that the sender and receiver share a secret key.","pos":[0,202]},{"content":"The sender computes the hash value for the original data and sends both the original data and the HMAC as a single message.","pos":[203,326]},{"content":"The receiver recomputes the hash value on the received message and checks that the computed hash value matches the transmitted hash value.","pos":[327,465]}]}]},{"pos":[472,693],"content":"HMAC can be used with any iterative cryptographic hash function, such as MD5 or SHA-1, in combination with a secret shared key. The cryptographic strength of HMAC depends on the properties of the underlying hash function.","nodes":[{"content":"HMAC can be used with any iterative cryptographic hash function, such as MD5 or SHA-1, in combination with a secret shared key. The cryptographic strength of HMAC depends on the properties of the underlying hash function.","pos":[0,221],"nodes":[{"content":"HMAC can be used with any iterative cryptographic hash function, such as MD5 or SHA-1, in combination with a secret shared key.","pos":[0,127]},{"content":"The cryptographic strength of HMAC depends on the properties of the underlying hash function.","pos":[128,221]}]}]},{"pos":[700,964],"content":"Any change to the data or the hash value will result in a mismatch, because knowledge of the secret key is required to change the message and reproduce the correct hash value. Therefore, if the original and computed hash values match, the message is authenticated.","nodes":[{"content":"Any change to the data or the hash value will result in a mismatch, because knowledge of the secret key is required to change the message and reproduce the correct hash value. Therefore, if the original and computed hash values match, the message is authenticated.","pos":[0,264],"nodes":[{"content":"Any change to the data or the hash value will result in a mismatch, because knowledge of the secret key is required to change the message and reproduce the correct hash value.","pos":[0,175]},{"content":"Therefore, if the original and computed hash values match, the message is authenticated.","pos":[176,264]}]}]}],"pos":[23701,24672],"yaml":true,"extradata":"MT"},{"content":"Gets or sets the key to use in the hash algorithm.","nodes":[{"pos":[0,50],"content":"Gets or sets the key to use in the hash algorithm.","nodes":[{"content":"Gets or sets the key to use in the hash algorithm.","pos":[0,50]}]}],"pos":[26123,26174],"yaml":true},{"content":"This property is the key for the keyed hash algorithm.  \n  \n A Hash-based Message Authentication Code (HMAC) can be used to determine whether a message sent over an insecure channel has been tampered with, provided that the sender and receiver share a secret key. The sender computes the hash value for the original data and sends both the original data and the HMAC as a single message. The receiver recomputes the hash value on the received message and checks that the computed hash value matches the transmitted hash value.  \n  \n HMAC can be used with any iterative cryptographic hash function, such as MD5 or SHA-1, in combination with a secret shared key. The cryptographic strength of HMAC depends on the properties of the underlying hash function.  \n  \n Any change to the data or the hash value results in a mismatch, because knowledge of the secret key is required to change the message and reproduce the correct hash value. Therefore, if the original and computed hash values match, the message is authenticated.","nodes":[{"pos":[0,54],"content":"This property is the key for the keyed hash algorithm.","nodes":[{"content":"This property is the key for the keyed hash algorithm.","pos":[0,54]}]},{"pos":[61,526],"content":"A Hash-based Message Authentication Code (HMAC) can be used to determine whether a message sent over an insecure channel has been tampered with, provided that the sender and receiver share a secret key. The sender computes the hash value for the original data and sends both the original data and the HMAC as a single message. The receiver recomputes the hash value on the received message and checks that the computed hash value matches the transmitted hash value.","nodes":[{"content":"A Hash-based Message Authentication Code (HMAC) can be used to determine whether a message sent over an insecure channel has been tampered with, provided that the sender and receiver share a secret key. The sender computes the hash value for the original data and sends both the original data and the HMAC as a single message. The receiver recomputes the hash value on the received message and checks that the computed hash value matches the transmitted hash value.","pos":[0,465],"nodes":[{"content":"A Hash-based Message Authentication Code (HMAC) can be used to determine whether a message sent over an insecure channel has been tampered with, provided that the sender and receiver share a secret key.","pos":[0,202]},{"content":"The sender computes the hash value for the original data and sends both the original data and the HMAC as a single message.","pos":[203,326]},{"content":"The receiver recomputes the hash value on the received message and checks that the computed hash value matches the transmitted hash value.","pos":[327,465]}]}]},{"pos":[533,754],"content":"HMAC can be used with any iterative cryptographic hash function, such as MD5 or SHA-1, in combination with a secret shared key. The cryptographic strength of HMAC depends on the properties of the underlying hash function.","nodes":[{"content":"HMAC can be used with any iterative cryptographic hash function, such as MD5 or SHA-1, in combination with a secret shared key. The cryptographic strength of HMAC depends on the properties of the underlying hash function.","pos":[0,221],"nodes":[{"content":"HMAC can be used with any iterative cryptographic hash function, such as MD5 or SHA-1, in combination with a secret shared key.","pos":[0,127]},{"content":"The cryptographic strength of HMAC depends on the properties of the underlying hash function.","pos":[128,221]}]}]},{"pos":[761,1021],"content":"Any change to the data or the hash value results in a mismatch, because knowledge of the secret key is required to change the message and reproduce the correct hash value. Therefore, if the original and computed hash values match, the message is authenticated.","nodes":[{"content":"Any change to the data or the hash value results in a mismatch, because knowledge of the secret key is required to change the message and reproduce the correct hash value. Therefore, if the original and computed hash values match, the message is authenticated.","pos":[0,260],"nodes":[{"content":"Any change to the data or the hash value results in a mismatch, because knowledge of the secret key is required to change the message and reproduce the correct hash value.","pos":[0,171]},{"content":"Therefore, if the original and computed hash values match, the message is authenticated.","pos":[172,260]}]}]}],"pos":[26185,27215],"yaml":true,"extradata":"MT"},{"content":"The key to use in the hash algorithm.","nodes":[{"pos":[0,37],"content":"The key to use in the hash algorithm.","nodes":[{"content":"The key to use in the hash algorithm.","pos":[0,37]}]}],"pos":[27336,27374],"yaml":true},{"content":"An attempt is made to change the <xref href=\"System.Security.Cryptography.HMAC.Key\"></xref> property after hashing has begun.","nodes":[{"pos":[0,125],"content":"An attempt is made to change the <ph id=\"ph1\">&lt;xref href=\"System.Security.Cryptography.HMAC.Key\"&gt;&lt;/xref&gt;</ph> property after hashing has begun.","source":"An attempt is made to change the <xref href=\"System.Security.Cryptography.HMAC.Key\"></xref> property after hashing has begun."}],"pos":[27587,27713],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Security.Cryptography.HMAC\n  commentId: T:System.Security.Cryptography.HMAC\n  id: HMAC\n  children:\n  - System.Security.Cryptography.HMAC.#ctor\n  - System.Security.Cryptography.HMAC.BlockSizeValue\n  - System.Security.Cryptography.HMAC.Create\n  - System.Security.Cryptography.HMAC.Create(System.String)\n  - System.Security.Cryptography.HMAC.Dispose(System.Boolean)\n  - System.Security.Cryptography.HMAC.HashCore(System.Byte[],System.Int32,System.Int32)\n  - System.Security.Cryptography.HMAC.HashFinal\n  - System.Security.Cryptography.HMAC.HashName\n  - System.Security.Cryptography.HMAC.Initialize\n  - System.Security.Cryptography.HMAC.Key\n  langs:\n  - csharp\n  name: HMAC\n  nameWithType: HMAC\n  fullName: System.Security.Cryptography.HMAC\n  type: Class\n  assemblies:\n  - System.Security.Cryptography.Primitives\n  - mscorlib\n  - netstandard\n  namespace: System.Security.Cryptography\n  summary: Represents the abstract class from which all implementations of Hash-based Message Authentication Code (HMAC) must derive.\n  remarks: \"A Hash-based Message Authentication Code (HMAC) can be used to determine whether a message sent over an insecure channel has been tampered with, provided that the sender and receiver share a secret key. The sender computes the hash value for the original data and sends both the original data and the HMAC as a single message. The receiver recomputes the hash value on the received message and checks that the computed hash value matches the transmitted hash value.  \\n  \\n HMAC can be used with any iterative cryptographic hash function, such as MD5 or SHA-1, in combination with a secret shared key. The cryptographic strength of HMAC depends on the properties of the underlying hash function.  \\n  \\n Any change to the data or the hash value results in a mismatch, because knowledge of the secret key is required to change the message and reproduce the correct hash value. Therefore, if the original and computed hash values match, the message is authenticated.\"\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(true)]\n\n      public abstract class HMAC : System.Security.Cryptography.KeyedHashAlgorithm\n  inheritance:\n  - System.Object\n  - System.Security.Cryptography.HashAlgorithm\n  - System.Security.Cryptography.KeyedHashAlgorithm\n  derivedClasses:\n  - System.Security.Cryptography.HMACMD5\n  - System.Security.Cryptography.HMACRIPEMD160\n  - System.Security.Cryptography.HMACSHA1\n  - System.Security.Cryptography.HMACSHA256\n  - System.Security.Cryptography.HMACSHA384\n  - System.Security.Cryptography.HMACSHA512\n  implements: []\n  inheritedMembers:\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.ToString\n  - System.Security.Cryptography.HashAlgorithm.CanReuseTransform\n  - System.Security.Cryptography.HashAlgorithm.CanTransformMultipleBlocks\n  - System.Security.Cryptography.HashAlgorithm.Clear\n  - System.Security.Cryptography.HashAlgorithm.ComputeHash(System.Byte[])\n  - System.Security.Cryptography.HashAlgorithm.ComputeHash(System.Byte[],System.Int32,System.Int32)\n  - System.Security.Cryptography.HashAlgorithm.ComputeHash(System.IO.Stream)\n  - System.Security.Cryptography.HashAlgorithm.Dispose\n  - System.Security.Cryptography.HashAlgorithm.Hash\n  - System.Security.Cryptography.HashAlgorithm.HashSize\n  - System.Security.Cryptography.HashAlgorithm.HashSizeValue\n  - System.Security.Cryptography.HashAlgorithm.HashValue\n  - System.Security.Cryptography.HashAlgorithm.InputBlockSize\n  - System.Security.Cryptography.HashAlgorithm.OutputBlockSize\n  - System.Security.Cryptography.HashAlgorithm.State\n  - System.Security.Cryptography.HashAlgorithm.TransformBlock(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)\n  - System.Security.Cryptography.HashAlgorithm.TransformFinalBlock(System.Byte[],System.Int32,System.Int32)\n  - System.Security.Cryptography.KeyedHashAlgorithm.KeyValue\n  attributes:\n  - type: System.Runtime.InteropServices.ComVisibleAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/HMAC.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Cryptography.HMAC.#ctor\n  commentId: M:System.Security.Cryptography.HMAC.#ctor\n  id: '#ctor'\n  parent: System.Security.Cryptography.HMAC\n  langs:\n  - csharp\n  name: HMAC()\n  nameWithType: HMAC.HMAC()\n  fullName: HMAC.HMAC()\n  type: Constructor\n  assemblies:\n  - System.Security.Cryptography.Primitives\n  - mscorlib\n  - netstandard\n  namespace: System.Security.Cryptography\n  summary: Initializes a new instance of the <xref href=\"System.Security.Cryptography.HMAC\"></xref> class.\n  syntax:\n    content: protected HMAC ();\n    parameters: []\n  overload: System.Security.Cryptography.HMAC.#ctor*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/HMAC.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Cryptography.HMAC.BlockSizeValue\n  commentId: P:System.Security.Cryptography.HMAC.BlockSizeValue\n  id: BlockSizeValue\n  parent: System.Security.Cryptography.HMAC\n  langs:\n  - csharp\n  name: BlockSizeValue\n  nameWithType: HMAC.BlockSizeValue\n  fullName: HMAC.BlockSizeValue\n  type: Property\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Security.Cryptography.Primitives\n  namespace: System.Security.Cryptography\n  summary: Gets or sets the block size to use in the hash value.\n  remarks: A Hash-based Message Authentication Code (HMAC) uses a hash function where data is hashed by iterating a basic compression function on blocks of data. <xref:System.Security.Cryptography.HMAC.BlockSizeValue%2A> is the byte size of such a block. Its value is 64 bytes.\n  syntax:\n    content: protected int BlockSizeValue { get; set; }\n    return:\n      type: System.Int32\n      description: The block size to use in the hash value.\n  overload: System.Security.Cryptography.HMAC.BlockSizeValue*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/HMAC.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Cryptography.HMAC.Create\n  commentId: M:System.Security.Cryptography.HMAC.Create\n  id: Create\n  parent: System.Security.Cryptography.HMAC\n  langs:\n  - csharp\n  name: Create()\n  nameWithType: HMAC.Create()\n  fullName: HMAC.Create()\n  type: Method\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Security.Cryptography.Primitives\n  namespace: System.Security.Cryptography\n  summary: Creates an instance of the default implementation of a Hash-based Message Authentication Code (HMAC).\n  remarks: By default, this overload uses the SHA-1 implementation of HMAC. If you want to specify a different implementation, use the <xref:System.Security.Cryptography.HMAC.Create%28System.String%29> overload, which lets you specify an algorithm name, instead.\n  syntax:\n    content: public static System.Security.Cryptography.HMAC Create ();\n    parameters: []\n    return:\n      type: System.Security.Cryptography.HMAC\n      description: A new SHA-1 instance, unless the default settings have been changed by using the [<cryptoClass> element](~/docs/framework/configure-apps/file-schema/cryptography/cryptoclass-element.md).\n  overload: System.Security.Cryptography.HMAC.Create*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/HMAC.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Cryptography.HMAC.Create(System.String)\n  commentId: M:System.Security.Cryptography.HMAC.Create(System.String)\n  id: Create(System.String)\n  parent: System.Security.Cryptography.HMAC\n  langs:\n  - csharp\n  name: Create(String)\n  nameWithType: HMAC.Create(String)\n  fullName: HMAC.Create(String)\n  type: Method\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Security.Cryptography.Primitives\n  namespace: System.Security.Cryptography\n  summary: Creates an instance of the specified implementation of a Hash-based Message Authentication Code (HMAC).\n  remarks: HMAC supports a number of hash algorithms, including MD5, SHA-1, SHA-256, and RIPEMD160. For the full list, see the supported values for the `algorithmName` parameter.\n  syntax:\n    content: public static System.Security.Cryptography.HMAC Create (string algorithmName);\n    parameters:\n    - id: algorithmName\n      type: System.String\n      description: \"The HMAC implementation to use. The following table shows the valid values for the <code>algorithmName</code> parameter and the algorithms they map to.  \\n  \\n <table><thead><tr><th> Parameter value  \\n  \\n </th><th> Implements  \\n  \\n </th></tr></thead><tbody><tr><td> System.Security.Cryptography.HMAC  \\n  \\n </td><td><xref href=\\\"System.Security.Cryptography.HMACSHA1\\\"></xref></td></tr><tr><td> System.Security.Cryptography.KeyedHashAlgorithm  \\n  \\n </td><td><xref href=\\\"System.Security.Cryptography.HMACSHA1\\\"></xref></td></tr><tr><td> HMACMD5  \\n  \\n </td><td><xref href=\\\"System.Security.Cryptography.HMACMD5\\\"></xref></td></tr><tr><td> System.Security.Cryptography.HMACMD5  \\n  \\n </td><td><xref href=\\\"System.Security.Cryptography.HMACMD5\\\"></xref></td></tr><tr><td> HMACRIPEMD160  \\n  \\n </td><td><xref href=\\\"System.Security.Cryptography.HMACRIPEMD160\\\"></xref></td></tr><tr><td> System.Security.Cryptography.HMACRIPEMD160  \\n  \\n </td><td><xref href=\\\"System.Security.Cryptography.HMACRIPEMD160\\\"></xref></td></tr><tr><td> HMACSHA1  \\n  \\n </td><td><xref href=\\\"System.Security.Cryptography.HMACSHA1\\\"></xref></td></tr><tr><td> System.Security.Cryptography.HMACSHA1  \\n  \\n </td><td><xref href=\\\"System.Security.Cryptography.HMACSHA1\\\"></xref></td></tr><tr><td> HMACSHA256  \\n  \\n </td><td><xref href=\\\"System.Security.Cryptography.HMACSHA256\\\"></xref></td></tr><tr><td> System.Security.Cryptography.HMACSHA256  \\n  \\n </td><td><xref href=\\\"System.Security.Cryptography.HMACSHA256\\\"></xref></td></tr><tr><td> HMACSHA384  \\n  \\n </td><td><xref href=\\\"System.Security.Cryptography.HMACSHA384\\\"></xref></td></tr><tr><td> System.Security.Cryptography.HMACSHA384  \\n  \\n </td><td><xref href=\\\"System.Security.Cryptography.HMACSHA384\\\"></xref></td></tr><tr><td> HMACSHA512  \\n  \\n </td><td><xref href=\\\"System.Security.Cryptography.HMACSHA512\\\"></xref></td></tr><tr><td> System.Security.Cryptography.HMACSHA512  \\n  \\n </td><td><xref href=\\\"System.Security.Cryptography.HMACSHA512\\\"></xref></td></tr><tr><td> MACTripleDES  \\n  \\n </td><td><xref href=\\\"System.Security.Cryptography.MACTripleDES\\\"></xref></td></tr><tr><td> System.Security.Cryptography.MACTripleDES  \\n  \\n </td><td><xref href=\\\"System.Security.Cryptography.MACTripleDES\\\"></xref></td></tr></tbody></table>\"\n    return:\n      type: System.Security.Cryptography.HMAC\n      description: A new instance of the specified HMAC implementation.\n  overload: System.Security.Cryptography.HMAC.Create*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/HMAC.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Cryptography.HMAC.Dispose(System.Boolean)\n  commentId: M:System.Security.Cryptography.HMAC.Dispose(System.Boolean)\n  id: Dispose(System.Boolean)\n  parent: System.Security.Cryptography.HMAC\n  langs:\n  - csharp\n  name: Dispose(Boolean)\n  nameWithType: HMAC.Dispose(Boolean)\n  fullName: HMAC.Dispose(Boolean)\n  type: Method\n  assemblies:\n  - System.Security.Cryptography.Primitives\n  - mscorlib\n  - netstandard\n  namespace: System.Security.Cryptography\n  summary: Releases the unmanaged resources used by the <xref href=\"System.Security.Cryptography.HMAC\"></xref> class when a key change is legitimate and optionally releases the managed resources.\n  remarks: \"This method is called by the public `Dispose()` method and the `Finalize` method. `Dispose()` invokes the protected `Dispose(Boolean)` method with the `disposing` parameter set to `true`. `Finalize` invokes `Dispose` with `disposing` set to `false`.  \\n  \\n When the `disposing` parameter is `true`, this method releases all resources held by any managed objects that this <xref:System.Security.Cryptography.HMAC> references. This method invokes the `Dispose()` method of each referenced object.\"\n  syntax:\n    content: protected override void Dispose (bool disposing);\n    parameters:\n    - id: disposing\n      type: System.Boolean\n      description: '`true` to release both managed and unmanaged resources; `false` to release only unmanaged resources.'\n  overload: System.Security.Cryptography.HMAC.Dispose*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/HMAC.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Cryptography.HMAC.HashCore(System.Byte[],System.Int32,System.Int32)\n  commentId: M:System.Security.Cryptography.HMAC.HashCore(System.Byte[],System.Int32,System.Int32)\n  id: HashCore(System.Byte[],System.Int32,System.Int32)\n  parent: System.Security.Cryptography.HMAC\n  langs:\n  - csharp\n  name: HashCore(Byte[], Int32, Int32)\n  nameWithType: HMAC.HashCore(Byte[], Int32, Int32)\n  fullName: HMAC.HashCore(Byte[], Int32, Int32)\n  type: Method\n  assemblies:\n  - System.Security.Cryptography.Primitives\n  - mscorlib\n  - netstandard\n  namespace: System.Security.Cryptography\n  summary: When overridden in a derived class, routes data written to the object into the default <xref href=\"System.Security.Cryptography.HMAC\"></xref> hash algorithm for computing the hash value.\n  remarks: \"This method is not called by application code.  \\n  \\n This abstract method performs the hash computation. Every write to the cryptographic stream object passes the data through this method. For each block of data, this method updates the state of the hash object so that a correct hash value is returned at the end of the data stream.\"\n  syntax:\n    content: protected override void HashCore (byte[] rgb, int ib, int cb);\n    parameters:\n    - id: rgb\n      type: System.Byte[]\n      description: The input data.\n    - id: ib\n      type: System.Int32\n      description: The offset into the byte array from which to begin using data.\n    - id: cb\n      type: System.Int32\n      description: The number of bytes in the array to use as data.\n  overload: System.Security.Cryptography.HMAC.HashCore*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/HMAC.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Cryptography.HMAC.HashFinal\n  commentId: M:System.Security.Cryptography.HMAC.HashFinal\n  id: HashFinal\n  parent: System.Security.Cryptography.HMAC\n  langs:\n  - csharp\n  name: HashFinal()\n  nameWithType: HMAC.HashFinal()\n  fullName: HMAC.HashFinal()\n  type: Method\n  assemblies:\n  - System.Security.Cryptography.Primitives\n  - mscorlib\n  - netstandard\n  namespace: System.Security.Cryptography\n  summary: When overridden in a derived class, finalizes the hash computation after the last data is processed by the cryptographic stream object.\n  remarks: This method is not called by application code. This method finalizes any partial computation and returns the correct hash value of the data stream.\n  syntax:\n    content: protected override byte[] HashFinal ();\n    parameters: []\n    return:\n      type: System.Byte[]\n      description: The computed hash code in a byte array.\n  overload: System.Security.Cryptography.HMAC.HashFinal*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/HMAC.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Cryptography.HMAC.HashName\n  commentId: P:System.Security.Cryptography.HMAC.HashName\n  id: HashName\n  parent: System.Security.Cryptography.HMAC\n  langs:\n  - csharp\n  name: HashName\n  nameWithType: HMAC.HashName\n  fullName: HMAC.HashName\n  type: Property\n  assemblies:\n  - System.Security.Cryptography.Primitives\n  - mscorlib\n  - netstandard\n  namespace: System.Security.Cryptography\n  summary: Gets or sets the name of the hash algorithm to use for hashing.\n  syntax:\n    content: public string HashName { get; set; }\n    return:\n      type: System.String\n      description: The name of the hash algorithm.\n  overload: System.Security.Cryptography.HMAC.HashName*\n  exceptions:\n  - type: System.Security.Cryptography.CryptographicException\n    commentId: T:System.Security.Cryptography.CryptographicException\n    description: The current hash algorithm cannot be changed.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/HMAC.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Cryptography.HMAC.Initialize\n  commentId: M:System.Security.Cryptography.HMAC.Initialize\n  id: Initialize\n  parent: System.Security.Cryptography.HMAC\n  langs:\n  - csharp\n  name: Initialize()\n  nameWithType: HMAC.Initialize()\n  fullName: HMAC.Initialize()\n  type: Method\n  assemblies:\n  - System.Security.Cryptography.Primitives\n  - mscorlib\n  - netstandard\n  namespace: System.Security.Cryptography\n  summary: Initializes an instance of the default implementation of <xref href=\"System.Security.Cryptography.HMAC\"></xref>.\n  remarks: \"A Hash-based Message Authentication Code (HMAC) can be used to determine whether a message sent over an insecure channel has been tampered with, provided that the sender and receiver share a secret key. The sender computes the hash value for the original data and sends both the original data and the HMAC as a single message. The receiver recomputes the hash value on the received message and checks that the computed hash value matches the transmitted hash value.  \\n  \\n HMAC can be used with any iterative cryptographic hash function, such as MD5 or SHA-1, in combination with a secret shared key. The cryptographic strength of HMAC depends on the properties of the underlying hash function.  \\n  \\n Any change to the data or the hash value will result in a mismatch, because knowledge of the secret key is required to change the message and reproduce the correct hash value. Therefore, if the original and computed hash values match, the message is authenticated.\"\n  syntax:\n    content: public override void Initialize ();\n    parameters: []\n  overload: System.Security.Cryptography.HMAC.Initialize*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/HMAC.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Cryptography.HMAC.Key\n  commentId: P:System.Security.Cryptography.HMAC.Key\n  id: Key\n  parent: System.Security.Cryptography.HMAC\n  langs:\n  - csharp\n  name: Key\n  nameWithType: HMAC.Key\n  fullName: HMAC.Key\n  type: Property\n  assemblies:\n  - System.Security.Cryptography.Primitives\n  - mscorlib\n  - netstandard\n  namespace: System.Security.Cryptography\n  summary: Gets or sets the key to use in the hash algorithm.\n  remarks: \"This property is the key for the keyed hash algorithm.  \\n  \\n A Hash-based Message Authentication Code (HMAC) can be used to determine whether a message sent over an insecure channel has been tampered with, provided that the sender and receiver share a secret key. The sender computes the hash value for the original data and sends both the original data and the HMAC as a single message. The receiver recomputes the hash value on the received message and checks that the computed hash value matches the transmitted hash value.  \\n  \\n HMAC can be used with any iterative cryptographic hash function, such as MD5 or SHA-1, in combination with a secret shared key. The cryptographic strength of HMAC depends on the properties of the underlying hash function.  \\n  \\n Any change to the data or the hash value results in a mismatch, because knowledge of the secret key is required to change the message and reproduce the correct hash value. Therefore, if the original and computed hash values match, the message is authenticated.\"\n  syntax:\n    content: public override byte[] Key { get; set; }\n    return:\n      type: System.Byte[]\n      description: The key to use in the hash algorithm.\n  overload: System.Security.Cryptography.HMAC.Key*\n  exceptions:\n  - type: System.Security.Cryptography.CryptographicException\n    commentId: T:System.Security.Cryptography.CryptographicException\n    description: An attempt is made to change the <xref href=\"System.Security.Cryptography.HMAC.Key\"></xref> property after hashing has begun.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/HMAC.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\nreferences:\n- uid: System.Security.Cryptography.KeyedHashAlgorithm\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: KeyedHashAlgorithm\n  nameWithType: KeyedHashAlgorithm\n  fullName: System.Security.Cryptography.KeyedHashAlgorithm\n- uid: System.Security.Cryptography.CryptographicException\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: CryptographicException\n  nameWithType: CryptographicException\n  fullName: System.Security.Cryptography.CryptographicException\n- uid: System.Security.Cryptography.HMAC.#ctor\n  parent: System.Security.Cryptography.HMAC\n  isExternal: false\n  name: HMAC()\n  nameWithType: HMAC.HMAC()\n  fullName: HMAC.HMAC()\n- uid: System.Security.Cryptography.HMAC.BlockSizeValue\n  parent: System.Security.Cryptography.HMAC\n  isExternal: false\n  name: BlockSizeValue\n  nameWithType: HMAC.BlockSizeValue\n  fullName: HMAC.BlockSizeValue\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Security.Cryptography.HMAC.Create\n  parent: System.Security.Cryptography.HMAC\n  isExternal: false\n  name: Create()\n  nameWithType: HMAC.Create()\n  fullName: HMAC.Create()\n- uid: System.Security.Cryptography.HMAC\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: HMAC\n  nameWithType: HMAC\n  fullName: System.Security.Cryptography.HMAC\n- uid: System.Security.Cryptography.HMAC.Create(System.String)\n  parent: System.Security.Cryptography.HMAC\n  isExternal: false\n  name: Create(String)\n  nameWithType: HMAC.Create(String)\n  fullName: HMAC.Create(String)\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Security.Cryptography.HMAC.Dispose(System.Boolean)\n  parent: System.Security.Cryptography.HMAC\n  isExternal: false\n  name: Dispose(Boolean)\n  nameWithType: HMAC.Dispose(Boolean)\n  fullName: HMAC.Dispose(Boolean)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Security.Cryptography.HMAC.HashCore(System.Byte[],System.Int32,System.Int32)\n  parent: System.Security.Cryptography.HMAC\n  isExternal: false\n  name: HashCore(Byte[], Int32, Int32)\n  nameWithType: HMAC.HashCore(Byte[], Int32, Int32)\n  fullName: HMAC.HashCore(Byte[], Int32, Int32)\n- uid: System.Byte\n  name: Byte\n  nameWithType: Byte\n  fullName: System.Byte\n- uid: System.Byte[]\n  parent: System\n  isExternal: false\n  name: Byte[]\n  nameWithType: Byte[]\n  fullName: System.Byte[]\n  spec.csharp:\n  - uid: System.Byte\n    name: Byte\n    nameWithType: Byte\n    fullName: System.Byte\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Security.Cryptography.HMAC.HashFinal\n  parent: System.Security.Cryptography.HMAC\n  isExternal: false\n  name: HashFinal()\n  nameWithType: HMAC.HashFinal()\n  fullName: HMAC.HashFinal()\n- uid: System.Security.Cryptography.HMAC.HashName\n  parent: System.Security.Cryptography.HMAC\n  isExternal: false\n  name: HashName\n  nameWithType: HMAC.HashName\n  fullName: HMAC.HashName\n- uid: System.Security.Cryptography.HMAC.Initialize\n  parent: System.Security.Cryptography.HMAC\n  isExternal: false\n  name: Initialize()\n  nameWithType: HMAC.Initialize()\n  fullName: HMAC.Initialize()\n- uid: System.Security.Cryptography.HMAC.Key\n  parent: System.Security.Cryptography.HMAC\n  isExternal: false\n  name: Key\n  nameWithType: HMAC.Key\n  fullName: HMAC.Key\n- uid: System.Security.Cryptography.HMAC.#ctor*\n  parent: System.Security.Cryptography.HMAC\n  isExternal: false\n  name: HMAC\n  nameWithType: HMAC.HMAC\n  fullName: HMAC.HMAC\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/HMAC.xml\n- uid: System.Security.Cryptography.HMAC.BlockSizeValue*\n  parent: System.Security.Cryptography.HMAC\n  isExternal: false\n  name: BlockSizeValue\n  nameWithType: HMAC.BlockSizeValue\n  fullName: HMAC.BlockSizeValue\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/HMAC.xml\n- uid: System.Security.Cryptography.HMAC.Create*\n  parent: System.Security.Cryptography.HMAC\n  isExternal: false\n  name: Create\n  nameWithType: HMAC.Create\n  fullName: HMAC.Create\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/HMAC.xml\n- uid: System.Security.Cryptography.HMAC.Dispose*\n  parent: System.Security.Cryptography.HMAC\n  isExternal: false\n  name: Dispose\n  nameWithType: HMAC.Dispose\n  fullName: HMAC.Dispose\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/HMAC.xml\n- uid: System.Security.Cryptography.HMAC.HashCore*\n  parent: System.Security.Cryptography.HMAC\n  isExternal: false\n  name: HashCore\n  nameWithType: HMAC.HashCore\n  fullName: HMAC.HashCore\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/HMAC.xml\n- uid: System.Security.Cryptography.HMAC.HashFinal*\n  parent: System.Security.Cryptography.HMAC\n  isExternal: false\n  name: HashFinal\n  nameWithType: HMAC.HashFinal\n  fullName: HMAC.HashFinal\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/HMAC.xml\n- uid: System.Security.Cryptography.HMAC.HashName*\n  parent: System.Security.Cryptography.HMAC\n  isExternal: false\n  name: HashName\n  nameWithType: HMAC.HashName\n  fullName: HMAC.HashName\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/HMAC.xml\n- uid: System.Security.Cryptography.HMAC.Initialize*\n  parent: System.Security.Cryptography.HMAC\n  isExternal: false\n  name: Initialize\n  nameWithType: HMAC.Initialize\n  fullName: HMAC.Initialize\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/HMAC.xml\n- uid: System.Security.Cryptography.HMAC.Key*\n  parent: System.Security.Cryptography.HMAC\n  isExternal: false\n  name: Key\n  nameWithType: HMAC.Key\n  fullName: HMAC.Key\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/HMAC.xml\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: Object.Equals(Object)\n  fullName: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: Object.GetHashCode()\n  fullName: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: false\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: false\n  name: ToString()\n  nameWithType: Object.ToString()\n  fullName: Object.ToString()\n- uid: System.Security.Cryptography.HashAlgorithm.CanReuseTransform\n  parent: System.Security.Cryptography.HashAlgorithm\n  isExternal: false\n  name: CanReuseTransform\n  nameWithType: HashAlgorithm.CanReuseTransform\n  fullName: HashAlgorithm.CanReuseTransform\n- uid: System.Security.Cryptography.HashAlgorithm.CanTransformMultipleBlocks\n  parent: System.Security.Cryptography.HashAlgorithm\n  isExternal: false\n  name: CanTransformMultipleBlocks\n  nameWithType: HashAlgorithm.CanTransformMultipleBlocks\n  fullName: HashAlgorithm.CanTransformMultipleBlocks\n- uid: System.Security.Cryptography.HashAlgorithm.Clear\n  parent: System.Security.Cryptography.HashAlgorithm\n  isExternal: false\n  name: Clear()\n  nameWithType: HashAlgorithm.Clear()\n  fullName: HashAlgorithm.Clear()\n- uid: System.Security.Cryptography.HashAlgorithm.ComputeHash(System.Byte[])\n  parent: System.Security.Cryptography.HashAlgorithm\n  isExternal: false\n  name: ComputeHash(Byte[])\n  nameWithType: HashAlgorithm.ComputeHash(Byte[])\n  fullName: HashAlgorithm.ComputeHash(Byte[])\n- uid: System.Security.Cryptography.HashAlgorithm.ComputeHash(System.IO.Stream)\n  parent: System.Security.Cryptography.HashAlgorithm\n  isExternal: false\n  name: ComputeHash(Stream)\n  nameWithType: HashAlgorithm.ComputeHash(Stream)\n  fullName: HashAlgorithm.ComputeHash(Stream)\n- uid: System.Security.Cryptography.HashAlgorithm.ComputeHash(System.Byte[],System.Int32,System.Int32)\n  parent: System.Security.Cryptography.HashAlgorithm\n  isExternal: false\n  name: ComputeHash(Byte[], Int32, Int32)\n  nameWithType: HashAlgorithm.ComputeHash(Byte[], Int32, Int32)\n  fullName: HashAlgorithm.ComputeHash(Byte[], Int32, Int32)\n- uid: System.Security.Cryptography.HashAlgorithm.Dispose\n  parent: System.Security.Cryptography.HashAlgorithm\n  isExternal: false\n  name: Dispose()\n  nameWithType: HashAlgorithm.Dispose()\n  fullName: HashAlgorithm.Dispose()\n- uid: System.Security.Cryptography.HashAlgorithm.Hash\n  parent: System.Security.Cryptography.HashAlgorithm\n  isExternal: false\n  name: Hash\n  nameWithType: HashAlgorithm.Hash\n  fullName: HashAlgorithm.Hash\n- uid: System.Security.Cryptography.HashAlgorithm.HashSize\n  parent: System.Security.Cryptography.HashAlgorithm\n  isExternal: false\n  name: HashSize\n  nameWithType: HashAlgorithm.HashSize\n  fullName: HashAlgorithm.HashSize\n- uid: System.Security.Cryptography.HashAlgorithm.HashSizeValue\n  parent: System.Security.Cryptography.HashAlgorithm\n  isExternal: false\n  name: HashSizeValue\n  nameWithType: HashAlgorithm.HashSizeValue\n  fullName: HashAlgorithm.HashSizeValue\n- uid: System.Security.Cryptography.HashAlgorithm.HashValue\n  parent: System.Security.Cryptography.HashAlgorithm\n  isExternal: false\n  name: HashValue\n  nameWithType: HashAlgorithm.HashValue\n  fullName: HashAlgorithm.HashValue\n- uid: System.Security.Cryptography.HashAlgorithm.InputBlockSize\n  parent: System.Security.Cryptography.HashAlgorithm\n  isExternal: false\n  name: InputBlockSize\n  nameWithType: HashAlgorithm.InputBlockSize\n  fullName: HashAlgorithm.InputBlockSize\n- uid: System.Security.Cryptography.HashAlgorithm.OutputBlockSize\n  parent: System.Security.Cryptography.HashAlgorithm\n  isExternal: false\n  name: OutputBlockSize\n  nameWithType: HashAlgorithm.OutputBlockSize\n  fullName: HashAlgorithm.OutputBlockSize\n- uid: System.Security.Cryptography.HashAlgorithm.State\n  parent: System.Security.Cryptography.HashAlgorithm\n  isExternal: false\n  name: State\n  nameWithType: HashAlgorithm.State\n  fullName: HashAlgorithm.State\n- uid: System.Security.Cryptography.HashAlgorithm.TransformBlock(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)\n  parent: System.Security.Cryptography.HashAlgorithm\n  isExternal: false\n  name: TransformBlock(Byte[], Int32, Int32, Byte[], Int32)\n  nameWithType: HashAlgorithm.TransformBlock(Byte[], Int32, Int32, Byte[], Int32)\n  fullName: HashAlgorithm.TransformBlock(Byte[], Int32, Int32, Byte[], Int32)\n- uid: System.Security.Cryptography.HashAlgorithm.TransformFinalBlock(System.Byte[],System.Int32,System.Int32)\n  parent: System.Security.Cryptography.HashAlgorithm\n  isExternal: false\n  name: TransformFinalBlock(Byte[], Int32, Int32)\n  nameWithType: HashAlgorithm.TransformFinalBlock(Byte[], Int32, Int32)\n  fullName: HashAlgorithm.TransformFinalBlock(Byte[], Int32, Int32)\n- uid: System.Security.Cryptography.KeyedHashAlgorithm.KeyValue\n  parent: System.Security.Cryptography.KeyedHashAlgorithm\n  isExternal: false\n  name: KeyValue\n  nameWithType: KeyedHashAlgorithm.KeyValue\n  fullName: KeyedHashAlgorithm.KeyValue\n"}