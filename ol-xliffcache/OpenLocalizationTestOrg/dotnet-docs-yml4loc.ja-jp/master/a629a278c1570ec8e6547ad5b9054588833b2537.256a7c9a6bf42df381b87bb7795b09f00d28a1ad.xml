{"nodes":[{"content":"Represents the contents of a wst:RequestedProofToken element.","nodes":[{"pos":[0,61],"content":"Represents the contents of a wst:RequestedProofToken element.","nodes":[{"content":"Represents the contents of a wst:RequestedProofToken element.","pos":[0,61]}]}],"pos":[1069,1131],"yaml":true},{"content":"The content of a wst:RequestedProofToken element can be either an encrypted key or a key in clear text. In either of these cases, the <xref:System.IdentityModel.Protocols.WSTrust.RequestedProofToken.ProtectedKey%2A> property contains the key. If the security token is a regular token, such as a SCT, then its session key will be the material which gets encrypted. When the wst:RequestedProofToken contains only a wst:ComputedKey element as in the case of combined entropy, the <xref:System.IdentityModel.Protocols.WSTrust.RequestedProofToken.ComputedKeyAlgorithm%2A> property holds its contents.  \n  \n For more information about the element that this class represents, see the version of the WS-Trust specification that applies to your scenario.","nodes":[{"pos":[0,595],"content":"The content of a wst:RequestedProofToken element can be either an encrypted key or a key in clear text. In either of these cases, the <xref:System.IdentityModel.Protocols.WSTrust.RequestedProofToken.ProtectedKey%2A> property contains the key. If the security token is a regular token, such as a SCT, then its session key will be the material which gets encrypted. When the wst:RequestedProofToken contains only a wst:ComputedKey element as in the case of combined entropy, the <xref:System.IdentityModel.Protocols.WSTrust.RequestedProofToken.ComputedKeyAlgorithm%2A> property holds its contents.","nodes":[{"content":"The content of a wst:RequestedProofToken element can be either an encrypted key or a key in clear text. In either of these cases, the <xref:System.IdentityModel.Protocols.WSTrust.RequestedProofToken.ProtectedKey%2A> property contains the key. If the security token is a regular token, such as a SCT, then its session key will be the material which gets encrypted. When the wst:RequestedProofToken contains only a wst:ComputedKey element as in the case of combined entropy, the <xref:System.IdentityModel.Protocols.WSTrust.RequestedProofToken.ComputedKeyAlgorithm%2A> property holds its contents.","pos":[0,595],"nodes":[{"content":"The content of a wst:RequestedProofToken element can be either an encrypted key or a key in clear text.","pos":[0,103]},{"content":"In either of these cases, the <ph id=\"ph1\">&lt;xref:System.IdentityModel.Protocols.WSTrust.RequestedProofToken.ProtectedKey%2A&gt;</ph> property contains the key.","pos":[104,242],"source":" In either of these cases, the <xref:System.IdentityModel.Protocols.WSTrust.RequestedProofToken.ProtectedKey%2A> property contains the key."},{"content":"If the security token is a regular token, such as a SCT, then its session key will be the material which gets encrypted.","pos":[243,363]},{"content":"When the wst:RequestedProofToken contains only a wst:ComputedKey element as in the case of combined entropy, the <ph id=\"ph1\">&lt;xref:System.IdentityModel.Protocols.WSTrust.RequestedProofToken.ComputedKeyAlgorithm%2A&gt;</ph> property holds its contents.","pos":[364,595],"source":" When the wst:RequestedProofToken contains only a wst:ComputedKey element as in the case of combined entropy, the <xref:System.IdentityModel.Protocols.WSTrust.RequestedProofToken.ComputedKeyAlgorithm%2A> property holds its contents."}]}]},{"pos":[602,745],"content":"For more information about the element that this class represents, see the version of the WS-Trust specification that applies to your scenario.","nodes":[{"content":"For more information about the element that this class represents, see the version of the WS-Trust specification that applies to your scenario.","pos":[0,143]}]}],"pos":[1142,1892],"yaml":true,"extradata":"MT"},{"content":"Initializes a new instance of the <xref href=\"System.IdentityModel.Protocols.WSTrust.RequestedProofToken\"></xref> class using the specified key material.","nodes":[{"pos":[0,153],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.IdentityModel.Protocols.WSTrust.RequestedProofToken\"&gt;&lt;/xref&gt;</ph> class using the specified key material.","source":"Initializes a new instance of the <xref href=\"System.IdentityModel.Protocols.WSTrust.RequestedProofToken\"></xref> class using the specified key material."}],"pos":[3452,3606],"yaml":true},{"content":"Use this constructor when the key is plain text.","nodes":[{"pos":[0,48],"content":"Use this constructor when the key is plain text.","nodes":[{"content":"Use this constructor when the key is plain text.","pos":[0,48]}]}],"pos":[3617,3666],"yaml":true,"extradata":"MT"},{"content":"An array of <xref href=\"System.Byte\"></xref> that contains the key material.","nodes":[{"pos":[0,76],"content":"An array of <ph id=\"ph1\">&lt;xref href=\"System.Byte\"&gt;&lt;/xref&gt;</ph> that contains the key material.","source":"An array of <xref href=\"System.Byte\"></xref> that contains the key material."}],"pos":[3811,3888],"yaml":true},{"content":"Initializes a new instance of the <xref href=\"System.IdentityModel.Protocols.WSTrust.RequestedProofToken\"></xref> class using the specified <xref href=\"System.IdentityModel.Protocols.WSTrust.ProtectedKey\"></xref> object.","nodes":[{"pos":[0,220],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.IdentityModel.Protocols.WSTrust.RequestedProofToken\"&gt;&lt;/xref&gt;</ph> class using the specified <ph id=\"ph2\">&lt;xref href=\"System.IdentityModel.Protocols.WSTrust.ProtectedKey\"&gt;&lt;/xref&gt;</ph> object.","source":"Initializes a new instance of the <xref href=\"System.IdentityModel.Protocols.WSTrust.RequestedProofToken\"></xref> class using the specified <xref href=\"System.IdentityModel.Protocols.WSTrust.ProtectedKey\"></xref> object."}],"pos":[5275,5496],"yaml":true},{"content":"A <xref href=\"System.IdentityModel.Protocols.WSTrust.ProtectedKey\"></xref> that represents the key, which can be either a binary secret or an encrypted key.","nodes":[{"pos":[0,156],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.IdentityModel.Protocols.WSTrust.ProtectedKey\"&gt;&lt;/xref&gt;</ph> that represents the key, which can be either a binary secret or an encrypted key.","source":"A <xref href=\"System.IdentityModel.Protocols.WSTrust.ProtectedKey\"></xref> that represents the key, which can be either a binary secret or an encrypted key."}],"pos":[5736,5893],"yaml":true},{"content":"<code>protectedKey</code> is `null`.","nodes":[{"pos":[0,36],"content":"<ph id=\"ph1\">&lt;code&gt;protectedKey&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>protectedKey</code> is `null`."}],"pos":[6087,6124],"yaml":true},{"content":"Initializes a new instance of the <xref href=\"System.IdentityModel.Protocols.WSTrust.RequestedProofToken\"></xref> class using the specified computed key algorithm.","nodes":[{"pos":[0,163],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.IdentityModel.Protocols.WSTrust.RequestedProofToken\"&gt;&lt;/xref&gt;</ph> class using the specified computed key algorithm.","source":"Initializes a new instance of the <xref href=\"System.IdentityModel.Protocols.WSTrust.RequestedProofToken\"></xref> class using the specified computed key algorithm."}],"pos":[7284,7448],"yaml":true},{"content":"Use this constructor in the case of combined entropy to specify the algorithm used to calculate the session key.","nodes":[{"pos":[0,112],"content":"Use this constructor in the case of combined entropy to specify the algorithm used to calculate the session key.","nodes":[{"content":"Use this constructor in the case of combined entropy to specify the algorithm used to calculate the session key.","pos":[0,112]}]}],"pos":[7459,7572],"yaml":true,"extradata":"MT"},{"content":"A string that contains a URI that indicates the algorithm used to compute the session key in the combined entropy case.","nodes":[{"pos":[0,119],"content":"A string that contains a URI that indicates the algorithm used to compute the session key in the combined entropy case.","nodes":[{"content":"A string that contains a URI that indicates the algorithm used to compute the session key in the combined entropy case.","pos":[0,119]}]}],"pos":[7745,7865],"yaml":true},{"content":"<code>computedKeyAlgorithm</code> is `null`.","nodes":[{"pos":[0,44],"content":"<ph id=\"ph1\">&lt;code&gt;computedKeyAlgorithm&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>computedKeyAlgorithm</code> is `null`."}],"pos":[8059,8104],"yaml":true},{"content":"Initializes a new instance of the <xref href=\"System.IdentityModel.Protocols.WSTrust.RequestedProofToken\"></xref> class using the specified key material and encrypting credentials.","nodes":[{"pos":[0,180],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.IdentityModel.Protocols.WSTrust.RequestedProofToken\"&gt;&lt;/xref&gt;</ph> class using the specified key material and encrypting credentials.","source":"Initializes a new instance of the <xref href=\"System.IdentityModel.Protocols.WSTrust.RequestedProofToken\"></xref> class using the specified key material and encrypting credentials."}],"pos":[9483,9664],"yaml":true},{"content":"Use this constructor when the key is encrypted.","nodes":[{"pos":[0,47],"content":"Use this constructor when the key is encrypted.","nodes":[{"content":"Use this constructor when the key is encrypted.","pos":[0,47]}]}],"pos":[9675,9723],"yaml":true,"extradata":"MT"},{"content":"An array of <xref href=\"System.Byte\"></xref> that contains the key material.","nodes":[{"pos":[0,76],"content":"An array of <ph id=\"ph1\">&lt;xref href=\"System.Byte\"&gt;&lt;/xref&gt;</ph> that contains the key material.","source":"An array of <xref href=\"System.Byte\"></xref> that contains the key material."}],"pos":[9939,10016],"yaml":true},{"content":"A <xref href=\"System.IdentityModel.SecurityTokenService.EncryptingCredentials\"></xref> that represents the credentials used to encrypt the key material.","nodes":[{"pos":[0,152],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.IdentityModel.SecurityTokenService.EncryptingCredentials\"&gt;&lt;/xref&gt;</ph> that represents the credentials used to encrypt the key material.","source":"A <xref href=\"System.IdentityModel.SecurityTokenService.EncryptingCredentials\"></xref> that represents the credentials used to encrypt the key material."}],"pos":[10127,10280],"yaml":true},{"content":"Gets the computed key algorithm used to calculate the session key in the combined entropy case.","nodes":[{"pos":[0,95],"content":"Gets the computed key algorithm used to calculate the session key in the combined entropy case.","nodes":[{"content":"Gets the computed key algorithm used to calculate the session key in the combined entropy case.","pos":[0,95]}]}],"pos":[11509,11605],"yaml":true},{"content":"Represents the contents of the wst:ComputedKey element. This element contains a URI that indicates the computed key algorithm used when keys must be computed; for example, in the combined entropy case when both the requestor and issuer specify entropy.","nodes":[{"pos":[0,252],"content":"Represents the contents of the wst:ComputedKey element. This element contains a URI that indicates the computed key algorithm used when keys must be computed; for example, in the combined entropy case when both the requestor and issuer specify entropy.","nodes":[{"content":"Represents the contents of the wst:ComputedKey element. This element contains a URI that indicates the computed key algorithm used when keys must be computed; for example, in the combined entropy case when both the requestor and issuer specify entropy.","pos":[0,252],"nodes":[{"content":"Represents the contents of the wst:ComputedKey element.","pos":[0,55]},{"content":"This element contains a URI that indicates the computed key algorithm used when keys must be computed; for example, in the combined entropy case when both the requestor and issuer specify entropy.","pos":[56,252]}]}]}],"pos":[11616,11869],"yaml":true,"extradata":"MT"},{"content":"A string that contains a URI that indicates the computed key algorithm.","nodes":[{"pos":[0,71],"content":"A string that contains a URI that indicates the computed key algorithm.","nodes":[{"content":"A string that contains a URI that indicates the computed key algorithm.","pos":[0,71]}]}],"pos":[11993,12065],"yaml":true},{"content":"Gets the key in the case when the wst:RequestedProofToken element contains a key.","nodes":[{"pos":[0,81],"content":"Gets the key in the case when the wst:RequestedProofToken element contains a key.","nodes":[{"content":"Gets the key in the case when the wst:RequestedProofToken element contains a key.","pos":[0,81]}]}],"pos":[13261,13343],"yaml":true},{"content":"Represents the contents of the wst:RequestedProofToken element when the element contains a key (rather than a wst:ComputedKeyElement).","nodes":[{"pos":[0,134],"content":"Represents the contents of the wst:RequestedProofToken element when the element contains a key (rather than a wst:ComputedKeyElement).","nodes":[{"content":"Represents the contents of the wst:RequestedProofToken element when the element contains a key (rather than a wst:ComputedKeyElement).","pos":[0,134]}]}],"pos":[13354,13489],"yaml":true,"extradata":"MT"},{"content":"A <xref href=\"System.IdentityModel.Protocols.WSTrust.ProtectedKey\"></xref> that represents the key, which can be either encrypted or clear text.","nodes":[{"pos":[0,144],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.IdentityModel.Protocols.WSTrust.ProtectedKey\"&gt;&lt;/xref&gt;</ph> that represents the key, which can be either encrypted or clear text.","source":"A <xref href=\"System.IdentityModel.Protocols.WSTrust.ProtectedKey\"></xref> that represents the key, which can be either encrypted or clear text."}],"pos":[13688,13833],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.IdentityModel.Protocols.WSTrust.RequestedProofToken\n  commentId: T:System.IdentityModel.Protocols.WSTrust.RequestedProofToken\n  id: RequestedProofToken\n  children:\n  - System.IdentityModel.Protocols.WSTrust.RequestedProofToken.#ctor(System.Byte[])\n  - System.IdentityModel.Protocols.WSTrust.RequestedProofToken.#ctor(System.IdentityModel.Protocols.WSTrust.ProtectedKey)\n  - System.IdentityModel.Protocols.WSTrust.RequestedProofToken.#ctor(System.String)\n  - System.IdentityModel.Protocols.WSTrust.RequestedProofToken.#ctor(System.Byte[],System.IdentityModel.Tokens.EncryptingCredentials)\n  - System.IdentityModel.Protocols.WSTrust.RequestedProofToken.ComputedKeyAlgorithm\n  - System.IdentityModel.Protocols.WSTrust.RequestedProofToken.ProtectedKey\n  langs:\n  - csharp\n  name: RequestedProofToken\n  nameWithType: RequestedProofToken\n  fullName: System.IdentityModel.Protocols.WSTrust.RequestedProofToken\n  type: Class\n  assemblies:\n  - System.IdentityModel\n  namespace: System.IdentityModel.Protocols.WSTrust\n  summary: Represents the contents of a wst:RequestedProofToken element.\n  remarks: \"The content of a wst:RequestedProofToken element can be either an encrypted key or a key in clear text. In either of these cases, the <xref:System.IdentityModel.Protocols.WSTrust.RequestedProofToken.ProtectedKey%2A> property contains the key. If the security token is a regular token, such as a SCT, then its session key will be the material which gets encrypted. When the wst:RequestedProofToken contains only a wst:ComputedKey element as in the case of combined entropy, the <xref:System.IdentityModel.Protocols.WSTrust.RequestedProofToken.ComputedKeyAlgorithm%2A> property holds its contents.  \\n  \\n For more information about the element that this class represents, see the version of the WS-Trust specification that applies to your scenario.\"\n  syntax:\n    content: public class RequestedProofToken\n  inheritance:\n  - System.Object\n  implements: []\n  inheritedMembers:\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.ToString\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IdentityModel.Protocols.WSTrust/RequestedProofToken.xml\n  ms.technology:\n  - dotnet-standard\n  ms.author: v-jibran\n  manager: markgal\n- uid: System.IdentityModel.Protocols.WSTrust.RequestedProofToken.#ctor(System.Byte[])\n  commentId: M:System.IdentityModel.Protocols.WSTrust.RequestedProofToken.#ctor(System.Byte[])\n  id: '#ctor(System.Byte[])'\n  parent: System.IdentityModel.Protocols.WSTrust.RequestedProofToken\n  langs:\n  - csharp\n  name: RequestedProofToken(Byte[])\n  nameWithType: RequestedProofToken.RequestedProofToken(Byte[])\n  fullName: RequestedProofToken.RequestedProofToken(Byte[])\n  type: Constructor\n  assemblies:\n  - System.IdentityModel\n  namespace: System.IdentityModel.Protocols.WSTrust\n  summary: Initializes a new instance of the <xref href=\"System.IdentityModel.Protocols.WSTrust.RequestedProofToken\"></xref> class using the specified key material.\n  remarks: Use this constructor when the key is plain text.\n  syntax:\n    content: public RequestedProofToken (byte[] secret);\n    parameters:\n    - id: secret\n      type: System.Byte[]\n      description: An array of <xref href=\"System.Byte\"></xref> that contains the key material.\n  overload: System.IdentityModel.Protocols.WSTrust.RequestedProofToken.#ctor*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IdentityModel.Protocols.WSTrust/RequestedProofToken.xml\n  ms.technology:\n  - dotnet-standard\n  ms.author: v-jibran\n  manager: markgal\n- uid: System.IdentityModel.Protocols.WSTrust.RequestedProofToken.#ctor(System.IdentityModel.Protocols.WSTrust.ProtectedKey)\n  commentId: M:System.IdentityModel.Protocols.WSTrust.RequestedProofToken.#ctor(System.IdentityModel.Protocols.WSTrust.ProtectedKey)\n  id: '#ctor(System.IdentityModel.Protocols.WSTrust.ProtectedKey)'\n  parent: System.IdentityModel.Protocols.WSTrust.RequestedProofToken\n  langs:\n  - csharp\n  name: RequestedProofToken(ProtectedKey)\n  nameWithType: RequestedProofToken.RequestedProofToken(ProtectedKey)\n  fullName: RequestedProofToken.RequestedProofToken(ProtectedKey)\n  type: Constructor\n  assemblies:\n  - System.IdentityModel\n  namespace: System.IdentityModel.Protocols.WSTrust\n  summary: Initializes a new instance of the <xref href=\"System.IdentityModel.Protocols.WSTrust.RequestedProofToken\"></xref> class using the specified <xref href=\"System.IdentityModel.Protocols.WSTrust.ProtectedKey\"></xref> object.\n  syntax:\n    content: public RequestedProofToken (System.IdentityModel.Protocols.WSTrust.ProtectedKey protectedKey);\n    parameters:\n    - id: protectedKey\n      type: System.IdentityModel.Protocols.WSTrust.ProtectedKey\n      description: A <xref href=\"System.IdentityModel.Protocols.WSTrust.ProtectedKey\"></xref> that represents the key, which can be either a binary secret or an encrypted key.\n  overload: System.IdentityModel.Protocols.WSTrust.RequestedProofToken.#ctor*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>protectedKey</code> is `null`.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IdentityModel.Protocols.WSTrust/RequestedProofToken.xml\n  ms.technology:\n  - dotnet-standard\n  ms.author: v-jibran\n  manager: markgal\n- uid: System.IdentityModel.Protocols.WSTrust.RequestedProofToken.#ctor(System.String)\n  commentId: M:System.IdentityModel.Protocols.WSTrust.RequestedProofToken.#ctor(System.String)\n  id: '#ctor(System.String)'\n  parent: System.IdentityModel.Protocols.WSTrust.RequestedProofToken\n  langs:\n  - csharp\n  name: RequestedProofToken(String)\n  nameWithType: RequestedProofToken.RequestedProofToken(String)\n  fullName: RequestedProofToken.RequestedProofToken(String)\n  type: Constructor\n  assemblies:\n  - System.IdentityModel\n  namespace: System.IdentityModel.Protocols.WSTrust\n  summary: Initializes a new instance of the <xref href=\"System.IdentityModel.Protocols.WSTrust.RequestedProofToken\"></xref> class using the specified computed key algorithm.\n  remarks: Use this constructor in the case of combined entropy to specify the algorithm used to calculate the session key.\n  syntax:\n    content: public RequestedProofToken (string computedKeyAlgorithm);\n    parameters:\n    - id: computedKeyAlgorithm\n      type: System.String\n      description: A string that contains a URI that indicates the algorithm used to compute the session key in the combined entropy case.\n  overload: System.IdentityModel.Protocols.WSTrust.RequestedProofToken.#ctor*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>computedKeyAlgorithm</code> is `null`.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IdentityModel.Protocols.WSTrust/RequestedProofToken.xml\n  ms.technology:\n  - dotnet-standard\n  ms.author: v-jibran\n  manager: markgal\n- uid: System.IdentityModel.Protocols.WSTrust.RequestedProofToken.#ctor(System.Byte[],System.IdentityModel.Tokens.EncryptingCredentials)\n  commentId: M:System.IdentityModel.Protocols.WSTrust.RequestedProofToken.#ctor(System.Byte[],System.IdentityModel.Tokens.EncryptingCredentials)\n  id: '#ctor(System.Byte[],System.IdentityModel.Tokens.EncryptingCredentials)'\n  parent: System.IdentityModel.Protocols.WSTrust.RequestedProofToken\n  langs:\n  - csharp\n  name: RequestedProofToken(Byte[], EncryptingCredentials)\n  nameWithType: RequestedProofToken.RequestedProofToken(Byte[], EncryptingCredentials)\n  fullName: RequestedProofToken.RequestedProofToken(Byte[], EncryptingCredentials)\n  type: Constructor\n  assemblies:\n  - System.IdentityModel\n  namespace: System.IdentityModel.Protocols.WSTrust\n  summary: Initializes a new instance of the <xref href=\"System.IdentityModel.Protocols.WSTrust.RequestedProofToken\"></xref> class using the specified key material and encrypting credentials.\n  remarks: Use this constructor when the key is encrypted.\n  syntax:\n    content: public RequestedProofToken (byte[] secret, System.IdentityModel.Tokens.EncryptingCredentials wrappingCredentials);\n    parameters:\n    - id: secret\n      type: System.Byte[]\n      description: An array of <xref href=\"System.Byte\"></xref> that contains the key material.\n    - id: wrappingCredentials\n      type: System.IdentityModel.Tokens.EncryptingCredentials\n      description: A <xref href=\"System.IdentityModel.SecurityTokenService.EncryptingCredentials\"></xref> that represents the credentials used to encrypt the key material.\n  overload: System.IdentityModel.Protocols.WSTrust.RequestedProofToken.#ctor*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IdentityModel.Protocols.WSTrust/RequestedProofToken.xml\n  ms.technology:\n  - dotnet-standard\n  ms.author: v-jibran\n  manager: markgal\n- uid: System.IdentityModel.Protocols.WSTrust.RequestedProofToken.ComputedKeyAlgorithm\n  commentId: P:System.IdentityModel.Protocols.WSTrust.RequestedProofToken.ComputedKeyAlgorithm\n  id: ComputedKeyAlgorithm\n  parent: System.IdentityModel.Protocols.WSTrust.RequestedProofToken\n  langs:\n  - csharp\n  name: ComputedKeyAlgorithm\n  nameWithType: RequestedProofToken.ComputedKeyAlgorithm\n  fullName: RequestedProofToken.ComputedKeyAlgorithm\n  type: Property\n  assemblies:\n  - System.IdentityModel\n  namespace: System.IdentityModel.Protocols.WSTrust\n  summary: Gets the computed key algorithm used to calculate the session key in the combined entropy case.\n  remarks: Represents the contents of the wst:ComputedKey element. This element contains a URI that indicates the computed key algorithm used when keys must be computed; for example, in the combined entropy case when both the requestor and issuer specify entropy.\n  syntax:\n    content: public string ComputedKeyAlgorithm { get; }\n    return:\n      type: System.String\n      description: A string that contains a URI that indicates the computed key algorithm.\n  overload: System.IdentityModel.Protocols.WSTrust.RequestedProofToken.ComputedKeyAlgorithm*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IdentityModel.Protocols.WSTrust/RequestedProofToken.xml\n  ms.technology:\n  - dotnet-standard\n  ms.author: v-jibran\n  manager: markgal\n- uid: System.IdentityModel.Protocols.WSTrust.RequestedProofToken.ProtectedKey\n  commentId: P:System.IdentityModel.Protocols.WSTrust.RequestedProofToken.ProtectedKey\n  id: ProtectedKey\n  parent: System.IdentityModel.Protocols.WSTrust.RequestedProofToken\n  langs:\n  - csharp\n  name: ProtectedKey\n  nameWithType: RequestedProofToken.ProtectedKey\n  fullName: RequestedProofToken.ProtectedKey\n  type: Property\n  assemblies:\n  - System.IdentityModel\n  namespace: System.IdentityModel.Protocols.WSTrust\n  summary: Gets the key in the case when the wst:RequestedProofToken element contains a key.\n  remarks: Represents the contents of the wst:RequestedProofToken element when the element contains a key (rather than a wst:ComputedKeyElement).\n  syntax:\n    content: public System.IdentityModel.Protocols.WSTrust.ProtectedKey ProtectedKey { get; }\n    return:\n      type: System.IdentityModel.Protocols.WSTrust.ProtectedKey\n      description: A <xref href=\"System.IdentityModel.Protocols.WSTrust.ProtectedKey\"></xref> that represents the key, which can be either encrypted or clear text.\n  overload: System.IdentityModel.Protocols.WSTrust.RequestedProofToken.ProtectedKey*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IdentityModel.Protocols.WSTrust/RequestedProofToken.xml\n  ms.technology:\n  - dotnet-standard\n  ms.author: v-jibran\n  manager: markgal\nreferences:\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.ArgumentNullException\n  parent: System\n  isExternal: false\n  name: ArgumentNullException\n  nameWithType: ArgumentNullException\n  fullName: System.ArgumentNullException\n- uid: System.IdentityModel.Protocols.WSTrust.RequestedProofToken.#ctor(System.Byte[])\n  parent: System.IdentityModel.Protocols.WSTrust.RequestedProofToken\n  isExternal: false\n  name: RequestedProofToken(Byte[])\n  nameWithType: RequestedProofToken.RequestedProofToken(Byte[])\n  fullName: RequestedProofToken.RequestedProofToken(Byte[])\n- uid: System.Byte\n  name: Byte\n  nameWithType: Byte\n  fullName: System.Byte\n- uid: System.Byte[]\n  parent: System\n  isExternal: false\n  name: Byte[]\n  nameWithType: Byte[]\n  fullName: System.Byte[]\n  spec.csharp:\n  - uid: System.Byte\n    name: Byte\n    nameWithType: Byte\n    fullName: System.Byte\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.IdentityModel.Protocols.WSTrust.RequestedProofToken.#ctor(System.IdentityModel.Protocols.WSTrust.ProtectedKey)\n  parent: System.IdentityModel.Protocols.WSTrust.RequestedProofToken\n  isExternal: false\n  name: RequestedProofToken(ProtectedKey)\n  nameWithType: RequestedProofToken.RequestedProofToken(ProtectedKey)\n  fullName: RequestedProofToken.RequestedProofToken(ProtectedKey)\n- uid: System.IdentityModel.Protocols.WSTrust.ProtectedKey\n  parent: System.IdentityModel.Protocols.WSTrust\n  isExternal: false\n  name: ProtectedKey\n  nameWithType: ProtectedKey\n  fullName: System.IdentityModel.Protocols.WSTrust.ProtectedKey\n- uid: System.IdentityModel.Protocols.WSTrust.RequestedProofToken.#ctor(System.String)\n  parent: System.IdentityModel.Protocols.WSTrust.RequestedProofToken\n  isExternal: false\n  name: RequestedProofToken(String)\n  nameWithType: RequestedProofToken.RequestedProofToken(String)\n  fullName: RequestedProofToken.RequestedProofToken(String)\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.IdentityModel.Protocols.WSTrust.RequestedProofToken.#ctor(System.Byte[],System.IdentityModel.Tokens.EncryptingCredentials)\n  parent: System.IdentityModel.Protocols.WSTrust.RequestedProofToken\n  isExternal: false\n  name: RequestedProofToken(Byte[], EncryptingCredentials)\n  nameWithType: RequestedProofToken.RequestedProofToken(Byte[], EncryptingCredentials)\n  fullName: RequestedProofToken.RequestedProofToken(Byte[], EncryptingCredentials)\n- uid: System.IdentityModel.Tokens.EncryptingCredentials\n  parent: System.IdentityModel.Tokens\n  isExternal: false\n  name: EncryptingCredentials\n  nameWithType: EncryptingCredentials\n  fullName: System.IdentityModel.Tokens.EncryptingCredentials\n- uid: System.IdentityModel.Protocols.WSTrust.RequestedProofToken.ComputedKeyAlgorithm\n  parent: System.IdentityModel.Protocols.WSTrust.RequestedProofToken\n  isExternal: false\n  name: ComputedKeyAlgorithm\n  nameWithType: RequestedProofToken.ComputedKeyAlgorithm\n  fullName: RequestedProofToken.ComputedKeyAlgorithm\n- uid: System.IdentityModel.Protocols.WSTrust.RequestedProofToken.ProtectedKey\n  parent: System.IdentityModel.Protocols.WSTrust.RequestedProofToken\n  isExternal: false\n  name: ProtectedKey\n  nameWithType: RequestedProofToken.ProtectedKey\n  fullName: RequestedProofToken.ProtectedKey\n- uid: System.IdentityModel.Protocols.WSTrust.RequestedProofToken.#ctor*\n  parent: System.IdentityModel.Protocols.WSTrust.RequestedProofToken\n  isExternal: false\n  name: RequestedProofToken\n  nameWithType: RequestedProofToken.RequestedProofToken\n  fullName: RequestedProofToken.RequestedProofToken\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IdentityModel.Protocols.WSTrust/RequestedProofToken.xml\n- uid: System.IdentityModel.Protocols.WSTrust.RequestedProofToken.ComputedKeyAlgorithm*\n  parent: System.IdentityModel.Protocols.WSTrust.RequestedProofToken\n  isExternal: false\n  name: ComputedKeyAlgorithm\n  nameWithType: RequestedProofToken.ComputedKeyAlgorithm\n  fullName: RequestedProofToken.ComputedKeyAlgorithm\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IdentityModel.Protocols.WSTrust/RequestedProofToken.xml\n- uid: System.IdentityModel.Protocols.WSTrust.RequestedProofToken.ProtectedKey*\n  parent: System.IdentityModel.Protocols.WSTrust.RequestedProofToken\n  isExternal: false\n  name: ProtectedKey\n  nameWithType: RequestedProofToken.ProtectedKey\n  fullName: RequestedProofToken.ProtectedKey\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IdentityModel.Protocols.WSTrust/RequestedProofToken.xml\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: Object.Equals(Object)\n  fullName: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: Object.GetHashCode()\n  fullName: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: false\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: false\n  name: ToString()\n  nameWithType: Object.ToString()\n  fullName: Object.ToString()\n"}