{"nodes":[{"content":"Allows you to install and configure an event log that your application reads from or writes to when running.","nodes":[{"pos":[0,108],"content":"Allows you to install and configure an event log that your application reads from or writes to when running.","nodes":[{"content":"Allows you to install and configure an event log that your application reads from or writes to when running.","pos":[0,108]}]}],"pos":[1290,1399],"yaml":true},{"content":"The <xref:System.Diagnostics.EventLogInstaller> is used by the [Installutil.exe (Installer Tool)](~/docs/framework/tools/installutil-exe-installer-tool.md) when installing an event log. The <xref:System.Diagnostics.EventLogInstaller> class can install event logs only on the local computer.  \n  \n Use the <xref:System.Diagnostics.EventLogInstaller> class when your application writes to an event log; it is not necessary to use an event log installer for your application to read from an event log. Applications and services should write to the Application log or a custom log. Device drivers should write to the System log.  \n  \n> [!NOTE]\n>  The Security log is read-only.  \n  \n The installer creates the event source that you specify in the <xref:System.Diagnostics.EventLogInstaller.Source%2A> property and registers it for the event log specified in <xref:System.Diagnostics.EventLogInstaller.Log%2A> property. This behavior is similar to calling <xref:System.Diagnostics.EventLog.CreateEventSource%2A> on the <xref:System.Diagnostics.EventLog> component.  \n  \n Use the <xref:System.Diagnostics.EventLog.WriteEvent%2A> and <xref:System.Diagnostics.EventLog.WriteEntry%2A> methods to write events to an event log. You must specify an event source to write events; you must create and configure the event source before writing the first entry with the source.  \n  \n Create the new event source during the installation of your application. This allows time for the operating system to refresh its list of registered event sources and their configurations. If the operating system has not refreshed its list of event sources, and you attempt to write an event with the new source, the write operation will fail. You can configure a new source using an <xref:System.Diagnostics.EventLogInstaller>, or using the <xref:System.Diagnostics.EventLog.CreateEventSource%2A> method. You must have administrative rights on the computer to create a new event source.  \n  \n You can create an event source for an existing event log or a new event log. When you create a new source for a new event log, the system registers the source for that log, but the log is not created until the first entry is written to it.  \n  \n To install an event log, create a project installer class that inherits from <xref:System.Configuration.Install.Installer>, and set the <xref:System.ComponentModel.RunInstallerAttribute> for the class to `true`. Within your project, create an <xref:System.Diagnostics.EventLogInstaller> for each event log that your application will write to and add the instance to your project installer class.  \n  \n When the [Installutil.exe (Installer Tool)](~/docs/framework/tools/installutil-exe-installer-tool.md) is called, it looks at the <xref:System.ComponentModel.RunInstallerAttribute>. If it is `true`, the tool installs all the items in the <xref:System.Configuration.Install.Installer.Installers%2A> collection that are associated with your project installer. If <xref:System.ComponentModel.RunInstallerAttribute> is `false`, the tool ignores the project installer.  \n  \n You modify other properties of an <xref:System.Diagnostics.EventLogInstaller> either before or after adding the instance to the <xref:System.Configuration.Install.Installer.Installers%2A> collection of your project installer, but before the installer tool runs. You must set the <xref:System.Diagnostics.EventLogInstaller.Source%2A> property if your application will be writing to the event log.  \n  \n Use <xref:System.Diagnostics.EventLogInstaller> to register a new source for a new or existing event log; do not use <xref:System.Diagnostics.EventLogInstaller> to change an existing source. The <xref:System.Diagnostics.EventLogInstaller> class does not modify the configuration properties of an existing source to match the specified installation properties. The <xref:System.Diagnostics.EventLogInstaller.Install%2A> method throws an exception if the <xref:System.Diagnostics.EventLogInstaller.Source%2A> property matches a source name that is registered for a different event log on the computer. The <xref:System.Diagnostics.EventLogInstaller.Install%2A> method does not register the source if the <xref:System.Diagnostics.EventLogInstaller.Source%2A> property matches a source name that is already registered for the same event log specified in the <xref:System.Diagnostics.EventLogInstaller.Log%2A> property.  \n  \n You can register the event source with localized resource files for your event category and message strings. Your application can write event log entries using resource identifiers, rather than specifying the actual string. The Event Viewer uses the resource identifier to find and display the corresponding string from the localized resource file based on current language settings. You can register a separate file for event categories, messages, and parameter insertion strings, or you can register the same resource file for all three types of strings. Use the <xref:System.Diagnostics.EventLogInstaller.CategoryCount%2A>, <xref:System.Diagnostics.EventLogInstaller.CategoryResourceFile%2A>, <xref:System.Diagnostics.EventLogInstaller.MessageResourceFile%2A>, and <xref:System.Diagnostics.EventLogInstaller.ParameterResourceFile%2A> properties to configure the source to write localized entries to the event log. If your application writes strings values directly to the event log, you do not need to set these properties.  \n  \n The source must be configured either for writing localized entries or for writing direct strings. If your application writes entries using both resource identifiers and string values, you must register two separate sources. For example, configure one source with resource files, and then use that source in the <xref:System.Diagnostics.EventLog.WriteEvent%2A> method to write entries using resource identifiers to the event log. Create a different source without resource files and then use that source in the <xref:System.Diagnostics.EventLog.WriteEntry%2A> method to write strings directly to the event log using that source.  \n  \n Typically, you do not call the methods of the <xref:System.Diagnostics.EventLogInstaller> class from within your code; they are generally called only by Installutil.exe. The tool automatically calls the <xref:System.Diagnostics.EventLogInstaller.Install%2A> method during the installation process. It backs out failures, if necessary, by calling the <xref:System.Diagnostics.EventLogInstaller.Rollback%2A> method for the object that generated the exception.","nodes":[{"pos":[0,290],"content":"The <xref:System.Diagnostics.EventLogInstaller> is used by the [Installutil.exe (Installer Tool)](~/docs/framework/tools/installutil-exe-installer-tool.md) when installing an event log. The <xref:System.Diagnostics.EventLogInstaller> class can install event logs only on the local computer.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Diagnostics.EventLogInstaller&gt;</ph> is used by the <bpt id=\"p1\">[</bpt>Installutil.exe (Installer Tool)<ept id=\"p1\">](~/docs/framework/tools/installutil-exe-installer-tool.md)</ept> when installing an event log.","pos":[0,185],"source":"The <xref:System.Diagnostics.EventLogInstaller> is used by the [Installutil.exe (Installer Tool)](~/docs/framework/tools/installutil-exe-installer-tool.md) when installing an event log."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Diagnostics.EventLogInstaller&gt;</ph> class can install event logs only on the local computer.","pos":[186,290],"source":" The <xref:System.Diagnostics.EventLogInstaller> class can install event logs only on the local computer."}]},{"pos":[297,624],"content":"Use the <xref:System.Diagnostics.EventLogInstaller> class when your application writes to an event log; it is not necessary to use an event log installer for your application to read from an event log. Applications and services should write to the Application log or a custom log. Device drivers should write to the System log.","nodes":[{"content":"Use the <xref:System.Diagnostics.EventLogInstaller> class when your application writes to an event log; it is not necessary to use an event log installer for your application to read from an event log. Applications and services should write to the Application log or a custom log. Device drivers should write to the System log.","pos":[0,327],"nodes":[{"content":"Use the <ph id=\"ph1\">&lt;xref:System.Diagnostics.EventLogInstaller&gt;</ph> class when your application writes to an event log; it is not necessary to use an event log installer for your application to read from an event log.","pos":[0,201],"source":"Use the <xref:System.Diagnostics.EventLogInstaller> class when your application writes to an event log; it is not necessary to use an event log installer for your application to read from an event log."},{"content":"Applications and services should write to the Application log or a custom log.","pos":[202,280]},{"content":"Device drivers should write to the System log.","pos":[281,327]}]}]},{"pos":[632,673],"content":"[!NOTE]\n The Security log is read-only.","leadings":["","> "],"nodes":[{"content":"The Security log is read-only.","pos":[9,39]}]},{"pos":[680,1059],"content":"The installer creates the event source that you specify in the <xref:System.Diagnostics.EventLogInstaller.Source%2A> property and registers it for the event log specified in <xref:System.Diagnostics.EventLogInstaller.Log%2A> property. This behavior is similar to calling <xref:System.Diagnostics.EventLog.CreateEventSource%2A> on the <xref:System.Diagnostics.EventLog> component.","nodes":[{"content":"The installer creates the event source that you specify in the <xref:System.Diagnostics.EventLogInstaller.Source%2A> property and registers it for the event log specified in <xref:System.Diagnostics.EventLogInstaller.Log%2A> property. This behavior is similar to calling <xref:System.Diagnostics.EventLog.CreateEventSource%2A> on the <xref:System.Diagnostics.EventLog> component.","pos":[0,379],"nodes":[{"content":"The installer creates the event source that you specify in the <ph id=\"ph1\">&lt;xref:System.Diagnostics.EventLogInstaller.Source%2A&gt;</ph> property and registers it for the event log specified in <ph id=\"ph2\">&lt;xref:System.Diagnostics.EventLogInstaller.Log%2A&gt;</ph> property.","pos":[0,234],"source":"The installer creates the event source that you specify in the <xref:System.Diagnostics.EventLogInstaller.Source%2A> property and registers it for the event log specified in <xref:System.Diagnostics.EventLogInstaller.Log%2A> property."},{"content":"This behavior is similar to calling <ph id=\"ph1\">&lt;xref:System.Diagnostics.EventLog.CreateEventSource%2A&gt;</ph> on the <ph id=\"ph2\">&lt;xref:System.Diagnostics.EventLog&gt;</ph> component.","pos":[235,379],"source":" This behavior is similar to calling <xref:System.Diagnostics.EventLog.CreateEventSource%2A> on the <xref:System.Diagnostics.EventLog> component."}]}]},{"pos":[1066,1361],"content":"Use the <xref:System.Diagnostics.EventLog.WriteEvent%2A> and <xref:System.Diagnostics.EventLog.WriteEntry%2A> methods to write events to an event log. You must specify an event source to write events; you must create and configure the event source before writing the first entry with the source.","nodes":[{"content":"Use the <xref:System.Diagnostics.EventLog.WriteEvent%2A> and <xref:System.Diagnostics.EventLog.WriteEntry%2A> methods to write events to an event log. You must specify an event source to write events; you must create and configure the event source before writing the first entry with the source.","pos":[0,295],"nodes":[{"content":"Use the <ph id=\"ph1\">&lt;xref:System.Diagnostics.EventLog.WriteEvent%2A&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Diagnostics.EventLog.WriteEntry%2A&gt;</ph> methods to write events to an event log.","pos":[0,150],"source":"Use the <xref:System.Diagnostics.EventLog.WriteEvent%2A> and <xref:System.Diagnostics.EventLog.WriteEntry%2A> methods to write events to an event log."},{"content":"You must specify an event source to write events; you must create and configure the event source before writing the first entry with the source.","pos":[151,295]}]}]},{"pos":[1368,1955],"content":"Create the new event source during the installation of your application. This allows time for the operating system to refresh its list of registered event sources and their configurations. If the operating system has not refreshed its list of event sources, and you attempt to write an event with the new source, the write operation will fail. You can configure a new source using an <xref:System.Diagnostics.EventLogInstaller>, or using the <xref:System.Diagnostics.EventLog.CreateEventSource%2A> method. You must have administrative rights on the computer to create a new event source.","nodes":[{"content":"Create the new event source during the installation of your application. This allows time for the operating system to refresh its list of registered event sources and their configurations. If the operating system has not refreshed its list of event sources, and you attempt to write an event with the new source, the write operation will fail. You can configure a new source using an <xref:System.Diagnostics.EventLogInstaller>, or using the <xref:System.Diagnostics.EventLog.CreateEventSource%2A> method. You must have administrative rights on the computer to create a new event source.","pos":[0,587],"nodes":[{"content":"Create the new event source during the installation of your application.","pos":[0,72]},{"content":"This allows time for the operating system to refresh its list of registered event sources and their configurations.","pos":[73,188]},{"content":"If the operating system has not refreshed its list of event sources, and you attempt to write an event with the new source, the write operation will fail.","pos":[189,343]},{"content":"You can configure a new source using an <ph id=\"ph1\">&lt;xref:System.Diagnostics.EventLogInstaller&gt;</ph>, or using the <ph id=\"ph2\">&lt;xref:System.Diagnostics.EventLog.CreateEventSource%2A&gt;</ph> method.","pos":[344,505],"source":" You can configure a new source using an <xref:System.Diagnostics.EventLogInstaller>, or using the <xref:System.Diagnostics.EventLog.CreateEventSource%2A> method."},{"content":"You must have administrative rights on the computer to create a new event source.","pos":[506,587]}]}]},{"pos":[1962,2201],"content":"You can create an event source for an existing event log or a new event log. When you create a new source for a new event log, the system registers the source for that log, but the log is not created until the first entry is written to it.","nodes":[{"content":"You can create an event source for an existing event log or a new event log. When you create a new source for a new event log, the system registers the source for that log, but the log is not created until the first entry is written to it.","pos":[0,239],"nodes":[{"content":"You can create an event source for an existing event log or a new event log.","pos":[0,76]},{"content":"When you create a new source for a new event log, the system registers the source for that log, but the log is not created until the first entry is written to it.","pos":[77,239]}]}]},{"pos":[2208,2603],"content":"To install an event log, create a project installer class that inherits from <xref:System.Configuration.Install.Installer>, and set the <xref:System.ComponentModel.RunInstallerAttribute> for the class to `true`. Within your project, create an <xref:System.Diagnostics.EventLogInstaller> for each event log that your application will write to and add the instance to your project installer class.","nodes":[{"content":"To install an event log, create a project installer class that inherits from <ph id=\"ph1\">&lt;xref:System.Configuration.Install.Installer&gt;</ph>, and set the <ph id=\"ph2\">&lt;xref:System.ComponentModel.RunInstallerAttribute&gt;</ph> for the class to <ph id=\"ph3\">`true`</ph>.","pos":[0,211],"source":"To install an event log, create a project installer class that inherits from <xref:System.Configuration.Install.Installer>, and set the <xref:System.ComponentModel.RunInstallerAttribute> for the class to `true`."},{"content":"Within your project, create an <ph id=\"ph1\">&lt;xref:System.Diagnostics.EventLogInstaller&gt;</ph> for each event log that your application will write to and add the instance to your project installer class.","pos":[212,395],"source":" Within your project, create an <xref:System.Diagnostics.EventLogInstaller> for each event log that your application will write to and add the instance to your project installer class."}]},{"pos":[2610,3072],"content":"When the [Installutil.exe (Installer Tool)](~/docs/framework/tools/installutil-exe-installer-tool.md) is called, it looks at the <xref:System.ComponentModel.RunInstallerAttribute>. If it is `true`, the tool installs all the items in the <xref:System.Configuration.Install.Installer.Installers%2A> collection that are associated with your project installer. If <xref:System.ComponentModel.RunInstallerAttribute> is `false`, the tool ignores the project installer.","nodes":[{"content":"When the <bpt id=\"p1\">[</bpt>Installutil.exe (Installer Tool)<ept id=\"p1\">](~/docs/framework/tools/installutil-exe-installer-tool.md)</ept> is called, it looks at the <ph id=\"ph1\">&lt;xref:System.ComponentModel.RunInstallerAttribute&gt;</ph>.","pos":[0,180],"source":"When the [Installutil.exe (Installer Tool)](~/docs/framework/tools/installutil-exe-installer-tool.md) is called, it looks at the <xref:System.ComponentModel.RunInstallerAttribute>."},{"content":"If it is <ph id=\"ph1\">`true`</ph>, the tool installs all the items in the <ph id=\"ph2\">&lt;xref:System.Configuration.Install.Installer.Installers%2A&gt;</ph> collection that are associated with your project installer.","pos":[181,356],"source":" If it is `true`, the tool installs all the items in the <xref:System.Configuration.Install.Installer.Installers%2A> collection that are associated with your project installer."},{"content":"If <ph id=\"ph1\">&lt;xref:System.ComponentModel.RunInstallerAttribute&gt;</ph> is <ph id=\"ph2\">`false`</ph>, the tool ignores the project installer.","pos":[357,462],"source":" If <xref:System.ComponentModel.RunInstallerAttribute> is `false`, the tool ignores the project installer."}]},{"pos":[3079,3474],"content":"You modify other properties of an <xref:System.Diagnostics.EventLogInstaller> either before or after adding the instance to the <xref:System.Configuration.Install.Installer.Installers%2A> collection of your project installer, but before the installer tool runs. You must set the <xref:System.Diagnostics.EventLogInstaller.Source%2A> property if your application will be writing to the event log.","nodes":[{"content":"You modify other properties of an <xref:System.Diagnostics.EventLogInstaller> either before or after adding the instance to the <xref:System.Configuration.Install.Installer.Installers%2A> collection of your project installer, but before the installer tool runs. You must set the <xref:System.Diagnostics.EventLogInstaller.Source%2A> property if your application will be writing to the event log.","pos":[0,395],"nodes":[{"content":"You modify other properties of an <ph id=\"ph1\">&lt;xref:System.Diagnostics.EventLogInstaller&gt;</ph> either before or after adding the instance to the <ph id=\"ph2\">&lt;xref:System.Configuration.Install.Installer.Installers%2A&gt;</ph> collection of your project installer, but before the installer tool runs.","pos":[0,261],"source":"You modify other properties of an <xref:System.Diagnostics.EventLogInstaller> either before or after adding the instance to the <xref:System.Configuration.Install.Installer.Installers%2A> collection of your project installer, but before the installer tool runs."},{"content":"You must set the <ph id=\"ph1\">&lt;xref:System.Diagnostics.EventLogInstaller.Source%2A&gt;</ph> property if your application will be writing to the event log.","pos":[262,395],"source":" You must set the <xref:System.Diagnostics.EventLogInstaller.Source%2A> property if your application will be writing to the event log."}]}]},{"pos":[3481,4395],"content":"Use <xref:System.Diagnostics.EventLogInstaller> to register a new source for a new or existing event log; do not use <xref:System.Diagnostics.EventLogInstaller> to change an existing source. The <xref:System.Diagnostics.EventLogInstaller> class does not modify the configuration properties of an existing source to match the specified installation properties. The <xref:System.Diagnostics.EventLogInstaller.Install%2A> method throws an exception if the <xref:System.Diagnostics.EventLogInstaller.Source%2A> property matches a source name that is registered for a different event log on the computer. The <xref:System.Diagnostics.EventLogInstaller.Install%2A> method does not register the source if the <xref:System.Diagnostics.EventLogInstaller.Source%2A> property matches a source name that is already registered for the same event log specified in the <xref:System.Diagnostics.EventLogInstaller.Log%2A> property.","nodes":[{"content":"Use <xref:System.Diagnostics.EventLogInstaller> to register a new source for a new or existing event log; do not use <xref:System.Diagnostics.EventLogInstaller> to change an existing source. The <xref:System.Diagnostics.EventLogInstaller> class does not modify the configuration properties of an existing source to match the specified installation properties. The <xref:System.Diagnostics.EventLogInstaller.Install%2A> method throws an exception if the <xref:System.Diagnostics.EventLogInstaller.Source%2A> property matches a source name that is registered for a different event log on the computer. The <xref:System.Diagnostics.EventLogInstaller.Install%2A> method does not register the source if the <xref:System.Diagnostics.EventLogInstaller.Source%2A> property matches a source name that is already registered for the same event log specified in the <xref:System.Diagnostics.EventLogInstaller.Log%2A> property.","pos":[0,914],"nodes":[{"content":"Use <ph id=\"ph1\">&lt;xref:System.Diagnostics.EventLogInstaller&gt;</ph> to register a new source for a new or existing event log; do not use <ph id=\"ph2\">&lt;xref:System.Diagnostics.EventLogInstaller&gt;</ph> to change an existing source.","pos":[0,190],"source":"Use <xref:System.Diagnostics.EventLogInstaller> to register a new source for a new or existing event log; do not use <xref:System.Diagnostics.EventLogInstaller> to change an existing source."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Diagnostics.EventLogInstaller&gt;</ph> class does not modify the configuration properties of an existing source to match the specified installation properties.","pos":[191,359],"source":" The <xref:System.Diagnostics.EventLogInstaller> class does not modify the configuration properties of an existing source to match the specified installation properties."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Diagnostics.EventLogInstaller.Install%2A&gt;</ph> method throws an exception if the <ph id=\"ph2\">&lt;xref:System.Diagnostics.EventLogInstaller.Source%2A&gt;</ph> property matches a source name that is registered for a different event log on the computer.","pos":[360,599],"source":" The <xref:System.Diagnostics.EventLogInstaller.Install%2A> method throws an exception if the <xref:System.Diagnostics.EventLogInstaller.Source%2A> property matches a source name that is registered for a different event log on the computer."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Diagnostics.EventLogInstaller.Install%2A&gt;</ph> method does not register the source if the <ph id=\"ph2\">&lt;xref:System.Diagnostics.EventLogInstaller.Source%2A&gt;</ph> property matches a source name that is already registered for the same event log specified in the <ph id=\"ph3\">&lt;xref:System.Diagnostics.EventLogInstaller.Log%2A&gt;</ph> property.","pos":[600,914],"source":" The <xref:System.Diagnostics.EventLogInstaller.Install%2A> method does not register the source if the <xref:System.Diagnostics.EventLogInstaller.Source%2A> property matches a source name that is already registered for the same event log specified in the <xref:System.Diagnostics.EventLogInstaller.Log%2A> property."}]}]},{"pos":[4402,5428],"content":"You can register the event source with localized resource files for your event category and message strings. Your application can write event log entries using resource identifiers, rather than specifying the actual string. The Event Viewer uses the resource identifier to find and display the corresponding string from the localized resource file based on current language settings. You can register a separate file for event categories, messages, and parameter insertion strings, or you can register the same resource file for all three types of strings. Use the <xref:System.Diagnostics.EventLogInstaller.CategoryCount%2A>, <xref:System.Diagnostics.EventLogInstaller.CategoryResourceFile%2A>, <xref:System.Diagnostics.EventLogInstaller.MessageResourceFile%2A>, and <xref:System.Diagnostics.EventLogInstaller.ParameterResourceFile%2A> properties to configure the source to write localized entries to the event log. If your application writes strings values directly to the event log, you do not need to set these properties.","nodes":[{"content":"You can register the event source with localized resource files for your event category and message strings. Your application can write event log entries using resource identifiers, rather than specifying the actual string. The Event Viewer uses the resource identifier to find and display the corresponding string from the localized resource file based on current language settings. You can register a separate file for event categories, messages, and parameter insertion strings, or you can register the same resource file for all three types of strings. Use the <xref:System.Diagnostics.EventLogInstaller.CategoryCount%2A>, <xref:System.Diagnostics.EventLogInstaller.CategoryResourceFile%2A>, <xref:System.Diagnostics.EventLogInstaller.MessageResourceFile%2A>, and <xref:System.Diagnostics.EventLogInstaller.ParameterResourceFile%2A> properties to configure the source to write localized entries to the event log. If your application writes strings values directly to the event log, you do not need to set these properties.","pos":[0,1026],"nodes":[{"content":"You can register the event source with localized resource files for your event category and message strings.","pos":[0,108]},{"content":"Your application can write event log entries using resource identifiers, rather than specifying the actual string.","pos":[109,223]},{"content":"The Event Viewer uses the resource identifier to find and display the corresponding string from the localized resource file based on current language settings.","pos":[224,383]},{"content":"You can register a separate file for event categories, messages, and parameter insertion strings, or you can register the same resource file for all three types of strings.","pos":[384,556]},{"content":"Use the <ph id=\"ph1\">&lt;xref:System.Diagnostics.EventLogInstaller.CategoryCount%2A&gt;</ph>, <ph id=\"ph2\">&lt;xref:System.Diagnostics.EventLogInstaller.CategoryResourceFile%2A&gt;</ph>, <ph id=\"ph3\">&lt;xref:System.Diagnostics.EventLogInstaller.MessageResourceFile%2A&gt;</ph>, and <ph id=\"ph4\">&lt;xref:System.Diagnostics.EventLogInstaller.ParameterResourceFile%2A&gt;</ph> properties to configure the source to write localized entries to the event log.","pos":[557,916],"source":" Use the <xref:System.Diagnostics.EventLogInstaller.CategoryCount%2A>, <xref:System.Diagnostics.EventLogInstaller.CategoryResourceFile%2A>, <xref:System.Diagnostics.EventLogInstaller.MessageResourceFile%2A>, and <xref:System.Diagnostics.EventLogInstaller.ParameterResourceFile%2A> properties to configure the source to write localized entries to the event log."},{"content":"If your application writes strings values directly to the event log, you do not need to set these properties.","pos":[917,1026]}]}]},{"pos":[5435,6062],"content":"The source must be configured either for writing localized entries or for writing direct strings. If your application writes entries using both resource identifiers and string values, you must register two separate sources. For example, configure one source with resource files, and then use that source in the <xref:System.Diagnostics.EventLog.WriteEvent%2A> method to write entries using resource identifiers to the event log. Create a different source without resource files and then use that source in the <xref:System.Diagnostics.EventLog.WriteEntry%2A> method to write strings directly to the event log using that source.","nodes":[{"content":"The source must be configured either for writing localized entries or for writing direct strings. If your application writes entries using both resource identifiers and string values, you must register two separate sources. For example, configure one source with resource files, and then use that source in the <xref:System.Diagnostics.EventLog.WriteEvent%2A> method to write entries using resource identifiers to the event log. Create a different source without resource files and then use that source in the <xref:System.Diagnostics.EventLog.WriteEntry%2A> method to write strings directly to the event log using that source.","pos":[0,627],"nodes":[{"content":"The source must be configured either for writing localized entries or for writing direct strings.","pos":[0,97]},{"content":"If your application writes entries using both resource identifiers and string values, you must register two separate sources.","pos":[98,223]},{"content":"For example, configure one source with resource files, and then use that source in the <ph id=\"ph1\">&lt;xref:System.Diagnostics.EventLog.WriteEvent%2A&gt;</ph> method to write entries using resource identifiers to the event log.","pos":[224,428],"source":" For example, configure one source with resource files, and then use that source in the <xref:System.Diagnostics.EventLog.WriteEvent%2A> method to write entries using resource identifiers to the event log."},{"content":"Create a different source without resource files and then use that source in the <ph id=\"ph1\">&lt;xref:System.Diagnostics.EventLog.WriteEntry%2A&gt;</ph> method to write strings directly to the event log using that source.","pos":[429,627],"source":" Create a different source without resource files and then use that source in the <xref:System.Diagnostics.EventLog.WriteEntry%2A> method to write strings directly to the event log using that source."}]}]},{"pos":[6069,6526],"content":"Typically, you do not call the methods of the <xref:System.Diagnostics.EventLogInstaller> class from within your code; they are generally called only by Installutil.exe. The tool automatically calls the <xref:System.Diagnostics.EventLogInstaller.Install%2A> method during the installation process. It backs out failures, if necessary, by calling the <xref:System.Diagnostics.EventLogInstaller.Rollback%2A> method for the object that generated the exception.","nodes":[{"content":"Typically, you do not call the methods of the <xref:System.Diagnostics.EventLogInstaller> class from within your code; they are generally called only by Installutil.exe. The tool automatically calls the <xref:System.Diagnostics.EventLogInstaller.Install%2A> method during the installation process. It backs out failures, if necessary, by calling the <xref:System.Diagnostics.EventLogInstaller.Rollback%2A> method for the object that generated the exception.","pos":[0,457],"nodes":[{"content":"Typically, you do not call the methods of the <ph id=\"ph1\">&lt;xref:System.Diagnostics.EventLogInstaller&gt;</ph> class from within your code; they are generally called only by Installutil.exe.","pos":[0,169],"source":"Typically, you do not call the methods of the <xref:System.Diagnostics.EventLogInstaller> class from within your code; they are generally called only by Installutil.exe."},{"content":"The tool automatically calls the <ph id=\"ph1\">&lt;xref:System.Diagnostics.EventLogInstaller.Install%2A&gt;</ph> method during the installation process.","pos":[170,297],"source":" The tool automatically calls the <xref:System.Diagnostics.EventLogInstaller.Install%2A> method during the installation process."},{"content":"It backs out failures, if necessary, by calling the <ph id=\"ph1\">&lt;xref:System.Diagnostics.EventLogInstaller.Rollback%2A&gt;</ph> method for the object that generated the exception.","pos":[298,457],"source":" It backs out failures, if necessary, by calling the <xref:System.Diagnostics.EventLogInstaller.Rollback%2A> method for the object that generated the exception."}]}]}],"pos":[1410,7966],"yaml":true,"extradata":"MT"},{"content":"Initializes a new instance of the <xref href=\"System.Diagnostics.EventLogInstaller\"></xref> class.","nodes":[{"pos":[0,98],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Diagnostics.EventLogInstaller\"&gt;&lt;/xref&gt;</ph> class.","source":"Initializes a new instance of the <xref href=\"System.Diagnostics.EventLogInstaller\"></xref> class."}],"pos":[12400,12499],"yaml":true},{"content":"Gets or sets the number of categories in the category resource file.","nodes":[{"pos":[0,68],"content":"Gets or sets the number of categories in the category resource file.","nodes":[{"content":"Gets or sets the number of categories in the category resource file.","pos":[0,68]}]}],"pos":[13647,13716],"yaml":true},{"content":"Use the <xref:System.Diagnostics.EventLogInstaller.CategoryCount%2A> and <xref:System.Diagnostics.EventLogInstaller.CategoryResourceFile%2A> properties to write events with localized category strings. The Event Viewer displays the category for an event entry, if you supply a category when you write the event. Event log categories are application-defined strings that help filter events, or provide information on an event. For example, your application can define separate categories for different components or different operations.  \n  \n Event categories are optional; if your application does not use categories, do not set the <xref:System.Diagnostics.EventLogInstaller.CategoryCount%2A> and <xref:System.Diagnostics.EventLogInstaller.CategoryResourceFile%2A> properties.  \n  \n For details about defining event messages and building event resource files, see the \"Message Compiler\" topic in the Platform SDK documentation at [http://msdn.microsoft.com](http://msdn.microsoft.com/).","nodes":[{"pos":[0,535],"content":"Use the <xref:System.Diagnostics.EventLogInstaller.CategoryCount%2A> and <xref:System.Diagnostics.EventLogInstaller.CategoryResourceFile%2A> properties to write events with localized category strings. The Event Viewer displays the category for an event entry, if you supply a category when you write the event. Event log categories are application-defined strings that help filter events, or provide information on an event. For example, your application can define separate categories for different components or different operations.","nodes":[{"content":"Use the <xref:System.Diagnostics.EventLogInstaller.CategoryCount%2A> and <xref:System.Diagnostics.EventLogInstaller.CategoryResourceFile%2A> properties to write events with localized category strings. The Event Viewer displays the category for an event entry, if you supply a category when you write the event. Event log categories are application-defined strings that help filter events, or provide information on an event. For example, your application can define separate categories for different components or different operations.","pos":[0,535],"nodes":[{"content":"Use the <ph id=\"ph1\">&lt;xref:System.Diagnostics.EventLogInstaller.CategoryCount%2A&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Diagnostics.EventLogInstaller.CategoryResourceFile%2A&gt;</ph> properties to write events with localized category strings.","pos":[0,200],"source":"Use the <xref:System.Diagnostics.EventLogInstaller.CategoryCount%2A> and <xref:System.Diagnostics.EventLogInstaller.CategoryResourceFile%2A> properties to write events with localized category strings."},{"content":"The Event Viewer displays the category for an event entry, if you supply a category when you write the event.","pos":[201,310]},{"content":"Event log categories are application-defined strings that help filter events, or provide information on an event.","pos":[311,424]},{"content":"For example, your application can define separate categories for different components or different operations.","pos":[425,535]}]}]},{"pos":[542,777],"content":"Event categories are optional; if your application does not use categories, do not set the <xref:System.Diagnostics.EventLogInstaller.CategoryCount%2A> and <xref:System.Diagnostics.EventLogInstaller.CategoryResourceFile%2A> properties.","nodes":[{"content":"Event categories are optional; if your application does not use categories, do not set the <ph id=\"ph1\">&lt;xref:System.Diagnostics.EventLogInstaller.CategoryCount%2A&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Diagnostics.EventLogInstaller.CategoryResourceFile%2A&gt;</ph> properties.","pos":[0,235],"source":"Event categories are optional; if your application does not use categories, do not set the <xref:System.Diagnostics.EventLogInstaller.CategoryCount%2A> and <xref:System.Diagnostics.EventLogInstaller.CategoryResourceFile%2A> properties."}]},{"pos":[784,987],"content":"For details about defining event messages and building event resource files, see the \"Message Compiler\" topic in the Platform SDK documentation at <bpt id=\"p1\">[</bpt>http://msdn.microsoft.com<ept id=\"p1\">](http://msdn.microsoft.com/)</ept>.","source":"For details about defining event messages and building event resource files, see the \"Message Compiler\" topic in the Platform SDK documentation at [http://msdn.microsoft.com](http://msdn.microsoft.com/)."}],"pos":[13727,14723],"yaml":true,"extradata":"MT"},{"content":"The number of categories in the category resource file. The default value is zero.","nodes":[{"pos":[0,82],"content":"The number of categories in the category resource file. The default value is zero.","nodes":[{"content":"The number of categories in the category resource file. The default value is zero.","pos":[0,82],"nodes":[{"content":"The number of categories in the category resource file.","pos":[0,55]},{"content":"The default value is zero.","pos":[56,82]}]}]}],"pos":[18729,18812],"yaml":true},{"content":"Gets or sets the path of the resource file that contains category strings for the source.","nodes":[{"pos":[0,89],"content":"Gets or sets the path of the resource file that contains category strings for the source.","nodes":[{"content":"Gets or sets the path of the resource file that contains category strings for the source.","pos":[0,89]}]}],"pos":[20014,20104],"yaml":true},{"content":"Use the <xref:System.Diagnostics.EventLogInstaller.CategoryCount%2A> and <xref:System.Diagnostics.EventLogInstaller.CategoryResourceFile%2A> properties to write events with localized category strings. The Event Viewer displays the category for an event entry if you supply a category when you write the event. Event log categories are application-defined strings that help filter events, or provide information about an event. For example, your application might have separate categories for different components or different operations.  \n  \n Event categories are optional; if your application does not use categories, do not set the <xref:System.Diagnostics.EventLogInstaller.CategoryCount%2A> and <xref:System.Diagnostics.EventLogInstaller.CategoryResourceFile%2A> properties.  \n  \n For details about defining event messages and building event resource files, see the \"Message Compiler\" topic in the Platform SDK documentation at [http://msdn.microsoft.com](http://msdn.microsoft.com/).","nodes":[{"pos":[0,537],"content":"Use the <xref:System.Diagnostics.EventLogInstaller.CategoryCount%2A> and <xref:System.Diagnostics.EventLogInstaller.CategoryResourceFile%2A> properties to write events with localized category strings. The Event Viewer displays the category for an event entry if you supply a category when you write the event. Event log categories are application-defined strings that help filter events, or provide information about an event. For example, your application might have separate categories for different components or different operations.","nodes":[{"content":"Use the <xref:System.Diagnostics.EventLogInstaller.CategoryCount%2A> and <xref:System.Diagnostics.EventLogInstaller.CategoryResourceFile%2A> properties to write events with localized category strings. The Event Viewer displays the category for an event entry if you supply a category when you write the event. Event log categories are application-defined strings that help filter events, or provide information about an event. For example, your application might have separate categories for different components or different operations.","pos":[0,537],"nodes":[{"content":"Use the <ph id=\"ph1\">&lt;xref:System.Diagnostics.EventLogInstaller.CategoryCount%2A&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Diagnostics.EventLogInstaller.CategoryResourceFile%2A&gt;</ph> properties to write events with localized category strings.","pos":[0,200],"source":"Use the <xref:System.Diagnostics.EventLogInstaller.CategoryCount%2A> and <xref:System.Diagnostics.EventLogInstaller.CategoryResourceFile%2A> properties to write events with localized category strings."},{"content":"The Event Viewer displays the category for an event entry if you supply a category when you write the event.","pos":[201,309]},{"content":"Event log categories are application-defined strings that help filter events, or provide information about an event.","pos":[310,426]},{"content":"For example, your application might have separate categories for different components or different operations.","pos":[427,537]}]}]},{"pos":[544,779],"content":"Event categories are optional; if your application does not use categories, do not set the <xref:System.Diagnostics.EventLogInstaller.CategoryCount%2A> and <xref:System.Diagnostics.EventLogInstaller.CategoryResourceFile%2A> properties.","nodes":[{"content":"Event categories are optional; if your application does not use categories, do not set the <ph id=\"ph1\">&lt;xref:System.Diagnostics.EventLogInstaller.CategoryCount%2A&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Diagnostics.EventLogInstaller.CategoryResourceFile%2A&gt;</ph> properties.","pos":[0,235],"source":"Event categories are optional; if your application does not use categories, do not set the <xref:System.Diagnostics.EventLogInstaller.CategoryCount%2A> and <xref:System.Diagnostics.EventLogInstaller.CategoryResourceFile%2A> properties."}]},{"pos":[786,989],"content":"For details about defining event messages and building event resource files, see the \"Message Compiler\" topic in the Platform SDK documentation at <bpt id=\"p1\">[</bpt>http://msdn.microsoft.com<ept id=\"p1\">](http://msdn.microsoft.com/)</ept>.","source":"For details about defining event messages and building event resource files, see the \"Message Compiler\" topic in the Platform SDK documentation at [http://msdn.microsoft.com](http://msdn.microsoft.com/)."}],"pos":[20115,21113],"yaml":true,"extradata":"MT"},{"content":"The path of the category resource file. The default is an empty string (\"\").","nodes":[{"pos":[0,76],"content":"The path of the category resource file. The default is an empty string (\"\").","nodes":[{"content":"The path of the category resource file. The default is an empty string (\"\").","pos":[0,76],"nodes":[{"content":"The path of the category resource file.","pos":[0,39]},{"content":"The default is an empty string (\"\").","pos":[40,76]}]}]}],"pos":[25307,25384],"yaml":true},{"content":"Copies the property values of an <xref href=\"System.Diagnostics.EventLog\"></xref> component that are required at installation time for an event log.","nodes":[{"pos":[0,148],"content":"Copies the property values of an <ph id=\"ph1\">&lt;xref href=\"System.Diagnostics.EventLog\"&gt;&lt;/xref&gt;</ph> component that are required at installation time for an event log.","source":"Copies the property values of an <xref href=\"System.Diagnostics.EventLog\"></xref> component that are required at installation time for an event log."}],"pos":[26766,26915],"yaml":true},{"content":"The component specified by the `component` parameter must be an <xref:System.Diagnostics.EventLog>; otherwise, an exception is thrown.  \n  \n Typically, you do not call the methods of the <xref:System.Diagnostics.EventLogInstaller> from within your code; they are generally called only by the [Installutil.exe (Installer Tool)](~/docs/framework/tools/installutil-exe-installer-tool.md). <xref:System.Diagnostics.EventLogInstaller.CopyFromComponent%2A> is used by Installutil.exe to set the property values for the <xref:System.Diagnostics.EventLogInstaller> to the values of an existing <xref:System.Diagnostics.EventLog>.  \n  \n If the <xref:System.Diagnostics.EventLog.Log%2A> of the <xref:System.Diagnostics.EventLog> that is passed in is an empty string (\"\"), you must set the <xref:System.Diagnostics.EventLog.Log%2A> property to a valid value before the installer executes.","nodes":[{"pos":[0,134],"content":"The component specified by the <ph id=\"ph1\">`component`</ph> parameter must be an <ph id=\"ph2\">&lt;xref:System.Diagnostics.EventLog&gt;</ph>; otherwise, an exception is thrown.","source":"The component specified by the `component` parameter must be an <xref:System.Diagnostics.EventLog>; otherwise, an exception is thrown."},{"pos":[141,621],"content":"Typically, you do not call the methods of the <xref:System.Diagnostics.EventLogInstaller> from within your code; they are generally called only by the [Installutil.exe (Installer Tool)](~/docs/framework/tools/installutil-exe-installer-tool.md). <xref:System.Diagnostics.EventLogInstaller.CopyFromComponent%2A> is used by Installutil.exe to set the property values for the <xref:System.Diagnostics.EventLogInstaller> to the values of an existing <xref:System.Diagnostics.EventLog>.","nodes":[{"content":"Typically, you do not call the methods of the <ph id=\"ph1\">&lt;xref:System.Diagnostics.EventLogInstaller&gt;</ph> from within your code; they are generally called only by the <bpt id=\"p1\">[</bpt>Installutil.exe (Installer Tool)<ept id=\"p1\">](~/docs/framework/tools/installutil-exe-installer-tool.md)</ept>.","pos":[0,244],"source":"Typically, you do not call the methods of the <xref:System.Diagnostics.EventLogInstaller> from within your code; they are generally called only by the [Installutil.exe (Installer Tool)](~/docs/framework/tools/installutil-exe-installer-tool.md)."},{"content":"<ph id=\"ph1\">&lt;xref:System.Diagnostics.EventLogInstaller.CopyFromComponent%2A&gt;</ph> is used by Installutil.exe to set the property values for the <ph id=\"ph2\">&lt;xref:System.Diagnostics.EventLogInstaller&gt;</ph> to the values of an existing <ph id=\"ph3\">&lt;xref:System.Diagnostics.EventLog&gt;</ph>.","pos":[245,480],"source":" <xref:System.Diagnostics.EventLogInstaller.CopyFromComponent%2A> is used by Installutil.exe to set the property values for the <xref:System.Diagnostics.EventLogInstaller> to the values of an existing <xref:System.Diagnostics.EventLog>."}]},{"pos":[628,877],"content":"If the <xref:System.Diagnostics.EventLog.Log%2A> of the <xref:System.Diagnostics.EventLog> that is passed in is an empty string (\"\"), you must set the <xref:System.Diagnostics.EventLog.Log%2A> property to a valid value before the installer executes.","nodes":[{"content":"If the <ph id=\"ph1\">&lt;xref:System.Diagnostics.EventLog.Log%2A&gt;</ph> of the <ph id=\"ph2\">&lt;xref:System.Diagnostics.EventLog&gt;</ph> that is passed in is an empty string (\"\"), you must set the <ph id=\"ph3\">&lt;xref:System.Diagnostics.EventLog.Log%2A&gt;</ph> property to a valid value before the installer executes.","pos":[0,249],"source":"If the <xref:System.Diagnostics.EventLog.Log%2A> of the <xref:System.Diagnostics.EventLog> that is passed in is an empty string (\"\"), you must set the <xref:System.Diagnostics.EventLog.Log%2A> property to a valid value before the installer executes."}]}],"pos":[26926,27812],"yaml":true,"extradata":"MT"},{"content":"An <xref href=\"System.ComponentModel.IComponent\"></xref> to use as a template for the <xref href=\"System.Diagnostics.EventLogInstaller\"></xref>.","nodes":[{"pos":[0,144],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.ComponentModel.IComponent\"&gt;&lt;/xref&gt;</ph> to use as a template for the <ph id=\"ph2\">&lt;xref href=\"System.Diagnostics.EventLogInstaller\"&gt;&lt;/xref&gt;</ph>.","source":"An <xref href=\"System.ComponentModel.IComponent\"></xref> to use as a template for the <xref href=\"System.Diagnostics.EventLogInstaller\"></xref>."}],"pos":[28020,28165],"yaml":true},{"content":"The specified component is not an <xref href=\"System.Diagnostics.EventLog\"></xref>.  \n  \n -or-  \n  \n The <xref href=\"System.Diagnostics.EventLog.Log\"></xref> or <xref href=\"System.Diagnostics.EventLog.Source\"></xref> property of the specified component is either `null` or empty.","nodes":[{"pos":[0,83],"content":"The specified component is not an <ph id=\"ph1\">&lt;xref href=\"System.Diagnostics.EventLog\"&gt;&lt;/xref&gt;</ph>.","source":"The specified component is not an <xref href=\"System.Diagnostics.EventLog\"></xref>."},{"pos":[90,94],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[101,279],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Diagnostics.EventLog.Log\"&gt;&lt;/xref&gt;</ph> or <ph id=\"ph2\">&lt;xref href=\"System.Diagnostics.EventLog.Source\"&gt;&lt;/xref&gt;</ph> property of the specified component is either <ph id=\"ph3\">`null`</ph> or empty.","source":"The <xref href=\"System.Diagnostics.EventLog.Log\"></xref> or <xref href=\"System.Diagnostics.EventLog.Source\"></xref> property of the specified component is either `null` or empty."}],"pos":[28341,28633],"yaml":true},{"content":"Performs the installation and writes event log information to the registry.","nodes":[{"pos":[0,75],"content":"Performs the installation and writes event log information to the registry.","nodes":[{"content":"Performs the installation and writes event log information to the registry.","pos":[0,75]}]}],"pos":[29734,29810],"yaml":true},{"content":"The <xref:System.Diagnostics.EventLogInstaller.Install%2A> method writes event log information to the registry, and associates the event log with a log that is specified by the <xref:System.Diagnostics.EventLogInstaller.Log%2A> property. If the log does not already exist (and a source is specified), <xref:System.Diagnostics.EventLogInstaller.Install%2A> creates a log and associates the new source with it.  \n  \n Typically, you do not call the methods of the <xref:System.Diagnostics.EventLogInstaller> from within your code; they are generally called only by the [Installutil.exe (Installer Tool)](~/docs/framework/tools/installutil-exe-installer-tool.md). The tool automatically calls the <xref:System.Diagnostics.EventLogInstaller.Install%2A> method during the installation process to write registry information that is associated with the event log being installed. Installation is transactional, so if there is a failure of any installation project component during the installation, all the previously-installed components are rolled back to their pre-installation states. This is accomplished by calling each component's <xref:System.Diagnostics.EventLogInstaller.Rollback%2A> method.  \n  \n Use <xref:System.Diagnostics.EventLogInstaller> to register a new source for a new or existing event log; do not use <xref:System.Diagnostics.EventLogInstaller> to change an existing source. The <xref:System.Diagnostics.EventLogInstaller> class does not modify the configuration properties of an existing source to match the specified installation properties. The <xref:System.Diagnostics.EventLogInstaller.Install%2A> method throws an exception if the <xref:System.Diagnostics.EventLogInstaller.Source%2A> property matches a source name that is registered for a different event log on the computer. The <xref:System.Diagnostics.EventLogInstaller.Install%2A> method skips registering the source if the <xref:System.Diagnostics.EventLogInstaller.Source%2A> property matches a source name that is already registered for the same event log specified in the <xref:System.Diagnostics.EventLogInstaller.Log%2A> property.  \n  \n An application's install routine uses the project installer's <xref:System.Configuration.Install.Installer.Context%2A?displayProperty=fullName> property to automatically maintain information about the components that have already been installed. This state information, which is passed to <xref:System.Diagnostics.EventLogInstaller.Install%2A> as the `stateSaver` parameter, is continuously updated as the tool installs each <xref:System.Diagnostics.EventLogInstaller>. Usually, it is not necessary for your code to explicitly modify this state information.","nodes":[{"pos":[0,408],"content":"The <xref:System.Diagnostics.EventLogInstaller.Install%2A> method writes event log information to the registry, and associates the event log with a log that is specified by the <xref:System.Diagnostics.EventLogInstaller.Log%2A> property. If the log does not already exist (and a source is specified), <xref:System.Diagnostics.EventLogInstaller.Install%2A> creates a log and associates the new source with it.","nodes":[{"content":"The <xref:System.Diagnostics.EventLogInstaller.Install%2A> method writes event log information to the registry, and associates the event log with a log that is specified by the <xref:System.Diagnostics.EventLogInstaller.Log%2A> property. If the log does not already exist (and a source is specified), <xref:System.Diagnostics.EventLogInstaller.Install%2A> creates a log and associates the new source with it.","pos":[0,408],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Diagnostics.EventLogInstaller.Install%2A&gt;</ph> method writes event log information to the registry, and associates the event log with a log that is specified by the <ph id=\"ph2\">&lt;xref:System.Diagnostics.EventLogInstaller.Log%2A&gt;</ph> property.","pos":[0,237],"source":"The <xref:System.Diagnostics.EventLogInstaller.Install%2A> method writes event log information to the registry, and associates the event log with a log that is specified by the <xref:System.Diagnostics.EventLogInstaller.Log%2A> property."},{"content":"If the log does not already exist (and a source is specified), <ph id=\"ph1\">&lt;xref:System.Diagnostics.EventLogInstaller.Install%2A&gt;</ph> creates a log and associates the new source with it.","pos":[238,408],"source":" If the log does not already exist (and a source is specified), <xref:System.Diagnostics.EventLogInstaller.Install%2A> creates a log and associates the new source with it."}]}]},{"pos":[415,1193],"content":"Typically, you do not call the methods of the <xref:System.Diagnostics.EventLogInstaller> from within your code; they are generally called only by the [Installutil.exe (Installer Tool)](~/docs/framework/tools/installutil-exe-installer-tool.md). The tool automatically calls the <xref:System.Diagnostics.EventLogInstaller.Install%2A> method during the installation process to write registry information that is associated with the event log being installed. Installation is transactional, so if there is a failure of any installation project component during the installation, all the previously-installed components are rolled back to their pre-installation states. This is accomplished by calling each component's <xref:System.Diagnostics.EventLogInstaller.Rollback%2A> method.","nodes":[{"content":"Typically, you do not call the methods of the <ph id=\"ph1\">&lt;xref:System.Diagnostics.EventLogInstaller&gt;</ph> from within your code; they are generally called only by the <bpt id=\"p1\">[</bpt>Installutil.exe (Installer Tool)<ept id=\"p1\">](~/docs/framework/tools/installutil-exe-installer-tool.md)</ept>.","pos":[0,244],"source":"Typically, you do not call the methods of the <xref:System.Diagnostics.EventLogInstaller> from within your code; they are generally called only by the [Installutil.exe (Installer Tool)](~/docs/framework/tools/installutil-exe-installer-tool.md)."},{"content":"The tool automatically calls the <ph id=\"ph1\">&lt;xref:System.Diagnostics.EventLogInstaller.Install%2A&gt;</ph> method during the installation process to write registry information that is associated with the event log being installed.","pos":[245,456],"source":" The tool automatically calls the <xref:System.Diagnostics.EventLogInstaller.Install%2A> method during the installation process to write registry information that is associated with the event log being installed."},{"content":"Installation is transactional, so if there is a failure of any installation project component during the installation, all the previously-installed components are rolled back to their pre-installation states.","pos":[457,665]},{"content":"This is accomplished by calling each component's <ph id=\"ph1\">&lt;xref:System.Diagnostics.EventLogInstaller.Rollback%2A&gt;</ph> method.","pos":[666,778],"source":" This is accomplished by calling each component's <xref:System.Diagnostics.EventLogInstaller.Rollback%2A> method."}]},{"pos":[1200,2114],"content":"Use <xref:System.Diagnostics.EventLogInstaller> to register a new source for a new or existing event log; do not use <xref:System.Diagnostics.EventLogInstaller> to change an existing source. The <xref:System.Diagnostics.EventLogInstaller> class does not modify the configuration properties of an existing source to match the specified installation properties. The <xref:System.Diagnostics.EventLogInstaller.Install%2A> method throws an exception if the <xref:System.Diagnostics.EventLogInstaller.Source%2A> property matches a source name that is registered for a different event log on the computer. The <xref:System.Diagnostics.EventLogInstaller.Install%2A> method skips registering the source if the <xref:System.Diagnostics.EventLogInstaller.Source%2A> property matches a source name that is already registered for the same event log specified in the <xref:System.Diagnostics.EventLogInstaller.Log%2A> property.","nodes":[{"content":"Use <xref:System.Diagnostics.EventLogInstaller> to register a new source for a new or existing event log; do not use <xref:System.Diagnostics.EventLogInstaller> to change an existing source. The <xref:System.Diagnostics.EventLogInstaller> class does not modify the configuration properties of an existing source to match the specified installation properties. The <xref:System.Diagnostics.EventLogInstaller.Install%2A> method throws an exception if the <xref:System.Diagnostics.EventLogInstaller.Source%2A> property matches a source name that is registered for a different event log on the computer. The <xref:System.Diagnostics.EventLogInstaller.Install%2A> method skips registering the source if the <xref:System.Diagnostics.EventLogInstaller.Source%2A> property matches a source name that is already registered for the same event log specified in the <xref:System.Diagnostics.EventLogInstaller.Log%2A> property.","pos":[0,914],"nodes":[{"content":"Use <ph id=\"ph1\">&lt;xref:System.Diagnostics.EventLogInstaller&gt;</ph> to register a new source for a new or existing event log; do not use <ph id=\"ph2\">&lt;xref:System.Diagnostics.EventLogInstaller&gt;</ph> to change an existing source.","pos":[0,190],"source":"Use <xref:System.Diagnostics.EventLogInstaller> to register a new source for a new or existing event log; do not use <xref:System.Diagnostics.EventLogInstaller> to change an existing source."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Diagnostics.EventLogInstaller&gt;</ph> class does not modify the configuration properties of an existing source to match the specified installation properties.","pos":[191,359],"source":" The <xref:System.Diagnostics.EventLogInstaller> class does not modify the configuration properties of an existing source to match the specified installation properties."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Diagnostics.EventLogInstaller.Install%2A&gt;</ph> method throws an exception if the <ph id=\"ph2\">&lt;xref:System.Diagnostics.EventLogInstaller.Source%2A&gt;</ph> property matches a source name that is registered for a different event log on the computer.","pos":[360,599],"source":" The <xref:System.Diagnostics.EventLogInstaller.Install%2A> method throws an exception if the <xref:System.Diagnostics.EventLogInstaller.Source%2A> property matches a source name that is registered for a different event log on the computer."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Diagnostics.EventLogInstaller.Install%2A&gt;</ph> method skips registering the source if the <ph id=\"ph2\">&lt;xref:System.Diagnostics.EventLogInstaller.Source%2A&gt;</ph> property matches a source name that is already registered for the same event log specified in the <ph id=\"ph3\">&lt;xref:System.Diagnostics.EventLogInstaller.Log%2A&gt;</ph> property.","pos":[600,914],"source":" The <xref:System.Diagnostics.EventLogInstaller.Install%2A> method skips registering the source if the <xref:System.Diagnostics.EventLogInstaller.Source%2A> property matches a source name that is already registered for the same event log specified in the <xref:System.Diagnostics.EventLogInstaller.Log%2A> property."}]}]},{"pos":[2121,2678],"content":"An application's install routine uses the project installer's <xref:System.Configuration.Install.Installer.Context%2A?displayProperty=fullName> property to automatically maintain information about the components that have already been installed. This state information, which is passed to <xref:System.Diagnostics.EventLogInstaller.Install%2A> as the `stateSaver` parameter, is continuously updated as the tool installs each <xref:System.Diagnostics.EventLogInstaller>. Usually, it is not necessary for your code to explicitly modify this state information.","nodes":[{"content":"An application's install routine uses the project installer's <ph id=\"ph1\">&lt;xref:System.Configuration.Install.Installer.Context%2A?displayProperty=fullName&gt;</ph> property to automatically maintain information about the components that have already been installed.","pos":[0,245],"source":"An application's install routine uses the project installer's <xref:System.Configuration.Install.Installer.Context%2A?displayProperty=fullName> property to automatically maintain information about the components that have already been installed."},{"content":"This state information, which is passed to <ph id=\"ph1\">&lt;xref:System.Diagnostics.EventLogInstaller.Install%2A&gt;</ph> as the <ph id=\"ph2\">`stateSaver`</ph> parameter, is continuously updated as the tool installs each <ph id=\"ph3\">&lt;xref:System.Diagnostics.EventLogInstaller&gt;</ph>.","pos":[246,469],"source":" This state information, which is passed to <xref:System.Diagnostics.EventLogInstaller.Install%2A> as the `stateSaver` parameter, is continuously updated as the tool installs each <xref:System.Diagnostics.EventLogInstaller>."},{"content":"Usually, it is not necessary for your code to explicitly modify this state information.","pos":[470,557]}]}],"pos":[29821,32508],"yaml":true,"extradata":"MT"},{"content":"An <xref href=\"System.Collections.IDictionary\"></xref> used to save information needed to perform a rollback or uninstall operation.","nodes":[{"pos":[0,132],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Collections.IDictionary\"&gt;&lt;/xref&gt;</ph> used to save information needed to perform a rollback or uninstall operation.","source":"An <xref href=\"System.Collections.IDictionary\"></xref> used to save information needed to perform a rollback or uninstall operation."}],"pos":[32704,32837],"yaml":true},{"content":"The platform the installer is trying to use is not Windows NT 4.0 or later.","nodes":[{"pos":[0,75],"content":"The platform the installer is trying to use is not Windows NT 4.0 or later.","nodes":[{"content":"The platform the installer is trying to use is not Windows NT 4.0 or later.","pos":[0,75]}]}],"pos":[33027,33103],"yaml":true},{"content":"The name specified in the <xref href=\"System.Diagnostics.EventLogInstaller.Source\"></xref> property is already registered for a different event log.","nodes":[{"pos":[0,148],"content":"The name specified in the <ph id=\"ph1\">&lt;xref href=\"System.Diagnostics.EventLogInstaller.Source\"&gt;&lt;/xref&gt;</ph> property is already registered for a different event log.","source":"The name specified in the <xref href=\"System.Diagnostics.EventLogInstaller.Source\"></xref> property is already registered for a different event log."}],"pos":[33197,33346],"yaml":true},{"content":"Determines whether an installer and another specified installer refer to the same source.","nodes":[{"pos":[0,89],"content":"Determines whether an installer and another specified installer refer to the same source.","nodes":[{"content":"Determines whether an installer and another specified installer refer to the same source.","pos":[0,89]}]}],"pos":[34603,34693],"yaml":true},{"content":"Typically, you do not call the methods of the <xref:System.Diagnostics.EventLogInstaller> from within your code; they are generally called only by the Installer tool (Installutil.exe).","nodes":[{"pos":[0,184],"content":"Typically, you do not call the methods of the <xref:System.Diagnostics.EventLogInstaller> from within your code; they are generally called only by the Installer tool (Installutil.exe).","nodes":[{"content":"Typically, you do not call the methods of the <ph id=\"ph1\">&lt;xref:System.Diagnostics.EventLogInstaller&gt;</ph> from within your code; they are generally called only by the Installer tool (Installutil.exe).","pos":[0,184],"source":"Typically, you do not call the methods of the <xref:System.Diagnostics.EventLogInstaller> from within your code; they are generally called only by the Installer tool (Installutil.exe)."}]}],"pos":[34704,34889],"yaml":true,"extradata":"MT"},{"content":"The installer to compare.","nodes":[{"pos":[0,25],"content":"The installer to compare.","nodes":[{"content":"The installer to compare.","pos":[0,25]}]}],"pos":[35141,35167],"yaml":true},{"content":"`true` if this installer and the installer specified by the <code>otherInstaller</code> parameter would install or uninstall the same source; otherwise, `false`.","nodes":[{"pos":[0,161],"content":"<ph id=\"ph1\">`true`</ph> if this installer and the installer specified by the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">otherInstaller</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter would install or uninstall the same source; otherwise, <ph id=\"ph3\">`false`</ph>.","source":"`true` if this installer and the installer specified by the <code>otherInstaller</code> parameter would install or uninstall the same source; otherwise, `false`."}],"pos":[35225,35389],"yaml":true},{"content":"Gets or sets the name of the log to set the source to.","nodes":[{"pos":[0,54],"content":"Gets or sets the name of the log to set the source to.","nodes":[{"content":"Gets or sets the name of the log to set the source to.","pos":[0,54]}]}],"pos":[36422,36477],"yaml":true},{"content":"You can use the <xref:System.Diagnostics.EventLogInstaller.Log%2A> property to associate the source you specify in the <xref:System.Diagnostics.EventLogInstaller.Source%2A> property with either an existing log or a new log on the local computer. The [Installutil.exe (Installer Tool)](~/docs/framework/tools/installutil-exe-installer-tool.md) uses this information to map the source to the log in the computer's registry. Applications and services should write to the Application log or a custom log. Device drivers should write to the System log.  \n  \n To write entries to an event log, you must create a source and register it with an event log. An event source can only write to one log at a time. The installer uses the value of the <xref:System.Diagnostics.EventLogInstaller.Source%2A> property to register your application with the event log as a valid source of entries. If you do not specify a log name before the installer runs, the installer registers your source to the Application log. If you specify a new source and an existing log, the installer creates a new event source and associates it with the log you specify. If you specify both a new source and a new log, the installer associates the new source with the new log in the registry, but the log is not created until the first entry is written to it.  \n  \n The operating system stores event logs as files. When you use <xref:System.Diagnostics.EventLogInstaller> or the <xref:System.Diagnostics.EventLog.CreateEventSource%2A> method to create a new event log, the associated file is stored in the %SystemRoot%\\System32\\Config directory on the specified computer. The file name is set by appending the first 8 characters of the <xref:System.Diagnostics.EventLogInstaller.Log%2A> property with the \".evt\" file name extension.  \n  \n Use <xref:System.Diagnostics.EventLogInstaller> to register a new source for a new or existing event log; do not use <xref:System.Diagnostics.EventLogInstaller> to change an existing source. The <xref:System.Diagnostics.EventLogInstaller> class does not modify the configuration properties of an existing source to match the specified installation properties. The <xref:System.Diagnostics.EventLogInstaller.Install%2A> method throws an exception if the <xref:System.Diagnostics.EventLogInstaller.Source%2A> property matches a source name that is registered for a different event log on the computer. The <xref:System.Diagnostics.EventLogInstaller.Install%2A> method does not register the source if the <xref:System.Diagnostics.EventLogInstaller.Source%2A> property matches a source name that is already registered for the same event log specified in the <xref:System.Diagnostics.EventLogInstaller.Log%2A> property.  \n  \n For more detailed information about the behaviors of event logs and sources, see the <xref:System.Diagnostics.EventLog> class documentation for the <xref:System.Diagnostics.EventLog.Log%2A> and <xref:System.Diagnostics.EventLog.Source%2A> properties.","nodes":[{"pos":[0,547],"content":"You can use the <xref:System.Diagnostics.EventLogInstaller.Log%2A> property to associate the source you specify in the <xref:System.Diagnostics.EventLogInstaller.Source%2A> property with either an existing log or a new log on the local computer. The [Installutil.exe (Installer Tool)](~/docs/framework/tools/installutil-exe-installer-tool.md) uses this information to map the source to the log in the computer's registry. Applications and services should write to the Application log or a custom log. Device drivers should write to the System log.","nodes":[{"content":"You can use the <ph id=\"ph1\">&lt;xref:System.Diagnostics.EventLogInstaller.Log%2A&gt;</ph> property to associate the source you specify in the <ph id=\"ph2\">&lt;xref:System.Diagnostics.EventLogInstaller.Source%2A&gt;</ph> property with either an existing log or a new log on the local computer.","pos":[0,245],"source":"You can use the <xref:System.Diagnostics.EventLogInstaller.Log%2A> property to associate the source you specify in the <xref:System.Diagnostics.EventLogInstaller.Source%2A> property with either an existing log or a new log on the local computer."},{"content":"The <bpt id=\"p1\">[</bpt>Installutil.exe (Installer Tool)<ept id=\"p1\">](~/docs/framework/tools/installutil-exe-installer-tool.md)</ept> uses this information to map the source to the log in the computer's registry.","pos":[246,421],"source":" The [Installutil.exe (Installer Tool)](~/docs/framework/tools/installutil-exe-installer-tool.md) uses this information to map the source to the log in the computer's registry."},{"content":"Applications and services should write to the Application log or a custom log.","pos":[422,500]},{"content":"Device drivers should write to the System log.","pos":[501,547]}]},{"pos":[554,1320],"content":"To write entries to an event log, you must create a source and register it with an event log. An event source can only write to one log at a time. The installer uses the value of the <xref:System.Diagnostics.EventLogInstaller.Source%2A> property to register your application with the event log as a valid source of entries. If you do not specify a log name before the installer runs, the installer registers your source to the Application log. If you specify a new source and an existing log, the installer creates a new event source and associates it with the log you specify. If you specify both a new source and a new log, the installer associates the new source with the new log in the registry, but the log is not created until the first entry is written to it.","nodes":[{"content":"To write entries to an event log, you must create a source and register it with an event log. An event source can only write to one log at a time. The installer uses the value of the <xref:System.Diagnostics.EventLogInstaller.Source%2A> property to register your application with the event log as a valid source of entries. If you do not specify a log name before the installer runs, the installer registers your source to the Application log. If you specify a new source and an existing log, the installer creates a new event source and associates it with the log you specify. If you specify both a new source and a new log, the installer associates the new source with the new log in the registry, but the log is not created until the first entry is written to it.","pos":[0,766],"nodes":[{"content":"To write entries to an event log, you must create a source and register it with an event log.","pos":[0,93]},{"content":"An event source can only write to one log at a time.","pos":[94,146]},{"content":"The installer uses the value of the <ph id=\"ph1\">&lt;xref:System.Diagnostics.EventLogInstaller.Source%2A&gt;</ph> property to register your application with the event log as a valid source of entries.","pos":[147,323],"source":" The installer uses the value of the <xref:System.Diagnostics.EventLogInstaller.Source%2A> property to register your application with the event log as a valid source of entries."},{"content":"If you do not specify a log name before the installer runs, the installer registers your source to the Application log.","pos":[324,443]},{"content":"If you specify a new source and an existing log, the installer creates a new event source and associates it with the log you specify.","pos":[444,577]},{"content":"If you specify both a new source and a new log, the installer associates the new source with the new log in the registry, but the log is not created until the first entry is written to it.","pos":[578,766]}]}]},{"pos":[1327,1793],"content":"The operating system stores event logs as files. When you use <xref:System.Diagnostics.EventLogInstaller> or the <xref:System.Diagnostics.EventLog.CreateEventSource%2A> method to create a new event log, the associated file is stored in the %SystemRoot%\\System32\\Config directory on the specified computer. The file name is set by appending the first 8 characters of the <xref:System.Diagnostics.EventLogInstaller.Log%2A> property with the \".evt\" file name extension.","nodes":[{"content":"The operating system stores event logs as files. When you use <xref:System.Diagnostics.EventLogInstaller> or the <xref:System.Diagnostics.EventLog.CreateEventSource%2A> method to create a new event log, the associated file is stored in the %SystemRoot%\\System32\\Config directory on the specified computer. The file name is set by appending the first 8 characters of the <xref:System.Diagnostics.EventLogInstaller.Log%2A> property with the \".evt\" file name extension.","pos":[0,466],"nodes":[{"content":"The operating system stores event logs as files.","pos":[0,48]},{"content":"When you use <ph id=\"ph1\">&lt;xref:System.Diagnostics.EventLogInstaller&gt;</ph> or the <ph id=\"ph2\">&lt;xref:System.Diagnostics.EventLog.CreateEventSource%2A&gt;</ph> method to create a new event log, the associated file is stored in the %SystemRoot%\\System32\\Config directory on the specified computer.","pos":[49,305],"source":" When you use <xref:System.Diagnostics.EventLogInstaller> or the <xref:System.Diagnostics.EventLog.CreateEventSource%2A> method to create a new event log, the associated file is stored in the %SystemRoot%\\System32\\Config directory on the specified computer."},{"content":"The file name is set by appending the first 8 characters of the <ph id=\"ph1\">&lt;xref:System.Diagnostics.EventLogInstaller.Log%2A&gt;</ph> property with the \".evt\" file name extension.","pos":[306,466],"source":" The file name is set by appending the first 8 characters of the <xref:System.Diagnostics.EventLogInstaller.Log%2A> property with the \".evt\" file name extension."}]}]},{"pos":[1800,2714],"content":"Use <xref:System.Diagnostics.EventLogInstaller> to register a new source for a new or existing event log; do not use <xref:System.Diagnostics.EventLogInstaller> to change an existing source. The <xref:System.Diagnostics.EventLogInstaller> class does not modify the configuration properties of an existing source to match the specified installation properties. The <xref:System.Diagnostics.EventLogInstaller.Install%2A> method throws an exception if the <xref:System.Diagnostics.EventLogInstaller.Source%2A> property matches a source name that is registered for a different event log on the computer. The <xref:System.Diagnostics.EventLogInstaller.Install%2A> method does not register the source if the <xref:System.Diagnostics.EventLogInstaller.Source%2A> property matches a source name that is already registered for the same event log specified in the <xref:System.Diagnostics.EventLogInstaller.Log%2A> property.","nodes":[{"content":"Use <xref:System.Diagnostics.EventLogInstaller> to register a new source for a new or existing event log; do not use <xref:System.Diagnostics.EventLogInstaller> to change an existing source. The <xref:System.Diagnostics.EventLogInstaller> class does not modify the configuration properties of an existing source to match the specified installation properties. The <xref:System.Diagnostics.EventLogInstaller.Install%2A> method throws an exception if the <xref:System.Diagnostics.EventLogInstaller.Source%2A> property matches a source name that is registered for a different event log on the computer. The <xref:System.Diagnostics.EventLogInstaller.Install%2A> method does not register the source if the <xref:System.Diagnostics.EventLogInstaller.Source%2A> property matches a source name that is already registered for the same event log specified in the <xref:System.Diagnostics.EventLogInstaller.Log%2A> property.","pos":[0,914],"nodes":[{"content":"Use <ph id=\"ph1\">&lt;xref:System.Diagnostics.EventLogInstaller&gt;</ph> to register a new source for a new or existing event log; do not use <ph id=\"ph2\">&lt;xref:System.Diagnostics.EventLogInstaller&gt;</ph> to change an existing source.","pos":[0,190],"source":"Use <xref:System.Diagnostics.EventLogInstaller> to register a new source for a new or existing event log; do not use <xref:System.Diagnostics.EventLogInstaller> to change an existing source."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Diagnostics.EventLogInstaller&gt;</ph> class does not modify the configuration properties of an existing source to match the specified installation properties.","pos":[191,359],"source":" The <xref:System.Diagnostics.EventLogInstaller> class does not modify the configuration properties of an existing source to match the specified installation properties."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Diagnostics.EventLogInstaller.Install%2A&gt;</ph> method throws an exception if the <ph id=\"ph2\">&lt;xref:System.Diagnostics.EventLogInstaller.Source%2A&gt;</ph> property matches a source name that is registered for a different event log on the computer.","pos":[360,599],"source":" The <xref:System.Diagnostics.EventLogInstaller.Install%2A> method throws an exception if the <xref:System.Diagnostics.EventLogInstaller.Source%2A> property matches a source name that is registered for a different event log on the computer."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Diagnostics.EventLogInstaller.Install%2A&gt;</ph> method does not register the source if the <ph id=\"ph2\">&lt;xref:System.Diagnostics.EventLogInstaller.Source%2A&gt;</ph> property matches a source name that is already registered for the same event log specified in the <ph id=\"ph3\">&lt;xref:System.Diagnostics.EventLogInstaller.Log%2A&gt;</ph> property.","pos":[600,914],"source":" The <xref:System.Diagnostics.EventLogInstaller.Install%2A> method does not register the source if the <xref:System.Diagnostics.EventLogInstaller.Source%2A> property matches a source name that is already registered for the same event log specified in the <xref:System.Diagnostics.EventLogInstaller.Log%2A> property."}]}]},{"pos":[2721,2971],"content":"For more detailed information about the behaviors of event logs and sources, see the <xref:System.Diagnostics.EventLog> class documentation for the <xref:System.Diagnostics.EventLog.Log%2A> and <xref:System.Diagnostics.EventLog.Source%2A> properties.","nodes":[{"content":"For more detailed information about the behaviors of event logs and sources, see the <ph id=\"ph1\">&lt;xref:System.Diagnostics.EventLog&gt;</ph> class documentation for the <ph id=\"ph2\">&lt;xref:System.Diagnostics.EventLog.Log%2A&gt;</ph> and <ph id=\"ph3\">&lt;xref:System.Diagnostics.EventLog.Source%2A&gt;</ph> properties.","pos":[0,250],"source":"For more detailed information about the behaviors of event logs and sources, see the <xref:System.Diagnostics.EventLog> class documentation for the <xref:System.Diagnostics.EventLog.Log%2A> and <xref:System.Diagnostics.EventLog.Source%2A> properties."}]}],"pos":[36488,39474],"yaml":true,"extradata":"MT"},{"content":"The name of the log. This can be Application, System, or a custom log name. The default is an empty string (\"\").","nodes":[{"pos":[0,112],"content":"The name of the log. This can be Application, System, or a custom log name. The default is an empty string (\"\").","nodes":[{"content":"The name of the log. This can be Application, System, or a custom log name. The default is an empty string (\"\").","pos":[0,112],"nodes":[{"content":"The name of the log.","pos":[0,20]},{"content":"This can be Application, System, or a custom log name.","pos":[21,75]},{"content":"The default is an empty string (\"\").","pos":[76,112]}]}]}],"pos":[39772,39885],"yaml":true},{"content":"Gets or sets the path of the resource file that contains message formatting strings for the source.","nodes":[{"pos":[0,99],"content":"Gets or sets the path of the resource file that contains message formatting strings for the source.","nodes":[{"content":"Gets or sets the path of the resource file that contains message formatting strings for the source.","pos":[0,99]}]}],"pos":[41065,41165],"yaml":true},{"content":"Use the <xref:System.Diagnostics.EventLogInstaller.MessageResourceFile%2A> property to configure an event log source to write localized event messages. Event messages are application-defined strings that describe the event to the user.  \n  \n Your application can write event log entries using resource identifiers. A resource identifier indexes a message located in the <xref:System.Diagnostics.EventLogInstaller.MessageResourceFile%2A>. The Event Viewer uses the resource identifier to find and display the corresponding string from the localized resource file based on current language settings.  \n  \n The event source must be configured either for writing localized entries or for writing direct strings. Use the <xref:System.Diagnostics.EventLog.WriteEvent%2A> method to write localized entries for a source configured with a message resource file.  \n  \n If your application writes event message strings directly, rather than using a resource identifier in a localized resource file, do not set the <xref:System.Diagnostics.EventLogInstaller.MessageResourceFile%2A> property.  \n  \n If the <xref:System.Diagnostics.EventLog.MachineName%2A> property is not the local computer identifier (\".\"), the .NET Framework assumes that the resource file is on a remote computer. If the <xref:System.Diagnostics.EventLogInstaller.MessageResourceFile%2A> property value contains a drive letter, the resource file is assumed to be on the \\\\\\\\<machinename\\>\\\\<drive\\>$ share (for example, \\\\\\server\\c$). If the value contains the string %systemroot%, the resource file is assumed to be on the \\\\\\\\<machinename\\>\\admin$ share (for example, \\\\\\server\\admin$).  \n  \n For details about defining event messages and building event resource files, see the \"Message Compiler\" topic in the Platform SDK documentation at [http://msdn.microsoft.com](http://msdn.microsoft.com/).","nodes":[{"pos":[0,235],"content":"Use the <xref:System.Diagnostics.EventLogInstaller.MessageResourceFile%2A> property to configure an event log source to write localized event messages. Event messages are application-defined strings that describe the event to the user.","nodes":[{"content":"Use the <xref:System.Diagnostics.EventLogInstaller.MessageResourceFile%2A> property to configure an event log source to write localized event messages. Event messages are application-defined strings that describe the event to the user.","pos":[0,235],"nodes":[{"content":"Use the <ph id=\"ph1\">&lt;xref:System.Diagnostics.EventLogInstaller.MessageResourceFile%2A&gt;</ph> property to configure an event log source to write localized event messages.","pos":[0,151],"source":"Use the <xref:System.Diagnostics.EventLogInstaller.MessageResourceFile%2A> property to configure an event log source to write localized event messages."},{"content":"Event messages are application-defined strings that describe the event to the user.","pos":[152,235]}]}]},{"pos":[242,597],"content":"Your application can write event log entries using resource identifiers. A resource identifier indexes a message located in the <xref:System.Diagnostics.EventLogInstaller.MessageResourceFile%2A>. The Event Viewer uses the resource identifier to find and display the corresponding string from the localized resource file based on current language settings.","nodes":[{"content":"Your application can write event log entries using resource identifiers. A resource identifier indexes a message located in the <xref:System.Diagnostics.EventLogInstaller.MessageResourceFile%2A>. The Event Viewer uses the resource identifier to find and display the corresponding string from the localized resource file based on current language settings.","pos":[0,355],"nodes":[{"content":"Your application can write event log entries using resource identifiers.","pos":[0,72]},{"content":"A resource identifier indexes a message located in the <ph id=\"ph1\">&lt;xref:System.Diagnostics.EventLogInstaller.MessageResourceFile%2A&gt;</ph>.","pos":[73,195],"source":" A resource identifier indexes a message located in the <xref:System.Diagnostics.EventLogInstaller.MessageResourceFile%2A>."},{"content":"The Event Viewer uses the resource identifier to find and display the corresponding string from the localized resource file based on current language settings.","pos":[196,355]}]}]},{"pos":[604,852],"content":"The event source must be configured either for writing localized entries or for writing direct strings. Use the <xref:System.Diagnostics.EventLog.WriteEvent%2A> method to write localized entries for a source configured with a message resource file.","nodes":[{"content":"The event source must be configured either for writing localized entries or for writing direct strings. Use the <xref:System.Diagnostics.EventLog.WriteEvent%2A> method to write localized entries for a source configured with a message resource file.","pos":[0,248],"nodes":[{"content":"The event source must be configured either for writing localized entries or for writing direct strings.","pos":[0,103]},{"content":"Use the <ph id=\"ph1\">&lt;xref:System.Diagnostics.EventLog.WriteEvent%2A&gt;</ph> method to write localized entries for a source configured with a message resource file.","pos":[104,248],"source":" Use the <xref:System.Diagnostics.EventLog.WriteEvent%2A> method to write localized entries for a source configured with a message resource file."}]}]},{"pos":[859,1079],"content":"If your application writes event message strings directly, rather than using a resource identifier in a localized resource file, do not set the <xref:System.Diagnostics.EventLogInstaller.MessageResourceFile%2A> property.","nodes":[{"content":"If your application writes event message strings directly, rather than using a resource identifier in a localized resource file, do not set the <ph id=\"ph1\">&lt;xref:System.Diagnostics.EventLogInstaller.MessageResourceFile%2A&gt;</ph> property.","pos":[0,220],"source":"If your application writes event message strings directly, rather than using a resource identifier in a localized resource file, do not set the <xref:System.Diagnostics.EventLogInstaller.MessageResourceFile%2A> property."}]},{"pos":[1086,1645],"content":"If the <xref:System.Diagnostics.EventLog.MachineName%2A> property is not the local computer identifier (\".\"), the .NET Framework assumes that the resource file is on a remote computer. If the <xref:System.Diagnostics.EventLogInstaller.MessageResourceFile%2A> property value contains a drive letter, the resource file is assumed to be on the \\\\\\\\<machinename\\>\\\\<drive\\>$ share (for example, \\\\\\server\\c$). If the value contains the string %systemroot%, the resource file is assumed to be on the \\\\\\\\<machinename\\>\\admin$ share (for example, \\\\\\server\\admin$).","nodes":[{"content":"If the <xref:System.Diagnostics.EventLog.MachineName%2A> property is not the local computer identifier (\".\"), the .NET Framework assumes that the resource file is on a remote computer. If the <xref:System.Diagnostics.EventLogInstaller.MessageResourceFile%2A> property value contains a drive letter, the resource file is assumed to be on the \\\\\\\\<machinename\\>\\\\<drive\\>$ share (for example, \\\\\\server\\c$). If the value contains the string %systemroot%, the resource file is assumed to be on the \\\\\\\\<machinename\\>\\admin$ share (for example, \\\\\\server\\admin$).","pos":[0,559],"nodes":[{"content":"If the <ph id=\"ph1\">&lt;xref:System.Diagnostics.EventLog.MachineName%2A&gt;</ph> property is not the local computer identifier (\".\"), the .NET Framework assumes that the resource file is on a remote computer.","pos":[0,184],"source":"If the <xref:System.Diagnostics.EventLog.MachineName%2A> property is not the local computer identifier (\".\"), the .NET Framework assumes that the resource file is on a remote computer."},{"content":"If the <ph id=\"ph1\">&lt;xref:System.Diagnostics.EventLogInstaller.MessageResourceFile%2A&gt;</ph> property value contains a drive letter, the resource file is assumed to be on the <ph id=\"ph2\">\\\\</ph><ph id=\"ph3\">\\\\</ph>&lt;machinename<ph id=\"ph4\">\\&gt;</ph><ph id=\"ph5\">\\\\</ph>&lt;drive<ph id=\"ph6\">\\&gt;</ph>$ share (for example, <ph id=\"ph7\">\\\\</ph>\\server\\c$).","pos":[185,405],"source":" If the <xref:System.Diagnostics.EventLogInstaller.MessageResourceFile%2A> property value contains a drive letter, the resource file is assumed to be on the \\\\\\\\<machinename\\>\\\\<drive\\>$ share (for example, \\\\\\server\\c$)."},{"content":"If the value contains the string %systemroot%, the resource file is assumed to be on the <ph id=\"ph1\">\\\\</ph><ph id=\"ph2\">\\\\</ph>&lt;machinename<ph id=\"ph3\">\\&gt;</ph>\\admin$ share (for example, <ph id=\"ph4\">\\\\</ph>\\server\\admin$).","pos":[406,559],"source":" If the value contains the string %systemroot%, the resource file is assumed to be on the \\\\\\\\<machinename\\>\\admin$ share (for example, \\\\\\server\\admin$)."}]}]},{"pos":[1652,1855],"content":"For details about defining event messages and building event resource files, see the \"Message Compiler\" topic in the Platform SDK documentation at <bpt id=\"p1\">[</bpt>http://msdn.microsoft.com<ept id=\"p1\">](http://msdn.microsoft.com/)</ept>.","source":"For details about defining event messages and building event resource files, see the \"Message Compiler\" topic in the Platform SDK documentation at [http://msdn.microsoft.com](http://msdn.microsoft.com/)."}],"pos":[41176,43070],"yaml":true,"extradata":"MT"},{"content":"The path of the message resource file. The default is an empty string (\"\").","nodes":[{"pos":[0,75],"content":"The path of the message resource file. The default is an empty string (\"\").","nodes":[{"content":"The path of the message resource file. The default is an empty string (\"\").","pos":[0,75],"nodes":[{"content":"The path of the message resource file.","pos":[0,38]},{"content":"The default is an empty string (\"\").","pos":[39,75]}]}]}],"pos":[47263,47339],"yaml":true},{"content":"Gets or sets the path of the resource file that contains message parameter strings for the source.","nodes":[{"pos":[0,98],"content":"Gets or sets the path of the resource file that contains message parameter strings for the source.","nodes":[{"content":"Gets or sets the path of the resource file that contains message parameter strings for the source.","pos":[0,98]}]}],"pos":[48608,48707],"yaml":true},{"content":"Use the <xref:System.Diagnostics.EventLogInstaller.ParameterResourceFile%2A> property to configure an event log source to write localized event messages with inserted parameter strings. Each localized event message specified in the <xref:System.Diagnostics.EventLogInstaller.MessageResourceFile%2A> property can contain placeholders for insertion strings. These placeholders are used to specify the position and resource identifier for a language-independent string within the event message. The Event Viewer replaces the placeholders with the corresponding strings from the <xref:System.Diagnostics.EventLogInstaller.ParameterResourceFile%2A> and formats the event log message for the localized event entry.  \n  \n For example, the following section of a message text file defines a string with a parameter placeholder:  \n  \n```  \n  \nMessageId = 1501  \nSeverity = Success  \nFacility = Application  \nSymbolicName = COMPONENT_STARTING  \nLanguage=English  \nComponent %%6050 is starting.  \n.  \n```  \n  \n Within the parameter resource file, the insertion string must be defined with the resource identifier that corresponds to the placeholder, as shown below:  \n  \n```  \nMessageId = 6050  \nSeverity = Success  \nFacility = Application  \nSymbolicName = COMPONENT_NAME_MSGID  \nLanguage=English  \nTRIGGER.EXE  \n.  \n```  \n  \n The event source must be configured either for writing localized entries or for writing direct strings. Use the <xref:System.Diagnostics.EventLog.WriteEvent%2A> method to write localized entries for a source configured with a message resource file.  \n  \n If your application writes event message strings directly to the event log, or if your <xref:System.Diagnostics.EventLogInstaller.MessageResourceFile%2A> does not contain messages with parameter insertion placeholders, do not set the <xref:System.Diagnostics.EventLogInstaller.ParameterResourceFile%2A> property.  \n  \n For details about defining event messages and building event resource files, see the \"Message Compiler\" topic in the Platform SDK documentation at [http://msdn.microsoft.com](http://msdn.microsoft.com/).","nodes":[{"pos":[0,708],"content":"Use the <xref:System.Diagnostics.EventLogInstaller.ParameterResourceFile%2A> property to configure an event log source to write localized event messages with inserted parameter strings. Each localized event message specified in the <xref:System.Diagnostics.EventLogInstaller.MessageResourceFile%2A> property can contain placeholders for insertion strings. These placeholders are used to specify the position and resource identifier for a language-independent string within the event message. The Event Viewer replaces the placeholders with the corresponding strings from the <xref:System.Diagnostics.EventLogInstaller.ParameterResourceFile%2A> and formats the event log message for the localized event entry.","nodes":[{"content":"Use the <xref:System.Diagnostics.EventLogInstaller.ParameterResourceFile%2A> property to configure an event log source to write localized event messages with inserted parameter strings. Each localized event message specified in the <xref:System.Diagnostics.EventLogInstaller.MessageResourceFile%2A> property can contain placeholders for insertion strings. These placeholders are used to specify the position and resource identifier for a language-independent string within the event message. The Event Viewer replaces the placeholders with the corresponding strings from the <xref:System.Diagnostics.EventLogInstaller.ParameterResourceFile%2A> and formats the event log message for the localized event entry.","pos":[0,708],"nodes":[{"content":"Use the <ph id=\"ph1\">&lt;xref:System.Diagnostics.EventLogInstaller.ParameterResourceFile%2A&gt;</ph> property to configure an event log source to write localized event messages with inserted parameter strings.","pos":[0,185],"source":"Use the <xref:System.Diagnostics.EventLogInstaller.ParameterResourceFile%2A> property to configure an event log source to write localized event messages with inserted parameter strings."},{"content":"Each localized event message specified in the <ph id=\"ph1\">&lt;xref:System.Diagnostics.EventLogInstaller.MessageResourceFile%2A&gt;</ph> property can contain placeholders for insertion strings.","pos":[186,355],"source":" Each localized event message specified in the <xref:System.Diagnostics.EventLogInstaller.MessageResourceFile%2A> property can contain placeholders for insertion strings."},{"content":"These placeholders are used to specify the position and resource identifier for a language-independent string within the event message.","pos":[356,491]},{"content":"The Event Viewer replaces the placeholders with the corresponding strings from the <ph id=\"ph1\">&lt;xref:System.Diagnostics.EventLogInstaller.ParameterResourceFile%2A&gt;</ph> and formats the event log message for the localized event entry.","pos":[492,708],"source":" The Event Viewer replaces the placeholders with the corresponding strings from the <xref:System.Diagnostics.EventLogInstaller.ParameterResourceFile%2A> and formats the event log message for the localized event entry."}]}]},{"pos":[715,819],"content":"For example, the following section of a message text file defines a string with a parameter placeholder:","nodes":[{"content":"For example, the following section of a message text file defines a string with a parameter placeholder:","pos":[0,104]}]},{"pos":[1000,1154],"content":"Within the parameter resource file, the insertion string must be defined with the resource identifier that corresponds to the placeholder, as shown below:","nodes":[{"content":"Within the parameter resource file, the insertion string must be defined with the resource identifier that corresponds to the placeholder, as shown below:","pos":[0,154]}]},{"pos":[1316,1564],"content":"The event source must be configured either for writing localized entries or for writing direct strings. Use the <xref:System.Diagnostics.EventLog.WriteEvent%2A> method to write localized entries for a source configured with a message resource file.","nodes":[{"content":"The event source must be configured either for writing localized entries or for writing direct strings. Use the <xref:System.Diagnostics.EventLog.WriteEvent%2A> method to write localized entries for a source configured with a message resource file.","pos":[0,248],"nodes":[{"content":"The event source must be configured either for writing localized entries or for writing direct strings.","pos":[0,103]},{"content":"Use the <ph id=\"ph1\">&lt;xref:System.Diagnostics.EventLog.WriteEvent%2A&gt;</ph> method to write localized entries for a source configured with a message resource file.","pos":[104,248],"source":" Use the <xref:System.Diagnostics.EventLog.WriteEvent%2A> method to write localized entries for a source configured with a message resource file."}]}]},{"pos":[1571,1883],"content":"If your application writes event message strings directly to the event log, or if your <xref:System.Diagnostics.EventLogInstaller.MessageResourceFile%2A> does not contain messages with parameter insertion placeholders, do not set the <xref:System.Diagnostics.EventLogInstaller.ParameterResourceFile%2A> property.","nodes":[{"content":"If your application writes event message strings directly to the event log, or if your <ph id=\"ph1\">&lt;xref:System.Diagnostics.EventLogInstaller.MessageResourceFile%2A&gt;</ph> does not contain messages with parameter insertion placeholders, do not set the <ph id=\"ph2\">&lt;xref:System.Diagnostics.EventLogInstaller.ParameterResourceFile%2A&gt;</ph> property.","pos":[0,312],"source":"If your application writes event message strings directly to the event log, or if your <xref:System.Diagnostics.EventLogInstaller.MessageResourceFile%2A> does not contain messages with parameter insertion placeholders, do not set the <xref:System.Diagnostics.EventLogInstaller.ParameterResourceFile%2A> property."}]},{"pos":[1890,2093],"content":"For details about defining event messages and building event resource files, see the \"Message Compiler\" topic in the Platform SDK documentation at <bpt id=\"p1\">[</bpt>http://msdn.microsoft.com<ept id=\"p1\">](http://msdn.microsoft.com/)</ept>.","source":"For details about defining event messages and building event resource files, see the \"Message Compiler\" topic in the Platform SDK documentation at [http://msdn.microsoft.com](http://msdn.microsoft.com/)."}],"pos":[48718,50847],"yaml":true,"extradata":"MT"},{"content":"The path of the message parameter resource file. The default is an empty string (\"\").","nodes":[{"pos":[0,85],"content":"The path of the message parameter resource file. The default is an empty string (\"\").","nodes":[{"content":"The path of the message parameter resource file. The default is an empty string (\"\").","pos":[0,85],"nodes":[{"content":"The path of the message parameter resource file.","pos":[0,48]},{"content":"The default is an empty string (\"\").","pos":[49,85]}]}]}],"pos":[55185,55271],"yaml":true},{"content":"Restores the computer to the state it was in before the installation by rolling back the event log information that the installation procedure wrote to the registry.","nodes":[{"pos":[0,165],"content":"Restores the computer to the state it was in before the installation by rolling back the event log information that the installation procedure wrote to the registry.","nodes":[{"content":"Restores the computer to the state it was in before the installation by rolling back the event log information that the installation procedure wrote to the registry.","pos":[0,165]}]}],"pos":[56597,56763],"yaml":true},{"content":"The <xref:System.Diagnostics.EventLogInstaller.Rollback%2A> method undoes the effects of the <xref:System.Diagnostics.EventLogInstaller.Install%2A> method. <xref:System.Diagnostics.EventLogInstaller.Rollback%2A> is called if the installation of any component in the installation project fails. The <xref:System.Diagnostics.EventLogInstaller.Install%2A> method creates or sets the properties for an event log and event source. <xref:System.Diagnostics.EventLogInstaller.Rollback%2A> either deletes the event log and source or resets the properties of a pre-existing source to its pre-installation values.  \n  \n Typically, you do not call the methods of the <xref:System.Diagnostics.EventLogInstaller> from within your code; they are generally called only by the [Installutil.exe (Installer Tool)](~/docs/framework/tools/installutil-exe-installer-tool.md). The tool calls the <xref:System.Diagnostics.EventLogInstaller.Rollback%2A> method, when this or another component has failed to install, to undo any changes that the installation process has already made.  \n  \n An application's install routine uses the project installer's <xref:System.Configuration.Install.Installer.Context%2A?displayProperty=fullName> property to automatically maintain information about the components that have already been installed. This state information, which is passed to <xref:System.Diagnostics.EventLogInstaller.Rollback%2A> as the `savedState` parameter, is continuously updated as the tool rolls back each <xref:System.Diagnostics.EventLogInstaller>. Usually, it is not necessary for your code to explicitly modify this state information.","nodes":[{"pos":[0,603],"content":"The <xref:System.Diagnostics.EventLogInstaller.Rollback%2A> method undoes the effects of the <xref:System.Diagnostics.EventLogInstaller.Install%2A> method. <xref:System.Diagnostics.EventLogInstaller.Rollback%2A> is called if the installation of any component in the installation project fails. The <xref:System.Diagnostics.EventLogInstaller.Install%2A> method creates or sets the properties for an event log and event source. <xref:System.Diagnostics.EventLogInstaller.Rollback%2A> either deletes the event log and source or resets the properties of a pre-existing source to its pre-installation values.","nodes":[{"content":"The <xref:System.Diagnostics.EventLogInstaller.Rollback%2A> method undoes the effects of the <xref:System.Diagnostics.EventLogInstaller.Install%2A> method. <xref:System.Diagnostics.EventLogInstaller.Rollback%2A> is called if the installation of any component in the installation project fails. The <xref:System.Diagnostics.EventLogInstaller.Install%2A> method creates or sets the properties for an event log and event source. <xref:System.Diagnostics.EventLogInstaller.Rollback%2A> either deletes the event log and source or resets the properties of a pre-existing source to its pre-installation values.","pos":[0,603],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Diagnostics.EventLogInstaller.Rollback%2A&gt;</ph> method undoes the effects of the <ph id=\"ph2\">&lt;xref:System.Diagnostics.EventLogInstaller.Install%2A&gt;</ph> method.","pos":[0,155],"source":"The <xref:System.Diagnostics.EventLogInstaller.Rollback%2A> method undoes the effects of the <xref:System.Diagnostics.EventLogInstaller.Install%2A> method."},{"content":"<ph id=\"ph1\">&lt;xref:System.Diagnostics.EventLogInstaller.Rollback%2A&gt;</ph> is called if the installation of any component in the installation project fails.","pos":[156,293],"source":" <xref:System.Diagnostics.EventLogInstaller.Rollback%2A> is called if the installation of any component in the installation project fails."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Diagnostics.EventLogInstaller.Install%2A&gt;</ph> method creates or sets the properties for an event log and event source.","pos":[294,425],"source":" The <xref:System.Diagnostics.EventLogInstaller.Install%2A> method creates or sets the properties for an event log and event source."},{"content":"<ph id=\"ph1\">&lt;xref:System.Diagnostics.EventLogInstaller.Rollback%2A&gt;</ph> either deletes the event log and source or resets the properties of a pre-existing source to its pre-installation values.","pos":[426,603],"source":" <xref:System.Diagnostics.EventLogInstaller.Rollback%2A> either deletes the event log and source or resets the properties of a pre-existing source to its pre-installation values."}]}]},{"pos":[610,1059],"content":"Typically, you do not call the methods of the <xref:System.Diagnostics.EventLogInstaller> from within your code; they are generally called only by the [Installutil.exe (Installer Tool)](~/docs/framework/tools/installutil-exe-installer-tool.md). The tool calls the <xref:System.Diagnostics.EventLogInstaller.Rollback%2A> method, when this or another component has failed to install, to undo any changes that the installation process has already made.","nodes":[{"content":"Typically, you do not call the methods of the <ph id=\"ph1\">&lt;xref:System.Diagnostics.EventLogInstaller&gt;</ph> from within your code; they are generally called only by the <bpt id=\"p1\">[</bpt>Installutil.exe (Installer Tool)<ept id=\"p1\">](~/docs/framework/tools/installutil-exe-installer-tool.md)</ept>.","pos":[0,244],"source":"Typically, you do not call the methods of the <xref:System.Diagnostics.EventLogInstaller> from within your code; they are generally called only by the [Installutil.exe (Installer Tool)](~/docs/framework/tools/installutil-exe-installer-tool.md)."},{"content":"The tool calls the <ph id=\"ph1\">&lt;xref:System.Diagnostics.EventLogInstaller.Rollback%2A&gt;</ph> method, when this or another component has failed to install, to undo any changes that the installation process has already made.","pos":[245,449],"source":" The tool calls the <xref:System.Diagnostics.EventLogInstaller.Rollback%2A> method, when this or another component has failed to install, to undo any changes that the installation process has already made."}]},{"pos":[1066,1626],"content":"An application's install routine uses the project installer's <xref:System.Configuration.Install.Installer.Context%2A?displayProperty=fullName> property to automatically maintain information about the components that have already been installed. This state information, which is passed to <xref:System.Diagnostics.EventLogInstaller.Rollback%2A> as the `savedState` parameter, is continuously updated as the tool rolls back each <xref:System.Diagnostics.EventLogInstaller>. Usually, it is not necessary for your code to explicitly modify this state information.","nodes":[{"content":"An application's install routine uses the project installer's <ph id=\"ph1\">&lt;xref:System.Configuration.Install.Installer.Context%2A?displayProperty=fullName&gt;</ph> property to automatically maintain information about the components that have already been installed.","pos":[0,245],"source":"An application's install routine uses the project installer's <xref:System.Configuration.Install.Installer.Context%2A?displayProperty=fullName> property to automatically maintain information about the components that have already been installed."},{"content":"This state information, which is passed to <ph id=\"ph1\">&lt;xref:System.Diagnostics.EventLogInstaller.Rollback%2A&gt;</ph> as the <ph id=\"ph2\">`savedState`</ph> parameter, is continuously updated as the tool rolls back each <ph id=\"ph3\">&lt;xref:System.Diagnostics.EventLogInstaller&gt;</ph>.","pos":[246,472],"source":" This state information, which is passed to <xref:System.Diagnostics.EventLogInstaller.Rollback%2A> as the `savedState` parameter, is continuously updated as the tool rolls back each <xref:System.Diagnostics.EventLogInstaller>."},{"content":"Usually, it is not necessary for your code to explicitly modify this state information.","pos":[473,560]}]}],"pos":[56774,58407],"yaml":true,"extradata":"MT"},{"content":"An <xref href=\"System.Collections.IDictionary\"></xref> that contains the pre-installation state of the computer.","nodes":[{"pos":[0,112],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Collections.IDictionary\"&gt;&lt;/xref&gt;</ph> that contains the pre-installation state of the computer.","source":"An <xref href=\"System.Collections.IDictionary\"></xref> that contains the pre-installation state of the computer."}],"pos":[58604,58717],"yaml":true},{"content":"Gets or sets the source name to register with the log.","nodes":[{"pos":[0,54],"content":"Gets or sets the source name to register with the log.","nodes":[{"content":"Gets or sets the source name to register with the log.","pos":[0,54]}]}],"pos":[59755,59810],"yaml":true},{"content":"The event source indicates what logs the event. It is often the name of the application, or the name of a component within a large application.  \n  \n The installer uses the value of the <xref:System.Diagnostics.EventLogInstaller.Source%2A> property to register your application with the event log as a valid source of entries. A new source name cannot match an existing source name or an existing event log name. Each source can only write to one event log at a time; however, your application can use multiple sources to write to multiple event logs. For example, your application might require multiple sources configured for different event logs or different resource files.  \n  \n Applications and services should write to the Application log or a custom log. Device drivers should write to the System log. If you do not specify a log name before the installer runs, the installer registers your source to the Application log. If you specify the name of a log that does not exist, the system registers the <xref:System.Diagnostics.EventLogInstaller.Source%2A> to that log, but the log is not created until the first entry is written to it.  \n  \n Use <xref:System.Diagnostics.EventLogInstaller> to register a new source for a new or existing event log; do not use <xref:System.Diagnostics.EventLogInstaller> to change an existing source. The <xref:System.Diagnostics.EventLogInstaller> class does not modify the configuration properties of an existing source to match the specified installation properties. The <xref:System.Diagnostics.EventLogInstaller.Install%2A> method throws an exception if the <xref:System.Diagnostics.EventLogInstaller.Source%2A> property matches a source name that is registered for a different event log on the computer. The <xref:System.Diagnostics.EventLogInstaller.Install%2A> method does not register the source if the <xref:System.Diagnostics.EventLogInstaller.Source%2A> property matches a source name that is already registered for the same event log specified in the <xref:System.Diagnostics.EventLogInstaller.Log%2A> property.  \n  \n For more detailed information about the behaviors of event logs and sources, see the <xref:System.Diagnostics.EventLog> class documentation for the <xref:System.Diagnostics.EventLog.Log%2A> and <xref:System.Diagnostics.EventLog.Source%2A> properties.","nodes":[{"pos":[0,143],"content":"The event source indicates what logs the event. It is often the name of the application, or the name of a component within a large application.","nodes":[{"content":"The event source indicates what logs the event. It is often the name of the application, or the name of a component within a large application.","pos":[0,143],"nodes":[{"content":"The event source indicates what logs the event.","pos":[0,47]},{"content":"It is often the name of the application, or the name of a component within a large application.","pos":[48,143]}]}]},{"pos":[150,677],"content":"The installer uses the value of the <xref:System.Diagnostics.EventLogInstaller.Source%2A> property to register your application with the event log as a valid source of entries. A new source name cannot match an existing source name or an existing event log name. Each source can only write to one event log at a time; however, your application can use multiple sources to write to multiple event logs. For example, your application might require multiple sources configured for different event logs or different resource files.","nodes":[{"content":"The installer uses the value of the <xref:System.Diagnostics.EventLogInstaller.Source%2A> property to register your application with the event log as a valid source of entries. A new source name cannot match an existing source name or an existing event log name. Each source can only write to one event log at a time; however, your application can use multiple sources to write to multiple event logs. For example, your application might require multiple sources configured for different event logs or different resource files.","pos":[0,527],"nodes":[{"content":"The installer uses the value of the <ph id=\"ph1\">&lt;xref:System.Diagnostics.EventLogInstaller.Source%2A&gt;</ph> property to register your application with the event log as a valid source of entries.","pos":[0,176],"source":"The installer uses the value of the <xref:System.Diagnostics.EventLogInstaller.Source%2A> property to register your application with the event log as a valid source of entries."},{"content":"A new source name cannot match an existing source name or an existing event log name.","pos":[177,262]},{"content":"Each source can only write to one event log at a time; however, your application can use multiple sources to write to multiple event logs.","pos":[263,401]},{"content":"For example, your application might require multiple sources configured for different event logs or different resource files.","pos":[402,527]}]}]},{"pos":[684,1142],"content":"Applications and services should write to the Application log or a custom log. Device drivers should write to the System log. If you do not specify a log name before the installer runs, the installer registers your source to the Application log. If you specify the name of a log that does not exist, the system registers the <xref:System.Diagnostics.EventLogInstaller.Source%2A> to that log, but the log is not created until the first entry is written to it.","nodes":[{"content":"Applications and services should write to the Application log or a custom log. Device drivers should write to the System log. If you do not specify a log name before the installer runs, the installer registers your source to the Application log. If you specify the name of a log that does not exist, the system registers the <xref:System.Diagnostics.EventLogInstaller.Source%2A> to that log, but the log is not created until the first entry is written to it.","pos":[0,458],"nodes":[{"content":"Applications and services should write to the Application log or a custom log.","pos":[0,78]},{"content":"Device drivers should write to the System log.","pos":[79,125]},{"content":"If you do not specify a log name before the installer runs, the installer registers your source to the Application log.","pos":[126,245]},{"content":"If you specify the name of a log that does not exist, the system registers the <ph id=\"ph1\">&lt;xref:System.Diagnostics.EventLogInstaller.Source%2A&gt;</ph> to that log, but the log is not created until the first entry is written to it.","pos":[246,458],"source":" If you specify the name of a log that does not exist, the system registers the <xref:System.Diagnostics.EventLogInstaller.Source%2A> to that log, but the log is not created until the first entry is written to it."}]}]},{"pos":[1149,2063],"content":"Use <xref:System.Diagnostics.EventLogInstaller> to register a new source for a new or existing event log; do not use <xref:System.Diagnostics.EventLogInstaller> to change an existing source. The <xref:System.Diagnostics.EventLogInstaller> class does not modify the configuration properties of an existing source to match the specified installation properties. The <xref:System.Diagnostics.EventLogInstaller.Install%2A> method throws an exception if the <xref:System.Diagnostics.EventLogInstaller.Source%2A> property matches a source name that is registered for a different event log on the computer. The <xref:System.Diagnostics.EventLogInstaller.Install%2A> method does not register the source if the <xref:System.Diagnostics.EventLogInstaller.Source%2A> property matches a source name that is already registered for the same event log specified in the <xref:System.Diagnostics.EventLogInstaller.Log%2A> property.","nodes":[{"content":"Use <xref:System.Diagnostics.EventLogInstaller> to register a new source for a new or existing event log; do not use <xref:System.Diagnostics.EventLogInstaller> to change an existing source. The <xref:System.Diagnostics.EventLogInstaller> class does not modify the configuration properties of an existing source to match the specified installation properties. The <xref:System.Diagnostics.EventLogInstaller.Install%2A> method throws an exception if the <xref:System.Diagnostics.EventLogInstaller.Source%2A> property matches a source name that is registered for a different event log on the computer. The <xref:System.Diagnostics.EventLogInstaller.Install%2A> method does not register the source if the <xref:System.Diagnostics.EventLogInstaller.Source%2A> property matches a source name that is already registered for the same event log specified in the <xref:System.Diagnostics.EventLogInstaller.Log%2A> property.","pos":[0,914],"nodes":[{"content":"Use <ph id=\"ph1\">&lt;xref:System.Diagnostics.EventLogInstaller&gt;</ph> to register a new source for a new or existing event log; do not use <ph id=\"ph2\">&lt;xref:System.Diagnostics.EventLogInstaller&gt;</ph> to change an existing source.","pos":[0,190],"source":"Use <xref:System.Diagnostics.EventLogInstaller> to register a new source for a new or existing event log; do not use <xref:System.Diagnostics.EventLogInstaller> to change an existing source."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Diagnostics.EventLogInstaller&gt;</ph> class does not modify the configuration properties of an existing source to match the specified installation properties.","pos":[191,359],"source":" The <xref:System.Diagnostics.EventLogInstaller> class does not modify the configuration properties of an existing source to match the specified installation properties."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Diagnostics.EventLogInstaller.Install%2A&gt;</ph> method throws an exception if the <ph id=\"ph2\">&lt;xref:System.Diagnostics.EventLogInstaller.Source%2A&gt;</ph> property matches a source name that is registered for a different event log on the computer.","pos":[360,599],"source":" The <xref:System.Diagnostics.EventLogInstaller.Install%2A> method throws an exception if the <xref:System.Diagnostics.EventLogInstaller.Source%2A> property matches a source name that is registered for a different event log on the computer."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Diagnostics.EventLogInstaller.Install%2A&gt;</ph> method does not register the source if the <ph id=\"ph2\">&lt;xref:System.Diagnostics.EventLogInstaller.Source%2A&gt;</ph> property matches a source name that is already registered for the same event log specified in the <ph id=\"ph3\">&lt;xref:System.Diagnostics.EventLogInstaller.Log%2A&gt;</ph> property.","pos":[600,914],"source":" The <xref:System.Diagnostics.EventLogInstaller.Install%2A> method does not register the source if the <xref:System.Diagnostics.EventLogInstaller.Source%2A> property matches a source name that is already registered for the same event log specified in the <xref:System.Diagnostics.EventLogInstaller.Log%2A> property."}]}]},{"pos":[2070,2320],"content":"For more detailed information about the behaviors of event logs and sources, see the <xref:System.Diagnostics.EventLog> class documentation for the <xref:System.Diagnostics.EventLog.Log%2A> and <xref:System.Diagnostics.EventLog.Source%2A> properties.","nodes":[{"content":"For more detailed information about the behaviors of event logs and sources, see the <ph id=\"ph1\">&lt;xref:System.Diagnostics.EventLog&gt;</ph> class documentation for the <ph id=\"ph2\">&lt;xref:System.Diagnostics.EventLog.Log%2A&gt;</ph> and <ph id=\"ph3\">&lt;xref:System.Diagnostics.EventLog.Source%2A&gt;</ph> properties.","pos":[0,250],"source":"For more detailed information about the behaviors of event logs and sources, see the <xref:System.Diagnostics.EventLog> class documentation for the <xref:System.Diagnostics.EventLog.Log%2A> and <xref:System.Diagnostics.EventLog.Source%2A> properties."}]}],"pos":[59821,62152],"yaml":true,"extradata":"MT"},{"content":"The name to register with the event log as a source of entries. The default is an empty string (\"\").","nodes":[{"pos":[0,100],"content":"The name to register with the event log as a source of entries. The default is an empty string (\"\").","nodes":[{"content":"The name to register with the event log as a source of entries. The default is an empty string (\"\").","pos":[0,100],"nodes":[{"content":"The name to register with the event log as a source of entries.","pos":[0,63]},{"content":"The default is an empty string (\"\").","pos":[64,100]}]}]}],"pos":[62453,62554],"yaml":true},{"content":"Removes an installation by removing event log information from the registry.","nodes":[{"pos":[0,76],"content":"Removes an installation by removing event log information from the registry.","nodes":[{"content":"Removes an installation by removing event log information from the registry.","pos":[0,76]}]}],"pos":[63810,63887],"yaml":true},{"content":"If the <xref:System.Diagnostics.EventLogInstaller.UninstallAction%2A> property value is `Remove`, the <xref:System.Diagnostics.EventLogInstaller.Uninstall%2A> method deletes the source and the associated log that the installer created if the <xref:System.Diagnostics.EventLogInstaller.Log%2A> and <xref:System.Diagnostics.EventLogInstaller.Source%2A> properties specified the creation of a new event log and source.  \n  \n Typically, you do not call the methods of the <xref:System.Diagnostics.EventLogInstaller> from within your code; they are generally called only by the [Installutil.exe (Installer Tool)](~/docs/framework/tools/installutil-exe-installer-tool.md) in uninstall mode. The tool automatically calls the <xref:System.Diagnostics.EventLogInstaller.Uninstall%2A> method to restore the parts of the system that were affected by the installation to their pre-installation states. This includes deleting registry information that is associated with the event log being uninstalled.  \n  \n An application's uninstall routine uses the project installer's <xref:System.Configuration.Install.Installer.Context%2A?displayProperty=fullName> property to automatically maintain information about the components that have already been uninstalled. This state information, which is passed to <xref:System.Diagnostics.EventLogInstaller.Uninstall%2A> as the `savedState` parameter, is continuously updated as the tool uninstalls each <xref:System.Diagnostics.EventLogInstaller>. Usually, it is not necessary for your code to explicitly modify this state information.","nodes":[{"pos":[0,415],"content":"If the <ph id=\"ph1\">&lt;xref:System.Diagnostics.EventLogInstaller.UninstallAction%2A&gt;</ph> property value is <ph id=\"ph2\">`Remove`</ph>, the <ph id=\"ph3\">&lt;xref:System.Diagnostics.EventLogInstaller.Uninstall%2A&gt;</ph> method deletes the source and the associated log that the installer created if the <ph id=\"ph4\">&lt;xref:System.Diagnostics.EventLogInstaller.Log%2A&gt;</ph> and <ph id=\"ph5\">&lt;xref:System.Diagnostics.EventLogInstaller.Source%2A&gt;</ph> properties specified the creation of a new event log and source.","source":"If the <xref:System.Diagnostics.EventLogInstaller.UninstallAction%2A> property value is `Remove`, the <xref:System.Diagnostics.EventLogInstaller.Uninstall%2A> method deletes the source and the associated log that the installer created if the <xref:System.Diagnostics.EventLogInstaller.Log%2A> and <xref:System.Diagnostics.EventLogInstaller.Source%2A> properties specified the creation of a new event log and source."},{"pos":[422,990],"content":"Typically, you do not call the methods of the <xref:System.Diagnostics.EventLogInstaller> from within your code; they are generally called only by the [Installutil.exe (Installer Tool)](~/docs/framework/tools/installutil-exe-installer-tool.md) in uninstall mode. The tool automatically calls the <xref:System.Diagnostics.EventLogInstaller.Uninstall%2A> method to restore the parts of the system that were affected by the installation to their pre-installation states. This includes deleting registry information that is associated with the event log being uninstalled.","nodes":[{"content":"Typically, you do not call the methods of the <ph id=\"ph1\">&lt;xref:System.Diagnostics.EventLogInstaller&gt;</ph> from within your code; they are generally called only by the <bpt id=\"p1\">[</bpt>Installutil.exe (Installer Tool)<ept id=\"p1\">](~/docs/framework/tools/installutil-exe-installer-tool.md)</ept> in uninstall mode.","pos":[0,262],"source":"Typically, you do not call the methods of the <xref:System.Diagnostics.EventLogInstaller> from within your code; they are generally called only by the [Installutil.exe (Installer Tool)](~/docs/framework/tools/installutil-exe-installer-tool.md) in uninstall mode."},{"content":"The tool automatically calls the <ph id=\"ph1\">&lt;xref:System.Diagnostics.EventLogInstaller.Uninstall%2A&gt;</ph> method to restore the parts of the system that were affected by the installation to their pre-installation states.","pos":[263,467],"source":" The tool automatically calls the <xref:System.Diagnostics.EventLogInstaller.Uninstall%2A> method to restore the parts of the system that were affected by the installation to their pre-installation states."},{"content":"This includes deleting registry information that is associated with the event log being uninstalled.","pos":[468,568]}]},{"pos":[997,1562],"content":"An application's uninstall routine uses the project installer's <xref:System.Configuration.Install.Installer.Context%2A?displayProperty=fullName> property to automatically maintain information about the components that have already been uninstalled. This state information, which is passed to <xref:System.Diagnostics.EventLogInstaller.Uninstall%2A> as the `savedState` parameter, is continuously updated as the tool uninstalls each <xref:System.Diagnostics.EventLogInstaller>. Usually, it is not necessary for your code to explicitly modify this state information.","nodes":[{"content":"An application's uninstall routine uses the project installer's <ph id=\"ph1\">&lt;xref:System.Configuration.Install.Installer.Context%2A?displayProperty=fullName&gt;</ph> property to automatically maintain information about the components that have already been uninstalled.","pos":[0,249],"source":"An application's uninstall routine uses the project installer's <xref:System.Configuration.Install.Installer.Context%2A?displayProperty=fullName> property to automatically maintain information about the components that have already been uninstalled."},{"content":"This state information, which is passed to <ph id=\"ph1\">&lt;xref:System.Diagnostics.EventLogInstaller.Uninstall%2A&gt;</ph> as the <ph id=\"ph2\">`savedState`</ph> parameter, is continuously updated as the tool uninstalls each <ph id=\"ph3\">&lt;xref:System.Diagnostics.EventLogInstaller&gt;</ph>.","pos":[250,477],"source":" This state information, which is passed to <xref:System.Diagnostics.EventLogInstaller.Uninstall%2A> as the `savedState` parameter, is continuously updated as the tool uninstalls each <xref:System.Diagnostics.EventLogInstaller>."},{"content":"Usually, it is not necessary for your code to explicitly modify this state information.","pos":[478,565]}]}],"pos":[63898,65467],"yaml":true,"extradata":"MT"},{"content":"An <xref href=\"System.Collections.IDictionary\"></xref> that contains the pre-installation state of the computer.","nodes":[{"pos":[0,112],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Collections.IDictionary\"&gt;&lt;/xref&gt;</ph> that contains the pre-installation state of the computer.","source":"An <xref href=\"System.Collections.IDictionary\"></xref> that contains the pre-installation state of the computer."}],"pos":[65665,65778],"yaml":true},{"content":"Gets or sets a value that indicates whether the [Installutil.exe (Installer Tool)](~/docs/framework/tools/installutil-exe-installer-tool.md) should remove the event log or leave it in its installed state at uninstall time.","nodes":[{"pos":[0,222],"content":"Gets or sets a value that indicates whether the <bpt id=\"p1\">[</bpt>Installutil.exe (Installer Tool)<ept id=\"p1\">](~/docs/framework/tools/installutil-exe-installer-tool.md)</ept> should remove the event log or leave it in its installed state at uninstall time.","source":"Gets or sets a value that indicates whether the [Installutil.exe (Installer Tool)](~/docs/framework/tools/installutil-exe-installer-tool.md) should remove the event log or leave it in its installed state at uninstall time."}],"pos":[66871,67094],"yaml":true},{"content":"When you install an event log, you can optionally connect it to an existing log. If you do so, you must decide whether the log should return to its pre-installation state, or remain in its current, post-installation state. If you elect to return the event log to its pre-installation state, changes to the event log entries at installation are not restored. You can reset only the event log properties that are associated with the <xref:System.Diagnostics.EventLogInstaller> to their pre-installation values.","nodes":[{"pos":[0,508],"content":"When you install an event log, you can optionally connect it to an existing log. If you do so, you must decide whether the log should return to its pre-installation state, or remain in its current, post-installation state. If you elect to return the event log to its pre-installation state, changes to the event log entries at installation are not restored. You can reset only the event log properties that are associated with the <xref:System.Diagnostics.EventLogInstaller> to their pre-installation values.","nodes":[{"content":"When you install an event log, you can optionally connect it to an existing log. If you do so, you must decide whether the log should return to its pre-installation state, or remain in its current, post-installation state. If you elect to return the event log to its pre-installation state, changes to the event log entries at installation are not restored. You can reset only the event log properties that are associated with the <xref:System.Diagnostics.EventLogInstaller> to their pre-installation values.","pos":[0,508],"nodes":[{"content":"When you install an event log, you can optionally connect it to an existing log.","pos":[0,80]},{"content":"If you do so, you must decide whether the log should return to its pre-installation state, or remain in its current, post-installation state.","pos":[81,222]},{"content":"If you elect to return the event log to its pre-installation state, changes to the event log entries at installation are not restored.","pos":[223,357]},{"content":"You can reset only the event log properties that are associated with the <ph id=\"ph1\">&lt;xref:System.Diagnostics.EventLogInstaller&gt;</ph> to their pre-installation values.","pos":[358,508],"source":" You can reset only the event log properties that are associated with the <xref:System.Diagnostics.EventLogInstaller> to their pre-installation values."}]}]}],"pos":[67105,67614],"yaml":true,"extradata":"MT"},{"content":"One of the <xref href=\"System.Configuration.Install.UninstallAction\"></xref> values that indicates what state to leave the event log in when the <xref href=\"System.Diagnostics.EventLog\"></xref> is uninstalled. The default is `Remove`.","nodes":[{"pos":[0,234],"content":"One of the <xref href=\"System.Configuration.Install.UninstallAction\"></xref> values that indicates what state to leave the event log in when the <xref href=\"System.Diagnostics.EventLog\"></xref> is uninstalled. The default is `Remove`.","nodes":[{"content":"One of the <ph id=\"ph1\">&lt;xref href=\"System.Configuration.Install.UninstallAction\"&gt;&lt;/xref&gt;</ph> values that indicates what state to leave the event log in when the <ph id=\"ph2\">&lt;xref href=\"System.Diagnostics.EventLog\"&gt;&lt;/xref&gt;</ph> is uninstalled.","pos":[0,209],"source":"One of the <xref href=\"System.Configuration.Install.UninstallAction\"></xref> values that indicates what state to leave the event log in when the <xref href=\"System.Diagnostics.EventLog\"></xref> is uninstalled."},{"content":"The default is <ph id=\"ph1\">`Remove`</ph>.","pos":[210,234],"source":" The default is `Remove`."}]}],"pos":[67807,68042],"yaml":true},{"content":"<xref href=\"System.Diagnostics.EventLogInstaller.UninstallAction\"></xref> contains an invalid value. The only valid values for this property are `Remove` and `NoAction`.","nodes":[{"pos":[0,169],"content":"<xref href=\"System.Diagnostics.EventLogInstaller.UninstallAction\"></xref> contains an invalid value. The only valid values for this property are `Remove` and `NoAction`.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref href=\"System.Diagnostics.EventLogInstaller.UninstallAction\"&gt;&lt;/xref&gt;</ph> contains an invalid value.","pos":[0,100],"source":"<xref href=\"System.Diagnostics.EventLogInstaller.UninstallAction\"></xref> contains an invalid value."},{"content":"The only valid values for this property are <ph id=\"ph1\">`Remove`</ph> and <ph id=\"ph2\">`NoAction`</ph>.","pos":[101,169],"source":" The only valid values for this property are `Remove` and `NoAction`."}]}],"pos":[68268,68438],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Diagnostics.EventLogInstaller\n  commentId: T:System.Diagnostics.EventLogInstaller\n  id: EventLogInstaller\n  children:\n  - System.Diagnostics.EventLogInstaller.#ctor\n  - System.Diagnostics.EventLogInstaller.CategoryCount\n  - System.Diagnostics.EventLogInstaller.CategoryResourceFile\n  - System.Diagnostics.EventLogInstaller.CopyFromComponent(System.ComponentModel.IComponent)\n  - System.Diagnostics.EventLogInstaller.Install(System.Collections.IDictionary)\n  - System.Diagnostics.EventLogInstaller.IsEquivalentInstaller(System.Configuration.Install.ComponentInstaller)\n  - System.Diagnostics.EventLogInstaller.Log\n  - System.Diagnostics.EventLogInstaller.MessageResourceFile\n  - System.Diagnostics.EventLogInstaller.ParameterResourceFile\n  - System.Diagnostics.EventLogInstaller.Rollback(System.Collections.IDictionary)\n  - System.Diagnostics.EventLogInstaller.Source\n  - System.Diagnostics.EventLogInstaller.Uninstall(System.Collections.IDictionary)\n  - System.Diagnostics.EventLogInstaller.UninstallAction\n  langs:\n  - csharp\n  name: EventLogInstaller\n  nameWithType: EventLogInstaller\n  fullName: System.Diagnostics.EventLogInstaller\n  type: Class\n  assemblies:\n  - System.Configuration.Install\n  namespace: System.Diagnostics\n  summary: Allows you to install and configure an event log that your application reads from or writes to when running.\n  remarks: \"The <xref:System.Diagnostics.EventLogInstaller> is used by the [Installutil.exe (Installer Tool)](~/docs/framework/tools/installutil-exe-installer-tool.md) when installing an event log. The <xref:System.Diagnostics.EventLogInstaller> class can install event logs only on the local computer.  \\n  \\n Use the <xref:System.Diagnostics.EventLogInstaller> class when your application writes to an event log; it is not necessary to use an event log installer for your application to read from an event log. Applications and services should write to the Application log or a custom log. Device drivers should write to the System log.  \\n  \\n> [!NOTE]\\n>  The Security log is read-only.  \\n  \\n The installer creates the event source that you specify in the <xref:System.Diagnostics.EventLogInstaller.Source%2A> property and registers it for the event log specified in <xref:System.Diagnostics.EventLogInstaller.Log%2A> property. This behavior is similar to calling <xref:System.Diagnostics.EventLog.CreateEventSource%2A> on the <xref:System.Diagnostics.EventLog> component.  \\n  \\n Use the <xref:System.Diagnostics.EventLog.WriteEvent%2A> and <xref:System.Diagnostics.EventLog.WriteEntry%2A> methods to write events to an event log. You must specify an event source to write events; you must create and configure the event source before writing the first entry with the source.  \\n  \\n Create the new event source during the installation of your application. This allows time for the operating system to refresh its list of registered event sources and their configurations. If the operating system has not refreshed its list of event sources, and you attempt to write an event with the new source, the write operation will fail. You can configure a new source using an <xref:System.Diagnostics.EventLogInstaller>, or using the <xref:System.Diagnostics.EventLog.CreateEventSource%2A> method. You must have administrative rights on the computer to create a new event source.  \\n  \\n You can create an event source for an existing event log or a new event log. When you create a new source for a new event log, the system registers the source for that log, but the log is not created until the first entry is written to it.  \\n  \\n To install an event log, create a project installer class that inherits from <xref:System.Configuration.Install.Installer>, and set the <xref:System.ComponentModel.RunInstallerAttribute> for the class to `true`. Within your project, create an <xref:System.Diagnostics.EventLogInstaller> for each event log that your application will write to and add the instance to your project installer class.  \\n  \\n When the [Installutil.exe (Installer Tool)](~/docs/framework/tools/installutil-exe-installer-tool.md) is called, it looks at the <xref:System.ComponentModel.RunInstallerAttribute>. If it is `true`, the tool installs all the items in the <xref:System.Configuration.Install.Installer.Installers%2A> collection that are associated with your project installer. If <xref:System.ComponentModel.RunInstallerAttribute> is `false`, the tool ignores the project installer.  \\n  \\n You modify other properties of an <xref:System.Diagnostics.EventLogInstaller> either before or after adding the instance to the <xref:System.Configuration.Install.Installer.Installers%2A> collection of your project installer, but before the installer tool runs. You must set the <xref:System.Diagnostics.EventLogInstaller.Source%2A> property if your application will be writing to the event log.  \\n  \\n Use <xref:System.Diagnostics.EventLogInstaller> to register a new source for a new or existing event log; do not use <xref:System.Diagnostics.EventLogInstaller> to change an existing source. The <xref:System.Diagnostics.EventLogInstaller> class does not modify the configuration properties of an existing source to match the specified installation properties. The <xref:System.Diagnostics.EventLogInstaller.Install%2A> method throws an exception if the <xref:System.Diagnostics.EventLogInstaller.Source%2A> property matches a source name that is registered for a different event log on the computer. The <xref:System.Diagnostics.EventLogInstaller.Install%2A> method does not register the source if the <xref:System.Diagnostics.EventLogInstaller.Source%2A> property matches a source name that is already registered for the same event log specified in the <xref:System.Diagnostics.EventLogInstaller.Log%2A> property.  \\n  \\n You can register the event source with localized resource files for your event category and message strings. Your application can write event log entries using resource identifiers, rather than specifying the actual string. The Event Viewer uses the resource identifier to find and display the corresponding string from the localized resource file based on current language settings. You can register a separate file for event categories, messages, and parameter insertion strings, or you can register the same resource file for all three types of strings. Use the <xref:System.Diagnostics.EventLogInstaller.CategoryCount%2A>, <xref:System.Diagnostics.EventLogInstaller.CategoryResourceFile%2A>, <xref:System.Diagnostics.EventLogInstaller.MessageResourceFile%2A>, and <xref:System.Diagnostics.EventLogInstaller.ParameterResourceFile%2A> properties to configure the source to write localized entries to the event log. If your application writes strings values directly to the event log, you do not need to set these properties.  \\n  \\n The source must be configured either for writing localized entries or for writing direct strings. If your application writes entries using both resource identifiers and string values, you must register two separate sources. For example, configure one source with resource files, and then use that source in the <xref:System.Diagnostics.EventLog.WriteEvent%2A> method to write entries using resource identifiers to the event log. Create a different source without resource files and then use that source in the <xref:System.Diagnostics.EventLog.WriteEntry%2A> method to write strings directly to the event log using that source.  \\n  \\n Typically, you do not call the methods of the <xref:System.Diagnostics.EventLogInstaller> class from within your code; they are generally called only by Installutil.exe. The tool automatically calls the <xref:System.Diagnostics.EventLogInstaller.Install%2A> method during the installation process. It backs out failures, if necessary, by calling the <xref:System.Diagnostics.EventLogInstaller.Rollback%2A> method for the object that generated the exception.\"\n  example:\n  - \"The following code example sets the installation properties for a new event source. The code example sets the source name and the event log name, and adds the <xref:System.Diagnostics.EventLogInstaller> to the <xref:System.Configuration.Install.Installer.Installers%2A> collection.  \\n  \\n [!code-cpp[EventLogInstaller#1](~/samples/snippets/cpp/VS_Snippets_CLR/EventLogInstaller/CPP/eventloginstaller.cpp#1)]\\n [!code-csharp[EventLogInstaller#1](~/samples/snippets/csharp/VS_Snippets_CLR/EventLogInstaller/CS/eventloginstaller.cs#1)]\\n [!code-vb[EventLogInstaller#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/EventLogInstaller/VB/eventloginstaller.vb#1)]\"\n  syntax:\n    content: 'public class EventLogInstaller : System.Configuration.Install.ComponentInstaller'\n  inheritance:\n  - System.Object\n  - System.MarshalByRefObject\n  - System.ComponentModel.Component\n  - System.Configuration.Install.Installer\n  - System.Configuration.Install.ComponentInstaller\n  implements: []\n  inheritedMembers:\n  - System.ComponentModel.Component.CanRaiseEvents\n  - System.ComponentModel.Component.Container\n  - System.ComponentModel.Component.DesignMode\n  - System.ComponentModel.Component.Dispose\n  - System.ComponentModel.Component.Dispose(System.Boolean)\n  - System.ComponentModel.Component.Disposed\n  - System.ComponentModel.Component.Events\n  - System.ComponentModel.Component.GetService(System.Type)\n  - System.ComponentModel.Component.Site\n  - System.ComponentModel.Component.ToString\n  - System.Configuration.Install.Installer.AfterInstall\n  - System.Configuration.Install.Installer.AfterRollback\n  - System.Configuration.Install.Installer.AfterUninstall\n  - System.Configuration.Install.Installer.BeforeInstall\n  - System.Configuration.Install.Installer.BeforeRollback\n  - System.Configuration.Install.Installer.BeforeUninstall\n  - System.Configuration.Install.Installer.Commit(System.Collections.IDictionary)\n  - System.Configuration.Install.Installer.Committed\n  - System.Configuration.Install.Installer.Committing\n  - System.Configuration.Install.Installer.Context\n  - System.Configuration.Install.Installer.HelpText\n  - System.Configuration.Install.Installer.Installers\n  - System.Configuration.Install.Installer.OnAfterInstall(System.Collections.IDictionary)\n  - System.Configuration.Install.Installer.OnAfterRollback(System.Collections.IDictionary)\n  - System.Configuration.Install.Installer.OnAfterUninstall(System.Collections.IDictionary)\n  - System.Configuration.Install.Installer.OnBeforeInstall(System.Collections.IDictionary)\n  - System.Configuration.Install.Installer.OnBeforeRollback(System.Collections.IDictionary)\n  - System.Configuration.Install.Installer.OnBeforeUninstall(System.Collections.IDictionary)\n  - System.Configuration.Install.Installer.OnCommitted(System.Collections.IDictionary)\n  - System.Configuration.Install.Installer.OnCommitting(System.Collections.IDictionary)\n  - System.Configuration.Install.Installer.Parent\n  - System.MarshalByRefObject.CreateObjRef(System.Type)\n  - System.MarshalByRefObject.GetLifetimeService\n  - System.MarshalByRefObject.InitializeLifetimeService\n  - System.MarshalByRefObject.MemberwiseClone(System.Boolean)\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics/EventLogInstaller.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Diagnostics.EventLogInstaller.#ctor\n  commentId: M:System.Diagnostics.EventLogInstaller.#ctor\n  id: '#ctor'\n  parent: System.Diagnostics.EventLogInstaller\n  langs:\n  - csharp\n  name: EventLogInstaller()\n  nameWithType: EventLogInstaller.EventLogInstaller()\n  fullName: EventLogInstaller.EventLogInstaller()\n  type: Constructor\n  assemblies:\n  - System.Configuration.Install\n  namespace: System.Diagnostics\n  summary: Initializes a new instance of the <xref href=\"System.Diagnostics.EventLogInstaller\"></xref> class.\n  syntax:\n    content: public EventLogInstaller ();\n    parameters: []\n  overload: System.Diagnostics.EventLogInstaller.#ctor*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics/EventLogInstaller.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Diagnostics.EventLogInstaller.CategoryCount\n  commentId: P:System.Diagnostics.EventLogInstaller.CategoryCount\n  id: CategoryCount\n  parent: System.Diagnostics.EventLogInstaller\n  langs:\n  - csharp\n  name: CategoryCount\n  nameWithType: EventLogInstaller.CategoryCount\n  fullName: EventLogInstaller.CategoryCount\n  type: Property\n  assemblies:\n  - System.Configuration.Install\n  namespace: System.Diagnostics\n  summary: Gets or sets the number of categories in the category resource file.\n  remarks: \"Use the <xref:System.Diagnostics.EventLogInstaller.CategoryCount%2A> and <xref:System.Diagnostics.EventLogInstaller.CategoryResourceFile%2A> properties to write events with localized category strings. The Event Viewer displays the category for an event entry, if you supply a category when you write the event. Event log categories are application-defined strings that help filter events, or provide information on an event. For example, your application can define separate categories for different components or different operations.  \\n  \\n Event categories are optional; if your application does not use categories, do not set the <xref:System.Diagnostics.EventLogInstaller.CategoryCount%2A> and <xref:System.Diagnostics.EventLogInstaller.CategoryResourceFile%2A> properties.  \\n  \\n For details about defining event messages and building event resource files, see the \\\"Message Compiler\\\" topic in the Platform SDK documentation at [http://msdn.microsoft.com](http://msdn.microsoft.com/).\"\n  example:\n  - \"The following code example sets the installation properties for a new event source. The code example sets the event source name, event log name, and resource file for localized event text.  \\n  \\n [!code-cpp[EventLogInstaller_Resources#1](~/samples/snippets/cpp/VS_Snippets_CLR/eventlogInstaller_Resources/CPP/source.cpp#1)]\\n [!code-csharp[EventLogInstaller_Resources#1](~/samples/snippets/csharp/VS_Snippets_CLR/eventlogInstaller_Resources/CS/source.cs#1)]\\n [!code-vb[EventLogInstaller_Resources#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/eventlogInstaller_Resources/VB/source.vb#1)]  \\n  \\n The code example uses the following message text file, built into the resource library EventLogMsgs.dll. A message text file is the source from which the message resource file is created. The message text file defines the resource identifiers and text for the category, event message, and parameter insertion strings.  \\n  \\n```  \\n; // EventLogMsgs.mc  \\n; // ********************************************************  \\n  \\n; // Use the following commands to build this file:  \\n  \\n; //   mc -s EventLogMsgs.mc  \\n; //   rc EventLogMsgs.rc  \\n; //   link /DLL /SUBSYSTEM:WINDOWS /NOENTRY /MACHINE:x86 EventLogMsgs.Res   \\n; // ********************************************************  \\n  \\n; // - Event categories -  \\n; // Categories must be numbered consecutively starting at 1.  \\n; // ********************************************************  \\n  \\nMessageId=0x1  \\nSeverity=Success  \\nSymbolicName=INSTALL_CATEGORY  \\nLanguage=English  \\nInstallation  \\n.  \\n  \\nMessageId=0x2  \\nSeverity=Success  \\nSymbolicName=QUERY_CATEGORY  \\nLanguage=English  \\nDatabase Query  \\n.  \\n  \\nMessageId=0x3  \\nSeverity=Success  \\nSymbolicName=REFRESH_CATEGORY  \\nLanguage=English  \\nData Refresh  \\n.  \\n  \\n; // - Event messages -  \\n; // *********************************  \\n  \\nMessageId = 1000  \\nSeverity = Success  \\nFacility = Application  \\nSymbolicName = AUDIT_SUCCESS_MESSAGE_ID_1000  \\nLanguage=English  \\nMy application message text, in English, for message id 1000, called from %1.  \\n.  \\n  \\nMessageId = 1001  \\nSeverity = Warning  \\nFacility = Application  \\nSymbolicName = AUDIT_FAILED_MESSAGE_ID_1001  \\nLanguage=English  \\nMy application message text, in English, for message id 1001, called from %1.  \\n.  \\n  \\nMessageId = 1002  \\nSeverity = Success  \\nFacility = Application  \\nSymbolicName = GENERIC_INFO_MESSAGE_ID_1002  \\nLanguage=English  \\nMy generic information message in English, for message id 1002.  \\n.  \\n  \\nMessageId = 1003  \\nSeverity = Warning  \\nFacility = Application  \\nSymbolicName = GENERIC_WARNING_MESSAGE_ID_1003  \\nLanguage=English  \\nMy generic warning message in English, for message id 1003, called from %1.  \\n.  \\n  \\nMessageId = 1004  \\nSeverity = Success  \\nFacility = Application  \\nSymbolicName = UPDATE_CYCLE_COMPLETE_MESSAGE_ID_1004  \\nLanguage=English  \\nThe update cycle is complete for %%5002.  \\n.  \\n  \\nMessageId = 1005  \\nSeverity = Warning  \\nFacility = Application  \\nSymbolicName = SERVER_CONNECTION_DOWN_MESSAGE_ID_1005  \\nLanguage=English  \\nThe refresh operation did not complete because the connection to server %1 could not be established.  \\n.  \\n  \\n; // - Event log display name -  \\n; // ********************************************************  \\n  \\nMessageId = 5001  \\nSeverity = Success  \\nFacility = Application  \\nSymbolicName = EVENT_LOG_DISPLAY_NAME_MSGID  \\nLanguage=English  \\nSample Event Log  \\n.  \\n  \\n; // - Event message parameters -  \\n; //   Language independent insertion strings  \\n; // ********************************************************  \\n  \\nMessageId = 5002  \\nSeverity = Success  \\nFacility = Application  \\nSymbolicName = EVENT_LOG_SERVICE_NAME_MSGID  \\nLanguage=English  \\nSVC_UPDATE.EXE  \\n.  \\n```\"\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(false)]\n\n      public int CategoryCount { get; set; }\n    return:\n      type: System.Int32\n      description: The number of categories in the category resource file. The default value is zero.\n  overload: System.Diagnostics.EventLogInstaller.CategoryCount*\n  exceptions: []\n  attributes:\n  - type: System.Runtime.InteropServices.ComVisibleAttribute\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics/EventLogInstaller.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Diagnostics.EventLogInstaller.CategoryResourceFile\n  commentId: P:System.Diagnostics.EventLogInstaller.CategoryResourceFile\n  id: CategoryResourceFile\n  parent: System.Diagnostics.EventLogInstaller\n  langs:\n  - csharp\n  name: CategoryResourceFile\n  nameWithType: EventLogInstaller.CategoryResourceFile\n  fullName: EventLogInstaller.CategoryResourceFile\n  type: Property\n  assemblies:\n  - System.Configuration.Install\n  namespace: System.Diagnostics\n  summary: Gets or sets the path of the resource file that contains category strings for the source.\n  remarks: \"Use the <xref:System.Diagnostics.EventLogInstaller.CategoryCount%2A> and <xref:System.Diagnostics.EventLogInstaller.CategoryResourceFile%2A> properties to write events with localized category strings. The Event Viewer displays the category for an event entry if you supply a category when you write the event. Event log categories are application-defined strings that help filter events, or provide information about an event. For example, your application might have separate categories for different components or different operations.  \\n  \\n Event categories are optional; if your application does not use categories, do not set the <xref:System.Diagnostics.EventLogInstaller.CategoryCount%2A> and <xref:System.Diagnostics.EventLogInstaller.CategoryResourceFile%2A> properties.  \\n  \\n For details about defining event messages and building event resource files, see the \\\"Message Compiler\\\" topic in the Platform SDK documentation at [http://msdn.microsoft.com](http://msdn.microsoft.com/).\"\n  example:\n  - \"The following code example sets the installation properties for a new event source. The code example sets the event source name, event log name, and resource file for localized event text.  \\n  \\n [!code-cpp[EventLogInstaller_Resources#1](~/samples/snippets/cpp/VS_Snippets_CLR/eventlogInstaller_Resources/CPP/source.cpp#1)]\\n [!code-csharp[EventLogInstaller_Resources#1](~/samples/snippets/csharp/VS_Snippets_CLR/eventlogInstaller_Resources/CS/source.cs#1)]\\n [!code-vb[EventLogInstaller_Resources#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/eventlogInstaller_Resources/VB/source.vb#1)]  \\n  \\n The code example uses the following message text file, built into the resource library EventLogMsgs.dll. A message text file is the source from which the message resource file is created. The message text file defines the resource identifiers and text for the category, event message, and parameter insertion strings.  \\n  \\n```  \\n; // EventLogMsgs.mc  \\n; // ********************************************************  \\n  \\n; // Use the following commands to build this file:  \\n  \\n; //   mc -s EventLogMsgs.mc  \\n; //   rc EventLogMsgs.rc  \\n; //   link /DLL /SUBSYSTEM:WINDOWS /NOENTRY /MACHINE:x86 EventLogMsgs.Res   \\n; // ********************************************************  \\n  \\n; // - Event categories -  \\n; // Categories must be numbered consecutively starting at 1.  \\n; // ********************************************************  \\n  \\nMessageId=0x1  \\nSeverity=Success  \\nSymbolicName=INSTALL_CATEGORY  \\nLanguage=English  \\nInstallation  \\n.  \\n  \\nMessageId=0x2  \\nSeverity=Success  \\nSymbolicName=QUERY_CATEGORY  \\nLanguage=English  \\nDatabase Query  \\n.  \\n  \\nMessageId=0x3  \\nSeverity=Success  \\nSymbolicName=REFRESH_CATEGORY  \\nLanguage=English  \\nData Refresh  \\n.  \\n  \\n; // - Event messages -  \\n; // *********************************  \\n  \\nMessageId = 1000  \\nSeverity = Success  \\nFacility = Application  \\nSymbolicName = AUDIT_SUCCESS_MESSAGE_ID_1000  \\nLanguage=English  \\nMy application message text, in English, for message id 1000, called from %1.  \\n.  \\n  \\nMessageId = 1001  \\nSeverity = Warning  \\nFacility = Application  \\nSymbolicName = AUDIT_FAILED_MESSAGE_ID_1001  \\nLanguage=English  \\nMy application message text, in English, for message id 1001, called from %1.  \\n.  \\n  \\nMessageId = 1002  \\nSeverity = Success  \\nFacility = Application  \\nSymbolicName = GENERIC_INFO_MESSAGE_ID_1002  \\nLanguage=English  \\nMy generic information message in English, for message id 1002.  \\n.  \\n  \\nMessageId = 1003  \\nSeverity = Warning  \\nFacility = Application  \\nSymbolicName = GENERIC_WARNING_MESSAGE_ID_1003  \\nLanguage=English  \\nMy generic warning message in English, for message id 1003, called from %1.  \\n.  \\n  \\nMessageId = 1004  \\nSeverity = Success  \\nFacility = Application  \\nSymbolicName = UPDATE_CYCLE_COMPLETE_MESSAGE_ID_1004  \\nLanguage=English  \\nThe update cycle is complete for %%5002.  \\n.  \\n  \\nMessageId = 1005  \\nSeverity = Warning  \\nFacility = Application  \\nSymbolicName = SERVER_CONNECTION_DOWN_MESSAGE_ID_1005  \\nLanguage=English  \\nThe refresh operation did not complete because the connection to server %1 could not be established.  \\n.  \\n  \\n; // - Event log display name -  \\n; // ********************************************************  \\n  \\nMessageId = 5001  \\nSeverity = Success  \\nFacility = Application  \\nSymbolicName = EVENT_LOG_DISPLAY_NAME_MSGID  \\nLanguage=English  \\nSample Event Log  \\n.  \\n  \\n; // - Event message parameters -  \\n; //   Language independent insertion strings  \\n; // ********************************************************  \\n  \\nMessageId = 5002  \\nSeverity = Success  \\nFacility = Application  \\nSymbolicName = EVENT_LOG_SERVICE_NAME_MSGID  \\nLanguage=English  \\nSVC_UPDATE.EXE  \\n.  \\n```\"\n  syntax:\n    content: >-\n      [System.ComponentModel.TypeConverter(\"System.Diagnostics.Design.StringValueConverter, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\")]\n\n      [System.Runtime.InteropServices.ComVisible(false)]\n\n      public string CategoryResourceFile { get; set; }\n    return:\n      type: System.String\n      description: The path of the category resource file. The default is an empty string (\"\").\n  overload: System.Diagnostics.EventLogInstaller.CategoryResourceFile*\n  exceptions: []\n  attributes:\n  - type: System.ComponentModel.TypeConverterAttribute\n  - type: System.Runtime.InteropServices.ComVisibleAttribute\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics/EventLogInstaller.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Diagnostics.EventLogInstaller.CopyFromComponent(System.ComponentModel.IComponent)\n  commentId: M:System.Diagnostics.EventLogInstaller.CopyFromComponent(System.ComponentModel.IComponent)\n  id: CopyFromComponent(System.ComponentModel.IComponent)\n  parent: System.Diagnostics.EventLogInstaller\n  langs:\n  - csharp\n  name: CopyFromComponent(IComponent)\n  nameWithType: EventLogInstaller.CopyFromComponent(IComponent)\n  fullName: EventLogInstaller.CopyFromComponent(IComponent)\n  type: Method\n  assemblies:\n  - System.Configuration.Install\n  namespace: System.Diagnostics\n  summary: Copies the property values of an <xref href=\"System.Diagnostics.EventLog\"></xref> component that are required at installation time for an event log.\n  remarks: \"The component specified by the `component` parameter must be an <xref:System.Diagnostics.EventLog>; otherwise, an exception is thrown.  \\n  \\n Typically, you do not call the methods of the <xref:System.Diagnostics.EventLogInstaller> from within your code; they are generally called only by the [Installutil.exe (Installer Tool)](~/docs/framework/tools/installutil-exe-installer-tool.md). <xref:System.Diagnostics.EventLogInstaller.CopyFromComponent%2A> is used by Installutil.exe to set the property values for the <xref:System.Diagnostics.EventLogInstaller> to the values of an existing <xref:System.Diagnostics.EventLog>.  \\n  \\n If the <xref:System.Diagnostics.EventLog.Log%2A> of the <xref:System.Diagnostics.EventLog> that is passed in is an empty string (\\\"\\\"), you must set the <xref:System.Diagnostics.EventLog.Log%2A> property to a valid value before the installer executes.\"\n  syntax:\n    content: public override void CopyFromComponent (System.ComponentModel.IComponent component);\n    parameters:\n    - id: component\n      type: System.ComponentModel.IComponent\n      description: An <xref href=\"System.ComponentModel.IComponent\"></xref> to use as a template for the <xref href=\"System.Diagnostics.EventLogInstaller\"></xref>.\n  overload: System.Diagnostics.EventLogInstaller.CopyFromComponent*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"The specified component is not an <xref href=\\\"System.Diagnostics.EventLog\\\"></xref>.  \\n  \\n -or-  \\n  \\n The <xref href=\\\"System.Diagnostics.EventLog.Log\\\"></xref> or <xref href=\\\"System.Diagnostics.EventLog.Source\\\"></xref> property of the specified component is either `null` or empty.\"\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics/EventLogInstaller.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Diagnostics.EventLogInstaller.Install(System.Collections.IDictionary)\n  commentId: M:System.Diagnostics.EventLogInstaller.Install(System.Collections.IDictionary)\n  id: Install(System.Collections.IDictionary)\n  parent: System.Diagnostics.EventLogInstaller\n  langs:\n  - csharp\n  name: Install(IDictionary)\n  nameWithType: EventLogInstaller.Install(IDictionary)\n  fullName: EventLogInstaller.Install(IDictionary)\n  type: Method\n  assemblies:\n  - System.Configuration.Install\n  namespace: System.Diagnostics\n  summary: Performs the installation and writes event log information to the registry.\n  remarks: \"The <xref:System.Diagnostics.EventLogInstaller.Install%2A> method writes event log information to the registry, and associates the event log with a log that is specified by the <xref:System.Diagnostics.EventLogInstaller.Log%2A> property. If the log does not already exist (and a source is specified), <xref:System.Diagnostics.EventLogInstaller.Install%2A> creates a log and associates the new source with it.  \\n  \\n Typically, you do not call the methods of the <xref:System.Diagnostics.EventLogInstaller> from within your code; they are generally called only by the [Installutil.exe (Installer Tool)](~/docs/framework/tools/installutil-exe-installer-tool.md). The tool automatically calls the <xref:System.Diagnostics.EventLogInstaller.Install%2A> method during the installation process to write registry information that is associated with the event log being installed. Installation is transactional, so if there is a failure of any installation project component during the installation, all the previously-installed components are rolled back to their pre-installation states. This is accomplished by calling each component's <xref:System.Diagnostics.EventLogInstaller.Rollback%2A> method.  \\n  \\n Use <xref:System.Diagnostics.EventLogInstaller> to register a new source for a new or existing event log; do not use <xref:System.Diagnostics.EventLogInstaller> to change an existing source. The <xref:System.Diagnostics.EventLogInstaller> class does not modify the configuration properties of an existing source to match the specified installation properties. The <xref:System.Diagnostics.EventLogInstaller.Install%2A> method throws an exception if the <xref:System.Diagnostics.EventLogInstaller.Source%2A> property matches a source name that is registered for a different event log on the computer. The <xref:System.Diagnostics.EventLogInstaller.Install%2A> method skips registering the source if the <xref:System.Diagnostics.EventLogInstaller.Source%2A> property matches a source name that is already registered for the same event log specified in the <xref:System.Diagnostics.EventLogInstaller.Log%2A> property.  \\n  \\n An application's install routine uses the project installer's <xref:System.Configuration.Install.Installer.Context%2A?displayProperty=fullName> property to automatically maintain information about the components that have already been installed. This state information, which is passed to <xref:System.Diagnostics.EventLogInstaller.Install%2A> as the `stateSaver` parameter, is continuously updated as the tool installs each <xref:System.Diagnostics.EventLogInstaller>. Usually, it is not necessary for your code to explicitly modify this state information.\"\n  syntax:\n    content: public override void Install (System.Collections.IDictionary stateSaver);\n    parameters:\n    - id: stateSaver\n      type: System.Collections.IDictionary\n      description: An <xref href=\"System.Collections.IDictionary\"></xref> used to save information needed to perform a rollback or uninstall operation.\n  overload: System.Diagnostics.EventLogInstaller.Install*\n  exceptions:\n  - type: System.PlatformNotSupportedException\n    commentId: T:System.PlatformNotSupportedException\n    description: The platform the installer is trying to use is not Windows NT 4.0 or later.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The name specified in the <xref href=\"System.Diagnostics.EventLogInstaller.Source\"></xref> property is already registered for a different event log.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics/EventLogInstaller.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Diagnostics.EventLogInstaller.IsEquivalentInstaller(System.Configuration.Install.ComponentInstaller)\n  commentId: M:System.Diagnostics.EventLogInstaller.IsEquivalentInstaller(System.Configuration.Install.ComponentInstaller)\n  id: IsEquivalentInstaller(System.Configuration.Install.ComponentInstaller)\n  parent: System.Diagnostics.EventLogInstaller\n  langs:\n  - csharp\n  name: IsEquivalentInstaller(ComponentInstaller)\n  nameWithType: EventLogInstaller.IsEquivalentInstaller(ComponentInstaller)\n  fullName: EventLogInstaller.IsEquivalentInstaller(ComponentInstaller)\n  type: Method\n  assemblies:\n  - System.Configuration.Install\n  namespace: System.Diagnostics\n  summary: Determines whether an installer and another specified installer refer to the same source.\n  remarks: Typically, you do not call the methods of the <xref:System.Diagnostics.EventLogInstaller> from within your code; they are generally called only by the Installer tool (Installutil.exe).\n  syntax:\n    content: public override bool IsEquivalentInstaller (System.Configuration.Install.ComponentInstaller otherInstaller);\n    parameters:\n    - id: otherInstaller\n      type: System.Configuration.Install.ComponentInstaller\n      description: The installer to compare.\n    return:\n      type: System.Boolean\n      description: '`true` if this installer and the installer specified by the <code>otherInstaller</code> parameter would install or uninstall the same source; otherwise, `false`.'\n  overload: System.Diagnostics.EventLogInstaller.IsEquivalentInstaller*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics/EventLogInstaller.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Diagnostics.EventLogInstaller.Log\n  commentId: P:System.Diagnostics.EventLogInstaller.Log\n  id: Log\n  parent: System.Diagnostics.EventLogInstaller\n  langs:\n  - csharp\n  name: Log\n  nameWithType: EventLogInstaller.Log\n  fullName: EventLogInstaller.Log\n  type: Property\n  assemblies:\n  - System.Configuration.Install\n  namespace: System.Diagnostics\n  summary: Gets or sets the name of the log to set the source to.\n  remarks: \"You can use the <xref:System.Diagnostics.EventLogInstaller.Log%2A> property to associate the source you specify in the <xref:System.Diagnostics.EventLogInstaller.Source%2A> property with either an existing log or a new log on the local computer. The [Installutil.exe (Installer Tool)](~/docs/framework/tools/installutil-exe-installer-tool.md) uses this information to map the source to the log in the computer's registry. Applications and services should write to the Application log or a custom log. Device drivers should write to the System log.  \\n  \\n To write entries to an event log, you must create a source and register it with an event log. An event source can only write to one log at a time. The installer uses the value of the <xref:System.Diagnostics.EventLogInstaller.Source%2A> property to register your application with the event log as a valid source of entries. If you do not specify a log name before the installer runs, the installer registers your source to the Application log. If you specify a new source and an existing log, the installer creates a new event source and associates it with the log you specify. If you specify both a new source and a new log, the installer associates the new source with the new log in the registry, but the log is not created until the first entry is written to it.  \\n  \\n The operating system stores event logs as files. When you use <xref:System.Diagnostics.EventLogInstaller> or the <xref:System.Diagnostics.EventLog.CreateEventSource%2A> method to create a new event log, the associated file is stored in the %SystemRoot%\\\\System32\\\\Config directory on the specified computer. The file name is set by appending the first 8 characters of the <xref:System.Diagnostics.EventLogInstaller.Log%2A> property with the \\\".evt\\\" file name extension.  \\n  \\n Use <xref:System.Diagnostics.EventLogInstaller> to register a new source for a new or existing event log; do not use <xref:System.Diagnostics.EventLogInstaller> to change an existing source. The <xref:System.Diagnostics.EventLogInstaller> class does not modify the configuration properties of an existing source to match the specified installation properties. The <xref:System.Diagnostics.EventLogInstaller.Install%2A> method throws an exception if the <xref:System.Diagnostics.EventLogInstaller.Source%2A> property matches a source name that is registered for a different event log on the computer. The <xref:System.Diagnostics.EventLogInstaller.Install%2A> method does not register the source if the <xref:System.Diagnostics.EventLogInstaller.Source%2A> property matches a source name that is already registered for the same event log specified in the <xref:System.Diagnostics.EventLogInstaller.Log%2A> property.  \\n  \\n For more detailed information about the behaviors of event logs and sources, see the <xref:System.Diagnostics.EventLog> class documentation for the <xref:System.Diagnostics.EventLog.Log%2A> and <xref:System.Diagnostics.EventLog.Source%2A> properties.\"\n  syntax:\n    content: >-\n      [System.ComponentModel.TypeConverter(\"System.Diagnostics.Design.StringValueConverter, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\")]\n\n      public string Log { get; set; }\n    return:\n      type: System.String\n      description: The name of the log. This can be Application, System, or a custom log name. The default is an empty string (\"\").\n  overload: System.Diagnostics.EventLogInstaller.Log*\n  exceptions: []\n  attributes:\n  - type: System.ComponentModel.TypeConverterAttribute\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics/EventLogInstaller.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Diagnostics.EventLogInstaller.MessageResourceFile\n  commentId: P:System.Diagnostics.EventLogInstaller.MessageResourceFile\n  id: MessageResourceFile\n  parent: System.Diagnostics.EventLogInstaller\n  langs:\n  - csharp\n  name: MessageResourceFile\n  nameWithType: EventLogInstaller.MessageResourceFile\n  fullName: EventLogInstaller.MessageResourceFile\n  type: Property\n  assemblies:\n  - System.Configuration.Install\n  namespace: System.Diagnostics\n  summary: Gets or sets the path of the resource file that contains message formatting strings for the source.\n  remarks: \"Use the <xref:System.Diagnostics.EventLogInstaller.MessageResourceFile%2A> property to configure an event log source to write localized event messages. Event messages are application-defined strings that describe the event to the user.  \\n  \\n Your application can write event log entries using resource identifiers. A resource identifier indexes a message located in the <xref:System.Diagnostics.EventLogInstaller.MessageResourceFile%2A>. The Event Viewer uses the resource identifier to find and display the corresponding string from the localized resource file based on current language settings.  \\n  \\n The event source must be configured either for writing localized entries or for writing direct strings. Use the <xref:System.Diagnostics.EventLog.WriteEvent%2A> method to write localized entries for a source configured with a message resource file.  \\n  \\n If your application writes event message strings directly, rather than using a resource identifier in a localized resource file, do not set the <xref:System.Diagnostics.EventLogInstaller.MessageResourceFile%2A> property.  \\n  \\n If the <xref:System.Diagnostics.EventLog.MachineName%2A> property is not the local computer identifier (\\\".\\\"), the .NET Framework assumes that the resource file is on a remote computer. If the <xref:System.Diagnostics.EventLogInstaller.MessageResourceFile%2A> property value contains a drive letter, the resource file is assumed to be on the \\\\\\\\\\\\\\\\<machinename\\\\>\\\\\\\\<drive\\\\>$ share (for example, \\\\\\\\\\\\server\\\\c$). If the value contains the string %systemroot%, the resource file is assumed to be on the \\\\\\\\\\\\\\\\<machinename\\\\>\\\\admin$ share (for example, \\\\\\\\\\\\server\\\\admin$).  \\n  \\n For details about defining event messages and building event resource files, see the \\\"Message Compiler\\\" topic in the Platform SDK documentation at [http://msdn.microsoft.com](http://msdn.microsoft.com/).\"\n  example:\n  - \"The following code example sets the installation properties for a new event source. The code example sets the event source name, event log name, and resource file for localized event text.  \\n  \\n [!code-cpp[EventLogInstaller_Resources#1](~/samples/snippets/cpp/VS_Snippets_CLR/eventlogInstaller_Resources/CPP/source.cpp#1)]\\n [!code-csharp[EventLogInstaller_Resources#1](~/samples/snippets/csharp/VS_Snippets_CLR/eventlogInstaller_Resources/CS/source.cs#1)]\\n [!code-vb[EventLogInstaller_Resources#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/eventlogInstaller_Resources/VB/source.vb#1)]  \\n  \\n The code example uses the following message text file, built into the resource library EventLogMsgs.dll. A message text file is the source from which the message resource file is created. The message text file defines the resource identifiers and text for the category, event message, and parameter insertion strings.  \\n  \\n```  \\n; // EventLogMsgs.mc  \\n; // ********************************************************  \\n  \\n; // Use the following commands to build this file:  \\n  \\n; //   mc -s EventLogMsgs.mc  \\n; //   rc EventLogMsgs.rc  \\n; //   link /DLL /SUBSYSTEM:WINDOWS /NOENTRY /MACHINE:x86 EventLogMsgs.Res   \\n; // ********************************************************  \\n  \\n; // - Event categories -  \\n; // Categories must be numbered consecutively starting at 1.  \\n; // ********************************************************  \\n  \\nMessageId=0x1  \\nSeverity=Success  \\nSymbolicName=INSTALL_CATEGORY  \\nLanguage=English  \\nInstallation  \\n.  \\n  \\nMessageId=0x2  \\nSeverity=Success  \\nSymbolicName=QUERY_CATEGORY  \\nLanguage=English  \\nDatabase Query  \\n.  \\n  \\nMessageId=0x3  \\nSeverity=Success  \\nSymbolicName=REFRESH_CATEGORY  \\nLanguage=English  \\nData Refresh  \\n.  \\n  \\n; // - Event messages -  \\n; // *********************************  \\n  \\nMessageId = 1000  \\nSeverity = Success  \\nFacility = Application  \\nSymbolicName = AUDIT_SUCCESS_MESSAGE_ID_1000  \\nLanguage=English  \\nMy application message text, in English, for message id 1000, called from %1.  \\n.  \\n  \\nMessageId = 1001  \\nSeverity = Warning  \\nFacility = Application  \\nSymbolicName = AUDIT_FAILED_MESSAGE_ID_1001  \\nLanguage=English  \\nMy application message text, in English, for message id 1001, called from %1.  \\n.  \\n  \\nMessageId = 1002  \\nSeverity = Success  \\nFacility = Application  \\nSymbolicName = GENERIC_INFO_MESSAGE_ID_1002  \\nLanguage=English  \\nMy generic information message in English, for message id 1002.  \\n.  \\n  \\nMessageId = 1003  \\nSeverity = Warning  \\nFacility = Application  \\nSymbolicName = GENERIC_WARNING_MESSAGE_ID_1003  \\nLanguage=English  \\nMy generic warning message in English, for message id 1003, called from %1.  \\n.  \\n  \\nMessageId = 1004  \\nSeverity = Success  \\nFacility = Application  \\nSymbolicName = UPDATE_CYCLE_COMPLETE_MESSAGE_ID_1004  \\nLanguage=English  \\nThe update cycle is complete for %%5002.  \\n.  \\n  \\nMessageId = 1005  \\nSeverity = Warning  \\nFacility = Application  \\nSymbolicName = SERVER_CONNECTION_DOWN_MESSAGE_ID_1005  \\nLanguage=English  \\nThe refresh operation did not complete because the connection to server %1 could not be established.  \\n.  \\n  \\n; // - Event log display name -  \\n; // ********************************************************  \\n  \\nMessageId = 5001  \\nSeverity = Success  \\nFacility = Application  \\nSymbolicName = EVENT_LOG_DISPLAY_NAME_MSGID  \\nLanguage=English  \\nSample Event Log  \\n.  \\n  \\n; // - Event message parameters -  \\n; //   Language independent insertion strings  \\n; // ********************************************************  \\n  \\nMessageId = 5002  \\nSeverity = Success  \\nFacility = Application  \\nSymbolicName = EVENT_LOG_SERVICE_NAME_MSGID  \\nLanguage=English  \\nSVC_UPDATE.EXE  \\n.  \\n```\"\n  syntax:\n    content: >-\n      [System.ComponentModel.TypeConverter(\"System.Diagnostics.Design.StringValueConverter, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\")]\n\n      [System.Runtime.InteropServices.ComVisible(false)]\n\n      public string MessageResourceFile { get; set; }\n    return:\n      type: System.String\n      description: The path of the message resource file. The default is an empty string (\"\").\n  overload: System.Diagnostics.EventLogInstaller.MessageResourceFile*\n  exceptions: []\n  attributes:\n  - type: System.ComponentModel.TypeConverterAttribute\n  - type: System.Runtime.InteropServices.ComVisibleAttribute\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics/EventLogInstaller.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Diagnostics.EventLogInstaller.ParameterResourceFile\n  commentId: P:System.Diagnostics.EventLogInstaller.ParameterResourceFile\n  id: ParameterResourceFile\n  parent: System.Diagnostics.EventLogInstaller\n  langs:\n  - csharp\n  name: ParameterResourceFile\n  nameWithType: EventLogInstaller.ParameterResourceFile\n  fullName: EventLogInstaller.ParameterResourceFile\n  type: Property\n  assemblies:\n  - System.Configuration.Install\n  namespace: System.Diagnostics\n  summary: Gets or sets the path of the resource file that contains message parameter strings for the source.\n  remarks: \"Use the <xref:System.Diagnostics.EventLogInstaller.ParameterResourceFile%2A> property to configure an event log source to write localized event messages with inserted parameter strings. Each localized event message specified in the <xref:System.Diagnostics.EventLogInstaller.MessageResourceFile%2A> property can contain placeholders for insertion strings. These placeholders are used to specify the position and resource identifier for a language-independent string within the event message. The Event Viewer replaces the placeholders with the corresponding strings from the <xref:System.Diagnostics.EventLogInstaller.ParameterResourceFile%2A> and formats the event log message for the localized event entry.  \\n  \\n For example, the following section of a message text file defines a string with a parameter placeholder:  \\n  \\n```  \\n  \\nMessageId = 1501  \\nSeverity = Success  \\nFacility = Application  \\nSymbolicName = COMPONENT_STARTING  \\nLanguage=English  \\nComponent %%6050 is starting.  \\n.  \\n```  \\n  \\n Within the parameter resource file, the insertion string must be defined with the resource identifier that corresponds to the placeholder, as shown below:  \\n  \\n```  \\nMessageId = 6050  \\nSeverity = Success  \\nFacility = Application  \\nSymbolicName = COMPONENT_NAME_MSGID  \\nLanguage=English  \\nTRIGGER.EXE  \\n.  \\n```  \\n  \\n The event source must be configured either for writing localized entries or for writing direct strings. Use the <xref:System.Diagnostics.EventLog.WriteEvent%2A> method to write localized entries for a source configured with a message resource file.  \\n  \\n If your application writes event message strings directly to the event log, or if your <xref:System.Diagnostics.EventLogInstaller.MessageResourceFile%2A> does not contain messages with parameter insertion placeholders, do not set the <xref:System.Diagnostics.EventLogInstaller.ParameterResourceFile%2A> property.  \\n  \\n For details about defining event messages and building event resource files, see the \\\"Message Compiler\\\" topic in the Platform SDK documentation at [http://msdn.microsoft.com](http://msdn.microsoft.com/).\"\n  example:\n  - \"The following code example sets the installation properties for a new event source. The code example sets the event source name, event log name, and resource file for localized event text.  \\n  \\n [!code-cpp[EventLogInstaller_Resources#1](~/samples/snippets/cpp/VS_Snippets_CLR/eventlogInstaller_Resources/CPP/source.cpp#1)]\\n [!code-csharp[EventLogInstaller_Resources#1](~/samples/snippets/csharp/VS_Snippets_CLR/eventlogInstaller_Resources/CS/source.cs#1)]\\n [!code-vb[EventLogInstaller_Resources#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/eventlogInstaller_Resources/VB/source.vb#1)]  \\n  \\n The code example uses the following message text file, built into the resource library EventLogMsgs.dll. A message text file is the source from which the message resource file is created. The message text file defines the resource identifiers and text for the category, event message, and parameter insertion strings. Specifically, the message defined for resource identifier 1004 uses a placeholder for a parameter string defined for resource identifier 5002.  \\n  \\n```  \\n; // EventLogMsgs.mc  \\n; // ********************************************************  \\n  \\n; // Use the following commands to build this file:  \\n  \\n; //   mc -s EventLogMsgs.mc  \\n; //   rc EventLogMsgs.rc  \\n; //   link /DLL /SUBSYSTEM:WINDOWS /NOENTRY /MACHINE:x86 EventLogMsgs.Res   \\n; // ********************************************************  \\n  \\n; // - Event categories -  \\n; // Categories must be numbered consecutively starting at 1.  \\n; // ********************************************************  \\n  \\nMessageId=0x1  \\nSeverity=Success  \\nSymbolicName=INSTALL_CATEGORY  \\nLanguage=English  \\nInstallation  \\n.  \\n  \\nMessageId=0x2  \\nSeverity=Success  \\nSymbolicName=QUERY_CATEGORY  \\nLanguage=English  \\nDatabase Query  \\n.  \\n  \\nMessageId=0x3  \\nSeverity=Success  \\nSymbolicName=REFRESH_CATEGORY  \\nLanguage=English  \\nData Refresh  \\n.  \\n  \\n; // - Event messages -  \\n; // *********************************  \\n  \\nMessageId = 1000  \\nSeverity = Success  \\nFacility = Application  \\nSymbolicName = AUDIT_SUCCESS_MESSAGE_ID_1000  \\nLanguage=English  \\nMy application message text, in English, for message id 1000, called from %1.  \\n.  \\n  \\nMessageId = 1001  \\nSeverity = Warning  \\nFacility = Application  \\nSymbolicName = AUDIT_FAILED_MESSAGE_ID_1001  \\nLanguage=English  \\nMy application message text, in English, for message id 1001, called from %1.  \\n.  \\n  \\nMessageId = 1002  \\nSeverity = Success  \\nFacility = Application  \\nSymbolicName = GENERIC_INFO_MESSAGE_ID_1002  \\nLanguage=English  \\nMy generic information message in English, for message id 1002.  \\n.  \\n  \\nMessageId = 1003  \\nSeverity = Warning  \\nFacility = Application  \\nSymbolicName = GENERIC_WARNING_MESSAGE_ID_1003  \\nLanguage=English  \\nMy generic warning message in English, for message id 1003, called from %1.  \\n.  \\n  \\nMessageId = 1004  \\nSeverity = Success  \\nFacility = Application  \\nSymbolicName = UPDATE_CYCLE_COMPLETE_MESSAGE_ID_1004  \\nLanguage=English  \\nThe update cycle is complete for %%5002.  \\n.  \\n  \\nMessageId = 1005  \\nSeverity = Warning  \\nFacility = Application  \\nSymbolicName = SERVER_CONNECTION_DOWN_MESSAGE_ID_1005  \\nLanguage=English  \\nThe refresh operation did not complete because the connection to server %1 could not be established.  \\n.  \\n  \\n; // - Event log display name -  \\n; // ********************************************************  \\n  \\nMessageId = 5001  \\nSeverity = Success  \\nFacility = Application  \\nSymbolicName = EVENT_LOG_DISPLAY_NAME_MSGID  \\nLanguage=English  \\nSample Event Log  \\n.  \\n  \\n; // - Event message parameters -  \\n; //   Language independent insertion strings  \\n; // ********************************************************  \\n  \\nMessageId = 5002  \\nSeverity = Success  \\nFacility = Application  \\nSymbolicName = EVENT_LOG_SERVICE_NAME_MSGID  \\nLanguage=English  \\nSVC_UPDATE.EXE  \\n.  \\n```\"\n  syntax:\n    content: >-\n      [System.ComponentModel.TypeConverter(\"System.Diagnostics.Design.StringValueConverter, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\")]\n\n      [System.Runtime.InteropServices.ComVisible(false)]\n\n      public string ParameterResourceFile { get; set; }\n    return:\n      type: System.String\n      description: The path of the message parameter resource file. The default is an empty string (\"\").\n  overload: System.Diagnostics.EventLogInstaller.ParameterResourceFile*\n  exceptions: []\n  attributes:\n  - type: System.ComponentModel.TypeConverterAttribute\n  - type: System.Runtime.InteropServices.ComVisibleAttribute\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics/EventLogInstaller.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Diagnostics.EventLogInstaller.Rollback(System.Collections.IDictionary)\n  commentId: M:System.Diagnostics.EventLogInstaller.Rollback(System.Collections.IDictionary)\n  id: Rollback(System.Collections.IDictionary)\n  parent: System.Diagnostics.EventLogInstaller\n  langs:\n  - csharp\n  name: Rollback(IDictionary)\n  nameWithType: EventLogInstaller.Rollback(IDictionary)\n  fullName: EventLogInstaller.Rollback(IDictionary)\n  type: Method\n  assemblies:\n  - System.Configuration.Install\n  namespace: System.Diagnostics\n  summary: Restores the computer to the state it was in before the installation by rolling back the event log information that the installation procedure wrote to the registry.\n  remarks: \"The <xref:System.Diagnostics.EventLogInstaller.Rollback%2A> method undoes the effects of the <xref:System.Diagnostics.EventLogInstaller.Install%2A> method. <xref:System.Diagnostics.EventLogInstaller.Rollback%2A> is called if the installation of any component in the installation project fails. The <xref:System.Diagnostics.EventLogInstaller.Install%2A> method creates or sets the properties for an event log and event source. <xref:System.Diagnostics.EventLogInstaller.Rollback%2A> either deletes the event log and source or resets the properties of a pre-existing source to its pre-installation values.  \\n  \\n Typically, you do not call the methods of the <xref:System.Diagnostics.EventLogInstaller> from within your code; they are generally called only by the [Installutil.exe (Installer Tool)](~/docs/framework/tools/installutil-exe-installer-tool.md). The tool calls the <xref:System.Diagnostics.EventLogInstaller.Rollback%2A> method, when this or another component has failed to install, to undo any changes that the installation process has already made.  \\n  \\n An application's install routine uses the project installer's <xref:System.Configuration.Install.Installer.Context%2A?displayProperty=fullName> property to automatically maintain information about the components that have already been installed. This state information, which is passed to <xref:System.Diagnostics.EventLogInstaller.Rollback%2A> as the `savedState` parameter, is continuously updated as the tool rolls back each <xref:System.Diagnostics.EventLogInstaller>. Usually, it is not necessary for your code to explicitly modify this state information.\"\n  syntax:\n    content: public override void Rollback (System.Collections.IDictionary savedState);\n    parameters:\n    - id: savedState\n      type: System.Collections.IDictionary\n      description: An <xref href=\"System.Collections.IDictionary\"></xref> that contains the pre-installation state of the computer.\n  overload: System.Diagnostics.EventLogInstaller.Rollback*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics/EventLogInstaller.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Diagnostics.EventLogInstaller.Source\n  commentId: P:System.Diagnostics.EventLogInstaller.Source\n  id: Source\n  parent: System.Diagnostics.EventLogInstaller\n  langs:\n  - csharp\n  name: Source\n  nameWithType: EventLogInstaller.Source\n  fullName: EventLogInstaller.Source\n  type: Property\n  assemblies:\n  - System.Configuration.Install\n  namespace: System.Diagnostics\n  summary: Gets or sets the source name to register with the log.\n  remarks: \"The event source indicates what logs the event. It is often the name of the application, or the name of a component within a large application.  \\n  \\n The installer uses the value of the <xref:System.Diagnostics.EventLogInstaller.Source%2A> property to register your application with the event log as a valid source of entries. A new source name cannot match an existing source name or an existing event log name. Each source can only write to one event log at a time; however, your application can use multiple sources to write to multiple event logs. For example, your application might require multiple sources configured for different event logs or different resource files.  \\n  \\n Applications and services should write to the Application log or a custom log. Device drivers should write to the System log. If you do not specify a log name before the installer runs, the installer registers your source to the Application log. If you specify the name of a log that does not exist, the system registers the <xref:System.Diagnostics.EventLogInstaller.Source%2A> to that log, but the log is not created until the first entry is written to it.  \\n  \\n Use <xref:System.Diagnostics.EventLogInstaller> to register a new source for a new or existing event log; do not use <xref:System.Diagnostics.EventLogInstaller> to change an existing source. The <xref:System.Diagnostics.EventLogInstaller> class does not modify the configuration properties of an existing source to match the specified installation properties. The <xref:System.Diagnostics.EventLogInstaller.Install%2A> method throws an exception if the <xref:System.Diagnostics.EventLogInstaller.Source%2A> property matches a source name that is registered for a different event log on the computer. The <xref:System.Diagnostics.EventLogInstaller.Install%2A> method does not register the source if the <xref:System.Diagnostics.EventLogInstaller.Source%2A> property matches a source name that is already registered for the same event log specified in the <xref:System.Diagnostics.EventLogInstaller.Log%2A> property.  \\n  \\n For more detailed information about the behaviors of event logs and sources, see the <xref:System.Diagnostics.EventLog> class documentation for the <xref:System.Diagnostics.EventLog.Log%2A> and <xref:System.Diagnostics.EventLog.Source%2A> properties.\"\n  syntax:\n    content: >-\n      [System.ComponentModel.TypeConverter(\"System.Diagnostics.Design.StringValueConverter, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\")]\n\n      public string Source { get; set; }\n    return:\n      type: System.String\n      description: The name to register with the event log as a source of entries. The default is an empty string (\"\").\n  overload: System.Diagnostics.EventLogInstaller.Source*\n  exceptions: []\n  attributes:\n  - type: System.ComponentModel.TypeConverterAttribute\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics/EventLogInstaller.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Diagnostics.EventLogInstaller.Uninstall(System.Collections.IDictionary)\n  commentId: M:System.Diagnostics.EventLogInstaller.Uninstall(System.Collections.IDictionary)\n  id: Uninstall(System.Collections.IDictionary)\n  parent: System.Diagnostics.EventLogInstaller\n  langs:\n  - csharp\n  name: Uninstall(IDictionary)\n  nameWithType: EventLogInstaller.Uninstall(IDictionary)\n  fullName: EventLogInstaller.Uninstall(IDictionary)\n  type: Method\n  assemblies:\n  - System.Configuration.Install\n  namespace: System.Diagnostics\n  summary: Removes an installation by removing event log information from the registry.\n  remarks: \"If the <xref:System.Diagnostics.EventLogInstaller.UninstallAction%2A> property value is `Remove`, the <xref:System.Diagnostics.EventLogInstaller.Uninstall%2A> method deletes the source and the associated log that the installer created if the <xref:System.Diagnostics.EventLogInstaller.Log%2A> and <xref:System.Diagnostics.EventLogInstaller.Source%2A> properties specified the creation of a new event log and source.  \\n  \\n Typically, you do not call the methods of the <xref:System.Diagnostics.EventLogInstaller> from within your code; they are generally called only by the [Installutil.exe (Installer Tool)](~/docs/framework/tools/installutil-exe-installer-tool.md) in uninstall mode. The tool automatically calls the <xref:System.Diagnostics.EventLogInstaller.Uninstall%2A> method to restore the parts of the system that were affected by the installation to their pre-installation states. This includes deleting registry information that is associated with the event log being uninstalled.  \\n  \\n An application's uninstall routine uses the project installer's <xref:System.Configuration.Install.Installer.Context%2A?displayProperty=fullName> property to automatically maintain information about the components that have already been uninstalled. This state information, which is passed to <xref:System.Diagnostics.EventLogInstaller.Uninstall%2A> as the `savedState` parameter, is continuously updated as the tool uninstalls each <xref:System.Diagnostics.EventLogInstaller>. Usually, it is not necessary for your code to explicitly modify this state information.\"\n  syntax:\n    content: public override void Uninstall (System.Collections.IDictionary savedState);\n    parameters:\n    - id: savedState\n      type: System.Collections.IDictionary\n      description: An <xref href=\"System.Collections.IDictionary\"></xref> that contains the pre-installation state of the computer.\n  overload: System.Diagnostics.EventLogInstaller.Uninstall*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics/EventLogInstaller.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Diagnostics.EventLogInstaller.UninstallAction\n  commentId: P:System.Diagnostics.EventLogInstaller.UninstallAction\n  id: UninstallAction\n  parent: System.Diagnostics.EventLogInstaller\n  langs:\n  - csharp\n  name: UninstallAction\n  nameWithType: EventLogInstaller.UninstallAction\n  fullName: EventLogInstaller.UninstallAction\n  type: Property\n  assemblies:\n  - System.Configuration.Install\n  namespace: System.Diagnostics\n  summary: Gets or sets a value that indicates whether the [Installutil.exe (Installer Tool)](~/docs/framework/tools/installutil-exe-installer-tool.md) should remove the event log or leave it in its installed state at uninstall time.\n  remarks: When you install an event log, you can optionally connect it to an existing log. If you do so, you must decide whether the log should return to its pre-installation state, or remain in its current, post-installation state. If you elect to return the event log to its pre-installation state, changes to the event log entries at installation are not restored. You can reset only the event log properties that are associated with the <xref:System.Diagnostics.EventLogInstaller> to their pre-installation values.\n  syntax:\n    content: public System.Configuration.Install.UninstallAction UninstallAction { get; set; }\n    return:\n      type: System.Configuration.Install.UninstallAction\n      description: One of the <xref href=\"System.Configuration.Install.UninstallAction\"></xref> values that indicates what state to leave the event log in when the <xref href=\"System.Diagnostics.EventLog\"></xref> is uninstalled. The default is `Remove`.\n  overload: System.Diagnostics.EventLogInstaller.UninstallAction*\n  exceptions:\n  - type: System.ComponentModel.InvalidEnumArgumentException\n    commentId: T:System.ComponentModel.InvalidEnumArgumentException\n    description: <xref href=\"System.Diagnostics.EventLogInstaller.UninstallAction\"></xref> contains an invalid value. The only valid values for this property are `Remove` and `NoAction`.\n  attributes: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics/EventLogInstaller.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\nreferences:\n- uid: System.Configuration.Install.ComponentInstaller\n  parent: System.Configuration.Install\n  isExternal: false\n  name: ComponentInstaller\n  nameWithType: ComponentInstaller\n  fullName: System.Configuration.Install.ComponentInstaller\n- uid: System.ArgumentException\n  parent: System\n  isExternal: false\n  name: ArgumentException\n  nameWithType: ArgumentException\n  fullName: System.ArgumentException\n- uid: System.PlatformNotSupportedException\n  parent: System\n  isExternal: false\n  name: PlatformNotSupportedException\n  nameWithType: PlatformNotSupportedException\n  fullName: System.PlatformNotSupportedException\n- uid: System.ComponentModel.InvalidEnumArgumentException\n  parent: System.ComponentModel\n  isExternal: false\n  name: InvalidEnumArgumentException\n  nameWithType: InvalidEnumArgumentException\n  fullName: System.ComponentModel.InvalidEnumArgumentException\n- uid: System.Diagnostics.EventLogInstaller.#ctor\n  parent: System.Diagnostics.EventLogInstaller\n  isExternal: false\n  name: EventLogInstaller()\n  nameWithType: EventLogInstaller.EventLogInstaller()\n  fullName: EventLogInstaller.EventLogInstaller()\n- uid: System.Diagnostics.EventLogInstaller.CategoryCount\n  parent: System.Diagnostics.EventLogInstaller\n  isExternal: false\n  name: CategoryCount\n  nameWithType: EventLogInstaller.CategoryCount\n  fullName: EventLogInstaller.CategoryCount\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Diagnostics.EventLogInstaller.CategoryResourceFile\n  parent: System.Diagnostics.EventLogInstaller\n  isExternal: false\n  name: CategoryResourceFile\n  nameWithType: EventLogInstaller.CategoryResourceFile\n  fullName: EventLogInstaller.CategoryResourceFile\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Diagnostics.EventLogInstaller.CopyFromComponent(System.ComponentModel.IComponent)\n  parent: System.Diagnostics.EventLogInstaller\n  isExternal: false\n  name: CopyFromComponent(IComponent)\n  nameWithType: EventLogInstaller.CopyFromComponent(IComponent)\n  fullName: EventLogInstaller.CopyFromComponent(IComponent)\n- uid: System.ComponentModel.IComponent\n  parent: System.ComponentModel\n  isExternal: false\n  name: IComponent\n  nameWithType: IComponent\n  fullName: System.ComponentModel.IComponent\n- uid: System.Diagnostics.EventLogInstaller.Install(System.Collections.IDictionary)\n  parent: System.Diagnostics.EventLogInstaller\n  isExternal: false\n  name: Install(IDictionary)\n  nameWithType: EventLogInstaller.Install(IDictionary)\n  fullName: EventLogInstaller.Install(IDictionary)\n- uid: System.Collections.IDictionary\n  parent: System.Collections\n  isExternal: false\n  name: IDictionary\n  nameWithType: IDictionary\n  fullName: System.Collections.IDictionary\n- uid: System.Diagnostics.EventLogInstaller.IsEquivalentInstaller(System.Configuration.Install.ComponentInstaller)\n  parent: System.Diagnostics.EventLogInstaller\n  isExternal: false\n  name: IsEquivalentInstaller(ComponentInstaller)\n  nameWithType: EventLogInstaller.IsEquivalentInstaller(ComponentInstaller)\n  fullName: EventLogInstaller.IsEquivalentInstaller(ComponentInstaller)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Diagnostics.EventLogInstaller.Log\n  parent: System.Diagnostics.EventLogInstaller\n  isExternal: false\n  name: Log\n  nameWithType: EventLogInstaller.Log\n  fullName: EventLogInstaller.Log\n- uid: System.Diagnostics.EventLogInstaller.MessageResourceFile\n  parent: System.Diagnostics.EventLogInstaller\n  isExternal: false\n  name: MessageResourceFile\n  nameWithType: EventLogInstaller.MessageResourceFile\n  fullName: EventLogInstaller.MessageResourceFile\n- uid: System.Diagnostics.EventLogInstaller.ParameterResourceFile\n  parent: System.Diagnostics.EventLogInstaller\n  isExternal: false\n  name: ParameterResourceFile\n  nameWithType: EventLogInstaller.ParameterResourceFile\n  fullName: EventLogInstaller.ParameterResourceFile\n- uid: System.Diagnostics.EventLogInstaller.Rollback(System.Collections.IDictionary)\n  parent: System.Diagnostics.EventLogInstaller\n  isExternal: false\n  name: Rollback(IDictionary)\n  nameWithType: EventLogInstaller.Rollback(IDictionary)\n  fullName: EventLogInstaller.Rollback(IDictionary)\n- uid: System.Diagnostics.EventLogInstaller.Source\n  parent: System.Diagnostics.EventLogInstaller\n  isExternal: false\n  name: Source\n  nameWithType: EventLogInstaller.Source\n  fullName: EventLogInstaller.Source\n- uid: System.Diagnostics.EventLogInstaller.Uninstall(System.Collections.IDictionary)\n  parent: System.Diagnostics.EventLogInstaller\n  isExternal: false\n  name: Uninstall(IDictionary)\n  nameWithType: EventLogInstaller.Uninstall(IDictionary)\n  fullName: EventLogInstaller.Uninstall(IDictionary)\n- uid: System.Diagnostics.EventLogInstaller.UninstallAction\n  parent: System.Diagnostics.EventLogInstaller\n  isExternal: false\n  name: UninstallAction\n  nameWithType: EventLogInstaller.UninstallAction\n  fullName: EventLogInstaller.UninstallAction\n- uid: System.Configuration.Install.UninstallAction\n  parent: System.Configuration.Install\n  isExternal: false\n  name: UninstallAction\n  nameWithType: UninstallAction\n  fullName: System.Configuration.Install.UninstallAction\n- uid: System.Diagnostics.EventLogInstaller.#ctor*\n  parent: System.Diagnostics.EventLogInstaller\n  isExternal: false\n  name: EventLogInstaller\n  nameWithType: EventLogInstaller.EventLogInstaller\n  fullName: EventLogInstaller.EventLogInstaller\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics/EventLogInstaller.xml\n- uid: System.Diagnostics.EventLogInstaller.CategoryCount*\n  parent: System.Diagnostics.EventLogInstaller\n  isExternal: false\n  name: CategoryCount\n  nameWithType: EventLogInstaller.CategoryCount\n  fullName: EventLogInstaller.CategoryCount\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics/EventLogInstaller.xml\n- uid: System.Diagnostics.EventLogInstaller.CategoryResourceFile*\n  parent: System.Diagnostics.EventLogInstaller\n  isExternal: false\n  name: CategoryResourceFile\n  nameWithType: EventLogInstaller.CategoryResourceFile\n  fullName: EventLogInstaller.CategoryResourceFile\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics/EventLogInstaller.xml\n- uid: System.Diagnostics.EventLogInstaller.CopyFromComponent*\n  parent: System.Diagnostics.EventLogInstaller\n  isExternal: false\n  name: CopyFromComponent\n  nameWithType: EventLogInstaller.CopyFromComponent\n  fullName: EventLogInstaller.CopyFromComponent\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics/EventLogInstaller.xml\n- uid: System.Diagnostics.EventLogInstaller.Install*\n  parent: System.Diagnostics.EventLogInstaller\n  isExternal: false\n  name: Install\n  nameWithType: EventLogInstaller.Install\n  fullName: EventLogInstaller.Install\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics/EventLogInstaller.xml\n- uid: System.Diagnostics.EventLogInstaller.IsEquivalentInstaller*\n  parent: System.Diagnostics.EventLogInstaller\n  isExternal: false\n  name: IsEquivalentInstaller\n  nameWithType: EventLogInstaller.IsEquivalentInstaller\n  fullName: EventLogInstaller.IsEquivalentInstaller\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics/EventLogInstaller.xml\n- uid: System.Diagnostics.EventLogInstaller.Log*\n  parent: System.Diagnostics.EventLogInstaller\n  isExternal: false\n  name: Log\n  nameWithType: EventLogInstaller.Log\n  fullName: EventLogInstaller.Log\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics/EventLogInstaller.xml\n- uid: System.Diagnostics.EventLogInstaller.MessageResourceFile*\n  parent: System.Diagnostics.EventLogInstaller\n  isExternal: false\n  name: MessageResourceFile\n  nameWithType: EventLogInstaller.MessageResourceFile\n  fullName: EventLogInstaller.MessageResourceFile\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics/EventLogInstaller.xml\n- uid: System.Diagnostics.EventLogInstaller.ParameterResourceFile*\n  parent: System.Diagnostics.EventLogInstaller\n  isExternal: false\n  name: ParameterResourceFile\n  nameWithType: EventLogInstaller.ParameterResourceFile\n  fullName: EventLogInstaller.ParameterResourceFile\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics/EventLogInstaller.xml\n- uid: System.Diagnostics.EventLogInstaller.Rollback*\n  parent: System.Diagnostics.EventLogInstaller\n  isExternal: false\n  name: Rollback\n  nameWithType: EventLogInstaller.Rollback\n  fullName: EventLogInstaller.Rollback\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics/EventLogInstaller.xml\n- uid: System.Diagnostics.EventLogInstaller.Source*\n  parent: System.Diagnostics.EventLogInstaller\n  isExternal: false\n  name: Source\n  nameWithType: EventLogInstaller.Source\n  fullName: EventLogInstaller.Source\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics/EventLogInstaller.xml\n- uid: System.Diagnostics.EventLogInstaller.Uninstall*\n  parent: System.Diagnostics.EventLogInstaller\n  isExternal: false\n  name: Uninstall\n  nameWithType: EventLogInstaller.Uninstall\n  fullName: EventLogInstaller.Uninstall\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics/EventLogInstaller.xml\n- uid: System.Diagnostics.EventLogInstaller.UninstallAction*\n  parent: System.Diagnostics.EventLogInstaller\n  isExternal: false\n  name: UninstallAction\n  nameWithType: EventLogInstaller.UninstallAction\n  fullName: EventLogInstaller.UninstallAction\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics/EventLogInstaller.xml\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: Object.Equals(Object)\n  fullName: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: Object.GetHashCode()\n  fullName: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: false\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n- uid: System.ComponentModel.Component.ToString\n  parent: System.ComponentModel.Component\n  isExternal: false\n  name: ToString()\n  nameWithType: Component.ToString()\n  fullName: Component.ToString()\n- uid: System.MarshalByRefObject.CreateObjRef(System.Type)\n  parent: System.MarshalByRefObject\n  isExternal: false\n  name: CreateObjRef(Type)\n  nameWithType: MarshalByRefObject.CreateObjRef(Type)\n  fullName: MarshalByRefObject.CreateObjRef(Type)\n- uid: System.MarshalByRefObject.GetLifetimeService\n  parent: System.MarshalByRefObject\n  isExternal: false\n  name: GetLifetimeService()\n  nameWithType: MarshalByRefObject.GetLifetimeService()\n  fullName: MarshalByRefObject.GetLifetimeService()\n- uid: System.MarshalByRefObject.InitializeLifetimeService\n  parent: System.MarshalByRefObject\n  isExternal: false\n  name: InitializeLifetimeService()\n  nameWithType: MarshalByRefObject.InitializeLifetimeService()\n  fullName: MarshalByRefObject.InitializeLifetimeService()\n- uid: System.MarshalByRefObject.MemberwiseClone(System.Boolean)\n  parent: System.MarshalByRefObject\n  isExternal: false\n  name: MemberwiseClone(Boolean)\n  nameWithType: MarshalByRefObject.MemberwiseClone(Boolean)\n  fullName: MarshalByRefObject.MemberwiseClone(Boolean)\n- uid: System.ComponentModel.Component.CanRaiseEvents\n  parent: System.ComponentModel.Component\n  isExternal: false\n  name: CanRaiseEvents\n  nameWithType: Component.CanRaiseEvents\n  fullName: Component.CanRaiseEvents\n- uid: System.ComponentModel.Component.Container\n  parent: System.ComponentModel.Component\n  isExternal: false\n  name: Container\n  nameWithType: Component.Container\n  fullName: Component.Container\n- uid: System.ComponentModel.Component.DesignMode\n  parent: System.ComponentModel.Component\n  isExternal: false\n  name: DesignMode\n  nameWithType: Component.DesignMode\n  fullName: Component.DesignMode\n- uid: System.ComponentModel.Component.Dispose\n  parent: System.ComponentModel.Component\n  isExternal: false\n  name: Dispose()\n  nameWithType: Component.Dispose()\n  fullName: Component.Dispose()\n- uid: System.ComponentModel.Component.Dispose(System.Boolean)\n  parent: System.ComponentModel.Component\n  isExternal: false\n  name: Dispose(Boolean)\n  nameWithType: Component.Dispose(Boolean)\n  fullName: Component.Dispose(Boolean)\n- uid: System.ComponentModel.Component.Disposed\n  parent: System.ComponentModel.Component\n  isExternal: false\n  name: Disposed\n  nameWithType: Component.Disposed\n  fullName: Component.Disposed\n- uid: System.ComponentModel.Component.Events\n  parent: System.ComponentModel.Component\n  isExternal: false\n  name: Events\n  nameWithType: Component.Events\n  fullName: Component.Events\n- uid: System.ComponentModel.Component.GetService(System.Type)\n  parent: System.ComponentModel.Component\n  isExternal: false\n  name: GetService(Type)\n  nameWithType: Component.GetService(Type)\n  fullName: Component.GetService(Type)\n- uid: System.ComponentModel.Component.Site\n  parent: System.ComponentModel.Component\n  isExternal: false\n  name: Site\n  nameWithType: Component.Site\n  fullName: Component.Site\n- uid: System.Configuration.Install.Installer.AfterInstall\n  parent: System.Configuration.Install.Installer\n  isExternal: false\n  name: AfterInstall\n  nameWithType: Installer.AfterInstall\n  fullName: Installer.AfterInstall\n- uid: System.Configuration.Install.Installer.AfterRollback\n  parent: System.Configuration.Install.Installer\n  isExternal: false\n  name: AfterRollback\n  nameWithType: Installer.AfterRollback\n  fullName: Installer.AfterRollback\n- uid: System.Configuration.Install.Installer.AfterUninstall\n  parent: System.Configuration.Install.Installer\n  isExternal: false\n  name: AfterUninstall\n  nameWithType: Installer.AfterUninstall\n  fullName: Installer.AfterUninstall\n- uid: System.Configuration.Install.Installer.BeforeInstall\n  parent: System.Configuration.Install.Installer\n  isExternal: false\n  name: BeforeInstall\n  nameWithType: Installer.BeforeInstall\n  fullName: Installer.BeforeInstall\n- uid: System.Configuration.Install.Installer.BeforeRollback\n  parent: System.Configuration.Install.Installer\n  isExternal: false\n  name: BeforeRollback\n  nameWithType: Installer.BeforeRollback\n  fullName: Installer.BeforeRollback\n- uid: System.Configuration.Install.Installer.BeforeUninstall\n  parent: System.Configuration.Install.Installer\n  isExternal: false\n  name: BeforeUninstall\n  nameWithType: Installer.BeforeUninstall\n  fullName: Installer.BeforeUninstall\n- uid: System.Configuration.Install.Installer.Commit(System.Collections.IDictionary)\n  parent: System.Configuration.Install.Installer\n  isExternal: false\n  name: Commit(IDictionary)\n  nameWithType: Installer.Commit(IDictionary)\n  fullName: Installer.Commit(IDictionary)\n- uid: System.Configuration.Install.Installer.Committed\n  parent: System.Configuration.Install.Installer\n  isExternal: false\n  name: Committed\n  nameWithType: Installer.Committed\n  fullName: Installer.Committed\n- uid: System.Configuration.Install.Installer.Committing\n  parent: System.Configuration.Install.Installer\n  isExternal: false\n  name: Committing\n  nameWithType: Installer.Committing\n  fullName: Installer.Committing\n- uid: System.Configuration.Install.Installer.Context\n  parent: System.Configuration.Install.Installer\n  isExternal: false\n  name: Context\n  nameWithType: Installer.Context\n  fullName: Installer.Context\n- uid: System.Configuration.Install.Installer.HelpText\n  parent: System.Configuration.Install.Installer\n  isExternal: false\n  name: HelpText\n  nameWithType: Installer.HelpText\n  fullName: Installer.HelpText\n- uid: System.Configuration.Install.Installer.Installers\n  parent: System.Configuration.Install.Installer\n  isExternal: false\n  name: Installers\n  nameWithType: Installer.Installers\n  fullName: Installer.Installers\n- uid: System.Configuration.Install.Installer.OnAfterInstall(System.Collections.IDictionary)\n  parent: System.Configuration.Install.Installer\n  isExternal: false\n  name: OnAfterInstall(IDictionary)\n  nameWithType: Installer.OnAfterInstall(IDictionary)\n  fullName: Installer.OnAfterInstall(IDictionary)\n- uid: System.Configuration.Install.Installer.OnAfterRollback(System.Collections.IDictionary)\n  parent: System.Configuration.Install.Installer\n  isExternal: false\n  name: OnAfterRollback(IDictionary)\n  nameWithType: Installer.OnAfterRollback(IDictionary)\n  fullName: Installer.OnAfterRollback(IDictionary)\n- uid: System.Configuration.Install.Installer.OnAfterUninstall(System.Collections.IDictionary)\n  parent: System.Configuration.Install.Installer\n  isExternal: false\n  name: OnAfterUninstall(IDictionary)\n  nameWithType: Installer.OnAfterUninstall(IDictionary)\n  fullName: Installer.OnAfterUninstall(IDictionary)\n- uid: System.Configuration.Install.Installer.OnBeforeInstall(System.Collections.IDictionary)\n  parent: System.Configuration.Install.Installer\n  isExternal: false\n  name: OnBeforeInstall(IDictionary)\n  nameWithType: Installer.OnBeforeInstall(IDictionary)\n  fullName: Installer.OnBeforeInstall(IDictionary)\n- uid: System.Configuration.Install.Installer.OnBeforeRollback(System.Collections.IDictionary)\n  parent: System.Configuration.Install.Installer\n  isExternal: false\n  name: OnBeforeRollback(IDictionary)\n  nameWithType: Installer.OnBeforeRollback(IDictionary)\n  fullName: Installer.OnBeforeRollback(IDictionary)\n- uid: System.Configuration.Install.Installer.OnBeforeUninstall(System.Collections.IDictionary)\n  parent: System.Configuration.Install.Installer\n  isExternal: false\n  name: OnBeforeUninstall(IDictionary)\n  nameWithType: Installer.OnBeforeUninstall(IDictionary)\n  fullName: Installer.OnBeforeUninstall(IDictionary)\n- uid: System.Configuration.Install.Installer.OnCommitted(System.Collections.IDictionary)\n  parent: System.Configuration.Install.Installer\n  isExternal: false\n  name: OnCommitted(IDictionary)\n  nameWithType: Installer.OnCommitted(IDictionary)\n  fullName: Installer.OnCommitted(IDictionary)\n- uid: System.Configuration.Install.Installer.OnCommitting(System.Collections.IDictionary)\n  parent: System.Configuration.Install.Installer\n  isExternal: false\n  name: OnCommitting(IDictionary)\n  nameWithType: Installer.OnCommitting(IDictionary)\n  fullName: Installer.OnCommitting(IDictionary)\n- uid: System.Configuration.Install.Installer.Parent\n  parent: System.Configuration.Install.Installer\n  isExternal: false\n  name: Parent\n  nameWithType: Installer.Parent\n  fullName: Installer.Parent\n"}