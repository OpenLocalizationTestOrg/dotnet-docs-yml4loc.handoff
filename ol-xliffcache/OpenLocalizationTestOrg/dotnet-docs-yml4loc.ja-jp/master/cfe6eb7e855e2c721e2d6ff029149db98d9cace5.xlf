<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-fdd610b" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">cfe6eb7e855e2c721e2d6ff029149db98d9cace5</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">System.Collections.BitArray.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net47</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">c42efb560951cdfd60a23bf839ae8c51e8aa60df</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">05de26566c4af27d21fb115e95dcec2bb342598c</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Manages a compact array of bit values, which are represented as Booleans, where <ph id="ph1">`true`</ph> indicates that the bit is on (1) and <ph id="ph2">`false`</ph> indicates the bit is off (0).</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Collections.BitArray&gt;</ph> class is a collection class in which the capacity is always the same as the count.</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT">
          <source>Elements are added to a <ph id="ph1">&lt;xref:System.Collections.BitArray&gt;</ph> by increasing the <ph id="ph2">&lt;xref:System.Collections.BitArray.Length%2A&gt;</ph> property; elements are deleted by decreasing the <ph id="ph3">&lt;xref:System.Collections.BitArray.Length%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT">
          <source>The size of a <ph id="ph1">&lt;xref:System.Collections.BitArray&gt;</ph> is controlled by the client; indexing past the end of the <ph id="ph2">&lt;xref:System.Collections.BitArray&gt;</ph> throws an <ph id="ph3">&lt;xref:System.ArgumentException&gt;</ph>.The <ph id="ph4">&lt;xref:System.Collections.BitArray&gt;</ph> class provides methods that are not found in other collections, including those that allow multiple elements to be modified at once using a filter, such as <ph id="ph5">&lt;xref:System.Collections.BitArray.And%2A&gt;</ph>, <ph id="ph6">&lt;xref:System.Collections.BitArray.Or%2A&gt;</ph>, <ph id="ph7">&lt;xref:System.Collections.BitArray.Xor%2A&gt;</ph> , <ph id="ph8">&lt;xref:System.Collections.BitArray.Not%2A&gt;</ph>, and <ph id="ph9">&lt;xref:System.Collections.BitArray.SetAll%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Specialized.BitVector32&gt;</ph> class is a structure that provides the same functionality as <ph id="ph2">&lt;xref:System.Collections.BitArray&gt;</ph>, but with faster performance.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Collections.Specialized.BitVector32&gt;</ph> is faster because it is a value type and therefore allocated on the stack, whereas <ph id="ph2">&lt;xref:System.Collections.BitArray&gt;</ph> is a reference type and, therefore, allocated on the heap.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Collections.Specialized.BitVector32?displayProperty=fullName&gt;</ph> can store exactly 32 bits, whereas <ph id="ph2">&lt;xref:System.Collections.BitArray&gt;</ph> can store a variable number of bits.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Collections.Specialized.BitVector32&gt;</ph> stores both bit flags and small integers, thereby making it ideal for data that is not exposed to the user.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT">
          <source>However, if the number of required bit flags is unknown, is variable, or is greater than 32, use <ph id="ph1">&lt;xref:System.Collections.BitArray&gt;</ph> instead.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Collections.BitArray&gt;</ph> is in the <ph id="ph2">&lt;xref:System.Collections&gt;</ph> namespace; <ph id="ph3">&lt;xref:System.Collections.Specialized.BitVector32&gt;</ph> is in the <ph id="ph4">&lt;xref:System.Collections.Specialized&gt;</ph> namespace.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT">
          <source>Elements in this collection can be accessed using an integer index.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT">
          <source>Indexes in this collection are zero-based.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <ph id="ph1">&lt;xref href="System.Collections.BitArray"&gt;&lt;/xref&gt;</ph> class that contains bit values copied from the specified array of Booleans.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT">
          <source>This constructor is an O(<ph id="ph1">`n`</ph>) operation, where <ph id="ph2">`n`</ph> is the number of elements in <ph id="ph3">`values`</ph>.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>An array of Booleans to copy.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;values&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <ph id="ph1">&lt;xref href="System.Collections.BitArray"&gt;&lt;/xref&gt;</ph> class that contains bit values copied from the specified array of bytes.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT">
          <source>The first byte in the array represents bits 0 through 7, the second byte represents bits 8 through 15, and so on.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT">
          <source>The Least Significant Bit of each byte represents the lowest index value: " <ph id="ph1">`bytes`</ph> [0] &amp; 1" represents bit 0, " <ph id="ph2">`bytes`</ph> [0] &amp; 2" represents bit 1, " <ph id="ph3">`bytes`</ph> [0] &amp; 4" represents bit 2, and so on.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT">
          <source>This constructor is an O(<ph id="ph1">`n`</ph>) operation, where <ph id="ph2">`n`</ph> is the number of elements in <ph id="ph3">`bytes`</ph>.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>An array of bytes containing the values to copy, where each byte represents eight consecutive bits.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;bytes&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The length of <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">bytes</ph><ept id="p1">&lt;/code&gt;</ept> is greater than <ph id="ph2">&lt;xref href="System.Int32.MaxValue"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <ph id="ph1">&lt;xref href="System.Collections.BitArray"&gt;&lt;/xref&gt;</ph> class that contains bit values copied from the specified <ph id="ph2">&lt;xref href="System.Collections.BitArray"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT">
          <source>This constructor is an O(<ph id="ph1">`n`</ph>) operation, where <ph id="ph2">`n`</ph> is the number of elements in <ph id="ph3">`bits`</ph>.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Collections.BitArray"&gt;&lt;/xref&gt;</ph> to copy.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;bits&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <ph id="ph1">&lt;xref href="System.Collections.BitArray"&gt;&lt;/xref&gt;</ph> class that can hold the specified number of bit values, which are initially set to <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT">
          <source>This constructor is an O(<ph id="ph1">`n`</ph>) operation, where <ph id="ph2">`n`</ph> is <ph id="ph3">`length`</ph>.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The number of bit values in the new <ph id="ph1">&lt;xref href="System.Collections.BitArray"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;length&lt;/code&gt;</ph> is less than zero.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <ph id="ph1">&lt;xref href="System.Collections.BitArray"&gt;&lt;/xref&gt;</ph> class that contains bit values copied from the specified array of 32-bit integers.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT">
          <source>The number in the first <ph id="ph1">`values`</ph> array element represents bits 0 through 31, the second number in the array represents bits 32 through 63, and so on.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT">
          <source>The Least Significant Bit of each integer represents the lowest index value: " <ph id="ph1">`values`</ph> [0] &amp; 1" represents bit 0, " <ph id="ph2">`values`</ph> [0] &amp; 2" represents bit 1, " <ph id="ph3">`values`</ph> [0] &amp; 4" represents bit 2, and so on.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT">
          <source>This constructor is an O(<ph id="ph1">`n`</ph>) operation, where <ph id="ph2">`n`</ph> is the number of elements in <ph id="ph3">`values`</ph>.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>An array of integers containing the values to copy, where each integer represents 32 consecutive bits.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;values&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>The length of <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">values</ph><ept id="p1">&lt;/code&gt;</ept> is greater than <ph id="ph2">&lt;xref href="System.Int32.MaxValue"&gt;&lt;/xref&gt;</ph></source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <ph id="ph1">&lt;xref href="System.Collections.BitArray"&gt;&lt;/xref&gt;</ph> class that can hold the specified number of bit values, which are initially set to the specified value.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT">
          <source>This constructor is an O(<ph id="ph1">`n`</ph>) operation, where <ph id="ph2">`n`</ph> is <ph id="ph3">`length`</ph>.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>The number of bit values in the new <ph id="ph1">&lt;xref href="System.Collections.BitArray"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>The Boolean value to assign to each bit.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;length&lt;/code&gt;</ph> is less than zero.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Performs the bitwise AND operation between the elements of the current <ph id="ph1">&lt;xref href="System.Collections.BitArray"&gt;&lt;/xref&gt;</ph> object and the corresponding elements in the specified array.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>The current <ph id="ph1">&lt;xref href="System.Collections.BitArray"&gt;&lt;/xref&gt;</ph> object will be modified to store the result of the bitwise AND operation.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT">
          <source>The bitwise AND operation returns <ph id="ph1">`true`</ph> if both operands are <ph id="ph2">`true`</ph>, and returns <ph id="ph3">`false`</ph> if one or both operands are <ph id="ph4">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method is an O(<ph id="ph1">`n`</ph>) operation, where <ph id="ph2">`n`</ph> is <ph id="ph3">&lt;xref:System.Collections.BitArray.Count%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>The array with which to perform the bitwise AND operation.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>An array containing the result of the bitwise AND operation, which is a reference to the current <ph id="ph1">&lt;xref href="System.Collections.BitArray"&gt;&lt;/xref&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;value&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;value&lt;/code&gt;</ph> and the current <ph id="ph2">&lt;xref href="System.Collections.BitArray"&gt;&lt;/xref&gt;</ph> do not have the same number of elements.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Creates a shallow copy of the <ph id="ph1">&lt;xref href="System.Collections.BitArray"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT">
          <source>A shallow copy of a collection copies only the elements of the collection, whether they are reference types or value types, but it does not copy the objects that the references refer to.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT">
          <source>The references in the new collection point to the same objects that the references in the original collection point to.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT">
          <source>In contrast, a deep copy of a collection copies the elements and everything directly or indirectly referenced by the elements.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method is an O(<ph id="ph1">`n`</ph>) operation, where <ph id="ph2">`n`</ph> is <ph id="ph3">&lt;xref:System.Collections.BitArray.Count%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>A shallow copy of the <ph id="ph1">&lt;xref href="System.Collections.BitArray"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Copies the entire <ph id="ph1">&lt;xref href="System.Collections.BitArray"&gt;&lt;/xref&gt;</ph> to a compatible one-dimensional <ph id="ph2">&lt;xref href="System.Array"&gt;&lt;/xref&gt;</ph>, starting at the specified index of the target array.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT">
          <source>The specified array must be of a compatible type.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT">
          <source>Only <ph id="ph1">`bool`</ph>, <ph id="ph2">`int`</ph>, and <ph id="ph3">`byte`</ph> types of arrays are supported.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method uses <ph id="ph1">&lt;xref:System.Array.Copy%2A?displayProperty=fullName&gt;</ph> to copy the elements.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method is an O(<ph id="ph1">`n`</ph>) operation, where <ph id="ph2">`n`</ph> is <ph id="ph3">&lt;xref:System.Collections.BitArray.Count%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>The one-dimensional <ph id="ph1">&lt;xref href="System.Array"&gt;&lt;/xref&gt;</ph> that is the destination of the elements copied from <ph id="ph2">&lt;xref href="System.Collections.BitArray"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Array"&gt;&lt;/xref&gt;</ph> must have zero-based indexing.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>The zero-based index in <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">array</ph><ept id="p1">&lt;/code&gt;</ept> at which copying begins.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;array&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;index&lt;/code&gt;</ph> is less than zero.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;array&lt;/code&gt;</ph> is multidimensional.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>The number of elements in the source <ph id="ph1">&lt;xref href="System.Collections.BitArray"&gt;&lt;/xref&gt;</ph> is greater than the available space from <bpt id="p1">&lt;code&gt;</bpt><ph id="ph2">index</ph><ept id="p1">&lt;/code&gt;</ept> to the end of the destination <bpt id="p2">&lt;code&gt;</bpt><ph id="ph3">array</ph><ept id="p2">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>The type of the source <ph id="ph1">&lt;xref href="System.Collections.BitArray"&gt;&lt;/xref&gt;</ph> cannot be cast automatically to the type of the destination <bpt id="p1">&lt;code&gt;</bpt><ph id="ph2">array</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Gets the number of elements contained in the <ph id="ph1">&lt;xref href="System.Collections.BitArray"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Collections.BitArray.Length%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Collections.BitArray.Count%2A&gt;</ph> return the same value.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Collections.BitArray.Length%2A&gt;</ph> can be set to a specific value, but <ph id="ph2">&lt;xref:System.Collections.BitArray.Count%2A&gt;</ph> is read-only.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT">
          <source>Retrieving the value of this property is an O(1) operation.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>The number of elements contained in the <ph id="ph1">&lt;xref href="System.Collections.BitArray"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>Gets the value of the bit at a specific position in the <ph id="ph1">&lt;xref href="System.Collections.BitArray"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method is an O(1) operation.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>The zero-based index of the value to get.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>The value of the bit at position <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">index</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;index&lt;/code&gt;</ph> is less than zero.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;index&lt;/code&gt;</ph> is greater than or equal to the number of elements in the <ph id="ph2">&lt;xref href="System.Collections.BitArray"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>Returns an enumerator that iterates through the <ph id="ph1">&lt;xref href="System.Collections.BitArray"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`foreach`</ph> statement of the C# language (<ph id="ph2">`for each`</ph> in Visual Basic) hides the complexity of the enumerators.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" extradata="MT">
          <source>Therefore, using <ph id="ph1">`foreach`</ph> is recommended, instead of directly manipulating the enumerator.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" extradata="MT">
          <source>Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" extradata="MT">
          <source>Initially, the enumerator is positioned before the first element in the collection.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Collections.IEnumerator.Reset%2A&gt;</ph> also brings the enumerator back to this position.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" extradata="MT">
          <source>At this position, <ph id="ph1">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> is undefined.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" extradata="MT">
          <source>Therefore, you must call <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> to advance the enumerator to the first element of the collection before reading the value of <ph id="ph2">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> returns the same object until either <ph id="ph2">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> or <ph id="ph3">&lt;xref:System.Collections.IEnumerator.Reset%2A&gt;</ph> is called.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> sets <ph id="ph2">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> to the next element.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> passes the end of the collection, the enumerator is positioned after the last element in the collection and <ph id="ph2">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> returns <ph id="ph3">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" extradata="MT">
          <source>When the enumerator is at this position, subsequent calls to <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> also return <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the last call to <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> returned <ph id="ph2">`false`</ph>, <ph id="ph3">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> is undefined.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" extradata="MT">
          <source>To set <ph id="ph1">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> to the first element of the collection again, you can call <ph id="ph2">&lt;xref:System.Collections.IEnumerator.Reset%2A&gt;</ph> followed by <ph id="ph3">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" extradata="MT">
          <source>An enumerator remains valid as long as the collection remains unchanged.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" extradata="MT">
          <source>If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and its behavior is undefined.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" extradata="MT">
          <source>The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure.</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" extradata="MT">
          <source>To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" extradata="MT">
          <source>To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method is an O(1) operation.</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Collections.IEnumerator"&gt;&lt;/xref&gt;</ph> for the entire <ph id="ph2">&lt;xref href="System.Collections.BitArray"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>Gets a value indicating whether the <ph id="ph1">&lt;xref href="System.Collections.BitArray"&gt;&lt;/xref&gt;</ph> is read-only.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Collections.BitArray&gt;</ph> implements the <ph id="ph2">&lt;xref:System.Collections.BitArray.IsReadOnly%2A&gt;</ph> property because it is required by the <ph id="ph3">&lt;xref:System.Collections.IList?displayProperty=fullName&gt;</ph> interface.</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" extradata="MT">
          <source>A collection that is read-only does not allow the addition, removal, or modification of elements after the collection is created.</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" extradata="MT">
          <source>A collection that is read-only is simply a collection with a wrapper that prevents modifying the collection; therefore, if changes are made to the underlying collection, the read-only collection reflects those changes.</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method is an O(1) operation.</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>This property is always <ph id="ph1">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>Gets a value indicating whether access to the <ph id="ph1">&lt;xref href="System.Collections.BitArray"&gt;&lt;/xref&gt;</ph> is synchronized (thread safe).</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Collections.BitArray&gt;</ph> implements the <ph id="ph2">&lt;xref:System.Collections.BitArray.IsSynchronized%2A&gt;</ph> property because it is required by the <ph id="ph3">&lt;xref:System.Collections.ICollection?displayProperty=fullName&gt;</ph> interface.</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" extradata="MT">
          <source>Enumerating through a collection is intrinsically not a thread-safe procedure.</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" extradata="MT">
          <source>Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception.</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" extradata="MT">
          <source>To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>This property is always <ph id="ph1">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>Gets or sets the value of the bit at a specific position in the <ph id="ph1">&lt;xref href="System.Collections.BitArray"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" extradata="MT">
          <source>This property provides the ability to access a specific element in the collection by using the following syntax: <ph id="ph1">`myCollection[index]`</ph>.</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" extradata="MT">
          <source>The C# language uses the  keyword to define the indexers instead of implementing the <ph id="ph1">&lt;xref:System.Collections.BitArray.Item%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" extradata="MT">
          <source>Visual Basic implements <ph id="ph1">&lt;xref:System.Collections.BitArray.Item%2A&gt;</ph> as a default property, which provides the same indexing functionality.</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" extradata="MT">
          <source>Retrieving the value of this property is an O(1) operation; setting the property is also an O(1) operation.</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>The zero-based index of the value to get or set.</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>The value of the bit at position <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">index</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;index&lt;/code&gt;</ph> is less than zero.</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;index&lt;/code&gt;</ph> is equal to or greater than <ph id="ph2">&lt;xref href="System.Collections.BitArray.Count"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>Gets or sets the number of elements in the <ph id="ph1">&lt;xref href="System.Collections.BitArray"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Collections.BitArray.Length%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Collections.BitArray.Count%2A&gt;</ph> return the same value.</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Collections.BitArray.Length%2A&gt;</ph> can be set to a specific value, but <ph id="ph2">&lt;xref:System.Collections.BitArray.Count%2A&gt;</ph> is read-only.</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">&lt;xref:System.Collections.BitArray.Length%2A&gt;</ph> is set to a value that is less than <ph id="ph2">&lt;xref:System.Collections.BitArray.Count%2A&gt;</ph>, the <ph id="ph3">&lt;xref:System.Collections.BitArray&gt;</ph> is truncated and the elements after the index <ph id="ph4">`value`</ph> -1 are deleted.</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">&lt;xref:System.Collections.BitArray.Length%2A&gt;</ph> is set to a value that is greater than <ph id="ph2">&lt;xref:System.Collections.BitArray.Count%2A&gt;</ph>, the new elements are set to <ph id="ph3">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve" extradata="MT">
          <source>Retrieving the value of this property is an O(1) operation.</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve" extradata="MT">
          <source>Setting this property is an O(<ph id="ph1">`n`</ph>) operation.</source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>The number of elements in the <ph id="ph1">&lt;xref href="System.Collections.BitArray"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>The property is set to a value that is less than zero.</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>Inverts all the bit values in the current <ph id="ph1">&lt;xref href="System.Collections.BitArray"&gt;&lt;/xref&gt;</ph>, so that elements set to <ph id="ph2">`true`</ph> are changed to <ph id="ph3">`false`</ph>, and elements set to <ph id="ph4">`false`</ph> are changed to <ph id="ph5">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method is an O(<ph id="ph1">`n`</ph>) operation, where <ph id="ph2">`n`</ph> is <ph id="ph3">&lt;xref:System.Collections.BitArray.Count%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>The current instance with inverted bit values.</source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>Performs the bitwise OR operation between the elements of the current <ph id="ph1">&lt;xref href="System.Collections.BitArray"&gt;&lt;/xref&gt;</ph> object and the corresponding elements in the specified array.</source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>The current <ph id="ph1">&lt;xref href="System.Collections.BitArray"&gt;&lt;/xref&gt;</ph> object will be modified to store the result of the bitwise OR operation.</source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve" extradata="MT">
          <source>The bitwise OR operation returns <ph id="ph1">`true`</ph> if one or both operands are <ph id="ph2">`true`</ph>, and returns <ph id="ph3">`false`</ph> if both operands are <ph id="ph4">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method is an O(<ph id="ph1">`n`</ph>) operation, where <ph id="ph2">`n`</ph> is <ph id="ph3">&lt;xref:System.Collections.BitArray.Count%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>The array with which to perform the bitwise OR operation.</source>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>An array containing the result of the bitwise OR operation, which is a reference to the current <ph id="ph1">&lt;xref href="System.Collections.BitArray"&gt;&lt;/xref&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;value&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;value&lt;/code&gt;</ph> and the current <ph id="ph2">&lt;xref href="System.Collections.BitArray"&gt;&lt;/xref&gt;</ph> do not have the same number of elements.</source>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>Sets the bit at a specific position in the <ph id="ph1">&lt;xref href="System.Collections.BitArray"&gt;&lt;/xref&gt;</ph> to the specified value.</source>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method is an O(1) operation.</source>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>The zero-based index of the bit to set.</source>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>The Boolean value to assign to the bit.</source>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;index&lt;/code&gt;</ph> is less than zero.</source>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;index&lt;/code&gt;</ph> is greater than or equal to the number of elements in the <ph id="ph2">&lt;xref href="System.Collections.BitArray"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>Sets all bits in the <ph id="ph1">&lt;xref href="System.Collections.BitArray"&gt;&lt;/xref&gt;</ph> to the specified value.</source>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method is an O(<ph id="ph1">`n`</ph>) operation, where <ph id="ph2">`n`</ph> is <ph id="ph3">&lt;xref:System.Collections.BitArray.Count%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>The Boolean value to assign to all bits.</source>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>Gets an object that can be used to synchronize access to the <ph id="ph1">&lt;xref href="System.Collections.BitArray"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve" extradata="MT">
          <source>Derived classes can provide their own synchronized version of the <ph id="ph1">&lt;xref:System.Collections.BitArray&gt;</ph> using the <ph id="ph2">&lt;xref:System.Collections.BitArray.SyncRoot%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve" extradata="MT">
          <source>The synchronizing code must perform operations on the <ph id="ph1">&lt;xref:System.Collections.BitArray.SyncRoot%2A&gt;</ph> of the <ph id="ph2">&lt;xref:System.Collections.BitArray&gt;</ph>, not directly on the <ph id="ph3">&lt;xref:System.Collections.BitArray&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve" extradata="MT">
          <source>This ensures proper operation of collections that are derived from other objects.</source>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve" extradata="MT">
          <source>Specifically, it maintains proper synchronization with other threads that might be simultaneously modifying the <ph id="ph1">&lt;xref:System.Collections.BitArray&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve" extradata="MT">
          <source>Enumerating through a collection is intrinsically not a thread-safe procedure.</source>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve" extradata="MT">
          <source>Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception.</source>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve" extradata="MT">
          <source>To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.</source>
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source>An object that can be used to synchronize access to the <ph id="ph1">&lt;xref href="System.Collections.BitArray"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source>Performs the bitwise exclusive OR operation between the elements of the current <ph id="ph1">&lt;xref href="System.Collections.BitArray"&gt;&lt;/xref&gt;</ph> object against the corresponding elements in the specified array.</source>
        </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source>The current <ph id="ph1">&lt;xref href="System.Collections.BitArray"&gt;&lt;/xref&gt;</ph> object will be modified to store the result of the bitwise exclusive OR operation.</source>
        </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve" extradata="MT">
          <source>The bitwise exclusive OR operation returns <ph id="ph1">`true`</ph> if exactly one operand is <ph id="ph2">`true`</ph>, and returns <ph id="ph3">`false`</ph> if both operands have the same Boolean value.</source>
        </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method is an O(<ph id="ph1">`n`</ph>) operation, where <ph id="ph2">`n`</ph> is <ph id="ph3">&lt;xref:System.Collections.BitArray.Count%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source>The array with which to perform the bitwise exclusive OR operation.</source>
        </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source>An array containing the result of the bitwise exclusive OR operation, which is a reference to the current <ph id="ph1">&lt;xref href="System.Collections.BitArray"&gt;&lt;/xref&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;value&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;value&lt;/code&gt;</ph> and the current <ph id="ph2">&lt;xref href="System.Collections.BitArray"&gt;&lt;/xref&gt;</ph> do not have the same number of elements.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>