{"nodes":[{"content":"Implements a <xref href=\"System.IO.TextReader\"></xref> that reads from a string.","nodes":[{"pos":[0,80],"content":"Implements a <ph id=\"ph1\">&lt;xref href=\"System.IO.TextReader\"&gt;&lt;/xref&gt;</ph> that reads from a string.","source":"Implements a <xref href=\"System.IO.TextReader\"></xref> that reads from a string."}],"pos":[961,1042],"yaml":true},{"content":"<xref:System.IO.StringReader> enables you to read a string synchronously or asynchronously. You can read a character at a time with the <xref:System.IO.StringReader.Read%2A> or the <xref:System.IO.StringReader.ReadAsync%2A> method, a line at a time using the <xref:System.IO.StringReader.ReadLine%2A> or the <xref:System.IO.StringReader.ReadLineAsync%2A> method and an entire string using the <xref:System.IO.StringReader.ReadToEnd%2A> or the <xref:System.IO.StringReader.ReadToEndAsync%2A> method.  \n  \n> [!IMPORTANT]\n>  This type implements the <xref:System.IDisposable> interface. When you have finished using the type, you should dispose of it either directly or indirectly. To dispose of the type directly, call its <xref:System.IDisposable.Dispose%2A> method in a `try`/`catch` block. To dispose of it indirectly, use a language construct such as `using` (in C#) or `Using` (in Visual Basic). For more information, see the \"Using an Object that Implements IDisposable\" section in the <xref:System.IDisposable> interface topic.  \n  \n The following table lists examples of other typical or related I/O tasks.  \n  \n|To do this...|See the example in this topic...|  \n|-------------------|--------------------------------------|  \n|Create a text file.|[How to: Write Text to a File](~/docs/standard/io/how-to-write-text-to-a-file.md)|  \n|Write to a text file.|[How to: Write Text to a File](~/docs/standard/io/how-to-write-text-to-a-file.md)|  \n|Read from a text file.|[How to: Read Text from a File](~/docs/standard/io/how-to-read-text-from-a-file.md)|  \n|Append text to a file.|[How to: Open and Append to a Log File](~/docs/standard/io/how-to-open-and-append-to-a-log-file.md)<br /><br /> <xref:System.IO.File.AppendText%2A?displayProperty=fullName><br /><br /> <xref:System.IO.FileInfo.AppendText%2A?displayProperty=fullName>|  \n|Get the size of a file.|<xref:System.IO.FileInfo.Length%2A?displayProperty=fullName>|  \n|Get the attributes of a file.|<xref:System.IO.File.GetAttributes%2A?displayProperty=fullName>|  \n|Set the attributes of a file.|<xref:System.IO.File.SetAttributes%2A?displayProperty=fullName>|  \n|Determine if a file exists.|<xref:System.IO.File.Exists%2A?displayProperty=fullName>|  \n|Read from a binary file.|[How to: Read and Write to a Newly Created Data File](~/docs/standard/io/how-to-read-and-write-to-a-newly-created-data-file.md)|  \n|Write to a binary file.|[How to: Read and Write to a Newly Created Data File](~/docs/standard/io/how-to-read-and-write-to-a-newly-created-data-file.md)|","nodes":[{"pos":[0,498],"content":"<xref:System.IO.StringReader> enables you to read a string synchronously or asynchronously. You can read a character at a time with the <xref:System.IO.StringReader.Read%2A> or the <xref:System.IO.StringReader.ReadAsync%2A> method, a line at a time using the <xref:System.IO.StringReader.ReadLine%2A> or the <xref:System.IO.StringReader.ReadLineAsync%2A> method and an entire string using the <xref:System.IO.StringReader.ReadToEnd%2A> or the <xref:System.IO.StringReader.ReadToEndAsync%2A> method.","nodes":[{"content":"<xref:System.IO.StringReader> enables you to read a string synchronously or asynchronously. You can read a character at a time with the <xref:System.IO.StringReader.Read%2A> or the <xref:System.IO.StringReader.ReadAsync%2A> method, a line at a time using the <xref:System.IO.StringReader.ReadLine%2A> or the <xref:System.IO.StringReader.ReadLineAsync%2A> method and an entire string using the <xref:System.IO.StringReader.ReadToEnd%2A> or the <xref:System.IO.StringReader.ReadToEndAsync%2A> method.","pos":[0,498],"nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.IO.StringReader&gt;</ph> enables you to read a string synchronously or asynchronously.","pos":[0,91],"source":"<xref:System.IO.StringReader> enables you to read a string synchronously or asynchronously."},{"content":"You can read a character at a time with the <ph id=\"ph1\">&lt;xref:System.IO.StringReader.Read%2A&gt;</ph> or the <ph id=\"ph2\">&lt;xref:System.IO.StringReader.ReadAsync%2A&gt;</ph> method, a line at a time using the <ph id=\"ph3\">&lt;xref:System.IO.StringReader.ReadLine%2A&gt;</ph> or the <ph id=\"ph4\">&lt;xref:System.IO.StringReader.ReadLineAsync%2A&gt;</ph> method and an entire string using the <ph id=\"ph5\">&lt;xref:System.IO.StringReader.ReadToEnd%2A&gt;</ph> or the <ph id=\"ph6\">&lt;xref:System.IO.StringReader.ReadToEndAsync%2A&gt;</ph> method.","pos":[92,498],"source":" You can read a character at a time with the <xref:System.IO.StringReader.Read%2A> or the <xref:System.IO.StringReader.ReadAsync%2A> method, a line at a time using the <xref:System.IO.StringReader.ReadLine%2A> or the <xref:System.IO.StringReader.ReadLineAsync%2A> method and an entire string using the <xref:System.IO.StringReader.ReadToEnd%2A> or the <xref:System.IO.StringReader.ReadToEndAsync%2A> method."}]}]},{"pos":[506,1032],"content":"[!IMPORTANT]\n This type implements the <xref:System.IDisposable> interface. When you have finished using the type, you should dispose of it either directly or indirectly. To dispose of the type directly, call its <xref:System.IDisposable.Dispose%2A> method in a `try`/`catch` block. To dispose of it indirectly, use a language construct such as `using` (in C#) or `Using` (in Visual Basic). For more information, see the \"Using an Object that Implements IDisposable\" section in the <xref:System.IDisposable> interface topic.","leadings":["","> "],"nodes":[{"content":" This type implements the <xref:System.IDisposable> interface. When you have finished using the type, you should dispose of it either directly or indirectly. To dispose of the type directly, call its <xref:System.IDisposable.Dispose%2A> method in a `try`/`catch` block. To dispose of it indirectly, use a language construct such as `using` (in C#) or `Using` (in Visual Basic). For more information, see the \"Using an Object that Implements IDisposable\" section in the <xref:System.IDisposable> interface topic.","pos":[13,524],"nodes":[{"content":"This type implements the <ph id=\"ph1\">&lt;xref:System.IDisposable&gt;</ph> interface.","pos":[1,62],"source":" This type implements the <xref:System.IDisposable> interface."},{"content":"When you have finished using the type, you should dispose of it either directly or indirectly.","pos":[63,157]},{"content":"To dispose of the type directly, call its <ph id=\"ph1\">&lt;xref:System.IDisposable.Dispose%2A&gt;</ph> method in a <ph id=\"ph2\">`try`</ph><ph id=\"ph3\">/</ph><ph id=\"ph4\">`catch`</ph> block.","pos":[158,269],"source":" To dispose of the type directly, call its <xref:System.IDisposable.Dispose%2A> method in a `try`/`catch` block."},{"content":"To dispose of it indirectly, use a language construct such as <ph id=\"ph1\">`using`</ph> (in C#) or <ph id=\"ph2\">`Using`</ph> (in Visual Basic).","pos":[270,377],"source":" To dispose of it indirectly, use a language construct such as `using` (in C#) or `Using` (in Visual Basic)."},{"content":"For more information, see the \"Using an Object that Implements IDisposable\" section in the <ph id=\"ph1\">&lt;xref:System.IDisposable&gt;</ph> interface topic.","pos":[378,511],"source":" For more information, see the \"Using an Object that Implements IDisposable\" section in the <xref:System.IDisposable> interface topic."}]}]},{"pos":[1039,1112],"content":"The following table lists examples of other typical or related I/O tasks.","nodes":[{"content":"The following table lists examples of other typical or related I/O tasks.","pos":[0,73]}]},{"pos":[1119,1132],"content":"To do this...","nodes":[{"content":"To do this...","pos":[0,13]}]},{"pos":[1133,1165],"content":"See the example in this topic...","nodes":[{"content":"See the example in this topic...","pos":[0,32]}]},{"pos":[1233,1252],"content":"Create a text file.","nodes":[{"content":"Create a text file.","pos":[0,19]}]},{"pos":[1253,1334],"content":"<bpt id=\"p1\">[</bpt>How to: Write Text to a File<ept id=\"p1\">](~/docs/standard/io/how-to-write-text-to-a-file.md)</ept>","source":"[How to: Write Text to a File](~/docs/standard/io/how-to-write-text-to-a-file.md)"},{"pos":[1339,1360],"content":"Write to a text file.","nodes":[{"content":"Write to a text file.","pos":[0,21]}]},{"pos":[1361,1442],"content":"<bpt id=\"p1\">[</bpt>How to: Write Text to a File<ept id=\"p1\">](~/docs/standard/io/how-to-write-text-to-a-file.md)</ept>","source":"[How to: Write Text to a File](~/docs/standard/io/how-to-write-text-to-a-file.md)"},{"pos":[1447,1469],"content":"Read from a text file.","nodes":[{"content":"Read from a text file.","pos":[0,22]}]},{"pos":[1470,1553],"content":"<bpt id=\"p1\">[</bpt>How to: Read Text from a File<ept id=\"p1\">](~/docs/standard/io/how-to-read-text-from-a-file.md)</ept>","source":"[How to: Read Text from a File](~/docs/standard/io/how-to-read-text-from-a-file.md)"},{"pos":[1558,1580],"content":"Append text to a file.","nodes":[{"content":"Append text to a file.","pos":[0,22]}]},{"pos":[1581,1830],"content":"[How to: Open and Append to a Log File](~/docs/standard/io/how-to-open-and-append-to-a-log-file.md)<br /><br /> <xref:System.IO.File.AppendText%2A?displayProperty=fullName><br /><br /> <xref:System.IO.FileInfo.AppendText%2A?displayProperty=fullName>","nodes":[{"content":"<bpt id=\"p1\">[</bpt>How to: Open and Append to a Log File<ept id=\"p1\">](~/docs/standard/io/how-to-open-and-append-to-a-log-file.md)</ept>","pos":[0,99],"source":"[How to: Open and Append to a Log File](~/docs/standard/io/how-to-open-and-append-to-a-log-file.md)"},{"content":"<ph id=\"ph1\">&lt;xref:System.IO.File.AppendText%2A?displayProperty=fullName&gt;</ph>","pos":[112,172],"source":" <xref:System.IO.File.AppendText%2A?displayProperty=fullName>"},{"content":"<ph id=\"ph1\">&lt;xref:System.IO.FileInfo.AppendText%2A?displayProperty=fullName&gt;</ph>","pos":[185,249],"source":" <xref:System.IO.FileInfo.AppendText%2A?displayProperty=fullName>"}]},{"pos":[1835,1858],"content":"Get the size of a file.","nodes":[{"content":"Get the size of a file.","pos":[0,23]}]},{"pos":[1859,1919],"content":"<xref:System.IO.FileInfo.Length%2A?displayProperty=fullName>","nodes":[]},{"pos":[1924,1953],"content":"Get the attributes of a file.","nodes":[{"content":"Get the attributes of a file.","pos":[0,29]}]},{"pos":[1954,2017],"content":"<xref:System.IO.File.GetAttributes%2A?displayProperty=fullName>","nodes":[]},{"pos":[2022,2051],"content":"Set the attributes of a file.","nodes":[{"content":"Set the attributes of a file.","pos":[0,29]}]},{"pos":[2052,2115],"content":"<xref:System.IO.File.SetAttributes%2A?displayProperty=fullName>","nodes":[]},{"pos":[2120,2147],"content":"Determine if a file exists.","nodes":[{"content":"Determine if a file exists.","pos":[0,27]}]},{"pos":[2148,2204],"content":"<xref:System.IO.File.Exists%2A?displayProperty=fullName>","nodes":[]},{"pos":[2209,2233],"content":"Read from a binary file.","nodes":[{"content":"Read from a binary file.","pos":[0,24]}]},{"pos":[2234,2361],"content":"<bpt id=\"p1\">[</bpt>How to: Read and Write to a Newly Created Data File<ept id=\"p1\">](~/docs/standard/io/how-to-read-and-write-to-a-newly-created-data-file.md)</ept>","source":"[How to: Read and Write to a Newly Created Data File](~/docs/standard/io/how-to-read-and-write-to-a-newly-created-data-file.md)"},{"pos":[2366,2389],"content":"Write to a binary file.","nodes":[{"content":"Write to a binary file.","pos":[0,23]}]},{"pos":[2390,2517],"content":"<bpt id=\"p1\">[</bpt>How to: Read and Write to a Newly Created Data File<ept id=\"p1\">](~/docs/standard/io/how-to-read-and-write-to-a-newly-created-data-file.md)</ept>","source":"[How to: Read and Write to a Newly Created Data File](~/docs/standard/io/how-to-read-and-write-to-a-newly-created-data-file.md)"}],"pos":[1053,3594],"yaml":true,"extradata":"MT"},{"content":"Initializes a new instance of the <xref href=\"System.IO.StringReader\"></xref> class that reads from the specified string.","nodes":[{"pos":[0,121],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.IO.StringReader\"&gt;&lt;/xref&gt;</ph> class that reads from the specified string.","source":"Initializes a new instance of the <xref href=\"System.IO.StringReader\"></xref> class that reads from the specified string."}],"pos":[6256,6378],"yaml":true},{"content":"The following table lists examples of other typical or related I/O tasks.  \n  \n|To do this...|See the example in this topic...|  \n|-------------------|--------------------------------------|  \n|Create a text file.|[How to: Write Text to a File](~/docs/standard/io/how-to-write-text-to-a-file.md)|  \n|Write to a text file.|[How to: Write Text to a File](~/docs/standard/io/how-to-write-text-to-a-file.md)|  \n|Read from a text file.|[How to: Read Text from a File](~/docs/standard/io/how-to-read-text-from-a-file.md)|  \n|Append text to a file.|[How to: Open and Append to a Log File](~/docs/standard/io/how-to-open-and-append-to-a-log-file.md)<br /><br /> <xref:System.IO.File.AppendText%2A?displayProperty=fullName><br /><br /> <xref:System.IO.FileInfo.AppendText%2A?displayProperty=fullName>|  \n|Get the size of a file.|<xref:System.IO.FileInfo.Length%2A?displayProperty=fullName>|  \n|Get the attributes of a file.|<xref:System.IO.File.GetAttributes%2A?displayProperty=fullName>|  \n|Set the attributes of a file.|<xref:System.IO.File.SetAttributes%2A?displayProperty=fullName>|  \n|Determine if a file exists.|<xref:System.IO.File.Exists%2A?displayProperty=fullName>|  \n|Read from a binary file.|[How to: Read and Write to a Newly Created Data File](~/docs/standard/io/how-to-read-and-write-to-a-newly-created-data-file.md)|  \n|Write to a binary file.|[How to: Read and Write to a Newly Created Data File](~/docs/standard/io/how-to-read-and-write-to-a-newly-created-data-file.md)|","nodes":[{"pos":[0,73],"content":"The following table lists examples of other typical or related I/O tasks.","nodes":[{"content":"The following table lists examples of other typical or related I/O tasks.","pos":[0,73]}]},{"pos":[80,93],"content":"To do this...","nodes":[{"content":"To do this...","pos":[0,13]}]},{"pos":[94,126],"content":"See the example in this topic...","nodes":[{"content":"See the example in this topic...","pos":[0,32]}]},{"pos":[194,213],"content":"Create a text file.","nodes":[{"content":"Create a text file.","pos":[0,19]}]},{"pos":[214,295],"content":"<bpt id=\"p1\">[</bpt>How to: Write Text to a File<ept id=\"p1\">](~/docs/standard/io/how-to-write-text-to-a-file.md)</ept>","source":"[How to: Write Text to a File](~/docs/standard/io/how-to-write-text-to-a-file.md)"},{"pos":[300,321],"content":"Write to a text file.","nodes":[{"content":"Write to a text file.","pos":[0,21]}]},{"pos":[322,403],"content":"<bpt id=\"p1\">[</bpt>How to: Write Text to a File<ept id=\"p1\">](~/docs/standard/io/how-to-write-text-to-a-file.md)</ept>","source":"[How to: Write Text to a File](~/docs/standard/io/how-to-write-text-to-a-file.md)"},{"pos":[408,430],"content":"Read from a text file.","nodes":[{"content":"Read from a text file.","pos":[0,22]}]},{"pos":[431,514],"content":"<bpt id=\"p1\">[</bpt>How to: Read Text from a File<ept id=\"p1\">](~/docs/standard/io/how-to-read-text-from-a-file.md)</ept>","source":"[How to: Read Text from a File](~/docs/standard/io/how-to-read-text-from-a-file.md)"},{"pos":[519,541],"content":"Append text to a file.","nodes":[{"content":"Append text to a file.","pos":[0,22]}]},{"pos":[542,791],"content":"[How to: Open and Append to a Log File](~/docs/standard/io/how-to-open-and-append-to-a-log-file.md)<br /><br /> <xref:System.IO.File.AppendText%2A?displayProperty=fullName><br /><br /> <xref:System.IO.FileInfo.AppendText%2A?displayProperty=fullName>","nodes":[{"content":"<bpt id=\"p1\">[</bpt>How to: Open and Append to a Log File<ept id=\"p1\">](~/docs/standard/io/how-to-open-and-append-to-a-log-file.md)</ept>","pos":[0,99],"source":"[How to: Open and Append to a Log File](~/docs/standard/io/how-to-open-and-append-to-a-log-file.md)"},{"content":"<ph id=\"ph1\">&lt;xref:System.IO.File.AppendText%2A?displayProperty=fullName&gt;</ph>","pos":[112,172],"source":" <xref:System.IO.File.AppendText%2A?displayProperty=fullName>"},{"content":"<ph id=\"ph1\">&lt;xref:System.IO.FileInfo.AppendText%2A?displayProperty=fullName&gt;</ph>","pos":[185,249],"source":" <xref:System.IO.FileInfo.AppendText%2A?displayProperty=fullName>"}]},{"pos":[796,819],"content":"Get the size of a file.","nodes":[{"content":"Get the size of a file.","pos":[0,23]}]},{"pos":[820,880],"content":"<xref:System.IO.FileInfo.Length%2A?displayProperty=fullName>","nodes":[]},{"pos":[885,914],"content":"Get the attributes of a file.","nodes":[{"content":"Get the attributes of a file.","pos":[0,29]}]},{"pos":[915,978],"content":"<xref:System.IO.File.GetAttributes%2A?displayProperty=fullName>","nodes":[]},{"pos":[983,1012],"content":"Set the attributes of a file.","nodes":[{"content":"Set the attributes of a file.","pos":[0,29]}]},{"pos":[1013,1076],"content":"<xref:System.IO.File.SetAttributes%2A?displayProperty=fullName>","nodes":[]},{"pos":[1081,1108],"content":"Determine if a file exists.","nodes":[{"content":"Determine if a file exists.","pos":[0,27]}]},{"pos":[1109,1165],"content":"<xref:System.IO.File.Exists%2A?displayProperty=fullName>","nodes":[]},{"pos":[1170,1194],"content":"Read from a binary file.","nodes":[{"content":"Read from a binary file.","pos":[0,24]}]},{"pos":[1195,1322],"content":"<bpt id=\"p1\">[</bpt>How to: Read and Write to a Newly Created Data File<ept id=\"p1\">](~/docs/standard/io/how-to-read-and-write-to-a-newly-created-data-file.md)</ept>","source":"[How to: Read and Write to a Newly Created Data File](~/docs/standard/io/how-to-read-and-write-to-a-newly-created-data-file.md)"},{"pos":[1327,1350],"content":"Write to a binary file.","nodes":[{"content":"Write to a binary file.","pos":[0,23]}]},{"pos":[1351,1478],"content":"<bpt id=\"p1\">[</bpt>How to: Read and Write to a Newly Created Data File<ept id=\"p1\">](~/docs/standard/io/how-to-read-and-write-to-a-newly-created-data-file.md)</ept>","source":"[How to: Read and Write to a Newly Created Data File](~/docs/standard/io/how-to-read-and-write-to-a-newly-created-data-file.md)"}],"pos":[6389,7884],"yaml":true,"extradata":"MT"},{"content":"The string to which the <xref href=\"System.IO.StringReader\"></xref> should be initialized.","nodes":[{"pos":[0,90],"content":"The string to which the <ph id=\"ph1\">&lt;xref href=\"System.IO.StringReader\"&gt;&lt;/xref&gt;</ph> should be initialized.","source":"The string to which the <xref href=\"System.IO.StringReader\"></xref> should be initialized."}],"pos":[8567,8658],"yaml":true},{"content":"The <code>s</code> parameter is `null`.","nodes":[{"pos":[0,39],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">s</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is <ph id=\"ph2\">`null`</ph>.","source":"The <code>s</code> parameter is `null`."}],"pos":[8816,8856],"yaml":true},{"content":"Closes the <xref href=\"System.IO.StringReader\"></xref>.","nodes":[{"pos":[0,55],"content":"Closes the <ph id=\"ph1\">&lt;xref href=\"System.IO.StringReader\"&gt;&lt;/xref&gt;</ph>.","source":"Closes the <xref href=\"System.IO.StringReader\"></xref>."}],"pos":[10269,10325],"yaml":true},{"content":"For an example of creating a file and writing text to a file, see [How to: Write Text to a File](~/docs/standard/io/how-to-write-text-to-a-file.md). For an example of reading text from a file, see [How to: Read Text from a File](~/docs/standard/io/how-to-read-text-from-a-file.md). For an example of reading from and writing to a binary file, see [How to: Read and Write to a Newly Created Data File](~/docs/standard/io/how-to-read-and-write-to-a-newly-created-data-file.md).  \n  \n This method overrides the <xref:System.IO.Stream.Close%2A?displayProperty=fullName> method.  \n  \n This implementation of `Close` calls the <xref:System.IO.StringReader.Dispose%2A> method passing a `true` value.  \n  \n Flushing the stream will not flush its underlying encoder unless you explicitly call `Close`. Setting <xref:System.IO.StreamWriter.AutoFlush%2A> to `true` means that data will be flushed from the buffer to the stream, but the encoder state will not be flushed. This allows the encoder to keep its state (partial characters) so that it can encode the next block of characters correctly. This scenario affects UTF8 and UTF7 where certain characters can only be encoded after the encoder receives the adjacent character or characters.  \n  \n Following a call to `Close`, other methods might throw an exception.","nodes":[{"pos":[0,475],"content":"For an example of creating a file and writing text to a file, see [How to: Write Text to a File](~/docs/standard/io/how-to-write-text-to-a-file.md). For an example of reading text from a file, see [How to: Read Text from a File](~/docs/standard/io/how-to-read-text-from-a-file.md). For an example of reading from and writing to a binary file, see [How to: Read and Write to a Newly Created Data File](~/docs/standard/io/how-to-read-and-write-to-a-newly-created-data-file.md).","nodes":[{"content":"For an example of creating a file and writing text to a file, see <bpt id=\"p1\">[</bpt>How to: Write Text to a File<ept id=\"p1\">](~/docs/standard/io/how-to-write-text-to-a-file.md)</ept>.","pos":[0,148],"source":"For an example of creating a file and writing text to a file, see [How to: Write Text to a File](~/docs/standard/io/how-to-write-text-to-a-file.md)."},{"content":"For an example of reading text from a file, see <bpt id=\"p1\">[</bpt>How to: Read Text from a File<ept id=\"p1\">](~/docs/standard/io/how-to-read-text-from-a-file.md)</ept>.","pos":[149,281],"source":" For an example of reading text from a file, see [How to: Read Text from a File](~/docs/standard/io/how-to-read-text-from-a-file.md)."},{"content":"For an example of reading from and writing to a binary file, see <bpt id=\"p1\">[</bpt>How to: Read and Write to a Newly Created Data File<ept id=\"p1\">](~/docs/standard/io/how-to-read-and-write-to-a-newly-created-data-file.md)</ept>.","pos":[282,475],"source":" For an example of reading from and writing to a binary file, see [How to: Read and Write to a Newly Created Data File](~/docs/standard/io/how-to-read-and-write-to-a-newly-created-data-file.md)."}]},{"pos":[482,573],"content":"This method overrides the <xref:System.IO.Stream.Close%2A?displayProperty=fullName> method.","nodes":[{"content":"This method overrides the <ph id=\"ph1\">&lt;xref:System.IO.Stream.Close%2A?displayProperty=fullName&gt;</ph> method.","pos":[0,91],"source":"This method overrides the <xref:System.IO.Stream.Close%2A?displayProperty=fullName> method."}]},{"pos":[580,692],"content":"This implementation of <ph id=\"ph1\">`Close`</ph> calls the <ph id=\"ph2\">&lt;xref:System.IO.StringReader.Dispose%2A&gt;</ph> method passing a <ph id=\"ph3\">`true`</ph> value.","source":"This implementation of `Close` calls the <xref:System.IO.StringReader.Dispose%2A> method passing a `true` value."},{"pos":[699,1230],"content":"Flushing the stream will not flush its underlying encoder unless you explicitly call `Close`. Setting <xref:System.IO.StreamWriter.AutoFlush%2A> to `true` means that data will be flushed from the buffer to the stream, but the encoder state will not be flushed. This allows the encoder to keep its state (partial characters) so that it can encode the next block of characters correctly. This scenario affects UTF8 and UTF7 where certain characters can only be encoded after the encoder receives the adjacent character or characters.","nodes":[{"content":"Flushing the stream will not flush its underlying encoder unless you explicitly call <ph id=\"ph1\">`Close`</ph>.","pos":[0,93],"source":"Flushing the stream will not flush its underlying encoder unless you explicitly call `Close`."},{"content":"Setting <ph id=\"ph1\">&lt;xref:System.IO.StreamWriter.AutoFlush%2A&gt;</ph> to <ph id=\"ph2\">`true`</ph> means that data will be flushed from the buffer to the stream, but the encoder state will not be flushed.","pos":[94,260],"source":" Setting <xref:System.IO.StreamWriter.AutoFlush%2A> to `true` means that data will be flushed from the buffer to the stream, but the encoder state will not be flushed."},{"content":"This allows the encoder to keep its state (partial characters) so that it can encode the next block of characters correctly.","pos":[261,385]},{"content":"This scenario affects UTF8 and UTF7 where certain characters can only be encoded after the encoder receives the adjacent character or characters.","pos":[386,531]}]},{"pos":[1237,1305],"content":"Following a call to <ph id=\"ph1\">`Close`</ph>, other methods might throw an exception.","source":"Following a call to `Close`, other methods might throw an exception."}],"pos":[10336,11652],"yaml":true,"extradata":"MT"},{"content":"Releases the unmanaged resources used by the <xref href=\"System.IO.StringReader\"></xref> and optionally releases the managed resources.","nodes":[{"pos":[0,135],"content":"Releases the unmanaged resources used by the <ph id=\"ph1\">&lt;xref href=\"System.IO.StringReader\"&gt;&lt;/xref&gt;</ph> and optionally releases the managed resources.","source":"Releases the unmanaged resources used by the <xref href=\"System.IO.StringReader\"></xref> and optionally releases the managed resources."}],"pos":[12948,13084],"yaml":true},{"content":"When the `disposing` parameter is `true`, this method releases all resources held by any managed objects that this <xref:System.IO.StringReader> references. This method invokes the `Dispose` method of each referenced object.","nodes":[{"pos":[0,224],"content":"When the `disposing` parameter is `true`, this method releases all resources held by any managed objects that this <xref:System.IO.StringReader> references. This method invokes the `Dispose` method of each referenced object.","nodes":[{"content":"When the <ph id=\"ph1\">`disposing`</ph> parameter is <ph id=\"ph2\">`true`</ph>, this method releases all resources held by any managed objects that this <ph id=\"ph3\">&lt;xref:System.IO.StringReader&gt;</ph> references.","pos":[0,156],"source":"When the `disposing` parameter is `true`, this method releases all resources held by any managed objects that this <xref:System.IO.StringReader> references."},{"content":"This method invokes the <ph id=\"ph1\">`Dispose`</ph> method of each referenced object.","pos":[157,224],"source":" This method invokes the `Dispose` method of each referenced object."}]}],"pos":[13095,13320],"yaml":true,"extradata":"MT"},{"content":"`true` to release both managed and unmanaged resources; `false` to release only unmanaged resources.","nodes":[{"pos":[0,100],"content":"<ph id=\"ph1\">`true`</ph> to release both managed and unmanaged resources; <ph id=\"ph2\">`false`</ph> to release only unmanaged resources.","source":"`true` to release both managed and unmanaged resources; `false` to release only unmanaged resources."}],"pos":[13475,13578],"yaml":true},{"content":"Returns the next available character but does not consume it.","nodes":[{"pos":[0,61],"content":"Returns the next available character but does not consume it.","nodes":[{"content":"Returns the next available character but does not consume it.","pos":[0,61]}]}],"pos":[15060,15122],"yaml":true},{"content":"The <xref:System.IO.StringReader.Peek%2A> method returns an integer value in order to determine whether the end of the file, or another error has occurred. This allows a user to first check if the returned value is -1 before casting it to a <xref:System.Char> type.  \n  \n This method overrides the <xref:System.IO.TextReader.Peek%2A?displayProperty=fullName> method.  \n  \n The current position of the `StringReader` is not changed by this operation.  \n  \n The following table lists examples of other typical or related I/O tasks.  \n  \n|To do this...|See the example in this topic...|  \n|-------------------|--------------------------------------|  \n|Create a text file.|[How to: Write Text to a File](~/docs/standard/io/how-to-write-text-to-a-file.md)|  \n|Write to a text file.|[How to: Write Text to a File](~/docs/standard/io/how-to-write-text-to-a-file.md)|  \n|Read from a text file.|[How to: Read Text from a File](~/docs/standard/io/how-to-read-text-from-a-file.md)|  \n|Get the size of a file.|<xref:System.IO.FileInfo.Length%2A?displayProperty=fullName>|","nodes":[{"pos":[0,265],"content":"The <xref:System.IO.StringReader.Peek%2A> method returns an integer value in order to determine whether the end of the file, or another error has occurred. This allows a user to first check if the returned value is -1 before casting it to a <xref:System.Char> type.","nodes":[{"content":"The <xref:System.IO.StringReader.Peek%2A> method returns an integer value in order to determine whether the end of the file, or another error has occurred. This allows a user to first check if the returned value is -1 before casting it to a <xref:System.Char> type.","pos":[0,265],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.IO.StringReader.Peek%2A&gt;</ph> method returns an integer value in order to determine whether the end of the file, or another error has occurred.","pos":[0,155],"source":"The <xref:System.IO.StringReader.Peek%2A> method returns an integer value in order to determine whether the end of the file, or another error has occurred."},{"content":"This allows a user to first check if the returned value is -1 before casting it to a <ph id=\"ph1\">&lt;xref:System.Char&gt;</ph> type.","pos":[156,265],"source":" This allows a user to first check if the returned value is -1 before casting it to a <xref:System.Char> type."}]}]},{"pos":[272,366],"content":"This method overrides the <xref:System.IO.TextReader.Peek%2A?displayProperty=fullName> method.","nodes":[{"content":"This method overrides the <ph id=\"ph1\">&lt;xref:System.IO.TextReader.Peek%2A?displayProperty=fullName&gt;</ph> method.","pos":[0,94],"source":"This method overrides the <xref:System.IO.TextReader.Peek%2A?displayProperty=fullName> method."}]},{"pos":[373,449],"content":"The current position of the <ph id=\"ph1\">`StringReader`</ph> is not changed by this operation.","source":"The current position of the `StringReader` is not changed by this operation."},{"pos":[456,529],"content":"The following table lists examples of other typical or related I/O tasks.","nodes":[{"content":"The following table lists examples of other typical or related I/O tasks.","pos":[0,73]}]},{"pos":[536,549],"content":"To do this...","nodes":[{"content":"To do this...","pos":[0,13]}]},{"pos":[550,582],"content":"See the example in this topic...","nodes":[{"content":"See the example in this topic...","pos":[0,32]}]},{"pos":[650,669],"content":"Create a text file.","nodes":[{"content":"Create a text file.","pos":[0,19]}]},{"pos":[670,751],"content":"<bpt id=\"p1\">[</bpt>How to: Write Text to a File<ept id=\"p1\">](~/docs/standard/io/how-to-write-text-to-a-file.md)</ept>","source":"[How to: Write Text to a File](~/docs/standard/io/how-to-write-text-to-a-file.md)"},{"pos":[756,777],"content":"Write to a text file.","nodes":[{"content":"Write to a text file.","pos":[0,21]}]},{"pos":[778,859],"content":"<bpt id=\"p1\">[</bpt>How to: Write Text to a File<ept id=\"p1\">](~/docs/standard/io/how-to-write-text-to-a-file.md)</ept>","source":"[How to: Write Text to a File](~/docs/standard/io/how-to-write-text-to-a-file.md)"},{"pos":[864,886],"content":"Read from a text file.","nodes":[{"content":"Read from a text file.","pos":[0,22]}]},{"pos":[887,970],"content":"<bpt id=\"p1\">[</bpt>How to: Read Text from a File<ept id=\"p1\">](~/docs/standard/io/how-to-read-text-from-a-file.md)</ept>","source":"[How to: Read Text from a File](~/docs/standard/io/how-to-read-text-from-a-file.md)"},{"pos":[975,998],"content":"Get the size of a file.","nodes":[{"content":"Get the size of a file.","pos":[0,23]}]},{"pos":[999,1059],"content":"<xref:System.IO.FileInfo.Length%2A?displayProperty=fullName>","nodes":[]}],"pos":[15133,16209],"yaml":true,"extradata":"MT"},{"content":"An integer representing the next character to be read, or -1 if no more characters are available or the stream does not support seeking.","nodes":[{"pos":[0,136],"content":"An integer representing the next character to be read, or -1 if no more characters are available or the stream does not support seeking.","nodes":[{"content":"An integer representing the next character to be read, or -1 if no more characters are available or the stream does not support seeking.","pos":[0,136]}]}],"pos":[16336,16473],"yaml":true},{"content":"The current reader is closed.","nodes":[{"pos":[0,29],"content":"The current reader is closed.","nodes":[{"content":"The current reader is closed.","pos":[0,29]}]}],"pos":[16634,16664],"yaml":true},{"content":"Reads the next character from the input string and advances the character position by one character.","nodes":[{"pos":[0,100],"content":"Reads the next character from the input string and advances the character position by one character.","nodes":[{"content":"Reads the next character from the input string and advances the character position by one character.","pos":[0,100]}]}],"pos":[18085,18186],"yaml":true},{"content":"This method overrides the <xref:System.IO.TextReader.Read%2A?displayProperty=fullName> method.  \n  \n The following table lists examples of other typical or related I/O tasks.  \n  \n|To do this...|See the example in this topic...|  \n|-------------------|--------------------------------------|  \n|Create a text file.|[How to: Write Text to a File](~/docs/standard/io/how-to-write-text-to-a-file.md)|  \n|Write to a text file.|[How to: Write Text to a File](~/docs/standard/io/how-to-write-text-to-a-file.md)|  \n|Read from a text file.|[How to: Read Text from a File](~/docs/standard/io/how-to-read-text-from-a-file.md)|  \n|Append text to a file.|[How to: Open and Append to a Log File](~/docs/standard/io/how-to-open-and-append-to-a-log-file.md)<br /><br /> <xref:System.IO.File.AppendText%2A?displayProperty=fullName><br /><br /> <xref:System.IO.FileInfo.AppendText%2A?displayProperty=fullName>|  \n|Get the size of a file.|<xref:System.IO.FileInfo.Length%2A?displayProperty=fullName>|  \n|Get the attributes of a file.|<xref:System.IO.File.GetAttributes%2A?displayProperty=fullName>|  \n|Set the attributes of a file.|<xref:System.IO.File.SetAttributes%2A?displayProperty=fullName>|  \n|Determine if a file exists.|<xref:System.IO.File.Exists%2A?displayProperty=fullName>|  \n|Read from a binary file.|[How to: Read and Write to a Newly Created Data File](~/docs/standard/io/how-to-read-and-write-to-a-newly-created-data-file.md)|  \n|Write to a binary file.|[How to: Read and Write to a Newly Created Data File](~/docs/standard/io/how-to-read-and-write-to-a-newly-created-data-file.md)|","nodes":[{"pos":[0,94],"content":"This method overrides the <xref:System.IO.TextReader.Read%2A?displayProperty=fullName> method.","nodes":[{"content":"This method overrides the <ph id=\"ph1\">&lt;xref:System.IO.TextReader.Read%2A?displayProperty=fullName&gt;</ph> method.","pos":[0,94],"source":"This method overrides the <xref:System.IO.TextReader.Read%2A?displayProperty=fullName> method."}]},{"pos":[101,174],"content":"The following table lists examples of other typical or related I/O tasks.","nodes":[{"content":"The following table lists examples of other typical or related I/O tasks.","pos":[0,73]}]},{"pos":[181,194],"content":"To do this...","nodes":[{"content":"To do this...","pos":[0,13]}]},{"pos":[195,227],"content":"See the example in this topic...","nodes":[{"content":"See the example in this topic...","pos":[0,32]}]},{"pos":[295,314],"content":"Create a text file.","nodes":[{"content":"Create a text file.","pos":[0,19]}]},{"pos":[315,396],"content":"<bpt id=\"p1\">[</bpt>How to: Write Text to a File<ept id=\"p1\">](~/docs/standard/io/how-to-write-text-to-a-file.md)</ept>","source":"[How to: Write Text to a File](~/docs/standard/io/how-to-write-text-to-a-file.md)"},{"pos":[401,422],"content":"Write to a text file.","nodes":[{"content":"Write to a text file.","pos":[0,21]}]},{"pos":[423,504],"content":"<bpt id=\"p1\">[</bpt>How to: Write Text to a File<ept id=\"p1\">](~/docs/standard/io/how-to-write-text-to-a-file.md)</ept>","source":"[How to: Write Text to a File](~/docs/standard/io/how-to-write-text-to-a-file.md)"},{"pos":[509,531],"content":"Read from a text file.","nodes":[{"content":"Read from a text file.","pos":[0,22]}]},{"pos":[532,615],"content":"<bpt id=\"p1\">[</bpt>How to: Read Text from a File<ept id=\"p1\">](~/docs/standard/io/how-to-read-text-from-a-file.md)</ept>","source":"[How to: Read Text from a File](~/docs/standard/io/how-to-read-text-from-a-file.md)"},{"pos":[620,642],"content":"Append text to a file.","nodes":[{"content":"Append text to a file.","pos":[0,22]}]},{"pos":[643,892],"content":"[How to: Open and Append to a Log File](~/docs/standard/io/how-to-open-and-append-to-a-log-file.md)<br /><br /> <xref:System.IO.File.AppendText%2A?displayProperty=fullName><br /><br /> <xref:System.IO.FileInfo.AppendText%2A?displayProperty=fullName>","nodes":[{"content":"<bpt id=\"p1\">[</bpt>How to: Open and Append to a Log File<ept id=\"p1\">](~/docs/standard/io/how-to-open-and-append-to-a-log-file.md)</ept>","pos":[0,99],"source":"[How to: Open and Append to a Log File](~/docs/standard/io/how-to-open-and-append-to-a-log-file.md)"},{"content":"<ph id=\"ph1\">&lt;xref:System.IO.File.AppendText%2A?displayProperty=fullName&gt;</ph>","pos":[112,172],"source":" <xref:System.IO.File.AppendText%2A?displayProperty=fullName>"},{"content":"<ph id=\"ph1\">&lt;xref:System.IO.FileInfo.AppendText%2A?displayProperty=fullName&gt;</ph>","pos":[185,249],"source":" <xref:System.IO.FileInfo.AppendText%2A?displayProperty=fullName>"}]},{"pos":[897,920],"content":"Get the size of a file.","nodes":[{"content":"Get the size of a file.","pos":[0,23]}]},{"pos":[921,981],"content":"<xref:System.IO.FileInfo.Length%2A?displayProperty=fullName>","nodes":[]},{"pos":[986,1015],"content":"Get the attributes of a file.","nodes":[{"content":"Get the attributes of a file.","pos":[0,29]}]},{"pos":[1016,1079],"content":"<xref:System.IO.File.GetAttributes%2A?displayProperty=fullName>","nodes":[]},{"pos":[1084,1113],"content":"Set the attributes of a file.","nodes":[{"content":"Set the attributes of a file.","pos":[0,29]}]},{"pos":[1114,1177],"content":"<xref:System.IO.File.SetAttributes%2A?displayProperty=fullName>","nodes":[]},{"pos":[1182,1209],"content":"Determine if a file exists.","nodes":[{"content":"Determine if a file exists.","pos":[0,27]}]},{"pos":[1210,1266],"content":"<xref:System.IO.File.Exists%2A?displayProperty=fullName>","nodes":[]},{"pos":[1271,1295],"content":"Read from a binary file.","nodes":[{"content":"Read from a binary file.","pos":[0,24]}]},{"pos":[1296,1423],"content":"<bpt id=\"p1\">[</bpt>How to: Read and Write to a Newly Created Data File<ept id=\"p1\">](~/docs/standard/io/how-to-read-and-write-to-a-newly-created-data-file.md)</ept>","source":"[How to: Read and Write to a Newly Created Data File](~/docs/standard/io/how-to-read-and-write-to-a-newly-created-data-file.md)"},{"pos":[1428,1451],"content":"Write to a binary file.","nodes":[{"content":"Write to a binary file.","pos":[0,23]}]},{"pos":[1452,1579],"content":"<bpt id=\"p1\">[</bpt>How to: Read and Write to a Newly Created Data File<ept id=\"p1\">](~/docs/standard/io/how-to-read-and-write-to-a-newly-created-data-file.md)</ept>","source":"[How to: Read and Write to a Newly Created Data File](~/docs/standard/io/how-to-read-and-write-to-a-newly-created-data-file.md)"}],"pos":[18197,19795],"yaml":true,"extradata":"MT"},{"content":"The next character from the underlying string, or -1 if no more characters are available.","nodes":[{"pos":[0,89],"content":"The next character from the underlying string, or -1 if no more characters are available.","nodes":[{"content":"The next character from the underlying string, or -1 if no more characters are available.","pos":[0,89]}]}],"pos":[20477,20567],"yaml":true},{"content":"The current reader is closed.","nodes":[{"pos":[0,29],"content":"The current reader is closed.","nodes":[{"content":"The current reader is closed.","pos":[0,29]}]}],"pos":[20728,20758],"yaml":true},{"content":"Reads a block of characters from the input string and advances the character position by <code>count</code>.","nodes":[{"pos":[0,108],"content":"Reads a block of characters from the input string and advances the character position by <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">count</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"Reads a block of characters from the input string and advances the character position by <code>count</code>."}],"pos":[22362,22471],"yaml":true},{"content":"This method overrides <xref:System.IO.TextReader.Read%2A?displayProperty=fullName>.  \n  \n The method will read up to `count` characters from the <xref:System.IO.StringReader> into the `buffer` character array starting at position `index`. Returns the actual number of characters read, or zero if the end of the string has been reached and no characters are read.  \n  \n The following table lists examples of other typical or related I/O tasks.  \n  \n|To do this...|See the example in this topic...|  \n|-------------------|--------------------------------------|  \n|Create a text file.|[How to: Write Text to a File](~/docs/standard/io/how-to-write-text-to-a-file.md)|  \n|Write to a text file.|[How to: Write Text to a File](~/docs/standard/io/how-to-write-text-to-a-file.md)|  \n|Read from a text file.|[How to: Read Text from a File](~/docs/standard/io/how-to-read-text-from-a-file.md)|  \n|Append text to a file.|[How to: Open and Append to a Log File](~/docs/standard/io/how-to-open-and-append-to-a-log-file.md)<br /><br /> <xref:System.IO.File.AppendText%2A?displayProperty=fullName><br /><br /> <xref:System.IO.FileInfo.AppendText%2A?displayProperty=fullName>|  \n|Get the size of a file.|<xref:System.IO.FileInfo.Length%2A?displayProperty=fullName>|  \n|Get the attributes of a file.|<xref:System.IO.File.GetAttributes%2A?displayProperty=fullName>|  \n|Set the attributes of a file.|<xref:System.IO.File.SetAttributes%2A?displayProperty=fullName>|  \n|Determine if a file exists.|<xref:System.IO.File.Exists%2A?displayProperty=fullName>|  \n|Read from a binary file.|[How to: Read and Write to a Newly Created Data File](~/docs/standard/io/how-to-read-and-write-to-a-newly-created-data-file.md)|  \n|Write to a binary file.|[How to: Read and Write to a Newly Created Data File](~/docs/standard/io/how-to-read-and-write-to-a-newly-created-data-file.md)|","nodes":[{"pos":[0,83],"content":"This method overrides <xref:System.IO.TextReader.Read%2A?displayProperty=fullName>.","nodes":[{"content":"This method overrides <ph id=\"ph1\">&lt;xref:System.IO.TextReader.Read%2A?displayProperty=fullName&gt;</ph>.","pos":[0,83],"source":"This method overrides <xref:System.IO.TextReader.Read%2A?displayProperty=fullName>."}]},{"pos":[90,362],"content":"The method will read up to `count` characters from the <xref:System.IO.StringReader> into the `buffer` character array starting at position `index`. Returns the actual number of characters read, or zero if the end of the string has been reached and no characters are read.","nodes":[{"content":"The method will read up to <ph id=\"ph1\">`count`</ph> characters from the <ph id=\"ph2\">&lt;xref:System.IO.StringReader&gt;</ph> into the <ph id=\"ph3\">`buffer`</ph> character array starting at position <ph id=\"ph4\">`index`</ph>.","pos":[0,148],"source":"The method will read up to `count` characters from the <xref:System.IO.StringReader> into the `buffer` character array starting at position `index`."},{"content":"Returns the actual number of characters read, or zero if the end of the string has been reached and no characters are read.","pos":[149,272]}]},{"pos":[369,442],"content":"The following table lists examples of other typical or related I/O tasks.","nodes":[{"content":"The following table lists examples of other typical or related I/O tasks.","pos":[0,73]}]},{"pos":[449,462],"content":"To do this...","nodes":[{"content":"To do this...","pos":[0,13]}]},{"pos":[463,495],"content":"See the example in this topic...","nodes":[{"content":"See the example in this topic...","pos":[0,32]}]},{"pos":[563,582],"content":"Create a text file.","nodes":[{"content":"Create a text file.","pos":[0,19]}]},{"pos":[583,664],"content":"<bpt id=\"p1\">[</bpt>How to: Write Text to a File<ept id=\"p1\">](~/docs/standard/io/how-to-write-text-to-a-file.md)</ept>","source":"[How to: Write Text to a File](~/docs/standard/io/how-to-write-text-to-a-file.md)"},{"pos":[669,690],"content":"Write to a text file.","nodes":[{"content":"Write to a text file.","pos":[0,21]}]},{"pos":[691,772],"content":"<bpt id=\"p1\">[</bpt>How to: Write Text to a File<ept id=\"p1\">](~/docs/standard/io/how-to-write-text-to-a-file.md)</ept>","source":"[How to: Write Text to a File](~/docs/standard/io/how-to-write-text-to-a-file.md)"},{"pos":[777,799],"content":"Read from a text file.","nodes":[{"content":"Read from a text file.","pos":[0,22]}]},{"pos":[800,883],"content":"<bpt id=\"p1\">[</bpt>How to: Read Text from a File<ept id=\"p1\">](~/docs/standard/io/how-to-read-text-from-a-file.md)</ept>","source":"[How to: Read Text from a File](~/docs/standard/io/how-to-read-text-from-a-file.md)"},{"pos":[888,910],"content":"Append text to a file.","nodes":[{"content":"Append text to a file.","pos":[0,22]}]},{"pos":[911,1160],"content":"[How to: Open and Append to a Log File](~/docs/standard/io/how-to-open-and-append-to-a-log-file.md)<br /><br /> <xref:System.IO.File.AppendText%2A?displayProperty=fullName><br /><br /> <xref:System.IO.FileInfo.AppendText%2A?displayProperty=fullName>","nodes":[{"content":"<bpt id=\"p1\">[</bpt>How to: Open and Append to a Log File<ept id=\"p1\">](~/docs/standard/io/how-to-open-and-append-to-a-log-file.md)</ept>","pos":[0,99],"source":"[How to: Open and Append to a Log File](~/docs/standard/io/how-to-open-and-append-to-a-log-file.md)"},{"content":"<ph id=\"ph1\">&lt;xref:System.IO.File.AppendText%2A?displayProperty=fullName&gt;</ph>","pos":[112,172],"source":" <xref:System.IO.File.AppendText%2A?displayProperty=fullName>"},{"content":"<ph id=\"ph1\">&lt;xref:System.IO.FileInfo.AppendText%2A?displayProperty=fullName&gt;</ph>","pos":[185,249],"source":" <xref:System.IO.FileInfo.AppendText%2A?displayProperty=fullName>"}]},{"pos":[1165,1188],"content":"Get the size of a file.","nodes":[{"content":"Get the size of a file.","pos":[0,23]}]},{"pos":[1189,1249],"content":"<xref:System.IO.FileInfo.Length%2A?displayProperty=fullName>","nodes":[]},{"pos":[1254,1283],"content":"Get the attributes of a file.","nodes":[{"content":"Get the attributes of a file.","pos":[0,29]}]},{"pos":[1284,1347],"content":"<xref:System.IO.File.GetAttributes%2A?displayProperty=fullName>","nodes":[]},{"pos":[1352,1381],"content":"Set the attributes of a file.","nodes":[{"content":"Set the attributes of a file.","pos":[0,29]}]},{"pos":[1382,1445],"content":"<xref:System.IO.File.SetAttributes%2A?displayProperty=fullName>","nodes":[]},{"pos":[1450,1477],"content":"Determine if a file exists.","nodes":[{"content":"Determine if a file exists.","pos":[0,27]}]},{"pos":[1478,1534],"content":"<xref:System.IO.File.Exists%2A?displayProperty=fullName>","nodes":[]},{"pos":[1539,1563],"content":"Read from a binary file.","nodes":[{"content":"Read from a binary file.","pos":[0,24]}]},{"pos":[1564,1691],"content":"<bpt id=\"p1\">[</bpt>How to: Read and Write to a Newly Created Data File<ept id=\"p1\">](~/docs/standard/io/how-to-read-and-write-to-a-newly-created-data-file.md)</ept>","source":"[How to: Read and Write to a Newly Created Data File](~/docs/standard/io/how-to-read-and-write-to-a-newly-created-data-file.md)"},{"pos":[1696,1719],"content":"Write to a binary file.","nodes":[{"content":"Write to a binary file.","pos":[0,23]}]},{"pos":[1720,1847],"content":"<bpt id=\"p1\">[</bpt>How to: Read and Write to a Newly Created Data File<ept id=\"p1\">](~/docs/standard/io/how-to-read-and-write-to-a-newly-created-data-file.md)</ept>","source":"[How to: Read and Write to a Newly Created Data File](~/docs/standard/io/how-to-read-and-write-to-a-newly-created-data-file.md)"}],"pos":[22482,24350],"yaml":true,"extradata":"MT"},{"content":"When this method returns, contains the specified character array with the values between <code>index</code> and (<code>index</code> + <code>count</code> - 1) replaced by the characters read from the current source.","nodes":[{"pos":[0,214],"content":"When this method returns, contains the specified character array with the values between <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">index</ph><ept id=\"p1\">&lt;/code&gt;</ept> and (<bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">index</ph><ept id=\"p2\">&lt;/code&gt;</ept><ph id=\"ph3\"> + </ph><bpt id=\"p3\">&lt;code&gt;</bpt><ph id=\"ph4\">count</ph><ept id=\"p3\">&lt;/code&gt;</ept> - 1) replaced by the characters read from the current source.","source":"When this method returns, contains the specified character array with the values between <code>index</code> and (<code>index</code> + <code>count</code> - 1) replaced by the characters read from the current source."}],"pos":[24515,24730],"yaml":true},{"content":"The starting index in the buffer.","nodes":[{"pos":[0,33],"content":"The starting index in the buffer.","nodes":[{"content":"The starting index in the buffer.","pos":[0,33]}]}],"pos":[24790,24824],"yaml":true},{"content":"The number of characters to read.","nodes":[{"pos":[0,33],"content":"The number of characters to read.","nodes":[{"content":"The number of characters to read.","pos":[0,33]}]}],"pos":[24884,24918],"yaml":true},{"content":"The total number of characters read into the buffer. This can be less than the number of characters requested if that many characters are not currently available, or zero if the end of the underlying string has been reached.","nodes":[{"pos":[0,224],"content":"The total number of characters read into the buffer. This can be less than the number of characters requested if that many characters are not currently available, or zero if the end of the underlying string has been reached.","nodes":[{"content":"The total number of characters read into the buffer. This can be less than the number of characters requested if that many characters are not currently available, or zero if the end of the underlying string has been reached.","pos":[0,224],"nodes":[{"content":"The total number of characters read into the buffer.","pos":[0,52]},{"content":"This can be less than the number of characters requested if that many characters are not currently available, or zero if the end of the underlying string has been reached.","pos":[53,224]}]}]}],"pos":[24974,25199],"yaml":true},{"content":"<code>buffer</code> is `null`.","nodes":[{"pos":[0,30],"content":"<ph id=\"ph1\">&lt;code&gt;buffer&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>buffer</code> is `null`."}],"pos":[25356,25387],"yaml":true},{"content":"The buffer length minus <code>index</code> is less than <code>count</code>.","nodes":[{"pos":[0,75],"content":"The buffer length minus <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">index</ph><ept id=\"p1\">&lt;/code&gt;</ept> is less than <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">count</ph><ept id=\"p2\">&lt;/code&gt;</ept>.","source":"The buffer length minus <code>index</code> is less than <code>count</code>."}],"pos":[25481,25557],"yaml":true},{"content":"<code>index</code> or <code>count</code> is negative.","nodes":[{"pos":[0,53],"content":"<ph id=\"ph1\">&lt;code&gt;index&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;count&lt;/code&gt;</ph> is negative.","source":"<code>index</code> or <code>count</code> is negative."}],"pos":[25671,25725],"yaml":true},{"content":"The current reader is closed.","nodes":[{"pos":[0,29],"content":"The current reader is closed.","nodes":[{"content":"The current reader is closed.","pos":[0,29]}]}],"pos":[25831,25861],"yaml":true},{"content":"Reads a specified maximum number of characters from the current string asynchronously and writes the data to a buffer, beginning at the specified index.","nodes":[{"pos":[0,152],"content":"Reads a specified maximum number of characters from the current string asynchronously and writes the data to a buffer, beginning at the specified index.","nodes":[{"content":"Reads a specified maximum number of characters from the current string asynchronously and writes the data to a buffer, beginning at the specified index.","pos":[0,152]}]}],"pos":[27495,27648],"yaml":true},{"content":"The task completes after either the number of characters specified by the `count` parameter are read or the end of the string is reached.","nodes":[{"pos":[0,137],"content":"The task completes after either the number of characters specified by the <ph id=\"ph1\">`count`</ph> parameter are read or the end of the string is reached.","source":"The task completes after either the number of characters specified by the `count` parameter are read or the end of the string is reached."}],"pos":[27659,27797],"yaml":true,"extradata":"MT"},{"content":"When this method returns, contains the specified character array with the values between <code>index</code> and (<code>index</code> + <code>count</code> - 1) replaced by the characters read from the current source.","nodes":[{"pos":[0,214],"content":"When this method returns, contains the specified character array with the values between <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">index</ph><ept id=\"p1\">&lt;/code&gt;</ept> and (<bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">index</ph><ept id=\"p2\">&lt;/code&gt;</ept><ph id=\"ph3\"> + </ph><bpt id=\"p3\">&lt;code&gt;</bpt><ph id=\"ph4\">count</ph><ept id=\"p3\">&lt;/code&gt;</ept> - 1) replaced by the characters read from the current source.","source":"When this method returns, contains the specified character array with the values between <code>index</code> and (<code>index</code> + <code>count</code> - 1) replaced by the characters read from the current source."}],"pos":[28445,28660],"yaml":true},{"content":"The position in <code>buffer</code> at which to begin writing.","nodes":[{"pos":[0,62],"content":"The position in <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">buffer</ph><ept id=\"p1\">&lt;/code&gt;</ept> at which to begin writing.","source":"The position in <code>buffer</code> at which to begin writing."}],"pos":[28720,28783],"yaml":true},{"content":"The maximum number of characters to read. If the end of the string is reached before the specified number of characters is written into the buffer, the method returns.","nodes":[{"pos":[0,167],"content":"The maximum number of characters to read. If the end of the string is reached before the specified number of characters is written into the buffer, the method returns.","nodes":[{"content":"The maximum number of characters to read. If the end of the string is reached before the specified number of characters is written into the buffer, the method returns.","pos":[0,167],"nodes":[{"content":"The maximum number of characters to read.","pos":[0,41]},{"content":"If the end of the string is reached before the specified number of characters is written into the buffer, the method returns.","pos":[42,167]}]}]}],"pos":[28843,29011],"yaml":true},{"content":"A task that represents the asynchronous read operation. The value of the <code>TResult</code> parameter contains the total number of bytes read into the buffer. The result value can be less than the number of bytes requested if the number of bytes currently available is less than the requested number, or it can be 0 (zero) if the end of the string has been reached.","nodes":[{"pos":[0,367],"content":"A task that represents the asynchronous read operation. The value of the <code>TResult</code> parameter contains the total number of bytes read into the buffer. The result value can be less than the number of bytes requested if the number of bytes currently available is less than the requested number, or it can be 0 (zero) if the end of the string has been reached.","nodes":[{"content":"A task that represents the asynchronous read operation.","pos":[0,55]},{"content":"The value of the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">TResult</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter contains the total number of bytes read into the buffer.","pos":[56,160],"source":" The value of the <code>TResult</code> parameter contains the total number of bytes read into the buffer."},{"content":"The result value can be less than the number of bytes requested if the number of bytes currently available is less than the requested number, or it can be 0 (zero) if the end of the string has been reached.","pos":[161,367]}]}],"pos":[29096,29464],"yaml":true},{"content":"<code>buffer</code> is `null`.","nodes":[{"pos":[0,30],"content":"<ph id=\"ph1\">&lt;code&gt;buffer&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>buffer</code> is `null`."}],"pos":[29626,29657],"yaml":true},{"content":"<code>index</code> or <code>count</code> is negative.","nodes":[{"pos":[0,53],"content":"<ph id=\"ph1\">&lt;code&gt;index&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;count&lt;/code&gt;</ph> is negative.","source":"<code>index</code> or <code>count</code> is negative."}],"pos":[29771,29825],"yaml":true},{"content":"The sum of <code>index</code> and <code>count</code> is larger than the buffer length.","nodes":[{"pos":[0,86],"content":"The sum of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">index</ph><ept id=\"p1\">&lt;/code&gt;</ept> and <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">count</ph><ept id=\"p2\">&lt;/code&gt;</ept> is larger than the buffer length.","source":"The sum of <code>index</code> and <code>count</code> is larger than the buffer length."}],"pos":[29919,30006],"yaml":true},{"content":"The string reader has been disposed.","nodes":[{"pos":[0,36],"content":"The string reader has been disposed.","nodes":[{"content":"The string reader has been disposed.","pos":[0,36]}]}],"pos":[30112,30149],"yaml":true},{"content":"The reader is currently in use by a previous read operation.","nodes":[{"pos":[0,60],"content":"The reader is currently in use by a previous read operation.","nodes":[{"content":"The reader is currently in use by a previous read operation.","pos":[0,60]}]}],"pos":[30259,30320],"yaml":true},{"content":"Reads a specified maximum number of characters from the current string asynchronously and writes the data to a buffer, beginning at the specified index.","nodes":[{"pos":[0,152],"content":"Reads a specified maximum number of characters from the current string asynchronously and writes the data to a buffer, beginning at the specified index.","nodes":[{"content":"Reads a specified maximum number of characters from the current string asynchronously and writes the data to a buffer, beginning at the specified index.","pos":[0,152]}]}],"pos":[32059,32212],"yaml":true},{"content":"The task does not complete until either the number of characters specified by the `count` parameter are read, or the end of the string has been reached.","nodes":[{"pos":[0,152],"content":"The task does not complete until either the number of characters specified by the <ph id=\"ph1\">`count`</ph> parameter are read, or the end of the string has been reached.","source":"The task does not complete until either the number of characters specified by the `count` parameter are read, or the end of the string has been reached."}],"pos":[32223,32376],"yaml":true,"extradata":"MT"},{"content":"When this method returns, contains the specified character array with the values between <code>index</code> and (<code>index</code> + <code>count</code> - 1) replaced by the characters read from the current source.","nodes":[{"pos":[0,214],"content":"When this method returns, contains the specified character array with the values between <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">index</ph><ept id=\"p1\">&lt;/code&gt;</ept> and (<bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">index</ph><ept id=\"p2\">&lt;/code&gt;</ept><ph id=\"ph3\"> + </ph><bpt id=\"p3\">&lt;code&gt;</bpt><ph id=\"ph4\">count</ph><ept id=\"p3\">&lt;/code&gt;</ept> - 1) replaced by the characters read from the current source.","source":"When this method returns, contains the specified character array with the values between <code>index</code> and (<code>index</code> + <code>count</code> - 1) replaced by the characters read from the current source."}],"pos":[32647,32862],"yaml":true},{"content":"The position in <code>buffer</code> at which to begin writing.","nodes":[{"pos":[0,62],"content":"The position in <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">buffer</ph><ept id=\"p1\">&lt;/code&gt;</ept> at which to begin writing.","source":"The position in <code>buffer</code> at which to begin writing."}],"pos":[32922,32985],"yaml":true},{"content":"The maximum number of characters to read. If the end of the string is reached before the specified number of characters is written into the buffer, the method returns.","nodes":[{"pos":[0,167],"content":"The maximum number of characters to read. If the end of the string is reached before the specified number of characters is written into the buffer, the method returns.","nodes":[{"content":"The maximum number of characters to read. If the end of the string is reached before the specified number of characters is written into the buffer, the method returns.","pos":[0,167],"nodes":[{"content":"The maximum number of characters to read.","pos":[0,41]},{"content":"If the end of the string is reached before the specified number of characters is written into the buffer, the method returns.","pos":[42,167]}]}]}],"pos":[33045,33213],"yaml":true},{"content":"A task that represents the asynchronous read operation. The value of the <code>TResult</code> parameter contains the total number of bytes read into the buffer. The result value can be less than the number of bytes requested if the number of bytes currently available is less than the requested number, or it can be 0 (zero) if the end of the string has been reached.","nodes":[{"pos":[0,367],"content":"A task that represents the asynchronous read operation. The value of the <code>TResult</code> parameter contains the total number of bytes read into the buffer. The result value can be less than the number of bytes requested if the number of bytes currently available is less than the requested number, or it can be 0 (zero) if the end of the string has been reached.","nodes":[{"content":"A task that represents the asynchronous read operation.","pos":[0,55]},{"content":"The value of the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">TResult</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter contains the total number of bytes read into the buffer.","pos":[56,160],"source":" The value of the <code>TResult</code> parameter contains the total number of bytes read into the buffer."},{"content":"The result value can be less than the number of bytes requested if the number of bytes currently available is less than the requested number, or it can be 0 (zero) if the end of the string has been reached.","pos":[161,367]}]}],"pos":[33298,33666],"yaml":true},{"content":"<code>buffer</code> is `null`.","nodes":[{"pos":[0,30],"content":"<ph id=\"ph1\">&lt;code&gt;buffer&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>buffer</code> is `null`."}],"pos":[33833,33864],"yaml":true},{"content":"<code>index</code> or <code>count</code> is negative.","nodes":[{"pos":[0,53],"content":"<ph id=\"ph1\">&lt;code&gt;index&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;count&lt;/code&gt;</ph> is negative.","source":"<code>index</code> or <code>count</code> is negative."}],"pos":[33978,34032],"yaml":true},{"content":"The sum of <code>index</code> and <code>count</code> is larger than the buffer length.","nodes":[{"pos":[0,86],"content":"The sum of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">index</ph><ept id=\"p1\">&lt;/code&gt;</ept> and <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">count</ph><ept id=\"p2\">&lt;/code&gt;</ept> is larger than the buffer length.","source":"The sum of <code>index</code> and <code>count</code> is larger than the buffer length."}],"pos":[34126,34213],"yaml":true},{"content":"The string reader has been disposed.","nodes":[{"pos":[0,36],"content":"The string reader has been disposed.","nodes":[{"content":"The string reader has been disposed.","pos":[0,36]}]}],"pos":[34319,34356],"yaml":true},{"content":"The reader is currently in use by a previous read operation.","nodes":[{"pos":[0,60],"content":"The reader is currently in use by a previous read operation.","nodes":[{"content":"The reader is currently in use by a previous read operation.","pos":[0,60]}]}],"pos":[34466,34527],"yaml":true},{"content":"Reads a line of characters from the current string and returns the data as a string.","nodes":[{"pos":[0,84],"content":"Reads a line of characters from the current string and returns the data as a string.","nodes":[{"content":"Reads a line of characters from the current string and returns the data as a string.","pos":[0,84]}]}],"pos":[36047,36132],"yaml":true},{"content":"This method overrides the <xref:System.IO.TextReader.ReadLine%2A?displayProperty=fullName> method.  \n  \n A line is defined as a sequence of characters followed by a line feed (\"\\n\"), a carriage return (\"\\r\"), or a carriage return immediately followed by a line feed (\"\\r\\n\"). The string that is returned does not contain the terminating carriage return or line feed. The returned value is `null` if the end of the string has been reached.  \n  \n If the current method throws an <xref:System.OutOfMemoryException>, the reader's position in the underlying string is advanced by the number of characters the method was able to read, but the characters already read into the internal <xref:System.IO.StringReader.ReadLine%2A> buffer are discarded. Because the position of the reader in the string cannot be changed, the characters already read are unrecoverable, and can be accessed only by reinitializing the <xref:System.IO.StringReader>. To avoid such a situation, use the <xref:System.IO.StringReader.Read%2A> method and store the read characters in a preallocated buffer.  \n  \n The following table lists examples of other typical or related I/O tasks.  \n  \n|To do this...|See the example in this topic...|  \n|-------------------|--------------------------------------|  \n|Create a text file.|[How to: Write Text to a File](~/docs/standard/io/how-to-write-text-to-a-file.md)|  \n|Write to a text file.|[How to: Write Text to a File](~/docs/standard/io/how-to-write-text-to-a-file.md)|  \n|Read from a text file.|[How to: Read Text from a File](~/docs/standard/io/how-to-read-text-from-a-file.md)|  \n|Append text to a file.|[How to: Open and Append to a Log File](~/docs/standard/io/how-to-open-and-append-to-a-log-file.md)<br /><br /> <xref:System.IO.File.AppendText%2A?displayProperty=fullName><br /><br /> <xref:System.IO.FileInfo.AppendText%2A?displayProperty=fullName>|  \n|Get the size of a file.|<xref:System.IO.FileInfo.Length%2A?displayProperty=fullName>|  \n|Get the attributes of a file.|<xref:System.IO.File.GetAttributes%2A?displayProperty=fullName>|  \n|Set the attributes of a file.|<xref:System.IO.File.SetAttributes%2A?displayProperty=fullName>|  \n|Determine if a file exists.|<xref:System.IO.File.Exists%2A?displayProperty=fullName>|  \n|Read from a binary file.|[How to: Read and Write to a Newly Created Data File](~/docs/standard/io/how-to-read-and-write-to-a-newly-created-data-file.md)|  \n|Write to a binary file.|[How to: Read and Write to a Newly Created Data File](~/docs/standard/io/how-to-read-and-write-to-a-newly-created-data-file.md)|","nodes":[{"pos":[0,98],"content":"This method overrides the <xref:System.IO.TextReader.ReadLine%2A?displayProperty=fullName> method.","nodes":[{"content":"This method overrides the <ph id=\"ph1\">&lt;xref:System.IO.TextReader.ReadLine%2A?displayProperty=fullName&gt;</ph> method.","pos":[0,98],"source":"This method overrides the <xref:System.IO.TextReader.ReadLine%2A?displayProperty=fullName> method."}]},{"pos":[105,438],"content":"A line is defined as a sequence of characters followed by a line feed (\"\\n\"), a carriage return (\"\\r\"), or a carriage return immediately followed by a line feed (\"\\r\\n\"). The string that is returned does not contain the terminating carriage return or line feed. The returned value is `null` if the end of the string has been reached.","nodes":[{"content":"A line is defined as a sequence of characters followed by a line feed (\"\\n\"), a carriage return (\"\\r\"), or a carriage return immediately followed by a line feed (\"\\r\\n\").","pos":[0,170]},{"content":"The string that is returned does not contain the terminating carriage return or line feed.","pos":[171,261]},{"content":"The returned value is <ph id=\"ph1\">`null`</ph> if the end of the string has been reached.","pos":[262,333],"source":" The returned value is `null` if the end of the string has been reached."}]},{"pos":[445,1071],"content":"If the current method throws an <xref:System.OutOfMemoryException>, the reader's position in the underlying string is advanced by the number of characters the method was able to read, but the characters already read into the internal <xref:System.IO.StringReader.ReadLine%2A> buffer are discarded. Because the position of the reader in the string cannot be changed, the characters already read are unrecoverable, and can be accessed only by reinitializing the <xref:System.IO.StringReader>. To avoid such a situation, use the <xref:System.IO.StringReader.Read%2A> method and store the read characters in a preallocated buffer.","nodes":[{"content":"If the current method throws an <xref:System.OutOfMemoryException>, the reader's position in the underlying string is advanced by the number of characters the method was able to read, but the characters already read into the internal <xref:System.IO.StringReader.ReadLine%2A> buffer are discarded. Because the position of the reader in the string cannot be changed, the characters already read are unrecoverable, and can be accessed only by reinitializing the <xref:System.IO.StringReader>. To avoid such a situation, use the <xref:System.IO.StringReader.Read%2A> method and store the read characters in a preallocated buffer.","pos":[0,626],"nodes":[{"content":"If the current method throws an <ph id=\"ph1\">&lt;xref:System.OutOfMemoryException&gt;</ph>, the reader's position in the underlying string is advanced by the number of characters the method was able to read, but the characters already read into the internal <ph id=\"ph2\">&lt;xref:System.IO.StringReader.ReadLine%2A&gt;</ph> buffer are discarded.","pos":[0,297],"source":"If the current method throws an <xref:System.OutOfMemoryException>, the reader's position in the underlying string is advanced by the number of characters the method was able to read, but the characters already read into the internal <xref:System.IO.StringReader.ReadLine%2A> buffer are discarded."},{"content":"Because the position of the reader in the string cannot be changed, the characters already read are unrecoverable, and can be accessed only by reinitializing the <ph id=\"ph1\">&lt;xref:System.IO.StringReader&gt;</ph>.","pos":[298,490],"source":" Because the position of the reader in the string cannot be changed, the characters already read are unrecoverable, and can be accessed only by reinitializing the <xref:System.IO.StringReader>."},{"content":"To avoid such a situation, use the <ph id=\"ph1\">&lt;xref:System.IO.StringReader.Read%2A&gt;</ph> method and store the read characters in a preallocated buffer.","pos":[491,626],"source":" To avoid such a situation, use the <xref:System.IO.StringReader.Read%2A> method and store the read characters in a preallocated buffer."}]}]},{"pos":[1078,1151],"content":"The following table lists examples of other typical or related I/O tasks.","nodes":[{"content":"The following table lists examples of other typical or related I/O tasks.","pos":[0,73]}]},{"pos":[1158,1171],"content":"To do this...","nodes":[{"content":"To do this...","pos":[0,13]}]},{"pos":[1172,1204],"content":"See the example in this topic...","nodes":[{"content":"See the example in this topic...","pos":[0,32]}]},{"pos":[1272,1291],"content":"Create a text file.","nodes":[{"content":"Create a text file.","pos":[0,19]}]},{"pos":[1292,1373],"content":"<bpt id=\"p1\">[</bpt>How to: Write Text to a File<ept id=\"p1\">](~/docs/standard/io/how-to-write-text-to-a-file.md)</ept>","source":"[How to: Write Text to a File](~/docs/standard/io/how-to-write-text-to-a-file.md)"},{"pos":[1378,1399],"content":"Write to a text file.","nodes":[{"content":"Write to a text file.","pos":[0,21]}]},{"pos":[1400,1481],"content":"<bpt id=\"p1\">[</bpt>How to: Write Text to a File<ept id=\"p1\">](~/docs/standard/io/how-to-write-text-to-a-file.md)</ept>","source":"[How to: Write Text to a File](~/docs/standard/io/how-to-write-text-to-a-file.md)"},{"pos":[1486,1508],"content":"Read from a text file.","nodes":[{"content":"Read from a text file.","pos":[0,22]}]},{"pos":[1509,1592],"content":"<bpt id=\"p1\">[</bpt>How to: Read Text from a File<ept id=\"p1\">](~/docs/standard/io/how-to-read-text-from-a-file.md)</ept>","source":"[How to: Read Text from a File](~/docs/standard/io/how-to-read-text-from-a-file.md)"},{"pos":[1597,1619],"content":"Append text to a file.","nodes":[{"content":"Append text to a file.","pos":[0,22]}]},{"pos":[1620,1869],"content":"[How to: Open and Append to a Log File](~/docs/standard/io/how-to-open-and-append-to-a-log-file.md)<br /><br /> <xref:System.IO.File.AppendText%2A?displayProperty=fullName><br /><br /> <xref:System.IO.FileInfo.AppendText%2A?displayProperty=fullName>","nodes":[{"content":"<bpt id=\"p1\">[</bpt>How to: Open and Append to a Log File<ept id=\"p1\">](~/docs/standard/io/how-to-open-and-append-to-a-log-file.md)</ept>","pos":[0,99],"source":"[How to: Open and Append to a Log File](~/docs/standard/io/how-to-open-and-append-to-a-log-file.md)"},{"content":"<ph id=\"ph1\">&lt;xref:System.IO.File.AppendText%2A?displayProperty=fullName&gt;</ph>","pos":[112,172],"source":" <xref:System.IO.File.AppendText%2A?displayProperty=fullName>"},{"content":"<ph id=\"ph1\">&lt;xref:System.IO.FileInfo.AppendText%2A?displayProperty=fullName&gt;</ph>","pos":[185,249],"source":" <xref:System.IO.FileInfo.AppendText%2A?displayProperty=fullName>"}]},{"pos":[1874,1897],"content":"Get the size of a file.","nodes":[{"content":"Get the size of a file.","pos":[0,23]}]},{"pos":[1898,1958],"content":"<xref:System.IO.FileInfo.Length%2A?displayProperty=fullName>","nodes":[]},{"pos":[1963,1992],"content":"Get the attributes of a file.","nodes":[{"content":"Get the attributes of a file.","pos":[0,29]}]},{"pos":[1993,2056],"content":"<xref:System.IO.File.GetAttributes%2A?displayProperty=fullName>","nodes":[]},{"pos":[2061,2090],"content":"Set the attributes of a file.","nodes":[{"content":"Set the attributes of a file.","pos":[0,29]}]},{"pos":[2091,2154],"content":"<xref:System.IO.File.SetAttributes%2A?displayProperty=fullName>","nodes":[]},{"pos":[2159,2186],"content":"Determine if a file exists.","nodes":[{"content":"Determine if a file exists.","pos":[0,27]}]},{"pos":[2187,2243],"content":"<xref:System.IO.File.Exists%2A?displayProperty=fullName>","nodes":[]},{"pos":[2248,2272],"content":"Read from a binary file.","nodes":[{"content":"Read from a binary file.","pos":[0,24]}]},{"pos":[2273,2400],"content":"<bpt id=\"p1\">[</bpt>How to: Read and Write to a Newly Created Data File<ept id=\"p1\">](~/docs/standard/io/how-to-read-and-write-to-a-newly-created-data-file.md)</ept>","source":"[How to: Read and Write to a Newly Created Data File](~/docs/standard/io/how-to-read-and-write-to-a-newly-created-data-file.md)"},{"pos":[2405,2428],"content":"Write to a binary file.","nodes":[{"content":"Write to a binary file.","pos":[0,23]}]},{"pos":[2429,2556],"content":"<bpt id=\"p1\">[</bpt>How to: Read and Write to a Newly Created Data File<ept id=\"p1\">](~/docs/standard/io/how-to-read-and-write-to-a-newly-created-data-file.md)</ept>","source":"[How to: Read and Write to a Newly Created Data File](~/docs/standard/io/how-to-read-and-write-to-a-newly-created-data-file.md)"}],"pos":[36143,38732],"yaml":true,"extradata":"MT"},{"content":"The next line from the current string, or `null` if the end of the string is reached.","nodes":[{"pos":[0,85],"content":"The next line from the current string, or <ph id=\"ph1\">`null`</ph> if the end of the string is reached.","source":"The next line from the current string, or `null` if the end of the string is reached."}],"pos":[39422,39508],"yaml":true},{"content":"The current reader is closed.","nodes":[{"pos":[0,29],"content":"The current reader is closed.","nodes":[{"content":"The current reader is closed.","pos":[0,29]}]}],"pos":[39673,39703],"yaml":true},{"content":"There is insufficient memory to allocate a buffer for the returned string.","nodes":[{"pos":[0,74],"content":"There is insufficient memory to allocate a buffer for the returned string.","nodes":[{"content":"There is insufficient memory to allocate a buffer for the returned string.","pos":[0,74]}]}],"pos":[39803,39878],"yaml":true},{"content":"Reads a line of characters asynchronously from the current string and returns the data as a string.","nodes":[{"pos":[0,99],"content":"Reads a line of characters asynchronously from the current string and returns the data as a string.","nodes":[{"content":"Reads a line of characters asynchronously from the current string and returns the data as a string.","pos":[0,99]}]}],"pos":[41353,41453],"yaml":true},{"content":"A task that represents the asynchronous read operation. The value of the <code>TResult</code> parameter contains the next line from the string reader, or is `null` if all the characters have been read.","nodes":[{"pos":[0,201],"content":"A task that represents the asynchronous read operation. The value of the <code>TResult</code> parameter contains the next line from the string reader, or is `null` if all the characters have been read.","nodes":[{"content":"A task that represents the asynchronous read operation.","pos":[0,55]},{"content":"The value of the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">TResult</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter contains the next line from the string reader, or is <ph id=\"ph2\">`null`</ph> if all the characters have been read.","pos":[56,201],"source":" The value of the <code>TResult</code> parameter contains the next line from the string reader, or is `null` if all the characters have been read."}]}],"pos":[42111,42313],"yaml":true},{"content":"The number of characters in the next line is larger than <xref href=\"System.Int32.MaxValue\"></xref>.","nodes":[{"pos":[0,100],"content":"The number of characters in the next line is larger than <ph id=\"ph1\">&lt;xref href=\"System.Int32.MaxValue\"&gt;&lt;/xref&gt;</ph>.","source":"The number of characters in the next line is larger than <xref href=\"System.Int32.MaxValue\"></xref>."}],"pos":[42491,42592],"yaml":true},{"content":"The string reader has been disposed.","nodes":[{"pos":[0,36],"content":"The string reader has been disposed.","nodes":[{"content":"The string reader has been disposed.","pos":[0,36]}]}],"pos":[42698,42735],"yaml":true},{"content":"The reader is currently in use by a previous read operation.","nodes":[{"pos":[0,60],"content":"The reader is currently in use by a previous read operation.","nodes":[{"content":"The reader is currently in use by a previous read operation.","pos":[0,60]}]}],"pos":[42845,42906],"yaml":true},{"content":"Reads all characters from the current position to the end of the string and returns them as a single string.","nodes":[{"pos":[0,108],"content":"Reads all characters from the current position to the end of the string and returns them as a single string.","nodes":[{"content":"Reads all characters from the current position to the end of the string and returns them as a single string.","pos":[0,108]}]}],"pos":[44432,44541],"yaml":true},{"content":"This method overrides the <xref:System.IO.TextReader.ReadToEnd%2A?displayProperty=fullName> method.  \n  \n If the current method throws an <xref:System.OutOfMemoryException>, the reader's position in the underlying string is advanced by the number of characters the method was able to read, but the characters already read into the internal <xref:System.IO.StringReader.ReadToEnd%2A> buffer are discarded. Because the position of the reader in the string cannot be changed, the characters already read are unrecoverable, and can be accessed only by reinitializing the <xref:System.IO.StringReader>. To avoid such a situation, use the <xref:System.IO.StringReader.Read%2A> method and store the read characters in a preallocated buffer.  \n  \n The following table lists examples of other typical or related I/O tasks.  \n  \n|To do this...|See the example in this topic...|  \n|-------------------|--------------------------------------|  \n|Create a text file.|[How to: Write Text to a File](~/docs/standard/io/how-to-write-text-to-a-file.md)|  \n|Write to a text file.|[How to: Write Text to a File](~/docs/standard/io/how-to-write-text-to-a-file.md)|  \n|Read from a text file.|[How to: Read Text from a File](~/docs/standard/io/how-to-read-text-from-a-file.md)|  \n|Append text to a file.|[How to: Open and Append to a Log File](~/docs/standard/io/how-to-open-and-append-to-a-log-file.md)<br /><br /> <xref:System.IO.File.AppendText%2A?displayProperty=fullName><br /><br /> <xref:System.IO.FileInfo.AppendText%2A?displayProperty=fullName>|  \n|Get the size of a file.|<xref:System.IO.FileInfo.Length%2A?displayProperty=fullName>|  \n|Get the attributes of a file.|<xref:System.IO.File.GetAttributes%2A?displayProperty=fullName>|  \n|Set the attributes of a file.|<xref:System.IO.File.SetAttributes%2A?displayProperty=fullName>|  \n|Determine if a file exists.|<xref:System.IO.File.Exists%2A?displayProperty=fullName>|  \n|Read from a binary file.|[How to: Read and Write to a Newly Created Data File](~/docs/standard/io/how-to-read-and-write-to-a-newly-created-data-file.md)|  \n|Write to a binary file.|[How to: Read and Write to a Newly Created Data File](~/docs/standard/io/how-to-read-and-write-to-a-newly-created-data-file.md)|","nodes":[{"pos":[0,99],"content":"This method overrides the <xref:System.IO.TextReader.ReadToEnd%2A?displayProperty=fullName> method.","nodes":[{"content":"This method overrides the <ph id=\"ph1\">&lt;xref:System.IO.TextReader.ReadToEnd%2A?displayProperty=fullName&gt;</ph> method.","pos":[0,99],"source":"This method overrides the <xref:System.IO.TextReader.ReadToEnd%2A?displayProperty=fullName> method."}]},{"pos":[106,733],"content":"If the current method throws an <xref:System.OutOfMemoryException>, the reader's position in the underlying string is advanced by the number of characters the method was able to read, but the characters already read into the internal <xref:System.IO.StringReader.ReadToEnd%2A> buffer are discarded. Because the position of the reader in the string cannot be changed, the characters already read are unrecoverable, and can be accessed only by reinitializing the <xref:System.IO.StringReader>. To avoid such a situation, use the <xref:System.IO.StringReader.Read%2A> method and store the read characters in a preallocated buffer.","nodes":[{"content":"If the current method throws an <xref:System.OutOfMemoryException>, the reader's position in the underlying string is advanced by the number of characters the method was able to read, but the characters already read into the internal <xref:System.IO.StringReader.ReadToEnd%2A> buffer are discarded. Because the position of the reader in the string cannot be changed, the characters already read are unrecoverable, and can be accessed only by reinitializing the <xref:System.IO.StringReader>. To avoid such a situation, use the <xref:System.IO.StringReader.Read%2A> method and store the read characters in a preallocated buffer.","pos":[0,627],"nodes":[{"content":"If the current method throws an <ph id=\"ph1\">&lt;xref:System.OutOfMemoryException&gt;</ph>, the reader's position in the underlying string is advanced by the number of characters the method was able to read, but the characters already read into the internal <ph id=\"ph2\">&lt;xref:System.IO.StringReader.ReadToEnd%2A&gt;</ph> buffer are discarded.","pos":[0,298],"source":"If the current method throws an <xref:System.OutOfMemoryException>, the reader's position in the underlying string is advanced by the number of characters the method was able to read, but the characters already read into the internal <xref:System.IO.StringReader.ReadToEnd%2A> buffer are discarded."},{"content":"Because the position of the reader in the string cannot be changed, the characters already read are unrecoverable, and can be accessed only by reinitializing the <ph id=\"ph1\">&lt;xref:System.IO.StringReader&gt;</ph>.","pos":[299,491],"source":" Because the position of the reader in the string cannot be changed, the characters already read are unrecoverable, and can be accessed only by reinitializing the <xref:System.IO.StringReader>."},{"content":"To avoid such a situation, use the <ph id=\"ph1\">&lt;xref:System.IO.StringReader.Read%2A&gt;</ph> method and store the read characters in a preallocated buffer.","pos":[492,627],"source":" To avoid such a situation, use the <xref:System.IO.StringReader.Read%2A> method and store the read characters in a preallocated buffer."}]}]},{"pos":[740,813],"content":"The following table lists examples of other typical or related I/O tasks.","nodes":[{"content":"The following table lists examples of other typical or related I/O tasks.","pos":[0,73]}]},{"pos":[820,833],"content":"To do this...","nodes":[{"content":"To do this...","pos":[0,13]}]},{"pos":[834,866],"content":"See the example in this topic...","nodes":[{"content":"See the example in this topic...","pos":[0,32]}]},{"pos":[934,953],"content":"Create a text file.","nodes":[{"content":"Create a text file.","pos":[0,19]}]},{"pos":[954,1035],"content":"<bpt id=\"p1\">[</bpt>How to: Write Text to a File<ept id=\"p1\">](~/docs/standard/io/how-to-write-text-to-a-file.md)</ept>","source":"[How to: Write Text to a File](~/docs/standard/io/how-to-write-text-to-a-file.md)"},{"pos":[1040,1061],"content":"Write to a text file.","nodes":[{"content":"Write to a text file.","pos":[0,21]}]},{"pos":[1062,1143],"content":"<bpt id=\"p1\">[</bpt>How to: Write Text to a File<ept id=\"p1\">](~/docs/standard/io/how-to-write-text-to-a-file.md)</ept>","source":"[How to: Write Text to a File](~/docs/standard/io/how-to-write-text-to-a-file.md)"},{"pos":[1148,1170],"content":"Read from a text file.","nodes":[{"content":"Read from a text file.","pos":[0,22]}]},{"pos":[1171,1254],"content":"<bpt id=\"p1\">[</bpt>How to: Read Text from a File<ept id=\"p1\">](~/docs/standard/io/how-to-read-text-from-a-file.md)</ept>","source":"[How to: Read Text from a File](~/docs/standard/io/how-to-read-text-from-a-file.md)"},{"pos":[1259,1281],"content":"Append text to a file.","nodes":[{"content":"Append text to a file.","pos":[0,22]}]},{"pos":[1282,1531],"content":"[How to: Open and Append to a Log File](~/docs/standard/io/how-to-open-and-append-to-a-log-file.md)<br /><br /> <xref:System.IO.File.AppendText%2A?displayProperty=fullName><br /><br /> <xref:System.IO.FileInfo.AppendText%2A?displayProperty=fullName>","nodes":[{"content":"<bpt id=\"p1\">[</bpt>How to: Open and Append to a Log File<ept id=\"p1\">](~/docs/standard/io/how-to-open-and-append-to-a-log-file.md)</ept>","pos":[0,99],"source":"[How to: Open and Append to a Log File](~/docs/standard/io/how-to-open-and-append-to-a-log-file.md)"},{"content":"<ph id=\"ph1\">&lt;xref:System.IO.File.AppendText%2A?displayProperty=fullName&gt;</ph>","pos":[112,172],"source":" <xref:System.IO.File.AppendText%2A?displayProperty=fullName>"},{"content":"<ph id=\"ph1\">&lt;xref:System.IO.FileInfo.AppendText%2A?displayProperty=fullName&gt;</ph>","pos":[185,249],"source":" <xref:System.IO.FileInfo.AppendText%2A?displayProperty=fullName>"}]},{"pos":[1536,1559],"content":"Get the size of a file.","nodes":[{"content":"Get the size of a file.","pos":[0,23]}]},{"pos":[1560,1620],"content":"<xref:System.IO.FileInfo.Length%2A?displayProperty=fullName>","nodes":[]},{"pos":[1625,1654],"content":"Get the attributes of a file.","nodes":[{"content":"Get the attributes of a file.","pos":[0,29]}]},{"pos":[1655,1718],"content":"<xref:System.IO.File.GetAttributes%2A?displayProperty=fullName>","nodes":[]},{"pos":[1723,1752],"content":"Set the attributes of a file.","nodes":[{"content":"Set the attributes of a file.","pos":[0,29]}]},{"pos":[1753,1816],"content":"<xref:System.IO.File.SetAttributes%2A?displayProperty=fullName>","nodes":[]},{"pos":[1821,1848],"content":"Determine if a file exists.","nodes":[{"content":"Determine if a file exists.","pos":[0,27]}]},{"pos":[1849,1905],"content":"<xref:System.IO.File.Exists%2A?displayProperty=fullName>","nodes":[]},{"pos":[1910,1934],"content":"Read from a binary file.","nodes":[{"content":"Read from a binary file.","pos":[0,24]}]},{"pos":[1935,2062],"content":"<bpt id=\"p1\">[</bpt>How to: Read and Write to a Newly Created Data File<ept id=\"p1\">](~/docs/standard/io/how-to-read-and-write-to-a-newly-created-data-file.md)</ept>","source":"[How to: Read and Write to a Newly Created Data File](~/docs/standard/io/how-to-read-and-write-to-a-newly-created-data-file.md)"},{"pos":[2067,2090],"content":"Write to a binary file.","nodes":[{"content":"Write to a binary file.","pos":[0,23]}]},{"pos":[2091,2218],"content":"<bpt id=\"p1\">[</bpt>How to: Read and Write to a Newly Created Data File<ept id=\"p1\">](~/docs/standard/io/how-to-read-and-write-to-a-newly-created-data-file.md)</ept>","source":"[How to: Read and Write to a Newly Created Data File](~/docs/standard/io/how-to-read-and-write-to-a-newly-created-data-file.md)"}],"pos":[44552,46791],"yaml":true,"extradata":"MT"},{"content":"The content from the current position to the end of the underlying string.","nodes":[{"pos":[0,74],"content":"The content from the current position to the end of the underlying string.","nodes":[{"content":"The content from the current position to the end of the underlying string.","pos":[0,74]}]}],"pos":[47462,47537],"yaml":true},{"content":"There is insufficient memory to allocate a buffer for the returned string.","nodes":[{"pos":[0,74],"content":"There is insufficient memory to allocate a buffer for the returned string.","nodes":[{"content":"There is insufficient memory to allocate a buffer for the returned string.","pos":[0,74]}]}],"pos":[47697,47772],"yaml":true},{"content":"The current reader is closed.","nodes":[{"pos":[0,29],"content":"The current reader is closed.","nodes":[{"content":"The current reader is closed.","pos":[0,29]}]}],"pos":[47878,47908],"yaml":true},{"content":"Reads all characters from the current position to the end of the string asynchronously and returns them as a single string.","nodes":[{"pos":[0,123],"content":"Reads all characters from the current position to the end of the string asynchronously and returns them as a single string.","nodes":[{"content":"Reads all characters from the current position to the end of the string asynchronously and returns them as a single string.","pos":[0,123]}]}],"pos":[49389,49513],"yaml":true},{"content":"A task that represents the asynchronous read operation. The value of the <code>TResult</code> parameter contains a string with the characters from the current position to the end of the string.","nodes":[{"pos":[0,193],"content":"A task that represents the asynchronous read operation. The value of the <code>TResult</code> parameter contains a string with the characters from the current position to the end of the string.","nodes":[{"content":"A task that represents the asynchronous read operation.","pos":[0,55]},{"content":"The value of the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">TResult</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter contains a string with the characters from the current position to the end of the string.","pos":[56,193],"source":" The value of the <code>TResult</code> parameter contains a string with the characters from the current position to the end of the string."}]}],"pos":[50156,50350],"yaml":true},{"content":"The number of characters is larger than <xref href=\"System.Int32.MaxValue\"></xref>.","nodes":[{"pos":[0,83],"content":"The number of characters is larger than <ph id=\"ph1\">&lt;xref href=\"System.Int32.MaxValue\"&gt;&lt;/xref&gt;</ph>.","source":"The number of characters is larger than <xref href=\"System.Int32.MaxValue\"></xref>."}],"pos":[50529,50613],"yaml":true},{"content":"The string reader has been disposed.","nodes":[{"pos":[0,36],"content":"The string reader has been disposed.","nodes":[{"content":"The string reader has been disposed.","pos":[0,36]}]}],"pos":[50719,50756],"yaml":true},{"content":"The reader is currently in use by a previous read operation.","nodes":[{"pos":[0,60],"content":"The reader is currently in use by a previous read operation.","nodes":[{"content":"The reader is currently in use by a previous read operation.","pos":[0,60]}]}],"pos":[50866,50927],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.IO.StringReader\n  commentId: T:System.IO.StringReader\n  id: StringReader\n  children:\n  - System.IO.StringReader.#ctor(System.String)\n  - System.IO.StringReader.Close\n  - System.IO.StringReader.Dispose(System.Boolean)\n  - System.IO.StringReader.Peek\n  - System.IO.StringReader.Read\n  - System.IO.StringReader.Read(System.Char[],System.Int32,System.Int32)\n  - System.IO.StringReader.ReadAsync(System.Char[],System.Int32,System.Int32)\n  - System.IO.StringReader.ReadBlockAsync(System.Char[],System.Int32,System.Int32)\n  - System.IO.StringReader.ReadLine\n  - System.IO.StringReader.ReadLineAsync\n  - System.IO.StringReader.ReadToEnd\n  - System.IO.StringReader.ReadToEndAsync\n  langs:\n  - csharp\n  name: StringReader\n  nameWithType: StringReader\n  fullName: System.IO.StringReader\n  type: Class\n  assemblies:\n  - System.IO\n  - mscorlib\n  - netstandard\n  - System.Runtime.Extensions\n  namespace: System.IO\n  summary: Implements a <xref href=\"System.IO.TextReader\"></xref> that reads from a string.\n  remarks: \"<xref:System.IO.StringReader> enables you to read a string synchronously or asynchronously. You can read a character at a time with the <xref:System.IO.StringReader.Read%2A> or the <xref:System.IO.StringReader.ReadAsync%2A> method, a line at a time using the <xref:System.IO.StringReader.ReadLine%2A> or the <xref:System.IO.StringReader.ReadLineAsync%2A> method and an entire string using the <xref:System.IO.StringReader.ReadToEnd%2A> or the <xref:System.IO.StringReader.ReadToEndAsync%2A> method.  \\n  \\n> [!IMPORTANT]\\n>  This type implements the <xref:System.IDisposable> interface. When you have finished using the type, you should dispose of it either directly or indirectly. To dispose of the type directly, call its <xref:System.IDisposable.Dispose%2A> method in a `try`/`catch` block. To dispose of it indirectly, use a language construct such as `using` (in C#) or `Using` (in Visual Basic). For more information, see the \\\"Using an Object that Implements IDisposable\\\" section in the <xref:System.IDisposable> interface topic.  \\n  \\n The following table lists examples of other typical or related I/O tasks.  \\n  \\n|To do this...|See the example in this topic...|  \\n|-------------------|--------------------------------------|  \\n|Create a text file.|[How to: Write Text to a File](~/docs/standard/io/how-to-write-text-to-a-file.md)|  \\n|Write to a text file.|[How to: Write Text to a File](~/docs/standard/io/how-to-write-text-to-a-file.md)|  \\n|Read from a text file.|[How to: Read Text from a File](~/docs/standard/io/how-to-read-text-from-a-file.md)|  \\n|Append text to a file.|[How to: Open and Append to a Log File](~/docs/standard/io/how-to-open-and-append-to-a-log-file.md)<br /><br /> <xref:System.IO.File.AppendText%2A?displayProperty=fullName><br /><br /> <xref:System.IO.FileInfo.AppendText%2A?displayProperty=fullName>|  \\n|Get the size of a file.|<xref:System.IO.FileInfo.Length%2A?displayProperty=fullName>|  \\n|Get the attributes of a file.|<xref:System.IO.File.GetAttributes%2A?displayProperty=fullName>|  \\n|Set the attributes of a file.|<xref:System.IO.File.SetAttributes%2A?displayProperty=fullName>|  \\n|Determine if a file exists.|<xref:System.IO.File.Exists%2A?displayProperty=fullName>|  \\n|Read from a binary file.|[How to: Read and Write to a Newly Created Data File](~/docs/standard/io/how-to-read-and-write-to-a-newly-created-data-file.md)|  \\n|Write to a binary file.|[How to: Read and Write to a Newly Created Data File](~/docs/standard/io/how-to-read-and-write-to-a-newly-created-data-file.md)|\"\n  example:\n  - \"The following example shows how to read an entire string asynchronously.  \\n  \\n [!code-csharp[System.IO.StringReader#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.io.stringreader/cs/example2.cs#2)]\\n [!code-vb[System.IO.StringReader#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.io.stringreader/vb/example2.vb#2)]\"\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(true)]\n\n      public class StringReader : System.IO.TextReader\n  inheritance:\n  - System.Object\n  - System.IO.TextReader\n  implements: []\n  inheritedMembers:\n  - System.IO.TextReader.Dispose\n  - System.IO.TextReader.Null\n  - System.IO.TextReader.ReadBlock(System.Char[],System.Int32,System.Int32)\n  - System.IO.TextReader.Synchronized(System.IO.TextReader)\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.ToString\n  attributes:\n  - type: System.Runtime.InteropServices.ComVisibleAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/StringReader.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.IO.StringReader.#ctor(System.String)\n  commentId: M:System.IO.StringReader.#ctor(System.String)\n  id: '#ctor(System.String)'\n  parent: System.IO.StringReader\n  langs:\n  - csharp\n  name: StringReader(String)\n  nameWithType: StringReader.StringReader(String)\n  fullName: StringReader.StringReader(String)\n  type: Constructor\n  assemblies:\n  - System.IO\n  - mscorlib\n  - netstandard\n  - System.Runtime.Extensions\n  namespace: System.IO\n  summary: Initializes a new instance of the <xref href=\"System.IO.StringReader\"></xref> class that reads from the specified string.\n  remarks: \"The following table lists examples of other typical or related I/O tasks.  \\n  \\n|To do this...|See the example in this topic...|  \\n|-------------------|--------------------------------------|  \\n|Create a text file.|[How to: Write Text to a File](~/docs/standard/io/how-to-write-text-to-a-file.md)|  \\n|Write to a text file.|[How to: Write Text to a File](~/docs/standard/io/how-to-write-text-to-a-file.md)|  \\n|Read from a text file.|[How to: Read Text from a File](~/docs/standard/io/how-to-read-text-from-a-file.md)|  \\n|Append text to a file.|[How to: Open and Append to a Log File](~/docs/standard/io/how-to-open-and-append-to-a-log-file.md)<br /><br /> <xref:System.IO.File.AppendText%2A?displayProperty=fullName><br /><br /> <xref:System.IO.FileInfo.AppendText%2A?displayProperty=fullName>|  \\n|Get the size of a file.|<xref:System.IO.FileInfo.Length%2A?displayProperty=fullName>|  \\n|Get the attributes of a file.|<xref:System.IO.File.GetAttributes%2A?displayProperty=fullName>|  \\n|Set the attributes of a file.|<xref:System.IO.File.SetAttributes%2A?displayProperty=fullName>|  \\n|Determine if a file exists.|<xref:System.IO.File.Exists%2A?displayProperty=fullName>|  \\n|Read from a binary file.|[How to: Read and Write to a Newly Created Data File](~/docs/standard/io/how-to-read-and-write-to-a-newly-created-data-file.md)|  \\n|Write to a binary file.|[How to: Read and Write to a Newly Created Data File](~/docs/standard/io/how-to-read-and-write-to-a-newly-created-data-file.md)|\"\n  example:\n  - \"This code example is part of a larger example provided for the <xref:System.IO.StringReader> class.  \\n  \\n [!code-cpp[System.IO.StringReaderWriter#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IO.StringReaderWriter/CPP/stringrw.cpp#2)]\\n [!code-csharp[System.IO.StringReaderWriter#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.StringReaderWriter/CS/stringrw.cs#2)]\\n [!code-vb[System.IO.StringReaderWriter#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.StringReaderWriter/VB/stringrw.vb#2)]\"\n  syntax:\n    content: public StringReader (string s);\n    parameters:\n    - id: s\n      type: System.String\n      description: The string to which the <xref href=\"System.IO.StringReader\"></xref> should be initialized.\n  overload: System.IO.StringReader.#ctor*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>s</code> parameter is `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/StringReader.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.IO.StringReader.Close\n  commentId: M:System.IO.StringReader.Close\n  id: Close\n  parent: System.IO.StringReader\n  langs:\n  - csharp\n  name: Close()\n  nameWithType: StringReader.Close()\n  fullName: StringReader.Close()\n  type: Method\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime.Extensions\n  namespace: System.IO\n  summary: Closes the <xref href=\"System.IO.StringReader\"></xref>.\n  remarks: \"For an example of creating a file and writing text to a file, see [How to: Write Text to a File](~/docs/standard/io/how-to-write-text-to-a-file.md). For an example of reading text from a file, see [How to: Read Text from a File](~/docs/standard/io/how-to-read-text-from-a-file.md). For an example of reading from and writing to a binary file, see [How to: Read and Write to a Newly Created Data File](~/docs/standard/io/how-to-read-and-write-to-a-newly-created-data-file.md).  \\n  \\n This method overrides the <xref:System.IO.Stream.Close%2A?displayProperty=fullName> method.  \\n  \\n This implementation of `Close` calls the <xref:System.IO.StringReader.Dispose%2A> method passing a `true` value.  \\n  \\n Flushing the stream will not flush its underlying encoder unless you explicitly call `Close`. Setting <xref:System.IO.StreamWriter.AutoFlush%2A> to `true` means that data will be flushed from the buffer to the stream, but the encoder state will not be flushed. This allows the encoder to keep its state (partial characters) so that it can encode the next block of characters correctly. This scenario affects UTF8 and UTF7 where certain characters can only be encoded after the encoder receives the adjacent character or characters.  \\n  \\n Following a call to `Close`, other methods might throw an exception.\"\n  syntax:\n    content: public override void Close ();\n    parameters: []\n  overload: System.IO.StringReader.Close*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/StringReader.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.IO.StringReader.Dispose(System.Boolean)\n  commentId: M:System.IO.StringReader.Dispose(System.Boolean)\n  id: Dispose(System.Boolean)\n  parent: System.IO.StringReader\n  langs:\n  - csharp\n  name: Dispose(Boolean)\n  nameWithType: StringReader.Dispose(Boolean)\n  fullName: StringReader.Dispose(Boolean)\n  type: Method\n  assemblies:\n  - System.IO\n  - mscorlib\n  - netstandard\n  - System.Runtime.Extensions\n  namespace: System.IO\n  summary: Releases the unmanaged resources used by the <xref href=\"System.IO.StringReader\"></xref> and optionally releases the managed resources.\n  remarks: When the `disposing` parameter is `true`, this method releases all resources held by any managed objects that this <xref:System.IO.StringReader> references. This method invokes the `Dispose` method of each referenced object.\n  syntax:\n    content: protected override void Dispose (bool disposing);\n    parameters:\n    - id: disposing\n      type: System.Boolean\n      description: '`true` to release both managed and unmanaged resources; `false` to release only unmanaged resources.'\n  overload: System.IO.StringReader.Dispose*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/StringReader.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.IO.StringReader.Peek\n  commentId: M:System.IO.StringReader.Peek\n  id: Peek\n  parent: System.IO.StringReader\n  langs:\n  - csharp\n  name: Peek()\n  nameWithType: StringReader.Peek()\n  fullName: StringReader.Peek()\n  type: Method\n  assemblies:\n  - System.IO\n  - mscorlib\n  - netstandard\n  - System.Runtime.Extensions\n  namespace: System.IO\n  summary: Returns the next available character but does not consume it.\n  remarks: \"The <xref:System.IO.StringReader.Peek%2A> method returns an integer value in order to determine whether the end of the file, or another error has occurred. This allows a user to first check if the returned value is -1 before casting it to a <xref:System.Char> type.  \\n  \\n This method overrides the <xref:System.IO.TextReader.Peek%2A?displayProperty=fullName> method.  \\n  \\n The current position of the `StringReader` is not changed by this operation.  \\n  \\n The following table lists examples of other typical or related I/O tasks.  \\n  \\n|To do this...|See the example in this topic...|  \\n|-------------------|--------------------------------------|  \\n|Create a text file.|[How to: Write Text to a File](~/docs/standard/io/how-to-write-text-to-a-file.md)|  \\n|Write to a text file.|[How to: Write Text to a File](~/docs/standard/io/how-to-write-text-to-a-file.md)|  \\n|Read from a text file.|[How to: Read Text from a File](~/docs/standard/io/how-to-read-text-from-a-file.md)|  \\n|Get the size of a file.|<xref:System.IO.FileInfo.Length%2A?displayProperty=fullName>|\"\n  syntax:\n    content: public override int Peek ();\n    parameters: []\n    return:\n      type: System.Int32\n      description: An integer representing the next character to be read, or -1 if no more characters are available or the stream does not support seeking.\n  overload: System.IO.StringReader.Peek*\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The current reader is closed.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/StringReader.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.IO.StringReader.Read\n  commentId: M:System.IO.StringReader.Read\n  id: Read\n  parent: System.IO.StringReader\n  langs:\n  - csharp\n  name: Read()\n  nameWithType: StringReader.Read()\n  fullName: StringReader.Read()\n  type: Method\n  assemblies:\n  - System.IO\n  - mscorlib\n  - netstandard\n  - System.Runtime.Extensions\n  namespace: System.IO\n  summary: Reads the next character from the input string and advances the character position by one character.\n  remarks: \"This method overrides the <xref:System.IO.TextReader.Read%2A?displayProperty=fullName> method.  \\n  \\n The following table lists examples of other typical or related I/O tasks.  \\n  \\n|To do this...|See the example in this topic...|  \\n|-------------------|--------------------------------------|  \\n|Create a text file.|[How to: Write Text to a File](~/docs/standard/io/how-to-write-text-to-a-file.md)|  \\n|Write to a text file.|[How to: Write Text to a File](~/docs/standard/io/how-to-write-text-to-a-file.md)|  \\n|Read from a text file.|[How to: Read Text from a File](~/docs/standard/io/how-to-read-text-from-a-file.md)|  \\n|Append text to a file.|[How to: Open and Append to a Log File](~/docs/standard/io/how-to-open-and-append-to-a-log-file.md)<br /><br /> <xref:System.IO.File.AppendText%2A?displayProperty=fullName><br /><br /> <xref:System.IO.FileInfo.AppendText%2A?displayProperty=fullName>|  \\n|Get the size of a file.|<xref:System.IO.FileInfo.Length%2A?displayProperty=fullName>|  \\n|Get the attributes of a file.|<xref:System.IO.File.GetAttributes%2A?displayProperty=fullName>|  \\n|Set the attributes of a file.|<xref:System.IO.File.SetAttributes%2A?displayProperty=fullName>|  \\n|Determine if a file exists.|<xref:System.IO.File.Exists%2A?displayProperty=fullName>|  \\n|Read from a binary file.|[How to: Read and Write to a Newly Created Data File](~/docs/standard/io/how-to-read-and-write-to-a-newly-created-data-file.md)|  \\n|Write to a binary file.|[How to: Read and Write to a Newly Created Data File](~/docs/standard/io/how-to-read-and-write-to-a-newly-created-data-file.md)|\"\n  example:\n  - \"This code example is part of a larger example provided for the <xref:System.IO.StringReader> class.  \\n  \\n [!code-cpp[System.IO.StringReaderWriter#3](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IO.StringReaderWriter/CPP/stringrw.cpp#3)]\\n [!code-csharp[System.IO.StringReaderWriter#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.StringReaderWriter/CS/stringrw.cs#3)]\\n [!code-vb[System.IO.StringReaderWriter#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.StringReaderWriter/VB/stringrw.vb#3)]\"\n  syntax:\n    content: public override int Read ();\n    parameters: []\n    return:\n      type: System.Int32\n      description: The next character from the underlying string, or -1 if no more characters are available.\n  overload: System.IO.StringReader.Read*\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The current reader is closed.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/StringReader.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.IO.StringReader.Read(System.Char[],System.Int32,System.Int32)\n  commentId: M:System.IO.StringReader.Read(System.Char[],System.Int32,System.Int32)\n  id: Read(System.Char[],System.Int32,System.Int32)\n  parent: System.IO.StringReader\n  langs:\n  - csharp\n  name: Read(Char[], Int32, Int32)\n  nameWithType: StringReader.Read(Char[], Int32, Int32)\n  fullName: StringReader.Read(Char[], Int32, Int32)\n  type: Method\n  assemblies:\n  - System.IO\n  - mscorlib\n  - netstandard\n  - System.Runtime.Extensions\n  namespace: System.IO\n  summary: Reads a block of characters from the input string and advances the character position by <code>count</code>.\n  remarks: \"This method overrides <xref:System.IO.TextReader.Read%2A?displayProperty=fullName>.  \\n  \\n The method will read up to `count` characters from the <xref:System.IO.StringReader> into the `buffer` character array starting at position `index`. Returns the actual number of characters read, or zero if the end of the string has been reached and no characters are read.  \\n  \\n The following table lists examples of other typical or related I/O tasks.  \\n  \\n|To do this...|See the example in this topic...|  \\n|-------------------|--------------------------------------|  \\n|Create a text file.|[How to: Write Text to a File](~/docs/standard/io/how-to-write-text-to-a-file.md)|  \\n|Write to a text file.|[How to: Write Text to a File](~/docs/standard/io/how-to-write-text-to-a-file.md)|  \\n|Read from a text file.|[How to: Read Text from a File](~/docs/standard/io/how-to-read-text-from-a-file.md)|  \\n|Append text to a file.|[How to: Open and Append to a Log File](~/docs/standard/io/how-to-open-and-append-to-a-log-file.md)<br /><br /> <xref:System.IO.File.AppendText%2A?displayProperty=fullName><br /><br /> <xref:System.IO.FileInfo.AppendText%2A?displayProperty=fullName>|  \\n|Get the size of a file.|<xref:System.IO.FileInfo.Length%2A?displayProperty=fullName>|  \\n|Get the attributes of a file.|<xref:System.IO.File.GetAttributes%2A?displayProperty=fullName>|  \\n|Set the attributes of a file.|<xref:System.IO.File.SetAttributes%2A?displayProperty=fullName>|  \\n|Determine if a file exists.|<xref:System.IO.File.Exists%2A?displayProperty=fullName>|  \\n|Read from a binary file.|[How to: Read and Write to a Newly Created Data File](~/docs/standard/io/how-to-read-and-write-to-a-newly-created-data-file.md)|  \\n|Write to a binary file.|[How to: Read and Write to a Newly Created Data File](~/docs/standard/io/how-to-read-and-write-to-a-newly-created-data-file.md)|\"\n  syntax:\n    content: public override int Read (char[] buffer, int index, int count);\n    parameters:\n    - id: buffer\n      type: System.Char[]\n      description: When this method returns, contains the specified character array with the values between <code>index</code> and (<code>index</code> + <code>count</code> - 1) replaced by the characters read from the current source.\n    - id: index\n      type: System.Int32\n      description: The starting index in the buffer.\n    - id: count\n      type: System.Int32\n      description: The number of characters to read.\n    return:\n      type: System.Int32\n      description: The total number of characters read into the buffer. This can be less than the number of characters requested if that many characters are not currently available, or zero if the end of the underlying string has been reached.\n  overload: System.IO.StringReader.Read*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>buffer</code> is `null`.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The buffer length minus <code>index</code> is less than <code>count</code>.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>index</code> or <code>count</code> is negative.\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The current reader is closed.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/StringReader.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.IO.StringReader.ReadAsync(System.Char[],System.Int32,System.Int32)\n  commentId: M:System.IO.StringReader.ReadAsync(System.Char[],System.Int32,System.Int32)\n  id: ReadAsync(System.Char[],System.Int32,System.Int32)\n  parent: System.IO.StringReader\n  langs:\n  - csharp\n  name: ReadAsync(Char[], Int32, Int32)\n  nameWithType: StringReader.ReadAsync(Char[], Int32, Int32)\n  fullName: StringReader.ReadAsync(Char[], Int32, Int32)\n  type: Method\n  assemblies:\n  - System.IO\n  - mscorlib\n  - netstandard\n  - System.Runtime.Extensions\n  namespace: System.IO\n  summary: Reads a specified maximum number of characters from the current string asynchronously and writes the data to a buffer, beginning at the specified index.\n  remarks: The task completes after either the number of characters specified by the `count` parameter are read or the end of the string is reached.\n  example:\n  - \"The following example shows how to read the first 23 characters of a string asynchronously.  \\n  \\n [!code-csharp[System.IO.StringReader#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.io.stringreader/cs/example1.cs#1)]\\n [!code-vb[System.IO.StringReader#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.io.stringreader/vb/example1.vb#1)]\"\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(false)]\n\n      public override System.Threading.Tasks.Task<int> ReadAsync (char[] buffer, int index, int count);\n    parameters:\n    - id: buffer\n      type: System.Char[]\n      description: When this method returns, contains the specified character array with the values between <code>index</code> and (<code>index</code> + <code>count</code> - 1) replaced by the characters read from the current source.\n    - id: index\n      type: System.Int32\n      description: The position in <code>buffer</code> at which to begin writing.\n    - id: count\n      type: System.Int32\n      description: The maximum number of characters to read. If the end of the string is reached before the specified number of characters is written into the buffer, the method returns.\n    return:\n      type: System.Threading.Tasks.Task{System.Int32}\n      description: A task that represents the asynchronous read operation. The value of the <code>TResult</code> parameter contains the total number of bytes read into the buffer. The result value can be less than the number of bytes requested if the number of bytes currently available is less than the requested number, or it can be 0 (zero) if the end of the string has been reached.\n  overload: System.IO.StringReader.ReadAsync*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>buffer</code> is `null`.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>index</code> or <code>count</code> is negative.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The sum of <code>index</code> and <code>count</code> is larger than the buffer length.\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The string reader has been disposed.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The reader is currently in use by a previous read operation.\n  attributes:\n  - type: System.Runtime.InteropServices.ComVisibleAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/StringReader.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.IO.StringReader.ReadBlockAsync(System.Char[],System.Int32,System.Int32)\n  commentId: M:System.IO.StringReader.ReadBlockAsync(System.Char[],System.Int32,System.Int32)\n  id: ReadBlockAsync(System.Char[],System.Int32,System.Int32)\n  parent: System.IO.StringReader\n  langs:\n  - csharp\n  name: ReadBlockAsync(Char[], Int32, Int32)\n  nameWithType: StringReader.ReadBlockAsync(Char[], Int32, Int32)\n  fullName: StringReader.ReadBlockAsync(Char[], Int32, Int32)\n  type: Method\n  assemblies:\n  - System.IO\n  - mscorlib\n  - netstandard\n  - System.Runtime.Extensions\n  namespace: System.IO\n  summary: Reads a specified maximum number of characters from the current string asynchronously and writes the data to a buffer, beginning at the specified index.\n  remarks: The task does not complete until either the number of characters specified by the `count` parameter are read, or the end of the string has been reached.\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(false)]\n\n      public override System.Threading.Tasks.Task<int> ReadBlockAsync (char[] buffer, int index, int count);\n    parameters:\n    - id: buffer\n      type: System.Char[]\n      description: When this method returns, contains the specified character array with the values between <code>index</code> and (<code>index</code> + <code>count</code> - 1) replaced by the characters read from the current source.\n    - id: index\n      type: System.Int32\n      description: The position in <code>buffer</code> at which to begin writing.\n    - id: count\n      type: System.Int32\n      description: The maximum number of characters to read. If the end of the string is reached before the specified number of characters is written into the buffer, the method returns.\n    return:\n      type: System.Threading.Tasks.Task{System.Int32}\n      description: A task that represents the asynchronous read operation. The value of the <code>TResult</code> parameter contains the total number of bytes read into the buffer. The result value can be less than the number of bytes requested if the number of bytes currently available is less than the requested number, or it can be 0 (zero) if the end of the string has been reached.\n  overload: System.IO.StringReader.ReadBlockAsync*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>buffer</code> is `null`.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>index</code> or <code>count</code> is negative.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The sum of <code>index</code> and <code>count</code> is larger than the buffer length.\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The string reader has been disposed.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The reader is currently in use by a previous read operation.\n  attributes:\n  - type: System.Runtime.InteropServices.ComVisibleAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/StringReader.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.IO.StringReader.ReadLine\n  commentId: M:System.IO.StringReader.ReadLine\n  id: ReadLine\n  parent: System.IO.StringReader\n  langs:\n  - csharp\n  name: ReadLine()\n  nameWithType: StringReader.ReadLine()\n  fullName: StringReader.ReadLine()\n  type: Method\n  assemblies:\n  - System.IO\n  - mscorlib\n  - netstandard\n  - System.Runtime.Extensions\n  namespace: System.IO\n  summary: Reads a line of characters from the current string and returns the data as a string.\n  remarks: \"This method overrides the <xref:System.IO.TextReader.ReadLine%2A?displayProperty=fullName> method.  \\n  \\n A line is defined as a sequence of characters followed by a line feed (\\\"\\\\n\\\"), a carriage return (\\\"\\\\r\\\"), or a carriage return immediately followed by a line feed (\\\"\\\\r\\\\n\\\"). The string that is returned does not contain the terminating carriage return or line feed. The returned value is `null` if the end of the string has been reached.  \\n  \\n If the current method throws an <xref:System.OutOfMemoryException>, the reader's position in the underlying string is advanced by the number of characters the method was able to read, but the characters already read into the internal <xref:System.IO.StringReader.ReadLine%2A> buffer are discarded. Because the position of the reader in the string cannot be changed, the characters already read are unrecoverable, and can be accessed only by reinitializing the <xref:System.IO.StringReader>. To avoid such a situation, use the <xref:System.IO.StringReader.Read%2A> method and store the read characters in a preallocated buffer.  \\n  \\n The following table lists examples of other typical or related I/O tasks.  \\n  \\n|To do this...|See the example in this topic...|  \\n|-------------------|--------------------------------------|  \\n|Create a text file.|[How to: Write Text to a File](~/docs/standard/io/how-to-write-text-to-a-file.md)|  \\n|Write to a text file.|[How to: Write Text to a File](~/docs/standard/io/how-to-write-text-to-a-file.md)|  \\n|Read from a text file.|[How to: Read Text from a File](~/docs/standard/io/how-to-read-text-from-a-file.md)|  \\n|Append text to a file.|[How to: Open and Append to a Log File](~/docs/standard/io/how-to-open-and-append-to-a-log-file.md)<br /><br /> <xref:System.IO.File.AppendText%2A?displayProperty=fullName><br /><br /> <xref:System.IO.FileInfo.AppendText%2A?displayProperty=fullName>|  \\n|Get the size of a file.|<xref:System.IO.FileInfo.Length%2A?displayProperty=fullName>|  \\n|Get the attributes of a file.|<xref:System.IO.File.GetAttributes%2A?displayProperty=fullName>|  \\n|Set the attributes of a file.|<xref:System.IO.File.SetAttributes%2A?displayProperty=fullName>|  \\n|Determine if a file exists.|<xref:System.IO.File.Exists%2A?displayProperty=fullName>|  \\n|Read from a binary file.|[How to: Read and Write to a Newly Created Data File](~/docs/standard/io/how-to-read-and-write-to-a-newly-created-data-file.md)|  \\n|Write to a binary file.|[How to: Read and Write to a Newly Created Data File](~/docs/standard/io/how-to-read-and-write-to-a-newly-created-data-file.md)|\"\n  example:\n  - \"This code example is part of a larger example provided for the <xref:System.IO.StringReader> class.  \\n  \\n [!code-cpp[System.IO.StringReaderWriter#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IO.StringReaderWriter/CPP/stringrw.cpp#2)]\\n [!code-csharp[System.IO.StringReaderWriter#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.StringReaderWriter/CS/stringrw.cs#2)]\\n [!code-vb[System.IO.StringReaderWriter#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.StringReaderWriter/VB/stringrw.vb#2)]\"\n  syntax:\n    content: public override string ReadLine ();\n    parameters: []\n    return:\n      type: System.String\n      description: The next line from the current string, or `null` if the end of the string is reached.\n  overload: System.IO.StringReader.ReadLine*\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The current reader is closed.\n  - type: System.OutOfMemoryException\n    commentId: T:System.OutOfMemoryException\n    description: There is insufficient memory to allocate a buffer for the returned string.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/StringReader.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.IO.StringReader.ReadLineAsync\n  commentId: M:System.IO.StringReader.ReadLineAsync\n  id: ReadLineAsync\n  parent: System.IO.StringReader\n  langs:\n  - csharp\n  name: ReadLineAsync()\n  nameWithType: StringReader.ReadLineAsync()\n  fullName: StringReader.ReadLineAsync()\n  type: Method\n  assemblies:\n  - System.IO\n  - mscorlib\n  - netstandard\n  - System.Runtime.Extensions\n  namespace: System.IO\n  summary: Reads a line of characters asynchronously from the current string and returns the data as a string.\n  remarks: ''\n  example:\n  - \"The following example shows how to read one line at a time from a string asynchronously.  \\n  \\n [!code-csharp[System.IO.StringReader#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.io.stringreader/cs/example3.cs#3)]\\n [!code-vb[System.IO.StringReader#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.io.stringreader/vb/example3.vb#3)]\"\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(false)]\n\n      public override System.Threading.Tasks.Task<string> ReadLineAsync ();\n    parameters: []\n    return:\n      type: System.Threading.Tasks.Task{System.String}\n      description: A task that represents the asynchronous read operation. The value of the <code>TResult</code> parameter contains the next line from the string reader, or is `null` if all the characters have been read.\n  overload: System.IO.StringReader.ReadLineAsync*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: The number of characters in the next line is larger than <xref href=\"System.Int32.MaxValue\"></xref>.\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The string reader has been disposed.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The reader is currently in use by a previous read operation.\n  attributes:\n  - type: System.Runtime.InteropServices.ComVisibleAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/StringReader.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.IO.StringReader.ReadToEnd\n  commentId: M:System.IO.StringReader.ReadToEnd\n  id: ReadToEnd\n  parent: System.IO.StringReader\n  langs:\n  - csharp\n  name: ReadToEnd()\n  nameWithType: StringReader.ReadToEnd()\n  fullName: StringReader.ReadToEnd()\n  type: Method\n  assemblies:\n  - System.IO\n  - mscorlib\n  - netstandard\n  - System.Runtime.Extensions\n  namespace: System.IO\n  summary: Reads all characters from the current position to the end of the string and returns them as a single string.\n  remarks: \"This method overrides the <xref:System.IO.TextReader.ReadToEnd%2A?displayProperty=fullName> method.  \\n  \\n If the current method throws an <xref:System.OutOfMemoryException>, the reader's position in the underlying string is advanced by the number of characters the method was able to read, but the characters already read into the internal <xref:System.IO.StringReader.ReadToEnd%2A> buffer are discarded. Because the position of the reader in the string cannot be changed, the characters already read are unrecoverable, and can be accessed only by reinitializing the <xref:System.IO.StringReader>. To avoid such a situation, use the <xref:System.IO.StringReader.Read%2A> method and store the read characters in a preallocated buffer.  \\n  \\n The following table lists examples of other typical or related I/O tasks.  \\n  \\n|To do this...|See the example in this topic...|  \\n|-------------------|--------------------------------------|  \\n|Create a text file.|[How to: Write Text to a File](~/docs/standard/io/how-to-write-text-to-a-file.md)|  \\n|Write to a text file.|[How to: Write Text to a File](~/docs/standard/io/how-to-write-text-to-a-file.md)|  \\n|Read from a text file.|[How to: Read Text from a File](~/docs/standard/io/how-to-read-text-from-a-file.md)|  \\n|Append text to a file.|[How to: Open and Append to a Log File](~/docs/standard/io/how-to-open-and-append-to-a-log-file.md)<br /><br /> <xref:System.IO.File.AppendText%2A?displayProperty=fullName><br /><br /> <xref:System.IO.FileInfo.AppendText%2A?displayProperty=fullName>|  \\n|Get the size of a file.|<xref:System.IO.FileInfo.Length%2A?displayProperty=fullName>|  \\n|Get the attributes of a file.|<xref:System.IO.File.GetAttributes%2A?displayProperty=fullName>|  \\n|Set the attributes of a file.|<xref:System.IO.File.SetAttributes%2A?displayProperty=fullName>|  \\n|Determine if a file exists.|<xref:System.IO.File.Exists%2A?displayProperty=fullName>|  \\n|Read from a binary file.|[How to: Read and Write to a Newly Created Data File](~/docs/standard/io/how-to-read-and-write-to-a-newly-created-data-file.md)|  \\n|Write to a binary file.|[How to: Read and Write to a Newly Created Data File](~/docs/standard/io/how-to-read-and-write-to-a-newly-created-data-file.md)|\"\n  example:\n  - \"This code example is part of a larger example provided for the <xref:System.IO.TextReader> class.  \\n  \\n [!code-cpp[System.IO.TextReaderWriter#5](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IO.TextReaderWriter/CPP/textrw.cpp#5)]\\n [!code-csharp[System.IO.TextReaderWriter#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.TextReaderWriter/CS/textrw.cs#5)]\\n [!code-vb[System.IO.TextReaderWriter#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.TextReaderWriter/VB/textrw.vb#5)]\"\n  syntax:\n    content: public override string ReadToEnd ();\n    parameters: []\n    return:\n      type: System.String\n      description: The content from the current position to the end of the underlying string.\n  overload: System.IO.StringReader.ReadToEnd*\n  exceptions:\n  - type: System.OutOfMemoryException\n    commentId: T:System.OutOfMemoryException\n    description: There is insufficient memory to allocate a buffer for the returned string.\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The current reader is closed.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/StringReader.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.IO.StringReader.ReadToEndAsync\n  commentId: M:System.IO.StringReader.ReadToEndAsync\n  id: ReadToEndAsync\n  parent: System.IO.StringReader\n  langs:\n  - csharp\n  name: ReadToEndAsync()\n  nameWithType: StringReader.ReadToEndAsync()\n  fullName: StringReader.ReadToEndAsync()\n  type: Method\n  assemblies:\n  - System.IO\n  - mscorlib\n  - netstandard\n  - System.Runtime.Extensions\n  namespace: System.IO\n  summary: Reads all characters from the current position to the end of the string asynchronously and returns them as a single string.\n  remarks: ''\n  example:\n  - \"The following example shows how to read an entire string asynchronously.  \\n  \\n [!code-csharp[System.IO.StringReader#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.io.stringreader/cs/example2.cs#2)]\\n [!code-vb[System.IO.StringReader#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.io.stringreader/vb/example2.vb#2)]\"\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(false)]\n\n      public override System.Threading.Tasks.Task<string> ReadToEndAsync ();\n    parameters: []\n    return:\n      type: System.Threading.Tasks.Task{System.String}\n      description: A task that represents the asynchronous read operation. The value of the <code>TResult</code> parameter contains a string with the characters from the current position to the end of the string.\n  overload: System.IO.StringReader.ReadToEndAsync*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: The number of characters is larger than <xref href=\"System.Int32.MaxValue\"></xref>.\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The string reader has been disposed.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The reader is currently in use by a previous read operation.\n  attributes:\n  - type: System.Runtime.InteropServices.ComVisibleAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/StringReader.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\nreferences:\n- uid: System.IO.TextReader\n  parent: System.IO\n  isExternal: false\n  name: TextReader\n  nameWithType: TextReader\n  fullName: System.IO.TextReader\n- uid: System.ArgumentNullException\n  parent: System\n  isExternal: false\n  name: ArgumentNullException\n  nameWithType: ArgumentNullException\n  fullName: System.ArgumentNullException\n- uid: System.ObjectDisposedException\n  parent: System\n  isExternal: false\n  name: ObjectDisposedException\n  nameWithType: ObjectDisposedException\n  fullName: System.ObjectDisposedException\n- uid: System.ArgumentException\n  parent: System\n  isExternal: false\n  name: ArgumentException\n  nameWithType: ArgumentException\n  fullName: System.ArgumentException\n- uid: System.ArgumentOutOfRangeException\n  parent: System\n  isExternal: false\n  name: ArgumentOutOfRangeException\n  nameWithType: ArgumentOutOfRangeException\n  fullName: System.ArgumentOutOfRangeException\n- uid: System.InvalidOperationException\n  parent: System\n  isExternal: false\n  name: InvalidOperationException\n  nameWithType: InvalidOperationException\n  fullName: System.InvalidOperationException\n- uid: System.OutOfMemoryException\n  parent: System\n  isExternal: false\n  name: OutOfMemoryException\n  nameWithType: OutOfMemoryException\n  fullName: System.OutOfMemoryException\n- uid: System.IO.StringReader.#ctor(System.String)\n  parent: System.IO.StringReader\n  isExternal: false\n  name: StringReader(String)\n  nameWithType: StringReader.StringReader(String)\n  fullName: StringReader.StringReader(String)\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.IO.StringReader.Close\n  parent: System.IO.StringReader\n  isExternal: false\n  name: Close()\n  nameWithType: StringReader.Close()\n  fullName: StringReader.Close()\n- uid: System.IO.StringReader.Dispose(System.Boolean)\n  parent: System.IO.StringReader\n  isExternal: false\n  name: Dispose(Boolean)\n  nameWithType: StringReader.Dispose(Boolean)\n  fullName: StringReader.Dispose(Boolean)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.IO.StringReader.Peek\n  parent: System.IO.StringReader\n  isExternal: false\n  name: Peek()\n  nameWithType: StringReader.Peek()\n  fullName: StringReader.Peek()\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.IO.StringReader.Read\n  parent: System.IO.StringReader\n  isExternal: false\n  name: Read()\n  nameWithType: StringReader.Read()\n  fullName: StringReader.Read()\n- uid: System.IO.StringReader.Read(System.Char[],System.Int32,System.Int32)\n  parent: System.IO.StringReader\n  isExternal: false\n  name: Read(Char[], Int32, Int32)\n  nameWithType: StringReader.Read(Char[], Int32, Int32)\n  fullName: StringReader.Read(Char[], Int32, Int32)\n- uid: System.Char\n  name: Char\n  nameWithType: Char\n  fullName: System.Char\n- uid: System.Char[]\n  parent: System\n  isExternal: false\n  name: Char[]\n  nameWithType: Char[]\n  fullName: System.Char[]\n  spec.csharp:\n  - uid: System.Char\n    name: Char\n    nameWithType: Char\n    fullName: System.Char\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.IO.StringReader.ReadAsync(System.Char[],System.Int32,System.Int32)\n  parent: System.IO.StringReader\n  isExternal: false\n  name: ReadAsync(Char[], Int32, Int32)\n  nameWithType: StringReader.ReadAsync(Char[], Int32, Int32)\n  fullName: StringReader.ReadAsync(Char[], Int32, Int32)\n- uid: System.Threading.Tasks.Task`1\n  name: Task<TResult>\n  nameWithType: Task<TResult>\n  fullName: System.Threading.Tasks.Task<TResult>\n- uid: System.Threading.Tasks.Task{System.Int32}\n  parent: System.Threading.Tasks\n  isExternal: false\n  name: Task<Int32>\n  nameWithType: Task<Int32>\n  fullName: System.Threading.Tasks.Task<System.Int32>\n  spec.csharp:\n  - uid: System.Threading.Tasks.Task`1\n    name: Task\n    nameWithType: Task\n    fullName: System.Threading.Tasks.Task\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Int32\n    name: Int32\n    nameWithType: Int32\n    fullName: System.Int32\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.IO.StringReader.ReadBlockAsync(System.Char[],System.Int32,System.Int32)\n  parent: System.IO.StringReader\n  isExternal: false\n  name: ReadBlockAsync(Char[], Int32, Int32)\n  nameWithType: StringReader.ReadBlockAsync(Char[], Int32, Int32)\n  fullName: StringReader.ReadBlockAsync(Char[], Int32, Int32)\n- uid: System.IO.StringReader.ReadLine\n  parent: System.IO.StringReader\n  isExternal: false\n  name: ReadLine()\n  nameWithType: StringReader.ReadLine()\n  fullName: StringReader.ReadLine()\n- uid: System.IO.StringReader.ReadLineAsync\n  parent: System.IO.StringReader\n  isExternal: false\n  name: ReadLineAsync()\n  nameWithType: StringReader.ReadLineAsync()\n  fullName: StringReader.ReadLineAsync()\n- uid: System.Threading.Tasks.Task{System.String}\n  parent: System.Threading.Tasks\n  isExternal: false\n  name: Task<String>\n  nameWithType: Task<String>\n  fullName: System.Threading.Tasks.Task<System.String>\n  spec.csharp:\n  - uid: System.Threading.Tasks.Task`1\n    name: Task\n    nameWithType: Task\n    fullName: System.Threading.Tasks.Task\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.String\n    name: String\n    nameWithType: String\n    fullName: System.String\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.IO.StringReader.ReadToEnd\n  parent: System.IO.StringReader\n  isExternal: false\n  name: ReadToEnd()\n  nameWithType: StringReader.ReadToEnd()\n  fullName: StringReader.ReadToEnd()\n- uid: System.IO.StringReader.ReadToEndAsync\n  parent: System.IO.StringReader\n  isExternal: false\n  name: ReadToEndAsync()\n  nameWithType: StringReader.ReadToEndAsync()\n  fullName: StringReader.ReadToEndAsync()\n- uid: System.IO.StringReader.#ctor*\n  parent: System.IO.StringReader\n  isExternal: false\n  name: StringReader\n  nameWithType: StringReader.StringReader\n  fullName: StringReader.StringReader\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/StringReader.xml\n- uid: System.IO.StringReader.Close*\n  parent: System.IO.StringReader\n  isExternal: false\n  name: Close\n  nameWithType: StringReader.Close\n  fullName: StringReader.Close\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/StringReader.xml\n- uid: System.IO.StringReader.Dispose*\n  parent: System.IO.StringReader\n  isExternal: false\n  name: Dispose\n  nameWithType: StringReader.Dispose\n  fullName: StringReader.Dispose\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/StringReader.xml\n- uid: System.IO.StringReader.Peek*\n  parent: System.IO.StringReader\n  isExternal: false\n  name: Peek\n  nameWithType: StringReader.Peek\n  fullName: StringReader.Peek\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/StringReader.xml\n- uid: System.IO.StringReader.Read*\n  parent: System.IO.StringReader\n  isExternal: false\n  name: Read\n  nameWithType: StringReader.Read\n  fullName: StringReader.Read\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/StringReader.xml\n- uid: System.IO.StringReader.ReadAsync*\n  parent: System.IO.StringReader\n  isExternal: false\n  name: ReadAsync\n  nameWithType: StringReader.ReadAsync\n  fullName: StringReader.ReadAsync\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/StringReader.xml\n- uid: System.IO.StringReader.ReadBlockAsync*\n  parent: System.IO.StringReader\n  isExternal: false\n  name: ReadBlockAsync\n  nameWithType: StringReader.ReadBlockAsync\n  fullName: StringReader.ReadBlockAsync\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/StringReader.xml\n- uid: System.IO.StringReader.ReadLine*\n  parent: System.IO.StringReader\n  isExternal: false\n  name: ReadLine\n  nameWithType: StringReader.ReadLine\n  fullName: StringReader.ReadLine\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/StringReader.xml\n- uid: System.IO.StringReader.ReadLineAsync*\n  parent: System.IO.StringReader\n  isExternal: false\n  name: ReadLineAsync\n  nameWithType: StringReader.ReadLineAsync\n  fullName: StringReader.ReadLineAsync\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/StringReader.xml\n- uid: System.IO.StringReader.ReadToEnd*\n  parent: System.IO.StringReader\n  isExternal: false\n  name: ReadToEnd\n  nameWithType: StringReader.ReadToEnd\n  fullName: StringReader.ReadToEnd\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/StringReader.xml\n- uid: System.IO.StringReader.ReadToEndAsync*\n  parent: System.IO.StringReader\n  isExternal: false\n  name: ReadToEndAsync\n  nameWithType: StringReader.ReadToEndAsync\n  fullName: StringReader.ReadToEndAsync\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/StringReader.xml\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: Object.Equals(Object)\n  fullName: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: Object.GetHashCode()\n  fullName: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: false\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: false\n  name: ToString()\n  nameWithType: Object.ToString()\n  fullName: Object.ToString()\n- uid: System.IO.TextReader.Dispose\n  parent: System.IO.TextReader\n  isExternal: false\n  name: Dispose()\n  nameWithType: TextReader.Dispose()\n  fullName: TextReader.Dispose()\n- uid: System.IO.TextReader.Null\n  parent: System.IO.TextReader\n  isExternal: false\n  name: \"Null\"\n  nameWithType: TextReader.Null\n  fullName: TextReader.Null\n- uid: System.IO.TextReader.ReadBlock(System.Char[],System.Int32,System.Int32)\n  parent: System.IO.TextReader\n  isExternal: false\n  name: ReadBlock(Char[], Int32, Int32)\n  nameWithType: TextReader.ReadBlock(Char[], Int32, Int32)\n  fullName: TextReader.ReadBlock(Char[], Int32, Int32)\n- uid: System.IO.TextReader.Synchronized(System.IO.TextReader)\n  parent: System.IO.TextReader\n  isExternal: false\n  name: Synchronized(TextReader)\n  nameWithType: TextReader.Synchronized(TextReader)\n  fullName: TextReader.Synchronized(TextReader)\n"}