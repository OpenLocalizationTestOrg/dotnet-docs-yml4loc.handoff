{"nodes":[{"content":"Represents the Windows access control security for a registry key. This class cannot be inherited.","nodes":[{"pos":[0,98],"content":"Represents the Windows access control security for a registry key. This class cannot be inherited.","nodes":[{"content":"Represents the Windows access control security for a registry key. This class cannot be inherited.","pos":[0,98],"nodes":[{"content":"Represents the Windows access control security for a registry key.","pos":[0,66]},{"content":"This class cannot be inherited.","pos":[67,98]}]}]}],"pos":[2603,2702],"yaml":true},{"content":"A <xref:System.Security.AccessControl.RegistrySecurity> object specifies access rights for a registry key, and also specifies how access attempts are audited. Access rights to the registry key are expressed as rules, with each access rule represented by a <xref:System.Security.AccessControl.RegistryAccessRule> object. Each auditing rule is represented by a <xref:System.Security.AccessControl.RegistryAuditRule> object.  \n  \n This mirrors the underlying Windows security system, in which each securable object has at most one discretionary access control list (DACL) that controls access to the secured object, and at most one system access control list (SACL) that specifies which access attempts are audited. The DACL and SACL are ordered lists of access control entries (ACE) that specify access and auditing for users and groups. A <xref:System.Security.AccessControl.RegistryAccessRule> or <xref:System.Security.AccessControl.RegistryAuditRule> object might represent more than one ACE.  \n  \n> [!NOTE]\n>  Windows access control security can only be applied to registry keys. It cannot be applied to individual key/value pairs stored in a key.  \n  \n The <xref:System.Security.AccessControl.RegistrySecurity>, <xref:System.Security.AccessControl.RegistryAccessRule>, and <xref:System.Security.AccessControl.RegistryAuditRule> classes hide the implementation details of ACLs and ACEs. They allow you to ignore the seventeen different ACE types and the complexity of correctly maintaining inheritance and propagation of access rights. These objects are also designed to prevent the following common access control errors:  \n  \n-   Creating a security descriptor with a null DACL. A null reference to a DACL allows any user to add access rules to an object, potentially creating a denial-of-service attack. A new <xref:System.Security.AccessControl.RegistrySecurity> object always starts with an empty DACL, which denies all access for all users.  \n  \n-   Violating the canonical ordering of ACEs. If the ACE list in the DACL is not kept in the canonical order, users might inadvertently be given access to the secured object. For example, denied access rights must always appear before allowed access rights. <xref:System.Security.AccessControl.RegistrySecurity> objects maintain the correct order internally.  \n  \n-   Manipulating security descriptor flags, which should be under resource manager control only.  \n  \n-   Creating invalid combinations of ACE flags.  \n  \n-   Manipulating inherited ACEs. Inheritance and propagation are handled by the resource manager, in response to changes you make to access and audit rules.  \n  \n-   Inserting meaningless ACEs into ACLs.  \n  \n The only capabilities not supported by the .NET security objects are dangerous activities that should be avoided by the majority of application developers, such as the following:  \n  \n-   Low-level tasks that are normally performed by the resource manager.  \n  \n-   Adding or removing access control entries in ways that do not maintain the canonical ordering.  \n  \n To modify Windows access control security for a registry key, use the <xref:Microsoft.Win32.RegistryKey.GetAccessControl%2A?displayProperty=fullName> method to get the <xref:System.Security.AccessControl.RegistrySecurity> object. Modify the security object by adding and removing rules, and then use the <xref:Microsoft.Win32.RegistryKey.SetAccessControl%2A?displayProperty=fullName> method to reattach it.  \n  \n> [!IMPORTANT]\n>  Changes you make to a <xref:System.Security.AccessControl.RegistrySecurity> object do not affect the access levels of the registry key until you call the <xref:Microsoft.Win32.RegistryKey.SetAccessControl%2A?displayProperty=fullName> method to assign the altered security object to the registry key.  \n  \n To copy access control security from one registry key to another, use the <xref:Microsoft.Win32.RegistryKey.GetAccessControl%2A?displayProperty=fullName> method to get a <xref:System.Security.AccessControl.RegistrySecurity> object representing the access and audit rules for the first registry key, and then use the <xref:Microsoft.Win32.RegistryKey.SetAccessControl%2A?displayProperty=fullName> method to assign those rules to the second registry key. You can also assign the rules to a second registry key with an <xref:Microsoft.Win32.RegistryKey.OpenSubKey%2A?displayProperty=fullName> or <xref:Microsoft.Win32.RegistryKey.CreateSubKey%2A?displayProperty=fullName> method that takes a <xref:System.Security.AccessControl.RegistrySecurity> object parameter.  \n  \n Users with an investment in the security descriptor definition language (SDDL) can use the <xref:System.Security.AccessControl.ObjectSecurity.SetSecurityDescriptorSddlForm%2A> method to set access rules for a registry key, and the <xref:System.Security.AccessControl.ObjectSecurity.GetSecurityDescriptorSddlForm%2A> method to obtain a string that represents the access rules in SDDL format. This is not recommended for new development.","nodes":[{"pos":[0,421],"content":"A <xref:System.Security.AccessControl.RegistrySecurity> object specifies access rights for a registry key, and also specifies how access attempts are audited. Access rights to the registry key are expressed as rules, with each access rule represented by a <xref:System.Security.AccessControl.RegistryAccessRule> object. Each auditing rule is represented by a <xref:System.Security.AccessControl.RegistryAuditRule> object.","nodes":[{"content":"A <xref:System.Security.AccessControl.RegistrySecurity> object specifies access rights for a registry key, and also specifies how access attempts are audited. Access rights to the registry key are expressed as rules, with each access rule represented by a <xref:System.Security.AccessControl.RegistryAccessRule> object. Each auditing rule is represented by a <xref:System.Security.AccessControl.RegistryAuditRule> object.","pos":[0,421],"nodes":[{"content":"A <ph id=\"ph1\">&lt;xref:System.Security.AccessControl.RegistrySecurity&gt;</ph> object specifies access rights for a registry key, and also specifies how access attempts are audited.","pos":[0,158],"source":"A <xref:System.Security.AccessControl.RegistrySecurity> object specifies access rights for a registry key, and also specifies how access attempts are audited."},{"content":"Access rights to the registry key are expressed as rules, with each access rule represented by a <ph id=\"ph1\">&lt;xref:System.Security.AccessControl.RegistryAccessRule&gt;</ph> object.","pos":[159,319],"source":" Access rights to the registry key are expressed as rules, with each access rule represented by a <xref:System.Security.AccessControl.RegistryAccessRule> object."},{"content":"Each auditing rule is represented by a <ph id=\"ph1\">&lt;xref:System.Security.AccessControl.RegistryAuditRule&gt;</ph> object.","pos":[320,421],"source":" Each auditing rule is represented by a <xref:System.Security.AccessControl.RegistryAuditRule> object."}]}]},{"pos":[428,993],"content":"This mirrors the underlying Windows security system, in which each securable object has at most one discretionary access control list (DACL) that controls access to the secured object, and at most one system access control list (SACL) that specifies which access attempts are audited. The DACL and SACL are ordered lists of access control entries (ACE) that specify access and auditing for users and groups. A <xref:System.Security.AccessControl.RegistryAccessRule> or <xref:System.Security.AccessControl.RegistryAuditRule> object might represent more than one ACE.","nodes":[{"content":"This mirrors the underlying Windows security system, in which each securable object has at most one discretionary access control list (DACL) that controls access to the secured object, and at most one system access control list (SACL) that specifies which access attempts are audited. The DACL and SACL are ordered lists of access control entries (ACE) that specify access and auditing for users and groups. A <xref:System.Security.AccessControl.RegistryAccessRule> or <xref:System.Security.AccessControl.RegistryAuditRule> object might represent more than one ACE.","pos":[0,565],"nodes":[{"content":"This mirrors the underlying Windows security system, in which each securable object has at most one discretionary access control list (DACL) that controls access to the secured object, and at most one system access control list (SACL) that specifies which access attempts are audited.","pos":[0,284]},{"content":"The DACL and SACL are ordered lists of access control entries (ACE) that specify access and auditing for users and groups.","pos":[285,407]},{"content":"A <ph id=\"ph1\">&lt;xref:System.Security.AccessControl.RegistryAccessRule&gt;</ph> or <ph id=\"ph2\">&lt;xref:System.Security.AccessControl.RegistryAuditRule&gt;</ph> object might represent more than one ACE.","pos":[408,565],"source":" A <xref:System.Security.AccessControl.RegistryAccessRule> or <xref:System.Security.AccessControl.RegistryAuditRule> object might represent more than one ACE."}]}]},{"pos":[1001,1149],"content":"[!NOTE]\n Windows access control security can only be applied to registry keys. It cannot be applied to individual key/value pairs stored in a key.","leadings":["","> "],"nodes":[{"content":" Windows access control security can only be applied to registry keys. It cannot be applied to individual key/value pairs stored in a key.","pos":[8,146],"nodes":[{"content":"Windows access control security can only be applied to registry keys.","pos":[1,70]},{"content":"It cannot be applied to individual key/value pairs stored in a key.","pos":[71,138]}]}]},{"pos":[1156,1624],"content":"The <xref:System.Security.AccessControl.RegistrySecurity>, <xref:System.Security.AccessControl.RegistryAccessRule>, and <xref:System.Security.AccessControl.RegistryAuditRule> classes hide the implementation details of ACLs and ACEs. They allow you to ignore the seventeen different ACE types and the complexity of correctly maintaining inheritance and propagation of access rights. These objects are also designed to prevent the following common access control errors:","nodes":[{"content":"The <xref:System.Security.AccessControl.RegistrySecurity>, <xref:System.Security.AccessControl.RegistryAccessRule>, and <xref:System.Security.AccessControl.RegistryAuditRule> classes hide the implementation details of ACLs and ACEs. They allow you to ignore the seventeen different ACE types and the complexity of correctly maintaining inheritance and propagation of access rights. These objects are also designed to prevent the following common access control errors:","pos":[0,468],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Security.AccessControl.RegistrySecurity&gt;</ph>, <ph id=\"ph2\">&lt;xref:System.Security.AccessControl.RegistryAccessRule&gt;</ph>, and <ph id=\"ph3\">&lt;xref:System.Security.AccessControl.RegistryAuditRule&gt;</ph> classes hide the implementation details of ACLs and ACEs.","pos":[0,232],"source":"The <xref:System.Security.AccessControl.RegistrySecurity>, <xref:System.Security.AccessControl.RegistryAccessRule>, and <xref:System.Security.AccessControl.RegistryAuditRule> classes hide the implementation details of ACLs and ACEs."},{"content":"They allow you to ignore the seventeen different ACE types and the complexity of correctly maintaining inheritance and propagation of access rights.","pos":[233,381]},{"content":"These objects are also designed to prevent the following common access control errors:","pos":[382,468]}]}]},{"pos":[1634,1948],"content":"Creating a security descriptor with a null DACL. A null reference to a DACL allows any user to add access rules to an object, potentially creating a denial-of-service attack. A new <xref:System.Security.AccessControl.RegistrySecurity> object always starts with an empty DACL, which denies all access for all users.","nodes":[{"content":"Creating a security descriptor with a null DACL. A null reference to a DACL allows any user to add access rules to an object, potentially creating a denial-of-service attack. A new <xref:System.Security.AccessControl.RegistrySecurity> object always starts with an empty DACL, which denies all access for all users.","pos":[0,314],"nodes":[{"content":"Creating a security descriptor with a null DACL.","pos":[0,48]},{"content":"A null reference to a DACL allows any user to add access rules to an object, potentially creating a denial-of-service attack.","pos":[49,174]},{"content":"A new <ph id=\"ph1\">&lt;xref:System.Security.AccessControl.RegistrySecurity&gt;</ph> object always starts with an empty DACL, which denies all access for all users.","pos":[175,314],"source":" A new <xref:System.Security.AccessControl.RegistrySecurity> object always starts with an empty DACL, which denies all access for all users."}]}]},{"pos":[1958,2312],"content":"Violating the canonical ordering of ACEs. If the ACE list in the DACL is not kept in the canonical order, users might inadvertently be given access to the secured object. For example, denied access rights must always appear before allowed access rights. <xref:System.Security.AccessControl.RegistrySecurity> objects maintain the correct order internally.","nodes":[{"content":"Violating the canonical ordering of ACEs. If the ACE list in the DACL is not kept in the canonical order, users might inadvertently be given access to the secured object. For example, denied access rights must always appear before allowed access rights. <xref:System.Security.AccessControl.RegistrySecurity> objects maintain the correct order internally.","pos":[0,354],"nodes":[{"content":"Violating the canonical ordering of ACEs.","pos":[0,41]},{"content":"If the ACE list in the DACL is not kept in the canonical order, users might inadvertently be given access to the secured object.","pos":[42,170]},{"content":"For example, denied access rights must always appear before allowed access rights.","pos":[171,253]},{"content":"<ph id=\"ph1\">&lt;xref:System.Security.AccessControl.RegistrySecurity&gt;</ph> objects maintain the correct order internally.","pos":[254,354],"source":" <xref:System.Security.AccessControl.RegistrySecurity> objects maintain the correct order internally."}]}]},{"pos":[2322,2414],"content":"Manipulating security descriptor flags, which should be under resource manager control only.","nodes":[{"content":"Manipulating security descriptor flags, which should be under resource manager control only.","pos":[0,92]}]},{"pos":[2424,2467],"content":"Creating invalid combinations of ACE flags.","nodes":[{"content":"Creating invalid combinations of ACE flags.","pos":[0,43]}]},{"pos":[2477,2629],"content":"Manipulating inherited ACEs. Inheritance and propagation are handled by the resource manager, in response to changes you make to access and audit rules.","nodes":[{"content":"Manipulating inherited ACEs. Inheritance and propagation are handled by the resource manager, in response to changes you make to access and audit rules.","pos":[0,152],"nodes":[{"content":"Manipulating inherited ACEs.","pos":[0,28]},{"content":"Inheritance and propagation are handled by the resource manager, in response to changes you make to access and audit rules.","pos":[29,152]}]}]},{"pos":[2639,2676],"content":"Inserting meaningless ACEs into ACLs.","nodes":[{"content":"Inserting meaningless ACEs into ACLs.","pos":[0,37]}]},{"pos":[2683,2861],"content":"The only capabilities not supported by the .NET security objects are dangerous activities that should be avoided by the majority of application developers, such as the following:","nodes":[{"content":"The only capabilities not supported by the .NET security objects are dangerous activities that should be avoided by the majority of application developers, such as the following:","pos":[0,178]}]},{"pos":[2871,2939],"content":"Low-level tasks that are normally performed by the resource manager.","nodes":[{"content":"Low-level tasks that are normally performed by the resource manager.","pos":[0,68]}]},{"pos":[2949,3043],"content":"Adding or removing access control entries in ways that do not maintain the canonical ordering.","nodes":[{"content":"Adding or removing access control entries in ways that do not maintain the canonical ordering.","pos":[0,94]}]},{"pos":[3050,3456],"content":"To modify Windows access control security for a registry key, use the <xref:Microsoft.Win32.RegistryKey.GetAccessControl%2A?displayProperty=fullName> method to get the <xref:System.Security.AccessControl.RegistrySecurity> object. Modify the security object by adding and removing rules, and then use the <xref:Microsoft.Win32.RegistryKey.SetAccessControl%2A?displayProperty=fullName> method to reattach it.","nodes":[{"content":"To modify Windows access control security for a registry key, use the <xref:Microsoft.Win32.RegistryKey.GetAccessControl%2A?displayProperty=fullName> method to get the <xref:System.Security.AccessControl.RegistrySecurity> object. Modify the security object by adding and removing rules, and then use the <xref:Microsoft.Win32.RegistryKey.SetAccessControl%2A?displayProperty=fullName> method to reattach it.","pos":[0,406],"nodes":[{"content":"To modify Windows access control security for a registry key, use the <ph id=\"ph1\">&lt;xref:Microsoft.Win32.RegistryKey.GetAccessControl%2A?displayProperty=fullName&gt;</ph> method to get the <ph id=\"ph2\">&lt;xref:System.Security.AccessControl.RegistrySecurity&gt;</ph> object.","pos":[0,229],"source":"To modify Windows access control security for a registry key, use the <xref:Microsoft.Win32.RegistryKey.GetAccessControl%2A?displayProperty=fullName> method to get the <xref:System.Security.AccessControl.RegistrySecurity> object."},{"content":"Modify the security object by adding and removing rules, and then use the <ph id=\"ph1\">&lt;xref:Microsoft.Win32.RegistryKey.SetAccessControl%2A?displayProperty=fullName&gt;</ph> method to reattach it.","pos":[230,406],"source":" Modify the security object by adding and removing rules, and then use the <xref:Microsoft.Win32.RegistryKey.SetAccessControl%2A?displayProperty=fullName> method to reattach it."}]}]},{"pos":[3464,3779],"content":"[!IMPORTANT]\n Changes you make to a <xref:System.Security.AccessControl.RegistrySecurity> object do not affect the access levels of the registry key until you call the <xref:Microsoft.Win32.RegistryKey.SetAccessControl%2A?displayProperty=fullName> method to assign the altered security object to the registry key.","leadings":["","> "],"nodes":[{"content":"Changes you make to a <ph id=\"ph1\">&lt;xref:System.Security.AccessControl.RegistrySecurity&gt;</ph> object do not affect the access levels of the registry key until you call the <ph id=\"ph2\">&lt;xref:Microsoft.Win32.RegistryKey.SetAccessControl%2A?displayProperty=fullName&gt;</ph> method to assign the altered security object to the registry key.","pos":[14,313],"source":" Changes you make to a <xref:System.Security.AccessControl.RegistrySecurity> object do not affect the access levels of the registry key until you call the <xref:Microsoft.Win32.RegistryKey.SetAccessControl%2A?displayProperty=fullName> method to assign the altered security object to the registry key."}]},{"pos":[3786,4546],"content":"To copy access control security from one registry key to another, use the <xref:Microsoft.Win32.RegistryKey.GetAccessControl%2A?displayProperty=fullName> method to get a <xref:System.Security.AccessControl.RegistrySecurity> object representing the access and audit rules for the first registry key, and then use the <xref:Microsoft.Win32.RegistryKey.SetAccessControl%2A?displayProperty=fullName> method to assign those rules to the second registry key. You can also assign the rules to a second registry key with an <xref:Microsoft.Win32.RegistryKey.OpenSubKey%2A?displayProperty=fullName> or <xref:Microsoft.Win32.RegistryKey.CreateSubKey%2A?displayProperty=fullName> method that takes a <xref:System.Security.AccessControl.RegistrySecurity> object parameter.","nodes":[{"content":"To copy access control security from one registry key to another, use the <xref:Microsoft.Win32.RegistryKey.GetAccessControl%2A?displayProperty=fullName> method to get a <xref:System.Security.AccessControl.RegistrySecurity> object representing the access and audit rules for the first registry key, and then use the <xref:Microsoft.Win32.RegistryKey.SetAccessControl%2A?displayProperty=fullName> method to assign those rules to the second registry key. You can also assign the rules to a second registry key with an <xref:Microsoft.Win32.RegistryKey.OpenSubKey%2A?displayProperty=fullName> or <xref:Microsoft.Win32.RegistryKey.CreateSubKey%2A?displayProperty=fullName> method that takes a <xref:System.Security.AccessControl.RegistrySecurity> object parameter.","pos":[0,760],"nodes":[{"content":"To copy access control security from one registry key to another, use the <ph id=\"ph1\">&lt;xref:Microsoft.Win32.RegistryKey.GetAccessControl%2A?displayProperty=fullName&gt;</ph> method to get a <ph id=\"ph2\">&lt;xref:System.Security.AccessControl.RegistrySecurity&gt;</ph> object representing the access and audit rules for the first registry key, and then use the <ph id=\"ph3\">&lt;xref:Microsoft.Win32.RegistryKey.SetAccessControl%2A?displayProperty=fullName&gt;</ph> method to assign those rules to the second registry key.","pos":[0,452],"source":"To copy access control security from one registry key to another, use the <xref:Microsoft.Win32.RegistryKey.GetAccessControl%2A?displayProperty=fullName> method to get a <xref:System.Security.AccessControl.RegistrySecurity> object representing the access and audit rules for the first registry key, and then use the <xref:Microsoft.Win32.RegistryKey.SetAccessControl%2A?displayProperty=fullName> method to assign those rules to the second registry key."},{"content":"You can also assign the rules to a second registry key with an <ph id=\"ph1\">&lt;xref:Microsoft.Win32.RegistryKey.OpenSubKey%2A?displayProperty=fullName&gt;</ph> or <ph id=\"ph2\">&lt;xref:Microsoft.Win32.RegistryKey.CreateSubKey%2A?displayProperty=fullName&gt;</ph> method that takes a <ph id=\"ph3\">&lt;xref:System.Security.AccessControl.RegistrySecurity&gt;</ph> object parameter.","pos":[453,760],"source":" You can also assign the rules to a second registry key with an <xref:Microsoft.Win32.RegistryKey.OpenSubKey%2A?displayProperty=fullName> or <xref:Microsoft.Win32.RegistryKey.CreateSubKey%2A?displayProperty=fullName> method that takes a <xref:System.Security.AccessControl.RegistrySecurity> object parameter."}]}]},{"pos":[4553,4988],"content":"Users with an investment in the security descriptor definition language (SDDL) can use the <xref:System.Security.AccessControl.ObjectSecurity.SetSecurityDescriptorSddlForm%2A> method to set access rules for a registry key, and the <xref:System.Security.AccessControl.ObjectSecurity.GetSecurityDescriptorSddlForm%2A> method to obtain a string that represents the access rules in SDDL format. This is not recommended for new development.","nodes":[{"content":"Users with an investment in the security descriptor definition language (SDDL) can use the <xref:System.Security.AccessControl.ObjectSecurity.SetSecurityDescriptorSddlForm%2A> method to set access rules for a registry key, and the <xref:System.Security.AccessControl.ObjectSecurity.GetSecurityDescriptorSddlForm%2A> method to obtain a string that represents the access rules in SDDL format. This is not recommended for new development.","pos":[0,435],"nodes":[{"content":"Users with an investment in the security descriptor definition language (SDDL) can use the <ph id=\"ph1\">&lt;xref:System.Security.AccessControl.ObjectSecurity.SetSecurityDescriptorSddlForm%2A&gt;</ph> method to set access rules for a registry key, and the <ph id=\"ph2\">&lt;xref:System.Security.AccessControl.ObjectSecurity.GetSecurityDescriptorSddlForm%2A&gt;</ph> method to obtain a string that represents the access rules in SDDL format.","pos":[0,390],"source":"Users with an investment in the security descriptor definition language (SDDL) can use the <xref:System.Security.AccessControl.ObjectSecurity.SetSecurityDescriptorSddlForm%2A> method to set access rules for a registry key, and the <xref:System.Security.AccessControl.ObjectSecurity.GetSecurityDescriptorSddlForm%2A> method to obtain a string that represents the access rules in SDDL format."},{"content":"This is not recommended for new development.","pos":[391,435]}]}]}],"pos":[2713,7738],"yaml":true,"extradata":"MT"},{"content":"Initializes a new instance of the <xref href=\"System.Security.AccessControl.RegistrySecurity\"></xref> class with default values.","nodes":[{"pos":[0,128],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Security.AccessControl.RegistrySecurity\"&gt;&lt;/xref&gt;</ph> class with default values.","source":"Initializes a new instance of the <xref href=\"System.Security.AccessControl.RegistrySecurity\"></xref> class with default values."}],"pos":[18938,19067],"yaml":true},{"content":"A new <xref:System.Security.AccessControl.RegistrySecurity> object always starts with an empty discretionary access list (DACL), which denies all access for all users.","nodes":[{"pos":[0,167],"content":"A new <xref:System.Security.AccessControl.RegistrySecurity> object always starts with an empty discretionary access list (DACL), which denies all access for all users.","nodes":[{"content":"A new <ph id=\"ph1\">&lt;xref:System.Security.AccessControl.RegistrySecurity&gt;</ph> object always starts with an empty discretionary access list (DACL), which denies all access for all users.","pos":[0,167],"source":"A new <xref:System.Security.AccessControl.RegistrySecurity> object always starts with an empty discretionary access list (DACL), which denies all access for all users."}]}],"pos":[19078,19246],"yaml":true,"extradata":"MT"},{"content":"Gets the enumeration type that the <xref href=\"System.Security.AccessControl.RegistrySecurity\"></xref> class uses to represent access rights.","nodes":[{"pos":[0,141],"content":"Gets the enumeration type that the <ph id=\"ph1\">&lt;xref href=\"System.Security.AccessControl.RegistrySecurity\"&gt;&lt;/xref&gt;</ph> class uses to represent access rights.","source":"Gets the enumeration type that the <xref href=\"System.Security.AccessControl.RegistrySecurity\"></xref> class uses to represent access rights."}],"pos":[20698,20840],"yaml":true},{"content":"Classes that derive from the <xref:System.Security.AccessControl.ObjectSecurity> class override the <xref:System.Security.AccessControl.ObjectSecurity.AccessRightType%2A> property and return the type they use to represent access rights. When you work with arrays or collections that contain multiple types of security objects, use this property to determine the correct enumeration type to use with each security object.","nodes":[{"pos":[0,420],"content":"Classes that derive from the <xref:System.Security.AccessControl.ObjectSecurity> class override the <xref:System.Security.AccessControl.ObjectSecurity.AccessRightType%2A> property and return the type they use to represent access rights. When you work with arrays or collections that contain multiple types of security objects, use this property to determine the correct enumeration type to use with each security object.","nodes":[{"content":"Classes that derive from the <xref:System.Security.AccessControl.ObjectSecurity> class override the <xref:System.Security.AccessControl.ObjectSecurity.AccessRightType%2A> property and return the type they use to represent access rights. When you work with arrays or collections that contain multiple types of security objects, use this property to determine the correct enumeration type to use with each security object.","pos":[0,420],"nodes":[{"content":"Classes that derive from the <ph id=\"ph1\">&lt;xref:System.Security.AccessControl.ObjectSecurity&gt;</ph> class override the <ph id=\"ph2\">&lt;xref:System.Security.AccessControl.ObjectSecurity.AccessRightType%2A&gt;</ph> property and return the type they use to represent access rights.","pos":[0,236],"source":"Classes that derive from the <xref:System.Security.AccessControl.ObjectSecurity> class override the <xref:System.Security.AccessControl.ObjectSecurity.AccessRightType%2A> property and return the type they use to represent access rights."},{"content":"When you work with arrays or collections that contain multiple types of security objects, use this property to determine the correct enumeration type to use with each security object.","pos":[237,420]}]}]}],"pos":[20851,21272],"yaml":true,"extradata":"MT"},{"content":"A <xref href=\"System.Type\"></xref> object representing the <xref href=\"System.Security.AccessControl.RegistryRights\"></xref> enumeration.","nodes":[{"pos":[0,137],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Type\"&gt;&lt;/xref&gt;</ph> object representing the <ph id=\"ph2\">&lt;xref href=\"System.Security.AccessControl.RegistryRights\"&gt;&lt;/xref&gt;</ph> enumeration.","source":"A <xref href=\"System.Type\"></xref> object representing the <xref href=\"System.Security.AccessControl.RegistryRights\"></xref> enumeration."}],"pos":[21396,21534],"yaml":true},{"content":"Creates a new access control rule for the specified user, with the specified access rights, access control, and flags.","nodes":[{"pos":[0,118],"content":"Creates a new access control rule for the specified user, with the specified access rights, access control, and flags.","nodes":[{"content":"Creates a new access control rule for the specified user, with the specified access rights, access control, and flags.","pos":[0,118]}]}],"pos":[23851,23970],"yaml":true},{"content":"The recommended way to create access control rules is to use the constructors of the <xref:System.Security.AccessControl.RegistryAccessRule> class.  \n  \n> [!NOTE]\n>  Although you can specify the <xref:System.Security.AccessControl.InheritanceFlags?displayProperty=fullName> flag, there is no point in doing so. For the purposes of access control, the name/value pairs in a subkey are not separate objects. The access rights to name/value pairs are controlled by the rights of the subkey. Furthermore, since all subkeys are containers (that is, they can contain other subkeys), they are not affected by the <xref:System.Security.AccessControl.InheritanceFlags.ObjectInherit> flag. Finally, specifying the <xref:System.Security.AccessControl.InheritanceFlags.ObjectInherit> flag needlessly complicates the maintenance of rules, because it interferes with the normal combination of compatible rules.","nodes":[{"pos":[0,147],"content":"The recommended way to create access control rules is to use the constructors of the <xref:System.Security.AccessControl.RegistryAccessRule> class.","nodes":[{"content":"The recommended way to create access control rules is to use the constructors of the <ph id=\"ph1\">&lt;xref:System.Security.AccessControl.RegistryAccessRule&gt;</ph> class.","pos":[0,147],"source":"The recommended way to create access control rules is to use the constructors of the <xref:System.Security.AccessControl.RegistryAccessRule> class."}]},{"pos":[155,896],"content":"[!NOTE]\n Although you can specify the <xref:System.Security.AccessControl.InheritanceFlags?displayProperty=fullName> flag, there is no point in doing so. For the purposes of access control, the name/value pairs in a subkey are not separate objects. The access rights to name/value pairs are controlled by the rights of the subkey. Furthermore, since all subkeys are containers (that is, they can contain other subkeys), they are not affected by the <xref:System.Security.AccessControl.InheritanceFlags.ObjectInherit> flag. Finally, specifying the <xref:System.Security.AccessControl.InheritanceFlags.ObjectInherit> flag needlessly complicates the maintenance of rules, because it interferes with the normal combination of compatible rules.","leadings":["","> "],"nodes":[{"content":" Although you can specify the <xref:System.Security.AccessControl.InheritanceFlags?displayProperty=fullName> flag, there is no point in doing so. For the purposes of access control, the name/value pairs in a subkey are not separate objects. The access rights to name/value pairs are controlled by the rights of the subkey. Furthermore, since all subkeys are containers (that is, they can contain other subkeys), they are not affected by the <xref:System.Security.AccessControl.InheritanceFlags.ObjectInherit> flag. Finally, specifying the <xref:System.Security.AccessControl.InheritanceFlags.ObjectInherit> flag needlessly complicates the maintenance of rules, because it interferes with the normal combination of compatible rules.","pos":[8,739],"nodes":[{"content":"Although you can specify the <ph id=\"ph1\">&lt;xref:System.Security.AccessControl.InheritanceFlags?displayProperty=fullName&gt;</ph> flag, there is no point in doing so.","pos":[1,145],"source":" Although you can specify the <xref:System.Security.AccessControl.InheritanceFlags?displayProperty=fullName> flag, there is no point in doing so."},{"content":"For the purposes of access control, the name/value pairs in a subkey are not separate objects.","pos":[146,240]},{"content":"The access rights to name/value pairs are controlled by the rights of the subkey.","pos":[241,322]},{"content":"Furthermore, since all subkeys are containers (that is, they can contain other subkeys), they are not affected by the <ph id=\"ph1\">&lt;xref:System.Security.AccessControl.InheritanceFlags.ObjectInherit&gt;</ph> flag.","pos":[323,514],"source":" Furthermore, since all subkeys are containers (that is, they can contain other subkeys), they are not affected by the <xref:System.Security.AccessControl.InheritanceFlags.ObjectInherit> flag."},{"content":"Finally, specifying the <ph id=\"ph1\">&lt;xref:System.Security.AccessControl.InheritanceFlags.ObjectInherit&gt;</ph> flag needlessly complicates the maintenance of rules, because it interferes with the normal combination of compatible rules.","pos":[515,731],"source":" Finally, specifying the <xref:System.Security.AccessControl.InheritanceFlags.ObjectInherit> flag needlessly complicates the maintenance of rules, because it interferes with the normal combination of compatible rules."}]}]}],"pos":[23981,24883],"yaml":true,"extradata":"MT"},{"content":"An <xref href=\"System.Security.Principal.IdentityReference\"></xref> that identifies the user or group the rule applies to.","nodes":[{"pos":[0,122],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Security.Principal.IdentityReference\"&gt;&lt;/xref&gt;</ph> that identifies the user or group the rule applies to.","source":"An <xref href=\"System.Security.Principal.IdentityReference\"></xref> that identifies the user or group the rule applies to."}],"pos":[25383,25506],"yaml":true},{"content":"A bitwise combination of <xref href=\"System.Security.AccessControl.RegistryRights\"></xref> values specifying the access rights to allow or deny, cast to an integer.","nodes":[{"pos":[0,164],"content":"A bitwise combination of <ph id=\"ph1\">&lt;xref href=\"System.Security.AccessControl.RegistryRights\"&gt;&lt;/xref&gt;</ph> values specifying the access rights to allow or deny, cast to an integer.","source":"A bitwise combination of <xref href=\"System.Security.AccessControl.RegistryRights\"></xref> values specifying the access rights to allow or deny, cast to an integer."}],"pos":[25571,25736],"yaml":true},{"content":"A Boolean value specifying whether the rule is inherited.","nodes":[{"pos":[0,57],"content":"A Boolean value specifying whether the rule is inherited.","nodes":[{"content":"A Boolean value specifying whether the rule is inherited.","pos":[0,57]}]}],"pos":[25804,25862],"yaml":true},{"content":"A bitwise combination of <xref href=\"System.Security.AccessControl.InheritanceFlags\"></xref> values specifying how the rule is inherited by subkeys.","nodes":[{"pos":[0,148],"content":"A bitwise combination of <ph id=\"ph1\">&lt;xref href=\"System.Security.AccessControl.InheritanceFlags\"&gt;&lt;/xref&gt;</ph> values specifying how the rule is inherited by subkeys.","source":"A bitwise combination of <xref href=\"System.Security.AccessControl.InheritanceFlags\"></xref> values specifying how the rule is inherited by subkeys."}],"pos":[25967,26116],"yaml":true},{"content":"A bitwise combination of <xref href=\"System.Security.AccessControl.PropagationFlags\"></xref> values that modify the way the rule is inherited by subkeys. Meaningless if the value of <code>inheritanceFlags</code> is <xref href=\"System.Security.AccessControl.InheritanceFlags.None\"></xref>.","nodes":[{"pos":[0,288],"content":"A bitwise combination of <xref href=\"System.Security.AccessControl.PropagationFlags\"></xref> values that modify the way the rule is inherited by subkeys. Meaningless if the value of <code>inheritanceFlags</code> is <xref href=\"System.Security.AccessControl.InheritanceFlags.None\"></xref>.","nodes":[{"content":"A bitwise combination of <ph id=\"ph1\">&lt;xref href=\"System.Security.AccessControl.PropagationFlags\"&gt;&lt;/xref&gt;</ph> values that modify the way the rule is inherited by subkeys.","pos":[0,153],"source":"A bitwise combination of <xref href=\"System.Security.AccessControl.PropagationFlags\"></xref> values that modify the way the rule is inherited by subkeys."},{"content":"Meaningless if the value of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">inheritanceFlags</ph><ept id=\"p1\">&lt;/code&gt;</ept> is <ph id=\"ph2\">&lt;xref href=\"System.Security.AccessControl.InheritanceFlags.None\"&gt;&lt;/xref&gt;</ph>.","pos":[154,288],"source":" Meaningless if the value of <code>inheritanceFlags</code> is <xref href=\"System.Security.AccessControl.InheritanceFlags.None\"></xref>."}]}],"pos":[26221,26510],"yaml":true},{"content":"One of the <xref href=\"System.Security.AccessControl.AccessControlType\"></xref> values specifying whether the rights are allowed or denied.","nodes":[{"pos":[0,139],"content":"One of the <ph id=\"ph1\">&lt;xref href=\"System.Security.AccessControl.AccessControlType\"&gt;&lt;/xref&gt;</ph> values specifying whether the rights are allowed or denied.","source":"One of the <xref href=\"System.Security.AccessControl.AccessControlType\"></xref> values specifying whether the rights are allowed or denied."}],"pos":[26604,26744],"yaml":true},{"content":"A <xref href=\"System.Security.AccessControl.RegistryAccessRule\"></xref> object representing the specified rights for the specified user.","nodes":[{"pos":[0,136],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Security.AccessControl.RegistryAccessRule\"&gt;&lt;/xref&gt;</ph> object representing the specified rights for the specified user.","source":"A <xref href=\"System.Security.AccessControl.RegistryAccessRule\"></xref> object representing the specified rights for the specified user."}],"pos":[26828,26965],"yaml":true},{"content":"<code>accessMask</code>, <code>inheritanceFlags</code>, <code>propagationFlags</code>, or <code>type</code> specifies an invalid value.","nodes":[{"pos":[0,135],"content":"<ph id=\"ph1\">&lt;code&gt;accessMask&lt;/code&gt;</ph>, <ph id=\"ph2\">&lt;code&gt;inheritanceFlags&lt;/code&gt;</ph>, <ph id=\"ph3\">&lt;code&gt;propagationFlags&lt;/code&gt;</ph>, or <ph id=\"ph4\">&lt;code&gt;type&lt;/code&gt;</ph> specifies an invalid value.","source":"<code>accessMask</code>, <code>inheritanceFlags</code>, <code>propagationFlags</code>, or <code>type</code> specifies an invalid value."}],"pos":[27171,27307],"yaml":true},{"content":"<code>identityReference</code> is `null`.  \n  \n -or-  \n  \n <code>accessMask</code> is zero.","nodes":[{"pos":[0,41],"content":"<ph id=\"ph1\">&lt;code&gt;identityReference&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>identityReference</code> is `null`."},{"pos":[48,52],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[59,91],"content":"<ph id=\"ph1\">&lt;code&gt;accessMask&lt;/code&gt;</ph> is zero.","source":"<code>accessMask</code> is zero."}],"pos":[27409,27507],"yaml":true},{"content":"<code>identityReference</code> is neither of type <xref href=\"System.Security.Principal.SecurityIdentifier\"></xref>, nor of a type such as <xref href=\"System.Security.Principal.NTAccount\"></xref> that can be converted to type <xref href=\"System.Security.Principal.SecurityIdentifier\"></xref>.","nodes":[{"pos":[0,292],"content":"<ph id=\"ph1\">&lt;code&gt;identityReference&lt;/code&gt;</ph> is neither of type <ph id=\"ph2\">&lt;xref href=\"System.Security.Principal.SecurityIdentifier\"&gt;&lt;/xref&gt;</ph>, nor of a type such as <ph id=\"ph3\">&lt;xref href=\"System.Security.Principal.NTAccount\"&gt;&lt;/xref&gt;</ph> that can be converted to type <ph id=\"ph4\">&lt;xref href=\"System.Security.Principal.SecurityIdentifier\"&gt;&lt;/xref&gt;</ph>.","source":"<code>identityReference</code> is neither of type <xref href=\"System.Security.Principal.SecurityIdentifier\"></xref>, nor of a type such as <xref href=\"System.Security.Principal.NTAccount\"></xref> that can be converted to type <xref href=\"System.Security.Principal.SecurityIdentifier\"></xref>."}],"pos":[27601,27894],"yaml":true},{"content":"Gets the type that the <xref href=\"System.Security.AccessControl.RegistrySecurity\"></xref> class uses to represent access rules.","nodes":[{"pos":[0,128],"content":"Gets the type that the <ph id=\"ph1\">&lt;xref href=\"System.Security.AccessControl.RegistrySecurity\"&gt;&lt;/xref&gt;</ph> class uses to represent access rules.","source":"Gets the type that the <xref href=\"System.Security.AccessControl.RegistrySecurity\"></xref> class uses to represent access rules."}],"pos":[29187,29316],"yaml":true},{"content":"Classes that derive from the <xref:System.Security.AccessControl.ObjectSecurity> class override the <xref:System.Security.AccessControl.ObjectSecurity.AccessRuleType%2A> property and return the type they use to represent access rules. When you work with arrays or collections that contain multiple types of security objects, use this property to determine the correct access rule type to use with each security object.","nodes":[{"pos":[0,418],"content":"Classes that derive from the <xref:System.Security.AccessControl.ObjectSecurity> class override the <xref:System.Security.AccessControl.ObjectSecurity.AccessRuleType%2A> property and return the type they use to represent access rules. When you work with arrays or collections that contain multiple types of security objects, use this property to determine the correct access rule type to use with each security object.","nodes":[{"content":"Classes that derive from the <xref:System.Security.AccessControl.ObjectSecurity> class override the <xref:System.Security.AccessControl.ObjectSecurity.AccessRuleType%2A> property and return the type they use to represent access rules. When you work with arrays or collections that contain multiple types of security objects, use this property to determine the correct access rule type to use with each security object.","pos":[0,418],"nodes":[{"content":"Classes that derive from the <ph id=\"ph1\">&lt;xref:System.Security.AccessControl.ObjectSecurity&gt;</ph> class override the <ph id=\"ph2\">&lt;xref:System.Security.AccessControl.ObjectSecurity.AccessRuleType%2A&gt;</ph> property and return the type they use to represent access rules.","pos":[0,234],"source":"Classes that derive from the <xref:System.Security.AccessControl.ObjectSecurity> class override the <xref:System.Security.AccessControl.ObjectSecurity.AccessRuleType%2A> property and return the type they use to represent access rules."},{"content":"When you work with arrays or collections that contain multiple types of security objects, use this property to determine the correct access rule type to use with each security object.","pos":[235,418]}]}]}],"pos":[29327,29746],"yaml":true,"extradata":"MT"},{"content":"A <xref href=\"System.Type\"></xref> object representing the <xref href=\"System.Security.AccessControl.RegistryAccessRule\"></xref> class.","nodes":[{"pos":[0,135],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Type\"&gt;&lt;/xref&gt;</ph> object representing the <ph id=\"ph2\">&lt;xref href=\"System.Security.AccessControl.RegistryAccessRule\"&gt;&lt;/xref&gt;</ph> class.","source":"A <xref href=\"System.Type\"></xref> object representing the <xref href=\"System.Security.AccessControl.RegistryAccessRule\"></xref> class."}],"pos":[29869,30005],"yaml":true},{"content":"Searches for a matching access control with which the new rule can be merged. If none are found, adds the new rule.","nodes":[{"pos":[0,115],"content":"Searches for a matching access control with which the new rule can be merged. If none are found, adds the new rule.","nodes":[{"content":"Searches for a matching access control with which the new rule can be merged. If none are found, adds the new rule.","pos":[0,115],"nodes":[{"content":"Searches for a matching access control with which the new rule can be merged.","pos":[0,77]},{"content":"If none are found, adds the new rule.","pos":[78,115]}]}]}],"pos":[31592,31708],"yaml":true},{"content":"The <xref:System.Security.AccessControl.RegistrySecurity.AddAccessRule%2A> method searches for rules with the same user or group and the same <xref:System.Security.AccessControl.AccessControlType> as `rule`. If none are found, `rule` is added. If a matching rule is found, the rights in `rule` are merged with the existing rule.  \n  \n Rules cannot be merged if they have different inheritance flags. For example, if a user is allowed read access with no inheritance flags, and <xref:System.Security.AccessControl.RegistrySecurity.AddAccessRule%2A> is used to add a rule giving the user write access with inheritance for subkeys (<xref:System.Security.AccessControl.InheritanceFlags?displayProperty=fullName>), the two rules cannot be merged.  \n  \n Rules with different <xref:System.Security.AccessControl.AccessControlType> values are never merged.  \n  \n Rules express rights in the most economical way. For example, if a user has <xref:System.Security.AccessControl.RegistryRights.QueryValues>, <xref:System.Security.AccessControl.RegistryRights.Notify> and <xref:System.Security.AccessControl.RegistryRights.ReadPermissions> rights, and you add a rule allowing <xref:System.Security.AccessControl.RegistryRights.EnumerateSubKeys> rights, the user has all the constituent parts of <xref:System.Security.AccessControl.RegistryRights.ReadKey> rights. If you query the user's rights, you will see a rule containing <xref:System.Security.AccessControl.RegistryRights.ReadKey> rights. Similarly, if you remove <xref:System.Security.AccessControl.RegistryRights.EnumerateSubKeys> rights, the other constituents of <xref:System.Security.AccessControl.RegistryRights.ReadKey> rights will reappear.","nodes":[{"pos":[0,328],"content":"The <xref:System.Security.AccessControl.RegistrySecurity.AddAccessRule%2A> method searches for rules with the same user or group and the same <xref:System.Security.AccessControl.AccessControlType> as `rule`. If none are found, `rule` is added. If a matching rule is found, the rights in `rule` are merged with the existing rule.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Security.AccessControl.RegistrySecurity.AddAccessRule%2A&gt;</ph> method searches for rules with the same user or group and the same <ph id=\"ph2\">&lt;xref:System.Security.AccessControl.AccessControlType&gt;</ph> as <ph id=\"ph3\">`rule`</ph>.","pos":[0,207],"source":"The <xref:System.Security.AccessControl.RegistrySecurity.AddAccessRule%2A> method searches for rules with the same user or group and the same <xref:System.Security.AccessControl.AccessControlType> as `rule`."},{"content":"If none are found, <ph id=\"ph1\">`rule`</ph> is added.","pos":[208,243],"source":" If none are found, `rule` is added."},{"content":"If a matching rule is found, the rights in <ph id=\"ph1\">`rule`</ph> are merged with the existing rule.","pos":[244,328],"source":" If a matching rule is found, the rights in `rule` are merged with the existing rule."}]},{"pos":[335,741],"content":"Rules cannot be merged if they have different inheritance flags. For example, if a user is allowed read access with no inheritance flags, and <xref:System.Security.AccessControl.RegistrySecurity.AddAccessRule%2A> is used to add a rule giving the user write access with inheritance for subkeys (<xref:System.Security.AccessControl.InheritanceFlags?displayProperty=fullName>), the two rules cannot be merged.","nodes":[{"content":"Rules cannot be merged if they have different inheritance flags. For example, if a user is allowed read access with no inheritance flags, and <xref:System.Security.AccessControl.RegistrySecurity.AddAccessRule%2A> is used to add a rule giving the user write access with inheritance for subkeys (<xref:System.Security.AccessControl.InheritanceFlags?displayProperty=fullName>), the two rules cannot be merged.","pos":[0,406],"nodes":[{"content":"Rules cannot be merged if they have different inheritance flags.","pos":[0,64]},{"content":"For example, if a user is allowed read access with no inheritance flags, and <ph id=\"ph1\">&lt;xref:System.Security.AccessControl.RegistrySecurity.AddAccessRule%2A&gt;</ph> is used to add a rule giving the user write access with inheritance for subkeys (<ph id=\"ph2\">&lt;xref:System.Security.AccessControl.InheritanceFlags?displayProperty=fullName&gt;</ph>), the two rules cannot be merged.","pos":[65,406],"source":" For example, if a user is allowed read access with no inheritance flags, and <xref:System.Security.AccessControl.RegistrySecurity.AddAccessRule%2A> is used to add a rule giving the user write access with inheritance for subkeys (<xref:System.Security.AccessControl.InheritanceFlags?displayProperty=fullName>), the two rules cannot be merged."}]}]},{"pos":[748,848],"content":"Rules with different <xref:System.Security.AccessControl.AccessControlType> values are never merged.","nodes":[{"content":"Rules with different <ph id=\"ph1\">&lt;xref:System.Security.AccessControl.AccessControlType&gt;</ph> values are never merged.","pos":[0,100],"source":"Rules with different <xref:System.Security.AccessControl.AccessControlType> values are never merged."}]},{"pos":[855,1690],"content":"Rules express rights in the most economical way. For example, if a user has <xref:System.Security.AccessControl.RegistryRights.QueryValues>, <xref:System.Security.AccessControl.RegistryRights.Notify> and <xref:System.Security.AccessControl.RegistryRights.ReadPermissions> rights, and you add a rule allowing <xref:System.Security.AccessControl.RegistryRights.EnumerateSubKeys> rights, the user has all the constituent parts of <xref:System.Security.AccessControl.RegistryRights.ReadKey> rights. If you query the user's rights, you will see a rule containing <xref:System.Security.AccessControl.RegistryRights.ReadKey> rights. Similarly, if you remove <xref:System.Security.AccessControl.RegistryRights.EnumerateSubKeys> rights, the other constituents of <xref:System.Security.AccessControl.RegistryRights.ReadKey> rights will reappear.","nodes":[{"content":"Rules express rights in the most economical way. For example, if a user has <xref:System.Security.AccessControl.RegistryRights.QueryValues>, <xref:System.Security.AccessControl.RegistryRights.Notify> and <xref:System.Security.AccessControl.RegistryRights.ReadPermissions> rights, and you add a rule allowing <xref:System.Security.AccessControl.RegistryRights.EnumerateSubKeys> rights, the user has all the constituent parts of <xref:System.Security.AccessControl.RegistryRights.ReadKey> rights. If you query the user's rights, you will see a rule containing <xref:System.Security.AccessControl.RegistryRights.ReadKey> rights. Similarly, if you remove <xref:System.Security.AccessControl.RegistryRights.EnumerateSubKeys> rights, the other constituents of <xref:System.Security.AccessControl.RegistryRights.ReadKey> rights will reappear.","pos":[0,835],"nodes":[{"content":"Rules express rights in the most economical way.","pos":[0,48]},{"content":"For example, if a user has <ph id=\"ph1\">&lt;xref:System.Security.AccessControl.RegistryRights.QueryValues&gt;</ph>, <ph id=\"ph2\">&lt;xref:System.Security.AccessControl.RegistryRights.Notify&gt;</ph> and <ph id=\"ph3\">&lt;xref:System.Security.AccessControl.RegistryRights.ReadPermissions&gt;</ph> rights, and you add a rule allowing <ph id=\"ph4\">&lt;xref:System.Security.AccessControl.RegistryRights.EnumerateSubKeys&gt;</ph> rights, the user has all the constituent parts of <ph id=\"ph5\">&lt;xref:System.Security.AccessControl.RegistryRights.ReadKey&gt;</ph> rights.","pos":[49,494],"source":" For example, if a user has <xref:System.Security.AccessControl.RegistryRights.QueryValues>, <xref:System.Security.AccessControl.RegistryRights.Notify> and <xref:System.Security.AccessControl.RegistryRights.ReadPermissions> rights, and you add a rule allowing <xref:System.Security.AccessControl.RegistryRights.EnumerateSubKeys> rights, the user has all the constituent parts of <xref:System.Security.AccessControl.RegistryRights.ReadKey> rights."},{"content":"If you query the user's rights, you will see a rule containing <ph id=\"ph1\">&lt;xref:System.Security.AccessControl.RegistryRights.ReadKey&gt;</ph> rights.","pos":[495,625],"source":" If you query the user's rights, you will see a rule containing <xref:System.Security.AccessControl.RegistryRights.ReadKey> rights."},{"content":"Similarly, if you remove <ph id=\"ph1\">&lt;xref:System.Security.AccessControl.RegistryRights.EnumerateSubKeys&gt;</ph> rights, the other constituents of <ph id=\"ph2\">&lt;xref:System.Security.AccessControl.RegistryRights.ReadKey&gt;</ph> rights will reappear.","pos":[626,835],"source":" Similarly, if you remove <xref:System.Security.AccessControl.RegistryRights.EnumerateSubKeys> rights, the other constituents of <xref:System.Security.AccessControl.RegistryRights.ReadKey> rights will reappear."}]}]}],"pos":[31719,33418],"yaml":true,"extradata":"MT"},{"content":"The access control rule to add.","nodes":[{"pos":[0,31],"content":"The access control rule to add.","nodes":[{"content":"The access control rule to add.","pos":[0,31]}]}],"pos":[34820,34852],"yaml":true},{"content":"<code>rule</code> is `null`.","nodes":[{"pos":[0,28],"content":"<ph id=\"ph1\">&lt;code&gt;rule&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>rule</code> is `null`."}],"pos":[35042,35071],"yaml":true},{"content":"Searches for an audit rule with which the new rule can be merged. If none are found, adds the new rule.","nodes":[{"pos":[0,103],"content":"Searches for an audit rule with which the new rule can be merged. If none are found, adds the new rule.","nodes":[{"content":"Searches for an audit rule with which the new rule can be merged. If none are found, adds the new rule.","pos":[0,103],"nodes":[{"content":"Searches for an audit rule with which the new rule can be merged.","pos":[0,65]},{"content":"If none are found, adds the new rule.","pos":[66,103]}]}]}],"pos":[36554,36658],"yaml":true},{"content":"The <xref:System.Security.AccessControl.RegistrySecurity.AddAuditRule%2A> method searches for rules with the same user or group as `rule`. If none are found, `rule` is added. If a matching rule is found, the flags in `rule` are merged into the existing rule.  \n  \n Rules cannot be merged if they have different inheritance flags. For example, if failed attempts to write to a key are audited for a particular user, with no inheritance flags, and <xref:System.Security.AccessControl.RegistrySecurity.AddAuditRule%2A> is used to add a rule specifying that failed attempts to change permissions are to be audited for the same user, but with inheritance for subkeys (<xref:System.Security.AccessControl.InheritanceFlags?displayProperty=fullName>), the two rules cannot be merged.","nodes":[{"pos":[0,258],"content":"The <xref:System.Security.AccessControl.RegistrySecurity.AddAuditRule%2A> method searches for rules with the same user or group as `rule`. If none are found, `rule` is added. If a matching rule is found, the flags in `rule` are merged into the existing rule.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Security.AccessControl.RegistrySecurity.AddAuditRule%2A&gt;</ph> method searches for rules with the same user or group as <ph id=\"ph2\">`rule`</ph>.","pos":[0,138],"source":"The <xref:System.Security.AccessControl.RegistrySecurity.AddAuditRule%2A> method searches for rules with the same user or group as `rule`."},{"content":"If none are found, <ph id=\"ph1\">`rule`</ph> is added.","pos":[139,174],"source":" If none are found, `rule` is added."},{"content":"If a matching rule is found, the flags in <ph id=\"ph1\">`rule`</ph> are merged into the existing rule.","pos":[175,258],"source":" If a matching rule is found, the flags in `rule` are merged into the existing rule."}]},{"pos":[265,775],"content":"Rules cannot be merged if they have different inheritance flags. For example, if failed attempts to write to a key are audited for a particular user, with no inheritance flags, and <xref:System.Security.AccessControl.RegistrySecurity.AddAuditRule%2A> is used to add a rule specifying that failed attempts to change permissions are to be audited for the same user, but with inheritance for subkeys (<xref:System.Security.AccessControl.InheritanceFlags?displayProperty=fullName>), the two rules cannot be merged.","nodes":[{"content":"Rules cannot be merged if they have different inheritance flags. For example, if failed attempts to write to a key are audited for a particular user, with no inheritance flags, and <xref:System.Security.AccessControl.RegistrySecurity.AddAuditRule%2A> is used to add a rule specifying that failed attempts to change permissions are to be audited for the same user, but with inheritance for subkeys (<xref:System.Security.AccessControl.InheritanceFlags?displayProperty=fullName>), the two rules cannot be merged.","pos":[0,510],"nodes":[{"content":"Rules cannot be merged if they have different inheritance flags.","pos":[0,64]},{"content":"For example, if failed attempts to write to a key are audited for a particular user, with no inheritance flags, and <ph id=\"ph1\">&lt;xref:System.Security.AccessControl.RegistrySecurity.AddAuditRule%2A&gt;</ph> is used to add a rule specifying that failed attempts to change permissions are to be audited for the same user, but with inheritance for subkeys (<ph id=\"ph2\">&lt;xref:System.Security.AccessControl.InheritanceFlags?displayProperty=fullName&gt;</ph>), the two rules cannot be merged.","pos":[65,510],"source":" For example, if failed attempts to write to a key are audited for a particular user, with no inheritance flags, and <xref:System.Security.AccessControl.RegistrySecurity.AddAuditRule%2A> is used to add a rule specifying that failed attempts to change permissions are to be audited for the same user, but with inheritance for subkeys (<xref:System.Security.AccessControl.InheritanceFlags?displayProperty=fullName>), the two rules cannot be merged."}]}]}],"pos":[36669,37449],"yaml":true,"extradata":"MT"},{"content":"The audit rule to add. The user specified by this rule determines the search.","nodes":[{"pos":[0,77],"content":"The audit rule to add. The user specified by this rule determines the search.","nodes":[{"content":"The audit rule to add. The user specified by this rule determines the search.","pos":[0,77],"nodes":[{"content":"The audit rule to add.","pos":[0,22]},{"content":"The user specified by this rule determines the search.","pos":[23,77]}]}]}],"pos":[37663,37741],"yaml":true},{"content":"Creates a new audit rule, specifying the user the rule applies to, the access rights to audit, the inheritance and propagation of the rule, and the outcome that triggers the rule.","nodes":[{"pos":[0,179],"content":"Creates a new audit rule, specifying the user the rule applies to, the access rights to audit, the inheritance and propagation of the rule, and the outcome that triggers the rule.","nodes":[{"content":"Creates a new audit rule, specifying the user the rule applies to, the access rights to audit, the inheritance and propagation of the rule, and the outcome that triggers the rule.","pos":[0,179]}]}],"pos":[40007,40187],"yaml":true},{"content":"The recommended way to create audit rules is to use the constructors of the <xref:System.Security.AccessControl.RegistryAuditRule> class.  \n  \n> [!NOTE]\n>  Although you can specify the <xref:System.Security.AccessControl.InheritanceFlags?displayProperty=fullName> flag, there is no point in doing so. For the purposes of audit control, the name/value pairs in a subkey are not separate objects. The audit rights to name/value pairs are controlled by the rights of the subkey. Furthermore, since all subkeys are containers (that is, they can contain other subkeys), they are not affected by the <xref:System.Security.AccessControl.InheritanceFlags.ObjectInherit> flag. Finally, specifying the <xref:System.Security.AccessControl.InheritanceFlags.ObjectInherit> flag needlessly complicates the maintenance of rules, because it interferes with the normal combination of compatible rules.","nodes":[{"pos":[0,137],"content":"The recommended way to create audit rules is to use the constructors of the <xref:System.Security.AccessControl.RegistryAuditRule> class.","nodes":[{"content":"The recommended way to create audit rules is to use the constructors of the <ph id=\"ph1\">&lt;xref:System.Security.AccessControl.RegistryAuditRule&gt;</ph> class.","pos":[0,137],"source":"The recommended way to create audit rules is to use the constructors of the <xref:System.Security.AccessControl.RegistryAuditRule> class."}]},{"pos":[145,884],"content":"[!NOTE]\n Although you can specify the <xref:System.Security.AccessControl.InheritanceFlags?displayProperty=fullName> flag, there is no point in doing so. For the purposes of audit control, the name/value pairs in a subkey are not separate objects. The audit rights to name/value pairs are controlled by the rights of the subkey. Furthermore, since all subkeys are containers (that is, they can contain other subkeys), they are not affected by the <xref:System.Security.AccessControl.InheritanceFlags.ObjectInherit> flag. Finally, specifying the <xref:System.Security.AccessControl.InheritanceFlags.ObjectInherit> flag needlessly complicates the maintenance of rules, because it interferes with the normal combination of compatible rules.","leadings":["","> "],"nodes":[{"content":" Although you can specify the <xref:System.Security.AccessControl.InheritanceFlags?displayProperty=fullName> flag, there is no point in doing so. For the purposes of audit control, the name/value pairs in a subkey are not separate objects. The audit rights to name/value pairs are controlled by the rights of the subkey. Furthermore, since all subkeys are containers (that is, they can contain other subkeys), they are not affected by the <xref:System.Security.AccessControl.InheritanceFlags.ObjectInherit> flag. Finally, specifying the <xref:System.Security.AccessControl.InheritanceFlags.ObjectInherit> flag needlessly complicates the maintenance of rules, because it interferes with the normal combination of compatible rules.","pos":[8,737],"nodes":[{"content":"Although you can specify the <ph id=\"ph1\">&lt;xref:System.Security.AccessControl.InheritanceFlags?displayProperty=fullName&gt;</ph> flag, there is no point in doing so.","pos":[1,145],"source":" Although you can specify the <xref:System.Security.AccessControl.InheritanceFlags?displayProperty=fullName> flag, there is no point in doing so."},{"content":"For the purposes of audit control, the name/value pairs in a subkey are not separate objects.","pos":[146,239]},{"content":"The audit rights to name/value pairs are controlled by the rights of the subkey.","pos":[240,320]},{"content":"Furthermore, since all subkeys are containers (that is, they can contain other subkeys), they are not affected by the <ph id=\"ph1\">&lt;xref:System.Security.AccessControl.InheritanceFlags.ObjectInherit&gt;</ph> flag.","pos":[321,512],"source":" Furthermore, since all subkeys are containers (that is, they can contain other subkeys), they are not affected by the <xref:System.Security.AccessControl.InheritanceFlags.ObjectInherit> flag."},{"content":"Finally, specifying the <ph id=\"ph1\">&lt;xref:System.Security.AccessControl.InheritanceFlags.ObjectInherit&gt;</ph> flag needlessly complicates the maintenance of rules, because it interferes with the normal combination of compatible rules.","pos":[513,729],"source":" Finally, specifying the <xref:System.Security.AccessControl.InheritanceFlags.ObjectInherit> flag needlessly complicates the maintenance of rules, because it interferes with the normal combination of compatible rules."}]}]}],"pos":[40198,41088],"yaml":true,"extradata":"MT"},{"content":"An <xref href=\"System.Security.Principal.IdentityReference\"></xref> that identifies the user or group the rule applies to.","nodes":[{"pos":[0,122],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Security.Principal.IdentityReference\"&gt;&lt;/xref&gt;</ph> that identifies the user or group the rule applies to.","source":"An <xref href=\"System.Security.Principal.IdentityReference\"></xref> that identifies the user or group the rule applies to."}],"pos":[41580,41703],"yaml":true},{"content":"A bitwise combination of <xref href=\"System.Security.AccessControl.RegistryRights\"></xref> values specifying the access rights to audit, cast to an integer.","nodes":[{"pos":[0,156],"content":"A bitwise combination of <ph id=\"ph1\">&lt;xref href=\"System.Security.AccessControl.RegistryRights\"&gt;&lt;/xref&gt;</ph> values specifying the access rights to audit, cast to an integer.","source":"A bitwise combination of <xref href=\"System.Security.AccessControl.RegistryRights\"></xref> values specifying the access rights to audit, cast to an integer."}],"pos":[41768,41925],"yaml":true},{"content":"A Boolean value specifying whether the rule is inherited.","nodes":[{"pos":[0,57],"content":"A Boolean value specifying whether the rule is inherited.","nodes":[{"content":"A Boolean value specifying whether the rule is inherited.","pos":[0,57]}]}],"pos":[41993,42051],"yaml":true},{"content":"A bitwise combination of <xref href=\"System.Security.AccessControl.InheritanceFlags\"></xref> values specifying how the rule is inherited by subkeys.","nodes":[{"pos":[0,148],"content":"A bitwise combination of <ph id=\"ph1\">&lt;xref href=\"System.Security.AccessControl.InheritanceFlags\"&gt;&lt;/xref&gt;</ph> values specifying how the rule is inherited by subkeys.","source":"A bitwise combination of <xref href=\"System.Security.AccessControl.InheritanceFlags\"></xref> values specifying how the rule is inherited by subkeys."}],"pos":[42156,42305],"yaml":true},{"content":"A bitwise combination of <xref href=\"System.Security.AccessControl.PropagationFlags\"></xref> values that modify the way the rule is inherited by subkeys. Meaningless if the value of <code>inheritanceFlags</code> is <xref href=\"System.Security.AccessControl.InheritanceFlags.None\"></xref>.","nodes":[{"pos":[0,288],"content":"A bitwise combination of <xref href=\"System.Security.AccessControl.PropagationFlags\"></xref> values that modify the way the rule is inherited by subkeys. Meaningless if the value of <code>inheritanceFlags</code> is <xref href=\"System.Security.AccessControl.InheritanceFlags.None\"></xref>.","nodes":[{"content":"A bitwise combination of <ph id=\"ph1\">&lt;xref href=\"System.Security.AccessControl.PropagationFlags\"&gt;&lt;/xref&gt;</ph> values that modify the way the rule is inherited by subkeys.","pos":[0,153],"source":"A bitwise combination of <xref href=\"System.Security.AccessControl.PropagationFlags\"></xref> values that modify the way the rule is inherited by subkeys."},{"content":"Meaningless if the value of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">inheritanceFlags</ph><ept id=\"p1\">&lt;/code&gt;</ept> is <ph id=\"ph2\">&lt;xref href=\"System.Security.AccessControl.InheritanceFlags.None\"&gt;&lt;/xref&gt;</ph>.","pos":[154,288],"source":" Meaningless if the value of <code>inheritanceFlags</code> is <xref href=\"System.Security.AccessControl.InheritanceFlags.None\"></xref>."}]}],"pos":[42410,42699],"yaml":true},{"content":"A bitwise combination of <xref href=\"System.Security.AccessControl.AuditFlags\"></xref> values specifying whether to audit successful access, failed access, or both.","nodes":[{"pos":[0,164],"content":"A bitwise combination of <ph id=\"ph1\">&lt;xref href=\"System.Security.AccessControl.AuditFlags\"&gt;&lt;/xref&gt;</ph> values specifying whether to audit successful access, failed access, or both.","source":"A bitwise combination of <xref href=\"System.Security.AccessControl.AuditFlags\"></xref> values specifying whether to audit successful access, failed access, or both."}],"pos":[42787,42952],"yaml":true},{"content":"A <xref href=\"System.Security.AccessControl.RegistryAuditRule\"></xref> object representing the specified audit rule for the specified user, with the specified flags. The return type of the method is the base class, <xref href=\"System.Security.AccessControl.AuditRule\"></xref>, but the return value can be cast safely to the derived class.","nodes":[{"pos":[0,338],"content":"A <xref href=\"System.Security.AccessControl.RegistryAuditRule\"></xref> object representing the specified audit rule for the specified user, with the specified flags. The return type of the method is the base class, <xref href=\"System.Security.AccessControl.AuditRule\"></xref>, but the return value can be cast safely to the derived class.","nodes":[{"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Security.AccessControl.RegistryAuditRule\"&gt;&lt;/xref&gt;</ph> object representing the specified audit rule for the specified user, with the specified flags.","pos":[0,165],"source":"A <xref href=\"System.Security.AccessControl.RegistryAuditRule\"></xref> object representing the specified audit rule for the specified user, with the specified flags."},{"content":"The return type of the method is the base class, <ph id=\"ph1\">&lt;xref href=\"System.Security.AccessControl.AuditRule\"&gt;&lt;/xref&gt;</ph>, but the return value can be cast safely to the derived class.","pos":[166,338],"source":" The return type of the method is the base class, <xref href=\"System.Security.AccessControl.AuditRule\"></xref>, but the return value can be cast safely to the derived class."}]}],"pos":[43035,43374],"yaml":true},{"content":"<code>accessMask</code>, <code>inheritanceFlags</code>, <code>propagationFlags</code>, or <code>flags</code> specifies an invalid value.","nodes":[{"pos":[0,136],"content":"<ph id=\"ph1\">&lt;code&gt;accessMask&lt;/code&gt;</ph>, <ph id=\"ph2\">&lt;code&gt;inheritanceFlags&lt;/code&gt;</ph>, <ph id=\"ph3\">&lt;code&gt;propagationFlags&lt;/code&gt;</ph>, or <ph id=\"ph4\">&lt;code&gt;flags&lt;/code&gt;</ph> specifies an invalid value.","source":"<code>accessMask</code>, <code>inheritanceFlags</code>, <code>propagationFlags</code>, or <code>flags</code> specifies an invalid value."}],"pos":[43579,43716],"yaml":true},{"content":"<code>identityReference</code> is `null`.  \n  \n -or-  \n  \n <code>accessMask</code> is zero.","nodes":[{"pos":[0,41],"content":"<ph id=\"ph1\">&lt;code&gt;identityReference&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>identityReference</code> is `null`."},{"pos":[48,52],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[59,91],"content":"<ph id=\"ph1\">&lt;code&gt;accessMask&lt;/code&gt;</ph> is zero.","source":"<code>accessMask</code> is zero."}],"pos":[43818,43916],"yaml":true},{"content":"<code>identityReference</code> is neither of type <xref href=\"System.Security.Principal.SecurityIdentifier\"></xref>, nor of a type such as <xref href=\"System.Security.Principal.NTAccount\"></xref> that can be converted to type <xref href=\"System.Security.Principal.SecurityIdentifier\"></xref>.","nodes":[{"pos":[0,292],"content":"<ph id=\"ph1\">&lt;code&gt;identityReference&lt;/code&gt;</ph> is neither of type <ph id=\"ph2\">&lt;xref href=\"System.Security.Principal.SecurityIdentifier\"&gt;&lt;/xref&gt;</ph>, nor of a type such as <ph id=\"ph3\">&lt;xref href=\"System.Security.Principal.NTAccount\"&gt;&lt;/xref&gt;</ph> that can be converted to type <ph id=\"ph4\">&lt;xref href=\"System.Security.Principal.SecurityIdentifier\"&gt;&lt;/xref&gt;</ph>.","source":"<code>identityReference</code> is neither of type <xref href=\"System.Security.Principal.SecurityIdentifier\"></xref>, nor of a type such as <xref href=\"System.Security.Principal.NTAccount\"></xref> that can be converted to type <xref href=\"System.Security.Principal.SecurityIdentifier\"></xref>."}],"pos":[44010,44303],"yaml":true},{"content":"Gets the type that the <xref href=\"System.Security.AccessControl.RegistrySecurity\"></xref> class uses to represent audit rules.","nodes":[{"pos":[0,127],"content":"Gets the type that the <ph id=\"ph1\">&lt;xref href=\"System.Security.AccessControl.RegistrySecurity\"&gt;&lt;/xref&gt;</ph> class uses to represent audit rules.","source":"Gets the type that the <xref href=\"System.Security.AccessControl.RegistrySecurity\"></xref> class uses to represent audit rules."}],"pos":[45590,45718],"yaml":true},{"content":"Classes that derive from the <xref:System.Security.AccessControl.ObjectSecurity> class override the <xref:System.Security.AccessControl.ObjectSecurity.AuditRuleType%2A> property and return the type they use to represent audit rights. When you work with arrays or collections that contain multiple types of security objects, use this property to determine the correct audit rule type to use with each security object.","nodes":[{"pos":[0,416],"content":"Classes that derive from the <xref:System.Security.AccessControl.ObjectSecurity> class override the <xref:System.Security.AccessControl.ObjectSecurity.AuditRuleType%2A> property and return the type they use to represent audit rights. When you work with arrays or collections that contain multiple types of security objects, use this property to determine the correct audit rule type to use with each security object.","nodes":[{"content":"Classes that derive from the <xref:System.Security.AccessControl.ObjectSecurity> class override the <xref:System.Security.AccessControl.ObjectSecurity.AuditRuleType%2A> property and return the type they use to represent audit rights. When you work with arrays or collections that contain multiple types of security objects, use this property to determine the correct audit rule type to use with each security object.","pos":[0,416],"nodes":[{"content":"Classes that derive from the <ph id=\"ph1\">&lt;xref:System.Security.AccessControl.ObjectSecurity&gt;</ph> class override the <ph id=\"ph2\">&lt;xref:System.Security.AccessControl.ObjectSecurity.AuditRuleType%2A&gt;</ph> property and return the type they use to represent audit rights.","pos":[0,233],"source":"Classes that derive from the <xref:System.Security.AccessControl.ObjectSecurity> class override the <xref:System.Security.AccessControl.ObjectSecurity.AuditRuleType%2A> property and return the type they use to represent audit rights."},{"content":"When you work with arrays or collections that contain multiple types of security objects, use this property to determine the correct audit rule type to use with each security object.","pos":[234,416]}]}]}],"pos":[45729,46146],"yaml":true,"extradata":"MT"},{"content":"A <xref href=\"System.Type\"></xref> object representing the <xref href=\"System.Security.AccessControl.RegistryAuditRule\"></xref> class.","nodes":[{"pos":[0,134],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Type\"&gt;&lt;/xref&gt;</ph> object representing the <ph id=\"ph2\">&lt;xref href=\"System.Security.AccessControl.RegistryAuditRule\"&gt;&lt;/xref&gt;</ph> class.","source":"A <xref href=\"System.Type\"></xref> object representing the <xref href=\"System.Security.AccessControl.RegistryAuditRule\"></xref> class."}],"pos":[46268,46403],"yaml":true},{"content":"Searches for an access control rule with the same user and <xref href=\"System.Security.AccessControl.AccessControlType\"></xref> (allow or deny) as the specified access rule, and with compatible inheritance and propagation flags; if such a rule is found, the rights contained in the specified access rule are removed from it.","nodes":[{"pos":[0,324],"content":"Searches for an access control rule with the same user and <ph id=\"ph1\">&lt;xref href=\"System.Security.AccessControl.AccessControlType\"&gt;&lt;/xref&gt;</ph> (allow or deny) as the specified access rule, and with compatible inheritance and propagation flags; if such a rule is found, the rights contained in the specified access rule are removed from it.","source":"Searches for an access control rule with the same user and <xref href=\"System.Security.AccessControl.AccessControlType\"></xref> (allow or deny) as the specified access rule, and with compatible inheritance and propagation flags; if such a rule is found, the rights contained in the specified access rule are removed from it."}],"pos":[48007,48332],"yaml":true},{"content":"The current <xref:System.Security.AccessControl.RegistrySecurity> is searched for a rule that has the same user and the same <xref:System.Security.AccessControl.AccessControlType> value as `rule`. If no such rule is found, no action is taken, and the method returns `false`. If matching rules are found, their inheritance and compatibility flags are checked for compatibility with the flags specified in `rule`. If no compatible rule is found, no action is taken, and the method returns `false`. If a rule with compatible flags is found, the rights specified in `rule` are removed from the compatible rule, and the method returns `true`. If `rule` specifies rights not contained in the compatible rule, no action is taken with respect to those rights. If all rights are removed from the compatible rule, the entire rule is removed from the current <xref:System.Security.AccessControl.RegistrySecurity> object.","nodes":[{"pos":[0,909],"content":"The current <xref:System.Security.AccessControl.RegistrySecurity> is searched for a rule that has the same user and the same <xref:System.Security.AccessControl.AccessControlType> value as `rule`. If no such rule is found, no action is taken, and the method returns `false`. If matching rules are found, their inheritance and compatibility flags are checked for compatibility with the flags specified in `rule`. If no compatible rule is found, no action is taken, and the method returns `false`. If a rule with compatible flags is found, the rights specified in `rule` are removed from the compatible rule, and the method returns `true`. If `rule` specifies rights not contained in the compatible rule, no action is taken with respect to those rights. If all rights are removed from the compatible rule, the entire rule is removed from the current <xref:System.Security.AccessControl.RegistrySecurity> object.","nodes":[{"content":"The current <ph id=\"ph1\">&lt;xref:System.Security.AccessControl.RegistrySecurity&gt;</ph> is searched for a rule that has the same user and the same <ph id=\"ph2\">&lt;xref:System.Security.AccessControl.AccessControlType&gt;</ph> value as <ph id=\"ph3\">`rule`</ph>.","pos":[0,196],"source":"The current <xref:System.Security.AccessControl.RegistrySecurity> is searched for a rule that has the same user and the same <xref:System.Security.AccessControl.AccessControlType> value as `rule`."},{"content":"If no such rule is found, no action is taken, and the method returns <ph id=\"ph1\">`false`</ph>.","pos":[197,274],"source":" If no such rule is found, no action is taken, and the method returns `false`."},{"content":"If matching rules are found, their inheritance and compatibility flags are checked for compatibility with the flags specified in <ph id=\"ph1\">`rule`</ph>.","pos":[275,411],"source":" If matching rules are found, their inheritance and compatibility flags are checked for compatibility with the flags specified in `rule`."},{"content":"If no compatible rule is found, no action is taken, and the method returns <ph id=\"ph1\">`false`</ph>.","pos":[412,495],"source":" If no compatible rule is found, no action is taken, and the method returns `false`."},{"content":"If a rule with compatible flags is found, the rights specified in <ph id=\"ph1\">`rule`</ph> are removed from the compatible rule, and the method returns <ph id=\"ph2\">`true`</ph>.","pos":[496,637],"source":" If a rule with compatible flags is found, the rights specified in `rule` are removed from the compatible rule, and the method returns `true`."},{"content":"If <ph id=\"ph1\">`rule`</ph> specifies rights not contained in the compatible rule, no action is taken with respect to those rights.","pos":[638,751],"source":" If `rule` specifies rights not contained in the compatible rule, no action is taken with respect to those rights."},{"content":"If all rights are removed from the compatible rule, the entire rule is removed from the current <ph id=\"ph1\">&lt;xref:System.Security.AccessControl.RegistrySecurity&gt;</ph> object.","pos":[752,909],"source":" If all rights are removed from the compatible rule, the entire rule is removed from the current <xref:System.Security.AccessControl.RegistrySecurity> object."}]}],"pos":[48343,49253],"yaml":true,"extradata":"MT"},{"content":"A <xref href=\"System.Security.AccessControl.RegistryAccessRule\"></xref> that specifies the user and <xref href=\"System.Security.AccessControl.AccessControlType\"></xref> to search for, and a set of inheritance and propagation flags that a matching rule, if found, must be compatible with. Specifies the rights to remove from the compatible rule, if found.","nodes":[{"pos":[0,354],"content":"A <xref href=\"System.Security.AccessControl.RegistryAccessRule\"></xref> that specifies the user and <xref href=\"System.Security.AccessControl.AccessControlType\"></xref> to search for, and a set of inheritance and propagation flags that a matching rule, if found, must be compatible with. Specifies the rights to remove from the compatible rule, if found.","nodes":[{"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Security.AccessControl.RegistryAccessRule\"&gt;&lt;/xref&gt;</ph> that specifies the user and <ph id=\"ph2\">&lt;xref href=\"System.Security.AccessControl.AccessControlType\"&gt;&lt;/xref&gt;</ph> to search for, and a set of inheritance and propagation flags that a matching rule, if found, must be compatible with.","pos":[0,287],"source":"A <xref href=\"System.Security.AccessControl.RegistryAccessRule\"></xref> that specifies the user and <xref href=\"System.Security.AccessControl.AccessControlType\"></xref> to search for, and a set of inheritance and propagation flags that a matching rule, if found, must be compatible with."},{"content":"Specifies the rights to remove from the compatible rule, if found.","pos":[288,354]}]}],"pos":[51853,52208],"yaml":true},{"content":"`true` if a compatible rule is found; otherwise `false`.","nodes":[{"pos":[0,56],"content":"<ph id=\"ph1\">`true`</ph> if a compatible rule is found; otherwise <ph id=\"ph2\">`false`</ph>.","source":"`true` if a compatible rule is found; otherwise `false`."}],"pos":[52266,52325],"yaml":true},{"content":"<code>rule</code> is `null`.","nodes":[{"pos":[0,28],"content":"<ph id=\"ph1\">&lt;code&gt;rule&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>rule</code> is `null`."}],"pos":[52518,52547],"yaml":true},{"content":"Searches for all access control rules with the same user and <xref href=\"System.Security.AccessControl.AccessControlType\"></xref> (allow or deny) as the specified rule and, if found, removes them.","nodes":[{"pos":[0,196],"content":"Searches for all access control rules with the same user and <ph id=\"ph1\">&lt;xref href=\"System.Security.AccessControl.AccessControlType\"&gt;&lt;/xref&gt;</ph> (allow or deny) as the specified rule and, if found, removes them.","source":"Searches for all access control rules with the same user and <xref href=\"System.Security.AccessControl.AccessControlType\"></xref> (allow or deny) as the specified rule and, if found, removes them."}],"pos":[54078,54275],"yaml":true},{"content":"The current <xref:System.Security.AccessControl.RegistrySecurity> is searched for rules that have the same user and the same <xref:System.Security.AccessControl.AccessControlType> value as `rule`. Any rights, inheritance flags, or propagation flags specified by `rule` are ignored when performing this search. If no matching rules are found, no action is taken.  \n  \n For example, if a user has multiple rules that allow various rights with different inheritance and propagation flags, you can remove all those rules by creating a <xref:System.Security.AccessControl.RegistryAccessRule> object that specifies the user and <xref:System.Security.AccessControl.AccessControlType?displayProperty=fullName>, with any arbitrary rights and flags, and passing that rule to the <xref:System.Security.AccessControl.RegistrySecurity.RemoveAccessRuleAll%2A> method.","nodes":[{"pos":[0,361],"content":"The current <xref:System.Security.AccessControl.RegistrySecurity> is searched for rules that have the same user and the same <xref:System.Security.AccessControl.AccessControlType> value as `rule`. Any rights, inheritance flags, or propagation flags specified by `rule` are ignored when performing this search. If no matching rules are found, no action is taken.","nodes":[{"content":"The current <ph id=\"ph1\">&lt;xref:System.Security.AccessControl.RegistrySecurity&gt;</ph> is searched for rules that have the same user and the same <ph id=\"ph2\">&lt;xref:System.Security.AccessControl.AccessControlType&gt;</ph> value as <ph id=\"ph3\">`rule`</ph>.","pos":[0,196],"source":"The current <xref:System.Security.AccessControl.RegistrySecurity> is searched for rules that have the same user and the same <xref:System.Security.AccessControl.AccessControlType> value as `rule`."},{"content":"Any rights, inheritance flags, or propagation flags specified by <ph id=\"ph1\">`rule`</ph> are ignored when performing this search.","pos":[197,309],"source":" Any rights, inheritance flags, or propagation flags specified by `rule` are ignored when performing this search."},{"content":"If no matching rules are found, no action is taken.","pos":[310,361]}]},{"pos":[368,853],"content":"For example, if a user has multiple rules that allow various rights with different inheritance and propagation flags, you can remove all those rules by creating a <xref:System.Security.AccessControl.RegistryAccessRule> object that specifies the user and <xref:System.Security.AccessControl.AccessControlType?displayProperty=fullName>, with any arbitrary rights and flags, and passing that rule to the <xref:System.Security.AccessControl.RegistrySecurity.RemoveAccessRuleAll%2A> method.","nodes":[{"content":"For example, if a user has multiple rules that allow various rights with different inheritance and propagation flags, you can remove all those rules by creating a <ph id=\"ph1\">&lt;xref:System.Security.AccessControl.RegistryAccessRule&gt;</ph> object that specifies the user and <ph id=\"ph2\">&lt;xref:System.Security.AccessControl.AccessControlType?displayProperty=fullName&gt;</ph>, with any arbitrary rights and flags, and passing that rule to the <ph id=\"ph3\">&lt;xref:System.Security.AccessControl.RegistrySecurity.RemoveAccessRuleAll%2A&gt;</ph> method.","pos":[0,485],"source":"For example, if a user has multiple rules that allow various rights with different inheritance and propagation flags, you can remove all those rules by creating a <xref:System.Security.AccessControl.RegistryAccessRule> object that specifies the user and <xref:System.Security.AccessControl.AccessControlType?displayProperty=fullName>, with any arbitrary rights and flags, and passing that rule to the <xref:System.Security.AccessControl.RegistrySecurity.RemoveAccessRuleAll%2A> method."}]}],"pos":[54286,55144],"yaml":true,"extradata":"MT"},{"content":"A <xref href=\"System.Security.AccessControl.RegistryAccessRule\"></xref> that specifies the user and <xref href=\"System.Security.AccessControl.AccessControlType\"></xref> to search for. Any rights, inheritance flags, or propagation flags specified by this rule are ignored.","nodes":[{"pos":[0,271],"content":"A <xref href=\"System.Security.AccessControl.RegistryAccessRule\"></xref> that specifies the user and <xref href=\"System.Security.AccessControl.AccessControlType\"></xref> to search for. Any rights, inheritance flags, or propagation flags specified by this rule are ignored.","nodes":[{"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Security.AccessControl.RegistryAccessRule\"&gt;&lt;/xref&gt;</ph> that specifies the user and <ph id=\"ph2\">&lt;xref href=\"System.Security.AccessControl.AccessControlType\"&gt;&lt;/xref&gt;</ph> to search for.","pos":[0,183],"source":"A <xref href=\"System.Security.AccessControl.RegistryAccessRule\"></xref> that specifies the user and <xref href=\"System.Security.AccessControl.AccessControlType\"></xref> to search for."},{"content":"Any rights, inheritance flags, or propagation flags specified by this rule are ignored.","pos":[184,271]}]}],"pos":[56837,57109],"yaml":true},{"content":"<code>rule</code> is `null`.","nodes":[{"pos":[0,28],"content":"<ph id=\"ph1\">&lt;code&gt;rule&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>rule</code> is `null`."}],"pos":[57305,57334],"yaml":true},{"content":"Searches for an access control rule that exactly matches the specified rule and, if found, removes it.","nodes":[{"pos":[0,102],"content":"Searches for an access control rule that exactly matches the specified rule and, if found, removes it.","nodes":[{"content":"Searches for an access control rule that exactly matches the specified rule and, if found, removes it.","pos":[0,102]}]}],"pos":[58895,58998],"yaml":true},{"content":"The rule is removed only if it exactly matches `rule` in all details, including flags. Other rules with the same user and <xref:System.Security.AccessControl.AccessControlType> are not affected.  \n  \n> [!IMPORTANT]\n>  A rule represents one or more underlying access control entries (ACE), and these entries are split or combined as necessary when you modify the access security rules for a user. Thus, a rule might no longer exist in the specific form it had when it was added, and in that case the <xref:System.Security.AccessControl.RegistrySecurity.RemoveAccessRuleSpecific%2A> method cannot remove it.","nodes":[{"pos":[0,194],"content":"The rule is removed only if it exactly matches `rule` in all details, including flags. Other rules with the same user and <xref:System.Security.AccessControl.AccessControlType> are not affected.","nodes":[{"content":"The rule is removed only if it exactly matches <ph id=\"ph1\">`rule`</ph> in all details, including flags.","pos":[0,86],"source":"The rule is removed only if it exactly matches `rule` in all details, including flags."},{"content":"Other rules with the same user and <ph id=\"ph1\">&lt;xref:System.Security.AccessControl.AccessControlType&gt;</ph> are not affected.","pos":[87,194],"source":" Other rules with the same user and <xref:System.Security.AccessControl.AccessControlType> are not affected."}]},{"pos":[202,605],"content":"[!IMPORTANT]\n A rule represents one or more underlying access control entries (ACE), and these entries are split or combined as necessary when you modify the access security rules for a user. Thus, a rule might no longer exist in the specific form it had when it was added, and in that case the <xref:System.Security.AccessControl.RegistrySecurity.RemoveAccessRuleSpecific%2A> method cannot remove it.","leadings":["","> "],"nodes":[{"content":" A rule represents one or more underlying access control entries (ACE), and these entries are split or combined as necessary when you modify the access security rules for a user. Thus, a rule might no longer exist in the specific form it had when it was added, and in that case the <xref:System.Security.AccessControl.RegistrySecurity.RemoveAccessRuleSpecific%2A> method cannot remove it.","pos":[13,401],"nodes":[{"content":"A rule represents one or more underlying access control entries (ACE), and these entries are split or combined as necessary when you modify the access security rules for a user.","pos":[1,178]},{"content":"Thus, a rule might no longer exist in the specific form it had when it was added, and in that case the <ph id=\"ph1\">&lt;xref:System.Security.AccessControl.RegistrySecurity.RemoveAccessRuleSpecific%2A&gt;</ph> method cannot remove it.","pos":[179,388],"source":" Thus, a rule might no longer exist in the specific form it had when it was added, and in that case the <xref:System.Security.AccessControl.RegistrySecurity.RemoveAccessRuleSpecific%2A> method cannot remove it."}]}]}],"pos":[59009,59620],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Security.AccessControl.RegistryAccessRule\"></xref> to remove.","nodes":[{"pos":[0,84],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Security.AccessControl.RegistryAccessRule\"&gt;&lt;/xref&gt;</ph> to remove.","source":"The <xref href=\"System.Security.AccessControl.RegistryAccessRule\"></xref> to remove."}],"pos":[61500,61585],"yaml":true},{"content":"<code>rule</code> is `null`.","nodes":[{"pos":[0,28],"content":"<ph id=\"ph1\">&lt;code&gt;rule&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>rule</code> is `null`."}],"pos":[61786,61815],"yaml":true},{"content":"Searches for an audit control rule with the same user as the specified rule, and with compatible inheritance and propagation flags; if a compatible rule is found, the rights contained in the specified rule are removed from it.","nodes":[{"pos":[0,226],"content":"Searches for an audit control rule with the same user as the specified rule, and with compatible inheritance and propagation flags; if a compatible rule is found, the rights contained in the specified rule are removed from it.","nodes":[{"content":"Searches for an audit control rule with the same user as the specified rule, and with compatible inheritance and propagation flags; if a compatible rule is found, the rights contained in the specified rule are removed from it.","pos":[0,226]}]}],"pos":[63316,63543],"yaml":true},{"content":"The current <xref:System.Security.AccessControl.RegistrySecurity> is searched for an audit rule that has the same user as `rule`. If no such rule is found, no action is taken, and the method returns `false`. If matching rules are found, their inheritance and compatibility flags are checked for compatibility with the flags specified in `rule`. If no compatible rule is found, no action is taken, and the method returns `false`. If a rule with compatible flags is found, the rights specified in `rule` are removed from the compatible rule, and the method returns `true`. If `rule` specifies rights not contained in the compatible rule, no action is taken with respect to those rights. If all rights are removed from the compatible rule, the entire rule is removed from the current <xref:System.Security.AccessControl.RegistrySecurity> object.","nodes":[{"pos":[0,842],"content":"The current <xref:System.Security.AccessControl.RegistrySecurity> is searched for an audit rule that has the same user as `rule`. If no such rule is found, no action is taken, and the method returns `false`. If matching rules are found, their inheritance and compatibility flags are checked for compatibility with the flags specified in `rule`. If no compatible rule is found, no action is taken, and the method returns `false`. If a rule with compatible flags is found, the rights specified in `rule` are removed from the compatible rule, and the method returns `true`. If `rule` specifies rights not contained in the compatible rule, no action is taken with respect to those rights. If all rights are removed from the compatible rule, the entire rule is removed from the current <xref:System.Security.AccessControl.RegistrySecurity> object.","nodes":[{"content":"The current <ph id=\"ph1\">&lt;xref:System.Security.AccessControl.RegistrySecurity&gt;</ph> is searched for an audit rule that has the same user as <ph id=\"ph2\">`rule`</ph>.","pos":[0,129],"source":"The current <xref:System.Security.AccessControl.RegistrySecurity> is searched for an audit rule that has the same user as `rule`."},{"content":"If no such rule is found, no action is taken, and the method returns <ph id=\"ph1\">`false`</ph>.","pos":[130,207],"source":" If no such rule is found, no action is taken, and the method returns `false`."},{"content":"If matching rules are found, their inheritance and compatibility flags are checked for compatibility with the flags specified in <ph id=\"ph1\">`rule`</ph>.","pos":[208,344],"source":" If matching rules are found, their inheritance and compatibility flags are checked for compatibility with the flags specified in `rule`."},{"content":"If no compatible rule is found, no action is taken, and the method returns <ph id=\"ph1\">`false`</ph>.","pos":[345,428],"source":" If no compatible rule is found, no action is taken, and the method returns `false`."},{"content":"If a rule with compatible flags is found, the rights specified in <ph id=\"ph1\">`rule`</ph> are removed from the compatible rule, and the method returns <ph id=\"ph2\">`true`</ph>.","pos":[429,570],"source":" If a rule with compatible flags is found, the rights specified in `rule` are removed from the compatible rule, and the method returns `true`."},{"content":"If <ph id=\"ph1\">`rule`</ph> specifies rights not contained in the compatible rule, no action is taken with respect to those rights.","pos":[571,684],"source":" If `rule` specifies rights not contained in the compatible rule, no action is taken with respect to those rights."},{"content":"If all rights are removed from the compatible rule, the entire rule is removed from the current <ph id=\"ph1\">&lt;xref:System.Security.AccessControl.RegistrySecurity&gt;</ph> object.","pos":[685,842],"source":" If all rights are removed from the compatible rule, the entire rule is removed from the current <xref:System.Security.AccessControl.RegistrySecurity> object."}]}],"pos":[63554,64397],"yaml":true,"extradata":"MT"},{"content":"A <xref href=\"System.Security.AccessControl.RegistryAuditRule\"></xref> that specifies the user to search for, and a set of inheritance and propagation flags that a matching rule, if found, must be compatible with. Specifies the rights to remove from the compatible rule, if found.","nodes":[{"pos":[0,280],"content":"A <xref href=\"System.Security.AccessControl.RegistryAuditRule\"></xref> that specifies the user to search for, and a set of inheritance and propagation flags that a matching rule, if found, must be compatible with. Specifies the rights to remove from the compatible rule, if found.","nodes":[{"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Security.AccessControl.RegistryAuditRule\"&gt;&lt;/xref&gt;</ph> that specifies the user to search for, and a set of inheritance and propagation flags that a matching rule, if found, must be compatible with.","pos":[0,213],"source":"A <xref href=\"System.Security.AccessControl.RegistryAuditRule\"></xref> that specifies the user to search for, and a set of inheritance and propagation flags that a matching rule, if found, must be compatible with."},{"content":"Specifies the rights to remove from the compatible rule, if found.","pos":[214,280]}]}],"pos":[64614,64895],"yaml":true},{"content":"`true` if a compatible rule is found; otherwise, `false`.","nodes":[{"pos":[0,57],"content":"<ph id=\"ph1\">`true`</ph> if a compatible rule is found; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` if a compatible rule is found; otherwise, `false`."}],"pos":[64953,65013],"yaml":true},{"content":"<code>rule</code> is `null`.","nodes":[{"pos":[0,28],"content":"<ph id=\"ph1\">&lt;code&gt;rule&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>rule</code> is `null`."}],"pos":[65205,65234],"yaml":true},{"content":"Searches for all audit rules with the same user as the specified rule and, if found, removes them.","nodes":[{"pos":[0,98],"content":"Searches for all audit rules with the same user as the specified rule and, if found, removes them.","nodes":[{"content":"Searches for all audit rules with the same user as the specified rule and, if found, removes them.","pos":[0,98]}]}],"pos":[66753,66852],"yaml":true},{"content":"The current <xref:System.Security.AccessControl.RegistrySecurity> is searched for audit rules that have the same user as `rule`. Any rights, inheritance flags, or propagation flags specified by `rule` are ignored when performing this search. If no matching rules are found, no action is taken.","nodes":[{"pos":[0,293],"content":"The current <xref:System.Security.AccessControl.RegistrySecurity> is searched for audit rules that have the same user as `rule`. Any rights, inheritance flags, or propagation flags specified by `rule` are ignored when performing this search. If no matching rules are found, no action is taken.","nodes":[{"content":"The current <ph id=\"ph1\">&lt;xref:System.Security.AccessControl.RegistrySecurity&gt;</ph> is searched for audit rules that have the same user as <ph id=\"ph2\">`rule`</ph>.","pos":[0,128],"source":"The current <xref:System.Security.AccessControl.RegistrySecurity> is searched for audit rules that have the same user as `rule`."},{"content":"Any rights, inheritance flags, or propagation flags specified by <ph id=\"ph1\">`rule`</ph> are ignored when performing this search.","pos":[129,241],"source":" Any rights, inheritance flags, or propagation flags specified by `rule` are ignored when performing this search."},{"content":"If no matching rules are found, no action is taken.","pos":[242,293]}]}],"pos":[66863,67157],"yaml":true,"extradata":"MT"},{"content":"A <xref href=\"System.Security.AccessControl.RegistryAuditRule\"></xref> that specifies the user to search for. Any rights, inheritance flags, or propagation flags specified by this rule are ignored.","nodes":[{"pos":[0,197],"content":"A <xref href=\"System.Security.AccessControl.RegistryAuditRule\"></xref> that specifies the user to search for. Any rights, inheritance flags, or propagation flags specified by this rule are ignored.","nodes":[{"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Security.AccessControl.RegistryAuditRule\"&gt;&lt;/xref&gt;</ph> that specifies the user to search for.","pos":[0,109],"source":"A <xref href=\"System.Security.AccessControl.RegistryAuditRule\"></xref> that specifies the user to search for."},{"content":"Any rights, inheritance flags, or propagation flags specified by this rule are ignored.","pos":[110,197]}]}],"pos":[67377,67575],"yaml":true},{"content":"<code>rule</code> is `null`.","nodes":[{"pos":[0,28],"content":"<ph id=\"ph1\">&lt;code&gt;rule&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>rule</code> is `null`."}],"pos":[67770,67799],"yaml":true},{"content":"Searches for an audit rule that exactly matches the specified rule and, if found, removes it.","nodes":[{"pos":[0,93],"content":"Searches for an audit rule that exactly matches the specified rule and, if found, removes it.","nodes":[{"content":"Searches for an audit rule that exactly matches the specified rule and, if found, removes it.","pos":[0,93]}]}],"pos":[69348,69442],"yaml":true},{"content":"The rule is removed only if it exactly matches `rule` in all details, including flags. Other audit rules for the same user are not affected.  \n  \n> [!IMPORTANT]\n>  A rule represents one or more underlying access control entries (ACE), and these entries are split or combined as necessary when you modify the audit security rules for a user. Thus, a rule might no longer exist in the specific form it had when it was added, and in that case the <xref:System.Security.AccessControl.RegistrySecurity.RemoveAuditRuleSpecific%2A> method cannot remove it.","nodes":[{"pos":[0,140],"content":"The rule is removed only if it exactly matches `rule` in all details, including flags. Other audit rules for the same user are not affected.","nodes":[{"content":"The rule is removed only if it exactly matches <ph id=\"ph1\">`rule`</ph> in all details, including flags.","pos":[0,86],"source":"The rule is removed only if it exactly matches `rule` in all details, including flags."},{"content":"Other audit rules for the same user are not affected.","pos":[87,140]}]},{"pos":[148,549],"content":"[!IMPORTANT]\n A rule represents one or more underlying access control entries (ACE), and these entries are split or combined as necessary when you modify the audit security rules for a user. Thus, a rule might no longer exist in the specific form it had when it was added, and in that case the <xref:System.Security.AccessControl.RegistrySecurity.RemoveAuditRuleSpecific%2A> method cannot remove it.","leadings":["","> "],"nodes":[{"content":" A rule represents one or more underlying access control entries (ACE), and these entries are split or combined as necessary when you modify the audit security rules for a user. Thus, a rule might no longer exist in the specific form it had when it was added, and in that case the <xref:System.Security.AccessControl.RegistrySecurity.RemoveAuditRuleSpecific%2A> method cannot remove it.","pos":[13,399],"nodes":[{"content":"A rule represents one or more underlying access control entries (ACE), and these entries are split or combined as necessary when you modify the audit security rules for a user.","pos":[1,177]},{"content":"Thus, a rule might no longer exist in the specific form it had when it was added, and in that case the <ph id=\"ph1\">&lt;xref:System.Security.AccessControl.RegistrySecurity.RemoveAuditRuleSpecific%2A&gt;</ph> method cannot remove it.","pos":[178,386],"source":" Thus, a rule might no longer exist in the specific form it had when it was added, and in that case the <xref:System.Security.AccessControl.RegistrySecurity.RemoveAuditRuleSpecific%2A> method cannot remove it."}]}]}],"pos":[69453,70008],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Security.AccessControl.RegistryAuditRule\"></xref> to be removed.","nodes":[{"pos":[0,87],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Security.AccessControl.RegistryAuditRule\"&gt;&lt;/xref&gt;</ph> to be removed.","source":"The <xref href=\"System.Security.AccessControl.RegistryAuditRule\"></xref> to be removed."}],"pos":[70233,70321],"yaml":true},{"content":"<code>rule</code> is `null`.","nodes":[{"pos":[0,28],"content":"<ph id=\"ph1\">&lt;code&gt;rule&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>rule</code> is `null`."}],"pos":[70521,70550],"yaml":true},{"content":"Removes all access control rules with the same user as the specified rule, regardless of <xref href=\"System.Security.AccessControl.AccessControlType\"></xref>, and then adds the specified rule.","nodes":[{"pos":[0,192],"content":"Removes all access control rules with the same user as the specified rule, regardless of <ph id=\"ph1\">&lt;xref href=\"System.Security.AccessControl.AccessControlType\"&gt;&lt;/xref&gt;</ph>, and then adds the specified rule.","source":"Removes all access control rules with the same user as the specified rule, regardless of <xref href=\"System.Security.AccessControl.AccessControlType\"></xref>, and then adds the specified rule."}],"pos":[72057,72250],"yaml":true},{"content":"If there are no access rules whose user matches the specified rule, `rule` is added.","nodes":[{"pos":[0,84],"content":"If there are no access rules whose user matches the specified rule, <ph id=\"ph1\">`rule`</ph> is added.","source":"If there are no access rules whose user matches the specified rule, `rule` is added."}],"pos":[72261,72346],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Security.AccessControl.RegistryAccessRule\"></xref> to add. The user specified by this rule determines the rules to remove before this rule is added.","nodes":[{"pos":[0,171],"content":"The <xref href=\"System.Security.AccessControl.RegistryAccessRule\"></xref> to add. The user specified by this rule determines the rules to remove before this rule is added.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Security.AccessControl.RegistryAccessRule\"&gt;&lt;/xref&gt;</ph> to add.","pos":[0,81],"source":"The <xref href=\"System.Security.AccessControl.RegistryAccessRule\"></xref> to add."},{"content":"The user specified by this rule determines the rules to remove before this rule is added.","pos":[82,171]}]}],"pos":[73987,74159],"yaml":true},{"content":"Removes all access control rules with the same user and <xref href=\"System.Security.AccessControl.AccessControlType\"></xref> (allow or deny) as the specified rule, and then adds the specified rule.","nodes":[{"pos":[0,197],"content":"Removes all access control rules with the same user and <ph id=\"ph1\">&lt;xref href=\"System.Security.AccessControl.AccessControlType\"&gt;&lt;/xref&gt;</ph> (allow or deny) as the specified rule, and then adds the specified rule.","source":"Removes all access control rules with the same user and <xref href=\"System.Security.AccessControl.AccessControlType\"></xref> (allow or deny) as the specified rule, and then adds the specified rule."}],"pos":[75747,75945],"yaml":true},{"content":"If the specified rule has <xref:System.Security.AccessControl.AccessControlType.Allow>, the effect of this method is to remove all <xref:System.Security.AccessControl.AccessControlType.Allow> rules for the specified user, replacing them with the specified rule. If the specified rule has <xref:System.Security.AccessControl.AccessControlType.Deny>, all <xref:System.Security.AccessControl.AccessControlType.Deny> rules for the specified user are replaced with the specified rule.  \n  \n If there are no rules whose user and <xref:System.Security.AccessControl.AccessControlType> match the specified rule, `rule` is added.","nodes":[{"pos":[0,479],"content":"If the specified rule has <xref:System.Security.AccessControl.AccessControlType.Allow>, the effect of this method is to remove all <xref:System.Security.AccessControl.AccessControlType.Allow> rules for the specified user, replacing them with the specified rule. If the specified rule has <xref:System.Security.AccessControl.AccessControlType.Deny>, all <xref:System.Security.AccessControl.AccessControlType.Deny> rules for the specified user are replaced with the specified rule.","nodes":[{"content":"If the specified rule has <xref:System.Security.AccessControl.AccessControlType.Allow>, the effect of this method is to remove all <xref:System.Security.AccessControl.AccessControlType.Allow> rules for the specified user, replacing them with the specified rule. If the specified rule has <xref:System.Security.AccessControl.AccessControlType.Deny>, all <xref:System.Security.AccessControl.AccessControlType.Deny> rules for the specified user are replaced with the specified rule.","pos":[0,479],"nodes":[{"content":"If the specified rule has <ph id=\"ph1\">&lt;xref:System.Security.AccessControl.AccessControlType.Allow&gt;</ph>, the effect of this method is to remove all <ph id=\"ph2\">&lt;xref:System.Security.AccessControl.AccessControlType.Allow&gt;</ph> rules for the specified user, replacing them with the specified rule.","pos":[0,261],"source":"If the specified rule has <xref:System.Security.AccessControl.AccessControlType.Allow>, the effect of this method is to remove all <xref:System.Security.AccessControl.AccessControlType.Allow> rules for the specified user, replacing them with the specified rule."},{"content":"If the specified rule has <ph id=\"ph1\">&lt;xref:System.Security.AccessControl.AccessControlType.Deny&gt;</ph>, all <ph id=\"ph2\">&lt;xref:System.Security.AccessControl.AccessControlType.Deny&gt;</ph> rules for the specified user are replaced with the specified rule.","pos":[262,479],"source":" If the specified rule has <xref:System.Security.AccessControl.AccessControlType.Deny>, all <xref:System.Security.AccessControl.AccessControlType.Deny> rules for the specified user are replaced with the specified rule."}]}]},{"pos":[486,620],"content":"If there are no rules whose user and <ph id=\"ph1\">&lt;xref:System.Security.AccessControl.AccessControlType&gt;</ph> match the specified rule, <ph id=\"ph2\">`rule`</ph> is added.","source":"If there are no rules whose user and <xref:System.Security.AccessControl.AccessControlType> match the specified rule, `rule` is added."}],"pos":[75956,76581],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Security.AccessControl.RegistryAccessRule\"></xref> to add. The user and <xref href=\"System.Security.AccessControl.AccessControlType\"></xref> of this rule determine the rules to remove before this rule is added.","nodes":[{"pos":[0,233],"content":"The <xref href=\"System.Security.AccessControl.RegistryAccessRule\"></xref> to add. The user and <xref href=\"System.Security.AccessControl.AccessControlType\"></xref> of this rule determine the rules to remove before this rule is added.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Security.AccessControl.RegistryAccessRule\"&gt;&lt;/xref&gt;</ph> to add.","pos":[0,81],"source":"The <xref href=\"System.Security.AccessControl.RegistryAccessRule\"></xref> to add."},{"content":"The user and <ph id=\"ph1\">&lt;xref href=\"System.Security.AccessControl.AccessControlType\"&gt;&lt;/xref&gt;</ph> of this rule determine the rules to remove before this rule is added.","pos":[82,233],"source":" The user and <xref href=\"System.Security.AccessControl.AccessControlType\"></xref> of this rule determine the rules to remove before this rule is added."}]}],"pos":[78357,78591],"yaml":true},{"content":"<code>rule</code> is `null`.","nodes":[{"pos":[0,28],"content":"<ph id=\"ph1\">&lt;code&gt;rule&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>rule</code> is `null`."}],"pos":[78781,78810],"yaml":true},{"content":"Removes all audit rules with the same user as the specified rule, regardless of the <xref href=\"System.Security.AccessControl.AuditFlags\"></xref> value, and then adds the specified rule.","nodes":[{"pos":[0,186],"content":"Removes all audit rules with the same user as the specified rule, regardless of the <ph id=\"ph1\">&lt;xref href=\"System.Security.AccessControl.AuditFlags\"&gt;&lt;/xref&gt;</ph> value, and then adds the specified rule.","source":"Removes all audit rules with the same user as the specified rule, regardless of the <xref href=\"System.Security.AccessControl.AuditFlags\"></xref> value, and then adds the specified rule."}],"pos":[80293,80480],"yaml":true},{"content":"If there are no audit rules whose user matches the specified rule, `rule` is added.","nodes":[{"pos":[0,83],"content":"If there are no audit rules whose user matches the specified rule, <ph id=\"ph1\">`rule`</ph> is added.","source":"If there are no audit rules whose user matches the specified rule, `rule` is added."}],"pos":[80491,80575],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Security.AccessControl.RegistryAuditRule\"></xref> to add. The user specified by this rule determines the rules to remove before this rule is added.","nodes":[{"pos":[0,170],"content":"The <xref href=\"System.Security.AccessControl.RegistryAuditRule\"></xref> to add. The user specified by this rule determines the rules to remove before this rule is added.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Security.AccessControl.RegistryAuditRule\"&gt;&lt;/xref&gt;</ph> to add.","pos":[0,80],"source":"The <xref href=\"System.Security.AccessControl.RegistryAuditRule\"></xref> to add."},{"content":"The user specified by this rule determines the rules to remove before this rule is added.","pos":[81,170]}]}],"pos":[80789,80960],"yaml":true},{"content":"<code>rule</code> is `null`.","nodes":[{"pos":[0,28],"content":"<ph id=\"ph1\">&lt;code&gt;rule&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>rule</code> is `null`."}],"pos":[81149,81178],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Security.AccessControl.RegistrySecurity\n  commentId: T:System.Security.AccessControl.RegistrySecurity\n  id: RegistrySecurity\n  children:\n  - System.Security.AccessControl.RegistrySecurity.#ctor\n  - System.Security.AccessControl.RegistrySecurity.AccessRightType\n  - System.Security.AccessControl.RegistrySecurity.AccessRuleFactory(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)\n  - System.Security.AccessControl.RegistrySecurity.AccessRuleType\n  - System.Security.AccessControl.RegistrySecurity.AddAccessRule(System.Security.AccessControl.RegistryAccessRule)\n  - System.Security.AccessControl.RegistrySecurity.AddAuditRule(System.Security.AccessControl.RegistryAuditRule)\n  - System.Security.AccessControl.RegistrySecurity.AuditRuleFactory(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AuditFlags)\n  - System.Security.AccessControl.RegistrySecurity.AuditRuleType\n  - System.Security.AccessControl.RegistrySecurity.RemoveAccessRule(System.Security.AccessControl.RegistryAccessRule)\n  - System.Security.AccessControl.RegistrySecurity.RemoveAccessRuleAll(System.Security.AccessControl.RegistryAccessRule)\n  - System.Security.AccessControl.RegistrySecurity.RemoveAccessRuleSpecific(System.Security.AccessControl.RegistryAccessRule)\n  - System.Security.AccessControl.RegistrySecurity.RemoveAuditRule(System.Security.AccessControl.RegistryAuditRule)\n  - System.Security.AccessControl.RegistrySecurity.RemoveAuditRuleAll(System.Security.AccessControl.RegistryAuditRule)\n  - System.Security.AccessControl.RegistrySecurity.RemoveAuditRuleSpecific(System.Security.AccessControl.RegistryAuditRule)\n  - System.Security.AccessControl.RegistrySecurity.ResetAccessRule(System.Security.AccessControl.RegistryAccessRule)\n  - System.Security.AccessControl.RegistrySecurity.SetAccessRule(System.Security.AccessControl.RegistryAccessRule)\n  - System.Security.AccessControl.RegistrySecurity.SetAuditRule(System.Security.AccessControl.RegistryAuditRule)\n  langs:\n  - csharp\n  name: RegistrySecurity\n  nameWithType: RegistrySecurity\n  fullName: System.Security.AccessControl.RegistrySecurity\n  type: Class\n  assemblies:\n  - Microsoft.Win32.Registry.AccessControl\n  - mscorlib\n  - Microsoft.Win32.Registry\n  namespace: System.Security.AccessControl\n  summary: Represents the Windows access control security for a registry key. This class cannot be inherited.\n  remarks: \"A <xref:System.Security.AccessControl.RegistrySecurity> object specifies access rights for a registry key, and also specifies how access attempts are audited. Access rights to the registry key are expressed as rules, with each access rule represented by a <xref:System.Security.AccessControl.RegistryAccessRule> object. Each auditing rule is represented by a <xref:System.Security.AccessControl.RegistryAuditRule> object.  \\n  \\n This mirrors the underlying Windows security system, in which each securable object has at most one discretionary access control list (DACL) that controls access to the secured object, and at most one system access control list (SACL) that specifies which access attempts are audited. The DACL and SACL are ordered lists of access control entries (ACE) that specify access and auditing for users and groups. A <xref:System.Security.AccessControl.RegistryAccessRule> or <xref:System.Security.AccessControl.RegistryAuditRule> object might represent more than one ACE.  \\n  \\n> [!NOTE]\\n>  Windows access control security can only be applied to registry keys. It cannot be applied to individual key/value pairs stored in a key.  \\n  \\n The <xref:System.Security.AccessControl.RegistrySecurity>, <xref:System.Security.AccessControl.RegistryAccessRule>, and <xref:System.Security.AccessControl.RegistryAuditRule> classes hide the implementation details of ACLs and ACEs. They allow you to ignore the seventeen different ACE types and the complexity of correctly maintaining inheritance and propagation of access rights. These objects are also designed to prevent the following common access control errors:  \\n  \\n-   Creating a security descriptor with a null DACL. A null reference to a DACL allows any user to add access rules to an object, potentially creating a denial-of-service attack. A new <xref:System.Security.AccessControl.RegistrySecurity> object always starts with an empty DACL, which denies all access for all users.  \\n  \\n-   Violating the canonical ordering of ACEs. If the ACE list in the DACL is not kept in the canonical order, users might inadvertently be given access to the secured object. For example, denied access rights must always appear before allowed access rights. <xref:System.Security.AccessControl.RegistrySecurity> objects maintain the correct order internally.  \\n  \\n-   Manipulating security descriptor flags, which should be under resource manager control only.  \\n  \\n-   Creating invalid combinations of ACE flags.  \\n  \\n-   Manipulating inherited ACEs. Inheritance and propagation are handled by the resource manager, in response to changes you make to access and audit rules.  \\n  \\n-   Inserting meaningless ACEs into ACLs.  \\n  \\n The only capabilities not supported by the .NET security objects are dangerous activities that should be avoided by the majority of application developers, such as the following:  \\n  \\n-   Low-level tasks that are normally performed by the resource manager.  \\n  \\n-   Adding or removing access control entries in ways that do not maintain the canonical ordering.  \\n  \\n To modify Windows access control security for a registry key, use the <xref:Microsoft.Win32.RegistryKey.GetAccessControl%2A?displayProperty=fullName> method to get the <xref:System.Security.AccessControl.RegistrySecurity> object. Modify the security object by adding and removing rules, and then use the <xref:Microsoft.Win32.RegistryKey.SetAccessControl%2A?displayProperty=fullName> method to reattach it.  \\n  \\n> [!IMPORTANT]\\n>  Changes you make to a <xref:System.Security.AccessControl.RegistrySecurity> object do not affect the access levels of the registry key until you call the <xref:Microsoft.Win32.RegistryKey.SetAccessControl%2A?displayProperty=fullName> method to assign the altered security object to the registry key.  \\n  \\n To copy access control security from one registry key to another, use the <xref:Microsoft.Win32.RegistryKey.GetAccessControl%2A?displayProperty=fullName> method to get a <xref:System.Security.AccessControl.RegistrySecurity> object representing the access and audit rules for the first registry key, and then use the <xref:Microsoft.Win32.RegistryKey.SetAccessControl%2A?displayProperty=fullName> method to assign those rules to the second registry key. You can also assign the rules to a second registry key with an <xref:Microsoft.Win32.RegistryKey.OpenSubKey%2A?displayProperty=fullName> or <xref:Microsoft.Win32.RegistryKey.CreateSubKey%2A?displayProperty=fullName> method that takes a <xref:System.Security.AccessControl.RegistrySecurity> object parameter.  \\n  \\n Users with an investment in the security descriptor definition language (SDDL) can use the <xref:System.Security.AccessControl.ObjectSecurity.SetSecurityDescriptorSddlForm%2A> method to set access rules for a registry key, and the <xref:System.Security.AccessControl.ObjectSecurity.GetSecurityDescriptorSddlForm%2A> method to obtain a string that represents the access rules in SDDL format. This is not recommended for new development.\"\n  example:\n  - \"This section contains two code examples. The first example shows how compatible rules merge when added and removed, and the second shows how inheritance and propagation flags affect the addition and deletion of rules.  \\n  \\n Example 1  \\n  \\n The following code example shows how the <xref:System.Security.AccessControl.RegistrySecurity.RemoveAccessRule%2A> method removes rights from a compatible rule, and how the <xref:System.Security.AccessControl.RegistrySecurity.AddAccessRule%2A> method merges rights with compatible rules.  \\n  \\n The example creates a <xref:System.Security.AccessControl.RegistrySecurity> object and adds a rule that allows the current user <xref:System.Security.AccessControl.RegistryRights?displayProperty=fullName> rights. The example then creates a rule that grants the user <xref:System.Security.AccessControl.RegistryRights?displayProperty=fullName>, with the same inheritance and propagation rights as the first rule, and uses the <xref:System.Security.AccessControl.RegistrySecurity.RemoveAccessRule%2A> method to remove this new rule from the <xref:System.Security.AccessControl.RegistrySecurity> object. <xref:System.Security.AccessControl.RegistryRights.SetValue> is a constituent of <xref:System.Security.AccessControl.RegistryRights.ReadKey>, so it is removed from the compatible rule. The rules in the <xref:System.Security.AccessControl.RegistrySecurity> object are displayed, showing the remaining constituents of <xref:System.Security.AccessControl.RegistryRights.ReadKey>.  \\n  \\n The example code then calls the <xref:System.Security.AccessControl.RegistrySecurity.AddAccessRule%2A> method to merge the <xref:System.Security.AccessControl.RegistryRights.SetValue> right back into the rule in the <xref:System.Security.AccessControl.RegistrySecurity> object.  \\n  \\n> [!NOTE]\\n>  This example does not attach the security object to a <xref:Microsoft.Win32.RegistryKey> object. The second example in this section attaches a security object, and so do the examples in <xref:Microsoft.Win32.RegistryKey.GetAccessControl%2A?displayProperty=fullName> and <xref:Microsoft.Win32.RegistryKey.SetAccessControl%2A?displayProperty=fullName>.  \\n  \\n [!code-csharp[System.Security.AccessControl.RegistrySecurity.RemoveAccessRule#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.AccessControl.RegistrySecurity.RemoveAccessRule/CS/source.cs#1)]\\n [!code-vb[System.Security.AccessControl.RegistrySecurity.RemoveAccessRule#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.AccessControl.RegistrySecurity.RemoveAccessRule/VB/source.vb#1)]  \\n  \\n Example 2  \\n  \\n The following code example demonstrates access rules with inheritance and propagation. The example creates a <xref:System.Security.AccessControl.RegistrySecurity> object, then creates and adds two rules that have the <xref:System.Security.AccessControl.InheritanceFlags.ContainerInherit> flag. The first rule has no propagation flags, while the second has <xref:System.Security.AccessControl.PropagationFlags.NoPropagateInherit> and <xref:System.Security.AccessControl.PropagationFlags.InheritOnly>.  \\n  \\n The program displays the rules in the <xref:System.Security.AccessControl.RegistrySecurity> object, and then uses the <xref:System.Security.AccessControl.RegistrySecurity> object to create a subkey. The program creates a child subkey and a grandchild subkey, then displays the security for each subkey. Finally, the program deletes the test keys.  \\n  \\n [!code-csharp[System.Security.AccessControl.RegistryAccessRule.ctor2#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.AccessControl.RegistryAccessRule.ctor2/CS/source.cs#1)]\\n [!code-vb[System.Security.AccessControl.RegistryAccessRule.ctor2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.AccessControl.RegistryAccessRule.ctor2/VB/source.vb#1)]\"\n  syntax:\n    content: 'public sealed class RegistrySecurity : System.Security.AccessControl.NativeObjectSecurity'\n  inheritance:\n  - System.Object\n  - System.Security.AccessControl.ObjectSecurity\n  - System.Security.AccessControl.CommonObjectSecurity\n  - System.Security.AccessControl.NativeObjectSecurity\n  implements: []\n  inheritedMembers:\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.ToString\n  - System.Security.AccessControl.CommonObjectSecurity.AddAccessRule(System.Security.AccessControl.AccessRule)\n  - System.Security.AccessControl.CommonObjectSecurity.AddAuditRule(System.Security.AccessControl.AuditRule)\n  - System.Security.AccessControl.CommonObjectSecurity.GetAccessRules(System.Boolean,System.Boolean,System.Type)\n  - System.Security.AccessControl.CommonObjectSecurity.GetAuditRules(System.Boolean,System.Boolean,System.Type)\n  - System.Security.AccessControl.CommonObjectSecurity.ModifyAccess(System.Security.AccessControl.AccessControlModification,System.Security.AccessControl.AccessRule,System.Boolean@)\n  - System.Security.AccessControl.CommonObjectSecurity.ModifyAudit(System.Security.AccessControl.AccessControlModification,System.Security.AccessControl.AuditRule,System.Boolean@)\n  - System.Security.AccessControl.CommonObjectSecurity.RemoveAccessRule(System.Security.AccessControl.AccessRule)\n  - System.Security.AccessControl.CommonObjectSecurity.RemoveAccessRuleAll(System.Security.AccessControl.AccessRule)\n  - System.Security.AccessControl.CommonObjectSecurity.RemoveAccessRuleSpecific(System.Security.AccessControl.AccessRule)\n  - System.Security.AccessControl.CommonObjectSecurity.RemoveAuditRule(System.Security.AccessControl.AuditRule)\n  - System.Security.AccessControl.CommonObjectSecurity.RemoveAuditRuleAll(System.Security.AccessControl.AuditRule)\n  - System.Security.AccessControl.CommonObjectSecurity.RemoveAuditRuleSpecific(System.Security.AccessControl.AuditRule)\n  - System.Security.AccessControl.CommonObjectSecurity.ResetAccessRule(System.Security.AccessControl.AccessRule)\n  - System.Security.AccessControl.CommonObjectSecurity.SetAccessRule(System.Security.AccessControl.AccessRule)\n  - System.Security.AccessControl.CommonObjectSecurity.SetAuditRule(System.Security.AccessControl.AuditRule)\n  - System.Security.AccessControl.NativeObjectSecurity.Persist(System.Runtime.InteropServices.SafeHandle,System.Security.AccessControl.AccessControlSections)\n  - System.Security.AccessControl.NativeObjectSecurity.Persist(System.Runtime.InteropServices.SafeHandle,System.Security.AccessControl.AccessControlSections,System.Object)\n  - System.Security.AccessControl.NativeObjectSecurity.Persist(System.String,System.Security.AccessControl.AccessControlSections)\n  - System.Security.AccessControl.NativeObjectSecurity.Persist(System.String,System.Security.AccessControl.AccessControlSections,System.Object)\n  - System.Security.AccessControl.ObjectSecurity.AccessRulesModified\n  - System.Security.AccessControl.ObjectSecurity.AreAccessRulesCanonical\n  - System.Security.AccessControl.ObjectSecurity.AreAccessRulesProtected\n  - System.Security.AccessControl.ObjectSecurity.AreAuditRulesCanonical\n  - System.Security.AccessControl.ObjectSecurity.AreAuditRulesProtected\n  - System.Security.AccessControl.ObjectSecurity.AuditRulesModified\n  - System.Security.AccessControl.ObjectSecurity.GetGroup(System.Type)\n  - System.Security.AccessControl.ObjectSecurity.GetOwner(System.Type)\n  - System.Security.AccessControl.ObjectSecurity.GetSecurityDescriptorBinaryForm\n  - System.Security.AccessControl.ObjectSecurity.GetSecurityDescriptorSddlForm(System.Security.AccessControl.AccessControlSections)\n  - System.Security.AccessControl.ObjectSecurity.GroupModified\n  - System.Security.AccessControl.ObjectSecurity.IsContainer\n  - System.Security.AccessControl.ObjectSecurity.IsDS\n  - System.Security.AccessControl.ObjectSecurity.IsSddlConversionSupported\n  - System.Security.AccessControl.ObjectSecurity.ModifyAccessRule(System.Security.AccessControl.AccessControlModification,System.Security.AccessControl.AccessRule,System.Boolean@)\n  - System.Security.AccessControl.ObjectSecurity.ModifyAuditRule(System.Security.AccessControl.AccessControlModification,System.Security.AccessControl.AuditRule,System.Boolean@)\n  - System.Security.AccessControl.ObjectSecurity.OwnerModified\n  - System.Security.AccessControl.ObjectSecurity.Persist(System.Boolean,System.String,System.Security.AccessControl.AccessControlSections)\n  - System.Security.AccessControl.ObjectSecurity.PurgeAccessRules(System.Security.Principal.IdentityReference)\n  - System.Security.AccessControl.ObjectSecurity.PurgeAuditRules(System.Security.Principal.IdentityReference)\n  - System.Security.AccessControl.ObjectSecurity.ReadLock\n  - System.Security.AccessControl.ObjectSecurity.ReadUnlock\n  - System.Security.AccessControl.ObjectSecurity.SetAccessRuleProtection(System.Boolean,System.Boolean)\n  - System.Security.AccessControl.ObjectSecurity.SetAuditRuleProtection(System.Boolean,System.Boolean)\n  - System.Security.AccessControl.ObjectSecurity.SetGroup(System.Security.Principal.IdentityReference)\n  - System.Security.AccessControl.ObjectSecurity.SetOwner(System.Security.Principal.IdentityReference)\n  - System.Security.AccessControl.ObjectSecurity.SetSecurityDescriptorBinaryForm(System.Byte[])\n  - System.Security.AccessControl.ObjectSecurity.SetSecurityDescriptorBinaryForm(System.Byte[],System.Security.AccessControl.AccessControlSections)\n  - System.Security.AccessControl.ObjectSecurity.SetSecurityDescriptorSddlForm(System.String)\n  - System.Security.AccessControl.ObjectSecurity.SetSecurityDescriptorSddlForm(System.String,System.Security.AccessControl.AccessControlSections)\n  - System.Security.AccessControl.ObjectSecurity.WriteLock\n  - System.Security.AccessControl.ObjectSecurity.WriteUnlock\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.AccessControl/RegistrySecurity.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.AccessControl.RegistrySecurity.#ctor\n  commentId: M:System.Security.AccessControl.RegistrySecurity.#ctor\n  id: '#ctor'\n  parent: System.Security.AccessControl.RegistrySecurity\n  langs:\n  - csharp\n  name: RegistrySecurity()\n  nameWithType: RegistrySecurity.RegistrySecurity()\n  fullName: RegistrySecurity.RegistrySecurity()\n  type: Constructor\n  assemblies:\n  - Microsoft.Win32.Registry.AccessControl\n  - mscorlib\n  - Microsoft.Win32.Registry\n  namespace: System.Security.AccessControl\n  summary: Initializes a new instance of the <xref href=\"System.Security.AccessControl.RegistrySecurity\"></xref> class with default values.\n  remarks: A new <xref:System.Security.AccessControl.RegistrySecurity> object always starts with an empty discretionary access list (DACL), which denies all access for all users.\n  syntax:\n    content: public RegistrySecurity ();\n    parameters: []\n  overload: System.Security.AccessControl.RegistrySecurity.#ctor*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.AccessControl/RegistrySecurity.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.AccessControl.RegistrySecurity.AccessRightType\n  commentId: P:System.Security.AccessControl.RegistrySecurity.AccessRightType\n  id: AccessRightType\n  parent: System.Security.AccessControl.RegistrySecurity\n  langs:\n  - csharp\n  name: AccessRightType\n  nameWithType: RegistrySecurity.AccessRightType\n  fullName: RegistrySecurity.AccessRightType\n  type: Property\n  assemblies:\n  - Microsoft.Win32.Registry.AccessControl\n  - mscorlib\n  - Microsoft.Win32.Registry\n  namespace: System.Security.AccessControl\n  summary: Gets the enumeration type that the <xref href=\"System.Security.AccessControl.RegistrySecurity\"></xref> class uses to represent access rights.\n  remarks: Classes that derive from the <xref:System.Security.AccessControl.ObjectSecurity> class override the <xref:System.Security.AccessControl.ObjectSecurity.AccessRightType%2A> property and return the type they use to represent access rights. When you work with arrays or collections that contain multiple types of security objects, use this property to determine the correct enumeration type to use with each security object.\n  syntax:\n    content: public override Type AccessRightType { get; }\n    return:\n      type: System.Type\n      description: A <xref href=\"System.Type\"></xref> object representing the <xref href=\"System.Security.AccessControl.RegistryRights\"></xref> enumeration.\n  overload: System.Security.AccessControl.RegistrySecurity.AccessRightType*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.AccessControl/RegistrySecurity.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.AccessControl.RegistrySecurity.AccessRuleFactory(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)\n  commentId: M:System.Security.AccessControl.RegistrySecurity.AccessRuleFactory(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)\n  id: AccessRuleFactory(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)\n  parent: System.Security.AccessControl.RegistrySecurity\n  langs:\n  - csharp\n  name: AccessRuleFactory(IdentityReference, Int32, Boolean, InheritanceFlags, PropagationFlags, AccessControlType)\n  nameWithType: RegistrySecurity.AccessRuleFactory(IdentityReference, Int32, Boolean, InheritanceFlags, PropagationFlags, AccessControlType)\n  fullName: RegistrySecurity.AccessRuleFactory(IdentityReference, Int32, Boolean, InheritanceFlags, PropagationFlags, AccessControlType)\n  type: Method\n  assemblies:\n  - Microsoft.Win32.Registry.AccessControl\n  - mscorlib\n  - Microsoft.Win32.Registry\n  namespace: System.Security.AccessControl\n  summary: Creates a new access control rule for the specified user, with the specified access rights, access control, and flags.\n  remarks: \"The recommended way to create access control rules is to use the constructors of the <xref:System.Security.AccessControl.RegistryAccessRule> class.  \\n  \\n> [!NOTE]\\n>  Although you can specify the <xref:System.Security.AccessControl.InheritanceFlags?displayProperty=fullName> flag, there is no point in doing so. For the purposes of access control, the name/value pairs in a subkey are not separate objects. The access rights to name/value pairs are controlled by the rights of the subkey. Furthermore, since all subkeys are containers (that is, they can contain other subkeys), they are not affected by the <xref:System.Security.AccessControl.InheritanceFlags.ObjectInherit> flag. Finally, specifying the <xref:System.Security.AccessControl.InheritanceFlags.ObjectInherit> flag needlessly complicates the maintenance of rules, because it interferes with the normal combination of compatible rules.\"\n  syntax:\n    content: public override System.Security.AccessControl.AccessRule AccessRuleFactory (System.Security.Principal.IdentityReference identityReference, int accessMask, bool isInherited, System.Security.AccessControl.InheritanceFlags inheritanceFlags, System.Security.AccessControl.PropagationFlags propagationFlags, System.Security.AccessControl.AccessControlType type);\n    parameters:\n    - id: identityReference\n      type: System.Security.Principal.IdentityReference\n      description: An <xref href=\"System.Security.Principal.IdentityReference\"></xref> that identifies the user or group the rule applies to.\n    - id: accessMask\n      type: System.Int32\n      description: A bitwise combination of <xref href=\"System.Security.AccessControl.RegistryRights\"></xref> values specifying the access rights to allow or deny, cast to an integer.\n    - id: isInherited\n      type: System.Boolean\n      description: A Boolean value specifying whether the rule is inherited.\n    - id: inheritanceFlags\n      type: System.Security.AccessControl.InheritanceFlags\n      description: A bitwise combination of <xref href=\"System.Security.AccessControl.InheritanceFlags\"></xref> values specifying how the rule is inherited by subkeys.\n    - id: propagationFlags\n      type: System.Security.AccessControl.PropagationFlags\n      description: A bitwise combination of <xref href=\"System.Security.AccessControl.PropagationFlags\"></xref> values that modify the way the rule is inherited by subkeys. Meaningless if the value of <code>inheritanceFlags</code> is <xref href=\"System.Security.AccessControl.InheritanceFlags.None\"></xref>.\n    - id: type\n      type: System.Security.AccessControl.AccessControlType\n      description: One of the <xref href=\"System.Security.AccessControl.AccessControlType\"></xref> values specifying whether the rights are allowed or denied.\n    return:\n      type: System.Security.AccessControl.AccessRule\n      description: A <xref href=\"System.Security.AccessControl.RegistryAccessRule\"></xref> object representing the specified rights for the specified user.\n  overload: System.Security.AccessControl.RegistrySecurity.AccessRuleFactory*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>accessMask</code>, <code>inheritanceFlags</code>, <code>propagationFlags</code>, or <code>type</code> specifies an invalid value.\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"<code>identityReference</code> is `null`.  \\n  \\n -or-  \\n  \\n <code>accessMask</code> is zero.\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>identityReference</code> is neither of type <xref href=\"System.Security.Principal.SecurityIdentifier\"></xref>, nor of a type such as <xref href=\"System.Security.Principal.NTAccount\"></xref> that can be converted to type <xref href=\"System.Security.Principal.SecurityIdentifier\"></xref>.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.AccessControl/RegistrySecurity.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.AccessControl.RegistrySecurity.AccessRuleType\n  commentId: P:System.Security.AccessControl.RegistrySecurity.AccessRuleType\n  id: AccessRuleType\n  parent: System.Security.AccessControl.RegistrySecurity\n  langs:\n  - csharp\n  name: AccessRuleType\n  nameWithType: RegistrySecurity.AccessRuleType\n  fullName: RegistrySecurity.AccessRuleType\n  type: Property\n  assemblies:\n  - Microsoft.Win32.Registry.AccessControl\n  - mscorlib\n  - Microsoft.Win32.Registry\n  namespace: System.Security.AccessControl\n  summary: Gets the type that the <xref href=\"System.Security.AccessControl.RegistrySecurity\"></xref> class uses to represent access rules.\n  remarks: Classes that derive from the <xref:System.Security.AccessControl.ObjectSecurity> class override the <xref:System.Security.AccessControl.ObjectSecurity.AccessRuleType%2A> property and return the type they use to represent access rules. When you work with arrays or collections that contain multiple types of security objects, use this property to determine the correct access rule type to use with each security object.\n  syntax:\n    content: public override Type AccessRuleType { get; }\n    return:\n      type: System.Type\n      description: A <xref href=\"System.Type\"></xref> object representing the <xref href=\"System.Security.AccessControl.RegistryAccessRule\"></xref> class.\n  overload: System.Security.AccessControl.RegistrySecurity.AccessRuleType*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.AccessControl/RegistrySecurity.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.AccessControl.RegistrySecurity.AddAccessRule(System.Security.AccessControl.RegistryAccessRule)\n  commentId: M:System.Security.AccessControl.RegistrySecurity.AddAccessRule(System.Security.AccessControl.RegistryAccessRule)\n  id: AddAccessRule(System.Security.AccessControl.RegistryAccessRule)\n  parent: System.Security.AccessControl.RegistrySecurity\n  langs:\n  - csharp\n  name: AddAccessRule(RegistryAccessRule)\n  nameWithType: RegistrySecurity.AddAccessRule(RegistryAccessRule)\n  fullName: RegistrySecurity.AddAccessRule(RegistryAccessRule)\n  type: Method\n  assemblies:\n  - Microsoft.Win32.Registry.AccessControl\n  - mscorlib\n  - Microsoft.Win32.Registry\n  namespace: System.Security.AccessControl\n  summary: Searches for a matching access control with which the new rule can be merged. If none are found, adds the new rule.\n  remarks: \"The <xref:System.Security.AccessControl.RegistrySecurity.AddAccessRule%2A> method searches for rules with the same user or group and the same <xref:System.Security.AccessControl.AccessControlType> as `rule`. If none are found, `rule` is added. If a matching rule is found, the rights in `rule` are merged with the existing rule.  \\n  \\n Rules cannot be merged if they have different inheritance flags. For example, if a user is allowed read access with no inheritance flags, and <xref:System.Security.AccessControl.RegistrySecurity.AddAccessRule%2A> is used to add a rule giving the user write access with inheritance for subkeys (<xref:System.Security.AccessControl.InheritanceFlags?displayProperty=fullName>), the two rules cannot be merged.  \\n  \\n Rules with different <xref:System.Security.AccessControl.AccessControlType> values are never merged.  \\n  \\n Rules express rights in the most economical way. For example, if a user has <xref:System.Security.AccessControl.RegistryRights.QueryValues>, <xref:System.Security.AccessControl.RegistryRights.Notify> and <xref:System.Security.AccessControl.RegistryRights.ReadPermissions> rights, and you add a rule allowing <xref:System.Security.AccessControl.RegistryRights.EnumerateSubKeys> rights, the user has all the constituent parts of <xref:System.Security.AccessControl.RegistryRights.ReadKey> rights. If you query the user's rights, you will see a rule containing <xref:System.Security.AccessControl.RegistryRights.ReadKey> rights. Similarly, if you remove <xref:System.Security.AccessControl.RegistryRights.EnumerateSubKeys> rights, the other constituents of <xref:System.Security.AccessControl.RegistryRights.ReadKey> rights will reappear.\"\n  example:\n  - \"The following code example creates registry access rules and adds them to a <xref:System.Security.AccessControl.RegistrySecurity> object, showing how rules that allow and deny rights remain separate, while compatible rules of the same kind are merged.  \\n  \\n> [!NOTE]\\n>  This example does not attach the security object to a <xref:Microsoft.Win32.RegistryKey> object. Examples that attach security objects can be found in <xref:Microsoft.Win32.RegistryKey.GetAccessControl%2A?displayProperty=fullName> and <xref:Microsoft.Win32.RegistryKey.SetAccessControl%2A?displayProperty=fullName>.  \\n  \\n A code example that demonstrates inheritance and propagation flags can be found in the <xref:System.Security.AccessControl.RegistryAccessRule> class.  \\n  \\n [!code-csharp[System.Security.AccessControl.RegistrySecurity.AddAccessRule#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.AccessControl.RegistrySecurity.AddAccessRule/CS/source.cs#1)]\\n [!code-vb[System.Security.AccessControl.RegistrySecurity.AddAccessRule#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.AccessControl.RegistrySecurity.AddAccessRule/VB/source.vb#1)]\"\n  syntax:\n    content: public void AddAccessRule (System.Security.AccessControl.RegistryAccessRule rule);\n    parameters:\n    - id: rule\n      type: System.Security.AccessControl.RegistryAccessRule\n      description: The access control rule to add.\n  overload: System.Security.AccessControl.RegistrySecurity.AddAccessRule*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>rule</code> is `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.AccessControl/RegistrySecurity.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.AccessControl.RegistrySecurity.AddAuditRule(System.Security.AccessControl.RegistryAuditRule)\n  commentId: M:System.Security.AccessControl.RegistrySecurity.AddAuditRule(System.Security.AccessControl.RegistryAuditRule)\n  id: AddAuditRule(System.Security.AccessControl.RegistryAuditRule)\n  parent: System.Security.AccessControl.RegistrySecurity\n  langs:\n  - csharp\n  name: AddAuditRule(RegistryAuditRule)\n  nameWithType: RegistrySecurity.AddAuditRule(RegistryAuditRule)\n  fullName: RegistrySecurity.AddAuditRule(RegistryAuditRule)\n  type: Method\n  assemblies:\n  - Microsoft.Win32.Registry.AccessControl\n  - mscorlib\n  - Microsoft.Win32.Registry\n  namespace: System.Security.AccessControl\n  summary: Searches for an audit rule with which the new rule can be merged. If none are found, adds the new rule.\n  remarks: \"The <xref:System.Security.AccessControl.RegistrySecurity.AddAuditRule%2A> method searches for rules with the same user or group as `rule`. If none are found, `rule` is added. If a matching rule is found, the flags in `rule` are merged into the existing rule.  \\n  \\n Rules cannot be merged if they have different inheritance flags. For example, if failed attempts to write to a key are audited for a particular user, with no inheritance flags, and <xref:System.Security.AccessControl.RegistrySecurity.AddAuditRule%2A> is used to add a rule specifying that failed attempts to change permissions are to be audited for the same user, but with inheritance for subkeys (<xref:System.Security.AccessControl.InheritanceFlags?displayProperty=fullName>), the two rules cannot be merged.\"\n  syntax:\n    content: public void AddAuditRule (System.Security.AccessControl.RegistryAuditRule rule);\n    parameters:\n    - id: rule\n      type: System.Security.AccessControl.RegistryAuditRule\n      description: The audit rule to add. The user specified by this rule determines the search.\n  overload: System.Security.AccessControl.RegistrySecurity.AddAuditRule*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.AccessControl/RegistrySecurity.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.AccessControl.RegistrySecurity.AuditRuleFactory(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AuditFlags)\n  commentId: M:System.Security.AccessControl.RegistrySecurity.AuditRuleFactory(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AuditFlags)\n  id: AuditRuleFactory(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AuditFlags)\n  parent: System.Security.AccessControl.RegistrySecurity\n  langs:\n  - csharp\n  name: AuditRuleFactory(IdentityReference, Int32, Boolean, InheritanceFlags, PropagationFlags, AuditFlags)\n  nameWithType: RegistrySecurity.AuditRuleFactory(IdentityReference, Int32, Boolean, InheritanceFlags, PropagationFlags, AuditFlags)\n  fullName: RegistrySecurity.AuditRuleFactory(IdentityReference, Int32, Boolean, InheritanceFlags, PropagationFlags, AuditFlags)\n  type: Method\n  assemblies:\n  - Microsoft.Win32.Registry.AccessControl\n  - mscorlib\n  - Microsoft.Win32.Registry\n  namespace: System.Security.AccessControl\n  summary: Creates a new audit rule, specifying the user the rule applies to, the access rights to audit, the inheritance and propagation of the rule, and the outcome that triggers the rule.\n  remarks: \"The recommended way to create audit rules is to use the constructors of the <xref:System.Security.AccessControl.RegistryAuditRule> class.  \\n  \\n> [!NOTE]\\n>  Although you can specify the <xref:System.Security.AccessControl.InheritanceFlags?displayProperty=fullName> flag, there is no point in doing so. For the purposes of audit control, the name/value pairs in a subkey are not separate objects. The audit rights to name/value pairs are controlled by the rights of the subkey. Furthermore, since all subkeys are containers (that is, they can contain other subkeys), they are not affected by the <xref:System.Security.AccessControl.InheritanceFlags.ObjectInherit> flag. Finally, specifying the <xref:System.Security.AccessControl.InheritanceFlags.ObjectInherit> flag needlessly complicates the maintenance of rules, because it interferes with the normal combination of compatible rules.\"\n  syntax:\n    content: public override System.Security.AccessControl.AuditRule AuditRuleFactory (System.Security.Principal.IdentityReference identityReference, int accessMask, bool isInherited, System.Security.AccessControl.InheritanceFlags inheritanceFlags, System.Security.AccessControl.PropagationFlags propagationFlags, System.Security.AccessControl.AuditFlags flags);\n    parameters:\n    - id: identityReference\n      type: System.Security.Principal.IdentityReference\n      description: An <xref href=\"System.Security.Principal.IdentityReference\"></xref> that identifies the user or group the rule applies to.\n    - id: accessMask\n      type: System.Int32\n      description: A bitwise combination of <xref href=\"System.Security.AccessControl.RegistryRights\"></xref> values specifying the access rights to audit, cast to an integer.\n    - id: isInherited\n      type: System.Boolean\n      description: A Boolean value specifying whether the rule is inherited.\n    - id: inheritanceFlags\n      type: System.Security.AccessControl.InheritanceFlags\n      description: A bitwise combination of <xref href=\"System.Security.AccessControl.InheritanceFlags\"></xref> values specifying how the rule is inherited by subkeys.\n    - id: propagationFlags\n      type: System.Security.AccessControl.PropagationFlags\n      description: A bitwise combination of <xref href=\"System.Security.AccessControl.PropagationFlags\"></xref> values that modify the way the rule is inherited by subkeys. Meaningless if the value of <code>inheritanceFlags</code> is <xref href=\"System.Security.AccessControl.InheritanceFlags.None\"></xref>.\n    - id: flags\n      type: System.Security.AccessControl.AuditFlags\n      description: A bitwise combination of <xref href=\"System.Security.AccessControl.AuditFlags\"></xref> values specifying whether to audit successful access, failed access, or both.\n    return:\n      type: System.Security.AccessControl.AuditRule\n      description: A <xref href=\"System.Security.AccessControl.RegistryAuditRule\"></xref> object representing the specified audit rule for the specified user, with the specified flags. The return type of the method is the base class, <xref href=\"System.Security.AccessControl.AuditRule\"></xref>, but the return value can be cast safely to the derived class.\n  overload: System.Security.AccessControl.RegistrySecurity.AuditRuleFactory*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>accessMask</code>, <code>inheritanceFlags</code>, <code>propagationFlags</code>, or <code>flags</code> specifies an invalid value.\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"<code>identityReference</code> is `null`.  \\n  \\n -or-  \\n  \\n <code>accessMask</code> is zero.\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>identityReference</code> is neither of type <xref href=\"System.Security.Principal.SecurityIdentifier\"></xref>, nor of a type such as <xref href=\"System.Security.Principal.NTAccount\"></xref> that can be converted to type <xref href=\"System.Security.Principal.SecurityIdentifier\"></xref>.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.AccessControl/RegistrySecurity.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.AccessControl.RegistrySecurity.AuditRuleType\n  commentId: P:System.Security.AccessControl.RegistrySecurity.AuditRuleType\n  id: AuditRuleType\n  parent: System.Security.AccessControl.RegistrySecurity\n  langs:\n  - csharp\n  name: AuditRuleType\n  nameWithType: RegistrySecurity.AuditRuleType\n  fullName: RegistrySecurity.AuditRuleType\n  type: Property\n  assemblies:\n  - Microsoft.Win32.Registry.AccessControl\n  - mscorlib\n  - Microsoft.Win32.Registry\n  namespace: System.Security.AccessControl\n  summary: Gets the type that the <xref href=\"System.Security.AccessControl.RegistrySecurity\"></xref> class uses to represent audit rules.\n  remarks: Classes that derive from the <xref:System.Security.AccessControl.ObjectSecurity> class override the <xref:System.Security.AccessControl.ObjectSecurity.AuditRuleType%2A> property and return the type they use to represent audit rights. When you work with arrays or collections that contain multiple types of security objects, use this property to determine the correct audit rule type to use with each security object.\n  syntax:\n    content: public override Type AuditRuleType { get; }\n    return:\n      type: System.Type\n      description: A <xref href=\"System.Type\"></xref> object representing the <xref href=\"System.Security.AccessControl.RegistryAuditRule\"></xref> class.\n  overload: System.Security.AccessControl.RegistrySecurity.AuditRuleType*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.AccessControl/RegistrySecurity.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.AccessControl.RegistrySecurity.RemoveAccessRule(System.Security.AccessControl.RegistryAccessRule)\n  commentId: M:System.Security.AccessControl.RegistrySecurity.RemoveAccessRule(System.Security.AccessControl.RegistryAccessRule)\n  id: RemoveAccessRule(System.Security.AccessControl.RegistryAccessRule)\n  parent: System.Security.AccessControl.RegistrySecurity\n  langs:\n  - csharp\n  name: RemoveAccessRule(RegistryAccessRule)\n  nameWithType: RegistrySecurity.RemoveAccessRule(RegistryAccessRule)\n  fullName: RegistrySecurity.RemoveAccessRule(RegistryAccessRule)\n  type: Method\n  assemblies:\n  - Microsoft.Win32.Registry.AccessControl\n  - mscorlib\n  - Microsoft.Win32.Registry\n  namespace: System.Security.AccessControl\n  summary: Searches for an access control rule with the same user and <xref href=\"System.Security.AccessControl.AccessControlType\"></xref> (allow or deny) as the specified access rule, and with compatible inheritance and propagation flags; if such a rule is found, the rights contained in the specified access rule are removed from it.\n  remarks: The current <xref:System.Security.AccessControl.RegistrySecurity> is searched for a rule that has the same user and the same <xref:System.Security.AccessControl.AccessControlType> value as `rule`. If no such rule is found, no action is taken, and the method returns `false`. If matching rules are found, their inheritance and compatibility flags are checked for compatibility with the flags specified in `rule`. If no compatible rule is found, no action is taken, and the method returns `false`. If a rule with compatible flags is found, the rights specified in `rule` are removed from the compatible rule, and the method returns `true`. If `rule` specifies rights not contained in the compatible rule, no action is taken with respect to those rights. If all rights are removed from the compatible rule, the entire rule is removed from the current <xref:System.Security.AccessControl.RegistrySecurity> object.\n  example:\n  - \"The following code example shows how the <xref:System.Security.AccessControl.RegistrySecurity.RemoveAccessRule%2A> method removes rights from a compatible rule, and how the <xref:System.Security.AccessControl.RegistrySecurity.AddAccessRule%2A> method merges rights with compatible rules.  \\n  \\n The example creates a <xref:System.Security.AccessControl.RegistrySecurity> object and adds a rule that allows the current user <xref:System.Security.AccessControl.RegistryRights?displayProperty=fullName> rights. The example then creates a rule that grants the user <xref:System.Security.AccessControl.RegistryRights?displayProperty=fullName>, with the same inheritance and propagation rights as the first rule, and uses the <xref:System.Security.AccessControl.RegistrySecurity.RemoveAccessRule%2A> method to remove this new rule from the <xref:System.Security.AccessControl.RegistrySecurity> object. <xref:System.Security.AccessControl.RegistryRights.SetValue> is a constituent of <xref:System.Security.AccessControl.RegistryRights.ReadKey>, so it is removed from the compatible rule. The rules in the <xref:System.Security.AccessControl.RegistrySecurity> object are displayed, showing the remaining constituents of <xref:System.Security.AccessControl.RegistryRights.ReadKey>.  \\n  \\n The example code then calls the <xref:System.Security.AccessControl.RegistrySecurity.RemoveAccessRule%2A> method to merge the <xref:System.Security.AccessControl.RegistryRights.SetValue> right back into the rule in the <xref:System.Security.AccessControl.RegistrySecurity> object.  \\n  \\n> [!NOTE]\\n>  This example does not attach the security object to a <xref:Microsoft.Win32.RegistryKey> object. The second example in this section attaches a security object, and so do the examples in <xref:Microsoft.Win32.RegistryKey.GetAccessControl%2A?displayProperty=fullName><xref:Microsoft.Win32.RegistryKey.SetAccessControl%2A?displayProperty=fullName>.  \\n  \\n [!code-csharp[System.Security.AccessControl.RegistrySecurity.RemoveAccessRule#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.AccessControl.RegistrySecurity.RemoveAccessRule/CS/source.cs#1)]\\n [!code-vb[System.Security.AccessControl.RegistrySecurity.RemoveAccessRule#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.AccessControl.RegistrySecurity.RemoveAccessRule/VB/source.vb#1)]\"\n  syntax:\n    content: public bool RemoveAccessRule (System.Security.AccessControl.RegistryAccessRule rule);\n    parameters:\n    - id: rule\n      type: System.Security.AccessControl.RegistryAccessRule\n      description: A <xref href=\"System.Security.AccessControl.RegistryAccessRule\"></xref> that specifies the user and <xref href=\"System.Security.AccessControl.AccessControlType\"></xref> to search for, and a set of inheritance and propagation flags that a matching rule, if found, must be compatible with. Specifies the rights to remove from the compatible rule, if found.\n    return:\n      type: System.Boolean\n      description: '`true` if a compatible rule is found; otherwise `false`.'\n  overload: System.Security.AccessControl.RegistrySecurity.RemoveAccessRule*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>rule</code> is `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.AccessControl/RegistrySecurity.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.AccessControl.RegistrySecurity.RemoveAccessRuleAll(System.Security.AccessControl.RegistryAccessRule)\n  commentId: M:System.Security.AccessControl.RegistrySecurity.RemoveAccessRuleAll(System.Security.AccessControl.RegistryAccessRule)\n  id: RemoveAccessRuleAll(System.Security.AccessControl.RegistryAccessRule)\n  parent: System.Security.AccessControl.RegistrySecurity\n  langs:\n  - csharp\n  name: RemoveAccessRuleAll(RegistryAccessRule)\n  nameWithType: RegistrySecurity.RemoveAccessRuleAll(RegistryAccessRule)\n  fullName: RegistrySecurity.RemoveAccessRuleAll(RegistryAccessRule)\n  type: Method\n  assemblies:\n  - Microsoft.Win32.Registry.AccessControl\n  - mscorlib\n  - Microsoft.Win32.Registry\n  namespace: System.Security.AccessControl\n  summary: Searches for all access control rules with the same user and <xref href=\"System.Security.AccessControl.AccessControlType\"></xref> (allow or deny) as the specified rule and, if found, removes them.\n  remarks: \"The current <xref:System.Security.AccessControl.RegistrySecurity> is searched for rules that have the same user and the same <xref:System.Security.AccessControl.AccessControlType> value as `rule`. Any rights, inheritance flags, or propagation flags specified by `rule` are ignored when performing this search. If no matching rules are found, no action is taken.  \\n  \\n For example, if a user has multiple rules that allow various rights with different inheritance and propagation flags, you can remove all those rules by creating a <xref:System.Security.AccessControl.RegistryAccessRule> object that specifies the user and <xref:System.Security.AccessControl.AccessControlType?displayProperty=fullName>, with any arbitrary rights and flags, and passing that rule to the <xref:System.Security.AccessControl.RegistrySecurity.RemoveAccessRuleAll%2A> method.\"\n  example:\n  - \"The following code example shows that the <xref:System.Security.AccessControl.RegistrySecurity.RemoveAccessRuleAll%2A> method removes all rules that match user and <xref:System.Security.AccessControl.AccessControlType>, ignoring rights and flags.  \\n  \\n The example creates a <xref:System.Security.AccessControl.RegistrySecurity> object and adds rules that allow and deny various rights for the current user, with different inheritance and propagation flags. The example then creates a new rule that allows the current user to take ownership, and passes that rule to the <xref:System.Security.AccessControl.RegistrySecurity.RemoveAccessRuleAll%2A> method to remove the two rules that allow access.  \\n  \\n> [!NOTE]\\n>  This example does not attach the security object to a <xref:Microsoft.Win32.RegistryKey> object. See the <xref:Microsoft.Win32.RegistryKey.GetAccessControl%2A?displayProperty=fullName> method and the <xref:Microsoft.Win32.RegistryKey.SetAccessControl%2A?displayProperty=fullName> method.  \\n  \\n [!code-csharp[System.Security.AccessControl.RegistrySecurity.RemoveAccessRuleAll#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.AccessControl.RegistrySecurity.RemoveAccessRuleAll/CS/source.cs#1)]\\n [!code-vb[System.Security.AccessControl.RegistrySecurity.RemoveAccessRuleAll#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.AccessControl.RegistrySecurity.RemoveAccessRuleAll/VB/source.vb#1)]\"\n  syntax:\n    content: public void RemoveAccessRuleAll (System.Security.AccessControl.RegistryAccessRule rule);\n    parameters:\n    - id: rule\n      type: System.Security.AccessControl.RegistryAccessRule\n      description: A <xref href=\"System.Security.AccessControl.RegistryAccessRule\"></xref> that specifies the user and <xref href=\"System.Security.AccessControl.AccessControlType\"></xref> to search for. Any rights, inheritance flags, or propagation flags specified by this rule are ignored.\n  overload: System.Security.AccessControl.RegistrySecurity.RemoveAccessRuleAll*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>rule</code> is `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.AccessControl/RegistrySecurity.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.AccessControl.RegistrySecurity.RemoveAccessRuleSpecific(System.Security.AccessControl.RegistryAccessRule)\n  commentId: M:System.Security.AccessControl.RegistrySecurity.RemoveAccessRuleSpecific(System.Security.AccessControl.RegistryAccessRule)\n  id: RemoveAccessRuleSpecific(System.Security.AccessControl.RegistryAccessRule)\n  parent: System.Security.AccessControl.RegistrySecurity\n  langs:\n  - csharp\n  name: RemoveAccessRuleSpecific(RegistryAccessRule)\n  nameWithType: RegistrySecurity.RemoveAccessRuleSpecific(RegistryAccessRule)\n  fullName: RegistrySecurity.RemoveAccessRuleSpecific(RegistryAccessRule)\n  type: Method\n  assemblies:\n  - Microsoft.Win32.Registry.AccessControl\n  - mscorlib\n  - Microsoft.Win32.Registry\n  namespace: System.Security.AccessControl\n  summary: Searches for an access control rule that exactly matches the specified rule and, if found, removes it.\n  remarks: \"The rule is removed only if it exactly matches `rule` in all details, including flags. Other rules with the same user and <xref:System.Security.AccessControl.AccessControlType> are not affected.  \\n  \\n> [!IMPORTANT]\\n>  A rule represents one or more underlying access control entries (ACE), and these entries are split or combined as necessary when you modify the access security rules for a user. Thus, a rule might no longer exist in the specific form it had when it was added, and in that case the <xref:System.Security.AccessControl.RegistrySecurity.RemoveAccessRuleSpecific%2A> method cannot remove it.\"\n  example:\n  - \"The following code example shows that the <xref:System.Security.AccessControl.RegistrySecurity.RemoveAccessRuleSpecific%2A> method removes a rule only if it matches exactly.  \\n  \\n The example creates two rules that allow different rights. The rules have compatible inheritance and propagation flags, so when the second rule is added it merges with the first. The example calls the <xref:System.Security.AccessControl.RegistrySecurity.RemoveAccessRuleSpecific%2A> method, specifying the first rule, but because the rules are merged there is no rule that matches. The example then calls the <xref:System.Security.AccessControl.RegistrySecurity.RemoveAccessRule%2A> method to the remove the second rule from the merged rule, and finally calls the <xref:System.Security.AccessControl.RegistrySecurity.RemoveAccessRuleSpecific%2A> method to remove the first rule.  \\n  \\n> [!NOTE]\\n>  This example does not attach the security object to a <xref:Microsoft.Win32.RegistryKey> object. See the <xref:Microsoft.Win32.RegistryKey.GetAccessControl%2A?displayProperty=fullName> method and the <xref:Microsoft.Win32.RegistryKey.SetAccessControl%2A?displayProperty=fullName> method.  \\n  \\n [!code-csharp[System.Security.AccessControl.RegistrySecurity.RemoveAccessRuleSpecific#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.AccessControl.RegistrySecurity.RemoveAccessRuleSpecific/CS/source.cs#1)]\\n [!code-vb[System.Security.AccessControl.RegistrySecurity.RemoveAccessRuleSpecific#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.AccessControl.RegistrySecurity.RemoveAccessRuleSpecific/VB/source.vb#1)]\"\n  syntax:\n    content: public void RemoveAccessRuleSpecific (System.Security.AccessControl.RegistryAccessRule rule);\n    parameters:\n    - id: rule\n      type: System.Security.AccessControl.RegistryAccessRule\n      description: The <xref href=\"System.Security.AccessControl.RegistryAccessRule\"></xref> to remove.\n  overload: System.Security.AccessControl.RegistrySecurity.RemoveAccessRuleSpecific*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>rule</code> is `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.AccessControl/RegistrySecurity.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.AccessControl.RegistrySecurity.RemoveAuditRule(System.Security.AccessControl.RegistryAuditRule)\n  commentId: M:System.Security.AccessControl.RegistrySecurity.RemoveAuditRule(System.Security.AccessControl.RegistryAuditRule)\n  id: RemoveAuditRule(System.Security.AccessControl.RegistryAuditRule)\n  parent: System.Security.AccessControl.RegistrySecurity\n  langs:\n  - csharp\n  name: RemoveAuditRule(RegistryAuditRule)\n  nameWithType: RegistrySecurity.RemoveAuditRule(RegistryAuditRule)\n  fullName: RegistrySecurity.RemoveAuditRule(RegistryAuditRule)\n  type: Method\n  assemblies:\n  - Microsoft.Win32.Registry.AccessControl\n  - mscorlib\n  - Microsoft.Win32.Registry\n  namespace: System.Security.AccessControl\n  summary: Searches for an audit control rule with the same user as the specified rule, and with compatible inheritance and propagation flags; if a compatible rule is found, the rights contained in the specified rule are removed from it.\n  remarks: The current <xref:System.Security.AccessControl.RegistrySecurity> is searched for an audit rule that has the same user as `rule`. If no such rule is found, no action is taken, and the method returns `false`. If matching rules are found, their inheritance and compatibility flags are checked for compatibility with the flags specified in `rule`. If no compatible rule is found, no action is taken, and the method returns `false`. If a rule with compatible flags is found, the rights specified in `rule` are removed from the compatible rule, and the method returns `true`. If `rule` specifies rights not contained in the compatible rule, no action is taken with respect to those rights. If all rights are removed from the compatible rule, the entire rule is removed from the current <xref:System.Security.AccessControl.RegistrySecurity> object.\n  syntax:\n    content: public bool RemoveAuditRule (System.Security.AccessControl.RegistryAuditRule rule);\n    parameters:\n    - id: rule\n      type: System.Security.AccessControl.RegistryAuditRule\n      description: A <xref href=\"System.Security.AccessControl.RegistryAuditRule\"></xref> that specifies the user to search for, and a set of inheritance and propagation flags that a matching rule, if found, must be compatible with. Specifies the rights to remove from the compatible rule, if found.\n    return:\n      type: System.Boolean\n      description: '`true` if a compatible rule is found; otherwise, `false`.'\n  overload: System.Security.AccessControl.RegistrySecurity.RemoveAuditRule*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>rule</code> is `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.AccessControl/RegistrySecurity.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.AccessControl.RegistrySecurity.RemoveAuditRuleAll(System.Security.AccessControl.RegistryAuditRule)\n  commentId: M:System.Security.AccessControl.RegistrySecurity.RemoveAuditRuleAll(System.Security.AccessControl.RegistryAuditRule)\n  id: RemoveAuditRuleAll(System.Security.AccessControl.RegistryAuditRule)\n  parent: System.Security.AccessControl.RegistrySecurity\n  langs:\n  - csharp\n  name: RemoveAuditRuleAll(RegistryAuditRule)\n  nameWithType: RegistrySecurity.RemoveAuditRuleAll(RegistryAuditRule)\n  fullName: RegistrySecurity.RemoveAuditRuleAll(RegistryAuditRule)\n  type: Method\n  assemblies:\n  - Microsoft.Win32.Registry.AccessControl\n  - mscorlib\n  - Microsoft.Win32.Registry\n  namespace: System.Security.AccessControl\n  summary: Searches for all audit rules with the same user as the specified rule and, if found, removes them.\n  remarks: The current <xref:System.Security.AccessControl.RegistrySecurity> is searched for audit rules that have the same user as `rule`. Any rights, inheritance flags, or propagation flags specified by `rule` are ignored when performing this search. If no matching rules are found, no action is taken.\n  syntax:\n    content: public void RemoveAuditRuleAll (System.Security.AccessControl.RegistryAuditRule rule);\n    parameters:\n    - id: rule\n      type: System.Security.AccessControl.RegistryAuditRule\n      description: A <xref href=\"System.Security.AccessControl.RegistryAuditRule\"></xref> that specifies the user to search for. Any rights, inheritance flags, or propagation flags specified by this rule are ignored.\n  overload: System.Security.AccessControl.RegistrySecurity.RemoveAuditRuleAll*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>rule</code> is `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.AccessControl/RegistrySecurity.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.AccessControl.RegistrySecurity.RemoveAuditRuleSpecific(System.Security.AccessControl.RegistryAuditRule)\n  commentId: M:System.Security.AccessControl.RegistrySecurity.RemoveAuditRuleSpecific(System.Security.AccessControl.RegistryAuditRule)\n  id: RemoveAuditRuleSpecific(System.Security.AccessControl.RegistryAuditRule)\n  parent: System.Security.AccessControl.RegistrySecurity\n  langs:\n  - csharp\n  name: RemoveAuditRuleSpecific(RegistryAuditRule)\n  nameWithType: RegistrySecurity.RemoveAuditRuleSpecific(RegistryAuditRule)\n  fullName: RegistrySecurity.RemoveAuditRuleSpecific(RegistryAuditRule)\n  type: Method\n  assemblies:\n  - Microsoft.Win32.Registry.AccessControl\n  - mscorlib\n  - Microsoft.Win32.Registry\n  namespace: System.Security.AccessControl\n  summary: Searches for an audit rule that exactly matches the specified rule and, if found, removes it.\n  remarks: \"The rule is removed only if it exactly matches `rule` in all details, including flags. Other audit rules for the same user are not affected.  \\n  \\n> [!IMPORTANT]\\n>  A rule represents one or more underlying access control entries (ACE), and these entries are split or combined as necessary when you modify the audit security rules for a user. Thus, a rule might no longer exist in the specific form it had when it was added, and in that case the <xref:System.Security.AccessControl.RegistrySecurity.RemoveAuditRuleSpecific%2A> method cannot remove it.\"\n  syntax:\n    content: public void RemoveAuditRuleSpecific (System.Security.AccessControl.RegistryAuditRule rule);\n    parameters:\n    - id: rule\n      type: System.Security.AccessControl.RegistryAuditRule\n      description: The <xref href=\"System.Security.AccessControl.RegistryAuditRule\"></xref> to be removed.\n  overload: System.Security.AccessControl.RegistrySecurity.RemoveAuditRuleSpecific*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>rule</code> is `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.AccessControl/RegistrySecurity.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.AccessControl.RegistrySecurity.ResetAccessRule(System.Security.AccessControl.RegistryAccessRule)\n  commentId: M:System.Security.AccessControl.RegistrySecurity.ResetAccessRule(System.Security.AccessControl.RegistryAccessRule)\n  id: ResetAccessRule(System.Security.AccessControl.RegistryAccessRule)\n  parent: System.Security.AccessControl.RegistrySecurity\n  langs:\n  - csharp\n  name: ResetAccessRule(RegistryAccessRule)\n  nameWithType: RegistrySecurity.ResetAccessRule(RegistryAccessRule)\n  fullName: RegistrySecurity.ResetAccessRule(RegistryAccessRule)\n  type: Method\n  assemblies:\n  - Microsoft.Win32.Registry.AccessControl\n  - mscorlib\n  - Microsoft.Win32.Registry\n  namespace: System.Security.AccessControl\n  summary: Removes all access control rules with the same user as the specified rule, regardless of <xref href=\"System.Security.AccessControl.AccessControlType\"></xref>, and then adds the specified rule.\n  remarks: If there are no access rules whose user matches the specified rule, `rule` is added.\n  example:\n  - \"The following code example shows how the <xref:System.Security.AccessControl.RegistrySecurity.ResetAccessRule%2A> method replaces all rules for the matching user with the rule specified for the match.  \\n  \\n The example creates a <xref:System.Security.AccessControl.RegistrySecurity> object and adds rules that allow and deny various rights for the current user, with different inheritance and propagation flags. The example then creates a new rule that allows the current user only to read the key, and uses the <xref:System.Security.AccessControl.RegistrySecurity.ResetAccessRule%2A> method to remove the all rules for the user and replace them with the new rule.  \\n  \\n> [!NOTE]\\n>  This example does not attach the security object to a <xref:Microsoft.Win32.RegistryKey> object. See the <xref:Microsoft.Win32.RegistryKey.GetAccessControl%2A?displayProperty=fullName> method and the <xref:Microsoft.Win32.RegistryKey.SetAccessControl%2A?displayProperty=fullName> method.  \\n  \\n [!code-csharp[System.Security.AccessControl.RegistrySecurity.ResetAccessRule#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.AccessControl.RegistrySecurity.ResetAccessRule/CS/source.cs#1)]\\n [!code-vb[System.Security.AccessControl.RegistrySecurity.ResetAccessRule#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.AccessControl.RegistrySecurity.ResetAccessRule/VB/source.vb#1)]\"\n  syntax:\n    content: public void ResetAccessRule (System.Security.AccessControl.RegistryAccessRule rule);\n    parameters:\n    - id: rule\n      type: System.Security.AccessControl.RegistryAccessRule\n      description: The <xref href=\"System.Security.AccessControl.RegistryAccessRule\"></xref> to add. The user specified by this rule determines the rules to remove before this rule is added.\n  overload: System.Security.AccessControl.RegistrySecurity.ResetAccessRule*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.AccessControl/RegistrySecurity.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.AccessControl.RegistrySecurity.SetAccessRule(System.Security.AccessControl.RegistryAccessRule)\n  commentId: M:System.Security.AccessControl.RegistrySecurity.SetAccessRule(System.Security.AccessControl.RegistryAccessRule)\n  id: SetAccessRule(System.Security.AccessControl.RegistryAccessRule)\n  parent: System.Security.AccessControl.RegistrySecurity\n  langs:\n  - csharp\n  name: SetAccessRule(RegistryAccessRule)\n  nameWithType: RegistrySecurity.SetAccessRule(RegistryAccessRule)\n  fullName: RegistrySecurity.SetAccessRule(RegistryAccessRule)\n  type: Method\n  assemblies:\n  - Microsoft.Win32.Registry.AccessControl\n  - mscorlib\n  - Microsoft.Win32.Registry\n  namespace: System.Security.AccessControl\n  summary: Removes all access control rules with the same user and <xref href=\"System.Security.AccessControl.AccessControlType\"></xref> (allow or deny) as the specified rule, and then adds the specified rule.\n  remarks: \"If the specified rule has <xref:System.Security.AccessControl.AccessControlType.Allow>, the effect of this method is to remove all <xref:System.Security.AccessControl.AccessControlType.Allow> rules for the specified user, replacing them with the specified rule. If the specified rule has <xref:System.Security.AccessControl.AccessControlType.Deny>, all <xref:System.Security.AccessControl.AccessControlType.Deny> rules for the specified user are replaced with the specified rule.  \\n  \\n If there are no rules whose user and <xref:System.Security.AccessControl.AccessControlType> match the specified rule, `rule` is added.\"\n  example:\n  - \"The following code example shows that the <xref:System.Security.AccessControl.RegistrySecurity.SetAccessRule%2A> method removes all rules that match both the user and the <xref:System.Security.AccessControl.AccessControlType> of `rule`, ignoring rights and flags, and replaces them with `rule`.  \\n  \\n The example creates a <xref:System.Security.AccessControl.RegistrySecurity> object and adds rules that allow and deny various rights for the current user, with different inheritance and propagation flags. The example then creates a new rule that allows the current user only to read the key, and uses the <xref:System.Security.AccessControl.RegistrySecurity.SetAccessRule%2A> method to remove the two rules that allow access and to replace them with the new rule. The rule that denies access is not affected.  \\n  \\n> [!NOTE]\\n>  This example does not attach the security object to a <xref:Microsoft.Win32.RegistryKey> object. See the <xref:Microsoft.Win32.RegistryKey.GetAccessControl%2A?displayProperty=fullName> method and the <xref:Microsoft.Win32.RegistryKey.SetAccessControl%2A?displayProperty=fullName> method.  \\n  \\n [!code-csharp[System.Security.AccessControl.RegistrySecurity.SetAccessRule#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.AccessControl.RegistrySecurity.SetAccessRule/CS/source.cs#1)]\\n [!code-vb[System.Security.AccessControl.RegistrySecurity.SetAccessRule#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.AccessControl.RegistrySecurity.SetAccessRule/VB/source.vb#1)]\"\n  syntax:\n    content: public void SetAccessRule (System.Security.AccessControl.RegistryAccessRule rule);\n    parameters:\n    - id: rule\n      type: System.Security.AccessControl.RegistryAccessRule\n      description: The <xref href=\"System.Security.AccessControl.RegistryAccessRule\"></xref> to add. The user and <xref href=\"System.Security.AccessControl.AccessControlType\"></xref> of this rule determine the rules to remove before this rule is added.\n  overload: System.Security.AccessControl.RegistrySecurity.SetAccessRule*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>rule</code> is `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.AccessControl/RegistrySecurity.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.AccessControl.RegistrySecurity.SetAuditRule(System.Security.AccessControl.RegistryAuditRule)\n  commentId: M:System.Security.AccessControl.RegistrySecurity.SetAuditRule(System.Security.AccessControl.RegistryAuditRule)\n  id: SetAuditRule(System.Security.AccessControl.RegistryAuditRule)\n  parent: System.Security.AccessControl.RegistrySecurity\n  langs:\n  - csharp\n  name: SetAuditRule(RegistryAuditRule)\n  nameWithType: RegistrySecurity.SetAuditRule(RegistryAuditRule)\n  fullName: RegistrySecurity.SetAuditRule(RegistryAuditRule)\n  type: Method\n  assemblies:\n  - Microsoft.Win32.Registry.AccessControl\n  - mscorlib\n  - Microsoft.Win32.Registry\n  namespace: System.Security.AccessControl\n  summary: Removes all audit rules with the same user as the specified rule, regardless of the <xref href=\"System.Security.AccessControl.AuditFlags\"></xref> value, and then adds the specified rule.\n  remarks: If there are no audit rules whose user matches the specified rule, `rule` is added.\n  syntax:\n    content: public void SetAuditRule (System.Security.AccessControl.RegistryAuditRule rule);\n    parameters:\n    - id: rule\n      type: System.Security.AccessControl.RegistryAuditRule\n      description: The <xref href=\"System.Security.AccessControl.RegistryAuditRule\"></xref> to add. The user specified by this rule determines the rules to remove before this rule is added.\n  overload: System.Security.AccessControl.RegistrySecurity.SetAuditRule*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>rule</code> is `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.AccessControl/RegistrySecurity.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\nreferences:\n- uid: System.Security.AccessControl.NativeObjectSecurity\n  parent: System.Security.AccessControl\n  isExternal: false\n  name: NativeObjectSecurity\n  nameWithType: NativeObjectSecurity\n  fullName: System.Security.AccessControl.NativeObjectSecurity\n- uid: System.ArgumentOutOfRangeException\n  parent: System\n  isExternal: false\n  name: ArgumentOutOfRangeException\n  nameWithType: ArgumentOutOfRangeException\n  fullName: System.ArgumentOutOfRangeException\n- uid: System.ArgumentNullException\n  parent: System\n  isExternal: false\n  name: ArgumentNullException\n  nameWithType: ArgumentNullException\n  fullName: System.ArgumentNullException\n- uid: System.ArgumentException\n  parent: System\n  isExternal: false\n  name: ArgumentException\n  nameWithType: ArgumentException\n  fullName: System.ArgumentException\n- uid: System.Security.AccessControl.RegistrySecurity.#ctor\n  parent: System.Security.AccessControl.RegistrySecurity\n  isExternal: false\n  name: RegistrySecurity()\n  nameWithType: RegistrySecurity.RegistrySecurity()\n  fullName: RegistrySecurity.RegistrySecurity()\n- uid: System.Security.AccessControl.RegistrySecurity.AccessRightType\n  parent: System.Security.AccessControl.RegistrySecurity\n  isExternal: false\n  name: AccessRightType\n  nameWithType: RegistrySecurity.AccessRightType\n  fullName: RegistrySecurity.AccessRightType\n- uid: System.Type\n  parent: System\n  isExternal: false\n  name: Type\n  nameWithType: Type\n  fullName: System.Type\n- uid: System.Security.AccessControl.RegistrySecurity.AccessRuleFactory(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)\n  parent: System.Security.AccessControl.RegistrySecurity\n  isExternal: false\n  name: AccessRuleFactory(IdentityReference, Int32, Boolean, InheritanceFlags, PropagationFlags, AccessControlType)\n  nameWithType: RegistrySecurity.AccessRuleFactory(IdentityReference, Int32, Boolean, InheritanceFlags, PropagationFlags, AccessControlType)\n  fullName: RegistrySecurity.AccessRuleFactory(IdentityReference, Int32, Boolean, InheritanceFlags, PropagationFlags, AccessControlType)\n- uid: System.Security.AccessControl.AccessRule\n  parent: System.Security.AccessControl\n  isExternal: false\n  name: AccessRule\n  nameWithType: AccessRule\n  fullName: System.Security.AccessControl.AccessRule\n- uid: System.Security.Principal.IdentityReference\n  parent: System.Security.Principal\n  isExternal: false\n  name: IdentityReference\n  nameWithType: IdentityReference\n  fullName: System.Security.Principal.IdentityReference\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Security.AccessControl.InheritanceFlags\n  parent: System.Security.AccessControl\n  isExternal: false\n  name: InheritanceFlags\n  nameWithType: InheritanceFlags\n  fullName: System.Security.AccessControl.InheritanceFlags\n- uid: System.Security.AccessControl.PropagationFlags\n  parent: System.Security.AccessControl\n  isExternal: false\n  name: PropagationFlags\n  nameWithType: PropagationFlags\n  fullName: System.Security.AccessControl.PropagationFlags\n- uid: System.Security.AccessControl.AccessControlType\n  parent: System.Security.AccessControl\n  isExternal: false\n  name: AccessControlType\n  nameWithType: AccessControlType\n  fullName: System.Security.AccessControl.AccessControlType\n- uid: System.Security.AccessControl.RegistrySecurity.AccessRuleType\n  parent: System.Security.AccessControl.RegistrySecurity\n  isExternal: false\n  name: AccessRuleType\n  nameWithType: RegistrySecurity.AccessRuleType\n  fullName: RegistrySecurity.AccessRuleType\n- uid: System.Security.AccessControl.RegistrySecurity.AddAccessRule(System.Security.AccessControl.RegistryAccessRule)\n  parent: System.Security.AccessControl.RegistrySecurity\n  isExternal: false\n  name: AddAccessRule(RegistryAccessRule)\n  nameWithType: RegistrySecurity.AddAccessRule(RegistryAccessRule)\n  fullName: RegistrySecurity.AddAccessRule(RegistryAccessRule)\n- uid: System.Security.AccessControl.RegistryAccessRule\n  parent: System.Security.AccessControl\n  isExternal: false\n  name: RegistryAccessRule\n  nameWithType: RegistryAccessRule\n  fullName: System.Security.AccessControl.RegistryAccessRule\n- uid: System.Security.AccessControl.RegistrySecurity.AddAuditRule(System.Security.AccessControl.RegistryAuditRule)\n  parent: System.Security.AccessControl.RegistrySecurity\n  isExternal: false\n  name: AddAuditRule(RegistryAuditRule)\n  nameWithType: RegistrySecurity.AddAuditRule(RegistryAuditRule)\n  fullName: RegistrySecurity.AddAuditRule(RegistryAuditRule)\n- uid: System.Security.AccessControl.RegistryAuditRule\n  parent: System.Security.AccessControl\n  isExternal: false\n  name: RegistryAuditRule\n  nameWithType: RegistryAuditRule\n  fullName: System.Security.AccessControl.RegistryAuditRule\n- uid: System.Security.AccessControl.RegistrySecurity.AuditRuleFactory(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AuditFlags)\n  parent: System.Security.AccessControl.RegistrySecurity\n  isExternal: false\n  name: AuditRuleFactory(IdentityReference, Int32, Boolean, InheritanceFlags, PropagationFlags, AuditFlags)\n  nameWithType: RegistrySecurity.AuditRuleFactory(IdentityReference, Int32, Boolean, InheritanceFlags, PropagationFlags, AuditFlags)\n  fullName: RegistrySecurity.AuditRuleFactory(IdentityReference, Int32, Boolean, InheritanceFlags, PropagationFlags, AuditFlags)\n- uid: System.Security.AccessControl.AuditRule\n  parent: System.Security.AccessControl\n  isExternal: false\n  name: AuditRule\n  nameWithType: AuditRule\n  fullName: System.Security.AccessControl.AuditRule\n- uid: System.Security.AccessControl.AuditFlags\n  parent: System.Security.AccessControl\n  isExternal: false\n  name: AuditFlags\n  nameWithType: AuditFlags\n  fullName: System.Security.AccessControl.AuditFlags\n- uid: System.Security.AccessControl.RegistrySecurity.AuditRuleType\n  parent: System.Security.AccessControl.RegistrySecurity\n  isExternal: false\n  name: AuditRuleType\n  nameWithType: RegistrySecurity.AuditRuleType\n  fullName: RegistrySecurity.AuditRuleType\n- uid: System.Security.AccessControl.RegistrySecurity.RemoveAccessRule(System.Security.AccessControl.RegistryAccessRule)\n  parent: System.Security.AccessControl.RegistrySecurity\n  isExternal: false\n  name: RemoveAccessRule(RegistryAccessRule)\n  nameWithType: RegistrySecurity.RemoveAccessRule(RegistryAccessRule)\n  fullName: RegistrySecurity.RemoveAccessRule(RegistryAccessRule)\n- uid: System.Security.AccessControl.RegistrySecurity.RemoveAccessRuleAll(System.Security.AccessControl.RegistryAccessRule)\n  parent: System.Security.AccessControl.RegistrySecurity\n  isExternal: false\n  name: RemoveAccessRuleAll(RegistryAccessRule)\n  nameWithType: RegistrySecurity.RemoveAccessRuleAll(RegistryAccessRule)\n  fullName: RegistrySecurity.RemoveAccessRuleAll(RegistryAccessRule)\n- uid: System.Security.AccessControl.RegistrySecurity.RemoveAccessRuleSpecific(System.Security.AccessControl.RegistryAccessRule)\n  parent: System.Security.AccessControl.RegistrySecurity\n  isExternal: false\n  name: RemoveAccessRuleSpecific(RegistryAccessRule)\n  nameWithType: RegistrySecurity.RemoveAccessRuleSpecific(RegistryAccessRule)\n  fullName: RegistrySecurity.RemoveAccessRuleSpecific(RegistryAccessRule)\n- uid: System.Security.AccessControl.RegistrySecurity.RemoveAuditRule(System.Security.AccessControl.RegistryAuditRule)\n  parent: System.Security.AccessControl.RegistrySecurity\n  isExternal: false\n  name: RemoveAuditRule(RegistryAuditRule)\n  nameWithType: RegistrySecurity.RemoveAuditRule(RegistryAuditRule)\n  fullName: RegistrySecurity.RemoveAuditRule(RegistryAuditRule)\n- uid: System.Security.AccessControl.RegistrySecurity.RemoveAuditRuleAll(System.Security.AccessControl.RegistryAuditRule)\n  parent: System.Security.AccessControl.RegistrySecurity\n  isExternal: false\n  name: RemoveAuditRuleAll(RegistryAuditRule)\n  nameWithType: RegistrySecurity.RemoveAuditRuleAll(RegistryAuditRule)\n  fullName: RegistrySecurity.RemoveAuditRuleAll(RegistryAuditRule)\n- uid: System.Security.AccessControl.RegistrySecurity.RemoveAuditRuleSpecific(System.Security.AccessControl.RegistryAuditRule)\n  parent: System.Security.AccessControl.RegistrySecurity\n  isExternal: false\n  name: RemoveAuditRuleSpecific(RegistryAuditRule)\n  nameWithType: RegistrySecurity.RemoveAuditRuleSpecific(RegistryAuditRule)\n  fullName: RegistrySecurity.RemoveAuditRuleSpecific(RegistryAuditRule)\n- uid: System.Security.AccessControl.RegistrySecurity.ResetAccessRule(System.Security.AccessControl.RegistryAccessRule)\n  parent: System.Security.AccessControl.RegistrySecurity\n  isExternal: false\n  name: ResetAccessRule(RegistryAccessRule)\n  nameWithType: RegistrySecurity.ResetAccessRule(RegistryAccessRule)\n  fullName: RegistrySecurity.ResetAccessRule(RegistryAccessRule)\n- uid: System.Security.AccessControl.RegistrySecurity.SetAccessRule(System.Security.AccessControl.RegistryAccessRule)\n  parent: System.Security.AccessControl.RegistrySecurity\n  isExternal: false\n  name: SetAccessRule(RegistryAccessRule)\n  nameWithType: RegistrySecurity.SetAccessRule(RegistryAccessRule)\n  fullName: RegistrySecurity.SetAccessRule(RegistryAccessRule)\n- uid: System.Security.AccessControl.RegistrySecurity.SetAuditRule(System.Security.AccessControl.RegistryAuditRule)\n  parent: System.Security.AccessControl.RegistrySecurity\n  isExternal: false\n  name: SetAuditRule(RegistryAuditRule)\n  nameWithType: RegistrySecurity.SetAuditRule(RegistryAuditRule)\n  fullName: RegistrySecurity.SetAuditRule(RegistryAuditRule)\n- uid: System.Security.AccessControl.RegistrySecurity.#ctor*\n  parent: System.Security.AccessControl.RegistrySecurity\n  isExternal: false\n  name: RegistrySecurity\n  nameWithType: RegistrySecurity.RegistrySecurity\n  fullName: RegistrySecurity.RegistrySecurity\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.AccessControl/RegistrySecurity.xml\n- uid: System.Security.AccessControl.RegistrySecurity.AccessRightType*\n  parent: System.Security.AccessControl.RegistrySecurity\n  isExternal: false\n  name: AccessRightType\n  nameWithType: RegistrySecurity.AccessRightType\n  fullName: RegistrySecurity.AccessRightType\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.AccessControl/RegistrySecurity.xml\n- uid: System.Security.AccessControl.RegistrySecurity.AccessRuleFactory*\n  parent: System.Security.AccessControl.RegistrySecurity\n  isExternal: false\n  name: AccessRuleFactory\n  nameWithType: RegistrySecurity.AccessRuleFactory\n  fullName: RegistrySecurity.AccessRuleFactory\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.AccessControl/RegistrySecurity.xml\n- uid: System.Security.AccessControl.RegistrySecurity.AccessRuleType*\n  parent: System.Security.AccessControl.RegistrySecurity\n  isExternal: false\n  name: AccessRuleType\n  nameWithType: RegistrySecurity.AccessRuleType\n  fullName: RegistrySecurity.AccessRuleType\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.AccessControl/RegistrySecurity.xml\n- uid: System.Security.AccessControl.RegistrySecurity.AddAccessRule*\n  parent: System.Security.AccessControl.RegistrySecurity\n  isExternal: false\n  name: AddAccessRule\n  nameWithType: RegistrySecurity.AddAccessRule\n  fullName: RegistrySecurity.AddAccessRule\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.AccessControl/RegistrySecurity.xml\n- uid: System.Security.AccessControl.RegistrySecurity.AddAuditRule*\n  parent: System.Security.AccessControl.RegistrySecurity\n  isExternal: false\n  name: AddAuditRule\n  nameWithType: RegistrySecurity.AddAuditRule\n  fullName: RegistrySecurity.AddAuditRule\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.AccessControl/RegistrySecurity.xml\n- uid: System.Security.AccessControl.RegistrySecurity.AuditRuleFactory*\n  parent: System.Security.AccessControl.RegistrySecurity\n  isExternal: false\n  name: AuditRuleFactory\n  nameWithType: RegistrySecurity.AuditRuleFactory\n  fullName: RegistrySecurity.AuditRuleFactory\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.AccessControl/RegistrySecurity.xml\n- uid: System.Security.AccessControl.RegistrySecurity.AuditRuleType*\n  parent: System.Security.AccessControl.RegistrySecurity\n  isExternal: false\n  name: AuditRuleType\n  nameWithType: RegistrySecurity.AuditRuleType\n  fullName: RegistrySecurity.AuditRuleType\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.AccessControl/RegistrySecurity.xml\n- uid: System.Security.AccessControl.RegistrySecurity.RemoveAccessRule*\n  parent: System.Security.AccessControl.RegistrySecurity\n  isExternal: false\n  name: RemoveAccessRule\n  nameWithType: RegistrySecurity.RemoveAccessRule\n  fullName: RegistrySecurity.RemoveAccessRule\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.AccessControl/RegistrySecurity.xml\n- uid: System.Security.AccessControl.RegistrySecurity.RemoveAccessRuleAll*\n  parent: System.Security.AccessControl.RegistrySecurity\n  isExternal: false\n  name: RemoveAccessRuleAll\n  nameWithType: RegistrySecurity.RemoveAccessRuleAll\n  fullName: RegistrySecurity.RemoveAccessRuleAll\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.AccessControl/RegistrySecurity.xml\n- uid: System.Security.AccessControl.RegistrySecurity.RemoveAccessRuleSpecific*\n  parent: System.Security.AccessControl.RegistrySecurity\n  isExternal: false\n  name: RemoveAccessRuleSpecific\n  nameWithType: RegistrySecurity.RemoveAccessRuleSpecific\n  fullName: RegistrySecurity.RemoveAccessRuleSpecific\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.AccessControl/RegistrySecurity.xml\n- uid: System.Security.AccessControl.RegistrySecurity.RemoveAuditRule*\n  parent: System.Security.AccessControl.RegistrySecurity\n  isExternal: false\n  name: RemoveAuditRule\n  nameWithType: RegistrySecurity.RemoveAuditRule\n  fullName: RegistrySecurity.RemoveAuditRule\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.AccessControl/RegistrySecurity.xml\n- uid: System.Security.AccessControl.RegistrySecurity.RemoveAuditRuleAll*\n  parent: System.Security.AccessControl.RegistrySecurity\n  isExternal: false\n  name: RemoveAuditRuleAll\n  nameWithType: RegistrySecurity.RemoveAuditRuleAll\n  fullName: RegistrySecurity.RemoveAuditRuleAll\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.AccessControl/RegistrySecurity.xml\n- uid: System.Security.AccessControl.RegistrySecurity.RemoveAuditRuleSpecific*\n  parent: System.Security.AccessControl.RegistrySecurity\n  isExternal: false\n  name: RemoveAuditRuleSpecific\n  nameWithType: RegistrySecurity.RemoveAuditRuleSpecific\n  fullName: RegistrySecurity.RemoveAuditRuleSpecific\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.AccessControl/RegistrySecurity.xml\n- uid: System.Security.AccessControl.RegistrySecurity.ResetAccessRule*\n  parent: System.Security.AccessControl.RegistrySecurity\n  isExternal: false\n  name: ResetAccessRule\n  nameWithType: RegistrySecurity.ResetAccessRule\n  fullName: RegistrySecurity.ResetAccessRule\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.AccessControl/RegistrySecurity.xml\n- uid: System.Security.AccessControl.RegistrySecurity.SetAccessRule*\n  parent: System.Security.AccessControl.RegistrySecurity\n  isExternal: false\n  name: SetAccessRule\n  nameWithType: RegistrySecurity.SetAccessRule\n  fullName: RegistrySecurity.SetAccessRule\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.AccessControl/RegistrySecurity.xml\n- uid: System.Security.AccessControl.RegistrySecurity.SetAuditRule*\n  parent: System.Security.AccessControl.RegistrySecurity\n  isExternal: false\n  name: SetAuditRule\n  nameWithType: RegistrySecurity.SetAuditRule\n  fullName: RegistrySecurity.SetAuditRule\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.AccessControl/RegistrySecurity.xml\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: Object.Equals(Object)\n  fullName: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: Object.GetHashCode()\n  fullName: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: false\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: false\n  name: ToString()\n  nameWithType: Object.ToString()\n  fullName: Object.ToString()\n- uid: System.Security.AccessControl.ObjectSecurity.AccessRulesModified\n  parent: System.Security.AccessControl.ObjectSecurity\n  isExternal: false\n  name: AccessRulesModified\n  nameWithType: ObjectSecurity.AccessRulesModified\n  fullName: ObjectSecurity.AccessRulesModified\n- uid: System.Security.AccessControl.ObjectSecurity.AreAccessRulesCanonical\n  parent: System.Security.AccessControl.ObjectSecurity\n  isExternal: false\n  name: AreAccessRulesCanonical\n  nameWithType: ObjectSecurity.AreAccessRulesCanonical\n  fullName: ObjectSecurity.AreAccessRulesCanonical\n- uid: System.Security.AccessControl.ObjectSecurity.AreAccessRulesProtected\n  parent: System.Security.AccessControl.ObjectSecurity\n  isExternal: false\n  name: AreAccessRulesProtected\n  nameWithType: ObjectSecurity.AreAccessRulesProtected\n  fullName: ObjectSecurity.AreAccessRulesProtected\n- uid: System.Security.AccessControl.ObjectSecurity.AreAuditRulesCanonical\n  parent: System.Security.AccessControl.ObjectSecurity\n  isExternal: false\n  name: AreAuditRulesCanonical\n  nameWithType: ObjectSecurity.AreAuditRulesCanonical\n  fullName: ObjectSecurity.AreAuditRulesCanonical\n- uid: System.Security.AccessControl.ObjectSecurity.AreAuditRulesProtected\n  parent: System.Security.AccessControl.ObjectSecurity\n  isExternal: false\n  name: AreAuditRulesProtected\n  nameWithType: ObjectSecurity.AreAuditRulesProtected\n  fullName: ObjectSecurity.AreAuditRulesProtected\n- uid: System.Security.AccessControl.ObjectSecurity.AuditRulesModified\n  parent: System.Security.AccessControl.ObjectSecurity\n  isExternal: false\n  name: AuditRulesModified\n  nameWithType: ObjectSecurity.AuditRulesModified\n  fullName: ObjectSecurity.AuditRulesModified\n- uid: System.Security.AccessControl.ObjectSecurity.GetGroup(System.Type)\n  parent: System.Security.AccessControl.ObjectSecurity\n  isExternal: false\n  name: GetGroup(Type)\n  nameWithType: ObjectSecurity.GetGroup(Type)\n  fullName: ObjectSecurity.GetGroup(Type)\n- uid: System.Security.AccessControl.ObjectSecurity.GetOwner(System.Type)\n  parent: System.Security.AccessControl.ObjectSecurity\n  isExternal: false\n  name: GetOwner(Type)\n  nameWithType: ObjectSecurity.GetOwner(Type)\n  fullName: ObjectSecurity.GetOwner(Type)\n- uid: System.Security.AccessControl.ObjectSecurity.GetSecurityDescriptorBinaryForm\n  parent: System.Security.AccessControl.ObjectSecurity\n  isExternal: false\n  name: GetSecurityDescriptorBinaryForm()\n  nameWithType: ObjectSecurity.GetSecurityDescriptorBinaryForm()\n  fullName: ObjectSecurity.GetSecurityDescriptorBinaryForm()\n- uid: System.Security.AccessControl.ObjectSecurity.GetSecurityDescriptorSddlForm(System.Security.AccessControl.AccessControlSections)\n  parent: System.Security.AccessControl.ObjectSecurity\n  isExternal: false\n  name: GetSecurityDescriptorSddlForm(AccessControlSections)\n  nameWithType: ObjectSecurity.GetSecurityDescriptorSddlForm(AccessControlSections)\n  fullName: ObjectSecurity.GetSecurityDescriptorSddlForm(AccessControlSections)\n- uid: System.Security.AccessControl.ObjectSecurity.GroupModified\n  parent: System.Security.AccessControl.ObjectSecurity\n  isExternal: false\n  name: GroupModified\n  nameWithType: ObjectSecurity.GroupModified\n  fullName: ObjectSecurity.GroupModified\n- uid: System.Security.AccessControl.ObjectSecurity.IsContainer\n  parent: System.Security.AccessControl.ObjectSecurity\n  isExternal: false\n  name: IsContainer\n  nameWithType: ObjectSecurity.IsContainer\n  fullName: ObjectSecurity.IsContainer\n- uid: System.Security.AccessControl.ObjectSecurity.IsDS\n  parent: System.Security.AccessControl.ObjectSecurity\n  isExternal: false\n  name: IsDS\n  nameWithType: ObjectSecurity.IsDS\n  fullName: ObjectSecurity.IsDS\n- uid: System.Security.AccessControl.ObjectSecurity.IsSddlConversionSupported\n  parent: System.Security.AccessControl.ObjectSecurity\n  isExternal: false\n  name: IsSddlConversionSupported()\n  nameWithType: ObjectSecurity.IsSddlConversionSupported()\n  fullName: ObjectSecurity.IsSddlConversionSupported()\n- uid: System.Security.AccessControl.CommonObjectSecurity.ModifyAccess(System.Security.AccessControl.AccessControlModification,System.Security.AccessControl.AccessRule,System.Boolean@)\n  parent: System.Security.AccessControl.CommonObjectSecurity\n  isExternal: false\n  name: ModifyAccess(AccessControlModification, AccessRule, Boolean)\n  nameWithType: CommonObjectSecurity.ModifyAccess(AccessControlModification, AccessRule, Boolean)\n  fullName: CommonObjectSecurity.ModifyAccess(AccessControlModification, AccessRule, Boolean)\n- uid: System.Security.AccessControl.ObjectSecurity.ModifyAccessRule(System.Security.AccessControl.AccessControlModification,System.Security.AccessControl.AccessRule,System.Boolean@)\n  parent: System.Security.AccessControl.ObjectSecurity\n  isExternal: false\n  name: ModifyAccessRule(AccessControlModification, AccessRule, Boolean)\n  nameWithType: ObjectSecurity.ModifyAccessRule(AccessControlModification, AccessRule, Boolean)\n  fullName: ObjectSecurity.ModifyAccessRule(AccessControlModification, AccessRule, Boolean)\n- uid: System.Security.AccessControl.CommonObjectSecurity.ModifyAudit(System.Security.AccessControl.AccessControlModification,System.Security.AccessControl.AuditRule,System.Boolean@)\n  parent: System.Security.AccessControl.CommonObjectSecurity\n  isExternal: false\n  name: ModifyAudit(AccessControlModification, AuditRule, Boolean)\n  nameWithType: CommonObjectSecurity.ModifyAudit(AccessControlModification, AuditRule, Boolean)\n  fullName: CommonObjectSecurity.ModifyAudit(AccessControlModification, AuditRule, Boolean)\n- uid: System.Security.AccessControl.ObjectSecurity.ModifyAuditRule(System.Security.AccessControl.AccessControlModification,System.Security.AccessControl.AuditRule,System.Boolean@)\n  parent: System.Security.AccessControl.ObjectSecurity\n  isExternal: false\n  name: ModifyAuditRule(AccessControlModification, AuditRule, Boolean)\n  nameWithType: ObjectSecurity.ModifyAuditRule(AccessControlModification, AuditRule, Boolean)\n  fullName: ObjectSecurity.ModifyAuditRule(AccessControlModification, AuditRule, Boolean)\n- uid: System.Security.AccessControl.ObjectSecurity.OwnerModified\n  parent: System.Security.AccessControl.ObjectSecurity\n  isExternal: false\n  name: OwnerModified\n  nameWithType: ObjectSecurity.OwnerModified\n  fullName: ObjectSecurity.OwnerModified\n- uid: System.Security.AccessControl.NativeObjectSecurity.Persist(System.Runtime.InteropServices.SafeHandle,System.Security.AccessControl.AccessControlSections)\n  parent: System.Security.AccessControl.NativeObjectSecurity\n  isExternal: false\n  name: Persist(SafeHandle, AccessControlSections)\n  nameWithType: NativeObjectSecurity.Persist(SafeHandle, AccessControlSections)\n  fullName: NativeObjectSecurity.Persist(SafeHandle, AccessControlSections)\n- uid: System.Security.AccessControl.NativeObjectSecurity.Persist(System.String,System.Security.AccessControl.AccessControlSections)\n  parent: System.Security.AccessControl.NativeObjectSecurity\n  isExternal: false\n  name: Persist(String, AccessControlSections)\n  nameWithType: NativeObjectSecurity.Persist(String, AccessControlSections)\n  fullName: NativeObjectSecurity.Persist(String, AccessControlSections)\n- uid: System.Security.AccessControl.ObjectSecurity.Persist(System.Boolean,System.String,System.Security.AccessControl.AccessControlSections)\n  parent: System.Security.AccessControl.ObjectSecurity\n  isExternal: false\n  name: Persist(Boolean, String, AccessControlSections)\n  nameWithType: ObjectSecurity.Persist(Boolean, String, AccessControlSections)\n  fullName: ObjectSecurity.Persist(Boolean, String, AccessControlSections)\n- uid: System.Security.AccessControl.ObjectSecurity.PurgeAccessRules(System.Security.Principal.IdentityReference)\n  parent: System.Security.AccessControl.ObjectSecurity\n  isExternal: false\n  name: PurgeAccessRules(IdentityReference)\n  nameWithType: ObjectSecurity.PurgeAccessRules(IdentityReference)\n  fullName: ObjectSecurity.PurgeAccessRules(IdentityReference)\n- uid: System.Security.AccessControl.ObjectSecurity.PurgeAuditRules(System.Security.Principal.IdentityReference)\n  parent: System.Security.AccessControl.ObjectSecurity\n  isExternal: false\n  name: PurgeAuditRules(IdentityReference)\n  nameWithType: ObjectSecurity.PurgeAuditRules(IdentityReference)\n  fullName: ObjectSecurity.PurgeAuditRules(IdentityReference)\n- uid: System.Security.AccessControl.ObjectSecurity.ReadLock\n  parent: System.Security.AccessControl.ObjectSecurity\n  isExternal: false\n  name: ReadLock()\n  nameWithType: ObjectSecurity.ReadLock()\n  fullName: ObjectSecurity.ReadLock()\n- uid: System.Security.AccessControl.ObjectSecurity.ReadUnlock\n  parent: System.Security.AccessControl.ObjectSecurity\n  isExternal: false\n  name: ReadUnlock()\n  nameWithType: ObjectSecurity.ReadUnlock()\n  fullName: ObjectSecurity.ReadUnlock()\n- uid: System.Security.AccessControl.ObjectSecurity.SetAccessRuleProtection(System.Boolean,System.Boolean)\n  parent: System.Security.AccessControl.ObjectSecurity\n  isExternal: false\n  name: SetAccessRuleProtection(Boolean, Boolean)\n  nameWithType: ObjectSecurity.SetAccessRuleProtection(Boolean, Boolean)\n  fullName: ObjectSecurity.SetAccessRuleProtection(Boolean, Boolean)\n- uid: System.Security.AccessControl.ObjectSecurity.SetAuditRuleProtection(System.Boolean,System.Boolean)\n  parent: System.Security.AccessControl.ObjectSecurity\n  isExternal: false\n  name: SetAuditRuleProtection(Boolean, Boolean)\n  nameWithType: ObjectSecurity.SetAuditRuleProtection(Boolean, Boolean)\n  fullName: ObjectSecurity.SetAuditRuleProtection(Boolean, Boolean)\n- uid: System.Security.AccessControl.ObjectSecurity.SetGroup(System.Security.Principal.IdentityReference)\n  parent: System.Security.AccessControl.ObjectSecurity\n  isExternal: false\n  name: SetGroup(IdentityReference)\n  nameWithType: ObjectSecurity.SetGroup(IdentityReference)\n  fullName: ObjectSecurity.SetGroup(IdentityReference)\n- uid: System.Security.AccessControl.ObjectSecurity.SetOwner(System.Security.Principal.IdentityReference)\n  parent: System.Security.AccessControl.ObjectSecurity\n  isExternal: false\n  name: SetOwner(IdentityReference)\n  nameWithType: ObjectSecurity.SetOwner(IdentityReference)\n  fullName: ObjectSecurity.SetOwner(IdentityReference)\n- uid: System.Security.AccessControl.ObjectSecurity.SetSecurityDescriptorBinaryForm(System.Byte[])\n  parent: System.Security.AccessControl.ObjectSecurity\n  isExternal: false\n  name: SetSecurityDescriptorBinaryForm(Byte[])\n  nameWithType: ObjectSecurity.SetSecurityDescriptorBinaryForm(Byte[])\n  fullName: ObjectSecurity.SetSecurityDescriptorBinaryForm(Byte[])\n- uid: System.Security.AccessControl.ObjectSecurity.SetSecurityDescriptorBinaryForm(System.Byte[],System.Security.AccessControl.AccessControlSections)\n  parent: System.Security.AccessControl.ObjectSecurity\n  isExternal: false\n  name: SetSecurityDescriptorBinaryForm(Byte[], AccessControlSections)\n  nameWithType: ObjectSecurity.SetSecurityDescriptorBinaryForm(Byte[], AccessControlSections)\n  fullName: ObjectSecurity.SetSecurityDescriptorBinaryForm(Byte[], AccessControlSections)\n- uid: System.Security.AccessControl.ObjectSecurity.SetSecurityDescriptorSddlForm(System.String)\n  parent: System.Security.AccessControl.ObjectSecurity\n  isExternal: false\n  name: SetSecurityDescriptorSddlForm(String)\n  nameWithType: ObjectSecurity.SetSecurityDescriptorSddlForm(String)\n  fullName: ObjectSecurity.SetSecurityDescriptorSddlForm(String)\n- uid: System.Security.AccessControl.ObjectSecurity.SetSecurityDescriptorSddlForm(System.String,System.Security.AccessControl.AccessControlSections)\n  parent: System.Security.AccessControl.ObjectSecurity\n  isExternal: false\n  name: SetSecurityDescriptorSddlForm(String, AccessControlSections)\n  nameWithType: ObjectSecurity.SetSecurityDescriptorSddlForm(String, AccessControlSections)\n  fullName: ObjectSecurity.SetSecurityDescriptorSddlForm(String, AccessControlSections)\n- uid: System.Security.AccessControl.ObjectSecurity.WriteLock\n  parent: System.Security.AccessControl.ObjectSecurity\n  isExternal: false\n  name: WriteLock()\n  nameWithType: ObjectSecurity.WriteLock()\n  fullName: ObjectSecurity.WriteLock()\n- uid: System.Security.AccessControl.ObjectSecurity.WriteUnlock\n  parent: System.Security.AccessControl.ObjectSecurity\n  isExternal: false\n  name: WriteUnlock()\n  nameWithType: ObjectSecurity.WriteUnlock()\n  fullName: ObjectSecurity.WriteUnlock()\n- uid: System.Security.AccessControl.CommonObjectSecurity.AddAccessRule(System.Security.AccessControl.AccessRule)\n  parent: System.Security.AccessControl.CommonObjectSecurity\n  isExternal: false\n  name: AddAccessRule(AccessRule)\n  nameWithType: CommonObjectSecurity.AddAccessRule(AccessRule)\n  fullName: CommonObjectSecurity.AddAccessRule(AccessRule)\n- uid: System.Security.AccessControl.CommonObjectSecurity.AddAuditRule(System.Security.AccessControl.AuditRule)\n  parent: System.Security.AccessControl.CommonObjectSecurity\n  isExternal: false\n  name: AddAuditRule(AuditRule)\n  nameWithType: CommonObjectSecurity.AddAuditRule(AuditRule)\n  fullName: CommonObjectSecurity.AddAuditRule(AuditRule)\n- uid: System.Security.AccessControl.CommonObjectSecurity.GetAccessRules(System.Boolean,System.Boolean,System.Type)\n  parent: System.Security.AccessControl.CommonObjectSecurity\n  isExternal: false\n  name: GetAccessRules(Boolean, Boolean, Type)\n  nameWithType: CommonObjectSecurity.GetAccessRules(Boolean, Boolean, Type)\n  fullName: CommonObjectSecurity.GetAccessRules(Boolean, Boolean, Type)\n- uid: System.Security.AccessControl.CommonObjectSecurity.GetAuditRules(System.Boolean,System.Boolean,System.Type)\n  parent: System.Security.AccessControl.CommonObjectSecurity\n  isExternal: false\n  name: GetAuditRules(Boolean, Boolean, Type)\n  nameWithType: CommonObjectSecurity.GetAuditRules(Boolean, Boolean, Type)\n  fullName: CommonObjectSecurity.GetAuditRules(Boolean, Boolean, Type)\n- uid: System.Security.AccessControl.CommonObjectSecurity.RemoveAccessRule(System.Security.AccessControl.AccessRule)\n  parent: System.Security.AccessControl.CommonObjectSecurity\n  isExternal: false\n  name: RemoveAccessRule(AccessRule)\n  nameWithType: CommonObjectSecurity.RemoveAccessRule(AccessRule)\n  fullName: CommonObjectSecurity.RemoveAccessRule(AccessRule)\n- uid: System.Security.AccessControl.CommonObjectSecurity.RemoveAccessRuleAll(System.Security.AccessControl.AccessRule)\n  parent: System.Security.AccessControl.CommonObjectSecurity\n  isExternal: false\n  name: RemoveAccessRuleAll(AccessRule)\n  nameWithType: CommonObjectSecurity.RemoveAccessRuleAll(AccessRule)\n  fullName: CommonObjectSecurity.RemoveAccessRuleAll(AccessRule)\n- uid: System.Security.AccessControl.CommonObjectSecurity.RemoveAccessRuleSpecific(System.Security.AccessControl.AccessRule)\n  parent: System.Security.AccessControl.CommonObjectSecurity\n  isExternal: false\n  name: RemoveAccessRuleSpecific(AccessRule)\n  nameWithType: CommonObjectSecurity.RemoveAccessRuleSpecific(AccessRule)\n  fullName: CommonObjectSecurity.RemoveAccessRuleSpecific(AccessRule)\n- uid: System.Security.AccessControl.CommonObjectSecurity.RemoveAuditRule(System.Security.AccessControl.AuditRule)\n  parent: System.Security.AccessControl.CommonObjectSecurity\n  isExternal: false\n  name: RemoveAuditRule(AuditRule)\n  nameWithType: CommonObjectSecurity.RemoveAuditRule(AuditRule)\n  fullName: CommonObjectSecurity.RemoveAuditRule(AuditRule)\n- uid: System.Security.AccessControl.CommonObjectSecurity.RemoveAuditRuleAll(System.Security.AccessControl.AuditRule)\n  parent: System.Security.AccessControl.CommonObjectSecurity\n  isExternal: false\n  name: RemoveAuditRuleAll(AuditRule)\n  nameWithType: CommonObjectSecurity.RemoveAuditRuleAll(AuditRule)\n  fullName: CommonObjectSecurity.RemoveAuditRuleAll(AuditRule)\n- uid: System.Security.AccessControl.CommonObjectSecurity.RemoveAuditRuleSpecific(System.Security.AccessControl.AuditRule)\n  parent: System.Security.AccessControl.CommonObjectSecurity\n  isExternal: false\n  name: RemoveAuditRuleSpecific(AuditRule)\n  nameWithType: CommonObjectSecurity.RemoveAuditRuleSpecific(AuditRule)\n  fullName: CommonObjectSecurity.RemoveAuditRuleSpecific(AuditRule)\n- uid: System.Security.AccessControl.CommonObjectSecurity.ResetAccessRule(System.Security.AccessControl.AccessRule)\n  parent: System.Security.AccessControl.CommonObjectSecurity\n  isExternal: false\n  name: ResetAccessRule(AccessRule)\n  nameWithType: CommonObjectSecurity.ResetAccessRule(AccessRule)\n  fullName: CommonObjectSecurity.ResetAccessRule(AccessRule)\n- uid: System.Security.AccessControl.CommonObjectSecurity.SetAccessRule(System.Security.AccessControl.AccessRule)\n  parent: System.Security.AccessControl.CommonObjectSecurity\n  isExternal: false\n  name: SetAccessRule(AccessRule)\n  nameWithType: CommonObjectSecurity.SetAccessRule(AccessRule)\n  fullName: CommonObjectSecurity.SetAccessRule(AccessRule)\n- uid: System.Security.AccessControl.CommonObjectSecurity.SetAuditRule(System.Security.AccessControl.AuditRule)\n  parent: System.Security.AccessControl.CommonObjectSecurity\n  isExternal: false\n  name: SetAuditRule(AuditRule)\n  nameWithType: CommonObjectSecurity.SetAuditRule(AuditRule)\n  fullName: CommonObjectSecurity.SetAuditRule(AuditRule)\n- uid: System.Security.AccessControl.NativeObjectSecurity.Persist(System.Runtime.InteropServices.SafeHandle,System.Security.AccessControl.AccessControlSections,System.Object)\n  parent: System.Security.AccessControl.NativeObjectSecurity\n  isExternal: false\n  name: Persist(SafeHandle, AccessControlSections, Object)\n  nameWithType: NativeObjectSecurity.Persist(SafeHandle, AccessControlSections, Object)\n  fullName: NativeObjectSecurity.Persist(SafeHandle, AccessControlSections, Object)\n- uid: System.Security.AccessControl.NativeObjectSecurity.Persist(System.String,System.Security.AccessControl.AccessControlSections,System.Object)\n  parent: System.Security.AccessControl.NativeObjectSecurity\n  isExternal: false\n  name: Persist(String, AccessControlSections, Object)\n  nameWithType: NativeObjectSecurity.Persist(String, AccessControlSections, Object)\n  fullName: NativeObjectSecurity.Persist(String, AccessControlSections, Object)\n"}