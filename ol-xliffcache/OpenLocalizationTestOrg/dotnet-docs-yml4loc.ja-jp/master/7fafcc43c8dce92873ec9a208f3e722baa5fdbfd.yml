### YamlMime:ManagedReference
items:
- uid: System.Net.IPAddress
  commentId: T:System.Net.IPAddress
  id: IPAddress
  children:
  - System.Net.IPAddress.#ctor(System.Byte[])
  - System.Net.IPAddress.#ctor(System.Int64)
  - System.Net.IPAddress.#ctor(System.Byte[],System.Int64)
  - System.Net.IPAddress.Address
  - System.Net.IPAddress.AddressFamily
  - System.Net.IPAddress.Any
  - System.Net.IPAddress.Broadcast
  - System.Net.IPAddress.Equals(System.Object)
  - System.Net.IPAddress.GetAddressBytes
  - System.Net.IPAddress.GetHashCode
  - System.Net.IPAddress.HostToNetworkOrder(System.Int16)
  - System.Net.IPAddress.HostToNetworkOrder(System.Int32)
  - System.Net.IPAddress.HostToNetworkOrder(System.Int64)
  - System.Net.IPAddress.IPv6Any
  - System.Net.IPAddress.IPv6Loopback
  - System.Net.IPAddress.IPv6None
  - System.Net.IPAddress.IsIPv4MappedToIPv6
  - System.Net.IPAddress.IsIPv6LinkLocal
  - System.Net.IPAddress.IsIPv6Multicast
  - System.Net.IPAddress.IsIPv6SiteLocal
  - System.Net.IPAddress.IsIPv6Teredo
  - System.Net.IPAddress.IsLoopback(System.Net.IPAddress)
  - System.Net.IPAddress.Loopback
  - System.Net.IPAddress.MapToIPv4
  - System.Net.IPAddress.MapToIPv6
  - System.Net.IPAddress.NetworkToHostOrder(System.Int16)
  - System.Net.IPAddress.NetworkToHostOrder(System.Int32)
  - System.Net.IPAddress.NetworkToHostOrder(System.Int64)
  - System.Net.IPAddress.None
  - System.Net.IPAddress.Parse(System.String)
  - System.Net.IPAddress.ScopeId
  - System.Net.IPAddress.ToString
  - System.Net.IPAddress.TryParse(System.String,System.Net.IPAddress@)
  langs:
  - csharp
  name: IPAddress
  nameWithType: IPAddress
  fullName: System.Net.IPAddress
  type: Class
  assemblies:
  - System.Net.Primitives
  - System
  - netstandard
  namespace: System.Net
  summary: Provides an Internet Protocol (IP) address.
  remarks: The <xref:System.Net.IPAddress> class contains the address of a computer on an IP network.
  example:
  - "The following code example shows how to query a server to obtain the family addresses and the IP addresses it supports.  \n  \n [!code-cpp[System.Net.IPAddress#1](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.IPAddress/CPP/ipaddress.cpp#1)]\n [!code-csharp[System.Net.IPAddress#1](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.IPAddress/CS/ipaddress.cs#1)]\n [!code-vb[System.Net.IPAddress#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/System.Net.IPAddress/VB/ipaddress.vb#1)]"
  syntax:
    content: public class IPAddress
  inheritance:
  - System.Object
  implements: []
  inheritedMembers:
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/IPAddress.xml
  ms.author: bobdel
  manager: markl
- uid: System.Net.IPAddress.#ctor(System.Byte[])
  commentId: M:System.Net.IPAddress.#ctor(System.Byte[])
  id: '#ctor(System.Byte[])'
  parent: System.Net.IPAddress
  langs:
  - csharp
  name: IPAddress(Byte[])
  nameWithType: IPAddress.IPAddress(Byte[])
  fullName: IPAddress.IPAddress(Byte[])
  type: Constructor
  assemblies:
  - System.Net.Primitives
  - System
  - netstandard
  namespace: System.Net
  summary: Initializes a new instance of the <xref href="System.Net.IPAddress"></xref> class with the address specified as a <xref href="System.Byte"></xref> array.
  remarks: "The <xref:System.Net.IPAddress> is created with the <xref:System.Net.IPAddress.Address%2A> property set to `address`.  \n  \n If the length of `address` is 4, <xref:System.Net.IPAddress.%23ctor%28System.Byte%5B%5D%29> constructs an IPv4 address; otherwise, an IPv6 address with a scope of 0 is constructed.  \n  \n The <xref:System.Byte> array is assumed to be in network byte order with the most significant byte first in index position 0."
  syntax:
    content: public IPAddress (byte[] address);
    parameters:
    - id: address
      type: System.Byte[]
      description: The byte array value of the IP address.
  overload: System.Net.IPAddress.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>address</code> is `null`.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: <code>address</code> contains a bad IP address.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/IPAddress.xml
  ms.author: bobdel
  manager: markl
- uid: System.Net.IPAddress.#ctor(System.Int64)
  commentId: M:System.Net.IPAddress.#ctor(System.Int64)
  id: '#ctor(System.Int64)'
  parent: System.Net.IPAddress
  langs:
  - csharp
  name: IPAddress(Int64)
  nameWithType: IPAddress.IPAddress(Int64)
  fullName: IPAddress.IPAddress(Int64)
  type: Constructor
  assemblies:
  - System.Net.Primitives
  - System
  - netstandard
  namespace: System.Net
  summary: Initializes a new instance of the <xref href="System.Net.IPAddress"></xref> class with the address specified as an <xref href="System.Int64"></xref>.
  remarks: "The <xref:System.Net.IPAddress> instance is created with the <xref:System.Net.IPAddress.Address%2A> property set to `newAddress`.  \n  \n The <xref:System.Int64> value is assumed to be in network byte order."
  syntax:
    content: public IPAddress (long newAddress);
    parameters:
    - id: newAddress
      type: System.Int64
      description: The long value of the IP address. For example, the value 0x2414188f in big-endian format would be the IP address "143.24.20.36".
  overload: System.Net.IPAddress.#ctor*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>newAddress</code> < 0 or  \n  \n <code>newAddress</code> > 0x00000000FFFFFFFF"
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/IPAddress.xml
  ms.author: bobdel
  manager: markl
- uid: System.Net.IPAddress.#ctor(System.Byte[],System.Int64)
  commentId: M:System.Net.IPAddress.#ctor(System.Byte[],System.Int64)
  id: '#ctor(System.Byte[],System.Int64)'
  parent: System.Net.IPAddress
  langs:
  - csharp
  name: IPAddress(Byte[], Int64)
  nameWithType: IPAddress.IPAddress(Byte[], Int64)
  fullName: IPAddress.IPAddress(Byte[], Int64)
  type: Constructor
  assemblies:
  - System.Net.Primitives
  - System
  - netstandard
  namespace: System.Net
  summary: Initializes a new instance of the <xref href="System.Net.IPAddress"></xref> class with the address specified as a <xref href="System.Byte"></xref> array and the specified scope identifier.
  remarks: "This constructor instantiates an IPv6 address. The `scopeid` identifies a network interface in the case of a link-local address. The scope is valid only for link-local and site-local addresses.  \n  \n The <xref:System.Byte> array is assumed to be in network byte order with the most significant byte first in index position 0."
  syntax:
    content: public IPAddress (byte[] address, long scopeid);
    parameters:
    - id: address
      type: System.Byte[]
      description: The byte array value of the IP address.
    - id: scopeid
      type: System.Int64
      description: The long value of the scope identifier.
  overload: System.Net.IPAddress.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>address</code> is `null`.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: <code>address</code> contains a bad IP address.
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>scopeid</code> < 0 or  \n  \n <code>scopeid</code> > 0x00000000FFFFFFFF"
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/IPAddress.xml
  ms.author: bobdel
  manager: markl
- uid: System.Net.IPAddress.Address
  commentId: P:System.Net.IPAddress.Address
  id: Address
  parent: System.Net.IPAddress
  langs:
  - csharp
  name: Address
  nameWithType: IPAddress.Address
  fullName: IPAddress.Address
  type: Property
  assemblies:
  - System
  - netstandard
  - System.Net.Primitives
  namespace: System.Net
  summary: An Internet Protocol (IP) address.
  remarks: "This property is obsolete. Use <xref:System.Net.IPAddress.GetAddressBytes%2A>.  \n  \n To convert <xref:System.Net.IPAddress.Address%2A> to dotted-quad notation, use the <xref:System.Net.IPAddress.ToString%2A> method."
  example:
  - "The following example uses the <xref:System.Net.IPAddress.Address%2A> parameter to retrieve the IP address of the <xref:System.Net.IPAddress> instance.  \n  \n [!code-cpp[IPAddress_Address_AddressFamily#2](~/samples/snippets/cpp/VS_Snippets_Remoting/IPAddress_Address_AddressFamily/CPP/ipaddress_address_addressfamily.cpp#2)]\n [!code-csharp[IPAddress_Address_AddressFamily#2](~/samples/snippets/csharp/VS_Snippets_Remoting/IPAddress_Address_AddressFamily/CS/ipaddress_address_addressfamily.cs#2)]\n [!code-vb[IPAddress_Address_AddressFamily#2](~/samples/snippets/visualbasic/VS_Snippets_Remoting/IPAddress_Address_AddressFamily/VB/ipaddress_address_addressfamily.vb#2)]"
  syntax:
    content: >-
      [System.Obsolete("This property has been deprecated. It is address family dependent. Please use IPAddress.Equals method to perform comparisons. http://go.microsoft.com/fwlink/?linkid=14202")]

      public long Address { get; set; }
    return:
      type: System.Int64
      description: The long value of the IP address.
  overload: System.Net.IPAddress.Address*
  exceptions:
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: The address family is <xref href="System.Net.Sockets.AddressFamily.InterNetworkV6"></xref>.
  attributes:
  - type: System.ObsoleteAttribute
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/IPAddress.xml
  ms.author: bobdel
  manager: markl
- uid: System.Net.IPAddress.AddressFamily
  commentId: P:System.Net.IPAddress.AddressFamily
  id: AddressFamily
  parent: System.Net.IPAddress
  langs:
  - csharp
  name: AddressFamily
  nameWithType: IPAddress.AddressFamily
  fullName: IPAddress.AddressFamily
  type: Property
  assemblies:
  - System.Net.Primitives
  - System
  - netstandard
  namespace: System.Net
  summary: Gets the address family of the IP address.
  remarks: ''
  example:
  - "Refer to the example in the <xref:System.Net.IPAddress> class topic.  \n  \n [!code-cpp[System.Net.IPAddress#3](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.IPAddress/CPP/ipaddress.cpp#3)]\n [!code-csharp[System.Net.IPAddress#3](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.IPAddress/CS/ipaddress.cs#3)]\n [!code-vb[System.Net.IPAddress#3](~/samples/snippets/visualbasic/VS_Snippets_Remoting/System.Net.IPAddress/VB/ipaddress.vb#3)]"
  syntax:
    content: public System.Net.Sockets.AddressFamily AddressFamily { get; }
    return:
      type: System.Net.Sockets.AddressFamily
      description: Returns <xref href="System.Net.Sockets.AddressFamily.InterNetwork"></xref> for IPv4 or <xref href="System.Net.Sockets.AddressFamily.InterNetworkV6"></xref> for IPv6.
  overload: System.Net.IPAddress.AddressFamily*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/IPAddress.xml
  ms.author: bobdel
  manager: markl
- uid: System.Net.IPAddress.Any
  commentId: F:System.Net.IPAddress.Any
  id: Any
  parent: System.Net.IPAddress
  langs:
  - csharp
  name: Any
  nameWithType: IPAddress.Any
  fullName: IPAddress.Any
  type: Field
  assemblies:
  - System.Net.Primitives
  - System
  - netstandard
  namespace: System.Net
  summary: Provides an IP address that indicates that the server must listen for client activity on all network interfaces. This field is read-only.
  remarks: "The <xref:System.Net.Sockets.Socket.Bind%2A?displayProperty=fullName> method uses the <xref:System.Net.IPAddress.Any> field to indicate that a <xref:System.Net.Sockets.Socket> instance must listen for client activity on all network interfaces.  \n  \n The <xref:System.Net.IPAddress.Any> field is equivalent to 0.0.0.0 in dotted-quad notation."
  syntax:
    content: public static readonly System.Net.IPAddress Any;
    return:
      type: System.Net.IPAddress
      description: ''
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/IPAddress.xml
  ms.author: bobdel
  manager: markl
- uid: System.Net.IPAddress.Broadcast
  commentId: F:System.Net.IPAddress.Broadcast
  id: Broadcast
  parent: System.Net.IPAddress
  langs:
  - csharp
  name: Broadcast
  nameWithType: IPAddress.Broadcast
  fullName: IPAddress.Broadcast
  type: Field
  assemblies:
  - System.Net.Primitives
  - System
  - netstandard
  namespace: System.Net
  summary: Provides the IP broadcast address. This field is read-only.
  remarks: The <xref:System.Net.IPAddress.Broadcast> field is equivalent to 255.255.255.255 in dotted-quad notation.
  example:
  - "The following example prints the <xref:System.Net.IPAddress.Broadcast> address to the console.  \n  \n [!code-cpp[IPAddress_Broadcast_Loopback#2](~/samples/snippets/cpp/VS_Snippets_Remoting/IPAddress_Broadcast_Loopback/CPP/ipaddress_broadcast_loopback.cpp#2)]\n [!code-csharp[IPAddress_Broadcast_Loopback#2](~/samples/snippets/csharp/VS_Snippets_Remoting/IPAddress_Broadcast_Loopback/CS/ipaddress_broadcast_loopback.cs#2)]\n [!code-vb[IPAddress_Broadcast_Loopback#2](~/samples/snippets/visualbasic/VS_Snippets_Remoting/IPAddress_Broadcast_Loopback/VB/ipaddress_broadcast_loopback.vb#2)]"
  syntax:
    content: public static readonly System.Net.IPAddress Broadcast;
    return:
      type: System.Net.IPAddress
      description: ''
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/IPAddress.xml
  ms.author: bobdel
  manager: markl
- uid: System.Net.IPAddress.Equals(System.Object)
  commentId: M:System.Net.IPAddress.Equals(System.Object)
  id: Equals(System.Object)
  parent: System.Net.IPAddress
  langs:
  - csharp
  name: Equals(Object)
  nameWithType: IPAddress.Equals(Object)
  fullName: IPAddress.Equals(Object)
  type: Method
  assemblies:
  - System.Net.Primitives
  - System
  - netstandard
  namespace: System.Net
  summary: Compares two IP addresses.
  remarks: The <xref:System.Net.IPAddress.Equals%2A> method compares the current <xref:System.Net.IPAddress> instance with the `comparand` parameter and returns `true` if the two instances contain the same IP address.
  syntax:
    content: public override bool Equals (object comparand);
    parameters:
    - id: comparand
      type: System.Object
      description: An <xref href="System.Net.IPAddress"></xref> instance to compare to the current instance.
    return:
      type: System.Boolean
      description: '`true` if the two addresses are equal; otherwise, `false`.'
  overload: System.Net.IPAddress.Equals*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/IPAddress.xml
  ms.author: bobdel
  manager: markl
- uid: System.Net.IPAddress.GetAddressBytes
  commentId: M:System.Net.IPAddress.GetAddressBytes
  id: GetAddressBytes
  parent: System.Net.IPAddress
  langs:
  - csharp
  name: GetAddressBytes()
  nameWithType: IPAddress.GetAddressBytes()
  fullName: IPAddress.GetAddressBytes()
  type: Method
  assemblies:
  - System.Net.Primitives
  - System
  - netstandard
  namespace: System.Net
  summary: Provides a copy of the <xref href="System.Net.IPAddress"></xref> as an array of bytes.
  remarks: ''
  example:
  - "The following code example shows how to get a server IP address in byte format.  \n  \n [!code-cpp[System.Net.IPAddress#2](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.IPAddress/CPP/ipaddress.cpp#2)]\n [!code-csharp[System.Net.IPAddress#2](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.IPAddress/CS/ipaddress.cs#2)]\n [!code-vb[System.Net.IPAddress#2](~/samples/snippets/visualbasic/VS_Snippets_Remoting/System.Net.IPAddress/VB/ipaddress.vb#2)]"
  syntax:
    content: public byte[] GetAddressBytes ();
    parameters: []
    return:
      type: System.Byte[]
      description: A <xref href="System.Byte"></xref> array.
  overload: System.Net.IPAddress.GetAddressBytes*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/IPAddress.xml
  ms.author: bobdel
  manager: markl
- uid: System.Net.IPAddress.GetHashCode
  commentId: M:System.Net.IPAddress.GetHashCode
  id: GetHashCode
  parent: System.Net.IPAddress
  langs:
  - csharp
  name: GetHashCode()
  nameWithType: IPAddress.GetHashCode()
  fullName: IPAddress.GetHashCode()
  type: Method
  assemblies:
  - System.Net.Primitives
  - System
  - netstandard
  namespace: System.Net
  summary: Returns a hash value for an IP address.
  remarks: The <xref:System.Net.IPAddress.GetHashCode%2A> method returns a hash code of the IP address. This value can be used as a key in hash tables.
  syntax:
    content: public override int GetHashCode ();
    parameters: []
    return:
      type: System.Int32
      description: An integer hash value.
  overload: System.Net.IPAddress.GetHashCode*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/IPAddress.xml
  ms.author: bobdel
  manager: markl
- uid: System.Net.IPAddress.HostToNetworkOrder(System.Int16)
  commentId: M:System.Net.IPAddress.HostToNetworkOrder(System.Int16)
  id: HostToNetworkOrder(System.Int16)
  parent: System.Net.IPAddress
  langs:
  - csharp
  name: HostToNetworkOrder(Int16)
  nameWithType: IPAddress.HostToNetworkOrder(Int16)
  fullName: IPAddress.HostToNetworkOrder(Int16)
  type: Method
  assemblies:
  - System.Net.Primitives
  - System
  - netstandard
  namespace: System.Net
  summary: Converts a short value from host byte order to network byte order.
  remarks: "Different computers use different conventions for ordering the bytes within multibyte integer values. Some computers put the most significant byte first (known as big-endian order) and others put the least-significant byte first (known as little-endian order). To work with computers that use different byte ordering, all integer values that are sent over the network are sent in network byte order which has the most significant byte first.  \n  \n The <xref:System.Net.IPAddress.HostToNetworkOrder%2A> method converts multibyte integer values that are stored on the host system from the byte order used by the host to the byte order used by the network."
  syntax:
    content: public static short HostToNetworkOrder (short host);
    parameters:
    - id: host
      type: System.Int16
      description: The number to convert, expressed in host byte order.
    return:
      type: System.Int16
      description: A short value, expressed in network byte order.
  overload: System.Net.IPAddress.HostToNetworkOrder*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/IPAddress.xml
  ms.author: bobdel
  manager: markl
- uid: System.Net.IPAddress.HostToNetworkOrder(System.Int32)
  commentId: M:System.Net.IPAddress.HostToNetworkOrder(System.Int32)
  id: HostToNetworkOrder(System.Int32)
  parent: System.Net.IPAddress
  langs:
  - csharp
  name: HostToNetworkOrder(Int32)
  nameWithType: IPAddress.HostToNetworkOrder(Int32)
  fullName: IPAddress.HostToNetworkOrder(Int32)
  type: Method
  assemblies:
  - System.Net.Primitives
  - System
  - netstandard
  namespace: System.Net
  summary: Converts an integer value from host byte order to network byte order.
  remarks: "Different computers use different conventions for ordering the bytes within multibyte integer values. Some computers put the most significant byte first (known as big-endian order) and others put the least-significant byte first (known as little-endian order). To work with computers that use different byte ordering, all integer values that are sent over the network are sent in network byte order which has the most significant byte first.  \n  \n The <xref:System.Net.IPAddress.HostToNetworkOrder%2A> method converts multibyte integer values that are stored on the host system from the byte order used by the host to the byte order used by the network."
  syntax:
    content: public static int HostToNetworkOrder (int host);
    parameters:
    - id: host
      type: System.Int32
      description: The number to convert, expressed in host byte order.
    return:
      type: System.Int32
      description: An integer value, expressed in network byte order.
  overload: System.Net.IPAddress.HostToNetworkOrder*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/IPAddress.xml
  ms.author: bobdel
  manager: markl
- uid: System.Net.IPAddress.HostToNetworkOrder(System.Int64)
  commentId: M:System.Net.IPAddress.HostToNetworkOrder(System.Int64)
  id: HostToNetworkOrder(System.Int64)
  parent: System.Net.IPAddress
  langs:
  - csharp
  name: HostToNetworkOrder(Int64)
  nameWithType: IPAddress.HostToNetworkOrder(Int64)
  fullName: IPAddress.HostToNetworkOrder(Int64)
  type: Method
  assemblies:
  - System.Net.Primitives
  - System
  - netstandard
  namespace: System.Net
  summary: Converts a long value from host byte order to network byte order.
  remarks: "Different computers use different conventions for ordering the bytes within multibyte integer values. Some computers put the most significant byte first (known as big-endian order) and others put the least-significant byte first (known as little-endian order). To work with computers that use different byte ordering, all integer values that are sent over the network are sent in network byte order which has the most significant byte first.  \n  \n The <xref:System.Net.IPAddress.HostToNetworkOrder%2A> method converts multibyte integer values that are stored on the host system from the byte order used by the host to the byte order used by the network."
  syntax:
    content: public static long HostToNetworkOrder (long host);
    parameters:
    - id: host
      type: System.Int64
      description: The number to convert, expressed in host byte order.
    return:
      type: System.Int64
      description: A long value, expressed in network byte order.
  overload: System.Net.IPAddress.HostToNetworkOrder*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/IPAddress.xml
  ms.author: bobdel
  manager: markl
- uid: System.Net.IPAddress.IPv6Any
  commentId: F:System.Net.IPAddress.IPv6Any
  id: IPv6Any
  parent: System.Net.IPAddress
  langs:
  - csharp
  name: IPv6Any
  nameWithType: IPAddress.IPv6Any
  fullName: IPAddress.IPv6Any
  type: Field
  assemblies:
  - System.Net.Primitives
  - System
  - netstandard
  namespace: System.Net
  summary: The <xref href="System.Net.Sockets.Socket.Bind(System.Net.EndPoint)"></xref> method uses the <xref href="System.Net.IPAddress.IPv6Any"></xref> field to indicate that a <xref href="System.Net.Sockets.Socket"></xref> must listen for client activity on all network interfaces.
  remarks: 'The <xref:System.Net.IPAddress.IPv6Any> field is equivalent to 0:0:0:0:0:0:0:0 in colon-hexadecimal notation, or to :: in compact notation.'
  example:
  - "The following code example displays the value of the current host's Any address in standard compressed format.  \n  \n [!code-cpp[System.Net.IPAddress.IPv6NoneAnyLoopback#2](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.IPAddress.IPv6NoneAnyLoopback/CPP/noneanyloopback.cpp#2)]\n [!code-csharp[System.Net.IPAddress.IPv6NoneAnyLoopback#2](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.IPAddress.IPv6NoneAnyLoopback/CS/noneanyloopback.cs#2)]\n [!code-vb[System.Net.IPAddress.IPv6NoneAnyLoopback#2](~/samples/snippets/visualbasic/VS_Snippets_Remoting/System.Net.IPAddress.IPv6NoneAnyLoopback/VB/noneanyloopback.vb#2)]"
  syntax:
    content: public static readonly System.Net.IPAddress IPv6Any;
    return:
      type: System.Net.IPAddress
      description: ''
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/IPAddress.xml
  ms.author: bobdel
  manager: markl
- uid: System.Net.IPAddress.IPv6Loopback
  commentId: F:System.Net.IPAddress.IPv6Loopback
  id: IPv6Loopback
  parent: System.Net.IPAddress
  langs:
  - csharp
  name: IPv6Loopback
  nameWithType: IPAddress.IPv6Loopback
  fullName: IPAddress.IPv6Loopback
  type: Field
  assemblies:
  - System.Net.Primitives
  - System
  - netstandard
  namespace: System.Net
  summary: Provides the IP loopback address. This property is read-only.
  remarks: The <xref:System.Net.IPAddress.IPv6Loopback> field is equivalent to 0:0:0:0:0:0:0:1 in colon-hexadecimal notation, or to ::1 in compact notation.
  example:
  - "The following code example displays the value of the current host's loopback address in standard compressed format.  \n  \n [!code-cpp[System.Net.IPAddress.IPv6NoneAnyLoopback#1](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.IPAddress.IPv6NoneAnyLoopback/CPP/noneanyloopback.cpp#1)]\n [!code-csharp[System.Net.IPAddress.IPv6NoneAnyLoopback#1](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.IPAddress.IPv6NoneAnyLoopback/CS/noneanyloopback.cs#1)]\n [!code-vb[System.Net.IPAddress.IPv6NoneAnyLoopback#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/System.Net.IPAddress.IPv6NoneAnyLoopback/VB/noneanyloopback.vb#1)]"
  syntax:
    content: public static readonly System.Net.IPAddress IPv6Loopback;
    return:
      type: System.Net.IPAddress
      description: ''
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/IPAddress.xml
  ms.author: bobdel
  manager: markl
- uid: System.Net.IPAddress.IPv6None
  commentId: F:System.Net.IPAddress.IPv6None
  id: IPv6None
  parent: System.Net.IPAddress
  langs:
  - csharp
  name: IPv6None
  nameWithType: IPAddress.IPv6None
  fullName: IPAddress.IPv6None
  type: Field
  assemblies:
  - System.Net.Primitives
  - System
  - netstandard
  namespace: System.Net
  summary: Provides an IP address that indicates that no network interface should be used. This property is read-only.
  remarks: The <xref:System.Net.Sockets.Socket.Bind%2A?displayProperty=fullName> method uses the <xref:System.Net.IPAddress.IPv6None> field to indicate that a <xref:System.Net.Sockets.Socket> must not listen for client activity. The <xref:System.Net.IPAddress.IPv6None> field is equivalent to 0:0:0:0:0:0:0:0 in colon-hexadecimal notation, or to ::0 in compact notation.
  example:
  - "The following code example displays the value of the current host's None address in standard compressed format.  \n  \n [!code-cpp[System.Net.IPAddress.IPv6NoneAnyLoopback#3](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.IPAddress.IPv6NoneAnyLoopback/CPP/noneanyloopback.cpp#3)]\n [!code-csharp[System.Net.IPAddress.IPv6NoneAnyLoopback#3](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.IPAddress.IPv6NoneAnyLoopback/CS/noneanyloopback.cs#3)]\n [!code-vb[System.Net.IPAddress.IPv6NoneAnyLoopback#3](~/samples/snippets/visualbasic/VS_Snippets_Remoting/System.Net.IPAddress.IPv6NoneAnyLoopback/VB/noneanyloopback.vb#3)]"
  syntax:
    content: public static readonly System.Net.IPAddress IPv6None;
    return:
      type: System.Net.IPAddress
      description: ''
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/IPAddress.xml
  ms.author: bobdel
  manager: markl
- uid: System.Net.IPAddress.IsIPv4MappedToIPv6
  commentId: P:System.Net.IPAddress.IsIPv4MappedToIPv6
  id: IsIPv4MappedToIPv6
  parent: System.Net.IPAddress
  langs:
  - csharp
  name: IsIPv4MappedToIPv6
  nameWithType: IPAddress.IsIPv4MappedToIPv6
  fullName: IPAddress.IsIPv4MappedToIPv6
  type: Property
  assemblies:
  - System.Net.Primitives
  - System
  - netstandard
  namespace: System.Net
  summary: Gets whether the IP address is an IPv4-mapped IPv6 address.
  remarks: Dual-stack sockets always require IPv6 addresses. The ability to interact with an IPv4 address requires the use of the IPv4-mapped IPv6 address format. Any IPv4 addresses must be represented in the IPv4-mapped IPv6 address format which enables an IPv6 only application to communicate with an IPv4 node. The IPv4-mapped IPv6 address format allows the IPv4 address of an IPv4 node to be represented as an IPv6 address. The IPv4 address is encoded into the low-order 32 bits of the IPv6 address, and the high-order 96 bits hold the fixed prefix 0:0:0:0:0:FFFF. The IPv4-mapped IPv6 address format is specified in RFC 4291. For more information, see [www.ietf.org/rfc/rfc4291.txt](http://go.microsoft.com/fwlink/?LinkID=92231).
  syntax:
    content: public bool IsIPv4MappedToIPv6 { get; }
    return:
      type: System.Boolean
      description: "Returns <xref href=\"System.Boolean\"></xref>.  \n  \n `true` if the IP address is an IPv4-mapped IPv6 address; otherwise, `false`."
  overload: System.Net.IPAddress.IsIPv4MappedToIPv6*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/IPAddress.xml
  ms.author: bobdel
  manager: markl
- uid: System.Net.IPAddress.IsIPv6LinkLocal
  commentId: P:System.Net.IPAddress.IsIPv6LinkLocal
  id: IsIPv6LinkLocal
  parent: System.Net.IPAddress
  langs:
  - csharp
  name: IsIPv6LinkLocal
  nameWithType: IPAddress.IsIPv6LinkLocal
  fullName: IPAddress.IsIPv6LinkLocal
  type: Property
  assemblies:
  - System.Net.Primitives
  - System
  - netstandard
  namespace: System.Net
  summary: Gets whether the address is an IPv6 link local address.
  syntax:
    content: public bool IsIPv6LinkLocal { get; }
    return:
      type: System.Boolean
      description: '`true` if the IP address is an IPv6 link local address; otherwise, `false`.'
  overload: System.Net.IPAddress.IsIPv6LinkLocal*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/IPAddress.xml
  ms.author: bobdel
  manager: markl
- uid: System.Net.IPAddress.IsIPv6Multicast
  commentId: P:System.Net.IPAddress.IsIPv6Multicast
  id: IsIPv6Multicast
  parent: System.Net.IPAddress
  langs:
  - csharp
  name: IsIPv6Multicast
  nameWithType: IPAddress.IsIPv6Multicast
  fullName: IPAddress.IsIPv6Multicast
  type: Property
  assemblies:
  - System.Net.Primitives
  - System
  - netstandard
  namespace: System.Net
  summary: Gets whether the address is an IPv6 multicast global address.
  syntax:
    content: public bool IsIPv6Multicast { get; }
    return:
      type: System.Boolean
      description: '`true` if the IP address is an IPv6 multicast global address; otherwise, `false`.'
  overload: System.Net.IPAddress.IsIPv6Multicast*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/IPAddress.xml
  ms.author: bobdel
  manager: markl
- uid: System.Net.IPAddress.IsIPv6SiteLocal
  commentId: P:System.Net.IPAddress.IsIPv6SiteLocal
  id: IsIPv6SiteLocal
  parent: System.Net.IPAddress
  langs:
  - csharp
  name: IsIPv6SiteLocal
  nameWithType: IPAddress.IsIPv6SiteLocal
  fullName: IPAddress.IsIPv6SiteLocal
  type: Property
  assemblies:
  - System.Net.Primitives
  - System
  - netstandard
  namespace: System.Net
  summary: Gets whether the address is an IPv6 site local address.
  syntax:
    content: public bool IsIPv6SiteLocal { get; }
    return:
      type: System.Boolean
      description: '`true` if the IP address is an IPv6 site local address; otherwise, `false`.'
  overload: System.Net.IPAddress.IsIPv6SiteLocal*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/IPAddress.xml
  ms.author: bobdel
  manager: markl
- uid: System.Net.IPAddress.IsIPv6Teredo
  commentId: P:System.Net.IPAddress.IsIPv6Teredo
  id: IsIPv6Teredo
  parent: System.Net.IPAddress
  langs:
  - csharp
  name: IsIPv6Teredo
  nameWithType: IPAddress.IsIPv6Teredo
  fullName: IPAddress.IsIPv6Teredo
  type: Property
  assemblies:
  - System.Net.Primitives
  - System
  - netstandard
  namespace: System.Net
  summary: Gets whether the address is an IPv6 Teredo address.
  remarks: A Teredo address is an IPv6 address with the prefix of 2001::/32. Teredo addresses can be returned through normal DNS name resolution or enumerated as an IPv6 address assigned to a local interface.
  syntax:
    content: public bool IsIPv6Teredo { get; }
    return:
      type: System.Boolean
      description: '`true` if the IP address is an IPv6 Teredo address; otherwise, `false`.'
  overload: System.Net.IPAddress.IsIPv6Teredo*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/IPAddress.xml
  ms.author: bobdel
  manager: markl
- uid: System.Net.IPAddress.IsLoopback(System.Net.IPAddress)
  commentId: M:System.Net.IPAddress.IsLoopback(System.Net.IPAddress)
  id: IsLoopback(System.Net.IPAddress)
  parent: System.Net.IPAddress
  langs:
  - csharp
  name: IsLoopback(IPAddress)
  nameWithType: IPAddress.IsLoopback(IPAddress)
  fullName: IPAddress.IsLoopback(IPAddress)
  type: Method
  assemblies:
  - System.Net.Primitives
  - System
  - netstandard
  namespace: System.Net
  summary: Indicates whether the specified IP address is the loopback address.
  remarks: "The <xref:System.Net.IPAddress.IsLoopback%2A> method compares `address` to <xref:System.Net.IPAddress.Loopback> and returns `true` if the two IP addresses are the same.  \n  \n In the case of IPv4, that the <xref:System.Net.IPAddress.IsLoopback%2A> method returns `true` for any IP address of the form 127.X.Y.Z (where X, Y, and Z are in the range 0-255), not just <xref:System.Net.IPAddress.Loopback> (127.0.0.1)."
  example:
  - "The following code example uses the <xref:System.Net.IPAddress.IsLoopback%2A> method to determine whether the specified address is a loopback address.  \n  \n [!code-cpp[System.Net.IPAddress.IsLoopback#1](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.IPAddress.IsLoopback/CPP/isloopback.cpp#1)]\n [!code-csharp[System.Net.IPAddress.IsLoopback#1](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.IPAddress.IsLoopback/CS/isloopback.cs#1)]\n [!code-vb[System.Net.IPAddress.IsLoopback#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/System.Net.IPAddress.IsLoopback/VB/isloopback.vb#1)]"
  syntax:
    content: public static bool IsLoopback (System.Net.IPAddress address);
    parameters:
    - id: address
      type: System.Net.IPAddress
      description: An IP address.
    return:
      type: System.Boolean
      description: '`true` if <code>address</code> is the loopback address; otherwise, `false`.'
  overload: System.Net.IPAddress.IsLoopback*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/IPAddress.xml
  ms.author: bobdel
  manager: markl
- uid: System.Net.IPAddress.Loopback
  commentId: F:System.Net.IPAddress.Loopback
  id: Loopback
  parent: System.Net.IPAddress
  langs:
  - csharp
  name: Loopback
  nameWithType: IPAddress.Loopback
  fullName: IPAddress.Loopback
  type: Field
  assemblies:
  - System.Net.Primitives
  - System
  - netstandard
  namespace: System.Net
  summary: Provides the IP loopback address. This field is read-only.
  remarks: The <xref:System.Net.IPAddress.Loopback> field is equivalent to 127.0.0.1 in dotted-quad notation.
  example:
  - "The following example prints the <xref:System.Net.IPAddress.Loopback> address to the console.  \n  \n [!code-cpp[IPAddress_Broadcast_Loopback#1](~/samples/snippets/cpp/VS_Snippets_Remoting/IPAddress_Broadcast_Loopback/CPP/ipaddress_broadcast_loopback.cpp#1)]\n [!code-csharp[IPAddress_Broadcast_Loopback#1](~/samples/snippets/csharp/VS_Snippets_Remoting/IPAddress_Broadcast_Loopback/CS/ipaddress_broadcast_loopback.cs#1)]\n [!code-vb[IPAddress_Broadcast_Loopback#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/IPAddress_Broadcast_Loopback/VB/ipaddress_broadcast_loopback.vb#1)]"
  syntax:
    content: public static readonly System.Net.IPAddress Loopback;
    return:
      type: System.Net.IPAddress
      description: ''
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/IPAddress.xml
  ms.author: bobdel
  manager: markl
- uid: System.Net.IPAddress.MapToIPv4
  commentId: M:System.Net.IPAddress.MapToIPv4
  id: MapToIPv4
  parent: System.Net.IPAddress
  langs:
  - csharp
  name: MapToIPv4()
  nameWithType: IPAddress.MapToIPv4()
  fullName: IPAddress.MapToIPv4()
  type: Method
  assemblies:
  - System.Net.Primitives
  - System
  - netstandard
  namespace: System.Net
  summary: Maps the <xref href="System.Net.IPAddress"></xref> object to an IPv4 address.
  remarks: "Dual-stack sockets always require IPv6 addresses. The ability to interact with an IPv4 address requires the use of the IPv4-mapped IPv6 address format. Any IPv4 addresses must be represented in the IPv4-mapped IPv6 address format which enables an IPv6 only application to communicate with an IPv4 node. The IPv4-mapped IPv6 address format allows the IPv4 address of an IPv4 node to be represented as an IPv6 address. The IPv4 address is encoded into the low-order 32 bits of the IPv6 address, and the high-order 96 bits hold the fixed prefix 0:0:0:0:0:FFFF. The IPv4-mapped IPv6 address format is specified in RFC 4291. For more information, see [www.ietf.org/rfc/rfc4291.txt](http://go.microsoft.com/fwlink/?LinkID=92231).  \n  \n If you want to use <xref:System.Net.IPAddress.MapToIPv4%2A> to convert an IPv4 address from IPv6 format to IPv4 format, you must first ensure that you've got an IPv4 address. Call <xref:System.Net.IPAddress.IsIPv4MappedToIPv6%2A>, which will return `true` if the IP address is originally IPv4 written as IPv6, or `false` otherwise. If <xref:System.Net.IPAddress.IsIPv4MappedToIPv6%2A> returns `true`, use <xref:System.Net.IPAddress.MapToIPv4%2A> to make the conversion."
  syntax:
    content: public System.Net.IPAddress MapToIPv4 ();
    parameters: []
    return:
      type: System.Net.IPAddress
      description: "Returns <xref href=\"System.Net.IPAddress\"></xref>.  \n  \n An IPv4 address."
  overload: System.Net.IPAddress.MapToIPv4*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/IPAddress.xml
  ms.author: bobdel
  manager: markl
- uid: System.Net.IPAddress.MapToIPv6
  commentId: M:System.Net.IPAddress.MapToIPv6
  id: MapToIPv6
  parent: System.Net.IPAddress
  langs:
  - csharp
  name: MapToIPv6()
  nameWithType: IPAddress.MapToIPv6()
  fullName: IPAddress.MapToIPv6()
  type: Method
  assemblies:
  - System.Net.Primitives
  - System
  - netstandard
  namespace: System.Net
  summary: Maps the <xref href="System.Net.IPAddress"></xref> object to an IPv6 address.
  remarks: Dual-stack sockets always require IPv6 addresses. The ability to interact with an IPv4 address requires the use of the IPv4-mapped IPv6 address format. Any IPv4 addresses must be represented in the IPv4-mapped IPv6 address format which enables an IPv6 only application to communicate with an IPv4 node. The IPv4-mapped IPv6 address format allows the IPv4 address of an IPv4 node to be represented as an IPv6 address. The IPv4 address is encoded into the low-order 32 bits of the IPv6 address, and the high-order 96 bits hold the fixed prefix 0:0:0:0:0:FFFF. The IPv4-mapped IPv6 address format is specified in RFC 4291. For more information, see [www.ietf.org/rfc/rfc4291.txt](http://go.microsoft.com/fwlink/?LinkID=92231).
  syntax:
    content: public System.Net.IPAddress MapToIPv6 ();
    parameters: []
    return:
      type: System.Net.IPAddress
      description: "Returns <xref href=\"System.Net.IPAddress\"></xref>.  \n  \n An IPv6 address."
  overload: System.Net.IPAddress.MapToIPv6*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/IPAddress.xml
  ms.author: bobdel
  manager: markl
- uid: System.Net.IPAddress.NetworkToHostOrder(System.Int16)
  commentId: M:System.Net.IPAddress.NetworkToHostOrder(System.Int16)
  id: NetworkToHostOrder(System.Int16)
  parent: System.Net.IPAddress
  langs:
  - csharp
  name: NetworkToHostOrder(Int16)
  nameWithType: IPAddress.NetworkToHostOrder(Int16)
  fullName: IPAddress.NetworkToHostOrder(Int16)
  type: Method
  assemblies:
  - System.Net.Primitives
  - System
  - netstandard
  namespace: System.Net
  summary: Converts a short value from network byte order to host byte order.
  remarks: "Different computers use different conventions for ordering the bytes within multibyte integer values. Some computers put the most significant byte first (known as big-endian order) and others put the least-significant byte first (known as little-endian order). To work with computers that use different byte ordering, all integer values that are sent over the network are sent in network byte order which has the most significant byte first.  \n  \n The <xref:System.Net.IPAddress.NetworkToHostOrder%2A> method converts multibyte integer values that are stored on the host system from the byte order used by the network to the byte order used by the host."
  example:
  - "The following example uses the <xref:System.Net.IPAddress.NetworkToHostOrder%2A> method to convert a short value from network byte order to host byte order.  \n  \n [!code-cpp[IPAddress_NetworkToHost#1](~/samples/snippets/cpp/VS_Snippets_Remoting/IPAddress_NetworkToHost/CPP/ipaddress_networktohost.cpp#1)]\n [!code-csharp[IPAddress_NetworkToHost#1](~/samples/snippets/csharp/VS_Snippets_Remoting/IPAddress_NetworkToHost/CS/ipaddress_networktohost.cs#1)]\n [!code-vb[IPAddress_NetworkToHost#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/IPAddress_NetworkToHost/VB/ipaddress_networktohost.vb#1)]"
  syntax:
    content: public static short NetworkToHostOrder (short network);
    parameters:
    - id: network
      type: System.Int16
      description: The number to convert, expressed in network byte order.
    return:
      type: System.Int16
      description: A short value, expressed in host byte order.
  overload: System.Net.IPAddress.NetworkToHostOrder*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/IPAddress.xml
  ms.author: bobdel
  manager: markl
- uid: System.Net.IPAddress.NetworkToHostOrder(System.Int32)
  commentId: M:System.Net.IPAddress.NetworkToHostOrder(System.Int32)
  id: NetworkToHostOrder(System.Int32)
  parent: System.Net.IPAddress
  langs:
  - csharp
  name: NetworkToHostOrder(Int32)
  nameWithType: IPAddress.NetworkToHostOrder(Int32)
  fullName: IPAddress.NetworkToHostOrder(Int32)
  type: Method
  assemblies:
  - System.Net.Primitives
  - System
  - netstandard
  namespace: System.Net
  summary: Converts an integer value from network byte order to host byte order.
  remarks: "Different computers use different conventions for ordering the bytes within multibyte integer values. Some computers put the most significant byte first (known as big-endian order) and others put the least-significant byte first (known as little-endian order). To work with computers that use different byte ordering, all integer values that are sent over the network are sent in network byte order which has the most significant byte first.  \n  \n The <xref:System.Net.IPAddress.NetworkToHostOrder%2A> method converts multibyte integer values that are stored on the host system from the byte order used by the network to the byte order used by the host."
  example:
  - "The following example uses the <xref:System.Net.IPAddress.NetworkToHostOrder%2A> method to convert an integer value from network byte order to host byte order.  \n  \n [!code-cpp[IPAddress_NetworkToHost#2](~/samples/snippets/cpp/VS_Snippets_Remoting/IPAddress_NetworkToHost/CPP/ipaddress_networktohost.cpp#2)]\n [!code-csharp[IPAddress_NetworkToHost#2](~/samples/snippets/csharp/VS_Snippets_Remoting/IPAddress_NetworkToHost/CS/ipaddress_networktohost.cs#2)]\n [!code-vb[IPAddress_NetworkToHost#2](~/samples/snippets/visualbasic/VS_Snippets_Remoting/IPAddress_NetworkToHost/VB/ipaddress_networktohost.vb#2)]"
  syntax:
    content: public static int NetworkToHostOrder (int network);
    parameters:
    - id: network
      type: System.Int32
      description: The number to convert, expressed in network byte order.
    return:
      type: System.Int32
      description: An integer value, expressed in host byte order.
  overload: System.Net.IPAddress.NetworkToHostOrder*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/IPAddress.xml
  ms.author: bobdel
  manager: markl
- uid: System.Net.IPAddress.NetworkToHostOrder(System.Int64)
  commentId: M:System.Net.IPAddress.NetworkToHostOrder(System.Int64)
  id: NetworkToHostOrder(System.Int64)
  parent: System.Net.IPAddress
  langs:
  - csharp
  name: NetworkToHostOrder(Int64)
  nameWithType: IPAddress.NetworkToHostOrder(Int64)
  fullName: IPAddress.NetworkToHostOrder(Int64)
  type: Method
  assemblies:
  - System.Net.Primitives
  - System
  - netstandard
  namespace: System.Net
  summary: Converts a long value from network byte order to host byte order.
  remarks: "Different computers use different conventions for ordering the bytes within multibyte integer values. Some computers put the most significant byte first (known as big-endian order) and others put the least-significant byte first (known as little-endian order). To work with computers that use different byte ordering, all integer values that are sent over the network are sent in network byte order which has the most significant byte first.  \n  \n The <xref:System.Net.IPAddress.NetworkToHostOrder%2A> method converts multibyte integer values that are stored on the host system from the byte order used by the network to the byte order used by the host."
  example:
  - "The following example uses the <xref:System.Net.IPAddress.NetworkToHostOrder%2A> method to convert a long value from network byte order to host byte order.  \n  \n [!code-cpp[IPAddress_NetworkToHost#3](~/samples/snippets/cpp/VS_Snippets_Remoting/IPAddress_NetworkToHost/CPP/ipaddress_networktohost.cpp#3)]\n [!code-csharp[IPAddress_NetworkToHost#3](~/samples/snippets/csharp/VS_Snippets_Remoting/IPAddress_NetworkToHost/CS/ipaddress_networktohost.cs#3)]\n [!code-vb[IPAddress_NetworkToHost#3](~/samples/snippets/visualbasic/VS_Snippets_Remoting/IPAddress_NetworkToHost/VB/ipaddress_networktohost.vb#3)]"
  syntax:
    content: public static long NetworkToHostOrder (long network);
    parameters:
    - id: network
      type: System.Int64
      description: The number to convert, expressed in network byte order.
    return:
      type: System.Int64
      description: A long value, expressed in host byte order.
  overload: System.Net.IPAddress.NetworkToHostOrder*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/IPAddress.xml
  ms.author: bobdel
  manager: markl
- uid: System.Net.IPAddress.None
  commentId: F:System.Net.IPAddress.None
  id: None
  parent: System.Net.IPAddress
  langs:
  - csharp
  name: None
  nameWithType: IPAddress.None
  fullName: IPAddress.None
  type: Field
  assemblies:
  - System.Net.Primitives
  - System
  - netstandard
  namespace: System.Net
  summary: Provides an IP address that indicates that no network interface should be used. This field is read-only.
  remarks: The <xref:System.Net.Sockets.Socket.Bind%2A?displayProperty=fullName> method uses the <xref:System.Net.IPAddress.None> field to indicate that a <xref:System.Net.Sockets.Socket> must not listen for client activity. The <xref:System.Net.IPAddress.None> field is equivalent to 255.255.255.255 in dotted-quad notation.
  example:
  - "The following example uses the <xref:System.Net.IPAddress.None> property to indicate that no network interface should be used.  \n  \n [!code-cpp[IPAddress_None#1](~/samples/snippets/cpp/VS_Snippets_Remoting/IPAddress_None/CPP/ipaddress_none.cpp#1)]\n [!code-csharp[IPAddress_None#1](~/samples/snippets/csharp/VS_Snippets_Remoting/IPAddress_None/CS/ipaddress_none.cs#1)]\n [!code-vb[IPAddress_None#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/IPAddress_None/VB/ipaddress_none.vb#1)]"
  syntax:
    content: public static readonly System.Net.IPAddress None;
    return:
      type: System.Net.IPAddress
      description: ''
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/IPAddress.xml
  ms.author: bobdel
  manager: markl
- uid: System.Net.IPAddress.Parse(System.String)
  commentId: M:System.Net.IPAddress.Parse(System.String)
  id: Parse(System.String)
  parent: System.Net.IPAddress
  langs:
  - csharp
  name: Parse(String)
  nameWithType: IPAddress.Parse(String)
  fullName: IPAddress.Parse(String)
  type: Method
  assemblies:
  - System.Net.Primitives
  - System
  - netstandard
  namespace: System.Net
  summary: Converts an IP address string to an <xref href="System.Net.IPAddress"></xref> instance.
  remarks: "The static <xref:System.Net.IPAddress.Parse%2A> method creates an <xref:System.Net.IPAddress> instance from an IP address expressed in dotted-quad notation for IPv4 and in colon-hexadecimal notation for IPv6.  \n  \n The number of parts (each part is separated by a period) in `ipString` determines how the IP address is constructed. A one part address is stored directly in the network address. A two part address, convenient for specifying a class A address, puts the leading part in the first byte and the trailing part in the right-most three bytes of the network address. A three part address, convenient for specifying a class B address, puts the first part in the first byte, the second part in the second byte, and the final part in the right-most two bytes of the network address. For example:  \n  \n|Number of parts and example `ipString`|IPv4 address for IPAddress|  \n|--------------------------------------------|--------------------------------|  \n|1 -- \"65535\"|0.0.255.255|  \n|2 -- \"20.2\"|20.0.0.2|  \n|2 -- \"20.65535\"|20.0.255.255|  \n|3 -- \"128.1.2\"|128.1.0.2|"
  example:
  - "The following code converts a string that contains an IP address, in dotted-quad notation for IPv4 or in colon-hexadecimal notation for IPv6, into an instance of the <xref:System.Net.IPAddress> class. Then it uses the overloaded <xref:System.Net.IPAddress.ToString%2A> method to display the address in standard notation.  \n  \n [!code-cpp[System.Net.IPAddress.Parse#1](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.IPAddress.Parse/CPP/parse.cpp#1)]\n [!code-csharp[System.Net.IPAddress.Parse#1](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.IPAddress.Parse/CS/parse.cs#1)]\n [!code-vb[System.Net.IPAddress.Parse#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/System.Net.IPAddress.Parse/VB/parse.vb#1)]"
  syntax:
    content: public static System.Net.IPAddress Parse (string ipString);
    parameters:
    - id: ipString
      type: System.String
      description: A string that contains an IP address in dotted-quad notation for IPv4 and in colon-hexadecimal notation for IPv6.
    return:
      type: System.Net.IPAddress
      description: An <xref href="System.Net.IPAddress"></xref> instance.
  overload: System.Net.IPAddress.Parse*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>ipString</code> is `null`.
  - type: System.FormatException
    commentId: T:System.FormatException
    description: <code>ipString</code> is not a valid IP address.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/IPAddress.xml
  ms.author: bobdel
  manager: markl
- uid: System.Net.IPAddress.ScopeId
  commentId: P:System.Net.IPAddress.ScopeId
  id: ScopeId
  parent: System.Net.IPAddress
  langs:
  - csharp
  name: ScopeId
  nameWithType: IPAddress.ScopeId
  fullName: IPAddress.ScopeId
  type: Property
  assemblies:
  - System.Net.Primitives
  - System
  - netstandard
  namespace: System.Net
  summary: Gets or sets the IPv6 address scope identifier.
  remarks: "The meaning of <xref:System.Net.IPAddress.ScopeId%2A> changes depending on the context in which it is used.  \n  \n-   Link-local address. On a host with multiple interfaces connected to separate links, the same link-local address can be assigned to multiple interfaces. To eliminate this ambiguity, a scope identifier is used to specify the interface over which messages are exchanged.  \n  \n> [!NOTE]\n>  Link-local addresses, identified by the Format Prefix (FP) FE80, are used by nodes when communicating with neighboring nodes on the same link.  \n  \n-   Site-local addresses. A host can be connected to multiple sites. In this case, a scope identifier is used to indicate a specific site to communicate with.  \n  \n> [!NOTE]\n>  Site-local addresses, identified by the Format Prefix (FP) FEC0, are used by nodes when communicating on private intranets.  \n  \n The notation that is used to specify the `ScopeId` with an address is `Address%ScopeId`. For example, `FE80::5EFE:192.168.41.30%2.`"
  example:
  - >-
    [!code-cpp[System.Net.IPAddress#3](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.IPAddress/CPP/ipaddress.cpp#3)]
     [!code-csharp[System.Net.IPAddress#3](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.IPAddress/CS/ipaddress.cs#3)]
     [!code-vb[System.Net.IPAddress#3](~/samples/snippets/visualbasic/VS_Snippets_Remoting/System.Net.IPAddress/VB/ipaddress.vb#3)]
  syntax:
    content: public long ScopeId { get; set; }
    return:
      type: System.Int64
      description: A long integer that specifies the scope of the address.
  overload: System.Net.IPAddress.ScopeId*
  exceptions:
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: '`AddressFamily` = `InterNetwork`.'
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>scopeId</code> < 0  \n  \n \\- or -  \n  \n-   <code>scopeId</code> > 0x00000000FFFFFFFF"
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/IPAddress.xml
  ms.author: bobdel
  manager: markl
- uid: System.Net.IPAddress.ToString
  commentId: M:System.Net.IPAddress.ToString
  id: ToString
  parent: System.Net.IPAddress
  langs:
  - csharp
  name: ToString()
  nameWithType: IPAddress.ToString()
  fullName: IPAddress.ToString()
  type: Method
  assemblies:
  - System.Net.Primitives
  - System
  - netstandard
  namespace: System.Net
  summary: Converts an Internet address to its standard notation.
  remarks: The <xref:System.Net.IPAddress.ToString%2A> method converts the IP address that is stored in the <xref:System.Net.IPAddress.Address%2A> property to either IPv4 dotted-quad or IPv6 colon-hexadecimal notation.
  syntax:
    content: public override string ToString ();
    parameters: []
    return:
      type: System.String
      description: A string that contains the IP address in either IPv4 dotted-quad or in IPv6 colon-hexadecimal notation.
  overload: System.Net.IPAddress.ToString*
  exceptions:
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: The address family is <xref href="System.Net.Sockets.AddressFamily.InterNetworkV6"></xref> and the address is bad.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/IPAddress.xml
  ms.author: bobdel
  manager: markl
- uid: System.Net.IPAddress.TryParse(System.String,System.Net.IPAddress@)
  commentId: M:System.Net.IPAddress.TryParse(System.String,System.Net.IPAddress@)
  id: TryParse(System.String,System.Net.IPAddress@)
  parent: System.Net.IPAddress
  langs:
  - csharp
  name: TryParse(String, IPAddress)
  nameWithType: IPAddress.TryParse(String, IPAddress)
  fullName: IPAddress.TryParse(String, IPAddress)
  type: Method
  assemblies:
  - System.Net.Primitives
  - System
  - netstandard
  namespace: System.Net
  summary: Determines whether a string is a valid IP address.
  remarks: Note that this method accepts as valid an ipString value that can be parsed as an <xref:System.Int64>, and then treats that Int64 as the long value of an IP address in network byte order, similar to the way that the <xref:System.Net.IPAddress.%23ctor%2A> constructor does. This means that this method returns true if the Int64 is parsed successfully, even if it represents an address that's not a valid IP address. For example, if ipString is "1", this method returns true even though "1" (or 0.0.0.1) is not a valid IP address and you might expect this method to return false. Fixing this bug would break existing apps, so the current behavior will not be changed. Your code can avoid this behavior by ensuring that it only uses this method to parse IP addresses in dotted-decimal format.
  syntax:
    content: public static bool TryParse (string ipString, out System.Net.IPAddress address);
    parameters:
    - id: ipString
      type: System.String
      description: The string to validate.
    - id: address
      type: System.Net.IPAddress
      description: The <xref href="System.Net.IPAddress"></xref> version of the string.
    return:
      type: System.Boolean
      description: '`true` if <code>ipString</code> was able to be parsed as an IP address; otherwise, `false`.'
  overload: System.Net.IPAddress.TryParse*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/IPAddress.xml
  ms.author: bobdel
  manager: markl
references:
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.ArgumentNullException
  parent: System
  isExternal: false
  name: ArgumentNullException
  nameWithType: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: System.ArgumentException
  parent: System
  isExternal: false
  name: ArgumentException
  nameWithType: ArgumentException
  fullName: System.ArgumentException
- uid: System.ArgumentOutOfRangeException
  parent: System
  isExternal: false
  name: ArgumentOutOfRangeException
  nameWithType: ArgumentOutOfRangeException
  fullName: System.ArgumentOutOfRangeException
- uid: System.Net.Sockets.SocketException
  parent: System.Net.Sockets
  isExternal: false
  name: SocketException
  nameWithType: SocketException
  fullName: System.Net.Sockets.SocketException
- uid: System.FormatException
  parent: System
  isExternal: false
  name: FormatException
  nameWithType: FormatException
  fullName: System.FormatException
- uid: System.Net.IPAddress.#ctor(System.Byte[])
  parent: System.Net.IPAddress
  isExternal: false
  name: IPAddress(Byte[])
  nameWithType: IPAddress.IPAddress(Byte[])
  fullName: IPAddress.IPAddress(Byte[])
- uid: System.Byte
  name: Byte
  nameWithType: Byte
  fullName: System.Byte
- uid: System.Byte[]
  parent: System
  isExternal: false
  name: Byte[]
  nameWithType: Byte[]
  fullName: System.Byte[]
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Net.IPAddress.#ctor(System.Int64)
  parent: System.Net.IPAddress
  isExternal: false
  name: IPAddress(Int64)
  nameWithType: IPAddress.IPAddress(Int64)
  fullName: IPAddress.IPAddress(Int64)
- uid: System.Int64
  parent: System
  isExternal: false
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: System.Net.IPAddress.#ctor(System.Byte[],System.Int64)
  parent: System.Net.IPAddress
  isExternal: false
  name: IPAddress(Byte[], Int64)
  nameWithType: IPAddress.IPAddress(Byte[], Int64)
  fullName: IPAddress.IPAddress(Byte[], Int64)
- uid: System.Net.IPAddress.Address
  parent: System.Net.IPAddress
  isExternal: false
  name: Address
  nameWithType: IPAddress.Address
  fullName: IPAddress.Address
- uid: System.Net.IPAddress.AddressFamily
  parent: System.Net.IPAddress
  isExternal: false
  name: AddressFamily
  nameWithType: IPAddress.AddressFamily
  fullName: IPAddress.AddressFamily
- uid: System.Net.Sockets.AddressFamily
  parent: System.Net.Sockets
  isExternal: false
  name: AddressFamily
  nameWithType: AddressFamily
  fullName: System.Net.Sockets.AddressFamily
- uid: System.Net.IPAddress.Any
  parent: System.Net.IPAddress
  isExternal: false
  name: Any
  nameWithType: IPAddress.Any
  fullName: IPAddress.Any
- uid: System.Net.IPAddress
  parent: System.Net
  isExternal: false
  name: IPAddress
  nameWithType: IPAddress
  fullName: System.Net.IPAddress
- uid: System.Net.IPAddress.Broadcast
  parent: System.Net.IPAddress
  isExternal: false
  name: Broadcast
  nameWithType: IPAddress.Broadcast
  fullName: IPAddress.Broadcast
- uid: System.Net.IPAddress.Equals(System.Object)
  parent: System.Net.IPAddress
  isExternal: false
  name: Equals(Object)
  nameWithType: IPAddress.Equals(Object)
  fullName: IPAddress.Equals(Object)
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Net.IPAddress.GetAddressBytes
  parent: System.Net.IPAddress
  isExternal: false
  name: GetAddressBytes()
  nameWithType: IPAddress.GetAddressBytes()
  fullName: IPAddress.GetAddressBytes()
- uid: System.Net.IPAddress.GetHashCode
  parent: System.Net.IPAddress
  isExternal: false
  name: GetHashCode()
  nameWithType: IPAddress.GetHashCode()
  fullName: IPAddress.GetHashCode()
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Net.IPAddress.HostToNetworkOrder(System.Int16)
  parent: System.Net.IPAddress
  isExternal: false
  name: HostToNetworkOrder(Int16)
  nameWithType: IPAddress.HostToNetworkOrder(Int16)
  fullName: IPAddress.HostToNetworkOrder(Int16)
- uid: System.Int16
  parent: System
  isExternal: false
  name: Int16
  nameWithType: Int16
  fullName: System.Int16
- uid: System.Net.IPAddress.HostToNetworkOrder(System.Int32)
  parent: System.Net.IPAddress
  isExternal: false
  name: HostToNetworkOrder(Int32)
  nameWithType: IPAddress.HostToNetworkOrder(Int32)
  fullName: IPAddress.HostToNetworkOrder(Int32)
- uid: System.Net.IPAddress.HostToNetworkOrder(System.Int64)
  parent: System.Net.IPAddress
  isExternal: false
  name: HostToNetworkOrder(Int64)
  nameWithType: IPAddress.HostToNetworkOrder(Int64)
  fullName: IPAddress.HostToNetworkOrder(Int64)
- uid: System.Net.IPAddress.IPv6Any
  parent: System.Net.IPAddress
  isExternal: false
  name: IPv6Any
  nameWithType: IPAddress.IPv6Any
  fullName: IPAddress.IPv6Any
- uid: System.Net.IPAddress.IPv6Loopback
  parent: System.Net.IPAddress
  isExternal: false
  name: IPv6Loopback
  nameWithType: IPAddress.IPv6Loopback
  fullName: IPAddress.IPv6Loopback
- uid: System.Net.IPAddress.IPv6None
  parent: System.Net.IPAddress
  isExternal: false
  name: IPv6None
  nameWithType: IPAddress.IPv6None
  fullName: IPAddress.IPv6None
- uid: System.Net.IPAddress.IsIPv4MappedToIPv6
  parent: System.Net.IPAddress
  isExternal: false
  name: IsIPv4MappedToIPv6
  nameWithType: IPAddress.IsIPv4MappedToIPv6
  fullName: IPAddress.IsIPv4MappedToIPv6
- uid: System.Net.IPAddress.IsIPv6LinkLocal
  parent: System.Net.IPAddress
  isExternal: false
  name: IsIPv6LinkLocal
  nameWithType: IPAddress.IsIPv6LinkLocal
  fullName: IPAddress.IsIPv6LinkLocal
- uid: System.Net.IPAddress.IsIPv6Multicast
  parent: System.Net.IPAddress
  isExternal: false
  name: IsIPv6Multicast
  nameWithType: IPAddress.IsIPv6Multicast
  fullName: IPAddress.IsIPv6Multicast
- uid: System.Net.IPAddress.IsIPv6SiteLocal
  parent: System.Net.IPAddress
  isExternal: false
  name: IsIPv6SiteLocal
  nameWithType: IPAddress.IsIPv6SiteLocal
  fullName: IPAddress.IsIPv6SiteLocal
- uid: System.Net.IPAddress.IsIPv6Teredo
  parent: System.Net.IPAddress
  isExternal: false
  name: IsIPv6Teredo
  nameWithType: IPAddress.IsIPv6Teredo
  fullName: IPAddress.IsIPv6Teredo
- uid: System.Net.IPAddress.IsLoopback(System.Net.IPAddress)
  parent: System.Net.IPAddress
  isExternal: false
  name: IsLoopback(IPAddress)
  nameWithType: IPAddress.IsLoopback(IPAddress)
  fullName: IPAddress.IsLoopback(IPAddress)
- uid: System.Net.IPAddress.Loopback
  parent: System.Net.IPAddress
  isExternal: false
  name: Loopback
  nameWithType: IPAddress.Loopback
  fullName: IPAddress.Loopback
- uid: System.Net.IPAddress.MapToIPv4
  parent: System.Net.IPAddress
  isExternal: false
  name: MapToIPv4()
  nameWithType: IPAddress.MapToIPv4()
  fullName: IPAddress.MapToIPv4()
- uid: System.Net.IPAddress.MapToIPv6
  parent: System.Net.IPAddress
  isExternal: false
  name: MapToIPv6()
  nameWithType: IPAddress.MapToIPv6()
  fullName: IPAddress.MapToIPv6()
- uid: System.Net.IPAddress.NetworkToHostOrder(System.Int16)
  parent: System.Net.IPAddress
  isExternal: false
  name: NetworkToHostOrder(Int16)
  nameWithType: IPAddress.NetworkToHostOrder(Int16)
  fullName: IPAddress.NetworkToHostOrder(Int16)
- uid: System.Net.IPAddress.NetworkToHostOrder(System.Int32)
  parent: System.Net.IPAddress
  isExternal: false
  name: NetworkToHostOrder(Int32)
  nameWithType: IPAddress.NetworkToHostOrder(Int32)
  fullName: IPAddress.NetworkToHostOrder(Int32)
- uid: System.Net.IPAddress.NetworkToHostOrder(System.Int64)
  parent: System.Net.IPAddress
  isExternal: false
  name: NetworkToHostOrder(Int64)
  nameWithType: IPAddress.NetworkToHostOrder(Int64)
  fullName: IPAddress.NetworkToHostOrder(Int64)
- uid: System.Net.IPAddress.None
  parent: System.Net.IPAddress
  isExternal: false
  name: None
  nameWithType: IPAddress.None
  fullName: IPAddress.None
- uid: System.Net.IPAddress.Parse(System.String)
  parent: System.Net.IPAddress
  isExternal: false
  name: Parse(String)
  nameWithType: IPAddress.Parse(String)
  fullName: IPAddress.Parse(String)
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Net.IPAddress.ScopeId
  parent: System.Net.IPAddress
  isExternal: false
  name: ScopeId
  nameWithType: IPAddress.ScopeId
  fullName: IPAddress.ScopeId
- uid: System.Net.IPAddress.ToString
  parent: System.Net.IPAddress
  isExternal: false
  name: ToString()
  nameWithType: IPAddress.ToString()
  fullName: IPAddress.ToString()
- uid: System.Net.IPAddress.TryParse(System.String,System.Net.IPAddress@)
  parent: System.Net.IPAddress
  isExternal: false
  name: TryParse(String, IPAddress)
  nameWithType: IPAddress.TryParse(String, IPAddress)
  fullName: IPAddress.TryParse(String, IPAddress)
- uid: System.Net.IPAddress.#ctor*
  parent: System.Net.IPAddress
  isExternal: false
  name: IPAddress
  nameWithType: IPAddress.IPAddress
  fullName: IPAddress.IPAddress
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/IPAddress.xml
- uid: System.Net.IPAddress.Address*
  parent: System.Net.IPAddress
  isExternal: false
  name: Address
  nameWithType: IPAddress.Address
  fullName: IPAddress.Address
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/IPAddress.xml
- uid: System.Net.IPAddress.AddressFamily*
  parent: System.Net.IPAddress
  isExternal: false
  name: AddressFamily
  nameWithType: IPAddress.AddressFamily
  fullName: IPAddress.AddressFamily
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/IPAddress.xml
- uid: System.Net.IPAddress.Equals*
  parent: System.Net.IPAddress
  isExternal: false
  name: Equals
  nameWithType: IPAddress.Equals
  fullName: IPAddress.Equals
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/IPAddress.xml
- uid: System.Net.IPAddress.GetAddressBytes*
  parent: System.Net.IPAddress
  isExternal: false
  name: GetAddressBytes
  nameWithType: IPAddress.GetAddressBytes
  fullName: IPAddress.GetAddressBytes
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/IPAddress.xml
- uid: System.Net.IPAddress.GetHashCode*
  parent: System.Net.IPAddress
  isExternal: false
  name: GetHashCode
  nameWithType: IPAddress.GetHashCode
  fullName: IPAddress.GetHashCode
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/IPAddress.xml
- uid: System.Net.IPAddress.HostToNetworkOrder*
  parent: System.Net.IPAddress
  isExternal: false
  name: HostToNetworkOrder
  nameWithType: IPAddress.HostToNetworkOrder
  fullName: IPAddress.HostToNetworkOrder
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/IPAddress.xml
- uid: System.Net.IPAddress.IsIPv4MappedToIPv6*
  parent: System.Net.IPAddress
  isExternal: false
  name: IsIPv4MappedToIPv6
  nameWithType: IPAddress.IsIPv4MappedToIPv6
  fullName: IPAddress.IsIPv4MappedToIPv6
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/IPAddress.xml
- uid: System.Net.IPAddress.IsIPv6LinkLocal*
  parent: System.Net.IPAddress
  isExternal: false
  name: IsIPv6LinkLocal
  nameWithType: IPAddress.IsIPv6LinkLocal
  fullName: IPAddress.IsIPv6LinkLocal
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/IPAddress.xml
- uid: System.Net.IPAddress.IsIPv6Multicast*
  parent: System.Net.IPAddress
  isExternal: false
  name: IsIPv6Multicast
  nameWithType: IPAddress.IsIPv6Multicast
  fullName: IPAddress.IsIPv6Multicast
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/IPAddress.xml
- uid: System.Net.IPAddress.IsIPv6SiteLocal*
  parent: System.Net.IPAddress
  isExternal: false
  name: IsIPv6SiteLocal
  nameWithType: IPAddress.IsIPv6SiteLocal
  fullName: IPAddress.IsIPv6SiteLocal
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/IPAddress.xml
- uid: System.Net.IPAddress.IsIPv6Teredo*
  parent: System.Net.IPAddress
  isExternal: false
  name: IsIPv6Teredo
  nameWithType: IPAddress.IsIPv6Teredo
  fullName: IPAddress.IsIPv6Teredo
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/IPAddress.xml
- uid: System.Net.IPAddress.IsLoopback*
  parent: System.Net.IPAddress
  isExternal: false
  name: IsLoopback
  nameWithType: IPAddress.IsLoopback
  fullName: IPAddress.IsLoopback
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/IPAddress.xml
- uid: System.Net.IPAddress.MapToIPv4*
  parent: System.Net.IPAddress
  isExternal: false
  name: MapToIPv4
  nameWithType: IPAddress.MapToIPv4
  fullName: IPAddress.MapToIPv4
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/IPAddress.xml
- uid: System.Net.IPAddress.MapToIPv6*
  parent: System.Net.IPAddress
  isExternal: false
  name: MapToIPv6
  nameWithType: IPAddress.MapToIPv6
  fullName: IPAddress.MapToIPv6
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/IPAddress.xml
- uid: System.Net.IPAddress.NetworkToHostOrder*
  parent: System.Net.IPAddress
  isExternal: false
  name: NetworkToHostOrder
  nameWithType: IPAddress.NetworkToHostOrder
  fullName: IPAddress.NetworkToHostOrder
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/IPAddress.xml
- uid: System.Net.IPAddress.Parse*
  parent: System.Net.IPAddress
  isExternal: false
  name: Parse
  nameWithType: IPAddress.Parse
  fullName: IPAddress.Parse
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/IPAddress.xml
- uid: System.Net.IPAddress.ScopeId*
  parent: System.Net.IPAddress
  isExternal: false
  name: ScopeId
  nameWithType: IPAddress.ScopeId
  fullName: IPAddress.ScopeId
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/IPAddress.xml
- uid: System.Net.IPAddress.ToString*
  parent: System.Net.IPAddress
  isExternal: false
  name: ToString
  nameWithType: IPAddress.ToString
  fullName: IPAddress.ToString
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/IPAddress.xml
- uid: System.Net.IPAddress.TryParse*
  parent: System.Net.IPAddress
  isExternal: false
  name: TryParse
  nameWithType: IPAddress.TryParse
  fullName: IPAddress.TryParse
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/IPAddress.xml
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: false
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: Object.Equals(Object, Object)
- uid: System.Object.GetType
  parent: System.Object
  isExternal: false
  name: GetType()
  nameWithType: Object.GetType()
  fullName: Object.GetType()
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: false
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: Object.MemberwiseClone()
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: false
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: Object.ReferenceEquals(Object, Object)
