{"nodes":[{"content":"Provides various static methods for configuring the remoting infrastructure.","nodes":[{"pos":[0,76],"content":"Provides various static methods for configuring the remoting infrastructure.","nodes":[{"content":"Provides various static methods for configuring the remoting infrastructure.","pos":[0,76]}]}],"pos":[2710,2787],"yaml":true},{"content":"Gets the ID of the currently executing application.","nodes":[{"pos":[0,51],"content":"Gets the ID of the currently executing application.","nodes":[{"content":"Gets the ID of the currently executing application.","pos":[0,51]}]}],"pos":[4417,4469],"yaml":true},{"content":"The application ID is prepended to the URI of the objects created by the currently executing application.","nodes":[{"pos":[0,105],"content":"The application ID is prepended to the URI of the objects created by the currently executing application.","nodes":[{"content":"The application ID is prepended to the URI of the objects created by the currently executing application.","pos":[0,105]}]}],"pos":[4480,4586],"yaml":true,"extradata":"MT"},{"content":"A <xref href=\"System.String\"></xref> that contains the ID of the currently executing application.","nodes":[{"pos":[0,97],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.String\"&gt;&lt;/xref&gt;</ph> that contains the ID of the currently executing application.","source":"A <xref href=\"System.String\"></xref> that contains the ID of the currently executing application."}],"pos":[4710,4808],"yaml":true},{"content":"The immediate caller does not have infrastructure permission.","nodes":[{"pos":[0,61],"content":"The immediate caller does not have infrastructure permission.","nodes":[{"content":"The immediate caller does not have infrastructure permission.","pos":[0,61]}]}],"pos":[5007,5069],"yaml":true},{"content":"Gets or sets the name of a remoting application.","nodes":[{"pos":[0,48],"content":"Gets or sets the name of a remoting application.","nodes":[{"content":"Gets or sets the name of a remoting application.","pos":[0,48]}]}],"pos":[6161,6210],"yaml":true},{"content":"An application name can be set only once, either through the current property or through a configuration file. If an application is running inside a hosted environment, such as Internet Information Services (IIS), this value might have already been set (usually to the virtual directory). The current property will return `null` if the application name has not been set.","nodes":[{"pos":[0,370],"content":"An application name can be set only once, either through the current property or through a configuration file. If an application is running inside a hosted environment, such as Internet Information Services (IIS), this value might have already been set (usually to the virtual directory). The current property will return `null` if the application name has not been set.","nodes":[{"content":"An application name can be set only once, either through the current property or through a configuration file.","pos":[0,110]},{"content":"If an application is running inside a hosted environment, such as Internet Information Services (IIS), this value might have already been set (usually to the virtual directory).","pos":[111,288]},{"content":"The current property will return <ph id=\"ph1\">`null`</ph> if the application name has not been set.","pos":[289,370],"source":" The current property will return `null` if the application name has not been set."}]}],"pos":[6221,6592],"yaml":true,"extradata":"MT"},{"content":"The name of a remoting application.","nodes":[{"pos":[0,35],"content":"The name of a remoting application.","nodes":[{"content":"The name of a remoting application.","pos":[0,35]}]}],"pos":[8246,8282],"yaml":true},{"content":"At least one of the callers higher in the callstack does not have permission to configure remoting types and channels. This exception is thrown only when setting the property value.","nodes":[{"pos":[0,181],"content":"At least one of the callers higher in the callstack does not have permission to configure remoting types and channels. This exception is thrown only when setting the property value.","nodes":[{"content":"At least one of the callers higher in the callstack does not have permission to configure remoting types and channels. This exception is thrown only when setting the property value.","pos":[0,181],"nodes":[{"content":"At least one of the callers higher in the callstack does not have permission to configure remoting types and channels.","pos":[0,118]},{"content":"This exception is thrown only when setting the property value.","pos":[119,181]}]}]}],"pos":[8483,8665],"yaml":true},{"content":"Reads the configuration file and configures the remoting infrastructure. <xref href=\"System.Runtime.Remoting.RemotingConfiguration.Configure(System.String)\"></xref> is obsolete. Please use <xref href=\"System.Runtime.Remoting.RemotingConfiguration.Configure(System.String,System.Boolean)\"></xref> instead.","nodes":[{"pos":[0,304],"content":"Reads the configuration file and configures the remoting infrastructure. <xref href=\"System.Runtime.Remoting.RemotingConfiguration.Configure(System.String)\"></xref> is obsolete. Please use <xref href=\"System.Runtime.Remoting.RemotingConfiguration.Configure(System.String,System.Boolean)\"></xref> instead.","nodes":[{"content":"Reads the configuration file and configures the remoting infrastructure.","pos":[0,72]},{"content":"<ph id=\"ph1\">&lt;xref href=\"System.Runtime.Remoting.RemotingConfiguration.Configure(System.String)\"&gt;&lt;/xref&gt;</ph> is obsolete.","pos":[73,177],"source":"<xref href=\"System.Runtime.Remoting.RemotingConfiguration.Configure(System.String)\"></xref> is obsolete."},{"content":"Please use <ph id=\"ph1\">&lt;xref href=\"System.Runtime.Remoting.RemotingConfiguration.Configure(System.String,System.Boolean)\"&gt;&lt;/xref&gt;</ph> instead.","pos":[178,304],"source":" Please use <xref href=\"System.Runtime.Remoting.RemotingConfiguration.Configure(System.String,System.Boolean)\"></xref> instead."}]}],"pos":[9788,10093],"yaml":true},{"content":"> [!NOTE]\n>  <xref:System.Runtime.Remoting.RemotingConfiguration.Configure%28System.String%29> is obsolete. Please use <xref:System.Runtime.Remoting.RemotingConfiguration.Configure%28System.String%2CSystem.Boolean%29> instead.  \n  \n Passing `null` as the `filename` parameter will cause default remoting initialization without requiring the existence of a configuration file.  \n  \n For configuration file syntax, see [Remoting Settings Schema](http://msdn.microsoft.com/en-us/dc2d1e62-9af7-4ca1-99fd-98b93bb4db9e).  \n  \n> [!NOTE]\n>  Marshal-by-reference objects (MBRs) do not reside in memory forever. Instead, unless the type overrides <xref:System.MarshalByRefObject.InitializeLifetimeService%2A?displayProperty=fullName> to control its own lifetime policies, each MBR has a finite lifetime before the .NET Framework remoting system begins the process of deleting it and reclaiming the memory. For more information, see [Lifetime Leases](http://msdn.microsoft.com/en-us/c72d561c-1266-4c8b-b258-2c168c08da9a).","nodes":[{"pos":[2,226],"content":"[!NOTE]\n <xref:System.Runtime.Remoting.RemotingConfiguration.Configure%28System.String%29> is obsolete. Please use <xref:System.Runtime.Remoting.RemotingConfiguration.Configure%28System.String%2CSystem.Boolean%29> instead.","leadings":["","> "],"nodes":[{"content":" <xref:System.Runtime.Remoting.RemotingConfiguration.Configure%28System.String%29> is obsolete. Please use <xref:System.Runtime.Remoting.RemotingConfiguration.Configure%28System.String%2CSystem.Boolean%29> instead.","pos":[8,222],"nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Runtime.Remoting.RemotingConfiguration.Configure%28System.String%29&gt;</ph> is obsolete.","pos":[1,95],"source":" <xref:System.Runtime.Remoting.RemotingConfiguration.Configure%28System.String%29> is obsolete."},{"content":"Please use <ph id=\"ph1\">&lt;xref:System.Runtime.Remoting.RemotingConfiguration.Configure%28System.String%2CSystem.Boolean%29&gt;</ph> instead.","pos":[96,214],"source":" Please use <xref:System.Runtime.Remoting.RemotingConfiguration.Configure%28System.String%2CSystem.Boolean%29> instead."}]}]},{"pos":[233,375],"content":"Passing <ph id=\"ph1\">`null`</ph> as the <ph id=\"ph2\">`filename`</ph> parameter will cause default remoting initialization without requiring the existence of a configuration file.","source":"Passing `null` as the `filename` parameter will cause default remoting initialization without requiring the existence of a configuration file."},{"pos":[382,514],"content":"For configuration file syntax, see <bpt id=\"p1\">[</bpt>Remoting Settings Schema<ept id=\"p1\">](http://msdn.microsoft.com/en-us/dc2d1e62-9af7-4ca1-99fd-98b93bb4db9e)</ept>.","source":"For configuration file syntax, see [Remoting Settings Schema](http://msdn.microsoft.com/en-us/dc2d1e62-9af7-4ca1-99fd-98b93bb4db9e)."},{"pos":[522,1010],"content":"[!NOTE]\n Marshal-by-reference objects (MBRs) do not reside in memory forever. Instead, unless the type overrides <xref:System.MarshalByRefObject.InitializeLifetimeService%2A?displayProperty=fullName> to control its own lifetime policies, each MBR has a finite lifetime before the .NET Framework remoting system begins the process of deleting it and reclaiming the memory. For more information, see [Lifetime Leases](http://msdn.microsoft.com/en-us/c72d561c-1266-4c8b-b258-2c168c08da9a).","leadings":["","> "],"nodes":[{"content":" Marshal-by-reference objects (MBRs) do not reside in memory forever. Instead, unless the type overrides <xref:System.MarshalByRefObject.InitializeLifetimeService%2A?displayProperty=fullName> to control its own lifetime policies, each MBR has a finite lifetime before the .NET Framework remoting system begins the process of deleting it and reclaiming the memory. For more information, see [Lifetime Leases](http://msdn.microsoft.com/en-us/c72d561c-1266-4c8b-b258-2c168c08da9a).","pos":[8,486],"nodes":[{"content":"Marshal-by-reference objects (MBRs) do not reside in memory forever.","pos":[1,69]},{"content":"Instead, unless the type overrides <ph id=\"ph1\">&lt;xref:System.MarshalByRefObject.InitializeLifetimeService%2A?displayProperty=fullName&gt;</ph> to control its own lifetime policies, each MBR has a finite lifetime before the .NET Framework remoting system begins the process of deleting it and reclaiming the memory.","pos":[70,363],"source":" Instead, unless the type overrides <xref:System.MarshalByRefObject.InitializeLifetimeService%2A?displayProperty=fullName> to control its own lifetime policies, each MBR has a finite lifetime before the .NET Framework remoting system begins the process of deleting it and reclaiming the memory."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Lifetime Leases<ept id=\"p1\">](http://msdn.microsoft.com/en-us/c72d561c-1266-4c8b-b258-2c168c08da9a)</ept>.","pos":[364,478],"source":" For more information, see [Lifetime Leases](http://msdn.microsoft.com/en-us/c72d561c-1266-4c8b-b258-2c168c08da9a)."}]}]}],"pos":[10104,11125],"yaml":true,"extradata":"MT"},{"content":"The name of the remoting configuration file. Can be `null`.","nodes":[{"pos":[0,59],"content":"The name of the remoting configuration file. Can be `null`.","nodes":[{"content":"The name of the remoting configuration file.","pos":[0,44]},{"content":"Can be <ph id=\"ph1\">`null`</ph>.","pos":[45,59],"source":" Can be `null`."}]}],"pos":[11945,12005],"yaml":true},{"content":"At least one of the callers higher in the callstack does not have permission to configure remoting types and channels.","nodes":[{"pos":[0,118],"content":"At least one of the callers higher in the callstack does not have permission to configure remoting types and channels.","nodes":[{"content":"At least one of the callers higher in the callstack does not have permission to configure remoting types and channels.","pos":[0,118]}]}],"pos":[12200,12319],"yaml":true},{"content":"Reads the configuration file and configures the remoting infrastructure.","nodes":[{"pos":[0,72],"content":"Reads the configuration file and configures the remoting infrastructure.","nodes":[{"content":"Reads the configuration file and configures the remoting infrastructure.","pos":[0,72]}]}],"pos":[13563,13636],"yaml":true},{"content":"Passing `null` as the `filename` parameter will cause default remoting initialization without requiring the existence of a configuration file. For more information about remoting and security see [Security in Remoting.](http://msdn.microsoft.com/en-us/9574262c-d4b1-41c5-8600-24ff147c0add)  \n  \n For configuration file syntax, see [Remoting Settings Schema](http://msdn.microsoft.com/en-us/dc2d1e62-9af7-4ca1-99fd-98b93bb4db9e).  \n  \n> [!NOTE]\n>  Marshal-by-reference objects (MBRs) do not reside in memory forever. Instead, unless the type overrides <xref:System.MarshalByRefObject.InitializeLifetimeService%2A?displayProperty=fullName> to control its own lifetime policies, each MBR has a finite lifetime before the .NET Framework remoting system begins the process of deleting it and reclaiming the memory. For more information, see [Lifetime Leases](http://msdn.microsoft.com/en-us/c72d561c-1266-4c8b-b258-2c168c08da9a).","nodes":[{"pos":[0,289],"content":"Passing `null` as the `filename` parameter will cause default remoting initialization without requiring the existence of a configuration file. For more information about remoting and security see [Security in Remoting.](http://msdn.microsoft.com/en-us/9574262c-d4b1-41c5-8600-24ff147c0add)","nodes":[{"content":"Passing <ph id=\"ph1\">`null`</ph> as the <ph id=\"ph2\">`filename`</ph> parameter will cause default remoting initialization without requiring the existence of a configuration file.","pos":[0,142],"source":"Passing `null` as the `filename` parameter will cause default remoting initialization without requiring the existence of a configuration file."},{"content":"For more information about remoting and security see <bpt id=\"p1\">[</bpt>Security in Remoting.<ept id=\"p1\">](http://msdn.microsoft.com/en-us/9574262c-d4b1-41c5-8600-24ff147c0add)</ept>","pos":[143,289],"source":" For more information about remoting and security see [Security in Remoting.](http://msdn.microsoft.com/en-us/9574262c-d4b1-41c5-8600-24ff147c0add)"}]},{"pos":[296,428],"content":"For configuration file syntax, see <bpt id=\"p1\">[</bpt>Remoting Settings Schema<ept id=\"p1\">](http://msdn.microsoft.com/en-us/dc2d1e62-9af7-4ca1-99fd-98b93bb4db9e)</ept>.","source":"For configuration file syntax, see [Remoting Settings Schema](http://msdn.microsoft.com/en-us/dc2d1e62-9af7-4ca1-99fd-98b93bb4db9e)."},{"pos":[436,924],"content":"[!NOTE]\n Marshal-by-reference objects (MBRs) do not reside in memory forever. Instead, unless the type overrides <xref:System.MarshalByRefObject.InitializeLifetimeService%2A?displayProperty=fullName> to control its own lifetime policies, each MBR has a finite lifetime before the .NET Framework remoting system begins the process of deleting it and reclaiming the memory. For more information, see [Lifetime Leases](http://msdn.microsoft.com/en-us/c72d561c-1266-4c8b-b258-2c168c08da9a).","leadings":["","> "],"nodes":[{"content":" Marshal-by-reference objects (MBRs) do not reside in memory forever. Instead, unless the type overrides <xref:System.MarshalByRefObject.InitializeLifetimeService%2A?displayProperty=fullName> to control its own lifetime policies, each MBR has a finite lifetime before the .NET Framework remoting system begins the process of deleting it and reclaiming the memory. For more information, see [Lifetime Leases](http://msdn.microsoft.com/en-us/c72d561c-1266-4c8b-b258-2c168c08da9a).","pos":[8,486],"nodes":[{"content":"Marshal-by-reference objects (MBRs) do not reside in memory forever.","pos":[1,69]},{"content":"Instead, unless the type overrides <ph id=\"ph1\">&lt;xref:System.MarshalByRefObject.InitializeLifetimeService%2A?displayProperty=fullName&gt;</ph> to control its own lifetime policies, each MBR has a finite lifetime before the .NET Framework remoting system begins the process of deleting it and reclaiming the memory.","pos":[70,363],"source":" Instead, unless the type overrides <xref:System.MarshalByRefObject.InitializeLifetimeService%2A?displayProperty=fullName> to control its own lifetime policies, each MBR has a finite lifetime before the .NET Framework remoting system begins the process of deleting it and reclaiming the memory."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Lifetime Leases<ept id=\"p1\">](http://msdn.microsoft.com/en-us/c72d561c-1266-4c8b-b258-2c168c08da9a)</ept>.","pos":[364,478],"source":" For more information, see [Lifetime Leases](http://msdn.microsoft.com/en-us/c72d561c-1266-4c8b-b258-2c168c08da9a)."}]}]}],"pos":[13647,14579],"yaml":true,"extradata":"MT"},{"content":"The name of the remoting configuration file. Can be `null`.","nodes":[{"pos":[0,59],"content":"The name of the remoting configuration file. Can be `null`.","nodes":[{"content":"The name of the remoting configuration file.","pos":[0,44]},{"content":"Can be <ph id=\"ph1\">`null`</ph>.","pos":[45,59],"source":" Can be `null`."}]}],"pos":[14751,14811],"yaml":true},{"content":"If set to `true` security is required. If set to `false`, security is not required but still may be used.","nodes":[{"pos":[0,105],"content":"If set to `true` security is required. If set to `false`, security is not required but still may be used.","nodes":[{"content":"If set to <ph id=\"ph1\">`true`</ph> security is required.","pos":[0,38],"source":"If set to `true` security is required."},{"content":"If set to <ph id=\"ph1\">`false`</ph>, security is not required but still may be used.","pos":[39,105],"source":" If set to `false`, security is not required but still may be used."}]}],"pos":[14882,14988],"yaml":true},{"content":"At least one of the callers higher in the callstack does not have permission to configure remoting types and channels.","nodes":[{"pos":[0,118],"content":"At least one of the callers higher in the callstack does not have permission to configure remoting types and channels.","nodes":[{"content":"At least one of the callers higher in the callstack does not have permission to configure remoting types and channels.","pos":[0,118]}]}],"pos":[15183,15302],"yaml":true},{"content":"Indicates whether the server channels in this application domain return filtered or complete exception information to local or remote callers.","nodes":[{"pos":[0,142],"content":"Indicates whether the server channels in this application domain return filtered or complete exception information to local or remote callers.","nodes":[{"content":"Indicates whether the server channels in this application domain return filtered or complete exception information to local or remote callers.","pos":[0,142]}]}],"pos":[16491,16634],"yaml":true},{"content":"Complete exception information includes the exact server exception and the server stack trace. Filtered information includes a standard remoting exception but no server stack trace.  \n  \n The `CustomErrorsEnabled` method reflects configuration settings that were specified in the `mode` attribute of the `<customErrors>` element of the application configuration file. For more information about configuration options, see [&#91;\\<topic://cpconconfiguration>&#93;](http://msdn.microsoft.com/en-us/92c0c097-d984-4315-835b-7490ecdf1097).  \n  \n The following table shows the three server channel property values that specify which callers receive exception information and what type of information they receive.  \n  \n|Value|Description|  \n|-----------|-----------------|  \n|`off`|All callers receive complete exception information.|  \n|`on`|All callers receive filtered exception information.|  \n|`remoteOnly`|Local callers receive complete exception information; remote callers receive filtered exception information.|  \n  \n The following table shows the interaction of the `isLocalRequest` parameter and the server channel property.  \n  \n|Value|isLocalRequest|Return value|Description|  \n|-----------|--------------------|------------------|-----------------|  \n|`on`|`true`|`true`|Local callers receive filtered exception information.|  \n|`on`|`false`|`true`|Remote callers receive filtered exception information.|  \n|`off`|`true`|`false`|Local callers receive complete exception information.|  \n|`off`|`false`|`false`|Remote callers receive complete exception information.|  \n|`remoteOnly`|`true`|`false`|Local callers receive complete exception information.|  \n|`remoteOnly`|`false`|`true`|Remote callers receive filtered exception information.|  \n  \n For information about using application configuration files to control the return of exception information to callers, see the `<customErrors>` element.","nodes":[{"pos":[0,181],"content":"Complete exception information includes the exact server exception and the server stack trace. Filtered information includes a standard remoting exception but no server stack trace.","nodes":[{"content":"Complete exception information includes the exact server exception and the server stack trace. Filtered information includes a standard remoting exception but no server stack trace.","pos":[0,181],"nodes":[{"content":"Complete exception information includes the exact server exception and the server stack trace.","pos":[0,94]},{"content":"Filtered information includes a standard remoting exception but no server stack trace.","pos":[95,181]}]}]},{"pos":[188,534],"content":"The `CustomErrorsEnabled` method reflects configuration settings that were specified in the `mode` attribute of the `<customErrors>` element of the application configuration file. For more information about configuration options, see [&#91;\\<topic://cpconconfiguration>&#93;](http://msdn.microsoft.com/en-us/92c0c097-d984-4315-835b-7490ecdf1097).","nodes":[{"content":"The <ph id=\"ph1\">`CustomErrorsEnabled`</ph> method reflects configuration settings that were specified in the <ph id=\"ph2\">`mode`</ph> attribute of the <ph id=\"ph3\">`&lt;customErrors&gt;`</ph> element of the application configuration file.","pos":[0,179],"source":"The `CustomErrorsEnabled` method reflects configuration settings that were specified in the `mode` attribute of the `<customErrors>` element of the application configuration file."},{"content":"For more information about configuration options, see <bpt id=\"p1\">[</bpt>&amp;#91;<ph id=\"ph1\">\\&lt;</ph>topic://cpconconfiguration&gt;&amp;#93;<ept id=\"p1\">](http://msdn.microsoft.com/en-us/92c0c097-d984-4315-835b-7490ecdf1097)</ept>.","pos":[180,346],"source":" For more information about configuration options, see [&#91;\\<topic://cpconconfiguration>&#93;](http://msdn.microsoft.com/en-us/92c0c097-d984-4315-835b-7490ecdf1097)."}]},{"pos":[541,707],"content":"The following table shows the three server channel property values that specify which callers receive exception information and what type of information they receive.","nodes":[{"content":"The following table shows the three server channel property values that specify which callers receive exception information and what type of information they receive.","pos":[0,166]}]},{"pos":[714,719],"content":"Value","nodes":[{"content":"Value","pos":[0,5]}]},{"pos":[720,731],"content":"Description","nodes":[{"content":"Description","pos":[0,11]}]},{"pos":[776,827],"content":"All callers receive complete exception information.","nodes":[{"content":"All callers receive complete exception information.","pos":[0,51]}]},{"pos":[837,888],"content":"All callers receive filtered exception information.","nodes":[{"content":"All callers receive filtered exception information.","pos":[0,51]}]},{"pos":[906,1014],"content":"Local callers receive complete exception information; remote callers receive filtered exception information.","nodes":[{"content":"Local callers receive complete exception information; remote callers receive filtered exception information.","pos":[0,108]}]},{"pos":[1022,1130],"content":"The following table shows the interaction of the <ph id=\"ph1\">`isLocalRequest`</ph> parameter and the server channel property.","source":"The following table shows the interaction of the `isLocalRequest` parameter and the server channel property."},{"pos":[1137,1142],"content":"Value","nodes":[{"content":"Value","pos":[0,5]}]},{"pos":[1143,1157],"content":"isLocalRequest","nodes":[{"content":"isLocalRequest","pos":[0,14]}]},{"pos":[1158,1170],"content":"Return value","nodes":[{"content":"Return value","pos":[0,12]}]},{"pos":[1171,1182],"content":"Description","nodes":[{"content":"Description","pos":[0,11]}]},{"pos":[1280,1333],"content":"Local callers receive filtered exception information.","nodes":[{"content":"Local callers receive filtered exception information.","pos":[0,53]}]},{"pos":[1358,1412],"content":"Remote callers receive filtered exception information.","nodes":[{"content":"Remote callers receive filtered exception information.","pos":[0,54]}]},{"pos":[1438,1491],"content":"Local callers receive complete exception information.","nodes":[{"content":"Local callers receive complete exception information.","pos":[0,53]}]},{"pos":[1518,1572],"content":"Remote callers receive complete exception information.","nodes":[{"content":"Remote callers receive complete exception information.","pos":[0,54]}]},{"pos":[1605,1658],"content":"Local callers receive complete exception information.","nodes":[{"content":"Local callers receive complete exception information.","pos":[0,53]}]},{"pos":[1691,1745],"content":"Remote callers receive filtered exception information.","nodes":[{"content":"Remote callers receive filtered exception information.","pos":[0,54]}]},{"pos":[1753,1905],"content":"For information about using application configuration files to control the return of exception information to callers, see the <ph id=\"ph1\">`&lt;customErrors&gt;`</ph> element.","source":"For information about using application configuration files to control the return of exception information to callers, see the `<customErrors>` element."}],"pos":[16645,18577],"yaml":true,"extradata":"MT"},{"content":"`true` to specify local callers; `false` to specify remote callers.","nodes":[{"pos":[0,67],"content":"<ph id=\"ph1\">`true`</ph> to specify local callers; <ph id=\"ph2\">`false`</ph> to specify remote callers.","source":"`true` to specify local callers; `false` to specify remote callers."}],"pos":[18749,18819],"yaml":true},{"content":"`true` if only filtered exception information is returned to local or remote callers, as specified by the <code>isLocalRequest</code> parameter; `false` if complete exception information is returned.","nodes":[{"pos":[0,199],"content":"<ph id=\"ph1\">`true`</ph> if only filtered exception information is returned to local or remote callers, as specified by the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">isLocalRequest</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter; <ph id=\"ph3\">`false`</ph> if complete exception information is returned.","source":"`true` if only filtered exception information is returned to local or remote callers, as specified by the <code>isLocalRequest</code> parameter; `false` if complete exception information is returned."}],"pos":[18877,19079],"yaml":true},{"content":"Gets or sets value that indicates how custom errors are handled.","nodes":[{"pos":[0,64],"content":"Gets or sets value that indicates how custom errors are handled.","nodes":[{"content":"Gets or sets value that indicates how custom errors are handled.","pos":[0,64]}]}],"pos":[20273,20338],"yaml":true},{"content":"A member of the <xref href=\"System.Runtime.Remoting.CustomErrorsModes\"></xref> enumeration that indicates how custom errors are handled.","nodes":[{"pos":[0,136],"content":"A member of the <ph id=\"ph1\">&lt;xref href=\"System.Runtime.Remoting.CustomErrorsModes\"&gt;&lt;/xref&gt;</ph> enumeration that indicates how custom errors are handled.","source":"A member of the <xref href=\"System.Runtime.Remoting.CustomErrorsModes\"></xref> enumeration that indicates how custom errors are handled."}],"pos":[20533,20670],"yaml":true},{"content":"Retrieves an array of object types registered on the client as types that will be activated remotely.","nodes":[{"pos":[0,101],"content":"Retrieves an array of object types registered on the client as types that will be activated remotely.","nodes":[{"content":"Retrieves an array of object types registered on the client as types that will be activated remotely.","pos":[0,101]}]}],"pos":[21967,22069],"yaml":true},{"content":"For a detailed description of client-activated objects, see [&#91;\\<topic://cpconClientActivation>&#93;](http://msdn.microsoft.com/en-us/4a791494-c18a-4711-a5c1-4ab0e49a8f1a).","nodes":[{"pos":[0,175],"content":"For a detailed description of client-activated objects, see <bpt id=\"p1\">[</bpt>&amp;#91;<ph id=\"ph1\">\\&lt;</ph>topic://cpconClientActivation&gt;&amp;#93;<ept id=\"p1\">](http://msdn.microsoft.com/en-us/4a791494-c18a-4711-a5c1-4ab0e49a8f1a)</ept>.","source":"For a detailed description of client-activated objects, see [&#91;\\<topic://cpconClientActivation>&#93;](http://msdn.microsoft.com/en-us/4a791494-c18a-4711-a5c1-4ab0e49a8f1a)."}],"pos":[22080,22256],"yaml":true,"extradata":"MT"},{"content":"An array of object types registered on the client as types that will be activated remotely.","nodes":[{"pos":[0,91],"content":"An array of object types registered on the client as types that will be activated remotely.","nodes":[{"content":"An array of object types registered on the client as types that will be activated remotely.","pos":[0,91]}]}],"pos":[22495,22587],"yaml":true},{"content":"At least one of the callers higher in the callstack does not have permission to configure remoting types and channels.","nodes":[{"pos":[0,118],"content":"At least one of the callers higher in the callstack does not have permission to configure remoting types and channels.","nodes":[{"content":"At least one of the callers higher in the callstack does not have permission to configure remoting types and channels.","pos":[0,118]}]}],"pos":[22806,22925],"yaml":true},{"content":"Retrieves an array of object types registered on the service end that can be activated on request from a client.","nodes":[{"pos":[0,112],"content":"Retrieves an array of object types registered on the service end that can be activated on request from a client.","nodes":[{"content":"Retrieves an array of object types registered on the service end that can be activated on request from a client.","pos":[0,112]}]}],"pos":[24135,24248],"yaml":true},{"content":"For a detailed description of client-activated objects, see [&#91;\\<topic://cpconClientActivation>&#93;](http://msdn.microsoft.com/en-us/4a791494-c18a-4711-a5c1-4ab0e49a8f1a).","nodes":[{"pos":[0,175],"content":"For a detailed description of client-activated objects, see <bpt id=\"p1\">[</bpt>&amp;#91;<ph id=\"ph1\">\\&lt;</ph>topic://cpconClientActivation&gt;&amp;#93;<ept id=\"p1\">](http://msdn.microsoft.com/en-us/4a791494-c18a-4711-a5c1-4ab0e49a8f1a)</ept>.","source":"For a detailed description of client-activated objects, see [&#91;\\<topic://cpconClientActivation>&#93;](http://msdn.microsoft.com/en-us/4a791494-c18a-4711-a5c1-4ab0e49a8f1a)."}],"pos":[24259,24435],"yaml":true,"extradata":"MT"},{"content":"An array of object types registered on the service end that can be activated on request from a client.","nodes":[{"pos":[0,102],"content":"An array of object types registered on the service end that can be activated on request from a client.","nodes":[{"content":"An array of object types registered on the service end that can be activated on request from a client.","pos":[0,102]}]}],"pos":[25453,25556],"yaml":true},{"content":"At least one of the callers higher in the callstack does not have permission to configure remoting types and channels.","nodes":[{"pos":[0,118],"content":"At least one of the callers higher in the callstack does not have permission to configure remoting types and channels.","nodes":[{"content":"At least one of the callers higher in the callstack does not have permission to configure remoting types and channels.","pos":[0,118]}]}],"pos":[25776,25895],"yaml":true},{"content":"Retrieves an array of object types registered on the client end as well-known types.","nodes":[{"pos":[0,84],"content":"Retrieves an array of object types registered on the client end as well-known types.","nodes":[{"content":"Retrieves an array of object types registered on the client end as well-known types.","pos":[0,84]}]}],"pos":[27099,27184],"yaml":true},{"content":"Well-known object types can be either single call or singleton. If an object type is single call, then a new instance of it is created each time a call from the client comes in. All calls to a singleton object are handled by one instance of that object.  \n  \n For a more detailed description of well-known objects, see [&#91;\\<topic://cpconServerActivation>&#93;](http://msdn.microsoft.com/en-us/77ded6e2-4ca8-448b-acf2-562d27fd4396).","nodes":[{"pos":[0,253],"content":"Well-known object types can be either single call or singleton. If an object type is single call, then a new instance of it is created each time a call from the client comes in. All calls to a singleton object are handled by one instance of that object.","nodes":[{"content":"Well-known object types can be either single call or singleton. If an object type is single call, then a new instance of it is created each time a call from the client comes in. All calls to a singleton object are handled by one instance of that object.","pos":[0,253],"nodes":[{"content":"Well-known object types can be either single call or singleton.","pos":[0,63]},{"content":"If an object type is single call, then a new instance of it is created each time a call from the client comes in.","pos":[64,177]},{"content":"All calls to a singleton object are handled by one instance of that object.","pos":[178,253]}]}]},{"pos":[260,434],"content":"For a more detailed description of well-known objects, see <bpt id=\"p1\">[</bpt>&amp;#91;<ph id=\"ph1\">\\&lt;</ph>topic://cpconServerActivation&gt;&amp;#93;<ept id=\"p1\">](http://msdn.microsoft.com/en-us/77ded6e2-4ca8-448b-acf2-562d27fd4396)</ept>.","source":"For a more detailed description of well-known objects, see [&#91;\\<topic://cpconServerActivation>&#93;](http://msdn.microsoft.com/en-us/77ded6e2-4ca8-448b-acf2-562d27fd4396)."}],"pos":[27195,27635],"yaml":true,"extradata":"MT"},{"content":"An array of object types registered on the client end as well-known types.","nodes":[{"pos":[0,74],"content":"An array of object types registered on the client end as well-known types.","nodes":[{"content":"An array of object types registered on the client end as well-known types.","pos":[0,74]}]}],"pos":[28647,28722],"yaml":true},{"content":"At least one of the callers higher in the callstack does not have permission to configure remoting types and channels.","nodes":[{"pos":[0,118],"content":"At least one of the callers higher in the callstack does not have permission to configure remoting types and channels.","nodes":[{"content":"At least one of the callers higher in the callstack does not have permission to configure remoting types and channels.","pos":[0,118]}]}],"pos":[28941,29060],"yaml":true},{"content":"Retrieves an array of object types registered on the service end as well-known types.","nodes":[{"pos":[0,85],"content":"Retrieves an array of object types registered on the service end as well-known types.","nodes":[{"content":"Retrieves an array of object types registered on the service end as well-known types.","pos":[0,85]}]}],"pos":[30270,30356],"yaml":true},{"content":"Well-known object types can be either single call or singleton. If an object type is single call, then a new instance of it is created each time a call from the client comes in. All calls to a singleton object are handled by one instance of that object.  \n  \n For a more detailed description of well-known objects, see [&#91;\\<topic://cpconServerActivation>&#93;](http://msdn.microsoft.com/en-us/77ded6e2-4ca8-448b-acf2-562d27fd4396).","nodes":[{"pos":[0,253],"content":"Well-known object types can be either single call or singleton. If an object type is single call, then a new instance of it is created each time a call from the client comes in. All calls to a singleton object are handled by one instance of that object.","nodes":[{"content":"Well-known object types can be either single call or singleton. If an object type is single call, then a new instance of it is created each time a call from the client comes in. All calls to a singleton object are handled by one instance of that object.","pos":[0,253],"nodes":[{"content":"Well-known object types can be either single call or singleton.","pos":[0,63]},{"content":"If an object type is single call, then a new instance of it is created each time a call from the client comes in.","pos":[64,177]},{"content":"All calls to a singleton object are handled by one instance of that object.","pos":[178,253]}]}]},{"pos":[260,434],"content":"For a more detailed description of well-known objects, see <bpt id=\"p1\">[</bpt>&amp;#91;<ph id=\"ph1\">\\&lt;</ph>topic://cpconServerActivation&gt;&amp;#93;<ept id=\"p1\">](http://msdn.microsoft.com/en-us/77ded6e2-4ca8-448b-acf2-562d27fd4396)</ept>.","source":"For a more detailed description of well-known objects, see [&#91;\\<topic://cpconServerActivation>&#93;](http://msdn.microsoft.com/en-us/77ded6e2-4ca8-448b-acf2-562d27fd4396)."}],"pos":[30367,30807],"yaml":true,"extradata":"MT"},{"content":"An array of object types registered on the service end as well-known types.","nodes":[{"pos":[0,75],"content":"An array of object types registered on the service end as well-known types.","nodes":[{"content":"An array of object types registered on the service end as well-known types.","pos":[0,75]}]}],"pos":[31651,31727],"yaml":true},{"content":"At least one of the callers higher in the callstack does not have permission to configure remoting types and channels.","nodes":[{"pos":[0,118],"content":"At least one of the callers higher in the callstack does not have permission to configure remoting types and channels.","nodes":[{"content":"At least one of the callers higher in the callstack does not have permission to configure remoting types and channels.","pos":[0,118]}]}],"pos":[31947,32066],"yaml":true},{"content":"Returns a Boolean value that indicates whether the specified <xref href=\"System.Type\"></xref> is allowed to be client activated.","nodes":[{"pos":[0,128],"content":"Returns a Boolean value that indicates whether the specified <ph id=\"ph1\">&lt;xref href=\"System.Type\"&gt;&lt;/xref&gt;</ph> is allowed to be client activated.","source":"Returns a Boolean value that indicates whether the specified <xref href=\"System.Type\"></xref> is allowed to be client activated."}],"pos":[33237,33366],"yaml":true},{"content":"The current method is used at the server end to determine whether an activation of the object <xref:System.Type> is explicitly allowed by the server.","nodes":[{"pos":[0,149],"content":"The current method is used at the server end to determine whether an activation of the object <xref:System.Type> is explicitly allowed by the server.","nodes":[{"content":"The current method is used at the server end to determine whether an activation of the object <ph id=\"ph1\">&lt;xref:System.Type&gt;</ph> is explicitly allowed by the server.","pos":[0,149],"source":"The current method is used at the server end to determine whether an activation of the object <xref:System.Type> is explicitly allowed by the server."}]}],"pos":[33377,33527],"yaml":true,"extradata":"MT"},{"content":"The object <xref href=\"System.Type\"></xref> to check.","nodes":[{"pos":[0,53],"content":"The object <ph id=\"ph1\">&lt;xref href=\"System.Type\"&gt;&lt;/xref&gt;</ph> to check.","source":"The object <xref href=\"System.Type\"></xref> to check."}],"pos":[34458,34512],"yaml":true},{"content":"`true` if the specified <xref href=\"System.Type\"></xref> is allowed to be client activated; otherwise, `false`.","nodes":[{"pos":[0,111],"content":"<ph id=\"ph1\">`true`</ph> if the specified <ph id=\"ph2\">&lt;xref href=\"System.Type\"&gt;&lt;/xref&gt;</ph> is allowed to be client activated; otherwise, <ph id=\"ph3\">`false`</ph>.","source":"`true` if the specified <xref href=\"System.Type\"></xref> is allowed to be client activated; otherwise, `false`."}],"pos":[34570,34684],"yaml":true},{"content":"At least one of the callers higher in the callstack does not have permission to configure remoting types and channels.","nodes":[{"pos":[0,118],"content":"At least one of the callers higher in the callstack does not have permission to configure remoting types and channels.","nodes":[{"content":"At least one of the callers higher in the callstack does not have permission to configure remoting types and channels.","pos":[0,118]}]}],"pos":[34889,35008],"yaml":true},{"content":"Checks whether the object specified by its type name and assembly name is registered as a remotely activated client type.","nodes":[{"pos":[0,121],"content":"Checks whether the object specified by its type name and assembly name is registered as a remotely activated client type.","nodes":[{"content":"Checks whether the object specified by its type name and assembly name is registered as a remotely activated client type.","pos":[0,121]}]}],"pos":[36317,36439],"yaml":true},{"content":"The type name of the object to check.","nodes":[{"pos":[0,37],"content":"The type name of the object to check.","nodes":[{"content":"The type name of the object to check.","pos":[0,37]}]}],"pos":[37480,37518],"yaml":true},{"content":"The assembly name of the object to check.","nodes":[{"pos":[0,41],"content":"The assembly name of the object to check.","nodes":[{"content":"The assembly name of the object to check.","pos":[0,41]}]}],"pos":[37586,37628],"yaml":true},{"content":"The <xref href=\"System.Runtime.Remoting.ActivatedClientTypeEntry\"></xref> that corresponds to the specified object type.","nodes":[{"pos":[0,120],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Runtime.Remoting.ActivatedClientTypeEntry\"&gt;&lt;/xref&gt;</ph> that corresponds to the specified object type.","source":"The <xref href=\"System.Runtime.Remoting.ActivatedClientTypeEntry\"></xref> that corresponds to the specified object type."}],"pos":[37720,37841],"yaml":true},{"content":"At least one of the callers higher in the callstack does not have permission to configure remoting types and channels.","nodes":[{"pos":[0,118],"content":"At least one of the callers higher in the callstack does not have permission to configure remoting types and channels.","nodes":[{"content":"At least one of the callers higher in the callstack does not have permission to configure remoting types and channels.","pos":[0,118]}]}],"pos":[38056,38175],"yaml":true},{"content":"Checks whether the specified object <xref href=\"System.Type\"></xref> is registered as a remotely activated client type.","nodes":[{"pos":[0,119],"content":"Checks whether the specified object <ph id=\"ph1\">&lt;xref href=\"System.Type\"&gt;&lt;/xref&gt;</ph> is registered as a remotely activated client type.","source":"Checks whether the specified object <xref href=\"System.Type\"></xref> is registered as a remotely activated client type."}],"pos":[39406,39526],"yaml":true},{"content":"The object type to check.","nodes":[{"pos":[0,25],"content":"The object type to check.","nodes":[{"content":"The object type to check.","pos":[0,25]}]}],"pos":[40540,40566],"yaml":true},{"content":"The <xref href=\"System.Runtime.Remoting.ActivatedClientTypeEntry\"></xref> that corresponds to the specified object type.","nodes":[{"pos":[0,120],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Runtime.Remoting.ActivatedClientTypeEntry\"&gt;&lt;/xref&gt;</ph> that corresponds to the specified object type.","source":"The <xref href=\"System.Runtime.Remoting.ActivatedClientTypeEntry\"></xref> that corresponds to the specified object type."}],"pos":[40658,40779],"yaml":true},{"content":"At least one of the callers higher in the callstack does not have permission to configure remoting types and channels.","nodes":[{"pos":[0,118],"content":"At least one of the callers higher in the callstack does not have permission to configure remoting types and channels.","nodes":[{"content":"At least one of the callers higher in the callstack does not have permission to configure remoting types and channels.","pos":[0,118]}]}],"pos":[40994,41113],"yaml":true},{"content":"Checks whether the specified object <xref href=\"System.Type\"></xref> is registered as a well-known client type.","nodes":[{"pos":[0,111],"content":"Checks whether the specified object <ph id=\"ph1\">&lt;xref href=\"System.Type\"&gt;&lt;/xref&gt;</ph> is registered as a well-known client type.","source":"Checks whether the specified object <xref href=\"System.Type\"></xref> is registered as a well-known client type."}],"pos":[42296,42408],"yaml":true},{"content":"The object <xref href=\"System.Type\"></xref> to check.","nodes":[{"pos":[0,53],"content":"The object <ph id=\"ph1\">&lt;xref href=\"System.Type\"&gt;&lt;/xref&gt;</ph> to check.","source":"The object <xref href=\"System.Type\"></xref> to check."}],"pos":[43342,43396],"yaml":true},{"content":"The <xref href=\"System.Runtime.Remoting.WellKnownClientTypeEntry\"></xref> that corresponds to the specified object type.","nodes":[{"pos":[0,120],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Runtime.Remoting.WellKnownClientTypeEntry\"&gt;&lt;/xref&gt;</ph> that corresponds to the specified object type.","source":"The <xref href=\"System.Runtime.Remoting.WellKnownClientTypeEntry\"></xref> that corresponds to the specified object type."}],"pos":[43488,43609],"yaml":true},{"content":"At least one of the callers higher in the callstack does not have permission to configure remoting types and channels.","nodes":[{"pos":[0,118],"content":"At least one of the callers higher in the callstack does not have permission to configure remoting types and channels.","nodes":[{"content":"At least one of the callers higher in the callstack does not have permission to configure remoting types and channels.","pos":[0,118]}]}],"pos":[43816,43935],"yaml":true},{"content":"Checks whether the object specified by its type name and assembly name is registered as a well-known client type.","nodes":[{"pos":[0,113],"content":"Checks whether the object specified by its type name and assembly name is registered as a well-known client type.","nodes":[{"content":"Checks whether the object specified by its type name and assembly name is registered as a well-known client type.","pos":[0,113]}]}],"pos":[45196,45310],"yaml":true},{"content":"The type name of the object to check.","nodes":[{"pos":[0,37],"content":"The type name of the object to check.","nodes":[{"content":"The type name of the object to check.","pos":[0,37]}]}],"pos":[46271,46309],"yaml":true},{"content":"The assembly name of the object to check.","nodes":[{"pos":[0,41],"content":"The assembly name of the object to check.","nodes":[{"content":"The assembly name of the object to check.","pos":[0,41]}]}],"pos":[46377,46419],"yaml":true},{"content":"The <xref href=\"System.Runtime.Remoting.WellKnownClientTypeEntry\"></xref> that corresponds to the specified object type.","nodes":[{"pos":[0,120],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Runtime.Remoting.WellKnownClientTypeEntry\"&gt;&lt;/xref&gt;</ph> that corresponds to the specified object type.","source":"The <xref href=\"System.Runtime.Remoting.WellKnownClientTypeEntry\"></xref> that corresponds to the specified object type."}],"pos":[46511,46632],"yaml":true},{"content":"At least one of the callers higher in the callstack does not have permission to configure remoting types and channels.","nodes":[{"pos":[0,118],"content":"At least one of the callers higher in the callstack does not have permission to configure remoting types and channels.","nodes":[{"content":"At least one of the callers higher in the callstack does not have permission to configure remoting types and channels.","pos":[0,118]}]}],"pos":[46839,46958],"yaml":true},{"content":"Gets the ID of the currently executing process.","nodes":[{"pos":[0,47],"content":"Gets the ID of the currently executing process.","nodes":[{"content":"Gets the ID of the currently executing process.","pos":[0,47]}]}],"pos":[48014,48062],"yaml":true},{"content":"A <xref href=\"System.String\"></xref> that contains the ID of the currently executing process.","nodes":[{"pos":[0,93],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.String\"&gt;&lt;/xref&gt;</ph> that contains the ID of the currently executing process.","source":"A <xref href=\"System.String\"></xref> that contains the ID of the currently executing process."}],"pos":[48182,48276],"yaml":true},{"content":"The immediate caller does not have infrastructure permission.","nodes":[{"pos":[0,61],"content":"The immediate caller does not have infrastructure permission.","nodes":[{"content":"The immediate caller does not have infrastructure permission.","pos":[0,61]}]}],"pos":[48471,48533],"yaml":true},{"content":"Registers an object <xref href=\"System.Type\"></xref> recorded in the provided <xref href=\"System.Runtime.Remoting.ActivatedClientTypeEntry\"></xref> on the client end as a type that can be activated on the server.","nodes":[{"pos":[0,212],"content":"Registers an object <ph id=\"ph1\">&lt;xref href=\"System.Type\"&gt;&lt;/xref&gt;</ph> recorded in the provided <ph id=\"ph2\">&lt;xref href=\"System.Runtime.Remoting.ActivatedClientTypeEntry\"&gt;&lt;/xref&gt;</ph> on the client end as a type that can be activated on the server.","source":"Registers an object <xref href=\"System.Type\"></xref> recorded in the provided <xref href=\"System.Runtime.Remoting.ActivatedClientTypeEntry\"></xref> on the client end as a type that can be activated on the server."}],"pos":[49923,50136],"yaml":true},{"content":"To create an instance of a client-activated object on the server, you must know its <xref:System.Type> and it must be registered on the server end by using the <xref:System.Runtime.Remoting.RemotingConfiguration.RegisterActivatedServiceType%2A> method. To obtain a proxy for a new instance of the client-activated object, the client must first register a channel with <xref:System.Runtime.Remoting.Channels.ChannelServices> and then activate the object by calling `new`.  \n  \n To activate a client-activated object type with the `new` keyword, you must first register the object type on the client end using the <xref:System.Runtime.Remoting.RemotingConfiguration.RegisterActivatedClientType%2A> method. Calling the <xref:System.Runtime.Remoting.RemotingConfiguration.RegisterActivatedClientType%2A> method gives the remoting infrastructure the location of the remote application where `new` attempts to create it. If, on the other hand, you use the <xref:System.Activator.CreateInstance%2A?displayProperty=fullName> method to create a new instance of the client-activated object, you must supply the remote application's URL as a parameter, so no prior registration on the client end is necessary. To supply the <xref:System.Activator.CreateInstance%2A?displayProperty=fullName> method with the URL of the server where you want to create the object, you must encapsulate the URL in an instance of the <xref:System.Runtime.Remoting.Activation.UrlAttribute> class.  \n  \n For a detailed description of client-activated objects, see [&#91;\\<topic://cpconClientActivation>&#93;](http://msdn.microsoft.com/en-us/4a791494-c18a-4711-a5c1-4ab0e49a8f1a).","nodes":[{"pos":[0,470],"content":"To create an instance of a client-activated object on the server, you must know its <xref:System.Type> and it must be registered on the server end by using the <xref:System.Runtime.Remoting.RemotingConfiguration.RegisterActivatedServiceType%2A> method. To obtain a proxy for a new instance of the client-activated object, the client must first register a channel with <xref:System.Runtime.Remoting.Channels.ChannelServices> and then activate the object by calling `new`.","nodes":[{"content":"To create an instance of a client-activated object on the server, you must know its <ph id=\"ph1\">&lt;xref:System.Type&gt;</ph> and it must be registered on the server end by using the <ph id=\"ph2\">&lt;xref:System.Runtime.Remoting.RemotingConfiguration.RegisterActivatedServiceType%2A&gt;</ph> method.","pos":[0,252],"source":"To create an instance of a client-activated object on the server, you must know its <xref:System.Type> and it must be registered on the server end by using the <xref:System.Runtime.Remoting.RemotingConfiguration.RegisterActivatedServiceType%2A> method."},{"content":"To obtain a proxy for a new instance of the client-activated object, the client must first register a channel with <ph id=\"ph1\">&lt;xref:System.Runtime.Remoting.Channels.ChannelServices&gt;</ph> and then activate the object by calling <ph id=\"ph2\">`new`</ph>.","pos":[253,470],"source":" To obtain a proxy for a new instance of the client-activated object, the client must first register a channel with <xref:System.Runtime.Remoting.Channels.ChannelServices> and then activate the object by calling `new`."}]},{"pos":[477,1463],"content":"To activate a client-activated object type with the `new` keyword, you must first register the object type on the client end using the <xref:System.Runtime.Remoting.RemotingConfiguration.RegisterActivatedClientType%2A> method. Calling the <xref:System.Runtime.Remoting.RemotingConfiguration.RegisterActivatedClientType%2A> method gives the remoting infrastructure the location of the remote application where `new` attempts to create it. If, on the other hand, you use the <xref:System.Activator.CreateInstance%2A?displayProperty=fullName> method to create a new instance of the client-activated object, you must supply the remote application's URL as a parameter, so no prior registration on the client end is necessary. To supply the <xref:System.Activator.CreateInstance%2A?displayProperty=fullName> method with the URL of the server where you want to create the object, you must encapsulate the URL in an instance of the <xref:System.Runtime.Remoting.Activation.UrlAttribute> class.","nodes":[{"content":"To activate a client-activated object type with the <ph id=\"ph1\">`new`</ph> keyword, you must first register the object type on the client end using the <ph id=\"ph2\">&lt;xref:System.Runtime.Remoting.RemotingConfiguration.RegisterActivatedClientType%2A&gt;</ph> method.","pos":[0,226],"source":"To activate a client-activated object type with the `new` keyword, you must first register the object type on the client end using the <xref:System.Runtime.Remoting.RemotingConfiguration.RegisterActivatedClientType%2A> method."},{"content":"Calling the <ph id=\"ph1\">&lt;xref:System.Runtime.Remoting.RemotingConfiguration.RegisterActivatedClientType%2A&gt;</ph> method gives the remoting infrastructure the location of the remote application where <ph id=\"ph2\">`new`</ph> attempts to create it.","pos":[227,437],"source":" Calling the <xref:System.Runtime.Remoting.RemotingConfiguration.RegisterActivatedClientType%2A> method gives the remoting infrastructure the location of the remote application where `new` attempts to create it."},{"content":"If, on the other hand, you use the <ph id=\"ph1\">&lt;xref:System.Activator.CreateInstance%2A?displayProperty=fullName&gt;</ph> method to create a new instance of the client-activated object, you must supply the remote application's URL as a parameter, so no prior registration on the client end is necessary.","pos":[438,721],"source":" If, on the other hand, you use the <xref:System.Activator.CreateInstance%2A?displayProperty=fullName> method to create a new instance of the client-activated object, you must supply the remote application's URL as a parameter, so no prior registration on the client end is necessary."},{"content":"To supply the <ph id=\"ph1\">&lt;xref:System.Activator.CreateInstance%2A?displayProperty=fullName&gt;</ph> method with the URL of the server where you want to create the object, you must encapsulate the URL in an instance of the <ph id=\"ph2\">&lt;xref:System.Runtime.Remoting.Activation.UrlAttribute&gt;</ph> class.","pos":[722,986],"source":" To supply the <xref:System.Activator.CreateInstance%2A?displayProperty=fullName> method with the URL of the server where you want to create the object, you must encapsulate the URL in an instance of the <xref:System.Runtime.Remoting.Activation.UrlAttribute> class."}]},{"pos":[1470,1645],"content":"For a detailed description of client-activated objects, see <bpt id=\"p1\">[</bpt>&amp;#91;<ph id=\"ph1\">\\&lt;</ph>topic://cpconClientActivation&gt;&amp;#93;<ept id=\"p1\">](http://msdn.microsoft.com/en-us/4a791494-c18a-4711-a5c1-4ab0e49a8f1a)</ept>.","source":"For a detailed description of client-activated objects, see [&#91;\\<topic://cpconClientActivation>&#93;](http://msdn.microsoft.com/en-us/4a791494-c18a-4711-a5c1-4ab0e49a8f1a)."}],"pos":[50147,51800],"yaml":true,"extradata":"MT"},{"content":"Configuration settings for the client-activated type.","nodes":[{"pos":[0,53],"content":"Configuration settings for the client-activated type.","nodes":[{"content":"Configuration settings for the client-activated type.","pos":[0,53]}]}],"pos":[52040,52094],"yaml":true},{"content":"At least one of the callers higher in the callstack does not have permission to configure remoting types and channels.","nodes":[{"pos":[0,118],"content":"At least one of the callers higher in the callstack does not have permission to configure remoting types and channels.","nodes":[{"content":"At least one of the callers higher in the callstack does not have permission to configure remoting types and channels.","pos":[0,118]}]}],"pos":[52307,52426],"yaml":true},{"content":"Registers an object <xref href=\"System.Type\"></xref> on the client end as a type that can be activated on the server, using the given parameters to initialize a new instance of the <xref href=\"System.Runtime.Remoting.ActivatedClientTypeEntry\"></xref> class.","nodes":[{"pos":[0,257],"content":"Registers an object <ph id=\"ph1\">&lt;xref href=\"System.Type\"&gt;&lt;/xref&gt;</ph> on the client end as a type that can be activated on the server, using the given parameters to initialize a new instance of the <ph id=\"ph2\">&lt;xref href=\"System.Runtime.Remoting.ActivatedClientTypeEntry\"&gt;&lt;/xref&gt;</ph> class.","source":"Registers an object <xref href=\"System.Type\"></xref> on the client end as a type that can be activated on the server, using the given parameters to initialize a new instance of the <xref href=\"System.Runtime.Remoting.ActivatedClientTypeEntry\"></xref> class."}],"pos":[53711,53969],"yaml":true},{"content":"To create an instance of a client-activated object on the server, you must know its <xref:System.Type> and it must be registered on the server end by using the <xref:System.Runtime.Remoting.RemotingConfiguration.RegisterActivatedServiceType%2A> method. To obtain a proxy for a new instance of the client-activated object, the client must first register a channel with <xref:System.Runtime.Remoting.Channels.ChannelServices> and then activate the object by calling `new`.  \n  \n To activate a client-activated object type with the `new` keyword, you must first register the object type on the client end using the <xref:System.Runtime.Remoting.RemotingConfiguration.RegisterActivatedClientType%2A> method. Calling the <xref:System.Runtime.Remoting.RemotingConfiguration.RegisterActivatedClientType%2A> method gives the remoting infrastructure the location of the remote application where `new` attempts to create it. If, on the other hand, you use the <xref:System.Activator.CreateInstance%2A?displayProperty=fullName> method to create a new instance of the client-activated object, you must supply the remote application's URL as a parameter, so no prior registration on the client end is necessary. To supply the <xref:System.Activator.CreateInstance%2A?displayProperty=fullName> method with the URL of the server where you want to create the object, you must encapsulate the URL in an instance of the <xref:System.Runtime.Remoting.Activation.UrlAttribute> class.  \n  \n For a detailed description of client-activated objects, see [&#91;\\<topic://cpconClientActivation>&#93;](http://msdn.microsoft.com/en-us/4a791494-c18a-4711-a5c1-4ab0e49a8f1a)","nodes":[{"pos":[0,470],"content":"To create an instance of a client-activated object on the server, you must know its <xref:System.Type> and it must be registered on the server end by using the <xref:System.Runtime.Remoting.RemotingConfiguration.RegisterActivatedServiceType%2A> method. To obtain a proxy for a new instance of the client-activated object, the client must first register a channel with <xref:System.Runtime.Remoting.Channels.ChannelServices> and then activate the object by calling `new`.","nodes":[{"content":"To create an instance of a client-activated object on the server, you must know its <ph id=\"ph1\">&lt;xref:System.Type&gt;</ph> and it must be registered on the server end by using the <ph id=\"ph2\">&lt;xref:System.Runtime.Remoting.RemotingConfiguration.RegisterActivatedServiceType%2A&gt;</ph> method.","pos":[0,252],"source":"To create an instance of a client-activated object on the server, you must know its <xref:System.Type> and it must be registered on the server end by using the <xref:System.Runtime.Remoting.RemotingConfiguration.RegisterActivatedServiceType%2A> method."},{"content":"To obtain a proxy for a new instance of the client-activated object, the client must first register a channel with <ph id=\"ph1\">&lt;xref:System.Runtime.Remoting.Channels.ChannelServices&gt;</ph> and then activate the object by calling <ph id=\"ph2\">`new`</ph>.","pos":[253,470],"source":" To obtain a proxy for a new instance of the client-activated object, the client must first register a channel with <xref:System.Runtime.Remoting.Channels.ChannelServices> and then activate the object by calling `new`."}]},{"pos":[477,1463],"content":"To activate a client-activated object type with the `new` keyword, you must first register the object type on the client end using the <xref:System.Runtime.Remoting.RemotingConfiguration.RegisterActivatedClientType%2A> method. Calling the <xref:System.Runtime.Remoting.RemotingConfiguration.RegisterActivatedClientType%2A> method gives the remoting infrastructure the location of the remote application where `new` attempts to create it. If, on the other hand, you use the <xref:System.Activator.CreateInstance%2A?displayProperty=fullName> method to create a new instance of the client-activated object, you must supply the remote application's URL as a parameter, so no prior registration on the client end is necessary. To supply the <xref:System.Activator.CreateInstance%2A?displayProperty=fullName> method with the URL of the server where you want to create the object, you must encapsulate the URL in an instance of the <xref:System.Runtime.Remoting.Activation.UrlAttribute> class.","nodes":[{"content":"To activate a client-activated object type with the <ph id=\"ph1\">`new`</ph> keyword, you must first register the object type on the client end using the <ph id=\"ph2\">&lt;xref:System.Runtime.Remoting.RemotingConfiguration.RegisterActivatedClientType%2A&gt;</ph> method.","pos":[0,226],"source":"To activate a client-activated object type with the `new` keyword, you must first register the object type on the client end using the <xref:System.Runtime.Remoting.RemotingConfiguration.RegisterActivatedClientType%2A> method."},{"content":"Calling the <ph id=\"ph1\">&lt;xref:System.Runtime.Remoting.RemotingConfiguration.RegisterActivatedClientType%2A&gt;</ph> method gives the remoting infrastructure the location of the remote application where <ph id=\"ph2\">`new`</ph> attempts to create it.","pos":[227,437],"source":" Calling the <xref:System.Runtime.Remoting.RemotingConfiguration.RegisterActivatedClientType%2A> method gives the remoting infrastructure the location of the remote application where `new` attempts to create it."},{"content":"If, on the other hand, you use the <ph id=\"ph1\">&lt;xref:System.Activator.CreateInstance%2A?displayProperty=fullName&gt;</ph> method to create a new instance of the client-activated object, you must supply the remote application's URL as a parameter, so no prior registration on the client end is necessary.","pos":[438,721],"source":" If, on the other hand, you use the <xref:System.Activator.CreateInstance%2A?displayProperty=fullName> method to create a new instance of the client-activated object, you must supply the remote application's URL as a parameter, so no prior registration on the client end is necessary."},{"content":"To supply the <ph id=\"ph1\">&lt;xref:System.Activator.CreateInstance%2A?displayProperty=fullName&gt;</ph> method with the URL of the server where you want to create the object, you must encapsulate the URL in an instance of the <ph id=\"ph2\">&lt;xref:System.Runtime.Remoting.Activation.UrlAttribute&gt;</ph> class.","pos":[722,986],"source":" To supply the <xref:System.Activator.CreateInstance%2A?displayProperty=fullName> method with the URL of the server where you want to create the object, you must encapsulate the URL in an instance of the <xref:System.Runtime.Remoting.Activation.UrlAttribute> class."}]},{"pos":[1470,1644],"content":"For a detailed description of client-activated objects, see <bpt id=\"p1\">[</bpt>&amp;#91;<ph id=\"ph1\">\\&lt;</ph>topic://cpconClientActivation&gt;&amp;#93;<ept id=\"p1\">](http://msdn.microsoft.com/en-us/4a791494-c18a-4711-a5c1-4ab0e49a8f1a)</ept>","source":"For a detailed description of client-activated objects, see [&#91;\\<topic://cpconClientActivation>&#93;](http://msdn.microsoft.com/en-us/4a791494-c18a-4711-a5c1-4ab0e49a8f1a)"}],"pos":[53980,55632],"yaml":true,"extradata":"MT"},{"content":"The object <xref href=\"System.Type\"></xref>.","nodes":[{"pos":[0,44],"content":"The object <ph id=\"ph1\">&lt;xref href=\"System.Type\"&gt;&lt;/xref&gt;</ph>.","source":"The object <xref href=\"System.Type\"></xref>."}],"pos":[56627,56672],"yaml":true},{"content":"URL of the application where this type is activated.","nodes":[{"pos":[0,52],"content":"URL of the application where this type is activated.","nodes":[{"content":"URL of the application where this type is activated.","pos":[0,52]}]}],"pos":[56734,56787],"yaml":true},{"content":"The <code>typeName</code> or <code>URI</code> parameter is `null`.","nodes":[{"pos":[0,66],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">typeName</ph><ept id=\"p1\">&lt;/code&gt;</ept> or <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">URI</ph><ept id=\"p2\">&lt;/code&gt;</ept> parameter is <ph id=\"ph3\">`null`</ph>.","source":"The <code>typeName</code> or <code>URI</code> parameter is `null`."}],"pos":[56990,57057],"yaml":true},{"content":"At least one of the callers higher in the callstack does not have permission to configure remoting types and channels.","nodes":[{"pos":[0,118],"content":"At least one of the callers higher in the callstack does not have permission to configure remoting types and channels.","nodes":[{"content":"At least one of the callers higher in the callstack does not have permission to configure remoting types and channels.","pos":[0,118]}]}],"pos":[57169,57288],"yaml":true},{"content":"Registers an object type recorded in the provided <xref href=\"System.Runtime.Remoting.ActivatedServiceTypeEntry\"></xref> on the service end as one that can be activated on request from a client.","nodes":[{"pos":[0,194],"content":"Registers an object type recorded in the provided <ph id=\"ph1\">&lt;xref href=\"System.Runtime.Remoting.ActivatedServiceTypeEntry\"&gt;&lt;/xref&gt;</ph> on the service end as one that can be activated on request from a client.","source":"Registers an object type recorded in the provided <xref href=\"System.Runtime.Remoting.ActivatedServiceTypeEntry\"></xref> on the service end as one that can be activated on request from a client."}],"pos":[58690,58885],"yaml":true},{"content":"To create an instance of a client-activated object on the server, you must know its <xref:System.Type> and it must be registered on the server end by using the <xref:System.Runtime.Remoting.RemotingConfiguration.RegisterActivatedServiceType%2A> method. To obtain a proxy for a new instance of the client-activated object, the client must first register a channel with <xref:System.Runtime.Remoting.Channels.ChannelServices> and then activate the object by calling `new` or <xref:System.Activator.CreateInstance%2A?displayProperty=fullName>.  \n  \n To activate a client-activated object type with the `new` keyword, you must first register the object type on the client end using the <xref:System.Runtime.Remoting.RemotingConfiguration.RegisterActivatedClientType%2A> method. Calling the <xref:System.Runtime.Remoting.RemotingConfiguration.RegisterActivatedClientType%2A> method gives the remoting infrastructure the location of the remote application, where `new` attempts to create it. If, on the other hand, you use the <xref:System.Activator.CreateInstance%2A> method to create a new instance of the client-activated object, you must supply the remote application's URL as a parameter, so no prior registration on the client end is necessary. To supply the <xref:System.Activator.CreateInstance%2A> method with the URL of the server where you want to create the object, you must encapsulate the URL in an instance of the <xref:System.Runtime.Remoting.Activation.UrlAttribute> class.  \n  \n For a detailed description of client-activated objects, see [&#91;\\<topic://cpconClientActivation>&#93;](http://msdn.microsoft.com/en-us/4a791494-c18a-4711-a5c1-4ab0e49a8f1a).","nodes":[{"pos":[0,540],"content":"To create an instance of a client-activated object on the server, you must know its <xref:System.Type> and it must be registered on the server end by using the <xref:System.Runtime.Remoting.RemotingConfiguration.RegisterActivatedServiceType%2A> method. To obtain a proxy for a new instance of the client-activated object, the client must first register a channel with <xref:System.Runtime.Remoting.Channels.ChannelServices> and then activate the object by calling `new` or <xref:System.Activator.CreateInstance%2A?displayProperty=fullName>.","nodes":[{"content":"To create an instance of a client-activated object on the server, you must know its <ph id=\"ph1\">&lt;xref:System.Type&gt;</ph> and it must be registered on the server end by using the <ph id=\"ph2\">&lt;xref:System.Runtime.Remoting.RemotingConfiguration.RegisterActivatedServiceType%2A&gt;</ph> method.","pos":[0,252],"source":"To create an instance of a client-activated object on the server, you must know its <xref:System.Type> and it must be registered on the server end by using the <xref:System.Runtime.Remoting.RemotingConfiguration.RegisterActivatedServiceType%2A> method."},{"content":"To obtain a proxy for a new instance of the client-activated object, the client must first register a channel with <ph id=\"ph1\">&lt;xref:System.Runtime.Remoting.Channels.ChannelServices&gt;</ph> and then activate the object by calling <ph id=\"ph2\">`new`</ph> or <ph id=\"ph3\">&lt;xref:System.Activator.CreateInstance%2A?displayProperty=fullName&gt;</ph>.","pos":[253,540],"source":" To obtain a proxy for a new instance of the client-activated object, the client must first register a channel with <xref:System.Runtime.Remoting.Channels.ChannelServices> and then activate the object by calling `new` or <xref:System.Activator.CreateInstance%2A?displayProperty=fullName>."}]},{"pos":[547,1484],"content":"To activate a client-activated object type with the `new` keyword, you must first register the object type on the client end using the <xref:System.Runtime.Remoting.RemotingConfiguration.RegisterActivatedClientType%2A> method. Calling the <xref:System.Runtime.Remoting.RemotingConfiguration.RegisterActivatedClientType%2A> method gives the remoting infrastructure the location of the remote application, where `new` attempts to create it. If, on the other hand, you use the <xref:System.Activator.CreateInstance%2A> method to create a new instance of the client-activated object, you must supply the remote application's URL as a parameter, so no prior registration on the client end is necessary. To supply the <xref:System.Activator.CreateInstance%2A> method with the URL of the server where you want to create the object, you must encapsulate the URL in an instance of the <xref:System.Runtime.Remoting.Activation.UrlAttribute> class.","nodes":[{"content":"To activate a client-activated object type with the <ph id=\"ph1\">`new`</ph> keyword, you must first register the object type on the client end using the <ph id=\"ph2\">&lt;xref:System.Runtime.Remoting.RemotingConfiguration.RegisterActivatedClientType%2A&gt;</ph> method.","pos":[0,226],"source":"To activate a client-activated object type with the `new` keyword, you must first register the object type on the client end using the <xref:System.Runtime.Remoting.RemotingConfiguration.RegisterActivatedClientType%2A> method."},{"content":"Calling the <ph id=\"ph1\">&lt;xref:System.Runtime.Remoting.RemotingConfiguration.RegisterActivatedClientType%2A&gt;</ph> method gives the remoting infrastructure the location of the remote application, where <ph id=\"ph2\">`new`</ph> attempts to create it.","pos":[227,438],"source":" Calling the <xref:System.Runtime.Remoting.RemotingConfiguration.RegisterActivatedClientType%2A> method gives the remoting infrastructure the location of the remote application, where `new` attempts to create it."},{"content":"If, on the other hand, you use the <ph id=\"ph1\">&lt;xref:System.Activator.CreateInstance%2A&gt;</ph> method to create a new instance of the client-activated object, you must supply the remote application's URL as a parameter, so no prior registration on the client end is necessary.","pos":[439,697],"source":" If, on the other hand, you use the <xref:System.Activator.CreateInstance%2A> method to create a new instance of the client-activated object, you must supply the remote application's URL as a parameter, so no prior registration on the client end is necessary."},{"content":"To supply the <ph id=\"ph1\">&lt;xref:System.Activator.CreateInstance%2A&gt;</ph> method with the URL of the server where you want to create the object, you must encapsulate the URL in an instance of the <ph id=\"ph2\">&lt;xref:System.Runtime.Remoting.Activation.UrlAttribute&gt;</ph> class.","pos":[698,937],"source":" To supply the <xref:System.Activator.CreateInstance%2A> method with the URL of the server where you want to create the object, you must encapsulate the URL in an instance of the <xref:System.Runtime.Remoting.Activation.UrlAttribute> class."}]},{"pos":[1491,1666],"content":"For a detailed description of client-activated objects, see <bpt id=\"p1\">[</bpt>&amp;#91;<ph id=\"ph1\">\\&lt;</ph>topic://cpconClientActivation&gt;&amp;#93;<ept id=\"p1\">](http://msdn.microsoft.com/en-us/4a791494-c18a-4711-a5c1-4ab0e49a8f1a)</ept>.","source":"For a detailed description of client-activated objects, see [&#91;\\<topic://cpconClientActivation>&#93;](http://msdn.microsoft.com/en-us/4a791494-c18a-4711-a5c1-4ab0e49a8f1a)."}],"pos":[58896,60570],"yaml":true,"extradata":"MT"},{"content":"Configuration settings for the client-activated type.","nodes":[{"pos":[0,53],"content":"Configuration settings for the client-activated type.","nodes":[{"content":"Configuration settings for the client-activated type.","pos":[0,53]}]}],"pos":[60813,60867],"yaml":true},{"content":"At least one of the callers higher in the callstack does not have permission to configure remoting types and channels.","nodes":[{"pos":[0,118],"content":"At least one of the callers higher in the callstack does not have permission to configure remoting types and channels.","nodes":[{"content":"At least one of the callers higher in the callstack does not have permission to configure remoting types and channels.","pos":[0,118]}]}],"pos":[61081,61200],"yaml":true},{"content":"Registers a specified object type on the service end as a type that can be activated on request from a client.","nodes":[{"pos":[0,110],"content":"Registers a specified object type on the service end as a type that can be activated on request from a client.","nodes":[{"content":"Registers a specified object type on the service end as a type that can be activated on request from a client.","pos":[0,110]}]}],"pos":[62425,62536],"yaml":true},{"content":"To create an instance of a client-activated object on the server, you must know its <xref:System.Type> and it must be registered on the server end by using the <xref:System.Runtime.Remoting.RemotingConfiguration.RegisterActivatedServiceType%2A> method. To obtain a proxy for a new instance of the client-activated object, the client must first register a channel with <xref:System.Runtime.Remoting.Channels.ChannelServices> and then activate the object by calling `new` or <xref:System.Activator.CreateInstance%2A?displayProperty=fullName>.  \n  \n To activate a client-activated object type with the `new` keyword, you must first register the object type on the client end using the <xref:System.Runtime.Remoting.RemotingConfiguration.RegisterActivatedClientType%2A> method. Calling the <xref:System.Runtime.Remoting.RemotingConfiguration.RegisterActivatedClientType%2A> method gives the remoting infrastructure the location of the remote application, where `new` attempts to create it. If, on the other hand, you use the <xref:System.Activator.CreateInstance%2A> method to create a new instance of the client-activated object, you must supply the remote application's URL as a parameter, so no prior registration on the client end is necessary. To supply the <xref:System.Activator.CreateInstance%2A> method with the URL of the server where you want to create the object, you must encapsulate the URL in an instance of the <xref:System.Runtime.Remoting.Activation.UrlAttribute> class.  \n  \n For a detailed description of client-activated objects, see [&#91;\\<topic://cpconClientActivation>&#93;](http://msdn.microsoft.com/en-us/4a791494-c18a-4711-a5c1-4ab0e49a8f1a).","nodes":[{"pos":[0,540],"content":"To create an instance of a client-activated object on the server, you must know its <xref:System.Type> and it must be registered on the server end by using the <xref:System.Runtime.Remoting.RemotingConfiguration.RegisterActivatedServiceType%2A> method. To obtain a proxy for a new instance of the client-activated object, the client must first register a channel with <xref:System.Runtime.Remoting.Channels.ChannelServices> and then activate the object by calling `new` or <xref:System.Activator.CreateInstance%2A?displayProperty=fullName>.","nodes":[{"content":"To create an instance of a client-activated object on the server, you must know its <ph id=\"ph1\">&lt;xref:System.Type&gt;</ph> and it must be registered on the server end by using the <ph id=\"ph2\">&lt;xref:System.Runtime.Remoting.RemotingConfiguration.RegisterActivatedServiceType%2A&gt;</ph> method.","pos":[0,252],"source":"To create an instance of a client-activated object on the server, you must know its <xref:System.Type> and it must be registered on the server end by using the <xref:System.Runtime.Remoting.RemotingConfiguration.RegisterActivatedServiceType%2A> method."},{"content":"To obtain a proxy for a new instance of the client-activated object, the client must first register a channel with <ph id=\"ph1\">&lt;xref:System.Runtime.Remoting.Channels.ChannelServices&gt;</ph> and then activate the object by calling <ph id=\"ph2\">`new`</ph> or <ph id=\"ph3\">&lt;xref:System.Activator.CreateInstance%2A?displayProperty=fullName&gt;</ph>.","pos":[253,540],"source":" To obtain a proxy for a new instance of the client-activated object, the client must first register a channel with <xref:System.Runtime.Remoting.Channels.ChannelServices> and then activate the object by calling `new` or <xref:System.Activator.CreateInstance%2A?displayProperty=fullName>."}]},{"pos":[547,1484],"content":"To activate a client-activated object type with the `new` keyword, you must first register the object type on the client end using the <xref:System.Runtime.Remoting.RemotingConfiguration.RegisterActivatedClientType%2A> method. Calling the <xref:System.Runtime.Remoting.RemotingConfiguration.RegisterActivatedClientType%2A> method gives the remoting infrastructure the location of the remote application, where `new` attempts to create it. If, on the other hand, you use the <xref:System.Activator.CreateInstance%2A> method to create a new instance of the client-activated object, you must supply the remote application's URL as a parameter, so no prior registration on the client end is necessary. To supply the <xref:System.Activator.CreateInstance%2A> method with the URL of the server where you want to create the object, you must encapsulate the URL in an instance of the <xref:System.Runtime.Remoting.Activation.UrlAttribute> class.","nodes":[{"content":"To activate a client-activated object type with the <ph id=\"ph1\">`new`</ph> keyword, you must first register the object type on the client end using the <ph id=\"ph2\">&lt;xref:System.Runtime.Remoting.RemotingConfiguration.RegisterActivatedClientType%2A&gt;</ph> method.","pos":[0,226],"source":"To activate a client-activated object type with the `new` keyword, you must first register the object type on the client end using the <xref:System.Runtime.Remoting.RemotingConfiguration.RegisterActivatedClientType%2A> method."},{"content":"Calling the <ph id=\"ph1\">&lt;xref:System.Runtime.Remoting.RemotingConfiguration.RegisterActivatedClientType%2A&gt;</ph> method gives the remoting infrastructure the location of the remote application, where <ph id=\"ph2\">`new`</ph> attempts to create it.","pos":[227,438],"source":" Calling the <xref:System.Runtime.Remoting.RemotingConfiguration.RegisterActivatedClientType%2A> method gives the remoting infrastructure the location of the remote application, where `new` attempts to create it."},{"content":"If, on the other hand, you use the <ph id=\"ph1\">&lt;xref:System.Activator.CreateInstance%2A&gt;</ph> method to create a new instance of the client-activated object, you must supply the remote application's URL as a parameter, so no prior registration on the client end is necessary.","pos":[439,697],"source":" If, on the other hand, you use the <xref:System.Activator.CreateInstance%2A> method to create a new instance of the client-activated object, you must supply the remote application's URL as a parameter, so no prior registration on the client end is necessary."},{"content":"To supply the <ph id=\"ph1\">&lt;xref:System.Activator.CreateInstance%2A&gt;</ph> method with the URL of the server where you want to create the object, you must encapsulate the URL in an instance of the <ph id=\"ph2\">&lt;xref:System.Runtime.Remoting.Activation.UrlAttribute&gt;</ph> class.","pos":[698,937],"source":" To supply the <xref:System.Activator.CreateInstance%2A> method with the URL of the server where you want to create the object, you must encapsulate the URL in an instance of the <xref:System.Runtime.Remoting.Activation.UrlAttribute> class."}]},{"pos":[1491,1666],"content":"For a detailed description of client-activated objects, see <bpt id=\"p1\">[</bpt>&amp;#91;<ph id=\"ph1\">\\&lt;</ph>topic://cpconClientActivation&gt;&amp;#93;<ept id=\"p1\">](http://msdn.microsoft.com/en-us/4a791494-c18a-4711-a5c1-4ab0e49a8f1a)</ept>.","source":"For a detailed description of client-activated objects, see [&#91;\\<topic://cpconClientActivation>&#93;](http://msdn.microsoft.com/en-us/4a791494-c18a-4711-a5c1-4ab0e49a8f1a)."}],"pos":[62547,64221],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Type\"></xref> of object to register.","nodes":[{"pos":[0,59],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Type\"&gt;&lt;/xref&gt;</ph> of object to register.","source":"The <xref href=\"System.Type\"></xref> of object to register."}],"pos":[65783,65843],"yaml":true},{"content":"At least one of the callers higher in the callstack does not have permission to configure remoting types and channels.","nodes":[{"pos":[0,118],"content":"At least one of the callers higher in the callstack does not have permission to configure remoting types and channels.","nodes":[{"content":"At least one of the callers higher in the callstack does not have permission to configure remoting types and channels.","pos":[0,118]}]}],"pos":[66057,66176],"yaml":true},{"content":"Registers an object <xref href=\"System.Type\"></xref> recorded in the provided <xref href=\"System.Runtime.Remoting.WellKnownClientTypeEntry\"></xref> on the client end as a well-known type that can be activated on the server.","nodes":[{"pos":[0,223],"content":"Registers an object <ph id=\"ph1\">&lt;xref href=\"System.Type\"&gt;&lt;/xref&gt;</ph> recorded in the provided <ph id=\"ph2\">&lt;xref href=\"System.Runtime.Remoting.WellKnownClientTypeEntry\"&gt;&lt;/xref&gt;</ph> on the client end as a well-known type that can be activated on the server.","source":"Registers an object <xref href=\"System.Type\"></xref> recorded in the provided <xref href=\"System.Runtime.Remoting.WellKnownClientTypeEntry\"></xref> on the client end as a well-known type that can be activated on the server."}],"pos":[67566,67790],"yaml":true},{"content":"Any client that knows the URI of a registered well-known object can obtain a proxy for the object by registering the channel it prefers with <xref:System.Runtime.Remoting.Channels.ChannelServices>, and activating the object by calling `new` or <xref:System.Activator.GetObject%2A?displayProperty=fullName>. To activate a well-known object with `new`, you must first register the well-known object type on the client using the <xref:System.Runtime.Remoting.RemotingConfiguration.RegisterWellKnownClientType%2A> method. Calling the <xref:System.Runtime.Remoting.RemotingConfiguration.RegisterWellKnownClientType%2A> method gives the remoting infrastructure the location of the remote object, which allows the `new` keyword to create it. If, on the other hand, you use the <xref:System.Activator.GetObject%2A?displayProperty=fullName> method to activate the well-known object, you must supply it with the object's URL as an argument, so no prior registration on the client end is necessary.  \n  \n For a detailed description of well-known objects, see [&#91;\\<topic://cpconServerActivation>&#93;](http://msdn.microsoft.com/en-us/77ded6e2-4ca8-448b-acf2-562d27fd4396).","nodes":[{"pos":[0,987],"content":"Any client that knows the URI of a registered well-known object can obtain a proxy for the object by registering the channel it prefers with <xref:System.Runtime.Remoting.Channels.ChannelServices>, and activating the object by calling `new` or <xref:System.Activator.GetObject%2A?displayProperty=fullName>. To activate a well-known object with `new`, you must first register the well-known object type on the client using the <xref:System.Runtime.Remoting.RemotingConfiguration.RegisterWellKnownClientType%2A> method. Calling the <xref:System.Runtime.Remoting.RemotingConfiguration.RegisterWellKnownClientType%2A> method gives the remoting infrastructure the location of the remote object, which allows the `new` keyword to create it. If, on the other hand, you use the <xref:System.Activator.GetObject%2A?displayProperty=fullName> method to activate the well-known object, you must supply it with the object's URL as an argument, so no prior registration on the client end is necessary.","nodes":[{"content":"Any client that knows the URI of a registered well-known object can obtain a proxy for the object by registering the channel it prefers with <ph id=\"ph1\">&lt;xref:System.Runtime.Remoting.Channels.ChannelServices&gt;</ph>, and activating the object by calling <ph id=\"ph2\">`new`</ph> or <ph id=\"ph3\">&lt;xref:System.Activator.GetObject%2A?displayProperty=fullName&gt;</ph>.","pos":[0,306],"source":"Any client that knows the URI of a registered well-known object can obtain a proxy for the object by registering the channel it prefers with <xref:System.Runtime.Remoting.Channels.ChannelServices>, and activating the object by calling `new` or <xref:System.Activator.GetObject%2A?displayProperty=fullName>."},{"content":"To activate a well-known object with <ph id=\"ph1\">`new`</ph>, you must first register the well-known object type on the client using the <ph id=\"ph2\">&lt;xref:System.Runtime.Remoting.RemotingConfiguration.RegisterWellKnownClientType%2A&gt;</ph> method.","pos":[307,517],"source":" To activate a well-known object with `new`, you must first register the well-known object type on the client using the <xref:System.Runtime.Remoting.RemotingConfiguration.RegisterWellKnownClientType%2A> method."},{"content":"Calling the <ph id=\"ph1\">&lt;xref:System.Runtime.Remoting.RemotingConfiguration.RegisterWellKnownClientType%2A&gt;</ph> method gives the remoting infrastructure the location of the remote object, which allows the <ph id=\"ph2\">`new`</ph> keyword to create it.","pos":[518,734],"source":" Calling the <xref:System.Runtime.Remoting.RemotingConfiguration.RegisterWellKnownClientType%2A> method gives the remoting infrastructure the location of the remote object, which allows the `new` keyword to create it."},{"content":"If, on the other hand, you use the <ph id=\"ph1\">&lt;xref:System.Activator.GetObject%2A?displayProperty=fullName&gt;</ph> method to activate the well-known object, you must supply it with the object's URL as an argument, so no prior registration on the client end is necessary.","pos":[735,987],"source":" If, on the other hand, you use the <xref:System.Activator.GetObject%2A?displayProperty=fullName> method to activate the well-known object, you must supply it with the object's URL as an argument, so no prior registration on the client end is necessary."}]},{"pos":[994,1163],"content":"For a detailed description of well-known objects, see <bpt id=\"p1\">[</bpt>&amp;#91;<ph id=\"ph1\">\\&lt;</ph>topic://cpconServerActivation&gt;&amp;#93;<ept id=\"p1\">](http://msdn.microsoft.com/en-us/77ded6e2-4ca8-448b-acf2-562d27fd4396)</ept>.","source":"For a detailed description of well-known objects, see [&#91;\\<topic://cpconServerActivation>&#93;](http://msdn.microsoft.com/en-us/77ded6e2-4ca8-448b-acf2-562d27fd4396)."}],"pos":[67801,68970],"yaml":true,"extradata":"MT"},{"content":"Configuration settings for the well-known type.","nodes":[{"pos":[0,47],"content":"Configuration settings for the well-known type.","nodes":[{"content":"Configuration settings for the well-known type.","pos":[0,47]}]}],"pos":[69210,69258],"yaml":true},{"content":"At least one of the callers higher in the callstack does not have permission to configure remoting types and channels.","nodes":[{"pos":[0,118],"content":"At least one of the callers higher in the callstack does not have permission to configure remoting types and channels.","nodes":[{"content":"At least one of the callers higher in the callstack does not have permission to configure remoting types and channels.","pos":[0,118]}]}],"pos":[69471,69590],"yaml":true},{"content":"Registers an object <xref href=\"System.Type\"></xref> on the client end as a well-known type that can be activated on the server, using the given parameters to initialize a new instance of the <xref href=\"System.Runtime.Remoting.WellKnownClientTypeEntry\"></xref> class.","nodes":[{"pos":[0,268],"content":"Registers an object <ph id=\"ph1\">&lt;xref href=\"System.Type\"&gt;&lt;/xref&gt;</ph> on the client end as a well-known type that can be activated on the server, using the given parameters to initialize a new instance of the <ph id=\"ph2\">&lt;xref href=\"System.Runtime.Remoting.WellKnownClientTypeEntry\"&gt;&lt;/xref&gt;</ph> class.","source":"Registers an object <xref href=\"System.Type\"></xref> on the client end as a well-known type that can be activated on the server, using the given parameters to initialize a new instance of the <xref href=\"System.Runtime.Remoting.WellKnownClientTypeEntry\"></xref> class."}],"pos":[70875,71144],"yaml":true},{"content":"Any client that knows the URI of a registered well-known object can obtain a proxy for the object by registering the channel it prefers with <xref:System.Runtime.Remoting.Channels.ChannelServices>, and activating the object by calling `new` or <xref:System.Activator.GetObject%2A?displayProperty=fullName>. To activate a well-known object with `new`, you must first register the well-known object type on the client using the <xref:System.Runtime.Remoting.RemotingConfiguration.RegisterWellKnownClientType%2A> method. Calling the <xref:System.Runtime.Remoting.RemotingConfiguration.RegisterWellKnownClientType%2A> method gives the remoting infrastructure the location of the remote object, which allows the `new` keyword to create it. If, on the other hand, you use the <xref:System.Activator.GetObject%2A?displayProperty=fullName> method to activate the well-known object, you must supply it with the object's URL as an argument, so no prior registration on the client end is necessary.  \n  \n For a detailed description of well-known objects, see [&#91;\\<topic://cpconServerActivation>&#93;](http://msdn.microsoft.com/en-us/77ded6e2-4ca8-448b-acf2-562d27fd4396).","nodes":[{"pos":[0,987],"content":"Any client that knows the URI of a registered well-known object can obtain a proxy for the object by registering the channel it prefers with <xref:System.Runtime.Remoting.Channels.ChannelServices>, and activating the object by calling `new` or <xref:System.Activator.GetObject%2A?displayProperty=fullName>. To activate a well-known object with `new`, you must first register the well-known object type on the client using the <xref:System.Runtime.Remoting.RemotingConfiguration.RegisterWellKnownClientType%2A> method. Calling the <xref:System.Runtime.Remoting.RemotingConfiguration.RegisterWellKnownClientType%2A> method gives the remoting infrastructure the location of the remote object, which allows the `new` keyword to create it. If, on the other hand, you use the <xref:System.Activator.GetObject%2A?displayProperty=fullName> method to activate the well-known object, you must supply it with the object's URL as an argument, so no prior registration on the client end is necessary.","nodes":[{"content":"Any client that knows the URI of a registered well-known object can obtain a proxy for the object by registering the channel it prefers with <ph id=\"ph1\">&lt;xref:System.Runtime.Remoting.Channels.ChannelServices&gt;</ph>, and activating the object by calling <ph id=\"ph2\">`new`</ph> or <ph id=\"ph3\">&lt;xref:System.Activator.GetObject%2A?displayProperty=fullName&gt;</ph>.","pos":[0,306],"source":"Any client that knows the URI of a registered well-known object can obtain a proxy for the object by registering the channel it prefers with <xref:System.Runtime.Remoting.Channels.ChannelServices>, and activating the object by calling `new` or <xref:System.Activator.GetObject%2A?displayProperty=fullName>."},{"content":"To activate a well-known object with <ph id=\"ph1\">`new`</ph>, you must first register the well-known object type on the client using the <ph id=\"ph2\">&lt;xref:System.Runtime.Remoting.RemotingConfiguration.RegisterWellKnownClientType%2A&gt;</ph> method.","pos":[307,517],"source":" To activate a well-known object with `new`, you must first register the well-known object type on the client using the <xref:System.Runtime.Remoting.RemotingConfiguration.RegisterWellKnownClientType%2A> method."},{"content":"Calling the <ph id=\"ph1\">&lt;xref:System.Runtime.Remoting.RemotingConfiguration.RegisterWellKnownClientType%2A&gt;</ph> method gives the remoting infrastructure the location of the remote object, which allows the <ph id=\"ph2\">`new`</ph> keyword to create it.","pos":[518,734],"source":" Calling the <xref:System.Runtime.Remoting.RemotingConfiguration.RegisterWellKnownClientType%2A> method gives the remoting infrastructure the location of the remote object, which allows the `new` keyword to create it."},{"content":"If, on the other hand, you use the <ph id=\"ph1\">&lt;xref:System.Activator.GetObject%2A?displayProperty=fullName&gt;</ph> method to activate the well-known object, you must supply it with the object's URL as an argument, so no prior registration on the client end is necessary.","pos":[735,987],"source":" If, on the other hand, you use the <xref:System.Activator.GetObject%2A?displayProperty=fullName> method to activate the well-known object, you must supply it with the object's URL as an argument, so no prior registration on the client end is necessary."}]},{"pos":[994,1163],"content":"For a detailed description of well-known objects, see <bpt id=\"p1\">[</bpt>&amp;#91;<ph id=\"ph1\">\\&lt;</ph>topic://cpconServerActivation&gt;&amp;#93;<ept id=\"p1\">](http://msdn.microsoft.com/en-us/77ded6e2-4ca8-448b-acf2-562d27fd4396)</ept>.","source":"For a detailed description of well-known objects, see [&#91;\\<topic://cpconServerActivation>&#93;](http://msdn.microsoft.com/en-us/77ded6e2-4ca8-448b-acf2-562d27fd4396)."}],"pos":[71155,72324],"yaml":true,"extradata":"MT"},{"content":"The object <xref href=\"System.Type\"></xref>.","nodes":[{"pos":[0,44],"content":"The object <ph id=\"ph1\">&lt;xref href=\"System.Type\"&gt;&lt;/xref&gt;</ph>.","source":"The object <xref href=\"System.Type\"></xref>."}],"pos":[74273,74318],"yaml":true},{"content":"URL of a well-known client object.","nodes":[{"pos":[0,34],"content":"URL of a well-known client object.","nodes":[{"content":"URL of a well-known client object.","pos":[0,34]}]}],"pos":[74383,74418],"yaml":true},{"content":"At least one of the callers higher in the callstack does not have permission to configure remoting types and channels.","nodes":[{"pos":[0,118],"content":"At least one of the callers higher in the callstack does not have permission to configure remoting types and channels.","nodes":[{"content":"At least one of the callers higher in the callstack does not have permission to configure remoting types and channels.","pos":[0,118]}]}],"pos":[74631,74750],"yaml":true},{"content":"Registers an object <xref href=\"System.Type\"></xref> recorded in the provided <xref href=\"System.Runtime.Remoting.WellKnownServiceTypeEntry\"></xref> on the service end as a well-known type.","nodes":[{"pos":[0,189],"content":"Registers an object <ph id=\"ph1\">&lt;xref href=\"System.Type\"&gt;&lt;/xref&gt;</ph> recorded in the provided <ph id=\"ph2\">&lt;xref href=\"System.Runtime.Remoting.WellKnownServiceTypeEntry\"&gt;&lt;/xref&gt;</ph> on the service end as a well-known type.","source":"Registers an object <xref href=\"System.Type\"></xref> recorded in the provided <xref href=\"System.Runtime.Remoting.WellKnownServiceTypeEntry\"></xref> on the service end as a well-known type."}],"pos":[76152,76342],"yaml":true},{"content":"Any client that knows the URI of a registered well-known object can obtain a proxy for the object by registering the channel it prefers with <xref:System.Runtime.Remoting.Channels.ChannelServices>, and activating the object by calling `new` or the <xref:System.Activator.GetObject%2A?displayProperty=fullName> method. To activate a well-known object with `new`, you must first register the well-known object type on the client using the <xref:System.Runtime.Remoting.RemotingConfiguration.RegisterWellKnownClientType%2A> method. Calling the <xref:System.Runtime.Remoting.RemotingConfiguration.RegisterWellKnownClientType%2A> method gives the remoting infrastructure the location of the remote object, which allows the `new` keyword to create it. If, on the other hand, you use the <xref:System.Activator.GetObject%2A?displayProperty=fullName> method to activate the well-known object, you must supply it with the object's URL as an argument, so no prior registration on the client end is necessary.  \n  \n When the call arrives at the server, the .NET Framework extracts the URI from the message, examines the remoting tables to locate the reference for the object that matches the URI, and then instantiates the object if necessary, forwarding the method call to the object. If the object is registered as <xref:System.Runtime.Remoting.WellKnownObjectMode.SingleCall>, it is destroyed after the method call is completed. A new instance of the object is created for each method called. The only difference between <xref:System.Activator.GetObject%2A?displayProperty=fullName> and `new` is that the former allows you to specify a URL as a parameter, and the latter obtains the URL from the configuration.  \n  \n The remote object itself is not instantiated by the registration process. This only happens when a client attempts to call a method on the object or activates the object from the client side.  \n  \n For a detailed description of well-known objects, see [&#91;\\<topic://cpconServerActivation>&#93;](http://msdn.microsoft.com/en-us/77ded6e2-4ca8-448b-acf2-562d27fd4396).","nodes":[{"pos":[0,998],"content":"Any client that knows the URI of a registered well-known object can obtain a proxy for the object by registering the channel it prefers with <xref:System.Runtime.Remoting.Channels.ChannelServices>, and activating the object by calling `new` or the <xref:System.Activator.GetObject%2A?displayProperty=fullName> method. To activate a well-known object with `new`, you must first register the well-known object type on the client using the <xref:System.Runtime.Remoting.RemotingConfiguration.RegisterWellKnownClientType%2A> method. Calling the <xref:System.Runtime.Remoting.RemotingConfiguration.RegisterWellKnownClientType%2A> method gives the remoting infrastructure the location of the remote object, which allows the `new` keyword to create it. If, on the other hand, you use the <xref:System.Activator.GetObject%2A?displayProperty=fullName> method to activate the well-known object, you must supply it with the object's URL as an argument, so no prior registration on the client end is necessary.","nodes":[{"content":"Any client that knows the URI of a registered well-known object can obtain a proxy for the object by registering the channel it prefers with <ph id=\"ph1\">&lt;xref:System.Runtime.Remoting.Channels.ChannelServices&gt;</ph>, and activating the object by calling <ph id=\"ph2\">`new`</ph> or the <ph id=\"ph3\">&lt;xref:System.Activator.GetObject%2A?displayProperty=fullName&gt;</ph> method.","pos":[0,317],"source":"Any client that knows the URI of a registered well-known object can obtain a proxy for the object by registering the channel it prefers with <xref:System.Runtime.Remoting.Channels.ChannelServices>, and activating the object by calling `new` or the <xref:System.Activator.GetObject%2A?displayProperty=fullName> method."},{"content":"To activate a well-known object with <ph id=\"ph1\">`new`</ph>, you must first register the well-known object type on the client using the <ph id=\"ph2\">&lt;xref:System.Runtime.Remoting.RemotingConfiguration.RegisterWellKnownClientType%2A&gt;</ph> method.","pos":[318,528],"source":" To activate a well-known object with `new`, you must first register the well-known object type on the client using the <xref:System.Runtime.Remoting.RemotingConfiguration.RegisterWellKnownClientType%2A> method."},{"content":"Calling the <ph id=\"ph1\">&lt;xref:System.Runtime.Remoting.RemotingConfiguration.RegisterWellKnownClientType%2A&gt;</ph> method gives the remoting infrastructure the location of the remote object, which allows the <ph id=\"ph2\">`new`</ph> keyword to create it.","pos":[529,745],"source":" Calling the <xref:System.Runtime.Remoting.RemotingConfiguration.RegisterWellKnownClientType%2A> method gives the remoting infrastructure the location of the remote object, which allows the `new` keyword to create it."},{"content":"If, on the other hand, you use the <ph id=\"ph1\">&lt;xref:System.Activator.GetObject%2A?displayProperty=fullName&gt;</ph> method to activate the well-known object, you must supply it with the object's URL as an argument, so no prior registration on the client end is necessary.","pos":[746,998],"source":" If, on the other hand, you use the <xref:System.Activator.GetObject%2A?displayProperty=fullName> method to activate the well-known object, you must supply it with the object's URL as an argument, so no prior registration on the client end is necessary."}]},{"pos":[1005,1702],"content":"When the call arrives at the server, the .NET Framework extracts the URI from the message, examines the remoting tables to locate the reference for the object that matches the URI, and then instantiates the object if necessary, forwarding the method call to the object. If the object is registered as <xref:System.Runtime.Remoting.WellKnownObjectMode.SingleCall>, it is destroyed after the method call is completed. A new instance of the object is created for each method called. The only difference between <xref:System.Activator.GetObject%2A?displayProperty=fullName> and `new` is that the former allows you to specify a URL as a parameter, and the latter obtains the URL from the configuration.","nodes":[{"content":"When the call arrives at the server, the .NET Framework extracts the URI from the message, examines the remoting tables to locate the reference for the object that matches the URI, and then instantiates the object if necessary, forwarding the method call to the object.","pos":[0,269]},{"content":"If the object is registered as <ph id=\"ph1\">&lt;xref:System.Runtime.Remoting.WellKnownObjectMode.SingleCall&gt;</ph>, it is destroyed after the method call is completed.","pos":[270,415],"source":" If the object is registered as <xref:System.Runtime.Remoting.WellKnownObjectMode.SingleCall>, it is destroyed after the method call is completed."},{"content":"A new instance of the object is created for each method called.","pos":[416,479]},{"content":"The only difference between <ph id=\"ph1\">&lt;xref:System.Activator.GetObject%2A?displayProperty=fullName&gt;</ph> and <ph id=\"ph2\">`new`</ph> is that the former allows you to specify a URL as a parameter, and the latter obtains the URL from the configuration.","pos":[480,697],"source":" The only difference between <xref:System.Activator.GetObject%2A?displayProperty=fullName> and `new` is that the former allows you to specify a URL as a parameter, and the latter obtains the URL from the configuration."}]},{"pos":[1709,1900],"content":"The remote object itself is not instantiated by the registration process. This only happens when a client attempts to call a method on the object or activates the object from the client side.","nodes":[{"content":"The remote object itself is not instantiated by the registration process. This only happens when a client attempts to call a method on the object or activates the object from the client side.","pos":[0,191],"nodes":[{"content":"The remote object itself is not instantiated by the registration process.","pos":[0,73]},{"content":"This only happens when a client attempts to call a method on the object or activates the object from the client side.","pos":[74,191]}]}]},{"pos":[1907,2076],"content":"For a detailed description of well-known objects, see <bpt id=\"p1\">[</bpt>&amp;#91;<ph id=\"ph1\">\\&lt;</ph>topic://cpconServerActivation&gt;&amp;#93;<ept id=\"p1\">](http://msdn.microsoft.com/en-us/77ded6e2-4ca8-448b-acf2-562d27fd4396)</ept>.","source":"For a detailed description of well-known objects, see [&#91;\\<topic://cpconServerActivation>&#93;](http://msdn.microsoft.com/en-us/77ded6e2-4ca8-448b-acf2-562d27fd4396)."}],"pos":[76353,78439],"yaml":true,"extradata":"MT"},{"content":"Configuration settings for the well-known type.","nodes":[{"pos":[0,47],"content":"Configuration settings for the well-known type.","nodes":[{"content":"Configuration settings for the well-known type.","pos":[0,47]}]}],"pos":[79041,79089],"yaml":true},{"content":"At least one of the callers higher in the callstack does not have permission to configure remoting types and channels.","nodes":[{"pos":[0,118],"content":"At least one of the callers higher in the callstack does not have permission to configure remoting types and channels.","nodes":[{"content":"At least one of the callers higher in the callstack does not have permission to configure remoting types and channels.","pos":[0,118]}]}],"pos":[79303,79422],"yaml":true},{"content":"Registers an object <xref href=\"System.Type\"></xref> on the service end as a well-known type, using the given parameters to initialize a new instance of <xref href=\"System.Runtime.Remoting.WellKnownServiceTypeEntry\"></xref>.","nodes":[{"pos":[0,224],"content":"Registers an object <ph id=\"ph1\">&lt;xref href=\"System.Type\"&gt;&lt;/xref&gt;</ph> on the service end as a well-known type, using the given parameters to initialize a new instance of <ph id=\"ph2\">&lt;xref href=\"System.Runtime.Remoting.WellKnownServiceTypeEntry\"&gt;&lt;/xref&gt;</ph>.","source":"Registers an object <xref href=\"System.Type\"></xref> on the service end as a well-known type, using the given parameters to initialize a new instance of <xref href=\"System.Runtime.Remoting.WellKnownServiceTypeEntry\"></xref>."}],"pos":[80908,81133],"yaml":true},{"content":"Any client that knows the URI of a registered well-known object can obtain a proxy for the object by registering the channel it prefers with <xref:System.Runtime.Remoting.Channels.ChannelServices>, and activating the object by calling `new` or the <xref:System.Activator.GetObject%2A?displayProperty=fullName> method. To activate a well-known object with `new`, you must first register the well-known object type on the client using the <xref:System.Runtime.Remoting.RemotingConfiguration.RegisterWellKnownClientType%2A> method. Calling the <xref:System.Runtime.Remoting.RemotingConfiguration.RegisterWellKnownClientType%2A> method gives the remoting infrastructure the location of the remote object, which allows the `new` keyword to create it. If, on the other hand, you use the <xref:System.Activator.GetObject%2A?displayProperty=fullName> method to activate the well-known object, you must supply it with the object's URL as an argument, so no prior registration on the client end is necessary.  \n  \n When the call arrives at the server, the .NET Framework extracts the URI from the message, examines the remoting tables to locate the reference for the object that matches the URI, and then instantiates the object if necessary, forwarding the method call to the object. If the object is registered as <xref:System.Runtime.Remoting.WellKnownObjectMode.SingleCall>, it is destroyed after the method call is completed. A new instance of the object is created for each method called. The only difference between <xref:System.Activator.GetObject%2A?displayProperty=fullName> and `new` is that the former allows you to specify a URL as a parameter, and the latter obtains the URL from the configuration.  \n  \n The remote object itself is not instantiated by the registration process. This only happens when a client attempts to call a method on the object or activates the object from the client side.  \n  \n For a detailed description of well-known objects, see [&#91;\\<topic://cpconServerActivation>&#93;](http://msdn.microsoft.com/en-us/77ded6e2-4ca8-448b-acf2-562d27fd4396).","nodes":[{"pos":[0,998],"content":"Any client that knows the URI of a registered well-known object can obtain a proxy for the object by registering the channel it prefers with <xref:System.Runtime.Remoting.Channels.ChannelServices>, and activating the object by calling `new` or the <xref:System.Activator.GetObject%2A?displayProperty=fullName> method. To activate a well-known object with `new`, you must first register the well-known object type on the client using the <xref:System.Runtime.Remoting.RemotingConfiguration.RegisterWellKnownClientType%2A> method. Calling the <xref:System.Runtime.Remoting.RemotingConfiguration.RegisterWellKnownClientType%2A> method gives the remoting infrastructure the location of the remote object, which allows the `new` keyword to create it. If, on the other hand, you use the <xref:System.Activator.GetObject%2A?displayProperty=fullName> method to activate the well-known object, you must supply it with the object's URL as an argument, so no prior registration on the client end is necessary.","nodes":[{"content":"Any client that knows the URI of a registered well-known object can obtain a proxy for the object by registering the channel it prefers with <ph id=\"ph1\">&lt;xref:System.Runtime.Remoting.Channels.ChannelServices&gt;</ph>, and activating the object by calling <ph id=\"ph2\">`new`</ph> or the <ph id=\"ph3\">&lt;xref:System.Activator.GetObject%2A?displayProperty=fullName&gt;</ph> method.","pos":[0,317],"source":"Any client that knows the URI of a registered well-known object can obtain a proxy for the object by registering the channel it prefers with <xref:System.Runtime.Remoting.Channels.ChannelServices>, and activating the object by calling `new` or the <xref:System.Activator.GetObject%2A?displayProperty=fullName> method."},{"content":"To activate a well-known object with <ph id=\"ph1\">`new`</ph>, you must first register the well-known object type on the client using the <ph id=\"ph2\">&lt;xref:System.Runtime.Remoting.RemotingConfiguration.RegisterWellKnownClientType%2A&gt;</ph> method.","pos":[318,528],"source":" To activate a well-known object with `new`, you must first register the well-known object type on the client using the <xref:System.Runtime.Remoting.RemotingConfiguration.RegisterWellKnownClientType%2A> method."},{"content":"Calling the <ph id=\"ph1\">&lt;xref:System.Runtime.Remoting.RemotingConfiguration.RegisterWellKnownClientType%2A&gt;</ph> method gives the remoting infrastructure the location of the remote object, which allows the <ph id=\"ph2\">`new`</ph> keyword to create it.","pos":[529,745],"source":" Calling the <xref:System.Runtime.Remoting.RemotingConfiguration.RegisterWellKnownClientType%2A> method gives the remoting infrastructure the location of the remote object, which allows the `new` keyword to create it."},{"content":"If, on the other hand, you use the <ph id=\"ph1\">&lt;xref:System.Activator.GetObject%2A?displayProperty=fullName&gt;</ph> method to activate the well-known object, you must supply it with the object's URL as an argument, so no prior registration on the client end is necessary.","pos":[746,998],"source":" If, on the other hand, you use the <xref:System.Activator.GetObject%2A?displayProperty=fullName> method to activate the well-known object, you must supply it with the object's URL as an argument, so no prior registration on the client end is necessary."}]},{"pos":[1005,1702],"content":"When the call arrives at the server, the .NET Framework extracts the URI from the message, examines the remoting tables to locate the reference for the object that matches the URI, and then instantiates the object if necessary, forwarding the method call to the object. If the object is registered as <xref:System.Runtime.Remoting.WellKnownObjectMode.SingleCall>, it is destroyed after the method call is completed. A new instance of the object is created for each method called. The only difference between <xref:System.Activator.GetObject%2A?displayProperty=fullName> and `new` is that the former allows you to specify a URL as a parameter, and the latter obtains the URL from the configuration.","nodes":[{"content":"When the call arrives at the server, the .NET Framework extracts the URI from the message, examines the remoting tables to locate the reference for the object that matches the URI, and then instantiates the object if necessary, forwarding the method call to the object.","pos":[0,269]},{"content":"If the object is registered as <ph id=\"ph1\">&lt;xref:System.Runtime.Remoting.WellKnownObjectMode.SingleCall&gt;</ph>, it is destroyed after the method call is completed.","pos":[270,415],"source":" If the object is registered as <xref:System.Runtime.Remoting.WellKnownObjectMode.SingleCall>, it is destroyed after the method call is completed."},{"content":"A new instance of the object is created for each method called.","pos":[416,479]},{"content":"The only difference between <ph id=\"ph1\">&lt;xref:System.Activator.GetObject%2A?displayProperty=fullName&gt;</ph> and <ph id=\"ph2\">`new`</ph> is that the former allows you to specify a URL as a parameter, and the latter obtains the URL from the configuration.","pos":[480,697],"source":" The only difference between <xref:System.Activator.GetObject%2A?displayProperty=fullName> and `new` is that the former allows you to specify a URL as a parameter, and the latter obtains the URL from the configuration."}]},{"pos":[1709,1900],"content":"The remote object itself is not instantiated by the registration process. This only happens when a client attempts to call a method on the object or activates the object from the client side.","nodes":[{"content":"The remote object itself is not instantiated by the registration process. This only happens when a client attempts to call a method on the object or activates the object from the client side.","pos":[0,191],"nodes":[{"content":"The remote object itself is not instantiated by the registration process.","pos":[0,73]},{"content":"This only happens when a client attempts to call a method on the object or activates the object from the client side.","pos":[74,191]}]}]},{"pos":[1907,2076],"content":"For a detailed description of well-known objects, see <bpt id=\"p1\">[</bpt>&amp;#91;<ph id=\"ph1\">\\&lt;</ph>topic://cpconServerActivation&gt;&amp;#93;<ept id=\"p1\">](http://msdn.microsoft.com/en-us/77ded6e2-4ca8-448b-acf2-562d27fd4396)</ept>.","source":"For a detailed description of well-known objects, see [&#91;\\<topic://cpconServerActivation>&#93;](http://msdn.microsoft.com/en-us/77ded6e2-4ca8-448b-acf2-562d27fd4396)."}],"pos":[81144,83230],"yaml":true,"extradata":"MT"},{"content":"The object <xref href=\"System.Type\"></xref>.","nodes":[{"pos":[0,44],"content":"The object <ph id=\"ph1\">&lt;xref href=\"System.Type\"&gt;&lt;/xref&gt;</ph>.","source":"The object <xref href=\"System.Type\"></xref>."}],"pos":[85824,85869],"yaml":true},{"content":"The object URI.","nodes":[{"pos":[0,15],"content":"The object URI.","nodes":[{"content":"The object URI.","pos":[0,15]}]}],"pos":[85934,85950],"yaml":true},{"content":"The activation mode of the well-known object type being registered. (See <xref href=\"System.Runtime.Remoting.WellKnownObjectMode\"></xref>.)","nodes":[{"pos":[0,139],"content":"The activation mode of the well-known object type being registered. (See <xref href=\"System.Runtime.Remoting.WellKnownObjectMode\"></xref>.)","nodes":[{"content":"The activation mode of the well-known object type being registered.","pos":[0,67]},{"content":"(See <ph id=\"ph1\">&lt;xref href=\"System.Runtime.Remoting.WellKnownObjectMode\"&gt;&lt;/xref&gt;</ph>.)","pos":[68,139],"source":" (See <xref href=\"System.Runtime.Remoting.WellKnownObjectMode\"></xref>.)"}]}],"pos":[86040,86180],"yaml":true},{"content":"At least one of the callers higher in the callstack does not have permission to configure remoting types and channels.","nodes":[{"pos":[0,118],"content":"At least one of the callers higher in the callstack does not have permission to configure remoting types and channels.","nodes":[{"content":"At least one of the callers higher in the callstack does not have permission to configure remoting types and channels.","pos":[0,118]}]}],"pos":[86394,86513],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Runtime.Remoting.RemotingConfiguration\n  commentId: T:System.Runtime.Remoting.RemotingConfiguration\n  id: RemotingConfiguration\n  children:\n  - System.Runtime.Remoting.RemotingConfiguration.ApplicationId\n  - System.Runtime.Remoting.RemotingConfiguration.ApplicationName\n  - System.Runtime.Remoting.RemotingConfiguration.Configure(System.String)\n  - System.Runtime.Remoting.RemotingConfiguration.Configure(System.String,System.Boolean)\n  - System.Runtime.Remoting.RemotingConfiguration.CustomErrorsEnabled(System.Boolean)\n  - System.Runtime.Remoting.RemotingConfiguration.CustomErrorsMode\n  - System.Runtime.Remoting.RemotingConfiguration.GetRegisteredActivatedClientTypes\n  - System.Runtime.Remoting.RemotingConfiguration.GetRegisteredActivatedServiceTypes\n  - System.Runtime.Remoting.RemotingConfiguration.GetRegisteredWellKnownClientTypes\n  - System.Runtime.Remoting.RemotingConfiguration.GetRegisteredWellKnownServiceTypes\n  - System.Runtime.Remoting.RemotingConfiguration.IsActivationAllowed(System.Type)\n  - System.Runtime.Remoting.RemotingConfiguration.IsRemotelyActivatedClientType(System.String,System.String)\n  - System.Runtime.Remoting.RemotingConfiguration.IsRemotelyActivatedClientType(System.Type)\n  - System.Runtime.Remoting.RemotingConfiguration.IsWellKnownClientType(System.Type)\n  - System.Runtime.Remoting.RemotingConfiguration.IsWellKnownClientType(System.String,System.String)\n  - System.Runtime.Remoting.RemotingConfiguration.ProcessId\n  - System.Runtime.Remoting.RemotingConfiguration.RegisterActivatedClientType(System.Runtime.Remoting.ActivatedClientTypeEntry)\n  - System.Runtime.Remoting.RemotingConfiguration.RegisterActivatedClientType(System.Type,System.String)\n  - System.Runtime.Remoting.RemotingConfiguration.RegisterActivatedServiceType(System.Runtime.Remoting.ActivatedServiceTypeEntry)\n  - System.Runtime.Remoting.RemotingConfiguration.RegisterActivatedServiceType(System.Type)\n  - System.Runtime.Remoting.RemotingConfiguration.RegisterWellKnownClientType(System.Runtime.Remoting.WellKnownClientTypeEntry)\n  - System.Runtime.Remoting.RemotingConfiguration.RegisterWellKnownClientType(System.Type,System.String)\n  - System.Runtime.Remoting.RemotingConfiguration.RegisterWellKnownServiceType(System.Runtime.Remoting.WellKnownServiceTypeEntry)\n  - System.Runtime.Remoting.RemotingConfiguration.RegisterWellKnownServiceType(System.Type,System.String,System.Runtime.Remoting.WellKnownObjectMode)\n  langs:\n  - csharp\n  name: RemotingConfiguration\n  nameWithType: RemotingConfiguration\n  fullName: System.Runtime.Remoting.RemotingConfiguration\n  type: Class\n  assemblies:\n  - mscorlib\n  namespace: System.Runtime.Remoting\n  summary: Provides various static methods for configuring the remoting infrastructure.\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(true)]\n\n      public static class RemotingConfiguration\n  inheritance:\n  - System.Object\n  implements: []\n  inheritedMembers:\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.ToString\n  attributes:\n  - type: System.Runtime.InteropServices.ComVisibleAttribute\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.Remoting/RemotingConfiguration.xml\n  ms.technology:\n  - dotnet-standard\n  manager: ghogen\n- uid: System.Runtime.Remoting.RemotingConfiguration.ApplicationId\n  commentId: P:System.Runtime.Remoting.RemotingConfiguration.ApplicationId\n  id: ApplicationId\n  parent: System.Runtime.Remoting.RemotingConfiguration\n  langs:\n  - csharp\n  name: ApplicationId\n  nameWithType: RemotingConfiguration.ApplicationId\n  fullName: RemotingConfiguration.ApplicationId\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Runtime.Remoting\n  summary: Gets the ID of the currently executing application.\n  remarks: The application ID is prepended to the URI of the objects created by the currently executing application.\n  syntax:\n    content: public static string ApplicationId { get; }\n    return:\n      type: System.String\n      description: A <xref href=\"System.String\"></xref> that contains the ID of the currently executing application.\n  overload: System.Runtime.Remoting.RemotingConfiguration.ApplicationId*\n  exceptions:\n  - type: System.Security.SecurityException\n    commentId: T:System.Security.SecurityException\n    description: The immediate caller does not have infrastructure permission.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.Remoting/RemotingConfiguration.xml\n  ms.technology:\n  - dotnet-standard\n  manager: ghogen\n- uid: System.Runtime.Remoting.RemotingConfiguration.ApplicationName\n  commentId: P:System.Runtime.Remoting.RemotingConfiguration.ApplicationName\n  id: ApplicationName\n  parent: System.Runtime.Remoting.RemotingConfiguration\n  langs:\n  - csharp\n  name: ApplicationName\n  nameWithType: RemotingConfiguration.ApplicationName\n  fullName: RemotingConfiguration.ApplicationName\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Runtime.Remoting\n  summary: Gets or sets the name of a remoting application.\n  remarks: An application name can be set only once, either through the current property or through a configuration file. If an application is running inside a hosted environment, such as Internet Information Services (IIS), this value might have already been set (usually to the virtual directory). The current property will return `null` if the application name has not been set.\n  example:\n  - \"The following code example demonstrates the use of the <xref:System.Runtime.Remoting.RemotingConfiguration.ApplicationName%2A> property to indicate the name of the remoting application. For the full example code, see examples for the <xref:System.Runtime.Remoting.RemotingConfiguration.RegisterWellKnownClientType%2A> and <xref:System.Runtime.Remoting.RemotingConfiguration.RegisterWellKnownServiceType%2A> methods.  \\n  \\n [!code-cpp[RemotingConfiguration.ServerActivation1#2](~/samples/snippets/cpp/VS_Snippets_Remoting/RemotingConfiguration.ServerActivation1/CPP/server.cpp#2)]\\n [!code-csharp[RemotingConfiguration.ServerActivation1#2](~/samples/snippets/csharp/VS_Snippets_Remoting/RemotingConfiguration.ServerActivation1/CS/server.cs#2)]\\n [!code-vb[RemotingConfiguration.ServerActivation1#2](~/samples/snippets/visualbasic/VS_Snippets_Remoting/RemotingConfiguration.ServerActivation1/VB/server.vb#2)]  \\n  \\n The following code example demonstrates how to access an object remoted from a named application.  \\n  \\n [!code-cpp[RemotingConfiguration.ServerActivation1#6](~/samples/snippets/cpp/VS_Snippets_Remoting/RemotingConfiguration.ServerActivation1/CPP/client.cpp#6)]\\n [!code-csharp[RemotingConfiguration.ServerActivation1#6](~/samples/snippets/csharp/VS_Snippets_Remoting/RemotingConfiguration.ServerActivation1/CS/client.cs#6)]\\n [!code-vb[RemotingConfiguration.ServerActivation1#6](~/samples/snippets/visualbasic/VS_Snippets_Remoting/RemotingConfiguration.ServerActivation1/VB/client.vb#6)]\"\n  syntax:\n    content: public static string ApplicationName { get; set; }\n    return:\n      type: System.String\n      description: The name of a remoting application.\n  overload: System.Runtime.Remoting.RemotingConfiguration.ApplicationName*\n  exceptions:\n  - type: System.Security.SecurityException\n    commentId: T:System.Security.SecurityException\n    description: At least one of the callers higher in the callstack does not have permission to configure remoting types and channels. This exception is thrown only when setting the property value.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.Remoting/RemotingConfiguration.xml\n  ms.technology:\n  - dotnet-standard\n  manager: ghogen\n- uid: System.Runtime.Remoting.RemotingConfiguration.Configure(System.String)\n  commentId: M:System.Runtime.Remoting.RemotingConfiguration.Configure(System.String)\n  id: Configure(System.String)\n  parent: System.Runtime.Remoting.RemotingConfiguration\n  langs:\n  - csharp\n  name: Configure(String)\n  nameWithType: RemotingConfiguration.Configure(String)\n  fullName: RemotingConfiguration.Configure(String)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Runtime.Remoting\n  summary: Reads the configuration file and configures the remoting infrastructure. <xref href=\"System.Runtime.Remoting.RemotingConfiguration.Configure(System.String)\"></xref> is obsolete. Please use <xref href=\"System.Runtime.Remoting.RemotingConfiguration.Configure(System.String,System.Boolean)\"></xref> instead.\n  remarks: \"> [!NOTE]\\n>  <xref:System.Runtime.Remoting.RemotingConfiguration.Configure%28System.String%29> is obsolete. Please use <xref:System.Runtime.Remoting.RemotingConfiguration.Configure%28System.String%2CSystem.Boolean%29> instead.  \\n  \\n Passing `null` as the `filename` parameter will cause default remoting initialization without requiring the existence of a configuration file.  \\n  \\n For configuration file syntax, see [Remoting Settings Schema](http://msdn.microsoft.com/en-us/dc2d1e62-9af7-4ca1-99fd-98b93bb4db9e).  \\n  \\n> [!NOTE]\\n>  Marshal-by-reference objects (MBRs) do not reside in memory forever. Instead, unless the type overrides <xref:System.MarshalByRefObject.InitializeLifetimeService%2A?displayProperty=fullName> to control its own lifetime policies, each MBR has a finite lifetime before the .NET Framework remoting system begins the process of deleting it and reclaiming the memory. For more information, see [Lifetime Leases](http://msdn.microsoft.com/en-us/c72d561c-1266-4c8b-b258-2c168c08da9a).\"\n  example:\n  - >-\n    [!code-cpp[RemotingConfiguration_Configure_Client#1](~/samples/snippets/cpp/VS_Snippets_Remoting/RemotingConfiguration_Configure_Client/CPP/remotingconfiguration_configure_server.cpp#1)]\n     [!code-csharp[RemotingConfiguration_Configure_Client#1](~/samples/snippets/csharp/VS_Snippets_Remoting/RemotingConfiguration_Configure_Client/CS/remotingconfiguration_configure_server.cs#1)]\n     [!code-vb[RemotingConfiguration_Configure_Client#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/RemotingConfiguration_Configure_Client/VB/remotingconfiguration_configure_server.vb#1)]\n  syntax:\n    content: >-\n      [System.Obsolete(\"Use Configure(String,Boolean)\")]\n\n      public static void Configure (string filename);\n    parameters:\n    - id: filename\n      type: System.String\n      description: The name of the remoting configuration file. Can be `null`.\n  overload: System.Runtime.Remoting.RemotingConfiguration.Configure*\n  exceptions:\n  - type: System.Security.SecurityException\n    commentId: T:System.Security.SecurityException\n    description: At least one of the callers higher in the callstack does not have permission to configure remoting types and channels.\n  attributes:\n  - type: System.ObsoleteAttribute\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.Remoting/RemotingConfiguration.xml\n  ms.technology:\n  - dotnet-standard\n  manager: ghogen\n- uid: System.Runtime.Remoting.RemotingConfiguration.Configure(System.String,System.Boolean)\n  commentId: M:System.Runtime.Remoting.RemotingConfiguration.Configure(System.String,System.Boolean)\n  id: Configure(System.String,System.Boolean)\n  parent: System.Runtime.Remoting.RemotingConfiguration\n  langs:\n  - csharp\n  name: Configure(String, Boolean)\n  nameWithType: RemotingConfiguration.Configure(String, Boolean)\n  fullName: RemotingConfiguration.Configure(String, Boolean)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Runtime.Remoting\n  summary: Reads the configuration file and configures the remoting infrastructure.\n  remarks: \"Passing `null` as the `filename` parameter will cause default remoting initialization without requiring the existence of a configuration file. For more information about remoting and security see [Security in Remoting.](http://msdn.microsoft.com/en-us/9574262c-d4b1-41c5-8600-24ff147c0add)  \\n  \\n For configuration file syntax, see [Remoting Settings Schema](http://msdn.microsoft.com/en-us/dc2d1e62-9af7-4ca1-99fd-98b93bb4db9e).  \\n  \\n> [!NOTE]\\n>  Marshal-by-reference objects (MBRs) do not reside in memory forever. Instead, unless the type overrides <xref:System.MarshalByRefObject.InitializeLifetimeService%2A?displayProperty=fullName> to control its own lifetime policies, each MBR has a finite lifetime before the .NET Framework remoting system begins the process of deleting it and reclaiming the memory. For more information, see [Lifetime Leases](http://msdn.microsoft.com/en-us/c72d561c-1266-4c8b-b258-2c168c08da9a).\"\n  syntax:\n    content: public static void Configure (string filename, bool ensureSecurity);\n    parameters:\n    - id: filename\n      type: System.String\n      description: The name of the remoting configuration file. Can be `null`.\n    - id: ensureSecurity\n      type: System.Boolean\n      description: If set to `true` security is required. If set to `false`, security is not required but still may be used.\n  overload: System.Runtime.Remoting.RemotingConfiguration.Configure*\n  exceptions:\n  - type: System.Security.SecurityException\n    commentId: T:System.Security.SecurityException\n    description: At least one of the callers higher in the callstack does not have permission to configure remoting types and channels.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.Remoting/RemotingConfiguration.xml\n  ms.technology:\n  - dotnet-standard\n  manager: ghogen\n- uid: System.Runtime.Remoting.RemotingConfiguration.CustomErrorsEnabled(System.Boolean)\n  commentId: M:System.Runtime.Remoting.RemotingConfiguration.CustomErrorsEnabled(System.Boolean)\n  id: CustomErrorsEnabled(System.Boolean)\n  parent: System.Runtime.Remoting.RemotingConfiguration\n  langs:\n  - csharp\n  name: CustomErrorsEnabled(Boolean)\n  nameWithType: RemotingConfiguration.CustomErrorsEnabled(Boolean)\n  fullName: RemotingConfiguration.CustomErrorsEnabled(Boolean)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Runtime.Remoting\n  summary: Indicates whether the server channels in this application domain return filtered or complete exception information to local or remote callers.\n  remarks: \"Complete exception information includes the exact server exception and the server stack trace. Filtered information includes a standard remoting exception but no server stack trace.  \\n  \\n The `CustomErrorsEnabled` method reflects configuration settings that were specified in the `mode` attribute of the `<customErrors>` element of the application configuration file. For more information about configuration options, see [&#91;\\\\<topic://cpconconfiguration>&#93;](http://msdn.microsoft.com/en-us/92c0c097-d984-4315-835b-7490ecdf1097).  \\n  \\n The following table shows the three server channel property values that specify which callers receive exception information and what type of information they receive.  \\n  \\n|Value|Description|  \\n|-----------|-----------------|  \\n|`off`|All callers receive complete exception information.|  \\n|`on`|All callers receive filtered exception information.|  \\n|`remoteOnly`|Local callers receive complete exception information; remote callers receive filtered exception information.|  \\n  \\n The following table shows the interaction of the `isLocalRequest` parameter and the server channel property.  \\n  \\n|Value|isLocalRequest|Return value|Description|  \\n|-----------|--------------------|------------------|-----------------|  \\n|`on`|`true`|`true`|Local callers receive filtered exception information.|  \\n|`on`|`false`|`true`|Remote callers receive filtered exception information.|  \\n|`off`|`true`|`false`|Local callers receive complete exception information.|  \\n|`off`|`false`|`false`|Remote callers receive complete exception information.|  \\n|`remoteOnly`|`true`|`false`|Local callers receive complete exception information.|  \\n|`remoteOnly`|`false`|`true`|Remote callers receive filtered exception information.|  \\n  \\n For information about using application configuration files to control the return of exception information to callers, see the `<customErrors>` element.\"\n  syntax:\n    content: public static bool CustomErrorsEnabled (bool isLocalRequest);\n    parameters:\n    - id: isLocalRequest\n      type: System.Boolean\n      description: '`true` to specify local callers; `false` to specify remote callers.'\n    return:\n      type: System.Boolean\n      description: '`true` if only filtered exception information is returned to local or remote callers, as specified by the <code>isLocalRequest</code> parameter; `false` if complete exception information is returned.'\n  overload: System.Runtime.Remoting.RemotingConfiguration.CustomErrorsEnabled*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.Remoting/RemotingConfiguration.xml\n  ms.technology:\n  - dotnet-standard\n  manager: ghogen\n- uid: System.Runtime.Remoting.RemotingConfiguration.CustomErrorsMode\n  commentId: P:System.Runtime.Remoting.RemotingConfiguration.CustomErrorsMode\n  id: CustomErrorsMode\n  parent: System.Runtime.Remoting.RemotingConfiguration\n  langs:\n  - csharp\n  name: CustomErrorsMode\n  nameWithType: RemotingConfiguration.CustomErrorsMode\n  fullName: RemotingConfiguration.CustomErrorsMode\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Runtime.Remoting\n  summary: Gets or sets value that indicates how custom errors are handled.\n  syntax:\n    content: public static System.Runtime.Remoting.CustomErrorsModes CustomErrorsMode { get; set; }\n    return:\n      type: System.Runtime.Remoting.CustomErrorsModes\n      description: A member of the <xref href=\"System.Runtime.Remoting.CustomErrorsModes\"></xref> enumeration that indicates how custom errors are handled.\n  overload: System.Runtime.Remoting.RemotingConfiguration.CustomErrorsMode*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.Remoting/RemotingConfiguration.xml\n  ms.technology:\n  - dotnet-standard\n  manager: ghogen\n- uid: System.Runtime.Remoting.RemotingConfiguration.GetRegisteredActivatedClientTypes\n  commentId: M:System.Runtime.Remoting.RemotingConfiguration.GetRegisteredActivatedClientTypes\n  id: GetRegisteredActivatedClientTypes\n  parent: System.Runtime.Remoting.RemotingConfiguration\n  langs:\n  - csharp\n  name: GetRegisteredActivatedClientTypes()\n  nameWithType: RemotingConfiguration.GetRegisteredActivatedClientTypes()\n  fullName: RemotingConfiguration.GetRegisteredActivatedClientTypes()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Runtime.Remoting\n  summary: Retrieves an array of object types registered on the client as types that will be activated remotely.\n  remarks: For a detailed description of client-activated objects, see [&#91;\\<topic://cpconClientActivation>&#93;](http://msdn.microsoft.com/en-us/4a791494-c18a-4711-a5c1-4ab0e49a8f1a).\n  syntax:\n    content: public static System.Runtime.Remoting.ActivatedClientTypeEntry[] GetRegisteredActivatedClientTypes ();\n    parameters: []\n    return:\n      type: System.Runtime.Remoting.ActivatedClientTypeEntry[]\n      description: An array of object types registered on the client as types that will be activated remotely.\n  overload: System.Runtime.Remoting.RemotingConfiguration.GetRegisteredActivatedClientTypes*\n  exceptions:\n  - type: System.Security.SecurityException\n    commentId: T:System.Security.SecurityException\n    description: At least one of the callers higher in the callstack does not have permission to configure remoting types and channels.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.Remoting/RemotingConfiguration.xml\n  ms.technology:\n  - dotnet-standard\n  manager: ghogen\n- uid: System.Runtime.Remoting.RemotingConfiguration.GetRegisteredActivatedServiceTypes\n  commentId: M:System.Runtime.Remoting.RemotingConfiguration.GetRegisteredActivatedServiceTypes\n  id: GetRegisteredActivatedServiceTypes\n  parent: System.Runtime.Remoting.RemotingConfiguration\n  langs:\n  - csharp\n  name: GetRegisteredActivatedServiceTypes()\n  nameWithType: RemotingConfiguration.GetRegisteredActivatedServiceTypes()\n  fullName: RemotingConfiguration.GetRegisteredActivatedServiceTypes()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Runtime.Remoting\n  summary: Retrieves an array of object types registered on the service end that can be activated on request from a client.\n  remarks: For a detailed description of client-activated objects, see [&#91;\\<topic://cpconClientActivation>&#93;](http://msdn.microsoft.com/en-us/4a791494-c18a-4711-a5c1-4ab0e49a8f1a).\n  example:\n  - >-\n    [!code-cpp[RemotingConfiguration_GetRegisteredActivatedServer_Client#2](~/samples/snippets/cpp/VS_Snippets_Remoting/RemotingConfiguration_GetRegisteredActivatedServer_Client/CPP/RemotingConfiguration_GetRegisteredActivatedService_server.cpp#2)]\n     [!code-csharp[RemotingConfiguration_GetRegisteredActivatedServer_Client#2](~/samples/snippets/csharp/VS_Snippets_Remoting/RemotingConfiguration_GetRegisteredActivatedServer_Client/CS/remotingconfiguration_getregisteredactivatedservice_server.cs#2)]\n     [!code-vb[RemotingConfiguration_GetRegisteredActivatedServer_Client#2](~/samples/snippets/visualbasic/VS_Snippets_Remoting/RemotingConfiguration_GetRegisteredActivatedServer_Client/VB/remotingconfiguration_getregisteredactivatedservice_server.vb#2)]\n  syntax:\n    content: public static System.Runtime.Remoting.ActivatedServiceTypeEntry[] GetRegisteredActivatedServiceTypes ();\n    parameters: []\n    return:\n      type: System.Runtime.Remoting.ActivatedServiceTypeEntry[]\n      description: An array of object types registered on the service end that can be activated on request from a client.\n  overload: System.Runtime.Remoting.RemotingConfiguration.GetRegisteredActivatedServiceTypes*\n  exceptions:\n  - type: System.Security.SecurityException\n    commentId: T:System.Security.SecurityException\n    description: At least one of the callers higher in the callstack does not have permission to configure remoting types and channels.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.Remoting/RemotingConfiguration.xml\n  ms.technology:\n  - dotnet-standard\n  manager: ghogen\n- uid: System.Runtime.Remoting.RemotingConfiguration.GetRegisteredWellKnownClientTypes\n  commentId: M:System.Runtime.Remoting.RemotingConfiguration.GetRegisteredWellKnownClientTypes\n  id: GetRegisteredWellKnownClientTypes\n  parent: System.Runtime.Remoting.RemotingConfiguration\n  langs:\n  - csharp\n  name: GetRegisteredWellKnownClientTypes()\n  nameWithType: RemotingConfiguration.GetRegisteredWellKnownClientTypes()\n  fullName: RemotingConfiguration.GetRegisteredWellKnownClientTypes()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Runtime.Remoting\n  summary: Retrieves an array of object types registered on the client end as well-known types.\n  remarks: \"Well-known object types can be either single call or singleton. If an object type is single call, then a new instance of it is created each time a call from the client comes in. All calls to a singleton object are handled by one instance of that object.  \\n  \\n For a more detailed description of well-known objects, see [&#91;\\\\<topic://cpconServerActivation>&#93;](http://msdn.microsoft.com/en-us/77ded6e2-4ca8-448b-acf2-562d27fd4396).\"\n  example:\n  - >-\n    [!code-cpp[RemotingConfiguration_GetRegisteredWellKnownClient_Client#1](~/samples/snippets/cpp/VS_Snippets_Remoting/RemotingConfiguration_GetRegisteredWellKnownClient_Client/CPP/remotingconfiguration_getregisteredwellknownclient_client.cpp#1)]\n     [!code-csharp[RemotingConfiguration_GetRegisteredWellKnownClient_Client#1](~/samples/snippets/csharp/VS_Snippets_Remoting/RemotingConfiguration_GetRegisteredWellKnownClient_Client/CS/remotingconfiguration_getregisteredwellknownclient_client.cs#1)]\n     [!code-vb[RemotingConfiguration_GetRegisteredWellKnownClient_Client#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/RemotingConfiguration_GetRegisteredWellKnownClient_Client/VB/remotingconfiguration_getregisteredwellknownclient_client.vb#1)]\n  syntax:\n    content: public static System.Runtime.Remoting.WellKnownClientTypeEntry[] GetRegisteredWellKnownClientTypes ();\n    parameters: []\n    return:\n      type: System.Runtime.Remoting.WellKnownClientTypeEntry[]\n      description: An array of object types registered on the client end as well-known types.\n  overload: System.Runtime.Remoting.RemotingConfiguration.GetRegisteredWellKnownClientTypes*\n  exceptions:\n  - type: System.Security.SecurityException\n    commentId: T:System.Security.SecurityException\n    description: At least one of the callers higher in the callstack does not have permission to configure remoting types and channels.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.Remoting/RemotingConfiguration.xml\n  ms.technology:\n  - dotnet-standard\n  manager: ghogen\n- uid: System.Runtime.Remoting.RemotingConfiguration.GetRegisteredWellKnownServiceTypes\n  commentId: M:System.Runtime.Remoting.RemotingConfiguration.GetRegisteredWellKnownServiceTypes\n  id: GetRegisteredWellKnownServiceTypes\n  parent: System.Runtime.Remoting.RemotingConfiguration\n  langs:\n  - csharp\n  name: GetRegisteredWellKnownServiceTypes()\n  nameWithType: RemotingConfiguration.GetRegisteredWellKnownServiceTypes()\n  fullName: RemotingConfiguration.GetRegisteredWellKnownServiceTypes()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Runtime.Remoting\n  summary: Retrieves an array of object types registered on the service end as well-known types.\n  remarks: \"Well-known object types can be either single call or singleton. If an object type is single call, then a new instance of it is created each time a call from the client comes in. All calls to a singleton object are handled by one instance of that object.  \\n  \\n For a more detailed description of well-known objects, see [&#91;\\\\<topic://cpconServerActivation>&#93;](http://msdn.microsoft.com/en-us/77ded6e2-4ca8-448b-acf2-562d27fd4396).\"\n  example:\n  - >-\n    [!code-cpp[RemotingConfiguration_Configure_Client#2](~/samples/snippets/cpp/VS_Snippets_Remoting/RemotingConfiguration_Configure_Client/CPP/remotingconfiguration_configure_server.cpp#2)]\n     [!code-csharp[RemotingConfiguration_Configure_Client#2](~/samples/snippets/csharp/VS_Snippets_Remoting/RemotingConfiguration_Configure_Client/CS/remotingconfiguration_configure_server.cs#2)]\n     [!code-vb[RemotingConfiguration_Configure_Client#2](~/samples/snippets/visualbasic/VS_Snippets_Remoting/RemotingConfiguration_Configure_Client/VB/remotingconfiguration_configure_server.vb#2)]\n  syntax:\n    content: public static System.Runtime.Remoting.WellKnownServiceTypeEntry[] GetRegisteredWellKnownServiceTypes ();\n    parameters: []\n    return:\n      type: System.Runtime.Remoting.WellKnownServiceTypeEntry[]\n      description: An array of object types registered on the service end as well-known types.\n  overload: System.Runtime.Remoting.RemotingConfiguration.GetRegisteredWellKnownServiceTypes*\n  exceptions:\n  - type: System.Security.SecurityException\n    commentId: T:System.Security.SecurityException\n    description: At least one of the callers higher in the callstack does not have permission to configure remoting types and channels.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.Remoting/RemotingConfiguration.xml\n  ms.technology:\n  - dotnet-standard\n  manager: ghogen\n- uid: System.Runtime.Remoting.RemotingConfiguration.IsActivationAllowed(System.Type)\n  commentId: M:System.Runtime.Remoting.RemotingConfiguration.IsActivationAllowed(System.Type)\n  id: IsActivationAllowed(System.Type)\n  parent: System.Runtime.Remoting.RemotingConfiguration\n  langs:\n  - csharp\n  name: IsActivationAllowed(Type)\n  nameWithType: RemotingConfiguration.IsActivationAllowed(Type)\n  fullName: RemotingConfiguration.IsActivationAllowed(Type)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Runtime.Remoting\n  summary: Returns a Boolean value that indicates whether the specified <xref href=\"System.Type\"></xref> is allowed to be client activated.\n  remarks: The current method is used at the server end to determine whether an activation of the object <xref:System.Type> is explicitly allowed by the server.\n  example:\n  - >-\n    [!code-cpp[RemotingConfiguration_GetRegisteredActivatedServer_Client#1](~/samples/snippets/cpp/VS_Snippets_Remoting/RemotingConfiguration_GetRegisteredActivatedServer_Client/CPP/RemotingConfiguration_GetRegisteredActivatedService_server.cpp#1)]\n     [!code-csharp[RemotingConfiguration_GetRegisteredActivatedServer_Client#1](~/samples/snippets/csharp/VS_Snippets_Remoting/RemotingConfiguration_GetRegisteredActivatedServer_Client/CS/remotingconfiguration_getregisteredactivatedservice_server.cs#1)]\n     [!code-vb[RemotingConfiguration_GetRegisteredActivatedServer_Client#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/RemotingConfiguration_GetRegisteredActivatedServer_Client/VB/remotingconfiguration_getregisteredactivatedservice_server.vb#1)]\n  syntax:\n    content: public static bool IsActivationAllowed (Type svrType);\n    parameters:\n    - id: svrType\n      type: System.Type\n      description: The object <xref href=\"System.Type\"></xref> to check.\n    return:\n      type: System.Boolean\n      description: '`true` if the specified <xref href=\"System.Type\"></xref> is allowed to be client activated; otherwise, `false`.'\n  overload: System.Runtime.Remoting.RemotingConfiguration.IsActivationAllowed*\n  exceptions:\n  - type: System.Security.SecurityException\n    commentId: T:System.Security.SecurityException\n    description: At least one of the callers higher in the callstack does not have permission to configure remoting types and channels.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.Remoting/RemotingConfiguration.xml\n  ms.technology:\n  - dotnet-standard\n  manager: ghogen\n- uid: System.Runtime.Remoting.RemotingConfiguration.IsRemotelyActivatedClientType(System.String,System.String)\n  commentId: M:System.Runtime.Remoting.RemotingConfiguration.IsRemotelyActivatedClientType(System.String,System.String)\n  id: IsRemotelyActivatedClientType(System.String,System.String)\n  parent: System.Runtime.Remoting.RemotingConfiguration\n  langs:\n  - csharp\n  name: IsRemotelyActivatedClientType(String, String)\n  nameWithType: RemotingConfiguration.IsRemotelyActivatedClientType(String, String)\n  fullName: RemotingConfiguration.IsRemotelyActivatedClientType(String, String)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Runtime.Remoting\n  summary: Checks whether the object specified by its type name and assembly name is registered as a remotely activated client type.\n  remarks: ''\n  example:\n  - >-\n    [!code-cpp[RemotingConfiguration_IsRemotelyActivatedClientType2_Client#1](~/samples/snippets/cpp/VS_Snippets_Remoting/RemotingConfiguration_IsRemotelyActivatedClientType2_Client/CPP/remotingconfiguration_isremotelyactivatedclienttype2_client.cpp#1)]\n     [!code-csharp[RemotingConfiguration_IsRemotelyActivatedClientType2_Client#1](~/samples/snippets/csharp/VS_Snippets_Remoting/RemotingConfiguration_IsRemotelyActivatedClientType2_Client/CS/remotingconfiguration_isremotelyactivatedclienttype2_client.cs#1)]\n     [!code-vb[RemotingConfiguration_IsRemotelyActivatedClientType2_Client#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/RemotingConfiguration_IsRemotelyActivatedClientType2_Client/VB/remotingconfiguration_isremotelyactivatedclienttype2_client.vb#1)]\n  syntax:\n    content: public static System.Runtime.Remoting.ActivatedClientTypeEntry IsRemotelyActivatedClientType (string typeName, string assemblyName);\n    parameters:\n    - id: typeName\n      type: System.String\n      description: The type name of the object to check.\n    - id: assemblyName\n      type: System.String\n      description: The assembly name of the object to check.\n    return:\n      type: System.Runtime.Remoting.ActivatedClientTypeEntry\n      description: The <xref href=\"System.Runtime.Remoting.ActivatedClientTypeEntry\"></xref> that corresponds to the specified object type.\n  overload: System.Runtime.Remoting.RemotingConfiguration.IsRemotelyActivatedClientType*\n  exceptions:\n  - type: System.Security.SecurityException\n    commentId: T:System.Security.SecurityException\n    description: At least one of the callers higher in the callstack does not have permission to configure remoting types and channels.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.Remoting/RemotingConfiguration.xml\n  ms.technology:\n  - dotnet-standard\n  manager: ghogen\n- uid: System.Runtime.Remoting.RemotingConfiguration.IsRemotelyActivatedClientType(System.Type)\n  commentId: M:System.Runtime.Remoting.RemotingConfiguration.IsRemotelyActivatedClientType(System.Type)\n  id: IsRemotelyActivatedClientType(System.Type)\n  parent: System.Runtime.Remoting.RemotingConfiguration\n  langs:\n  - csharp\n  name: IsRemotelyActivatedClientType(Type)\n  nameWithType: RemotingConfiguration.IsRemotelyActivatedClientType(Type)\n  fullName: RemotingConfiguration.IsRemotelyActivatedClientType(Type)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Runtime.Remoting\n  summary: Checks whether the specified object <xref href=\"System.Type\"></xref> is registered as a remotely activated client type.\n  remarks: ''\n  example:\n  - >-\n    [!code-cpp[RemotingConfiguration_IsRemotelyActivatedClientType1_Client#1](~/samples/snippets/cpp/VS_Snippets_Remoting/RemotingConfiguration_IsRemotelyActivatedClientType1_Client/CPP/remotingconfiguration_isremotelyactivatedclienttype1_client.cpp#1)]\n     [!code-csharp[RemotingConfiguration_IsRemotelyActivatedClientType1_Client#1](~/samples/snippets/csharp/VS_Snippets_Remoting/RemotingConfiguration_IsRemotelyActivatedClientType1_Client/CS/remotingconfiguration_isremotelyactivatedclienttype1_client.cs#1)]\n     [!code-vb[RemotingConfiguration_IsRemotelyActivatedClientType1_Client#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/RemotingConfiguration_IsRemotelyActivatedClientType1_Client/VB/remotingconfiguration_isremotelyactivatedclienttype1_client.vb#1)]\n  syntax:\n    content: public static System.Runtime.Remoting.ActivatedClientTypeEntry IsRemotelyActivatedClientType (Type svrType);\n    parameters:\n    - id: svrType\n      type: System.Type\n      description: The object type to check.\n    return:\n      type: System.Runtime.Remoting.ActivatedClientTypeEntry\n      description: The <xref href=\"System.Runtime.Remoting.ActivatedClientTypeEntry\"></xref> that corresponds to the specified object type.\n  overload: System.Runtime.Remoting.RemotingConfiguration.IsRemotelyActivatedClientType*\n  exceptions:\n  - type: System.Security.SecurityException\n    commentId: T:System.Security.SecurityException\n    description: At least one of the callers higher in the callstack does not have permission to configure remoting types and channels.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.Remoting/RemotingConfiguration.xml\n  ms.technology:\n  - dotnet-standard\n  manager: ghogen\n- uid: System.Runtime.Remoting.RemotingConfiguration.IsWellKnownClientType(System.Type)\n  commentId: M:System.Runtime.Remoting.RemotingConfiguration.IsWellKnownClientType(System.Type)\n  id: IsWellKnownClientType(System.Type)\n  parent: System.Runtime.Remoting.RemotingConfiguration\n  langs:\n  - csharp\n  name: IsWellKnownClientType(Type)\n  nameWithType: RemotingConfiguration.IsWellKnownClientType(Type)\n  fullName: RemotingConfiguration.IsWellKnownClientType(Type)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Runtime.Remoting\n  summary: Checks whether the specified object <xref href=\"System.Type\"></xref> is registered as a well-known client type.\n  remarks: ''\n  example:\n  - >-\n    [!code-cpp[RemotingConfiguration_IsWellKnownClientType1_Client#1](~/samples/snippets/cpp/VS_Snippets_Remoting/RemotingConfiguration_IsWellKnownClientType1_Client/CPP/remotingconfiguration_iswellknownclienttype1_client.cpp#1)]\n     [!code-csharp[RemotingConfiguration_IsWellKnownClientType1_Client#1](~/samples/snippets/csharp/VS_Snippets_Remoting/RemotingConfiguration_IsWellKnownClientType1_Client/CS/remotingconfiguration_iswellknownclienttype1_client.cs#1)]\n     [!code-vb[RemotingConfiguration_IsWellKnownClientType1_Client#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/RemotingConfiguration_IsWellKnownClientType1_Client/VB/remotingconfiguration_iswellknownclienttype1_client.vb#1)]\n  syntax:\n    content: public static System.Runtime.Remoting.WellKnownClientTypeEntry IsWellKnownClientType (Type svrType);\n    parameters:\n    - id: svrType\n      type: System.Type\n      description: The object <xref href=\"System.Type\"></xref> to check.\n    return:\n      type: System.Runtime.Remoting.WellKnownClientTypeEntry\n      description: The <xref href=\"System.Runtime.Remoting.WellKnownClientTypeEntry\"></xref> that corresponds to the specified object type.\n  overload: System.Runtime.Remoting.RemotingConfiguration.IsWellKnownClientType*\n  exceptions:\n  - type: System.Security.SecurityException\n    commentId: T:System.Security.SecurityException\n    description: At least one of the callers higher in the callstack does not have permission to configure remoting types and channels.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.Remoting/RemotingConfiguration.xml\n  ms.technology:\n  - dotnet-standard\n  manager: ghogen\n- uid: System.Runtime.Remoting.RemotingConfiguration.IsWellKnownClientType(System.String,System.String)\n  commentId: M:System.Runtime.Remoting.RemotingConfiguration.IsWellKnownClientType(System.String,System.String)\n  id: IsWellKnownClientType(System.String,System.String)\n  parent: System.Runtime.Remoting.RemotingConfiguration\n  langs:\n  - csharp\n  name: IsWellKnownClientType(String, String)\n  nameWithType: RemotingConfiguration.IsWellKnownClientType(String, String)\n  fullName: RemotingConfiguration.IsWellKnownClientType(String, String)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Runtime.Remoting\n  summary: Checks whether the object specified by its type name and assembly name is registered as a well-known client type.\n  remarks: ''\n  example:\n  - >-\n    [!code-cpp[RemotingConfiguration_IsWellKnownClientType2_Client#1](~/samples/snippets/cpp/VS_Snippets_Remoting/RemotingConfiguration_IsWellKnownClientType2_Client/CPP/remotingconfiguration_iswellknownclienttype2_client.cpp#1)]\n     [!code-csharp[RemotingConfiguration_IsWellKnownClientType2_Client#1](~/samples/snippets/csharp/VS_Snippets_Remoting/RemotingConfiguration_IsWellKnownClientType2_Client/CS/remotingconfiguration_iswellknownclienttype2_client.cs#1)]\n     [!code-vb[RemotingConfiguration_IsWellKnownClientType2_Client#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/RemotingConfiguration_IsWellKnownClientType2_Client/VB/remotingconfiguration_iswellknownclienttype2_client.vb#1)]\n  syntax:\n    content: public static System.Runtime.Remoting.WellKnownClientTypeEntry IsWellKnownClientType (string typeName, string assemblyName);\n    parameters:\n    - id: typeName\n      type: System.String\n      description: The type name of the object to check.\n    - id: assemblyName\n      type: System.String\n      description: The assembly name of the object to check.\n    return:\n      type: System.Runtime.Remoting.WellKnownClientTypeEntry\n      description: The <xref href=\"System.Runtime.Remoting.WellKnownClientTypeEntry\"></xref> that corresponds to the specified object type.\n  overload: System.Runtime.Remoting.RemotingConfiguration.IsWellKnownClientType*\n  exceptions:\n  - type: System.Security.SecurityException\n    commentId: T:System.Security.SecurityException\n    description: At least one of the callers higher in the callstack does not have permission to configure remoting types and channels.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.Remoting/RemotingConfiguration.xml\n  ms.technology:\n  - dotnet-standard\n  manager: ghogen\n- uid: System.Runtime.Remoting.RemotingConfiguration.ProcessId\n  commentId: P:System.Runtime.Remoting.RemotingConfiguration.ProcessId\n  id: ProcessId\n  parent: System.Runtime.Remoting.RemotingConfiguration\n  langs:\n  - csharp\n  name: ProcessId\n  nameWithType: RemotingConfiguration.ProcessId\n  fullName: RemotingConfiguration.ProcessId\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Runtime.Remoting\n  summary: Gets the ID of the currently executing process.\n  syntax:\n    content: public static string ProcessId { get; }\n    return:\n      type: System.String\n      description: A <xref href=\"System.String\"></xref> that contains the ID of the currently executing process.\n  overload: System.Runtime.Remoting.RemotingConfiguration.ProcessId*\n  exceptions:\n  - type: System.Security.SecurityException\n    commentId: T:System.Security.SecurityException\n    description: The immediate caller does not have infrastructure permission.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.Remoting/RemotingConfiguration.xml\n  ms.technology:\n  - dotnet-standard\n  manager: ghogen\n- uid: System.Runtime.Remoting.RemotingConfiguration.RegisterActivatedClientType(System.Runtime.Remoting.ActivatedClientTypeEntry)\n  commentId: M:System.Runtime.Remoting.RemotingConfiguration.RegisterActivatedClientType(System.Runtime.Remoting.ActivatedClientTypeEntry)\n  id: RegisterActivatedClientType(System.Runtime.Remoting.ActivatedClientTypeEntry)\n  parent: System.Runtime.Remoting.RemotingConfiguration\n  langs:\n  - csharp\n  name: RegisterActivatedClientType(ActivatedClientTypeEntry)\n  nameWithType: RemotingConfiguration.RegisterActivatedClientType(ActivatedClientTypeEntry)\n  fullName: RemotingConfiguration.RegisterActivatedClientType(ActivatedClientTypeEntry)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Runtime.Remoting\n  summary: Registers an object <xref href=\"System.Type\"></xref> recorded in the provided <xref href=\"System.Runtime.Remoting.ActivatedClientTypeEntry\"></xref> on the client end as a type that can be activated on the server.\n  remarks: \"To create an instance of a client-activated object on the server, you must know its <xref:System.Type> and it must be registered on the server end by using the <xref:System.Runtime.Remoting.RemotingConfiguration.RegisterActivatedServiceType%2A> method. To obtain a proxy for a new instance of the client-activated object, the client must first register a channel with <xref:System.Runtime.Remoting.Channels.ChannelServices> and then activate the object by calling `new`.  \\n  \\n To activate a client-activated object type with the `new` keyword, you must first register the object type on the client end using the <xref:System.Runtime.Remoting.RemotingConfiguration.RegisterActivatedClientType%2A> method. Calling the <xref:System.Runtime.Remoting.RemotingConfiguration.RegisterActivatedClientType%2A> method gives the remoting infrastructure the location of the remote application where `new` attempts to create it. If, on the other hand, you use the <xref:System.Activator.CreateInstance%2A?displayProperty=fullName> method to create a new instance of the client-activated object, you must supply the remote application's URL as a parameter, so no prior registration on the client end is necessary. To supply the <xref:System.Activator.CreateInstance%2A?displayProperty=fullName> method with the URL of the server where you want to create the object, you must encapsulate the URL in an instance of the <xref:System.Runtime.Remoting.Activation.UrlAttribute> class.  \\n  \\n For a detailed description of client-activated objects, see [&#91;\\\\<topic://cpconClientActivation>&#93;](http://msdn.microsoft.com/en-us/4a791494-c18a-4711-a5c1-4ab0e49a8f1a).\"\n  syntax:\n    content: public static void RegisterActivatedClientType (System.Runtime.Remoting.ActivatedClientTypeEntry entry);\n    parameters:\n    - id: entry\n      type: System.Runtime.Remoting.ActivatedClientTypeEntry\n      description: Configuration settings for the client-activated type.\n  overload: System.Runtime.Remoting.RemotingConfiguration.RegisterActivatedClientType*\n  exceptions:\n  - type: System.Security.SecurityException\n    commentId: T:System.Security.SecurityException\n    description: At least one of the callers higher in the callstack does not have permission to configure remoting types and channels.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.Remoting/RemotingConfiguration.xml\n  ms.technology:\n  - dotnet-standard\n  manager: ghogen\n- uid: System.Runtime.Remoting.RemotingConfiguration.RegisterActivatedClientType(System.Type,System.String)\n  commentId: M:System.Runtime.Remoting.RemotingConfiguration.RegisterActivatedClientType(System.Type,System.String)\n  id: RegisterActivatedClientType(System.Type,System.String)\n  parent: System.Runtime.Remoting.RemotingConfiguration\n  langs:\n  - csharp\n  name: RegisterActivatedClientType(Type, String)\n  nameWithType: RemotingConfiguration.RegisterActivatedClientType(Type, String)\n  fullName: RemotingConfiguration.RegisterActivatedClientType(Type, String)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Runtime.Remoting\n  summary: Registers an object <xref href=\"System.Type\"></xref> on the client end as a type that can be activated on the server, using the given parameters to initialize a new instance of the <xref href=\"System.Runtime.Remoting.ActivatedClientTypeEntry\"></xref> class.\n  remarks: \"To create an instance of a client-activated object on the server, you must know its <xref:System.Type> and it must be registered on the server end by using the <xref:System.Runtime.Remoting.RemotingConfiguration.RegisterActivatedServiceType%2A> method. To obtain a proxy for a new instance of the client-activated object, the client must first register a channel with <xref:System.Runtime.Remoting.Channels.ChannelServices> and then activate the object by calling `new`.  \\n  \\n To activate a client-activated object type with the `new` keyword, you must first register the object type on the client end using the <xref:System.Runtime.Remoting.RemotingConfiguration.RegisterActivatedClientType%2A> method. Calling the <xref:System.Runtime.Remoting.RemotingConfiguration.RegisterActivatedClientType%2A> method gives the remoting infrastructure the location of the remote application where `new` attempts to create it. If, on the other hand, you use the <xref:System.Activator.CreateInstance%2A?displayProperty=fullName> method to create a new instance of the client-activated object, you must supply the remote application's URL as a parameter, so no prior registration on the client end is necessary. To supply the <xref:System.Activator.CreateInstance%2A?displayProperty=fullName> method with the URL of the server where you want to create the object, you must encapsulate the URL in an instance of the <xref:System.Runtime.Remoting.Activation.UrlAttribute> class.  \\n  \\n For a detailed description of client-activated objects, see [&#91;\\\\<topic://cpconClientActivation>&#93;](http://msdn.microsoft.com/en-us/4a791494-c18a-4711-a5c1-4ab0e49a8f1a)\"\n  example:\n  - \"The following code example demonstrates registration of an object type on the client end as a type that can be activated on the server. For the server code that corresponds to the presented client code, see the example for the <xref:System.Runtime.Remoting.RemotingConfiguration.RegisterActivatedServiceType%2A> method.  \\n  \\n [!code-cpp[RemotingConfiguration.ClientActivation#1](~/samples/snippets/cpp/VS_Snippets_Remoting/RemotingConfiguration.ClientActivation/CPP/client.cpp#1)]\\n [!code-csharp[RemotingConfiguration.ClientActivation#1](~/samples/snippets/csharp/VS_Snippets_Remoting/RemotingConfiguration.ClientActivation/CS/client.cs#1)]\\n [!code-vb[RemotingConfiguration.ClientActivation#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/RemotingConfiguration.ClientActivation/VB/client.vb#1)]\"\n  syntax:\n    content: public static void RegisterActivatedClientType (Type type, string appUrl);\n    parameters:\n    - id: type\n      type: System.Type\n      description: The object <xref href=\"System.Type\"></xref>.\n    - id: appUrl\n      type: System.String\n      description: URL of the application where this type is activated.\n  overload: System.Runtime.Remoting.RemotingConfiguration.RegisterActivatedClientType*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>typeName</code> or <code>URI</code> parameter is `null`.\n  - type: System.Security.SecurityException\n    commentId: T:System.Security.SecurityException\n    description: At least one of the callers higher in the callstack does not have permission to configure remoting types and channels.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.Remoting/RemotingConfiguration.xml\n  ms.technology:\n  - dotnet-standard\n  manager: ghogen\n- uid: System.Runtime.Remoting.RemotingConfiguration.RegisterActivatedServiceType(System.Runtime.Remoting.ActivatedServiceTypeEntry)\n  commentId: M:System.Runtime.Remoting.RemotingConfiguration.RegisterActivatedServiceType(System.Runtime.Remoting.ActivatedServiceTypeEntry)\n  id: RegisterActivatedServiceType(System.Runtime.Remoting.ActivatedServiceTypeEntry)\n  parent: System.Runtime.Remoting.RemotingConfiguration\n  langs:\n  - csharp\n  name: RegisterActivatedServiceType(ActivatedServiceTypeEntry)\n  nameWithType: RemotingConfiguration.RegisterActivatedServiceType(ActivatedServiceTypeEntry)\n  fullName: RemotingConfiguration.RegisterActivatedServiceType(ActivatedServiceTypeEntry)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Runtime.Remoting\n  summary: Registers an object type recorded in the provided <xref href=\"System.Runtime.Remoting.ActivatedServiceTypeEntry\"></xref> on the service end as one that can be activated on request from a client.\n  remarks: \"To create an instance of a client-activated object on the server, you must know its <xref:System.Type> and it must be registered on the server end by using the <xref:System.Runtime.Remoting.RemotingConfiguration.RegisterActivatedServiceType%2A> method. To obtain a proxy for a new instance of the client-activated object, the client must first register a channel with <xref:System.Runtime.Remoting.Channels.ChannelServices> and then activate the object by calling `new` or <xref:System.Activator.CreateInstance%2A?displayProperty=fullName>.  \\n  \\n To activate a client-activated object type with the `new` keyword, you must first register the object type on the client end using the <xref:System.Runtime.Remoting.RemotingConfiguration.RegisterActivatedClientType%2A> method. Calling the <xref:System.Runtime.Remoting.RemotingConfiguration.RegisterActivatedClientType%2A> method gives the remoting infrastructure the location of the remote application, where `new` attempts to create it. If, on the other hand, you use the <xref:System.Activator.CreateInstance%2A> method to create a new instance of the client-activated object, you must supply the remote application's URL as a parameter, so no prior registration on the client end is necessary. To supply the <xref:System.Activator.CreateInstance%2A> method with the URL of the server where you want to create the object, you must encapsulate the URL in an instance of the <xref:System.Runtime.Remoting.Activation.UrlAttribute> class.  \\n  \\n For a detailed description of client-activated objects, see [&#91;\\\\<topic://cpconClientActivation>&#93;](http://msdn.microsoft.com/en-us/4a791494-c18a-4711-a5c1-4ab0e49a8f1a).\"\n  syntax:\n    content: public static void RegisterActivatedServiceType (System.Runtime.Remoting.ActivatedServiceTypeEntry entry);\n    parameters:\n    - id: entry\n      type: System.Runtime.Remoting.ActivatedServiceTypeEntry\n      description: Configuration settings for the client-activated type.\n  overload: System.Runtime.Remoting.RemotingConfiguration.RegisterActivatedServiceType*\n  exceptions:\n  - type: System.Security.SecurityException\n    commentId: T:System.Security.SecurityException\n    description: At least one of the callers higher in the callstack does not have permission to configure remoting types and channels.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.Remoting/RemotingConfiguration.xml\n  ms.technology:\n  - dotnet-standard\n  manager: ghogen\n- uid: System.Runtime.Remoting.RemotingConfiguration.RegisterActivatedServiceType(System.Type)\n  commentId: M:System.Runtime.Remoting.RemotingConfiguration.RegisterActivatedServiceType(System.Type)\n  id: RegisterActivatedServiceType(System.Type)\n  parent: System.Runtime.Remoting.RemotingConfiguration\n  langs:\n  - csharp\n  name: RegisterActivatedServiceType(Type)\n  nameWithType: RemotingConfiguration.RegisterActivatedServiceType(Type)\n  fullName: RemotingConfiguration.RegisterActivatedServiceType(Type)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Runtime.Remoting\n  summary: Registers a specified object type on the service end as a type that can be activated on request from a client.\n  remarks: \"To create an instance of a client-activated object on the server, you must know its <xref:System.Type> and it must be registered on the server end by using the <xref:System.Runtime.Remoting.RemotingConfiguration.RegisterActivatedServiceType%2A> method. To obtain a proxy for a new instance of the client-activated object, the client must first register a channel with <xref:System.Runtime.Remoting.Channels.ChannelServices> and then activate the object by calling `new` or <xref:System.Activator.CreateInstance%2A?displayProperty=fullName>.  \\n  \\n To activate a client-activated object type with the `new` keyword, you must first register the object type on the client end using the <xref:System.Runtime.Remoting.RemotingConfiguration.RegisterActivatedClientType%2A> method. Calling the <xref:System.Runtime.Remoting.RemotingConfiguration.RegisterActivatedClientType%2A> method gives the remoting infrastructure the location of the remote application, where `new` attempts to create it. If, on the other hand, you use the <xref:System.Activator.CreateInstance%2A> method to create a new instance of the client-activated object, you must supply the remote application's URL as a parameter, so no prior registration on the client end is necessary. To supply the <xref:System.Activator.CreateInstance%2A> method with the URL of the server where you want to create the object, you must encapsulate the URL in an instance of the <xref:System.Runtime.Remoting.Activation.UrlAttribute> class.  \\n  \\n For a detailed description of client-activated objects, see [&#91;\\\\<topic://cpconClientActivation>&#93;](http://msdn.microsoft.com/en-us/4a791494-c18a-4711-a5c1-4ab0e49a8f1a).\"\n  example:\n  - \"The following code example demonstrates registration of an object type on the server as a type that can be activated by the client. For the client code that corresponds to the presented server code, see the example for the <xref:System.Runtime.Remoting.RemotingConfiguration.RegisterActivatedClientType%2A> method.  \\n  \\n [!code-cpp[RemotingConfiguration.ClientActivation#2](~/samples/snippets/cpp/VS_Snippets_Remoting/RemotingConfiguration.ClientActivation/CPP/server.cpp#2)]\\n [!code-csharp[RemotingConfiguration.ClientActivation#2](~/samples/snippets/csharp/VS_Snippets_Remoting/RemotingConfiguration.ClientActivation/CS/server.cs#2)]\\n [!code-vb[RemotingConfiguration.ClientActivation#2](~/samples/snippets/visualbasic/VS_Snippets_Remoting/RemotingConfiguration.ClientActivation/VB/server.vb#2)]  \\n  \\n The following code example shows the service object registered in the sample code above.  \\n  \\n [!code-cpp[RemotingConfiguration.ClientActivation#3](~/samples/snippets/cpp/VS_Snippets_Remoting/RemotingConfiguration.ClientActivation/CPP/service.cpp#3)]\\n [!code-csharp[RemotingConfiguration.ClientActivation#3](~/samples/snippets/csharp/VS_Snippets_Remoting/RemotingConfiguration.ClientActivation/CS/service.cs#3)]\\n [!code-vb[RemotingConfiguration.ClientActivation#3](~/samples/snippets/visualbasic/VS_Snippets_Remoting/RemotingConfiguration.ClientActivation/VB/service.vb#3)]\"\n  syntax:\n    content: public static void RegisterActivatedServiceType (Type type);\n    parameters:\n    - id: type\n      type: System.Type\n      description: The <xref href=\"System.Type\"></xref> of object to register.\n  overload: System.Runtime.Remoting.RemotingConfiguration.RegisterActivatedServiceType*\n  exceptions:\n  - type: System.Security.SecurityException\n    commentId: T:System.Security.SecurityException\n    description: At least one of the callers higher in the callstack does not have permission to configure remoting types and channels.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.Remoting/RemotingConfiguration.xml\n  ms.technology:\n  - dotnet-standard\n  manager: ghogen\n- uid: System.Runtime.Remoting.RemotingConfiguration.RegisterWellKnownClientType(System.Runtime.Remoting.WellKnownClientTypeEntry)\n  commentId: M:System.Runtime.Remoting.RemotingConfiguration.RegisterWellKnownClientType(System.Runtime.Remoting.WellKnownClientTypeEntry)\n  id: RegisterWellKnownClientType(System.Runtime.Remoting.WellKnownClientTypeEntry)\n  parent: System.Runtime.Remoting.RemotingConfiguration\n  langs:\n  - csharp\n  name: RegisterWellKnownClientType(WellKnownClientTypeEntry)\n  nameWithType: RemotingConfiguration.RegisterWellKnownClientType(WellKnownClientTypeEntry)\n  fullName: RemotingConfiguration.RegisterWellKnownClientType(WellKnownClientTypeEntry)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Runtime.Remoting\n  summary: Registers an object <xref href=\"System.Type\"></xref> recorded in the provided <xref href=\"System.Runtime.Remoting.WellKnownClientTypeEntry\"></xref> on the client end as a well-known type that can be activated on the server.\n  remarks: \"Any client that knows the URI of a registered well-known object can obtain a proxy for the object by registering the channel it prefers with <xref:System.Runtime.Remoting.Channels.ChannelServices>, and activating the object by calling `new` or <xref:System.Activator.GetObject%2A?displayProperty=fullName>. To activate a well-known object with `new`, you must first register the well-known object type on the client using the <xref:System.Runtime.Remoting.RemotingConfiguration.RegisterWellKnownClientType%2A> method. Calling the <xref:System.Runtime.Remoting.RemotingConfiguration.RegisterWellKnownClientType%2A> method gives the remoting infrastructure the location of the remote object, which allows the `new` keyword to create it. If, on the other hand, you use the <xref:System.Activator.GetObject%2A?displayProperty=fullName> method to activate the well-known object, you must supply it with the object's URL as an argument, so no prior registration on the client end is necessary.  \\n  \\n For a detailed description of well-known objects, see [&#91;\\\\<topic://cpconServerActivation>&#93;](http://msdn.microsoft.com/en-us/77ded6e2-4ca8-448b-acf2-562d27fd4396).\"\n  syntax:\n    content: public static void RegisterWellKnownClientType (System.Runtime.Remoting.WellKnownClientTypeEntry entry);\n    parameters:\n    - id: entry\n      type: System.Runtime.Remoting.WellKnownClientTypeEntry\n      description: Configuration settings for the well-known type.\n  overload: System.Runtime.Remoting.RemotingConfiguration.RegisterWellKnownClientType*\n  exceptions:\n  - type: System.Security.SecurityException\n    commentId: T:System.Security.SecurityException\n    description: At least one of the callers higher in the callstack does not have permission to configure remoting types and channels.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.Remoting/RemotingConfiguration.xml\n  ms.technology:\n  - dotnet-standard\n  manager: ghogen\n- uid: System.Runtime.Remoting.RemotingConfiguration.RegisterWellKnownClientType(System.Type,System.String)\n  commentId: M:System.Runtime.Remoting.RemotingConfiguration.RegisterWellKnownClientType(System.Type,System.String)\n  id: RegisterWellKnownClientType(System.Type,System.String)\n  parent: System.Runtime.Remoting.RemotingConfiguration\n  langs:\n  - csharp\n  name: RegisterWellKnownClientType(Type, String)\n  nameWithType: RemotingConfiguration.RegisterWellKnownClientType(Type, String)\n  fullName: RemotingConfiguration.RegisterWellKnownClientType(Type, String)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Runtime.Remoting\n  summary: Registers an object <xref href=\"System.Type\"></xref> on the client end as a well-known type that can be activated on the server, using the given parameters to initialize a new instance of the <xref href=\"System.Runtime.Remoting.WellKnownClientTypeEntry\"></xref> class.\n  remarks: \"Any client that knows the URI of a registered well-known object can obtain a proxy for the object by registering the channel it prefers with <xref:System.Runtime.Remoting.Channels.ChannelServices>, and activating the object by calling `new` or <xref:System.Activator.GetObject%2A?displayProperty=fullName>. To activate a well-known object with `new`, you must first register the well-known object type on the client using the <xref:System.Runtime.Remoting.RemotingConfiguration.RegisterWellKnownClientType%2A> method. Calling the <xref:System.Runtime.Remoting.RemotingConfiguration.RegisterWellKnownClientType%2A> method gives the remoting infrastructure the location of the remote object, which allows the `new` keyword to create it. If, on the other hand, you use the <xref:System.Activator.GetObject%2A?displayProperty=fullName> method to activate the well-known object, you must supply it with the object's URL as an argument, so no prior registration on the client end is necessary.  \\n  \\n For a detailed description of well-known objects, see [&#91;\\\\<topic://cpconServerActivation>&#93;](http://msdn.microsoft.com/en-us/77ded6e2-4ca8-448b-acf2-562d27fd4396).\"\n  example:\n  - \"The following code example demonstrates registration of an object type on the client end as a well-known type. For the server code that corresponds to the presented client code, see the example for the <xref:System.Runtime.Remoting.RemotingConfiguration.RegisterWellKnownServiceType%2A> method.  \\n  \\n [!code-cpp[RemotingConfiguration.ServerActivation1#5](~/samples/snippets/cpp/VS_Snippets_Remoting/RemotingConfiguration.ServerActivation1/CPP/client.cpp#5)]\\n [!code-csharp[RemotingConfiguration.ServerActivation1#5](~/samples/snippets/csharp/VS_Snippets_Remoting/RemotingConfiguration.ServerActivation1/CS/client.cs#5)]\\n [!code-vb[RemotingConfiguration.ServerActivation1#5](~/samples/snippets/visualbasic/VS_Snippets_Remoting/RemotingConfiguration.ServerActivation1/VB/client.vb#5)]  \\n[!code-cpp[RemotingConfiguration.ServerActivation1#6](~/samples/snippets/cpp/VS_Snippets_Remoting/RemotingConfiguration.ServerActivation1/CPP/client.cpp#6)]\\n[!code-csharp[RemotingConfiguration.ServerActivation1#6](~/samples/snippets/csharp/VS_Snippets_Remoting/RemotingConfiguration.ServerActivation1/CS/client.cs#6)]\\n[!code-vb[RemotingConfiguration.ServerActivation1#6](~/samples/snippets/visualbasic/VS_Snippets_Remoting/RemotingConfiguration.ServerActivation1/VB/client.vb#6)]  \\n[!code-cpp[RemotingConfiguration.ServerActivation1#7](~/samples/snippets/cpp/VS_Snippets_Remoting/RemotingConfiguration.ServerActivation1/CPP/client.cpp#7)]\\n[!code-csharp[RemotingConfiguration.ServerActivation1#7](~/samples/snippets/csharp/VS_Snippets_Remoting/RemotingConfiguration.ServerActivation1/CS/client.cs#7)]\\n[!code-vb[RemotingConfiguration.ServerActivation1#7](~/samples/snippets/visualbasic/VS_Snippets_Remoting/RemotingConfiguration.ServerActivation1/VB/client.vb#7)]\"\n  syntax:\n    content: public static void RegisterWellKnownClientType (Type type, string objectUrl);\n    parameters:\n    - id: type\n      type: System.Type\n      description: The object <xref href=\"System.Type\"></xref>.\n    - id: objectUrl\n      type: System.String\n      description: URL of a well-known client object.\n  overload: System.Runtime.Remoting.RemotingConfiguration.RegisterWellKnownClientType*\n  exceptions:\n  - type: System.Security.SecurityException\n    commentId: T:System.Security.SecurityException\n    description: At least one of the callers higher in the callstack does not have permission to configure remoting types and channels.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.Remoting/RemotingConfiguration.xml\n  ms.technology:\n  - dotnet-standard\n  manager: ghogen\n- uid: System.Runtime.Remoting.RemotingConfiguration.RegisterWellKnownServiceType(System.Runtime.Remoting.WellKnownServiceTypeEntry)\n  commentId: M:System.Runtime.Remoting.RemotingConfiguration.RegisterWellKnownServiceType(System.Runtime.Remoting.WellKnownServiceTypeEntry)\n  id: RegisterWellKnownServiceType(System.Runtime.Remoting.WellKnownServiceTypeEntry)\n  parent: System.Runtime.Remoting.RemotingConfiguration\n  langs:\n  - csharp\n  name: RegisterWellKnownServiceType(WellKnownServiceTypeEntry)\n  nameWithType: RemotingConfiguration.RegisterWellKnownServiceType(WellKnownServiceTypeEntry)\n  fullName: RemotingConfiguration.RegisterWellKnownServiceType(WellKnownServiceTypeEntry)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Runtime.Remoting\n  summary: Registers an object <xref href=\"System.Type\"></xref> recorded in the provided <xref href=\"System.Runtime.Remoting.WellKnownServiceTypeEntry\"></xref> on the service end as a well-known type.\n  remarks: \"Any client that knows the URI of a registered well-known object can obtain a proxy for the object by registering the channel it prefers with <xref:System.Runtime.Remoting.Channels.ChannelServices>, and activating the object by calling `new` or the <xref:System.Activator.GetObject%2A?displayProperty=fullName> method. To activate a well-known object with `new`, you must first register the well-known object type on the client using the <xref:System.Runtime.Remoting.RemotingConfiguration.RegisterWellKnownClientType%2A> method. Calling the <xref:System.Runtime.Remoting.RemotingConfiguration.RegisterWellKnownClientType%2A> method gives the remoting infrastructure the location of the remote object, which allows the `new` keyword to create it. If, on the other hand, you use the <xref:System.Activator.GetObject%2A?displayProperty=fullName> method to activate the well-known object, you must supply it with the object's URL as an argument, so no prior registration on the client end is necessary.  \\n  \\n When the call arrives at the server, the .NET Framework extracts the URI from the message, examines the remoting tables to locate the reference for the object that matches the URI, and then instantiates the object if necessary, forwarding the method call to the object. If the object is registered as <xref:System.Runtime.Remoting.WellKnownObjectMode.SingleCall>, it is destroyed after the method call is completed. A new instance of the object is created for each method called. The only difference between <xref:System.Activator.GetObject%2A?displayProperty=fullName> and `new` is that the former allows you to specify a URL as a parameter, and the latter obtains the URL from the configuration.  \\n  \\n The remote object itself is not instantiated by the registration process. This only happens when a client attempts to call a method on the object or activates the object from the client side.  \\n  \\n For a detailed description of well-known objects, see [&#91;\\\\<topic://cpconServerActivation>&#93;](http://msdn.microsoft.com/en-us/77ded6e2-4ca8-448b-acf2-562d27fd4396).\"\n  example:\n  - >-\n    [!code-cpp[CreateObjRef2#2](~/samples/snippets/cpp/VS_Snippets_Remoting/CreateObjRef2/CPP/example.cpp#2)]\n     [!code-csharp[CreateObjRef2#2](~/samples/snippets/csharp/VS_Snippets_Remoting/CreateObjRef2/CS/example.cs#2)]\n     [!code-vb[CreateObjRef2#2](~/samples/snippets/visualbasic/VS_Snippets_Remoting/CreateObjRef2/VB/example.vb#2)]\n  syntax:\n    content: public static void RegisterWellKnownServiceType (System.Runtime.Remoting.WellKnownServiceTypeEntry entry);\n    parameters:\n    - id: entry\n      type: System.Runtime.Remoting.WellKnownServiceTypeEntry\n      description: Configuration settings for the well-known type.\n  overload: System.Runtime.Remoting.RemotingConfiguration.RegisterWellKnownServiceType*\n  exceptions:\n  - type: System.Security.SecurityException\n    commentId: T:System.Security.SecurityException\n    description: At least one of the callers higher in the callstack does not have permission to configure remoting types and channels.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.Remoting/RemotingConfiguration.xml\n  ms.technology:\n  - dotnet-standard\n  manager: ghogen\n- uid: System.Runtime.Remoting.RemotingConfiguration.RegisterWellKnownServiceType(System.Type,System.String,System.Runtime.Remoting.WellKnownObjectMode)\n  commentId: M:System.Runtime.Remoting.RemotingConfiguration.RegisterWellKnownServiceType(System.Type,System.String,System.Runtime.Remoting.WellKnownObjectMode)\n  id: RegisterWellKnownServiceType(System.Type,System.String,System.Runtime.Remoting.WellKnownObjectMode)\n  parent: System.Runtime.Remoting.RemotingConfiguration\n  langs:\n  - csharp\n  name: RegisterWellKnownServiceType(Type, String, WellKnownObjectMode)\n  nameWithType: RemotingConfiguration.RegisterWellKnownServiceType(Type, String, WellKnownObjectMode)\n  fullName: RemotingConfiguration.RegisterWellKnownServiceType(Type, String, WellKnownObjectMode)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Runtime.Remoting\n  summary: Registers an object <xref href=\"System.Type\"></xref> on the service end as a well-known type, using the given parameters to initialize a new instance of <xref href=\"System.Runtime.Remoting.WellKnownServiceTypeEntry\"></xref>.\n  remarks: \"Any client that knows the URI of a registered well-known object can obtain a proxy for the object by registering the channel it prefers with <xref:System.Runtime.Remoting.Channels.ChannelServices>, and activating the object by calling `new` or the <xref:System.Activator.GetObject%2A?displayProperty=fullName> method. To activate a well-known object with `new`, you must first register the well-known object type on the client using the <xref:System.Runtime.Remoting.RemotingConfiguration.RegisterWellKnownClientType%2A> method. Calling the <xref:System.Runtime.Remoting.RemotingConfiguration.RegisterWellKnownClientType%2A> method gives the remoting infrastructure the location of the remote object, which allows the `new` keyword to create it. If, on the other hand, you use the <xref:System.Activator.GetObject%2A?displayProperty=fullName> method to activate the well-known object, you must supply it with the object's URL as an argument, so no prior registration on the client end is necessary.  \\n  \\n When the call arrives at the server, the .NET Framework extracts the URI from the message, examines the remoting tables to locate the reference for the object that matches the URI, and then instantiates the object if necessary, forwarding the method call to the object. If the object is registered as <xref:System.Runtime.Remoting.WellKnownObjectMode.SingleCall>, it is destroyed after the method call is completed. A new instance of the object is created for each method called. The only difference between <xref:System.Activator.GetObject%2A?displayProperty=fullName> and `new` is that the former allows you to specify a URL as a parameter, and the latter obtains the URL from the configuration.  \\n  \\n The remote object itself is not instantiated by the registration process. This only happens when a client attempts to call a method on the object or activates the object from the client side.  \\n  \\n For a detailed description of well-known objects, see [&#91;\\\\<topic://cpconServerActivation>&#93;](http://msdn.microsoft.com/en-us/77ded6e2-4ca8-448b-acf2-562d27fd4396).\"\n  example:\n  - \"The following code example demonstrates registration of an object type on the server as a well-known object type. For the client code that corresponds to the presented server code, see the example for the <xref:System.Runtime.Remoting.RemotingConfiguration.RegisterWellKnownClientType%2A> method.  \\n  \\n [!code-cpp[RemotingConfiguration.ServerActivation1#1](~/samples/snippets/cpp/VS_Snippets_Remoting/RemotingConfiguration.ServerActivation1/CPP/server.cpp#1)]\\n [!code-csharp[RemotingConfiguration.ServerActivation1#1](~/samples/snippets/csharp/VS_Snippets_Remoting/RemotingConfiguration.ServerActivation1/CS/server.cs#1)]\\n [!code-vb[RemotingConfiguration.ServerActivation1#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/RemotingConfiguration.ServerActivation1/VB/server.vb#1)]  \\n[!code-cpp[RemotingConfiguration.ServerActivation1#2](~/samples/snippets/cpp/VS_Snippets_Remoting/RemotingConfiguration.ServerActivation1/CPP/server.cpp#2)]\\n[!code-csharp[RemotingConfiguration.ServerActivation1#2](~/samples/snippets/csharp/VS_Snippets_Remoting/RemotingConfiguration.ServerActivation1/CS/server.cs#2)]\\n[!code-vb[RemotingConfiguration.ServerActivation1#2](~/samples/snippets/visualbasic/VS_Snippets_Remoting/RemotingConfiguration.ServerActivation1/VB/server.vb#2)]  \\n[!code-cpp[RemotingConfiguration.ServerActivation1#3](~/samples/snippets/cpp/VS_Snippets_Remoting/RemotingConfiguration.ServerActivation1/CPP/server.cpp#3)]\\n[!code-csharp[RemotingConfiguration.ServerActivation1#3](~/samples/snippets/csharp/VS_Snippets_Remoting/RemotingConfiguration.ServerActivation1/CS/server.cs#3)]\\n[!code-vb[RemotingConfiguration.ServerActivation1#3](~/samples/snippets/visualbasic/VS_Snippets_Remoting/RemotingConfiguration.ServerActivation1/VB/server.vb#3)]  \\n  \\n The following code example shows the service object registered in the sample code above.  \\n  \\n [!code-cpp[RemotingConfiguration.ServerActivation1#4](~/samples/snippets/cpp/VS_Snippets_Remoting/RemotingConfiguration.ServerActivation1/CPP/service.cpp#4)]\\n [!code-csharp[RemotingConfiguration.ServerActivation1#4](~/samples/snippets/csharp/VS_Snippets_Remoting/RemotingConfiguration.ServerActivation1/CS/service.cs#4)]\\n [!code-vb[RemotingConfiguration.ServerActivation1#4](~/samples/snippets/visualbasic/VS_Snippets_Remoting/RemotingConfiguration.ServerActivation1/VB/service.vb#4)]\"\n  syntax:\n    content: public static void RegisterWellKnownServiceType (Type type, string objectUri, System.Runtime.Remoting.WellKnownObjectMode mode);\n    parameters:\n    - id: type\n      type: System.Type\n      description: The object <xref href=\"System.Type\"></xref>.\n    - id: objectUri\n      type: System.String\n      description: The object URI.\n    - id: mode\n      type: System.Runtime.Remoting.WellKnownObjectMode\n      description: The activation mode of the well-known object type being registered. (See <xref href=\"System.Runtime.Remoting.WellKnownObjectMode\"></xref>.)\n  overload: System.Runtime.Remoting.RemotingConfiguration.RegisterWellKnownServiceType*\n  exceptions:\n  - type: System.Security.SecurityException\n    commentId: T:System.Security.SecurityException\n    description: At least one of the callers higher in the callstack does not have permission to configure remoting types and channels.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.Remoting/RemotingConfiguration.xml\n  ms.technology:\n  - dotnet-standard\n  manager: ghogen\nreferences:\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.Security.SecurityException\n  parent: System.Security\n  isExternal: false\n  name: SecurityException\n  nameWithType: SecurityException\n  fullName: System.Security.SecurityException\n- uid: System.ArgumentNullException\n  parent: System\n  isExternal: false\n  name: ArgumentNullException\n  nameWithType: ArgumentNullException\n  fullName: System.ArgumentNullException\n- uid: System.Runtime.Remoting.RemotingConfiguration.ApplicationId\n  parent: System.Runtime.Remoting.RemotingConfiguration\n  isExternal: false\n  name: ApplicationId\n  nameWithType: RemotingConfiguration.ApplicationId\n  fullName: RemotingConfiguration.ApplicationId\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Runtime.Remoting.RemotingConfiguration.ApplicationName\n  parent: System.Runtime.Remoting.RemotingConfiguration\n  isExternal: false\n  name: ApplicationName\n  nameWithType: RemotingConfiguration.ApplicationName\n  fullName: RemotingConfiguration.ApplicationName\n- uid: System.Runtime.Remoting.RemotingConfiguration.Configure(System.String)\n  parent: System.Runtime.Remoting.RemotingConfiguration\n  isExternal: false\n  name: Configure(String)\n  nameWithType: RemotingConfiguration.Configure(String)\n  fullName: RemotingConfiguration.Configure(String)\n- uid: System.Runtime.Remoting.RemotingConfiguration.Configure(System.String,System.Boolean)\n  parent: System.Runtime.Remoting.RemotingConfiguration\n  isExternal: false\n  name: Configure(String, Boolean)\n  nameWithType: RemotingConfiguration.Configure(String, Boolean)\n  fullName: RemotingConfiguration.Configure(String, Boolean)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Runtime.Remoting.RemotingConfiguration.CustomErrorsEnabled(System.Boolean)\n  parent: System.Runtime.Remoting.RemotingConfiguration\n  isExternal: false\n  name: CustomErrorsEnabled(Boolean)\n  nameWithType: RemotingConfiguration.CustomErrorsEnabled(Boolean)\n  fullName: RemotingConfiguration.CustomErrorsEnabled(Boolean)\n- uid: System.Runtime.Remoting.RemotingConfiguration.CustomErrorsMode\n  parent: System.Runtime.Remoting.RemotingConfiguration\n  isExternal: false\n  name: CustomErrorsMode\n  nameWithType: RemotingConfiguration.CustomErrorsMode\n  fullName: RemotingConfiguration.CustomErrorsMode\n- uid: System.Runtime.Remoting.CustomErrorsModes\n  parent: System.Runtime.Remoting\n  isExternal: false\n  name: CustomErrorsModes\n  nameWithType: CustomErrorsModes\n  fullName: System.Runtime.Remoting.CustomErrorsModes\n- uid: System.Runtime.Remoting.RemotingConfiguration.GetRegisteredActivatedClientTypes\n  parent: System.Runtime.Remoting.RemotingConfiguration\n  isExternal: false\n  name: GetRegisteredActivatedClientTypes()\n  nameWithType: RemotingConfiguration.GetRegisteredActivatedClientTypes()\n  fullName: RemotingConfiguration.GetRegisteredActivatedClientTypes()\n- uid: System.Runtime.Remoting.ActivatedClientTypeEntry\n  name: ActivatedClientTypeEntry\n  nameWithType: ActivatedClientTypeEntry\n  fullName: System.Runtime.Remoting.ActivatedClientTypeEntry\n- uid: System.Runtime.Remoting.ActivatedClientTypeEntry[]\n  parent: System.Runtime.Remoting\n  isExternal: false\n  name: ActivatedClientTypeEntry[]\n  nameWithType: ActivatedClientTypeEntry[]\n  fullName: System.Runtime.Remoting.ActivatedClientTypeEntry[]\n  spec.csharp:\n  - uid: System.Runtime.Remoting.ActivatedClientTypeEntry\n    name: ActivatedClientTypeEntry\n    nameWithType: ActivatedClientTypeEntry\n    fullName: System.Runtime.Remoting.ActivatedClientTypeEntry\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Runtime.Remoting.RemotingConfiguration.GetRegisteredActivatedServiceTypes\n  parent: System.Runtime.Remoting.RemotingConfiguration\n  isExternal: false\n  name: GetRegisteredActivatedServiceTypes()\n  nameWithType: RemotingConfiguration.GetRegisteredActivatedServiceTypes()\n  fullName: RemotingConfiguration.GetRegisteredActivatedServiceTypes()\n- uid: System.Runtime.Remoting.ActivatedServiceTypeEntry\n  name: ActivatedServiceTypeEntry\n  nameWithType: ActivatedServiceTypeEntry\n  fullName: System.Runtime.Remoting.ActivatedServiceTypeEntry\n- uid: System.Runtime.Remoting.ActivatedServiceTypeEntry[]\n  parent: System.Runtime.Remoting\n  isExternal: false\n  name: ActivatedServiceTypeEntry[]\n  nameWithType: ActivatedServiceTypeEntry[]\n  fullName: System.Runtime.Remoting.ActivatedServiceTypeEntry[]\n  spec.csharp:\n  - uid: System.Runtime.Remoting.ActivatedServiceTypeEntry\n    name: ActivatedServiceTypeEntry\n    nameWithType: ActivatedServiceTypeEntry\n    fullName: System.Runtime.Remoting.ActivatedServiceTypeEntry\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Runtime.Remoting.RemotingConfiguration.GetRegisteredWellKnownClientTypes\n  parent: System.Runtime.Remoting.RemotingConfiguration\n  isExternal: false\n  name: GetRegisteredWellKnownClientTypes()\n  nameWithType: RemotingConfiguration.GetRegisteredWellKnownClientTypes()\n  fullName: RemotingConfiguration.GetRegisteredWellKnownClientTypes()\n- uid: System.Runtime.Remoting.WellKnownClientTypeEntry\n  name: WellKnownClientTypeEntry\n  nameWithType: WellKnownClientTypeEntry\n  fullName: System.Runtime.Remoting.WellKnownClientTypeEntry\n- uid: System.Runtime.Remoting.WellKnownClientTypeEntry[]\n  parent: System.Runtime.Remoting\n  isExternal: false\n  name: WellKnownClientTypeEntry[]\n  nameWithType: WellKnownClientTypeEntry[]\n  fullName: System.Runtime.Remoting.WellKnownClientTypeEntry[]\n  spec.csharp:\n  - uid: System.Runtime.Remoting.WellKnownClientTypeEntry\n    name: WellKnownClientTypeEntry\n    nameWithType: WellKnownClientTypeEntry\n    fullName: System.Runtime.Remoting.WellKnownClientTypeEntry\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Runtime.Remoting.RemotingConfiguration.GetRegisteredWellKnownServiceTypes\n  parent: System.Runtime.Remoting.RemotingConfiguration\n  isExternal: false\n  name: GetRegisteredWellKnownServiceTypes()\n  nameWithType: RemotingConfiguration.GetRegisteredWellKnownServiceTypes()\n  fullName: RemotingConfiguration.GetRegisteredWellKnownServiceTypes()\n- uid: System.Runtime.Remoting.WellKnownServiceTypeEntry\n  name: WellKnownServiceTypeEntry\n  nameWithType: WellKnownServiceTypeEntry\n  fullName: System.Runtime.Remoting.WellKnownServiceTypeEntry\n- uid: System.Runtime.Remoting.WellKnownServiceTypeEntry[]\n  parent: System.Runtime.Remoting\n  isExternal: false\n  name: WellKnownServiceTypeEntry[]\n  nameWithType: WellKnownServiceTypeEntry[]\n  fullName: System.Runtime.Remoting.WellKnownServiceTypeEntry[]\n  spec.csharp:\n  - uid: System.Runtime.Remoting.WellKnownServiceTypeEntry\n    name: WellKnownServiceTypeEntry\n    nameWithType: WellKnownServiceTypeEntry\n    fullName: System.Runtime.Remoting.WellKnownServiceTypeEntry\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Runtime.Remoting.RemotingConfiguration.IsActivationAllowed(System.Type)\n  parent: System.Runtime.Remoting.RemotingConfiguration\n  isExternal: false\n  name: IsActivationAllowed(Type)\n  nameWithType: RemotingConfiguration.IsActivationAllowed(Type)\n  fullName: RemotingConfiguration.IsActivationAllowed(Type)\n- uid: System.Type\n  parent: System\n  isExternal: false\n  name: Type\n  nameWithType: Type\n  fullName: System.Type\n- uid: System.Runtime.Remoting.RemotingConfiguration.IsRemotelyActivatedClientType(System.String,System.String)\n  parent: System.Runtime.Remoting.RemotingConfiguration\n  isExternal: false\n  name: IsRemotelyActivatedClientType(String, String)\n  nameWithType: RemotingConfiguration.IsRemotelyActivatedClientType(String, String)\n  fullName: RemotingConfiguration.IsRemotelyActivatedClientType(String, String)\n- uid: System.Runtime.Remoting.RemotingConfiguration.IsRemotelyActivatedClientType(System.Type)\n  parent: System.Runtime.Remoting.RemotingConfiguration\n  isExternal: false\n  name: IsRemotelyActivatedClientType(Type)\n  nameWithType: RemotingConfiguration.IsRemotelyActivatedClientType(Type)\n  fullName: RemotingConfiguration.IsRemotelyActivatedClientType(Type)\n- uid: System.Runtime.Remoting.RemotingConfiguration.IsWellKnownClientType(System.Type)\n  parent: System.Runtime.Remoting.RemotingConfiguration\n  isExternal: false\n  name: IsWellKnownClientType(Type)\n  nameWithType: RemotingConfiguration.IsWellKnownClientType(Type)\n  fullName: RemotingConfiguration.IsWellKnownClientType(Type)\n- uid: System.Runtime.Remoting.RemotingConfiguration.IsWellKnownClientType(System.String,System.String)\n  parent: System.Runtime.Remoting.RemotingConfiguration\n  isExternal: false\n  name: IsWellKnownClientType(String, String)\n  nameWithType: RemotingConfiguration.IsWellKnownClientType(String, String)\n  fullName: RemotingConfiguration.IsWellKnownClientType(String, String)\n- uid: System.Runtime.Remoting.RemotingConfiguration.ProcessId\n  parent: System.Runtime.Remoting.RemotingConfiguration\n  isExternal: false\n  name: ProcessId\n  nameWithType: RemotingConfiguration.ProcessId\n  fullName: RemotingConfiguration.ProcessId\n- uid: System.Runtime.Remoting.RemotingConfiguration.RegisterActivatedClientType(System.Runtime.Remoting.ActivatedClientTypeEntry)\n  parent: System.Runtime.Remoting.RemotingConfiguration\n  isExternal: false\n  name: RegisterActivatedClientType(ActivatedClientTypeEntry)\n  nameWithType: RemotingConfiguration.RegisterActivatedClientType(ActivatedClientTypeEntry)\n  fullName: RemotingConfiguration.RegisterActivatedClientType(ActivatedClientTypeEntry)\n- uid: System.Runtime.Remoting.RemotingConfiguration.RegisterActivatedClientType(System.Type,System.String)\n  parent: System.Runtime.Remoting.RemotingConfiguration\n  isExternal: false\n  name: RegisterActivatedClientType(Type, String)\n  nameWithType: RemotingConfiguration.RegisterActivatedClientType(Type, String)\n  fullName: RemotingConfiguration.RegisterActivatedClientType(Type, String)\n- uid: System.Runtime.Remoting.RemotingConfiguration.RegisterActivatedServiceType(System.Runtime.Remoting.ActivatedServiceTypeEntry)\n  parent: System.Runtime.Remoting.RemotingConfiguration\n  isExternal: false\n  name: RegisterActivatedServiceType(ActivatedServiceTypeEntry)\n  nameWithType: RemotingConfiguration.RegisterActivatedServiceType(ActivatedServiceTypeEntry)\n  fullName: RemotingConfiguration.RegisterActivatedServiceType(ActivatedServiceTypeEntry)\n- uid: System.Runtime.Remoting.RemotingConfiguration.RegisterActivatedServiceType(System.Type)\n  parent: System.Runtime.Remoting.RemotingConfiguration\n  isExternal: false\n  name: RegisterActivatedServiceType(Type)\n  nameWithType: RemotingConfiguration.RegisterActivatedServiceType(Type)\n  fullName: RemotingConfiguration.RegisterActivatedServiceType(Type)\n- uid: System.Runtime.Remoting.RemotingConfiguration.RegisterWellKnownClientType(System.Runtime.Remoting.WellKnownClientTypeEntry)\n  parent: System.Runtime.Remoting.RemotingConfiguration\n  isExternal: false\n  name: RegisterWellKnownClientType(WellKnownClientTypeEntry)\n  nameWithType: RemotingConfiguration.RegisterWellKnownClientType(WellKnownClientTypeEntry)\n  fullName: RemotingConfiguration.RegisterWellKnownClientType(WellKnownClientTypeEntry)\n- uid: System.Runtime.Remoting.RemotingConfiguration.RegisterWellKnownClientType(System.Type,System.String)\n  parent: System.Runtime.Remoting.RemotingConfiguration\n  isExternal: false\n  name: RegisterWellKnownClientType(Type, String)\n  nameWithType: RemotingConfiguration.RegisterWellKnownClientType(Type, String)\n  fullName: RemotingConfiguration.RegisterWellKnownClientType(Type, String)\n- uid: System.Runtime.Remoting.RemotingConfiguration.RegisterWellKnownServiceType(System.Runtime.Remoting.WellKnownServiceTypeEntry)\n  parent: System.Runtime.Remoting.RemotingConfiguration\n  isExternal: false\n  name: RegisterWellKnownServiceType(WellKnownServiceTypeEntry)\n  nameWithType: RemotingConfiguration.RegisterWellKnownServiceType(WellKnownServiceTypeEntry)\n  fullName: RemotingConfiguration.RegisterWellKnownServiceType(WellKnownServiceTypeEntry)\n- uid: System.Runtime.Remoting.RemotingConfiguration.RegisterWellKnownServiceType(System.Type,System.String,System.Runtime.Remoting.WellKnownObjectMode)\n  parent: System.Runtime.Remoting.RemotingConfiguration\n  isExternal: false\n  name: RegisterWellKnownServiceType(Type, String, WellKnownObjectMode)\n  nameWithType: RemotingConfiguration.RegisterWellKnownServiceType(Type, String, WellKnownObjectMode)\n  fullName: RemotingConfiguration.RegisterWellKnownServiceType(Type, String, WellKnownObjectMode)\n- uid: System.Runtime.Remoting.WellKnownObjectMode\n  parent: System.Runtime.Remoting\n  isExternal: false\n  name: WellKnownObjectMode\n  nameWithType: WellKnownObjectMode\n  fullName: System.Runtime.Remoting.WellKnownObjectMode\n- uid: System.Runtime.Remoting.RemotingConfiguration.ApplicationId*\n  parent: System.Runtime.Remoting.RemotingConfiguration\n  isExternal: false\n  name: ApplicationId\n  nameWithType: RemotingConfiguration.ApplicationId\n  fullName: RemotingConfiguration.ApplicationId\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.Remoting/RemotingConfiguration.xml\n- uid: System.Runtime.Remoting.RemotingConfiguration.ApplicationName*\n  parent: System.Runtime.Remoting.RemotingConfiguration\n  isExternal: false\n  name: ApplicationName\n  nameWithType: RemotingConfiguration.ApplicationName\n  fullName: RemotingConfiguration.ApplicationName\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.Remoting/RemotingConfiguration.xml\n- uid: System.Runtime.Remoting.RemotingConfiguration.Configure*\n  parent: System.Runtime.Remoting.RemotingConfiguration\n  isExternal: false\n  name: Configure\n  nameWithType: RemotingConfiguration.Configure\n  fullName: RemotingConfiguration.Configure\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.Remoting/RemotingConfiguration.xml\n- uid: System.Runtime.Remoting.RemotingConfiguration.CustomErrorsEnabled*\n  parent: System.Runtime.Remoting.RemotingConfiguration\n  isExternal: false\n  name: CustomErrorsEnabled\n  nameWithType: RemotingConfiguration.CustomErrorsEnabled\n  fullName: RemotingConfiguration.CustomErrorsEnabled\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.Remoting/RemotingConfiguration.xml\n- uid: System.Runtime.Remoting.RemotingConfiguration.CustomErrorsMode*\n  parent: System.Runtime.Remoting.RemotingConfiguration\n  isExternal: false\n  name: CustomErrorsMode\n  nameWithType: RemotingConfiguration.CustomErrorsMode\n  fullName: RemotingConfiguration.CustomErrorsMode\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.Remoting/RemotingConfiguration.xml\n- uid: System.Runtime.Remoting.RemotingConfiguration.GetRegisteredActivatedClientTypes*\n  parent: System.Runtime.Remoting.RemotingConfiguration\n  isExternal: false\n  name: GetRegisteredActivatedClientTypes\n  nameWithType: RemotingConfiguration.GetRegisteredActivatedClientTypes\n  fullName: RemotingConfiguration.GetRegisteredActivatedClientTypes\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.Remoting/RemotingConfiguration.xml\n- uid: System.Runtime.Remoting.RemotingConfiguration.GetRegisteredActivatedServiceTypes*\n  parent: System.Runtime.Remoting.RemotingConfiguration\n  isExternal: false\n  name: GetRegisteredActivatedServiceTypes\n  nameWithType: RemotingConfiguration.GetRegisteredActivatedServiceTypes\n  fullName: RemotingConfiguration.GetRegisteredActivatedServiceTypes\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.Remoting/RemotingConfiguration.xml\n- uid: System.Runtime.Remoting.RemotingConfiguration.GetRegisteredWellKnownClientTypes*\n  parent: System.Runtime.Remoting.RemotingConfiguration\n  isExternal: false\n  name: GetRegisteredWellKnownClientTypes\n  nameWithType: RemotingConfiguration.GetRegisteredWellKnownClientTypes\n  fullName: RemotingConfiguration.GetRegisteredWellKnownClientTypes\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.Remoting/RemotingConfiguration.xml\n- uid: System.Runtime.Remoting.RemotingConfiguration.GetRegisteredWellKnownServiceTypes*\n  parent: System.Runtime.Remoting.RemotingConfiguration\n  isExternal: false\n  name: GetRegisteredWellKnownServiceTypes\n  nameWithType: RemotingConfiguration.GetRegisteredWellKnownServiceTypes\n  fullName: RemotingConfiguration.GetRegisteredWellKnownServiceTypes\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.Remoting/RemotingConfiguration.xml\n- uid: System.Runtime.Remoting.RemotingConfiguration.IsActivationAllowed*\n  parent: System.Runtime.Remoting.RemotingConfiguration\n  isExternal: false\n  name: IsActivationAllowed\n  nameWithType: RemotingConfiguration.IsActivationAllowed\n  fullName: RemotingConfiguration.IsActivationAllowed\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.Remoting/RemotingConfiguration.xml\n- uid: System.Runtime.Remoting.RemotingConfiguration.IsRemotelyActivatedClientType*\n  parent: System.Runtime.Remoting.RemotingConfiguration\n  isExternal: false\n  name: IsRemotelyActivatedClientType\n  nameWithType: RemotingConfiguration.IsRemotelyActivatedClientType\n  fullName: RemotingConfiguration.IsRemotelyActivatedClientType\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.Remoting/RemotingConfiguration.xml\n- uid: System.Runtime.Remoting.RemotingConfiguration.IsWellKnownClientType*\n  parent: System.Runtime.Remoting.RemotingConfiguration\n  isExternal: false\n  name: IsWellKnownClientType\n  nameWithType: RemotingConfiguration.IsWellKnownClientType\n  fullName: RemotingConfiguration.IsWellKnownClientType\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.Remoting/RemotingConfiguration.xml\n- uid: System.Runtime.Remoting.RemotingConfiguration.ProcessId*\n  parent: System.Runtime.Remoting.RemotingConfiguration\n  isExternal: false\n  name: ProcessId\n  nameWithType: RemotingConfiguration.ProcessId\n  fullName: RemotingConfiguration.ProcessId\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.Remoting/RemotingConfiguration.xml\n- uid: System.Runtime.Remoting.RemotingConfiguration.RegisterActivatedClientType*\n  parent: System.Runtime.Remoting.RemotingConfiguration\n  isExternal: false\n  name: RegisterActivatedClientType\n  nameWithType: RemotingConfiguration.RegisterActivatedClientType\n  fullName: RemotingConfiguration.RegisterActivatedClientType\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.Remoting/RemotingConfiguration.xml\n- uid: System.Runtime.Remoting.RemotingConfiguration.RegisterActivatedServiceType*\n  parent: System.Runtime.Remoting.RemotingConfiguration\n  isExternal: false\n  name: RegisterActivatedServiceType\n  nameWithType: RemotingConfiguration.RegisterActivatedServiceType\n  fullName: RemotingConfiguration.RegisterActivatedServiceType\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.Remoting/RemotingConfiguration.xml\n- uid: System.Runtime.Remoting.RemotingConfiguration.RegisterWellKnownClientType*\n  parent: System.Runtime.Remoting.RemotingConfiguration\n  isExternal: false\n  name: RegisterWellKnownClientType\n  nameWithType: RemotingConfiguration.RegisterWellKnownClientType\n  fullName: RemotingConfiguration.RegisterWellKnownClientType\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.Remoting/RemotingConfiguration.xml\n- uid: System.Runtime.Remoting.RemotingConfiguration.RegisterWellKnownServiceType*\n  parent: System.Runtime.Remoting.RemotingConfiguration\n  isExternal: false\n  name: RegisterWellKnownServiceType\n  nameWithType: RemotingConfiguration.RegisterWellKnownServiceType\n  fullName: RemotingConfiguration.RegisterWellKnownServiceType\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.Remoting/RemotingConfiguration.xml\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: Object.Equals(Object)\n  fullName: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: Object.GetHashCode()\n  fullName: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: false\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: false\n  name: ToString()\n  nameWithType: Object.ToString()\n  fullName: Object.ToString()\n"}