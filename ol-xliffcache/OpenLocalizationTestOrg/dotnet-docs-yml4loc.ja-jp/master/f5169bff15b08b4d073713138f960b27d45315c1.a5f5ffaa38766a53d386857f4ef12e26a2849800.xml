{"nodes":[{"content":"Represents the base class from which all implementations of the <xref href=\"System.Security.Cryptography.Rijndael\"></xref> symmetric encryption algorithm must inherit.","nodes":[{"pos":[0,167],"content":"Represents the base class from which all implementations of the <ph id=\"ph1\">&lt;xref href=\"System.Security.Cryptography.Rijndael\"&gt;&lt;/xref&gt;</ph> symmetric encryption algorithm must inherit.","source":"Represents the base class from which all implementations of the <xref href=\"System.Security.Cryptography.Rijndael\"></xref> symmetric encryption algorithm must inherit."}],"pos":[588,756],"yaml":true},{"content":"This algorithm supports key lengths of 128, 192, or 256 bits; defaulting to 256 bits. This algorithm supports block sizes of 128, 192, or 256 bits; defaulting to 128 bits (<xref:System.Security.Cryptography.Aes>-compatible).  \n  \n The <xref:System.Security.Cryptography.Rijndael> class is the predecessor of the <xref:System.Security.Cryptography.Aes> algorithm. You should use the <xref:System.Security.Cryptography.Aes> algorithm instead of <xref:System.Security.Cryptography.Rijndael>. For more information, see the entry [The Differences Between Rijndael and AES](http://go.microsoft.com/fwlink/?LinkId=200932) in the .NET Security blog.","nodes":[{"pos":[0,224],"content":"This algorithm supports key lengths of 128, 192, or 256 bits; defaulting to 256 bits. This algorithm supports block sizes of 128, 192, or 256 bits; defaulting to 128 bits (<xref:System.Security.Cryptography.Aes>-compatible).","nodes":[{"content":"This algorithm supports key lengths of 128, 192, or 256 bits; defaulting to 256 bits. This algorithm supports block sizes of 128, 192, or 256 bits; defaulting to 128 bits (<xref:System.Security.Cryptography.Aes>-compatible).","pos":[0,224],"nodes":[{"content":"This algorithm supports key lengths of 128, 192, or 256 bits; defaulting to 256 bits.","pos":[0,85]},{"content":"This algorithm supports block sizes of 128, 192, or 256 bits; defaulting to 128 bits (<ph id=\"ph1\">&lt;xref:System.Security.Cryptography.Aes&gt;</ph>-compatible).","pos":[86,224],"source":" This algorithm supports block sizes of 128, 192, or 256 bits; defaulting to 128 bits (<xref:System.Security.Cryptography.Aes>-compatible)."}]}]},{"pos":[231,641],"content":"The <xref:System.Security.Cryptography.Rijndael> class is the predecessor of the <xref:System.Security.Cryptography.Aes> algorithm. You should use the <xref:System.Security.Cryptography.Aes> algorithm instead of <xref:System.Security.Cryptography.Rijndael>. For more information, see the entry [The Differences Between Rijndael and AES](http://go.microsoft.com/fwlink/?LinkId=200932) in the .NET Security blog.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Security.Cryptography.Rijndael&gt;</ph> class is the predecessor of the <ph id=\"ph2\">&lt;xref:System.Security.Cryptography.Aes&gt;</ph> algorithm.","pos":[0,131],"source":"The <xref:System.Security.Cryptography.Rijndael> class is the predecessor of the <xref:System.Security.Cryptography.Aes> algorithm."},{"content":"You should use the <ph id=\"ph1\">&lt;xref:System.Security.Cryptography.Aes&gt;</ph> algorithm instead of <ph id=\"ph2\">&lt;xref:System.Security.Cryptography.Rijndael&gt;</ph>.","pos":[132,257],"source":" You should use the <xref:System.Security.Cryptography.Aes> algorithm instead of <xref:System.Security.Cryptography.Rijndael>."},{"content":"For more information, see the entry <bpt id=\"p1\">[</bpt>The Differences Between Rijndael and AES<ept id=\"p1\">](http://go.microsoft.com/fwlink/?LinkId=200932)</ept> in the .NET Security blog.","pos":[258,410],"source":" For more information, see the entry [The Differences Between Rijndael and AES](http://go.microsoft.com/fwlink/?LinkId=200932) in the .NET Security blog."}]}],"pos":[767,1413],"yaml":true,"extradata":"MT"},{"content":"Initializes a new instance of <xref href=\"System.Security.Cryptography.Rijndael\"></xref>.","nodes":[{"pos":[0,89],"content":"Initializes a new instance of <ph id=\"ph1\">&lt;xref href=\"System.Security.Cryptography.Rijndael\"&gt;&lt;/xref&gt;</ph>.","source":"Initializes a new instance of <xref href=\"System.Security.Cryptography.Rijndael\"></xref>."}],"pos":[5611,5701],"yaml":true},{"content":"You cannot create an instance of an abstract class. Application code will create a new instance of a derived class.  \n  \n This method initializes the protected fields of <xref:System.Security.Cryptography.SymmetricAlgorithm> to the default values listed in the following table.  \n  \n|Field|Default Value|  \n|-----------|-------------------|  \n|<xref:System.Security.Cryptography.SymmetricAlgorithm.KeySizeValue>|256|  \n|<xref:System.Security.Cryptography.SymmetricAlgorithm.BlockSizeValue>|128|  \n|<xref:System.Security.Cryptography.SymmetricAlgorithm.FeedbackSizeValue>|128|","nodes":[{"pos":[0,115],"content":"You cannot create an instance of an abstract class. Application code will create a new instance of a derived class.","nodes":[{"content":"You cannot create an instance of an abstract class. Application code will create a new instance of a derived class.","pos":[0,115],"nodes":[{"content":"You cannot create an instance of an abstract class.","pos":[0,51]},{"content":"Application code will create a new instance of a derived class.","pos":[52,115]}]}]},{"pos":[122,277],"content":"This method initializes the protected fields of <xref:System.Security.Cryptography.SymmetricAlgorithm> to the default values listed in the following table.","nodes":[{"content":"This method initializes the protected fields of <ph id=\"ph1\">&lt;xref:System.Security.Cryptography.SymmetricAlgorithm&gt;</ph> to the default values listed in the following table.","pos":[0,155],"source":"This method initializes the protected fields of <xref:System.Security.Cryptography.SymmetricAlgorithm> to the default values listed in the following table."}]},{"pos":[284,289],"content":"Field","nodes":[{"content":"Field","pos":[0,5]}]},{"pos":[290,303],"content":"Default Value","nodes":[{"content":"Default Value","pos":[0,13]}]},{"pos":[344,411],"content":"<xref:System.Security.Cryptography.SymmetricAlgorithm.KeySizeValue>","nodes":[]},{"pos":[412,415],"content":"256","nodes":[{"content":"256","pos":[0,3]}]},{"pos":[420,489],"content":"<xref:System.Security.Cryptography.SymmetricAlgorithm.BlockSizeValue>","nodes":[]},{"pos":[490,493],"content":"128","nodes":[{"content":"128","pos":[0,3]}]},{"pos":[498,570],"content":"<xref:System.Security.Cryptography.SymmetricAlgorithm.FeedbackSizeValue>","nodes":[]},{"pos":[571,574],"content":"128","nodes":[{"content":"128","pos":[0,3]}]}],"pos":[5712,6298],"yaml":true,"extradata":"MT"},{"content":"Creates a cryptographic object to perform the <xref href=\"System.Security.Cryptography.Rijndael\"></xref> algorithm.","nodes":[{"pos":[0,115],"content":"Creates a cryptographic object to perform the <ph id=\"ph1\">&lt;xref href=\"System.Security.Cryptography.Rijndael\"&gt;&lt;/xref&gt;</ph> algorithm.","source":"Creates a cryptographic object to perform the <xref href=\"System.Security.Cryptography.Rijndael\"></xref> algorithm."}],"pos":[8044,8160],"yaml":true},{"content":"The default implementation of <xref:System.Security.Cryptography.Rijndael> is <xref:System.Security.Cryptography.RijndaelManaged>.","nodes":[{"pos":[0,130],"content":"The default implementation of <xref:System.Security.Cryptography.Rijndael> is <xref:System.Security.Cryptography.RijndaelManaged>.","nodes":[{"content":"The default implementation of <ph id=\"ph1\">&lt;xref:System.Security.Cryptography.Rijndael&gt;</ph> is <ph id=\"ph2\">&lt;xref:System.Security.Cryptography.RijndaelManaged&gt;</ph>.","pos":[0,130],"source":"The default implementation of <xref:System.Security.Cryptography.Rijndael> is <xref:System.Security.Cryptography.RijndaelManaged>."}]}],"pos":[8171,8302],"yaml":true,"extradata":"MT"},{"content":"A cryptographic object.","nodes":[{"pos":[0,23],"content":"A cryptographic object.","nodes":[{"content":"A cryptographic object.","pos":[0,23]}]}],"pos":[8935,8959],"yaml":true},{"content":"The algorithm was used with Federal Information Processing Standards (FIPS) mode enabled, but is not FIPS compatible.","nodes":[{"pos":[0,117],"content":"The algorithm was used with Federal Information Processing Standards (FIPS) mode enabled, but is not FIPS compatible.","nodes":[{"content":"The algorithm was used with Federal Information Processing Standards (FIPS) mode enabled, but is not FIPS compatible.","pos":[0,117]}]}],"pos":[9163,9281],"yaml":true},{"content":"Creates a cryptographic object to perform the specified implementation of the <xref href=\"System.Security.Cryptography.Rijndael\"></xref> algorithm.","nodes":[{"pos":[0,147],"content":"Creates a cryptographic object to perform the specified implementation of the <ph id=\"ph1\">&lt;xref href=\"System.Security.Cryptography.Rijndael\"&gt;&lt;/xref&gt;</ph> algorithm.","source":"Creates a cryptographic object to perform the specified implementation of the <xref href=\"System.Security.Cryptography.Rijndael\"></xref> algorithm."}],"pos":[10504,10652],"yaml":true},{"content":"Acceptable values for the `algName` parameter are `Rijndael` and `System.Security.Cryptography.RijndaelManaged`.","nodes":[{"pos":[0,112],"content":"Acceptable values for the <ph id=\"ph1\">`algName`</ph> parameter are <ph id=\"ph2\">`Rijndael`</ph> and <ph id=\"ph3\">`System.Security.Cryptography.RijndaelManaged`</ph>.","source":"Acceptable values for the `algName` parameter are `Rijndael` and `System.Security.Cryptography.RijndaelManaged`."}],"pos":[10663,10776],"yaml":true,"extradata":"MT"},{"content":"The name of the specific implementation of <xref href=\"System.Security.Cryptography.Rijndael\"></xref> to create.","nodes":[{"pos":[0,112],"content":"The name of the specific implementation of <ph id=\"ph1\">&lt;xref href=\"System.Security.Cryptography.Rijndael\"&gt;&lt;/xref&gt;</ph> to create.","source":"The name of the specific implementation of <xref href=\"System.Security.Cryptography.Rijndael\"></xref> to create."}],"pos":[10955,11068],"yaml":true},{"content":"A cryptographic object.","nodes":[{"pos":[0,23],"content":"A cryptographic object.","nodes":[{"content":"A cryptographic object.","pos":[0,23]}]}],"pos":[11149,11173],"yaml":true},{"content":"The algorithm described by the <code>algName</code> parameter was used with Federal Information Processing Standards (FIPS) mode enabled, but is not FIPS compatible.","nodes":[{"pos":[0,165],"content":"The algorithm described by the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">algName</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter was used with Federal Information Processing Standards (FIPS) mode enabled, but is not FIPS compatible.","source":"The algorithm described by the <code>algName</code> parameter was used with Federal Information Processing Standards (FIPS) mode enabled, but is not FIPS compatible."}],"pos":[11377,11543],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Security.Cryptography.Rijndael\n  commentId: T:System.Security.Cryptography.Rijndael\n  id: Rijndael\n  children:\n  - System.Security.Cryptography.Rijndael.#ctor\n  - System.Security.Cryptography.Rijndael.Create\n  - System.Security.Cryptography.Rijndael.Create(System.String)\n  langs:\n  - csharp\n  name: Rijndael\n  nameWithType: Rijndael\n  fullName: System.Security.Cryptography.Rijndael\n  type: Class\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Security.Cryptography.Algorithms\n  namespace: System.Security.Cryptography\n  summary: Represents the base class from which all implementations of the <xref href=\"System.Security.Cryptography.Rijndael\"></xref> symmetric encryption algorithm must inherit.\n  remarks: \"This algorithm supports key lengths of 128, 192, or 256 bits; defaulting to 256 bits. This algorithm supports block sizes of 128, 192, or 256 bits; defaulting to 128 bits (<xref:System.Security.Cryptography.Aes>-compatible).  \\n  \\n The <xref:System.Security.Cryptography.Rijndael> class is the predecessor of the <xref:System.Security.Cryptography.Aes> algorithm. You should use the <xref:System.Security.Cryptography.Aes> algorithm instead of <xref:System.Security.Cryptography.Rijndael>. For more information, see the entry [The Differences Between Rijndael and AES](http://go.microsoft.com/fwlink/?LinkId=200932) in the .NET Security blog.\"\n  example:\n  - \"The following code example uses the <xref:System.Security.Cryptography.Rijndael> class to encrypt and then decrypt data.  \\n  \\n [!code-csharp[Cryptography.Rijndael.Create.File#1](~/samples/snippets/csharp/VS_Snippets_CLR/cryptography.rijndael.create.file/cs/fileexample.cs#1)]\\n [!code-vb[Cryptography.Rijndael.Create.File#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/cryptography.rijndael.create.file/vb/fileexample.vb#1)]\"\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(true)]\n\n      public abstract class Rijndael : System.Security.Cryptography.SymmetricAlgorithm\n  inheritance:\n  - System.Object\n  - System.Security.Cryptography.SymmetricAlgorithm\n  derivedClasses:\n  - System.Security.Cryptography.RijndaelManaged\n  implements: []\n  inheritedMembers:\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.ToString\n  - System.Security.Cryptography.SymmetricAlgorithm.BlockSize\n  - System.Security.Cryptography.SymmetricAlgorithm.BlockSizeValue\n  - System.Security.Cryptography.SymmetricAlgorithm.Clear\n  - System.Security.Cryptography.SymmetricAlgorithm.CreateDecryptor\n  - System.Security.Cryptography.SymmetricAlgorithm.CreateDecryptor(System.Byte[],System.Byte[])\n  - System.Security.Cryptography.SymmetricAlgorithm.CreateEncryptor\n  - System.Security.Cryptography.SymmetricAlgorithm.CreateEncryptor(System.Byte[],System.Byte[])\n  - System.Security.Cryptography.SymmetricAlgorithm.Dispose\n  - System.Security.Cryptography.SymmetricAlgorithm.Dispose(System.Boolean)\n  - System.Security.Cryptography.SymmetricAlgorithm.FeedbackSize\n  - System.Security.Cryptography.SymmetricAlgorithm.FeedbackSizeValue\n  - System.Security.Cryptography.SymmetricAlgorithm.GenerateIV\n  - System.Security.Cryptography.SymmetricAlgorithm.GenerateKey\n  - System.Security.Cryptography.SymmetricAlgorithm.IV\n  - System.Security.Cryptography.SymmetricAlgorithm.IVValue\n  - System.Security.Cryptography.SymmetricAlgorithm.Key\n  - System.Security.Cryptography.SymmetricAlgorithm.KeySize\n  - System.Security.Cryptography.SymmetricAlgorithm.KeySizeValue\n  - System.Security.Cryptography.SymmetricAlgorithm.KeyValue\n  - System.Security.Cryptography.SymmetricAlgorithm.LegalBlockSizes\n  - System.Security.Cryptography.SymmetricAlgorithm.LegalBlockSizesValue\n  - System.Security.Cryptography.SymmetricAlgorithm.LegalKeySizes\n  - System.Security.Cryptography.SymmetricAlgorithm.LegalKeySizesValue\n  - System.Security.Cryptography.SymmetricAlgorithm.Mode\n  - System.Security.Cryptography.SymmetricAlgorithm.ModeValue\n  - System.Security.Cryptography.SymmetricAlgorithm.Padding\n  - System.Security.Cryptography.SymmetricAlgorithm.PaddingValue\n  - System.Security.Cryptography.SymmetricAlgorithm.ValidKeySize(System.Int32)\n  attributes:\n  - type: System.Runtime.InteropServices.ComVisibleAttribute\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/Rijndael.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Cryptography.Rijndael.#ctor\n  commentId: M:System.Security.Cryptography.Rijndael.#ctor\n  id: '#ctor'\n  parent: System.Security.Cryptography.Rijndael\n  langs:\n  - csharp\n  name: Rijndael()\n  nameWithType: Rijndael.Rijndael()\n  fullName: Rijndael.Rijndael()\n  type: Constructor\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Security.Cryptography.Algorithms\n  namespace: System.Security.Cryptography\n  summary: Initializes a new instance of <xref href=\"System.Security.Cryptography.Rijndael\"></xref>.\n  remarks: \"You cannot create an instance of an abstract class. Application code will create a new instance of a derived class.  \\n  \\n This method initializes the protected fields of <xref:System.Security.Cryptography.SymmetricAlgorithm> to the default values listed in the following table.  \\n  \\n|Field|Default Value|  \\n|-----------|-------------------|  \\n|<xref:System.Security.Cryptography.SymmetricAlgorithm.KeySizeValue>|256|  \\n|<xref:System.Security.Cryptography.SymmetricAlgorithm.BlockSizeValue>|128|  \\n|<xref:System.Security.Cryptography.SymmetricAlgorithm.FeedbackSizeValue>|128|\"\n  example:\n  - \"The following code example uses the <xref:System.Security.Cryptography.Rijndael> class to encrypt and then decrypt data.  \\n  \\n [!code-csharp[Cryptography.Rijndael.Create.File#1](~/samples/snippets/csharp/VS_Snippets_CLR/cryptography.rijndael.create.file/cs/fileexample.cs#1)]\\n [!code-vb[Cryptography.Rijndael.Create.File#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/cryptography.rijndael.create.file/vb/fileexample.vb#1)]\"\n  syntax:\n    content: protected Rijndael ();\n    parameters: []\n  overload: System.Security.Cryptography.Rijndael.#ctor*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/Rijndael.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Cryptography.Rijndael.Create\n  commentId: M:System.Security.Cryptography.Rijndael.Create\n  id: Create\n  parent: System.Security.Cryptography.Rijndael\n  langs:\n  - csharp\n  name: Create()\n  nameWithType: Rijndael.Create()\n  fullName: Rijndael.Create()\n  type: Method\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Security.Cryptography.Algorithms\n  namespace: System.Security.Cryptography\n  summary: Creates a cryptographic object to perform the <xref href=\"System.Security.Cryptography.Rijndael\"></xref> algorithm.\n  remarks: The default implementation of <xref:System.Security.Cryptography.Rijndael> is <xref:System.Security.Cryptography.RijndaelManaged>.\n  example:\n  - \"The following code example uses the <xref:System.Security.Cryptography.Rijndael> class to encrypt and then decrypt data.  \\n  \\n [!code-csharp[Cryptography.Rijndael.Create.File#1](~/samples/snippets/csharp/VS_Snippets_CLR/cryptography.rijndael.create.file/cs/fileexample.cs#1)]\\n [!code-vb[Cryptography.Rijndael.Create.File#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/cryptography.rijndael.create.file/vb/fileexample.vb#1)]\"\n  syntax:\n    content: public static System.Security.Cryptography.Rijndael Create ();\n    parameters: []\n    return:\n      type: System.Security.Cryptography.Rijndael\n      description: A cryptographic object.\n  overload: System.Security.Cryptography.Rijndael.Create*\n  exceptions:\n  - type: System.Reflection.TargetInvocationException\n    commentId: T:System.Reflection.TargetInvocationException\n    description: The algorithm was used with Federal Information Processing Standards (FIPS) mode enabled, but is not FIPS compatible.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/Rijndael.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Cryptography.Rijndael.Create(System.String)\n  commentId: M:System.Security.Cryptography.Rijndael.Create(System.String)\n  id: Create(System.String)\n  parent: System.Security.Cryptography.Rijndael\n  langs:\n  - csharp\n  name: Create(String)\n  nameWithType: Rijndael.Create(String)\n  fullName: Rijndael.Create(String)\n  type: Method\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Security.Cryptography.Algorithms\n  namespace: System.Security.Cryptography\n  summary: Creates a cryptographic object to perform the specified implementation of the <xref href=\"System.Security.Cryptography.Rijndael\"></xref> algorithm.\n  remarks: Acceptable values for the `algName` parameter are `Rijndael` and `System.Security.Cryptography.RijndaelManaged`.\n  syntax:\n    content: public static System.Security.Cryptography.Rijndael Create (string algName);\n    parameters:\n    - id: algName\n      type: System.String\n      description: The name of the specific implementation of <xref href=\"System.Security.Cryptography.Rijndael\"></xref> to create.\n    return:\n      type: System.Security.Cryptography.Rijndael\n      description: A cryptographic object.\n  overload: System.Security.Cryptography.Rijndael.Create*\n  exceptions:\n  - type: System.Reflection.TargetInvocationException\n    commentId: T:System.Reflection.TargetInvocationException\n    description: The algorithm described by the <code>algName</code> parameter was used with Federal Information Processing Standards (FIPS) mode enabled, but is not FIPS compatible.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/Rijndael.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\nreferences:\n- uid: System.Security.Cryptography.SymmetricAlgorithm\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: SymmetricAlgorithm\n  nameWithType: SymmetricAlgorithm\n  fullName: System.Security.Cryptography.SymmetricAlgorithm\n- uid: System.Reflection.TargetInvocationException\n  parent: System.Reflection\n  isExternal: false\n  name: TargetInvocationException\n  nameWithType: TargetInvocationException\n  fullName: System.Reflection.TargetInvocationException\n- uid: System.Security.Cryptography.Rijndael.#ctor\n  parent: System.Security.Cryptography.Rijndael\n  isExternal: false\n  name: Rijndael()\n  nameWithType: Rijndael.Rijndael()\n  fullName: Rijndael.Rijndael()\n- uid: System.Security.Cryptography.Rijndael.Create\n  parent: System.Security.Cryptography.Rijndael\n  isExternal: false\n  name: Create()\n  nameWithType: Rijndael.Create()\n  fullName: Rijndael.Create()\n- uid: System.Security.Cryptography.Rijndael\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: Rijndael\n  nameWithType: Rijndael\n  fullName: System.Security.Cryptography.Rijndael\n- uid: System.Security.Cryptography.Rijndael.Create(System.String)\n  parent: System.Security.Cryptography.Rijndael\n  isExternal: false\n  name: Create(String)\n  nameWithType: Rijndael.Create(String)\n  fullName: Rijndael.Create(String)\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Security.Cryptography.Rijndael.#ctor*\n  parent: System.Security.Cryptography.Rijndael\n  isExternal: false\n  name: Rijndael\n  nameWithType: Rijndael.Rijndael\n  fullName: Rijndael.Rijndael\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/Rijndael.xml\n- uid: System.Security.Cryptography.Rijndael.Create*\n  parent: System.Security.Cryptography.Rijndael\n  isExternal: false\n  name: Create\n  nameWithType: Rijndael.Create\n  fullName: Rijndael.Create\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/Rijndael.xml\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: Object.Equals(Object)\n  fullName: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: Object.GetHashCode()\n  fullName: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: false\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: false\n  name: ToString()\n  nameWithType: Object.ToString()\n  fullName: Object.ToString()\n- uid: System.Security.Cryptography.SymmetricAlgorithm.BlockSize\n  parent: System.Security.Cryptography.SymmetricAlgorithm\n  isExternal: false\n  name: BlockSize\n  nameWithType: SymmetricAlgorithm.BlockSize\n  fullName: SymmetricAlgorithm.BlockSize\n- uid: System.Security.Cryptography.SymmetricAlgorithm.BlockSizeValue\n  parent: System.Security.Cryptography.SymmetricAlgorithm\n  isExternal: false\n  name: BlockSizeValue\n  nameWithType: SymmetricAlgorithm.BlockSizeValue\n  fullName: SymmetricAlgorithm.BlockSizeValue\n- uid: System.Security.Cryptography.SymmetricAlgorithm.Clear\n  parent: System.Security.Cryptography.SymmetricAlgorithm\n  isExternal: false\n  name: Clear()\n  nameWithType: SymmetricAlgorithm.Clear()\n  fullName: SymmetricAlgorithm.Clear()\n- uid: System.Security.Cryptography.SymmetricAlgorithm.CreateDecryptor\n  parent: System.Security.Cryptography.SymmetricAlgorithm\n  isExternal: false\n  name: CreateDecryptor()\n  nameWithType: SymmetricAlgorithm.CreateDecryptor()\n  fullName: SymmetricAlgorithm.CreateDecryptor()\n- uid: System.Security.Cryptography.SymmetricAlgorithm.CreateDecryptor(System.Byte[],System.Byte[])\n  parent: System.Security.Cryptography.SymmetricAlgorithm\n  isExternal: false\n  name: CreateDecryptor(Byte[], Byte[])\n  nameWithType: SymmetricAlgorithm.CreateDecryptor(Byte[], Byte[])\n  fullName: SymmetricAlgorithm.CreateDecryptor(Byte[], Byte[])\n- uid: System.Security.Cryptography.SymmetricAlgorithm.CreateEncryptor\n  parent: System.Security.Cryptography.SymmetricAlgorithm\n  isExternal: false\n  name: CreateEncryptor()\n  nameWithType: SymmetricAlgorithm.CreateEncryptor()\n  fullName: SymmetricAlgorithm.CreateEncryptor()\n- uid: System.Security.Cryptography.SymmetricAlgorithm.CreateEncryptor(System.Byte[],System.Byte[])\n  parent: System.Security.Cryptography.SymmetricAlgorithm\n  isExternal: false\n  name: CreateEncryptor(Byte[], Byte[])\n  nameWithType: SymmetricAlgorithm.CreateEncryptor(Byte[], Byte[])\n  fullName: SymmetricAlgorithm.CreateEncryptor(Byte[], Byte[])\n- uid: System.Security.Cryptography.SymmetricAlgorithm.Dispose\n  parent: System.Security.Cryptography.SymmetricAlgorithm\n  isExternal: false\n  name: Dispose()\n  nameWithType: SymmetricAlgorithm.Dispose()\n  fullName: SymmetricAlgorithm.Dispose()\n- uid: System.Security.Cryptography.SymmetricAlgorithm.Dispose(System.Boolean)\n  parent: System.Security.Cryptography.SymmetricAlgorithm\n  isExternal: false\n  name: Dispose(Boolean)\n  nameWithType: SymmetricAlgorithm.Dispose(Boolean)\n  fullName: SymmetricAlgorithm.Dispose(Boolean)\n- uid: System.Security.Cryptography.SymmetricAlgorithm.FeedbackSize\n  parent: System.Security.Cryptography.SymmetricAlgorithm\n  isExternal: false\n  name: FeedbackSize\n  nameWithType: SymmetricAlgorithm.FeedbackSize\n  fullName: SymmetricAlgorithm.FeedbackSize\n- uid: System.Security.Cryptography.SymmetricAlgorithm.FeedbackSizeValue\n  parent: System.Security.Cryptography.SymmetricAlgorithm\n  isExternal: false\n  name: FeedbackSizeValue\n  nameWithType: SymmetricAlgorithm.FeedbackSizeValue\n  fullName: SymmetricAlgorithm.FeedbackSizeValue\n- uid: System.Security.Cryptography.SymmetricAlgorithm.GenerateIV\n  parent: System.Security.Cryptography.SymmetricAlgorithm\n  isExternal: false\n  name: GenerateIV()\n  nameWithType: SymmetricAlgorithm.GenerateIV()\n  fullName: SymmetricAlgorithm.GenerateIV()\n- uid: System.Security.Cryptography.SymmetricAlgorithm.GenerateKey\n  parent: System.Security.Cryptography.SymmetricAlgorithm\n  isExternal: false\n  name: GenerateKey()\n  nameWithType: SymmetricAlgorithm.GenerateKey()\n  fullName: SymmetricAlgorithm.GenerateKey()\n- uid: System.Security.Cryptography.SymmetricAlgorithm.IV\n  parent: System.Security.Cryptography.SymmetricAlgorithm\n  isExternal: false\n  name: IV\n  nameWithType: SymmetricAlgorithm.IV\n  fullName: SymmetricAlgorithm.IV\n- uid: System.Security.Cryptography.SymmetricAlgorithm.IVValue\n  parent: System.Security.Cryptography.SymmetricAlgorithm\n  isExternal: false\n  name: IVValue\n  nameWithType: SymmetricAlgorithm.IVValue\n  fullName: SymmetricAlgorithm.IVValue\n- uid: System.Security.Cryptography.SymmetricAlgorithm.Key\n  parent: System.Security.Cryptography.SymmetricAlgorithm\n  isExternal: false\n  name: Key\n  nameWithType: SymmetricAlgorithm.Key\n  fullName: SymmetricAlgorithm.Key\n- uid: System.Security.Cryptography.SymmetricAlgorithm.KeySize\n  parent: System.Security.Cryptography.SymmetricAlgorithm\n  isExternal: false\n  name: KeySize\n  nameWithType: SymmetricAlgorithm.KeySize\n  fullName: SymmetricAlgorithm.KeySize\n- uid: System.Security.Cryptography.SymmetricAlgorithm.KeySizeValue\n  parent: System.Security.Cryptography.SymmetricAlgorithm\n  isExternal: false\n  name: KeySizeValue\n  nameWithType: SymmetricAlgorithm.KeySizeValue\n  fullName: SymmetricAlgorithm.KeySizeValue\n- uid: System.Security.Cryptography.SymmetricAlgorithm.KeyValue\n  parent: System.Security.Cryptography.SymmetricAlgorithm\n  isExternal: false\n  name: KeyValue\n  nameWithType: SymmetricAlgorithm.KeyValue\n  fullName: SymmetricAlgorithm.KeyValue\n- uid: System.Security.Cryptography.SymmetricAlgorithm.LegalBlockSizes\n  parent: System.Security.Cryptography.SymmetricAlgorithm\n  isExternal: false\n  name: LegalBlockSizes\n  nameWithType: SymmetricAlgorithm.LegalBlockSizes\n  fullName: SymmetricAlgorithm.LegalBlockSizes\n- uid: System.Security.Cryptography.SymmetricAlgorithm.LegalBlockSizesValue\n  parent: System.Security.Cryptography.SymmetricAlgorithm\n  isExternal: false\n  name: LegalBlockSizesValue\n  nameWithType: SymmetricAlgorithm.LegalBlockSizesValue\n  fullName: SymmetricAlgorithm.LegalBlockSizesValue\n- uid: System.Security.Cryptography.SymmetricAlgorithm.LegalKeySizes\n  parent: System.Security.Cryptography.SymmetricAlgorithm\n  isExternal: false\n  name: LegalKeySizes\n  nameWithType: SymmetricAlgorithm.LegalKeySizes\n  fullName: SymmetricAlgorithm.LegalKeySizes\n- uid: System.Security.Cryptography.SymmetricAlgorithm.LegalKeySizesValue\n  parent: System.Security.Cryptography.SymmetricAlgorithm\n  isExternal: false\n  name: LegalKeySizesValue\n  nameWithType: SymmetricAlgorithm.LegalKeySizesValue\n  fullName: SymmetricAlgorithm.LegalKeySizesValue\n- uid: System.Security.Cryptography.SymmetricAlgorithm.Mode\n  parent: System.Security.Cryptography.SymmetricAlgorithm\n  isExternal: false\n  name: Mode\n  nameWithType: SymmetricAlgorithm.Mode\n  fullName: SymmetricAlgorithm.Mode\n- uid: System.Security.Cryptography.SymmetricAlgorithm.ModeValue\n  parent: System.Security.Cryptography.SymmetricAlgorithm\n  isExternal: false\n  name: ModeValue\n  nameWithType: SymmetricAlgorithm.ModeValue\n  fullName: SymmetricAlgorithm.ModeValue\n- uid: System.Security.Cryptography.SymmetricAlgorithm.Padding\n  parent: System.Security.Cryptography.SymmetricAlgorithm\n  isExternal: false\n  name: Padding\n  nameWithType: SymmetricAlgorithm.Padding\n  fullName: SymmetricAlgorithm.Padding\n- uid: System.Security.Cryptography.SymmetricAlgorithm.PaddingValue\n  parent: System.Security.Cryptography.SymmetricAlgorithm\n  isExternal: false\n  name: PaddingValue\n  nameWithType: SymmetricAlgorithm.PaddingValue\n  fullName: SymmetricAlgorithm.PaddingValue\n- uid: System.Security.Cryptography.SymmetricAlgorithm.ValidKeySize(System.Int32)\n  parent: System.Security.Cryptography.SymmetricAlgorithm\n  isExternal: false\n  name: ValidKeySize(Int32)\n  nameWithType: SymmetricAlgorithm.ValidKeySize(Int32)\n  fullName: SymmetricAlgorithm.ValidKeySize(Int32)\n"}