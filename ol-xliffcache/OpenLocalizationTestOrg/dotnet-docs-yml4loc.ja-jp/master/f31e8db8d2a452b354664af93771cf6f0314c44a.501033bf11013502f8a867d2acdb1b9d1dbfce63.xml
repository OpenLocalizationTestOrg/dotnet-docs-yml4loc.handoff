{"nodes":[{"content":"Defines and creates generic type parameters for dynamically defined generic types and methods. This class cannot be inherited.","nodes":[{"pos":[0,126],"content":"Defines and creates generic type parameters for dynamically defined generic types and methods. This class cannot be inherited.","nodes":[{"content":"Defines and creates generic type parameters for dynamically defined generic types and methods. This class cannot be inherited.","pos":[0,126],"nodes":[{"content":"Defines and creates generic type parameters for dynamically defined generic types and methods.","pos":[0,94]},{"content":"This class cannot be inherited.","pos":[95,126]}]}]}],"pos":[7574,7701],"yaml":true},{"content":"You can get an array of <xref:System.Reflection.Emit.GenericTypeParameterBuilder> objects by using the <xref:System.Reflection.Emit.TypeBuilder.DefineGenericParameters%2A?displayProperty=fullName> method to add type parameters to a dynamic type, thus making it a generic type, or by using the <xref:System.Reflection.Emit.MethodBuilder.DefineGenericParameters%2A?displayProperty=fullName> method to add type parameters to a dynamic method. Use the <xref:System.Reflection.Emit.GenericTypeParameterBuilder> objects to add constraints to the type parameters. Constraints are of three kinds:  \n  \n-   The base type constraint specifies that any type assigned to the generic type parameter must derive from a particular base type. Set this constraint by using the <xref:System.Reflection.Emit.GenericTypeParameterBuilder.SetBaseTypeConstraint%2A> method.  \n  \n-   An interface constraint specifies that any type assigned to the generic type parameter must implement a particular interface. Set the interface constraints by using the <xref:System.Reflection.Emit.GenericTypeParameterBuilder.SetInterfaceConstraints%2A> method.  \n  \n-   Special constraints specify that any type assigned to the generic type parameter must have a default constructor, must be a reference type, or must be a value type. Set the special constraints for a type parameter by using the <xref:System.Reflection.Emit.GenericTypeParameterBuilder.SetGenericParameterAttributes%2A> method.  \n  \n Interface constraints and special constraints cannot be retrieved using methods of the <xref:System.Reflection.Emit.GenericTypeParameterBuilder> class. Once you have created the generic type that contains the type parameters, you can use its <xref:System.Type> object to reflect the constraints. Use the <xref:System.Type.GetGenericArguments%2A?displayProperty=fullName> method to get the type parameters, and for each type parameter use the <xref:System.Type.GetGenericParameterConstraints%2A?displayProperty=fullName> method to get the base type constraint and interface constraints, and the <xref:System.Type.GenericParameterAttributes%2A?displayProperty=fullName> property to get the special constraints.","nodes":[{"pos":[0,588],"content":"You can get an array of <xref:System.Reflection.Emit.GenericTypeParameterBuilder> objects by using the <xref:System.Reflection.Emit.TypeBuilder.DefineGenericParameters%2A?displayProperty=fullName> method to add type parameters to a dynamic type, thus making it a generic type, or by using the <xref:System.Reflection.Emit.MethodBuilder.DefineGenericParameters%2A?displayProperty=fullName> method to add type parameters to a dynamic method. Use the <xref:System.Reflection.Emit.GenericTypeParameterBuilder> objects to add constraints to the type parameters. Constraints are of three kinds:","nodes":[{"content":"You can get an array of <xref:System.Reflection.Emit.GenericTypeParameterBuilder> objects by using the <xref:System.Reflection.Emit.TypeBuilder.DefineGenericParameters%2A?displayProperty=fullName> method to add type parameters to a dynamic type, thus making it a generic type, or by using the <xref:System.Reflection.Emit.MethodBuilder.DefineGenericParameters%2A?displayProperty=fullName> method to add type parameters to a dynamic method. Use the <xref:System.Reflection.Emit.GenericTypeParameterBuilder> objects to add constraints to the type parameters. Constraints are of three kinds:","pos":[0,588],"nodes":[{"content":"You can get an array of <ph id=\"ph1\">&lt;xref:System.Reflection.Emit.GenericTypeParameterBuilder&gt;</ph> objects by using the <ph id=\"ph2\">&lt;xref:System.Reflection.Emit.TypeBuilder.DefineGenericParameters%2A?displayProperty=fullName&gt;</ph> method to add type parameters to a dynamic type, thus making it a generic type, or by using the <ph id=\"ph3\">&lt;xref:System.Reflection.Emit.MethodBuilder.DefineGenericParameters%2A?displayProperty=fullName&gt;</ph> method to add type parameters to a dynamic method.","pos":[0,439],"source":"You can get an array of <xref:System.Reflection.Emit.GenericTypeParameterBuilder> objects by using the <xref:System.Reflection.Emit.TypeBuilder.DefineGenericParameters%2A?displayProperty=fullName> method to add type parameters to a dynamic type, thus making it a generic type, or by using the <xref:System.Reflection.Emit.MethodBuilder.DefineGenericParameters%2A?displayProperty=fullName> method to add type parameters to a dynamic method."},{"content":"Use the <ph id=\"ph1\">&lt;xref:System.Reflection.Emit.GenericTypeParameterBuilder&gt;</ph> objects to add constraints to the type parameters.","pos":[440,556],"source":" Use the <xref:System.Reflection.Emit.GenericTypeParameterBuilder> objects to add constraints to the type parameters."},{"content":"Constraints are of three kinds:","pos":[557,588]}]}]},{"pos":[598,850],"content":"The base type constraint specifies that any type assigned to the generic type parameter must derive from a particular base type. Set this constraint by using the <xref:System.Reflection.Emit.GenericTypeParameterBuilder.SetBaseTypeConstraint%2A> method.","nodes":[{"content":"The base type constraint specifies that any type assigned to the generic type parameter must derive from a particular base type. Set this constraint by using the <xref:System.Reflection.Emit.GenericTypeParameterBuilder.SetBaseTypeConstraint%2A> method.","pos":[0,252],"nodes":[{"content":"The base type constraint specifies that any type assigned to the generic type parameter must derive from a particular base type.","pos":[0,128]},{"content":"Set this constraint by using the <ph id=\"ph1\">&lt;xref:System.Reflection.Emit.GenericTypeParameterBuilder.SetBaseTypeConstraint%2A&gt;</ph> method.","pos":[129,252],"source":" Set this constraint by using the <xref:System.Reflection.Emit.GenericTypeParameterBuilder.SetBaseTypeConstraint%2A> method."}]}]},{"pos":[860,1121],"content":"An interface constraint specifies that any type assigned to the generic type parameter must implement a particular interface. Set the interface constraints by using the <xref:System.Reflection.Emit.GenericTypeParameterBuilder.SetInterfaceConstraints%2A> method.","nodes":[{"content":"An interface constraint specifies that any type assigned to the generic type parameter must implement a particular interface. Set the interface constraints by using the <xref:System.Reflection.Emit.GenericTypeParameterBuilder.SetInterfaceConstraints%2A> method.","pos":[0,261],"nodes":[{"content":"An interface constraint specifies that any type assigned to the generic type parameter must implement a particular interface.","pos":[0,125]},{"content":"Set the interface constraints by using the <ph id=\"ph1\">&lt;xref:System.Reflection.Emit.GenericTypeParameterBuilder.SetInterfaceConstraints%2A&gt;</ph> method.","pos":[126,261],"source":" Set the interface constraints by using the <xref:System.Reflection.Emit.GenericTypeParameterBuilder.SetInterfaceConstraints%2A> method."}]}]},{"pos":[1131,1456],"content":"Special constraints specify that any type assigned to the generic type parameter must have a default constructor, must be a reference type, or must be a value type. Set the special constraints for a type parameter by using the <xref:System.Reflection.Emit.GenericTypeParameterBuilder.SetGenericParameterAttributes%2A> method.","nodes":[{"content":"Special constraints specify that any type assigned to the generic type parameter must have a default constructor, must be a reference type, or must be a value type. Set the special constraints for a type parameter by using the <xref:System.Reflection.Emit.GenericTypeParameterBuilder.SetGenericParameterAttributes%2A> method.","pos":[0,325],"nodes":[{"content":"Special constraints specify that any type assigned to the generic type parameter must have a default constructor, must be a reference type, or must be a value type.","pos":[0,164]},{"content":"Set the special constraints for a type parameter by using the <ph id=\"ph1\">&lt;xref:System.Reflection.Emit.GenericTypeParameterBuilder.SetGenericParameterAttributes%2A&gt;</ph> method.","pos":[165,325],"source":" Set the special constraints for a type parameter by using the <xref:System.Reflection.Emit.GenericTypeParameterBuilder.SetGenericParameterAttributes%2A> method."}]}]},{"pos":[1463,2171],"content":"Interface constraints and special constraints cannot be retrieved using methods of the <xref:System.Reflection.Emit.GenericTypeParameterBuilder> class. Once you have created the generic type that contains the type parameters, you can use its <xref:System.Type> object to reflect the constraints. Use the <xref:System.Type.GetGenericArguments%2A?displayProperty=fullName> method to get the type parameters, and for each type parameter use the <xref:System.Type.GetGenericParameterConstraints%2A?displayProperty=fullName> method to get the base type constraint and interface constraints, and the <xref:System.Type.GenericParameterAttributes%2A?displayProperty=fullName> property to get the special constraints.","nodes":[{"content":"Interface constraints and special constraints cannot be retrieved using methods of the <xref:System.Reflection.Emit.GenericTypeParameterBuilder> class. Once you have created the generic type that contains the type parameters, you can use its <xref:System.Type> object to reflect the constraints. Use the <xref:System.Type.GetGenericArguments%2A?displayProperty=fullName> method to get the type parameters, and for each type parameter use the <xref:System.Type.GetGenericParameterConstraints%2A?displayProperty=fullName> method to get the base type constraint and interface constraints, and the <xref:System.Type.GenericParameterAttributes%2A?displayProperty=fullName> property to get the special constraints.","pos":[0,708],"nodes":[{"content":"Interface constraints and special constraints cannot be retrieved using methods of the <ph id=\"ph1\">&lt;xref:System.Reflection.Emit.GenericTypeParameterBuilder&gt;</ph> class.","pos":[0,151],"source":"Interface constraints and special constraints cannot be retrieved using methods of the <xref:System.Reflection.Emit.GenericTypeParameterBuilder> class."},{"content":"Once you have created the generic type that contains the type parameters, you can use its <ph id=\"ph1\">&lt;xref:System.Type&gt;</ph> object to reflect the constraints.","pos":[152,295],"source":" Once you have created the generic type that contains the type parameters, you can use its <xref:System.Type> object to reflect the constraints."},{"content":"Use the <ph id=\"ph1\">&lt;xref:System.Type.GetGenericArguments%2A?displayProperty=fullName&gt;</ph> method to get the type parameters, and for each type parameter use the <ph id=\"ph2\">&lt;xref:System.Type.GetGenericParameterConstraints%2A?displayProperty=fullName&gt;</ph> method to get the base type constraint and interface constraints, and the <ph id=\"ph3\">&lt;xref:System.Type.GenericParameterAttributes%2A?displayProperty=fullName&gt;</ph> property to get the special constraints.","pos":[296,708],"source":" Use the <xref:System.Type.GetGenericArguments%2A?displayProperty=fullName> method to get the type parameters, and for each type parameter use the <xref:System.Type.GetGenericParameterConstraints%2A?displayProperty=fullName> method to get the base type constraint and interface constraints, and the <xref:System.Type.GenericParameterAttributes%2A?displayProperty=fullName> property to get the special constraints."}]}]}],"pos":[7712,9894],"yaml":true,"extradata":"MT"},{"content":"Gets an <xref href=\"System.Reflection.Assembly\"></xref> object representing the dynamic assembly that contains the generic type definition the current type parameter belongs to.","nodes":[{"pos":[0,177],"content":"Gets an <ph id=\"ph1\">&lt;xref href=\"System.Reflection.Assembly\"&gt;&lt;/xref&gt;</ph> object representing the dynamic assembly that contains the generic type definition the current type parameter belongs to.","source":"Gets an <xref href=\"System.Reflection.Assembly\"></xref> object representing the dynamic assembly that contains the generic type definition the current type parameter belongs to."}],"pos":[20955,21133],"yaml":true},{"content":"An <xref href=\"System.Reflection.Assembly\"></xref> object representing the dynamic assembly that contains the generic type definition the current type parameter belongs to.","nodes":[{"pos":[0,172],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Reflection.Assembly\"&gt;&lt;/xref&gt;</ph> object representing the dynamic assembly that contains the generic type definition the current type parameter belongs to.","source":"An <xref href=\"System.Reflection.Assembly\"></xref> object representing the dynamic assembly that contains the generic type definition the current type parameter belongs to."}],"pos":[21287,21460],"yaml":true},{"content":"Gets `null` in all cases.","nodes":[{"pos":[0,25],"content":"Gets <ph id=\"ph1\">`null`</ph> in all cases.","source":"Gets `null` in all cases."}],"pos":[22874,22900],"yaml":true},{"content":"There is no assembly-qualified name for type parameters because their scope is limited to the generic type that declares them.","nodes":[{"pos":[0,126],"content":"There is no assembly-qualified name for type parameters because their scope is limited to the generic type that declares them.","nodes":[{"content":"There is no assembly-qualified name for type parameters because their scope is limited to the generic type that declares them.","pos":[0,126]}]}],"pos":[22911,23038],"yaml":true,"extradata":"MT"},{"content":"A null reference (`Nothing` in Visual Basic) in all cases.","nodes":[{"pos":[0,58],"content":"A null reference (<ph id=\"ph1\">`Nothing`</ph> in Visual Basic) in all cases.","source":"A null reference (`Nothing` in Visual Basic) in all cases."}],"pos":[23172,23231],"yaml":true},{"content":"Gets the base type constraint of the current generic type parameter.","nodes":[{"pos":[0,68],"content":"Gets the base type constraint of the current generic type parameter.","nodes":[{"content":"Gets the base type constraint of the current generic type parameter.","pos":[0,68]}]}],"pos":[25514,25583],"yaml":true},{"content":"To set the base type constraint, use the <xref:System.Reflection.Emit.GenericTypeParameterBuilder.SetBaseTypeConstraint%2A> method.","nodes":[{"pos":[0,131],"content":"To set the base type constraint, use the <xref:System.Reflection.Emit.GenericTypeParameterBuilder.SetBaseTypeConstraint%2A> method.","nodes":[{"content":"To set the base type constraint, use the <ph id=\"ph1\">&lt;xref:System.Reflection.Emit.GenericTypeParameterBuilder.SetBaseTypeConstraint%2A&gt;</ph> method.","pos":[0,131],"source":"To set the base type constraint, use the <xref:System.Reflection.Emit.GenericTypeParameterBuilder.SetBaseTypeConstraint%2A> method."}]}],"pos":[25594,25726],"yaml":true,"extradata":"MT"},{"content":"A <xref href=\"System.Type\"></xref> object that represents the base type constraint of the generic type parameter, or `null` if the type parameter has no base type constraint.","nodes":[{"pos":[0,174],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Type\"&gt;&lt;/xref&gt;</ph> object that represents the base type constraint of the generic type parameter, or <ph id=\"ph2\">`null`</ph> if the type parameter has no base type constraint.","source":"A <xref href=\"System.Type\"></xref> object that represents the base type constraint of the generic type parameter, or `null` if the type parameter has no base type constraint."}],"pos":[25843,26018],"yaml":true},{"content":"Gets `true` in all cases.","nodes":[{"pos":[0,25],"content":"Gets <ph id=\"ph1\">`true`</ph> in all cases.","source":"Gets `true` in all cases."}],"pos":[27456,27482],"yaml":true},{"content":"A <xref:System.Reflection.Emit.GenericTypeParameterBuilder> object always represents a generic type parameter. The value of the <xref:System.Reflection.Emit.GenericTypeParameterBuilder.ContainsGenericParameters%2A> property reflects that fact and does not imply anything about any generic type argument that might be assigned to the type parameter.","nodes":[{"pos":[0,348],"content":"A <xref:System.Reflection.Emit.GenericTypeParameterBuilder> object always represents a generic type parameter. The value of the <xref:System.Reflection.Emit.GenericTypeParameterBuilder.ContainsGenericParameters%2A> property reflects that fact and does not imply anything about any generic type argument that might be assigned to the type parameter.","nodes":[{"content":"A <xref:System.Reflection.Emit.GenericTypeParameterBuilder> object always represents a generic type parameter. The value of the <xref:System.Reflection.Emit.GenericTypeParameterBuilder.ContainsGenericParameters%2A> property reflects that fact and does not imply anything about any generic type argument that might be assigned to the type parameter.","pos":[0,348],"nodes":[{"content":"A <ph id=\"ph1\">&lt;xref:System.Reflection.Emit.GenericTypeParameterBuilder&gt;</ph> object always represents a generic type parameter.","pos":[0,110],"source":"A <xref:System.Reflection.Emit.GenericTypeParameterBuilder> object always represents a generic type parameter."},{"content":"The value of the <ph id=\"ph1\">&lt;xref:System.Reflection.Emit.GenericTypeParameterBuilder.ContainsGenericParameters%2A&gt;</ph> property reflects that fact and does not imply anything about any generic type argument that might be assigned to the type parameter.","pos":[111,348],"source":" The value of the <xref:System.Reflection.Emit.GenericTypeParameterBuilder.ContainsGenericParameters%2A> property reflects that fact and does not imply anything about any generic type argument that might be assigned to the type parameter."}]}]}],"pos":[27493,27842],"yaml":true,"extradata":"MT"},{"content":"`true` in all cases.","nodes":[{"pos":[0,20],"content":"<ph id=\"ph1\">`true`</ph> in all cases.","source":"`true` in all cases."}],"pos":[27979,28002],"yaml":true},{"content":"Gets a <xref href=\"System.Reflection.MethodInfo\"></xref> that represents the declaring method, if the current <xref href=\"System.Reflection.Emit.GenericTypeParameterBuilder\"></xref> represents a type parameter of a generic method.","nodes":[{"pos":[0,230],"content":"Gets a <ph id=\"ph1\">&lt;xref href=\"System.Reflection.MethodInfo\"&gt;&lt;/xref&gt;</ph> that represents the declaring method, if the current <ph id=\"ph2\">&lt;xref href=\"System.Reflection.Emit.GenericTypeParameterBuilder\"&gt;&lt;/xref&gt;</ph> represents a type parameter of a generic method.","source":"Gets a <xref href=\"System.Reflection.MethodInfo\"></xref> that represents the declaring method, if the current <xref href=\"System.Reflection.Emit.GenericTypeParameterBuilder\"></xref> represents a type parameter of a generic method."}],"pos":[29357,29588],"yaml":true},{"content":"If the <xref:System.Reflection.Emit.GenericTypeParameterBuilder.DeclaringMethod%2A> property is not `null`, then the declaring method is a generic method definition and `DeclaringMethod.IsGenericMethodDefinition` is `true`.","nodes":[{"pos":[0,223],"content":"If the <ph id=\"ph1\">&lt;xref:System.Reflection.Emit.GenericTypeParameterBuilder.DeclaringMethod%2A&gt;</ph> property is not <ph id=\"ph2\">`null`</ph>, then the declaring method is a generic method definition and <ph id=\"ph3\">`DeclaringMethod.IsGenericMethodDefinition`</ph> is <ph id=\"ph4\">`true`</ph>.","source":"If the <xref:System.Reflection.Emit.GenericTypeParameterBuilder.DeclaringMethod%2A> property is not `null`, then the declaring method is a generic method definition and `DeclaringMethod.IsGenericMethodDefinition` is `true`."}],"pos":[29599,29823],"yaml":true,"extradata":"MT"},{"content":"A <xref href=\"System.Reflection.MethodInfo\"></xref> that represents the declaring method, if the current <xref href=\"System.Reflection.Emit.GenericTypeParameterBuilder\"></xref> represents a type parameter of a generic method; otherwise, `null`.","nodes":[{"pos":[0,244],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Reflection.MethodInfo\"&gt;&lt;/xref&gt;</ph> that represents the declaring method, if the current <ph id=\"ph2\">&lt;xref href=\"System.Reflection.Emit.GenericTypeParameterBuilder\"&gt;&lt;/xref&gt;</ph> represents a type parameter of a generic method; otherwise, <ph id=\"ph3\">`null`</ph>.","source":"A <xref href=\"System.Reflection.MethodInfo\"></xref> that represents the declaring method, if the current <xref href=\"System.Reflection.Emit.GenericTypeParameterBuilder\"></xref> represents a type parameter of a generic method; otherwise, `null`."}],"pos":[29988,30233],"yaml":true},{"content":"Gets the generic type definition or generic method definition to which the generic type parameter belongs.","nodes":[{"pos":[0,106],"content":"Gets the generic type definition or generic method definition to which the generic type parameter belongs.","nodes":[{"content":"Gets the generic type definition or generic method definition to which the generic type parameter belongs.","pos":[0,106]}]}],"pos":[31566,31673],"yaml":true},{"content":"The declaring type is not necessarily a generic type. If the current type parameter belongs to a generic method, the type in which the method is declared might not be generic.","nodes":[{"pos":[0,175],"content":"The declaring type is not necessarily a generic type. If the current type parameter belongs to a generic method, the type in which the method is declared might not be generic.","nodes":[{"content":"The declaring type is not necessarily a generic type. If the current type parameter belongs to a generic method, the type in which the method is declared might not be generic.","pos":[0,175],"nodes":[{"content":"The declaring type is not necessarily a generic type.","pos":[0,53]},{"content":"If the current type parameter belongs to a generic method, the type in which the method is declared might not be generic.","pos":[54,175]}]}]}],"pos":[31684,31860],"yaml":true,"extradata":"MT"},{"content":"If the type parameter belongs to a generic type, a <xref href=\"System.Type\"></xref> object representing that generic type; if the type parameter belongs to a generic method, a <xref href=\"System.Type\"></xref> object representing that type that declared that generic method.","nodes":[{"pos":[0,273],"content":"If the type parameter belongs to a generic type, a <ph id=\"ph1\">&lt;xref href=\"System.Type\"&gt;&lt;/xref&gt;</ph> object representing that generic type; if the type parameter belongs to a generic method, a <ph id=\"ph2\">&lt;xref href=\"System.Type\"&gt;&lt;/xref&gt;</ph> object representing that type that declared that generic method.","source":"If the type parameter belongs to a generic type, a <xref href=\"System.Type\"></xref> object representing that generic type; if the type parameter belongs to a generic method, a <xref href=\"System.Type\"></xref> object representing that type that declared that generic method."}],"pos":[31982,32256],"yaml":true},{"content":"Tests whether the given object is an instance of `EventToken` and is equal to the current instance.","nodes":[{"pos":[0,99],"content":"Tests whether the given object is an instance of <ph id=\"ph1\">`EventToken`</ph> and is equal to the current instance.","source":"Tests whether the given object is an instance of `EventToken` and is equal to the current instance."}],"pos":[33612,33712],"yaml":true},{"content":"The object to be compared with the current instance.","nodes":[{"pos":[0,52],"content":"The object to be compared with the current instance.","nodes":[{"content":"The object to be compared with the current instance.","pos":[0,52]}]}],"pos":[33848,33901],"yaml":true},{"content":"Returns `true` if <code>o</code> is an instance of `EventToken` and equals the current instance; otherwise, `false`.","nodes":[{"pos":[0,116],"content":"Returns <ph id=\"ph1\">`true`</ph> if <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">o</ph><ept id=\"p1\">&lt;/code&gt;</ept> is an instance of <ph id=\"ph3\">`EventToken`</ph> and equals the current instance; otherwise, <ph id=\"ph4\">`false`</ph>.","source":"Returns `true` if <code>o</code> is an instance of `EventToken` and equals the current instance; otherwise, `false`."}],"pos":[33959,34076],"yaml":true},{"content":"Gets `null` in all cases.","nodes":[{"pos":[0,25],"content":"Gets <ph id=\"ph1\">`null`</ph> in all cases.","source":"Gets `null` in all cases."}],"pos":[35370,35396],"yaml":true},{"content":"A generic type parameter does not have a full name, because its scope is limited to the generic type that declares it.","nodes":[{"pos":[0,118],"content":"A generic type parameter does not have a full name, because its scope is limited to the generic type that declares it.","nodes":[{"content":"A generic type parameter does not have a full name, because its scope is limited to the generic type that declares it.","pos":[0,118]}]}],"pos":[35407,35526],"yaml":true,"extradata":"MT"},{"content":"A null reference (`Nothing` in Visual Basic) in all cases.","nodes":[{"pos":[0,58],"content":"A null reference (<ph id=\"ph1\">`Nothing`</ph> in Visual Basic) in all cases.","source":"A null reference (`Nothing` in Visual Basic) in all cases."}],"pos":[35647,35706],"yaml":true},{"content":"Gets a combination of <xref href=\"System.Reflection.GenericParameterAttributes\"></xref> flags that describe the covariance and special constraints of the current generic type parameter.","nodes":[{"pos":[0,185],"content":"Gets a combination of <ph id=\"ph1\">&lt;xref href=\"System.Reflection.GenericParameterAttributes\"&gt;&lt;/xref&gt;</ph> flags that describe the covariance and special constraints of the current generic type parameter.","source":"Gets a combination of <xref href=\"System.Reflection.GenericParameterAttributes\"></xref> flags that describe the covariance and special constraints of the current generic type parameter."}],"pos":[37150,37336],"yaml":true},{"content":"A bitwise combination of values that describes the covariance and special constraints of the current generic type parameter.","nodes":[{"pos":[0,124],"content":"A bitwise combination of values that describes the covariance and special constraints of the current generic type parameter.","nodes":[{"content":"A bitwise combination of values that describes the covariance and special constraints of the current generic type parameter.","pos":[0,124]}]}],"pos":[37544,37669],"yaml":true},{"content":"Gets the position of the type parameter in the type parameter list of the generic type or method that declared the parameter.","nodes":[{"pos":[0,125],"content":"Gets the position of the type parameter in the type parameter list of the generic type or method that declared the parameter.","nodes":[{"content":"Gets the position of the type parameter in the type parameter list of the generic type or method that declared the parameter.","pos":[0,125]}]}],"pos":[39079,39205],"yaml":true},{"content":"The position of the type parameter in the type parameter list of the generic type or method that declared the parameter.","nodes":[{"pos":[0,120],"content":"The position of the type parameter in the type parameter list of the generic type or method that declared the parameter.","nodes":[{"content":"The position of the type parameter in the type parameter list of the generic type or method that declared the parameter.","pos":[0,120]}]}],"pos":[39338,39459],"yaml":true},{"content":"Not supported for incomplete generic type parameters.","nodes":[{"pos":[0,53],"content":"Not supported for incomplete generic type parameters.","nodes":[{"content":"Not supported for incomplete generic type parameters.","pos":[0,53]}]}],"pos":[46899,46953],"yaml":true},{"content":"This method is not supported for incomplete generic type parameters. Retrieve the type parameter from the completed generic type definition and then use reflection on the retrieved type.","nodes":[{"pos":[0,186],"content":"This method is not supported for incomplete generic type parameters. Retrieve the type parameter from the completed generic type definition and then use reflection on the retrieved type.","nodes":[{"content":"This method is not supported for incomplete generic type parameters. Retrieve the type parameter from the completed generic type definition and then use reflection on the retrieved type.","pos":[0,186],"nodes":[{"content":"This method is not supported for incomplete generic type parameters.","pos":[0,68]},{"content":"Retrieve the type parameter from the completed generic type definition and then use reflection on the retrieved type.","pos":[69,186]}]}]}],"pos":[46964,47151],"yaml":true,"extradata":"MT"},{"content":"Not supported.","nodes":[{"pos":[0,14],"content":"Not supported.","nodes":[{"content":"Not supported.","pos":[0,14]}]}],"pos":[47454,47469],"yaml":true},{"content":"Not supported for incomplete generic type parameters.","nodes":[{"pos":[0,53],"content":"Not supported for incomplete generic type parameters.","nodes":[{"content":"Not supported for incomplete generic type parameters.","pos":[0,53]}]}],"pos":[47548,47602],"yaml":true},{"content":"In all cases.","nodes":[{"pos":[0,13],"content":"In all cases.","nodes":[{"content":"In all cases.","pos":[0,13]}]}],"pos":[47798,47812],"yaml":true},{"content":"Not supported for incomplete generic type parameters.","nodes":[{"pos":[0,53],"content":"Not supported for incomplete generic type parameters.","nodes":[{"content":"Not supported for incomplete generic type parameters.","pos":[0,53]}]}],"pos":[49168,49222],"yaml":true},{"content":"This method is not supported for incomplete generic type parameters. Retrieve the type parameter from the completed generic type definition and then use reflection on the retrieved type.","nodes":[{"pos":[0,186],"content":"This method is not supported for incomplete generic type parameters. Retrieve the type parameter from the completed generic type definition and then use reflection on the retrieved type.","nodes":[{"content":"This method is not supported for incomplete generic type parameters. Retrieve the type parameter from the completed generic type definition and then use reflection on the retrieved type.","pos":[0,186],"nodes":[{"content":"This method is not supported for incomplete generic type parameters.","pos":[0,68]},{"content":"Retrieve the type parameter from the completed generic type definition and then use reflection on the retrieved type.","pos":[69,186]}]}]}],"pos":[49233,49420],"yaml":true,"extradata":"MT"},{"content":"Specifies whether to search this member's inheritance chain to find the attributes.","nodes":[{"pos":[0,83],"content":"Specifies whether to search this member's inheritance chain to find the attributes.","nodes":[{"content":"Specifies whether to search this member's inheritance chain to find the attributes.","pos":[0,83]}]}],"pos":[49584,49668],"yaml":true},{"content":"Not supported for incomplete generic type parameters.","nodes":[{"pos":[0,53],"content":"Not supported for incomplete generic type parameters.","nodes":[{"content":"Not supported for incomplete generic type parameters.","pos":[0,53]}]}],"pos":[49727,49781],"yaml":true},{"content":"In all cases.","nodes":[{"pos":[0,13],"content":"In all cases.","nodes":[{"content":"In all cases.","pos":[0,13]}]}],"pos":[49981,49995],"yaml":true},{"content":"Not supported for incomplete generic type parameters.","nodes":[{"pos":[0,53],"content":"Not supported for incomplete generic type parameters.","nodes":[{"content":"Not supported for incomplete generic type parameters.","pos":[0,53]}]}],"pos":[51330,51384],"yaml":true},{"content":"This method is not supported for incomplete generic type parameters. Retrieve the type parameter from the completed generic type definition and then use reflection on the retrieved type.","nodes":[{"pos":[0,186],"content":"This method is not supported for incomplete generic type parameters. Retrieve the type parameter from the completed generic type definition and then use reflection on the retrieved type.","nodes":[{"content":"This method is not supported for incomplete generic type parameters. Retrieve the type parameter from the completed generic type definition and then use reflection on the retrieved type.","pos":[0,186],"nodes":[{"content":"This method is not supported for incomplete generic type parameters.","pos":[0,68]},{"content":"Retrieve the type parameter from the completed generic type definition and then use reflection on the retrieved type.","pos":[69,186]}]}]}],"pos":[51395,51582],"yaml":true,"extradata":"MT"},{"content":"The type of attribute to search for. Only attributes that are assignable to this type are returned.","nodes":[{"pos":[0,99],"content":"The type of attribute to search for. Only attributes that are assignable to this type are returned.","nodes":[{"content":"The type of attribute to search for. Only attributes that are assignable to this type are returned.","pos":[0,99],"nodes":[{"content":"The type of attribute to search for.","pos":[0,36]},{"content":"Only attributes that are assignable to this type are returned.","pos":[37,99]}]}]}],"pos":[51769,51869],"yaml":true},{"content":"Specifies whether to search this member's inheritance chain to find the attributes.","nodes":[{"pos":[0,83],"content":"Specifies whether to search this member's inheritance chain to find the attributes.","nodes":[{"content":"Specifies whether to search this member's inheritance chain to find the attributes.","pos":[0,83]}]}],"pos":[51933,52017],"yaml":true},{"content":"Not supported for incomplete generic type parameters.","nodes":[{"pos":[0,53],"content":"Not supported for incomplete generic type parameters.","nodes":[{"content":"Not supported for incomplete generic type parameters.","pos":[0,53]}]}],"pos":[52076,52130],"yaml":true},{"content":"In all cases.","nodes":[{"pos":[0,13],"content":"In all cases.","nodes":[{"content":"In all cases.","pos":[0,13]}]}],"pos":[52330,52344],"yaml":true},{"content":"Throws a <xref href=\"System.NotSupportedException\"></xref> in all cases.","nodes":[{"pos":[0,72],"content":"Throws a <ph id=\"ph1\">&lt;xref href=\"System.NotSupportedException\"&gt;&lt;/xref&gt;</ph> in all cases.","source":"Throws a <xref href=\"System.NotSupportedException\"></xref> in all cases."}],"pos":[53526,53599],"yaml":true},{"content":"A generic type parameter is a placeholder for a type. Because that type cannot be known in advance, there is no way to know whether it has an element type or what that element type might be. Any return value would be misleading, so the method throws a <xref:System.NotSupportedException>.","nodes":[{"pos":[0,288],"content":"A generic type parameter is a placeholder for a type. Because that type cannot be known in advance, there is no way to know whether it has an element type or what that element type might be. Any return value would be misleading, so the method throws a <xref:System.NotSupportedException>.","nodes":[{"content":"A generic type parameter is a placeholder for a type. Because that type cannot be known in advance, there is no way to know whether it has an element type or what that element type might be. Any return value would be misleading, so the method throws a <xref:System.NotSupportedException>.","pos":[0,288],"nodes":[{"content":"A generic type parameter is a placeholder for a type.","pos":[0,53]},{"content":"Because that type cannot be known in advance, there is no way to know whether it has an element type or what that element type might be.","pos":[54,190]},{"content":"Any return value would be misleading, so the method throws a <ph id=\"ph1\">&lt;xref:System.NotSupportedException&gt;</ph>.","pos":[191,288],"source":" Any return value would be misleading, so the method throws a <xref:System.NotSupportedException>."}]}]}],"pos":[53610,53899],"yaml":true,"extradata":"MT"},{"content":"The type referred to by the current array type, pointer type, or `ByRef` type; or `null` if the current type is not an array type, is not a pointer type, and is not passed by reference.","nodes":[{"pos":[0,185],"content":"The type referred to by the current array type, pointer type, or <ph id=\"ph1\">`ByRef`</ph> type; or <ph id=\"ph2\">`null`</ph> if the current type is not an array type, is not a pointer type, and is not passed by reference.","source":"The type referred to by the current array type, pointer type, or `ByRef` type; or `null` if the current type is not an array type, is not a pointer type, and is not passed by reference."}],"pos":[54036,54222],"yaml":true},{"content":"In all cases.","nodes":[{"pos":[0,13],"content":"In all cases.","nodes":[{"content":"In all cases.","pos":[0,13]}]}],"pos":[54417,54431],"yaml":true},{"content":"Not supported for incomplete generic type parameters.","nodes":[{"pos":[0,53],"content":"Not supported for incomplete generic type parameters.","nodes":[{"content":"Not supported for incomplete generic type parameters.","pos":[0,53]}]}],"pos":[55879,55933],"yaml":true},{"content":"This method is not supported for incomplete generic type parameters. Retrieve the type parameter from the completed generic type definition and then use reflection on the retrieved type.","nodes":[{"pos":[0,186],"content":"This method is not supported for incomplete generic type parameters. Retrieve the type parameter from the completed generic type definition and then use reflection on the retrieved type.","nodes":[{"content":"This method is not supported for incomplete generic type parameters. Retrieve the type parameter from the completed generic type definition and then use reflection on the retrieved type.","pos":[0,186],"nodes":[{"content":"This method is not supported for incomplete generic type parameters.","pos":[0,68]},{"content":"Retrieve the type parameter from the completed generic type definition and then use reflection on the retrieved type.","pos":[69,186]}]}]}],"pos":[55944,56131],"yaml":true,"extradata":"MT"},{"content":"Not supported.","nodes":[{"pos":[0,14],"content":"Not supported.","nodes":[{"content":"Not supported.","pos":[0,14]}]}],"pos":[56342,56357],"yaml":true},{"content":"Not supported.","nodes":[{"pos":[0,14],"content":"Not supported.","nodes":[{"content":"Not supported.","pos":[0,14]}]}],"pos":[56441,56456],"yaml":true},{"content":"Not supported for incomplete generic type parameters.","nodes":[{"pos":[0,53],"content":"Not supported for incomplete generic type parameters.","nodes":[{"content":"Not supported for incomplete generic type parameters.","pos":[0,53]}]}],"pos":[56527,56581],"yaml":true},{"content":"In all cases.","nodes":[{"pos":[0,13],"content":"In all cases.","nodes":[{"content":"In all cases.","pos":[0,13]}]}],"pos":[56770,56784],"yaml":true},{"content":"Not supported for incomplete generic type parameters.","nodes":[{"pos":[0,53],"content":"Not supported for incomplete generic type parameters.","nodes":[{"content":"Not supported for incomplete generic type parameters.","pos":[0,53]}]}],"pos":[57936,57990],"yaml":true},{"content":"This method is not supported for incomplete generic type parameters. Retrieve the type parameter from the completed generic type definition and then use reflection on the retrieved type.","nodes":[{"pos":[0,186],"content":"This method is not supported for incomplete generic type parameters. Retrieve the type parameter from the completed generic type definition and then use reflection on the retrieved type.","nodes":[{"content":"This method is not supported for incomplete generic type parameters. Retrieve the type parameter from the completed generic type definition and then use reflection on the retrieved type.","pos":[0,186],"nodes":[{"content":"This method is not supported for incomplete generic type parameters.","pos":[0,68]},{"content":"Retrieve the type parameter from the completed generic type definition and then use reflection on the retrieved type.","pos":[69,186]}]}]}],"pos":[58001,58188],"yaml":true,"extradata":"MT"},{"content":"Not supported for incomplete generic type parameters.","nodes":[{"pos":[0,53],"content":"Not supported for incomplete generic type parameters.","nodes":[{"content":"Not supported for incomplete generic type parameters.","pos":[0,53]}]}],"pos":[58363,58417],"yaml":true},{"content":"In all cases.","nodes":[{"pos":[0,13],"content":"In all cases.","nodes":[{"content":"In all cases.","pos":[0,13]}]}],"pos":[58607,58621],"yaml":true},{"content":"Not supported for incomplete generic type parameters.","nodes":[{"pos":[0,53],"content":"Not supported for incomplete generic type parameters.","nodes":[{"content":"Not supported for incomplete generic type parameters.","pos":[0,53]}]}],"pos":[59905,59959],"yaml":true},{"content":"This method is not supported for incomplete generic type parameters. Retrieve the type parameter from the completed generic type definition and then use reflection on the retrieved type.","nodes":[{"pos":[0,186],"content":"This method is not supported for incomplete generic type parameters. Retrieve the type parameter from the completed generic type definition and then use reflection on the retrieved type.","nodes":[{"content":"This method is not supported for incomplete generic type parameters. Retrieve the type parameter from the completed generic type definition and then use reflection on the retrieved type.","pos":[0,186],"nodes":[{"content":"This method is not supported for incomplete generic type parameters.","pos":[0,68]},{"content":"Retrieve the type parameter from the completed generic type definition and then use reflection on the retrieved type.","pos":[69,186]}]}]}],"pos":[59970,60157],"yaml":true,"extradata":"MT"},{"content":"Not supported.","nodes":[{"pos":[0,14],"content":"Not supported.","nodes":[{"content":"Not supported.","pos":[0,14]}]}],"pos":[60382,60397],"yaml":true},{"content":"Not supported for incomplete generic type parameters.","nodes":[{"pos":[0,53],"content":"Not supported for incomplete generic type parameters.","nodes":[{"content":"Not supported for incomplete generic type parameters.","pos":[0,53]}]}],"pos":[60470,60524],"yaml":true},{"content":"In all cases.","nodes":[{"pos":[0,13],"content":"In all cases.","nodes":[{"content":"In all cases.","pos":[0,13]}]}],"pos":[60714,60728],"yaml":true},{"content":"Not supported for incomplete generic type parameters.","nodes":[{"pos":[0,53],"content":"Not supported for incomplete generic type parameters.","nodes":[{"content":"Not supported for incomplete generic type parameters.","pos":[0,53]}]}],"pos":[62072,62126],"yaml":true},{"content":"This method is not supported for incomplete generic type parameters. Retrieve the type parameter from the completed generic type definition and then use reflection on the retrieved type.","nodes":[{"pos":[0,186],"content":"This method is not supported for incomplete generic type parameters. Retrieve the type parameter from the completed generic type definition and then use reflection on the retrieved type.","nodes":[{"content":"This method is not supported for incomplete generic type parameters. Retrieve the type parameter from the completed generic type definition and then use reflection on the retrieved type.","pos":[0,186],"nodes":[{"content":"This method is not supported for incomplete generic type parameters.","pos":[0,68]},{"content":"Retrieve the type parameter from the completed generic type definition and then use reflection on the retrieved type.","pos":[69,186]}]}]}],"pos":[62137,62324],"yaml":true,"extradata":"MT"},{"content":"Not supported.","nodes":[{"pos":[0,14],"content":"Not supported.","nodes":[{"content":"Not supported.","pos":[0,14]}]}],"pos":[62535,62550],"yaml":true},{"content":"Not supported.","nodes":[{"pos":[0,14],"content":"Not supported.","nodes":[{"content":"Not supported.","pos":[0,14]}]}],"pos":[62634,62649],"yaml":true},{"content":"Not supported for incomplete generic type parameters.","nodes":[{"pos":[0,53],"content":"Not supported for incomplete generic type parameters.","nodes":[{"content":"Not supported for incomplete generic type parameters.","pos":[0,53]}]}],"pos":[62720,62774],"yaml":true},{"content":"In all cases.","nodes":[{"pos":[0,13],"content":"In all cases.","nodes":[{"content":"In all cases.","pos":[0,13]}]}],"pos":[62963,62977],"yaml":true},{"content":"Not supported for incomplete generic type parameters.","nodes":[{"pos":[0,53],"content":"Not supported for incomplete generic type parameters.","nodes":[{"content":"Not supported for incomplete generic type parameters.","pos":[0,53]}]}],"pos":[64261,64315],"yaml":true},{"content":"This method is not supported for incomplete generic type parameters. Retrieve the type parameter from the completed generic type definition and then use reflection on the retrieved type.","nodes":[{"pos":[0,186],"content":"This method is not supported for incomplete generic type parameters. Retrieve the type parameter from the completed generic type definition and then use reflection on the retrieved type.","nodes":[{"content":"This method is not supported for incomplete generic type parameters. Retrieve the type parameter from the completed generic type definition and then use reflection on the retrieved type.","pos":[0,186],"nodes":[{"content":"This method is not supported for incomplete generic type parameters.","pos":[0,68]},{"content":"Retrieve the type parameter from the completed generic type definition and then use reflection on the retrieved type.","pos":[69,186]}]}]}],"pos":[64326,64513],"yaml":true,"extradata":"MT"},{"content":"Not supported.","nodes":[{"pos":[0,14],"content":"Not supported.","nodes":[{"content":"Not supported.","pos":[0,14]}]}],"pos":[64738,64753],"yaml":true},{"content":"Not supported for incomplete generic type parameters.","nodes":[{"pos":[0,53],"content":"Not supported for incomplete generic type parameters.","nodes":[{"content":"Not supported for incomplete generic type parameters.","pos":[0,53]}]}],"pos":[64826,64880],"yaml":true},{"content":"In all cases.","nodes":[{"pos":[0,13],"content":"In all cases.","nodes":[{"content":"In all cases.","pos":[0,13]}]}],"pos":[65070,65084],"yaml":true},{"content":"Not valid for generic type parameters.","nodes":[{"pos":[0,38],"content":"Not valid for generic type parameters.","nodes":[{"content":"Not valid for generic type parameters.","pos":[0,38]}]}],"pos":[66296,66335],"yaml":true},{"content":"In a constructed type, the type that is assigned to a generic type parameter can be a generic type, but the type parameter itself is not generic.","nodes":[{"pos":[0,145],"content":"In a constructed type, the type that is assigned to a generic type parameter can be a generic type, but the type parameter itself is not generic.","nodes":[{"content":"In a constructed type, the type that is assigned to a generic type parameter can be a generic type, but the type parameter itself is not generic.","pos":[0,145]}]}],"pos":[66346,66492],"yaml":true,"extradata":"MT"},{"content":"Not valid for generic type parameters.","nodes":[{"pos":[0,38],"content":"Not valid for generic type parameters.","nodes":[{"content":"Not valid for generic type parameters.","pos":[0,38]}]}],"pos":[66638,66677],"yaml":true},{"content":"In all cases.","nodes":[{"pos":[0,13],"content":"In all cases.","nodes":[{"content":"In all cases.","pos":[0,13]}]}],"pos":[66885,66899],"yaml":true},{"content":"Not valid for generic type parameters.","nodes":[{"pos":[0,38],"content":"Not valid for generic type parameters.","nodes":[{"content":"Not valid for generic type parameters.","pos":[0,38]}]}],"pos":[69305,69344],"yaml":true},{"content":"In a constructed type, the type that is assigned to a generic type parameter can be a generic type, but the type parameter itself is not generic.","nodes":[{"pos":[0,145],"content":"In a constructed type, the type that is assigned to a generic type parameter can be a generic type, but the type parameter itself is not generic.","nodes":[{"content":"In a constructed type, the type that is assigned to a generic type parameter can be a generic type, but the type parameter itself is not generic.","pos":[0,145]}]}],"pos":[69355,69501],"yaml":true,"extradata":"MT"},{"content":"Not valid for generic type parameters.","nodes":[{"pos":[0,38],"content":"Not valid for generic type parameters.","nodes":[{"content":"Not valid for generic type parameters.","pos":[0,38]}]}],"pos":[69648,69687],"yaml":true},{"content":"In all cases.","nodes":[{"pos":[0,13],"content":"In all cases.","nodes":[{"content":"In all cases.","pos":[0,13]}]}],"pos":[69900,69914],"yaml":true},{"content":"Returns a 32-bit integer hash code for the current instance.","nodes":[{"pos":[0,60],"content":"Returns a 32-bit integer hash code for the current instance.","nodes":[{"content":"Returns a 32-bit integer hash code for the current instance.","pos":[0,60]}]}],"pos":[71142,71203],"yaml":true},{"content":"A 32-bit integer hash code.","nodes":[{"pos":[0,27],"content":"A 32-bit integer hash code.","nodes":[{"content":"A 32-bit integer hash code.","pos":[0,27]}]}],"pos":[71337,71365],"yaml":true},{"content":"Not supported for incomplete generic type parameters.","nodes":[{"pos":[0,53],"content":"Not supported for incomplete generic type parameters.","nodes":[{"content":"Not supported for incomplete generic type parameters.","pos":[0,53]}]}],"pos":[72827,72881],"yaml":true},{"content":"This method is not supported for incomplete generic type parameters. Retrieve the type parameter from the completed generic type definition and then use reflection on the retrieved type.","nodes":[{"pos":[0,186],"content":"This method is not supported for incomplete generic type parameters. Retrieve the type parameter from the completed generic type definition and then use reflection on the retrieved type.","nodes":[{"content":"This method is not supported for incomplete generic type parameters. Retrieve the type parameter from the completed generic type definition and then use reflection on the retrieved type.","pos":[0,186],"nodes":[{"content":"This method is not supported for incomplete generic type parameters.","pos":[0,68]},{"content":"Retrieve the type parameter from the completed generic type definition and then use reflection on the retrieved type.","pos":[69,186]}]}]}],"pos":[72892,73079],"yaml":true,"extradata":"MT"},{"content":"The name of the interface.","nodes":[{"pos":[0,26],"content":"The name of the interface.","nodes":[{"content":"The name of the interface.","pos":[0,26]}]}],"pos":[73244,73271],"yaml":true},{"content":"`true` to search without regard for case; `false` to make a case-sensitive search.","nodes":[{"pos":[0,82],"content":"<ph id=\"ph1\">`true`</ph> to search without regard for case; <ph id=\"ph2\">`false`</ph> to make a case-sensitive search.","source":"`true` to search without regard for case; `false` to make a case-sensitive search."}],"pos":[73338,73423],"yaml":true},{"content":"Not supported for incomplete generic type parameters.","nodes":[{"pos":[0,53],"content":"Not supported for incomplete generic type parameters.","nodes":[{"content":"Not supported for incomplete generic type parameters.","pos":[0,53]}]}],"pos":[73478,73532],"yaml":true},{"content":"In all cases.","nodes":[{"pos":[0,13],"content":"In all cases.","nodes":[{"content":"In all cases.","pos":[0,13]}]}],"pos":[73725,73739],"yaml":true},{"content":"Not supported for incomplete generic type parameters.","nodes":[{"pos":[0,53],"content":"Not supported for incomplete generic type parameters.","nodes":[{"content":"Not supported for incomplete generic type parameters.","pos":[0,53]}]}],"pos":[74978,75032],"yaml":true},{"content":"This method is not supported for incomplete generic type parameters. Retrieve the type parameter from the completed generic type definition and then use reflection on the retrieved type.","nodes":[{"pos":[0,186],"content":"This method is not supported for incomplete generic type parameters. Retrieve the type parameter from the completed generic type definition and then use reflection on the retrieved type.","nodes":[{"content":"This method is not supported for incomplete generic type parameters. Retrieve the type parameter from the completed generic type definition and then use reflection on the retrieved type.","pos":[0,186],"nodes":[{"content":"This method is not supported for incomplete generic type parameters.","pos":[0,68]},{"content":"Retrieve the type parameter from the completed generic type definition and then use reflection on the retrieved type.","pos":[69,186]}]}]}],"pos":[75043,75230],"yaml":true,"extradata":"MT"},{"content":"A <xref href=\"System.Type\"></xref> object that represents the interface type for which the mapping is to be retrieved.","nodes":[{"pos":[0,118],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Type\"&gt;&lt;/xref&gt;</ph> object that represents the interface type for which the mapping is to be retrieved.","source":"A <xref href=\"System.Type\"></xref> object that represents the interface type for which the mapping is to be retrieved."}],"pos":[75491,75610],"yaml":true},{"content":"Not supported for incomplete generic type parameters.","nodes":[{"pos":[0,53],"content":"Not supported for incomplete generic type parameters.","nodes":[{"content":"Not supported for incomplete generic type parameters.","pos":[0,53]}]}],"pos":[75688,75742],"yaml":true},{"content":"In all cases.","nodes":[{"pos":[0,13],"content":"In all cases.","nodes":[{"content":"In all cases.","pos":[0,13]}]}],"pos":[75938,75952],"yaml":true},{"content":"Not supported for incomplete generic type parameters.","nodes":[{"pos":[0,53],"content":"Not supported for incomplete generic type parameters.","nodes":[{"content":"Not supported for incomplete generic type parameters.","pos":[0,53]}]}],"pos":[77203,77257],"yaml":true},{"content":"This method is not supported for incomplete generic type parameters. Retrieve the type parameter from the completed generic type definition and then use reflection on the retrieved type.","nodes":[{"pos":[0,186],"content":"This method is not supported for incomplete generic type parameters. Retrieve the type parameter from the completed generic type definition and then use reflection on the retrieved type.","nodes":[{"content":"This method is not supported for incomplete generic type parameters. Retrieve the type parameter from the completed generic type definition and then use reflection on the retrieved type.","pos":[0,186],"nodes":[{"content":"This method is not supported for incomplete generic type parameters.","pos":[0,68]},{"content":"Retrieve the type parameter from the completed generic type definition and then use reflection on the retrieved type.","pos":[69,186]}]}]}],"pos":[77268,77455],"yaml":true,"extradata":"MT"},{"content":"Not supported for incomplete generic type parameters.","nodes":[{"pos":[0,53],"content":"Not supported for incomplete generic type parameters.","nodes":[{"content":"Not supported for incomplete generic type parameters.","pos":[0,53]}]}],"pos":[77595,77649],"yaml":true},{"content":"In all cases.","nodes":[{"pos":[0,13],"content":"In all cases.","nodes":[{"content":"In all cases.","pos":[0,13]}]}],"pos":[77843,77857],"yaml":true},{"content":"Not supported for incomplete generic type parameters.","nodes":[{"pos":[0,53],"content":"Not supported for incomplete generic type parameters.","nodes":[{"content":"Not supported for incomplete generic type parameters.","pos":[0,53]}]}],"pos":[79336,79390],"yaml":true},{"content":"This method is not supported for incomplete generic type parameters. Retrieve the type parameter from the completed generic type definition and then use reflection on the retrieved type.","nodes":[{"pos":[0,186],"content":"This method is not supported for incomplete generic type parameters. Retrieve the type parameter from the completed generic type definition and then use reflection on the retrieved type.","nodes":[{"content":"This method is not supported for incomplete generic type parameters. Retrieve the type parameter from the completed generic type definition and then use reflection on the retrieved type.","pos":[0,186],"nodes":[{"content":"This method is not supported for incomplete generic type parameters.","pos":[0,68]},{"content":"Retrieve the type parameter from the completed generic type definition and then use reflection on the retrieved type.","pos":[69,186]}]}]}],"pos":[79401,79588],"yaml":true,"extradata":"MT"},{"content":"Not supported.","nodes":[{"pos":[0,14],"content":"Not supported.","nodes":[{"content":"Not supported.","pos":[0,14]}]}],"pos":[79839,79854],"yaml":true},{"content":"Not supported.","nodes":[{"pos":[0,14],"content":"Not supported.","nodes":[{"content":"Not supported.","pos":[0,14]}]}],"pos":[79930,79945],"yaml":true},{"content":"Not supported.","nodes":[{"pos":[0,14],"content":"Not supported.","nodes":[{"content":"Not supported.","pos":[0,14]}]}],"pos":[80029,80044],"yaml":true},{"content":"Not supported for incomplete generic type parameters.","nodes":[{"pos":[0,53],"content":"Not supported for incomplete generic type parameters.","nodes":[{"content":"Not supported for incomplete generic type parameters.","pos":[0,53]}]}],"pos":[80118,80172],"yaml":true},{"content":"In all cases.","nodes":[{"pos":[0,13],"content":"In all cases.","nodes":[{"content":"In all cases.","pos":[0,13]}]}],"pos":[80362,80376],"yaml":true},{"content":"Not supported for incomplete generic type parameters.","nodes":[{"pos":[0,53],"content":"Not supported for incomplete generic type parameters.","nodes":[{"content":"Not supported for incomplete generic type parameters.","pos":[0,53]}]}],"pos":[81666,81720],"yaml":true},{"content":"This method is not supported for incomplete generic type parameters. Retrieve the type parameter from the completed generic type definition and then use reflection on the retrieved type.","nodes":[{"pos":[0,186],"content":"This method is not supported for incomplete generic type parameters. Retrieve the type parameter from the completed generic type definition and then use reflection on the retrieved type.","nodes":[{"content":"This method is not supported for incomplete generic type parameters. Retrieve the type parameter from the completed generic type definition and then use reflection on the retrieved type.","pos":[0,186],"nodes":[{"content":"This method is not supported for incomplete generic type parameters.","pos":[0,68]},{"content":"Retrieve the type parameter from the completed generic type definition and then use reflection on the retrieved type.","pos":[69,186]}]}]}],"pos":[81731,81918],"yaml":true,"extradata":"MT"},{"content":"Not supported.","nodes":[{"pos":[0,14],"content":"Not supported.","nodes":[{"content":"Not supported.","pos":[0,14]}]}],"pos":[82145,82160],"yaml":true},{"content":"Not supported for incomplete generic type parameters.","nodes":[{"pos":[0,53],"content":"Not supported for incomplete generic type parameters.","nodes":[{"content":"Not supported for incomplete generic type parameters.","pos":[0,53]}]}],"pos":[82234,82288],"yaml":true},{"content":"In all cases.","nodes":[{"pos":[0,13],"content":"In all cases.","nodes":[{"content":"In all cases.","pos":[0,13]}]}],"pos":[82479,82493],"yaml":true},{"content":"Not supported for incomplete generic type parameters.","nodes":[{"pos":[0,53],"content":"Not supported for incomplete generic type parameters.","nodes":[{"content":"Not supported for incomplete generic type parameters.","pos":[0,53]}]}],"pos":[86519,86573],"yaml":true},{"content":"This method is not supported for incomplete generic type parameters. Retrieve the type parameter from the completed generic type definition and then use reflection on the retrieved type.","nodes":[{"pos":[0,186],"content":"This method is not supported for incomplete generic type parameters. Retrieve the type parameter from the completed generic type definition and then use reflection on the retrieved type.","nodes":[{"content":"This method is not supported for incomplete generic type parameters. Retrieve the type parameter from the completed generic type definition and then use reflection on the retrieved type.","pos":[0,186],"nodes":[{"content":"This method is not supported for incomplete generic type parameters.","pos":[0,68]},{"content":"Retrieve the type parameter from the completed generic type definition and then use reflection on the retrieved type.","pos":[69,186]}]}]}],"pos":[86584,86771],"yaml":true,"extradata":"MT"},{"content":"Not supported.","nodes":[{"pos":[0,14],"content":"Not supported.","nodes":[{"content":"Not supported.","pos":[0,14]}]}],"pos":[86998,87013],"yaml":true},{"content":"Not supported for incomplete generic type parameters.","nodes":[{"pos":[0,53],"content":"Not supported for incomplete generic type parameters.","nodes":[{"content":"Not supported for incomplete generic type parameters.","pos":[0,53]}]}],"pos":[87087,87141],"yaml":true},{"content":"In all cases.","nodes":[{"pos":[0,13],"content":"In all cases.","nodes":[{"content":"In all cases.","pos":[0,13]}]}],"pos":[87332,87346],"yaml":true},{"content":"Not supported for incomplete generic type parameters.","nodes":[{"pos":[0,53],"content":"Not supported for incomplete generic type parameters.","nodes":[{"content":"Not supported for incomplete generic type parameters.","pos":[0,53]}]}],"pos":[88720,88774],"yaml":true},{"content":"This method is not supported for incomplete generic type parameters. Retrieve the type parameter from the completed generic type definition and then use reflection on the retrieved type.","nodes":[{"pos":[0,186],"content":"This method is not supported for incomplete generic type parameters. Retrieve the type parameter from the completed generic type definition and then use reflection on the retrieved type.","nodes":[{"content":"This method is not supported for incomplete generic type parameters. Retrieve the type parameter from the completed generic type definition and then use reflection on the retrieved type.","pos":[0,186],"nodes":[{"content":"This method is not supported for incomplete generic type parameters.","pos":[0,68]},{"content":"Retrieve the type parameter from the completed generic type definition and then use reflection on the retrieved type.","pos":[69,186]}]}]}],"pos":[88785,88972],"yaml":true,"extradata":"MT"},{"content":"Not supported.","nodes":[{"pos":[0,14],"content":"Not supported.","nodes":[{"content":"Not supported.","pos":[0,14]}]}],"pos":[89165,89180],"yaml":true},{"content":"Not supported.","nodes":[{"pos":[0,14],"content":"Not supported.","nodes":[{"content":"Not supported.","pos":[0,14]}]}],"pos":[89264,89279],"yaml":true},{"content":"Not supported for incomplete generic type parameters.","nodes":[{"pos":[0,53],"content":"Not supported for incomplete generic type parameters.","nodes":[{"content":"Not supported for incomplete generic type parameters.","pos":[0,53]}]}],"pos":[89334,89388],"yaml":true},{"content":"In all cases.","nodes":[{"pos":[0,13],"content":"In all cases.","nodes":[{"content":"In all cases.","pos":[0,13]}]}],"pos":[89582,89596],"yaml":true},{"content":"Not supported for incomplete generic type parameters.","nodes":[{"pos":[0,53],"content":"Not supported for incomplete generic type parameters.","nodes":[{"content":"Not supported for incomplete generic type parameters.","pos":[0,53]}]}],"pos":[90910,90964],"yaml":true},{"content":"This method is not supported for incomplete generic type parameters. Retrieve the type parameter from the completed generic type definition and then use reflection on the retrieved type.","nodes":[{"pos":[0,186],"content":"This method is not supported for incomplete generic type parameters. Retrieve the type parameter from the completed generic type definition and then use reflection on the retrieved type.","nodes":[{"content":"This method is not supported for incomplete generic type parameters. Retrieve the type parameter from the completed generic type definition and then use reflection on the retrieved type.","pos":[0,186],"nodes":[{"content":"This method is not supported for incomplete generic type parameters.","pos":[0,68]},{"content":"Retrieve the type parameter from the completed generic type definition and then use reflection on the retrieved type.","pos":[69,186]}]}]}],"pos":[90975,91162],"yaml":true,"extradata":"MT"},{"content":"Not supported.","nodes":[{"pos":[0,14],"content":"Not supported.","nodes":[{"content":"Not supported.","pos":[0,14]}]}],"pos":[91369,91384],"yaml":true},{"content":"Not supported for incomplete generic type parameters.","nodes":[{"pos":[0,53],"content":"Not supported for incomplete generic type parameters.","nodes":[{"content":"Not supported for incomplete generic type parameters.","pos":[0,53]}]}],"pos":[91441,91495],"yaml":true},{"content":"In all cases.","nodes":[{"pos":[0,13],"content":"In all cases.","nodes":[{"content":"In all cases.","pos":[0,13]}]}],"pos":[91690,91704],"yaml":true},{"content":"Not supported for incomplete generic type parameters.","nodes":[{"pos":[0,53],"content":"Not supported for incomplete generic type parameters.","nodes":[{"content":"Not supported for incomplete generic type parameters.","pos":[0,53]}]}],"pos":[93012,93066],"yaml":true},{"content":"This method is not supported for incomplete generic type parameters. Retrieve the type parameter from the completed generic type definition and then use reflection on the retrieved type.","nodes":[{"pos":[0,186],"content":"This method is not supported for incomplete generic type parameters. Retrieve the type parameter from the completed generic type definition and then use reflection on the retrieved type.","nodes":[{"content":"This method is not supported for incomplete generic type parameters. Retrieve the type parameter from the completed generic type definition and then use reflection on the retrieved type.","pos":[0,186],"nodes":[{"content":"This method is not supported for incomplete generic type parameters.","pos":[0,68]},{"content":"Retrieve the type parameter from the completed generic type definition and then use reflection on the retrieved type.","pos":[69,186]}]}]}],"pos":[93077,93264],"yaml":true,"extradata":"MT"},{"content":"Not supported.","nodes":[{"pos":[0,14],"content":"Not supported.","nodes":[{"content":"Not supported.","pos":[0,14]}]}],"pos":[93496,93511],"yaml":true},{"content":"Not supported for incomplete generic type parameters.","nodes":[{"pos":[0,53],"content":"Not supported for incomplete generic type parameters.","nodes":[{"content":"Not supported for incomplete generic type parameters.","pos":[0,53]}]}],"pos":[93587,93641],"yaml":true},{"content":"In all cases.","nodes":[{"pos":[0,13],"content":"In all cases.","nodes":[{"content":"In all cases.","pos":[0,13]}]}],"pos":[93835,93849],"yaml":true},{"content":"Not supported for incomplete generic type parameters.","nodes":[{"pos":[0,53],"content":"Not supported for incomplete generic type parameters.","nodes":[{"content":"Not supported for incomplete generic type parameters.","pos":[0,53]}]}],"pos":[97541,97595],"yaml":true},{"content":"This property is not supported for incomplete generic type parameters. Retrieve the type parameter from the completed generic type definition and then use reflection on the retrieved type.","nodes":[{"pos":[0,188],"content":"This property is not supported for incomplete generic type parameters. Retrieve the type parameter from the completed generic type definition and then use reflection on the retrieved type.","nodes":[{"content":"This property is not supported for incomplete generic type parameters. Retrieve the type parameter from the completed generic type definition and then use reflection on the retrieved type.","pos":[0,188],"nodes":[{"content":"This property is not supported for incomplete generic type parameters.","pos":[0,70]},{"content":"Retrieve the type parameter from the completed generic type definition and then use reflection on the retrieved type.","pos":[71,188]}]}]}],"pos":[97606,97795],"yaml":true,"extradata":"MT"},{"content":"Not supported for incomplete generic type parameters.","nodes":[{"pos":[0,53],"content":"Not supported for incomplete generic type parameters.","nodes":[{"content":"Not supported for incomplete generic type parameters.","pos":[0,53]}]}],"pos":[97908,97962],"yaml":true},{"content":"In all cases.","nodes":[{"pos":[0,13],"content":"In all cases.","nodes":[{"content":"In all cases.","pos":[0,13]}]}],"pos":[98147,98161],"yaml":true},{"content":"Not supported for incomplete generic type parameters.","nodes":[{"pos":[0,53],"content":"Not supported for incomplete generic type parameters.","nodes":[{"content":"Not supported for incomplete generic type parameters.","pos":[0,53]}]}],"pos":[101617,101671],"yaml":true},{"content":"This method is not supported for incomplete generic type parameters. Retrieve the type parameter from the completed generic type definition and then use reflection on the retrieved type.","nodes":[{"pos":[0,186],"content":"This method is not supported for incomplete generic type parameters. Retrieve the type parameter from the completed generic type definition and then use reflection on the retrieved type.","nodes":[{"content":"This method is not supported for incomplete generic type parameters. Retrieve the type parameter from the completed generic type definition and then use reflection on the retrieved type.","pos":[0,186],"nodes":[{"content":"This method is not supported for incomplete generic type parameters.","pos":[0,68]},{"content":"Retrieve the type parameter from the completed generic type definition and then use reflection on the retrieved type.","pos":[69,186]}]}]}],"pos":[101682,101869],"yaml":true,"extradata":"MT"},{"content":"Not supported.","nodes":[{"pos":[0,14],"content":"Not supported.","nodes":[{"content":"Not supported.","pos":[0,14]}]}],"pos":[102242,102257],"yaml":true},{"content":"Not supported.","nodes":[{"pos":[0,14],"content":"Not supported.","nodes":[{"content":"Not supported.","pos":[0,14]}]}],"pos":[102340,102355],"yaml":true},{"content":"Not supported.","nodes":[{"pos":[0,14],"content":"Not supported.","nodes":[{"content":"Not supported.","pos":[0,14]}]}],"pos":[102428,102443],"yaml":true},{"content":"Not supported.","nodes":[{"pos":[0,14],"content":"Not supported.","nodes":[{"content":"Not supported.","pos":[0,14]}]}],"pos":[102505,102520],"yaml":true},{"content":"Not supported.","nodes":[{"pos":[0,14],"content":"Not supported.","nodes":[{"content":"Not supported.","pos":[0,14]}]}],"pos":[102582,102597],"yaml":true},{"content":"Not supported.","nodes":[{"pos":[0,14],"content":"Not supported.","nodes":[{"content":"Not supported.","pos":[0,14]}]}],"pos":[102686,102701],"yaml":true},{"content":"Not supported.","nodes":[{"pos":[0,14],"content":"Not supported.","nodes":[{"content":"Not supported.","pos":[0,14]}]}],"pos":[102783,102798],"yaml":true},{"content":"Not supported.","nodes":[{"pos":[0,14],"content":"Not supported.","nodes":[{"content":"Not supported.","pos":[0,14]}]}],"pos":[102871,102886],"yaml":true},{"content":"Not supported for incomplete generic type parameters.","nodes":[{"pos":[0,53],"content":"Not supported for incomplete generic type parameters.","nodes":[{"content":"Not supported for incomplete generic type parameters.","pos":[0,53]}]}],"pos":[102943,102997],"yaml":true},{"content":"In all cases.","nodes":[{"pos":[0,13],"content":"In all cases.","nodes":[{"content":"In all cases.","pos":[0,13]}]}],"pos":[103190,103204],"yaml":true},{"content":"Throws a <xref href=\"System.NotSupportedException\"></xref> exception in all cases.","nodes":[{"pos":[0,82],"content":"Throws a <ph id=\"ph1\">&lt;xref href=\"System.NotSupportedException\"&gt;&lt;/xref&gt;</ph> exception in all cases.","source":"Throws a <xref href=\"System.NotSupportedException\"></xref> exception in all cases."}],"pos":[105798,105881],"yaml":true},{"content":"This method is not supported for incomplete generic type parameters. Retrieve the type parameter from the completed generic type definition and then use reflection on the retrieved type.","nodes":[{"pos":[0,186],"content":"This method is not supported for incomplete generic type parameters. Retrieve the type parameter from the completed generic type definition and then use reflection on the retrieved type.","nodes":[{"content":"This method is not supported for incomplete generic type parameters. Retrieve the type parameter from the completed generic type definition and then use reflection on the retrieved type.","pos":[0,186],"nodes":[{"content":"This method is not supported for incomplete generic type parameters.","pos":[0,68]},{"content":"Retrieve the type parameter from the completed generic type definition and then use reflection on the retrieved type.","pos":[69,186]}]}]}],"pos":[105892,106079],"yaml":true,"extradata":"MT"},{"content":"The object to test.","nodes":[{"pos":[0,19],"content":"The object to test.","nodes":[{"content":"The object to test.","pos":[0,19]}]}],"pos":[106272,106292],"yaml":true},{"content":"Throws a <xref href=\"System.NotSupportedException\"></xref> exception in all cases.","nodes":[{"pos":[0,82],"content":"Throws a <ph id=\"ph1\">&lt;xref href=\"System.NotSupportedException\"&gt;&lt;/xref&gt;</ph> exception in all cases.","source":"Throws a <xref href=\"System.NotSupportedException\"></xref> exception in all cases."}],"pos":[106350,106433],"yaml":true},{"content":"In all cases.","nodes":[{"pos":[0,13],"content":"In all cases.","nodes":[{"content":"In all cases.","pos":[0,13]}]}],"pos":[106630,106644],"yaml":true},{"content":"Throws a <xref href=\"System.NotSupportedException\"></xref> exception in all cases.","nodes":[{"pos":[0,82],"content":"Throws a <ph id=\"ph1\">&lt;xref href=\"System.NotSupportedException\"&gt;&lt;/xref&gt;</ph> exception in all cases.","source":"Throws a <xref href=\"System.NotSupportedException\"></xref> exception in all cases."}],"pos":[107921,108004],"yaml":true},{"content":"This method is not supported for incomplete generic type parameters. Retrieve the type parameter from the completed generic type definition and then use reflection on the retrieved type.","nodes":[{"pos":[0,186],"content":"This method is not supported for incomplete generic type parameters. Retrieve the type parameter from the completed generic type definition and then use reflection on the retrieved type.","nodes":[{"content":"This method is not supported for incomplete generic type parameters. Retrieve the type parameter from the completed generic type definition and then use reflection on the retrieved type.","pos":[0,186],"nodes":[{"content":"This method is not supported for incomplete generic type parameters.","pos":[0,68]},{"content":"Retrieve the type parameter from the completed generic type definition and then use reflection on the retrieved type.","pos":[69,186]}]}]}],"pos":[108015,108202],"yaml":true,"extradata":"MT"},{"content":"The object to test.","nodes":[{"pos":[0,19],"content":"The object to test.","nodes":[{"content":"The object to test.","pos":[0,19]}]}],"pos":[108344,108364],"yaml":true},{"content":"Throws a <xref href=\"System.NotSupportedException\"></xref> exception in all cases.","nodes":[{"pos":[0,82],"content":"Throws a <ph id=\"ph1\">&lt;xref href=\"System.NotSupportedException\"&gt;&lt;/xref&gt;</ph> exception in all cases.","source":"Throws a <xref href=\"System.NotSupportedException\"></xref> exception in all cases."}],"pos":[108422,108505],"yaml":true},{"content":"In all cases.","nodes":[{"pos":[0,13],"content":"In all cases.","nodes":[{"content":"In all cases.","pos":[0,13]}]}],"pos":[108702,108716],"yaml":true},{"content":"Gets a value that indicates whether this object represents a constructed generic type.","nodes":[{"pos":[0,86],"content":"Gets a value that indicates whether this object represents a constructed generic type.","nodes":[{"content":"Gets a value that indicates whether this object represents a constructed generic type.","pos":[0,86]}]}],"pos":[112570,112657],"yaml":true},{"content":"`true` if this object represents a constructed generic type; otherwise, `false`.","nodes":[{"pos":[0,80],"content":"<ph id=\"ph1\">`true`</ph> if this object represents a constructed generic type; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` if this object represents a constructed generic type; otherwise, `false`."}],"pos":[112793,112876],"yaml":true},{"content":"Not supported for incomplete generic type parameters.","nodes":[{"pos":[0,53],"content":"Not supported for incomplete generic type parameters.","nodes":[{"content":"Not supported for incomplete generic type parameters.","pos":[0,53]}]}],"pos":[114173,114227],"yaml":true},{"content":"This method is not supported for incomplete generic type parameters. Retrieve the type parameter from the completed generic type definition and then use reflection on the retrieved type.","nodes":[{"pos":[0,186],"content":"This method is not supported for incomplete generic type parameters. Retrieve the type parameter from the completed generic type definition and then use reflection on the retrieved type.","nodes":[{"content":"This method is not supported for incomplete generic type parameters. Retrieve the type parameter from the completed generic type definition and then use reflection on the retrieved type.","pos":[0,186],"nodes":[{"content":"This method is not supported for incomplete generic type parameters.","pos":[0,68]},{"content":"Retrieve the type parameter from the completed generic type definition and then use reflection on the retrieved type.","pos":[69,186]}]}]}],"pos":[114238,114425],"yaml":true,"extradata":"MT"},{"content":"Not supported.","nodes":[{"pos":[0,14],"content":"Not supported.","nodes":[{"content":"Not supported.","pos":[0,14]}]}],"pos":[114598,114613],"yaml":true},{"content":"Not supported.","nodes":[{"pos":[0,14],"content":"Not supported.","nodes":[{"content":"Not supported.","pos":[0,14]}]}],"pos":[114677,114692],"yaml":true},{"content":"Not supported for incomplete generic type parameters.","nodes":[{"pos":[0,53],"content":"Not supported for incomplete generic type parameters.","nodes":[{"content":"Not supported for incomplete generic type parameters.","pos":[0,53]}]}],"pos":[114750,114804],"yaml":true},{"content":"In all cases.","nodes":[{"pos":[0,13],"content":"In all cases.","nodes":[{"content":"In all cases.","pos":[0,13]}]}],"pos":[114994,115008],"yaml":true},{"content":"Gets `true` in all cases.","nodes":[{"pos":[0,25],"content":"Gets <ph id=\"ph1\">`true`</ph> in all cases.","source":"Gets `true` in all cases."}],"pos":[117066,117092],"yaml":true},{"content":"`true` in all cases.","nodes":[{"pos":[0,20],"content":"<ph id=\"ph1\">`true`</ph> in all cases.","source":"`true` in all cases."}],"pos":[117222,117245],"yaml":true},{"content":"Returns `false` in all cases.","nodes":[{"pos":[0,29],"content":"Returns <ph id=\"ph1\">`false`</ph> in all cases.","source":"Returns `false` in all cases."}],"pos":[118581,118611],"yaml":true},{"content":"In a constructed type, the type that is assigned to a generic type parameter can be a generic type, but the type parameter itself is not generic.","nodes":[{"pos":[0,145],"content":"In a constructed type, the type that is assigned to a generic type parameter can be a generic type, but the type parameter itself is not generic.","nodes":[{"content":"In a constructed type, the type that is assigned to a generic type parameter can be a generic type, but the type parameter itself is not generic.","pos":[0,145]}]}],"pos":[118622,118768],"yaml":true,"extradata":"MT"},{"content":"`false` in all cases.","nodes":[{"pos":[0,21],"content":"<ph id=\"ph1\">`false`</ph> in all cases.","source":"`false` in all cases."}],"pos":[118893,118917],"yaml":true},{"content":"Gets `false` in all cases.","nodes":[{"pos":[0,26],"content":"Gets <ph id=\"ph1\">`false`</ph> in all cases.","source":"Gets `false` in all cases."}],"pos":[120308,120335],"yaml":true},{"content":"In a constructed type, the type that is assigned to a generic type parameter can be a generic type, but the type parameter itself is not generic.","nodes":[{"pos":[0,145],"content":"In a constructed type, the type that is assigned to a generic type parameter can be a generic type, but the type parameter itself is not generic.","nodes":[{"content":"In a constructed type, the type that is assigned to a generic type parameter can be a generic type, but the type parameter itself is not generic.","pos":[0,145]}]}],"pos":[120346,120492],"yaml":true,"extradata":"MT"},{"content":"`false` in all cases.","nodes":[{"pos":[0,21],"content":"<ph id=\"ph1\">`false`</ph> in all cases.","source":"`false` in all cases."}],"pos":[120627,120651],"yaml":true},{"content":"Not supported for incomplete generic type parameters.","nodes":[{"pos":[0,53],"content":"Not supported for incomplete generic type parameters.","nodes":[{"content":"Not supported for incomplete generic type parameters.","pos":[0,53]}]}],"pos":[126681,126735],"yaml":true},{"content":"This method is not supported for incomplete generic type parameters. Retrieve the type parameter from the completed generic type definition and then use reflection on the retrieved type.","nodes":[{"pos":[0,186],"content":"This method is not supported for incomplete generic type parameters. Retrieve the type parameter from the completed generic type definition and then use reflection on the retrieved type.","nodes":[{"content":"This method is not supported for incomplete generic type parameters. Retrieve the type parameter from the completed generic type definition and then use reflection on the retrieved type.","pos":[0,186],"nodes":[{"content":"This method is not supported for incomplete generic type parameters.","pos":[0,68]},{"content":"Retrieve the type parameter from the completed generic type definition and then use reflection on the retrieved type.","pos":[69,186]}]}]}],"pos":[126746,126933],"yaml":true,"extradata":"MT"},{"content":"Not supported.","nodes":[{"pos":[0,14],"content":"Not supported.","nodes":[{"content":"Not supported.","pos":[0,14]}]}],"pos":[127137,127152],"yaml":true},{"content":"Not supported for incomplete generic type parameters.","nodes":[{"pos":[0,53],"content":"Not supported for incomplete generic type parameters.","nodes":[{"content":"Not supported for incomplete generic type parameters.","pos":[0,53]}]}],"pos":[127210,127264],"yaml":true},{"content":"In all cases.","nodes":[{"pos":[0,13],"content":"In all cases.","nodes":[{"content":"In all cases.","pos":[0,13]}]}],"pos":[127457,127471],"yaml":true},{"content":"Returns the type of a one-dimensional array whose element type is the generic type parameter.","nodes":[{"pos":[0,93],"content":"Returns the type of a one-dimensional array whose element type is the generic type parameter.","nodes":[{"content":"Returns the type of a one-dimensional array whose element type is the generic type parameter.","pos":[0,93]}]}],"pos":[132798,132892],"yaml":true},{"content":"The <xref:System.Type.MakeArrayType%2A> method provides a way to generate array types for parameter lists.","nodes":[{"pos":[0,106],"content":"The <xref:System.Type.MakeArrayType%2A> method provides a way to generate array types for parameter lists.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Type.MakeArrayType%2A&gt;</ph> method provides a way to generate array types for parameter lists.","pos":[0,106],"source":"The <xref:System.Type.MakeArrayType%2A> method provides a way to generate array types for parameter lists."}]}],"pos":[132903,133010],"yaml":true,"extradata":"MT"},{"content":"A <xref href=\"System.Type\"></xref> object that represents the type of a one-dimensional array whose element type is the generic type parameter.","nodes":[{"pos":[0,143],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Type\"&gt;&lt;/xref&gt;</ph> object that represents the type of a one-dimensional array whose element type is the generic type parameter.","source":"A <xref href=\"System.Type\"></xref> object that represents the type of a one-dimensional array whose element type is the generic type parameter."}],"pos":[134063,134207],"yaml":true},{"content":"Returns the type of an array whose element type is the generic type parameter, with the specified number of dimensions.","nodes":[{"pos":[0,119],"content":"Returns the type of an array whose element type is the generic type parameter, with the specified number of dimensions.","nodes":[{"content":"Returns the type of an array whose element type is the generic type parameter, with the specified number of dimensions.","pos":[0,119]}]}],"pos":[135599,135719],"yaml":true},{"content":"The <xref:System.Type.MakeArrayType%2A> method provides a way to generate array types for parameter lists.","nodes":[{"pos":[0,106],"content":"The <xref:System.Type.MakeArrayType%2A> method provides a way to generate array types for parameter lists.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Type.MakeArrayType%2A&gt;</ph> method provides a way to generate array types for parameter lists.","pos":[0,106],"source":"The <xref:System.Type.MakeArrayType%2A> method provides a way to generate array types for parameter lists."}]}],"pos":[135730,135837],"yaml":true,"extradata":"MT"},{"content":"The number of dimensions for the array.","nodes":[{"pos":[0,39],"content":"The number of dimensions for the array.","nodes":[{"content":"The number of dimensions for the array.","pos":[0,39]}]}],"pos":[136899,136939],"yaml":true},{"content":"A <xref href=\"System.Type\"></xref> object that represents the type of an array whose element type is the generic type parameter, with the specified number of dimensions.","nodes":[{"pos":[0,169],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Type\"&gt;&lt;/xref&gt;</ph> object that represents the type of an array whose element type is the generic type parameter, with the specified number of dimensions.","source":"A <xref href=\"System.Type\"></xref> object that represents the type of an array whose element type is the generic type parameter, with the specified number of dimensions."}],"pos":[136994,137164],"yaml":true},{"content":"<code>rank</code> is not a valid number of dimensions. For example, its value is less than 1.","nodes":[{"pos":[0,93],"content":"<code>rank</code> is not a valid number of dimensions. For example, its value is less than 1.","nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;rank&lt;/code&gt;</ph> is not a valid number of dimensions.","pos":[0,54],"source":"<code>rank</code> is not a valid number of dimensions."},{"content":"For example, its value is less than 1.","pos":[55,93]}]}],"pos":[137364,137458],"yaml":true},{"content":"Returns a <xref href=\"System.Type\"></xref> object that represents the current generic type parameter when passed as a reference parameter.","nodes":[{"pos":[0,138],"content":"Returns a <ph id=\"ph1\">&lt;xref href=\"System.Type\"&gt;&lt;/xref&gt;</ph> object that represents the current generic type parameter when passed as a reference parameter.","source":"Returns a <xref href=\"System.Type\"></xref> object that represents the current generic type parameter when passed as a reference parameter."}],"pos":[138698,138837],"yaml":true},{"content":"The <xref:System.Reflection.Emit.GenericTypeParameterBuilder.MakeByRefType%2A> method provides a way to generate `ref` types (`ByRef` in Visual Basic) for parameter lists.","nodes":[{"pos":[0,171],"content":"The <ph id=\"ph1\">&lt;xref:System.Reflection.Emit.GenericTypeParameterBuilder.MakeByRefType%2A&gt;</ph> method provides a way to generate <ph id=\"ph2\">`ref`</ph> types (<ph id=\"ph3\">`ByRef`</ph> in Visual Basic) for parameter lists.","source":"The <xref:System.Reflection.Emit.GenericTypeParameterBuilder.MakeByRefType%2A> method provides a way to generate `ref` types (`ByRef` in Visual Basic) for parameter lists."}],"pos":[138848,139020],"yaml":true,"extradata":"MT"},{"content":"A <xref href=\"System.Type\"></xref> object that represents the current generic type parameter when passed as a reference parameter.","nodes":[{"pos":[0,130],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Type\"&gt;&lt;/xref&gt;</ph> object that represents the current generic type parameter when passed as a reference parameter.","source":"A <xref href=\"System.Type\"></xref> object that represents the current generic type parameter when passed as a reference parameter."}],"pos":[140073,140204],"yaml":true},{"content":"Not valid for incomplete generic type parameters.","nodes":[{"pos":[0,49],"content":"Not valid for incomplete generic type parameters.","nodes":[{"content":"Not valid for incomplete generic type parameters.","pos":[0,49]}]}],"pos":[141614,141664],"yaml":true},{"content":"An array of type arguments.","nodes":[{"pos":[0,27],"content":"An array of type arguments.","nodes":[{"content":"An array of type arguments.","pos":[0,27]}]}],"pos":[141833,141861],"yaml":true},{"content":"This method is invalid for incomplete generic type parameters.","nodes":[{"pos":[0,62],"content":"This method is invalid for incomplete generic type parameters.","nodes":[{"content":"This method is invalid for incomplete generic type parameters.","pos":[0,62]}]}],"pos":[141916,141979],"yaml":true},{"content":"In all cases.","nodes":[{"pos":[0,13],"content":"In all cases.","nodes":[{"content":"In all cases.","pos":[0,13]}]}],"pos":[142183,142197],"yaml":true},{"content":"Returns a <xref href=\"System.Type\"></xref> object that represents a pointer to the current generic type parameter.","nodes":[{"pos":[0,114],"content":"Returns a <ph id=\"ph1\">&lt;xref href=\"System.Type\"&gt;&lt;/xref&gt;</ph> object that represents a pointer to the current generic type parameter.","source":"Returns a <xref href=\"System.Type\"></xref> object that represents a pointer to the current generic type parameter."}],"pos":[143449,143564],"yaml":true},{"content":"The <xref:System.Reflection.Emit.GenericTypeParameterBuilder.MakePointerType%2A> method provides a way to generate pointer types for parameter lists.","nodes":[{"pos":[0,149],"content":"The <xref:System.Reflection.Emit.GenericTypeParameterBuilder.MakePointerType%2A> method provides a way to generate pointer types for parameter lists.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Reflection.Emit.GenericTypeParameterBuilder.MakePointerType%2A&gt;</ph> method provides a way to generate pointer types for parameter lists.","pos":[0,149],"source":"The <xref:System.Reflection.Emit.GenericTypeParameterBuilder.MakePointerType%2A> method provides a way to generate pointer types for parameter lists."}]}],"pos":[143575,143725],"yaml":true,"extradata":"MT"},{"content":"A <xref href=\"System.Type\"></xref> object that represents a pointer to the current generic type parameter.","nodes":[{"pos":[0,106],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Type\"&gt;&lt;/xref&gt;</ph> object that represents a pointer to the current generic type parameter.","source":"A <xref href=\"System.Type\"></xref> object that represents a pointer to the current generic type parameter."}],"pos":[144780,144887],"yaml":true},{"content":"Gets the dynamic module that contains the generic type parameter.","nodes":[{"pos":[0,65],"content":"Gets the dynamic module that contains the generic type parameter.","nodes":[{"content":"Gets the dynamic module that contains the generic type parameter.","pos":[0,65]}]}],"pos":[146178,146244],"yaml":true},{"content":"A <xref href=\"System.Reflection.Module\"></xref> object that represents the dynamic module that contains the generic type parameter.","nodes":[{"pos":[0,131],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Reflection.Module\"&gt;&lt;/xref&gt;</ph> object that represents the dynamic module that contains the generic type parameter.","source":"A <xref href=\"System.Reflection.Module\"></xref> object that represents the dynamic module that contains the generic type parameter."}],"pos":[146392,146524],"yaml":true},{"content":"Gets the name of the generic type parameter.","nodes":[{"pos":[0,44],"content":"Gets the name of the generic type parameter.","nodes":[{"content":"Gets the name of the generic type parameter.","pos":[0,44]}]}],"pos":[147834,147879],"yaml":true},{"content":"The name of the generic type parameter.","nodes":[{"pos":[0,39],"content":"The name of the generic type parameter.","nodes":[{"content":"The name of the generic type parameter.","pos":[0,39]}]}],"pos":[147996,148036],"yaml":true},{"content":"Gets `null` in all cases.","nodes":[{"pos":[0,25],"content":"Gets <ph id=\"ph1\">`null`</ph> in all cases.","source":"Gets `null` in all cases."}],"pos":[149374,149400],"yaml":true},{"content":"A null reference (`Nothing` in Visual Basic) in all cases.","nodes":[{"pos":[0,58],"content":"A null reference (<ph id=\"ph1\">`Nothing`</ph> in Visual Basic) in all cases.","source":"A null reference (`Nothing` in Visual Basic) in all cases."}],"pos":[149522,149581],"yaml":true},{"content":"Gets the <xref href=\"System.Type\"></xref> object that was used to obtain the <xref href=\"System.Reflection.Emit.GenericTypeParameterBuilder\"></xref>.","nodes":[{"pos":[0,149],"content":"Gets the <ph id=\"ph1\">&lt;xref href=\"System.Type\"&gt;&lt;/xref&gt;</ph> object that was used to obtain the <ph id=\"ph2\">&lt;xref href=\"System.Reflection.Emit.GenericTypeParameterBuilder\"&gt;&lt;/xref&gt;</ph>.","source":"Gets the <xref href=\"System.Type\"></xref> object that was used to obtain the <xref href=\"System.Reflection.Emit.GenericTypeParameterBuilder\"></xref>."}],"pos":[150948,151098],"yaml":true},{"content":"The <xref href=\"System.Type\"></xref> object that was used to obtain the <xref href=\"System.Reflection.Emit.GenericTypeParameterBuilder\"></xref>.","nodes":[{"pos":[0,144],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Type\"&gt;&lt;/xref&gt;</ph> object that was used to obtain the <ph id=\"ph2\">&lt;xref href=\"System.Reflection.Emit.GenericTypeParameterBuilder\"&gt;&lt;/xref&gt;</ph>.","source":"The <xref href=\"System.Type\"></xref> object that was used to obtain the <xref href=\"System.Reflection.Emit.GenericTypeParameterBuilder\"></xref>."}],"pos":[151220,151365],"yaml":true},{"content":"Sets the base type that a type must inherit in order to be substituted for the type parameter.","nodes":[{"pos":[0,94],"content":"Sets the base type that a type must inherit in order to be substituted for the type parameter.","nodes":[{"content":"Sets the base type that a type must inherit in order to be substituted for the type parameter.","pos":[0,94]}]}],"pos":[152735,152830],"yaml":true},{"content":"To retrieve the base type constraint use the <xref:System.Reflection.Emit.GenericTypeParameterBuilder.BaseType%2A> property.  \n  \n Once you have created the generic type that contains the type parameter, you can use its <xref:System.Type> object to reflect the type parameter and their constraints. To get the type parameters of a completed generic type, use the <xref:System.Type.GetGenericArguments%2A?displayProperty=fullName> method. For each type parameter, get the base type constraint and interface constraints by using the <xref:System.Type.GetGenericParameterConstraints%2A?displayProperty=fullName> method, and get the special constraints by using the <xref:System.Type.GenericParameterAttributes%2A?displayProperty=fullName> property.","nodes":[{"pos":[0,124],"content":"To retrieve the base type constraint use the <xref:System.Reflection.Emit.GenericTypeParameterBuilder.BaseType%2A> property.","nodes":[{"content":"To retrieve the base type constraint use the <ph id=\"ph1\">&lt;xref:System.Reflection.Emit.GenericTypeParameterBuilder.BaseType%2A&gt;</ph> property.","pos":[0,124],"source":"To retrieve the base type constraint use the <xref:System.Reflection.Emit.GenericTypeParameterBuilder.BaseType%2A> property."}]},{"pos":[131,745],"content":"Once you have created the generic type that contains the type parameter, you can use its <xref:System.Type> object to reflect the type parameter and their constraints. To get the type parameters of a completed generic type, use the <xref:System.Type.GetGenericArguments%2A?displayProperty=fullName> method. For each type parameter, get the base type constraint and interface constraints by using the <xref:System.Type.GetGenericParameterConstraints%2A?displayProperty=fullName> method, and get the special constraints by using the <xref:System.Type.GenericParameterAttributes%2A?displayProperty=fullName> property.","nodes":[{"content":"Once you have created the generic type that contains the type parameter, you can use its <xref:System.Type> object to reflect the type parameter and their constraints. To get the type parameters of a completed generic type, use the <xref:System.Type.GetGenericArguments%2A?displayProperty=fullName> method. For each type parameter, get the base type constraint and interface constraints by using the <xref:System.Type.GetGenericParameterConstraints%2A?displayProperty=fullName> method, and get the special constraints by using the <xref:System.Type.GenericParameterAttributes%2A?displayProperty=fullName> property.","pos":[0,614],"nodes":[{"content":"Once you have created the generic type that contains the type parameter, you can use its <ph id=\"ph1\">&lt;xref:System.Type&gt;</ph> object to reflect the type parameter and their constraints.","pos":[0,167],"source":"Once you have created the generic type that contains the type parameter, you can use its <xref:System.Type> object to reflect the type parameter and their constraints."},{"content":"To get the type parameters of a completed generic type, use the <ph id=\"ph1\">&lt;xref:System.Type.GetGenericArguments%2A?displayProperty=fullName&gt;</ph> method.","pos":[168,306],"source":" To get the type parameters of a completed generic type, use the <xref:System.Type.GetGenericArguments%2A?displayProperty=fullName> method."},{"content":"For each type parameter, get the base type constraint and interface constraints by using the <ph id=\"ph1\">&lt;xref:System.Type.GetGenericParameterConstraints%2A?displayProperty=fullName&gt;</ph> method, and get the special constraints by using the <ph id=\"ph2\">&lt;xref:System.Type.GenericParameterAttributes%2A?displayProperty=fullName&gt;</ph> property.","pos":[307,614],"source":" For each type parameter, get the base type constraint and interface constraints by using the <xref:System.Type.GetGenericParameterConstraints%2A?displayProperty=fullName> method, and get the special constraints by using the <xref:System.Type.GenericParameterAttributes%2A?displayProperty=fullName> property."}]}]}],"pos":[152841,153591],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Type\"></xref> that must be inherited by any type that is to be substituted for the type parameter.","nodes":[{"pos":[0,121],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Type\"&gt;&lt;/xref&gt;</ph> that must be inherited by any type that is to be substituted for the type parameter.","source":"The <xref href=\"System.Type\"></xref> that must be inherited by any type that is to be substituted for the type parameter."}],"pos":[154665,154787],"yaml":true},{"content":"Set a custom attribute using a custom attribute builder.","nodes":[{"pos":[0,56],"content":"Set a custom attribute using a custom attribute builder.","nodes":[{"content":"Set a custom attribute using a custom attribute builder.","pos":[0,56]}]}],"pos":[156407,156464],"yaml":true},{"content":"An instance of a helper class that defines the custom attribute.","nodes":[{"pos":[0,64],"content":"An instance of a helper class that defines the custom attribute.","nodes":[{"content":"An instance of a helper class that defines the custom attribute.","pos":[0,64]}]}],"pos":[156698,156763],"yaml":true},{"content":"<code>customBuilder</code> is `null`.","nodes":[{"pos":[0,37],"content":"<ph id=\"ph1\">&lt;code&gt;customBuilder&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>customBuilder</code> is `null`."}],"pos":[156962,157000],"yaml":true},{"content":"Sets a custom attribute using a specified custom attribute blob.","nodes":[{"pos":[0,64],"content":"Sets a custom attribute using a specified custom attribute blob.","nodes":[{"content":"Sets a custom attribute using a specified custom attribute blob.","pos":[0,64]}]}],"pos":[158526,158591],"yaml":true},{"content":"> [!NOTE]\n>  For details on how to format `binaryAttribute`, see the documentation for Partition II: Metadata Definition and Semantics. The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.","nodes":[{"pos":[2,432],"content":"[!NOTE]\n For details on how to format `binaryAttribute`, see the documentation for Partition II: Metadata Definition and Semantics. The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.","leadings":["","> "],"nodes":[{"content":" For details on how to format `binaryAttribute`, see the documentation for Partition II: Metadata Definition and Semantics. The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.","pos":[8,428],"nodes":[{"content":"For details on how to format <ph id=\"ph1\">`binaryAttribute`</ph>, see the documentation for Partition II: Metadata Definition and Semantics.","pos":[1,123],"source":" For details on how to format `binaryAttribute`, see the documentation for Partition II: Metadata Definition and Semantics."},{"content":"The documentation is available online; see <bpt id=\"p1\">[</bpt>ECMA C# and Common Language Infrastructure Standards<ept id=\"p1\">](http://go.microsoft.com/fwlink/?LinkID=99212)</ept> on MSDN and <bpt id=\"p2\">[</bpt>Standard ECMA-335 - Common Language Infrastructure (CLI)<ept id=\"p2\">](http://go.microsoft.com/fwlink/?LinkID=65552)</ept> on the Ecma International Web site.","pos":[124,420],"source":" The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site."}]}]}],"pos":[158602,159047],"yaml":true,"extradata":"MT"},{"content":"The constructor for the custom attribute.","nodes":[{"pos":[0,41],"content":"The constructor for the custom attribute.","nodes":[{"content":"The constructor for the custom attribute.","pos":[0,41]}]}],"pos":[159261,159303],"yaml":true},{"content":"A byte blob representing the attribute.","nodes":[{"pos":[0,39],"content":"A byte blob representing the attribute.","nodes":[{"content":"A byte blob representing the attribute.","pos":[0,39]}]}],"pos":[159374,159414],"yaml":true},{"content":"<code>con</code> is `null`.  \n  \n -or-  \n  \n <code>binaryAttribute</code> is a null reference.","nodes":[{"pos":[0,27],"content":"<ph id=\"ph1\">&lt;code&gt;con&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>con</code> is `null`."},{"pos":[34,38],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[45,94],"content":"<ph id=\"ph1\">&lt;code&gt;binaryAttribute&lt;/code&gt;</ph> is a null reference.","source":"<code>binaryAttribute</code> is a null reference."}],"pos":[159613,159714],"yaml":true},{"content":"Sets the variance characteristics and special constraints of the generic parameter, such as the parameterless constructor constraint.","nodes":[{"pos":[0,133],"content":"Sets the variance characteristics and special constraints of the generic parameter, such as the parameterless constructor constraint.","nodes":[{"content":"Sets the variance characteristics and special constraints of the generic parameter, such as the parameterless constructor constraint.","pos":[0,133]}]}],"pos":[161306,161440],"yaml":true},{"content":"Special constraints can specify that any type assigned to the generic type parameter must have a default constructor, must be a reference type, or must be a value type.  \n  \n Special constraints cannot be retrieved using methods of the <xref:System.Reflection.Emit.GenericTypeParameterBuilder> class. Once you have created the generic type that contains the type parameter, you can use its <xref:System.Type> object to reflect the type parameters and their constraints. To get the type parameters of a completed generic type, use the <xref:System.Type.GetGenericArguments%2A?displayProperty=fullName> method. To get the special constraints for each type parameter, use the <xref:System.Type.GenericParameterAttributes%2A?displayProperty=fullName> property.  \n  \n The <xref:System.Reflection.GenericParameterAttributes> enumeration values that refer to the variance characteristics of a type parameter are relevant only in languages that support covariance and contravariance, such as Microsoft intermediate language (MSIL). Visual Basic and C# currently do not support covariance and contravariance.","nodes":[{"pos":[0,168],"content":"Special constraints can specify that any type assigned to the generic type parameter must have a default constructor, must be a reference type, or must be a value type.","nodes":[{"content":"Special constraints can specify that any type assigned to the generic type parameter must have a default constructor, must be a reference type, or must be a value type.","pos":[0,168]}]},{"pos":[175,756],"content":"Special constraints cannot be retrieved using methods of the <xref:System.Reflection.Emit.GenericTypeParameterBuilder> class. Once you have created the generic type that contains the type parameter, you can use its <xref:System.Type> object to reflect the type parameters and their constraints. To get the type parameters of a completed generic type, use the <xref:System.Type.GetGenericArguments%2A?displayProperty=fullName> method. To get the special constraints for each type parameter, use the <xref:System.Type.GenericParameterAttributes%2A?displayProperty=fullName> property.","nodes":[{"content":"Special constraints cannot be retrieved using methods of the <xref:System.Reflection.Emit.GenericTypeParameterBuilder> class. Once you have created the generic type that contains the type parameter, you can use its <xref:System.Type> object to reflect the type parameters and their constraints. To get the type parameters of a completed generic type, use the <xref:System.Type.GetGenericArguments%2A?displayProperty=fullName> method. To get the special constraints for each type parameter, use the <xref:System.Type.GenericParameterAttributes%2A?displayProperty=fullName> property.","pos":[0,581],"nodes":[{"content":"Special constraints cannot be retrieved using methods of the <ph id=\"ph1\">&lt;xref:System.Reflection.Emit.GenericTypeParameterBuilder&gt;</ph> class.","pos":[0,125],"source":"Special constraints cannot be retrieved using methods of the <xref:System.Reflection.Emit.GenericTypeParameterBuilder> class."},{"content":"Once you have created the generic type that contains the type parameter, you can use its <ph id=\"ph1\">&lt;xref:System.Type&gt;</ph> object to reflect the type parameters and their constraints.","pos":[126,294],"source":" Once you have created the generic type that contains the type parameter, you can use its <xref:System.Type> object to reflect the type parameters and their constraints."},{"content":"To get the type parameters of a completed generic type, use the <ph id=\"ph1\">&lt;xref:System.Type.GetGenericArguments%2A?displayProperty=fullName&gt;</ph> method.","pos":[295,433],"source":" To get the type parameters of a completed generic type, use the <xref:System.Type.GetGenericArguments%2A?displayProperty=fullName> method."},{"content":"To get the special constraints for each type parameter, use the <ph id=\"ph1\">&lt;xref:System.Type.GenericParameterAttributes%2A?displayProperty=fullName&gt;</ph> property.","pos":[434,581],"source":" To get the special constraints for each type parameter, use the <xref:System.Type.GenericParameterAttributes%2A?displayProperty=fullName> property."}]}]},{"pos":[763,1099],"content":"The <xref:System.Reflection.GenericParameterAttributes> enumeration values that refer to the variance characteristics of a type parameter are relevant only in languages that support covariance and contravariance, such as Microsoft intermediate language (MSIL). Visual Basic and C# currently do not support covariance and contravariance.","nodes":[{"content":"The <xref:System.Reflection.GenericParameterAttributes> enumeration values that refer to the variance characteristics of a type parameter are relevant only in languages that support covariance and contravariance, such as Microsoft intermediate language (MSIL). Visual Basic and C# currently do not support covariance and contravariance.","pos":[0,336],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Reflection.GenericParameterAttributes&gt;</ph> enumeration values that refer to the variance characteristics of a type parameter are relevant only in languages that support covariance and contravariance, such as Microsoft intermediate language (MSIL).","pos":[0,260],"source":"The <xref:System.Reflection.GenericParameterAttributes> enumeration values that refer to the variance characteristics of a type parameter are relevant only in languages that support covariance and contravariance, such as Microsoft intermediate language (MSIL)."},{"content":"Visual Basic and C# currently do not support covariance and contravariance.","pos":[261,336]}]}]}],"pos":[161451,162557],"yaml":true,"extradata":"MT"},{"content":"A bitwise combination of <xref href=\"System.Reflection.GenericParameterAttributes\"></xref> values that represent the variance characteristics and special constraints of the generic type parameter.","nodes":[{"pos":[0,196],"content":"A bitwise combination of <ph id=\"ph1\">&lt;xref href=\"System.Reflection.GenericParameterAttributes\"&gt;&lt;/xref&gt;</ph> values that represent the variance characteristics and special constraints of the generic type parameter.","source":"A bitwise combination of <xref href=\"System.Reflection.GenericParameterAttributes\"></xref> values that represent the variance characteristics and special constraints of the generic type parameter."}],"pos":[163772,163969],"yaml":true},{"content":"Sets the interfaces a type must implement in order to be substituted for the type parameter.","nodes":[{"pos":[0,92],"content":"Sets the interfaces a type must implement in order to be substituted for the type parameter.","nodes":[{"content":"Sets the interfaces a type must implement in order to be substituted for the type parameter.","pos":[0,92]}]}],"pos":[165483,165576],"yaml":true},{"content":"Interface constraints cannot be retrieved using methods of the <xref:System.Reflection.Emit.GenericTypeParameterBuilder> class. Once you have created the generic type that contains the type parameter, you can use its <xref:System.Type> object to reflect the type parameters and their constraints. To get the type parameters of a completed generic type, use the <xref:System.Type.GetGenericArguments%2A?displayProperty=fullName> method. For each type parameter, get the base type constraint and interface constraints by using the <xref:System.Type.GetGenericParameterConstraints%2A?displayProperty=fullName> method.","nodes":[{"pos":[0,614],"content":"Interface constraints cannot be retrieved using methods of the <xref:System.Reflection.Emit.GenericTypeParameterBuilder> class. Once you have created the generic type that contains the type parameter, you can use its <xref:System.Type> object to reflect the type parameters and their constraints. To get the type parameters of a completed generic type, use the <xref:System.Type.GetGenericArguments%2A?displayProperty=fullName> method. For each type parameter, get the base type constraint and interface constraints by using the <xref:System.Type.GetGenericParameterConstraints%2A?displayProperty=fullName> method.","nodes":[{"content":"Interface constraints cannot be retrieved using methods of the <xref:System.Reflection.Emit.GenericTypeParameterBuilder> class. Once you have created the generic type that contains the type parameter, you can use its <xref:System.Type> object to reflect the type parameters and their constraints. To get the type parameters of a completed generic type, use the <xref:System.Type.GetGenericArguments%2A?displayProperty=fullName> method. For each type parameter, get the base type constraint and interface constraints by using the <xref:System.Type.GetGenericParameterConstraints%2A?displayProperty=fullName> method.","pos":[0,614],"nodes":[{"content":"Interface constraints cannot be retrieved using methods of the <ph id=\"ph1\">&lt;xref:System.Reflection.Emit.GenericTypeParameterBuilder&gt;</ph> class.","pos":[0,127],"source":"Interface constraints cannot be retrieved using methods of the <xref:System.Reflection.Emit.GenericTypeParameterBuilder> class."},{"content":"Once you have created the generic type that contains the type parameter, you can use its <ph id=\"ph1\">&lt;xref:System.Type&gt;</ph> object to reflect the type parameters and their constraints.","pos":[128,296],"source":" Once you have created the generic type that contains the type parameter, you can use its <xref:System.Type> object to reflect the type parameters and their constraints."},{"content":"To get the type parameters of a completed generic type, use the <ph id=\"ph1\">&lt;xref:System.Type.GetGenericArguments%2A?displayProperty=fullName&gt;</ph> method.","pos":[297,435],"source":" To get the type parameters of a completed generic type, use the <xref:System.Type.GetGenericArguments%2A?displayProperty=fullName> method."},{"content":"For each type parameter, get the base type constraint and interface constraints by using the <ph id=\"ph1\">&lt;xref:System.Type.GetGenericParameterConstraints%2A?displayProperty=fullName&gt;</ph> method.","pos":[436,614],"source":" For each type parameter, get the base type constraint and interface constraints by using the <xref:System.Type.GetGenericParameterConstraints%2A?displayProperty=fullName> method."}]}]}],"pos":[165587,166202],"yaml":true,"extradata":"MT"},{"content":"An array of <xref href=\"System.Type\"></xref> objects that represent the interfaces a type must implement in order to be substituted for the type parameter.","nodes":[{"pos":[0,155],"content":"An array of <ph id=\"ph1\">&lt;xref href=\"System.Type\"&gt;&lt;/xref&gt;</ph> objects that represent the interfaces a type must implement in order to be substituted for the type parameter.","source":"An array of <xref href=\"System.Type\"></xref> objects that represent the interfaces a type must implement in order to be substituted for the type parameter."}],"pos":[167355,167511],"yaml":true},{"content":"Returns a string representation of the current generic type parameter.","nodes":[{"pos":[0,70],"content":"Returns a string representation of the current generic type parameter.","nodes":[{"content":"Returns a string representation of the current generic type parameter.","pos":[0,70]}]}],"pos":[168941,169012],"yaml":true},{"content":"A string that contains the name of the generic type parameter.","nodes":[{"pos":[0,62],"content":"A string that contains the name of the generic type parameter.","nodes":[{"content":"A string that contains the name of the generic type parameter.","pos":[0,62]}]}],"pos":[169147,169210],"yaml":true},{"content":"Not supported for incomplete generic type parameters.","nodes":[{"pos":[0,53],"content":"Not supported for incomplete generic type parameters.","nodes":[{"content":"Not supported for incomplete generic type parameters.","pos":[0,53]}]}],"pos":[170518,170572],"yaml":true},{"content":"This property is not supported for incomplete generic type parameters. Retrieve the type parameter from the completed generic type definition and then use reflection on the retrieved type.","nodes":[{"pos":[0,188],"content":"This property is not supported for incomplete generic type parameters. Retrieve the type parameter from the completed generic type definition and then use reflection on the retrieved type.","nodes":[{"content":"This property is not supported for incomplete generic type parameters. Retrieve the type parameter from the completed generic type definition and then use reflection on the retrieved type.","pos":[0,188],"nodes":[{"content":"This property is not supported for incomplete generic type parameters.","pos":[0,70]},{"content":"Retrieve the type parameter from the completed generic type definition and then use reflection on the retrieved type.","pos":[71,188]}]}]}],"pos":[170583,170772],"yaml":true,"extradata":"MT"},{"content":"Not supported for incomplete generic type parameters.","nodes":[{"pos":[0,53],"content":"Not supported for incomplete generic type parameters.","nodes":[{"content":"Not supported for incomplete generic type parameters.","pos":[0,53]}]}],"pos":[170917,170971],"yaml":true},{"content":"In all cases.","nodes":[{"pos":[0,13],"content":"In all cases.","nodes":[{"content":"In all cases.","pos":[0,13]}]}],"pos":[171162,171176],"yaml":true},{"content":"Gets the current generic type parameter.","nodes":[{"pos":[0,40],"content":"Gets the current generic type parameter.","nodes":[{"content":"Gets the current generic type parameter.","pos":[0,40]}]}],"pos":[172390,172431],"yaml":true},{"content":"The current <xref href=\"System.Reflection.Emit.GenericTypeParameterBuilder\"></xref> object.","nodes":[{"pos":[0,91],"content":"The current <ph id=\"ph1\">&lt;xref href=\"System.Reflection.Emit.GenericTypeParameterBuilder\"&gt;&lt;/xref&gt;</ph> object.","source":"The current <xref href=\"System.Reflection.Emit.GenericTypeParameterBuilder\"></xref> object."}],"pos":[172560,172652],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Reflection.Emit.GenericTypeParameterBuilder\n  commentId: T:System.Reflection.Emit.GenericTypeParameterBuilder\n  id: GenericTypeParameterBuilder\n  children:\n  - System.Reflection.Emit.GenericTypeParameterBuilder.#ctor\n  - System.Reflection.Emit.GenericTypeParameterBuilder.Assembly\n  - System.Reflection.Emit.GenericTypeParameterBuilder.AssemblyQualifiedName\n  - System.Reflection.Emit.GenericTypeParameterBuilder.Attributes\n  - System.Reflection.Emit.GenericTypeParameterBuilder.BaseType\n  - System.Reflection.Emit.GenericTypeParameterBuilder.ContainsGenericParameters\n  - System.Reflection.Emit.GenericTypeParameterBuilder.DeclaringMethod\n  - System.Reflection.Emit.GenericTypeParameterBuilder.DeclaringType\n  - System.Reflection.Emit.GenericTypeParameterBuilder.Equals(System.Object)\n  - System.Reflection.Emit.GenericTypeParameterBuilder.FullName\n  - System.Reflection.Emit.GenericTypeParameterBuilder.GenericParameterAttributes\n  - System.Reflection.Emit.GenericTypeParameterBuilder.GenericParameterPosition\n  - System.Reflection.Emit.GenericTypeParameterBuilder.GenericTypeArguments\n  - System.Reflection.Emit.GenericTypeParameterBuilder.GetArrayRank\n  - System.Reflection.Emit.GenericTypeParameterBuilder.GetAttributeFlagsImpl\n  - System.Reflection.Emit.GenericTypeParameterBuilder.GetConstructorImpl(System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])\n  - System.Reflection.Emit.GenericTypeParameterBuilder.GetConstructors(System.Reflection.BindingFlags)\n  - System.Reflection.Emit.GenericTypeParameterBuilder.GetCustomAttributes(System.Boolean)\n  - System.Reflection.Emit.GenericTypeParameterBuilder.GetCustomAttributes(System.Type,System.Boolean)\n  - System.Reflection.Emit.GenericTypeParameterBuilder.GetElementType\n  - System.Reflection.Emit.GenericTypeParameterBuilder.GetEvent(System.String,System.Reflection.BindingFlags)\n  - System.Reflection.Emit.GenericTypeParameterBuilder.GetEvents\n  - System.Reflection.Emit.GenericTypeParameterBuilder.GetEvents(System.Reflection.BindingFlags)\n  - System.Reflection.Emit.GenericTypeParameterBuilder.GetField(System.String,System.Reflection.BindingFlags)\n  - System.Reflection.Emit.GenericTypeParameterBuilder.GetFields(System.Reflection.BindingFlags)\n  - System.Reflection.Emit.GenericTypeParameterBuilder.GetGenericArguments\n  - System.Reflection.Emit.GenericTypeParameterBuilder.GetGenericParameterConstraints\n  - System.Reflection.Emit.GenericTypeParameterBuilder.GetGenericTypeDefinition\n  - System.Reflection.Emit.GenericTypeParameterBuilder.GetHashCode\n  - System.Reflection.Emit.GenericTypeParameterBuilder.GetInterface(System.String,System.Boolean)\n  - System.Reflection.Emit.GenericTypeParameterBuilder.GetInterfaceMap(System.Type)\n  - System.Reflection.Emit.GenericTypeParameterBuilder.GetInterfaces\n  - System.Reflection.Emit.GenericTypeParameterBuilder.GetMember(System.String,System.Reflection.MemberTypes,System.Reflection.BindingFlags)\n  - System.Reflection.Emit.GenericTypeParameterBuilder.GetMembers(System.Reflection.BindingFlags)\n  - System.Reflection.Emit.GenericTypeParameterBuilder.GetMethodImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])\n  - System.Reflection.Emit.GenericTypeParameterBuilder.GetMethods(System.Reflection.BindingFlags)\n  - System.Reflection.Emit.GenericTypeParameterBuilder.GetNestedType(System.String,System.Reflection.BindingFlags)\n  - System.Reflection.Emit.GenericTypeParameterBuilder.GetNestedTypes(System.Reflection.BindingFlags)\n  - System.Reflection.Emit.GenericTypeParameterBuilder.GetProperties(System.Reflection.BindingFlags)\n  - System.Reflection.Emit.GenericTypeParameterBuilder.GetPropertyImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type,System.Type[],System.Reflection.ParameterModifier[])\n  - System.Reflection.Emit.GenericTypeParameterBuilder.GUID\n  - System.Reflection.Emit.GenericTypeParameterBuilder.HasElementTypeImpl\n  - System.Reflection.Emit.GenericTypeParameterBuilder.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])\n  - System.Reflection.Emit.GenericTypeParameterBuilder.IsArrayImpl\n  - System.Reflection.Emit.GenericTypeParameterBuilder.IsAssignableFrom(System.Reflection.TypeInfo)\n  - System.Reflection.Emit.GenericTypeParameterBuilder.IsAssignableFrom(System.Type)\n  - System.Reflection.Emit.GenericTypeParameterBuilder.IsByRefImpl\n  - System.Reflection.Emit.GenericTypeParameterBuilder.IsCOMObjectImpl\n  - System.Reflection.Emit.GenericTypeParameterBuilder.IsConstructedGenericType\n  - System.Reflection.Emit.GenericTypeParameterBuilder.IsDefined(System.Type,System.Boolean)\n  - System.Reflection.Emit.GenericTypeParameterBuilder.IsEnum\n  - System.Reflection.Emit.GenericTypeParameterBuilder.IsGenericParameter\n  - System.Reflection.Emit.GenericTypeParameterBuilder.IsGenericType\n  - System.Reflection.Emit.GenericTypeParameterBuilder.IsGenericTypeDefinition\n  - System.Reflection.Emit.GenericTypeParameterBuilder.IsInstanceOfType(System.Object)\n  - System.Reflection.Emit.GenericTypeParameterBuilder.IsPointerImpl\n  - System.Reflection.Emit.GenericTypeParameterBuilder.IsPrimitiveImpl\n  - System.Reflection.Emit.GenericTypeParameterBuilder.IsSerializable\n  - System.Reflection.Emit.GenericTypeParameterBuilder.IsSubclassOf(System.Type)\n  - System.Reflection.Emit.GenericTypeParameterBuilder.IsSZArray\n  - System.Reflection.Emit.GenericTypeParameterBuilder.IsTypeDefinition\n  - System.Reflection.Emit.GenericTypeParameterBuilder.IsValueTypeImpl\n  - System.Reflection.Emit.GenericTypeParameterBuilder.IsVariableBoundArray\n  - System.Reflection.Emit.GenericTypeParameterBuilder.MakeArrayType\n  - System.Reflection.Emit.GenericTypeParameterBuilder.MakeArrayType(System.Int32)\n  - System.Reflection.Emit.GenericTypeParameterBuilder.MakeByRefType\n  - System.Reflection.Emit.GenericTypeParameterBuilder.MakeGenericType(System.Type[])\n  - System.Reflection.Emit.GenericTypeParameterBuilder.MakePointerType\n  - System.Reflection.Emit.GenericTypeParameterBuilder.Module\n  - System.Reflection.Emit.GenericTypeParameterBuilder.Name\n  - System.Reflection.Emit.GenericTypeParameterBuilder.Namespace\n  - System.Reflection.Emit.GenericTypeParameterBuilder.ReflectedType\n  - System.Reflection.Emit.GenericTypeParameterBuilder.SetBaseTypeConstraint(System.Type)\n  - System.Reflection.Emit.GenericTypeParameterBuilder.SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)\n  - System.Reflection.Emit.GenericTypeParameterBuilder.SetCustomAttribute(System.Reflection.ConstructorInfo,System.Byte[])\n  - System.Reflection.Emit.GenericTypeParameterBuilder.SetGenericParameterAttributes(System.Reflection.GenericParameterAttributes)\n  - System.Reflection.Emit.GenericTypeParameterBuilder.SetInterfaceConstraints(System.Type[])\n  - System.Reflection.Emit.GenericTypeParameterBuilder.ToString\n  - System.Reflection.Emit.GenericTypeParameterBuilder.TypeHandle\n  - System.Reflection.Emit.GenericTypeParameterBuilder.UnderlyingSystemType\n  langs:\n  - csharp\n  name: GenericTypeParameterBuilder\n  nameWithType: GenericTypeParameterBuilder\n  fullName: System.Reflection.Emit.GenericTypeParameterBuilder\n  type: Class\n  assemblies:\n  - System.Reflection.Emit\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Defines and creates generic type parameters for dynamically defined generic types and methods. This class cannot be inherited.\n  remarks: \"You can get an array of <xref:System.Reflection.Emit.GenericTypeParameterBuilder> objects by using the <xref:System.Reflection.Emit.TypeBuilder.DefineGenericParameters%2A?displayProperty=fullName> method to add type parameters to a dynamic type, thus making it a generic type, or by using the <xref:System.Reflection.Emit.MethodBuilder.DefineGenericParameters%2A?displayProperty=fullName> method to add type parameters to a dynamic method. Use the <xref:System.Reflection.Emit.GenericTypeParameterBuilder> objects to add constraints to the type parameters. Constraints are of three kinds:  \\n  \\n-   The base type constraint specifies that any type assigned to the generic type parameter must derive from a particular base type. Set this constraint by using the <xref:System.Reflection.Emit.GenericTypeParameterBuilder.SetBaseTypeConstraint%2A> method.  \\n  \\n-   An interface constraint specifies that any type assigned to the generic type parameter must implement a particular interface. Set the interface constraints by using the <xref:System.Reflection.Emit.GenericTypeParameterBuilder.SetInterfaceConstraints%2A> method.  \\n  \\n-   Special constraints specify that any type assigned to the generic type parameter must have a default constructor, must be a reference type, or must be a value type. Set the special constraints for a type parameter by using the <xref:System.Reflection.Emit.GenericTypeParameterBuilder.SetGenericParameterAttributes%2A> method.  \\n  \\n Interface constraints and special constraints cannot be retrieved using methods of the <xref:System.Reflection.Emit.GenericTypeParameterBuilder> class. Once you have created the generic type that contains the type parameters, you can use its <xref:System.Type> object to reflect the constraints. Use the <xref:System.Type.GetGenericArguments%2A?displayProperty=fullName> method to get the type parameters, and for each type parameter use the <xref:System.Type.GetGenericParameterConstraints%2A?displayProperty=fullName> method to get the base type constraint and interface constraints, and the <xref:System.Type.GenericParameterAttributes%2A?displayProperty=fullName> property to get the special constraints.\"\n  example:\n  - \"The following code example creates a generic type with two type parameters, and saves them in the assembly GenericEmitExample1.dll. You can use the [Ildasm.exe (IL Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md) to view the generated types. For a more detailed explanation of the steps involved in defining a dynamic generic type, see [How to: Define a Generic Type with Reflection Emit](~/docs/framework/reflection-and-codedom/how-to-define-a-generic-type-with-reflection-emit.md).  \\n  \\n [!code-cpp[EmitGenericType#1](~/samples/snippets/cpp/VS_Snippets_CLR/EmitGenericType/CPP/source.cpp#1)]\\n [!code-csharp[EmitGenericType#1](~/samples/snippets/csharp/VS_Snippets_CLR/EmitGenericType/CS/source.cs#1)]\\n [!code-vb[EmitGenericType#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/EmitGenericType/VB/source.vb#1)]\"\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(true)]\n\n      public sealed class GenericTypeParameterBuilder : System.Reflection.TypeInfo\n  inheritance:\n  - System.Object\n  - System.Reflection.MemberInfo\n  - System.Reflection.TypeInfo\n  implements: []\n  inheritedMembers:\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Reflection.MemberInfo.CustomAttributes\n  - System.Reflection.MemberInfo.GetCustomAttributesData\n  - System.Reflection.MemberInfo.MetadataToken\n  - System.Reflection.MemberInfo.op_Equality(System.Reflection.MemberInfo,System.Reflection.MemberInfo)\n  - System.Reflection.MemberInfo.op_Inequality(System.Reflection.MemberInfo,System.Reflection.MemberInfo)\n  - System.Reflection.MemberInfo.System#Reflection#ICustomAttributeProvider#GetCustomAttributes(System.Boolean)\n  - System.Reflection.MemberInfo.System#Reflection#ICustomAttributeProvider#GetCustomAttributes(System.Type,System.Boolean)\n  - System.Reflection.MemberInfo.System#Reflection#ICustomAttributeProvider#IsDefined(System.Type,System.Boolean)\n  - System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)\n  - System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#GetType\n  - System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)\n  - System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#GetTypeInfoCount(System.UInt32@)\n  - System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)\n  - System.Reflection.TypeInfo.AsType\n  - System.Reflection.TypeInfo.DeclaredConstructors\n  - System.Reflection.TypeInfo.DeclaredEvents\n  - System.Reflection.TypeInfo.DeclaredFields\n  - System.Reflection.TypeInfo.DeclaredMembers\n  - System.Reflection.TypeInfo.DeclaredMethods\n  - System.Reflection.TypeInfo.DeclaredNestedTypes\n  - System.Reflection.TypeInfo.DeclaredProperties\n  - System.Reflection.TypeInfo.FindInterfaces(System.Reflection.TypeFilter,System.Object)\n  - System.Reflection.TypeInfo.FindMembers(System.Reflection.MemberTypes,System.Reflection.BindingFlags,System.Reflection.MemberFilter,System.Object)\n  - System.Reflection.TypeInfo.GenericTypeParameters\n  - System.Reflection.TypeInfo.GetConstructor(System.Type[])\n  - System.Reflection.TypeInfo.GetConstructors\n  - System.Reflection.TypeInfo.GetDeclaredEvent(System.String)\n  - System.Reflection.TypeInfo.GetDeclaredField(System.String)\n  - System.Reflection.TypeInfo.GetDeclaredMethod(System.String)\n  - System.Reflection.TypeInfo.GetDeclaredMethods(System.String)\n  - System.Reflection.TypeInfo.GetDeclaredNestedType(System.String)\n  - System.Reflection.TypeInfo.GetDeclaredProperty(System.String)\n  - System.Reflection.TypeInfo.GetDefaultMembers\n  - System.Reflection.TypeInfo.GetEnumName(System.Object)\n  - System.Reflection.TypeInfo.GetEnumNames\n  - System.Reflection.TypeInfo.GetEnumUnderlyingType\n  - System.Reflection.TypeInfo.GetEnumValues\n  - System.Reflection.TypeInfo.GetEvent(System.String)\n  - System.Reflection.TypeInfo.GetField(System.String)\n  - System.Reflection.TypeInfo.GetFields\n  - System.Reflection.TypeInfo.GetInterface(System.String)\n  - System.Reflection.TypeInfo.GetMember(System.String)\n  - System.Reflection.TypeInfo.GetMember(System.String,System.Reflection.BindingFlags)\n  - System.Reflection.TypeInfo.GetMembers\n  - System.Reflection.TypeInfo.GetMethod(System.String)\n  - System.Reflection.TypeInfo.GetMethod(System.String,System.Reflection.BindingFlags)\n  - System.Reflection.TypeInfo.GetMethod(System.String,System.Type[])\n  - System.Reflection.TypeInfo.GetMethod(System.String,System.Type[],System.Reflection.ParameterModifier[])\n  - System.Reflection.TypeInfo.GetMethods\n  - System.Reflection.TypeInfo.GetNestedType(System.String)\n  - System.Reflection.TypeInfo.GetNestedTypes\n  - System.Reflection.TypeInfo.GetProperties\n  - System.Reflection.TypeInfo.GetProperty(System.String)\n  - System.Reflection.TypeInfo.GetProperty(System.String,System.Reflection.BindingFlags)\n  - System.Reflection.TypeInfo.GetProperty(System.String,System.Type)\n  - System.Reflection.TypeInfo.GetProperty(System.String,System.Type,System.Type[])\n  - System.Reflection.TypeInfo.GetProperty(System.String,System.Type,System.Type[],System.Reflection.ParameterModifier[])\n  - System.Reflection.TypeInfo.GetProperty(System.String,System.Type[])\n  - System.Reflection.TypeInfo.HasElementType\n  - System.Reflection.TypeInfo.ImplementedInterfaces\n  - System.Reflection.TypeInfo.IsAbstract\n  - System.Reflection.TypeInfo.IsAnsiClass\n  - System.Reflection.TypeInfo.IsArray\n  - System.Reflection.TypeInfo.IsAutoClass\n  - System.Reflection.TypeInfo.IsAutoLayout\n  - System.Reflection.TypeInfo.IsByRef\n  - System.Reflection.TypeInfo.IsClass\n  - System.Reflection.TypeInfo.IsCOMObject\n  - System.Reflection.TypeInfo.IsEnumDefined(System.Object)\n  - System.Reflection.TypeInfo.IsEquivalentTo(System.Type)\n  - System.Reflection.TypeInfo.IsExplicitLayout\n  - System.Reflection.TypeInfo.IsImport\n  - System.Reflection.TypeInfo.IsInterface\n  - System.Reflection.TypeInfo.IsLayoutSequential\n  - System.Reflection.TypeInfo.IsMarshalByRef\n  - System.Reflection.TypeInfo.IsNested\n  - System.Reflection.TypeInfo.IsNestedAssembly\n  - System.Reflection.TypeInfo.IsNestedFamANDAssem\n  - System.Reflection.TypeInfo.IsNestedFamily\n  - System.Reflection.TypeInfo.IsNestedFamORAssem\n  - System.Reflection.TypeInfo.IsNestedPrivate\n  - System.Reflection.TypeInfo.IsNestedPublic\n  - System.Reflection.TypeInfo.IsNotPublic\n  - System.Reflection.TypeInfo.IsPointer\n  - System.Reflection.TypeInfo.IsPrimitive\n  - System.Reflection.TypeInfo.IsPublic\n  - System.Reflection.TypeInfo.IsSealed\n  - System.Reflection.TypeInfo.IsSpecialName\n  - System.Reflection.TypeInfo.IsUnicodeClass\n  - System.Reflection.TypeInfo.IsValueType\n  - System.Reflection.TypeInfo.IsVisible\n  - System.Reflection.TypeInfo.MemberType\n  - System.Reflection.TypeInfo.StructLayoutAttribute\n  - System.Reflection.TypeInfo.System#Reflection#IReflectableType#GetTypeInfo\n  - System.Reflection.TypeInfo.TypeInitializer\n  extensionMethods:\n  - System.Reflection.CustomAttributeExtensions.GetCustomAttribute(System.Reflection.MemberInfo,System.Type)\n  - System.Reflection.CustomAttributeExtensions.GetCustomAttribute(System.Reflection.MemberInfo,System.Type,System.Boolean)\n  - System.Reflection.CustomAttributeExtensions.GetCustomAttribute``1(System.Reflection.MemberInfo)\n  - System.Reflection.CustomAttributeExtensions.GetCustomAttribute``1(System.Reflection.MemberInfo,System.Boolean)\n  - System.Reflection.CustomAttributeExtensions.GetCustomAttributes(System.Reflection.MemberInfo)\n  - System.Reflection.CustomAttributeExtensions.GetCustomAttributes(System.Reflection.MemberInfo,System.Boolean)\n  - System.Reflection.CustomAttributeExtensions.GetCustomAttributes(System.Reflection.MemberInfo,System.Type)\n  - System.Reflection.CustomAttributeExtensions.GetCustomAttributes(System.Reflection.MemberInfo,System.Type,System.Boolean)\n  - System.Reflection.CustomAttributeExtensions.GetCustomAttributes``1(System.Reflection.MemberInfo)\n  - System.Reflection.CustomAttributeExtensions.GetCustomAttributes``1(System.Reflection.MemberInfo,System.Boolean)\n  - System.Reflection.CustomAttributeExtensions.IsDefined(System.Reflection.MemberInfo,System.Type)\n  - System.Reflection.CustomAttributeExtensions.IsDefined(System.Reflection.MemberInfo,System.Type,System.Boolean)\n  - System.Reflection.MemberInfoExtensions.GetMetadataToken(System.Reflection.MemberInfo)\n  - System.Reflection.MemberInfoExtensions.HasMetadataToken(System.Reflection.MemberInfo)\n  - System.Reflection.RuntimeReflectionExtensions.GetRuntimeInterfaceMap(System.Reflection.TypeInfo,System.Type)\n  attributes:\n  - type: System.Runtime.InteropServices.ComVisibleAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/GenericTypeParameterBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.GenericTypeParameterBuilder.#ctor\n  commentId: M:System.Reflection.Emit.GenericTypeParameterBuilder.#ctor\n  id: '#ctor'\n  parent: System.Reflection.Emit.GenericTypeParameterBuilder\n  langs:\n  - csharp\n  name: GenericTypeParameterBuilder()\n  nameWithType: GenericTypeParameterBuilder.GenericTypeParameterBuilder()\n  fullName: GenericTypeParameterBuilder.GenericTypeParameterBuilder()\n  type: Constructor\n  assemblies:\n  - mscorlib\n  namespace: System.Reflection.Emit\n  syntax:\n    content: protected GenericTypeParameterBuilder ();\n    parameters: []\n  overload: System.Reflection.Emit.GenericTypeParameterBuilder.#ctor*\n  exceptions: []\n  version:\n  - xamarinios-10.8\n  monikers:\n  - xamarinios-10.8\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/GenericTypeParameterBuilder.xml\n- uid: System.Reflection.Emit.GenericTypeParameterBuilder.Assembly\n  commentId: P:System.Reflection.Emit.GenericTypeParameterBuilder.Assembly\n  id: Assembly\n  parent: System.Reflection.Emit.GenericTypeParameterBuilder\n  langs:\n  - csharp\n  name: Assembly\n  nameWithType: GenericTypeParameterBuilder.Assembly\n  fullName: GenericTypeParameterBuilder.Assembly\n  type: Property\n  assemblies:\n  - System.Reflection.Emit\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Gets an <xref href=\"System.Reflection.Assembly\"></xref> object representing the dynamic assembly that contains the generic type definition the current type parameter belongs to.\n  syntax:\n    content: public override System.Reflection.Assembly Assembly { get; }\n    return:\n      type: System.Reflection.Assembly\n      description: An <xref href=\"System.Reflection.Assembly\"></xref> object representing the dynamic assembly that contains the generic type definition the current type parameter belongs to.\n  overload: System.Reflection.Emit.GenericTypeParameterBuilder.Assembly*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/GenericTypeParameterBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.GenericTypeParameterBuilder.AssemblyQualifiedName\n  commentId: P:System.Reflection.Emit.GenericTypeParameterBuilder.AssemblyQualifiedName\n  id: AssemblyQualifiedName\n  parent: System.Reflection.Emit.GenericTypeParameterBuilder\n  langs:\n  - csharp\n  name: AssemblyQualifiedName\n  nameWithType: GenericTypeParameterBuilder.AssemblyQualifiedName\n  fullName: GenericTypeParameterBuilder.AssemblyQualifiedName\n  type: Property\n  assemblies:\n  - System.Reflection.Emit\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Gets `null` in all cases.\n  remarks: There is no assembly-qualified name for type parameters because their scope is limited to the generic type that declares them.\n  syntax:\n    content: public override string AssemblyQualifiedName { get; }\n    return:\n      type: System.String\n      description: A null reference (`Nothing` in Visual Basic) in all cases.\n  overload: System.Reflection.Emit.GenericTypeParameterBuilder.AssemblyQualifiedName*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/GenericTypeParameterBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.GenericTypeParameterBuilder.Attributes\n  commentId: P:System.Reflection.Emit.GenericTypeParameterBuilder.Attributes\n  id: Attributes\n  parent: System.Reflection.Emit.GenericTypeParameterBuilder\n  langs:\n  - csharp\n  name: Attributes\n  nameWithType: GenericTypeParameterBuilder.Attributes\n  fullName: GenericTypeParameterBuilder.Attributes\n  type: Property\n  assemblies:\n  - System.Reflection.Emit\n  namespace: System.Reflection.Emit\n  syntax:\n    content: public override System.Reflection.TypeAttributes Attributes { get; }\n    return:\n      type: System.Reflection.TypeAttributes\n      description: ''\n  overload: System.Reflection.Emit.GenericTypeParameterBuilder.Attributes*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/GenericTypeParameterBuilder.xml\n- uid: System.Reflection.Emit.GenericTypeParameterBuilder.BaseType\n  commentId: P:System.Reflection.Emit.GenericTypeParameterBuilder.BaseType\n  id: BaseType\n  parent: System.Reflection.Emit.GenericTypeParameterBuilder\n  langs:\n  - csharp\n  name: BaseType\n  nameWithType: GenericTypeParameterBuilder.BaseType\n  fullName: GenericTypeParameterBuilder.BaseType\n  type: Property\n  assemblies:\n  - System.Reflection.Emit\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Gets the base type constraint of the current generic type parameter.\n  remarks: To set the base type constraint, use the <xref:System.Reflection.Emit.GenericTypeParameterBuilder.SetBaseTypeConstraint%2A> method.\n  syntax:\n    content: public override Type BaseType { get; }\n    return:\n      type: System.Type\n      description: A <xref href=\"System.Type\"></xref> object that represents the base type constraint of the generic type parameter, or `null` if the type parameter has no base type constraint.\n  overload: System.Reflection.Emit.GenericTypeParameterBuilder.BaseType*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/GenericTypeParameterBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.GenericTypeParameterBuilder.ContainsGenericParameters\n  commentId: P:System.Reflection.Emit.GenericTypeParameterBuilder.ContainsGenericParameters\n  id: ContainsGenericParameters\n  parent: System.Reflection.Emit.GenericTypeParameterBuilder\n  langs:\n  - csharp\n  name: ContainsGenericParameters\n  nameWithType: GenericTypeParameterBuilder.ContainsGenericParameters\n  fullName: GenericTypeParameterBuilder.ContainsGenericParameters\n  type: Property\n  assemblies:\n  - System.Reflection.Emit\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Gets `true` in all cases.\n  remarks: A <xref:System.Reflection.Emit.GenericTypeParameterBuilder> object always represents a generic type parameter. The value of the <xref:System.Reflection.Emit.GenericTypeParameterBuilder.ContainsGenericParameters%2A> property reflects that fact and does not imply anything about any generic type argument that might be assigned to the type parameter.\n  syntax:\n    content: public override bool ContainsGenericParameters { get; }\n    return:\n      type: System.Boolean\n      description: '`true` in all cases.'\n  overload: System.Reflection.Emit.GenericTypeParameterBuilder.ContainsGenericParameters*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/GenericTypeParameterBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.GenericTypeParameterBuilder.DeclaringMethod\n  commentId: P:System.Reflection.Emit.GenericTypeParameterBuilder.DeclaringMethod\n  id: DeclaringMethod\n  parent: System.Reflection.Emit.GenericTypeParameterBuilder\n  langs:\n  - csharp\n  name: DeclaringMethod\n  nameWithType: GenericTypeParameterBuilder.DeclaringMethod\n  fullName: GenericTypeParameterBuilder.DeclaringMethod\n  type: Property\n  assemblies:\n  - System.Reflection.Emit\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Gets a <xref href=\"System.Reflection.MethodInfo\"></xref> that represents the declaring method, if the current <xref href=\"System.Reflection.Emit.GenericTypeParameterBuilder\"></xref> represents a type parameter of a generic method.\n  remarks: If the <xref:System.Reflection.Emit.GenericTypeParameterBuilder.DeclaringMethod%2A> property is not `null`, then the declaring method is a generic method definition and `DeclaringMethod.IsGenericMethodDefinition` is `true`.\n  syntax:\n    content: public override System.Reflection.MethodBase DeclaringMethod { get; }\n    return:\n      type: System.Reflection.MethodBase\n      description: A <xref href=\"System.Reflection.MethodInfo\"></xref> that represents the declaring method, if the current <xref href=\"System.Reflection.Emit.GenericTypeParameterBuilder\"></xref> represents a type parameter of a generic method; otherwise, `null`.\n  overload: System.Reflection.Emit.GenericTypeParameterBuilder.DeclaringMethod*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/GenericTypeParameterBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.GenericTypeParameterBuilder.DeclaringType\n  commentId: P:System.Reflection.Emit.GenericTypeParameterBuilder.DeclaringType\n  id: DeclaringType\n  parent: System.Reflection.Emit.GenericTypeParameterBuilder\n  langs:\n  - csharp\n  name: DeclaringType\n  nameWithType: GenericTypeParameterBuilder.DeclaringType\n  fullName: GenericTypeParameterBuilder.DeclaringType\n  type: Property\n  assemblies:\n  - System.Reflection.Emit\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Gets the generic type definition or generic method definition to which the generic type parameter belongs.\n  remarks: The declaring type is not necessarily a generic type. If the current type parameter belongs to a generic method, the type in which the method is declared might not be generic.\n  syntax:\n    content: public override Type DeclaringType { get; }\n    return:\n      type: System.Type\n      description: If the type parameter belongs to a generic type, a <xref href=\"System.Type\"></xref> object representing that generic type; if the type parameter belongs to a generic method, a <xref href=\"System.Type\"></xref> object representing that type that declared that generic method.\n  overload: System.Reflection.Emit.GenericTypeParameterBuilder.DeclaringType*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/GenericTypeParameterBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.GenericTypeParameterBuilder.Equals(System.Object)\n  commentId: M:System.Reflection.Emit.GenericTypeParameterBuilder.Equals(System.Object)\n  id: Equals(System.Object)\n  parent: System.Reflection.Emit.GenericTypeParameterBuilder\n  langs:\n  - csharp\n  name: Equals(Object)\n  nameWithType: GenericTypeParameterBuilder.Equals(Object)\n  fullName: GenericTypeParameterBuilder.Equals(Object)\n  type: Method\n  assemblies:\n  - System.Reflection.Emit\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Tests whether the given object is an instance of `EventToken` and is equal to the current instance.\n  syntax:\n    content: public override bool Equals (object o);\n    parameters:\n    - id: o\n      type: System.Object\n      description: The object to be compared with the current instance.\n    return:\n      type: System.Boolean\n      description: Returns `true` if <code>o</code> is an instance of `EventToken` and equals the current instance; otherwise, `false`.\n  overload: System.Reflection.Emit.GenericTypeParameterBuilder.Equals*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/GenericTypeParameterBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.GenericTypeParameterBuilder.FullName\n  commentId: P:System.Reflection.Emit.GenericTypeParameterBuilder.FullName\n  id: FullName\n  parent: System.Reflection.Emit.GenericTypeParameterBuilder\n  langs:\n  - csharp\n  name: FullName\n  nameWithType: GenericTypeParameterBuilder.FullName\n  fullName: GenericTypeParameterBuilder.FullName\n  type: Property\n  assemblies:\n  - System.Reflection.Emit\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Gets `null` in all cases.\n  remarks: A generic type parameter does not have a full name, because its scope is limited to the generic type that declares it.\n  syntax:\n    content: public override string FullName { get; }\n    return:\n      type: System.String\n      description: A null reference (`Nothing` in Visual Basic) in all cases.\n  overload: System.Reflection.Emit.GenericTypeParameterBuilder.FullName*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/GenericTypeParameterBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.GenericTypeParameterBuilder.GenericParameterAttributes\n  commentId: P:System.Reflection.Emit.GenericTypeParameterBuilder.GenericParameterAttributes\n  id: GenericParameterAttributes\n  parent: System.Reflection.Emit.GenericTypeParameterBuilder\n  langs:\n  - csharp\n  name: GenericParameterAttributes\n  nameWithType: GenericTypeParameterBuilder.GenericParameterAttributes\n  fullName: GenericTypeParameterBuilder.GenericParameterAttributes\n  type: Property\n  assemblies:\n  - System.Reflection.Emit\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Gets a combination of <xref href=\"System.Reflection.GenericParameterAttributes\"></xref> flags that describe the covariance and special constraints of the current generic type parameter.\n  syntax:\n    content: public override System.Reflection.GenericParameterAttributes GenericParameterAttributes { get; }\n    return:\n      type: System.Reflection.GenericParameterAttributes\n      description: A bitwise combination of values that describes the covariance and special constraints of the current generic type parameter.\n  overload: System.Reflection.Emit.GenericTypeParameterBuilder.GenericParameterAttributes*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/GenericTypeParameterBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.GenericTypeParameterBuilder.GenericParameterPosition\n  commentId: P:System.Reflection.Emit.GenericTypeParameterBuilder.GenericParameterPosition\n  id: GenericParameterPosition\n  parent: System.Reflection.Emit.GenericTypeParameterBuilder\n  langs:\n  - csharp\n  name: GenericParameterPosition\n  nameWithType: GenericTypeParameterBuilder.GenericParameterPosition\n  fullName: GenericTypeParameterBuilder.GenericParameterPosition\n  type: Property\n  assemblies:\n  - System.Reflection.Emit\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Gets the position of the type parameter in the type parameter list of the generic type or method that declared the parameter.\n  syntax:\n    content: public override int GenericParameterPosition { get; }\n    return:\n      type: System.Int32\n      description: The position of the type parameter in the type parameter list of the generic type or method that declared the parameter.\n  overload: System.Reflection.Emit.GenericTypeParameterBuilder.GenericParameterPosition*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/GenericTypeParameterBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.GenericTypeParameterBuilder.GenericTypeArguments\n  commentId: P:System.Reflection.Emit.GenericTypeParameterBuilder.GenericTypeArguments\n  id: GenericTypeArguments\n  parent: System.Reflection.Emit.GenericTypeParameterBuilder\n  langs:\n  - csharp\n  name: GenericTypeArguments\n  nameWithType: GenericTypeParameterBuilder.GenericTypeArguments\n  fullName: GenericTypeParameterBuilder.GenericTypeArguments\n  type: Property\n  assemblies:\n  - System.Reflection.Emit\n  namespace: System.Reflection.Emit\n  syntax:\n    content: public override Type[] GenericTypeArguments { get; }\n    return:\n      type: System.Type[]\n      description: ''\n  overload: System.Reflection.Emit.GenericTypeParameterBuilder.GenericTypeArguments*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/GenericTypeParameterBuilder.xml\n- uid: System.Reflection.Emit.GenericTypeParameterBuilder.GetArrayRank\n  commentId: M:System.Reflection.Emit.GenericTypeParameterBuilder.GetArrayRank\n  id: GetArrayRank\n  parent: System.Reflection.Emit.GenericTypeParameterBuilder\n  langs:\n  - csharp\n  name: GetArrayRank()\n  nameWithType: GenericTypeParameterBuilder.GetArrayRank()\n  fullName: GenericTypeParameterBuilder.GetArrayRank()\n  type: Method\n  assemblies:\n  - System.Reflection.Emit\n  namespace: System.Reflection.Emit\n  syntax:\n    content: public override int GetArrayRank ();\n    parameters: []\n    return:\n      type: System.Int32\n      description: ''\n  overload: System.Reflection.Emit.GenericTypeParameterBuilder.GetArrayRank*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/GenericTypeParameterBuilder.xml\n- uid: System.Reflection.Emit.GenericTypeParameterBuilder.GetAttributeFlagsImpl\n  commentId: M:System.Reflection.Emit.GenericTypeParameterBuilder.GetAttributeFlagsImpl\n  id: GetAttributeFlagsImpl\n  parent: System.Reflection.Emit.GenericTypeParameterBuilder\n  langs:\n  - csharp\n  name: GetAttributeFlagsImpl()\n  nameWithType: GenericTypeParameterBuilder.GetAttributeFlagsImpl()\n  fullName: GenericTypeParameterBuilder.GetAttributeFlagsImpl()\n  type: Method\n  assemblies:\n  - mscorlib\n  - System.Reflection.Emit\n  namespace: System.Reflection.Emit\n  syntax:\n    content: protected override System.Reflection.TypeAttributes GetAttributeFlagsImpl ();\n    parameters: []\n    return:\n      type: System.Reflection.TypeAttributes\n      description: ''\n  overload: System.Reflection.Emit.GenericTypeParameterBuilder.GetAttributeFlagsImpl*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/GenericTypeParameterBuilder.xml\n- uid: System.Reflection.Emit.GenericTypeParameterBuilder.GetConstructorImpl(System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])\n  commentId: M:System.Reflection.Emit.GenericTypeParameterBuilder.GetConstructorImpl(System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])\n  id: GetConstructorImpl(System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])\n  parent: System.Reflection.Emit.GenericTypeParameterBuilder\n  langs:\n  - csharp\n  name: GetConstructorImpl(BindingFlags, Binder, CallingConventions, Type[], ParameterModifier[])\n  nameWithType: GenericTypeParameterBuilder.GetConstructorImpl(BindingFlags, Binder, CallingConventions, Type[], ParameterModifier[])\n  fullName: GenericTypeParameterBuilder.GetConstructorImpl(BindingFlags, Binder, CallingConventions, Type[], ParameterModifier[])\n  type: Method\n  assemblies:\n  - mscorlib\n  - System.Reflection.Emit\n  namespace: System.Reflection.Emit\n  syntax:\n    content: protected override System.Reflection.ConstructorInfo GetConstructorImpl (System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, System.Reflection.CallingConventions callConvention, Type[] types, System.Reflection.ParameterModifier[] modifiers);\n    parameters:\n    - id: bindingAttr\n      type: System.Reflection.BindingFlags\n      description: ''\n    - id: binder\n      type: System.Reflection.Binder\n      description: ''\n    - id: callConvention\n      type: System.Reflection.CallingConventions\n      description: ''\n    - id: types\n      type: System.Type[]\n      description: ''\n    - id: modifiers\n      type: System.Reflection.ParameterModifier[]\n      description: ''\n    return:\n      type: System.Reflection.ConstructorInfo\n      description: ''\n  overload: System.Reflection.Emit.GenericTypeParameterBuilder.GetConstructorImpl*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/GenericTypeParameterBuilder.xml\n- uid: System.Reflection.Emit.GenericTypeParameterBuilder.GetConstructors(System.Reflection.BindingFlags)\n  commentId: M:System.Reflection.Emit.GenericTypeParameterBuilder.GetConstructors(System.Reflection.BindingFlags)\n  id: GetConstructors(System.Reflection.BindingFlags)\n  parent: System.Reflection.Emit.GenericTypeParameterBuilder\n  langs:\n  - csharp\n  name: GetConstructors(BindingFlags)\n  nameWithType: GenericTypeParameterBuilder.GetConstructors(BindingFlags)\n  fullName: GenericTypeParameterBuilder.GetConstructors(BindingFlags)\n  type: Method\n  assemblies:\n  - mscorlib\n  - System.Reflection.Emit\n  namespace: System.Reflection.Emit\n  summary: Not supported for incomplete generic type parameters.\n  remarks: This method is not supported for incomplete generic type parameters. Retrieve the type parameter from the completed generic type definition and then use reflection on the retrieved type.\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(true)]\n\n      public override System.Reflection.ConstructorInfo[] GetConstructors (System.Reflection.BindingFlags bindingAttr);\n    parameters:\n    - id: bindingAttr\n      type: System.Reflection.BindingFlags\n      description: Not supported.\n    return:\n      type: System.Reflection.ConstructorInfo[]\n      description: Not supported for incomplete generic type parameters.\n  overload: System.Reflection.Emit.GenericTypeParameterBuilder.GetConstructors*\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: In all cases.\n  attributes:\n  - type: System.Runtime.InteropServices.ComVisibleAttribute\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/GenericTypeParameterBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.GenericTypeParameterBuilder.GetCustomAttributes(System.Boolean)\n  commentId: M:System.Reflection.Emit.GenericTypeParameterBuilder.GetCustomAttributes(System.Boolean)\n  id: GetCustomAttributes(System.Boolean)\n  parent: System.Reflection.Emit.GenericTypeParameterBuilder\n  langs:\n  - csharp\n  name: GetCustomAttributes(Boolean)\n  nameWithType: GenericTypeParameterBuilder.GetCustomAttributes(Boolean)\n  fullName: GenericTypeParameterBuilder.GetCustomAttributes(Boolean)\n  type: Method\n  assemblies:\n  - mscorlib\n  - System.Reflection.Emit\n  namespace: System.Reflection.Emit\n  summary: Not supported for incomplete generic type parameters.\n  remarks: This method is not supported for incomplete generic type parameters. Retrieve the type parameter from the completed generic type definition and then use reflection on the retrieved type.\n  syntax:\n    content: public override object[] GetCustomAttributes (bool inherit);\n    parameters:\n    - id: inherit\n      type: System.Boolean\n      description: Specifies whether to search this member's inheritance chain to find the attributes.\n    return:\n      type: System.Object[]\n      description: Not supported for incomplete generic type parameters.\n  overload: System.Reflection.Emit.GenericTypeParameterBuilder.GetCustomAttributes*\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: In all cases.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/GenericTypeParameterBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.GenericTypeParameterBuilder.GetCustomAttributes(System.Type,System.Boolean)\n  commentId: M:System.Reflection.Emit.GenericTypeParameterBuilder.GetCustomAttributes(System.Type,System.Boolean)\n  id: GetCustomAttributes(System.Type,System.Boolean)\n  parent: System.Reflection.Emit.GenericTypeParameterBuilder\n  langs:\n  - csharp\n  name: GetCustomAttributes(Type, Boolean)\n  nameWithType: GenericTypeParameterBuilder.GetCustomAttributes(Type, Boolean)\n  fullName: GenericTypeParameterBuilder.GetCustomAttributes(Type, Boolean)\n  type: Method\n  assemblies:\n  - mscorlib\n  - System.Reflection.Emit\n  namespace: System.Reflection.Emit\n  summary: Not supported for incomplete generic type parameters.\n  remarks: This method is not supported for incomplete generic type parameters. Retrieve the type parameter from the completed generic type definition and then use reflection on the retrieved type.\n  syntax:\n    content: public override object[] GetCustomAttributes (Type attributeType, bool inherit);\n    parameters:\n    - id: attributeType\n      type: System.Type\n      description: The type of attribute to search for. Only attributes that are assignable to this type are returned.\n    - id: inherit\n      type: System.Boolean\n      description: Specifies whether to search this member's inheritance chain to find the attributes.\n    return:\n      type: System.Object[]\n      description: Not supported for incomplete generic type parameters.\n  overload: System.Reflection.Emit.GenericTypeParameterBuilder.GetCustomAttributes*\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: In all cases.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/GenericTypeParameterBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.GenericTypeParameterBuilder.GetElementType\n  commentId: M:System.Reflection.Emit.GenericTypeParameterBuilder.GetElementType\n  id: GetElementType\n  parent: System.Reflection.Emit.GenericTypeParameterBuilder\n  langs:\n  - csharp\n  name: GetElementType()\n  nameWithType: GenericTypeParameterBuilder.GetElementType()\n  fullName: GenericTypeParameterBuilder.GetElementType()\n  type: Method\n  assemblies:\n  - System.Reflection.Emit\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Throws a <xref href=\"System.NotSupportedException\"></xref> in all cases.\n  remarks: A generic type parameter is a placeholder for a type. Because that type cannot be known in advance, there is no way to know whether it has an element type or what that element type might be. Any return value would be misleading, so the method throws a <xref:System.NotSupportedException>.\n  syntax:\n    content: public override Type GetElementType ();\n    parameters: []\n    return:\n      type: System.Type\n      description: The type referred to by the current array type, pointer type, or `ByRef` type; or `null` if the current type is not an array type, is not a pointer type, and is not passed by reference.\n  overload: System.Reflection.Emit.GenericTypeParameterBuilder.GetElementType*\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: In all cases.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/GenericTypeParameterBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.GenericTypeParameterBuilder.GetEvent(System.String,System.Reflection.BindingFlags)\n  commentId: M:System.Reflection.Emit.GenericTypeParameterBuilder.GetEvent(System.String,System.Reflection.BindingFlags)\n  id: GetEvent(System.String,System.Reflection.BindingFlags)\n  parent: System.Reflection.Emit.GenericTypeParameterBuilder\n  langs:\n  - csharp\n  name: GetEvent(String, BindingFlags)\n  nameWithType: GenericTypeParameterBuilder.GetEvent(String, BindingFlags)\n  fullName: GenericTypeParameterBuilder.GetEvent(String, BindingFlags)\n  type: Method\n  assemblies:\n  - mscorlib\n  - System.Reflection.Emit\n  namespace: System.Reflection.Emit\n  summary: Not supported for incomplete generic type parameters.\n  remarks: This method is not supported for incomplete generic type parameters. Retrieve the type parameter from the completed generic type definition and then use reflection on the retrieved type.\n  syntax:\n    content: public override System.Reflection.EventInfo GetEvent (string name, System.Reflection.BindingFlags bindingAttr);\n    parameters:\n    - id: name\n      type: System.String\n      description: Not supported.\n    - id: bindingAttr\n      type: System.Reflection.BindingFlags\n      description: Not supported.\n    return:\n      type: System.Reflection.EventInfo\n      description: Not supported for incomplete generic type parameters.\n  overload: System.Reflection.Emit.GenericTypeParameterBuilder.GetEvent*\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: In all cases.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/GenericTypeParameterBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.GenericTypeParameterBuilder.GetEvents\n  commentId: M:System.Reflection.Emit.GenericTypeParameterBuilder.GetEvents\n  id: GetEvents\n  parent: System.Reflection.Emit.GenericTypeParameterBuilder\n  langs:\n  - csharp\n  name: GetEvents()\n  nameWithType: GenericTypeParameterBuilder.GetEvents()\n  fullName: GenericTypeParameterBuilder.GetEvents()\n  type: Method\n  assemblies:\n  - mscorlib\n  - System.Reflection.Emit\n  namespace: System.Reflection.Emit\n  summary: Not supported for incomplete generic type parameters.\n  remarks: This method is not supported for incomplete generic type parameters. Retrieve the type parameter from the completed generic type definition and then use reflection on the retrieved type.\n  syntax:\n    content: public override System.Reflection.EventInfo[] GetEvents ();\n    parameters: []\n    return:\n      type: System.Reflection.EventInfo[]\n      description: Not supported for incomplete generic type parameters.\n  overload: System.Reflection.Emit.GenericTypeParameterBuilder.GetEvents*\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: In all cases.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/GenericTypeParameterBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.GenericTypeParameterBuilder.GetEvents(System.Reflection.BindingFlags)\n  commentId: M:System.Reflection.Emit.GenericTypeParameterBuilder.GetEvents(System.Reflection.BindingFlags)\n  id: GetEvents(System.Reflection.BindingFlags)\n  parent: System.Reflection.Emit.GenericTypeParameterBuilder\n  langs:\n  - csharp\n  name: GetEvents(BindingFlags)\n  nameWithType: GenericTypeParameterBuilder.GetEvents(BindingFlags)\n  fullName: GenericTypeParameterBuilder.GetEvents(BindingFlags)\n  type: Method\n  assemblies:\n  - mscorlib\n  - System.Reflection.Emit\n  namespace: System.Reflection.Emit\n  summary: Not supported for incomplete generic type parameters.\n  remarks: This method is not supported for incomplete generic type parameters. Retrieve the type parameter from the completed generic type definition and then use reflection on the retrieved type.\n  syntax:\n    content: public override System.Reflection.EventInfo[] GetEvents (System.Reflection.BindingFlags bindingAttr);\n    parameters:\n    - id: bindingAttr\n      type: System.Reflection.BindingFlags\n      description: Not supported.\n    return:\n      type: System.Reflection.EventInfo[]\n      description: Not supported for incomplete generic type parameters.\n  overload: System.Reflection.Emit.GenericTypeParameterBuilder.GetEvents*\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: In all cases.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/GenericTypeParameterBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.GenericTypeParameterBuilder.GetField(System.String,System.Reflection.BindingFlags)\n  commentId: M:System.Reflection.Emit.GenericTypeParameterBuilder.GetField(System.String,System.Reflection.BindingFlags)\n  id: GetField(System.String,System.Reflection.BindingFlags)\n  parent: System.Reflection.Emit.GenericTypeParameterBuilder\n  langs:\n  - csharp\n  name: GetField(String, BindingFlags)\n  nameWithType: GenericTypeParameterBuilder.GetField(String, BindingFlags)\n  fullName: GenericTypeParameterBuilder.GetField(String, BindingFlags)\n  type: Method\n  assemblies:\n  - mscorlib\n  - System.Reflection.Emit\n  namespace: System.Reflection.Emit\n  summary: Not supported for incomplete generic type parameters.\n  remarks: This method is not supported for incomplete generic type parameters. Retrieve the type parameter from the completed generic type definition and then use reflection on the retrieved type.\n  syntax:\n    content: public override System.Reflection.FieldInfo GetField (string name, System.Reflection.BindingFlags bindingAttr);\n    parameters:\n    - id: name\n      type: System.String\n      description: Not supported.\n    - id: bindingAttr\n      type: System.Reflection.BindingFlags\n      description: Not supported.\n    return:\n      type: System.Reflection.FieldInfo\n      description: Not supported for incomplete generic type parameters.\n  overload: System.Reflection.Emit.GenericTypeParameterBuilder.GetField*\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: In all cases.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/GenericTypeParameterBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.GenericTypeParameterBuilder.GetFields(System.Reflection.BindingFlags)\n  commentId: M:System.Reflection.Emit.GenericTypeParameterBuilder.GetFields(System.Reflection.BindingFlags)\n  id: GetFields(System.Reflection.BindingFlags)\n  parent: System.Reflection.Emit.GenericTypeParameterBuilder\n  langs:\n  - csharp\n  name: GetFields(BindingFlags)\n  nameWithType: GenericTypeParameterBuilder.GetFields(BindingFlags)\n  fullName: GenericTypeParameterBuilder.GetFields(BindingFlags)\n  type: Method\n  assemblies:\n  - mscorlib\n  - System.Reflection.Emit\n  namespace: System.Reflection.Emit\n  summary: Not supported for incomplete generic type parameters.\n  remarks: This method is not supported for incomplete generic type parameters. Retrieve the type parameter from the completed generic type definition and then use reflection on the retrieved type.\n  syntax:\n    content: public override System.Reflection.FieldInfo[] GetFields (System.Reflection.BindingFlags bindingAttr);\n    parameters:\n    - id: bindingAttr\n      type: System.Reflection.BindingFlags\n      description: Not supported.\n    return:\n      type: System.Reflection.FieldInfo[]\n      description: Not supported for incomplete generic type parameters.\n  overload: System.Reflection.Emit.GenericTypeParameterBuilder.GetFields*\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: In all cases.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/GenericTypeParameterBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.GenericTypeParameterBuilder.GetGenericArguments\n  commentId: M:System.Reflection.Emit.GenericTypeParameterBuilder.GetGenericArguments\n  id: GetGenericArguments\n  parent: System.Reflection.Emit.GenericTypeParameterBuilder\n  langs:\n  - csharp\n  name: GetGenericArguments()\n  nameWithType: GenericTypeParameterBuilder.GetGenericArguments()\n  fullName: GenericTypeParameterBuilder.GetGenericArguments()\n  type: Method\n  assemblies:\n  - mscorlib\n  - System.Reflection.Emit\n  namespace: System.Reflection.Emit\n  summary: Not valid for generic type parameters.\n  remarks: In a constructed type, the type that is assigned to a generic type parameter can be a generic type, but the type parameter itself is not generic.\n  syntax:\n    content: public override Type[] GetGenericArguments ();\n    parameters: []\n    return:\n      type: System.Type[]\n      description: Not valid for generic type parameters.\n  overload: System.Reflection.Emit.GenericTypeParameterBuilder.GetGenericArguments*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: In all cases.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/GenericTypeParameterBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.GenericTypeParameterBuilder.GetGenericParameterConstraints\n  commentId: M:System.Reflection.Emit.GenericTypeParameterBuilder.GetGenericParameterConstraints\n  id: GetGenericParameterConstraints\n  parent: System.Reflection.Emit.GenericTypeParameterBuilder\n  langs:\n  - csharp\n  name: GetGenericParameterConstraints()\n  nameWithType: GenericTypeParameterBuilder.GetGenericParameterConstraints()\n  fullName: GenericTypeParameterBuilder.GetGenericParameterConstraints()\n  type: Method\n  assemblies:\n  - System.Reflection.Emit\n  - mscorlib\n  namespace: System.Reflection.Emit\n  syntax:\n    content: public override Type[] GetGenericParameterConstraints ();\n    parameters: []\n    return:\n      type: System.Type[]\n      description: ''\n  overload: System.Reflection.Emit.GenericTypeParameterBuilder.GetGenericParameterConstraints*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/GenericTypeParameterBuilder.xml\n- uid: System.Reflection.Emit.GenericTypeParameterBuilder.GetGenericTypeDefinition\n  commentId: M:System.Reflection.Emit.GenericTypeParameterBuilder.GetGenericTypeDefinition\n  id: GetGenericTypeDefinition\n  parent: System.Reflection.Emit.GenericTypeParameterBuilder\n  langs:\n  - csharp\n  name: GetGenericTypeDefinition()\n  nameWithType: GenericTypeParameterBuilder.GetGenericTypeDefinition()\n  fullName: GenericTypeParameterBuilder.GetGenericTypeDefinition()\n  type: Method\n  assemblies:\n  - System.Reflection.Emit\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Not valid for generic type parameters.\n  remarks: In a constructed type, the type that is assigned to a generic type parameter can be a generic type, but the type parameter itself is not generic.\n  syntax:\n    content: public override Type GetGenericTypeDefinition ();\n    parameters: []\n    return:\n      type: System.Type\n      description: Not valid for generic type parameters.\n  overload: System.Reflection.Emit.GenericTypeParameterBuilder.GetGenericTypeDefinition*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: In all cases.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/GenericTypeParameterBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.GenericTypeParameterBuilder.GetHashCode\n  commentId: M:System.Reflection.Emit.GenericTypeParameterBuilder.GetHashCode\n  id: GetHashCode\n  parent: System.Reflection.Emit.GenericTypeParameterBuilder\n  langs:\n  - csharp\n  name: GetHashCode()\n  nameWithType: GenericTypeParameterBuilder.GetHashCode()\n  fullName: GenericTypeParameterBuilder.GetHashCode()\n  type: Method\n  assemblies:\n  - System.Reflection.Emit\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Returns a 32-bit integer hash code for the current instance.\n  syntax:\n    content: public override int GetHashCode ();\n    parameters: []\n    return:\n      type: System.Int32\n      description: A 32-bit integer hash code.\n  overload: System.Reflection.Emit.GenericTypeParameterBuilder.GetHashCode*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/GenericTypeParameterBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.GenericTypeParameterBuilder.GetInterface(System.String,System.Boolean)\n  commentId: M:System.Reflection.Emit.GenericTypeParameterBuilder.GetInterface(System.String,System.Boolean)\n  id: GetInterface(System.String,System.Boolean)\n  parent: System.Reflection.Emit.GenericTypeParameterBuilder\n  langs:\n  - csharp\n  name: GetInterface(String, Boolean)\n  nameWithType: GenericTypeParameterBuilder.GetInterface(String, Boolean)\n  fullName: GenericTypeParameterBuilder.GetInterface(String, Boolean)\n  type: Method\n  assemblies:\n  - mscorlib\n  - System.Reflection.Emit\n  namespace: System.Reflection.Emit\n  summary: Not supported for incomplete generic type parameters.\n  remarks: This method is not supported for incomplete generic type parameters. Retrieve the type parameter from the completed generic type definition and then use reflection on the retrieved type.\n  syntax:\n    content: public override Type GetInterface (string name, bool ignoreCase);\n    parameters:\n    - id: name\n      type: System.String\n      description: The name of the interface.\n    - id: ignoreCase\n      type: System.Boolean\n      description: '`true` to search without regard for case; `false` to make a case-sensitive search.'\n    return:\n      type: System.Type\n      description: Not supported for incomplete generic type parameters.\n  overload: System.Reflection.Emit.GenericTypeParameterBuilder.GetInterface*\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: In all cases.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/GenericTypeParameterBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.GenericTypeParameterBuilder.GetInterfaceMap(System.Type)\n  commentId: M:System.Reflection.Emit.GenericTypeParameterBuilder.GetInterfaceMap(System.Type)\n  id: GetInterfaceMap(System.Type)\n  parent: System.Reflection.Emit.GenericTypeParameterBuilder\n  langs:\n  - csharp\n  name: GetInterfaceMap(Type)\n  nameWithType: GenericTypeParameterBuilder.GetInterfaceMap(Type)\n  fullName: GenericTypeParameterBuilder.GetInterfaceMap(Type)\n  type: Method\n  assemblies:\n  - mscorlib\n  - System.Reflection.Emit\n  namespace: System.Reflection.Emit\n  summary: Not supported for incomplete generic type parameters.\n  remarks: This method is not supported for incomplete generic type parameters. Retrieve the type parameter from the completed generic type definition and then use reflection on the retrieved type.\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(true)]\n\n      public override System.Reflection.InterfaceMapping GetInterfaceMap (Type interfaceType);\n    parameters:\n    - id: interfaceType\n      type: System.Type\n      description: A <xref href=\"System.Type\"></xref> object that represents the interface type for which the mapping is to be retrieved.\n    return:\n      type: System.Reflection.InterfaceMapping\n      description: Not supported for incomplete generic type parameters.\n  overload: System.Reflection.Emit.GenericTypeParameterBuilder.GetInterfaceMap*\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: In all cases.\n  attributes:\n  - type: System.Runtime.InteropServices.ComVisibleAttribute\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/GenericTypeParameterBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.GenericTypeParameterBuilder.GetInterfaces\n  commentId: M:System.Reflection.Emit.GenericTypeParameterBuilder.GetInterfaces\n  id: GetInterfaces\n  parent: System.Reflection.Emit.GenericTypeParameterBuilder\n  langs:\n  - csharp\n  name: GetInterfaces()\n  nameWithType: GenericTypeParameterBuilder.GetInterfaces()\n  fullName: GenericTypeParameterBuilder.GetInterfaces()\n  type: Method\n  assemblies:\n  - mscorlib\n  - System.Reflection.Emit\n  namespace: System.Reflection.Emit\n  summary: Not supported for incomplete generic type parameters.\n  remarks: This method is not supported for incomplete generic type parameters. Retrieve the type parameter from the completed generic type definition and then use reflection on the retrieved type.\n  syntax:\n    content: public override Type[] GetInterfaces ();\n    parameters: []\n    return:\n      type: System.Type[]\n      description: Not supported for incomplete generic type parameters.\n  overload: System.Reflection.Emit.GenericTypeParameterBuilder.GetInterfaces*\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: In all cases.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/GenericTypeParameterBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.GenericTypeParameterBuilder.GetMember(System.String,System.Reflection.MemberTypes,System.Reflection.BindingFlags)\n  commentId: M:System.Reflection.Emit.GenericTypeParameterBuilder.GetMember(System.String,System.Reflection.MemberTypes,System.Reflection.BindingFlags)\n  id: GetMember(System.String,System.Reflection.MemberTypes,System.Reflection.BindingFlags)\n  parent: System.Reflection.Emit.GenericTypeParameterBuilder\n  langs:\n  - csharp\n  name: GetMember(String, MemberTypes, BindingFlags)\n  nameWithType: GenericTypeParameterBuilder.GetMember(String, MemberTypes, BindingFlags)\n  fullName: GenericTypeParameterBuilder.GetMember(String, MemberTypes, BindingFlags)\n  type: Method\n  assemblies:\n  - mscorlib\n  - System.Reflection.Emit\n  namespace: System.Reflection.Emit\n  summary: Not supported for incomplete generic type parameters.\n  remarks: This method is not supported for incomplete generic type parameters. Retrieve the type parameter from the completed generic type definition and then use reflection on the retrieved type.\n  syntax:\n    content: public override System.Reflection.MemberInfo[] GetMember (string name, System.Reflection.MemberTypes type, System.Reflection.BindingFlags bindingAttr);\n    parameters:\n    - id: name\n      type: System.String\n      description: Not supported.\n    - id: type\n      type: System.Reflection.MemberTypes\n      description: Not supported.\n    - id: bindingAttr\n      type: System.Reflection.BindingFlags\n      description: Not supported.\n    return:\n      type: System.Reflection.MemberInfo[]\n      description: Not supported for incomplete generic type parameters.\n  overload: System.Reflection.Emit.GenericTypeParameterBuilder.GetMember*\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: In all cases.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/GenericTypeParameterBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.GenericTypeParameterBuilder.GetMembers(System.Reflection.BindingFlags)\n  commentId: M:System.Reflection.Emit.GenericTypeParameterBuilder.GetMembers(System.Reflection.BindingFlags)\n  id: GetMembers(System.Reflection.BindingFlags)\n  parent: System.Reflection.Emit.GenericTypeParameterBuilder\n  langs:\n  - csharp\n  name: GetMembers(BindingFlags)\n  nameWithType: GenericTypeParameterBuilder.GetMembers(BindingFlags)\n  fullName: GenericTypeParameterBuilder.GetMembers(BindingFlags)\n  type: Method\n  assemblies:\n  - mscorlib\n  - System.Reflection.Emit\n  namespace: System.Reflection.Emit\n  summary: Not supported for incomplete generic type parameters.\n  remarks: This method is not supported for incomplete generic type parameters. Retrieve the type parameter from the completed generic type definition and then use reflection on the retrieved type.\n  syntax:\n    content: public override System.Reflection.MemberInfo[] GetMembers (System.Reflection.BindingFlags bindingAttr);\n    parameters:\n    - id: bindingAttr\n      type: System.Reflection.BindingFlags\n      description: Not supported.\n    return:\n      type: System.Reflection.MemberInfo[]\n      description: Not supported for incomplete generic type parameters.\n  overload: System.Reflection.Emit.GenericTypeParameterBuilder.GetMembers*\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: In all cases.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/GenericTypeParameterBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.GenericTypeParameterBuilder.GetMethodImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])\n  commentId: M:System.Reflection.Emit.GenericTypeParameterBuilder.GetMethodImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])\n  id: GetMethodImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])\n  parent: System.Reflection.Emit.GenericTypeParameterBuilder\n  langs:\n  - csharp\n  name: GetMethodImpl(String, BindingFlags, Binder, CallingConventions, Type[], ParameterModifier[])\n  nameWithType: GenericTypeParameterBuilder.GetMethodImpl(String, BindingFlags, Binder, CallingConventions, Type[], ParameterModifier[])\n  fullName: GenericTypeParameterBuilder.GetMethodImpl(String, BindingFlags, Binder, CallingConventions, Type[], ParameterModifier[])\n  type: Method\n  assemblies:\n  - mscorlib\n  - System.Reflection.Emit\n  namespace: System.Reflection.Emit\n  syntax:\n    content: protected override System.Reflection.MethodInfo GetMethodImpl (string name, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, System.Reflection.CallingConventions callConvention, Type[] types, System.Reflection.ParameterModifier[] modifiers);\n    parameters:\n    - id: name\n      type: System.String\n      description: ''\n    - id: bindingAttr\n      type: System.Reflection.BindingFlags\n      description: ''\n    - id: binder\n      type: System.Reflection.Binder\n      description: ''\n    - id: callConvention\n      type: System.Reflection.CallingConventions\n      description: ''\n    - id: types\n      type: System.Type[]\n      description: ''\n    - id: modifiers\n      type: System.Reflection.ParameterModifier[]\n      description: ''\n    return:\n      type: System.Reflection.MethodInfo\n      description: ''\n  overload: System.Reflection.Emit.GenericTypeParameterBuilder.GetMethodImpl*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/GenericTypeParameterBuilder.xml\n- uid: System.Reflection.Emit.GenericTypeParameterBuilder.GetMethods(System.Reflection.BindingFlags)\n  commentId: M:System.Reflection.Emit.GenericTypeParameterBuilder.GetMethods(System.Reflection.BindingFlags)\n  id: GetMethods(System.Reflection.BindingFlags)\n  parent: System.Reflection.Emit.GenericTypeParameterBuilder\n  langs:\n  - csharp\n  name: GetMethods(BindingFlags)\n  nameWithType: GenericTypeParameterBuilder.GetMethods(BindingFlags)\n  fullName: GenericTypeParameterBuilder.GetMethods(BindingFlags)\n  type: Method\n  assemblies:\n  - mscorlib\n  - System.Reflection.Emit\n  namespace: System.Reflection.Emit\n  summary: Not supported for incomplete generic type parameters.\n  remarks: This method is not supported for incomplete generic type parameters. Retrieve the type parameter from the completed generic type definition and then use reflection on the retrieved type.\n  syntax:\n    content: public override System.Reflection.MethodInfo[] GetMethods (System.Reflection.BindingFlags bindingAttr);\n    parameters:\n    - id: bindingAttr\n      type: System.Reflection.BindingFlags\n      description: Not supported.\n    return:\n      type: System.Reflection.MethodInfo[]\n      description: Not supported for incomplete generic type parameters.\n  overload: System.Reflection.Emit.GenericTypeParameterBuilder.GetMethods*\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: In all cases.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/GenericTypeParameterBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.GenericTypeParameterBuilder.GetNestedType(System.String,System.Reflection.BindingFlags)\n  commentId: M:System.Reflection.Emit.GenericTypeParameterBuilder.GetNestedType(System.String,System.Reflection.BindingFlags)\n  id: GetNestedType(System.String,System.Reflection.BindingFlags)\n  parent: System.Reflection.Emit.GenericTypeParameterBuilder\n  langs:\n  - csharp\n  name: GetNestedType(String, BindingFlags)\n  nameWithType: GenericTypeParameterBuilder.GetNestedType(String, BindingFlags)\n  fullName: GenericTypeParameterBuilder.GetNestedType(String, BindingFlags)\n  type: Method\n  assemblies:\n  - mscorlib\n  - System.Reflection.Emit\n  namespace: System.Reflection.Emit\n  summary: Not supported for incomplete generic type parameters.\n  remarks: This method is not supported for incomplete generic type parameters. Retrieve the type parameter from the completed generic type definition and then use reflection on the retrieved type.\n  syntax:\n    content: public override Type GetNestedType (string name, System.Reflection.BindingFlags bindingAttr);\n    parameters:\n    - id: name\n      type: System.String\n      description: Not supported.\n    - id: bindingAttr\n      type: System.Reflection.BindingFlags\n      description: Not supported.\n    return:\n      type: System.Type\n      description: Not supported for incomplete generic type parameters.\n  overload: System.Reflection.Emit.GenericTypeParameterBuilder.GetNestedType*\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: In all cases.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/GenericTypeParameterBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.GenericTypeParameterBuilder.GetNestedTypes(System.Reflection.BindingFlags)\n  commentId: M:System.Reflection.Emit.GenericTypeParameterBuilder.GetNestedTypes(System.Reflection.BindingFlags)\n  id: GetNestedTypes(System.Reflection.BindingFlags)\n  parent: System.Reflection.Emit.GenericTypeParameterBuilder\n  langs:\n  - csharp\n  name: GetNestedTypes(BindingFlags)\n  nameWithType: GenericTypeParameterBuilder.GetNestedTypes(BindingFlags)\n  fullName: GenericTypeParameterBuilder.GetNestedTypes(BindingFlags)\n  type: Method\n  assemblies:\n  - mscorlib\n  - System.Reflection.Emit\n  namespace: System.Reflection.Emit\n  summary: Not supported for incomplete generic type parameters.\n  remarks: This method is not supported for incomplete generic type parameters. Retrieve the type parameter from the completed generic type definition and then use reflection on the retrieved type.\n  syntax:\n    content: public override Type[] GetNestedTypes (System.Reflection.BindingFlags bindingAttr);\n    parameters:\n    - id: bindingAttr\n      type: System.Reflection.BindingFlags\n      description: Not supported.\n    return:\n      type: System.Type[]\n      description: Not supported for incomplete generic type parameters.\n  overload: System.Reflection.Emit.GenericTypeParameterBuilder.GetNestedTypes*\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: In all cases.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/GenericTypeParameterBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.GenericTypeParameterBuilder.GetProperties(System.Reflection.BindingFlags)\n  commentId: M:System.Reflection.Emit.GenericTypeParameterBuilder.GetProperties(System.Reflection.BindingFlags)\n  id: GetProperties(System.Reflection.BindingFlags)\n  parent: System.Reflection.Emit.GenericTypeParameterBuilder\n  langs:\n  - csharp\n  name: GetProperties(BindingFlags)\n  nameWithType: GenericTypeParameterBuilder.GetProperties(BindingFlags)\n  fullName: GenericTypeParameterBuilder.GetProperties(BindingFlags)\n  type: Method\n  assemblies:\n  - mscorlib\n  - System.Reflection.Emit\n  namespace: System.Reflection.Emit\n  summary: Not supported for incomplete generic type parameters.\n  remarks: This method is not supported for incomplete generic type parameters. Retrieve the type parameter from the completed generic type definition and then use reflection on the retrieved type.\n  syntax:\n    content: public override System.Reflection.PropertyInfo[] GetProperties (System.Reflection.BindingFlags bindingAttr);\n    parameters:\n    - id: bindingAttr\n      type: System.Reflection.BindingFlags\n      description: Not supported.\n    return:\n      type: System.Reflection.PropertyInfo[]\n      description: Not supported for incomplete generic type parameters.\n  overload: System.Reflection.Emit.GenericTypeParameterBuilder.GetProperties*\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: In all cases.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/GenericTypeParameterBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.GenericTypeParameterBuilder.GetPropertyImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type,System.Type[],System.Reflection.ParameterModifier[])\n  commentId: M:System.Reflection.Emit.GenericTypeParameterBuilder.GetPropertyImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type,System.Type[],System.Reflection.ParameterModifier[])\n  id: GetPropertyImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type,System.Type[],System.Reflection.ParameterModifier[])\n  parent: System.Reflection.Emit.GenericTypeParameterBuilder\n  langs:\n  - csharp\n  name: GetPropertyImpl(String, BindingFlags, Binder, Type, Type[], ParameterModifier[])\n  nameWithType: GenericTypeParameterBuilder.GetPropertyImpl(String, BindingFlags, Binder, Type, Type[], ParameterModifier[])\n  fullName: GenericTypeParameterBuilder.GetPropertyImpl(String, BindingFlags, Binder, Type, Type[], ParameterModifier[])\n  type: Method\n  assemblies:\n  - mscorlib\n  - System.Reflection.Emit\n  namespace: System.Reflection.Emit\n  syntax:\n    content: protected override System.Reflection.PropertyInfo GetPropertyImpl (string name, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, Type returnType, Type[] types, System.Reflection.ParameterModifier[] modifiers);\n    parameters:\n    - id: name\n      type: System.String\n      description: ''\n    - id: bindingAttr\n      type: System.Reflection.BindingFlags\n      description: ''\n    - id: binder\n      type: System.Reflection.Binder\n      description: ''\n    - id: returnType\n      type: System.Type\n      description: ''\n    - id: types\n      type: System.Type[]\n      description: ''\n    - id: modifiers\n      type: System.Reflection.ParameterModifier[]\n      description: ''\n    return:\n      type: System.Reflection.PropertyInfo\n      description: ''\n  overload: System.Reflection.Emit.GenericTypeParameterBuilder.GetPropertyImpl*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/GenericTypeParameterBuilder.xml\n- uid: System.Reflection.Emit.GenericTypeParameterBuilder.GUID\n  commentId: P:System.Reflection.Emit.GenericTypeParameterBuilder.GUID\n  id: GUID\n  parent: System.Reflection.Emit.GenericTypeParameterBuilder\n  langs:\n  - csharp\n  name: GUID\n  nameWithType: GenericTypeParameterBuilder.GUID\n  fullName: GenericTypeParameterBuilder.GUID\n  type: Property\n  assemblies:\n  - System.Reflection.Emit\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Not supported for incomplete generic type parameters.\n  remarks: This property is not supported for incomplete generic type parameters. Retrieve the type parameter from the completed generic type definition and then use reflection on the retrieved type.\n  syntax:\n    content: public override Guid GUID { get; }\n    return:\n      type: System.Guid\n      description: Not supported for incomplete generic type parameters.\n  overload: System.Reflection.Emit.GenericTypeParameterBuilder.GUID*\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: In all cases.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/GenericTypeParameterBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.GenericTypeParameterBuilder.HasElementTypeImpl\n  commentId: M:System.Reflection.Emit.GenericTypeParameterBuilder.HasElementTypeImpl\n  id: HasElementTypeImpl\n  parent: System.Reflection.Emit.GenericTypeParameterBuilder\n  langs:\n  - csharp\n  name: HasElementTypeImpl()\n  nameWithType: GenericTypeParameterBuilder.HasElementTypeImpl()\n  fullName: GenericTypeParameterBuilder.HasElementTypeImpl()\n  type: Method\n  assemblies:\n  - mscorlib\n  - System.Reflection.Emit\n  namespace: System.Reflection.Emit\n  syntax:\n    content: protected override bool HasElementTypeImpl ();\n    parameters: []\n    return:\n      type: System.Boolean\n      description: ''\n  overload: System.Reflection.Emit.GenericTypeParameterBuilder.HasElementTypeImpl*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/GenericTypeParameterBuilder.xml\n- uid: System.Reflection.Emit.GenericTypeParameterBuilder.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])\n  commentId: M:System.Reflection.Emit.GenericTypeParameterBuilder.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])\n  id: InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])\n  parent: System.Reflection.Emit.GenericTypeParameterBuilder\n  langs:\n  - csharp\n  name: InvokeMember(String, BindingFlags, Binder, Object, Object[], ParameterModifier[], CultureInfo, String[])\n  nameWithType: GenericTypeParameterBuilder.InvokeMember(String, BindingFlags, Binder, Object, Object[], ParameterModifier[], CultureInfo, String[])\n  fullName: GenericTypeParameterBuilder.InvokeMember(String, BindingFlags, Binder, Object, Object[], ParameterModifier[], CultureInfo, String[])\n  type: Method\n  assemblies:\n  - mscorlib\n  - System.Reflection.Emit\n  namespace: System.Reflection.Emit\n  summary: Not supported for incomplete generic type parameters.\n  remarks: This method is not supported for incomplete generic type parameters. Retrieve the type parameter from the completed generic type definition and then use reflection on the retrieved type.\n  syntax:\n    content: public override object InvokeMember (string name, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, object target, object[] args, System.Reflection.ParameterModifier[] modifiers, System.Globalization.CultureInfo culture, string[] namedParameters);\n    parameters:\n    - id: name\n      type: System.String\n      description: Not supported.\n    - id: invokeAttr\n      type: System.Reflection.BindingFlags\n      description: Not supported.\n    - id: binder\n      type: System.Reflection.Binder\n      description: Not supported.\n    - id: target\n      type: System.Object\n      description: Not supported.\n    - id: args\n      type: System.Object[]\n      description: Not supported.\n    - id: modifiers\n      type: System.Reflection.ParameterModifier[]\n      description: Not supported.\n    - id: culture\n      type: System.Globalization.CultureInfo\n      description: Not supported.\n    - id: namedParameters\n      type: System.String[]\n      description: Not supported.\n    return:\n      type: System.Object\n      description: Not supported for incomplete generic type parameters.\n  overload: System.Reflection.Emit.GenericTypeParameterBuilder.InvokeMember*\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: In all cases.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/GenericTypeParameterBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.GenericTypeParameterBuilder.IsArrayImpl\n  commentId: M:System.Reflection.Emit.GenericTypeParameterBuilder.IsArrayImpl\n  id: IsArrayImpl\n  parent: System.Reflection.Emit.GenericTypeParameterBuilder\n  langs:\n  - csharp\n  name: IsArrayImpl()\n  nameWithType: GenericTypeParameterBuilder.IsArrayImpl()\n  fullName: GenericTypeParameterBuilder.IsArrayImpl()\n  type: Method\n  assemblies:\n  - mscorlib\n  - System.Reflection.Emit\n  namespace: System.Reflection.Emit\n  syntax:\n    content: protected override bool IsArrayImpl ();\n    parameters: []\n    return:\n      type: System.Boolean\n      description: ''\n  overload: System.Reflection.Emit.GenericTypeParameterBuilder.IsArrayImpl*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/GenericTypeParameterBuilder.xml\n- uid: System.Reflection.Emit.GenericTypeParameterBuilder.IsAssignableFrom(System.Reflection.TypeInfo)\n  commentId: M:System.Reflection.Emit.GenericTypeParameterBuilder.IsAssignableFrom(System.Reflection.TypeInfo)\n  id: IsAssignableFrom(System.Reflection.TypeInfo)\n  parent: System.Reflection.Emit.GenericTypeParameterBuilder\n  langs:\n  - csharp\n  name: IsAssignableFrom(TypeInfo)\n  nameWithType: GenericTypeParameterBuilder.IsAssignableFrom(TypeInfo)\n  fullName: GenericTypeParameterBuilder.IsAssignableFrom(TypeInfo)\n  type: Method\n  assemblies:\n  - System.Reflection.Emit\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Throws a <xref href=\"System.NotSupportedException\"></xref> exception in all cases.\n  remarks: This method is not supported for incomplete generic type parameters. Retrieve the type parameter from the completed generic type definition and then use reflection on the retrieved type.\n  syntax:\n    content: public override bool IsAssignableFrom (System.Reflection.TypeInfo typeInfo);\n    parameters:\n    - id: typeInfo\n      type: System.Reflection.TypeInfo\n      description: The object to test.\n    return:\n      type: System.Boolean\n      description: Throws a <xref href=\"System.NotSupportedException\"></xref> exception in all cases.\n  overload: System.Reflection.Emit.GenericTypeParameterBuilder.IsAssignableFrom*\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: In all cases.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/GenericTypeParameterBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.GenericTypeParameterBuilder.IsAssignableFrom(System.Type)\n  commentId: M:System.Reflection.Emit.GenericTypeParameterBuilder.IsAssignableFrom(System.Type)\n  id: IsAssignableFrom(System.Type)\n  parent: System.Reflection.Emit.GenericTypeParameterBuilder\n  langs:\n  - csharp\n  name: IsAssignableFrom(Type)\n  nameWithType: GenericTypeParameterBuilder.IsAssignableFrom(Type)\n  fullName: GenericTypeParameterBuilder.IsAssignableFrom(Type)\n  type: Method\n  assemblies:\n  - mscorlib\n  - System.Reflection.Emit\n  namespace: System.Reflection.Emit\n  summary: Throws a <xref href=\"System.NotSupportedException\"></xref> exception in all cases.\n  remarks: This method is not supported for incomplete generic type parameters. Retrieve the type parameter from the completed generic type definition and then use reflection on the retrieved type.\n  syntax:\n    content: public override bool IsAssignableFrom (Type c);\n    parameters:\n    - id: c\n      type: System.Type\n      description: The object to test.\n    return:\n      type: System.Boolean\n      description: Throws a <xref href=\"System.NotSupportedException\"></xref> exception in all cases.\n  overload: System.Reflection.Emit.GenericTypeParameterBuilder.IsAssignableFrom*\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: In all cases.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/GenericTypeParameterBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.GenericTypeParameterBuilder.IsByRefImpl\n  commentId: M:System.Reflection.Emit.GenericTypeParameterBuilder.IsByRefImpl\n  id: IsByRefImpl\n  parent: System.Reflection.Emit.GenericTypeParameterBuilder\n  langs:\n  - csharp\n  name: IsByRefImpl()\n  nameWithType: GenericTypeParameterBuilder.IsByRefImpl()\n  fullName: GenericTypeParameterBuilder.IsByRefImpl()\n  type: Method\n  assemblies:\n  - mscorlib\n  - System.Reflection.Emit\n  namespace: System.Reflection.Emit\n  syntax:\n    content: protected override bool IsByRefImpl ();\n    parameters: []\n    return:\n      type: System.Boolean\n      description: ''\n  overload: System.Reflection.Emit.GenericTypeParameterBuilder.IsByRefImpl*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/GenericTypeParameterBuilder.xml\n- uid: System.Reflection.Emit.GenericTypeParameterBuilder.IsCOMObjectImpl\n  commentId: M:System.Reflection.Emit.GenericTypeParameterBuilder.IsCOMObjectImpl\n  id: IsCOMObjectImpl\n  parent: System.Reflection.Emit.GenericTypeParameterBuilder\n  langs:\n  - csharp\n  name: IsCOMObjectImpl()\n  nameWithType: GenericTypeParameterBuilder.IsCOMObjectImpl()\n  fullName: GenericTypeParameterBuilder.IsCOMObjectImpl()\n  type: Method\n  assemblies:\n  - mscorlib\n  - System.Reflection.Emit\n  namespace: System.Reflection.Emit\n  syntax:\n    content: protected override bool IsCOMObjectImpl ();\n    parameters: []\n    return:\n      type: System.Boolean\n      description: ''\n  overload: System.Reflection.Emit.GenericTypeParameterBuilder.IsCOMObjectImpl*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/GenericTypeParameterBuilder.xml\n- uid: System.Reflection.Emit.GenericTypeParameterBuilder.IsConstructedGenericType\n  commentId: P:System.Reflection.Emit.GenericTypeParameterBuilder.IsConstructedGenericType\n  id: IsConstructedGenericType\n  parent: System.Reflection.Emit.GenericTypeParameterBuilder\n  langs:\n  - csharp\n  name: IsConstructedGenericType\n  nameWithType: GenericTypeParameterBuilder.IsConstructedGenericType\n  fullName: GenericTypeParameterBuilder.IsConstructedGenericType\n  type: Property\n  assemblies:\n  - mscorlib\n  - System.Reflection.Emit\n  namespace: System.Reflection.Emit\n  summary: Gets a value that indicates whether this object represents a constructed generic type.\n  syntax:\n    content: public override bool IsConstructedGenericType { get; }\n    return:\n      type: System.Boolean\n      description: '`true` if this object represents a constructed generic type; otherwise, `false`.'\n  overload: System.Reflection.Emit.GenericTypeParameterBuilder.IsConstructedGenericType*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/GenericTypeParameterBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.GenericTypeParameterBuilder.IsDefined(System.Type,System.Boolean)\n  commentId: M:System.Reflection.Emit.GenericTypeParameterBuilder.IsDefined(System.Type,System.Boolean)\n  id: IsDefined(System.Type,System.Boolean)\n  parent: System.Reflection.Emit.GenericTypeParameterBuilder\n  langs:\n  - csharp\n  name: IsDefined(Type, Boolean)\n  nameWithType: GenericTypeParameterBuilder.IsDefined(Type, Boolean)\n  fullName: GenericTypeParameterBuilder.IsDefined(Type, Boolean)\n  type: Method\n  assemblies:\n  - mscorlib\n  - System.Reflection.Emit\n  namespace: System.Reflection.Emit\n  summary: Not supported for incomplete generic type parameters.\n  remarks: This method is not supported for incomplete generic type parameters. Retrieve the type parameter from the completed generic type definition and then use reflection on the retrieved type.\n  syntax:\n    content: public override bool IsDefined (Type attributeType, bool inherit);\n    parameters:\n    - id: attributeType\n      type: System.Type\n      description: Not supported.\n    - id: inherit\n      type: System.Boolean\n      description: Not supported.\n    return:\n      type: System.Boolean\n      description: Not supported for incomplete generic type parameters.\n  overload: System.Reflection.Emit.GenericTypeParameterBuilder.IsDefined*\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: In all cases.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/GenericTypeParameterBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.GenericTypeParameterBuilder.IsEnum\n  commentId: P:System.Reflection.Emit.GenericTypeParameterBuilder.IsEnum\n  id: IsEnum\n  parent: System.Reflection.Emit.GenericTypeParameterBuilder\n  langs:\n  - csharp\n  name: IsEnum\n  nameWithType: GenericTypeParameterBuilder.IsEnum\n  fullName: GenericTypeParameterBuilder.IsEnum\n  type: Property\n  assemblies:\n  - System.Reflection.Emit\n  namespace: System.Reflection.Emit\n  syntax:\n    content: public override bool IsEnum { get; }\n    return:\n      type: System.Boolean\n      description: ''\n  overload: System.Reflection.Emit.GenericTypeParameterBuilder.IsEnum*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/GenericTypeParameterBuilder.xml\n- uid: System.Reflection.Emit.GenericTypeParameterBuilder.IsGenericParameter\n  commentId: P:System.Reflection.Emit.GenericTypeParameterBuilder.IsGenericParameter\n  id: IsGenericParameter\n  parent: System.Reflection.Emit.GenericTypeParameterBuilder\n  langs:\n  - csharp\n  name: IsGenericParameter\n  nameWithType: GenericTypeParameterBuilder.IsGenericParameter\n  fullName: GenericTypeParameterBuilder.IsGenericParameter\n  type: Property\n  assemblies:\n  - System.Reflection.Emit\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Gets `true` in all cases.\n  syntax:\n    content: public override bool IsGenericParameter { get; }\n    return:\n      type: System.Boolean\n      description: '`true` in all cases.'\n  overload: System.Reflection.Emit.GenericTypeParameterBuilder.IsGenericParameter*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/GenericTypeParameterBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.GenericTypeParameterBuilder.IsGenericType\n  commentId: P:System.Reflection.Emit.GenericTypeParameterBuilder.IsGenericType\n  id: IsGenericType\n  parent: System.Reflection.Emit.GenericTypeParameterBuilder\n  langs:\n  - csharp\n  name: IsGenericType\n  nameWithType: GenericTypeParameterBuilder.IsGenericType\n  fullName: GenericTypeParameterBuilder.IsGenericType\n  type: Property\n  assemblies:\n  - System.Reflection.Emit\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Returns `false` in all cases.\n  remarks: In a constructed type, the type that is assigned to a generic type parameter can be a generic type, but the type parameter itself is not generic.\n  syntax:\n    content: public override bool IsGenericType { get; }\n    return:\n      type: System.Boolean\n      description: '`false` in all cases.'\n  overload: System.Reflection.Emit.GenericTypeParameterBuilder.IsGenericType*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/GenericTypeParameterBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.GenericTypeParameterBuilder.IsGenericTypeDefinition\n  commentId: P:System.Reflection.Emit.GenericTypeParameterBuilder.IsGenericTypeDefinition\n  id: IsGenericTypeDefinition\n  parent: System.Reflection.Emit.GenericTypeParameterBuilder\n  langs:\n  - csharp\n  name: IsGenericTypeDefinition\n  nameWithType: GenericTypeParameterBuilder.IsGenericTypeDefinition\n  fullName: GenericTypeParameterBuilder.IsGenericTypeDefinition\n  type: Property\n  assemblies:\n  - System.Reflection.Emit\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Gets `false` in all cases.\n  remarks: In a constructed type, the type that is assigned to a generic type parameter can be a generic type, but the type parameter itself is not generic.\n  syntax:\n    content: public override bool IsGenericTypeDefinition { get; }\n    return:\n      type: System.Boolean\n      description: '`false` in all cases.'\n  overload: System.Reflection.Emit.GenericTypeParameterBuilder.IsGenericTypeDefinition*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/GenericTypeParameterBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.GenericTypeParameterBuilder.IsInstanceOfType(System.Object)\n  commentId: M:System.Reflection.Emit.GenericTypeParameterBuilder.IsInstanceOfType(System.Object)\n  id: IsInstanceOfType(System.Object)\n  parent: System.Reflection.Emit.GenericTypeParameterBuilder\n  langs:\n  - csharp\n  name: IsInstanceOfType(Object)\n  nameWithType: GenericTypeParameterBuilder.IsInstanceOfType(Object)\n  fullName: GenericTypeParameterBuilder.IsInstanceOfType(Object)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Reflection.Emit\n  syntax:\n    content: public override bool IsInstanceOfType (object o);\n    parameters:\n    - id: o\n      type: System.Object\n      description: ''\n    return:\n      type: System.Boolean\n      description: ''\n  overload: System.Reflection.Emit.GenericTypeParameterBuilder.IsInstanceOfType*\n  exceptions: []\n  version:\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  monikers:\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/GenericTypeParameterBuilder.xml\n- uid: System.Reflection.Emit.GenericTypeParameterBuilder.IsPointerImpl\n  commentId: M:System.Reflection.Emit.GenericTypeParameterBuilder.IsPointerImpl\n  id: IsPointerImpl\n  parent: System.Reflection.Emit.GenericTypeParameterBuilder\n  langs:\n  - csharp\n  name: IsPointerImpl()\n  nameWithType: GenericTypeParameterBuilder.IsPointerImpl()\n  fullName: GenericTypeParameterBuilder.IsPointerImpl()\n  type: Method\n  assemblies:\n  - mscorlib\n  - System.Reflection.Emit\n  namespace: System.Reflection.Emit\n  syntax:\n    content: protected override bool IsPointerImpl ();\n    parameters: []\n    return:\n      type: System.Boolean\n      description: ''\n  overload: System.Reflection.Emit.GenericTypeParameterBuilder.IsPointerImpl*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/GenericTypeParameterBuilder.xml\n- uid: System.Reflection.Emit.GenericTypeParameterBuilder.IsPrimitiveImpl\n  commentId: M:System.Reflection.Emit.GenericTypeParameterBuilder.IsPrimitiveImpl\n  id: IsPrimitiveImpl\n  parent: System.Reflection.Emit.GenericTypeParameterBuilder\n  langs:\n  - csharp\n  name: IsPrimitiveImpl()\n  nameWithType: GenericTypeParameterBuilder.IsPrimitiveImpl()\n  fullName: GenericTypeParameterBuilder.IsPrimitiveImpl()\n  type: Method\n  assemblies:\n  - mscorlib\n  - System.Reflection.Emit\n  namespace: System.Reflection.Emit\n  syntax:\n    content: protected override bool IsPrimitiveImpl ();\n    parameters: []\n    return:\n      type: System.Boolean\n      description: ''\n  overload: System.Reflection.Emit.GenericTypeParameterBuilder.IsPrimitiveImpl*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/GenericTypeParameterBuilder.xml\n- uid: System.Reflection.Emit.GenericTypeParameterBuilder.IsSerializable\n  commentId: P:System.Reflection.Emit.GenericTypeParameterBuilder.IsSerializable\n  id: IsSerializable\n  parent: System.Reflection.Emit.GenericTypeParameterBuilder\n  langs:\n  - csharp\n  name: IsSerializable\n  nameWithType: GenericTypeParameterBuilder.IsSerializable\n  fullName: GenericTypeParameterBuilder.IsSerializable\n  type: Property\n  assemblies:\n  - System.Reflection.Emit\n  namespace: System.Reflection.Emit\n  syntax:\n    content: public override bool IsSerializable { get; }\n    return:\n      type: System.Boolean\n      description: ''\n  overload: System.Reflection.Emit.GenericTypeParameterBuilder.IsSerializable*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/GenericTypeParameterBuilder.xml\n- uid: System.Reflection.Emit.GenericTypeParameterBuilder.IsSubclassOf(System.Type)\n  commentId: M:System.Reflection.Emit.GenericTypeParameterBuilder.IsSubclassOf(System.Type)\n  id: IsSubclassOf(System.Type)\n  parent: System.Reflection.Emit.GenericTypeParameterBuilder\n  langs:\n  - csharp\n  name: IsSubclassOf(Type)\n  nameWithType: GenericTypeParameterBuilder.IsSubclassOf(Type)\n  fullName: GenericTypeParameterBuilder.IsSubclassOf(Type)\n  type: Method\n  assemblies:\n  - System.Reflection.Emit\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Not supported for incomplete generic type parameters.\n  remarks: This method is not supported for incomplete generic type parameters. Retrieve the type parameter from the completed generic type definition and then use reflection on the retrieved type.\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(true)]\n\n      public override bool IsSubclassOf (Type c);\n    parameters:\n    - id: c\n      type: System.Type\n      description: Not supported.\n    return:\n      type: System.Boolean\n      description: Not supported for incomplete generic type parameters.\n  overload: System.Reflection.Emit.GenericTypeParameterBuilder.IsSubclassOf*\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: In all cases.\n  attributes:\n  - type: System.Runtime.InteropServices.ComVisibleAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/GenericTypeParameterBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.GenericTypeParameterBuilder.IsSZArray\n  commentId: P:System.Reflection.Emit.GenericTypeParameterBuilder.IsSZArray\n  id: IsSZArray\n  parent: System.Reflection.Emit.GenericTypeParameterBuilder\n  langs:\n  - csharp\n  name: IsSZArray\n  nameWithType: GenericTypeParameterBuilder.IsSZArray\n  fullName: GenericTypeParameterBuilder.IsSZArray\n  type: Property\n  assemblies:\n  - System.Reflection.Emit\n  namespace: System.Reflection.Emit\n  syntax:\n    content: public override bool IsSZArray { get; }\n    return:\n      type: System.Boolean\n      description: ''\n  overload: System.Reflection.Emit.GenericTypeParameterBuilder.IsSZArray*\n  exceptions: []\n  version:\n  - netcore-2.0\n  monikers:\n  - netcore-2.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/GenericTypeParameterBuilder.xml\n- uid: System.Reflection.Emit.GenericTypeParameterBuilder.IsTypeDefinition\n  commentId: P:System.Reflection.Emit.GenericTypeParameterBuilder.IsTypeDefinition\n  id: IsTypeDefinition\n  parent: System.Reflection.Emit.GenericTypeParameterBuilder\n  langs:\n  - csharp\n  name: IsTypeDefinition\n  nameWithType: GenericTypeParameterBuilder.IsTypeDefinition\n  fullName: GenericTypeParameterBuilder.IsTypeDefinition\n  type: Property\n  assemblies:\n  - System.Reflection.Emit\n  namespace: System.Reflection.Emit\n  syntax:\n    content: public override bool IsTypeDefinition { get; }\n    return:\n      type: System.Boolean\n      description: ''\n  overload: System.Reflection.Emit.GenericTypeParameterBuilder.IsTypeDefinition*\n  exceptions: []\n  version:\n  - netcore-2.0\n  monikers:\n  - netcore-2.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/GenericTypeParameterBuilder.xml\n- uid: System.Reflection.Emit.GenericTypeParameterBuilder.IsValueTypeImpl\n  commentId: M:System.Reflection.Emit.GenericTypeParameterBuilder.IsValueTypeImpl\n  id: IsValueTypeImpl\n  parent: System.Reflection.Emit.GenericTypeParameterBuilder\n  langs:\n  - csharp\n  name: IsValueTypeImpl()\n  nameWithType: GenericTypeParameterBuilder.IsValueTypeImpl()\n  fullName: GenericTypeParameterBuilder.IsValueTypeImpl()\n  type: Method\n  assemblies:\n  - mscorlib\n  - System.Reflection.Emit\n  namespace: System.Reflection.Emit\n  syntax:\n    content: protected override bool IsValueTypeImpl ();\n    parameters: []\n    return:\n      type: System.Boolean\n      description: ''\n  overload: System.Reflection.Emit.GenericTypeParameterBuilder.IsValueTypeImpl*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/GenericTypeParameterBuilder.xml\n- uid: System.Reflection.Emit.GenericTypeParameterBuilder.IsVariableBoundArray\n  commentId: P:System.Reflection.Emit.GenericTypeParameterBuilder.IsVariableBoundArray\n  id: IsVariableBoundArray\n  parent: System.Reflection.Emit.GenericTypeParameterBuilder\n  langs:\n  - csharp\n  name: IsVariableBoundArray\n  nameWithType: GenericTypeParameterBuilder.IsVariableBoundArray\n  fullName: GenericTypeParameterBuilder.IsVariableBoundArray\n  type: Property\n  assemblies:\n  - System.Reflection.Emit\n  namespace: System.Reflection.Emit\n  syntax:\n    content: public override bool IsVariableBoundArray { get; }\n    return:\n      type: System.Boolean\n      description: ''\n  overload: System.Reflection.Emit.GenericTypeParameterBuilder.IsVariableBoundArray*\n  exceptions: []\n  version:\n  - netcore-2.0\n  monikers:\n  - netcore-2.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/GenericTypeParameterBuilder.xml\n- uid: System.Reflection.Emit.GenericTypeParameterBuilder.MakeArrayType\n  commentId: M:System.Reflection.Emit.GenericTypeParameterBuilder.MakeArrayType\n  id: MakeArrayType\n  parent: System.Reflection.Emit.GenericTypeParameterBuilder\n  langs:\n  - csharp\n  name: MakeArrayType()\n  nameWithType: GenericTypeParameterBuilder.MakeArrayType()\n  fullName: GenericTypeParameterBuilder.MakeArrayType()\n  type: Method\n  assemblies:\n  - System.Reflection.Emit\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Returns the type of a one-dimensional array whose element type is the generic type parameter.\n  remarks: The <xref:System.Type.MakeArrayType%2A> method provides a way to generate array types for parameter lists.\n  example:\n  - \"The following code example creates a dynamic module, an abstract generic type named `Sample` with one type parameter, `T`, and an abstract method named `TestMethod`. `TestMethod` takes a `ref` parameter (`ByRef` in Visual Basic) of type `T`, a pointer to type `T`, and an array of `T`. This method returns a two-dimensional array of `T`. The code example saves the dynamic module to disk, so you can examine it using the MSIL Disassembler (Ildasm.exe).  \\n  \\n [!code-cpp[MakeXxxGenericTypeParameterBuilder#1](~/samples/snippets/cpp/VS_Snippets_CLR/MakeXxxGenericTypeParameterBuilder/cpp/source.cpp#1)]\\n [!code-csharp[MakeXxxGenericTypeParameterBuilder#1](~/samples/snippets/csharp/VS_Snippets_CLR/MakeXxxGenericTypeParameterBuilder/CS/source.cs#1)]\\n [!code-vb[MakeXxxGenericTypeParameterBuilder#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/MakeXxxGenericTypeParameterBuilder/VB/source.vb#1)]\"\n  syntax:\n    content: public override Type MakeArrayType ();\n    parameters: []\n    return:\n      type: System.Type\n      description: A <xref href=\"System.Type\"></xref> object that represents the type of a one-dimensional array whose element type is the generic type parameter.\n  overload: System.Reflection.Emit.GenericTypeParameterBuilder.MakeArrayType*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/GenericTypeParameterBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.GenericTypeParameterBuilder.MakeArrayType(System.Int32)\n  commentId: M:System.Reflection.Emit.GenericTypeParameterBuilder.MakeArrayType(System.Int32)\n  id: MakeArrayType(System.Int32)\n  parent: System.Reflection.Emit.GenericTypeParameterBuilder\n  langs:\n  - csharp\n  name: MakeArrayType(Int32)\n  nameWithType: GenericTypeParameterBuilder.MakeArrayType(Int32)\n  fullName: GenericTypeParameterBuilder.MakeArrayType(Int32)\n  type: Method\n  assemblies:\n  - System.Reflection.Emit\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Returns the type of an array whose element type is the generic type parameter, with the specified number of dimensions.\n  remarks: The <xref:System.Type.MakeArrayType%2A> method provides a way to generate array types for parameter lists.\n  example:\n  - \"The following code example creates a dynamic module, an abstract generic type named `Sample` with one type parameter, `T`, and an abstract method named `TestMethod`. `TestMethod` takes a `ref` parameter (`ByRef` in Visual Basic) of type `T`, a pointer to type `T`, and an array of `T`. This method returns a two-dimensional array of `T`. The code example saves the dynamic module to disk, so you can examine it using the MSIL Disassembler (Ildasm.exe).  \\n  \\n [!code-cpp[MakeXxxGenericTypeParameterBuilder#1](~/samples/snippets/cpp/VS_Snippets_CLR/MakeXxxGenericTypeParameterBuilder/cpp/source.cpp#1)]\\n [!code-csharp[MakeXxxGenericTypeParameterBuilder#1](~/samples/snippets/csharp/VS_Snippets_CLR/MakeXxxGenericTypeParameterBuilder/CS/source.cs#1)]\\n [!code-vb[MakeXxxGenericTypeParameterBuilder#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/MakeXxxGenericTypeParameterBuilder/VB/source.vb#1)]\"\n  syntax:\n    content: public override Type MakeArrayType (int rank);\n    parameters:\n    - id: rank\n      type: System.Int32\n      description: The number of dimensions for the array.\n    return:\n      type: System.Type\n      description: A <xref href=\"System.Type\"></xref> object that represents the type of an array whose element type is the generic type parameter, with the specified number of dimensions.\n  overload: System.Reflection.Emit.GenericTypeParameterBuilder.MakeArrayType*\n  exceptions:\n  - type: System.IndexOutOfRangeException\n    commentId: T:System.IndexOutOfRangeException\n    description: <code>rank</code> is not a valid number of dimensions. For example, its value is less than 1.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/GenericTypeParameterBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.GenericTypeParameterBuilder.MakeByRefType\n  commentId: M:System.Reflection.Emit.GenericTypeParameterBuilder.MakeByRefType\n  id: MakeByRefType\n  parent: System.Reflection.Emit.GenericTypeParameterBuilder\n  langs:\n  - csharp\n  name: MakeByRefType()\n  nameWithType: GenericTypeParameterBuilder.MakeByRefType()\n  fullName: GenericTypeParameterBuilder.MakeByRefType()\n  type: Method\n  assemblies:\n  - System.Reflection.Emit\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Returns a <xref href=\"System.Type\"></xref> object that represents the current generic type parameter when passed as a reference parameter.\n  remarks: The <xref:System.Reflection.Emit.GenericTypeParameterBuilder.MakeByRefType%2A> method provides a way to generate `ref` types (`ByRef` in Visual Basic) for parameter lists.\n  example:\n  - \"The following code example creates a dynamic module, an abstract generic type named `Sample` with one type parameter, `T`, and an abstract method named `TestMethod`. `TestMethod` takes a `ref` parameter (`ByRef` in Visual Basic) of type `T`, a pointer to type `T`, and an array of `T`. This method returns a two-dimensional array of `T`. The code example saves the dynamic module to disk, so you can examine it using the MSIL Disassembler (Ildasm.exe).  \\n  \\n [!code-cpp[MakeXxxGenericTypeParameterBuilder#1](~/samples/snippets/cpp/VS_Snippets_CLR/MakeXxxGenericTypeParameterBuilder/cpp/source.cpp#1)]\\n [!code-csharp[MakeXxxGenericTypeParameterBuilder#1](~/samples/snippets/csharp/VS_Snippets_CLR/MakeXxxGenericTypeParameterBuilder/CS/source.cs#1)]\\n [!code-vb[MakeXxxGenericTypeParameterBuilder#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/MakeXxxGenericTypeParameterBuilder/VB/source.vb#1)]\"\n  syntax:\n    content: public override Type MakeByRefType ();\n    parameters: []\n    return:\n      type: System.Type\n      description: A <xref href=\"System.Type\"></xref> object that represents the current generic type parameter when passed as a reference parameter.\n  overload: System.Reflection.Emit.GenericTypeParameterBuilder.MakeByRefType*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/GenericTypeParameterBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.GenericTypeParameterBuilder.MakeGenericType(System.Type[])\n  commentId: M:System.Reflection.Emit.GenericTypeParameterBuilder.MakeGenericType(System.Type[])\n  id: MakeGenericType(System.Type[])\n  parent: System.Reflection.Emit.GenericTypeParameterBuilder\n  langs:\n  - csharp\n  name: MakeGenericType(Type[])\n  nameWithType: GenericTypeParameterBuilder.MakeGenericType(Type[])\n  fullName: GenericTypeParameterBuilder.MakeGenericType(Type[])\n  type: Method\n  assemblies:\n  - System.Reflection.Emit\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Not valid for incomplete generic type parameters.\n  syntax:\n    content: public override Type MakeGenericType (Type[] typeArguments);\n    parameters:\n    - id: typeArguments\n      type: System.Type[]\n      description: An array of type arguments.\n    return:\n      type: System.Type\n      description: This method is invalid for incomplete generic type parameters.\n  overload: System.Reflection.Emit.GenericTypeParameterBuilder.MakeGenericType*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: In all cases.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/GenericTypeParameterBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.GenericTypeParameterBuilder.MakePointerType\n  commentId: M:System.Reflection.Emit.GenericTypeParameterBuilder.MakePointerType\n  id: MakePointerType\n  parent: System.Reflection.Emit.GenericTypeParameterBuilder\n  langs:\n  - csharp\n  name: MakePointerType()\n  nameWithType: GenericTypeParameterBuilder.MakePointerType()\n  fullName: GenericTypeParameterBuilder.MakePointerType()\n  type: Method\n  assemblies:\n  - System.Reflection.Emit\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Returns a <xref href=\"System.Type\"></xref> object that represents a pointer to the current generic type parameter.\n  remarks: The <xref:System.Reflection.Emit.GenericTypeParameterBuilder.MakePointerType%2A> method provides a way to generate pointer types for parameter lists.\n  example:\n  - \"The following code example creates a dynamic module, an abstract generic type named `Sample` with one type parameter, `T`, and an abstract method named `TestMethod`. `TestMethod` takes a `ref` parameter (`ByRef` in Visual Basic) of type `T`, a pointer to type `T`, and an array of `T`. This method returns a two-dimensional array of `T`. The code example saves the dynamic module to disk, so you can examine it using the MSIL Disassembler (Ildasm.exe).  \\n  \\n [!code-cpp[MakeXxxGenericTypeParameterBuilder#1](~/samples/snippets/cpp/VS_Snippets_CLR/MakeXxxGenericTypeParameterBuilder/cpp/source.cpp#1)]\\n [!code-csharp[MakeXxxGenericTypeParameterBuilder#1](~/samples/snippets/csharp/VS_Snippets_CLR/MakeXxxGenericTypeParameterBuilder/CS/source.cs#1)]\\n [!code-vb[MakeXxxGenericTypeParameterBuilder#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/MakeXxxGenericTypeParameterBuilder/VB/source.vb#1)]\"\n  syntax:\n    content: public override Type MakePointerType ();\n    parameters: []\n    return:\n      type: System.Type\n      description: A <xref href=\"System.Type\"></xref> object that represents a pointer to the current generic type parameter.\n  overload: System.Reflection.Emit.GenericTypeParameterBuilder.MakePointerType*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/GenericTypeParameterBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.GenericTypeParameterBuilder.Module\n  commentId: P:System.Reflection.Emit.GenericTypeParameterBuilder.Module\n  id: Module\n  parent: System.Reflection.Emit.GenericTypeParameterBuilder\n  langs:\n  - csharp\n  name: Module\n  nameWithType: GenericTypeParameterBuilder.Module\n  fullName: GenericTypeParameterBuilder.Module\n  type: Property\n  assemblies:\n  - System.Reflection.Emit\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Gets the dynamic module that contains the generic type parameter.\n  syntax:\n    content: public override System.Reflection.Module Module { get; }\n    return:\n      type: System.Reflection.Module\n      description: A <xref href=\"System.Reflection.Module\"></xref> object that represents the dynamic module that contains the generic type parameter.\n  overload: System.Reflection.Emit.GenericTypeParameterBuilder.Module*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/GenericTypeParameterBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.GenericTypeParameterBuilder.Name\n  commentId: P:System.Reflection.Emit.GenericTypeParameterBuilder.Name\n  id: Name\n  parent: System.Reflection.Emit.GenericTypeParameterBuilder\n  langs:\n  - csharp\n  name: Name\n  nameWithType: GenericTypeParameterBuilder.Name\n  fullName: GenericTypeParameterBuilder.Name\n  type: Property\n  assemblies:\n  - System.Reflection.Emit\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Gets the name of the generic type parameter.\n  syntax:\n    content: public override string Name { get; }\n    return:\n      type: System.String\n      description: The name of the generic type parameter.\n  overload: System.Reflection.Emit.GenericTypeParameterBuilder.Name*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/GenericTypeParameterBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.GenericTypeParameterBuilder.Namespace\n  commentId: P:System.Reflection.Emit.GenericTypeParameterBuilder.Namespace\n  id: Namespace\n  parent: System.Reflection.Emit.GenericTypeParameterBuilder\n  langs:\n  - csharp\n  name: Namespace\n  nameWithType: GenericTypeParameterBuilder.Namespace\n  fullName: GenericTypeParameterBuilder.Namespace\n  type: Property\n  assemblies:\n  - System.Reflection.Emit\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Gets `null` in all cases.\n  syntax:\n    content: public override string Namespace { get; }\n    return:\n      type: System.String\n      description: A null reference (`Nothing` in Visual Basic) in all cases.\n  overload: System.Reflection.Emit.GenericTypeParameterBuilder.Namespace*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/GenericTypeParameterBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.GenericTypeParameterBuilder.ReflectedType\n  commentId: P:System.Reflection.Emit.GenericTypeParameterBuilder.ReflectedType\n  id: ReflectedType\n  parent: System.Reflection.Emit.GenericTypeParameterBuilder\n  langs:\n  - csharp\n  name: ReflectedType\n  nameWithType: GenericTypeParameterBuilder.ReflectedType\n  fullName: GenericTypeParameterBuilder.ReflectedType\n  type: Property\n  assemblies:\n  - mscorlib\n  - System.Reflection.Emit\n  namespace: System.Reflection.Emit\n  summary: Gets the <xref href=\"System.Type\"></xref> object that was used to obtain the <xref href=\"System.Reflection.Emit.GenericTypeParameterBuilder\"></xref>.\n  syntax:\n    content: public override Type ReflectedType { get; }\n    return:\n      type: System.Type\n      description: The <xref href=\"System.Type\"></xref> object that was used to obtain the <xref href=\"System.Reflection.Emit.GenericTypeParameterBuilder\"></xref>.\n  overload: System.Reflection.Emit.GenericTypeParameterBuilder.ReflectedType*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/GenericTypeParameterBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.GenericTypeParameterBuilder.SetBaseTypeConstraint(System.Type)\n  commentId: M:System.Reflection.Emit.GenericTypeParameterBuilder.SetBaseTypeConstraint(System.Type)\n  id: SetBaseTypeConstraint(System.Type)\n  parent: System.Reflection.Emit.GenericTypeParameterBuilder\n  langs:\n  - csharp\n  name: SetBaseTypeConstraint(Type)\n  nameWithType: GenericTypeParameterBuilder.SetBaseTypeConstraint(Type)\n  fullName: GenericTypeParameterBuilder.SetBaseTypeConstraint(Type)\n  type: Method\n  assemblies:\n  - System.Reflection.Emit\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Sets the base type that a type must inherit in order to be substituted for the type parameter.\n  remarks: \"To retrieve the base type constraint use the <xref:System.Reflection.Emit.GenericTypeParameterBuilder.BaseType%2A> property.  \\n  \\n Once you have created the generic type that contains the type parameter, you can use its <xref:System.Type> object to reflect the type parameter and their constraints. To get the type parameters of a completed generic type, use the <xref:System.Type.GetGenericArguments%2A?displayProperty=fullName> method. For each type parameter, get the base type constraint and interface constraints by using the <xref:System.Type.GetGenericParameterConstraints%2A?displayProperty=fullName> method, and get the special constraints by using the <xref:System.Type.GenericParameterAttributes%2A?displayProperty=fullName> property.\"\n  example:\n  - \"The following code example creates a generic type with two type parameters, the second of which has a base type constraint, and saves them in the assembly GenericEmitExample1.dll. You can use the [Ildasm.exe (IL Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md) to view the generated types. For a more detailed explanation of the steps involved in defining a dynamic generic type, see [How to: Define a Generic Type with Reflection Emit](~/docs/framework/reflection-and-codedom/how-to-define-a-generic-type-with-reflection-emit.md).  \\n  \\n [!code-cpp[EmitGenericType#1](~/samples/snippets/cpp/VS_Snippets_CLR/EmitGenericType/CPP/source.cpp#1)]\\n [!code-csharp[EmitGenericType#1](~/samples/snippets/csharp/VS_Snippets_CLR/EmitGenericType/CS/source.cs#1)]\\n [!code-vb[EmitGenericType#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/EmitGenericType/VB/source.vb#1)]\"\n  syntax:\n    content: public void SetBaseTypeConstraint (Type baseTypeConstraint);\n    parameters:\n    - id: baseTypeConstraint\n      type: System.Type\n      description: The <xref href=\"System.Type\"></xref> that must be inherited by any type that is to be substituted for the type parameter.\n  overload: System.Reflection.Emit.GenericTypeParameterBuilder.SetBaseTypeConstraint*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/GenericTypeParameterBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.GenericTypeParameterBuilder.SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)\n  commentId: M:System.Reflection.Emit.GenericTypeParameterBuilder.SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)\n  id: SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)\n  parent: System.Reflection.Emit.GenericTypeParameterBuilder\n  langs:\n  - csharp\n  name: SetCustomAttribute(CustomAttributeBuilder)\n  nameWithType: GenericTypeParameterBuilder.SetCustomAttribute(CustomAttributeBuilder)\n  fullName: GenericTypeParameterBuilder.SetCustomAttribute(CustomAttributeBuilder)\n  type: Method\n  assemblies:\n  - System.Reflection.Emit\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Set a custom attribute using a custom attribute builder.\n  syntax:\n    content: public void SetCustomAttribute (System.Reflection.Emit.CustomAttributeBuilder customBuilder);\n    parameters:\n    - id: customBuilder\n      type: System.Reflection.Emit.CustomAttributeBuilder\n      description: An instance of a helper class that defines the custom attribute.\n  overload: System.Reflection.Emit.GenericTypeParameterBuilder.SetCustomAttribute*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>customBuilder</code> is `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/GenericTypeParameterBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.GenericTypeParameterBuilder.SetCustomAttribute(System.Reflection.ConstructorInfo,System.Byte[])\n  commentId: M:System.Reflection.Emit.GenericTypeParameterBuilder.SetCustomAttribute(System.Reflection.ConstructorInfo,System.Byte[])\n  id: SetCustomAttribute(System.Reflection.ConstructorInfo,System.Byte[])\n  parent: System.Reflection.Emit.GenericTypeParameterBuilder\n  langs:\n  - csharp\n  name: SetCustomAttribute(ConstructorInfo, Byte[])\n  nameWithType: GenericTypeParameterBuilder.SetCustomAttribute(ConstructorInfo, Byte[])\n  fullName: GenericTypeParameterBuilder.SetCustomAttribute(ConstructorInfo, Byte[])\n  type: Method\n  assemblies:\n  - System.Reflection.Emit\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Sets a custom attribute using a specified custom attribute blob.\n  remarks: >-\n    > [!NOTE]\n\n    >  For details on how to format `binaryAttribute`, see the documentation for Partition II: Metadata Definition and Semantics. The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.\n  syntax:\n    content: public void SetCustomAttribute (System.Reflection.ConstructorInfo con, byte[] binaryAttribute);\n    parameters:\n    - id: con\n      type: System.Reflection.ConstructorInfo\n      description: The constructor for the custom attribute.\n    - id: binaryAttribute\n      type: System.Byte[]\n      description: A byte blob representing the attribute.\n  overload: System.Reflection.Emit.GenericTypeParameterBuilder.SetCustomAttribute*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"<code>con</code> is `null`.  \\n  \\n -or-  \\n  \\n <code>binaryAttribute</code> is a null reference.\"\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/GenericTypeParameterBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.GenericTypeParameterBuilder.SetGenericParameterAttributes(System.Reflection.GenericParameterAttributes)\n  commentId: M:System.Reflection.Emit.GenericTypeParameterBuilder.SetGenericParameterAttributes(System.Reflection.GenericParameterAttributes)\n  id: SetGenericParameterAttributes(System.Reflection.GenericParameterAttributes)\n  parent: System.Reflection.Emit.GenericTypeParameterBuilder\n  langs:\n  - csharp\n  name: SetGenericParameterAttributes(GenericParameterAttributes)\n  nameWithType: GenericTypeParameterBuilder.SetGenericParameterAttributes(GenericParameterAttributes)\n  fullName: GenericTypeParameterBuilder.SetGenericParameterAttributes(GenericParameterAttributes)\n  type: Method\n  assemblies:\n  - System.Reflection.Emit\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Sets the variance characteristics and special constraints of the generic parameter, such as the parameterless constructor constraint.\n  remarks: \"Special constraints can specify that any type assigned to the generic type parameter must have a default constructor, must be a reference type, or must be a value type.  \\n  \\n Special constraints cannot be retrieved using methods of the <xref:System.Reflection.Emit.GenericTypeParameterBuilder> class. Once you have created the generic type that contains the type parameter, you can use its <xref:System.Type> object to reflect the type parameters and their constraints. To get the type parameters of a completed generic type, use the <xref:System.Type.GetGenericArguments%2A?displayProperty=fullName> method. To get the special constraints for each type parameter, use the <xref:System.Type.GenericParameterAttributes%2A?displayProperty=fullName> property.  \\n  \\n The <xref:System.Reflection.GenericParameterAttributes> enumeration values that refer to the variance characteristics of a type parameter are relevant only in languages that support covariance and contravariance, such as Microsoft intermediate language (MSIL). Visual Basic and C# currently do not support covariance and contravariance.\"\n  example:\n  - \"The following code example creates a generic type with two type parameters, the first of which is constrained to have a default constructor and to be a reference type, and saves them in the assembly GenericEmitExample1.dll. You can use the [Ildasm.exe (IL Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md) to view the generated types. For a more detailed explanation of the steps involved in defining a dynamic generic type, see [How to: Define a Generic Type with Reflection Emit](~/docs/framework/reflection-and-codedom/how-to-define-a-generic-type-with-reflection-emit.md).  \\n  \\n [!code-cpp[EmitGenericType#1](~/samples/snippets/cpp/VS_Snippets_CLR/EmitGenericType/CPP/source.cpp#1)]\\n [!code-csharp[EmitGenericType#1](~/samples/snippets/csharp/VS_Snippets_CLR/EmitGenericType/CS/source.cs#1)]\\n [!code-vb[EmitGenericType#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/EmitGenericType/VB/source.vb#1)]\"\n  syntax:\n    content: public void SetGenericParameterAttributes (System.Reflection.GenericParameterAttributes genericParameterAttributes);\n    parameters:\n    - id: genericParameterAttributes\n      type: System.Reflection.GenericParameterAttributes\n      description: A bitwise combination of <xref href=\"System.Reflection.GenericParameterAttributes\"></xref> values that represent the variance characteristics and special constraints of the generic type parameter.\n  overload: System.Reflection.Emit.GenericTypeParameterBuilder.SetGenericParameterAttributes*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/GenericTypeParameterBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.GenericTypeParameterBuilder.SetInterfaceConstraints(System.Type[])\n  commentId: M:System.Reflection.Emit.GenericTypeParameterBuilder.SetInterfaceConstraints(System.Type[])\n  id: SetInterfaceConstraints(System.Type[])\n  parent: System.Reflection.Emit.GenericTypeParameterBuilder\n  langs:\n  - csharp\n  name: SetInterfaceConstraints(Type[])\n  nameWithType: GenericTypeParameterBuilder.SetInterfaceConstraints(Type[])\n  fullName: GenericTypeParameterBuilder.SetInterfaceConstraints(Type[])\n  type: Method\n  assemblies:\n  - System.Reflection.Emit\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Sets the interfaces a type must implement in order to be substituted for the type parameter.\n  remarks: Interface constraints cannot be retrieved using methods of the <xref:System.Reflection.Emit.GenericTypeParameterBuilder> class. Once you have created the generic type that contains the type parameter, you can use its <xref:System.Type> object to reflect the type parameters and their constraints. To get the type parameters of a completed generic type, use the <xref:System.Type.GetGenericArguments%2A?displayProperty=fullName> method. For each type parameter, get the base type constraint and interface constraints by using the <xref:System.Type.GetGenericParameterConstraints%2A?displayProperty=fullName> method.\n  example:\n  - \"The following code example creates a generic type with two type parameters, the second of which has two interface constraints, and saves them in the assembly GenericEmitExample1.dll. You can use the [Ildasm.exe (IL Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md) to view the generated types. For a more detailed explanation of the steps involved in defining a dynamic generic type, see [How to: Define a Generic Type with Reflection Emit](~/docs/framework/reflection-and-codedom/how-to-define-a-generic-type-with-reflection-emit.md).  \\n  \\n [!code-cpp[EmitGenericType#1](~/samples/snippets/cpp/VS_Snippets_CLR/EmitGenericType/CPP/source.cpp#1)]\\n [!code-csharp[EmitGenericType#1](~/samples/snippets/csharp/VS_Snippets_CLR/EmitGenericType/CS/source.cs#1)]\\n [!code-vb[EmitGenericType#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/EmitGenericType/VB/source.vb#1)]\"\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(true)]\n\n      public void SetInterfaceConstraints (Type[] interfaceConstraints);\n    parameters:\n    - id: interfaceConstraints\n      type: System.Type[]\n      description: An array of <xref href=\"System.Type\"></xref> objects that represent the interfaces a type must implement in order to be substituted for the type parameter.\n  overload: System.Reflection.Emit.GenericTypeParameterBuilder.SetInterfaceConstraints*\n  exceptions: []\n  attributes:\n  - type: System.Runtime.InteropServices.ComVisibleAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/GenericTypeParameterBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.GenericTypeParameterBuilder.ToString\n  commentId: M:System.Reflection.Emit.GenericTypeParameterBuilder.ToString\n  id: ToString\n  parent: System.Reflection.Emit.GenericTypeParameterBuilder\n  langs:\n  - csharp\n  name: ToString()\n  nameWithType: GenericTypeParameterBuilder.ToString()\n  fullName: GenericTypeParameterBuilder.ToString()\n  type: Method\n  assemblies:\n  - System.Reflection.Emit\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Returns a string representation of the current generic type parameter.\n  syntax:\n    content: public override string ToString ();\n    parameters: []\n    return:\n      type: System.String\n      description: A string that contains the name of the generic type parameter.\n  overload: System.Reflection.Emit.GenericTypeParameterBuilder.ToString*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/GenericTypeParameterBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.GenericTypeParameterBuilder.TypeHandle\n  commentId: P:System.Reflection.Emit.GenericTypeParameterBuilder.TypeHandle\n  id: TypeHandle\n  parent: System.Reflection.Emit.GenericTypeParameterBuilder\n  langs:\n  - csharp\n  name: TypeHandle\n  nameWithType: GenericTypeParameterBuilder.TypeHandle\n  fullName: GenericTypeParameterBuilder.TypeHandle\n  type: Property\n  assemblies:\n  - mscorlib\n  - System.Reflection.Emit\n  namespace: System.Reflection.Emit\n  summary: Not supported for incomplete generic type parameters.\n  remarks: This property is not supported for incomplete generic type parameters. Retrieve the type parameter from the completed generic type definition and then use reflection on the retrieved type.\n  syntax:\n    content: public override RuntimeTypeHandle TypeHandle { get; }\n    return:\n      type: System.RuntimeTypeHandle\n      description: Not supported for incomplete generic type parameters.\n  overload: System.Reflection.Emit.GenericTypeParameterBuilder.TypeHandle*\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: In all cases.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/GenericTypeParameterBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.GenericTypeParameterBuilder.UnderlyingSystemType\n  commentId: P:System.Reflection.Emit.GenericTypeParameterBuilder.UnderlyingSystemType\n  id: UnderlyingSystemType\n  parent: System.Reflection.Emit.GenericTypeParameterBuilder\n  langs:\n  - csharp\n  name: UnderlyingSystemType\n  nameWithType: GenericTypeParameterBuilder.UnderlyingSystemType\n  fullName: GenericTypeParameterBuilder.UnderlyingSystemType\n  type: Property\n  assemblies:\n  - mscorlib\n  - System.Reflection.Emit\n  namespace: System.Reflection.Emit\n  summary: Gets the current generic type parameter.\n  syntax:\n    content: public override Type UnderlyingSystemType { get; }\n    return:\n      type: System.Type\n      description: The current <xref href=\"System.Reflection.Emit.GenericTypeParameterBuilder\"></xref> object.\n  overload: System.Reflection.Emit.GenericTypeParameterBuilder.UnderlyingSystemType*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/GenericTypeParameterBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\nreferences:\n- uid: System.Reflection.TypeInfo\n  parent: System.Reflection\n  isExternal: false\n  name: TypeInfo\n  nameWithType: TypeInfo\n  fullName: System.Reflection.TypeInfo\n- uid: System.NotSupportedException\n  parent: System\n  isExternal: false\n  name: NotSupportedException\n  nameWithType: NotSupportedException\n  fullName: System.NotSupportedException\n- uid: System.InvalidOperationException\n  parent: System\n  isExternal: false\n  name: InvalidOperationException\n  nameWithType: InvalidOperationException\n  fullName: System.InvalidOperationException\n- uid: System.IndexOutOfRangeException\n  parent: System\n  isExternal: false\n  name: IndexOutOfRangeException\n  nameWithType: IndexOutOfRangeException\n  fullName: System.IndexOutOfRangeException\n- uid: System.ArgumentNullException\n  parent: System\n  isExternal: false\n  name: ArgumentNullException\n  nameWithType: ArgumentNullException\n  fullName: System.ArgumentNullException\n- uid: System.Reflection.Emit.GenericTypeParameterBuilder.#ctor\n  parent: System.Reflection.Emit.GenericTypeParameterBuilder\n  isExternal: false\n  name: GenericTypeParameterBuilder()\n  nameWithType: GenericTypeParameterBuilder.GenericTypeParameterBuilder()\n  fullName: GenericTypeParameterBuilder.GenericTypeParameterBuilder()\n- uid: System.Reflection.Emit.GenericTypeParameterBuilder.Assembly\n  parent: System.Reflection.Emit.GenericTypeParameterBuilder\n  isExternal: false\n  name: Assembly\n  nameWithType: GenericTypeParameterBuilder.Assembly\n  fullName: GenericTypeParameterBuilder.Assembly\n- uid: System.Reflection.Assembly\n  parent: System.Reflection\n  isExternal: false\n  name: Assembly\n  nameWithType: Assembly\n  fullName: System.Reflection.Assembly\n- uid: System.Reflection.Emit.GenericTypeParameterBuilder.AssemblyQualifiedName\n  parent: System.Reflection.Emit.GenericTypeParameterBuilder\n  isExternal: false\n  name: AssemblyQualifiedName\n  nameWithType: GenericTypeParameterBuilder.AssemblyQualifiedName\n  fullName: GenericTypeParameterBuilder.AssemblyQualifiedName\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Reflection.Emit.GenericTypeParameterBuilder.Attributes\n  parent: System.Reflection.Emit.GenericTypeParameterBuilder\n  isExternal: false\n  name: Attributes\n  nameWithType: GenericTypeParameterBuilder.Attributes\n  fullName: GenericTypeParameterBuilder.Attributes\n- uid: System.Reflection.TypeAttributes\n  parent: System.Reflection\n  isExternal: false\n  name: TypeAttributes\n  nameWithType: TypeAttributes\n  fullName: System.Reflection.TypeAttributes\n- uid: System.Reflection.Emit.GenericTypeParameterBuilder.BaseType\n  parent: System.Reflection.Emit.GenericTypeParameterBuilder\n  isExternal: false\n  name: BaseType\n  nameWithType: GenericTypeParameterBuilder.BaseType\n  fullName: GenericTypeParameterBuilder.BaseType\n- uid: System.Type\n  parent: System\n  isExternal: false\n  name: Type\n  nameWithType: Type\n  fullName: System.Type\n- uid: System.Reflection.Emit.GenericTypeParameterBuilder.ContainsGenericParameters\n  parent: System.Reflection.Emit.GenericTypeParameterBuilder\n  isExternal: false\n  name: ContainsGenericParameters\n  nameWithType: GenericTypeParameterBuilder.ContainsGenericParameters\n  fullName: GenericTypeParameterBuilder.ContainsGenericParameters\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Reflection.Emit.GenericTypeParameterBuilder.DeclaringMethod\n  parent: System.Reflection.Emit.GenericTypeParameterBuilder\n  isExternal: false\n  name: DeclaringMethod\n  nameWithType: GenericTypeParameterBuilder.DeclaringMethod\n  fullName: GenericTypeParameterBuilder.DeclaringMethod\n- uid: System.Reflection.MethodBase\n  parent: System.Reflection\n  isExternal: false\n  name: MethodBase\n  nameWithType: MethodBase\n  fullName: System.Reflection.MethodBase\n- uid: System.Reflection.Emit.GenericTypeParameterBuilder.DeclaringType\n  parent: System.Reflection.Emit.GenericTypeParameterBuilder\n  isExternal: false\n  name: DeclaringType\n  nameWithType: GenericTypeParameterBuilder.DeclaringType\n  fullName: GenericTypeParameterBuilder.DeclaringType\n- uid: System.Reflection.Emit.GenericTypeParameterBuilder.Equals(System.Object)\n  parent: System.Reflection.Emit.GenericTypeParameterBuilder\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: GenericTypeParameterBuilder.Equals(Object)\n  fullName: GenericTypeParameterBuilder.Equals(Object)\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.Reflection.Emit.GenericTypeParameterBuilder.FullName\n  parent: System.Reflection.Emit.GenericTypeParameterBuilder\n  isExternal: false\n  name: FullName\n  nameWithType: GenericTypeParameterBuilder.FullName\n  fullName: GenericTypeParameterBuilder.FullName\n- uid: System.Reflection.Emit.GenericTypeParameterBuilder.GenericParameterAttributes\n  parent: System.Reflection.Emit.GenericTypeParameterBuilder\n  isExternal: false\n  name: GenericParameterAttributes\n  nameWithType: GenericTypeParameterBuilder.GenericParameterAttributes\n  fullName: GenericTypeParameterBuilder.GenericParameterAttributes\n- uid: System.Reflection.GenericParameterAttributes\n  parent: System.Reflection\n  isExternal: false\n  name: GenericParameterAttributes\n  nameWithType: GenericParameterAttributes\n  fullName: System.Reflection.GenericParameterAttributes\n- uid: System.Reflection.Emit.GenericTypeParameterBuilder.GenericParameterPosition\n  parent: System.Reflection.Emit.GenericTypeParameterBuilder\n  isExternal: false\n  name: GenericParameterPosition\n  nameWithType: GenericTypeParameterBuilder.GenericParameterPosition\n  fullName: GenericTypeParameterBuilder.GenericParameterPosition\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Reflection.Emit.GenericTypeParameterBuilder.GenericTypeArguments\n  parent: System.Reflection.Emit.GenericTypeParameterBuilder\n  isExternal: false\n  name: GenericTypeArguments\n  nameWithType: GenericTypeParameterBuilder.GenericTypeArguments\n  fullName: GenericTypeParameterBuilder.GenericTypeArguments\n- uid: System.Type[]\n  parent: System\n  isExternal: false\n  name: Type[]\n  nameWithType: Type[]\n  fullName: System.Type[]\n  spec.csharp:\n  - uid: System.Type\n    name: Type\n    nameWithType: Type\n    fullName: System.Type\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Reflection.Emit.GenericTypeParameterBuilder.GetArrayRank\n  parent: System.Reflection.Emit.GenericTypeParameterBuilder\n  isExternal: false\n  name: GetArrayRank()\n  nameWithType: GenericTypeParameterBuilder.GetArrayRank()\n  fullName: GenericTypeParameterBuilder.GetArrayRank()\n- uid: System.Reflection.Emit.GenericTypeParameterBuilder.GetAttributeFlagsImpl\n  parent: System.Reflection.Emit.GenericTypeParameterBuilder\n  isExternal: false\n  name: GetAttributeFlagsImpl()\n  nameWithType: GenericTypeParameterBuilder.GetAttributeFlagsImpl()\n  fullName: GenericTypeParameterBuilder.GetAttributeFlagsImpl()\n- uid: System.Reflection.Emit.GenericTypeParameterBuilder.GetConstructorImpl(System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])\n  parent: System.Reflection.Emit.GenericTypeParameterBuilder\n  isExternal: false\n  name: GetConstructorImpl(BindingFlags, Binder, CallingConventions, Type[], ParameterModifier[])\n  nameWithType: GenericTypeParameterBuilder.GetConstructorImpl(BindingFlags, Binder, CallingConventions, Type[], ParameterModifier[])\n  fullName: GenericTypeParameterBuilder.GetConstructorImpl(BindingFlags, Binder, CallingConventions, Type[], ParameterModifier[])\n- uid: System.Reflection.ConstructorInfo\n  parent: System.Reflection\n  isExternal: false\n  name: ConstructorInfo\n  nameWithType: ConstructorInfo\n  fullName: System.Reflection.ConstructorInfo\n- uid: System.Reflection.BindingFlags\n  parent: System.Reflection\n  isExternal: false\n  name: BindingFlags\n  nameWithType: BindingFlags\n  fullName: System.Reflection.BindingFlags\n- uid: System.Reflection.Binder\n  parent: System.Reflection\n  isExternal: false\n  name: Binder\n  nameWithType: Binder\n  fullName: System.Reflection.Binder\n- uid: System.Reflection.CallingConventions\n  parent: System.Reflection\n  isExternal: false\n  name: CallingConventions\n  nameWithType: CallingConventions\n  fullName: System.Reflection.CallingConventions\n- uid: System.Reflection.ParameterModifier\n  name: ParameterModifier\n  nameWithType: ParameterModifier\n  fullName: System.Reflection.ParameterModifier\n- uid: System.Reflection.ParameterModifier[]\n  parent: System.Reflection\n  isExternal: false\n  name: ParameterModifier[]\n  nameWithType: ParameterModifier[]\n  fullName: System.Reflection.ParameterModifier[]\n  spec.csharp:\n  - uid: System.Reflection.ParameterModifier\n    name: ParameterModifier\n    nameWithType: ParameterModifier\n    fullName: System.Reflection.ParameterModifier\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Reflection.Emit.GenericTypeParameterBuilder.GetConstructors(System.Reflection.BindingFlags)\n  parent: System.Reflection.Emit.GenericTypeParameterBuilder\n  isExternal: false\n  name: GetConstructors(BindingFlags)\n  nameWithType: GenericTypeParameterBuilder.GetConstructors(BindingFlags)\n  fullName: GenericTypeParameterBuilder.GetConstructors(BindingFlags)\n- uid: System.Reflection.ConstructorInfo[]\n  parent: System.Reflection\n  isExternal: false\n  name: ConstructorInfo[]\n  nameWithType: ConstructorInfo[]\n  fullName: System.Reflection.ConstructorInfo[]\n  spec.csharp:\n  - uid: System.Reflection.ConstructorInfo\n    name: ConstructorInfo\n    nameWithType: ConstructorInfo\n    fullName: System.Reflection.ConstructorInfo\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Reflection.Emit.GenericTypeParameterBuilder.GetCustomAttributes(System.Boolean)\n  parent: System.Reflection.Emit.GenericTypeParameterBuilder\n  isExternal: false\n  name: GetCustomAttributes(Boolean)\n  nameWithType: GenericTypeParameterBuilder.GetCustomAttributes(Boolean)\n  fullName: GenericTypeParameterBuilder.GetCustomAttributes(Boolean)\n- uid: System.Object[]\n  parent: System\n  isExternal: false\n  name: Object[]\n  nameWithType: Object[]\n  fullName: System.Object[]\n  spec.csharp:\n  - uid: System.Object\n    name: Object\n    nameWithType: Object\n    fullName: System.Object\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Reflection.Emit.GenericTypeParameterBuilder.GetCustomAttributes(System.Type,System.Boolean)\n  parent: System.Reflection.Emit.GenericTypeParameterBuilder\n  isExternal: false\n  name: GetCustomAttributes(Type, Boolean)\n  nameWithType: GenericTypeParameterBuilder.GetCustomAttributes(Type, Boolean)\n  fullName: GenericTypeParameterBuilder.GetCustomAttributes(Type, Boolean)\n- uid: System.Reflection.Emit.GenericTypeParameterBuilder.GetElementType\n  parent: System.Reflection.Emit.GenericTypeParameterBuilder\n  isExternal: false\n  name: GetElementType()\n  nameWithType: GenericTypeParameterBuilder.GetElementType()\n  fullName: GenericTypeParameterBuilder.GetElementType()\n- uid: System.Reflection.Emit.GenericTypeParameterBuilder.GetEvent(System.String,System.Reflection.BindingFlags)\n  parent: System.Reflection.Emit.GenericTypeParameterBuilder\n  isExternal: false\n  name: GetEvent(String, BindingFlags)\n  nameWithType: GenericTypeParameterBuilder.GetEvent(String, BindingFlags)\n  fullName: GenericTypeParameterBuilder.GetEvent(String, BindingFlags)\n- uid: System.Reflection.EventInfo\n  parent: System.Reflection\n  isExternal: false\n  name: EventInfo\n  nameWithType: EventInfo\n  fullName: System.Reflection.EventInfo\n- uid: System.Reflection.Emit.GenericTypeParameterBuilder.GetEvents\n  parent: System.Reflection.Emit.GenericTypeParameterBuilder\n  isExternal: false\n  name: GetEvents()\n  nameWithType: GenericTypeParameterBuilder.GetEvents()\n  fullName: GenericTypeParameterBuilder.GetEvents()\n- uid: System.Reflection.EventInfo[]\n  parent: System.Reflection\n  isExternal: false\n  name: EventInfo[]\n  nameWithType: EventInfo[]\n  fullName: System.Reflection.EventInfo[]\n  spec.csharp:\n  - uid: System.Reflection.EventInfo\n    name: EventInfo\n    nameWithType: EventInfo\n    fullName: System.Reflection.EventInfo\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Reflection.Emit.GenericTypeParameterBuilder.GetEvents(System.Reflection.BindingFlags)\n  parent: System.Reflection.Emit.GenericTypeParameterBuilder\n  isExternal: false\n  name: GetEvents(BindingFlags)\n  nameWithType: GenericTypeParameterBuilder.GetEvents(BindingFlags)\n  fullName: GenericTypeParameterBuilder.GetEvents(BindingFlags)\n- uid: System.Reflection.Emit.GenericTypeParameterBuilder.GetField(System.String,System.Reflection.BindingFlags)\n  parent: System.Reflection.Emit.GenericTypeParameterBuilder\n  isExternal: false\n  name: GetField(String, BindingFlags)\n  nameWithType: GenericTypeParameterBuilder.GetField(String, BindingFlags)\n  fullName: GenericTypeParameterBuilder.GetField(String, BindingFlags)\n- uid: System.Reflection.FieldInfo\n  parent: System.Reflection\n  isExternal: false\n  name: FieldInfo\n  nameWithType: FieldInfo\n  fullName: System.Reflection.FieldInfo\n- uid: System.Reflection.Emit.GenericTypeParameterBuilder.GetFields(System.Reflection.BindingFlags)\n  parent: System.Reflection.Emit.GenericTypeParameterBuilder\n  isExternal: false\n  name: GetFields(BindingFlags)\n  nameWithType: GenericTypeParameterBuilder.GetFields(BindingFlags)\n  fullName: GenericTypeParameterBuilder.GetFields(BindingFlags)\n- uid: System.Reflection.FieldInfo[]\n  parent: System.Reflection\n  isExternal: false\n  name: FieldInfo[]\n  nameWithType: FieldInfo[]\n  fullName: System.Reflection.FieldInfo[]\n  spec.csharp:\n  - uid: System.Reflection.FieldInfo\n    name: FieldInfo\n    nameWithType: FieldInfo\n    fullName: System.Reflection.FieldInfo\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Reflection.Emit.GenericTypeParameterBuilder.GetGenericArguments\n  parent: System.Reflection.Emit.GenericTypeParameterBuilder\n  isExternal: false\n  name: GetGenericArguments()\n  nameWithType: GenericTypeParameterBuilder.GetGenericArguments()\n  fullName: GenericTypeParameterBuilder.GetGenericArguments()\n- uid: System.Reflection.Emit.GenericTypeParameterBuilder.GetGenericParameterConstraints\n  parent: System.Reflection.Emit.GenericTypeParameterBuilder\n  isExternal: false\n  name: GetGenericParameterConstraints()\n  nameWithType: GenericTypeParameterBuilder.GetGenericParameterConstraints()\n  fullName: GenericTypeParameterBuilder.GetGenericParameterConstraints()\n- uid: System.Reflection.Emit.GenericTypeParameterBuilder.GetGenericTypeDefinition\n  parent: System.Reflection.Emit.GenericTypeParameterBuilder\n  isExternal: false\n  name: GetGenericTypeDefinition()\n  nameWithType: GenericTypeParameterBuilder.GetGenericTypeDefinition()\n  fullName: GenericTypeParameterBuilder.GetGenericTypeDefinition()\n- uid: System.Reflection.Emit.GenericTypeParameterBuilder.GetHashCode\n  parent: System.Reflection.Emit.GenericTypeParameterBuilder\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: GenericTypeParameterBuilder.GetHashCode()\n  fullName: GenericTypeParameterBuilder.GetHashCode()\n- uid: System.Reflection.Emit.GenericTypeParameterBuilder.GetInterface(System.String,System.Boolean)\n  parent: System.Reflection.Emit.GenericTypeParameterBuilder\n  isExternal: false\n  name: GetInterface(String, Boolean)\n  nameWithType: GenericTypeParameterBuilder.GetInterface(String, Boolean)\n  fullName: GenericTypeParameterBuilder.GetInterface(String, Boolean)\n- uid: System.Reflection.Emit.GenericTypeParameterBuilder.GetInterfaceMap(System.Type)\n  parent: System.Reflection.Emit.GenericTypeParameterBuilder\n  isExternal: false\n  name: GetInterfaceMap(Type)\n  nameWithType: GenericTypeParameterBuilder.GetInterfaceMap(Type)\n  fullName: GenericTypeParameterBuilder.GetInterfaceMap(Type)\n- uid: System.Reflection.InterfaceMapping\n  parent: System.Reflection\n  isExternal: false\n  name: InterfaceMapping\n  nameWithType: InterfaceMapping\n  fullName: System.Reflection.InterfaceMapping\n- uid: System.Reflection.Emit.GenericTypeParameterBuilder.GetInterfaces\n  parent: System.Reflection.Emit.GenericTypeParameterBuilder\n  isExternal: false\n  name: GetInterfaces()\n  nameWithType: GenericTypeParameterBuilder.GetInterfaces()\n  fullName: GenericTypeParameterBuilder.GetInterfaces()\n- uid: System.Reflection.Emit.GenericTypeParameterBuilder.GetMember(System.String,System.Reflection.MemberTypes,System.Reflection.BindingFlags)\n  parent: System.Reflection.Emit.GenericTypeParameterBuilder\n  isExternal: false\n  name: GetMember(String, MemberTypes, BindingFlags)\n  nameWithType: GenericTypeParameterBuilder.GetMember(String, MemberTypes, BindingFlags)\n  fullName: GenericTypeParameterBuilder.GetMember(String, MemberTypes, BindingFlags)\n- uid: System.Reflection.MemberInfo\n  name: MemberInfo\n  nameWithType: MemberInfo\n  fullName: System.Reflection.MemberInfo\n- uid: System.Reflection.MemberInfo[]\n  parent: System.Reflection\n  isExternal: false\n  name: MemberInfo[]\n  nameWithType: MemberInfo[]\n  fullName: System.Reflection.MemberInfo[]\n  spec.csharp:\n  - uid: System.Reflection.MemberInfo\n    name: MemberInfo\n    nameWithType: MemberInfo\n    fullName: System.Reflection.MemberInfo\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Reflection.MemberTypes\n  parent: System.Reflection\n  isExternal: false\n  name: MemberTypes\n  nameWithType: MemberTypes\n  fullName: System.Reflection.MemberTypes\n- uid: System.Reflection.Emit.GenericTypeParameterBuilder.GetMembers(System.Reflection.BindingFlags)\n  parent: System.Reflection.Emit.GenericTypeParameterBuilder\n  isExternal: false\n  name: GetMembers(BindingFlags)\n  nameWithType: GenericTypeParameterBuilder.GetMembers(BindingFlags)\n  fullName: GenericTypeParameterBuilder.GetMembers(BindingFlags)\n- uid: System.Reflection.Emit.GenericTypeParameterBuilder.GetMethodImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])\n  parent: System.Reflection.Emit.GenericTypeParameterBuilder\n  isExternal: false\n  name: GetMethodImpl(String, BindingFlags, Binder, CallingConventions, Type[], ParameterModifier[])\n  nameWithType: GenericTypeParameterBuilder.GetMethodImpl(String, BindingFlags, Binder, CallingConventions, Type[], ParameterModifier[])\n  fullName: GenericTypeParameterBuilder.GetMethodImpl(String, BindingFlags, Binder, CallingConventions, Type[], ParameterModifier[])\n- uid: System.Reflection.MethodInfo\n  parent: System.Reflection\n  isExternal: false\n  name: MethodInfo\n  nameWithType: MethodInfo\n  fullName: System.Reflection.MethodInfo\n- uid: System.Reflection.Emit.GenericTypeParameterBuilder.GetMethods(System.Reflection.BindingFlags)\n  parent: System.Reflection.Emit.GenericTypeParameterBuilder\n  isExternal: false\n  name: GetMethods(BindingFlags)\n  nameWithType: GenericTypeParameterBuilder.GetMethods(BindingFlags)\n  fullName: GenericTypeParameterBuilder.GetMethods(BindingFlags)\n- uid: System.Reflection.MethodInfo[]\n  parent: System.Reflection\n  isExternal: false\n  name: MethodInfo[]\n  nameWithType: MethodInfo[]\n  fullName: System.Reflection.MethodInfo[]\n  spec.csharp:\n  - uid: System.Reflection.MethodInfo\n    name: MethodInfo\n    nameWithType: MethodInfo\n    fullName: System.Reflection.MethodInfo\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Reflection.Emit.GenericTypeParameterBuilder.GetNestedType(System.String,System.Reflection.BindingFlags)\n  parent: System.Reflection.Emit.GenericTypeParameterBuilder\n  isExternal: false\n  name: GetNestedType(String, BindingFlags)\n  nameWithType: GenericTypeParameterBuilder.GetNestedType(String, BindingFlags)\n  fullName: GenericTypeParameterBuilder.GetNestedType(String, BindingFlags)\n- uid: System.Reflection.Emit.GenericTypeParameterBuilder.GetNestedTypes(System.Reflection.BindingFlags)\n  parent: System.Reflection.Emit.GenericTypeParameterBuilder\n  isExternal: false\n  name: GetNestedTypes(BindingFlags)\n  nameWithType: GenericTypeParameterBuilder.GetNestedTypes(BindingFlags)\n  fullName: GenericTypeParameterBuilder.GetNestedTypes(BindingFlags)\n- uid: System.Reflection.Emit.GenericTypeParameterBuilder.GetProperties(System.Reflection.BindingFlags)\n  parent: System.Reflection.Emit.GenericTypeParameterBuilder\n  isExternal: false\n  name: GetProperties(BindingFlags)\n  nameWithType: GenericTypeParameterBuilder.GetProperties(BindingFlags)\n  fullName: GenericTypeParameterBuilder.GetProperties(BindingFlags)\n- uid: System.Reflection.PropertyInfo\n  name: PropertyInfo\n  nameWithType: PropertyInfo\n  fullName: System.Reflection.PropertyInfo\n- uid: System.Reflection.PropertyInfo[]\n  parent: System.Reflection\n  isExternal: false\n  name: PropertyInfo[]\n  nameWithType: PropertyInfo[]\n  fullName: System.Reflection.PropertyInfo[]\n  spec.csharp:\n  - uid: System.Reflection.PropertyInfo\n    name: PropertyInfo\n    nameWithType: PropertyInfo\n    fullName: System.Reflection.PropertyInfo\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Reflection.Emit.GenericTypeParameterBuilder.GetPropertyImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type,System.Type[],System.Reflection.ParameterModifier[])\n  parent: System.Reflection.Emit.GenericTypeParameterBuilder\n  isExternal: false\n  name: GetPropertyImpl(String, BindingFlags, Binder, Type, Type[], ParameterModifier[])\n  nameWithType: GenericTypeParameterBuilder.GetPropertyImpl(String, BindingFlags, Binder, Type, Type[], ParameterModifier[])\n  fullName: GenericTypeParameterBuilder.GetPropertyImpl(String, BindingFlags, Binder, Type, Type[], ParameterModifier[])\n- uid: System.Reflection.Emit.GenericTypeParameterBuilder.GUID\n  parent: System.Reflection.Emit.GenericTypeParameterBuilder\n  isExternal: false\n  name: GUID\n  nameWithType: GenericTypeParameterBuilder.GUID\n  fullName: GenericTypeParameterBuilder.GUID\n- uid: System.Guid\n  parent: System\n  isExternal: false\n  name: Guid\n  nameWithType: Guid\n  fullName: System.Guid\n- uid: System.Reflection.Emit.GenericTypeParameterBuilder.HasElementTypeImpl\n  parent: System.Reflection.Emit.GenericTypeParameterBuilder\n  isExternal: false\n  name: HasElementTypeImpl()\n  nameWithType: GenericTypeParameterBuilder.HasElementTypeImpl()\n  fullName: GenericTypeParameterBuilder.HasElementTypeImpl()\n- uid: System.Reflection.Emit.GenericTypeParameterBuilder.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])\n  parent: System.Reflection.Emit.GenericTypeParameterBuilder\n  isExternal: false\n  name: InvokeMember(String, BindingFlags, Binder, Object, Object[], ParameterModifier[], CultureInfo, String[])\n  nameWithType: GenericTypeParameterBuilder.InvokeMember(String, BindingFlags, Binder, Object, Object[], ParameterModifier[], CultureInfo, String[])\n  fullName: GenericTypeParameterBuilder.InvokeMember(String, BindingFlags, Binder, Object, Object[], ParameterModifier[], CultureInfo, String[])\n- uid: System.Globalization.CultureInfo\n  parent: System.Globalization\n  isExternal: false\n  name: CultureInfo\n  nameWithType: CultureInfo\n  fullName: System.Globalization.CultureInfo\n- uid: System.String[]\n  parent: System\n  isExternal: false\n  name: String[]\n  nameWithType: String[]\n  fullName: System.String[]\n  spec.csharp:\n  - uid: System.String\n    name: String\n    nameWithType: String\n    fullName: System.String\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Reflection.Emit.GenericTypeParameterBuilder.IsArrayImpl\n  parent: System.Reflection.Emit.GenericTypeParameterBuilder\n  isExternal: false\n  name: IsArrayImpl()\n  nameWithType: GenericTypeParameterBuilder.IsArrayImpl()\n  fullName: GenericTypeParameterBuilder.IsArrayImpl()\n- uid: System.Reflection.Emit.GenericTypeParameterBuilder.IsAssignableFrom(System.Reflection.TypeInfo)\n  parent: System.Reflection.Emit.GenericTypeParameterBuilder\n  isExternal: false\n  name: IsAssignableFrom(TypeInfo)\n  nameWithType: GenericTypeParameterBuilder.IsAssignableFrom(TypeInfo)\n  fullName: GenericTypeParameterBuilder.IsAssignableFrom(TypeInfo)\n- uid: System.Reflection.Emit.GenericTypeParameterBuilder.IsAssignableFrom(System.Type)\n  parent: System.Reflection.Emit.GenericTypeParameterBuilder\n  isExternal: false\n  name: IsAssignableFrom(Type)\n  nameWithType: GenericTypeParameterBuilder.IsAssignableFrom(Type)\n  fullName: GenericTypeParameterBuilder.IsAssignableFrom(Type)\n- uid: System.Reflection.Emit.GenericTypeParameterBuilder.IsByRefImpl\n  parent: System.Reflection.Emit.GenericTypeParameterBuilder\n  isExternal: false\n  name: IsByRefImpl()\n  nameWithType: GenericTypeParameterBuilder.IsByRefImpl()\n  fullName: GenericTypeParameterBuilder.IsByRefImpl()\n- uid: System.Reflection.Emit.GenericTypeParameterBuilder.IsCOMObjectImpl\n  parent: System.Reflection.Emit.GenericTypeParameterBuilder\n  isExternal: false\n  name: IsCOMObjectImpl()\n  nameWithType: GenericTypeParameterBuilder.IsCOMObjectImpl()\n  fullName: GenericTypeParameterBuilder.IsCOMObjectImpl()\n- uid: System.Reflection.Emit.GenericTypeParameterBuilder.IsConstructedGenericType\n  parent: System.Reflection.Emit.GenericTypeParameterBuilder\n  isExternal: false\n  name: IsConstructedGenericType\n  nameWithType: GenericTypeParameterBuilder.IsConstructedGenericType\n  fullName: GenericTypeParameterBuilder.IsConstructedGenericType\n- uid: System.Reflection.Emit.GenericTypeParameterBuilder.IsDefined(System.Type,System.Boolean)\n  parent: System.Reflection.Emit.GenericTypeParameterBuilder\n  isExternal: false\n  name: IsDefined(Type, Boolean)\n  nameWithType: GenericTypeParameterBuilder.IsDefined(Type, Boolean)\n  fullName: GenericTypeParameterBuilder.IsDefined(Type, Boolean)\n- uid: System.Reflection.Emit.GenericTypeParameterBuilder.IsEnum\n  parent: System.Reflection.Emit.GenericTypeParameterBuilder\n  isExternal: false\n  name: IsEnum\n  nameWithType: GenericTypeParameterBuilder.IsEnum\n  fullName: GenericTypeParameterBuilder.IsEnum\n- uid: System.Reflection.Emit.GenericTypeParameterBuilder.IsGenericParameter\n  parent: System.Reflection.Emit.GenericTypeParameterBuilder\n  isExternal: false\n  name: IsGenericParameter\n  nameWithType: GenericTypeParameterBuilder.IsGenericParameter\n  fullName: GenericTypeParameterBuilder.IsGenericParameter\n- uid: System.Reflection.Emit.GenericTypeParameterBuilder.IsGenericType\n  parent: System.Reflection.Emit.GenericTypeParameterBuilder\n  isExternal: false\n  name: IsGenericType\n  nameWithType: GenericTypeParameterBuilder.IsGenericType\n  fullName: GenericTypeParameterBuilder.IsGenericType\n- uid: System.Reflection.Emit.GenericTypeParameterBuilder.IsGenericTypeDefinition\n  parent: System.Reflection.Emit.GenericTypeParameterBuilder\n  isExternal: false\n  name: IsGenericTypeDefinition\n  nameWithType: GenericTypeParameterBuilder.IsGenericTypeDefinition\n  fullName: GenericTypeParameterBuilder.IsGenericTypeDefinition\n- uid: System.Reflection.Emit.GenericTypeParameterBuilder.IsInstanceOfType(System.Object)\n  parent: System.Reflection.Emit.GenericTypeParameterBuilder\n  isExternal: false\n  name: IsInstanceOfType(Object)\n  nameWithType: GenericTypeParameterBuilder.IsInstanceOfType(Object)\n  fullName: GenericTypeParameterBuilder.IsInstanceOfType(Object)\n- uid: System.Reflection.Emit.GenericTypeParameterBuilder.IsPointerImpl\n  parent: System.Reflection.Emit.GenericTypeParameterBuilder\n  isExternal: false\n  name: IsPointerImpl()\n  nameWithType: GenericTypeParameterBuilder.IsPointerImpl()\n  fullName: GenericTypeParameterBuilder.IsPointerImpl()\n- uid: System.Reflection.Emit.GenericTypeParameterBuilder.IsPrimitiveImpl\n  parent: System.Reflection.Emit.GenericTypeParameterBuilder\n  isExternal: false\n  name: IsPrimitiveImpl()\n  nameWithType: GenericTypeParameterBuilder.IsPrimitiveImpl()\n  fullName: GenericTypeParameterBuilder.IsPrimitiveImpl()\n- uid: System.Reflection.Emit.GenericTypeParameterBuilder.IsSerializable\n  parent: System.Reflection.Emit.GenericTypeParameterBuilder\n  isExternal: false\n  name: IsSerializable\n  nameWithType: GenericTypeParameterBuilder.IsSerializable\n  fullName: GenericTypeParameterBuilder.IsSerializable\n- uid: System.Reflection.Emit.GenericTypeParameterBuilder.IsSubclassOf(System.Type)\n  parent: System.Reflection.Emit.GenericTypeParameterBuilder\n  isExternal: false\n  name: IsSubclassOf(Type)\n  nameWithType: GenericTypeParameterBuilder.IsSubclassOf(Type)\n  fullName: GenericTypeParameterBuilder.IsSubclassOf(Type)\n- uid: System.Reflection.Emit.GenericTypeParameterBuilder.IsSZArray\n  parent: System.Reflection.Emit.GenericTypeParameterBuilder\n  isExternal: false\n  name: IsSZArray\n  nameWithType: GenericTypeParameterBuilder.IsSZArray\n  fullName: GenericTypeParameterBuilder.IsSZArray\n- uid: System.Reflection.Emit.GenericTypeParameterBuilder.IsTypeDefinition\n  parent: System.Reflection.Emit.GenericTypeParameterBuilder\n  isExternal: false\n  name: IsTypeDefinition\n  nameWithType: GenericTypeParameterBuilder.IsTypeDefinition\n  fullName: GenericTypeParameterBuilder.IsTypeDefinition\n- uid: System.Reflection.Emit.GenericTypeParameterBuilder.IsValueTypeImpl\n  parent: System.Reflection.Emit.GenericTypeParameterBuilder\n  isExternal: false\n  name: IsValueTypeImpl()\n  nameWithType: GenericTypeParameterBuilder.IsValueTypeImpl()\n  fullName: GenericTypeParameterBuilder.IsValueTypeImpl()\n- uid: System.Reflection.Emit.GenericTypeParameterBuilder.IsVariableBoundArray\n  parent: System.Reflection.Emit.GenericTypeParameterBuilder\n  isExternal: false\n  name: IsVariableBoundArray\n  nameWithType: GenericTypeParameterBuilder.IsVariableBoundArray\n  fullName: GenericTypeParameterBuilder.IsVariableBoundArray\n- uid: System.Reflection.Emit.GenericTypeParameterBuilder.MakeArrayType\n  parent: System.Reflection.Emit.GenericTypeParameterBuilder\n  isExternal: false\n  name: MakeArrayType()\n  nameWithType: GenericTypeParameterBuilder.MakeArrayType()\n  fullName: GenericTypeParameterBuilder.MakeArrayType()\n- uid: System.Reflection.Emit.GenericTypeParameterBuilder.MakeArrayType(System.Int32)\n  parent: System.Reflection.Emit.GenericTypeParameterBuilder\n  isExternal: false\n  name: MakeArrayType(Int32)\n  nameWithType: GenericTypeParameterBuilder.MakeArrayType(Int32)\n  fullName: GenericTypeParameterBuilder.MakeArrayType(Int32)\n- uid: System.Reflection.Emit.GenericTypeParameterBuilder.MakeByRefType\n  parent: System.Reflection.Emit.GenericTypeParameterBuilder\n  isExternal: false\n  name: MakeByRefType()\n  nameWithType: GenericTypeParameterBuilder.MakeByRefType()\n  fullName: GenericTypeParameterBuilder.MakeByRefType()\n- uid: System.Reflection.Emit.GenericTypeParameterBuilder.MakeGenericType(System.Type[])\n  parent: System.Reflection.Emit.GenericTypeParameterBuilder\n  isExternal: false\n  name: MakeGenericType(Type[])\n  nameWithType: GenericTypeParameterBuilder.MakeGenericType(Type[])\n  fullName: GenericTypeParameterBuilder.MakeGenericType(Type[])\n- uid: System.Reflection.Emit.GenericTypeParameterBuilder.MakePointerType\n  parent: System.Reflection.Emit.GenericTypeParameterBuilder\n  isExternal: false\n  name: MakePointerType()\n  nameWithType: GenericTypeParameterBuilder.MakePointerType()\n  fullName: GenericTypeParameterBuilder.MakePointerType()\n- uid: System.Reflection.Emit.GenericTypeParameterBuilder.Module\n  parent: System.Reflection.Emit.GenericTypeParameterBuilder\n  isExternal: false\n  name: Module\n  nameWithType: GenericTypeParameterBuilder.Module\n  fullName: GenericTypeParameterBuilder.Module\n- uid: System.Reflection.Module\n  parent: System.Reflection\n  isExternal: false\n  name: Module\n  nameWithType: Module\n  fullName: System.Reflection.Module\n- uid: System.Reflection.Emit.GenericTypeParameterBuilder.Name\n  parent: System.Reflection.Emit.GenericTypeParameterBuilder\n  isExternal: false\n  name: Name\n  nameWithType: GenericTypeParameterBuilder.Name\n  fullName: GenericTypeParameterBuilder.Name\n- uid: System.Reflection.Emit.GenericTypeParameterBuilder.Namespace\n  parent: System.Reflection.Emit.GenericTypeParameterBuilder\n  isExternal: false\n  name: Namespace\n  nameWithType: GenericTypeParameterBuilder.Namespace\n  fullName: GenericTypeParameterBuilder.Namespace\n- uid: System.Reflection.Emit.GenericTypeParameterBuilder.ReflectedType\n  parent: System.Reflection.Emit.GenericTypeParameterBuilder\n  isExternal: false\n  name: ReflectedType\n  nameWithType: GenericTypeParameterBuilder.ReflectedType\n  fullName: GenericTypeParameterBuilder.ReflectedType\n- uid: System.Reflection.Emit.GenericTypeParameterBuilder.SetBaseTypeConstraint(System.Type)\n  parent: System.Reflection.Emit.GenericTypeParameterBuilder\n  isExternal: false\n  name: SetBaseTypeConstraint(Type)\n  nameWithType: GenericTypeParameterBuilder.SetBaseTypeConstraint(Type)\n  fullName: GenericTypeParameterBuilder.SetBaseTypeConstraint(Type)\n- uid: System.Reflection.Emit.GenericTypeParameterBuilder.SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)\n  parent: System.Reflection.Emit.GenericTypeParameterBuilder\n  isExternal: false\n  name: SetCustomAttribute(CustomAttributeBuilder)\n  nameWithType: GenericTypeParameterBuilder.SetCustomAttribute(CustomAttributeBuilder)\n  fullName: GenericTypeParameterBuilder.SetCustomAttribute(CustomAttributeBuilder)\n- uid: System.Reflection.Emit.CustomAttributeBuilder\n  parent: System.Reflection.Emit\n  isExternal: false\n  name: CustomAttributeBuilder\n  nameWithType: CustomAttributeBuilder\n  fullName: System.Reflection.Emit.CustomAttributeBuilder\n- uid: System.Reflection.Emit.GenericTypeParameterBuilder.SetCustomAttribute(System.Reflection.ConstructorInfo,System.Byte[])\n  parent: System.Reflection.Emit.GenericTypeParameterBuilder\n  isExternal: false\n  name: SetCustomAttribute(ConstructorInfo, Byte[])\n  nameWithType: GenericTypeParameterBuilder.SetCustomAttribute(ConstructorInfo, Byte[])\n  fullName: GenericTypeParameterBuilder.SetCustomAttribute(ConstructorInfo, Byte[])\n- uid: System.Byte\n  name: Byte\n  nameWithType: Byte\n  fullName: System.Byte\n- uid: System.Byte[]\n  parent: System\n  isExternal: false\n  name: Byte[]\n  nameWithType: Byte[]\n  fullName: System.Byte[]\n  spec.csharp:\n  - uid: System.Byte\n    name: Byte\n    nameWithType: Byte\n    fullName: System.Byte\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Reflection.Emit.GenericTypeParameterBuilder.SetGenericParameterAttributes(System.Reflection.GenericParameterAttributes)\n  parent: System.Reflection.Emit.GenericTypeParameterBuilder\n  isExternal: false\n  name: SetGenericParameterAttributes(GenericParameterAttributes)\n  nameWithType: GenericTypeParameterBuilder.SetGenericParameterAttributes(GenericParameterAttributes)\n  fullName: GenericTypeParameterBuilder.SetGenericParameterAttributes(GenericParameterAttributes)\n- uid: System.Reflection.Emit.GenericTypeParameterBuilder.SetInterfaceConstraints(System.Type[])\n  parent: System.Reflection.Emit.GenericTypeParameterBuilder\n  isExternal: false\n  name: SetInterfaceConstraints(Type[])\n  nameWithType: GenericTypeParameterBuilder.SetInterfaceConstraints(Type[])\n  fullName: GenericTypeParameterBuilder.SetInterfaceConstraints(Type[])\n- uid: System.Reflection.Emit.GenericTypeParameterBuilder.ToString\n  parent: System.Reflection.Emit.GenericTypeParameterBuilder\n  isExternal: false\n  name: ToString()\n  nameWithType: GenericTypeParameterBuilder.ToString()\n  fullName: GenericTypeParameterBuilder.ToString()\n- uid: System.Reflection.Emit.GenericTypeParameterBuilder.TypeHandle\n  parent: System.Reflection.Emit.GenericTypeParameterBuilder\n  isExternal: false\n  name: TypeHandle\n  nameWithType: GenericTypeParameterBuilder.TypeHandle\n  fullName: GenericTypeParameterBuilder.TypeHandle\n- uid: System.RuntimeTypeHandle\n  parent: System\n  isExternal: false\n  name: RuntimeTypeHandle\n  nameWithType: RuntimeTypeHandle\n  fullName: System.RuntimeTypeHandle\n- uid: System.Reflection.Emit.GenericTypeParameterBuilder.UnderlyingSystemType\n  parent: System.Reflection.Emit.GenericTypeParameterBuilder\n  isExternal: false\n  name: UnderlyingSystemType\n  nameWithType: GenericTypeParameterBuilder.UnderlyingSystemType\n  fullName: GenericTypeParameterBuilder.UnderlyingSystemType\n- uid: System.Reflection.Emit.GenericTypeParameterBuilder.#ctor*\n  parent: System.Reflection.Emit.GenericTypeParameterBuilder\n  isExternal: false\n  name: GenericTypeParameterBuilder\n  nameWithType: GenericTypeParameterBuilder.GenericTypeParameterBuilder\n  fullName: GenericTypeParameterBuilder.GenericTypeParameterBuilder\n  monikers:\n  - xamarinios-10.8\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/GenericTypeParameterBuilder.xml\n- uid: System.Reflection.Emit.GenericTypeParameterBuilder.Assembly*\n  parent: System.Reflection.Emit.GenericTypeParameterBuilder\n  isExternal: false\n  name: Assembly\n  nameWithType: GenericTypeParameterBuilder.Assembly\n  fullName: GenericTypeParameterBuilder.Assembly\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/GenericTypeParameterBuilder.xml\n- uid: System.Reflection.Emit.GenericTypeParameterBuilder.AssemblyQualifiedName*\n  parent: System.Reflection.Emit.GenericTypeParameterBuilder\n  isExternal: false\n  name: AssemblyQualifiedName\n  nameWithType: GenericTypeParameterBuilder.AssemblyQualifiedName\n  fullName: GenericTypeParameterBuilder.AssemblyQualifiedName\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/GenericTypeParameterBuilder.xml\n- uid: System.Reflection.Emit.GenericTypeParameterBuilder.Attributes*\n  parent: System.Reflection.Emit.GenericTypeParameterBuilder\n  isExternal: false\n  name: Attributes\n  nameWithType: GenericTypeParameterBuilder.Attributes\n  fullName: GenericTypeParameterBuilder.Attributes\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/GenericTypeParameterBuilder.xml\n- uid: System.Reflection.Emit.GenericTypeParameterBuilder.BaseType*\n  parent: System.Reflection.Emit.GenericTypeParameterBuilder\n  isExternal: false\n  name: BaseType\n  nameWithType: GenericTypeParameterBuilder.BaseType\n  fullName: GenericTypeParameterBuilder.BaseType\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/GenericTypeParameterBuilder.xml\n- uid: System.Reflection.Emit.GenericTypeParameterBuilder.ContainsGenericParameters*\n  parent: System.Reflection.Emit.GenericTypeParameterBuilder\n  isExternal: false\n  name: ContainsGenericParameters\n  nameWithType: GenericTypeParameterBuilder.ContainsGenericParameters\n  fullName: GenericTypeParameterBuilder.ContainsGenericParameters\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/GenericTypeParameterBuilder.xml\n- uid: System.Reflection.Emit.GenericTypeParameterBuilder.DeclaringMethod*\n  parent: System.Reflection.Emit.GenericTypeParameterBuilder\n  isExternal: false\n  name: DeclaringMethod\n  nameWithType: GenericTypeParameterBuilder.DeclaringMethod\n  fullName: GenericTypeParameterBuilder.DeclaringMethod\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/GenericTypeParameterBuilder.xml\n- uid: System.Reflection.Emit.GenericTypeParameterBuilder.DeclaringType*\n  parent: System.Reflection.Emit.GenericTypeParameterBuilder\n  isExternal: false\n  name: DeclaringType\n  nameWithType: GenericTypeParameterBuilder.DeclaringType\n  fullName: GenericTypeParameterBuilder.DeclaringType\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/GenericTypeParameterBuilder.xml\n- uid: System.Reflection.Emit.GenericTypeParameterBuilder.Equals*\n  parent: System.Reflection.Emit.GenericTypeParameterBuilder\n  isExternal: false\n  name: Equals\n  nameWithType: GenericTypeParameterBuilder.Equals\n  fullName: GenericTypeParameterBuilder.Equals\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/GenericTypeParameterBuilder.xml\n- uid: System.Reflection.Emit.GenericTypeParameterBuilder.FullName*\n  parent: System.Reflection.Emit.GenericTypeParameterBuilder\n  isExternal: false\n  name: FullName\n  nameWithType: GenericTypeParameterBuilder.FullName\n  fullName: GenericTypeParameterBuilder.FullName\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/GenericTypeParameterBuilder.xml\n- uid: System.Reflection.Emit.GenericTypeParameterBuilder.GenericParameterAttributes*\n  parent: System.Reflection.Emit.GenericTypeParameterBuilder\n  isExternal: false\n  name: GenericParameterAttributes\n  nameWithType: GenericTypeParameterBuilder.GenericParameterAttributes\n  fullName: GenericTypeParameterBuilder.GenericParameterAttributes\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/GenericTypeParameterBuilder.xml\n- uid: System.Reflection.Emit.GenericTypeParameterBuilder.GenericParameterPosition*\n  parent: System.Reflection.Emit.GenericTypeParameterBuilder\n  isExternal: false\n  name: GenericParameterPosition\n  nameWithType: GenericTypeParameterBuilder.GenericParameterPosition\n  fullName: GenericTypeParameterBuilder.GenericParameterPosition\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/GenericTypeParameterBuilder.xml\n- uid: System.Reflection.Emit.GenericTypeParameterBuilder.GenericTypeArguments*\n  parent: System.Reflection.Emit.GenericTypeParameterBuilder\n  isExternal: false\n  name: GenericTypeArguments\n  nameWithType: GenericTypeParameterBuilder.GenericTypeArguments\n  fullName: GenericTypeParameterBuilder.GenericTypeArguments\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/GenericTypeParameterBuilder.xml\n- uid: System.Reflection.Emit.GenericTypeParameterBuilder.GetArrayRank*\n  parent: System.Reflection.Emit.GenericTypeParameterBuilder\n  isExternal: false\n  name: GetArrayRank\n  nameWithType: GenericTypeParameterBuilder.GetArrayRank\n  fullName: GenericTypeParameterBuilder.GetArrayRank\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/GenericTypeParameterBuilder.xml\n- uid: System.Reflection.Emit.GenericTypeParameterBuilder.GetAttributeFlagsImpl*\n  parent: System.Reflection.Emit.GenericTypeParameterBuilder\n  isExternal: false\n  name: GetAttributeFlagsImpl\n  nameWithType: GenericTypeParameterBuilder.GetAttributeFlagsImpl\n  fullName: GenericTypeParameterBuilder.GetAttributeFlagsImpl\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/GenericTypeParameterBuilder.xml\n- uid: System.Reflection.Emit.GenericTypeParameterBuilder.GetConstructorImpl*\n  parent: System.Reflection.Emit.GenericTypeParameterBuilder\n  isExternal: false\n  name: GetConstructorImpl\n  nameWithType: GenericTypeParameterBuilder.GetConstructorImpl\n  fullName: GenericTypeParameterBuilder.GetConstructorImpl\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/GenericTypeParameterBuilder.xml\n- uid: System.Reflection.Emit.GenericTypeParameterBuilder.GetConstructors*\n  parent: System.Reflection.Emit.GenericTypeParameterBuilder\n  isExternal: false\n  name: GetConstructors\n  nameWithType: GenericTypeParameterBuilder.GetConstructors\n  fullName: GenericTypeParameterBuilder.GetConstructors\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/GenericTypeParameterBuilder.xml\n- uid: System.Reflection.Emit.GenericTypeParameterBuilder.GetCustomAttributes*\n  parent: System.Reflection.Emit.GenericTypeParameterBuilder\n  isExternal: false\n  name: GetCustomAttributes\n  nameWithType: GenericTypeParameterBuilder.GetCustomAttributes\n  fullName: GenericTypeParameterBuilder.GetCustomAttributes\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/GenericTypeParameterBuilder.xml\n- uid: System.Reflection.Emit.GenericTypeParameterBuilder.GetElementType*\n  parent: System.Reflection.Emit.GenericTypeParameterBuilder\n  isExternal: false\n  name: GetElementType\n  nameWithType: GenericTypeParameterBuilder.GetElementType\n  fullName: GenericTypeParameterBuilder.GetElementType\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/GenericTypeParameterBuilder.xml\n- uid: System.Reflection.Emit.GenericTypeParameterBuilder.GetEvent*\n  parent: System.Reflection.Emit.GenericTypeParameterBuilder\n  isExternal: false\n  name: GetEvent\n  nameWithType: GenericTypeParameterBuilder.GetEvent\n  fullName: GenericTypeParameterBuilder.GetEvent\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/GenericTypeParameterBuilder.xml\n- uid: System.Reflection.Emit.GenericTypeParameterBuilder.GetEvents*\n  parent: System.Reflection.Emit.GenericTypeParameterBuilder\n  isExternal: false\n  name: GetEvents\n  nameWithType: GenericTypeParameterBuilder.GetEvents\n  fullName: GenericTypeParameterBuilder.GetEvents\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/GenericTypeParameterBuilder.xml\n- uid: System.Reflection.Emit.GenericTypeParameterBuilder.GetField*\n  parent: System.Reflection.Emit.GenericTypeParameterBuilder\n  isExternal: false\n  name: GetField\n  nameWithType: GenericTypeParameterBuilder.GetField\n  fullName: GenericTypeParameterBuilder.GetField\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/GenericTypeParameterBuilder.xml\n- uid: System.Reflection.Emit.GenericTypeParameterBuilder.GetFields*\n  parent: System.Reflection.Emit.GenericTypeParameterBuilder\n  isExternal: false\n  name: GetFields\n  nameWithType: GenericTypeParameterBuilder.GetFields\n  fullName: GenericTypeParameterBuilder.GetFields\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/GenericTypeParameterBuilder.xml\n- uid: System.Reflection.Emit.GenericTypeParameterBuilder.GetGenericArguments*\n  parent: System.Reflection.Emit.GenericTypeParameterBuilder\n  isExternal: false\n  name: GetGenericArguments\n  nameWithType: GenericTypeParameterBuilder.GetGenericArguments\n  fullName: GenericTypeParameterBuilder.GetGenericArguments\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/GenericTypeParameterBuilder.xml\n- uid: System.Reflection.Emit.GenericTypeParameterBuilder.GetGenericParameterConstraints*\n  parent: System.Reflection.Emit.GenericTypeParameterBuilder\n  isExternal: false\n  name: GetGenericParameterConstraints\n  nameWithType: GenericTypeParameterBuilder.GetGenericParameterConstraints\n  fullName: GenericTypeParameterBuilder.GetGenericParameterConstraints\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/GenericTypeParameterBuilder.xml\n- uid: System.Reflection.Emit.GenericTypeParameterBuilder.GetGenericTypeDefinition*\n  parent: System.Reflection.Emit.GenericTypeParameterBuilder\n  isExternal: false\n  name: GetGenericTypeDefinition\n  nameWithType: GenericTypeParameterBuilder.GetGenericTypeDefinition\n  fullName: GenericTypeParameterBuilder.GetGenericTypeDefinition\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/GenericTypeParameterBuilder.xml\n- uid: System.Reflection.Emit.GenericTypeParameterBuilder.GetHashCode*\n  parent: System.Reflection.Emit.GenericTypeParameterBuilder\n  isExternal: false\n  name: GetHashCode\n  nameWithType: GenericTypeParameterBuilder.GetHashCode\n  fullName: GenericTypeParameterBuilder.GetHashCode\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/GenericTypeParameterBuilder.xml\n- uid: System.Reflection.Emit.GenericTypeParameterBuilder.GetInterface*\n  parent: System.Reflection.Emit.GenericTypeParameterBuilder\n  isExternal: false\n  name: GetInterface\n  nameWithType: GenericTypeParameterBuilder.GetInterface\n  fullName: GenericTypeParameterBuilder.GetInterface\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/GenericTypeParameterBuilder.xml\n- uid: System.Reflection.Emit.GenericTypeParameterBuilder.GetInterfaceMap*\n  parent: System.Reflection.Emit.GenericTypeParameterBuilder\n  isExternal: false\n  name: GetInterfaceMap\n  nameWithType: GenericTypeParameterBuilder.GetInterfaceMap\n  fullName: GenericTypeParameterBuilder.GetInterfaceMap\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/GenericTypeParameterBuilder.xml\n- uid: System.Reflection.Emit.GenericTypeParameterBuilder.GetInterfaces*\n  parent: System.Reflection.Emit.GenericTypeParameterBuilder\n  isExternal: false\n  name: GetInterfaces\n  nameWithType: GenericTypeParameterBuilder.GetInterfaces\n  fullName: GenericTypeParameterBuilder.GetInterfaces\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/GenericTypeParameterBuilder.xml\n- uid: System.Reflection.Emit.GenericTypeParameterBuilder.GetMember*\n  parent: System.Reflection.Emit.GenericTypeParameterBuilder\n  isExternal: false\n  name: GetMember\n  nameWithType: GenericTypeParameterBuilder.GetMember\n  fullName: GenericTypeParameterBuilder.GetMember\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/GenericTypeParameterBuilder.xml\n- uid: System.Reflection.Emit.GenericTypeParameterBuilder.GetMembers*\n  parent: System.Reflection.Emit.GenericTypeParameterBuilder\n  isExternal: false\n  name: GetMembers\n  nameWithType: GenericTypeParameterBuilder.GetMembers\n  fullName: GenericTypeParameterBuilder.GetMembers\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/GenericTypeParameterBuilder.xml\n- uid: System.Reflection.Emit.GenericTypeParameterBuilder.GetMethodImpl*\n  parent: System.Reflection.Emit.GenericTypeParameterBuilder\n  isExternal: false\n  name: GetMethodImpl\n  nameWithType: GenericTypeParameterBuilder.GetMethodImpl\n  fullName: GenericTypeParameterBuilder.GetMethodImpl\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/GenericTypeParameterBuilder.xml\n- uid: System.Reflection.Emit.GenericTypeParameterBuilder.GetMethods*\n  parent: System.Reflection.Emit.GenericTypeParameterBuilder\n  isExternal: false\n  name: GetMethods\n  nameWithType: GenericTypeParameterBuilder.GetMethods\n  fullName: GenericTypeParameterBuilder.GetMethods\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/GenericTypeParameterBuilder.xml\n- uid: System.Reflection.Emit.GenericTypeParameterBuilder.GetNestedType*\n  parent: System.Reflection.Emit.GenericTypeParameterBuilder\n  isExternal: false\n  name: GetNestedType\n  nameWithType: GenericTypeParameterBuilder.GetNestedType\n  fullName: GenericTypeParameterBuilder.GetNestedType\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/GenericTypeParameterBuilder.xml\n- uid: System.Reflection.Emit.GenericTypeParameterBuilder.GetNestedTypes*\n  parent: System.Reflection.Emit.GenericTypeParameterBuilder\n  isExternal: false\n  name: GetNestedTypes\n  nameWithType: GenericTypeParameterBuilder.GetNestedTypes\n  fullName: GenericTypeParameterBuilder.GetNestedTypes\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/GenericTypeParameterBuilder.xml\n- uid: System.Reflection.Emit.GenericTypeParameterBuilder.GetProperties*\n  parent: System.Reflection.Emit.GenericTypeParameterBuilder\n  isExternal: false\n  name: GetProperties\n  nameWithType: GenericTypeParameterBuilder.GetProperties\n  fullName: GenericTypeParameterBuilder.GetProperties\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/GenericTypeParameterBuilder.xml\n- uid: System.Reflection.Emit.GenericTypeParameterBuilder.GetPropertyImpl*\n  parent: System.Reflection.Emit.GenericTypeParameterBuilder\n  isExternal: false\n  name: GetPropertyImpl\n  nameWithType: GenericTypeParameterBuilder.GetPropertyImpl\n  fullName: GenericTypeParameterBuilder.GetPropertyImpl\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/GenericTypeParameterBuilder.xml\n- uid: System.Reflection.Emit.GenericTypeParameterBuilder.GUID*\n  parent: System.Reflection.Emit.GenericTypeParameterBuilder\n  isExternal: false\n  name: GUID\n  nameWithType: GenericTypeParameterBuilder.GUID\n  fullName: GenericTypeParameterBuilder.GUID\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/GenericTypeParameterBuilder.xml\n- uid: System.Reflection.Emit.GenericTypeParameterBuilder.HasElementTypeImpl*\n  parent: System.Reflection.Emit.GenericTypeParameterBuilder\n  isExternal: false\n  name: HasElementTypeImpl\n  nameWithType: GenericTypeParameterBuilder.HasElementTypeImpl\n  fullName: GenericTypeParameterBuilder.HasElementTypeImpl\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/GenericTypeParameterBuilder.xml\n- uid: System.Reflection.Emit.GenericTypeParameterBuilder.InvokeMember*\n  parent: System.Reflection.Emit.GenericTypeParameterBuilder\n  isExternal: false\n  name: InvokeMember\n  nameWithType: GenericTypeParameterBuilder.InvokeMember\n  fullName: GenericTypeParameterBuilder.InvokeMember\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/GenericTypeParameterBuilder.xml\n- uid: System.Reflection.Emit.GenericTypeParameterBuilder.IsArrayImpl*\n  parent: System.Reflection.Emit.GenericTypeParameterBuilder\n  isExternal: false\n  name: IsArrayImpl\n  nameWithType: GenericTypeParameterBuilder.IsArrayImpl\n  fullName: GenericTypeParameterBuilder.IsArrayImpl\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/GenericTypeParameterBuilder.xml\n- uid: System.Reflection.Emit.GenericTypeParameterBuilder.IsAssignableFrom*\n  parent: System.Reflection.Emit.GenericTypeParameterBuilder\n  isExternal: false\n  name: IsAssignableFrom\n  nameWithType: GenericTypeParameterBuilder.IsAssignableFrom\n  fullName: GenericTypeParameterBuilder.IsAssignableFrom\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  - netcore-2.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/GenericTypeParameterBuilder.xml\n- uid: System.Reflection.Emit.GenericTypeParameterBuilder.IsByRefImpl*\n  parent: System.Reflection.Emit.GenericTypeParameterBuilder\n  isExternal: false\n  name: IsByRefImpl\n  nameWithType: GenericTypeParameterBuilder.IsByRefImpl\n  fullName: GenericTypeParameterBuilder.IsByRefImpl\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/GenericTypeParameterBuilder.xml\n- uid: System.Reflection.Emit.GenericTypeParameterBuilder.IsCOMObjectImpl*\n  parent: System.Reflection.Emit.GenericTypeParameterBuilder\n  isExternal: false\n  name: IsCOMObjectImpl\n  nameWithType: GenericTypeParameterBuilder.IsCOMObjectImpl\n  fullName: GenericTypeParameterBuilder.IsCOMObjectImpl\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/GenericTypeParameterBuilder.xml\n- uid: System.Reflection.Emit.GenericTypeParameterBuilder.IsConstructedGenericType*\n  parent: System.Reflection.Emit.GenericTypeParameterBuilder\n  isExternal: false\n  name: IsConstructedGenericType\n  nameWithType: GenericTypeParameterBuilder.IsConstructedGenericType\n  fullName: GenericTypeParameterBuilder.IsConstructedGenericType\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/GenericTypeParameterBuilder.xml\n- uid: System.Reflection.Emit.GenericTypeParameterBuilder.IsDefined*\n  parent: System.Reflection.Emit.GenericTypeParameterBuilder\n  isExternal: false\n  name: IsDefined\n  nameWithType: GenericTypeParameterBuilder.IsDefined\n  fullName: GenericTypeParameterBuilder.IsDefined\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/GenericTypeParameterBuilder.xml\n- uid: System.Reflection.Emit.GenericTypeParameterBuilder.IsEnum*\n  parent: System.Reflection.Emit.GenericTypeParameterBuilder\n  isExternal: false\n  name: IsEnum\n  nameWithType: GenericTypeParameterBuilder.IsEnum\n  fullName: GenericTypeParameterBuilder.IsEnum\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/GenericTypeParameterBuilder.xml\n- uid: System.Reflection.Emit.GenericTypeParameterBuilder.IsGenericParameter*\n  parent: System.Reflection.Emit.GenericTypeParameterBuilder\n  isExternal: false\n  name: IsGenericParameter\n  nameWithType: GenericTypeParameterBuilder.IsGenericParameter\n  fullName: GenericTypeParameterBuilder.IsGenericParameter\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/GenericTypeParameterBuilder.xml\n- uid: System.Reflection.Emit.GenericTypeParameterBuilder.IsGenericType*\n  parent: System.Reflection.Emit.GenericTypeParameterBuilder\n  isExternal: false\n  name: IsGenericType\n  nameWithType: GenericTypeParameterBuilder.IsGenericType\n  fullName: GenericTypeParameterBuilder.IsGenericType\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/GenericTypeParameterBuilder.xml\n- uid: System.Reflection.Emit.GenericTypeParameterBuilder.IsGenericTypeDefinition*\n  parent: System.Reflection.Emit.GenericTypeParameterBuilder\n  isExternal: false\n  name: IsGenericTypeDefinition\n  nameWithType: GenericTypeParameterBuilder.IsGenericTypeDefinition\n  fullName: GenericTypeParameterBuilder.IsGenericTypeDefinition\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/GenericTypeParameterBuilder.xml\n- uid: System.Reflection.Emit.GenericTypeParameterBuilder.IsInstanceOfType*\n  parent: System.Reflection.Emit.GenericTypeParameterBuilder\n  isExternal: false\n  name: IsInstanceOfType\n  nameWithType: GenericTypeParameterBuilder.IsInstanceOfType\n  fullName: GenericTypeParameterBuilder.IsInstanceOfType\n  monikers:\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/GenericTypeParameterBuilder.xml\n- uid: System.Reflection.Emit.GenericTypeParameterBuilder.IsPointerImpl*\n  parent: System.Reflection.Emit.GenericTypeParameterBuilder\n  isExternal: false\n  name: IsPointerImpl\n  nameWithType: GenericTypeParameterBuilder.IsPointerImpl\n  fullName: GenericTypeParameterBuilder.IsPointerImpl\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/GenericTypeParameterBuilder.xml\n- uid: System.Reflection.Emit.GenericTypeParameterBuilder.IsPrimitiveImpl*\n  parent: System.Reflection.Emit.GenericTypeParameterBuilder\n  isExternal: false\n  name: IsPrimitiveImpl\n  nameWithType: GenericTypeParameterBuilder.IsPrimitiveImpl\n  fullName: GenericTypeParameterBuilder.IsPrimitiveImpl\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/GenericTypeParameterBuilder.xml\n- uid: System.Reflection.Emit.GenericTypeParameterBuilder.IsSerializable*\n  parent: System.Reflection.Emit.GenericTypeParameterBuilder\n  isExternal: false\n  name: IsSerializable\n  nameWithType: GenericTypeParameterBuilder.IsSerializable\n  fullName: GenericTypeParameterBuilder.IsSerializable\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/GenericTypeParameterBuilder.xml\n- uid: System.Reflection.Emit.GenericTypeParameterBuilder.IsSubclassOf*\n  parent: System.Reflection.Emit.GenericTypeParameterBuilder\n  isExternal: false\n  name: IsSubclassOf\n  nameWithType: GenericTypeParameterBuilder.IsSubclassOf\n  fullName: GenericTypeParameterBuilder.IsSubclassOf\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/GenericTypeParameterBuilder.xml\n- uid: System.Reflection.Emit.GenericTypeParameterBuilder.IsSZArray*\n  parent: System.Reflection.Emit.GenericTypeParameterBuilder\n  isExternal: false\n  name: IsSZArray\n  nameWithType: GenericTypeParameterBuilder.IsSZArray\n  fullName: GenericTypeParameterBuilder.IsSZArray\n  monikers:\n  - netcore-2.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/GenericTypeParameterBuilder.xml\n- uid: System.Reflection.Emit.GenericTypeParameterBuilder.IsTypeDefinition*\n  parent: System.Reflection.Emit.GenericTypeParameterBuilder\n  isExternal: false\n  name: IsTypeDefinition\n  nameWithType: GenericTypeParameterBuilder.IsTypeDefinition\n  fullName: GenericTypeParameterBuilder.IsTypeDefinition\n  monikers:\n  - netcore-2.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/GenericTypeParameterBuilder.xml\n- uid: System.Reflection.Emit.GenericTypeParameterBuilder.IsValueTypeImpl*\n  parent: System.Reflection.Emit.GenericTypeParameterBuilder\n  isExternal: false\n  name: IsValueTypeImpl\n  nameWithType: GenericTypeParameterBuilder.IsValueTypeImpl\n  fullName: GenericTypeParameterBuilder.IsValueTypeImpl\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/GenericTypeParameterBuilder.xml\n- uid: System.Reflection.Emit.GenericTypeParameterBuilder.IsVariableBoundArray*\n  parent: System.Reflection.Emit.GenericTypeParameterBuilder\n  isExternal: false\n  name: IsVariableBoundArray\n  nameWithType: GenericTypeParameterBuilder.IsVariableBoundArray\n  fullName: GenericTypeParameterBuilder.IsVariableBoundArray\n  monikers:\n  - netcore-2.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/GenericTypeParameterBuilder.xml\n- uid: System.Reflection.Emit.GenericTypeParameterBuilder.MakeArrayType*\n  parent: System.Reflection.Emit.GenericTypeParameterBuilder\n  isExternal: false\n  name: MakeArrayType\n  nameWithType: GenericTypeParameterBuilder.MakeArrayType\n  fullName: GenericTypeParameterBuilder.MakeArrayType\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/GenericTypeParameterBuilder.xml\n- uid: System.Reflection.Emit.GenericTypeParameterBuilder.MakeByRefType*\n  parent: System.Reflection.Emit.GenericTypeParameterBuilder\n  isExternal: false\n  name: MakeByRefType\n  nameWithType: GenericTypeParameterBuilder.MakeByRefType\n  fullName: GenericTypeParameterBuilder.MakeByRefType\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/GenericTypeParameterBuilder.xml\n- uid: System.Reflection.Emit.GenericTypeParameterBuilder.MakeGenericType*\n  parent: System.Reflection.Emit.GenericTypeParameterBuilder\n  isExternal: false\n  name: MakeGenericType\n  nameWithType: GenericTypeParameterBuilder.MakeGenericType\n  fullName: GenericTypeParameterBuilder.MakeGenericType\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/GenericTypeParameterBuilder.xml\n- uid: System.Reflection.Emit.GenericTypeParameterBuilder.MakePointerType*\n  parent: System.Reflection.Emit.GenericTypeParameterBuilder\n  isExternal: false\n  name: MakePointerType\n  nameWithType: GenericTypeParameterBuilder.MakePointerType\n  fullName: GenericTypeParameterBuilder.MakePointerType\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/GenericTypeParameterBuilder.xml\n- uid: System.Reflection.Emit.GenericTypeParameterBuilder.Module*\n  parent: System.Reflection.Emit.GenericTypeParameterBuilder\n  isExternal: false\n  name: Module\n  nameWithType: GenericTypeParameterBuilder.Module\n  fullName: GenericTypeParameterBuilder.Module\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/GenericTypeParameterBuilder.xml\n- uid: System.Reflection.Emit.GenericTypeParameterBuilder.Name*\n  parent: System.Reflection.Emit.GenericTypeParameterBuilder\n  isExternal: false\n  name: Name\n  nameWithType: GenericTypeParameterBuilder.Name\n  fullName: GenericTypeParameterBuilder.Name\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/GenericTypeParameterBuilder.xml\n- uid: System.Reflection.Emit.GenericTypeParameterBuilder.Namespace*\n  parent: System.Reflection.Emit.GenericTypeParameterBuilder\n  isExternal: false\n  name: Namespace\n  nameWithType: GenericTypeParameterBuilder.Namespace\n  fullName: GenericTypeParameterBuilder.Namespace\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/GenericTypeParameterBuilder.xml\n- uid: System.Reflection.Emit.GenericTypeParameterBuilder.ReflectedType*\n  parent: System.Reflection.Emit.GenericTypeParameterBuilder\n  isExternal: false\n  name: ReflectedType\n  nameWithType: GenericTypeParameterBuilder.ReflectedType\n  fullName: GenericTypeParameterBuilder.ReflectedType\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/GenericTypeParameterBuilder.xml\n- uid: System.Reflection.Emit.GenericTypeParameterBuilder.SetBaseTypeConstraint*\n  parent: System.Reflection.Emit.GenericTypeParameterBuilder\n  isExternal: false\n  name: SetBaseTypeConstraint\n  nameWithType: GenericTypeParameterBuilder.SetBaseTypeConstraint\n  fullName: GenericTypeParameterBuilder.SetBaseTypeConstraint\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/GenericTypeParameterBuilder.xml\n- uid: System.Reflection.Emit.GenericTypeParameterBuilder.SetCustomAttribute*\n  parent: System.Reflection.Emit.GenericTypeParameterBuilder\n  isExternal: false\n  name: SetCustomAttribute\n  nameWithType: GenericTypeParameterBuilder.SetCustomAttribute\n  fullName: GenericTypeParameterBuilder.SetCustomAttribute\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/GenericTypeParameterBuilder.xml\n- uid: System.Reflection.Emit.GenericTypeParameterBuilder.SetGenericParameterAttributes*\n  parent: System.Reflection.Emit.GenericTypeParameterBuilder\n  isExternal: false\n  name: SetGenericParameterAttributes\n  nameWithType: GenericTypeParameterBuilder.SetGenericParameterAttributes\n  fullName: GenericTypeParameterBuilder.SetGenericParameterAttributes\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/GenericTypeParameterBuilder.xml\n- uid: System.Reflection.Emit.GenericTypeParameterBuilder.SetInterfaceConstraints*\n  parent: System.Reflection.Emit.GenericTypeParameterBuilder\n  isExternal: false\n  name: SetInterfaceConstraints\n  nameWithType: GenericTypeParameterBuilder.SetInterfaceConstraints\n  fullName: GenericTypeParameterBuilder.SetInterfaceConstraints\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/GenericTypeParameterBuilder.xml\n- uid: System.Reflection.Emit.GenericTypeParameterBuilder.ToString*\n  parent: System.Reflection.Emit.GenericTypeParameterBuilder\n  isExternal: false\n  name: ToString\n  nameWithType: GenericTypeParameterBuilder.ToString\n  fullName: GenericTypeParameterBuilder.ToString\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/GenericTypeParameterBuilder.xml\n- uid: System.Reflection.Emit.GenericTypeParameterBuilder.TypeHandle*\n  parent: System.Reflection.Emit.GenericTypeParameterBuilder\n  isExternal: false\n  name: TypeHandle\n  nameWithType: GenericTypeParameterBuilder.TypeHandle\n  fullName: GenericTypeParameterBuilder.TypeHandle\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/GenericTypeParameterBuilder.xml\n- uid: System.Reflection.Emit.GenericTypeParameterBuilder.UnderlyingSystemType*\n  parent: System.Reflection.Emit.GenericTypeParameterBuilder\n  isExternal: false\n  name: UnderlyingSystemType\n  nameWithType: GenericTypeParameterBuilder.UnderlyingSystemType\n  fullName: GenericTypeParameterBuilder.UnderlyingSystemType\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/GenericTypeParameterBuilder.xml\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: false\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n- uid: System.Reflection.MemberInfo.CustomAttributes\n  parent: System.Reflection.MemberInfo\n  isExternal: false\n  name: CustomAttributes\n  nameWithType: MemberInfo.CustomAttributes\n  fullName: MemberInfo.CustomAttributes\n- uid: System.Reflection.MemberInfo.GetCustomAttributesData\n  parent: System.Reflection.MemberInfo\n  isExternal: false\n  name: GetCustomAttributesData()\n  nameWithType: MemberInfo.GetCustomAttributesData()\n  fullName: MemberInfo.GetCustomAttributesData()\n- uid: System.Reflection.TypeInfo.MemberType\n  parent: System.Reflection.TypeInfo\n  isExternal: false\n  name: MemberType\n  nameWithType: TypeInfo.MemberType\n  fullName: TypeInfo.MemberType\n- uid: System.Reflection.MemberInfo.MetadataToken\n  parent: System.Reflection.MemberInfo\n  isExternal: false\n  name: MetadataToken\n  nameWithType: MemberInfo.MetadataToken\n  fullName: MemberInfo.MetadataToken\n- uid: System.Reflection.MemberInfo.op_Equality(System.Reflection.MemberInfo,System.Reflection.MemberInfo)\n  parent: System.Reflection.MemberInfo\n  isExternal: false\n  name: op_Equality(MemberInfo, MemberInfo)\n  nameWithType: MemberInfo.op_Equality(MemberInfo, MemberInfo)\n  fullName: MemberInfo.op_Equality(MemberInfo, MemberInfo)\n- uid: System.Reflection.MemberInfo.op_Inequality(System.Reflection.MemberInfo,System.Reflection.MemberInfo)\n  parent: System.Reflection.MemberInfo\n  isExternal: false\n  name: op_Inequality(MemberInfo, MemberInfo)\n  nameWithType: MemberInfo.op_Inequality(MemberInfo, MemberInfo)\n  fullName: MemberInfo.op_Inequality(MemberInfo, MemberInfo)\n- uid: System.Reflection.MemberInfo.System#Reflection#ICustomAttributeProvider#GetCustomAttributes(System.Boolean)\n  parent: System.Reflection.MemberInfo\n  isExternal: false\n  name: ICustomAttributeProvider.GetCustomAttributes(Boolean)\n  nameWithType: MemberInfo.ICustomAttributeProvider.GetCustomAttributes(Boolean)\n  fullName: MemberInfo.ICustomAttributeProvider.GetCustomAttributes(Boolean)\n- uid: System.Reflection.MemberInfo.System#Reflection#ICustomAttributeProvider#GetCustomAttributes(System.Type,System.Boolean)\n  parent: System.Reflection.MemberInfo\n  isExternal: false\n  name: ICustomAttributeProvider.GetCustomAttributes(Type, Boolean)\n  nameWithType: MemberInfo.ICustomAttributeProvider.GetCustomAttributes(Type, Boolean)\n  fullName: MemberInfo.ICustomAttributeProvider.GetCustomAttributes(Type, Boolean)\n- uid: System.Reflection.MemberInfo.System#Reflection#ICustomAttributeProvider#IsDefined(System.Type,System.Boolean)\n  parent: System.Reflection.MemberInfo\n  isExternal: false\n  name: ICustomAttributeProvider.IsDefined(Type, Boolean)\n  nameWithType: MemberInfo.ICustomAttributeProvider.IsDefined(Type, Boolean)\n  fullName: MemberInfo.ICustomAttributeProvider.IsDefined(Type, Boolean)\n- uid: System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)\n  parent: System.Reflection.MemberInfo\n  isExternal: false\n  name: _MemberInfo.GetIDsOfNames(Guid, IntPtr, UInt32, UInt32, IntPtr)\n  nameWithType: MemberInfo._MemberInfo.GetIDsOfNames(Guid, IntPtr, UInt32, UInt32, IntPtr)\n  fullName: MemberInfo._MemberInfo.GetIDsOfNames(Guid, IntPtr, UInt32, UInt32, IntPtr)\n- uid: System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#GetType\n  parent: System.Reflection.MemberInfo\n  isExternal: false\n  name: _MemberInfo.GetType()\n  nameWithType: MemberInfo._MemberInfo.GetType()\n  fullName: MemberInfo._MemberInfo.GetType()\n- uid: System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)\n  parent: System.Reflection.MemberInfo\n  isExternal: false\n  name: _MemberInfo.GetTypeInfo(UInt32, UInt32, IntPtr)\n  nameWithType: MemberInfo._MemberInfo.GetTypeInfo(UInt32, UInt32, IntPtr)\n  fullName: MemberInfo._MemberInfo.GetTypeInfo(UInt32, UInt32, IntPtr)\n- uid: System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#GetTypeInfoCount(System.UInt32@)\n  parent: System.Reflection.MemberInfo\n  isExternal: false\n  name: _MemberInfo.GetTypeInfoCount(UInt32)\n  nameWithType: MemberInfo._MemberInfo.GetTypeInfoCount(UInt32)\n  fullName: MemberInfo._MemberInfo.GetTypeInfoCount(UInt32)\n- uid: System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)\n  parent: System.Reflection.MemberInfo\n  isExternal: false\n  name: _MemberInfo.Invoke(UInt32, Guid, UInt32, Int16, IntPtr, IntPtr, IntPtr, IntPtr)\n  nameWithType: MemberInfo._MemberInfo.Invoke(UInt32, Guid, UInt32, Int16, IntPtr, IntPtr, IntPtr, IntPtr)\n  fullName: MemberInfo._MemberInfo.Invoke(UInt32, Guid, UInt32, Int16, IntPtr, IntPtr, IntPtr, IntPtr)\n- uid: System.Reflection.TypeInfo.AsType\n  parent: System.Reflection.TypeInfo\n  isExternal: false\n  name: AsType()\n  nameWithType: TypeInfo.AsType()\n  fullName: TypeInfo.AsType()\n- uid: System.Reflection.TypeInfo.DeclaredConstructors\n  parent: System.Reflection.TypeInfo\n  isExternal: false\n  name: DeclaredConstructors\n  nameWithType: TypeInfo.DeclaredConstructors\n  fullName: TypeInfo.DeclaredConstructors\n- uid: System.Reflection.TypeInfo.DeclaredEvents\n  parent: System.Reflection.TypeInfo\n  isExternal: false\n  name: DeclaredEvents\n  nameWithType: TypeInfo.DeclaredEvents\n  fullName: TypeInfo.DeclaredEvents\n- uid: System.Reflection.TypeInfo.DeclaredFields\n  parent: System.Reflection.TypeInfo\n  isExternal: false\n  name: DeclaredFields\n  nameWithType: TypeInfo.DeclaredFields\n  fullName: TypeInfo.DeclaredFields\n- uid: System.Reflection.TypeInfo.DeclaredMembers\n  parent: System.Reflection.TypeInfo\n  isExternal: false\n  name: DeclaredMembers\n  nameWithType: TypeInfo.DeclaredMembers\n  fullName: TypeInfo.DeclaredMembers\n- uid: System.Reflection.TypeInfo.DeclaredMethods\n  parent: System.Reflection.TypeInfo\n  isExternal: false\n  name: DeclaredMethods\n  nameWithType: TypeInfo.DeclaredMethods\n  fullName: TypeInfo.DeclaredMethods\n- uid: System.Reflection.TypeInfo.DeclaredNestedTypes\n  parent: System.Reflection.TypeInfo\n  isExternal: false\n  name: DeclaredNestedTypes\n  nameWithType: TypeInfo.DeclaredNestedTypes\n  fullName: TypeInfo.DeclaredNestedTypes\n- uid: System.Reflection.TypeInfo.DeclaredProperties\n  parent: System.Reflection.TypeInfo\n  isExternal: false\n  name: DeclaredProperties\n  nameWithType: TypeInfo.DeclaredProperties\n  fullName: TypeInfo.DeclaredProperties\n- uid: System.Reflection.TypeInfo.FindInterfaces(System.Reflection.TypeFilter,System.Object)\n  parent: System.Reflection.TypeInfo\n  isExternal: false\n  name: FindInterfaces(TypeFilter, Object)\n  nameWithType: TypeInfo.FindInterfaces(TypeFilter, Object)\n  fullName: TypeInfo.FindInterfaces(TypeFilter, Object)\n- uid: System.Reflection.TypeInfo.FindMembers(System.Reflection.MemberTypes,System.Reflection.BindingFlags,System.Reflection.MemberFilter,System.Object)\n  parent: System.Reflection.TypeInfo\n  isExternal: false\n  name: FindMembers(MemberTypes, BindingFlags, MemberFilter, Object)\n  nameWithType: TypeInfo.FindMembers(MemberTypes, BindingFlags, MemberFilter, Object)\n  fullName: TypeInfo.FindMembers(MemberTypes, BindingFlags, MemberFilter, Object)\n- uid: System.Reflection.TypeInfo.GenericTypeParameters\n  parent: System.Reflection.TypeInfo\n  isExternal: false\n  name: GenericTypeParameters\n  nameWithType: TypeInfo.GenericTypeParameters\n  fullName: TypeInfo.GenericTypeParameters\n- uid: System.Reflection.TypeInfo.GetConstructor(System.Type[])\n  parent: System.Reflection.TypeInfo\n  isExternal: false\n  name: GetConstructor(Type[])\n  nameWithType: TypeInfo.GetConstructor(Type[])\n  fullName: TypeInfo.GetConstructor(Type[])\n- uid: System.Reflection.TypeInfo.GetConstructors\n  parent: System.Reflection.TypeInfo\n  isExternal: false\n  name: GetConstructors()\n  nameWithType: TypeInfo.GetConstructors()\n  fullName: TypeInfo.GetConstructors()\n- uid: System.Reflection.TypeInfo.GetDeclaredEvent(System.String)\n  parent: System.Reflection.TypeInfo\n  isExternal: false\n  name: GetDeclaredEvent(String)\n  nameWithType: TypeInfo.GetDeclaredEvent(String)\n  fullName: TypeInfo.GetDeclaredEvent(String)\n- uid: System.Reflection.TypeInfo.GetDeclaredField(System.String)\n  parent: System.Reflection.TypeInfo\n  isExternal: false\n  name: GetDeclaredField(String)\n  nameWithType: TypeInfo.GetDeclaredField(String)\n  fullName: TypeInfo.GetDeclaredField(String)\n- uid: System.Reflection.TypeInfo.GetDeclaredMethod(System.String)\n  parent: System.Reflection.TypeInfo\n  isExternal: false\n  name: GetDeclaredMethod(String)\n  nameWithType: TypeInfo.GetDeclaredMethod(String)\n  fullName: TypeInfo.GetDeclaredMethod(String)\n- uid: System.Reflection.TypeInfo.GetDeclaredMethods(System.String)\n  parent: System.Reflection.TypeInfo\n  isExternal: false\n  name: GetDeclaredMethods(String)\n  nameWithType: TypeInfo.GetDeclaredMethods(String)\n  fullName: TypeInfo.GetDeclaredMethods(String)\n- uid: System.Reflection.TypeInfo.GetDeclaredNestedType(System.String)\n  parent: System.Reflection.TypeInfo\n  isExternal: false\n  name: GetDeclaredNestedType(String)\n  nameWithType: TypeInfo.GetDeclaredNestedType(String)\n  fullName: TypeInfo.GetDeclaredNestedType(String)\n- uid: System.Reflection.TypeInfo.GetDeclaredProperty(System.String)\n  parent: System.Reflection.TypeInfo\n  isExternal: false\n  name: GetDeclaredProperty(String)\n  nameWithType: TypeInfo.GetDeclaredProperty(String)\n  fullName: TypeInfo.GetDeclaredProperty(String)\n- uid: System.Reflection.TypeInfo.GetDefaultMembers\n  parent: System.Reflection.TypeInfo\n  isExternal: false\n  name: GetDefaultMembers()\n  nameWithType: TypeInfo.GetDefaultMembers()\n  fullName: TypeInfo.GetDefaultMembers()\n- uid: System.Reflection.TypeInfo.GetEnumName(System.Object)\n  parent: System.Reflection.TypeInfo\n  isExternal: false\n  name: GetEnumName(Object)\n  nameWithType: TypeInfo.GetEnumName(Object)\n  fullName: TypeInfo.GetEnumName(Object)\n- uid: System.Reflection.TypeInfo.GetEnumNames\n  parent: System.Reflection.TypeInfo\n  isExternal: false\n  name: GetEnumNames()\n  nameWithType: TypeInfo.GetEnumNames()\n  fullName: TypeInfo.GetEnumNames()\n- uid: System.Reflection.TypeInfo.GetEnumUnderlyingType\n  parent: System.Reflection.TypeInfo\n  isExternal: false\n  name: GetEnumUnderlyingType()\n  nameWithType: TypeInfo.GetEnumUnderlyingType()\n  fullName: TypeInfo.GetEnumUnderlyingType()\n- uid: System.Reflection.TypeInfo.GetEnumValues\n  parent: System.Reflection.TypeInfo\n  isExternal: false\n  name: GetEnumValues()\n  nameWithType: TypeInfo.GetEnumValues()\n  fullName: TypeInfo.GetEnumValues()\n- uid: System.Reflection.TypeInfo.GetEvent(System.String)\n  parent: System.Reflection.TypeInfo\n  isExternal: false\n  name: GetEvent(String)\n  nameWithType: TypeInfo.GetEvent(String)\n  fullName: TypeInfo.GetEvent(String)\n- uid: System.Reflection.TypeInfo.GetField(System.String)\n  parent: System.Reflection.TypeInfo\n  isExternal: false\n  name: GetField(String)\n  nameWithType: TypeInfo.GetField(String)\n  fullName: TypeInfo.GetField(String)\n- uid: System.Reflection.TypeInfo.GetFields\n  parent: System.Reflection.TypeInfo\n  isExternal: false\n  name: GetFields()\n  nameWithType: TypeInfo.GetFields()\n  fullName: TypeInfo.GetFields()\n- uid: System.Reflection.TypeInfo.GetInterface(System.String)\n  parent: System.Reflection.TypeInfo\n  isExternal: false\n  name: GetInterface(String)\n  nameWithType: TypeInfo.GetInterface(String)\n  fullName: TypeInfo.GetInterface(String)\n- uid: System.Reflection.TypeInfo.GetMember(System.String)\n  parent: System.Reflection.TypeInfo\n  isExternal: false\n  name: GetMember(String)\n  nameWithType: TypeInfo.GetMember(String)\n  fullName: TypeInfo.GetMember(String)\n- uid: System.Reflection.TypeInfo.GetMember(System.String,System.Reflection.BindingFlags)\n  parent: System.Reflection.TypeInfo\n  isExternal: false\n  name: GetMember(String, BindingFlags)\n  nameWithType: TypeInfo.GetMember(String, BindingFlags)\n  fullName: TypeInfo.GetMember(String, BindingFlags)\n- uid: System.Reflection.TypeInfo.GetMembers\n  parent: System.Reflection.TypeInfo\n  isExternal: false\n  name: GetMembers()\n  nameWithType: TypeInfo.GetMembers()\n  fullName: TypeInfo.GetMembers()\n- uid: System.Reflection.TypeInfo.GetMethod(System.String)\n  parent: System.Reflection.TypeInfo\n  isExternal: false\n  name: GetMethod(String)\n  nameWithType: TypeInfo.GetMethod(String)\n  fullName: TypeInfo.GetMethod(String)\n- uid: System.Reflection.TypeInfo.GetMethod(System.String,System.Reflection.BindingFlags)\n  parent: System.Reflection.TypeInfo\n  isExternal: false\n  name: GetMethod(String, BindingFlags)\n  nameWithType: TypeInfo.GetMethod(String, BindingFlags)\n  fullName: TypeInfo.GetMethod(String, BindingFlags)\n- uid: System.Reflection.TypeInfo.GetMethod(System.String,System.Type[])\n  parent: System.Reflection.TypeInfo\n  isExternal: false\n  name: GetMethod(String, Type[])\n  nameWithType: TypeInfo.GetMethod(String, Type[])\n  fullName: TypeInfo.GetMethod(String, Type[])\n- uid: System.Reflection.TypeInfo.GetMethod(System.String,System.Type[],System.Reflection.ParameterModifier[])\n  parent: System.Reflection.TypeInfo\n  isExternal: false\n  name: GetMethod(String, Type[], ParameterModifier[])\n  nameWithType: TypeInfo.GetMethod(String, Type[], ParameterModifier[])\n  fullName: TypeInfo.GetMethod(String, Type[], ParameterModifier[])\n- uid: System.Reflection.TypeInfo.GetMethods\n  parent: System.Reflection.TypeInfo\n  isExternal: false\n  name: GetMethods()\n  nameWithType: TypeInfo.GetMethods()\n  fullName: TypeInfo.GetMethods()\n- uid: System.Reflection.TypeInfo.GetNestedType(System.String)\n  parent: System.Reflection.TypeInfo\n  isExternal: false\n  name: GetNestedType(String)\n  nameWithType: TypeInfo.GetNestedType(String)\n  fullName: TypeInfo.GetNestedType(String)\n- uid: System.Reflection.TypeInfo.GetNestedTypes\n  parent: System.Reflection.TypeInfo\n  isExternal: false\n  name: GetNestedTypes()\n  nameWithType: TypeInfo.GetNestedTypes()\n  fullName: TypeInfo.GetNestedTypes()\n- uid: System.Reflection.TypeInfo.GetProperties\n  parent: System.Reflection.TypeInfo\n  isExternal: false\n  name: GetProperties()\n  nameWithType: TypeInfo.GetProperties()\n  fullName: TypeInfo.GetProperties()\n- uid: System.Reflection.TypeInfo.GetProperty(System.String)\n  parent: System.Reflection.TypeInfo\n  isExternal: false\n  name: GetProperty(String)\n  nameWithType: TypeInfo.GetProperty(String)\n  fullName: TypeInfo.GetProperty(String)\n- uid: System.Reflection.TypeInfo.GetProperty(System.String,System.Reflection.BindingFlags)\n  parent: System.Reflection.TypeInfo\n  isExternal: false\n  name: GetProperty(String, BindingFlags)\n  nameWithType: TypeInfo.GetProperty(String, BindingFlags)\n  fullName: TypeInfo.GetProperty(String, BindingFlags)\n- uid: System.Reflection.TypeInfo.GetProperty(System.String,System.Type)\n  parent: System.Reflection.TypeInfo\n  isExternal: false\n  name: GetProperty(String, Type)\n  nameWithType: TypeInfo.GetProperty(String, Type)\n  fullName: TypeInfo.GetProperty(String, Type)\n- uid: System.Reflection.TypeInfo.GetProperty(System.String,System.Type[])\n  parent: System.Reflection.TypeInfo\n  isExternal: false\n  name: GetProperty(String, Type[])\n  nameWithType: TypeInfo.GetProperty(String, Type[])\n  fullName: TypeInfo.GetProperty(String, Type[])\n- uid: System.Reflection.TypeInfo.GetProperty(System.String,System.Type,System.Type[])\n  parent: System.Reflection.TypeInfo\n  isExternal: false\n  name: GetProperty(String, Type, Type[])\n  nameWithType: TypeInfo.GetProperty(String, Type, Type[])\n  fullName: TypeInfo.GetProperty(String, Type, Type[])\n- uid: System.Reflection.TypeInfo.GetProperty(System.String,System.Type,System.Type[],System.Reflection.ParameterModifier[])\n  parent: System.Reflection.TypeInfo\n  isExternal: false\n  name: GetProperty(String, Type, Type[], ParameterModifier[])\n  nameWithType: TypeInfo.GetProperty(String, Type, Type[], ParameterModifier[])\n  fullName: TypeInfo.GetProperty(String, Type, Type[], ParameterModifier[])\n- uid: System.Reflection.TypeInfo.HasElementType\n  parent: System.Reflection.TypeInfo\n  isExternal: false\n  name: HasElementType\n  nameWithType: TypeInfo.HasElementType\n  fullName: TypeInfo.HasElementType\n- uid: System.Reflection.TypeInfo.ImplementedInterfaces\n  parent: System.Reflection.TypeInfo\n  isExternal: false\n  name: ImplementedInterfaces\n  nameWithType: TypeInfo.ImplementedInterfaces\n  fullName: TypeInfo.ImplementedInterfaces\n- uid: System.Reflection.TypeInfo.IsAbstract\n  parent: System.Reflection.TypeInfo\n  isExternal: false\n  name: IsAbstract\n  nameWithType: TypeInfo.IsAbstract\n  fullName: TypeInfo.IsAbstract\n- uid: System.Reflection.TypeInfo.IsAnsiClass\n  parent: System.Reflection.TypeInfo\n  isExternal: false\n  name: IsAnsiClass\n  nameWithType: TypeInfo.IsAnsiClass\n  fullName: TypeInfo.IsAnsiClass\n- uid: System.Reflection.TypeInfo.IsArray\n  parent: System.Reflection.TypeInfo\n  isExternal: false\n  name: IsArray\n  nameWithType: TypeInfo.IsArray\n  fullName: TypeInfo.IsArray\n- uid: System.Reflection.TypeInfo.IsAutoClass\n  parent: System.Reflection.TypeInfo\n  isExternal: false\n  name: IsAutoClass\n  nameWithType: TypeInfo.IsAutoClass\n  fullName: TypeInfo.IsAutoClass\n- uid: System.Reflection.TypeInfo.IsAutoLayout\n  parent: System.Reflection.TypeInfo\n  isExternal: false\n  name: IsAutoLayout\n  nameWithType: TypeInfo.IsAutoLayout\n  fullName: TypeInfo.IsAutoLayout\n- uid: System.Reflection.TypeInfo.IsByRef\n  parent: System.Reflection.TypeInfo\n  isExternal: false\n  name: IsByRef\n  nameWithType: TypeInfo.IsByRef\n  fullName: TypeInfo.IsByRef\n- uid: System.Reflection.TypeInfo.IsClass\n  parent: System.Reflection.TypeInfo\n  isExternal: false\n  name: IsClass\n  nameWithType: TypeInfo.IsClass\n  fullName: TypeInfo.IsClass\n- uid: System.Reflection.TypeInfo.IsCOMObject\n  parent: System.Reflection.TypeInfo\n  isExternal: false\n  name: IsCOMObject\n  nameWithType: TypeInfo.IsCOMObject\n  fullName: TypeInfo.IsCOMObject\n- uid: System.Reflection.TypeInfo.IsEnumDefined(System.Object)\n  parent: System.Reflection.TypeInfo\n  isExternal: false\n  name: IsEnumDefined(Object)\n  nameWithType: TypeInfo.IsEnumDefined(Object)\n  fullName: TypeInfo.IsEnumDefined(Object)\n- uid: System.Reflection.TypeInfo.IsEquivalentTo(System.Type)\n  parent: System.Reflection.TypeInfo\n  isExternal: false\n  name: IsEquivalentTo(Type)\n  nameWithType: TypeInfo.IsEquivalentTo(Type)\n  fullName: TypeInfo.IsEquivalentTo(Type)\n- uid: System.Reflection.TypeInfo.IsExplicitLayout\n  parent: System.Reflection.TypeInfo\n  isExternal: false\n  name: IsExplicitLayout\n  nameWithType: TypeInfo.IsExplicitLayout\n  fullName: TypeInfo.IsExplicitLayout\n- uid: System.Reflection.TypeInfo.IsImport\n  parent: System.Reflection.TypeInfo\n  isExternal: false\n  name: IsImport\n  nameWithType: TypeInfo.IsImport\n  fullName: TypeInfo.IsImport\n- uid: System.Reflection.TypeInfo.IsInterface\n  parent: System.Reflection.TypeInfo\n  isExternal: false\n  name: IsInterface\n  nameWithType: TypeInfo.IsInterface\n  fullName: TypeInfo.IsInterface\n- uid: System.Reflection.TypeInfo.IsLayoutSequential\n  parent: System.Reflection.TypeInfo\n  isExternal: false\n  name: IsLayoutSequential\n  nameWithType: TypeInfo.IsLayoutSequential\n  fullName: TypeInfo.IsLayoutSequential\n- uid: System.Reflection.TypeInfo.IsMarshalByRef\n  parent: System.Reflection.TypeInfo\n  isExternal: false\n  name: IsMarshalByRef\n  nameWithType: TypeInfo.IsMarshalByRef\n  fullName: TypeInfo.IsMarshalByRef\n- uid: System.Reflection.TypeInfo.IsNested\n  parent: System.Reflection.TypeInfo\n  isExternal: false\n  name: IsNested\n  nameWithType: TypeInfo.IsNested\n  fullName: TypeInfo.IsNested\n- uid: System.Reflection.TypeInfo.IsNestedAssembly\n  parent: System.Reflection.TypeInfo\n  isExternal: false\n  name: IsNestedAssembly\n  nameWithType: TypeInfo.IsNestedAssembly\n  fullName: TypeInfo.IsNestedAssembly\n- uid: System.Reflection.TypeInfo.IsNestedFamANDAssem\n  parent: System.Reflection.TypeInfo\n  isExternal: false\n  name: IsNestedFamANDAssem\n  nameWithType: TypeInfo.IsNestedFamANDAssem\n  fullName: TypeInfo.IsNestedFamANDAssem\n- uid: System.Reflection.TypeInfo.IsNestedFamily\n  parent: System.Reflection.TypeInfo\n  isExternal: false\n  name: IsNestedFamily\n  nameWithType: TypeInfo.IsNestedFamily\n  fullName: TypeInfo.IsNestedFamily\n- uid: System.Reflection.TypeInfo.IsNestedFamORAssem\n  parent: System.Reflection.TypeInfo\n  isExternal: false\n  name: IsNestedFamORAssem\n  nameWithType: TypeInfo.IsNestedFamORAssem\n  fullName: TypeInfo.IsNestedFamORAssem\n- uid: System.Reflection.TypeInfo.IsNestedPrivate\n  parent: System.Reflection.TypeInfo\n  isExternal: false\n  name: IsNestedPrivate\n  nameWithType: TypeInfo.IsNestedPrivate\n  fullName: TypeInfo.IsNestedPrivate\n- uid: System.Reflection.TypeInfo.IsNestedPublic\n  parent: System.Reflection.TypeInfo\n  isExternal: false\n  name: IsNestedPublic\n  nameWithType: TypeInfo.IsNestedPublic\n  fullName: TypeInfo.IsNestedPublic\n- uid: System.Reflection.TypeInfo.IsNotPublic\n  parent: System.Reflection.TypeInfo\n  isExternal: false\n  name: IsNotPublic\n  nameWithType: TypeInfo.IsNotPublic\n  fullName: TypeInfo.IsNotPublic\n- uid: System.Reflection.TypeInfo.IsPointer\n  parent: System.Reflection.TypeInfo\n  isExternal: false\n  name: IsPointer\n  nameWithType: TypeInfo.IsPointer\n  fullName: TypeInfo.IsPointer\n- uid: System.Reflection.TypeInfo.IsPrimitive\n  parent: System.Reflection.TypeInfo\n  isExternal: false\n  name: IsPrimitive\n  nameWithType: TypeInfo.IsPrimitive\n  fullName: TypeInfo.IsPrimitive\n- uid: System.Reflection.TypeInfo.IsPublic\n  parent: System.Reflection.TypeInfo\n  isExternal: false\n  name: IsPublic\n  nameWithType: TypeInfo.IsPublic\n  fullName: TypeInfo.IsPublic\n- uid: System.Reflection.TypeInfo.IsSealed\n  parent: System.Reflection.TypeInfo\n  isExternal: false\n  name: IsSealed\n  nameWithType: TypeInfo.IsSealed\n  fullName: TypeInfo.IsSealed\n- uid: System.Reflection.TypeInfo.IsSpecialName\n  parent: System.Reflection.TypeInfo\n  isExternal: false\n  name: IsSpecialName\n  nameWithType: TypeInfo.IsSpecialName\n  fullName: TypeInfo.IsSpecialName\n- uid: System.Reflection.TypeInfo.IsUnicodeClass\n  parent: System.Reflection.TypeInfo\n  isExternal: false\n  name: IsUnicodeClass\n  nameWithType: TypeInfo.IsUnicodeClass\n  fullName: TypeInfo.IsUnicodeClass\n- uid: System.Reflection.TypeInfo.IsValueType\n  parent: System.Reflection.TypeInfo\n  isExternal: false\n  name: IsValueType\n  nameWithType: TypeInfo.IsValueType\n  fullName: TypeInfo.IsValueType\n- uid: System.Reflection.TypeInfo.IsVisible\n  parent: System.Reflection.TypeInfo\n  isExternal: false\n  name: IsVisible\n  nameWithType: TypeInfo.IsVisible\n  fullName: TypeInfo.IsVisible\n- uid: System.Reflection.TypeInfo.StructLayoutAttribute\n  parent: System.Reflection.TypeInfo\n  isExternal: false\n  name: StructLayoutAttribute\n  nameWithType: TypeInfo.StructLayoutAttribute\n  fullName: TypeInfo.StructLayoutAttribute\n- uid: System.Reflection.TypeInfo.TypeInitializer\n  parent: System.Reflection.TypeInfo\n  isExternal: false\n  name: TypeInitializer\n  nameWithType: TypeInfo.TypeInitializer\n  fullName: TypeInfo.TypeInitializer\n- uid: System.Reflection.TypeInfo.System#Reflection#IReflectableType#GetTypeInfo\n  parent: System.Reflection.TypeInfo\n  isExternal: false\n  name: IReflectableType.GetTypeInfo()\n  nameWithType: TypeInfo.IReflectableType.GetTypeInfo()\n  fullName: TypeInfo.IReflectableType.GetTypeInfo()\n- uid: System.Reflection.CustomAttributeExtensions.GetCustomAttribute(System.Reflection.MemberInfo,System.Type)\n  parent: System.Reflection.CustomAttributeExtensions\n  isExternal: false\n  name: GetCustomAttribute(MemberInfo, Type)\n  nameWithType: CustomAttributeExtensions.GetCustomAttribute(MemberInfo, Type)\n  fullName: CustomAttributeExtensions.GetCustomAttribute(MemberInfo, Type)\n- uid: System.Reflection.CustomAttributeExtensions.GetCustomAttribute(System.Reflection.MemberInfo,System.Type,System.Boolean)\n  parent: System.Reflection.CustomAttributeExtensions\n  isExternal: false\n  name: GetCustomAttribute(MemberInfo, Type, Boolean)\n  nameWithType: CustomAttributeExtensions.GetCustomAttribute(MemberInfo, Type, Boolean)\n  fullName: CustomAttributeExtensions.GetCustomAttribute(MemberInfo, Type, Boolean)\n- uid: System.Reflection.CustomAttributeExtensions.GetCustomAttribute``1(System.Reflection.MemberInfo)\n  parent: System.Reflection.CustomAttributeExtensions\n  isExternal: false\n  name: GetCustomAttribute<T>(MemberInfo)\n  nameWithType: CustomAttributeExtensions.GetCustomAttribute<T>(MemberInfo)\n  fullName: CustomAttributeExtensions.GetCustomAttribute<T>(MemberInfo)\n- uid: System.Reflection.CustomAttributeExtensions.GetCustomAttribute``1(System.Reflection.MemberInfo,System.Boolean)\n  parent: System.Reflection.CustomAttributeExtensions\n  isExternal: false\n  name: GetCustomAttribute<T>(MemberInfo, Boolean)\n  nameWithType: CustomAttributeExtensions.GetCustomAttribute<T>(MemberInfo, Boolean)\n  fullName: CustomAttributeExtensions.GetCustomAttribute<T>(MemberInfo, Boolean)\n- uid: System.Reflection.CustomAttributeExtensions.GetCustomAttributes(System.Reflection.MemberInfo)\n  parent: System.Reflection.CustomAttributeExtensions\n  isExternal: false\n  name: GetCustomAttributes(MemberInfo)\n  nameWithType: CustomAttributeExtensions.GetCustomAttributes(MemberInfo)\n  fullName: CustomAttributeExtensions.GetCustomAttributes(MemberInfo)\n- uid: System.Reflection.CustomAttributeExtensions.GetCustomAttributes(System.Reflection.MemberInfo,System.Boolean)\n  parent: System.Reflection.CustomAttributeExtensions\n  isExternal: false\n  name: GetCustomAttributes(MemberInfo, Boolean)\n  nameWithType: CustomAttributeExtensions.GetCustomAttributes(MemberInfo, Boolean)\n  fullName: CustomAttributeExtensions.GetCustomAttributes(MemberInfo, Boolean)\n- uid: System.Reflection.CustomAttributeExtensions.GetCustomAttributes(System.Reflection.MemberInfo,System.Type)\n  parent: System.Reflection.CustomAttributeExtensions\n  isExternal: false\n  name: GetCustomAttributes(MemberInfo, Type)\n  nameWithType: CustomAttributeExtensions.GetCustomAttributes(MemberInfo, Type)\n  fullName: CustomAttributeExtensions.GetCustomAttributes(MemberInfo, Type)\n- uid: System.Reflection.CustomAttributeExtensions.GetCustomAttributes(System.Reflection.MemberInfo,System.Type,System.Boolean)\n  parent: System.Reflection.CustomAttributeExtensions\n  isExternal: false\n  name: GetCustomAttributes(MemberInfo, Type, Boolean)\n  nameWithType: CustomAttributeExtensions.GetCustomAttributes(MemberInfo, Type, Boolean)\n  fullName: CustomAttributeExtensions.GetCustomAttributes(MemberInfo, Type, Boolean)\n- uid: System.Reflection.CustomAttributeExtensions.GetCustomAttributes``1(System.Reflection.MemberInfo)\n  parent: System.Reflection.CustomAttributeExtensions\n  isExternal: false\n  name: GetCustomAttributes<T>(MemberInfo)\n  nameWithType: CustomAttributeExtensions.GetCustomAttributes<T>(MemberInfo)\n  fullName: CustomAttributeExtensions.GetCustomAttributes<T>(MemberInfo)\n- uid: System.Reflection.CustomAttributeExtensions.GetCustomAttributes``1(System.Reflection.MemberInfo,System.Boolean)\n  parent: System.Reflection.CustomAttributeExtensions\n  isExternal: false\n  name: GetCustomAttributes<T>(MemberInfo, Boolean)\n  nameWithType: CustomAttributeExtensions.GetCustomAttributes<T>(MemberInfo, Boolean)\n  fullName: CustomAttributeExtensions.GetCustomAttributes<T>(MemberInfo, Boolean)\n- uid: System.Reflection.CustomAttributeExtensions.IsDefined(System.Reflection.MemberInfo,System.Type)\n  parent: System.Reflection.CustomAttributeExtensions\n  isExternal: false\n  name: IsDefined(MemberInfo, Type)\n  nameWithType: CustomAttributeExtensions.IsDefined(MemberInfo, Type)\n  fullName: CustomAttributeExtensions.IsDefined(MemberInfo, Type)\n- uid: System.Reflection.CustomAttributeExtensions.IsDefined(System.Reflection.MemberInfo,System.Type,System.Boolean)\n  parent: System.Reflection.CustomAttributeExtensions\n  isExternal: false\n  name: IsDefined(MemberInfo, Type, Boolean)\n  nameWithType: CustomAttributeExtensions.IsDefined(MemberInfo, Type, Boolean)\n  fullName: CustomAttributeExtensions.IsDefined(MemberInfo, Type, Boolean)\n- uid: System.Reflection.MemberInfoExtensions.GetMetadataToken(System.Reflection.MemberInfo)\n  parent: System.Reflection.MemberInfoExtensions\n  isExternal: false\n  name: GetMetadataToken(MemberInfo)\n  nameWithType: MemberInfoExtensions.GetMetadataToken(MemberInfo)\n  fullName: MemberInfoExtensions.GetMetadataToken(MemberInfo)\n- uid: System.Reflection.MemberInfoExtensions.HasMetadataToken(System.Reflection.MemberInfo)\n  parent: System.Reflection.MemberInfoExtensions\n  isExternal: false\n  name: HasMetadataToken(MemberInfo)\n  nameWithType: MemberInfoExtensions.HasMetadataToken(MemberInfo)\n  fullName: MemberInfoExtensions.HasMetadataToken(MemberInfo)\n- uid: System.Reflection.RuntimeReflectionExtensions.GetRuntimeInterfaceMap(System.Reflection.TypeInfo,System.Type)\n  parent: System.Reflection.RuntimeReflectionExtensions\n  isExternal: false\n  name: GetRuntimeInterfaceMap(TypeInfo, Type)\n  nameWithType: RuntimeReflectionExtensions.GetRuntimeInterfaceMap(TypeInfo, Type)\n  fullName: RuntimeReflectionExtensions.GetRuntimeInterfaceMap(TypeInfo, Type)\n"}