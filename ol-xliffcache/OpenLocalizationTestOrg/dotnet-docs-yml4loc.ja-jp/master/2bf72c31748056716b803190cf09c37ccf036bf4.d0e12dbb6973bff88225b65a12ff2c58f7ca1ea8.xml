{"nodes":[{"content":"Represents text as a sequence of UTF-16 code units.","nodes":[{"pos":[0,51],"content":"Represents text as a sequence of UTF-16 code units.","nodes":[{"content":"Represents text as a sequence of UTF-16 code units.","pos":[0,51]}]}],"pos":[10636,10688],"yaml":true},{"content":"> [!NOTE]\n>  To view the .NET Framework source code for this type, see the [Reference Source](http://referencesource.microsoft.com/#mscorlib/system/string.cs#8281103e6f23cb5c). You can browse through the source code online, download the reference for offline viewing, and step through the sources (including patches and updates) during debugging; see [instructions](http://referencesource.microsoft.com/).  \n  \n A string is a sequential collection of characters that is used to represent text. A <xref:System.String> object is a sequential collection of <xref:System.Char?displayProperty=fullName> objects that represent a string; a <xref:System.Char?displayProperty=fullName> object corresponds to a UTF-16 code unit. The value of the <xref:System.String> object is the content of the sequential collection of <xref:System.Char?displayProperty=fullName> objects, and that value is immutable (that is, it is read-only). For more information about the immutability of strings, see the [Immutability and the StringBuilder class](#Immutability) section later in this topic. The maximum size of a <xref:System.String> object in memory is 2GB, or about 1 billion characters.  \n  \n In this section:  \n  \n [Instantiating a String object](#Instantiation)   \n [Char objects and Unicode characters](#Characters)   \n [Strings and The Unicode Standard](#Unicode)   \n [Strings and embedded null characters](#EmbeddedNulls)   \n [Strings and indexes](#Indexes)   \n [Null strings and empty strings](#Nulls)   \n [Immutability and the StringBuilder class](#Immutability)   \n [Ordinal vs. culture-sensitive operations](#CultureSensitive)   \n [Normalization](#Normalization)   \n [String operations by category](#ByCategory)  \n  \n<a name=\"Instantiation\"></a>   \n## Instantiating a String object  \n You can instantiate a <xref:System.String> object in the following ways:  \n  \n-   By assigning a string literal to a <xref:System.String> variable. This is the most commonly used method for creating a string. The following example uses assignment to create several strings. Note that in C#, because the backslash (\\\\) is an escape character, literal backslashes in a string must be escaped or the entire string must be @-quoted.  \n  \n     [!code-cpp[System.String.Class.Instantiate#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.string.class.instantiate/cpp/string.instantiate1.cpp#1)]\n     [!code-csharp[System.String.Class.Instantiate#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.class.instantiate/cs/program.cs#1)]\n     [!code-vb[System.String.Class.Instantiate#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.string.class.instantiate/vb/instantiate1.vb#1)]  \n  \n-   By calling a <xref:System.String> class constructor. The following example instantiates strings by calling several class constructors. Note that some of the constructors include pointers to character arrays or signed byte arrays as parameters. Visual Basic does not support calls to these constructors. For detailed information about <xref:System.String> constructors, see the <xref:System.String.%23ctor%2A> constructor summary.  \n  \n     [!code-cpp[System.String.Class.Instantiate#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.string.class.instantiate/cpp/string.instantiate2.cpp#2)]\n     [!code-csharp[System.String.Class.Instantiate#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.class.instantiate/cs/program.cs#2)]\n     [!code-vb[System.String.Class.Instantiate#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.string.class.instantiate/vb/instantiate1.vb#2)]  \n  \n-   By using the string concatenation operator (+ in C# and & or + in Visual Basic) to create a single string from any combination of <xref:System.String> instances and string literals. The following example illustrates the use of the string concatenation operator.  \n  \n     [!code-cpp[System.String.Class.Instantiate#3](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.string.class.instantiate/cpp/string.instantiate3.cpp#3)]\n     [!code-csharp[System.String.Class.Instantiate#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.class.instantiate/cs/program.cs#3)]\n     [!code-vb[System.String.Class.Instantiate#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.string.class.instantiate/vb/instantiate1.vb#3)]  \n  \n-   By retrieving a property or calling a method that returns a string. The following example uses the methods of the <xref:System.String> class to extract a substring from a larger string.  \n  \n     [!code-cpp[System.String.Class.Instantiate#4](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.string.class.instantiate/cpp/string.instantiate3.cpp#4)]\n     [!code-csharp[System.String.Class.Instantiate#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.class.instantiate/cs/program.cs#4)]\n     [!code-vb[System.String.Class.Instantiate#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.string.class.instantiate/vb/instantiate1.vb#4)]  \n  \n-   By calling a formatting method to convert a value or object to its string representation. The following example uses the                [composite formatting](~/docs/standard/base-types/composite-formatting.md) feature to embed the string representation of two objects into a string.  \n  \n     [!code-cpp[System.String.Class.Instantiate#5](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.string.class.instantiate/cpp/string.instantiate3.cpp#5)]\n     [!code-csharp[System.String.Class.Instantiate#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.class.instantiate/cs/program.cs#5)]\n     [!code-vb[System.String.Class.Instantiate#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.string.class.instantiate/vb/instantiate1.vb#5)]  \n  \n<a name=\"Characters\"></a>   \n## Char objects and Unicode characters  \n Each character in a string is defined by a Unicode scalar value, also called a Unicode code point or the ordinal (numeric) value of the Unicode character. Each code point is encoded by using UTF-16 encoding, and the numeric value of each element of the encoding is represented by a <xref:System.Char> object.  \n  \n> [!NOTE]\n>  Note that, because a <xref:System.String> instance consists of a sequential collection of UTF-16 code units, it is possible to create a <xref:System.String> object that is not a well-formed Unicode string. For example, it is possible to create a string that has a low surrogate without a corresponding high surrogate. Although some methods, such as the methods of encoding and decoding objects in the <xref:System.Text> namespace, may performs checks to ensure that strings are well-formed, <xref:System.String> class members do not ensure that a string is well-formed.  \n  \n A single <xref:System.Char> object usually represents a single code point; that is, the numeric value of the <xref:System.Char> equals the code point. For example, the code point for the character \"a\" is U+0061. However, a code point might require more than one encoded element (more than one <xref:System.Char> object). The Unicode standard defines two types of characters that correspond to multiple <xref:System.Char> objects: graphemes, and Unicode supplementary code points that correspond to characters in the Unicode supplementary planes.  \n  \n-   A grapheme is represented by a base character followed by one or more combining characters. For example, the character Ã¤ is represented by a <xref:System.Char> object whose code point is U+0061 followed by a <xref:System.Char> object whose code point is U+0308. This character can also be defined by a single <xref:System.Char> object that has a code point of U+00E4. As the following example shows, a culture-sensitive comparison for equality indicates that these two representations are equal, although an ordinary ordinal comparison does not. However, if the two strings are normalized, an ordinal comparison also indicates that they are equal. (For more information on normalizing strings, see the [Normalization](#Normalization) section.)  \n  \n     [!code-cpp[System.String.Class#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Class/cpp/string.char1.cpp#2)]\n     [!code-csharp[System.String.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Class/cs/grapheme1.cs#2)]\n     [!code-vb[System.String.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Class/vb/grapheme1.vb#2)]  \n  \n-   A Unicode supplementary code point (a surrogate pair) is represented by a <xref:System.Char> object whose code point is a high surrogate followed by a <xref:System.Char> object whose code point is a low surrogate. The code units of high surrogates range from U+D800 to U+DBFF. The code units of low surrogates range from U+DC00 to U+DFFF. Surrogate pairs are used to represent characters in the 16 Unicode supplementary planes. The following example creates a surrogate character and passes it to the <xref:System.Char.IsSurrogatePair%28System.Char%2CSystem.Char%29?displayProperty=fullName> method to determine whether it is a surrogate pair.  \n  \n     [!code-cpp[System.String.Class#3](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Class/cpp/string.char2.cpp#3)]\n     [!code-csharp[System.String.Class#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Class/cs/surrogate1.cs#3)]\n     [!code-vb[System.String.Class#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Class/vb/surrogate1.vb#3)]  \n  \n<a name=\"Unicode\"></a>   \n## Strings and The Unicode Standard  \n Characters in a string are represented by UTF-16 encoded code units, which correspond to <xref:System.Char> values.  \n  \n Each character in a string has an associated Unicode character category, which is represented in the .NET Framework by the <xref:System.Globalization.UnicodeCategory> enumeration. The category of a character or a surrogate pair can be determined by calling the <xref:System.Globalization.CharUnicodeInfo.GetUnicodeCategory%2A?displayProperty=fullName> method.  \n  \n The .NET Framework maintains its own table of characters and their corresponding categories, which ensures that a version of the .NET Framework running on different platforms returns identical character category information. The following table lists the versions of the .NET Framework and the versions of the Unicode Standard on which their character categories are based.  \n  \n|.NET Framework version|Version of the Unicode Standard|  \n|----------------------------|-------------------------------------|  \n|[!INCLUDE[net_v11_long](~/includes/net-v11-long-md.md)]|[The Unicode Standard, Version 4.0.0](http://www.unicode.org/versions/Unicode4.0.0/)|  \n|The .NET Framework 2.0|[The Unicode Standard, Version 5.0.0](http://www.unicode.org/versions/Unicode5.0.0)|  \n|[!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)]|[The Unicode Standard, Version 5.0.0](http://www.unicode.org/versions/Unicode5.0.0)|  \n|[!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]|[The Unicode Standard, Version 5.0.0](http://www.unicode.org/versions/Unicode5.0.0)|  \n|[!INCLUDE[net_v45](~/includes/net-v45-md.md)]|[The Unicode Standard, Version 6.3.0](http://www.unicode.org/versions/Unicode6.3.0/)|  \n|[!INCLUDE[net_v451](~/includes/net-v451-md.md)]|[The Unicode Standard, Version 6.3.0](http://www.unicode.org/versions/Unicode6.3.0/)|  \n|[!INCLUDE[net_v452](~/includes/net-v452-md.md)]|[The Unicode Standard, Version 6.3.0](http://www.unicode.org/versions/Unicode6.3.0/)|  \n|[!INCLUDE[net_v46](~/includes/net-v46-md.md)]|[The Unicode Standard, Version 6.3.0](http://www.unicode.org/versions/Unicode6.3.0/)|  \n|[!INCLUDE[net_v461](~/includes/net-v461-md.md)]|[The Unicode Standard, Version 6.3.0](http://www.unicode.org/versions/Unicode6.3.0/)|  \n|[!INCLUDE[net_v462](~/includes/net-v462-md.md)]|[The Unicode Standard, Version 8.0.0](http://www.unicode.org/versions/Unicode8.0.0/)|  \n  \n In addition, the .NET Framework supports string comparison and sorting based on the Unicode standard. In versions of the .NET Framework through the [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)], the .NET Framework maintains its own table of string data. This is also true of versions of the .NET Framework starting with the [!INCLUDE[net_v45](~/includes/net-v45-md.md)] running on Windows 7. Starting with the [!INCLUDE[net_v45](~/includes/net-v45-md.md)] running on Window 8 and later versions of the Windows operating system, the runtime delegates string comparison and sorting operations to the operating system. The following table lists the versions of the .NET Framework and the versions of the Unicode Standard on which character comparison and sorting are based.  \n  \n|.NET Framework version|Version of the Unicode Standard|  \n|----------------------------|-------------------------------------|  \n|[!INCLUDE[net_v11_long](~/includes/net-v11-long-md.md)]|[The Unicode Standard, Version 4.0.0](http://www.unicode.org/versions/Unicode4.0.0/)|  \n|The .NET Framework 2.0|[The Unicode Standard, Version 5.0.0](http://www.unicode.org/versions/Unicode5.0.0)|  \n|[!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)]|[The Unicode Standard, Version 5.0.0](http://www.unicode.org/versions/Unicode5.0.0)|  \n|[!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]|[The Unicode Standard, Version 5.0.0](http://www.unicode.org/versions/Unicode5.0.0)|  \n|[!INCLUDE[net_v45](~/includes/net-v45-md.md)] and later on Windows 7|[The Unicode Standard, Version 5.0.0](http://www.unicode.org/versions/Unicode5.0.0)|  \n|[!INCLUDE[net_v45](~/includes/net-v45-md.md)] and later on Windows 8 and later Windows operating systems|[The Unicode Standard, Version 6.3.0](http://www.unicode.org/versions/Unicode6.3.0/)|  \n  \n<a name=\"EmbeddedNulls\"></a>   \n## Strings and embedded null characters  \n In the .NET Framework, a <xref:System.String> object can include embedded null characters, which count as a part of the string's length. However, in some languages such as C and C++, a null character indicates the end of a string;it is not considered a part of the string and is not counted as part of the string's length. This means that the following common assumptions that C and C++ programmers or libraries written in C or C++ might make about strings are not necessarily valid when applied to <xref:System.String> objects:  \n  \n-   The value returned by the `strlen` or `wcslen` functions does not necessarily equal <xref:System.String.Length%2A?displayProperty=fullName>.  \n  \n-   The string created by the `strcpy_s` or `wcscpy_s` functions is not necessarily identical to the string created by the <xref:System.String.Copy%2A?displayProperty=fullName> method.  \n  \n You should ensure that native C and C++ code that instantiates <xref:System.String> objects, and code that is passed <xref:System.String> objects through platform invoke, do not assume that an embedded null character marks the end of the string.  \n  \n Embedded null characters in a string are also treated differently when a string is sorted (or compared) and when a string is searched. Null characters are ignored when performing culture-sensitive comparisons between two strings, including comparisons using the invariant culture. They are considered only for ordinal or case-insensitive ordinal comparisons. On the other hand, embedded null characters are always considered when searching a string with methods such as <xref:System.String.Contains%2A>, <xref:System.String.StartsWith%2A>, and <xref:System.String.IndexOf%2A>.  \n  \n<a name=\"Indexes\"></a>   \n## Strings and indexes  \n An index is the position of a <xref:System.Char> object (not a Unicode character) in a <xref:System.String>. An index is a zero-based, nonnegative number that starts from the first position in the string, which is index position zero. A number of search methods, such as <xref:System.String.IndexOf%2A> and <xref:System.String.LastIndexOf%2A>, return the index of a character or substring in the string instance.  \n  \n The <xref:System.String.Chars%2A> property lets you access individual <xref:System.Char> objects by their index position in the string. Because the <xref:System.String.Chars%2A> property is the default property (in Visual Basic) or the indexer (in C#), you can access the individual <xref:System.Char> objects in a string by using code such as the following. This code looks for white space or punctuation characters in a string to determine how many words the string contains.  \n  \n [!code-cpp[System.String.Class#4](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Class/cpp/string.index1.cpp#4)]\n [!code-csharp[System.String.Class#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Class/cs/index1.cs#4)]\n [!code-vb[System.String.Class#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Class/vb/index1.vb#4)]  \n  \n Because the <xref:System.String> class implements the <xref:System.Collections.IEnumerable> interface, you can also iterate through the <xref:System.Char> objects in a string by using a `foreach` construct, as the following example shows.  \n  \n [!code-cpp[System.String.Class#5](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Class/cpp/string.index2.cpp#5)]\n [!code-csharp[System.String.Class#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Class/cs/index2.cs#5)]\n [!code-vb[System.String.Class#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Class/vb/index2.vb#5)]  \n  \n Consecutive index values might not correspond to consecutive Unicode characters, because a Unicode character might be encoded as more than one <xref:System.Char> object. In particular, a string may contain multi-character units of text that are formed by a base character followed by one or more combining characters or by surrogate pairs. To work with Unicode characters instead of <xref:System.Char> objects, use the <xref:System.Globalization.StringInfo?displayProperty=fullName> and <xref:System.Globalization.TextElementEnumerator> classes. The following example illustrates the difference between code that works with <xref:System.Char> objects and code that works with Unicode characters. It compares the number of characters or text elements in each word of a sentence. The string includes two sequences of a base character followed by a combining character.  \n  \n [!code-cpp[System.String.Class#6](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Class/cpp/string.index3.cpp#6)]\n [!code-csharp[System.String.Class#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Class/cs/index3.cs#6)]\n [!code-vb[System.String.Class#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Class/vb/index3.vb#6)]  \n  \n This example works with text elements by using the <xref:System.Globalization.StringInfo.GetTextElementEnumerator%2A?displayProperty=fullName> method and the <xref:System.Globalization.TextElementEnumerator> class to enumerate all the text elements in a string. You can also retrieve an array that contains the starting index of each text element by calling the <xref:System.Globalization.StringInfo.ParseCombiningCharacters%2A?displayProperty=fullName> method.  \n  \n For more information about working with units of text rather than individual <xref:System.Char> values, see the <xref:System.Globalization.StringInfo> class.  \n  \n<a name=\"Nulls\"></a>   \n## Null strings and empty strings  \n A string that has been declared but has not been assigned a value is `null`. Attempting to call methods on that string throws a <xref:System.NullReferenceException>. A null string is different from an empty string, which is a string whose value is \"\" or <xref:System.String.Empty?displayProperty=fullName>. In some cases, passing either a null string or an empty string as an argument in a method call throws an exception. For example, passing a null string to the <xref:System.Int32.Parse%2A?displayProperty=fullName> method throws an <xref:System.ArgumentNullException>, and passing an empty string throws a <xref:System.FormatException>. In other cases, a method argument can be either a null string or an empty string. For example, if you are providing an <xref:System.IFormattable> implementation for a class, you want to equate both a null string and an empty string with the general (\"G\") format specifier.  \n  \n The <xref:System.String> class includes the following two convenience methods that enable you to test whether a string is `null` or empty:  \n  \n-   <xref:System.String.IsNullOrEmpty%2A>, which indicates whether a string is either `null` or is equal to  <xref:System.String.Empty?displayProperty=fullName>. This method eliminates the need to use code such as the following:  \n  \n     [!code-cpp[System.String.Class.Null#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.string.class.null/cpp/string.null.cpp#1)]\n     [!code-csharp[System.String.Class.Null#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.class.null/cs/nullorempty1.cs#1)]\n     [!code-vb[System.String.Class.Null#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.string.class.null/vb/nullorempty1.vb#1)]  \n  \n-   <xref:System.String.IsNullOrWhiteSpace%2A>, which indicates whether a string is `null`, equals <xref:System.String.Empty?displayProperty=fullName>, or consists exclusively of white-space characters. This method eliminates the need to use code such as the following:  \n  \n     [!code-cpp[System.String.Class.Null#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.string.class.null/cpp/string.null.cpp#2)]\n     [!code-csharp[System.String.Class.Null#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.class.null/cs/nullorempty1.cs#2)]\n     [!code-vb[System.String.Class.Null#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.string.class.null/vb/nullorempty1.vb#2)]  \n  \n The following example uses the <xref:System.String.IsNullOrEmpty%2A> method in the <xref:System.IFormattable.ToString%2A?displayProperty=fullName> implementation of a custom `Temperature` class. The method supports the \"G\", \"C\", \"F\", and \"K\" format strings. If an empty format string or a format string whose value is `null` is passed to the method, its value is changed to the \"G\" format string.  \n  \n [!code-cpp[System.String.Class.Null#3](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.string.class.null/cpp/string.null.cpp#3)]\n [!code-csharp[System.String.Class.Null#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.class.null/cs/nullorempty1.cs#3)]\n [!code-vb[System.String.Class.Null#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.string.class.null/vb/nullorempty1.vb#3)]  \n  \n<a name=\"Immutability\"></a>   \n## Immutability and the StringBuilder class  \n A <xref:System.String> object is called immutable (read-only), because its value cannot be modified after it has been created. Methods that appear to modify a <xref:System.String> object actually return a new <xref:System.String> object that contains the modification.  \n  \n Because strings are immutable, string manipulation routines that perform repeated additions or deletions to what appears to be a single string can exact a significant performance penalty. For example, the following code uses a random number generator to create a string with 1000 characters in the range 0x0001 to 0x052F. Although the code appears to use string concatenation to append a new character to the existing string named `str`, it actually creates a new <xref:System.String> object for each concatenation operation.  \n  \n [!code-cpp[System.String.Class#15](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Class/cpp/string.stringbuilder1.cpp#15)]\n [!code-csharp[System.String.Class#15](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Class/cs/immutable.cs#15)]\n [!code-vb[System.String.Class#15](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Class/vb/immutable.vb#15)]  \n  \n You can use the <xref:System.Text.StringBuilder> class instead of the <xref:System.String> class for operations that make multiple changes to the value of a string. Unlike instances of the <xref:System.String> class, <xref:System.Text.StringBuilder> objects are mutable; when you concatenate, append, or delete substrings from a string, the operations are performed on a single string. When you have finished modifying the value of a <xref:System.Text.StringBuilder> object, you can call its <xref:System.Text.StringBuilder.ToString%2A?displayProperty=fullName> method to convert it to a string. The following example replaces the <xref:System.String> used in the previous example to concatenate 1000 random characters in the range to  0x0001 to 0x052F with a <xref:System.Text.StringBuilder> object.  \n  \n [!code-cpp[System.String.Class#16](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Class/cpp/string.stringbuilder2.cpp#16)]\n [!code-csharp[System.String.Class#16](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Class/cs/immutable1.cs#16)]\n [!code-vb[System.String.Class#16](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Class/vb/immutable1.vb#16)]  \n  \n<a name=\"CultureSensitive\"></a>   \n## Ordinal vs. culture-sensitive operations  \n Members of the <xref:System.String> class perform either ordinal or culture-sensitive (linguistic) operations on a <xref:System.String> object. An ordinal operation acts on the numeric value of each <xref:System.Char> object. A culture-sensitive operation acts on the value of the <xref:System.String>object, and takes culture-specific casing, sorting, formatting, and parsing rules into account. Culture-sensitive operations execute in the context of an explicitly declared culture or the implicit current culture. The two kinds of operations can produce very different results when they are performed on the same string.  \n  \n The .NET Framework also supports culture-insensitive linguistic string operations by using the invariant culture (<xref:System.Globalization.CultureInfo.InvariantCulture%2A?displayProperty=fullName>), which is loosely based on the culture settings of the English language independent of region. Unlike other <xref:System.Globalization.CultureInfo?displayProperty=fullName> settings, the settings of the invariant culture are guaranteed to remain consistent on a single computer, from system to system, and across versions of the .NET Framework. The invariant culture can be seen as a kind of black box that ensures stability of string comparisons and ordering across all cultures.  \n  \n> [!IMPORTANT]\n>  If your application makes a security decision about a symbolic identifier such as a file name or named pipe, or about persisted data such as the text-based data in an XML file, the operation should use an ordinal comparison instead of a culture-sensitive comparison. This is because a culture-sensitive comparison can yield different results depending on the culture in effect, whereas an ordinal comparison depends solely on the binary value of the compared characters.  \n  \n> [!IMPORTANT]\n>  Most methods that perform string operations include an overload that has a parameter of type <xref:System.StringComparison>, which enables you to specify whether the method performs an ordinal or culture-sensitive operation. In general, you should call this overload to make the intent of your method call clear. For best practices and guidance for using ordinal and culture-sensitive operations on strings, see [Best Practices for Using Strings](~/docs/standard/base-types/best-practices-strings.md).  \n  \n Operations for [casing](#casing), [parsing and formatting](#parsing), [comparison and sorting](#comparison), and [testing for equality](#equality) can be either ordinal or culture-sensitive. The following sections discuss each category of operation.  \n  \n> [!TIP]\n>  You should always call a method overload that makes the intent of your method call clear. For example, instead of calling the <xref:System.String.Compare%28System.String%2CSystem.String%29> method to perform a culture-sensitive comparison of two strings by using the conventions of the current culture, you should call the <xref:System.String.Compare%28System.String%2CSystem.String%2CSystem.StringComparison%29> method with a value of <xref:System.StringComparison?displayProperty=fullName> for the `comparisonType` argument. For more information, see [Best Practices for Using Strings](~/docs/standard/base-types/best-practices-strings.md).  \n  \n<a name=\"casing\"></a>   \n### Casing  \n Casing rules determine how to change the capitalization of a Unicode character; for example, from lowercase to uppercase. Often, a casing operation is performed before a string comparison. For example, a string might be converted to uppercase so that it can be compared with another uppercase string. You can convert the characters in a string to lowercase by calling the <xref:System.String.ToLower%2A> or <xref:System.String.ToLowerInvariant%2A> method, and you can convert them to uppercase by calling the <xref:System.String.ToUpper%2A> or <xref:System.String.ToUpperInvariant%2A> method. In addition, you can use the <xref:System.Globalization.TextInfo.ToTitleCase%2A?displayProperty=fullName> method to convert a string to title case.  \n  \n Casing operations can be based on the rules of the current culture, a specified culture, or the invariant culture. Because case mappings can vary depending on the culture used, the result of casing operations can vary based on culture. The actual differences in casing are of three kinds:  \n  \n-   Differences in the case mapping of LATIN CAPITAL LETTER I (U+0049), LATIN SMALL LETTER I (U+0069), LATIN CAPITAL LETTER I WITH DOT ABOVE (U+0130), and LATIN SMALL LETTER DOTLESS I (U+0131). In the tr-TR (Turkish (Turkey)) and az-Latn-AZ (Azerbaijan, Latin) cultures, and in the tr, az, and az-Latn neutral cultures, the lowercase equivalent of LATIN CAPITAL LETTER I is LATIN SMALL LETTER DOTLESS I, and the uppercase equivalent of LATIN SMALL LETTER I is LATIN CAPITAL LETTER I WITH DOT ABOVE. In all other cultures, including the invariant culture, LATIN SMALL LETTER I and LATIN CAPITAL LETTER I are lowercase and uppercase equivalents.  \n  \n     The following example demonstrates how a string comparison designed to prevent file system access can fail if it relies on a culture-sensitive casing comparison. (The casing conventions of the invariant culture should have been used.)  \n  \n     [!code-csharp[System.String.Class#17](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Class/cs/case2.cs#17)]\n     [!code-vb[System.String.Class#17](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Class/vb/case2.vb#17)]  \n  \n-   Differences in case mappings between the invariant culture and all other cultures. In these cases, using the casing rules of the invariant culture to change a character to uppercase or lowercase returns the same character. For all other cultures, it returns a different character. Some of the affected characters are listed in the following table.  \n  \n    |Character|If changed to|Returns|  \n    |---------------|-------------------|-------------|  \n    |MICRON SIGN (U+00B5)|Uppercase|GREEK CAPITAL LETTER MU (U+-39C)|  \n    |LATIN CAPITAL LETTER I WITH DOT ABOVE (U+0130)|Lowercase|LATIN SMALL LETTER I (U+0069)|  \n    |LATIN SMALL LETTER DOTLESS I (U+0131)|Uppercase|LATIN CAPITAL LETTER I (U+0049)|  \n    |LATIN SMALL LETTER LONG S (U+017F)|Uppercase|LATIN CAPITAL LETTER S (U+0053)|  \n    |LATIN CAPITAL LETTER D WITH SMALL LETTER Z WITH CARON (U+01C5)|Lowercase|LATIN SMALL LETTER DZ WITH CARON (U+01C6)|  \n    |COMBINING GREEK YPOGEGRAMMENI (U+0345)|Uppercase|GREEK CAPITAL LETTER IOTA (U+0399)|  \n  \n-   Differences in case mappings of two-letter mixed-case pairs in the ASCII character range. In most cultures, a two-letter mixed-case pair is equal to the equivalent two-letter uppercase or lowercase pair. This is not true for the following two-letter pairs in the following cultures, because in each case they are compared to a digraph:  \n  \n    -   \"lJ\" and \"nJ\" in the hr-HR (Croatian (Croatia)) culture.  \n  \n    -   \"cH\" in the cs-CZ (Czech (Czech Republic)) and sk-SK (Slovak (Slovakia)) cultures.  \n  \n    -   \"aA\" in the da-DK (Danish (Denmark)) culture.  \n  \n    -   \"cS\", \"dZ\", \"dZS\", \"nY\", \"sZ\", \"tY\", and \"zS\" in the hu-HU (Hungarian (Hungary)) culture.  \n  \n    -   \"cH\" and \"lL\" in the es-ES_tradnl (Spanish (Spain, Traditional Sort)) culture.  \n  \n    -   \"cH\", \"gI\", \"kH\", \"nG\" \"nH\", \"pH\", \"qU', \"tH\", and \"tR\" in the vi-VN (Vietnamese (Vietnam)) culture.  \n  \n     However, it is unusual to encounter a situation in which a culture-sensitive comparison of these pairs creates problems, because these pairs are uncommon in fixed strings or identifiers.  \n  \n The following example illustrates some of the differences in casing rules between cultures when converting strings to uppercase.  \n  \n [!code-cpp[System.String.Class#7](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Class/cpp/string.casing.cpp#7)]\n [!code-csharp[System.String.Class#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Class/cs/case1.cs#7)]\n [!code-vb[System.String.Class#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Class/vb/case1.vb#7)]  \n  \n<a name=\"parsing\"></a>   \n### Parsing and formatting  \n Formatting and parsing are inverse operations. Formatting rules determine how to convert a value, such as a date and time or a number, to its string representation, whereas parsing rules determine how to convert a string representation to a value such as a date and time. Both formatting and parsing rules are dependent on cultural conventions. The following example illustrates the ambiguity that can arise when interpreting a culture-specific date string. Without knowing the conventions of the culture that was used to produce a date string, it is not possible to know whether 03/01/2011, 3/1/2011, and 01/03/2011 represent January 3, 2011 or March 1, 2011.  \n  \n [!code-cpp[System.String.Class#8](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Class/cpp/string.format1.cpp#8)]\n [!code-csharp[System.String.Class#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Class/cs/format1.cs#8)]\n [!code-vb[System.String.Class#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Class/vb/format1.vb#8)]  \n  \n Similarly, as the following example shows, a single string can produce different dates depending on the culture whose conventions are used in the parsing operation.  \n  \n [!code-cpp[System.String.Class#9](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Class/cpp/string.parse1.cpp#9)]\n [!code-csharp[System.String.Class#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Class/cs/parse1.cs#9)]\n [!code-vb[System.String.Class#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Class/vb/parse1.vb#9)]  \n  \n<a name=\"comparison\"></a>   \n### String comparison and sorting  \n Conventions for comparing and sorting strings vary from culture to culture. For example, the sort order may be based on phonetics or on the visual representation of characters. In East Asian languages, characters are sorted by the stroke and radical of ideographs. Sorting also depends on the order languages and cultures use for the alphabet. For example, the Danish language has an \"Ã\" character that it sorts after \"Z\" in the alphabet. In addition, comparisons can be case-sensitive or case-insensitive, and in some cases casing rules also differ by culture. Ordinal comparison, on the other hand, uses the Unicode code points of individual characters in a string when comparing and sorting strings.  \n  \n Sort rules determine the alphabetic order of Unicode characters and how two strings compare to each other. For example, the <xref:System.String.Compare%28System.String%2CSystem.String%2CSystem.StringComparison%29?displayProperty=fullName> method compares two strings based on the <xref:System.StringComparison> parameter. If the parameter value is <xref:System.StringComparison?displayProperty=fullName>, the method performs a linguistic comparison that uses the conventions of the current culture; if the parameter value is <xref:System.StringComparison?displayProperty=fullName>, the method performs an ordinal comparison. Consequently, as the following example shows, if the current culture is U.S. English, the first call to the <xref:System.String.Compare%28System.String%2CSystem.String%2CSystem.StringComparison%29?displayProperty=fullName> method (using culture-sensitive comparison) considers \"a\" less than \"A\", but the second call to the same method (using ordinal comparison) considers \"a\" greater than \"A\".  \n  \n [!code-cpp[System.String.Class#10](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Class/cpp/string.compare1.cpp#10)]\n [!code-csharp[System.String.Class#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Class/cs/compare1.cs#10)]\n [!code-vb[System.String.Class#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Class/vb/compare1.vb#10)]  \n  \n The .NET Framework supports word, string, and ordinal sort rules:  \n  \n-   A word sort performs a culture-sensitive comparison of strings in which certain nonalphanumeric Unicode characters might have special weights assigned to them. For example, the hyphen (-) might have a very small weight assigned to it so that \"coop\" and \"co-op\" appear next to each other in a sorted list. For a list of the <xref:System.String>methods that compare two strings using word sort rules, see the [String operations by category](#ByCategory) section.  \n  \n-   A string sort also performs a culture-sensitive comparison. It is similar to a word sort, except that there are no special cases, and all nonalphanumeric symbols come before all alphanumeric Unicode characters. Two strings can be compared using string sort rules by calling the <xref:System.Globalization.CompareInfo.Compare%2A?displayProperty=fullName> method overloads that have an `options` parameter that is supplied a value of <xref:System.Globalization.CompareOptions?displayProperty=fullName>. Note that this is the only method that the .NET Framework provides to compare two strings using string sort rules.  \n  \n-   An ordinal sort compares strings based on the numeric value of each <xref:System.Char> object in the string. An ordinal comparison is automatically case-sensitive because the lowercase and uppercase versions of a character have different code points. However, if case is not important, you can specify an ordinal comparison that ignores case. This is equivalent to converting the string to uppercase by using the invariant culture and then performing an ordinal comparison on the result. For a list of the <xref:System.String> methods that compare two strings using ordinal sort rules, see the [String operations by category](#ByCategory) section.  \n  \n A culture-sensitive comparison is any comparison that explicitly or implicitly uses a <xref:System.Globalization.CultureInfo> object, including the invariant culture that is specified by the <xref:System.Globalization.CultureInfo.InvariantCulture%2A?displayProperty=fullName> property. The implicit culture is the current culture, which is specified by the <xref:System.Threading.Thread.CurrentCulture%2A?displayProperty=fullName> and <xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=fullName> properties. There is considerable variation in the sort order of alphabetic characters (that is, characters for which the <xref:System.Char.IsLetter%2A?displayProperty=fullName> property returns `true`) across cultures. You can specify a culture-sensitive comparison that uses the conventions of a specific culture by supplying a <xref:System.Globalization.CultureInfo> object to a string comparison method such as <xref:System.String.Compare%28System.String%2CSystem.String%2CSystem.Globalization.CultureInfo%2CSystem.Globalization.CompareOptions%29>. You can specify a culture-sensitive comparison that uses the conventions of the current culture by supplying <xref:System.StringComparison?displayProperty=fullName>, <xref:System.StringComparison?displayProperty=fullName>, or any member of the <xref:System.Globalization.CompareOptions> enumeration other than <xref:System.Globalization.CompareOptions?displayProperty=fullName> or <xref:System.Globalization.CompareOptions?displayProperty=fullName> to an appropriate overload of the <xref:System.String.Compare%2A> method. A culture-sensitive comparison is generally appropriate for sorting whereas an ordinal comparison is not. An ordinal comparison is generally appropriate for determining whether two strings are equal (that is, for determining identity) whereas a culture-sensitive comparison is not.  \n  \n The following example illustrates the difference between culture-sensitive and ordinal comparison. The example evaluates three strings, \"Apple\", \"Ãble\", and \"AEble\", using ordinal comparison and the conventions of the da-DK and en-US cultures (each of which is the default culture at the time the <xref:System.String.Compare%2A> method is called). Because the Danish language treats the character \"Ã\" as an individual letter and sorts it after \"Z\" in the alphabet, the string \"Ãble\" is greater than \"Apple\". However, \"Ãble\" is not considered equivalent to \"AEble\", so \"Ãble\" is also greater than \"AEble\". The en-US culture doesn't include the letter\"Ã\" but treats it as equivalent to \"AE\", which explains why  \"Ãble\" is less than \"Apple\" but equal to \"AEble\". Ordinal comparison, on the other hand, considers \"Apple\" to be less than \"Ãble\", and \"Ãble\" to be greater than \"AEble\".  \n  \n [!code-csharp[System.String.Class#21](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Class/cs/compare4.cs#21)]\n [!code-vb[System.String.Class#21](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Class/vb/compare4.vb#21)]  \n  \n Use the following general guidelines to choose an appropriate sorting or string comparison method:  \n  \n-   If you want the strings to be ordered based on the user's culture, you should order them based on the conventions of the current culture. If the user's culture changes, the order of sorted strings will also change accordingly. For example, a thesaurus application should always sort words based on the user's culture.  \n  \n-   If you want the strings to be ordered based on the conventions of a specific culture, you should order them by supplying a <xref:System.Globalization.CultureInfo> object that represents that culture to a comparison method. For example, in an application designed to teach students a particular language, you want strings to be ordered based on the conventions of one of the cultures that speaks that language.  \n  \n-   If you want the order of strings to remain unchanged across cultures, you should order them based on the conventions of the invariant culture or use an ordinal comparison. For example, you would use an ordinal sort to organize the names of files, processes, mutexes, or named pipes.  \n  \n-   For a comparison that involves a security decision (such as whether a username is valid), you should always perform an ordinal test for equality by calling an overload of the <xref:System.String.Equals%2A> method.  \n  \n> [!NOTE]\n>  The culture-sensitive sorting and casing rules used in string comparison depend on the version of the .NET Framework. In the [!INCLUDE[net_v45](~/includes/net-v45-md.md)] running on the [!INCLUDE[win8](~/includes/win8-md.md)] operating system, sorting, casing, normalization, and Unicode character information conforms to the Unicode 6.0 standard. On other operating systems, it conforms to the Unicode 5.0 standard.  \n  \n For more information about word, string, and ordinal sort rules, see the <xref:System.Globalization.CompareOptions?displayProperty=fullName> topic. For additional recommendations on when to use each rule, see [Best Practices for Using Strings](~/docs/standard/base-types/best-practices-strings.md).  \n  \n Ordinarily, you do not call string comparison methods such as <xref:System.String.Compare%2A> directly to determine the sort order of strings. Instead, comparison methods are called by sorting methods such as <xref:System.Array.Sort%2A?displayProperty=fullName> or <xref:System.Collections.Generic.List%601.Sort%2A?displayProperty=fullName>. The following example performs four different sorting operations (word sort using the current culture, word sort using the invariant culture, ordinal sort, and string sort using the invariant culture) without explicitly calling a string comparison method, although they do specify the type of comparison to use. Note that each type of sort produces a unique ordering of strings in its array.  \n  \n [!code-cpp[System.String.Class#12](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Class/cpp/string.compare2.cpp#12)]\n [!code-csharp[System.String.Class#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Class/cs/compare2.cs#12)]\n [!code-vb[System.String.Class#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Class/vb/compare2.vb#12)]  \n  \n> [!TIP]\n>  Internally, the.NET Framework uses sort keys to support culturallysensitive string comparison. Each character in a string is given several categories of sort weights, including alphabetic, case, and diacritic. A sort key, represented by the <xref:System.Globalization.SortKey> class, provides a repository of these weights for a particular string. If your app performs a large number of searching or sorting operations on the same set of strings, you can improve its performance by generating and storing sort keys for all the strings that it uses. When a sort or comparison operation is required, you use the sort keys instead of the strings. For more information, see the <xref:System.Globalization.SortKey> class.  \n  \n If you don't specify a string comparison convention, sorting methods such as <xref:System.Array.Sort%28System.Array%29?displayProperty=fullName> perform a culture-sensitive, case-sensitive sort on strings. The following example illustrates how changing the current culture affects the order of sorted strings in an array. It creates an array of three strings. First, it sets the `System.Threading.Thread.CurrentThread.CurrentCulture` property to en-US and calls the <xref:System.Array.Sort%28System.Array%29?displayProperty=fullName> method. The resulting sort order is based on sorting conventions for the English (United States) culture. Next, the example sets the `System.Threading.Thread.CurrentThread.CurrentCulture` property to da-DK and calls the <xref:System.Array.Sort%2A?displayProperty=fullName> method again. Notice how the resulting sort order differs from the en-US results because it uses the sorting conventions for Danish (Denmark).  \n  \n [!code-csharp[Conceptual.Strings.Comparing#3](~/samples/snippets/csharp/VS_Snippets_CLR/conceptual.strings.comparing/cs/sort1.cs#3)]\n [!code-vb[Conceptual.Strings.Comparing#3](~/samples/snippets/visualbasic/VS_Snippets_CLR/conceptual.strings.comparing/vb/sort1.vb#3)]  \n  \n> [!WARNING]\n>  If your primary purpose in comparing strings is to determine whether they are equal, you should call the <xref:System.String.Equals%2A?displayProperty=fullName> method. Typically, you should use <xref:System.String.Equals%2A> to perform an ordinal comparison. The <xref:System.String.Compare%2A?displayProperty=fullName> method is intended primarily to sort strings.  \n  \n String search methods, such as <xref:System.String.StartsWith%2A?displayProperty=fullName> and <xref:System.String.IndexOf%2A?displayProperty=fullName>, also can perform culture-sensitive or ordinal string comparisons. The following example illustrates the differences between ordinal and culture-sensitive comparisons using the <xref:System.String.IndexOf%2A> method. A culture-sensitive search in which the current culture is English (United States) considers the substring \"oe\" to match the ligature \"Å\". Because a soft hyphen (U+00AD) is a zero-width character, the search treats the soft hyphen as equivalent to <xref:System.String.Empty> and finds a match at the beginning of the string. An ordinal search, on the other hand, does not find a match in either case.  \n  \n [!code-cpp[System.String.Class#13](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Class/cpp/string.compare3.cpp#13)]\n [!code-csharp[System.String.Class#13](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Class/cs/compare3.cs#13)]\n [!code-vb[System.String.Class#13](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Class/vb/compare3.vb#13)]  \n  \n### Searching Strings  \n String search methods, such as <xref:System.String.StartsWith%2A?displayProperty=fullName> and <xref:System.String.IndexOf%2A?displayProperty=fullName>, also can perform culture-sensitive or ordinal string comparisons to determine whether a character or substring is found in a specified string.  \n  \n The search methods in the <xref:System.String> class that search for an individual character, such as the<xref:System.String.IndexOf%2A> method, or one of a set of characters,   such as the <xref:System.String.IndexOfAny%2A> method, all perform an ordinal search. To perform a culture-sensitive search for a character, you must call a <xref:System.Globalization.CompareInfo> method such as <xref:System.Globalization.CompareInfo.IndexOf%28System.String%2CSystem.Char%29?displayProperty=fullName> or <xref:System.Globalization.CompareInfo.LastIndexOf%28System.String%2CSystem.Char%29?displayProperty=fullName>. Note that the results of searching for a character using ordinal and culture-sensitive comparison can be very different. For example, a search for a precomposed Unicode character such as the ligature \"Ã\" (U+00C6) might match any occurrence of its components in the correct sequence, such as \"AE\" (U+041U+0045), depending on the culture. The following example illustrates the difference between the <xref:System.String.IndexOf%28System.Char%29?displayProperty=fullName> and <xref:System.Globalization.CompareInfo.IndexOf%28System.String%2CSystem.Char%29?displayProperty=fullName> methods when searching for an individual character. The ligature \"Ã¦\" (U+00E6) is found in the string \"aerial\" when using the conventions of the en-US culture, but not when using the conventions of the da-DK culture or when performing an ordinal comparison.  \n  \n [!code-csharp[System.String.Class#22](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Class/cs/search1.cs#22)]\n [!code-vb[System.String.Class#22](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Class/vb/search1.vb#22)]  \n  \n On the other hand, <xref:System.String> class methods that search for a string rather than a character perform a culture-sensitive search if search options are not explicitly specified by a parameter of type <xref:System.StringComparison>. The sole exception is <xref:System.String.Contains%2A>, which performs an ordinal search.  \n  \n<a name=\"equality\"></a>   \n### Testing for equality  \n Use the <xref:System.String.Compare%2A?displayProperty=fullName> method to determine the relationship of two strings in the sort order. Typically, this is a culture-sensitive operation. In contrast, call the <xref:System.String.Equals%2A?displayProperty=fullName> method to test for equality. Because the test for equality usually compares user input with some known string, such as a valid user name, a password, or a file system path, it is typically an ordinal operation.  \n  \n> [!WARNING]\n>  It is possible to test for equality by calling the <xref:System.String.Compare%2A?displayProperty=fullName> method and determining whether the return value is zero. However, this practice is not recommended. To determine whether two strings are equal, you should call one of the overloads of the <xref:System.String.Equals%2A?displayProperty=fullName> method. The preferred overload to call is either the instance <xref:System.String.Equals%28System.String%2CSystem.StringComparison%29> method or the static <xref:System.String.Equals%28System.String%2CSystem.String%2CSystem.StringComparison%29> method, because both methods include a <xref:System.StringComparison?displayProperty=fullName> parameter that explicitly specifies the type of comparison.  \n  \n The following example illustrates the danger of performing a culture-sensitive comparison for equality when an ordinal one should be used instead. In this case, the intent of the code is to prohibit file system access from URLs that begin with \"FILE://\" or \"file://\" by performing a case-insensitive comparison of the beginning of a URL with the string \"FILE://\". However, if a culture-sensitive comparison is performed using the Turkish (Turkey) culture on a URL that begins with \"file://\", the comparison for equality fails, because the Turkish uppercase equivalent of the lowercase \"i\" is \"Ä°\" instead of \"I\". As a result, file system access is inadvertently permitted. On the other hand, if an ordinal comparison is performed, the comparison for equality succeeds, and file system access is denied.  \n  \n [!code-cpp[System.String.Class#11](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Class/cpp/string.equals.cpp#11)]\n [!code-csharp[System.String.Class#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Class/cs/equality1.cs#11)]\n [!code-vb[System.String.Class#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Class/vb/equality1.vb#11)]  \n  \n<a name=\"Normalization\"></a>   \n## Normalization  \n Some Unicode characters have multiple representations. For example, any of the following code points can represent the letter \"áº¯\":  \n  \n-   U+1EAF  \n  \n-   U+0103 U+0301  \n  \n-   U+0061 U+0306 U+0301  \n  \n Multiple representations for a single character complicate searching, sorting, matching, and other string operations.  \n  \n The Unicode standard defines a process called normalization that returns one binary representation of a Unicode character for any of its equivalent binary representations. Normalization can use several algorithms, called normalization forms, that follow different rules. The .NET Framework supports Unicode normalization forms C, D, KC, and KD. When strings have been normalized to the same normalization form, they can be compared by using ordinal comparison.  \n  \n An ordinal comparison is a binary comparison of the Unicode scalar value of corresponding <xref:System.Char> objects in each string. The<xref:System.String> class includes a number of methods that can perform an ordinal comparison, including the following:  \n  \n-   Any overload of the <xref:System.String.Compare%2A>, <xref:System.String.Equals%2A>, <xref:System.String.StartsWith%2A>,  <xref:System.String.EndsWith%2A>, <xref:System.String.IndexOf%2A>,and <xref:System.String.LastIndexOf%2A> methods that includes a <xref:System.StringComparison> parameter. The method performs an ordinal comparison if you supply a value of <xref:System.StringComparison?displayProperty=fullName> or <xref:System.StringComparison.OrdinalIgnoreCase> for this parameter.  \n  \n-   The overloads of the <xref:System.String.CompareOrdinal%2A> method.  \n  \n-   Methods that use ordinal comparison by default, such as <xref:System.String.Contains%2A>, <xref:System.String.Replace%2A>, and <xref:System.String.Split%2A>.  \n  \n-   Methods that search for a <xref:System.Char>value or for the elements in a <xref:System.Char> arrayin a string instance. Such methods include <xref:System.String.IndexOf%28System.Char%29> and <xref:System.String.Split%28System.Char%5B%5D%29>.  \n  \n You can determine whether a string is normalized to normalization form C by calling the <xref:System.String.IsNormalized?displayProperty=fullName> method, or you can call the <xref:System.String.IsNormalized%28System.Text.NormalizationForm%29?displayProperty=fullName> method to determine whether a string is normalized to a specified normalization form. You can also call the <xref:System.String.Normalize?displayProperty=fullName> method to convert a string to normalization form C, or you can call the <xref:System.String.Normalize%28System.Text.NormalizationForm%29?displayProperty=fullName> method to convert a string to a specified normalization form. For step-by-step information about normalizing and comparing strings, see the <xref:System.String.Normalize> and <xref:System.String.Normalize%28System.Text.NormalizationForm%29> methods.  \n  \n The following simple example illustrates string normalization. It defines the letter \"á»\" in three different ways in three different strings, and uses an ordinal comparison for equality to determine that each string differs from the other two strings. It then converts each string to the supported normalization forms, and again performs an ordinal comparison of each string in a specified normalization form. In each case, the second test for equality shows that the strings are equal.  \n  \n [!code-cpp[System.String.Class#14](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Class/cpp/string.normalize.cpp#14)]\n [!code-csharp[System.String.Class#14](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Class/cs/normalize1.cs#14)]\n [!code-vb[System.String.Class#14](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Class/vb/normalize1.vb#14)]  \n  \n For more information about normalization and normalization forms, see <xref:System.Text.NormalizationForm?displayProperty=fullName>, as well as [Unicode Standard Annex #15: Unicode Normalization Forms](http://unicode.org/reports/tr15/) and the [Normalization FAQ](http://www.unicode.org/faq/normalization.html) on the unicode.org website.  \n  \n<a name=\"ByCategory\"></a>   \n## String operations by category  \n The <xref:System.String> class provides members for comparing strings, testing strings for equality, finding characters or substrings in a string, modifying a string, extracting substrings from a string, combining strings, formatting values, copying a string, and normalizing a string.  \n  \n### Comparing strings  \n You can compare strings to determine their relative position in the sort order by using the following <xref:System.String>methods:  \n  \n-   <xref:System.String.Compare%2A> returns an integer that indicates the relationship of one string to a second string in the sort order.  \n  \n-   <xref:System.String.CompareOrdinal%2A> returns an integer that indicates the relationship of one string to a second string based on a comparison of their code points.  \n  \n-   <xref:System.String.CompareTo%2A> returns an integer that indicates the relationship of the current string instance to a second string in the sort order. The <xref:System.String.CompareTo%28System.String%29> method provides the <xref:System.IComparable> and <xref:System.IComparable%601> implementations for the <xref:System.String> class.  \n  \n### Testing strings for equality  \n You call the <xref:System.String.Equals%2A> method to determine whether two strings are equal. The instance <xref:System.String.Equals%28System.String%2CSystem.String%2CSystem.StringComparison%29> and the static <xref:System.String.Equals%28System.String%2CSystem.StringComparison%29> overloads let you specify whether the comparison is culture-sensitive or ordinal, and whether case is considered or ignored. Most tests for equality are ordinal, and comparisons for equality that determine access to a system resource (such as a file system object) should always be ordinal.  \n  \n### Finding characters in a string  \n The <xref:System.String> class includes two kinds of search methods:  \n  \n-   Methods that return a <xref:System.Boolean> value to indicate whether a particular substring is present in a string instance. These include the <xref:System.String.Contains%2A>, <xref:System.String.EndsWith%2A>, and <xref:System.String.StartsWith%2A> methods.  \n  \n-   Methods that indicate the starting position of a substring in a string instance. These include the <xref:System.String.IndexOf%2A>, <xref:System.String.IndexOfAny%2A>, <xref:System.String.LastIndexOf%2A>, and <xref:System.String.LastIndexOfAny%2A> methods.  \n  \n> [!WARNING]\n>  If you want to search a string for a particular pattern rather than a specific substring, you should use regular expressions. For more information, see [.NET Framework Regular Expressions](~/docs/standard/base-types/regular-expressions.md).  \n  \n### Modifying a string  \n The <xref:System.String> class includes the following methods that appear to modify the value of a string:  \n  \n-   <xref:System.String.Insert%2A> inserts a string into the current <xref:System.String> instance.  \n  \n-   <xref:System.String.PadLeft%2A> inserts one or more occurrences of a specified character at the beginning of a string.  \n  \n-   <xref:System.String.PadRight%2A> inserts one or more occurrences of a specified character at the beginning of a string.  \n  \n-   <xref:System.String.Remove%2A> deletes a substring from the current <xref:System.String> instance.  \n  \n-   <xref:System.String.Replace%2A> replaces a substring with another substring in the current <xref:System.String> instance.  \n  \n-   <xref:System.String.ToLower%2A> and <xref:System.String.ToLowerInvariant%2A> convert all the characters in a string to lowercase.  \n  \n-   <xref:System.String.ToUpper%2A> and <xref:System.String.ToUpperInvariant%2A> convert all the characters in a string to uppercase.  \n  \n-   <xref:System.String.Trim%2A> removes all occurrences of a character from the beginning and end of a string.  \n  \n-   <xref:System.String.TrimEnd%2A> removes all occurrences of a character from the end of a string.  \n  \n-   <xref:System.String.TrimStart%2A> removes all occurrences of a character from the beginning of a string.  \n  \n> [!IMPORTANT]\n>  All string modification methods return a new <xref:System.String> object. They do not modify the value of the current instance.  \n  \n### Extracting substrings from a string  \n The <xref:System.String.Split%2A?displayProperty=fullName> method separates a single string into multiple strings. Overloads of the method allow you to specify multiple delimiters, to determine the maximum number of substrings that the method extracts, and to determine whether empty strings (which occur when delimiters are adjacent) are included among the returned strings.  \n  \n### Combining strings  \n The following <xref:System.String> methods can be used for string concatenation:  \n  \n-   <xref:System.String.Concat%2A> combines one or more substrings into a single string.  \n  \n-   <xref:System.String.Join%2A> concatenates one or more substrings into a single element and adds a separator between each substring.  \n  \n### Formatting values  \n The <xref:System.String.Format%2A?displayProperty=fullName> method uses the composite formatting feature to replace one or more placeholders in a string with the string representation of some object or value. The <xref:System.String.Format%2A> method is often used to do the following:  \n  \n-   To embed the string representation of a numeric value in a string.  \n  \n-   To embed the string representation of a date and time value in a string.  \n  \n-   To embed the string representation of an enumeration value in a string.  \n  \n-   To embed the string representation of some object that supports the <xref:System.IFormattable> interface in a string.  \n  \n-   To right-justify or left-justify a substring in a field within a larger string.  \n  \n For detailed information about formatting operations and examples, see the <xref:System.String.Format%2A> overload summary.  \n  \n### Copying a string  \n You can call the following <xref:System.String> methods to make a copy of a string:  \n  \n-   <xref:System.String.Clone%2A> returns a reference to an existing <xref:System.String> object.  \n  \n-   <xref:System.String.Copy%2A> creates a copy of an existing string.  \n  \n-   <xref:System.String.CopyTo%2A> copies a portion of a string to a character array.  \n  \n### Normalizing a string  \n In Unicode, a single character can have multiple code points. Normalization converts these equivalent characters into the same binary representation. The <xref:System.String.Normalize%2A?displayProperty=fullName> method performs the normalization, and the <xref:System.String.IsNormalized%2A?displayProperty=fullName> method determines whether a string is normalized.  \n  \n For more information and an example, see the [Normalization](#Normalization) section earlier in this topic.","nodes":[{"pos":[2,405],"content":"[!NOTE]\n To view the .NET Framework source code for this type, see the [Reference Source](http://referencesource.microsoft.com/#mscorlib/system/string.cs#8281103e6f23cb5c). You can browse through the source code online, download the reference for offline viewing, and step through the sources (including patches and updates) during debugging; see [instructions](http://referencesource.microsoft.com/).","leadings":["","> "],"nodes":[{"content":" To view the .NET Framework source code for this type, see the [Reference Source](http://referencesource.microsoft.com/#mscorlib/system/string.cs#8281103e6f23cb5c). You can browse through the source code online, download the reference for offline viewing, and step through the sources (including patches and updates) during debugging; see [instructions](http://referencesource.microsoft.com/).","pos":[8,401],"nodes":[{"content":"To view the .NET Framework source code for this type, see the <bpt id=\"p1\">[</bpt>Reference Source<ept id=\"p1\">](http://referencesource.microsoft.com/#mscorlib/system/string.cs#8281103e6f23cb5c)</ept>.","pos":[1,164],"source":" To view the .NET Framework source code for this type, see the [Reference Source](http://referencesource.microsoft.com/#mscorlib/system/string.cs#8281103e6f23cb5c)."},{"content":"You can browse through the source code online, download the reference for offline viewing, and step through the sources (including patches and updates) during debugging; see <bpt id=\"p1\">[</bpt>instructions<ept id=\"p1\">](http://referencesource.microsoft.com/)</ept>.","pos":[165,393],"source":" You can browse through the source code online, download the reference for offline viewing, and step through the sources (including patches and updates) during debugging; see [instructions](http://referencesource.microsoft.com/)."}]}]},{"pos":[412,1169],"content":"A string is a sequential collection of characters that is used to represent text. A <xref:System.String> object is a sequential collection of <xref:System.Char?displayProperty=fullName> objects that represent a string; a <xref:System.Char?displayProperty=fullName> object corresponds to a UTF-16 code unit. The value of the <xref:System.String> object is the content of the sequential collection of <xref:System.Char?displayProperty=fullName> objects, and that value is immutable (that is, it is read-only). For more information about the immutability of strings, see the [Immutability and the StringBuilder class](#Immutability) section later in this topic. The maximum size of a <xref:System.String> object in memory is 2GB, or about 1 billion characters.","nodes":[{"content":"A string is a sequential collection of characters that is used to represent text.","pos":[0,81]},{"content":"A <ph id=\"ph1\">&lt;xref:System.String&gt;</ph> object is a sequential collection of <ph id=\"ph2\">&lt;xref:System.Char?displayProperty=fullName&gt;</ph> objects that represent a string; a <ph id=\"ph3\">&lt;xref:System.Char?displayProperty=fullName&gt;</ph> object corresponds to a UTF-16 code unit.","pos":[82,306],"source":" A <xref:System.String> object is a sequential collection of <xref:System.Char?displayProperty=fullName> objects that represent a string; a <xref:System.Char?displayProperty=fullName> object corresponds to a UTF-16 code unit."},{"content":"The value of the <ph id=\"ph1\">&lt;xref:System.String&gt;</ph> object is the content of the sequential collection of <ph id=\"ph2\">&lt;xref:System.Char?displayProperty=fullName&gt;</ph> objects, and that value is immutable (that is, it is read-only).","pos":[307,507],"source":" The value of the <xref:System.String> object is the content of the sequential collection of <xref:System.Char?displayProperty=fullName> objects, and that value is immutable (that is, it is read-only)."},{"content":"For more information about the immutability of strings, see the <bpt id=\"p1\">[</bpt>Immutability and the StringBuilder class<ept id=\"p1\">](#Immutability)</ept> section later in this topic.","pos":[508,658],"source":" For more information about the immutability of strings, see the [Immutability and the StringBuilder class](#Immutability) section later in this topic."},{"content":"The maximum size of a <ph id=\"ph1\">&lt;xref:System.String&gt;</ph> object in memory is 2GB, or about 1 billion characters.","pos":[659,757],"source":" The maximum size of a <xref:System.String> object in memory is 2GB, or about 1 billion characters."}]},{"pos":[1176,1192],"content":"In this section:","nodes":[{"content":"In this section:","pos":[0,16]}]},{"pos":[1199,1703],"content":"[Instantiating a String object](#Instantiation)   \n [Char objects and Unicode characters](#Characters)   \n [Strings and The Unicode Standard](#Unicode)   \n [Strings and embedded null characters](#EmbeddedNulls)   \n [Strings and indexes](#Indexes)   \n [Null strings and empty strings](#Nulls)   \n [Immutability and the StringBuilder class](#Immutability)   \n [Ordinal vs. culture-sensitive operations](#CultureSensitive)   \n [Normalization](#Normalization)   \n [String operations by category](#ByCategory)","nodes":[{"content":"<bpt id=\"p1\">[</bpt>Instantiating a String object<ept id=\"p1\">](#Instantiation)</ept><ph id=\"ph1\"> </ph>","pos":[0,48],"source":"[Instantiating a String object](#Instantiation) "},{"content":"<bpt id=\"p1\"> [</bpt>Char objects and Unicode characters<ept id=\"p1\">](#Characters)</ept><ph id=\"ph1\"> </ph>","pos":[51,103],"source":" [Char objects and Unicode characters](#Characters) "},{"content":"<bpt id=\"p1\"> [</bpt>Strings and The Unicode Standard<ept id=\"p1\">](#Unicode)</ept><ph id=\"ph1\"> </ph>","pos":[106,152],"source":" [Strings and The Unicode Standard](#Unicode) "},{"content":"<bpt id=\"p1\"> [</bpt>Strings and embedded null characters<ept id=\"p1\">](#EmbeddedNulls)</ept><ph id=\"ph1\"> </ph>","pos":[155,211],"source":" [Strings and embedded null characters](#EmbeddedNulls) "},{"content":"<bpt id=\"p1\"> [</bpt>Strings and indexes<ept id=\"p1\">](#Indexes)</ept><ph id=\"ph1\"> </ph>","pos":[214,247],"source":" [Strings and indexes](#Indexes) "},{"content":"<bpt id=\"p1\"> [</bpt>Null strings and empty strings<ept id=\"p1\">](#Nulls)</ept><ph id=\"ph1\"> </ph>","pos":[250,292],"source":" [Null strings and empty strings](#Nulls) "},{"content":"<bpt id=\"p1\"> [</bpt>Immutability and the StringBuilder class<ept id=\"p1\">](#Immutability)</ept><ph id=\"ph1\"> </ph>","pos":[295,354],"source":" [Immutability and the StringBuilder class](#Immutability) "},{"content":"<bpt id=\"p1\"> [</bpt>Ordinal vs. culture-sensitive operations<ept id=\"p1\">](#CultureSensitive)</ept><ph id=\"ph1\"> </ph>","pos":[357,420],"source":" [Ordinal vs. culture-sensitive operations](#CultureSensitive) "},{"content":"<bpt id=\"p1\"> [</bpt>Normalization<ept id=\"p1\">](#Normalization)</ept><ph id=\"ph1\"> </ph>","pos":[423,456],"source":" [Normalization](#Normalization) "},{"content":"<bpt id=\"p1\"> [</bpt>String operations by category<ept id=\"p1\">](#ByCategory)</ept>","pos":[459,504],"source":" [String operations by category](#ByCategory)"}]},{"pos":[1744,1773],"content":"Instantiating a String object","linkify":"Instantiating a String object","nodes":[{"content":"Instantiating a String object","pos":[0,29]}]},{"pos":[1777,1849],"content":"You can instantiate a <xref:System.String> object in the following ways:","nodes":[{"content":"You can instantiate a <ph id=\"ph1\">&lt;xref:System.String&gt;</ph> object in the following ways:","pos":[0,72],"source":"You can instantiate a <xref:System.String> object in the following ways:"}]},{"pos":[1859,2205],"content":"By assigning a string literal to a <xref:System.String> variable. This is the most commonly used method for creating a string. The following example uses assignment to create several strings. Note that in C#, because the backslash (\\\\) is an escape character, literal backslashes in a string must be escaped or the entire string must be @-quoted.","nodes":[{"content":"By assigning a string literal to a <xref:System.String> variable. This is the most commonly used method for creating a string. The following example uses assignment to create several strings. Note that in C#, because the backslash (\\\\) is an escape character, literal backslashes in a string must be escaped or the entire string must be @-quoted.","pos":[0,346],"nodes":[{"content":"By assigning a string literal to a <ph id=\"ph1\">&lt;xref:System.String&gt;</ph> variable.","pos":[0,65],"source":"By assigning a string literal to a <xref:System.String> variable."},{"content":"This is the most commonly used method for creating a string.","pos":[66,126]},{"content":"The following example uses assignment to create several strings.","pos":[127,191]},{"content":"Note that in C#, because the backslash (<ph id=\"ph1\">\\\\</ph>) is an escape character, literal backslashes in a string must be escaped or the entire string must be <ph id=\"ph2\">@-quoted</ph>.","pos":[192,346],"source":" Note that in C#, because the backslash (\\\\) is an escape character, literal backslashes in a string must be escaped or the entire string must be @-quoted."}]}]},{"pos":[2216,2683],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>System.String.Class.Instantiate#1<ept id=\"p2\">](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.string.class.instantiate/cpp/string.instantiate1.cpp#1)</ept><ept id=\"p1\">]</ept>  <bpt id=\"p3\">[!code-csharp</bpt><bpt id=\"p4\">[</bpt>System.String.Class.Instantiate#1<ept id=\"p4\">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.class.instantiate/cs/program.cs#1)</ept><ept id=\"p3\">]</ept>  <bpt id=\"p5\">[!code-vb</bpt><bpt id=\"p6\">[</bpt>System.String.Class.Instantiate#1<ept id=\"p6\">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.string.class.instantiate/vb/instantiate1.vb#1)</ept><ept id=\"p5\">]</ept>","leadings":["","    ","    "],"source":"[!code-cpp[System.String.Class.Instantiate#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.string.class.instantiate/cpp/string.instantiate1.cpp#1)]\n [!code-csharp[System.String.Class.Instantiate#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.class.instantiate/cs/program.cs#1)]\n [!code-vb[System.String.Class.Instantiate#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.string.class.instantiate/vb/instantiate1.vb#1)]"},{"pos":[2693,3122],"content":"By calling a <xref:System.String> class constructor. The following example instantiates strings by calling several class constructors. Note that some of the constructors include pointers to character arrays or signed byte arrays as parameters. Visual Basic does not support calls to these constructors. For detailed information about <xref:System.String> constructors, see the <xref:System.String.%23ctor%2A> constructor summary.","nodes":[{"content":"By calling a <xref:System.String> class constructor. The following example instantiates strings by calling several class constructors. Note that some of the constructors include pointers to character arrays or signed byte arrays as parameters. Visual Basic does not support calls to these constructors. For detailed information about <xref:System.String> constructors, see the <xref:System.String.%23ctor%2A> constructor summary.","pos":[0,429],"nodes":[{"content":"By calling a <ph id=\"ph1\">&lt;xref:System.String&gt;</ph> class constructor.","pos":[0,52],"source":"By calling a <xref:System.String> class constructor."},{"content":"The following example instantiates strings by calling several class constructors.","pos":[53,134]},{"content":"Note that some of the constructors include pointers to character arrays or signed byte arrays as parameters.","pos":[135,243]},{"content":"Visual Basic does not support calls to these constructors.","pos":[244,302]},{"content":"For detailed information about <ph id=\"ph1\">&lt;xref:System.String&gt;</ph> constructors, see the <ph id=\"ph2\">&lt;xref:System.String.%23ctor%2A&gt;</ph> constructor summary.","pos":[303,429],"source":" For detailed information about <xref:System.String> constructors, see the <xref:System.String.%23ctor%2A> constructor summary."}]}]},{"pos":[3133,3600],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>System.String.Class.Instantiate#2<ept id=\"p2\">](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.string.class.instantiate/cpp/string.instantiate2.cpp#2)</ept><ept id=\"p1\">]</ept>  <bpt id=\"p3\">[!code-csharp</bpt><bpt id=\"p4\">[</bpt>System.String.Class.Instantiate#2<ept id=\"p4\">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.class.instantiate/cs/program.cs#2)</ept><ept id=\"p3\">]</ept>  <bpt id=\"p5\">[!code-vb</bpt><bpt id=\"p6\">[</bpt>System.String.Class.Instantiate#2<ept id=\"p6\">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.string.class.instantiate/vb/instantiate1.vb#2)</ept><ept id=\"p5\">]</ept>","leadings":["","    ","    "],"source":"[!code-cpp[System.String.Class.Instantiate#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.string.class.instantiate/cpp/string.instantiate2.cpp#2)]\n [!code-csharp[System.String.Class.Instantiate#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.class.instantiate/cs/program.cs#2)]\n [!code-vb[System.String.Class.Instantiate#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.string.class.instantiate/vb/instantiate1.vb#2)]"},{"pos":[3610,3871],"content":"By using the string concatenation operator (+ in C# and & or + in Visual Basic) to create a single string from any combination of <xref:System.String> instances and string literals. The following example illustrates the use of the string concatenation operator.","nodes":[{"content":"By using the string concatenation operator (+ in C# and & or + in Visual Basic) to create a single string from any combination of <xref:System.String> instances and string literals. The following example illustrates the use of the string concatenation operator.","pos":[0,261],"nodes":[{"content":"By using the string concatenation operator (+ in C# and &amp; or + in Visual Basic) to create a single string from any combination of <ph id=\"ph1\">&lt;xref:System.String&gt;</ph> instances and string literals.","pos":[0,181],"source":"By using the string concatenation operator (+ in C# and & or + in Visual Basic) to create a single string from any combination of <xref:System.String> instances and string literals."},{"content":"The following example illustrates the use of the string concatenation operator.","pos":[182,261]}]}]},{"pos":[3882,4349],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>System.String.Class.Instantiate#3<ept id=\"p2\">](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.string.class.instantiate/cpp/string.instantiate3.cpp#3)</ept><ept id=\"p1\">]</ept>  <bpt id=\"p3\">[!code-csharp</bpt><bpt id=\"p4\">[</bpt>System.String.Class.Instantiate#3<ept id=\"p4\">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.class.instantiate/cs/program.cs#3)</ept><ept id=\"p3\">]</ept>  <bpt id=\"p5\">[!code-vb</bpt><bpt id=\"p6\">[</bpt>System.String.Class.Instantiate#3<ept id=\"p6\">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.string.class.instantiate/vb/instantiate1.vb#3)</ept><ept id=\"p5\">]</ept>","leadings":["","    ","    "],"source":"[!code-cpp[System.String.Class.Instantiate#3](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.string.class.instantiate/cpp/string.instantiate3.cpp#3)]\n [!code-csharp[System.String.Class.Instantiate#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.class.instantiate/cs/program.cs#3)]\n [!code-vb[System.String.Class.Instantiate#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.string.class.instantiate/vb/instantiate1.vb#3)]"},{"pos":[4359,4544],"content":"By retrieving a property or calling a method that returns a string. The following example uses the methods of the <xref:System.String> class to extract a substring from a larger string.","nodes":[{"content":"By retrieving a property or calling a method that returns a string. The following example uses the methods of the <xref:System.String> class to extract a substring from a larger string.","pos":[0,185],"nodes":[{"content":"By retrieving a property or calling a method that returns a string.","pos":[0,67]},{"content":"The following example uses the methods of the <ph id=\"ph1\">&lt;xref:System.String&gt;</ph> class to extract a substring from a larger string.","pos":[68,185],"source":" The following example uses the methods of the <xref:System.String> class to extract a substring from a larger string."}]}]},{"pos":[4555,5022],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>System.String.Class.Instantiate#4<ept id=\"p2\">](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.string.class.instantiate/cpp/string.instantiate3.cpp#4)</ept><ept id=\"p1\">]</ept>  <bpt id=\"p3\">[!code-csharp</bpt><bpt id=\"p4\">[</bpt>System.String.Class.Instantiate#4<ept id=\"p4\">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.class.instantiate/cs/program.cs#4)</ept><ept id=\"p3\">]</ept>  <bpt id=\"p5\">[!code-vb</bpt><bpt id=\"p6\">[</bpt>System.String.Class.Instantiate#4<ept id=\"p6\">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.string.class.instantiate/vb/instantiate1.vb#4)</ept><ept id=\"p5\">]</ept>","leadings":["","    ","    "],"source":"[!code-cpp[System.String.Class.Instantiate#4](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.string.class.instantiate/cpp/string.instantiate3.cpp#4)]\n [!code-csharp[System.String.Class.Instantiate#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.class.instantiate/cs/program.cs#4)]\n [!code-vb[System.String.Class.Instantiate#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.string.class.instantiate/vb/instantiate1.vb#4)]"},{"pos":[5032,5315],"content":"By calling a formatting method to convert a value or object to its string representation. The following example uses the                [composite formatting](~/docs/standard/base-types/composite-formatting.md) feature to embed the string representation of two objects into a string.","nodes":[{"content":"By calling a formatting method to convert a value or object to its string representation.","pos":[0,89]},{"content":"The following example uses the                <bpt id=\"p1\">[</bpt>composite formatting<ept id=\"p1\">](~/docs/standard/base-types/composite-formatting.md)</ept> feature to embed the string representation of two objects into a string.","pos":[90,283],"source":" The following example uses the                [composite formatting](~/docs/standard/base-types/composite-formatting.md) feature to embed the string representation of two objects into a string."}]},{"pos":[5326,5793],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>System.String.Class.Instantiate#5<ept id=\"p2\">](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.string.class.instantiate/cpp/string.instantiate3.cpp#5)</ept><ept id=\"p1\">]</ept>  <bpt id=\"p3\">[!code-csharp</bpt><bpt id=\"p4\">[</bpt>System.String.Class.Instantiate#5<ept id=\"p4\">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.class.instantiate/cs/program.cs#5)</ept><ept id=\"p3\">]</ept>  <bpt id=\"p5\">[!code-vb</bpt><bpt id=\"p6\">[</bpt>System.String.Class.Instantiate#5<ept id=\"p6\">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.string.class.instantiate/vb/instantiate1.vb#5)</ept><ept id=\"p5\">]</ept>","leadings":["","    ","    "],"source":"[!code-cpp[System.String.Class.Instantiate#5](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.string.class.instantiate/cpp/string.instantiate3.cpp#5)]\n [!code-csharp[System.String.Class.Instantiate#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.class.instantiate/cs/program.cs#5)]\n [!code-vb[System.String.Class.Instantiate#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.string.class.instantiate/vb/instantiate1.vb#5)]"},{"pos":[5831,5866],"content":"Char objects and Unicode characters","linkify":"Char objects and Unicode characters","nodes":[{"content":"Char objects and Unicode characters","pos":[0,35]}]},{"pos":[5870,6178],"content":"Each character in a string is defined by a Unicode scalar value, also called a Unicode code point or the ordinal (numeric) value of the Unicode character. Each code point is encoded by using UTF-16 encoding, and the numeric value of each element of the encoding is represented by a <xref:System.Char> object.","nodes":[{"content":"Each character in a string is defined by a Unicode scalar value, also called a Unicode code point or the ordinal (numeric) value of the Unicode character. Each code point is encoded by using UTF-16 encoding, and the numeric value of each element of the encoding is represented by a <xref:System.Char> object.","pos":[0,308],"nodes":[{"content":"Each character in a string is defined by a Unicode scalar value, also called a Unicode code point or the ordinal (numeric) value of the Unicode character.","pos":[0,154]},{"content":"Each code point is encoded by using UTF-16 encoding, and the numeric value of each element of the encoding is represented by a <ph id=\"ph1\">&lt;xref:System.Char&gt;</ph> object.","pos":[155,308],"source":" Each code point is encoded by using UTF-16 encoding, and the numeric value of each element of the encoding is represented by a <xref:System.Char> object."}]}]},{"pos":[6186,6766],"content":"[!NOTE]\n Note that, because a <xref:System.String> instance consists of a sequential collection of UTF-16 code units, it is possible to create a <xref:System.String> object that is not a well-formed Unicode string. For example, it is possible to create a string that has a low surrogate without a corresponding high surrogate. Although some methods, such as the methods of encoding and decoding objects in the <xref:System.Text> namespace, may performs checks to ensure that strings are well-formed, <xref:System.String> class members do not ensure that a string is well-formed.","leadings":["","> "],"nodes":[{"content":" Note that, because a <xref:System.String> instance consists of a sequential collection of UTF-16 code units, it is possible to create a <xref:System.String> object that is not a well-formed Unicode string. For example, it is possible to create a string that has a low surrogate without a corresponding high surrogate. Although some methods, such as the methods of encoding and decoding objects in the <xref:System.Text> namespace, may performs checks to ensure that strings are well-formed, <xref:System.String> class members do not ensure that a string is well-formed.","pos":[8,578],"nodes":[{"content":"Note that, because a <ph id=\"ph1\">&lt;xref:System.String&gt;</ph> instance consists of a sequential collection of UTF-16 code units, it is possible to create a <ph id=\"ph2\">&lt;xref:System.String&gt;</ph> object that is not a well-formed Unicode string.","pos":[1,206],"source":" Note that, because a <xref:System.String> instance consists of a sequential collection of UTF-16 code units, it is possible to create a <xref:System.String> object that is not a well-formed Unicode string."},{"content":"For example, it is possible to create a string that has a low surrogate without a corresponding high surrogate.","pos":[207,318]},{"content":"Although some methods, such as the methods of encoding and decoding objects in the <ph id=\"ph1\">&lt;xref:System.Text&gt;</ph> namespace, may performs checks to ensure that strings are well-formed, <ph id=\"ph2\">&lt;xref:System.String&gt;</ph> class members do not ensure that a string is well-formed.","pos":[319,570],"source":" Although some methods, such as the methods of encoding and decoding objects in the <xref:System.Text> namespace, may performs checks to ensure that strings are well-formed, <xref:System.String> class members do not ensure that a string is well-formed."}]}]},{"pos":[6773,7318],"content":"A single <xref:System.Char> object usually represents a single code point; that is, the numeric value of the <xref:System.Char> equals the code point. For example, the code point for the character \"a\" is U+0061. However, a code point might require more than one encoded element (more than one <xref:System.Char> object). The Unicode standard defines two types of characters that correspond to multiple <xref:System.Char> objects: graphemes, and Unicode supplementary code points that correspond to characters in the Unicode supplementary planes.","nodes":[{"content":"A single <xref:System.Char> object usually represents a single code point; that is, the numeric value of the <xref:System.Char> equals the code point. For example, the code point for the character \"a\" is U+0061. However, a code point might require more than one encoded element (more than one <xref:System.Char> object). The Unicode standard defines two types of characters that correspond to multiple <xref:System.Char> objects: graphemes, and Unicode supplementary code points that correspond to characters in the Unicode supplementary planes.","pos":[0,545],"nodes":[{"content":"A single <ph id=\"ph1\">&lt;xref:System.Char&gt;</ph> object usually represents a single code point; that is, the numeric value of the <ph id=\"ph2\">&lt;xref:System.Char&gt;</ph> equals the code point.","pos":[0,150],"source":"A single <xref:System.Char> object usually represents a single code point; that is, the numeric value of the <xref:System.Char> equals the code point."},{"content":"For example, the code point for the character \"a\" is U+0061.","pos":[151,211]},{"content":"However, a code point might require more than one encoded element (more than one <ph id=\"ph1\">&lt;xref:System.Char&gt;</ph> object).","pos":[212,320],"source":" However, a code point might require more than one encoded element (more than one <xref:System.Char> object)."},{"content":"The Unicode standard defines two types of characters that correspond to multiple <ph id=\"ph1\">&lt;xref:System.Char&gt;</ph> objects: graphemes, and Unicode supplementary code points that correspond to characters in the Unicode supplementary planes.","pos":[321,545],"source":" The Unicode standard defines two types of characters that correspond to multiple <xref:System.Char> objects: graphemes, and Unicode supplementary code points that correspond to characters in the Unicode supplementary planes."}]}]},{"pos":[7328,8071],"content":"A grapheme is represented by a base character followed by one or more combining characters. For example, the character Ã¤ is represented by a <xref:System.Char> object whose code point is U+0061 followed by a <xref:System.Char> object whose code point is U+0308. This character can also be defined by a single <xref:System.Char> object that has a code point of U+00E4. As the following example shows, a culture-sensitive comparison for equality indicates that these two representations are equal, although an ordinary ordinal comparison does not. However, if the two strings are normalized, an ordinal comparison also indicates that they are equal. (For more information on normalizing strings, see the [Normalization](#Normalization) section.)","nodes":[{"content":"A grapheme is represented by a base character followed by one or more combining characters.","pos":[0,91]},{"content":"For example, the character Ã¤ is represented by a <ph id=\"ph1\">&lt;xref:System.Char&gt;</ph> object whose code point is U+0061 followed by a <ph id=\"ph2\">&lt;xref:System.Char&gt;</ph> object whose code point is U+0308.","pos":[92,261],"source":" For example, the character Ã¤ is represented by a <xref:System.Char> object whose code point is U+0061 followed by a <xref:System.Char> object whose code point is U+0308."},{"content":"This character can also be defined by a single <ph id=\"ph1\">&lt;xref:System.Char&gt;</ph> object that has a code point of U+00E4.","pos":[262,367],"source":" This character can also be defined by a single <xref:System.Char> object that has a code point of U+00E4."},{"content":"As the following example shows, a culture-sensitive comparison for equality indicates that these two representations are equal, although an ordinary ordinal comparison does not.","pos":[368,545]},{"content":"However, if the two strings are normalized, an ordinal comparison also indicates that they are equal.","pos":[546,647]},{"content":"(For more information on normalizing strings, see the <bpt id=\"p1\">[</bpt>Normalization<ept id=\"p1\">](#Normalization)</ept> section.)","pos":[648,743],"source":" (For more information on normalizing strings, see the [Normalization](#Normalization) section.)"}]},{"pos":[8082,8469],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>System.String.Class#2<ept id=\"p2\">](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Class/cpp/string.char1.cpp#2)</ept><ept id=\"p1\">]</ept>  <bpt id=\"p3\">[!code-csharp</bpt><bpt id=\"p4\">[</bpt>System.String.Class#2<ept id=\"p4\">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Class/cs/grapheme1.cs#2)</ept><ept id=\"p3\">]</ept>  <bpt id=\"p5\">[!code-vb</bpt><bpt id=\"p6\">[</bpt>System.String.Class#2<ept id=\"p6\">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Class/vb/grapheme1.vb#2)</ept><ept id=\"p5\">]</ept>","leadings":["","    ","    "],"source":"[!code-cpp[System.String.Class#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Class/cpp/string.char1.cpp#2)]\n [!code-csharp[System.String.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Class/cs/grapheme1.cs#2)]\n [!code-vb[System.String.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Class/vb/grapheme1.vb#2)]"},{"pos":[8479,9122],"content":"A Unicode supplementary code point (a surrogate pair) is represented by a <xref:System.Char> object whose code point is a high surrogate followed by a <xref:System.Char> object whose code point is a low surrogate. The code units of high surrogates range from U+D800 to U+DBFF. The code units of low surrogates range from U+DC00 to U+DFFF. Surrogate pairs are used to represent characters in the 16 Unicode supplementary planes. The following example creates a surrogate character and passes it to the <xref:System.Char.IsSurrogatePair%28System.Char%2CSystem.Char%29?displayProperty=fullName> method to determine whether it is a surrogate pair.","nodes":[{"content":"A Unicode supplementary code point (a surrogate pair) is represented by a <xref:System.Char> object whose code point is a high surrogate followed by a <xref:System.Char> object whose code point is a low surrogate. The code units of high surrogates range from U+D800 to U+DBFF. The code units of low surrogates range from U+DC00 to U+DFFF. Surrogate pairs are used to represent characters in the 16 Unicode supplementary planes. The following example creates a surrogate character and passes it to the <xref:System.Char.IsSurrogatePair%28System.Char%2CSystem.Char%29?displayProperty=fullName> method to determine whether it is a surrogate pair.","pos":[0,643],"nodes":[{"content":"A Unicode supplementary code point (a surrogate pair) is represented by a <ph id=\"ph1\">&lt;xref:System.Char&gt;</ph> object whose code point is a high surrogate followed by a <ph id=\"ph2\">&lt;xref:System.Char&gt;</ph> object whose code point is a low surrogate.","pos":[0,213],"source":"A Unicode supplementary code point (a surrogate pair) is represented by a <xref:System.Char> object whose code point is a high surrogate followed by a <xref:System.Char> object whose code point is a low surrogate."},{"content":"The code units of high surrogates range from U+D800 to U+DBFF.","pos":[214,276]},{"content":"The code units of low surrogates range from U+DC00 to U+DFFF.","pos":[277,338]},{"content":"Surrogate pairs are used to represent characters in the 16 Unicode supplementary planes.","pos":[339,427]},{"content":"The following example creates a surrogate character and passes it to the <ph id=\"ph1\">&lt;xref:System.Char.IsSurrogatePair%28System.Char%2CSystem.Char%29?displayProperty=fullName&gt;</ph> method to determine whether it is a surrogate pair.","pos":[428,643],"source":" The following example creates a surrogate character and passes it to the <xref:System.Char.IsSurrogatePair%28System.Char%2CSystem.Char%29?displayProperty=fullName> method to determine whether it is a surrogate pair."}]}]},{"pos":[9133,9522],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>System.String.Class#3<ept id=\"p2\">](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Class/cpp/string.char2.cpp#3)</ept><ept id=\"p1\">]</ept>  <bpt id=\"p3\">[!code-csharp</bpt><bpt id=\"p4\">[</bpt>System.String.Class#3<ept id=\"p4\">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Class/cs/surrogate1.cs#3)</ept><ept id=\"p3\">]</ept>  <bpt id=\"p5\">[!code-vb</bpt><bpt id=\"p6\">[</bpt>System.String.Class#3<ept id=\"p6\">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Class/vb/surrogate1.vb#3)</ept><ept id=\"p5\">]</ept>","leadings":["","    ","    "],"source":"[!code-cpp[System.String.Class#3](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Class/cpp/string.char2.cpp#3)]\n [!code-csharp[System.String.Class#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Class/cs/surrogate1.cs#3)]\n [!code-vb[System.String.Class#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Class/vb/surrogate1.vb#3)]"},{"pos":[9557,9589],"content":"Strings and The Unicode Standard","linkify":"Strings and The Unicode Standard","nodes":[{"content":"Strings and The Unicode Standard","pos":[0,32]}]},{"pos":[9593,9708],"content":"Characters in a string are represented by UTF-16 encoded code units, which correspond to <xref:System.Char> values.","nodes":[{"content":"Characters in a string are represented by UTF-16 encoded code units, which correspond to <ph id=\"ph1\">&lt;xref:System.Char&gt;</ph> values.","pos":[0,115],"source":"Characters in a string are represented by UTF-16 encoded code units, which correspond to <xref:System.Char> values."}]},{"pos":[9715,10074],"content":"Each character in a string has an associated Unicode character category, which is represented in the .NET Framework by the <xref:System.Globalization.UnicodeCategory> enumeration. The category of a character or a surrogate pair can be determined by calling the <xref:System.Globalization.CharUnicodeInfo.GetUnicodeCategory%2A?displayProperty=fullName> method.","nodes":[{"content":"Each character in a string has an associated Unicode character category, which is represented in the .NET Framework by the <xref:System.Globalization.UnicodeCategory> enumeration. The category of a character or a surrogate pair can be determined by calling the <xref:System.Globalization.CharUnicodeInfo.GetUnicodeCategory%2A?displayProperty=fullName> method.","pos":[0,359],"nodes":[{"content":"Each character in a string has an associated Unicode character category, which is represented in the .NET Framework by the <ph id=\"ph1\">&lt;xref:System.Globalization.UnicodeCategory&gt;</ph> enumeration.","pos":[0,179],"source":"Each character in a string has an associated Unicode character category, which is represented in the .NET Framework by the <xref:System.Globalization.UnicodeCategory> enumeration."},{"content":"The category of a character or a surrogate pair can be determined by calling the <ph id=\"ph1\">&lt;xref:System.Globalization.CharUnicodeInfo.GetUnicodeCategory%2A?displayProperty=fullName&gt;</ph> method.","pos":[180,359],"source":" The category of a character or a surrogate pair can be determined by calling the <xref:System.Globalization.CharUnicodeInfo.GetUnicodeCategory%2A?displayProperty=fullName> method."}]}]},{"pos":[10081,10454],"content":"The .NET Framework maintains its own table of characters and their corresponding categories, which ensures that a version of the .NET Framework running on different platforms returns identical character category information. The following table lists the versions of the .NET Framework and the versions of the Unicode Standard on which their character categories are based.","nodes":[{"content":"The .NET Framework maintains its own table of characters and their corresponding categories, which ensures that a version of the .NET Framework running on different platforms returns identical character category information. The following table lists the versions of the .NET Framework and the versions of the Unicode Standard on which their character categories are based.","pos":[0,373],"nodes":[{"content":"The .NET Framework maintains its own table of characters and their corresponding categories, which ensures that a version of the .NET Framework running on different platforms returns identical character category information.","pos":[0,224]},{"content":"The following table lists the versions of the .NET Framework and the versions of the Unicode Standard on which their character categories are based.","pos":[225,373]}]}]},{"pos":[10461,10483],"content":".NET Framework version","nodes":[{"content":".NET Framework version","pos":[0,22]}]},{"pos":[10484,10515],"content":"Version of the Unicode Standard","nodes":[{"content":"Version of the Unicode Standard","pos":[0,31]}]},{"pos":[10647,10731],"content":"<bpt id=\"p1\">[</bpt>The Unicode Standard, Version 4.0.0<ept id=\"p1\">](http://www.unicode.org/versions/Unicode4.0.0/)</ept>","source":"[The Unicode Standard, Version 4.0.0](http://www.unicode.org/versions/Unicode4.0.0/)"},{"pos":[10736,10758],"content":"The .NET Framework 2.0","nodes":[{"content":"The .NET Framework 2.0","pos":[0,22]}]},{"pos":[10759,10842],"content":"<bpt id=\"p1\">[</bpt>The Unicode Standard, Version 5.0.0<ept id=\"p1\">](http://www.unicode.org/versions/Unicode5.0.0)</ept>","source":"[The Unicode Standard, Version 5.0.0](http://www.unicode.org/versions/Unicode5.0.0)"},{"pos":[10903,10986],"content":"<bpt id=\"p1\">[</bpt>The Unicode Standard, Version 5.0.0<ept id=\"p1\">](http://www.unicode.org/versions/Unicode5.0.0)</ept>","source":"[The Unicode Standard, Version 5.0.0](http://www.unicode.org/versions/Unicode5.0.0)"},{"pos":[11047,11130],"content":"<bpt id=\"p1\">[</bpt>The Unicode Standard, Version 5.0.0<ept id=\"p1\">](http://www.unicode.org/versions/Unicode5.0.0)</ept>","source":"[The Unicode Standard, Version 5.0.0](http://www.unicode.org/versions/Unicode5.0.0)"},{"pos":[11181,11265],"content":"<bpt id=\"p1\">[</bpt>The Unicode Standard, Version 6.3.0<ept id=\"p1\">](http://www.unicode.org/versions/Unicode6.3.0/)</ept>","source":"[The Unicode Standard, Version 6.3.0](http://www.unicode.org/versions/Unicode6.3.0/)"},{"pos":[11318,11402],"content":"<bpt id=\"p1\">[</bpt>The Unicode Standard, Version 6.3.0<ept id=\"p1\">](http://www.unicode.org/versions/Unicode6.3.0/)</ept>","source":"[The Unicode Standard, Version 6.3.0](http://www.unicode.org/versions/Unicode6.3.0/)"},{"pos":[11455,11539],"content":"<bpt id=\"p1\">[</bpt>The Unicode Standard, Version 6.3.0<ept id=\"p1\">](http://www.unicode.org/versions/Unicode6.3.0/)</ept>","source":"[The Unicode Standard, Version 6.3.0](http://www.unicode.org/versions/Unicode6.3.0/)"},{"pos":[11590,11674],"content":"<bpt id=\"p1\">[</bpt>The Unicode Standard, Version 6.3.0<ept id=\"p1\">](http://www.unicode.org/versions/Unicode6.3.0/)</ept>","source":"[The Unicode Standard, Version 6.3.0](http://www.unicode.org/versions/Unicode6.3.0/)"},{"pos":[11727,11811],"content":"<bpt id=\"p1\">[</bpt>The Unicode Standard, Version 6.3.0<ept id=\"p1\">](http://www.unicode.org/versions/Unicode6.3.0/)</ept>","source":"[The Unicode Standard, Version 6.3.0](http://www.unicode.org/versions/Unicode6.3.0/)"},{"pos":[11864,11948],"content":"<bpt id=\"p1\">[</bpt>The Unicode Standard, Version 8.0.0<ept id=\"p1\">](http://www.unicode.org/versions/Unicode8.0.0/)</ept>","source":"[The Unicode Standard, Version 8.0.0](http://www.unicode.org/versions/Unicode8.0.0/)"},{"pos":[11956,12736],"content":"In addition, the .NET Framework supports string comparison and sorting based on the Unicode standard. In versions of the .NET Framework through the [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)], the .NET Framework maintains its own table of string data. This is also true of versions of the .NET Framework starting with the [!INCLUDE[net_v45](~/includes/net-v45-md.md)] running on Windows 7. Starting with the [!INCLUDE[net_v45](~/includes/net-v45-md.md)] running on Window 8 and later versions of the Windows operating system, the runtime delegates string comparison and sorting operations to the operating system. The following table lists the versions of the .NET Framework and the versions of the Unicode Standard on which character comparison and sorting are based.","nodes":[{"content":"In addition, the .NET Framework supports string comparison and sorting based on the Unicode standard.","pos":[0,101]},{"content":"In versions of the .NET Framework through the <ph id=\"ph1\">[!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]</ph>, the .NET Framework maintains its own table of string data.","pos":[102,263],"source":" In versions of the .NET Framework through the [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)], the .NET Framework maintains its own table of string data."},{"content":"This is also true of versions of the .NET Framework starting with the <ph id=\"ph1\">[!INCLUDE[net_v45](~/includes/net-v45-md.md)]</ph> running on Windows 7.","pos":[264,401],"source":" This is also true of versions of the .NET Framework starting with the [!INCLUDE[net_v45](~/includes/net-v45-md.md)] running on Windows 7."},{"content":"Starting with the <ph id=\"ph1\">[!INCLUDE[net_v45](~/includes/net-v45-md.md)]</ph> running on Window 8 and later versions of the Windows operating system, the runtime delegates string comparison and sorting operations to the operating system.","pos":[402,625],"source":" Starting with the [!INCLUDE[net_v45](~/includes/net-v45-md.md)] running on Window 8 and later versions of the Windows operating system, the runtime delegates string comparison and sorting operations to the operating system."},{"content":"The following table lists the versions of the .NET Framework and the versions of the Unicode Standard on which character comparison and sorting are based.","pos":[626,780]}]},{"pos":[12743,12765],"content":".NET Framework version","nodes":[{"content":".NET Framework version","pos":[0,22]}]},{"pos":[12766,12797],"content":"Version of the Unicode Standard","nodes":[{"content":"Version of the Unicode Standard","pos":[0,31]}]},{"pos":[12929,13013],"content":"<bpt id=\"p1\">[</bpt>The Unicode Standard, Version 4.0.0<ept id=\"p1\">](http://www.unicode.org/versions/Unicode4.0.0/)</ept>","source":"[The Unicode Standard, Version 4.0.0](http://www.unicode.org/versions/Unicode4.0.0/)"},{"pos":[13018,13040],"content":"The .NET Framework 2.0","nodes":[{"content":"The .NET Framework 2.0","pos":[0,22]}]},{"pos":[13041,13124],"content":"<bpt id=\"p1\">[</bpt>The Unicode Standard, Version 5.0.0<ept id=\"p1\">](http://www.unicode.org/versions/Unicode5.0.0)</ept>","source":"[The Unicode Standard, Version 5.0.0](http://www.unicode.org/versions/Unicode5.0.0)"},{"pos":[13185,13268],"content":"<bpt id=\"p1\">[</bpt>The Unicode Standard, Version 5.0.0<ept id=\"p1\">](http://www.unicode.org/versions/Unicode5.0.0)</ept>","source":"[The Unicode Standard, Version 5.0.0](http://www.unicode.org/versions/Unicode5.0.0)"},{"pos":[13329,13412],"content":"<bpt id=\"p1\">[</bpt>The Unicode Standard, Version 5.0.0<ept id=\"p1\">](http://www.unicode.org/versions/Unicode5.0.0)</ept>","source":"[The Unicode Standard, Version 5.0.0](http://www.unicode.org/versions/Unicode5.0.0)"},{"pos":[13417,13485],"content":"<ph id=\"ph1\">[!INCLUDE[net_v45](~/includes/net-v45-md.md)]</ph> and later on Windows 7","source":"[!INCLUDE[net_v45](~/includes/net-v45-md.md)] and later on Windows 7"},{"pos":[13486,13569],"content":"<bpt id=\"p1\">[</bpt>The Unicode Standard, Version 5.0.0<ept id=\"p1\">](http://www.unicode.org/versions/Unicode5.0.0)</ept>","source":"[The Unicode Standard, Version 5.0.0](http://www.unicode.org/versions/Unicode5.0.0)"},{"pos":[13574,13678],"content":"<ph id=\"ph1\">[!INCLUDE[net_v45](~/includes/net-v45-md.md)]</ph> and later on Windows 8 and later Windows operating systems","source":"[!INCLUDE[net_v45](~/includes/net-v45-md.md)] and later on Windows 8 and later Windows operating systems"},{"pos":[13679,13763],"content":"<bpt id=\"p1\">[</bpt>The Unicode Standard, Version 6.3.0<ept id=\"p1\">](http://www.unicode.org/versions/Unicode6.3.0/)</ept>","source":"[The Unicode Standard, Version 6.3.0](http://www.unicode.org/versions/Unicode6.3.0/)"},{"pos":[13805,13841],"content":"Strings and embedded null characters","linkify":"Strings and embedded null characters","nodes":[{"content":"Strings and embedded null characters","pos":[0,36]}]},{"pos":[13845,14373],"content":"In the .NET Framework, a <xref:System.String> object can include embedded null characters, which count as a part of the string's length. However, in some languages such as C and C++, a null character indicates the end of a string;it is not considered a part of the string and is not counted as part of the string's length. This means that the following common assumptions that C and C++ programmers or libraries written in C or C++ might make about strings are not necessarily valid when applied to <xref:System.String> objects:","nodes":[{"content":"In the .NET Framework, a <xref:System.String> object can include embedded null characters, which count as a part of the string's length. However, in some languages such as C and C++, a null character indicates the end of a string;it is not considered a part of the string and is not counted as part of the string's length. This means that the following common assumptions that C and C++ programmers or libraries written in C or C++ might make about strings are not necessarily valid when applied to <xref:System.String> objects:","pos":[0,528],"nodes":[{"content":"In the .NET Framework, a <ph id=\"ph1\">&lt;xref:System.String&gt;</ph> object can include embedded null characters, which count as a part of the string's length.","pos":[0,136],"source":"In the .NET Framework, a <xref:System.String> object can include embedded null characters, which count as a part of the string's length."},{"content":"However, in some languages such as C and C++, a null character indicates the end of a string;it is not considered a part of the string and is not counted as part of the string's length.","pos":[137,322]},{"content":"This means that the following common assumptions that C and C++ programmers or libraries written in C or C++ might make about strings are not necessarily valid when applied to <ph id=\"ph1\">&lt;xref:System.String&gt;</ph> objects:","pos":[323,528],"source":" This means that the following common assumptions that C and C++ programmers or libraries written in C or C++ might make about strings are not necessarily valid when applied to <xref:System.String> objects:"}]}]},{"pos":[14383,14523],"content":"The value returned by the <ph id=\"ph1\">`strlen`</ph> or <ph id=\"ph2\">`wcslen`</ph> functions does not necessarily equal <ph id=\"ph3\">&lt;xref:System.String.Length%2A?displayProperty=fullName&gt;</ph>.","source":"The value returned by the `strlen` or `wcslen` functions does not necessarily equal <xref:System.String.Length%2A?displayProperty=fullName>."},{"pos":[14533,14713],"content":"The string created by the <ph id=\"ph1\">`strcpy_s`</ph> or <ph id=\"ph2\">`wcscpy_s`</ph> functions is not necessarily identical to the string created by the <ph id=\"ph3\">&lt;xref:System.String.Copy%2A?displayProperty=fullName&gt;</ph> method.","source":"The string created by the `strcpy_s` or `wcscpy_s` functions is not necessarily identical to the string created by the <xref:System.String.Copy%2A?displayProperty=fullName> method."},{"pos":[14720,14965],"content":"You should ensure that native C and C++ code that instantiates <xref:System.String> objects, and code that is passed <xref:System.String> objects through platform invoke, do not assume that an embedded null character marks the end of the string.","nodes":[{"content":"You should ensure that native C and C++ code that instantiates <ph id=\"ph1\">&lt;xref:System.String&gt;</ph> objects, and code that is passed <ph id=\"ph2\">&lt;xref:System.String&gt;</ph> objects through platform invoke, do not assume that an embedded null character marks the end of the string.","pos":[0,245],"source":"You should ensure that native C and C++ code that instantiates <xref:System.String> objects, and code that is passed <xref:System.String> objects through platform invoke, do not assume that an embedded null character marks the end of the string."}]},{"pos":[14972,15548],"content":"Embedded null characters in a string are also treated differently when a string is sorted (or compared) and when a string is searched. Null characters are ignored when performing culture-sensitive comparisons between two strings, including comparisons using the invariant culture. They are considered only for ordinal or case-insensitive ordinal comparisons. On the other hand, embedded null characters are always considered when searching a string with methods such as <xref:System.String.Contains%2A>, <xref:System.String.StartsWith%2A>, and <xref:System.String.IndexOf%2A>.","nodes":[{"content":"Embedded null characters in a string are also treated differently when a string is sorted (or compared) and when a string is searched. Null characters are ignored when performing culture-sensitive comparisons between two strings, including comparisons using the invariant culture. They are considered only for ordinal or case-insensitive ordinal comparisons. On the other hand, embedded null characters are always considered when searching a string with methods such as <xref:System.String.Contains%2A>, <xref:System.String.StartsWith%2A>, and <xref:System.String.IndexOf%2A>.","pos":[0,576],"nodes":[{"content":"Embedded null characters in a string are also treated differently when a string is sorted (or compared) and when a string is searched.","pos":[0,134]},{"content":"Null characters are ignored when performing culture-sensitive comparisons between two strings, including comparisons using the invariant culture.","pos":[135,280]},{"content":"They are considered only for ordinal or case-insensitive ordinal comparisons.","pos":[281,358]},{"content":"On the other hand, embedded null characters are always considered when searching a string with methods such as <ph id=\"ph1\">&lt;xref:System.String.Contains%2A&gt;</ph>, <ph id=\"ph2\">&lt;xref:System.String.StartsWith%2A&gt;</ph>, and <ph id=\"ph3\">&lt;xref:System.String.IndexOf%2A&gt;</ph>.","pos":[359,576],"source":" On the other hand, embedded null characters are always considered when searching a string with methods such as <xref:System.String.Contains%2A>, <xref:System.String.StartsWith%2A>, and <xref:System.String.IndexOf%2A>."}]}]},{"pos":[15583,15602],"content":"Strings and indexes","linkify":"Strings and indexes","nodes":[{"content":"Strings and indexes","pos":[0,19]}]},{"pos":[15606,16018],"content":"An index is the position of a <xref:System.Char> object (not a Unicode character) in a <xref:System.String>. An index is a zero-based, nonnegative number that starts from the first position in the string, which is index position zero. A number of search methods, such as <xref:System.String.IndexOf%2A> and <xref:System.String.LastIndexOf%2A>, return the index of a character or substring in the string instance.","nodes":[{"content":"An index is the position of a <xref:System.Char> object (not a Unicode character) in a <xref:System.String>. An index is a zero-based, nonnegative number that starts from the first position in the string, which is index position zero. A number of search methods, such as <xref:System.String.IndexOf%2A> and <xref:System.String.LastIndexOf%2A>, return the index of a character or substring in the string instance.","pos":[0,412],"nodes":[{"content":"An index is the position of a <ph id=\"ph1\">&lt;xref:System.Char&gt;</ph> object (not a Unicode character) in a <ph id=\"ph2\">&lt;xref:System.String&gt;</ph>.","pos":[0,108],"source":"An index is the position of a <xref:System.Char> object (not a Unicode character) in a <xref:System.String>."},{"content":"An index is a zero-based, nonnegative number that starts from the first position in the string, which is index position zero.","pos":[109,234]},{"content":"A number of search methods, such as <ph id=\"ph1\">&lt;xref:System.String.IndexOf%2A&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.String.LastIndexOf%2A&gt;</ph>, return the index of a character or substring in the string instance.","pos":[235,412],"source":" A number of search methods, such as <xref:System.String.IndexOf%2A> and <xref:System.String.LastIndexOf%2A>, return the index of a character or substring in the string instance."}]}]},{"pos":[16025,16502],"content":"The <xref:System.String.Chars%2A> property lets you access individual <xref:System.Char> objects by their index position in the string. Because the <xref:System.String.Chars%2A> property is the default property (in Visual Basic) or the indexer (in C#), you can access the individual <xref:System.Char> objects in a string by using code such as the following. This code looks for white space or punctuation characters in a string to determine how many words the string contains.","nodes":[{"content":"The <xref:System.String.Chars%2A> property lets you access individual <xref:System.Char> objects by their index position in the string. Because the <xref:System.String.Chars%2A> property is the default property (in Visual Basic) or the indexer (in C#), you can access the individual <xref:System.Char> objects in a string by using code such as the following. This code looks for white space or punctuation characters in a string to determine how many words the string contains.","pos":[0,477],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.String.Chars%2A&gt;</ph> property lets you access individual <ph id=\"ph2\">&lt;xref:System.Char&gt;</ph> objects by their index position in the string.","pos":[0,135],"source":"The <xref:System.String.Chars%2A> property lets you access individual <xref:System.Char> objects by their index position in the string."},{"content":"Because the <ph id=\"ph1\">&lt;xref:System.String.Chars%2A&gt;</ph> property is the default property (in Visual Basic) or the indexer (in C#), you can access the individual <ph id=\"ph2\">&lt;xref:System.Char&gt;</ph> objects in a string by using code such as the following.","pos":[136,358],"source":" Because the <xref:System.String.Chars%2A> property is the default property (in Visual Basic) or the indexer (in C#), you can access the individual <xref:System.Char> objects in a string by using code such as the following."},{"content":"This code looks for white space or punctuation characters in a string to determine how many words the string contains.","pos":[359,477]}]}]},{"pos":[16509,16883],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>System.String.Class#4<ept id=\"p2\">](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Class/cpp/string.index1.cpp#4)</ept><ept id=\"p1\">]</ept> <bpt id=\"p3\">[!code-csharp</bpt><bpt id=\"p4\">[</bpt>System.String.Class#4<ept id=\"p4\">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Class/cs/index1.cs#4)</ept><ept id=\"p3\">]</ept> <bpt id=\"p5\">[!code-vb</bpt><bpt id=\"p6\">[</bpt>System.String.Class#4<ept id=\"p6\">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Class/vb/index1.vb#4)</ept><ept id=\"p5\">]</ept>","source":"[!code-cpp[System.String.Class#4](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Class/cpp/string.index1.cpp#4)]\n [!code-csharp[System.String.Class#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Class/cs/index1.cs#4)]\n [!code-vb[System.String.Class#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Class/vb/index1.vb#4)]"},{"pos":[16890,17128],"content":"Because the <ph id=\"ph1\">&lt;xref:System.String&gt;</ph> class implements the <ph id=\"ph2\">&lt;xref:System.Collections.IEnumerable&gt;</ph> interface, you can also iterate through the <ph id=\"ph3\">&lt;xref:System.Char&gt;</ph> objects in a string by using a <ph id=\"ph4\">`foreach`</ph> construct, as the following example shows.","source":"Because the <xref:System.String> class implements the <xref:System.Collections.IEnumerable> interface, you can also iterate through the <xref:System.Char> objects in a string by using a `foreach` construct, as the following example shows."},{"pos":[17135,17509],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>System.String.Class#5<ept id=\"p2\">](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Class/cpp/string.index2.cpp#5)</ept><ept id=\"p1\">]</ept> <bpt id=\"p3\">[!code-csharp</bpt><bpt id=\"p4\">[</bpt>System.String.Class#5<ept id=\"p4\">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Class/cs/index2.cs#5)</ept><ept id=\"p3\">]</ept> <bpt id=\"p5\">[!code-vb</bpt><bpt id=\"p6\">[</bpt>System.String.Class#5<ept id=\"p6\">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Class/vb/index2.vb#5)</ept><ept id=\"p5\">]</ept>","source":"[!code-cpp[System.String.Class#5](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Class/cpp/string.index2.cpp#5)]\n [!code-csharp[System.String.Class#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Class/cs/index2.cs#5)]\n [!code-vb[System.String.Class#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Class/vb/index2.vb#5)]"},{"pos":[17516,18382],"content":"Consecutive index values might not correspond to consecutive Unicode characters, because a Unicode character might be encoded as more than one <xref:System.Char> object. In particular, a string may contain multi-character units of text that are formed by a base character followed by one or more combining characters or by surrogate pairs. To work with Unicode characters instead of <xref:System.Char> objects, use the <xref:System.Globalization.StringInfo?displayProperty=fullName> and <xref:System.Globalization.TextElementEnumerator> classes. The following example illustrates the difference between code that works with <xref:System.Char> objects and code that works with Unicode characters. It compares the number of characters or text elements in each word of a sentence. The string includes two sequences of a base character followed by a combining character.","nodes":[{"content":"Consecutive index values might not correspond to consecutive Unicode characters, because a Unicode character might be encoded as more than one <xref:System.Char> object. In particular, a string may contain multi-character units of text that are formed by a base character followed by one or more combining characters or by surrogate pairs. To work with Unicode characters instead of <xref:System.Char> objects, use the <xref:System.Globalization.StringInfo?displayProperty=fullName> and <xref:System.Globalization.TextElementEnumerator> classes. The following example illustrates the difference between code that works with <xref:System.Char> objects and code that works with Unicode characters. It compares the number of characters or text elements in each word of a sentence. The string includes two sequences of a base character followed by a combining character.","pos":[0,866],"nodes":[{"content":"Consecutive index values might not correspond to consecutive Unicode characters, because a Unicode character might be encoded as more than one <ph id=\"ph1\">&lt;xref:System.Char&gt;</ph> object.","pos":[0,169],"source":"Consecutive index values might not correspond to consecutive Unicode characters, because a Unicode character might be encoded as more than one <xref:System.Char> object."},{"content":"In particular, a string may contain multi-character units of text that are formed by a base character followed by one or more combining characters or by surrogate pairs.","pos":[170,339]},{"content":"To work with Unicode characters instead of <ph id=\"ph1\">&lt;xref:System.Char&gt;</ph> objects, use the <ph id=\"ph2\">&lt;xref:System.Globalization.StringInfo?displayProperty=fullName&gt;</ph> and <ph id=\"ph3\">&lt;xref:System.Globalization.TextElementEnumerator&gt;</ph> classes.","pos":[340,545],"source":" To work with Unicode characters instead of <xref:System.Char> objects, use the <xref:System.Globalization.StringInfo?displayProperty=fullName> and <xref:System.Globalization.TextElementEnumerator> classes."},{"content":"The following example illustrates the difference between code that works with <ph id=\"ph1\">&lt;xref:System.Char&gt;</ph> objects and code that works with Unicode characters.","pos":[546,695],"source":" The following example illustrates the difference between code that works with <xref:System.Char> objects and code that works with Unicode characters."},{"content":"It compares the number of characters or text elements in each word of a sentence.","pos":[696,777]},{"content":"The string includes two sequences of a base character followed by a combining character.","pos":[778,866]}]}]},{"pos":[18389,18763],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>System.String.Class#6<ept id=\"p2\">](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Class/cpp/string.index3.cpp#6)</ept><ept id=\"p1\">]</ept> <bpt id=\"p3\">[!code-csharp</bpt><bpt id=\"p4\">[</bpt>System.String.Class#6<ept id=\"p4\">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Class/cs/index3.cs#6)</ept><ept id=\"p3\">]</ept> <bpt id=\"p5\">[!code-vb</bpt><bpt id=\"p6\">[</bpt>System.String.Class#6<ept id=\"p6\">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Class/vb/index3.vb#6)</ept><ept id=\"p5\">]</ept>","source":"[!code-cpp[System.String.Class#6](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Class/cpp/string.index3.cpp#6)]\n [!code-csharp[System.String.Class#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Class/cs/index3.cs#6)]\n [!code-vb[System.String.Class#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Class/vb/index3.vb#6)]"},{"pos":[18770,19231],"content":"This example works with text elements by using the <xref:System.Globalization.StringInfo.GetTextElementEnumerator%2A?displayProperty=fullName> method and the <xref:System.Globalization.TextElementEnumerator> class to enumerate all the text elements in a string. You can also retrieve an array that contains the starting index of each text element by calling the <xref:System.Globalization.StringInfo.ParseCombiningCharacters%2A?displayProperty=fullName> method.","nodes":[{"content":"This example works with text elements by using the <xref:System.Globalization.StringInfo.GetTextElementEnumerator%2A?displayProperty=fullName> method and the <xref:System.Globalization.TextElementEnumerator> class to enumerate all the text elements in a string. You can also retrieve an array that contains the starting index of each text element by calling the <xref:System.Globalization.StringInfo.ParseCombiningCharacters%2A?displayProperty=fullName> method.","pos":[0,461],"nodes":[{"content":"This example works with text elements by using the <ph id=\"ph1\">&lt;xref:System.Globalization.StringInfo.GetTextElementEnumerator%2A?displayProperty=fullName&gt;</ph> method and the <ph id=\"ph2\">&lt;xref:System.Globalization.TextElementEnumerator&gt;</ph> class to enumerate all the text elements in a string.","pos":[0,261],"source":"This example works with text elements by using the <xref:System.Globalization.StringInfo.GetTextElementEnumerator%2A?displayProperty=fullName> method and the <xref:System.Globalization.TextElementEnumerator> class to enumerate all the text elements in a string."},{"content":"You can also retrieve an array that contains the starting index of each text element by calling the <ph id=\"ph1\">&lt;xref:System.Globalization.StringInfo.ParseCombiningCharacters%2A?displayProperty=fullName&gt;</ph> method.","pos":[262,461],"source":" You can also retrieve an array that contains the starting index of each text element by calling the <xref:System.Globalization.StringInfo.ParseCombiningCharacters%2A?displayProperty=fullName> method."}]}]},{"pos":[19238,19395],"content":"For more information about working with units of text rather than individual <xref:System.Char> values, see the <xref:System.Globalization.StringInfo> class.","nodes":[{"content":"For more information about working with units of text rather than individual <ph id=\"ph1\">&lt;xref:System.Char&gt;</ph> values, see the <ph id=\"ph2\">&lt;xref:System.Globalization.StringInfo&gt;</ph> class.","pos":[0,157],"source":"For more information about working with units of text rather than individual <xref:System.Char> values, see the <xref:System.Globalization.StringInfo> class."}]},{"pos":[19428,19458],"content":"Null strings and empty strings","linkify":"Null strings and empty strings","nodes":[{"content":"Null strings and empty strings","pos":[0,30]}]},{"pos":[19462,20375],"content":"A string that has been declared but has not been assigned a value is `null`. Attempting to call methods on that string throws a <xref:System.NullReferenceException>. A null string is different from an empty string, which is a string whose value is \"\" or <xref:System.String.Empty?displayProperty=fullName>. In some cases, passing either a null string or an empty string as an argument in a method call throws an exception. For example, passing a null string to the <xref:System.Int32.Parse%2A?displayProperty=fullName> method throws an <xref:System.ArgumentNullException>, and passing an empty string throws a <xref:System.FormatException>. In other cases, a method argument can be either a null string or an empty string. For example, if you are providing an <xref:System.IFormattable> implementation for a class, you want to equate both a null string and an empty string with the general (\"G\") format specifier.","nodes":[{"content":"A string that has been declared but has not been assigned a value is <ph id=\"ph1\">`null`</ph>.","pos":[0,76],"source":"A string that has been declared but has not been assigned a value is `null`."},{"content":"Attempting to call methods on that string throws a <ph id=\"ph1\">&lt;xref:System.NullReferenceException&gt;</ph>.","pos":[77,165],"source":" Attempting to call methods on that string throws a <xref:System.NullReferenceException>."},{"content":"A null string is different from an empty string, which is a string whose value is \"\" or <ph id=\"ph1\">&lt;xref:System.String.Empty?displayProperty=fullName&gt;</ph>.","pos":[166,306],"source":" A null string is different from an empty string, which is a string whose value is \"\" or <xref:System.String.Empty?displayProperty=fullName>."},{"content":"In some cases, passing either a null string or an empty string as an argument in a method call throws an exception.","pos":[307,422]},{"content":"For example, passing a null string to the <ph id=\"ph1\">&lt;xref:System.Int32.Parse%2A?displayProperty=fullName&gt;</ph> method throws an <ph id=\"ph2\">&lt;xref:System.ArgumentNullException&gt;</ph>, and passing an empty string throws a <ph id=\"ph3\">&lt;xref:System.FormatException&gt;</ph>.","pos":[423,640],"source":" For example, passing a null string to the <xref:System.Int32.Parse%2A?displayProperty=fullName> method throws an <xref:System.ArgumentNullException>, and passing an empty string throws a <xref:System.FormatException>."},{"content":"In other cases, a method argument can be either a null string or an empty string.","pos":[641,722]},{"content":"For example, if you are providing an <ph id=\"ph1\">&lt;xref:System.IFormattable&gt;</ph> implementation for a class, you want to equate both a null string and an empty string with the general (\"G\") format specifier.","pos":[723,913],"source":" For example, if you are providing an <xref:System.IFormattable> implementation for a class, you want to equate both a null string and an empty string with the general (\"G\") format specifier."}]},{"pos":[20382,20520],"content":"The <ph id=\"ph1\">&lt;xref:System.String&gt;</ph> class includes the following two convenience methods that enable you to test whether a string is <ph id=\"ph2\">`null`</ph> or empty:","source":"The <xref:System.String> class includes the following two convenience methods that enable you to test whether a string is `null` or empty:"},{"pos":[20530,20754],"content":"<xref:System.String.IsNullOrEmpty%2A>, which indicates whether a string is either `null` or is equal to  <xref:System.String.Empty?displayProperty=fullName>. This method eliminates the need to use code such as the following:","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.String.IsNullOrEmpty%2A&gt;</ph>, which indicates whether a string is either <ph id=\"ph2\">`null`</ph> or is equal to  <ph id=\"ph3\">&lt;xref:System.String.Empty?displayProperty=fullName&gt;</ph>.","pos":[0,157],"source":"<xref:System.String.IsNullOrEmpty%2A>, which indicates whether a string is either `null` or is equal to  <xref:System.String.Empty?displayProperty=fullName>."},{"content":"This method eliminates the need to use code such as the following:","pos":[158,224]}]},{"pos":[20765,21187],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>System.String.Class.Null#1<ept id=\"p2\">](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.string.class.null/cpp/string.null.cpp#1)</ept><ept id=\"p1\">]</ept>  <bpt id=\"p3\">[!code-csharp</bpt><bpt id=\"p4\">[</bpt>System.String.Class.Null#1<ept id=\"p4\">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.class.null/cs/nullorempty1.cs#1)</ept><ept id=\"p3\">]</ept>  <bpt id=\"p5\">[!code-vb</bpt><bpt id=\"p6\">[</bpt>System.String.Class.Null#1<ept id=\"p6\">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.string.class.null/vb/nullorempty1.vb#1)</ept><ept id=\"p5\">]</ept>","leadings":["","    ","    "],"source":"[!code-cpp[System.String.Class.Null#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.string.class.null/cpp/string.null.cpp#1)]\n [!code-csharp[System.String.Class.Null#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.class.null/cs/nullorempty1.cs#1)]\n [!code-vb[System.String.Class.Null#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.string.class.null/vb/nullorempty1.vb#1)]"},{"pos":[21197,21462],"content":"<xref:System.String.IsNullOrWhiteSpace%2A>, which indicates whether a string is `null`, equals <xref:System.String.Empty?displayProperty=fullName>, or consists exclusively of white-space characters. This method eliminates the need to use code such as the following:","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.String.IsNullOrWhiteSpace%2A&gt;</ph>, which indicates whether a string is <ph id=\"ph2\">`null`</ph>, equals <ph id=\"ph3\">&lt;xref:System.String.Empty?displayProperty=fullName&gt;</ph>, or consists exclusively of white-space characters.","pos":[0,198],"source":"<xref:System.String.IsNullOrWhiteSpace%2A>, which indicates whether a string is `null`, equals <xref:System.String.Empty?displayProperty=fullName>, or consists exclusively of white-space characters."},{"content":"This method eliminates the need to use code such as the following:","pos":[199,265]}]},{"pos":[21473,21895],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>System.String.Class.Null#2<ept id=\"p2\">](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.string.class.null/cpp/string.null.cpp#2)</ept><ept id=\"p1\">]</ept>  <bpt id=\"p3\">[!code-csharp</bpt><bpt id=\"p4\">[</bpt>System.String.Class.Null#2<ept id=\"p4\">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.class.null/cs/nullorempty1.cs#2)</ept><ept id=\"p3\">]</ept>  <bpt id=\"p5\">[!code-vb</bpt><bpt id=\"p6\">[</bpt>System.String.Class.Null#2<ept id=\"p6\">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.string.class.null/vb/nullorempty1.vb#2)</ept><ept id=\"p5\">]</ept>","leadings":["","    ","    "],"source":"[!code-cpp[System.String.Class.Null#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.string.class.null/cpp/string.null.cpp#2)]\n [!code-csharp[System.String.Class.Null#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.class.null/cs/nullorempty1.cs#2)]\n [!code-vb[System.String.Class.Null#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.string.class.null/vb/nullorempty1.vb#2)]"},{"pos":[21902,22298],"content":"The following example uses the <xref:System.String.IsNullOrEmpty%2A> method in the <xref:System.IFormattable.ToString%2A?displayProperty=fullName> implementation of a custom `Temperature` class. The method supports the \"G\", \"C\", \"F\", and \"K\" format strings. If an empty format string or a format string whose value is `null` is passed to the method, its value is changed to the \"G\" format string.","nodes":[{"content":"The following example uses the <ph id=\"ph1\">&lt;xref:System.String.IsNullOrEmpty%2A&gt;</ph> method in the <ph id=\"ph2\">&lt;xref:System.IFormattable.ToString%2A?displayProperty=fullName&gt;</ph> implementation of a custom <ph id=\"ph3\">`Temperature`</ph> class.","pos":[0,194],"source":"The following example uses the <xref:System.String.IsNullOrEmpty%2A> method in the <xref:System.IFormattable.ToString%2A?displayProperty=fullName> implementation of a custom `Temperature` class."},{"content":"The method supports the \"G\", \"C\", \"F\", and \"K\" format strings.","pos":[195,257]},{"content":"If an empty format string or a format string whose value is <ph id=\"ph1\">`null`</ph> is passed to the method, its value is changed to the \"G\" format string.","pos":[258,396],"source":" If an empty format string or a format string whose value is `null` is passed to the method, its value is changed to the \"G\" format string."}]},{"pos":[22305,22719],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>System.String.Class.Null#3<ept id=\"p2\">](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.string.class.null/cpp/string.null.cpp#3)</ept><ept id=\"p1\">]</ept> <bpt id=\"p3\">[!code-csharp</bpt><bpt id=\"p4\">[</bpt>System.String.Class.Null#3<ept id=\"p4\">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.class.null/cs/nullorempty1.cs#3)</ept><ept id=\"p3\">]</ept> <bpt id=\"p5\">[!code-vb</bpt><bpt id=\"p6\">[</bpt>System.String.Class.Null#3<ept id=\"p6\">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.string.class.null/vb/nullorempty1.vb#3)</ept><ept id=\"p5\">]</ept>","leadings":[""," "," "],"source":"[!code-cpp[System.String.Class.Null#3](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.string.class.null/cpp/string.null.cpp#3)]\n[!code-csharp[System.String.Class.Null#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.class.null/cs/nullorempty1.cs#3)]\n[!code-vb[System.String.Class.Null#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.string.class.null/vb/nullorempty1.vb#3)]"},{"pos":[22759,22799],"content":"Immutability and the StringBuilder class","linkify":"Immutability and the StringBuilder class","nodes":[{"content":"Immutability and the StringBuilder class","pos":[0,40]}]},{"pos":[22803,23071],"content":"A <xref:System.String> object is called immutable (read-only), because its value cannot be modified after it has been created. Methods that appear to modify a <xref:System.String> object actually return a new <xref:System.String> object that contains the modification.","nodes":[{"content":"A <xref:System.String> object is called immutable (read-only), because its value cannot be modified after it has been created. Methods that appear to modify a <xref:System.String> object actually return a new <xref:System.String> object that contains the modification.","pos":[0,268],"nodes":[{"content":"A <ph id=\"ph1\">&lt;xref:System.String&gt;</ph> object is called immutable (read-only), because its value cannot be modified after it has been created.","pos":[0,126],"source":"A <xref:System.String> object is called immutable (read-only), because its value cannot be modified after it has been created."},{"content":"Methods that appear to modify a <ph id=\"ph1\">&lt;xref:System.String&gt;</ph> object actually return a new <ph id=\"ph2\">&lt;xref:System.String&gt;</ph> object that contains the modification.","pos":[127,268],"source":" Methods that appear to modify a <xref:System.String> object actually return a new <xref:System.String> object that contains the modification."}]}]},{"pos":[23078,23603],"content":"Because strings are immutable, string manipulation routines that perform repeated additions or deletions to what appears to be a single string can exact a significant performance penalty. For example, the following code uses a random number generator to create a string with 1000 characters in the range 0x0001 to 0x052F. Although the code appears to use string concatenation to append a new character to the existing string named `str`, it actually creates a new <xref:System.String> object for each concatenation operation.","nodes":[{"content":"Because strings are immutable, string manipulation routines that perform repeated additions or deletions to what appears to be a single string can exact a significant performance penalty.","pos":[0,187]},{"content":"For example, the following code uses a random number generator to create a string with 1000 characters in the range 0x0001 to 0x052F.","pos":[188,321]},{"content":"Although the code appears to use string concatenation to append a new character to the existing string named <ph id=\"ph1\">`str`</ph>, it actually creates a new <ph id=\"ph2\">&lt;xref:System.String&gt;</ph> object for each concatenation operation.","pos":[322,525],"source":" Although the code appears to use string concatenation to append a new character to the existing string named `str`, it actually creates a new <xref:System.String> object for each concatenation operation."}]},{"pos":[23610,24004],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>System.String.Class#15<ept id=\"p2\">](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Class/cpp/string.stringbuilder1.cpp#15)</ept><ept id=\"p1\">]</ept> <bpt id=\"p3\">[!code-csharp</bpt><bpt id=\"p4\">[</bpt>System.String.Class#15<ept id=\"p4\">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Class/cs/immutable.cs#15)</ept><ept id=\"p3\">]</ept> <bpt id=\"p5\">[!code-vb</bpt><bpt id=\"p6\">[</bpt>System.String.Class#15<ept id=\"p6\">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Class/vb/immutable.vb#15)</ept><ept id=\"p5\">]</ept>","source":"[!code-cpp[System.String.Class#15](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Class/cpp/string.stringbuilder1.cpp#15)]\n [!code-csharp[System.String.Class#15](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Class/cs/immutable.cs#15)]\n [!code-vb[System.String.Class#15](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Class/vb/immutable.vb#15)]"},{"pos":[24011,24811],"content":"You can use the <xref:System.Text.StringBuilder> class instead of the <xref:System.String> class for operations that make multiple changes to the value of a string. Unlike instances of the <xref:System.String> class, <xref:System.Text.StringBuilder> objects are mutable; when you concatenate, append, or delete substrings from a string, the operations are performed on a single string. When you have finished modifying the value of a <xref:System.Text.StringBuilder> object, you can call its <xref:System.Text.StringBuilder.ToString%2A?displayProperty=fullName> method to convert it to a string. The following example replaces the <xref:System.String> used in the previous example to concatenate 1000 random characters in the range to  0x0001 to 0x052F with a <xref:System.Text.StringBuilder> object.","nodes":[{"content":"You can use the <xref:System.Text.StringBuilder> class instead of the <xref:System.String> class for operations that make multiple changes to the value of a string. Unlike instances of the <xref:System.String> class, <xref:System.Text.StringBuilder> objects are mutable; when you concatenate, append, or delete substrings from a string, the operations are performed on a single string. When you have finished modifying the value of a <xref:System.Text.StringBuilder> object, you can call its <xref:System.Text.StringBuilder.ToString%2A?displayProperty=fullName> method to convert it to a string. The following example replaces the <xref:System.String> used in the previous example to concatenate 1000 random characters in the range to  0x0001 to 0x052F with a <xref:System.Text.StringBuilder> object.","pos":[0,800],"nodes":[{"content":"You can use the <ph id=\"ph1\">&lt;xref:System.Text.StringBuilder&gt;</ph> class instead of the <ph id=\"ph2\">&lt;xref:System.String&gt;</ph> class for operations that make multiple changes to the value of a string.","pos":[0,164],"source":"You can use the <xref:System.Text.StringBuilder> class instead of the <xref:System.String> class for operations that make multiple changes to the value of a string."},{"content":"Unlike instances of the <ph id=\"ph1\">&lt;xref:System.String&gt;</ph> class, <ph id=\"ph2\">&lt;xref:System.Text.StringBuilder&gt;</ph> objects are mutable; when you concatenate, append, or delete substrings from a string, the operations are performed on a single string.","pos":[165,385],"source":" Unlike instances of the <xref:System.String> class, <xref:System.Text.StringBuilder> objects are mutable; when you concatenate, append, or delete substrings from a string, the operations are performed on a single string."},{"content":"When you have finished modifying the value of a <ph id=\"ph1\">&lt;xref:System.Text.StringBuilder&gt;</ph> object, you can call its <ph id=\"ph2\">&lt;xref:System.Text.StringBuilder.ToString%2A?displayProperty=fullName&gt;</ph> method to convert it to a string.","pos":[386,595],"source":" When you have finished modifying the value of a <xref:System.Text.StringBuilder> object, you can call its <xref:System.Text.StringBuilder.ToString%2A?displayProperty=fullName> method to convert it to a string."},{"content":"The following example replaces the <ph id=\"ph1\">&lt;xref:System.String&gt;</ph> used in the previous example to concatenate 1000 random characters in the range to  0x0001 to 0x052F with a <ph id=\"ph2\">&lt;xref:System.Text.StringBuilder&gt;</ph> object.","pos":[596,800],"source":" The following example replaces the <xref:System.String> used in the previous example to concatenate 1000 random characters in the range to  0x0001 to 0x052F with a <xref:System.Text.StringBuilder> object."}]}]},{"pos":[24818,25214],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>System.String.Class#16<ept id=\"p2\">](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Class/cpp/string.stringbuilder2.cpp#16)</ept><ept id=\"p1\">]</ept> <bpt id=\"p3\">[!code-csharp</bpt><bpt id=\"p4\">[</bpt>System.String.Class#16<ept id=\"p4\">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Class/cs/immutable1.cs#16)</ept><ept id=\"p3\">]</ept> <bpt id=\"p5\">[!code-vb</bpt><bpt id=\"p6\">[</bpt>System.String.Class#16<ept id=\"p6\">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Class/vb/immutable1.vb#16)</ept><ept id=\"p5\">]</ept>","source":"[!code-cpp[System.String.Class#16](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Class/cpp/string.stringbuilder2.cpp#16)]\n [!code-csharp[System.String.Class#16](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Class/cs/immutable1.cs#16)]\n [!code-vb[System.String.Class#16](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Class/vb/immutable1.vb#16)]"},{"pos":[25258,25298],"content":"Ordinal vs. culture-sensitive operations","linkify":"Ordinal vs. culture-sensitive operations","nodes":[{"content":"Ordinal vs. culture-sensitive operations","pos":[0,40]}]},{"pos":[25302,25924],"content":"Members of the <xref:System.String> class perform either ordinal or culture-sensitive (linguistic) operations on a <xref:System.String> object. An ordinal operation acts on the numeric value of each <xref:System.Char> object. A culture-sensitive operation acts on the value of the <xref:System.String>object, and takes culture-specific casing, sorting, formatting, and parsing rules into account. Culture-sensitive operations execute in the context of an explicitly declared culture or the implicit current culture. The two kinds of operations can produce very different results when they are performed on the same string.","nodes":[{"content":"Members of the <xref:System.String> class perform either ordinal or culture-sensitive (linguistic) operations on a <xref:System.String> object. An ordinal operation acts on the numeric value of each <xref:System.Char> object. A culture-sensitive operation acts on the value of the <xref:System.String>object, and takes culture-specific casing, sorting, formatting, and parsing rules into account. Culture-sensitive operations execute in the context of an explicitly declared culture or the implicit current culture. The two kinds of operations can produce very different results when they are performed on the same string.","pos":[0,622],"nodes":[{"content":"Members of the <ph id=\"ph1\">&lt;xref:System.String&gt;</ph> class perform either ordinal or culture-sensitive (linguistic) operations on a <ph id=\"ph2\">&lt;xref:System.String&gt;</ph> object.","pos":[0,143],"source":"Members of the <xref:System.String> class perform either ordinal or culture-sensitive (linguistic) operations on a <xref:System.String> object."},{"content":"An ordinal operation acts on the numeric value of each <ph id=\"ph1\">&lt;xref:System.Char&gt;</ph> object.","pos":[144,225],"source":" An ordinal operation acts on the numeric value of each <xref:System.Char> object."},{"content":"A culture-sensitive operation acts on the value of the <ph id=\"ph1\">&lt;xref:System.String&gt;</ph>object, and takes culture-specific casing, sorting, formatting, and parsing rules into account.","pos":[226,396],"source":" A culture-sensitive operation acts on the value of the <xref:System.String>object, and takes culture-specific casing, sorting, formatting, and parsing rules into account."},{"content":"Culture-sensitive operations execute in the context of an explicitly declared culture or the implicit current culture.","pos":[397,515]},{"content":"The two kinds of operations can produce very different results when they are performed on the same string.","pos":[516,622]}]}]},{"pos":[25931,26611],"content":"The .NET Framework also supports culture-insensitive linguistic string operations by using the invariant culture (<xref:System.Globalization.CultureInfo.InvariantCulture%2A?displayProperty=fullName>), which is loosely based on the culture settings of the English language independent of region. Unlike other <xref:System.Globalization.CultureInfo?displayProperty=fullName> settings, the settings of the invariant culture are guaranteed to remain consistent on a single computer, from system to system, and across versions of the .NET Framework. The invariant culture can be seen as a kind of black box that ensures stability of string comparisons and ordering across all cultures.","nodes":[{"content":"The .NET Framework also supports culture-insensitive linguistic string operations by using the invariant culture (<xref:System.Globalization.CultureInfo.InvariantCulture%2A?displayProperty=fullName>), which is loosely based on the culture settings of the English language independent of region. Unlike other <xref:System.Globalization.CultureInfo?displayProperty=fullName> settings, the settings of the invariant culture are guaranteed to remain consistent on a single computer, from system to system, and across versions of the .NET Framework. The invariant culture can be seen as a kind of black box that ensures stability of string comparisons and ordering across all cultures.","pos":[0,680],"nodes":[{"content":"The .NET Framework also supports culture-insensitive linguistic string operations by using the invariant culture (<ph id=\"ph1\">&lt;xref:System.Globalization.CultureInfo.InvariantCulture%2A?displayProperty=fullName&gt;</ph>), which is loosely based on the culture settings of the English language independent of region.","pos":[0,294],"source":"The .NET Framework also supports culture-insensitive linguistic string operations by using the invariant culture (<xref:System.Globalization.CultureInfo.InvariantCulture%2A?displayProperty=fullName>), which is loosely based on the culture settings of the English language independent of region."},{"content":"Unlike other <ph id=\"ph1\">&lt;xref:System.Globalization.CultureInfo?displayProperty=fullName&gt;</ph> settings, the settings of the invariant culture are guaranteed to remain consistent on a single computer, from system to system, and across versions of the .NET Framework.","pos":[295,544],"source":" Unlike other <xref:System.Globalization.CultureInfo?displayProperty=fullName> settings, the settings of the invariant culture are guaranteed to remain consistent on a single computer, from system to system, and across versions of the .NET Framework."},{"content":"The invariant culture can be seen as a kind of black box that ensures stability of string comparisons and ordering across all cultures.","pos":[545,680]}]}]},{"pos":[26619,27105],"content":"[!IMPORTANT]\n If your application makes a security decision about a symbolic identifier such as a file name or named pipe, or about persisted data such as the text-based data in an XML file, the operation should use an ordinal comparison instead of a culture-sensitive comparison. This is because a culture-sensitive comparison can yield different results depending on the culture in effect, whereas an ordinal comparison depends solely on the binary value of the compared characters.","leadings":["","> "],"nodes":[{"content":" If your application makes a security decision about a symbolic identifier such as a file name or named pipe, or about persisted data such as the text-based data in an XML file, the operation should use an ordinal comparison instead of a culture-sensitive comparison. This is because a culture-sensitive comparison can yield different results depending on the culture in effect, whereas an ordinal comparison depends solely on the binary value of the compared characters.","pos":[13,484],"nodes":[{"content":"If your application makes a security decision about a symbolic identifier such as a file name or named pipe, or about persisted data such as the text-based data in an XML file, the operation should use an ordinal comparison instead of a culture-sensitive comparison.","pos":[1,267]},{"content":"This is because a culture-sensitive comparison can yield different results depending on the culture in effect, whereas an ordinal comparison depends solely on the binary value of the compared characters.","pos":[268,471]}]}]},{"pos":[27113,27630],"content":"[!IMPORTANT]\n Most methods that perform string operations include an overload that has a parameter of type <xref:System.StringComparison>, which enables you to specify whether the method performs an ordinal or culture-sensitive operation. In general, you should call this overload to make the intent of your method call clear. For best practices and guidance for using ordinal and culture-sensitive operations on strings, see [Best Practices for Using Strings](~/docs/standard/base-types/best-practices-strings.md).","leadings":["","> "],"nodes":[{"content":" Most methods that perform string operations include an overload that has a parameter of type <xref:System.StringComparison>, which enables you to specify whether the method performs an ordinal or culture-sensitive operation. In general, you should call this overload to make the intent of your method call clear. For best practices and guidance for using ordinal and culture-sensitive operations on strings, see [Best Practices for Using Strings](~/docs/standard/base-types/best-practices-strings.md).","pos":[13,515],"nodes":[{"content":"Most methods that perform string operations include an overload that has a parameter of type <ph id=\"ph1\">&lt;xref:System.StringComparison&gt;</ph>, which enables you to specify whether the method performs an ordinal or culture-sensitive operation.","pos":[1,225],"source":" Most methods that perform string operations include an overload that has a parameter of type <xref:System.StringComparison>, which enables you to specify whether the method performs an ordinal or culture-sensitive operation."},{"content":"In general, you should call this overload to make the intent of your method call clear.","pos":[226,313]},{"content":"For best practices and guidance for using ordinal and culture-sensitive operations on strings, see <bpt id=\"p1\">[</bpt>Best Practices for Using Strings<ept id=\"p1\">](~/docs/standard/base-types/best-practices-strings.md)</ept>.","pos":[314,502],"source":" For best practices and guidance for using ordinal and culture-sensitive operations on strings, see [Best Practices for Using Strings](~/docs/standard/base-types/best-practices-strings.md)."}]}]},{"pos":[27637,27886],"content":"Operations for [casing](#casing), [parsing and formatting](#parsing), [comparison and sorting](#comparison), and [testing for equality](#equality) can be either ordinal or culture-sensitive. The following sections discuss each category of operation.","nodes":[{"content":"Operations for <bpt id=\"p1\">[</bpt>casing<ept id=\"p1\">](#casing)</ept>, <bpt id=\"p2\">[</bpt>parsing and formatting<ept id=\"p2\">](#parsing)</ept>, <bpt id=\"p3\">[</bpt>comparison and sorting<ept id=\"p3\">](#comparison)</ept>, and <bpt id=\"p4\">[</bpt>testing for equality<ept id=\"p4\">](#equality)</ept> can be either ordinal or culture-sensitive.","pos":[0,190],"source":"Operations for [casing](#casing), [parsing and formatting](#parsing), [comparison and sorting](#comparison), and [testing for equality](#equality) can be either ordinal or culture-sensitive."},{"content":"The following sections discuss each category of operation.","pos":[191,249]}]},{"pos":[27894,28546],"content":"[!TIP]\n You should always call a method overload that makes the intent of your method call clear. For example, instead of calling the <xref:System.String.Compare%28System.String%2CSystem.String%29> method to perform a culture-sensitive comparison of two strings by using the conventions of the current culture, you should call the <xref:System.String.Compare%28System.String%2CSystem.String%2CSystem.StringComparison%29> method with a value of <xref:System.StringComparison?displayProperty=fullName> for the `comparisonType` argument. For more information, see [Best Practices for Using Strings](~/docs/standard/base-types/best-practices-strings.md).","leadings":["","> "],"nodes":[{"content":" You should always call a method overload that makes the intent of your method call clear. For example, instead of calling the <xref:System.String.Compare%28System.String%2CSystem.String%29> method to perform a culture-sensitive comparison of two strings by using the conventions of the current culture, you should call the <xref:System.String.Compare%28System.String%2CSystem.String%2CSystem.StringComparison%29> method with a value of <xref:System.StringComparison?displayProperty=fullName> for the `comparisonType` argument. For more information, see [Best Practices for Using Strings](~/docs/standard/base-types/best-practices-strings.md).","pos":[7,650],"nodes":[{"content":"You should always call a method overload that makes the intent of your method call clear.","pos":[1,90]},{"content":"For example, instead of calling the <ph id=\"ph1\">&lt;xref:System.String.Compare%28System.String%2CSystem.String%29&gt;</ph> method to perform a culture-sensitive comparison of two strings by using the conventions of the current culture, you should call the <ph id=\"ph2\">&lt;xref:System.String.Compare%28System.String%2CSystem.String%2CSystem.StringComparison%29&gt;</ph> method with a value of <ph id=\"ph3\">&lt;xref:System.StringComparison?displayProperty=fullName&gt;</ph> for the <ph id=\"ph4\">`comparisonType`</ph> argument.","pos":[91,527],"source":" For example, instead of calling the <xref:System.String.Compare%28System.String%2CSystem.String%29> method to perform a culture-sensitive comparison of two strings by using the conventions of the current culture, you should call the <xref:System.String.Compare%28System.String%2CSystem.String%2CSystem.StringComparison%29> method with a value of <xref:System.StringComparison?displayProperty=fullName> for the `comparisonType` argument."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Best Practices for Using Strings<ept id=\"p1\">](~/docs/standard/base-types/best-practices-strings.md)</ept>.","pos":[528,643],"source":" For more information, see [Best Practices for Using Strings](~/docs/standard/base-types/best-practices-strings.md)."}]}]},{"pos":[28581,28587],"content":"Casing","linkify":"Casing","nodes":[{"content":"Casing","pos":[0,6]}]},{"pos":[28591,29331],"content":"Casing rules determine how to change the capitalization of a Unicode character; for example, from lowercase to uppercase. Often, a casing operation is performed before a string comparison. For example, a string might be converted to uppercase so that it can be compared with another uppercase string. You can convert the characters in a string to lowercase by calling the <xref:System.String.ToLower%2A> or <xref:System.String.ToLowerInvariant%2A> method, and you can convert them to uppercase by calling the <xref:System.String.ToUpper%2A> or <xref:System.String.ToUpperInvariant%2A> method. In addition, you can use the <xref:System.Globalization.TextInfo.ToTitleCase%2A?displayProperty=fullName> method to convert a string to title case.","nodes":[{"content":"Casing rules determine how to change the capitalization of a Unicode character; for example, from lowercase to uppercase. Often, a casing operation is performed before a string comparison. For example, a string might be converted to uppercase so that it can be compared with another uppercase string. You can convert the characters in a string to lowercase by calling the <xref:System.String.ToLower%2A> or <xref:System.String.ToLowerInvariant%2A> method, and you can convert them to uppercase by calling the <xref:System.String.ToUpper%2A> or <xref:System.String.ToUpperInvariant%2A> method. In addition, you can use the <xref:System.Globalization.TextInfo.ToTitleCase%2A?displayProperty=fullName> method to convert a string to title case.","pos":[0,740],"nodes":[{"content":"Casing rules determine how to change the capitalization of a Unicode character; for example, from lowercase to uppercase.","pos":[0,121]},{"content":"Often, a casing operation is performed before a string comparison.","pos":[122,188]},{"content":"For example, a string might be converted to uppercase so that it can be compared with another uppercase string.","pos":[189,300]},{"content":"You can convert the characters in a string to lowercase by calling the <ph id=\"ph1\">&lt;xref:System.String.ToLower%2A&gt;</ph> or <ph id=\"ph2\">&lt;xref:System.String.ToLowerInvariant%2A&gt;</ph> method, and you can convert them to uppercase by calling the <ph id=\"ph3\">&lt;xref:System.String.ToUpper%2A&gt;</ph> or <ph id=\"ph4\">&lt;xref:System.String.ToUpperInvariant%2A&gt;</ph> method.","pos":[301,592],"source":" You can convert the characters in a string to lowercase by calling the <xref:System.String.ToLower%2A> or <xref:System.String.ToLowerInvariant%2A> method, and you can convert them to uppercase by calling the <xref:System.String.ToUpper%2A> or <xref:System.String.ToUpperInvariant%2A> method."},{"content":"In addition, you can use the <ph id=\"ph1\">&lt;xref:System.Globalization.TextInfo.ToTitleCase%2A?displayProperty=fullName&gt;</ph> method to convert a string to title case.","pos":[593,740],"source":" In addition, you can use the <xref:System.Globalization.TextInfo.ToTitleCase%2A?displayProperty=fullName> method to convert a string to title case."}]}]},{"pos":[29338,29626],"content":"Casing operations can be based on the rules of the current culture, a specified culture, or the invariant culture. Because case mappings can vary depending on the culture used, the result of casing operations can vary based on culture. The actual differences in casing are of three kinds:","nodes":[{"content":"Casing operations can be based on the rules of the current culture, a specified culture, or the invariant culture. Because case mappings can vary depending on the culture used, the result of casing operations can vary based on culture. The actual differences in casing are of three kinds:","pos":[0,288],"nodes":[{"content":"Casing operations can be based on the rules of the current culture, a specified culture, or the invariant culture.","pos":[0,114]},{"content":"Because case mappings can vary depending on the culture used, the result of casing operations can vary based on culture.","pos":[115,235]},{"content":"The actual differences in casing are of three kinds:","pos":[236,288]}]}]},{"pos":[29636,30275],"content":"Differences in the case mapping of LATIN CAPITAL LETTER I (U+0049), LATIN SMALL LETTER I (U+0069), LATIN CAPITAL LETTER I WITH DOT ABOVE (U+0130), and LATIN SMALL LETTER DOTLESS I (U+0131). In the tr-TR (Turkish (Turkey)) and az-Latn-AZ (Azerbaijan, Latin) cultures, and in the tr, az, and az-Latn neutral cultures, the lowercase equivalent of LATIN CAPITAL LETTER I is LATIN SMALL LETTER DOTLESS I, and the uppercase equivalent of LATIN SMALL LETTER I is LATIN CAPITAL LETTER I WITH DOT ABOVE. In all other cultures, including the invariant culture, LATIN SMALL LETTER I and LATIN CAPITAL LETTER I are lowercase and uppercase equivalents.","nodes":[{"content":"Differences in the case mapping of LATIN CAPITAL LETTER I (U+0049), LATIN SMALL LETTER I (U+0069), LATIN CAPITAL LETTER I WITH DOT ABOVE (U+0130), and LATIN SMALL LETTER DOTLESS I (U+0131). In the tr-TR (Turkish (Turkey)) and az-Latn-AZ (Azerbaijan, Latin) cultures, and in the tr, az, and az-Latn neutral cultures, the lowercase equivalent of LATIN CAPITAL LETTER I is LATIN SMALL LETTER DOTLESS I, and the uppercase equivalent of LATIN SMALL LETTER I is LATIN CAPITAL LETTER I WITH DOT ABOVE. In all other cultures, including the invariant culture, LATIN SMALL LETTER I and LATIN CAPITAL LETTER I are lowercase and uppercase equivalents.","pos":[0,639],"nodes":[{"content":"Differences in the case mapping of LATIN CAPITAL LETTER I (U+0049), LATIN SMALL LETTER I (U+0069), LATIN CAPITAL LETTER I WITH DOT ABOVE (U+0130), and LATIN SMALL LETTER DOTLESS I (U+0131).","pos":[0,189]},{"content":"In the tr-TR (Turkish (Turkey)) and az-Latn-AZ (Azerbaijan, Latin) cultures, and in the tr, az, and az-Latn neutral cultures, the lowercase equivalent of LATIN CAPITAL LETTER I is LATIN SMALL LETTER DOTLESS I, and the uppercase equivalent of LATIN SMALL LETTER I is LATIN CAPITAL LETTER I WITH DOT ABOVE.","pos":[190,494]},{"content":"In all other cultures, including the invariant culture, LATIN SMALL LETTER I and LATIN CAPITAL LETTER I are lowercase and uppercase equivalents.","pos":[495,639]}]}]},{"pos":[30286,30520],"content":"The following example demonstrates how a string comparison designed to prevent file system access can fail if it relies on a culture-sensitive casing comparison. (The casing conventions of the invariant culture should have been used.)","nodes":[{"content":"The following example demonstrates how a string comparison designed to prevent file system access can fail if it relies on a culture-sensitive casing comparison. (The casing conventions of the invariant culture should have been used.)","pos":[0,234],"nodes":[{"content":"The following example demonstrates how a string comparison designed to prevent file system access can fail if it relies on a culture-sensitive casing comparison.","pos":[0,161]},{"content":"(The casing conventions of the invariant culture should have been used.)","pos":[162,234]}]}]},{"pos":[30531,30784],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>System.String.Class#17<ept id=\"p2\">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Class/cs/case2.cs#17)</ept><ept id=\"p1\">]</ept>  <bpt id=\"p3\">[!code-vb</bpt><bpt id=\"p4\">[</bpt>System.String.Class#17<ept id=\"p4\">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Class/vb/case2.vb#17)</ept><ept id=\"p3\">]</ept>","leadings":["","    "],"source":"[!code-csharp[System.String.Class#17](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Class/cs/case2.cs#17)]\n [!code-vb[System.String.Class#17](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Class/vb/case2.vb#17)]"},{"pos":[30794,31141],"content":"Differences in case mappings between the invariant culture and all other cultures. In these cases, using the casing rules of the invariant culture to change a character to uppercase or lowercase returns the same character. For all other cultures, it returns a different character. Some of the affected characters are listed in the following table.","nodes":[{"content":"Differences in case mappings between the invariant culture and all other cultures. In these cases, using the casing rules of the invariant culture to change a character to uppercase or lowercase returns the same character. For all other cultures, it returns a different character. Some of the affected characters are listed in the following table.","pos":[0,347],"nodes":[{"content":"Differences in case mappings between the invariant culture and all other cultures.","pos":[0,82]},{"content":"In these cases, using the casing rules of the invariant culture to change a character to uppercase or lowercase returns the same character.","pos":[83,222]},{"content":"For all other cultures, it returns a different character.","pos":[223,280]},{"content":"Some of the affected characters are listed in the following table.","pos":[281,347]}]}]},{"pos":[31152,31161],"content":"Character","nodes":[{"content":"Character","pos":[0,9]}]},{"pos":[31162,31175],"content":"If changed to","nodes":[{"content":"If changed to","pos":[0,13]}]},{"pos":[31176,31183],"content":"Returns","nodes":[{"content":"Returns","pos":[0,7]}]},{"pos":[31250,31270],"content":"MICRON SIGN (U+00B5)","nodes":[{"content":"MICRON SIGN (U+00B5)","pos":[0,20]}]},{"pos":[31271,31280],"content":"Uppercase","nodes":[{"content":"Uppercase","pos":[0,9]}]},{"pos":[31281,31313],"content":"GREEK CAPITAL LETTER MU (U+-39C)","nodes":[{"content":"GREEK CAPITAL LETTER MU (U+-39C)","pos":[0,32]}]},{"pos":[31322,31368],"content":"LATIN CAPITAL LETTER I WITH DOT ABOVE (U+0130)","nodes":[{"content":"LATIN CAPITAL LETTER I WITH DOT ABOVE (U+0130)","pos":[0,46]}]},{"pos":[31369,31378],"content":"Lowercase","nodes":[{"content":"Lowercase","pos":[0,9]}]},{"pos":[31379,31408],"content":"LATIN SMALL LETTER I (U+0069)","nodes":[{"content":"LATIN SMALL LETTER I (U+0069)","pos":[0,29]}]},{"pos":[31417,31454],"content":"LATIN SMALL LETTER DOTLESS I (U+0131)","nodes":[{"content":"LATIN SMALL LETTER DOTLESS I (U+0131)","pos":[0,37]}]},{"pos":[31455,31464],"content":"Uppercase","nodes":[{"content":"Uppercase","pos":[0,9]}]},{"pos":[31465,31496],"content":"LATIN CAPITAL LETTER I (U+0049)","nodes":[{"content":"LATIN CAPITAL LETTER I (U+0049)","pos":[0,31]}]},{"pos":[31505,31539],"content":"LATIN SMALL LETTER LONG S (U+017F)","nodes":[{"content":"LATIN SMALL LETTER LONG S (U+017F)","pos":[0,34]}]},{"pos":[31540,31549],"content":"Uppercase","nodes":[{"content":"Uppercase","pos":[0,9]}]},{"pos":[31550,31581],"content":"LATIN CAPITAL LETTER S (U+0053)","nodes":[{"content":"LATIN CAPITAL LETTER S (U+0053)","pos":[0,31]}]},{"pos":[31590,31652],"content":"LATIN CAPITAL LETTER D WITH SMALL LETTER Z WITH CARON (U+01C5)","nodes":[{"content":"LATIN CAPITAL LETTER D WITH SMALL LETTER Z WITH CARON (U+01C5)","pos":[0,62]}]},{"pos":[31653,31662],"content":"Lowercase","nodes":[{"content":"Lowercase","pos":[0,9]}]},{"pos":[31663,31704],"content":"LATIN SMALL LETTER DZ WITH CARON (U+01C6)","nodes":[{"content":"LATIN SMALL LETTER DZ WITH CARON (U+01C6)","pos":[0,41]}]},{"pos":[31713,31751],"content":"COMBINING GREEK YPOGEGRAMMENI (U+0345)","nodes":[{"content":"COMBINING GREEK YPOGEGRAMMENI (U+0345)","pos":[0,38]}]},{"pos":[31752,31761],"content":"Uppercase","nodes":[{"content":"Uppercase","pos":[0,9]}]},{"pos":[31762,31796],"content":"GREEK CAPITAL LETTER IOTA (U+0399)","nodes":[{"content":"GREEK CAPITAL LETTER IOTA (U+0399)","pos":[0,34]}]},{"pos":[31807,32142],"content":"Differences in case mappings of two-letter mixed-case pairs in the ASCII character range. In most cultures, a two-letter mixed-case pair is equal to the equivalent two-letter uppercase or lowercase pair. This is not true for the following two-letter pairs in the following cultures, because in each case they are compared to a digraph:","nodes":[{"content":"Differences in case mappings of two-letter mixed-case pairs in the ASCII character range. In most cultures, a two-letter mixed-case pair is equal to the equivalent two-letter uppercase or lowercase pair. This is not true for the following two-letter pairs in the following cultures, because in each case they are compared to a digraph:","pos":[0,335],"nodes":[{"content":"Differences in case mappings of two-letter mixed-case pairs in the ASCII character range.","pos":[0,89]},{"content":"In most cultures, a two-letter mixed-case pair is equal to the equivalent two-letter uppercase or lowercase pair.","pos":[90,203]},{"content":"This is not true for the following two-letter pairs in the following cultures, because in each case they are compared to a digraph:","pos":[204,335]}]}]},{"pos":[32156,32212],"content":"\"lJ\" and \"nJ\" in the hr-HR (Croatian (Croatia)) culture.","nodes":[{"content":"\"lJ\" and \"nJ\" in the hr-HR (Croatian (Croatia)) culture.","pos":[0,56]}]},{"pos":[32226,32308],"content":"\"cH\" in the cs-CZ (Czech (Czech Republic)) and sk-SK (Slovak (Slovakia)) cultures.","nodes":[{"content":"\"cH\" in the cs-CZ (Czech (Czech Republic)) and sk-SK (Slovak (Slovakia)) cultures.","pos":[0,82]}]},{"pos":[32322,32367],"content":"\"aA\" in the da-DK (Danish (Denmark)) culture.","nodes":[{"content":"\"aA\" in the da-DK (Danish (Denmark)) culture.","pos":[0,45]}]},{"pos":[32381,32470],"content":"\"cS\", \"dZ\", \"dZS\", \"nY\", \"sZ\", \"tY\", and \"zS\" in the hu-HU (Hungarian (Hungary)) culture.","nodes":[{"content":"\"cS\", \"dZ\", \"dZS\", \"nY\", \"sZ\", \"tY\", and \"zS\" in the hu-HU (Hungarian (Hungary)) culture.","pos":[0,89]}]},{"pos":[32484,32562],"content":"\"cH\" and \"lL\" in the es-ES_tradnl (Spanish (Spain, Traditional Sort)) culture.","nodes":[{"content":"\"cH\" and \"lL\" in the es-ES_tradnl (Spanish (Spain, Traditional Sort)) culture.","pos":[0,78]}]},{"pos":[32576,32676],"content":"\"cH\", \"gI\", \"kH\", \"nG\" \"nH\", \"pH\", \"qU', \"tH\", and \"tR\" in the vi-VN (Vietnamese (Vietnam)) culture.","nodes":[{"content":"\"cH\", \"gI\", \"kH\", \"nG\" \"nH\", \"pH\", \"qU', \"tH\", and \"tR\" in the vi-VN (Vietnamese (Vietnam)) culture.","pos":[0,100]}]},{"pos":[32687,32873],"content":"However, it is unusual to encounter a situation in which a culture-sensitive comparison of these pairs creates problems, because these pairs are uncommon in fixed strings or identifiers.","nodes":[{"content":"However, it is unusual to encounter a situation in which a culture-sensitive comparison of these pairs creates problems, because these pairs are uncommon in fixed strings or identifiers.","pos":[0,186]}]},{"pos":[32880,33008],"content":"The following example illustrates some of the differences in casing rules between cultures when converting strings to uppercase.","nodes":[{"content":"The following example illustrates some of the differences in casing rules between cultures when converting strings to uppercase.","pos":[0,128]}]},{"pos":[33015,33387],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>System.String.Class#7<ept id=\"p2\">](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Class/cpp/string.casing.cpp#7)</ept><ept id=\"p1\">]</ept> <bpt id=\"p3\">[!code-csharp</bpt><bpt id=\"p4\">[</bpt>System.String.Class#7<ept id=\"p4\">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Class/cs/case1.cs#7)</ept><ept id=\"p3\">]</ept> <bpt id=\"p5\">[!code-vb</bpt><bpt id=\"p6\">[</bpt>System.String.Class#7<ept id=\"p6\">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Class/vb/case1.vb#7)</ept><ept id=\"p5\">]</ept>","leadings":[""," "," "],"source":"[!code-cpp[System.String.Class#7](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Class/cpp/string.casing.cpp#7)]\n[!code-csharp[System.String.Class#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Class/cs/case1.cs#7)]\n[!code-vb[System.String.Class#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Class/vb/case1.vb#7)]"},{"pos":[33423,33445],"content":"Parsing and formatting","linkify":"Parsing and formatting","nodes":[{"content":"Parsing and formatting","pos":[0,22]}]},{"pos":[33449,34109],"content":"Formatting and parsing are inverse operations. Formatting rules determine how to convert a value, such as a date and time or a number, to its string representation, whereas parsing rules determine how to convert a string representation to a value such as a date and time. Both formatting and parsing rules are dependent on cultural conventions. The following example illustrates the ambiguity that can arise when interpreting a culture-specific date string. Without knowing the conventions of the culture that was used to produce a date string, it is not possible to know whether 03/01/2011, 3/1/2011, and 01/03/2011 represent January 3, 2011 or March 1, 2011.","nodes":[{"content":"Formatting and parsing are inverse operations. Formatting rules determine how to convert a value, such as a date and time or a number, to its string representation, whereas parsing rules determine how to convert a string representation to a value such as a date and time. Both formatting and parsing rules are dependent on cultural conventions. The following example illustrates the ambiguity that can arise when interpreting a culture-specific date string. Without knowing the conventions of the culture that was used to produce a date string, it is not possible to know whether 03/01/2011, 3/1/2011, and 01/03/2011 represent January 3, 2011 or March 1, 2011.","pos":[0,660],"nodes":[{"content":"Formatting and parsing are inverse operations.","pos":[0,46]},{"content":"Formatting rules determine how to convert a value, such as a date and time or a number, to its string representation, whereas parsing rules determine how to convert a string representation to a value such as a date and time.","pos":[47,271]},{"content":"Both formatting and parsing rules are dependent on cultural conventions.","pos":[272,344]},{"content":"The following example illustrates the ambiguity that can arise when interpreting a culture-specific date string.","pos":[345,457]},{"content":"Without knowing the conventions of the culture that was used to produce a date string, it is not possible to know whether 03/01/2011, 3/1/2011, and 01/03/2011 represent January 3, 2011 or March 1, 2011.","pos":[458,660]}]}]},{"pos":[34116,34493],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>System.String.Class#8<ept id=\"p2\">](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Class/cpp/string.format1.cpp#8)</ept><ept id=\"p1\">]</ept> <bpt id=\"p3\">[!code-csharp</bpt><bpt id=\"p4\">[</bpt>System.String.Class#8<ept id=\"p4\">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Class/cs/format1.cs#8)</ept><ept id=\"p3\">]</ept> <bpt id=\"p5\">[!code-vb</bpt><bpt id=\"p6\">[</bpt>System.String.Class#8<ept id=\"p6\">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Class/vb/format1.vb#8)</ept><ept id=\"p5\">]</ept>","source":"[!code-cpp[System.String.Class#8](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Class/cpp/string.format1.cpp#8)]\n [!code-csharp[System.String.Class#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Class/cs/format1.cs#8)]\n [!code-vb[System.String.Class#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Class/vb/format1.vb#8)]"},{"pos":[34500,34664],"content":"Similarly, as the following example shows, a single string can produce different dates depending on the culture whose conventions are used in the parsing operation.","nodes":[{"content":"Similarly, as the following example shows, a single string can produce different dates depending on the culture whose conventions are used in the parsing operation.","pos":[0,164]}]},{"pos":[34671,35045],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>System.String.Class#9<ept id=\"p2\">](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Class/cpp/string.parse1.cpp#9)</ept><ept id=\"p1\">]</ept> <bpt id=\"p3\">[!code-csharp</bpt><bpt id=\"p4\">[</bpt>System.String.Class#9<ept id=\"p4\">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Class/cs/parse1.cs#9)</ept><ept id=\"p3\">]</ept> <bpt id=\"p5\">[!code-vb</bpt><bpt id=\"p6\">[</bpt>System.String.Class#9<ept id=\"p6\">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Class/vb/parse1.vb#9)</ept><ept id=\"p5\">]</ept>","source":"[!code-cpp[System.String.Class#9](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Class/cpp/string.parse1.cpp#9)]\n [!code-csharp[System.String.Class#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Class/cs/parse1.cs#9)]\n [!code-vb[System.String.Class#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Class/vb/parse1.vb#9)]"},{"pos":[35084,35113],"content":"String comparison and sorting","linkify":"String comparison and sorting","nodes":[{"content":"String comparison and sorting","pos":[0,29]}]},{"pos":[35117,35819],"content":"Conventions for comparing and sorting strings vary from culture to culture. For example, the sort order may be based on phonetics or on the visual representation of characters. In East Asian languages, characters are sorted by the stroke and radical of ideographs. Sorting also depends on the order languages and cultures use for the alphabet. For example, the Danish language has an \"Ã\" character that it sorts after \"Z\" in the alphabet. In addition, comparisons can be case-sensitive or case-insensitive, and in some cases casing rules also differ by culture. Ordinal comparison, on the other hand, uses the Unicode code points of individual characters in a string when comparing and sorting strings.","nodes":[{"content":"Conventions for comparing and sorting strings vary from culture to culture. For example, the sort order may be based on phonetics or on the visual representation of characters. In East Asian languages, characters are sorted by the stroke and radical of ideographs. Sorting also depends on the order languages and cultures use for the alphabet. For example, the Danish language has an \"Ã\" character that it sorts after \"Z\" in the alphabet. In addition, comparisons can be case-sensitive or case-insensitive, and in some cases casing rules also differ by culture. Ordinal comparison, on the other hand, uses the Unicode code points of individual characters in a string when comparing and sorting strings.","pos":[0,702],"nodes":[{"content":"Conventions for comparing and sorting strings vary from culture to culture.","pos":[0,75]},{"content":"For example, the sort order may be based on phonetics or on the visual representation of characters.","pos":[76,176]},{"content":"In East Asian languages, characters are sorted by the stroke and radical of ideographs.","pos":[177,264]},{"content":"Sorting also depends on the order languages and cultures use for the alphabet.","pos":[265,343]},{"content":"For example, the Danish language has an \"Ã\" character that it sorts after \"Z\" in the alphabet.","pos":[344,438]},{"content":"In addition, comparisons can be case-sensitive or case-insensitive, and in some cases casing rules also differ by culture.","pos":[439,561]},{"content":"Ordinal comparison, on the other hand, uses the Unicode code points of individual characters in a string when comparing and sorting strings.","pos":[562,702]}]}]},{"pos":[35826,36844],"content":"Sort rules determine the alphabetic order of Unicode characters and how two strings compare to each other. For example, the <xref:System.String.Compare%28System.String%2CSystem.String%2CSystem.StringComparison%29?displayProperty=fullName> method compares two strings based on the <xref:System.StringComparison> parameter. If the parameter value is <xref:System.StringComparison?displayProperty=fullName>, the method performs a linguistic comparison that uses the conventions of the current culture; if the parameter value is <xref:System.StringComparison?displayProperty=fullName>, the method performs an ordinal comparison. Consequently, as the following example shows, if the current culture is U.S. English, the first call to the <xref:System.String.Compare%28System.String%2CSystem.String%2CSystem.StringComparison%29?displayProperty=fullName> method (using culture-sensitive comparison) considers \"a\" less than \"A\", but the second call to the same method (using ordinal comparison) considers \"a\" greater than \"A\".","nodes":[{"content":"Sort rules determine the alphabetic order of Unicode characters and how two strings compare to each other. For example, the <xref:System.String.Compare%28System.String%2CSystem.String%2CSystem.StringComparison%29?displayProperty=fullName> method compares two strings based on the <xref:System.StringComparison> parameter. If the parameter value is <xref:System.StringComparison?displayProperty=fullName>, the method performs a linguistic comparison that uses the conventions of the current culture; if the parameter value is <xref:System.StringComparison?displayProperty=fullName>, the method performs an ordinal comparison. Consequently, as the following example shows, if the current culture is U.S. English, the first call to the <xref:System.String.Compare%28System.String%2CSystem.String%2CSystem.StringComparison%29?displayProperty=fullName> method (using culture-sensitive comparison) considers \"a\" less than \"A\", but the second call to the same method (using ordinal comparison) considers \"a\" greater than \"A\".","pos":[0,1018],"nodes":[{"content":"Sort rules determine the alphabetic order of Unicode characters and how two strings compare to each other.","pos":[0,106]},{"content":"For example, the <ph id=\"ph1\">&lt;xref:System.String.Compare%28System.String%2CSystem.String%2CSystem.StringComparison%29?displayProperty=fullName&gt;</ph> method compares two strings based on the <ph id=\"ph2\">&lt;xref:System.StringComparison&gt;</ph> parameter.","pos":[107,321],"source":" For example, the <xref:System.String.Compare%28System.String%2CSystem.String%2CSystem.StringComparison%29?displayProperty=fullName> method compares two strings based on the <xref:System.StringComparison> parameter."},{"content":"If the parameter value is <ph id=\"ph1\">&lt;xref:System.StringComparison?displayProperty=fullName&gt;</ph>, the method performs a linguistic comparison that uses the conventions of the current culture; if the parameter value is <ph id=\"ph2\">&lt;xref:System.StringComparison?displayProperty=fullName&gt;</ph>, the method performs an ordinal comparison.","pos":[322,624],"source":" If the parameter value is <xref:System.StringComparison?displayProperty=fullName>, the method performs a linguistic comparison that uses the conventions of the current culture; if the parameter value is <xref:System.StringComparison?displayProperty=fullName>, the method performs an ordinal comparison."},{"content":"Consequently, as the following example shows, if the current culture is U.S. English, the first call to the <ph id=\"ph1\">&lt;xref:System.String.Compare%28System.String%2CSystem.String%2CSystem.StringComparison%29?displayProperty=fullName&gt;</ph> method (using culture-sensitive comparison) considers \"a\" less than \"A\", but the second call to the same method (using ordinal comparison) considers \"a\" greater than \"A\".","pos":[625,1018],"source":" Consequently, as the following example shows, if the current culture is U.S. English, the first call to the <xref:System.String.Compare%28System.String%2CSystem.String%2CSystem.StringComparison%29?displayProperty=fullName> method (using culture-sensitive comparison) considers \"a\" less than \"A\", but the second call to the same method (using ordinal comparison) considers \"a\" greater than \"A\"."}]}]},{"pos":[36851,37237],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>System.String.Class#10<ept id=\"p2\">](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Class/cpp/string.compare1.cpp#10)</ept><ept id=\"p1\">]</ept> <bpt id=\"p3\">[!code-csharp</bpt><bpt id=\"p4\">[</bpt>System.String.Class#10<ept id=\"p4\">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Class/cs/compare1.cs#10)</ept><ept id=\"p3\">]</ept> <bpt id=\"p5\">[!code-vb</bpt><bpt id=\"p6\">[</bpt>System.String.Class#10<ept id=\"p6\">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Class/vb/compare1.vb#10)</ept><ept id=\"p5\">]</ept>","source":"[!code-cpp[System.String.Class#10](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Class/cpp/string.compare1.cpp#10)]\n [!code-csharp[System.String.Class#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Class/cs/compare1.cs#10)]\n [!code-vb[System.String.Class#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Class/vb/compare1.vb#10)]"},{"pos":[37244,37309],"content":"The .NET Framework supports word, string, and ordinal sort rules:","nodes":[{"content":"The .NET Framework supports word, string, and ordinal sort rules:","pos":[0,65]}]},{"pos":[37319,37779],"content":"A word sort performs a culture-sensitive comparison of strings in which certain nonalphanumeric Unicode characters might have special weights assigned to them. For example, the hyphen (-) might have a very small weight assigned to it so that \"coop\" and \"co-op\" appear next to each other in a sorted list. For a list of the <xref:System.String>methods that compare two strings using word sort rules, see the [String operations by category](#ByCategory) section.","nodes":[{"content":"A word sort performs a culture-sensitive comparison of strings in which certain nonalphanumeric Unicode characters might have special weights assigned to them.","pos":[0,159]},{"content":"For example, the hyphen (-) might have a very small weight assigned to it so that \"coop\" and \"co-op\" appear next to each other in a sorted list.","pos":[160,304]},{"content":"For a list of the <ph id=\"ph1\">&lt;xref:System.String&gt;</ph>methods that compare two strings using word sort rules, see the <bpt id=\"p1\">[</bpt>String operations by category<ept id=\"p1\">](#ByCategory)</ept> section.","pos":[305,460],"source":" For a list of the <xref:System.String>methods that compare two strings using word sort rules, see the [String operations by category](#ByCategory) section."}]},{"pos":[37789,38404],"content":"A string sort also performs a culture-sensitive comparison. It is similar to a word sort, except that there are no special cases, and all nonalphanumeric symbols come before all alphanumeric Unicode characters. Two strings can be compared using string sort rules by calling the <xref:System.Globalization.CompareInfo.Compare%2A?displayProperty=fullName> method overloads that have an `options` parameter that is supplied a value of <xref:System.Globalization.CompareOptions?displayProperty=fullName>. Note that this is the only method that the .NET Framework provides to compare two strings using string sort rules.","nodes":[{"content":"A string sort also performs a culture-sensitive comparison.","pos":[0,59]},{"content":"It is similar to a word sort, except that there are no special cases, and all nonalphanumeric symbols come before all alphanumeric Unicode characters.","pos":[60,210]},{"content":"Two strings can be compared using string sort rules by calling the <ph id=\"ph1\">&lt;xref:System.Globalization.CompareInfo.Compare%2A?displayProperty=fullName&gt;</ph> method overloads that have an <ph id=\"ph2\">`options`</ph> parameter that is supplied a value of <ph id=\"ph3\">&lt;xref:System.Globalization.CompareOptions?displayProperty=fullName&gt;</ph>.","pos":[211,500],"source":" Two strings can be compared using string sort rules by calling the <xref:System.Globalization.CompareInfo.Compare%2A?displayProperty=fullName> method overloads that have an `options` parameter that is supplied a value of <xref:System.Globalization.CompareOptions?displayProperty=fullName>."},{"content":"Note that this is the only method that the .NET Framework provides to compare two strings using string sort rules.","pos":[501,615]}]},{"pos":[38414,39061],"content":"An ordinal sort compares strings based on the numeric value of each <xref:System.Char> object in the string. An ordinal comparison is automatically case-sensitive because the lowercase and uppercase versions of a character have different code points. However, if case is not important, you can specify an ordinal comparison that ignores case. This is equivalent to converting the string to uppercase by using the invariant culture and then performing an ordinal comparison on the result. For a list of the <xref:System.String> methods that compare two strings using ordinal sort rules, see the [String operations by category](#ByCategory) section.","nodes":[{"content":"An ordinal sort compares strings based on the numeric value of each <ph id=\"ph1\">&lt;xref:System.Char&gt;</ph> object in the string.","pos":[0,108],"source":"An ordinal sort compares strings based on the numeric value of each <xref:System.Char> object in the string."},{"content":"An ordinal comparison is automatically case-sensitive because the lowercase and uppercase versions of a character have different code points.","pos":[109,250]},{"content":"However, if case is not important, you can specify an ordinal comparison that ignores case.","pos":[251,342]},{"content":"This is equivalent to converting the string to uppercase by using the invariant culture and then performing an ordinal comparison on the result.","pos":[343,487]},{"content":"For a list of the <ph id=\"ph1\">&lt;xref:System.String&gt;</ph> methods that compare two strings using ordinal sort rules, see the <bpt id=\"p1\">[</bpt>String operations by category<ept id=\"p1\">](#ByCategory)</ept> section.","pos":[488,647],"source":" For a list of the <xref:System.String> methods that compare two strings using ordinal sort rules, see the [String operations by category](#ByCategory) section."}]},{"pos":[39068,40943],"content":"A culture-sensitive comparison is any comparison that explicitly or implicitly uses a <xref:System.Globalization.CultureInfo> object, including the invariant culture that is specified by the <xref:System.Globalization.CultureInfo.InvariantCulture%2A?displayProperty=fullName> property. The implicit culture is the current culture, which is specified by the <xref:System.Threading.Thread.CurrentCulture%2A?displayProperty=fullName> and <xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=fullName> properties. There is considerable variation in the sort order of alphabetic characters (that is, characters for which the <xref:System.Char.IsLetter%2A?displayProperty=fullName> property returns `true`) across cultures. You can specify a culture-sensitive comparison that uses the conventions of a specific culture by supplying a <xref:System.Globalization.CultureInfo> object to a string comparison method such as <xref:System.String.Compare%28System.String%2CSystem.String%2CSystem.Globalization.CultureInfo%2CSystem.Globalization.CompareOptions%29>. You can specify a culture-sensitive comparison that uses the conventions of the current culture by supplying <xref:System.StringComparison?displayProperty=fullName>, <xref:System.StringComparison?displayProperty=fullName>, or any member of the <xref:System.Globalization.CompareOptions> enumeration other than <xref:System.Globalization.CompareOptions?displayProperty=fullName> or <xref:System.Globalization.CompareOptions?displayProperty=fullName> to an appropriate overload of the <xref:System.String.Compare%2A> method. A culture-sensitive comparison is generally appropriate for sorting whereas an ordinal comparison is not. An ordinal comparison is generally appropriate for determining whether two strings are equal (that is, for determining identity) whereas a culture-sensitive comparison is not.","nodes":[{"content":"A culture-sensitive comparison is any comparison that explicitly or implicitly uses a <ph id=\"ph1\">&lt;xref:System.Globalization.CultureInfo&gt;</ph> object, including the invariant culture that is specified by the <ph id=\"ph2\">&lt;xref:System.Globalization.CultureInfo.InvariantCulture%2A?displayProperty=fullName&gt;</ph> property.","pos":[0,285],"source":"A culture-sensitive comparison is any comparison that explicitly or implicitly uses a <xref:System.Globalization.CultureInfo> object, including the invariant culture that is specified by the <xref:System.Globalization.CultureInfo.InvariantCulture%2A?displayProperty=fullName> property."},{"content":"The implicit culture is the current culture, which is specified by the <ph id=\"ph1\">&lt;xref:System.Threading.Thread.CurrentCulture%2A?displayProperty=fullName&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=fullName&gt;</ph> properties.","pos":[286,529],"source":" The implicit culture is the current culture, which is specified by the <xref:System.Threading.Thread.CurrentCulture%2A?displayProperty=fullName> and <xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=fullName> properties."},{"content":"There is considerable variation in the sort order of alphabetic characters (that is, characters for which the <ph id=\"ph1\">&lt;xref:System.Char.IsLetter%2A?displayProperty=fullName&gt;</ph> property returns <ph id=\"ph2\">`true`</ph>) across cultures.","pos":[530,737],"source":" There is considerable variation in the sort order of alphabetic characters (that is, characters for which the <xref:System.Char.IsLetter%2A?displayProperty=fullName> property returns `true`) across cultures."},{"content":"You can specify a culture-sensitive comparison that uses the conventions of a specific culture by supplying a <ph id=\"ph1\">&lt;xref:System.Globalization.CultureInfo&gt;</ph> object to a string comparison method such as <ph id=\"ph2\">&lt;xref:System.String.Compare%28System.String%2CSystem.String%2CSystem.Globalization.CultureInfo%2CSystem.Globalization.CompareOptions%29&gt;</ph>.","pos":[738,1070],"source":" You can specify a culture-sensitive comparison that uses the conventions of a specific culture by supplying a <xref:System.Globalization.CultureInfo> object to a string comparison method such as <xref:System.String.Compare%28System.String%2CSystem.String%2CSystem.Globalization.CultureInfo%2CSystem.Globalization.CompareOptions%29>."},{"content":"You can specify a culture-sensitive comparison that uses the conventions of the current culture by supplying <ph id=\"ph1\">&lt;xref:System.StringComparison?displayProperty=fullName&gt;</ph>, <ph id=\"ph2\">&lt;xref:System.StringComparison?displayProperty=fullName&gt;</ph>, or any member of the <ph id=\"ph3\">&lt;xref:System.Globalization.CompareOptions&gt;</ph> enumeration other than <ph id=\"ph4\">&lt;xref:System.Globalization.CompareOptions?displayProperty=fullName&gt;</ph> or <ph id=\"ph5\">&lt;xref:System.Globalization.CompareOptions?displayProperty=fullName&gt;</ph> to an appropriate overload of the <ph id=\"ph6\">&lt;xref:System.String.Compare%2A&gt;</ph> method.","pos":[1071,1593],"source":" You can specify a culture-sensitive comparison that uses the conventions of the current culture by supplying <xref:System.StringComparison?displayProperty=fullName>, <xref:System.StringComparison?displayProperty=fullName>, or any member of the <xref:System.Globalization.CompareOptions> enumeration other than <xref:System.Globalization.CompareOptions?displayProperty=fullName> or <xref:System.Globalization.CompareOptions?displayProperty=fullName> to an appropriate overload of the <xref:System.String.Compare%2A> method."},{"content":"A culture-sensitive comparison is generally appropriate for sorting whereas an ordinal comparison is not.","pos":[1594,1699]},{"content":"An ordinal comparison is generally appropriate for determining whether two strings are equal (that is, for determining identity) whereas a culture-sensitive comparison is not.","pos":[1700,1875]}]},{"pos":[40950,41829],"content":"The following example illustrates the difference between culture-sensitive and ordinal comparison. The example evaluates three strings, \"Apple\", \"Ãble\", and \"AEble\", using ordinal comparison and the conventions of the da-DK and en-US cultures (each of which is the default culture at the time the <xref:System.String.Compare%2A> method is called). Because the Danish language treats the character \"Ã\" as an individual letter and sorts it after \"Z\" in the alphabet, the string \"Ãble\" is greater than \"Apple\". However, \"Ãble\" is not considered equivalent to \"AEble\", so \"Ãble\" is also greater than \"AEble\". The en-US culture doesn't include the letter\"Ã\" but treats it as equivalent to \"AE\", which explains why  \"Ãble\" is less than \"Apple\" but equal to \"AEble\". Ordinal comparison, on the other hand, considers \"Apple\" to be less than \"Ãble\", and \"Ãble\" to be greater than \"AEble\".","nodes":[{"content":"The following example illustrates the difference between culture-sensitive and ordinal comparison. The example evaluates three strings, \"Apple\", \"Ãble\", and \"AEble\", using ordinal comparison and the conventions of the da-DK and en-US cultures (each of which is the default culture at the time the <xref:System.String.Compare%2A> method is called). Because the Danish language treats the character \"Ã\" as an individual letter and sorts it after \"Z\" in the alphabet, the string \"Ãble\" is greater than \"Apple\". However, \"Ãble\" is not considered equivalent to \"AEble\", so \"Ãble\" is also greater than \"AEble\". The en-US culture doesn't include the letter\"Ã\" but treats it as equivalent to \"AE\", which explains why  \"Ãble\" is less than \"Apple\" but equal to \"AEble\". Ordinal comparison, on the other hand, considers \"Apple\" to be less than \"Ãble\", and \"Ãble\" to be greater than \"AEble\".","pos":[0,879],"nodes":[{"content":"The following example illustrates the difference between culture-sensitive and ordinal comparison.","pos":[0,98]},{"content":"The example evaluates three strings, \"Apple\", \"Ãble\", and \"AEble\", using ordinal comparison and the conventions of the da-DK and en-US cultures (each of which is the default culture at the time the <ph id=\"ph1\">&lt;xref:System.String.Compare%2A&gt;</ph> method is called).","pos":[99,347],"source":" The example evaluates three strings, \"Apple\", \"Ãble\", and \"AEble\", using ordinal comparison and the conventions of the da-DK and en-US cultures (each of which is the default culture at the time the <xref:System.String.Compare%2A> method is called)."},{"content":"Because the Danish language treats the character \"Ã\" as an individual letter and sorts it after \"Z\" in the alphabet, the string \"Ãble\" is greater than \"Apple\".","pos":[348,507]},{"content":"However, \"Ãble\" is not considered equivalent to \"AEble\", so \"Ãble\" is also greater than \"AEble\".","pos":[508,604]},{"content":"The en-US culture doesn't include the letter\"Ã\" but treats it as equivalent to \"AE\", which explains why  \"Ãble\" is less than \"Apple\" but equal to \"AEble\".","pos":[605,759]},{"content":"Ordinal comparison, on the other hand, considers \"Apple\" to be less than \"Ãble\", and \"Ãble\" to be greater than \"AEble\".","pos":[760,879]}]}]},{"pos":[41836,42091],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>System.String.Class#21<ept id=\"p2\">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Class/cs/compare4.cs#21)</ept><ept id=\"p1\">]</ept> <bpt id=\"p3\">[!code-vb</bpt><bpt id=\"p4\">[</bpt>System.String.Class#21<ept id=\"p4\">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Class/vb/compare4.vb#21)</ept><ept id=\"p3\">]</ept>","leadings":[""," "],"source":"[!code-csharp[System.String.Class#21](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Class/cs/compare4.cs#21)]\n[!code-vb[System.String.Class#21](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Class/vb/compare4.vb#21)]"},{"pos":[42098,42196],"content":"Use the following general guidelines to choose an appropriate sorting or string comparison method:","nodes":[{"content":"Use the following general guidelines to choose an appropriate sorting or string comparison method:","pos":[0,98]}]},{"pos":[42206,42523],"content":"If you want the strings to be ordered based on the user's culture, you should order them based on the conventions of the current culture. If the user's culture changes, the order of sorted strings will also change accordingly. For example, a thesaurus application should always sort words based on the user's culture.","nodes":[{"content":"If you want the strings to be ordered based on the user's culture, you should order them based on the conventions of the current culture. If the user's culture changes, the order of sorted strings will also change accordingly. For example, a thesaurus application should always sort words based on the user's culture.","pos":[0,317],"nodes":[{"content":"If you want the strings to be ordered based on the user's culture, you should order them based on the conventions of the current culture.","pos":[0,137]},{"content":"If the user's culture changes, the order of sorted strings will also change accordingly.","pos":[138,226]},{"content":"For example, a thesaurus application should always sort words based on the user's culture.","pos":[227,317]}]}]},{"pos":[42533,42942],"content":"If you want the strings to be ordered based on the conventions of a specific culture, you should order them by supplying a <xref:System.Globalization.CultureInfo> object that represents that culture to a comparison method. For example, in an application designed to teach students a particular language, you want strings to be ordered based on the conventions of one of the cultures that speaks that language.","nodes":[{"content":"If you want the strings to be ordered based on the conventions of a specific culture, you should order them by supplying a <xref:System.Globalization.CultureInfo> object that represents that culture to a comparison method. For example, in an application designed to teach students a particular language, you want strings to be ordered based on the conventions of one of the cultures that speaks that language.","pos":[0,409],"nodes":[{"content":"If you want the strings to be ordered based on the conventions of a specific culture, you should order them by supplying a <ph id=\"ph1\">&lt;xref:System.Globalization.CultureInfo&gt;</ph> object that represents that culture to a comparison method.","pos":[0,222],"source":"If you want the strings to be ordered based on the conventions of a specific culture, you should order them by supplying a <xref:System.Globalization.CultureInfo> object that represents that culture to a comparison method."},{"content":"For example, in an application designed to teach students a particular language, you want strings to be ordered based on the conventions of one of the cultures that speaks that language.","pos":[223,409]}]}]},{"pos":[42952,43234],"content":"If you want the order of strings to remain unchanged across cultures, you should order them based on the conventions of the invariant culture or use an ordinal comparison. For example, you would use an ordinal sort to organize the names of files, processes, mutexes, or named pipes.","nodes":[{"content":"If you want the order of strings to remain unchanged across cultures, you should order them based on the conventions of the invariant culture or use an ordinal comparison. For example, you would use an ordinal sort to organize the names of files, processes, mutexes, or named pipes.","pos":[0,282],"nodes":[{"content":"If you want the order of strings to remain unchanged across cultures, you should order them based on the conventions of the invariant culture or use an ordinal comparison.","pos":[0,171]},{"content":"For example, you would use an ordinal sort to organize the names of files, processes, mutexes, or named pipes.","pos":[172,282]}]}]},{"pos":[43244,43457],"content":"For a comparison that involves a security decision (such as whether a username is valid), you should always perform an ordinal test for equality by calling an overload of the <xref:System.String.Equals%2A> method.","nodes":[{"content":"For a comparison that involves a security decision (such as whether a username is valid), you should always perform an ordinal test for equality by calling an overload of the <ph id=\"ph1\">&lt;xref:System.String.Equals%2A&gt;</ph> method.","pos":[0,213],"source":"For a comparison that involves a security decision (such as whether a username is valid), you should always perform an ordinal test for equality by calling an overload of the <xref:System.String.Equals%2A> method."}]},{"pos":[43465,43892],"content":"[!NOTE]\n The culture-sensitive sorting and casing rules used in string comparison depend on the version of the .NET Framework. In the [!INCLUDE[net_v45](~/includes/net-v45-md.md)] running on the [!INCLUDE[win8](~/includes/win8-md.md)] operating system, sorting, casing, normalization, and Unicode character information conforms to the Unicode 6.0 standard. On other operating systems, it conforms to the Unicode 5.0 standard.","leadings":["","> "],"nodes":[{"content":" The culture-sensitive sorting and casing rules used in string comparison depend on the version of the .NET Framework. In the [!INCLUDE[net_v45](~/includes/net-v45-md.md)] running on the [!INCLUDE[win8](~/includes/win8-md.md)] operating system, sorting, casing, normalization, and Unicode character information conforms to the Unicode 6.0 standard. On other operating systems, it conforms to the Unicode 5.0 standard.","pos":[8,425],"nodes":[{"content":"The culture-sensitive sorting and casing rules used in string comparison depend on the version of the .NET Framework.","pos":[1,118]},{"content":"In the <ph id=\"ph1\">[!INCLUDE[net_v45](~/includes/net-v45-md.md)]</ph> running on the <ph id=\"ph2\">[!INCLUDE[win8](~/includes/win8-md.md)]</ph> operating system, sorting, casing, normalization, and Unicode character information conforms to the Unicode 6.0 standard.","pos":[119,348],"source":" In the [!INCLUDE[net_v45](~/includes/net-v45-md.md)] running on the [!INCLUDE[win8](~/includes/win8-md.md)] operating system, sorting, casing, normalization, and Unicode character information conforms to the Unicode 6.0 standard."},{"content":"On other operating systems, it conforms to the Unicode 5.0 standard.","pos":[349,417]}]}]},{"pos":[43899,44197],"content":"For more information about word, string, and ordinal sort rules, see the <xref:System.Globalization.CompareOptions?displayProperty=fullName> topic. For additional recommendations on when to use each rule, see [Best Practices for Using Strings](~/docs/standard/base-types/best-practices-strings.md).","nodes":[{"content":"For more information about word, string, and ordinal sort rules, see the <ph id=\"ph1\">&lt;xref:System.Globalization.CompareOptions?displayProperty=fullName&gt;</ph> topic.","pos":[0,147],"source":"For more information about word, string, and ordinal sort rules, see the <xref:System.Globalization.CompareOptions?displayProperty=fullName> topic."},{"content":"For additional recommendations on when to use each rule, see <bpt id=\"p1\">[</bpt>Best Practices for Using Strings<ept id=\"p1\">](~/docs/standard/base-types/best-practices-strings.md)</ept>.","pos":[148,298],"source":" For additional recommendations on when to use each rule, see [Best Practices for Using Strings](~/docs/standard/base-types/best-practices-strings.md)."}]},{"pos":[44204,44937],"content":"Ordinarily, you do not call string comparison methods such as <xref:System.String.Compare%2A> directly to determine the sort order of strings. Instead, comparison methods are called by sorting methods such as <xref:System.Array.Sort%2A?displayProperty=fullName> or <xref:System.Collections.Generic.List%601.Sort%2A?displayProperty=fullName>. The following example performs four different sorting operations (word sort using the current culture, word sort using the invariant culture, ordinal sort, and string sort using the invariant culture) without explicitly calling a string comparison method, although they do specify the type of comparison to use. Note that each type of sort produces a unique ordering of strings in its array.","nodes":[{"content":"Ordinarily, you do not call string comparison methods such as <xref:System.String.Compare%2A> directly to determine the sort order of strings. Instead, comparison methods are called by sorting methods such as <xref:System.Array.Sort%2A?displayProperty=fullName> or <xref:System.Collections.Generic.List%601.Sort%2A?displayProperty=fullName>. The following example performs four different sorting operations (word sort using the current culture, word sort using the invariant culture, ordinal sort, and string sort using the invariant culture) without explicitly calling a string comparison method, although they do specify the type of comparison to use. Note that each type of sort produces a unique ordering of strings in its array.","pos":[0,733],"nodes":[{"content":"Ordinarily, you do not call string comparison methods such as <ph id=\"ph1\">&lt;xref:System.String.Compare%2A&gt;</ph> directly to determine the sort order of strings.","pos":[0,142],"source":"Ordinarily, you do not call string comparison methods such as <xref:System.String.Compare%2A> directly to determine the sort order of strings."},{"content":"Instead, comparison methods are called by sorting methods such as <ph id=\"ph1\">&lt;xref:System.Array.Sort%2A?displayProperty=fullName&gt;</ph> or <ph id=\"ph2\">&lt;xref:System.Collections.Generic.List%601.Sort%2A?displayProperty=fullName&gt;</ph>.","pos":[143,341],"source":" Instead, comparison methods are called by sorting methods such as <xref:System.Array.Sort%2A?displayProperty=fullName> or <xref:System.Collections.Generic.List%601.Sort%2A?displayProperty=fullName>."},{"content":"The following example performs four different sorting operations (word sort using the current culture, word sort using the invariant culture, ordinal sort, and string sort using the invariant culture) without explicitly calling a string comparison method, although they do specify the type of comparison to use.","pos":[342,653]},{"content":"Note that each type of sort produces a unique ordering of strings in its array.","pos":[654,733]}]}]},{"pos":[44944,45330],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>System.String.Class#12<ept id=\"p2\">](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Class/cpp/string.compare2.cpp#12)</ept><ept id=\"p1\">]</ept> <bpt id=\"p3\">[!code-csharp</bpt><bpt id=\"p4\">[</bpt>System.String.Class#12<ept id=\"p4\">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Class/cs/compare2.cs#12)</ept><ept id=\"p3\">]</ept> <bpt id=\"p5\">[!code-vb</bpt><bpt id=\"p6\">[</bpt>System.String.Class#12<ept id=\"p6\">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Class/vb/compare2.vb#12)</ept><ept id=\"p5\">]</ept>","source":"[!code-cpp[System.String.Class#12](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Class/cpp/string.compare2.cpp#12)]\n [!code-csharp[System.String.Class#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Class/cs/compare2.cs#12)]\n [!code-vb[System.String.Class#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Class/vb/compare2.vb#12)]"},{"pos":[45338,46064],"content":"[!TIP]\n Internally, the.NET Framework uses sort keys to support culturallysensitive string comparison. Each character in a string is given several categories of sort weights, including alphabetic, case, and diacritic. A sort key, represented by the <xref:System.Globalization.SortKey> class, provides a repository of these weights for a particular string. If your app performs a large number of searching or sorting operations on the same set of strings, you can improve its performance by generating and storing sort keys for all the strings that it uses. When a sort or comparison operation is required, you use the sort keys instead of the strings. For more information, see the <xref:System.Globalization.SortKey> class.","leadings":["","> "],"nodes":[{"content":" Internally, the.NET Framework uses sort keys to support culturallysensitive string comparison. Each character in a string is given several categories of sort weights, including alphabetic, case, and diacritic. A sort key, represented by the <xref:System.Globalization.SortKey> class, provides a repository of these weights for a particular string. If your app performs a large number of searching or sorting operations on the same set of strings, you can improve its performance by generating and storing sort keys for all the strings that it uses. When a sort or comparison operation is required, you use the sort keys instead of the strings. For more information, see the <xref:System.Globalization.SortKey> class.","pos":[7,724],"nodes":[{"content":"Internally, the.NET Framework uses sort keys to support culturallysensitive string comparison.","pos":[1,95]},{"content":"Each character in a string is given several categories of sort weights, including alphabetic, case, and diacritic.","pos":[96,210]},{"content":"A sort key, represented by the <ph id=\"ph1\">&lt;xref:System.Globalization.SortKey&gt;</ph> class, provides a repository of these weights for a particular string.","pos":[211,348],"source":" A sort key, represented by the <xref:System.Globalization.SortKey> class, provides a repository of these weights for a particular string."},{"content":"If your app performs a large number of searching or sorting operations on the same set of strings, you can improve its performance by generating and storing sort keys for all the strings that it uses.","pos":[349,549]},{"content":"When a sort or comparison operation is required, you use the sort keys instead of the strings.","pos":[550,644]},{"content":"For more information, see the <ph id=\"ph1\">&lt;xref:System.Globalization.SortKey&gt;</ph> class.","pos":[645,717],"source":" For more information, see the <xref:System.Globalization.SortKey> class."}]}]},{"pos":[46071,47020],"content":"If you don't specify a string comparison convention, sorting methods such as <xref:System.Array.Sort%28System.Array%29?displayProperty=fullName> perform a culture-sensitive, case-sensitive sort on strings. The following example illustrates how changing the current culture affects the order of sorted strings in an array. It creates an array of three strings. First, it sets the `System.Threading.Thread.CurrentThread.CurrentCulture` property to en-US and calls the <xref:System.Array.Sort%28System.Array%29?displayProperty=fullName> method. The resulting sort order is based on sorting conventions for the English (United States) culture. Next, the example sets the `System.Threading.Thread.CurrentThread.CurrentCulture` property to da-DK and calls the <xref:System.Array.Sort%2A?displayProperty=fullName> method again. Notice how the resulting sort order differs from the en-US results because it uses the sorting conventions for Danish (Denmark).","nodes":[{"content":"If you don't specify a string comparison convention, sorting methods such as <ph id=\"ph1\">&lt;xref:System.Array.Sort%28System.Array%29?displayProperty=fullName&gt;</ph> perform a culture-sensitive, case-sensitive sort on strings.","pos":[0,205],"source":"If you don't specify a string comparison convention, sorting methods such as <xref:System.Array.Sort%28System.Array%29?displayProperty=fullName> perform a culture-sensitive, case-sensitive sort on strings."},{"content":"The following example illustrates how changing the current culture affects the order of sorted strings in an array.","pos":[206,321]},{"content":"It creates an array of three strings.","pos":[322,359]},{"content":"First, it sets the <ph id=\"ph1\">`System.Threading.Thread.CurrentThread.CurrentCulture`</ph> property to en-US and calls the <ph id=\"ph2\">&lt;xref:System.Array.Sort%28System.Array%29?displayProperty=fullName&gt;</ph> method.","pos":[360,541],"source":" First, it sets the `System.Threading.Thread.CurrentThread.CurrentCulture` property to en-US and calls the <xref:System.Array.Sort%28System.Array%29?displayProperty=fullName> method."},{"content":"The resulting sort order is based on sorting conventions for the English (United States) culture.","pos":[542,639]},{"content":"Next, the example sets the <ph id=\"ph1\">`System.Threading.Thread.CurrentThread.CurrentCulture`</ph> property to da-DK and calls the <ph id=\"ph2\">&lt;xref:System.Array.Sort%2A?displayProperty=fullName&gt;</ph> method again.","pos":[640,820],"source":" Next, the example sets the `System.Threading.Thread.CurrentThread.CurrentCulture` property to da-DK and calls the <xref:System.Array.Sort%2A?displayProperty=fullName> method again."},{"content":"Notice how the resulting sort order differs from the en-US results because it uses the sorting conventions for Danish (Denmark).","pos":[821,949]}]},{"pos":[47027,47294],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>Conceptual.Strings.Comparing#3<ept id=\"p2\">](~/samples/snippets/csharp/VS_Snippets_CLR/conceptual.strings.comparing/cs/sort1.cs#3)</ept><ept id=\"p1\">]</ept> <bpt id=\"p3\">[!code-vb</bpt><bpt id=\"p4\">[</bpt>Conceptual.Strings.Comparing#3<ept id=\"p4\">](~/samples/snippets/visualbasic/VS_Snippets_CLR/conceptual.strings.comparing/vb/sort1.vb#3)</ept><ept id=\"p3\">]</ept>","source":"[!code-csharp[Conceptual.Strings.Comparing#3](~/samples/snippets/csharp/VS_Snippets_CLR/conceptual.strings.comparing/cs/sort1.cs#3)]\n [!code-vb[Conceptual.Strings.Comparing#3](~/samples/snippets/visualbasic/VS_Snippets_CLR/conceptual.strings.comparing/vb/sort1.vb#3)]"},{"pos":[47302,47682],"content":"[!WARNING]\n If your primary purpose in comparing strings is to determine whether they are equal, you should call the <xref:System.String.Equals%2A?displayProperty=fullName> method. Typically, you should use <xref:System.String.Equals%2A> to perform an ordinal comparison. The <xref:System.String.Compare%2A?displayProperty=fullName> method is intended primarily to sort strings.","leadings":["","> "],"nodes":[{"content":" If your primary purpose in comparing strings is to determine whether they are equal, you should call the <xref:System.String.Equals%2A?displayProperty=fullName> method. Typically, you should use <xref:System.String.Equals%2A> to perform an ordinal comparison. The <xref:System.String.Compare%2A?displayProperty=fullName> method is intended primarily to sort strings.","pos":[11,378],"nodes":[{"content":"If your primary purpose in comparing strings is to determine whether they are equal, you should call the <ph id=\"ph1\">&lt;xref:System.String.Equals%2A?displayProperty=fullName&gt;</ph> method.","pos":[1,169],"source":" If your primary purpose in comparing strings is to determine whether they are equal, you should call the <xref:System.String.Equals%2A?displayProperty=fullName> method."},{"content":"Typically, you should use <ph id=\"ph1\">&lt;xref:System.String.Equals%2A&gt;</ph> to perform an ordinal comparison.","pos":[170,260],"source":" Typically, you should use <xref:System.String.Equals%2A> to perform an ordinal comparison."},{"content":"The <ph id=\"ph1\">&lt;xref:System.String.Compare%2A?displayProperty=fullName&gt;</ph> method is intended primarily to sort strings.","pos":[261,367],"source":" The <xref:System.String.Compare%2A?displayProperty=fullName> method is intended primarily to sort strings."}]}]},{"pos":[47689,48458],"content":"String search methods, such as <xref:System.String.StartsWith%2A?displayProperty=fullName> and <xref:System.String.IndexOf%2A?displayProperty=fullName>, also can perform culture-sensitive or ordinal string comparisons. The following example illustrates the differences between ordinal and culture-sensitive comparisons using the <xref:System.String.IndexOf%2A> method. A culture-sensitive search in which the current culture is English (United States) considers the substring \"oe\" to match the ligature \"Å\". Because a soft hyphen (U+00AD) is a zero-width character, the search treats the soft hyphen as equivalent to <xref:System.String.Empty> and finds a match at the beginning of the string. An ordinal search, on the other hand, does not find a match in either case.","nodes":[{"content":"String search methods, such as <xref:System.String.StartsWith%2A?displayProperty=fullName> and <xref:System.String.IndexOf%2A?displayProperty=fullName>, also can perform culture-sensitive or ordinal string comparisons. The following example illustrates the differences between ordinal and culture-sensitive comparisons using the <xref:System.String.IndexOf%2A> method. A culture-sensitive search in which the current culture is English (United States) considers the substring \"oe\" to match the ligature \"Å\". Because a soft hyphen (U+00AD) is a zero-width character, the search treats the soft hyphen as equivalent to <xref:System.String.Empty> and finds a match at the beginning of the string. An ordinal search, on the other hand, does not find a match in either case.","pos":[0,769],"nodes":[{"content":"String search methods, such as <ph id=\"ph1\">&lt;xref:System.String.StartsWith%2A?displayProperty=fullName&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.String.IndexOf%2A?displayProperty=fullName&gt;</ph>, also can perform culture-sensitive or ordinal string comparisons.","pos":[0,218],"source":"String search methods, such as <xref:System.String.StartsWith%2A?displayProperty=fullName> and <xref:System.String.IndexOf%2A?displayProperty=fullName>, also can perform culture-sensitive or ordinal string comparisons."},{"content":"The following example illustrates the differences between ordinal and culture-sensitive comparisons using the <ph id=\"ph1\">&lt;xref:System.String.IndexOf%2A&gt;</ph> method.","pos":[219,368],"source":" The following example illustrates the differences between ordinal and culture-sensitive comparisons using the <xref:System.String.IndexOf%2A> method."},{"content":"A culture-sensitive search in which the current culture is English (United States) considers the substring \"oe\" to match the ligature \"Å\".","pos":[369,507]},{"content":"Because a soft hyphen (U+00AD) is a zero-width character, the search treats the soft hyphen as equivalent to <ph id=\"ph1\">&lt;xref:System.String.Empty&gt;</ph> and finds a match at the beginning of the string.","pos":[508,693],"source":" Because a soft hyphen (U+00AD) is a zero-width character, the search treats the soft hyphen as equivalent to <xref:System.String.Empty> and finds a match at the beginning of the string."},{"content":"An ordinal search, on the other hand, does not find a match in either case.","pos":[694,769]}]}]},{"pos":[48465,48851],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>System.String.Class#13<ept id=\"p2\">](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Class/cpp/string.compare3.cpp#13)</ept><ept id=\"p1\">]</ept> <bpt id=\"p3\">[!code-csharp</bpt><bpt id=\"p4\">[</bpt>System.String.Class#13<ept id=\"p4\">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Class/cs/compare3.cs#13)</ept><ept id=\"p3\">]</ept> <bpt id=\"p5\">[!code-vb</bpt><bpt id=\"p6\">[</bpt>System.String.Class#13<ept id=\"p6\">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Class/vb/compare3.vb#13)</ept><ept id=\"p5\">]</ept>","source":"[!code-cpp[System.String.Class#13](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Class/cpp/string.compare3.cpp#13)]\n [!code-csharp[System.String.Class#13](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Class/cs/compare3.cs#13)]\n [!code-vb[System.String.Class#13](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Class/vb/compare3.vb#13)]"},{"pos":[48861,48878],"content":"Searching Strings","linkify":"Searching Strings","nodes":[{"content":"Searching Strings","pos":[0,17]}]},{"pos":[48882,49177],"content":"String search methods, such as <xref:System.String.StartsWith%2A?displayProperty=fullName> and <xref:System.String.IndexOf%2A?displayProperty=fullName>, also can perform culture-sensitive or ordinal string comparisons to determine whether a character or substring is found in a specified string.","nodes":[{"content":"String search methods, such as <ph id=\"ph1\">&lt;xref:System.String.StartsWith%2A?displayProperty=fullName&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.String.IndexOf%2A?displayProperty=fullName&gt;</ph>, also can perform culture-sensitive or ordinal string comparisons to determine whether a character or substring is found in a specified string.","pos":[0,295],"source":"String search methods, such as <xref:System.String.StartsWith%2A?displayProperty=fullName> and <xref:System.String.IndexOf%2A?displayProperty=fullName>, also can perform culture-sensitive or ordinal string comparisons to determine whether a character or substring is found in a specified string."}]},{"pos":[49184,50629],"content":"The search methods in the <xref:System.String> class that search for an individual character, such as the<xref:System.String.IndexOf%2A> method, or one of a set of characters,   such as the <xref:System.String.IndexOfAny%2A> method, all perform an ordinal search. To perform a culture-sensitive search for a character, you must call a <xref:System.Globalization.CompareInfo> method such as <xref:System.Globalization.CompareInfo.IndexOf%28System.String%2CSystem.Char%29?displayProperty=fullName> or <xref:System.Globalization.CompareInfo.LastIndexOf%28System.String%2CSystem.Char%29?displayProperty=fullName>. Note that the results of searching for a character using ordinal and culture-sensitive comparison can be very different. For example, a search for a precomposed Unicode character such as the ligature \"Ã\" (U+00C6) might match any occurrence of its components in the correct sequence, such as \"AE\" (U+041U+0045), depending on the culture. The following example illustrates the difference between the <xref:System.String.IndexOf%28System.Char%29?displayProperty=fullName> and <xref:System.Globalization.CompareInfo.IndexOf%28System.String%2CSystem.Char%29?displayProperty=fullName> methods when searching for an individual character. The ligature \"Ã¦\" (U+00E6) is found in the string \"aerial\" when using the conventions of the en-US culture, but not when using the conventions of the da-DK culture or when performing an ordinal comparison.","nodes":[{"content":"The search methods in the <xref:System.String> class that search for an individual character, such as the<xref:System.String.IndexOf%2A> method, or one of a set of characters,   such as the <xref:System.String.IndexOfAny%2A> method, all perform an ordinal search. To perform a culture-sensitive search for a character, you must call a <xref:System.Globalization.CompareInfo> method such as <xref:System.Globalization.CompareInfo.IndexOf%28System.String%2CSystem.Char%29?displayProperty=fullName> or <xref:System.Globalization.CompareInfo.LastIndexOf%28System.String%2CSystem.Char%29?displayProperty=fullName>. Note that the results of searching for a character using ordinal and culture-sensitive comparison can be very different. For example, a search for a precomposed Unicode character such as the ligature \"Ã\" (U+00C6) might match any occurrence of its components in the correct sequence, such as \"AE\" (U+041U+0045), depending on the culture. The following example illustrates the difference between the <xref:System.String.IndexOf%28System.Char%29?displayProperty=fullName> and <xref:System.Globalization.CompareInfo.IndexOf%28System.String%2CSystem.Char%29?displayProperty=fullName> methods when searching for an individual character. The ligature \"Ã¦\" (U+00E6) is found in the string \"aerial\" when using the conventions of the en-US culture, but not when using the conventions of the da-DK culture or when performing an ordinal comparison.","pos":[0,1445],"nodes":[{"content":"The search methods in the <ph id=\"ph1\">&lt;xref:System.String&gt;</ph> class that search for an individual character, such as the<ph id=\"ph2\">&lt;xref:System.String.IndexOf%2A&gt;</ph> method, or one of a set of characters,   such as the <ph id=\"ph3\">&lt;xref:System.String.IndexOfAny%2A&gt;</ph> method, all perform an ordinal search.","pos":[0,263],"source":"The search methods in the <xref:System.String> class that search for an individual character, such as the<xref:System.String.IndexOf%2A> method, or one of a set of characters,   such as the <xref:System.String.IndexOfAny%2A> method, all perform an ordinal search."},{"content":"To perform a culture-sensitive search for a character, you must call a <ph id=\"ph1\">&lt;xref:System.Globalization.CompareInfo&gt;</ph> method such as <ph id=\"ph2\">&lt;xref:System.Globalization.CompareInfo.IndexOf%28System.String%2CSystem.Char%29?displayProperty=fullName&gt;</ph> or <ph id=\"ph3\">&lt;xref:System.Globalization.CompareInfo.LastIndexOf%28System.String%2CSystem.Char%29?displayProperty=fullName&gt;</ph>.","pos":[264,609],"source":" To perform a culture-sensitive search for a character, you must call a <xref:System.Globalization.CompareInfo> method such as <xref:System.Globalization.CompareInfo.IndexOf%28System.String%2CSystem.Char%29?displayProperty=fullName> or <xref:System.Globalization.CompareInfo.LastIndexOf%28System.String%2CSystem.Char%29?displayProperty=fullName>."},{"content":"Note that the results of searching for a character using ordinal and culture-sensitive comparison can be very different.","pos":[610,730]},{"content":"For example, a search for a precomposed Unicode character such as the ligature \"Ã\" (U+00C6) might match any occurrence of its components in the correct sequence, such as \"AE\" (U+041U+0045), depending on the culture.","pos":[731,946]},{"content":"The following example illustrates the difference between the <ph id=\"ph1\">&lt;xref:System.String.IndexOf%28System.Char%29?displayProperty=fullName&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Globalization.CompareInfo.IndexOf%28System.String%2CSystem.Char%29?displayProperty=fullName&gt;</ph> methods when searching for an individual character.","pos":[947,1240],"source":" The following example illustrates the difference between the <xref:System.String.IndexOf%28System.Char%29?displayProperty=fullName> and <xref:System.Globalization.CompareInfo.IndexOf%28System.String%2CSystem.Char%29?displayProperty=fullName> methods when searching for an individual character."},{"content":"The ligature \"Ã¦\" (U+00E6) is found in the string \"aerial\" when using the conventions of the en-US culture, but not when using the conventions of the da-DK culture or when performing an ordinal comparison.","pos":[1241,1445]}]}]},{"pos":[50636,50889],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>System.String.Class#22<ept id=\"p2\">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Class/cs/search1.cs#22)</ept><ept id=\"p1\">]</ept> <bpt id=\"p3\">[!code-vb</bpt><bpt id=\"p4\">[</bpt>System.String.Class#22<ept id=\"p4\">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Class/vb/search1.vb#22)</ept><ept id=\"p3\">]</ept>","source":"[!code-csharp[System.String.Class#22](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Class/cs/search1.cs#22)]\n [!code-vb[System.String.Class#22](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Class/vb/search1.vb#22)]"},{"pos":[50896,51225],"content":"On the other hand, <xref:System.String> class methods that search for a string rather than a character perform a culture-sensitive search if search options are not explicitly specified by a parameter of type <xref:System.StringComparison>. The sole exception is <xref:System.String.Contains%2A>, which performs an ordinal search.","nodes":[{"content":"On the other hand, <xref:System.String> class methods that search for a string rather than a character perform a culture-sensitive search if search options are not explicitly specified by a parameter of type <xref:System.StringComparison>. The sole exception is <xref:System.String.Contains%2A>, which performs an ordinal search.","pos":[0,329],"nodes":[{"content":"On the other hand, <ph id=\"ph1\">&lt;xref:System.String&gt;</ph> class methods that search for a string rather than a character perform a culture-sensitive search if search options are not explicitly specified by a parameter of type <ph id=\"ph2\">&lt;xref:System.StringComparison&gt;</ph>.","pos":[0,239],"source":"On the other hand, <xref:System.String> class methods that search for a string rather than a character perform a culture-sensitive search if search options are not explicitly specified by a parameter of type <xref:System.StringComparison>."},{"content":"The sole exception is <ph id=\"ph1\">&lt;xref:System.String.Contains%2A&gt;</ph>, which performs an ordinal search.","pos":[240,329],"source":" The sole exception is <xref:System.String.Contains%2A>, which performs an ordinal search."}]}]},{"pos":[51262,51282],"content":"Testing for equality","linkify":"Testing for equality","nodes":[{"content":"Testing for equality","pos":[0,20]}]},{"pos":[51286,51760],"content":"Use the <xref:System.String.Compare%2A?displayProperty=fullName> method to determine the relationship of two strings in the sort order. Typically, this is a culture-sensitive operation. In contrast, call the <xref:System.String.Equals%2A?displayProperty=fullName> method to test for equality. Because the test for equality usually compares user input with some known string, such as a valid user name, a password, or a file system path, it is typically an ordinal operation.","nodes":[{"content":"Use the <xref:System.String.Compare%2A?displayProperty=fullName> method to determine the relationship of two strings in the sort order. Typically, this is a culture-sensitive operation. In contrast, call the <xref:System.String.Equals%2A?displayProperty=fullName> method to test for equality. Because the test for equality usually compares user input with some known string, such as a valid user name, a password, or a file system path, it is typically an ordinal operation.","pos":[0,474],"nodes":[{"content":"Use the <ph id=\"ph1\">&lt;xref:System.String.Compare%2A?displayProperty=fullName&gt;</ph> method to determine the relationship of two strings in the sort order.","pos":[0,135],"source":"Use the <xref:System.String.Compare%2A?displayProperty=fullName> method to determine the relationship of two strings in the sort order."},{"content":"Typically, this is a culture-sensitive operation.","pos":[136,185]},{"content":"In contrast, call the <ph id=\"ph1\">&lt;xref:System.String.Equals%2A?displayProperty=fullName&gt;</ph> method to test for equality.","pos":[186,292],"source":" In contrast, call the <xref:System.String.Equals%2A?displayProperty=fullName> method to test for equality."},{"content":"Because the test for equality usually compares user input with some known string, such as a valid user name, a password, or a file system path, it is typically an ordinal operation.","pos":[293,474]}]}]},{"pos":[51768,52533],"content":"[!WARNING]\n It is possible to test for equality by calling the <xref:System.String.Compare%2A?displayProperty=fullName> method and determining whether the return value is zero. However, this practice is not recommended. To determine whether two strings are equal, you should call one of the overloads of the <xref:System.String.Equals%2A?displayProperty=fullName> method. The preferred overload to call is either the instance <xref:System.String.Equals%28System.String%2CSystem.StringComparison%29> method or the static <xref:System.String.Equals%28System.String%2CSystem.String%2CSystem.StringComparison%29> method, because both methods include a <xref:System.StringComparison?displayProperty=fullName> parameter that explicitly specifies the type of comparison.","leadings":["","> "],"nodes":[{"content":" It is possible to test for equality by calling the <xref:System.String.Compare%2A?displayProperty=fullName> method and determining whether the return value is zero. However, this practice is not recommended. To determine whether two strings are equal, you should call one of the overloads of the <xref:System.String.Equals%2A?displayProperty=fullName> method. The preferred overload to call is either the instance <xref:System.String.Equals%28System.String%2CSystem.StringComparison%29> method or the static <xref:System.String.Equals%28System.String%2CSystem.String%2CSystem.StringComparison%29> method, because both methods include a <xref:System.StringComparison?displayProperty=fullName> parameter that explicitly specifies the type of comparison.","pos":[11,763],"nodes":[{"content":"It is possible to test for equality by calling the <ph id=\"ph1\">&lt;xref:System.String.Compare%2A?displayProperty=fullName&gt;</ph> method and determining whether the return value is zero.","pos":[1,165],"source":" It is possible to test for equality by calling the <xref:System.String.Compare%2A?displayProperty=fullName> method and determining whether the return value is zero."},{"content":"However, this practice is not recommended.","pos":[166,208]},{"content":"To determine whether two strings are equal, you should call one of the overloads of the <ph id=\"ph1\">&lt;xref:System.String.Equals%2A?displayProperty=fullName&gt;</ph> method.","pos":[209,360],"source":" To determine whether two strings are equal, you should call one of the overloads of the <xref:System.String.Equals%2A?displayProperty=fullName> method."},{"content":"The preferred overload to call is either the instance <ph id=\"ph1\">&lt;xref:System.String.Equals%28System.String%2CSystem.StringComparison%29&gt;</ph> method or the static <ph id=\"ph2\">&lt;xref:System.String.Equals%28System.String%2CSystem.String%2CSystem.StringComparison%29&gt;</ph> method, because both methods include a <ph id=\"ph3\">&lt;xref:System.StringComparison?displayProperty=fullName&gt;</ph> parameter that explicitly specifies the type of comparison.","pos":[361,752],"source":" The preferred overload to call is either the instance <xref:System.String.Equals%28System.String%2CSystem.StringComparison%29> method or the static <xref:System.String.Equals%28System.String%2CSystem.String%2CSystem.StringComparison%29> method, because both methods include a <xref:System.StringComparison?displayProperty=fullName> parameter that explicitly specifies the type of comparison."}]}]},{"pos":[52540,53341],"content":"The following example illustrates the danger of performing a culture-sensitive comparison for equality when an ordinal one should be used instead. In this case, the intent of the code is to prohibit file system access from URLs that begin with \"FILE://\" or \"file://\" by performing a case-insensitive comparison of the beginning of a URL with the string \"FILE://\". However, if a culture-sensitive comparison is performed using the Turkish (Turkey) culture on a URL that begins with \"file://\", the comparison for equality fails, because the Turkish uppercase equivalent of the lowercase \"i\" is \"Ä°\" instead of \"I\". As a result, file system access is inadvertently permitted. On the other hand, if an ordinal comparison is performed, the comparison for equality succeeds, and file system access is denied.","nodes":[{"content":"The following example illustrates the danger of performing a culture-sensitive comparison for equality when an ordinal one should be used instead. In this case, the intent of the code is to prohibit file system access from URLs that begin with \"FILE://\" or \"file://\" by performing a case-insensitive comparison of the beginning of a URL with the string \"FILE://\". However, if a culture-sensitive comparison is performed using the Turkish (Turkey) culture on a URL that begins with \"file://\", the comparison for equality fails, because the Turkish uppercase equivalent of the lowercase \"i\" is \"Ä°\" instead of \"I\". As a result, file system access is inadvertently permitted. On the other hand, if an ordinal comparison is performed, the comparison for equality succeeds, and file system access is denied.","pos":[0,801],"nodes":[{"content":"The following example illustrates the danger of performing a culture-sensitive comparison for equality when an ordinal one should be used instead.","pos":[0,146]},{"content":"In this case, the intent of the code is to prohibit file system access from URLs that begin with \"FILE://\" or \"file://\" by performing a case-insensitive comparison of the beginning of a URL with the string \"FILE://\".","pos":[147,363]},{"content":"However, if a culture-sensitive comparison is performed using the Turkish (Turkey) culture on a URL that begins with \"file://\", the comparison for equality fails, because the Turkish uppercase equivalent of the lowercase \"i\" is \"Ä°\" instead of \"I\".","pos":[364,611]},{"content":"As a result, file system access is inadvertently permitted.","pos":[612,671]},{"content":"On the other hand, if an ordinal comparison is performed, the comparison for equality succeeds, and file system access is denied.","pos":[672,801]}]}]},{"pos":[53348,53734],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>System.String.Class#11<ept id=\"p2\">](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Class/cpp/string.equals.cpp#11)</ept><ept id=\"p1\">]</ept> <bpt id=\"p3\">[!code-csharp</bpt><bpt id=\"p4\">[</bpt>System.String.Class#11<ept id=\"p4\">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Class/cs/equality1.cs#11)</ept><ept id=\"p3\">]</ept> <bpt id=\"p5\">[!code-vb</bpt><bpt id=\"p6\">[</bpt>System.String.Class#11<ept id=\"p6\">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Class/vb/equality1.vb#11)</ept><ept id=\"p5\">]</ept>","source":"[!code-cpp[System.String.Class#11](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Class/cpp/string.equals.cpp#11)]\n [!code-csharp[System.String.Class#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Class/cs/equality1.cs#11)]\n [!code-vb[System.String.Class#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Class/vb/equality1.vb#11)]"},{"pos":[53775,53788],"content":"Normalization","linkify":"Normalization","nodes":[{"content":"Normalization","pos":[0,13]}]},{"pos":[53792,53922],"content":"Some Unicode characters have multiple representations. For example, any of the following code points can represent the letter \"áº¯\":","nodes":[{"content":"Some Unicode characters have multiple representations. For example, any of the following code points can represent the letter \"áº¯\":","pos":[0,130],"nodes":[{"content":"Some Unicode characters have multiple representations.","pos":[0,54]},{"content":"For example, any of the following code points can represent the letter \"áº¯\":","pos":[55,130]}]}]},{"pos":[53932,53938],"content":"U+1EAF","nodes":[{"content":"U+1EAF","pos":[0,6]}]},{"pos":[53948,53961],"content":"U+0103 U+0301","nodes":[{"content":"U+0103 U+0301","pos":[0,13]}]},{"pos":[53971,53991],"content":"U+0061 U+0306 U+0301","nodes":[{"content":"U+0061 U+0306 U+0301","pos":[0,20]}]},{"pos":[53998,54115],"content":"Multiple representations for a single character complicate searching, sorting, matching, and other string operations.","nodes":[{"content":"Multiple representations for a single character complicate searching, sorting, matching, and other string operations.","pos":[0,117]}]},{"pos":[54122,54582],"content":"The Unicode standard defines a process called normalization that returns one binary representation of a Unicode character for any of its equivalent binary representations. Normalization can use several algorithms, called normalization forms, that follow different rules. The .NET Framework supports Unicode normalization forms C, D, KC, and KD. When strings have been normalized to the same normalization form, they can be compared by using ordinal comparison.","nodes":[{"content":"The Unicode standard defines a process called normalization that returns one binary representation of a Unicode character for any of its equivalent binary representations. Normalization can use several algorithms, called normalization forms, that follow different rules. The .NET Framework supports Unicode normalization forms C, D, KC, and KD. When strings have been normalized to the same normalization form, they can be compared by using ordinal comparison.","pos":[0,460],"nodes":[{"content":"The Unicode standard defines a process called normalization that returns one binary representation of a Unicode character for any of its equivalent binary representations.","pos":[0,171]},{"content":"Normalization can use several algorithms, called normalization forms, that follow different rules.","pos":[172,270]},{"content":"The .NET Framework supports Unicode normalization forms C, D, KC, and KD.","pos":[271,344]},{"content":"When strings have been normalized to the same normalization form, they can be compared by using ordinal comparison.","pos":[345,460]}]}]},{"pos":[54589,54845],"content":"An ordinal comparison is a binary comparison of the Unicode scalar value of corresponding <xref:System.Char> objects in each string. The<xref:System.String> class includes a number of methods that can perform an ordinal comparison, including the following:","nodes":[{"content":"An ordinal comparison is a binary comparison of the Unicode scalar value of corresponding <xref:System.Char> objects in each string. The<xref:System.String> class includes a number of methods that can perform an ordinal comparison, including the following:","pos":[0,256],"nodes":[{"content":"An ordinal comparison is a binary comparison of the Unicode scalar value of corresponding <ph id=\"ph1\">&lt;xref:System.Char&gt;</ph> objects in each string.","pos":[0,132],"source":"An ordinal comparison is a binary comparison of the Unicode scalar value of corresponding <xref:System.Char> objects in each string."},{"content":"The<ph id=\"ph1\">&lt;xref:System.String&gt;</ph> class includes a number of methods that can perform an ordinal comparison, including the following:","pos":[133,256],"source":" The<xref:System.String> class includes a number of methods that can perform an ordinal comparison, including the following:"}]}]},{"pos":[54855,55343],"content":"Any overload of the <xref:System.String.Compare%2A>, <xref:System.String.Equals%2A>, <xref:System.String.StartsWith%2A>,  <xref:System.String.EndsWith%2A>, <xref:System.String.IndexOf%2A>,and <xref:System.String.LastIndexOf%2A> methods that includes a <xref:System.StringComparison> parameter. The method performs an ordinal comparison if you supply a value of <xref:System.StringComparison?displayProperty=fullName> or <xref:System.StringComparison.OrdinalIgnoreCase> for this parameter.","nodes":[{"content":"Any overload of the <xref:System.String.Compare%2A>, <xref:System.String.Equals%2A>, <xref:System.String.StartsWith%2A>,  <xref:System.String.EndsWith%2A>, <xref:System.String.IndexOf%2A>,and <xref:System.String.LastIndexOf%2A> methods that includes a <xref:System.StringComparison> parameter. The method performs an ordinal comparison if you supply a value of <xref:System.StringComparison?displayProperty=fullName> or <xref:System.StringComparison.OrdinalIgnoreCase> for this parameter.","pos":[0,488],"nodes":[{"content":"Any overload of the <ph id=\"ph1\">&lt;xref:System.String.Compare%2A&gt;</ph>, <ph id=\"ph2\">&lt;xref:System.String.Equals%2A&gt;</ph>, <ph id=\"ph3\">&lt;xref:System.String.StartsWith%2A&gt;</ph>,  <ph id=\"ph4\">&lt;xref:System.String.EndsWith%2A&gt;</ph>, <ph id=\"ph5\">&lt;xref:System.String.IndexOf%2A&gt;</ph>,and <ph id=\"ph6\">&lt;xref:System.String.LastIndexOf%2A&gt;</ph> methods that includes a <ph id=\"ph7\">&lt;xref:System.StringComparison&gt;</ph> parameter.","pos":[0,293],"source":"Any overload of the <xref:System.String.Compare%2A>, <xref:System.String.Equals%2A>, <xref:System.String.StartsWith%2A>,  <xref:System.String.EndsWith%2A>, <xref:System.String.IndexOf%2A>,and <xref:System.String.LastIndexOf%2A> methods that includes a <xref:System.StringComparison> parameter."},{"content":"The method performs an ordinal comparison if you supply a value of <ph id=\"ph1\">&lt;xref:System.StringComparison?displayProperty=fullName&gt;</ph> or <ph id=\"ph2\">&lt;xref:System.StringComparison.OrdinalIgnoreCase&gt;</ph> for this parameter.","pos":[294,488],"source":" The method performs an ordinal comparison if you supply a value of <xref:System.StringComparison?displayProperty=fullName> or <xref:System.StringComparison.OrdinalIgnoreCase> for this parameter."}]}]},{"pos":[55353,55420],"content":"The overloads of the <xref:System.String.CompareOrdinal%2A> method.","nodes":[{"content":"The overloads of the <ph id=\"ph1\">&lt;xref:System.String.CompareOrdinal%2A&gt;</ph> method.","pos":[0,67],"source":"The overloads of the <xref:System.String.CompareOrdinal%2A> method."}]},{"pos":[55430,55587],"content":"Methods that use ordinal comparison by default, such as <xref:System.String.Contains%2A>, <xref:System.String.Replace%2A>, and <xref:System.String.Split%2A>.","nodes":[{"content":"Methods that use ordinal comparison by default, such as <ph id=\"ph1\">&lt;xref:System.String.Contains%2A&gt;</ph>, <ph id=\"ph2\">&lt;xref:System.String.Replace%2A&gt;</ph>, and <ph id=\"ph3\">&lt;xref:System.String.Split%2A&gt;</ph>.","pos":[0,157],"source":"Methods that use ordinal comparison by default, such as <xref:System.String.Contains%2A>, <xref:System.String.Replace%2A>, and <xref:System.String.Split%2A>."}]},{"pos":[55597,55839],"content":"Methods that search for a <xref:System.Char>value or for the elements in a <xref:System.Char> arrayin a string instance. Such methods include <xref:System.String.IndexOf%28System.Char%29> and <xref:System.String.Split%28System.Char%5B%5D%29>.","nodes":[{"content":"Methods that search for a <xref:System.Char>value or for the elements in a <xref:System.Char> arrayin a string instance. Such methods include <xref:System.String.IndexOf%28System.Char%29> and <xref:System.String.Split%28System.Char%5B%5D%29>.","pos":[0,242],"nodes":[{"content":"Methods that search for a <ph id=\"ph1\">&lt;xref:System.Char&gt;</ph>value or for the elements in a <ph id=\"ph2\">&lt;xref:System.Char&gt;</ph> arrayin a string instance.","pos":[0,120],"source":"Methods that search for a <xref:System.Char>value or for the elements in a <xref:System.Char> arrayin a string instance."},{"content":"Such methods include <ph id=\"ph1\">&lt;xref:System.String.IndexOf%28System.Char%29&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.String.Split%28System.Char%5B%5D%29&gt;</ph>.","pos":[121,242],"source":" Such methods include <xref:System.String.IndexOf%28System.Char%29> and <xref:System.String.Split%28System.Char%5B%5D%29>."}]}]},{"pos":[55846,56691],"content":"You can determine whether a string is normalized to normalization form C by calling the <xref:System.String.IsNormalized?displayProperty=fullName> method, or you can call the <xref:System.String.IsNormalized%28System.Text.NormalizationForm%29?displayProperty=fullName> method to determine whether a string is normalized to a specified normalization form. You can also call the <xref:System.String.Normalize?displayProperty=fullName> method to convert a string to normalization form C, or you can call the <xref:System.String.Normalize%28System.Text.NormalizationForm%29?displayProperty=fullName> method to convert a string to a specified normalization form. For step-by-step information about normalizing and comparing strings, see the <xref:System.String.Normalize> and <xref:System.String.Normalize%28System.Text.NormalizationForm%29> methods.","nodes":[{"content":"You can determine whether a string is normalized to normalization form C by calling the <xref:System.String.IsNormalized?displayProperty=fullName> method, or you can call the <xref:System.String.IsNormalized%28System.Text.NormalizationForm%29?displayProperty=fullName> method to determine whether a string is normalized to a specified normalization form. You can also call the <xref:System.String.Normalize?displayProperty=fullName> method to convert a string to normalization form C, or you can call the <xref:System.String.Normalize%28System.Text.NormalizationForm%29?displayProperty=fullName> method to convert a string to a specified normalization form. For step-by-step information about normalizing and comparing strings, see the <xref:System.String.Normalize> and <xref:System.String.Normalize%28System.Text.NormalizationForm%29> methods.","pos":[0,845],"nodes":[{"content":"You can determine whether a string is normalized to normalization form C by calling the <ph id=\"ph1\">&lt;xref:System.String.IsNormalized?displayProperty=fullName&gt;</ph> method, or you can call the <ph id=\"ph2\">&lt;xref:System.String.IsNormalized%28System.Text.NormalizationForm%29?displayProperty=fullName&gt;</ph> method to determine whether a string is normalized to a specified normalization form.","pos":[0,354],"source":"You can determine whether a string is normalized to normalization form C by calling the <xref:System.String.IsNormalized?displayProperty=fullName> method, or you can call the <xref:System.String.IsNormalized%28System.Text.NormalizationForm%29?displayProperty=fullName> method to determine whether a string is normalized to a specified normalization form."},{"content":"You can also call the <ph id=\"ph1\">&lt;xref:System.String.Normalize?displayProperty=fullName&gt;</ph> method to convert a string to normalization form C, or you can call the <ph id=\"ph2\">&lt;xref:System.String.Normalize%28System.Text.NormalizationForm%29?displayProperty=fullName&gt;</ph> method to convert a string to a specified normalization form.","pos":[355,657],"source":" You can also call the <xref:System.String.Normalize?displayProperty=fullName> method to convert a string to normalization form C, or you can call the <xref:System.String.Normalize%28System.Text.NormalizationForm%29?displayProperty=fullName> method to convert a string to a specified normalization form."},{"content":"For step-by-step information about normalizing and comparing strings, see the <ph id=\"ph1\">&lt;xref:System.String.Normalize&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.String.Normalize%28System.Text.NormalizationForm%29&gt;</ph> methods.","pos":[658,845],"source":" For step-by-step information about normalizing and comparing strings, see the <xref:System.String.Normalize> and <xref:System.String.Normalize%28System.Text.NormalizationForm%29> methods."}]}]},{"pos":[56698,57183],"content":"The following simple example illustrates string normalization. It defines the letter \"á»\" in three different ways in three different strings, and uses an ordinal comparison for equality to determine that each string differs from the other two strings. It then converts each string to the supported normalization forms, and again performs an ordinal comparison of each string in a specified normalization form. In each case, the second test for equality shows that the strings are equal.","nodes":[{"content":"The following simple example illustrates string normalization. It defines the letter \"á»\" in three different ways in three different strings, and uses an ordinal comparison for equality to determine that each string differs from the other two strings. It then converts each string to the supported normalization forms, and again performs an ordinal comparison of each string in a specified normalization form. In each case, the second test for equality shows that the strings are equal.","pos":[0,485],"nodes":[{"content":"The following simple example illustrates string normalization.","pos":[0,62]},{"content":"It defines the letter \"á»\" in three different ways in three different strings, and uses an ordinal comparison for equality to determine that each string differs from the other two strings.","pos":[63,250]},{"content":"It then converts each string to the supported normalization forms, and again performs an ordinal comparison of each string in a specified normalization form.","pos":[251,408]},{"content":"In each case, the second test for equality shows that the strings are equal.","pos":[409,485]}]}]},{"pos":[57190,57581],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>System.String.Class#14<ept id=\"p2\">](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Class/cpp/string.normalize.cpp#14)</ept><ept id=\"p1\">]</ept> <bpt id=\"p3\">[!code-csharp</bpt><bpt id=\"p4\">[</bpt>System.String.Class#14<ept id=\"p4\">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Class/cs/normalize1.cs#14)</ept><ept id=\"p3\">]</ept> <bpt id=\"p5\">[!code-vb</bpt><bpt id=\"p6\">[</bpt>System.String.Class#14<ept id=\"p6\">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Class/vb/normalize1.vb#14)</ept><ept id=\"p5\">]</ept>","leadings":[""," "," "],"source":"[!code-cpp[System.String.Class#14](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Class/cpp/string.normalize.cpp#14)]\n[!code-csharp[System.String.Class#14](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Class/cs/normalize1.cs#14)]\n[!code-vb[System.String.Class#14](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Class/vb/normalize1.vb#14)]"},{"pos":[57588,57926],"content":"For more information about normalization and normalization forms, see <ph id=\"ph1\">&lt;xref:System.Text.NormalizationForm?displayProperty=fullName&gt;</ph>, as well as <bpt id=\"p1\">[</bpt>Unicode Standard Annex #15: Unicode Normalization Forms<ept id=\"p1\">](http://unicode.org/reports/tr15/)</ept> and the <bpt id=\"p2\">[</bpt>Normalization FAQ<ept id=\"p2\">](http://www.unicode.org/faq/normalization.html)</ept> on the unicode.org website.","source":"For more information about normalization and normalization forms, see <xref:System.Text.NormalizationForm?displayProperty=fullName>, as well as [Unicode Standard Annex #15: Unicode Normalization Forms](http://unicode.org/reports/tr15/) and the [Normalization FAQ](http://www.unicode.org/faq/normalization.html) on the unicode.org website."},{"pos":[57964,57993],"content":"String operations by category","linkify":"String operations by category","nodes":[{"content":"String operations by category","pos":[0,29]}]},{"pos":[57997,58282],"content":"The <xref:System.String> class provides members for comparing strings, testing strings for equality, finding characters or substrings in a string, modifying a string, extracting substrings from a string, combining strings, formatting values, copying a string, and normalizing a string.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.String&gt;</ph> class provides members for comparing strings, testing strings for equality, finding characters or substrings in a string, modifying a string, extracting substrings from a string, combining strings, formatting values, copying a string, and normalizing a string.","pos":[0,285],"source":"The <xref:System.String> class provides members for comparing strings, testing strings for equality, finding characters or substrings in a string, modifying a string, extracting substrings from a string, combining strings, formatting values, copying a string, and normalizing a string."}]},{"pos":[58292,58309],"content":"Comparing strings","linkify":"Comparing strings","nodes":[{"content":"Comparing strings","pos":[0,17]}]},{"pos":[58313,58443],"content":"You can compare strings to determine their relative position in the sort order by using the following <xref:System.String>methods:","nodes":[{"content":"You can compare strings to determine their relative position in the sort order by using the following <ph id=\"ph1\">&lt;xref:System.String&gt;</ph>methods:","pos":[0,130],"source":"You can compare strings to determine their relative position in the sort order by using the following <xref:System.String>methods:"}]},{"pos":[58453,58587],"content":"<xref:System.String.Compare%2A> returns an integer that indicates the relationship of one string to a second string in the sort order.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.String.Compare%2A&gt;</ph> returns an integer that indicates the relationship of one string to a second string in the sort order.","pos":[0,134],"source":"<xref:System.String.Compare%2A> returns an integer that indicates the relationship of one string to a second string in the sort order."}]},{"pos":[58597,58763],"content":"<xref:System.String.CompareOrdinal%2A> returns an integer that indicates the relationship of one string to a second string based on a comparison of their code points.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.String.CompareOrdinal%2A&gt;</ph> returns an integer that indicates the relationship of one string to a second string based on a comparison of their code points.","pos":[0,166],"source":"<xref:System.String.CompareOrdinal%2A> returns an integer that indicates the relationship of one string to a second string based on a comparison of their code points."}]},{"pos":[58773,59112],"content":"<xref:System.String.CompareTo%2A> returns an integer that indicates the relationship of the current string instance to a second string in the sort order. The <xref:System.String.CompareTo%28System.String%29> method provides the <xref:System.IComparable> and <xref:System.IComparable%601> implementations for the <xref:System.String> class.","nodes":[{"content":"<xref:System.String.CompareTo%2A> returns an integer that indicates the relationship of the current string instance to a second string in the sort order. The <xref:System.String.CompareTo%28System.String%29> method provides the <xref:System.IComparable> and <xref:System.IComparable%601> implementations for the <xref:System.String> class.","pos":[0,339],"nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.String.CompareTo%2A&gt;</ph> returns an integer that indicates the relationship of the current string instance to a second string in the sort order.","pos":[0,153],"source":"<xref:System.String.CompareTo%2A> returns an integer that indicates the relationship of the current string instance to a second string in the sort order."},{"content":"The <ph id=\"ph1\">&lt;xref:System.String.CompareTo%28System.String%29&gt;</ph> method provides the <ph id=\"ph2\">&lt;xref:System.IComparable&gt;</ph> and <ph id=\"ph3\">&lt;xref:System.IComparable%601&gt;</ph> implementations for the <ph id=\"ph4\">&lt;xref:System.String&gt;</ph> class.","pos":[154,339],"source":" The <xref:System.String.CompareTo%28System.String%29> method provides the <xref:System.IComparable> and <xref:System.IComparable%601> implementations for the <xref:System.String> class."}]}]},{"pos":[59122,59150],"content":"Testing strings for equality","linkify":"Testing strings for equality","nodes":[{"content":"Testing strings for equality","pos":[0,28]}]},{"pos":[59154,59729],"content":"You call the <xref:System.String.Equals%2A> method to determine whether two strings are equal. The instance <xref:System.String.Equals%28System.String%2CSystem.String%2CSystem.StringComparison%29> and the static <xref:System.String.Equals%28System.String%2CSystem.StringComparison%29> overloads let you specify whether the comparison is culture-sensitive or ordinal, and whether case is considered or ignored. Most tests for equality are ordinal, and comparisons for equality that determine access to a system resource (such as a file system object) should always be ordinal.","nodes":[{"content":"You call the <xref:System.String.Equals%2A> method to determine whether two strings are equal. The instance <xref:System.String.Equals%28System.String%2CSystem.String%2CSystem.StringComparison%29> and the static <xref:System.String.Equals%28System.String%2CSystem.StringComparison%29> overloads let you specify whether the comparison is culture-sensitive or ordinal, and whether case is considered or ignored. Most tests for equality are ordinal, and comparisons for equality that determine access to a system resource (such as a file system object) should always be ordinal.","pos":[0,575],"nodes":[{"content":"You call the <ph id=\"ph1\">&lt;xref:System.String.Equals%2A&gt;</ph> method to determine whether two strings are equal.","pos":[0,94],"source":"You call the <xref:System.String.Equals%2A> method to determine whether two strings are equal."},{"content":"The instance <ph id=\"ph1\">&lt;xref:System.String.Equals%28System.String%2CSystem.String%2CSystem.StringComparison%29&gt;</ph> and the static <ph id=\"ph2\">&lt;xref:System.String.Equals%28System.String%2CSystem.StringComparison%29&gt;</ph> overloads let you specify whether the comparison is culture-sensitive or ordinal, and whether case is considered or ignored.","pos":[95,409],"source":" The instance <xref:System.String.Equals%28System.String%2CSystem.String%2CSystem.StringComparison%29> and the static <xref:System.String.Equals%28System.String%2CSystem.StringComparison%29> overloads let you specify whether the comparison is culture-sensitive or ordinal, and whether case is considered or ignored."},{"content":"Most tests for equality are ordinal, and comparisons for equality that determine access to a system resource (such as a file system object) should always be ordinal.","pos":[410,575]}]}]},{"pos":[59739,59769],"content":"Finding characters in a string","linkify":"Finding characters in a string","nodes":[{"content":"Finding characters in a string","pos":[0,30]}]},{"pos":[59773,59841],"content":"The <xref:System.String> class includes two kinds of search methods:","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.String&gt;</ph> class includes two kinds of search methods:","pos":[0,68],"source":"The <xref:System.String> class includes two kinds of search methods:"}]},{"pos":[59851,60110],"content":"Methods that return a <xref:System.Boolean> value to indicate whether a particular substring is present in a string instance. These include the <xref:System.String.Contains%2A>, <xref:System.String.EndsWith%2A>, and <xref:System.String.StartsWith%2A> methods.","nodes":[{"content":"Methods that return a <xref:System.Boolean> value to indicate whether a particular substring is present in a string instance. These include the <xref:System.String.Contains%2A>, <xref:System.String.EndsWith%2A>, and <xref:System.String.StartsWith%2A> methods.","pos":[0,259],"nodes":[{"content":"Methods that return a <ph id=\"ph1\">&lt;xref:System.Boolean&gt;</ph> value to indicate whether a particular substring is present in a string instance.","pos":[0,125],"source":"Methods that return a <xref:System.Boolean> value to indicate whether a particular substring is present in a string instance."},{"content":"These include the <ph id=\"ph1\">&lt;xref:System.String.Contains%2A&gt;</ph>, <ph id=\"ph2\">&lt;xref:System.String.EndsWith%2A&gt;</ph>, and <ph id=\"ph3\">&lt;xref:System.String.StartsWith%2A&gt;</ph> methods.","pos":[126,259],"source":" These include the <xref:System.String.Contains%2A>, <xref:System.String.EndsWith%2A>, and <xref:System.String.StartsWith%2A> methods."}]}]},{"pos":[60120,60376],"content":"Methods that indicate the starting position of a substring in a string instance. These include the <xref:System.String.IndexOf%2A>, <xref:System.String.IndexOfAny%2A>, <xref:System.String.LastIndexOf%2A>, and <xref:System.String.LastIndexOfAny%2A> methods.","nodes":[{"content":"Methods that indicate the starting position of a substring in a string instance. These include the <xref:System.String.IndexOf%2A>, <xref:System.String.IndexOfAny%2A>, <xref:System.String.LastIndexOf%2A>, and <xref:System.String.LastIndexOfAny%2A> methods.","pos":[0,256],"nodes":[{"content":"Methods that indicate the starting position of a substring in a string instance.","pos":[0,80]},{"content":"These include the <ph id=\"ph1\">&lt;xref:System.String.IndexOf%2A&gt;</ph>, <ph id=\"ph2\">&lt;xref:System.String.IndexOfAny%2A&gt;</ph>, <ph id=\"ph3\">&lt;xref:System.String.LastIndexOf%2A&gt;</ph>, and <ph id=\"ph4\">&lt;xref:System.String.LastIndexOfAny%2A&gt;</ph> methods.","pos":[81,256],"source":" These include the <xref:System.String.IndexOf%2A>, <xref:System.String.IndexOfAny%2A>, <xref:System.String.LastIndexOf%2A>, and <xref:System.String.LastIndexOfAny%2A> methods."}]}]},{"pos":[60384,60638],"content":"[!WARNING]\n If you want to search a string for a particular pattern rather than a specific substring, you should use regular expressions. For more information, see [.NET Framework Regular Expressions](~/docs/standard/base-types/regular-expressions.md).","leadings":["","> "],"nodes":[{"content":" If you want to search a string for a particular pattern rather than a specific substring, you should use regular expressions. For more information, see [.NET Framework Regular Expressions](~/docs/standard/base-types/regular-expressions.md).","pos":[11,252],"nodes":[{"content":"If you want to search a string for a particular pattern rather than a specific substring, you should use regular expressions.","pos":[1,126]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>.NET Framework Regular Expressions<ept id=\"p1\">](~/docs/standard/base-types/regular-expressions.md)</ept>.","pos":[127,241],"source":" For more information, see [.NET Framework Regular Expressions](~/docs/standard/base-types/regular-expressions.md)."}]}]},{"pos":[60648,60666],"content":"Modifying a string","linkify":"Modifying a string","nodes":[{"content":"Modifying a string","pos":[0,18]}]},{"pos":[60670,60776],"content":"The <xref:System.String> class includes the following methods that appear to modify the value of a string:","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.String&gt;</ph> class includes the following methods that appear to modify the value of a string:","pos":[0,106],"source":"The <xref:System.String> class includes the following methods that appear to modify the value of a string:"}]},{"pos":[60786,60881],"content":"<xref:System.String.Insert%2A> inserts a string into the current <xref:System.String> instance.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.String.Insert%2A&gt;</ph> inserts a string into the current <ph id=\"ph2\">&lt;xref:System.String&gt;</ph> instance.","pos":[0,95],"source":"<xref:System.String.Insert%2A> inserts a string into the current <xref:System.String> instance."}]},{"pos":[60891,61009],"content":"<xref:System.String.PadLeft%2A> inserts one or more occurrences of a specified character at the beginning of a string.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.String.PadLeft%2A&gt;</ph> inserts one or more occurrences of a specified character at the beginning of a string.","pos":[0,118],"source":"<xref:System.String.PadLeft%2A> inserts one or more occurrences of a specified character at the beginning of a string."}]},{"pos":[61019,61138],"content":"<xref:System.String.PadRight%2A> inserts one or more occurrences of a specified character at the beginning of a string.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.String.PadRight%2A&gt;</ph> inserts one or more occurrences of a specified character at the beginning of a string.","pos":[0,119],"source":"<xref:System.String.PadRight%2A> inserts one or more occurrences of a specified character at the beginning of a string."}]},{"pos":[61148,61246],"content":"<xref:System.String.Remove%2A> deletes a substring from the current <xref:System.String> instance.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.String.Remove%2A&gt;</ph> deletes a substring from the current <ph id=\"ph2\">&lt;xref:System.String&gt;</ph> instance.","pos":[0,98],"source":"<xref:System.String.Remove%2A> deletes a substring from the current <xref:System.String> instance."}]},{"pos":[61256,61377],"content":"<xref:System.String.Replace%2A> replaces a substring with another substring in the current <xref:System.String> instance.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.String.Replace%2A&gt;</ph> replaces a substring with another substring in the current <ph id=\"ph2\">&lt;xref:System.String&gt;</ph> instance.","pos":[0,121],"source":"<xref:System.String.Replace%2A> replaces a substring with another substring in the current <xref:System.String> instance."}]},{"pos":[61387,61516],"content":"<xref:System.String.ToLower%2A> and <xref:System.String.ToLowerInvariant%2A> convert all the characters in a string to lowercase.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.String.ToLower%2A&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.String.ToLowerInvariant%2A&gt;</ph> convert all the characters in a string to lowercase.","pos":[0,129],"source":"<xref:System.String.ToLower%2A> and <xref:System.String.ToLowerInvariant%2A> convert all the characters in a string to lowercase."}]},{"pos":[61526,61655],"content":"<xref:System.String.ToUpper%2A> and <xref:System.String.ToUpperInvariant%2A> convert all the characters in a string to uppercase.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.String.ToUpper%2A&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.String.ToUpperInvariant%2A&gt;</ph> convert all the characters in a string to uppercase.","pos":[0,129],"source":"<xref:System.String.ToUpper%2A> and <xref:System.String.ToUpperInvariant%2A> convert all the characters in a string to uppercase."}]},{"pos":[61665,61772],"content":"<xref:System.String.Trim%2A> removes all occurrences of a character from the beginning and end of a string.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.String.Trim%2A&gt;</ph> removes all occurrences of a character from the beginning and end of a string.","pos":[0,107],"source":"<xref:System.String.Trim%2A> removes all occurrences of a character from the beginning and end of a string."}]},{"pos":[61782,61878],"content":"<xref:System.String.TrimEnd%2A> removes all occurrences of a character from the end of a string.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.String.TrimEnd%2A&gt;</ph> removes all occurrences of a character from the end of a string.","pos":[0,96],"source":"<xref:System.String.TrimEnd%2A> removes all occurrences of a character from the end of a string."}]},{"pos":[61888,61992],"content":"<xref:System.String.TrimStart%2A> removes all occurrences of a character from the beginning of a string.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.String.TrimStart%2A&gt;</ph> removes all occurrences of a character from the beginning of a string.","pos":[0,104],"source":"<xref:System.String.TrimStart%2A> removes all occurrences of a character from the beginning of a string."}]},{"pos":[62000,62143],"content":"[!IMPORTANT]\n All string modification methods return a new <xref:System.String> object. They do not modify the value of the current instance.","leadings":["","> "],"nodes":[{"content":" All string modification methods return a new <xref:System.String> object. They do not modify the value of the current instance.","pos":[13,141],"nodes":[{"content":"All string modification methods return a new <ph id=\"ph1\">&lt;xref:System.String&gt;</ph> object.","pos":[1,74],"source":" All string modification methods return a new <xref:System.String> object."},{"content":"They do not modify the value of the current instance.","pos":[75,128]}]}]},{"pos":[62153,62188],"content":"Extracting substrings from a string","linkify":"Extracting substrings from a string","nodes":[{"content":"Extracting substrings from a string","pos":[0,35]}]},{"pos":[62192,62567],"content":"The <xref:System.String.Split%2A?displayProperty=fullName> method separates a single string into multiple strings. Overloads of the method allow you to specify multiple delimiters, to determine the maximum number of substrings that the method extracts, and to determine whether empty strings (which occur when delimiters are adjacent) are included among the returned strings.","nodes":[{"content":"The <xref:System.String.Split%2A?displayProperty=fullName> method separates a single string into multiple strings. Overloads of the method allow you to specify multiple delimiters, to determine the maximum number of substrings that the method extracts, and to determine whether empty strings (which occur when delimiters are adjacent) are included among the returned strings.","pos":[0,375],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.String.Split%2A?displayProperty=fullName&gt;</ph> method separates a single string into multiple strings.","pos":[0,114],"source":"The <xref:System.String.Split%2A?displayProperty=fullName> method separates a single string into multiple strings."},{"content":"Overloads of the method allow you to specify multiple delimiters, to determine the maximum number of substrings that the method extracts, and to determine whether empty strings (which occur when delimiters are adjacent) are included among the returned strings.","pos":[115,375]}]}]},{"pos":[62577,62594],"content":"Combining strings","linkify":"Combining strings","nodes":[{"content":"Combining strings","pos":[0,17]}]},{"pos":[62598,62678],"content":"The following <xref:System.String> methods can be used for string concatenation:","nodes":[{"content":"The following <ph id=\"ph1\">&lt;xref:System.String&gt;</ph> methods can be used for string concatenation:","pos":[0,80],"source":"The following <xref:System.String> methods can be used for string concatenation:"}]},{"pos":[62688,62772],"content":"<xref:System.String.Concat%2A> combines one or more substrings into a single string.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.String.Concat%2A&gt;</ph> combines one or more substrings into a single string.","pos":[0,84],"source":"<xref:System.String.Concat%2A> combines one or more substrings into a single string."}]},{"pos":[62782,62913],"content":"<xref:System.String.Join%2A> concatenates one or more substrings into a single element and adds a separator between each substring.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.String.Join%2A&gt;</ph> concatenates one or more substrings into a single element and adds a separator between each substring.","pos":[0,131],"source":"<xref:System.String.Join%2A> concatenates one or more substrings into a single element and adds a separator between each substring."}]},{"pos":[62923,62940],"content":"Formatting values","linkify":"Formatting values","nodes":[{"content":"Formatting values","pos":[0,17]}]},{"pos":[62944,63229],"content":"The <xref:System.String.Format%2A?displayProperty=fullName> method uses the composite formatting feature to replace one or more placeholders in a string with the string representation of some object or value. The <xref:System.String.Format%2A> method is often used to do the following:","nodes":[{"content":"The <xref:System.String.Format%2A?displayProperty=fullName> method uses the composite formatting feature to replace one or more placeholders in a string with the string representation of some object or value. The <xref:System.String.Format%2A> method is often used to do the following:","pos":[0,285],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.String.Format%2A?displayProperty=fullName&gt;</ph> method uses the composite formatting feature to replace one or more placeholders in a string with the string representation of some object or value.","pos":[0,208],"source":"The <xref:System.String.Format%2A?displayProperty=fullName> method uses the composite formatting feature to replace one or more placeholders in a string with the string representation of some object or value."},{"content":"The <ph id=\"ph1\">&lt;xref:System.String.Format%2A&gt;</ph> method is often used to do the following:","pos":[209,285],"source":" The <xref:System.String.Format%2A> method is often used to do the following:"}]}]},{"pos":[63239,63305],"content":"To embed the string representation of a numeric value in a string.","nodes":[{"content":"To embed the string representation of a numeric value in a string.","pos":[0,66]}]},{"pos":[63315,63387],"content":"To embed the string representation of a date and time value in a string.","nodes":[{"content":"To embed the string representation of a date and time value in a string.","pos":[0,72]}]},{"pos":[63397,63468],"content":"To embed the string representation of an enumeration value in a string.","nodes":[{"content":"To embed the string representation of an enumeration value in a string.","pos":[0,71]}]},{"pos":[63478,63595],"content":"To embed the string representation of some object that supports the <xref:System.IFormattable> interface in a string.","nodes":[{"content":"To embed the string representation of some object that supports the <ph id=\"ph1\">&lt;xref:System.IFormattable&gt;</ph> interface in a string.","pos":[0,117],"source":"To embed the string representation of some object that supports the <xref:System.IFormattable> interface in a string."}]},{"pos":[63605,63684],"content":"To right-justify or left-justify a substring in a field within a larger string.","nodes":[{"content":"To right-justify or left-justify a substring in a field within a larger string.","pos":[0,79]}]},{"pos":[63691,63814],"content":"For detailed information about formatting operations and examples, see the <xref:System.String.Format%2A> overload summary.","nodes":[{"content":"For detailed information about formatting operations and examples, see the <ph id=\"ph1\">&lt;xref:System.String.Format%2A&gt;</ph> overload summary.","pos":[0,123],"source":"For detailed information about formatting operations and examples, see the <xref:System.String.Format%2A> overload summary."}]},{"pos":[63824,63840],"content":"Copying a string","linkify":"Copying a string","nodes":[{"content":"Copying a string","pos":[0,16]}]},{"pos":[63844,63927],"content":"You can call the following <xref:System.String> methods to make a copy of a string:","nodes":[{"content":"You can call the following <ph id=\"ph1\">&lt;xref:System.String&gt;</ph> methods to make a copy of a string:","pos":[0,83],"source":"You can call the following <xref:System.String> methods to make a copy of a string:"}]},{"pos":[63937,64030],"content":"<xref:System.String.Clone%2A> returns a reference to an existing <xref:System.String> object.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.String.Clone%2A&gt;</ph> returns a reference to an existing <ph id=\"ph2\">&lt;xref:System.String&gt;</ph> object.","pos":[0,93],"source":"<xref:System.String.Clone%2A> returns a reference to an existing <xref:System.String> object."}]},{"pos":[64040,64106],"content":"<xref:System.String.Copy%2A> creates a copy of an existing string.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.String.Copy%2A&gt;</ph> creates a copy of an existing string.","pos":[0,66],"source":"<xref:System.String.Copy%2A> creates a copy of an existing string."}]},{"pos":[64116,64197],"content":"<xref:System.String.CopyTo%2A> copies a portion of a string to a character array.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.String.CopyTo%2A&gt;</ph> copies a portion of a string to a character array.","pos":[0,81],"source":"<xref:System.String.CopyTo%2A> copies a portion of a string to a character array."}]},{"pos":[64207,64227],"content":"Normalizing a string","linkify":"Normalizing a string","nodes":[{"content":"Normalizing a string","pos":[0,20]}]},{"pos":[64231,64598],"content":"In Unicode, a single character can have multiple code points. Normalization converts these equivalent characters into the same binary representation. The <xref:System.String.Normalize%2A?displayProperty=fullName> method performs the normalization, and the <xref:System.String.IsNormalized%2A?displayProperty=fullName> method determines whether a string is normalized.","nodes":[{"content":"In Unicode, a single character can have multiple code points. Normalization converts these equivalent characters into the same binary representation. The <xref:System.String.Normalize%2A?displayProperty=fullName> method performs the normalization, and the <xref:System.String.IsNormalized%2A?displayProperty=fullName> method determines whether a string is normalized.","pos":[0,367],"nodes":[{"content":"In Unicode, a single character can have multiple code points.","pos":[0,61]},{"content":"Normalization converts these equivalent characters into the same binary representation.","pos":[62,149]},{"content":"The <ph id=\"ph1\">&lt;xref:System.String.Normalize%2A?displayProperty=fullName&gt;</ph> method performs the normalization, and the <ph id=\"ph2\">&lt;xref:System.String.IsNormalized%2A?displayProperty=fullName&gt;</ph> method determines whether a string is normalized.","pos":[150,367],"source":" The <xref:System.String.Normalize%2A?displayProperty=fullName> method performs the normalization, and the <xref:System.String.IsNormalized%2A?displayProperty=fullName> method determines whether a string is normalized."}]}]},{"pos":[64605,64712],"content":"For more information and an example, see the <bpt id=\"p1\">[</bpt>Normalization<ept id=\"p1\">](#Normalization)</ept> section earlier in this topic.","source":"For more information and an example, see the [Normalization](#Normalization) section earlier in this topic."}],"pos":[10699,76058],"yaml":true,"extradata":"MT"},{"content":"Initializes a new instance of the <xref href=\"System.String\"></xref> class to the value indicated by a specified pointer to an array of Unicode characters.","nodes":[{"pos":[0,155],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.String\"&gt;&lt;/xref&gt;</ph> class to the value indicated by a specified pointer to an array of Unicode characters.","source":"Initializes a new instance of the <xref href=\"System.String\"></xref> class to the value indicated by a specified pointer to an array of Unicode characters."}],"pos":[105490,105646],"yaml":true},{"content":"> [!NOTE]\n>  For examples and comprehensive usage information about this and other `String` constructor overloads, see the <xref:System.String.%23ctor%2A> constructor summary.","nodes":[{"pos":[2,175],"content":"[!NOTE]\n For examples and comprehensive usage information about this and other `String` constructor overloads, see the <xref:System.String.%23ctor%2A> constructor summary.","leadings":["","> "],"nodes":[{"content":"For examples and comprehensive usage information about this and other <ph id=\"ph1\">`String`</ph> constructor overloads, see the <ph id=\"ph2\">&lt;xref:System.String.%23ctor%2A&gt;</ph> constructor summary.","pos":[9,171],"source":" For examples and comprehensive usage information about this and other `String` constructor overloads, see the <xref:System.String.%23ctor%2A> constructor summary."}]}],"pos":[105657,105845],"yaml":true,"extradata":"MT"},{"content":"A pointer to a null-terminated array of Unicode characters.","nodes":[{"pos":[0,59],"content":"A pointer to a null-terminated array of Unicode characters.","nodes":[{"content":"A pointer to a null-terminated array of Unicode characters.","pos":[0,59]}]}],"pos":[106060,106120],"yaml":true},{"content":"The current process does not have read access to all the addressed characters.","nodes":[{"pos":[0,78],"content":"The current process does not have read access to all the addressed characters.","nodes":[{"content":"The current process does not have read access to all the addressed characters.","pos":[0,78]}]}],"pos":[106281,106360],"yaml":true},{"content":"<code>value</code> specifies an array that contains an invalid Unicode character, or <code>value</code> specifies an address less than 64000.","nodes":[{"pos":[0,141],"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> specifies an array that contains an invalid Unicode character, or <ph id=\"ph2\">&lt;code&gt;value&lt;/code&gt;</ph> specifies an address less than 64000.","source":"<code>value</code> specifies an array that contains an invalid Unicode character, or <code>value</code> specifies an address less than 64000."}],"pos":[106454,106596],"yaml":true},{"content":"Initializes a new instance of the <xref href=\"System.String\"></xref> class to the value indicated by an array of Unicode characters.","nodes":[{"pos":[0,132],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.String\"&gt;&lt;/xref&gt;</ph> class to the value indicated by an array of Unicode characters.","source":"Initializes a new instance of the <xref href=\"System.String\"></xref> class to the value indicated by an array of Unicode characters."}],"pos":[108128,108261],"yaml":true},{"content":"> [!NOTE]\n>  For examples and comprehensive usage information about this and other `String` constructor overloads, see the <xref:System.String.%23ctor%2A> constructor summary.","nodes":[{"pos":[2,175],"content":"[!NOTE]\n For examples and comprehensive usage information about this and other `String` constructor overloads, see the <xref:System.String.%23ctor%2A> constructor summary.","leadings":["","> "],"nodes":[{"content":"For examples and comprehensive usage information about this and other <ph id=\"ph1\">`String`</ph> constructor overloads, see the <ph id=\"ph2\">&lt;xref:System.String.%23ctor%2A&gt;</ph> constructor summary.","pos":[9,171],"source":" For examples and comprehensive usage information about this and other `String` constructor overloads, see the <xref:System.String.%23ctor%2A> constructor summary."}]}],"pos":[108272,108460],"yaml":true,"extradata":"MT"},{"content":"An array of Unicode characters.","nodes":[{"pos":[0,31],"content":"An array of Unicode characters.","nodes":[{"content":"An array of Unicode characters.","pos":[0,31]}]}],"pos":[108590,108622],"yaml":true},{"content":"Initializes a new instance of the <xref href=\"System.String\"></xref> class to the value indicated by a pointer to an array of 8-bit signed integers.","nodes":[{"pos":[0,148],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.String\"&gt;&lt;/xref&gt;</ph> class to the value indicated by a pointer to an array of 8-bit signed integers.","source":"Initializes a new instance of the <xref href=\"System.String\"></xref> class to the value indicated by a pointer to an array of 8-bit signed integers."}],"pos":[110116,110265],"yaml":true},{"content":"> [!NOTE]\n>  For examples and comprehensive usage information about this and other `String` constructor overloads, see the <xref:System.String.%23ctor%2A> constructor summary.","nodes":[{"pos":[2,175],"content":"[!NOTE]\n For examples and comprehensive usage information about this and other `String` constructor overloads, see the <xref:System.String.%23ctor%2A> constructor summary.","leadings":["","> "],"nodes":[{"content":"For examples and comprehensive usage information about this and other <ph id=\"ph1\">`String`</ph> constructor overloads, see the <ph id=\"ph2\">&lt;xref:System.String.%23ctor%2A&gt;</ph> constructor summary.","pos":[9,171],"source":" For examples and comprehensive usage information about this and other `String` constructor overloads, see the <xref:System.String.%23ctor%2A> constructor summary."}]}],"pos":[110276,110464],"yaml":true,"extradata":"MT"},{"content":"A pointer to a null-terminated array of 8-bit signed integers. The integers are interpreted using the current system code page encoding (that is, the encoding specified by <xref href=\"System.Text.Encoding.Default\"></xref>).","nodes":[{"pos":[0,223],"content":"A pointer to a null-terminated array of 8-bit signed integers. The integers are interpreted using the current system code page encoding (that is, the encoding specified by <xref href=\"System.Text.Encoding.Default\"></xref>).","nodes":[{"content":"A pointer to a null-terminated array of 8-bit signed integers.","pos":[0,62]},{"content":"The integers are interpreted using the current system code page encoding (that is, the encoding specified by <ph id=\"ph1\">&lt;xref href=\"System.Text.Encoding.Default\"&gt;&lt;/xref&gt;</ph>).","pos":[63,223],"source":" The integers are interpreted using the current system code page encoding (that is, the encoding specified by <xref href=\"System.Text.Encoding.Default\"></xref>)."}]}],"pos":[110681,110905],"yaml":true},{"content":"<code>value</code> is `null`.","nodes":[{"pos":[0,29],"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>value</code> is `null`."}],"pos":[111054,111084],"yaml":true},{"content":"A new instance of <xref href=\"System.String\"></xref> could not be initialized using <code>value</code>, assuming <code>value</code> is encoded in ANSI.","nodes":[{"pos":[0,151],"content":"A new instance of <ph id=\"ph1\">&lt;xref href=\"System.String\"&gt;&lt;/xref&gt;</ph> could not be initialized using <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept>, assuming <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph3\">value</ph><ept id=\"p2\">&lt;/code&gt;</ept> is encoded in ANSI.","source":"A new instance of <xref href=\"System.String\"></xref> could not be initialized using <code>value</code>, assuming <code>value</code> is encoded in ANSI."}],"pos":[111178,111330],"yaml":true},{"content":"The length of the new string to initialize, which is determined by the null termination character of <code>value</code>, is too large to allocate.","nodes":[{"pos":[0,146],"content":"The length of the new string to initialize, which is determined by the null termination character of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept>, is too large to allocate.","source":"The length of the new string to initialize, which is determined by the null termination character of <code>value</code>, is too large to allocate."}],"pos":[111444,111591],"yaml":true},{"content":"<code>value</code> specifies an invalid address.","nodes":[{"pos":[0,48],"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> specifies an invalid address.","source":"<code>value</code> specifies an invalid address."}],"pos":[111699,111748],"yaml":true},{"content":"Initializes a new instance of the <xref href=\"System.String\"></xref> class to the value indicated by a specified Unicode character repeated a specified number of times.","nodes":[{"pos":[0,168],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.String\"&gt;&lt;/xref&gt;</ph> class to the value indicated by a specified Unicode character repeated a specified number of times.","source":"Initializes a new instance of the <xref href=\"System.String\"></xref> class to the value indicated by a specified Unicode character repeated a specified number of times."}],"pos":[112984,113153],"yaml":true},{"content":"> [!NOTE]\n>  For examples and comprehensive usage information about this and other `String` constructor overloads, see the <xref:System.String.%23ctor%2A> constructor summary.","nodes":[{"pos":[2,175],"content":"[!NOTE]\n For examples and comprehensive usage information about this and other `String` constructor overloads, see the <xref:System.String.%23ctor%2A> constructor summary.","leadings":["","> "],"nodes":[{"content":"For examples and comprehensive usage information about this and other <ph id=\"ph1\">`String`</ph> constructor overloads, see the <ph id=\"ph2\">&lt;xref:System.String.%23ctor%2A&gt;</ph> constructor summary.","pos":[9,171],"source":" For examples and comprehensive usage information about this and other `String` constructor overloads, see the <xref:System.String.%23ctor%2A> constructor summary."}]}],"pos":[113164,113352],"yaml":true,"extradata":"MT"},{"content":"A Unicode character.","nodes":[{"pos":[0,20],"content":"A Unicode character.","nodes":[{"content":"A Unicode character.","pos":[0,20]}]}],"pos":[113481,113502],"yaml":true},{"content":"The number of times <code>c</code> occurs.","nodes":[{"pos":[0,42],"content":"The number of times <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">c</ph><ept id=\"p1\">&lt;/code&gt;</ept> occurs.","source":"The number of times <code>c</code> occurs."}],"pos":[113562,113605],"yaml":true},{"content":"<code>count</code> is less than zero.","nodes":[{"pos":[0,37],"content":"<ph id=\"ph1\">&lt;code&gt;count&lt;/code&gt;</ph> is less than zero.","source":"<code>count</code> is less than zero."}],"pos":[113766,113804],"yaml":true},{"content":"Initializes a new instance of the <xref href=\"System.String\"></xref> class to the value indicated by a specified pointer to an array of Unicode characters, a starting character position within that array, and a length.","nodes":[{"pos":[0,218],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.String\"&gt;&lt;/xref&gt;</ph> class to the value indicated by a specified pointer to an array of Unicode characters, a starting character position within that array, and a length.","source":"Initializes a new instance of the <xref href=\"System.String\"></xref> class to the value indicated by a specified pointer to an array of Unicode characters, a starting character position within that array, and a length."}],"pos":[115362,115581],"yaml":true},{"content":"> [!NOTE]\n>  For examples and comprehensive usage information about this and other `String` constructor overloads, see the <xref:System.String.%23ctor%2A> constructor summary.","nodes":[{"pos":[2,175],"content":"[!NOTE]\n For examples and comprehensive usage information about this and other `String` constructor overloads, see the <xref:System.String.%23ctor%2A> constructor summary.","leadings":["","> "],"nodes":[{"content":"For examples and comprehensive usage information about this and other <ph id=\"ph1\">`String`</ph> constructor overloads, see the <ph id=\"ph2\">&lt;xref:System.String.%23ctor%2A&gt;</ph> constructor summary.","pos":[9,171],"source":" For examples and comprehensive usage information about this and other `String` constructor overloads, see the <xref:System.String.%23ctor%2A> constructor summary."}]}],"pos":[115592,115780],"yaml":true,"extradata":"MT"},{"content":"A pointer to an array of Unicode characters.","nodes":[{"pos":[0,44],"content":"A pointer to an array of Unicode characters.","nodes":[{"content":"A pointer to an array of Unicode characters.","pos":[0,44]}]}],"pos":[116023,116068],"yaml":true},{"content":"The starting position within <code>value</code>.","nodes":[{"pos":[0,48],"content":"The starting position within <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The starting position within <code>value</code>."}],"pos":[116133,116182],"yaml":true},{"content":"The number of characters within <code>value</code> to use.","nodes":[{"pos":[0,58],"content":"The number of characters within <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept> to use.","source":"The number of characters within <code>value</code> to use."}],"pos":[116243,116302],"yaml":true},{"content":"<code>startIndex</code> or <code>length</code> is less than zero, <code>value</code> + <code>startIndex</code> cause a pointer overflow, or the current process does not have read access to all the addressed characters.","nodes":[{"pos":[0,218],"content":"<ph id=\"ph1\">&lt;code&gt;startIndex&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;length&lt;/code&gt;</ph> is less than zero, <ph id=\"ph3\">&lt;code&gt;value&lt;/code&gt;</ph><ph id=\"ph4\"> + &lt;code&gt;startIndex&lt;/code&gt;</ph> cause a pointer overflow, or the current process does not have read access to all the addressed characters.","source":"<code>startIndex</code> or <code>length</code> is less than zero, <code>value</code> + <code>startIndex</code> cause a pointer overflow, or the current process does not have read access to all the addressed characters."}],"pos":[116463,116682],"yaml":true},{"content":"<code>value</code> specifies an array that contains an invalid Unicode character, or <code>value</code> + <code>startIndex</code> specifies an address less than 64000.","nodes":[{"pos":[0,167],"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> specifies an array that contains an invalid Unicode character, or <ph id=\"ph2\">&lt;code&gt;value&lt;/code&gt;</ph><ph id=\"ph3\"> + &lt;code&gt;startIndex&lt;/code&gt;</ph> specifies an address less than 64000.","source":"<code>value</code> specifies an array that contains an invalid Unicode character, or <code>value</code> + <code>startIndex</code> specifies an address less than 64000."}],"pos":[116776,116944],"yaml":true},{"content":"Initializes a new instance of the <xref href=\"System.String\"></xref> class to the value indicated by an array of Unicode characters, a starting character position within that array, and a length.","nodes":[{"pos":[0,195],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.String\"&gt;&lt;/xref&gt;</ph> class to the value indicated by an array of Unicode characters, a starting character position within that array, and a length.","source":"Initializes a new instance of the <xref href=\"System.String\"></xref> class to the value indicated by an array of Unicode characters, a starting character position within that array, and a length."}],"pos":[118596,118792],"yaml":true},{"content":"> [!NOTE]\n>  For examples and comprehensive usage information about this and other `String` constructor overloads, see the <xref:System.String.%23ctor%2A> constructor summary.","nodes":[{"pos":[2,175],"content":"[!NOTE]\n For examples and comprehensive usage information about this and other `String` constructor overloads, see the <xref:System.String.%23ctor%2A> constructor summary.","leadings":["","> "],"nodes":[{"content":"For examples and comprehensive usage information about this and other <ph id=\"ph1\">`String`</ph> constructor overloads, see the <ph id=\"ph2\">&lt;xref:System.String.%23ctor%2A&gt;</ph> constructor summary.","pos":[9,171],"source":" For examples and comprehensive usage information about this and other `String` constructor overloads, see the <xref:System.String.%23ctor%2A> constructor summary."}]}],"pos":[118803,118991],"yaml":true,"extradata":"MT"},{"content":"An array of Unicode characters.","nodes":[{"pos":[0,31],"content":"An array of Unicode characters.","nodes":[{"content":"An array of Unicode characters.","pos":[0,31]}]}],"pos":[119149,119181],"yaml":true},{"content":"The starting position within <code>value</code>.","nodes":[{"pos":[0,48],"content":"The starting position within <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The starting position within <code>value</code>."}],"pos":[119246,119295],"yaml":true},{"content":"The number of characters within <code>value</code> to use.","nodes":[{"pos":[0,58],"content":"The number of characters within <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept> to use.","source":"The number of characters within <code>value</code> to use."}],"pos":[119356,119415],"yaml":true},{"content":"<code>value</code> is `null`.","nodes":[{"pos":[0,29],"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>value</code> is `null`."}],"pos":[119564,119594],"yaml":true},{"content":"<code>startIndex</code> or <code>length</code> is less than zero.  \n  \n -or-  \n  \n The sum of <code>startIndex</code> and <code>length</code> is greater than the number of elements in <code>value</code>.","nodes":[{"pos":[0,65],"content":"<ph id=\"ph1\">&lt;code&gt;startIndex&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;length&lt;/code&gt;</ph> is less than zero.","source":"<code>startIndex</code> or <code>length</code> is less than zero."},{"pos":[72,76],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[83,203],"content":"The sum of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">startIndex</ph><ept id=\"p1\">&lt;/code&gt;</ept> and <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">length</ph><ept id=\"p2\">&lt;/code&gt;</ept> is greater than the number of elements in <bpt id=\"p3\">&lt;code&gt;</bpt><ph id=\"ph3\">value</ph><ept id=\"p3\">&lt;/code&gt;</ept>.","source":"The sum of <code>startIndex</code> and <code>length</code> is greater than the number of elements in <code>value</code>."}],"pos":[119708,119918],"yaml":true},{"content":"Initializes a new instance of the <xref href=\"System.String\"></xref> class to the value indicated by a specified pointer to an array of 8-bit signed integers, a starting position within that array, and a length.","nodes":[{"pos":[0,211],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.String\"&gt;&lt;/xref&gt;</ph> class to the value indicated by a specified pointer to an array of 8-bit signed integers, a starting position within that array, and a length.","source":"Initializes a new instance of the <xref href=\"System.String\"></xref> class to the value indicated by a specified pointer to an array of 8-bit signed integers, a starting position within that array, and a length."}],"pos":[121482,121694],"yaml":true},{"content":"> [!NOTE]\n>  For examples and comprehensive usage information about this and other `String` constructor overloads, see the <xref:System.String.%23ctor%2A> constructor summary.","nodes":[{"pos":[2,175],"content":"[!NOTE]\n For examples and comprehensive usage information about this and other `String` constructor overloads, see the <xref:System.String.%23ctor%2A> constructor summary.","leadings":["","> "],"nodes":[{"content":"For examples and comprehensive usage information about this and other <ph id=\"ph1\">`String`</ph> constructor overloads, see the <ph id=\"ph2\">&lt;xref:System.String.%23ctor%2A&gt;</ph> constructor summary.","pos":[9,171],"source":" For examples and comprehensive usage information about this and other `String` constructor overloads, see the <xref:System.String.%23ctor%2A> constructor summary."}]}],"pos":[121705,121893],"yaml":true,"extradata":"MT"},{"content":"A pointer to an array of 8-bit signed integers. The integers are interpreted using the current system code page encoding (that is, the encoding specified by <xref href=\"System.Text.Encoding.Default\"></xref>).","nodes":[{"pos":[0,208],"content":"A pointer to an array of 8-bit signed integers. The integers are interpreted using the current system code page encoding (that is, the encoding specified by <xref href=\"System.Text.Encoding.Default\"></xref>).","nodes":[{"content":"A pointer to an array of 8-bit signed integers.","pos":[0,47]},{"content":"The integers are interpreted using the current system code page encoding (that is, the encoding specified by <ph id=\"ph1\">&lt;xref href=\"System.Text.Encoding.Default\"&gt;&lt;/xref&gt;</ph>).","pos":[48,208],"source":" The integers are interpreted using the current system code page encoding (that is, the encoding specified by <xref href=\"System.Text.Encoding.Default\"></xref>)."}]}],"pos":[122138,122347],"yaml":true},{"content":"The starting position within <code>value</code>.","nodes":[{"pos":[0,48],"content":"The starting position within <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The starting position within <code>value</code>."}],"pos":[122412,122461],"yaml":true},{"content":"The number of characters within <code>value</code> to use.","nodes":[{"pos":[0,58],"content":"The number of characters within <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept> to use.","source":"The number of characters within <code>value</code> to use."}],"pos":[122522,122581],"yaml":true},{"content":"<code>value</code> is `null`.","nodes":[{"pos":[0,29],"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>value</code> is `null`."}],"pos":[122730,122760],"yaml":true},{"content":"<code>startIndex</code> or <code>length</code> is less than zero.  \n  \n -or-  \n  \n The address specified by <code>value</code> + <code>startIndex</code> is too large for the current platform; that is, the address calculation overflowed.  \n  \n -or-  \n  \n The length of the new string to initialize is too large to allocate.","nodes":[{"pos":[0,65],"content":"<ph id=\"ph1\">&lt;code&gt;startIndex&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;length&lt;/code&gt;</ph> is less than zero.","source":"<code>startIndex</code> or <code>length</code> is less than zero."},{"pos":[72,76],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[83,236],"content":"The address specified by <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept><ph id=\"ph2\"> + </ph><bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph3\">startIndex</ph><ept id=\"p2\">&lt;/code&gt;</ept> is too large for the current platform; that is, the address calculation overflowed.","source":"The address specified by <code>value</code> + <code>startIndex</code> is too large for the current platform; that is, the address calculation overflowed."},{"pos":[243,247],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[254,322],"content":"The length of the new string to initialize is too large to allocate.","nodes":[{"content":"The length of the new string to initialize is too large to allocate.","pos":[0,68]}]}],"pos":[122874,123207],"yaml":true},{"content":"The address specified by <code>value</code> + <code>startIndex</code> is less than 64K.  \n  \n -or-  \n  \n A new instance of <xref href=\"System.String\"></xref> could not be initialized using <code>value</code>, assuming <code>value</code> is encoded in ANSI.","nodes":[{"pos":[0,87],"content":"The address specified by <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept><ph id=\"ph2\"> + </ph><bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph3\">startIndex</ph><ept id=\"p2\">&lt;/code&gt;</ept> is less than 64K.","source":"The address specified by <code>value</code> + <code>startIndex</code> is less than 64K."},{"pos":[94,98],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[105,256],"content":"A new instance of <ph id=\"ph1\">&lt;xref href=\"System.String\"&gt;&lt;/xref&gt;</ph> could not be initialized using <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept>, assuming <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph3\">value</ph><ept id=\"p2\">&lt;/code&gt;</ept> is encoded in ANSI.","source":"A new instance of <xref href=\"System.String\"></xref> could not be initialized using <code>value</code>, assuming <code>value</code> is encoded in ANSI."}],"pos":[123301,123566],"yaml":true},{"content":"<code>value</code>, <code>startIndex</code>, and <code>length</code> collectively specify an invalid address.","nodes":[{"pos":[0,109],"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph>, <ph id=\"ph2\">&lt;code&gt;startIndex&lt;/code&gt;</ph>, and <ph id=\"ph3\">&lt;code&gt;length&lt;/code&gt;</ph> collectively specify an invalid address.","source":"<code>value</code>, <code>startIndex</code>, and <code>length</code> collectively specify an invalid address."}],"pos":[123674,123784],"yaml":true},{"content":"Initializes a new instance of the <xref href=\"System.String\"></xref> class to the value indicated by a specified pointer to an array of 8-bit signed integers, a starting position within that array, a length, and an <xref href=\"System.Text.Encoding\"></xref> object.","nodes":[{"pos":[0,264],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.String\"&gt;&lt;/xref&gt;</ph> class to the value indicated by a specified pointer to an array of 8-bit signed integers, a starting position within that array, a length, and an <ph id=\"ph2\">&lt;xref href=\"System.Text.Encoding\"&gt;&lt;/xref&gt;</ph> object.","source":"Initializes a new instance of the <xref href=\"System.String\"></xref> class to the value indicated by a specified pointer to an array of 8-bit signed integers, a starting position within that array, a length, and an <xref href=\"System.Text.Encoding\"></xref> object."}],"pos":[125185,125450],"yaml":true},{"content":"> [!NOTE]\n>  For examples and comprehensive usage information about this and other `String` constructor overloads, see the <xref:System.String.%23ctor%2A> constructor summary.","nodes":[{"pos":[2,175],"content":"[!NOTE]\n For examples and comprehensive usage information about this and other `String` constructor overloads, see the <xref:System.String.%23ctor%2A> constructor summary.","leadings":["","> "],"nodes":[{"content":"For examples and comprehensive usage information about this and other <ph id=\"ph1\">`String`</ph> constructor overloads, see the <ph id=\"ph2\">&lt;xref:System.String.%23ctor%2A&gt;</ph> constructor summary.","pos":[9,171],"source":" For examples and comprehensive usage information about this and other `String` constructor overloads, see the <xref:System.String.%23ctor%2A> constructor summary."}]}],"pos":[125461,125649],"yaml":true,"extradata":"MT"},{"content":"A pointer to an array of 8-bit signed integers.","nodes":[{"pos":[0,47],"content":"A pointer to an array of 8-bit signed integers.","nodes":[{"content":"A pointer to an array of 8-bit signed integers.","pos":[0,47]}]}],"pos":[125920,125968],"yaml":true},{"content":"The starting position within <code>value</code>.","nodes":[{"pos":[0,48],"content":"The starting position within <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The starting position within <code>value</code>."}],"pos":[126033,126082],"yaml":true},{"content":"The number of characters within <code>value</code> to use.","nodes":[{"pos":[0,58],"content":"The number of characters within <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept> to use.","source":"The number of characters within <code>value</code> to use."}],"pos":[126143,126202],"yaml":true},{"content":"An object that specifies how the array referenced by <code>value</code> is encoded. If <code>enc</code> is `null`, ANSI encoding is assumed.","nodes":[{"pos":[0,140],"content":"An object that specifies how the array referenced by <code>value</code> is encoded. If <code>enc</code> is `null`, ANSI encoding is assumed.","nodes":[{"content":"An object that specifies how the array referenced by <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept> is encoded.","pos":[0,83],"source":"An object that specifies how the array referenced by <code>value</code> is encoded."},{"content":"If <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">enc</ph><ept id=\"p1\">&lt;/code&gt;</ept> is <ph id=\"ph2\">`null`</ph>, ANSI encoding is assumed.","pos":[84,140],"source":" If <code>enc</code> is `null`, ANSI encoding is assumed."}]}],"pos":[126268,126409],"yaml":true},{"content":"<code>value</code> is `null`.","nodes":[{"pos":[0,29],"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>value</code> is `null`."}],"pos":[126558,126588],"yaml":true},{"content":"<code>startIndex</code> or <code>length</code> is less than zero.  \n  \n -or-  \n  \n The address specified by <code>value</code> + <code>startIndex</code> is too large for the current platform; that is, the address calculation overflowed.  \n  \n -or-  \n  \n The length of the new string to initialize is too large to allocate.","nodes":[{"pos":[0,65],"content":"<ph id=\"ph1\">&lt;code&gt;startIndex&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;length&lt;/code&gt;</ph> is less than zero.","source":"<code>startIndex</code> or <code>length</code> is less than zero."},{"pos":[72,76],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[83,236],"content":"The address specified by <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept><ph id=\"ph2\"> + </ph><bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph3\">startIndex</ph><ept id=\"p2\">&lt;/code&gt;</ept> is too large for the current platform; that is, the address calculation overflowed.","source":"The address specified by <code>value</code> + <code>startIndex</code> is too large for the current platform; that is, the address calculation overflowed."},{"pos":[243,247],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[254,322],"content":"The length of the new string to initialize is too large to allocate.","nodes":[{"content":"The length of the new string to initialize is too large to allocate.","pos":[0,68]}]}],"pos":[126702,127035],"yaml":true},{"content":"The address specified by <code>value</code> + <code>startIndex</code> is less than 64K.  \n  \n -or-  \n  \n A new instance of <xref href=\"System.String\"></xref> could not be initialized using <code>value</code>, assuming <code>value</code> is encoded as specified by <code>enc</code>.","nodes":[{"pos":[0,87],"content":"The address specified by <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept><ph id=\"ph2\"> + </ph><bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph3\">startIndex</ph><ept id=\"p2\">&lt;/code&gt;</ept> is less than 64K.","source":"The address specified by <code>value</code> + <code>startIndex</code> is less than 64K."},{"pos":[94,98],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[105,281],"content":"A new instance of <ph id=\"ph1\">&lt;xref href=\"System.String\"&gt;&lt;/xref&gt;</ph> could not be initialized using <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept>, assuming <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph3\">value</ph><ept id=\"p2\">&lt;/code&gt;</ept> is encoded as specified by <bpt id=\"p3\">&lt;code&gt;</bpt><ph id=\"ph4\">enc</ph><ept id=\"p3\">&lt;/code&gt;</ept>.","source":"A new instance of <xref href=\"System.String\"></xref> could not be initialized using <code>value</code>, assuming <code>value</code> is encoded as specified by <code>enc</code>."}],"pos":[127129,127419],"yaml":true},{"content":"<code>value</code>, <code>startIndex</code>, and <code>length</code> collectively specify an invalid address.","nodes":[{"pos":[0,109],"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph>, <ph id=\"ph2\">&lt;code&gt;startIndex&lt;/code&gt;</ph>, and <ph id=\"ph3\">&lt;code&gt;length&lt;/code&gt;</ph> collectively specify an invalid address.","source":"<code>value</code>, <code>startIndex</code>, and <code>length</code> collectively specify an invalid address."}],"pos":[127527,127637],"yaml":true},{"content":"Gets the <xref href=\"System.Char\"></xref> object at a specified position in the current <xref href=\"System.String\"></xref> object.","nodes":[{"pos":[0,130],"content":"Gets the <ph id=\"ph1\">&lt;xref href=\"System.Char\"&gt;&lt;/xref&gt;</ph> object at a specified position in the current <ph id=\"ph2\">&lt;xref href=\"System.String\"&gt;&lt;/xref&gt;</ph> object.","source":"Gets the <xref href=\"System.Char\"></xref> object at a specified position in the current <xref href=\"System.String\"></xref> object."}],"pos":[128811,128942],"yaml":true},{"content":"The `index` parameter is zero-based.  \n  \n This property returns the <xref:System.Char> object at the position specified by the `index` parameter. However, a Unicode character might be represented by more than one <xref:System.Char>. Use the <xref:System.Globalization.StringInfo?displayProperty=fullName> class to work with Unicode characters instead of <xref:System.Char> objects. For more information, see the \"Char Objects and Unicode Characters\" section in the <xref:System.String> class overview.  \n  \n In C#, the <xref:System.String.Chars%2A> property is an indexer. In Visual Basic, it is the default property of the <xref:System.String> class. Each <xref:System.Char> object in the string can be accessed by using code such as the following.  \n  \n [!code-csharp[System.String.Chars#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.chars/cs/chars1.cs#1)]\n [!code-vb[System.String.Chars#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.string.chars/vb/chars1.vb#1)]","nodes":[{"pos":[0,36],"content":"The <ph id=\"ph1\">`index`</ph> parameter is zero-based.","source":"The `index` parameter is zero-based."},{"pos":[43,502],"content":"This property returns the <xref:System.Char> object at the position specified by the `index` parameter. However, a Unicode character might be represented by more than one <xref:System.Char>. Use the <xref:System.Globalization.StringInfo?displayProperty=fullName> class to work with Unicode characters instead of <xref:System.Char> objects. For more information, see the \"Char Objects and Unicode Characters\" section in the <xref:System.String> class overview.","nodes":[{"content":"This property returns the <ph id=\"ph1\">&lt;xref:System.Char&gt;</ph> object at the position specified by the <ph id=\"ph2\">`index`</ph> parameter.","pos":[0,103],"source":"This property returns the <xref:System.Char> object at the position specified by the `index` parameter."},{"content":"However, a Unicode character might be represented by more than one <ph id=\"ph1\">&lt;xref:System.Char&gt;</ph>.","pos":[104,190],"source":" However, a Unicode character might be represented by more than one <xref:System.Char>."},{"content":"Use the <ph id=\"ph1\">&lt;xref:System.Globalization.StringInfo?displayProperty=fullName&gt;</ph> class to work with Unicode characters instead of <ph id=\"ph2\">&lt;xref:System.Char&gt;</ph> objects.","pos":[191,339],"source":" Use the <xref:System.Globalization.StringInfo?displayProperty=fullName> class to work with Unicode characters instead of <xref:System.Char> objects."},{"content":"For more information, see the \"Char Objects and Unicode Characters\" section in the <ph id=\"ph1\">&lt;xref:System.String&gt;</ph> class overview.","pos":[340,459],"source":" For more information, see the \"Char Objects and Unicode Characters\" section in the <xref:System.String> class overview."}]},{"pos":[509,750],"content":"In C#, the <xref:System.String.Chars%2A> property is an indexer. In Visual Basic, it is the default property of the <xref:System.String> class. Each <xref:System.Char> object in the string can be accessed by using code such as the following.","nodes":[{"content":"In C#, the <xref:System.String.Chars%2A> property is an indexer. In Visual Basic, it is the default property of the <xref:System.String> class. Each <xref:System.Char> object in the string can be accessed by using code such as the following.","pos":[0,241],"nodes":[{"content":"In C#, the <ph id=\"ph1\">&lt;xref:System.String.Chars%2A&gt;</ph> property is an indexer.","pos":[0,64],"source":"In C#, the <xref:System.String.Chars%2A> property is an indexer."},{"content":"In Visual Basic, it is the default property of the <ph id=\"ph1\">&lt;xref:System.String&gt;</ph> class.","pos":[65,143],"source":" In Visual Basic, it is the default property of the <xref:System.String> class."},{"content":"Each <ph id=\"ph1\">&lt;xref:System.Char&gt;</ph> object in the string can be accessed by using code such as the following.","pos":[144,241],"source":" Each <xref:System.Char> object in the string can be accessed by using code such as the following."}]}]},{"pos":[757,1004],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>System.String.Chars#1<ept id=\"p2\">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.chars/cs/chars1.cs#1)</ept><ept id=\"p1\">]</ept> <bpt id=\"p3\">[!code-vb</bpt><bpt id=\"p4\">[</bpt>System.String.Chars#1<ept id=\"p4\">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.string.chars/vb/chars1.vb#1)</ept><ept id=\"p3\">]</ept>","source":"[!code-csharp[System.String.Chars#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.chars/cs/chars1.cs#1)]\n [!code-vb[System.String.Chars#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.string.chars/vb/chars1.vb#1)]"}],"pos":[128953,129969],"yaml":true,"extradata":"MT"},{"content":"A position in the current string.","nodes":[{"pos":[0,33],"content":"A position in the current string.","nodes":[{"content":"A position in the current string.","pos":[0,33]}]}],"pos":[130572,130606],"yaml":true},{"content":"The object at position <code>index</code>.","nodes":[{"pos":[0,42],"content":"The object at position <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">index</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The object at position <code>index</code>."}],"pos":[130661,130704],"yaml":true},{"content":"<code>index</code> is greater than or equal to the length of this object or less than zero.","nodes":[{"pos":[0,91],"content":"<ph id=\"ph1\">&lt;code&gt;index&lt;/code&gt;</ph> is greater than or equal to the length of this object or less than zero.","source":"<code>index</code> is greater than or equal to the length of this object or less than zero."}],"pos":[130859,130951],"yaml":true},{"content":"Returns a reference to this instance of <xref href=\"System.String\"></xref>.","nodes":[{"pos":[0,75],"content":"Returns a reference to this instance of <ph id=\"ph1\">&lt;xref href=\"System.String\"&gt;&lt;/xref&gt;</ph>.","source":"Returns a reference to this instance of <xref href=\"System.String\"></xref>."}],"pos":[132305,132381],"yaml":true},{"content":"The return value is not an independent copy of this instance; it is simply another view of the same data. Use the <xref:System.String.Copy%2A> or <xref:System.String.CopyTo%2A> method to create a separate <xref:System.String> object with the same value as this instance.  \n  \n Because the <xref:System.String.Clone%2A> method simply returns the existing string instance, there is little reason to call it directly.","nodes":[{"pos":[0,270],"content":"The return value is not an independent copy of this instance; it is simply another view of the same data. Use the <xref:System.String.Copy%2A> or <xref:System.String.CopyTo%2A> method to create a separate <xref:System.String> object with the same value as this instance.","nodes":[{"content":"The return value is not an independent copy of this instance; it is simply another view of the same data. Use the <xref:System.String.Copy%2A> or <xref:System.String.CopyTo%2A> method to create a separate <xref:System.String> object with the same value as this instance.","pos":[0,270],"nodes":[{"content":"The return value is not an independent copy of this instance; it is simply another view of the same data.","pos":[0,105]},{"content":"Use the <ph id=\"ph1\">&lt;xref:System.String.Copy%2A&gt;</ph> or <ph id=\"ph2\">&lt;xref:System.String.CopyTo%2A&gt;</ph> method to create a separate <ph id=\"ph3\">&lt;xref:System.String&gt;</ph> object with the same value as this instance.","pos":[106,270],"source":" Use the <xref:System.String.Copy%2A> or <xref:System.String.CopyTo%2A> method to create a separate <xref:System.String> object with the same value as this instance."}]}]},{"pos":[277,414],"content":"Because the <xref:System.String.Clone%2A> method simply returns the existing string instance, there is little reason to call it directly.","nodes":[{"content":"Because the <ph id=\"ph1\">&lt;xref:System.String.Clone%2A&gt;</ph> method simply returns the existing string instance, there is little reason to call it directly.","pos":[0,137],"source":"Because the <xref:System.String.Clone%2A> method simply returns the existing string instance, there is little reason to call it directly."}]}],"pos":[132392,132811],"yaml":true,"extradata":"MT"},{"content":"This instance of <xref href=\"System.String\"></xref>.","nodes":[{"pos":[0,52],"content":"This instance of <ph id=\"ph1\">&lt;xref href=\"System.String\"&gt;&lt;/xref&gt;</ph>.","source":"This instance of <xref href=\"System.String\"></xref>."}],"pos":[132934,132987],"yaml":true},{"content":"Compares substrings of two specified <xref href=\"System.String\"></xref> objects, ignoring or honoring their case and using culture-specific information to influence the comparison, and returns an integer that indicates their relative position in the sort order.","nodes":[{"pos":[0,261],"content":"Compares substrings of two specified <ph id=\"ph1\">&lt;xref href=\"System.String\"&gt;&lt;/xref&gt;</ph> objects, ignoring or honoring their case and using culture-specific information to influence the comparison, and returns an integer that indicates their relative position in the sort order.","source":"Compares substrings of two specified <xref href=\"System.String\"></xref> objects, ignoring or honoring their case and using culture-specific information to influence the comparison, and returns an integer that indicates their relative position in the sort order."}],"pos":[134578,134840],"yaml":true},{"content":"The substrings to compare start in `strA` at `indexA`, and in `strB` at `indexB`. Both `indexA` and `indexB` are zero-based; that is, the first character in `strA` and `strB` is at position zero, not position one. The length of the first substring is equal to the length of `strA` minus `indexA` plus one. The length of the second substring is equal to the length of `strB` minus `indexB` plus one.  \n  \n The number of characters to compare is the lesser of the lengths of the two substrings, and `length`. The `indexA`, `indexB`, and `length` parameters must be nonnegative.  \n  \n The comparison uses the `culture` parameter to obtain culture-specific information such as casing rules and the alphabetic order of individual characters. For example, a culture could specify that certain combinations of characters be treated as a single character, or uppercase and lowercase characters be compared in a particular way, or that the sorting order of a character depends on the characters that precede or follow it.  \n  \n The comparison is performed using word sort rules. For more information about word, string, and ordinal sorts, see <xref:System.Globalization.CompareOptions?displayProperty=fullName>.  \n  \n One or both comparands can be `null`. By definition, any string, including the empty string (\"\"), compares greater than a null reference; and two null references compare equal to each other.  \n  \n The comparison terminates when an inequality is discovered or both substrings have been compared. However, if the two strings compare equal to the end of one string, and the other string has characters remaining, then the string with remaining characters is considered greater. The return value is the result of the last comparison performed.  \n  \n Unexpected results can occur when comparisons are affected by culture-specific casing rules. For example, in Turkish, the following example yields the wrong results because the file system in Turkish does not use linguistic casing rules for the letter \"i\" in \"file\".  \n  \n [!code-cpp[System.String.Compare#6](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Compare/cpp/remarks.cpp#6)]\n [!code-csharp[System.String.Compare#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Compare/cs/remarks.cs#6)]\n [!code-vb[System.String.Compare#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Compare/vb/remarks.vb#6)]  \n  \n Compare the path name to \"file\" using an ordinal comparison. The correct code to do this is as follows:  \n  \n [!code-cpp[System.String.Compare#7](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Compare/cpp/remarks.cpp#7)]\n [!code-csharp[System.String.Compare#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Compare/cs/remarks.cs#7)]\n [!code-vb[System.String.Compare#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Compare/vb/remarks.vb#7)]","nodes":[{"pos":[0,398],"content":"The substrings to compare start in `strA` at `indexA`, and in `strB` at `indexB`. Both `indexA` and `indexB` are zero-based; that is, the first character in `strA` and `strB` is at position zero, not position one. The length of the first substring is equal to the length of `strA` minus `indexA` plus one. The length of the second substring is equal to the length of `strB` minus `indexB` plus one.","nodes":[{"content":"The substrings to compare start in <ph id=\"ph1\">`strA`</ph> at <ph id=\"ph2\">`indexA`</ph>, and in <ph id=\"ph3\">`strB`</ph> at <ph id=\"ph4\">`indexB`</ph>.","pos":[0,81],"source":"The substrings to compare start in `strA` at `indexA`, and in `strB` at `indexB`."},{"content":"Both <ph id=\"ph1\">`indexA`</ph> and <ph id=\"ph2\">`indexB`</ph> are zero-based; that is, the first character in <ph id=\"ph3\">`strA`</ph> and <ph id=\"ph4\">`strB`</ph> is at position zero, not position one.","pos":[82,213],"source":" Both `indexA` and `indexB` are zero-based; that is, the first character in `strA` and `strB` is at position zero, not position one."},{"content":"The length of the first substring is equal to the length of <ph id=\"ph1\">`strA`</ph> minus <ph id=\"ph2\">`indexA`</ph> plus one.","pos":[214,305],"source":" The length of the first substring is equal to the length of `strA` minus `indexA` plus one."},{"content":"The length of the second substring is equal to the length of <ph id=\"ph1\">`strB`</ph> minus <ph id=\"ph2\">`indexB`</ph> plus one.","pos":[306,398],"source":" The length of the second substring is equal to the length of `strB` minus `indexB` plus one."}]},{"pos":[405,575],"content":"The number of characters to compare is the lesser of the lengths of the two substrings, and `length`. The `indexA`, `indexB`, and `length` parameters must be nonnegative.","nodes":[{"content":"The number of characters to compare is the lesser of the lengths of the two substrings, and <ph id=\"ph1\">`length`</ph>.","pos":[0,101],"source":"The number of characters to compare is the lesser of the lengths of the two substrings, and `length`."},{"content":"The <ph id=\"ph1\">`indexA`</ph>, <ph id=\"ph2\">`indexB`</ph>, and <ph id=\"ph3\">`length`</ph> parameters must be nonnegative.","pos":[102,170],"source":" The `indexA`, `indexB`, and `length` parameters must be nonnegative."}]},{"pos":[582,1012],"content":"The comparison uses the `culture` parameter to obtain culture-specific information such as casing rules and the alphabetic order of individual characters. For example, a culture could specify that certain combinations of characters be treated as a single character, or uppercase and lowercase characters be compared in a particular way, or that the sorting order of a character depends on the characters that precede or follow it.","nodes":[{"content":"The comparison uses the <ph id=\"ph1\">`culture`</ph> parameter to obtain culture-specific information such as casing rules and the alphabetic order of individual characters.","pos":[0,154],"source":"The comparison uses the `culture` parameter to obtain culture-specific information such as casing rules and the alphabetic order of individual characters."},{"content":"For example, a culture could specify that certain combinations of characters be treated as a single character, or uppercase and lowercase characters be compared in a particular way, or that the sorting order of a character depends on the characters that precede or follow it.","pos":[155,430]}]},{"pos":[1019,1202],"content":"The comparison is performed using word sort rules. For more information about word, string, and ordinal sorts, see <xref:System.Globalization.CompareOptions?displayProperty=fullName>.","nodes":[{"content":"The comparison is performed using word sort rules. For more information about word, string, and ordinal sorts, see <xref:System.Globalization.CompareOptions?displayProperty=fullName>.","pos":[0,183],"nodes":[{"content":"The comparison is performed using word sort rules.","pos":[0,50]},{"content":"For more information about word, string, and ordinal sorts, see <ph id=\"ph1\">&lt;xref:System.Globalization.CompareOptions?displayProperty=fullName&gt;</ph>.","pos":[51,183],"source":" For more information about word, string, and ordinal sorts, see <xref:System.Globalization.CompareOptions?displayProperty=fullName>."}]}]},{"pos":[1209,1399],"content":"One or both comparands can be `null`. By definition, any string, including the empty string (\"\"), compares greater than a null reference; and two null references compare equal to each other.","nodes":[{"content":"One or both comparands can be <ph id=\"ph1\">`null`</ph>.","pos":[0,37],"source":"One or both comparands can be `null`."},{"content":"By definition, any string, including the empty string (\"\"), compares greater than a null reference; and two null references compare equal to each other.","pos":[38,190]}]},{"pos":[1406,1748],"content":"The comparison terminates when an inequality is discovered or both substrings have been compared. However, if the two strings compare equal to the end of one string, and the other string has characters remaining, then the string with remaining characters is considered greater. The return value is the result of the last comparison performed.","nodes":[{"content":"The comparison terminates when an inequality is discovered or both substrings have been compared. However, if the two strings compare equal to the end of one string, and the other string has characters remaining, then the string with remaining characters is considered greater. The return value is the result of the last comparison performed.","pos":[0,342],"nodes":[{"content":"The comparison terminates when an inequality is discovered or both substrings have been compared.","pos":[0,97]},{"content":"However, if the two strings compare equal to the end of one string, and the other string has characters remaining, then the string with remaining characters is considered greater.","pos":[98,277]},{"content":"The return value is the result of the last comparison performed.","pos":[278,342]}]}]},{"pos":[1755,2021],"content":"Unexpected results can occur when comparisons are affected by culture-specific casing rules. For example, in Turkish, the following example yields the wrong results because the file system in Turkish does not use linguistic casing rules for the letter \"i\" in \"file\".","nodes":[{"content":"Unexpected results can occur when comparisons are affected by culture-specific casing rules. For example, in Turkish, the following example yields the wrong results because the file system in Turkish does not use linguistic casing rules for the letter \"i\" in \"file\".","pos":[0,266],"nodes":[{"content":"Unexpected results can occur when comparisons are affected by culture-specific casing rules.","pos":[0,92]},{"content":"For example, in Turkish, the following example yields the wrong results because the file system in Turkish does not use linguistic casing rules for the letter \"i\" in \"file\".","pos":[93,266]}]}]},{"pos":[2028,2410],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>System.String.Compare#6<ept id=\"p2\">](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Compare/cpp/remarks.cpp#6)</ept><ept id=\"p1\">]</ept> <bpt id=\"p3\">[!code-csharp</bpt><bpt id=\"p4\">[</bpt>System.String.Compare#6<ept id=\"p4\">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Compare/cs/remarks.cs#6)</ept><ept id=\"p3\">]</ept> <bpt id=\"p5\">[!code-vb</bpt><bpt id=\"p6\">[</bpt>System.String.Compare#6<ept id=\"p6\">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Compare/vb/remarks.vb#6)</ept><ept id=\"p5\">]</ept>","source":"[!code-cpp[System.String.Compare#6](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Compare/cpp/remarks.cpp#6)]\n [!code-csharp[System.String.Compare#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Compare/cs/remarks.cs#6)]\n [!code-vb[System.String.Compare#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Compare/vb/remarks.vb#6)]"},{"pos":[2417,2520],"content":"Compare the path name to \"file\" using an ordinal comparison. The correct code to do this is as follows:","nodes":[{"content":"Compare the path name to \"file\" using an ordinal comparison. The correct code to do this is as follows:","pos":[0,103],"nodes":[{"content":"Compare the path name to \"file\" using an ordinal comparison.","pos":[0,60]},{"content":"The correct code to do this is as follows:","pos":[61,103]}]}]},{"pos":[2527,2909],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>System.String.Compare#7<ept id=\"p2\">](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Compare/cpp/remarks.cpp#7)</ept><ept id=\"p1\">]</ept> <bpt id=\"p3\">[!code-csharp</bpt><bpt id=\"p4\">[</bpt>System.String.Compare#7<ept id=\"p4\">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Compare/cs/remarks.cs#7)</ept><ept id=\"p3\">]</ept> <bpt id=\"p5\">[!code-vb</bpt><bpt id=\"p6\">[</bpt>System.String.Compare#7<ept id=\"p6\">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Compare/vb/remarks.vb#7)</ept><ept id=\"p5\">]</ept>","source":"[!code-cpp[System.String.Compare#7](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Compare/cpp/remarks.cpp#7)]\n [!code-csharp[System.String.Compare#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Compare/cs/remarks.cs#7)]\n [!code-vb[System.String.Compare#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Compare/vb/remarks.vb#7)]"}],"pos":[134851,137793],"yaml":true,"extradata":"MT"},{"content":"The first string to use in the comparison.","nodes":[{"pos":[0,42],"content":"The first string to use in the comparison.","nodes":[{"content":"The first string to use in the comparison.","pos":[0,42]}]}],"pos":[138564,138607],"yaml":true},{"content":"The position of the substring within <code>strA</code>.","nodes":[{"pos":[0,55],"content":"The position of the substring within <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">strA</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The position of the substring within <code>strA</code>."}],"pos":[138668,138724],"yaml":true},{"content":"The second string to use in the comparison.","nodes":[{"pos":[0,43],"content":"The second string to use in the comparison.","nodes":[{"content":"The second string to use in the comparison.","pos":[0,43]}]}],"pos":[138784,138828],"yaml":true},{"content":"The position of the substring within <code>strB</code>.","nodes":[{"pos":[0,55],"content":"The position of the substring within <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">strB</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The position of the substring within <code>strB</code>."}],"pos":[138889,138945],"yaml":true},{"content":"The maximum number of characters in the substrings to compare.","nodes":[{"pos":[0,62],"content":"The maximum number of characters in the substrings to compare.","nodes":[{"content":"The maximum number of characters in the substrings to compare.","pos":[0,62]}]}],"pos":[139006,139069],"yaml":true},{"content":"`true` to ignore case during the comparison; otherwise, `false`.","nodes":[{"pos":[0,64],"content":"<ph id=\"ph1\">`true`</ph> to ignore case during the comparison; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` to ignore case during the comparison; otherwise, `false`."}],"pos":[139136,139203],"yaml":true},{"content":"An object that supplies culture-specific comparison information.","nodes":[{"pos":[0,64],"content":"An object that supplies culture-specific comparison information.","nodes":[{"content":"An object that supplies culture-specific comparison information.","pos":[0,64]}]}],"pos":[139285,139350],"yaml":true},{"content":"An integer that indicates the lexical relationship between the two comparands.  \n  \n <table><thead><tr><th> Value  \n  \n </th><th> Condition  \n  \n </th></tr></thead><tbody><tr><td> Less than zero  \n  \n </td><td> The substring in <code>strA</code> precedes the substring in <code>strB</code> in the sort order.  \n  \n </td></tr><tr><td> Zero  \n  \n </td><td> The substrings occur in the same position in the sort order, or <code>length</code> is zero.  \n  \n </td></tr><tr><td> Greater than zero  \n  \n </td><td> The substring in <code>strA</code> follows the substring in <code>strB</code> in the sort order.  \n  \n </td></tr></tbody></table>","nodes":[{"pos":[0,78],"content":"An integer that indicates the lexical relationship between the two comparands.","nodes":[{"content":"An integer that indicates the lexical relationship between the two comparands.","pos":[0,78]}]},{"pos":[85,637],"content":"<table><thead><tr><th> Value  \n  \n </th><th> Condition  \n  \n </th></tr></thead><tbody><tr><td> Less than zero  \n  \n </td><td> The substring in <code>strA</code> precedes the substring in <code>strB</code> in the sort order.  \n  \n </td></tr><tr><td> Zero  \n  \n </td><td> The substrings occur in the same position in the sort order, or <code>length</code> is zero.  \n  \n </td></tr><tr><td> Greater than zero  \n  \n </td><td> The substring in <code>strA</code> follows the substring in <code>strB</code> in the sort order.  \n  \n </td></tr></tbody></table>","nodes":[{"content":"Value","pos":[23,33],"source":" Value  \n  \n "},{"content":"Condition","pos":[45,59],"source":" Condition  \n  \n "},{"content":"Less than zero","pos":[95,114],"source":" Less than zero  \n  \n "},{"content":" The substring in <code>strA</code> precedes the substring in <code>strB</code> in the sort order.  \n  \n ","pos":[125,230],"nodes":[{"content":"The substring in <ph id=\"ph1\">&lt;code&gt;strA&lt;/code&gt;</ph> precedes the substring in <ph id=\"ph2\">&lt;code&gt;strB&lt;/code&gt;</ph> in the sort order.","pos":[1,98],"source":" The substring in <code>strA</code> precedes the substring in <code>strB</code> in the sort order."}]},{"content":"Zero","pos":[249,258],"source":" Zero  \n  \n "},{"content":" The substrings occur in the same position in the sort order, or <code>length</code> is zero.  \n  \n ","pos":[269,369],"nodes":[{"content":"The substrings occur in the same position in the sort order, or <ph id=\"ph1\">&lt;code&gt;length&lt;/code&gt;</ph> is zero.","pos":[1,93],"source":" The substrings occur in the same position in the sort order, or <code>length</code> is zero."}]},{"content":"Greater than zero","pos":[388,410],"source":" Greater than zero  \n  \n "},{"content":" The substring in <code>strA</code> follows the substring in <code>strB</code> in the sort order.  \n  \n ","pos":[421,525],"nodes":[{"content":"The substring in <ph id=\"ph1\">&lt;code&gt;strA&lt;/code&gt;</ph> follows the substring in <ph id=\"ph2\">&lt;code&gt;strB&lt;/code&gt;</ph> in the sort order.","pos":[1,97],"source":" The substring in <code>strA</code> follows the substring in <code>strB</code> in the sort order."}]}]}],"pos":[139406,140063],"yaml":true},{"content":"<code>indexA</code> is greater than <code>strA</code>.<xref href=\"System.String.Length\"></xref>.  \n  \n -or-  \n  \n <code>indexB</code> is greater than <code>strB</code>.<xref href=\"System.String.Length\"></xref>.  \n  \n -or-  \n  \n <code>indexA</code>, <code>indexB</code>, or <code>length</code> is negative.  \n  \n -or-  \n  \n Either <code>strA</code> or <code>strB</code> is `null`, and <code>length</code> is greater than zero.","nodes":[{"pos":[0,96],"content":"<ph id=\"ph1\">&lt;code&gt;indexA&lt;/code&gt;</ph> is greater than <ph id=\"ph2\">&lt;code&gt;strA&lt;/code&gt;</ph>.<ph id=\"ph3\">&lt;xref href=\"System.String.Length\"&gt;&lt;/xref&gt;</ph>.","source":"<code>indexA</code> is greater than <code>strA</code>.<xref href=\"System.String.Length\"></xref>."},{"pos":[103,107],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[114,210],"content":"<ph id=\"ph1\">&lt;code&gt;indexB&lt;/code&gt;</ph> is greater than <ph id=\"ph2\">&lt;code&gt;strB&lt;/code&gt;</ph>.<ph id=\"ph3\">&lt;xref href=\"System.String.Length\"&gt;&lt;/xref&gt;</ph>.","source":"<code>indexB</code> is greater than <code>strB</code>.<xref href=\"System.String.Length\"></xref>."},{"pos":[217,221],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[228,305],"content":"<ph id=\"ph1\">&lt;code&gt;indexA&lt;/code&gt;</ph>, <ph id=\"ph2\">&lt;code&gt;indexB&lt;/code&gt;</ph>, or <ph id=\"ph3\">&lt;code&gt;length&lt;/code&gt;</ph> is negative.","source":"<code>indexA</code>, <code>indexB</code>, or <code>length</code> is negative."},{"pos":[312,316],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[323,425],"content":"Either <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">strA</ph><ept id=\"p1\">&lt;/code&gt;</ept> or <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">strB</ph><ept id=\"p2\">&lt;/code&gt;</ept> is <ph id=\"ph3\">`null`</ph>, and <bpt id=\"p3\">&lt;code&gt;</bpt><ph id=\"ph4\">length</ph><ept id=\"p3\">&lt;/code&gt;</ept> is greater than zero.","source":"Either <code>strA</code> or <code>strB</code> is `null`, and <code>length</code> is greater than zero."}],"pos":[140226,140670],"yaml":true},{"content":"<code>culture</code> is `null`.","nodes":[{"pos":[0,31],"content":"<ph id=\"ph1\">&lt;code&gt;culture&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>culture</code> is `null`."}],"pos":[140772,140804],"yaml":true},{"content":"Compares substrings of two specified <xref href=\"System.String\"></xref> objects using the specified rules, and returns an integer that indicates their relative position in the sort order.","nodes":[{"pos":[0,187],"content":"Compares substrings of two specified <ph id=\"ph1\">&lt;xref href=\"System.String\"&gt;&lt;/xref&gt;</ph> objects using the specified rules, and returns an integer that indicates their relative position in the sort order.","source":"Compares substrings of two specified <xref href=\"System.String\"></xref> objects using the specified rules, and returns an integer that indicates their relative position in the sort order."}],"pos":[142261,142449],"yaml":true},{"content":"The substrings to compare start in `strA` at `indexA` and in `strB` at `indexB`. Both `indexA` and `indexB` are zero-based; that is, the first character in `strA` and `strB` is at position zero, not position one. The length of the first substring is equal to the length of `strA` minus `indexA` plus one. The length of the second substring is equal to the length of `strB` minus `indexB` plus one.  \n  \n The number of characters to compare is the lesser of the lengths of the two substrings, and `length`. The `indexA`, `indexB`, and `length` parameters must be nonnegative.  \n  \n The `comparisonType` parameter indicates whether the comparison should use the current or invariant culture, honor or ignore the case of the comparands, or use word (culture-sensitive) or ordinal (culture-insensitive) sort rules.  \n  \n One or both comparands can be `null`. By definition, any string, including the empty string (\"\"), compares greater than a null reference; and two null references compare equal to each other.  \n  \n The comparison terminates when an inequality is discovered or both substrings have been compared. However, if the two strings compare equal to the end of one string, and the other string has characters remaining, the string with remaining characters is considered greater. The return value is the result of the last comparison performed.  \n  \n Unexpected results can occur when comparisons are affected by culture-specific casing rules. For example, in Turkish, the following example yields the wrong results because the file system in Turkish does not use linguistic casing rules for the letter \"i\" in \"file\".  \n  \n [!code-cpp[System.String.Compare#8](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Compare/cpp/remarks.cpp#8)]\n [!code-csharp[System.String.Compare#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Compare/cs/remarks.cs#8)]\n [!code-vb[System.String.Compare#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Compare/vb/remarks.vb#8)]  \n  \n Compare the path name to \"file\" using an ordinal comparison. The correct code to do this is as follows:  \n  \n [!code-cpp[System.String.Compare#9](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Compare/cpp/remarks.cpp#9)]\n [!code-csharp[System.String.Compare#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Compare/cs/remarks.cs#9)]\n [!code-vb[System.String.Compare#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Compare/vb/remarks.vb#9)]","nodes":[{"pos":[0,397],"content":"The substrings to compare start in `strA` at `indexA` and in `strB` at `indexB`. Both `indexA` and `indexB` are zero-based; that is, the first character in `strA` and `strB` is at position zero, not position one. The length of the first substring is equal to the length of `strA` minus `indexA` plus one. The length of the second substring is equal to the length of `strB` minus `indexB` plus one.","nodes":[{"content":"The substrings to compare start in <ph id=\"ph1\">`strA`</ph> at <ph id=\"ph2\">`indexA`</ph> and in <ph id=\"ph3\">`strB`</ph> at <ph id=\"ph4\">`indexB`</ph>.","pos":[0,80],"source":"The substrings to compare start in `strA` at `indexA` and in `strB` at `indexB`."},{"content":"Both <ph id=\"ph1\">`indexA`</ph> and <ph id=\"ph2\">`indexB`</ph> are zero-based; that is, the first character in <ph id=\"ph3\">`strA`</ph> and <ph id=\"ph4\">`strB`</ph> is at position zero, not position one.","pos":[81,212],"source":" Both `indexA` and `indexB` are zero-based; that is, the first character in `strA` and `strB` is at position zero, not position one."},{"content":"The length of the first substring is equal to the length of <ph id=\"ph1\">`strA`</ph> minus <ph id=\"ph2\">`indexA`</ph> plus one.","pos":[213,304],"source":" The length of the first substring is equal to the length of `strA` minus `indexA` plus one."},{"content":"The length of the second substring is equal to the length of <ph id=\"ph1\">`strB`</ph> minus <ph id=\"ph2\">`indexB`</ph> plus one.","pos":[305,397],"source":" The length of the second substring is equal to the length of `strB` minus `indexB` plus one."}]},{"pos":[404,574],"content":"The number of characters to compare is the lesser of the lengths of the two substrings, and `length`. The `indexA`, `indexB`, and `length` parameters must be nonnegative.","nodes":[{"content":"The number of characters to compare is the lesser of the lengths of the two substrings, and <ph id=\"ph1\">`length`</ph>.","pos":[0,101],"source":"The number of characters to compare is the lesser of the lengths of the two substrings, and `length`."},{"content":"The <ph id=\"ph1\">`indexA`</ph>, <ph id=\"ph2\">`indexB`</ph>, and <ph id=\"ph3\">`length`</ph> parameters must be nonnegative.","pos":[102,170],"source":" The `indexA`, `indexB`, and `length` parameters must be nonnegative."}]},{"pos":[581,810],"content":"The <ph id=\"ph1\">`comparisonType`</ph> parameter indicates whether the comparison should use the current or invariant culture, honor or ignore the case of the comparands, or use word (culture-sensitive) or ordinal (culture-insensitive) sort rules.","source":"The `comparisonType` parameter indicates whether the comparison should use the current or invariant culture, honor or ignore the case of the comparands, or use word (culture-sensitive) or ordinal (culture-insensitive) sort rules."},{"pos":[817,1007],"content":"One or both comparands can be `null`. By definition, any string, including the empty string (\"\"), compares greater than a null reference; and two null references compare equal to each other.","nodes":[{"content":"One or both comparands can be <ph id=\"ph1\">`null`</ph>.","pos":[0,37],"source":"One or both comparands can be `null`."},{"content":"By definition, any string, including the empty string (\"\"), compares greater than a null reference; and two null references compare equal to each other.","pos":[38,190]}]},{"pos":[1014,1351],"content":"The comparison terminates when an inequality is discovered or both substrings have been compared. However, if the two strings compare equal to the end of one string, and the other string has characters remaining, the string with remaining characters is considered greater. The return value is the result of the last comparison performed.","nodes":[{"content":"The comparison terminates when an inequality is discovered or both substrings have been compared. However, if the two strings compare equal to the end of one string, and the other string has characters remaining, the string with remaining characters is considered greater. The return value is the result of the last comparison performed.","pos":[0,337],"nodes":[{"content":"The comparison terminates when an inequality is discovered or both substrings have been compared.","pos":[0,97]},{"content":"However, if the two strings compare equal to the end of one string, and the other string has characters remaining, the string with remaining characters is considered greater.","pos":[98,272]},{"content":"The return value is the result of the last comparison performed.","pos":[273,337]}]}]},{"pos":[1358,1624],"content":"Unexpected results can occur when comparisons are affected by culture-specific casing rules. For example, in Turkish, the following example yields the wrong results because the file system in Turkish does not use linguistic casing rules for the letter \"i\" in \"file\".","nodes":[{"content":"Unexpected results can occur when comparisons are affected by culture-specific casing rules. For example, in Turkish, the following example yields the wrong results because the file system in Turkish does not use linguistic casing rules for the letter \"i\" in \"file\".","pos":[0,266],"nodes":[{"content":"Unexpected results can occur when comparisons are affected by culture-specific casing rules.","pos":[0,92]},{"content":"For example, in Turkish, the following example yields the wrong results because the file system in Turkish does not use linguistic casing rules for the letter \"i\" in \"file\".","pos":[93,266]}]}]},{"pos":[1631,2013],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>System.String.Compare#8<ept id=\"p2\">](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Compare/cpp/remarks.cpp#8)</ept><ept id=\"p1\">]</ept> <bpt id=\"p3\">[!code-csharp</bpt><bpt id=\"p4\">[</bpt>System.String.Compare#8<ept id=\"p4\">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Compare/cs/remarks.cs#8)</ept><ept id=\"p3\">]</ept> <bpt id=\"p5\">[!code-vb</bpt><bpt id=\"p6\">[</bpt>System.String.Compare#8<ept id=\"p6\">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Compare/vb/remarks.vb#8)</ept><ept id=\"p5\">]</ept>","source":"[!code-cpp[System.String.Compare#8](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Compare/cpp/remarks.cpp#8)]\n [!code-csharp[System.String.Compare#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Compare/cs/remarks.cs#8)]\n [!code-vb[System.String.Compare#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Compare/vb/remarks.vb#8)]"},{"pos":[2020,2123],"content":"Compare the path name to \"file\" using an ordinal comparison. The correct code to do this is as follows:","nodes":[{"content":"Compare the path name to \"file\" using an ordinal comparison. The correct code to do this is as follows:","pos":[0,103],"nodes":[{"content":"Compare the path name to \"file\" using an ordinal comparison.","pos":[0,60]},{"content":"The correct code to do this is as follows:","pos":[61,103]}]}]},{"pos":[2130,2512],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>System.String.Compare#9<ept id=\"p2\">](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Compare/cpp/remarks.cpp#9)</ept><ept id=\"p1\">]</ept> <bpt id=\"p3\">[!code-csharp</bpt><bpt id=\"p4\">[</bpt>System.String.Compare#9<ept id=\"p4\">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Compare/cs/remarks.cs#9)</ept><ept id=\"p3\">]</ept> <bpt id=\"p5\">[!code-vb</bpt><bpt id=\"p6\">[</bpt>System.String.Compare#9<ept id=\"p6\">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Compare/vb/remarks.vb#9)</ept><ept id=\"p5\">]</ept>","source":"[!code-cpp[System.String.Compare#9](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Compare/cpp/remarks.cpp#9)]\n [!code-csharp[System.String.Compare#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Compare/cs/remarks.cs#9)]\n [!code-vb[System.String.Compare#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Compare/vb/remarks.vb#9)]"}],"pos":[142460,145003],"yaml":true,"extradata":"MT"},{"content":"The first string to use in the comparison.","nodes":[{"pos":[0,42],"content":"The first string to use in the comparison.","nodes":[{"content":"The first string to use in the comparison.","pos":[0,42]}]}],"pos":[145619,145662],"yaml":true},{"content":"The position of the substring within <code>strA</code>.","nodes":[{"pos":[0,55],"content":"The position of the substring within <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">strA</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The position of the substring within <code>strA</code>."}],"pos":[145723,145779],"yaml":true},{"content":"The second string to use in the comparison.","nodes":[{"pos":[0,43],"content":"The second string to use in the comparison.","nodes":[{"content":"The second string to use in the comparison.","pos":[0,43]}]}],"pos":[145839,145883],"yaml":true},{"content":"The position of the substring within <code>strB</code>.","nodes":[{"pos":[0,55],"content":"The position of the substring within <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">strB</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The position of the substring within <code>strB</code>."}],"pos":[145944,146000],"yaml":true},{"content":"The maximum number of characters in the substrings to compare.","nodes":[{"pos":[0,62],"content":"The maximum number of characters in the substrings to compare.","nodes":[{"content":"The maximum number of characters in the substrings to compare.","pos":[0,62]}]}],"pos":[146061,146124],"yaml":true},{"content":"One of the enumeration values that specifies the rules to use in the comparison.","nodes":[{"pos":[0,80],"content":"One of the enumeration values that specifies the rules to use in the comparison.","nodes":[{"content":"One of the enumeration values that specifies the rules to use in the comparison.","pos":[0,80]}]}],"pos":[146204,146285],"yaml":true},{"content":"A 32-bit signed integer that indicates the lexical relationship between the two comparands.  \n  \n <table><thead><tr><th> Value  \n  \n </th><th> Condition  \n  \n </th></tr></thead><tbody><tr><td> Less than zero  \n  \n </td><td> The substring in <code>strA</code> precedes the substring in <code>strB</code> in the sort order.  \n  \n </td></tr><tr><td> Zero  \n  \n </td><td> The substrings occur in the same position in the sort order, or the <code>length</code> parameter is zero.  \n  \n </td></tr><tr><td> Greater than zero  \n  \n </td><td> The substring in <code>strA</code> follllows the substring in <code>strB</code> in the sort order.  \n  \n </td></tr></tbody></table>","nodes":[{"pos":[0,91],"content":"A 32-bit signed integer that indicates the lexical relationship between the two comparands.","nodes":[{"content":"A 32-bit signed integer that indicates the lexical relationship between the two comparands.","pos":[0,91]}]},{"pos":[98,666],"content":"<table><thead><tr><th> Value  \n  \n </th><th> Condition  \n  \n </th></tr></thead><tbody><tr><td> Less than zero  \n  \n </td><td> The substring in <code>strA</code> precedes the substring in <code>strB</code> in the sort order.  \n  \n </td></tr><tr><td> Zero  \n  \n </td><td> The substrings occur in the same position in the sort order, or the <code>length</code> parameter is zero.  \n  \n </td></tr><tr><td> Greater than zero  \n  \n </td><td> The substring in <code>strA</code> follllows the substring in <code>strB</code> in the sort order.  \n  \n </td></tr></tbody></table>","nodes":[{"content":"Value","pos":[23,33],"source":" Value  \n  \n "},{"content":"Condition","pos":[45,59],"source":" Condition  \n  \n "},{"content":"Less than zero","pos":[95,114],"source":" Less than zero  \n  \n "},{"content":" The substring in <code>strA</code> precedes the substring in <code>strB</code> in the sort order.  \n  \n ","pos":[125,230],"nodes":[{"content":"The substring in <ph id=\"ph1\">&lt;code&gt;strA&lt;/code&gt;</ph> precedes the substring in <ph id=\"ph2\">&lt;code&gt;strB&lt;/code&gt;</ph> in the sort order.","pos":[1,98],"source":" The substring in <code>strA</code> precedes the substring in <code>strB</code> in the sort order."}]},{"content":"Zero","pos":[249,258],"source":" Zero  \n  \n "},{"content":" The substrings occur in the same position in the sort order, or the <code>length</code> parameter is zero.  \n  \n ","pos":[269,383],"nodes":[{"content":"The substrings occur in the same position in the sort order, or the <ph id=\"ph1\">&lt;code&gt;length&lt;/code&gt;</ph> parameter is zero.","pos":[1,107],"source":" The substrings occur in the same position in the sort order, or the <code>length</code> parameter is zero."}]},{"content":"Greater than zero","pos":[402,424],"source":" Greater than zero  \n  \n "},{"content":" The substring in <code>strA</code> follllows the substring in <code>strB</code> in the sort order.  \n  \n ","pos":[435,541],"nodes":[{"content":"The substring in <ph id=\"ph1\">&lt;code&gt;strA&lt;/code&gt;</ph> follllows the substring in <ph id=\"ph2\">&lt;code&gt;strB&lt;/code&gt;</ph> in the sort order.","pos":[1,99],"source":" The substring in <code>strA</code> follllows the substring in <code>strB</code> in the sort order."}]}]}],"pos":[146341,147027],"yaml":true},{"content":"<code>indexA</code> is greater than <code>strA</code>.<xref href=\"System.String.Length\"></xref>.  \n  \n -or-  \n  \n <code>indexB</code> is greater than <code>strB</code>.<xref href=\"System.String.Length\"></xref>.  \n  \n -or-  \n  \n <code>indexA</code>, <code>indexB</code>, or <code>length</code> is negative.  \n  \n -or-  \n  \n Either <code>indexA</code> or <code>indexB</code> is `null`, and <code>length</code> is greater than zero.","nodes":[{"pos":[0,96],"content":"<ph id=\"ph1\">&lt;code&gt;indexA&lt;/code&gt;</ph> is greater than <ph id=\"ph2\">&lt;code&gt;strA&lt;/code&gt;</ph>.<ph id=\"ph3\">&lt;xref href=\"System.String.Length\"&gt;&lt;/xref&gt;</ph>.","source":"<code>indexA</code> is greater than <code>strA</code>.<xref href=\"System.String.Length\"></xref>."},{"pos":[103,107],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[114,210],"content":"<ph id=\"ph1\">&lt;code&gt;indexB&lt;/code&gt;</ph> is greater than <ph id=\"ph2\">&lt;code&gt;strB&lt;/code&gt;</ph>.<ph id=\"ph3\">&lt;xref href=\"System.String.Length\"&gt;&lt;/xref&gt;</ph>.","source":"<code>indexB</code> is greater than <code>strB</code>.<xref href=\"System.String.Length\"></xref>."},{"pos":[217,221],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[228,305],"content":"<ph id=\"ph1\">&lt;code&gt;indexA&lt;/code&gt;</ph>, <ph id=\"ph2\">&lt;code&gt;indexB&lt;/code&gt;</ph>, or <ph id=\"ph3\">&lt;code&gt;length&lt;/code&gt;</ph> is negative.","source":"<code>indexA</code>, <code>indexB</code>, or <code>length</code> is negative."},{"pos":[312,316],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[323,429],"content":"Either <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">indexA</ph><ept id=\"p1\">&lt;/code&gt;</ept> or <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">indexB</ph><ept id=\"p2\">&lt;/code&gt;</ept> is <ph id=\"ph3\">`null`</ph>, and <bpt id=\"p3\">&lt;code&gt;</bpt><ph id=\"ph4\">length</ph><ept id=\"p3\">&lt;/code&gt;</ept> is greater than zero.","source":"Either <code>indexA</code> or <code>indexB</code> is `null`, and <code>length</code> is greater than zero."}],"pos":[147190,147638],"yaml":true},{"content":"<code>comparisonType</code> is not a <xref href=\"System.StringComparison\"></xref> value.","nodes":[{"pos":[0,88],"content":"<ph id=\"ph1\">&lt;code&gt;comparisonType&lt;/code&gt;</ph> is not a <ph id=\"ph2\">&lt;xref href=\"System.StringComparison\"&gt;&lt;/xref&gt;</ph> value.","source":"<code>comparisonType</code> is not a <xref href=\"System.StringComparison\"></xref> value."}],"pos":[147732,147821],"yaml":true},{"content":"Compares substrings of two specified <xref href=\"System.String\"></xref> objects, ignoring or honoring their case, and returns an integer that indicates their relative position in the sort order.","nodes":[{"pos":[0,194],"content":"Compares substrings of two specified <ph id=\"ph1\">&lt;xref href=\"System.String\"&gt;&lt;/xref&gt;</ph> objects, ignoring or honoring their case, and returns an integer that indicates their relative position in the sort order.","source":"Compares substrings of two specified <xref href=\"System.String\"></xref> objects, ignoring or honoring their case, and returns an integer that indicates their relative position in the sort order."}],"pos":[149585,149780],"yaml":true},{"content":"The substrings to compare start in `strA` at `indexA`, and in `strB` at `indexB`. Both `indexA` and `indexB` are zero-based; that is, the first character in `strA` and `strB` is at position zero. The length of the first substring is equal to the length of `strA` minus `indexA` plus one. The length of the second substring is equal to the length of `strB` minus `indexB` plus one.  \n  \n The number of characters to compare is the lesser of the lengths of the two substrings, and `length`. The `indexA`, `indexB`, and `length` parameters must be nonnegative.  \n  \n The comparison uses the current culture to obtain culture-specific information such as casing rules and the alphabetic order of individual characters. For example, a culture could specify that certain combinations of characters be treated as a single character, or uppercase and lowercase characters be compared in a particular way, or that the sorting order of a character depends on the characters that precede or follow it.  \n  \n The comparison is performed using word sort rules. For more information about word, string, and ordinal sorts, see <xref:System.Globalization.CompareOptions?displayProperty=fullName>.  \n  \n> [!WARNING]\n>  When comparing strings, you should call the <xref:System.String.Compare%28System.String%2CSystem.Int32%2CSystem.String%2CSystem.Int32%2CSystem.Int32%2CSystem.StringComparison%29> method, which requires that you explicitly specify the type of string comparison that the method uses. For more information, see [Best Practices for Using Strings](~/docs/standard/base-types/best-practices-strings.md).  \n  \n One or both comparands can be `null`. By definition, any string, including the empty string (\"\"), compares greater than a null reference; and two null references compare equal to each other.  \n  \n The comparison terminates when an inequality is discovered or both substrings have been compared. However, if the two strings compare equal to the end of one string, and the other string has characters remaining, then the string with remaining characters is considered greater. The return value is the result of the last comparison performed.  \n  \n Unexpected results can occur when comparisons are affected by culture-specific casing rules. For example, in Turkish, the following example yields the wrong results because the file system in Turkish does not use linguistic casing rules for the letter \"i\" in \"file\".  \n  \n [!code-cpp[System.String.Compare#4](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Compare/cpp/remarks.cpp#4)]\n [!code-csharp[System.String.Compare#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Compare/cs/remarks.cs#4)]\n [!code-vb[System.String.Compare#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Compare/vb/remarks.vb#4)]  \n  \n The path name needs to be compared in an invariant manner. The correct code to do this is as follows.  \n  \n [!code-cpp[System.String.Compare#5](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Compare/cpp/remarks.cpp#5)]\n [!code-csharp[System.String.Compare#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Compare/cs/remarks.cs#5)]\n [!code-vb[System.String.Compare#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Compare/vb/remarks.vb#5)]","nodes":[{"pos":[0,380],"content":"The substrings to compare start in `strA` at `indexA`, and in `strB` at `indexB`. Both `indexA` and `indexB` are zero-based; that is, the first character in `strA` and `strB` is at position zero. The length of the first substring is equal to the length of `strA` minus `indexA` plus one. The length of the second substring is equal to the length of `strB` minus `indexB` plus one.","nodes":[{"content":"The substrings to compare start in <ph id=\"ph1\">`strA`</ph> at <ph id=\"ph2\">`indexA`</ph>, and in <ph id=\"ph3\">`strB`</ph> at <ph id=\"ph4\">`indexB`</ph>.","pos":[0,81],"source":"The substrings to compare start in `strA` at `indexA`, and in `strB` at `indexB`."},{"content":"Both <ph id=\"ph1\">`indexA`</ph> and <ph id=\"ph2\">`indexB`</ph> are zero-based; that is, the first character in <ph id=\"ph3\">`strA`</ph> and <ph id=\"ph4\">`strB`</ph> is at position zero.","pos":[82,195],"source":" Both `indexA` and `indexB` are zero-based; that is, the first character in `strA` and `strB` is at position zero."},{"content":"The length of the first substring is equal to the length of <ph id=\"ph1\">`strA`</ph> minus <ph id=\"ph2\">`indexA`</ph> plus one.","pos":[196,287],"source":" The length of the first substring is equal to the length of `strA` minus `indexA` plus one."},{"content":"The length of the second substring is equal to the length of <ph id=\"ph1\">`strB`</ph> minus <ph id=\"ph2\">`indexB`</ph> plus one.","pos":[288,380],"source":" The length of the second substring is equal to the length of `strB` minus `indexB` plus one."}]},{"pos":[387,557],"content":"The number of characters to compare is the lesser of the lengths of the two substrings, and `length`. The `indexA`, `indexB`, and `length` parameters must be nonnegative.","nodes":[{"content":"The number of characters to compare is the lesser of the lengths of the two substrings, and <ph id=\"ph1\">`length`</ph>.","pos":[0,101],"source":"The number of characters to compare is the lesser of the lengths of the two substrings, and `length`."},{"content":"The <ph id=\"ph1\">`indexA`</ph>, <ph id=\"ph2\">`indexB`</ph>, and <ph id=\"ph3\">`length`</ph> parameters must be nonnegative.","pos":[102,170],"source":" The `indexA`, `indexB`, and `length` parameters must be nonnegative."}]},{"pos":[564,990],"content":"The comparison uses the current culture to obtain culture-specific information such as casing rules and the alphabetic order of individual characters. For example, a culture could specify that certain combinations of characters be treated as a single character, or uppercase and lowercase characters be compared in a particular way, or that the sorting order of a character depends on the characters that precede or follow it.","nodes":[{"content":"The comparison uses the current culture to obtain culture-specific information such as casing rules and the alphabetic order of individual characters. For example, a culture could specify that certain combinations of characters be treated as a single character, or uppercase and lowercase characters be compared in a particular way, or that the sorting order of a character depends on the characters that precede or follow it.","pos":[0,426],"nodes":[{"content":"The comparison uses the current culture to obtain culture-specific information such as casing rules and the alphabetic order of individual characters.","pos":[0,150]},{"content":"For example, a culture could specify that certain combinations of characters be treated as a single character, or uppercase and lowercase characters be compared in a particular way, or that the sorting order of a character depends on the characters that precede or follow it.","pos":[151,426]}]}]},{"pos":[997,1180],"content":"The comparison is performed using word sort rules. For more information about word, string, and ordinal sorts, see <xref:System.Globalization.CompareOptions?displayProperty=fullName>.","nodes":[{"content":"The comparison is performed using word sort rules. For more information about word, string, and ordinal sorts, see <xref:System.Globalization.CompareOptions?displayProperty=fullName>.","pos":[0,183],"nodes":[{"content":"The comparison is performed using word sort rules.","pos":[0,50]},{"content":"For more information about word, string, and ordinal sorts, see <ph id=\"ph1\">&lt;xref:System.Globalization.CompareOptions?displayProperty=fullName&gt;</ph>.","pos":[51,183],"source":" For more information about word, string, and ordinal sorts, see <xref:System.Globalization.CompareOptions?displayProperty=fullName>."}]}]},{"pos":[1188,1599],"content":"[!WARNING]\n When comparing strings, you should call the <xref:System.String.Compare%28System.String%2CSystem.Int32%2CSystem.String%2CSystem.Int32%2CSystem.Int32%2CSystem.StringComparison%29> method, which requires that you explicitly specify the type of string comparison that the method uses. For more information, see [Best Practices for Using Strings](~/docs/standard/base-types/best-practices-strings.md).","leadings":["","> "],"nodes":[{"content":" When comparing strings, you should call the <xref:System.String.Compare%28System.String%2CSystem.Int32%2CSystem.String%2CSystem.Int32%2CSystem.Int32%2CSystem.StringComparison%29> method, which requires that you explicitly specify the type of string comparison that the method uses. For more information, see [Best Practices for Using Strings](~/docs/standard/base-types/best-practices-strings.md).","pos":[11,409],"nodes":[{"content":"When comparing strings, you should call the <ph id=\"ph1\">&lt;xref:System.String.Compare%28System.String%2CSystem.Int32%2CSystem.String%2CSystem.Int32%2CSystem.Int32%2CSystem.StringComparison%29&gt;</ph> method, which requires that you explicitly specify the type of string comparison that the method uses.","pos":[1,282],"source":" When comparing strings, you should call the <xref:System.String.Compare%28System.String%2CSystem.Int32%2CSystem.String%2CSystem.Int32%2CSystem.Int32%2CSystem.StringComparison%29> method, which requires that you explicitly specify the type of string comparison that the method uses."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Best Practices for Using Strings<ept id=\"p1\">](~/docs/standard/base-types/best-practices-strings.md)</ept>.","pos":[283,398],"source":" For more information, see [Best Practices for Using Strings](~/docs/standard/base-types/best-practices-strings.md)."}]}]},{"pos":[1606,1796],"content":"One or both comparands can be `null`. By definition, any string, including the empty string (\"\"), compares greater than a null reference; and two null references compare equal to each other.","nodes":[{"content":"One or both comparands can be <ph id=\"ph1\">`null`</ph>.","pos":[0,37],"source":"One or both comparands can be `null`."},{"content":"By definition, any string, including the empty string (\"\"), compares greater than a null reference; and two null references compare equal to each other.","pos":[38,190]}]},{"pos":[1803,2145],"content":"The comparison terminates when an inequality is discovered or both substrings have been compared. However, if the two strings compare equal to the end of one string, and the other string has characters remaining, then the string with remaining characters is considered greater. The return value is the result of the last comparison performed.","nodes":[{"content":"The comparison terminates when an inequality is discovered or both substrings have been compared. However, if the two strings compare equal to the end of one string, and the other string has characters remaining, then the string with remaining characters is considered greater. The return value is the result of the last comparison performed.","pos":[0,342],"nodes":[{"content":"The comparison terminates when an inequality is discovered or both substrings have been compared.","pos":[0,97]},{"content":"However, if the two strings compare equal to the end of one string, and the other string has characters remaining, then the string with remaining characters is considered greater.","pos":[98,277]},{"content":"The return value is the result of the last comparison performed.","pos":[278,342]}]}]},{"pos":[2152,2418],"content":"Unexpected results can occur when comparisons are affected by culture-specific casing rules. For example, in Turkish, the following example yields the wrong results because the file system in Turkish does not use linguistic casing rules for the letter \"i\" in \"file\".","nodes":[{"content":"Unexpected results can occur when comparisons are affected by culture-specific casing rules. For example, in Turkish, the following example yields the wrong results because the file system in Turkish does not use linguistic casing rules for the letter \"i\" in \"file\".","pos":[0,266],"nodes":[{"content":"Unexpected results can occur when comparisons are affected by culture-specific casing rules.","pos":[0,92]},{"content":"For example, in Turkish, the following example yields the wrong results because the file system in Turkish does not use linguistic casing rules for the letter \"i\" in \"file\".","pos":[93,266]}]}]},{"pos":[2425,2807],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>System.String.Compare#4<ept id=\"p2\">](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Compare/cpp/remarks.cpp#4)</ept><ept id=\"p1\">]</ept> <bpt id=\"p3\">[!code-csharp</bpt><bpt id=\"p4\">[</bpt>System.String.Compare#4<ept id=\"p4\">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Compare/cs/remarks.cs#4)</ept><ept id=\"p3\">]</ept> <bpt id=\"p5\">[!code-vb</bpt><bpt id=\"p6\">[</bpt>System.String.Compare#4<ept id=\"p6\">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Compare/vb/remarks.vb#4)</ept><ept id=\"p5\">]</ept>","source":"[!code-cpp[System.String.Compare#4](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Compare/cpp/remarks.cpp#4)]\n [!code-csharp[System.String.Compare#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Compare/cs/remarks.cs#4)]\n [!code-vb[System.String.Compare#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Compare/vb/remarks.vb#4)]"},{"pos":[2814,2915],"content":"The path name needs to be compared in an invariant manner. The correct code to do this is as follows.","nodes":[{"content":"The path name needs to be compared in an invariant manner. The correct code to do this is as follows.","pos":[0,101],"nodes":[{"content":"The path name needs to be compared in an invariant manner.","pos":[0,58]},{"content":"The correct code to do this is as follows.","pos":[59,101]}]}]},{"pos":[2922,3304],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>System.String.Compare#5<ept id=\"p2\">](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Compare/cpp/remarks.cpp#5)</ept><ept id=\"p1\">]</ept> <bpt id=\"p3\">[!code-csharp</bpt><bpt id=\"p4\">[</bpt>System.String.Compare#5<ept id=\"p4\">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Compare/cs/remarks.cs#5)</ept><ept id=\"p3\">]</ept> <bpt id=\"p5\">[!code-vb</bpt><bpt id=\"p6\">[</bpt>System.String.Compare#5<ept id=\"p6\">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Compare/vb/remarks.vb#5)</ept><ept id=\"p5\">]</ept>","source":"[!code-cpp[System.String.Compare#5](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Compare/cpp/remarks.cpp#5)]\n [!code-csharp[System.String.Compare#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Compare/cs/remarks.cs#5)]\n [!code-vb[System.String.Compare#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Compare/vb/remarks.vb#5)]"}],"pos":[149791,153129],"yaml":true,"extradata":"MT"},{"content":"The first string to use in the comparison.","nodes":[{"pos":[0,42],"content":"The first string to use in the comparison.","nodes":[{"content":"The first string to use in the comparison.","pos":[0,42]}]}],"pos":[153849,153892],"yaml":true},{"content":"The position of the substring within <code>strA</code>.","nodes":[{"pos":[0,55],"content":"The position of the substring within <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">strA</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The position of the substring within <code>strA</code>."}],"pos":[153953,154009],"yaml":true},{"content":"The second string to use in the comparison.","nodes":[{"pos":[0,43],"content":"The second string to use in the comparison.","nodes":[{"content":"The second string to use in the comparison.","pos":[0,43]}]}],"pos":[154069,154113],"yaml":true},{"content":"The position of the substring within <code>strB</code>.","nodes":[{"pos":[0,55],"content":"The position of the substring within <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">strB</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The position of the substring within <code>strB</code>."}],"pos":[154174,154230],"yaml":true},{"content":"The maximum number of characters in the substrings to compare.","nodes":[{"pos":[0,62],"content":"The maximum number of characters in the substrings to compare.","nodes":[{"content":"The maximum number of characters in the substrings to compare.","pos":[0,62]}]}],"pos":[154291,154354],"yaml":true},{"content":"`true` to ignore case during the comparison; otherwise, `false`.","nodes":[{"pos":[0,64],"content":"<ph id=\"ph1\">`true`</ph> to ignore case during the comparison; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` to ignore case during the comparison; otherwise, `false`."}],"pos":[154421,154488],"yaml":true},{"content":"A 32-bit signed integer that indicates the lexical relationship between the two comparands.  \n  \n <table><thead><tr><th> Value  \n  \n </th><th> Condition  \n  \n </th></tr></thead><tbody><tr><td> Less than zero  \n  \n </td><td> The substring in <code>strA</code> precedes the substring in <code>strB</code> in the sort order.  \n  \n </td></tr><tr><td> Zero  \n  \n </td><td> The substrings occur in the same position in the sort order, or <code>length</code> is zero.  \n  \n </td></tr><tr><td> Greater than zero  \n  \n </td><td> The substring in <code>strA</code> follows the substring in <code>strB</code> in the sort order.  \n  \n </td></tr></tbody></table>","nodes":[{"pos":[0,91],"content":"A 32-bit signed integer that indicates the lexical relationship between the two comparands.","nodes":[{"content":"A 32-bit signed integer that indicates the lexical relationship between the two comparands.","pos":[0,91]}]},{"pos":[98,650],"content":"<table><thead><tr><th> Value  \n  \n </th><th> Condition  \n  \n </th></tr></thead><tbody><tr><td> Less than zero  \n  \n </td><td> The substring in <code>strA</code> precedes the substring in <code>strB</code> in the sort order.  \n  \n </td></tr><tr><td> Zero  \n  \n </td><td> The substrings occur in the same position in the sort order, or <code>length</code> is zero.  \n  \n </td></tr><tr><td> Greater than zero  \n  \n </td><td> The substring in <code>strA</code> follows the substring in <code>strB</code> in the sort order.  \n  \n </td></tr></tbody></table>","nodes":[{"content":"Value","pos":[23,33],"source":" Value  \n  \n "},{"content":"Condition","pos":[45,59],"source":" Condition  \n  \n "},{"content":"Less than zero","pos":[95,114],"source":" Less than zero  \n  \n "},{"content":" The substring in <code>strA</code> precedes the substring in <code>strB</code> in the sort order.  \n  \n ","pos":[125,230],"nodes":[{"content":"The substring in <ph id=\"ph1\">&lt;code&gt;strA&lt;/code&gt;</ph> precedes the substring in <ph id=\"ph2\">&lt;code&gt;strB&lt;/code&gt;</ph> in the sort order.","pos":[1,98],"source":" The substring in <code>strA</code> precedes the substring in <code>strB</code> in the sort order."}]},{"content":"Zero","pos":[249,258],"source":" Zero  \n  \n "},{"content":" The substrings occur in the same position in the sort order, or <code>length</code> is zero.  \n  \n ","pos":[269,369],"nodes":[{"content":"The substrings occur in the same position in the sort order, or <ph id=\"ph1\">&lt;code&gt;length&lt;/code&gt;</ph> is zero.","pos":[1,93],"source":" The substrings occur in the same position in the sort order, or <code>length</code> is zero."}]},{"content":"Greater than zero","pos":[388,410],"source":" Greater than zero  \n  \n "},{"content":" The substring in <code>strA</code> follows the substring in <code>strB</code> in the sort order.  \n  \n ","pos":[421,525],"nodes":[{"content":"The substring in <ph id=\"ph1\">&lt;code&gt;strA&lt;/code&gt;</ph> follows the substring in <ph id=\"ph2\">&lt;code&gt;strB&lt;/code&gt;</ph> in the sort order.","pos":[1,97],"source":" The substring in <code>strA</code> follows the substring in <code>strB</code> in the sort order."}]}]}],"pos":[154544,155214],"yaml":true},{"content":"<code>indexA</code> is greater than <code>strA</code>.<xref href=\"System.String.Length\"></xref>.  \n  \n -or-  \n  \n <code>indexB</code> is greater than <code>strB</code>.<xref href=\"System.String.Length\"></xref>.  \n  \n -or-  \n  \n <code>indexA</code>, <code>indexB</code>, or <code>length</code> is negative.  \n  \n -or-  \n  \n Either <code>indexA</code> or <code>indexB</code> is `null`, and <code>length</code> is greater than zero.","nodes":[{"pos":[0,96],"content":"<ph id=\"ph1\">&lt;code&gt;indexA&lt;/code&gt;</ph> is greater than <ph id=\"ph2\">&lt;code&gt;strA&lt;/code&gt;</ph>.<ph id=\"ph3\">&lt;xref href=\"System.String.Length\"&gt;&lt;/xref&gt;</ph>.","source":"<code>indexA</code> is greater than <code>strA</code>.<xref href=\"System.String.Length\"></xref>."},{"pos":[103,107],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[114,210],"content":"<ph id=\"ph1\">&lt;code&gt;indexB&lt;/code&gt;</ph> is greater than <ph id=\"ph2\">&lt;code&gt;strB&lt;/code&gt;</ph>.<ph id=\"ph3\">&lt;xref href=\"System.String.Length\"&gt;&lt;/xref&gt;</ph>.","source":"<code>indexB</code> is greater than <code>strB</code>.<xref href=\"System.String.Length\"></xref>."},{"pos":[217,221],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[228,305],"content":"<ph id=\"ph1\">&lt;code&gt;indexA&lt;/code&gt;</ph>, <ph id=\"ph2\">&lt;code&gt;indexB&lt;/code&gt;</ph>, or <ph id=\"ph3\">&lt;code&gt;length&lt;/code&gt;</ph> is negative.","source":"<code>indexA</code>, <code>indexB</code>, or <code>length</code> is negative."},{"pos":[312,316],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[323,429],"content":"Either <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">indexA</ph><ept id=\"p1\">&lt;/code&gt;</ept> or <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">indexB</ph><ept id=\"p2\">&lt;/code&gt;</ept> is <ph id=\"ph3\">`null`</ph>, and <bpt id=\"p3\">&lt;code&gt;</bpt><ph id=\"ph4\">length</ph><ept id=\"p3\">&lt;/code&gt;</ept> is greater than zero.","source":"Either <code>indexA</code> or <code>indexB</code> is `null`, and <code>length</code> is greater than zero."}],"pos":[155377,155825],"yaml":true},{"content":"Compares substrings of two specified <xref href=\"System.String\"></xref> objects and returns an integer that indicates their relative position in the sort order.","nodes":[{"pos":[0,160],"content":"Compares substrings of two specified <ph id=\"ph1\">&lt;xref href=\"System.String\"&gt;&lt;/xref&gt;</ph> objects and returns an integer that indicates their relative position in the sort order.","source":"Compares substrings of two specified <xref href=\"System.String\"></xref> objects and returns an integer that indicates their relative position in the sort order."}],"pos":[157156,157317],"yaml":true},{"content":"The substrings to compare start in `strA` at `indexA` and in `strB` at `indexB`. Both `indexA` and `indexB` are zero-based; that is, the first character in `strA` and `strB` is at position zero. The length of the first substring is equal to the length of `strA` minus `indexA` plus one. The length of the second substring is equal to the length of `strB` minus `indexB` plus one.  \n  \n The number of characters to compare is the lesser of the lengths of the two substrings, and `length`. The `indexA`, `indexB`, and `length` parameters must be nonnegative.  \n  \n The comparison uses the current culture to obtain culture-specific information such as casing rules and the alphabetic order of individual characters. For example, a culture could specify that certain combinations of characters be treated as a single character, or uppercase and lowercase characters be compared in a particular way, or that the sorting order of a character depends on the characters that precede or follow it.  \n  \n The comparison is performed using word sort rules. For more information about word, string, and ordinal sorts, see <xref:System.Globalization.CompareOptions?displayProperty=fullName>.  \n  \n> [!WARNING]\n>  When comparing strings, you should call the <xref:System.String.Compare%28System.String%2CSystem.Int32%2CSystem.String%2CSystem.Int32%2CSystem.Int32%2CSystem.StringComparison%29> method, which requires that you explicitly specify the type of string comparison that the method uses. For more information, see [Best Practices for Using Strings](~/docs/standard/base-types/best-practices-strings.md).  \n  \n One or both comparands can be `null`. By definition, any string, including the empty string (\"\"), compares greater than a null reference; and two null references compare equal to each other.  \n  \n The comparison terminates when an inequality is discovered or both substrings have been compared. However, if the two strings compare equal to the end of one string, and the other string has characters remaining, then the string with remaining characters is considered greater. The return value is the result of the last comparison performed.  \n  \n Unexpected results can occur when comparisons are affected by culture-specific casing rules. For example, in Turkish, the following example yields the wrong results because the file system in Turkish does not use linguistic casing rules for the letter \"i\" in \"file\".  \n  \n [!code-cpp[System.String.Compare#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Compare/cpp/remarks.cpp#2)]\n [!code-csharp[System.String.Compare#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Compare/cs/remarks.cs#2)]\n [!code-vb[System.String.Compare#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Compare/vb/remarks.vb#2)]  \n  \n Compare the path name to \"file\" using an ordinal comparison. The correct code to do this is as follows:  \n  \n [!code-cpp[System.String.Compare#3](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Compare/cpp/remarks.cpp#3)]\n [!code-csharp[System.String.Compare#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Compare/cs/remarks.cs#3)]\n [!code-vb[System.String.Compare#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Compare/vb/remarks.vb#3)]","nodes":[{"pos":[0,379],"content":"The substrings to compare start in `strA` at `indexA` and in `strB` at `indexB`. Both `indexA` and `indexB` are zero-based; that is, the first character in `strA` and `strB` is at position zero. The length of the first substring is equal to the length of `strA` minus `indexA` plus one. The length of the second substring is equal to the length of `strB` minus `indexB` plus one.","nodes":[{"content":"The substrings to compare start in <ph id=\"ph1\">`strA`</ph> at <ph id=\"ph2\">`indexA`</ph> and in <ph id=\"ph3\">`strB`</ph> at <ph id=\"ph4\">`indexB`</ph>.","pos":[0,80],"source":"The substrings to compare start in `strA` at `indexA` and in `strB` at `indexB`."},{"content":"Both <ph id=\"ph1\">`indexA`</ph> and <ph id=\"ph2\">`indexB`</ph> are zero-based; that is, the first character in <ph id=\"ph3\">`strA`</ph> and <ph id=\"ph4\">`strB`</ph> is at position zero.","pos":[81,194],"source":" Both `indexA` and `indexB` are zero-based; that is, the first character in `strA` and `strB` is at position zero."},{"content":"The length of the first substring is equal to the length of <ph id=\"ph1\">`strA`</ph> minus <ph id=\"ph2\">`indexA`</ph> plus one.","pos":[195,286],"source":" The length of the first substring is equal to the length of `strA` minus `indexA` plus one."},{"content":"The length of the second substring is equal to the length of <ph id=\"ph1\">`strB`</ph> minus <ph id=\"ph2\">`indexB`</ph> plus one.","pos":[287,379],"source":" The length of the second substring is equal to the length of `strB` minus `indexB` plus one."}]},{"pos":[386,556],"content":"The number of characters to compare is the lesser of the lengths of the two substrings, and `length`. The `indexA`, `indexB`, and `length` parameters must be nonnegative.","nodes":[{"content":"The number of characters to compare is the lesser of the lengths of the two substrings, and <ph id=\"ph1\">`length`</ph>.","pos":[0,101],"source":"The number of characters to compare is the lesser of the lengths of the two substrings, and `length`."},{"content":"The <ph id=\"ph1\">`indexA`</ph>, <ph id=\"ph2\">`indexB`</ph>, and <ph id=\"ph3\">`length`</ph> parameters must be nonnegative.","pos":[102,170],"source":" The `indexA`, `indexB`, and `length` parameters must be nonnegative."}]},{"pos":[563,989],"content":"The comparison uses the current culture to obtain culture-specific information such as casing rules and the alphabetic order of individual characters. For example, a culture could specify that certain combinations of characters be treated as a single character, or uppercase and lowercase characters be compared in a particular way, or that the sorting order of a character depends on the characters that precede or follow it.","nodes":[{"content":"The comparison uses the current culture to obtain culture-specific information such as casing rules and the alphabetic order of individual characters. For example, a culture could specify that certain combinations of characters be treated as a single character, or uppercase and lowercase characters be compared in a particular way, or that the sorting order of a character depends on the characters that precede or follow it.","pos":[0,426],"nodes":[{"content":"The comparison uses the current culture to obtain culture-specific information such as casing rules and the alphabetic order of individual characters.","pos":[0,150]},{"content":"For example, a culture could specify that certain combinations of characters be treated as a single character, or uppercase and lowercase characters be compared in a particular way, or that the sorting order of a character depends on the characters that precede or follow it.","pos":[151,426]}]}]},{"pos":[996,1179],"content":"The comparison is performed using word sort rules. For more information about word, string, and ordinal sorts, see <xref:System.Globalization.CompareOptions?displayProperty=fullName>.","nodes":[{"content":"The comparison is performed using word sort rules. For more information about word, string, and ordinal sorts, see <xref:System.Globalization.CompareOptions?displayProperty=fullName>.","pos":[0,183],"nodes":[{"content":"The comparison is performed using word sort rules.","pos":[0,50]},{"content":"For more information about word, string, and ordinal sorts, see <ph id=\"ph1\">&lt;xref:System.Globalization.CompareOptions?displayProperty=fullName&gt;</ph>.","pos":[51,183],"source":" For more information about word, string, and ordinal sorts, see <xref:System.Globalization.CompareOptions?displayProperty=fullName>."}]}]},{"pos":[1187,1598],"content":"[!WARNING]\n When comparing strings, you should call the <xref:System.String.Compare%28System.String%2CSystem.Int32%2CSystem.String%2CSystem.Int32%2CSystem.Int32%2CSystem.StringComparison%29> method, which requires that you explicitly specify the type of string comparison that the method uses. For more information, see [Best Practices for Using Strings](~/docs/standard/base-types/best-practices-strings.md).","leadings":["","> "],"nodes":[{"content":" When comparing strings, you should call the <xref:System.String.Compare%28System.String%2CSystem.Int32%2CSystem.String%2CSystem.Int32%2CSystem.Int32%2CSystem.StringComparison%29> method, which requires that you explicitly specify the type of string comparison that the method uses. For more information, see [Best Practices for Using Strings](~/docs/standard/base-types/best-practices-strings.md).","pos":[11,409],"nodes":[{"content":"When comparing strings, you should call the <ph id=\"ph1\">&lt;xref:System.String.Compare%28System.String%2CSystem.Int32%2CSystem.String%2CSystem.Int32%2CSystem.Int32%2CSystem.StringComparison%29&gt;</ph> method, which requires that you explicitly specify the type of string comparison that the method uses.","pos":[1,282],"source":" When comparing strings, you should call the <xref:System.String.Compare%28System.String%2CSystem.Int32%2CSystem.String%2CSystem.Int32%2CSystem.Int32%2CSystem.StringComparison%29> method, which requires that you explicitly specify the type of string comparison that the method uses."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Best Practices for Using Strings<ept id=\"p1\">](~/docs/standard/base-types/best-practices-strings.md)</ept>.","pos":[283,398],"source":" For more information, see [Best Practices for Using Strings](~/docs/standard/base-types/best-practices-strings.md)."}]}]},{"pos":[1605,1795],"content":"One or both comparands can be `null`. By definition, any string, including the empty string (\"\"), compares greater than a null reference; and two null references compare equal to each other.","nodes":[{"content":"One or both comparands can be <ph id=\"ph1\">`null`</ph>.","pos":[0,37],"source":"One or both comparands can be `null`."},{"content":"By definition, any string, including the empty string (\"\"), compares greater than a null reference; and two null references compare equal to each other.","pos":[38,190]}]},{"pos":[1802,2144],"content":"The comparison terminates when an inequality is discovered or both substrings have been compared. However, if the two strings compare equal to the end of one string, and the other string has characters remaining, then the string with remaining characters is considered greater. The return value is the result of the last comparison performed.","nodes":[{"content":"The comparison terminates when an inequality is discovered or both substrings have been compared. However, if the two strings compare equal to the end of one string, and the other string has characters remaining, then the string with remaining characters is considered greater. The return value is the result of the last comparison performed.","pos":[0,342],"nodes":[{"content":"The comparison terminates when an inequality is discovered or both substrings have been compared.","pos":[0,97]},{"content":"However, if the two strings compare equal to the end of one string, and the other string has characters remaining, then the string with remaining characters is considered greater.","pos":[98,277]},{"content":"The return value is the result of the last comparison performed.","pos":[278,342]}]}]},{"pos":[2151,2417],"content":"Unexpected results can occur when comparisons are affected by culture-specific casing rules. For example, in Turkish, the following example yields the wrong results because the file system in Turkish does not use linguistic casing rules for the letter \"i\" in \"file\".","nodes":[{"content":"Unexpected results can occur when comparisons are affected by culture-specific casing rules. For example, in Turkish, the following example yields the wrong results because the file system in Turkish does not use linguistic casing rules for the letter \"i\" in \"file\".","pos":[0,266],"nodes":[{"content":"Unexpected results can occur when comparisons are affected by culture-specific casing rules.","pos":[0,92]},{"content":"For example, in Turkish, the following example yields the wrong results because the file system in Turkish does not use linguistic casing rules for the letter \"i\" in \"file\".","pos":[93,266]}]}]},{"pos":[2424,2806],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>System.String.Compare#2<ept id=\"p2\">](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Compare/cpp/remarks.cpp#2)</ept><ept id=\"p1\">]</ept> <bpt id=\"p3\">[!code-csharp</bpt><bpt id=\"p4\">[</bpt>System.String.Compare#2<ept id=\"p4\">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Compare/cs/remarks.cs#2)</ept><ept id=\"p3\">]</ept> <bpt id=\"p5\">[!code-vb</bpt><bpt id=\"p6\">[</bpt>System.String.Compare#2<ept id=\"p6\">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Compare/vb/remarks.vb#2)</ept><ept id=\"p5\">]</ept>","source":"[!code-cpp[System.String.Compare#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Compare/cpp/remarks.cpp#2)]\n [!code-csharp[System.String.Compare#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Compare/cs/remarks.cs#2)]\n [!code-vb[System.String.Compare#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Compare/vb/remarks.vb#2)]"},{"pos":[2813,2916],"content":"Compare the path name to \"file\" using an ordinal comparison. The correct code to do this is as follows:","nodes":[{"content":"Compare the path name to \"file\" using an ordinal comparison. The correct code to do this is as follows:","pos":[0,103],"nodes":[{"content":"Compare the path name to \"file\" using an ordinal comparison.","pos":[0,60]},{"content":"The correct code to do this is as follows:","pos":[61,103]}]}]},{"pos":[2923,3305],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>System.String.Compare#3<ept id=\"p2\">](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Compare/cpp/remarks.cpp#3)</ept><ept id=\"p1\">]</ept> <bpt id=\"p3\">[!code-csharp</bpt><bpt id=\"p4\">[</bpt>System.String.Compare#3<ept id=\"p4\">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Compare/cs/remarks.cs#3)</ept><ept id=\"p3\">]</ept> <bpt id=\"p5\">[!code-vb</bpt><bpt id=\"p6\">[</bpt>System.String.Compare#3<ept id=\"p6\">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Compare/vb/remarks.vb#3)</ept><ept id=\"p5\">]</ept>","source":"[!code-cpp[System.String.Compare#3](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Compare/cpp/remarks.cpp#3)]\n [!code-csharp[System.String.Compare#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Compare/cs/remarks.cs#3)]\n [!code-vb[System.String.Compare#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Compare/vb/remarks.vb#3)]"}],"pos":[157328,160669],"yaml":true,"extradata":"MT"},{"content":"The first string to use in the comparison.","nodes":[{"pos":[0,42],"content":"The first string to use in the comparison.","nodes":[{"content":"The first string to use in the comparison.","pos":[0,42]}]}],"pos":[161252,161295],"yaml":true},{"content":"The position of the substring within <code>strA</code>.","nodes":[{"pos":[0,55],"content":"The position of the substring within <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">strA</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The position of the substring within <code>strA</code>."}],"pos":[161356,161412],"yaml":true},{"content":"The second string to use in the comparison.","nodes":[{"pos":[0,43],"content":"The second string to use in the comparison.","nodes":[{"content":"The second string to use in the comparison.","pos":[0,43]}]}],"pos":[161472,161516],"yaml":true},{"content":"The position of the substring within <code>strB</code>.","nodes":[{"pos":[0,55],"content":"The position of the substring within <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">strB</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The position of the substring within <code>strB</code>."}],"pos":[161577,161633],"yaml":true},{"content":"The maximum number of characters in the substrings to compare.","nodes":[{"pos":[0,62],"content":"The maximum number of characters in the substrings to compare.","nodes":[{"content":"The maximum number of characters in the substrings to compare.","pos":[0,62]}]}],"pos":[161694,161757],"yaml":true},{"content":"A 32-bit signed integer indicating the lexical relationship between the two comparands.  \n  \n <table><thead><tr><th> Value  \n  \n </th><th> Condition  \n  \n </th></tr></thead><tbody><tr><td> Less than zero  \n  \n </td><td> The substring in <code>strA</code> precedes the substring in <code>strB</code> in the sort order.  \n  \n </td></tr><tr><td> Zero  \n  \n </td><td> The substrings occur in the same position in the sort order, or <code>length</code> is zero.  \n  \n </td></tr><tr><td> Greater than zero  \n  \n </td><td> The substring in <code>strA</code> follows the substring in <code>strB</code> in the sort order.  \n  \n </td></tr></tbody></table>","nodes":[{"pos":[0,87],"content":"A 32-bit signed integer indicating the lexical relationship between the two comparands.","nodes":[{"content":"A 32-bit signed integer indicating the lexical relationship between the two comparands.","pos":[0,87]}]},{"pos":[94,646],"content":"<table><thead><tr><th> Value  \n  \n </th><th> Condition  \n  \n </th></tr></thead><tbody><tr><td> Less than zero  \n  \n </td><td> The substring in <code>strA</code> precedes the substring in <code>strB</code> in the sort order.  \n  \n </td></tr><tr><td> Zero  \n  \n </td><td> The substrings occur in the same position in the sort order, or <code>length</code> is zero.  \n  \n </td></tr><tr><td> Greater than zero  \n  \n </td><td> The substring in <code>strA</code> follows the substring in <code>strB</code> in the sort order.  \n  \n </td></tr></tbody></table>","nodes":[{"content":"Value","pos":[23,33],"source":" Value  \n  \n "},{"content":"Condition","pos":[45,59],"source":" Condition  \n  \n "},{"content":"Less than zero","pos":[95,114],"source":" Less than zero  \n  \n "},{"content":" The substring in <code>strA</code> precedes the substring in <code>strB</code> in the sort order.  \n  \n ","pos":[125,230],"nodes":[{"content":"The substring in <ph id=\"ph1\">&lt;code&gt;strA&lt;/code&gt;</ph> precedes the substring in <ph id=\"ph2\">&lt;code&gt;strB&lt;/code&gt;</ph> in the sort order.","pos":[1,98],"source":" The substring in <code>strA</code> precedes the substring in <code>strB</code> in the sort order."}]},{"content":"Zero","pos":[249,258],"source":" Zero  \n  \n "},{"content":" The substrings occur in the same position in the sort order, or <code>length</code> is zero.  \n  \n ","pos":[269,369],"nodes":[{"content":"The substrings occur in the same position in the sort order, or <ph id=\"ph1\">&lt;code&gt;length&lt;/code&gt;</ph> is zero.","pos":[1,93],"source":" The substrings occur in the same position in the sort order, or <code>length</code> is zero."}]},{"content":"Greater than zero","pos":[388,410],"source":" Greater than zero  \n  \n "},{"content":" The substring in <code>strA</code> follows the substring in <code>strB</code> in the sort order.  \n  \n ","pos":[421,525],"nodes":[{"content":"The substring in <ph id=\"ph1\">&lt;code&gt;strA&lt;/code&gt;</ph> follows the substring in <ph id=\"ph2\">&lt;code&gt;strB&lt;/code&gt;</ph> in the sort order.","pos":[1,97],"source":" The substring in <code>strA</code> follows the substring in <code>strB</code> in the sort order."}]}]}],"pos":[161813,162479],"yaml":true},{"content":"<code>indexA</code> is greater than <code>strA</code>.<xref href=\"System.String.Length\"></xref>.  \n  \n -or-  \n  \n <code>indexB</code> is greater than <code>strB</code>.<xref href=\"System.String.Length\"></xref>.  \n  \n -or-  \n  \n <code>indexA</code>, <code>indexB</code>, or <code>length</code> is negative.  \n  \n -or-  \n  \n Either <code>indexA</code> or <code>indexB</code> is `null`, and <code>length</code> is greater than zero.","nodes":[{"pos":[0,96],"content":"<ph id=\"ph1\">&lt;code&gt;indexA&lt;/code&gt;</ph> is greater than <ph id=\"ph2\">&lt;code&gt;strA&lt;/code&gt;</ph>.<ph id=\"ph3\">&lt;xref href=\"System.String.Length\"&gt;&lt;/xref&gt;</ph>.","source":"<code>indexA</code> is greater than <code>strA</code>.<xref href=\"System.String.Length\"></xref>."},{"pos":[103,107],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[114,210],"content":"<ph id=\"ph1\">&lt;code&gt;indexB&lt;/code&gt;</ph> is greater than <ph id=\"ph2\">&lt;code&gt;strB&lt;/code&gt;</ph>.<ph id=\"ph3\">&lt;xref href=\"System.String.Length\"&gt;&lt;/xref&gt;</ph>.","source":"<code>indexB</code> is greater than <code>strB</code>.<xref href=\"System.String.Length\"></xref>."},{"pos":[217,221],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[228,305],"content":"<ph id=\"ph1\">&lt;code&gt;indexA&lt;/code&gt;</ph>, <ph id=\"ph2\">&lt;code&gt;indexB&lt;/code&gt;</ph>, or <ph id=\"ph3\">&lt;code&gt;length&lt;/code&gt;</ph> is negative.","source":"<code>indexA</code>, <code>indexB</code>, or <code>length</code> is negative."},{"pos":[312,316],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[323,429],"content":"Either <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">indexA</ph><ept id=\"p1\">&lt;/code&gt;</ept> or <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">indexB</ph><ept id=\"p2\">&lt;/code&gt;</ept> is <ph id=\"ph3\">`null`</ph>, and <bpt id=\"p3\">&lt;code&gt;</bpt><ph id=\"ph4\">length</ph><ept id=\"p3\">&lt;/code&gt;</ept> is greater than zero.","source":"Either <code>indexA</code> or <code>indexB</code> is `null`, and <code>length</code> is greater than zero."}],"pos":[162642,163090],"yaml":true},{"content":"Compares two specified <xref href=\"System.String\"></xref> objects and returns an integer that indicates their relative position in the sort order.","nodes":[{"pos":[0,146],"content":"Compares two specified <ph id=\"ph1\">&lt;xref href=\"System.String\"&gt;&lt;/xref&gt;</ph> objects and returns an integer that indicates their relative position in the sort order.","source":"Compares two specified <xref href=\"System.String\"></xref> objects and returns an integer that indicates their relative position in the sort order."}],"pos":[164585,164732],"yaml":true},{"content":"The comparison uses the current culture to obtain culture-specific information such as casing rules and the alphabetic order of individual characters. For example, a culture could specify that certain combinations of characters be treated as a single character, or uppercase and lowercase characters be compared in a particular way, or that the sorting order of a character depends on the characters that precede or follow it.  \n  \n The comparison is performed using word sort rules. For more information about word, string, and ordinal sorts, see <xref:System.Globalization.CompareOptions?displayProperty=fullName>.  \n  \n> [!WARNING]\n>  When comparing strings, you should call the<xref:System.String.Compare%28System.String%2CSystem.String%2CSystem.StringComparison%29> method, which requires that you explicitly specify the type of string comparison that the method uses. For more information, see [Best Practices for Using Strings](~/docs/standard/base-types/best-practices-strings.md).  \n  \n One or both comparands can be `null`. By definition, any string, including the empty string (\"\"), compares greater than a null reference; and two null references compare equal to each other.  \n  \n The comparison terminates when an inequality is discovered or both strings have been compared. However, if the two strings compare equal to the end of one string, and the other string has characters remaining, then the string with remaining characters is considered greater. The return value is the result of the last comparison performed.  \n  \n Unexpected results can occur when comparisons are affected by culture-specific casing rules. For example, in Turkish, the following example yields the wrong results because the file system in Turkish does not use linguistic casing rules for the letter \"i\" in \"file\".  \n  \n [!code-cpp[System.String.Compare#10](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Compare/cpp/remarks.cpp#10)]\n [!code-csharp[System.String.Compare#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Compare/cs/remarks.cs#10)]\n [!code-vb[System.String.Compare#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Compare/vb/remarks.vb#10)]  \n  \n Compare the path name to \"file\" using an ordinal comparison. The correct code to do this is as follows:  \n  \n [!code-cpp[System.String.Compare#11](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Compare/cpp/remarks.cpp#11)]\n [!code-csharp[System.String.Compare#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Compare/cs/remarks.cs#11)]\n [!code-vb[System.String.Compare#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Compare/vb/remarks.vb#11)]","nodes":[{"pos":[0,426],"content":"The comparison uses the current culture to obtain culture-specific information such as casing rules and the alphabetic order of individual characters. For example, a culture could specify that certain combinations of characters be treated as a single character, or uppercase and lowercase characters be compared in a particular way, or that the sorting order of a character depends on the characters that precede or follow it.","nodes":[{"content":"The comparison uses the current culture to obtain culture-specific information such as casing rules and the alphabetic order of individual characters. For example, a culture could specify that certain combinations of characters be treated as a single character, or uppercase and lowercase characters be compared in a particular way, or that the sorting order of a character depends on the characters that precede or follow it.","pos":[0,426],"nodes":[{"content":"The comparison uses the current culture to obtain culture-specific information such as casing rules and the alphabetic order of individual characters.","pos":[0,150]},{"content":"For example, a culture could specify that certain combinations of characters be treated as a single character, or uppercase and lowercase characters be compared in a particular way, or that the sorting order of a character depends on the characters that precede or follow it.","pos":[151,426]}]}]},{"pos":[433,616],"content":"The comparison is performed using word sort rules. For more information about word, string, and ordinal sorts, see <xref:System.Globalization.CompareOptions?displayProperty=fullName>.","nodes":[{"content":"The comparison is performed using word sort rules. For more information about word, string, and ordinal sorts, see <xref:System.Globalization.CompareOptions?displayProperty=fullName>.","pos":[0,183],"nodes":[{"content":"The comparison is performed using word sort rules.","pos":[0,50]},{"content":"For more information about word, string, and ordinal sorts, see <ph id=\"ph1\">&lt;xref:System.Globalization.CompareOptions?displayProperty=fullName&gt;</ph>.","pos":[51,183],"source":" For more information about word, string, and ordinal sorts, see <xref:System.Globalization.CompareOptions?displayProperty=fullName>."}]}]},{"pos":[624,989],"content":"[!WARNING]\n When comparing strings, you should call the<xref:System.String.Compare%28System.String%2CSystem.String%2CSystem.StringComparison%29> method, which requires that you explicitly specify the type of string comparison that the method uses. For more information, see [Best Practices for Using Strings](~/docs/standard/base-types/best-practices-strings.md).","leadings":["","> "],"nodes":[{"content":" When comparing strings, you should call the<xref:System.String.Compare%28System.String%2CSystem.String%2CSystem.StringComparison%29> method, which requires that you explicitly specify the type of string comparison that the method uses. For more information, see [Best Practices for Using Strings](~/docs/standard/base-types/best-practices-strings.md).","pos":[11,363],"nodes":[{"content":"When comparing strings, you should call the<ph id=\"ph1\">&lt;xref:System.String.Compare%28System.String%2CSystem.String%2CSystem.StringComparison%29&gt;</ph> method, which requires that you explicitly specify the type of string comparison that the method uses.","pos":[1,236],"source":" When comparing strings, you should call the<xref:System.String.Compare%28System.String%2CSystem.String%2CSystem.StringComparison%29> method, which requires that you explicitly specify the type of string comparison that the method uses."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Best Practices for Using Strings<ept id=\"p1\">](~/docs/standard/base-types/best-practices-strings.md)</ept>.","pos":[237,352],"source":" For more information, see [Best Practices for Using Strings](~/docs/standard/base-types/best-practices-strings.md)."}]}]},{"pos":[996,1186],"content":"One or both comparands can be `null`. By definition, any string, including the empty string (\"\"), compares greater than a null reference; and two null references compare equal to each other.","nodes":[{"content":"One or both comparands can be <ph id=\"ph1\">`null`</ph>.","pos":[0,37],"source":"One or both comparands can be `null`."},{"content":"By definition, any string, including the empty string (\"\"), compares greater than a null reference; and two null references compare equal to each other.","pos":[38,190]}]},{"pos":[1193,1532],"content":"The comparison terminates when an inequality is discovered or both strings have been compared. However, if the two strings compare equal to the end of one string, and the other string has characters remaining, then the string with remaining characters is considered greater. The return value is the result of the last comparison performed.","nodes":[{"content":"The comparison terminates when an inequality is discovered or both strings have been compared. However, if the two strings compare equal to the end of one string, and the other string has characters remaining, then the string with remaining characters is considered greater. The return value is the result of the last comparison performed.","pos":[0,339],"nodes":[{"content":"The comparison terminates when an inequality is discovered or both strings have been compared.","pos":[0,94]},{"content":"However, if the two strings compare equal to the end of one string, and the other string has characters remaining, then the string with remaining characters is considered greater.","pos":[95,274]},{"content":"The return value is the result of the last comparison performed.","pos":[275,339]}]}]},{"pos":[1539,1805],"content":"Unexpected results can occur when comparisons are affected by culture-specific casing rules. For example, in Turkish, the following example yields the wrong results because the file system in Turkish does not use linguistic casing rules for the letter \"i\" in \"file\".","nodes":[{"content":"Unexpected results can occur when comparisons are affected by culture-specific casing rules. For example, in Turkish, the following example yields the wrong results because the file system in Turkish does not use linguistic casing rules for the letter \"i\" in \"file\".","pos":[0,266],"nodes":[{"content":"Unexpected results can occur when comparisons are affected by culture-specific casing rules.","pos":[0,92]},{"content":"For example, in Turkish, the following example yields the wrong results because the file system in Turkish does not use linguistic casing rules for the letter \"i\" in \"file\".","pos":[93,266]}]}]},{"pos":[1812,2200],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>System.String.Compare#10<ept id=\"p2\">](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Compare/cpp/remarks.cpp#10)</ept><ept id=\"p1\">]</ept> <bpt id=\"p3\">[!code-csharp</bpt><bpt id=\"p4\">[</bpt>System.String.Compare#10<ept id=\"p4\">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Compare/cs/remarks.cs#10)</ept><ept id=\"p3\">]</ept> <bpt id=\"p5\">[!code-vb</bpt><bpt id=\"p6\">[</bpt>System.String.Compare#10<ept id=\"p6\">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Compare/vb/remarks.vb#10)</ept><ept id=\"p5\">]</ept>","source":"[!code-cpp[System.String.Compare#10](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Compare/cpp/remarks.cpp#10)]\n [!code-csharp[System.String.Compare#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Compare/cs/remarks.cs#10)]\n [!code-vb[System.String.Compare#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Compare/vb/remarks.vb#10)]"},{"pos":[2207,2310],"content":"Compare the path name to \"file\" using an ordinal comparison. The correct code to do this is as follows:","nodes":[{"content":"Compare the path name to \"file\" using an ordinal comparison. The correct code to do this is as follows:","pos":[0,103],"nodes":[{"content":"Compare the path name to \"file\" using an ordinal comparison.","pos":[0,60]},{"content":"The correct code to do this is as follows:","pos":[61,103]}]}]},{"pos":[2317,2705],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>System.String.Compare#11<ept id=\"p2\">](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Compare/cpp/remarks.cpp#11)</ept><ept id=\"p1\">]</ept> <bpt id=\"p3\">[!code-csharp</bpt><bpt id=\"p4\">[</bpt>System.String.Compare#11<ept id=\"p4\">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Compare/cs/remarks.cs#11)</ept><ept id=\"p3\">]</ept> <bpt id=\"p5\">[!code-vb</bpt><bpt id=\"p6\">[</bpt>System.String.Compare#11<ept id=\"p6\">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Compare/vb/remarks.vb#11)</ept><ept id=\"p5\">]</ept>","source":"[!code-cpp[System.String.Compare#11](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Compare/cpp/remarks.cpp#11)]\n [!code-csharp[System.String.Compare#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Compare/cs/remarks.cs#11)]\n [!code-vb[System.String.Compare#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Compare/vb/remarks.vb#11)]"}],"pos":[164743,167480],"yaml":true,"extradata":"MT"},{"content":"The first string to compare.","nodes":[{"pos":[0,28],"content":"The first string to compare.","nodes":[{"content":"The first string to compare.","pos":[0,28]}]}],"pos":[168679,168708],"yaml":true},{"content":"The second string to compare.","nodes":[{"pos":[0,29],"content":"The second string to compare.","nodes":[{"content":"The second string to compare.","pos":[0,29]}]}],"pos":[168768,168798],"yaml":true},{"content":"A 32-bit signed integer that indicates the lexical relationship between the two comparands.  \n  \n <table><thead><tr><th> Value  \n  \n </th><th> Condition  \n  \n </th></tr></thead><tbody><tr><td> Less than zero  \n  \n </td><td><code>strA</code> precedes <code>strB</code> in the sort order.  \n  \n </td></tr><tr><td> Zero  \n  \n </td><td><code>strA</code> occurs in the same position as <code>strB</code> in the sort order.  \n  \n </td></tr><tr><td> Greater than zero  \n  \n </td><td><code>strA</code> follows <code>strB</code> in the sort order.  \n  \n </td></tr></tbody></table>","nodes":[{"pos":[0,91],"content":"A 32-bit signed integer that indicates the lexical relationship between the two comparands.","nodes":[{"content":"A 32-bit signed integer that indicates the lexical relationship between the two comparands.","pos":[0,91]}]},{"pos":[98,572],"content":"<table><thead><tr><th> Value  \n  \n </th><th> Condition  \n  \n </th></tr></thead><tbody><tr><td> Less than zero  \n  \n </td><td><code>strA</code> precedes <code>strB</code> in the sort order.  \n  \n </td></tr><tr><td> Zero  \n  \n </td><td><code>strA</code> occurs in the same position as <code>strB</code> in the sort order.  \n  \n </td></tr><tr><td> Greater than zero  \n  \n </td><td><code>strA</code> follows <code>strB</code> in the sort order.  \n  \n </td></tr></tbody></table>","nodes":[{"content":"Value","pos":[23,33],"source":" Value  \n  \n "},{"content":"Condition","pos":[45,59],"source":" Condition  \n  \n "},{"content":"Less than zero","pos":[95,114],"source":" Less than zero  \n  \n "},{"content":"<code>strA</code> precedes <code>strB</code> in the sort order.  \n  \n ","pos":[125,195],"nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;strA&lt;/code&gt;</ph> precedes <ph id=\"ph2\">&lt;code&gt;strB&lt;/code&gt;</ph> in the sort order.","pos":[0,63],"source":"<code>strA</code> precedes <code>strB</code> in the sort order."}]},{"content":"Zero","pos":[214,223],"source":" Zero  \n  \n "},{"content":"<code>strA</code> occurs in the same position as <code>strB</code> in the sort order.  \n  \n ","pos":[234,326],"nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;strA&lt;/code&gt;</ph> occurs in the same position as <ph id=\"ph2\">&lt;code&gt;strB&lt;/code&gt;</ph> in the sort order.","pos":[0,85],"source":"<code>strA</code> occurs in the same position as <code>strB</code> in the sort order."}]},{"content":"Greater than zero","pos":[345,367],"source":" Greater than zero  \n  \n "},{"content":"<code>strA</code> follows <code>strB</code> in the sort order.  \n  \n ","pos":[378,447],"nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;strA&lt;/code&gt;</ph> follows <ph id=\"ph2\">&lt;code&gt;strB&lt;/code&gt;</ph> in the sort order.","pos":[0,62],"source":"<code>strA</code> follows <code>strB</code> in the sort order."}]}]}],"pos":[168854,169446],"yaml":true},{"content":"Compares two specified <xref href=\"System.String\"></xref> objects, ignoring or honoring their case, and using culture-specific information to influence the comparison, and returns an integer that indicates their relative position in the sort order.","nodes":[{"pos":[0,248],"content":"Compares two specified <ph id=\"ph1\">&lt;xref href=\"System.String\"&gt;&lt;/xref&gt;</ph> objects, ignoring or honoring their case, and using culture-specific information to influence the comparison, and returns an integer that indicates their relative position in the sort order.","source":"Compares two specified <xref href=\"System.String\"></xref> objects, ignoring or honoring their case, and using culture-specific information to influence the comparison, and returns an integer that indicates their relative position in the sort order."}],"pos":[171203,171452],"yaml":true},{"content":"The comparison uses the `culture` parameter to obtain culture-specific information such as casing rules and the alphabetic order of individual characters. For example, a culture could specify that certain combinations of characters be treated as a single character, or uppercase and lowercase characters be compared in a particular way, or that the sorting order of a character depends on the characters that precede or follow it.  \n  \n The comparison is performed using word sort rules. For more information about word, string, and ordinal sorts, see <xref:System.Globalization.CompareOptions?displayProperty=fullName>.  \n  \n One or both comparands can be `null`. By definition, any string, including the empty string (\"\"), compares greater than a null reference; and two null references compare equal to each other.  \n  \n The comparison terminates when an inequality is discovered or both strings have been compared. However, if the two strings compare equal to the end of one string, and the other string has characters remaining, then the string with remaining characters is considered greater. The return value is the result of the last comparison performed.  \n  \n Unexpected results can occur when comparisons are affected by culture-specific casing rules. For example, in Turkish, the following example yields the wrong results because the file system in Turkish does not use linguistic casing rules for the letter \"i\" in \"file\".  \n  \n [!code-cpp[System.String.Compare#14](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Compare/cpp/remarks.cpp#14)]\n [!code-csharp[System.String.Compare#14](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Compare/cs/remarks.cs#14)]\n [!code-vb[System.String.Compare#14](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Compare/vb/remarks.vb#14)]  \n  \n Compare the path name to \"file\" using an ordinal comparison. The correct code to do this is as follows:  \n  \n [!code-cpp[System.String.Compare#15](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Compare/cpp/remarks.cpp#15)]\n [!code-csharp[System.String.Compare#15](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Compare/cs/remarks.cs#15)]\n [!code-vb[System.String.Compare#15](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Compare/vb/remarks.vb#15)]","nodes":[{"pos":[0,430],"content":"The comparison uses the `culture` parameter to obtain culture-specific information such as casing rules and the alphabetic order of individual characters. For example, a culture could specify that certain combinations of characters be treated as a single character, or uppercase and lowercase characters be compared in a particular way, or that the sorting order of a character depends on the characters that precede or follow it.","nodes":[{"content":"The comparison uses the <ph id=\"ph1\">`culture`</ph> parameter to obtain culture-specific information such as casing rules and the alphabetic order of individual characters.","pos":[0,154],"source":"The comparison uses the `culture` parameter to obtain culture-specific information such as casing rules and the alphabetic order of individual characters."},{"content":"For example, a culture could specify that certain combinations of characters be treated as a single character, or uppercase and lowercase characters be compared in a particular way, or that the sorting order of a character depends on the characters that precede or follow it.","pos":[155,430]}]},{"pos":[437,620],"content":"The comparison is performed using word sort rules. For more information about word, string, and ordinal sorts, see <xref:System.Globalization.CompareOptions?displayProperty=fullName>.","nodes":[{"content":"The comparison is performed using word sort rules. For more information about word, string, and ordinal sorts, see <xref:System.Globalization.CompareOptions?displayProperty=fullName>.","pos":[0,183],"nodes":[{"content":"The comparison is performed using word sort rules.","pos":[0,50]},{"content":"For more information about word, string, and ordinal sorts, see <ph id=\"ph1\">&lt;xref:System.Globalization.CompareOptions?displayProperty=fullName&gt;</ph>.","pos":[51,183],"source":" For more information about word, string, and ordinal sorts, see <xref:System.Globalization.CompareOptions?displayProperty=fullName>."}]}]},{"pos":[627,817],"content":"One or both comparands can be `null`. By definition, any string, including the empty string (\"\"), compares greater than a null reference; and two null references compare equal to each other.","nodes":[{"content":"One or both comparands can be <ph id=\"ph1\">`null`</ph>.","pos":[0,37],"source":"One or both comparands can be `null`."},{"content":"By definition, any string, including the empty string (\"\"), compares greater than a null reference; and two null references compare equal to each other.","pos":[38,190]}]},{"pos":[824,1163],"content":"The comparison terminates when an inequality is discovered or both strings have been compared. However, if the two strings compare equal to the end of one string, and the other string has characters remaining, then the string with remaining characters is considered greater. The return value is the result of the last comparison performed.","nodes":[{"content":"The comparison terminates when an inequality is discovered or both strings have been compared. However, if the two strings compare equal to the end of one string, and the other string has characters remaining, then the string with remaining characters is considered greater. The return value is the result of the last comparison performed.","pos":[0,339],"nodes":[{"content":"The comparison terminates when an inequality is discovered or both strings have been compared.","pos":[0,94]},{"content":"However, if the two strings compare equal to the end of one string, and the other string has characters remaining, then the string with remaining characters is considered greater.","pos":[95,274]},{"content":"The return value is the result of the last comparison performed.","pos":[275,339]}]}]},{"pos":[1170,1436],"content":"Unexpected results can occur when comparisons are affected by culture-specific casing rules. For example, in Turkish, the following example yields the wrong results because the file system in Turkish does not use linguistic casing rules for the letter \"i\" in \"file\".","nodes":[{"content":"Unexpected results can occur when comparisons are affected by culture-specific casing rules. For example, in Turkish, the following example yields the wrong results because the file system in Turkish does not use linguistic casing rules for the letter \"i\" in \"file\".","pos":[0,266],"nodes":[{"content":"Unexpected results can occur when comparisons are affected by culture-specific casing rules.","pos":[0,92]},{"content":"For example, in Turkish, the following example yields the wrong results because the file system in Turkish does not use linguistic casing rules for the letter \"i\" in \"file\".","pos":[93,266]}]}]},{"pos":[1443,1831],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>System.String.Compare#14<ept id=\"p2\">](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Compare/cpp/remarks.cpp#14)</ept><ept id=\"p1\">]</ept> <bpt id=\"p3\">[!code-csharp</bpt><bpt id=\"p4\">[</bpt>System.String.Compare#14<ept id=\"p4\">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Compare/cs/remarks.cs#14)</ept><ept id=\"p3\">]</ept> <bpt id=\"p5\">[!code-vb</bpt><bpt id=\"p6\">[</bpt>System.String.Compare#14<ept id=\"p6\">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Compare/vb/remarks.vb#14)</ept><ept id=\"p5\">]</ept>","source":"[!code-cpp[System.String.Compare#14](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Compare/cpp/remarks.cpp#14)]\n [!code-csharp[System.String.Compare#14](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Compare/cs/remarks.cs#14)]\n [!code-vb[System.String.Compare#14](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Compare/vb/remarks.vb#14)]"},{"pos":[1838,1941],"content":"Compare the path name to \"file\" using an ordinal comparison. The correct code to do this is as follows:","nodes":[{"content":"Compare the path name to \"file\" using an ordinal comparison. The correct code to do this is as follows:","pos":[0,103],"nodes":[{"content":"Compare the path name to \"file\" using an ordinal comparison.","pos":[0,60]},{"content":"The correct code to do this is as follows:","pos":[61,103]}]}]},{"pos":[1948,2336],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>System.String.Compare#15<ept id=\"p2\">](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Compare/cpp/remarks.cpp#15)</ept><ept id=\"p1\">]</ept> <bpt id=\"p3\">[!code-csharp</bpt><bpt id=\"p4\">[</bpt>System.String.Compare#15<ept id=\"p4\">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Compare/cs/remarks.cs#15)</ept><ept id=\"p3\">]</ept> <bpt id=\"p5\">[!code-vb</bpt><bpt id=\"p6\">[</bpt>System.String.Compare#15<ept id=\"p6\">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Compare/vb/remarks.vb#15)</ept><ept id=\"p5\">]</ept>","source":"[!code-cpp[System.String.Compare#15](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Compare/cpp/remarks.cpp#15)]\n [!code-csharp[System.String.Compare#15](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Compare/cs/remarks.cs#15)]\n [!code-vb[System.String.Compare#15](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Compare/vb/remarks.vb#15)]"}],"pos":[171463,173828],"yaml":true,"extradata":"MT"},{"content":"The first string to compare.","nodes":[{"pos":[0,28],"content":"The first string to compare.","nodes":[{"content":"The first string to compare.","pos":[0,28]}]}],"pos":[174664,174693],"yaml":true},{"content":"The second string to compare.","nodes":[{"pos":[0,29],"content":"The second string to compare.","nodes":[{"content":"The second string to compare.","pos":[0,29]}]}],"pos":[174753,174783],"yaml":true},{"content":"`true` to ignore case during the comparison; otherwise, `false`.","nodes":[{"pos":[0,64],"content":"<ph id=\"ph1\">`true`</ph> to ignore case during the comparison; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` to ignore case during the comparison; otherwise, `false`."}],"pos":[174850,174917],"yaml":true},{"content":"An object that supplies culture-specific comparison information.","nodes":[{"pos":[0,64],"content":"An object that supplies culture-specific comparison information.","nodes":[{"content":"An object that supplies culture-specific comparison information.","pos":[0,64]}]}],"pos":[174999,175064],"yaml":true},{"content":"A 32-bit signed integer that indicates the lexical relationship between the two comparands.  \n  \n <table><thead><tr><th> Value  \n  \n </th><th> Condition  \n  \n </th></tr></thead><tbody><tr><td> Less than zero  \n  \n </td><td><code>strA</code> precedes <code>strB</code> in the sort order.  \n  \n </td></tr><tr><td> Zero  \n  \n </td><td><code>strA</code> occurs in the same position as <code>strB</code> in the sort order.  \n  \n </td></tr><tr><td> Greater than zero  \n  \n </td><td><code>strA</code> follows <code>strB</code> in the sort order.  \n  \n </td></tr></tbody></table>","nodes":[{"pos":[0,91],"content":"A 32-bit signed integer that indicates the lexical relationship between the two comparands.","nodes":[{"content":"A 32-bit signed integer that indicates the lexical relationship between the two comparands.","pos":[0,91]}]},{"pos":[98,572],"content":"<table><thead><tr><th> Value  \n  \n </th><th> Condition  \n  \n </th></tr></thead><tbody><tr><td> Less than zero  \n  \n </td><td><code>strA</code> precedes <code>strB</code> in the sort order.  \n  \n </td></tr><tr><td> Zero  \n  \n </td><td><code>strA</code> occurs in the same position as <code>strB</code> in the sort order.  \n  \n </td></tr><tr><td> Greater than zero  \n  \n </td><td><code>strA</code> follows <code>strB</code> in the sort order.  \n  \n </td></tr></tbody></table>","nodes":[{"content":"Value","pos":[23,33],"source":" Value  \n  \n "},{"content":"Condition","pos":[45,59],"source":" Condition  \n  \n "},{"content":"Less than zero","pos":[95,114],"source":" Less than zero  \n  \n "},{"content":"<code>strA</code> precedes <code>strB</code> in the sort order.  \n  \n ","pos":[125,195],"nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;strA&lt;/code&gt;</ph> precedes <ph id=\"ph2\">&lt;code&gt;strB&lt;/code&gt;</ph> in the sort order.","pos":[0,63],"source":"<code>strA</code> precedes <code>strB</code> in the sort order."}]},{"content":"Zero","pos":[214,223],"source":" Zero  \n  \n "},{"content":"<code>strA</code> occurs in the same position as <code>strB</code> in the sort order.  \n  \n ","pos":[234,326],"nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;strA&lt;/code&gt;</ph> occurs in the same position as <ph id=\"ph2\">&lt;code&gt;strB&lt;/code&gt;</ph> in the sort order.","pos":[0,85],"source":"<code>strA</code> occurs in the same position as <code>strB</code> in the sort order."}]},{"content":"Greater than zero","pos":[345,367],"source":" Greater than zero  \n  \n "},{"content":"<code>strA</code> follows <code>strB</code> in the sort order.  \n  \n ","pos":[378,447],"nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;strA&lt;/code&gt;</ph> follows <ph id=\"ph2\">&lt;code&gt;strB&lt;/code&gt;</ph> in the sort order.","pos":[0,62],"source":"<code>strA</code> follows <code>strB</code> in the sort order."}]}]}],"pos":[175120,175712],"yaml":true},{"content":"<code>culture</code> is `null`.","nodes":[{"pos":[0,31],"content":"<ph id=\"ph1\">&lt;code&gt;culture&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>culture</code> is `null`."}],"pos":[175863,175895],"yaml":true},{"content":"Compares two specified <xref href=\"System.String\"></xref> objects using the specified rules, and returns an integer that indicates their relative position in the sort order.","nodes":[{"pos":[0,173],"content":"Compares two specified <ph id=\"ph1\">&lt;xref href=\"System.String\"&gt;&lt;/xref&gt;</ph> objects using the specified rules, and returns an integer that indicates their relative position in the sort order.","source":"Compares two specified <xref href=\"System.String\"></xref> objects using the specified rules, and returns an integer that indicates their relative position in the sort order."}],"pos":[177172,177346],"yaml":true},{"content":"The `comparisonType` parameter indicates whether the comparison should use the current or invariant culture, honor or ignore the case of the comparands, or use word (culture-sensitive) or ordinal (culture-insensitive) sort rules.  \n  \n One or both comparands can be `null`. By definition, any string, including the empty string (\"\"), compares greater than a null reference; and two null references compare equal to each other.  \n  \n The comparison terminates when an inequality is discovered or both strings have been compared. However, if the two strings compare equal to the end of one string, and the other string has characters remaining, the string with remaining characters is considered greater. The return value is the result of the last comparison performed.  \n  \n Unexpected results can occur when comparisons are affected by culture-specific casing rules. For example, in Turkish, the following example yields the wrong results because the file system in Turkish does not use linguistic casing rules for the letter \"i\" in \"file\".  \n  \n [!code-cpp[System.String.Compare#16](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Compare/cpp/remarks.cpp#16)]\n [!code-csharp[System.String.Compare#16](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Compare/cs/remarks.cs#16)]\n [!code-vb[System.String.Compare#16](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Compare/vb/remarks.vb#16)]  \n  \n Compare the path name to \"file\" using an ordinal comparison. The correct code to do this is as follows:  \n  \n [!code-cpp[System.String.Compare#17](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Compare/cpp/remarks.cpp#17)]\n [!code-csharp[System.String.Compare#17](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Compare/cs/remarks.cs#17)]\n [!code-vb[System.String.Compare#17](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Compare/vb/remarks.vb#17)]","nodes":[{"pos":[0,229],"content":"The <ph id=\"ph1\">`comparisonType`</ph> parameter indicates whether the comparison should use the current or invariant culture, honor or ignore the case of the comparands, or use word (culture-sensitive) or ordinal (culture-insensitive) sort rules.","source":"The `comparisonType` parameter indicates whether the comparison should use the current or invariant culture, honor or ignore the case of the comparands, or use word (culture-sensitive) or ordinal (culture-insensitive) sort rules."},{"pos":[236,426],"content":"One or both comparands can be `null`. By definition, any string, including the empty string (\"\"), compares greater than a null reference; and two null references compare equal to each other.","nodes":[{"content":"One or both comparands can be <ph id=\"ph1\">`null`</ph>.","pos":[0,37],"source":"One or both comparands can be `null`."},{"content":"By definition, any string, including the empty string (\"\"), compares greater than a null reference; and two null references compare equal to each other.","pos":[38,190]}]},{"pos":[433,767],"content":"The comparison terminates when an inequality is discovered or both strings have been compared. However, if the two strings compare equal to the end of one string, and the other string has characters remaining, the string with remaining characters is considered greater. The return value is the result of the last comparison performed.","nodes":[{"content":"The comparison terminates when an inequality is discovered or both strings have been compared. However, if the two strings compare equal to the end of one string, and the other string has characters remaining, the string with remaining characters is considered greater. The return value is the result of the last comparison performed.","pos":[0,334],"nodes":[{"content":"The comparison terminates when an inequality is discovered or both strings have been compared.","pos":[0,94]},{"content":"However, if the two strings compare equal to the end of one string, and the other string has characters remaining, the string with remaining characters is considered greater.","pos":[95,269]},{"content":"The return value is the result of the last comparison performed.","pos":[270,334]}]}]},{"pos":[774,1040],"content":"Unexpected results can occur when comparisons are affected by culture-specific casing rules. For example, in Turkish, the following example yields the wrong results because the file system in Turkish does not use linguistic casing rules for the letter \"i\" in \"file\".","nodes":[{"content":"Unexpected results can occur when comparisons are affected by culture-specific casing rules. For example, in Turkish, the following example yields the wrong results because the file system in Turkish does not use linguistic casing rules for the letter \"i\" in \"file\".","pos":[0,266],"nodes":[{"content":"Unexpected results can occur when comparisons are affected by culture-specific casing rules.","pos":[0,92]},{"content":"For example, in Turkish, the following example yields the wrong results because the file system in Turkish does not use linguistic casing rules for the letter \"i\" in \"file\".","pos":[93,266]}]}]},{"pos":[1047,1435],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>System.String.Compare#16<ept id=\"p2\">](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Compare/cpp/remarks.cpp#16)</ept><ept id=\"p1\">]</ept> <bpt id=\"p3\">[!code-csharp</bpt><bpt id=\"p4\">[</bpt>System.String.Compare#16<ept id=\"p4\">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Compare/cs/remarks.cs#16)</ept><ept id=\"p3\">]</ept> <bpt id=\"p5\">[!code-vb</bpt><bpt id=\"p6\">[</bpt>System.String.Compare#16<ept id=\"p6\">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Compare/vb/remarks.vb#16)</ept><ept id=\"p5\">]</ept>","source":"[!code-cpp[System.String.Compare#16](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Compare/cpp/remarks.cpp#16)]\n [!code-csharp[System.String.Compare#16](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Compare/cs/remarks.cs#16)]\n [!code-vb[System.String.Compare#16](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Compare/vb/remarks.vb#16)]"},{"pos":[1442,1545],"content":"Compare the path name to \"file\" using an ordinal comparison. The correct code to do this is as follows:","nodes":[{"content":"Compare the path name to \"file\" using an ordinal comparison. The correct code to do this is as follows:","pos":[0,103],"nodes":[{"content":"Compare the path name to \"file\" using an ordinal comparison.","pos":[0,60]},{"content":"The correct code to do this is as follows:","pos":[61,103]}]}]},{"pos":[1552,1940],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>System.String.Compare#17<ept id=\"p2\">](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Compare/cpp/remarks.cpp#17)</ept><ept id=\"p1\">]</ept> <bpt id=\"p3\">[!code-csharp</bpt><bpt id=\"p4\">[</bpt>System.String.Compare#17<ept id=\"p4\">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Compare/cs/remarks.cs#17)</ept><ept id=\"p3\">]</ept> <bpt id=\"p5\">[!code-vb</bpt><bpt id=\"p6\">[</bpt>System.String.Compare#17<ept id=\"p6\">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Compare/vb/remarks.vb#17)</ept><ept id=\"p5\">]</ept>","source":"[!code-cpp[System.String.Compare#17](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Compare/cpp/remarks.cpp#17)]\n [!code-csharp[System.String.Compare#17](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Compare/cs/remarks.cs#17)]\n [!code-vb[System.String.Compare#17](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Compare/vb/remarks.vb#17)]"}],"pos":[177357,179324],"yaml":true,"extradata":"MT"},{"content":"The first string to compare.","nodes":[{"pos":[0,28],"content":"The first string to compare.","nodes":[{"content":"The first string to compare.","pos":[0,28]}]}],"pos":[180126,180155],"yaml":true},{"content":"The second string to compare.","nodes":[{"pos":[0,29],"content":"The second string to compare.","nodes":[{"content":"The second string to compare.","pos":[0,29]}]}],"pos":[180215,180245],"yaml":true},{"content":"One of the enumeration values that specifies the rules to use in the comparison.","nodes":[{"pos":[0,80],"content":"One of the enumeration values that specifies the rules to use in the comparison.","nodes":[{"content":"One of the enumeration values that specifies the rules to use in the comparison.","pos":[0,80]}]}],"pos":[180325,180406],"yaml":true},{"content":"A 32-bit signed integer that indicates the lexical relationship between the two comparands.  \n  \n <table><thead><tr><th> Value  \n  \n </th><th> Condition  \n  \n </th></tr></thead><tbody><tr><td> Less than zero  \n  \n </td><td><code>strA</code> precedes <code>strB</code> in the sort order.  \n  \n </td></tr><tr><td> Zero  \n  \n </td><td><code>strA</code> is in the same position as <code>strB</code> in the sort order.  \n  \n </td></tr><tr><td> Greater than zero  \n  \n </td><td><code>strA</code> follows <code>strB</code> in the sort order.  \n  \n </td></tr></tbody></table>","nodes":[{"pos":[0,91],"content":"A 32-bit signed integer that indicates the lexical relationship between the two comparands.","nodes":[{"content":"A 32-bit signed integer that indicates the lexical relationship between the two comparands.","pos":[0,91]}]},{"pos":[98,568],"content":"<table><thead><tr><th> Value  \n  \n </th><th> Condition  \n  \n </th></tr></thead><tbody><tr><td> Less than zero  \n  \n </td><td><code>strA</code> precedes <code>strB</code> in the sort order.  \n  \n </td></tr><tr><td> Zero  \n  \n </td><td><code>strA</code> is in the same position as <code>strB</code> in the sort order.  \n  \n </td></tr><tr><td> Greater than zero  \n  \n </td><td><code>strA</code> follows <code>strB</code> in the sort order.  \n  \n </td></tr></tbody></table>","nodes":[{"content":"Value","pos":[23,33],"source":" Value  \n  \n "},{"content":"Condition","pos":[45,59],"source":" Condition  \n  \n "},{"content":"Less than zero","pos":[95,114],"source":" Less than zero  \n  \n "},{"content":"<code>strA</code> precedes <code>strB</code> in the sort order.  \n  \n ","pos":[125,195],"nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;strA&lt;/code&gt;</ph> precedes <ph id=\"ph2\">&lt;code&gt;strB&lt;/code&gt;</ph> in the sort order.","pos":[0,63],"source":"<code>strA</code> precedes <code>strB</code> in the sort order."}]},{"content":"Zero","pos":[214,223],"source":" Zero  \n  \n "},{"content":"<code>strA</code> is in the same position as <code>strB</code> in the sort order.  \n  \n ","pos":[234,322],"nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;strA&lt;/code&gt;</ph> is in the same position as <ph id=\"ph2\">&lt;code&gt;strB&lt;/code&gt;</ph> in the sort order.","pos":[0,81],"source":"<code>strA</code> is in the same position as <code>strB</code> in the sort order."}]},{"content":"Greater than zero","pos":[341,363],"source":" Greater than zero  \n  \n "},{"content":"<code>strA</code> follows <code>strB</code> in the sort order.  \n  \n ","pos":[374,443],"nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;strA&lt;/code&gt;</ph> follows <ph id=\"ph2\">&lt;code&gt;strB&lt;/code&gt;</ph> in the sort order.","pos":[0,62],"source":"<code>strA</code> follows <code>strB</code> in the sort order."}]}]}],"pos":[180462,181050],"yaml":true},{"content":"<code>comparisonType</code> is not a <xref href=\"System.StringComparison\"></xref> value.","nodes":[{"pos":[0,88],"content":"<ph id=\"ph1\">&lt;code&gt;comparisonType&lt;/code&gt;</ph> is not a <ph id=\"ph2\">&lt;xref href=\"System.StringComparison\"&gt;&lt;/xref&gt;</ph> value.","source":"<code>comparisonType</code> is not a <xref href=\"System.StringComparison\"></xref> value."}],"pos":[181193,181282],"yaml":true},{"content":"<xref href=\"System.StringComparison\"></xref> is not supported.","nodes":[{"pos":[0,62],"content":"<ph id=\"ph1\">&lt;xref href=\"System.StringComparison\"&gt;&lt;/xref&gt;</ph> is not supported.","source":"<xref href=\"System.StringComparison\"></xref> is not supported."}],"pos":[181384,181447],"yaml":true},{"content":"Compares two specified <xref href=\"System.String\"></xref> objects, ignoring or honoring their case, and returns an integer that indicates their relative position in the sort order.","nodes":[{"pos":[0,180],"content":"Compares two specified <ph id=\"ph1\">&lt;xref href=\"System.String\"&gt;&lt;/xref&gt;</ph> objects, ignoring or honoring their case, and returns an integer that indicates their relative position in the sort order.","source":"Compares two specified <xref href=\"System.String\"></xref> objects, ignoring or honoring their case, and returns an integer that indicates their relative position in the sort order."}],"pos":[183031,183212],"yaml":true},{"content":"The comparison uses the current culture to obtain culture-specific information such as casing rules and the alphabetic order of individual characters. For example, a culture could specify that certain combinations of characters be treated as a single character, or uppercase and lowercase characters be compared in a particular way, or that the sorting order of a character depends on the characters that precede or follow it.  \n  \n The comparison is performed using word sort rules. For more information about word, string, and ordinal sorts, see <xref:System.Globalization.CompareOptions?displayProperty=fullName>.  \n  \n> [!WARNING]\n>  When comparing strings, you should call the <xref:System.String.Compare%28System.String%2CSystem.String%2CSystem.StringComparison%29> method, which requires that you explicitly specify the type of string comparison that the method uses. For more information, see [Best Practices for Using Strings](~/docs/standard/base-types/best-practices-strings.md).  \n  \n One or both comparands can be `null`. By definition, any string, including the empty string (\"\"), compares greater than a null reference; and two null references compare equal to each other.  \n  \n The comparison terminates when an inequality is discovered or both strings have been compared. However, if the two strings compare equal to the end of one string, and the other string has characters remaining, then the string with remaining characters is considered greater. The return value is the result of the last comparison performed.  \n  \n Unexpected results can occur when comparisons are affected by culture-specific casing rules. For example, in Turkish, the following example yields the wrong results because the file system in Turkish does not use linguistic casing rules for the letter \"i\" in \"file\".  \n  \n [!code-cpp[System.String.Compare#12](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Compare/cpp/remarks.cpp#12)]\n [!code-csharp[System.String.Compare#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Compare/cs/remarks.cs#12)]\n [!code-vb[System.String.Compare#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Compare/vb/remarks.vb#12)]  \n  \n Compare the path name to \"file\" using an ordinal comparison. The correct code to do this is as follows:  \n  \n [!code-cpp[System.String.Compare#13](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Compare/cpp/remarks.cpp#13)]\n [!code-csharp[System.String.Compare#13](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Compare/cs/remarks.cs#13)]\n [!code-vb[System.String.Compare#13](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Compare/vb/remarks.vb#13)]","nodes":[{"pos":[0,426],"content":"The comparison uses the current culture to obtain culture-specific information such as casing rules and the alphabetic order of individual characters. For example, a culture could specify that certain combinations of characters be treated as a single character, or uppercase and lowercase characters be compared in a particular way, or that the sorting order of a character depends on the characters that precede or follow it.","nodes":[{"content":"The comparison uses the current culture to obtain culture-specific information such as casing rules and the alphabetic order of individual characters. For example, a culture could specify that certain combinations of characters be treated as a single character, or uppercase and lowercase characters be compared in a particular way, or that the sorting order of a character depends on the characters that precede or follow it.","pos":[0,426],"nodes":[{"content":"The comparison uses the current culture to obtain culture-specific information such as casing rules and the alphabetic order of individual characters.","pos":[0,150]},{"content":"For example, a culture could specify that certain combinations of characters be treated as a single character, or uppercase and lowercase characters be compared in a particular way, or that the sorting order of a character depends on the characters that precede or follow it.","pos":[151,426]}]}]},{"pos":[433,616],"content":"The comparison is performed using word sort rules. For more information about word, string, and ordinal sorts, see <xref:System.Globalization.CompareOptions?displayProperty=fullName>.","nodes":[{"content":"The comparison is performed using word sort rules. For more information about word, string, and ordinal sorts, see <xref:System.Globalization.CompareOptions?displayProperty=fullName>.","pos":[0,183],"nodes":[{"content":"The comparison is performed using word sort rules.","pos":[0,50]},{"content":"For more information about word, string, and ordinal sorts, see <ph id=\"ph1\">&lt;xref:System.Globalization.CompareOptions?displayProperty=fullName&gt;</ph>.","pos":[51,183],"source":" For more information about word, string, and ordinal sorts, see <xref:System.Globalization.CompareOptions?displayProperty=fullName>."}]}]},{"pos":[624,990],"content":"[!WARNING]\n When comparing strings, you should call the <xref:System.String.Compare%28System.String%2CSystem.String%2CSystem.StringComparison%29> method, which requires that you explicitly specify the type of string comparison that the method uses. For more information, see [Best Practices for Using Strings](~/docs/standard/base-types/best-practices-strings.md).","leadings":["","> "],"nodes":[{"content":" When comparing strings, you should call the <xref:System.String.Compare%28System.String%2CSystem.String%2CSystem.StringComparison%29> method, which requires that you explicitly specify the type of string comparison that the method uses. For more information, see [Best Practices for Using Strings](~/docs/standard/base-types/best-practices-strings.md).","pos":[11,364],"nodes":[{"content":"When comparing strings, you should call the <ph id=\"ph1\">&lt;xref:System.String.Compare%28System.String%2CSystem.String%2CSystem.StringComparison%29&gt;</ph> method, which requires that you explicitly specify the type of string comparison that the method uses.","pos":[1,237],"source":" When comparing strings, you should call the <xref:System.String.Compare%28System.String%2CSystem.String%2CSystem.StringComparison%29> method, which requires that you explicitly specify the type of string comparison that the method uses."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Best Practices for Using Strings<ept id=\"p1\">](~/docs/standard/base-types/best-practices-strings.md)</ept>.","pos":[238,353],"source":" For more information, see [Best Practices for Using Strings](~/docs/standard/base-types/best-practices-strings.md)."}]}]},{"pos":[997,1187],"content":"One or both comparands can be `null`. By definition, any string, including the empty string (\"\"), compares greater than a null reference; and two null references compare equal to each other.","nodes":[{"content":"One or both comparands can be <ph id=\"ph1\">`null`</ph>.","pos":[0,37],"source":"One or both comparands can be `null`."},{"content":"By definition, any string, including the empty string (\"\"), compares greater than a null reference; and two null references compare equal to each other.","pos":[38,190]}]},{"pos":[1194,1533],"content":"The comparison terminates when an inequality is discovered or both strings have been compared. However, if the two strings compare equal to the end of one string, and the other string has characters remaining, then the string with remaining characters is considered greater. The return value is the result of the last comparison performed.","nodes":[{"content":"The comparison terminates when an inequality is discovered or both strings have been compared. However, if the two strings compare equal to the end of one string, and the other string has characters remaining, then the string with remaining characters is considered greater. The return value is the result of the last comparison performed.","pos":[0,339],"nodes":[{"content":"The comparison terminates when an inequality is discovered or both strings have been compared.","pos":[0,94]},{"content":"However, if the two strings compare equal to the end of one string, and the other string has characters remaining, then the string with remaining characters is considered greater.","pos":[95,274]},{"content":"The return value is the result of the last comparison performed.","pos":[275,339]}]}]},{"pos":[1540,1806],"content":"Unexpected results can occur when comparisons are affected by culture-specific casing rules. For example, in Turkish, the following example yields the wrong results because the file system in Turkish does not use linguistic casing rules for the letter \"i\" in \"file\".","nodes":[{"content":"Unexpected results can occur when comparisons are affected by culture-specific casing rules. For example, in Turkish, the following example yields the wrong results because the file system in Turkish does not use linguistic casing rules for the letter \"i\" in \"file\".","pos":[0,266],"nodes":[{"content":"Unexpected results can occur when comparisons are affected by culture-specific casing rules.","pos":[0,92]},{"content":"For example, in Turkish, the following example yields the wrong results because the file system in Turkish does not use linguistic casing rules for the letter \"i\" in \"file\".","pos":[93,266]}]}]},{"pos":[1813,2201],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>System.String.Compare#12<ept id=\"p2\">](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Compare/cpp/remarks.cpp#12)</ept><ept id=\"p1\">]</ept> <bpt id=\"p3\">[!code-csharp</bpt><bpt id=\"p4\">[</bpt>System.String.Compare#12<ept id=\"p4\">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Compare/cs/remarks.cs#12)</ept><ept id=\"p3\">]</ept> <bpt id=\"p5\">[!code-vb</bpt><bpt id=\"p6\">[</bpt>System.String.Compare#12<ept id=\"p6\">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Compare/vb/remarks.vb#12)</ept><ept id=\"p5\">]</ept>","source":"[!code-cpp[System.String.Compare#12](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Compare/cpp/remarks.cpp#12)]\n [!code-csharp[System.String.Compare#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Compare/cs/remarks.cs#12)]\n [!code-vb[System.String.Compare#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Compare/vb/remarks.vb#12)]"},{"pos":[2208,2311],"content":"Compare the path name to \"file\" using an ordinal comparison. The correct code to do this is as follows:","nodes":[{"content":"Compare the path name to \"file\" using an ordinal comparison. The correct code to do this is as follows:","pos":[0,103],"nodes":[{"content":"Compare the path name to \"file\" using an ordinal comparison.","pos":[0,60]},{"content":"The correct code to do this is as follows:","pos":[61,103]}]}]},{"pos":[2318,2706],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>System.String.Compare#13<ept id=\"p2\">](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Compare/cpp/remarks.cpp#13)</ept><ept id=\"p1\">]</ept> <bpt id=\"p3\">[!code-csharp</bpt><bpt id=\"p4\">[</bpt>System.String.Compare#13<ept id=\"p4\">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Compare/cs/remarks.cs#13)</ept><ept id=\"p3\">]</ept> <bpt id=\"p5\">[!code-vb</bpt><bpt id=\"p6\">[</bpt>System.String.Compare#13<ept id=\"p6\">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Compare/vb/remarks.vb#13)</ept><ept id=\"p5\">]</ept>","source":"[!code-cpp[System.String.Compare#13](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Compare/cpp/remarks.cpp#13)]\n [!code-csharp[System.String.Compare#13](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Compare/cs/remarks.cs#13)]\n [!code-vb[System.String.Compare#13](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Compare/vb/remarks.vb#13)]"}],"pos":[183223,185961],"yaml":true,"extradata":"MT"},{"content":"The first string to compare.","nodes":[{"pos":[0,28],"content":"The first string to compare.","nodes":[{"content":"The first string to compare.","pos":[0,28]}]}],"pos":[186799,186828],"yaml":true},{"content":"The second string to compare.","nodes":[{"pos":[0,29],"content":"The second string to compare.","nodes":[{"content":"The second string to compare.","pos":[0,29]}]}],"pos":[186888,186918],"yaml":true},{"content":"`true` to ignore case during the comparison; otherwise, `false`.","nodes":[{"pos":[0,64],"content":"<ph id=\"ph1\">`true`</ph> to ignore case during the comparison; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` to ignore case during the comparison; otherwise, `false`."}],"pos":[186985,187052],"yaml":true},{"content":"A 32-bit signed integer that indicates the lexical relationship between the two comparands.  \n  \n <table><thead><tr><th> Value  \n  \n </th><th> Condition  \n  \n </th></tr></thead><tbody><tr><td> Less than zero  \n  \n </td><td><code>strA</code> precedes <code>strB</code> in the sort order.  \n  \n </td></tr><tr><td> Zero  \n  \n </td><td><code>strA</code> occurs in the same position as <code>strB</code> in the sort order.  \n  \n </td></tr><tr><td> Greater than zero  \n  \n </td><td><code>strA</code> follows <code>strB</code> in the sort order.  \n  \n </td></tr></tbody></table>","nodes":[{"pos":[0,91],"content":"A 32-bit signed integer that indicates the lexical relationship between the two comparands.","nodes":[{"content":"A 32-bit signed integer that indicates the lexical relationship between the two comparands.","pos":[0,91]}]},{"pos":[98,572],"content":"<table><thead><tr><th> Value  \n  \n </th><th> Condition  \n  \n </th></tr></thead><tbody><tr><td> Less than zero  \n  \n </td><td><code>strA</code> precedes <code>strB</code> in the sort order.  \n  \n </td></tr><tr><td> Zero  \n  \n </td><td><code>strA</code> occurs in the same position as <code>strB</code> in the sort order.  \n  \n </td></tr><tr><td> Greater than zero  \n  \n </td><td><code>strA</code> follows <code>strB</code> in the sort order.  \n  \n </td></tr></tbody></table>","nodes":[{"content":"Value","pos":[23,33],"source":" Value  \n  \n "},{"content":"Condition","pos":[45,59],"source":" Condition  \n  \n "},{"content":"Less than zero","pos":[95,114],"source":" Less than zero  \n  \n "},{"content":"<code>strA</code> precedes <code>strB</code> in the sort order.  \n  \n ","pos":[125,195],"nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;strA&lt;/code&gt;</ph> precedes <ph id=\"ph2\">&lt;code&gt;strB&lt;/code&gt;</ph> in the sort order.","pos":[0,63],"source":"<code>strA</code> precedes <code>strB</code> in the sort order."}]},{"content":"Zero","pos":[214,223],"source":" Zero  \n  \n "},{"content":"<code>strA</code> occurs in the same position as <code>strB</code> in the sort order.  \n  \n ","pos":[234,326],"nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;strA&lt;/code&gt;</ph> occurs in the same position as <ph id=\"ph2\">&lt;code&gt;strB&lt;/code&gt;</ph> in the sort order.","pos":[0,85],"source":"<code>strA</code> occurs in the same position as <code>strB</code> in the sort order."}]},{"content":"Greater than zero","pos":[345,367],"source":" Greater than zero  \n  \n "},{"content":"<code>strA</code> follows <code>strB</code> in the sort order.  \n  \n ","pos":[378,447],"nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;strA&lt;/code&gt;</ph> follows <ph id=\"ph2\">&lt;code&gt;strB&lt;/code&gt;</ph> in the sort order.","pos":[0,62],"source":"<code>strA</code> follows <code>strB</code> in the sort order."}]}]}],"pos":[187108,187700],"yaml":true},{"content":"Compares substrings of two specified <xref href=\"System.String\"></xref> objects using the specified comparison options and culture-specific information to influence the comparison, and returns an integer that indicates the relationship of the two substrings to each other in the sort order.","nodes":[{"pos":[0,290],"content":"Compares substrings of two specified <ph id=\"ph1\">&lt;xref href=\"System.String\"&gt;&lt;/xref&gt;</ph> objects using the specified comparison options and culture-specific information to influence the comparison, and returns an integer that indicates the relationship of the two substrings to each other in the sort order.","source":"Compares substrings of two specified <xref href=\"System.String\"></xref> objects using the specified comparison options and culture-specific information to influence the comparison, and returns an integer that indicates the relationship of the two substrings to each other in the sort order."}],"pos":[189601,189892],"yaml":true},{"content":"The substrings to compare start in `strA` at position `indexA` and in `strB` at position `indexB`. The length of the first substring is the length of `strA` minus `indexA`. The length of the second substring is the length of `strB` minus `indexB`.  \n  \n The number of characters to compare is the lesser of the lengths of the two substrings, and `length`. The `indexA`, `indexB`, and `length` parameters must be nonnegative.  \n  \n The comparison uses the `culture` parameter to obtain culture-specific information, such as casing rules and the alphabetical order of individual characters. For example, a particular culture could specify that certain combinations of characters be treated as a single character, that uppercase and lowercase characters be compared in a particular way, or that the sort order of a character depends on the characters that precede or follow it.  \n  \n> [!CAUTION]\n>  The <xref:System.String.Compare%28System.String%2CSystem.Int32%2CSystem.String%2CSystem.Int32%2CSystem.Int32%2CSystem.Globalization.CultureInfo%2CSystem.Globalization.CompareOptions%29> method is designed primarily for use in sorting or alphabetizing operations. It should not be used when the primary purpose of the method call is to determine whether two substrings are equivalent (that is, when the purpose of the method call is to test for a return value of zero). To determine whether two strings are equivalent, call the <xref:System.String.Equals%2A> method.  \n  \n One or both of `strA` and `strB` can be `null`. By definition, any string, including <xref:System.String.Empty?displayProperty=fullName>, compares greater than a null reference, and two null references compare equal to each other.  \n  \n The comparison can be further specified by the `options` parameter, which consists of one or more members of the <xref:System.Globalization.CompareOptions?displayProperty=fullName> enumeration. However, because the purpose of this method is to conduct a culture-sensitive string comparison, the <xref:System.Globalization.CompareOptions?displayProperty=fullName> and <xref:System.Globalization.CompareOptions?displayProperty=fullName> values have no effect.  \n  \n The comparison terminates when an inequality is discovered or both substrings have been compared. However, if the two strings compare equal to the end of one string, and the other string has characters remaining, the string with the remaining characters is considered greater. The return value is the result of the last comparison performed.","nodes":[{"pos":[0,247],"content":"The substrings to compare start in `strA` at position `indexA` and in `strB` at position `indexB`. The length of the first substring is the length of `strA` minus `indexA`. The length of the second substring is the length of `strB` minus `indexB`.","nodes":[{"content":"The substrings to compare start in <ph id=\"ph1\">`strA`</ph> at position <ph id=\"ph2\">`indexA`</ph> and in <ph id=\"ph3\">`strB`</ph> at position <ph id=\"ph4\">`indexB`</ph>.","pos":[0,98],"source":"The substrings to compare start in `strA` at position `indexA` and in `strB` at position `indexB`."},{"content":"The length of the first substring is the length of <ph id=\"ph1\">`strA`</ph> minus <ph id=\"ph2\">`indexA`</ph>.","pos":[99,172],"source":" The length of the first substring is the length of `strA` minus `indexA`."},{"content":"The length of the second substring is the length of <ph id=\"ph1\">`strB`</ph> minus <ph id=\"ph2\">`indexB`</ph>.","pos":[173,247],"source":" The length of the second substring is the length of `strB` minus `indexB`."}]},{"pos":[254,424],"content":"The number of characters to compare is the lesser of the lengths of the two substrings, and `length`. The `indexA`, `indexB`, and `length` parameters must be nonnegative.","nodes":[{"content":"The number of characters to compare is the lesser of the lengths of the two substrings, and <ph id=\"ph1\">`length`</ph>.","pos":[0,101],"source":"The number of characters to compare is the lesser of the lengths of the two substrings, and `length`."},{"content":"The <ph id=\"ph1\">`indexA`</ph>, <ph id=\"ph2\">`indexB`</ph>, and <ph id=\"ph3\">`length`</ph> parameters must be nonnegative.","pos":[102,170],"source":" The `indexA`, `indexB`, and `length` parameters must be nonnegative."}]},{"pos":[431,874],"content":"The comparison uses the `culture` parameter to obtain culture-specific information, such as casing rules and the alphabetical order of individual characters. For example, a particular culture could specify that certain combinations of characters be treated as a single character, that uppercase and lowercase characters be compared in a particular way, or that the sort order of a character depends on the characters that precede or follow it.","nodes":[{"content":"The comparison uses the <ph id=\"ph1\">`culture`</ph> parameter to obtain culture-specific information, such as casing rules and the alphabetical order of individual characters.","pos":[0,157],"source":"The comparison uses the `culture` parameter to obtain culture-specific information, such as casing rules and the alphabetical order of individual characters."},{"content":"For example, a particular culture could specify that certain combinations of characters be treated as a single character, that uppercase and lowercase characters be compared in a particular way, or that the sort order of a character depends on the characters that precede or follow it.","pos":[158,443]}]},{"pos":[882,1461],"content":"[!CAUTION]\n The <xref:System.String.Compare%28System.String%2CSystem.Int32%2CSystem.String%2CSystem.Int32%2CSystem.Int32%2CSystem.Globalization.CultureInfo%2CSystem.Globalization.CompareOptions%29> method is designed primarily for use in sorting or alphabetizing operations. It should not be used when the primary purpose of the method call is to determine whether two substrings are equivalent (that is, when the purpose of the method call is to test for a return value of zero). To determine whether two strings are equivalent, call the <xref:System.String.Equals%2A> method.","leadings":["","> "],"nodes":[{"content":" The <xref:System.String.Compare%28System.String%2CSystem.Int32%2CSystem.String%2CSystem.Int32%2CSystem.Int32%2CSystem.Globalization.CultureInfo%2CSystem.Globalization.CompareOptions%29> method is designed primarily for use in sorting or alphabetizing operations. It should not be used when the primary purpose of the method call is to determine whether two substrings are equivalent (that is, when the purpose of the method call is to test for a return value of zero). To determine whether two strings are equivalent, call the <xref:System.String.Equals%2A> method.","pos":[11,577],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.String.Compare%28System.String%2CSystem.Int32%2CSystem.String%2CSystem.Int32%2CSystem.Int32%2CSystem.Globalization.CultureInfo%2CSystem.Globalization.CompareOptions%29&gt;</ph> method is designed primarily for use in sorting or alphabetizing operations.","pos":[1,263],"source":" The <xref:System.String.Compare%28System.String%2CSystem.Int32%2CSystem.String%2CSystem.Int32%2CSystem.Int32%2CSystem.Globalization.CultureInfo%2CSystem.Globalization.CompareOptions%29> method is designed primarily for use in sorting or alphabetizing operations."},{"content":"It should not be used when the primary purpose of the method call is to determine whether two substrings are equivalent (that is, when the purpose of the method call is to test for a return value of zero).","pos":[264,469]},{"content":"To determine whether two strings are equivalent, call the <ph id=\"ph1\">&lt;xref:System.String.Equals%2A&gt;</ph> method.","pos":[470,566],"source":" To determine whether two strings are equivalent, call the <xref:System.String.Equals%2A> method."}]}]},{"pos":[1468,1698],"content":"One or both of `strA` and `strB` can be `null`. By definition, any string, including <xref:System.String.Empty?displayProperty=fullName>, compares greater than a null reference, and two null references compare equal to each other.","nodes":[{"content":"One or both of <ph id=\"ph1\">`strA`</ph> and <ph id=\"ph2\">`strB`</ph> can be <ph id=\"ph3\">`null`</ph>.","pos":[0,47],"source":"One or both of `strA` and `strB` can be `null`."},{"content":"By definition, any string, including <ph id=\"ph1\">&lt;xref:System.String.Empty?displayProperty=fullName&gt;</ph>, compares greater than a null reference, and two null references compare equal to each other.","pos":[48,230],"source":" By definition, any string, including <xref:System.String.Empty?displayProperty=fullName>, compares greater than a null reference, and two null references compare equal to each other."}]},{"pos":[1705,2162],"content":"The comparison can be further specified by the `options` parameter, which consists of one or more members of the <xref:System.Globalization.CompareOptions?displayProperty=fullName> enumeration. However, because the purpose of this method is to conduct a culture-sensitive string comparison, the <xref:System.Globalization.CompareOptions?displayProperty=fullName> and <xref:System.Globalization.CompareOptions?displayProperty=fullName> values have no effect.","nodes":[{"content":"The comparison can be further specified by the <ph id=\"ph1\">`options`</ph> parameter, which consists of one or more members of the <ph id=\"ph2\">&lt;xref:System.Globalization.CompareOptions?displayProperty=fullName&gt;</ph> enumeration.","pos":[0,193],"source":"The comparison can be further specified by the `options` parameter, which consists of one or more members of the <xref:System.Globalization.CompareOptions?displayProperty=fullName> enumeration."},{"content":"However, because the purpose of this method is to conduct a culture-sensitive string comparison, the <ph id=\"ph1\">&lt;xref:System.Globalization.CompareOptions?displayProperty=fullName&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Globalization.CompareOptions?displayProperty=fullName&gt;</ph> values have no effect.","pos":[194,457],"source":" However, because the purpose of this method is to conduct a culture-sensitive string comparison, the <xref:System.Globalization.CompareOptions?displayProperty=fullName> and <xref:System.Globalization.CompareOptions?displayProperty=fullName> values have no effect."}]},{"pos":[2169,2510],"content":"The comparison terminates when an inequality is discovered or both substrings have been compared. However, if the two strings compare equal to the end of one string, and the other string has characters remaining, the string with the remaining characters is considered greater. The return value is the result of the last comparison performed.","nodes":[{"content":"The comparison terminates when an inequality is discovered or both substrings have been compared. However, if the two strings compare equal to the end of one string, and the other string has characters remaining, the string with the remaining characters is considered greater. The return value is the result of the last comparison performed.","pos":[0,341],"nodes":[{"content":"The comparison terminates when an inequality is discovered or both substrings have been compared.","pos":[0,97]},{"content":"However, if the two strings compare equal to the end of one string, and the other string has characters remaining, the string with the remaining characters is considered greater.","pos":[98,276]},{"content":"The return value is the result of the last comparison performed.","pos":[277,341]}]}]}],"pos":[189903,192429],"yaml":true,"extradata":"MT"},{"content":"The first string to use in the comparison.","nodes":[{"pos":[0,42],"content":"The first string to use in the comparison.","nodes":[{"content":"The first string to use in the comparison.","pos":[0,42]}]}],"pos":[193296,193339],"yaml":true},{"content":"The starting position of the substring within <code>strA</code>.","nodes":[{"pos":[0,64],"content":"The starting position of the substring within <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">strA</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The starting position of the substring within <code>strA</code>."}],"pos":[193400,193465],"yaml":true},{"content":"The second string to use in the comparison.","nodes":[{"pos":[0,43],"content":"The second string to use in the comparison.","nodes":[{"content":"The second string to use in the comparison.","pos":[0,43]}]}],"pos":[193525,193569],"yaml":true},{"content":"The starting position of the substring within <code>strB</code>.","nodes":[{"pos":[0,64],"content":"The starting position of the substring within <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">strB</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The starting position of the substring within <code>strB</code>."}],"pos":[193630,193695],"yaml":true},{"content":"The maximum number of characters in the substrings to compare.","nodes":[{"pos":[0,62],"content":"The maximum number of characters in the substrings to compare.","nodes":[{"content":"The maximum number of characters in the substrings to compare.","pos":[0,62]}]}],"pos":[193756,193819],"yaml":true},{"content":"An object that supplies culture-specific comparison information.","nodes":[{"pos":[0,64],"content":"An object that supplies culture-specific comparison information.","nodes":[{"content":"An object that supplies culture-specific comparison information.","pos":[0,64]}]}],"pos":[193901,193966],"yaml":true},{"content":"Options to use when performing the comparison (such as ignoring case or symbols).","nodes":[{"pos":[0,81],"content":"Options to use when performing the comparison (such as ignoring case or symbols).","nodes":[{"content":"Options to use when performing the comparison (such as ignoring case or symbols).","pos":[0,81]}]}],"pos":[194051,194133],"yaml":true},{"content":"An integer that indicates the lexical relationship between the two substrings, as shown in the following table.  \n  \n <table><thead><tr><th> Value  \n  \n </th><th> Condition  \n  \n </th></tr></thead><tbody><tr><td> Less than zero  \n  \n </td><td> The substring in <code>strA</code> precedes the substring in <code>strB</code> in the sort order.  \n  \n </td></tr><tr><td> Zero  \n  \n </td><td> The substrings occur in the same position in the sort order, or <code>length</code> is zero.  \n  \n </td></tr><tr><td> Greater than zero  \n  \n </td><td> The substring in <code>strA</code> follows the substring in <code>strB</code> in the sort order.  \n  \n </td></tr></tbody></table>","nodes":[{"pos":[0,111],"content":"An integer that indicates the lexical relationship between the two substrings, as shown in the following table.","nodes":[{"content":"An integer that indicates the lexical relationship between the two substrings, as shown in the following table.","pos":[0,111]}]},{"pos":[118,670],"content":"<table><thead><tr><th> Value  \n  \n </th><th> Condition  \n  \n </th></tr></thead><tbody><tr><td> Less than zero  \n  \n </td><td> The substring in <code>strA</code> precedes the substring in <code>strB</code> in the sort order.  \n  \n </td></tr><tr><td> Zero  \n  \n </td><td> The substrings occur in the same position in the sort order, or <code>length</code> is zero.  \n  \n </td></tr><tr><td> Greater than zero  \n  \n </td><td> The substring in <code>strA</code> follows the substring in <code>strB</code> in the sort order.  \n  \n </td></tr></tbody></table>","nodes":[{"content":"Value","pos":[23,33],"source":" Value  \n  \n "},{"content":"Condition","pos":[45,59],"source":" Condition  \n  \n "},{"content":"Less than zero","pos":[95,114],"source":" Less than zero  \n  \n "},{"content":" The substring in <code>strA</code> precedes the substring in <code>strB</code> in the sort order.  \n  \n ","pos":[125,230],"nodes":[{"content":"The substring in <ph id=\"ph1\">&lt;code&gt;strA&lt;/code&gt;</ph> precedes the substring in <ph id=\"ph2\">&lt;code&gt;strB&lt;/code&gt;</ph> in the sort order.","pos":[1,98],"source":" The substring in <code>strA</code> precedes the substring in <code>strB</code> in the sort order."}]},{"content":"Zero","pos":[249,258],"source":" Zero  \n  \n "},{"content":" The substrings occur in the same position in the sort order, or <code>length</code> is zero.  \n  \n ","pos":[269,369],"nodes":[{"content":"The substrings occur in the same position in the sort order, or <ph id=\"ph1\">&lt;code&gt;length&lt;/code&gt;</ph> is zero.","pos":[1,93],"source":" The substrings occur in the same position in the sort order, or <code>length</code> is zero."}]},{"content":"Greater than zero","pos":[388,410],"source":" Greater than zero  \n  \n "},{"content":" The substring in <code>strA</code> follows the substring in <code>strB</code> in the sort order.  \n  \n ","pos":[421,525],"nodes":[{"content":"The substring in <ph id=\"ph1\">&lt;code&gt;strA&lt;/code&gt;</ph> follows the substring in <ph id=\"ph2\">&lt;code&gt;strB&lt;/code&gt;</ph> in the sort order.","pos":[1,97],"source":" The substring in <code>strA</code> follows the substring in <code>strB</code> in the sort order."}]}]}],"pos":[194189,194879],"yaml":true},{"content":"<code>options</code> is not a <xref href=\"System.Globalization.CompareOptions\"></xref> value.","nodes":[{"pos":[0,93],"content":"<ph id=\"ph1\">&lt;code&gt;options&lt;/code&gt;</ph> is not a <ph id=\"ph2\">&lt;xref href=\"System.Globalization.CompareOptions\"&gt;&lt;/xref&gt;</ph> value.","source":"<code>options</code> is not a <xref href=\"System.Globalization.CompareOptions\"></xref> value."}],"pos":[195022,195116],"yaml":true},{"content":"<code>indexA</code> is greater than <code>strA</code>`.Length`.  \n  \n -or-  \n  \n <code>indexB</code> is greater than <code>strB</code>`.Length`.  \n  \n -or-  \n  \n <code>indexA</code>, <code>indexB</code>, or <code>length</code> is negative.  \n  \n -or-  \n  \n Either <code>strA</code> or <code>strB</code> is `null`, and <code>length</code> is greater than zero.","nodes":[{"pos":[0,63],"content":"<ph id=\"ph1\">&lt;code&gt;indexA&lt;/code&gt;</ph> is greater than <ph id=\"ph2\">&lt;code&gt;strA&lt;/code&gt;</ph><ph id=\"ph3\">`.Length`</ph>.","source":"<code>indexA</code> is greater than <code>strA</code>`.Length`."},{"pos":[70,74],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[81,144],"content":"<ph id=\"ph1\">&lt;code&gt;indexB&lt;/code&gt;</ph> is greater than <ph id=\"ph2\">&lt;code&gt;strB&lt;/code&gt;</ph><ph id=\"ph3\">`.Length`</ph>.","source":"<code>indexB</code> is greater than <code>strB</code>`.Length`."},{"pos":[151,155],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[162,239],"content":"<ph id=\"ph1\">&lt;code&gt;indexA&lt;/code&gt;</ph>, <ph id=\"ph2\">&lt;code&gt;indexB&lt;/code&gt;</ph>, or <ph id=\"ph3\">&lt;code&gt;length&lt;/code&gt;</ph> is negative.","source":"<code>indexA</code>, <code>indexB</code>, or <code>length</code> is negative."},{"pos":[246,250],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[257,359],"content":"Either <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">strA</ph><ept id=\"p1\">&lt;/code&gt;</ept> or <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">strB</ph><ept id=\"p2\">&lt;/code&gt;</ept> is <ph id=\"ph3\">`null`</ph>, and <bpt id=\"p3\">&lt;code&gt;</bpt><ph id=\"ph4\">length</ph><ept id=\"p3\">&lt;/code&gt;</ept> is greater than zero.","source":"Either <code>strA</code> or <code>strB</code> is `null`, and <code>length</code> is greater than zero."}],"pos":[195230,195604],"yaml":true},{"content":"<code>culture</code> is `null`.","nodes":[{"pos":[0,31],"content":"<ph id=\"ph1\">&lt;code&gt;culture&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>culture</code> is `null`."}],"pos":[195706,195738],"yaml":true},{"content":"Compares two specified <xref href=\"System.String\"></xref> objects using the specified comparison options and culture-specific information to influence the comparison, and returns an integer that indicates the relationship of the two strings to each other in the sort order.","nodes":[{"pos":[0,273],"content":"Compares two specified <ph id=\"ph1\">&lt;xref href=\"System.String\"&gt;&lt;/xref&gt;</ph> objects using the specified comparison options and culture-specific information to influence the comparison, and returns an integer that indicates the relationship of the two strings to each other in the sort order.","source":"Compares two specified <xref href=\"System.String\"></xref> objects using the specified comparison options and culture-specific information to influence the comparison, and returns an integer that indicates the relationship of the two strings to each other in the sort order."}],"pos":[197183,197457],"yaml":true},{"content":"The comparison uses the `culture` parameter to obtain culture-specific information, such as casing rules and the alphabetical order of individual characters. For example, a particular culture could specify that certain combinations of characters be treated as a single character, that uppercase and lowercase characters be compared in a particular way, or that the sort order of a character depends on the characters that precede or follow it.  \n  \n> [!CAUTION]\n>  The <xref:System.String.Compare%28System.String%2CSystem.String%2CSystem.Globalization.CultureInfo%2CSystem.Globalization.CompareOptions%29> method is designed primarily for use in sorting or alphabetizing operations. It should not be used when the primary purpose of the method call is to determine whether two strings are equivalent (that is, when the purpose of the method call is to test for a return value of zero). To determine whether two strings are equivalent, call the <xref:System.String.Equals%2A> method.  \n  \n The comparison can be further specified by the `options` parameter, which consists of one or more members of the <xref:System.Globalization.CompareOptions> enumeration. However, because the purpose of this method is to conduct a culture-sensitive string comparison, the <xref:System.Globalization.CompareOptions?displayProperty=fullName> and <xref:System.Globalization.CompareOptions?displayProperty=fullName> values have no effect.  \n  \n Either or both comparands can be `null`. By definition, any string, including <xref:System.String.Empty?displayProperty=fullName>, compares greater than a null reference, and two null references compare equal to each other.  \n  \n The comparison terminates when an inequality is discovered or both strings have been compared. However, if the two strings compare equal to the end of one string, and the other string has characters remaining, the string with the remaining characters is considered greater.","nodes":[{"pos":[0,443],"content":"The comparison uses the `culture` parameter to obtain culture-specific information, such as casing rules and the alphabetical order of individual characters. For example, a particular culture could specify that certain combinations of characters be treated as a single character, that uppercase and lowercase characters be compared in a particular way, or that the sort order of a character depends on the characters that precede or follow it.","nodes":[{"content":"The comparison uses the <ph id=\"ph1\">`culture`</ph> parameter to obtain culture-specific information, such as casing rules and the alphabetical order of individual characters.","pos":[0,157],"source":"The comparison uses the `culture` parameter to obtain culture-specific information, such as casing rules and the alphabetical order of individual characters."},{"content":"For example, a particular culture could specify that certain combinations of characters be treated as a single character, that uppercase and lowercase characters be compared in a particular way, or that the sort order of a character depends on the characters that precede or follow it.","pos":[158,443]}]},{"pos":[451,982],"content":"[!CAUTION]\n The <xref:System.String.Compare%28System.String%2CSystem.String%2CSystem.Globalization.CultureInfo%2CSystem.Globalization.CompareOptions%29> method is designed primarily for use in sorting or alphabetizing operations. It should not be used when the primary purpose of the method call is to determine whether two strings are equivalent (that is, when the purpose of the method call is to test for a return value of zero). To determine whether two strings are equivalent, call the <xref:System.String.Equals%2A> method.","leadings":["","> "],"nodes":[{"content":" The <xref:System.String.Compare%28System.String%2CSystem.String%2CSystem.Globalization.CultureInfo%2CSystem.Globalization.CompareOptions%29> method is designed primarily for use in sorting or alphabetizing operations. It should not be used when the primary purpose of the method call is to determine whether two strings are equivalent (that is, when the purpose of the method call is to test for a return value of zero). To determine whether two strings are equivalent, call the <xref:System.String.Equals%2A> method.","pos":[11,529],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.String.Compare%28System.String%2CSystem.String%2CSystem.Globalization.CultureInfo%2CSystem.Globalization.CompareOptions%29&gt;</ph> method is designed primarily for use in sorting or alphabetizing operations.","pos":[1,218],"source":" The <xref:System.String.Compare%28System.String%2CSystem.String%2CSystem.Globalization.CultureInfo%2CSystem.Globalization.CompareOptions%29> method is designed primarily for use in sorting or alphabetizing operations."},{"content":"It should not be used when the primary purpose of the method call is to determine whether two strings are equivalent (that is, when the purpose of the method call is to test for a return value of zero).","pos":[219,421]},{"content":"To determine whether two strings are equivalent, call the <ph id=\"ph1\">&lt;xref:System.String.Equals%2A&gt;</ph> method.","pos":[422,518],"source":" To determine whether two strings are equivalent, call the <xref:System.String.Equals%2A> method."}]}]},{"pos":[989,1421],"content":"The comparison can be further specified by the `options` parameter, which consists of one or more members of the <xref:System.Globalization.CompareOptions> enumeration. However, because the purpose of this method is to conduct a culture-sensitive string comparison, the <xref:System.Globalization.CompareOptions?displayProperty=fullName> and <xref:System.Globalization.CompareOptions?displayProperty=fullName> values have no effect.","nodes":[{"content":"The comparison can be further specified by the <ph id=\"ph1\">`options`</ph> parameter, which consists of one or more members of the <ph id=\"ph2\">&lt;xref:System.Globalization.CompareOptions&gt;</ph> enumeration.","pos":[0,168],"source":"The comparison can be further specified by the `options` parameter, which consists of one or more members of the <xref:System.Globalization.CompareOptions> enumeration."},{"content":"However, because the purpose of this method is to conduct a culture-sensitive string comparison, the <ph id=\"ph1\">&lt;xref:System.Globalization.CompareOptions?displayProperty=fullName&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Globalization.CompareOptions?displayProperty=fullName&gt;</ph> values have no effect.","pos":[169,432],"source":" However, because the purpose of this method is to conduct a culture-sensitive string comparison, the <xref:System.Globalization.CompareOptions?displayProperty=fullName> and <xref:System.Globalization.CompareOptions?displayProperty=fullName> values have no effect."}]},{"pos":[1428,1651],"content":"Either or both comparands can be `null`. By definition, any string, including <xref:System.String.Empty?displayProperty=fullName>, compares greater than a null reference, and two null references compare equal to each other.","nodes":[{"content":"Either or both comparands can be <ph id=\"ph1\">`null`</ph>.","pos":[0,40],"source":"Either or both comparands can be `null`."},{"content":"By definition, any string, including <ph id=\"ph1\">&lt;xref:System.String.Empty?displayProperty=fullName&gt;</ph>, compares greater than a null reference, and two null references compare equal to each other.","pos":[41,223],"source":" By definition, any string, including <xref:System.String.Empty?displayProperty=fullName>, compares greater than a null reference, and two null references compare equal to each other."}]},{"pos":[1658,1931],"content":"The comparison terminates when an inequality is discovered or both strings have been compared. However, if the two strings compare equal to the end of one string, and the other string has characters remaining, the string with the remaining characters is considered greater.","nodes":[{"content":"The comparison terminates when an inequality is discovered or both strings have been compared. However, if the two strings compare equal to the end of one string, and the other string has characters remaining, the string with the remaining characters is considered greater.","pos":[0,273],"nodes":[{"content":"The comparison terminates when an inequality is discovered or both strings have been compared.","pos":[0,94]},{"content":"However, if the two strings compare equal to the end of one string, and the other string has characters remaining, the string with the remaining characters is considered greater.","pos":[95,273]}]}]}],"pos":[197468,199411],"yaml":true,"extradata":"MT"},{"content":"The first string to compare.","nodes":[{"pos":[0,28],"content":"The first string to compare.","nodes":[{"content":"The first string to compare.","pos":[0,28]}]}],"pos":[200363,200392],"yaml":true},{"content":"The second string to compare.","nodes":[{"pos":[0,29],"content":"The second string to compare.","nodes":[{"content":"The second string to compare.","pos":[0,29]}]}],"pos":[200452,200482],"yaml":true},{"content":"The culture that supplies culture-specific comparison information.","nodes":[{"pos":[0,66],"content":"The culture that supplies culture-specific comparison information.","nodes":[{"content":"The culture that supplies culture-specific comparison information.","pos":[0,66]}]}],"pos":[200564,200631],"yaml":true},{"content":"Options to use when performing the comparison (such as ignoring case or symbols).","nodes":[{"pos":[0,81],"content":"Options to use when performing the comparison (such as ignoring case or symbols).","nodes":[{"content":"Options to use when performing the comparison (such as ignoring case or symbols).","pos":[0,81]}]}],"pos":[200716,200798],"yaml":true},{"content":"A 32-bit signed integer that indicates the lexical relationship between <code>strA</code> and <code>strB</code>, as shown in the following table  \n  \n <table><thead><tr><th> Value  \n  \n </th><th> Condition  \n  \n </th></tr></thead><tbody><tr><td> Less than zero  \n  \n </td><td><code>strA</code> precedes <code>strB</code> in the sort order.  \n  \n </td></tr><tr><td> Zero  \n  \n </td><td><code>strA</code> occurs in the same position as <code>strB</code> in the sort order.  \n  \n </td></tr><tr><td> Greater than zero  \n  \n </td><td><code>strA</code> follows <code>strB</code> in the sort order.  \n  \n </td></tr></tbody></table>","nodes":[{"pos":[0,144],"content":"A 32-bit signed integer that indicates the lexical relationship between <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">strA</ph><ept id=\"p1\">&lt;/code&gt;</ept> and <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">strB</ph><ept id=\"p2\">&lt;/code&gt;</ept>, as shown in the following table","source":"A 32-bit signed integer that indicates the lexical relationship between <code>strA</code> and <code>strB</code>, as shown in the following table"},{"pos":[151,625],"content":"<table><thead><tr><th> Value  \n  \n </th><th> Condition  \n  \n </th></tr></thead><tbody><tr><td> Less than zero  \n  \n </td><td><code>strA</code> precedes <code>strB</code> in the sort order.  \n  \n </td></tr><tr><td> Zero  \n  \n </td><td><code>strA</code> occurs in the same position as <code>strB</code> in the sort order.  \n  \n </td></tr><tr><td> Greater than zero  \n  \n </td><td><code>strA</code> follows <code>strB</code> in the sort order.  \n  \n </td></tr></tbody></table>","nodes":[{"content":"Value","pos":[23,33],"source":" Value  \n  \n "},{"content":"Condition","pos":[45,59],"source":" Condition  \n  \n "},{"content":"Less than zero","pos":[95,114],"source":" Less than zero  \n  \n "},{"content":"<code>strA</code> precedes <code>strB</code> in the sort order.  \n  \n ","pos":[125,195],"nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;strA&lt;/code&gt;</ph> precedes <ph id=\"ph2\">&lt;code&gt;strB&lt;/code&gt;</ph> in the sort order.","pos":[0,63],"source":"<code>strA</code> precedes <code>strB</code> in the sort order."}]},{"content":"Zero","pos":[214,223],"source":" Zero  \n  \n "},{"content":"<code>strA</code> occurs in the same position as <code>strB</code> in the sort order.  \n  \n ","pos":[234,326],"nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;strA&lt;/code&gt;</ph> occurs in the same position as <ph id=\"ph2\">&lt;code&gt;strB&lt;/code&gt;</ph> in the sort order.","pos":[0,85],"source":"<code>strA</code> occurs in the same position as <code>strB</code> in the sort order."}]},{"content":"Greater than zero","pos":[345,367],"source":" Greater than zero  \n  \n "},{"content":"<code>strA</code> follows <code>strB</code> in the sort order.  \n  \n ","pos":[378,447],"nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;strA&lt;/code&gt;</ph> follows <ph id=\"ph2\">&lt;code&gt;strB&lt;/code&gt;</ph> in the sort order.","pos":[0,62],"source":"<code>strA</code> follows <code>strB</code> in the sort order."}]}]}],"pos":[200854,201499],"yaml":true},{"content":"<code>options</code> is not a <xref href=\"System.Globalization.CompareOptions\"></xref> value.","nodes":[{"pos":[0,93],"content":"<ph id=\"ph1\">&lt;code&gt;options&lt;/code&gt;</ph> is not a <ph id=\"ph2\">&lt;xref href=\"System.Globalization.CompareOptions\"&gt;&lt;/xref&gt;</ph> value.","source":"<code>options</code> is not a <xref href=\"System.Globalization.CompareOptions\"></xref> value."}],"pos":[201642,201736],"yaml":true},{"content":"<code>culture</code> is `null`.","nodes":[{"pos":[0,31],"content":"<ph id=\"ph1\">&lt;code&gt;culture&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>culture</code> is `null`."}],"pos":[201838,201870],"yaml":true},{"content":"Compares substrings of two specified <xref href=\"System.String\"></xref> objects by evaluating the numeric values of the corresponding <xref href=\"System.Char\"></xref> objects in each substring.","nodes":[{"pos":[0,193],"content":"Compares substrings of two specified <ph id=\"ph1\">&lt;xref href=\"System.String\"&gt;&lt;/xref&gt;</ph> objects by evaluating the numeric values of the corresponding <ph id=\"ph2\">&lt;xref href=\"System.Char\"&gt;&lt;/xref&gt;</ph> objects in each substring.","source":"Compares substrings of two specified <xref href=\"System.String\"></xref> objects by evaluating the numeric values of the corresponding <xref href=\"System.Char\"></xref> objects in each substring."}],"pos":[203243,203437],"yaml":true},{"content":"The `indexA`, `indexB`, and `length` parameters must be nonnegative.  \n  \n The number of characters compared is the lesser of the length of `strA` less `indexA`, the length of `strB` less `indexB`, and `length`.  \n  \n This method performs a case-sensitive comparison using ordinal sort rules. For more information about word, string, and ordinal sorts, see <xref:System.Globalization.CompareOptions?displayProperty=fullName>. To perform a case-insensitive comparison using ordinal sort rules, call the<xref:System.String.Compare%28System.String%2CSystem.Int32%2CSystem.String%2CSystem.Int32%2CSystem.Int32%2CSystem.StringComparison%29>method with the `comparisonType` argument set to<xref:System.StringComparison?displayProperty=fullName>.  \n  \n Because <xref:System.String.CompareOrdinal%28System.String%2CSystem.String%29> is a static method, `strA` and `strB` can be `null`. If both values are `null`, the method returns 0 (zero), which indicates that `strA` and `strB` are equal. If only one of the values is `null`, the method considers the non-null value to be greater.","nodes":[{"pos":[0,68],"content":"The <ph id=\"ph1\">`indexA`</ph>, <ph id=\"ph2\">`indexB`</ph>, and <ph id=\"ph3\">`length`</ph> parameters must be nonnegative.","source":"The `indexA`, `indexB`, and `length` parameters must be nonnegative."},{"pos":[75,211],"content":"The number of characters compared is the lesser of the length of <ph id=\"ph1\">`strA`</ph> less <ph id=\"ph2\">`indexA`</ph>, the length of <ph id=\"ph3\">`strB`</ph> less <ph id=\"ph4\">`indexB`</ph>, and <ph id=\"ph5\">`length`</ph>.","source":"The number of characters compared is the lesser of the length of `strA` less `indexA`, the length of `strB` less `indexB`, and `length`."},{"pos":[218,739],"content":"This method performs a case-sensitive comparison using ordinal sort rules. For more information about word, string, and ordinal sorts, see <xref:System.Globalization.CompareOptions?displayProperty=fullName>. To perform a case-insensitive comparison using ordinal sort rules, call the<xref:System.String.Compare%28System.String%2CSystem.Int32%2CSystem.String%2CSystem.Int32%2CSystem.Int32%2CSystem.StringComparison%29>method with the `comparisonType` argument set to<xref:System.StringComparison?displayProperty=fullName>.","nodes":[{"content":"This method performs a case-sensitive comparison using ordinal sort rules.","pos":[0,74]},{"content":"For more information about word, string, and ordinal sorts, see <ph id=\"ph1\">&lt;xref:System.Globalization.CompareOptions?displayProperty=fullName&gt;</ph>.","pos":[75,207],"source":" For more information about word, string, and ordinal sorts, see <xref:System.Globalization.CompareOptions?displayProperty=fullName>."},{"content":"To perform a case-insensitive comparison using ordinal sort rules, call the<ph id=\"ph1\">&lt;xref:System.String.Compare%28System.String%2CSystem.Int32%2CSystem.String%2CSystem.Int32%2CSystem.Int32%2CSystem.StringComparison%29&gt;</ph>method with the <ph id=\"ph2\">`comparisonType`</ph> argument set to<ph id=\"ph3\">&lt;xref:System.StringComparison?displayProperty=fullName&gt;</ph>.","pos":[208,521],"source":" To perform a case-insensitive comparison using ordinal sort rules, call the<xref:System.String.Compare%28System.String%2CSystem.Int32%2CSystem.String%2CSystem.Int32%2CSystem.Int32%2CSystem.StringComparison%29>method with the `comparisonType` argument set to<xref:System.StringComparison?displayProperty=fullName>."}]},{"pos":[746,1075],"content":"Because <xref:System.String.CompareOrdinal%28System.String%2CSystem.String%29> is a static method, `strA` and `strB` can be `null`. If both values are `null`, the method returns 0 (zero), which indicates that `strA` and `strB` are equal. If only one of the values is `null`, the method considers the non-null value to be greater.","nodes":[{"content":"Because <ph id=\"ph1\">&lt;xref:System.String.CompareOrdinal%28System.String%2CSystem.String%29&gt;</ph> is a static method, <ph id=\"ph2\">`strA`</ph> and <ph id=\"ph3\">`strB`</ph> can be <ph id=\"ph4\">`null`</ph>.","pos":[0,131],"source":"Because <xref:System.String.CompareOrdinal%28System.String%2CSystem.String%29> is a static method, `strA` and `strB` can be `null`."},{"content":"If both values are <ph id=\"ph1\">`null`</ph>, the method returns 0 (zero), which indicates that <ph id=\"ph2\">`strA`</ph> and <ph id=\"ph3\">`strB`</ph> are equal.","pos":[132,237],"source":" If both values are `null`, the method returns 0 (zero), which indicates that `strA` and `strB` are equal."},{"content":"If only one of the values is <ph id=\"ph1\">`null`</ph>, the method considers the non-null value to be greater.","pos":[238,329],"source":" If only one of the values is `null`, the method considers the non-null value to be greater."}]}],"pos":[203448,204532],"yaml":true,"extradata":"MT"},{"content":"The first string to use in the comparison.","nodes":[{"pos":[0,42],"content":"The first string to use in the comparison.","nodes":[{"content":"The first string to use in the comparison.","pos":[0,42]}]}],"pos":[205293,205336],"yaml":true},{"content":"The starting index of the substring in <code>strA</code>.","nodes":[{"pos":[0,57],"content":"The starting index of the substring in <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">strA</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The starting index of the substring in <code>strA</code>."}],"pos":[205397,205455],"yaml":true},{"content":"The second string to use in the comparison.","nodes":[{"pos":[0,43],"content":"The second string to use in the comparison.","nodes":[{"content":"The second string to use in the comparison.","pos":[0,43]}]}],"pos":[205515,205559],"yaml":true},{"content":"The starting index of the substring in <code>strB</code>.","nodes":[{"pos":[0,57],"content":"The starting index of the substring in <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">strB</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The starting index of the substring in <code>strB</code>."}],"pos":[205620,205678],"yaml":true},{"content":"The maximum number of characters in the substrings to compare.","nodes":[{"pos":[0,62],"content":"The maximum number of characters in the substrings to compare.","nodes":[{"content":"The maximum number of characters in the substrings to compare.","pos":[0,62]}]}],"pos":[205739,205802],"yaml":true},{"content":"A 32-bit signed integer that indicates the lexical relationship between the two comparands.  \n  \n <table><thead><tr><th> Value  \n  \n </th><th> Condition  \n  \n </th></tr></thead><tbody><tr><td> Less than zero  \n  \n </td><td> The substring in <code>strA</code> is less than the substring in <code>strB</code>.  \n  \n </td></tr><tr><td> Zero  \n  \n </td><td> The substrings are equal, or <code>length</code> is zero.  \n  \n </td></tr><tr><td> Greater than zero  \n  \n </td><td> The substring in <code>strA</code> is greater than the substring in <code>strB</code>.  \n  \n </td></tr></tbody></table>","nodes":[{"pos":[0,91],"content":"A 32-bit signed integer that indicates the lexical relationship between the two comparands.","nodes":[{"content":"A 32-bit signed integer that indicates the lexical relationship between the two comparands.","pos":[0,91]}]},{"pos":[98,591],"content":"<table><thead><tr><th> Value  \n  \n </th><th> Condition  \n  \n </th></tr></thead><tbody><tr><td> Less than zero  \n  \n </td><td> The substring in <code>strA</code> is less than the substring in <code>strB</code>.  \n  \n </td></tr><tr><td> Zero  \n  \n </td><td> The substrings are equal, or <code>length</code> is zero.  \n  \n </td></tr><tr><td> Greater than zero  \n  \n </td><td> The substring in <code>strA</code> is greater than the substring in <code>strB</code>.  \n  \n </td></tr></tbody></table>","nodes":[{"content":"Value","pos":[23,33],"source":" Value  \n  \n "},{"content":"Condition","pos":[45,59],"source":" Condition  \n  \n "},{"content":"Less than zero","pos":[95,114],"source":" Less than zero  \n  \n "},{"content":" The substring in <code>strA</code> is less than the substring in <code>strB</code>.  \n  \n ","pos":[125,216],"nodes":[{"content":"The substring in <ph id=\"ph1\">&lt;code&gt;strA&lt;/code&gt;</ph> is less than the substring in <ph id=\"ph2\">&lt;code&gt;strB&lt;/code&gt;</ph>.","pos":[1,84],"source":" The substring in <code>strA</code> is less than the substring in <code>strB</code>."}]},{"content":"Zero","pos":[235,244],"source":" Zero  \n  \n "},{"content":" The substrings are equal, or <code>length</code> is zero.  \n  \n ","pos":[255,320],"nodes":[{"content":"The substrings are equal, or <ph id=\"ph1\">&lt;code&gt;length&lt;/code&gt;</ph> is zero.","pos":[1,58],"source":" The substrings are equal, or <code>length</code> is zero."}]},{"content":"Greater than zero","pos":[339,361],"source":" Greater than zero  \n  \n "},{"content":" The substring in <code>strA</code> is greater than the substring in <code>strB</code>.  \n  \n ","pos":[372,466],"nodes":[{"content":"The substring in <ph id=\"ph1\">&lt;code&gt;strA&lt;/code&gt;</ph> is greater than the substring in <ph id=\"ph2\">&lt;code&gt;strB&lt;/code&gt;</ph>.","pos":[1,87],"source":" The substring in <code>strA</code> is greater than the substring in <code>strB</code>."}]}]}],"pos":[205858,206469],"yaml":true},{"content":"<code>strA</code> is not `null` and <code>indexA</code> is greater than <code>strA</code>.<xref href=\"System.String.Length\"></xref>.  \n  \n -or-  \n  \n <code>strB</code> is not `null` and <code>indexB</code> is greater than <code>strB</code>.<xref href=\"System.String.Length\"></xref>.  \n  \n -or-  \n  \n <code>indexA</code>, <code>indexB</code>, or <code>length</code> is negative.","nodes":[{"pos":[0,132],"content":"<ph id=\"ph1\">&lt;code&gt;strA&lt;/code&gt;</ph> is not <ph id=\"ph2\">`null`</ph> and <ph id=\"ph3\">&lt;code&gt;indexA&lt;/code&gt;</ph> is greater than <ph id=\"ph4\">&lt;code&gt;strA&lt;/code&gt;</ph>.<ph id=\"ph5\">&lt;xref href=\"System.String.Length\"&gt;&lt;/xref&gt;</ph>.","source":"<code>strA</code> is not `null` and <code>indexA</code> is greater than <code>strA</code>.<xref href=\"System.String.Length\"></xref>."},{"pos":[139,143],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[150,282],"content":"<ph id=\"ph1\">&lt;code&gt;strB&lt;/code&gt;</ph> is not <ph id=\"ph2\">`null`</ph> and <ph id=\"ph3\">&lt;code&gt;indexB&lt;/code&gt;</ph> is greater than <ph id=\"ph4\">&lt;code&gt;strB&lt;/code&gt;</ph>.<ph id=\"ph5\">&lt;xref href=\"System.String.Length\"&gt;&lt;/xref&gt;</ph>.","source":"<code>strB</code> is not `null` and <code>indexB</code> is greater than <code>strB</code>.<xref href=\"System.String.Length\"></xref>."},{"pos":[289,293],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[300,377],"content":"<ph id=\"ph1\">&lt;code&gt;indexA&lt;/code&gt;</ph>, <ph id=\"ph2\">&lt;code&gt;indexB&lt;/code&gt;</ph>, or <ph id=\"ph3\">&lt;code&gt;length&lt;/code&gt;</ph> is negative.","source":"<code>indexA</code>, <code>indexB</code>, or <code>length</code> is negative."}],"pos":[206639,207031],"yaml":true},{"content":"Compares two specified <xref href=\"System.String\"></xref> objects by evaluating the numeric values of the corresponding <xref href=\"System.Char\"></xref> objects in each string.","nodes":[{"pos":[0,176],"content":"Compares two specified <ph id=\"ph1\">&lt;xref href=\"System.String\"&gt;&lt;/xref&gt;</ph> objects by evaluating the numeric values of the corresponding <ph id=\"ph2\">&lt;xref href=\"System.Char\"&gt;&lt;/xref&gt;</ph> objects in each string.","source":"Compares two specified <xref href=\"System.String\"></xref> objects by evaluating the numeric values of the corresponding <xref href=\"System.Char\"></xref> objects in each string."}],"pos":[208585,208762],"yaml":true},{"content":"This method performs a case-sensitive comparison using ordinal sort rules. For more information about word, string, and ordinal sorts, see <xref:System.Globalization.CompareOptions?displayProperty=fullName>. To perform a case-insensitive comparison using ordinal sort rules, call the <xref:System.String.Compare%28System.String%2CSystem.String%2CSystem.StringComparison%29> method with the `comparisonType` argument set to <xref:System.StringComparison?displayProperty=fullName>.  \n  \n Because <xref:System.String.CompareOrdinal%28System.String%2CSystem.String%29>is a static method, `strA` and `strB` can be `null`. If both values are `null`, the method returns 0 (zero), which indicates that `strA` and `strB` are equal. If only one of the values is `null`, the method considers the non-null value to be greater.","nodes":[{"pos":[0,479],"content":"This method performs a case-sensitive comparison using ordinal sort rules. For more information about word, string, and ordinal sorts, see <xref:System.Globalization.CompareOptions?displayProperty=fullName>. To perform a case-insensitive comparison using ordinal sort rules, call the <xref:System.String.Compare%28System.String%2CSystem.String%2CSystem.StringComparison%29> method with the `comparisonType` argument set to <xref:System.StringComparison?displayProperty=fullName>.","nodes":[{"content":"This method performs a case-sensitive comparison using ordinal sort rules.","pos":[0,74]},{"content":"For more information about word, string, and ordinal sorts, see <ph id=\"ph1\">&lt;xref:System.Globalization.CompareOptions?displayProperty=fullName&gt;</ph>.","pos":[75,207],"source":" For more information about word, string, and ordinal sorts, see <xref:System.Globalization.CompareOptions?displayProperty=fullName>."},{"content":"To perform a case-insensitive comparison using ordinal sort rules, call the <ph id=\"ph1\">&lt;xref:System.String.Compare%28System.String%2CSystem.String%2CSystem.StringComparison%29&gt;</ph> method with the <ph id=\"ph2\">`comparisonType`</ph> argument set to <ph id=\"ph3\">&lt;xref:System.StringComparison?displayProperty=fullName&gt;</ph>.","pos":[208,479],"source":" To perform a case-insensitive comparison using ordinal sort rules, call the <xref:System.String.Compare%28System.String%2CSystem.String%2CSystem.StringComparison%29> method with the `comparisonType` argument set to <xref:System.StringComparison?displayProperty=fullName>."}]},{"pos":[486,814],"content":"Because <xref:System.String.CompareOrdinal%28System.String%2CSystem.String%29>is a static method, `strA` and `strB` can be `null`. If both values are `null`, the method returns 0 (zero), which indicates that `strA` and `strB` are equal. If only one of the values is `null`, the method considers the non-null value to be greater.","nodes":[{"content":"Because <ph id=\"ph1\">&lt;xref:System.String.CompareOrdinal%28System.String%2CSystem.String%29&gt;</ph>is a static method, <ph id=\"ph2\">`strA`</ph> and <ph id=\"ph3\">`strB`</ph> can be <ph id=\"ph4\">`null`</ph>.","pos":[0,130],"source":"Because <xref:System.String.CompareOrdinal%28System.String%2CSystem.String%29>is a static method, `strA` and `strB` can be `null`."},{"content":"If both values are <ph id=\"ph1\">`null`</ph>, the method returns 0 (zero), which indicates that <ph id=\"ph2\">`strA`</ph> and <ph id=\"ph3\">`strB`</ph> are equal.","pos":[131,236],"source":" If both values are `null`, the method returns 0 (zero), which indicates that `strA` and `strB` are equal."},{"content":"If only one of the values is <ph id=\"ph1\">`null`</ph>, the method considers the non-null value to be greater.","pos":[237,328],"source":" If only one of the values is `null`, the method considers the non-null value to be greater."}]}],"pos":[208773,209592],"yaml":true,"extradata":"MT"},{"content":"The first string to compare.","nodes":[{"pos":[0,28],"content":"The first string to compare.","nodes":[{"content":"The first string to compare.","pos":[0,28]}]}],"pos":[210230,210259],"yaml":true},{"content":"The second string to compare.","nodes":[{"pos":[0,29],"content":"The second string to compare.","nodes":[{"content":"The second string to compare.","pos":[0,29]}]}],"pos":[210319,210349],"yaml":true},{"content":"An integer that indicates the lexical relationship between the two comparands.  \n  \n <table><thead><tr><th> Value  \n  \n </th><th> Condition  \n  \n </th></tr></thead><tbody><tr><td> Less than zero  \n  \n </td><td><code>strA</code> is less than <code>strB</code>.  \n  \n </td></tr><tr><td> Zero  \n  \n </td><td><code>strA</code> and <code>strB</code> are equal.  \n  \n </td></tr><tr><td> Greater than zero  \n  \n </td><td><code>strA</code> is greater than <code>strB</code>.  \n  \n </td></tr></tbody></table>","nodes":[{"pos":[0,78],"content":"An integer that indicates the lexical relationship between the two comparands.","nodes":[{"content":"An integer that indicates the lexical relationship between the two comparands.","pos":[0,78]}]},{"pos":[85,500],"content":"<table><thead><tr><th> Value  \n  \n </th><th> Condition  \n  \n </th></tr></thead><tbody><tr><td> Less than zero  \n  \n </td><td><code>strA</code> is less than <code>strB</code>.  \n  \n </td></tr><tr><td> Zero  \n  \n </td><td><code>strA</code> and <code>strB</code> are equal.  \n  \n </td></tr><tr><td> Greater than zero  \n  \n </td><td><code>strA</code> is greater than <code>strB</code>.  \n  \n </td></tr></tbody></table>","nodes":[{"content":"Value","pos":[23,33],"source":" Value  \n  \n "},{"content":"Condition","pos":[45,59],"source":" Condition  \n  \n "},{"content":"Less than zero","pos":[95,114],"source":" Less than zero  \n  \n "},{"content":"<code>strA</code> is less than <code>strB</code>.  \n  \n ","pos":[125,181],"nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;strA&lt;/code&gt;</ph> is less than <ph id=\"ph2\">&lt;code&gt;strB&lt;/code&gt;</ph>.","pos":[0,49],"source":"<code>strA</code> is less than <code>strB</code>."}]},{"content":"Zero","pos":[200,209],"source":" Zero  \n  \n "},{"content":"<code>strA</code> and <code>strB</code> are equal.  \n  \n ","pos":[220,277],"nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;strA&lt;/code&gt;</ph> and <ph id=\"ph2\">&lt;code&gt;strB&lt;/code&gt;</ph> are equal.","pos":[0,50],"source":"<code>strA</code> and <code>strB</code> are equal."}]},{"content":"Greater than zero","pos":[296,318],"source":" Greater than zero  \n  \n "},{"content":"<code>strA</code> is greater than <code>strB</code>.  \n  \n ","pos":[329,388],"nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;strA&lt;/code&gt;</ph> is greater than <ph id=\"ph2\">&lt;code&gt;strB&lt;/code&gt;</ph>.","pos":[0,52],"source":"<code>strA</code> is greater than <code>strB</code>."}]}]}],"pos":[210405,210925],"yaml":true},{"content":"Compares this instance with a specified <xref href=\"System.Object\"></xref> and indicates whether this instance precedes, follows, or appears in the same position in the sort order as the specified <xref href=\"System.Object\"></xref>.","nodes":[{"pos":[0,232],"content":"Compares this instance with a specified <ph id=\"ph1\">&lt;xref href=\"System.Object\"&gt;&lt;/xref&gt;</ph> and indicates whether this instance precedes, follows, or appears in the same position in the sort order as the specified <ph id=\"ph2\">&lt;xref href=\"System.Object\"&gt;&lt;/xref&gt;</ph>.","source":"Compares this instance with a specified <xref href=\"System.Object\"></xref> and indicates whether this instance precedes, follows, or appears in the same position in the sort order as the specified <xref href=\"System.Object\"></xref>."}],"pos":[212425,212658],"yaml":true},{"content":"`value` must be a <xref:System.String> object.  \n  \n> [!CAUTION]\n>  The <xref:System.String.CompareTo%2A> method was designed primarily for use in sorting or alphabetizing operations. It should not be used when the primary purpose of the method call is to determine whether two strings are equivalent. To determine whether two strings are equivalent, call the <xref:System.String.Equals%2A> method.  \n  \n This method performs a word (case-sensitive and culture-sensitive) comparison using the current culture. For more information about word, string, and ordinal sorts, see <xref:System.Globalization.CompareOptions?displayProperty=fullName>.  \n  \n For more information about the behavior of this method, see the Remarks section of the <xref:System.String.Compare%28System.String%2CSystem.String%29?displayProperty=fullName> method.","nodes":[{"pos":[0,46],"content":"<ph id=\"ph1\">`value`</ph> must be a <ph id=\"ph2\">&lt;xref:System.String&gt;</ph> object.","source":"`value` must be a <xref:System.String> object."},{"pos":[54,398],"content":"[!CAUTION]\n The <xref:System.String.CompareTo%2A> method was designed primarily for use in sorting or alphabetizing operations. It should not be used when the primary purpose of the method call is to determine whether two strings are equivalent. To determine whether two strings are equivalent, call the <xref:System.String.Equals%2A> method.","leadings":["","> "],"nodes":[{"content":" The <xref:System.String.CompareTo%2A> method was designed primarily for use in sorting or alphabetizing operations. It should not be used when the primary purpose of the method call is to determine whether two strings are equivalent. To determine whether two strings are equivalent, call the <xref:System.String.Equals%2A> method.","pos":[11,342],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.String.CompareTo%2A&gt;</ph> method was designed primarily for use in sorting or alphabetizing operations.","pos":[1,116],"source":" The <xref:System.String.CompareTo%2A> method was designed primarily for use in sorting or alphabetizing operations."},{"content":"It should not be used when the primary purpose of the method call is to determine whether two strings are equivalent.","pos":[117,234]},{"content":"To determine whether two strings are equivalent, call the <ph id=\"ph1\">&lt;xref:System.String.Equals%2A&gt;</ph> method.","pos":[235,331],"source":" To determine whether two strings are equivalent, call the <xref:System.String.Equals%2A> method."}]}]},{"pos":[405,642],"content":"This method performs a word (case-sensitive and culture-sensitive) comparison using the current culture. For more information about word, string, and ordinal sorts, see <xref:System.Globalization.CompareOptions?displayProperty=fullName>.","nodes":[{"content":"This method performs a word (case-sensitive and culture-sensitive) comparison using the current culture. For more information about word, string, and ordinal sorts, see <xref:System.Globalization.CompareOptions?displayProperty=fullName>.","pos":[0,237],"nodes":[{"content":"This method performs a word (case-sensitive and culture-sensitive) comparison using the current culture.","pos":[0,104]},{"content":"For more information about word, string, and ordinal sorts, see <ph id=\"ph1\">&lt;xref:System.Globalization.CompareOptions?displayProperty=fullName&gt;</ph>.","pos":[105,237],"source":" For more information about word, string, and ordinal sorts, see <xref:System.Globalization.CompareOptions?displayProperty=fullName>."}]}]},{"pos":[649,832],"content":"For more information about the behavior of this method, see the Remarks section of the <xref:System.String.Compare%28System.String%2CSystem.String%29?displayProperty=fullName> method.","nodes":[{"content":"For more information about the behavior of this method, see the Remarks section of the <ph id=\"ph1\">&lt;xref:System.String.Compare%28System.String%2CSystem.String%29?displayProperty=fullName&gt;</ph> method.","pos":[0,183],"source":"For more information about the behavior of this method, see the Remarks section of the <xref:System.String.Compare%28System.String%2CSystem.String%29?displayProperty=fullName> method."}]}],"pos":[212669,213511],"yaml":true,"extradata":"MT"},{"content":"An object that evaluates to a <xref href=\"System.String\"></xref>.","nodes":[{"pos":[0,65],"content":"An object that evaluates to a <ph id=\"ph1\">&lt;xref href=\"System.String\"&gt;&lt;/xref&gt;</ph>.","source":"An object that evaluates to a <xref href=\"System.String\"></xref>."}],"pos":[214224,214290],"yaml":true},{"content":"A 32-bit signed integer that indicates whether this instance precedes, follows, or appears in the same position in the sort order as the <code>value</code> parameter.  \n  \n <table><thead><tr><th> Value  \n  \n </th><th> Condition  \n  \n </th></tr></thead><tbody><tr><td> Less than zero  \n  \n </td><td> This instance precedes <code>value</code>.  \n  \n </td></tr><tr><td> Zero  \n  \n </td><td> This instance has the same position in the sort order as <code>value</code>.  \n  \n </td></tr><tr><td> Greater than zero  \n  \n </td><td> This instance follows <code>value</code>.  \n  \n -or-  \n  \n <code>value</code> is `null`.  \n  \n </td></tr></tbody></table>","nodes":[{"pos":[0,166],"content":"A 32-bit signed integer that indicates whether this instance precedes, follows, or appears in the same position in the sort order as the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter.","source":"A 32-bit signed integer that indicates whether this instance precedes, follows, or appears in the same position in the sort order as the <code>value</code> parameter."},{"pos":[173,565],"content":"<table><thead><tr><th> Value  \n  \n </th><th> Condition  \n  \n </th></tr></thead><tbody><tr><td> Less than zero  \n  \n </td><td> This instance precedes <code>value</code>.  \n  \n </td></tr><tr><td> Zero  \n  \n </td><td> This instance has the same position in the sort order as <code>value</code>.  \n  \n </td></tr><tr><td> Greater than zero  \n  \n </td><td> This instance follows <code>value</code>.","nodes":[{"content":"Value","pos":[23,33],"source":" Value  \n  \n "},{"content":"Condition","pos":[45,59],"source":" Condition  \n  \n "},{"content":"Less than zero","pos":[95,114],"source":" Less than zero  \n  \n "},{"content":" This instance precedes <code>value</code>.  \n  \n ","pos":[125,175],"nodes":[{"content":"This instance precedes <ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph>.","pos":[1,43],"source":" This instance precedes <code>value</code>."}]},{"content":"Zero","pos":[194,203],"source":" Zero  \n  \n "},{"content":" This instance has the same position in the sort order as <code>value</code>.  \n  \n ","pos":[214,298],"nodes":[{"content":"This instance has the same position in the sort order as <ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph>.","pos":[1,77],"source":" This instance has the same position in the sort order as <code>value</code>."}]},{"content":"Greater than zero","pos":[317,339],"source":" Greater than zero  \n  \n "},{"content":"This instance follows <ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph>.","pos":[351,392],"source":" This instance follows <code>value</code>."}]},{"pos":[572,576],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[583,646],"content":"<code>value</code> is `null`.  \n  \n </td></tr></tbody></table>","nodes":[{"content":"<code>value</code> is `null`.  \n  \n ","pos":[0,36],"nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","pos":[0,29],"source":"<code>value</code> is `null`."}]}]}],"pos":[214346,215016],"yaml":true},{"content":"<code>value</code> is not a <xref href=\"System.String\"></xref>.","nodes":[{"pos":[0,63],"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> is not a <ph id=\"ph2\">&lt;xref href=\"System.String\"&gt;&lt;/xref&gt;</ph>.","source":"<code>value</code> is not a <xref href=\"System.String\"></xref>."}],"pos":[215161,215225],"yaml":true},{"content":"Compares this instance with a specified <xref href=\"System.String\"></xref> object and indicates whether this instance precedes, follows, or appears in the same position in the sort order as the specified string.","nodes":[{"pos":[0,211],"content":"Compares this instance with a specified <ph id=\"ph1\">&lt;xref href=\"System.String\"&gt;&lt;/xref&gt;</ph> object and indicates whether this instance precedes, follows, or appears in the same position in the sort order as the specified string.","source":"Compares this instance with a specified <xref href=\"System.String\"></xref> object and indicates whether this instance precedes, follows, or appears in the same position in the sort order as the specified string."}],"pos":[216322,216534],"yaml":true},{"content":"This method performs a word (case-sensitive and culture-sensitive) comparison using the current culture. For more information about word, string, and ordinal sorts, see <xref:System.Globalization.CompareOptions?displayProperty=fullName>.  \n  \n> [!CAUTION]\n>  The <xref:System.String.CompareTo%2A> method was designed primarily for use in sorting or alphabetizing operations. It should not be used when the primary purpose of the method call is to determine whether two strings are equivalent. To determine whether two strings are equivalent, call the <xref:System.String.Equals%2A> method.  \n  \n For more information about the behavior of this method, see the Remarks section of the <xref:System.String.Compare%28System.String%2CSystem.String%29> method.  \n  \n This method implements the <xref:System.IComparable%601?displayProperty=fullName> interface and performs slightly better than the <xref:System.String.CompareTo%28System.Object%29?displayProperty=fullName> method, because it does not have to determine whether the `strB` argument is a mutable value type that must be boxed, and it does not have to cast its parameter from an <xref:System.Object>to a<xref:System.String>.","nodes":[{"pos":[0,237],"content":"This method performs a word (case-sensitive and culture-sensitive) comparison using the current culture. For more information about word, string, and ordinal sorts, see <xref:System.Globalization.CompareOptions?displayProperty=fullName>.","nodes":[{"content":"This method performs a word (case-sensitive and culture-sensitive) comparison using the current culture. For more information about word, string, and ordinal sorts, see <xref:System.Globalization.CompareOptions?displayProperty=fullName>.","pos":[0,237],"nodes":[{"content":"This method performs a word (case-sensitive and culture-sensitive) comparison using the current culture.","pos":[0,104]},{"content":"For more information about word, string, and ordinal sorts, see <ph id=\"ph1\">&lt;xref:System.Globalization.CompareOptions?displayProperty=fullName&gt;</ph>.","pos":[105,237],"source":" For more information about word, string, and ordinal sorts, see <xref:System.Globalization.CompareOptions?displayProperty=fullName>."}]}]},{"pos":[245,589],"content":"[!CAUTION]\n The <xref:System.String.CompareTo%2A> method was designed primarily for use in sorting or alphabetizing operations. It should not be used when the primary purpose of the method call is to determine whether two strings are equivalent. To determine whether two strings are equivalent, call the <xref:System.String.Equals%2A> method.","leadings":["","> "],"nodes":[{"content":" The <xref:System.String.CompareTo%2A> method was designed primarily for use in sorting or alphabetizing operations. It should not be used when the primary purpose of the method call is to determine whether two strings are equivalent. To determine whether two strings are equivalent, call the <xref:System.String.Equals%2A> method.","pos":[11,342],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.String.CompareTo%2A&gt;</ph> method was designed primarily for use in sorting or alphabetizing operations.","pos":[1,116],"source":" The <xref:System.String.CompareTo%2A> method was designed primarily for use in sorting or alphabetizing operations."},{"content":"It should not be used when the primary purpose of the method call is to determine whether two strings are equivalent.","pos":[117,234]},{"content":"To determine whether two strings are equivalent, call the <ph id=\"ph1\">&lt;xref:System.String.Equals%2A&gt;</ph> method.","pos":[235,331],"source":" To determine whether two strings are equivalent, call the <xref:System.String.Equals%2A> method."}]}]},{"pos":[596,754],"content":"For more information about the behavior of this method, see the Remarks section of the <xref:System.String.Compare%28System.String%2CSystem.String%29> method.","nodes":[{"content":"For more information about the behavior of this method, see the Remarks section of the <ph id=\"ph1\">&lt;xref:System.String.Compare%28System.String%2CSystem.String%29&gt;</ph> method.","pos":[0,158],"source":"For more information about the behavior of this method, see the Remarks section of the <xref:System.String.Compare%28System.String%2CSystem.String%29> method."}]},{"pos":[761,1180],"content":"This method implements the <ph id=\"ph1\">&lt;xref:System.IComparable%601?displayProperty=fullName&gt;</ph> interface and performs slightly better than the <ph id=\"ph2\">&lt;xref:System.String.CompareTo%28System.Object%29?displayProperty=fullName&gt;</ph> method, because it does not have to determine whether the <ph id=\"ph3\">`strB`</ph> argument is a mutable value type that must be boxed, and it does not have to cast its parameter from an <ph id=\"ph4\">&lt;xref:System.Object&gt;</ph>to a<ph id=\"ph5\">&lt;xref:System.String&gt;</ph>.","source":"This method implements the <xref:System.IComparable%601?displayProperty=fullName> interface and performs slightly better than the <xref:System.String.CompareTo%28System.Object%29?displayProperty=fullName> method, because it does not have to determine whether the `strB` argument is a mutable value type that must be boxed, and it does not have to cast its parameter from an <xref:System.Object>to a<xref:System.String>."}],"pos":[216545,217735],"yaml":true,"extradata":"MT"},{"content":"The string to compare with this instance.","nodes":[{"pos":[0,41],"content":"The string to compare with this instance.","nodes":[{"content":"The string to compare with this instance.","pos":[0,41]}]}],"pos":[218818,218860],"yaml":true},{"content":"A 32-bit signed integer that indicates whether this instance precedes, follows, or appears in the same position in the sort order as the <code>strB</code> parameter.  \n  \n <table><thead><tr><th> Value  \n  \n </th><th> Condition  \n  \n </th></tr></thead><tbody><tr><td> Less than zero  \n  \n </td><td> This instance precedes <code>strB</code>.  \n  \n </td></tr><tr><td> Zero  \n  \n </td><td> This instance has the same position in the sort order as <code>strB</code>.  \n  \n </td></tr><tr><td> Greater than zero  \n  \n </td><td> This instance follows <code>strB</code>.  \n  \n -or-  \n  \n <code>strB</code> is `null`.  \n  \n </td></tr></tbody></table>","nodes":[{"pos":[0,165],"content":"A 32-bit signed integer that indicates whether this instance precedes, follows, or appears in the same position in the sort order as the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">strB</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter.","source":"A 32-bit signed integer that indicates whether this instance precedes, follows, or appears in the same position in the sort order as the <code>strB</code> parameter."},{"pos":[172,561],"content":"<table><thead><tr><th> Value  \n  \n </th><th> Condition  \n  \n </th></tr></thead><tbody><tr><td> Less than zero  \n  \n </td><td> This instance precedes <code>strB</code>.  \n  \n </td></tr><tr><td> Zero  \n  \n </td><td> This instance has the same position in the sort order as <code>strB</code>.  \n  \n </td></tr><tr><td> Greater than zero  \n  \n </td><td> This instance follows <code>strB</code>.","nodes":[{"content":"Value","pos":[23,33],"source":" Value  \n  \n "},{"content":"Condition","pos":[45,59],"source":" Condition  \n  \n "},{"content":"Less than zero","pos":[95,114],"source":" Less than zero  \n  \n "},{"content":" This instance precedes <code>strB</code>.  \n  \n ","pos":[125,174],"nodes":[{"content":"This instance precedes <ph id=\"ph1\">&lt;code&gt;strB&lt;/code&gt;</ph>.","pos":[1,42],"source":" This instance precedes <code>strB</code>."}]},{"content":"Zero","pos":[193,202],"source":" Zero  \n  \n "},{"content":" This instance has the same position in the sort order as <code>strB</code>.  \n  \n ","pos":[213,296],"nodes":[{"content":"This instance has the same position in the sort order as <ph id=\"ph1\">&lt;code&gt;strB&lt;/code&gt;</ph>.","pos":[1,76],"source":" This instance has the same position in the sort order as <code>strB</code>."}]},{"content":"Greater than zero","pos":[315,337],"source":" Greater than zero  \n  \n "},{"content":"This instance follows <ph id=\"ph1\">&lt;code&gt;strB&lt;/code&gt;</ph>.","pos":[349,389],"source":" This instance follows <code>strB</code>."}]},{"pos":[568,572],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[579,641],"content":"<code>strB</code> is `null`.  \n  \n </td></tr></tbody></table>","nodes":[{"content":"<code>strB</code> is `null`.  \n  \n ","pos":[0,35],"nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;strB&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","pos":[0,28],"source":"<code>strB</code> is `null`."}]}]}],"pos":[218916,219581],"yaml":true},{"content":"Concatenates four specified instances of <xref href=\"System.String\"></xref>.","nodes":[{"pos":[0,76],"content":"Concatenates four specified instances of <ph id=\"ph1\">&lt;xref href=\"System.String\"&gt;&lt;/xref&gt;</ph>.","source":"Concatenates four specified instances of <xref href=\"System.String\"></xref>."}],"pos":[221256,221333],"yaml":true},{"content":"The method concatenates `str0`, `str1`, `str2`, and `str3`; it does not add any delimiters.  \n  \n> [!NOTE]\n>  You can also use your language's string concatenation operator, such as `+` in C#, or `&` and `+` in Visual Basic)  \n>   \n>  , to concatenate strings.  \n  \n An <xref:System.String.Empty> string is used in place of any null object in the array.","nodes":[{"pos":[0,91],"content":"The method concatenates <ph id=\"ph1\">`str0`</ph>, <ph id=\"ph2\">`str1`</ph>, <ph id=\"ph3\">`str2`</ph>, and <ph id=\"ph4\">`str3`</ph>; it does not add any delimiters.","source":"The method concatenates `str0`, `str1`, `str2`, and `str3`; it does not add any delimiters."},{"pos":[99,224],"content":"[!NOTE]\n You can also use your language's string concatenation operator, such as `+` in C#, or `&` and `+` in Visual Basic)","leadings":["","> "],"nodes":[{"content":"You can also use your language's string concatenation operator, such as <ph id=\"ph1\">`+`</ph> in C#, or <ph id=\"ph2\">`&amp;`</ph> and <ph id=\"ph3\">`+`</ph> in Visual Basic)","pos":[9,123],"source":" You can also use your language's string concatenation operator, such as `+` in C#, or `&` and `+` in Visual Basic)"}]},{"pos":[235,260],"content":", to concatenate strings.","nodes":[{"content":", to concatenate strings.","pos":[0,25]}]},{"pos":[267,353],"content":"An <xref:System.String.Empty> string is used in place of any null object in the array.","nodes":[{"content":"An <ph id=\"ph1\">&lt;xref:System.String.Empty&gt;</ph> string is used in place of any null object in the array.","pos":[0,86],"source":"An <xref:System.String.Empty> string is used in place of any null object in the array."}]}],"pos":[221344,221707],"yaml":true,"extradata":"MT"},{"content":"The first string to concatenate.","nodes":[{"pos":[0,32],"content":"The first string to concatenate.","nodes":[{"content":"The first string to concatenate.","pos":[0,32]}]}],"pos":[222464,222497],"yaml":true},{"content":"The second string to concatenate.","nodes":[{"pos":[0,33],"content":"The second string to concatenate.","nodes":[{"content":"The second string to concatenate.","pos":[0,33]}]}],"pos":[222557,222591],"yaml":true},{"content":"The third string to concatenate.","nodes":[{"pos":[0,32],"content":"The third string to concatenate.","nodes":[{"content":"The third string to concatenate.","pos":[0,32]}]}],"pos":[222651,222684],"yaml":true},{"content":"The fourth string to concatenate.","nodes":[{"pos":[0,33],"content":"The fourth string to concatenate.","nodes":[{"content":"The fourth string to concatenate.","pos":[0,33]}]}],"pos":[222744,222778],"yaml":true},{"content":"The concatenation of <code>str0</code>, <code>str1</code>, <code>str2</code>, and <code>str3</code>.","nodes":[{"pos":[0,100],"content":"The concatenation of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">str0</ph><ept id=\"p1\">&lt;/code&gt;</ept>, <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">str1</ph><ept id=\"p2\">&lt;/code&gt;</ept>, <bpt id=\"p3\">&lt;code&gt;</bpt><ph id=\"ph3\">str2</ph><ept id=\"p3\">&lt;/code&gt;</ept>, and <bpt id=\"p4\">&lt;code&gt;</bpt><ph id=\"ph4\">str3</ph><ept id=\"p4\">&lt;/code&gt;</ept>.","source":"The concatenation of <code>str0</code>, <code>str1</code>, <code>str2</code>, and <code>str3</code>."}],"pos":[222835,222936],"yaml":true},{"content":"Concatenates the string representations of four specified objects and any objects specified in an optional variable length parameter list.","nodes":[{"pos":[0,138],"content":"Concatenates the string representations of four specified objects and any objects specified in an optional variable length parameter list.","nodes":[{"content":"Concatenates the string representations of four specified objects and any objects specified in an optional variable length parameter list.","pos":[0,138]}]}],"pos":[224606,224745],"yaml":true},{"content":"> [!NOTE]\n>  This API is not CLS-compliant. The CLS-compliant alternative is <xref:System.String.Concat%28System.Object%5B%5D%29?displayProperty=fullName>. The C# and Visual Basic compilers automatically resolve a call to this method as a call to <xref:System.String.Concat%28System.Object%5B%5D%29?displayProperty=fullName>.  \n  \n The method concatenates each object in the parameter list by calling its parameterless `ToString` method; it does not add any delimiters.  \n  \n <xref:System.String.Empty?displayProperty=fullName> is used in place of any null argument.  \n  \n> [!NOTE]\n>  The last parameter of the  <xref:System.String.Concat%2A> method is an optional comma-delimited list of one or more additional objects to concatenate.","nodes":[{"pos":[2,325],"content":"[!NOTE]\n This API is not CLS-compliant. The CLS-compliant alternative is <xref:System.String.Concat%28System.Object%5B%5D%29?displayProperty=fullName>. The C# and Visual Basic compilers automatically resolve a call to this method as a call to <xref:System.String.Concat%28System.Object%5B%5D%29?displayProperty=fullName>.","leadings":["","> "],"nodes":[{"content":" This API is not CLS-compliant. The CLS-compliant alternative is <xref:System.String.Concat%28System.Object%5B%5D%29?displayProperty=fullName>. The C# and Visual Basic compilers automatically resolve a call to this method as a call to <xref:System.String.Concat%28System.Object%5B%5D%29?displayProperty=fullName>.","pos":[8,321],"nodes":[{"content":"This API is not CLS-compliant.","pos":[1,31]},{"content":"The CLS-compliant alternative is <ph id=\"ph1\">&lt;xref:System.String.Concat%28System.Object%5B%5D%29?displayProperty=fullName&gt;</ph>.","pos":[32,143],"source":" The CLS-compliant alternative is <xref:System.String.Concat%28System.Object%5B%5D%29?displayProperty=fullName>."},{"content":"The C# and Visual Basic compilers automatically resolve a call to this method as a call to <ph id=\"ph1\">&lt;xref:System.String.Concat%28System.Object%5B%5D%29?displayProperty=fullName&gt;</ph>.","pos":[144,313],"source":" The C# and Visual Basic compilers automatically resolve a call to this method as a call to <xref:System.String.Concat%28System.Object%5B%5D%29?displayProperty=fullName>."}]}]},{"pos":[332,469],"content":"The method concatenates each object in the parameter list by calling its parameterless <ph id=\"ph1\">`ToString`</ph> method; it does not add any delimiters.","source":"The method concatenates each object in the parameter list by calling its parameterless `ToString` method; it does not add any delimiters."},{"pos":[476,566],"content":"<xref:System.String.Empty?displayProperty=fullName> is used in place of any null argument.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.String.Empty?displayProperty=fullName&gt;</ph> is used in place of any null argument.","pos":[0,90],"source":"<xref:System.String.Empty?displayProperty=fullName> is used in place of any null argument."}]},{"pos":[574,735],"content":"[!NOTE]\n The last parameter of the  <xref:System.String.Concat%2A> method is an optional comma-delimited list of one or more additional objects to concatenate.","leadings":["","> "],"nodes":[{"content":"The last parameter of the  <ph id=\"ph1\">&lt;xref:System.String.Concat%2A&gt;</ph> method is an optional comma-delimited list of one or more additional objects to concatenate.","pos":[9,159],"source":" The last parameter of the  <xref:System.String.Concat%2A> method is an optional comma-delimited list of one or more additional objects to concatenate."}]}],"pos":[224756,225502],"yaml":true,"extradata":"MT"},{"content":"The first object to concatenate.","nodes":[{"pos":[0,32],"content":"The first object to concatenate.","nodes":[{"content":"The first object to concatenate.","pos":[0,32]}]}],"pos":[226262,226295],"yaml":true},{"content":"The second object to concatenate.","nodes":[{"pos":[0,33],"content":"The second object to concatenate.","nodes":[{"content":"The second object to concatenate.","pos":[0,33]}]}],"pos":[226355,226389],"yaml":true},{"content":"The third object to concatenate.","nodes":[{"pos":[0,32],"content":"The third object to concatenate.","nodes":[{"content":"The third object to concatenate.","pos":[0,32]}]}],"pos":[226449,226482],"yaml":true},{"content":"The fourth object to concatenate.","nodes":[{"pos":[0,33],"content":"The fourth object to concatenate.","nodes":[{"content":"The fourth object to concatenate.","pos":[0,33]}]}],"pos":[226542,226576],"yaml":true},{"content":"The concatenated string representation of each value in the parameter list.","nodes":[{"pos":[0,75],"content":"The concatenated string representation of each value in the parameter list.","nodes":[{"content":"The concatenated string representation of each value in the parameter list.","pos":[0,75]}]}],"pos":[226633,226709],"yaml":true},{"content":"Concatenates the string representations of three specified objects.","nodes":[{"pos":[0,67],"content":"Concatenates the string representations of three specified objects.","nodes":[{"content":"Concatenates the string representations of three specified objects.","pos":[0,67]}]}],"pos":[227952,228020],"yaml":true},{"content":"The method concatenates `arg0`, `arg1`, and `arg2` by calling the parameterless `ToString` method of each object; it does not add any delimiters.  \n  \n <xref:System.String?displayProperty=fullName> is used in place of any null argument.","nodes":[{"pos":[0,145],"content":"The method concatenates <ph id=\"ph1\">`arg0`</ph>, <ph id=\"ph2\">`arg1`</ph>, and <ph id=\"ph3\">`arg2`</ph> by calling the parameterless <ph id=\"ph4\">`ToString`</ph> method of each object; it does not add any delimiters.","source":"The method concatenates `arg0`, `arg1`, and `arg2` by calling the parameterless `ToString` method of each object; it does not add any delimiters."},{"pos":[152,236],"content":"<xref:System.String?displayProperty=fullName> is used in place of any null argument.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.String?displayProperty=fullName&gt;</ph> is used in place of any null argument.","pos":[0,84],"source":"<xref:System.String?displayProperty=fullName> is used in place of any null argument."}]}],"pos":[228031,228272],"yaml":true,"extradata":"MT"},{"content":"The first object to concatenate.","nodes":[{"pos":[0,32],"content":"The first object to concatenate.","nodes":[{"content":"The first object to concatenate.","pos":[0,32]}]}],"pos":[228886,228919],"yaml":true},{"content":"The second object to concatenate.","nodes":[{"pos":[0,33],"content":"The second object to concatenate.","nodes":[{"content":"The second object to concatenate.","pos":[0,33]}]}],"pos":[228979,229013],"yaml":true},{"content":"The third object to concatenate.","nodes":[{"pos":[0,32],"content":"The third object to concatenate.","nodes":[{"content":"The third object to concatenate.","pos":[0,32]}]}],"pos":[229073,229106],"yaml":true},{"content":"The concatenated string representations of the values of <code>arg0</code>, <code>arg1</code>, and <code>arg2</code>.","nodes":[{"pos":[0,117],"content":"The concatenated string representations of the values of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">arg0</ph><ept id=\"p1\">&lt;/code&gt;</ept>, <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">arg1</ph><ept id=\"p2\">&lt;/code&gt;</ept>, and <bpt id=\"p3\">&lt;code&gt;</bpt><ph id=\"ph3\">arg2</ph><ept id=\"p3\">&lt;/code&gt;</ept>.","source":"The concatenated string representations of the values of <code>arg0</code>, <code>arg1</code>, and <code>arg2</code>."}],"pos":[229163,229281],"yaml":true},{"content":"Concatenates two specified instances of <xref href=\"System.String\"></xref>.","nodes":[{"pos":[0,75],"content":"Concatenates two specified instances of <ph id=\"ph1\">&lt;xref href=\"System.String\"&gt;&lt;/xref&gt;</ph>.","source":"Concatenates two specified instances of <xref href=\"System.String\"></xref>."}],"pos":[230821,230897],"yaml":true},{"content":"The method concatenates `str0` and `str1`; it does not add any delimiters.  \n  \n> [!NOTE]\n>  You can also use your language's string concatenation operator, such as `+` in C#, or `&` and `+` in Visual Basic)  \n>   \n>  , to concatenate strings.  \n  \n An <xref:System.String.Empty> string is used in place of any null argument.","nodes":[{"pos":[0,74],"content":"The method concatenates <ph id=\"ph1\">`str0`</ph> and <ph id=\"ph2\">`str1`</ph>; it does not add any delimiters.","source":"The method concatenates `str0` and `str1`; it does not add any delimiters."},{"pos":[82,207],"content":"[!NOTE]\n You can also use your language's string concatenation operator, such as `+` in C#, or `&` and `+` in Visual Basic)","leadings":["","> "],"nodes":[{"content":"You can also use your language's string concatenation operator, such as <ph id=\"ph1\">`+`</ph> in C#, or <ph id=\"ph2\">`&amp;`</ph> and <ph id=\"ph3\">`+`</ph> in Visual Basic)","pos":[9,123],"source":" You can also use your language's string concatenation operator, such as `+` in C#, or `&` and `+` in Visual Basic)"}]},{"pos":[218,243],"content":", to concatenate strings.","nodes":[{"content":", to concatenate strings.","pos":[0,25]}]},{"pos":[250,325],"content":"An <xref:System.String.Empty> string is used in place of any null argument.","nodes":[{"content":"An <ph id=\"ph1\">&lt;xref:System.String.Empty&gt;</ph> string is used in place of any null argument.","pos":[0,75],"source":"An <xref:System.String.Empty> string is used in place of any null argument."}]}],"pos":[230908,231243],"yaml":true,"extradata":"MT"},{"content":"The first string to concatenate.","nodes":[{"pos":[0,32],"content":"The first string to concatenate.","nodes":[{"content":"The first string to concatenate.","pos":[0,32]}]}],"pos":[231833,231866],"yaml":true},{"content":"The second string to concatenate.","nodes":[{"pos":[0,33],"content":"The second string to concatenate.","nodes":[{"content":"The second string to concatenate.","pos":[0,33]}]}],"pos":[231926,231960],"yaml":true},{"content":"The concatenation of <code>str0</code> and <code>str1</code>.","nodes":[{"pos":[0,61],"content":"The concatenation of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">str0</ph><ept id=\"p1\">&lt;/code&gt;</ept> and <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">str1</ph><ept id=\"p2\">&lt;/code&gt;</ept>.","source":"The concatenation of <code>str0</code> and <code>str1</code>."}],"pos":[232017,232079],"yaml":true},{"content":"Concatenates three specified instances of <xref href=\"System.String\"></xref>.","nodes":[{"pos":[0,77],"content":"Concatenates three specified instances of <ph id=\"ph1\">&lt;xref href=\"System.String\"&gt;&lt;/xref&gt;</ph>.","source":"Concatenates three specified instances of <xref href=\"System.String\"></xref>."}],"pos":[233702,233780],"yaml":true},{"content":"The method concatenates `str0`, `str1`, and `str2`; it does not add any delimiters.  \n  \n> [!NOTE]\n>  You can also use your language's string concatenation operator, such as `+` in C#, or `&` and `+` in Visual Basic)  \n>   \n>  , to concatenate strings.  \n  \n An <xref:System.String.Empty> string is used in place of any null argument.","nodes":[{"pos":[0,83],"content":"The method concatenates <ph id=\"ph1\">`str0`</ph>, <ph id=\"ph2\">`str1`</ph>, and <ph id=\"ph3\">`str2`</ph>; it does not add any delimiters.","source":"The method concatenates `str0`, `str1`, and `str2`; it does not add any delimiters."},{"pos":[91,216],"content":"[!NOTE]\n You can also use your language's string concatenation operator, such as `+` in C#, or `&` and `+` in Visual Basic)","leadings":["","> "],"nodes":[{"content":"You can also use your language's string concatenation operator, such as <ph id=\"ph1\">`+`</ph> in C#, or <ph id=\"ph2\">`&amp;`</ph> and <ph id=\"ph3\">`+`</ph> in Visual Basic)","pos":[9,123],"source":" You can also use your language's string concatenation operator, such as `+` in C#, or `&` and `+` in Visual Basic)"}]},{"pos":[227,252],"content":", to concatenate strings.","nodes":[{"content":", to concatenate strings.","pos":[0,25]}]},{"pos":[259,334],"content":"An <xref:System.String.Empty> string is used in place of any null argument.","nodes":[{"content":"An <ph id=\"ph1\">&lt;xref:System.String.Empty&gt;</ph> string is used in place of any null argument.","pos":[0,75],"source":"An <xref:System.String.Empty> string is used in place of any null argument."}]}],"pos":[233791,234135],"yaml":true,"extradata":"MT"},{"content":"The first string to concatenate.","nodes":[{"pos":[0,32],"content":"The first string to concatenate.","nodes":[{"content":"The first string to concatenate.","pos":[0,32]}]}],"pos":[234830,234863],"yaml":true},{"content":"The second string to concatenate.","nodes":[{"pos":[0,33],"content":"The second string to concatenate.","nodes":[{"content":"The second string to concatenate.","pos":[0,33]}]}],"pos":[234923,234957],"yaml":true},{"content":"The third string to concatenate.","nodes":[{"pos":[0,32],"content":"The third string to concatenate.","nodes":[{"content":"The third string to concatenate.","pos":[0,32]}]}],"pos":[235017,235050],"yaml":true},{"content":"The concatenation of <code>str0</code>, <code>str1</code>, and <code>str2</code>.","nodes":[{"pos":[0,81],"content":"The concatenation of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">str0</ph><ept id=\"p1\">&lt;/code&gt;</ept>, <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">str1</ph><ept id=\"p2\">&lt;/code&gt;</ept>, and <bpt id=\"p3\">&lt;code&gt;</bpt><ph id=\"ph3\">str2</ph><ept id=\"p3\">&lt;/code&gt;</ept>.","source":"The concatenation of <code>str0</code>, <code>str1</code>, and <code>str2</code>."}],"pos":[235107,235189],"yaml":true},{"content":"Concatenates the elements of a specified <xref href=\"System.String\"></xref> array.","nodes":[{"pos":[0,82],"content":"Concatenates the elements of a specified <ph id=\"ph1\">&lt;xref href=\"System.String\"&gt;&lt;/xref&gt;</ph> array.","source":"Concatenates the elements of a specified <xref href=\"System.String\"></xref> array."}],"pos":[236692,236775],"yaml":true},{"content":"The method concatenates each object in `values`; it does not add any delimiters.  \n  \n An <xref:System.String.Empty> string is used in place of any null object in the array.","nodes":[{"pos":[0,80],"content":"The method concatenates each object in <ph id=\"ph1\">`values`</ph>; it does not add any delimiters.","source":"The method concatenates each object in `values`; it does not add any delimiters."},{"pos":[87,173],"content":"An <xref:System.String.Empty> string is used in place of any null object in the array.","nodes":[{"content":"An <ph id=\"ph1\">&lt;xref:System.String.Empty&gt;</ph> string is used in place of any null object in the array.","pos":[0,86],"source":"An <xref:System.String.Empty> string is used in place of any null object in the array."}]}],"pos":[236786,236964],"yaml":true,"extradata":"MT"},{"content":"An array of string instances.","nodes":[{"pos":[0,29],"content":"An array of string instances.","nodes":[{"content":"An array of string instances.","pos":[0,29]}]}],"pos":[237596,237626],"yaml":true},{"content":"The concatenated elements of <code>values</code>.","nodes":[{"pos":[0,49],"content":"The concatenated elements of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">values</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The concatenated elements of <code>values</code>."}],"pos":[237683,237733],"yaml":true},{"content":"<code>values</code> is `null`.","nodes":[{"pos":[0,30],"content":"<ph id=\"ph1\">&lt;code&gt;values&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>values</code> is `null`."}],"pos":[237883,237914],"yaml":true},{"content":"Out of memory.","nodes":[{"pos":[0,14],"content":"Out of memory.","nodes":[{"content":"Out of memory.","pos":[0,14]}]}],"pos":[238014,238029],"yaml":true},{"content":"Concatenates the string representations of the elements in a specified <xref href=\"System.Object\"></xref> array.","nodes":[{"pos":[0,112],"content":"Concatenates the string representations of the elements in a specified <ph id=\"ph1\">&lt;xref href=\"System.Object\"&gt;&lt;/xref&gt;</ph> array.","source":"Concatenates the string representations of the elements in a specified <xref href=\"System.Object\"></xref> array."}],"pos":[239464,239577],"yaml":true},{"content":"The method concatenates each object in `args` by calling the parameterless `ToString` method of that object; it does not add any delimiters.  \n  \n <xref:System.String?displayProperty=fullName> is used in place of any null object in the array.","nodes":[{"pos":[0,140],"content":"The method concatenates each object in <ph id=\"ph1\">`args`</ph> by calling the parameterless <ph id=\"ph2\">`ToString`</ph> method of that object; it does not add any delimiters.","source":"The method concatenates each object in `args` by calling the parameterless `ToString` method of that object; it does not add any delimiters."},{"pos":[147,242],"content":"<xref:System.String?displayProperty=fullName> is used in place of any null object in the array.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.String?displayProperty=fullName&gt;</ph> is used in place of any null object in the array.","pos":[0,95],"source":"<xref:System.String?displayProperty=fullName> is used in place of any null object in the array."}]}],"pos":[239588,239835],"yaml":true,"extradata":"MT"},{"content":"An object array that contains the elements to concatenate.","nodes":[{"pos":[0,58],"content":"An object array that contains the elements to concatenate.","nodes":[{"content":"An object array that contains the elements to concatenate.","pos":[0,58]}]}],"pos":[240355,240414],"yaml":true},{"content":"The concatenated string representations of the values of the elements in <code>args</code>.","nodes":[{"pos":[0,91],"content":"The concatenated string representations of the values of the elements in <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">args</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The concatenated string representations of the values of the elements in <code>args</code>."}],"pos":[240471,240563],"yaml":true},{"content":"<code>args</code> is `null`.","nodes":[{"pos":[0,28],"content":"<ph id=\"ph1\">&lt;code&gt;args&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>args</code> is `null`."}],"pos":[240713,240742],"yaml":true},{"content":"Out of memory.","nodes":[{"pos":[0,14],"content":"Out of memory.","nodes":[{"content":"Out of memory.","pos":[0,14]}]}],"pos":[240842,240857],"yaml":true},{"content":"Creates the string  representation of a specified object.","nodes":[{"pos":[0,57],"content":"Creates the string  representation of a specified object.","nodes":[{"content":"Creates the string  representation of a specified object.","pos":[0,57]}]}],"pos":[242280,242338],"yaml":true},{"content":"The <xref:System.String.Concat%28System.Object%29> method represents `arg0` as a string by calling its parameterless `ToString` method.","nodes":[{"pos":[0,135],"content":"The <ph id=\"ph1\">&lt;xref:System.String.Concat%28System.Object%29&gt;</ph> method represents <ph id=\"ph2\">`arg0`</ph> as a string by calling its parameterless <ph id=\"ph3\">`ToString`</ph> method.","source":"The <xref:System.String.Concat%28System.Object%29> method represents `arg0` as a string by calling its parameterless `ToString` method."}],"pos":[242349,242485],"yaml":true,"extradata":"MT"},{"content":"The object to represent, or `null`.","nodes":[{"pos":[0,35],"content":"The object to represent, or <ph id=\"ph1\">`null`</ph>.","source":"The object to represent, or `null`."}],"pos":[243073,243109],"yaml":true},{"content":"The string representation of the value of <code>arg0</code>, or <xref href=\"System.String.Empty\"></xref> if <code>arg0</code> is `null`.","nodes":[{"pos":[0,136],"content":"The string representation of the value of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">arg0</ph><ept id=\"p1\">&lt;/code&gt;</ept>, or <ph id=\"ph2\">&lt;xref href=\"System.String.Empty\"&gt;&lt;/xref&gt;</ph> if <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph3\">arg0</ph><ept id=\"p2\">&lt;/code&gt;</ept> is <ph id=\"ph4\">`null`</ph>.","source":"The string representation of the value of <code>arg0</code>, or <xref href=\"System.String.Empty\"></xref> if <code>arg0</code> is `null`."}],"pos":[243166,243303],"yaml":true},{"content":"Concatenates the members of a constructed <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> collection of type <xref href=\"System.String\"></xref>.","nodes":[{"pos":[0,158],"content":"Concatenates the members of a constructed <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.IEnumerable`1\"&gt;&lt;/xref&gt;</ph> collection of type <ph id=\"ph2\">&lt;xref href=\"System.String\"&gt;&lt;/xref&gt;</ph>.","source":"Concatenates the members of a constructed <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> collection of type <xref href=\"System.String\"></xref>."}],"pos":[244936,245095],"yaml":true},{"content":"The method concatenates each object in `values`; it does not add any delimiters. To specify a delimiter between each member of `values`, call the <xref:System.String.Join%28System.String%2CSystem.Collections.Generic.IEnumerable%7BSystem.String%7D%29> method.  \n  \n An <xref:System.String.Empty> string is used in place of any null element in `values`.  \n  \n If `values` is an empty `IEnumerable(Of String)`, the method returns <xref:System.String.Empty?displayProperty=fullName>. If `values` is `null`, the method throws an <xref:System.ArgumentNullException> exception.  \n  \n <xref:System.String.Concat%28System.Collections.Generic.IEnumerable%7BSystem.String%7D%29> is a convenience method that lets you concatenate each element in an `IEnumerable(Of String)` collection without first converting the elements to a string array. It is particularly useful with Language-Integrated Query (LINQ) query expressions. The following example passes a `List(Of String)` object that contains either the uppercase or lowercase letters of the alphabet to a lambda expression that selects letters that are equal to or greater than a particular letter (which, in the example, is \"M\"). The `IEnumerable(Of String)` collection that is returned by the <xref:System.Linq.Enumerable.Where%2A?displayProperty=fullName> method is passed to the <xref:System.String.Concat%28System.Collections.Generic.IEnumerable%7BSystem.String%7D%29> method to display the result as a single string.  \n  \n [!code-csharp[System.String.Concat#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.concat/cs/concat2.cs#3)]\n [!code-vb[System.String.Concat#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.string.concat/vb/concat2.vb#3)]","nodes":[{"pos":[0,258],"content":"The method concatenates each object in `values`; it does not add any delimiters. To specify a delimiter between each member of `values`, call the <xref:System.String.Join%28System.String%2CSystem.Collections.Generic.IEnumerable%7BSystem.String%7D%29> method.","nodes":[{"content":"The method concatenates each object in <ph id=\"ph1\">`values`</ph>; it does not add any delimiters.","pos":[0,80],"source":"The method concatenates each object in `values`; it does not add any delimiters."},{"content":"To specify a delimiter between each member of <ph id=\"ph1\">`values`</ph>, call the <ph id=\"ph2\">&lt;xref:System.String.Join%28System.String%2CSystem.Collections.Generic.IEnumerable%7BSystem.String%7D%29&gt;</ph> method.","pos":[81,258],"source":" To specify a delimiter between each member of `values`, call the <xref:System.String.Join%28System.String%2CSystem.Collections.Generic.IEnumerable%7BSystem.String%7D%29> method."}]},{"pos":[265,351],"content":"An <ph id=\"ph1\">&lt;xref:System.String.Empty&gt;</ph> string is used in place of any null element in <ph id=\"ph2\">`values`</ph>.","source":"An <xref:System.String.Empty> string is used in place of any null element in `values`."},{"pos":[358,570],"content":"If `values` is an empty `IEnumerable(Of String)`, the method returns <xref:System.String.Empty?displayProperty=fullName>. If `values` is `null`, the method throws an <xref:System.ArgumentNullException> exception.","nodes":[{"content":"If <ph id=\"ph1\">`values`</ph> is an empty <ph id=\"ph2\">`IEnumerable(Of String)`</ph>, the method returns <ph id=\"ph3\">&lt;xref:System.String.Empty?displayProperty=fullName&gt;</ph>.","pos":[0,121],"source":"If `values` is an empty `IEnumerable(Of String)`, the method returns <xref:System.String.Empty?displayProperty=fullName>."},{"content":"If <ph id=\"ph1\">`values`</ph> is <ph id=\"ph2\">`null`</ph>, the method throws an <ph id=\"ph3\">&lt;xref:System.ArgumentNullException&gt;</ph> exception.","pos":[122,212],"source":" If `values` is `null`, the method throws an <xref:System.ArgumentNullException> exception."}]},{"pos":[577,1463],"content":"<xref:System.String.Concat%28System.Collections.Generic.IEnumerable%7BSystem.String%7D%29> is a convenience method that lets you concatenate each element in an `IEnumerable(Of String)` collection without first converting the elements to a string array. It is particularly useful with Language-Integrated Query (LINQ) query expressions. The following example passes a `List(Of String)` object that contains either the uppercase or lowercase letters of the alphabet to a lambda expression that selects letters that are equal to or greater than a particular letter (which, in the example, is \"M\"). The `IEnumerable(Of String)` collection that is returned by the <xref:System.Linq.Enumerable.Where%2A?displayProperty=fullName> method is passed to the <xref:System.String.Concat%28System.Collections.Generic.IEnumerable%7BSystem.String%7D%29> method to display the result as a single string.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.String.Concat%28System.Collections.Generic.IEnumerable%7BSystem.String%7D%29&gt;</ph> is a convenience method that lets you concatenate each element in an <ph id=\"ph2\">`IEnumerable(Of String)`</ph> collection without first converting the elements to a string array.","pos":[0,252],"source":"<xref:System.String.Concat%28System.Collections.Generic.IEnumerable%7BSystem.String%7D%29> is a convenience method that lets you concatenate each element in an `IEnumerable(Of String)` collection without first converting the elements to a string array."},{"content":"It is particularly useful with Language-Integrated Query (LINQ) query expressions.","pos":[253,335]},{"content":"The following example passes a <ph id=\"ph1\">`List(Of String)`</ph> object that contains either the uppercase or lowercase letters of the alphabet to a lambda expression that selects letters that are equal to or greater than a particular letter (which, in the example, is \"M\").","pos":[336,594],"source":" The following example passes a `List(Of String)` object that contains either the uppercase or lowercase letters of the alphabet to a lambda expression that selects letters that are equal to or greater than a particular letter (which, in the example, is \"M\")."},{"content":"The <ph id=\"ph1\">`IEnumerable(Of String)`</ph> collection that is returned by the <ph id=\"ph2\">&lt;xref:System.Linq.Enumerable.Where%2A?displayProperty=fullName&gt;</ph> method is passed to the <ph id=\"ph3\">&lt;xref:System.String.Concat%28System.Collections.Generic.IEnumerable%7BSystem.String%7D%29&gt;</ph> method to display the result as a single string.","pos":[595,886],"source":" The `IEnumerable(Of String)` collection that is returned by the <xref:System.Linq.Enumerable.Where%2A?displayProperty=fullName> method is passed to the <xref:System.String.Concat%28System.Collections.Generic.IEnumerable%7BSystem.String%7D%29> method to display the result as a single string."}]},{"pos":[1470,1723],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>System.String.Concat#3<ept id=\"p2\">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.concat/cs/concat2.cs#3)</ept><ept id=\"p1\">]</ept> <bpt id=\"p3\">[!code-vb</bpt><bpt id=\"p4\">[</bpt>System.String.Concat#3<ept id=\"p4\">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.string.concat/vb/concat2.vb#3)</ept><ept id=\"p3\">]</ept>","source":"[!code-csharp[System.String.Concat#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.concat/cs/concat2.cs#3)]\n [!code-vb[System.String.Concat#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.string.concat/vb/concat2.vb#3)]"}],"pos":[245106,246843],"yaml":true,"extradata":"MT"},{"content":"A collection object that implements <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> and whose generic type argument is <xref href=\"System.String\"></xref>.","nodes":[{"pos":[0,168],"content":"A collection object that implements <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.IEnumerable`1\"&gt;&lt;/xref&gt;</ph> and whose generic type argument is <ph id=\"ph2\">&lt;xref href=\"System.String\"&gt;&lt;/xref&gt;</ph>.","source":"A collection object that implements <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> and whose generic type argument is <xref href=\"System.String\"></xref>."}],"pos":[247780,247949],"yaml":true},{"content":"The concatenated strings in <code>values</code>, or <xref href=\"System.String.Empty\"></xref> if <code>values</code> is an empty `IEnumerable(Of String)`.","nodes":[{"pos":[0,153],"content":"The concatenated strings in <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">values</ph><ept id=\"p1\">&lt;/code&gt;</ept>, or <ph id=\"ph2\">&lt;xref href=\"System.String.Empty\"&gt;&lt;/xref&gt;</ph> if <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph3\">values</ph><ept id=\"p2\">&lt;/code&gt;</ept> is an empty <ph id=\"ph4\">`IEnumerable(Of String)`</ph>.","source":"The concatenated strings in <code>values</code>, or <xref href=\"System.String.Empty\"></xref> if <code>values</code> is an empty `IEnumerable(Of String)`."}],"pos":[248006,248160],"yaml":true},{"content":"<code>values</code> is `null`.","nodes":[{"pos":[0,30],"content":"<ph id=\"ph1\">&lt;code&gt;values&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>values</code> is `null`."}],"pos":[248310,248341],"yaml":true},{"content":"Concatenates the string representations of two specified objects.","nodes":[{"pos":[0,65],"content":"Concatenates the string representations of two specified objects.","nodes":[{"content":"Concatenates the string representations of two specified objects.","pos":[0,65]}]}],"pos":[249905,249971],"yaml":true},{"content":"The method concatenates `arg0` and `arg1` by calling the parameterless `ToString` method of `arg0` and `arg1`; it does not add any delimiters.  \n  \n <xref:System.String?displayProperty=fullName> is used in place of any null argument.  \n  \n If either of the arguments is an array reference, the method concatenates a string representing that array, instead of its members (for example, \"System.String[]\").","nodes":[{"pos":[0,142],"content":"The method concatenates <ph id=\"ph1\">`arg0`</ph> and <ph id=\"ph2\">`arg1`</ph> by calling the parameterless <ph id=\"ph3\">`ToString`</ph> method of <ph id=\"ph4\">`arg0`</ph> and <ph id=\"ph5\">`arg1`</ph>; it does not add any delimiters.","source":"The method concatenates `arg0` and `arg1` by calling the parameterless `ToString` method of `arg0` and `arg1`; it does not add any delimiters."},{"pos":[149,233],"content":"<xref:System.String?displayProperty=fullName> is used in place of any null argument.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.String?displayProperty=fullName&gt;</ph> is used in place of any null argument.","pos":[0,84],"source":"<xref:System.String?displayProperty=fullName> is used in place of any null argument."}]},{"pos":[240,404],"content":"If either of the arguments is an array reference, the method concatenates a string representing that array, instead of its members (for example, \"System.String[]\").","nodes":[{"content":"If either of the arguments is an array reference, the method concatenates a string representing that array, instead of its members (for example, \"System.String[]\").","pos":[0,164]}]}],"pos":[249982,250395],"yaml":true,"extradata":"MT"},{"content":"The first object to concatenate.","nodes":[{"pos":[0,32],"content":"The first object to concatenate.","nodes":[{"content":"The first object to concatenate.","pos":[0,32]}]}],"pos":[250996,251029],"yaml":true},{"content":"The second object to concatenate.","nodes":[{"pos":[0,33],"content":"The second object to concatenate.","nodes":[{"content":"The second object to concatenate.","pos":[0,33]}]}],"pos":[251089,251123],"yaml":true},{"content":"The concatenated string representations of the values of <code>arg0</code> and <code>arg1</code>.","nodes":[{"pos":[0,97],"content":"The concatenated string representations of the values of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">arg0</ph><ept id=\"p1\">&lt;/code&gt;</ept> and <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">arg1</ph><ept id=\"p2\">&lt;/code&gt;</ept>.","source":"The concatenated string representations of the values of <code>arg0</code> and <code>arg1</code>."}],"pos":[251180,251278],"yaml":true},{"content":"Concatenates the members of an <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> implementation.","nodes":[{"pos":[0,108],"content":"Concatenates the members of an <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.IEnumerable`1\"&gt;&lt;/xref&gt;</ph> implementation.","source":"Concatenates the members of an <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> implementation."}],"pos":[252884,252993],"yaml":true},{"content":"The method concatenates each object in `values`; it does not add any delimiters.  \n  \n An <xref:System.String.Empty> string is used in place of any null argument.  \n  \n <xref:System.String.Concat%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> is a convenience method that lets you concatenate each element in an <xref:System.Collections.Generic.IEnumerable%601> collection without first converting the elements to strings. It is particularly useful with Language-Integrated Query (LINQ) query expressions, as the example illustrates. The string representation of each object in the <xref:System.Collections.Generic.IEnumerable%601> collection is derived by calling that object's `ToString` method.","nodes":[{"pos":[0,80],"content":"The method concatenates each object in <ph id=\"ph1\">`values`</ph>; it does not add any delimiters.","source":"The method concatenates each object in `values`; it does not add any delimiters."},{"pos":[87,162],"content":"An <xref:System.String.Empty> string is used in place of any null argument.","nodes":[{"content":"An <ph id=\"ph1\">&lt;xref:System.String.Empty&gt;</ph> string is used in place of any null argument.","pos":[0,75],"source":"An <xref:System.String.Empty> string is used in place of any null argument."}]},{"pos":[169,715],"content":"<xref:System.String.Concat%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> is a convenience method that lets you concatenate each element in an <xref:System.Collections.Generic.IEnumerable%601> collection without first converting the elements to strings. It is particularly useful with Language-Integrated Query (LINQ) query expressions, as the example illustrates. The string representation of each object in the <xref:System.Collections.Generic.IEnumerable%601> collection is derived by calling that object's `ToString` method.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.String.Concat%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> is a convenience method that lets you concatenate each element in an <ph id=\"ph2\">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph> collection without first converting the elements to strings.","pos":[0,271],"source":"<xref:System.String.Concat%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> is a convenience method that lets you concatenate each element in an <xref:System.Collections.Generic.IEnumerable%601> collection without first converting the elements to strings."},{"content":"It is particularly useful with Language-Integrated Query (LINQ) query expressions, as the example illustrates.","pos":[272,382]},{"content":"The string representation of each object in the <ph id=\"ph1\">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph> collection is derived by calling that object's <ph id=\"ph2\">`ToString`</ph> method.","pos":[383,546],"source":" The string representation of each object in the <xref:System.Collections.Generic.IEnumerable%601> collection is derived by calling that object's `ToString` method."}]}],"pos":[253004,253726],"yaml":true,"extradata":"MT"},{"content":"A collection object that implements the <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> interface.","nodes":[{"pos":[0,112],"content":"A collection object that implements the <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.IEnumerable`1\"&gt;&lt;/xref&gt;</ph> interface.","source":"A collection object that implements the <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> interface."}],"pos":[254849,254962],"yaml":true},{"content":"The type of the members of <code>values</code>.","nodes":[{"pos":[0,47],"content":"The type of the members of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">values</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The type of the members of <code>values</code>."}],"pos":[255013,255061],"yaml":true},{"content":"The concatenated members in <code>values</code>.","nodes":[{"pos":[0,48],"content":"The concatenated members in <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">values</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The concatenated members in <code>values</code>."}],"pos":[255118,255167],"yaml":true},{"content":"<code>values</code> is `null`.","nodes":[{"pos":[0,30],"content":"<ph id=\"ph1\">&lt;code&gt;values&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>values</code> is `null`."}],"pos":[255320,255351],"yaml":true},{"content":"Returns a value indicating whether a specified substring occurs within this string.","nodes":[{"pos":[0,83],"content":"Returns a value indicating whether a specified substring occurs within this string.","nodes":[{"content":"Returns a value indicating whether a specified substring occurs within this string.","pos":[0,83]}]}],"pos":[256861,256945],"yaml":true},{"content":"This method performs an ordinal (case-sensitive and culture-insensitive) comparison. The search begins at the first character position of this string and continues through the last character position.  \n  \n To determine whether a string contains a specified substring by using something other than ordinal comparison (such as culture-sensitive comparison, or ordinal case-insensitive comparison), you can create a custom method. The following example illustrates one such approach. It defines a <xref:System.String> extension method  that includes a <xref:System.StringComparison> parameter and indicates whether a string contains a substring when using the specified form of string comparison.  \n  \n [!code-csharp[System.String.Contains#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.String.Contains/cs/ContainsExt1.cs#1)]\n [!code-vb[System.String.Contains#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.String.Contains/vb/ContainsExt1.vb#1)]  \n  \n The following example then calls the `Contains` extension method to determine whether a substring is found in a string when using ordinal comparison and case-insensitive ordinal comparison.  \n  \n [!code-csharp[System.String.Contains#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.String.Contains/cs/ContainsExt1.cs#2)]\n [!code-vb[System.String.Contains#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.String.Contains/vb/ContainsExt1.vb#2)]  \n  \n If you are interested in the position of the substring `value` in the current instance, you can call the <xref:System.String.IndexOf%2A> method to get the starting position of its first occurrence, or you can call the <xref:System.String.LastIndexOf%2A> method to get the starting position of its last occurrence. The example includes a call to the <xref:System.String.IndexOf%28System.String%29> method if a substring is found in a string instance.","nodes":[{"pos":[0,200],"content":"This method performs an ordinal (case-sensitive and culture-insensitive) comparison. The search begins at the first character position of this string and continues through the last character position.","nodes":[{"content":"This method performs an ordinal (case-sensitive and culture-insensitive) comparison. The search begins at the first character position of this string and continues through the last character position.","pos":[0,200],"nodes":[{"content":"This method performs an ordinal (case-sensitive and culture-insensitive) comparison.","pos":[0,84]},{"content":"The search begins at the first character position of this string and continues through the last character position.","pos":[85,200]}]}]},{"pos":[207,694],"content":"To determine whether a string contains a specified substring by using something other than ordinal comparison (such as culture-sensitive comparison, or ordinal case-insensitive comparison), you can create a custom method. The following example illustrates one such approach. It defines a <xref:System.String> extension method  that includes a <xref:System.StringComparison> parameter and indicates whether a string contains a substring when using the specified form of string comparison.","nodes":[{"content":"To determine whether a string contains a specified substring by using something other than ordinal comparison (such as culture-sensitive comparison, or ordinal case-insensitive comparison), you can create a custom method. The following example illustrates one such approach. It defines a <xref:System.String> extension method  that includes a <xref:System.StringComparison> parameter and indicates whether a string contains a substring when using the specified form of string comparison.","pos":[0,487],"nodes":[{"content":"To determine whether a string contains a specified substring by using something other than ordinal comparison (such as culture-sensitive comparison, or ordinal case-insensitive comparison), you can create a custom method.","pos":[0,221]},{"content":"The following example illustrates one such approach.","pos":[222,274]},{"content":"It defines a <ph id=\"ph1\">&lt;xref:System.String&gt;</ph> extension method  that includes a <ph id=\"ph2\">&lt;xref:System.StringComparison&gt;</ph> parameter and indicates whether a string contains a substring when using the specified form of string comparison.","pos":[275,487],"source":" It defines a <xref:System.String> extension method  that includes a <xref:System.StringComparison> parameter and indicates whether a string contains a substring when using the specified form of string comparison."}]}]},{"pos":[701,972],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>System.String.Contains#1<ept id=\"p2\">](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.String.Contains/cs/ContainsExt1.cs#1)</ept><ept id=\"p1\">]</ept> <bpt id=\"p3\">[!code-vb</bpt><bpt id=\"p4\">[</bpt>System.String.Contains#1<ept id=\"p4\">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.String.Contains/vb/ContainsExt1.vb#1)</ept><ept id=\"p3\">]</ept>","source":"[!code-csharp[System.String.Contains#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.String.Contains/cs/ContainsExt1.cs#1)]\n [!code-vb[System.String.Contains#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.String.Contains/vb/ContainsExt1.vb#1)]"},{"pos":[979,1168],"content":"The following example then calls the <ph id=\"ph1\">`Contains`</ph> extension method to determine whether a substring is found in a string when using ordinal comparison and case-insensitive ordinal comparison.","source":"The following example then calls the `Contains` extension method to determine whether a substring is found in a string when using ordinal comparison and case-insensitive ordinal comparison."},{"pos":[1175,1446],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>System.String.Contains#2<ept id=\"p2\">](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.String.Contains/cs/ContainsExt1.cs#2)</ept><ept id=\"p1\">]</ept> <bpt id=\"p3\">[!code-vb</bpt><bpt id=\"p4\">[</bpt>System.String.Contains#2<ept id=\"p4\">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.String.Contains/vb/ContainsExt1.vb#2)</ept><ept id=\"p3\">]</ept>","source":"[!code-csharp[System.String.Contains#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.String.Contains/cs/ContainsExt1.cs#2)]\n [!code-vb[System.String.Contains#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.String.Contains/vb/ContainsExt1.vb#2)]"},{"pos":[1453,1902],"content":"If you are interested in the position of the substring `value` in the current instance, you can call the <xref:System.String.IndexOf%2A> method to get the starting position of its first occurrence, or you can call the <xref:System.String.LastIndexOf%2A> method to get the starting position of its last occurrence. The example includes a call to the <xref:System.String.IndexOf%28System.String%29> method if a substring is found in a string instance.","nodes":[{"content":"If you are interested in the position of the substring <ph id=\"ph1\">`value`</ph> in the current instance, you can call the <ph id=\"ph2\">&lt;xref:System.String.IndexOf%2A&gt;</ph> method to get the starting position of its first occurrence, or you can call the <ph id=\"ph3\">&lt;xref:System.String.LastIndexOf%2A&gt;</ph> method to get the starting position of its last occurrence.","pos":[0,313],"source":"If you are interested in the position of the substring `value` in the current instance, you can call the <xref:System.String.IndexOf%2A> method to get the starting position of its first occurrence, or you can call the <xref:System.String.LastIndexOf%2A> method to get the starting position of its last occurrence."},{"content":"The example includes a call to the <ph id=\"ph1\">&lt;xref:System.String.IndexOf%28System.String%29&gt;</ph> method if a substring is found in a string instance.","pos":[314,449],"source":" The example includes a call to the <xref:System.String.IndexOf%28System.String%29> method if a substring is found in a string instance."}]}],"pos":[256956,258873],"yaml":true,"extradata":"MT"},{"content":"The string to seek.","nodes":[{"pos":[0,19],"content":"The string to seek.","nodes":[{"content":"The string to seek.","pos":[0,19]}]}],"pos":[259529,259549],"yaml":true},{"content":"`true` if the <code>value</code> parameter occurs within this string, or if <code>value</code> is the empty string (\"\"); otherwise, `false`.","nodes":[{"pos":[0,140],"content":"<ph id=\"ph1\">`true`</ph> if the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter occurs within this string, or if <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph3\">value</ph><ept id=\"p2\">&lt;/code&gt;</ept> is the empty string (\"\"); otherwise, <ph id=\"ph4\">`false`</ph>.","source":"`true` if the <code>value</code> parameter occurs within this string, or if <code>value</code> is the empty string (\"\"); otherwise, `false`."}],"pos":[259607,259750],"yaml":true},{"content":"<code>value</code> is `null`.","nodes":[{"pos":[0,29],"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>value</code> is `null`."}],"pos":[259902,259932],"yaml":true},{"content":"Creates a new instance of <xref href=\"System.String\"></xref> with the same value as a specified <xref href=\"System.String\"></xref>.","nodes":[{"pos":[0,131],"content":"Creates a new instance of <ph id=\"ph1\">&lt;xref href=\"System.String\"&gt;&lt;/xref&gt;</ph> with the same value as a specified <ph id=\"ph2\">&lt;xref href=\"System.String\"&gt;&lt;/xref&gt;</ph>.","source":"Creates a new instance of <xref href=\"System.String\"></xref> with the same value as a specified <xref href=\"System.String\"></xref>."}],"pos":[261343,261475],"yaml":true},{"content":"The<xref:System.String.Copy%2A> method returns a <xref:System.String> object that has the same value as the original string but represents a different object reference. It differs from an assignment operation, which assigns an existing string reference to an additional object variable. The example illustrates the difference.","nodes":[{"pos":[0,326],"content":"The<xref:System.String.Copy%2A> method returns a <xref:System.String> object that has the same value as the original string but represents a different object reference. It differs from an assignment operation, which assigns an existing string reference to an additional object variable. The example illustrates the difference.","nodes":[{"content":"The<xref:System.String.Copy%2A> method returns a <xref:System.String> object that has the same value as the original string but represents a different object reference. It differs from an assignment operation, which assigns an existing string reference to an additional object variable. The example illustrates the difference.","pos":[0,326],"nodes":[{"content":"The<ph id=\"ph1\">&lt;xref:System.String.Copy%2A&gt;</ph> method returns a <ph id=\"ph2\">&lt;xref:System.String&gt;</ph> object that has the same value as the original string but represents a different object reference.","pos":[0,168],"source":"The<xref:System.String.Copy%2A> method returns a <xref:System.String> object that has the same value as the original string but represents a different object reference."},{"content":"It differs from an assignment operation, which assigns an existing string reference to an additional object variable.","pos":[169,286]},{"content":"The example illustrates the difference.","pos":[287,326]}]}]}],"pos":[261486,261813],"yaml":true,"extradata":"MT"},{"content":"The string to copy.","nodes":[{"pos":[0,19],"content":"The string to copy.","nodes":[{"content":"The string to copy.","pos":[0,19]}]}],"pos":[262669,262689],"yaml":true},{"content":"A new string with the same value as <code>str</code>.","nodes":[{"pos":[0,53],"content":"A new string with the same value as <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">str</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"A new string with the same value as <code>str</code>."}],"pos":[262746,262800],"yaml":true},{"content":"<code>str</code> is `null`.","nodes":[{"pos":[0,27],"content":"<ph id=\"ph1\">&lt;code&gt;str&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>str</code> is `null`."}],"pos":[262948,262976],"yaml":true},{"content":"Copies a specified number of characters from a specified position in this instance to a specified position in an array of Unicode characters.","nodes":[{"pos":[0,141],"content":"Copies a specified number of characters from a specified position in this instance to a specified position in an array of Unicode characters.","nodes":[{"content":"Copies a specified number of characters from a specified position in this instance to a specified position in an array of Unicode characters.","pos":[0,141]}]}],"pos":[264252,264394],"yaml":true},{"content":"This method copies `count` characters from the `sourceIndex` position of this instance to the `destinationIndex` position of `destination` character array. This method does not resize the `destination` character array; it must have a sufficient number of elements to accommodate the copied characters or the method throws an <xref:System.ArgumentOutOfRangeException>.  \n  \n `sourceIndex` and `destinationIndex` are zero-based.","nodes":[{"pos":[0,367],"content":"This method copies `count` characters from the `sourceIndex` position of this instance to the `destinationIndex` position of `destination` character array. This method does not resize the `destination` character array; it must have a sufficient number of elements to accommodate the copied characters or the method throws an <xref:System.ArgumentOutOfRangeException>.","nodes":[{"content":"This method copies <ph id=\"ph1\">`count`</ph> characters from the <ph id=\"ph2\">`sourceIndex`</ph> position of this instance to the <ph id=\"ph3\">`destinationIndex`</ph> position of <ph id=\"ph4\">`destination`</ph> character array.","pos":[0,155],"source":"This method copies `count` characters from the `sourceIndex` position of this instance to the `destinationIndex` position of `destination` character array."},{"content":"This method does not resize the <ph id=\"ph1\">`destination`</ph> character array; it must have a sufficient number of elements to accommodate the copied characters or the method throws an <ph id=\"ph2\">&lt;xref:System.ArgumentOutOfRangeException&gt;</ph>.","pos":[156,367],"source":" This method does not resize the `destination` character array; it must have a sufficient number of elements to accommodate the copied characters or the method throws an <xref:System.ArgumentOutOfRangeException>."}]},{"pos":[374,426],"content":"<ph id=\"ph1\">`sourceIndex`</ph> and <ph id=\"ph2\">`destinationIndex`</ph> are zero-based.","source":"`sourceIndex` and `destinationIndex` are zero-based."}],"pos":[264405,264836],"yaml":true,"extradata":"MT"},{"content":"The index of the first character in this instance to copy.","nodes":[{"pos":[0,58],"content":"The index of the first character in this instance to copy.","nodes":[{"content":"The index of the first character in this instance to copy.","pos":[0,58]}]}],"pos":[265460,265519],"yaml":true},{"content":"An array of Unicode characters to which characters in this instance are copied.","nodes":[{"pos":[0,79],"content":"An array of Unicode characters to which characters in this instance are copied.","nodes":[{"content":"An array of Unicode characters to which characters in this instance are copied.","pos":[0,79]}]}],"pos":[265586,265666],"yaml":true},{"content":"The index in <code>destination</code> at which the copy operation begins.","nodes":[{"pos":[0,73],"content":"The index in <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">destination</ph><ept id=\"p1\">&lt;/code&gt;</ept> at which the copy operation begins.","source":"The index in <code>destination</code> at which the copy operation begins."}],"pos":[265737,265811],"yaml":true},{"content":"The number of characters in this instance to copy to <code>destination</code>.","nodes":[{"pos":[0,78],"content":"The number of characters in this instance to copy to <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">destination</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The number of characters in this instance to copy to <code>destination</code>."}],"pos":[265871,265950],"yaml":true},{"content":"<code>destination</code> is `null`.","nodes":[{"pos":[0,35],"content":"<ph id=\"ph1\">&lt;code&gt;destination&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>destination</code> is `null`."}],"pos":[266100,266136],"yaml":true},{"content":"<code>sourceIndex</code>, <code>destinationIndex</code>, or <code>count</code> is negative  \n  \n -or-  \n  \n <code>sourceIndex</code> does not identify a position in the current instance.  \n  \n -or-  \n  \n <code>destinationIndex</code> does not identify a valid index in the <code>destination</code> array.  \n  \n -or-  \n  \n <code>count</code> is greater than the length of the substring from <code>startIndex</code> to the end of this instance  \n  \n -or-  \n  \n <code>count</code> is greater than the length of the subarray from <code>destinationIndex</code> to the end of the <code>destination</code> array.","nodes":[{"pos":[0,90],"content":"<ph id=\"ph1\">&lt;code&gt;sourceIndex&lt;/code&gt;</ph>, <ph id=\"ph2\">&lt;code&gt;destinationIndex&lt;/code&gt;</ph>, or <ph id=\"ph3\">&lt;code&gt;count&lt;/code&gt;</ph> is negative","source":"<code>sourceIndex</code>, <code>destinationIndex</code>, or <code>count</code> is negative"},{"pos":[97,101],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[108,186],"content":"<ph id=\"ph1\">&lt;code&gt;sourceIndex&lt;/code&gt;</ph> does not identify a position in the current instance.","source":"<code>sourceIndex</code> does not identify a position in the current instance."},{"pos":[193,197],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[204,304],"content":"<ph id=\"ph1\">&lt;code&gt;destinationIndex&lt;/code&gt;</ph> does not identify a valid index in the <ph id=\"ph2\">&lt;code&gt;destination&lt;/code&gt;</ph> array.","source":"<code>destinationIndex</code> does not identify a valid index in the <code>destination</code> array."},{"pos":[311,315],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[322,441],"content":"<ph id=\"ph1\">&lt;code&gt;count&lt;/code&gt;</ph> is greater than the length of the substring from <ph id=\"ph2\">&lt;code&gt;startIndex&lt;/code&gt;</ph> to the end of this instance","source":"<code>count</code> is greater than the length of the substring from <code>startIndex</code> to the end of this instance"},{"pos":[448,452],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[459,605],"content":"<ph id=\"ph1\">&lt;code&gt;count&lt;/code&gt;</ph> is greater than the length of the subarray from <ph id=\"ph2\">&lt;code&gt;destinationIndex&lt;/code&gt;</ph> to the end of the <ph id=\"ph3\">&lt;code&gt;destination&lt;/code&gt;</ph> array.","source":"<code>count</code> is greater than the length of the subarray from <code>destinationIndex</code> to the end of the <code>destination</code> array."}],"pos":[266250,266874],"yaml":true},{"content":"Represents the empty string. This field is read-only.","nodes":[{"pos":[0,53],"content":"Represents the empty string. This field is read-only.","nodes":[{"content":"Represents the empty string. This field is read-only.","pos":[0,53],"nodes":[{"content":"Represents the empty string.","pos":[0,28]},{"content":"This field is read-only.","pos":[29,53]}]}]}],"pos":[268238,268292],"yaml":true},{"content":"The value of this field is the zero-length string, \"\".  \n  \n In application code, this field is most commonly used in assignments to initialize a string variable to an empty string. To test whether the value of a string is either `null` or <xref:System.String.Empty?displayProperty=fullName>, use the <xref:System.String.IsNullOrEmpty%2A> method.","nodes":[{"pos":[0,54],"content":"The value of this field is the zero-length string, \"\".","nodes":[{"content":"The value of this field is the zero-length string, \"\".","pos":[0,54]}]},{"pos":[61,346],"content":"In application code, this field is most commonly used in assignments to initialize a string variable to an empty string. To test whether the value of a string is either `null` or <xref:System.String.Empty?displayProperty=fullName>, use the <xref:System.String.IsNullOrEmpty%2A> method.","nodes":[{"content":"In application code, this field is most commonly used in assignments to initialize a string variable to an empty string.","pos":[0,120]},{"content":"To test whether the value of a string is either <ph id=\"ph1\">`null`</ph> or <ph id=\"ph2\">&lt;xref:System.String.Empty?displayProperty=fullName&gt;</ph>, use the <ph id=\"ph3\">&lt;xref:System.String.IsNullOrEmpty%2A&gt;</ph> method.","pos":[121,285],"source":" To test whether the value of a string is either `null` or <xref:System.String.Empty?displayProperty=fullName>, use the <xref:System.String.IsNullOrEmpty%2A> method."}]}],"pos":[268303,268656],"yaml":true,"extradata":"MT"},{"content":"Determines whether the end of this string instance matches the specified string when compared using the specified culture.","nodes":[{"pos":[0,122],"content":"Determines whether the end of this string instance matches the specified string when compared using the specified culture.","nodes":[{"content":"Determines whether the end of this string instance matches the specified string when compared using the specified culture.","pos":[0,122]}]}],"pos":[270438,270561],"yaml":true},{"content":"This method compares the `value` parameter to the substring at the end of this string that is the same length as `value`, and returns a value that indicates whether they are equal. To be equal, `value` must be a reference to this same instance or match the end of this string.  \n  \n This method performs a word (culture-sensitive) comparison using the specified casing and culture.","nodes":[{"pos":[0,276],"content":"This method compares the `value` parameter to the substring at the end of this string that is the same length as `value`, and returns a value that indicates whether they are equal. To be equal, `value` must be a reference to this same instance or match the end of this string.","nodes":[{"content":"This method compares the <ph id=\"ph1\">`value`</ph> parameter to the substring at the end of this string that is the same length as <ph id=\"ph2\">`value`</ph>, and returns a value that indicates whether they are equal.","pos":[0,180],"source":"This method compares the `value` parameter to the substring at the end of this string that is the same length as `value`, and returns a value that indicates whether they are equal."},{"content":"To be equal, <ph id=\"ph1\">`value`</ph> must be a reference to this same instance or match the end of this string.","pos":[181,276],"source":" To be equal, `value` must be a reference to this same instance or match the end of this string."}]},{"pos":[283,381],"content":"This method performs a word (culture-sensitive) comparison using the specified casing and culture.","nodes":[{"content":"This method performs a word (culture-sensitive) comparison using the specified casing and culture.","pos":[0,98]}]}],"pos":[270572,270958],"yaml":true,"extradata":"MT"},{"content":"The string to compare to the substring at the end of this instance.","nodes":[{"pos":[0,67],"content":"The string to compare to the substring at the end of this instance.","nodes":[{"content":"The string to compare to the substring at the end of this instance.","pos":[0,67]}]}],"pos":[271708,271776],"yaml":true},{"content":"`true` to ignore case during the comparison; otherwise, `false`.","nodes":[{"pos":[0,64],"content":"<ph id=\"ph1\">`true`</ph> to ignore case during the comparison; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` to ignore case during the comparison; otherwise, `false`."}],"pos":[271843,271910],"yaml":true},{"content":"Cultural information that determines how this instance and <code>value</code> are compared. If <code>culture</code> is `null`, the current culture is used.","nodes":[{"pos":[0,155],"content":"Cultural information that determines how this instance and <code>value</code> are compared. If <code>culture</code> is `null`, the current culture is used.","nodes":[{"content":"Cultural information that determines how this instance and <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept> are compared.","pos":[0,91],"source":"Cultural information that determines how this instance and <code>value</code> are compared."},{"content":"If <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">culture</ph><ept id=\"p1\">&lt;/code&gt;</ept> is <ph id=\"ph2\">`null`</ph>, the current culture is used.","pos":[92,155],"source":" If <code>culture</code> is `null`, the current culture is used."}]}],"pos":[271992,272148],"yaml":true},{"content":"`true` if the <code>value</code> parameter matches the end of this string; otherwise, `false`.","nodes":[{"pos":[0,94],"content":"<ph id=\"ph1\">`true`</ph> if the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter matches the end of this string; otherwise, <ph id=\"ph3\">`false`</ph>.","source":"`true` if the <code>value</code> parameter matches the end of this string; otherwise, `false`."}],"pos":[272206,272303],"yaml":true},{"content":"<code>value</code> is `null`.","nodes":[{"pos":[0,29],"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>value</code> is `null`."}],"pos":[272455,272485],"yaml":true},{"content":"Determines whether the end of this string instance matches the specified string when compared using the specified comparison option.","nodes":[{"pos":[0,132],"content":"Determines whether the end of this string instance matches the specified string when compared using the specified comparison option.","nodes":[{"content":"Determines whether the end of this string instance matches the specified string when compared using the specified comparison option.","pos":[0,132]}]}],"pos":[273702,273835],"yaml":true},{"content":"The <xref:System.String.EndsWith%2A> method compares the `value` parameter to the substring at the end of this string and returns a value that indicates whether they are equal. To be equal, `value` must be a reference to this same string, must be the empty string (\"\"), or must match the end of this string. The type of comparison performed by the <xref:System.String.EndsWith%2A> method depends on the value of the `comparisonType` parameter.","nodes":[{"pos":[0,443],"content":"The <xref:System.String.EndsWith%2A> method compares the `value` parameter to the substring at the end of this string and returns a value that indicates whether they are equal. To be equal, `value` must be a reference to this same string, must be the empty string (\"\"), or must match the end of this string. The type of comparison performed by the <xref:System.String.EndsWith%2A> method depends on the value of the `comparisonType` parameter.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.String.EndsWith%2A&gt;</ph> method compares the <ph id=\"ph2\">`value`</ph> parameter to the substring at the end of this string and returns a value that indicates whether they are equal.","pos":[0,176],"source":"The <xref:System.String.EndsWith%2A> method compares the `value` parameter to the substring at the end of this string and returns a value that indicates whether they are equal."},{"content":"To be equal, <ph id=\"ph1\">`value`</ph> must be a reference to this same string, must be the empty string (\"\"), or must match the end of this string.","pos":[177,307],"source":" To be equal, `value` must be a reference to this same string, must be the empty string (\"\"), or must match the end of this string."},{"content":"The type of comparison performed by the <ph id=\"ph1\">&lt;xref:System.String.EndsWith%2A&gt;</ph> method depends on the value of the <ph id=\"ph2\">`comparisonType`</ph> parameter.","pos":[308,443],"source":" The type of comparison performed by the <xref:System.String.EndsWith%2A> method depends on the value of the `comparisonType` parameter."}]}],"pos":[273846,274290],"yaml":true,"extradata":"MT"},{"content":"The string to compare to the substring at the end of this instance.","nodes":[{"pos":[0,67],"content":"The string to compare to the substring at the end of this instance.","nodes":[{"content":"The string to compare to the substring at the end of this instance.","pos":[0,67]}]}],"pos":[275163,275231],"yaml":true},{"content":"One of the enumeration values that determines how this string and <code>value</code> are compared.","nodes":[{"pos":[0,98],"content":"One of the enumeration values that determines how this string and <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept> are compared.","source":"One of the enumeration values that determines how this string and <code>value</code> are compared."}],"pos":[275311,275410],"yaml":true},{"content":"`true` if the <code>value</code> parameter matches the end of this string; otherwise, `false`.","nodes":[{"pos":[0,94],"content":"<ph id=\"ph1\">`true`</ph> if the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter matches the end of this string; otherwise, <ph id=\"ph3\">`false`</ph>.","source":"`true` if the <code>value</code> parameter matches the end of this string; otherwise, `false`."}],"pos":[275468,275565],"yaml":true},{"content":"<code>value</code> is `null`.","nodes":[{"pos":[0,29],"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>value</code> is `null`."}],"pos":[275717,275747],"yaml":true},{"content":"<code>comparisonType</code> is not a <xref href=\"System.StringComparison\"></xref> value.","nodes":[{"pos":[0,88],"content":"<ph id=\"ph1\">&lt;code&gt;comparisonType&lt;/code&gt;</ph> is not a <ph id=\"ph2\">&lt;xref href=\"System.StringComparison\"&gt;&lt;/xref&gt;</ph> value.","source":"<code>comparisonType</code> is not a <xref href=\"System.StringComparison\"></xref> value."}],"pos":[275841,275930],"yaml":true},{"content":"Determines whether the end of this string instance matches the specified string.","nodes":[{"pos":[0,80],"content":"Determines whether the end of this string instance matches the specified string.","nodes":[{"content":"Determines whether the end of this string instance matches the specified string.","pos":[0,80]}]}],"pos":[277440,277521],"yaml":true},{"content":"This method compares `value` to the substring at the end of this instance that is the same length as `value`, and returns an indication whether they are equal. To be equal, `value` must be a reference to this same instance or match the end of this instance.  \n  \n This method performs a word (case-sensitive and culture-sensitive) comparison using the current culture.","nodes":[{"pos":[0,257],"content":"This method compares `value` to the substring at the end of this instance that is the same length as `value`, and returns an indication whether they are equal. To be equal, `value` must be a reference to this same instance or match the end of this instance.","nodes":[{"content":"This method compares <ph id=\"ph1\">`value`</ph> to the substring at the end of this instance that is the same length as <ph id=\"ph2\">`value`</ph>, and returns an indication whether they are equal.","pos":[0,159],"source":"This method compares `value` to the substring at the end of this instance that is the same length as `value`, and returns an indication whether they are equal."},{"content":"To be equal, <ph id=\"ph1\">`value`</ph> must be a reference to this same instance or match the end of this instance.","pos":[160,257],"source":" To be equal, `value` must be a reference to this same instance or match the end of this instance."}]},{"pos":[264,368],"content":"This method performs a word (case-sensitive and culture-sensitive) comparison using the current culture.","nodes":[{"content":"This method performs a word (case-sensitive and culture-sensitive) comparison using the current culture.","pos":[0,104]}]}],"pos":[277532,277905],"yaml":true,"extradata":"MT"},{"content":"The string to compare to the substring at the end of this instance.","nodes":[{"pos":[0,67],"content":"The string to compare to the substring at the end of this instance.","nodes":[{"content":"The string to compare to the substring at the end of this instance.","pos":[0,67]}]}],"pos":[279090,279158],"yaml":true},{"content":"`true` if <code>value</code> matches the end of this instance; otherwise, `false`.","nodes":[{"pos":[0,82],"content":"<ph id=\"ph1\">`true`</ph> if <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept> matches the end of this instance; otherwise, <ph id=\"ph3\">`false`</ph>.","source":"`true` if <code>value</code> matches the end of this instance; otherwise, `false`."}],"pos":[279216,279301],"yaml":true},{"content":"<code>value</code> is `null`.","nodes":[{"pos":[0,29],"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>value</code> is `null`."}],"pos":[279453,279483],"yaml":true},{"content":"Determines whether this instance and a specified object, which must also be a <xref href=\"System.String\"></xref> object, have the same value.","nodes":[{"pos":[0,141],"content":"Determines whether this instance and a specified object, which must also be a <ph id=\"ph1\">&lt;xref href=\"System.String\"&gt;&lt;/xref&gt;</ph> object, have the same value.","source":"Determines whether this instance and a specified object, which must also be a <xref href=\"System.String\"></xref> object, have the same value."}],"pos":[281624,281766],"yaml":true},{"content":"This method performs an ordinal (case-sensitive and culture-insensitive) comparison.","nodes":[{"pos":[0,84],"content":"This method performs an ordinal (case-sensitive and culture-insensitive) comparison.","nodes":[{"content":"This method performs an ordinal (case-sensitive and culture-insensitive) comparison.","pos":[0,84]}]}],"pos":[281777,281862],"yaml":true,"extradata":"MT"},{"content":"The string to compare to this instance.","nodes":[{"pos":[0,39],"content":"The string to compare to this instance.","nodes":[{"content":"The string to compare to this instance.","pos":[0,39]}]}],"pos":[282418,282458],"yaml":true},{"content":"`true` if <code>obj</code> is a <xref href=\"System.String\"></xref> and its value is the same as this instance; otherwise, `false`.  If <code>obj</code> is `null`, the method returns `false`.","nodes":[{"pos":[0,190],"content":"`true` if <code>obj</code> is a <xref href=\"System.String\"></xref> and its value is the same as this instance; otherwise, `false`.  If <code>obj</code> is `null`, the method returns `false`.","nodes":[{"content":"<ph id=\"ph1\">`true`</ph> if <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">obj</ph><ept id=\"p1\">&lt;/code&gt;</ept> is a <ph id=\"ph3\">&lt;xref href=\"System.String\"&gt;&lt;/xref&gt;</ph> and its value is the same as this instance; otherwise, <ph id=\"ph4\">`false`</ph>.","pos":[0,130],"source":"`true` if <code>obj</code> is a <xref href=\"System.String\"></xref> and its value is the same as this instance; otherwise, `false`."},{"content":"If <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">obj</ph><ept id=\"p1\">&lt;/code&gt;</ept> is <ph id=\"ph2\">`null`</ph>, the method returns <ph id=\"ph3\">`false`</ph>.","pos":[132,190],"source":"  If <code>obj</code> is `null`, the method returns `false`."}]}],"pos":[282516,282709],"yaml":true},{"content":"Determines whether this instance and another specified <xref href=\"System.String\"></xref> object have the same value.","nodes":[{"pos":[0,117],"content":"Determines whether this instance and another specified <ph id=\"ph1\">&lt;xref href=\"System.String\"&gt;&lt;/xref&gt;</ph> object have the same value.","source":"Determines whether this instance and another specified <xref href=\"System.String\"></xref> object have the same value."}],"pos":[284200,284318],"yaml":true},{"content":"This method performs an ordinal (case-sensitive and culture-insensitive) comparison.","nodes":[{"pos":[0,84],"content":"This method performs an ordinal (case-sensitive and culture-insensitive) comparison.","nodes":[{"content":"This method performs an ordinal (case-sensitive and culture-insensitive) comparison.","pos":[0,84]}]}],"pos":[284329,284414],"yaml":true,"extradata":"MT"},{"content":"The string to compare to this instance.","nodes":[{"pos":[0,39],"content":"The string to compare to this instance.","nodes":[{"content":"The string to compare to this instance.","pos":[0,39]}]}],"pos":[285291,285331],"yaml":true},{"content":"`true` if the value of the <code>value</code> parameter is the same as the value of this instance; otherwise, `false`. If <code>value</code> is `null`, the method returns `false`.","nodes":[{"pos":[0,179],"content":"`true` if the value of the <code>value</code> parameter is the same as the value of this instance; otherwise, `false`. If <code>value</code> is `null`, the method returns `false`.","nodes":[{"content":"<ph id=\"ph1\">`true`</ph> if the value of the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is the same as the value of this instance; otherwise, <ph id=\"ph3\">`false`</ph>.","pos":[0,118],"source":"`true` if the value of the <code>value</code> parameter is the same as the value of this instance; otherwise, `false`."},{"content":"If <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept> is <ph id=\"ph2\">`null`</ph>, the method returns <ph id=\"ph3\">`false`</ph>.","pos":[119,179],"source":" If <code>value</code> is `null`, the method returns `false`."}]}],"pos":[285389,285571],"yaml":true},{"content":"Determines whether two specified <xref href=\"System.String\"></xref> objects have the same value.","nodes":[{"pos":[0,96],"content":"Determines whether two specified <ph id=\"ph1\">&lt;xref href=\"System.String\"&gt;&lt;/xref&gt;</ph> objects have the same value.","source":"Determines whether two specified <xref href=\"System.String\"></xref> objects have the same value."}],"pos":[287128,287225],"yaml":true},{"content":"This method performs an ordinal (case-sensitive and culture-insensitive) comparison.","nodes":[{"pos":[0,84],"content":"This method performs an ordinal (case-sensitive and culture-insensitive) comparison.","nodes":[{"content":"This method performs an ordinal (case-sensitive and culture-insensitive) comparison.","pos":[0,84]}]}],"pos":[287236,287321],"yaml":true,"extradata":"MT"},{"content":"The first string to compare, or `null`.","nodes":[{"pos":[0,39],"content":"The first string to compare, or <ph id=\"ph1\">`null`</ph>.","source":"The first string to compare, or `null`."}],"pos":[287881,287921],"yaml":true},{"content":"The second string to compare, or `null`.","nodes":[{"pos":[0,40],"content":"The second string to compare, or <ph id=\"ph1\">`null`</ph>.","source":"The second string to compare, or `null`."}],"pos":[287978,288019],"yaml":true},{"content":"`true` if the value of <code>a</code> is the same as the value of <code>b</code>; otherwise, `false`. If both <code>a</code> and <code>b</code> are `null`, the method returns `true`.","nodes":[{"pos":[0,182],"content":"`true` if the value of <code>a</code> is the same as the value of <code>b</code>; otherwise, `false`. If both <code>a</code> and <code>b</code> are `null`, the method returns `true`.","nodes":[{"content":"<ph id=\"ph1\">`true`</ph> if the value of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">a</ph><ept id=\"p1\">&lt;/code&gt;</ept> is the same as the value of <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph3\">b</ph><ept id=\"p2\">&lt;/code&gt;</ept>; otherwise, <ph id=\"ph4\">`false`</ph>.","pos":[0,101],"source":"`true` if the value of <code>a</code> is the same as the value of <code>b</code>; otherwise, `false`."},{"content":"If both <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">a</ph><ept id=\"p1\">&lt;/code&gt;</ept> and <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">b</ph><ept id=\"p2\">&lt;/code&gt;</ept> are <ph id=\"ph3\">`null`</ph>, the method returns <ph id=\"ph4\">`true`</ph>.","pos":[102,182],"source":" If both <code>a</code> and <code>b</code> are `null`, the method returns `true`."}]}],"pos":[288077,288262],"yaml":true},{"content":"Determines whether this string and a specified <xref href=\"System.String\"></xref> object have the same value. A parameter specifies the culture, case, and sort rules used in the comparison.","nodes":[{"pos":[0,189],"content":"Determines whether this string and a specified <xref href=\"System.String\"></xref> object have the same value. A parameter specifies the culture, case, and sort rules used in the comparison.","nodes":[{"content":"Determines whether this string and a specified <ph id=\"ph1\">&lt;xref href=\"System.String\"&gt;&lt;/xref&gt;</ph> object have the same value.","pos":[0,109],"source":"Determines whether this string and a specified <xref href=\"System.String\"></xref> object have the same value."},{"content":"A parameter specifies the culture, case, and sort rules used in the comparison.","pos":[110,189]}]}],"pos":[289862,290052],"yaml":true},{"content":"The `comparisonType` parameter indicates whether the comparison should use the current or invariant culture, honor or ignore the case of the two strings being compared, or use word or ordinal sort rules.","nodes":[{"pos":[0,203],"content":"The <ph id=\"ph1\">`comparisonType`</ph> parameter indicates whether the comparison should use the current or invariant culture, honor or ignore the case of the two strings being compared, or use word or ordinal sort rules.","source":"The `comparisonType` parameter indicates whether the comparison should use the current or invariant culture, honor or ignore the case of the two strings being compared, or use word or ordinal sort rules."}],"pos":[290063,290267],"yaml":true,"extradata":"MT"},{"content":"The string to compare to this instance.","nodes":[{"pos":[0,39],"content":"The string to compare to this instance.","nodes":[{"content":"The string to compare to this instance.","pos":[0,39]}]}],"pos":[291675,291715],"yaml":true},{"content":"One of the enumeration values that specifies how the strings will be compared.","nodes":[{"pos":[0,78],"content":"One of the enumeration values that specifies how the strings will be compared.","nodes":[{"content":"One of the enumeration values that specifies how the strings will be compared.","pos":[0,78]}]}],"pos":[291795,291874],"yaml":true},{"content":"`true` if the value of the <code>value</code> parameter is the same as this string; otherwise, `false`.","nodes":[{"pos":[0,103],"content":"<ph id=\"ph1\">`true`</ph> if the value of the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is the same as this string; otherwise, <ph id=\"ph3\">`false`</ph>.","source":"`true` if the value of the <code>value</code> parameter is the same as this string; otherwise, `false`."}],"pos":[291932,292038],"yaml":true},{"content":"<code>comparisonType</code> is not a <xref href=\"System.StringComparison\"></xref> value.","nodes":[{"pos":[0,88],"content":"<ph id=\"ph1\">&lt;code&gt;comparisonType&lt;/code&gt;</ph> is not a <ph id=\"ph2\">&lt;xref href=\"System.StringComparison\"&gt;&lt;/xref&gt;</ph> value.","source":"<code>comparisonType</code> is not a <xref href=\"System.StringComparison\"></xref> value."}],"pos":[292180,292269],"yaml":true},{"content":"Determines whether two specified <xref href=\"System.String\"></xref> objects have the same value. A parameter specifies the culture, case, and sort rules used in the comparison.","nodes":[{"pos":[0,176],"content":"Determines whether two specified <xref href=\"System.String\"></xref> objects have the same value. A parameter specifies the culture, case, and sort rules used in the comparison.","nodes":[{"content":"Determines whether two specified <ph id=\"ph1\">&lt;xref href=\"System.String\"&gt;&lt;/xref&gt;</ph> objects have the same value.","pos":[0,96],"source":"Determines whether two specified <xref href=\"System.String\"></xref> objects have the same value."},{"content":"A parameter specifies the culture, case, and sort rules used in the comparison.","pos":[97,176]}]}],"pos":[293901,294078],"yaml":true},{"content":"The `comparisonType` parameter indicates whether the comparison should use the current or invariant culture, honor or ignore the case of the two strings being compared, or use word or ordinal sort rules.","nodes":[{"pos":[0,203],"content":"The <ph id=\"ph1\">`comparisonType`</ph> parameter indicates whether the comparison should use the current or invariant culture, honor or ignore the case of the two strings being compared, or use word or ordinal sort rules.","source":"The `comparisonType` parameter indicates whether the comparison should use the current or invariant culture, honor or ignore the case of the two strings being compared, or use word or ordinal sort rules."}],"pos":[294089,294293],"yaml":true,"extradata":"MT"},{"content":"The first string to compare, or `null`.","nodes":[{"pos":[0,39],"content":"The first string to compare, or <ph id=\"ph1\">`null`</ph>.","source":"The first string to compare, or `null`."}],"pos":[295134,295174],"yaml":true},{"content":"The second string to compare, or `null`.","nodes":[{"pos":[0,40],"content":"The second string to compare, or <ph id=\"ph1\">`null`</ph>.","source":"The second string to compare, or `null`."}],"pos":[295231,295272],"yaml":true},{"content":"One of the enumeration values that specifies the rules for the comparison.","nodes":[{"pos":[0,74],"content":"One of the enumeration values that specifies the rules for the comparison.","nodes":[{"content":"One of the enumeration values that specifies the rules for the comparison.","pos":[0,74]}]}],"pos":[295352,295427],"yaml":true},{"content":"`true` if the value of the <code>a</code> parameter is equal to the value of the <code>b</code> parameter; otherwise, `false`.","nodes":[{"pos":[0,126],"content":"<ph id=\"ph1\">`true`</ph> if the value of the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">a</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is equal to the value of the <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph3\">b</ph><ept id=\"p2\">&lt;/code&gt;</ept> parameter; otherwise, <ph id=\"ph4\">`false`</ph>.","source":"`true` if the value of the <code>a</code> parameter is equal to the value of the <code>b</code> parameter; otherwise, `false`."}],"pos":[295485,295614],"yaml":true},{"content":"<code>comparisonType</code> is not a <xref href=\"System.StringComparison\"></xref> value.","nodes":[{"pos":[0,88],"content":"<ph id=\"ph1\">&lt;code&gt;comparisonType&lt;/code&gt;</ph> is not a <ph id=\"ph2\">&lt;xref href=\"System.StringComparison\"&gt;&lt;/xref&gt;</ph> value.","source":"<code>comparisonType</code> is not a <xref href=\"System.StringComparison\"></xref> value."}],"pos":[295756,295845],"yaml":true},{"content":"Replaces the format items in a specified string with the string representation of three specified objects. An parameter supplies culture-specific formatting information.","nodes":[{"pos":[0,169],"content":"Replaces the format items in a specified string with the string representation of three specified objects. An parameter supplies culture-specific formatting information.","nodes":[{"content":"Replaces the format items in a specified string with the string representation of three specified objects. An parameter supplies culture-specific formatting information.","pos":[0,169],"nodes":[{"content":"Replaces the format items in a specified string with the string representation of three specified objects.","pos":[0,106]},{"content":"An parameter supplies culture-specific formatting information.","pos":[107,169]}]}]}],"pos":[297603,297773],"yaml":true},{"content":"> [!NOTE]\n>  For examples and comprehensive usage information about this and other overloads of the `Format` method, see the <xref:System.String.Format%2A> overload summary.","nodes":[{"pos":[2,173],"content":"[!NOTE]\n For examples and comprehensive usage information about this and other overloads of the `Format` method, see the <xref:System.String.Format%2A> overload summary.","leadings":["","> "],"nodes":[{"content":"For examples and comprehensive usage information about this and other overloads of the <ph id=\"ph1\">`Format`</ph> method, see the <ph id=\"ph2\">&lt;xref:System.String.Format%2A&gt;</ph> overload summary.","pos":[9,169],"source":" For examples and comprehensive usage information about this and other overloads of the `Format` method, see the <xref:System.String.Format%2A> overload summary."}]}],"pos":[297784,297970],"yaml":true,"extradata":"MT"},{"content":"An object that supplies culture-specific formatting information.","nodes":[{"pos":[0,64],"content":"An object that supplies culture-specific formatting information.","nodes":[{"content":"An object that supplies culture-specific formatting information.","pos":[0,64]}]}],"pos":[298192,298257],"yaml":true},{"content":"A [composite format string](~/docs/standard/base-types/composite-formatting.md).","nodes":[{"pos":[0,80],"content":"A <bpt id=\"p1\">[</bpt>composite format string<ept id=\"p1\">](~/docs/standard/base-types/composite-formatting.md)</ept>.","source":"A [composite format string](~/docs/standard/base-types/composite-formatting.md)."}],"pos":[298319,298400],"yaml":true},{"content":"The first object to format.","nodes":[{"pos":[0,27],"content":"The first object to format.","nodes":[{"content":"The first object to format.","pos":[0,27]}]}],"pos":[298460,298488],"yaml":true},{"content":"The second object to format.","nodes":[{"pos":[0,28],"content":"The second object to format.","nodes":[{"content":"The second object to format.","pos":[0,28]}]}],"pos":[298548,298577],"yaml":true},{"content":"The third object to format.","nodes":[{"pos":[0,27],"content":"The third object to format.","nodes":[{"content":"The third object to format.","pos":[0,27]}]}],"pos":[298637,298665],"yaml":true},{"content":"A copy of <code>format</code> in which the format items have been replaced by the string representations of <code>arg0</code>, <code>arg1</code>, and <code>arg2</code>.","nodes":[{"pos":[0,168],"content":"A copy of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">format</ph><ept id=\"p1\">&lt;/code&gt;</ept> in which the format items have been replaced by the string representations of <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">arg0</ph><ept id=\"p2\">&lt;/code&gt;</ept>, <bpt id=\"p3\">&lt;code&gt;</bpt><ph id=\"ph3\">arg1</ph><ept id=\"p3\">&lt;/code&gt;</ept>, and <bpt id=\"p4\">&lt;code&gt;</bpt><ph id=\"ph4\">arg2</ph><ept id=\"p4\">&lt;/code&gt;</ept>.","source":"A copy of <code>format</code> in which the format items have been replaced by the string representations of <code>arg0</code>, <code>arg1</code>, and <code>arg2</code>."}],"pos":[298722,298891],"yaml":true},{"content":"<code>format</code>, <code>arg0</code>, <code>arg1</code>, or <code>arg2</code> is `null`.","nodes":[{"pos":[0,90],"content":"<ph id=\"ph1\">&lt;code&gt;format&lt;/code&gt;</ph>, <ph id=\"ph2\">&lt;code&gt;arg0&lt;/code&gt;</ph>, <ph id=\"ph3\">&lt;code&gt;arg1&lt;/code&gt;</ph>, or <ph id=\"ph4\">&lt;code&gt;arg2&lt;/code&gt;</ph> is <ph id=\"ph5\">`null`</ph>.","source":"<code>format</code>, <code>arg0</code>, <code>arg1</code>, or <code>arg2</code> is `null`."}],"pos":[299041,299132],"yaml":true},{"content":"<code>format</code> is invalid.  \n  \n -or-  \n  \n The index of a format item is less than zero, or greater than or equal to three.","nodes":[{"pos":[0,31],"content":"<ph id=\"ph1\">&lt;code&gt;format&lt;/code&gt;</ph> is invalid.","source":"<code>format</code> is invalid."},{"pos":[38,42],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[49,129],"content":"The index of a format item is less than zero, or greater than or equal to three.","nodes":[{"content":"The index of a format item is less than zero, or greater than or equal to three.","pos":[0,80]}]}],"pos":[299222,299358],"yaml":true},{"content":"Replaces the format items in a specified string with the string representation of three specified objects.","nodes":[{"pos":[0,106],"content":"Replaces the format items in a specified string with the string representation of three specified objects.","nodes":[{"content":"Replaces the format items in a specified string with the string representation of three specified objects.","pos":[0,106]}]}],"pos":[300725,300832],"yaml":true},{"content":"> [!NOTE]\n>  For examples and comprehensive usage information about this and other overloads of the `Format` method, see the <xref:System.String.Format%2A> overload summary.","nodes":[{"pos":[2,173],"content":"[!NOTE]\n For examples and comprehensive usage information about this and other overloads of the `Format` method, see the <xref:System.String.Format%2A> overload summary.","leadings":["","> "],"nodes":[{"content":"For examples and comprehensive usage information about this and other overloads of the <ph id=\"ph1\">`Format`</ph> method, see the <ph id=\"ph2\">&lt;xref:System.String.Format%2A&gt;</ph> overload summary.","pos":[9,169],"source":" For examples and comprehensive usage information about this and other overloads of the `Format` method, see the <xref:System.String.Format%2A> overload summary."}]}],"pos":[300843,301029],"yaml":true,"extradata":"MT"},{"content":"A [composite format string](~/docs/standard/base-types/composite-formatting.md).","nodes":[{"pos":[0,80],"content":"A <bpt id=\"p1\">[</bpt>composite format string<ept id=\"p1\">](~/docs/standard/base-types/composite-formatting.md)</ept>.","source":"A [composite format string](~/docs/standard/base-types/composite-formatting.md)."}],"pos":[301214,301295],"yaml":true},{"content":"The first object to format.","nodes":[{"pos":[0,27],"content":"The first object to format.","nodes":[{"content":"The first object to format.","pos":[0,27]}]}],"pos":[301355,301383],"yaml":true},{"content":"The second object to format.","nodes":[{"pos":[0,28],"content":"The second object to format.","nodes":[{"content":"The second object to format.","pos":[0,28]}]}],"pos":[301443,301472],"yaml":true},{"content":"The third object to format.","nodes":[{"pos":[0,27],"content":"The third object to format.","nodes":[{"content":"The third object to format.","pos":[0,27]}]}],"pos":[301532,301560],"yaml":true},{"content":"A copy of <code>format</code> in which the format items have been replaced by the string representations of <code>arg0</code>, <code>arg1</code>, and <code>arg2</code>.","nodes":[{"pos":[0,168],"content":"A copy of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">format</ph><ept id=\"p1\">&lt;/code&gt;</ept> in which the format items have been replaced by the string representations of <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">arg0</ph><ept id=\"p2\">&lt;/code&gt;</ept>, <bpt id=\"p3\">&lt;code&gt;</bpt><ph id=\"ph3\">arg1</ph><ept id=\"p3\">&lt;/code&gt;</ept>, and <bpt id=\"p4\">&lt;code&gt;</bpt><ph id=\"ph4\">arg2</ph><ept id=\"p4\">&lt;/code&gt;</ept>.","source":"A copy of <code>format</code> in which the format items have been replaced by the string representations of <code>arg0</code>, <code>arg1</code>, and <code>arg2</code>."}],"pos":[301617,301786],"yaml":true},{"content":"<code>format</code> is `null`.","nodes":[{"pos":[0,30],"content":"<ph id=\"ph1\">&lt;code&gt;format&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>format</code> is `null`."}],"pos":[301936,301967],"yaml":true},{"content":"<code>format</code> is invalid.  \n  \n -or-  \n  \n The index of a format item is less than zero, or greater than two.","nodes":[{"pos":[0,31],"content":"<ph id=\"ph1\">&lt;code&gt;format&lt;/code&gt;</ph> is invalid.","source":"<code>format</code> is invalid."},{"pos":[38,42],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[49,115],"content":"The index of a format item is less than zero, or greater than two.","nodes":[{"content":"The index of a format item is less than zero, or greater than two.","pos":[0,66]}]}],"pos":[302057,302179],"yaml":true},{"content":"Replaces the format items in a specified string with the string representation of two specified objects. A parameter supplies culture-specific formatting information.","nodes":[{"pos":[0,166],"content":"Replaces the format items in a specified string with the string representation of two specified objects. A parameter supplies culture-specific formatting information.","nodes":[{"content":"Replaces the format items in a specified string with the string representation of two specified objects. A parameter supplies culture-specific formatting information.","pos":[0,166],"nodes":[{"content":"Replaces the format items in a specified string with the string representation of two specified objects.","pos":[0,104]},{"content":"A parameter supplies culture-specific formatting information.","pos":[105,166]}]}]}],"pos":[303734,303901],"yaml":true},{"content":"> [!NOTE]\n>  For examples and comprehensive usage information about this and other overloads of the `Format` method, see the <xref:System.String.Format%2A> overload summary.","nodes":[{"pos":[2,173],"content":"[!NOTE]\n For examples and comprehensive usage information about this and other overloads of the `Format` method, see the <xref:System.String.Format%2A> overload summary.","leadings":["","> "],"nodes":[{"content":"For examples and comprehensive usage information about this and other overloads of the <ph id=\"ph1\">`Format`</ph> method, see the <ph id=\"ph2\">&lt;xref:System.String.Format%2A&gt;</ph> overload summary.","pos":[9,169],"source":" For examples and comprehensive usage information about this and other overloads of the `Format` method, see the <xref:System.String.Format%2A> overload summary."}]}],"pos":[303912,304098],"yaml":true,"extradata":"MT"},{"content":"An object that supplies culture-specific formatting information.","nodes":[{"pos":[0,64],"content":"An object that supplies culture-specific formatting information.","nodes":[{"content":"An object that supplies culture-specific formatting information.","pos":[0,64]}]}],"pos":[304307,304372],"yaml":true},{"content":"A [composite format string](~/docs/standard/base-types/composite-formatting.md).","nodes":[{"pos":[0,80],"content":"A <bpt id=\"p1\">[</bpt>composite format string<ept id=\"p1\">](~/docs/standard/base-types/composite-formatting.md)</ept>.","source":"A [composite format string](~/docs/standard/base-types/composite-formatting.md)."}],"pos":[304434,304515],"yaml":true},{"content":"The first object to format.","nodes":[{"pos":[0,27],"content":"The first object to format.","nodes":[{"content":"The first object to format.","pos":[0,27]}]}],"pos":[304575,304603],"yaml":true},{"content":"The second object to format.","nodes":[{"pos":[0,28],"content":"The second object to format.","nodes":[{"content":"The second object to format.","pos":[0,28]}]}],"pos":[304663,304692],"yaml":true},{"content":"A copy of <code>format</code> in which format items are replaced by the string representations of <code>arg0</code> and <code>arg1</code>.","nodes":[{"pos":[0,138],"content":"A copy of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">format</ph><ept id=\"p1\">&lt;/code&gt;</ept> in which format items are replaced by the string representations of <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">arg0</ph><ept id=\"p2\">&lt;/code&gt;</ept> and <bpt id=\"p3\">&lt;code&gt;</bpt><ph id=\"ph3\">arg1</ph><ept id=\"p3\">&lt;/code&gt;</ept>.","source":"A copy of <code>format</code> in which format items are replaced by the string representations of <code>arg0</code> and <code>arg1</code>."}],"pos":[304749,304888],"yaml":true},{"content":"<code>format</code>, <code>arg0</code>, or <code>arg1</code> is `null`.","nodes":[{"pos":[0,71],"content":"<ph id=\"ph1\">&lt;code&gt;format&lt;/code&gt;</ph>, <ph id=\"ph2\">&lt;code&gt;arg0&lt;/code&gt;</ph>, or <ph id=\"ph3\">&lt;code&gt;arg1&lt;/code&gt;</ph> is <ph id=\"ph4\">`null`</ph>.","source":"<code>format</code>, <code>arg0</code>, or <code>arg1</code> is `null`."}],"pos":[305038,305110],"yaml":true},{"content":"<code>format</code> is invalid.  \n  \n -or-  \n  \n The index of a format item is less than zero, or greater than or equal to two.","nodes":[{"pos":[0,31],"content":"<ph id=\"ph1\">&lt;code&gt;format&lt;/code&gt;</ph> is invalid.","source":"<code>format</code> is invalid."},{"pos":[38,42],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[49,127],"content":"The index of a format item is less than zero, or greater than or equal to two.","nodes":[{"content":"The index of a format item is less than zero, or greater than or equal to two.","pos":[0,78]}]}],"pos":[305200,305334],"yaml":true},{"content":"Replaces the format items in a specified string with the string representation of two specified objects.","nodes":[{"pos":[0,104],"content":"Replaces the format items in a specified string with the string representation of two specified objects.","nodes":[{"content":"Replaces the format items in a specified string with the string representation of two specified objects.","pos":[0,104]}]}],"pos":[306635,306740],"yaml":true},{"content":"> [!NOTE]\n>  For examples and comprehensive usage information about this and other overloads of the `Format` method, see the <xref:System.String.Format%2A> overload summary.","nodes":[{"pos":[2,173],"content":"[!NOTE]\n For examples and comprehensive usage information about this and other overloads of the `Format` method, see the <xref:System.String.Format%2A> overload summary.","leadings":["","> "],"nodes":[{"content":"For examples and comprehensive usage information about this and other overloads of the <ph id=\"ph1\">`Format`</ph> method, see the <ph id=\"ph2\">&lt;xref:System.String.Format%2A&gt;</ph> overload summary.","pos":[9,169],"source":" For examples and comprehensive usage information about this and other overloads of the `Format` method, see the <xref:System.String.Format%2A> overload summary."}]}],"pos":[306751,306937],"yaml":true,"extradata":"MT"},{"content":"A [composite format string](~/docs/standard/base-types/composite-formatting.md).","nodes":[{"pos":[0,80],"content":"A <bpt id=\"p1\">[</bpt>composite format string<ept id=\"p1\">](~/docs/standard/base-types/composite-formatting.md)</ept>.","source":"A [composite format string](~/docs/standard/base-types/composite-formatting.md)."}],"pos":[307109,307190],"yaml":true},{"content":"The first object to format.","nodes":[{"pos":[0,27],"content":"The first object to format.","nodes":[{"content":"The first object to format.","pos":[0,27]}]}],"pos":[307250,307278],"yaml":true},{"content":"The second object to format.","nodes":[{"pos":[0,28],"content":"The second object to format.","nodes":[{"content":"The second object to format.","pos":[0,28]}]}],"pos":[307338,307367],"yaml":true},{"content":"A copy of <code>format</code> in which format items are replaced by the string representations of <code>arg0</code> and <code>arg1</code>.","nodes":[{"pos":[0,138],"content":"A copy of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">format</ph><ept id=\"p1\">&lt;/code&gt;</ept> in which format items are replaced by the string representations of <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">arg0</ph><ept id=\"p2\">&lt;/code&gt;</ept> and <bpt id=\"p3\">&lt;code&gt;</bpt><ph id=\"ph3\">arg1</ph><ept id=\"p3\">&lt;/code&gt;</ept>.","source":"A copy of <code>format</code> in which format items are replaced by the string representations of <code>arg0</code> and <code>arg1</code>."}],"pos":[307424,307563],"yaml":true},{"content":"<code>format</code> is `null`.","nodes":[{"pos":[0,30],"content":"<ph id=\"ph1\">&lt;code&gt;format&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>format</code> is `null`."}],"pos":[307713,307744],"yaml":true},{"content":"<code>format</code> is invalid.  \n  \n -or-  \n  \n The index of a format item is not zero or one.","nodes":[{"pos":[0,31],"content":"<ph id=\"ph1\">&lt;code&gt;format&lt;/code&gt;</ph> is invalid.","source":"<code>format</code> is invalid."},{"pos":[38,42],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[49,95],"content":"The index of a format item is not zero or one.","nodes":[{"content":"The index of a format item is not zero or one.","pos":[0,46]}]}],"pos":[307834,307936],"yaml":true},{"content":"Replaces the format item or items in a specified string with the string representation of the corresponding object. A parameter supplies culture-specific formatting information.","nodes":[{"pos":[0,177],"content":"Replaces the format item or items in a specified string with the string representation of the corresponding object. A parameter supplies culture-specific formatting information.","nodes":[{"content":"Replaces the format item or items in a specified string with the string representation of the corresponding object. A parameter supplies culture-specific formatting information.","pos":[0,177],"nodes":[{"content":"Replaces the format item or items in a specified string with the string representation of the corresponding object.","pos":[0,115]},{"content":"A parameter supplies culture-specific formatting information.","pos":[116,177]}]}]}],"pos":[309425,309603],"yaml":true},{"content":"> [!NOTE]\n>  For examples and comprehensive usage information about this and other overloads of the `Format` method, see the <xref:System.String.Format%2A> overload summary.","nodes":[{"pos":[2,173],"content":"[!NOTE]\n For examples and comprehensive usage information about this and other overloads of the `Format` method, see the <xref:System.String.Format%2A> overload summary.","leadings":["","> "],"nodes":[{"content":"For examples and comprehensive usage information about this and other overloads of the <ph id=\"ph1\">`Format`</ph> method, see the <ph id=\"ph2\">&lt;xref:System.String.Format%2A&gt;</ph> overload summary.","pos":[9,169],"source":" For examples and comprehensive usage information about this and other overloads of the `Format` method, see the <xref:System.String.Format%2A> overload summary."}]}],"pos":[309614,309800],"yaml":true,"extradata":"MT"},{"content":"An object that supplies culture-specific formatting information.","nodes":[{"pos":[0,64],"content":"An object that supplies culture-specific formatting information.","nodes":[{"content":"An object that supplies culture-specific formatting information.","pos":[0,64]}]}],"pos":[309996,310061],"yaml":true},{"content":"A [composite format string](~/docs/standard/base-types/composite-formatting.md).","nodes":[{"pos":[0,80],"content":"A <bpt id=\"p1\">[</bpt>composite format string<ept id=\"p1\">](~/docs/standard/base-types/composite-formatting.md)</ept>.","source":"A [composite format string](~/docs/standard/base-types/composite-formatting.md)."}],"pos":[310123,310204],"yaml":true},{"content":"The object to format.","nodes":[{"pos":[0,21],"content":"The object to format.","nodes":[{"content":"The object to format.","pos":[0,21]}]}],"pos":[310264,310286],"yaml":true},{"content":"A copy of <code>format</code> in which the format item or items have been replaced by the string representation of <code>arg0</code>.","nodes":[{"pos":[0,133],"content":"A copy of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">format</ph><ept id=\"p1\">&lt;/code&gt;</ept> in which the format item or items have been replaced by the string representation of <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">arg0</ph><ept id=\"p2\">&lt;/code&gt;</ept>.","source":"A copy of <code>format</code> in which the format item or items have been replaced by the string representation of <code>arg0</code>."}],"pos":[310343,310477],"yaml":true},{"content":"<code>format</code> or <code>arg0</code> is `null`.","nodes":[{"pos":[0,51],"content":"<ph id=\"ph1\">&lt;code&gt;format&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;arg0&lt;/code&gt;</ph> is <ph id=\"ph3\">`null`</ph>.","source":"<code>format</code> or <code>arg0</code> is `null`."}],"pos":[310627,310679],"yaml":true},{"content":"<code>format</code> is invalid.  \n  \n -or-  \n  \n The index of a format item is less than zero, or greater than or equal to one.","nodes":[{"pos":[0,31],"content":"<ph id=\"ph1\">&lt;code&gt;format&lt;/code&gt;</ph> is invalid.","source":"<code>format</code> is invalid."},{"pos":[38,42],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[49,127],"content":"The index of a format item is less than zero, or greater than or equal to one.","nodes":[{"content":"The index of a format item is less than zero, or greater than or equal to one.","pos":[0,78]}]}],"pos":[310769,310903],"yaml":true},{"content":"Replaces the format item in a specified string with the string representation of a corresponding object in a specified array.","nodes":[{"pos":[0,125],"content":"Replaces the format item in a specified string with the string representation of a corresponding object in a specified array.","nodes":[{"content":"Replaces the format item in a specified string with the string representation of a corresponding object in a specified array.","pos":[0,125]}]}],"pos":[312150,312276],"yaml":true},{"content":"> [!NOTE]\n>  For examples and comprehensive usage information about this and other overloads of the `Format` method, see the <xref:System.String.Format%2A> overload summary.","nodes":[{"pos":[2,173],"content":"[!NOTE]\n For examples and comprehensive usage information about this and other overloads of the `Format` method, see the <xref:System.String.Format%2A> overload summary.","leadings":["","> "],"nodes":[{"content":"For examples and comprehensive usage information about this and other overloads of the <ph id=\"ph1\">`Format`</ph> method, see the <ph id=\"ph2\">&lt;xref:System.String.Format%2A&gt;</ph> overload summary.","pos":[9,169],"source":" For examples and comprehensive usage information about this and other overloads of the `Format` method, see the <xref:System.String.Format%2A> overload summary."}]}],"pos":[312287,312473],"yaml":true,"extradata":"MT"},{"content":"A [composite format string](~/docs/standard/base-types/composite-formatting.md).","nodes":[{"pos":[0,80],"content":"A <bpt id=\"p1\">[</bpt>composite format string<ept id=\"p1\">](~/docs/standard/base-types/composite-formatting.md)</ept>.","source":"A [composite format string](~/docs/standard/base-types/composite-formatting.md)."}],"pos":[312634,312715],"yaml":true},{"content":"An object array that contains zero or more objects to format.","nodes":[{"pos":[0,61],"content":"An object array that contains zero or more objects to format.","nodes":[{"content":"An object array that contains zero or more objects to format.","pos":[0,61]}]}],"pos":[312777,312839],"yaml":true},{"content":"A copy of <code>format</code> in which the format items have been replaced by the string representation of the corresponding objects in <code>args</code>.","nodes":[{"pos":[0,154],"content":"A copy of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">format</ph><ept id=\"p1\">&lt;/code&gt;</ept> in which the format items have been replaced by the string representation of the corresponding objects in <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">args</ph><ept id=\"p2\">&lt;/code&gt;</ept>.","source":"A copy of <code>format</code> in which the format items have been replaced by the string representation of the corresponding objects in <code>args</code>."}],"pos":[312896,313051],"yaml":true},{"content":"<code>format</code> or <code>args</code> is `null`.","nodes":[{"pos":[0,51],"content":"<ph id=\"ph1\">&lt;code&gt;format&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;args&lt;/code&gt;</ph> is <ph id=\"ph3\">`null`</ph>.","source":"<code>format</code> or <code>args</code> is `null`."}],"pos":[313201,313253],"yaml":true},{"content":"<code>format</code> is invalid.  \n  \n -or-  \n  \n The index of a format item is less than zero, or greater than or equal to the length of the <code>args</code> array.","nodes":[{"pos":[0,31],"content":"<ph id=\"ph1\">&lt;code&gt;format&lt;/code&gt;</ph> is invalid.","source":"<code>format</code> is invalid."},{"pos":[38,42],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[49,165],"content":"The index of a format item is less than zero, or greater than or equal to the length of the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">args</ph><ept id=\"p1\">&lt;/code&gt;</ept> array.","source":"The index of a format item is less than zero, or greater than or equal to the length of the <code>args</code> array."}],"pos":[313343,313515],"yaml":true},{"content":"Replaces one or more format items in a specified string with the string representation of a specified object.","nodes":[{"pos":[0,109],"content":"Replaces one or more format items in a specified string with the string representation of a specified object.","nodes":[{"content":"Replaces one or more format items in a specified string with the string representation of a specified object.","pos":[0,109]}]}],"pos":[315004,315114],"yaml":true},{"content":"> [!NOTE]\n>  For examples and comprehensive usage information about this and other overloads of the `Format` method, see the <xref:System.String.Format%2A> overload summary.","nodes":[{"pos":[2,173],"content":"[!NOTE]\n For examples and comprehensive usage information about this and other overloads of the `Format` method, see the <xref:System.String.Format%2A> overload summary.","leadings":["","> "],"nodes":[{"content":"For examples and comprehensive usage information about this and other overloads of the <ph id=\"ph1\">`Format`</ph> method, see the <ph id=\"ph2\">&lt;xref:System.String.Format%2A&gt;</ph> overload summary.","pos":[9,169],"source":" For examples and comprehensive usage information about this and other overloads of the `Format` method, see the <xref:System.String.Format%2A> overload summary."}]}],"pos":[315125,315311],"yaml":true,"extradata":"MT"},{"content":"A [composite format string](~/docs/standard/base-types/composite-formatting.md).","nodes":[{"pos":[0,80],"content":"A <bpt id=\"p1\">[</bpt>composite format string<ept id=\"p1\">](~/docs/standard/base-types/composite-formatting.md)</ept>.","source":"A [composite format string](~/docs/standard/base-types/composite-formatting.md)."}],"pos":[315470,315551],"yaml":true},{"content":"The object to format.","nodes":[{"pos":[0,21],"content":"The object to format.","nodes":[{"content":"The object to format.","pos":[0,21]}]}],"pos":[315611,315633],"yaml":true},{"content":"A copy of <code>format</code> in which any format items are replaced by the string representation of <code>arg0</code>.","nodes":[{"pos":[0,119],"content":"A copy of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">format</ph><ept id=\"p1\">&lt;/code&gt;</ept> in which any format items are replaced by the string representation of <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">arg0</ph><ept id=\"p2\">&lt;/code&gt;</ept>.","source":"A copy of <code>format</code> in which any format items are replaced by the string representation of <code>arg0</code>."}],"pos":[315690,315810],"yaml":true},{"content":"<code>format</code> is `null`.","nodes":[{"pos":[0,30],"content":"<ph id=\"ph1\">&lt;code&gt;format&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>format</code> is `null`."}],"pos":[315960,315991],"yaml":true},{"content":"The format item in <code>format</code> is invalid.  \n  \n -or-  \n  \n The index of a format item is not zero.","nodes":[{"pos":[0,50],"content":"The format item in <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">format</ph><ept id=\"p1\">&lt;/code&gt;</ept> is invalid.","source":"The format item in <code>format</code> is invalid."},{"pos":[57,61],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[68,107],"content":"The index of a format item is not zero.","nodes":[{"content":"The index of a format item is not zero.","pos":[0,39]}]}],"pos":[316081,316195],"yaml":true},{"content":"Replaces the format items in a specified string with the string representations of corresponding objects in a specified array. A parameter supplies culture-specific formatting information.","nodes":[{"pos":[0,188],"content":"Replaces the format items in a specified string with the string representations of corresponding objects in a specified array. A parameter supplies culture-specific formatting information.","nodes":[{"content":"Replaces the format items in a specified string with the string representations of corresponding objects in a specified array. A parameter supplies culture-specific formatting information.","pos":[0,188],"nodes":[{"content":"Replaces the format items in a specified string with the string representations of corresponding objects in a specified array.","pos":[0,126]},{"content":"A parameter supplies culture-specific formatting information.","pos":[127,188]}]}]}],"pos":[317696,317885],"yaml":true},{"content":"> [!NOTE]\n>  For examples and comprehensive usage information about this and other overloads of the `Format` method, see the <xref:System.String.Format%2A> overload summary.","nodes":[{"pos":[2,173],"content":"[!NOTE]\n For examples and comprehensive usage information about this and other overloads of the `Format` method, see the <xref:System.String.Format%2A> overload summary.","leadings":["","> "],"nodes":[{"content":"For examples and comprehensive usage information about this and other overloads of the <ph id=\"ph1\">`Format`</ph> method, see the <ph id=\"ph2\">&lt;xref:System.String.Format%2A&gt;</ph> overload summary.","pos":[9,169],"source":" For examples and comprehensive usage information about this and other overloads of the `Format` method, see the <xref:System.String.Format%2A> overload summary."}]}],"pos":[317896,318082],"yaml":true,"extradata":"MT"},{"content":"An object that supplies culture-specific formatting information.","nodes":[{"pos":[0,64],"content":"An object that supplies culture-specific formatting information.","nodes":[{"content":"An object that supplies culture-specific formatting information.","pos":[0,64]}]}],"pos":[318280,318345],"yaml":true},{"content":"A [composite format string](~/docs/standard/base-types/composite-formatting.md).","nodes":[{"pos":[0,80],"content":"A <bpt id=\"p1\">[</bpt>composite format string<ept id=\"p1\">](~/docs/standard/base-types/composite-formatting.md)</ept>.","source":"A [composite format string](~/docs/standard/base-types/composite-formatting.md)."}],"pos":[318407,318488],"yaml":true},{"content":"An object array that contains zero or more objects to format.","nodes":[{"pos":[0,61],"content":"An object array that contains zero or more objects to format.","nodes":[{"content":"An object array that contains zero or more objects to format.","pos":[0,61]}]}],"pos":[318550,318612],"yaml":true},{"content":"A copy of <code>format</code> in which the format items have been replaced by the string representation of the corresponding objects in <code>args</code>.","nodes":[{"pos":[0,154],"content":"A copy of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">format</ph><ept id=\"p1\">&lt;/code&gt;</ept> in which the format items have been replaced by the string representation of the corresponding objects in <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">args</ph><ept id=\"p2\">&lt;/code&gt;</ept>.","source":"A copy of <code>format</code> in which the format items have been replaced by the string representation of the corresponding objects in <code>args</code>."}],"pos":[318669,318824],"yaml":true},{"content":"<code>format</code> or <code>args</code> is `null`.","nodes":[{"pos":[0,51],"content":"<ph id=\"ph1\">&lt;code&gt;format&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;args&lt;/code&gt;</ph> is <ph id=\"ph3\">`null`</ph>.","source":"<code>format</code> or <code>args</code> is `null`."}],"pos":[318974,319026],"yaml":true},{"content":"<code>format</code> is invalid.  \n  \n -or-  \n  \n The index of a format item is less than zero, or greater than or equal to the length of the <code>args</code> array.","nodes":[{"pos":[0,31],"content":"<ph id=\"ph1\">&lt;code&gt;format&lt;/code&gt;</ph> is invalid.","source":"<code>format</code> is invalid."},{"pos":[38,42],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[49,165],"content":"The index of a format item is less than zero, or greater than or equal to the length of the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">args</ph><ept id=\"p1\">&lt;/code&gt;</ept> array.","source":"The index of a format item is less than zero, or greater than or equal to the length of the <code>args</code> array."}],"pos":[319116,319288],"yaml":true},{"content":"Retrieves an object that can iterate through the individual characters in this string.","nodes":[{"pos":[0,86],"content":"Retrieves an object that can iterate through the individual characters in this string.","nodes":[{"content":"Retrieves an object that can iterate through the individual characters in this string.","pos":[0,86]}]}],"pos":[320690,320777],"yaml":true},{"content":"> [!TIP]\n>  Rather than calling the <xref:System.String.GetEnumerator%2A> method to retrieve a <xref:System.CharEnumerator> object that you then use to enumerate a string, you should instead use your language's iteration construct ( in C#,  in C++/CLR, and  in Visual Basic).                   [foreach](~/docs/csharp/language-reference/keywords/foreach-in.md) in C#,                  [for each](http://msdn.microsoft.com/library/0c3a364b-2747-43f3-bb8d-b7d3b7023f79) in C++/CLR, and                  [For Each](~/docs/visual-basic/language-reference/statements/for-each-next-statement.md) in Visual Basic).  \n  \n This method enables you to iterate the individual characters in a string. For example, the Visual Basic `For Each` and C# `foreach` statements invoke this method to return a <xref:System.CharEnumerator> object that can provide read-only access to the characters in this string instance.","nodes":[{"pos":[2,607],"content":"[!TIP]\n Rather than calling the <xref:System.String.GetEnumerator%2A> method to retrieve a <xref:System.CharEnumerator> object that you then use to enumerate a string, you should instead use your language's iteration construct ( in C#,  in C++/CLR, and  in Visual Basic).                   [foreach](~/docs/csharp/language-reference/keywords/foreach-in.md) in C#,                  [for each](http://msdn.microsoft.com/library/0c3a364b-2747-43f3-bb8d-b7d3b7023f79) in C++/CLR, and                  [For Each](~/docs/visual-basic/language-reference/statements/for-each-next-statement.md) in Visual Basic).","leadings":["","> "],"nodes":[{"content":" Rather than calling the <xref:System.String.GetEnumerator%2A> method to retrieve a <xref:System.CharEnumerator> object that you then use to enumerate a string, you should instead use your language's iteration construct ( in C#,  in C++/CLR, and  in Visual Basic).                   [foreach](~/docs/csharp/language-reference/keywords/foreach-in.md) in C#,                  [for each](http://msdn.microsoft.com/library/0c3a364b-2747-43f3-bb8d-b7d3b7023f79) in C++/CLR, and                  [For Each](~/docs/visual-basic/language-reference/statements/for-each-next-statement.md) in Visual Basic).","pos":[7,603],"nodes":[{"content":"Rather than calling the <ph id=\"ph1\">&lt;xref:System.String.GetEnumerator%2A&gt;</ph> method to retrieve a <ph id=\"ph2\">&lt;xref:System.CharEnumerator&gt;</ph> object that you then use to enumerate a string, you should instead use your language's iteration construct ( in C#,  in C++/CLR, and  in Visual Basic).","pos":[1,264],"source":" Rather than calling the <xref:System.String.GetEnumerator%2A> method to retrieve a <xref:System.CharEnumerator> object that you then use to enumerate a string, you should instead use your language's iteration construct ( in C#,  in C++/CLR, and  in Visual Basic)."},{"content":"<bpt id=\"p1\">[</bpt>foreach<ept id=\"p1\">](~/docs/csharp/language-reference/keywords/foreach-in.md)</ept> in C#,                  <bpt id=\"p2\">[</bpt>for each<ept id=\"p2\">](http://msdn.microsoft.com/library/0c3a364b-2747-43f3-bb8d-b7d3b7023f79)</ept> in C++/CLR, and                  <bpt id=\"p3\">[</bpt>For Each<ept id=\"p3\">](~/docs/visual-basic/language-reference/statements/for-each-next-statement.md)</ept> in Visual Basic).","pos":[283,596],"source":"[foreach](~/docs/csharp/language-reference/keywords/foreach-in.md) in C#,                  [for each](http://msdn.microsoft.com/library/0c3a364b-2747-43f3-bb8d-b7d3b7023f79) in C++/CLR, and                  [For Each](~/docs/visual-basic/language-reference/statements/for-each-next-statement.md) in Visual Basic)."}]}]},{"pos":[614,900],"content":"This method enables you to iterate the individual characters in a string. For example, the Visual Basic `For Each` and C# `foreach` statements invoke this method to return a <xref:System.CharEnumerator> object that can provide read-only access to the characters in this string instance.","nodes":[{"content":"This method enables you to iterate the individual characters in a string.","pos":[0,73]},{"content":"For example, the Visual Basic <ph id=\"ph1\">`For Each`</ph> and C# <ph id=\"ph2\">`foreach`</ph> statements invoke this method to return a <ph id=\"ph3\">&lt;xref:System.CharEnumerator&gt;</ph> object that can provide read-only access to the characters in this string instance.","pos":[74,286],"source":" For example, the Visual Basic `For Each` and C# `foreach` statements invoke this method to return a <xref:System.CharEnumerator> object that can provide read-only access to the characters in this string instance."}]}],"pos":[320788,321694],"yaml":true,"extradata":"MT"},{"content":"An enumerator object.","nodes":[{"pos":[0,21],"content":"An enumerator object.","nodes":[{"content":"An enumerator object.","pos":[0,21]}]}],"pos":[322543,322565],"yaml":true},{"content":"Returns the hash code for this string.","nodes":[{"pos":[0,38],"content":"Returns the hash code for this string.","nodes":[{"content":"Returns the hash code for this string.","pos":[0,38]}]}],"pos":[323669,323708],"yaml":true},{"content":"The behavior of <xref:System.String.GetHashCode%2A> is dependent on its implementation, which might change from one version of the common language runtime to another. A reason why this might happen is to improve the performance of <xref:System.String.GetHashCode%2A>.  \n  \n> [!IMPORTANT]\n>  If two string objects are equal, the <xref:System.String.GetHashCode%2A> method returns identical values. However, there is not a unique hash code value for each unique string value. Different strings can return the same hash code.  \n>   \n>  The hash code itself is not guaranteed to be stable. Hash codes for identical strings can differ across versions of the .NET Framework and across platforms (such as 32-bit and 64-bit) for a single version of the .NET Framework. In some cases, they can even differ by application domain. This implies two subsequent runs of the same program may return different hash codes.  \n>   \n>  As a result, hash codes should never be used outside of the application domain in which they were created, they should never be used as key fields in a collection, and they should never be persisted.  \n>   \n>  Finally, do not use the hash code instead of a value returned by a cryptographic hashing function if you need a cryptographically strong hash. For cryptographic hashes, use a class derived from the <xref:System.Security.Cryptography.HashAlgorithm?displayProperty=fullName> or <xref:System.Security.Cryptography.KeyedHashAlgorithm?displayProperty=fullName> class.  \n>   \n>  For more information about hash codes, see <xref:System.Object.GetHashCode%2A?displayProperty=fullName>.  \n  \n In desktop apps, you can use the             [\\<UseRandomizedStringHashAlgorithm> element](~/docs/framework/configure-apps/file-schema/runtime/userandomizedstringhashalgorithm-element.md) to generate unique hash codes on a per application domain basis. This can reduce the number of collisions and improve the overall performance of insertions and lookups that use hash tables. The following example shows how to use the                [\\<UseRandomizedStringHashAlgorithm> element](~/docs/framework/configure-apps/file-schema/runtime/userandomizedstringhashalgorithm-element.md). It defines a  to generate unique hash codes on a per application domain basis. This can reduce the number of collisions and improve the overall performance of insertions and lookups that use hash tables. The following example shows how to use the . It defines a `DisplayString` class that includes a private string constant, `s`, whose value is \"This is a string.\" It also includes a `ShowStringHashCode` method that displays the string value and its hash code along with the name of the application domain in which the method is executing.  \n  \n [!code-csharp[System.String.GetHashCode#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.GetHashCode/CS/perdomain.cs#2)]\n [!code-vb[System.String.GetHashCode#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.GetHashCode/VB/perdomain.vb#2)]  \n  \n When you run the example without supplying a configuration file, it displays output similar to the following. Note that the hash codes for the string are identical in the two application domains.  \n  \n```  \n  \nString 'This is a string.' in domain 'PerDomain.exe': 941BCEAC  \nString 'This is a string.' in domain 'NewDomain': 941BCEAC  \n  \n```  \n  \n However, if you add the following configuration file to the example's directory and then run the example, the hash codes for the same string will differ by application domain.  \n  \n```  \n  \n<?xml version =\"1.0\"?>  \n<configuration>  \n   <runtime>  \n      <UseRandomizedStringHashAlgorithm enabled=\"1\" />  \n   </runtime>  \n</configuration>  \n  \n```  \n  \n When the configuration file is present, the example displays the following output:  \n  \n```  \n  \nString 'This is a string.' in domain 'PerDomain.exe': 5435776D  \nString 'This is a string.' in domain 'NewDomain': 75CC8236  \n  \n```  \n  \n> [!IMPORTANT]\n>  Hash codes are used to insert and retrieve keyed objects from hash tables efficiently. However, hash codes do not uniquely identify strings. Identical strings have  equal hash codes, but the common language runtime can also assign the same hash code to different strings. In addition, hash codes can vary by version of the .NET Framework, by platform within a single version, and by application domain. Because of this, you should not serialize or persist hash code values, nor should you use them as keys in a hash table or dictionary.  \n  \n For additional information about the use of hash codes and the `GetHashCode` method, see <xref:System.Object.GetHashCode%2A?displayProperty=fullName>.","nodes":[{"pos":[0,267],"content":"The behavior of <xref:System.String.GetHashCode%2A> is dependent on its implementation, which might change from one version of the common language runtime to another. A reason why this might happen is to improve the performance of <xref:System.String.GetHashCode%2A>.","nodes":[{"content":"The behavior of <xref:System.String.GetHashCode%2A> is dependent on its implementation, which might change from one version of the common language runtime to another. A reason why this might happen is to improve the performance of <xref:System.String.GetHashCode%2A>.","pos":[0,267],"nodes":[{"content":"The behavior of <ph id=\"ph1\">&lt;xref:System.String.GetHashCode%2A&gt;</ph> is dependent on its implementation, which might change from one version of the common language runtime to another.","pos":[0,166],"source":"The behavior of <xref:System.String.GetHashCode%2A> is dependent on its implementation, which might change from one version of the common language runtime to another."},{"content":"A reason why this might happen is to improve the performance of <ph id=\"ph1\">&lt;xref:System.String.GetHashCode%2A&gt;</ph>.","pos":[167,267],"source":" A reason why this might happen is to improve the performance of <xref:System.String.GetHashCode%2A>."}]}]},{"pos":[275,522],"content":"[!IMPORTANT]\n If two string objects are equal, the <xref:System.String.GetHashCode%2A> method returns identical values. However, there is not a unique hash code value for each unique string value. Different strings can return the same hash code.","leadings":["","> "],"nodes":[{"content":" If two string objects are equal, the <xref:System.String.GetHashCode%2A> method returns identical values. However, there is not a unique hash code value for each unique string value. Different strings can return the same hash code.","pos":[13,245],"nodes":[{"content":"If two string objects are equal, the <ph id=\"ph1\">&lt;xref:System.String.GetHashCode%2A&gt;</ph> method returns identical values.","pos":[1,106],"source":" If two string objects are equal, the <xref:System.String.GetHashCode%2A> method returns identical values."},{"content":"However, there is not a unique hash code value for each unique string value.","pos":[107,183]},{"content":"Different strings can return the same hash code.","pos":[184,232]}]}]},{"pos":[533,905],"content":"The hash code itself is not guaranteed to be stable. Hash codes for identical strings can differ across versions of the .NET Framework and across platforms (such as 32-bit and 64-bit) for a single version of the .NET Framework. In some cases, they can even differ by application domain. This implies two subsequent runs of the same program may return different hash codes.","nodes":[{"content":"The hash code itself is not guaranteed to be stable. Hash codes for identical strings can differ across versions of the .NET Framework and across platforms (such as 32-bit and 64-bit) for a single version of the .NET Framework. In some cases, they can even differ by application domain. This implies two subsequent runs of the same program may return different hash codes.","pos":[0,372],"nodes":[{"content":"The hash code itself is not guaranteed to be stable.","pos":[0,52]},{"content":"Hash codes for identical strings can differ across versions of the .NET Framework and across platforms (such as 32-bit and 64-bit) for a single version of the .NET Framework.","pos":[53,227]},{"content":"In some cases, they can even differ by application domain.","pos":[228,286]},{"content":"This implies two subsequent runs of the same program may return different hash codes.","pos":[287,372]}]}]},{"pos":[916,1115],"content":"As a result, hash codes should never be used outside of the application domain in which they were created, they should never be used as key fields in a collection, and they should never be persisted.","nodes":[{"content":"As a result, hash codes should never be used outside of the application domain in which they were created, they should never be used as key fields in a collection, and they should never be persisted.","pos":[0,199]}]},{"pos":[1126,1488],"content":"Finally, do not use the hash code instead of a value returned by a cryptographic hashing function if you need a cryptographically strong hash. For cryptographic hashes, use a class derived from the <xref:System.Security.Cryptography.HashAlgorithm?displayProperty=fullName> or <xref:System.Security.Cryptography.KeyedHashAlgorithm?displayProperty=fullName> class.","nodes":[{"content":"Finally, do not use the hash code instead of a value returned by a cryptographic hashing function if you need a cryptographically strong hash. For cryptographic hashes, use a class derived from the <xref:System.Security.Cryptography.HashAlgorithm?displayProperty=fullName> or <xref:System.Security.Cryptography.KeyedHashAlgorithm?displayProperty=fullName> class.","pos":[0,362],"nodes":[{"content":"Finally, do not use the hash code instead of a value returned by a cryptographic hashing function if you need a cryptographically strong hash.","pos":[0,142]},{"content":"For cryptographic hashes, use a class derived from the <ph id=\"ph1\">&lt;xref:System.Security.Cryptography.HashAlgorithm?displayProperty=fullName&gt;</ph> or <ph id=\"ph2\">&lt;xref:System.Security.Cryptography.KeyedHashAlgorithm?displayProperty=fullName&gt;</ph> class.","pos":[143,362],"source":" For cryptographic hashes, use a class derived from the <xref:System.Security.Cryptography.HashAlgorithm?displayProperty=fullName> or <xref:System.Security.Cryptography.KeyedHashAlgorithm?displayProperty=fullName> class."}]}]},{"pos":[1499,1603],"content":"For more information about hash codes, see <xref:System.Object.GetHashCode%2A?displayProperty=fullName>.","nodes":[{"content":"For more information about hash codes, see <ph id=\"ph1\">&lt;xref:System.Object.GetHashCode%2A?displayProperty=fullName&gt;</ph>.","pos":[0,104],"source":"For more information about hash codes, see <xref:System.Object.GetHashCode%2A?displayProperty=fullName>."}]},{"pos":[1610,2730],"content":"In desktop apps, you can use the             [\\<UseRandomizedStringHashAlgorithm> element](~/docs/framework/configure-apps/file-schema/runtime/userandomizedstringhashalgorithm-element.md) to generate unique hash codes on a per application domain basis. This can reduce the number of collisions and improve the overall performance of insertions and lookups that use hash tables. The following example shows how to use the                [\\<UseRandomizedStringHashAlgorithm> element](~/docs/framework/configure-apps/file-schema/runtime/userandomizedstringhashalgorithm-element.md). It defines a  to generate unique hash codes on a per application domain basis. This can reduce the number of collisions and improve the overall performance of insertions and lookups that use hash tables. The following example shows how to use the . It defines a `DisplayString` class that includes a private string constant, `s`, whose value is \"This is a string.\" It also includes a `ShowStringHashCode` method that displays the string value and its hash code along with the name of the application domain in which the method is executing.","nodes":[{"content":"In desktop apps, you can use the             <bpt id=\"p1\">[</bpt><ph id=\"ph1\">\\&lt;</ph>UseRandomizedStringHashAlgorithm&gt; element<ept id=\"p1\">](~/docs/framework/configure-apps/file-schema/runtime/userandomizedstringhashalgorithm-element.md)</ept> to generate unique hash codes on a per application domain basis.","pos":[0,252],"source":"In desktop apps, you can use the             [\\<UseRandomizedStringHashAlgorithm> element](~/docs/framework/configure-apps/file-schema/runtime/userandomizedstringhashalgorithm-element.md) to generate unique hash codes on a per application domain basis."},{"content":"This can reduce the number of collisions and improve the overall performance of insertions and lookups that use hash tables.","pos":[253,377]},{"content":"The following example shows how to use the                <bpt id=\"p1\">[</bpt><ph id=\"ph1\">\\&lt;</ph>UseRandomizedStringHashAlgorithm&gt; element<ept id=\"p1\">](~/docs/framework/configure-apps/file-schema/runtime/userandomizedstringhashalgorithm-element.md)</ept>.","pos":[378,579],"source":" The following example shows how to use the                [\\<UseRandomizedStringHashAlgorithm> element](~/docs/framework/configure-apps/file-schema/runtime/userandomizedstringhashalgorithm-element.md)."},{"content":"It defines a  to generate unique hash codes on a per application domain basis.","pos":[580,658]},{"content":"This can reduce the number of collisions and improve the overall performance of insertions and lookups that use hash tables.","pos":[659,783]},{"content":"The following example shows how to use the .","pos":[784,828]},{"content":"It defines a <ph id=\"ph1\">`DisplayString`</ph> class that includes a private string constant, <ph id=\"ph2\">`s`</ph>, whose value is \"This is a string.\"","pos":[829,944],"source":" It defines a `DisplayString` class that includes a private string constant, `s`, whose value is \"This is a string.\""},{"content":"It also includes a <ph id=\"ph1\">`ShowStringHashCode`</ph> method that displays the string value and its hash code along with the name of the application domain in which the method is executing.","pos":[945,1120],"source":" It also includes a `ShowStringHashCode` method that displays the string value and its hash code along with the name of the application domain in which the method is executing."}]},{"pos":[2737,3014],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>System.String.GetHashCode#2<ept id=\"p2\">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.GetHashCode/CS/perdomain.cs#2)</ept><ept id=\"p1\">]</ept> <bpt id=\"p3\">[!code-vb</bpt><bpt id=\"p4\">[</bpt>System.String.GetHashCode#2<ept id=\"p4\">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.GetHashCode/VB/perdomain.vb#2)</ept><ept id=\"p3\">]</ept>","source":"[!code-csharp[System.String.GetHashCode#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.GetHashCode/CS/perdomain.cs#2)]\n [!code-vb[System.String.GetHashCode#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.GetHashCode/VB/perdomain.vb#2)]"},{"pos":[3021,3216],"content":"When you run the example without supplying a configuration file, it displays output similar to the following. Note that the hash codes for the string are identical in the two application domains.","nodes":[{"content":"When you run the example without supplying a configuration file, it displays output similar to the following. Note that the hash codes for the string are identical in the two application domains.","pos":[0,195],"nodes":[{"content":"When you run the example without supplying a configuration file, it displays output similar to the following.","pos":[0,109]},{"content":"Note that the hash codes for the string are identical in the two application domains.","pos":[110,195]}]}]},{"pos":[3370,3545],"content":"However, if you add the following configuration file to the example's directory and then run the example, the hash codes for the same string will differ by application domain.","nodes":[{"content":"However, if you add the following configuration file to the example's directory and then run the example, the hash codes for the same string will differ by application domain.","pos":[0,175]}]},{"pos":[3723,3805],"content":"When the configuration file is present, the example displays the following output:","nodes":[{"content":"When the configuration file is present, the example displays the following output:","pos":[0,82]}]},{"pos":[3960,4512],"content":"[!IMPORTANT]\n Hash codes are used to insert and retrieve keyed objects from hash tables efficiently. However, hash codes do not uniquely identify strings. Identical strings have  equal hash codes, but the common language runtime can also assign the same hash code to different strings. In addition, hash codes can vary by version of the .NET Framework, by platform within a single version, and by application domain. Because of this, you should not serialize or persist hash code values, nor should you use them as keys in a hash table or dictionary.","leadings":["","> "],"nodes":[{"content":" Hash codes are used to insert and retrieve keyed objects from hash tables efficiently. However, hash codes do not uniquely identify strings. Identical strings have  equal hash codes, but the common language runtime can also assign the same hash code to different strings. In addition, hash codes can vary by version of the .NET Framework, by platform within a single version, and by application domain. Because of this, you should not serialize or persist hash code values, nor should you use them as keys in a hash table or dictionary.","pos":[13,550],"nodes":[{"content":"Hash codes are used to insert and retrieve keyed objects from hash tables efficiently.","pos":[1,87]},{"content":"However, hash codes do not uniquely identify strings.","pos":[88,141]},{"content":"Identical strings have  equal hash codes, but the common language runtime can also assign the same hash code to different strings.","pos":[142,272]},{"content":"In addition, hash codes can vary by version of the .NET Framework, by platform within a single version, and by application domain.","pos":[273,403]},{"content":"Because of this, you should not serialize or persist hash code values, nor should you use them as keys in a hash table or dictionary.","pos":[404,537]}]}]},{"pos":[4519,4669],"content":"For additional information about the use of hash codes and the <ph id=\"ph1\">`GetHashCode`</ph> method, see <ph id=\"ph2\">&lt;xref:System.Object.GetHashCode%2A?displayProperty=fullName&gt;</ph>.","source":"For additional information about the use of hash codes and the `GetHashCode` method, see <xref:System.Object.GetHashCode%2A?displayProperty=fullName>."}],"pos":[323719,328451],"yaml":true,"extradata":"MT"},{"content":"A 32-bit signed integer hash code.","nodes":[{"pos":[0,34],"content":"A 32-bit signed integer hash code.","nodes":[{"content":"A 32-bit signed integer hash code.","pos":[0,34]}]}],"pos":[329142,329177],"yaml":true},{"content":"Returns the <xref href=\"System.TypeCode\"></xref> for class <xref href=\"System.String\"></xref>.","nodes":[{"pos":[0,94],"content":"Returns the <ph id=\"ph1\">&lt;xref href=\"System.TypeCode\"&gt;&lt;/xref&gt;</ph> for class <ph id=\"ph2\">&lt;xref href=\"System.String\"&gt;&lt;/xref&gt;</ph>.","source":"Returns the <xref href=\"System.TypeCode\"></xref> for class <xref href=\"System.String\"></xref>."}],"pos":[331493,331588],"yaml":true},{"content":"The enumerated constant, <xref href=\"System.TypeCode.String\"></xref>.","nodes":[{"pos":[0,69],"content":"The enumerated constant, <ph id=\"ph1\">&lt;xref href=\"System.TypeCode.String\"&gt;&lt;/xref&gt;</ph>.","source":"The enumerated constant, <xref href=\"System.TypeCode.String\"></xref>."}],"pos":[332207,332277],"yaml":true},{"content":"Reports the zero-based index of the first occurrence of the specified string in this instance. The search starts at a specified character position and examines a specified number of character positions.","nodes":[{"pos":[0,202],"content":"Reports the zero-based index of the first occurrence of the specified string in this instance. The search starts at a specified character position and examines a specified number of character positions.","nodes":[{"content":"Reports the zero-based index of the first occurrence of the specified string in this instance. The search starts at a specified character position and examines a specified number of character positions.","pos":[0,202],"nodes":[{"content":"Reports the zero-based index of the first occurrence of the specified string in this instance.","pos":[0,94]},{"content":"The search starts at a specified character position and examines a specified number of character positions.","pos":[95,202]}]}]}],"pos":[333538,333741],"yaml":true},{"content":"Index numbering starts from 0 (zero). The `startIndex` parameter can range from 0 to the length of the string instance.  \n  \n This method performs a word (case-sensitive and culture-sensitive) search using the current culture. The search begins at `startIndex` and continues to `startIndex` + `count` -1. The character at `startIndex` + `count` is not included in the search.  \n  \n Character sets include ignorable characters, which are characters that are not considered when performing a linguistic or culture-sensitive comparison. In a culture-sensitive search, if `value` contains an ignorable character, the result is equivalent to searching with that character removed. If `value` consists only of one or more ignorable characters, the <xref:System.String.IndexOf%28System.String%2CSystem.Int32%2CSystem.Int32%29> method always returns `startIndex`, which is the character position at which the search begins. In the following example, the <xref:System.String.IndexOf%28System.String%2CSystem.Int32%2CSystem.Int32%29> method is used to find the position of a soft hyphen (U+00AD) followed by an \"m\" starting in the third through sixth character positions in two strings. Only one of the strings contains the required substring. If the example is run on the [!INCLUDE[netfx40_short](~/includes/netfx40-short-md.md)] or later, in both cases, because the soft hyphen is an ignorable character, the method returns the index of \"m\" in the string when it performs a culture-sensitive comparison. Note that in the case of the first string, which includes the soft hyphen followed by an \"m\", the method fails to return the index of the soft hyphen but instead returns the index of the \"m\".  \n  \n [!code-csharp[System.String.IndexOf#23](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.IndexOf/CS/ignorable23.cs#23)]\n [!code-vb[System.String.IndexOf#23](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.IndexOf/VB/ignorable23.vb#23)]","nodes":[{"pos":[0,119],"content":"Index numbering starts from 0 (zero). The `startIndex` parameter can range from 0 to the length of the string instance.","nodes":[{"content":"Index numbering starts from 0 (zero).","pos":[0,37]},{"content":"The <ph id=\"ph1\">`startIndex`</ph> parameter can range from 0 to the length of the string instance.","pos":[38,119],"source":" The `startIndex` parameter can range from 0 to the length of the string instance."}]},{"pos":[126,375],"content":"This method performs a word (case-sensitive and culture-sensitive) search using the current culture. The search begins at `startIndex` and continues to `startIndex` + `count` -1. The character at `startIndex` + `count` is not included in the search.","nodes":[{"content":"This method performs a word (case-sensitive and culture-sensitive) search using the current culture.","pos":[0,100]},{"content":"The search begins at <ph id=\"ph1\">`startIndex`</ph> and continues to <ph id=\"ph2\">`startIndex`</ph><ph id=\"ph3\"> + </ph><ph id=\"ph4\">`count`</ph> -1.","pos":[101,178],"source":" The search begins at `startIndex` and continues to `startIndex` + `count` -1."},{"content":"The character at <ph id=\"ph1\">`startIndex`</ph><ph id=\"ph2\"> + </ph><ph id=\"ph3\">`count`</ph> is not included in the search.","pos":[179,249],"source":" The character at `startIndex` + `count` is not included in the search."}]},{"pos":[382,1687],"content":"Character sets include ignorable characters, which are characters that are not considered when performing a linguistic or culture-sensitive comparison. In a culture-sensitive search, if `value` contains an ignorable character, the result is equivalent to searching with that character removed. If `value` consists only of one or more ignorable characters, the <xref:System.String.IndexOf%28System.String%2CSystem.Int32%2CSystem.Int32%29> method always returns `startIndex`, which is the character position at which the search begins. In the following example, the <xref:System.String.IndexOf%28System.String%2CSystem.Int32%2CSystem.Int32%29> method is used to find the position of a soft hyphen (U+00AD) followed by an \"m\" starting in the third through sixth character positions in two strings. Only one of the strings contains the required substring. If the example is run on the [!INCLUDE[netfx40_short](~/includes/netfx40-short-md.md)] or later, in both cases, because the soft hyphen is an ignorable character, the method returns the index of \"m\" in the string when it performs a culture-sensitive comparison. Note that in the case of the first string, which includes the soft hyphen followed by an \"m\", the method fails to return the index of the soft hyphen but instead returns the index of the \"m\".","nodes":[{"content":"Character sets include ignorable characters, which are characters that are not considered when performing a linguistic or culture-sensitive comparison.","pos":[0,151]},{"content":"In a culture-sensitive search, if <ph id=\"ph1\">`value`</ph> contains an ignorable character, the result is equivalent to searching with that character removed.","pos":[152,293],"source":" In a culture-sensitive search, if `value` contains an ignorable character, the result is equivalent to searching with that character removed."},{"content":"If <ph id=\"ph1\">`value`</ph> consists only of one or more ignorable characters, the <ph id=\"ph2\">&lt;xref:System.String.IndexOf%28System.String%2CSystem.Int32%2CSystem.Int32%29&gt;</ph> method always returns <ph id=\"ph3\">`startIndex`</ph>, which is the character position at which the search begins.","pos":[294,533],"source":" If `value` consists only of one or more ignorable characters, the <xref:System.String.IndexOf%28System.String%2CSystem.Int32%2CSystem.Int32%29> method always returns `startIndex`, which is the character position at which the search begins."},{"content":"In the following example, the <ph id=\"ph1\">&lt;xref:System.String.IndexOf%28System.String%2CSystem.Int32%2CSystem.Int32%29&gt;</ph> method is used to find the position of a soft hyphen (U+00AD) followed by an \"m\" starting in the third through sixth character positions in two strings.","pos":[534,794],"source":" In the following example, the <xref:System.String.IndexOf%28System.String%2CSystem.Int32%2CSystem.Int32%29> method is used to find the position of a soft hyphen (U+00AD) followed by an \"m\" starting in the third through sixth character positions in two strings."},{"content":"Only one of the strings contains the required substring.","pos":[795,851]},{"content":"If the example is run on the <ph id=\"ph1\">[!INCLUDE[netfx40_short](~/includes/netfx40-short-md.md)]</ph> or later, in both cases, because the soft hyphen is an ignorable character, the method returns the index of \"m\" in the string when it performs a culture-sensitive comparison.","pos":[852,1113],"source":" If the example is run on the [!INCLUDE[netfx40_short](~/includes/netfx40-short-md.md)] or later, in both cases, because the soft hyphen is an ignorable character, the method returns the index of \"m\" in the string when it performs a culture-sensitive comparison."},{"content":"Note that in the case of the first string, which includes the soft hyphen followed by an \"m\", the method fails to return the index of the soft hyphen but instead returns the index of the \"m\".","pos":[1114,1305]}]},{"pos":[1694,1963],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>System.String.IndexOf#23<ept id=\"p2\">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.IndexOf/CS/ignorable23.cs#23)</ept><ept id=\"p1\">]</ept> <bpt id=\"p3\">[!code-vb</bpt><bpt id=\"p4\">[</bpt>System.String.IndexOf#23<ept id=\"p4\">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.IndexOf/VB/ignorable23.vb#23)</ept><ept id=\"p3\">]</ept>","source":"[!code-csharp[System.String.IndexOf#23](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.IndexOf/CS/ignorable23.cs#23)]\n [!code-vb[System.String.IndexOf#23](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.IndexOf/VB/ignorable23.vb#23)]"}],"pos":[333752,335733],"yaml":true,"extradata":"MT"},{"content":"The string to seek.","nodes":[{"pos":[0,19],"content":"The string to seek.","nodes":[{"content":"The string to seek.","pos":[0,19]}]}],"pos":[336456,336476],"yaml":true},{"content":"The search starting position.","nodes":[{"pos":[0,29],"content":"The search starting position.","nodes":[{"content":"The search starting position.","pos":[0,29]}]}],"pos":[336541,336571],"yaml":true},{"content":"The number of character positions to examine.","nodes":[{"pos":[0,45],"content":"The number of character positions to examine.","nodes":[{"content":"The number of character positions to examine.","pos":[0,45]}]}],"pos":[336631,336677],"yaml":true},{"content":"The zero-based index position of <code>value</code> from the start of the current instance if that string is found, or -1 if it is not. If <code>value</code> is <xref href=\"System.String.Empty\"></xref>, the return value is <code>startIndex</code>.","nodes":[{"pos":[0,247],"content":"The zero-based index position of <code>value</code> from the start of the current instance if that string is found, or -1 if it is not. If <code>value</code> is <xref href=\"System.String.Empty\"></xref>, the return value is <code>startIndex</code>.","nodes":[{"content":"The zero-based index position of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept> from the start of the current instance if that string is found, or -1 if it is not.","pos":[0,135],"source":"The zero-based index position of <code>value</code> from the start of the current instance if that string is found, or -1 if it is not."},{"content":"If <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept> is <ph id=\"ph2\">&lt;xref href=\"System.String.Empty\"&gt;&lt;/xref&gt;</ph>, the return value is <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph3\">startIndex</ph><ept id=\"p2\">&lt;/code&gt;</ept>.","pos":[136,247],"source":" If <code>value</code> is <xref href=\"System.String.Empty\"></xref>, the return value is <code>startIndex</code>."}]}],"pos":[336733,336981],"yaml":true},{"content":"<code>value</code> is `null`.","nodes":[{"pos":[0,29],"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>value</code> is `null`."}],"pos":[337132,337162],"yaml":true},{"content":"<code>count</code> or <code>startIndex</code> is negative.  \n  \n -or-  \n  \n <code>startIndex</code> is greater than the length of this string.  \n  \n -or-  \n  \n <code>count</code> is greater than the length of this string minus <code>startIndex</code>.","nodes":[{"pos":[0,58],"content":"<ph id=\"ph1\">&lt;code&gt;count&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;startIndex&lt;/code&gt;</ph> is negative.","source":"<code>count</code> or <code>startIndex</code> is negative."},{"pos":[65,69],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[76,142],"content":"<ph id=\"ph1\">&lt;code&gt;startIndex&lt;/code&gt;</ph> is greater than the length of this string.","source":"<code>startIndex</code> is greater than the length of this string."},{"pos":[149,153],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[160,251],"content":"<ph id=\"ph1\">&lt;code&gt;count&lt;/code&gt;</ph> is greater than the length of this string minus <ph id=\"ph2\">&lt;code&gt;startIndex&lt;/code&gt;</ph>.","source":"<code>count</code> is greater than the length of this string minus <code>startIndex</code>."}],"pos":[337276,337538],"yaml":true},{"content":"Reports the zero-based index of the first occurrence of the specified string in the current <xref href=\"System.String\"></xref> object. Parameters specify the starting search position in the current string, the number of characters in the current string to search, and the type of search to use for the specified string.","nodes":[{"pos":[0,319],"content":"Reports the zero-based index of the first occurrence of the specified string in the current <xref href=\"System.String\"></xref> object. Parameters specify the starting search position in the current string, the number of characters in the current string to search, and the type of search to use for the specified string.","nodes":[{"content":"Reports the zero-based index of the first occurrence of the specified string in the current <ph id=\"ph1\">&lt;xref href=\"System.String\"&gt;&lt;/xref&gt;</ph> object.","pos":[0,134],"source":"Reports the zero-based index of the first occurrence of the specified string in the current <xref href=\"System.String\"></xref> object."},{"content":"Parameters specify the starting search position in the current string, the number of characters in the current string to search, and the type of search to use for the specified string.","pos":[135,319]}]}],"pos":[339213,339533],"yaml":true},{"content":"Index numbering starts from 0 (zero). The `startIndex` parameter can range from 0 to the length of the string instance.  \n  \n The search begins at `startIndex` and continues to `startIndex` + `count` -1. The character at `startIndex` + `count` is not included in the search.  \n  \n The `comparisonType` parameter specifies to search for the `value` parameter using the current or invariant culture, using a case-sensitive or case-insensitive search, and using word or ordinal comparison rules.","nodes":[{"pos":[0,119],"content":"Index numbering starts from 0 (zero). The `startIndex` parameter can range from 0 to the length of the string instance.","nodes":[{"content":"Index numbering starts from 0 (zero).","pos":[0,37]},{"content":"The <ph id=\"ph1\">`startIndex`</ph> parameter can range from 0 to the length of the string instance.","pos":[38,119],"source":" The `startIndex` parameter can range from 0 to the length of the string instance."}]},{"pos":[126,274],"content":"The search begins at `startIndex` and continues to `startIndex` + `count` -1. The character at `startIndex` + `count` is not included in the search.","nodes":[{"content":"The search begins at <ph id=\"ph1\">`startIndex`</ph> and continues to <ph id=\"ph2\">`startIndex`</ph><ph id=\"ph3\"> + </ph><ph id=\"ph4\">`count`</ph> -1.","pos":[0,77],"source":"The search begins at `startIndex` and continues to `startIndex` + `count` -1."},{"content":"The character at <ph id=\"ph1\">`startIndex`</ph><ph id=\"ph2\"> + </ph><ph id=\"ph3\">`count`</ph> is not included in the search.","pos":[78,148],"source":" The character at `startIndex` + `count` is not included in the search."}]},{"pos":[281,492],"content":"The <ph id=\"ph1\">`comparisonType`</ph> parameter specifies to search for the <ph id=\"ph2\">`value`</ph> parameter using the current or invariant culture, using a case-sensitive or case-insensitive search, and using word or ordinal comparison rules.","source":"The `comparisonType` parameter specifies to search for the `value` parameter using the current or invariant culture, using a case-sensitive or case-insensitive search, and using word or ordinal comparison rules."}],"pos":[339544,340043],"yaml":true,"extradata":"MT"},{"content":"The string to seek.","nodes":[{"pos":[0,19],"content":"The string to seek.","nodes":[{"content":"The string to seek.","pos":[0,19]}]}],"pos":[340765,340785],"yaml":true},{"content":"The search starting position.","nodes":[{"pos":[0,29],"content":"The search starting position.","nodes":[{"content":"The search starting position.","pos":[0,29]}]}],"pos":[340850,340880],"yaml":true},{"content":"The number of character positions to examine.","nodes":[{"pos":[0,45],"content":"The number of character positions to examine.","nodes":[{"content":"The number of character positions to examine.","pos":[0,45]}]}],"pos":[340940,340986],"yaml":true},{"content":"One of the enumeration values that specifies the rules for the search.","nodes":[{"pos":[0,70],"content":"One of the enumeration values that specifies the rules for the search.","nodes":[{"content":"One of the enumeration values that specifies the rules for the search.","pos":[0,70]}]}],"pos":[341066,341137],"yaml":true},{"content":"The zero-based index position of the <code>value</code> parameter from the start of the current instance if that string is found, or -1 if it is not. If <code>value</code> is <xref href=\"System.String.Empty\"></xref>, the return value is <code>startIndex</code>.","nodes":[{"pos":[0,261],"content":"The zero-based index position of the <code>value</code> parameter from the start of the current instance if that string is found, or -1 if it is not. If <code>value</code> is <xref href=\"System.String.Empty\"></xref>, the return value is <code>startIndex</code>.","nodes":[{"content":"The zero-based index position of the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter from the start of the current instance if that string is found, or -1 if it is not.","pos":[0,149],"source":"The zero-based index position of the <code>value</code> parameter from the start of the current instance if that string is found, or -1 if it is not."},{"content":"If <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept> is <ph id=\"ph2\">&lt;xref href=\"System.String.Empty\"&gt;&lt;/xref&gt;</ph>, the return value is <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph3\">startIndex</ph><ept id=\"p2\">&lt;/code&gt;</ept>.","pos":[150,261],"source":" If <code>value</code> is <xref href=\"System.String.Empty\"></xref>, the return value is <code>startIndex</code>."}]}],"pos":[341193,341455],"yaml":true},{"content":"<code>value</code> is `null`.","nodes":[{"pos":[0,29],"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>value</code> is `null`."}],"pos":[341606,341636],"yaml":true},{"content":"<code>count</code> or <code>startIndex</code> is negative.  \n  \n -or-  \n  \n <code>startIndex</code> is greater than the length of this instance.  \n  \n -or-  \n  \n <code>count</code> is greater than the length of this string minus <code>startIndex</code>.","nodes":[{"pos":[0,58],"content":"<ph id=\"ph1\">&lt;code&gt;count&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;startIndex&lt;/code&gt;</ph> is negative.","source":"<code>count</code> or <code>startIndex</code> is negative."},{"pos":[65,69],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[76,144],"content":"<ph id=\"ph1\">&lt;code&gt;startIndex&lt;/code&gt;</ph> is greater than the length of this instance.","source":"<code>startIndex</code> is greater than the length of this instance."},{"pos":[151,155],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[162,253],"content":"<ph id=\"ph1\">&lt;code&gt;count&lt;/code&gt;</ph> is greater than the length of this string minus <ph id=\"ph2\">&lt;code&gt;startIndex&lt;/code&gt;</ph>.","source":"<code>count</code> is greater than the length of this string minus <code>startIndex</code>."}],"pos":[341750,342014],"yaml":true},{"content":"<code>comparisonType</code> is not a valid <xref href=\"System.StringComparison\"></xref> value.","nodes":[{"pos":[0,94],"content":"<ph id=\"ph1\">&lt;code&gt;comparisonType&lt;/code&gt;</ph> is not a valid <ph id=\"ph2\">&lt;xref href=\"System.StringComparison\"&gt;&lt;/xref&gt;</ph> value.","source":"<code>comparisonType</code> is not a valid <xref href=\"System.StringComparison\"></xref> value."}],"pos":[342108,342203],"yaml":true},{"content":"Reports the zero-based index of the first occurrence of the specified string in the current <xref href=\"System.String\"></xref> object. Parameters specify the starting search position in the current string and the type of search to use for the specified string.","nodes":[{"pos":[0,260],"content":"Reports the zero-based index of the first occurrence of the specified string in the current <xref href=\"System.String\"></xref> object. Parameters specify the starting search position in the current string and the type of search to use for the specified string.","nodes":[{"content":"Reports the zero-based index of the first occurrence of the specified string in the current <ph id=\"ph1\">&lt;xref href=\"System.String\"&gt;&lt;/xref&gt;</ph> object.","pos":[0,134],"source":"Reports the zero-based index of the first occurrence of the specified string in the current <xref href=\"System.String\"></xref> object."},{"content":"Parameters specify the starting search position in the current string and the type of search to use for the specified string.","pos":[135,260]}]}],"pos":[343835,344096],"yaml":true},{"content":"Index numbering starts from 0. The `startIndex` parameter can range from 0 to the length of the string instance. If `startIndex` equals the length of the string instance, the method returns -1.  \n  \n The `comparisonType` parameter specifies to search for the `value` parameter using the current or invariant culture, using a case-sensitive or case-insensitive search, and using word or ordinal comparison rules.","nodes":[{"pos":[0,193],"content":"Index numbering starts from 0. The `startIndex` parameter can range from 0 to the length of the string instance. If `startIndex` equals the length of the string instance, the method returns -1.","nodes":[{"content":"Index numbering starts from 0.","pos":[0,30]},{"content":"The <ph id=\"ph1\">`startIndex`</ph> parameter can range from 0 to the length of the string instance.","pos":[31,112],"source":" The `startIndex` parameter can range from 0 to the length of the string instance."},{"content":"If <ph id=\"ph1\">`startIndex`</ph> equals the length of the string instance, the method returns -1.","pos":[113,193],"source":" If `startIndex` equals the length of the string instance, the method returns -1."}]},{"pos":[200,411],"content":"The <ph id=\"ph1\">`comparisonType`</ph> parameter specifies to search for the <ph id=\"ph2\">`value`</ph> parameter using the current or invariant culture, using a case-sensitive or case-insensitive search, and using word or ordinal comparison rules.","source":"The `comparisonType` parameter specifies to search for the `value` parameter using the current or invariant culture, using a case-sensitive or case-insensitive search, and using word or ordinal comparison rules."}],"pos":[344107,344523],"yaml":true,"extradata":"MT"},{"content":"The string to seek.","nodes":[{"pos":[0,19],"content":"The string to seek.","nodes":[{"content":"The string to seek.","pos":[0,19]}]}],"pos":[345234,345254],"yaml":true},{"content":"The search starting position.","nodes":[{"pos":[0,29],"content":"The search starting position.","nodes":[{"content":"The search starting position.","pos":[0,29]}]}],"pos":[345319,345349],"yaml":true},{"content":"One of the enumeration values that specifies the rules for the search.","nodes":[{"pos":[0,70],"content":"One of the enumeration values that specifies the rules for the search.","nodes":[{"content":"One of the enumeration values that specifies the rules for the search.","pos":[0,70]}]}],"pos":[345429,345500],"yaml":true},{"content":"The zero-based index position of the <code>value</code> parameter from the start of the current instance if that string is found, or -1 if it is not. If <code>value</code> is <xref href=\"System.String.Empty\"></xref>, the return value is <code>startIndex</code>.","nodes":[{"pos":[0,261],"content":"The zero-based index position of the <code>value</code> parameter from the start of the current instance if that string is found, or -1 if it is not. If <code>value</code> is <xref href=\"System.String.Empty\"></xref>, the return value is <code>startIndex</code>.","nodes":[{"content":"The zero-based index position of the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter from the start of the current instance if that string is found, or -1 if it is not.","pos":[0,149],"source":"The zero-based index position of the <code>value</code> parameter from the start of the current instance if that string is found, or -1 if it is not."},{"content":"If <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept> is <ph id=\"ph2\">&lt;xref href=\"System.String.Empty\"&gt;&lt;/xref&gt;</ph>, the return value is <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph3\">startIndex</ph><ept id=\"p2\">&lt;/code&gt;</ept>.","pos":[150,261],"source":" If <code>value</code> is <xref href=\"System.String.Empty\"></xref>, the return value is <code>startIndex</code>."}]}],"pos":[345556,345818],"yaml":true},{"content":"<code>value</code> is `null`.","nodes":[{"pos":[0,29],"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>value</code> is `null`."}],"pos":[345969,345999],"yaml":true},{"content":"<code>startIndex</code> is less than 0 (zero) or greater than the length of this string.","nodes":[{"pos":[0,88],"content":"<ph id=\"ph1\">&lt;code&gt;startIndex&lt;/code&gt;</ph> is less than 0 (zero) or greater than the length of this string.","source":"<code>startIndex</code> is less than 0 (zero) or greater than the length of this string."}],"pos":[346113,346202],"yaml":true},{"content":"<code>comparisonType</code> is not a valid <xref href=\"System.StringComparison\"></xref> value.","nodes":[{"pos":[0,94],"content":"<ph id=\"ph1\">&lt;code&gt;comparisonType&lt;/code&gt;</ph> is not a valid <ph id=\"ph2\">&lt;xref href=\"System.StringComparison\"&gt;&lt;/xref&gt;</ph> value.","source":"<code>comparisonType</code> is not a valid <xref href=\"System.StringComparison\"></xref> value."}],"pos":[346296,346391],"yaml":true},{"content":"Reports the zero-based index of the first occurrence of the specified character in this instance. The search starts at a specified character position and examines a specified number of character positions.","nodes":[{"pos":[0,205],"content":"Reports the zero-based index of the first occurrence of the specified character in this instance. The search starts at a specified character position and examines a specified number of character positions.","nodes":[{"content":"Reports the zero-based index of the first occurrence of the specified character in this instance. The search starts at a specified character position and examines a specified number of character positions.","pos":[0,205],"nodes":[{"content":"Reports the zero-based index of the first occurrence of the specified character in this instance.","pos":[0,97]},{"content":"The search starts at a specified character position and examines a specified number of character positions.","pos":[98,205]}]}]}],"pos":[347928,348134],"yaml":true},{"content":"The search begins at `startIndex` and continues to `startIndex` + `count` -1. The character at `startIndex` + `count` is not included in the search.  \n  \n Index numbering starts from 0 (zero). The `startIndex` parameter can range from 0 to the length of the string instance.  \n  \n This method performs an ordinal (culture-insensitive) search, where a character is considered equivalent to another character only if their Unicode scalar values are the same. To perform a culture-sensitive search, use the <xref:System.Globalization.CompareInfo.IndexOf%2A?displayProperty=fullName> method, where a Unicode scalar value representing a precomposed character, such as the ligature \"Ã\" (U+00C6), might be considered equivalent to any occurrence of the character's components in the correct sequence, such as \"AE\" (U+0041, U+0045), depending on the culture.","nodes":[{"pos":[0,148],"content":"The search begins at `startIndex` and continues to `startIndex` + `count` -1. The character at `startIndex` + `count` is not included in the search.","nodes":[{"content":"The search begins at <ph id=\"ph1\">`startIndex`</ph> and continues to <ph id=\"ph2\">`startIndex`</ph><ph id=\"ph3\"> + </ph><ph id=\"ph4\">`count`</ph> -1.","pos":[0,77],"source":"The search begins at `startIndex` and continues to `startIndex` + `count` -1."},{"content":"The character at <ph id=\"ph1\">`startIndex`</ph><ph id=\"ph2\"> + </ph><ph id=\"ph3\">`count`</ph> is not included in the search.","pos":[78,148],"source":" The character at `startIndex` + `count` is not included in the search."}]},{"pos":[155,274],"content":"Index numbering starts from 0 (zero). The `startIndex` parameter can range from 0 to the length of the string instance.","nodes":[{"content":"Index numbering starts from 0 (zero).","pos":[0,37]},{"content":"The <ph id=\"ph1\">`startIndex`</ph> parameter can range from 0 to the length of the string instance.","pos":[38,119],"source":" The `startIndex` parameter can range from 0 to the length of the string instance."}]},{"pos":[281,850],"content":"This method performs an ordinal (culture-insensitive) search, where a character is considered equivalent to another character only if their Unicode scalar values are the same. To perform a culture-sensitive search, use the <xref:System.Globalization.CompareInfo.IndexOf%2A?displayProperty=fullName> method, where a Unicode scalar value representing a precomposed character, such as the ligature \"Ã\" (U+00C6), might be considered equivalent to any occurrence of the character's components in the correct sequence, such as \"AE\" (U+0041, U+0045), depending on the culture.","nodes":[{"content":"This method performs an ordinal (culture-insensitive) search, where a character is considered equivalent to another character only if their Unicode scalar values are the same. To perform a culture-sensitive search, use the <xref:System.Globalization.CompareInfo.IndexOf%2A?displayProperty=fullName> method, where a Unicode scalar value representing a precomposed character, such as the ligature \"Ã\" (U+00C6), might be considered equivalent to any occurrence of the character's components in the correct sequence, such as \"AE\" (U+0041, U+0045), depending on the culture.","pos":[0,569],"nodes":[{"content":"This method performs an ordinal (culture-insensitive) search, where a character is considered equivalent to another character only if their Unicode scalar values are the same.","pos":[0,175]},{"content":"To perform a culture-sensitive search, use the <ph id=\"ph1\">&lt;xref:System.Globalization.CompareInfo.IndexOf%2A?displayProperty=fullName&gt;</ph> method, where a Unicode scalar value representing a precomposed character, such as the ligature \"Ã\" (U+00C6), might be considered equivalent to any occurrence of the character's components in the correct sequence, such as \"AE\" (U+0041, U+0045), depending on the culture.","pos":[176,569],"source":" To perform a culture-sensitive search, use the <xref:System.Globalization.CompareInfo.IndexOf%2A?displayProperty=fullName> method, where a Unicode scalar value representing a precomposed character, such as the ligature \"Ã\" (U+00C6), might be considered equivalent to any occurrence of the character's components in the correct sequence, such as \"AE\" (U+0041, U+0045), depending on the culture."}]}]}],"pos":[348145,349006],"yaml":true,"extradata":"MT"},{"content":"A Unicode character to seek.","nodes":[{"pos":[0,28],"content":"A Unicode character to seek.","nodes":[{"content":"A Unicode character to seek.","pos":[0,28]}]}],"pos":[349662,349691],"yaml":true},{"content":"The search starting position.","nodes":[{"pos":[0,29],"content":"The search starting position.","nodes":[{"content":"The search starting position.","pos":[0,29]}]}],"pos":[349756,349786],"yaml":true},{"content":"The number of character positions to examine.","nodes":[{"pos":[0,45],"content":"The number of character positions to examine.","nodes":[{"content":"The number of character positions to examine.","pos":[0,45]}]}],"pos":[349846,349892],"yaml":true},{"content":"The zero-based index position of <code>value</code> from the start of the string if that character is found, or -1 if it is not.","nodes":[{"pos":[0,128],"content":"The zero-based index position of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept> from the start of the string if that character is found, or -1 if it is not.","source":"The zero-based index position of <code>value</code> from the start of the string if that character is found, or -1 if it is not."}],"pos":[349948,350077],"yaml":true},{"content":"<code>count</code> or <code>startIndex</code> is negative.  \n  \n -or-  \n  \n <code>startIndex</code> is greater than the length of this string.  \n  \n -or-  \n  \n <code>count</code> is greater than the length of this string minus <code>startIndex</code>.","nodes":[{"pos":[0,58],"content":"<ph id=\"ph1\">&lt;code&gt;count&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;startIndex&lt;/code&gt;</ph> is negative.","source":"<code>count</code> or <code>startIndex</code> is negative."},{"pos":[65,69],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[76,142],"content":"<ph id=\"ph1\">&lt;code&gt;startIndex&lt;/code&gt;</ph> is greater than the length of this string.","source":"<code>startIndex</code> is greater than the length of this string."},{"pos":[149,153],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[160,251],"content":"<ph id=\"ph1\">&lt;code&gt;count&lt;/code&gt;</ph> is greater than the length of this string minus <ph id=\"ph2\">&lt;code&gt;startIndex&lt;/code&gt;</ph>.","source":"<code>count</code> is greater than the length of this string minus <code>startIndex</code>."}],"pos":[350240,350502],"yaml":true},{"content":"Reports the zero-based index of the first occurrence of the specified string in this instance.","nodes":[{"pos":[0,94],"content":"Reports the zero-based index of the first occurrence of the specified string in this instance.","nodes":[{"content":"Reports the zero-based index of the first occurrence of the specified string in this instance.","pos":[0,94]}]}],"pos":[351931,352026],"yaml":true},{"content":"Index numbering starts from zero.  \n  \n This method performs a word (case-sensitive and culture-sensitive) search using the current culture. The search begins at the first character position of this instance and continues until the last character position.  \n  \n Character sets include ignorable characters, which are characters that are not considered when performing a linguistic or culture-sensitive comparison. In a culture-sensitive search, if `value` contains an ignorable character, the result is equivalent to searching with that character removed. If `value` consists only of one or more ignorable characters, the<xref:System.String.IndexOf%28System.String%29> method always returns 0 (zero) to indicate that the match is found at the beginning of the current instance. In the following example, the <xref:System.String.IndexOf%28System.String%29> method is used to find three substrings (a soft hyphen (U+00AD), a soft hyphen followed by \"n\", and a soft hyphen followed by \"m\") in two strings. Only one of the strings contains a soft hyphen. If the example is run on the [!INCLUDE[netfx40_short](~/includes/netfx40-short-md.md)] or later, in each case, because the soft hyphen is an ignorable character, the result is the same as if the soft hyphen had not been included in `value`. When searching for a soft hyphen only, the method returns 0 (zero) to indicate that it has found a match at the beginning of the string.  \n  \n [!code-csharp[System.String.IndexOf#21](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.IndexOf/CS/ignorable21.cs#21)]\n [!code-vb[System.String.IndexOf#21](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.IndexOf/VB/ignorable21.vb#21)]","nodes":[{"pos":[0,33],"content":"Index numbering starts from zero.","nodes":[{"content":"Index numbering starts from zero.","pos":[0,33]}]},{"pos":[40,256],"content":"This method performs a word (case-sensitive and culture-sensitive) search using the current culture. The search begins at the first character position of this instance and continues until the last character position.","nodes":[{"content":"This method performs a word (case-sensitive and culture-sensitive) search using the current culture. The search begins at the first character position of this instance and continues until the last character position.","pos":[0,216],"nodes":[{"content":"This method performs a word (case-sensitive and culture-sensitive) search using the current culture.","pos":[0,100]},{"content":"The search begins at the first character position of this instance and continues until the last character position.","pos":[101,216]}]}]},{"pos":[263,1429],"content":"Character sets include ignorable characters, which are characters that are not considered when performing a linguistic or culture-sensitive comparison. In a culture-sensitive search, if `value` contains an ignorable character, the result is equivalent to searching with that character removed. If `value` consists only of one or more ignorable characters, the<xref:System.String.IndexOf%28System.String%29> method always returns 0 (zero) to indicate that the match is found at the beginning of the current instance. In the following example, the <xref:System.String.IndexOf%28System.String%29> method is used to find three substrings (a soft hyphen (U+00AD), a soft hyphen followed by \"n\", and a soft hyphen followed by \"m\") in two strings. Only one of the strings contains a soft hyphen. If the example is run on the [!INCLUDE[netfx40_short](~/includes/netfx40-short-md.md)] or later, in each case, because the soft hyphen is an ignorable character, the result is the same as if the soft hyphen had not been included in `value`. When searching for a soft hyphen only, the method returns 0 (zero) to indicate that it has found a match at the beginning of the string.","nodes":[{"content":"Character sets include ignorable characters, which are characters that are not considered when performing a linguistic or culture-sensitive comparison.","pos":[0,151]},{"content":"In a culture-sensitive search, if <ph id=\"ph1\">`value`</ph> contains an ignorable character, the result is equivalent to searching with that character removed.","pos":[152,293],"source":" In a culture-sensitive search, if `value` contains an ignorable character, the result is equivalent to searching with that character removed."},{"content":"If <ph id=\"ph1\">`value`</ph> consists only of one or more ignorable characters, the<ph id=\"ph2\">&lt;xref:System.String.IndexOf%28System.String%29&gt;</ph> method always returns 0 (zero) to indicate that the match is found at the beginning of the current instance.","pos":[294,515],"source":" If `value` consists only of one or more ignorable characters, the<xref:System.String.IndexOf%28System.String%29> method always returns 0 (zero) to indicate that the match is found at the beginning of the current instance."},{"content":"In the following example, the <ph id=\"ph1\">&lt;xref:System.String.IndexOf%28System.String%29&gt;</ph> method is used to find three substrings (a soft hyphen (U+00AD), a soft hyphen followed by \"n\", and a soft hyphen followed by \"m\") in two strings.","pos":[516,740],"source":" In the following example, the <xref:System.String.IndexOf%28System.String%29> method is used to find three substrings (a soft hyphen (U+00AD), a soft hyphen followed by \"n\", and a soft hyphen followed by \"m\") in two strings."},{"content":"Only one of the strings contains a soft hyphen.","pos":[741,788]},{"content":"If the example is run on the <ph id=\"ph1\">[!INCLUDE[netfx40_short](~/includes/netfx40-short-md.md)]</ph> or later, in each case, because the soft hyphen is an ignorable character, the result is the same as if the soft hyphen had not been included in <ph id=\"ph2\">`value`</ph>.","pos":[789,1029],"source":" If the example is run on the [!INCLUDE[netfx40_short](~/includes/netfx40-short-md.md)] or later, in each case, because the soft hyphen is an ignorable character, the result is the same as if the soft hyphen had not been included in `value`."},{"content":"When searching for a soft hyphen only, the method returns 0 (zero) to indicate that it has found a match at the beginning of the string.","pos":[1030,1166]}]},{"pos":[1436,1705],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>System.String.IndexOf#21<ept id=\"p2\">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.IndexOf/CS/ignorable21.cs#21)</ept><ept id=\"p1\">]</ept> <bpt id=\"p3\">[!code-vb</bpt><bpt id=\"p4\">[</bpt>System.String.IndexOf#21<ept id=\"p4\">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.IndexOf/VB/ignorable21.vb#21)</ept><ept id=\"p3\">]</ept>","source":"[!code-csharp[System.String.IndexOf#21](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.IndexOf/CS/ignorable21.cs#21)]\n [!code-vb[System.String.IndexOf#21](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.IndexOf/VB/ignorable21.vb#21)]"}],"pos":[352037,353756],"yaml":true,"extradata":"MT"},{"content":"The string to seek.","nodes":[{"pos":[0,19],"content":"The string to seek.","nodes":[{"content":"The string to seek.","pos":[0,19]}]}],"pos":[355097,355117],"yaml":true},{"content":"The zero-based index position of <code>value</code> if that string is found, or -1 if it is not. If <code>value</code> is <xref href=\"System.String.Empty\"></xref>, the return value is 0.","nodes":[{"pos":[0,186],"content":"The zero-based index position of <code>value</code> if that string is found, or -1 if it is not. If <code>value</code> is <xref href=\"System.String.Empty\"></xref>, the return value is 0.","nodes":[{"content":"The zero-based index position of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept> if that string is found, or -1 if it is not.","pos":[0,96],"source":"The zero-based index position of <code>value</code> if that string is found, or -1 if it is not."},{"content":"If <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept> is <ph id=\"ph2\">&lt;xref href=\"System.String.Empty\"&gt;&lt;/xref&gt;</ph>, the return value is 0.","pos":[97,186],"source":" If <code>value</code> is <xref href=\"System.String.Empty\"></xref>, the return value is 0."}]}],"pos":[355173,355360],"yaml":true},{"content":"<code>value</code> is `null`.","nodes":[{"pos":[0,29],"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>value</code> is `null`."}],"pos":[355511,355541],"yaml":true},{"content":"Reports the zero-based index of the first occurrence of the specified string in this instance. The search starts at a specified character position.","nodes":[{"pos":[0,147],"content":"Reports the zero-based index of the first occurrence of the specified string in this instance. The search starts at a specified character position.","nodes":[{"content":"Reports the zero-based index of the first occurrence of the specified string in this instance. The search starts at a specified character position.","pos":[0,147],"nodes":[{"content":"Reports the zero-based index of the first occurrence of the specified string in this instance.","pos":[0,94]},{"content":"The search starts at a specified character position.","pos":[95,147]}]}]}],"pos":[357030,357178],"yaml":true},{"content":"Index numbering starts from 0. The `startIndex` parameter can range from 0 to the length of the string instance. If `startIndex` equals the length of the string instance, the method returns -1.  \n  \n This method performs a word (case-sensitive and culture-sensitive) search using the current culture. The search begins at the `startIndex` character position of this instance and continues until the last character position.  \n  \n Character sets include ignorable characters, which are characters that are not considered when performing a linguistic or culture-sensitive comparison. In a culture-sensitive search, if `value` contains an ignorable character, the result is equivalent to searching with that character removed. If `value` consists only of one or more ignorable characters, the <xref:System.String.IndexOf%28System.String%2CSystem.Int32%29> method always returns `startIndex`, which is the character position at which the search begins. In the following example, the <xref:System.String.IndexOf%28System.String%2CSystem.Int32%29> method is used to find the position of a soft hyphen (U+00AD) followed by an \"m\" in two strings. Only one of the strings contains the required substring. If the example is run on the [!INCLUDE[netfx40_short](~/includes/netfx40-short-md.md)] or later, in both cases, because the soft hyphen is an ignorable character, the method returns the index of \"m\" in the string. Note that in the case of the first string, which includes the soft hyphen followed by an \"m\", the method fails to return the index of the soft hyphen but instead returns the index of the \"m\".  \n  \n [!code-csharp[System.String.IndexOf#22](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.IndexOf/CS/ignorable22.cs#22)]\n [!code-vb[System.String.IndexOf#22](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.IndexOf/VB/ignorable22.vb#22)]","nodes":[{"pos":[0,193],"content":"Index numbering starts from 0. The `startIndex` parameter can range from 0 to the length of the string instance. If `startIndex` equals the length of the string instance, the method returns -1.","nodes":[{"content":"Index numbering starts from 0.","pos":[0,30]},{"content":"The <ph id=\"ph1\">`startIndex`</ph> parameter can range from 0 to the length of the string instance.","pos":[31,112],"source":" The `startIndex` parameter can range from 0 to the length of the string instance."},{"content":"If <ph id=\"ph1\">`startIndex`</ph> equals the length of the string instance, the method returns -1.","pos":[113,193],"source":" If `startIndex` equals the length of the string instance, the method returns -1."}]},{"pos":[200,423],"content":"This method performs a word (case-sensitive and culture-sensitive) search using the current culture. The search begins at the `startIndex` character position of this instance and continues until the last character position.","nodes":[{"content":"This method performs a word (case-sensitive and culture-sensitive) search using the current culture.","pos":[0,100]},{"content":"The search begins at the <ph id=\"ph1\">`startIndex`</ph> character position of this instance and continues until the last character position.","pos":[101,223],"source":" The search begins at the `startIndex` character position of this instance and continues until the last character position."}]},{"pos":[430,1601],"content":"Character sets include ignorable characters, which are characters that are not considered when performing a linguistic or culture-sensitive comparison. In a culture-sensitive search, if `value` contains an ignorable character, the result is equivalent to searching with that character removed. If `value` consists only of one or more ignorable characters, the <xref:System.String.IndexOf%28System.String%2CSystem.Int32%29> method always returns `startIndex`, which is the character position at which the search begins. In the following example, the <xref:System.String.IndexOf%28System.String%2CSystem.Int32%29> method is used to find the position of a soft hyphen (U+00AD) followed by an \"m\" in two strings. Only one of the strings contains the required substring. If the example is run on the [!INCLUDE[netfx40_short](~/includes/netfx40-short-md.md)] or later, in both cases, because the soft hyphen is an ignorable character, the method returns the index of \"m\" in the string. Note that in the case of the first string, which includes the soft hyphen followed by an \"m\", the method fails to return the index of the soft hyphen but instead returns the index of the \"m\".","nodes":[{"content":"Character sets include ignorable characters, which are characters that are not considered when performing a linguistic or culture-sensitive comparison.","pos":[0,151]},{"content":"In a culture-sensitive search, if <ph id=\"ph1\">`value`</ph> contains an ignorable character, the result is equivalent to searching with that character removed.","pos":[152,293],"source":" In a culture-sensitive search, if `value` contains an ignorable character, the result is equivalent to searching with that character removed."},{"content":"If <ph id=\"ph1\">`value`</ph> consists only of one or more ignorable characters, the <ph id=\"ph2\">&lt;xref:System.String.IndexOf%28System.String%2CSystem.Int32%29&gt;</ph> method always returns <ph id=\"ph3\">`startIndex`</ph>, which is the character position at which the search begins.","pos":[294,518],"source":" If `value` consists only of one or more ignorable characters, the <xref:System.String.IndexOf%28System.String%2CSystem.Int32%29> method always returns `startIndex`, which is the character position at which the search begins."},{"content":"In the following example, the <ph id=\"ph1\">&lt;xref:System.String.IndexOf%28System.String%2CSystem.Int32%29&gt;</ph> method is used to find the position of a soft hyphen (U+00AD) followed by an \"m\" in two strings.","pos":[519,708],"source":" In the following example, the <xref:System.String.IndexOf%28System.String%2CSystem.Int32%29> method is used to find the position of a soft hyphen (U+00AD) followed by an \"m\" in two strings."},{"content":"Only one of the strings contains the required substring.","pos":[709,765]},{"content":"If the example is run on the <ph id=\"ph1\">[!INCLUDE[netfx40_short](~/includes/netfx40-short-md.md)]</ph> or later, in both cases, because the soft hyphen is an ignorable character, the method returns the index of \"m\" in the string.","pos":[766,979],"source":" If the example is run on the [!INCLUDE[netfx40_short](~/includes/netfx40-short-md.md)] or later, in both cases, because the soft hyphen is an ignorable character, the method returns the index of \"m\" in the string."},{"content":"Note that in the case of the first string, which includes the soft hyphen followed by an \"m\", the method fails to return the index of the soft hyphen but instead returns the index of the \"m\".","pos":[980,1171]}]},{"pos":[1608,1877],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>System.String.IndexOf#22<ept id=\"p2\">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.IndexOf/CS/ignorable22.cs#22)</ept><ept id=\"p1\">]</ept> <bpt id=\"p3\">[!code-vb</bpt><bpt id=\"p4\">[</bpt>System.String.IndexOf#22<ept id=\"p4\">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.IndexOf/VB/ignorable22.vb#22)</ept><ept id=\"p3\">]</ept>","source":"[!code-csharp[System.String.IndexOf#22](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.IndexOf/CS/ignorable22.cs#22)]\n [!code-vb[System.String.IndexOf#22](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.IndexOf/VB/ignorable22.vb#22)]"}],"pos":[357189,359084],"yaml":true,"extradata":"MT"},{"content":"The string to seek.","nodes":[{"pos":[0,19],"content":"The string to seek.","nodes":[{"content":"The string to seek.","pos":[0,19]}]}],"pos":[359700,359720],"yaml":true},{"content":"The search starting position.","nodes":[{"pos":[0,29],"content":"The search starting position.","nodes":[{"content":"The search starting position.","pos":[0,29]}]}],"pos":[359785,359815],"yaml":true},{"content":"The zero-based index position of <code>value</code> from the start of the current instance if that string is found, or -1 if it is not. If <code>value</code> is <xref href=\"System.String.Empty\"></xref>, the return value is <code>startIndex</code>.","nodes":[{"pos":[0,247],"content":"The zero-based index position of <code>value</code> from the start of the current instance if that string is found, or -1 if it is not. If <code>value</code> is <xref href=\"System.String.Empty\"></xref>, the return value is <code>startIndex</code>.","nodes":[{"content":"The zero-based index position of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept> from the start of the current instance if that string is found, or -1 if it is not.","pos":[0,135],"source":"The zero-based index position of <code>value</code> from the start of the current instance if that string is found, or -1 if it is not."},{"content":"If <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept> is <ph id=\"ph2\">&lt;xref href=\"System.String.Empty\"&gt;&lt;/xref&gt;</ph>, the return value is <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph3\">startIndex</ph><ept id=\"p2\">&lt;/code&gt;</ept>.","pos":[136,247],"source":" If <code>value</code> is <xref href=\"System.String.Empty\"></xref>, the return value is <code>startIndex</code>."}]}],"pos":[359871,360119],"yaml":true},{"content":"<code>value</code> is `null`.","nodes":[{"pos":[0,29],"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>value</code> is `null`."}],"pos":[360270,360300],"yaml":true},{"content":"<code>startIndex</code> is less than 0 (zero) or greater than the length of this string.","nodes":[{"pos":[0,88],"content":"<ph id=\"ph1\">&lt;code&gt;startIndex&lt;/code&gt;</ph> is less than 0 (zero) or greater than the length of this string.","source":"<code>startIndex</code> is less than 0 (zero) or greater than the length of this string."}],"pos":[360414,360503],"yaml":true},{"content":"Reports the zero-based index of the first occurrence of the specified Unicode character in this string. The search starts at a specified character position.","nodes":[{"pos":[0,156],"content":"Reports the zero-based index of the first occurrence of the specified Unicode character in this string. The search starts at a specified character position.","nodes":[{"content":"Reports the zero-based index of the first occurrence of the specified Unicode character in this string. The search starts at a specified character position.","pos":[0,156],"nodes":[{"content":"Reports the zero-based index of the first occurrence of the specified Unicode character in this string.","pos":[0,103]},{"content":"The search starts at a specified character position.","pos":[104,156]}]}]}],"pos":[361980,362137],"yaml":true},{"content":"Index numbering starts from 0. The `startIndex` parameter can range from 0 to the length of the string instance. If `startIndex` equals the length of the string instance, the method returns -1.  \n  \n The search ranges from `startIndex` to the end of the string.  \n  \n This method performs an ordinal (culture-insensitive) search, where a character is considered equivalent to another character only if their Unicode scalar values are the same. To perform a culture-sensitive search, use the <xref:System.Globalization.CompareInfo.IndexOf%2A?displayProperty=fullName> method, where a Unicode scalar value representing a precomposed character, such as the ligature \"Ã\" (U+00C6), might be considered equivalent to any occurrence of the character's components in the correct sequence, such as \"AE\" (U+0041, U+0045), depending on the culture.","nodes":[{"pos":[0,193],"content":"Index numbering starts from 0. The `startIndex` parameter can range from 0 to the length of the string instance. If `startIndex` equals the length of the string instance, the method returns -1.","nodes":[{"content":"Index numbering starts from 0.","pos":[0,30]},{"content":"The <ph id=\"ph1\">`startIndex`</ph> parameter can range from 0 to the length of the string instance.","pos":[31,112],"source":" The `startIndex` parameter can range from 0 to the length of the string instance."},{"content":"If <ph id=\"ph1\">`startIndex`</ph> equals the length of the string instance, the method returns -1.","pos":[113,193],"source":" If `startIndex` equals the length of the string instance, the method returns -1."}]},{"pos":[200,261],"content":"The search ranges from <ph id=\"ph1\">`startIndex`</ph> to the end of the string.","source":"The search ranges from `startIndex` to the end of the string."},{"pos":[268,837],"content":"This method performs an ordinal (culture-insensitive) search, where a character is considered equivalent to another character only if their Unicode scalar values are the same. To perform a culture-sensitive search, use the <xref:System.Globalization.CompareInfo.IndexOf%2A?displayProperty=fullName> method, where a Unicode scalar value representing a precomposed character, such as the ligature \"Ã\" (U+00C6), might be considered equivalent to any occurrence of the character's components in the correct sequence, such as \"AE\" (U+0041, U+0045), depending on the culture.","nodes":[{"content":"This method performs an ordinal (culture-insensitive) search, where a character is considered equivalent to another character only if their Unicode scalar values are the same. To perform a culture-sensitive search, use the <xref:System.Globalization.CompareInfo.IndexOf%2A?displayProperty=fullName> method, where a Unicode scalar value representing a precomposed character, such as the ligature \"Ã\" (U+00C6), might be considered equivalent to any occurrence of the character's components in the correct sequence, such as \"AE\" (U+0041, U+0045), depending on the culture.","pos":[0,569],"nodes":[{"content":"This method performs an ordinal (culture-insensitive) search, where a character is considered equivalent to another character only if their Unicode scalar values are the same.","pos":[0,175]},{"content":"To perform a culture-sensitive search, use the <ph id=\"ph1\">&lt;xref:System.Globalization.CompareInfo.IndexOf%2A?displayProperty=fullName&gt;</ph> method, where a Unicode scalar value representing a precomposed character, such as the ligature \"Ã\" (U+00C6), might be considered equivalent to any occurrence of the character's components in the correct sequence, such as \"AE\" (U+0041, U+0045), depending on the culture.","pos":[176,569],"source":" To perform a culture-sensitive search, use the <xref:System.Globalization.CompareInfo.IndexOf%2A?displayProperty=fullName> method, where a Unicode scalar value representing a precomposed character, such as the ligature \"Ã\" (U+00C6), might be considered equivalent to any occurrence of the character's components in the correct sequence, such as \"AE\" (U+0041, U+0045), depending on the culture."}]}]}],"pos":[362148,362996],"yaml":true,"extradata":"MT"},{"content":"A Unicode character to seek.","nodes":[{"pos":[0,28],"content":"A Unicode character to seek.","nodes":[{"content":"A Unicode character to seek.","pos":[0,28]}]}],"pos":[363569,363598],"yaml":true},{"content":"The search starting position.","nodes":[{"pos":[0,29],"content":"The search starting position.","nodes":[{"content":"The search starting position.","pos":[0,29]}]}],"pos":[363663,363693],"yaml":true},{"content":"The zero-based index position of <code>value</code> from the start of the string if that character is found, or -1 if it is not.","nodes":[{"pos":[0,128],"content":"The zero-based index position of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept> from the start of the string if that character is found, or -1 if it is not.","source":"The zero-based index position of <code>value</code> from the start of the string if that character is found, or -1 if it is not."}],"pos":[363749,363878],"yaml":true},{"content":"<code>startIndex</code> is less than 0 (zero) or greater than the length of the string.","nodes":[{"pos":[0,87],"content":"<ph id=\"ph1\">&lt;code&gt;startIndex&lt;/code&gt;</ph> is less than 0 (zero) or greater than the length of the string.","source":"<code>startIndex</code> is less than 0 (zero) or greater than the length of the string."}],"pos":[364041,364129],"yaml":true},{"content":"Reports the zero-based index of the first occurrence of the specified string in the current <xref href=\"System.String\"></xref> object. A parameter specifies the type of search to use for the specified string.","nodes":[{"pos":[0,208],"content":"Reports the zero-based index of the first occurrence of the specified string in the current <xref href=\"System.String\"></xref> object. A parameter specifies the type of search to use for the specified string.","nodes":[{"content":"Reports the zero-based index of the first occurrence of the specified string in the current <ph id=\"ph1\">&lt;xref href=\"System.String\"&gt;&lt;/xref&gt;</ph> object.","pos":[0,134],"source":"Reports the zero-based index of the first occurrence of the specified string in the current <xref href=\"System.String\"></xref> object."},{"content":"A parameter specifies the type of search to use for the specified string.","pos":[135,208]}]}],"pos":[365684,365893],"yaml":true},{"content":"Index numbering starts from zero.  \n  \n The `comparisonType` parameter specifies to search for the `value` parameter using the current or invariant culture, using a case-sensitive or case-insensitive search, and using word or ordinal comparison rules.","nodes":[{"pos":[0,33],"content":"Index numbering starts from zero.","nodes":[{"content":"Index numbering starts from zero.","pos":[0,33]}]},{"pos":[40,251],"content":"The <ph id=\"ph1\">`comparisonType`</ph> parameter specifies to search for the <ph id=\"ph2\">`value`</ph> parameter using the current or invariant culture, using a case-sensitive or case-insensitive search, and using word or ordinal comparison rules.","source":"The `comparisonType` parameter specifies to search for the `value` parameter using the current or invariant culture, using a case-sensitive or case-insensitive search, and using word or ordinal comparison rules."}],"pos":[365904,366160],"yaml":true,"extradata":"MT"},{"content":"The string to seek.","nodes":[{"pos":[0,19],"content":"The string to seek.","nodes":[{"content":"The string to seek.","pos":[0,19]}]}],"pos":[366855,366875],"yaml":true},{"content":"One of the enumeration values that specifies the rules for the search.","nodes":[{"pos":[0,70],"content":"One of the enumeration values that specifies the rules for the search.","nodes":[{"content":"One of the enumeration values that specifies the rules for the search.","pos":[0,70]}]}],"pos":[366955,367026],"yaml":true},{"content":"The index position of the <code>value</code> parameter if that string is found, or -1 if it is not. If <code>value</code> is <xref href=\"System.String.Empty\"></xref>, the return value is 0.","nodes":[{"pos":[0,189],"content":"The index position of the <code>value</code> parameter if that string is found, or -1 if it is not. If <code>value</code> is <xref href=\"System.String.Empty\"></xref>, the return value is 0.","nodes":[{"content":"The index position of the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter if that string is found, or -1 if it is not.","pos":[0,99],"source":"The index position of the <code>value</code> parameter if that string is found, or -1 if it is not."},{"content":"If <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept> is <ph id=\"ph2\">&lt;xref href=\"System.String.Empty\"&gt;&lt;/xref&gt;</ph>, the return value is 0.","pos":[100,189],"source":" If <code>value</code> is <xref href=\"System.String.Empty\"></xref>, the return value is 0."}]}],"pos":[367082,367272],"yaml":true},{"content":"<code>value</code> is `null`.","nodes":[{"pos":[0,29],"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>value</code> is `null`."}],"pos":[367423,367453],"yaml":true},{"content":"<code>comparisonType</code> is not a valid <xref href=\"System.StringComparison\"></xref> value.","nodes":[{"pos":[0,94],"content":"<ph id=\"ph1\">&lt;code&gt;comparisonType&lt;/code&gt;</ph> is not a valid <ph id=\"ph2\">&lt;xref href=\"System.StringComparison\"&gt;&lt;/xref&gt;</ph> value.","source":"<code>comparisonType</code> is not a valid <xref href=\"System.StringComparison\"></xref> value."}],"pos":[367547,367642],"yaml":true},{"content":"Reports the zero-based index of the first occurrence of the specified Unicode character in this string.","nodes":[{"pos":[0,103],"content":"Reports the zero-based index of the first occurrence of the specified Unicode character in this string.","nodes":[{"content":"Reports the zero-based index of the first occurrence of the specified Unicode character in this string.","pos":[0,103]}]}],"pos":[369059,369163],"yaml":true},{"content":"Index numbering starts from zero.  \n  \n This method performs an ordinal (culture-insensitive) search, where a character is considered equivalent to another character only if their Unicode scalar values are the same. To perform a culture-sensitive search, use the <xref:System.Globalization.CompareInfo.IndexOf%2A?displayProperty=fullName> method, where a Unicode scalar value representing a precomposed character, such as the ligature \"Ã\" (U+00C6), might be considered equivalent to any occurrence of the character's components in the correct sequence, such as \"AE\" (U+0041, U+0045), depending on the culture.","nodes":[{"pos":[0,33],"content":"Index numbering starts from zero.","nodes":[{"content":"Index numbering starts from zero.","pos":[0,33]}]},{"pos":[40,609],"content":"This method performs an ordinal (culture-insensitive) search, where a character is considered equivalent to another character only if their Unicode scalar values are the same. To perform a culture-sensitive search, use the <xref:System.Globalization.CompareInfo.IndexOf%2A?displayProperty=fullName> method, where a Unicode scalar value representing a precomposed character, such as the ligature \"Ã\" (U+00C6), might be considered equivalent to any occurrence of the character's components in the correct sequence, such as \"AE\" (U+0041, U+0045), depending on the culture.","nodes":[{"content":"This method performs an ordinal (culture-insensitive) search, where a character is considered equivalent to another character only if their Unicode scalar values are the same. To perform a culture-sensitive search, use the <xref:System.Globalization.CompareInfo.IndexOf%2A?displayProperty=fullName> method, where a Unicode scalar value representing a precomposed character, such as the ligature \"Ã\" (U+00C6), might be considered equivalent to any occurrence of the character's components in the correct sequence, such as \"AE\" (U+0041, U+0045), depending on the culture.","pos":[0,569],"nodes":[{"content":"This method performs an ordinal (culture-insensitive) search, where a character is considered equivalent to another character only if their Unicode scalar values are the same.","pos":[0,175]},{"content":"To perform a culture-sensitive search, use the <ph id=\"ph1\">&lt;xref:System.Globalization.CompareInfo.IndexOf%2A?displayProperty=fullName&gt;</ph> method, where a Unicode scalar value representing a precomposed character, such as the ligature \"Ã\" (U+00C6), might be considered equivalent to any occurrence of the character's components in the correct sequence, such as \"AE\" (U+0041, U+0045), depending on the culture.","pos":[176,569],"source":" To perform a culture-sensitive search, use the <xref:System.Globalization.CompareInfo.IndexOf%2A?displayProperty=fullName> method, where a Unicode scalar value representing a precomposed character, such as the ligature \"Ã\" (U+00C6), might be considered equivalent to any occurrence of the character's components in the correct sequence, such as \"AE\" (U+0041, U+0045), depending on the culture."}]}]}],"pos":[369174,369792],"yaml":true,"extradata":"MT"},{"content":"A Unicode character to seek.","nodes":[{"pos":[0,28],"content":"A Unicode character to seek.","nodes":[{"content":"A Unicode character to seek.","pos":[0,28]}]}],"pos":[370482,370511],"yaml":true},{"content":"The zero-based index position of <code>value</code> if that character is found, or -1 if it is not.","nodes":[{"pos":[0,99],"content":"The zero-based index position of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept> if that character is found, or -1 if it is not.","source":"The zero-based index position of <code>value</code> if that character is found, or -1 if it is not."}],"pos":[370567,370667],"yaml":true},{"content":"Reports the zero-based index of the first occurrence in this instance of any character in a specified array of Unicode characters.","nodes":[{"pos":[0,130],"content":"Reports the zero-based index of the first occurrence in this instance of any character in a specified array of Unicode characters.","nodes":[{"content":"Reports the zero-based index of the first occurrence in this instance of any character in a specified array of Unicode characters.","pos":[0,130]}]}],"pos":[372166,372297],"yaml":true},{"content":"Index numbering starts from zero.  \n  \n The search for `anyOf` is case-sensitive. If `anyOf` is an empty array, the method finds a match at the beginning of the string (that  is, at index zero).  \n  \n This method performs an ordinal (culture-insensitive) search, where a character is considered equivalent to another character only if their Unicode scalar values are the same. To perform a culture-sensitive search, use the <xref:System.Globalization.CompareInfo.IndexOf%2A?displayProperty=fullName> method, where a Unicode scalar value representing a precomposed character, such as the ligature \"Ã\" (U+00C6), might be considered equivalent to any occurrence of the character's components in the correct sequence, such as \"AE\" (U+0041, U+0045), depending on the culture.","nodes":[{"pos":[0,33],"content":"Index numbering starts from zero.","nodes":[{"content":"Index numbering starts from zero.","pos":[0,33]}]},{"pos":[40,194],"content":"The search for `anyOf` is case-sensitive. If `anyOf` is an empty array, the method finds a match at the beginning of the string (that  is, at index zero).","nodes":[{"content":"The search for <ph id=\"ph1\">`anyOf`</ph> is case-sensitive.","pos":[0,41],"source":"The search for `anyOf` is case-sensitive."},{"content":"If <ph id=\"ph1\">`anyOf`</ph> is an empty array, the method finds a match at the beginning of the string (that  is, at index zero).","pos":[42,154],"source":" If `anyOf` is an empty array, the method finds a match at the beginning of the string (that  is, at index zero)."}]},{"pos":[201,770],"content":"This method performs an ordinal (culture-insensitive) search, where a character is considered equivalent to another character only if their Unicode scalar values are the same. To perform a culture-sensitive search, use the <xref:System.Globalization.CompareInfo.IndexOf%2A?displayProperty=fullName> method, where a Unicode scalar value representing a precomposed character, such as the ligature \"Ã\" (U+00C6), might be considered equivalent to any occurrence of the character's components in the correct sequence, such as \"AE\" (U+0041, U+0045), depending on the culture.","nodes":[{"content":"This method performs an ordinal (culture-insensitive) search, where a character is considered equivalent to another character only if their Unicode scalar values are the same. To perform a culture-sensitive search, use the <xref:System.Globalization.CompareInfo.IndexOf%2A?displayProperty=fullName> method, where a Unicode scalar value representing a precomposed character, such as the ligature \"Ã\" (U+00C6), might be considered equivalent to any occurrence of the character's components in the correct sequence, such as \"AE\" (U+0041, U+0045), depending on the culture.","pos":[0,569],"nodes":[{"content":"This method performs an ordinal (culture-insensitive) search, where a character is considered equivalent to another character only if their Unicode scalar values are the same.","pos":[0,175]},{"content":"To perform a culture-sensitive search, use the <ph id=\"ph1\">&lt;xref:System.Globalization.CompareInfo.IndexOf%2A?displayProperty=fullName&gt;</ph> method, where a Unicode scalar value representing a precomposed character, such as the ligature \"Ã\" (U+00C6), might be considered equivalent to any occurrence of the character's components in the correct sequence, such as \"AE\" (U+0041, U+0045), depending on the culture.","pos":[176,569],"source":" To perform a culture-sensitive search, use the <xref:System.Globalization.CompareInfo.IndexOf%2A?displayProperty=fullName> method, where a Unicode scalar value representing a precomposed character, such as the ligature \"Ã\" (U+00C6), might be considered equivalent to any occurrence of the character's components in the correct sequence, such as \"AE\" (U+0041, U+0045), depending on the culture."}]}]}],"pos":[372308,373089],"yaml":true,"extradata":"MT"},{"content":"A Unicode character array containing one or more characters to seek.","nodes":[{"pos":[0,68],"content":"A Unicode character array containing one or more characters to seek.","nodes":[{"content":"A Unicode character array containing one or more characters to seek.","pos":[0,68]}]}],"pos":[373588,373657],"yaml":true},{"content":"The zero-based index position of the first occurrence in this instance where any character in <code>anyOf</code> was found; -1 if no character in <code>anyOf</code> was found.","nodes":[{"pos":[0,175],"content":"The zero-based index position of the first occurrence in this instance where any character in <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">anyOf</ph><ept id=\"p1\">&lt;/code&gt;</ept> was found; -1 if no character in <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">anyOf</ph><ept id=\"p2\">&lt;/code&gt;</ept> was found.","source":"The zero-based index position of the first occurrence in this instance where any character in <code>anyOf</code> was found; -1 if no character in <code>anyOf</code> was found."}],"pos":[373713,373889],"yaml":true},{"content":"<code>anyOf</code> is `null`.","nodes":[{"pos":[0,29],"content":"<ph id=\"ph1\">&lt;code&gt;anyOf&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>anyOf</code> is `null`."}],"pos":[374043,374073],"yaml":true},{"content":"Reports the zero-based index of the first occurrence in this instance of any character in a specified array of Unicode characters. The search starts at a specified character position.","nodes":[{"pos":[0,183],"content":"Reports the zero-based index of the first occurrence in this instance of any character in a specified array of Unicode characters. The search starts at a specified character position.","nodes":[{"content":"Reports the zero-based index of the first occurrence in this instance of any character in a specified array of Unicode characters. The search starts at a specified character position.","pos":[0,183],"nodes":[{"content":"Reports the zero-based index of the first occurrence in this instance of any character in a specified array of Unicode characters.","pos":[0,130]},{"content":"The search starts at a specified character position.","pos":[131,183]}]}]}],"pos":[375580,375764],"yaml":true},{"content":"Index numbering starts from zero. The `startIndex` parameter can range from 0 to one less than the length of the string instance.  \n  \n The search ranges from `startIndex` to the end of the string.  \n  \n The search for `anyOf` is case-sensitive.  \n  \n This method performs an ordinal (culture-insensitive) search, where a character is considered equivalent to another character only if their Unicode scalar value are the same. To perform a culture-sensitive search, use the <xref:System.Globalization.CompareInfo.IndexOf%2A?displayProperty=fullName> method, where a Unicode scalar value representing a precomposed character, such as the ligature \"Ã\" (U+00C6), might be considered equivalent to any occurrence of the character's components in the correct sequence, such as \"AE\" (U+0041, U+0045), depending on the culture.","nodes":[{"pos":[0,129],"content":"Index numbering starts from zero. The `startIndex` parameter can range from 0 to one less than the length of the string instance.","nodes":[{"content":"Index numbering starts from zero.","pos":[0,33]},{"content":"The <ph id=\"ph1\">`startIndex`</ph> parameter can range from 0 to one less than the length of the string instance.","pos":[34,129],"source":" The `startIndex` parameter can range from 0 to one less than the length of the string instance."}]},{"pos":[136,197],"content":"The search ranges from <ph id=\"ph1\">`startIndex`</ph> to the end of the string.","source":"The search ranges from `startIndex` to the end of the string."},{"pos":[204,245],"content":"The search for <ph id=\"ph1\">`anyOf`</ph> is case-sensitive.","source":"The search for `anyOf` is case-sensitive."},{"pos":[252,820],"content":"This method performs an ordinal (culture-insensitive) search, where a character is considered equivalent to another character only if their Unicode scalar value are the same. To perform a culture-sensitive search, use the <xref:System.Globalization.CompareInfo.IndexOf%2A?displayProperty=fullName> method, where a Unicode scalar value representing a precomposed character, such as the ligature \"Ã\" (U+00C6), might be considered equivalent to any occurrence of the character's components in the correct sequence, such as \"AE\" (U+0041, U+0045), depending on the culture.","nodes":[{"content":"This method performs an ordinal (culture-insensitive) search, where a character is considered equivalent to another character only if their Unicode scalar value are the same. To perform a culture-sensitive search, use the <xref:System.Globalization.CompareInfo.IndexOf%2A?displayProperty=fullName> method, where a Unicode scalar value representing a precomposed character, such as the ligature \"Ã\" (U+00C6), might be considered equivalent to any occurrence of the character's components in the correct sequence, such as \"AE\" (U+0041, U+0045), depending on the culture.","pos":[0,568],"nodes":[{"content":"This method performs an ordinal (culture-insensitive) search, where a character is considered equivalent to another character only if their Unicode scalar value are the same.","pos":[0,174]},{"content":"To perform a culture-sensitive search, use the <ph id=\"ph1\">&lt;xref:System.Globalization.CompareInfo.IndexOf%2A?displayProperty=fullName&gt;</ph> method, where a Unicode scalar value representing a precomposed character, such as the ligature \"Ã\" (U+00C6), might be considered equivalent to any occurrence of the character's components in the correct sequence, such as \"AE\" (U+0041, U+0045), depending on the culture.","pos":[175,568],"source":" To perform a culture-sensitive search, use the <xref:System.Globalization.CompareInfo.IndexOf%2A?displayProperty=fullName> method, where a Unicode scalar value representing a precomposed character, such as the ligature \"Ã\" (U+00C6), might be considered equivalent to any occurrence of the character's components in the correct sequence, such as \"AE\" (U+0041, U+0045), depending on the culture."}]}]}],"pos":[375775,376608],"yaml":true,"extradata":"MT"},{"content":"A Unicode character array containing one or more characters to seek.","nodes":[{"pos":[0,68],"content":"A Unicode character array containing one or more characters to seek.","nodes":[{"content":"A Unicode character array containing one or more characters to seek.","pos":[0,68]}]}],"pos":[377262,377331],"yaml":true},{"content":"The search starting position.","nodes":[{"pos":[0,29],"content":"The search starting position.","nodes":[{"content":"The search starting position.","pos":[0,29]}]}],"pos":[377396,377426],"yaml":true},{"content":"The zero-based index position of the first occurrence in this instance where any character in <code>anyOf</code> was found; -1 if no character in <code>anyOf</code> was found.","nodes":[{"pos":[0,175],"content":"The zero-based index position of the first occurrence in this instance where any character in <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">anyOf</ph><ept id=\"p1\">&lt;/code&gt;</ept> was found; -1 if no character in <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">anyOf</ph><ept id=\"p2\">&lt;/code&gt;</ept> was found.","source":"The zero-based index position of the first occurrence in this instance where any character in <code>anyOf</code> was found; -1 if no character in <code>anyOf</code> was found."}],"pos":[377482,377658],"yaml":true},{"content":"<code>anyOf</code> is `null`.","nodes":[{"pos":[0,29],"content":"<ph id=\"ph1\">&lt;code&gt;anyOf&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>anyOf</code> is `null`."}],"pos":[377812,377842],"yaml":true},{"content":"<code>startIndex</code> is negative.  \n  \n -or-  \n  \n <code>startIndex</code> is greater than the number of characters in this instance.","nodes":[{"pos":[0,36],"content":"<ph id=\"ph1\">&lt;code&gt;startIndex&lt;/code&gt;</ph> is negative.","source":"<code>startIndex</code> is negative."},{"pos":[43,47],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[54,136],"content":"<ph id=\"ph1\">&lt;code&gt;startIndex&lt;/code&gt;</ph> is greater than the number of characters in this instance.","source":"<code>startIndex</code> is greater than the number of characters in this instance."}],"pos":[377956,378099],"yaml":true},{"content":"Reports the zero-based index of the first occurrence in this instance of any character in a specified array of Unicode characters. The search starts at a specified character position and examines a specified number of character positions.","nodes":[{"pos":[0,238],"content":"Reports the zero-based index of the first occurrence in this instance of any character in a specified array of Unicode characters. The search starts at a specified character position and examines a specified number of character positions.","nodes":[{"content":"Reports the zero-based index of the first occurrence in this instance of any character in a specified array of Unicode characters. The search starts at a specified character position and examines a specified number of character positions.","pos":[0,238],"nodes":[{"content":"Reports the zero-based index of the first occurrence in this instance of any character in a specified array of Unicode characters.","pos":[0,130]},{"content":"The search starts at a specified character position and examines a specified number of character positions.","pos":[131,238]}]}]}],"pos":[379666,379905],"yaml":true},{"content":"The search begins at `startIndex` and continues to `startIndex` + `count` -1. The character at `startIndex` + `count` is not included in the search.  \n  \n Index numbering starts from zero. The `startIndex` parameter can range from 0 to one less than the length of the string instance.  \n  \n The search for `anyOf` is case-sensitive.  \n  \n This method performs an ordinal (culture-insensitive) search, where a character is considered equivalent to another character only if their Unicode scalar value are the same. To perform a culture-sensitive search, use the <xref:System.Globalization.CompareInfo.IndexOf%2A?displayProperty=fullName> method, where a Unicode scalar value representing a precomposed character, such as the ligature \"Ã\" (U+00C6), might be considered equivalent to any occurrence of the character's components in the correct sequence, such as \"AE\" (U+0041, U+0045), depending on the culture.","nodes":[{"pos":[0,148],"content":"The search begins at `startIndex` and continues to `startIndex` + `count` -1. The character at `startIndex` + `count` is not included in the search.","nodes":[{"content":"The search begins at <ph id=\"ph1\">`startIndex`</ph> and continues to <ph id=\"ph2\">`startIndex`</ph><ph id=\"ph3\"> + </ph><ph id=\"ph4\">`count`</ph> -1.","pos":[0,77],"source":"The search begins at `startIndex` and continues to `startIndex` + `count` -1."},{"content":"The character at <ph id=\"ph1\">`startIndex`</ph><ph id=\"ph2\"> + </ph><ph id=\"ph3\">`count`</ph> is not included in the search.","pos":[78,148],"source":" The character at `startIndex` + `count` is not included in the search."}]},{"pos":[155,284],"content":"Index numbering starts from zero. The `startIndex` parameter can range from 0 to one less than the length of the string instance.","nodes":[{"content":"Index numbering starts from zero.","pos":[0,33]},{"content":"The <ph id=\"ph1\">`startIndex`</ph> parameter can range from 0 to one less than the length of the string instance.","pos":[34,129],"source":" The `startIndex` parameter can range from 0 to one less than the length of the string instance."}]},{"pos":[291,332],"content":"The search for <ph id=\"ph1\">`anyOf`</ph> is case-sensitive.","source":"The search for `anyOf` is case-sensitive."},{"pos":[339,907],"content":"This method performs an ordinal (culture-insensitive) search, where a character is considered equivalent to another character only if their Unicode scalar value are the same. To perform a culture-sensitive search, use the <xref:System.Globalization.CompareInfo.IndexOf%2A?displayProperty=fullName> method, where a Unicode scalar value representing a precomposed character, such as the ligature \"Ã\" (U+00C6), might be considered equivalent to any occurrence of the character's components in the correct sequence, such as \"AE\" (U+0041, U+0045), depending on the culture.","nodes":[{"content":"This method performs an ordinal (culture-insensitive) search, where a character is considered equivalent to another character only if their Unicode scalar value are the same. To perform a culture-sensitive search, use the <xref:System.Globalization.CompareInfo.IndexOf%2A?displayProperty=fullName> method, where a Unicode scalar value representing a precomposed character, such as the ligature \"Ã\" (U+00C6), might be considered equivalent to any occurrence of the character's components in the correct sequence, such as \"AE\" (U+0041, U+0045), depending on the culture.","pos":[0,568],"nodes":[{"content":"This method performs an ordinal (culture-insensitive) search, where a character is considered equivalent to another character only if their Unicode scalar value are the same.","pos":[0,174]},{"content":"To perform a culture-sensitive search, use the <ph id=\"ph1\">&lt;xref:System.Globalization.CompareInfo.IndexOf%2A?displayProperty=fullName&gt;</ph> method, where a Unicode scalar value representing a precomposed character, such as the ligature \"Ã\" (U+00C6), might be considered equivalent to any occurrence of the character's components in the correct sequence, such as \"AE\" (U+0041, U+0045), depending on the culture.","pos":[175,568],"source":" To perform a culture-sensitive search, use the <xref:System.Globalization.CompareInfo.IndexOf%2A?displayProperty=fullName> method, where a Unicode scalar value representing a precomposed character, such as the ligature \"Ã\" (U+00C6), might be considered equivalent to any occurrence of the character's components in the correct sequence, such as \"AE\" (U+0041, U+0045), depending on the culture."}]}]}],"pos":[379916,380836],"yaml":true,"extradata":"MT"},{"content":"A Unicode character array containing one or more characters to seek.","nodes":[{"pos":[0,68],"content":"A Unicode character array containing one or more characters to seek.","nodes":[{"content":"A Unicode character array containing one or more characters to seek.","pos":[0,68]}]}],"pos":[381502,381571],"yaml":true},{"content":"The search starting position.","nodes":[{"pos":[0,29],"content":"The search starting position.","nodes":[{"content":"The search starting position.","pos":[0,29]}]}],"pos":[381636,381666],"yaml":true},{"content":"The number of character positions to examine.","nodes":[{"pos":[0,45],"content":"The number of character positions to examine.","nodes":[{"content":"The number of character positions to examine.","pos":[0,45]}]}],"pos":[381726,381772],"yaml":true},{"content":"The zero-based index position of the first occurrence in this instance where any character in <code>anyOf</code> was found; -1 if no character in <code>anyOf</code> was found.","nodes":[{"pos":[0,175],"content":"The zero-based index position of the first occurrence in this instance where any character in <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">anyOf</ph><ept id=\"p1\">&lt;/code&gt;</ept> was found; -1 if no character in <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">anyOf</ph><ept id=\"p2\">&lt;/code&gt;</ept> was found.","source":"The zero-based index position of the first occurrence in this instance where any character in <code>anyOf</code> was found; -1 if no character in <code>anyOf</code> was found."}],"pos":[381828,382004],"yaml":true},{"content":"<code>anyOf</code> is `null`.","nodes":[{"pos":[0,29],"content":"<ph id=\"ph1\">&lt;code&gt;anyOf&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>anyOf</code> is `null`."}],"pos":[382158,382188],"yaml":true},{"content":"<code>count</code> or <code>startIndex</code> is negative.  \n  \n -or-  \n  \n <code>count</code> + <code>startIndex</code> is greater than the number of characters in this instance.","nodes":[{"pos":[0,58],"content":"<ph id=\"ph1\">&lt;code&gt;count&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;startIndex&lt;/code&gt;</ph> is negative.","source":"<code>count</code> or <code>startIndex</code> is negative."},{"pos":[65,69],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[76,179],"content":"<ph id=\"ph1\">&lt;code&gt;count&lt;/code&gt;</ph><ph id=\"ph2\"> + &lt;code&gt;startIndex&lt;/code&gt;</ph> is greater than the number of characters in this instance.","source":"<code>count</code> + <code>startIndex</code> is greater than the number of characters in this instance."}],"pos":[382302,382488],"yaml":true},{"content":"Returns a new string in which a specified string is inserted at a specified index position in this instance.","nodes":[{"pos":[0,108],"content":"Returns a new string in which a specified string is inserted at a specified index position in this instance.","nodes":[{"content":"Returns a new string in which a specified string is inserted at a specified index position in this instance.","pos":[0,108]}]}],"pos":[383971,384080],"yaml":true},{"content":"If `startIndex` is equal to the length of this instance, `value` is appended to the end of this instance.  \n  \n> [!NOTE]\n>  This method does not modify the value of the current instance. Instead, it returns a new string in which `value` is inserted into the current instance.  \n  \n For example, the return value of `\"abc\".Insert(2, \"XYZ\")` is \"abXYZc\".","nodes":[{"pos":[0,105],"content":"If <ph id=\"ph1\">`startIndex`</ph> is equal to the length of this instance, <ph id=\"ph2\">`value`</ph> is appended to the end of this instance.","source":"If `startIndex` is equal to the length of this instance, `value` is appended to the end of this instance."},{"pos":[113,275],"content":"[!NOTE]\n This method does not modify the value of the current instance. Instead, it returns a new string in which `value` is inserted into the current instance.","leadings":["","> "],"nodes":[{"content":" This method does not modify the value of the current instance. Instead, it returns a new string in which `value` is inserted into the current instance.","pos":[8,160],"nodes":[{"content":"This method does not modify the value of the current instance.","pos":[1,63]},{"content":"Instead, it returns a new string in which <ph id=\"ph1\">`value`</ph> is inserted into the current instance.","pos":[64,152],"source":" Instead, it returns a new string in which `value` is inserted into the current instance."}]}]},{"pos":[282,352],"content":"For example, the return value of <ph id=\"ph1\">`\"abc\".Insert(2, \"XYZ\")`</ph> is \"abXYZc\".","source":"For example, the return value of `\"abc\".Insert(2, \"XYZ\")` is \"abXYZc\"."}],"pos":[384091,384457],"yaml":true,"extradata":"MT"},{"content":"The zero-based index position of the insertion.","nodes":[{"pos":[0,47],"content":"The zero-based index position of the insertion.","nodes":[{"content":"The zero-based index position of the insertion.","pos":[0,47]}]}],"pos":[385575,385623],"yaml":true},{"content":"The string to insert.","nodes":[{"pos":[0,21],"content":"The string to insert.","nodes":[{"content":"The string to insert.","pos":[0,21]}]}],"pos":[385684,385706],"yaml":true},{"content":"A new string that is equivalent to this instance, but with <code>value</code> inserted at position <code>startIndex</code>.","nodes":[{"pos":[0,123],"content":"A new string that is equivalent to this instance, but with <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept> inserted at position <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">startIndex</ph><ept id=\"p2\">&lt;/code&gt;</ept>.","source":"A new string that is equivalent to this instance, but with <code>value</code> inserted at position <code>startIndex</code>."}],"pos":[385763,385887],"yaml":true},{"content":"<code>value</code> is `null`.","nodes":[{"pos":[0,29],"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>value</code> is `null`."}],"pos":[386037,386067],"yaml":true},{"content":"<code>startIndex</code> is negative or greater than the length of this instance.","nodes":[{"pos":[0,80],"content":"<ph id=\"ph1\">&lt;code&gt;startIndex&lt;/code&gt;</ph> is negative or greater than the length of this instance.","source":"<code>startIndex</code> is negative or greater than the length of this instance."}],"pos":[386181,386262],"yaml":true},{"content":"Retrieves the system's reference to the specified <xref href=\"System.String\"></xref>.","nodes":[{"pos":[0,85],"content":"Retrieves the system's reference to the specified <ph id=\"ph1\">&lt;xref href=\"System.String\"&gt;&lt;/xref&gt;</ph>.","source":"Retrieves the system's reference to the specified <xref href=\"System.String\"></xref>."}],"pos":[387702,387788],"yaml":true},{"content":"The common language runtime conserves string storage by maintaining a table, called the intern pool, that contains a single reference to each unique literal string declared or created programmatically in your program. Consequently, an instance of a literal string with a particular value only exists once in the system.  \n  \n For example, if you assign the same literal string to several variables, the runtime retrieves the same reference to the literal string from the intern pool and assigns it to each variable.  \n  \n The <xref:System.String.Intern%2A> method uses the intern pool to search for a string equal to the value of `str`. If such a string exists, its reference in the intern pool is returned. If the string does not exist, a reference to `str` is added to the intern pool, then that reference is returned.  \n  \n In the following example, the string s1, which has a value of \"MyTest\", is already interned because it is a literal in the program. The <xref:System.Text.StringBuilder?displayProperty=fullName> class generates a new string object that has the same value as s1. A reference to that string is assigned to s2. The <xref:System.String.Intern%2A> method searches for a string that has the same value as s2. Because such a string exists, the method returns the same reference that is assigned to s1. That reference is then assigned to s3. References s1 and s2 compare unequal because they refer to different objects; references s1 and s3 compare equal because they refer to the same string.  \n  \n [!code-csharp[System.String.Intern#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Intern/cs/Intern1.cs#1)]\n [!code-vb[System.String.Intern#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Intern/vb/Intern1.vb#1)]  \n  \n Compare this method to the <xref:System.String.IsInterned%2A> method.  \n  \n## Version Considerations  \n In the [!INCLUDE[net_v35SP1_long](~/includes/net-v35sp1-long-md.md)], the <xref:System.String.Intern%2A> method reverts to its behavior in the .NET Framework 1.0 and 1.1 with regard to interning the empty string. In the following example, the variable `str1` is assigned a reference to <xref:System.String.Empty>, and the variable `str2` is assigned the reference to <xref:System.String.Empty> that is returned by calling the <xref:System.String.Intern%2A> method after converting a <xref:System.Text.StringBuilder> object whose value is <xref:System.String.Empty> to a string. Then the references contained in `str1` and `str2` are compared for equality.  \n  \n [!code-csharp[System.String.Intern#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Intern/cs/Intern2.cs#2)]\n [!code-vb[System.String.Intern#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Intern/vb/Intern2.vb#2)]  \n  \n In the [!INCLUDE[net_v10_short](~/includes/net-v10-short-md.md)], [!INCLUDE[net_v11_short](~/includes/net-v11-short-md.md)], and [!INCLUDE[net_v35SP1_short](~/includes/net-v35sp1-short-md.md)], `str1` and `str2` are equal. In the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)] and [!INCLUDE[net_v30_long](~/includes/net-v30-long-md.md)], `str1` and `str2` are not equal.  \n  \n## Performance Considerations  \n If you are trying to reduce the total amount of memory your application allocates, keep in mind that interning a string has two unwanted side effects. First, the memory allocated for interned <xref:System.String> objects is not likely be released until the common language runtime (CLR) terminates. The reason is that the CLR's reference to the interned <xref:System.String> object can persist after your application, or even your application domain, terminates. Second, to intern a string, you must first create the string. The memory used by the <xref:System.String> object must still be allocated, even though the memory will eventually be garbage collected.  \n  \n The .NET Framework version 2.0 introduces the <xref:System.Runtime.CompilerServices.CompilationRelaxations?displayProperty=fullName>enumeration member. The <xref:System.Runtime.CompilerServices.CompilationRelaxations.NoStringInterning> member marks an assembly as not requiring string-literal interning. You can apply <xref:System.Runtime.CompilerServices.CompilationRelaxations.NoStringInterning> to an assembly using the <xref:System.Runtime.CompilerServices.CompilationRelaxationsAttribute> attribute. Also, when you use the [Ngen.exe (Native Image Generator)](~/docs/framework/tools/ngen-exe-native-image-generator.md) to compile an assembly in advance of run time, strings are not interned across modules.","nodes":[{"pos":[0,319],"content":"The common language runtime conserves string storage by maintaining a table, called the intern pool, that contains a single reference to each unique literal string declared or created programmatically in your program. Consequently, an instance of a literal string with a particular value only exists once in the system.","nodes":[{"content":"The common language runtime conserves string storage by maintaining a table, called the intern pool, that contains a single reference to each unique literal string declared or created programmatically in your program. Consequently, an instance of a literal string with a particular value only exists once in the system.","pos":[0,319],"nodes":[{"content":"The common language runtime conserves string storage by maintaining a table, called the intern pool, that contains a single reference to each unique literal string declared or created programmatically in your program.","pos":[0,217]},{"content":"Consequently, an instance of a literal string with a particular value only exists once in the system.","pos":[218,319]}]}]},{"pos":[326,515],"content":"For example, if you assign the same literal string to several variables, the runtime retrieves the same reference to the literal string from the intern pool and assigns it to each variable.","nodes":[{"content":"For example, if you assign the same literal string to several variables, the runtime retrieves the same reference to the literal string from the intern pool and assigns it to each variable.","pos":[0,189]}]},{"pos":[522,820],"content":"The <xref:System.String.Intern%2A> method uses the intern pool to search for a string equal to the value of `str`. If such a string exists, its reference in the intern pool is returned. If the string does not exist, a reference to `str` is added to the intern pool, then that reference is returned.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.String.Intern%2A&gt;</ph> method uses the intern pool to search for a string equal to the value of <ph id=\"ph2\">`str`</ph>.","pos":[0,114],"source":"The <xref:System.String.Intern%2A> method uses the intern pool to search for a string equal to the value of `str`."},{"content":"If such a string exists, its reference in the intern pool is returned.","pos":[115,185]},{"content":"If the string does not exist, a reference to <ph id=\"ph1\">`str`</ph> is added to the intern pool, then that reference is returned.","pos":[186,298],"source":" If the string does not exist, a reference to `str` is added to the intern pool, then that reference is returned."}]},{"pos":[827,1511],"content":"In the following example, the string s1, which has a value of \"MyTest\", is already interned because it is a literal in the program. The <xref:System.Text.StringBuilder?displayProperty=fullName> class generates a new string object that has the same value as s1. A reference to that string is assigned to s2. The <xref:System.String.Intern%2A> method searches for a string that has the same value as s2. Because such a string exists, the method returns the same reference that is assigned to s1. That reference is then assigned to s3. References s1 and s2 compare unequal because they refer to different objects; references s1 and s3 compare equal because they refer to the same string.","nodes":[{"content":"In the following example, the string s1, which has a value of \"MyTest\", is already interned because it is a literal in the program. The <xref:System.Text.StringBuilder?displayProperty=fullName> class generates a new string object that has the same value as s1. A reference to that string is assigned to s2. The <xref:System.String.Intern%2A> method searches for a string that has the same value as s2. Because such a string exists, the method returns the same reference that is assigned to s1. That reference is then assigned to s3. References s1 and s2 compare unequal because they refer to different objects; references s1 and s3 compare equal because they refer to the same string.","pos":[0,684],"nodes":[{"content":"In the following example, the string s1, which has a value of \"MyTest\", is already interned because it is a literal in the program.","pos":[0,131]},{"content":"The <ph id=\"ph1\">&lt;xref:System.Text.StringBuilder?displayProperty=fullName&gt;</ph> class generates a new string object that has the same value as s1.","pos":[132,260],"source":" The <xref:System.Text.StringBuilder?displayProperty=fullName> class generates a new string object that has the same value as s1."},{"content":"A reference to that string is assigned to s2.","pos":[261,306]},{"content":"The <ph id=\"ph1\">&lt;xref:System.String.Intern%2A&gt;</ph> method searches for a string that has the same value as s2.","pos":[307,401],"source":" The <xref:System.String.Intern%2A> method searches for a string that has the same value as s2."},{"content":"Because such a string exists, the method returns the same reference that is assigned to s1.","pos":[402,493]},{"content":"That reference is then assigned to s3.","pos":[494,532]},{"content":"References s1 and s2 compare unequal because they refer to different objects; references s1 and s3 compare equal because they refer to the same string.","pos":[533,684]}]}]},{"pos":[1518,1771],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>System.String.Intern#1<ept id=\"p2\">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Intern/cs/Intern1.cs#1)</ept><ept id=\"p1\">]</ept> <bpt id=\"p3\">[!code-vb</bpt><bpt id=\"p4\">[</bpt>System.String.Intern#1<ept id=\"p4\">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Intern/vb/Intern1.vb#1)</ept><ept id=\"p3\">]</ept>","source":"[!code-csharp[System.String.Intern#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Intern/cs/Intern1.cs#1)]\n [!code-vb[System.String.Intern#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Intern/vb/Intern1.vb#1)]"},{"pos":[1778,1847],"content":"Compare this method to the <xref:System.String.IsInterned%2A> method.","nodes":[{"content":"Compare this method to the <ph id=\"ph1\">&lt;xref:System.String.IsInterned%2A&gt;</ph> method.","pos":[0,69],"source":"Compare this method to the <xref:System.String.IsInterned%2A> method."}]},{"pos":[1856,1878],"content":"Version Considerations","linkify":"Version Considerations","nodes":[{"content":"Version Considerations","pos":[0,22]}]},{"pos":[1882,2537],"content":"In the [!INCLUDE[net_v35SP1_long](~/includes/net-v35sp1-long-md.md)], the <xref:System.String.Intern%2A> method reverts to its behavior in the .NET Framework 1.0 and 1.1 with regard to interning the empty string. In the following example, the variable `str1` is assigned a reference to <xref:System.String.Empty>, and the variable `str2` is assigned the reference to <xref:System.String.Empty> that is returned by calling the <xref:System.String.Intern%2A> method after converting a <xref:System.Text.StringBuilder> object whose value is <xref:System.String.Empty> to a string. Then the references contained in `str1` and `str2` are compared for equality.","nodes":[{"content":"In the <ph id=\"ph1\">[!INCLUDE[net_v35SP1_long](~/includes/net-v35sp1-long-md.md)]</ph>, the <ph id=\"ph2\">&lt;xref:System.String.Intern%2A&gt;</ph> method reverts to its behavior in the .NET Framework 1.0 and 1.1 with regard to interning the empty string.","pos":[0,212],"source":"In the [!INCLUDE[net_v35SP1_long](~/includes/net-v35sp1-long-md.md)], the <xref:System.String.Intern%2A> method reverts to its behavior in the .NET Framework 1.0 and 1.1 with regard to interning the empty string."},{"content":"In the following example, the variable <ph id=\"ph1\">`str1`</ph> is assigned a reference to <ph id=\"ph2\">&lt;xref:System.String.Empty&gt;</ph>, and the variable <ph id=\"ph3\">`str2`</ph> is assigned the reference to <ph id=\"ph4\">&lt;xref:System.String.Empty&gt;</ph> that is returned by calling the <ph id=\"ph5\">&lt;xref:System.String.Intern%2A&gt;</ph> method after converting a <ph id=\"ph6\">&lt;xref:System.Text.StringBuilder&gt;</ph> object whose value is <ph id=\"ph7\">&lt;xref:System.String.Empty&gt;</ph> to a string.","pos":[213,577],"source":" In the following example, the variable `str1` is assigned a reference to <xref:System.String.Empty>, and the variable `str2` is assigned the reference to <xref:System.String.Empty> that is returned by calling the <xref:System.String.Intern%2A> method after converting a <xref:System.Text.StringBuilder> object whose value is <xref:System.String.Empty> to a string."},{"content":"Then the references contained in <ph id=\"ph1\">`str1`</ph> and <ph id=\"ph2\">`str2`</ph> are compared for equality.","pos":[578,655],"source":" Then the references contained in `str1` and `str2` are compared for equality."}]},{"pos":[2544,2797],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>System.String.Intern#2<ept id=\"p2\">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Intern/cs/Intern2.cs#2)</ept><ept id=\"p1\">]</ept> <bpt id=\"p3\">[!code-vb</bpt><bpt id=\"p4\">[</bpt>System.String.Intern#2<ept id=\"p4\">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Intern/vb/Intern2.vb#2)</ept><ept id=\"p3\">]</ept>","source":"[!code-csharp[System.String.Intern#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Intern/cs/Intern2.cs#2)]\n [!code-vb[System.String.Intern#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Intern/vb/Intern2.vb#2)]"},{"pos":[2804,3189],"content":"In the [!INCLUDE[net_v10_short](~/includes/net-v10-short-md.md)], [!INCLUDE[net_v11_short](~/includes/net-v11-short-md.md)], and [!INCLUDE[net_v35SP1_short](~/includes/net-v35sp1-short-md.md)], `str1` and `str2` are equal. In the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)] and [!INCLUDE[net_v30_long](~/includes/net-v30-long-md.md)], `str1` and `str2` are not equal.","nodes":[{"content":"In the <ph id=\"ph1\">[!INCLUDE[net_v10_short](~/includes/net-v10-short-md.md)]</ph>, <ph id=\"ph2\">[!INCLUDE[net_v11_short](~/includes/net-v11-short-md.md)]</ph>, and <ph id=\"ph3\">[!INCLUDE[net_v35SP1_short](~/includes/net-v35sp1-short-md.md)]</ph>, <ph id=\"ph4\">`str1`</ph> and <ph id=\"ph5\">`str2`</ph> are equal.","pos":[0,222],"source":"In the [!INCLUDE[net_v10_short](~/includes/net-v10-short-md.md)], [!INCLUDE[net_v11_short](~/includes/net-v11-short-md.md)], and [!INCLUDE[net_v35SP1_short](~/includes/net-v35sp1-short-md.md)], `str1` and `str2` are equal."},{"content":"In the <ph id=\"ph1\">[!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]</ph> and <ph id=\"ph2\">[!INCLUDE[net_v30_long](~/includes/net-v30-long-md.md)]</ph>, <ph id=\"ph3\">`str1`</ph> and <ph id=\"ph4\">`str2`</ph> are not equal.","pos":[223,385],"source":" In the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)] and [!INCLUDE[net_v30_long](~/includes/net-v30-long-md.md)], `str1` and `str2` are not equal."}]},{"pos":[3198,3224],"content":"Performance Considerations","linkify":"Performance Considerations","nodes":[{"content":"Performance Considerations","pos":[0,26]}]},{"pos":[3228,3889],"content":"If you are trying to reduce the total amount of memory your application allocates, keep in mind that interning a string has two unwanted side effects. First, the memory allocated for interned <xref:System.String> objects is not likely be released until the common language runtime (CLR) terminates. The reason is that the CLR's reference to the interned <xref:System.String> object can persist after your application, or even your application domain, terminates. Second, to intern a string, you must first create the string. The memory used by the <xref:System.String> object must still be allocated, even though the memory will eventually be garbage collected.","nodes":[{"content":"If you are trying to reduce the total amount of memory your application allocates, keep in mind that interning a string has two unwanted side effects. First, the memory allocated for interned <xref:System.String> objects is not likely be released until the common language runtime (CLR) terminates. The reason is that the CLR's reference to the interned <xref:System.String> object can persist after your application, or even your application domain, terminates. Second, to intern a string, you must first create the string. The memory used by the <xref:System.String> object must still be allocated, even though the memory will eventually be garbage collected.","pos":[0,661],"nodes":[{"content":"If you are trying to reduce the total amount of memory your application allocates, keep in mind that interning a string has two unwanted side effects.","pos":[0,150]},{"content":"First, the memory allocated for interned <ph id=\"ph1\">&lt;xref:System.String&gt;</ph> objects is not likely be released until the common language runtime (CLR) terminates.","pos":[151,298],"source":" First, the memory allocated for interned <xref:System.String> objects is not likely be released until the common language runtime (CLR) terminates."},{"content":"The reason is that the CLR's reference to the interned <ph id=\"ph1\">&lt;xref:System.String&gt;</ph> object can persist after your application, or even your application domain, terminates.","pos":[299,462],"source":" The reason is that the CLR's reference to the interned <xref:System.String> object can persist after your application, or even your application domain, terminates."},{"content":"Second, to intern a string, you must first create the string.","pos":[463,524]},{"content":"The memory used by the <ph id=\"ph1\">&lt;xref:System.String&gt;</ph> object must still be allocated, even though the memory will eventually be garbage collected.","pos":[525,661],"source":" The memory used by the <xref:System.String> object must still be allocated, even though the memory will eventually be garbage collected."}]}]},{"pos":[3896,4606],"content":"The .NET Framework version 2.0 introduces the <xref:System.Runtime.CompilerServices.CompilationRelaxations?displayProperty=fullName>enumeration member. The <xref:System.Runtime.CompilerServices.CompilationRelaxations.NoStringInterning> member marks an assembly as not requiring string-literal interning. You can apply <xref:System.Runtime.CompilerServices.CompilationRelaxations.NoStringInterning> to an assembly using the <xref:System.Runtime.CompilerServices.CompilationRelaxationsAttribute> attribute. Also, when you use the [Ngen.exe (Native Image Generator)](~/docs/framework/tools/ngen-exe-native-image-generator.md) to compile an assembly in advance of run time, strings are not interned across modules.","nodes":[{"content":"The .NET Framework version 2.0 introduces the <ph id=\"ph1\">&lt;xref:System.Runtime.CompilerServices.CompilationRelaxations?displayProperty=fullName&gt;</ph>enumeration member.","pos":[0,151],"source":"The .NET Framework version 2.0 introduces the <xref:System.Runtime.CompilerServices.CompilationRelaxations?displayProperty=fullName>enumeration member."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Runtime.CompilerServices.CompilationRelaxations.NoStringInterning&gt;</ph> member marks an assembly as not requiring string-literal interning.","pos":[152,303],"source":" The <xref:System.Runtime.CompilerServices.CompilationRelaxations.NoStringInterning> member marks an assembly as not requiring string-literal interning."},{"content":"You can apply <ph id=\"ph1\">&lt;xref:System.Runtime.CompilerServices.CompilationRelaxations.NoStringInterning&gt;</ph> to an assembly using the <ph id=\"ph2\">&lt;xref:System.Runtime.CompilerServices.CompilationRelaxationsAttribute&gt;</ph> attribute.","pos":[304,504],"source":" You can apply <xref:System.Runtime.CompilerServices.CompilationRelaxations.NoStringInterning> to an assembly using the <xref:System.Runtime.CompilerServices.CompilationRelaxationsAttribute> attribute."},{"content":"Also, when you use the <bpt id=\"p1\">[</bpt>Ngen.exe (Native Image Generator)<ept id=\"p1\">](~/docs/framework/tools/ngen-exe-native-image-generator.md)</ept> to compile an assembly in advance of run time, strings are not interned across modules.","pos":[505,710],"source":" Also, when you use the [Ngen.exe (Native Image Generator)](~/docs/framework/tools/ngen-exe-native-image-generator.md) to compile an assembly in advance of run time, strings are not interned across modules."}]}],"pos":[387799,392434],"yaml":true,"extradata":"MT"},{"content":"A string to search for in the intern pool.","nodes":[{"pos":[0,42],"content":"A string to search for in the intern pool.","nodes":[{"content":"A string to search for in the intern pool.","pos":[0,42]}]}],"pos":[393076,393119],"yaml":true},{"content":"The system's reference to <code>str</code>, if it is interned; otherwise, a new reference to a string with the value of <code>str</code>.","nodes":[{"pos":[0,137],"content":"The system's reference to <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">str</ph><ept id=\"p1\">&lt;/code&gt;</ept>, if it is interned; otherwise, a new reference to a string with the value of <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">str</ph><ept id=\"p2\">&lt;/code&gt;</ept>.","source":"The system's reference to <code>str</code>, if it is interned; otherwise, a new reference to a string with the value of <code>str</code>."}],"pos":[393176,393314],"yaml":true},{"content":"<code>str</code> is `null`.","nodes":[{"pos":[0,27],"content":"<ph id=\"ph1\">&lt;code&gt;str&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>str</code> is `null`."}],"pos":[393464,393492],"yaml":true},{"content":"Retrieves a reference to a specified <xref href=\"System.String\"></xref>.","nodes":[{"pos":[0,72],"content":"Retrieves a reference to a specified <ph id=\"ph1\">&lt;xref href=\"System.String\"&gt;&lt;/xref&gt;</ph>.","source":"Retrieves a reference to a specified <xref href=\"System.String\"></xref>."}],"pos":[394612,394685],"yaml":true},{"content":"The common language runtime automatically maintains a table, called the intern pool, which contains a single instance of each unique literal string constant declared in a program, as well as any unique instance of <xref:System.String> you add programmatically by calling the <xref:System.String.Intern%2A> method.  \n  \n The intern pool conserves string storage. If you assign a literal string constant to several variables, each variable is set to reference the same constant in the intern pool instead of referencing several different instances of <xref:System.String> that have identical values.  \n  \n This method looks up `str` in the intern pool. If `str` has already been interned, a reference to that instance is returned; otherwise, `null` is returned.  \n  \n Compare this method to the <xref:System.String.Intern%2A> method.  \n  \n This method does not return a Boolean value. If you call the method because you want a Boolean value that indicates whether a particular string is interned, you can use code such as the following.  \n  \n [!code-csharp[System.String.IsInterned#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.isinterned/cs/isinternedex1.cs#1)]\n [!code-vb[System.String.IsInterned#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.string.isinterned/vb/isinternedex1.vb#1)]  \n  \n> [!NOTE]\n>  Starting with the .NET Framework version 2.0, you can override the use of the intern pool when you use the [Ngen.exe (Native Image Generator)](~/docs/framework/tools/ngen-exe-native-image-generator.md) to install an assembly to the native image cache on a local computer. For more information, see Performance Considerations in the Remarks section for the <xref:System.String.Intern%2A> property.","nodes":[{"pos":[0,313],"content":"The common language runtime automatically maintains a table, called the intern pool, which contains a single instance of each unique literal string constant declared in a program, as well as any unique instance of <xref:System.String> you add programmatically by calling the <xref:System.String.Intern%2A> method.","nodes":[{"content":"The common language runtime automatically maintains a table, called the intern pool, which contains a single instance of each unique literal string constant declared in a program, as well as any unique instance of <ph id=\"ph1\">&lt;xref:System.String&gt;</ph> you add programmatically by calling the <ph id=\"ph2\">&lt;xref:System.String.Intern%2A&gt;</ph> method.","pos":[0,313],"source":"The common language runtime automatically maintains a table, called the intern pool, which contains a single instance of each unique literal string constant declared in a program, as well as any unique instance of <xref:System.String> you add programmatically by calling the <xref:System.String.Intern%2A> method."}]},{"pos":[320,597],"content":"The intern pool conserves string storage. If you assign a literal string constant to several variables, each variable is set to reference the same constant in the intern pool instead of referencing several different instances of <xref:System.String> that have identical values.","nodes":[{"content":"The intern pool conserves string storage. If you assign a literal string constant to several variables, each variable is set to reference the same constant in the intern pool instead of referencing several different instances of <xref:System.String> that have identical values.","pos":[0,277],"nodes":[{"content":"The intern pool conserves string storage.","pos":[0,41]},{"content":"If you assign a literal string constant to several variables, each variable is set to reference the same constant in the intern pool instead of referencing several different instances of <ph id=\"ph1\">&lt;xref:System.String&gt;</ph> that have identical values.","pos":[42,277],"source":" If you assign a literal string constant to several variables, each variable is set to reference the same constant in the intern pool instead of referencing several different instances of <xref:System.String> that have identical values."}]}]},{"pos":[604,759],"content":"This method looks up `str` in the intern pool. If `str` has already been interned, a reference to that instance is returned; otherwise, `null` is returned.","nodes":[{"content":"This method looks up <ph id=\"ph1\">`str`</ph> in the intern pool.","pos":[0,46],"source":"This method looks up `str` in the intern pool."},{"content":"If <ph id=\"ph1\">`str`</ph> has already been interned, a reference to that instance is returned; otherwise, <ph id=\"ph2\">`null`</ph> is returned.","pos":[47,155],"source":" If `str` has already been interned, a reference to that instance is returned; otherwise, `null` is returned."}]},{"pos":[766,831],"content":"Compare this method to the <xref:System.String.Intern%2A> method.","nodes":[{"content":"Compare this method to the <ph id=\"ph1\">&lt;xref:System.String.Intern%2A&gt;</ph> method.","pos":[0,65],"source":"Compare this method to the <xref:System.String.Intern%2A> method."}]},{"pos":[838,1034],"content":"This method does not return a Boolean value. If you call the method because you want a Boolean value that indicates whether a particular string is interned, you can use code such as the following.","nodes":[{"content":"This method does not return a Boolean value. If you call the method because you want a Boolean value that indicates whether a particular string is interned, you can use code such as the following.","pos":[0,196],"nodes":[{"content":"This method does not return a Boolean value.","pos":[0,44]},{"content":"If you call the method because you want a Boolean value that indicates whether a particular string is interned, you can use code such as the following.","pos":[45,196]}]}]},{"pos":[1041,1322],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>System.String.IsInterned#1<ept id=\"p2\">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.isinterned/cs/isinternedex1.cs#1)</ept><ept id=\"p1\">]</ept> <bpt id=\"p3\">[!code-vb</bpt><bpt id=\"p4\">[</bpt>System.String.IsInterned#1<ept id=\"p4\">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.string.isinterned/vb/isinternedex1.vb#1)</ept><ept id=\"p3\">]</ept>","source":"[!code-csharp[System.String.IsInterned#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.isinterned/cs/isinternedex1.cs#1)]\n [!code-vb[System.String.IsInterned#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.string.isinterned/vb/isinternedex1.vb#1)]"},{"pos":[1330,1737],"content":"[!NOTE]\n Starting with the .NET Framework version 2.0, you can override the use of the intern pool when you use the [Ngen.exe (Native Image Generator)](~/docs/framework/tools/ngen-exe-native-image-generator.md) to install an assembly to the native image cache on a local computer. For more information, see Performance Considerations in the Remarks section for the <xref:System.String.Intern%2A> property.","leadings":["","> "],"nodes":[{"content":" Starting with the .NET Framework version 2.0, you can override the use of the intern pool when you use the [Ngen.exe (Native Image Generator)](~/docs/framework/tools/ngen-exe-native-image-generator.md) to install an assembly to the native image cache on a local computer. For more information, see Performance Considerations in the Remarks section for the <xref:System.String.Intern%2A> property.","pos":[8,405],"nodes":[{"content":"Starting with the .NET Framework version 2.0, you can override the use of the intern pool when you use the <bpt id=\"p1\">[</bpt>Ngen.exe (Native Image Generator)<ept id=\"p1\">](~/docs/framework/tools/ngen-exe-native-image-generator.md)</ept> to install an assembly to the native image cache on a local computer.","pos":[1,272],"source":" Starting with the .NET Framework version 2.0, you can override the use of the intern pool when you use the [Ngen.exe (Native Image Generator)](~/docs/framework/tools/ngen-exe-native-image-generator.md) to install an assembly to the native image cache on a local computer."},{"content":"For more information, see Performance Considerations in the Remarks section for the <ph id=\"ph1\">&lt;xref:System.String.Intern%2A&gt;</ph> property.","pos":[273,397],"source":" For more information, see Performance Considerations in the Remarks section for the <xref:System.String.Intern%2A> property."}]}]}],"pos":[394696,396450],"yaml":true,"extradata":"MT"},{"content":"The string to search for in the intern pool.","nodes":[{"pos":[0,44],"content":"The string to search for in the intern pool.","nodes":[{"content":"The string to search for in the intern pool.","pos":[0,44]}]}],"pos":[397050,397095],"yaml":true},{"content":"A reference to <code>str</code> if it is in the common language runtime intern pool; otherwise, `null`.","nodes":[{"pos":[0,103],"content":"A reference to <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">str</ph><ept id=\"p1\">&lt;/code&gt;</ept> if it is in the common language runtime intern pool; otherwise, <ph id=\"ph2\">`null`</ph>.","source":"A reference to <code>str</code> if it is in the common language runtime intern pool; otherwise, `null`."}],"pos":[397152,397256],"yaml":true},{"content":"<code>str</code> is `null`.","nodes":[{"pos":[0,27],"content":"<ph id=\"ph1\">&lt;code&gt;str&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>str</code> is `null`."}],"pos":[397410,397438],"yaml":true},{"content":"Indicates whether this string is in Unicode normalization form C.","nodes":[{"pos":[0,65],"content":"Indicates whether this string is in Unicode normalization form C.","nodes":[{"content":"Indicates whether this string is in Unicode normalization form C.","pos":[0,65]}]}],"pos":[398507,398573],"yaml":true},{"content":"Some Unicode characters have multiple equivalent binary representations consisting of sets of combining and/or composite Unicode characters. The existence of multiple representations for a single character complicates searching, sorting, matching, and other operations.  \n  \n The Unicode standard defines a process called normalization that returns one binary representation when given any of the equivalent binary representations of a character. Normalization can be performed with several algorithms, called normalization forms, that obey different rules. The .NET Framework currently supports normalization forms C, D, KC, and KD.  \n  \n For a description of supported Unicode normalization forms, see <xref:System.Text.NormalizationForm?displayProperty=fullName>.","nodes":[{"pos":[0,269],"content":"Some Unicode characters have multiple equivalent binary representations consisting of sets of combining and/or composite Unicode characters. The existence of multiple representations for a single character complicates searching, sorting, matching, and other operations.","nodes":[{"content":"Some Unicode characters have multiple equivalent binary representations consisting of sets of combining and/or composite Unicode characters. The existence of multiple representations for a single character complicates searching, sorting, matching, and other operations.","pos":[0,269],"nodes":[{"content":"Some Unicode characters have multiple equivalent binary representations consisting of sets of combining and/or composite Unicode characters.","pos":[0,140]},{"content":"The existence of multiple representations for a single character complicates searching, sorting, matching, and other operations.","pos":[141,269]}]}]},{"pos":[276,633],"content":"The Unicode standard defines a process called normalization that returns one binary representation when given any of the equivalent binary representations of a character. Normalization can be performed with several algorithms, called normalization forms, that obey different rules. The .NET Framework currently supports normalization forms C, D, KC, and KD.","nodes":[{"content":"The Unicode standard defines a process called normalization that returns one binary representation when given any of the equivalent binary representations of a character. Normalization can be performed with several algorithms, called normalization forms, that obey different rules. The .NET Framework currently supports normalization forms C, D, KC, and KD.","pos":[0,357],"nodes":[{"content":"The Unicode standard defines a process called normalization that returns one binary representation when given any of the equivalent binary representations of a character.","pos":[0,170]},{"content":"Normalization can be performed with several algorithms, called normalization forms, that obey different rules.","pos":[171,281]},{"content":"The .NET Framework currently supports normalization forms C, D, KC, and KD.","pos":[282,357]}]}]},{"pos":[640,766],"content":"For a description of supported Unicode normalization forms, see <xref:System.Text.NormalizationForm?displayProperty=fullName>.","nodes":[{"content":"For a description of supported Unicode normalization forms, see <ph id=\"ph1\">&lt;xref:System.Text.NormalizationForm?displayProperty=fullName&gt;</ph>.","pos":[0,126],"source":"For a description of supported Unicode normalization forms, see <xref:System.Text.NormalizationForm?displayProperty=fullName>."}]}],"pos":[398584,399357],"yaml":true,"extradata":"MT"},{"content":"`true` if this string is in normalization form C; otherwise, `false`.","nodes":[{"pos":[0,69],"content":"<ph id=\"ph1\">`true`</ph> if this string is in normalization form C; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` if this string is in normalization form C; otherwise, `false`."}],"pos":[399945,400017],"yaml":true},{"content":"The current instance contains invalid Unicode characters.","nodes":[{"pos":[0,57],"content":"The current instance contains invalid Unicode characters.","nodes":[{"content":"The current instance contains invalid Unicode characters.","pos":[0,57]}]}],"pos":[400165,400223],"yaml":true},{"content":"Indicates whether this string is in the specified Unicode normalization form.","nodes":[{"pos":[0,77],"content":"Indicates whether this string is in the specified Unicode normalization form.","nodes":[{"content":"Indicates whether this string is in the specified Unicode normalization form.","pos":[0,77]}]}],"pos":[401419,401497],"yaml":true},{"content":"Some Unicode characters have multiple equivalent binary representations consisting of sets of combining and/or composite Unicode characters. The existence of multiple representations for a single character complicates searching, sorting, matching, and other operations.  \n  \n The Unicode standard defines a process called normalization that returns one binary representation when given any of the equivalent binary representations of a character. Normalization can be performed with several algorithms, called normalization forms, that obey different rules. The .NET Framework currently supports normalization forms C, D, KC, and KD.  \n  \n For a description of supported Unicode normalization forms, see <xref:System.Text.NormalizationForm?displayProperty=fullName>.","nodes":[{"pos":[0,269],"content":"Some Unicode characters have multiple equivalent binary representations consisting of sets of combining and/or composite Unicode characters. The existence of multiple representations for a single character complicates searching, sorting, matching, and other operations.","nodes":[{"content":"Some Unicode characters have multiple equivalent binary representations consisting of sets of combining and/or composite Unicode characters. The existence of multiple representations for a single character complicates searching, sorting, matching, and other operations.","pos":[0,269],"nodes":[{"content":"Some Unicode characters have multiple equivalent binary representations consisting of sets of combining and/or composite Unicode characters.","pos":[0,140]},{"content":"The existence of multiple representations for a single character complicates searching, sorting, matching, and other operations.","pos":[141,269]}]}]},{"pos":[276,633],"content":"The Unicode standard defines a process called normalization that returns one binary representation when given any of the equivalent binary representations of a character. Normalization can be performed with several algorithms, called normalization forms, that obey different rules. The .NET Framework currently supports normalization forms C, D, KC, and KD.","nodes":[{"content":"The Unicode standard defines a process called normalization that returns one binary representation when given any of the equivalent binary representations of a character. Normalization can be performed with several algorithms, called normalization forms, that obey different rules. The .NET Framework currently supports normalization forms C, D, KC, and KD.","pos":[0,357],"nodes":[{"content":"The Unicode standard defines a process called normalization that returns one binary representation when given any of the equivalent binary representations of a character.","pos":[0,170]},{"content":"Normalization can be performed with several algorithms, called normalization forms, that obey different rules.","pos":[171,281]},{"content":"The .NET Framework currently supports normalization forms C, D, KC, and KD.","pos":[282,357]}]}]},{"pos":[640,766],"content":"For a description of supported Unicode normalization forms, see <xref:System.Text.NormalizationForm?displayProperty=fullName>.","nodes":[{"content":"For a description of supported Unicode normalization forms, see <ph id=\"ph1\">&lt;xref:System.Text.NormalizationForm?displayProperty=fullName&gt;</ph>.","pos":[0,126],"source":"For a description of supported Unicode normalization forms, see <xref:System.Text.NormalizationForm?displayProperty=fullName>."}]}],"pos":[401508,402281],"yaml":true,"extradata":"MT"},{"content":"A Unicode normalization form.","nodes":[{"pos":[0,29],"content":"A Unicode normalization form.","nodes":[{"content":"A Unicode normalization form.","pos":[0,29]}]}],"pos":[402958,402988],"yaml":true},{"content":"`true` if this string is in the normalization form specified by the <code>normalizationForm</code> parameter; otherwise, `false`.","nodes":[{"pos":[0,129],"content":"<ph id=\"ph1\">`true`</ph> if this string is in the normalization form specified by the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">normalizationForm</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter; otherwise, <ph id=\"ph3\">`false`</ph>.","source":"`true` if this string is in the normalization form specified by the <code>normalizationForm</code> parameter; otherwise, `false`."}],"pos":[403046,403178],"yaml":true},{"content":"The current instance contains invalid Unicode characters.","nodes":[{"pos":[0,57],"content":"The current instance contains invalid Unicode characters.","nodes":[{"content":"The current instance contains invalid Unicode characters.","pos":[0,57]}]}],"pos":[403326,403384],"yaml":true},{"content":"Indicates whether the specified string is `null` or an <xref href=\"System.String.Empty\"></xref> string.","nodes":[{"pos":[0,103],"content":"Indicates whether the specified string is <ph id=\"ph1\">`null`</ph> or an <ph id=\"ph2\">&lt;xref href=\"System.String.Empty\"&gt;&lt;/xref&gt;</ph> string.","source":"Indicates whether the specified string is `null` or an <xref href=\"System.String.Empty\"></xref> string."}],"pos":[404522,404626],"yaml":true},{"content":"<xref:System.String.IsNullOrEmpty%2A> is a convenience method that enables you to simultaneously test whether a <xref:System.String> is `null` or its value is <xref:System.String.Empty>. It is equivalent to the following code:  \n  \n [!code-cpp[System.String.IsNullOrEmpty#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.string.isnullorempty/cpp/isnullorempty1.cpp#1)]\n [!code-csharp[System.String.IsNullOrEmpty#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.isnullorempty/cs/isnullorempty1.cs#1)]\n [!code-vb[System.String.IsNullOrEmpty#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.string.isnullorempty/vb/isnullorempty1.vb#1)]  \n  \n You can use the <xref:System.String.IsNullOrWhiteSpace%2A> method to test whether a string is `null`, its value is <xref:System.String.Empty?displayProperty=fullName>,  or it consists only of white-space characters.  \n  \n## What is a null string?  \n A string is `null` if it has not been assigned a value (in C++ and Visual Basic) or if has explicitly been assigned a value of `null`. Although the [composite formatting](~/docs/standard/base-types/composite-formatting.md) feature can gracefully handle a null string, as the following example shows, attempting to call one if its members throws a <xref:System.NullReferenceException>.  \n  \n [!code-cpp[System.String.IsNullOrEmpty#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.string.isnullorempty/cpp/NullString1.cpp#2)]\n [!code-csharp[System.String.IsNullOrEmpty#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.isnullorempty/cs/NullString1.cs#2)]\n [!code-vb[System.String.IsNullOrEmpty#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.string.isnullorempty/vb/NullString1.vb#2)]  \n  \n## What is an empty string?  \n A string is empty if it  is explicitly assigned an empty string (\"\") or <xref:System.String.Empty?displayProperty=fullName>. An empty string has a <xref:System.String.Length%2A> of 0.  The following example creates an empty string and displays its value and its length.  \n  \n [!code-cpp[System.String.IsNullOrEmpty#3](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.string.isnullorempty/cpp/NullString1.cpp#3)]\n [!code-csharp[System.String.IsNullOrEmpty#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.isnullorempty/cs/NullString1.cs#3)]\n [!code-vb[System.String.IsNullOrEmpty#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.string.isnullorempty/vb/NullString1.vb#3)]","nodes":[{"pos":[0,226],"content":"<xref:System.String.IsNullOrEmpty%2A> is a convenience method that enables you to simultaneously test whether a <xref:System.String> is `null` or its value is <xref:System.String.Empty>. It is equivalent to the following code:","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.String.IsNullOrEmpty%2A&gt;</ph> is a convenience method that enables you to simultaneously test whether a <ph id=\"ph2\">&lt;xref:System.String&gt;</ph> is <ph id=\"ph3\">`null`</ph> or its value is <ph id=\"ph4\">&lt;xref:System.String.Empty&gt;</ph>.","pos":[0,186],"source":"<xref:System.String.IsNullOrEmpty%2A> is a convenience method that enables you to simultaneously test whether a <xref:System.String> is `null` or its value is <xref:System.String.Empty>."},{"content":"It is equivalent to the following code:","pos":[187,226]}]},{"pos":[233,672],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>System.String.IsNullOrEmpty#1<ept id=\"p2\">](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.string.isnullorempty/cpp/isnullorempty1.cpp#1)</ept><ept id=\"p1\">]</ept> <bpt id=\"p3\">[!code-csharp</bpt><bpt id=\"p4\">[</bpt>System.String.IsNullOrEmpty#1<ept id=\"p4\">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.isnullorempty/cs/isnullorempty1.cs#1)</ept><ept id=\"p3\">]</ept> <bpt id=\"p5\">[!code-vb</bpt><bpt id=\"p6\">[</bpt>System.String.IsNullOrEmpty#1<ept id=\"p6\">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.string.isnullorempty/vb/isnullorempty1.vb#1)</ept><ept id=\"p5\">]</ept>","source":"[!code-cpp[System.String.IsNullOrEmpty#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.string.isnullorempty/cpp/isnullorempty1.cpp#1)]\n [!code-csharp[System.String.IsNullOrEmpty#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.isnullorempty/cs/isnullorempty1.cs#1)]\n [!code-vb[System.String.IsNullOrEmpty#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.string.isnullorempty/vb/isnullorempty1.vb#1)]"},{"pos":[679,894],"content":"You can use the <ph id=\"ph1\">&lt;xref:System.String.IsNullOrWhiteSpace%2A&gt;</ph> method to test whether a string is <ph id=\"ph2\">`null`</ph>, its value is <ph id=\"ph3\">&lt;xref:System.String.Empty?displayProperty=fullName&gt;</ph>,  or it consists only of white-space characters.","source":"You can use the <xref:System.String.IsNullOrWhiteSpace%2A> method to test whether a string is `null`, its value is <xref:System.String.Empty?displayProperty=fullName>,  or it consists only of white-space characters."},{"pos":[903,925],"content":"What is a null string?","linkify":"What is a null string?","nodes":[{"content":"What is a null string?","pos":[0,22]}]},{"pos":[929,1313],"content":"A string is `null` if it has not been assigned a value (in C++ and Visual Basic) or if has explicitly been assigned a value of `null`. Although the [composite formatting](~/docs/standard/base-types/composite-formatting.md) feature can gracefully handle a null string, as the following example shows, attempting to call one if its members throws a <xref:System.NullReferenceException>.","nodes":[{"content":"A string is <ph id=\"ph1\">`null`</ph> if it has not been assigned a value (in C++ and Visual Basic) or if has explicitly been assigned a value of <ph id=\"ph2\">`null`</ph>.","pos":[0,134],"source":"A string is `null` if it has not been assigned a value (in C++ and Visual Basic) or if has explicitly been assigned a value of `null`."},{"content":"Although the <bpt id=\"p1\">[</bpt>composite formatting<ept id=\"p1\">](~/docs/standard/base-types/composite-formatting.md)</ept> feature can gracefully handle a null string, as the following example shows, attempting to call one if its members throws a <ph id=\"ph1\">&lt;xref:System.NullReferenceException&gt;</ph>.","pos":[135,384],"source":" Although the [composite formatting](~/docs/standard/base-types/composite-formatting.md) feature can gracefully handle a null string, as the following example shows, attempting to call one if its members throws a <xref:System.NullReferenceException>."}]},{"pos":[1320,1750],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>System.String.IsNullOrEmpty#2<ept id=\"p2\">](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.string.isnullorempty/cpp/NullString1.cpp#2)</ept><ept id=\"p1\">]</ept> <bpt id=\"p3\">[!code-csharp</bpt><bpt id=\"p4\">[</bpt>System.String.IsNullOrEmpty#2<ept id=\"p4\">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.isnullorempty/cs/NullString1.cs#2)</ept><ept id=\"p3\">]</ept> <bpt id=\"p5\">[!code-vb</bpt><bpt id=\"p6\">[</bpt>System.String.IsNullOrEmpty#2<ept id=\"p6\">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.string.isnullorempty/vb/NullString1.vb#2)</ept><ept id=\"p5\">]</ept>","source":"[!code-cpp[System.String.IsNullOrEmpty#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.string.isnullorempty/cpp/NullString1.cpp#2)]\n [!code-csharp[System.String.IsNullOrEmpty#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.isnullorempty/cs/NullString1.cs#2)]\n [!code-vb[System.String.IsNullOrEmpty#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.string.isnullorempty/vb/NullString1.vb#2)]"},{"pos":[1759,1783],"content":"What is an empty string?","linkify":"What is an empty string?","nodes":[{"content":"What is an empty string?","pos":[0,24]}]},{"pos":[1787,2056],"content":"A string is empty if it  is explicitly assigned an empty string (\"\") or <xref:System.String.Empty?displayProperty=fullName>. An empty string has a <xref:System.String.Length%2A> of 0.  The following example creates an empty string and displays its value and its length.","nodes":[{"content":"A string is empty if it  is explicitly assigned an empty string (\"\") or <xref:System.String.Empty?displayProperty=fullName>. An empty string has a <xref:System.String.Length%2A> of 0.  The following example creates an empty string and displays its value and its length.","pos":[0,269],"nodes":[{"content":"A string is empty if it  is explicitly assigned an empty string (\"\") or <ph id=\"ph1\">&lt;xref:System.String.Empty?displayProperty=fullName&gt;</ph>.","pos":[0,124],"source":"A string is empty if it  is explicitly assigned an empty string (\"\") or <xref:System.String.Empty?displayProperty=fullName>."},{"content":"An empty string has a <ph id=\"ph1\">&lt;xref:System.String.Length%2A&gt;</ph> of 0.","pos":[125,183],"source":" An empty string has a <xref:System.String.Length%2A> of 0."},{"content":"The following example creates an empty string and displays its value and its length.","pos":[185,269]}]}]},{"pos":[2063,2493],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>System.String.IsNullOrEmpty#3<ept id=\"p2\">](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.string.isnullorempty/cpp/NullString1.cpp#3)</ept><ept id=\"p1\">]</ept> <bpt id=\"p3\">[!code-csharp</bpt><bpt id=\"p4\">[</bpt>System.String.IsNullOrEmpty#3<ept id=\"p4\">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.isnullorempty/cs/NullString1.cs#3)</ept><ept id=\"p3\">]</ept> <bpt id=\"p5\">[!code-vb</bpt><bpt id=\"p6\">[</bpt>System.String.IsNullOrEmpty#3<ept id=\"p6\">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.string.isnullorempty/vb/NullString1.vb#3)</ept><ept id=\"p5\">]</ept>","source":"[!code-cpp[System.String.IsNullOrEmpty#3](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.string.isnullorempty/cpp/NullString1.cpp#3)]\n [!code-csharp[System.String.IsNullOrEmpty#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.isnullorempty/cs/NullString1.cs#3)]\n [!code-vb[System.String.IsNullOrEmpty#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.string.isnullorempty/vb/NullString1.vb#3)]"}],"pos":[404637,407155],"yaml":true,"extradata":"MT"},{"content":"The string to test.","nodes":[{"pos":[0,19],"content":"The string to test.","nodes":[{"content":"The string to test.","pos":[0,19]}]}],"pos":[407805,407825],"yaml":true},{"content":"`true` if the <code>value</code> parameter is `null` or an empty string (\"\"); otherwise, `false`.","nodes":[{"pos":[0,97],"content":"<ph id=\"ph1\">`true`</ph> if the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is <ph id=\"ph3\">`null`</ph> or an empty string (\"\"); otherwise, <ph id=\"ph4\">`false`</ph>.","source":"`true` if the <code>value</code> parameter is `null` or an empty string (\"\"); otherwise, `false`."}],"pos":[407883,407983],"yaml":true},{"content":"Indicates whether a specified string is `null`, empty, or consists only of white-space characters.","nodes":[{"pos":[0,98],"content":"Indicates whether a specified string is <ph id=\"ph1\">`null`</ph>, empty, or consists only of white-space characters.","source":"Indicates whether a specified string is `null`, empty, or consists only of white-space characters."}],"pos":[409536,409635],"yaml":true},{"content":"<xref:System.String.IsNullOrWhiteSpace%2A> is a convenience method that is similar to the following  code, except that it offers superior performance:  \n  \n [!code-csharp[System.String.IsNullOrWhitespace#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.isnullorwhitespace/cs/isnullorwhitespace.cs#2)]\n [!code-vb[System.String.IsNullOrWhitespace#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.string.isnullorwhitespace/vb/isnullorwhitespace.vb#2)]  \n  \n White-space characters are defined by the Unicode standard. The <xref:System.String.IsNullOrWhiteSpace%2A> method interprets any character that returns a value of `true` when it is passed to the <xref:System.Char.IsWhiteSpace%2A?displayProperty=fullName> method as a white-space character.","nodes":[{"pos":[0,150],"content":"<xref:System.String.IsNullOrWhiteSpace%2A> is a convenience method that is similar to the following  code, except that it offers superior performance:","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.String.IsNullOrWhiteSpace%2A&gt;</ph> is a convenience method that is similar to the following  code, except that it offers superior performance:","pos":[0,150],"source":"<xref:System.String.IsNullOrWhiteSpace%2A> is a convenience method that is similar to the following  code, except that it offers superior performance:"}]},{"pos":[157,480],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>System.String.IsNullOrWhitespace#2<ept id=\"p2\">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.isnullorwhitespace/cs/isnullorwhitespace.cs#2)</ept><ept id=\"p1\">]</ept> <bpt id=\"p3\">[!code-vb</bpt><bpt id=\"p4\">[</bpt>System.String.IsNullOrWhitespace#2<ept id=\"p4\">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.string.isnullorwhitespace/vb/isnullorwhitespace.vb#2)</ept><ept id=\"p3\">]</ept>","source":"[!code-csharp[System.String.IsNullOrWhitespace#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.isnullorwhitespace/cs/isnullorwhitespace.cs#2)]\n [!code-vb[System.String.IsNullOrWhitespace#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.string.isnullorwhitespace/vb/isnullorwhitespace.vb#2)]"},{"pos":[487,776],"content":"White-space characters are defined by the Unicode standard. The <xref:System.String.IsNullOrWhiteSpace%2A> method interprets any character that returns a value of `true` when it is passed to the <xref:System.Char.IsWhiteSpace%2A?displayProperty=fullName> method as a white-space character.","nodes":[{"content":"White-space characters are defined by the Unicode standard.","pos":[0,59]},{"content":"The <ph id=\"ph1\">&lt;xref:System.String.IsNullOrWhiteSpace%2A&gt;</ph> method interprets any character that returns a value of <ph id=\"ph2\">`true`</ph> when it is passed to the <ph id=\"ph3\">&lt;xref:System.Char.IsWhiteSpace%2A?displayProperty=fullName&gt;</ph> method as a white-space character.","pos":[60,289],"source":" The <xref:System.String.IsNullOrWhiteSpace%2A> method interprets any character that returns a value of `true` when it is passed to the <xref:System.Char.IsWhiteSpace%2A?displayProperty=fullName> method as a white-space character."}]}],"pos":[409646,410430],"yaml":true,"extradata":"MT"},{"content":"The string to test.","nodes":[{"pos":[0,19],"content":"The string to test.","nodes":[{"content":"The string to test.","pos":[0,19]}]}],"pos":[411082,411102],"yaml":true},{"content":"`true` if the <code>value</code> parameter is `null` or <xref href=\"System.String.Empty\"></xref>, or if <code>value</code> consists exclusively of white-space characters.","nodes":[{"pos":[0,170],"content":"<ph id=\"ph1\">`true`</ph> if the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is <ph id=\"ph3\">`null`</ph> or <ph id=\"ph4\">&lt;xref href=\"System.String.Empty\"&gt;&lt;/xref&gt;</ph>, or if <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph5\">value</ph><ept id=\"p2\">&lt;/code&gt;</ept> consists exclusively of white-space characters.","source":"`true` if the <code>value</code> parameter is `null` or <xref href=\"System.String.Empty\"></xref>, or if <code>value</code> consists exclusively of white-space characters."}],"pos":[411160,411333],"yaml":true},{"content":"Concatenates the specified elements of a string array, using the specified separator between each element.","nodes":[{"pos":[0,106],"content":"Concatenates the specified elements of a string array, using the specified separator between each element.","nodes":[{"content":"Concatenates the specified elements of a string array, using the specified separator between each element.","pos":[0,106]}]}],"pos":[413005,413112],"yaml":true},{"content":"For example, if `separator` is \", \" and the elements of `value` are \"apple\", \"orange\", \"grape\", and \"pear\", `Join(separator, value, 1, 2)` returns \"orange, grape\".  \n  \n If `separator` is `null`, an empty string (<xref:System.String?displayProperty=fullName>) is used instead. If any element in `value` is `null`, an empty string is used instead.","nodes":[{"pos":[0,163],"content":"For example, if <ph id=\"ph1\">`separator`</ph> is \", \" and the elements of <ph id=\"ph2\">`value`</ph> are \"apple\", \"orange\", \"grape\", and \"pear\", <ph id=\"ph3\">`Join(separator, value, 1, 2)`</ph> returns \"orange, grape\".","source":"For example, if `separator` is \", \" and the elements of `value` are \"apple\", \"orange\", \"grape\", and \"pear\", `Join(separator, value, 1, 2)` returns \"orange, grape\"."},{"pos":[170,346],"content":"If `separator` is `null`, an empty string (<xref:System.String?displayProperty=fullName>) is used instead. If any element in `value` is `null`, an empty string is used instead.","nodes":[{"content":"If <ph id=\"ph1\">`separator`</ph> is <ph id=\"ph2\">`null`</ph>, an empty string (<ph id=\"ph3\">&lt;xref:System.String?displayProperty=fullName&gt;</ph>) is used instead.","pos":[0,106],"source":"If `separator` is `null`, an empty string (<xref:System.String?displayProperty=fullName>) is used instead."},{"content":"If any element in <ph id=\"ph1\">`value`</ph> is <ph id=\"ph2\">`null`</ph>, an empty string is used instead.","pos":[107,176],"source":" If any element in `value` is `null`, an empty string is used instead."}]}],"pos":[413123,413486],"yaml":true,"extradata":"MT"},{"content":"The string to use as a separator. <code>separator</code> is included in the returned string only if <code>value</code> has more than one element.","nodes":[{"pos":[0,145],"content":"The string to use as a separator. <code>separator</code> is included in the returned string only if <code>value</code> has more than one element.","nodes":[{"content":"The string to use as a separator.","pos":[0,33]},{"content":"<bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">separator</ph><ept id=\"p1\">&lt;/code&gt;</ept> is included in the returned string only if <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">value</ph><ept id=\"p2\">&lt;/code&gt;</ept> has more than one element.","pos":[34,145],"source":"<code>separator</code> is included in the returned string only if <code>value</code> has more than one element."}]}],"pos":[414089,414235],"yaml":true},{"content":"An array that contains the elements to concatenate.","nodes":[{"pos":[0,51],"content":"An array that contains the elements to concatenate.","nodes":[{"content":"An array that contains the elements to concatenate.","pos":[0,51]}]}],"pos":[414298,414350],"yaml":true},{"content":"The first element in <code>value</code> to use.","nodes":[{"pos":[0,47],"content":"The first element in <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept> to use.","source":"The first element in <code>value</code> to use."}],"pos":[414415,414463],"yaml":true},{"content":"The number of elements of <code>value</code> to use.","nodes":[{"pos":[0,52],"content":"The number of elements of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept> to use.","source":"The number of elements of <code>value</code> to use."}],"pos":[414523,414576],"yaml":true},{"content":"A string that consists of the strings in <code>value</code> delimited by the <code>separator</code> string.  \n  \n -or-  \n  \n <xref href=\"System.String.Empty\"></xref> if <code>count</code> is zero, <code>value</code> has no elements, or <code>separator</code> and all the elements of <code>value</code> are <xref href=\"System.String.Empty\"></xref>.","nodes":[{"pos":[0,107],"content":"A string that consists of the strings in <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept> delimited by the <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">separator</ph><ept id=\"p2\">&lt;/code&gt;</ept> string.","source":"A string that consists of the strings in <code>value</code> delimited by the <code>separator</code> string."},{"pos":[114,118],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[125,347],"content":"<ph id=\"ph1\">&lt;xref href=\"System.String.Empty\"&gt;&lt;/xref&gt;</ph> if <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">count</ph><ept id=\"p1\">&lt;/code&gt;</ept> is zero, <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph3\">value</ph><ept id=\"p2\">&lt;/code&gt;</ept> has no elements, or <bpt id=\"p3\">&lt;code&gt;</bpt><ph id=\"ph4\">separator</ph><ept id=\"p3\">&lt;/code&gt;</ept> and all the elements of <bpt id=\"p4\">&lt;code&gt;</bpt><ph id=\"ph5\">value</ph><ept id=\"p4\">&lt;/code&gt;</ept> are <ph id=\"ph6\">&lt;xref href=\"System.String.Empty\"&gt;&lt;/xref&gt;</ph>.","source":"<xref href=\"System.String.Empty\"></xref> if <code>count</code> is zero, <code>value</code> has no elements, or <code>separator</code> and all the elements of <code>value</code> are <xref href=\"System.String.Empty\"></xref>."}],"pos":[414633,414991],"yaml":true},{"content":"<code>value</code> is `null`.","nodes":[{"pos":[0,29],"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>value</code> is `null`."}],"pos":[415139,415169],"yaml":true},{"content":"<code>startIndex</code> or <code>count</code> is less than 0.  \n  \n -or-  \n  \n <code>startIndex</code> plus <code>count</code> is greater than the number of elements in <code>value</code>.","nodes":[{"pos":[0,61],"content":"<ph id=\"ph1\">&lt;code&gt;startIndex&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;count&lt;/code&gt;</ph> is less than 0.","source":"<code>startIndex</code> or <code>count</code> is less than 0."},{"pos":[68,72],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[79,188],"content":"<ph id=\"ph1\">&lt;code&gt;startIndex&lt;/code&gt;</ph> plus <ph id=\"ph2\">&lt;code&gt;count&lt;/code&gt;</ph> is greater than the number of elements in <ph id=\"ph3\">&lt;code&gt;value&lt;/code&gt;</ph>.","source":"<code>startIndex</code> plus <code>count</code> is greater than the number of elements in <code>value</code>."}],"pos":[415283,415478],"yaml":true},{"content":"Out of memory.","nodes":[{"pos":[0,14],"content":"Out of memory.","nodes":[{"content":"Out of memory.","pos":[0,14]}]}],"pos":[415578,415593],"yaml":true},{"content":"Concatenates all the elements of a string array, using the specified separator between each element.","nodes":[{"pos":[0,100],"content":"Concatenates all the elements of a string array, using the specified separator between each element.","nodes":[{"content":"Concatenates all the elements of a string array, using the specified separator between each element.","pos":[0,100]}]}],"pos":[417099,417200],"yaml":true},{"content":"For example, if `separator` is \", \" and the elements of `value` are \"apple\", \"orange\", \"grape\", and \"pear\", `Join(separator, value)` returns \"apple, orange, grape, pear\".  \n  \n If `separator` is `null`, an empty string (<xref:System.String?displayProperty=fullName>) is used instead. If any element in `value` is `null`, an empty string is used instead.","nodes":[{"pos":[0,170],"content":"For example, if <ph id=\"ph1\">`separator`</ph> is \", \" and the elements of <ph id=\"ph2\">`value`</ph> are \"apple\", \"orange\", \"grape\", and \"pear\", <ph id=\"ph3\">`Join(separator, value)`</ph> returns \"apple, orange, grape, pear\".","source":"For example, if `separator` is \", \" and the elements of `value` are \"apple\", \"orange\", \"grape\", and \"pear\", `Join(separator, value)` returns \"apple, orange, grape, pear\"."},{"pos":[177,353],"content":"If `separator` is `null`, an empty string (<xref:System.String?displayProperty=fullName>) is used instead. If any element in `value` is `null`, an empty string is used instead.","nodes":[{"content":"If <ph id=\"ph1\">`separator`</ph> is <ph id=\"ph2\">`null`</ph>, an empty string (<ph id=\"ph3\">&lt;xref:System.String?displayProperty=fullName&gt;</ph>) is used instead.","pos":[0,106],"source":"If `separator` is `null`, an empty string (<xref:System.String?displayProperty=fullName>) is used instead."},{"content":"If any element in <ph id=\"ph1\">`value`</ph> is <ph id=\"ph2\">`null`</ph>, an empty string is used instead.","pos":[107,176],"source":" If any element in `value` is `null`, an empty string is used instead."}]}],"pos":[417211,417581],"yaml":true,"extradata":"MT"},{"content":"The string to use as a separator. <code>separator</code> is included in the returned string only if <code>value</code> has more than one element.","nodes":[{"pos":[0,145],"content":"The string to use as a separator. <code>separator</code> is included in the returned string only if <code>value</code> has more than one element.","nodes":[{"content":"The string to use as a separator.","pos":[0,33]},{"content":"<bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">separator</ph><ept id=\"p1\">&lt;/code&gt;</ept> is included in the returned string only if <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">value</ph><ept id=\"p2\">&lt;/code&gt;</ept> has more than one element.","pos":[34,145],"source":"<code>separator</code> is included in the returned string only if <code>value</code> has more than one element."}]}],"pos":[418155,418301],"yaml":true},{"content":"An array that contains the elements to concatenate.","nodes":[{"pos":[0,51],"content":"An array that contains the elements to concatenate.","nodes":[{"content":"An array that contains the elements to concatenate.","pos":[0,51]}]}],"pos":[418364,418416],"yaml":true},{"content":"A string that consists of the elements in <code>value</code> delimited by the <code>separator</code> string. If <code>value</code> is an empty array, the method returns <xref href=\"System.String.Empty\"></xref>.","nodes":[{"pos":[0,210],"content":"A string that consists of the elements in <code>value</code> delimited by the <code>separator</code> string. If <code>value</code> is an empty array, the method returns <xref href=\"System.String.Empty\"></xref>.","nodes":[{"content":"A string that consists of the elements in <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept> delimited by the <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">separator</ph><ept id=\"p2\">&lt;/code&gt;</ept> string.","pos":[0,108],"source":"A string that consists of the elements in <code>value</code> delimited by the <code>separator</code> string."},{"content":"If <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept> is an empty array, the method returns <ph id=\"ph2\">&lt;xref href=\"System.String.Empty\"&gt;&lt;/xref&gt;</ph>.","pos":[109,210],"source":" If <code>value</code> is an empty array, the method returns <xref href=\"System.String.Empty\"></xref>."}]}],"pos":[418473,418684],"yaml":true},{"content":"<code>value</code> is `null`.","nodes":[{"pos":[0,29],"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>value</code> is `null`."}],"pos":[418832,418862],"yaml":true},{"content":"Concatenates the elements of an object array, using the specified separator between each element.","nodes":[{"pos":[0,97],"content":"Concatenates the elements of an object array, using the specified separator between each element.","nodes":[{"content":"Concatenates the elements of an object array, using the specified separator between each element.","pos":[0,97]}]}],"pos":[420351,420449],"yaml":true},{"content":"If `separator` is `null` or if any element of `values` other than the first element is `null`, an empty string (<xref:System.String?displayProperty=fullName>) is used instead. See the Notes for Callers section if the first element of `values` is `null`.  \n  \n <xref:System.String.Join%28System.String%2CSystem.Object%5B%5D%29> is a convenience method that lets you concatenate each element in an object array without explicitly converting its elements to strings. The string representation of each object in the array is derived by calling that object's `ToString` method.","nodes":[{"pos":[0,253],"content":"If `separator` is `null` or if any element of `values` other than the first element is `null`, an empty string (<xref:System.String?displayProperty=fullName>) is used instead. See the Notes for Callers section if the first element of `values` is `null`.","nodes":[{"content":"If <ph id=\"ph1\">`separator`</ph> is <ph id=\"ph2\">`null`</ph> or if any element of <ph id=\"ph3\">`values`</ph> other than the first element is <ph id=\"ph4\">`null`</ph>, an empty string (<ph id=\"ph5\">&lt;xref:System.String?displayProperty=fullName&gt;</ph>) is used instead.","pos":[0,175],"source":"If `separator` is `null` or if any element of `values` other than the first element is `null`, an empty string (<xref:System.String?displayProperty=fullName>) is used instead."},{"content":"See the Notes for Callers section if the first element of <ph id=\"ph1\">`values`</ph> is <ph id=\"ph2\">`null`</ph>.","pos":[176,253],"source":" See the Notes for Callers section if the first element of `values` is `null`."}]},{"pos":[260,572],"content":"<xref:System.String.Join%28System.String%2CSystem.Object%5B%5D%29> is a convenience method that lets you concatenate each element in an object array without explicitly converting its elements to strings. The string representation of each object in the array is derived by calling that object's `ToString` method.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.String.Join%28System.String%2CSystem.Object%5B%5D%29&gt;</ph> is a convenience method that lets you concatenate each element in an object array without explicitly converting its elements to strings.","pos":[0,203],"source":"<xref:System.String.Join%28System.String%2CSystem.Object%5B%5D%29> is a convenience method that lets you concatenate each element in an object array without explicitly converting its elements to strings."},{"content":"The string representation of each object in the array is derived by calling that object's <ph id=\"ph1\">`ToString`</ph> method.","pos":[204,312],"source":" The string representation of each object in the array is derived by calling that object's `ToString` method."}]}],"pos":[420460,421037],"yaml":true,"extradata":"MT"},{"content":"The string to use as a separator. <code>separator</code> is included in the returned string only if <code>values</code> has more than one element.","nodes":[{"pos":[0,146],"content":"The string to use as a separator. <code>separator</code> is included in the returned string only if <code>values</code> has more than one element.","nodes":[{"content":"The string to use as a separator.","pos":[0,33]},{"content":"<bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">separator</ph><ept id=\"p1\">&lt;/code&gt;</ept> is included in the returned string only if <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">values</ph><ept id=\"p2\">&lt;/code&gt;</ept> has more than one element.","pos":[34,146],"source":"<code>separator</code> is included in the returned string only if <code>values</code> has more than one element."}]}],"pos":[421814,421961],"yaml":true},{"content":"An array that contains the elements to concatenate.","nodes":[{"pos":[0,51],"content":"An array that contains the elements to concatenate.","nodes":[{"content":"An array that contains the elements to concatenate.","pos":[0,51]}]}],"pos":[422025,422077],"yaml":true},{"content":"A string that consists of the elements of <code>values</code> delimited by the <code>separator</code> string. If <code>values</code> is an empty array, the method returns <xref href=\"System.String.Empty\"></xref>.","nodes":[{"pos":[0,212],"content":"A string that consists of the elements of <code>values</code> delimited by the <code>separator</code> string. If <code>values</code> is an empty array, the method returns <xref href=\"System.String.Empty\"></xref>.","nodes":[{"content":"A string that consists of the elements of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">values</ph><ept id=\"p1\">&lt;/code&gt;</ept> delimited by the <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">separator</ph><ept id=\"p2\">&lt;/code&gt;</ept> string.","pos":[0,109],"source":"A string that consists of the elements of <code>values</code> delimited by the <code>separator</code> string."},{"content":"If <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">values</ph><ept id=\"p1\">&lt;/code&gt;</ept> is an empty array, the method returns <ph id=\"ph2\">&lt;xref href=\"System.String.Empty\"&gt;&lt;/xref&gt;</ph>.","pos":[110,212],"source":" If <code>values</code> is an empty array, the method returns <xref href=\"System.String.Empty\"></xref>."}]}],"pos":[422134,422347],"yaml":true},{"content":"<code>values</code> is `null`.","nodes":[{"pos":[0,30],"content":"<ph id=\"ph1\">&lt;code&gt;values&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>values</code> is `null`."}],"pos":[422495,422526],"yaml":true},{"content":"Concatenates the members of a constructed <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> collection of type <xref href=\"System.String\"></xref>, using the specified separator between each member.","nodes":[{"pos":[0,209],"content":"Concatenates the members of a constructed <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.IEnumerable`1\"&gt;&lt;/xref&gt;</ph> collection of type <ph id=\"ph2\">&lt;xref href=\"System.String\"&gt;&lt;/xref&gt;</ph>, using the specified separator between each member.","source":"Concatenates the members of a constructed <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> collection of type <xref href=\"System.String\"></xref>, using the specified separator between each member."}],"pos":[427103,427313],"yaml":true},{"content":"If `separator` is `null`, an empty string (<xref:System.String?displayProperty=fullName>) is used instead. If any member of `values` is `null`, an empty string is used instead.  \n  \n <xref:System.String.Join%28System.String%2CSystem.Collections.Generic.IEnumerable%7BSystem.String%7D%29> is a convenience method that lets you concatenate each element in an `IEnumerable(Of String)` collection without first converting the elements to a string array. It is particularly useful with Language-Integrated Query (LINQ) query expressions. The following example passes a `List(Of String)` object that contains either the uppercase or lowercase letters of the alphabet to a lambda expression that selects letters that are equal to or greater than a particular letter (which, in the example, is \"M\"). The `IEnumerable(Of String)` collection returned by the <xref:System.Linq.Enumerable.Where%2A?displayProperty=fullName> method is passed to the <xref:System.String.Join%28System.String%2CSystem.Collections.Generic.IEnumerable%7BSystem.String%7D%29> method to display the result as a single string.  \n  \n [!code-csharp[System.String.Join#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.join/cs/join4.cs#4)]\n [!code-vb[System.String.Join#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.string.join/vb/join4.vb#4)]","nodes":[{"pos":[0,176],"content":"If `separator` is `null`, an empty string (<xref:System.String?displayProperty=fullName>) is used instead. If any member of `values` is `null`, an empty string is used instead.","nodes":[{"content":"If <ph id=\"ph1\">`separator`</ph> is <ph id=\"ph2\">`null`</ph>, an empty string (<ph id=\"ph3\">&lt;xref:System.String?displayProperty=fullName&gt;</ph>) is used instead.","pos":[0,106],"source":"If `separator` is `null`, an empty string (<xref:System.String?displayProperty=fullName>) is used instead."},{"content":"If any member of <ph id=\"ph1\">`values`</ph> is <ph id=\"ph2\">`null`</ph>, an empty string is used instead.","pos":[107,176],"source":" If any member of `values` is `null`, an empty string is used instead."}]},{"pos":[183,1089],"content":"<xref:System.String.Join%28System.String%2CSystem.Collections.Generic.IEnumerable%7BSystem.String%7D%29> is a convenience method that lets you concatenate each element in an `IEnumerable(Of String)` collection without first converting the elements to a string array. It is particularly useful with Language-Integrated Query (LINQ) query expressions. The following example passes a `List(Of String)` object that contains either the uppercase or lowercase letters of the alphabet to a lambda expression that selects letters that are equal to or greater than a particular letter (which, in the example, is \"M\"). The `IEnumerable(Of String)` collection returned by the <xref:System.Linq.Enumerable.Where%2A?displayProperty=fullName> method is passed to the <xref:System.String.Join%28System.String%2CSystem.Collections.Generic.IEnumerable%7BSystem.String%7D%29> method to display the result as a single string.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.String.Join%28System.String%2CSystem.Collections.Generic.IEnumerable%7BSystem.String%7D%29&gt;</ph> is a convenience method that lets you concatenate each element in an <ph id=\"ph2\">`IEnumerable(Of String)`</ph> collection without first converting the elements to a string array.","pos":[0,266],"source":"<xref:System.String.Join%28System.String%2CSystem.Collections.Generic.IEnumerable%7BSystem.String%7D%29> is a convenience method that lets you concatenate each element in an `IEnumerable(Of String)` collection without first converting the elements to a string array."},{"content":"It is particularly useful with Language-Integrated Query (LINQ) query expressions.","pos":[267,349]},{"content":"The following example passes a <ph id=\"ph1\">`List(Of String)`</ph> object that contains either the uppercase or lowercase letters of the alphabet to a lambda expression that selects letters that are equal to or greater than a particular letter (which, in the example, is \"M\").","pos":[350,608],"source":" The following example passes a `List(Of String)` object that contains either the uppercase or lowercase letters of the alphabet to a lambda expression that selects letters that are equal to or greater than a particular letter (which, in the example, is \"M\")."},{"content":"The <ph id=\"ph1\">`IEnumerable(Of String)`</ph> collection returned by the <ph id=\"ph2\">&lt;xref:System.Linq.Enumerable.Where%2A?displayProperty=fullName&gt;</ph> method is passed to the <ph id=\"ph3\">&lt;xref:System.String.Join%28System.String%2CSystem.Collections.Generic.IEnumerable%7BSystem.String%7D%29&gt;</ph> method to display the result as a single string.","pos":[609,906],"source":" The `IEnumerable(Of String)` collection returned by the <xref:System.Linq.Enumerable.Where%2A?displayProperty=fullName> method is passed to the <xref:System.String.Join%28System.String%2CSystem.Collections.Generic.IEnumerable%7BSystem.String%7D%29> method to display the result as a single string."}]},{"pos":[1096,1337],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>System.String.Join#4<ept id=\"p2\">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.join/cs/join4.cs#4)</ept><ept id=\"p1\">]</ept> <bpt id=\"p3\">[!code-vb</bpt><bpt id=\"p4\">[</bpt>System.String.Join#4<ept id=\"p4\">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.string.join/vb/join4.vb#4)</ept><ept id=\"p3\">]</ept>","source":"[!code-csharp[System.String.Join#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.join/cs/join4.cs#4)]\n [!code-vb[System.String.Join#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.string.join/vb/join4.vb#4)]"}],"pos":[427324,428671],"yaml":true,"extradata":"MT"},{"content":"The string to use as a separator.<code>separator</code> is included in the returned string only if <code>values</code> has more than one element.","nodes":[{"pos":[0,145],"content":"The string to use as a separator.<code>separator</code> is included in the returned string only if <code>values</code> has more than one element.","nodes":[{"content":"The string to use as a separator.<bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">separator</ph><ept id=\"p1\">&lt;/code&gt;</ept>","pos":[0,55],"source":"The string to use as a separator.<code>separator</code>"},{"content":"is included in the returned string only if <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">values</ph><ept id=\"p1\">&lt;/code&gt;</ept> has more than one element.","pos":[56,145],"source":" is included in the returned string only if <code>values</code> has more than one element."}]}],"pos":[429589,429735],"yaml":true},{"content":"A collection that contains the strings to concatenate.","nodes":[{"pos":[0,54],"content":"A collection that contains the strings to concatenate.","nodes":[{"content":"A collection that contains the strings to concatenate.","pos":[0,54]}]}],"pos":[429837,429892],"yaml":true},{"content":"A string that consists of the members of <code>values</code> delimited by the <code>separator</code> string. If <code>values</code> has no members, the method returns <xref href=\"System.String.Empty\"></xref>.","nodes":[{"pos":[0,208],"content":"A string that consists of the members of <code>values</code> delimited by the <code>separator</code> string. If <code>values</code> has no members, the method returns <xref href=\"System.String.Empty\"></xref>.","nodes":[{"content":"A string that consists of the members of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">values</ph><ept id=\"p1\">&lt;/code&gt;</ept> delimited by the <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">separator</ph><ept id=\"p2\">&lt;/code&gt;</ept> string.","pos":[0,108],"source":"A string that consists of the members of <code>values</code> delimited by the <code>separator</code> string."},{"content":"If <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">values</ph><ept id=\"p1\">&lt;/code&gt;</ept> has no members, the method returns <ph id=\"ph2\">&lt;xref href=\"System.String.Empty\"&gt;&lt;/xref&gt;</ph>.","pos":[109,208],"source":" If <code>values</code> has no members, the method returns <xref href=\"System.String.Empty\"></xref>."}]}],"pos":[429949,430158],"yaml":true},{"content":"<code>values</code> is `null`.","nodes":[{"pos":[0,30],"content":"<ph id=\"ph1\">&lt;code&gt;values&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>values</code> is `null`."}],"pos":[430306,430337],"yaml":true},{"content":"Concatenates the members of a collection, using the specified separator between each member.","nodes":[{"pos":[0,92],"content":"Concatenates the members of a collection, using the specified separator between each member.","nodes":[{"content":"Concatenates the members of a collection, using the specified separator between each member.","pos":[0,92]}]}],"pos":[433123,433216],"yaml":true},{"content":"If `separator` is `null`, an empty string (<xref:System.String?displayProperty=fullName>) is used instead. If any member of `values` is `null`, an empty string is used instead.  \n  \n <xref:System.String.Join%60%601%28System.String%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29> is a convenience method that lets you concatenate each member of an <xref:System.Collections.Generic.IEnumerable%601> collection without first converting them to strings. The string representation of each object in the <xref:System.Collections.Generic.IEnumerable%601> collection is derived by calling that object's `ToString` method.  \n  \n This method is particular useful with Language-Integrated Query (LINQ) query expressions. For example, the following code defines a very simple `Animal` class that contains the name of an animal and the order to which it belongs. It then defines a <xref:System.Collections.Generic.List%601> object that contains a number of `Animal` objects. The <xref:System.Linq.Enumerable.Where%2A?displayProperty=fullName> extension method is called to extract the `Animal` objects whose `Order` property equals \"Rodent\". The result is passed to the <xref:System.String.Join%60%601%28System.String%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29> method.  \n  \n [!code-csharp[System.String.Join#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.join/cs/join5.cs#5)]\n [!code-vb[System.String.Join#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.string.join/vb/join5.vb#5)]","nodes":[{"pos":[0,176],"content":"If `separator` is `null`, an empty string (<xref:System.String?displayProperty=fullName>) is used instead. If any member of `values` is `null`, an empty string is used instead.","nodes":[{"content":"If <ph id=\"ph1\">`separator`</ph> is <ph id=\"ph2\">`null`</ph>, an empty string (<ph id=\"ph3\">&lt;xref:System.String?displayProperty=fullName&gt;</ph>) is used instead.","pos":[0,106],"source":"If `separator` is `null`, an empty string (<xref:System.String?displayProperty=fullName>) is used instead."},{"content":"If any member of <ph id=\"ph1\">`values`</ph> is <ph id=\"ph2\">`null`</ph>, an empty string is used instead.","pos":[107,176],"source":" If any member of `values` is `null`, an empty string is used instead."}]},{"pos":[183,623],"content":"<xref:System.String.Join%60%601%28System.String%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29> is a convenience method that lets you concatenate each member of an <xref:System.Collections.Generic.IEnumerable%601> collection without first converting them to strings. The string representation of each object in the <xref:System.Collections.Generic.IEnumerable%601> collection is derived by calling that object's `ToString` method.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.String.Join%60%601%28System.String%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> is a convenience method that lets you concatenate each member of an <ph id=\"ph2\">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph> collection without first converting them to strings.","pos":[0,276],"source":"<xref:System.String.Join%60%601%28System.String%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29> is a convenience method that lets you concatenate each member of an <xref:System.Collections.Generic.IEnumerable%601> collection without first converting them to strings."},{"content":"The string representation of each object in the <ph id=\"ph1\">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph> collection is derived by calling that object's <ph id=\"ph2\">`ToString`</ph> method.","pos":[277,440],"source":" The string representation of each object in the <xref:System.Collections.Generic.IEnumerable%601> collection is derived by calling that object's `ToString` method."}]},{"pos":[630,1280],"content":"This method is particular useful with Language-Integrated Query (LINQ) query expressions. For example, the following code defines a very simple `Animal` class that contains the name of an animal and the order to which it belongs. It then defines a <xref:System.Collections.Generic.List%601> object that contains a number of `Animal` objects. The <xref:System.Linq.Enumerable.Where%2A?displayProperty=fullName> extension method is called to extract the `Animal` objects whose `Order` property equals \"Rodent\". The result is passed to the <xref:System.String.Join%60%601%28System.String%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29> method.","nodes":[{"content":"This method is particular useful with Language-Integrated Query (LINQ) query expressions.","pos":[0,89]},{"content":"For example, the following code defines a very simple <ph id=\"ph1\">`Animal`</ph> class that contains the name of an animal and the order to which it belongs.","pos":[90,229],"source":" For example, the following code defines a very simple `Animal` class that contains the name of an animal and the order to which it belongs."},{"content":"It then defines a <ph id=\"ph1\">&lt;xref:System.Collections.Generic.List%601&gt;</ph> object that contains a number of <ph id=\"ph2\">`Animal`</ph> objects.","pos":[230,341],"source":" It then defines a <xref:System.Collections.Generic.List%601> object that contains a number of `Animal` objects."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Enumerable.Where%2A?displayProperty=fullName&gt;</ph> extension method is called to extract the <ph id=\"ph2\">`Animal`</ph> objects whose <ph id=\"ph3\">`Order`</ph> property equals \"Rodent\".","pos":[342,508],"source":" The <xref:System.Linq.Enumerable.Where%2A?displayProperty=fullName> extension method is called to extract the `Animal` objects whose `Order` property equals \"Rodent\"."},{"content":"The result is passed to the <ph id=\"ph1\">&lt;xref:System.String.Join%60%601%28System.String%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> method.","pos":[509,650],"source":" The result is passed to the <xref:System.String.Join%60%601%28System.String%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29> method."}]},{"pos":[1287,1528],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>System.String.Join#5<ept id=\"p2\">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.join/cs/join5.cs#5)</ept><ept id=\"p1\">]</ept> <bpt id=\"p3\">[!code-vb</bpt><bpt id=\"p4\">[</bpt>System.String.Join#5<ept id=\"p4\">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.string.join/vb/join5.vb#5)</ept><ept id=\"p3\">]</ept>","source":"[!code-csharp[System.String.Join#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.join/cs/join5.cs#5)]\n [!code-vb[System.String.Join#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.string.join/vb/join5.vb#5)]"}],"pos":[433227,434767],"yaml":true,"extradata":"MT"},{"content":"The string to use as a separator.<code>separator</code> is included in the returned string only if <code>values</code> has more than one element.","nodes":[{"pos":[0,145],"content":"The string to use as a separator.<code>separator</code> is included in the returned string only if <code>values</code> has more than one element.","nodes":[{"content":"The string to use as a separator.<bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">separator</ph><ept id=\"p1\">&lt;/code&gt;</ept>","pos":[0,55],"source":"The string to use as a separator.<code>separator</code>"},{"content":"is included in the returned string only if <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">values</ph><ept id=\"p1\">&lt;/code&gt;</ept> has more than one element.","pos":[56,145],"source":" is included in the returned string only if <code>values</code> has more than one element."}]}],"pos":[435671,435817],"yaml":true},{"content":"A collection that contains the objects to concatenate.","nodes":[{"pos":[0,54],"content":"A collection that contains the objects to concatenate.","nodes":[{"content":"A collection that contains the objects to concatenate.","pos":[0,54]}]}],"pos":[435906,435961],"yaml":true},{"content":"The type of the members of <code>values</code>.","nodes":[{"pos":[0,47],"content":"The type of the members of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">values</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The type of the members of <code>values</code>."}],"pos":[436012,436060],"yaml":true},{"content":"A string that consists of the members of <code>values</code> delimited by the <code>separator</code> string. If <code>values</code> has no members, the method returns <xref href=\"System.String.Empty\"></xref>.","nodes":[{"pos":[0,208],"content":"A string that consists of the members of <code>values</code> delimited by the <code>separator</code> string. If <code>values</code> has no members, the method returns <xref href=\"System.String.Empty\"></xref>.","nodes":[{"content":"A string that consists of the members of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">values</ph><ept id=\"p1\">&lt;/code&gt;</ept> delimited by the <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">separator</ph><ept id=\"p2\">&lt;/code&gt;</ept> string.","pos":[0,108],"source":"A string that consists of the members of <code>values</code> delimited by the <code>separator</code> string."},{"content":"If <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">values</ph><ept id=\"p1\">&lt;/code&gt;</ept> has no members, the method returns <ph id=\"ph2\">&lt;xref href=\"System.String.Empty\"&gt;&lt;/xref&gt;</ph>.","pos":[109,208],"source":" If <code>values</code> has no members, the method returns <xref href=\"System.String.Empty\"></xref>."}]}],"pos":[436117,436326],"yaml":true},{"content":"<code>values</code> is `null`.","nodes":[{"pos":[0,30],"content":"<ph id=\"ph1\">&lt;code&gt;values&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>values</code> is `null`."}],"pos":[436477,436508],"yaml":true},{"content":"Reports the zero-based index position of the last occurrence of a specified string within this instance. The search starts at a specified character position and proceeds backward toward the beginning of the string for the specified number of character positions. A parameter specifies the type of comparison to perform when searching for the specified string.","nodes":[{"pos":[0,359],"content":"Reports the zero-based index position of the last occurrence of a specified string within this instance. The search starts at a specified character position and proceeds backward toward the beginning of the string for the specified number of character positions. A parameter specifies the type of comparison to perform when searching for the specified string.","nodes":[{"content":"Reports the zero-based index position of the last occurrence of a specified string within this instance. The search starts at a specified character position and proceeds backward toward the beginning of the string for the specified number of character positions. A parameter specifies the type of comparison to perform when searching for the specified string.","pos":[0,359],"nodes":[{"content":"Reports the zero-based index position of the last occurrence of a specified string within this instance.","pos":[0,104]},{"content":"The search starts at a specified character position and proceeds backward toward the beginning of the string for the specified number of character positions.","pos":[105,262]},{"content":"A parameter specifies the type of comparison to perform when searching for the specified string.","pos":[263,359]}]}]}],"pos":[438282,438642],"yaml":true},{"content":"Index numbering starts from zero. That is, the first character in the string is at index zero and the last is at <xref:System.String.Length%2A> - 1.  \n  \n The search begins at the `startIndex` character position and proceeds backward until either `value` is found or `count` character positions have been examined. For example, if `startIndex` is <xref:System.String.Length%2A> - 1, the method searches backward `count` characters from the last character in the string.  \n  \n The `comparisonType` parameter specifies to search for the `value` parameter using the current or invariant culture, using a case-sensitive or case-insensitive search, and using word or ordinal comparison rules.","nodes":[{"pos":[0,148],"content":"Index numbering starts from zero. That is, the first character in the string is at index zero and the last is at <xref:System.String.Length%2A> - 1.","nodes":[{"content":"Index numbering starts from zero. That is, the first character in the string is at index zero and the last is at <xref:System.String.Length%2A> - 1.","pos":[0,148],"nodes":[{"content":"Index numbering starts from zero.","pos":[0,33]},{"content":"That is, the first character in the string is at index zero and the last is at <ph id=\"ph1\">&lt;xref:System.String.Length%2A&gt;</ph> - 1.","pos":[34,148],"source":" That is, the first character in the string is at index zero and the last is at <xref:System.String.Length%2A> - 1."}]}]},{"pos":[155,469],"content":"The search begins at the `startIndex` character position and proceeds backward until either `value` is found or `count` character positions have been examined. For example, if `startIndex` is <xref:System.String.Length%2A> - 1, the method searches backward `count` characters from the last character in the string.","nodes":[{"content":"The search begins at the <ph id=\"ph1\">`startIndex`</ph> character position and proceeds backward until either <ph id=\"ph2\">`value`</ph> is found or <ph id=\"ph3\">`count`</ph> character positions have been examined.","pos":[0,159],"source":"The search begins at the `startIndex` character position and proceeds backward until either `value` is found or `count` character positions have been examined."},{"content":"For example, if <ph id=\"ph1\">`startIndex`</ph> is <ph id=\"ph2\">&lt;xref:System.String.Length%2A&gt;</ph> - 1, the method searches backward <ph id=\"ph3\">`count`</ph> characters from the last character in the string.","pos":[160,314],"source":" For example, if `startIndex` is <xref:System.String.Length%2A> - 1, the method searches backward `count` characters from the last character in the string."}]},{"pos":[476,687],"content":"The <ph id=\"ph1\">`comparisonType`</ph> parameter specifies to search for the <ph id=\"ph2\">`value`</ph> parameter using the current or invariant culture, using a case-sensitive or case-insensitive search, and using word or ordinal comparison rules.","source":"The `comparisonType` parameter specifies to search for the `value` parameter using the current or invariant culture, using a case-sensitive or case-insensitive search, and using word or ordinal comparison rules."}],"pos":[438653,439347],"yaml":true,"extradata":"MT"},{"content":"The string to seek.","nodes":[{"pos":[0,19],"content":"The string to seek.","nodes":[{"content":"The string to seek.","pos":[0,19]}]}],"pos":[440094,440114],"yaml":true},{"content":"The search starting position. The search proceeds from <code>startIndex</code> toward the beginning of this instance.","nodes":[{"pos":[0,117],"content":"The search starting position. The search proceeds from <code>startIndex</code> toward the beginning of this instance.","nodes":[{"content":"The search starting position.","pos":[0,29]},{"content":"The search proceeds from <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">startIndex</ph><ept id=\"p1\">&lt;/code&gt;</ept> toward the beginning of this instance.","pos":[30,117],"source":" The search proceeds from <code>startIndex</code> toward the beginning of this instance."}]}],"pos":[440179,440297],"yaml":true},{"content":"The number of character positions to examine.","nodes":[{"pos":[0,45],"content":"The number of character positions to examine.","nodes":[{"content":"The number of character positions to examine.","pos":[0,45]}]}],"pos":[440357,440403],"yaml":true},{"content":"One of the enumeration values that specifies the rules for the search.","nodes":[{"pos":[0,70],"content":"One of the enumeration values that specifies the rules for the search.","nodes":[{"content":"One of the enumeration values that specifies the rules for the search.","pos":[0,70]}]}],"pos":[440483,440554],"yaml":true},{"content":"The zero-based starting index position of the <code>value</code> parameter if that string is found, or -1 if it is not found or if the current instance equals <xref href=\"System.String.Empty\"></xref>. If <code>value</code> is <xref href=\"System.String.Empty\"></xref>, the return value is the smaller of <code>startIndex</code> and the last index position in this instance.","nodes":[{"pos":[0,372],"content":"The zero-based starting index position of the <code>value</code> parameter if that string is found, or -1 if it is not found or if the current instance equals <xref href=\"System.String.Empty\"></xref>. If <code>value</code> is <xref href=\"System.String.Empty\"></xref>, the return value is the smaller of <code>startIndex</code> and the last index position in this instance.","nodes":[{"content":"The zero-based starting index position of the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter if that string is found, or -1 if it is not found or if the current instance equals <ph id=\"ph2\">&lt;xref href=\"System.String.Empty\"&gt;&lt;/xref&gt;</ph>.","pos":[0,200],"source":"The zero-based starting index position of the <code>value</code> parameter if that string is found, or -1 if it is not found or if the current instance equals <xref href=\"System.String.Empty\"></xref>."},{"content":"If <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept> is <ph id=\"ph2\">&lt;xref href=\"System.String.Empty\"&gt;&lt;/xref&gt;</ph>, the return value is the smaller of <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph3\">startIndex</ph><ept id=\"p2\">&lt;/code&gt;</ept> and the last index position in this instance.","pos":[201,372],"source":" If <code>value</code> is <xref href=\"System.String.Empty\"></xref>, the return value is the smaller of <code>startIndex</code> and the last index position in this instance."}]}],"pos":[440610,440983],"yaml":true},{"content":"<code>value</code> is `null`.","nodes":[{"pos":[0,29],"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>value</code> is `null`."}],"pos":[441138,441168],"yaml":true},{"content":"<code>count</code> is negative.  \n  \n -or-  \n  \n The current instance does not equal <xref href=\"System.String.Empty\"></xref>, and <code>startIndex</code> is negative.  \n  \n -or-  \n  \n The current instance does not equal <xref href=\"System.String.Empty\"></xref>, and <code>startIndex</code> is greater than the length of this instance.  \n  \n -or-  \n  \n The current instance does not equal <xref href=\"System.String.Empty\"></xref>, and <code>startIndex</code> + 1 - <code>count</code> specifies a position that is not within this instance.  \n  \n -or-  \n  \n The current instance equals <xref href=\"System.String.Empty\"></xref> and <code>start</code> is less than -1 or greater than zero.  \n  \n -or-  \n  \n The current instance equals <xref href=\"System.String.Empty\"></xref> and <code>count</code> is greater than 1.","nodes":[{"pos":[0,31],"content":"<ph id=\"ph1\">&lt;code&gt;count&lt;/code&gt;</ph> is negative.","source":"<code>count</code> is negative."},{"pos":[38,42],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[49,167],"content":"The current instance does not equal <ph id=\"ph1\">&lt;xref href=\"System.String.Empty\"&gt;&lt;/xref&gt;</ph>, and <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">startIndex</ph><ept id=\"p1\">&lt;/code&gt;</ept> is negative.","source":"The current instance does not equal <xref href=\"System.String.Empty\"></xref>, and <code>startIndex</code> is negative."},{"pos":[174,178],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[185,335],"content":"The current instance does not equal <ph id=\"ph1\">&lt;xref href=\"System.String.Empty\"&gt;&lt;/xref&gt;</ph>, and <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">startIndex</ph><ept id=\"p1\">&lt;/code&gt;</ept> is greater than the length of this instance.","source":"The current instance does not equal <xref href=\"System.String.Empty\"></xref>, and <code>startIndex</code> is greater than the length of this instance."},{"pos":[342,346],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[353,538],"content":"The current instance does not equal <ph id=\"ph1\">&lt;xref href=\"System.String.Empty\"&gt;&lt;/xref&gt;</ph>, and <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">startIndex</ph><ept id=\"p1\">&lt;/code&gt;</ept> + 1 - <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph3\">count</ph><ept id=\"p2\">&lt;/code&gt;</ept> specifies a position that is not within this instance.","source":"The current instance does not equal <xref href=\"System.String.Empty\"></xref>, and <code>startIndex</code> + 1 - <code>count</code> specifies a position that is not within this instance."},{"pos":[545,549],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[556,685],"content":"The current instance equals <ph id=\"ph1\">&lt;xref href=\"System.String.Empty\"&gt;&lt;/xref&gt;</ph> and <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">start</ph><ept id=\"p1\">&lt;/code&gt;</ept> is less than -1 or greater than zero.","source":"The current instance equals <xref href=\"System.String.Empty\"></xref> and <code>start</code> is less than -1 or greater than zero."},{"pos":[692,696],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[703,813],"content":"The current instance equals <ph id=\"ph1\">&lt;xref href=\"System.String.Empty\"&gt;&lt;/xref&gt;</ph> and <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">count</ph><ept id=\"p1\">&lt;/code&gt;</ept> is greater than 1.","source":"The current instance equals <xref href=\"System.String.Empty\"></xref> and <code>count</code> is greater than 1."}],"pos":[441282,442128],"yaml":true},{"content":"<code>comparisonType</code> is not a valid <xref href=\"System.StringComparison\"></xref> value.","nodes":[{"pos":[0,94],"content":"<ph id=\"ph1\">&lt;code&gt;comparisonType&lt;/code&gt;</ph> is not a valid <ph id=\"ph2\">&lt;xref href=\"System.StringComparison\"&gt;&lt;/xref&gt;</ph> value.","source":"<code>comparisonType</code> is not a valid <xref href=\"System.StringComparison\"></xref> value."}],"pos":[442222,442317],"yaml":true},{"content":"Reports the zero-based index of the last occurrence of a specified string within the current <xref href=\"System.String\"></xref> object. The search starts at a specified character position and proceeds backward toward the beginning of the string. A parameter specifies the type of comparison to perform when searching for the specified string.","nodes":[{"pos":[0,342],"content":"Reports the zero-based index of the last occurrence of a specified string within the current <xref href=\"System.String\"></xref> object. The search starts at a specified character position and proceeds backward toward the beginning of the string. A parameter specifies the type of comparison to perform when searching for the specified string.","nodes":[{"content":"Reports the zero-based index of the last occurrence of a specified string within the current <ph id=\"ph1\">&lt;xref href=\"System.String\"&gt;&lt;/xref&gt;</ph> object.","pos":[0,135],"source":"Reports the zero-based index of the last occurrence of a specified string within the current <xref href=\"System.String\"></xref> object."},{"content":"The search starts at a specified character position and proceeds backward toward the beginning of the string.","pos":[136,245]},{"content":"A parameter specifies the type of comparison to perform when searching for the specified string.","pos":[246,342]}]}],"pos":[443973,444316],"yaml":true},{"content":"Index numbering starts from zero. That is, the first character in the string is at index zero and the last is at <xref:System.String.Length%2A> - 1.  \n  \n The search begins at the `startIndex` character position and proceeds backward until either `value` is found or the first character position has been examined. For example, if `startIndex` is <xref:System.String.Length%2A> - 1, the method searches every character from the last character in the string to the beginning.  \n  \n The `comparisonType` parameter specifies to search for the `value` parameter using the current or invariant culture, using a case-sensitive or case-insensitive search, and using word or ordinal comparison rules.","nodes":[{"pos":[0,148],"content":"Index numbering starts from zero. That is, the first character in the string is at index zero and the last is at <xref:System.String.Length%2A> - 1.","nodes":[{"content":"Index numbering starts from zero. That is, the first character in the string is at index zero and the last is at <xref:System.String.Length%2A> - 1.","pos":[0,148],"nodes":[{"content":"Index numbering starts from zero.","pos":[0,33]},{"content":"That is, the first character in the string is at index zero and the last is at <ph id=\"ph1\">&lt;xref:System.String.Length%2A&gt;</ph> - 1.","pos":[34,148],"source":" That is, the first character in the string is at index zero and the last is at <xref:System.String.Length%2A> - 1."}]}]},{"pos":[155,474],"content":"The search begins at the `startIndex` character position and proceeds backward until either `value` is found or the first character position has been examined. For example, if `startIndex` is <xref:System.String.Length%2A> - 1, the method searches every character from the last character in the string to the beginning.","nodes":[{"content":"The search begins at the <ph id=\"ph1\">`startIndex`</ph> character position and proceeds backward until either <ph id=\"ph2\">`value`</ph> is found or the first character position has been examined.","pos":[0,159],"source":"The search begins at the `startIndex` character position and proceeds backward until either `value` is found or the first character position has been examined."},{"content":"For example, if <ph id=\"ph1\">`startIndex`</ph> is <ph id=\"ph2\">&lt;xref:System.String.Length%2A&gt;</ph> - 1, the method searches every character from the last character in the string to the beginning.","pos":[160,319],"source":" For example, if `startIndex` is <xref:System.String.Length%2A> - 1, the method searches every character from the last character in the string to the beginning."}]},{"pos":[481,692],"content":"The <ph id=\"ph1\">`comparisonType`</ph> parameter specifies to search for the <ph id=\"ph2\">`value`</ph> parameter using the current or invariant culture, using a case-sensitive or case-insensitive search, and using word or ordinal comparison rules.","source":"The `comparisonType` parameter specifies to search for the `value` parameter using the current or invariant culture, using a case-sensitive or case-insensitive search, and using word or ordinal comparison rules."}],"pos":[444327,445026],"yaml":true,"extradata":"MT"},{"content":"The string to seek.","nodes":[{"pos":[0,19],"content":"The string to seek.","nodes":[{"content":"The string to seek.","pos":[0,19]}]}],"pos":[445762,445782],"yaml":true},{"content":"The search starting position. The search proceeds from <code>startIndex</code> toward the beginning of this instance.","nodes":[{"pos":[0,117],"content":"The search starting position. The search proceeds from <code>startIndex</code> toward the beginning of this instance.","nodes":[{"content":"The search starting position.","pos":[0,29]},{"content":"The search proceeds from <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">startIndex</ph><ept id=\"p1\">&lt;/code&gt;</ept> toward the beginning of this instance.","pos":[30,117],"source":" The search proceeds from <code>startIndex</code> toward the beginning of this instance."}]}],"pos":[445847,445965],"yaml":true},{"content":"One of the enumeration values that specifies the rules for the search.","nodes":[{"pos":[0,70],"content":"One of the enumeration values that specifies the rules for the search.","nodes":[{"content":"One of the enumeration values that specifies the rules for the search.","pos":[0,70]}]}],"pos":[446045,446116],"yaml":true},{"content":"The zero-based starting index position of the <code>value</code> parameter if that string is found, or -1 if it is not found or if the current instance equals <xref href=\"System.String.Empty\"></xref>. If <code>value</code> is <xref href=\"System.String.Empty\"></xref>, the return value is the smaller of <code>startIndex</code> and the last index position in this instance.","nodes":[{"pos":[0,372],"content":"The zero-based starting index position of the <code>value</code> parameter if that string is found, or -1 if it is not found or if the current instance equals <xref href=\"System.String.Empty\"></xref>. If <code>value</code> is <xref href=\"System.String.Empty\"></xref>, the return value is the smaller of <code>startIndex</code> and the last index position in this instance.","nodes":[{"content":"The zero-based starting index position of the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter if that string is found, or -1 if it is not found or if the current instance equals <ph id=\"ph2\">&lt;xref href=\"System.String.Empty\"&gt;&lt;/xref&gt;</ph>.","pos":[0,200],"source":"The zero-based starting index position of the <code>value</code> parameter if that string is found, or -1 if it is not found or if the current instance equals <xref href=\"System.String.Empty\"></xref>."},{"content":"If <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept> is <ph id=\"ph2\">&lt;xref href=\"System.String.Empty\"&gt;&lt;/xref&gt;</ph>, the return value is the smaller of <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph3\">startIndex</ph><ept id=\"p2\">&lt;/code&gt;</ept> and the last index position in this instance.","pos":[201,372],"source":" If <code>value</code> is <xref href=\"System.String.Empty\"></xref>, the return value is the smaller of <code>startIndex</code> and the last index position in this instance."}]}],"pos":[446172,446545],"yaml":true},{"content":"<code>value</code> is `null`.","nodes":[{"pos":[0,29],"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>value</code> is `null`."}],"pos":[446700,446730],"yaml":true},{"content":"The current instance does not equal <xref href=\"System.String.Empty\"></xref>, and <code>startIndex</code> is less than zero or greater than the length of the current instance.  \n  \n -or-  \n  \n The current instance equals <xref href=\"System.String.Empty\"></xref>, and <code>startIndex</code> is less than -1 or greater than zero.","nodes":[{"pos":[0,175],"content":"The current instance does not equal <ph id=\"ph1\">&lt;xref href=\"System.String.Empty\"&gt;&lt;/xref&gt;</ph>, and <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">startIndex</ph><ept id=\"p1\">&lt;/code&gt;</ept> is less than zero or greater than the length of the current instance.","source":"The current instance does not equal <xref href=\"System.String.Empty\"></xref>, and <code>startIndex</code> is less than zero or greater than the length of the current instance."},{"pos":[182,186],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[193,328],"content":"The current instance equals <ph id=\"ph1\">&lt;xref href=\"System.String.Empty\"&gt;&lt;/xref&gt;</ph>, and <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">startIndex</ph><ept id=\"p1\">&lt;/code&gt;</ept> is less than -1 or greater than zero.","source":"The current instance equals <xref href=\"System.String.Empty\"></xref>, and <code>startIndex</code> is less than -1 or greater than zero."}],"pos":[446844,447183],"yaml":true},{"content":"<code>comparisonType</code> is not a valid <xref href=\"System.StringComparison\"></xref> value.","nodes":[{"pos":[0,94],"content":"<ph id=\"ph1\">&lt;code&gt;comparisonType&lt;/code&gt;</ph> is not a valid <ph id=\"ph2\">&lt;xref href=\"System.StringComparison\"&gt;&lt;/xref&gt;</ph> value.","source":"<code>comparisonType</code> is not a valid <xref href=\"System.StringComparison\"></xref> value."}],"pos":[447277,447372],"yaml":true},{"content":"Reports the zero-based index position of the last occurrence of the specified Unicode character in a substring within this instance. The search starts at a specified character position and proceeds backward toward the beginning of the string for a specified number of character positions.","nodes":[{"pos":[0,288],"content":"Reports the zero-based index position of the last occurrence of the specified Unicode character in a substring within this instance. The search starts at a specified character position and proceeds backward toward the beginning of the string for a specified number of character positions.","nodes":[{"content":"Reports the zero-based index position of the last occurrence of the specified Unicode character in a substring within this instance. The search starts at a specified character position and proceeds backward toward the beginning of the string for a specified number of character positions.","pos":[0,288],"nodes":[{"content":"Reports the zero-based index position of the last occurrence of the specified Unicode character in a substring within this instance.","pos":[0,132]},{"content":"The search starts at a specified character position and proceeds backward toward the beginning of the string for a specified number of character positions.","pos":[133,288]}]}]}],"pos":[448933,449222],"yaml":true},{"content":"Index numbering starts from zero. That is, the first character in the string is at index zero and the last is at <xref:System.String.Length%2A> - 1.  \n  \n This method begins searching at the `startIndex` character position and proceeds backward toward the beginning of this instance until either `value` is found or `count` character positions have been examined. For example, if `startIndex` is <xref:System.String.Length%2A> - 1, the method searches backward `count` characters from the last character in the string. The search is case-sensitive.  \n  \n This method performs an ordinal (culture-insensitive) search, where a character is considered equivalent to another character only if their Unicode scalar value are the same. To perform a culture-sensitive search, use the <xref:System.Globalization.CompareInfo.LastIndexOf%2A?displayProperty=fullName> method, where a Unicode scalar value representing a precomposed character, such as the ligature \"Ã\" (U+00C6), might be considered equivalent to any occurrence of the character's components in the correct sequence, such as \"AE\" (U+0041, U+0045), depending on the culture.","nodes":[{"pos":[0,148],"content":"Index numbering starts from zero. That is, the first character in the string is at index zero and the last is at <xref:System.String.Length%2A> - 1.","nodes":[{"content":"Index numbering starts from zero. That is, the first character in the string is at index zero and the last is at <xref:System.String.Length%2A> - 1.","pos":[0,148],"nodes":[{"content":"Index numbering starts from zero.","pos":[0,33]},{"content":"That is, the first character in the string is at index zero and the last is at <ph id=\"ph1\">&lt;xref:System.String.Length%2A&gt;</ph> - 1.","pos":[34,148],"source":" That is, the first character in the string is at index zero and the last is at <xref:System.String.Length%2A> - 1."}]}]},{"pos":[155,548],"content":"This method begins searching at the `startIndex` character position and proceeds backward toward the beginning of this instance until either `value` is found or `count` character positions have been examined. For example, if `startIndex` is <xref:System.String.Length%2A> - 1, the method searches backward `count` characters from the last character in the string. The search is case-sensitive.","nodes":[{"content":"This method begins searching at the <ph id=\"ph1\">`startIndex`</ph> character position and proceeds backward toward the beginning of this instance until either <ph id=\"ph2\">`value`</ph> is found or <ph id=\"ph3\">`count`</ph> character positions have been examined.","pos":[0,208],"source":"This method begins searching at the `startIndex` character position and proceeds backward toward the beginning of this instance until either `value` is found or `count` character positions have been examined."},{"content":"For example, if <ph id=\"ph1\">`startIndex`</ph> is <ph id=\"ph2\">&lt;xref:System.String.Length%2A&gt;</ph> - 1, the method searches backward <ph id=\"ph3\">`count`</ph> characters from the last character in the string.","pos":[209,363],"source":" For example, if `startIndex` is <xref:System.String.Length%2A> - 1, the method searches backward `count` characters from the last character in the string."},{"content":"The search is case-sensitive.","pos":[364,393]}]},{"pos":[555,1127],"content":"This method performs an ordinal (culture-insensitive) search, where a character is considered equivalent to another character only if their Unicode scalar value are the same. To perform a culture-sensitive search, use the <xref:System.Globalization.CompareInfo.LastIndexOf%2A?displayProperty=fullName> method, where a Unicode scalar value representing a precomposed character, such as the ligature \"Ã\" (U+00C6), might be considered equivalent to any occurrence of the character's components in the correct sequence, such as \"AE\" (U+0041, U+0045), depending on the culture.","nodes":[{"content":"This method performs an ordinal (culture-insensitive) search, where a character is considered equivalent to another character only if their Unicode scalar value are the same. To perform a culture-sensitive search, use the <xref:System.Globalization.CompareInfo.LastIndexOf%2A?displayProperty=fullName> method, where a Unicode scalar value representing a precomposed character, such as the ligature \"Ã\" (U+00C6), might be considered equivalent to any occurrence of the character's components in the correct sequence, such as \"AE\" (U+0041, U+0045), depending on the culture.","pos":[0,572],"nodes":[{"content":"This method performs an ordinal (culture-insensitive) search, where a character is considered equivalent to another character only if their Unicode scalar value are the same.","pos":[0,174]},{"content":"To perform a culture-sensitive search, use the <ph id=\"ph1\">&lt;xref:System.Globalization.CompareInfo.LastIndexOf%2A?displayProperty=fullName&gt;</ph> method, where a Unicode scalar value representing a precomposed character, such as the ligature \"Ã\" (U+00C6), might be considered equivalent to any occurrence of the character's components in the correct sequence, such as \"AE\" (U+0041, U+0045), depending on the culture.","pos":[175,572],"source":" To perform a culture-sensitive search, use the <xref:System.Globalization.CompareInfo.LastIndexOf%2A?displayProperty=fullName> method, where a Unicode scalar value representing a precomposed character, such as the ligature \"Ã\" (U+00C6), might be considered equivalent to any occurrence of the character's components in the correct sequence, such as \"AE\" (U+0041, U+0045), depending on the culture."}]}]}],"pos":[449233,450371],"yaml":true,"extradata":"MT"},{"content":"The Unicode character to seek.","nodes":[{"pos":[0,30],"content":"The Unicode character to seek.","nodes":[{"content":"The Unicode character to seek.","pos":[0,30]}]}],"pos":[451073,451104],"yaml":true},{"content":"The starting position of the search. The search proceeds from <code>startIndex</code> toward the beginning of this instance.","nodes":[{"pos":[0,124],"content":"The starting position of the search. The search proceeds from <code>startIndex</code> toward the beginning of this instance.","nodes":[{"content":"The starting position of the search.","pos":[0,36]},{"content":"The search proceeds from <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">startIndex</ph><ept id=\"p1\">&lt;/code&gt;</ept> toward the beginning of this instance.","pos":[37,124],"source":" The search proceeds from <code>startIndex</code> toward the beginning of this instance."}]}],"pos":[451169,451294],"yaml":true},{"content":"The number of character positions to examine.","nodes":[{"pos":[0,45],"content":"The number of character positions to examine.","nodes":[{"content":"The number of character positions to examine.","pos":[0,45]}]}],"pos":[451354,451400],"yaml":true},{"content":"The zero-based index position of <code>value</code> if that character is found, or -1 if it is not found or if the current instance equals <xref href=\"System.String.Empty\"></xref>.","nodes":[{"pos":[0,180],"content":"The zero-based index position of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept> if that character is found, or -1 if it is not found or if the current instance equals <ph id=\"ph2\">&lt;xref href=\"System.String.Empty\"&gt;&lt;/xref&gt;</ph>.","source":"The zero-based index position of <code>value</code> if that character is found, or -1 if it is not found or if the current instance equals <xref href=\"System.String.Empty\"></xref>."}],"pos":[451456,451637],"yaml":true},{"content":"The current instance does not equal <xref href=\"System.String.Empty\"></xref>, and <code>startIndex</code> is less than zero or greater than or equal to the length of this instance.  \n  \n -or-  \n  \n The current instance does not equal <xref href=\"System.String.Empty\"></xref>, and <code>startIndex</code> - <code>count</code> + 1 is less than zero.","nodes":[{"pos":[0,180],"content":"The current instance does not equal <ph id=\"ph1\">&lt;xref href=\"System.String.Empty\"&gt;&lt;/xref&gt;</ph>, and <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">startIndex</ph><ept id=\"p1\">&lt;/code&gt;</ept> is less than zero or greater than or equal to the length of this instance.","source":"The current instance does not equal <xref href=\"System.String.Empty\"></xref>, and <code>startIndex</code> is less than zero or greater than or equal to the length of this instance."},{"pos":[187,191],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[198,347],"content":"The current instance does not equal <ph id=\"ph1\">&lt;xref href=\"System.String.Empty\"&gt;&lt;/xref&gt;</ph>, and <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">startIndex</ph><ept id=\"p1\">&lt;/code&gt;</ept><ph id=\"ph3\"> - </ph><bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph4\">count</ph><ept id=\"p2\">&lt;/code&gt;</ept> + 1 is less than zero.","source":"The current instance does not equal <xref href=\"System.String.Empty\"></xref>, and <code>startIndex</code> - <code>count</code> + 1 is less than zero."}],"pos":[451804,452162],"yaml":true},{"content":"Reports the zero-based index of the last occurrence of a specified string within the current <xref href=\"System.String\"></xref> object. A parameter specifies the type of search to use for the specified string.","nodes":[{"pos":[0,209],"content":"Reports the zero-based index of the last occurrence of a specified string within the current <xref href=\"System.String\"></xref> object. A parameter specifies the type of search to use for the specified string.","nodes":[{"content":"Reports the zero-based index of the last occurrence of a specified string within the current <ph id=\"ph1\">&lt;xref href=\"System.String\"&gt;&lt;/xref&gt;</ph> object.","pos":[0,135],"source":"Reports the zero-based index of the last occurrence of a specified string within the current <xref href=\"System.String\"></xref> object."},{"content":"A parameter specifies the type of search to use for the specified string.","pos":[136,209]}]}],"pos":[453741,453951],"yaml":true},{"content":"Index numbering starts from zero. That is, the first character in the string is at index zero and the last is at <xref:System.String.Length%2A> - 1.  \n  \n The `comparisonType` parameter specifies to search for the `value` parameter using the current or invariant culture, using a case-sensitive or case-insensitive search, and using word or ordinal comparison rules.  \n  \n The search begins at the last character position of this instance and proceeds backward toward the beginning until either `value` is found or the first character position has been examined.","nodes":[{"pos":[0,148],"content":"Index numbering starts from zero. That is, the first character in the string is at index zero and the last is at <xref:System.String.Length%2A> - 1.","nodes":[{"content":"Index numbering starts from zero. That is, the first character in the string is at index zero and the last is at <xref:System.String.Length%2A> - 1.","pos":[0,148],"nodes":[{"content":"Index numbering starts from zero.","pos":[0,33]},{"content":"That is, the first character in the string is at index zero and the last is at <ph id=\"ph1\">&lt;xref:System.String.Length%2A&gt;</ph> - 1.","pos":[34,148],"source":" That is, the first character in the string is at index zero and the last is at <xref:System.String.Length%2A> - 1."}]}]},{"pos":[155,366],"content":"The <ph id=\"ph1\">`comparisonType`</ph> parameter specifies to search for the <ph id=\"ph2\">`value`</ph> parameter using the current or invariant culture, using a case-sensitive or case-insensitive search, and using word or ordinal comparison rules.","source":"The `comparisonType` parameter specifies to search for the `value` parameter using the current or invariant culture, using a case-sensitive or case-insensitive search, and using word or ordinal comparison rules."},{"pos":[373,562],"content":"The search begins at the last character position of this instance and proceeds backward toward the beginning until either <ph id=\"ph1\">`value`</ph> is found or the first character position has been examined.","source":"The search begins at the last character position of this instance and proceeds backward toward the beginning until either `value` is found or the first character position has been examined."}],"pos":[453962,454531],"yaml":true,"extradata":"MT"},{"content":"The string to seek.","nodes":[{"pos":[0,19],"content":"The string to seek.","nodes":[{"content":"The string to seek.","pos":[0,19]}]}],"pos":[455251,455271],"yaml":true},{"content":"One of the enumeration values that specifies the rules for the search.","nodes":[{"pos":[0,70],"content":"One of the enumeration values that specifies the rules for the search.","nodes":[{"content":"One of the enumeration values that specifies the rules for the search.","pos":[0,70]}]}],"pos":[455351,455422],"yaml":true},{"content":"The zero-based starting index position of the <code>value</code> parameter if that string is found, or -1 if it is not. If <code>value</code> is <xref href=\"System.String.Empty\"></xref>, the return value is the last index position in this instance.","nodes":[{"pos":[0,248],"content":"The zero-based starting index position of the <code>value</code> parameter if that string is found, or -1 if it is not. If <code>value</code> is <xref href=\"System.String.Empty\"></xref>, the return value is the last index position in this instance.","nodes":[{"content":"The zero-based starting index position of the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter if that string is found, or -1 if it is not.","pos":[0,119],"source":"The zero-based starting index position of the <code>value</code> parameter if that string is found, or -1 if it is not."},{"content":"If <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept> is <ph id=\"ph2\">&lt;xref href=\"System.String.Empty\"&gt;&lt;/xref&gt;</ph>, the return value is the last index position in this instance.","pos":[120,248],"source":" If <code>value</code> is <xref href=\"System.String.Empty\"></xref>, the return value is the last index position in this instance."}]}],"pos":[455478,455727],"yaml":true},{"content":"<code>value</code> is `null`.","nodes":[{"pos":[0,29],"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>value</code> is `null`."}],"pos":[455882,455912],"yaml":true},{"content":"<code>comparisonType</code> is not a valid <xref href=\"System.StringComparison\"></xref> value.","nodes":[{"pos":[0,94],"content":"<ph id=\"ph1\">&lt;code&gt;comparisonType&lt;/code&gt;</ph> is not a valid <ph id=\"ph2\">&lt;xref href=\"System.StringComparison\"&gt;&lt;/xref&gt;</ph> value.","source":"<code>comparisonType</code> is not a valid <xref href=\"System.StringComparison\"></xref> value."}],"pos":[456006,456101],"yaml":true},{"content":"Reports the zero-based index position of the last occurrence of a specified string within this instance. The search starts at a specified character position and proceeds backward toward the beginning of the string for a specified number of character positions.","nodes":[{"pos":[0,260],"content":"Reports the zero-based index position of the last occurrence of a specified string within this instance. The search starts at a specified character position and proceeds backward toward the beginning of the string for a specified number of character positions.","nodes":[{"content":"Reports the zero-based index position of the last occurrence of a specified string within this instance. The search starts at a specified character position and proceeds backward toward the beginning of the string for a specified number of character positions.","pos":[0,260],"nodes":[{"content":"Reports the zero-based index position of the last occurrence of a specified string within this instance.","pos":[0,104]},{"content":"The search starts at a specified character position and proceeds backward toward the beginning of the string for a specified number of character positions.","pos":[105,260]}]}]}],"pos":[457674,457935],"yaml":true},{"content":"Index numbering starts from zero. That is, the first character in the string is at index zero and the last is at <xref:System.String.Length%2A> - 1.  \n  \n The search begins at the `startIndex` character position of this instance and proceeds backward toward the beginning until either `value` is found or `count` character positions have been examined. For example, if `startIndex` is <xref:System.String.Length%2A> - 1, the method searches backward `count` characters from the last character in the string.  \n  \n This method performs a word (case-sensitive and culture-sensitive) search using the current culture.  \n  \n Character sets include ignorable characters, which are characters that are not considered when performing a linguistic or culture-sensitive comparison. In a culture-sensitive search, if `value` contains an ignorable character, the result is equivalent to searching with that character removed. If `value` consists only of one or more ignorable characters, the <xref:System.String.LastIndexOf%2A> method always returns `startIndex`, which is the character position at which the search begins. In the following example, the <xref:System.String.LastIndexOf%2A> method is used to find the position of a soft hyphen (U+00AD) in the two characters that precede the final \"m\" of two strings. Only one of the strings contains the required substring. If the example is run on the [!INCLUDE[netfx40_short](~/includes/netfx40-short-md.md)] or later, in both cases, because the soft hyphen is an ignorable character, the method returns the index of \"m\" in the string when it performs a culture-sensitive comparison. Note that in the case of the first string, which includes the soft hyphen followed by an \"m\", the method fails to return the index of the soft hyphen but instead returns the index of the \"m\".  \n  \n [!code-csharp[System.String.LastIndexOf#23](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.LastIndexOf/cs/lastindexof23.cs#23)]\n [!code-vb[System.String.LastIndexOf#23](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.LastIndexOf/vb/lastindexof23.vb#23)]","nodes":[{"pos":[0,148],"content":"Index numbering starts from zero. That is, the first character in the string is at index zero and the last is at <xref:System.String.Length%2A> - 1.","nodes":[{"content":"Index numbering starts from zero. That is, the first character in the string is at index zero and the last is at <xref:System.String.Length%2A> - 1.","pos":[0,148],"nodes":[{"content":"Index numbering starts from zero.","pos":[0,33]},{"content":"That is, the first character in the string is at index zero and the last is at <ph id=\"ph1\">&lt;xref:System.String.Length%2A&gt;</ph> - 1.","pos":[34,148],"source":" That is, the first character in the string is at index zero and the last is at <xref:System.String.Length%2A> - 1."}]}]},{"pos":[155,507],"content":"The search begins at the `startIndex` character position of this instance and proceeds backward toward the beginning until either `value` is found or `count` character positions have been examined. For example, if `startIndex` is <xref:System.String.Length%2A> - 1, the method searches backward `count` characters from the last character in the string.","nodes":[{"content":"The search begins at the <ph id=\"ph1\">`startIndex`</ph> character position of this instance and proceeds backward toward the beginning until either <ph id=\"ph2\">`value`</ph> is found or <ph id=\"ph3\">`count`</ph> character positions have been examined.","pos":[0,197],"source":"The search begins at the `startIndex` character position of this instance and proceeds backward toward the beginning until either `value` is found or `count` character positions have been examined."},{"content":"For example, if <ph id=\"ph1\">`startIndex`</ph> is <ph id=\"ph2\">&lt;xref:System.String.Length%2A&gt;</ph> - 1, the method searches backward <ph id=\"ph3\">`count`</ph> characters from the last character in the string.","pos":[198,352],"source":" For example, if `startIndex` is <xref:System.String.Length%2A> - 1, the method searches backward `count` characters from the last character in the string."}]},{"pos":[514,614],"content":"This method performs a word (case-sensitive and culture-sensitive) search using the current culture.","nodes":[{"content":"This method performs a word (case-sensitive and culture-sensitive) search using the current culture.","pos":[0,100]}]},{"pos":[621,1816],"content":"Character sets include ignorable characters, which are characters that are not considered when performing a linguistic or culture-sensitive comparison. In a culture-sensitive search, if `value` contains an ignorable character, the result is equivalent to searching with that character removed. If `value` consists only of one or more ignorable characters, the <xref:System.String.LastIndexOf%2A> method always returns `startIndex`, which is the character position at which the search begins. In the following example, the <xref:System.String.LastIndexOf%2A> method is used to find the position of a soft hyphen (U+00AD) in the two characters that precede the final \"m\" of two strings. Only one of the strings contains the required substring. If the example is run on the [!INCLUDE[netfx40_short](~/includes/netfx40-short-md.md)] or later, in both cases, because the soft hyphen is an ignorable character, the method returns the index of \"m\" in the string when it performs a culture-sensitive comparison. Note that in the case of the first string, which includes the soft hyphen followed by an \"m\", the method fails to return the index of the soft hyphen but instead returns the index of the \"m\".","nodes":[{"content":"Character sets include ignorable characters, which are characters that are not considered when performing a linguistic or culture-sensitive comparison.","pos":[0,151]},{"content":"In a culture-sensitive search, if <ph id=\"ph1\">`value`</ph> contains an ignorable character, the result is equivalent to searching with that character removed.","pos":[152,293],"source":" In a culture-sensitive search, if `value` contains an ignorable character, the result is equivalent to searching with that character removed."},{"content":"If <ph id=\"ph1\">`value`</ph> consists only of one or more ignorable characters, the <ph id=\"ph2\">&lt;xref:System.String.LastIndexOf%2A&gt;</ph> method always returns <ph id=\"ph3\">`startIndex`</ph>, which is the character position at which the search begins.","pos":[294,491],"source":" If `value` consists only of one or more ignorable characters, the <xref:System.String.LastIndexOf%2A> method always returns `startIndex`, which is the character position at which the search begins."},{"content":"In the following example, the <ph id=\"ph1\">&lt;xref:System.String.LastIndexOf%2A&gt;</ph> method is used to find the position of a soft hyphen (U+00AD) in the two characters that precede the final \"m\" of two strings.","pos":[492,684],"source":" In the following example, the <xref:System.String.LastIndexOf%2A> method is used to find the position of a soft hyphen (U+00AD) in the two characters that precede the final \"m\" of two strings."},{"content":"Only one of the strings contains the required substring.","pos":[685,741]},{"content":"If the example is run on the <ph id=\"ph1\">[!INCLUDE[netfx40_short](~/includes/netfx40-short-md.md)]</ph> or later, in both cases, because the soft hyphen is an ignorable character, the method returns the index of \"m\" in the string when it performs a culture-sensitive comparison.","pos":[742,1003],"source":" If the example is run on the [!INCLUDE[netfx40_short](~/includes/netfx40-short-md.md)] or later, in both cases, because the soft hyphen is an ignorable character, the method returns the index of \"m\" in the string when it performs a culture-sensitive comparison."},{"content":"Note that in the case of the first string, which includes the soft hyphen followed by an \"m\", the method fails to return the index of the soft hyphen but instead returns the index of the \"m\".","pos":[1004,1195]}]},{"pos":[1823,2112],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>System.String.LastIndexOf#23<ept id=\"p2\">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.LastIndexOf/cs/lastindexof23.cs#23)</ept><ept id=\"p1\">]</ept> <bpt id=\"p3\">[!code-vb</bpt><bpt id=\"p4\">[</bpt>System.String.LastIndexOf#23<ept id=\"p4\">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.LastIndexOf/vb/lastindexof23.vb#23)</ept><ept id=\"p3\">]</ept>","source":"[!code-csharp[System.String.LastIndexOf#23](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.LastIndexOf/cs/lastindexof23.cs#23)]\n [!code-vb[System.String.LastIndexOf#23](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.LastIndexOf/vb/lastindexof23.vb#23)]"}],"pos":[457946,460078],"yaml":true,"extradata":"MT"},{"content":"The string to seek.","nodes":[{"pos":[0,19],"content":"The string to seek.","nodes":[{"content":"The string to seek.","pos":[0,19]}]}],"pos":[460779,460799],"yaml":true},{"content":"The search starting position. The search proceeds from <code>startIndex</code> toward the beginning of this instance.","nodes":[{"pos":[0,117],"content":"The search starting position. The search proceeds from <code>startIndex</code> toward the beginning of this instance.","nodes":[{"content":"The search starting position.","pos":[0,29]},{"content":"The search proceeds from <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">startIndex</ph><ept id=\"p1\">&lt;/code&gt;</ept> toward the beginning of this instance.","pos":[30,117],"source":" The search proceeds from <code>startIndex</code> toward the beginning of this instance."}]}],"pos":[460864,460982],"yaml":true},{"content":"The number of character positions to examine.","nodes":[{"pos":[0,45],"content":"The number of character positions to examine.","nodes":[{"content":"The number of character positions to examine.","pos":[0,45]}]}],"pos":[461042,461088],"yaml":true},{"content":"The zero-based starting index position of <code>value</code> if that string is found, or -1 if it is not found or if the current instance equals <xref href=\"System.String.Empty\"></xref>. If <code>value</code> is <xref href=\"System.String.Empty\"></xref>, the return value is the smaller of <code>startIndex</code> and the last index position in this instance.","nodes":[{"pos":[0,358],"content":"The zero-based starting index position of <code>value</code> if that string is found, or -1 if it is not found or if the current instance equals <xref href=\"System.String.Empty\"></xref>. If <code>value</code> is <xref href=\"System.String.Empty\"></xref>, the return value is the smaller of <code>startIndex</code> and the last index position in this instance.","nodes":[{"content":"The zero-based starting index position of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept> if that string is found, or -1 if it is not found or if the current instance equals <ph id=\"ph2\">&lt;xref href=\"System.String.Empty\"&gt;&lt;/xref&gt;</ph>.","pos":[0,186],"source":"The zero-based starting index position of <code>value</code> if that string is found, or -1 if it is not found or if the current instance equals <xref href=\"System.String.Empty\"></xref>."},{"content":"If <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept> is <ph id=\"ph2\">&lt;xref href=\"System.String.Empty\"&gt;&lt;/xref&gt;</ph>, the return value is the smaller of <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph3\">startIndex</ph><ept id=\"p2\">&lt;/code&gt;</ept> and the last index position in this instance.","pos":[187,358],"source":" If <code>value</code> is <xref href=\"System.String.Empty\"></xref>, the return value is the smaller of <code>startIndex</code> and the last index position in this instance."}]}],"pos":[461144,461503],"yaml":true},{"content":"<code>value</code> is `null`.","nodes":[{"pos":[0,29],"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>value</code> is `null`."}],"pos":[461658,461688],"yaml":true},{"content":"<code>count</code> is negative.  \n  \n -or-  \n  \n The current instance does not equal <xref href=\"System.String.Empty\"></xref>, and <code>startIndex</code> is negative.  \n  \n -or-  \n  \n The current instance does not equal <xref href=\"System.String.Empty\"></xref>, and <code>startIndex</code> is greater than the length of this instance.  \n  \n -or-  \n  \n The current instance does not equal <xref href=\"System.String.Empty\"></xref>, and <code>startIndex</code> - <code>count</code>+ 1 specifies a position that is not within this instance.  \n  \n -or-  \n  \n The current instance equals <xref href=\"System.String.Empty\"></xref> and <code>start</code> is less than -1 or greater than zero.  \n  \n -or-  \n  \n The current instance equals <xref href=\"System.String.Empty\"></xref> and <code>count</code> is greater than 1.","nodes":[{"pos":[0,31],"content":"<ph id=\"ph1\">&lt;code&gt;count&lt;/code&gt;</ph> is negative.","source":"<code>count</code> is negative."},{"pos":[38,42],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[49,167],"content":"The current instance does not equal <ph id=\"ph1\">&lt;xref href=\"System.String.Empty\"&gt;&lt;/xref&gt;</ph>, and <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">startIndex</ph><ept id=\"p1\">&lt;/code&gt;</ept> is negative.","source":"The current instance does not equal <xref href=\"System.String.Empty\"></xref>, and <code>startIndex</code> is negative."},{"pos":[174,178],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[185,335],"content":"The current instance does not equal <ph id=\"ph1\">&lt;xref href=\"System.String.Empty\"&gt;&lt;/xref&gt;</ph>, and <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">startIndex</ph><ept id=\"p1\">&lt;/code&gt;</ept> is greater than the length of this instance.","source":"The current instance does not equal <xref href=\"System.String.Empty\"></xref>, and <code>startIndex</code> is greater than the length of this instance."},{"pos":[342,346],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[353,537],"content":"The current instance does not equal <ph id=\"ph1\">&lt;xref href=\"System.String.Empty\"&gt;&lt;/xref&gt;</ph>, and <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">startIndex</ph><ept id=\"p1\">&lt;/code&gt;</ept><ph id=\"ph3\"> - </ph><bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph4\">count</ph><ept id=\"p2\">&lt;/code&gt;</ept>+ 1 specifies a position that is not within this instance.","source":"The current instance does not equal <xref href=\"System.String.Empty\"></xref>, and <code>startIndex</code> - <code>count</code>+ 1 specifies a position that is not within this instance."},{"pos":[544,548],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[555,684],"content":"The current instance equals <ph id=\"ph1\">&lt;xref href=\"System.String.Empty\"&gt;&lt;/xref&gt;</ph> and <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">start</ph><ept id=\"p1\">&lt;/code&gt;</ept> is less than -1 or greater than zero.","source":"The current instance equals <xref href=\"System.String.Empty\"></xref> and <code>start</code> is less than -1 or greater than zero."},{"pos":[691,695],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[702,812],"content":"The current instance equals <ph id=\"ph1\">&lt;xref href=\"System.String.Empty\"&gt;&lt;/xref&gt;</ph> and <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">count</ph><ept id=\"p1\">&lt;/code&gt;</ept> is greater than 1.","source":"The current instance equals <xref href=\"System.String.Empty\"></xref> and <code>count</code> is greater than 1."}],"pos":[461802,462647],"yaml":true},{"content":"Reports the zero-based index position of the last occurrence of a specified Unicode character within this instance. The search starts at a specified character position and proceeds backward toward the beginning of the string.","nodes":[{"pos":[0,225],"content":"Reports the zero-based index position of the last occurrence of a specified Unicode character within this instance. The search starts at a specified character position and proceeds backward toward the beginning of the string.","nodes":[{"content":"Reports the zero-based index position of the last occurrence of a specified Unicode character within this instance. The search starts at a specified character position and proceeds backward toward the beginning of the string.","pos":[0,225],"nodes":[{"content":"Reports the zero-based index position of the last occurrence of a specified Unicode character within this instance.","pos":[0,115]},{"content":"The search starts at a specified character position and proceeds backward toward the beginning of the string.","pos":[116,225]}]}]}],"pos":[464148,464374],"yaml":true},{"content":"Index numbering starts from zero. That is, the first character in the string is at index zero and the last is at <xref:System.String.Length%2A> - 1.This method begins searching at the `startIndex` character position of this instance and proceeds backward toward the beginning of the current instance until either `value` is found or the first character position has been examined. For example, if `startIndex` is <xref:System.String.Length%2A> - 1, the method searches every character from the last character in the string to the beginning. The search is case-sensitive.  \n  \n This method performs an ordinal (culture-insensitive) search, where a character is considered equivalent to another character only if their Unicode scalar values are the same. To perform a culture-sensitive search, use the <xref:System.Globalization.CompareInfo.LastIndexOf%2A?displayProperty=fullName> method, where a Unicode scalar value representing a precomposed character, such as the ligature \"Ã\" (U+00C6), might be considered equivalent to any occurrence of the character's components in the correct sequence, such as \"AE\" (U+0041, U+0045), depending on the culture.","nodes":[{"pos":[0,570],"content":"Index numbering starts from zero. That is, the first character in the string is at index zero and the last is at <xref:System.String.Length%2A> - 1.This method begins searching at the `startIndex` character position of this instance and proceeds backward toward the beginning of the current instance until either `value` is found or the first character position has been examined. For example, if `startIndex` is <xref:System.String.Length%2A> - 1, the method searches every character from the last character in the string to the beginning. The search is case-sensitive.","nodes":[{"content":"Index numbering starts from zero.","pos":[0,33]},{"content":"That is, the first character in the string is at index zero and the last is at <ph id=\"ph1\">&lt;xref:System.String.Length%2A&gt;</ph> - 1.This method begins searching at the <ph id=\"ph2\">`startIndex`</ph> character position of this instance and proceeds backward toward the beginning of the current instance until either <ph id=\"ph3\">`value`</ph> is found or the first character position has been examined.","pos":[34,380],"source":" That is, the first character in the string is at index zero and the last is at <xref:System.String.Length%2A> - 1.This method begins searching at the `startIndex` character position of this instance and proceeds backward toward the beginning of the current instance until either `value` is found or the first character position has been examined."},{"content":"For example, if <ph id=\"ph1\">`startIndex`</ph> is <ph id=\"ph2\">&lt;xref:System.String.Length%2A&gt;</ph> - 1, the method searches every character from the last character in the string to the beginning.","pos":[381,540],"source":" For example, if `startIndex` is <xref:System.String.Length%2A> - 1, the method searches every character from the last character in the string to the beginning."},{"content":"The search is case-sensitive.","pos":[541,570]}]},{"pos":[577,1150],"content":"This method performs an ordinal (culture-insensitive) search, where a character is considered equivalent to another character only if their Unicode scalar values are the same. To perform a culture-sensitive search, use the <xref:System.Globalization.CompareInfo.LastIndexOf%2A?displayProperty=fullName> method, where a Unicode scalar value representing a precomposed character, such as the ligature \"Ã\" (U+00C6), might be considered equivalent to any occurrence of the character's components in the correct sequence, such as \"AE\" (U+0041, U+0045), depending on the culture.","nodes":[{"content":"This method performs an ordinal (culture-insensitive) search, where a character is considered equivalent to another character only if their Unicode scalar values are the same. To perform a culture-sensitive search, use the <xref:System.Globalization.CompareInfo.LastIndexOf%2A?displayProperty=fullName> method, where a Unicode scalar value representing a precomposed character, such as the ligature \"Ã\" (U+00C6), might be considered equivalent to any occurrence of the character's components in the correct sequence, such as \"AE\" (U+0041, U+0045), depending on the culture.","pos":[0,573],"nodes":[{"content":"This method performs an ordinal (culture-insensitive) search, where a character is considered equivalent to another character only if their Unicode scalar values are the same.","pos":[0,175]},{"content":"To perform a culture-sensitive search, use the <ph id=\"ph1\">&lt;xref:System.Globalization.CompareInfo.LastIndexOf%2A?displayProperty=fullName&gt;</ph> method, where a Unicode scalar value representing a precomposed character, such as the ligature \"Ã\" (U+00C6), might be considered equivalent to any occurrence of the character's components in the correct sequence, such as \"AE\" (U+0041, U+0045), depending on the culture.","pos":[176,573],"source":" To perform a culture-sensitive search, use the <xref:System.Globalization.CompareInfo.LastIndexOf%2A?displayProperty=fullName> method, where a Unicode scalar value representing a precomposed character, such as the ligature \"Ã\" (U+00C6), might be considered equivalent to any occurrence of the character's components in the correct sequence, such as \"AE\" (U+0041, U+0045), depending on the culture."}]}]}],"pos":[464385,465544],"yaml":true,"extradata":"MT"},{"content":"The Unicode character to seek.","nodes":[{"pos":[0,30],"content":"The Unicode character to seek.","nodes":[{"content":"The Unicode character to seek.","pos":[0,30]}]}],"pos":[466226,466257],"yaml":true},{"content":"The starting position of the search. The search proceeds from <code>startIndex</code> toward the beginning of this instance.","nodes":[{"pos":[0,124],"content":"The starting position of the search. The search proceeds from <code>startIndex</code> toward the beginning of this instance.","nodes":[{"content":"The starting position of the search.","pos":[0,36]},{"content":"The search proceeds from <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">startIndex</ph><ept id=\"p1\">&lt;/code&gt;</ept> toward the beginning of this instance.","pos":[37,124],"source":" The search proceeds from <code>startIndex</code> toward the beginning of this instance."}]}],"pos":[466322,466447],"yaml":true},{"content":"The zero-based index position of <code>value</code> if that character is found, or -1 if it is not found or if the current instance equals <xref href=\"System.String.Empty\"></xref>.","nodes":[{"pos":[0,180],"content":"The zero-based index position of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept> if that character is found, or -1 if it is not found or if the current instance equals <ph id=\"ph2\">&lt;xref href=\"System.String.Empty\"&gt;&lt;/xref&gt;</ph>.","source":"The zero-based index position of <code>value</code> if that character is found, or -1 if it is not found or if the current instance equals <xref href=\"System.String.Empty\"></xref>."}],"pos":[466503,466684],"yaml":true},{"content":"The current instance does not equal <xref href=\"System.String.Empty\"></xref>, and <code>startIndex</code> is less than zero or greater than or equal to the length of this instance.","nodes":[{"pos":[0,180],"content":"The current instance does not equal <ph id=\"ph1\">&lt;xref href=\"System.String.Empty\"&gt;&lt;/xref&gt;</ph>, and <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">startIndex</ph><ept id=\"p1\">&lt;/code&gt;</ept> is less than zero or greater than or equal to the length of this instance.","source":"The current instance does not equal <xref href=\"System.String.Empty\"></xref>, and <code>startIndex</code> is less than zero or greater than or equal to the length of this instance."}],"pos":[466851,467032],"yaml":true},{"content":"Reports the zero-based index position of the last occurrence of a specified string within this instance.","nodes":[{"pos":[0,104],"content":"Reports the zero-based index position of the last occurrence of a specified string within this instance.","nodes":[{"content":"Reports the zero-based index position of the last occurrence of a specified string within this instance.","pos":[0,104]}]}],"pos":[468485,468590],"yaml":true},{"content":"Index numbering starts from zero. That is, the first character in the string is at index zero and the last is at <xref:System.String.Length%2A> - 1.  \n  \n The search begins at the last character position of this instance and proceeds backward toward the beginning until either `value` is found or the first character position has been examined.  \n  \n This method performs a word (case-sensitive and culture-sensitive) search using the current culture.  \n  \n Character sets include ignorable characters, which are characters that are not considered when performing a linguistic or culture-sensitive comparison. In a culture-sensitive search, if `value` contains an ignorable character, the result is equivalent to searching with that character removed. If `value` consists only of one or more ignorable characters, the <xref:System.String.LastIndexOf%28System.String%29> method always returns <xref:System.String.Length%2A?displayProperty=fullName> â 1, which represents the last index position in the current instance. In the following example, the <xref:System.String.LastIndexOf%28System.String%29> method is used to find three substrings (a soft hyphen (U+00AD), a soft hyphen followed by \"n\", and a soft hyphen followed by \"m\") in two strings. Only one of the strings contains a soft hyphen. If the example is run on the [!INCLUDE[netfx40_short](~/includes/netfx40-short-md.md)] or later, in each case, because the soft hyphen is an ignorable character, the result is the same as if the soft hyphen had not been included in `value`. When searching for a soft hyphen only, the method returns 6 and 5. These values correspond to the index of the last character in the two strings.  \n  \n [!code-csharp[System.String.LastIndexOf#21](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.LastIndexOf/cs/lastindexof21.cs#21)]\n [!code-vb[System.String.LastIndexOf#21](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.LastIndexOf/vb/lastindexof21.vb#21)]","nodes":[{"pos":[0,148],"content":"Index numbering starts from zero. That is, the first character in the string is at index zero and the last is at <xref:System.String.Length%2A> - 1.","nodes":[{"content":"Index numbering starts from zero. That is, the first character in the string is at index zero and the last is at <xref:System.String.Length%2A> - 1.","pos":[0,148],"nodes":[{"content":"Index numbering starts from zero.","pos":[0,33]},{"content":"That is, the first character in the string is at index zero and the last is at <ph id=\"ph1\">&lt;xref:System.String.Length%2A&gt;</ph> - 1.","pos":[34,148],"source":" That is, the first character in the string is at index zero and the last is at <xref:System.String.Length%2A> - 1."}]}]},{"pos":[155,344],"content":"The search begins at the last character position of this instance and proceeds backward toward the beginning until either <ph id=\"ph1\">`value`</ph> is found or the first character position has been examined.","source":"The search begins at the last character position of this instance and proceeds backward toward the beginning until either `value` is found or the first character position has been examined."},{"pos":[351,451],"content":"This method performs a word (case-sensitive and culture-sensitive) search using the current culture.","nodes":[{"content":"This method performs a word (case-sensitive and culture-sensitive) search using the current culture.","pos":[0,100]}]},{"pos":[458,1682],"content":"Character sets include ignorable characters, which are characters that are not considered when performing a linguistic or culture-sensitive comparison. In a culture-sensitive search, if `value` contains an ignorable character, the result is equivalent to searching with that character removed. If `value` consists only of one or more ignorable characters, the <xref:System.String.LastIndexOf%28System.String%29> method always returns <xref:System.String.Length%2A?displayProperty=fullName> â 1, which represents the last index position in the current instance. In the following example, the <xref:System.String.LastIndexOf%28System.String%29> method is used to find three substrings (a soft hyphen (U+00AD), a soft hyphen followed by \"n\", and a soft hyphen followed by \"m\") in two strings. Only one of the strings contains a soft hyphen. If the example is run on the [!INCLUDE[netfx40_short](~/includes/netfx40-short-md.md)] or later, in each case, because the soft hyphen is an ignorable character, the result is the same as if the soft hyphen had not been included in `value`. When searching for a soft hyphen only, the method returns 6 and 5. These values correspond to the index of the last character in the two strings.","nodes":[{"content":"Character sets include ignorable characters, which are characters that are not considered when performing a linguistic or culture-sensitive comparison.","pos":[0,151]},{"content":"In a culture-sensitive search, if <ph id=\"ph1\">`value`</ph> contains an ignorable character, the result is equivalent to searching with that character removed.","pos":[152,293],"source":" In a culture-sensitive search, if `value` contains an ignorable character, the result is equivalent to searching with that character removed."},{"content":"If <ph id=\"ph1\">`value`</ph> consists only of one or more ignorable characters, the <ph id=\"ph2\">&lt;xref:System.String.LastIndexOf%28System.String%29&gt;</ph> method always returns <ph id=\"ph3\">&lt;xref:System.String.Length%2A?displayProperty=fullName&gt;</ph> â 1, which represents the last index position in the current instance.","pos":[294,560],"source":" If `value` consists only of one or more ignorable characters, the <xref:System.String.LastIndexOf%28System.String%29> method always returns <xref:System.String.Length%2A?displayProperty=fullName> â 1, which represents the last index position in the current instance."},{"content":"In the following example, the <ph id=\"ph1\">&lt;xref:System.String.LastIndexOf%28System.String%29&gt;</ph> method is used to find three substrings (a soft hyphen (U+00AD), a soft hyphen followed by \"n\", and a soft hyphen followed by \"m\") in two strings.","pos":[561,789],"source":" In the following example, the <xref:System.String.LastIndexOf%28System.String%29> method is used to find three substrings (a soft hyphen (U+00AD), a soft hyphen followed by \"n\", and a soft hyphen followed by \"m\") in two strings."},{"content":"Only one of the strings contains a soft hyphen.","pos":[790,837]},{"content":"If the example is run on the <ph id=\"ph1\">[!INCLUDE[netfx40_short](~/includes/netfx40-short-md.md)]</ph> or later, in each case, because the soft hyphen is an ignorable character, the result is the same as if the soft hyphen had not been included in <ph id=\"ph2\">`value`</ph>.","pos":[838,1078],"source":" If the example is run on the [!INCLUDE[netfx40_short](~/includes/netfx40-short-md.md)] or later, in each case, because the soft hyphen is an ignorable character, the result is the same as if the soft hyphen had not been included in `value`."},{"content":"When searching for a soft hyphen only, the method returns 6 and 5.","pos":[1079,1145]},{"content":"These values correspond to the index of the last character in the two strings.","pos":[1146,1224]}]},{"pos":[1689,1978],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>System.String.LastIndexOf#21<ept id=\"p2\">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.LastIndexOf/cs/lastindexof21.cs#21)</ept><ept id=\"p1\">]</ept> <bpt id=\"p3\">[!code-vb</bpt><bpt id=\"p4\">[</bpt>System.String.LastIndexOf#21<ept id=\"p4\">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.LastIndexOf/vb/lastindexof21.vb#21)</ept><ept id=\"p3\">]</ept>","source":"[!code-csharp[System.String.LastIndexOf#21](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.LastIndexOf/cs/lastindexof21.cs#21)]\n [!code-vb[System.String.LastIndexOf#21](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.LastIndexOf/vb/lastindexof21.vb#21)]"}],"pos":[468601,470595],"yaml":true,"extradata":"MT"},{"content":"The string to seek.","nodes":[{"pos":[0,19],"content":"The string to seek.","nodes":[{"content":"The string to seek.","pos":[0,19]}]}],"pos":[471331,471351],"yaml":true},{"content":"The zero-based starting index position of <code>value</code> if that string is found, or -1 if it is not. If <code>value</code> is <xref href=\"System.String.Empty\"></xref>, the return value is the last index position in this instance.","nodes":[{"pos":[0,234],"content":"The zero-based starting index position of <code>value</code> if that string is found, or -1 if it is not. If <code>value</code> is <xref href=\"System.String.Empty\"></xref>, the return value is the last index position in this instance.","nodes":[{"content":"The zero-based starting index position of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept> if that string is found, or -1 if it is not.","pos":[0,105],"source":"The zero-based starting index position of <code>value</code> if that string is found, or -1 if it is not."},{"content":"If <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept> is <ph id=\"ph2\">&lt;xref href=\"System.String.Empty\"&gt;&lt;/xref&gt;</ph>, the return value is the last index position in this instance.","pos":[106,234],"source":" If <code>value</code> is <xref href=\"System.String.Empty\"></xref>, the return value is the last index position in this instance."}]}],"pos":[471407,471642],"yaml":true},{"content":"<code>value</code> is `null`.","nodes":[{"pos":[0,29],"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>value</code> is `null`."}],"pos":[471797,471827],"yaml":true},{"content":"Reports the zero-based index position of the last occurrence of a specified Unicode character within this instance.","nodes":[{"pos":[0,115],"content":"Reports the zero-based index position of the last occurrence of a specified Unicode character within this instance.","nodes":[{"content":"Reports the zero-based index position of the last occurrence of a specified Unicode character within this instance.","pos":[0,115]}]}],"pos":[473268,473384],"yaml":true},{"content":"Index numbering starts from zero. That is, the first character in the string is at index zero and the last is at <xref:System.String.Length%2A> - 1.  \n  \n This method begins searching at the last character position of this instance and proceeds backward toward the beginning until either `value` is found or the first character position has been examined. The search is case-sensitive.  \n  \n This method performs an ordinal (culture-insensitive) search, where a character is considered equivalent to another character only if their Unicode scalar values are the same. To perform a culture-sensitive search, use the <xref:System.Globalization.CompareInfo.LastIndexOf%2A?displayProperty=fullName> method, where a Unicode scalar value representing a precomposed character, such as the ligature \"Ã\" (U+00C6), might be considered equivalent to any occurrence of the character's components in the correct sequence, such as \"AE\" (U+0041, U+0045), depending on the culture.","nodes":[{"pos":[0,148],"content":"Index numbering starts from zero. That is, the first character in the string is at index zero and the last is at <xref:System.String.Length%2A> - 1.","nodes":[{"content":"Index numbering starts from zero. That is, the first character in the string is at index zero and the last is at <xref:System.String.Length%2A> - 1.","pos":[0,148],"nodes":[{"content":"Index numbering starts from zero.","pos":[0,33]},{"content":"That is, the first character in the string is at index zero and the last is at <ph id=\"ph1\">&lt;xref:System.String.Length%2A&gt;</ph> - 1.","pos":[34,148],"source":" That is, the first character in the string is at index zero and the last is at <xref:System.String.Length%2A> - 1."}]}]},{"pos":[155,385],"content":"This method begins searching at the last character position of this instance and proceeds backward toward the beginning until either `value` is found or the first character position has been examined. The search is case-sensitive.","nodes":[{"content":"This method begins searching at the last character position of this instance and proceeds backward toward the beginning until either <ph id=\"ph1\">`value`</ph> is found or the first character position has been examined.","pos":[0,200],"source":"This method begins searching at the last character position of this instance and proceeds backward toward the beginning until either `value` is found or the first character position has been examined."},{"content":"The search is case-sensitive.","pos":[201,230]}]},{"pos":[392,965],"content":"This method performs an ordinal (culture-insensitive) search, where a character is considered equivalent to another character only if their Unicode scalar values are the same. To perform a culture-sensitive search, use the <xref:System.Globalization.CompareInfo.LastIndexOf%2A?displayProperty=fullName> method, where a Unicode scalar value representing a precomposed character, such as the ligature \"Ã\" (U+00C6), might be considered equivalent to any occurrence of the character's components in the correct sequence, such as \"AE\" (U+0041, U+0045), depending on the culture.","nodes":[{"content":"This method performs an ordinal (culture-insensitive) search, where a character is considered equivalent to another character only if their Unicode scalar values are the same. To perform a culture-sensitive search, use the <xref:System.Globalization.CompareInfo.LastIndexOf%2A?displayProperty=fullName> method, where a Unicode scalar value representing a precomposed character, such as the ligature \"Ã\" (U+00C6), might be considered equivalent to any occurrence of the character's components in the correct sequence, such as \"AE\" (U+0041, U+0045), depending on the culture.","pos":[0,573],"nodes":[{"content":"This method performs an ordinal (culture-insensitive) search, where a character is considered equivalent to another character only if their Unicode scalar values are the same.","pos":[0,175]},{"content":"To perform a culture-sensitive search, use the <ph id=\"ph1\">&lt;xref:System.Globalization.CompareInfo.LastIndexOf%2A?displayProperty=fullName&gt;</ph> method, where a Unicode scalar value representing a precomposed character, such as the ligature \"Ã\" (U+00C6), might be considered equivalent to any occurrence of the character's components in the correct sequence, such as \"AE\" (U+0041, U+0045), depending on the culture.","pos":[176,573],"source":" To perform a culture-sensitive search, use the <xref:System.Globalization.CompareInfo.LastIndexOf%2A?displayProperty=fullName> method, where a Unicode scalar value representing a precomposed character, such as the ligature \"Ã\" (U+00C6), might be considered equivalent to any occurrence of the character's components in the correct sequence, such as \"AE\" (U+0041, U+0045), depending on the culture."}]}]}],"pos":[473395,474371],"yaml":true,"extradata":"MT"},{"content":"The Unicode character to seek.","nodes":[{"pos":[0,30],"content":"The Unicode character to seek.","nodes":[{"content":"The Unicode character to seek.","pos":[0,30]}]}],"pos":[475128,475159],"yaml":true},{"content":"The zero-based index position of <code>value</code> if that character is found, or -1 if it is not.","nodes":[{"pos":[0,99],"content":"The zero-based index position of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept> if that character is found, or -1 if it is not.","source":"The zero-based index position of <code>value</code> if that character is found, or -1 if it is not."}],"pos":[475215,475315],"yaml":true},{"content":"Reports the zero-based index position of the last occurrence of a specified string within this instance. The search starts at a specified character position and proceeds backward toward the beginning of the string.","nodes":[{"pos":[0,214],"content":"Reports the zero-based index position of the last occurrence of a specified string within this instance. The search starts at a specified character position and proceeds backward toward the beginning of the string.","nodes":[{"content":"Reports the zero-based index position of the last occurrence of a specified string within this instance. The search starts at a specified character position and proceeds backward toward the beginning of the string.","pos":[0,214],"nodes":[{"content":"Reports the zero-based index position of the last occurrence of a specified string within this instance.","pos":[0,104]},{"content":"The search starts at a specified character position and proceeds backward toward the beginning of the string.","pos":[105,214]}]}]}],"pos":[476884,477099],"yaml":true},{"content":"Index numbering starts from zero. That is, the first character in the string is at index zero and the last is at <xref:System.String.Length%2A> - 1.  \n  \n The search begins at the `startIndex` character position of this instance and proceeds backward toward the beginning until either `value` is found or the first character position has been examined. For example, if `startIndex` is <xref:System.String.Length%2A> - 1, the method searches every character from the last character in the string to the beginning.  \n  \n This method performs a word (case-sensitive and culture-sensitive) search using the current culture.  \n  \n Character sets include ignorable characters, which are characters that are not considered when performing a linguistic or culture-sensitive comparison. In a culture-sensitive search, if `value` contains an ignorable character, the result is equivalent to searching with that character removed. If `value` consists only of one or more ignorable characters, the <xref:System.String.LastIndexOf%28System.String%2CSystem.Int32%29> method always returns `startIndex`, which is the character position at which the search begins. In the following example, the <xref:System.String.LastIndexOf%28System.String%2CSystem.Int32%29> method is used to find a substring that includes a soft hyphen (U+00AD) and that precedes or includes the final \"m\" in a string. If the example is run on the [!INCLUDE[netfx40_short](~/includes/netfx40-short-md.md)] or later, because the soft hyphen in the search string is ignored, calling the method to find a substring that consists of the soft hyphen and \"m\" returns the position of the \"m\" in the string, whereas calling it to find a substring that consists of the soft hyphen and \"n\" returns the position of the \"n\". When the search string contains only the soft hyphen, the method returns the index of the \"m\", which represents the value of `startIndex`.  \n  \n [!code-csharp[System.String.LastIndexOf#22](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.LastIndexOf/cs/lastindexof22.cs#22)]\n [!code-vb[System.String.LastIndexOf#22](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.LastIndexOf/vb/lastindexof22.vb#22)]","nodes":[{"pos":[0,148],"content":"Index numbering starts from zero. That is, the first character in the string is at index zero and the last is at <xref:System.String.Length%2A> - 1.","nodes":[{"content":"Index numbering starts from zero. That is, the first character in the string is at index zero and the last is at <xref:System.String.Length%2A> - 1.","pos":[0,148],"nodes":[{"content":"Index numbering starts from zero.","pos":[0,33]},{"content":"That is, the first character in the string is at index zero and the last is at <ph id=\"ph1\">&lt;xref:System.String.Length%2A&gt;</ph> - 1.","pos":[34,148],"source":" That is, the first character in the string is at index zero and the last is at <xref:System.String.Length%2A> - 1."}]}]},{"pos":[155,512],"content":"The search begins at the `startIndex` character position of this instance and proceeds backward toward the beginning until either `value` is found or the first character position has been examined. For example, if `startIndex` is <xref:System.String.Length%2A> - 1, the method searches every character from the last character in the string to the beginning.","nodes":[{"content":"The search begins at the <ph id=\"ph1\">`startIndex`</ph> character position of this instance and proceeds backward toward the beginning until either <ph id=\"ph2\">`value`</ph> is found or the first character position has been examined.","pos":[0,197],"source":"The search begins at the `startIndex` character position of this instance and proceeds backward toward the beginning until either `value` is found or the first character position has been examined."},{"content":"For example, if <ph id=\"ph1\">`startIndex`</ph> is <ph id=\"ph2\">&lt;xref:System.String.Length%2A&gt;</ph> - 1, the method searches every character from the last character in the string to the beginning.","pos":[198,357],"source":" For example, if `startIndex` is <xref:System.String.Length%2A> - 1, the method searches every character from the last character in the string to the beginning."}]},{"pos":[519,619],"content":"This method performs a word (case-sensitive and culture-sensitive) search using the current culture.","nodes":[{"content":"This method performs a word (case-sensitive and culture-sensitive) search using the current culture.","pos":[0,100]}]},{"pos":[626,1907],"content":"Character sets include ignorable characters, which are characters that are not considered when performing a linguistic or culture-sensitive comparison. In a culture-sensitive search, if `value` contains an ignorable character, the result is equivalent to searching with that character removed. If `value` consists only of one or more ignorable characters, the <xref:System.String.LastIndexOf%28System.String%2CSystem.Int32%29> method always returns `startIndex`, which is the character position at which the search begins. In the following example, the <xref:System.String.LastIndexOf%28System.String%2CSystem.Int32%29> method is used to find a substring that includes a soft hyphen (U+00AD) and that precedes or includes the final \"m\" in a string. If the example is run on the [!INCLUDE[netfx40_short](~/includes/netfx40-short-md.md)] or later, because the soft hyphen in the search string is ignored, calling the method to find a substring that consists of the soft hyphen and \"m\" returns the position of the \"m\" in the string, whereas calling it to find a substring that consists of the soft hyphen and \"n\" returns the position of the \"n\". When the search string contains only the soft hyphen, the method returns the index of the \"m\", which represents the value of `startIndex`.","nodes":[{"content":"Character sets include ignorable characters, which are characters that are not considered when performing a linguistic or culture-sensitive comparison.","pos":[0,151]},{"content":"In a culture-sensitive search, if <ph id=\"ph1\">`value`</ph> contains an ignorable character, the result is equivalent to searching with that character removed.","pos":[152,293],"source":" In a culture-sensitive search, if `value` contains an ignorable character, the result is equivalent to searching with that character removed."},{"content":"If <ph id=\"ph1\">`value`</ph> consists only of one or more ignorable characters, the <ph id=\"ph2\">&lt;xref:System.String.LastIndexOf%28System.String%2CSystem.Int32%29&gt;</ph> method always returns <ph id=\"ph3\">`startIndex`</ph>, which is the character position at which the search begins.","pos":[294,522],"source":" If `value` consists only of one or more ignorable characters, the <xref:System.String.LastIndexOf%28System.String%2CSystem.Int32%29> method always returns `startIndex`, which is the character position at which the search begins."},{"content":"In the following example, the <ph id=\"ph1\">&lt;xref:System.String.LastIndexOf%28System.String%2CSystem.Int32%29&gt;</ph> method is used to find a substring that includes a soft hyphen (U+00AD) and that precedes or includes the final \"m\" in a string.","pos":[523,748],"source":" In the following example, the <xref:System.String.LastIndexOf%28System.String%2CSystem.Int32%29> method is used to find a substring that includes a soft hyphen (U+00AD) and that precedes or includes the final \"m\" in a string."},{"content":"If the example is run on the <ph id=\"ph1\">[!INCLUDE[netfx40_short](~/includes/netfx40-short-md.md)]</ph> or later, because the soft hyphen in the search string is ignored, calling the method to find a substring that consists of the soft hyphen and \"m\" returns the position of the \"m\" in the string, whereas calling it to find a substring that consists of the soft hyphen and \"n\" returns the position of the \"n\".","pos":[749,1142],"source":" If the example is run on the [!INCLUDE[netfx40_short](~/includes/netfx40-short-md.md)] or later, because the soft hyphen in the search string is ignored, calling the method to find a substring that consists of the soft hyphen and \"m\" returns the position of the \"m\" in the string, whereas calling it to find a substring that consists of the soft hyphen and \"n\" returns the position of the \"n\"."},{"content":"When the search string contains only the soft hyphen, the method returns the index of the \"m\", which represents the value of <ph id=\"ph1\">`startIndex`</ph>.","pos":[1143,1281],"source":" When the search string contains only the soft hyphen, the method returns the index of the \"m\", which represents the value of `startIndex`."}]},{"pos":[1914,2203],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>System.String.LastIndexOf#22<ept id=\"p2\">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.LastIndexOf/cs/lastindexof22.cs#22)</ept><ept id=\"p1\">]</ept> <bpt id=\"p3\">[!code-vb</bpt><bpt id=\"p4\">[</bpt>System.String.LastIndexOf#22<ept id=\"p4\">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.LastIndexOf/vb/lastindexof22.vb#22)</ept><ept id=\"p3\">]</ept>","source":"[!code-csharp[System.String.LastIndexOf#22](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.LastIndexOf/cs/lastindexof22.cs#22)]\n [!code-vb[System.String.LastIndexOf#22](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.LastIndexOf/vb/lastindexof22.vb#22)]"}],"pos":[477110,479337],"yaml":true,"extradata":"MT"},{"content":"The string to seek.","nodes":[{"pos":[0,19],"content":"The string to seek.","nodes":[{"content":"The string to seek.","pos":[0,19]}]}],"pos":[480039,480059],"yaml":true},{"content":"The search starting position. The search proceeds from <code>startIndex</code> toward the beginning of this instance.","nodes":[{"pos":[0,117],"content":"The search starting position. The search proceeds from <code>startIndex</code> toward the beginning of this instance.","nodes":[{"content":"The search starting position.","pos":[0,29]},{"content":"The search proceeds from <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">startIndex</ph><ept id=\"p1\">&lt;/code&gt;</ept> toward the beginning of this instance.","pos":[30,117],"source":" The search proceeds from <code>startIndex</code> toward the beginning of this instance."}]}],"pos":[480124,480242],"yaml":true},{"content":"The zero-based starting index position of <code>value</code> if that string is found, or -1 if it is not found or if the current instance equals <xref href=\"System.String.Empty\"></xref>. If <code>value</code> is <xref href=\"System.String.Empty\"></xref>, the return value is the smaller of <code>startIndex</code> and the last index position in this instance.","nodes":[{"pos":[0,358],"content":"The zero-based starting index position of <code>value</code> if that string is found, or -1 if it is not found or if the current instance equals <xref href=\"System.String.Empty\"></xref>. If <code>value</code> is <xref href=\"System.String.Empty\"></xref>, the return value is the smaller of <code>startIndex</code> and the last index position in this instance.","nodes":[{"content":"The zero-based starting index position of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept> if that string is found, or -1 if it is not found or if the current instance equals <ph id=\"ph2\">&lt;xref href=\"System.String.Empty\"&gt;&lt;/xref&gt;</ph>.","pos":[0,186],"source":"The zero-based starting index position of <code>value</code> if that string is found, or -1 if it is not found or if the current instance equals <xref href=\"System.String.Empty\"></xref>."},{"content":"If <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept> is <ph id=\"ph2\">&lt;xref href=\"System.String.Empty\"&gt;&lt;/xref&gt;</ph>, the return value is the smaller of <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph3\">startIndex</ph><ept id=\"p2\">&lt;/code&gt;</ept> and the last index position in this instance.","pos":[187,358],"source":" If <code>value</code> is <xref href=\"System.String.Empty\"></xref>, the return value is the smaller of <code>startIndex</code> and the last index position in this instance."}]}],"pos":[480298,480657],"yaml":true},{"content":"<code>value</code> is `null`.","nodes":[{"pos":[0,29],"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>value</code> is `null`."}],"pos":[480812,480842],"yaml":true},{"content":"The current instance does not equal <xref href=\"System.String.Empty\"></xref>, and <code>startIndex</code> is less than zero or greater than the length of the current instance.  \n  \n -or-  \n  \n The current instance equals <xref href=\"System.String.Empty\"></xref>, and <code>startIndex</code> is less than -1 or greater than zero.","nodes":[{"pos":[0,175],"content":"The current instance does not equal <ph id=\"ph1\">&lt;xref href=\"System.String.Empty\"&gt;&lt;/xref&gt;</ph>, and <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">startIndex</ph><ept id=\"p1\">&lt;/code&gt;</ept> is less than zero or greater than the length of the current instance.","source":"The current instance does not equal <xref href=\"System.String.Empty\"></xref>, and <code>startIndex</code> is less than zero or greater than the length of the current instance."},{"pos":[182,186],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[193,328],"content":"The current instance equals <ph id=\"ph1\">&lt;xref href=\"System.String.Empty\"&gt;&lt;/xref&gt;</ph>, and <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">startIndex</ph><ept id=\"p1\">&lt;/code&gt;</ept> is less than -1 or greater than zero.","source":"The current instance equals <xref href=\"System.String.Empty\"></xref>, and <code>startIndex</code> is less than -1 or greater than zero."}],"pos":[480956,481295],"yaml":true},{"content":"Reports the zero-based index position of the last occurrence in this instance of one or more characters specified in a Unicode array.","nodes":[{"pos":[0,133],"content":"Reports the zero-based index position of the last occurrence in this instance of one or more characters specified in a Unicode array.","nodes":[{"content":"Reports the zero-based index position of the last occurrence in this instance of one or more characters specified in a Unicode array.","pos":[0,133]}]}],"pos":[482766,482900],"yaml":true},{"content":"Index numbering starts from zero.  \n  \n This method begins searching at the last character position of this instance and proceeds backward toward the beginning until either a character in `anyOf` is found or the first character position has been examined. The search is case-sensitive.  \n  \n This method performs an ordinal (culture-insensitive) search, where a character is considered equivalent to another character only if their Unicode scalar values are the same. To perform a culture-sensitive search, use the <xref:System.Globalization.CompareInfo.LastIndexOf%2A?displayProperty=fullName> method, where a Unicode scalar value representing a precomposed character, such as the ligature \"Ã\" (U+00C6), might be considered equivalent to any occurrence of the character's components in the correct sequence, such as \"AE\" (U+0041, U+0045), depending on the culture.","nodes":[{"pos":[0,33],"content":"Index numbering starts from zero.","nodes":[{"content":"Index numbering starts from zero.","pos":[0,33]}]},{"pos":[40,285],"content":"This method begins searching at the last character position of this instance and proceeds backward toward the beginning until either a character in `anyOf` is found or the first character position has been examined. The search is case-sensitive.","nodes":[{"content":"This method begins searching at the last character position of this instance and proceeds backward toward the beginning until either a character in <ph id=\"ph1\">`anyOf`</ph> is found or the first character position has been examined.","pos":[0,215],"source":"This method begins searching at the last character position of this instance and proceeds backward toward the beginning until either a character in `anyOf` is found or the first character position has been examined."},{"content":"The search is case-sensitive.","pos":[216,245]}]},{"pos":[292,865],"content":"This method performs an ordinal (culture-insensitive) search, where a character is considered equivalent to another character only if their Unicode scalar values are the same. To perform a culture-sensitive search, use the <xref:System.Globalization.CompareInfo.LastIndexOf%2A?displayProperty=fullName> method, where a Unicode scalar value representing a precomposed character, such as the ligature \"Ã\" (U+00C6), might be considered equivalent to any occurrence of the character's components in the correct sequence, such as \"AE\" (U+0041, U+0045), depending on the culture.","nodes":[{"content":"This method performs an ordinal (culture-insensitive) search, where a character is considered equivalent to another character only if their Unicode scalar values are the same. To perform a culture-sensitive search, use the <xref:System.Globalization.CompareInfo.LastIndexOf%2A?displayProperty=fullName> method, where a Unicode scalar value representing a precomposed character, such as the ligature \"Ã\" (U+00C6), might be considered equivalent to any occurrence of the character's components in the correct sequence, such as \"AE\" (U+0041, U+0045), depending on the culture.","pos":[0,573],"nodes":[{"content":"This method performs an ordinal (culture-insensitive) search, where a character is considered equivalent to another character only if their Unicode scalar values are the same.","pos":[0,175]},{"content":"To perform a culture-sensitive search, use the <ph id=\"ph1\">&lt;xref:System.Globalization.CompareInfo.LastIndexOf%2A?displayProperty=fullName&gt;</ph> method, where a Unicode scalar value representing a precomposed character, such as the ligature \"Ã\" (U+00C6), might be considered equivalent to any occurrence of the character's components in the correct sequence, such as \"AE\" (U+0041, U+0045), depending on the culture.","pos":[176,573],"source":" To perform a culture-sensitive search, use the <xref:System.Globalization.CompareInfo.LastIndexOf%2A?displayProperty=fullName> method, where a Unicode scalar value representing a precomposed character, such as the ligature \"Ã\" (U+00C6), might be considered equivalent to any occurrence of the character's components in the correct sequence, such as \"AE\" (U+0041, U+0045), depending on the culture."}]}]}],"pos":[482911,483787],"yaml":true,"extradata":"MT"},{"content":"A Unicode character array containing one or more characters to seek.","nodes":[{"pos":[0,68],"content":"A Unicode character array containing one or more characters to seek.","nodes":[{"content":"A Unicode character array containing one or more characters to seek.","pos":[0,68]}]}],"pos":[484455,484524],"yaml":true},{"content":"The index position of the last occurrence in this instance where any character in <code>anyOf</code> was found; -1 if no character in <code>anyOf</code> was found.","nodes":[{"pos":[0,163],"content":"The index position of the last occurrence in this instance where any character in <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">anyOf</ph><ept id=\"p1\">&lt;/code&gt;</ept> was found; -1 if no character in <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">anyOf</ph><ept id=\"p2\">&lt;/code&gt;</ept> was found.","source":"The index position of the last occurrence in this instance where any character in <code>anyOf</code> was found; -1 if no character in <code>anyOf</code> was found."}],"pos":[484580,484744],"yaml":true},{"content":"<code>anyOf</code> is `null`.","nodes":[{"pos":[0,29],"content":"<ph id=\"ph1\">&lt;code&gt;anyOf&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>anyOf</code> is `null`."}],"pos":[484902,484932],"yaml":true},{"content":"Reports the zero-based index position of the last occurrence in this instance of one or more characters specified in a Unicode array. The search starts at a specified character position and proceeds backward toward the beginning of the string.","nodes":[{"pos":[0,243],"content":"Reports the zero-based index position of the last occurrence in this instance of one or more characters specified in a Unicode array. The search starts at a specified character position and proceeds backward toward the beginning of the string.","nodes":[{"content":"Reports the zero-based index position of the last occurrence in this instance of one or more characters specified in a Unicode array. The search starts at a specified character position and proceeds backward toward the beginning of the string.","pos":[0,243],"nodes":[{"content":"Reports the zero-based index position of the last occurrence in this instance of one or more characters specified in a Unicode array.","pos":[0,133]},{"content":"The search starts at a specified character position and proceeds backward toward the beginning of the string.","pos":[134,243]}]}]}],"pos":[486463,486707],"yaml":true},{"content":"Index numbering starts from zero.  \n  \n This method begins searching at the `startIndex` character position of this instance and proceeds backward toward the beginning until either a character in `anyOf` is found or the first character position has been examined. The search is case-sensitive.  \n  \n This method performs an ordinal (culture-insensitive) search, where a character is considered equivalent to another character only if their Unicode scalar values are the same. To perform a culture-sensitive search, use the <xref:System.Globalization.CompareInfo.LastIndexOf%2A?displayProperty=fullName> method, where a Unicode scalar value representing a precomposed character, such as the ligature \"Ã\" (U+00C6), might be considered equivalent to any occurrence of the character's components in the correct sequence, such as \"AE\" (U+0041, U+0045), depending on the culture.","nodes":[{"pos":[0,33],"content":"Index numbering starts from zero.","nodes":[{"content":"Index numbering starts from zero.","pos":[0,33]}]},{"pos":[40,293],"content":"This method begins searching at the `startIndex` character position of this instance and proceeds backward toward the beginning until either a character in `anyOf` is found or the first character position has been examined. The search is case-sensitive.","nodes":[{"content":"This method begins searching at the <ph id=\"ph1\">`startIndex`</ph> character position of this instance and proceeds backward toward the beginning until either a character in <ph id=\"ph2\">`anyOf`</ph> is found or the first character position has been examined.","pos":[0,223],"source":"This method begins searching at the `startIndex` character position of this instance and proceeds backward toward the beginning until either a character in `anyOf` is found or the first character position has been examined."},{"content":"The search is case-sensitive.","pos":[224,253]}]},{"pos":[300,873],"content":"This method performs an ordinal (culture-insensitive) search, where a character is considered equivalent to another character only if their Unicode scalar values are the same. To perform a culture-sensitive search, use the <xref:System.Globalization.CompareInfo.LastIndexOf%2A?displayProperty=fullName> method, where a Unicode scalar value representing a precomposed character, such as the ligature \"Ã\" (U+00C6), might be considered equivalent to any occurrence of the character's components in the correct sequence, such as \"AE\" (U+0041, U+0045), depending on the culture.","nodes":[{"content":"This method performs an ordinal (culture-insensitive) search, where a character is considered equivalent to another character only if their Unicode scalar values are the same. To perform a culture-sensitive search, use the <xref:System.Globalization.CompareInfo.LastIndexOf%2A?displayProperty=fullName> method, where a Unicode scalar value representing a precomposed character, such as the ligature \"Ã\" (U+00C6), might be considered equivalent to any occurrence of the character's components in the correct sequence, such as \"AE\" (U+0041, U+0045), depending on the culture.","pos":[0,573],"nodes":[{"content":"This method performs an ordinal (culture-insensitive) search, where a character is considered equivalent to another character only if their Unicode scalar values are the same.","pos":[0,175]},{"content":"To perform a culture-sensitive search, use the <ph id=\"ph1\">&lt;xref:System.Globalization.CompareInfo.LastIndexOf%2A?displayProperty=fullName&gt;</ph> method, where a Unicode scalar value representing a precomposed character, such as the ligature \"Ã\" (U+00C6), might be considered equivalent to any occurrence of the character's components in the correct sequence, such as \"AE\" (U+0041, U+0045), depending on the culture.","pos":[176,573],"source":" To perform a culture-sensitive search, use the <xref:System.Globalization.CompareInfo.LastIndexOf%2A?displayProperty=fullName> method, where a Unicode scalar value representing a precomposed character, such as the ligature \"Ã\" (U+00C6), might be considered equivalent to any occurrence of the character's components in the correct sequence, such as \"AE\" (U+0041, U+0045), depending on the culture."}]}]}],"pos":[486718,487602],"yaml":true,"extradata":"MT"},{"content":"A Unicode character array containing one or more characters to seek.","nodes":[{"pos":[0,68],"content":"A Unicode character array containing one or more characters to seek.","nodes":[{"content":"A Unicode character array containing one or more characters to seek.","pos":[0,68]}]}],"pos":[488301,488370],"yaml":true},{"content":"The search starting position. The search proceeds from <code>startIndex</code> toward the beginning of this instance.","nodes":[{"pos":[0,117],"content":"The search starting position. The search proceeds from <code>startIndex</code> toward the beginning of this instance.","nodes":[{"content":"The search starting position.","pos":[0,29]},{"content":"The search proceeds from <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">startIndex</ph><ept id=\"p1\">&lt;/code&gt;</ept> toward the beginning of this instance.","pos":[30,117],"source":" The search proceeds from <code>startIndex</code> toward the beginning of this instance."}]}],"pos":[488435,488553],"yaml":true},{"content":"The index position of the last occurrence in this instance where any character in <code>anyOf</code> was found; -1 if no character in <code>anyOf</code> was found or if the current instance equals <xref href=\"System.String.Empty\"></xref>.","nodes":[{"pos":[0,238],"content":"The index position of the last occurrence in this instance where any character in <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">anyOf</ph><ept id=\"p1\">&lt;/code&gt;</ept> was found; -1 if no character in <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">anyOf</ph><ept id=\"p2\">&lt;/code&gt;</ept> was found or if the current instance equals <ph id=\"ph3\">&lt;xref href=\"System.String.Empty\"&gt;&lt;/xref&gt;</ph>.","source":"The index position of the last occurrence in this instance where any character in <code>anyOf</code> was found; -1 if no character in <code>anyOf</code> was found or if the current instance equals <xref href=\"System.String.Empty\"></xref>."}],"pos":[488609,488848],"yaml":true},{"content":"<code>anyOf</code> is `null`.","nodes":[{"pos":[0,29],"content":"<ph id=\"ph1\">&lt;code&gt;anyOf&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>anyOf</code> is `null`."}],"pos":[489006,489036],"yaml":true},{"content":"The current instance does not equal <xref href=\"System.String.Empty\"></xref>, and <code>startIndex</code> specifies a position that is not within this instance.","nodes":[{"pos":[0,160],"content":"The current instance does not equal <ph id=\"ph1\">&lt;xref href=\"System.String.Empty\"&gt;&lt;/xref&gt;</ph>, and <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">startIndex</ph><ept id=\"p1\">&lt;/code&gt;</ept> specifies a position that is not within this instance.","source":"The current instance does not equal <xref href=\"System.String.Empty\"></xref>, and <code>startIndex</code> specifies a position that is not within this instance."}],"pos":[489150,489311],"yaml":true},{"content":"Reports the zero-based index position of the last occurrence in this instance of one or more characters specified in a Unicode array. The search starts at a specified character position and proceeds backward toward the beginning of the string for a specified number of character positions.","nodes":[{"pos":[0,289],"content":"Reports the zero-based index position of the last occurrence in this instance of one or more characters specified in a Unicode array. The search starts at a specified character position and proceeds backward toward the beginning of the string for a specified number of character positions.","nodes":[{"content":"Reports the zero-based index position of the last occurrence in this instance of one or more characters specified in a Unicode array. The search starts at a specified character position and proceeds backward toward the beginning of the string for a specified number of character positions.","pos":[0,289],"nodes":[{"content":"Reports the zero-based index position of the last occurrence in this instance of one or more characters specified in a Unicode array.","pos":[0,133]},{"content":"The search starts at a specified character position and proceeds backward toward the beginning of the string for a specified number of character positions.","pos":[134,289]}]}]}],"pos":[490902,491192],"yaml":true},{"content":"Index numbering starts from zero.  \n  \n This method begins searching at the `startIndex` character position of this instance and proceeds backward toward the beginning until either a character in `anyOf` is found or `count` character positions have been examined. The search is case-sensitive.  \n  \n This method performs an ordinal (culture-insensitive) search, where a character is considered equivalent to another character only if their Unicode scalar values are the same. To perform a culture-sensitive search, use the <xref:System.Globalization.CompareInfo.LastIndexOf%2A?displayProperty=fullName> method, where a Unicode scalar value representing a precomposed character, such as the ligature \"Ã\" (U+00C6), might be considered equivalent to any occurrence of the character's components in the correct sequence, such as \"AE\" (U+0041, U+0045), depending on the culture.","nodes":[{"pos":[0,33],"content":"Index numbering starts from zero.","nodes":[{"content":"Index numbering starts from zero.","pos":[0,33]}]},{"pos":[40,293],"content":"This method begins searching at the `startIndex` character position of this instance and proceeds backward toward the beginning until either a character in `anyOf` is found or `count` character positions have been examined. The search is case-sensitive.","nodes":[{"content":"This method begins searching at the <ph id=\"ph1\">`startIndex`</ph> character position of this instance and proceeds backward toward the beginning until either a character in <ph id=\"ph2\">`anyOf`</ph> is found or <ph id=\"ph3\">`count`</ph> character positions have been examined.","pos":[0,223],"source":"This method begins searching at the `startIndex` character position of this instance and proceeds backward toward the beginning until either a character in `anyOf` is found or `count` character positions have been examined."},{"content":"The search is case-sensitive.","pos":[224,253]}]},{"pos":[300,873],"content":"This method performs an ordinal (culture-insensitive) search, where a character is considered equivalent to another character only if their Unicode scalar values are the same. To perform a culture-sensitive search, use the <xref:System.Globalization.CompareInfo.LastIndexOf%2A?displayProperty=fullName> method, where a Unicode scalar value representing a precomposed character, such as the ligature \"Ã\" (U+00C6), might be considered equivalent to any occurrence of the character's components in the correct sequence, such as \"AE\" (U+0041, U+0045), depending on the culture.","nodes":[{"content":"This method performs an ordinal (culture-insensitive) search, where a character is considered equivalent to another character only if their Unicode scalar values are the same. To perform a culture-sensitive search, use the <xref:System.Globalization.CompareInfo.LastIndexOf%2A?displayProperty=fullName> method, where a Unicode scalar value representing a precomposed character, such as the ligature \"Ã\" (U+00C6), might be considered equivalent to any occurrence of the character's components in the correct sequence, such as \"AE\" (U+0041, U+0045), depending on the culture.","pos":[0,573],"nodes":[{"content":"This method performs an ordinal (culture-insensitive) search, where a character is considered equivalent to another character only if their Unicode scalar values are the same.","pos":[0,175]},{"content":"To perform a culture-sensitive search, use the <ph id=\"ph1\">&lt;xref:System.Globalization.CompareInfo.LastIndexOf%2A?displayProperty=fullName&gt;</ph> method, where a Unicode scalar value representing a precomposed character, such as the ligature \"Ã\" (U+00C6), might be considered equivalent to any occurrence of the character's components in the correct sequence, such as \"AE\" (U+0041, U+0045), depending on the culture.","pos":[176,573],"source":" To perform a culture-sensitive search, use the <xref:System.Globalization.CompareInfo.LastIndexOf%2A?displayProperty=fullName> method, where a Unicode scalar value representing a precomposed character, such as the ligature \"Ã\" (U+00C6), might be considered equivalent to any occurrence of the character's components in the correct sequence, such as \"AE\" (U+0041, U+0045), depending on the culture."}]}]}],"pos":[491203,492087],"yaml":true,"extradata":"MT"},{"content":"A Unicode character array containing one or more characters to seek.","nodes":[{"pos":[0,68],"content":"A Unicode character array containing one or more characters to seek.","nodes":[{"content":"A Unicode character array containing one or more characters to seek.","pos":[0,68]}]}],"pos":[492798,492867],"yaml":true},{"content":"The search starting position. The search proceeds from <code>startIndex</code> toward the beginning of this instance.","nodes":[{"pos":[0,117],"content":"The search starting position. The search proceeds from <code>startIndex</code> toward the beginning of this instance.","nodes":[{"content":"The search starting position.","pos":[0,29]},{"content":"The search proceeds from <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">startIndex</ph><ept id=\"p1\">&lt;/code&gt;</ept> toward the beginning of this instance.","pos":[30,117],"source":" The search proceeds from <code>startIndex</code> toward the beginning of this instance."}]}],"pos":[492932,493050],"yaml":true},{"content":"The number of character positions to examine.","nodes":[{"pos":[0,45],"content":"The number of character positions to examine.","nodes":[{"content":"The number of character positions to examine.","pos":[0,45]}]}],"pos":[493110,493156],"yaml":true},{"content":"The index position of the last occurrence in this instance where any character in <code>anyOf</code> was found; -1 if no character in <code>anyOf</code> was found or if the current instance equals <xref href=\"System.String.Empty\"></xref>.","nodes":[{"pos":[0,238],"content":"The index position of the last occurrence in this instance where any character in <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">anyOf</ph><ept id=\"p1\">&lt;/code&gt;</ept> was found; -1 if no character in <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">anyOf</ph><ept id=\"p2\">&lt;/code&gt;</ept> was found or if the current instance equals <ph id=\"ph3\">&lt;xref href=\"System.String.Empty\"&gt;&lt;/xref&gt;</ph>.","source":"The index position of the last occurrence in this instance where any character in <code>anyOf</code> was found; -1 if no character in <code>anyOf</code> was found or if the current instance equals <xref href=\"System.String.Empty\"></xref>."}],"pos":[493212,493451],"yaml":true},{"content":"<code>anyOf</code> is `null`.","nodes":[{"pos":[0,29],"content":"<ph id=\"ph1\">&lt;code&gt;anyOf&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>anyOf</code> is `null`."}],"pos":[493609,493639],"yaml":true},{"content":"The current instance does not equal <xref href=\"System.String.Empty\"></xref>, and <code>count</code> or <code>startIndex</code> is negative.  \n  \n -or-  \n  \n The current instance does not equal <xref href=\"System.String.Empty\"></xref>, and <code>startIndex</code> minus <code>count</code> + 1 is less than zero.","nodes":[{"pos":[0,140],"content":"The current instance does not equal <ph id=\"ph1\">&lt;xref href=\"System.String.Empty\"&gt;&lt;/xref&gt;</ph>, and <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">count</ph><ept id=\"p1\">&lt;/code&gt;</ept> or <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph3\">startIndex</ph><ept id=\"p2\">&lt;/code&gt;</ept> is negative.","source":"The current instance does not equal <xref href=\"System.String.Empty\"></xref>, and <code>count</code> or <code>startIndex</code> is negative."},{"pos":[147,151],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[158,311],"content":"The current instance does not equal <ph id=\"ph1\">&lt;xref href=\"System.String.Empty\"&gt;&lt;/xref&gt;</ph>, and <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">startIndex</ph><ept id=\"p1\">&lt;/code&gt;</ept> minus <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph3\">count</ph><ept id=\"p2\">&lt;/code&gt;</ept> + 1 is less than zero.","source":"The current instance does not equal <xref href=\"System.String.Empty\"></xref>, and <code>startIndex</code> minus <code>count</code> + 1 is less than zero."}],"pos":[493753,494075],"yaml":true},{"content":"Gets the number of characters in the current <xref href=\"System.String\"></xref> object.","nodes":[{"pos":[0,87],"content":"Gets the number of characters in the current <ph id=\"ph1\">&lt;xref href=\"System.String\"&gt;&lt;/xref&gt;</ph> object.","source":"Gets the number of characters in the current <xref href=\"System.String\"></xref> object."}],"pos":[495431,495519],"yaml":true},{"content":"The <xref:System.String.Length%2A> property returns the number of <xref:System.Char> objects in this instance, not the number of Unicode characters. The reason is that a Unicode character might be represented by more than one <xref:System.Char>. Use the <xref:System.Globalization.StringInfo?displayProperty=fullName> class to work with each Unicode character instead of each <xref:System.Char>.  \n  \n In some languages, such as C and C++, a null character indicates the end of a string. In the .NET Framework, a null character can be embedded in a string. When a string includes one or more null characters, they are included in the length of the total string. For example, in the following string, the substrings \"abc\" and \"def\" are separated by a null character. The <xref:System.String.Length%2A> property returns 7, which indicates that it includes the six alphabetic characters as well as the null character.  \n  \n [!code-cpp[System.String.Class#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Class/cpp/system.string.class.cpp#1)]\n [!code-csharp[System.String.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Class/cs/System.String.Class.cs#1)]\n [!code-vb[System.String.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Class/vb/System.String.Class.vb#1)]","nodes":[{"pos":[0,395],"content":"The <xref:System.String.Length%2A> property returns the number of <xref:System.Char> objects in this instance, not the number of Unicode characters. The reason is that a Unicode character might be represented by more than one <xref:System.Char>. Use the <xref:System.Globalization.StringInfo?displayProperty=fullName> class to work with each Unicode character instead of each <xref:System.Char>.","nodes":[{"content":"The <xref:System.String.Length%2A> property returns the number of <xref:System.Char> objects in this instance, not the number of Unicode characters. The reason is that a Unicode character might be represented by more than one <xref:System.Char>. Use the <xref:System.Globalization.StringInfo?displayProperty=fullName> class to work with each Unicode character instead of each <xref:System.Char>.","pos":[0,395],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.String.Length%2A&gt;</ph> property returns the number of <ph id=\"ph2\">&lt;xref:System.Char&gt;</ph> objects in this instance, not the number of Unicode characters.","pos":[0,148],"source":"The <xref:System.String.Length%2A> property returns the number of <xref:System.Char> objects in this instance, not the number of Unicode characters."},{"content":"The reason is that a Unicode character might be represented by more than one <ph id=\"ph1\">&lt;xref:System.Char&gt;</ph>.","pos":[149,245],"source":" The reason is that a Unicode character might be represented by more than one <xref:System.Char>."},{"content":"Use the <ph id=\"ph1\">&lt;xref:System.Globalization.StringInfo?displayProperty=fullName&gt;</ph> class to work with each Unicode character instead of each <ph id=\"ph2\">&lt;xref:System.Char&gt;</ph>.","pos":[246,395],"source":" Use the <xref:System.Globalization.StringInfo?displayProperty=fullName> class to work with each Unicode character instead of each <xref:System.Char>."}]}]},{"pos":[402,914],"content":"In some languages, such as C and C++, a null character indicates the end of a string. In the .NET Framework, a null character can be embedded in a string. When a string includes one or more null characters, they are included in the length of the total string. For example, in the following string, the substrings \"abc\" and \"def\" are separated by a null character. The <xref:System.String.Length%2A> property returns 7, which indicates that it includes the six alphabetic characters as well as the null character.","nodes":[{"content":"In some languages, such as C and C++, a null character indicates the end of a string. In the .NET Framework, a null character can be embedded in a string. When a string includes one or more null characters, they are included in the length of the total string. For example, in the following string, the substrings \"abc\" and \"def\" are separated by a null character. The <xref:System.String.Length%2A> property returns 7, which indicates that it includes the six alphabetic characters as well as the null character.","pos":[0,512],"nodes":[{"content":"In some languages, such as C and C++, a null character indicates the end of a string.","pos":[0,85]},{"content":"In the .NET Framework, a null character can be embedded in a string.","pos":[86,154]},{"content":"When a string includes one or more null characters, they are included in the length of the total string.","pos":[155,259]},{"content":"For example, in the following string, the substrings \"abc\" and \"def\" are separated by a null character.","pos":[260,363]},{"content":"The <ph id=\"ph1\">&lt;xref:System.String.Length%2A&gt;</ph> property returns 7, which indicates that it includes the six alphabetic characters as well as the null character.","pos":[364,512],"source":" The <xref:System.String.Length%2A> property returns 7, which indicates that it includes the six alphabetic characters as well as the null character."}]}]},{"pos":[921,1327],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>System.String.Class#1<ept id=\"p2\">](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Class/cpp/system.string.class.cpp#1)</ept><ept id=\"p1\">]</ept> <bpt id=\"p3\">[!code-csharp</bpt><bpt id=\"p4\">[</bpt>System.String.Class#1<ept id=\"p4\">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Class/cs/System.String.Class.cs#1)</ept><ept id=\"p3\">]</ept> <bpt id=\"p5\">[!code-vb</bpt><bpt id=\"p6\">[</bpt>System.String.Class#1<ept id=\"p6\">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Class/vb/System.String.Class.vb#1)</ept><ept id=\"p5\">]</ept>","source":"[!code-cpp[System.String.Class#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Class/cpp/system.string.class.cpp#1)]\n [!code-csharp[System.String.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Class/cs/System.String.Class.cs#1)]\n [!code-vb[System.String.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Class/vb/System.String.Class.vb#1)]"}],"pos":[495530,496870],"yaml":true,"extradata":"MT"},{"content":"The number of characters in the current string.","nodes":[{"pos":[0,47],"content":"The number of characters in the current string.","nodes":[{"content":"The number of characters in the current string.","pos":[0,47]}]}],"pos":[497394,497442],"yaml":true},{"content":"Returns a new string whose textual value is the same as this string, but whose binary representation is in the specified Unicode normalization form.","nodes":[{"pos":[0,148],"content":"Returns a new string whose textual value is the same as this string, but whose binary representation is in the specified Unicode normalization form.","nodes":[{"content":"Returns a new string whose textual value is the same as this string, but whose binary representation is in the specified Unicode normalization form.","pos":[0,148]}]}],"pos":[499015,499164],"yaml":true},{"content":"Some Unicode characters have multiple equivalent binary representations consisting of sets of combining and/or composite Unicode characters. The existence of multiple representations for a single character complicates searching, sorting, matching, and other operations.  \n  \n The Unicode standard defines a process called normalization that returns one binary representation when given any of the equivalent binary representations of a character. Normalization can be performed with several algorithms, called normalization forms, that obey different rules. The .NET Framework supports the four normalization forms (C, D, KC, and KD)that are defined by the Unicode standard.When two strings are represented in the same normalization form, they can be compared by using ordinal comparison.  \n  \n To normalize and compare two strings, do the following:  \n  \n1.  Obtain the strings to be compared from an input source, such as a file or a user input device.  \n  \n2.  Call the <xref:System.String.Normalize%28System.Text.NormalizationForm%29> method to normalize the strings to a specified normalization form.  \n  \n3.  To compare two strings, call a method that supports ordinal string comparison, such as the <xref:System.String.Compare%28System.String%2CSystem.String%2CSystem.StringComparison%29> method, and supply a value of <xref:System.StringComparison?displayProperty=fullName> or <xref:System.StringComparison?displayProperty=fullName> as the <xref:System.StringComparison> argument. To sort an array of normalized strings, pass a `comparer` value of <xref:System.StringComparer.Ordinal%2A?displayProperty=fullName> or <xref:System.StringComparer.OrdinalIgnoreCase%2A?displayProperty=fullName> to an appropriate overload of <xref:System.Array.Sort%2A?displayProperty=fullName>.  \n  \n4.  Emit the strings in the sorted output based on the order indicated by the previous step.  \n  \n For a description of supported Unicode normalization forms, see <xref:System.Text.NormalizationForm?displayProperty=fullName>.","nodes":[{"pos":[0,269],"content":"Some Unicode characters have multiple equivalent binary representations consisting of sets of combining and/or composite Unicode characters. The existence of multiple representations for a single character complicates searching, sorting, matching, and other operations.","nodes":[{"content":"Some Unicode characters have multiple equivalent binary representations consisting of sets of combining and/or composite Unicode characters. The existence of multiple representations for a single character complicates searching, sorting, matching, and other operations.","pos":[0,269],"nodes":[{"content":"Some Unicode characters have multiple equivalent binary representations consisting of sets of combining and/or composite Unicode characters.","pos":[0,140]},{"content":"The existence of multiple representations for a single character complicates searching, sorting, matching, and other operations.","pos":[141,269]}]}]},{"pos":[276,788],"content":"The Unicode standard defines a process called normalization that returns one binary representation when given any of the equivalent binary representations of a character. Normalization can be performed with several algorithms, called normalization forms, that obey different rules. The .NET Framework supports the four normalization forms (C, D, KC, and KD)that are defined by the Unicode standard.When two strings are represented in the same normalization form, they can be compared by using ordinal comparison.","nodes":[{"content":"The Unicode standard defines a process called normalization that returns one binary representation when given any of the equivalent binary representations of a character. Normalization can be performed with several algorithms, called normalization forms, that obey different rules. The .NET Framework supports the four normalization forms (C, D, KC, and KD)that are defined by the Unicode standard.When two strings are represented in the same normalization form, they can be compared by using ordinal comparison.","pos":[0,512],"nodes":[{"content":"The Unicode standard defines a process called normalization that returns one binary representation when given any of the equivalent binary representations of a character.","pos":[0,170]},{"content":"Normalization can be performed with several algorithms, called normalization forms, that obey different rules.","pos":[171,281]},{"content":"The .NET Framework supports the four normalization forms (C, D, KC, and KD)that are defined by the Unicode standard.When two strings are represented in the same normalization form, they can be compared by using ordinal comparison.","pos":[282,512]}]}]},{"pos":[795,850],"content":"To normalize and compare two strings, do the following:","nodes":[{"content":"To normalize and compare two strings, do the following:","pos":[0,55]}]},{"pos":[860,954],"content":"Obtain the strings to be compared from an input source, such as a file or a user input device.","nodes":[{"content":"Obtain the strings to be compared from an input source, such as a file or a user input device.","pos":[0,94]}]},{"pos":[964,1105],"content":"Call the <xref:System.String.Normalize%28System.Text.NormalizationForm%29> method to normalize the strings to a specified normalization form.","nodes":[{"content":"Call the <ph id=\"ph1\">&lt;xref:System.String.Normalize%28System.Text.NormalizationForm%29&gt;</ph> method to normalize the strings to a specified normalization form.","pos":[0,141],"source":"Call the <xref:System.String.Normalize%28System.Text.NormalizationForm%29> method to normalize the strings to a specified normalization form."}]},{"pos":[1115,1782],"content":"To compare two strings, call a method that supports ordinal string comparison, such as the <xref:System.String.Compare%28System.String%2CSystem.String%2CSystem.StringComparison%29> method, and supply a value of <xref:System.StringComparison?displayProperty=fullName> or <xref:System.StringComparison?displayProperty=fullName> as the <xref:System.StringComparison> argument. To sort an array of normalized strings, pass a `comparer` value of <xref:System.StringComparer.Ordinal%2A?displayProperty=fullName> or <xref:System.StringComparer.OrdinalIgnoreCase%2A?displayProperty=fullName> to an appropriate overload of <xref:System.Array.Sort%2A?displayProperty=fullName>.","nodes":[{"content":"To compare two strings, call a method that supports ordinal string comparison, such as the <ph id=\"ph1\">&lt;xref:System.String.Compare%28System.String%2CSystem.String%2CSystem.StringComparison%29&gt;</ph> method, and supply a value of <ph id=\"ph2\">&lt;xref:System.StringComparison?displayProperty=fullName&gt;</ph> or <ph id=\"ph3\">&lt;xref:System.StringComparison?displayProperty=fullName&gt;</ph> as the <ph id=\"ph4\">&lt;xref:System.StringComparison&gt;</ph> argument.","pos":[0,373],"source":"To compare two strings, call a method that supports ordinal string comparison, such as the <xref:System.String.Compare%28System.String%2CSystem.String%2CSystem.StringComparison%29> method, and supply a value of <xref:System.StringComparison?displayProperty=fullName> or <xref:System.StringComparison?displayProperty=fullName> as the <xref:System.StringComparison> argument."},{"content":"To sort an array of normalized strings, pass a <ph id=\"ph1\">`comparer`</ph> value of <ph id=\"ph2\">&lt;xref:System.StringComparer.Ordinal%2A?displayProperty=fullName&gt;</ph> or <ph id=\"ph3\">&lt;xref:System.StringComparer.OrdinalIgnoreCase%2A?displayProperty=fullName&gt;</ph> to an appropriate overload of <ph id=\"ph4\">&lt;xref:System.Array.Sort%2A?displayProperty=fullName&gt;</ph>.","pos":[374,667],"source":" To sort an array of normalized strings, pass a `comparer` value of <xref:System.StringComparer.Ordinal%2A?displayProperty=fullName> or <xref:System.StringComparer.OrdinalIgnoreCase%2A?displayProperty=fullName> to an appropriate overload of <xref:System.Array.Sort%2A?displayProperty=fullName>."}]},{"pos":[1792,1880],"content":"Emit the strings in the sorted output based on the order indicated by the previous step.","nodes":[{"content":"Emit the strings in the sorted output based on the order indicated by the previous step.","pos":[0,88]}]},{"pos":[1887,2013],"content":"For a description of supported Unicode normalization forms, see <xref:System.Text.NormalizationForm?displayProperty=fullName>.","nodes":[{"content":"For a description of supported Unicode normalization forms, see <ph id=\"ph1\">&lt;xref:System.Text.NormalizationForm?displayProperty=fullName&gt;</ph>.","pos":[0,126],"source":"For a description of supported Unicode normalization forms, see <xref:System.Text.NormalizationForm?displayProperty=fullName>."}]}],"pos":[499175,501205],"yaml":true,"extradata":"MT"},{"content":"A Unicode normalization form.","nodes":[{"pos":[0,29],"content":"A Unicode normalization form.","nodes":[{"content":"A Unicode normalization form.","pos":[0,29]}]}],"pos":[501962,501992],"yaml":true},{"content":"A new string whose textual value is the same as this string, but whose binary representation is in the normalization form specified by the <code>normalizationForm</code> parameter.","nodes":[{"pos":[0,180],"content":"A new string whose textual value is the same as this string, but whose binary representation is in the normalization form specified by the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">normalizationForm</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter.","source":"A new string whose textual value is the same as this string, but whose binary representation is in the normalization form specified by the <code>normalizationForm</code> parameter."}],"pos":[502049,502230],"yaml":true},{"content":"The current instance contains invalid Unicode characters.","nodes":[{"pos":[0,57],"content":"The current instance contains invalid Unicode characters.","nodes":[{"content":"The current instance contains invalid Unicode characters.","pos":[0,57]}]}],"pos":[502375,502433],"yaml":true},{"content":"Returns a new string whose textual value is the same as this string, but whose binary representation is in Unicode normalization form C.","nodes":[{"pos":[0,136],"content":"Returns a new string whose textual value is the same as this string, but whose binary representation is in Unicode normalization form C.","nodes":[{"content":"Returns a new string whose textual value is the same as this string, but whose binary representation is in Unicode normalization form C.","pos":[0,136]}]}],"pos":[503484,503621],"yaml":true},{"content":"Some Unicode characters have multiple equivalent binary representations consisting of sets of combining and/or composite Unicode characters. For example, any of the following code points can represent the letter \"áº¯\":  \n  \n-   U+1EAF  \n  \n-   U+0103 U+0301  \n  \n-   U+0061 U+0306 U+0301  \n  \n The existence of multiple representations for a single character complicates searching, sorting, matching, and other operations.  \n  \n The Unicode standard defines a process called normalization that returns one binary representation when given any of the equivalent binary representations of a character. Normalization can be performed with several algorithms, called normalization forms, that obey different rules. The .NET Framework supports the four normalization forms (C, D, KC, and KD)that are defined by the Unicode standard.When two strings are represented in the same normalization form, theycan be compared by using ordinal comparison.  \n  \n To normalize and compare two strings, do the following:  \n  \n1.  Obtain the strings to be compared from an input source, such as a file or a user input device.  \n  \n2.  Call the <xref:System.String.Normalize> method to normalize the strings to normalization form C.  \n  \n3.  To compare two strings, call a method that supports ordinal string comparison, such as the <xref:System.String.Compare%28System.String%2CSystem.String%2CSystem.StringComparison%29> method, and supply a value of <xref:System.StringComparison?displayProperty=fullName> or <xref:System.StringComparison?displayProperty=fullName>as the <xref:System.StringComparison> argument. To sort an array of normalized strings, pass a `comparer` value of <xref:System.StringComparer.Ordinal%2A?displayProperty=fullName> or <xref:System.StringComparer.OrdinalIgnoreCase%2A?displayProperty=fullName> to an appropriate overload of <xref:System.Array.Sort%2A?displayProperty=fullName>.  \n  \n4.  Emit the strings in the sorted output based on the order indicated by the previous step.  \n  \n For a description of supported Unicode normalization forms, see <xref:System.Text.NormalizationForm?displayProperty=fullName>.","nodes":[{"pos":[0,216],"content":"Some Unicode characters have multiple equivalent binary representations consisting of sets of combining and/or composite Unicode characters. For example, any of the following code points can represent the letter \"áº¯\":","nodes":[{"content":"Some Unicode characters have multiple equivalent binary representations consisting of sets of combining and/or composite Unicode characters. For example, any of the following code points can represent the letter \"áº¯\":","pos":[0,216],"nodes":[{"content":"Some Unicode characters have multiple equivalent binary representations consisting of sets of combining and/or composite Unicode characters.","pos":[0,140]},{"content":"For example, any of the following code points can represent the letter \"áº¯\":","pos":[141,216]}]}]},{"pos":[226,232],"content":"U+1EAF","nodes":[{"content":"U+1EAF","pos":[0,6]}]},{"pos":[242,255],"content":"U+0103 U+0301","nodes":[{"content":"U+0103 U+0301","pos":[0,13]}]},{"pos":[265,285],"content":"U+0061 U+0306 U+0301","nodes":[{"content":"U+0061 U+0306 U+0301","pos":[0,20]}]},{"pos":[292,420],"content":"The existence of multiple representations for a single character complicates searching, sorting, matching, and other operations.","nodes":[{"content":"The existence of multiple representations for a single character complicates searching, sorting, matching, and other operations.","pos":[0,128]}]},{"pos":[427,938],"content":"The Unicode standard defines a process called normalization that returns one binary representation when given any of the equivalent binary representations of a character. Normalization can be performed with several algorithms, called normalization forms, that obey different rules. The .NET Framework supports the four normalization forms (C, D, KC, and KD)that are defined by the Unicode standard.When two strings are represented in the same normalization form, theycan be compared by using ordinal comparison.","nodes":[{"content":"The Unicode standard defines a process called normalization that returns one binary representation when given any of the equivalent binary representations of a character. Normalization can be performed with several algorithms, called normalization forms, that obey different rules. The .NET Framework supports the four normalization forms (C, D, KC, and KD)that are defined by the Unicode standard.When two strings are represented in the same normalization form, theycan be compared by using ordinal comparison.","pos":[0,511],"nodes":[{"content":"The Unicode standard defines a process called normalization that returns one binary representation when given any of the equivalent binary representations of a character.","pos":[0,170]},{"content":"Normalization can be performed with several algorithms, called normalization forms, that obey different rules.","pos":[171,281]},{"content":"The .NET Framework supports the four normalization forms (C, D, KC, and KD)that are defined by the Unicode standard.When two strings are represented in the same normalization form, theycan be compared by using ordinal comparison.","pos":[282,511]}]}]},{"pos":[945,1000],"content":"To normalize and compare two strings, do the following:","nodes":[{"content":"To normalize and compare two strings, do the following:","pos":[0,55]}]},{"pos":[1010,1104],"content":"Obtain the strings to be compared from an input source, such as a file or a user input device.","nodes":[{"content":"Obtain the strings to be compared from an input source, such as a file or a user input device.","pos":[0,94]}]},{"pos":[1114,1210],"content":"Call the <xref:System.String.Normalize> method to normalize the strings to normalization form C.","nodes":[{"content":"Call the <ph id=\"ph1\">&lt;xref:System.String.Normalize&gt;</ph> method to normalize the strings to normalization form C.","pos":[0,96],"source":"Call the <xref:System.String.Normalize> method to normalize the strings to normalization form C."}]},{"pos":[1220,1886],"content":"To compare two strings, call a method that supports ordinal string comparison, such as the <xref:System.String.Compare%28System.String%2CSystem.String%2CSystem.StringComparison%29> method, and supply a value of <xref:System.StringComparison?displayProperty=fullName> or <xref:System.StringComparison?displayProperty=fullName>as the <xref:System.StringComparison> argument. To sort an array of normalized strings, pass a `comparer` value of <xref:System.StringComparer.Ordinal%2A?displayProperty=fullName> or <xref:System.StringComparer.OrdinalIgnoreCase%2A?displayProperty=fullName> to an appropriate overload of <xref:System.Array.Sort%2A?displayProperty=fullName>.","nodes":[{"content":"To compare two strings, call a method that supports ordinal string comparison, such as the <ph id=\"ph1\">&lt;xref:System.String.Compare%28System.String%2CSystem.String%2CSystem.StringComparison%29&gt;</ph> method, and supply a value of <ph id=\"ph2\">&lt;xref:System.StringComparison?displayProperty=fullName&gt;</ph> or <ph id=\"ph3\">&lt;xref:System.StringComparison?displayProperty=fullName&gt;</ph>as the <ph id=\"ph4\">&lt;xref:System.StringComparison&gt;</ph> argument.","pos":[0,372],"source":"To compare two strings, call a method that supports ordinal string comparison, such as the <xref:System.String.Compare%28System.String%2CSystem.String%2CSystem.StringComparison%29> method, and supply a value of <xref:System.StringComparison?displayProperty=fullName> or <xref:System.StringComparison?displayProperty=fullName>as the <xref:System.StringComparison> argument."},{"content":"To sort an array of normalized strings, pass a <ph id=\"ph1\">`comparer`</ph> value of <ph id=\"ph2\">&lt;xref:System.StringComparer.Ordinal%2A?displayProperty=fullName&gt;</ph> or <ph id=\"ph3\">&lt;xref:System.StringComparer.OrdinalIgnoreCase%2A?displayProperty=fullName&gt;</ph> to an appropriate overload of <ph id=\"ph4\">&lt;xref:System.Array.Sort%2A?displayProperty=fullName&gt;</ph>.","pos":[373,666],"source":" To sort an array of normalized strings, pass a `comparer` value of <xref:System.StringComparer.Ordinal%2A?displayProperty=fullName> or <xref:System.StringComparer.OrdinalIgnoreCase%2A?displayProperty=fullName> to an appropriate overload of <xref:System.Array.Sort%2A?displayProperty=fullName>."}]},{"pos":[1896,1984],"content":"Emit the strings in the sorted output based on the order indicated by the previous step.","nodes":[{"content":"Emit the strings in the sorted output based on the order indicated by the previous step.","pos":[0,88]}]},{"pos":[1991,2117],"content":"For a description of supported Unicode normalization forms, see <xref:System.Text.NormalizationForm?displayProperty=fullName>.","nodes":[{"content":"For a description of supported Unicode normalization forms, see <ph id=\"ph1\">&lt;xref:System.Text.NormalizationForm?displayProperty=fullName&gt;</ph>.","pos":[0,126],"source":"For a description of supported Unicode normalization forms, see <xref:System.Text.NormalizationForm?displayProperty=fullName>."}]}],"pos":[503632,505776],"yaml":true,"extradata":"MT"},{"content":"A new, normalized string whose textual value is the same as this string, but whose binary representation is in normalization form C.","nodes":[{"pos":[0,132],"content":"A new, normalized string whose textual value is the same as this string, but whose binary representation is in normalization form C.","nodes":[{"content":"A new, normalized string whose textual value is the same as this string, but whose binary representation is in normalization form C.","pos":[0,132]}]}],"pos":[506457,506590],"yaml":true},{"content":"The current instance contains invalid Unicode characters.","nodes":[{"pos":[0,57],"content":"The current instance contains invalid Unicode characters.","nodes":[{"content":"The current instance contains invalid Unicode characters.","pos":[0,57]}]}],"pos":[506735,506793],"yaml":true},{"content":"Determines whether two specified strings have the same value.","nodes":[{"pos":[0,61],"content":"Determines whether two specified strings have the same value.","nodes":[{"content":"Determines whether two specified strings have the same value.","pos":[0,61]}]}],"pos":[507970,508032],"yaml":true},{"content":"The <xref:System.String.op_Equality%2A> method defines the operation of the equality operator for the <xref:System.String> class. It enables code such as that shown in the Example section. The operator, in turn, calls the static <xref:System.String.Equals%28System.String%2CSystem.String%29> method, which performs an ordinal (case-sensitive and culture-insensitive) comparison.  \n  \n> [!NOTE]\n>  The Visual Basic compiler does not resolve the equality operator as a call to the <xref:System.String.op_Equality%2A> method. Instead, the equality operator wraps a call to the <xref:Microsoft.VisualBasic.CompilerServices.Operators.CompareString%2A?displayProperty=fullName> method.","nodes":[{"pos":[0,378],"content":"The <xref:System.String.op_Equality%2A> method defines the operation of the equality operator for the <xref:System.String> class. It enables code such as that shown in the Example section. The operator, in turn, calls the static <xref:System.String.Equals%28System.String%2CSystem.String%29> method, which performs an ordinal (case-sensitive and culture-insensitive) comparison.","nodes":[{"content":"The <xref:System.String.op_Equality%2A> method defines the operation of the equality operator for the <xref:System.String> class. It enables code such as that shown in the Example section. The operator, in turn, calls the static <xref:System.String.Equals%28System.String%2CSystem.String%29> method, which performs an ordinal (case-sensitive and culture-insensitive) comparison.","pos":[0,378],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.String.op_Equality%2A&gt;</ph> method defines the operation of the equality operator for the <ph id=\"ph2\">&lt;xref:System.String&gt;</ph> class.","pos":[0,129],"source":"The <xref:System.String.op_Equality%2A> method defines the operation of the equality operator for the <xref:System.String> class."},{"content":"It enables code such as that shown in the Example section.","pos":[130,188]},{"content":"The operator, in turn, calls the static <ph id=\"ph1\">&lt;xref:System.String.Equals%28System.String%2CSystem.String%29&gt;</ph> method, which performs an ordinal (case-sensitive and culture-insensitive) comparison.","pos":[189,378],"source":" The operator, in turn, calls the static <xref:System.String.Equals%28System.String%2CSystem.String%29> method, which performs an ordinal (case-sensitive and culture-insensitive) comparison."}]}]},{"pos":[386,679],"content":"[!NOTE]\n The Visual Basic compiler does not resolve the equality operator as a call to the <xref:System.String.op_Equality%2A> method. Instead, the equality operator wraps a call to the <xref:Microsoft.VisualBasic.CompilerServices.Operators.CompareString%2A?displayProperty=fullName> method.","leadings":["","> "],"nodes":[{"content":" The Visual Basic compiler does not resolve the equality operator as a call to the <xref:System.String.op_Equality%2A> method. Instead, the equality operator wraps a call to the <xref:Microsoft.VisualBasic.CompilerServices.Operators.CompareString%2A?displayProperty=fullName> method.","pos":[8,291],"nodes":[{"content":"The Visual Basic compiler does not resolve the equality operator as a call to the <ph id=\"ph1\">&lt;xref:System.String.op_Equality%2A&gt;</ph> method.","pos":[1,126],"source":" The Visual Basic compiler does not resolve the equality operator as a call to the <xref:System.String.op_Equality%2A> method."},{"content":"Instead, the equality operator wraps a call to the <ph id=\"ph1\">&lt;xref:Microsoft.VisualBasic.CompilerServices.Operators.CompareString%2A?displayProperty=fullName&gt;</ph> method.","pos":[127,283],"source":" Instead, the equality operator wraps a call to the <xref:Microsoft.VisualBasic.CompilerServices.Operators.CompareString%2A?displayProperty=fullName> method."}]}]}],"pos":[508043,508728],"yaml":true,"extradata":"MT"},{"content":"The first string to compare, or `null`.","nodes":[{"pos":[0,39],"content":"The first string to compare, or <ph id=\"ph1\">`null`</ph>.","source":"The first string to compare, or `null`."}],"pos":[509224,509264],"yaml":true},{"content":"The second string to compare, or `null`.","nodes":[{"pos":[0,40],"content":"The second string to compare, or <ph id=\"ph1\">`null`</ph>.","source":"The second string to compare, or `null`."}],"pos":[509321,509362],"yaml":true},{"content":"`true` if the value of <code>a</code> is the same as the value of <code>b</code>; otherwise, `false`.","nodes":[{"pos":[0,101],"content":"<ph id=\"ph1\">`true`</ph> if the value of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">a</ph><ept id=\"p1\">&lt;/code&gt;</ept> is the same as the value of <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph3\">b</ph><ept id=\"p2\">&lt;/code&gt;</ept>; otherwise, <ph id=\"ph4\">`false`</ph>.","source":"`true` if the value of <code>a</code> is the same as the value of <code>b</code>; otherwise, `false`."}],"pos":[509420,509524],"yaml":true},{"content":"Determines whether two specified strings have different values.","nodes":[{"pos":[0,63],"content":"Determines whether two specified strings have different values.","nodes":[{"content":"Determines whether two specified strings have different values.","pos":[0,63]}]}],"pos":[511113,511177],"yaml":true},{"content":"The <xref:System.String.op_Inequality%2A> method defines the operation of the inequality operator for the <xref:System.String> class.   It enables code such as that shown in the Examples section.  \n  \n The <xref:System.String.op_Inequality%2A> operator in turn calls the static <xref:System.String.Equals%28System.String%2CSystem.String%29> method, which  performs an ordinal (case-sensitive and culture-insensitive) comparison.  \n  \n> [!NOTE]\n>  The Visual Basic compiler does not resolve the inequality operator as a call to the <xref:System.String.op_Inequality%2A> method. Instead, the inequality operator wraps a call to the <xref:Microsoft.VisualBasic.CompilerServices.Operators.CompareString%2A?displayProperty=fullName> method.","nodes":[{"pos":[0,195],"content":"The <xref:System.String.op_Inequality%2A> method defines the operation of the inequality operator for the <xref:System.String> class.   It enables code such as that shown in the Examples section.","nodes":[{"content":"The <xref:System.String.op_Inequality%2A> method defines the operation of the inequality operator for the <xref:System.String> class.   It enables code such as that shown in the Examples section.","pos":[0,195],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.String.op_Inequality%2A&gt;</ph> method defines the operation of the inequality operator for the <ph id=\"ph2\">&lt;xref:System.String&gt;</ph> class.","pos":[0,133],"source":"The <xref:System.String.op_Inequality%2A> method defines the operation of the inequality operator for the <xref:System.String> class."},{"content":"It enables code such as that shown in the Examples section.","pos":[136,195]}]}]},{"pos":[202,428],"content":"The <xref:System.String.op_Inequality%2A> operator in turn calls the static <xref:System.String.Equals%28System.String%2CSystem.String%29> method, which  performs an ordinal (case-sensitive and culture-insensitive) comparison.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.String.op_Inequality%2A&gt;</ph> operator in turn calls the static <ph id=\"ph2\">&lt;xref:System.String.Equals%28System.String%2CSystem.String%29&gt;</ph> method, which  performs an ordinal (case-sensitive and culture-insensitive) comparison.","pos":[0,226],"source":"The <xref:System.String.op_Inequality%2A> operator in turn calls the static <xref:System.String.Equals%28System.String%2CSystem.String%29> method, which  performs an ordinal (case-sensitive and culture-insensitive) comparison."}]},{"pos":[436,735],"content":"[!NOTE]\n The Visual Basic compiler does not resolve the inequality operator as a call to the <xref:System.String.op_Inequality%2A> method. Instead, the inequality operator wraps a call to the <xref:Microsoft.VisualBasic.CompilerServices.Operators.CompareString%2A?displayProperty=fullName> method.","leadings":["","> "],"nodes":[{"content":" The Visual Basic compiler does not resolve the inequality operator as a call to the <xref:System.String.op_Inequality%2A> method. Instead, the inequality operator wraps a call to the <xref:Microsoft.VisualBasic.CompilerServices.Operators.CompareString%2A?displayProperty=fullName> method.","pos":[8,297],"nodes":[{"content":"The Visual Basic compiler does not resolve the inequality operator as a call to the <ph id=\"ph1\">&lt;xref:System.String.op_Inequality%2A&gt;</ph> method.","pos":[1,130],"source":" The Visual Basic compiler does not resolve the inequality operator as a call to the <xref:System.String.op_Inequality%2A> method."},{"content":"Instead, the inequality operator wraps a call to the <ph id=\"ph1\">&lt;xref:Microsoft.VisualBasic.CompilerServices.Operators.CompareString%2A?displayProperty=fullName&gt;</ph> method.","pos":[131,289],"source":" Instead, the inequality operator wraps a call to the <xref:Microsoft.VisualBasic.CompilerServices.Operators.CompareString%2A?displayProperty=fullName> method."}]}]}],"pos":[511188,511931],"yaml":true,"extradata":"MT"},{"content":"The first string to compare, or `null`.","nodes":[{"pos":[0,39],"content":"The first string to compare, or <ph id=\"ph1\">`null`</ph>.","source":"The first string to compare, or `null`."}],"pos":[512443,512483],"yaml":true},{"content":"The second string to compare, or `null`.","nodes":[{"pos":[0,40],"content":"The second string to compare, or <ph id=\"ph1\">`null`</ph>.","source":"The second string to compare, or `null`."}],"pos":[512540,512581],"yaml":true},{"content":"`true` if the value of <code>a</code> is different from the value of <code>b</code>; otherwise, `false`.","nodes":[{"pos":[0,104],"content":"<ph id=\"ph1\">`true`</ph> if the value of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">a</ph><ept id=\"p1\">&lt;/code&gt;</ept> is different from the value of <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph3\">b</ph><ept id=\"p2\">&lt;/code&gt;</ept>; otherwise, <ph id=\"ph4\">`false`</ph>.","source":"`true` if the value of <code>a</code> is different from the value of <code>b</code>; otherwise, `false`."}],"pos":[512639,512746],"yaml":true},{"content":"Returns a new string that right-aligns the characters in this instance by padding them with spaces on the left, for a specified total length.","nodes":[{"pos":[0,141],"content":"Returns a new string that right-aligns the characters in this instance by padding them with spaces on the left, for a specified total length.","nodes":[{"content":"Returns a new string that right-aligns the characters in this instance by padding them with spaces on the left, for a specified total length.","pos":[0,141]}]}],"pos":[514227,514369],"yaml":true},{"content":"A Unicode space is defined as hexadecimal 0x0020.  \n  \n The <xref:System.String.PadLeft%28System.Int32%29> method pads the beginning of the returned string. This means that, when used with right-to-left languages, it pads the right portion of the string.  \n  \n> [!NOTE]\n>  If the <xref:System.String.PadLeft%2A>method pads the current instance with whitespace characters, this method does not modify the value of the current instance. Instead, it returns a new string that is padded with leading white space so that its total length is `totalWidth` characters.","nodes":[{"pos":[0,49],"content":"A Unicode space is defined as hexadecimal 0x0020.","nodes":[{"content":"A Unicode space is defined as hexadecimal 0x0020.","pos":[0,49]}]},{"pos":[56,254],"content":"The <xref:System.String.PadLeft%28System.Int32%29> method pads the beginning of the returned string. This means that, when used with right-to-left languages, it pads the right portion of the string.","nodes":[{"content":"The <xref:System.String.PadLeft%28System.Int32%29> method pads the beginning of the returned string. This means that, when used with right-to-left languages, it pads the right portion of the string.","pos":[0,198],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.String.PadLeft%28System.Int32%29&gt;</ph> method pads the beginning of the returned string.","pos":[0,100],"source":"The <xref:System.String.PadLeft%28System.Int32%29> method pads the beginning of the returned string."},{"content":"This means that, when used with right-to-left languages, it pads the right portion of the string.","pos":[101,198]}]}]},{"pos":[262,560],"content":"[!NOTE]\n If the <xref:System.String.PadLeft%2A>method pads the current instance with whitespace characters, this method does not modify the value of the current instance. Instead, it returns a new string that is padded with leading white space so that its total length is `totalWidth` characters.","leadings":["","> "],"nodes":[{"content":" If the <xref:System.String.PadLeft%2A>method pads the current instance with whitespace characters, this method does not modify the value of the current instance. Instead, it returns a new string that is padded with leading white space so that its total length is `totalWidth` characters.","pos":[8,296],"nodes":[{"content":"If the <ph id=\"ph1\">&lt;xref:System.String.PadLeft%2A&gt;</ph>method pads the current instance with whitespace characters, this method does not modify the value of the current instance.","pos":[1,162],"source":" If the <xref:System.String.PadLeft%2A>method pads the current instance with whitespace characters, this method does not modify the value of the current instance."},{"content":"Instead, it returns a new string that is padded with leading white space so that its total length is <ph id=\"ph1\">`totalWidth`</ph> characters.","pos":[163,288],"source":" Instead, it returns a new string that is padded with leading white space so that its total length is `totalWidth` characters."}]}]}],"pos":[514380,514948],"yaml":true,"extradata":"MT"},{"content":"The number of characters in the resulting string, equal to the number of original characters plus any additional padding characters.","nodes":[{"pos":[0,132],"content":"The number of characters in the resulting string, equal to the number of original characters plus any additional padding characters.","nodes":[{"content":"The number of characters in the resulting string, equal to the number of original characters plus any additional padding characters.","pos":[0,132]}]}],"pos":[515635,515768],"yaml":true},{"content":"A new string that is equivalent to this instance, but right-aligned and padded on the left with as many spaces as needed to create a length of <code>totalWidth</code>. However, if <code>totalWidth</code> is less than the length of this instance, the method returns a reference to the existing instance. If <code>totalWidth</code> is equal to the length of this instance, the method returns a new string that is identical to this instance.","nodes":[{"pos":[0,438],"content":"A new string that is equivalent to this instance, but right-aligned and padded on the left with as many spaces as needed to create a length of <code>totalWidth</code>. However, if <code>totalWidth</code> is less than the length of this instance, the method returns a reference to the existing instance. If <code>totalWidth</code> is equal to the length of this instance, the method returns a new string that is identical to this instance.","nodes":[{"content":"A new string that is equivalent to this instance, but right-aligned and padded on the left with as many spaces as needed to create a length of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">totalWidth</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","pos":[0,167],"source":"A new string that is equivalent to this instance, but right-aligned and padded on the left with as many spaces as needed to create a length of <code>totalWidth</code>."},{"content":"However, if <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">totalWidth</ph><ept id=\"p1\">&lt;/code&gt;</ept> is less than the length of this instance, the method returns a reference to the existing instance.","pos":[168,302],"source":" However, if <code>totalWidth</code> is less than the length of this instance, the method returns a reference to the existing instance."},{"content":"If <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">totalWidth</ph><ept id=\"p1\">&lt;/code&gt;</ept> is equal to the length of this instance, the method returns a new string that is identical to this instance.","pos":[303,438],"source":" If <code>totalWidth</code> is equal to the length of this instance, the method returns a new string that is identical to this instance."}]}],"pos":[515825,516264],"yaml":true},{"content":"<code>totalWidth</code> is less than zero.","nodes":[{"pos":[0,42],"content":"<ph id=\"ph1\">&lt;code&gt;totalWidth&lt;/code&gt;</ph> is less than zero.","source":"<code>totalWidth</code> is less than zero."}],"pos":[516427,516470],"yaml":true},{"content":"Returns a new string that right-aligns the characters in this instance by padding them on the left with a specified Unicode character, for a specified total length.","nodes":[{"pos":[0,164],"content":"Returns a new string that right-aligns the characters in this instance by padding them on the left with a specified Unicode character, for a specified total length.","nodes":[{"content":"Returns a new string that right-aligns the characters in this instance by padding them on the left with a specified Unicode character, for a specified total length.","pos":[0,164]}]}],"pos":[517947,518112],"yaml":true},{"content":"The <xref:System.String.PadLeft%28System.Int32%2CSystem.Char%29> method pads the beginning of the returned string. This means that, when used with right-to-left languages, it pads the right portion of the string.  \n  \n> [!NOTE]\n>  If the <xref:System.String.PadLeft%2A> method pads the current instance with whitespace characters, this method does not modify the value of the current instance. Instead, it returns a new string that is padded with leading `paddingChar` characters so that its total length is `totalWidth` characters.","nodes":[{"pos":[0,212],"content":"The <xref:System.String.PadLeft%28System.Int32%2CSystem.Char%29> method pads the beginning of the returned string. This means that, when used with right-to-left languages, it pads the right portion of the string.","nodes":[{"content":"The <xref:System.String.PadLeft%28System.Int32%2CSystem.Char%29> method pads the beginning of the returned string. This means that, when used with right-to-left languages, it pads the right portion of the string.","pos":[0,212],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.String.PadLeft%28System.Int32%2CSystem.Char%29&gt;</ph> method pads the beginning of the returned string.","pos":[0,114],"source":"The <xref:System.String.PadLeft%28System.Int32%2CSystem.Char%29> method pads the beginning of the returned string."},{"content":"This means that, when used with right-to-left languages, it pads the right portion of the string.","pos":[115,212]}]}]},{"pos":[220,532],"content":"[!NOTE]\n If the <xref:System.String.PadLeft%2A> method pads the current instance with whitespace characters, this method does not modify the value of the current instance. Instead, it returns a new string that is padded with leading `paddingChar` characters so that its total length is `totalWidth` characters.","leadings":["","> "],"nodes":[{"content":" If the <xref:System.String.PadLeft%2A> method pads the current instance with whitespace characters, this method does not modify the value of the current instance. Instead, it returns a new string that is padded with leading `paddingChar` characters so that its total length is `totalWidth` characters.","pos":[8,310],"nodes":[{"content":"If the <ph id=\"ph1\">&lt;xref:System.String.PadLeft%2A&gt;</ph> method pads the current instance with whitespace characters, this method does not modify the value of the current instance.","pos":[1,163],"source":" If the <xref:System.String.PadLeft%2A> method pads the current instance with whitespace characters, this method does not modify the value of the current instance."},{"content":"Instead, it returns a new string that is padded with leading <ph id=\"ph1\">`paddingChar`</ph> characters so that its total length is <ph id=\"ph2\">`totalWidth`</ph> characters.","pos":[164,302],"source":" Instead, it returns a new string that is padded with leading `paddingChar` characters so that its total length is `totalWidth` characters."}]}]}],"pos":[518123,518661],"yaml":true,"extradata":"MT"},{"content":"The number of characters in the resulting string, equal to the number of original characters plus any additional padding characters.","nodes":[{"pos":[0,132],"content":"The number of characters in the resulting string, equal to the number of original characters plus any additional padding characters.","nodes":[{"content":"The number of characters in the resulting string, equal to the number of original characters plus any additional padding characters.","pos":[0,132]}]}],"pos":[519372,519505],"yaml":true},{"content":"A Unicode padding character.","nodes":[{"pos":[0,28],"content":"A Unicode padding character.","nodes":[{"content":"A Unicode padding character.","pos":[0,28]}]}],"pos":[519570,519599],"yaml":true},{"content":"A new string that is equivalent to this instance, but right-aligned and padded on the left with as many <code>paddingChar</code> characters as needed to create a length of <code>totalWidth</code>. However, if <code>totalWidth</code> is less than the length of this instance, the method returns a reference to the existing instance. If <code>totalWidth</code> is equal to the length of this instance, the method returns a new string that is identical to this instance.","nodes":[{"pos":[0,467],"content":"A new string that is equivalent to this instance, but right-aligned and padded on the left with as many <code>paddingChar</code> characters as needed to create a length of <code>totalWidth</code>. However, if <code>totalWidth</code> is less than the length of this instance, the method returns a reference to the existing instance. If <code>totalWidth</code> is equal to the length of this instance, the method returns a new string that is identical to this instance.","nodes":[{"content":"A new string that is equivalent to this instance, but right-aligned and padded on the left with as many <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">paddingChar</ph><ept id=\"p1\">&lt;/code&gt;</ept> characters as needed to create a length of <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">totalWidth</ph><ept id=\"p2\">&lt;/code&gt;</ept>.","pos":[0,196],"source":"A new string that is equivalent to this instance, but right-aligned and padded on the left with as many <code>paddingChar</code> characters as needed to create a length of <code>totalWidth</code>."},{"content":"However, if <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">totalWidth</ph><ept id=\"p1\">&lt;/code&gt;</ept> is less than the length of this instance, the method returns a reference to the existing instance.","pos":[197,331],"source":" However, if <code>totalWidth</code> is less than the length of this instance, the method returns a reference to the existing instance."},{"content":"If <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">totalWidth</ph><ept id=\"p1\">&lt;/code&gt;</ept> is equal to the length of this instance, the method returns a new string that is identical to this instance.","pos":[332,467],"source":" If <code>totalWidth</code> is equal to the length of this instance, the method returns a new string that is identical to this instance."}]}],"pos":[519656,520124],"yaml":true},{"content":"<code>totalWidth</code> is less than zero.","nodes":[{"pos":[0,42],"content":"<ph id=\"ph1\">&lt;code&gt;totalWidth&lt;/code&gt;</ph> is less than zero.","source":"<code>totalWidth</code> is less than zero."}],"pos":[520287,520330],"yaml":true},{"content":"Returns a new string that left-aligns the characters in this string by padding them with spaces on the right, for a specified total length.","nodes":[{"pos":[0,139],"content":"Returns a new string that left-aligns the characters in this string by padding them with spaces on the right, for a specified total length.","nodes":[{"content":"Returns a new string that left-aligns the characters in this string by padding them with spaces on the right, for a specified total length.","pos":[0,139]}]}],"pos":[521759,521899],"yaml":true},{"content":"A Unicode space is defined as hexadecimal 0x0020.  \n  \n The <xref:System.String.PadRight%28System.Int32%29> method pads the end of the returned string. This means that, when used with right-to-left languages, it pads the left portion of the string.  \n  \n> [!NOTE]\n>  If the<xref:System.String.PadRight%2A> method pads the current instance with whitespace characters, this method does not modify the value of the current instance. Instead, it returns a new string that is padded with trailing white space so that its total length is `totalWidth` characters.","nodes":[{"pos":[0,49],"content":"A Unicode space is defined as hexadecimal 0x0020.","nodes":[{"content":"A Unicode space is defined as hexadecimal 0x0020.","pos":[0,49]}]},{"pos":[56,248],"content":"The <xref:System.String.PadRight%28System.Int32%29> method pads the end of the returned string. This means that, when used with right-to-left languages, it pads the left portion of the string.","nodes":[{"content":"The <xref:System.String.PadRight%28System.Int32%29> method pads the end of the returned string. This means that, when used with right-to-left languages, it pads the left portion of the string.","pos":[0,192],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.String.PadRight%28System.Int32%29&gt;</ph> method pads the end of the returned string.","pos":[0,95],"source":"The <xref:System.String.PadRight%28System.Int32%29> method pads the end of the returned string."},{"content":"This means that, when used with right-to-left languages, it pads the left portion of the string.","pos":[96,192]}]}]},{"pos":[256,556],"content":"[!NOTE]\n If the<xref:System.String.PadRight%2A> method pads the current instance with whitespace characters, this method does not modify the value of the current instance. Instead, it returns a new string that is padded with trailing white space so that its total length is `totalWidth` characters.","leadings":["","> "],"nodes":[{"content":" If the<xref:System.String.PadRight%2A> method pads the current instance with whitespace characters, this method does not modify the value of the current instance. Instead, it returns a new string that is padded with trailing white space so that its total length is `totalWidth` characters.","pos":[8,298],"nodes":[{"content":"If the<ph id=\"ph1\">&lt;xref:System.String.PadRight%2A&gt;</ph> method pads the current instance with whitespace characters, this method does not modify the value of the current instance.","pos":[1,163],"source":" If the<xref:System.String.PadRight%2A> method pads the current instance with whitespace characters, this method does not modify the value of the current instance."},{"content":"Instead, it returns a new string that is padded with trailing white space so that its total length is <ph id=\"ph1\">`totalWidth`</ph> characters.","pos":[164,290],"source":" Instead, it returns a new string that is padded with trailing white space so that its total length is `totalWidth` characters."}]}]}],"pos":[521910,522474],"yaml":true,"extradata":"MT"},{"content":"The number of characters in the resulting string, equal to the number of original characters plus any additional padding characters.","nodes":[{"pos":[0,132],"content":"The number of characters in the resulting string, equal to the number of original characters plus any additional padding characters.","nodes":[{"content":"The number of characters in the resulting string, equal to the number of original characters plus any additional padding characters.","pos":[0,132]}]}],"pos":[523169,523302],"yaml":true},{"content":"A new string that is equivalent to this instance, but left-aligned and padded on the right with as many spaces as needed to create a length of <code>totalWidth</code>. However, if <code>totalWidth</code> is less than the length of this instance, the method returns a reference to the existing instance. If <code>totalWidth</code> is equal to the length of this instance, the method returns a new string that is identical to this instance.","nodes":[{"pos":[0,438],"content":"A new string that is equivalent to this instance, but left-aligned and padded on the right with as many spaces as needed to create a length of <code>totalWidth</code>. However, if <code>totalWidth</code> is less than the length of this instance, the method returns a reference to the existing instance. If <code>totalWidth</code> is equal to the length of this instance, the method returns a new string that is identical to this instance.","nodes":[{"content":"A new string that is equivalent to this instance, but left-aligned and padded on the right with as many spaces as needed to create a length of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">totalWidth</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","pos":[0,167],"source":"A new string that is equivalent to this instance, but left-aligned and padded on the right with as many spaces as needed to create a length of <code>totalWidth</code>."},{"content":"However, if <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">totalWidth</ph><ept id=\"p1\">&lt;/code&gt;</ept> is less than the length of this instance, the method returns a reference to the existing instance.","pos":[168,302],"source":" However, if <code>totalWidth</code> is less than the length of this instance, the method returns a reference to the existing instance."},{"content":"If <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">totalWidth</ph><ept id=\"p1\">&lt;/code&gt;</ept> is equal to the length of this instance, the method returns a new string that is identical to this instance.","pos":[303,438],"source":" If <code>totalWidth</code> is equal to the length of this instance, the method returns a new string that is identical to this instance."}]}],"pos":[523359,523798],"yaml":true},{"content":"<code>totalWidth</code> is less than zero.","nodes":[{"pos":[0,42],"content":"<ph id=\"ph1\">&lt;code&gt;totalWidth&lt;/code&gt;</ph> is less than zero.","source":"<code>totalWidth</code> is less than zero."}],"pos":[523962,524005],"yaml":true},{"content":"Returns a new string that left-aligns the characters in this string by padding them on the right with a specified Unicode character, for a specified total length.","nodes":[{"pos":[0,162],"content":"Returns a new string that left-aligns the characters in this string by padding them on the right with a specified Unicode character, for a specified total length.","nodes":[{"content":"Returns a new string that left-aligns the characters in this string by padding them on the right with a specified Unicode character, for a specified total length.","pos":[0,162]}]}],"pos":[525488,525651],"yaml":true},{"content":"The <xref:System.String.PadRight%28System.Int32%2CSystem.Char%29> method pads the end of the returned string. This means that, when used with right-to-left languages, it pads the left portion of the string.  \n  \n> [!NOTE]\n>  If the <xref:System.String.PadRight%2A> method pads the current instance with whitespace characters, this method does not modify the value of the current instance. Instead, it returns a new string that is padded with trailing `paddingChar` characters so that its total length is `totalWidth` characters.","nodes":[{"pos":[0,206],"content":"The <xref:System.String.PadRight%28System.Int32%2CSystem.Char%29> method pads the end of the returned string. This means that, when used with right-to-left languages, it pads the left portion of the string.","nodes":[{"content":"The <xref:System.String.PadRight%28System.Int32%2CSystem.Char%29> method pads the end of the returned string. This means that, when used with right-to-left languages, it pads the left portion of the string.","pos":[0,206],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.String.PadRight%28System.Int32%2CSystem.Char%29&gt;</ph> method pads the end of the returned string.","pos":[0,109],"source":"The <xref:System.String.PadRight%28System.Int32%2CSystem.Char%29> method pads the end of the returned string."},{"content":"This means that, when used with right-to-left languages, it pads the left portion of the string.","pos":[110,206]}]}]},{"pos":[214,528],"content":"[!NOTE]\n If the <xref:System.String.PadRight%2A> method pads the current instance with whitespace characters, this method does not modify the value of the current instance. Instead, it returns a new string that is padded with trailing `paddingChar` characters so that its total length is `totalWidth` characters.","leadings":["","> "],"nodes":[{"content":" If the <xref:System.String.PadRight%2A> method pads the current instance with whitespace characters, this method does not modify the value of the current instance. Instead, it returns a new string that is padded with trailing `paddingChar` characters so that its total length is `totalWidth` characters.","pos":[8,312],"nodes":[{"content":"If the <ph id=\"ph1\">&lt;xref:System.String.PadRight%2A&gt;</ph> method pads the current instance with whitespace characters, this method does not modify the value of the current instance.","pos":[1,164],"source":" If the <xref:System.String.PadRight%2A> method pads the current instance with whitespace characters, this method does not modify the value of the current instance."},{"content":"Instead, it returns a new string that is padded with trailing <ph id=\"ph1\">`paddingChar`</ph> characters so that its total length is <ph id=\"ph2\">`totalWidth`</ph> characters.","pos":[165,304],"source":" Instead, it returns a new string that is padded with trailing `paddingChar` characters so that its total length is `totalWidth` characters."}]}]}],"pos":[525662,526196],"yaml":true,"extradata":"MT"},{"content":"The number of characters in the resulting string, equal to the number of original characters plus any additional padding characters.","nodes":[{"pos":[0,132],"content":"The number of characters in the resulting string, equal to the number of original characters plus any additional padding characters.","nodes":[{"content":"The number of characters in the resulting string, equal to the number of original characters plus any additional padding characters.","pos":[0,132]}]}],"pos":[526915,527048],"yaml":true},{"content":"A Unicode padding character.","nodes":[{"pos":[0,28],"content":"A Unicode padding character.","nodes":[{"content":"A Unicode padding character.","pos":[0,28]}]}],"pos":[527113,527142],"yaml":true},{"content":"A new string that is equivalent to this instance, but left-aligned and padded on the right with as many <code>paddingChar</code> characters as needed to create a length of <code>totalWidth</code>. However, if <code>totalWidth</code> is less than the length of this instance, the method returns a reference to the existing instance. If <code>totalWidth</code> is equal to the length of this instance, the method returns a new string that is identical to this instance.","nodes":[{"pos":[0,467],"content":"A new string that is equivalent to this instance, but left-aligned and padded on the right with as many <code>paddingChar</code> characters as needed to create a length of <code>totalWidth</code>. However, if <code>totalWidth</code> is less than the length of this instance, the method returns a reference to the existing instance. If <code>totalWidth</code> is equal to the length of this instance, the method returns a new string that is identical to this instance.","nodes":[{"content":"A new string that is equivalent to this instance, but left-aligned and padded on the right with as many <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">paddingChar</ph><ept id=\"p1\">&lt;/code&gt;</ept> characters as needed to create a length of <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">totalWidth</ph><ept id=\"p2\">&lt;/code&gt;</ept>.","pos":[0,196],"source":"A new string that is equivalent to this instance, but left-aligned and padded on the right with as many <code>paddingChar</code> characters as needed to create a length of <code>totalWidth</code>."},{"content":"However, if <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">totalWidth</ph><ept id=\"p1\">&lt;/code&gt;</ept> is less than the length of this instance, the method returns a reference to the existing instance.","pos":[197,331],"source":" However, if <code>totalWidth</code> is less than the length of this instance, the method returns a reference to the existing instance."},{"content":"If <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">totalWidth</ph><ept id=\"p1\">&lt;/code&gt;</ept> is equal to the length of this instance, the method returns a new string that is identical to this instance.","pos":[332,467],"source":" If <code>totalWidth</code> is equal to the length of this instance, the method returns a new string that is identical to this instance."}]}],"pos":[527199,527667],"yaml":true},{"content":"<code>totalWidth</code> is less than zero.","nodes":[{"pos":[0,42],"content":"<ph id=\"ph1\">&lt;code&gt;totalWidth&lt;/code&gt;</ph> is less than zero.","source":"<code>totalWidth</code> is less than zero."}],"pos":[527831,527874],"yaml":true},{"content":"Returns a new string in which all the characters in the current instance, beginning at a specified position and continuing through the last position, have been deleted.","nodes":[{"pos":[0,168],"content":"Returns a new string in which all the characters in the current instance, beginning at a specified position and continuing through the last position, have been deleted.","nodes":[{"content":"Returns a new string in which all the characters in the current instance, beginning at a specified position and continuing through the last position, have been deleted.","pos":[0,168]}]}],"pos":[529291,529460],"yaml":true},{"content":"In the [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)], strings are zero-based. The value of the `startIndex` parameter can range from zero to one less than the length of the string instance.  \n  \n> [!NOTE]\n>  This method does not modify the value of the current instance. Instead, it returns a new string in which all characters from position `startIndex` to the end of the original string have been removed.","nodes":[{"pos":[0,197],"content":"In the [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)], strings are zero-based. The value of the `startIndex` parameter can range from zero to one less than the length of the string instance.","nodes":[{"content":"In the <ph id=\"ph1\">[!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)]</ph>, strings are zero-based.","pos":[0,85],"source":"In the [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)], strings are zero-based."},{"content":"The value of the <ph id=\"ph1\">`startIndex`</ph> parameter can range from zero to one less than the length of the string instance.","pos":[86,197],"source":" The value of the `startIndex` parameter can range from zero to one less than the length of the string instance."}]},{"pos":[205,415],"content":"[!NOTE]\n This method does not modify the value of the current instance. Instead, it returns a new string in which all characters from position `startIndex` to the end of the original string have been removed.","leadings":["","> "],"nodes":[{"content":" This method does not modify the value of the current instance. Instead, it returns a new string in which all characters from position `startIndex` to the end of the original string have been removed.","pos":[8,208],"nodes":[{"content":"This method does not modify the value of the current instance.","pos":[1,63]},{"content":"Instead, it returns a new string in which all characters from position <ph id=\"ph1\">`startIndex`</ph> to the end of the original string have been removed.","pos":[64,200],"source":" Instead, it returns a new string in which all characters from position `startIndex` to the end of the original string have been removed."}]}]}],"pos":[529471,529892],"yaml":true,"extradata":"MT"},{"content":"The zero-based position to begin deleting characters.","nodes":[{"pos":[0,53],"content":"The zero-based position to begin deleting characters.","nodes":[{"content":"The zero-based position to begin deleting characters.","pos":[0,53]}]}],"pos":[530614,530668],"yaml":true},{"content":"A new string that is equivalent to this string except for the removed characters.","nodes":[{"pos":[0,81],"content":"A new string that is equivalent to this string except for the removed characters.","nodes":[{"content":"A new string that is equivalent to this string except for the removed characters.","pos":[0,81]}]}],"pos":[530725,530807],"yaml":true},{"content":"<code>startIndex</code> is less than zero.  \n  \n -or-  \n  \n <code>startIndex</code> specifies a position that is not within this string.","nodes":[{"pos":[0,42],"content":"<ph id=\"ph1\">&lt;code&gt;startIndex&lt;/code&gt;</ph> is less than zero.","source":"<code>startIndex</code> is less than zero."},{"pos":[49,53],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[60,136],"content":"<ph id=\"ph1\">&lt;code&gt;startIndex&lt;/code&gt;</ph> specifies a position that is not within this string.","source":"<code>startIndex</code> specifies a position that is not within this string."}],"pos":[530969,531112],"yaml":true},{"content":"Returns a new string in which a specified number of characters in the current instance beginning at a specified position have been deleted.","nodes":[{"pos":[0,139],"content":"Returns a new string in which a specified number of characters in the current instance beginning at a specified position have been deleted.","nodes":[{"content":"Returns a new string in which a specified number of characters in the current instance beginning at a specified position have been deleted.","pos":[0,139]}]}],"pos":[532589,532729],"yaml":true},{"content":"In the [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)], strings are zero-based. The value of the `startIndex` parameter can range from zero to one less than the length of the string instance.  \n  \n> [!NOTE]\n>  This method does not modify the value of the current instance. Instead, it returns a new string in which the number of characters specified by the `count` parameter have been removed. The characters are removed at the position specified by `startIndex`.","nodes":[{"pos":[0,197],"content":"In the [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)], strings are zero-based. The value of the `startIndex` parameter can range from zero to one less than the length of the string instance.","nodes":[{"content":"In the <ph id=\"ph1\">[!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)]</ph>, strings are zero-based.","pos":[0,85],"source":"In the [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)], strings are zero-based."},{"content":"The value of the <ph id=\"ph1\">`startIndex`</ph> parameter can range from zero to one less than the length of the string instance.","pos":[86,197],"source":" The value of the `startIndex` parameter can range from zero to one less than the length of the string instance."}]},{"pos":[205,469],"content":"[!NOTE]\n This method does not modify the value of the current instance. Instead, it returns a new string in which the number of characters specified by the `count` parameter have been removed. The characters are removed at the position specified by `startIndex`.","leadings":["","> "],"nodes":[{"content":" This method does not modify the value of the current instance. Instead, it returns a new string in which the number of characters specified by the `count` parameter have been removed. The characters are removed at the position specified by `startIndex`.","pos":[8,262],"nodes":[{"content":"This method does not modify the value of the current instance.","pos":[1,63]},{"content":"Instead, it returns a new string in which the number of characters specified by the <ph id=\"ph1\">`count`</ph> parameter have been removed.","pos":[64,184],"source":" Instead, it returns a new string in which the number of characters specified by the `count` parameter have been removed."},{"content":"The characters are removed at the position specified by <ph id=\"ph1\">`startIndex`</ph>.","pos":[185,254],"source":" The characters are removed at the position specified by `startIndex`."}]}]}],"pos":[532740,533215],"yaml":true,"extradata":"MT"},{"content":"The zero-based position to begin deleting characters.","nodes":[{"pos":[0,53],"content":"The zero-based position to begin deleting characters.","nodes":[{"content":"The zero-based position to begin deleting characters.","pos":[0,53]}]}],"pos":[533811,533865],"yaml":true},{"content":"The number of characters to delete.","nodes":[{"pos":[0,35],"content":"The number of characters to delete.","nodes":[{"content":"The number of characters to delete.","pos":[0,35]}]}],"pos":[533925,533961],"yaml":true},{"content":"A new string that is equivalent to this instance except for the removed characters.","nodes":[{"pos":[0,83],"content":"A new string that is equivalent to this instance except for the removed characters.","nodes":[{"content":"A new string that is equivalent to this instance except for the removed characters.","pos":[0,83]}]}],"pos":[534018,534102],"yaml":true},{"content":"Either <code>startIndex</code> or <code>count</code> is less than zero.  \n  \n -or-  \n  \n <code>startIndex</code> plus <code>count</code> specify a position outside this instance.","nodes":[{"pos":[0,71],"content":"Either <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">startIndex</ph><ept id=\"p1\">&lt;/code&gt;</ept> or <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">count</ph><ept id=\"p2\">&lt;/code&gt;</ept> is less than zero.","source":"Either <code>startIndex</code> or <code>count</code> is less than zero."},{"pos":[78,82],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[89,178],"content":"<ph id=\"ph1\">&lt;code&gt;startIndex&lt;/code&gt;</ph> plus <ph id=\"ph2\">&lt;code&gt;count&lt;/code&gt;</ph> specify a position outside this instance.","source":"<code>startIndex</code> plus <code>count</code> specify a position outside this instance."}],"pos":[534264,534449],"yaml":true},{"content":"Returns a new string in which all occurrences of a specified Unicode character in this instance are replaced with another specified Unicode character.","nodes":[{"pos":[0,150],"content":"Returns a new string in which all occurrences of a specified Unicode character in this instance are replaced with another specified Unicode character.","nodes":[{"content":"Returns a new string in which all occurrences of a specified Unicode character in this instance are replaced with another specified Unicode character.","pos":[0,150]}]}],"pos":[535937,536088],"yaml":true},{"content":"This method performs an ordinal (case-sensitive and culture-insensitive) search to find `oldChar`.  \n  \n> [!NOTE]\n>  This method does not modify the value of the current instance. Instead, it returns a new string in which all occurrences of `oldChar` are replaced by `newChar`.  \n  \n Because this method returns the modified string, you can chain together successive calls to the <xref:System.String.Replace%2A> method to perform multiple replacements on the original string. Method calls are executed from left to right. The following example provides an illustration.  \n  \n [!code-csharp[System.String.Replace#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.replace/cs/replace2.cs#2)]\n [!code-vb[System.String.Replace#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.string.replace/vb/replace2.vb#2)]","nodes":[{"pos":[0,98],"content":"This method performs an ordinal (case-sensitive and culture-insensitive) search to find <ph id=\"ph1\">`oldChar`</ph>.","source":"This method performs an ordinal (case-sensitive and culture-insensitive) search to find `oldChar`."},{"pos":[106,277],"content":"[!NOTE]\n This method does not modify the value of the current instance. Instead, it returns a new string in which all occurrences of `oldChar` are replaced by `newChar`.","leadings":["","> "],"nodes":[{"content":" This method does not modify the value of the current instance. Instead, it returns a new string in which all occurrences of `oldChar` are replaced by `newChar`.","pos":[8,169],"nodes":[{"content":"This method does not modify the value of the current instance.","pos":[1,63]},{"content":"Instead, it returns a new string in which all occurrences of <ph id=\"ph1\">`oldChar`</ph> are replaced by <ph id=\"ph2\">`newChar`</ph>.","pos":[64,161],"source":" Instead, it returns a new string in which all occurrences of `oldChar` are replaced by `newChar`."}]}]},{"pos":[284,569],"content":"Because this method returns the modified string, you can chain together successive calls to the <xref:System.String.Replace%2A> method to perform multiple replacements on the original string. Method calls are executed from left to right. The following example provides an illustration.","nodes":[{"content":"Because this method returns the modified string, you can chain together successive calls to the <xref:System.String.Replace%2A> method to perform multiple replacements on the original string. Method calls are executed from left to right. The following example provides an illustration.","pos":[0,285],"nodes":[{"content":"Because this method returns the modified string, you can chain together successive calls to the <ph id=\"ph1\">&lt;xref:System.String.Replace%2A&gt;</ph> method to perform multiple replacements on the original string.","pos":[0,191],"source":"Because this method returns the modified string, you can chain together successive calls to the <xref:System.String.Replace%2A> method to perform multiple replacements on the original string."},{"content":"Method calls are executed from left to right.","pos":[192,237]},{"content":"The following example provides an illustration.","pos":[238,285]}]}]},{"pos":[576,835],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>System.String.Replace#2<ept id=\"p2\">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.replace/cs/replace2.cs#2)</ept><ept id=\"p1\">]</ept> <bpt id=\"p3\">[!code-vb</bpt><bpt id=\"p4\">[</bpt>System.String.Replace#2<ept id=\"p4\">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.string.replace/vb/replace2.vb#2)</ept><ept id=\"p3\">]</ept>","source":"[!code-csharp[System.String.Replace#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.replace/cs/replace2.cs#2)]\n [!code-vb[System.String.Replace#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.string.replace/vb/replace2.vb#2)]"}],"pos":[536099,536945],"yaml":true,"extradata":"MT"},{"content":"The Unicode character to be replaced.","nodes":[{"pos":[0,37],"content":"The Unicode character to be replaced.","nodes":[{"content":"The Unicode character to be replaced.","pos":[0,37]}]}],"pos":[537600,537638],"yaml":true},{"content":"The Unicode character to replace all occurrences of <code>oldChar</code>.","nodes":[{"pos":[0,73],"content":"The Unicode character to replace all occurrences of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">oldChar</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The Unicode character to replace all occurrences of <code>oldChar</code>."}],"pos":[537699,537773],"yaml":true},{"content":"A string that is equivalent to this instance except that all instances of <code>oldChar</code> are replaced with <code>newChar</code>. If <code>oldChar</code> is not found in the current instance, the method returns the current instance unchanged.","nodes":[{"pos":[0,247],"content":"A string that is equivalent to this instance except that all instances of <code>oldChar</code> are replaced with <code>newChar</code>. If <code>oldChar</code> is not found in the current instance, the method returns the current instance unchanged.","nodes":[{"content":"A string that is equivalent to this instance except that all instances of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">oldChar</ph><ept id=\"p1\">&lt;/code&gt;</ept> are replaced with <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">newChar</ph><ept id=\"p2\">&lt;/code&gt;</ept>.","pos":[0,134],"source":"A string that is equivalent to this instance except that all instances of <code>oldChar</code> are replaced with <code>newChar</code>."},{"content":"If <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">oldChar</ph><ept id=\"p1\">&lt;/code&gt;</ept> is not found in the current instance, the method returns the current instance unchanged.","pos":[135,247],"source":" If <code>oldChar</code> is not found in the current instance, the method returns the current instance unchanged."}]}],"pos":[537830,538078],"yaml":true},{"content":"Returns a new string in which all occurrences of a specified string in the current instance are replaced with another specified string.","nodes":[{"pos":[0,135],"content":"Returns a new string in which all occurrences of a specified string in the current instance are replaced with another specified string.","nodes":[{"content":"Returns a new string in which all occurrences of a specified string in the current instance are replaced with another specified string.","pos":[0,135]}]}],"pos":[539625,539761],"yaml":true},{"content":"If `newValue` is `null`, all occurrences of `oldValue` are removed.  \n  \n> [!NOTE]\n>  This method does not modify the value of the current instance. Instead, it returns a new string in which all occurrences of `oldValue` are replaced by `newValue`.  \n  \n This method performs an ordinal (case-sensitive and culture-insensitive) search to find `oldValue`.  \n  \n Because this method returns the modified string, you can chain together successive calls to the <xref:System.String.Replace%2A> method to perform multiple replacements on the original string. Method calls are executed from left to right. The following example provides an illustration.  \n  \n [!code-csharp[System.String.Replace#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.replace/cs/replace1.cs#1)]\n [!code-vb[System.String.Replace#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.string.replace/vb/replace1.vb#1)]","nodes":[{"pos":[0,67],"content":"If <ph id=\"ph1\">`newValue`</ph> is <ph id=\"ph2\">`null`</ph>, all occurrences of <ph id=\"ph3\">`oldValue`</ph> are removed.","source":"If `newValue` is `null`, all occurrences of `oldValue` are removed."},{"pos":[75,248],"content":"[!NOTE]\n This method does not modify the value of the current instance. Instead, it returns a new string in which all occurrences of `oldValue` are replaced by `newValue`.","leadings":["","> "],"nodes":[{"content":" This method does not modify the value of the current instance. Instead, it returns a new string in which all occurrences of `oldValue` are replaced by `newValue`.","pos":[8,171],"nodes":[{"content":"This method does not modify the value of the current instance.","pos":[1,63]},{"content":"Instead, it returns a new string in which all occurrences of <ph id=\"ph1\">`oldValue`</ph> are replaced by <ph id=\"ph2\">`newValue`</ph>.","pos":[64,163],"source":" Instead, it returns a new string in which all occurrences of `oldValue` are replaced by `newValue`."}]}]},{"pos":[255,354],"content":"This method performs an ordinal (case-sensitive and culture-insensitive) search to find <ph id=\"ph1\">`oldValue`</ph>.","source":"This method performs an ordinal (case-sensitive and culture-insensitive) search to find `oldValue`."},{"pos":[361,646],"content":"Because this method returns the modified string, you can chain together successive calls to the <xref:System.String.Replace%2A> method to perform multiple replacements on the original string. Method calls are executed from left to right. The following example provides an illustration.","nodes":[{"content":"Because this method returns the modified string, you can chain together successive calls to the <xref:System.String.Replace%2A> method to perform multiple replacements on the original string. Method calls are executed from left to right. The following example provides an illustration.","pos":[0,285],"nodes":[{"content":"Because this method returns the modified string, you can chain together successive calls to the <ph id=\"ph1\">&lt;xref:System.String.Replace%2A&gt;</ph> method to perform multiple replacements on the original string.","pos":[0,191],"source":"Because this method returns the modified string, you can chain together successive calls to the <xref:System.String.Replace%2A> method to perform multiple replacements on the original string."},{"content":"Method calls are executed from left to right.","pos":[192,237]},{"content":"The following example provides an illustration.","pos":[238,285]}]}]},{"pos":[653,912],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>System.String.Replace#1<ept id=\"p2\">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.replace/cs/replace1.cs#1)</ept><ept id=\"p1\">]</ept> <bpt id=\"p3\">[!code-vb</bpt><bpt id=\"p4\">[</bpt>System.String.Replace#1<ept id=\"p4\">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.string.replace/vb/replace1.vb#1)</ept><ept id=\"p3\">]</ept>","source":"[!code-csharp[System.String.Replace#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.replace/cs/replace1.cs#1)]\n [!code-vb[System.String.Replace#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.string.replace/vb/replace1.vb#1)]"}],"pos":[539772,540697],"yaml":true,"extradata":"MT"},{"content":"The string to be replaced.","nodes":[{"pos":[0,26],"content":"The string to be replaced.","nodes":[{"content":"The string to be replaced.","pos":[0,26]}]}],"pos":[541340,541367],"yaml":true},{"content":"The string to replace all occurrences of <code>oldValue</code>.","nodes":[{"pos":[0,63],"content":"The string to replace all occurrences of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">oldValue</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The string to replace all occurrences of <code>oldValue</code>."}],"pos":[541431,541495],"yaml":true},{"content":"A string that is equivalent to the current string except that all instances of <code>oldValue</code> are replaced with <code>newValue</code>. If <code>oldValue</code> is not found in the current instance, the method returns the current instance unchanged.","nodes":[{"pos":[0,255],"content":"A string that is equivalent to the current string except that all instances of <code>oldValue</code> are replaced with <code>newValue</code>. If <code>oldValue</code> is not found in the current instance, the method returns the current instance unchanged.","nodes":[{"content":"A string that is equivalent to the current string except that all instances of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">oldValue</ph><ept id=\"p1\">&lt;/code&gt;</ept> are replaced with <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">newValue</ph><ept id=\"p2\">&lt;/code&gt;</ept>.","pos":[0,141],"source":"A string that is equivalent to the current string except that all instances of <code>oldValue</code> are replaced with <code>newValue</code>."},{"content":"If <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">oldValue</ph><ept id=\"p1\">&lt;/code&gt;</ept> is not found in the current instance, the method returns the current instance unchanged.","pos":[142,255],"source":" If <code>oldValue</code> is not found in the current instance, the method returns the current instance unchanged."}]}],"pos":[541552,541808],"yaml":true},{"content":"<code>oldValue</code> is `null`.","nodes":[{"pos":[0,32],"content":"<ph id=\"ph1\">&lt;code&gt;oldValue&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>oldValue</code> is `null`."}],"pos":[541959,541992],"yaml":true},{"content":"<code>oldValue</code> is the empty string (\"\").","nodes":[{"pos":[0,47],"content":"<ph id=\"ph1\">&lt;code&gt;oldValue&lt;/code&gt;</ph> is the empty string (\"\").","source":"<code>oldValue</code> is the empty string (\"\")."}],"pos":[542086,542134],"yaml":true},{"content":"Splits a string into a maximum number of substrings based on the strings in an array. You can specify whether the substrings include empty array elements.","nodes":[{"pos":[0,154],"content":"Splits a string into a maximum number of substrings based on the strings in an array. You can specify whether the substrings include empty array elements.","nodes":[{"content":"Splits a string into a maximum number of substrings based on the strings in an array. You can specify whether the substrings include empty array elements.","pos":[0,154],"nodes":[{"content":"Splits a string into a maximum number of substrings based on the strings in an array.","pos":[0,85]},{"content":"You can specify whether the substrings include empty array elements.","pos":[86,154]}]}]}],"pos":[546193,546348],"yaml":true},{"content":"## Return value details  \n Delimiter strings are not included in the elements of the returned array.  \n  \n If this instance does not contain any of the strings in `separator`, or the `count` parameter is 1, the returned array consists of a single element that contains this instance. If the `separator` parameter is `null` or contains no characters, white-space characters are assumed to be the delimiters. White-space characters are defined by the Unicode standard and return `true` if they are passed to the <xref:System.Char.IsWhiteSpace%2A?displayProperty=fullName> method. However, if the `separator` parameter in the call to this method overload is `null`, compiler overload resolution fails. To unambiguously identify the called method, your code must indicate the type of the `null`. The following example shows several ways to unambiguously identify this overload.  \n  \n [!code-csharp[System.String.Split#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Split/cs/split3.cs#4)]\n [!code-vb[System.String.Split#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Split/vb/split3.vb#4)]  \n  \n If the `count` parameter is zero, or the `options` parameter is <xref:System.StringSplitOptions.RemoveEmptyEntries> and the length of this instance is zero, an empty array is returned.  \n  \n Each element of `separator` defines a separate delimiter that consists of one or more characters. If the `options` parameter is <xref:System.StringSplitOptions.None>, and two delimiters are adjacent or a delimiter is found at the beginning or end of this instance, the corresponding array element contains <xref:System.String.Empty>.  \n  \n If there are more than `count` substrings in this instance, the first `count` minus 1 substrings are returned in the first `count` minus 1 elements of the return value, and the remaining characters in this instance are returned in the last element of the return value.  \n  \n If `count` is greater than the number of substrings, the available substrings are returned and no exception is thrown.  \n  \n## The separator array  \n If any of the elements in `separator` consists of multiple characters, the entire substring is considered a delimiter. For example, if one of the elements in `separator` is \"10\", attempting to split the string \"This10is10a10string.\" returns this four-element array: { \"This\", \"is\", \"a\", \"string.\" }.  \n  \n## Comparison details  \n The <xref:System.String.Split%2A> method extracts the substrings in this string that are delimited by one or more of the strings in the `separator` parameter, and returns those substrings as elements of an array.  \n  \n The <xref:System.String.Split%2A> method looks for delimiters by performing comparisons using case-sensitive ordinal sort rules. For more information about word, string, and ordinal sorts, see the <xref:System.Globalization.CompareOptions?displayProperty=fullName> enumeration.  \n  \n The <xref:System.String.Split%2A> method ignores any element of `separator` whose value is `null` or the empty string (\"\").  \n  \n To avoid ambiguous results when strings in `separator` have characters in common, the <xref:System.String.Split%2A> method proceeds from the beginning to the end of the value of the instance, and matches the first element in `separator` that is equal to a delimiter in the instance. The order in which substrings are encountered in the instance takes precedence over the order of elements in `separator`.  \n  \n For example, consider an instance whose value is \"abcdef\". If the first element in `separator` was \"ef\" and the second element was \"bcde\", the result of the split operation would be \"a\" and \"f\". This is because the substring in the instance, \"bcde\", is encountered and matches an element in `separator` before the substring \"f\" is encountered.  \n  \n However, if the first element of `separator` was \"bcd\" and the second element was \"bc\", the result of the split operation would be \"a\" and \"ef\". This is because \"bcd\" is the first delimiter in `separator` that matches a delimiter in the instance. If the order of the separators was reversed so the first element was \"bc\" and the second element was \"bcd\", the result would be \"a\" and \"def\".  \n  \n## Performance considerations  \n The<xref:System.String.Split%2A> methods allocate memory for the returned array object and a <xref:System.String> object for each array element. If your application requires optimal performance or if managing memory allocation is critical in your application, consider using the <xref:System.String.IndexOf%2A> or <xref:System.String.IndexOfAny%2A> method, and optionally the <xref:System.String.Compare%2A> method, to locate a substring within a string.  \n  \n If you are splitting a string at a separator character, use the <xref:System.String.IndexOf%2A> or <xref:System.String.IndexOfAny%2A> method to locate a separator character in the string. If you are splitting a string at a separator string, use the <xref:System.String.IndexOf%2A> or <xref:System.String.IndexOfAny%2A> method to locate the first character of the separator string. Then use the <xref:System.String.Compare%2A> method to determine whether the characters after that first character are equal to the remaining characters of the separator string.  \n  \n In addition, if the same set of characters is used to split strings in multiple <xref:System.String.Split%2A> method calls, consider creating a single array and referencing it in each method call. This significantly reduces the additional overhead of each method call.","nodes":[{"pos":[3,23],"content":"Return value details","linkify":"Return value details","nodes":[{"content":"Return value details","pos":[0,20]}]},{"pos":[27,100],"content":"Delimiter strings are not included in the elements of the returned array.","nodes":[{"content":"Delimiter strings are not included in the elements of the returned array.","pos":[0,73]}]},{"pos":[107,873],"content":"If this instance does not contain any of the strings in `separator`, or the `count` parameter is 1, the returned array consists of a single element that contains this instance. If the `separator` parameter is `null` or contains no characters, white-space characters are assumed to be the delimiters. White-space characters are defined by the Unicode standard and return `true` if they are passed to the <xref:System.Char.IsWhiteSpace%2A?displayProperty=fullName> method. However, if the `separator` parameter in the call to this method overload is `null`, compiler overload resolution fails. To unambiguously identify the called method, your code must indicate the type of the `null`. The following example shows several ways to unambiguously identify this overload.","nodes":[{"content":"If this instance does not contain any of the strings in <ph id=\"ph1\">`separator`</ph>, or the <ph id=\"ph2\">`count`</ph> parameter is 1, the returned array consists of a single element that contains this instance.","pos":[0,176],"source":"If this instance does not contain any of the strings in `separator`, or the `count` parameter is 1, the returned array consists of a single element that contains this instance."},{"content":"If the <ph id=\"ph1\">`separator`</ph> parameter is <ph id=\"ph2\">`null`</ph> or contains no characters, white-space characters are assumed to be the delimiters.","pos":[177,299],"source":" If the `separator` parameter is `null` or contains no characters, white-space characters are assumed to be the delimiters."},{"content":"White-space characters are defined by the Unicode standard and return <ph id=\"ph1\">`true`</ph> if they are passed to the <ph id=\"ph2\">&lt;xref:System.Char.IsWhiteSpace%2A?displayProperty=fullName&gt;</ph> method.","pos":[300,470],"source":" White-space characters are defined by the Unicode standard and return `true` if they are passed to the <xref:System.Char.IsWhiteSpace%2A?displayProperty=fullName> method."},{"content":"However, if the <ph id=\"ph1\">`separator`</ph> parameter in the call to this method overload is <ph id=\"ph2\">`null`</ph>, compiler overload resolution fails.","pos":[471,591],"source":" However, if the `separator` parameter in the call to this method overload is `null`, compiler overload resolution fails."},{"content":"To unambiguously identify the called method, your code must indicate the type of the <ph id=\"ph1\">`null`</ph>.","pos":[592,684],"source":" To unambiguously identify the called method, your code must indicate the type of the `null`."},{"content":"The following example shows several ways to unambiguously identify this overload.","pos":[685,766]}]},{"pos":[880,1127],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>System.String.Split#4<ept id=\"p2\">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Split/cs/split3.cs#4)</ept><ept id=\"p1\">]</ept> <bpt id=\"p3\">[!code-vb</bpt><bpt id=\"p4\">[</bpt>System.String.Split#4<ept id=\"p4\">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Split/vb/split3.vb#4)</ept><ept id=\"p3\">]</ept>","source":"[!code-csharp[System.String.Split#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Split/cs/split3.cs#4)]\n [!code-vb[System.String.Split#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Split/vb/split3.vb#4)]"},{"pos":[1134,1318],"content":"If the <ph id=\"ph1\">`count`</ph> parameter is zero, or the <ph id=\"ph2\">`options`</ph> parameter is <ph id=\"ph3\">&lt;xref:System.StringSplitOptions.RemoveEmptyEntries&gt;</ph> and the length of this instance is zero, an empty array is returned.","source":"If the `count` parameter is zero, or the `options` parameter is <xref:System.StringSplitOptions.RemoveEmptyEntries> and the length of this instance is zero, an empty array is returned."},{"pos":[1325,1658],"content":"Each element of `separator` defines a separate delimiter that consists of one or more characters. If the `options` parameter is <xref:System.StringSplitOptions.None>, and two delimiters are adjacent or a delimiter is found at the beginning or end of this instance, the corresponding array element contains <xref:System.String.Empty>.","nodes":[{"content":"Each element of <ph id=\"ph1\">`separator`</ph> defines a separate delimiter that consists of one or more characters.","pos":[0,97],"source":"Each element of `separator` defines a separate delimiter that consists of one or more characters."},{"content":"If the <ph id=\"ph1\">`options`</ph> parameter is <ph id=\"ph2\">&lt;xref:System.StringSplitOptions.None&gt;</ph>, and two delimiters are adjacent or a delimiter is found at the beginning or end of this instance, the corresponding array element contains <ph id=\"ph3\">&lt;xref:System.String.Empty&gt;</ph>.","pos":[98,333],"source":" If the `options` parameter is <xref:System.StringSplitOptions.None>, and two delimiters are adjacent or a delimiter is found at the beginning or end of this instance, the corresponding array element contains <xref:System.String.Empty>."}]},{"pos":[1665,1933],"content":"If there are more than <ph id=\"ph1\">`count`</ph> substrings in this instance, the first <ph id=\"ph2\">`count`</ph> minus 1 substrings are returned in the first <ph id=\"ph3\">`count`</ph> minus 1 elements of the return value, and the remaining characters in this instance are returned in the last element of the return value.","source":"If there are more than `count` substrings in this instance, the first `count` minus 1 substrings are returned in the first `count` minus 1 elements of the return value, and the remaining characters in this instance are returned in the last element of the return value."},{"pos":[1940,2058],"content":"If <ph id=\"ph1\">`count`</ph> is greater than the number of substrings, the available substrings are returned and no exception is thrown.","source":"If `count` is greater than the number of substrings, the available substrings are returned and no exception is thrown."},{"pos":[2067,2086],"content":"The separator array","linkify":"The separator array","nodes":[{"content":"The separator array","pos":[0,19]}]},{"pos":[2090,2389],"content":"If any of the elements in `separator` consists of multiple characters, the entire substring is considered a delimiter. For example, if one of the elements in `separator` is \"10\", attempting to split the string \"This10is10a10string.\" returns this four-element array: { \"This\", \"is\", \"a\", \"string.\" }.","nodes":[{"content":"If any of the elements in <ph id=\"ph1\">`separator`</ph> consists of multiple characters, the entire substring is considered a delimiter.","pos":[0,118],"source":"If any of the elements in `separator` consists of multiple characters, the entire substring is considered a delimiter."},{"content":"For example, if one of the elements in <ph id=\"ph1\">`separator`</ph> is \"10\", attempting to split the string \"This10is10a10string.\"","pos":[119,232],"source":" For example, if one of the elements in `separator` is \"10\", attempting to split the string \"This10is10a10string.\""},{"content":"returns this four-element array: { \"This\", \"is\", \"a\", \"string.\"","pos":[233,296]},{"content":"}.","pos":[297,299]}]},{"pos":[2398,2416],"content":"Comparison details","linkify":"Comparison details","nodes":[{"content":"Comparison details","pos":[0,18]}]},{"pos":[2420,2632],"content":"The <ph id=\"ph1\">&lt;xref:System.String.Split%2A&gt;</ph> method extracts the substrings in this string that are delimited by one or more of the strings in the <ph id=\"ph2\">`separator`</ph> parameter, and returns those substrings as elements of an array.","source":"The <xref:System.String.Split%2A> method extracts the substrings in this string that are delimited by one or more of the strings in the `separator` parameter, and returns those substrings as elements of an array."},{"pos":[2639,2916],"content":"The <xref:System.String.Split%2A> method looks for delimiters by performing comparisons using case-sensitive ordinal sort rules. For more information about word, string, and ordinal sorts, see the <xref:System.Globalization.CompareOptions?displayProperty=fullName> enumeration.","nodes":[{"content":"The <xref:System.String.Split%2A> method looks for delimiters by performing comparisons using case-sensitive ordinal sort rules. For more information about word, string, and ordinal sorts, see the <xref:System.Globalization.CompareOptions?displayProperty=fullName> enumeration.","pos":[0,277],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.String.Split%2A&gt;</ph> method looks for delimiters by performing comparisons using case-sensitive ordinal sort rules.","pos":[0,128],"source":"The <xref:System.String.Split%2A> method looks for delimiters by performing comparisons using case-sensitive ordinal sort rules."},{"content":"For more information about word, string, and ordinal sorts, see the <ph id=\"ph1\">&lt;xref:System.Globalization.CompareOptions?displayProperty=fullName&gt;</ph> enumeration.","pos":[129,277],"source":" For more information about word, string, and ordinal sorts, see the <xref:System.Globalization.CompareOptions?displayProperty=fullName> enumeration."}]}]},{"pos":[2923,3046],"content":"The <ph id=\"ph1\">&lt;xref:System.String.Split%2A&gt;</ph> method ignores any element of <ph id=\"ph2\">`separator`</ph> whose value is <ph id=\"ph3\">`null`</ph> or the empty string (\"\").","source":"The <xref:System.String.Split%2A> method ignores any element of `separator` whose value is `null` or the empty string (\"\")."},{"pos":[3053,3457],"content":"To avoid ambiguous results when strings in `separator` have characters in common, the <xref:System.String.Split%2A> method proceeds from the beginning to the end of the value of the instance, and matches the first element in `separator` that is equal to a delimiter in the instance. The order in which substrings are encountered in the instance takes precedence over the order of elements in `separator`.","nodes":[{"content":"To avoid ambiguous results when strings in <ph id=\"ph1\">`separator`</ph> have characters in common, the <ph id=\"ph2\">&lt;xref:System.String.Split%2A&gt;</ph> method proceeds from the beginning to the end of the value of the instance, and matches the first element in <ph id=\"ph3\">`separator`</ph> that is equal to a delimiter in the instance.","pos":[0,282],"source":"To avoid ambiguous results when strings in `separator` have characters in common, the <xref:System.String.Split%2A> method proceeds from the beginning to the end of the value of the instance, and matches the first element in `separator` that is equal to a delimiter in the instance."},{"content":"The order in which substrings are encountered in the instance takes precedence over the order of elements in <ph id=\"ph1\">`separator`</ph>.","pos":[283,404],"source":" The order in which substrings are encountered in the instance takes precedence over the order of elements in `separator`."}]},{"pos":[3464,3807],"content":"For example, consider an instance whose value is \"abcdef\". If the first element in `separator` was \"ef\" and the second element was \"bcde\", the result of the split operation would be \"a\" and \"f\". This is because the substring in the instance, \"bcde\", is encountered and matches an element in `separator` before the substring \"f\" is encountered.","nodes":[{"content":"For example, consider an instance whose value is \"abcdef\".","pos":[0,58]},{"content":"If the first element in <ph id=\"ph1\">`separator`</ph> was \"ef\" and the second element was \"bcde\", the result of the split operation would be \"a\" and \"f\".","pos":[59,194],"source":" If the first element in `separator` was \"ef\" and the second element was \"bcde\", the result of the split operation would be \"a\" and \"f\"."},{"content":"This is because the substring in the instance, \"bcde\", is encountered and matches an element in <ph id=\"ph1\">`separator`</ph> before the substring \"f\" is encountered.","pos":[195,343],"source":" This is because the substring in the instance, \"bcde\", is encountered and matches an element in `separator` before the substring \"f\" is encountered."}]},{"pos":[3814,4203],"content":"However, if the first element of `separator` was \"bcd\" and the second element was \"bc\", the result of the split operation would be \"a\" and \"ef\". This is because \"bcd\" is the first delimiter in `separator` that matches a delimiter in the instance. If the order of the separators was reversed so the first element was \"bc\" and the second element was \"bcd\", the result would be \"a\" and \"def\".","nodes":[{"content":"However, if the first element of <ph id=\"ph1\">`separator`</ph> was \"bcd\" and the second element was \"bc\", the result of the split operation would be \"a\" and \"ef\".","pos":[0,144],"source":"However, if the first element of `separator` was \"bcd\" and the second element was \"bc\", the result of the split operation would be \"a\" and \"ef\"."},{"content":"This is because \"bcd\" is the first delimiter in <ph id=\"ph1\">`separator`</ph> that matches a delimiter in the instance.","pos":[145,246],"source":" This is because \"bcd\" is the first delimiter in `separator` that matches a delimiter in the instance."},{"content":"If the order of the separators was reversed so the first element was \"bc\" and the second element was \"bcd\", the result would be \"a\" and \"def\".","pos":[247,389]}]},{"pos":[4212,4238],"content":"Performance considerations","linkify":"Performance considerations","nodes":[{"content":"Performance considerations","pos":[0,26]}]},{"pos":[4242,4696],"content":"The<xref:System.String.Split%2A> methods allocate memory for the returned array object and a <xref:System.String> object for each array element. If your application requires optimal performance or if managing memory allocation is critical in your application, consider using the <xref:System.String.IndexOf%2A> or <xref:System.String.IndexOfAny%2A> method, and optionally the <xref:System.String.Compare%2A> method, to locate a substring within a string.","nodes":[{"content":"The<xref:System.String.Split%2A> methods allocate memory for the returned array object and a <xref:System.String> object for each array element. If your application requires optimal performance or if managing memory allocation is critical in your application, consider using the <xref:System.String.IndexOf%2A> or <xref:System.String.IndexOfAny%2A> method, and optionally the <xref:System.String.Compare%2A> method, to locate a substring within a string.","pos":[0,454],"nodes":[{"content":"The<ph id=\"ph1\">&lt;xref:System.String.Split%2A&gt;</ph> methods allocate memory for the returned array object and a <ph id=\"ph2\">&lt;xref:System.String&gt;</ph> object for each array element.","pos":[0,144],"source":"The<xref:System.String.Split%2A> methods allocate memory for the returned array object and a <xref:System.String> object for each array element."},{"content":"If your application requires optimal performance or if managing memory allocation is critical in your application, consider using the <ph id=\"ph1\">&lt;xref:System.String.IndexOf%2A&gt;</ph> or <ph id=\"ph2\">&lt;xref:System.String.IndexOfAny%2A&gt;</ph> method, and optionally the <ph id=\"ph3\">&lt;xref:System.String.Compare%2A&gt;</ph> method, to locate a substring within a string.","pos":[145,454],"source":" If your application requires optimal performance or if managing memory allocation is critical in your application, consider using the <xref:System.String.IndexOf%2A> or <xref:System.String.IndexOfAny%2A> method, and optionally the <xref:System.String.Compare%2A> method, to locate a substring within a string."}]}]},{"pos":[4703,5261],"content":"If you are splitting a string at a separator character, use the <xref:System.String.IndexOf%2A> or <xref:System.String.IndexOfAny%2A> method to locate a separator character in the string. If you are splitting a string at a separator string, use the <xref:System.String.IndexOf%2A> or <xref:System.String.IndexOfAny%2A> method to locate the first character of the separator string. Then use the <xref:System.String.Compare%2A> method to determine whether the characters after that first character are equal to the remaining characters of the separator string.","nodes":[{"content":"If you are splitting a string at a separator character, use the <xref:System.String.IndexOf%2A> or <xref:System.String.IndexOfAny%2A> method to locate a separator character in the string. If you are splitting a string at a separator string, use the <xref:System.String.IndexOf%2A> or <xref:System.String.IndexOfAny%2A> method to locate the first character of the separator string. Then use the <xref:System.String.Compare%2A> method to determine whether the characters after that first character are equal to the remaining characters of the separator string.","pos":[0,558],"nodes":[{"content":"If you are splitting a string at a separator character, use the <ph id=\"ph1\">&lt;xref:System.String.IndexOf%2A&gt;</ph> or <ph id=\"ph2\">&lt;xref:System.String.IndexOfAny%2A&gt;</ph> method to locate a separator character in the string.","pos":[0,187],"source":"If you are splitting a string at a separator character, use the <xref:System.String.IndexOf%2A> or <xref:System.String.IndexOfAny%2A> method to locate a separator character in the string."},{"content":"If you are splitting a string at a separator string, use the <ph id=\"ph1\">&lt;xref:System.String.IndexOf%2A&gt;</ph> or <ph id=\"ph2\">&lt;xref:System.String.IndexOfAny%2A&gt;</ph> method to locate the first character of the separator string.","pos":[188,380],"source":" If you are splitting a string at a separator string, use the <xref:System.String.IndexOf%2A> or <xref:System.String.IndexOfAny%2A> method to locate the first character of the separator string."},{"content":"Then use the <ph id=\"ph1\">&lt;xref:System.String.Compare%2A&gt;</ph> method to determine whether the characters after that first character are equal to the remaining characters of the separator string.","pos":[381,558],"source":" Then use the <xref:System.String.Compare%2A> method to determine whether the characters after that first character are equal to the remaining characters of the separator string."}]}]},{"pos":[5268,5536],"content":"In addition, if the same set of characters is used to split strings in multiple <xref:System.String.Split%2A> method calls, consider creating a single array and referencing it in each method call. This significantly reduces the additional overhead of each method call.","nodes":[{"content":"In addition, if the same set of characters is used to split strings in multiple <xref:System.String.Split%2A> method calls, consider creating a single array and referencing it in each method call. This significantly reduces the additional overhead of each method call.","pos":[0,268],"nodes":[{"content":"In addition, if the same set of characters is used to split strings in multiple <ph id=\"ph1\">&lt;xref:System.String.Split%2A&gt;</ph> method calls, consider creating a single array and referencing it in each method call.","pos":[0,196],"source":"In addition, if the same set of characters is used to split strings in multiple <xref:System.String.Split%2A> method calls, consider creating a single array and referencing it in each method call."},{"content":"This significantly reduces the additional overhead of each method call.","pos":[197,268]}]}]}],"pos":[546359,551981],"yaml":true,"extradata":"MT"},{"content":"A string array that delimits the substrings in this string, an empty array that contains no delimiters, or `null`.","nodes":[{"pos":[0,114],"content":"A string array that delimits the substrings in this string, an empty array that contains no delimiters, or <ph id=\"ph1\">`null`</ph>.","source":"A string array that delimits the substrings in this string, an empty array that contains no delimiters, or `null`."}],"pos":[552733,552848],"yaml":true},{"content":"The maximum number of substrings to return.","nodes":[{"pos":[0,43],"content":"The maximum number of substrings to return.","nodes":[{"content":"The maximum number of substrings to return.","pos":[0,43]}]}],"pos":[552908,552952],"yaml":true},{"content":"<xref href=\"System.StringSplitOptions.RemoveEmptyEntries\"></xref> to omit empty array elements from the array returned; or <xref href=\"System.StringSplitOptions.None\"></xref> to include empty array elements in the array returned.","nodes":[{"pos":[0,229],"content":"<ph id=\"ph1\">&lt;xref href=\"System.StringSplitOptions.RemoveEmptyEntries\"&gt;&lt;/xref&gt;</ph> to omit empty array elements from the array returned; or <ph id=\"ph2\">&lt;xref href=\"System.StringSplitOptions.None\"&gt;&lt;/xref&gt;</ph> to include empty array elements in the array returned.","source":"<xref href=\"System.StringSplitOptions.RemoveEmptyEntries\"></xref> to omit empty array elements from the array returned; or <xref href=\"System.StringSplitOptions.None\"></xref> to include empty array elements in the array returned."}],"pos":[553027,553257],"yaml":true},{"content":"An array whose elements contain the substrings in this string that are delimited by one or more strings in <code>separator</code>. For more information, see the Remarks section.","nodes":[{"pos":[0,177],"content":"An array whose elements contain the substrings in this string that are delimited by one or more strings in <code>separator</code>. For more information, see the Remarks section.","nodes":[{"content":"An array whose elements contain the substrings in this string that are delimited by one or more strings in <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">separator</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","pos":[0,130],"source":"An array whose elements contain the substrings in this string that are delimited by one or more strings in <code>separator</code>."},{"content":"For more information, see the Remarks section.","pos":[131,177]}]}],"pos":[553316,553494],"yaml":true},{"content":"<code>count</code> is negative.","nodes":[{"pos":[0,31],"content":"<ph id=\"ph1\">&lt;code&gt;count&lt;/code&gt;</ph> is negative.","source":"<code>count</code> is negative."}],"pos":[553655,553687],"yaml":true},{"content":"<code>options</code> is not one of the <xref href=\"System.StringSplitOptions\"></xref> values.","nodes":[{"pos":[0,93],"content":"<ph id=\"ph1\">&lt;code&gt;options&lt;/code&gt;</ph> is not one of the <ph id=\"ph2\">&lt;xref href=\"System.StringSplitOptions\"&gt;&lt;/xref&gt;</ph> values.","source":"<code>options</code> is not one of the <xref href=\"System.StringSplitOptions\"></xref> values."}],"pos":[553781,553875],"yaml":true},{"content":"Splits a string into a maximum number of substrings based on the characters in an array.","nodes":[{"pos":[0,88],"content":"Splits a string into a maximum number of substrings based on the characters in an array.","nodes":[{"content":"Splits a string into a maximum number of substrings based on the characters in an array.","pos":[0,88]}]}],"pos":[556699,556788],"yaml":true},{"content":"Delimiter characters are not included in the elements of the returned array.  \n  \n If this instance does not contain any of the characters in `separator`, or the `count` parameter is 1, the returned array consists of a single element that contains this instance. If the `separator` parameter is `null` or contains no characters, white-space characters are assumed to be the delimiters. White-space characters are defined by the Unicode standard and return `true` if they are passed to the <xref:System.Char.IsWhiteSpace%2A?displayProperty=fullName> method. However, if the `separator` parameter in the call to this method overload is `null`, compiler overload resolution fails. To unambiguously identify the called method, your code must indicate the type of the null. The following example shows several ways to unambiguously identify this overload.  \n  \n [!code-csharp[System.String.Split#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Split/cs/split3.cs#3)]\n [!code-vb[System.String.Split#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Split/vb/split3.vb#3)]  \n  \n If the `count` parameter is zero, or the `options` parameter is <xref:System.StringSplitOptions.RemoveEmptyEntries> and the length of this instance is zero, an empty array is returned.  \n  \n Each element of `separator` defines a separate delimiter character. If the `options` parameter is <xref:System.StringSplitOptions.None>, and two delimiters are adjacent or a delimiter is found at the beginning or end of this instance, the corresponding array element contains <xref:System.String.Empty>.  \n  \n If there are more than `count` substrings in this instance, the first `count` minus 1 substrings are returned in the first `count` minus 1 elements of the return value, and the remaining characters in this instance are returned in the last element of the return value.  \n  \n If `count` is greater than the number of substrings, the available substrings are returned and no exception is thrown.  \n  \n## Performance Considerations  \n The<xref:System.String.Split%2A> methods allocate memory for the returned array object and a <xref:System.String> object for each array element. If your application requires optimal performance or if managing memory allocation is critical in your application, consider using the <xref:System.String.IndexOf%2A> or <xref:System.String.IndexOfAny%2A> method, and optionally the <xref:System.String.Compare%2A> method, to locate a substring within a string.  \n  \n If you are splitting a string at a separator character, use the <xref:System.String.IndexOf%2A> or <xref:System.String.IndexOfAny%2A> method to locate a separator character in the string. If you are splitting a string at a separator string, use the <xref:System.String.IndexOf%2A> or <xref:System.String.IndexOfAny%2A> method to locate the first character of the separator string. Then use the <xref:System.String.Compare%2A> method to determine whether the characters after that first character are equal to the remaining characters of the separator string.  \n  \n In addition, if the same set of characters is used to split strings in multiple <xref:System.String.Split%2A> method calls, consider creating a single array and referencing it in each method call. This significantly reduces the additional overhead of each method call.","nodes":[{"pos":[0,76],"content":"Delimiter characters are not included in the elements of the returned array.","nodes":[{"content":"Delimiter characters are not included in the elements of the returned array.","pos":[0,76]}]},{"pos":[83,850],"content":"If this instance does not contain any of the characters in `separator`, or the `count` parameter is 1, the returned array consists of a single element that contains this instance. If the `separator` parameter is `null` or contains no characters, white-space characters are assumed to be the delimiters. White-space characters are defined by the Unicode standard and return `true` if they are passed to the <xref:System.Char.IsWhiteSpace%2A?displayProperty=fullName> method. However, if the `separator` parameter in the call to this method overload is `null`, compiler overload resolution fails. To unambiguously identify the called method, your code must indicate the type of the null. The following example shows several ways to unambiguously identify this overload.","nodes":[{"content":"If this instance does not contain any of the characters in <ph id=\"ph1\">`separator`</ph>, or the <ph id=\"ph2\">`count`</ph> parameter is 1, the returned array consists of a single element that contains this instance.","pos":[0,179],"source":"If this instance does not contain any of the characters in `separator`, or the `count` parameter is 1, the returned array consists of a single element that contains this instance."},{"content":"If the <ph id=\"ph1\">`separator`</ph> parameter is <ph id=\"ph2\">`null`</ph> or contains no characters, white-space characters are assumed to be the delimiters.","pos":[180,302],"source":" If the `separator` parameter is `null` or contains no characters, white-space characters are assumed to be the delimiters."},{"content":"White-space characters are defined by the Unicode standard and return <ph id=\"ph1\">`true`</ph> if they are passed to the <ph id=\"ph2\">&lt;xref:System.Char.IsWhiteSpace%2A?displayProperty=fullName&gt;</ph> method.","pos":[303,473],"source":" White-space characters are defined by the Unicode standard and return `true` if they are passed to the <xref:System.Char.IsWhiteSpace%2A?displayProperty=fullName> method."},{"content":"However, if the <ph id=\"ph1\">`separator`</ph> parameter in the call to this method overload is <ph id=\"ph2\">`null`</ph>, compiler overload resolution fails.","pos":[474,594],"source":" However, if the `separator` parameter in the call to this method overload is `null`, compiler overload resolution fails."},{"content":"To unambiguously identify the called method, your code must indicate the type of the null.","pos":[595,685]},{"content":"The following example shows several ways to unambiguously identify this overload.","pos":[686,767]}]},{"pos":[857,1104],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>System.String.Split#3<ept id=\"p2\">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Split/cs/split3.cs#3)</ept><ept id=\"p1\">]</ept> <bpt id=\"p3\">[!code-vb</bpt><bpt id=\"p4\">[</bpt>System.String.Split#3<ept id=\"p4\">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Split/vb/split3.vb#3)</ept><ept id=\"p3\">]</ept>","source":"[!code-csharp[System.String.Split#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Split/cs/split3.cs#3)]\n [!code-vb[System.String.Split#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Split/vb/split3.vb#3)]"},{"pos":[1111,1295],"content":"If the <ph id=\"ph1\">`count`</ph> parameter is zero, or the <ph id=\"ph2\">`options`</ph> parameter is <ph id=\"ph3\">&lt;xref:System.StringSplitOptions.RemoveEmptyEntries&gt;</ph> and the length of this instance is zero, an empty array is returned.","source":"If the `count` parameter is zero, or the `options` parameter is <xref:System.StringSplitOptions.RemoveEmptyEntries> and the length of this instance is zero, an empty array is returned."},{"pos":[1302,1605],"content":"Each element of `separator` defines a separate delimiter character. If the `options` parameter is <xref:System.StringSplitOptions.None>, and two delimiters are adjacent or a delimiter is found at the beginning or end of this instance, the corresponding array element contains <xref:System.String.Empty>.","nodes":[{"content":"Each element of <ph id=\"ph1\">`separator`</ph> defines a separate delimiter character.","pos":[0,67],"source":"Each element of `separator` defines a separate delimiter character."},{"content":"If the <ph id=\"ph1\">`options`</ph> parameter is <ph id=\"ph2\">&lt;xref:System.StringSplitOptions.None&gt;</ph>, and two delimiters are adjacent or a delimiter is found at the beginning or end of this instance, the corresponding array element contains <ph id=\"ph3\">&lt;xref:System.String.Empty&gt;</ph>.","pos":[68,303],"source":" If the `options` parameter is <xref:System.StringSplitOptions.None>, and two delimiters are adjacent or a delimiter is found at the beginning or end of this instance, the corresponding array element contains <xref:System.String.Empty>."}]},{"pos":[1612,1880],"content":"If there are more than <ph id=\"ph1\">`count`</ph> substrings in this instance, the first <ph id=\"ph2\">`count`</ph> minus 1 substrings are returned in the first <ph id=\"ph3\">`count`</ph> minus 1 elements of the return value, and the remaining characters in this instance are returned in the last element of the return value.","source":"If there are more than `count` substrings in this instance, the first `count` minus 1 substrings are returned in the first `count` minus 1 elements of the return value, and the remaining characters in this instance are returned in the last element of the return value."},{"pos":[1887,2005],"content":"If <ph id=\"ph1\">`count`</ph> is greater than the number of substrings, the available substrings are returned and no exception is thrown.","source":"If `count` is greater than the number of substrings, the available substrings are returned and no exception is thrown."},{"pos":[2014,2040],"content":"Performance Considerations","linkify":"Performance Considerations","nodes":[{"content":"Performance Considerations","pos":[0,26]}]},{"pos":[2044,2498],"content":"The<xref:System.String.Split%2A> methods allocate memory for the returned array object and a <xref:System.String> object for each array element. If your application requires optimal performance or if managing memory allocation is critical in your application, consider using the <xref:System.String.IndexOf%2A> or <xref:System.String.IndexOfAny%2A> method, and optionally the <xref:System.String.Compare%2A> method, to locate a substring within a string.","nodes":[{"content":"The<xref:System.String.Split%2A> methods allocate memory for the returned array object and a <xref:System.String> object for each array element. If your application requires optimal performance or if managing memory allocation is critical in your application, consider using the <xref:System.String.IndexOf%2A> or <xref:System.String.IndexOfAny%2A> method, and optionally the <xref:System.String.Compare%2A> method, to locate a substring within a string.","pos":[0,454],"nodes":[{"content":"The<ph id=\"ph1\">&lt;xref:System.String.Split%2A&gt;</ph> methods allocate memory for the returned array object and a <ph id=\"ph2\">&lt;xref:System.String&gt;</ph> object for each array element.","pos":[0,144],"source":"The<xref:System.String.Split%2A> methods allocate memory for the returned array object and a <xref:System.String> object for each array element."},{"content":"If your application requires optimal performance or if managing memory allocation is critical in your application, consider using the <ph id=\"ph1\">&lt;xref:System.String.IndexOf%2A&gt;</ph> or <ph id=\"ph2\">&lt;xref:System.String.IndexOfAny%2A&gt;</ph> method, and optionally the <ph id=\"ph3\">&lt;xref:System.String.Compare%2A&gt;</ph> method, to locate a substring within a string.","pos":[145,454],"source":" If your application requires optimal performance or if managing memory allocation is critical in your application, consider using the <xref:System.String.IndexOf%2A> or <xref:System.String.IndexOfAny%2A> method, and optionally the <xref:System.String.Compare%2A> method, to locate a substring within a string."}]}]},{"pos":[2505,3063],"content":"If you are splitting a string at a separator character, use the <xref:System.String.IndexOf%2A> or <xref:System.String.IndexOfAny%2A> method to locate a separator character in the string. If you are splitting a string at a separator string, use the <xref:System.String.IndexOf%2A> or <xref:System.String.IndexOfAny%2A> method to locate the first character of the separator string. Then use the <xref:System.String.Compare%2A> method to determine whether the characters after that first character are equal to the remaining characters of the separator string.","nodes":[{"content":"If you are splitting a string at a separator character, use the <xref:System.String.IndexOf%2A> or <xref:System.String.IndexOfAny%2A> method to locate a separator character in the string. If you are splitting a string at a separator string, use the <xref:System.String.IndexOf%2A> or <xref:System.String.IndexOfAny%2A> method to locate the first character of the separator string. Then use the <xref:System.String.Compare%2A> method to determine whether the characters after that first character are equal to the remaining characters of the separator string.","pos":[0,558],"nodes":[{"content":"If you are splitting a string at a separator character, use the <ph id=\"ph1\">&lt;xref:System.String.IndexOf%2A&gt;</ph> or <ph id=\"ph2\">&lt;xref:System.String.IndexOfAny%2A&gt;</ph> method to locate a separator character in the string.","pos":[0,187],"source":"If you are splitting a string at a separator character, use the <xref:System.String.IndexOf%2A> or <xref:System.String.IndexOfAny%2A> method to locate a separator character in the string."},{"content":"If you are splitting a string at a separator string, use the <ph id=\"ph1\">&lt;xref:System.String.IndexOf%2A&gt;</ph> or <ph id=\"ph2\">&lt;xref:System.String.IndexOfAny%2A&gt;</ph> method to locate the first character of the separator string.","pos":[188,380],"source":" If you are splitting a string at a separator string, use the <xref:System.String.IndexOf%2A> or <xref:System.String.IndexOfAny%2A> method to locate the first character of the separator string."},{"content":"Then use the <ph id=\"ph1\">&lt;xref:System.String.Compare%2A&gt;</ph> method to determine whether the characters after that first character are equal to the remaining characters of the separator string.","pos":[381,558],"source":" Then use the <xref:System.String.Compare%2A> method to determine whether the characters after that first character are equal to the remaining characters of the separator string."}]}]},{"pos":[3070,3338],"content":"In addition, if the same set of characters is used to split strings in multiple <xref:System.String.Split%2A> method calls, consider creating a single array and referencing it in each method call. This significantly reduces the additional overhead of each method call.","nodes":[{"content":"In addition, if the same set of characters is used to split strings in multiple <xref:System.String.Split%2A> method calls, consider creating a single array and referencing it in each method call. This significantly reduces the additional overhead of each method call.","pos":[0,268],"nodes":[{"content":"In addition, if the same set of characters is used to split strings in multiple <ph id=\"ph1\">&lt;xref:System.String.Split%2A&gt;</ph> method calls, consider creating a single array and referencing it in each method call.","pos":[0,196],"source":"In addition, if the same set of characters is used to split strings in multiple <xref:System.String.Split%2A> method calls, consider creating a single array and referencing it in each method call."},{"content":"This significantly reduces the additional overhead of each method call.","pos":[197,268]}]}]}],"pos":[556799,560160],"yaml":true,"extradata":"MT"},{"content":"A character array that delimits the substrings in this string, an empty array that contains no delimiters, or `null`.","nodes":[{"pos":[0,117],"content":"A character array that delimits the substrings in this string, an empty array that contains no delimiters, or <ph id=\"ph1\">`null`</ph>.","source":"A character array that delimits the substrings in this string, an empty array that contains no delimiters, or `null`."}],"pos":[560908,561026],"yaml":true},{"content":"The maximum number of substrings to return.","nodes":[{"pos":[0,43],"content":"The maximum number of substrings to return.","nodes":[{"content":"The maximum number of substrings to return.","pos":[0,43]}]}],"pos":[561086,561130],"yaml":true},{"content":"<xref href=\"System.StringSplitOptions.RemoveEmptyEntries\"></xref> to omit empty array elements from the array returned; or <xref href=\"System.StringSplitOptions.None\"></xref> to include empty array elements in the array returned.","nodes":[{"pos":[0,229],"content":"<ph id=\"ph1\">&lt;xref href=\"System.StringSplitOptions.RemoveEmptyEntries\"&gt;&lt;/xref&gt;</ph> to omit empty array elements from the array returned; or <ph id=\"ph2\">&lt;xref href=\"System.StringSplitOptions.None\"&gt;&lt;/xref&gt;</ph> to include empty array elements in the array returned.","source":"<xref href=\"System.StringSplitOptions.RemoveEmptyEntries\"></xref> to omit empty array elements from the array returned; or <xref href=\"System.StringSplitOptions.None\"></xref> to include empty array elements in the array returned."}],"pos":[561205,561435],"yaml":true},{"content":"An array whose elements contain the substrings in this string that are delimited by one or more characters in <code>separator</code>. For more information, see the Remarks section.","nodes":[{"pos":[0,180],"content":"An array whose elements contain the substrings in this string that are delimited by one or more characters in <code>separator</code>. For more information, see the Remarks section.","nodes":[{"content":"An array whose elements contain the substrings in this string that are delimited by one or more characters in <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">separator</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","pos":[0,133],"source":"An array whose elements contain the substrings in this string that are delimited by one or more characters in <code>separator</code>."},{"content":"For more information, see the Remarks section.","pos":[134,180]}]}],"pos":[561494,561675],"yaml":true},{"content":"<code>count</code> is negative.","nodes":[{"pos":[0,31],"content":"<ph id=\"ph1\">&lt;code&gt;count&lt;/code&gt;</ph> is negative.","source":"<code>count</code> is negative."}],"pos":[561836,561868],"yaml":true},{"content":"<code>options</code> is not one of the <xref href=\"System.StringSplitOptions\"></xref> values.","nodes":[{"pos":[0,93],"content":"<ph id=\"ph1\">&lt;code&gt;options&lt;/code&gt;</ph> is not one of the <ph id=\"ph2\">&lt;xref href=\"System.StringSplitOptions\"&gt;&lt;/xref&gt;</ph> values.","source":"<code>options</code> is not one of the <xref href=\"System.StringSplitOptions\"></xref> values."}],"pos":[561962,562056],"yaml":true},{"content":"Splits a string into substrings based on the strings in an array. You can specify whether the substrings include empty array elements.","nodes":[{"pos":[0,134],"content":"Splits a string into substrings based on the strings in an array. You can specify whether the substrings include empty array elements.","nodes":[{"content":"Splits a string into substrings based on the strings in an array. You can specify whether the substrings include empty array elements.","pos":[0,134],"nodes":[{"content":"Splits a string into substrings based on the strings in an array.","pos":[0,65]},{"content":"You can specify whether the substrings include empty array elements.","pos":[66,134]}]}]}],"pos":[564816,564951],"yaml":true},{"content":"When a string is delimited by a known set of strings, you can use the <xref:System.String.Split%2A> method to separate it into substrings.  \n  \n## Return value details  \n Delimiter strings are not included in the elements of the returned array. For example, if the `separator` array includes the string \"--\" and the value of the current string instance is \"aa--bb-cc\", the method returns an array that contains three elements: \"aa\", \"bb\", and \"cc\".  \n  \n If this instance does not contain any of the strings in `separator`, the returned array consists of a single element that contains this instance.  \n  \n If the `options` parameter is <xref:System.StringSplitOptions.RemoveEmptyEntries> and the length of this instance is zero, the method returns an empty array.  \n  \n Each element of `separator` defines a separate delimiter that consists of one or more characters. If the `options` argument is <xref:System.StringSplitOptions.None>, and two delimiters are adjacent or a delimiter is found at the beginning or end of this instance, the corresponding array element contains <xref:System.String?displayProperty=fullName>. For example, if `separator` includes  two elements, \"-\" and \"_\", the value of the string instance is \"-_aa-\\_\", and the value of   the `options` argument is <xref:System.StringSplitOptions.None>, the method returns a sting array with the following five elements:  \n  \n1.  <xref:System.String.Empty?displayProperty=fullName>, which represents the empty string that precedes the \"-\" substring at index 0.  \n  \n2.  <xref:System.String.Empty?displayProperty=fullName>, which represents the empty string between the \"-\" substring at index 0 and the \"_\" substring at index 1.  \n  \n3.  \"aa\",  \n  \n4.  <xref:System.String.Empty?displayProperty=fullName>, which represents the empty string that follows the \"_\" substring at index 4.  \n  \n5.  <xref:System.String.Empty?displayProperty=fullName>, which represents the empty string that follows the \"-\" substring at index 5.  \n  \n## The separator array  \n If any of the elements in `separator` consists of multiple characters, the entire substring is considered a delimiter. For example, if one of the elements in `separator` is \"10\", attempting to split the string \"This10is10a10string.\" returns the following four-element array: { \"This\", \"is\", \"a\", \"string.\" }.  \n  \n If the `separator` parameter is `null` or contains no characters, white-space characters are assumed to be the delimiters. White-space characters are defined by the Unicode standard and return `true` if they are passed to the <xref:System.Char.IsWhiteSpace%2A?displayProperty=fullName> method.  \n  \n If the `separator` parameter in the call to this method overload is `null`, compiler overload resolution fails. To unambiguously identify the called method, your code must indicate the type of the `null`. The following example shows several ways to unambiguously identify this overload.  \n  \n [!code-csharp[System.String.Split#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Split/cs/split3.cs#6)]\n [!code-vb[System.String.Split#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Split/vb/split3.vb#6)]  \n  \n## Comparison details  \n The <xref:System.String.Split%2A> method extracts the substrings in this string that are delimited by one or more of the strings in the `separator` parameter, and returns those substrings as elements of an array.  \n  \n The <xref:System.String.Split%2A> method looks for delimiters by performing comparisons using case-sensitive ordinal sort rules. For more information about word, string, and ordinal sorts, see the <xref:System.Globalization.CompareOptions?displayProperty=fullName> enumeration.  \n  \n The <xref:System.String.Split%2A> method ignores any element of `separator` whose value is `null` or the empty string (\"\").  \n  \n To avoid ambiguous results when strings in `separator` have characters in common, the <xref:System.String.Split%2A> operation proceeds from the beginning to the end of the value of the instance, and matches the first element in `separator` that is equal to a delimiter in the instance. The order in which substrings are encountered in the instance takes precedence over the order of elements in `separator`.  \n  \n For example, consider an instance whose value is \"abcdef\". If the first element in `separator` was \"ef\" and the second element was \"bcde\", the result of the split operation would be a string array that contains two elements, \"a\" and \"f\". This is because the substring in the instance, \"bcde\", is encountered and matches an element in `separator` before the substring \"f\" is encountered.  \n  \n However, if the first element of `separator` was \"bcd\" and the second element was \"bc\", the result of the split operation would be a string array that contains two elements, \"a\" and \"ef\". This is because \"bcd\" is the first delimiter in `separator` that matches a delimiter in the instance. If the order of the separators was reversed so the first element was \"bc\" and the second element was \"bcd\", the result would be a string array that contains two elements,  \"a\" and \"def\".  \n  \n## Performance considerations  \n The <xref:System.String.Split%2A> methods allocate memory for the returned array object and a <xref:System.String> object for each array element. If your application requires optimal performance or if managing memory allocation is critical in your application, consider using the <xref:System.String.IndexOf%2A> or <xref:System.String.IndexOfAny%2A> method, and optionally the <xref:System.String.Compare%2A> method, to locate a substring within a string.  \n  \n If you are splitting a string at a separator character, use the <xref:System.String.IndexOf%2A> or <xref:System.String.IndexOfAny%2A> method to locate a separator character in the string. If you are splitting a string at a separator string, use the <xref:System.String.IndexOf%2A> or <xref:System.String.IndexOfAny%2A> method to locate the first character of the separator string. Then use the <xref:System.String.Compare%2A> method to determine whether the characters after that first character are equal to the remaining characters of the separator string.  \n  \n In addition, if the same set of characters is used to split strings in multiple <xref:System.String.Split%2A> method calls, consider creating a single array and referencing it in each method call. This significantly reduces the additional overhead of each method call.","nodes":[{"pos":[0,138],"content":"When a string is delimited by a known set of strings, you can use the <xref:System.String.Split%2A> method to separate it into substrings.","nodes":[{"content":"When a string is delimited by a known set of strings, you can use the <ph id=\"ph1\">&lt;xref:System.String.Split%2A&gt;</ph> method to separate it into substrings.","pos":[0,138],"source":"When a string is delimited by a known set of strings, you can use the <xref:System.String.Split%2A> method to separate it into substrings."}]},{"pos":[147,167],"content":"Return value details","linkify":"Return value details","nodes":[{"content":"Return value details","pos":[0,20]}]},{"pos":[171,448],"content":"Delimiter strings are not included in the elements of the returned array. For example, if the `separator` array includes the string \"--\" and the value of the current string instance is \"aa--bb-cc\", the method returns an array that contains three elements: \"aa\", \"bb\", and \"cc\".","nodes":[{"content":"Delimiter strings are not included in the elements of the returned array.","pos":[0,73]},{"content":"For example, if the <ph id=\"ph1\">`separator`</ph> array includes the string \"--\" and the value of the current string instance is \"aa--bb-cc\", the method returns an array that contains three elements: \"aa\", \"bb\", and \"cc\".","pos":[74,277],"source":" For example, if the `separator` array includes the string \"--\" and the value of the current string instance is \"aa--bb-cc\", the method returns an array that contains three elements: \"aa\", \"bb\", and \"cc\"."}]},{"pos":[455,600],"content":"If this instance does not contain any of the strings in <ph id=\"ph1\">`separator`</ph>, the returned array consists of a single element that contains this instance.","source":"If this instance does not contain any of the strings in `separator`, the returned array consists of a single element that contains this instance."},{"pos":[607,764],"content":"If the <ph id=\"ph1\">`options`</ph> parameter is <ph id=\"ph2\">&lt;xref:System.StringSplitOptions.RemoveEmptyEntries&gt;</ph> and the length of this instance is zero, the method returns an empty array.","source":"If the `options` parameter is <xref:System.StringSplitOptions.RemoveEmptyEntries> and the length of this instance is zero, the method returns an empty array."},{"pos":[771,1385],"content":"Each element of `separator` defines a separate delimiter that consists of one or more characters. If the `options` argument is <xref:System.StringSplitOptions.None>, and two delimiters are adjacent or a delimiter is found at the beginning or end of this instance, the corresponding array element contains <xref:System.String?displayProperty=fullName>. For example, if `separator` includes  two elements, \"-\" and \"_\", the value of the string instance is \"-_aa-\\_\", and the value of   the `options` argument is <xref:System.StringSplitOptions.None>, the method returns a sting array with the following five elements:","nodes":[{"content":"Each element of <ph id=\"ph1\">`separator`</ph> defines a separate delimiter that consists of one or more characters.","pos":[0,97],"source":"Each element of `separator` defines a separate delimiter that consists of one or more characters."},{"content":"If the <ph id=\"ph1\">`options`</ph> argument is <ph id=\"ph2\">&lt;xref:System.StringSplitOptions.None&gt;</ph>, and two delimiters are adjacent or a delimiter is found at the beginning or end of this instance, the corresponding array element contains <ph id=\"ph3\">&lt;xref:System.String?displayProperty=fullName&gt;</ph>.","pos":[98,351],"source":" If the `options` argument is <xref:System.StringSplitOptions.None>, and two delimiters are adjacent or a delimiter is found at the beginning or end of this instance, the corresponding array element contains <xref:System.String?displayProperty=fullName>."},{"content":"For example, if <ph id=\"ph1\">`separator`</ph> includes  two elements, \"-\" and \"_\", the value of the string instance is \"-_aa-<ph id=\"ph2\">\\_</ph>\", and the value of   the <ph id=\"ph3\">`options`</ph> argument is <ph id=\"ph4\">&lt;xref:System.StringSplitOptions.None&gt;</ph>, the method returns a sting array with the following five elements:","pos":[352,614],"source":" For example, if `separator` includes  two elements, \"-\" and \"_\", the value of the string instance is \"-_aa-\\_\", and the value of   the `options` argument is <xref:System.StringSplitOptions.None>, the method returns a sting array with the following five elements:"}]},{"pos":[1395,1525],"content":"<xref:System.String.Empty?displayProperty=fullName>, which represents the empty string that precedes the \"-\" substring at index 0.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.String.Empty?displayProperty=fullName&gt;</ph>, which represents the empty string that precedes the \"-\" substring at index 0.","pos":[0,130],"source":"<xref:System.String.Empty?displayProperty=fullName>, which represents the empty string that precedes the \"-\" substring at index 0."}]},{"pos":[1535,1692],"content":"<xref:System.String.Empty?displayProperty=fullName>, which represents the empty string between the \"-\" substring at index 0 and the \"_\" substring at index 1.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.String.Empty?displayProperty=fullName&gt;</ph>, which represents the empty string between the \"-\" substring at index 0 and the \"_\" substring at index 1.","pos":[0,157],"source":"<xref:System.String.Empty?displayProperty=fullName>, which represents the empty string between the \"-\" substring at index 0 and the \"_\" substring at index 1."}]},{"pos":[1702,1707],"content":"\"aa\",","nodes":[{"content":"\"aa\",","pos":[0,5]}]},{"pos":[1717,1846],"content":"<xref:System.String.Empty?displayProperty=fullName>, which represents the empty string that follows the \"_\" substring at index 4.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.String.Empty?displayProperty=fullName&gt;</ph>, which represents the empty string that follows the \"_\" substring at index 4.","pos":[0,129],"source":"<xref:System.String.Empty?displayProperty=fullName>, which represents the empty string that follows the \"_\" substring at index 4."}]},{"pos":[1856,1985],"content":"<xref:System.String.Empty?displayProperty=fullName>, which represents the empty string that follows the \"-\" substring at index 5.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.String.Empty?displayProperty=fullName&gt;</ph>, which represents the empty string that follows the \"-\" substring at index 5.","pos":[0,129],"source":"<xref:System.String.Empty?displayProperty=fullName>, which represents the empty string that follows the \"-\" substring at index 5."}]},{"pos":[1994,2013],"content":"The separator array","linkify":"The separator array","nodes":[{"content":"The separator array","pos":[0,19]}]},{"pos":[2017,2325],"content":"If any of the elements in `separator` consists of multiple characters, the entire substring is considered a delimiter. For example, if one of the elements in `separator` is \"10\", attempting to split the string \"This10is10a10string.\" returns the following four-element array: { \"This\", \"is\", \"a\", \"string.\" }.","nodes":[{"content":"If any of the elements in <ph id=\"ph1\">`separator`</ph> consists of multiple characters, the entire substring is considered a delimiter.","pos":[0,118],"source":"If any of the elements in `separator` consists of multiple characters, the entire substring is considered a delimiter."},{"content":"For example, if one of the elements in <ph id=\"ph1\">`separator`</ph> is \"10\", attempting to split the string \"This10is10a10string.\"","pos":[119,232],"source":" For example, if one of the elements in `separator` is \"10\", attempting to split the string \"This10is10a10string.\""},{"content":"returns the following four-element array: { \"This\", \"is\", \"a\", \"string.\"","pos":[233,305]},{"content":"}.","pos":[306,308]}]},{"pos":[2332,2625],"content":"If the `separator` parameter is `null` or contains no characters, white-space characters are assumed to be the delimiters. White-space characters are defined by the Unicode standard and return `true` if they are passed to the <xref:System.Char.IsWhiteSpace%2A?displayProperty=fullName> method.","nodes":[{"content":"If the <ph id=\"ph1\">`separator`</ph> parameter is <ph id=\"ph2\">`null`</ph> or contains no characters, white-space characters are assumed to be the delimiters.","pos":[0,122],"source":"If the `separator` parameter is `null` or contains no characters, white-space characters are assumed to be the delimiters."},{"content":"White-space characters are defined by the Unicode standard and return <ph id=\"ph1\">`true`</ph> if they are passed to the <ph id=\"ph2\">&lt;xref:System.Char.IsWhiteSpace%2A?displayProperty=fullName&gt;</ph> method.","pos":[123,293],"source":" White-space characters are defined by the Unicode standard and return `true` if they are passed to the <xref:System.Char.IsWhiteSpace%2A?displayProperty=fullName> method."}]},{"pos":[2632,2918],"content":"If the `separator` parameter in the call to this method overload is `null`, compiler overload resolution fails. To unambiguously identify the called method, your code must indicate the type of the `null`. The following example shows several ways to unambiguously identify this overload.","nodes":[{"content":"If the <ph id=\"ph1\">`separator`</ph> parameter in the call to this method overload is <ph id=\"ph2\">`null`</ph>, compiler overload resolution fails.","pos":[0,111],"source":"If the `separator` parameter in the call to this method overload is `null`, compiler overload resolution fails."},{"content":"To unambiguously identify the called method, your code must indicate the type of the <ph id=\"ph1\">`null`</ph>.","pos":[112,204],"source":" To unambiguously identify the called method, your code must indicate the type of the `null`."},{"content":"The following example shows several ways to unambiguously identify this overload.","pos":[205,286]}]},{"pos":[2925,3172],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>System.String.Split#6<ept id=\"p2\">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Split/cs/split3.cs#6)</ept><ept id=\"p1\">]</ept> <bpt id=\"p3\">[!code-vb</bpt><bpt id=\"p4\">[</bpt>System.String.Split#6<ept id=\"p4\">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Split/vb/split3.vb#6)</ept><ept id=\"p3\">]</ept>","source":"[!code-csharp[System.String.Split#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Split/cs/split3.cs#6)]\n [!code-vb[System.String.Split#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Split/vb/split3.vb#6)]"},{"pos":[3181,3199],"content":"Comparison details","linkify":"Comparison details","nodes":[{"content":"Comparison details","pos":[0,18]}]},{"pos":[3203,3415],"content":"The <ph id=\"ph1\">&lt;xref:System.String.Split%2A&gt;</ph> method extracts the substrings in this string that are delimited by one or more of the strings in the <ph id=\"ph2\">`separator`</ph> parameter, and returns those substrings as elements of an array.","source":"The <xref:System.String.Split%2A> method extracts the substrings in this string that are delimited by one or more of the strings in the `separator` parameter, and returns those substrings as elements of an array."},{"pos":[3422,3699],"content":"The <xref:System.String.Split%2A> method looks for delimiters by performing comparisons using case-sensitive ordinal sort rules. For more information about word, string, and ordinal sorts, see the <xref:System.Globalization.CompareOptions?displayProperty=fullName> enumeration.","nodes":[{"content":"The <xref:System.String.Split%2A> method looks for delimiters by performing comparisons using case-sensitive ordinal sort rules. For more information about word, string, and ordinal sorts, see the <xref:System.Globalization.CompareOptions?displayProperty=fullName> enumeration.","pos":[0,277],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.String.Split%2A&gt;</ph> method looks for delimiters by performing comparisons using case-sensitive ordinal sort rules.","pos":[0,128],"source":"The <xref:System.String.Split%2A> method looks for delimiters by performing comparisons using case-sensitive ordinal sort rules."},{"content":"For more information about word, string, and ordinal sorts, see the <ph id=\"ph1\">&lt;xref:System.Globalization.CompareOptions?displayProperty=fullName&gt;</ph> enumeration.","pos":[129,277],"source":" For more information about word, string, and ordinal sorts, see the <xref:System.Globalization.CompareOptions?displayProperty=fullName> enumeration."}]}]},{"pos":[3706,3829],"content":"The <ph id=\"ph1\">&lt;xref:System.String.Split%2A&gt;</ph> method ignores any element of <ph id=\"ph2\">`separator`</ph> whose value is <ph id=\"ph3\">`null`</ph> or the empty string (\"\").","source":"The <xref:System.String.Split%2A> method ignores any element of `separator` whose value is `null` or the empty string (\"\")."},{"pos":[3836,4243],"content":"To avoid ambiguous results when strings in `separator` have characters in common, the <xref:System.String.Split%2A> operation proceeds from the beginning to the end of the value of the instance, and matches the first element in `separator` that is equal to a delimiter in the instance. The order in which substrings are encountered in the instance takes precedence over the order of elements in `separator`.","nodes":[{"content":"To avoid ambiguous results when strings in <ph id=\"ph1\">`separator`</ph> have characters in common, the <ph id=\"ph2\">&lt;xref:System.String.Split%2A&gt;</ph> operation proceeds from the beginning to the end of the value of the instance, and matches the first element in <ph id=\"ph3\">`separator`</ph> that is equal to a delimiter in the instance.","pos":[0,285],"source":"To avoid ambiguous results when strings in `separator` have characters in common, the <xref:System.String.Split%2A> operation proceeds from the beginning to the end of the value of the instance, and matches the first element in `separator` that is equal to a delimiter in the instance."},{"content":"The order in which substrings are encountered in the instance takes precedence over the order of elements in <ph id=\"ph1\">`separator`</ph>.","pos":[286,407],"source":" The order in which substrings are encountered in the instance takes precedence over the order of elements in `separator`."}]},{"pos":[4250,4636],"content":"For example, consider an instance whose value is \"abcdef\". If the first element in `separator` was \"ef\" and the second element was \"bcde\", the result of the split operation would be a string array that contains two elements, \"a\" and \"f\". This is because the substring in the instance, \"bcde\", is encountered and matches an element in `separator` before the substring \"f\" is encountered.","nodes":[{"content":"For example, consider an instance whose value is \"abcdef\".","pos":[0,58]},{"content":"If the first element in <ph id=\"ph1\">`separator`</ph> was \"ef\" and the second element was \"bcde\", the result of the split operation would be a string array that contains two elements, \"a\" and \"f\".","pos":[59,237],"source":" If the first element in `separator` was \"ef\" and the second element was \"bcde\", the result of the split operation would be a string array that contains two elements, \"a\" and \"f\"."},{"content":"This is because the substring in the instance, \"bcde\", is encountered and matches an element in <ph id=\"ph1\">`separator`</ph> before the substring \"f\" is encountered.","pos":[238,386],"source":" This is because the substring in the instance, \"bcde\", is encountered and matches an element in `separator` before the substring \"f\" is encountered."}]},{"pos":[4643,5119],"content":"However, if the first element of `separator` was \"bcd\" and the second element was \"bc\", the result of the split operation would be a string array that contains two elements, \"a\" and \"ef\". This is because \"bcd\" is the first delimiter in `separator` that matches a delimiter in the instance. If the order of the separators was reversed so the first element was \"bc\" and the second element was \"bcd\", the result would be a string array that contains two elements,  \"a\" and \"def\".","nodes":[{"content":"However, if the first element of <ph id=\"ph1\">`separator`</ph> was \"bcd\" and the second element was \"bc\", the result of the split operation would be a string array that contains two elements, \"a\" and \"ef\".","pos":[0,187],"source":"However, if the first element of `separator` was \"bcd\" and the second element was \"bc\", the result of the split operation would be a string array that contains two elements, \"a\" and \"ef\"."},{"content":"This is because \"bcd\" is the first delimiter in <ph id=\"ph1\">`separator`</ph> that matches a delimiter in the instance.","pos":[188,289],"source":" This is because \"bcd\" is the first delimiter in `separator` that matches a delimiter in the instance."},{"content":"If the order of the separators was reversed so the first element was \"bc\" and the second element was \"bcd\", the result would be a string array that contains two elements,  \"a\" and \"def\".","pos":[290,476]}]},{"pos":[5128,5154],"content":"Performance considerations","linkify":"Performance considerations","nodes":[{"content":"Performance considerations","pos":[0,26]}]},{"pos":[5158,5613],"content":"The <xref:System.String.Split%2A> methods allocate memory for the returned array object and a <xref:System.String> object for each array element. If your application requires optimal performance or if managing memory allocation is critical in your application, consider using the <xref:System.String.IndexOf%2A> or <xref:System.String.IndexOfAny%2A> method, and optionally the <xref:System.String.Compare%2A> method, to locate a substring within a string.","nodes":[{"content":"The <xref:System.String.Split%2A> methods allocate memory for the returned array object and a <xref:System.String> object for each array element. If your application requires optimal performance or if managing memory allocation is critical in your application, consider using the <xref:System.String.IndexOf%2A> or <xref:System.String.IndexOfAny%2A> method, and optionally the <xref:System.String.Compare%2A> method, to locate a substring within a string.","pos":[0,455],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.String.Split%2A&gt;</ph> methods allocate memory for the returned array object and a <ph id=\"ph2\">&lt;xref:System.String&gt;</ph> object for each array element.","pos":[0,145],"source":"The <xref:System.String.Split%2A> methods allocate memory for the returned array object and a <xref:System.String> object for each array element."},{"content":"If your application requires optimal performance or if managing memory allocation is critical in your application, consider using the <ph id=\"ph1\">&lt;xref:System.String.IndexOf%2A&gt;</ph> or <ph id=\"ph2\">&lt;xref:System.String.IndexOfAny%2A&gt;</ph> method, and optionally the <ph id=\"ph3\">&lt;xref:System.String.Compare%2A&gt;</ph> method, to locate a substring within a string.","pos":[146,455],"source":" If your application requires optimal performance or if managing memory allocation is critical in your application, consider using the <xref:System.String.IndexOf%2A> or <xref:System.String.IndexOfAny%2A> method, and optionally the <xref:System.String.Compare%2A> method, to locate a substring within a string."}]}]},{"pos":[5620,6178],"content":"If you are splitting a string at a separator character, use the <xref:System.String.IndexOf%2A> or <xref:System.String.IndexOfAny%2A> method to locate a separator character in the string. If you are splitting a string at a separator string, use the <xref:System.String.IndexOf%2A> or <xref:System.String.IndexOfAny%2A> method to locate the first character of the separator string. Then use the <xref:System.String.Compare%2A> method to determine whether the characters after that first character are equal to the remaining characters of the separator string.","nodes":[{"content":"If you are splitting a string at a separator character, use the <xref:System.String.IndexOf%2A> or <xref:System.String.IndexOfAny%2A> method to locate a separator character in the string. If you are splitting a string at a separator string, use the <xref:System.String.IndexOf%2A> or <xref:System.String.IndexOfAny%2A> method to locate the first character of the separator string. Then use the <xref:System.String.Compare%2A> method to determine whether the characters after that first character are equal to the remaining characters of the separator string.","pos":[0,558],"nodes":[{"content":"If you are splitting a string at a separator character, use the <ph id=\"ph1\">&lt;xref:System.String.IndexOf%2A&gt;</ph> or <ph id=\"ph2\">&lt;xref:System.String.IndexOfAny%2A&gt;</ph> method to locate a separator character in the string.","pos":[0,187],"source":"If you are splitting a string at a separator character, use the <xref:System.String.IndexOf%2A> or <xref:System.String.IndexOfAny%2A> method to locate a separator character in the string."},{"content":"If you are splitting a string at a separator string, use the <ph id=\"ph1\">&lt;xref:System.String.IndexOf%2A&gt;</ph> or <ph id=\"ph2\">&lt;xref:System.String.IndexOfAny%2A&gt;</ph> method to locate the first character of the separator string.","pos":[188,380],"source":" If you are splitting a string at a separator string, use the <xref:System.String.IndexOf%2A> or <xref:System.String.IndexOfAny%2A> method to locate the first character of the separator string."},{"content":"Then use the <ph id=\"ph1\">&lt;xref:System.String.Compare%2A&gt;</ph> method to determine whether the characters after that first character are equal to the remaining characters of the separator string.","pos":[381,558],"source":" Then use the <xref:System.String.Compare%2A> method to determine whether the characters after that first character are equal to the remaining characters of the separator string."}]}]},{"pos":[6185,6453],"content":"In addition, if the same set of characters is used to split strings in multiple <xref:System.String.Split%2A> method calls, consider creating a single array and referencing it in each method call. This significantly reduces the additional overhead of each method call.","nodes":[{"content":"In addition, if the same set of characters is used to split strings in multiple <xref:System.String.Split%2A> method calls, consider creating a single array and referencing it in each method call. This significantly reduces the additional overhead of each method call.","pos":[0,268],"nodes":[{"content":"In addition, if the same set of characters is used to split strings in multiple <ph id=\"ph1\">&lt;xref:System.String.Split%2A&gt;</ph> method calls, consider creating a single array and referencing it in each method call.","pos":[0,196],"source":"In addition, if the same set of characters is used to split strings in multiple <xref:System.String.Split%2A> method calls, consider creating a single array and referencing it in each method call."},{"content":"This significantly reduces the additional overhead of each method call.","pos":[197,268]}]}]}],"pos":[564962,571542],"yaml":true,"extradata":"MT"},{"content":"A string array that delimits the substrings in this string, an empty array that contains no delimiters, or `null`.","nodes":[{"pos":[0,114],"content":"A string array that delimits the substrings in this string, an empty array that contains no delimiters, or <ph id=\"ph1\">`null`</ph>.","source":"A string array that delimits the substrings in this string, an empty array that contains no delimiters, or `null`."}],"pos":[573392,573507],"yaml":true},{"content":"<xref href=\"System.StringSplitOptions.RemoveEmptyEntries\"></xref> to omit empty array elements from the array returned; or <xref href=\"System.StringSplitOptions.None\"></xref> to include empty array elements in the array returned.","nodes":[{"pos":[0,229],"content":"<ph id=\"ph1\">&lt;xref href=\"System.StringSplitOptions.RemoveEmptyEntries\"&gt;&lt;/xref&gt;</ph> to omit empty array elements from the array returned; or <ph id=\"ph2\">&lt;xref href=\"System.StringSplitOptions.None\"&gt;&lt;/xref&gt;</ph> to include empty array elements in the array returned.","source":"<xref href=\"System.StringSplitOptions.RemoveEmptyEntries\"></xref> to omit empty array elements from the array returned; or <xref href=\"System.StringSplitOptions.None\"></xref> to include empty array elements in the array returned."}],"pos":[573582,573812],"yaml":true},{"content":"An array whose elements contain the substrings in this string that are delimited by one or more strings in <code>separator</code>. For more information, see the Remarks section.","nodes":[{"pos":[0,177],"content":"An array whose elements contain the substrings in this string that are delimited by one or more strings in <code>separator</code>. For more information, see the Remarks section.","nodes":[{"content":"An array whose elements contain the substrings in this string that are delimited by one or more strings in <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">separator</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","pos":[0,130],"source":"An array whose elements contain the substrings in this string that are delimited by one or more strings in <code>separator</code>."},{"content":"For more information, see the Remarks section.","pos":[131,177]}]}],"pos":[573871,574049],"yaml":true},{"content":"<code>options</code> is not one of the <xref href=\"System.StringSplitOptions\"></xref> values.","nodes":[{"pos":[0,93],"content":"<ph id=\"ph1\">&lt;code&gt;options&lt;/code&gt;</ph> is not one of the <ph id=\"ph2\">&lt;xref href=\"System.StringSplitOptions\"&gt;&lt;/xref&gt;</ph> values.","source":"<code>options</code> is not one of the <xref href=\"System.StringSplitOptions\"></xref> values."}],"pos":[574190,574284],"yaml":true},{"content":"Splits a string into substrings based on the characters in an array. You can specify whether the substrings include empty array elements.","nodes":[{"pos":[0,137],"content":"Splits a string into substrings based on the characters in an array. You can specify whether the substrings include empty array elements.","nodes":[{"content":"Splits a string into substrings based on the characters in an array. You can specify whether the substrings include empty array elements.","pos":[0,137],"nodes":[{"content":"Splits a string into substrings based on the characters in an array.","pos":[0,68]},{"content":"You can specify whether the substrings include empty array elements.","pos":[69,137]}]}]}],"pos":[576898,577036],"yaml":true},{"content":"## Return value details  \n Delimiter characters (the characters in the `separator` array) are not included in the elements of the returned array. For example, if the `separator` array includes the character \"-\" and the value of the current string instance is \"aa-bb-cc\", the method returns an array that contains three elements: \"aa\", \"bb\", and \"cc\".  \n  \n If this instance does not contain any of the characters in `separator`, the returned array consists of a single element that contains this instance.  \n  \n If the `options` parameter is <xref:System.StringSplitOptions.RemoveEmptyEntries> and the length of this instance is zero, the method returns an empty array.  \n  \n Each element of `separator` defines a separate delimiter that consists of a single character. If the `options` argument is <xref:System.StringSplitOptions.None>, and two delimiters are adjacent or a delimiter is found at the beginning or end of this instance, the corresponding array element contains <xref:System.String?displayProperty=fullName>. For example, if `separator` includes  two elements, \"-\" and \"_\", the value of the string instance is \"-_aa-\\_\", and the value of   the `options` argument is <xref:System.StringSplitOptions.None>, the method returns a string array with the following five elements:  \n  \n1.  <xref:System.String.Empty?displayProperty=fullName>, which represents the empty string that precedes the \"-\" character at index 0.  \n  \n2.  <xref:System.String.Empty?displayProperty=fullName>, which represents the empty string between the \"-\" character at index 0 and the \"_\" character at index 1.  \n  \n3.  \"aa\",  \n  \n4.  <xref:System.String.Empty?displayProperty=fullName>, which represents the empty string that follows the \"_\" character at index 4.  \n  \n5.  <xref:System.String.Empty?displayProperty=fullName>, which represents the empty string that follows the \"-\" character at index 5.  \n  \n## The separator array  \n If the `separator` parameter is `null` or contains no characters, white-space characters are assumed to be the delimiters. White-space characters are defined by the Unicode standard and return `true` if they are passed to the <xref:System.Char.IsWhiteSpace%2A?displayProperty=fullName> method.  \n  \n If the `separator` parameter in the call to this method overload is `null`, compiler overload resolution fails. To unambiguously identify the called method, your code must indicate the type of the `null`. The following example shows several ways to unambiguously identify this overload.  \n  \n [!code-csharp[System.String.Split#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Split/cs/split3.cs#5)]\n [!code-vb[System.String.Split#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Split/vb/split3.vb#5)]  \n  \n## Comparison details  \n The <xref:System.String.Split%2A> method extracts the substrings in this string that are delimited by one or more of the characters in the `separator` parameter, and returns those substrings as elements of an array.  \n  \n The <xref:System.String.Split%2A> method looks for delimiters by performing comparisons using case-sensitive ordinal sort rules. For more information about word, string, and ordinal sorts, see the <xref:System.Globalization.CompareOptions?displayProperty=fullName> enumeration.  \n  \n## Performance Considerations  \n The<xref:System.String.Split%2A> methods allocate memory for the returned array object and a <xref:System.String> object for each array element. If your application requires optimal performance or if managing memory allocation is critical in your application, consider using the <xref:System.String.IndexOf%2A> or <xref:System.String.IndexOfAny%2A> method, and optionally the <xref:System.String.Compare%2A> method, to locate a substring within a string.  \n  \n If you are splitting a string at a separator character, use the <xref:System.String.IndexOf%2A> or <xref:System.String.IndexOfAny%2A> method to locate a separator character in the string. If you are splitting a string at a separator string, use the <xref:System.String.IndexOf%2A> or <xref:System.String.IndexOfAny%2A> method to locate the first character of the separator string. Then use the <xref:System.String.Compare%2A> method to determine whether the characters after that first character are equal to the remaining characters of the separator string.  \n  \n In addition, if the same set of characters is used to split strings in multiple <xref:System.String.Split%2A> method calls, consider creating a single array and referencing it in each method call. This significantly reduces the additional overhead of each method call.","nodes":[{"pos":[3,23],"content":"Return value details","linkify":"Return value details","nodes":[{"content":"Return value details","pos":[0,20]}]},{"pos":[27,350],"content":"Delimiter characters (the characters in the `separator` array) are not included in the elements of the returned array. For example, if the `separator` array includes the character \"-\" and the value of the current string instance is \"aa-bb-cc\", the method returns an array that contains three elements: \"aa\", \"bb\", and \"cc\".","nodes":[{"content":"Delimiter characters (the characters in the <ph id=\"ph1\">`separator`</ph> array) are not included in the elements of the returned array.","pos":[0,118],"source":"Delimiter characters (the characters in the `separator` array) are not included in the elements of the returned array."},{"content":"For example, if the <ph id=\"ph1\">`separator`</ph> array includes the character \"-\" and the value of the current string instance is \"aa-bb-cc\", the method returns an array that contains three elements: \"aa\", \"bb\", and \"cc\".","pos":[119,323],"source":" For example, if the `separator` array includes the character \"-\" and the value of the current string instance is \"aa-bb-cc\", the method returns an array that contains three elements: \"aa\", \"bb\", and \"cc\"."}]},{"pos":[357,505],"content":"If this instance does not contain any of the characters in <ph id=\"ph1\">`separator`</ph>, the returned array consists of a single element that contains this instance.","source":"If this instance does not contain any of the characters in `separator`, the returned array consists of a single element that contains this instance."},{"pos":[512,669],"content":"If the <ph id=\"ph1\">`options`</ph> parameter is <ph id=\"ph2\">&lt;xref:System.StringSplitOptions.RemoveEmptyEntries&gt;</ph> and the length of this instance is zero, the method returns an empty array.","source":"If the `options` parameter is <xref:System.StringSplitOptions.RemoveEmptyEntries> and the length of this instance is zero, the method returns an empty array."},{"pos":[676,1287],"content":"Each element of `separator` defines a separate delimiter that consists of a single character. If the `options` argument is <xref:System.StringSplitOptions.None>, and two delimiters are adjacent or a delimiter is found at the beginning or end of this instance, the corresponding array element contains <xref:System.String?displayProperty=fullName>. For example, if `separator` includes  two elements, \"-\" and \"_\", the value of the string instance is \"-_aa-\\_\", and the value of   the `options` argument is <xref:System.StringSplitOptions.None>, the method returns a string array with the following five elements:","nodes":[{"content":"Each element of <ph id=\"ph1\">`separator`</ph> defines a separate delimiter that consists of a single character.","pos":[0,93],"source":"Each element of `separator` defines a separate delimiter that consists of a single character."},{"content":"If the <ph id=\"ph1\">`options`</ph> argument is <ph id=\"ph2\">&lt;xref:System.StringSplitOptions.None&gt;</ph>, and two delimiters are adjacent or a delimiter is found at the beginning or end of this instance, the corresponding array element contains <ph id=\"ph3\">&lt;xref:System.String?displayProperty=fullName&gt;</ph>.","pos":[94,347],"source":" If the `options` argument is <xref:System.StringSplitOptions.None>, and two delimiters are adjacent or a delimiter is found at the beginning or end of this instance, the corresponding array element contains <xref:System.String?displayProperty=fullName>."},{"content":"For example, if <ph id=\"ph1\">`separator`</ph> includes  two elements, \"-\" and \"_\", the value of the string instance is \"-_aa-<ph id=\"ph2\">\\_</ph>\", and the value of   the <ph id=\"ph3\">`options`</ph> argument is <ph id=\"ph4\">&lt;xref:System.StringSplitOptions.None&gt;</ph>, the method returns a string array with the following five elements:","pos":[348,611],"source":" For example, if `separator` includes  two elements, \"-\" and \"_\", the value of the string instance is \"-_aa-\\_\", and the value of   the `options` argument is <xref:System.StringSplitOptions.None>, the method returns a string array with the following five elements:"}]},{"pos":[1297,1427],"content":"<xref:System.String.Empty?displayProperty=fullName>, which represents the empty string that precedes the \"-\" character at index 0.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.String.Empty?displayProperty=fullName&gt;</ph>, which represents the empty string that precedes the \"-\" character at index 0.","pos":[0,130],"source":"<xref:System.String.Empty?displayProperty=fullName>, which represents the empty string that precedes the \"-\" character at index 0."}]},{"pos":[1437,1594],"content":"<xref:System.String.Empty?displayProperty=fullName>, which represents the empty string between the \"-\" character at index 0 and the \"_\" character at index 1.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.String.Empty?displayProperty=fullName&gt;</ph>, which represents the empty string between the \"-\" character at index 0 and the \"_\" character at index 1.","pos":[0,157],"source":"<xref:System.String.Empty?displayProperty=fullName>, which represents the empty string between the \"-\" character at index 0 and the \"_\" character at index 1."}]},{"pos":[1604,1609],"content":"\"aa\",","nodes":[{"content":"\"aa\",","pos":[0,5]}]},{"pos":[1619,1748],"content":"<xref:System.String.Empty?displayProperty=fullName>, which represents the empty string that follows the \"_\" character at index 4.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.String.Empty?displayProperty=fullName&gt;</ph>, which represents the empty string that follows the \"_\" character at index 4.","pos":[0,129],"source":"<xref:System.String.Empty?displayProperty=fullName>, which represents the empty string that follows the \"_\" character at index 4."}]},{"pos":[1758,1887],"content":"<xref:System.String.Empty?displayProperty=fullName>, which represents the empty string that follows the \"-\" character at index 5.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.String.Empty?displayProperty=fullName&gt;</ph>, which represents the empty string that follows the \"-\" character at index 5.","pos":[0,129],"source":"<xref:System.String.Empty?displayProperty=fullName>, which represents the empty string that follows the \"-\" character at index 5."}]},{"pos":[1896,1915],"content":"The separator array","linkify":"The separator array","nodes":[{"content":"The separator array","pos":[0,19]}]},{"pos":[1919,2212],"content":"If the `separator` parameter is `null` or contains no characters, white-space characters are assumed to be the delimiters. White-space characters are defined by the Unicode standard and return `true` if they are passed to the <xref:System.Char.IsWhiteSpace%2A?displayProperty=fullName> method.","nodes":[{"content":"If the <ph id=\"ph1\">`separator`</ph> parameter is <ph id=\"ph2\">`null`</ph> or contains no characters, white-space characters are assumed to be the delimiters.","pos":[0,122],"source":"If the `separator` parameter is `null` or contains no characters, white-space characters are assumed to be the delimiters."},{"content":"White-space characters are defined by the Unicode standard and return <ph id=\"ph1\">`true`</ph> if they are passed to the <ph id=\"ph2\">&lt;xref:System.Char.IsWhiteSpace%2A?displayProperty=fullName&gt;</ph> method.","pos":[123,293],"source":" White-space characters are defined by the Unicode standard and return `true` if they are passed to the <xref:System.Char.IsWhiteSpace%2A?displayProperty=fullName> method."}]},{"pos":[2219,2505],"content":"If the `separator` parameter in the call to this method overload is `null`, compiler overload resolution fails. To unambiguously identify the called method, your code must indicate the type of the `null`. The following example shows several ways to unambiguously identify this overload.","nodes":[{"content":"If the <ph id=\"ph1\">`separator`</ph> parameter in the call to this method overload is <ph id=\"ph2\">`null`</ph>, compiler overload resolution fails.","pos":[0,111],"source":"If the `separator` parameter in the call to this method overload is `null`, compiler overload resolution fails."},{"content":"To unambiguously identify the called method, your code must indicate the type of the <ph id=\"ph1\">`null`</ph>.","pos":[112,204],"source":" To unambiguously identify the called method, your code must indicate the type of the `null`."},{"content":"The following example shows several ways to unambiguously identify this overload.","pos":[205,286]}]},{"pos":[2512,2759],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>System.String.Split#5<ept id=\"p2\">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Split/cs/split3.cs#5)</ept><ept id=\"p1\">]</ept> <bpt id=\"p3\">[!code-vb</bpt><bpt id=\"p4\">[</bpt>System.String.Split#5<ept id=\"p4\">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Split/vb/split3.vb#5)</ept><ept id=\"p3\">]</ept>","source":"[!code-csharp[System.String.Split#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Split/cs/split3.cs#5)]\n [!code-vb[System.String.Split#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Split/vb/split3.vb#5)]"},{"pos":[2768,2786],"content":"Comparison details","linkify":"Comparison details","nodes":[{"content":"Comparison details","pos":[0,18]}]},{"pos":[2790,3005],"content":"The <ph id=\"ph1\">&lt;xref:System.String.Split%2A&gt;</ph> method extracts the substrings in this string that are delimited by one or more of the characters in the <ph id=\"ph2\">`separator`</ph> parameter, and returns those substrings as elements of an array.","source":"The <xref:System.String.Split%2A> method extracts the substrings in this string that are delimited by one or more of the characters in the `separator` parameter, and returns those substrings as elements of an array."},{"pos":[3012,3289],"content":"The <xref:System.String.Split%2A> method looks for delimiters by performing comparisons using case-sensitive ordinal sort rules. For more information about word, string, and ordinal sorts, see the <xref:System.Globalization.CompareOptions?displayProperty=fullName> enumeration.","nodes":[{"content":"The <xref:System.String.Split%2A> method looks for delimiters by performing comparisons using case-sensitive ordinal sort rules. For more information about word, string, and ordinal sorts, see the <xref:System.Globalization.CompareOptions?displayProperty=fullName> enumeration.","pos":[0,277],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.String.Split%2A&gt;</ph> method looks for delimiters by performing comparisons using case-sensitive ordinal sort rules.","pos":[0,128],"source":"The <xref:System.String.Split%2A> method looks for delimiters by performing comparisons using case-sensitive ordinal sort rules."},{"content":"For more information about word, string, and ordinal sorts, see the <ph id=\"ph1\">&lt;xref:System.Globalization.CompareOptions?displayProperty=fullName&gt;</ph> enumeration.","pos":[129,277],"source":" For more information about word, string, and ordinal sorts, see the <xref:System.Globalization.CompareOptions?displayProperty=fullName> enumeration."}]}]},{"pos":[3298,3324],"content":"Performance Considerations","linkify":"Performance Considerations","nodes":[{"content":"Performance Considerations","pos":[0,26]}]},{"pos":[3328,3782],"content":"The<xref:System.String.Split%2A> methods allocate memory for the returned array object and a <xref:System.String> object for each array element. If your application requires optimal performance or if managing memory allocation is critical in your application, consider using the <xref:System.String.IndexOf%2A> or <xref:System.String.IndexOfAny%2A> method, and optionally the <xref:System.String.Compare%2A> method, to locate a substring within a string.","nodes":[{"content":"The<xref:System.String.Split%2A> methods allocate memory for the returned array object and a <xref:System.String> object for each array element. If your application requires optimal performance or if managing memory allocation is critical in your application, consider using the <xref:System.String.IndexOf%2A> or <xref:System.String.IndexOfAny%2A> method, and optionally the <xref:System.String.Compare%2A> method, to locate a substring within a string.","pos":[0,454],"nodes":[{"content":"The<ph id=\"ph1\">&lt;xref:System.String.Split%2A&gt;</ph> methods allocate memory for the returned array object and a <ph id=\"ph2\">&lt;xref:System.String&gt;</ph> object for each array element.","pos":[0,144],"source":"The<xref:System.String.Split%2A> methods allocate memory for the returned array object and a <xref:System.String> object for each array element."},{"content":"If your application requires optimal performance or if managing memory allocation is critical in your application, consider using the <ph id=\"ph1\">&lt;xref:System.String.IndexOf%2A&gt;</ph> or <ph id=\"ph2\">&lt;xref:System.String.IndexOfAny%2A&gt;</ph> method, and optionally the <ph id=\"ph3\">&lt;xref:System.String.Compare%2A&gt;</ph> method, to locate a substring within a string.","pos":[145,454],"source":" If your application requires optimal performance or if managing memory allocation is critical in your application, consider using the <xref:System.String.IndexOf%2A> or <xref:System.String.IndexOfAny%2A> method, and optionally the <xref:System.String.Compare%2A> method, to locate a substring within a string."}]}]},{"pos":[3789,4347],"content":"If you are splitting a string at a separator character, use the <xref:System.String.IndexOf%2A> or <xref:System.String.IndexOfAny%2A> method to locate a separator character in the string. If you are splitting a string at a separator string, use the <xref:System.String.IndexOf%2A> or <xref:System.String.IndexOfAny%2A> method to locate the first character of the separator string. Then use the <xref:System.String.Compare%2A> method to determine whether the characters after that first character are equal to the remaining characters of the separator string.","nodes":[{"content":"If you are splitting a string at a separator character, use the <xref:System.String.IndexOf%2A> or <xref:System.String.IndexOfAny%2A> method to locate a separator character in the string. If you are splitting a string at a separator string, use the <xref:System.String.IndexOf%2A> or <xref:System.String.IndexOfAny%2A> method to locate the first character of the separator string. Then use the <xref:System.String.Compare%2A> method to determine whether the characters after that first character are equal to the remaining characters of the separator string.","pos":[0,558],"nodes":[{"content":"If you are splitting a string at a separator character, use the <ph id=\"ph1\">&lt;xref:System.String.IndexOf%2A&gt;</ph> or <ph id=\"ph2\">&lt;xref:System.String.IndexOfAny%2A&gt;</ph> method to locate a separator character in the string.","pos":[0,187],"source":"If you are splitting a string at a separator character, use the <xref:System.String.IndexOf%2A> or <xref:System.String.IndexOfAny%2A> method to locate a separator character in the string."},{"content":"If you are splitting a string at a separator string, use the <ph id=\"ph1\">&lt;xref:System.String.IndexOf%2A&gt;</ph> or <ph id=\"ph2\">&lt;xref:System.String.IndexOfAny%2A&gt;</ph> method to locate the first character of the separator string.","pos":[188,380],"source":" If you are splitting a string at a separator string, use the <xref:System.String.IndexOf%2A> or <xref:System.String.IndexOfAny%2A> method to locate the first character of the separator string."},{"content":"Then use the <ph id=\"ph1\">&lt;xref:System.String.Compare%2A&gt;</ph> method to determine whether the characters after that first character are equal to the remaining characters of the separator string.","pos":[381,558],"source":" Then use the <xref:System.String.Compare%2A> method to determine whether the characters after that first character are equal to the remaining characters of the separator string."}]}]},{"pos":[4354,4622],"content":"In addition, if the same set of characters is used to split strings in multiple <xref:System.String.Split%2A> method calls, consider creating a single array and referencing it in each method call. This significantly reduces the additional overhead of each method call.","nodes":[{"content":"In addition, if the same set of characters is used to split strings in multiple <xref:System.String.Split%2A> method calls, consider creating a single array and referencing it in each method call. This significantly reduces the additional overhead of each method call.","pos":[0,268],"nodes":[{"content":"In addition, if the same set of characters is used to split strings in multiple <ph id=\"ph1\">&lt;xref:System.String.Split%2A&gt;</ph> method calls, consider creating a single array and referencing it in each method call.","pos":[0,196],"source":"In addition, if the same set of characters is used to split strings in multiple <xref:System.String.Split%2A> method calls, consider creating a single array and referencing it in each method call."},{"content":"This significantly reduces the additional overhead of each method call.","pos":[197,268]}]}]}],"pos":[577047,581738],"yaml":true,"extradata":"MT"},{"content":"A character array that delimits the substrings in this string, an empty array that contains no delimiters, or `null`.","nodes":[{"pos":[0,117],"content":"A character array that delimits the substrings in this string, an empty array that contains no delimiters, or <ph id=\"ph1\">`null`</ph>.","source":"A character array that delimits the substrings in this string, an empty array that contains no delimiters, or `null`."}],"pos":[582475,582593],"yaml":true},{"content":"<xref href=\"System.StringSplitOptions.RemoveEmptyEntries\"></xref> to omit empty array elements from the array returned; or <xref href=\"System.StringSplitOptions.None\"></xref> to include empty array elements in the array returned.","nodes":[{"pos":[0,229],"content":"<ph id=\"ph1\">&lt;xref href=\"System.StringSplitOptions.RemoveEmptyEntries\"&gt;&lt;/xref&gt;</ph> to omit empty array elements from the array returned; or <ph id=\"ph2\">&lt;xref href=\"System.StringSplitOptions.None\"&gt;&lt;/xref&gt;</ph> to include empty array elements in the array returned.","source":"<xref href=\"System.StringSplitOptions.RemoveEmptyEntries\"></xref> to omit empty array elements from the array returned; or <xref href=\"System.StringSplitOptions.None\"></xref> to include empty array elements in the array returned."}],"pos":[582668,582898],"yaml":true},{"content":"An array whose elements contain the substrings in this string that are delimited by one or more characters in <code>separator</code>. For more information, see the Remarks section.","nodes":[{"pos":[0,180],"content":"An array whose elements contain the substrings in this string that are delimited by one or more characters in <code>separator</code>. For more information, see the Remarks section.","nodes":[{"content":"An array whose elements contain the substrings in this string that are delimited by one or more characters in <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">separator</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","pos":[0,133],"source":"An array whose elements contain the substrings in this string that are delimited by one or more characters in <code>separator</code>."},{"content":"For more information, see the Remarks section.","pos":[134,180]}]}],"pos":[582957,583138],"yaml":true},{"content":"<code>options</code> is not one of the <xref href=\"System.StringSplitOptions\"></xref> values.","nodes":[{"pos":[0,93],"content":"<ph id=\"ph1\">&lt;code&gt;options&lt;/code&gt;</ph> is not one of the <ph id=\"ph2\">&lt;xref href=\"System.StringSplitOptions\"&gt;&lt;/xref&gt;</ph> values.","source":"<code>options</code> is not one of the <xref href=\"System.StringSplitOptions\"></xref> values."}],"pos":[583279,583373],"yaml":true},{"content":"Splits a string into a maximum number of substrings based on the characters in an array. You also specify the maximum number of substrings to return.","nodes":[{"pos":[0,149],"content":"Splits a string into a maximum number of substrings based on the characters in an array. You also specify the maximum number of substrings to return.","nodes":[{"content":"Splits a string into a maximum number of substrings based on the characters in an array. You also specify the maximum number of substrings to return.","pos":[0,149],"nodes":[{"content":"Splits a string into a maximum number of substrings based on the characters in an array.","pos":[0,88]},{"content":"You also specify the maximum number of substrings to return.","pos":[89,149]}]}]}],"pos":[584925,585075],"yaml":true},{"content":"Delimiter characters are not included in the elements of the returned array.  \n  \n If this instance does not contain any of the characters in `separator`, the returned array consists of a single element that contains this instance. If `count` is zero, an empty array is returned.  \n  \n If the `separator` parameter is `null` or contains no characters, white-space characters are assumed to be the delimiters. White-space characters are defined by the Unicode standard and return `true` if they are passed to the <xref:System.Char.IsWhiteSpace%2A?displayProperty=fullName> method.  \n  \n Each element of `separator` defines a separate delimiter character. If two delimiters are adjacent, or a delimiter is found at the beginning or end of this instance, the corresponding array element contains <xref:System.String.Empty>.  \n  \n If there are more than `count` substrings in this instance, the first `count` minus 1 substrings are returned in the first `count` minus 1 elements of the return value, and the remaining characters in this instance are returned in the last element of the return value.  \n  \n If `count` is greater than the number of substrings, the available substrings are returned and no exception is thrown.  \n  \n The following table provides examples.  \n  \n|String value|Separator|Count|Returned array|  \n|------------------|---------------|-----------|--------------------|  \n|\"42, 12, 19\"|new Char[] {',', ' '} (C#)<br /><br /> Char() = {\",\"c, \" \"c} (Visual Basic)|2|{\"42\", \" 12, 19\"}|  \n|\"42..12..19\"|new Char[] {'.'} (C#)<br /><br /> Char() = {\".\"c} (Visual Basic)|4|{\"42\", \"\", \"12\", \".19\"}|  \n|\"Banana\"|new Char[] {'.'} (C#)<br /><br /> Char() = {\".\"c} (Visual Basic)|2|{\"Banana\"}|  \n|\"Darb\\nSmarba\" (C#)<br /><br /> \"Darb\" & vbLf & \"Smarba\" (Visual Basic)|new Char[] {} (C#)<br /><br /> Char() = {} (Visual Basic)|1|{\"Darb\\nSmarba\"} (C#)<br /><br /> \"Darb\" & vbLf & \"Smarba\" (Visual Basic)|  \n|\"Darb\\nSmarba\" (C#)<br /><br /> \"Darb\" & vbLf & \"Smarba\" (Visual Basic)|new Char[] null (C#)<br /><br /> Char() = Nothing|2|{\"Darb\", \"Smarba\"}|  \n|\"Darb\\nSmarba\" (C#)<br /><br /> \"Darb\" & vbLf & \"Smarba\" (Visual Basic)|new Char[] null (C#)<br /><br /> Char() = Nothing|100|{\"Darb\", \"Smarba\"}|  \n  \n## Performance Considerations  \n The<xref:System.String.Split%2A> methods allocate memory for the returned array object and a <xref:System.String> object for each array element. If your application requires optimal performance or if managing memory allocation is critical in your application, consider using the <xref:System.String.IndexOf%2A> or <xref:System.String.IndexOfAny%2A> method, and optionally the <xref:System.String.Compare%2A> method, to locate a substring within a string.  \n  \n If you are splitting a string at a separator character, use the <xref:System.String.IndexOf%2A> or <xref:System.String.IndexOfAny%2A> method to locate a separator character in the string. If you are splitting a string at a separator string, use the <xref:System.String.IndexOf%2A> or <xref:System.String.IndexOfAny%2A> method to locate the first character of the separator string. Then use the <xref:System.String.Compare%2A> method to determine whether the characters after that first character are equal to the remaining characters of the separator string.  \n  \n In addition, if the same set of characters is used to split strings in multiple <xref:System.String.Split%2A> method calls, consider creating a single array and referencing it in each method call. This significantly reduces the additional overhead of each method call.","nodes":[{"pos":[0,76],"content":"Delimiter characters are not included in the elements of the returned array.","nodes":[{"content":"Delimiter characters are not included in the elements of the returned array.","pos":[0,76]}]},{"pos":[83,279],"content":"If this instance does not contain any of the characters in `separator`, the returned array consists of a single element that contains this instance. If `count` is zero, an empty array is returned.","nodes":[{"content":"If this instance does not contain any of the characters in <ph id=\"ph1\">`separator`</ph>, the returned array consists of a single element that contains this instance.","pos":[0,148],"source":"If this instance does not contain any of the characters in `separator`, the returned array consists of a single element that contains this instance."},{"content":"If <ph id=\"ph1\">`count`</ph> is zero, an empty array is returned.","pos":[149,196],"source":" If `count` is zero, an empty array is returned."}]},{"pos":[286,579],"content":"If the `separator` parameter is `null` or contains no characters, white-space characters are assumed to be the delimiters. White-space characters are defined by the Unicode standard and return `true` if they are passed to the <xref:System.Char.IsWhiteSpace%2A?displayProperty=fullName> method.","nodes":[{"content":"If the <ph id=\"ph1\">`separator`</ph> parameter is <ph id=\"ph2\">`null`</ph> or contains no characters, white-space characters are assumed to be the delimiters.","pos":[0,122],"source":"If the `separator` parameter is `null` or contains no characters, white-space characters are assumed to be the delimiters."},{"content":"White-space characters are defined by the Unicode standard and return <ph id=\"ph1\">`true`</ph> if they are passed to the <ph id=\"ph2\">&lt;xref:System.Char.IsWhiteSpace%2A?displayProperty=fullName&gt;</ph> method.","pos":[123,293],"source":" White-space characters are defined by the Unicode standard and return `true` if they are passed to the <xref:System.Char.IsWhiteSpace%2A?displayProperty=fullName> method."}]},{"pos":[586,820],"content":"Each element of `separator` defines a separate delimiter character. If two delimiters are adjacent, or a delimiter is found at the beginning or end of this instance, the corresponding array element contains <xref:System.String.Empty>.","nodes":[{"content":"Each element of <ph id=\"ph1\">`separator`</ph> defines a separate delimiter character.","pos":[0,67],"source":"Each element of `separator` defines a separate delimiter character."},{"content":"If two delimiters are adjacent, or a delimiter is found at the beginning or end of this instance, the corresponding array element contains <ph id=\"ph1\">&lt;xref:System.String.Empty&gt;</ph>.","pos":[68,234],"source":" If two delimiters are adjacent, or a delimiter is found at the beginning or end of this instance, the corresponding array element contains <xref:System.String.Empty>."}]},{"pos":[827,1095],"content":"If there are more than <ph id=\"ph1\">`count`</ph> substrings in this instance, the first <ph id=\"ph2\">`count`</ph> minus 1 substrings are returned in the first <ph id=\"ph3\">`count`</ph> minus 1 elements of the return value, and the remaining characters in this instance are returned in the last element of the return value.","source":"If there are more than `count` substrings in this instance, the first `count` minus 1 substrings are returned in the first `count` minus 1 elements of the return value, and the remaining characters in this instance are returned in the last element of the return value."},{"pos":[1102,1220],"content":"If <ph id=\"ph1\">`count`</ph> is greater than the number of substrings, the available substrings are returned and no exception is thrown.","source":"If `count` is greater than the number of substrings, the available substrings are returned and no exception is thrown."},{"pos":[1227,1265],"content":"The following table provides examples.","nodes":[{"content":"The following table provides examples.","pos":[0,38]}]},{"pos":[1272,1284],"content":"String value","nodes":[{"content":"String value","pos":[0,12]}]},{"pos":[1285,1294],"content":"Separator","nodes":[{"content":"Separator","pos":[0,9]}]},{"pos":[1295,1300],"content":"Count","nodes":[{"content":"Count","pos":[0,5]}]},{"pos":[1301,1315],"content":"Returned array","nodes":[{"content":"Returned array","pos":[0,14]}]},{"pos":[1392,1404],"content":"\"42, 12, 19\"","nodes":[{"content":"\"42, 12, 19\"","pos":[0,12]}]},{"pos":[1405,1480],"content":"new Char[] {',', ' '} (C#)<br /><br /> Char() = {\",\"c, \" \"c} (Visual Basic)","nodes":[{"content":"new Char[] {',', ' '} (C#)","pos":[0,26]},{"content":"Char() = {\",\"c, \" \"c} (Visual Basic)","pos":[39,75]}]},{"pos":[1481,1482],"content":"2","nodes":[{"content":"2","pos":[0,1]}]},{"pos":[1483,1500],"content":"{\"42\", \" 12, 19\"}","nodes":[{"content":"{\"42\", \" 12, 19\"}","pos":[0,17]}]},{"pos":[1505,1517],"content":"\"42..12..19\"","nodes":[{"content":"\"42..12..19\"","pos":[0,12]}]},{"pos":[1518,1582],"content":"new Char[] {'.'} (C#)<br /><br /> Char() = {\".\"c} (Visual Basic)","nodes":[{"content":"new Char[] {'.'} (C#)","pos":[0,21],"nodes":[{"content":"new Char[] {'.'}","pos":[0,16]},{"content":"(C#)","pos":[17,21]}]},{"content":"Char() = {\".\"c} (Visual Basic)","pos":[34,64]}]},{"pos":[1583,1584],"content":"4","nodes":[{"content":"4","pos":[0,1]}]},{"pos":[1585,1608],"content":"{\"42\", \"\", \"12\", \".19\"}","nodes":[{"content":"{\"42\", \"\", \"12\", \".19\"}","pos":[0,23]}]},{"pos":[1613,1621],"content":"\"Banana\"","nodes":[{"content":"\"Banana\"","pos":[0,8]}]},{"pos":[1622,1686],"content":"new Char[] {'.'} (C#)<br /><br /> Char() = {\".\"c} (Visual Basic)","nodes":[{"content":"new Char[] {'.'} (C#)","pos":[0,21],"nodes":[{"content":"new Char[] {'.'}","pos":[0,16]},{"content":"(C#)","pos":[17,21]}]},{"content":"Char() = {\".\"c} (Visual Basic)","pos":[34,64]}]},{"pos":[1687,1688],"content":"2","nodes":[{"content":"2","pos":[0,1]}]},{"pos":[1689,1699],"content":"{\"Banana\"}","nodes":[{"content":"{\"Banana\"}","pos":[0,10]}]},{"pos":[1704,1775],"content":"\"Darb\\nSmarba\" (C#)<br /><br /> \"Darb\" & vbLf & \"Smarba\" (Visual Basic)","nodes":[{"content":"\"Darb\\nSmarba\" (C#)","pos":[0,19]},{"content":"\"Darb\" &amp; vbLf &amp; \"Smarba\" (Visual Basic)","pos":[32,71],"source":"\"Darb\" & vbLf & \"Smarba\" (Visual Basic)"}]},{"pos":[1776,1833],"content":"new Char[] {} (C#)<br /><br /> Char() = {} (Visual Basic)","nodes":[{"content":"new Char[] {} (C#)","pos":[0,18]},{"content":"Char() = {} (Visual Basic)","pos":[31,57]}]},{"pos":[1834,1835],"content":"1","nodes":[{"content":"1","pos":[0,1]}]},{"pos":[1836,1909],"content":"{\"Darb\\nSmarba\"} (C#)<br /><br /> \"Darb\" & vbLf & \"Smarba\" (Visual Basic)","nodes":[{"content":"{\"Darb\\nSmarba\"} (C#)","pos":[0,21]},{"content":"\"Darb\" &amp; vbLf &amp; \"Smarba\" (Visual Basic)","pos":[34,73],"source":"\"Darb\" & vbLf & \"Smarba\" (Visual Basic)"}]},{"pos":[1914,1985],"content":"\"Darb\\nSmarba\" (C#)<br /><br /> \"Darb\" & vbLf & \"Smarba\" (Visual Basic)","nodes":[{"content":"\"Darb\\nSmarba\" (C#)","pos":[0,19]},{"content":"\"Darb\" &amp; vbLf &amp; \"Smarba\" (Visual Basic)","pos":[32,71],"source":"\"Darb\" & vbLf & \"Smarba\" (Visual Basic)"}]},{"pos":[1986,2035],"content":"new Char[] null (C#)<br /><br /> Char() = Nothing","nodes":[{"content":"new Char[] null (C#)","pos":[0,20]},{"content":"Char() = Nothing","pos":[33,49]}]},{"pos":[2036,2037],"content":"2","nodes":[{"content":"2","pos":[0,1]}]},{"pos":[2038,2056],"content":"{\"Darb\", \"Smarba\"}","nodes":[{"content":"{\"Darb\", \"Smarba\"}","pos":[0,18]}]},{"pos":[2061,2132],"content":"\"Darb\\nSmarba\" (C#)<br /><br /> \"Darb\" & vbLf & \"Smarba\" (Visual Basic)","nodes":[{"content":"\"Darb\\nSmarba\" (C#)","pos":[0,19]},{"content":"\"Darb\" &amp; vbLf &amp; \"Smarba\" (Visual Basic)","pos":[32,71],"source":"\"Darb\" & vbLf & \"Smarba\" (Visual Basic)"}]},{"pos":[2133,2182],"content":"new Char[] null (C#)<br /><br /> Char() = Nothing","nodes":[{"content":"new Char[] null (C#)","pos":[0,20]},{"content":"Char() = Nothing","pos":[33,49]}]},{"pos":[2183,2186],"content":"100","nodes":[{"content":"100","pos":[0,3]}]},{"pos":[2187,2205],"content":"{\"Darb\", \"Smarba\"}","nodes":[{"content":"{\"Darb\", \"Smarba\"}","pos":[0,18]}]},{"pos":[2215,2241],"content":"Performance Considerations","linkify":"Performance Considerations","nodes":[{"content":"Performance Considerations","pos":[0,26]}]},{"pos":[2245,2699],"content":"The<xref:System.String.Split%2A> methods allocate memory for the returned array object and a <xref:System.String> object for each array element. If your application requires optimal performance or if managing memory allocation is critical in your application, consider using the <xref:System.String.IndexOf%2A> or <xref:System.String.IndexOfAny%2A> method, and optionally the <xref:System.String.Compare%2A> method, to locate a substring within a string.","nodes":[{"content":"The<xref:System.String.Split%2A> methods allocate memory for the returned array object and a <xref:System.String> object for each array element. If your application requires optimal performance or if managing memory allocation is critical in your application, consider using the <xref:System.String.IndexOf%2A> or <xref:System.String.IndexOfAny%2A> method, and optionally the <xref:System.String.Compare%2A> method, to locate a substring within a string.","pos":[0,454],"nodes":[{"content":"The<ph id=\"ph1\">&lt;xref:System.String.Split%2A&gt;</ph> methods allocate memory for the returned array object and a <ph id=\"ph2\">&lt;xref:System.String&gt;</ph> object for each array element.","pos":[0,144],"source":"The<xref:System.String.Split%2A> methods allocate memory for the returned array object and a <xref:System.String> object for each array element."},{"content":"If your application requires optimal performance or if managing memory allocation is critical in your application, consider using the <ph id=\"ph1\">&lt;xref:System.String.IndexOf%2A&gt;</ph> or <ph id=\"ph2\">&lt;xref:System.String.IndexOfAny%2A&gt;</ph> method, and optionally the <ph id=\"ph3\">&lt;xref:System.String.Compare%2A&gt;</ph> method, to locate a substring within a string.","pos":[145,454],"source":" If your application requires optimal performance or if managing memory allocation is critical in your application, consider using the <xref:System.String.IndexOf%2A> or <xref:System.String.IndexOfAny%2A> method, and optionally the <xref:System.String.Compare%2A> method, to locate a substring within a string."}]}]},{"pos":[2706,3264],"content":"If you are splitting a string at a separator character, use the <xref:System.String.IndexOf%2A> or <xref:System.String.IndexOfAny%2A> method to locate a separator character in the string. If you are splitting a string at a separator string, use the <xref:System.String.IndexOf%2A> or <xref:System.String.IndexOfAny%2A> method to locate the first character of the separator string. Then use the <xref:System.String.Compare%2A> method to determine whether the characters after that first character are equal to the remaining characters of the separator string.","nodes":[{"content":"If you are splitting a string at a separator character, use the <xref:System.String.IndexOf%2A> or <xref:System.String.IndexOfAny%2A> method to locate a separator character in the string. If you are splitting a string at a separator string, use the <xref:System.String.IndexOf%2A> or <xref:System.String.IndexOfAny%2A> method to locate the first character of the separator string. Then use the <xref:System.String.Compare%2A> method to determine whether the characters after that first character are equal to the remaining characters of the separator string.","pos":[0,558],"nodes":[{"content":"If you are splitting a string at a separator character, use the <ph id=\"ph1\">&lt;xref:System.String.IndexOf%2A&gt;</ph> or <ph id=\"ph2\">&lt;xref:System.String.IndexOfAny%2A&gt;</ph> method to locate a separator character in the string.","pos":[0,187],"source":"If you are splitting a string at a separator character, use the <xref:System.String.IndexOf%2A> or <xref:System.String.IndexOfAny%2A> method to locate a separator character in the string."},{"content":"If you are splitting a string at a separator string, use the <ph id=\"ph1\">&lt;xref:System.String.IndexOf%2A&gt;</ph> or <ph id=\"ph2\">&lt;xref:System.String.IndexOfAny%2A&gt;</ph> method to locate the first character of the separator string.","pos":[188,380],"source":" If you are splitting a string at a separator string, use the <xref:System.String.IndexOf%2A> or <xref:System.String.IndexOfAny%2A> method to locate the first character of the separator string."},{"content":"Then use the <ph id=\"ph1\">&lt;xref:System.String.Compare%2A&gt;</ph> method to determine whether the characters after that first character are equal to the remaining characters of the separator string.","pos":[381,558],"source":" Then use the <xref:System.String.Compare%2A> method to determine whether the characters after that first character are equal to the remaining characters of the separator string."}]}]},{"pos":[3271,3539],"content":"In addition, if the same set of characters is used to split strings in multiple <xref:System.String.Split%2A> method calls, consider creating a single array and referencing it in each method call. This significantly reduces the additional overhead of each method call.","nodes":[{"content":"In addition, if the same set of characters is used to split strings in multiple <xref:System.String.Split%2A> method calls, consider creating a single array and referencing it in each method call. This significantly reduces the additional overhead of each method call.","pos":[0,268],"nodes":[{"content":"In addition, if the same set of characters is used to split strings in multiple <ph id=\"ph1\">&lt;xref:System.String.Split%2A&gt;</ph> method calls, consider creating a single array and referencing it in each method call.","pos":[0,196],"source":"In addition, if the same set of characters is used to split strings in multiple <xref:System.String.Split%2A> method calls, consider creating a single array and referencing it in each method call."},{"content":"This significantly reduces the additional overhead of each method call.","pos":[197,268]}]}]}],"pos":[585086,588720],"yaml":true,"extradata":"MT"},{"content":"A character array that delimits the substrings in this string, an empty array that contains no delimiters, or `null`.","nodes":[{"pos":[0,117],"content":"A character array that delimits the substrings in this string, an empty array that contains no delimiters, or <ph id=\"ph1\">`null`</ph>.","source":"A character array that delimits the substrings in this string, an empty array that contains no delimiters, or `null`."}],"pos":[589247,589365],"yaml":true},{"content":"The maximum number of substrings to return.","nodes":[{"pos":[0,43],"content":"The maximum number of substrings to return.","nodes":[{"content":"The maximum number of substrings to return.","pos":[0,43]}]}],"pos":[589425,589469],"yaml":true},{"content":"An array whose elements contain the substrings in this instance that are delimited by one or more characters in <code>separator</code>. For more information, see the Remarks section.","nodes":[{"pos":[0,182],"content":"An array whose elements contain the substrings in this instance that are delimited by one or more characters in <code>separator</code>. For more information, see the Remarks section.","nodes":[{"content":"An array whose elements contain the substrings in this instance that are delimited by one or more characters in <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">separator</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","pos":[0,135],"source":"An array whose elements contain the substrings in this instance that are delimited by one or more characters in <code>separator</code>."},{"content":"For more information, see the Remarks section.","pos":[136,182]}]}],"pos":[589528,589711],"yaml":true},{"content":"<code>count</code> is negative.","nodes":[{"pos":[0,31],"content":"<ph id=\"ph1\">&lt;code&gt;count&lt;/code&gt;</ph> is negative.","source":"<code>count</code> is negative."}],"pos":[589872,589904],"yaml":true},{"content":"Splits a string into substrings that are based on the characters in an array.","nodes":[{"pos":[0,77],"content":"Splits a string into substrings that are based on the characters in an array.","nodes":[{"content":"Splits a string into substrings that are based on the characters in an array.","pos":[0,77]}]}],"pos":[592321,592399],"yaml":true},{"content":"When a string is delimited by a known set of characters, you can use the <xref:System.String.Split%28System.Char%5B%5D%29> method to separate it into substrings. For other ways to extract substrings from a string, see the [Alternatives to String.Split](#Alternatives) section.  \n  \n## Return value details  \n Delimiter characters are not included in the elements of the returned array. For example, if the separator array includes the character \"-\" and the value of the current string instance is \"aa-bb-cc\", the method returns an array that contains three elements: \"aa\", \"bb\", and \"cc\".  \n  \n If this instance does not contain any of the characters in `separator`, the returned array consists of a single element that contains this instance.  \n  \n Each element of `separator` defines a separate delimiter character. If two delimiters are adjacent, or a delimiter is found at the beginning or end of this instance, the corresponding element in the returned array contains <xref:System.String.Empty>. Here are some examples:  \n  \n|String value|Separator|Returned array|  \n|------------------|---------------|--------------------|  \n|\"42, 12, 19\"|new Char[] {',', ' '} (C#)<br /><br /> Char() = {\",\"c, \" \"c}) (Visual Basic)|{\"42\", \"\", \"12\", \"\", \"19\"}|  \n|\"42..12..19\"|new Char[] {'.'} (C#)<br /><br /> Char() = {\".\"c} (Visual Basic)|{\"42\", \"\", \"12\", \"\", \"19\"}|  \n|\"Banana\"|new Char[] {'.'} (C#)<br /><br /> Char() = {\".\"c} (Visual Basic)|{\"Banana\"}|  \n|\"Darb\\nSmarba\" (C#)<br /><br /> \"Darb\" & vbLf & \"Smarba\" (Visual Basic)|new Char[] {} (C#)<br /><br /> Char() = {} (Visual Basic)|{\"Darb\", \"Smarba\"}|  \n|\"Darb\\nSmarba\" (C#)<br /><br /> \"Darb\" & vbLf & \"Smarba\" (Visual Basic)|null (C#)<br /><br /> Nothing (Visual Basic)|{\"Darb\", \"Smarba\"}|  \n  \n## The separator array  \n Each element of separator defines a separate delimiter that consists of a single character. If the `separator` argument is `null` or contains no characters, the method treats white-space characters as the delimiters. White-space characters are defined by the Unicode standard; they return `true` if they are passed to the <xref:System.Char.IsWhiteSpace%2A?displayProperty=fullName> method.  \n  \n## String.Split(Char[]) and compiler overload resolution  \n Although the single parameter for this overload of <xref:System.String.Split%2A?displayProperty=fullName> is a character array, you can call it with a single character, as the following example shows.  \n  \n [!code-csharp[System.String.Split#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Split/cs/Split_CompilerResolution1.cs#12)]\n [!code-vb[System.String.Split#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Split/vb/Split_CompilerResolution1.vb#12)]  \n  \n Because the `separator` parameter is decorated  with the <xref:System.ParamArrayAttribute> attribute, compilers will interpret a single character as a single-element character array. This is not the case for other <xref:System.String.Split%2A?displayProperty=fullName> overloads that include a `separator` parameter; you must explicitly pass these overloads a character array as the `separator` argument.  \n  \n## Comparison details  \n The <xref:System.String.Split%28System.Char%5B%5D%29> method extracts the substrings in this string that are delimited by one or more of the characters in the `separator` array, and returns those substrings as elements of an array.  \n  \n The <xref:System.String.Split%28System.Char%5B%5D%29> method looks for delimiters by performing comparisons using case-sensitive ordinal sort rules. For more information about word, string, and ordinal sorts, see the <xref:System.Globalization.CompareOptions?displayProperty=fullName> enumeration.  \n  \n<a name=\"Alternatives\"></a>   \n## Alternatives to String.Split  \n The <xref:System.String.Split%2A> method is not always the best way to break a delimited string into substrings. If you don't want to extract all of the substrings of a delimited string, or if you want to parse a string based on a pattern instead of a set of delimiter characters, consider the following alternatives.  \n  \n### Regular expressions  \n If your strings conform to a fixed pattern, you can use a regular expression to extract and handle their elements. For example, if strings take the form \"*number* *operand* *number*\" you can use a [regular expression](~/docs/standard/base-types/regular-expressions.md) to extract and handle the string's elements. Here's an example:  \n  \n [!code-csharp[System.String.Split#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Split/cs/splitalt1.cs#8)]\n [!code-vb[System.String.Split#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Split/vb/splitalt1.vb#8)]  \n  \n The regular expression pattern `(\\d+)\\s+([-+*/])\\s+(\\d+)` is defined like this:  \n  \n|Pattern|Description|  \n|-------------|-----------------|  \n|`(\\d+)`|Match one or more decimal digits. This is the first capturing group.|  \n|`\\s+`|Match one or more whitespace characters.|  \n|`([-+*/])`|Match an arithmetic operator sign (+, -, *, or /). This is the second capturing group.|  \n|`\\s+`|Match one or more whitespace characters.|  \n|`(\\d+)`|Match one or more decimal digits. This is the third capturing group.|  \n  \n You can also use a regular expression to extract substrings from a string based on a pattern rather than a fixed set of characters. This is a common scenario when either of these conditions occurs:  \n  \n-   One or more of the delimiter characters does not always serve as a delimiter in the <xref:System.String> instance.  \n  \n-   The sequence and number of delimiter characters is variable or unknown.  \n  \n For example, the <xref:System.String.Split%2A> method cannot be used to split the following string, because the number of `\\n` (in C#) or `vbCrLf` (in Visual Basic) characters is variable, and they do not always serve as delimiters.  \n  \n```  \n  \n[This is captured\\ntext.]\\n\\n[\\n[This is more captured text.]\\n]  \n\\n[Some more captured text:\\n   Option1\\n   Option2][Terse text.]  \n  \n```  \n  \n A regular expression can split this string easily, as the following example shows.  \n  \n [!code-csharp[System.String.Split#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Split/cs/splitalt2.cs#9)]\n [!code-vb[System.String.Split#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Split/vb/splitalt2.vb#9)]  \n  \n The regular expression pattern `\\[([^\\[\\]]+)\\]` is defined like this:  \n  \n|Pattern|Description|  \n|-------------|-----------------|  \n|`\\[`|Match an opening bracket.|  \n|`([^\\[\\]]+)`|Match any character that is not an opening or a closing bracket one or more times. This is the first capturing group.|  \n|`\\]`|Match a closing bracket.|  \n  \n The <xref:System.Text.RegularExpressions.Regex.Split%2A?displayProperty=fullName> method is almost identical to <xref:System.String.Split%2A?displayProperty=fullName>, except that it splits a string based on a regular expression pattern instead of a fixed character set. For example, the following example uses the <xref:System.Text.RegularExpressions.Regex.Split%2A?displayProperty=fullName>method to split a string that contains substrings delimited by various combinations of hyphens and other characters.  \n  \n [!code-csharp[System.String.Split#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Split/cs/splitalt3.cs#10)]\n [!code-vb[System.String.Split#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Split/vb/splitalt3.vb#10)]  \n  \n The regular expression pattern `\\s-\\s?[+*]?\\s?-\\s` is defined like this:  \n  \n|Pattern|Description|  \n|-------------|-----------------|  \n|`\\s-`|Match a whitespace character followed by a hyphen.|  \n|`\\s?`|Match zero or one whitespace character.|  \n|`[+*]?`|Match zero or one occurrence of either the + or * character.|  \n|`\\s?`|Match zero or one whitespace character.|  \n|`-\\s`|Match a hyphen followed by a whitespace character.|  \n  \n### Search methods and the Substring method  \n If you aren't interested in all of the substrings in a string, you might prefer to work with one of the string comparison methods that returns the index at which the match begins. You can then call the <xref:System.String.Substring%2A> method to extract the substring that you want. The string comparison methods include:  \n  \n-   <xref:System.String.IndexOf%2A>, which returns the zero-based index of the first occurrence of a character or string in a string instance.  \n  \n-   <xref:System.String.IndexOfAny%2A>, which returns the zero-based index in the current string instance of the first occurrence of any character in a character array.  \n  \n-   <xref:System.String.LastIndexOf%2A>, which returns the zero-based index of the last occurrence of a character or string in a string instance.  \n  \n-   <xref:System.String.LastIndexOfAny%2A>, which returns a zero-based index in the current string instance of the last occurrence of any character in a character array.  \n  \n The following example uses the <xref:System.String.IndexOf%2A> method to find the periods in a string. It then uses the <xref:System.String.Substring%2A> method to return full sentences.  \n  \n [!code-csharp[System.String.Split#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Split/cs/splitalt4.cs#11)]\n [!code-vb[System.String.Split#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Split/vb/splitalt4.vb#11)]  \n  \n## Performance Considerations  \n The<xref:System.String.Split%2A> methods allocate memory for the returned array object and a <xref:System.String> object for each array element. If your application requires optimal performance or if managing memory allocation is critical in your application, consider using the <xref:System.String.IndexOf%2A> or <xref:System.String.IndexOfAny%2A> method. You also have the option of using the <xref:System.String.Compare%2A> method to locate a substring within a string.  \n  \n To split a string at a separator character, use the <xref:System.String.IndexOf%2A> or <xref:System.String.IndexOfAny%2A> method to locate a separator character in the string. To split a string at a separator string, use the <xref:System.String.IndexOf%2A> or <xref:System.String.IndexOfAny%2A> method to locate the first character of the separator string. Then use the <xref:System.String.Compare%2A> method to determine whether the characters after that first character are equal to the remaining characters of the separator string.  \n  \n In addition, if the same set of characters is used to split strings in multiple <xref:System.String.Split%2A> method calls, consider creating a single array and referencing it in each method call. This significantly reduces the additional overhead of each method call.","nodes":[{"pos":[0,276],"content":"When a string is delimited by a known set of characters, you can use the <xref:System.String.Split%28System.Char%5B%5D%29> method to separate it into substrings. For other ways to extract substrings from a string, see the [Alternatives to String.Split](#Alternatives) section.","nodes":[{"content":"When a string is delimited by a known set of characters, you can use the <ph id=\"ph1\">&lt;xref:System.String.Split%28System.Char%5B%5D%29&gt;</ph> method to separate it into substrings.","pos":[0,161],"source":"When a string is delimited by a known set of characters, you can use the <xref:System.String.Split%28System.Char%5B%5D%29> method to separate it into substrings."},{"content":"For other ways to extract substrings from a string, see the <bpt id=\"p1\">[</bpt>Alternatives to String.Split<ept id=\"p1\">](#Alternatives)</ept> section.","pos":[162,276],"source":" For other ways to extract substrings from a string, see the [Alternatives to String.Split](#Alternatives) section."}]},{"pos":[285,305],"content":"Return value details","linkify":"Return value details","nodes":[{"content":"Return value details","pos":[0,20]}]},{"pos":[309,588],"content":"Delimiter characters are not included in the elements of the returned array. For example, if the separator array includes the character \"-\" and the value of the current string instance is \"aa-bb-cc\", the method returns an array that contains three elements: \"aa\", \"bb\", and \"cc\".","nodes":[{"content":"Delimiter characters are not included in the elements of the returned array. For example, if the separator array includes the character \"-\" and the value of the current string instance is \"aa-bb-cc\", the method returns an array that contains three elements: \"aa\", \"bb\", and \"cc\".","pos":[0,279],"nodes":[{"content":"Delimiter characters are not included in the elements of the returned array.","pos":[0,76]},{"content":"For example, if the separator array includes the character \"-\" and the value of the current string instance is \"aa-bb-cc\", the method returns an array that contains three elements: \"aa\", \"bb\", and \"cc\".","pos":[77,279]}]}]},{"pos":[595,743],"content":"If this instance does not contain any of the characters in <ph id=\"ph1\">`separator`</ph>, the returned array consists of a single element that contains this instance.","source":"If this instance does not contain any of the characters in `separator`, the returned array consists of a single element that contains this instance."},{"pos":[750,1024],"content":"Each element of `separator` defines a separate delimiter character. If two delimiters are adjacent, or a delimiter is found at the beginning or end of this instance, the corresponding element in the returned array contains <xref:System.String.Empty>. Here are some examples:","nodes":[{"content":"Each element of <ph id=\"ph1\">`separator`</ph> defines a separate delimiter character.","pos":[0,67],"source":"Each element of `separator` defines a separate delimiter character."},{"content":"If two delimiters are adjacent, or a delimiter is found at the beginning or end of this instance, the corresponding element in the returned array contains <ph id=\"ph1\">&lt;xref:System.String.Empty&gt;</ph>.","pos":[68,250],"source":" If two delimiters are adjacent, or a delimiter is found at the beginning or end of this instance, the corresponding element in the returned array contains <xref:System.String.Empty>."},{"content":"Here are some examples:","pos":[251,274]}]},{"pos":[1031,1043],"content":"String value","nodes":[{"content":"String value","pos":[0,12]}]},{"pos":[1044,1053],"content":"Separator","nodes":[{"content":"Separator","pos":[0,9]}]},{"pos":[1054,1068],"content":"Returned array","nodes":[{"content":"Returned array","pos":[0,14]}]},{"pos":[1133,1145],"content":"\"42, 12, 19\"","nodes":[{"content":"\"42, 12, 19\"","pos":[0,12]}]},{"pos":[1146,1222],"content":"new Char[] {',', ' '} (C#)<br /><br /> Char() = {\",\"c, \" \"c}) (Visual Basic)","nodes":[{"content":"new Char[] {',', ' '} (C#)","pos":[0,26]},{"content":"Char() = {\",\"c, \" \"c}) (Visual Basic)","pos":[39,76]}]},{"pos":[1223,1249],"content":"{\"42\", \"\", \"12\", \"\", \"19\"}","nodes":[{"content":"{\"42\", \"\", \"12\", \"\", \"19\"}","pos":[0,26]}]},{"pos":[1254,1266],"content":"\"42..12..19\"","nodes":[{"content":"\"42..12..19\"","pos":[0,12]}]},{"pos":[1267,1331],"content":"new Char[] {'.'} (C#)<br /><br /> Char() = {\".\"c} (Visual Basic)","nodes":[{"content":"new Char[] {'.'} (C#)","pos":[0,21],"nodes":[{"content":"new Char[] {'.'}","pos":[0,16]},{"content":"(C#)","pos":[17,21]}]},{"content":"Char() = {\".\"c} (Visual Basic)","pos":[34,64]}]},{"pos":[1332,1358],"content":"{\"42\", \"\", \"12\", \"\", \"19\"}","nodes":[{"content":"{\"42\", \"\", \"12\", \"\", \"19\"}","pos":[0,26]}]},{"pos":[1363,1371],"content":"\"Banana\"","nodes":[{"content":"\"Banana\"","pos":[0,8]}]},{"pos":[1372,1436],"content":"new Char[] {'.'} (C#)<br /><br /> Char() = {\".\"c} (Visual Basic)","nodes":[{"content":"new Char[] {'.'} (C#)","pos":[0,21],"nodes":[{"content":"new Char[] {'.'}","pos":[0,16]},{"content":"(C#)","pos":[17,21]}]},{"content":"Char() = {\".\"c} (Visual Basic)","pos":[34,64]}]},{"pos":[1437,1447],"content":"{\"Banana\"}","nodes":[{"content":"{\"Banana\"}","pos":[0,10]}]},{"pos":[1452,1523],"content":"\"Darb\\nSmarba\" (C#)<br /><br /> \"Darb\" & vbLf & \"Smarba\" (Visual Basic)","nodes":[{"content":"\"Darb\\nSmarba\" (C#)","pos":[0,19]},{"content":"\"Darb\" &amp; vbLf &amp; \"Smarba\" (Visual Basic)","pos":[32,71],"source":"\"Darb\" & vbLf & \"Smarba\" (Visual Basic)"}]},{"pos":[1524,1581],"content":"new Char[] {} (C#)<br /><br /> Char() = {} (Visual Basic)","nodes":[{"content":"new Char[] {} (C#)","pos":[0,18]},{"content":"Char() = {} (Visual Basic)","pos":[31,57]}]},{"pos":[1582,1600],"content":"{\"Darb\", \"Smarba\"}","nodes":[{"content":"{\"Darb\", \"Smarba\"}","pos":[0,18]}]},{"pos":[1605,1676],"content":"\"Darb\\nSmarba\" (C#)<br /><br /> \"Darb\" & vbLf & \"Smarba\" (Visual Basic)","nodes":[{"content":"\"Darb\\nSmarba\" (C#)","pos":[0,19]},{"content":"\"Darb\" &amp; vbLf &amp; \"Smarba\" (Visual Basic)","pos":[32,71],"source":"\"Darb\" & vbLf & \"Smarba\" (Visual Basic)"}]},{"pos":[1677,1721],"content":"null (C#)<br /><br /> Nothing (Visual Basic)","nodes":[{"content":"null (C#)","pos":[0,9]},{"content":"Nothing (Visual Basic)","pos":[22,44]}]},{"pos":[1722,1740],"content":"{\"Darb\", \"Smarba\"}","nodes":[{"content":"{\"Darb\", \"Smarba\"}","pos":[0,18]}]},{"pos":[1750,1769],"content":"The separator array","linkify":"The separator array","nodes":[{"content":"The separator array","pos":[0,19]}]},{"pos":[1773,2162],"content":"Each element of separator defines a separate delimiter that consists of a single character. If the `separator` argument is `null` or contains no characters, the method treats white-space characters as the delimiters. White-space characters are defined by the Unicode standard; they return `true` if they are passed to the <xref:System.Char.IsWhiteSpace%2A?displayProperty=fullName> method.","nodes":[{"content":"Each element of separator defines a separate delimiter that consists of a single character.","pos":[0,91]},{"content":"If the <ph id=\"ph1\">`separator`</ph> argument is <ph id=\"ph2\">`null`</ph> or contains no characters, the method treats white-space characters as the delimiters.","pos":[92,216],"source":" If the `separator` argument is `null` or contains no characters, the method treats white-space characters as the delimiters."},{"content":"White-space characters are defined by the Unicode standard; they return <ph id=\"ph1\">`true`</ph> if they are passed to the <ph id=\"ph2\">&lt;xref:System.Char.IsWhiteSpace%2A?displayProperty=fullName&gt;</ph> method.","pos":[217,389],"source":" White-space characters are defined by the Unicode standard; they return `true` if they are passed to the <xref:System.Char.IsWhiteSpace%2A?displayProperty=fullName> method."}]},{"pos":[2171,2224],"content":"String.Split(Char[]) and compiler overload resolution","linkify":"String.Split(Char[]) and compiler overload resolution","nodes":[{"content":"String.Split(Char[]) and compiler overload resolution","pos":[0,53]}]},{"pos":[2228,2428],"content":"Although the single parameter for this overload of <xref:System.String.Split%2A?displayProperty=fullName> is a character array, you can call it with a single character, as the following example shows.","nodes":[{"content":"Although the single parameter for this overload of <ph id=\"ph1\">&lt;xref:System.String.Split%2A?displayProperty=fullName&gt;</ph> is a character array, you can call it with a single character, as the following example shows.","pos":[0,200],"source":"Although the single parameter for this overload of <xref:System.String.Split%2A?displayProperty=fullName> is a character array, you can call it with a single character, as the following example shows."}]},{"pos":[2435,2724],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>System.String.Split#12<ept id=\"p2\">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Split/cs/Split_CompilerResolution1.cs#12)</ept><ept id=\"p1\">]</ept> <bpt id=\"p3\">[!code-vb</bpt><bpt id=\"p4\">[</bpt>System.String.Split#12<ept id=\"p4\">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Split/vb/Split_CompilerResolution1.vb#12)</ept><ept id=\"p3\">]</ept>","source":"[!code-csharp[System.String.Split#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Split/cs/Split_CompilerResolution1.cs#12)]\n [!code-vb[System.String.Split#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Split/vb/Split_CompilerResolution1.vb#12)]"},{"pos":[2731,3135],"content":"Because the `separator` parameter is decorated  with the <xref:System.ParamArrayAttribute> attribute, compilers will interpret a single character as a single-element character array. This is not the case for other <xref:System.String.Split%2A?displayProperty=fullName> overloads that include a `separator` parameter; you must explicitly pass these overloads a character array as the `separator` argument.","nodes":[{"content":"Because the <ph id=\"ph1\">`separator`</ph> parameter is decorated  with the <ph id=\"ph2\">&lt;xref:System.ParamArrayAttribute&gt;</ph> attribute, compilers will interpret a single character as a single-element character array.","pos":[0,182],"source":"Because the `separator` parameter is decorated  with the <xref:System.ParamArrayAttribute> attribute, compilers will interpret a single character as a single-element character array."},{"content":"This is not the case for other <ph id=\"ph1\">&lt;xref:System.String.Split%2A?displayProperty=fullName&gt;</ph> overloads that include a <ph id=\"ph2\">`separator`</ph> parameter; you must explicitly pass these overloads a character array as the <ph id=\"ph3\">`separator`</ph> argument.","pos":[183,404],"source":" This is not the case for other <xref:System.String.Split%2A?displayProperty=fullName> overloads that include a `separator` parameter; you must explicitly pass these overloads a character array as the `separator` argument."}]},{"pos":[3144,3162],"content":"Comparison details","linkify":"Comparison details","nodes":[{"content":"Comparison details","pos":[0,18]}]},{"pos":[3166,3397],"content":"The <ph id=\"ph1\">&lt;xref:System.String.Split%28System.Char%5B%5D%29&gt;</ph> method extracts the substrings in this string that are delimited by one or more of the characters in the <ph id=\"ph2\">`separator`</ph> array, and returns those substrings as elements of an array.","source":"The <xref:System.String.Split%28System.Char%5B%5D%29> method extracts the substrings in this string that are delimited by one or more of the characters in the `separator` array, and returns those substrings as elements of an array."},{"pos":[3404,3701],"content":"The <xref:System.String.Split%28System.Char%5B%5D%29> method looks for delimiters by performing comparisons using case-sensitive ordinal sort rules. For more information about word, string, and ordinal sorts, see the <xref:System.Globalization.CompareOptions?displayProperty=fullName> enumeration.","nodes":[{"content":"The <xref:System.String.Split%28System.Char%5B%5D%29> method looks for delimiters by performing comparisons using case-sensitive ordinal sort rules. For more information about word, string, and ordinal sorts, see the <xref:System.Globalization.CompareOptions?displayProperty=fullName> enumeration.","pos":[0,297],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.String.Split%28System.Char%5B%5D%29&gt;</ph> method looks for delimiters by performing comparisons using case-sensitive ordinal sort rules.","pos":[0,148],"source":"The <xref:System.String.Split%28System.Char%5B%5D%29> method looks for delimiters by performing comparisons using case-sensitive ordinal sort rules."},{"content":"For more information about word, string, and ordinal sorts, see the <ph id=\"ph1\">&lt;xref:System.Globalization.CompareOptions?displayProperty=fullName&gt;</ph> enumeration.","pos":[149,297],"source":" For more information about word, string, and ordinal sorts, see the <xref:System.Globalization.CompareOptions?displayProperty=fullName> enumeration."}]}]},{"pos":[3741,3769],"content":"Alternatives to String.Split","linkify":"Alternatives to String.Split","nodes":[{"content":"Alternatives to String.Split","pos":[0,28]}]},{"pos":[3773,4090],"content":"The <xref:System.String.Split%2A> method is not always the best way to break a delimited string into substrings. If you don't want to extract all of the substrings of a delimited string, or if you want to parse a string based on a pattern instead of a set of delimiter characters, consider the following alternatives.","nodes":[{"content":"The <xref:System.String.Split%2A> method is not always the best way to break a delimited string into substrings. If you don't want to extract all of the substrings of a delimited string, or if you want to parse a string based on a pattern instead of a set of delimiter characters, consider the following alternatives.","pos":[0,317],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.String.Split%2A&gt;</ph> method is not always the best way to break a delimited string into substrings.","pos":[0,112],"source":"The <xref:System.String.Split%2A> method is not always the best way to break a delimited string into substrings."},{"content":"If you don't want to extract all of the substrings of a delimited string, or if you want to parse a string based on a pattern instead of a set of delimiter characters, consider the following alternatives.","pos":[113,317]}]}]},{"pos":[4100,4119],"content":"Regular expressions","linkify":"Regular expressions","nodes":[{"content":"Regular expressions","pos":[0,19]}]},{"pos":[4123,4455],"content":"If your strings conform to a fixed pattern, you can use a regular expression to extract and handle their elements. For example, if strings take the form \"*number* *operand* *number*\" you can use a [regular expression](~/docs/standard/base-types/regular-expressions.md) to extract and handle the string's elements. Here's an example:","nodes":[{"content":"If your strings conform to a fixed pattern, you can use a regular expression to extract and handle their elements.","pos":[0,114]},{"content":"For example, if strings take the form \"<bpt id=\"p1\">*</bpt>number<ept id=\"p1\">*</ept> <bpt id=\"p2\">*</bpt>operand<ept id=\"p2\">*</ept> <bpt id=\"p3\">*</bpt>number<ept id=\"p3\">*</ept>\" you can use a <bpt id=\"p4\">[</bpt>regular expression<ept id=\"p4\">](~/docs/standard/base-types/regular-expressions.md)</ept> to extract and handle the string's elements.","pos":[115,313],"source":" For example, if strings take the form \"*number* *operand* *number*\" you can use a [regular expression](~/docs/standard/base-types/regular-expressions.md) to extract and handle the string's elements."},{"content":"Here's an example:","pos":[314,332]}]},{"pos":[4462,4715],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>System.String.Split#8<ept id=\"p2\">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Split/cs/splitalt1.cs#8)</ept><ept id=\"p1\">]</ept> <bpt id=\"p3\">[!code-vb</bpt><bpt id=\"p4\">[</bpt>System.String.Split#8<ept id=\"p4\">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Split/vb/splitalt1.vb#8)</ept><ept id=\"p3\">]</ept>","source":"[!code-csharp[System.String.Split#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Split/cs/splitalt1.cs#8)]\n [!code-vb[System.String.Split#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Split/vb/splitalt1.vb#8)]"},{"pos":[4722,4801],"content":"The regular expression pattern <ph id=\"ph1\">`(\\d+)\\s+([-+*/])\\s+(\\d+)`</ph> is defined like this:","source":"The regular expression pattern `(\\d+)\\s+([-+*/])\\s+(\\d+)` is defined like this:"},{"pos":[4808,4815],"content":"Pattern","nodes":[{"content":"Pattern","pos":[0,7]}]},{"pos":[4816,4827],"content":"Description","nodes":[{"content":"Description","pos":[0,11]}]},{"pos":[4876,4944],"content":"Match one or more decimal digits. This is the first capturing group.","nodes":[{"content":"Match one or more decimal digits. This is the first capturing group.","pos":[0,68],"nodes":[{"content":"Match one or more decimal digits.","pos":[0,33]},{"content":"This is the first capturing group.","pos":[34,68]}]}]},{"pos":[4955,4995],"content":"Match one or more whitespace characters.","nodes":[{"content":"Match one or more whitespace characters.","pos":[0,40]}]},{"pos":[5011,5097],"content":"Match an arithmetic operator sign (+, -, *, or /). This is the second capturing group.","nodes":[{"content":"Match an arithmetic operator sign (+, -, *, or /). This is the second capturing group.","pos":[0,86],"nodes":[{"content":"Match an arithmetic operator sign (+, -, *, or /).","pos":[0,50]},{"content":"This is the second capturing group.","pos":[51,86]}]}]},{"pos":[5108,5148],"content":"Match one or more whitespace characters.","nodes":[{"content":"Match one or more whitespace characters.","pos":[0,40]}]},{"pos":[5161,5229],"content":"Match one or more decimal digits. This is the third capturing group.","nodes":[{"content":"Match one or more decimal digits. This is the third capturing group.","pos":[0,68],"nodes":[{"content":"Match one or more decimal digits.","pos":[0,33]},{"content":"This is the third capturing group.","pos":[34,68]}]}]},{"pos":[5237,5434],"content":"You can also use a regular expression to extract substrings from a string based on a pattern rather than a fixed set of characters. This is a common scenario when either of these conditions occurs:","nodes":[{"content":"You can also use a regular expression to extract substrings from a string based on a pattern rather than a fixed set of characters. This is a common scenario when either of these conditions occurs:","pos":[0,197],"nodes":[{"content":"You can also use a regular expression to extract substrings from a string based on a pattern rather than a fixed set of characters.","pos":[0,131]},{"content":"This is a common scenario when either of these conditions occurs:","pos":[132,197]}]}]},{"pos":[5444,5558],"content":"One or more of the delimiter characters does not always serve as a delimiter in the <xref:System.String> instance.","nodes":[{"content":"One or more of the delimiter characters does not always serve as a delimiter in the <ph id=\"ph1\">&lt;xref:System.String&gt;</ph> instance.","pos":[0,114],"source":"One or more of the delimiter characters does not always serve as a delimiter in the <xref:System.String> instance."}]},{"pos":[5568,5639],"content":"The sequence and number of delimiter characters is variable or unknown.","nodes":[{"content":"The sequence and number of delimiter characters is variable or unknown.","pos":[0,71]}]},{"pos":[5646,5878],"content":"For example, the <ph id=\"ph1\">&lt;xref:System.String.Split%2A&gt;</ph> method cannot be used to split the following string, because the number of <ph id=\"ph2\">`\\n`</ph> (in C#) or <ph id=\"ph3\">`vbCrLf`</ph> (in Visual Basic) characters is variable, and they do not always serve as delimiters.","source":"For example, the <xref:System.String.Split%2A> method cannot be used to split the following string, because the number of `\\n` (in C#) or `vbCrLf` (in Visual Basic) characters is variable, and they do not always serve as delimiters."},{"pos":[6041,6123],"content":"A regular expression can split this string easily, as the following example shows.","nodes":[{"content":"A regular expression can split this string easily, as the following example shows.","pos":[0,82]}]},{"pos":[6130,6383],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>System.String.Split#9<ept id=\"p2\">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Split/cs/splitalt2.cs#9)</ept><ept id=\"p1\">]</ept> <bpt id=\"p3\">[!code-vb</bpt><bpt id=\"p4\">[</bpt>System.String.Split#9<ept id=\"p4\">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Split/vb/splitalt2.vb#9)</ept><ept id=\"p3\">]</ept>","source":"[!code-csharp[System.String.Split#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Split/cs/splitalt2.cs#9)]\n [!code-vb[System.String.Split#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Split/vb/splitalt2.vb#9)]"},{"pos":[6390,6459],"content":"The regular expression pattern <ph id=\"ph1\">`\\[([^\\[\\]]+)\\]`</ph> is defined like this:","source":"The regular expression pattern `\\[([^\\[\\]]+)\\]` is defined like this:"},{"pos":[6466,6473],"content":"Pattern","nodes":[{"content":"Pattern","pos":[0,7]}]},{"pos":[6474,6485],"content":"Description","nodes":[{"content":"Description","pos":[0,11]}]},{"pos":[6531,6556],"content":"Match an opening bracket.","nodes":[{"content":"Match an opening bracket.","pos":[0,25]}]},{"pos":[6574,6691],"content":"Match any character that is not an opening or a closing bracket one or more times. This is the first capturing group.","nodes":[{"content":"Match any character that is not an opening or a closing bracket one or more times. This is the first capturing group.","pos":[0,117],"nodes":[{"content":"Match any character that is not an opening or a closing bracket one or more times.","pos":[0,82]},{"content":"This is the first capturing group.","pos":[83,117]}]}]},{"pos":[6701,6725],"content":"Match a closing bracket.","nodes":[{"content":"Match a closing bracket.","pos":[0,24]}]},{"pos":[6733,7241],"content":"The <xref:System.Text.RegularExpressions.Regex.Split%2A?displayProperty=fullName> method is almost identical to <xref:System.String.Split%2A?displayProperty=fullName>, except that it splits a string based on a regular expression pattern instead of a fixed character set. For example, the following example uses the <xref:System.Text.RegularExpressions.Regex.Split%2A?displayProperty=fullName>method to split a string that contains substrings delimited by various combinations of hyphens and other characters.","nodes":[{"content":"The <xref:System.Text.RegularExpressions.Regex.Split%2A?displayProperty=fullName> method is almost identical to <xref:System.String.Split%2A?displayProperty=fullName>, except that it splits a string based on a regular expression pattern instead of a fixed character set. For example, the following example uses the <xref:System.Text.RegularExpressions.Regex.Split%2A?displayProperty=fullName>method to split a string that contains substrings delimited by various combinations of hyphens and other characters.","pos":[0,508],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Text.RegularExpressions.Regex.Split%2A?displayProperty=fullName&gt;</ph> method is almost identical to <ph id=\"ph2\">&lt;xref:System.String.Split%2A?displayProperty=fullName&gt;</ph>, except that it splits a string based on a regular expression pattern instead of a fixed character set.","pos":[0,270],"source":"The <xref:System.Text.RegularExpressions.Regex.Split%2A?displayProperty=fullName> method is almost identical to <xref:System.String.Split%2A?displayProperty=fullName>, except that it splits a string based on a regular expression pattern instead of a fixed character set."},{"content":"For example, the following example uses the <ph id=\"ph1\">&lt;xref:System.Text.RegularExpressions.Regex.Split%2A?displayProperty=fullName&gt;</ph>method to split a string that contains substrings delimited by various combinations of hyphens and other characters.","pos":[271,508],"source":" For example, the following example uses the <xref:System.Text.RegularExpressions.Regex.Split%2A?displayProperty=fullName>method to split a string that contains substrings delimited by various combinations of hyphens and other characters."}]}]},{"pos":[7248,7505],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>System.String.Split#10<ept id=\"p2\">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Split/cs/splitalt3.cs#10)</ept><ept id=\"p1\">]</ept> <bpt id=\"p3\">[!code-vb</bpt><bpt id=\"p4\">[</bpt>System.String.Split#10<ept id=\"p4\">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Split/vb/splitalt3.vb#10)</ept><ept id=\"p3\">]</ept>","source":"[!code-csharp[System.String.Split#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Split/cs/splitalt3.cs#10)]\n [!code-vb[System.String.Split#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Split/vb/splitalt3.vb#10)]"},{"pos":[7512,7584],"content":"The regular expression pattern <ph id=\"ph1\">`\\s-\\s?[+*]?\\s?-\\s`</ph> is defined like this:","source":"The regular expression pattern `\\s-\\s?[+*]?\\s?-\\s` is defined like this:"},{"pos":[7591,7598],"content":"Pattern","nodes":[{"content":"Pattern","pos":[0,7]}]},{"pos":[7599,7610],"content":"Description","nodes":[{"content":"Description","pos":[0,11]}]},{"pos":[7657,7707],"content":"Match a whitespace character followed by a hyphen.","nodes":[{"content":"Match a whitespace character followed by a hyphen.","pos":[0,50]}]},{"pos":[7718,7757],"content":"Match zero or one whitespace character.","nodes":[{"content":"Match zero or one whitespace character.","pos":[0,39]}]},{"pos":[7770,7830],"content":"Match zero or one occurrence of either the + or * character.","nodes":[{"content":"Match zero or one occurrence of either the + or * character.","pos":[0,60]}]},{"pos":[7841,7880],"content":"Match zero or one whitespace character.","nodes":[{"content":"Match zero or one whitespace character.","pos":[0,39]}]},{"pos":[7891,7941],"content":"Match a hyphen followed by a whitespace character.","nodes":[{"content":"Match a hyphen followed by a whitespace character.","pos":[0,50]}]},{"pos":[7952,7991],"content":"Search methods and the Substring method","linkify":"Search methods and the Substring method","nodes":[{"content":"Search methods and the Substring method","pos":[0,39]}]},{"pos":[7995,8316],"content":"If you aren't interested in all of the substrings in a string, you might prefer to work with one of the string comparison methods that returns the index at which the match begins. You can then call the <xref:System.String.Substring%2A> method to extract the substring that you want. The string comparison methods include:","nodes":[{"content":"If you aren't interested in all of the substrings in a string, you might prefer to work with one of the string comparison methods that returns the index at which the match begins. You can then call the <xref:System.String.Substring%2A> method to extract the substring that you want. The string comparison methods include:","pos":[0,321],"nodes":[{"content":"If you aren't interested in all of the substrings in a string, you might prefer to work with one of the string comparison methods that returns the index at which the match begins.","pos":[0,179]},{"content":"You can then call the <ph id=\"ph1\">&lt;xref:System.String.Substring%2A&gt;</ph> method to extract the substring that you want.","pos":[180,282],"source":" You can then call the <xref:System.String.Substring%2A> method to extract the substring that you want."},{"content":"The string comparison methods include:","pos":[283,321]}]}]},{"pos":[8326,8464],"content":"<xref:System.String.IndexOf%2A>, which returns the zero-based index of the first occurrence of a character or string in a string instance.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.String.IndexOf%2A&gt;</ph>, which returns the zero-based index of the first occurrence of a character or string in a string instance.","pos":[0,138],"source":"<xref:System.String.IndexOf%2A>, which returns the zero-based index of the first occurrence of a character or string in a string instance."}]},{"pos":[8474,8638],"content":"<xref:System.String.IndexOfAny%2A>, which returns the zero-based index in the current string instance of the first occurrence of any character in a character array.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.String.IndexOfAny%2A&gt;</ph>, which returns the zero-based index in the current string instance of the first occurrence of any character in a character array.","pos":[0,164],"source":"<xref:System.String.IndexOfAny%2A>, which returns the zero-based index in the current string instance of the first occurrence of any character in a character array."}]},{"pos":[8648,8789],"content":"<xref:System.String.LastIndexOf%2A>, which returns the zero-based index of the last occurrence of a character or string in a string instance.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.String.LastIndexOf%2A&gt;</ph>, which returns the zero-based index of the last occurrence of a character or string in a string instance.","pos":[0,141],"source":"<xref:System.String.LastIndexOf%2A>, which returns the zero-based index of the last occurrence of a character or string in a string instance."}]},{"pos":[8799,8964],"content":"<xref:System.String.LastIndexOfAny%2A>, which returns a zero-based index in the current string instance of the last occurrence of any character in a character array.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.String.LastIndexOfAny%2A&gt;</ph>, which returns a zero-based index in the current string instance of the last occurrence of any character in a character array.","pos":[0,165],"source":"<xref:System.String.LastIndexOfAny%2A>, which returns a zero-based index in the current string instance of the last occurrence of any character in a character array."}]},{"pos":[8971,9157],"content":"The following example uses the <xref:System.String.IndexOf%2A> method to find the periods in a string. It then uses the <xref:System.String.Substring%2A> method to return full sentences.","nodes":[{"content":"The following example uses the <xref:System.String.IndexOf%2A> method to find the periods in a string. It then uses the <xref:System.String.Substring%2A> method to return full sentences.","pos":[0,186],"nodes":[{"content":"The following example uses the <ph id=\"ph1\">&lt;xref:System.String.IndexOf%2A&gt;</ph> method to find the periods in a string.","pos":[0,102],"source":"The following example uses the <xref:System.String.IndexOf%2A> method to find the periods in a string."},{"content":"It then uses the <ph id=\"ph1\">&lt;xref:System.String.Substring%2A&gt;</ph> method to return full sentences.","pos":[103,186],"source":" It then uses the <xref:System.String.Substring%2A> method to return full sentences."}]}]},{"pos":[9164,9421],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>System.String.Split#11<ept id=\"p2\">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Split/cs/splitalt4.cs#11)</ept><ept id=\"p1\">]</ept> <bpt id=\"p3\">[!code-vb</bpt><bpt id=\"p4\">[</bpt>System.String.Split#11<ept id=\"p4\">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Split/vb/splitalt4.vb#11)</ept><ept id=\"p3\">]</ept>","leadings":[""," "],"source":"[!code-csharp[System.String.Split#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Split/cs/splitalt4.cs#11)]\n[!code-vb[System.String.Split#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Split/vb/splitalt4.vb#11)]"},{"pos":[9430,9456],"content":"Performance Considerations","linkify":"Performance Considerations","nodes":[{"content":"Performance Considerations","pos":[0,26]}]},{"pos":[9460,9932],"content":"The<xref:System.String.Split%2A> methods allocate memory for the returned array object and a <xref:System.String> object for each array element. If your application requires optimal performance or if managing memory allocation is critical in your application, consider using the <xref:System.String.IndexOf%2A> or <xref:System.String.IndexOfAny%2A> method. You also have the option of using the <xref:System.String.Compare%2A> method to locate a substring within a string.","nodes":[{"content":"The<xref:System.String.Split%2A> methods allocate memory for the returned array object and a <xref:System.String> object for each array element. If your application requires optimal performance or if managing memory allocation is critical in your application, consider using the <xref:System.String.IndexOf%2A> or <xref:System.String.IndexOfAny%2A> method. You also have the option of using the <xref:System.String.Compare%2A> method to locate a substring within a string.","pos":[0,472],"nodes":[{"content":"The<ph id=\"ph1\">&lt;xref:System.String.Split%2A&gt;</ph> methods allocate memory for the returned array object and a <ph id=\"ph2\">&lt;xref:System.String&gt;</ph> object for each array element.","pos":[0,144],"source":"The<xref:System.String.Split%2A> methods allocate memory for the returned array object and a <xref:System.String> object for each array element."},{"content":"If your application requires optimal performance or if managing memory allocation is critical in your application, consider using the <ph id=\"ph1\">&lt;xref:System.String.IndexOf%2A&gt;</ph> or <ph id=\"ph2\">&lt;xref:System.String.IndexOfAny%2A&gt;</ph> method.","pos":[145,356],"source":" If your application requires optimal performance or if managing memory allocation is critical in your application, consider using the <xref:System.String.IndexOf%2A> or <xref:System.String.IndexOfAny%2A> method."},{"content":"You also have the option of using the <ph id=\"ph1\">&lt;xref:System.String.Compare%2A&gt;</ph> method to locate a substring within a string.","pos":[357,472],"source":" You also have the option of using the <xref:System.String.Compare%2A> method to locate a substring within a string."}]}]},{"pos":[9939,10473],"content":"To split a string at a separator character, use the <xref:System.String.IndexOf%2A> or <xref:System.String.IndexOfAny%2A> method to locate a separator character in the string. To split a string at a separator string, use the <xref:System.String.IndexOf%2A> or <xref:System.String.IndexOfAny%2A> method to locate the first character of the separator string. Then use the <xref:System.String.Compare%2A> method to determine whether the characters after that first character are equal to the remaining characters of the separator string.","nodes":[{"content":"To split a string at a separator character, use the <xref:System.String.IndexOf%2A> or <xref:System.String.IndexOfAny%2A> method to locate a separator character in the string. To split a string at a separator string, use the <xref:System.String.IndexOf%2A> or <xref:System.String.IndexOfAny%2A> method to locate the first character of the separator string. Then use the <xref:System.String.Compare%2A> method to determine whether the characters after that first character are equal to the remaining characters of the separator string.","pos":[0,534],"nodes":[{"content":"To split a string at a separator character, use the <ph id=\"ph1\">&lt;xref:System.String.IndexOf%2A&gt;</ph> or <ph id=\"ph2\">&lt;xref:System.String.IndexOfAny%2A&gt;</ph> method to locate a separator character in the string.","pos":[0,175],"source":"To split a string at a separator character, use the <xref:System.String.IndexOf%2A> or <xref:System.String.IndexOfAny%2A> method to locate a separator character in the string."},{"content":"To split a string at a separator string, use the <ph id=\"ph1\">&lt;xref:System.String.IndexOf%2A&gt;</ph> or <ph id=\"ph2\">&lt;xref:System.String.IndexOfAny%2A&gt;</ph> method to locate the first character of the separator string.","pos":[176,356],"source":" To split a string at a separator string, use the <xref:System.String.IndexOf%2A> or <xref:System.String.IndexOfAny%2A> method to locate the first character of the separator string."},{"content":"Then use the <ph id=\"ph1\">&lt;xref:System.String.Compare%2A&gt;</ph> method to determine whether the characters after that first character are equal to the remaining characters of the separator string.","pos":[357,534],"source":" Then use the <xref:System.String.Compare%2A> method to determine whether the characters after that first character are equal to the remaining characters of the separator string."}]}]},{"pos":[10480,10748],"content":"In addition, if the same set of characters is used to split strings in multiple <xref:System.String.Split%2A> method calls, consider creating a single array and referencing it in each method call. This significantly reduces the additional overhead of each method call.","nodes":[{"content":"In addition, if the same set of characters is used to split strings in multiple <xref:System.String.Split%2A> method calls, consider creating a single array and referencing it in each method call. This significantly reduces the additional overhead of each method call.","pos":[0,268],"nodes":[{"content":"In addition, if the same set of characters is used to split strings in multiple <ph id=\"ph1\">&lt;xref:System.String.Split%2A&gt;</ph> method calls, consider creating a single array and referencing it in each method call.","pos":[0,196],"source":"In addition, if the same set of characters is used to split strings in multiple <xref:System.String.Split%2A> method calls, consider creating a single array and referencing it in each method call."},{"content":"This significantly reduces the additional overhead of each method call.","pos":[197,268]}]}]}],"pos":[592410,603383],"yaml":true,"extradata":"MT"},{"content":"A character array that delimits the substrings in this string, an empty array that contains no delimiters, or `null`.","nodes":[{"pos":[0,117],"content":"A character array that delimits the substrings in this string, an empty array that contains no delimiters, or <ph id=\"ph1\">`null`</ph>.","source":"A character array that delimits the substrings in this string, an empty array that contains no delimiters, or `null`."}],"pos":[604195,604313],"yaml":true},{"content":"An array whose elements contain the substrings from this instance that are delimited by one or more characters in <code>separator</code>. For more information, see the Remarks section.","nodes":[{"pos":[0,184],"content":"An array whose elements contain the substrings from this instance that are delimited by one or more characters in <code>separator</code>. For more information, see the Remarks section.","nodes":[{"content":"An array whose elements contain the substrings from this instance that are delimited by one or more characters in <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">separator</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","pos":[0,137],"source":"An array whose elements contain the substrings from this instance that are delimited by one or more characters in <code>separator</code>."},{"content":"For more information, see the Remarks section.","pos":[138,184]}]}],"pos":[604372,604557],"yaml":true},{"content":"Determines whether the beginning of this string instance matches the specified string when compared using the specified culture.","nodes":[{"pos":[0,128],"content":"Determines whether the beginning of this string instance matches the specified string when compared using the specified culture.","nodes":[{"content":"Determines whether the beginning of this string instance matches the specified string when compared using the specified culture.","pos":[0,128]}]}],"pos":[606264,606393],"yaml":true},{"content":"This method compares the `value` parameter to the substring at the beginning of this string that is the same length as `value`, and returns a value that indicates whether they are equal. To be equal, `value` must be an empty string (<xref:System.String?displayProperty=fullName>), must be a reference to this same instance, or must match the beginning of this instance.  \n  \n This method performs a comparison using the specified casing and culture.","nodes":[{"pos":[0,369],"content":"This method compares the `value` parameter to the substring at the beginning of this string that is the same length as `value`, and returns a value that indicates whether they are equal. To be equal, `value` must be an empty string (<xref:System.String?displayProperty=fullName>), must be a reference to this same instance, or must match the beginning of this instance.","nodes":[{"content":"This method compares the <ph id=\"ph1\">`value`</ph> parameter to the substring at the beginning of this string that is the same length as <ph id=\"ph2\">`value`</ph>, and returns a value that indicates whether they are equal.","pos":[0,186],"source":"This method compares the `value` parameter to the substring at the beginning of this string that is the same length as `value`, and returns a value that indicates whether they are equal."},{"content":"To be equal, <ph id=\"ph1\">`value`</ph> must be an empty string (<ph id=\"ph2\">&lt;xref:System.String?displayProperty=fullName&gt;</ph>), must be a reference to this same instance, or must match the beginning of this instance.","pos":[187,369],"source":" To be equal, `value` must be an empty string (<xref:System.String?displayProperty=fullName>), must be a reference to this same instance, or must match the beginning of this instance."}]},{"pos":[376,449],"content":"This method performs a comparison using the specified casing and culture.","nodes":[{"content":"This method performs a comparison using the specified casing and culture.","pos":[0,73]}]}],"pos":[606404,606858],"yaml":true,"extradata":"MT"},{"content":"The string to compare.","nodes":[{"pos":[0,22],"content":"The string to compare.","nodes":[{"content":"The string to compare.","pos":[0,22]}]}],"pos":[607626,607649],"yaml":true},{"content":"`true` to ignore case during the comparison; otherwise, `false`.","nodes":[{"pos":[0,64],"content":"<ph id=\"ph1\">`true`</ph> to ignore case during the comparison; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` to ignore case during the comparison; otherwise, `false`."}],"pos":[607716,607783],"yaml":true},{"content":"Cultural information that determines how this string and <code>value</code> are compared. If <code>culture</code> is `null`, the current culture is used.","nodes":[{"pos":[0,153],"content":"Cultural information that determines how this string and <code>value</code> are compared. If <code>culture</code> is `null`, the current culture is used.","nodes":[{"content":"Cultural information that determines how this string and <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept> are compared.","pos":[0,89],"source":"Cultural information that determines how this string and <code>value</code> are compared."},{"content":"If <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">culture</ph><ept id=\"p1\">&lt;/code&gt;</ept> is <ph id=\"ph2\">`null`</ph>, the current culture is used.","pos":[90,153],"source":" If <code>culture</code> is `null`, the current culture is used."}]}],"pos":[607865,608019],"yaml":true},{"content":"`true` if the <code>value</code> parameter matches the beginning of this string; otherwise, `false`.","nodes":[{"pos":[0,100],"content":"<ph id=\"ph1\">`true`</ph> if the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter matches the beginning of this string; otherwise, <ph id=\"ph3\">`false`</ph>.","source":"`true` if the <code>value</code> parameter matches the beginning of this string; otherwise, `false`."}],"pos":[608077,608180],"yaml":true},{"content":"<code>value</code> is `null`.","nodes":[{"pos":[0,29],"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>value</code> is `null`."}],"pos":[608334,608364],"yaml":true},{"content":"Determines whether the beginning of this string instance matches the specified string when compared using the specified comparison option.","nodes":[{"pos":[0,138],"content":"Determines whether the beginning of this string instance matches the specified string when compared using the specified comparison option.","nodes":[{"content":"Determines whether the beginning of this string instance matches the specified string when compared using the specified comparison option.","pos":[0,138]}]}],"pos":[609593,609732],"yaml":true},{"content":"The <xref:System.String.StartsWith%2A> method compares the `value` parameter to the substring at the beginning of this string and returns a value that indicates whether they are equal. To be equal, `value` must be a reference to this same string, must be the empty string (\"\"), or must match the beginning of this string. The type of comparison performed by the <xref:System.String.StartsWith%2A> method depends on the value of the `comparisonType` parameter. The comparison can use the conventions of the current culture (<xref:System.StringComparison?displayProperty=fullName> and <xref:System.StringComparison?displayProperty=fullName>) or the invariant culture (<xref:System.StringComparison?displayProperty=fullName> and <xref:System.StringComparison?displayProperty=fullName>), or it can consist of a character-by-character comparison of code points (<xref:System.StringComparison?displayProperty=fullName> or <xref:System.StringComparison?displayProperty=fullName>). The comparison can also be case-sensitive (<xref:System.StringComparison?displayProperty=fullName>, <xref:System.StringComparison?displayProperty=fullName>, or <xref:System.StringComparison?displayProperty=fullName>), or it can ignore case (<xref:System.StringComparison?displayProperty=fullName>, <xref:System.StringComparison?displayProperty=fullName>, <xref:System.StringComparison?displayProperty=fullName>).","nodes":[{"pos":[0,1386],"content":"The <xref:System.String.StartsWith%2A> method compares the `value` parameter to the substring at the beginning of this string and returns a value that indicates whether they are equal. To be equal, `value` must be a reference to this same string, must be the empty string (\"\"), or must match the beginning of this string. The type of comparison performed by the <xref:System.String.StartsWith%2A> method depends on the value of the `comparisonType` parameter. The comparison can use the conventions of the current culture (<xref:System.StringComparison?displayProperty=fullName> and <xref:System.StringComparison?displayProperty=fullName>) or the invariant culture (<xref:System.StringComparison?displayProperty=fullName> and <xref:System.StringComparison?displayProperty=fullName>), or it can consist of a character-by-character comparison of code points (<xref:System.StringComparison?displayProperty=fullName> or <xref:System.StringComparison?displayProperty=fullName>). The comparison can also be case-sensitive (<xref:System.StringComparison?displayProperty=fullName>, <xref:System.StringComparison?displayProperty=fullName>, or <xref:System.StringComparison?displayProperty=fullName>), or it can ignore case (<xref:System.StringComparison?displayProperty=fullName>, <xref:System.StringComparison?displayProperty=fullName>, <xref:System.StringComparison?displayProperty=fullName>).","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.String.StartsWith%2A&gt;</ph> method compares the <ph id=\"ph2\">`value`</ph> parameter to the substring at the beginning of this string and returns a value that indicates whether they are equal.","pos":[0,184],"source":"The <xref:System.String.StartsWith%2A> method compares the `value` parameter to the substring at the beginning of this string and returns a value that indicates whether they are equal."},{"content":"To be equal, <ph id=\"ph1\">`value`</ph> must be a reference to this same string, must be the empty string (\"\"), or must match the beginning of this string.","pos":[185,321],"source":" To be equal, `value` must be a reference to this same string, must be the empty string (\"\"), or must match the beginning of this string."},{"content":"The type of comparison performed by the <ph id=\"ph1\">&lt;xref:System.String.StartsWith%2A&gt;</ph> method depends on the value of the <ph id=\"ph2\">`comparisonType`</ph> parameter.","pos":[322,459],"source":" The type of comparison performed by the <xref:System.String.StartsWith%2A> method depends on the value of the `comparisonType` parameter."},{"content":"The comparison can use the conventions of the current culture (<ph id=\"ph1\">&lt;xref:System.StringComparison?displayProperty=fullName&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.StringComparison?displayProperty=fullName&gt;</ph>) or the invariant culture (<ph id=\"ph3\">&lt;xref:System.StringComparison?displayProperty=fullName&gt;</ph> and <ph id=\"ph4\">&lt;xref:System.StringComparison?displayProperty=fullName&gt;</ph>), or it can consist of a character-by-character comparison of code points (<ph id=\"ph5\">&lt;xref:System.StringComparison?displayProperty=fullName&gt;</ph> or <ph id=\"ph6\">&lt;xref:System.StringComparison?displayProperty=fullName&gt;</ph>).","pos":[460,973],"source":" The comparison can use the conventions of the current culture (<xref:System.StringComparison?displayProperty=fullName> and <xref:System.StringComparison?displayProperty=fullName>) or the invariant culture (<xref:System.StringComparison?displayProperty=fullName> and <xref:System.StringComparison?displayProperty=fullName>), or it can consist of a character-by-character comparison of code points (<xref:System.StringComparison?displayProperty=fullName> or <xref:System.StringComparison?displayProperty=fullName>)."},{"content":"The comparison can also be case-sensitive (<ph id=\"ph1\">&lt;xref:System.StringComparison?displayProperty=fullName&gt;</ph>, <ph id=\"ph2\">&lt;xref:System.StringComparison?displayProperty=fullName&gt;</ph>, or <ph id=\"ph3\">&lt;xref:System.StringComparison?displayProperty=fullName&gt;</ph>), or it can ignore case (<ph id=\"ph4\">&lt;xref:System.StringComparison?displayProperty=fullName&gt;</ph>, <ph id=\"ph5\">&lt;xref:System.StringComparison?displayProperty=fullName&gt;</ph>, <ph id=\"ph6\">&lt;xref:System.StringComparison?displayProperty=fullName&gt;</ph>).","pos":[974,1386],"source":" The comparison can also be case-sensitive (<xref:System.StringComparison?displayProperty=fullName>, <xref:System.StringComparison?displayProperty=fullName>, or <xref:System.StringComparison?displayProperty=fullName>), or it can ignore case (<xref:System.StringComparison?displayProperty=fullName>, <xref:System.StringComparison?displayProperty=fullName>, <xref:System.StringComparison?displayProperty=fullName>)."}]}],"pos":[609743,611130],"yaml":true,"extradata":"MT"},{"content":"The string to compare.","nodes":[{"pos":[0,22],"content":"The string to compare.","nodes":[{"content":"The string to compare.","pos":[0,22]}]}],"pos":[613231,613254],"yaml":true},{"content":"One of the enumeration values that determines how this string and <code>value</code> are compared.","nodes":[{"pos":[0,98],"content":"One of the enumeration values that determines how this string and <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept> are compared.","source":"One of the enumeration values that determines how this string and <code>value</code> are compared."}],"pos":[613334,613433],"yaml":true},{"content":"`true` if this instance begins with <code>value</code>; otherwise, `false`.","nodes":[{"pos":[0,75],"content":"<ph id=\"ph1\">`true`</ph> if this instance begins with <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept>; otherwise, <ph id=\"ph3\">`false`</ph>.","source":"`true` if this instance begins with <code>value</code>; otherwise, `false`."}],"pos":[613491,613569],"yaml":true},{"content":"<code>value</code> is `null`.","nodes":[{"pos":[0,29],"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>value</code> is `null`."}],"pos":[613723,613753],"yaml":true},{"content":"<code>comparisonType</code> is not a <xref href=\"System.StringComparison\"></xref> value.","nodes":[{"pos":[0,88],"content":"<ph id=\"ph1\">&lt;code&gt;comparisonType&lt;/code&gt;</ph> is not a <ph id=\"ph2\">&lt;xref href=\"System.StringComparison\"&gt;&lt;/xref&gt;</ph> value.","source":"<code>comparisonType</code> is not a <xref href=\"System.StringComparison\"></xref> value."}],"pos":[613847,613936],"yaml":true},{"content":"Determines whether the beginning of this string instance matches the specified string.","nodes":[{"pos":[0,86],"content":"Determines whether the beginning of this string instance matches the specified string.","nodes":[{"content":"Determines whether the beginning of this string instance matches the specified string.","pos":[0,86]}]}],"pos":[615458,615545],"yaml":true},{"content":"This method compares `value` to the substring at the beginning of this instance that is the same length as `value`, and returns an indication whether they are equal. To be equal, `value` must be an empty string (<xref:System.String?displayProperty=fullName>), must be a reference to this same instance, or must match the beginning of this instance.  \n  \n This method performs a word (case-sensitive and culture-sensitive) comparison using the current culture.","nodes":[{"pos":[0,348],"content":"This method compares `value` to the substring at the beginning of this instance that is the same length as `value`, and returns an indication whether they are equal. To be equal, `value` must be an empty string (<xref:System.String?displayProperty=fullName>), must be a reference to this same instance, or must match the beginning of this instance.","nodes":[{"content":"This method compares <ph id=\"ph1\">`value`</ph> to the substring at the beginning of this instance that is the same length as <ph id=\"ph2\">`value`</ph>, and returns an indication whether they are equal.","pos":[0,165],"source":"This method compares `value` to the substring at the beginning of this instance that is the same length as `value`, and returns an indication whether they are equal."},{"content":"To be equal, <ph id=\"ph1\">`value`</ph> must be an empty string (<ph id=\"ph2\">&lt;xref:System.String?displayProperty=fullName&gt;</ph>), must be a reference to this same instance, or must match the beginning of this instance.","pos":[166,348],"source":" To be equal, `value` must be an empty string (<xref:System.String?displayProperty=fullName>), must be a reference to this same instance, or must match the beginning of this instance."}]},{"pos":[355,459],"content":"This method performs a word (case-sensitive and culture-sensitive) comparison using the current culture.","nodes":[{"content":"This method performs a word (case-sensitive and culture-sensitive) comparison using the current culture.","pos":[0,104]}]}],"pos":[615556,616020],"yaml":true,"extradata":"MT"},{"content":"The string to compare.","nodes":[{"pos":[0,22],"content":"The string to compare.","nodes":[{"content":"The string to compare.","pos":[0,22]}]}],"pos":[616933,616956],"yaml":true},{"content":"`true` if <code>value</code> matches the beginning of this string; otherwise, `false`.","nodes":[{"pos":[0,86],"content":"<ph id=\"ph1\">`true`</ph> if <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept> matches the beginning of this string; otherwise, <ph id=\"ph3\">`false`</ph>.","source":"`true` if <code>value</code> matches the beginning of this string; otherwise, `false`."}],"pos":[617014,617103],"yaml":true},{"content":"<code>value</code> is `null`.","nodes":[{"pos":[0,29],"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>value</code> is `null`."}],"pos":[617257,617287],"yaml":true},{"content":"Retrieves a substring from this instance. The substring starts at a specified character position and continues to the end of the string.","nodes":[{"pos":[0,136],"content":"Retrieves a substring from this instance. The substring starts at a specified character position and continues to the end of the string.","nodes":[{"content":"Retrieves a substring from this instance. The substring starts at a specified character position and continues to the end of the string.","pos":[0,136],"nodes":[{"content":"Retrieves a substring from this instance.","pos":[0,41]},{"content":"The substring starts at a specified character position and continues to the end of the string.","pos":[42,136]}]}]}],"pos":[619456,619593],"yaml":true},{"content":"You call the <xref:System.String.Substring%2A> method to extract a substring from a string that begins at a specified character position and ends at the end of the string. The starting character position is a zero-based; in other words, the first character in the string is at index 0, not index 1. To extract a substring that begins at a specified character position and ends before to the end of the string, call the <xref:System.String.Substring%2A> method.  \n  \n> [!NOTE]\n>  This method does not modify the value of the current instance. Instead, it returns a new string that begins at the `startIndex` position in the current string.  \n  \n To extract a substring that begins with a particular character or character sequence, call a method such as  <xref:System.String.IndexOf%2A> or <xref:System.String.IndexOf%2A> to get the value of `startIndex`. The second example illustrates this; it extracts a key value that begins one character position after the \"=\" character.  \n  \n If `startIndex` is equal to zero, the method returns the original string unchanged.","nodes":[{"pos":[0,460],"content":"You call the <xref:System.String.Substring%2A> method to extract a substring from a string that begins at a specified character position and ends at the end of the string. The starting character position is a zero-based; in other words, the first character in the string is at index 0, not index 1. To extract a substring that begins at a specified character position and ends before to the end of the string, call the <xref:System.String.Substring%2A> method.","nodes":[{"content":"You call the <xref:System.String.Substring%2A> method to extract a substring from a string that begins at a specified character position and ends at the end of the string. The starting character position is a zero-based; in other words, the first character in the string is at index 0, not index 1. To extract a substring that begins at a specified character position and ends before to the end of the string, call the <xref:System.String.Substring%2A> method.","pos":[0,460],"nodes":[{"content":"You call the <ph id=\"ph1\">&lt;xref:System.String.Substring%2A&gt;</ph> method to extract a substring from a string that begins at a specified character position and ends at the end of the string.","pos":[0,171],"source":"You call the <xref:System.String.Substring%2A> method to extract a substring from a string that begins at a specified character position and ends at the end of the string."},{"content":"The starting character position is a zero-based; in other words, the first character in the string is at index 0, not index 1.","pos":[172,298]},{"content":"To extract a substring that begins at a specified character position and ends before to the end of the string, call the <ph id=\"ph1\">&lt;xref:System.String.Substring%2A&gt;</ph> method.","pos":[299,460],"source":" To extract a substring that begins at a specified character position and ends before to the end of the string, call the <xref:System.String.Substring%2A> method."}]}]},{"pos":[468,638],"content":"[!NOTE]\n This method does not modify the value of the current instance. Instead, it returns a new string that begins at the `startIndex` position in the current string.","leadings":["","> "],"nodes":[{"content":" This method does not modify the value of the current instance. Instead, it returns a new string that begins at the `startIndex` position in the current string.","pos":[8,168],"nodes":[{"content":"This method does not modify the value of the current instance.","pos":[1,63]},{"content":"Instead, it returns a new string that begins at the <ph id=\"ph1\">`startIndex`</ph> position in the current string.","pos":[64,160],"source":" Instead, it returns a new string that begins at the `startIndex` position in the current string."}]}]},{"pos":[645,975],"content":"To extract a substring that begins with a particular character or character sequence, call a method such as  <xref:System.String.IndexOf%2A> or <xref:System.String.IndexOf%2A> to get the value of `startIndex`. The second example illustrates this; it extracts a key value that begins one character position after the \"=\" character.","nodes":[{"content":"To extract a substring that begins with a particular character or character sequence, call a method such as  <ph id=\"ph1\">&lt;xref:System.String.IndexOf%2A&gt;</ph> or <ph id=\"ph2\">&lt;xref:System.String.IndexOf%2A&gt;</ph> to get the value of <ph id=\"ph3\">`startIndex`</ph>.","pos":[0,209],"source":"To extract a substring that begins with a particular character or character sequence, call a method such as  <xref:System.String.IndexOf%2A> or <xref:System.String.IndexOf%2A> to get the value of `startIndex`."},{"content":"The second example illustrates this; it extracts a key value that begins one character position after the \"=\" character.","pos":[210,330]}]},{"pos":[982,1065],"content":"If <ph id=\"ph1\">`startIndex`</ph> is equal to zero, the method returns the original string unchanged.","source":"If `startIndex` is equal to zero, the method returns the original string unchanged."}],"pos":[619604,620681],"yaml":true,"extradata":"MT"},{"content":"The zero-based starting character position of a substring in this instance.","nodes":[{"pos":[0,75],"content":"The zero-based starting character position of a substring in this instance.","nodes":[{"content":"The zero-based starting character position of a substring in this instance.","pos":[0,75]}]}],"pos":[622392,622468],"yaml":true},{"content":"A string that is equivalent to the substring that begins at <code>startIndex</code> in this instance, or <xref href=\"System.String.Empty\"></xref> if <code>startIndex</code> is equal to the length of this instance.","nodes":[{"pos":[0,213],"content":"A string that is equivalent to the substring that begins at <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">startIndex</ph><ept id=\"p1\">&lt;/code&gt;</ept> in this instance, or <ph id=\"ph2\">&lt;xref href=\"System.String.Empty\"&gt;&lt;/xref&gt;</ph> if <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph3\">startIndex</ph><ept id=\"p2\">&lt;/code&gt;</ept> is equal to the length of this instance.","source":"A string that is equivalent to the substring that begins at <code>startIndex</code> in this instance, or <xref href=\"System.String.Empty\"></xref> if <code>startIndex</code> is equal to the length of this instance."}],"pos":[622525,622739],"yaml":true},{"content":"<code>startIndex</code> is less than zero or greater than the length of this instance.","nodes":[{"pos":[0,86],"content":"<ph id=\"ph1\">&lt;code&gt;startIndex&lt;/code&gt;</ph> is less than zero or greater than the length of this instance.","source":"<code>startIndex</code> is less than zero or greater than the length of this instance."}],"pos":[622904,622991],"yaml":true},{"content":"Retrieves a substring from this instance. The substring starts at a specified character position and has a specified length.","nodes":[{"pos":[0,124],"content":"Retrieves a substring from this instance. The substring starts at a specified character position and has a specified length.","nodes":[{"content":"Retrieves a substring from this instance. The substring starts at a specified character position and has a specified length.","pos":[0,124],"nodes":[{"content":"Retrieves a substring from this instance.","pos":[0,41]},{"content":"The substring starts at a specified character position and has a specified length.","pos":[42,124]}]}]}],"pos":[624486,624611],"yaml":true},{"content":"You call the <xref:System.String.Substring%28System.Int32%2CSystem.Int32%29> method to extract a substring from a string that begins at a specified character position and ends before the end of the string. The starting character position is a zero-based; in other words, the first character in the string is at index 0, not index 1. To extract a substring that begins at a specified character position and continues to the end of the string, call the <xref:System.String.Substring%28System.Int32%29> method.  \n  \n> [!NOTE]\n>  This method does not modify the value of the current instance. Instead, it returns a new string with `length` characters starting from the `startIndex` position in the current string.  \n  \n The `length` parameter represents the total number of characters to extract from the current string instance. This includes the starting character found at index  `startIndex`.  In other words, the <xref:System.String.Substring%2A> method attempts to extract characters from index `startIndex` to index `startIndex` + `length` - 1.  \n  \n To extract a substring that begins with a particular character or character sequence, call a method such as  <xref:System.String.IndexOf%2A> or <xref:System.String.LastIndexOf%2A> to get the value of `startIndex`.  \n  \n If the substring extends from `startIndex` to a specified character sequence, you can call a method such as  <xref:System.String.IndexOf%2A> or <xref:System.String.LastIndexOf%2A> to get the index of the ending character or character sequence.  You can then convert that value to an index position in the string as follows:  \n  \n-   If you've searched for a single character that is to mark the end of the substring, the `length` parameter equals  `endIndex` - `startIndex` + 1, where `endIndex` is the return value of the <xref:System.String.IndexOf%2A> or <xref:System.String.IndexOf%2A> method. The following example extracts a continuous block of \"b\" characters from a string.  \n  \n     [!code-csharp[System.String.Substring#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.String.Substring/cs/Substring2.cs#2)]\n     [!code-vb[System.String.Substring#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.String.Substring/vb/Substring2.vb#2)]  \n  \n-   If you've searched for multiple characters that are to mark the end of the substring, the `length` parameter equals  `endIndex` + `endMatchLength` - `startIndex`, where `endIndex` is the return value of the <xref:System.String.IndexOf%2A> or <xref:System.String.IndexOf%2A> method., and `endMatchLength` is the length of the character sequence that marks the end of the substring. The following example extracts a block of text that contains an XML `<definition>` element.  \n  \n     [!code-csharp[System.String.Substring#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.String.Substring/cs/Substring3.cs#3)]\n     [!code-vb[System.String.Substring#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.String.Substring/vb/Substring3.vb#3)]  \n  \n-   If the character or character sequence is not included in the end of the substring, the `length` parameter equals `endIndex` - `startIndex`, where `endIndex` is the return value of the <xref:System.String.IndexOf%2A> or <xref:System.String.IndexOf%2A> method.  \n  \n If `startIndex` is equal to zero and  equals the length of the current string, the method returns the original string unchanged.","nodes":[{"pos":[0,507],"content":"You call the <xref:System.String.Substring%28System.Int32%2CSystem.Int32%29> method to extract a substring from a string that begins at a specified character position and ends before the end of the string. The starting character position is a zero-based; in other words, the first character in the string is at index 0, not index 1. To extract a substring that begins at a specified character position and continues to the end of the string, call the <xref:System.String.Substring%28System.Int32%29> method.","nodes":[{"content":"You call the <xref:System.String.Substring%28System.Int32%2CSystem.Int32%29> method to extract a substring from a string that begins at a specified character position and ends before the end of the string. The starting character position is a zero-based; in other words, the first character in the string is at index 0, not index 1. To extract a substring that begins at a specified character position and continues to the end of the string, call the <xref:System.String.Substring%28System.Int32%29> method.","pos":[0,507],"nodes":[{"content":"You call the <ph id=\"ph1\">&lt;xref:System.String.Substring%28System.Int32%2CSystem.Int32%29&gt;</ph> method to extract a substring from a string that begins at a specified character position and ends before the end of the string.","pos":[0,205],"source":"You call the <xref:System.String.Substring%28System.Int32%2CSystem.Int32%29> method to extract a substring from a string that begins at a specified character position and ends before the end of the string."},{"content":"The starting character position is a zero-based; in other words, the first character in the string is at index 0, not index 1.","pos":[206,332]},{"content":"To extract a substring that begins at a specified character position and continues to the end of the string, call the <ph id=\"ph1\">&lt;xref:System.String.Substring%28System.Int32%29&gt;</ph> method.","pos":[333,507],"source":" To extract a substring that begins at a specified character position and continues to the end of the string, call the <xref:System.String.Substring%28System.Int32%29> method."}]}]},{"pos":[515,709],"content":"[!NOTE]\n This method does not modify the value of the current instance. Instead, it returns a new string with `length` characters starting from the `startIndex` position in the current string.","leadings":["","> "],"nodes":[{"content":" This method does not modify the value of the current instance. Instead, it returns a new string with `length` characters starting from the `startIndex` position in the current string.","pos":[8,192],"nodes":[{"content":"This method does not modify the value of the current instance.","pos":[1,63]},{"content":"Instead, it returns a new string with <ph id=\"ph1\">`length`</ph> characters starting from the <ph id=\"ph2\">`startIndex`</ph> position in the current string.","pos":[64,184],"source":" Instead, it returns a new string with `length` characters starting from the `startIndex` position in the current string."}]}]},{"pos":[716,1047],"content":"The `length` parameter represents the total number of characters to extract from the current string instance. This includes the starting character found at index  `startIndex`.  In other words, the <xref:System.String.Substring%2A> method attempts to extract characters from index `startIndex` to index `startIndex` + `length` - 1.","nodes":[{"content":"The <ph id=\"ph1\">`length`</ph> parameter represents the total number of characters to extract from the current string instance.","pos":[0,109],"source":"The `length` parameter represents the total number of characters to extract from the current string instance."},{"content":"This includes the starting character found at index  <ph id=\"ph1\">`startIndex`</ph>.","pos":[110,176],"source":" This includes the starting character found at index  `startIndex`."},{"content":"In other words, the <ph id=\"ph1\">&lt;xref:System.String.Substring%2A&gt;</ph> method attempts to extract characters from index <ph id=\"ph2\">`startIndex`</ph> to index <ph id=\"ph3\">`startIndex`</ph><ph id=\"ph4\"> + </ph><ph id=\"ph5\">`length`</ph> - 1.","pos":[178,331],"source":"  In other words, the <xref:System.String.Substring%2A> method attempts to extract characters from index `startIndex` to index `startIndex` + `length` - 1."}]},{"pos":[1054,1267],"content":"To extract a substring that begins with a particular character or character sequence, call a method such as  <ph id=\"ph1\">&lt;xref:System.String.IndexOf%2A&gt;</ph> or <ph id=\"ph2\">&lt;xref:System.String.LastIndexOf%2A&gt;</ph> to get the value of <ph id=\"ph3\">`startIndex`</ph>.","source":"To extract a substring that begins with a particular character or character sequence, call a method such as  <xref:System.String.IndexOf%2A> or <xref:System.String.LastIndexOf%2A> to get the value of `startIndex`."},{"pos":[1274,1597],"content":"If the substring extends from `startIndex` to a specified character sequence, you can call a method such as  <xref:System.String.IndexOf%2A> or <xref:System.String.LastIndexOf%2A> to get the index of the ending character or character sequence.  You can then convert that value to an index position in the string as follows:","nodes":[{"content":"If the substring extends from <ph id=\"ph1\">`startIndex`</ph> to a specified character sequence, you can call a method such as  <ph id=\"ph2\">&lt;xref:System.String.IndexOf%2A&gt;</ph> or <ph id=\"ph3\">&lt;xref:System.String.LastIndexOf%2A&gt;</ph> to get the index of the ending character or character sequence.","pos":[0,243],"source":"If the substring extends from `startIndex` to a specified character sequence, you can call a method such as  <xref:System.String.IndexOf%2A> or <xref:System.String.LastIndexOf%2A> to get the index of the ending character or character sequence."},{"content":"You can then convert that value to an index position in the string as follows:","pos":[245,323]}]},{"pos":[1607,1954],"content":"If you've searched for a single character that is to mark the end of the substring, the `length` parameter equals  `endIndex` - `startIndex` + 1, where `endIndex` is the return value of the <xref:System.String.IndexOf%2A> or <xref:System.String.IndexOf%2A> method. The following example extracts a continuous block of \"b\" characters from a string.","nodes":[{"content":"If you've searched for a single character that is to mark the end of the substring, the <ph id=\"ph1\">`length`</ph> parameter equals  <ph id=\"ph2\">`endIndex`</ph><ph id=\"ph3\"> - </ph><ph id=\"ph4\">`startIndex`</ph> + 1, where <ph id=\"ph5\">`endIndex`</ph> is the return value of the <ph id=\"ph6\">&lt;xref:System.String.IndexOf%2A&gt;</ph> or <ph id=\"ph7\">&lt;xref:System.String.IndexOf%2A&gt;</ph> method.","pos":[0,264],"source":"If you've searched for a single character that is to mark the end of the substring, the `length` parameter equals  `endIndex` - `startIndex` + 1, where `endIndex` is the return value of the <xref:System.String.IndexOf%2A> or <xref:System.String.IndexOf%2A> method."},{"content":"The following example extracts a continuous block of \"b\" characters from a string.","pos":[265,347]}]},{"pos":[1965,2240],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>System.String.Substring#2<ept id=\"p2\">](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.String.Substring/cs/Substring2.cs#2)</ept><ept id=\"p1\">]</ept>  <bpt id=\"p3\">[!code-vb</bpt><bpt id=\"p4\">[</bpt>System.String.Substring#2<ept id=\"p4\">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.String.Substring/vb/Substring2.vb#2)</ept><ept id=\"p3\">]</ept>","leadings":["","    "],"source":"[!code-csharp[System.String.Substring#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.String.Substring/cs/Substring2.cs#2)]\n [!code-vb[System.String.Substring#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.String.Substring/vb/Substring2.vb#2)]"},{"pos":[2250,2722],"content":"If you've searched for multiple characters that are to mark the end of the substring, the `length` parameter equals  `endIndex` + `endMatchLength` - `startIndex`, where `endIndex` is the return value of the <xref:System.String.IndexOf%2A> or <xref:System.String.IndexOf%2A> method., and `endMatchLength` is the length of the character sequence that marks the end of the substring. The following example extracts a block of text that contains an XML `<definition>` element.","nodes":[{"content":"If you've searched for multiple characters that are to mark the end of the substring, the <ph id=\"ph1\">`length`</ph> parameter equals  <ph id=\"ph2\">`endIndex`</ph><ph id=\"ph3\"> + </ph><ph id=\"ph4\">`endMatchLength`</ph><ph id=\"ph5\"> - </ph><ph id=\"ph6\">`startIndex`</ph>, where <ph id=\"ph7\">`endIndex`</ph> is the return value of the <ph id=\"ph8\">&lt;xref:System.String.IndexOf%2A&gt;</ph> or <ph id=\"ph9\">&lt;xref:System.String.IndexOf%2A&gt;</ph> method., and <ph id=\"ph10\">`endMatchLength`</ph> is the length of the character sequence that marks the end of the substring.","pos":[0,380],"source":"If you've searched for multiple characters that are to mark the end of the substring, the `length` parameter equals  `endIndex` + `endMatchLength` - `startIndex`, where `endIndex` is the return value of the <xref:System.String.IndexOf%2A> or <xref:System.String.IndexOf%2A> method., and `endMatchLength` is the length of the character sequence that marks the end of the substring."},{"content":"The following example extracts a block of text that contains an XML <ph id=\"ph1\">`&lt;definition&gt;`</ph> element.","pos":[381,472],"source":" The following example extracts a block of text that contains an XML `<definition>` element."}]},{"pos":[2733,3008],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>System.String.Substring#3<ept id=\"p2\">](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.String.Substring/cs/Substring3.cs#3)</ept><ept id=\"p1\">]</ept>  <bpt id=\"p3\">[!code-vb</bpt><bpt id=\"p4\">[</bpt>System.String.Substring#3<ept id=\"p4\">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.String.Substring/vb/Substring3.vb#3)</ept><ept id=\"p3\">]</ept>","leadings":["","    "],"source":"[!code-csharp[System.String.Substring#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.String.Substring/cs/Substring3.cs#3)]\n [!code-vb[System.String.Substring#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.String.Substring/vb/Substring3.vb#3)]"},{"pos":[3018,3277],"content":"If the character or character sequence is not included in the end of the substring, the <ph id=\"ph1\">`length`</ph> parameter equals <ph id=\"ph2\">`endIndex`</ph><ph id=\"ph3\"> - </ph><ph id=\"ph4\">`startIndex`</ph>, where <ph id=\"ph5\">`endIndex`</ph> is the return value of the <ph id=\"ph6\">&lt;xref:System.String.IndexOf%2A&gt;</ph> or <ph id=\"ph7\">&lt;xref:System.String.IndexOf%2A&gt;</ph> method.","source":"If the character or character sequence is not included in the end of the substring, the `length` parameter equals `endIndex` - `startIndex`, where `endIndex` is the return value of the <xref:System.String.IndexOf%2A> or <xref:System.String.IndexOf%2A> method."},{"pos":[3284,3412],"content":"If <ph id=\"ph1\">`startIndex`</ph> is equal to zero and  equals the length of the current string, the method returns the original string unchanged.","source":"If `startIndex` is equal to zero and  equals the length of the current string, the method returns the original string unchanged."}],"pos":[624622,628062],"yaml":true,"extradata":"MT"},{"content":"The zero-based starting character position of a substring in this instance.","nodes":[{"pos":[0,75],"content":"The zero-based starting character position of a substring in this instance.","nodes":[{"content":"The zero-based starting character position of a substring in this instance.","pos":[0,75]}]}],"pos":[631127,631203],"yaml":true},{"content":"The number of characters in the substring.","nodes":[{"pos":[0,42],"content":"The number of characters in the substring.","nodes":[{"content":"The number of characters in the substring.","pos":[0,42]}]}],"pos":[631264,631307],"yaml":true},{"content":"A string that is equivalent to the substring of length <code>length</code> that begins at <code>startIndex</code> in this instance, or <xref href=\"System.String.Empty\"></xref> if <code>startIndex</code> is equal to the length of this instance and <code>length</code> is zero.","nodes":[{"pos":[0,275],"content":"A string that is equivalent to the substring of length <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">length</ph><ept id=\"p1\">&lt;/code&gt;</ept> that begins at <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">startIndex</ph><ept id=\"p2\">&lt;/code&gt;</ept> in this instance, or <ph id=\"ph3\">&lt;xref href=\"System.String.Empty\"&gt;&lt;/xref&gt;</ph> if <bpt id=\"p3\">&lt;code&gt;</bpt><ph id=\"ph4\">startIndex</ph><ept id=\"p3\">&lt;/code&gt;</ept> is equal to the length of this instance and <bpt id=\"p4\">&lt;code&gt;</bpt><ph id=\"ph5\">length</ph><ept id=\"p4\">&lt;/code&gt;</ept> is zero.","source":"A string that is equivalent to the substring of length <code>length</code> that begins at <code>startIndex</code> in this instance, or <xref href=\"System.String.Empty\"></xref> if <code>startIndex</code> is equal to the length of this instance and <code>length</code> is zero."}],"pos":[631364,631640],"yaml":true},{"content":"<code>startIndex</code> plus <code>length</code> indicates a position not within this instance.  \n  \n -or-  \n  \n <code>startIndex</code> or <code>length</code> is less than zero.","nodes":[{"pos":[0,95],"content":"<ph id=\"ph1\">&lt;code&gt;startIndex&lt;/code&gt;</ph> plus <ph id=\"ph2\">&lt;code&gt;length&lt;/code&gt;</ph> indicates a position not within this instance.","source":"<code>startIndex</code> plus <code>length</code> indicates a position not within this instance."},{"pos":[102,106],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[113,178],"content":"<ph id=\"ph1\">&lt;code&gt;startIndex&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;length&lt;/code&gt;</ph> is less than zero.","source":"<code>startIndex</code> or <code>length</code> is less than zero."}],"pos":[631805,631990],"yaml":true},{"content":"Copies the characters in a specified substring in this instance to a Unicode character array.","nodes":[{"pos":[0,93],"content":"Copies the characters in a specified substring in this instance to a Unicode character array.","nodes":[{"content":"Copies the characters in a specified substring in this instance to a Unicode character array.","pos":[0,93]}]}],"pos":[633514,633608],"yaml":true},{"content":"This method copies the characters in a portion of a string to a character array. To create a string from a range of characters in a character array, call the  <xref:System.String.%23ctor%28System.Char%5B%5D%2CSystem.Int32%2CSystem.Int32%29> constructor.  \n  \n The `startIndex` parameter is zero-based. That is, the index of the first character in the string instance is zero.  \n  \n If `length` is zero, the returned array is empty and has a zero length. If this instance is `null` or an empty string (\"\"), the returned array is empty and has a zero length.  \n  \n To create a byte array that contains the encoded characters in a portion of a string, instantiate the appropriate <xref:System.Text.Encoding> object and call its <xref:System.Text.Encoding.GetBytes%28System.String%2CSystem.Int32%2CSystem.Int32%2CSystem.Byte%5B%5D%2CSystem.Int32%29> method. Some of the standard encodings available in the .NET Framework include the following:  \n  \n|Encoding|Object|  \n|--------------|------------|  \n|ASCII|<xref:System.Text.ASCIIEncoding>|  \n|UTF-7|<xref:System.Text.UTF7Encoding>|  \n|UTF-8|<xref:System.Text.UTF8Encoding>|  \n|UTF-16|<xref:System.Text.UnicodeEncoding>|  \n|UTF-32|<xref:System.Text.UTF32Encoding>|  \n  \n For more information, see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md).","nodes":[{"pos":[0,253],"content":"This method copies the characters in a portion of a string to a character array. To create a string from a range of characters in a character array, call the  <xref:System.String.%23ctor%28System.Char%5B%5D%2CSystem.Int32%2CSystem.Int32%29> constructor.","nodes":[{"content":"This method copies the characters in a portion of a string to a character array. To create a string from a range of characters in a character array, call the  <xref:System.String.%23ctor%28System.Char%5B%5D%2CSystem.Int32%2CSystem.Int32%29> constructor.","pos":[0,253],"nodes":[{"content":"This method copies the characters in a portion of a string to a character array.","pos":[0,80]},{"content":"To create a string from a range of characters in a character array, call the  <ph id=\"ph1\">&lt;xref:System.String.%23ctor%28System.Char%5B%5D%2CSystem.Int32%2CSystem.Int32%29&gt;</ph> constructor.","pos":[81,253],"source":" To create a string from a range of characters in a character array, call the  <xref:System.String.%23ctor%28System.Char%5B%5D%2CSystem.Int32%2CSystem.Int32%29> constructor."}]}]},{"pos":[260,375],"content":"The `startIndex` parameter is zero-based. That is, the index of the first character in the string instance is zero.","nodes":[{"content":"The <ph id=\"ph1\">`startIndex`</ph> parameter is zero-based.","pos":[0,41],"source":"The `startIndex` parameter is zero-based."},{"content":"That is, the index of the first character in the string instance is zero.","pos":[42,115]}]},{"pos":[382,556],"content":"If `length` is zero, the returned array is empty and has a zero length. If this instance is `null` or an empty string (\"\"), the returned array is empty and has a zero length.","nodes":[{"content":"If <ph id=\"ph1\">`length`</ph> is zero, the returned array is empty and has a zero length.","pos":[0,71],"source":"If `length` is zero, the returned array is empty and has a zero length."},{"content":"If this instance is <ph id=\"ph1\">`null`</ph> or an empty string (\"\"), the returned array is empty and has a zero length.","pos":[72,174],"source":" If this instance is `null` or an empty string (\"\"), the returned array is empty and has a zero length."}]},{"pos":[563,939],"content":"To create a byte array that contains the encoded characters in a portion of a string, instantiate the appropriate <xref:System.Text.Encoding> object and call its <xref:System.Text.Encoding.GetBytes%28System.String%2CSystem.Int32%2CSystem.Int32%2CSystem.Byte%5B%5D%2CSystem.Int32%29> method. Some of the standard encodings available in the .NET Framework include the following:","nodes":[{"content":"To create a byte array that contains the encoded characters in a portion of a string, instantiate the appropriate <xref:System.Text.Encoding> object and call its <xref:System.Text.Encoding.GetBytes%28System.String%2CSystem.Int32%2CSystem.Int32%2CSystem.Byte%5B%5D%2CSystem.Int32%29> method. Some of the standard encodings available in the .NET Framework include the following:","pos":[0,376],"nodes":[{"content":"To create a byte array that contains the encoded characters in a portion of a string, instantiate the appropriate <ph id=\"ph1\">&lt;xref:System.Text.Encoding&gt;</ph> object and call its <ph id=\"ph2\">&lt;xref:System.Text.Encoding.GetBytes%28System.String%2CSystem.Int32%2CSystem.Int32%2CSystem.Byte%5B%5D%2CSystem.Int32%29&gt;</ph> method.","pos":[0,290],"source":"To create a byte array that contains the encoded characters in a portion of a string, instantiate the appropriate <xref:System.Text.Encoding> object and call its <xref:System.Text.Encoding.GetBytes%28System.String%2CSystem.Int32%2CSystem.Int32%2CSystem.Byte%5B%5D%2CSystem.Int32%29> method."},{"content":"Some of the standard encodings available in the .NET Framework include the following:","pos":[291,376]}]}]},{"pos":[946,954],"content":"Encoding","nodes":[{"content":"Encoding","pos":[0,8]}]},{"pos":[955,961],"content":"Object","nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[998,1003],"content":"ASCII","nodes":[{"content":"ASCII","pos":[0,5]}]},{"pos":[1004,1036],"content":"<xref:System.Text.ASCIIEncoding>","nodes":[]},{"pos":[1041,1046],"content":"UTF-7","nodes":[{"content":"UTF-7","pos":[0,5]}]},{"pos":[1047,1078],"content":"<xref:System.Text.UTF7Encoding>","nodes":[]},{"pos":[1083,1088],"content":"UTF-8","nodes":[{"content":"UTF-8","pos":[0,5]}]},{"pos":[1089,1120],"content":"<xref:System.Text.UTF8Encoding>","nodes":[]},{"pos":[1125,1131],"content":"UTF-16","nodes":[{"content":"UTF-16","pos":[0,6]}]},{"pos":[1132,1166],"content":"<xref:System.Text.UnicodeEncoding>","nodes":[]},{"pos":[1171,1177],"content":"UTF-32","nodes":[{"content":"UTF-32","pos":[0,6]}]},{"pos":[1178,1210],"content":"<xref:System.Text.UTF32Encoding>","nodes":[]},{"pos":[1218,1337],"content":"For more information, see <bpt id=\"p1\">[</bpt>Character Encoding in the .NET Framework<ept id=\"p1\">](~/docs/standard/base-types/character-encoding.md)</ept>.","source":"For more information, see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md)."}],"pos":[633619,634977],"yaml":true,"extradata":"MT"},{"content":"The starting position of a substring in this instance.","nodes":[{"pos":[0,54],"content":"The starting position of a substring in this instance.","nodes":[{"content":"The starting position of a substring in this instance.","pos":[0,54]}]}],"pos":[635662,635717],"yaml":true},{"content":"The length of the substring in this instance.","nodes":[{"pos":[0,45],"content":"The length of the substring in this instance.","nodes":[{"content":"The length of the substring in this instance.","pos":[0,45]}]}],"pos":[635778,635824],"yaml":true},{"content":"A Unicode character array whose elements are the <code>length</code> number of characters in this instance starting from character position <code>startIndex</code>.","nodes":[{"pos":[0,164],"content":"A Unicode character array whose elements are the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">length</ph><ept id=\"p1\">&lt;/code&gt;</ept> number of characters in this instance starting from character position <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">startIndex</ph><ept id=\"p2\">&lt;/code&gt;</ept>.","source":"A Unicode character array whose elements are the <code>length</code> number of characters in this instance starting from character position <code>startIndex</code>."}],"pos":[635881,636046],"yaml":true},{"content":"<code>startIndex</code> or <code>length</code> is less than zero.  \n  \n -or-  \n  \n <code>startIndex</code> plus <code>length</code> is greater than the length of this instance.","nodes":[{"pos":[0,65],"content":"<ph id=\"ph1\">&lt;code&gt;startIndex&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;length&lt;/code&gt;</ph> is less than zero.","source":"<code>startIndex</code> or <code>length</code> is less than zero."},{"pos":[72,76],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[83,176],"content":"<ph id=\"ph1\">&lt;code&gt;startIndex&lt;/code&gt;</ph> plus <ph id=\"ph2\">&lt;code&gt;length&lt;/code&gt;</ph> is greater than the length of this instance.","source":"<code>startIndex</code> plus <code>length</code> is greater than the length of this instance."}],"pos":[636213,636396],"yaml":true},{"content":"Copies the characters in this instance to a Unicode character array.","nodes":[{"pos":[0,68],"content":"Copies the characters in this instance to a Unicode character array.","nodes":[{"content":"Copies the characters in this instance to a Unicode character array.","pos":[0,68]}]}],"pos":[637803,637872],"yaml":true},{"content":"This method copies each character (that is, each <xref:System.Char> object) in a string to a character array. The first character copied is at index zero of the returned character array; the last character copied is at index <xref:System.Array.Length%2A?displayProperty=fullName> â 1.  \n  \n To create a string from the characters in a character array, call the <xref:System.String.%23ctor%28System.Char%5B%5D%29> constructor.  \n  \n To create a byte array that contains the encoded characters in a string, instantiate the appropriate <xref:System.Text.Encoding> object and call its <xref:System.Text.Encoding.GetBytes%28System.String%29?displayProperty=fullName> method. Some of the standard encodings available in the .NET Framework include the following:  \n  \n|Encoding|Object|  \n|--------------|------------|  \n|ASCII|<xref:System.Text.ASCIIEncoding>|  \n|UTF-7|<xref:System.Text.UTF7Encoding>|  \n|UTF-8|<xref:System.Text.UTF8Encoding>|  \n|UTF-16|<xref:System.Text.UnicodeEncoding>|  \n|UTF-32|<xref:System.Text.UTF32Encoding>|  \n  \n For more information, see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md).","nodes":[{"pos":[0,284],"content":"This method copies each character (that is, each <xref:System.Char> object) in a string to a character array. The first character copied is at index zero of the returned character array; the last character copied is at index <xref:System.Array.Length%2A?displayProperty=fullName> â 1.","nodes":[{"content":"This method copies each character (that is, each <xref:System.Char> object) in a string to a character array. The first character copied is at index zero of the returned character array; the last character copied is at index <xref:System.Array.Length%2A?displayProperty=fullName> â 1.","pos":[0,284],"nodes":[{"content":"This method copies each character (that is, each <ph id=\"ph1\">&lt;xref:System.Char&gt;</ph> object) in a string to a character array.","pos":[0,109],"source":"This method copies each character (that is, each <xref:System.Char> object) in a string to a character array."},{"content":"The first character copied is at index zero of the returned character array; the last character copied is at index <ph id=\"ph1\">&lt;xref:System.Array.Length%2A?displayProperty=fullName&gt;</ph> â 1.","pos":[110,284],"source":" The first character copied is at index zero of the returned character array; the last character copied is at index <xref:System.Array.Length%2A?displayProperty=fullName> â 1."}]}]},{"pos":[291,425],"content":"To create a string from the characters in a character array, call the <xref:System.String.%23ctor%28System.Char%5B%5D%29> constructor.","nodes":[{"content":"To create a string from the characters in a character array, call the <ph id=\"ph1\">&lt;xref:System.String.%23ctor%28System.Char%5B%5D%29&gt;</ph> constructor.","pos":[0,134],"source":"To create a string from the characters in a character array, call the <xref:System.String.%23ctor%28System.Char%5B%5D%29> constructor."}]},{"pos":[432,755],"content":"To create a byte array that contains the encoded characters in a string, instantiate the appropriate <xref:System.Text.Encoding> object and call its <xref:System.Text.Encoding.GetBytes%28System.String%29?displayProperty=fullName> method. Some of the standard encodings available in the .NET Framework include the following:","nodes":[{"content":"To create a byte array that contains the encoded characters in a string, instantiate the appropriate <xref:System.Text.Encoding> object and call its <xref:System.Text.Encoding.GetBytes%28System.String%29?displayProperty=fullName> method. Some of the standard encodings available in the .NET Framework include the following:","pos":[0,323],"nodes":[{"content":"To create a byte array that contains the encoded characters in a string, instantiate the appropriate <ph id=\"ph1\">&lt;xref:System.Text.Encoding&gt;</ph> object and call its <ph id=\"ph2\">&lt;xref:System.Text.Encoding.GetBytes%28System.String%29?displayProperty=fullName&gt;</ph> method.","pos":[0,237],"source":"To create a byte array that contains the encoded characters in a string, instantiate the appropriate <xref:System.Text.Encoding> object and call its <xref:System.Text.Encoding.GetBytes%28System.String%29?displayProperty=fullName> method."},{"content":"Some of the standard encodings available in the .NET Framework include the following:","pos":[238,323]}]}]},{"pos":[762,770],"content":"Encoding","nodes":[{"content":"Encoding","pos":[0,8]}]},{"pos":[771,777],"content":"Object","nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[814,819],"content":"ASCII","nodes":[{"content":"ASCII","pos":[0,5]}]},{"pos":[820,852],"content":"<xref:System.Text.ASCIIEncoding>","nodes":[]},{"pos":[857,862],"content":"UTF-7","nodes":[{"content":"UTF-7","pos":[0,5]}]},{"pos":[863,894],"content":"<xref:System.Text.UTF7Encoding>","nodes":[]},{"pos":[899,904],"content":"UTF-8","nodes":[{"content":"UTF-8","pos":[0,5]}]},{"pos":[905,936],"content":"<xref:System.Text.UTF8Encoding>","nodes":[]},{"pos":[941,947],"content":"UTF-16","nodes":[{"content":"UTF-16","pos":[0,6]}]},{"pos":[948,982],"content":"<xref:System.Text.UnicodeEncoding>","nodes":[]},{"pos":[987,993],"content":"UTF-32","nodes":[{"content":"UTF-32","pos":[0,6]}]},{"pos":[994,1026],"content":"<xref:System.Text.UTF32Encoding>","nodes":[]},{"pos":[1034,1153],"content":"For more information, see <bpt id=\"p1\">[</bpt>Character Encoding in the .NET Framework<ept id=\"p1\">](~/docs/standard/base-types/character-encoding.md)</ept>.","source":"For more information, see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md)."}],"pos":[637883,639053],"yaml":true,"extradata":"MT"},{"content":"A Unicode character array whose elements are the individual characters of this instance. If this instance is an empty string, the returned array is empty and has a zero length.","nodes":[{"pos":[0,176],"content":"A Unicode character array whose elements are the individual characters of this instance. If this instance is an empty string, the returned array is empty and has a zero length.","nodes":[{"content":"A Unicode character array whose elements are the individual characters of this instance. If this instance is an empty string, the returned array is empty and has a zero length.","pos":[0,176],"nodes":[{"content":"A Unicode character array whose elements are the individual characters of this instance.","pos":[0,88]},{"content":"If this instance is an empty string, the returned array is empty and has a zero length.","pos":[89,176]}]}]}],"pos":[640388,640565],"yaml":true},{"content":"Returns a copy of this string converted to lowercase.","nodes":[{"pos":[0,53],"content":"Returns a copy of this string converted to lowercase.","nodes":[{"content":"Returns a copy of this string converted to lowercase.","pos":[0,53]}]}],"pos":[642004,642058],"yaml":true},{"content":"This method takes into account the casing rules of the current culture.  \n  \n> [!NOTE]\n>  This method does not modify the value of the current instance. Instead, it returns a new string in which all characters in the current instance are converted to lowercase.  \n  \n## Security Considerations  \n The casing operation that results from calling the <xref:System.String.ToLower> method takes the casing conventions of the current culture into account. If you need the lowercase or uppercase version of an operating system identifier, such as a file name, named pipe, or registry key, use the <xref:System.String.ToLowerInvariant%2A> or <xref:System.String.ToUpperInvariant%2A> methods. This produces the same result in every culture (unlike the <xref:System.String.ToLower> method) and performs more efficiently.","nodes":[{"pos":[0,71],"content":"This method takes into account the casing rules of the current culture.","nodes":[{"content":"This method takes into account the casing rules of the current culture.","pos":[0,71]}]},{"pos":[79,261],"content":"[!NOTE]\n This method does not modify the value of the current instance. Instead, it returns a new string in which all characters in the current instance are converted to lowercase.","leadings":["","> "],"nodes":[{"content":" This method does not modify the value of the current instance. Instead, it returns a new string in which all characters in the current instance are converted to lowercase.","pos":[8,180],"nodes":[{"content":"This method does not modify the value of the current instance.","pos":[1,63]},{"content":"Instead, it returns a new string in which all characters in the current instance are converted to lowercase.","pos":[64,172]}]}]},{"pos":[270,293],"content":"Security Considerations","linkify":"Security Considerations","nodes":[{"content":"Security Considerations","pos":[0,23]}]},{"pos":[297,810],"content":"The casing operation that results from calling the <xref:System.String.ToLower> method takes the casing conventions of the current culture into account. If you need the lowercase or uppercase version of an operating system identifier, such as a file name, named pipe, or registry key, use the <xref:System.String.ToLowerInvariant%2A> or <xref:System.String.ToUpperInvariant%2A> methods. This produces the same result in every culture (unlike the <xref:System.String.ToLower> method) and performs more efficiently.","nodes":[{"content":"The casing operation that results from calling the <xref:System.String.ToLower> method takes the casing conventions of the current culture into account. If you need the lowercase or uppercase version of an operating system identifier, such as a file name, named pipe, or registry key, use the <xref:System.String.ToLowerInvariant%2A> or <xref:System.String.ToUpperInvariant%2A> methods. This produces the same result in every culture (unlike the <xref:System.String.ToLower> method) and performs more efficiently.","pos":[0,513],"nodes":[{"content":"The casing operation that results from calling the <ph id=\"ph1\">&lt;xref:System.String.ToLower&gt;</ph> method takes the casing conventions of the current culture into account.","pos":[0,152],"source":"The casing operation that results from calling the <xref:System.String.ToLower> method takes the casing conventions of the current culture into account."},{"content":"If you need the lowercase or uppercase version of an operating system identifier, such as a file name, named pipe, or registry key, use the <ph id=\"ph1\">&lt;xref:System.String.ToLowerInvariant%2A&gt;</ph> or <ph id=\"ph2\">&lt;xref:System.String.ToUpperInvariant%2A&gt;</ph> methods.","pos":[153,386],"source":" If you need the lowercase or uppercase version of an operating system identifier, such as a file name, named pipe, or registry key, use the <xref:System.String.ToLowerInvariant%2A> or <xref:System.String.ToUpperInvariant%2A> methods."},{"content":"This produces the same result in every culture (unlike the <ph id=\"ph1\">&lt;xref:System.String.ToLower&gt;</ph> method) and performs more efficiently.","pos":[387,513],"source":" This produces the same result in every culture (unlike the <xref:System.String.ToLower> method) and performs more efficiently."}]}]}],"pos":[642069,642888],"yaml":true,"extradata":"MT"},{"content":"A string in lowercase.","nodes":[{"pos":[0,22],"content":"A string in lowercase.","nodes":[{"content":"A string in lowercase.","pos":[0,22]}]}],"pos":[643462,643485],"yaml":true},{"content":"Returns a copy of this string converted to lowercase, using the casing rules of the specified culture.","nodes":[{"pos":[0,102],"content":"Returns a copy of this string converted to lowercase, using the casing rules of the specified culture.","nodes":[{"content":"Returns a copy of this string converted to lowercase, using the casing rules of the specified culture.","pos":[0,102]}]}],"pos":[645038,645141],"yaml":true},{"content":"The casing rules of the culture specified by the `culture` parameter determine the way the case of the string is changed.  \n  \n> [!NOTE]\n>  This method does not modify the value of the current instance. Instead, it returns a new string in which all characters in the current instance are converted to lowercase.  \n  \n## Security Considerations  \n If you pass the <xref:System.String.ToLower%28System.Globalization.CultureInfo%29> method a <xref:System.Globalization.CultureInfo> object other than <xref:System.Globalization.CultureInfo.InvariantCulture%2A?displayProperty=fullName>, the casing operation will take culture-specific rules into account. If you need the lowercase or uppercase version of an operating system identifier, such as a file name, named pipe, or registry key, use the <xref:System.String.ToLowerInvariant%2A> or <xref:System.String.ToUpperInvariant%2A> method. This produces the same result in every culture and performs more efficiently.","nodes":[{"pos":[0,121],"content":"The casing rules of the culture specified by the <ph id=\"ph1\">`culture`</ph> parameter determine the way the case of the string is changed.","source":"The casing rules of the culture specified by the `culture` parameter determine the way the case of the string is changed."},{"pos":[129,311],"content":"[!NOTE]\n This method does not modify the value of the current instance. Instead, it returns a new string in which all characters in the current instance are converted to lowercase.","leadings":["","> "],"nodes":[{"content":" This method does not modify the value of the current instance. Instead, it returns a new string in which all characters in the current instance are converted to lowercase.","pos":[8,180],"nodes":[{"content":"This method does not modify the value of the current instance.","pos":[1,63]},{"content":"Instead, it returns a new string in which all characters in the current instance are converted to lowercase.","pos":[64,172]}]}]},{"pos":[320,343],"content":"Security Considerations","linkify":"Security Considerations","nodes":[{"content":"Security Considerations","pos":[0,23]}]},{"pos":[347,961],"content":"If you pass the <xref:System.String.ToLower%28System.Globalization.CultureInfo%29> method a <xref:System.Globalization.CultureInfo> object other than <xref:System.Globalization.CultureInfo.InvariantCulture%2A?displayProperty=fullName>, the casing operation will take culture-specific rules into account. If you need the lowercase or uppercase version of an operating system identifier, such as a file name, named pipe, or registry key, use the <xref:System.String.ToLowerInvariant%2A> or <xref:System.String.ToUpperInvariant%2A> method. This produces the same result in every culture and performs more efficiently.","nodes":[{"content":"If you pass the <xref:System.String.ToLower%28System.Globalization.CultureInfo%29> method a <xref:System.Globalization.CultureInfo> object other than <xref:System.Globalization.CultureInfo.InvariantCulture%2A?displayProperty=fullName>, the casing operation will take culture-specific rules into account. If you need the lowercase or uppercase version of an operating system identifier, such as a file name, named pipe, or registry key, use the <xref:System.String.ToLowerInvariant%2A> or <xref:System.String.ToUpperInvariant%2A> method. This produces the same result in every culture and performs more efficiently.","pos":[0,614],"nodes":[{"content":"If you pass the <ph id=\"ph1\">&lt;xref:System.String.ToLower%28System.Globalization.CultureInfo%29&gt;</ph> method a <ph id=\"ph2\">&lt;xref:System.Globalization.CultureInfo&gt;</ph> object other than <ph id=\"ph3\">&lt;xref:System.Globalization.CultureInfo.InvariantCulture%2A?displayProperty=fullName&gt;</ph>, the casing operation will take culture-specific rules into account.","pos":[0,303],"source":"If you pass the <xref:System.String.ToLower%28System.Globalization.CultureInfo%29> method a <xref:System.Globalization.CultureInfo> object other than <xref:System.Globalization.CultureInfo.InvariantCulture%2A?displayProperty=fullName>, the casing operation will take culture-specific rules into account."},{"content":"If you need the lowercase or uppercase version of an operating system identifier, such as a file name, named pipe, or registry key, use the <ph id=\"ph1\">&lt;xref:System.String.ToLowerInvariant%2A&gt;</ph> or <ph id=\"ph2\">&lt;xref:System.String.ToUpperInvariant%2A&gt;</ph> method.","pos":[304,536],"source":" If you need the lowercase or uppercase version of an operating system identifier, such as a file name, named pipe, or registry key, use the <xref:System.String.ToLowerInvariant%2A> or <xref:System.String.ToUpperInvariant%2A> method."},{"content":"This produces the same result in every culture and performs more efficiently.","pos":[537,614]}]}]}],"pos":[645152,646122],"yaml":true,"extradata":"MT"},{"content":"An object that supplies culture-specific casing rules.","nodes":[{"pos":[0,54],"content":"An object that supplies culture-specific casing rules.","nodes":[{"content":"An object that supplies culture-specific casing rules.","pos":[0,54]}]}],"pos":[647037,647092],"yaml":true},{"content":"The lowercase equivalent of the current string.","nodes":[{"pos":[0,47],"content":"The lowercase equivalent of the current string.","nodes":[{"content":"The lowercase equivalent of the current string.","pos":[0,47]}]}],"pos":[647149,647197],"yaml":true},{"content":"<code>culture</code> is `null`.","nodes":[{"pos":[0,31],"content":"<ph id=\"ph1\">&lt;code&gt;culture&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>culture</code> is `null`."}],"pos":[647348,647380],"yaml":true},{"content":"Returns a copy of this <xref href=\"System.String\"></xref> object converted to lowercase using the casing rules of the invariant culture.","nodes":[{"pos":[0,136],"content":"Returns a copy of this <ph id=\"ph1\">&lt;xref href=\"System.String\"&gt;&lt;/xref&gt;</ph> object converted to lowercase using the casing rules of the invariant culture.","source":"Returns a copy of this <xref href=\"System.String\"></xref> object converted to lowercase using the casing rules of the invariant culture."}],"pos":[648456,648593],"yaml":true},{"content":"The invariant culture represents a culture that is culture-insensitive. It is associated with the English language but not with a specific country or region. For more information, see the <xref:System.Globalization.CultureInfo.InvariantCulture%2A?displayProperty=fullName> property.  \n  \n If your application depends on the case of a string changing in a predictable way that is unaffected by the current culture, use the <xref:System.String.ToLowerInvariant%2A> method. The <xref:System.String.ToLowerInvariant%2A> method is equivalent to `ToLower(CultureInfo.InvariantCulture)`. The method is recommended when a collection of strings must appear in a predictable order in a user interface control.  \n  \n> [!NOTE]\n>  This method does not modify the value of the current instance. Instead, it returns a new string in which all characters in the current instance are converted to lowercase.  \n  \n## Security Considerations  \n If you need the lowercase or uppercase version of an operating system identifier, such as a file name, named pipe, or registry key, use the <xref:System.String.ToLowerInvariant%2A> or <xref:System.String.ToUpperInvariant%2A> methods.","nodes":[{"pos":[0,282],"content":"The invariant culture represents a culture that is culture-insensitive. It is associated with the English language but not with a specific country or region. For more information, see the <xref:System.Globalization.CultureInfo.InvariantCulture%2A?displayProperty=fullName> property.","nodes":[{"content":"The invariant culture represents a culture that is culture-insensitive. It is associated with the English language but not with a specific country or region. For more information, see the <xref:System.Globalization.CultureInfo.InvariantCulture%2A?displayProperty=fullName> property.","pos":[0,282],"nodes":[{"content":"The invariant culture represents a culture that is culture-insensitive.","pos":[0,71]},{"content":"It is associated with the English language but not with a specific country or region.","pos":[72,157]},{"content":"For more information, see the <ph id=\"ph1\">&lt;xref:System.Globalization.CultureInfo.InvariantCulture%2A?displayProperty=fullName&gt;</ph> property.","pos":[158,282],"source":" For more information, see the <xref:System.Globalization.CultureInfo.InvariantCulture%2A?displayProperty=fullName> property."}]}]},{"pos":[289,699],"content":"If your application depends on the case of a string changing in a predictable way that is unaffected by the current culture, use the <xref:System.String.ToLowerInvariant%2A> method. The <xref:System.String.ToLowerInvariant%2A> method is equivalent to `ToLower(CultureInfo.InvariantCulture)`. The method is recommended when a collection of strings must appear in a predictable order in a user interface control.","nodes":[{"content":"If your application depends on the case of a string changing in a predictable way that is unaffected by the current culture, use the <ph id=\"ph1\">&lt;xref:System.String.ToLowerInvariant%2A&gt;</ph> method.","pos":[0,181],"source":"If your application depends on the case of a string changing in a predictable way that is unaffected by the current culture, use the <xref:System.String.ToLowerInvariant%2A> method."},{"content":"The <ph id=\"ph1\">&lt;xref:System.String.ToLowerInvariant%2A&gt;</ph> method is equivalent to <ph id=\"ph2\">`ToLower(CultureInfo.InvariantCulture)`</ph>.","pos":[182,291],"source":" The <xref:System.String.ToLowerInvariant%2A> method is equivalent to `ToLower(CultureInfo.InvariantCulture)`."},{"content":"The method is recommended when a collection of strings must appear in a predictable order in a user interface control.","pos":[292,410]}]},{"pos":[707,889],"content":"[!NOTE]\n This method does not modify the value of the current instance. Instead, it returns a new string in which all characters in the current instance are converted to lowercase.","leadings":["","> "],"nodes":[{"content":" This method does not modify the value of the current instance. Instead, it returns a new string in which all characters in the current instance are converted to lowercase.","pos":[8,180],"nodes":[{"content":"This method does not modify the value of the current instance.","pos":[1,63]},{"content":"Instead, it returns a new string in which all characters in the current instance are converted to lowercase.","pos":[64,172]}]}]},{"pos":[898,921],"content":"Security Considerations","linkify":"Security Considerations","nodes":[{"content":"Security Considerations","pos":[0,23]}]},{"pos":[925,1158],"content":"If you need the lowercase or uppercase version of an operating system identifier, such as a file name, named pipe, or registry key, use the <xref:System.String.ToLowerInvariant%2A> or <xref:System.String.ToUpperInvariant%2A> methods.","nodes":[{"content":"If you need the lowercase or uppercase version of an operating system identifier, such as a file name, named pipe, or registry key, use the <ph id=\"ph1\">&lt;xref:System.String.ToLowerInvariant%2A&gt;</ph> or <ph id=\"ph2\">&lt;xref:System.String.ToUpperInvariant%2A&gt;</ph> methods.","pos":[0,233],"source":"If you need the lowercase or uppercase version of an operating system identifier, such as a file name, named pipe, or registry key, use the <xref:System.String.ToLowerInvariant%2A> or <xref:System.String.ToUpperInvariant%2A> methods."}]}],"pos":[648604,649773],"yaml":true,"extradata":"MT"},{"content":"The lowercase equivalent of the current string.","nodes":[{"pos":[0,47],"content":"The lowercase equivalent of the current string.","nodes":[{"content":"The lowercase equivalent of the current string.","pos":[0,47]}]}],"pos":[650820,650868],"yaml":true},{"content":"Returns this instance of <xref href=\"System.String\"></xref>; no actual conversion is performed.","nodes":[{"pos":[0,95],"content":"Returns this instance of <ph id=\"ph1\">&lt;xref href=\"System.String\"&gt;&lt;/xref&gt;</ph>; no actual conversion is performed.","source":"Returns this instance of <xref href=\"System.String\"></xref>; no actual conversion is performed."}],"pos":[652301,652397],"yaml":true},{"content":"Because this method simply returns the current string unchanged, there is no need to call it directly. It is usually called implicitly in a composite formatting operation, as the example shows.","nodes":[{"pos":[0,193],"content":"Because this method simply returns the current string unchanged, there is no need to call it directly. It is usually called implicitly in a composite formatting operation, as the example shows.","nodes":[{"content":"Because this method simply returns the current string unchanged, there is no need to call it directly. It is usually called implicitly in a composite formatting operation, as the example shows.","pos":[0,193],"nodes":[{"content":"Because this method simply returns the current string unchanged, there is no need to call it directly.","pos":[0,102]},{"content":"It is usually called implicitly in a composite formatting operation, as the example shows.","pos":[103,193]}]}]}],"pos":[652408,652602],"yaml":true,"extradata":"MT"},{"content":"The current string.","nodes":[{"pos":[0,19],"content":"The current string.","nodes":[{"content":"The current string.","pos":[0,19]}]}],"pos":[653417,653437],"yaml":true},{"content":"Returns this instance of <xref href=\"System.String\"></xref>; no actual conversion is performed.","nodes":[{"pos":[0,95],"content":"Returns this instance of <ph id=\"ph1\">&lt;xref href=\"System.String\"&gt;&lt;/xref&gt;</ph>; no actual conversion is performed.","source":"Returns this instance of <xref href=\"System.String\"></xref>; no actual conversion is performed."}],"pos":[654979,655075],"yaml":true},{"content":"`provider` is reserved, and does not currently participate in this operation.  \n  \n Because this method simply returns the current string unchanged, there is no need to call it directly.","nodes":[{"pos":[0,77],"content":"<ph id=\"ph1\">`provider`</ph> is reserved, and does not currently participate in this operation.","source":"`provider` is reserved, and does not currently participate in this operation."},{"pos":[84,186],"content":"Because this method simply returns the current string unchanged, there is no need to call it directly.","nodes":[{"content":"Because this method simply returns the current string unchanged, there is no need to call it directly.","pos":[0,102]}]}],"pos":[655086,655277],"yaml":true,"extradata":"MT"},{"content":"(Reserved) An object that supplies culture-specific formatting information.","nodes":[{"pos":[0,75],"content":"(Reserved) An object that supplies culture-specific formatting information.","nodes":[{"content":"(Reserved) An object that supplies culture-specific formatting information.","pos":[0,75]}]}],"pos":[655440,655516],"yaml":true},{"content":"The current string.","nodes":[{"pos":[0,19],"content":"The current string.","nodes":[{"content":"The current string.","pos":[0,19]}]}],"pos":[655573,655593],"yaml":true},{"content":"Returns a copy of this string converted to uppercase.","nodes":[{"pos":[0,53],"content":"Returns a copy of this string converted to uppercase.","nodes":[{"content":"Returns a copy of this string converted to uppercase.","pos":[0,53]}]}],"pos":[656668,656722],"yaml":true},{"content":"This method uses the casing rules of the current culture to convert each character in the current instance to its uppercase equivalent. If a character does not have an uppercase equivalent, it is included unchanged in the returned string.  \n  \n> [!NOTE]\n>  This method does not modify the value of the current instance. Instead, it returns a new string in which all characters in the current instance are converted to uppercase.  \n  \n The <xref:System.String.ToUpper%2A> method is often used to convert a string to uppercase so that it can be used in a case-insensitive comparison. A better method to perform case-insensitive comparison is to call a string comparison method that has a <xref:System.StringComparison> parameter whose value you set to <xref:System.StringComparison?displayProperty=fullName> for a culture-sensitive, case-insensitive comparison.  \n  \n## Security Considerations  \n The casing operation that results from calling the <xref:System.String.ToUpper> method takes the casing conventions of the current culture into account. If you need the lowercase or uppercase version of an operating system identifier, such as a file name, named pipe, or registry key, use the <xref:System.String.ToLowerInvariant%2A> or <xref:System.String.ToUpperInvariant%2A> method. This produces the same result in every culture (unlike the <xref:System.String.ToUpper> method) and performs more efficiently.","nodes":[{"pos":[0,238],"content":"This method uses the casing rules of the current culture to convert each character in the current instance to its uppercase equivalent. If a character does not have an uppercase equivalent, it is included unchanged in the returned string.","nodes":[{"content":"This method uses the casing rules of the current culture to convert each character in the current instance to its uppercase equivalent. If a character does not have an uppercase equivalent, it is included unchanged in the returned string.","pos":[0,238],"nodes":[{"content":"This method uses the casing rules of the current culture to convert each character in the current instance to its uppercase equivalent.","pos":[0,135]},{"content":"If a character does not have an uppercase equivalent, it is included unchanged in the returned string.","pos":[136,238]}]}]},{"pos":[246,428],"content":"[!NOTE]\n This method does not modify the value of the current instance. Instead, it returns a new string in which all characters in the current instance are converted to uppercase.","leadings":["","> "],"nodes":[{"content":" This method does not modify the value of the current instance. Instead, it returns a new string in which all characters in the current instance are converted to uppercase.","pos":[8,180],"nodes":[{"content":"This method does not modify the value of the current instance.","pos":[1,63]},{"content":"Instead, it returns a new string in which all characters in the current instance are converted to uppercase.","pos":[64,172]}]}]},{"pos":[435,859],"content":"The <xref:System.String.ToUpper%2A> method is often used to convert a string to uppercase so that it can be used in a case-insensitive comparison. A better method to perform case-insensitive comparison is to call a string comparison method that has a <xref:System.StringComparison> parameter whose value you set to <xref:System.StringComparison?displayProperty=fullName> for a culture-sensitive, case-insensitive comparison.","nodes":[{"content":"The <xref:System.String.ToUpper%2A> method is often used to convert a string to uppercase so that it can be used in a case-insensitive comparison. A better method to perform case-insensitive comparison is to call a string comparison method that has a <xref:System.StringComparison> parameter whose value you set to <xref:System.StringComparison?displayProperty=fullName> for a culture-sensitive, case-insensitive comparison.","pos":[0,424],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.String.ToUpper%2A&gt;</ph> method is often used to convert a string to uppercase so that it can be used in a case-insensitive comparison.","pos":[0,146],"source":"The <xref:System.String.ToUpper%2A> method is often used to convert a string to uppercase so that it can be used in a case-insensitive comparison."},{"content":"A better method to perform case-insensitive comparison is to call a string comparison method that has a <ph id=\"ph1\">&lt;xref:System.StringComparison&gt;</ph> parameter whose value you set to <ph id=\"ph2\">&lt;xref:System.StringComparison?displayProperty=fullName&gt;</ph> for a culture-sensitive, case-insensitive comparison.","pos":[147,424],"source":" A better method to perform case-insensitive comparison is to call a string comparison method that has a <xref:System.StringComparison> parameter whose value you set to <xref:System.StringComparison?displayProperty=fullName> for a culture-sensitive, case-insensitive comparison."}]}]},{"pos":[868,891],"content":"Security Considerations","linkify":"Security Considerations","nodes":[{"content":"Security Considerations","pos":[0,23]}]},{"pos":[895,1407],"content":"The casing operation that results from calling the <xref:System.String.ToUpper> method takes the casing conventions of the current culture into account. If you need the lowercase or uppercase version of an operating system identifier, such as a file name, named pipe, or registry key, use the <xref:System.String.ToLowerInvariant%2A> or <xref:System.String.ToUpperInvariant%2A> method. This produces the same result in every culture (unlike the <xref:System.String.ToUpper> method) and performs more efficiently.","nodes":[{"content":"The casing operation that results from calling the <xref:System.String.ToUpper> method takes the casing conventions of the current culture into account. If you need the lowercase or uppercase version of an operating system identifier, such as a file name, named pipe, or registry key, use the <xref:System.String.ToLowerInvariant%2A> or <xref:System.String.ToUpperInvariant%2A> method. This produces the same result in every culture (unlike the <xref:System.String.ToUpper> method) and performs more efficiently.","pos":[0,512],"nodes":[{"content":"The casing operation that results from calling the <ph id=\"ph1\">&lt;xref:System.String.ToUpper&gt;</ph> method takes the casing conventions of the current culture into account.","pos":[0,152],"source":"The casing operation that results from calling the <xref:System.String.ToUpper> method takes the casing conventions of the current culture into account."},{"content":"If you need the lowercase or uppercase version of an operating system identifier, such as a file name, named pipe, or registry key, use the <ph id=\"ph1\">&lt;xref:System.String.ToLowerInvariant%2A&gt;</ph> or <ph id=\"ph2\">&lt;xref:System.String.ToUpperInvariant%2A&gt;</ph> method.","pos":[153,385],"source":" If you need the lowercase or uppercase version of an operating system identifier, such as a file name, named pipe, or registry key, use the <xref:System.String.ToLowerInvariant%2A> or <xref:System.String.ToUpperInvariant%2A> method."},{"content":"This produces the same result in every culture (unlike the <ph id=\"ph1\">&lt;xref:System.String.ToUpper&gt;</ph> method) and performs more efficiently.","pos":[386,512],"source":" This produces the same result in every culture (unlike the <xref:System.String.ToUpper> method) and performs more efficiently."}]}]}],"pos":[656733,658151],"yaml":true,"extradata":"MT"},{"content":"The uppercase equivalent of the current string.","nodes":[{"pos":[0,47],"content":"The uppercase equivalent of the current string.","nodes":[{"content":"The uppercase equivalent of the current string.","pos":[0,47]}]}],"pos":[659011,659059],"yaml":true},{"content":"Returns a copy of this string converted to uppercase, using the casing rules of the specified culture.","nodes":[{"pos":[0,102],"content":"Returns a copy of this string converted to uppercase, using the casing rules of the specified culture.","nodes":[{"content":"Returns a copy of this string converted to uppercase, using the casing rules of the specified culture.","pos":[0,102]}]}],"pos":[660612,660715],"yaml":true},{"content":"The casing rules of the culture specified by the `culture` parameter determine the way the case of a string is changed.  \n  \n> [!NOTE]\n>  This method does not modify the value of the current instance. Instead, it returns a new string in which all characters in the current instance are converted to uppercase.  \n  \n## Security Considerations  \n If you pass the <xref:System.String.ToUpper%28System.Globalization.CultureInfo%29> method a <xref:System.Globalization.CultureInfo> object other than <xref:System.Globalization.CultureInfo.InvariantCulture%2A?displayProperty=fullName>, the casing operation will take culture-specific rules into account. If you need the lowercase or uppercase version of an operating system identifier, such as a file name, named pipe, or registry key, use the <xref:System.String.ToLowerInvariant%2A> or <xref:System.String.ToUpperInvariant%2A> method. This produces the same result in every culture and performs more efficiently.","nodes":[{"pos":[0,119],"content":"The casing rules of the culture specified by the <ph id=\"ph1\">`culture`</ph> parameter determine the way the case of a string is changed.","source":"The casing rules of the culture specified by the `culture` parameter determine the way the case of a string is changed."},{"pos":[127,309],"content":"[!NOTE]\n This method does not modify the value of the current instance. Instead, it returns a new string in which all characters in the current instance are converted to uppercase.","leadings":["","> "],"nodes":[{"content":" This method does not modify the value of the current instance. Instead, it returns a new string in which all characters in the current instance are converted to uppercase.","pos":[8,180],"nodes":[{"content":"This method does not modify the value of the current instance.","pos":[1,63]},{"content":"Instead, it returns a new string in which all characters in the current instance are converted to uppercase.","pos":[64,172]}]}]},{"pos":[318,341],"content":"Security Considerations","linkify":"Security Considerations","nodes":[{"content":"Security Considerations","pos":[0,23]}]},{"pos":[345,959],"content":"If you pass the <xref:System.String.ToUpper%28System.Globalization.CultureInfo%29> method a <xref:System.Globalization.CultureInfo> object other than <xref:System.Globalization.CultureInfo.InvariantCulture%2A?displayProperty=fullName>, the casing operation will take culture-specific rules into account. If you need the lowercase or uppercase version of an operating system identifier, such as a file name, named pipe, or registry key, use the <xref:System.String.ToLowerInvariant%2A> or <xref:System.String.ToUpperInvariant%2A> method. This produces the same result in every culture and performs more efficiently.","nodes":[{"content":"If you pass the <xref:System.String.ToUpper%28System.Globalization.CultureInfo%29> method a <xref:System.Globalization.CultureInfo> object other than <xref:System.Globalization.CultureInfo.InvariantCulture%2A?displayProperty=fullName>, the casing operation will take culture-specific rules into account. If you need the lowercase or uppercase version of an operating system identifier, such as a file name, named pipe, or registry key, use the <xref:System.String.ToLowerInvariant%2A> or <xref:System.String.ToUpperInvariant%2A> method. This produces the same result in every culture and performs more efficiently.","pos":[0,614],"nodes":[{"content":"If you pass the <ph id=\"ph1\">&lt;xref:System.String.ToUpper%28System.Globalization.CultureInfo%29&gt;</ph> method a <ph id=\"ph2\">&lt;xref:System.Globalization.CultureInfo&gt;</ph> object other than <ph id=\"ph3\">&lt;xref:System.Globalization.CultureInfo.InvariantCulture%2A?displayProperty=fullName&gt;</ph>, the casing operation will take culture-specific rules into account.","pos":[0,303],"source":"If you pass the <xref:System.String.ToUpper%28System.Globalization.CultureInfo%29> method a <xref:System.Globalization.CultureInfo> object other than <xref:System.Globalization.CultureInfo.InvariantCulture%2A?displayProperty=fullName>, the casing operation will take culture-specific rules into account."},{"content":"If you need the lowercase or uppercase version of an operating system identifier, such as a file name, named pipe, or registry key, use the <ph id=\"ph1\">&lt;xref:System.String.ToLowerInvariant%2A&gt;</ph> or <ph id=\"ph2\">&lt;xref:System.String.ToUpperInvariant%2A&gt;</ph> method.","pos":[304,536],"source":" If you need the lowercase or uppercase version of an operating system identifier, such as a file name, named pipe, or registry key, use the <xref:System.String.ToLowerInvariant%2A> or <xref:System.String.ToUpperInvariant%2A> method."},{"content":"This produces the same result in every culture and performs more efficiently.","pos":[537,614]}]}]}],"pos":[660726,661694],"yaml":true,"extradata":"MT"},{"content":"An object that supplies culture-specific casing rules.","nodes":[{"pos":[0,54],"content":"An object that supplies culture-specific casing rules.","nodes":[{"content":"An object that supplies culture-specific casing rules.","pos":[0,54]}]}],"pos":[662514,662569],"yaml":true},{"content":"The uppercase equivalent of the current string.","nodes":[{"pos":[0,47],"content":"The uppercase equivalent of the current string.","nodes":[{"content":"The uppercase equivalent of the current string.","pos":[0,47]}]}],"pos":[662626,662674],"yaml":true},{"content":"<code>culture</code> is `null`.","nodes":[{"pos":[0,31],"content":"<ph id=\"ph1\">&lt;code&gt;culture&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>culture</code> is `null`."}],"pos":[662825,662857],"yaml":true},{"content":"Returns a copy of this <xref href=\"System.String\"></xref> object converted to uppercase using the casing rules of the invariant culture.","nodes":[{"pos":[0,136],"content":"Returns a copy of this <ph id=\"ph1\">&lt;xref href=\"System.String\"&gt;&lt;/xref&gt;</ph> object converted to uppercase using the casing rules of the invariant culture.","source":"Returns a copy of this <xref href=\"System.String\"></xref> object converted to uppercase using the casing rules of the invariant culture."}],"pos":[663933,664070],"yaml":true},{"content":"The invariant culture represents a culture that is culture-insensitive. It is associated with the English language but not with a specific country or region. For more information, see the <xref:System.Globalization.CultureInfo.InvariantCulture%2A?displayProperty=fullName> property.  \n  \n If your application depends on the case of a string changing in a predictable way that is unaffected by the current culture, use the <xref:System.String.ToUpperInvariant%2A> method. The <xref:System.String.ToUpperInvariant%2A> method is equivalent to `ToUpper(CultureInfo.InvariantCulture)`. The method is recommended when a collection of strings must appear in a predictable order in a user interface control.  \n  \n> [!NOTE]\n>  This method does not modify the value of the current instance. Instead, it returns a new string in which all characters in the current instance are converted to uppercase.  \n  \n## Security Considerations  \n If you need the lowercase or uppercase version of an operating system identifier, such as a file name, named pipe, or registry key, use the <xref:System.String.ToLowerInvariant%2A> or <xref:System.String.ToUpperInvariant%2A> methods.","nodes":[{"pos":[0,282],"content":"The invariant culture represents a culture that is culture-insensitive. It is associated with the English language but not with a specific country or region. For more information, see the <xref:System.Globalization.CultureInfo.InvariantCulture%2A?displayProperty=fullName> property.","nodes":[{"content":"The invariant culture represents a culture that is culture-insensitive. It is associated with the English language but not with a specific country or region. For more information, see the <xref:System.Globalization.CultureInfo.InvariantCulture%2A?displayProperty=fullName> property.","pos":[0,282],"nodes":[{"content":"The invariant culture represents a culture that is culture-insensitive.","pos":[0,71]},{"content":"It is associated with the English language but not with a specific country or region.","pos":[72,157]},{"content":"For more information, see the <ph id=\"ph1\">&lt;xref:System.Globalization.CultureInfo.InvariantCulture%2A?displayProperty=fullName&gt;</ph> property.","pos":[158,282],"source":" For more information, see the <xref:System.Globalization.CultureInfo.InvariantCulture%2A?displayProperty=fullName> property."}]}]},{"pos":[289,699],"content":"If your application depends on the case of a string changing in a predictable way that is unaffected by the current culture, use the <xref:System.String.ToUpperInvariant%2A> method. The <xref:System.String.ToUpperInvariant%2A> method is equivalent to `ToUpper(CultureInfo.InvariantCulture)`. The method is recommended when a collection of strings must appear in a predictable order in a user interface control.","nodes":[{"content":"If your application depends on the case of a string changing in a predictable way that is unaffected by the current culture, use the <ph id=\"ph1\">&lt;xref:System.String.ToUpperInvariant%2A&gt;</ph> method.","pos":[0,181],"source":"If your application depends on the case of a string changing in a predictable way that is unaffected by the current culture, use the <xref:System.String.ToUpperInvariant%2A> method."},{"content":"The <ph id=\"ph1\">&lt;xref:System.String.ToUpperInvariant%2A&gt;</ph> method is equivalent to <ph id=\"ph2\">`ToUpper(CultureInfo.InvariantCulture)`</ph>.","pos":[182,291],"source":" The <xref:System.String.ToUpperInvariant%2A> method is equivalent to `ToUpper(CultureInfo.InvariantCulture)`."},{"content":"The method is recommended when a collection of strings must appear in a predictable order in a user interface control.","pos":[292,410]}]},{"pos":[707,889],"content":"[!NOTE]\n This method does not modify the value of the current instance. Instead, it returns a new string in which all characters in the current instance are converted to uppercase.","leadings":["","> "],"nodes":[{"content":" This method does not modify the value of the current instance. Instead, it returns a new string in which all characters in the current instance are converted to uppercase.","pos":[8,180],"nodes":[{"content":"This method does not modify the value of the current instance.","pos":[1,63]},{"content":"Instead, it returns a new string in which all characters in the current instance are converted to uppercase.","pos":[64,172]}]}]},{"pos":[898,921],"content":"Security Considerations","linkify":"Security Considerations","nodes":[{"content":"Security Considerations","pos":[0,23]}]},{"pos":[925,1158],"content":"If you need the lowercase or uppercase version of an operating system identifier, such as a file name, named pipe, or registry key, use the <xref:System.String.ToLowerInvariant%2A> or <xref:System.String.ToUpperInvariant%2A> methods.","nodes":[{"content":"If you need the lowercase or uppercase version of an operating system identifier, such as a file name, named pipe, or registry key, use the <ph id=\"ph1\">&lt;xref:System.String.ToLowerInvariant%2A&gt;</ph> or <ph id=\"ph2\">&lt;xref:System.String.ToUpperInvariant%2A&gt;</ph> methods.","pos":[0,233],"source":"If you need the lowercase or uppercase version of an operating system identifier, such as a file name, named pipe, or registry key, use the <xref:System.String.ToLowerInvariant%2A> or <xref:System.String.ToUpperInvariant%2A> methods."}]}],"pos":[664081,665250],"yaml":true,"extradata":"MT"},{"content":"The uppercase equivalent of the current string.","nodes":[{"pos":[0,47],"content":"The uppercase equivalent of the current string.","nodes":[{"content":"The uppercase equivalent of the current string.","pos":[0,47]}]}],"pos":[666297,666345],"yaml":true},{"content":"Removes all leading and trailing occurrences of a set of characters specified in an array from the current <xref href=\"System.String\"></xref> object.","nodes":[{"pos":[0,149],"content":"Removes all leading and trailing occurrences of a set of characters specified in an array from the current <ph id=\"ph1\">&lt;xref href=\"System.String\"&gt;&lt;/xref&gt;</ph> object.","source":"Removes all leading and trailing occurrences of a set of characters specified in an array from the current <xref href=\"System.String\"></xref> object."}],"pos":[668510,668660],"yaml":true},{"content":"The <xref:System.String.Trim%2A> method removes from the current string all leading and trailing characters that are in the `trimChars` parameter. Each leading and trailing trim operation stops when a character that is not in `trimChars` is encountered. For example, if the current string is \"123abc456xyz789\" and `trimChars` contains the digits from \"1\" through \"9\", the <xref:System.String.Trim%2A> method returns \"abc456xyz\".  \n  \n> [!NOTE]\n>  If the <xref:System.String.Trim%2A> method removes any characters from the current instance, this method does not modify the value of the current instance. Instead, it returns a new string in which all leading and trailing `trimChars` characters found in the current instance are removed.  \n  \n If the current string equals <xref:System.String.Empty> or all the characters in the current instance consist of characters in the `trimChars` array, the method returns <xref:System.String.Empty>.  \n  \n If `trimChars` is `null` or an empty array, this method removes any leading or trailing characters that result in the method returning `true` when they are passed to the <xref:System.Char.IsWhiteSpace%2A?displayProperty=fullName> method,","nodes":[{"pos":[0,428],"content":"The <xref:System.String.Trim%2A> method removes from the current string all leading and trailing characters that are in the `trimChars` parameter. Each leading and trailing trim operation stops when a character that is not in `trimChars` is encountered. For example, if the current string is \"123abc456xyz789\" and `trimChars` contains the digits from \"1\" through \"9\", the <xref:System.String.Trim%2A> method returns \"abc456xyz\".","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.String.Trim%2A&gt;</ph> method removes from the current string all leading and trailing characters that are in the <ph id=\"ph2\">`trimChars`</ph> parameter.","pos":[0,146],"source":"The <xref:System.String.Trim%2A> method removes from the current string all leading and trailing characters that are in the `trimChars` parameter."},{"content":"Each leading and trailing trim operation stops when a character that is not in <ph id=\"ph1\">`trimChars`</ph> is encountered.","pos":[147,253],"source":" Each leading and trailing trim operation stops when a character that is not in `trimChars` is encountered."},{"content":"For example, if the current string is \"123abc456xyz789\" and <ph id=\"ph1\">`trimChars`</ph> contains the digits from \"1\" through \"9\", the <ph id=\"ph2\">&lt;xref:System.String.Trim%2A&gt;</ph> method returns \"abc456xyz\".","pos":[254,428],"source":" For example, if the current string is \"123abc456xyz789\" and `trimChars` contains the digits from \"1\" through \"9\", the <xref:System.String.Trim%2A> method returns \"abc456xyz\"."}]},{"pos":[436,735],"content":"[!NOTE]\n If the <xref:System.String.Trim%2A> method removes any characters from the current instance, this method does not modify the value of the current instance. Instead, it returns a new string in which all leading and trailing `trimChars` characters found in the current instance are removed.","leadings":["","> "],"nodes":[{"content":" If the <xref:System.String.Trim%2A> method removes any characters from the current instance, this method does not modify the value of the current instance. Instead, it returns a new string in which all leading and trailing `trimChars` characters found in the current instance are removed.","pos":[8,297],"nodes":[{"content":"If the <ph id=\"ph1\">&lt;xref:System.String.Trim%2A&gt;</ph> method removes any characters from the current instance, this method does not modify the value of the current instance.","pos":[1,156],"source":" If the <xref:System.String.Trim%2A> method removes any characters from the current instance, this method does not modify the value of the current instance."},{"content":"Instead, it returns a new string in which all leading and trailing <ph id=\"ph1\">`trimChars`</ph> characters found in the current instance are removed.","pos":[157,289],"source":" Instead, it returns a new string in which all leading and trailing `trimChars` characters found in the current instance are removed."}]}]},{"pos":[742,938],"content":"If the current string equals <ph id=\"ph1\">&lt;xref:System.String.Empty&gt;</ph> or all the characters in the current instance consist of characters in the <ph id=\"ph2\">`trimChars`</ph> array, the method returns <ph id=\"ph3\">&lt;xref:System.String.Empty&gt;</ph>.","source":"If the current string equals <xref:System.String.Empty> or all the characters in the current instance consist of characters in the `trimChars` array, the method returns <xref:System.String.Empty>."},{"pos":[945,1182],"content":"If <ph id=\"ph1\">`trimChars`</ph> is <ph id=\"ph2\">`null`</ph> or an empty array, this method removes any leading or trailing characters that result in the method returning <ph id=\"ph3\">`true`</ph> when they are passed to the <ph id=\"ph4\">&lt;xref:System.Char.IsWhiteSpace%2A?displayProperty=fullName&gt;</ph> method,","source":"If `trimChars` is `null` or an empty array, this method removes any leading or trailing characters that result in the method returning `true` when they are passed to the <xref:System.Char.IsWhiteSpace%2A?displayProperty=fullName> method,"}],"pos":[668671,669871],"yaml":true,"extradata":"MT"},{"content":"An array of Unicode characters to remove, or `null`.","nodes":[{"pos":[0,52],"content":"An array of Unicode characters to remove, or <ph id=\"ph1\">`null`</ph>.","source":"An array of Unicode characters to remove, or `null`."}],"pos":[670588,670641],"yaml":true},{"content":"The string that remains after all occurrences of the characters in the <code>trimChars</code> parameter are removed from the start and end of the current string. If <code>trimChars</code> is `null` or an empty array, white-space characters are removed instead. If no characters can be trimmed from the current instance, the method returns the current instance unchanged.","nodes":[{"pos":[0,370],"content":"The string that remains after all occurrences of the characters in the <code>trimChars</code> parameter are removed from the start and end of the current string. If <code>trimChars</code> is `null` or an empty array, white-space characters are removed instead. If no characters can be trimmed from the current instance, the method returns the current instance unchanged.","nodes":[{"content":"The string that remains after all occurrences of the characters in the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">trimChars</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter are removed from the start and end of the current string.","pos":[0,161],"source":"The string that remains after all occurrences of the characters in the <code>trimChars</code> parameter are removed from the start and end of the current string."},{"content":"If <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">trimChars</ph><ept id=\"p1\">&lt;/code&gt;</ept> is <ph id=\"ph2\">`null`</ph> or an empty array, white-space characters are removed instead.","pos":[162,260],"source":" If <code>trimChars</code> is `null` or an empty array, white-space characters are removed instead."},{"content":"If no characters can be trimmed from the current instance, the method returns the current instance unchanged.","pos":[261,370]}]}],"pos":[670698,671069],"yaml":true},{"content":"Removes all leading and trailing white-space characters from the current <xref href=\"System.String\"></xref> object.","nodes":[{"pos":[0,115],"content":"Removes all leading and trailing white-space characters from the current <ph id=\"ph1\">&lt;xref href=\"System.String\"&gt;&lt;/xref&gt;</ph> object.","source":"Removes all leading and trailing white-space characters from the current <xref href=\"System.String\"></xref> object."}],"pos":[672466,672582],"yaml":true},{"content":"The <xref:System.String.Trim%2A> method removes from the current string all leading and trailing white-space characters. Each leading and trailing trim operation stops when a non-white-space character is encountered. For example, if the current string is \"   abc   xyz   \", the <xref:System.String.Trim%2A> method returns \"abc   xyz\". To remove white-space characters between words in a string, use a [.NET Framework Regular Expressions](~/docs/standard/base-types/regular-expressions.md).  \n  \n> [!NOTE]\n>  If the <xref:System.String.Trim%2A> method removes any characters from the current instance, this method does not modify the value of the current instance. Instead, it returns a new string in which all leading and trailing white space characters found in the current instance are removed.  \n  \n If the current string equals <xref:System.String.Empty> or all the characters in the current instance consist of white-space characters, the method returns <xref:System.String.Empty>.  \n  \n White-space characters are defined by the Unicode standard. The <xref:System.String.Trim> method removes any leading and trailing characters that produce a return value of `true` when they are passed to the <xref:System.Char.IsWhiteSpace%2A?displayProperty=fullName> method.","nodes":[{"pos":[0,489],"content":"The <xref:System.String.Trim%2A> method removes from the current string all leading and trailing white-space characters. Each leading and trailing trim operation stops when a non-white-space character is encountered. For example, if the current string is \"   abc   xyz   \", the <xref:System.String.Trim%2A> method returns \"abc   xyz\". To remove white-space characters between words in a string, use a [.NET Framework Regular Expressions](~/docs/standard/base-types/regular-expressions.md).","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.String.Trim%2A&gt;</ph> method removes from the current string all leading and trailing white-space characters.","pos":[0,120],"source":"The <xref:System.String.Trim%2A> method removes from the current string all leading and trailing white-space characters."},{"content":"Each leading and trailing trim operation stops when a non-white-space character is encountered.","pos":[121,216]},{"content":"For example, if the current string is \"   abc   xyz   \", the <ph id=\"ph1\">&lt;xref:System.String.Trim%2A&gt;</ph> method returns \"abc   xyz\".","pos":[217,334],"source":" For example, if the current string is \"   abc   xyz   \", the <xref:System.String.Trim%2A> method returns \"abc   xyz\"."},{"content":"To remove white-space characters between words in a string, use a <bpt id=\"p1\">[</bpt>.NET Framework Regular Expressions<ept id=\"p1\">](~/docs/standard/base-types/regular-expressions.md)</ept>.","pos":[335,489],"source":" To remove white-space characters between words in a string, use a [.NET Framework Regular Expressions](~/docs/standard/base-types/regular-expressions.md)."}]},{"pos":[497,796],"content":"[!NOTE]\n If the <xref:System.String.Trim%2A> method removes any characters from the current instance, this method does not modify the value of the current instance. Instead, it returns a new string in which all leading and trailing white space characters found in the current instance are removed.","leadings":["","> "],"nodes":[{"content":" If the <xref:System.String.Trim%2A> method removes any characters from the current instance, this method does not modify the value of the current instance. Instead, it returns a new string in which all leading and trailing white space characters found in the current instance are removed.","pos":[8,297],"nodes":[{"content":"If the <ph id=\"ph1\">&lt;xref:System.String.Trim%2A&gt;</ph> method removes any characters from the current instance, this method does not modify the value of the current instance.","pos":[1,156],"source":" If the <xref:System.String.Trim%2A> method removes any characters from the current instance, this method does not modify the value of the current instance."},{"content":"Instead, it returns a new string in which all leading and trailing white space characters found in the current instance are removed.","pos":[157,289]}]}]},{"pos":[803,986],"content":"If the current string equals <xref:System.String.Empty> or all the characters in the current instance consist of white-space characters, the method returns <xref:System.String.Empty>.","nodes":[{"content":"If the current string equals <ph id=\"ph1\">&lt;xref:System.String.Empty&gt;</ph> or all the characters in the current instance consist of white-space characters, the method returns <ph id=\"ph2\">&lt;xref:System.String.Empty&gt;</ph>.","pos":[0,183],"source":"If the current string equals <xref:System.String.Empty> or all the characters in the current instance consist of white-space characters, the method returns <xref:System.String.Empty>."}]},{"pos":[993,1267],"content":"White-space characters are defined by the Unicode standard. The <xref:System.String.Trim> method removes any leading and trailing characters that produce a return value of `true` when they are passed to the <xref:System.Char.IsWhiteSpace%2A?displayProperty=fullName> method.","nodes":[{"content":"White-space characters are defined by the Unicode standard.","pos":[0,59]},{"content":"The <ph id=\"ph1\">&lt;xref:System.String.Trim&gt;</ph> method removes any leading and trailing characters that produce a return value of <ph id=\"ph2\">`true`</ph> when they are passed to the <ph id=\"ph3\">&lt;xref:System.Char.IsWhiteSpace%2A?displayProperty=fullName&gt;</ph> method.","pos":[60,274],"source":" The <xref:System.String.Trim> method removes any leading and trailing characters that produce a return value of `true` when they are passed to the <xref:System.Char.IsWhiteSpace%2A?displayProperty=fullName> method."}]}],"pos":[672593,673874],"yaml":true,"extradata":"MT"},{"content":"The string that remains after all white-space characters are removed from the start and end of the current string. If no characters can be trimmed from the current instance, the method returns the current instance unchanged.","nodes":[{"pos":[0,224],"content":"The string that remains after all white-space characters are removed from the start and end of the current string. If no characters can be trimmed from the current instance, the method returns the current instance unchanged.","nodes":[{"content":"The string that remains after all white-space characters are removed from the start and end of the current string. If no characters can be trimmed from the current instance, the method returns the current instance unchanged.","pos":[0,224],"nodes":[{"content":"The string that remains after all white-space characters are removed from the start and end of the current string.","pos":[0,114]},{"content":"If no characters can be trimmed from the current instance, the method returns the current instance unchanged.","pos":[115,224]}]}]}],"pos":[674563,674788],"yaml":true},{"content":"Removes all trailing occurrences of a set of characters specified in an array from the current <xref href=\"System.String\"></xref> object.","nodes":[{"pos":[0,137],"content":"Removes all trailing occurrences of a set of characters specified in an array from the current <ph id=\"ph1\">&lt;xref href=\"System.String\"&gt;&lt;/xref&gt;</ph> object.","source":"Removes all trailing occurrences of a set of characters specified in an array from the current <xref href=\"System.String\"></xref> object."}],"pos":[677574,677712],"yaml":true},{"content":"The <xref:System.String.TrimEnd%2A> method removes from the current string all trailing characters that are in the `trimChars` parameter. The trim operation stops when the first character that is not in `trimChars` is encountered at the end of the string. For example, if the current string is \"123abc456xyz789\" and `trimChars` contains the digits from \"1\" through \"9\", the <xref:System.String.TrimEnd%2A> method returns \"123abc456xyz\".  \n  \n> [!NOTE]\n>  If the <xref:System.String.TrimEnd%2A> method removes any characters from the current instance, this method does not modify the value of the current instance. Instead, it returns a new string in which all trailing characters found in `trimChars` are removed from the current string.","nodes":[{"pos":[0,436],"content":"The <xref:System.String.TrimEnd%2A> method removes from the current string all trailing characters that are in the `trimChars` parameter. The trim operation stops when the first character that is not in `trimChars` is encountered at the end of the string. For example, if the current string is \"123abc456xyz789\" and `trimChars` contains the digits from \"1\" through \"9\", the <xref:System.String.TrimEnd%2A> method returns \"123abc456xyz\".","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.String.TrimEnd%2A&gt;</ph> method removes from the current string all trailing characters that are in the <ph id=\"ph2\">`trimChars`</ph> parameter.","pos":[0,137],"source":"The <xref:System.String.TrimEnd%2A> method removes from the current string all trailing characters that are in the `trimChars` parameter."},{"content":"The trim operation stops when the first character that is not in <ph id=\"ph1\">`trimChars`</ph> is encountered at the end of the string.","pos":[138,255],"source":" The trim operation stops when the first character that is not in `trimChars` is encountered at the end of the string."},{"content":"For example, if the current string is \"123abc456xyz789\" and <ph id=\"ph1\">`trimChars`</ph> contains the digits from \"1\" through \"9\", the <ph id=\"ph2\">&lt;xref:System.String.TrimEnd%2A&gt;</ph> method returns \"123abc456xyz\".","pos":[256,436],"source":" For example, if the current string is \"123abc456xyz789\" and `trimChars` contains the digits from \"1\" through \"9\", the <xref:System.String.TrimEnd%2A> method returns \"123abc456xyz\"."}]},{"pos":[444,737],"content":"[!NOTE]\n If the <xref:System.String.TrimEnd%2A> method removes any characters from the current instance, this method does not modify the value of the current instance. Instead, it returns a new string in which all trailing characters found in `trimChars` are removed from the current string.","leadings":["","> "],"nodes":[{"content":" If the <xref:System.String.TrimEnd%2A> method removes any characters from the current instance, this method does not modify the value of the current instance. Instead, it returns a new string in which all trailing characters found in `trimChars` are removed from the current string.","pos":[8,291],"nodes":[{"content":"If the <ph id=\"ph1\">&lt;xref:System.String.TrimEnd%2A&gt;</ph> method removes any characters from the current instance, this method does not modify the value of the current instance.","pos":[1,159],"source":" If the <xref:System.String.TrimEnd%2A> method removes any characters from the current instance, this method does not modify the value of the current instance."},{"content":"Instead, it returns a new string in which all trailing characters found in <ph id=\"ph1\">`trimChars`</ph> are removed from the current string.","pos":[160,283],"source":" Instead, it returns a new string in which all trailing characters found in `trimChars` are removed from the current string."}]}]}],"pos":[677723,678474],"yaml":true,"extradata":"MT"},{"content":"An array of Unicode characters to remove, or `null`.","nodes":[{"pos":[0,52],"content":"An array of Unicode characters to remove, or <ph id=\"ph1\">`null`</ph>.","source":"An array of Unicode characters to remove, or `null`."}],"pos":[679085,679138],"yaml":true},{"content":"The string that remains after all occurrences of the characters in the <code>trimChars</code> parameter are removed from the end of the current string. If <code>trimChars</code> is `null` or an empty array, Unicode white-space characters are removed instead. If no characters can be trimmed from the current instance, the method returns the current instance unchanged.","nodes":[{"pos":[0,368],"content":"The string that remains after all occurrences of the characters in the <code>trimChars</code> parameter are removed from the end of the current string. If <code>trimChars</code> is `null` or an empty array, Unicode white-space characters are removed instead. If no characters can be trimmed from the current instance, the method returns the current instance unchanged.","nodes":[{"content":"The string that remains after all occurrences of the characters in the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">trimChars</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter are removed from the end of the current string.","pos":[0,151],"source":"The string that remains after all occurrences of the characters in the <code>trimChars</code> parameter are removed from the end of the current string."},{"content":"If <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">trimChars</ph><ept id=\"p1\">&lt;/code&gt;</ept> is <ph id=\"ph2\">`null`</ph> or an empty array, Unicode white-space characters are removed instead.","pos":[152,258],"source":" If <code>trimChars</code> is `null` or an empty array, Unicode white-space characters are removed instead."},{"content":"If no characters can be trimmed from the current instance, the method returns the current instance unchanged.","pos":[259,368]}]}],"pos":[679195,679564],"yaml":true},{"content":"Removes all leading occurrences of a set of characters specified in an array from the current <xref href=\"System.String\"></xref> object.","nodes":[{"pos":[0,136],"content":"Removes all leading occurrences of a set of characters specified in an array from the current <ph id=\"ph1\">&lt;xref href=\"System.String\"&gt;&lt;/xref&gt;</ph> object.","source":"Removes all leading occurrences of a set of characters specified in an array from the current <xref href=\"System.String\"></xref> object."}],"pos":[682397,682534],"yaml":true},{"content":"The <xref:System.String.TrimStart%2A> method removes from the current string all leading characters that are in the `trimChars` parameter. The trim operation stops when a character that is not in `trimChars` is encountered. For example, if the current string is \"123abc456xyz789\" and `trimChars` contains the digits from \"1\" through \"9\", the <xref:System.String.TrimStart%2A> method returns \"abc456xyz789\".  \n  \n> [!NOTE]\n>  If the <xref:System.String.TrimStart%2A> method removes any characters from the current instance, this method does not modify the value of the current instance. Instead, it returns a new string in which all leading white space characters found in the current instance are removed.","nodes":[{"pos":[0,406],"content":"The <xref:System.String.TrimStart%2A> method removes from the current string all leading characters that are in the `trimChars` parameter. The trim operation stops when a character that is not in `trimChars` is encountered. For example, if the current string is \"123abc456xyz789\" and `trimChars` contains the digits from \"1\" through \"9\", the <xref:System.String.TrimStart%2A> method returns \"abc456xyz789\".","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.String.TrimStart%2A&gt;</ph> method removes from the current string all leading characters that are in the <ph id=\"ph2\">`trimChars`</ph> parameter.","pos":[0,138],"source":"The <xref:System.String.TrimStart%2A> method removes from the current string all leading characters that are in the `trimChars` parameter."},{"content":"The trim operation stops when a character that is not in <ph id=\"ph1\">`trimChars`</ph> is encountered.","pos":[139,223],"source":" The trim operation stops when a character that is not in `trimChars` is encountered."},{"content":"For example, if the current string is \"123abc456xyz789\" and <ph id=\"ph1\">`trimChars`</ph> contains the digits from \"1\" through \"9\", the <ph id=\"ph2\">&lt;xref:System.String.TrimStart%2A&gt;</ph> method returns \"abc456xyz789\".","pos":[224,406],"source":" For example, if the current string is \"123abc456xyz789\" and `trimChars` contains the digits from \"1\" through \"9\", the <xref:System.String.TrimStart%2A> method returns \"abc456xyz789\"."}]},{"pos":[414,705],"content":"[!NOTE]\n If the <xref:System.String.TrimStart%2A> method removes any characters from the current instance, this method does not modify the value of the current instance. Instead, it returns a new string in which all leading white space characters found in the current instance are removed.","leadings":["","> "],"nodes":[{"content":" If the <xref:System.String.TrimStart%2A> method removes any characters from the current instance, this method does not modify the value of the current instance. Instead, it returns a new string in which all leading white space characters found in the current instance are removed.","pos":[8,289],"nodes":[{"content":"If the <ph id=\"ph1\">&lt;xref:System.String.TrimStart%2A&gt;</ph> method removes any characters from the current instance, this method does not modify the value of the current instance.","pos":[1,161],"source":" If the <xref:System.String.TrimStart%2A> method removes any characters from the current instance, this method does not modify the value of the current instance."},{"content":"Instead, it returns a new string in which all leading white space characters found in the current instance are removed.","pos":[162,281]}]}]}],"pos":[682545,683264],"yaml":true,"extradata":"MT"},{"content":"An array of Unicode characters to remove, or `null`.","nodes":[{"pos":[0,52],"content":"An array of Unicode characters to remove, or <ph id=\"ph1\">`null`</ph>.","source":"An array of Unicode characters to remove, or `null`."}],"pos":[684567,684620],"yaml":true},{"content":"The string that remains after all occurrences of characters in the <code>trimChars</code> parameter are removed from the start of the current string. If <code>trimChars</code> is `null` or an empty array, white-space characters are removed instead.","nodes":[{"pos":[0,248],"content":"The string that remains after all occurrences of characters in the <code>trimChars</code> parameter are removed from the start of the current string. If <code>trimChars</code> is `null` or an empty array, white-space characters are removed instead.","nodes":[{"content":"The string that remains after all occurrences of characters in the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">trimChars</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter are removed from the start of the current string.","pos":[0,149],"source":"The string that remains after all occurrences of characters in the <code>trimChars</code> parameter are removed from the start of the current string."},{"content":"If <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">trimChars</ph><ept id=\"p1\">&lt;/code&gt;</ept> is <ph id=\"ph2\">`null`</ph> or an empty array, white-space characters are removed instead.","pos":[150,248],"source":" If <code>trimChars</code> is `null` or an empty array, white-space characters are removed instead."}]}],"pos":[684677,684926],"yaml":true},{"content":"Returns an enumerator that iterates through the current <xref href=\"System.String\"></xref> object.","nodes":[{"pos":[0,98],"content":"Returns an enumerator that iterates through the current <ph id=\"ph1\">&lt;xref href=\"System.String\"&gt;&lt;/xref&gt;</ph> object.","source":"Returns an enumerator that iterates through the current <xref href=\"System.String\"></xref> object."}],"pos":[686599,686698],"yaml":true},{"content":"This member is an explicit interface member implementation. It can be used only when the <xref:System.String> instance is cast to an <xref:System.Collections.Generic.IEnumerable%601> interface object. For more information, see the <xref:System.Collections.Generic.IEnumerable%601.GetEnumerator%2A> method.","nodes":[{"pos":[0,305],"content":"This member is an explicit interface member implementation. It can be used only when the <xref:System.String> instance is cast to an <xref:System.Collections.Generic.IEnumerable%601> interface object. For more information, see the <xref:System.Collections.Generic.IEnumerable%601.GetEnumerator%2A> method.","nodes":[{"content":"This member is an explicit interface member implementation. It can be used only when the <xref:System.String> instance is cast to an <xref:System.Collections.Generic.IEnumerable%601> interface object. For more information, see the <xref:System.Collections.Generic.IEnumerable%601.GetEnumerator%2A> method.","pos":[0,305],"nodes":[{"content":"This member is an explicit interface member implementation.","pos":[0,59]},{"content":"It can be used only when the <ph id=\"ph1\">&lt;xref:System.String&gt;</ph> instance is cast to an <ph id=\"ph2\">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph> interface object.","pos":[60,200],"source":" It can be used only when the <xref:System.String> instance is cast to an <xref:System.Collections.Generic.IEnumerable%601> interface object."},{"content":"For more information, see the <ph id=\"ph1\">&lt;xref:System.Collections.Generic.IEnumerable%601.GetEnumerator%2A&gt;</ph> method.","pos":[201,305],"source":" For more information, see the <xref:System.Collections.Generic.IEnumerable%601.GetEnumerator%2A> method."}]}]}],"pos":[686709,687015],"yaml":true,"extradata":"MT"},{"content":"A strongly-typed enumerator that can be used to iterate through the current <xref href=\"System.String\"></xref> object.","nodes":[{"pos":[0,118],"content":"A strongly-typed enumerator that can be used to iterate through the current <ph id=\"ph1\">&lt;xref href=\"System.String\"&gt;&lt;/xref&gt;</ph> object.","source":"A strongly-typed enumerator that can be used to iterate through the current <xref href=\"System.String\"></xref> object."}],"pos":[687233,687352],"yaml":true},{"content":"Returns an enumerator that iterates through the current <xref href=\"System.String\"></xref> object.","nodes":[{"pos":[0,98],"content":"Returns an enumerator that iterates through the current <ph id=\"ph1\">&lt;xref href=\"System.String\"&gt;&lt;/xref&gt;</ph> object.","source":"Returns an enumerator that iterates through the current <xref href=\"System.String\"></xref> object."}],"pos":[688221,688320],"yaml":true},{"content":"This member is an explicit interface member implementation. It can be used only when the <xref:System.String> instance is cast to an <xref:System.Collections.IEnumerable> interface. For more information, see the <xref:System.Collections.IEnumerable.GetEnumerator%2A?displayProperty=fullName> method.","nodes":[{"pos":[0,299],"content":"This member is an explicit interface member implementation. It can be used only when the <xref:System.String> instance is cast to an <xref:System.Collections.IEnumerable> interface. For more information, see the <xref:System.Collections.IEnumerable.GetEnumerator%2A?displayProperty=fullName> method.","nodes":[{"content":"This member is an explicit interface member implementation. It can be used only when the <xref:System.String> instance is cast to an <xref:System.Collections.IEnumerable> interface. For more information, see the <xref:System.Collections.IEnumerable.GetEnumerator%2A?displayProperty=fullName> method.","pos":[0,299],"nodes":[{"content":"This member is an explicit interface member implementation.","pos":[0,59]},{"content":"It can be used only when the <ph id=\"ph1\">&lt;xref:System.String&gt;</ph> instance is cast to an <ph id=\"ph2\">&lt;xref:System.Collections.IEnumerable&gt;</ph> interface.","pos":[60,181],"source":" It can be used only when the <xref:System.String> instance is cast to an <xref:System.Collections.IEnumerable> interface."},{"content":"For more information, see the <ph id=\"ph1\">&lt;xref:System.Collections.IEnumerable.GetEnumerator%2A?displayProperty=fullName&gt;</ph> method.","pos":[182,299],"source":" For more information, see the <xref:System.Collections.IEnumerable.GetEnumerator%2A?displayProperty=fullName> method."}]}]}],"pos":[688331,688631],"yaml":true,"extradata":"MT"},{"content":"An enumerator that can be used to iterate through the current string.","nodes":[{"pos":[0,69],"content":"An enumerator that can be used to iterate through the current string.","nodes":[{"content":"An enumerator that can be used to iterate through the current string.","pos":[0,69]}]}],"pos":[688808,688878],"yaml":true},{"content":"For a description of this member, see <xref href=\"System.IConvertible.ToBoolean(System.IFormatProvider)\"></xref>.","nodes":[{"pos":[0,113],"content":"For a description of this member, see <ph id=\"ph1\">&lt;xref href=\"System.IConvertible.ToBoolean(System.IFormatProvider)\"&gt;&lt;/xref&gt;</ph>.","source":"For a description of this member, see <xref href=\"System.IConvertible.ToBoolean(System.IFormatProvider)\"></xref>."}],"pos":[692715,692829],"yaml":true},{"content":"This member is an explicit interface member implementation. It can be used only when the <xref:System.String> instance is cast to an <xref:System.IConvertible> interface. The recommended alternative is to call the <xref:System.Convert.ToBoolean%28System.String%29?displayProperty=fullName> method.","nodes":[{"pos":[0,297],"content":"This member is an explicit interface member implementation. It can be used only when the <xref:System.String> instance is cast to an <xref:System.IConvertible> interface. The recommended alternative is to call the <xref:System.Convert.ToBoolean%28System.String%29?displayProperty=fullName> method.","nodes":[{"content":"This member is an explicit interface member implementation. It can be used only when the <xref:System.String> instance is cast to an <xref:System.IConvertible> interface. The recommended alternative is to call the <xref:System.Convert.ToBoolean%28System.String%29?displayProperty=fullName> method.","pos":[0,297],"nodes":[{"content":"This member is an explicit interface member implementation.","pos":[0,59]},{"content":"It can be used only when the <ph id=\"ph1\">&lt;xref:System.String&gt;</ph> instance is cast to an <ph id=\"ph2\">&lt;xref:System.IConvertible&gt;</ph> interface.","pos":[60,170],"source":" It can be used only when the <xref:System.String> instance is cast to an <xref:System.IConvertible> interface."},{"content":"The recommended alternative is to call the <ph id=\"ph1\">&lt;xref:System.Convert.ToBoolean%28System.String%29?displayProperty=fullName&gt;</ph> method.","pos":[171,297],"source":" The recommended alternative is to call the <xref:System.Convert.ToBoolean%28System.String%29?displayProperty=fullName> method."}]}]}],"pos":[692840,693138],"yaml":true,"extradata":"MT"},{"content":"This parameter is ignored.","nodes":[{"pos":[0,26],"content":"This parameter is ignored.","nodes":[{"content":"This parameter is ignored.","pos":[0,26]}]}],"pos":[693306,693333],"yaml":true},{"content":"`true` if the value of the current string is <xref href=\"System.Boolean.TrueString\"></xref>; `false` if the value of the current string is <xref href=\"System.Boolean.FalseString\"></xref>.","nodes":[{"pos":[0,187],"content":"<ph id=\"ph1\">`true`</ph> if the value of the current string is <ph id=\"ph2\">&lt;xref href=\"System.Boolean.TrueString\"&gt;&lt;/xref&gt;</ph>; <ph id=\"ph3\">`false`</ph> if the value of the current string is <ph id=\"ph4\">&lt;xref href=\"System.Boolean.FalseString\"&gt;&lt;/xref&gt;</ph>.","source":"`true` if the value of the current string is <xref href=\"System.Boolean.TrueString\"></xref>; `false` if the value of the current string is <xref href=\"System.Boolean.FalseString\"></xref>."}],"pos":[693391,693581],"yaml":true},{"content":"The value of the current string is not <xref href=\"System.Boolean.TrueString\"></xref> or <xref href=\"System.Boolean.FalseString\"></xref>.","nodes":[{"pos":[0,137],"content":"The value of the current string is not <ph id=\"ph1\">&lt;xref href=\"System.Boolean.TrueString\"&gt;&lt;/xref&gt;</ph> or <ph id=\"ph2\">&lt;xref href=\"System.Boolean.FalseString\"&gt;&lt;/xref&gt;</ph>.","source":"The value of the current string is not <xref href=\"System.Boolean.TrueString\"></xref> or <xref href=\"System.Boolean.FalseString\"></xref>."}],"pos":[693742,693880],"yaml":true},{"content":"For a description of this member, see <xref href=\"System.IConvertible.ToByte(System.IFormatProvider)\"></xref>.","nodes":[{"pos":[0,110],"content":"For a description of this member, see <ph id=\"ph1\">&lt;xref href=\"System.IConvertible.ToByte(System.IFormatProvider)\"&gt;&lt;/xref&gt;</ph>.","source":"For a description of this member, see <xref href=\"System.IConvertible.ToByte(System.IFormatProvider)\"></xref>."}],"pos":[695350,695461],"yaml":true},{"content":"This member is an explicit interface member implementation. It can be used only when the <xref:System.String> instance is cast to an <xref:System.IConvertible> interface. The recommended alternative is to call the <xref:System.Convert.ToByte%28System.String%2CSystem.IFormatProvider%29?displayProperty=fullName> method.","nodes":[{"pos":[0,319],"content":"This member is an explicit interface member implementation. It can be used only when the <xref:System.String> instance is cast to an <xref:System.IConvertible> interface. The recommended alternative is to call the <xref:System.Convert.ToByte%28System.String%2CSystem.IFormatProvider%29?displayProperty=fullName> method.","nodes":[{"content":"This member is an explicit interface member implementation. It can be used only when the <xref:System.String> instance is cast to an <xref:System.IConvertible> interface. The recommended alternative is to call the <xref:System.Convert.ToByte%28System.String%2CSystem.IFormatProvider%29?displayProperty=fullName> method.","pos":[0,319],"nodes":[{"content":"This member is an explicit interface member implementation.","pos":[0,59]},{"content":"It can be used only when the <ph id=\"ph1\">&lt;xref:System.String&gt;</ph> instance is cast to an <ph id=\"ph2\">&lt;xref:System.IConvertible&gt;</ph> interface.","pos":[60,170],"source":" It can be used only when the <xref:System.String> instance is cast to an <xref:System.IConvertible> interface."},{"content":"The recommended alternative is to call the <ph id=\"ph1\">&lt;xref:System.Convert.ToByte%28System.String%2CSystem.IFormatProvider%29?displayProperty=fullName&gt;</ph> method.","pos":[171,319],"source":" The recommended alternative is to call the <xref:System.Convert.ToByte%28System.String%2CSystem.IFormatProvider%29?displayProperty=fullName> method."}]}]}],"pos":[695472,695792],"yaml":true,"extradata":"MT"},{"content":"An object that provides culture-specific formatting information.","nodes":[{"pos":[0,64],"content":"An object that provides culture-specific formatting information.","nodes":[{"content":"An object that provides culture-specific formatting information.","pos":[0,64]}]}],"pos":[695957,696022],"yaml":true},{"content":"The converted value of the current <xref href=\"System.String\"></xref> object.","nodes":[{"pos":[0,77],"content":"The converted value of the current <ph id=\"ph1\">&lt;xref href=\"System.String\"&gt;&lt;/xref&gt;</ph> object.","source":"The converted value of the current <xref href=\"System.String\"></xref> object."}],"pos":[696077,696155],"yaml":true},{"content":"The value of the current <xref href=\"System.String\"></xref> object cannot be parsed.","nodes":[{"pos":[0,84],"content":"The value of the current <ph id=\"ph1\">&lt;xref href=\"System.String\"&gt;&lt;/xref&gt;</ph> object cannot be parsed.","source":"The value of the current <xref href=\"System.String\"></xref> object cannot be parsed."}],"pos":[696313,696398],"yaml":true},{"content":"The value of the current <xref href=\"System.String\"></xref> object is a number greater than <xref href=\"System.Byte.MaxValue\"></xref> or less than <xref href=\"System.Byte.MinValue\"></xref>.","nodes":[{"pos":[0,189],"content":"The value of the current <ph id=\"ph1\">&lt;xref href=\"System.String\"&gt;&lt;/xref&gt;</ph> object is a number greater than <ph id=\"ph2\">&lt;xref href=\"System.Byte.MaxValue\"&gt;&lt;/xref&gt;</ph> or less than <ph id=\"ph3\">&lt;xref href=\"System.Byte.MinValue\"&gt;&lt;/xref&gt;</ph>.","source":"The value of the current <xref href=\"System.String\"></xref> object is a number greater than <xref href=\"System.Byte.MaxValue\"></xref> or less than <xref href=\"System.Byte.MinValue\"></xref>."}],"pos":[696492,696682],"yaml":true},{"content":"For a description of this member, see <xref href=\"System.IConvertible.ToChar(System.IFormatProvider)\"></xref>.","nodes":[{"pos":[0,110],"content":"For a description of this member, see <ph id=\"ph1\">&lt;xref href=\"System.IConvertible.ToChar(System.IFormatProvider)\"&gt;&lt;/xref&gt;</ph>.","source":"For a description of this member, see <xref href=\"System.IConvertible.ToChar(System.IFormatProvider)\"></xref>."}],"pos":[698152,698263],"yaml":true},{"content":"This member is an explicit interface member implementation. It can be used only when the <xref:System.String> instance is cast to an <xref:System.IConvertible> interface. The recommended alternative is to call the <xref:System.Convert.ToChar%28System.String%2CSystem.IFormatProvider%29?displayProperty=fullName> method.","nodes":[{"pos":[0,319],"content":"This member is an explicit interface member implementation. It can be used only when the <xref:System.String> instance is cast to an <xref:System.IConvertible> interface. The recommended alternative is to call the <xref:System.Convert.ToChar%28System.String%2CSystem.IFormatProvider%29?displayProperty=fullName> method.","nodes":[{"content":"This member is an explicit interface member implementation. It can be used only when the <xref:System.String> instance is cast to an <xref:System.IConvertible> interface. The recommended alternative is to call the <xref:System.Convert.ToChar%28System.String%2CSystem.IFormatProvider%29?displayProperty=fullName> method.","pos":[0,319],"nodes":[{"content":"This member is an explicit interface member implementation.","pos":[0,59]},{"content":"It can be used only when the <ph id=\"ph1\">&lt;xref:System.String&gt;</ph> instance is cast to an <ph id=\"ph2\">&lt;xref:System.IConvertible&gt;</ph> interface.","pos":[60,170],"source":" It can be used only when the <xref:System.String> instance is cast to an <xref:System.IConvertible> interface."},{"content":"The recommended alternative is to call the <ph id=\"ph1\">&lt;xref:System.Convert.ToChar%28System.String%2CSystem.IFormatProvider%29?displayProperty=fullName&gt;</ph> method.","pos":[171,319],"source":" The recommended alternative is to call the <xref:System.Convert.ToChar%28System.String%2CSystem.IFormatProvider%29?displayProperty=fullName> method."}]}]}],"pos":[698274,698594],"yaml":true,"extradata":"MT"},{"content":"An object that provides culture-specific formatting information.","nodes":[{"pos":[0,64],"content":"An object that provides culture-specific formatting information.","nodes":[{"content":"An object that provides culture-specific formatting information.","pos":[0,64]}]}],"pos":[698759,698824],"yaml":true},{"content":"The character at index 0 in the current <xref href=\"System.String\"></xref> object.","nodes":[{"pos":[0,82],"content":"The character at index 0 in the current <ph id=\"ph1\">&lt;xref href=\"System.String\"&gt;&lt;/xref&gt;</ph> object.","source":"The character at index 0 in the current <xref href=\"System.String\"></xref> object."}],"pos":[698879,698962],"yaml":true},{"content":"For a description of this member, see <xref href=\"System.IConvertible.ToDateTime(System.IFormatProvider)\"></xref>.","nodes":[{"pos":[0,114],"content":"For a description of this member, see <ph id=\"ph1\">&lt;xref href=\"System.IConvertible.ToDateTime(System.IFormatProvider)\"&gt;&lt;/xref&gt;</ph>.","source":"For a description of this member, see <xref href=\"System.IConvertible.ToDateTime(System.IFormatProvider)\"></xref>."}],"pos":[700527,700642],"yaml":true},{"content":"This member is an explicit interface member implementation. It can be used only when the <xref:System.String> instance is cast to an <xref:System.IConvertible> interface. The recommended alternative is to call the <xref:System.Convert.ToDateTime%28System.String%2CSystem.IFormatProvider%29?displayProperty=fullName> method.","nodes":[{"pos":[0,323],"content":"This member is an explicit interface member implementation. It can be used only when the <xref:System.String> instance is cast to an <xref:System.IConvertible> interface. The recommended alternative is to call the <xref:System.Convert.ToDateTime%28System.String%2CSystem.IFormatProvider%29?displayProperty=fullName> method.","nodes":[{"content":"This member is an explicit interface member implementation. It can be used only when the <xref:System.String> instance is cast to an <xref:System.IConvertible> interface. The recommended alternative is to call the <xref:System.Convert.ToDateTime%28System.String%2CSystem.IFormatProvider%29?displayProperty=fullName> method.","pos":[0,323],"nodes":[{"content":"This member is an explicit interface member implementation.","pos":[0,59]},{"content":"It can be used only when the <ph id=\"ph1\">&lt;xref:System.String&gt;</ph> instance is cast to an <ph id=\"ph2\">&lt;xref:System.IConvertible&gt;</ph> interface.","pos":[60,170],"source":" It can be used only when the <xref:System.String> instance is cast to an <xref:System.IConvertible> interface."},{"content":"The recommended alternative is to call the <ph id=\"ph1\">&lt;xref:System.Convert.ToDateTime%28System.String%2CSystem.IFormatProvider%29?displayProperty=fullName&gt;</ph> method.","pos":[171,323],"source":" The recommended alternative is to call the <xref:System.Convert.ToDateTime%28System.String%2CSystem.IFormatProvider%29?displayProperty=fullName> method."}]}]}],"pos":[700653,700977],"yaml":true,"extradata":"MT"},{"content":"An object that provides culture-specific formatting information.","nodes":[{"pos":[0,64],"content":"An object that provides culture-specific formatting information.","nodes":[{"content":"An object that provides culture-specific formatting information.","pos":[0,64]}]}],"pos":[701150,701215],"yaml":true},{"content":"The converted value of the current <xref href=\"System.String\"></xref> object.","nodes":[{"pos":[0,77],"content":"The converted value of the current <ph id=\"ph1\">&lt;xref href=\"System.String\"&gt;&lt;/xref&gt;</ph> object.","source":"The converted value of the current <xref href=\"System.String\"></xref> object."}],"pos":[701274,701352],"yaml":true},{"content":"For a description of this member, see <xref href=\"System.IConvertible.ToDecimal(System.IFormatProvider)\"></xref>.","nodes":[{"pos":[0,113],"content":"For a description of this member, see <ph id=\"ph1\">&lt;xref href=\"System.IConvertible.ToDecimal(System.IFormatProvider)\"&gt;&lt;/xref&gt;</ph>.","source":"For a description of this member, see <xref href=\"System.IConvertible.ToDecimal(System.IFormatProvider)\"></xref>."}],"pos":[702915,703029],"yaml":true},{"content":"This member is an explicit interface member implementation. It can be used only when the <xref:System.String> instance is cast to an <xref:System.IConvertible> interface. The recommended alternative is to call the <xref:System.Convert.ToDecimal%28System.String%2CSystem.IFormatProvider%29?displayProperty=fullName> method.","nodes":[{"pos":[0,322],"content":"This member is an explicit interface member implementation. It can be used only when the <xref:System.String> instance is cast to an <xref:System.IConvertible> interface. The recommended alternative is to call the <xref:System.Convert.ToDecimal%28System.String%2CSystem.IFormatProvider%29?displayProperty=fullName> method.","nodes":[{"content":"This member is an explicit interface member implementation. It can be used only when the <xref:System.String> instance is cast to an <xref:System.IConvertible> interface. The recommended alternative is to call the <xref:System.Convert.ToDecimal%28System.String%2CSystem.IFormatProvider%29?displayProperty=fullName> method.","pos":[0,322],"nodes":[{"content":"This member is an explicit interface member implementation.","pos":[0,59]},{"content":"It can be used only when the <ph id=\"ph1\">&lt;xref:System.String&gt;</ph> instance is cast to an <ph id=\"ph2\">&lt;xref:System.IConvertible&gt;</ph> interface.","pos":[60,170],"source":" It can be used only when the <xref:System.String> instance is cast to an <xref:System.IConvertible> interface."},{"content":"The recommended alternative is to call the <ph id=\"ph1\">&lt;xref:System.Convert.ToDecimal%28System.String%2CSystem.IFormatProvider%29?displayProperty=fullName&gt;</ph> method.","pos":[171,322],"source":" The recommended alternative is to call the <xref:System.Convert.ToDecimal%28System.String%2CSystem.IFormatProvider%29?displayProperty=fullName> method."}]}]}],"pos":[703040,703363],"yaml":true,"extradata":"MT"},{"content":"An object that provides culture-specific formatting information.","nodes":[{"pos":[0,64],"content":"An object that provides culture-specific formatting information.","nodes":[{"content":"An object that provides culture-specific formatting information.","pos":[0,64]}]}],"pos":[703534,703599],"yaml":true},{"content":"The converted value of the current <xref href=\"System.String\"></xref> object.","nodes":[{"pos":[0,77],"content":"The converted value of the current <ph id=\"ph1\">&lt;xref href=\"System.String\"&gt;&lt;/xref&gt;</ph> object.","source":"The converted value of the current <xref href=\"System.String\"></xref> object."}],"pos":[703657,703735],"yaml":true},{"content":"The value of the current <xref href=\"System.String\"></xref> object cannot be parsed.","nodes":[{"pos":[0,84],"content":"The value of the current <ph id=\"ph1\">&lt;xref href=\"System.String\"&gt;&lt;/xref&gt;</ph> object cannot be parsed.","source":"The value of the current <xref href=\"System.String\"></xref> object cannot be parsed."}],"pos":[703896,703981],"yaml":true},{"content":"The value of the current <xref href=\"System.String\"></xref> object is a number less than <xref href=\"System.Decimal.MinValue\"></xref> or than <xref href=\"System.Decimal.MaxValue\"></xref> greater.","nodes":[{"pos":[0,195],"content":"The value of the current <ph id=\"ph1\">&lt;xref href=\"System.String\"&gt;&lt;/xref&gt;</ph> object is a number less than <ph id=\"ph2\">&lt;xref href=\"System.Decimal.MinValue\"&gt;&lt;/xref&gt;</ph> or than <ph id=\"ph3\">&lt;xref href=\"System.Decimal.MaxValue\"&gt;&lt;/xref&gt;</ph> greater.","source":"The value of the current <xref href=\"System.String\"></xref> object is a number less than <xref href=\"System.Decimal.MinValue\"></xref> or than <xref href=\"System.Decimal.MaxValue\"></xref> greater."}],"pos":[704075,704271],"yaml":true},{"content":"For a description of this member, see <xref href=\"System.IConvertible.ToDouble(System.IFormatProvider)\"></xref>.","nodes":[{"pos":[0,112],"content":"For a description of this member, see <ph id=\"ph1\">&lt;xref href=\"System.IConvertible.ToDouble(System.IFormatProvider)\"&gt;&lt;/xref&gt;</ph>.","source":"For a description of this member, see <xref href=\"System.IConvertible.ToDouble(System.IFormatProvider)\"></xref>."}],"pos":[705753,705866],"yaml":true},{"content":"This member is an explicit interface member implementation. It can be used only when the <xref:System.String> instance is cast to an <xref:System.IConvertible> interface. The recommended alternative is to call the <xref:System.Convert.ToDouble%28System.String%2CSystem.IFormatProvider%29?displayProperty=fullName> method.","nodes":[{"pos":[0,321],"content":"This member is an explicit interface member implementation. It can be used only when the <xref:System.String> instance is cast to an <xref:System.IConvertible> interface. The recommended alternative is to call the <xref:System.Convert.ToDouble%28System.String%2CSystem.IFormatProvider%29?displayProperty=fullName> method.","nodes":[{"content":"This member is an explicit interface member implementation. It can be used only when the <xref:System.String> instance is cast to an <xref:System.IConvertible> interface. The recommended alternative is to call the <xref:System.Convert.ToDouble%28System.String%2CSystem.IFormatProvider%29?displayProperty=fullName> method.","pos":[0,321],"nodes":[{"content":"This member is an explicit interface member implementation.","pos":[0,59]},{"content":"It can be used only when the <ph id=\"ph1\">&lt;xref:System.String&gt;</ph> instance is cast to an <ph id=\"ph2\">&lt;xref:System.IConvertible&gt;</ph> interface.","pos":[60,170],"source":" It can be used only when the <xref:System.String> instance is cast to an <xref:System.IConvertible> interface."},{"content":"The recommended alternative is to call the <ph id=\"ph1\">&lt;xref:System.Convert.ToDouble%28System.String%2CSystem.IFormatProvider%29?displayProperty=fullName&gt;</ph> method.","pos":[171,321],"source":" The recommended alternative is to call the <xref:System.Convert.ToDouble%28System.String%2CSystem.IFormatProvider%29?displayProperty=fullName> method."}]}]}],"pos":[705877,706199],"yaml":true,"extradata":"MT"},{"content":"An object that provides culture-specific formatting information.","nodes":[{"pos":[0,64],"content":"An object that provides culture-specific formatting information.","nodes":[{"content":"An object that provides culture-specific formatting information.","pos":[0,64]}]}],"pos":[706368,706433],"yaml":true},{"content":"The converted value of the current <xref href=\"System.String\"></xref> object.","nodes":[{"pos":[0,77],"content":"The converted value of the current <ph id=\"ph1\">&lt;xref href=\"System.String\"&gt;&lt;/xref&gt;</ph> object.","source":"The converted value of the current <xref href=\"System.String\"></xref> object."}],"pos":[706490,706568],"yaml":true},{"content":"The value of the current <xref href=\"System.String\"></xref> object cannot be parsed.","nodes":[{"pos":[0,84],"content":"The value of the current <ph id=\"ph1\">&lt;xref href=\"System.String\"&gt;&lt;/xref&gt;</ph> object cannot be parsed.","source":"The value of the current <xref href=\"System.String\"></xref> object cannot be parsed."}],"pos":[706728,706813],"yaml":true},{"content":"The value of the current <xref href=\"System.String\"></xref> object is a number less than <xref href=\"System.Double.MinValue\"></xref> or greater than <xref href=\"System.Double.MaxValue\"></xref>.","nodes":[{"pos":[0,193],"content":"The value of the current <ph id=\"ph1\">&lt;xref href=\"System.String\"&gt;&lt;/xref&gt;</ph> object is a number less than <ph id=\"ph2\">&lt;xref href=\"System.Double.MinValue\"&gt;&lt;/xref&gt;</ph> or greater than <ph id=\"ph3\">&lt;xref href=\"System.Double.MaxValue\"&gt;&lt;/xref&gt;</ph>.","source":"The value of the current <xref href=\"System.String\"></xref> object is a number less than <xref href=\"System.Double.MinValue\"></xref> or greater than <xref href=\"System.Double.MaxValue\"></xref>."}],"pos":[706907,707101],"yaml":true},{"content":"For a description of this member, see <xref href=\"System.IConvertible.ToInt16(System.IFormatProvider)\"></xref>.","nodes":[{"pos":[0,111],"content":"For a description of this member, see <ph id=\"ph1\">&lt;xref href=\"System.IConvertible.ToInt16(System.IFormatProvider)\"&gt;&lt;/xref&gt;</ph>.","source":"For a description of this member, see <xref href=\"System.IConvertible.ToInt16(System.IFormatProvider)\"></xref>."}],"pos":[708577,708689],"yaml":true},{"content":"This member is an explicit interface member implementation. It can be used only when the <xref:System.String> instance is cast to an <xref:System.IConvertible> interface. The recommended alternative is to call the <xref:System.Convert.ToInt16%28System.String%2CSystem.IFormatProvider%29?displayProperty=fullName> method.","nodes":[{"pos":[0,320],"content":"This member is an explicit interface member implementation. It can be used only when the <xref:System.String> instance is cast to an <xref:System.IConvertible> interface. The recommended alternative is to call the <xref:System.Convert.ToInt16%28System.String%2CSystem.IFormatProvider%29?displayProperty=fullName> method.","nodes":[{"content":"This member is an explicit interface member implementation. It can be used only when the <xref:System.String> instance is cast to an <xref:System.IConvertible> interface. The recommended alternative is to call the <xref:System.Convert.ToInt16%28System.String%2CSystem.IFormatProvider%29?displayProperty=fullName> method.","pos":[0,320],"nodes":[{"content":"This member is an explicit interface member implementation.","pos":[0,59]},{"content":"It can be used only when the <ph id=\"ph1\">&lt;xref:System.String&gt;</ph> instance is cast to an <ph id=\"ph2\">&lt;xref:System.IConvertible&gt;</ph> interface.","pos":[60,170],"source":" It can be used only when the <xref:System.String> instance is cast to an <xref:System.IConvertible> interface."},{"content":"The recommended alternative is to call the <ph id=\"ph1\">&lt;xref:System.Convert.ToInt16%28System.String%2CSystem.IFormatProvider%29?displayProperty=fullName&gt;</ph> method.","pos":[171,320],"source":" The recommended alternative is to call the <xref:System.Convert.ToInt16%28System.String%2CSystem.IFormatProvider%29?displayProperty=fullName> method."}]}]}],"pos":[708700,709021],"yaml":true,"extradata":"MT"},{"content":"An object that provides culture-specific formatting information.","nodes":[{"pos":[0,64],"content":"An object that provides culture-specific formatting information.","nodes":[{"content":"An object that provides culture-specific formatting information.","pos":[0,64]}]}],"pos":[709188,709253],"yaml":true},{"content":"The converted value of the current <xref href=\"System.String\"></xref> object.","nodes":[{"pos":[0,77],"content":"The converted value of the current <ph id=\"ph1\">&lt;xref href=\"System.String\"&gt;&lt;/xref&gt;</ph> object.","source":"The converted value of the current <xref href=\"System.String\"></xref> object."}],"pos":[709309,709387],"yaml":true},{"content":"The value of the current <xref href=\"System.String\"></xref> object cannot be parsed.","nodes":[{"pos":[0,84],"content":"The value of the current <ph id=\"ph1\">&lt;xref href=\"System.String\"&gt;&lt;/xref&gt;</ph> object cannot be parsed.","source":"The value of the current <xref href=\"System.String\"></xref> object cannot be parsed."}],"pos":[709546,709631],"yaml":true},{"content":"The value of the current <xref href=\"System.String\"></xref> object is a number greater than <xref href=\"System.Int16.MaxValue\"></xref> or less than <xref href=\"System.Int16.MinValue\"></xref>.","nodes":[{"pos":[0,191],"content":"The value of the current <ph id=\"ph1\">&lt;xref href=\"System.String\"&gt;&lt;/xref&gt;</ph> object is a number greater than <ph id=\"ph2\">&lt;xref href=\"System.Int16.MaxValue\"&gt;&lt;/xref&gt;</ph> or less than <ph id=\"ph3\">&lt;xref href=\"System.Int16.MinValue\"&gt;&lt;/xref&gt;</ph>.","source":"The value of the current <xref href=\"System.String\"></xref> object is a number greater than <xref href=\"System.Int16.MaxValue\"></xref> or less than <xref href=\"System.Int16.MinValue\"></xref>."}],"pos":[709725,709917],"yaml":true},{"content":"For a description of this member, see <xref href=\"System.IConvertible.ToInt32(System.IFormatProvider)\"></xref>.","nodes":[{"pos":[0,111],"content":"For a description of this member, see <ph id=\"ph1\">&lt;xref href=\"System.IConvertible.ToInt32(System.IFormatProvider)\"&gt;&lt;/xref&gt;</ph>.","source":"For a description of this member, see <xref href=\"System.IConvertible.ToInt32(System.IFormatProvider)\"></xref>."}],"pos":[711393,711505],"yaml":true},{"content":"This member is an explicit interface member implementation. It can be used only when the <xref:System.String> instance is cast to an <xref:System.IConvertible> interface. The recommended alternative is to call the <xref:System.Convert.ToInt32%28System.String%2CSystem.IFormatProvider%29?displayProperty=fullName> method.","nodes":[{"pos":[0,320],"content":"This member is an explicit interface member implementation. It can be used only when the <xref:System.String> instance is cast to an <xref:System.IConvertible> interface. The recommended alternative is to call the <xref:System.Convert.ToInt32%28System.String%2CSystem.IFormatProvider%29?displayProperty=fullName> method.","nodes":[{"content":"This member is an explicit interface member implementation. It can be used only when the <xref:System.String> instance is cast to an <xref:System.IConvertible> interface. The recommended alternative is to call the <xref:System.Convert.ToInt32%28System.String%2CSystem.IFormatProvider%29?displayProperty=fullName> method.","pos":[0,320],"nodes":[{"content":"This member is an explicit interface member implementation.","pos":[0,59]},{"content":"It can be used only when the <ph id=\"ph1\">&lt;xref:System.String&gt;</ph> instance is cast to an <ph id=\"ph2\">&lt;xref:System.IConvertible&gt;</ph> interface.","pos":[60,170],"source":" It can be used only when the <xref:System.String> instance is cast to an <xref:System.IConvertible> interface."},{"content":"The recommended alternative is to call the <ph id=\"ph1\">&lt;xref:System.Convert.ToInt32%28System.String%2CSystem.IFormatProvider%29?displayProperty=fullName&gt;</ph> method.","pos":[171,320],"source":" The recommended alternative is to call the <xref:System.Convert.ToInt32%28System.String%2CSystem.IFormatProvider%29?displayProperty=fullName> method."}]}]}],"pos":[711516,711837],"yaml":true,"extradata":"MT"},{"content":"An object that provides culture-specific formatting information.","nodes":[{"pos":[0,64],"content":"An object that provides culture-specific formatting information.","nodes":[{"content":"An object that provides culture-specific formatting information.","pos":[0,64]}]}],"pos":[712002,712067],"yaml":true},{"content":"The converted value of the current <xref href=\"System.String\"></xref> object.","nodes":[{"pos":[0,77],"content":"The converted value of the current <ph id=\"ph1\">&lt;xref href=\"System.String\"&gt;&lt;/xref&gt;</ph> object.","source":"The converted value of the current <xref href=\"System.String\"></xref> object."}],"pos":[712123,712201],"yaml":true},{"content":"For a description of this member, see <xref href=\"System.IConvertible.ToInt64(System.IFormatProvider)\"></xref>.","nodes":[{"pos":[0,111],"content":"For a description of this member, see <ph id=\"ph1\">&lt;xref href=\"System.IConvertible.ToInt64(System.IFormatProvider)\"&gt;&lt;/xref&gt;</ph>.","source":"For a description of this member, see <xref href=\"System.IConvertible.ToInt64(System.IFormatProvider)\"></xref>."}],"pos":[713749,713861],"yaml":true},{"content":"This member is an explicit interface member implementation. It can be used only when the <xref:System.String> instance is cast to an <xref:System.IConvertible> interface. The recommended alternative is to call the <xref:System.Convert.ToInt64%28System.String%2CSystem.IFormatProvider%29?displayProperty=fullName> method.","nodes":[{"pos":[0,320],"content":"This member is an explicit interface member implementation. It can be used only when the <xref:System.String> instance is cast to an <xref:System.IConvertible> interface. The recommended alternative is to call the <xref:System.Convert.ToInt64%28System.String%2CSystem.IFormatProvider%29?displayProperty=fullName> method.","nodes":[{"content":"This member is an explicit interface member implementation. It can be used only when the <xref:System.String> instance is cast to an <xref:System.IConvertible> interface. The recommended alternative is to call the <xref:System.Convert.ToInt64%28System.String%2CSystem.IFormatProvider%29?displayProperty=fullName> method.","pos":[0,320],"nodes":[{"content":"This member is an explicit interface member implementation.","pos":[0,59]},{"content":"It can be used only when the <ph id=\"ph1\">&lt;xref:System.String&gt;</ph> instance is cast to an <ph id=\"ph2\">&lt;xref:System.IConvertible&gt;</ph> interface.","pos":[60,170],"source":" It can be used only when the <xref:System.String> instance is cast to an <xref:System.IConvertible> interface."},{"content":"The recommended alternative is to call the <ph id=\"ph1\">&lt;xref:System.Convert.ToInt64%28System.String%2CSystem.IFormatProvider%29?displayProperty=fullName&gt;</ph> method.","pos":[171,320],"source":" The recommended alternative is to call the <xref:System.Convert.ToInt64%28System.String%2CSystem.IFormatProvider%29?displayProperty=fullName> method."}]}]}],"pos":[713872,714193],"yaml":true,"extradata":"MT"},{"content":"An object that provides culture-specific formatting information.","nodes":[{"pos":[0,64],"content":"An object that provides culture-specific formatting information.","nodes":[{"content":"An object that provides culture-specific formatting information.","pos":[0,64]}]}],"pos":[714359,714424],"yaml":true},{"content":"The converted value of the current <xref href=\"System.String\"></xref> object.","nodes":[{"pos":[0,77],"content":"The converted value of the current <ph id=\"ph1\">&lt;xref href=\"System.String\"&gt;&lt;/xref&gt;</ph> object.","source":"The converted value of the current <xref href=\"System.String\"></xref> object."}],"pos":[714480,714558],"yaml":true},{"content":"For a description of this member, see <xref href=\"System.IConvertible.ToSByte(System.IFormatProvider)\"></xref>.","nodes":[{"pos":[0,111],"content":"For a description of this member, see <ph id=\"ph1\">&lt;xref href=\"System.IConvertible.ToSByte(System.IFormatProvider)\"&gt;&lt;/xref&gt;</ph>.","source":"For a description of this member, see <xref href=\"System.IConvertible.ToSByte(System.IFormatProvider)\"></xref>."}],"pos":[716106,716218],"yaml":true},{"content":"This member is an explicit interface member implementation. It can be used only when the <xref:System.String> instance is cast to an <xref:System.IConvertible> interface. The recommended alternative is to call the <xref:System.Convert.ToSByte%28System.String%2CSystem.IFormatProvider%29?displayProperty=fullName> method.","nodes":[{"pos":[0,320],"content":"This member is an explicit interface member implementation. It can be used only when the <xref:System.String> instance is cast to an <xref:System.IConvertible> interface. The recommended alternative is to call the <xref:System.Convert.ToSByte%28System.String%2CSystem.IFormatProvider%29?displayProperty=fullName> method.","nodes":[{"content":"This member is an explicit interface member implementation. It can be used only when the <xref:System.String> instance is cast to an <xref:System.IConvertible> interface. The recommended alternative is to call the <xref:System.Convert.ToSByte%28System.String%2CSystem.IFormatProvider%29?displayProperty=fullName> method.","pos":[0,320],"nodes":[{"content":"This member is an explicit interface member implementation.","pos":[0,59]},{"content":"It can be used only when the <ph id=\"ph1\">&lt;xref:System.String&gt;</ph> instance is cast to an <ph id=\"ph2\">&lt;xref:System.IConvertible&gt;</ph> interface.","pos":[60,170],"source":" It can be used only when the <xref:System.String> instance is cast to an <xref:System.IConvertible> interface."},{"content":"The recommended alternative is to call the <ph id=\"ph1\">&lt;xref:System.Convert.ToSByte%28System.String%2CSystem.IFormatProvider%29?displayProperty=fullName&gt;</ph> method.","pos":[171,320],"source":" The recommended alternative is to call the <xref:System.Convert.ToSByte%28System.String%2CSystem.IFormatProvider%29?displayProperty=fullName> method."}]}]}],"pos":[716229,716550],"yaml":true,"extradata":"MT"},{"content":"An object that provides culture-specific formatting information.","nodes":[{"pos":[0,64],"content":"An object that provides culture-specific formatting information.","nodes":[{"content":"An object that provides culture-specific formatting information.","pos":[0,64]}]}],"pos":[716717,716782],"yaml":true},{"content":"The converted value of the current <xref href=\"System.String\"></xref> object.","nodes":[{"pos":[0,77],"content":"The converted value of the current <ph id=\"ph1\">&lt;xref href=\"System.String\"&gt;&lt;/xref&gt;</ph> object.","source":"The converted value of the current <xref href=\"System.String\"></xref> object."}],"pos":[716838,716916],"yaml":true},{"content":"The value of the current <xref href=\"System.String\"></xref> object cannot be parsed.","nodes":[{"pos":[0,84],"content":"The value of the current <ph id=\"ph1\">&lt;xref href=\"System.String\"&gt;&lt;/xref&gt;</ph> object cannot be parsed.","source":"The value of the current <xref href=\"System.String\"></xref> object cannot be parsed."}],"pos":[717075,717160],"yaml":true},{"content":"The value of the current <xref href=\"System.String\"></xref> object is a number greater than <xref href=\"System.SByte.MaxValue\"></xref> or less than <xref href=\"System.SByte.MinValue\"></xref>.","nodes":[{"pos":[0,191],"content":"The value of the current <ph id=\"ph1\">&lt;xref href=\"System.String\"&gt;&lt;/xref&gt;</ph> object is a number greater than <ph id=\"ph2\">&lt;xref href=\"System.SByte.MaxValue\"&gt;&lt;/xref&gt;</ph> or less than <ph id=\"ph3\">&lt;xref href=\"System.SByte.MinValue\"&gt;&lt;/xref&gt;</ph>.","source":"The value of the current <xref href=\"System.String\"></xref> object is a number greater than <xref href=\"System.SByte.MaxValue\"></xref> or less than <xref href=\"System.SByte.MinValue\"></xref>."}],"pos":[717254,717446],"yaml":true},{"content":"For a description of this member, see <xref href=\"System.IConvertible.ToSingle(System.IFormatProvider)\"></xref>.","nodes":[{"pos":[0,112],"content":"For a description of this member, see <ph id=\"ph1\">&lt;xref href=\"System.IConvertible.ToSingle(System.IFormatProvider)\"&gt;&lt;/xref&gt;</ph>.","source":"For a description of this member, see <xref href=\"System.IConvertible.ToSingle(System.IFormatProvider)\"></xref>."}],"pos":[718928,719041],"yaml":true},{"content":"This member is an explicit interface member implementation. It can be used only when the <xref:System.String> instance is cast to an <xref:System.IConvertible> interface. The recommended alternative is to call the <xref:System.Convert.ToSingle%28System.String%2CSystem.IFormatProvider%29?displayProperty=fullName> method.","nodes":[{"pos":[0,321],"content":"This member is an explicit interface member implementation. It can be used only when the <xref:System.String> instance is cast to an <xref:System.IConvertible> interface. The recommended alternative is to call the <xref:System.Convert.ToSingle%28System.String%2CSystem.IFormatProvider%29?displayProperty=fullName> method.","nodes":[{"content":"This member is an explicit interface member implementation. It can be used only when the <xref:System.String> instance is cast to an <xref:System.IConvertible> interface. The recommended alternative is to call the <xref:System.Convert.ToSingle%28System.String%2CSystem.IFormatProvider%29?displayProperty=fullName> method.","pos":[0,321],"nodes":[{"content":"This member is an explicit interface member implementation.","pos":[0,59]},{"content":"It can be used only when the <ph id=\"ph1\">&lt;xref:System.String&gt;</ph> instance is cast to an <ph id=\"ph2\">&lt;xref:System.IConvertible&gt;</ph> interface.","pos":[60,170],"source":" It can be used only when the <xref:System.String> instance is cast to an <xref:System.IConvertible> interface."},{"content":"The recommended alternative is to call the <ph id=\"ph1\">&lt;xref:System.Convert.ToSingle%28System.String%2CSystem.IFormatProvider%29?displayProperty=fullName&gt;</ph> method.","pos":[171,321],"source":" The recommended alternative is to call the <xref:System.Convert.ToSingle%28System.String%2CSystem.IFormatProvider%29?displayProperty=fullName> method."}]}]}],"pos":[719052,719374],"yaml":true,"extradata":"MT"},{"content":"An object that provides culture-specific formatting information.","nodes":[{"pos":[0,64],"content":"An object that provides culture-specific formatting information.","nodes":[{"content":"An object that provides culture-specific formatting information.","pos":[0,64]}]}],"pos":[719542,719607],"yaml":true},{"content":"The converted value of the current <xref href=\"System.String\"></xref> object.","nodes":[{"pos":[0,77],"content":"The converted value of the current <ph id=\"ph1\">&lt;xref href=\"System.String\"&gt;&lt;/xref&gt;</ph> object.","source":"The converted value of the current <xref href=\"System.String\"></xref> object."}],"pos":[719664,719742],"yaml":true},{"content":"For a description of this member, see <xref href=\"System.IConvertible.ToType(System.Type,System.IFormatProvider)\"></xref>.","nodes":[{"pos":[0,122],"content":"For a description of this member, see <ph id=\"ph1\">&lt;xref href=\"System.IConvertible.ToType(System.Type,System.IFormatProvider)\"&gt;&lt;/xref&gt;</ph>.","source":"For a description of this member, see <xref href=\"System.IConvertible.ToType(System.Type,System.IFormatProvider)\"></xref>."}],"pos":[722483,722606],"yaml":true},{"content":"This member is an explicit interface member implementation. It can be used only when the <xref:System.String> instance is cast to an <xref:System.IConvertible> interface. The recommended alternative is to call the <xref:System.Convert.ChangeType%2A> method.","nodes":[{"pos":[0,257],"content":"This member is an explicit interface member implementation. It can be used only when the <xref:System.String> instance is cast to an <xref:System.IConvertible> interface. The recommended alternative is to call the <xref:System.Convert.ChangeType%2A> method.","nodes":[{"content":"This member is an explicit interface member implementation. It can be used only when the <xref:System.String> instance is cast to an <xref:System.IConvertible> interface. The recommended alternative is to call the <xref:System.Convert.ChangeType%2A> method.","pos":[0,257],"nodes":[{"content":"This member is an explicit interface member implementation.","pos":[0,59]},{"content":"It can be used only when the <ph id=\"ph1\">&lt;xref:System.String&gt;</ph> instance is cast to an <ph id=\"ph2\">&lt;xref:System.IConvertible&gt;</ph> interface.","pos":[60,170],"source":" It can be used only when the <xref:System.String> instance is cast to an <xref:System.IConvertible> interface."},{"content":"The recommended alternative is to call the <ph id=\"ph1\">&lt;xref:System.Convert.ChangeType%2A&gt;</ph> method.","pos":[171,257],"source":" The recommended alternative is to call the <xref:System.Convert.ChangeType%2A> method."}]}]}],"pos":[722617,722875],"yaml":true,"extradata":"MT"},{"content":"The type of the returned object.","nodes":[{"pos":[0,32],"content":"The type of the returned object.","nodes":[{"content":"The type of the returned object.","pos":[0,32]}]}],"pos":[723038,723071],"yaml":true},{"content":"An object that provides culture-specific formatting information.","nodes":[{"pos":[0,64],"content":"An object that provides culture-specific formatting information.","nodes":[{"content":"An object that provides culture-specific formatting information.","pos":[0,64]}]}],"pos":[723144,723209],"yaml":true},{"content":"The converted value of the current <xref href=\"System.String\"></xref> object.","nodes":[{"pos":[0,77],"content":"The converted value of the current <ph id=\"ph1\">&lt;xref href=\"System.String\"&gt;&lt;/xref&gt;</ph> object.","source":"The converted value of the current <xref href=\"System.String\"></xref> object."}],"pos":[723266,723344],"yaml":true},{"content":"<code>type</code> is `null`.","nodes":[{"pos":[0,28],"content":"<ph id=\"ph1\">&lt;code&gt;type&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>type</code> is `null`."}],"pos":[723514,723543],"yaml":true},{"content":"The value of the current <xref href=\"System.String\"></xref> object cannot be converted to the type specified by the <code>type</code> parameter.","nodes":[{"pos":[0,144],"content":"The value of the current <ph id=\"ph1\">&lt;xref href=\"System.String\"&gt;&lt;/xref&gt;</ph> object cannot be converted to the type specified by the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">type</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter.","source":"The value of the current <xref href=\"System.String\"></xref> object cannot be converted to the type specified by the <code>type</code> parameter."}],"pos":[723643,723788],"yaml":true},{"content":"For a description of this member, see <xref href=\"System.IConvertible.ToUInt16(System.IFormatProvider)\"></xref>.","nodes":[{"pos":[0,112],"content":"For a description of this member, see <ph id=\"ph1\">&lt;xref href=\"System.IConvertible.ToUInt16(System.IFormatProvider)\"&gt;&lt;/xref&gt;</ph>.","source":"For a description of this member, see <xref href=\"System.IConvertible.ToUInt16(System.IFormatProvider)\"></xref>."}],"pos":[725270,725383],"yaml":true},{"content":"This member is an explicit interface member implementation. It can be used only when the <xref:System.String> instance is cast to an <xref:System.IConvertible> interface. The recommended alternative is to call the <xref:System.Convert.ToUInt16%28System.String%2CSystem.IFormatProvider%29?displayProperty=fullName> method.","nodes":[{"pos":[0,321],"content":"This member is an explicit interface member implementation. It can be used only when the <xref:System.String> instance is cast to an <xref:System.IConvertible> interface. The recommended alternative is to call the <xref:System.Convert.ToUInt16%28System.String%2CSystem.IFormatProvider%29?displayProperty=fullName> method.","nodes":[{"content":"This member is an explicit interface member implementation. It can be used only when the <xref:System.String> instance is cast to an <xref:System.IConvertible> interface. The recommended alternative is to call the <xref:System.Convert.ToUInt16%28System.String%2CSystem.IFormatProvider%29?displayProperty=fullName> method.","pos":[0,321],"nodes":[{"content":"This member is an explicit interface member implementation.","pos":[0,59]},{"content":"It can be used only when the <ph id=\"ph1\">&lt;xref:System.String&gt;</ph> instance is cast to an <ph id=\"ph2\">&lt;xref:System.IConvertible&gt;</ph> interface.","pos":[60,170],"source":" It can be used only when the <xref:System.String> instance is cast to an <xref:System.IConvertible> interface."},{"content":"The recommended alternative is to call the <ph id=\"ph1\">&lt;xref:System.Convert.ToUInt16%28System.String%2CSystem.IFormatProvider%29?displayProperty=fullName&gt;</ph> method.","pos":[171,321],"source":" The recommended alternative is to call the <xref:System.Convert.ToUInt16%28System.String%2CSystem.IFormatProvider%29?displayProperty=fullName> method."}]}]}],"pos":[725394,725716],"yaml":true,"extradata":"MT"},{"content":"An object that provides culture-specific formatting information.","nodes":[{"pos":[0,64],"content":"An object that provides culture-specific formatting information.","nodes":[{"content":"An object that provides culture-specific formatting information.","pos":[0,64]}]}],"pos":[725885,725950],"yaml":true},{"content":"The converted value of the current <xref href=\"System.String\"></xref> object.","nodes":[{"pos":[0,77],"content":"The converted value of the current <ph id=\"ph1\">&lt;xref href=\"System.String\"&gt;&lt;/xref&gt;</ph> object.","source":"The converted value of the current <xref href=\"System.String\"></xref> object."}],"pos":[726007,726085],"yaml":true},{"content":"The value of the current <xref href=\"System.String\"></xref> object cannot be parsed.","nodes":[{"pos":[0,84],"content":"The value of the current <ph id=\"ph1\">&lt;xref href=\"System.String\"&gt;&lt;/xref&gt;</ph> object cannot be parsed.","source":"The value of the current <xref href=\"System.String\"></xref> object cannot be parsed."}],"pos":[726245,726330],"yaml":true},{"content":"The value of the current <xref href=\"System.String\"></xref> object is a number greater than <xref href=\"System.UInt16.MaxValue\"></xref> or less than <xref href=\"System.UInt16.MinValue\"></xref>.","nodes":[{"pos":[0,193],"content":"The value of the current <ph id=\"ph1\">&lt;xref href=\"System.String\"&gt;&lt;/xref&gt;</ph> object is a number greater than <ph id=\"ph2\">&lt;xref href=\"System.UInt16.MaxValue\"&gt;&lt;/xref&gt;</ph> or less than <ph id=\"ph3\">&lt;xref href=\"System.UInt16.MinValue\"&gt;&lt;/xref&gt;</ph>.","source":"The value of the current <xref href=\"System.String\"></xref> object is a number greater than <xref href=\"System.UInt16.MaxValue\"></xref> or less than <xref href=\"System.UInt16.MinValue\"></xref>."}],"pos":[726424,726618],"yaml":true},{"content":"For a description of this member, see <xref href=\"System.IConvertible.ToUInt32(System.IFormatProvider)\"></xref>.","nodes":[{"pos":[0,112],"content":"For a description of this member, see <ph id=\"ph1\">&lt;xref href=\"System.IConvertible.ToUInt32(System.IFormatProvider)\"&gt;&lt;/xref&gt;</ph>.","source":"For a description of this member, see <xref href=\"System.IConvertible.ToUInt32(System.IFormatProvider)\"></xref>."}],"pos":[728100,728213],"yaml":true},{"content":"This member is an explicit interface member implementation. It can be used only when the <xref:System.String> instance is cast to an <xref:System.IConvertible> interface. The recommended alternative is to call the <xref:System.Convert.ToUInt32%28System.String%2CSystem.IFormatProvider%29?displayProperty=fullName> method.","nodes":[{"pos":[0,321],"content":"This member is an explicit interface member implementation. It can be used only when the <xref:System.String> instance is cast to an <xref:System.IConvertible> interface. The recommended alternative is to call the <xref:System.Convert.ToUInt32%28System.String%2CSystem.IFormatProvider%29?displayProperty=fullName> method.","nodes":[{"content":"This member is an explicit interface member implementation. It can be used only when the <xref:System.String> instance is cast to an <xref:System.IConvertible> interface. The recommended alternative is to call the <xref:System.Convert.ToUInt32%28System.String%2CSystem.IFormatProvider%29?displayProperty=fullName> method.","pos":[0,321],"nodes":[{"content":"This member is an explicit interface member implementation.","pos":[0,59]},{"content":"It can be used only when the <ph id=\"ph1\">&lt;xref:System.String&gt;</ph> instance is cast to an <ph id=\"ph2\">&lt;xref:System.IConvertible&gt;</ph> interface.","pos":[60,170],"source":" It can be used only when the <xref:System.String> instance is cast to an <xref:System.IConvertible> interface."},{"content":"The recommended alternative is to call the <ph id=\"ph1\">&lt;xref:System.Convert.ToUInt32%28System.String%2CSystem.IFormatProvider%29?displayProperty=fullName&gt;</ph> method.","pos":[171,321],"source":" The recommended alternative is to call the <xref:System.Convert.ToUInt32%28System.String%2CSystem.IFormatProvider%29?displayProperty=fullName> method."}]}]}],"pos":[728224,728546],"yaml":true,"extradata":"MT"},{"content":"An object that provides culture-specific formatting information.","nodes":[{"pos":[0,64],"content":"An object that provides culture-specific formatting information.","nodes":[{"content":"An object that provides culture-specific formatting information.","pos":[0,64]}]}],"pos":[728713,728778],"yaml":true},{"content":"The converted value of the current <xref href=\"System.String\"></xref> object.","nodes":[{"pos":[0,77],"content":"The converted value of the current <ph id=\"ph1\">&lt;xref href=\"System.String\"&gt;&lt;/xref&gt;</ph> object.","source":"The converted value of the current <xref href=\"System.String\"></xref> object."}],"pos":[728835,728913],"yaml":true},{"content":"The value of the current <xref href=\"System.String\"></xref> object cannot be parsed.","nodes":[{"pos":[0,84],"content":"The value of the current <ph id=\"ph1\">&lt;xref href=\"System.String\"&gt;&lt;/xref&gt;</ph> object cannot be parsed.","source":"The value of the current <xref href=\"System.String\"></xref> object cannot be parsed."}],"pos":[729073,729158],"yaml":true},{"content":"The value of the current <xref href=\"System.String\"></xref> object is a number greater <xref href=\"System.UInt32.MaxValue\"></xref> or less than <xref href=\"System.UInt32.MinValue\"></xref>","nodes":[{"pos":[0,187],"content":"The value of the current <ph id=\"ph1\">&lt;xref href=\"System.String\"&gt;&lt;/xref&gt;</ph> object is a number greater <ph id=\"ph2\">&lt;xref href=\"System.UInt32.MaxValue\"&gt;&lt;/xref&gt;</ph> or less than <ph id=\"ph3\">&lt;xref href=\"System.UInt32.MinValue\"&gt;&lt;/xref&gt;</ph>","source":"The value of the current <xref href=\"System.String\"></xref> object is a number greater <xref href=\"System.UInt32.MaxValue\"></xref> or less than <xref href=\"System.UInt32.MinValue\"></xref>"}],"pos":[729252,729440],"yaml":true},{"content":"For a description of this member, see <xref href=\"System.IConvertible.ToUInt64(System.IFormatProvider)\"></xref>.","nodes":[{"pos":[0,112],"content":"For a description of this member, see <ph id=\"ph1\">&lt;xref href=\"System.IConvertible.ToUInt64(System.IFormatProvider)\"&gt;&lt;/xref&gt;</ph>.","source":"For a description of this member, see <xref href=\"System.IConvertible.ToUInt64(System.IFormatProvider)\"></xref>."}],"pos":[730922,731035],"yaml":true},{"content":"This member is an explicit interface member implementation. It can be used only when the <xref:System.String> instance is cast to an <xref:System.IConvertible> interface. The recommended alternative is to call the <xref:System.Convert.ToUInt64%28System.String%2CSystem.IFormatProvider%29?displayProperty=fullName> method.","nodes":[{"pos":[0,321],"content":"This member is an explicit interface member implementation. It can be used only when the <xref:System.String> instance is cast to an <xref:System.IConvertible> interface. The recommended alternative is to call the <xref:System.Convert.ToUInt64%28System.String%2CSystem.IFormatProvider%29?displayProperty=fullName> method.","nodes":[{"content":"This member is an explicit interface member implementation. It can be used only when the <xref:System.String> instance is cast to an <xref:System.IConvertible> interface. The recommended alternative is to call the <xref:System.Convert.ToUInt64%28System.String%2CSystem.IFormatProvider%29?displayProperty=fullName> method.","pos":[0,321],"nodes":[{"content":"This member is an explicit interface member implementation.","pos":[0,59]},{"content":"It can be used only when the <ph id=\"ph1\">&lt;xref:System.String&gt;</ph> instance is cast to an <ph id=\"ph2\">&lt;xref:System.IConvertible&gt;</ph> interface.","pos":[60,170],"source":" It can be used only when the <xref:System.String> instance is cast to an <xref:System.IConvertible> interface."},{"content":"The recommended alternative is to call the <ph id=\"ph1\">&lt;xref:System.Convert.ToUInt64%28System.String%2CSystem.IFormatProvider%29?displayProperty=fullName&gt;</ph> method.","pos":[171,321],"source":" The recommended alternative is to call the <xref:System.Convert.ToUInt64%28System.String%2CSystem.IFormatProvider%29?displayProperty=fullName> method."}]}]}],"pos":[731046,731368],"yaml":true,"extradata":"MT"},{"content":"An object that provides culture-specific formatting information.","nodes":[{"pos":[0,64],"content":"An object that provides culture-specific formatting information.","nodes":[{"content":"An object that provides culture-specific formatting information.","pos":[0,64]}]}],"pos":[731536,731601],"yaml":true},{"content":"The converted value of the current <xref href=\"System.String\"></xref> object.","nodes":[{"pos":[0,77],"content":"The converted value of the current <ph id=\"ph1\">&lt;xref href=\"System.String\"&gt;&lt;/xref&gt;</ph> object.","source":"The converted value of the current <xref href=\"System.String\"></xref> object."}],"pos":[731658,731736],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.String\n  commentId: T:System.String\n  id: String\n  children:\n  - System.String.#ctor(System.Char*)\n  - System.String.#ctor(System.Char[])\n  - System.String.#ctor(System.SByte*)\n  - System.String.#ctor(System.Char,System.Int32)\n  - System.String.#ctor(System.Char*,System.Int32,System.Int32)\n  - System.String.#ctor(System.Char[],System.Int32,System.Int32)\n  - System.String.#ctor(System.SByte*,System.Int32,System.Int32)\n  - System.String.#ctor(System.SByte*,System.Int32,System.Int32,System.Text.Encoding)\n  - System.String.Chars(System.Int32)\n  - System.String.Clone\n  - System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.Boolean,System.Globalization.CultureInfo)\n  - System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.StringComparison)\n  - System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.Boolean)\n  - System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32)\n  - System.String.Compare(System.String,System.String)\n  - System.String.Compare(System.String,System.String,System.Boolean,System.Globalization.CultureInfo)\n  - System.String.Compare(System.String,System.String,System.StringComparison)\n  - System.String.Compare(System.String,System.String,System.Boolean)\n  - System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.Globalization.CultureInfo,System.Globalization.CompareOptions)\n  - System.String.Compare(System.String,System.String,System.Globalization.CultureInfo,System.Globalization.CompareOptions)\n  - System.String.CompareOrdinal(System.String,System.Int32,System.String,System.Int32,System.Int32)\n  - System.String.CompareOrdinal(System.String,System.String)\n  - System.String.CompareTo(System.Object)\n  - System.String.CompareTo(System.String)\n  - System.String.Concat(System.String,System.String,System.String,System.String)\n  - System.String.Concat(System.Object,System.Object,System.Object,System.Object)\n  - System.String.Concat(System.Object,System.Object,System.Object)\n  - System.String.Concat(System.String,System.String)\n  - System.String.Concat(System.String,System.String,System.String)\n  - System.String.Concat(System.String[])\n  - System.String.Concat(System.Object[])\n  - System.String.Concat(System.Object)\n  - System.String.Concat(System.Collections.Generic.IEnumerable{System.String})\n  - System.String.Concat(System.Object,System.Object)\n  - System.String.Concat``1(System.Collections.Generic.IEnumerable{``0})\n  - System.String.Contains(System.String)\n  - System.String.Copy(System.String)\n  - System.String.CopyTo(System.Int32,System.Char[],System.Int32,System.Int32)\n  - System.String.Empty\n  - System.String.EndsWith(System.String,System.Boolean,System.Globalization.CultureInfo)\n  - System.String.EndsWith(System.String,System.StringComparison)\n  - System.String.EndsWith(System.String)\n  - System.String.EndsWith(System.Char)\n  - System.String.Equals(System.Object)\n  - System.String.Equals(System.String)\n  - System.String.Equals(System.String,System.String)\n  - System.String.Equals(System.String,System.StringComparison)\n  - System.String.Equals(System.String,System.String,System.StringComparison)\n  - System.String.Format(System.IFormatProvider,System.String,System.Object,System.Object,System.Object)\n  - System.String.Format(System.String,System.Object,System.Object,System.Object)\n  - System.String.Format(System.IFormatProvider,System.String,System.Object,System.Object)\n  - System.String.Format(System.String,System.Object,System.Object)\n  - System.String.Format(System.IFormatProvider,System.String,System.Object)\n  - System.String.Format(System.String,System.Object[])\n  - System.String.Format(System.String,System.Object)\n  - System.String.Format(System.IFormatProvider,System.String,System.Object[])\n  - System.String.GetEnumerator\n  - System.String.GetHashCode\n  - System.String.GetHashCode(System.StringComparison)\n  - System.String.GetTypeCode\n  - System.String.IndexOf(System.String,System.Int32,System.Int32)\n  - System.String.IndexOf(System.String,System.Int32,System.Int32,System.StringComparison)\n  - System.String.IndexOf(System.String,System.Int32,System.StringComparison)\n  - System.String.IndexOf(System.Char,System.Int32,System.Int32)\n  - System.String.IndexOf(System.String)\n  - System.String.IndexOf(System.String,System.Int32)\n  - System.String.IndexOf(System.Char,System.Int32)\n  - System.String.IndexOf(System.String,System.StringComparison)\n  - System.String.IndexOf(System.Char)\n  - System.String.IndexOfAny(System.Char[])\n  - System.String.IndexOfAny(System.Char[],System.Int32)\n  - System.String.IndexOfAny(System.Char[],System.Int32,System.Int32)\n  - System.String.Insert(System.Int32,System.String)\n  - System.String.Intern(System.String)\n  - System.String.IsInterned(System.String)\n  - System.String.IsNormalized\n  - System.String.IsNormalized(System.Text.NormalizationForm)\n  - System.String.IsNullOrEmpty(System.String)\n  - System.String.IsNullOrWhiteSpace(System.String)\n  - System.String.Join(System.String,System.String[],System.Int32,System.Int32)\n  - System.String.Join(System.String,System.String[])\n  - System.String.Join(System.String,System.Object[])\n  - System.String.Join(System.Char,System.String[],System.Int32,System.Int32)\n  - System.String.Join(System.Char,System.String[])\n  - System.String.Join(System.Char,System.Object[])\n  - System.String.Join(System.String,System.Collections.Generic.IEnumerable{System.String})\n  - System.String.Join``1(System.Char,System.Collections.Generic.IEnumerable{``0})\n  - System.String.Join``1(System.String,System.Collections.Generic.IEnumerable{``0})\n  - System.String.LastIndexOf(System.String,System.Int32,System.Int32,System.StringComparison)\n  - System.String.LastIndexOf(System.String,System.Int32,System.StringComparison)\n  - System.String.LastIndexOf(System.Char,System.Int32,System.Int32)\n  - System.String.LastIndexOf(System.String,System.StringComparison)\n  - System.String.LastIndexOf(System.String,System.Int32,System.Int32)\n  - System.String.LastIndexOf(System.Char,System.Int32)\n  - System.String.LastIndexOf(System.String)\n  - System.String.LastIndexOf(System.Char)\n  - System.String.LastIndexOf(System.String,System.Int32)\n  - System.String.LastIndexOfAny(System.Char[])\n  - System.String.LastIndexOfAny(System.Char[],System.Int32)\n  - System.String.LastIndexOfAny(System.Char[],System.Int32,System.Int32)\n  - System.String.Length\n  - System.String.Normalize(System.Text.NormalizationForm)\n  - System.String.Normalize\n  - System.String.op_Equality(System.String,System.String)\n  - System.String.op_Inequality(System.String,System.String)\n  - System.String.PadLeft(System.Int32)\n  - System.String.PadLeft(System.Int32,System.Char)\n  - System.String.PadRight(System.Int32)\n  - System.String.PadRight(System.Int32,System.Char)\n  - System.String.Remove(System.Int32)\n  - System.String.Remove(System.Int32,System.Int32)\n  - System.String.Replace(System.Char,System.Char)\n  - System.String.Replace(System.String,System.String)\n  - System.String.Replace(System.String,System.String,System.StringComparison)\n  - System.String.Replace(System.String,System.String,System.Boolean,System.Globalization.CultureInfo)\n  - System.String.Split(System.String[],System.Int32,System.StringSplitOptions)\n  - System.String.Split(System.String,System.Int32,System.StringSplitOptions)\n  - System.String.Split(System.Char[],System.Int32,System.StringSplitOptions)\n  - System.String.Split(System.Char,System.Int32,System.StringSplitOptions)\n  - System.String.Split(System.String[],System.StringSplitOptions)\n  - System.String.Split(System.Char,System.StringSplitOptions)\n  - System.String.Split(System.Char[],System.StringSplitOptions)\n  - System.String.Split(System.Char[],System.Int32)\n  - System.String.Split(System.String,System.StringSplitOptions)\n  - System.String.Split(System.Char[])\n  - System.String.StartsWith(System.String,System.Boolean,System.Globalization.CultureInfo)\n  - System.String.StartsWith(System.String,System.StringComparison)\n  - System.String.StartsWith(System.String)\n  - System.String.StartsWith(System.Char)\n  - System.String.Substring(System.Int32)\n  - System.String.Substring(System.Int32,System.Int32)\n  - System.String.ToCharArray(System.Int32,System.Int32)\n  - System.String.ToCharArray\n  - System.String.ToLower\n  - System.String.ToLower(System.Globalization.CultureInfo)\n  - System.String.ToLowerInvariant\n  - System.String.ToString\n  - System.String.ToString(System.IFormatProvider)\n  - System.String.ToUpper\n  - System.String.ToUpper(System.Globalization.CultureInfo)\n  - System.String.ToUpperInvariant\n  - System.String.Trim(System.Char)\n  - System.String.Trim(System.Char[])\n  - System.String.Trim\n  - System.String.TrimEnd\n  - System.String.TrimEnd(System.Char)\n  - System.String.TrimEnd(System.Char[])\n  - System.String.TrimStart\n  - System.String.TrimStart(System.Char)\n  - System.String.TrimStart(System.Char[])\n  - System.String.System#Collections#Generic#IEnumerable{System#Char}#GetEnumerator\n  - System.String.System#Collections#IEnumerable#GetEnumerator\n  - System.String.System#IComparable#CompareTo(System.Object)\n  - System.String.System#IConvertible#GetTypeCode\n  - System.String.System#IConvertible#ToBoolean(System.IFormatProvider)\n  - System.String.System#IConvertible#ToByte(System.IFormatProvider)\n  - System.String.System#IConvertible#ToChar(System.IFormatProvider)\n  - System.String.System#IConvertible#ToDateTime(System.IFormatProvider)\n  - System.String.System#IConvertible#ToDecimal(System.IFormatProvider)\n  - System.String.System#IConvertible#ToDouble(System.IFormatProvider)\n  - System.String.System#IConvertible#ToInt16(System.IFormatProvider)\n  - System.String.System#IConvertible#ToInt32(System.IFormatProvider)\n  - System.String.System#IConvertible#ToInt64(System.IFormatProvider)\n  - System.String.System#IConvertible#ToSByte(System.IFormatProvider)\n  - System.String.System#IConvertible#ToSingle(System.IFormatProvider)\n  - System.String.System#IConvertible#ToString(System.IFormatProvider)\n  - System.String.System#IConvertible#ToType(System.Type,System.IFormatProvider)\n  - System.String.System#IConvertible#ToUInt16(System.IFormatProvider)\n  - System.String.System#IConvertible#ToUInt32(System.IFormatProvider)\n  - System.String.System#IConvertible#ToUInt64(System.IFormatProvider)\n  langs:\n  - csharp\n  name: String\n  nameWithType: String\n  fullName: System.String\n  type: Class\n  assemblies:\n  - System.Runtime\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Represents text as a sequence of UTF-16 code units.\n  remarks: \"> [!NOTE]\\n>  To view the .NET Framework source code for this type, see the [Reference Source](http://referencesource.microsoft.com/#mscorlib/system/string.cs#8281103e6f23cb5c). You can browse through the source code online, download the reference for offline viewing, and step through the sources (including patches and updates) during debugging; see [instructions](http://referencesource.microsoft.com/).  \\n  \\n A string is a sequential collection of characters that is used to represent text. A <xref:System.String> object is a sequential collection of <xref:System.Char?displayProperty=fullName> objects that represent a string; a <xref:System.Char?displayProperty=fullName> object corresponds to a UTF-16 code unit. The value of the <xref:System.String> object is the content of the sequential collection of <xref:System.Char?displayProperty=fullName> objects, and that value is immutable (that is, it is read-only). For more information about the immutability of strings, see the [Immutability and the StringBuilder class](#Immutability) section later in this topic. The maximum size of a <xref:System.String> object in memory is 2GB, or about 1 billion characters.  \\n  \\n In this section:  \\n  \\n [Instantiating a String object](#Instantiation)   \\n [Char objects and Unicode characters](#Characters)   \\n [Strings and The Unicode Standard](#Unicode)   \\n [Strings and embedded null characters](#EmbeddedNulls)   \\n [Strings and indexes](#Indexes)   \\n [Null strings and empty strings](#Nulls)   \\n [Immutability and the StringBuilder class](#Immutability)   \\n [Ordinal vs. culture-sensitive operations](#CultureSensitive)   \\n [Normalization](#Normalization)   \\n [String operations by category](#ByCategory)  \\n  \\n<a name=\\\"Instantiation\\\"></a>   \\n## Instantiating a String object  \\n You can instantiate a <xref:System.String> object in the following ways:  \\n  \\n-   By assigning a string literal to a <xref:System.String> variable. This is the most commonly used method for creating a string. The following example uses assignment to create several strings. Note that in C#, because the backslash (\\\\\\\\) is an escape character, literal backslashes in a string must be escaped or the entire string must be @-quoted.  \\n  \\n     [!code-cpp[System.String.Class.Instantiate#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.string.class.instantiate/cpp/string.instantiate1.cpp#1)]\\n     [!code-csharp[System.String.Class.Instantiate#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.class.instantiate/cs/program.cs#1)]\\n     [!code-vb[System.String.Class.Instantiate#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.string.class.instantiate/vb/instantiate1.vb#1)]  \\n  \\n-   By calling a <xref:System.String> class constructor. The following example instantiates strings by calling several class constructors. Note that some of the constructors include pointers to character arrays or signed byte arrays as parameters. Visual Basic does not support calls to these constructors. For detailed information about <xref:System.String> constructors, see the <xref:System.String.%23ctor%2A> constructor summary.  \\n  \\n     [!code-cpp[System.String.Class.Instantiate#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.string.class.instantiate/cpp/string.instantiate2.cpp#2)]\\n     [!code-csharp[System.String.Class.Instantiate#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.class.instantiate/cs/program.cs#2)]\\n     [!code-vb[System.String.Class.Instantiate#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.string.class.instantiate/vb/instantiate1.vb#2)]  \\n  \\n-   By using the string concatenation operator (+ in C# and & or + in Visual Basic) to create a single string from any combination of <xref:System.String> instances and string literals. The following example illustrates the use of the string concatenation operator.  \\n  \\n     [!code-cpp[System.String.Class.Instantiate#3](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.string.class.instantiate/cpp/string.instantiate3.cpp#3)]\\n     [!code-csharp[System.String.Class.Instantiate#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.class.instantiate/cs/program.cs#3)]\\n     [!code-vb[System.String.Class.Instantiate#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.string.class.instantiate/vb/instantiate1.vb#3)]  \\n  \\n-   By retrieving a property or calling a method that returns a string. The following example uses the methods of the <xref:System.String> class to extract a substring from a larger string.  \\n  \\n     [!code-cpp[System.String.Class.Instantiate#4](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.string.class.instantiate/cpp/string.instantiate3.cpp#4)]\\n     [!code-csharp[System.String.Class.Instantiate#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.class.instantiate/cs/program.cs#4)]\\n     [!code-vb[System.String.Class.Instantiate#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.string.class.instantiate/vb/instantiate1.vb#4)]  \\n  \\n-   By calling a formatting method to convert a value or object to its string representation. The following example uses the                [composite formatting](~/docs/standard/base-types/composite-formatting.md) feature to embed the string representation of two objects into a string.  \\n  \\n     [!code-cpp[System.String.Class.Instantiate#5](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.string.class.instantiate/cpp/string.instantiate3.cpp#5)]\\n     [!code-csharp[System.String.Class.Instantiate#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.class.instantiate/cs/program.cs#5)]\\n     [!code-vb[System.String.Class.Instantiate#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.string.class.instantiate/vb/instantiate1.vb#5)]  \\n  \\n<a name=\\\"Characters\\\"></a>   \\n## Char objects and Unicode characters  \\n Each character in a string is defined by a Unicode scalar value, also called a Unicode code point or the ordinal (numeric) value of the Unicode character. Each code point is encoded by using UTF-16 encoding, and the numeric value of each element of the encoding is represented by a <xref:System.Char> object.  \\n  \\n> [!NOTE]\\n>  Note that, because a <xref:System.String> instance consists of a sequential collection of UTF-16 code units, it is possible to create a <xref:System.String> object that is not a well-formed Unicode string. For example, it is possible to create a string that has a low surrogate without a corresponding high surrogate. Although some methods, such as the methods of encoding and decoding objects in the <xref:System.Text> namespace, may performs checks to ensure that strings are well-formed, <xref:System.String> class members do not ensure that a string is well-formed.  \\n  \\n A single <xref:System.Char> object usually represents a single code point; that is, the numeric value of the <xref:System.Char> equals the code point. For example, the code point for the character \\\"a\\\" is U+0061. However, a code point might require more than one encoded element (more than one <xref:System.Char> object). The Unicode standard defines two types of characters that correspond to multiple <xref:System.Char> objects: graphemes, and Unicode supplementary code points that correspond to characters in the Unicode supplementary planes.  \\n  \\n-   A grapheme is represented by a base character followed by one or more combining characters. For example, the character Ã¤ is represented by a <xref:System.Char> object whose code point is U+0061 followed by a <xref:System.Char> object whose code point is U+0308. This character can also be defined by a single <xref:System.Char> object that has a code point of U+00E4. As the following example shows, a culture-sensitive comparison for equality indicates that these two representations are equal, although an ordinary ordinal comparison does not. However, if the two strings are normalized, an ordinal comparison also indicates that they are equal. (For more information on normalizing strings, see the [Normalization](#Normalization) section.)  \\n  \\n     [!code-cpp[System.String.Class#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Class/cpp/string.char1.cpp#2)]\\n     [!code-csharp[System.String.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Class/cs/grapheme1.cs#2)]\\n     [!code-vb[System.String.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Class/vb/grapheme1.vb#2)]  \\n  \\n-   A Unicode supplementary code point (a surrogate pair) is represented by a <xref:System.Char> object whose code point is a high surrogate followed by a <xref:System.Char> object whose code point is a low surrogate. The code units of high surrogates range from U+D800 to U+DBFF. The code units of low surrogates range from U+DC00 to U+DFFF. Surrogate pairs are used to represent characters in the 16 Unicode supplementary planes. The following example creates a surrogate character and passes it to the <xref:System.Char.IsSurrogatePair%28System.Char%2CSystem.Char%29?displayProperty=fullName> method to determine whether it is a surrogate pair.  \\n  \\n     [!code-cpp[System.String.Class#3](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Class/cpp/string.char2.cpp#3)]\\n     [!code-csharp[System.String.Class#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Class/cs/surrogate1.cs#3)]\\n     [!code-vb[System.String.Class#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Class/vb/surrogate1.vb#3)]  \\n  \\n<a name=\\\"Unicode\\\"></a>   \\n## Strings and The Unicode Standard  \\n Characters in a string are represented by UTF-16 encoded code units, which correspond to <xref:System.Char> values.  \\n  \\n Each character in a string has an associated Unicode character category, which is represented in the .NET Framework by the <xref:System.Globalization.UnicodeCategory> enumeration. The category of a character or a surrogate pair can be determined by calling the <xref:System.Globalization.CharUnicodeInfo.GetUnicodeCategory%2A?displayProperty=fullName> method.  \\n  \\n The .NET Framework maintains its own table of characters and their corresponding categories, which ensures that a version of the .NET Framework running on different platforms returns identical character category information. The following table lists the versions of the .NET Framework and the versions of the Unicode Standard on which their character categories are based.  \\n  \\n|.NET Framework version|Version of the Unicode Standard|  \\n|----------------------------|-------------------------------------|  \\n|[!INCLUDE[net_v11_long](~/includes/net-v11-long-md.md)]|[The Unicode Standard, Version 4.0.0](http://www.unicode.org/versions/Unicode4.0.0/)|  \\n|The .NET Framework 2.0|[The Unicode Standard, Version 5.0.0](http://www.unicode.org/versions/Unicode5.0.0)|  \\n|[!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)]|[The Unicode Standard, Version 5.0.0](http://www.unicode.org/versions/Unicode5.0.0)|  \\n|[!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]|[The Unicode Standard, Version 5.0.0](http://www.unicode.org/versions/Unicode5.0.0)|  \\n|[!INCLUDE[net_v45](~/includes/net-v45-md.md)]|[The Unicode Standard, Version 6.3.0](http://www.unicode.org/versions/Unicode6.3.0/)|  \\n|[!INCLUDE[net_v451](~/includes/net-v451-md.md)]|[The Unicode Standard, Version 6.3.0](http://www.unicode.org/versions/Unicode6.3.0/)|  \\n|[!INCLUDE[net_v452](~/includes/net-v452-md.md)]|[The Unicode Standard, Version 6.3.0](http://www.unicode.org/versions/Unicode6.3.0/)|  \\n|[!INCLUDE[net_v46](~/includes/net-v46-md.md)]|[The Unicode Standard, Version 6.3.0](http://www.unicode.org/versions/Unicode6.3.0/)|  \\n|[!INCLUDE[net_v461](~/includes/net-v461-md.md)]|[The Unicode Standard, Version 6.3.0](http://www.unicode.org/versions/Unicode6.3.0/)|  \\n|[!INCLUDE[net_v462](~/includes/net-v462-md.md)]|[The Unicode Standard, Version 8.0.0](http://www.unicode.org/versions/Unicode8.0.0/)|  \\n  \\n In addition, the .NET Framework supports string comparison and sorting based on the Unicode standard. In versions of the .NET Framework through the [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)], the .NET Framework maintains its own table of string data. This is also true of versions of the .NET Framework starting with the [!INCLUDE[net_v45](~/includes/net-v45-md.md)] running on Windows 7. Starting with the [!INCLUDE[net_v45](~/includes/net-v45-md.md)] running on Window 8 and later versions of the Windows operating system, the runtime delegates string comparison and sorting operations to the operating system. The following table lists the versions of the .NET Framework and the versions of the Unicode Standard on which character comparison and sorting are based.  \\n  \\n|.NET Framework version|Version of the Unicode Standard|  \\n|----------------------------|-------------------------------------|  \\n|[!INCLUDE[net_v11_long](~/includes/net-v11-long-md.md)]|[The Unicode Standard, Version 4.0.0](http://www.unicode.org/versions/Unicode4.0.0/)|  \\n|The .NET Framework 2.0|[The Unicode Standard, Version 5.0.0](http://www.unicode.org/versions/Unicode5.0.0)|  \\n|[!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)]|[The Unicode Standard, Version 5.0.0](http://www.unicode.org/versions/Unicode5.0.0)|  \\n|[!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]|[The Unicode Standard, Version 5.0.0](http://www.unicode.org/versions/Unicode5.0.0)|  \\n|[!INCLUDE[net_v45](~/includes/net-v45-md.md)] and later on Windows 7|[The Unicode Standard, Version 5.0.0](http://www.unicode.org/versions/Unicode5.0.0)|  \\n|[!INCLUDE[net_v45](~/includes/net-v45-md.md)] and later on Windows 8 and later Windows operating systems|[The Unicode Standard, Version 6.3.0](http://www.unicode.org/versions/Unicode6.3.0/)|  \\n  \\n<a name=\\\"EmbeddedNulls\\\"></a>   \\n## Strings and embedded null characters  \\n In the .NET Framework, a <xref:System.String> object can include embedded null characters, which count as a part of the string's length. However, in some languages such as C and C++, a null character indicates the end of a string;it is not considered a part of the string and is not counted as part of the string's length. This means that the following common assumptions that C and C++ programmers or libraries written in C or C++ might make about strings are not necessarily valid when applied to <xref:System.String> objects:  \\n  \\n-   The value returned by the `strlen` or `wcslen` functions does not necessarily equal <xref:System.String.Length%2A?displayProperty=fullName>.  \\n  \\n-   The string created by the `strcpy_s` or `wcscpy_s` functions is not necessarily identical to the string created by the <xref:System.String.Copy%2A?displayProperty=fullName> method.  \\n  \\n You should ensure that native C and C++ code that instantiates <xref:System.String> objects, and code that is passed <xref:System.String> objects through platform invoke, do not assume that an embedded null character marks the end of the string.  \\n  \\n Embedded null characters in a string are also treated differently when a string is sorted (or compared) and when a string is searched. Null characters are ignored when performing culture-sensitive comparisons between two strings, including comparisons using the invariant culture. They are considered only for ordinal or case-insensitive ordinal comparisons. On the other hand, embedded null characters are always considered when searching a string with methods such as <xref:System.String.Contains%2A>, <xref:System.String.StartsWith%2A>, and <xref:System.String.IndexOf%2A>.  \\n  \\n<a name=\\\"Indexes\\\"></a>   \\n## Strings and indexes  \\n An index is the position of a <xref:System.Char> object (not a Unicode character) in a <xref:System.String>. An index is a zero-based, nonnegative number that starts from the first position in the string, which is index position zero. A number of search methods, such as <xref:System.String.IndexOf%2A> and <xref:System.String.LastIndexOf%2A>, return the index of a character or substring in the string instance.  \\n  \\n The <xref:System.String.Chars%2A> property lets you access individual <xref:System.Char> objects by their index position in the string. Because the <xref:System.String.Chars%2A> property is the default property (in Visual Basic) or the indexer (in C#), you can access the individual <xref:System.Char> objects in a string by using code such as the following. This code looks for white space or punctuation characters in a string to determine how many words the string contains.  \\n  \\n [!code-cpp[System.String.Class#4](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Class/cpp/string.index1.cpp#4)]\\n [!code-csharp[System.String.Class#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Class/cs/index1.cs#4)]\\n [!code-vb[System.String.Class#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Class/vb/index1.vb#4)]  \\n  \\n Because the <xref:System.String> class implements the <xref:System.Collections.IEnumerable> interface, you can also iterate through the <xref:System.Char> objects in a string by using a `foreach` construct, as the following example shows.  \\n  \\n [!code-cpp[System.String.Class#5](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Class/cpp/string.index2.cpp#5)]\\n [!code-csharp[System.String.Class#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Class/cs/index2.cs#5)]\\n [!code-vb[System.String.Class#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Class/vb/index2.vb#5)]  \\n  \\n Consecutive index values might not correspond to consecutive Unicode characters, because a Unicode character might be encoded as more than one <xref:System.Char> object. In particular, a string may contain multi-character units of text that are formed by a base character followed by one or more combining characters or by surrogate pairs. To work with Unicode characters instead of <xref:System.Char> objects, use the <xref:System.Globalization.StringInfo?displayProperty=fullName> and <xref:System.Globalization.TextElementEnumerator> classes. The following example illustrates the difference between code that works with <xref:System.Char> objects and code that works with Unicode characters. It compares the number of characters or text elements in each word of a sentence. The string includes two sequences of a base character followed by a combining character.  \\n  \\n [!code-cpp[System.String.Class#6](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Class/cpp/string.index3.cpp#6)]\\n [!code-csharp[System.String.Class#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Class/cs/index3.cs#6)]\\n [!code-vb[System.String.Class#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Class/vb/index3.vb#6)]  \\n  \\n This example works with text elements by using the <xref:System.Globalization.StringInfo.GetTextElementEnumerator%2A?displayProperty=fullName> method and the <xref:System.Globalization.TextElementEnumerator> class to enumerate all the text elements in a string. You can also retrieve an array that contains the starting index of each text element by calling the <xref:System.Globalization.StringInfo.ParseCombiningCharacters%2A?displayProperty=fullName> method.  \\n  \\n For more information about working with units of text rather than individual <xref:System.Char> values, see the <xref:System.Globalization.StringInfo> class.  \\n  \\n<a name=\\\"Nulls\\\"></a>   \\n## Null strings and empty strings  \\n A string that has been declared but has not been assigned a value is `null`. Attempting to call methods on that string throws a <xref:System.NullReferenceException>. A null string is different from an empty string, which is a string whose value is \\\"\\\" or <xref:System.String.Empty?displayProperty=fullName>. In some cases, passing either a null string or an empty string as an argument in a method call throws an exception. For example, passing a null string to the <xref:System.Int32.Parse%2A?displayProperty=fullName> method throws an <xref:System.ArgumentNullException>, and passing an empty string throws a <xref:System.FormatException>. In other cases, a method argument can be either a null string or an empty string. For example, if you are providing an <xref:System.IFormattable> implementation for a class, you want to equate both a null string and an empty string with the general (\\\"G\\\") format specifier.  \\n  \\n The <xref:System.String> class includes the following two convenience methods that enable you to test whether a string is `null` or empty:  \\n  \\n-   <xref:System.String.IsNullOrEmpty%2A>, which indicates whether a string is either `null` or is equal to  <xref:System.String.Empty?displayProperty=fullName>. This method eliminates the need to use code such as the following:  \\n  \\n     [!code-cpp[System.String.Class.Null#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.string.class.null/cpp/string.null.cpp#1)]\\n     [!code-csharp[System.String.Class.Null#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.class.null/cs/nullorempty1.cs#1)]\\n     [!code-vb[System.String.Class.Null#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.string.class.null/vb/nullorempty1.vb#1)]  \\n  \\n-   <xref:System.String.IsNullOrWhiteSpace%2A>, which indicates whether a string is `null`, equals <xref:System.String.Empty?displayProperty=fullName>, or consists exclusively of white-space characters. This method eliminates the need to use code such as the following:  \\n  \\n     [!code-cpp[System.String.Class.Null#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.string.class.null/cpp/string.null.cpp#2)]\\n     [!code-csharp[System.String.Class.Null#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.class.null/cs/nullorempty1.cs#2)]\\n     [!code-vb[System.String.Class.Null#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.string.class.null/vb/nullorempty1.vb#2)]  \\n  \\n The following example uses the <xref:System.String.IsNullOrEmpty%2A> method in the <xref:System.IFormattable.ToString%2A?displayProperty=fullName> implementation of a custom `Temperature` class. The method supports the \\\"G\\\", \\\"C\\\", \\\"F\\\", and \\\"K\\\" format strings. If an empty format string or a format string whose value is `null` is passed to the method, its value is changed to the \\\"G\\\" format string.  \\n  \\n [!code-cpp[System.String.Class.Null#3](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.string.class.null/cpp/string.null.cpp#3)]\\n [!code-csharp[System.String.Class.Null#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.class.null/cs/nullorempty1.cs#3)]\\n [!code-vb[System.String.Class.Null#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.string.class.null/vb/nullorempty1.vb#3)]  \\n  \\n<a name=\\\"Immutability\\\"></a>   \\n## Immutability and the StringBuilder class  \\n A <xref:System.String> object is called immutable (read-only), because its value cannot be modified after it has been created. Methods that appear to modify a <xref:System.String> object actually return a new <xref:System.String> object that contains the modification.  \\n  \\n Because strings are immutable, string manipulation routines that perform repeated additions or deletions to what appears to be a single string can exact a significant performance penalty. For example, the following code uses a random number generator to create a string with 1000 characters in the range 0x0001 to 0x052F. Although the code appears to use string concatenation to append a new character to the existing string named `str`, it actually creates a new <xref:System.String> object for each concatenation operation.  \\n  \\n [!code-cpp[System.String.Class#15](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Class/cpp/string.stringbuilder1.cpp#15)]\\n [!code-csharp[System.String.Class#15](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Class/cs/immutable.cs#15)]\\n [!code-vb[System.String.Class#15](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Class/vb/immutable.vb#15)]  \\n  \\n You can use the <xref:System.Text.StringBuilder> class instead of the <xref:System.String> class for operations that make multiple changes to the value of a string. Unlike instances of the <xref:System.String> class, <xref:System.Text.StringBuilder> objects are mutable; when you concatenate, append, or delete substrings from a string, the operations are performed on a single string. When you have finished modifying the value of a <xref:System.Text.StringBuilder> object, you can call its <xref:System.Text.StringBuilder.ToString%2A?displayProperty=fullName> method to convert it to a string. The following example replaces the <xref:System.String> used in the previous example to concatenate 1000 random characters in the range to  0x0001 to 0x052F with a <xref:System.Text.StringBuilder> object.  \\n  \\n [!code-cpp[System.String.Class#16](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Class/cpp/string.stringbuilder2.cpp#16)]\\n [!code-csharp[System.String.Class#16](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Class/cs/immutable1.cs#16)]\\n [!code-vb[System.String.Class#16](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Class/vb/immutable1.vb#16)]  \\n  \\n<a name=\\\"CultureSensitive\\\"></a>   \\n## Ordinal vs. culture-sensitive operations  \\n Members of the <xref:System.String> class perform either ordinal or culture-sensitive (linguistic) operations on a <xref:System.String> object. An ordinal operation acts on the numeric value of each <xref:System.Char> object. A culture-sensitive operation acts on the value of the <xref:System.String>object, and takes culture-specific casing, sorting, formatting, and parsing rules into account. Culture-sensitive operations execute in the context of an explicitly declared culture or the implicit current culture. The two kinds of operations can produce very different results when they are performed on the same string.  \\n  \\n The .NET Framework also supports culture-insensitive linguistic string operations by using the invariant culture (<xref:System.Globalization.CultureInfo.InvariantCulture%2A?displayProperty=fullName>), which is loosely based on the culture settings of the English language independent of region. Unlike other <xref:System.Globalization.CultureInfo?displayProperty=fullName> settings, the settings of the invariant culture are guaranteed to remain consistent on a single computer, from system to system, and across versions of the .NET Framework. The invariant culture can be seen as a kind of black box that ensures stability of string comparisons and ordering across all cultures.  \\n  \\n> [!IMPORTANT]\\n>  If your application makes a security decision about a symbolic identifier such as a file name or named pipe, or about persisted data such as the text-based data in an XML file, the operation should use an ordinal comparison instead of a culture-sensitive comparison. This is because a culture-sensitive comparison can yield different results depending on the culture in effect, whereas an ordinal comparison depends solely on the binary value of the compared characters.  \\n  \\n> [!IMPORTANT]\\n>  Most methods that perform string operations include an overload that has a parameter of type <xref:System.StringComparison>, which enables you to specify whether the method performs an ordinal or culture-sensitive operation. In general, you should call this overload to make the intent of your method call clear. For best practices and guidance for using ordinal and culture-sensitive operations on strings, see [Best Practices for Using Strings](~/docs/standard/base-types/best-practices-strings.md).  \\n  \\n Operations for [casing](#casing), [parsing and formatting](#parsing), [comparison and sorting](#comparison), and [testing for equality](#equality) can be either ordinal or culture-sensitive. The following sections discuss each category of operation.  \\n  \\n> [!TIP]\\n>  You should always call a method overload that makes the intent of your method call clear. For example, instead of calling the <xref:System.String.Compare%28System.String%2CSystem.String%29> method to perform a culture-sensitive comparison of two strings by using the conventions of the current culture, you should call the <xref:System.String.Compare%28System.String%2CSystem.String%2CSystem.StringComparison%29> method with a value of <xref:System.StringComparison?displayProperty=fullName> for the `comparisonType` argument. For more information, see [Best Practices for Using Strings](~/docs/standard/base-types/best-practices-strings.md).  \\n  \\n<a name=\\\"casing\\\"></a>   \\n### Casing  \\n Casing rules determine how to change the capitalization of a Unicode character; for example, from lowercase to uppercase. Often, a casing operation is performed before a string comparison. For example, a string might be converted to uppercase so that it can be compared with another uppercase string. You can convert the characters in a string to lowercase by calling the <xref:System.String.ToLower%2A> or <xref:System.String.ToLowerInvariant%2A> method, and you can convert them to uppercase by calling the <xref:System.String.ToUpper%2A> or <xref:System.String.ToUpperInvariant%2A> method. In addition, you can use the <xref:System.Globalization.TextInfo.ToTitleCase%2A?displayProperty=fullName> method to convert a string to title case.  \\n  \\n Casing operations can be based on the rules of the current culture, a specified culture, or the invariant culture. Because case mappings can vary depending on the culture used, the result of casing operations can vary based on culture. The actual differences in casing are of three kinds:  \\n  \\n-   Differences in the case mapping of LATIN CAPITAL LETTER I (U+0049), LATIN SMALL LETTER I (U+0069), LATIN CAPITAL LETTER I WITH DOT ABOVE (U+0130), and LATIN SMALL LETTER DOTLESS I (U+0131). In the tr-TR (Turkish (Turkey)) and az-Latn-AZ (Azerbaijan, Latin) cultures, and in the tr, az, and az-Latn neutral cultures, the lowercase equivalent of LATIN CAPITAL LETTER I is LATIN SMALL LETTER DOTLESS I, and the uppercase equivalent of LATIN SMALL LETTER I is LATIN CAPITAL LETTER I WITH DOT ABOVE. In all other cultures, including the invariant culture, LATIN SMALL LETTER I and LATIN CAPITAL LETTER I are lowercase and uppercase equivalents.  \\n  \\n     The following example demonstrates how a string comparison designed to prevent file system access can fail if it relies on a culture-sensitive casing comparison. (The casing conventions of the invariant culture should have been used.)  \\n  \\n     [!code-csharp[System.String.Class#17](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Class/cs/case2.cs#17)]\\n     [!code-vb[System.String.Class#17](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Class/vb/case2.vb#17)]  \\n  \\n-   Differences in case mappings between the invariant culture and all other cultures. In these cases, using the casing rules of the invariant culture to change a character to uppercase or lowercase returns the same character. For all other cultures, it returns a different character. Some of the affected characters are listed in the following table.  \\n  \\n    |Character|If changed to|Returns|  \\n    |---------------|-------------------|-------------|  \\n    |MICRON SIGN (U+00B5)|Uppercase|GREEK CAPITAL LETTER MU (U+-39C)|  \\n    |LATIN CAPITAL LETTER I WITH DOT ABOVE (U+0130)|Lowercase|LATIN SMALL LETTER I (U+0069)|  \\n    |LATIN SMALL LETTER DOTLESS I (U+0131)|Uppercase|LATIN CAPITAL LETTER I (U+0049)|  \\n    |LATIN SMALL LETTER LONG S (U+017F)|Uppercase|LATIN CAPITAL LETTER S (U+0053)|  \\n    |LATIN CAPITAL LETTER D WITH SMALL LETTER Z WITH CARON (U+01C5)|Lowercase|LATIN SMALL LETTER DZ WITH CARON (U+01C6)|  \\n    |COMBINING GREEK YPOGEGRAMMENI (U+0345)|Uppercase|GREEK CAPITAL LETTER IOTA (U+0399)|  \\n  \\n-   Differences in case mappings of two-letter mixed-case pairs in the ASCII character range. In most cultures, a two-letter mixed-case pair is equal to the equivalent two-letter uppercase or lowercase pair. This is not true for the following two-letter pairs in the following cultures, because in each case they are compared to a digraph:  \\n  \\n    -   \\\"lJ\\\" and \\\"nJ\\\" in the hr-HR (Croatian (Croatia)) culture.  \\n  \\n    -   \\\"cH\\\" in the cs-CZ (Czech (Czech Republic)) and sk-SK (Slovak (Slovakia)) cultures.  \\n  \\n    -   \\\"aA\\\" in the da-DK (Danish (Denmark)) culture.  \\n  \\n    -   \\\"cS\\\", \\\"dZ\\\", \\\"dZS\\\", \\\"nY\\\", \\\"sZ\\\", \\\"tY\\\", and \\\"zS\\\" in the hu-HU (Hungarian (Hungary)) culture.  \\n  \\n    -   \\\"cH\\\" and \\\"lL\\\" in the es-ES_tradnl (Spanish (Spain, Traditional Sort)) culture.  \\n  \\n    -   \\\"cH\\\", \\\"gI\\\", \\\"kH\\\", \\\"nG\\\" \\\"nH\\\", \\\"pH\\\", \\\"qU', \\\"tH\\\", and \\\"tR\\\" in the vi-VN (Vietnamese (Vietnam)) culture.  \\n  \\n     However, it is unusual to encounter a situation in which a culture-sensitive comparison of these pairs creates problems, because these pairs are uncommon in fixed strings or identifiers.  \\n  \\n The following example illustrates some of the differences in casing rules between cultures when converting strings to uppercase.  \\n  \\n [!code-cpp[System.String.Class#7](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Class/cpp/string.casing.cpp#7)]\\n [!code-csharp[System.String.Class#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Class/cs/case1.cs#7)]\\n [!code-vb[System.String.Class#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Class/vb/case1.vb#7)]  \\n  \\n<a name=\\\"parsing\\\"></a>   \\n### Parsing and formatting  \\n Formatting and parsing are inverse operations. Formatting rules determine how to convert a value, such as a date and time or a number, to its string representation, whereas parsing rules determine how to convert a string representation to a value such as a date and time. Both formatting and parsing rules are dependent on cultural conventions. The following example illustrates the ambiguity that can arise when interpreting a culture-specific date string. Without knowing the conventions of the culture that was used to produce a date string, it is not possible to know whether 03/01/2011, 3/1/2011, and 01/03/2011 represent January 3, 2011 or March 1, 2011.  \\n  \\n [!code-cpp[System.String.Class#8](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Class/cpp/string.format1.cpp#8)]\\n [!code-csharp[System.String.Class#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Class/cs/format1.cs#8)]\\n [!code-vb[System.String.Class#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Class/vb/format1.vb#8)]  \\n  \\n Similarly, as the following example shows, a single string can produce different dates depending on the culture whose conventions are used in the parsing operation.  \\n  \\n [!code-cpp[System.String.Class#9](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Class/cpp/string.parse1.cpp#9)]\\n [!code-csharp[System.String.Class#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Class/cs/parse1.cs#9)]\\n [!code-vb[System.String.Class#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Class/vb/parse1.vb#9)]  \\n  \\n<a name=\\\"comparison\\\"></a>   \\n### String comparison and sorting  \\n Conventions for comparing and sorting strings vary from culture to culture. For example, the sort order may be based on phonetics or on the visual representation of characters. In East Asian languages, characters are sorted by the stroke and radical of ideographs. Sorting also depends on the order languages and cultures use for the alphabet. For example, the Danish language has an \\\"Ã\\\" character that it sorts after \\\"Z\\\" in the alphabet. In addition, comparisons can be case-sensitive or case-insensitive, and in some cases casing rules also differ by culture. Ordinal comparison, on the other hand, uses the Unicode code points of individual characters in a string when comparing and sorting strings.  \\n  \\n Sort rules determine the alphabetic order of Unicode characters and how two strings compare to each other. For example, the <xref:System.String.Compare%28System.String%2CSystem.String%2CSystem.StringComparison%29?displayProperty=fullName> method compares two strings based on the <xref:System.StringComparison> parameter. If the parameter value is <xref:System.StringComparison?displayProperty=fullName>, the method performs a linguistic comparison that uses the conventions of the current culture; if the parameter value is <xref:System.StringComparison?displayProperty=fullName>, the method performs an ordinal comparison. Consequently, as the following example shows, if the current culture is U.S. English, the first call to the <xref:System.String.Compare%28System.String%2CSystem.String%2CSystem.StringComparison%29?displayProperty=fullName> method (using culture-sensitive comparison) considers \\\"a\\\" less than \\\"A\\\", but the second call to the same method (using ordinal comparison) considers \\\"a\\\" greater than \\\"A\\\".  \\n  \\n [!code-cpp[System.String.Class#10](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Class/cpp/string.compare1.cpp#10)]\\n [!code-csharp[System.String.Class#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Class/cs/compare1.cs#10)]\\n [!code-vb[System.String.Class#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Class/vb/compare1.vb#10)]  \\n  \\n The .NET Framework supports word, string, and ordinal sort rules:  \\n  \\n-   A word sort performs a culture-sensitive comparison of strings in which certain nonalphanumeric Unicode characters might have special weights assigned to them. For example, the hyphen (-) might have a very small weight assigned to it so that \\\"coop\\\" and \\\"co-op\\\" appear next to each other in a sorted list. For a list of the <xref:System.String>methods that compare two strings using word sort rules, see the [String operations by category](#ByCategory) section.  \\n  \\n-   A string sort also performs a culture-sensitive comparison. It is similar to a word sort, except that there are no special cases, and all nonalphanumeric symbols come before all alphanumeric Unicode characters. Two strings can be compared using string sort rules by calling the <xref:System.Globalization.CompareInfo.Compare%2A?displayProperty=fullName> method overloads that have an `options` parameter that is supplied a value of <xref:System.Globalization.CompareOptions?displayProperty=fullName>. Note that this is the only method that the .NET Framework provides to compare two strings using string sort rules.  \\n  \\n-   An ordinal sort compares strings based on the numeric value of each <xref:System.Char> object in the string. An ordinal comparison is automatically case-sensitive because the lowercase and uppercase versions of a character have different code points. However, if case is not important, you can specify an ordinal comparison that ignores case. This is equivalent to converting the string to uppercase by using the invariant culture and then performing an ordinal comparison on the result. For a list of the <xref:System.String> methods that compare two strings using ordinal sort rules, see the [String operations by category](#ByCategory) section.  \\n  \\n A culture-sensitive comparison is any comparison that explicitly or implicitly uses a <xref:System.Globalization.CultureInfo> object, including the invariant culture that is specified by the <xref:System.Globalization.CultureInfo.InvariantCulture%2A?displayProperty=fullName> property. The implicit culture is the current culture, which is specified by the <xref:System.Threading.Thread.CurrentCulture%2A?displayProperty=fullName> and <xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=fullName> properties. There is considerable variation in the sort order of alphabetic characters (that is, characters for which the <xref:System.Char.IsLetter%2A?displayProperty=fullName> property returns `true`) across cultures. You can specify a culture-sensitive comparison that uses the conventions of a specific culture by supplying a <xref:System.Globalization.CultureInfo> object to a string comparison method such as <xref:System.String.Compare%28System.String%2CSystem.String%2CSystem.Globalization.CultureInfo%2CSystem.Globalization.CompareOptions%29>. You can specify a culture-sensitive comparison that uses the conventions of the current culture by supplying <xref:System.StringComparison?displayProperty=fullName>, <xref:System.StringComparison?displayProperty=fullName>, or any member of the <xref:System.Globalization.CompareOptions> enumeration other than <xref:System.Globalization.CompareOptions?displayProperty=fullName> or <xref:System.Globalization.CompareOptions?displayProperty=fullName> to an appropriate overload of the <xref:System.String.Compare%2A> method. A culture-sensitive comparison is generally appropriate for sorting whereas an ordinal comparison is not. An ordinal comparison is generally appropriate for determining whether two strings are equal (that is, for determining identity) whereas a culture-sensitive comparison is not.  \\n  \\n The following example illustrates the difference between culture-sensitive and ordinal comparison. The example evaluates three strings, \\\"Apple\\\", \\\"Ãble\\\", and \\\"AEble\\\", using ordinal comparison and the conventions of the da-DK and en-US cultures (each of which is the default culture at the time the <xref:System.String.Compare%2A> method is called). Because the Danish language treats the character \\\"Ã\\\" as an individual letter and sorts it after \\\"Z\\\" in the alphabet, the string \\\"Ãble\\\" is greater than \\\"Apple\\\". However, \\\"Ãble\\\" is not considered equivalent to \\\"AEble\\\", so \\\"Ãble\\\" is also greater than \\\"AEble\\\". The en-US culture doesn't include the letter\\\"Ã\\\" but treats it as equivalent to \\\"AE\\\", which explains why  \\\"Ãble\\\" is less than \\\"Apple\\\" but equal to \\\"AEble\\\". Ordinal comparison, on the other hand, considers \\\"Apple\\\" to be less than \\\"Ãble\\\", and \\\"Ãble\\\" to be greater than \\\"AEble\\\".  \\n  \\n [!code-csharp[System.String.Class#21](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Class/cs/compare4.cs#21)]\\n [!code-vb[System.String.Class#21](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Class/vb/compare4.vb#21)]  \\n  \\n Use the following general guidelines to choose an appropriate sorting or string comparison method:  \\n  \\n-   If you want the strings to be ordered based on the user's culture, you should order them based on the conventions of the current culture. If the user's culture changes, the order of sorted strings will also change accordingly. For example, a thesaurus application should always sort words based on the user's culture.  \\n  \\n-   If you want the strings to be ordered based on the conventions of a specific culture, you should order them by supplying a <xref:System.Globalization.CultureInfo> object that represents that culture to a comparison method. For example, in an application designed to teach students a particular language, you want strings to be ordered based on the conventions of one of the cultures that speaks that language.  \\n  \\n-   If you want the order of strings to remain unchanged across cultures, you should order them based on the conventions of the invariant culture or use an ordinal comparison. For example, you would use an ordinal sort to organize the names of files, processes, mutexes, or named pipes.  \\n  \\n-   For a comparison that involves a security decision (such as whether a username is valid), you should always perform an ordinal test for equality by calling an overload of the <xref:System.String.Equals%2A> method.  \\n  \\n> [!NOTE]\\n>  The culture-sensitive sorting and casing rules used in string comparison depend on the version of the .NET Framework. In the [!INCLUDE[net_v45](~/includes/net-v45-md.md)] running on the [!INCLUDE[win8](~/includes/win8-md.md)] operating system, sorting, casing, normalization, and Unicode character information conforms to the Unicode 6.0 standard. On other operating systems, it conforms to the Unicode 5.0 standard.  \\n  \\n For more information about word, string, and ordinal sort rules, see the <xref:System.Globalization.CompareOptions?displayProperty=fullName> topic. For additional recommendations on when to use each rule, see [Best Practices for Using Strings](~/docs/standard/base-types/best-practices-strings.md).  \\n  \\n Ordinarily, you do not call string comparison methods such as <xref:System.String.Compare%2A> directly to determine the sort order of strings. Instead, comparison methods are called by sorting methods such as <xref:System.Array.Sort%2A?displayProperty=fullName> or <xref:System.Collections.Generic.List%601.Sort%2A?displayProperty=fullName>. The following example performs four different sorting operations (word sort using the current culture, word sort using the invariant culture, ordinal sort, and string sort using the invariant culture) without explicitly calling a string comparison method, although they do specify the type of comparison to use. Note that each type of sort produces a unique ordering of strings in its array.  \\n  \\n [!code-cpp[System.String.Class#12](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Class/cpp/string.compare2.cpp#12)]\\n [!code-csharp[System.String.Class#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Class/cs/compare2.cs#12)]\\n [!code-vb[System.String.Class#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Class/vb/compare2.vb#12)]  \\n  \\n> [!TIP]\\n>  Internally, the.NET Framework uses sort keys to support culturallysensitive string comparison. Each character in a string is given several categories of sort weights, including alphabetic, case, and diacritic. A sort key, represented by the <xref:System.Globalization.SortKey> class, provides a repository of these weights for a particular string. If your app performs a large number of searching or sorting operations on the same set of strings, you can improve its performance by generating and storing sort keys for all the strings that it uses. When a sort or comparison operation is required, you use the sort keys instead of the strings. For more information, see the <xref:System.Globalization.SortKey> class.  \\n  \\n If you don't specify a string comparison convention, sorting methods such as <xref:System.Array.Sort%28System.Array%29?displayProperty=fullName> perform a culture-sensitive, case-sensitive sort on strings. The following example illustrates how changing the current culture affects the order of sorted strings in an array. It creates an array of three strings. First, it sets the `System.Threading.Thread.CurrentThread.CurrentCulture` property to en-US and calls the <xref:System.Array.Sort%28System.Array%29?displayProperty=fullName> method. The resulting sort order is based on sorting conventions for the English (United States) culture. Next, the example sets the `System.Threading.Thread.CurrentThread.CurrentCulture` property to da-DK and calls the <xref:System.Array.Sort%2A?displayProperty=fullName> method again. Notice how the resulting sort order differs from the en-US results because it uses the sorting conventions for Danish (Denmark).  \\n  \\n [!code-csharp[Conceptual.Strings.Comparing#3](~/samples/snippets/csharp/VS_Snippets_CLR/conceptual.strings.comparing/cs/sort1.cs#3)]\\n [!code-vb[Conceptual.Strings.Comparing#3](~/samples/snippets/visualbasic/VS_Snippets_CLR/conceptual.strings.comparing/vb/sort1.vb#3)]  \\n  \\n> [!WARNING]\\n>  If your primary purpose in comparing strings is to determine whether they are equal, you should call the <xref:System.String.Equals%2A?displayProperty=fullName> method. Typically, you should use <xref:System.String.Equals%2A> to perform an ordinal comparison. The <xref:System.String.Compare%2A?displayProperty=fullName> method is intended primarily to sort strings.  \\n  \\n String search methods, such as <xref:System.String.StartsWith%2A?displayProperty=fullName> and <xref:System.String.IndexOf%2A?displayProperty=fullName>, also can perform culture-sensitive or ordinal string comparisons. The following example illustrates the differences between ordinal and culture-sensitive comparisons using the <xref:System.String.IndexOf%2A> method. A culture-sensitive search in which the current culture is English (United States) considers the substring \\\"oe\\\" to match the ligature \\\"Å\\\". Because a soft hyphen (U+00AD) is a zero-width character, the search treats the soft hyphen as equivalent to <xref:System.String.Empty> and finds a match at the beginning of the string. An ordinal search, on the other hand, does not find a match in either case.  \\n  \\n [!code-cpp[System.String.Class#13](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Class/cpp/string.compare3.cpp#13)]\\n [!code-csharp[System.String.Class#13](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Class/cs/compare3.cs#13)]\\n [!code-vb[System.String.Class#13](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Class/vb/compare3.vb#13)]  \\n  \\n### Searching Strings  \\n String search methods, such as <xref:System.String.StartsWith%2A?displayProperty=fullName> and <xref:System.String.IndexOf%2A?displayProperty=fullName>, also can perform culture-sensitive or ordinal string comparisons to determine whether a character or substring is found in a specified string.  \\n  \\n The search methods in the <xref:System.String> class that search for an individual character, such as the<xref:System.String.IndexOf%2A> method, or one of a set of characters,   such as the <xref:System.String.IndexOfAny%2A> method, all perform an ordinal search. To perform a culture-sensitive search for a character, you must call a <xref:System.Globalization.CompareInfo> method such as <xref:System.Globalization.CompareInfo.IndexOf%28System.String%2CSystem.Char%29?displayProperty=fullName> or <xref:System.Globalization.CompareInfo.LastIndexOf%28System.String%2CSystem.Char%29?displayProperty=fullName>. Note that the results of searching for a character using ordinal and culture-sensitive comparison can be very different. For example, a search for a precomposed Unicode character such as the ligature \\\"Ã\\\" (U+00C6) might match any occurrence of its components in the correct sequence, such as \\\"AE\\\" (U+041U+0045), depending on the culture. The following example illustrates the difference between the <xref:System.String.IndexOf%28System.Char%29?displayProperty=fullName> and <xref:System.Globalization.CompareInfo.IndexOf%28System.String%2CSystem.Char%29?displayProperty=fullName> methods when searching for an individual character. The ligature \\\"Ã¦\\\" (U+00E6) is found in the string \\\"aerial\\\" when using the conventions of the en-US culture, but not when using the conventions of the da-DK culture or when performing an ordinal comparison.  \\n  \\n [!code-csharp[System.String.Class#22](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Class/cs/search1.cs#22)]\\n [!code-vb[System.String.Class#22](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Class/vb/search1.vb#22)]  \\n  \\n On the other hand, <xref:System.String> class methods that search for a string rather than a character perform a culture-sensitive search if search options are not explicitly specified by a parameter of type <xref:System.StringComparison>. The sole exception is <xref:System.String.Contains%2A>, which performs an ordinal search.  \\n  \\n<a name=\\\"equality\\\"></a>   \\n### Testing for equality  \\n Use the <xref:System.String.Compare%2A?displayProperty=fullName> method to determine the relationship of two strings in the sort order. Typically, this is a culture-sensitive operation. In contrast, call the <xref:System.String.Equals%2A?displayProperty=fullName> method to test for equality. Because the test for equality usually compares user input with some known string, such as a valid user name, a password, or a file system path, it is typically an ordinal operation.  \\n  \\n> [!WARNING]\\n>  It is possible to test for equality by calling the <xref:System.String.Compare%2A?displayProperty=fullName> method and determining whether the return value is zero. However, this practice is not recommended. To determine whether two strings are equal, you should call one of the overloads of the <xref:System.String.Equals%2A?displayProperty=fullName> method. The preferred overload to call is either the instance <xref:System.String.Equals%28System.String%2CSystem.StringComparison%29> method or the static <xref:System.String.Equals%28System.String%2CSystem.String%2CSystem.StringComparison%29> method, because both methods include a <xref:System.StringComparison?displayProperty=fullName> parameter that explicitly specifies the type of comparison.  \\n  \\n The following example illustrates the danger of performing a culture-sensitive comparison for equality when an ordinal one should be used instead. In this case, the intent of the code is to prohibit file system access from URLs that begin with \\\"FILE://\\\" or \\\"file://\\\" by performing a case-insensitive comparison of the beginning of a URL with the string \\\"FILE://\\\". However, if a culture-sensitive comparison is performed using the Turkish (Turkey) culture on a URL that begins with \\\"file://\\\", the comparison for equality fails, because the Turkish uppercase equivalent of the lowercase \\\"i\\\" is \\\"Ä°\\\" instead of \\\"I\\\". As a result, file system access is inadvertently permitted. On the other hand, if an ordinal comparison is performed, the comparison for equality succeeds, and file system access is denied.  \\n  \\n [!code-cpp[System.String.Class#11](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Class/cpp/string.equals.cpp#11)]\\n [!code-csharp[System.String.Class#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Class/cs/equality1.cs#11)]\\n [!code-vb[System.String.Class#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Class/vb/equality1.vb#11)]  \\n  \\n<a name=\\\"Normalization\\\"></a>   \\n## Normalization  \\n Some Unicode characters have multiple representations. For example, any of the following code points can represent the letter \\\"áº¯\\\":  \\n  \\n-   U+1EAF  \\n  \\n-   U+0103 U+0301  \\n  \\n-   U+0061 U+0306 U+0301  \\n  \\n Multiple representations for a single character complicate searching, sorting, matching, and other string operations.  \\n  \\n The Unicode standard defines a process called normalization that returns one binary representation of a Unicode character for any of its equivalent binary representations. Normalization can use several algorithms, called normalization forms, that follow different rules. The .NET Framework supports Unicode normalization forms C, D, KC, and KD. When strings have been normalized to the same normalization form, they can be compared by using ordinal comparison.  \\n  \\n An ordinal comparison is a binary comparison of the Unicode scalar value of corresponding <xref:System.Char> objects in each string. The<xref:System.String> class includes a number of methods that can perform an ordinal comparison, including the following:  \\n  \\n-   Any overload of the <xref:System.String.Compare%2A>, <xref:System.String.Equals%2A>, <xref:System.String.StartsWith%2A>,  <xref:System.String.EndsWith%2A>, <xref:System.String.IndexOf%2A>,and <xref:System.String.LastIndexOf%2A> methods that includes a <xref:System.StringComparison> parameter. The method performs an ordinal comparison if you supply a value of <xref:System.StringComparison?displayProperty=fullName> or <xref:System.StringComparison.OrdinalIgnoreCase> for this parameter.  \\n  \\n-   The overloads of the <xref:System.String.CompareOrdinal%2A> method.  \\n  \\n-   Methods that use ordinal comparison by default, such as <xref:System.String.Contains%2A>, <xref:System.String.Replace%2A>, and <xref:System.String.Split%2A>.  \\n  \\n-   Methods that search for a <xref:System.Char>value or for the elements in a <xref:System.Char> arrayin a string instance. Such methods include <xref:System.String.IndexOf%28System.Char%29> and <xref:System.String.Split%28System.Char%5B%5D%29>.  \\n  \\n You can determine whether a string is normalized to normalization form C by calling the <xref:System.String.IsNormalized?displayProperty=fullName> method, or you can call the <xref:System.String.IsNormalized%28System.Text.NormalizationForm%29?displayProperty=fullName> method to determine whether a string is normalized to a specified normalization form. You can also call the <xref:System.String.Normalize?displayProperty=fullName> method to convert a string to normalization form C, or you can call the <xref:System.String.Normalize%28System.Text.NormalizationForm%29?displayProperty=fullName> method to convert a string to a specified normalization form. For step-by-step information about normalizing and comparing strings, see the <xref:System.String.Normalize> and <xref:System.String.Normalize%28System.Text.NormalizationForm%29> methods.  \\n  \\n The following simple example illustrates string normalization. It defines the letter \\\"á»\\\" in three different ways in three different strings, and uses an ordinal comparison for equality to determine that each string differs from the other two strings. It then converts each string to the supported normalization forms, and again performs an ordinal comparison of each string in a specified normalization form. In each case, the second test for equality shows that the strings are equal.  \\n  \\n [!code-cpp[System.String.Class#14](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Class/cpp/string.normalize.cpp#14)]\\n [!code-csharp[System.String.Class#14](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Class/cs/normalize1.cs#14)]\\n [!code-vb[System.String.Class#14](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Class/vb/normalize1.vb#14)]  \\n  \\n For more information about normalization and normalization forms, see <xref:System.Text.NormalizationForm?displayProperty=fullName>, as well as [Unicode Standard Annex #15: Unicode Normalization Forms](http://unicode.org/reports/tr15/) and the [Normalization FAQ](http://www.unicode.org/faq/normalization.html) on the unicode.org website.  \\n  \\n<a name=\\\"ByCategory\\\"></a>   \\n## String operations by category  \\n The <xref:System.String> class provides members for comparing strings, testing strings for equality, finding characters or substrings in a string, modifying a string, extracting substrings from a string, combining strings, formatting values, copying a string, and normalizing a string.  \\n  \\n### Comparing strings  \\n You can compare strings to determine their relative position in the sort order by using the following <xref:System.String>methods:  \\n  \\n-   <xref:System.String.Compare%2A> returns an integer that indicates the relationship of one string to a second string in the sort order.  \\n  \\n-   <xref:System.String.CompareOrdinal%2A> returns an integer that indicates the relationship of one string to a second string based on a comparison of their code points.  \\n  \\n-   <xref:System.String.CompareTo%2A> returns an integer that indicates the relationship of the current string instance to a second string in the sort order. The <xref:System.String.CompareTo%28System.String%29> method provides the <xref:System.IComparable> and <xref:System.IComparable%601> implementations for the <xref:System.String> class.  \\n  \\n### Testing strings for equality  \\n You call the <xref:System.String.Equals%2A> method to determine whether two strings are equal. The instance <xref:System.String.Equals%28System.String%2CSystem.String%2CSystem.StringComparison%29> and the static <xref:System.String.Equals%28System.String%2CSystem.StringComparison%29> overloads let you specify whether the comparison is culture-sensitive or ordinal, and whether case is considered or ignored. Most tests for equality are ordinal, and comparisons for equality that determine access to a system resource (such as a file system object) should always be ordinal.  \\n  \\n### Finding characters in a string  \\n The <xref:System.String> class includes two kinds of search methods:  \\n  \\n-   Methods that return a <xref:System.Boolean> value to indicate whether a particular substring is present in a string instance. These include the <xref:System.String.Contains%2A>, <xref:System.String.EndsWith%2A>, and <xref:System.String.StartsWith%2A> methods.  \\n  \\n-   Methods that indicate the starting position of a substring in a string instance. These include the <xref:System.String.IndexOf%2A>, <xref:System.String.IndexOfAny%2A>, <xref:System.String.LastIndexOf%2A>, and <xref:System.String.LastIndexOfAny%2A> methods.  \\n  \\n> [!WARNING]\\n>  If you want to search a string for a particular pattern rather than a specific substring, you should use regular expressions. For more information, see [.NET Framework Regular Expressions](~/docs/standard/base-types/regular-expressions.md).  \\n  \\n### Modifying a string  \\n The <xref:System.String> class includes the following methods that appear to modify the value of a string:  \\n  \\n-   <xref:System.String.Insert%2A> inserts a string into the current <xref:System.String> instance.  \\n  \\n-   <xref:System.String.PadLeft%2A> inserts one or more occurrences of a specified character at the beginning of a string.  \\n  \\n-   <xref:System.String.PadRight%2A> inserts one or more occurrences of a specified character at the beginning of a string.  \\n  \\n-   <xref:System.String.Remove%2A> deletes a substring from the current <xref:System.String> instance.  \\n  \\n-   <xref:System.String.Replace%2A> replaces a substring with another substring in the current <xref:System.String> instance.  \\n  \\n-   <xref:System.String.ToLower%2A> and <xref:System.String.ToLowerInvariant%2A> convert all the characters in a string to lowercase.  \\n  \\n-   <xref:System.String.ToUpper%2A> and <xref:System.String.ToUpperInvariant%2A> convert all the characters in a string to uppercase.  \\n  \\n-   <xref:System.String.Trim%2A> removes all occurrences of a character from the beginning and end of a string.  \\n  \\n-   <xref:System.String.TrimEnd%2A> removes all occurrences of a character from the end of a string.  \\n  \\n-   <xref:System.String.TrimStart%2A> removes all occurrences of a character from the beginning of a string.  \\n  \\n> [!IMPORTANT]\\n>  All string modification methods return a new <xref:System.String> object. They do not modify the value of the current instance.  \\n  \\n### Extracting substrings from a string  \\n The <xref:System.String.Split%2A?displayProperty=fullName> method separates a single string into multiple strings. Overloads of the method allow you to specify multiple delimiters, to determine the maximum number of substrings that the method extracts, and to determine whether empty strings (which occur when delimiters are adjacent) are included among the returned strings.  \\n  \\n### Combining strings  \\n The following <xref:System.String> methods can be used for string concatenation:  \\n  \\n-   <xref:System.String.Concat%2A> combines one or more substrings into a single string.  \\n  \\n-   <xref:System.String.Join%2A> concatenates one or more substrings into a single element and adds a separator between each substring.  \\n  \\n### Formatting values  \\n The <xref:System.String.Format%2A?displayProperty=fullName> method uses the composite formatting feature to replace one or more placeholders in a string with the string representation of some object or value. The <xref:System.String.Format%2A> method is often used to do the following:  \\n  \\n-   To embed the string representation of a numeric value in a string.  \\n  \\n-   To embed the string representation of a date and time value in a string.  \\n  \\n-   To embed the string representation of an enumeration value in a string.  \\n  \\n-   To embed the string representation of some object that supports the <xref:System.IFormattable> interface in a string.  \\n  \\n-   To right-justify or left-justify a substring in a field within a larger string.  \\n  \\n For detailed information about formatting operations and examples, see the <xref:System.String.Format%2A> overload summary.  \\n  \\n### Copying a string  \\n You can call the following <xref:System.String> methods to make a copy of a string:  \\n  \\n-   <xref:System.String.Clone%2A> returns a reference to an existing <xref:System.String> object.  \\n  \\n-   <xref:System.String.Copy%2A> creates a copy of an existing string.  \\n  \\n-   <xref:System.String.CopyTo%2A> copies a portion of a string to a character array.  \\n  \\n### Normalizing a string  \\n In Unicode, a single character can have multiple code points. Normalization converts these equivalent characters into the same binary representation. The <xref:System.String.Normalize%2A?displayProperty=fullName> method performs the normalization, and the <xref:System.String.IsNormalized%2A?displayProperty=fullName> method determines whether a string is normalized.  \\n  \\n For more information and an example, see the [Normalization](#Normalization) section earlier in this topic.\"\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(true)]\n\n      public sealed class String : ICloneable, IComparable, IComparable<string>, IConvertible, IEquatable<string>, System.Collections.Generic.IEnumerable<char>\n  inheritance:\n  - System.Object\n  implements:\n  - System.Collections.Generic.IEnumerable{System.Char}\n  - System.ICloneable\n  - System.IComparable\n  - System.IComparable{System.String}\n  - System.IConvertible\n  - System.IEquatable{System.String}\n  inheritedMembers:\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  extensionMethods:\n  - System.Collections.Immutable.ImmutableArray.ToImmutableArray``1(System.Collections.Generic.IEnumerable{``0})\n  - System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})\n  - System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})\n  - System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}})\n  - System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}},System.Collections.Generic.IEqualityComparer{``0})\n  - System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}},System.Collections.Generic.IEqualityComparer{``0},System.Collections.Generic.IEqualityComparer{``1})\n  - System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})\n  - System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})\n  - System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1},System.Collections.Generic.IEqualityComparer{``2})\n  - System.Collections.Immutable.ImmutableHashSet.ToImmutableHashSet``1(System.Collections.Generic.IEnumerable{``0})\n  - System.Collections.Immutable.ImmutableHashSet.ToImmutableHashSet``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})\n  - System.Collections.Immutable.ImmutableList.ToImmutableList``1(System.Collections.Generic.IEnumerable{``0})\n  - System.Collections.Immutable.ImmutableSortedDictionary.ToImmutableSortedDictionary``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}})\n  - System.Collections.Immutable.ImmutableSortedDictionary.ToImmutableSortedDictionary``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}},System.Collections.Generic.IComparer{``0})\n  - System.Collections.Immutable.ImmutableSortedDictionary.ToImmutableSortedDictionary``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}},System.Collections.Generic.IComparer{``0},System.Collections.Generic.IEqualityComparer{``1})\n  - System.Collections.Immutable.ImmutableSortedDictionary.ToImmutableSortedDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})\n  - System.Collections.Immutable.ImmutableSortedDictionary.ToImmutableSortedDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IComparer{``1})\n  - System.Collections.Immutable.ImmutableSortedDictionary.ToImmutableSortedDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IComparer{``1},System.Collections.Generic.IEqualityComparer{``2})\n  - System.Collections.Immutable.ImmutableSortedSet.ToImmutableSortedSet``1(System.Collections.Generic.IEnumerable{``0})\n  - System.Collections.Immutable.ImmutableSortedSet.ToImmutableSortedSet``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IComparer{``0})\n  - System.Data.DataTableExtensions.CopyToDataTable``1(System.Collections.Generic.IEnumerable{``0})\n  - System.Data.DataTableExtensions.CopyToDataTable``1(System.Collections.Generic.IEnumerable{``0},System.Data.DataTable,System.Data.LoadOption)\n  - System.Data.DataTableExtensions.CopyToDataTable``1(System.Collections.Generic.IEnumerable{``0},System.Data.DataTable,System.Data.LoadOption,System.Data.FillErrorEventHandler)\n  - System.Linq.Enumerable.Aggregate``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,``0})\n  - System.Linq.Enumerable.Aggregate``2(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1})\n  - System.Linq.Enumerable.Aggregate``3(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``2})\n  - System.Linq.Enumerable.All``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})\n  - System.Linq.Enumerable.Any``1(System.Collections.Generic.IEnumerable{``0})\n  - System.Linq.Enumerable.Any``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})\n  - System.Linq.Enumerable.Append``1(System.Collections.Generic.IEnumerable{``0},``0)\n  - System.Linq.Enumerable.AsEnumerable``1(System.Collections.Generic.IEnumerable{``0})\n  - System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Decimal})\n  - System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Double})\n  - System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Int32})\n  - System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Int64})\n  - System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})\n  - System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})\n  - System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})\n  - System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})\n  - System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})\n  - System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Single})\n  - System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})\n  - System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})\n  - System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})\n  - System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})\n  - System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})\n  - System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})\n  - System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})\n  - System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})\n  - System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})\n  - System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})\n  - System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)\n  - System.Linq.Enumerable.Concat``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})\n  - System.Linq.Enumerable.Contains``1(System.Collections.Generic.IEnumerable{``0},``0)\n  - System.Linq.Enumerable.Contains``1(System.Collections.Generic.IEnumerable{``0},``0,System.Collections.Generic.IEqualityComparer{``0})\n  - System.Linq.Enumerable.Count``1(System.Collections.Generic.IEnumerable{``0})\n  - System.Linq.Enumerable.Count``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})\n  - System.Linq.Enumerable.DefaultIfEmpty``1(System.Collections.Generic.IEnumerable{``0})\n  - System.Linq.Enumerable.DefaultIfEmpty``1(System.Collections.Generic.IEnumerable{``0},``0)\n  - System.Linq.Enumerable.Distinct``1(System.Collections.Generic.IEnumerable{``0})\n  - System.Linq.Enumerable.Distinct``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})\n  - System.Linq.Enumerable.ElementAt``1(System.Collections.Generic.IEnumerable{``0},System.Int32)\n  - System.Linq.Enumerable.ElementAtOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Int32)\n  - System.Linq.Enumerable.Except``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})\n  - System.Linq.Enumerable.Except``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})\n  - System.Linq.Enumerable.First``1(System.Collections.Generic.IEnumerable{``0})\n  - System.Linq.Enumerable.First``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})\n  - System.Linq.Enumerable.FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0})\n  - System.Linq.Enumerable.FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})\n  - System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})\n  - System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})\n  - System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})\n  - System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})\n  - System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2})\n  - System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2},System.Collections.Generic.IEqualityComparer{``1})\n  - System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3})\n  - System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3},System.Collections.Generic.IEqualityComparer{``1})\n  - System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})\n  - System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})\n  - System.Linq.Enumerable.Intersect``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})\n  - System.Linq.Enumerable.Intersect``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})\n  - System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})\n  - System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})\n  - System.Linq.Enumerable.Last``1(System.Collections.Generic.IEnumerable{``0})\n  - System.Linq.Enumerable.Last``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})\n  - System.Linq.Enumerable.LastOrDefault``1(System.Collections.Generic.IEnumerable{``0})\n  - System.Linq.Enumerable.LastOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})\n  - System.Linq.Enumerable.LongCount``1(System.Collections.Generic.IEnumerable{``0})\n  - System.Linq.Enumerable.LongCount``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})\n  - System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Decimal})\n  - System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Double})\n  - System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Int32})\n  - System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Int64})\n  - System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})\n  - System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})\n  - System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})\n  - System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})\n  - System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})\n  - System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Single})\n  - System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0})\n  - System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})\n  - System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})\n  - System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})\n  - System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})\n  - System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})\n  - System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})\n  - System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})\n  - System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})\n  - System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})\n  - System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})\n  - System.Linq.Enumerable.Max``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})\n  - System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Decimal})\n  - System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Double})\n  - System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Int32})\n  - System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Int64})\n  - System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})\n  - System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})\n  - System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})\n  - System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})\n  - System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})\n  - System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Single})\n  - System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0})\n  - System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})\n  - System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})\n  - System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})\n  - System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})\n  - System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})\n  - System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})\n  - System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})\n  - System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})\n  - System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})\n  - System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})\n  - System.Linq.Enumerable.Min``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})\n  - System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)\n  - System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})\n  - System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})\n  - System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})\n  - System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})\n  - System.Linq.Enumerable.Prepend``1(System.Collections.Generic.IEnumerable{``0},``0)\n  - System.Linq.Enumerable.Reverse``1(System.Collections.Generic.IEnumerable{``0})\n  - System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})\n  - System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,``1})\n  - System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}})\n  - System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}})\n  - System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})\n  - System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})\n  - System.Linq.Enumerable.SequenceEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})\n  - System.Linq.Enumerable.SequenceEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})\n  - System.Linq.Enumerable.Single``1(System.Collections.Generic.IEnumerable{``0})\n  - System.Linq.Enumerable.Single``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})\n  - System.Linq.Enumerable.SingleOrDefault``1(System.Collections.Generic.IEnumerable{``0})\n  - System.Linq.Enumerable.SingleOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})\n  - System.Linq.Enumerable.Skip``1(System.Collections.Generic.IEnumerable{``0},System.Int32)\n  - System.Linq.Enumerable.SkipLast``1(System.Collections.Generic.IEnumerable{``0},System.Int32)\n  - System.Linq.Enumerable.SkipWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})\n  - System.Linq.Enumerable.SkipWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})\n  - System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Decimal})\n  - System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Double})\n  - System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Int32})\n  - System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Int64})\n  - System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})\n  - System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})\n  - System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})\n  - System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})\n  - System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})\n  - System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Single})\n  - System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})\n  - System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})\n  - System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})\n  - System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})\n  - System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})\n  - System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})\n  - System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})\n  - System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})\n  - System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})\n  - System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})\n  - System.Linq.Enumerable.Take``1(System.Collections.Generic.IEnumerable{``0},System.Int32)\n  - System.Linq.Enumerable.TakeLast``1(System.Collections.Generic.IEnumerable{``0},System.Int32)\n  - System.Linq.Enumerable.TakeWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})\n  - System.Linq.Enumerable.TakeWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})\n  - System.Linq.Enumerable.ToArray``1(System.Collections.Generic.IEnumerable{``0})\n  - System.Linq.Enumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})\n  - System.Linq.Enumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})\n  - System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})\n  - System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})\n  - System.Linq.Enumerable.ToHashSet``1(System.Collections.Generic.IEnumerable{``0})\n  - System.Linq.Enumerable.ToHashSet``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})\n  - System.Linq.Enumerable.ToList``1(System.Collections.Generic.IEnumerable{``0})\n  - System.Linq.Enumerable.ToLookup``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})\n  - System.Linq.Enumerable.ToLookup``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})\n  - System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})\n  - System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})\n  - System.Linq.Enumerable.Union``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})\n  - System.Linq.Enumerable.Union``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})\n  - System.Linq.Enumerable.Where``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})\n  - System.Linq.Enumerable.Where``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})\n  - System.Linq.Enumerable.Zip``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,``2})\n  - System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)\n  - System.Linq.ParallelEnumerable.AsParallel``1(System.Collections.Generic.IEnumerable{``0})\n  - System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)\n  - System.Linq.Queryable.AsQueryable``1(System.Collections.Generic.IEnumerable{``0})\n  - System.SpanExtensions.AsSpan(System.String)\n  - System.StringNormalizationExtensions.IsNormalized(System.String)\n  - System.StringNormalizationExtensions.IsNormalized(System.String,System.Text.NormalizationForm)\n  - System.StringNormalizationExtensions.Normalize(System.String)\n  - System.StringNormalizationExtensions.Normalize(System.String,System.Text.NormalizationForm)\n  - System.Xml.Linq.Extensions.Ancestors``1(System.Collections.Generic.IEnumerable{``0})\n  - System.Xml.Linq.Extensions.Ancestors``1(System.Collections.Generic.IEnumerable{``0},System.Xml.Linq.XName)\n  - System.Xml.Linq.Extensions.AncestorsAndSelf(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement})\n  - System.Xml.Linq.Extensions.AncestorsAndSelf(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement},System.Xml.Linq.XName)\n  - System.Xml.Linq.Extensions.Attributes(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement})\n  - System.Xml.Linq.Extensions.Attributes(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement},System.Xml.Linq.XName)\n  - System.Xml.Linq.Extensions.DescendantNodes``1(System.Collections.Generic.IEnumerable{``0})\n  - System.Xml.Linq.Extensions.DescendantNodesAndSelf(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement})\n  - System.Xml.Linq.Extensions.Descendants``1(System.Collections.Generic.IEnumerable{``0})\n  - System.Xml.Linq.Extensions.Descendants``1(System.Collections.Generic.IEnumerable{``0},System.Xml.Linq.XName)\n  - System.Xml.Linq.Extensions.DescendantsAndSelf(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement})\n  - System.Xml.Linq.Extensions.DescendantsAndSelf(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement},System.Xml.Linq.XName)\n  - System.Xml.Linq.Extensions.Elements``1(System.Collections.Generic.IEnumerable{``0})\n  - System.Xml.Linq.Extensions.Elements``1(System.Collections.Generic.IEnumerable{``0},System.Xml.Linq.XName)\n  - System.Xml.Linq.Extensions.InDocumentOrder``1(System.Collections.Generic.IEnumerable{``0})\n  - System.Xml.Linq.Extensions.Nodes``1(System.Collections.Generic.IEnumerable{``0})\n  - System.Xml.Linq.Extensions.Remove(System.Collections.Generic.IEnumerable{System.Xml.Linq.XAttribute})\n  - System.Xml.Linq.Extensions.Remove``1(System.Collections.Generic.IEnumerable{``0})\n  attributes:\n  - type: System.Runtime.InteropServices.ComVisibleAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/String.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.String.#ctor(System.Char*)\n  commentId: M:System.String.#ctor(System.Char*)\n  id: '#ctor(System.Char*)'\n  parent: System.String\n  langs:\n  - csharp\n  name: String(Char*)\n  nameWithType: String.String(Char*)\n  fullName: String.String(Char*)\n  type: Constructor\n  assemblies:\n  - System.Runtime\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Initializes a new instance of the <xref href=\"System.String\"></xref> class to the value indicated by a specified pointer to an array of Unicode characters.\n  remarks: >-\n    > [!NOTE]\n\n    >  For examples and comprehensive usage information about this and other `String` constructor overloads, see the <xref:System.String.%23ctor%2A> constructor summary.\n  syntax:\n    content: >-\n      [System.CLSCompliant(false)]\n\n      [System.Security.SecurityCritical]\n\n      public String (char* value);\n    parameters:\n    - id: value\n      type: System.Char*\n      description: A pointer to a null-terminated array of Unicode characters.\n  overload: System.String.#ctor*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: The current process does not have read access to all the addressed characters.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>value</code> specifies an array that contains an invalid Unicode character, or <code>value</code> specifies an address less than 64000.\n  attributes:\n  - type: System.CLSCompliantAttribute\n  - type: System.Security.SecurityCriticalAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/String.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.String.#ctor(System.Char[])\n  commentId: M:System.String.#ctor(System.Char[])\n  id: '#ctor(System.Char[])'\n  parent: System.String\n  langs:\n  - csharp\n  name: String(Char[])\n  nameWithType: String.String(Char[])\n  fullName: String.String(Char[])\n  type: Constructor\n  assemblies:\n  - System.Runtime\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Initializes a new instance of the <xref href=\"System.String\"></xref> class to the value indicated by an array of Unicode characters.\n  remarks: >-\n    > [!NOTE]\n\n    >  For examples and comprehensive usage information about this and other `String` constructor overloads, see the <xref:System.String.%23ctor%2A> constructor summary.\n  syntax:\n    content: public String (char[] value);\n    parameters:\n    - id: value\n      type: System.Char[]\n      description: An array of Unicode characters.\n  overload: System.String.#ctor*\n  exceptions: []\n  attributes: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/String.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.String.#ctor(System.SByte*)\n  commentId: M:System.String.#ctor(System.SByte*)\n  id: '#ctor(System.SByte*)'\n  parent: System.String\n  langs:\n  - csharp\n  name: String(SByte*)\n  nameWithType: String.String(SByte*)\n  fullName: String.String(SByte*)\n  type: Constructor\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System\n  summary: Initializes a new instance of the <xref href=\"System.String\"></xref> class to the value indicated by a pointer to an array of 8-bit signed integers.\n  remarks: >-\n    > [!NOTE]\n\n    >  For examples and comprehensive usage information about this and other `String` constructor overloads, see the <xref:System.String.%23ctor%2A> constructor summary.\n  syntax:\n    content: >-\n      [System.CLSCompliant(false)]\n\n      [System.Security.SecurityCritical]\n\n      public String (sbyte* value);\n    parameters:\n    - id: value\n      type: System.SByte*\n      description: A pointer to a null-terminated array of 8-bit signed integers. The integers are interpreted using the current system code page encoding (that is, the encoding specified by <xref href=\"System.Text.Encoding.Default\"></xref>).\n  overload: System.String.#ctor*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>value</code> is `null`.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: A new instance of <xref href=\"System.String\"></xref> could not be initialized using <code>value</code>, assuming <code>value</code> is encoded in ANSI.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: The length of the new string to initialize, which is determined by the null termination character of <code>value</code>, is too large to allocate.\n  - type: System.AccessViolationException\n    commentId: T:System.AccessViolationException\n    description: <code>value</code> specifies an invalid address.\n  attributes:\n  - type: System.CLSCompliantAttribute\n  - type: System.Security.SecurityCriticalAttribute\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/String.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.String.#ctor(System.Char,System.Int32)\n  commentId: M:System.String.#ctor(System.Char,System.Int32)\n  id: '#ctor(System.Char,System.Int32)'\n  parent: System.String\n  langs:\n  - csharp\n  name: String(Char, Int32)\n  nameWithType: String.String(Char, Int32)\n  fullName: String.String(Char, Int32)\n  type: Constructor\n  assemblies:\n  - System.Runtime\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Initializes a new instance of the <xref href=\"System.String\"></xref> class to the value indicated by a specified Unicode character repeated a specified number of times.\n  remarks: >-\n    > [!NOTE]\n\n    >  For examples and comprehensive usage information about this and other `String` constructor overloads, see the <xref:System.String.%23ctor%2A> constructor summary.\n  syntax:\n    content: public String (char c, int count);\n    parameters:\n    - id: c\n      type: System.Char\n      description: A Unicode character.\n    - id: count\n      type: System.Int32\n      description: The number of times <code>c</code> occurs.\n  overload: System.String.#ctor*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>count</code> is less than zero.\n  attributes: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/String.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.String.#ctor(System.Char*,System.Int32,System.Int32)\n  commentId: M:System.String.#ctor(System.Char*,System.Int32,System.Int32)\n  id: '#ctor(System.Char*,System.Int32,System.Int32)'\n  parent: System.String\n  langs:\n  - csharp\n  name: String(Char*, Int32, Int32)\n  nameWithType: String.String(Char*, Int32, Int32)\n  fullName: String.String(Char*, Int32, Int32)\n  type: Constructor\n  assemblies:\n  - System.Runtime\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Initializes a new instance of the <xref href=\"System.String\"></xref> class to the value indicated by a specified pointer to an array of Unicode characters, a starting character position within that array, and a length.\n  remarks: >-\n    > [!NOTE]\n\n    >  For examples and comprehensive usage information about this and other `String` constructor overloads, see the <xref:System.String.%23ctor%2A> constructor summary.\n  syntax:\n    content: >-\n      [System.CLSCompliant(false)]\n\n      [System.Security.SecurityCritical]\n\n      public String (char* value, int startIndex, int length);\n    parameters:\n    - id: value\n      type: System.Char*\n      description: A pointer to an array of Unicode characters.\n    - id: startIndex\n      type: System.Int32\n      description: The starting position within <code>value</code>.\n    - id: length\n      type: System.Int32\n      description: The number of characters within <code>value</code> to use.\n  overload: System.String.#ctor*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>startIndex</code> or <code>length</code> is less than zero, <code>value</code> + <code>startIndex</code> cause a pointer overflow, or the current process does not have read access to all the addressed characters.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>value</code> specifies an array that contains an invalid Unicode character, or <code>value</code> + <code>startIndex</code> specifies an address less than 64000.\n  attributes:\n  - type: System.CLSCompliantAttribute\n  - type: System.Security.SecurityCriticalAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/String.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.String.#ctor(System.Char[],System.Int32,System.Int32)\n  commentId: M:System.String.#ctor(System.Char[],System.Int32,System.Int32)\n  id: '#ctor(System.Char[],System.Int32,System.Int32)'\n  parent: System.String\n  langs:\n  - csharp\n  name: String(Char[], Int32, Int32)\n  nameWithType: String.String(Char[], Int32, Int32)\n  fullName: String.String(Char[], Int32, Int32)\n  type: Constructor\n  assemblies:\n  - System.Runtime\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Initializes a new instance of the <xref href=\"System.String\"></xref> class to the value indicated by an array of Unicode characters, a starting character position within that array, and a length.\n  remarks: >-\n    > [!NOTE]\n\n    >  For examples and comprehensive usage information about this and other `String` constructor overloads, see the <xref:System.String.%23ctor%2A> constructor summary.\n  syntax:\n    content: public String (char[] value, int startIndex, int length);\n    parameters:\n    - id: value\n      type: System.Char[]\n      description: An array of Unicode characters.\n    - id: startIndex\n      type: System.Int32\n      description: The starting position within <code>value</code>.\n    - id: length\n      type: System.Int32\n      description: The number of characters within <code>value</code> to use.\n  overload: System.String.#ctor*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>value</code> is `null`.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"<code>startIndex</code> or <code>length</code> is less than zero.  \\n  \\n -or-  \\n  \\n The sum of <code>startIndex</code> and <code>length</code> is greater than the number of elements in <code>value</code>.\"\n  attributes: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/String.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.String.#ctor(System.SByte*,System.Int32,System.Int32)\n  commentId: M:System.String.#ctor(System.SByte*,System.Int32,System.Int32)\n  id: '#ctor(System.SByte*,System.Int32,System.Int32)'\n  parent: System.String\n  langs:\n  - csharp\n  name: String(SByte*, Int32, Int32)\n  nameWithType: String.String(SByte*, Int32, Int32)\n  fullName: String.String(SByte*, Int32, Int32)\n  type: Constructor\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System\n  summary: Initializes a new instance of the <xref href=\"System.String\"></xref> class to the value indicated by a specified pointer to an array of 8-bit signed integers, a starting position within that array, and a length.\n  remarks: >-\n    > [!NOTE]\n\n    >  For examples and comprehensive usage information about this and other `String` constructor overloads, see the <xref:System.String.%23ctor%2A> constructor summary.\n  syntax:\n    content: >-\n      [System.CLSCompliant(false)]\n\n      [System.Security.SecurityCritical]\n\n      public String (sbyte* value, int startIndex, int length);\n    parameters:\n    - id: value\n      type: System.SByte*\n      description: A pointer to an array of 8-bit signed integers. The integers are interpreted using the current system code page encoding (that is, the encoding specified by <xref href=\"System.Text.Encoding.Default\"></xref>).\n    - id: startIndex\n      type: System.Int32\n      description: The starting position within <code>value</code>.\n    - id: length\n      type: System.Int32\n      description: The number of characters within <code>value</code> to use.\n  overload: System.String.#ctor*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>value</code> is `null`.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"<code>startIndex</code> or <code>length</code> is less than zero.  \\n  \\n -or-  \\n  \\n The address specified by <code>value</code> + <code>startIndex</code> is too large for the current platform; that is, the address calculation overflowed.  \\n  \\n -or-  \\n  \\n The length of the new string to initialize is too large to allocate.\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"The address specified by <code>value</code> + <code>startIndex</code> is less than 64K.  \\n  \\n -or-  \\n  \\n A new instance of <xref href=\\\"System.String\\\"></xref> could not be initialized using <code>value</code>, assuming <code>value</code> is encoded in ANSI.\"\n  - type: System.AccessViolationException\n    commentId: T:System.AccessViolationException\n    description: <code>value</code>, <code>startIndex</code>, and <code>length</code> collectively specify an invalid address.\n  attributes:\n  - type: System.CLSCompliantAttribute\n  - type: System.Security.SecurityCriticalAttribute\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/String.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.String.#ctor(System.SByte*,System.Int32,System.Int32,System.Text.Encoding)\n  commentId: M:System.String.#ctor(System.SByte*,System.Int32,System.Int32,System.Text.Encoding)\n  id: '#ctor(System.SByte*,System.Int32,System.Int32,System.Text.Encoding)'\n  parent: System.String\n  langs:\n  - csharp\n  name: String(SByte*, Int32, Int32, Encoding)\n  nameWithType: String.String(SByte*, Int32, Int32, Encoding)\n  fullName: String.String(SByte*, Int32, Int32, Encoding)\n  type: Constructor\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System\n  summary: Initializes a new instance of the <xref href=\"System.String\"></xref> class to the value indicated by a specified pointer to an array of 8-bit signed integers, a starting position within that array, a length, and an <xref href=\"System.Text.Encoding\"></xref> object.\n  remarks: >-\n    > [!NOTE]\n\n    >  For examples and comprehensive usage information about this and other `String` constructor overloads, see the <xref:System.String.%23ctor%2A> constructor summary.\n  syntax:\n    content: >-\n      [System.CLSCompliant(false)]\n\n      [System.Security.SecurityCritical]\n\n      public String (sbyte* value, int startIndex, int length, System.Text.Encoding enc);\n    parameters:\n    - id: value\n      type: System.SByte*\n      description: A pointer to an array of 8-bit signed integers.\n    - id: startIndex\n      type: System.Int32\n      description: The starting position within <code>value</code>.\n    - id: length\n      type: System.Int32\n      description: The number of characters within <code>value</code> to use.\n    - id: enc\n      type: System.Text.Encoding\n      description: An object that specifies how the array referenced by <code>value</code> is encoded. If <code>enc</code> is `null`, ANSI encoding is assumed.\n  overload: System.String.#ctor*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>value</code> is `null`.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"<code>startIndex</code> or <code>length</code> is less than zero.  \\n  \\n -or-  \\n  \\n The address specified by <code>value</code> + <code>startIndex</code> is too large for the current platform; that is, the address calculation overflowed.  \\n  \\n -or-  \\n  \\n The length of the new string to initialize is too large to allocate.\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"The address specified by <code>value</code> + <code>startIndex</code> is less than 64K.  \\n  \\n -or-  \\n  \\n A new instance of <xref href=\\\"System.String\\\"></xref> could not be initialized using <code>value</code>, assuming <code>value</code> is encoded as specified by <code>enc</code>.\"\n  - type: System.AccessViolationException\n    commentId: T:System.AccessViolationException\n    description: <code>value</code>, <code>startIndex</code>, and <code>length</code> collectively specify an invalid address.\n  attributes:\n  - type: System.CLSCompliantAttribute\n  - type: System.Security.SecurityCriticalAttribute\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/String.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.String.Chars(System.Int32)\n  commentId: P:System.String.Chars(System.Int32)\n  id: Chars(System.Int32)\n  parent: System.String\n  langs:\n  - csharp\n  name: Chars(Int32)\n  nameWithType: String.Chars(Int32)\n  fullName: String.Chars(Int32)\n  type: Property\n  assemblies:\n  - System.Runtime\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Gets the <xref href=\"System.Char\"></xref> object at a specified position in the current <xref href=\"System.String\"></xref> object.\n  remarks: \"The `index` parameter is zero-based.  \\n  \\n This property returns the <xref:System.Char> object at the position specified by the `index` parameter. However, a Unicode character might be represented by more than one <xref:System.Char>. Use the <xref:System.Globalization.StringInfo?displayProperty=fullName> class to work with Unicode characters instead of <xref:System.Char> objects. For more information, see the \\\"Char Objects and Unicode Characters\\\" section in the <xref:System.String> class overview.  \\n  \\n In C#, the <xref:System.String.Chars%2A> property is an indexer. In Visual Basic, it is the default property of the <xref:System.String> class. Each <xref:System.Char> object in the string can be accessed by using code such as the following.  \\n  \\n [!code-csharp[System.String.Chars#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.chars/cs/chars1.cs#1)]\\n [!code-vb[System.String.Chars#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.string.chars/vb/chars1.vb#1)]\"\n  example:\n  - \"The following example demonstrates how you can use this indexer in a routine to validate a string.  \\n  \\n [!code-cpp[Uri_IsHexDigit#1](~/samples/snippets/cpp/VS_Snippets_CLR/Uri_IsHexDigit/CPP/uri_ishexdigit.cpp#1)]\\n [!code-csharp[Uri_IsHexDigit#1](~/samples/snippets/csharp/VS_Snippets_CLR/Uri_IsHexDigit/CS/uri_ishexdigit.cs#1)]\\n [!code-vb[Uri_IsHexDigit#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Uri_IsHexDigit/VB/uri_ishexdigit.vb#1)]\"\n  syntax:\n    content: public char this[int index] { get; }\n    parameters:\n    - id: index\n      type: System.Int32\n      description: A position in the current string.\n    return:\n      type: System.Char\n      description: The object at position <code>index</code>.\n  overload: System.String.Chars*\n  exceptions:\n  - type: System.IndexOutOfRangeException\n    commentId: T:System.IndexOutOfRangeException\n    description: <code>index</code> is greater than or equal to the length of this object or less than zero.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/String.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.String.Clone\n  commentId: M:System.String.Clone\n  id: Clone\n  parent: System.String\n  langs:\n  - csharp\n  name: Clone()\n  nameWithType: String.Clone()\n  fullName: String.Clone()\n  type: Method\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System\n  summary: Returns a reference to this instance of <xref href=\"System.String\"></xref>.\n  remarks: \"The return value is not an independent copy of this instance; it is simply another view of the same data. Use the <xref:System.String.Copy%2A> or <xref:System.String.CopyTo%2A> method to create a separate <xref:System.String> object with the same value as this instance.  \\n  \\n Because the <xref:System.String.Clone%2A> method simply returns the existing string instance, there is little reason to call it directly.\"\n  syntax:\n    content: public object Clone ();\n    parameters: []\n    return:\n      type: System.Object\n      description: This instance of <xref href=\"System.String\"></xref>.\n  overload: System.String.Clone*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/String.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.Boolean,System.Globalization.CultureInfo)\n  commentId: M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.Boolean,System.Globalization.CultureInfo)\n  id: Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.Boolean,System.Globalization.CultureInfo)\n  parent: System.String\n  langs:\n  - csharp\n  name: Compare(String, Int32, String, Int32, Int32, Boolean, CultureInfo)\n  nameWithType: String.Compare(String, Int32, String, Int32, Int32, Boolean, CultureInfo)\n  fullName: String.Compare(String, Int32, String, Int32, Int32, Boolean, CultureInfo)\n  type: Method\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System\n  summary: Compares substrings of two specified <xref href=\"System.String\"></xref> objects, ignoring or honoring their case and using culture-specific information to influence the comparison, and returns an integer that indicates their relative position in the sort order.\n  remarks: \"The substrings to compare start in `strA` at `indexA`, and in `strB` at `indexB`. Both `indexA` and `indexB` are zero-based; that is, the first character in `strA` and `strB` is at position zero, not position one. The length of the first substring is equal to the length of `strA` minus `indexA` plus one. The length of the second substring is equal to the length of `strB` minus `indexB` plus one.  \\n  \\n The number of characters to compare is the lesser of the lengths of the two substrings, and `length`. The `indexA`, `indexB`, and `length` parameters must be nonnegative.  \\n  \\n The comparison uses the `culture` parameter to obtain culture-specific information such as casing rules and the alphabetic order of individual characters. For example, a culture could specify that certain combinations of characters be treated as a single character, or uppercase and lowercase characters be compared in a particular way, or that the sorting order of a character depends on the characters that precede or follow it.  \\n  \\n The comparison is performed using word sort rules. For more information about word, string, and ordinal sorts, see <xref:System.Globalization.CompareOptions?displayProperty=fullName>.  \\n  \\n One or both comparands can be `null`. By definition, any string, including the empty string (\\\"\\\"), compares greater than a null reference; and two null references compare equal to each other.  \\n  \\n The comparison terminates when an inequality is discovered or both substrings have been compared. However, if the two strings compare equal to the end of one string, and the other string has characters remaining, then the string with remaining characters is considered greater. The return value is the result of the last comparison performed.  \\n  \\n Unexpected results can occur when comparisons are affected by culture-specific casing rules. For example, in Turkish, the following example yields the wrong results because the file system in Turkish does not use linguistic casing rules for the letter \\\"i\\\" in \\\"file\\\".  \\n  \\n [!code-cpp[System.String.Compare#6](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Compare/cpp/remarks.cpp#6)]\\n [!code-csharp[System.String.Compare#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Compare/cs/remarks.cs#6)]\\n [!code-vb[System.String.Compare#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Compare/vb/remarks.vb#6)]  \\n  \\n Compare the path name to \\\"file\\\" using an ordinal comparison. The correct code to do this is as follows:  \\n  \\n [!code-cpp[System.String.Compare#7](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Compare/cpp/remarks.cpp#7)]\\n [!code-csharp[System.String.Compare#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Compare/cs/remarks.cs#7)]\\n [!code-vb[System.String.Compare#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Compare/vb/remarks.vb#7)]\"\n  example:\n  - \"The following example compares two substrings using different cultures and ignoring the case of the substrings. The choice of culture affects how the letter \\\"I\\\" is compared.  \\n  \\n [!code-cpp[string.compare5#1](~/samples/snippets/cpp/VS_Snippets_CLR/string.compare5/CPP/comp5.cpp#1)]\\n [!code-csharp[string.compare5#1](~/samples/snippets/csharp/VS_Snippets_CLR/string.compare5/CS/comp5.cs#1)]\\n [!code-vb[string.compare5#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/string.compare5/VB/comp5.vb#1)]\"\n  syntax:\n    content: public static int Compare (string strA, int indexA, string strB, int indexB, int length, bool ignoreCase, System.Globalization.CultureInfo culture);\n    parameters:\n    - id: strA\n      type: System.String\n      description: The first string to use in the comparison.\n    - id: indexA\n      type: System.Int32\n      description: The position of the substring within <code>strA</code>.\n    - id: strB\n      type: System.String\n      description: The second string to use in the comparison.\n    - id: indexB\n      type: System.Int32\n      description: The position of the substring within <code>strB</code>.\n    - id: length\n      type: System.Int32\n      description: The maximum number of characters in the substrings to compare.\n    - id: ignoreCase\n      type: System.Boolean\n      description: '`true` to ignore case during the comparison; otherwise, `false`.'\n    - id: culture\n      type: System.Globalization.CultureInfo\n      description: An object that supplies culture-specific comparison information.\n    return:\n      type: System.Int32\n      description: \"An integer that indicates the lexical relationship between the two comparands.  \\n  \\n <table><thead><tr><th> Value  \\n  \\n </th><th> Condition  \\n  \\n </th></tr></thead><tbody><tr><td> Less than zero  \\n  \\n </td><td> The substring in <code>strA</code> precedes the substring in <code>strB</code> in the sort order.  \\n  \\n </td></tr><tr><td> Zero  \\n  \\n </td><td> The substrings occur in the same position in the sort order, or <code>length</code> is zero.  \\n  \\n </td></tr><tr><td> Greater than zero  \\n  \\n </td><td> The substring in <code>strA</code> follows the substring in <code>strB</code> in the sort order.  \\n  \\n </td></tr></tbody></table>\"\n  overload: System.String.Compare*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"<code>indexA</code> is greater than <code>strA</code>.<xref href=\\\"System.String.Length\\\"></xref>.  \\n  \\n -or-  \\n  \\n <code>indexB</code> is greater than <code>strB</code>.<xref href=\\\"System.String.Length\\\"></xref>.  \\n  \\n -or-  \\n  \\n <code>indexA</code>, <code>indexB</code>, or <code>length</code> is negative.  \\n  \\n -or-  \\n  \\n Either <code>strA</code> or <code>strB</code> is `null`, and <code>length</code> is greater than zero.\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>culture</code> is `null`.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/String.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.StringComparison)\n  commentId: M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.StringComparison)\n  id: Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.StringComparison)\n  parent: System.String\n  langs:\n  - csharp\n  name: Compare(String, Int32, String, Int32, Int32, StringComparison)\n  nameWithType: String.Compare(String, Int32, String, Int32, Int32, StringComparison)\n  fullName: String.Compare(String, Int32, String, Int32, Int32, StringComparison)\n  type: Method\n  assemblies:\n  - System.Runtime\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Compares substrings of two specified <xref href=\"System.String\"></xref> objects using the specified rules, and returns an integer that indicates their relative position in the sort order.\n  remarks: \"The substrings to compare start in `strA` at `indexA` and in `strB` at `indexB`. Both `indexA` and `indexB` are zero-based; that is, the first character in `strA` and `strB` is at position zero, not position one. The length of the first substring is equal to the length of `strA` minus `indexA` plus one. The length of the second substring is equal to the length of `strB` minus `indexB` plus one.  \\n  \\n The number of characters to compare is the lesser of the lengths of the two substrings, and `length`. The `indexA`, `indexB`, and `length` parameters must be nonnegative.  \\n  \\n The `comparisonType` parameter indicates whether the comparison should use the current or invariant culture, honor or ignore the case of the comparands, or use word (culture-sensitive) or ordinal (culture-insensitive) sort rules.  \\n  \\n One or both comparands can be `null`. By definition, any string, including the empty string (\\\"\\\"), compares greater than a null reference; and two null references compare equal to each other.  \\n  \\n The comparison terminates when an inequality is discovered or both substrings have been compared. However, if the two strings compare equal to the end of one string, and the other string has characters remaining, the string with remaining characters is considered greater. The return value is the result of the last comparison performed.  \\n  \\n Unexpected results can occur when comparisons are affected by culture-specific casing rules. For example, in Turkish, the following example yields the wrong results because the file system in Turkish does not use linguistic casing rules for the letter \\\"i\\\" in \\\"file\\\".  \\n  \\n [!code-cpp[System.String.Compare#8](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Compare/cpp/remarks.cpp#8)]\\n [!code-csharp[System.String.Compare#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Compare/cs/remarks.cs#8)]\\n [!code-vb[System.String.Compare#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Compare/vb/remarks.vb#8)]  \\n  \\n Compare the path name to \\\"file\\\" using an ordinal comparison. The correct code to do this is as follows:  \\n  \\n [!code-cpp[System.String.Compare#9](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Compare/cpp/remarks.cpp#9)]\\n [!code-csharp[System.String.Compare#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Compare/cs/remarks.cs#9)]\\n [!code-vb[System.String.Compare#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Compare/vb/remarks.vb#9)]\"\n  example:\n  - \"The following example compares two substrings.  \\n  \\n [!code-cpp[string.compare3#1](~/samples/snippets/cpp/VS_Snippets_CLR/string.compare3/CPP/comp3.cpp#1)]\\n [!code-csharp[string.compare3#1](~/samples/snippets/csharp/VS_Snippets_CLR/string.compare3/CS/comp3.cs#1)]\\n [!code-vb[string.compare3#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/string.compare3/VB/comp3.vb#1)]\"\n  syntax:\n    content: public static int Compare (string strA, int indexA, string strB, int indexB, int length, StringComparison comparisonType);\n    parameters:\n    - id: strA\n      type: System.String\n      description: The first string to use in the comparison.\n    - id: indexA\n      type: System.Int32\n      description: The position of the substring within <code>strA</code>.\n    - id: strB\n      type: System.String\n      description: The second string to use in the comparison.\n    - id: indexB\n      type: System.Int32\n      description: The position of the substring within <code>strB</code>.\n    - id: length\n      type: System.Int32\n      description: The maximum number of characters in the substrings to compare.\n    - id: comparisonType\n      type: System.StringComparison\n      description: One of the enumeration values that specifies the rules to use in the comparison.\n    return:\n      type: System.Int32\n      description: \"A 32-bit signed integer that indicates the lexical relationship between the two comparands.  \\n  \\n <table><thead><tr><th> Value  \\n  \\n </th><th> Condition  \\n  \\n </th></tr></thead><tbody><tr><td> Less than zero  \\n  \\n </td><td> The substring in <code>strA</code> precedes the substring in <code>strB</code> in the sort order.  \\n  \\n </td></tr><tr><td> Zero  \\n  \\n </td><td> The substrings occur in the same position in the sort order, or the <code>length</code> parameter is zero.  \\n  \\n </td></tr><tr><td> Greater than zero  \\n  \\n </td><td> The substring in <code>strA</code> follllows the substring in <code>strB</code> in the sort order.  \\n  \\n </td></tr></tbody></table>\"\n  overload: System.String.Compare*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"<code>indexA</code> is greater than <code>strA</code>.<xref href=\\\"System.String.Length\\\"></xref>.  \\n  \\n -or-  \\n  \\n <code>indexB</code> is greater than <code>strB</code>.<xref href=\\\"System.String.Length\\\"></xref>.  \\n  \\n -or-  \\n  \\n <code>indexA</code>, <code>indexB</code>, or <code>length</code> is negative.  \\n  \\n -or-  \\n  \\n Either <code>indexA</code> or <code>indexB</code> is `null`, and <code>length</code> is greater than zero.\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>comparisonType</code> is not a <xref href=\"System.StringComparison\"></xref> value.\n  attributes: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/String.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.Boolean)\n  commentId: M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.Boolean)\n  id: Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.Boolean)\n  parent: System.String\n  langs:\n  - csharp\n  name: Compare(String, Int32, String, Int32, Int32, Boolean)\n  nameWithType: String.Compare(String, Int32, String, Int32, Int32, Boolean)\n  fullName: String.Compare(String, Int32, String, Int32, Int32, Boolean)\n  type: Method\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System\n  summary: Compares substrings of two specified <xref href=\"System.String\"></xref> objects, ignoring or honoring their case, and returns an integer that indicates their relative position in the sort order.\n  remarks: \"The substrings to compare start in `strA` at `indexA`, and in `strB` at `indexB`. Both `indexA` and `indexB` are zero-based; that is, the first character in `strA` and `strB` is at position zero. The length of the first substring is equal to the length of `strA` minus `indexA` plus one. The length of the second substring is equal to the length of `strB` minus `indexB` plus one.  \\n  \\n The number of characters to compare is the lesser of the lengths of the two substrings, and `length`. The `indexA`, `indexB`, and `length` parameters must be nonnegative.  \\n  \\n The comparison uses the current culture to obtain culture-specific information such as casing rules and the alphabetic order of individual characters. For example, a culture could specify that certain combinations of characters be treated as a single character, or uppercase and lowercase characters be compared in a particular way, or that the sorting order of a character depends on the characters that precede or follow it.  \\n  \\n The comparison is performed using word sort rules. For more information about word, string, and ordinal sorts, see <xref:System.Globalization.CompareOptions?displayProperty=fullName>.  \\n  \\n> [!WARNING]\\n>  When comparing strings, you should call the <xref:System.String.Compare%28System.String%2CSystem.Int32%2CSystem.String%2CSystem.Int32%2CSystem.Int32%2CSystem.StringComparison%29> method, which requires that you explicitly specify the type of string comparison that the method uses. For more information, see [Best Practices for Using Strings](~/docs/standard/base-types/best-practices-strings.md).  \\n  \\n One or both comparands can be `null`. By definition, any string, including the empty string (\\\"\\\"), compares greater than a null reference; and two null references compare equal to each other.  \\n  \\n The comparison terminates when an inequality is discovered or both substrings have been compared. However, if the two strings compare equal to the end of one string, and the other string has characters remaining, then the string with remaining characters is considered greater. The return value is the result of the last comparison performed.  \\n  \\n Unexpected results can occur when comparisons are affected by culture-specific casing rules. For example, in Turkish, the following example yields the wrong results because the file system in Turkish does not use linguistic casing rules for the letter \\\"i\\\" in \\\"file\\\".  \\n  \\n [!code-cpp[System.String.Compare#4](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Compare/cpp/remarks.cpp#4)]\\n [!code-csharp[System.String.Compare#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Compare/cs/remarks.cs#4)]\\n [!code-vb[System.String.Compare#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Compare/vb/remarks.vb#4)]  \\n  \\n The path name needs to be compared in an invariant manner. The correct code to do this is as follows.  \\n  \\n [!code-cpp[System.String.Compare#5](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Compare/cpp/remarks.cpp#5)]\\n [!code-csharp[System.String.Compare#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Compare/cs/remarks.cs#5)]\\n [!code-vb[System.String.Compare#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Compare/vb/remarks.vb#5)]\"\n  example:\n  - \"The following example performs two comparisons of two substrings that only differ in case. The first comparison ignores case and the second comparison considers case.  \\n  \\n [!code-cpp[string.compare4#1](~/samples/snippets/cpp/VS_Snippets_CLR/string.compare4/CPP/comp4.cpp#1)]\\n [!code-csharp[string.compare4#1](~/samples/snippets/csharp/VS_Snippets_CLR/string.compare4/CS/comp4.cs#1)]\\n [!code-vb[string.compare4#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/string.compare4/VB/comp4.vb#1)]\"\n  syntax:\n    content: public static int Compare (string strA, int indexA, string strB, int indexB, int length, bool ignoreCase);\n    parameters:\n    - id: strA\n      type: System.String\n      description: The first string to use in the comparison.\n    - id: indexA\n      type: System.Int32\n      description: The position of the substring within <code>strA</code>.\n    - id: strB\n      type: System.String\n      description: The second string to use in the comparison.\n    - id: indexB\n      type: System.Int32\n      description: The position of the substring within <code>strB</code>.\n    - id: length\n      type: System.Int32\n      description: The maximum number of characters in the substrings to compare.\n    - id: ignoreCase\n      type: System.Boolean\n      description: '`true` to ignore case during the comparison; otherwise, `false`.'\n    return:\n      type: System.Int32\n      description: \"A 32-bit signed integer that indicates the lexical relationship between the two comparands.  \\n  \\n <table><thead><tr><th> Value  \\n  \\n </th><th> Condition  \\n  \\n </th></tr></thead><tbody><tr><td> Less than zero  \\n  \\n </td><td> The substring in <code>strA</code> precedes the substring in <code>strB</code> in the sort order.  \\n  \\n </td></tr><tr><td> Zero  \\n  \\n </td><td> The substrings occur in the same position in the sort order, or <code>length</code> is zero.  \\n  \\n </td></tr><tr><td> Greater than zero  \\n  \\n </td><td> The substring in <code>strA</code> follows the substring in <code>strB</code> in the sort order.  \\n  \\n </td></tr></tbody></table>\"\n  overload: System.String.Compare*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"<code>indexA</code> is greater than <code>strA</code>.<xref href=\\\"System.String.Length\\\"></xref>.  \\n  \\n -or-  \\n  \\n <code>indexB</code> is greater than <code>strB</code>.<xref href=\\\"System.String.Length\\\"></xref>.  \\n  \\n -or-  \\n  \\n <code>indexA</code>, <code>indexB</code>, or <code>length</code> is negative.  \\n  \\n -or-  \\n  \\n Either <code>indexA</code> or <code>indexB</code> is `null`, and <code>length</code> is greater than zero.\"\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/String.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32)\n  commentId: M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32)\n  id: Compare(System.String,System.Int32,System.String,System.Int32,System.Int32)\n  parent: System.String\n  langs:\n  - csharp\n  name: Compare(String, Int32, String, Int32, Int32)\n  nameWithType: String.Compare(String, Int32, String, Int32, Int32)\n  fullName: String.Compare(String, Int32, String, Int32, Int32)\n  type: Method\n  assemblies:\n  - System.Runtime\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Compares substrings of two specified <xref href=\"System.String\"></xref> objects and returns an integer that indicates their relative position in the sort order.\n  remarks: \"The substrings to compare start in `strA` at `indexA` and in `strB` at `indexB`. Both `indexA` and `indexB` are zero-based; that is, the first character in `strA` and `strB` is at position zero. The length of the first substring is equal to the length of `strA` minus `indexA` plus one. The length of the second substring is equal to the length of `strB` minus `indexB` plus one.  \\n  \\n The number of characters to compare is the lesser of the lengths of the two substrings, and `length`. The `indexA`, `indexB`, and `length` parameters must be nonnegative.  \\n  \\n The comparison uses the current culture to obtain culture-specific information such as casing rules and the alphabetic order of individual characters. For example, a culture could specify that certain combinations of characters be treated as a single character, or uppercase and lowercase characters be compared in a particular way, or that the sorting order of a character depends on the characters that precede or follow it.  \\n  \\n The comparison is performed using word sort rules. For more information about word, string, and ordinal sorts, see <xref:System.Globalization.CompareOptions?displayProperty=fullName>.  \\n  \\n> [!WARNING]\\n>  When comparing strings, you should call the <xref:System.String.Compare%28System.String%2CSystem.Int32%2CSystem.String%2CSystem.Int32%2CSystem.Int32%2CSystem.StringComparison%29> method, which requires that you explicitly specify the type of string comparison that the method uses. For more information, see [Best Practices for Using Strings](~/docs/standard/base-types/best-practices-strings.md).  \\n  \\n One or both comparands can be `null`. By definition, any string, including the empty string (\\\"\\\"), compares greater than a null reference; and two null references compare equal to each other.  \\n  \\n The comparison terminates when an inequality is discovered or both substrings have been compared. However, if the two strings compare equal to the end of one string, and the other string has characters remaining, then the string with remaining characters is considered greater. The return value is the result of the last comparison performed.  \\n  \\n Unexpected results can occur when comparisons are affected by culture-specific casing rules. For example, in Turkish, the following example yields the wrong results because the file system in Turkish does not use linguistic casing rules for the letter \\\"i\\\" in \\\"file\\\".  \\n  \\n [!code-cpp[System.String.Compare#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Compare/cpp/remarks.cpp#2)]\\n [!code-csharp[System.String.Compare#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Compare/cs/remarks.cs#2)]\\n [!code-vb[System.String.Compare#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Compare/vb/remarks.vb#2)]  \\n  \\n Compare the path name to \\\"file\\\" using an ordinal comparison. The correct code to do this is as follows:  \\n  \\n [!code-cpp[System.String.Compare#3](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Compare/cpp/remarks.cpp#3)]\\n [!code-csharp[System.String.Compare#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Compare/cs/remarks.cs#3)]\\n [!code-vb[System.String.Compare#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Compare/vb/remarks.vb#3)]\"\n  example:\n  - \"The following example compares two substrings.  \\n  \\n [!code-cpp[string.compare3#1](~/samples/snippets/cpp/VS_Snippets_CLR/string.compare3/CPP/comp3.cpp#1)]\\n [!code-csharp[string.compare3#1](~/samples/snippets/csharp/VS_Snippets_CLR/string.compare3/CS/comp3.cs#1)]\\n [!code-vb[string.compare3#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/string.compare3/VB/comp3.vb#1)]\"\n  syntax:\n    content: public static int Compare (string strA, int indexA, string strB, int indexB, int length);\n    parameters:\n    - id: strA\n      type: System.String\n      description: The first string to use in the comparison.\n    - id: indexA\n      type: System.Int32\n      description: The position of the substring within <code>strA</code>.\n    - id: strB\n      type: System.String\n      description: The second string to use in the comparison.\n    - id: indexB\n      type: System.Int32\n      description: The position of the substring within <code>strB</code>.\n    - id: length\n      type: System.Int32\n      description: The maximum number of characters in the substrings to compare.\n    return:\n      type: System.Int32\n      description: \"A 32-bit signed integer indicating the lexical relationship between the two comparands.  \\n  \\n <table><thead><tr><th> Value  \\n  \\n </th><th> Condition  \\n  \\n </th></tr></thead><tbody><tr><td> Less than zero  \\n  \\n </td><td> The substring in <code>strA</code> precedes the substring in <code>strB</code> in the sort order.  \\n  \\n </td></tr><tr><td> Zero  \\n  \\n </td><td> The substrings occur in the same position in the sort order, or <code>length</code> is zero.  \\n  \\n </td></tr><tr><td> Greater than zero  \\n  \\n </td><td> The substring in <code>strA</code> follows the substring in <code>strB</code> in the sort order.  \\n  \\n </td></tr></tbody></table>\"\n  overload: System.String.Compare*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"<code>indexA</code> is greater than <code>strA</code>.<xref href=\\\"System.String.Length\\\"></xref>.  \\n  \\n -or-  \\n  \\n <code>indexB</code> is greater than <code>strB</code>.<xref href=\\\"System.String.Length\\\"></xref>.  \\n  \\n -or-  \\n  \\n <code>indexA</code>, <code>indexB</code>, or <code>length</code> is negative.  \\n  \\n -or-  \\n  \\n Either <code>indexA</code> or <code>indexB</code> is `null`, and <code>length</code> is greater than zero.\"\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/String.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.String.Compare(System.String,System.String)\n  commentId: M:System.String.Compare(System.String,System.String)\n  id: Compare(System.String,System.String)\n  parent: System.String\n  langs:\n  - csharp\n  name: Compare(String, String)\n  nameWithType: String.Compare(String, String)\n  fullName: String.Compare(String, String)\n  type: Method\n  assemblies:\n  - System.Runtime\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Compares two specified <xref href=\"System.String\"></xref> objects and returns an integer that indicates their relative position in the sort order.\n  remarks: \"The comparison uses the current culture to obtain culture-specific information such as casing rules and the alphabetic order of individual characters. For example, a culture could specify that certain combinations of characters be treated as a single character, or uppercase and lowercase characters be compared in a particular way, or that the sorting order of a character depends on the characters that precede or follow it.  \\n  \\n The comparison is performed using word sort rules. For more information about word, string, and ordinal sorts, see <xref:System.Globalization.CompareOptions?displayProperty=fullName>.  \\n  \\n> [!WARNING]\\n>  When comparing strings, you should call the<xref:System.String.Compare%28System.String%2CSystem.String%2CSystem.StringComparison%29> method, which requires that you explicitly specify the type of string comparison that the method uses. For more information, see [Best Practices for Using Strings](~/docs/standard/base-types/best-practices-strings.md).  \\n  \\n One or both comparands can be `null`. By definition, any string, including the empty string (\\\"\\\"), compares greater than a null reference; and two null references compare equal to each other.  \\n  \\n The comparison terminates when an inequality is discovered or both strings have been compared. However, if the two strings compare equal to the end of one string, and the other string has characters remaining, then the string with remaining characters is considered greater. The return value is the result of the last comparison performed.  \\n  \\n Unexpected results can occur when comparisons are affected by culture-specific casing rules. For example, in Turkish, the following example yields the wrong results because the file system in Turkish does not use linguistic casing rules for the letter \\\"i\\\" in \\\"file\\\".  \\n  \\n [!code-cpp[System.String.Compare#10](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Compare/cpp/remarks.cpp#10)]\\n [!code-csharp[System.String.Compare#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Compare/cs/remarks.cs#10)]\\n [!code-vb[System.String.Compare#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Compare/vb/remarks.vb#10)]  \\n  \\n Compare the path name to \\\"file\\\" using an ordinal comparison. The correct code to do this is as follows:  \\n  \\n [!code-cpp[System.String.Compare#11](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Compare/cpp/remarks.cpp#11)]\\n [!code-csharp[System.String.Compare#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Compare/cs/remarks.cs#11)]\\n [!code-vb[System.String.Compare#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Compare/vb/remarks.vb#11)]\"\n  example:\n  - \"The following example calls the <xref:System.String.Compare%28System.String%2CSystem.String%29> method to compare three sets of strings.  \\n  \\n [!code-cpp[System.String.Compare#18](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Compare/cpp/compare02.cpp#18)]\\n [!code-csharp[System.String.Compare#18](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Compare/cs/compare02.cs#18)]\\n [!code-vb[System.String.Compare#18](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Compare/vb/compare02.vb#18)]  \\n  \\n In the following example, the `ReverseStringComparer` class demonstrates how you can evaluate two strings with the <xref:System.String.Compare%2A> method.  \\n  \\n [!code-cpp[ArrayList#7](~/samples/snippets/cpp/VS_Snippets_CLR/ArrayList/CPP/ArrayListSample.cpp#7)]\\n [!code-csharp[ArrayList#7](~/samples/snippets/csharp/VS_Snippets_CLR/ArrayList/CS/ArrayListSample.cs#7)]\\n [!code-vb[ArrayList#7](~/samples/snippets/visualbasic/VS_Snippets_CLR/ArrayList/VB/ArrayListSample.vb#7)]\"\n  syntax:\n    content: public static int Compare (string strA, string strB);\n    parameters:\n    - id: strA\n      type: System.String\n      description: The first string to compare.\n    - id: strB\n      type: System.String\n      description: The second string to compare.\n    return:\n      type: System.Int32\n      description: \"A 32-bit signed integer that indicates the lexical relationship between the two comparands.  \\n  \\n <table><thead><tr><th> Value  \\n  \\n </th><th> Condition  \\n  \\n </th></tr></thead><tbody><tr><td> Less than zero  \\n  \\n </td><td><code>strA</code> precedes <code>strB</code> in the sort order.  \\n  \\n </td></tr><tr><td> Zero  \\n  \\n </td><td><code>strA</code> occurs in the same position as <code>strB</code> in the sort order.  \\n  \\n </td></tr><tr><td> Greater than zero  \\n  \\n </td><td><code>strA</code> follows <code>strB</code> in the sort order.  \\n  \\n </td></tr></tbody></table>\"\n  overload: System.String.Compare*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/String.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.String.Compare(System.String,System.String,System.Boolean,System.Globalization.CultureInfo)\n  commentId: M:System.String.Compare(System.String,System.String,System.Boolean,System.Globalization.CultureInfo)\n  id: Compare(System.String,System.String,System.Boolean,System.Globalization.CultureInfo)\n  parent: System.String\n  langs:\n  - csharp\n  name: Compare(String, String, Boolean, CultureInfo)\n  nameWithType: String.Compare(String, String, Boolean, CultureInfo)\n  fullName: String.Compare(String, String, Boolean, CultureInfo)\n  type: Method\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System\n  summary: Compares two specified <xref href=\"System.String\"></xref> objects, ignoring or honoring their case, and using culture-specific information to influence the comparison, and returns an integer that indicates their relative position in the sort order.\n  remarks: \"The comparison uses the `culture` parameter to obtain culture-specific information such as casing rules and the alphabetic order of individual characters. For example, a culture could specify that certain combinations of characters be treated as a single character, or uppercase and lowercase characters be compared in a particular way, or that the sorting order of a character depends on the characters that precede or follow it.  \\n  \\n The comparison is performed using word sort rules. For more information about word, string, and ordinal sorts, see <xref:System.Globalization.CompareOptions?displayProperty=fullName>.  \\n  \\n One or both comparands can be `null`. By definition, any string, including the empty string (\\\"\\\"), compares greater than a null reference; and two null references compare equal to each other.  \\n  \\n The comparison terminates when an inequality is discovered or both strings have been compared. However, if the two strings compare equal to the end of one string, and the other string has characters remaining, then the string with remaining characters is considered greater. The return value is the result of the last comparison performed.  \\n  \\n Unexpected results can occur when comparisons are affected by culture-specific casing rules. For example, in Turkish, the following example yields the wrong results because the file system in Turkish does not use linguistic casing rules for the letter \\\"i\\\" in \\\"file\\\".  \\n  \\n [!code-cpp[System.String.Compare#14](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Compare/cpp/remarks.cpp#14)]\\n [!code-csharp[System.String.Compare#14](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Compare/cs/remarks.cs#14)]\\n [!code-vb[System.String.Compare#14](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Compare/vb/remarks.vb#14)]  \\n  \\n Compare the path name to \\\"file\\\" using an ordinal comparison. The correct code to do this is as follows:  \\n  \\n [!code-cpp[System.String.Compare#15](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Compare/cpp/remarks.cpp#15)]\\n [!code-csharp[System.String.Compare#15](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Compare/cs/remarks.cs#15)]\\n [!code-vb[System.String.Compare#15](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Compare/vb/remarks.vb#15)]\"\n  example:\n  - \"The following example demonstrates how culture can affect a comparison. In Czech - Czech Republic culture, \\\"ch\\\" is a single character that is greater than \\\"d\\\". However, in English - United States culture, \\\"ch\\\" consists of two characters, and \\\"c\\\" is less than \\\"d\\\".  \\n  \\n [!code-cpp[string.comp4#1](~/samples/snippets/cpp/VS_Snippets_CLR/string.comp4/CPP/string.comp4.cpp#1)]\\n [!code-csharp[string.comp4#1](~/samples/snippets/csharp/VS_Snippets_CLR/string.comp4/CS/string.comp4.cs#1)]\\n [!code-vb[string.comp4#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/string.comp4/VB/string.comp4.vb#1)]\"\n  syntax:\n    content: public static int Compare (string strA, string strB, bool ignoreCase, System.Globalization.CultureInfo culture);\n    parameters:\n    - id: strA\n      type: System.String\n      description: The first string to compare.\n    - id: strB\n      type: System.String\n      description: The second string to compare.\n    - id: ignoreCase\n      type: System.Boolean\n      description: '`true` to ignore case during the comparison; otherwise, `false`.'\n    - id: culture\n      type: System.Globalization.CultureInfo\n      description: An object that supplies culture-specific comparison information.\n    return:\n      type: System.Int32\n      description: \"A 32-bit signed integer that indicates the lexical relationship between the two comparands.  \\n  \\n <table><thead><tr><th> Value  \\n  \\n </th><th> Condition  \\n  \\n </th></tr></thead><tbody><tr><td> Less than zero  \\n  \\n </td><td><code>strA</code> precedes <code>strB</code> in the sort order.  \\n  \\n </td></tr><tr><td> Zero  \\n  \\n </td><td><code>strA</code> occurs in the same position as <code>strB</code> in the sort order.  \\n  \\n </td></tr><tr><td> Greater than zero  \\n  \\n </td><td><code>strA</code> follows <code>strB</code> in the sort order.  \\n  \\n </td></tr></tbody></table>\"\n  overload: System.String.Compare*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>culture</code> is `null`.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/String.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.String.Compare(System.String,System.String,System.StringComparison)\n  commentId: M:System.String.Compare(System.String,System.String,System.StringComparison)\n  id: Compare(System.String,System.String,System.StringComparison)\n  parent: System.String\n  langs:\n  - csharp\n  name: Compare(String, String, StringComparison)\n  nameWithType: String.Compare(String, String, StringComparison)\n  fullName: String.Compare(String, String, StringComparison)\n  type: Method\n  assemblies:\n  - System.Runtime\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Compares two specified <xref href=\"System.String\"></xref> objects using the specified rules, and returns an integer that indicates their relative position in the sort order.\n  remarks: \"The `comparisonType` parameter indicates whether the comparison should use the current or invariant culture, honor or ignore the case of the comparands, or use word (culture-sensitive) or ordinal (culture-insensitive) sort rules.  \\n  \\n One or both comparands can be `null`. By definition, any string, including the empty string (\\\"\\\"), compares greater than a null reference; and two null references compare equal to each other.  \\n  \\n The comparison terminates when an inequality is discovered or both strings have been compared. However, if the two strings compare equal to the end of one string, and the other string has characters remaining, the string with remaining characters is considered greater. The return value is the result of the last comparison performed.  \\n  \\n Unexpected results can occur when comparisons are affected by culture-specific casing rules. For example, in Turkish, the following example yields the wrong results because the file system in Turkish does not use linguistic casing rules for the letter \\\"i\\\" in \\\"file\\\".  \\n  \\n [!code-cpp[System.String.Compare#16](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Compare/cpp/remarks.cpp#16)]\\n [!code-csharp[System.String.Compare#16](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Compare/cs/remarks.cs#16)]\\n [!code-vb[System.String.Compare#16](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Compare/vb/remarks.vb#16)]  \\n  \\n Compare the path name to \\\"file\\\" using an ordinal comparison. The correct code to do this is as follows:  \\n  \\n [!code-cpp[System.String.Compare#17](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Compare/cpp/remarks.cpp#17)]\\n [!code-csharp[System.String.Compare#17](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Compare/cs/remarks.cs#17)]\\n [!code-vb[System.String.Compare#17](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Compare/vb/remarks.vb#17)]\"\n  example:\n  - \"The following example compares three versions of the letter \\\"I\\\". The results are affected by the choice of culture, whether case is ignored, and whether an ordinal comparison is performed.  \\n  \\n [!code-cpp[System.String.CompareCmp#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.CompareCmp/cpp/cmpcmp.cpp#1)]\\n [!code-csharp[System.String.CompareCmp#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.CompareCmp/cs/cmpcmp.cs#1)]\\n [!code-vb[System.String.CompareCmp#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.CompareCmp/vb/cmpcmp.vb#1)]\"\n  syntax:\n    content: public static int Compare (string strA, string strB, StringComparison comparisonType);\n    parameters:\n    - id: strA\n      type: System.String\n      description: The first string to compare.\n    - id: strB\n      type: System.String\n      description: The second string to compare.\n    - id: comparisonType\n      type: System.StringComparison\n      description: One of the enumeration values that specifies the rules to use in the comparison.\n    return:\n      type: System.Int32\n      description: \"A 32-bit signed integer that indicates the lexical relationship between the two comparands.  \\n  \\n <table><thead><tr><th> Value  \\n  \\n </th><th> Condition  \\n  \\n </th></tr></thead><tbody><tr><td> Less than zero  \\n  \\n </td><td><code>strA</code> precedes <code>strB</code> in the sort order.  \\n  \\n </td></tr><tr><td> Zero  \\n  \\n </td><td><code>strA</code> is in the same position as <code>strB</code> in the sort order.  \\n  \\n </td></tr><tr><td> Greater than zero  \\n  \\n </td><td><code>strA</code> follows <code>strB</code> in the sort order.  \\n  \\n </td></tr></tbody></table>\"\n  overload: System.String.Compare*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>comparisonType</code> is not a <xref href=\"System.StringComparison\"></xref> value.\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: <xref href=\"System.StringComparison\"></xref> is not supported.\n  attributes: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/String.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.String.Compare(System.String,System.String,System.Boolean)\n  commentId: M:System.String.Compare(System.String,System.String,System.Boolean)\n  id: Compare(System.String,System.String,System.Boolean)\n  parent: System.String\n  langs:\n  - csharp\n  name: Compare(String, String, Boolean)\n  nameWithType: String.Compare(String, String, Boolean)\n  fullName: String.Compare(String, String, Boolean)\n  type: Method\n  assemblies:\n  - System.Runtime\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Compares two specified <xref href=\"System.String\"></xref> objects, ignoring or honoring their case, and returns an integer that indicates their relative position in the sort order.\n  remarks: \"The comparison uses the current culture to obtain culture-specific information such as casing rules and the alphabetic order of individual characters. For example, a culture could specify that certain combinations of characters be treated as a single character, or uppercase and lowercase characters be compared in a particular way, or that the sorting order of a character depends on the characters that precede or follow it.  \\n  \\n The comparison is performed using word sort rules. For more information about word, string, and ordinal sorts, see <xref:System.Globalization.CompareOptions?displayProperty=fullName>.  \\n  \\n> [!WARNING]\\n>  When comparing strings, you should call the <xref:System.String.Compare%28System.String%2CSystem.String%2CSystem.StringComparison%29> method, which requires that you explicitly specify the type of string comparison that the method uses. For more information, see [Best Practices for Using Strings](~/docs/standard/base-types/best-practices-strings.md).  \\n  \\n One or both comparands can be `null`. By definition, any string, including the empty string (\\\"\\\"), compares greater than a null reference; and two null references compare equal to each other.  \\n  \\n The comparison terminates when an inequality is discovered or both strings have been compared. However, if the two strings compare equal to the end of one string, and the other string has characters remaining, then the string with remaining characters is considered greater. The return value is the result of the last comparison performed.  \\n  \\n Unexpected results can occur when comparisons are affected by culture-specific casing rules. For example, in Turkish, the following example yields the wrong results because the file system in Turkish does not use linguistic casing rules for the letter \\\"i\\\" in \\\"file\\\".  \\n  \\n [!code-cpp[System.String.Compare#12](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Compare/cpp/remarks.cpp#12)]\\n [!code-csharp[System.String.Compare#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Compare/cs/remarks.cs#12)]\\n [!code-vb[System.String.Compare#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Compare/vb/remarks.vb#12)]  \\n  \\n Compare the path name to \\\"file\\\" using an ordinal comparison. The correct code to do this is as follows:  \\n  \\n [!code-cpp[System.String.Compare#13](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Compare/cpp/remarks.cpp#13)]\\n [!code-csharp[System.String.Compare#13](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Compare/cs/remarks.cs#13)]\\n [!code-vb[System.String.Compare#13](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Compare/vb/remarks.vb#13)]\"\n  example:\n  - \"The following example demonstrates that the <xref:System.String.Compare%28System.String%2CSystem.String%2CSystem.Boolean%29> method is equivalent to using <xref:System.String.ToUpper%2A> or <xref:System.String.ToLower%2A> when comparing strings.  \\n  \\n [!code-cpp[System.String.Compare#18](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Compare/cpp/compare02.cpp#18)]\\n [!code-csharp[System.String.Compare#18](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Compare/cs/compare02.cs#18)]\\n [!code-vb[System.String.Compare#18](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Compare/vb/compare02.vb#18)]\"\n  syntax:\n    content: public static int Compare (string strA, string strB, bool ignoreCase);\n    parameters:\n    - id: strA\n      type: System.String\n      description: The first string to compare.\n    - id: strB\n      type: System.String\n      description: The second string to compare.\n    - id: ignoreCase\n      type: System.Boolean\n      description: '`true` to ignore case during the comparison; otherwise, `false`.'\n    return:\n      type: System.Int32\n      description: \"A 32-bit signed integer that indicates the lexical relationship between the two comparands.  \\n  \\n <table><thead><tr><th> Value  \\n  \\n </th><th> Condition  \\n  \\n </th></tr></thead><tbody><tr><td> Less than zero  \\n  \\n </td><td><code>strA</code> precedes <code>strB</code> in the sort order.  \\n  \\n </td></tr><tr><td> Zero  \\n  \\n </td><td><code>strA</code> occurs in the same position as <code>strB</code> in the sort order.  \\n  \\n </td></tr><tr><td> Greater than zero  \\n  \\n </td><td><code>strA</code> follows <code>strB</code> in the sort order.  \\n  \\n </td></tr></tbody></table>\"\n  overload: System.String.Compare*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/String.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.Globalization.CultureInfo,System.Globalization.CompareOptions)\n  commentId: M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.Globalization.CultureInfo,System.Globalization.CompareOptions)\n  id: Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.Globalization.CultureInfo,System.Globalization.CompareOptions)\n  parent: System.String\n  langs:\n  - csharp\n  name: Compare(String, Int32, String, Int32, Int32, CultureInfo, CompareOptions)\n  nameWithType: String.Compare(String, Int32, String, Int32, Int32, CultureInfo, CompareOptions)\n  fullName: String.Compare(String, Int32, String, Int32, Int32, CultureInfo, CompareOptions)\n  type: Method\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System\n  summary: Compares substrings of two specified <xref href=\"System.String\"></xref> objects using the specified comparison options and culture-specific information to influence the comparison, and returns an integer that indicates the relationship of the two substrings to each other in the sort order.\n  remarks: \"The substrings to compare start in `strA` at position `indexA` and in `strB` at position `indexB`. The length of the first substring is the length of `strA` minus `indexA`. The length of the second substring is the length of `strB` minus `indexB`.  \\n  \\n The number of characters to compare is the lesser of the lengths of the two substrings, and `length`. The `indexA`, `indexB`, and `length` parameters must be nonnegative.  \\n  \\n The comparison uses the `culture` parameter to obtain culture-specific information, such as casing rules and the alphabetical order of individual characters. For example, a particular culture could specify that certain combinations of characters be treated as a single character, that uppercase and lowercase characters be compared in a particular way, or that the sort order of a character depends on the characters that precede or follow it.  \\n  \\n> [!CAUTION]\\n>  The <xref:System.String.Compare%28System.String%2CSystem.Int32%2CSystem.String%2CSystem.Int32%2CSystem.Int32%2CSystem.Globalization.CultureInfo%2CSystem.Globalization.CompareOptions%29> method is designed primarily for use in sorting or alphabetizing operations. It should not be used when the primary purpose of the method call is to determine whether two substrings are equivalent (that is, when the purpose of the method call is to test for a return value of zero). To determine whether two strings are equivalent, call the <xref:System.String.Equals%2A> method.  \\n  \\n One or both of `strA` and `strB` can be `null`. By definition, any string, including <xref:System.String.Empty?displayProperty=fullName>, compares greater than a null reference, and two null references compare equal to each other.  \\n  \\n The comparison can be further specified by the `options` parameter, which consists of one or more members of the <xref:System.Globalization.CompareOptions?displayProperty=fullName> enumeration. However, because the purpose of this method is to conduct a culture-sensitive string comparison, the <xref:System.Globalization.CompareOptions?displayProperty=fullName> and <xref:System.Globalization.CompareOptions?displayProperty=fullName> values have no effect.  \\n  \\n The comparison terminates when an inequality is discovered or both substrings have been compared. However, if the two strings compare equal to the end of one string, and the other string has characters remaining, the string with the remaining characters is considered greater. The return value is the result of the last comparison performed.\"\n  example:\n  - \"The following example uses the <xref:System.String.Compare%28System.String%2CSystem.Int32%2CSystem.String%2CSystem.Int32%2CSystem.Int32%2CSystem.Globalization.CultureInfo%2CSystem.Globalization.CompareOptions%29> method to compare the last names of two people. It then lists them in alphabetical order.  \\n  \\n [!code-csharp[System.String.Compare5#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Compare5/cs/Example.cs#1)]\\n [!code-vb[System.String.Compare5#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Compare5/vb/Example.vb#1)]\"\n  syntax:\n    content: public static int Compare (string strA, int indexA, string strB, int indexB, int length, System.Globalization.CultureInfo culture, System.Globalization.CompareOptions options);\n    parameters:\n    - id: strA\n      type: System.String\n      description: The first string to use in the comparison.\n    - id: indexA\n      type: System.Int32\n      description: The starting position of the substring within <code>strA</code>.\n    - id: strB\n      type: System.String\n      description: The second string to use in the comparison.\n    - id: indexB\n      type: System.Int32\n      description: The starting position of the substring within <code>strB</code>.\n    - id: length\n      type: System.Int32\n      description: The maximum number of characters in the substrings to compare.\n    - id: culture\n      type: System.Globalization.CultureInfo\n      description: An object that supplies culture-specific comparison information.\n    - id: options\n      type: System.Globalization.CompareOptions\n      description: Options to use when performing the comparison (such as ignoring case or symbols).\n    return:\n      type: System.Int32\n      description: \"An integer that indicates the lexical relationship between the two substrings, as shown in the following table.  \\n  \\n <table><thead><tr><th> Value  \\n  \\n </th><th> Condition  \\n  \\n </th></tr></thead><tbody><tr><td> Less than zero  \\n  \\n </td><td> The substring in <code>strA</code> precedes the substring in <code>strB</code> in the sort order.  \\n  \\n </td></tr><tr><td> Zero  \\n  \\n </td><td> The substrings occur in the same position in the sort order, or <code>length</code> is zero.  \\n  \\n </td></tr><tr><td> Greater than zero  \\n  \\n </td><td> The substring in <code>strA</code> follows the substring in <code>strB</code> in the sort order.  \\n  \\n </td></tr></tbody></table>\"\n  overload: System.String.Compare*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>options</code> is not a <xref href=\"System.Globalization.CompareOptions\"></xref> value.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"<code>indexA</code> is greater than <code>strA</code>`.Length`.  \\n  \\n -or-  \\n  \\n <code>indexB</code> is greater than <code>strB</code>`.Length`.  \\n  \\n -or-  \\n  \\n <code>indexA</code>, <code>indexB</code>, or <code>length</code> is negative.  \\n  \\n -or-  \\n  \\n Either <code>strA</code> or <code>strB</code> is `null`, and <code>length</code> is greater than zero.\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>culture</code> is `null`.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/String.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.String.Compare(System.String,System.String,System.Globalization.CultureInfo,System.Globalization.CompareOptions)\n  commentId: M:System.String.Compare(System.String,System.String,System.Globalization.CultureInfo,System.Globalization.CompareOptions)\n  id: Compare(System.String,System.String,System.Globalization.CultureInfo,System.Globalization.CompareOptions)\n  parent: System.String\n  langs:\n  - csharp\n  name: Compare(String, String, CultureInfo, CompareOptions)\n  nameWithType: String.Compare(String, String, CultureInfo, CompareOptions)\n  fullName: String.Compare(String, String, CultureInfo, CompareOptions)\n  type: Method\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System\n  summary: Compares two specified <xref href=\"System.String\"></xref> objects using the specified comparison options and culture-specific information to influence the comparison, and returns an integer that indicates the relationship of the two strings to each other in the sort order.\n  remarks: \"The comparison uses the `culture` parameter to obtain culture-specific information, such as casing rules and the alphabetical order of individual characters. For example, a particular culture could specify that certain combinations of characters be treated as a single character, that uppercase and lowercase characters be compared in a particular way, or that the sort order of a character depends on the characters that precede or follow it.  \\n  \\n> [!CAUTION]\\n>  The <xref:System.String.Compare%28System.String%2CSystem.String%2CSystem.Globalization.CultureInfo%2CSystem.Globalization.CompareOptions%29> method is designed primarily for use in sorting or alphabetizing operations. It should not be used when the primary purpose of the method call is to determine whether two strings are equivalent (that is, when the purpose of the method call is to test for a return value of zero). To determine whether two strings are equivalent, call the <xref:System.String.Equals%2A> method.  \\n  \\n The comparison can be further specified by the `options` parameter, which consists of one or more members of the <xref:System.Globalization.CompareOptions> enumeration. However, because the purpose of this method is to conduct a culture-sensitive string comparison, the <xref:System.Globalization.CompareOptions?displayProperty=fullName> and <xref:System.Globalization.CompareOptions?displayProperty=fullName> values have no effect.  \\n  \\n Either or both comparands can be `null`. By definition, any string, including <xref:System.String.Empty?displayProperty=fullName>, compares greater than a null reference, and two null references compare equal to each other.  \\n  \\n The comparison terminates when an inequality is discovered or both strings have been compared. However, if the two strings compare equal to the end of one string, and the other string has characters remaining, the string with the remaining characters is considered greater.\"\n  example:\n  - \"The following example compares two strings in three different ways: using linguistic comparison for the en-US culture; using linguistic case-sensitive comparison for the en-US culture; and using an ordinal comparison. It illustrates how the three methods of comparison produce three different results.  \\n  \\n [!code-cpp[System.String.Compare#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Compare/cpp/example.cpp#1)]\\n [!code-csharp[System.String.Compare#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Compare/cs/Example.cs#1)]\\n [!code-vb[System.String.Compare#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Compare/vb/Example.vb#1)]\"\n  syntax:\n    content: public static int Compare (string strA, string strB, System.Globalization.CultureInfo culture, System.Globalization.CompareOptions options);\n    parameters:\n    - id: strA\n      type: System.String\n      description: The first string to compare.\n    - id: strB\n      type: System.String\n      description: The second string to compare.\n    - id: culture\n      type: System.Globalization.CultureInfo\n      description: The culture that supplies culture-specific comparison information.\n    - id: options\n      type: System.Globalization.CompareOptions\n      description: Options to use when performing the comparison (such as ignoring case or symbols).\n    return:\n      type: System.Int32\n      description: \"A 32-bit signed integer that indicates the lexical relationship between <code>strA</code> and <code>strB</code>, as shown in the following table  \\n  \\n <table><thead><tr><th> Value  \\n  \\n </th><th> Condition  \\n  \\n </th></tr></thead><tbody><tr><td> Less than zero  \\n  \\n </td><td><code>strA</code> precedes <code>strB</code> in the sort order.  \\n  \\n </td></tr><tr><td> Zero  \\n  \\n </td><td><code>strA</code> occurs in the same position as <code>strB</code> in the sort order.  \\n  \\n </td></tr><tr><td> Greater than zero  \\n  \\n </td><td><code>strA</code> follows <code>strB</code> in the sort order.  \\n  \\n </td></tr></tbody></table>\"\n  overload: System.String.Compare*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>options</code> is not a <xref href=\"System.Globalization.CompareOptions\"></xref> value.\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>culture</code> is `null`.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/String.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.String.CompareOrdinal(System.String,System.Int32,System.String,System.Int32,System.Int32)\n  commentId: M:System.String.CompareOrdinal(System.String,System.Int32,System.String,System.Int32,System.Int32)\n  id: CompareOrdinal(System.String,System.Int32,System.String,System.Int32,System.Int32)\n  parent: System.String\n  langs:\n  - csharp\n  name: CompareOrdinal(String, Int32, String, Int32, Int32)\n  nameWithType: String.CompareOrdinal(String, Int32, String, Int32, Int32)\n  fullName: String.CompareOrdinal(String, Int32, String, Int32, Int32)\n  type: Method\n  assemblies:\n  - System.Runtime\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Compares substrings of two specified <xref href=\"System.String\"></xref> objects by evaluating the numeric values of the corresponding <xref href=\"System.Char\"></xref> objects in each substring.\n  remarks: \"The `indexA`, `indexB`, and `length` parameters must be nonnegative.  \\n  \\n The number of characters compared is the lesser of the length of `strA` less `indexA`, the length of `strB` less `indexB`, and `length`.  \\n  \\n This method performs a case-sensitive comparison using ordinal sort rules. For more information about word, string, and ordinal sorts, see <xref:System.Globalization.CompareOptions?displayProperty=fullName>. To perform a case-insensitive comparison using ordinal sort rules, call the<xref:System.String.Compare%28System.String%2CSystem.Int32%2CSystem.String%2CSystem.Int32%2CSystem.Int32%2CSystem.StringComparison%29>method with the `comparisonType` argument set to<xref:System.StringComparison?displayProperty=fullName>.  \\n  \\n Because <xref:System.String.CompareOrdinal%28System.String%2CSystem.String%29> is a static method, `strA` and `strB` can be `null`. If both values are `null`, the method returns 0 (zero), which indicates that `strA` and `strB` are equal. If only one of the values is `null`, the method considers the non-null value to be greater.\"\n  example:\n  - \"This following example demonstrates that <xref:System.String.CompareOrdinal%2A> and <xref:System.String.Compare%2A> use different sort orders.  \\n  \\n [!code-cpp[StringCompareOrdinal#1](~/samples/snippets/cpp/VS_Snippets_CLR/StringCompareOrdinal/CPP/stringcompareordinal.cpp#1)]\\n [!code-csharp[StringCompareOrdinal#1](~/samples/snippets/csharp/VS_Snippets_CLR/StringCompareOrdinal/CS/stringcompareordinal.cs#1)]\\n [!code-vb[StringCompareOrdinal#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/StringCompareOrdinal/VB/stringcompareordinal.vb#1)]\"\n  syntax:\n    content: public static int CompareOrdinal (string strA, int indexA, string strB, int indexB, int length);\n    parameters:\n    - id: strA\n      type: System.String\n      description: The first string to use in the comparison.\n    - id: indexA\n      type: System.Int32\n      description: The starting index of the substring in <code>strA</code>.\n    - id: strB\n      type: System.String\n      description: The second string to use in the comparison.\n    - id: indexB\n      type: System.Int32\n      description: The starting index of the substring in <code>strB</code>.\n    - id: length\n      type: System.Int32\n      description: The maximum number of characters in the substrings to compare.\n    return:\n      type: System.Int32\n      description: \"A 32-bit signed integer that indicates the lexical relationship between the two comparands.  \\n  \\n <table><thead><tr><th> Value  \\n  \\n </th><th> Condition  \\n  \\n </th></tr></thead><tbody><tr><td> Less than zero  \\n  \\n </td><td> The substring in <code>strA</code> is less than the substring in <code>strB</code>.  \\n  \\n </td></tr><tr><td> Zero  \\n  \\n </td><td> The substrings are equal, or <code>length</code> is zero.  \\n  \\n </td></tr><tr><td> Greater than zero  \\n  \\n </td><td> The substring in <code>strA</code> is greater than the substring in <code>strB</code>.  \\n  \\n </td></tr></tbody></table>\"\n  overload: System.String.CompareOrdinal*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"<code>strA</code> is not `null` and <code>indexA</code> is greater than <code>strA</code>.<xref href=\\\"System.String.Length\\\"></xref>.  \\n  \\n -or-  \\n  \\n <code>strB</code> is not `null` and <code>indexB</code> is greater than <code>strB</code>.<xref href=\\\"System.String.Length\\\"></xref>.  \\n  \\n -or-  \\n  \\n <code>indexA</code>, <code>indexB</code>, or <code>length</code> is negative.\"\n  attributes: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/String.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.String.CompareOrdinal(System.String,System.String)\n  commentId: M:System.String.CompareOrdinal(System.String,System.String)\n  id: CompareOrdinal(System.String,System.String)\n  parent: System.String\n  langs:\n  - csharp\n  name: CompareOrdinal(String, String)\n  nameWithType: String.CompareOrdinal(String, String)\n  fullName: String.CompareOrdinal(String, String)\n  type: Method\n  assemblies:\n  - System.Runtime\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Compares two specified <xref href=\"System.String\"></xref> objects by evaluating the numeric values of the corresponding <xref href=\"System.Char\"></xref> objects in each string.\n  remarks: \"This method performs a case-sensitive comparison using ordinal sort rules. For more information about word, string, and ordinal sorts, see <xref:System.Globalization.CompareOptions?displayProperty=fullName>. To perform a case-insensitive comparison using ordinal sort rules, call the <xref:System.String.Compare%28System.String%2CSystem.String%2CSystem.StringComparison%29> method with the `comparisonType` argument set to <xref:System.StringComparison?displayProperty=fullName>.  \\n  \\n Because <xref:System.String.CompareOrdinal%28System.String%2CSystem.String%29>is a static method, `strA` and `strB` can be `null`. If both values are `null`, the method returns 0 (zero), which indicates that `strA` and `strB` are equal. If only one of the values is `null`, the method considers the non-null value to be greater.\"\n  example:\n  - \"The following example performs and ordinal comparison of two strings that only differ in case.  \\n  \\n [!code-cpp[string.compareordinal#1](~/samples/snippets/cpp/VS_Snippets_CLR/string.compareordinal/CPP/comp0.cpp#1)]\\n [!code-csharp[string.compareordinal#1](~/samples/snippets/csharp/VS_Snippets_CLR/string.compareordinal/CS/comp0.cs#1)]\\n [!code-vb[string.compareordinal#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/string.compareordinal/VB/comp0.vb#1)]\"\n  syntax:\n    content: public static int CompareOrdinal (string strA, string strB);\n    parameters:\n    - id: strA\n      type: System.String\n      description: The first string to compare.\n    - id: strB\n      type: System.String\n      description: The second string to compare.\n    return:\n      type: System.Int32\n      description: \"An integer that indicates the lexical relationship between the two comparands.  \\n  \\n <table><thead><tr><th> Value  \\n  \\n </th><th> Condition  \\n  \\n </th></tr></thead><tbody><tr><td> Less than zero  \\n  \\n </td><td><code>strA</code> is less than <code>strB</code>.  \\n  \\n </td></tr><tr><td> Zero  \\n  \\n </td><td><code>strA</code> and <code>strB</code> are equal.  \\n  \\n </td></tr><tr><td> Greater than zero  \\n  \\n </td><td><code>strA</code> is greater than <code>strB</code>.  \\n  \\n </td></tr></tbody></table>\"\n  overload: System.String.CompareOrdinal*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/String.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.String.CompareTo(System.Object)\n  commentId: M:System.String.CompareTo(System.Object)\n  id: CompareTo(System.Object)\n  parent: System.String\n  langs:\n  - csharp\n  name: CompareTo(Object)\n  nameWithType: String.CompareTo(Object)\n  fullName: String.CompareTo(Object)\n  type: Method\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System\n  summary: Compares this instance with a specified <xref href=\"System.Object\"></xref> and indicates whether this instance precedes, follows, or appears in the same position in the sort order as the specified <xref href=\"System.Object\"></xref>.\n  remarks: \"`value` must be a <xref:System.String> object.  \\n  \\n> [!CAUTION]\\n>  The <xref:System.String.CompareTo%2A> method was designed primarily for use in sorting or alphabetizing operations. It should not be used when the primary purpose of the method call is to determine whether two strings are equivalent. To determine whether two strings are equivalent, call the <xref:System.String.Equals%2A> method.  \\n  \\n This method performs a word (case-sensitive and culture-sensitive) comparison using the current culture. For more information about word, string, and ordinal sorts, see <xref:System.Globalization.CompareOptions?displayProperty=fullName>.  \\n  \\n For more information about the behavior of this method, see the Remarks section of the <xref:System.String.Compare%28System.String%2CSystem.String%29?displayProperty=fullName> method.\"\n  example:\n  - \"The following example uses the <xref:System.String.CompareTo%2A> method with an <xref:System.Object>. Because it attempts to compare a <xref:System.String> instance to a `TestClass` object, the method throws an <xref:System.ArgumentException>.  \\n  \\n [!code-cpp[ExToString#1](~/samples/snippets/cpp/VS_Snippets_CLR/ExToString/CPP/extostring.cpp#1)]\\n [!code-csharp[ExToString#1](~/samples/snippets/csharp/VS_Snippets_CLR/ExToString/CS/extostring.cs#1)]\\n [!code-vb[ExToString#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/ExToString/VB/extostring.vb#1)]\"\n  syntax:\n    content: public int CompareTo (object value);\n    parameters:\n    - id: value\n      type: System.Object\n      description: An object that evaluates to a <xref href=\"System.String\"></xref>.\n    return:\n      type: System.Int32\n      description: \"A 32-bit signed integer that indicates whether this instance precedes, follows, or appears in the same position in the sort order as the <code>value</code> parameter.  \\n  \\n <table><thead><tr><th> Value  \\n  \\n </th><th> Condition  \\n  \\n </th></tr></thead><tbody><tr><td> Less than zero  \\n  \\n </td><td> This instance precedes <code>value</code>.  \\n  \\n </td></tr><tr><td> Zero  \\n  \\n </td><td> This instance has the same position in the sort order as <code>value</code>.  \\n  \\n </td></tr><tr><td> Greater than zero  \\n  \\n </td><td> This instance follows <code>value</code>.  \\n  \\n -or-  \\n  \\n <code>value</code> is `null`.  \\n  \\n </td></tr></tbody></table>\"\n  overload: System.String.CompareTo*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>value</code> is not a <xref href=\"System.String\"></xref>.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/String.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.String.CompareTo(System.String)\n  commentId: M:System.String.CompareTo(System.String)\n  id: CompareTo(System.String)\n  parent: System.String\n  langs:\n  - csharp\n  name: CompareTo(String)\n  nameWithType: String.CompareTo(String)\n  fullName: String.CompareTo(String)\n  type: Method\n  assemblies:\n  - System.Runtime\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Compares this instance with a specified <xref href=\"System.String\"></xref> object and indicates whether this instance precedes, follows, or appears in the same position in the sort order as the specified string.\n  remarks: \"This method performs a word (case-sensitive and culture-sensitive) comparison using the current culture. For more information about word, string, and ordinal sorts, see <xref:System.Globalization.CompareOptions?displayProperty=fullName>.  \\n  \\n> [!CAUTION]\\n>  The <xref:System.String.CompareTo%2A> method was designed primarily for use in sorting or alphabetizing operations. It should not be used when the primary purpose of the method call is to determine whether two strings are equivalent. To determine whether two strings are equivalent, call the <xref:System.String.Equals%2A> method.  \\n  \\n For more information about the behavior of this method, see the Remarks section of the <xref:System.String.Compare%28System.String%2CSystem.String%29> method.  \\n  \\n This method implements the <xref:System.IComparable%601?displayProperty=fullName> interface and performs slightly better than the <xref:System.String.CompareTo%28System.Object%29?displayProperty=fullName> method, because it does not have to determine whether the `strB` argument is a mutable value type that must be boxed, and it does not have to cast its parameter from an <xref:System.Object>to a<xref:System.String>.\"\n  example:\n  - \"The following example uses the <xref:System.String.CompareTo%2A> method to compare the current string instance with another string.  \\n  \\n [!code-cpp[stringcompareto#1](~/samples/snippets/cpp/VS_Snippets_CLR/StringCompareTo/CPP/stringcompareto.cpp#1)]\\n [!code-csharp[stringcompareto#1](~/samples/snippets/csharp/VS_Snippets_CLR/StringCompareTo/CS/stringcompareto.cs#1)]\\n [!code-vb[stringcompareto#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/StringCompareTo/VB/stringcompareto.vb#1)]  \\n  \\n The following example demonstrates generic and non-generic versions of the CompareTo method for several value and reference types.  \\n  \\n [!code-cpp[T.CompareTo#1](~/samples/snippets/cpp/VS_Snippets_CLR/T.CompareTo/CPP/cat.cpp#1)]\\n [!code-csharp[T.CompareTo#1](~/samples/snippets/csharp/VS_Snippets_CLR/T.CompareTo/CS/cat.cs#1)]\\n [!code-vb[T.CompareTo#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/T.CompareTo/VB/cat.vb#1)]\"\n  syntax:\n    content: public int CompareTo (string strB);\n    parameters:\n    - id: strB\n      type: System.String\n      description: The string to compare with this instance.\n    return:\n      type: System.Int32\n      description: \"A 32-bit signed integer that indicates whether this instance precedes, follows, or appears in the same position in the sort order as the <code>strB</code> parameter.  \\n  \\n <table><thead><tr><th> Value  \\n  \\n </th><th> Condition  \\n  \\n </th></tr></thead><tbody><tr><td> Less than zero  \\n  \\n </td><td> This instance precedes <code>strB</code>.  \\n  \\n </td></tr><tr><td> Zero  \\n  \\n </td><td> This instance has the same position in the sort order as <code>strB</code>.  \\n  \\n </td></tr><tr><td> Greater than zero  \\n  \\n </td><td> This instance follows <code>strB</code>.  \\n  \\n -or-  \\n  \\n <code>strB</code> is `null`.  \\n  \\n </td></tr></tbody></table>\"\n  overload: System.String.CompareTo*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/String.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.String.Concat(System.String,System.String,System.String,System.String)\n  commentId: M:System.String.Concat(System.String,System.String,System.String,System.String)\n  id: Concat(System.String,System.String,System.String,System.String)\n  parent: System.String\n  langs:\n  - csharp\n  name: Concat(String, String, String, String)\n  nameWithType: String.Concat(String, String, String, String)\n  fullName: String.Concat(String, String, String, String)\n  type: Method\n  assemblies:\n  - System.Runtime\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Concatenates four specified instances of <xref href=\"System.String\"></xref>.\n  remarks: \"The method concatenates `str0`, `str1`, `str2`, and `str3`; it does not add any delimiters.  \\n  \\n> [!NOTE]\\n>  You can also use your language's string concatenation operator, such as `+` in C#, or `&` and `+` in Visual Basic)  \\n>   \\n>  , to concatenate strings.  \\n  \\n An <xref:System.String.Empty> string is used in place of any null object in the array.\"\n  example:\n  - \"The following example defines an array of four-letter words and stores their individual letters to a string array in order to scramble them. It then calls the <xref:System.String.Concat%28System.String%2CSystem.String%2CSystem.String%2CSystem.String%29> method to reassemble the scrambled words.  \\n  \\n [!code-csharp[System.String.Concat#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.concat/cs/concat4.cs#1)]\\n [!code-vb[System.String.Concat#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.string.concat/vb/concat4.vb#1)]\"\n  syntax:\n    content: public static string Concat (string str0, string str1, string str2, string str3);\n    parameters:\n    - id: str0\n      type: System.String\n      description: The first string to concatenate.\n    - id: str1\n      type: System.String\n      description: The second string to concatenate.\n    - id: str2\n      type: System.String\n      description: The third string to concatenate.\n    - id: str3\n      type: System.String\n      description: The fourth string to concatenate.\n    return:\n      type: System.String\n      description: The concatenation of <code>str0</code>, <code>str1</code>, <code>str2</code>, and <code>str3</code>.\n  overload: System.String.Concat*\n  exceptions: []\n  attributes: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/String.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.String.Concat(System.Object,System.Object,System.Object,System.Object)\n  commentId: M:System.String.Concat(System.Object,System.Object,System.Object,System.Object)\n  id: Concat(System.Object,System.Object,System.Object,System.Object)\n  parent: System.String\n  langs:\n  - csharp\n  name: Concat(Object, Object, Object, Object)\n  nameWithType: String.Concat(Object, Object, Object, Object)\n  fullName: String.Concat(Object, Object, Object, Object)\n  type: Method\n  assemblies:\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Concatenates the string representations of four specified objects and any objects specified in an optional variable length parameter list.\n  remarks: \"> [!NOTE]\\n>  This API is not CLS-compliant. The CLS-compliant alternative is <xref:System.String.Concat%28System.Object%5B%5D%29?displayProperty=fullName>. The C# and Visual Basic compilers automatically resolve a call to this method as a call to <xref:System.String.Concat%28System.Object%5B%5D%29?displayProperty=fullName>.  \\n  \\n The method concatenates each object in the parameter list by calling its parameterless `ToString` method; it does not add any delimiters.  \\n  \\n <xref:System.String.Empty?displayProperty=fullName> is used in place of any null argument.  \\n  \\n> [!NOTE]\\n>  The last parameter of the  <xref:System.String.Concat%2A> method is an optional comma-delimited list of one or more additional objects to concatenate.\"\n  example:\n  - \"The following example illustrates the use of the <xref:System.String.Concat%28System.Object%2CSystem.Object%2CSystem.Object%2CSystem.Object%29> method to concatenate a list of variable parameters. In this case, the method is called with nine parameters.  \\n  \\n [!code-csharp[System.String.Concat#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.concat/cs/concat4.cs#1)]\\n [!code-vb[System.String.Concat#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.string.concat/vb/concat4.vb#1)]\"\n  syntax:\n    content: >-\n      [System.CLSCompliant(false)]\n\n      public static string Concat (object arg0, object arg1, object arg2, object arg3);\n    parameters:\n    - id: arg0\n      type: System.Object\n      description: The first object to concatenate.\n    - id: arg1\n      type: System.Object\n      description: The second object to concatenate.\n    - id: arg2\n      type: System.Object\n      description: The third object to concatenate.\n    - id: arg3\n      type: System.Object\n      description: The fourth object to concatenate.\n    return:\n      type: System.String\n      description: The concatenated string representation of each value in the parameter list.\n  overload: System.String.Concat*\n  exceptions: []\n  attributes:\n  - type: System.CLSCompliantAttribute\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/String.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.String.Concat(System.Object,System.Object,System.Object)\n  commentId: M:System.String.Concat(System.Object,System.Object,System.Object)\n  id: Concat(System.Object,System.Object,System.Object)\n  parent: System.String\n  langs:\n  - csharp\n  name: Concat(Object, Object, Object)\n  nameWithType: String.Concat(Object, Object, Object)\n  fullName: String.Concat(Object, Object, Object)\n  type: Method\n  assemblies:\n  - System.Runtime\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Concatenates the string representations of three specified objects.\n  remarks: \"The method concatenates `arg0`, `arg1`, and `arg2` by calling the parameterless `ToString` method of each object; it does not add any delimiters.  \\n  \\n <xref:System.String?displayProperty=fullName> is used in place of any null argument.\"\n  example:\n  - \"The following example demonstrates the <xref:System.String.Concat%2A> method.  \\n  \\n [!code-cpp[string.concat5#1](~/samples/snippets/cpp/VS_Snippets_CLR/string.concat5/CPP/string.concat5.cpp#1)]\\n [!code-csharp[string.concat5#1](~/samples/snippets/csharp/VS_Snippets_CLR/string.concat5/CS/string.concat5.cs#1)]\\n [!code-vb[string.concat5#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/string.concat5/VB/string.concat5.vb#1)]\"\n  syntax:\n    content: public static string Concat (object arg0, object arg1, object arg2);\n    parameters:\n    - id: arg0\n      type: System.Object\n      description: The first object to concatenate.\n    - id: arg1\n      type: System.Object\n      description: The second object to concatenate.\n    - id: arg2\n      type: System.Object\n      description: The third object to concatenate.\n    return:\n      type: System.String\n      description: The concatenated string representations of the values of <code>arg0</code>, <code>arg1</code>, and <code>arg2</code>.\n  overload: System.String.Concat*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/String.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.String.Concat(System.String,System.String)\n  commentId: M:System.String.Concat(System.String,System.String)\n  id: Concat(System.String,System.String)\n  parent: System.String\n  langs:\n  - csharp\n  name: Concat(String, String)\n  nameWithType: String.Concat(String, String)\n  fullName: String.Concat(String, String)\n  type: Method\n  assemblies:\n  - System.Runtime\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Concatenates two specified instances of <xref href=\"System.String\"></xref>.\n  remarks: \"The method concatenates `str0` and `str1`; it does not add any delimiters.  \\n  \\n> [!NOTE]\\n>  You can also use your language's string concatenation operator, such as `+` in C#, or `&` and `+` in Visual Basic)  \\n>   \\n>  , to concatenate strings.  \\n  \\n An <xref:System.String.Empty> string is used in place of any null argument.\"\n  example:\n  - \"The following example concatenates a person's first, middle, and last name.  \\n  \\n [!code-cpp[stringconcat4#1](~/samples/snippets/cpp/VS_Snippets_CLR/stringconcat4/CPP/stringconcat4.cpp#1)]\\n [!code-csharp[stringconcat4#1](~/samples/snippets/csharp/VS_Snippets_CLR/stringconcat4/CS/stringconcat4.cs#1)]\\n [!code-vb[stringconcat4#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/stringconcat4/VB/stringconcat4.vb#1)]\"\n  syntax:\n    content: public static string Concat (string str0, string str1);\n    parameters:\n    - id: str0\n      type: System.String\n      description: The first string to concatenate.\n    - id: str1\n      type: System.String\n      description: The second string to concatenate.\n    return:\n      type: System.String\n      description: The concatenation of <code>str0</code> and <code>str1</code>.\n  overload: System.String.Concat*\n  exceptions: []\n  attributes: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/String.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.String.Concat(System.String,System.String,System.String)\n  commentId: M:System.String.Concat(System.String,System.String,System.String)\n  id: Concat(System.String,System.String,System.String)\n  parent: System.String\n  langs:\n  - csharp\n  name: Concat(String, String, String)\n  nameWithType: String.Concat(String, String, String)\n  fullName: String.Concat(String, String, String)\n  type: Method\n  assemblies:\n  - System.Runtime\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Concatenates three specified instances of <xref href=\"System.String\"></xref>.\n  remarks: \"The method concatenates `str0`, `str1`, and `str2`; it does not add any delimiters.  \\n  \\n> [!NOTE]\\n>  You can also use your language's string concatenation operator, such as `+` in C#, or `&` and `+` in Visual Basic)  \\n>   \\n>  , to concatenate strings.  \\n  \\n An <xref:System.String.Empty> string is used in place of any null argument.\"\n  example:\n  - \"The following example uses the <xref:System.String.Concat%2A> method to concatenate three strings and displays the result.  \\n  \\n [!code-cpp[System.String.Concat#6](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.string.concat/cpp/Concat6.cpp#6)]\\n [!code-csharp[System.String.Concat#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.concat/cs/Concat6.cs#6)]\\n [!code-vb[System.String.Concat#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.string.concat/vb/Concat6.vb#6)]\"\n  syntax:\n    content: public static string Concat (string str0, string str1, string str2);\n    parameters:\n    - id: str0\n      type: System.String\n      description: The first string to concatenate.\n    - id: str1\n      type: System.String\n      description: The second string to concatenate.\n    - id: str2\n      type: System.String\n      description: The third string to concatenate.\n    return:\n      type: System.String\n      description: The concatenation of <code>str0</code>, <code>str1</code>, and <code>str2</code>.\n  overload: System.String.Concat*\n  exceptions: []\n  attributes: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/String.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.String.Concat(System.String[])\n  commentId: M:System.String.Concat(System.String[])\n  id: Concat(System.String[])\n  parent: System.String\n  langs:\n  - csharp\n  name: Concat(String[])\n  nameWithType: String.Concat(String[])\n  fullName: String.Concat(String[])\n  type: Method\n  assemblies:\n  - System.Runtime\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Concatenates the elements of a specified <xref href=\"System.String\"></xref> array.\n  remarks: \"The method concatenates each object in `values`; it does not add any delimiters.  \\n  \\n An <xref:System.String.Empty> string is used in place of any null object in the array.\"\n  example:\n  - \"The following example demonstrates the use of the <xref:System.String.Concat%2A> method with a <xref:System.String> array.  \\n  \\n [!code-cpp[stringconcat3#1](~/samples/snippets/cpp/VS_Snippets_CLR/stringconcat3/CPP/stringconcat3.cpp#1)]\\n [!code-csharp[stringconcat3#1](~/samples/snippets/csharp/VS_Snippets_CLR/stringconcat3/CS/stringconcat3.cs#1)]\\n [!code-vb[stringconcat3#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/stringconcat3/VB/stringconcat3.vb#1)]\"\n  syntax:\n    content: public static string Concat (string[] values);\n    parameters:\n    - id: values\n      type: System.String[]\n      description: An array of string instances.\n    return:\n      type: System.String\n      description: The concatenated elements of <code>values</code>.\n  overload: System.String.Concat*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>values</code> is `null`.\n  - type: System.OutOfMemoryException\n    commentId: T:System.OutOfMemoryException\n    description: Out of memory.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/String.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.String.Concat(System.Object[])\n  commentId: M:System.String.Concat(System.Object[])\n  id: Concat(System.Object[])\n  parent: System.String\n  langs:\n  - csharp\n  name: Concat(Object[])\n  nameWithType: String.Concat(Object[])\n  fullName: String.Concat(Object[])\n  type: Method\n  assemblies:\n  - System.Runtime\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Concatenates the string representations of the elements in a specified <xref href=\"System.Object\"></xref> array.\n  remarks: \"The method concatenates each object in `args` by calling the parameterless `ToString` method of that object; it does not add any delimiters.  \\n  \\n <xref:System.String?displayProperty=fullName> is used in place of any null object in the array.\"\n  example:\n  - \"The following example demonstrates the use of the <xref:System.String.Concat%2A> method with an <xref:System.Object> array.  \\n  \\n [!code-csharp[stringconcat1#1](~/samples/snippets/csharp/VS_Snippets_CLR/stringconcat1/CS/stringconcat1.cs#1)]\\n [!code-vb[stringconcat1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/stringconcat1/VB/stringconcat1.vb#1)]\"\n  syntax:\n    content: public static string Concat (object[] args);\n    parameters:\n    - id: args\n      type: System.Object[]\n      description: An object array that contains the elements to concatenate.\n    return:\n      type: System.String\n      description: The concatenated string representations of the values of the elements in <code>args</code>.\n  overload: System.String.Concat*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>args</code> is `null`.\n  - type: System.OutOfMemoryException\n    commentId: T:System.OutOfMemoryException\n    description: Out of memory.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/String.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.String.Concat(System.Object)\n  commentId: M:System.String.Concat(System.Object)\n  id: Concat(System.Object)\n  parent: System.String\n  langs:\n  - csharp\n  name: Concat(Object)\n  nameWithType: String.Concat(Object)\n  fullName: String.Concat(Object)\n  type: Method\n  assemblies:\n  - System.Runtime\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Creates the string  representation of a specified object.\n  remarks: The <xref:System.String.Concat%28System.Object%29> method represents `arg0` as a string by calling its parameterless `ToString` method.\n  example:\n  - \"The following example demonstrates the <xref:System.String.Concat%2A> method.  \\n  \\n [!code-cpp[string.concat5#1](~/samples/snippets/cpp/VS_Snippets_CLR/string.concat5/CPP/string.concat5.cpp#1)]\\n [!code-csharp[string.concat5#1](~/samples/snippets/csharp/VS_Snippets_CLR/string.concat5/CS/string.concat5.cs#1)]\\n [!code-vb[string.concat5#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/string.concat5/VB/string.concat5.vb#1)]\"\n  syntax:\n    content: public static string Concat (object arg0);\n    parameters:\n    - id: arg0\n      type: System.Object\n      description: The object to represent, or `null`.\n    return:\n      type: System.String\n      description: The string representation of the value of <code>arg0</code>, or <xref href=\"System.String.Empty\"></xref> if <code>arg0</code> is `null`.\n  overload: System.String.Concat*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/String.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.String.Concat(System.Collections.Generic.IEnumerable{System.String})\n  commentId: M:System.String.Concat(System.Collections.Generic.IEnumerable{System.String})\n  id: Concat(System.Collections.Generic.IEnumerable{System.String})\n  parent: System.String\n  langs:\n  - csharp\n  name: Concat(IEnumerable<String>)\n  nameWithType: String.Concat(IEnumerable<String>)\n  fullName: String.Concat(IEnumerable<String>)\n  type: Method\n  assemblies:\n  - System.Runtime\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Concatenates the members of a constructed <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> collection of type <xref href=\"System.String\"></xref>.\n  remarks: \"The method concatenates each object in `values`; it does not add any delimiters. To specify a delimiter between each member of `values`, call the <xref:System.String.Join%28System.String%2CSystem.Collections.Generic.IEnumerable%7BSystem.String%7D%29> method.  \\n  \\n An <xref:System.String.Empty> string is used in place of any null element in `values`.  \\n  \\n If `values` is an empty `IEnumerable(Of String)`, the method returns <xref:System.String.Empty?displayProperty=fullName>. If `values` is `null`, the method throws an <xref:System.ArgumentNullException> exception.  \\n  \\n <xref:System.String.Concat%28System.Collections.Generic.IEnumerable%7BSystem.String%7D%29> is a convenience method that lets you concatenate each element in an `IEnumerable(Of String)` collection without first converting the elements to a string array. It is particularly useful with Language-Integrated Query (LINQ) query expressions. The following example passes a `List(Of String)` object that contains either the uppercase or lowercase letters of the alphabet to a lambda expression that selects letters that are equal to or greater than a particular letter (which, in the example, is \\\"M\\\"). The `IEnumerable(Of String)` collection that is returned by the <xref:System.Linq.Enumerable.Where%2A?displayProperty=fullName> method is passed to the <xref:System.String.Concat%28System.Collections.Generic.IEnumerable%7BSystem.String%7D%29> method to display the result as a single string.  \\n  \\n [!code-csharp[System.String.Concat#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.concat/cs/concat2.cs#3)]\\n [!code-vb[System.String.Concat#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.string.concat/vb/concat2.vb#3)]\"\n  example:\n  - \"The following example uses the Sieve of Eratosthenes algorithm to calculate the prime numbers that are less than or equal to 100. It assigns the result to a <xref:System.Collections.Generic.List%601> object of type <xref:System.String>, which it then passes to the <xref:System.String.Concat%28System.Collections.Generic.IEnumerable%7BSystem.String%7D%29> method.  \\n  \\n [!code-csharp[System.String.Concat#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.concat/cs/concat1.cs#2)]\\n [!code-vb[System.String.Concat#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.string.concat/vb/concat1.vb#2)]\"\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(false)]\n\n      public static string Concat (System.Collections.Generic.IEnumerable<string> values);\n    parameters:\n    - id: values\n      type: System.Collections.Generic.IEnumerable{System.String}\n      description: A collection object that implements <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> and whose generic type argument is <xref href=\"System.String\"></xref>.\n    return:\n      type: System.String\n      description: The concatenated strings in <code>values</code>, or <xref href=\"System.String.Empty\"></xref> if <code>values</code> is an empty `IEnumerable(Of String)`.\n  overload: System.String.Concat*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>values</code> is `null`.\n  attributes:\n  - type: System.Runtime.InteropServices.ComVisibleAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/String.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.String.Concat(System.Object,System.Object)\n  commentId: M:System.String.Concat(System.Object,System.Object)\n  id: Concat(System.Object,System.Object)\n  parent: System.String\n  langs:\n  - csharp\n  name: Concat(Object, Object)\n  nameWithType: String.Concat(Object, Object)\n  fullName: String.Concat(Object, Object)\n  type: Method\n  assemblies:\n  - System.Runtime\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Concatenates the string representations of two specified objects.\n  remarks: \"The method concatenates `arg0` and `arg1` by calling the parameterless `ToString` method of `arg0` and `arg1`; it does not add any delimiters.  \\n  \\n <xref:System.String?displayProperty=fullName> is used in place of any null argument.  \\n  \\n If either of the arguments is an array reference, the method concatenates a string representing that array, instead of its members (for example, \\\"System.String[]\\\").\"\n  example:\n  - \"The following example demonstrates the <xref:System.String.Concat%2A> method.  \\n  \\n [!code-cpp[string.concat5#1](~/samples/snippets/cpp/VS_Snippets_CLR/string.concat5/CPP/string.concat5.cpp#1)]\\n [!code-csharp[string.concat5#1](~/samples/snippets/csharp/VS_Snippets_CLR/string.concat5/CS/string.concat5.cs#1)]\\n [!code-vb[string.concat5#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/string.concat5/VB/string.concat5.vb#1)]\"\n  syntax:\n    content: public static string Concat (object arg0, object arg1);\n    parameters:\n    - id: arg0\n      type: System.Object\n      description: The first object to concatenate.\n    - id: arg1\n      type: System.Object\n      description: The second object to concatenate.\n    return:\n      type: System.String\n      description: The concatenated string representations of the values of <code>arg0</code> and <code>arg1</code>.\n  overload: System.String.Concat*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/String.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.String.Concat``1(System.Collections.Generic.IEnumerable{``0})\n  commentId: M:System.String.Concat``1(System.Collections.Generic.IEnumerable{``0})\n  id: Concat``1(System.Collections.Generic.IEnumerable{``0})\n  parent: System.String\n  langs:\n  - csharp\n  name: Concat<T>(IEnumerable<T>)\n  nameWithType: String.Concat<T>(IEnumerable<T>)\n  fullName: String.Concat<T>(IEnumerable<T>)\n  type: Method\n  assemblies:\n  - System.Runtime\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Concatenates the members of an <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> implementation.\n  remarks: \"The method concatenates each object in `values`; it does not add any delimiters.  \\n  \\n An <xref:System.String.Empty> string is used in place of any null argument.  \\n  \\n <xref:System.String.Concat%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> is a convenience method that lets you concatenate each element in an <xref:System.Collections.Generic.IEnumerable%601> collection without first converting the elements to strings. It is particularly useful with Language-Integrated Query (LINQ) query expressions, as the example illustrates. The string representation of each object in the <xref:System.Collections.Generic.IEnumerable%601> collection is derived by calling that object's `ToString` method.\"\n  example:\n  - \"The following example defines a very simple `Animal` class that contains the name of an animal and the order to which it belongs. It then defines a <xref:System.Collections.Generic.List%601> object to contain a number of `Animal` objects. The <xref:System.Linq.Enumerable.Where%2A?displayProperty=fullName> extension method is called to extract the `Animal` objects whose `Order` property equals \\\"Rodent\\\". The result is passed to the <xref:System.String.Concat%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> method and displayed to the console.  \\n  \\n [!code-csharp[System.String.Concat#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.concat/cs/concat3.cs#4)]\\n [!code-vb[System.String.Concat#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.string.concat/vb/concat3.vb#4)]\"\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(false)]\n\n      public static string Concat<T> (System.Collections.Generic.IEnumerable<T> values);\n    parameters:\n    - id: values\n      type: System.Collections.Generic.IEnumerable`1\n      description: A collection object that implements the <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> interface.\n    typeParameters:\n    - id: T\n      description: The type of the members of <code>values</code>.\n    return:\n      type: System.String\n      description: The concatenated members in <code>values</code>.\n  overload: System.String.Concat``1*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>values</code> is `null`.\n  attributes:\n  - type: System.Runtime.InteropServices.ComVisibleAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/String.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.String.Contains(System.String)\n  commentId: M:System.String.Contains(System.String)\n  id: Contains(System.String)\n  parent: System.String\n  langs:\n  - csharp\n  name: Contains(String)\n  nameWithType: String.Contains(String)\n  fullName: String.Contains(String)\n  type: Method\n  assemblies:\n  - System.Runtime\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Returns a value indicating whether a specified substring occurs within this string.\n  remarks: \"This method performs an ordinal (case-sensitive and culture-insensitive) comparison. The search begins at the first character position of this string and continues through the last character position.  \\n  \\n To determine whether a string contains a specified substring by using something other than ordinal comparison (such as culture-sensitive comparison, or ordinal case-insensitive comparison), you can create a custom method. The following example illustrates one such approach. It defines a <xref:System.String> extension method  that includes a <xref:System.StringComparison> parameter and indicates whether a string contains a substring when using the specified form of string comparison.  \\n  \\n [!code-csharp[System.String.Contains#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.String.Contains/cs/ContainsExt1.cs#1)]\\n [!code-vb[System.String.Contains#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.String.Contains/vb/ContainsExt1.vb#1)]  \\n  \\n The following example then calls the `Contains` extension method to determine whether a substring is found in a string when using ordinal comparison and case-insensitive ordinal comparison.  \\n  \\n [!code-csharp[System.String.Contains#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.String.Contains/cs/ContainsExt1.cs#2)]\\n [!code-vb[System.String.Contains#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.String.Contains/vb/ContainsExt1.vb#2)]  \\n  \\n If you are interested in the position of the substring `value` in the current instance, you can call the <xref:System.String.IndexOf%2A> method to get the starting position of its first occurrence, or you can call the <xref:System.String.LastIndexOf%2A> method to get the starting position of its last occurrence. The example includes a call to the <xref:System.String.IndexOf%28System.String%29> method if a substring is found in a string instance.\"\n  example:\n  - \"The following example determines whether the string \\\"fox\\\" is a substring of a familiar quotation. If \\\"fox\\\" is found in the string, it also displays its starting position.  \\n  \\n [!code-cpp[String.Contains#1](~/samples/snippets/cpp/VS_Snippets_CLR/string.contains/CPP/cont.cpp#1)]\\n [!code-csharp[String.Contains#1](~/samples/snippets/csharp/VS_Snippets_CLR/string.contains/CS/cont.cs#1)]\\n [!code-vb[String.Contains#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/string.contains/VB/cont.vb#1)]\"\n  syntax:\n    content: public bool Contains (string value);\n    parameters:\n    - id: value\n      type: System.String\n      description: The string to seek.\n    return:\n      type: System.Boolean\n      description: '`true` if the <code>value</code> parameter occurs within this string, or if <code>value</code> is the empty string (\"\"); otherwise, `false`.'\n  overload: System.String.Contains*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>value</code> is `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/String.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.String.Copy(System.String)\n  commentId: M:System.String.Copy(System.String)\n  id: Copy(System.String)\n  parent: System.String\n  langs:\n  - csharp\n  name: Copy(String)\n  nameWithType: String.Copy(String)\n  fullName: String.Copy(String)\n  type: Method\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System\n  summary: Creates a new instance of <xref href=\"System.String\"></xref> with the same value as a specified <xref href=\"System.String\"></xref>.\n  remarks: The<xref:System.String.Copy%2A> method returns a <xref:System.String> object that has the same value as the original string but represents a different object reference. It differs from an assignment operation, which assigns an existing string reference to an additional object variable. The example illustrates the difference.\n  example:\n  - \"The following example creates two string objects with different values. When it calls the <xref:System.String.Copy%2A> method to assign the first value to the second string, the output indicates that the strings represent different object references although their values are now equal. On the other hand, when the first string is assigned to the second string, the two strings have identical values because they represent the same object reference.  \\n  \\n [!code-csharp[System.String.Copy#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.copy/cs/copy1.cs#1)]\\n [!code-vb[System.String.Copy#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.string.copy/vb/copy1.vb#1)]\"\n  syntax:\n    content: public static string Copy (string str);\n    parameters:\n    - id: str\n      type: System.String\n      description: The string to copy.\n    return:\n      type: System.String\n      description: A new string with the same value as <code>str</code>.\n  overload: System.String.Copy*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>str</code> is `null`.\n  attributes: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/String.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.String.CopyTo(System.Int32,System.Char[],System.Int32,System.Int32)\n  commentId: M:System.String.CopyTo(System.Int32,System.Char[],System.Int32,System.Int32)\n  id: CopyTo(System.Int32,System.Char[],System.Int32,System.Int32)\n  parent: System.String\n  langs:\n  - csharp\n  name: CopyTo(Int32, Char[], Int32, Int32)\n  nameWithType: String.CopyTo(Int32, Char[], Int32, Int32)\n  fullName: String.CopyTo(Int32, Char[], Int32, Int32)\n  type: Method\n  assemblies:\n  - System.Runtime\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Copies a specified number of characters from a specified position in this instance to a specified position in an array of Unicode characters.\n  remarks: \"This method copies `count` characters from the `sourceIndex` position of this instance to the `destinationIndex` position of `destination` character array. This method does not resize the `destination` character array; it must have a sufficient number of elements to accommodate the copied characters or the method throws an <xref:System.ArgumentOutOfRangeException>.  \\n  \\n `sourceIndex` and `destinationIndex` are zero-based.\"\n  example:\n  - \"The following example demonstrates the <xref:System.String.CopyTo%2A> method.  \\n  \\n [!code-cpp[stringcopyto#1](~/samples/snippets/cpp/VS_Snippets_CLR/stringcopyto/CPP/stringcopyto.cpp#1)]\\n [!code-csharp[stringcopyto#1](~/samples/snippets/csharp/VS_Snippets_CLR/stringcopyto/CS/stringcopyto.cs#1)]\\n [!code-vb[stringcopyto#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/stringcopyto/VB/stringcopyto.vb#1)]\"\n  syntax:\n    content: public void CopyTo (int sourceIndex, char[] destination, int destinationIndex, int count);\n    parameters:\n    - id: sourceIndex\n      type: System.Int32\n      description: The index of the first character in this instance to copy.\n    - id: destination\n      type: System.Char[]\n      description: An array of Unicode characters to which characters in this instance are copied.\n    - id: destinationIndex\n      type: System.Int32\n      description: The index in <code>destination</code> at which the copy operation begins.\n    - id: count\n      type: System.Int32\n      description: The number of characters in this instance to copy to <code>destination</code>.\n  overload: System.String.CopyTo*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>destination</code> is `null`.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"<code>sourceIndex</code>, <code>destinationIndex</code>, or <code>count</code> is negative  \\n  \\n -or-  \\n  \\n <code>sourceIndex</code> does not identify a position in the current instance.  \\n  \\n -or-  \\n  \\n <code>destinationIndex</code> does not identify a valid index in the <code>destination</code> array.  \\n  \\n -or-  \\n  \\n <code>count</code> is greater than the length of the substring from <code>startIndex</code> to the end of this instance  \\n  \\n -or-  \\n  \\n <code>count</code> is greater than the length of the subarray from <code>destinationIndex</code> to the end of the <code>destination</code> array.\"\n  attributes: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/String.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.String.Empty\n  commentId: F:System.String.Empty\n  id: Empty\n  parent: System.String\n  langs:\n  - csharp\n  name: Empty\n  nameWithType: String.Empty\n  fullName: String.Empty\n  type: Field\n  assemblies:\n  - System.Runtime\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Represents the empty string. This field is read-only.\n  remarks: \"The value of this field is the zero-length string, \\\"\\\".  \\n  \\n In application code, this field is most commonly used in assignments to initialize a string variable to an empty string. To test whether the value of a string is either `null` or <xref:System.String.Empty?displayProperty=fullName>, use the <xref:System.String.IsNullOrEmpty%2A> method.\"\n  syntax:\n    content: public static readonly string Empty;\n    return:\n      type: System.String\n      description: ''\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/String.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.String.EndsWith(System.String,System.Boolean,System.Globalization.CultureInfo)\n  commentId: M:System.String.EndsWith(System.String,System.Boolean,System.Globalization.CultureInfo)\n  id: EndsWith(System.String,System.Boolean,System.Globalization.CultureInfo)\n  parent: System.String\n  langs:\n  - csharp\n  name: EndsWith(String, Boolean, CultureInfo)\n  nameWithType: String.EndsWith(String, Boolean, CultureInfo)\n  fullName: String.EndsWith(String, Boolean, CultureInfo)\n  type: Method\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System\n  summary: Determines whether the end of this string instance matches the specified string when compared using the specified culture.\n  remarks: \"This method compares the `value` parameter to the substring at the end of this string that is the same length as `value`, and returns a value that indicates whether they are equal. To be equal, `value` must be a reference to this same instance or match the end of this string.  \\n  \\n This method performs a word (culture-sensitive) comparison using the specified casing and culture.\"\n  example:\n  - \"The following example determines whether a string occurs at the end of another string. The <xref:System.String.EndsWith%2A> method is called several times using case sensitivity, case insensitivity, and different cultures that influence the results of the search.  \\n  \\n [!code-csharp[system.string.EndsWithCI#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.EndsWithCI/cs/ewci.cs#1)]\\n [!code-vb[system.string.EndsWithCI#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.string.EndsWithCI/vb/ewci.vb#1)]\"\n  syntax:\n    content: public bool EndsWith (string value, bool ignoreCase, System.Globalization.CultureInfo culture);\n    parameters:\n    - id: value\n      type: System.String\n      description: The string to compare to the substring at the end of this instance.\n    - id: ignoreCase\n      type: System.Boolean\n      description: '`true` to ignore case during the comparison; otherwise, `false`.'\n    - id: culture\n      type: System.Globalization.CultureInfo\n      description: Cultural information that determines how this instance and <code>value</code> are compared. If <code>culture</code> is `null`, the current culture is used.\n    return:\n      type: System.Boolean\n      description: '`true` if the <code>value</code> parameter matches the end of this string; otherwise, `false`.'\n  overload: System.String.EndsWith*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>value</code> is `null`.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/String.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.String.EndsWith(System.String,System.StringComparison)\n  commentId: M:System.String.EndsWith(System.String,System.StringComparison)\n  id: EndsWith(System.String,System.StringComparison)\n  parent: System.String\n  langs:\n  - csharp\n  name: EndsWith(String, StringComparison)\n  nameWithType: String.EndsWith(String, StringComparison)\n  fullName: String.EndsWith(String, StringComparison)\n  type: Method\n  assemblies:\n  - System.Runtime\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Determines whether the end of this string instance matches the specified string when compared using the specified comparison option.\n  remarks: The <xref:System.String.EndsWith%2A> method compares the `value` parameter to the substring at the end of this string and returns a value that indicates whether they are equal. To be equal, `value` must be a reference to this same string, must be the empty string (\"\"), or must match the end of this string. The type of comparison performed by the <xref:System.String.EndsWith%2A> method depends on the value of the `comparisonType` parameter.\n  example:\n  - \"The following example determines whether a string ends with a particular substring. The results are affected by the choice of culture, whether case is ignored, and whether an ordinal comparison is performed.  \\n  \\n [!code-cpp[System.String.EndsWithCmp#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.EndsWithCmp/cpp/ewcmp.cpp#1)]\\n [!code-csharp[System.String.EndsWithCmp#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.EndsWithCmp/cs/ewcmp.cs#1)]\\n [!code-vb[System.String.EndsWithCmp#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.EndsWithCmp/vb/ewcmp.vb#1)]\"\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(false)]\n\n      public bool EndsWith (string value, StringComparison comparisonType);\n    parameters:\n    - id: value\n      type: System.String\n      description: The string to compare to the substring at the end of this instance.\n    - id: comparisonType\n      type: System.StringComparison\n      description: One of the enumeration values that determines how this string and <code>value</code> are compared.\n    return:\n      type: System.Boolean\n      description: '`true` if the <code>value</code> parameter matches the end of this string; otherwise, `false`.'\n  overload: System.String.EndsWith*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>value</code> is `null`.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>comparisonType</code> is not a <xref href=\"System.StringComparison\"></xref> value.\n  attributes:\n  - type: System.Runtime.InteropServices.ComVisibleAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/String.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.String.EndsWith(System.String)\n  commentId: M:System.String.EndsWith(System.String)\n  id: EndsWith(System.String)\n  parent: System.String\n  langs:\n  - csharp\n  name: EndsWith(String)\n  nameWithType: String.EndsWith(String)\n  fullName: String.EndsWith(String)\n  type: Method\n  assemblies:\n  - System.Runtime\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Determines whether the end of this string instance matches the specified string.\n  remarks: \"This method compares `value` to the substring at the end of this instance that is the same length as `value`, and returns an indication whether they are equal. To be equal, `value` must be a reference to this same instance or match the end of this instance.  \\n  \\n This method performs a word (case-sensitive and culture-sensitive) comparison using the current culture.\"\n  example:\n  - \"The following example indicates whether each string in an array ends with a period (\\\".\\\").  \\n  \\n [!code-csharp[System.String.EndsWith#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.String.EndsWith/cs/EndsWith1.cs#1)]\\n [!code-vb[System.String.EndsWith#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.String.EndsWith/vb/EndsWith1.vb#1)]  \\n  \\n The following example defines a `StripEndTags` method that uses the <xref:System.String.EndsWith%28System.String%29> method to remove HTML end tags from the end of a line. Note that the  `StripEndTags` method is called recursively to ensure that multiple HTML end tags at the end of the line are removed.  \\n  \\n [!code-cpp[stringendswith#1](~/samples/snippets/cpp/VS_Snippets_CLR/stringendswith/CPP/stringendswith.cpp#1)]\\n [!code-csharp[stringendswith#1](~/samples/snippets/csharp/VS_Snippets_CLR/stringendswith/CS/stringendswith.cs#1)]\\n [!code-vb[stringendswith#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/stringendswith/VB/stringendswith.vb#1)]\"\n  syntax:\n    content: public bool EndsWith (string value);\n    parameters:\n    - id: value\n      type: System.String\n      description: The string to compare to the substring at the end of this instance.\n    return:\n      type: System.Boolean\n      description: '`true` if <code>value</code> matches the end of this instance; otherwise, `false`.'\n  overload: System.String.EndsWith*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>value</code> is `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/String.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.String.EndsWith(System.Char)\n  commentId: M:System.String.EndsWith(System.Char)\n  id: EndsWith(System.Char)\n  parent: System.String\n  langs:\n  - csharp\n  name: EndsWith(Char)\n  nameWithType: String.EndsWith(Char)\n  fullName: String.EndsWith(Char)\n  type: Method\n  assemblies:\n  - System.Runtime\n  namespace: System\n  syntax:\n    content: public bool EndsWith (char value);\n    parameters:\n    - id: value\n      type: System.Char\n      description: ''\n    return:\n      type: System.Boolean\n      description: ''\n  overload: System.String.EndsWith*\n  exceptions: []\n  version:\n  - netcore-2.0\n  monikers:\n  - netcore-2.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/String.xml\n- uid: System.String.Equals(System.Object)\n  commentId: M:System.String.Equals(System.Object)\n  id: Equals(System.Object)\n  parent: System.String\n  langs:\n  - csharp\n  name: Equals(Object)\n  nameWithType: String.Equals(Object)\n  fullName: String.Equals(Object)\n  type: Method\n  assemblies:\n  - System.Runtime\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Determines whether this instance and a specified object, which must also be a <xref href=\"System.String\"></xref> object, have the same value.\n  remarks: This method performs an ordinal (case-sensitive and culture-insensitive) comparison.\n  example:\n  - \"The following example demonstrates the <xref:System.String.Equals%2A> method.  \\n  \\n [!code-cpp[string.equals#1](~/samples/snippets/cpp/VS_Snippets_CLR/string.equals/CPP/equals.cpp#1)]\\n [!code-csharp[string.equals#1](~/samples/snippets/csharp/VS_Snippets_CLR/string.equals/CS/equals.cs#1)]\\n [!code-vb[string.equals#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/string.equals/VB/equals.vb#1)]\"\n  syntax:\n    content: public override bool Equals (object obj);\n    parameters:\n    - id: obj\n      type: System.Object\n      description: The string to compare to this instance.\n    return:\n      type: System.Boolean\n      description: '`true` if <code>obj</code> is a <xref href=\"System.String\"></xref> and its value is the same as this instance; otherwise, `false`.  If <code>obj</code> is `null`, the method returns `false`.'\n  overload: System.String.Equals*\n  exceptions: []\n  attributes: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/String.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.String.Equals(System.String)\n  commentId: M:System.String.Equals(System.String)\n  id: Equals(System.String)\n  parent: System.String\n  langs:\n  - csharp\n  name: Equals(String)\n  nameWithType: String.Equals(String)\n  fullName: String.Equals(String)\n  type: Method\n  assemblies:\n  - System.Runtime\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Determines whether this instance and another specified <xref href=\"System.String\"></xref> object have the same value.\n  remarks: This method performs an ordinal (case-sensitive and culture-insensitive) comparison.\n  example:\n  - \"The following example demonstrates the <xref:System.String.Equals%2A> method.It compares the title-cased word \\\"File\\\" with an equivalent word, its lowercase equivalent, its uppercase equivalent, and a word that contains LATIN SMALL LETTER DOTLESS I (U+0131) instead of LATIN SMALL LETTER I (U+0069). Because the <xref:System.String.Equals%28System.String%29> method performs an ordinal comparison, only the comparison with an identical word returns `true`.  \\n  \\n [!code-csharp[System.String.Equals#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.equals/cs/equalsex1.cs#2)]\\n [!code-vb[System.String.Equals#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.string.equals/vb/equalsex1.vb#2)]\"\n  syntax:\n    content: public bool Equals (string value);\n    parameters:\n    - id: value\n      type: System.String\n      description: The string to compare to this instance.\n    return:\n      type: System.Boolean\n      description: '`true` if the value of the <code>value</code> parameter is the same as the value of this instance; otherwise, `false`. If <code>value</code> is `null`, the method returns `false`.'\n  overload: System.String.Equals*\n  exceptions: []\n  attributes: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/String.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.String.Equals(System.String,System.String)\n  commentId: M:System.String.Equals(System.String,System.String)\n  id: Equals(System.String,System.String)\n  parent: System.String\n  langs:\n  - csharp\n  name: Equals(String, String)\n  nameWithType: String.Equals(String, String)\n  fullName: String.Equals(String, String)\n  type: Method\n  assemblies:\n  - System.Runtime\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Determines whether two specified <xref href=\"System.String\"></xref> objects have the same value.\n  remarks: This method performs an ordinal (case-sensitive and culture-insensitive) comparison.\n  example:\n  - \"The following example demonstrates the <xref:System.String.Equals%2A> method.  \\n  \\n [!code-cpp[string.equals#1](~/samples/snippets/cpp/VS_Snippets_CLR/string.equals/CPP/equals.cpp#1)]\\n [!code-csharp[string.equals#1](~/samples/snippets/csharp/VS_Snippets_CLR/string.equals/CS/equals.cs#1)]\\n [!code-vb[string.equals#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/string.equals/VB/equals.vb#1)]\"\n  syntax:\n    content: public static bool Equals (string a, string b);\n    parameters:\n    - id: a\n      type: System.String\n      description: The first string to compare, or `null`.\n    - id: b\n      type: System.String\n      description: The second string to compare, or `null`.\n    return:\n      type: System.Boolean\n      description: '`true` if the value of <code>a</code> is the same as the value of <code>b</code>; otherwise, `false`. If both <code>a</code> and <code>b</code> are `null`, the method returns `true`.'\n  overload: System.String.Equals*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/String.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.String.Equals(System.String,System.StringComparison)\n  commentId: M:System.String.Equals(System.String,System.StringComparison)\n  id: Equals(System.String,System.StringComparison)\n  parent: System.String\n  langs:\n  - csharp\n  name: Equals(String, StringComparison)\n  nameWithType: String.Equals(String, StringComparison)\n  fullName: String.Equals(String, StringComparison)\n  type: Method\n  assemblies:\n  - System.Runtime\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Determines whether this string and a specified <xref href=\"System.String\"></xref> object have the same value. A parameter specifies the culture, case, and sort rules used in the comparison.\n  remarks: The `comparisonType` parameter indicates whether the comparison should use the current or invariant culture, honor or ignore the case of the two strings being compared, or use word or ordinal sort rules.\n  example:\n  - \"The following example creates a string array that consists of an uppercase \\\"I\\\", a lowercase \\\"i\\\", and a dotless \\\"Ä±\\\". It then calls the <xref:System.String.Equals%28System.String%2CSystem.StringComparison%29> method to compare them by using each possible <xref:System.StringComparison> enumeration value.  \\n  \\n [!code-csharp[System.String.Equals#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.equals/cs/eqcmp.cs#1)]\\n [!code-vb[System.String.Equals#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.string.equals/vb/eqcmp.vb#1)]  \\n  \\n The following example compares four sets of words by using each member of the <xref:System.StringComparison> enumeration.  The comparisons use the conventions of the English (United States) and Sami (Upper Sweden) cultures. Note that the strings \\\"encyclopÃ¦dia\\\" and \\\"encyclopedia\\\" are considered equivalent in the en-US culture but not in the Sami (Northern Sweden) culture.  \\n  \\n [!code-csharp[System.String.Equals#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.equals/cs/equals_ex4.cs#4)]\\n [!code-vb[System.String.Equals#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.string.equals/vb/equals_ex4.vb#4)]\"\n  syntax:\n    content: public bool Equals (string value, StringComparison comparisonType);\n    parameters:\n    - id: value\n      type: System.String\n      description: The string to compare to this instance.\n    - id: comparisonType\n      type: System.StringComparison\n      description: One of the enumeration values that specifies how the strings will be compared.\n    return:\n      type: System.Boolean\n      description: '`true` if the value of the <code>value</code> parameter is the same as this string; otherwise, `false`.'\n  overload: System.String.Equals*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>comparisonType</code> is not a <xref href=\"System.StringComparison\"></xref> value.\n  attributes: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/String.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.String.Equals(System.String,System.String,System.StringComparison)\n  commentId: M:System.String.Equals(System.String,System.String,System.StringComparison)\n  id: Equals(System.String,System.String,System.StringComparison)\n  parent: System.String\n  langs:\n  - csharp\n  name: Equals(String, String, StringComparison)\n  nameWithType: String.Equals(String, String, StringComparison)\n  fullName: String.Equals(String, String, StringComparison)\n  type: Method\n  assemblies:\n  - System.Runtime\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Determines whether two specified <xref href=\"System.String\"></xref> objects have the same value. A parameter specifies the culture, case, and sort rules used in the comparison.\n  remarks: The `comparisonType` parameter indicates whether the comparison should use the current or invariant culture, honor or ignore the case of the two strings being compared, or use word or ordinal sort rules.\n  example:\n  - \"The following example compares four sets of words by using each member of the <xref:System.StringComparison> enumeration.  The comparisons use the conventions of the English (United States) and Sami (Upper Sweden) cultures. Note that the strings \\\"encyclopÃ¦dia\\\" and \\\"encyclopedia\\\" are considered equivalent in the en-US culture but not in the Sami (Northern Sweden) culture.  \\n  \\n [!code-csharp[System.String.Equals#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.equals/cs/equals_ex3.cs#3)]\\n [!code-vb[System.String.Equals#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.string.equals/vb/equals_ex3.vb#3)]\"\n  syntax:\n    content: public static bool Equals (string a, string b, StringComparison comparisonType);\n    parameters:\n    - id: a\n      type: System.String\n      description: The first string to compare, or `null`.\n    - id: b\n      type: System.String\n      description: The second string to compare, or `null`.\n    - id: comparisonType\n      type: System.StringComparison\n      description: One of the enumeration values that specifies the rules for the comparison.\n    return:\n      type: System.Boolean\n      description: '`true` if the value of the <code>a</code> parameter is equal to the value of the <code>b</code> parameter; otherwise, `false`.'\n  overload: System.String.Equals*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>comparisonType</code> is not a <xref href=\"System.StringComparison\"></xref> value.\n  attributes: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/String.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.String.Format(System.IFormatProvider,System.String,System.Object,System.Object,System.Object)\n  commentId: M:System.String.Format(System.IFormatProvider,System.String,System.Object,System.Object,System.Object)\n  id: Format(System.IFormatProvider,System.String,System.Object,System.Object,System.Object)\n  parent: System.String\n  langs:\n  - csharp\n  name: Format(IFormatProvider, String, Object, Object, Object)\n  nameWithType: String.Format(IFormatProvider, String, Object, Object, Object)\n  fullName: String.Format(IFormatProvider, String, Object, Object, Object)\n  type: Method\n  assemblies:\n  - System.Runtime\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Replaces the format items in a specified string with the string representation of three specified objects. An parameter supplies culture-specific formatting information.\n  remarks: >-\n    > [!NOTE]\n\n    >  For examples and comprehensive usage information about this and other overloads of the `Format` method, see the <xref:System.String.Format%2A> overload summary.\n  syntax:\n    content: public static string Format (IFormatProvider provider, string format, object arg0, object arg1, object arg2);\n    parameters:\n    - id: provider\n      type: System.IFormatProvider\n      description: An object that supplies culture-specific formatting information.\n    - id: format\n      type: System.String\n      description: A [composite format string](~/docs/standard/base-types/composite-formatting.md).\n    - id: arg0\n      type: System.Object\n      description: The first object to format.\n    - id: arg1\n      type: System.Object\n      description: The second object to format.\n    - id: arg2\n      type: System.Object\n      description: The third object to format.\n    return:\n      type: System.String\n      description: A copy of <code>format</code> in which the format items have been replaced by the string representations of <code>arg0</code>, <code>arg1</code>, and <code>arg2</code>.\n  overload: System.String.Format*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>format</code>, <code>arg0</code>, <code>arg1</code>, or <code>arg2</code> is `null`.\n  - type: System.FormatException\n    commentId: T:System.FormatException\n    description: \"<code>format</code> is invalid.  \\n  \\n -or-  \\n  \\n The index of a format item is less than zero, or greater than or equal to three.\"\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/String.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.String.Format(System.String,System.Object,System.Object,System.Object)\n  commentId: M:System.String.Format(System.String,System.Object,System.Object,System.Object)\n  id: Format(System.String,System.Object,System.Object,System.Object)\n  parent: System.String\n  langs:\n  - csharp\n  name: Format(String, Object, Object, Object)\n  nameWithType: String.Format(String, Object, Object, Object)\n  fullName: String.Format(String, Object, Object, Object)\n  type: Method\n  assemblies:\n  - System.Runtime\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Replaces the format items in a specified string with the string representation of three specified objects.\n  remarks: >-\n    > [!NOTE]\n\n    >  For examples and comprehensive usage information about this and other overloads of the `Format` method, see the <xref:System.String.Format%2A> overload summary.\n  syntax:\n    content: public static string Format (string format, object arg0, object arg1, object arg2);\n    parameters:\n    - id: format\n      type: System.String\n      description: A [composite format string](~/docs/standard/base-types/composite-formatting.md).\n    - id: arg0\n      type: System.Object\n      description: The first object to format.\n    - id: arg1\n      type: System.Object\n      description: The second object to format.\n    - id: arg2\n      type: System.Object\n      description: The third object to format.\n    return:\n      type: System.String\n      description: A copy of <code>format</code> in which the format items have been replaced by the string representations of <code>arg0</code>, <code>arg1</code>, and <code>arg2</code>.\n  overload: System.String.Format*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>format</code> is `null`.\n  - type: System.FormatException\n    commentId: T:System.FormatException\n    description: \"<code>format</code> is invalid.  \\n  \\n -or-  \\n  \\n The index of a format item is less than zero, or greater than two.\"\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/String.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.String.Format(System.IFormatProvider,System.String,System.Object,System.Object)\n  commentId: M:System.String.Format(System.IFormatProvider,System.String,System.Object,System.Object)\n  id: Format(System.IFormatProvider,System.String,System.Object,System.Object)\n  parent: System.String\n  langs:\n  - csharp\n  name: Format(IFormatProvider, String, Object, Object)\n  nameWithType: String.Format(IFormatProvider, String, Object, Object)\n  fullName: String.Format(IFormatProvider, String, Object, Object)\n  type: Method\n  assemblies:\n  - System.Runtime\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Replaces the format items in a specified string with the string representation of two specified objects. A parameter supplies culture-specific formatting information.\n  remarks: >-\n    > [!NOTE]\n\n    >  For examples and comprehensive usage information about this and other overloads of the `Format` method, see the <xref:System.String.Format%2A> overload summary.\n  syntax:\n    content: public static string Format (IFormatProvider provider, string format, object arg0, object arg1);\n    parameters:\n    - id: provider\n      type: System.IFormatProvider\n      description: An object that supplies culture-specific formatting information.\n    - id: format\n      type: System.String\n      description: A [composite format string](~/docs/standard/base-types/composite-formatting.md).\n    - id: arg0\n      type: System.Object\n      description: The first object to format.\n    - id: arg1\n      type: System.Object\n      description: The second object to format.\n    return:\n      type: System.String\n      description: A copy of <code>format</code> in which format items are replaced by the string representations of <code>arg0</code> and <code>arg1</code>.\n  overload: System.String.Format*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>format</code>, <code>arg0</code>, or <code>arg1</code> is `null`.\n  - type: System.FormatException\n    commentId: T:System.FormatException\n    description: \"<code>format</code> is invalid.  \\n  \\n -or-  \\n  \\n The index of a format item is less than zero, or greater than or equal to two.\"\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/String.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.String.Format(System.String,System.Object,System.Object)\n  commentId: M:System.String.Format(System.String,System.Object,System.Object)\n  id: Format(System.String,System.Object,System.Object)\n  parent: System.String\n  langs:\n  - csharp\n  name: Format(String, Object, Object)\n  nameWithType: String.Format(String, Object, Object)\n  fullName: String.Format(String, Object, Object)\n  type: Method\n  assemblies:\n  - System.Runtime\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Replaces the format items in a specified string with the string representation of two specified objects.\n  remarks: >-\n    > [!NOTE]\n\n    >  For examples and comprehensive usage information about this and other overloads of the `Format` method, see the <xref:System.String.Format%2A> overload summary.\n  syntax:\n    content: public static string Format (string format, object arg0, object arg1);\n    parameters:\n    - id: format\n      type: System.String\n      description: A [composite format string](~/docs/standard/base-types/composite-formatting.md).\n    - id: arg0\n      type: System.Object\n      description: The first object to format.\n    - id: arg1\n      type: System.Object\n      description: The second object to format.\n    return:\n      type: System.String\n      description: A copy of <code>format</code> in which format items are replaced by the string representations of <code>arg0</code> and <code>arg1</code>.\n  overload: System.String.Format*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>format</code> is `null`.\n  - type: System.FormatException\n    commentId: T:System.FormatException\n    description: \"<code>format</code> is invalid.  \\n  \\n -or-  \\n  \\n The index of a format item is not zero or one.\"\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/String.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.String.Format(System.IFormatProvider,System.String,System.Object)\n  commentId: M:System.String.Format(System.IFormatProvider,System.String,System.Object)\n  id: Format(System.IFormatProvider,System.String,System.Object)\n  parent: System.String\n  langs:\n  - csharp\n  name: Format(IFormatProvider, String, Object)\n  nameWithType: String.Format(IFormatProvider, String, Object)\n  fullName: String.Format(IFormatProvider, String, Object)\n  type: Method\n  assemblies:\n  - System.Runtime\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Replaces the format item or items in a specified string with the string representation of the corresponding object. A parameter supplies culture-specific formatting information.\n  remarks: >-\n    > [!NOTE]\n\n    >  For examples and comprehensive usage information about this and other overloads of the `Format` method, see the <xref:System.String.Format%2A> overload summary.\n  syntax:\n    content: public static string Format (IFormatProvider provider, string format, object arg0);\n    parameters:\n    - id: provider\n      type: System.IFormatProvider\n      description: An object that supplies culture-specific formatting information.\n    - id: format\n      type: System.String\n      description: A [composite format string](~/docs/standard/base-types/composite-formatting.md).\n    - id: arg0\n      type: System.Object\n      description: The object to format.\n    return:\n      type: System.String\n      description: A copy of <code>format</code> in which the format item or items have been replaced by the string representation of <code>arg0</code>.\n  overload: System.String.Format*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>format</code> or <code>arg0</code> is `null`.\n  - type: System.FormatException\n    commentId: T:System.FormatException\n    description: \"<code>format</code> is invalid.  \\n  \\n -or-  \\n  \\n The index of a format item is less than zero, or greater than or equal to one.\"\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/String.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.String.Format(System.String,System.Object[])\n  commentId: M:System.String.Format(System.String,System.Object[])\n  id: Format(System.String,System.Object[])\n  parent: System.String\n  langs:\n  - csharp\n  name: Format(String, Object[])\n  nameWithType: String.Format(String, Object[])\n  fullName: String.Format(String, Object[])\n  type: Method\n  assemblies:\n  - System.Runtime\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Replaces the format item in a specified string with the string representation of a corresponding object in a specified array.\n  remarks: >-\n    > [!NOTE]\n\n    >  For examples and comprehensive usage information about this and other overloads of the `Format` method, see the <xref:System.String.Format%2A> overload summary.\n  syntax:\n    content: public static string Format (string format, object[] args);\n    parameters:\n    - id: format\n      type: System.String\n      description: A [composite format string](~/docs/standard/base-types/composite-formatting.md).\n    - id: args\n      type: System.Object[]\n      description: An object array that contains zero or more objects to format.\n    return:\n      type: System.String\n      description: A copy of <code>format</code> in which the format items have been replaced by the string representation of the corresponding objects in <code>args</code>.\n  overload: System.String.Format*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>format</code> or <code>args</code> is `null`.\n  - type: System.FormatException\n    commentId: T:System.FormatException\n    description: \"<code>format</code> is invalid.  \\n  \\n -or-  \\n  \\n The index of a format item is less than zero, or greater than or equal to the length of the <code>args</code> array.\"\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/String.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.String.Format(System.String,System.Object)\n  commentId: M:System.String.Format(System.String,System.Object)\n  id: Format(System.String,System.Object)\n  parent: System.String\n  langs:\n  - csharp\n  name: Format(String, Object)\n  nameWithType: String.Format(String, Object)\n  fullName: String.Format(String, Object)\n  type: Method\n  assemblies:\n  - System.Runtime\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Replaces one or more format items in a specified string with the string representation of a specified object.\n  remarks: >-\n    > [!NOTE]\n\n    >  For examples and comprehensive usage information about this and other overloads of the `Format` method, see the <xref:System.String.Format%2A> overload summary.\n  syntax:\n    content: public static string Format (string format, object arg0);\n    parameters:\n    - id: format\n      type: System.String\n      description: A [composite format string](~/docs/standard/base-types/composite-formatting.md).\n    - id: arg0\n      type: System.Object\n      description: The object to format.\n    return:\n      type: System.String\n      description: A copy of <code>format</code> in which any format items are replaced by the string representation of <code>arg0</code>.\n  overload: System.String.Format*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>format</code> is `null`.\n  - type: System.FormatException\n    commentId: T:System.FormatException\n    description: \"The format item in <code>format</code> is invalid.  \\n  \\n -or-  \\n  \\n The index of a format item is not zero.\"\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/String.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.String.Format(System.IFormatProvider,System.String,System.Object[])\n  commentId: M:System.String.Format(System.IFormatProvider,System.String,System.Object[])\n  id: Format(System.IFormatProvider,System.String,System.Object[])\n  parent: System.String\n  langs:\n  - csharp\n  name: Format(IFormatProvider, String, Object[])\n  nameWithType: String.Format(IFormatProvider, String, Object[])\n  fullName: String.Format(IFormatProvider, String, Object[])\n  type: Method\n  assemblies:\n  - System.Runtime\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Replaces the format items in a specified string with the string representations of corresponding objects in a specified array. A parameter supplies culture-specific formatting information.\n  remarks: >-\n    > [!NOTE]\n\n    >  For examples and comprehensive usage information about this and other overloads of the `Format` method, see the <xref:System.String.Format%2A> overload summary.\n  syntax:\n    content: public static string Format (IFormatProvider provider, string format, object[] args);\n    parameters:\n    - id: provider\n      type: System.IFormatProvider\n      description: An object that supplies culture-specific formatting information.\n    - id: format\n      type: System.String\n      description: A [composite format string](~/docs/standard/base-types/composite-formatting.md).\n    - id: args\n      type: System.Object[]\n      description: An object array that contains zero or more objects to format.\n    return:\n      type: System.String\n      description: A copy of <code>format</code> in which the format items have been replaced by the string representation of the corresponding objects in <code>args</code>.\n  overload: System.String.Format*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>format</code> or <code>args</code> is `null`.\n  - type: System.FormatException\n    commentId: T:System.FormatException\n    description: \"<code>format</code> is invalid.  \\n  \\n -or-  \\n  \\n The index of a format item is less than zero, or greater than or equal to the length of the <code>args</code> array.\"\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/String.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.String.GetEnumerator\n  commentId: M:System.String.GetEnumerator\n  id: GetEnumerator\n  parent: System.String\n  langs:\n  - csharp\n  name: GetEnumerator()\n  nameWithType: String.GetEnumerator()\n  fullName: String.GetEnumerator()\n  type: Method\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System\n  summary: Retrieves an object that can iterate through the individual characters in this string.\n  remarks: \"> [!TIP]\\n>  Rather than calling the <xref:System.String.GetEnumerator%2A> method to retrieve a <xref:System.CharEnumerator> object that you then use to enumerate a string, you should instead use your language's iteration construct ( in C#,  in C++/CLR, and  in Visual Basic).                   [foreach](~/docs/csharp/language-reference/keywords/foreach-in.md) in C#,                  [for each](http://msdn.microsoft.com/library/0c3a364b-2747-43f3-bb8d-b7d3b7023f79) in C++/CLR, and                  [For Each](~/docs/visual-basic/language-reference/statements/for-each-next-statement.md) in Visual Basic).  \\n  \\n This method enables you to iterate the individual characters in a string. For example, the Visual Basic `For Each` and C# `foreach` statements invoke this method to return a <xref:System.CharEnumerator> object that can provide read-only access to the characters in this string instance.\"\n  example:\n  - \"The following example iterates the characters in several strings and displays information about their individual characters. It uses the language iteration construct rather than a call to the <xref:System.String.GetEnumerator%2A> method.  \\n  \\n [!code-cpp[system.string.getenumerator#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.GetEnumerator/CPP/getenumerator.cpp#1)]\\n [!code-csharp[system.string.getenumerator#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.GetEnumerator/CS/getenumerator.cs#1)]\\n [!code-vb[system.string.getenumerator#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.GetEnumerator/VB/getenumerator.vb#1)]\"\n  syntax:\n    content: public CharEnumerator GetEnumerator ();\n    parameters: []\n    return:\n      type: System.CharEnumerator\n      description: An enumerator object.\n  overload: System.String.GetEnumerator*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/String.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.String.GetHashCode\n  commentId: M:System.String.GetHashCode\n  id: GetHashCode\n  parent: System.String\n  langs:\n  - csharp\n  name: GetHashCode()\n  nameWithType: String.GetHashCode()\n  fullName: String.GetHashCode()\n  type: Method\n  assemblies:\n  - System.Runtime\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Returns the hash code for this string.\n  remarks: \"The behavior of <xref:System.String.GetHashCode%2A> is dependent on its implementation, which might change from one version of the common language runtime to another. A reason why this might happen is to improve the performance of <xref:System.String.GetHashCode%2A>.  \\n  \\n> [!IMPORTANT]\\n>  If two string objects are equal, the <xref:System.String.GetHashCode%2A> method returns identical values. However, there is not a unique hash code value for each unique string value. Different strings can return the same hash code.  \\n>   \\n>  The hash code itself is not guaranteed to be stable. Hash codes for identical strings can differ across versions of the .NET Framework and across platforms (such as 32-bit and 64-bit) for a single version of the .NET Framework. In some cases, they can even differ by application domain. This implies two subsequent runs of the same program may return different hash codes.  \\n>   \\n>  As a result, hash codes should never be used outside of the application domain in which they were created, they should never be used as key fields in a collection, and they should never be persisted.  \\n>   \\n>  Finally, do not use the hash code instead of a value returned by a cryptographic hashing function if you need a cryptographically strong hash. For cryptographic hashes, use a class derived from the <xref:System.Security.Cryptography.HashAlgorithm?displayProperty=fullName> or <xref:System.Security.Cryptography.KeyedHashAlgorithm?displayProperty=fullName> class.  \\n>   \\n>  For more information about hash codes, see <xref:System.Object.GetHashCode%2A?displayProperty=fullName>.  \\n  \\n In desktop apps, you can use the             [\\\\<UseRandomizedStringHashAlgorithm> element](~/docs/framework/configure-apps/file-schema/runtime/userandomizedstringhashalgorithm-element.md) to generate unique hash codes on a per application domain basis. This can reduce the number of collisions and improve the overall performance of insertions and lookups that use hash tables. The following example shows how to use the                [\\\\<UseRandomizedStringHashAlgorithm> element](~/docs/framework/configure-apps/file-schema/runtime/userandomizedstringhashalgorithm-element.md). It defines a  to generate unique hash codes on a per application domain basis. This can reduce the number of collisions and improve the overall performance of insertions and lookups that use hash tables. The following example shows how to use the . It defines a `DisplayString` class that includes a private string constant, `s`, whose value is \\\"This is a string.\\\" It also includes a `ShowStringHashCode` method that displays the string value and its hash code along with the name of the application domain in which the method is executing.  \\n  \\n [!code-csharp[System.String.GetHashCode#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.GetHashCode/CS/perdomain.cs#2)]\\n [!code-vb[System.String.GetHashCode#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.GetHashCode/VB/perdomain.vb#2)]  \\n  \\n When you run the example without supplying a configuration file, it displays output similar to the following. Note that the hash codes for the string are identical in the two application domains.  \\n  \\n```  \\n  \\nString 'This is a string.' in domain 'PerDomain.exe': 941BCEAC  \\nString 'This is a string.' in domain 'NewDomain': 941BCEAC  \\n  \\n```  \\n  \\n However, if you add the following configuration file to the example's directory and then run the example, the hash codes for the same string will differ by application domain.  \\n  \\n```  \\n  \\n<?xml version =\\\"1.0\\\"?>  \\n<configuration>  \\n   <runtime>  \\n      <UseRandomizedStringHashAlgorithm enabled=\\\"1\\\" />  \\n   </runtime>  \\n</configuration>  \\n  \\n```  \\n  \\n When the configuration file is present, the example displays the following output:  \\n  \\n```  \\n  \\nString 'This is a string.' in domain 'PerDomain.exe': 5435776D  \\nString 'This is a string.' in domain 'NewDomain': 75CC8236  \\n  \\n```  \\n  \\n> [!IMPORTANT]\\n>  Hash codes are used to insert and retrieve keyed objects from hash tables efficiently. However, hash codes do not uniquely identify strings. Identical strings have  equal hash codes, but the common language runtime can also assign the same hash code to different strings. In addition, hash codes can vary by version of the .NET Framework, by platform within a single version, and by application domain. Because of this, you should not serialize or persist hash code values, nor should you use them as keys in a hash table or dictionary.  \\n  \\n For additional information about the use of hash codes and the `GetHashCode` method, see <xref:System.Object.GetHashCode%2A?displayProperty=fullName>.\"\n  example:\n  - \"The following example demonstrates the <xref:System.String.GetHashCode%2A> method using various input strings.  \\n  \\n [!code-cpp[system.string.gethashcode#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.GetHashCode/CPP/gethashcode.cpp#1)]\\n [!code-csharp[system.string.gethashcode#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.GetHashCode/CS/gethashcode.cs#1)]\\n [!code-vb[system.string.gethashcode#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.GetHashCode/VB/gethashcode.vb#1)]\"\n  syntax:\n    content: public override int GetHashCode ();\n    parameters: []\n    return:\n      type: System.Int32\n      description: A 32-bit signed integer hash code.\n  overload: System.String.GetHashCode*\n  exceptions: []\n  attributes: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/String.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.String.GetHashCode(System.StringComparison)\n  commentId: M:System.String.GetHashCode(System.StringComparison)\n  id: GetHashCode(System.StringComparison)\n  parent: System.String\n  langs:\n  - csharp\n  name: GetHashCode(StringComparison)\n  nameWithType: String.GetHashCode(StringComparison)\n  fullName: String.GetHashCode(StringComparison)\n  type: Method\n  assemblies:\n  - System.Runtime\n  namespace: System\n  syntax:\n    content: public int GetHashCode (StringComparison comparisonType);\n    parameters:\n    - id: comparisonType\n      type: System.StringComparison\n      description: ''\n    return:\n      type: System.Int32\n      description: ''\n  overload: System.String.GetHashCode*\n  exceptions: []\n  version:\n  - netcore-2.0\n  monikers:\n  - netcore-2.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/String.xml\n- uid: System.String.GetTypeCode\n  commentId: M:System.String.GetTypeCode\n  id: GetTypeCode\n  parent: System.String\n  langs:\n  - csharp\n  name: GetTypeCode()\n  nameWithType: String.GetTypeCode()\n  fullName: String.GetTypeCode()\n  type: Method\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System\n  summary: Returns the <xref href=\"System.TypeCode\"></xref> for class <xref href=\"System.String\"></xref>.\n  remarks: ''\n  example:\n  - \"The following example displays the <xref:System.TypeCode> enumerated constant for the <xref:System.String> type.  \\n  \\n [!code-cpp[string.gettypecode#1](~/samples/snippets/cpp/VS_Snippets_CLR/string.gettypecode/CPP/gtc.cpp#1)]\\n [!code-csharp[string.gettypecode#1](~/samples/snippets/csharp/VS_Snippets_CLR/string.gettypecode/CS/gtc.cs#1)]\\n [!code-vb[string.gettypecode#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/string.gettypecode/VB/gtc.vb#1)]\"\n  syntax:\n    content: public TypeCode GetTypeCode ();\n    parameters: []\n    return:\n      type: System.TypeCode\n      description: The enumerated constant, <xref href=\"System.TypeCode.String\"></xref>.\n  overload: System.String.GetTypeCode*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/String.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.String.IndexOf(System.String,System.Int32,System.Int32)\n  commentId: M:System.String.IndexOf(System.String,System.Int32,System.Int32)\n  id: IndexOf(System.String,System.Int32,System.Int32)\n  parent: System.String\n  langs:\n  - csharp\n  name: IndexOf(String, Int32, Int32)\n  nameWithType: String.IndexOf(String, Int32, Int32)\n  fullName: String.IndexOf(String, Int32, Int32)\n  type: Method\n  assemblies:\n  - System.Runtime\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Reports the zero-based index of the first occurrence of the specified string in this instance. The search starts at a specified character position and examines a specified number of character positions.\n  remarks: \"Index numbering starts from 0 (zero). The `startIndex` parameter can range from 0 to the length of the string instance.  \\n  \\n This method performs a word (case-sensitive and culture-sensitive) search using the current culture. The search begins at `startIndex` and continues to `startIndex` + `count` -1. The character at `startIndex` + `count` is not included in the search.  \\n  \\n Character sets include ignorable characters, which are characters that are not considered when performing a linguistic or culture-sensitive comparison. In a culture-sensitive search, if `value` contains an ignorable character, the result is equivalent to searching with that character removed. If `value` consists only of one or more ignorable characters, the <xref:System.String.IndexOf%28System.String%2CSystem.Int32%2CSystem.Int32%29> method always returns `startIndex`, which is the character position at which the search begins. In the following example, the <xref:System.String.IndexOf%28System.String%2CSystem.Int32%2CSystem.Int32%29> method is used to find the position of a soft hyphen (U+00AD) followed by an \\\"m\\\" starting in the third through sixth character positions in two strings. Only one of the strings contains the required substring. If the example is run on the [!INCLUDE[netfx40_short](~/includes/netfx40-short-md.md)] or later, in both cases, because the soft hyphen is an ignorable character, the method returns the index of \\\"m\\\" in the string when it performs a culture-sensitive comparison. Note that in the case of the first string, which includes the soft hyphen followed by an \\\"m\\\", the method fails to return the index of the soft hyphen but instead returns the index of the \\\"m\\\".  \\n  \\n [!code-csharp[System.String.IndexOf#23](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.IndexOf/CS/ignorable23.cs#23)]\\n [!code-vb[System.String.IndexOf#23](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.IndexOf/VB/ignorable23.vb#23)]\"\n  example:\n  - \"The following example finds the index of all occurrences of the string \\\"he\\\" within a substring of another string. Note that the number of characters to be searched must be recalculated for each search iteration.  \\n  \\n [!code-cpp[string.indexof8#1](~/samples/snippets/cpp/VS_Snippets_CLR/string.indexof8/CPP/ixof8.cpp#1)]\\n [!code-csharp[string.indexof8#1](~/samples/snippets/csharp/VS_Snippets_CLR/string.indexof8/CS/ixof8.cs#1)]\\n [!code-vb[string.indexof8#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/string.indexof8/VB/ixof8.vb#1)]\"\n  syntax:\n    content: public int IndexOf (string value, int startIndex, int count);\n    parameters:\n    - id: value\n      type: System.String\n      description: The string to seek.\n    - id: startIndex\n      type: System.Int32\n      description: The search starting position.\n    - id: count\n      type: System.Int32\n      description: The number of character positions to examine.\n    return:\n      type: System.Int32\n      description: The zero-based index position of <code>value</code> from the start of the current instance if that string is found, or -1 if it is not. If <code>value</code> is <xref href=\"System.String.Empty\"></xref>, the return value is <code>startIndex</code>.\n  overload: System.String.IndexOf*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>value</code> is `null`.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"<code>count</code> or <code>startIndex</code> is negative.  \\n  \\n -or-  \\n  \\n <code>startIndex</code> is greater than the length of this string.  \\n  \\n -or-  \\n  \\n <code>count</code> is greater than the length of this string minus <code>startIndex</code>.\"\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/String.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.String.IndexOf(System.String,System.Int32,System.Int32,System.StringComparison)\n  commentId: M:System.String.IndexOf(System.String,System.Int32,System.Int32,System.StringComparison)\n  id: IndexOf(System.String,System.Int32,System.Int32,System.StringComparison)\n  parent: System.String\n  langs:\n  - csharp\n  name: IndexOf(String, Int32, Int32, StringComparison)\n  nameWithType: String.IndexOf(String, Int32, Int32, StringComparison)\n  fullName: String.IndexOf(String, Int32, Int32, StringComparison)\n  type: Method\n  assemblies:\n  - System.Runtime\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Reports the zero-based index of the first occurrence of the specified string in the current <xref href=\"System.String\"></xref> object. Parameters specify the starting search position in the current string, the number of characters in the current string to search, and the type of search to use for the specified string.\n  remarks: \"Index numbering starts from 0 (zero). The `startIndex` parameter can range from 0 to the length of the string instance.  \\n  \\n The search begins at `startIndex` and continues to `startIndex` + `count` -1. The character at `startIndex` + `count` is not included in the search.  \\n  \\n The `comparisonType` parameter specifies to search for the `value` parameter using the current or invariant culture, using a case-sensitive or case-insensitive search, and using word or ordinal comparison rules.\"\n  example:\n  - \"The following exampledemonstrates three overloads of the <xref:System.String.IndexOf%2A> method that find the first occurrence of a string within another string using different values of the <xref:System.StringComparison> enumeration.  \\n  \\n [!code-csharp[system.string.IndexOfCmp#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.IndexOfCmp/cs/iocmp.cs#1)]\\n [!code-vb[system.string.IndexOfCmp#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.string.IndexOfCmp/vb/iocmp.vb#1)]\"\n  syntax:\n    content: public int IndexOf (string value, int startIndex, int count, StringComparison comparisonType);\n    parameters:\n    - id: value\n      type: System.String\n      description: The string to seek.\n    - id: startIndex\n      type: System.Int32\n      description: The search starting position.\n    - id: count\n      type: System.Int32\n      description: The number of character positions to examine.\n    - id: comparisonType\n      type: System.StringComparison\n      description: One of the enumeration values that specifies the rules for the search.\n    return:\n      type: System.Int32\n      description: The zero-based index position of the <code>value</code> parameter from the start of the current instance if that string is found, or -1 if it is not. If <code>value</code> is <xref href=\"System.String.Empty\"></xref>, the return value is <code>startIndex</code>.\n  overload: System.String.IndexOf*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>value</code> is `null`.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"<code>count</code> or <code>startIndex</code> is negative.  \\n  \\n -or-  \\n  \\n <code>startIndex</code> is greater than the length of this instance.  \\n  \\n -or-  \\n  \\n <code>count</code> is greater than the length of this string minus <code>startIndex</code>.\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>comparisonType</code> is not a valid <xref href=\"System.StringComparison\"></xref> value.\n  attributes: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/String.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.String.IndexOf(System.String,System.Int32,System.StringComparison)\n  commentId: M:System.String.IndexOf(System.String,System.Int32,System.StringComparison)\n  id: IndexOf(System.String,System.Int32,System.StringComparison)\n  parent: System.String\n  langs:\n  - csharp\n  name: IndexOf(String, Int32, StringComparison)\n  nameWithType: String.IndexOf(String, Int32, StringComparison)\n  fullName: String.IndexOf(String, Int32, StringComparison)\n  type: Method\n  assemblies:\n  - System.Runtime\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Reports the zero-based index of the first occurrence of the specified string in the current <xref href=\"System.String\"></xref> object. Parameters specify the starting search position in the current string and the type of search to use for the specified string.\n  remarks: \"Index numbering starts from 0. The `startIndex` parameter can range from 0 to the length of the string instance. If `startIndex` equals the length of the string instance, the method returns -1.  \\n  \\n The `comparisonType` parameter specifies to search for the `value` parameter using the current or invariant culture, using a case-sensitive or case-insensitive search, and using word or ordinal comparison rules.\"\n  example:\n  - \"The following exampledemonstrates three overloads of the <xref:System.String.IndexOf%2A> method that find the first occurrence of a string within another string using different values of the <xref:System.StringComparison> enumeration.  \\n  \\n [!code-csharp[system.string.IndexOfCmp#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.IndexOfCmp/cs/iocmp.cs#1)]\\n [!code-vb[system.string.IndexOfCmp#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.string.IndexOfCmp/vb/iocmp.vb#1)]\"\n  syntax:\n    content: public int IndexOf (string value, int startIndex, StringComparison comparisonType);\n    parameters:\n    - id: value\n      type: System.String\n      description: The string to seek.\n    - id: startIndex\n      type: System.Int32\n      description: The search starting position.\n    - id: comparisonType\n      type: System.StringComparison\n      description: One of the enumeration values that specifies the rules for the search.\n    return:\n      type: System.Int32\n      description: The zero-based index position of the <code>value</code> parameter from the start of the current instance if that string is found, or -1 if it is not. If <code>value</code> is <xref href=\"System.String.Empty\"></xref>, the return value is <code>startIndex</code>.\n  overload: System.String.IndexOf*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>value</code> is `null`.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>startIndex</code> is less than 0 (zero) or greater than the length of this string.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>comparisonType</code> is not a valid <xref href=\"System.StringComparison\"></xref> value.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/String.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.String.IndexOf(System.Char,System.Int32,System.Int32)\n  commentId: M:System.String.IndexOf(System.Char,System.Int32,System.Int32)\n  id: IndexOf(System.Char,System.Int32,System.Int32)\n  parent: System.String\n  langs:\n  - csharp\n  name: IndexOf(Char, Int32, Int32)\n  nameWithType: String.IndexOf(Char, Int32, Int32)\n  fullName: String.IndexOf(Char, Int32, Int32)\n  type: Method\n  assemblies:\n  - System.Runtime\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Reports the zero-based index of the first occurrence of the specified character in this instance. The search starts at a specified character position and examines a specified number of character positions.\n  remarks: \"The search begins at `startIndex` and continues to `startIndex` + `count` -1. The character at `startIndex` + `count` is not included in the search.  \\n  \\n Index numbering starts from 0 (zero). The `startIndex` parameter can range from 0 to the length of the string instance.  \\n  \\n This method performs an ordinal (culture-insensitive) search, where a character is considered equivalent to another character only if their Unicode scalar values are the same. To perform a culture-sensitive search, use the <xref:System.Globalization.CompareInfo.IndexOf%2A?displayProperty=fullName> method, where a Unicode scalar value representing a precomposed character, such as the ligature \\\"Ã\\\" (U+00C6), might be considered equivalent to any occurrence of the character's components in the correct sequence, such as \\\"AE\\\" (U+0041, U+0045), depending on the culture.\"\n  example:\n  - \"The following example demonstrates the <xref:System.String.IndexOf%2A> method.  \\n  \\n [!code-cpp[system.string.indexof#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.IndexOf/CPP/indexofcii.cpp#1)]\\n [!code-csharp[system.string.indexof#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.IndexOf/CS/indexofcii.cs#1)]\\n [!code-vb[system.string.indexof#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.IndexOf/VB/indexofcii.vb#1)]\"\n  syntax:\n    content: public int IndexOf (char value, int startIndex, int count);\n    parameters:\n    - id: value\n      type: System.Char\n      description: A Unicode character to seek.\n    - id: startIndex\n      type: System.Int32\n      description: The search starting position.\n    - id: count\n      type: System.Int32\n      description: The number of character positions to examine.\n    return:\n      type: System.Int32\n      description: The zero-based index position of <code>value</code> from the start of the string if that character is found, or -1 if it is not.\n  overload: System.String.IndexOf*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"<code>count</code> or <code>startIndex</code> is negative.  \\n  \\n -or-  \\n  \\n <code>startIndex</code> is greater than the length of this string.  \\n  \\n -or-  \\n  \\n <code>count</code> is greater than the length of this string minus <code>startIndex</code>.\"\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/String.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.String.IndexOf(System.String)\n  commentId: M:System.String.IndexOf(System.String)\n  id: IndexOf(System.String)\n  parent: System.String\n  langs:\n  - csharp\n  name: IndexOf(String)\n  nameWithType: String.IndexOf(String)\n  fullName: String.IndexOf(String)\n  type: Method\n  assemblies:\n  - System.Runtime\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Reports the zero-based index of the first occurrence of the specified string in this instance.\n  remarks: \"Index numbering starts from zero.  \\n  \\n This method performs a word (case-sensitive and culture-sensitive) search using the current culture. The search begins at the first character position of this instance and continues until the last character position.  \\n  \\n Character sets include ignorable characters, which are characters that are not considered when performing a linguistic or culture-sensitive comparison. In a culture-sensitive search, if `value` contains an ignorable character, the result is equivalent to searching with that character removed. If `value` consists only of one or more ignorable characters, the<xref:System.String.IndexOf%28System.String%29> method always returns 0 (zero) to indicate that the match is found at the beginning of the current instance. In the following example, the <xref:System.String.IndexOf%28System.String%29> method is used to find three substrings (a soft hyphen (U+00AD), a soft hyphen followed by \\\"n\\\", and a soft hyphen followed by \\\"m\\\") in two strings. Only one of the strings contains a soft hyphen. If the example is run on the [!INCLUDE[netfx40_short](~/includes/netfx40-short-md.md)] or later, in each case, because the soft hyphen is an ignorable character, the result is the same as if the soft hyphen had not been included in `value`. When searching for a soft hyphen only, the method returns 0 (zero) to indicate that it has found a match at the beginning of the string.  \\n  \\n [!code-csharp[System.String.IndexOf#21](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.IndexOf/CS/ignorable21.cs#21)]\\n [!code-vb[System.String.IndexOf#21](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.IndexOf/VB/ignorable21.vb#21)]\"\n  example:\n  - \"The following example searches for the \\\"n\\\" in \\\"animal\\\". Because string indexes begin at zero rather than one, the <xref:System.String.IndexOf%28System.String%29> method indicates that the \\\"n\\\" is at position 1.  \\n  \\n [!code-cpp[System.String.IndexOf#12](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.IndexOf/CPP/simple1.cpp#12)]\\n [!code-csharp[System.String.IndexOf#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.IndexOf/CS/simple1.cs#12)]\\n [!code-vb[System.String.IndexOf#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.IndexOf/VB/simple1.vb#12)]  \\n  \\n The following example uses the <xref:System.String.IndexOf%2A> method to determine the starting position of an animal name in a sentence. It then uses this position to insert an adjective that describes the animal into the sentence.  \\n  \\n [!code-cpp[stringinsert#1](~/samples/snippets/cpp/VS_Snippets_CLR/stringinsert/CPP/stringinsert.cpp#1)]\\n [!code-csharp[stringinsert#1](~/samples/snippets/csharp/VS_Snippets_CLR/stringinsert/CS/stringinsert.cs#1)]\\n [!code-vb[stringinsert#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/stringinsert/VB/stringinsert.vb#1)]\"\n  syntax:\n    content: public int IndexOf (string value);\n    parameters:\n    - id: value\n      type: System.String\n      description: The string to seek.\n    return:\n      type: System.Int32\n      description: The zero-based index position of <code>value</code> if that string is found, or -1 if it is not. If <code>value</code> is <xref href=\"System.String.Empty\"></xref>, the return value is 0.\n  overload: System.String.IndexOf*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>value</code> is `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/String.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.String.IndexOf(System.String,System.Int32)\n  commentId: M:System.String.IndexOf(System.String,System.Int32)\n  id: IndexOf(System.String,System.Int32)\n  parent: System.String\n  langs:\n  - csharp\n  name: IndexOf(String, Int32)\n  nameWithType: String.IndexOf(String, Int32)\n  fullName: String.IndexOf(String, Int32)\n  type: Method\n  assemblies:\n  - System.Runtime\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Reports the zero-based index of the first occurrence of the specified string in this instance. The search starts at a specified character position.\n  remarks: \"Index numbering starts from 0. The `startIndex` parameter can range from 0 to the length of the string instance. If `startIndex` equals the length of the string instance, the method returns -1.  \\n  \\n This method performs a word (case-sensitive and culture-sensitive) search using the current culture. The search begins at the `startIndex` character position of this instance and continues until the last character position.  \\n  \\n Character sets include ignorable characters, which are characters that are not considered when performing a linguistic or culture-sensitive comparison. In a culture-sensitive search, if `value` contains an ignorable character, the result is equivalent to searching with that character removed. If `value` consists only of one or more ignorable characters, the <xref:System.String.IndexOf%28System.String%2CSystem.Int32%29> method always returns `startIndex`, which is the character position at which the search begins. In the following example, the <xref:System.String.IndexOf%28System.String%2CSystem.Int32%29> method is used to find the position of a soft hyphen (U+00AD) followed by an \\\"m\\\" in two strings. Only one of the strings contains the required substring. If the example is run on the [!INCLUDE[netfx40_short](~/includes/netfx40-short-md.md)] or later, in both cases, because the soft hyphen is an ignorable character, the method returns the index of \\\"m\\\" in the string. Note that in the case of the first string, which includes the soft hyphen followed by an \\\"m\\\", the method fails to return the index of the soft hyphen but instead returns the index of the \\\"m\\\".  \\n  \\n [!code-csharp[System.String.IndexOf#22](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.IndexOf/CS/ignorable22.cs#22)]\\n [!code-vb[System.String.IndexOf#22](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.IndexOf/VB/ignorable22.vb#22)]\"\n  example:\n  - \"The following example searches for all occurrences of a specified string within a target string.  \\n  \\n [!code-cpp[stringindexof4#1](~/samples/snippets/cpp/VS_Snippets_CLR/stringindexof4/CPP/stringindexof4.cpp#1)]\\n [!code-csharp[stringindexof4#1](~/samples/snippets/csharp/VS_Snippets_CLR/stringindexof4/CS/stringindexof4.cs#1)]\\n [!code-vb[stringindexof4#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/stringindexof4/VB/stringindexof4.vb#1)]\"\n  syntax:\n    content: public int IndexOf (string value, int startIndex);\n    parameters:\n    - id: value\n      type: System.String\n      description: The string to seek.\n    - id: startIndex\n      type: System.Int32\n      description: The search starting position.\n    return:\n      type: System.Int32\n      description: The zero-based index position of <code>value</code> from the start of the current instance if that string is found, or -1 if it is not. If <code>value</code> is <xref href=\"System.String.Empty\"></xref>, the return value is <code>startIndex</code>.\n  overload: System.String.IndexOf*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>value</code> is `null`.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>startIndex</code> is less than 0 (zero) or greater than the length of this string.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/String.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.String.IndexOf(System.Char,System.Int32)\n  commentId: M:System.String.IndexOf(System.Char,System.Int32)\n  id: IndexOf(System.Char,System.Int32)\n  parent: System.String\n  langs:\n  - csharp\n  name: IndexOf(Char, Int32)\n  nameWithType: String.IndexOf(Char, Int32)\n  fullName: String.IndexOf(Char, Int32)\n  type: Method\n  assemblies:\n  - System.Runtime\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Reports the zero-based index of the first occurrence of the specified Unicode character in this string. The search starts at a specified character position.\n  remarks: \"Index numbering starts from 0. The `startIndex` parameter can range from 0 to the length of the string instance. If `startIndex` equals the length of the string instance, the method returns -1.  \\n  \\n The search ranges from `startIndex` to the end of the string.  \\n  \\n This method performs an ordinal (culture-insensitive) search, where a character is considered equivalent to another character only if their Unicode scalar values are the same. To perform a culture-sensitive search, use the <xref:System.Globalization.CompareInfo.IndexOf%2A?displayProperty=fullName> method, where a Unicode scalar value representing a precomposed character, such as the ligature \\\"Ã\\\" (U+00C6), might be considered equivalent to any occurrence of the character's components in the correct sequence, such as \\\"AE\\\" (U+0041, U+0045), depending on the culture.\"\n  example:\n  - \"The following example demonstrates the <xref:System.String.IndexOf%2A> method.  \\n  \\n [!code-cpp[string.indexof1#1](~/samples/snippets/cpp/VS_Snippets_CLR/string.indexof1/CPP/ixof1.cpp#1)]\\n [!code-csharp[string.indexof1#1](~/samples/snippets/csharp/VS_Snippets_CLR/string.indexof1/CS/ixof1.cs#1)]\\n [!code-vb[string.indexof1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/string.indexof1/VB/ixof1.vb#1)]\"\n  syntax:\n    content: public int IndexOf (char value, int startIndex);\n    parameters:\n    - id: value\n      type: System.Char\n      description: A Unicode character to seek.\n    - id: startIndex\n      type: System.Int32\n      description: The search starting position.\n    return:\n      type: System.Int32\n      description: The zero-based index position of <code>value</code> from the start of the string if that character is found, or -1 if it is not.\n  overload: System.String.IndexOf*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>startIndex</code> is less than 0 (zero) or greater than the length of the string.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/String.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.String.IndexOf(System.String,System.StringComparison)\n  commentId: M:System.String.IndexOf(System.String,System.StringComparison)\n  id: IndexOf(System.String,System.StringComparison)\n  parent: System.String\n  langs:\n  - csharp\n  name: IndexOf(String, StringComparison)\n  nameWithType: String.IndexOf(String, StringComparison)\n  fullName: String.IndexOf(String, StringComparison)\n  type: Method\n  assemblies:\n  - System.Runtime\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Reports the zero-based index of the first occurrence of the specified string in the current <xref href=\"System.String\"></xref> object. A parameter specifies the type of search to use for the specified string.\n  remarks: \"Index numbering starts from zero.  \\n  \\n The `comparisonType` parameter specifies to search for the `value` parameter using the current or invariant culture, using a case-sensitive or case-insensitive search, and using word or ordinal comparison rules.\"\n  example:\n  - \"The following exampledemonstrates three overloads of the <xref:System.String.IndexOf%2A> method that find the first occurrence of a string within another string using different values of the <xref:System.StringComparison> enumeration.  \\n  \\n [!code-csharp[system.string.IndexOfCmp#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.IndexOfCmp/cs/iocmp.cs#1)]\\n [!code-vb[system.string.IndexOfCmp#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.string.IndexOfCmp/vb/iocmp.vb#1)]\"\n  syntax:\n    content: public int IndexOf (string value, StringComparison comparisonType);\n    parameters:\n    - id: value\n      type: System.String\n      description: The string to seek.\n    - id: comparisonType\n      type: System.StringComparison\n      description: One of the enumeration values that specifies the rules for the search.\n    return:\n      type: System.Int32\n      description: The index position of the <code>value</code> parameter if that string is found, or -1 if it is not. If <code>value</code> is <xref href=\"System.String.Empty\"></xref>, the return value is 0.\n  overload: System.String.IndexOf*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>value</code> is `null`.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>comparisonType</code> is not a valid <xref href=\"System.StringComparison\"></xref> value.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/String.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.String.IndexOf(System.Char)\n  commentId: M:System.String.IndexOf(System.Char)\n  id: IndexOf(System.Char)\n  parent: System.String\n  langs:\n  - csharp\n  name: IndexOf(Char)\n  nameWithType: String.IndexOf(Char)\n  fullName: String.IndexOf(Char)\n  type: Method\n  assemblies:\n  - System.Runtime\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Reports the zero-based index of the first occurrence of the specified Unicode character in this string.\n  remarks: \"Index numbering starts from zero.  \\n  \\n This method performs an ordinal (culture-insensitive) search, where a character is considered equivalent to another character only if their Unicode scalar values are the same. To perform a culture-sensitive search, use the <xref:System.Globalization.CompareInfo.IndexOf%2A?displayProperty=fullName> method, where a Unicode scalar value representing a precomposed character, such as the ligature \\\"Ã\\\" (U+00C6), might be considered equivalent to any occurrence of the character's components in the correct sequence, such as \\\"AE\\\" (U+0041, U+0045), depending on the culture.\"\n  example:\n  - \"The following example demonstrates how you can search a <xref:System.String> for a character using the <xref:System.String.IndexOf%2A> method.  \\n  \\n [!code-cpp[System.String.IndexOf#5](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.IndexOf/CPP/indexof_c.cpp#5)]\\n [!code-csharp[System.String.IndexOf#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.IndexOf/CS/indexof_c.cs#5)]\\n [!code-vb[System.String.IndexOf#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.IndexOf/VB/indexof_c.vb#5)]\"\n  syntax:\n    content: public int IndexOf (char value);\n    parameters:\n    - id: value\n      type: System.Char\n      description: A Unicode character to seek.\n    return:\n      type: System.Int32\n      description: The zero-based index position of <code>value</code> if that character is found, or -1 if it is not.\n  overload: System.String.IndexOf*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/String.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.String.IndexOfAny(System.Char[])\n  commentId: M:System.String.IndexOfAny(System.Char[])\n  id: IndexOfAny(System.Char[])\n  parent: System.String\n  langs:\n  - csharp\n  name: IndexOfAny(Char[])\n  nameWithType: String.IndexOfAny(Char[])\n  fullName: String.IndexOfAny(Char[])\n  type: Method\n  assemblies:\n  - System.Runtime\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Reports the zero-based index of the first occurrence in this instance of any character in a specified array of Unicode characters.\n  remarks: \"Index numbering starts from zero.  \\n  \\n The search for `anyOf` is case-sensitive. If `anyOf` is an empty array, the method finds a match at the beginning of the string (that  is, at index zero).  \\n  \\n This method performs an ordinal (culture-insensitive) search, where a character is considered equivalent to another character only if their Unicode scalar values are the same. To perform a culture-sensitive search, use the <xref:System.Globalization.CompareInfo.IndexOf%2A?displayProperty=fullName> method, where a Unicode scalar value representing a precomposed character, such as the ligature \\\"Ã\\\" (U+00C6), might be considered equivalent to any occurrence of the character's components in the correct sequence, such as \\\"AE\\\" (U+0041, U+0045), depending on the culture.\"\n  example:\n  - \"The following example finds the first vowel in a string.  \\n  \\n [!code-csharp[System.String.IndexOfAny#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.String.IndexOfAny/cs/IndexOfAny1.cs#1)]\\n [!code-vb[System.String.IndexOfAny#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.String.IndexOfAny/vb/IndexOfAny1.vb#1)]\"\n  syntax:\n    content: public int IndexOfAny (char[] anyOf);\n    parameters:\n    - id: anyOf\n      type: System.Char[]\n      description: A Unicode character array containing one or more characters to seek.\n    return:\n      type: System.Int32\n      description: The zero-based index position of the first occurrence in this instance where any character in <code>anyOf</code> was found; -1 if no character in <code>anyOf</code> was found.\n  overload: System.String.IndexOfAny*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>anyOf</code> is `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/String.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.String.IndexOfAny(System.Char[],System.Int32)\n  commentId: M:System.String.IndexOfAny(System.Char[],System.Int32)\n  id: IndexOfAny(System.Char[],System.Int32)\n  parent: System.String\n  langs:\n  - csharp\n  name: IndexOfAny(Char[], Int32)\n  nameWithType: String.IndexOfAny(Char[], Int32)\n  fullName: String.IndexOfAny(Char[], Int32)\n  type: Method\n  assemblies:\n  - System.Runtime\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Reports the zero-based index of the first occurrence in this instance of any character in a specified array of Unicode characters. The search starts at a specified character position.\n  remarks: \"Index numbering starts from zero. The `startIndex` parameter can range from 0 to one less than the length of the string instance.  \\n  \\n The search ranges from `startIndex` to the end of the string.  \\n  \\n The search for `anyOf` is case-sensitive.  \\n  \\n This method performs an ordinal (culture-insensitive) search, where a character is considered equivalent to another character only if their Unicode scalar value are the same. To perform a culture-sensitive search, use the <xref:System.Globalization.CompareInfo.IndexOf%2A?displayProperty=fullName> method, where a Unicode scalar value representing a precomposed character, such as the ligature \\\"Ã\\\" (U+00C6), might be considered equivalent to any occurrence of the character's components in the correct sequence, such as \\\"AE\\\" (U+0041, U+0045), depending on the culture.\"\n  example:\n  - \"The following example finds the index of the occurrence of any character of the string \\\"is\\\" within a substring of another string.  \\n  \\n [!code-cpp[string.indexofany2#1](~/samples/snippets/cpp/VS_Snippets_CLR/string.indexofany2/CPP/ixany2.cpp#1)]\\n [!code-csharp[string.indexofany2#1](~/samples/snippets/csharp/VS_Snippets_CLR/string.indexofany2/CS/ixany2.cs#1)]\\n [!code-vb[string.indexofany2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/string.indexofany2/VB/ixany2.vb#1)]\"\n  syntax:\n    content: public int IndexOfAny (char[] anyOf, int startIndex);\n    parameters:\n    - id: anyOf\n      type: System.Char[]\n      description: A Unicode character array containing one or more characters to seek.\n    - id: startIndex\n      type: System.Int32\n      description: The search starting position.\n    return:\n      type: System.Int32\n      description: The zero-based index position of the first occurrence in this instance where any character in <code>anyOf</code> was found; -1 if no character in <code>anyOf</code> was found.\n  overload: System.String.IndexOfAny*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>anyOf</code> is `null`.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"<code>startIndex</code> is negative.  \\n  \\n -or-  \\n  \\n <code>startIndex</code> is greater than the number of characters in this instance.\"\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/String.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.String.IndexOfAny(System.Char[],System.Int32,System.Int32)\n  commentId: M:System.String.IndexOfAny(System.Char[],System.Int32,System.Int32)\n  id: IndexOfAny(System.Char[],System.Int32,System.Int32)\n  parent: System.String\n  langs:\n  - csharp\n  name: IndexOfAny(Char[], Int32, Int32)\n  nameWithType: String.IndexOfAny(Char[], Int32, Int32)\n  fullName: String.IndexOfAny(Char[], Int32, Int32)\n  type: Method\n  assemblies:\n  - System.Runtime\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Reports the zero-based index of the first occurrence in this instance of any character in a specified array of Unicode characters. The search starts at a specified character position and examines a specified number of character positions.\n  remarks: \"The search begins at `startIndex` and continues to `startIndex` + `count` -1. The character at `startIndex` + `count` is not included in the search.  \\n  \\n Index numbering starts from zero. The `startIndex` parameter can range from 0 to one less than the length of the string instance.  \\n  \\n The search for `anyOf` is case-sensitive.  \\n  \\n This method performs an ordinal (culture-insensitive) search, where a character is considered equivalent to another character only if their Unicode scalar value are the same. To perform a culture-sensitive search, use the <xref:System.Globalization.CompareInfo.IndexOf%2A?displayProperty=fullName> method, where a Unicode scalar value representing a precomposed character, such as the ligature \\\"Ã\\\" (U+00C6), might be considered equivalent to any occurrence of the character's components in the correct sequence, such as \\\"AE\\\" (U+0041, U+0045), depending on the culture.\"\n  example:\n  - \"The following example finds the index of the occurrence of any character of the string \\\"aid\\\" within a substring of another string.  \\n  \\n [!code-cpp[string.indexofany3#1](~/samples/snippets/cpp/VS_Snippets_CLR/string.indexofany3/CPP/ixany3.cpp#1)]\\n [!code-csharp[string.indexofany3#1](~/samples/snippets/csharp/VS_Snippets_CLR/string.indexofany3/CS/ixany3.cs#1)]\\n [!code-vb[string.indexofany3#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/string.indexofany3/VB/ixany3.vb#1)]\"\n  syntax:\n    content: public int IndexOfAny (char[] anyOf, int startIndex, int count);\n    parameters:\n    - id: anyOf\n      type: System.Char[]\n      description: A Unicode character array containing one or more characters to seek.\n    - id: startIndex\n      type: System.Int32\n      description: The search starting position.\n    - id: count\n      type: System.Int32\n      description: The number of character positions to examine.\n    return:\n      type: System.Int32\n      description: The zero-based index position of the first occurrence in this instance where any character in <code>anyOf</code> was found; -1 if no character in <code>anyOf</code> was found.\n  overload: System.String.IndexOfAny*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>anyOf</code> is `null`.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"<code>count</code> or <code>startIndex</code> is negative.  \\n  \\n -or-  \\n  \\n <code>count</code> + <code>startIndex</code> is greater than the number of characters in this instance.\"\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/String.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.String.Insert(System.Int32,System.String)\n  commentId: M:System.String.Insert(System.Int32,System.String)\n  id: Insert(System.Int32,System.String)\n  parent: System.String\n  langs:\n  - csharp\n  name: Insert(Int32, String)\n  nameWithType: String.Insert(Int32, String)\n  fullName: String.Insert(Int32, String)\n  type: Method\n  assemblies:\n  - System.Runtime\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Returns a new string in which a specified string is inserted at a specified index position in this instance.\n  remarks: \"If `startIndex` is equal to the length of this instance, `value` is appended to the end of this instance.  \\n  \\n> [!NOTE]\\n>  This method does not modify the value of the current instance. Instead, it returns a new string in which `value` is inserted into the current instance.  \\n  \\n For example, the return value of `\\\"abc\\\".Insert(2, \\\"XYZ\\\")` is \\\"abXYZc\\\".\"\n  example:\n  - \"The following example inserts a space character in the fourth character position (the character at index 3) of a string.  \\n  \\n [!code-csharp[System.String.Insert#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.String.Insert/cs/Insert1.cs#1)]\\n [!code-vb[System.String.Insert#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.String.Insert/vb/Insert1.vb#1)]  \\n  \\n The following console application prompts the users to enter one or more adjectives to describe two animals. It then calls the <xref:System.String.Insert%2A> method to insert the text entered by the user into a string.  \\n  \\n [!code-cpp[stringinsert#1](~/samples/snippets/cpp/VS_Snippets_CLR/stringinsert/CPP/stringinsert.cpp#1)]\\n [!code-csharp[stringinsert#1](~/samples/snippets/csharp/VS_Snippets_CLR/stringinsert/CS/stringinsert.cs#1)]\\n [!code-vb[stringinsert#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/stringinsert/VB/stringinsert.vb#1)]\"\n  syntax:\n    content: public string Insert (int startIndex, string value);\n    parameters:\n    - id: startIndex\n      type: System.Int32\n      description: The zero-based index position of the insertion.\n    - id: value\n      type: System.String\n      description: The string to insert.\n    return:\n      type: System.String\n      description: A new string that is equivalent to this instance, but with <code>value</code> inserted at position <code>startIndex</code>.\n  overload: System.String.Insert*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>value</code> is `null`.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>startIndex</code> is negative or greater than the length of this instance.\n  attributes: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/String.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.String.Intern(System.String)\n  commentId: M:System.String.Intern(System.String)\n  id: Intern(System.String)\n  parent: System.String\n  langs:\n  - csharp\n  name: Intern(String)\n  nameWithType: String.Intern(String)\n  fullName: String.Intern(String)\n  type: Method\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System\n  summary: Retrieves the system's reference to the specified <xref href=\"System.String\"></xref>.\n  remarks: \"The common language runtime conserves string storage by maintaining a table, called the intern pool, that contains a single reference to each unique literal string declared or created programmatically in your program. Consequently, an instance of a literal string with a particular value only exists once in the system.  \\n  \\n For example, if you assign the same literal string to several variables, the runtime retrieves the same reference to the literal string from the intern pool and assigns it to each variable.  \\n  \\n The <xref:System.String.Intern%2A> method uses the intern pool to search for a string equal to the value of `str`. If such a string exists, its reference in the intern pool is returned. If the string does not exist, a reference to `str` is added to the intern pool, then that reference is returned.  \\n  \\n In the following example, the string s1, which has a value of \\\"MyTest\\\", is already interned because it is a literal in the program. The <xref:System.Text.StringBuilder?displayProperty=fullName> class generates a new string object that has the same value as s1. A reference to that string is assigned to s2. The <xref:System.String.Intern%2A> method searches for a string that has the same value as s2. Because such a string exists, the method returns the same reference that is assigned to s1. That reference is then assigned to s3. References s1 and s2 compare unequal because they refer to different objects; references s1 and s3 compare equal because they refer to the same string.  \\n  \\n [!code-csharp[System.String.Intern#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Intern/cs/Intern1.cs#1)]\\n [!code-vb[System.String.Intern#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Intern/vb/Intern1.vb#1)]  \\n  \\n Compare this method to the <xref:System.String.IsInterned%2A> method.  \\n  \\n## Version Considerations  \\n In the [!INCLUDE[net_v35SP1_long](~/includes/net-v35sp1-long-md.md)], the <xref:System.String.Intern%2A> method reverts to its behavior in the .NET Framework 1.0 and 1.1 with regard to interning the empty string. In the following example, the variable `str1` is assigned a reference to <xref:System.String.Empty>, and the variable `str2` is assigned the reference to <xref:System.String.Empty> that is returned by calling the <xref:System.String.Intern%2A> method after converting a <xref:System.Text.StringBuilder> object whose value is <xref:System.String.Empty> to a string. Then the references contained in `str1` and `str2` are compared for equality.  \\n  \\n [!code-csharp[System.String.Intern#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Intern/cs/Intern2.cs#2)]\\n [!code-vb[System.String.Intern#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Intern/vb/Intern2.vb#2)]  \\n  \\n In the [!INCLUDE[net_v10_short](~/includes/net-v10-short-md.md)], [!INCLUDE[net_v11_short](~/includes/net-v11-short-md.md)], and [!INCLUDE[net_v35SP1_short](~/includes/net-v35sp1-short-md.md)], `str1` and `str2` are equal. In the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)] and [!INCLUDE[net_v30_long](~/includes/net-v30-long-md.md)], `str1` and `str2` are not equal.  \\n  \\n## Performance Considerations  \\n If you are trying to reduce the total amount of memory your application allocates, keep in mind that interning a string has two unwanted side effects. First, the memory allocated for interned <xref:System.String> objects is not likely be released until the common language runtime (CLR) terminates. The reason is that the CLR's reference to the interned <xref:System.String> object can persist after your application, or even your application domain, terminates. Second, to intern a string, you must first create the string. The memory used by the <xref:System.String> object must still be allocated, even though the memory will eventually be garbage collected.  \\n  \\n The .NET Framework version 2.0 introduces the <xref:System.Runtime.CompilerServices.CompilationRelaxations?displayProperty=fullName>enumeration member. The <xref:System.Runtime.CompilerServices.CompilationRelaxations.NoStringInterning> member marks an assembly as not requiring string-literal interning. You can apply <xref:System.Runtime.CompilerServices.CompilationRelaxations.NoStringInterning> to an assembly using the <xref:System.Runtime.CompilerServices.CompilationRelaxationsAttribute> attribute. Also, when you use the [Ngen.exe (Native Image Generator)](~/docs/framework/tools/ngen-exe-native-image-generator.md) to compile an assembly in advance of run time, strings are not interned across modules.\"\n  example:\n  - \"The following example uses three strings that are equal in value to determine whether a newly created string and an interned string are equal.  \\n  \\n [!code-cpp[string.intern#1](~/samples/snippets/cpp/VS_Snippets_CLR/string.intern/CPP/string_intern.cpp#1)]\\n [!code-csharp[string.intern#1](~/samples/snippets/csharp/VS_Snippets_CLR/string.intern/CS/string_intern.cs#1)]\\n [!code-vb[string.intern#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/string.intern/VB/string_intern.vb#1)]\"\n  syntax:\n    content: public static string Intern (string str);\n    parameters:\n    - id: str\n      type: System.String\n      description: A string to search for in the intern pool.\n    return:\n      type: System.String\n      description: The system's reference to <code>str</code>, if it is interned; otherwise, a new reference to a string with the value of <code>str</code>.\n  overload: System.String.Intern*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>str</code> is `null`.\n  attributes: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/String.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.String.IsInterned(System.String)\n  commentId: M:System.String.IsInterned(System.String)\n  id: IsInterned(System.String)\n  parent: System.String\n  langs:\n  - csharp\n  name: IsInterned(String)\n  nameWithType: String.IsInterned(String)\n  fullName: String.IsInterned(String)\n  type: Method\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System\n  summary: Retrieves a reference to a specified <xref href=\"System.String\"></xref>.\n  remarks: \"The common language runtime automatically maintains a table, called the intern pool, which contains a single instance of each unique literal string constant declared in a program, as well as any unique instance of <xref:System.String> you add programmatically by calling the <xref:System.String.Intern%2A> method.  \\n  \\n The intern pool conserves string storage. If you assign a literal string constant to several variables, each variable is set to reference the same constant in the intern pool instead of referencing several different instances of <xref:System.String> that have identical values.  \\n  \\n This method looks up `str` in the intern pool. If `str` has already been interned, a reference to that instance is returned; otherwise, `null` is returned.  \\n  \\n Compare this method to the <xref:System.String.Intern%2A> method.  \\n  \\n This method does not return a Boolean value. If you call the method because you want a Boolean value that indicates whether a particular string is interned, you can use code such as the following.  \\n  \\n [!code-csharp[System.String.IsInterned#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.isinterned/cs/isinternedex1.cs#1)]\\n [!code-vb[System.String.IsInterned#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.string.isinterned/vb/isinternedex1.vb#1)]  \\n  \\n> [!NOTE]\\n>  Starting with the .NET Framework version 2.0, you can override the use of the intern pool when you use the [Ngen.exe (Native Image Generator)](~/docs/framework/tools/ngen-exe-native-image-generator.md) to install an assembly to the native image cache on a local computer. For more information, see Performance Considerations in the Remarks section for the <xref:System.String.Intern%2A> property.\"\n  example:\n  - \"The following example demonstrates that literal strings are interned automatically by the compiler.  \\n  \\n [!code-cpp[string.isinterned#1](~/samples/snippets/cpp/VS_Snippets_CLR/string.isinterned/CPP/isin.cpp#1)]\\n [!code-csharp[string.isinterned#1](~/samples/snippets/csharp/VS_Snippets_CLR/string.isinterned/CS/isin.cs#1)]\\n [!code-vb[string.isinterned#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/string.isinterned/VB/isin.vb#1)]\"\n  syntax:\n    content: public static string IsInterned (string str);\n    parameters:\n    - id: str\n      type: System.String\n      description: The string to search for in the intern pool.\n    return:\n      type: System.String\n      description: A reference to <code>str</code> if it is in the common language runtime intern pool; otherwise, `null`.\n  overload: System.String.IsInterned*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>str</code> is `null`.\n  attributes: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/String.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.String.IsNormalized\n  commentId: M:System.String.IsNormalized\n  id: IsNormalized\n  parent: System.String\n  langs:\n  - csharp\n  name: IsNormalized()\n  nameWithType: String.IsNormalized()\n  fullName: String.IsNormalized()\n  type: Method\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System\n  summary: Indicates whether this string is in Unicode normalization form C.\n  remarks: \"Some Unicode characters have multiple equivalent binary representations consisting of sets of combining and/or composite Unicode characters. The existence of multiple representations for a single character complicates searching, sorting, matching, and other operations.  \\n  \\n The Unicode standard defines a process called normalization that returns one binary representation when given any of the equivalent binary representations of a character. Normalization can be performed with several algorithms, called normalization forms, that obey different rules. The .NET Framework currently supports normalization forms C, D, KC, and KD.  \\n  \\n For a description of supported Unicode normalization forms, see <xref:System.Text.NormalizationForm?displayProperty=fullName>.\"\n  example:\n  - \"The following example determines whether a string is successfully normalized to various normalization forms.  \\n  \\n [!code-cpp[string.normalize#1](~/samples/snippets/cpp/VS_Snippets_CLR/string.normalize/CPP/norm.cpp#1)]\\n [!code-csharp[string.normalize#1](~/samples/snippets/csharp/VS_Snippets_CLR/string.normalize/CS/norm.cs#1)]\\n [!code-vb[string.normalize#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/string.normalize/VB/norm.vb#1)]\"\n  syntax:\n    content: public bool IsNormalized ();\n    parameters: []\n    return:\n      type: System.Boolean\n      description: '`true` if this string is in normalization form C; otherwise, `false`.'\n  overload: System.String.IsNormalized*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The current instance contains invalid Unicode characters.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/String.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.String.IsNormalized(System.Text.NormalizationForm)\n  commentId: M:System.String.IsNormalized(System.Text.NormalizationForm)\n  id: IsNormalized(System.Text.NormalizationForm)\n  parent: System.String\n  langs:\n  - csharp\n  name: IsNormalized(NormalizationForm)\n  nameWithType: String.IsNormalized(NormalizationForm)\n  fullName: String.IsNormalized(NormalizationForm)\n  type: Method\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System\n  summary: Indicates whether this string is in the specified Unicode normalization form.\n  remarks: \"Some Unicode characters have multiple equivalent binary representations consisting of sets of combining and/or composite Unicode characters. The existence of multiple representations for a single character complicates searching, sorting, matching, and other operations.  \\n  \\n The Unicode standard defines a process called normalization that returns one binary representation when given any of the equivalent binary representations of a character. Normalization can be performed with several algorithms, called normalization forms, that obey different rules. The .NET Framework currently supports normalization forms C, D, KC, and KD.  \\n  \\n For a description of supported Unicode normalization forms, see <xref:System.Text.NormalizationForm?displayProperty=fullName>.\"\n  example:\n  - \"The following example demonstrates the <xref:System.String.IsNormalized%2A> and <xref:System.String.Normalize%2A> methods.  \\n  \\n [!code-cpp[string.normalize#1](~/samples/snippets/cpp/VS_Snippets_CLR/string.normalize/CPP/norm.cpp#1)]\\n [!code-csharp[string.normalize#1](~/samples/snippets/csharp/VS_Snippets_CLR/string.normalize/CS/norm.cs#1)]\\n [!code-vb[string.normalize#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/string.normalize/VB/norm.vb#1)]\"\n  syntax:\n    content: public bool IsNormalized (System.Text.NormalizationForm normalizationForm);\n    parameters:\n    - id: normalizationForm\n      type: System.Text.NormalizationForm\n      description: A Unicode normalization form.\n    return:\n      type: System.Boolean\n      description: '`true` if this string is in the normalization form specified by the <code>normalizationForm</code> parameter; otherwise, `false`.'\n  overload: System.String.IsNormalized*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The current instance contains invalid Unicode characters.\n  attributes: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/String.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.String.IsNullOrEmpty(System.String)\n  commentId: M:System.String.IsNullOrEmpty(System.String)\n  id: IsNullOrEmpty(System.String)\n  parent: System.String\n  langs:\n  - csharp\n  name: IsNullOrEmpty(String)\n  nameWithType: String.IsNullOrEmpty(String)\n  fullName: String.IsNullOrEmpty(String)\n  type: Method\n  assemblies:\n  - System.Runtime\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Indicates whether the specified string is `null` or an <xref href=\"System.String.Empty\"></xref> string.\n  remarks: \"<xref:System.String.IsNullOrEmpty%2A> is a convenience method that enables you to simultaneously test whether a <xref:System.String> is `null` or its value is <xref:System.String.Empty>. It is equivalent to the following code:  \\n  \\n [!code-cpp[System.String.IsNullOrEmpty#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.string.isnullorempty/cpp/isnullorempty1.cpp#1)]\\n [!code-csharp[System.String.IsNullOrEmpty#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.isnullorempty/cs/isnullorempty1.cs#1)]\\n [!code-vb[System.String.IsNullOrEmpty#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.string.isnullorempty/vb/isnullorempty1.vb#1)]  \\n  \\n You can use the <xref:System.String.IsNullOrWhiteSpace%2A> method to test whether a string is `null`, its value is <xref:System.String.Empty?displayProperty=fullName>,  or it consists only of white-space characters.  \\n  \\n## What is a null string?  \\n A string is `null` if it has not been assigned a value (in C++ and Visual Basic) or if has explicitly been assigned a value of `null`. Although the [composite formatting](~/docs/standard/base-types/composite-formatting.md) feature can gracefully handle a null string, as the following example shows, attempting to call one if its members throws a <xref:System.NullReferenceException>.  \\n  \\n [!code-cpp[System.String.IsNullOrEmpty#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.string.isnullorempty/cpp/NullString1.cpp#2)]\\n [!code-csharp[System.String.IsNullOrEmpty#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.isnullorempty/cs/NullString1.cs#2)]\\n [!code-vb[System.String.IsNullOrEmpty#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.string.isnullorempty/vb/NullString1.vb#2)]  \\n  \\n## What is an empty string?  \\n A string is empty if it  is explicitly assigned an empty string (\\\"\\\") or <xref:System.String.Empty?displayProperty=fullName>. An empty string has a <xref:System.String.Length%2A> of 0.  The following example creates an empty string and displays its value and its length.  \\n  \\n [!code-cpp[System.String.IsNullOrEmpty#3](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.string.isnullorempty/cpp/NullString1.cpp#3)]\\n [!code-csharp[System.String.IsNullOrEmpty#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.isnullorempty/cs/NullString1.cs#3)]\\n [!code-vb[System.String.IsNullOrEmpty#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.string.isnullorempty/vb/NullString1.vb#3)]\"\n  example:\n  - \"The following example examines three strings and determines whether each string has a value, is an empty string, or is `null`.  \\n  \\n [!code-cpp[String.IsNullOrEmpty#1](~/samples/snippets/cpp/VS_Snippets_CLR/string.isNullOrEmpty/CPP/inoe.cpp#1)]\\n [!code-csharp[String.IsNullOrEmpty#1](~/samples/snippets/csharp/VS_Snippets_CLR/string.isNullOrEmpty/CS/inoe.cs#1)]\\n [!code-vb[String.IsNullOrEmpty#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/string.isNullOrEmpty/VB/inoe.vb#1)]\"\n  syntax:\n    content: public static bool IsNullOrEmpty (string value);\n    parameters:\n    - id: value\n      type: System.String\n      description: The string to test.\n    return:\n      type: System.Boolean\n      description: '`true` if the <code>value</code> parameter is `null` or an empty string (\"\"); otherwise, `false`.'\n  overload: System.String.IsNullOrEmpty*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/String.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.String.IsNullOrWhiteSpace(System.String)\n  commentId: M:System.String.IsNullOrWhiteSpace(System.String)\n  id: IsNullOrWhiteSpace(System.String)\n  parent: System.String\n  langs:\n  - csharp\n  name: IsNullOrWhiteSpace(String)\n  nameWithType: String.IsNullOrWhiteSpace(String)\n  fullName: String.IsNullOrWhiteSpace(String)\n  type: Method\n  assemblies:\n  - System.Runtime\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Indicates whether a specified string is `null`, empty, or consists only of white-space characters.\n  remarks: \"<xref:System.String.IsNullOrWhiteSpace%2A> is a convenience method that is similar to the following  code, except that it offers superior performance:  \\n  \\n [!code-csharp[System.String.IsNullOrWhitespace#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.isnullorwhitespace/cs/isnullorwhitespace.cs#2)]\\n [!code-vb[System.String.IsNullOrWhitespace#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.string.isnullorwhitespace/vb/isnullorwhitespace.vb#2)]  \\n  \\n White-space characters are defined by the Unicode standard. The <xref:System.String.IsNullOrWhiteSpace%2A> method interprets any character that returns a value of `true` when it is passed to the <xref:System.Char.IsWhiteSpace%2A?displayProperty=fullName> method as a white-space character.\"\n  example:\n  - \"The following example creates a string array, and then passes each element of the array to the <xref:System.String.IsNullOrWhiteSpace%2A> method.  \\n  \\n [!code-csharp[System.String.IsNullOrWhiteSpace#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.isnullorwhitespace/cs/isnullorwhitespace1.cs#1)]\\n [!code-vb[System.String.IsNullOrWhiteSpace#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.string.isnullorwhitespace/vb/isnullorwhitespace1.vb#1)]\"\n  syntax:\n    content: public static bool IsNullOrWhiteSpace (string value);\n    parameters:\n    - id: value\n      type: System.String\n      description: The string to test.\n    return:\n      type: System.Boolean\n      description: '`true` if the <code>value</code> parameter is `null` or <xref href=\"System.String.Empty\"></xref>, or if <code>value</code> consists exclusively of white-space characters.'\n  overload: System.String.IsNullOrWhiteSpace*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/String.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.String.Join(System.String,System.String[],System.Int32,System.Int32)\n  commentId: M:System.String.Join(System.String,System.String[],System.Int32,System.Int32)\n  id: Join(System.String,System.String[],System.Int32,System.Int32)\n  parent: System.String\n  langs:\n  - csharp\n  name: Join(String, String[], Int32, Int32)\n  nameWithType: String.Join(String, String[], Int32, Int32)\n  fullName: String.Join(String, String[], Int32, Int32)\n  type: Method\n  assemblies:\n  - System.Runtime\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Concatenates the specified elements of a string array, using the specified separator between each element.\n  remarks: \"For example, if `separator` is \\\", \\\" and the elements of `value` are \\\"apple\\\", \\\"orange\\\", \\\"grape\\\", and \\\"pear\\\", `Join(separator, value, 1, 2)` returns \\\"orange, grape\\\".  \\n  \\n If `separator` is `null`, an empty string (<xref:System.String?displayProperty=fullName>) is used instead. If any element in `value` is `null`, an empty string is used instead.\"\n  example:\n  - \"The following example concatenates two elements from an array of names of fruit.  \\n  \\n [!code-cpp[string.join2#1](~/samples/snippets/cpp/VS_Snippets_CLR/string.join2/CPP/join2.cpp#1)]\\n [!code-csharp[string.join2#1](~/samples/snippets/csharp/VS_Snippets_CLR/string.join2/CS/join2.cs#1)]\\n [!code-vb[string.join2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/string.join2/VB/join2.vb#1)]\"\n  syntax:\n    content: public static string Join (string separator, string[] value, int startIndex, int count);\n    parameters:\n    - id: separator\n      type: System.String\n      description: The string to use as a separator. <code>separator</code> is included in the returned string only if <code>value</code> has more than one element.\n    - id: value\n      type: System.String[]\n      description: An array that contains the elements to concatenate.\n    - id: startIndex\n      type: System.Int32\n      description: The first element in <code>value</code> to use.\n    - id: count\n      type: System.Int32\n      description: The number of elements of <code>value</code> to use.\n    return:\n      type: System.String\n      description: \"A string that consists of the strings in <code>value</code> delimited by the <code>separator</code> string.  \\n  \\n -or-  \\n  \\n <xref href=\\\"System.String.Empty\\\"></xref> if <code>count</code> is zero, <code>value</code> has no elements, or <code>separator</code> and all the elements of <code>value</code> are <xref href=\\\"System.String.Empty\\\"></xref>.\"\n  overload: System.String.Join*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>value</code> is `null`.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"<code>startIndex</code> or <code>count</code> is less than 0.  \\n  \\n -or-  \\n  \\n <code>startIndex</code> plus <code>count</code> is greater than the number of elements in <code>value</code>.\"\n  - type: System.OutOfMemoryException\n    commentId: T:System.OutOfMemoryException\n    description: Out of memory.\n  attributes: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/String.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.String.Join(System.String,System.String[])\n  commentId: M:System.String.Join(System.String,System.String[])\n  id: Join(System.String,System.String[])\n  parent: System.String\n  langs:\n  - csharp\n  name: Join(String, String[])\n  nameWithType: String.Join(String, String[])\n  fullName: String.Join(String, String[])\n  type: Method\n  assemblies:\n  - System.Runtime\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Concatenates all the elements of a string array, using the specified separator between each element.\n  remarks: \"For example, if `separator` is \\\", \\\" and the elements of `value` are \\\"apple\\\", \\\"orange\\\", \\\"grape\\\", and \\\"pear\\\", `Join(separator, value)` returns \\\"apple, orange, grape, pear\\\".  \\n  \\n If `separator` is `null`, an empty string (<xref:System.String?displayProperty=fullName>) is used instead. If any element in `value` is `null`, an empty string is used instead.\"\n  example:\n  - \"The following example demonstrates the <xref:System.String.Join%2A> method.  \\n  \\n [!code-cpp[stringjoin#1](~/samples/snippets/cpp/VS_Snippets_CLR/stringjoin/CPP/stringjoin.cpp#1)]\\n [!code-csharp[stringjoin#1](~/samples/snippets/csharp/VS_Snippets_CLR/stringjoin/CS/stringjoin.cs#1)]\\n [!code-vb[stringjoin#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/stringjoin/VB/stringjoin.vb#1)]\"\n  syntax:\n    content: public static string Join (string separator, string[] value);\n    parameters:\n    - id: separator\n      type: System.String\n      description: The string to use as a separator. <code>separator</code> is included in the returned string only if <code>value</code> has more than one element.\n    - id: value\n      type: System.String[]\n      description: An array that contains the elements to concatenate.\n    return:\n      type: System.String\n      description: A string that consists of the elements in <code>value</code> delimited by the <code>separator</code> string. If <code>value</code> is an empty array, the method returns <xref href=\"System.String.Empty\"></xref>.\n  overload: System.String.Join*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>value</code> is `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/String.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.String.Join(System.String,System.Object[])\n  commentId: M:System.String.Join(System.String,System.Object[])\n  id: Join(System.String,System.Object[])\n  parent: System.String\n  langs:\n  - csharp\n  name: Join(String, Object[])\n  nameWithType: String.Join(String, Object[])\n  fullName: String.Join(String, Object[])\n  type: Method\n  assemblies:\n  - System.Runtime\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Concatenates the elements of an object array, using the specified separator between each element.\n  remarks: \"If `separator` is `null` or if any element of `values` other than the first element is `null`, an empty string (<xref:System.String?displayProperty=fullName>) is used instead. See the Notes for Callers section if the first element of `values` is `null`.  \\n  \\n <xref:System.String.Join%28System.String%2CSystem.Object%5B%5D%29> is a convenience method that lets you concatenate each element in an object array without explicitly converting its elements to strings. The string representation of each object in the array is derived by calling that object's `ToString` method.\"\n  example:\n  - \"The following example uses the Sieve of Eratosthenes algorithm to calculate the prime numbers that are less than or equal to 100. It assigns the result to a integer array, which it then passes to the <xref:System.String.Join%28System.String%2CSystem.Object%5B%5D%29> method.  \\n  \\n [!code-csharp[System.String.Join#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.join/cs/join1.cs#1)]\\n [!code-vb[System.String.Join#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.string.join/vb/join1.vb#1)]\"\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(false)]\n\n      public static string Join (string separator, object[] values);\n    parameters:\n    - id: separator\n      type: System.String\n      description: The string to use as a separator. <code>separator</code> is included in the returned string only if <code>values</code> has more than one element.\n    - id: values\n      type: System.Object[]\n      description: An array that contains the elements to concatenate.\n    return:\n      type: System.String\n      description: A string that consists of the elements of <code>values</code> delimited by the <code>separator</code> string. If <code>values</code> is an empty array, the method returns <xref href=\"System.String.Empty\"></xref>.\n  overload: System.String.Join*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>values</code> is `null`.\n  attributes:\n  - type: System.Runtime.InteropServices.ComVisibleAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/String.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.String.Join(System.Char,System.String[],System.Int32,System.Int32)\n  commentId: M:System.String.Join(System.Char,System.String[],System.Int32,System.Int32)\n  id: Join(System.Char,System.String[],System.Int32,System.Int32)\n  parent: System.String\n  langs:\n  - csharp\n  name: Join(Char, String[], Int32, Int32)\n  nameWithType: String.Join(Char, String[], Int32, Int32)\n  fullName: String.Join(Char, String[], Int32, Int32)\n  type: Method\n  assemblies:\n  - System.Runtime\n  namespace: System\n  syntax:\n    content: public static string Join (char separator, string[] value, int startIndex, int count);\n    parameters:\n    - id: separator\n      type: System.Char\n      description: ''\n    - id: value\n      type: System.String[]\n      description: ''\n    - id: startIndex\n      type: System.Int32\n      description: ''\n    - id: count\n      type: System.Int32\n      description: ''\n    return:\n      type: System.String\n      description: ''\n  overload: System.String.Join*\n  exceptions: []\n  version:\n  - netcore-2.0\n  monikers:\n  - netcore-2.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/String.xml\n- uid: System.String.Join(System.Char,System.String[])\n  commentId: M:System.String.Join(System.Char,System.String[])\n  id: Join(System.Char,System.String[])\n  parent: System.String\n  langs:\n  - csharp\n  name: Join(Char, String[])\n  nameWithType: String.Join(Char, String[])\n  fullName: String.Join(Char, String[])\n  type: Method\n  assemblies:\n  - System.Runtime\n  namespace: System\n  syntax:\n    content: public static string Join (char separator, string[] value);\n    parameters:\n    - id: separator\n      type: System.Char\n      description: ''\n    - id: value\n      type: System.String[]\n      description: ''\n    return:\n      type: System.String\n      description: ''\n  overload: System.String.Join*\n  exceptions: []\n  version:\n  - netcore-2.0\n  monikers:\n  - netcore-2.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/String.xml\n- uid: System.String.Join(System.Char,System.Object[])\n  commentId: M:System.String.Join(System.Char,System.Object[])\n  id: Join(System.Char,System.Object[])\n  parent: System.String\n  langs:\n  - csharp\n  name: Join(Char, Object[])\n  nameWithType: String.Join(Char, Object[])\n  fullName: String.Join(Char, Object[])\n  type: Method\n  assemblies:\n  - System.Runtime\n  namespace: System\n  syntax:\n    content: public static string Join (char separator, object[] values);\n    parameters:\n    - id: separator\n      type: System.Char\n      description: ''\n    - id: values\n      type: System.Object[]\n      description: ''\n    return:\n      type: System.String\n      description: ''\n  overload: System.String.Join*\n  exceptions: []\n  version:\n  - netcore-2.0\n  monikers:\n  - netcore-2.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/String.xml\n- uid: System.String.Join(System.String,System.Collections.Generic.IEnumerable{System.String})\n  commentId: M:System.String.Join(System.String,System.Collections.Generic.IEnumerable{System.String})\n  id: Join(System.String,System.Collections.Generic.IEnumerable{System.String})\n  parent: System.String\n  langs:\n  - csharp\n  name: Join(String, IEnumerable<String>)\n  nameWithType: String.Join(String, IEnumerable<String>)\n  fullName: String.Join(String, IEnumerable<String>)\n  type: Method\n  assemblies:\n  - System.Runtime\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Concatenates the members of a constructed <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> collection of type <xref href=\"System.String\"></xref>, using the specified separator between each member.\n  remarks: \"If `separator` is `null`, an empty string (<xref:System.String?displayProperty=fullName>) is used instead. If any member of `values` is `null`, an empty string is used instead.  \\n  \\n <xref:System.String.Join%28System.String%2CSystem.Collections.Generic.IEnumerable%7BSystem.String%7D%29> is a convenience method that lets you concatenate each element in an `IEnumerable(Of String)` collection without first converting the elements to a string array. It is particularly useful with Language-Integrated Query (LINQ) query expressions. The following example passes a `List(Of String)` object that contains either the uppercase or lowercase letters of the alphabet to a lambda expression that selects letters that are equal to or greater than a particular letter (which, in the example, is \\\"M\\\"). The `IEnumerable(Of String)` collection returned by the <xref:System.Linq.Enumerable.Where%2A?displayProperty=fullName> method is passed to the <xref:System.String.Join%28System.String%2CSystem.Collections.Generic.IEnumerable%7BSystem.String%7D%29> method to display the result as a single string.  \\n  \\n [!code-csharp[System.String.Join#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.join/cs/join4.cs#4)]\\n [!code-vb[System.String.Join#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.string.join/vb/join4.vb#4)]\"\n  example:\n  - \"The following example uses the Sieve of Eratosthenes algorithm to calculate the prime numbers that are less than or equal to 100. It assigns the result to a <xref:System.Collections.Generic.List%601> object of type <xref:System.String>, which it then passes to the <xref:System.String.Join%28System.String%2CSystem.Collections.Generic.IEnumerable%7BSystem.String%7D%29> method.  \\n  \\n [!code-csharp[System.String.Join#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.join/cs/join3.cs#3)]\\n [!code-vb[System.String.Join#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.string.join/vb/join3.vb#3)]\"\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(false)]\n\n      public static string Join (string separator, System.Collections.Generic.IEnumerable<string> values);\n    parameters:\n    - id: separator\n      type: System.String\n      description: The string to use as a separator.<code>separator</code> is included in the returned string only if <code>values</code> has more than one element.\n    - id: values\n      type: System.Collections.Generic.IEnumerable{System.String}\n      description: A collection that contains the strings to concatenate.\n    return:\n      type: System.String\n      description: A string that consists of the members of <code>values</code> delimited by the <code>separator</code> string. If <code>values</code> has no members, the method returns <xref href=\"System.String.Empty\"></xref>.\n  overload: System.String.Join*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>values</code> is `null`.\n  attributes:\n  - type: System.Runtime.InteropServices.ComVisibleAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/String.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.String.Join``1(System.Char,System.Collections.Generic.IEnumerable{``0})\n  commentId: M:System.String.Join``1(System.Char,System.Collections.Generic.IEnumerable{``0})\n  id: Join``1(System.Char,System.Collections.Generic.IEnumerable{``0})\n  parent: System.String\n  langs:\n  - csharp\n  name: Join<T>(Char, IEnumerable<T>)\n  nameWithType: String.Join<T>(Char, IEnumerable<T>)\n  fullName: String.Join<T>(Char, IEnumerable<T>)\n  type: Method\n  assemblies:\n  - System.Runtime\n  namespace: System\n  syntax:\n    content: public static string Join<T> (char separator, System.Collections.Generic.IEnumerable<T> values);\n    parameters:\n    - id: separator\n      type: System.Char\n      description: ''\n    - id: values\n      type: System.Collections.Generic.IEnumerable`1\n      description: ''\n    typeParameters:\n    - id: T\n      description: ''\n    return:\n      type: System.String\n      description: ''\n  overload: System.String.Join``1*\n  exceptions: []\n  version:\n  - netcore-2.0\n  monikers:\n  - netcore-2.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/String.xml\n- uid: System.String.Join``1(System.String,System.Collections.Generic.IEnumerable{``0})\n  commentId: M:System.String.Join``1(System.String,System.Collections.Generic.IEnumerable{``0})\n  id: Join``1(System.String,System.Collections.Generic.IEnumerable{``0})\n  parent: System.String\n  langs:\n  - csharp\n  name: Join<T>(String, IEnumerable<T>)\n  nameWithType: String.Join<T>(String, IEnumerable<T>)\n  fullName: String.Join<T>(String, IEnumerable<T>)\n  type: Method\n  assemblies:\n  - System.Runtime\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Concatenates the members of a collection, using the specified separator between each member.\n  remarks: \"If `separator` is `null`, an empty string (<xref:System.String?displayProperty=fullName>) is used instead. If any member of `values` is `null`, an empty string is used instead.  \\n  \\n <xref:System.String.Join%60%601%28System.String%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29> is a convenience method that lets you concatenate each member of an <xref:System.Collections.Generic.IEnumerable%601> collection without first converting them to strings. The string representation of each object in the <xref:System.Collections.Generic.IEnumerable%601> collection is derived by calling that object's `ToString` method.  \\n  \\n This method is particular useful with Language-Integrated Query (LINQ) query expressions. For example, the following code defines a very simple `Animal` class that contains the name of an animal and the order to which it belongs. It then defines a <xref:System.Collections.Generic.List%601> object that contains a number of `Animal` objects. The <xref:System.Linq.Enumerable.Where%2A?displayProperty=fullName> extension method is called to extract the `Animal` objects whose `Order` property equals \\\"Rodent\\\". The result is passed to the <xref:System.String.Join%60%601%28System.String%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29> method.  \\n  \\n [!code-csharp[System.String.Join#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.join/cs/join5.cs#5)]\\n [!code-vb[System.String.Join#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.string.join/vb/join5.vb#5)]\"\n  example:\n  - \"The following example uses the Sieve of Eratosthenes algorithm to calculate the prime numbers that are less than or equal to 100. It assigns the result to a <xref:System.Collections.Generic.List%601> object of type integer, which it then passes to the <xref:System.String.Join%60%601%28System.String%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29> method.  \\n  \\n [!code-csharp[System.String.Join#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.join/cs/join2.cs#2)]\\n [!code-vb[System.String.Join#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.string.join/vb/join2.vb#2)]\"\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(false)]\n\n      public static string Join<T> (string separator, System.Collections.Generic.IEnumerable<T> values);\n    parameters:\n    - id: separator\n      type: System.String\n      description: The string to use as a separator.<code>separator</code> is included in the returned string only if <code>values</code> has more than one element.\n    - id: values\n      type: System.Collections.Generic.IEnumerable`1\n      description: A collection that contains the objects to concatenate.\n    typeParameters:\n    - id: T\n      description: The type of the members of <code>values</code>.\n    return:\n      type: System.String\n      description: A string that consists of the members of <code>values</code> delimited by the <code>separator</code> string. If <code>values</code> has no members, the method returns <xref href=\"System.String.Empty\"></xref>.\n  overload: System.String.Join``1*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>values</code> is `null`.\n  attributes:\n  - type: System.Runtime.InteropServices.ComVisibleAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/String.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.String.LastIndexOf(System.String,System.Int32,System.Int32,System.StringComparison)\n  commentId: M:System.String.LastIndexOf(System.String,System.Int32,System.Int32,System.StringComparison)\n  id: LastIndexOf(System.String,System.Int32,System.Int32,System.StringComparison)\n  parent: System.String\n  langs:\n  - csharp\n  name: LastIndexOf(String, Int32, Int32, StringComparison)\n  nameWithType: String.LastIndexOf(String, Int32, Int32, StringComparison)\n  fullName: String.LastIndexOf(String, Int32, Int32, StringComparison)\n  type: Method\n  assemblies:\n  - System.Runtime\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Reports the zero-based index position of the last occurrence of a specified string within this instance. The search starts at a specified character position and proceeds backward toward the beginning of the string for the specified number of character positions. A parameter specifies the type of comparison to perform when searching for the specified string.\n  remarks: \"Index numbering starts from zero. That is, the first character in the string is at index zero and the last is at <xref:System.String.Length%2A> - 1.  \\n  \\n The search begins at the `startIndex` character position and proceeds backward until either `value` is found or `count` character positions have been examined. For example, if `startIndex` is <xref:System.String.Length%2A> - 1, the method searches backward `count` characters from the last character in the string.  \\n  \\n The `comparisonType` parameter specifies to search for the `value` parameter using the current or invariant culture, using a case-sensitive or case-insensitive search, and using word or ordinal comparison rules.\"\n  example:\n  - \"The following exampledemonstrates three overloads of the <xref:System.String.LastIndexOf%2A> method that find the last occurrence of a string within another string using different values of the <xref:System.StringComparison> enumeration.  \\n  \\n [!code-csharp[system.string.LastIndexOfCmp#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.LastIndexOfCmp/cs/liocmp.cs#1)]\\n [!code-vb[system.string.LastIndexOfCmp#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.string.LastIndexOfCmp/vb/liocmp.vb#1)]\"\n  syntax:\n    content: public int LastIndexOf (string value, int startIndex, int count, StringComparison comparisonType);\n    parameters:\n    - id: value\n      type: System.String\n      description: The string to seek.\n    - id: startIndex\n      type: System.Int32\n      description: The search starting position. The search proceeds from <code>startIndex</code> toward the beginning of this instance.\n    - id: count\n      type: System.Int32\n      description: The number of character positions to examine.\n    - id: comparisonType\n      type: System.StringComparison\n      description: One of the enumeration values that specifies the rules for the search.\n    return:\n      type: System.Int32\n      description: The zero-based starting index position of the <code>value</code> parameter if that string is found, or -1 if it is not found or if the current instance equals <xref href=\"System.String.Empty\"></xref>. If <code>value</code> is <xref href=\"System.String.Empty\"></xref>, the return value is the smaller of <code>startIndex</code> and the last index position in this instance.\n  overload: System.String.LastIndexOf*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>value</code> is `null`.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"<code>count</code> is negative.  \\n  \\n -or-  \\n  \\n The current instance does not equal <xref href=\\\"System.String.Empty\\\"></xref>, and <code>startIndex</code> is negative.  \\n  \\n -or-  \\n  \\n The current instance does not equal <xref href=\\\"System.String.Empty\\\"></xref>, and <code>startIndex</code> is greater than the length of this instance.  \\n  \\n -or-  \\n  \\n The current instance does not equal <xref href=\\\"System.String.Empty\\\"></xref>, and <code>startIndex</code> + 1 - <code>count</code> specifies a position that is not within this instance.  \\n  \\n -or-  \\n  \\n The current instance equals <xref href=\\\"System.String.Empty\\\"></xref> and <code>start</code> is less than -1 or greater than zero.  \\n  \\n -or-  \\n  \\n The current instance equals <xref href=\\\"System.String.Empty\\\"></xref> and <code>count</code> is greater than 1.\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>comparisonType</code> is not a valid <xref href=\"System.StringComparison\"></xref> value.\n  attributes: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/String.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.String.LastIndexOf(System.String,System.Int32,System.StringComparison)\n  commentId: M:System.String.LastIndexOf(System.String,System.Int32,System.StringComparison)\n  id: LastIndexOf(System.String,System.Int32,System.StringComparison)\n  parent: System.String\n  langs:\n  - csharp\n  name: LastIndexOf(String, Int32, StringComparison)\n  nameWithType: String.LastIndexOf(String, Int32, StringComparison)\n  fullName: String.LastIndexOf(String, Int32, StringComparison)\n  type: Method\n  assemblies:\n  - System.Runtime\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Reports the zero-based index of the last occurrence of a specified string within the current <xref href=\"System.String\"></xref> object. The search starts at a specified character position and proceeds backward toward the beginning of the string. A parameter specifies the type of comparison to perform when searching for the specified string.\n  remarks: \"Index numbering starts from zero. That is, the first character in the string is at index zero and the last is at <xref:System.String.Length%2A> - 1.  \\n  \\n The search begins at the `startIndex` character position and proceeds backward until either `value` is found or the first character position has been examined. For example, if `startIndex` is <xref:System.String.Length%2A> - 1, the method searches every character from the last character in the string to the beginning.  \\n  \\n The `comparisonType` parameter specifies to search for the `value` parameter using the current or invariant culture, using a case-sensitive or case-insensitive search, and using word or ordinal comparison rules.\"\n  example:\n  - \"The following exampledemonstrates three overloads of the <xref:System.String.LastIndexOf%2A> method that find the last occurrence of a string within another string using different values of the <xref:System.StringComparison> enumeration.  \\n  \\n [!code-csharp[system.string.LastIndexOfCmp#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.LastIndexOfCmp/cs/liocmp.cs#1)]\\n [!code-vb[system.string.LastIndexOfCmp#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.string.LastIndexOfCmp/vb/liocmp.vb#1)]\"\n  syntax:\n    content: public int LastIndexOf (string value, int startIndex, StringComparison comparisonType);\n    parameters:\n    - id: value\n      type: System.String\n      description: The string to seek.\n    - id: startIndex\n      type: System.Int32\n      description: The search starting position. The search proceeds from <code>startIndex</code> toward the beginning of this instance.\n    - id: comparisonType\n      type: System.StringComparison\n      description: One of the enumeration values that specifies the rules for the search.\n    return:\n      type: System.Int32\n      description: The zero-based starting index position of the <code>value</code> parameter if that string is found, or -1 if it is not found or if the current instance equals <xref href=\"System.String.Empty\"></xref>. If <code>value</code> is <xref href=\"System.String.Empty\"></xref>, the return value is the smaller of <code>startIndex</code> and the last index position in this instance.\n  overload: System.String.LastIndexOf*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>value</code> is `null`.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"The current instance does not equal <xref href=\\\"System.String.Empty\\\"></xref>, and <code>startIndex</code> is less than zero or greater than the length of the current instance.  \\n  \\n -or-  \\n  \\n The current instance equals <xref href=\\\"System.String.Empty\\\"></xref>, and <code>startIndex</code> is less than -1 or greater than zero.\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>comparisonType</code> is not a valid <xref href=\"System.StringComparison\"></xref> value.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/String.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.String.LastIndexOf(System.Char,System.Int32,System.Int32)\n  commentId: M:System.String.LastIndexOf(System.Char,System.Int32,System.Int32)\n  id: LastIndexOf(System.Char,System.Int32,System.Int32)\n  parent: System.String\n  langs:\n  - csharp\n  name: LastIndexOf(Char, Int32, Int32)\n  nameWithType: String.LastIndexOf(Char, Int32, Int32)\n  fullName: String.LastIndexOf(Char, Int32, Int32)\n  type: Method\n  assemblies:\n  - System.Runtime\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Reports the zero-based index position of the last occurrence of the specified Unicode character in a substring within this instance. The search starts at a specified character position and proceeds backward toward the beginning of the string for a specified number of character positions.\n  remarks: \"Index numbering starts from zero. That is, the first character in the string is at index zero and the last is at <xref:System.String.Length%2A> - 1.  \\n  \\n This method begins searching at the `startIndex` character position and proceeds backward toward the beginning of this instance until either `value` is found or `count` character positions have been examined. For example, if `startIndex` is <xref:System.String.Length%2A> - 1, the method searches backward `count` characters from the last character in the string. The search is case-sensitive.  \\n  \\n This method performs an ordinal (culture-insensitive) search, where a character is considered equivalent to another character only if their Unicode scalar value are the same. To perform a culture-sensitive search, use the <xref:System.Globalization.CompareInfo.LastIndexOf%2A?displayProperty=fullName> method, where a Unicode scalar value representing a precomposed character, such as the ligature \\\"Ã\\\" (U+00C6), might be considered equivalent to any occurrence of the character's components in the correct sequence, such as \\\"AE\\\" (U+0041, U+0045), depending on the culture.\"\n  example:\n  - \"The following example finds the index of all occurrences of a character in a substring, working from the end of the substring to the start of the substring.  \\n  \\n [!code-cpp[string.lastindexof2#1](~/samples/snippets/cpp/VS_Snippets_CLR/string.lastindexof2/CPP/lastixof2.cpp#1)]\\n [!code-csharp[string.lastindexof2#1](~/samples/snippets/csharp/VS_Snippets_CLR/string.lastindexof2/CS/lastixof2.cs#1)]\\n [!code-vb[string.lastindexof2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/string.lastindexof2/VB/lastixof2.vb#1)]\"\n  syntax:\n    content: public int LastIndexOf (char value, int startIndex, int count);\n    parameters:\n    - id: value\n      type: System.Char\n      description: The Unicode character to seek.\n    - id: startIndex\n      type: System.Int32\n      description: The starting position of the search. The search proceeds from <code>startIndex</code> toward the beginning of this instance.\n    - id: count\n      type: System.Int32\n      description: The number of character positions to examine.\n    return:\n      type: System.Int32\n      description: The zero-based index position of <code>value</code> if that character is found, or -1 if it is not found or if the current instance equals <xref href=\"System.String.Empty\"></xref>.\n  overload: System.String.LastIndexOf*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"The current instance does not equal <xref href=\\\"System.String.Empty\\\"></xref>, and <code>startIndex</code> is less than zero or greater than or equal to the length of this instance.  \\n  \\n -or-  \\n  \\n The current instance does not equal <xref href=\\\"System.String.Empty\\\"></xref>, and <code>startIndex</code> - <code>count</code> + 1 is less than zero.\"\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/String.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.String.LastIndexOf(System.String,System.StringComparison)\n  commentId: M:System.String.LastIndexOf(System.String,System.StringComparison)\n  id: LastIndexOf(System.String,System.StringComparison)\n  parent: System.String\n  langs:\n  - csharp\n  name: LastIndexOf(String, StringComparison)\n  nameWithType: String.LastIndexOf(String, StringComparison)\n  fullName: String.LastIndexOf(String, StringComparison)\n  type: Method\n  assemblies:\n  - System.Runtime\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Reports the zero-based index of the last occurrence of a specified string within the current <xref href=\"System.String\"></xref> object. A parameter specifies the type of search to use for the specified string.\n  remarks: \"Index numbering starts from zero. That is, the first character in the string is at index zero and the last is at <xref:System.String.Length%2A> - 1.  \\n  \\n The `comparisonType` parameter specifies to search for the `value` parameter using the current or invariant culture, using a case-sensitive or case-insensitive search, and using word or ordinal comparison rules.  \\n  \\n The search begins at the last character position of this instance and proceeds backward toward the beginning until either `value` is found or the first character position has been examined.\"\n  example:\n  - \"The following exampledemonstrates three overloads of the <xref:System.String.LastIndexOf%2A> method that find the last occurrence of a string within another string using different values of the <xref:System.StringComparison> enumeration.  \\n  \\n [!code-csharp[system.string.LastIndexOfCmp#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.LastIndexOfCmp/cs/liocmp.cs#1)]\\n [!code-vb[system.string.LastIndexOfCmp#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.string.LastIndexOfCmp/vb/liocmp.vb#1)]\"\n  syntax:\n    content: public int LastIndexOf (string value, StringComparison comparisonType);\n    parameters:\n    - id: value\n      type: System.String\n      description: The string to seek.\n    - id: comparisonType\n      type: System.StringComparison\n      description: One of the enumeration values that specifies the rules for the search.\n    return:\n      type: System.Int32\n      description: The zero-based starting index position of the <code>value</code> parameter if that string is found, or -1 if it is not. If <code>value</code> is <xref href=\"System.String.Empty\"></xref>, the return value is the last index position in this instance.\n  overload: System.String.LastIndexOf*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>value</code> is `null`.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>comparisonType</code> is not a valid <xref href=\"System.StringComparison\"></xref> value.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/String.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.String.LastIndexOf(System.String,System.Int32,System.Int32)\n  commentId: M:System.String.LastIndexOf(System.String,System.Int32,System.Int32)\n  id: LastIndexOf(System.String,System.Int32,System.Int32)\n  parent: System.String\n  langs:\n  - csharp\n  name: LastIndexOf(String, Int32, Int32)\n  nameWithType: String.LastIndexOf(String, Int32, Int32)\n  fullName: String.LastIndexOf(String, Int32, Int32)\n  type: Method\n  assemblies:\n  - System.Runtime\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Reports the zero-based index position of the last occurrence of a specified string within this instance. The search starts at a specified character position and proceeds backward toward the beginning of the string for a specified number of character positions.\n  remarks: \"Index numbering starts from zero. That is, the first character in the string is at index zero and the last is at <xref:System.String.Length%2A> - 1.  \\n  \\n The search begins at the `startIndex` character position of this instance and proceeds backward toward the beginning until either `value` is found or `count` character positions have been examined. For example, if `startIndex` is <xref:System.String.Length%2A> - 1, the method searches backward `count` characters from the last character in the string.  \\n  \\n This method performs a word (case-sensitive and culture-sensitive) search using the current culture.  \\n  \\n Character sets include ignorable characters, which are characters that are not considered when performing a linguistic or culture-sensitive comparison. In a culture-sensitive search, if `value` contains an ignorable character, the result is equivalent to searching with that character removed. If `value` consists only of one or more ignorable characters, the <xref:System.String.LastIndexOf%2A> method always returns `startIndex`, which is the character position at which the search begins. In the following example, the <xref:System.String.LastIndexOf%2A> method is used to find the position of a soft hyphen (U+00AD) in the two characters that precede the final \\\"m\\\" of two strings. Only one of the strings contains the required substring. If the example is run on the [!INCLUDE[netfx40_short](~/includes/netfx40-short-md.md)] or later, in both cases, because the soft hyphen is an ignorable character, the method returns the index of \\\"m\\\" in the string when it performs a culture-sensitive comparison. Note that in the case of the first string, which includes the soft hyphen followed by an \\\"m\\\", the method fails to return the index of the soft hyphen but instead returns the index of the \\\"m\\\".  \\n  \\n [!code-csharp[System.String.LastIndexOf#23](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.LastIndexOf/cs/lastindexof23.cs#23)]\\n [!code-vb[System.String.LastIndexOf#23](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.LastIndexOf/vb/lastindexof23.vb#23)]\"\n  example:\n  - \"The following example finds the index of all occurrences of a string in substring, working from the end of the substring to the start of the substring.  \\n  \\n [!code-cpp[string.lastindexof8#1](~/samples/snippets/cpp/VS_Snippets_CLR/string.LastIndexOf8/CPP/lastixof8.cpp#1)]\\n [!code-csharp[string.lastindexof8#1](~/samples/snippets/csharp/VS_Snippets_CLR/string.LastIndexOf8/CS/lastixof8.cs#1)]\\n [!code-vb[string.lastindexof8#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/string.LastIndexOf8/VB/lastixof8.vb#1)]\"\n  syntax:\n    content: public int LastIndexOf (string value, int startIndex, int count);\n    parameters:\n    - id: value\n      type: System.String\n      description: The string to seek.\n    - id: startIndex\n      type: System.Int32\n      description: The search starting position. The search proceeds from <code>startIndex</code> toward the beginning of this instance.\n    - id: count\n      type: System.Int32\n      description: The number of character positions to examine.\n    return:\n      type: System.Int32\n      description: The zero-based starting index position of <code>value</code> if that string is found, or -1 if it is not found or if the current instance equals <xref href=\"System.String.Empty\"></xref>. If <code>value</code> is <xref href=\"System.String.Empty\"></xref>, the return value is the smaller of <code>startIndex</code> and the last index position in this instance.\n  overload: System.String.LastIndexOf*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>value</code> is `null`.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"<code>count</code> is negative.  \\n  \\n -or-  \\n  \\n The current instance does not equal <xref href=\\\"System.String.Empty\\\"></xref>, and <code>startIndex</code> is negative.  \\n  \\n -or-  \\n  \\n The current instance does not equal <xref href=\\\"System.String.Empty\\\"></xref>, and <code>startIndex</code> is greater than the length of this instance.  \\n  \\n -or-  \\n  \\n The current instance does not equal <xref href=\\\"System.String.Empty\\\"></xref>, and <code>startIndex</code> - <code>count</code>+ 1 specifies a position that is not within this instance.  \\n  \\n -or-  \\n  \\n The current instance equals <xref href=\\\"System.String.Empty\\\"></xref> and <code>start</code> is less than -1 or greater than zero.  \\n  \\n -or-  \\n  \\n The current instance equals <xref href=\\\"System.String.Empty\\\"></xref> and <code>count</code> is greater than 1.\"\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/String.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.String.LastIndexOf(System.Char,System.Int32)\n  commentId: M:System.String.LastIndexOf(System.Char,System.Int32)\n  id: LastIndexOf(System.Char,System.Int32)\n  parent: System.String\n  langs:\n  - csharp\n  name: LastIndexOf(Char, Int32)\n  nameWithType: String.LastIndexOf(Char, Int32)\n  fullName: String.LastIndexOf(Char, Int32)\n  type: Method\n  assemblies:\n  - System.Runtime\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Reports the zero-based index position of the last occurrence of a specified Unicode character within this instance. The search starts at a specified character position and proceeds backward toward the beginning of the string.\n  remarks: \"Index numbering starts from zero. That is, the first character in the string is at index zero and the last is at <xref:System.String.Length%2A> - 1.This method begins searching at the `startIndex` character position of this instance and proceeds backward toward the beginning of the current instance until either `value` is found or the first character position has been examined. For example, if `startIndex` is <xref:System.String.Length%2A> - 1, the method searches every character from the last character in the string to the beginning. The search is case-sensitive.  \\n  \\n This method performs an ordinal (culture-insensitive) search, where a character is considered equivalent to another character only if their Unicode scalar values are the same. To perform a culture-sensitive search, use the <xref:System.Globalization.CompareInfo.LastIndexOf%2A?displayProperty=fullName> method, where a Unicode scalar value representing a precomposed character, such as the ligature \\\"Ã\\\" (U+00C6), might be considered equivalent to any occurrence of the character's components in the correct sequence, such as \\\"AE\\\" (U+0041, U+0045), depending on the culture.\"\n  example:\n  - \"The following example finds the index of all occurrences of a character in a string, working from the end of the string to the start of the string.  \\n  \\n [!code-cpp[string.lastindexof1#1](~/samples/snippets/cpp/VS_Snippets_CLR/string.lastindexof1/CPP/lastixof1.cpp#1)]\\n [!code-csharp[string.lastindexof1#1](~/samples/snippets/csharp/VS_Snippets_CLR/string.lastindexof1/CS/lastixof1.cs#1)]\\n [!code-vb[string.lastindexof1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/string.lastindexof1/VB/lastixof1.vb#1)]\"\n  syntax:\n    content: public int LastIndexOf (char value, int startIndex);\n    parameters:\n    - id: value\n      type: System.Char\n      description: The Unicode character to seek.\n    - id: startIndex\n      type: System.Int32\n      description: The starting position of the search. The search proceeds from <code>startIndex</code> toward the beginning of this instance.\n    return:\n      type: System.Int32\n      description: The zero-based index position of <code>value</code> if that character is found, or -1 if it is not found or if the current instance equals <xref href=\"System.String.Empty\"></xref>.\n  overload: System.String.LastIndexOf*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: The current instance does not equal <xref href=\"System.String.Empty\"></xref>, and <code>startIndex</code> is less than zero or greater than or equal to the length of this instance.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/String.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.String.LastIndexOf(System.String)\n  commentId: M:System.String.LastIndexOf(System.String)\n  id: LastIndexOf(System.String)\n  parent: System.String\n  langs:\n  - csharp\n  name: LastIndexOf(String)\n  nameWithType: String.LastIndexOf(String)\n  fullName: String.LastIndexOf(String)\n  type: Method\n  assemblies:\n  - System.Runtime\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Reports the zero-based index position of the last occurrence of a specified string within this instance.\n  remarks: \"Index numbering starts from zero. That is, the first character in the string is at index zero and the last is at <xref:System.String.Length%2A> - 1.  \\n  \\n The search begins at the last character position of this instance and proceeds backward toward the beginning until either `value` is found or the first character position has been examined.  \\n  \\n This method performs a word (case-sensitive and culture-sensitive) search using the current culture.  \\n  \\n Character sets include ignorable characters, which are characters that are not considered when performing a linguistic or culture-sensitive comparison. In a culture-sensitive search, if `value` contains an ignorable character, the result is equivalent to searching with that character removed. If `value` consists only of one or more ignorable characters, the <xref:System.String.LastIndexOf%28System.String%29> method always returns <xref:System.String.Length%2A?displayProperty=fullName> â 1, which represents the last index position in the current instance. In the following example, the <xref:System.String.LastIndexOf%28System.String%29> method is used to find three substrings (a soft hyphen (U+00AD), a soft hyphen followed by \\\"n\\\", and a soft hyphen followed by \\\"m\\\") in two strings. Only one of the strings contains a soft hyphen. If the example is run on the [!INCLUDE[netfx40_short](~/includes/netfx40-short-md.md)] or later, in each case, because the soft hyphen is an ignorable character, the result is the same as if the soft hyphen had not been included in `value`. When searching for a soft hyphen only, the method returns 6 and 5. These values correspond to the index of the last character in the two strings.  \\n  \\n [!code-csharp[System.String.LastIndexOf#21](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.LastIndexOf/cs/lastindexof21.cs#21)]\\n [!code-vb[System.String.LastIndexOf#21](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.LastIndexOf/vb/lastindexof21.vb#21)]\"\n  example:\n  - \"The following example removes opening and closing HTML tags from a string if the tags begin and end the string. If a string ends with a closing bracket character (\\\">\\\"), the example uses the <xref:System.String.LastIndexOf%2A> method to locate the start of the end tag.  \\n  \\n [!code-csharp[System.String.LastIndexOf#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.LastIndexOf/cs/lastindexof_example2.cs#2)]\\n [!code-vb[System.String.LastIndexOf#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.LastIndexOf/vb/lastindexof_example2.vb#2)]\"\n  syntax:\n    content: public int LastIndexOf (string value);\n    parameters:\n    - id: value\n      type: System.String\n      description: The string to seek.\n    return:\n      type: System.Int32\n      description: The zero-based starting index position of <code>value</code> if that string is found, or -1 if it is not. If <code>value</code> is <xref href=\"System.String.Empty\"></xref>, the return value is the last index position in this instance.\n  overload: System.String.LastIndexOf*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>value</code> is `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/String.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.String.LastIndexOf(System.Char)\n  commentId: M:System.String.LastIndexOf(System.Char)\n  id: LastIndexOf(System.Char)\n  parent: System.String\n  langs:\n  - csharp\n  name: LastIndexOf(Char)\n  nameWithType: String.LastIndexOf(Char)\n  fullName: String.LastIndexOf(Char)\n  type: Method\n  assemblies:\n  - System.Runtime\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Reports the zero-based index position of the last occurrence of a specified Unicode character within this instance.\n  remarks: \"Index numbering starts from zero. That is, the first character in the string is at index zero and the last is at <xref:System.String.Length%2A> - 1.  \\n  \\n This method begins searching at the last character position of this instance and proceeds backward toward the beginning until either `value` is found or the first character position has been examined. The search is case-sensitive.  \\n  \\n This method performs an ordinal (culture-insensitive) search, where a character is considered equivalent to another character only if their Unicode scalar values are the same. To perform a culture-sensitive search, use the <xref:System.Globalization.CompareInfo.LastIndexOf%2A?displayProperty=fullName> method, where a Unicode scalar value representing a precomposed character, such as the ligature \\\"Ã\\\" (U+00C6), might be considered equivalent to any occurrence of the character's components in the correct sequence, such as \\\"AE\\\" (U+0041, U+0045), depending on the culture.\"\n  example:\n  - \"The following example defines an `ExtractFilename` method that uses the <xref:System.String.LastIndexOf%28System.Char%29> method to find the last directory separator character in a string and to extract the string's file name. If the file exists, the method returns the file name without its path.  \\n  \\n [!code-csharp[System.String.LastIndexOf#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.LastIndexOf/cs/LastIndexOf_Example.cs#1)]\\n [!code-vb[System.String.LastIndexOf#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.LastIndexOf/vb/LastIndexOf_Example.vb#1)]\"\n  syntax:\n    content: public int LastIndexOf (char value);\n    parameters:\n    - id: value\n      type: System.Char\n      description: The Unicode character to seek.\n    return:\n      type: System.Int32\n      description: The zero-based index position of <code>value</code> if that character is found, or -1 if it is not.\n  overload: System.String.LastIndexOf*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/String.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.String.LastIndexOf(System.String,System.Int32)\n  commentId: M:System.String.LastIndexOf(System.String,System.Int32)\n  id: LastIndexOf(System.String,System.Int32)\n  parent: System.String\n  langs:\n  - csharp\n  name: LastIndexOf(String, Int32)\n  nameWithType: String.LastIndexOf(String, Int32)\n  fullName: String.LastIndexOf(String, Int32)\n  type: Method\n  assemblies:\n  - System.Runtime\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Reports the zero-based index position of the last occurrence of a specified string within this instance. The search starts at a specified character position and proceeds backward toward the beginning of the string.\n  remarks: \"Index numbering starts from zero. That is, the first character in the string is at index zero and the last is at <xref:System.String.Length%2A> - 1.  \\n  \\n The search begins at the `startIndex` character position of this instance and proceeds backward toward the beginning until either `value` is found or the first character position has been examined. For example, if `startIndex` is <xref:System.String.Length%2A> - 1, the method searches every character from the last character in the string to the beginning.  \\n  \\n This method performs a word (case-sensitive and culture-sensitive) search using the current culture.  \\n  \\n Character sets include ignorable characters, which are characters that are not considered when performing a linguistic or culture-sensitive comparison. In a culture-sensitive search, if `value` contains an ignorable character, the result is equivalent to searching with that character removed. If `value` consists only of one or more ignorable characters, the <xref:System.String.LastIndexOf%28System.String%2CSystem.Int32%29> method always returns `startIndex`, which is the character position at which the search begins. In the following example, the <xref:System.String.LastIndexOf%28System.String%2CSystem.Int32%29> method is used to find a substring that includes a soft hyphen (U+00AD) and that precedes or includes the final \\\"m\\\" in a string. If the example is run on the [!INCLUDE[netfx40_short](~/includes/netfx40-short-md.md)] or later, because the soft hyphen in the search string is ignored, calling the method to find a substring that consists of the soft hyphen and \\\"m\\\" returns the position of the \\\"m\\\" in the string, whereas calling it to find a substring that consists of the soft hyphen and \\\"n\\\" returns the position of the \\\"n\\\". When the search string contains only the soft hyphen, the method returns the index of the \\\"m\\\", which represents the value of `startIndex`.  \\n  \\n [!code-csharp[System.String.LastIndexOf#22](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.LastIndexOf/cs/lastindexof22.cs#22)]\\n [!code-vb[System.String.LastIndexOf#22](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.LastIndexOf/vb/lastindexof22.vb#22)]\"\n  example:\n  - \"The following example finds the index of all occurrences of a string in target string, working from the end of the target string to the start of the target string.  \\n  \\n [!code-cpp[string.lastindexof7#1](~/samples/snippets/cpp/VS_Snippets_CLR/string.LastIndexOf7/CPP/lastixof7.cpp#1)]\\n [!code-csharp[string.lastindexof7#1](~/samples/snippets/csharp/VS_Snippets_CLR/string.LastIndexOf7/CS/lastixof7.cs#1)]\\n [!code-vb[string.lastindexof7#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/string.LastIndexOf7/VB/lastixof7.vb#1)]\"\n  syntax:\n    content: public int LastIndexOf (string value, int startIndex);\n    parameters:\n    - id: value\n      type: System.String\n      description: The string to seek.\n    - id: startIndex\n      type: System.Int32\n      description: The search starting position. The search proceeds from <code>startIndex</code> toward the beginning of this instance.\n    return:\n      type: System.Int32\n      description: The zero-based starting index position of <code>value</code> if that string is found, or -1 if it is not found or if the current instance equals <xref href=\"System.String.Empty\"></xref>. If <code>value</code> is <xref href=\"System.String.Empty\"></xref>, the return value is the smaller of <code>startIndex</code> and the last index position in this instance.\n  overload: System.String.LastIndexOf*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>value</code> is `null`.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"The current instance does not equal <xref href=\\\"System.String.Empty\\\"></xref>, and <code>startIndex</code> is less than zero or greater than the length of the current instance.  \\n  \\n -or-  \\n  \\n The current instance equals <xref href=\\\"System.String.Empty\\\"></xref>, and <code>startIndex</code> is less than -1 or greater than zero.\"\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/String.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.String.LastIndexOfAny(System.Char[])\n  commentId: M:System.String.LastIndexOfAny(System.Char[])\n  id: LastIndexOfAny(System.Char[])\n  parent: System.String\n  langs:\n  - csharp\n  name: LastIndexOfAny(Char[])\n  nameWithType: String.LastIndexOfAny(Char[])\n  fullName: String.LastIndexOfAny(Char[])\n  type: Method\n  assemblies:\n  - System.Runtime\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Reports the zero-based index position of the last occurrence in this instance of one or more characters specified in a Unicode array.\n  remarks: \"Index numbering starts from zero.  \\n  \\n This method begins searching at the last character position of this instance and proceeds backward toward the beginning until either a character in `anyOf` is found or the first character position has been examined. The search is case-sensitive.  \\n  \\n This method performs an ordinal (culture-insensitive) search, where a character is considered equivalent to another character only if their Unicode scalar values are the same. To perform a culture-sensitive search, use the <xref:System.Globalization.CompareInfo.LastIndexOf%2A?displayProperty=fullName> method, where a Unicode scalar value representing a precomposed character, such as the ligature \\\"Ã\\\" (U+00C6), might be considered equivalent to any occurrence of the character's components in the correct sequence, such as \\\"AE\\\" (U+0041, U+0045), depending on the culture.\"\n  example:\n  - \"The following example finds the index of the last occurrence of any character in the string \\\"is\\\" within another string.  \\n  \\n [!code-cpp[string.lastindexofany1#1](~/samples/snippets/cpp/VS_Snippets_CLR/string.LastIndexOfAny1/CPP/lastixany1.cpp#1)]\\n [!code-csharp[string.lastindexofany1#1](~/samples/snippets/csharp/VS_Snippets_CLR/string.LastIndexOfAny1/CS/lastixany1.cs#1)]\\n [!code-vb[string.lastindexofany1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/string.LastIndexOfAny1/VB/lastixany1.vb#1)]\"\n  syntax:\n    content: public int LastIndexOfAny (char[] anyOf);\n    parameters:\n    - id: anyOf\n      type: System.Char[]\n      description: A Unicode character array containing one or more characters to seek.\n    return:\n      type: System.Int32\n      description: The index position of the last occurrence in this instance where any character in <code>anyOf</code> was found; -1 if no character in <code>anyOf</code> was found.\n  overload: System.String.LastIndexOfAny*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>anyOf</code> is `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/String.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.String.LastIndexOfAny(System.Char[],System.Int32)\n  commentId: M:System.String.LastIndexOfAny(System.Char[],System.Int32)\n  id: LastIndexOfAny(System.Char[],System.Int32)\n  parent: System.String\n  langs:\n  - csharp\n  name: LastIndexOfAny(Char[], Int32)\n  nameWithType: String.LastIndexOfAny(Char[], Int32)\n  fullName: String.LastIndexOfAny(Char[], Int32)\n  type: Method\n  assemblies:\n  - System.Runtime\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Reports the zero-based index position of the last occurrence in this instance of one or more characters specified in a Unicode array. The search starts at a specified character position and proceeds backward toward the beginning of the string.\n  remarks: \"Index numbering starts from zero.  \\n  \\n This method begins searching at the `startIndex` character position of this instance and proceeds backward toward the beginning until either a character in `anyOf` is found or the first character position has been examined. The search is case-sensitive.  \\n  \\n This method performs an ordinal (culture-insensitive) search, where a character is considered equivalent to another character only if their Unicode scalar values are the same. To perform a culture-sensitive search, use the <xref:System.Globalization.CompareInfo.LastIndexOf%2A?displayProperty=fullName> method, where a Unicode scalar value representing a precomposed character, such as the ligature \\\"Ã\\\" (U+00C6), might be considered equivalent to any occurrence of the character's components in the correct sequence, such as \\\"AE\\\" (U+0041, U+0045), depending on the culture.\"\n  example:\n  - \"The following example finds the index of the last occurrence of any character in the string \\\"is\\\" within a substring of another string.  \\n  \\n [!code-cpp[string.lastindexofany2#1](~/samples/snippets/cpp/VS_Snippets_CLR/string.LastIndexOfAny2/CPP/lastixany2.cpp#1)]\\n [!code-csharp[string.lastindexofany2#1](~/samples/snippets/csharp/VS_Snippets_CLR/string.LastIndexOfAny2/CS/lastixany2.cs#1)]\\n [!code-vb[string.lastindexofany2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/string.LastIndexOfAny2/VB/lastixany2.vb#1)]\"\n  syntax:\n    content: public int LastIndexOfAny (char[] anyOf, int startIndex);\n    parameters:\n    - id: anyOf\n      type: System.Char[]\n      description: A Unicode character array containing one or more characters to seek.\n    - id: startIndex\n      type: System.Int32\n      description: The search starting position. The search proceeds from <code>startIndex</code> toward the beginning of this instance.\n    return:\n      type: System.Int32\n      description: The index position of the last occurrence in this instance where any character in <code>anyOf</code> was found; -1 if no character in <code>anyOf</code> was found or if the current instance equals <xref href=\"System.String.Empty\"></xref>.\n  overload: System.String.LastIndexOfAny*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>anyOf</code> is `null`.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: The current instance does not equal <xref href=\"System.String.Empty\"></xref>, and <code>startIndex</code> specifies a position that is not within this instance.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/String.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.String.LastIndexOfAny(System.Char[],System.Int32,System.Int32)\n  commentId: M:System.String.LastIndexOfAny(System.Char[],System.Int32,System.Int32)\n  id: LastIndexOfAny(System.Char[],System.Int32,System.Int32)\n  parent: System.String\n  langs:\n  - csharp\n  name: LastIndexOfAny(Char[], Int32, Int32)\n  nameWithType: String.LastIndexOfAny(Char[], Int32, Int32)\n  fullName: String.LastIndexOfAny(Char[], Int32, Int32)\n  type: Method\n  assemblies:\n  - System.Runtime\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Reports the zero-based index position of the last occurrence in this instance of one or more characters specified in a Unicode array. The search starts at a specified character position and proceeds backward toward the beginning of the string for a specified number of character positions.\n  remarks: \"Index numbering starts from zero.  \\n  \\n This method begins searching at the `startIndex` character position of this instance and proceeds backward toward the beginning until either a character in `anyOf` is found or `count` character positions have been examined. The search is case-sensitive.  \\n  \\n This method performs an ordinal (culture-insensitive) search, where a character is considered equivalent to another character only if their Unicode scalar values are the same. To perform a culture-sensitive search, use the <xref:System.Globalization.CompareInfo.LastIndexOf%2A?displayProperty=fullName> method, where a Unicode scalar value representing a precomposed character, such as the ligature \\\"Ã\\\" (U+00C6), might be considered equivalent to any occurrence of the character's components in the correct sequence, such as \\\"AE\\\" (U+0041, U+0045), depending on the culture.\"\n  example:\n  - \"The following example finds the index of the last occurrence of any character in the string \\\"aid\\\" within a substring of another string.  \\n  \\n [!code-cpp[string.lastindexofany3#1](~/samples/snippets/cpp/VS_Snippets_CLR/string.LastIndexOfAny3/CPP/lastixany3.cpp#1)]\\n [!code-csharp[string.lastindexofany3#1](~/samples/snippets/csharp/VS_Snippets_CLR/string.LastIndexOfAny3/CS/lastixany3.cs#1)]\\n [!code-vb[string.lastindexofany3#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/string.LastIndexOfAny3/VB/lastixany3.vb#1)]\"\n  syntax:\n    content: public int LastIndexOfAny (char[] anyOf, int startIndex, int count);\n    parameters:\n    - id: anyOf\n      type: System.Char[]\n      description: A Unicode character array containing one or more characters to seek.\n    - id: startIndex\n      type: System.Int32\n      description: The search starting position. The search proceeds from <code>startIndex</code> toward the beginning of this instance.\n    - id: count\n      type: System.Int32\n      description: The number of character positions to examine.\n    return:\n      type: System.Int32\n      description: The index position of the last occurrence in this instance where any character in <code>anyOf</code> was found; -1 if no character in <code>anyOf</code> was found or if the current instance equals <xref href=\"System.String.Empty\"></xref>.\n  overload: System.String.LastIndexOfAny*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>anyOf</code> is `null`.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"The current instance does not equal <xref href=\\\"System.String.Empty\\\"></xref>, and <code>count</code> or <code>startIndex</code> is negative.  \\n  \\n -or-  \\n  \\n The current instance does not equal <xref href=\\\"System.String.Empty\\\"></xref>, and <code>startIndex</code> minus <code>count</code> + 1 is less than zero.\"\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/String.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.String.Length\n  commentId: P:System.String.Length\n  id: Length\n  parent: System.String\n  langs:\n  - csharp\n  name: Length\n  nameWithType: String.Length\n  fullName: String.Length\n  type: Property\n  assemblies:\n  - System.Runtime\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Gets the number of characters in the current <xref href=\"System.String\"></xref> object.\n  remarks: \"The <xref:System.String.Length%2A> property returns the number of <xref:System.Char> objects in this instance, not the number of Unicode characters. The reason is that a Unicode character might be represented by more than one <xref:System.Char>. Use the <xref:System.Globalization.StringInfo?displayProperty=fullName> class to work with each Unicode character instead of each <xref:System.Char>.  \\n  \\n In some languages, such as C and C++, a null character indicates the end of a string. In the .NET Framework, a null character can be embedded in a string. When a string includes one or more null characters, they are included in the length of the total string. For example, in the following string, the substrings \\\"abc\\\" and \\\"def\\\" are separated by a null character. The <xref:System.String.Length%2A> property returns 7, which indicates that it includes the six alphabetic characters as well as the null character.  \\n  \\n [!code-cpp[System.String.Class#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Class/cpp/system.string.class.cpp#1)]\\n [!code-csharp[System.String.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Class/cs/System.String.Class.cs#1)]\\n [!code-vb[System.String.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Class/vb/System.String.Class.vb#1)]\"\n  example:\n  - \"The following example demonstrates the <xref:System.String.Length%2A> property.  \\n  \\n [!code-cpp[string.length#1](~/samples/snippets/cpp/VS_Snippets_CLR/string.length/CPP/length.cpp#1)]\\n [!code-csharp[string.length#1](~/samples/snippets/csharp/VS_Snippets_CLR/string.length/CS/length.cs#1)]\\n [!code-vb[string.length#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/string.length/VB/length.vb#1)]\"\n  syntax:\n    content: public int Length { get; }\n    return:\n      type: System.Int32\n      description: The number of characters in the current string.\n  overload: System.String.Length*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/String.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.String.Normalize(System.Text.NormalizationForm)\n  commentId: M:System.String.Normalize(System.Text.NormalizationForm)\n  id: Normalize(System.Text.NormalizationForm)\n  parent: System.String\n  langs:\n  - csharp\n  name: Normalize(NormalizationForm)\n  nameWithType: String.Normalize(NormalizationForm)\n  fullName: String.Normalize(NormalizationForm)\n  type: Method\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System\n  summary: Returns a new string whose textual value is the same as this string, but whose binary representation is in the specified Unicode normalization form.\n  remarks: \"Some Unicode characters have multiple equivalent binary representations consisting of sets of combining and/or composite Unicode characters. The existence of multiple representations for a single character complicates searching, sorting, matching, and other operations.  \\n  \\n The Unicode standard defines a process called normalization that returns one binary representation when given any of the equivalent binary representations of a character. Normalization can be performed with several algorithms, called normalization forms, that obey different rules. The .NET Framework supports the four normalization forms (C, D, KC, and KD)that are defined by the Unicode standard.When two strings are represented in the same normalization form, they can be compared by using ordinal comparison.  \\n  \\n To normalize and compare two strings, do the following:  \\n  \\n1.  Obtain the strings to be compared from an input source, such as a file or a user input device.  \\n  \\n2.  Call the <xref:System.String.Normalize%28System.Text.NormalizationForm%29> method to normalize the strings to a specified normalization form.  \\n  \\n3.  To compare two strings, call a method that supports ordinal string comparison, such as the <xref:System.String.Compare%28System.String%2CSystem.String%2CSystem.StringComparison%29> method, and supply a value of <xref:System.StringComparison?displayProperty=fullName> or <xref:System.StringComparison?displayProperty=fullName> as the <xref:System.StringComparison> argument. To sort an array of normalized strings, pass a `comparer` value of <xref:System.StringComparer.Ordinal%2A?displayProperty=fullName> or <xref:System.StringComparer.OrdinalIgnoreCase%2A?displayProperty=fullName> to an appropriate overload of <xref:System.Array.Sort%2A?displayProperty=fullName>.  \\n  \\n4.  Emit the strings in the sorted output based on the order indicated by the previous step.  \\n  \\n For a description of supported Unicode normalization forms, see <xref:System.Text.NormalizationForm?displayProperty=fullName>.\"\n  example:\n  - \"The following example normalizes a string to each of four normalization forms, confirms the string was normalized to the specified normalization form, then lists the code points in the normalized string.  \\n  \\n [!code-cpp[string.normalize#1](~/samples/snippets/cpp/VS_Snippets_CLR/string.normalize/CPP/norm.cpp#1)]\\n [!code-csharp[string.normalize#1](~/samples/snippets/csharp/VS_Snippets_CLR/string.normalize/CS/norm.cs#1)]\\n [!code-vb[string.normalize#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/string.normalize/VB/norm.vb#1)]\"\n  syntax:\n    content: public string Normalize (System.Text.NormalizationForm normalizationForm);\n    parameters:\n    - id: normalizationForm\n      type: System.Text.NormalizationForm\n      description: A Unicode normalization form.\n    return:\n      type: System.String\n      description: A new string whose textual value is the same as this string, but whose binary representation is in the normalization form specified by the <code>normalizationForm</code> parameter.\n  overload: System.String.Normalize*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The current instance contains invalid Unicode characters.\n  attributes: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/String.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.String.Normalize\n  commentId: M:System.String.Normalize\n  id: Normalize\n  parent: System.String\n  langs:\n  - csharp\n  name: Normalize()\n  nameWithType: String.Normalize()\n  fullName: String.Normalize()\n  type: Method\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System\n  summary: Returns a new string whose textual value is the same as this string, but whose binary representation is in Unicode normalization form C.\n  remarks: \"Some Unicode characters have multiple equivalent binary representations consisting of sets of combining and/or composite Unicode characters. For example, any of the following code points can represent the letter \\\"áº¯\\\":  \\n  \\n-   U+1EAF  \\n  \\n-   U+0103 U+0301  \\n  \\n-   U+0061 U+0306 U+0301  \\n  \\n The existence of multiple representations for a single character complicates searching, sorting, matching, and other operations.  \\n  \\n The Unicode standard defines a process called normalization that returns one binary representation when given any of the equivalent binary representations of a character. Normalization can be performed with several algorithms, called normalization forms, that obey different rules. The .NET Framework supports the four normalization forms (C, D, KC, and KD)that are defined by the Unicode standard.When two strings are represented in the same normalization form, theycan be compared by using ordinal comparison.  \\n  \\n To normalize and compare two strings, do the following:  \\n  \\n1.  Obtain the strings to be compared from an input source, such as a file or a user input device.  \\n  \\n2.  Call the <xref:System.String.Normalize> method to normalize the strings to normalization form C.  \\n  \\n3.  To compare two strings, call a method that supports ordinal string comparison, such as the <xref:System.String.Compare%28System.String%2CSystem.String%2CSystem.StringComparison%29> method, and supply a value of <xref:System.StringComparison?displayProperty=fullName> or <xref:System.StringComparison?displayProperty=fullName>as the <xref:System.StringComparison> argument. To sort an array of normalized strings, pass a `comparer` value of <xref:System.StringComparer.Ordinal%2A?displayProperty=fullName> or <xref:System.StringComparer.OrdinalIgnoreCase%2A?displayProperty=fullName> to an appropriate overload of <xref:System.Array.Sort%2A?displayProperty=fullName>.  \\n  \\n4.  Emit the strings in the sorted output based on the order indicated by the previous step.  \\n  \\n For a description of supported Unicode normalization forms, see <xref:System.Text.NormalizationForm?displayProperty=fullName>.\"\n  example:\n  - \"The following example normalizes a string to each of four normalization forms, confirms the string was normalized to the specified normalization form, then lists the code points in the normalized string.  \\n  \\n [!code-cpp[string.normalize#1](~/samples/snippets/cpp/VS_Snippets_CLR/string.normalize/CPP/norm.cpp#1)]\\n [!code-csharp[string.normalize#1](~/samples/snippets/csharp/VS_Snippets_CLR/string.normalize/CS/norm.cs#1)]\\n [!code-vb[string.normalize#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/string.normalize/VB/norm.vb#1)]\"\n  syntax:\n    content: public string Normalize ();\n    parameters: []\n    return:\n      type: System.String\n      description: A new, normalized string whose textual value is the same as this string, but whose binary representation is in normalization form C.\n  overload: System.String.Normalize*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The current instance contains invalid Unicode characters.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/String.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.String.op_Equality(System.String,System.String)\n  commentId: M:System.String.op_Equality(System.String,System.String)\n  id: op_Equality(System.String,System.String)\n  parent: System.String\n  langs:\n  - csharp\n  name: op_Equality(String, String)\n  nameWithType: String.op_Equality(String, String)\n  fullName: String.op_Equality(String, String)\n  type: Operator\n  assemblies:\n  - System.Runtime\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Determines whether two specified strings have the same value.\n  remarks: \"The <xref:System.String.op_Equality%2A> method defines the operation of the equality operator for the <xref:System.String> class. It enables code such as that shown in the Example section. The operator, in turn, calls the static <xref:System.String.Equals%28System.String%2CSystem.String%29> method, which performs an ordinal (case-sensitive and culture-insensitive) comparison.  \\n  \\n> [!NOTE]\\n>  The Visual Basic compiler does not resolve the equality operator as a call to the <xref:System.String.op_Equality%2A> method. Instead, the equality operator wraps a call to the <xref:Microsoft.VisualBasic.CompilerServices.Operators.CompareString%2A?displayProperty=fullName> method.\"\n  example:\n  - \"The following example demonstrates the equality operator.  \\n  \\n [!code-cpp[system.string.equality#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Equality/CPP/equalityop.cpp#1)]\\n [!code-csharp[system.string.equality#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Equality/CS/equalityop.cs#1)]\"\n  syntax:\n    content: public static bool op_Equality (string a, string b);\n    parameters:\n    - id: a\n      type: System.String\n      description: The first string to compare, or `null`.\n    - id: b\n      type: System.String\n      description: The second string to compare, or `null`.\n    return:\n      type: System.Boolean\n      description: '`true` if the value of <code>a</code> is the same as the value of <code>b</code>; otherwise, `false`.'\n  overload: System.String.op_Equality*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/String.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.String.op_Inequality(System.String,System.String)\n  commentId: M:System.String.op_Inequality(System.String,System.String)\n  id: op_Inequality(System.String,System.String)\n  parent: System.String\n  langs:\n  - csharp\n  name: op_Inequality(String, String)\n  nameWithType: String.op_Inequality(String, String)\n  fullName: String.op_Inequality(String, String)\n  type: Operator\n  assemblies:\n  - System.Runtime\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Determines whether two specified strings have different values.\n  remarks: \"The <xref:System.String.op_Inequality%2A> method defines the operation of the inequality operator for the <xref:System.String> class.   It enables code such as that shown in the Examples section.  \\n  \\n The <xref:System.String.op_Inequality%2A> operator in turn calls the static <xref:System.String.Equals%28System.String%2CSystem.String%29> method, which  performs an ordinal (case-sensitive and culture-insensitive) comparison.  \\n  \\n> [!NOTE]\\n>  The Visual Basic compiler does not resolve the inequality operator as a call to the <xref:System.String.op_Inequality%2A> method. Instead, the inequality operator wraps a call to the <xref:Microsoft.VisualBasic.CompilerServices.Operators.CompareString%2A?displayProperty=fullName> method.\"\n  example:\n  - \"The following example demonstrates the inequality operator.  \\n  \\n [!code-cpp[system.string.inequality#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Inequality/CPP/inequalityop.cpp#1)]\\n [!code-csharp[system.string.inequality#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Inequality/CS/inequalityop.cs#1)]\"\n  syntax:\n    content: public static bool op_Inequality (string a, string b);\n    parameters:\n    - id: a\n      type: System.String\n      description: The first string to compare, or `null`.\n    - id: b\n      type: System.String\n      description: The second string to compare, or `null`.\n    return:\n      type: System.Boolean\n      description: '`true` if the value of <code>a</code> is different from the value of <code>b</code>; otherwise, `false`.'\n  overload: System.String.op_Inequality*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/String.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.String.PadLeft(System.Int32)\n  commentId: M:System.String.PadLeft(System.Int32)\n  id: PadLeft(System.Int32)\n  parent: System.String\n  langs:\n  - csharp\n  name: PadLeft(Int32)\n  nameWithType: String.PadLeft(Int32)\n  fullName: String.PadLeft(Int32)\n  type: Method\n  assemblies:\n  - System.Runtime\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Returns a new string that right-aligns the characters in this instance by padding them with spaces on the left, for a specified total length.\n  remarks: \"A Unicode space is defined as hexadecimal 0x0020.  \\n  \\n The <xref:System.String.PadLeft%28System.Int32%29> method pads the beginning of the returned string. This means that, when used with right-to-left languages, it pads the right portion of the string.  \\n  \\n> [!NOTE]\\n>  If the <xref:System.String.PadLeft%2A>method pads the current instance with whitespace characters, this method does not modify the value of the current instance. Instead, it returns a new string that is padded with leading white space so that its total length is `totalWidth` characters.\"\n  example:\n  - \"The following example demonstrates the <xref:System.String.PadLeft%2A> method.  \\n  \\n [!code-cpp[Classic String.PadLeft Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic String.PadLeft Example/CPP/source.cpp#1)]\\n [!code-csharp[Classic String.PadLeft Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic String.PadLeft Example/CS/source.cs#1)]\\n [!code-vb[Classic String.PadLeft Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic String.PadLeft Example/VB/source.vb#1)]\"\n  syntax:\n    content: public string PadLeft (int totalWidth);\n    parameters:\n    - id: totalWidth\n      type: System.Int32\n      description: The number of characters in the resulting string, equal to the number of original characters plus any additional padding characters.\n    return:\n      type: System.String\n      description: A new string that is equivalent to this instance, but right-aligned and padded on the left with as many spaces as needed to create a length of <code>totalWidth</code>. However, if <code>totalWidth</code> is less than the length of this instance, the method returns a reference to the existing instance. If <code>totalWidth</code> is equal to the length of this instance, the method returns a new string that is identical to this instance.\n  overload: System.String.PadLeft*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>totalWidth</code> is less than zero.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/String.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.String.PadLeft(System.Int32,System.Char)\n  commentId: M:System.String.PadLeft(System.Int32,System.Char)\n  id: PadLeft(System.Int32,System.Char)\n  parent: System.String\n  langs:\n  - csharp\n  name: PadLeft(Int32, Char)\n  nameWithType: String.PadLeft(Int32, Char)\n  fullName: String.PadLeft(Int32, Char)\n  type: Method\n  assemblies:\n  - System.Runtime\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Returns a new string that right-aligns the characters in this instance by padding them on the left with a specified Unicode character, for a specified total length.\n  remarks: \"The <xref:System.String.PadLeft%28System.Int32%2CSystem.Char%29> method pads the beginning of the returned string. This means that, when used with right-to-left languages, it pads the right portion of the string.  \\n  \\n> [!NOTE]\\n>  If the <xref:System.String.PadLeft%2A> method pads the current instance with whitespace characters, this method does not modify the value of the current instance. Instead, it returns a new string that is padded with leading `paddingChar` characters so that its total length is `totalWidth` characters.\"\n  example:\n  - \"The following example demonstrates the <xref:System.String.PadLeft%2A> method.  \\n  \\n [!code-cpp[Classic String.PadLeft1 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic String.PadLeft1 Example/CPP/source.cpp#1)]\\n [!code-csharp[Classic String.PadLeft1 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic String.PadLeft1 Example/CS/source.cs#1)]\\n [!code-vb[Classic String.PadLeft1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic String.PadLeft1 Example/VB/source.vb#1)]\"\n  syntax:\n    content: public string PadLeft (int totalWidth, char paddingChar);\n    parameters:\n    - id: totalWidth\n      type: System.Int32\n      description: The number of characters in the resulting string, equal to the number of original characters plus any additional padding characters.\n    - id: paddingChar\n      type: System.Char\n      description: A Unicode padding character.\n    return:\n      type: System.String\n      description: A new string that is equivalent to this instance, but right-aligned and padded on the left with as many <code>paddingChar</code> characters as needed to create a length of <code>totalWidth</code>. However, if <code>totalWidth</code> is less than the length of this instance, the method returns a reference to the existing instance. If <code>totalWidth</code> is equal to the length of this instance, the method returns a new string that is identical to this instance.\n  overload: System.String.PadLeft*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>totalWidth</code> is less than zero.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/String.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.String.PadRight(System.Int32)\n  commentId: M:System.String.PadRight(System.Int32)\n  id: PadRight(System.Int32)\n  parent: System.String\n  langs:\n  - csharp\n  name: PadRight(Int32)\n  nameWithType: String.PadRight(Int32)\n  fullName: String.PadRight(Int32)\n  type: Method\n  assemblies:\n  - System.Runtime\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Returns a new string that left-aligns the characters in this string by padding them with spaces on the right, for a specified total length.\n  remarks: \"A Unicode space is defined as hexadecimal 0x0020.  \\n  \\n The <xref:System.String.PadRight%28System.Int32%29> method pads the end of the returned string. This means that, when used with right-to-left languages, it pads the left portion of the string.  \\n  \\n> [!NOTE]\\n>  If the<xref:System.String.PadRight%2A> method pads the current instance with whitespace characters, this method does not modify the value of the current instance. Instead, it returns a new string that is padded with trailing white space so that its total length is `totalWidth` characters.\"\n  example:\n  - \"The following example demonstrates the <xref:System.String.PadRight%2A> method.  \\n  \\n [!code-cpp[Classic String.PadRight Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic String.PadRight Example/CPP/source.cpp#1)]\\n [!code-csharp[Classic String.PadRight Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic String.PadRight Example/cs/source.cs#1)]\\n [!code-vb[Classic String.PadRight Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic String.PadRight Example/VB/source.vb#1)]\"\n  syntax:\n    content: public string PadRight (int totalWidth);\n    parameters:\n    - id: totalWidth\n      type: System.Int32\n      description: The number of characters in the resulting string, equal to the number of original characters plus any additional padding characters.\n    return:\n      type: System.String\n      description: A new string that is equivalent to this instance, but left-aligned and padded on the right with as many spaces as needed to create a length of <code>totalWidth</code>. However, if <code>totalWidth</code> is less than the length of this instance, the method returns a reference to the existing instance. If <code>totalWidth</code> is equal to the length of this instance, the method returns a new string that is identical to this instance.\n  overload: System.String.PadRight*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>totalWidth</code> is less than zero.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/String.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.String.PadRight(System.Int32,System.Char)\n  commentId: M:System.String.PadRight(System.Int32,System.Char)\n  id: PadRight(System.Int32,System.Char)\n  parent: System.String\n  langs:\n  - csharp\n  name: PadRight(Int32, Char)\n  nameWithType: String.PadRight(Int32, Char)\n  fullName: String.PadRight(Int32, Char)\n  type: Method\n  assemblies:\n  - System.Runtime\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Returns a new string that left-aligns the characters in this string by padding them on the right with a specified Unicode character, for a specified total length.\n  remarks: \"The <xref:System.String.PadRight%28System.Int32%2CSystem.Char%29> method pads the end of the returned string. This means that, when used with right-to-left languages, it pads the left portion of the string.  \\n  \\n> [!NOTE]\\n>  If the <xref:System.String.PadRight%2A> method pads the current instance with whitespace characters, this method does not modify the value of the current instance. Instead, it returns a new string that is padded with trailing `paddingChar` characters so that its total length is `totalWidth` characters.\"\n  example:\n  - \"The following example demonstrates the <xref:System.String.PadRight%2A> method.  \\n  \\n [!code-cpp[Classic String.PadRight1 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic String.PadRight1 Example/CPP/source.cpp#1)]\\n [!code-csharp[Classic String.PadRight1 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic String.PadRight1 Example/cs/source.cs#1)]\\n [!code-vb[Classic String.PadRight1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic String.PadRight1 Example/VB/source.vb#1)]\"\n  syntax:\n    content: public string PadRight (int totalWidth, char paddingChar);\n    parameters:\n    - id: totalWidth\n      type: System.Int32\n      description: The number of characters in the resulting string, equal to the number of original characters plus any additional padding characters.\n    - id: paddingChar\n      type: System.Char\n      description: A Unicode padding character.\n    return:\n      type: System.String\n      description: A new string that is equivalent to this instance, but left-aligned and padded on the right with as many <code>paddingChar</code> characters as needed to create a length of <code>totalWidth</code>. However, if <code>totalWidth</code> is less than the length of this instance, the method returns a reference to the existing instance. If <code>totalWidth</code> is equal to the length of this instance, the method returns a new string that is identical to this instance.\n  overload: System.String.PadRight*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>totalWidth</code> is less than zero.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/String.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.String.Remove(System.Int32)\n  commentId: M:System.String.Remove(System.Int32)\n  id: Remove(System.Int32)\n  parent: System.String\n  langs:\n  - csharp\n  name: Remove(Int32)\n  nameWithType: String.Remove(Int32)\n  fullName: String.Remove(Int32)\n  type: Method\n  assemblies:\n  - System.Runtime\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Returns a new string in which all the characters in the current instance, beginning at a specified position and continuing through the last position, have been deleted.\n  remarks: \"In the [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)], strings are zero-based. The value of the `startIndex` parameter can range from zero to one less than the length of the string instance.  \\n  \\n> [!NOTE]\\n>  This method does not modify the value of the current instance. Instead, it returns a new string in which all characters from position `startIndex` to the end of the original string have been removed.\"\n  example:\n  - \"The following example demonstrates the <xref:System.String.Remove%2A> method. The next-to-last case removes all text starting from the specified index through the end of the string. The last case removes three characters starting from the specified index.  \\n  \\n [!code-cpp[string.remove#1](~/samples/snippets/cpp/VS_Snippets_CLR/string.remove/CPP/r.cpp#1)]\\n [!code-csharp[string.remove#1](~/samples/snippets/csharp/VS_Snippets_CLR/string.remove/CS/r.cs#1)]\\n [!code-vb[string.remove#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/string.remove/VB/r.vb#1)]\"\n  syntax:\n    content: public string Remove (int startIndex);\n    parameters:\n    - id: startIndex\n      type: System.Int32\n      description: The zero-based position to begin deleting characters.\n    return:\n      type: System.String\n      description: A new string that is equivalent to this string except for the removed characters.\n  overload: System.String.Remove*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"<code>startIndex</code> is less than zero.  \\n  \\n -or-  \\n  \\n <code>startIndex</code> specifies a position that is not within this string.\"\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/String.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.String.Remove(System.Int32,System.Int32)\n  commentId: M:System.String.Remove(System.Int32,System.Int32)\n  id: Remove(System.Int32,System.Int32)\n  parent: System.String\n  langs:\n  - csharp\n  name: Remove(Int32, Int32)\n  nameWithType: String.Remove(Int32, Int32)\n  fullName: String.Remove(Int32, Int32)\n  type: Method\n  assemblies:\n  - System.Runtime\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Returns a new string in which a specified number of characters in the current instance beginning at a specified position have been deleted.\n  remarks: \"In the [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)], strings are zero-based. The value of the `startIndex` parameter can range from zero to one less than the length of the string instance.  \\n  \\n> [!NOTE]\\n>  This method does not modify the value of the current instance. Instead, it returns a new string in which the number of characters specified by the `count` parameter have been removed. The characters are removed at the position specified by `startIndex`.\"\n  example:\n  - \"The following example demonstrates how you can remove the middle name from a complete name.  \\n  \\n [!code-cpp[stringremove#1](~/samples/snippets/cpp/VS_Snippets_CLR/stringremove/CPP/stringremove.cpp#1)]\\n [!code-csharp[stringremove#1](~/samples/snippets/csharp/VS_Snippets_CLR/stringremove/CS/stringremove.cs#1)]\\n [!code-vb[stringremove#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/stringremove/VB/stringremove.vb#1)]\"\n  syntax:\n    content: public string Remove (int startIndex, int count);\n    parameters:\n    - id: startIndex\n      type: System.Int32\n      description: The zero-based position to begin deleting characters.\n    - id: count\n      type: System.Int32\n      description: The number of characters to delete.\n    return:\n      type: System.String\n      description: A new string that is equivalent to this instance except for the removed characters.\n  overload: System.String.Remove*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"Either <code>startIndex</code> or <code>count</code> is less than zero.  \\n  \\n -or-  \\n  \\n <code>startIndex</code> plus <code>count</code> specify a position outside this instance.\"\n  attributes: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/String.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.String.Replace(System.Char,System.Char)\n  commentId: M:System.String.Replace(System.Char,System.Char)\n  id: Replace(System.Char,System.Char)\n  parent: System.String\n  langs:\n  - csharp\n  name: Replace(Char, Char)\n  nameWithType: String.Replace(Char, Char)\n  fullName: String.Replace(Char, Char)\n  type: Method\n  assemblies:\n  - System.Runtime\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Returns a new string in which all occurrences of a specified Unicode character in this instance are replaced with another specified Unicode character.\n  remarks: \"This method performs an ordinal (case-sensitive and culture-insensitive) search to find `oldChar`.  \\n  \\n> [!NOTE]\\n>  This method does not modify the value of the current instance. Instead, it returns a new string in which all occurrences of `oldChar` are replaced by `newChar`.  \\n  \\n Because this method returns the modified string, you can chain together successive calls to the <xref:System.String.Replace%2A> method to perform multiple replacements on the original string. Method calls are executed from left to right. The following example provides an illustration.  \\n  \\n [!code-csharp[System.String.Replace#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.replace/cs/replace2.cs#2)]\\n [!code-vb[System.String.Replace#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.string.replace/vb/replace2.vb#2)]\"\n  example:\n  - \"The following example creates a comma separated value list by substituting commas for the blanks between a series of numbers.  \\n  \\n [!code-cpp[string.replace1#1](~/samples/snippets/cpp/VS_Snippets_CLR/string.replace1/CPP/string.replace1.cpp#1)]\\n [!code-csharp[string.replace1#1](~/samples/snippets/csharp/VS_Snippets_CLR/string.replace1/CS/string.replace1.cs#1)]\\n [!code-vb[string.replace1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/string.replace1/VB/string.replace1.vb#1)]\"\n  syntax:\n    content: public string Replace (char oldChar, char newChar);\n    parameters:\n    - id: oldChar\n      type: System.Char\n      description: The Unicode character to be replaced.\n    - id: newChar\n      type: System.Char\n      description: The Unicode character to replace all occurrences of <code>oldChar</code>.\n    return:\n      type: System.String\n      description: A string that is equivalent to this instance except that all instances of <code>oldChar</code> are replaced with <code>newChar</code>. If <code>oldChar</code> is not found in the current instance, the method returns the current instance unchanged.\n  overload: System.String.Replace*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/String.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.String.Replace(System.String,System.String)\n  commentId: M:System.String.Replace(System.String,System.String)\n  id: Replace(System.String,System.String)\n  parent: System.String\n  langs:\n  - csharp\n  name: Replace(String, String)\n  nameWithType: String.Replace(String, String)\n  fullName: String.Replace(String, String)\n  type: Method\n  assemblies:\n  - System.Runtime\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Returns a new string in which all occurrences of a specified string in the current instance are replaced with another specified string.\n  remarks: \"If `newValue` is `null`, all occurrences of `oldValue` are removed.  \\n  \\n> [!NOTE]\\n>  This method does not modify the value of the current instance. Instead, it returns a new string in which all occurrences of `oldValue` are replaced by `newValue`.  \\n  \\n This method performs an ordinal (case-sensitive and culture-insensitive) search to find `oldValue`.  \\n  \\n Because this method returns the modified string, you can chain together successive calls to the <xref:System.String.Replace%2A> method to perform multiple replacements on the original string. Method calls are executed from left to right. The following example provides an illustration.  \\n  \\n [!code-csharp[System.String.Replace#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.replace/cs/replace1.cs#1)]\\n [!code-vb[System.String.Replace#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.string.replace/vb/replace1.vb#1)]\"\n  example:\n  - \"The following example demonstrates how you can use the <xref:System.String.Replace%2A> method to correct a spelling error.  \\n  \\n [!code-cpp[stringreplace#1](~/samples/snippets/cpp/VS_Snippets_CLR/stringreplace/CPP/stringreplace.cpp#1)]\\n [!code-csharp[stringreplace#1](~/samples/snippets/csharp/VS_Snippets_CLR/stringreplace/CS/stringreplace.cs#1)]\\n [!code-vb[stringreplace#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/stringreplace/VB/stringreplace.vb#1)]\"\n  syntax:\n    content: public string Replace (string oldValue, string newValue);\n    parameters:\n    - id: oldValue\n      type: System.String\n      description: The string to be replaced.\n    - id: newValue\n      type: System.String\n      description: The string to replace all occurrences of <code>oldValue</code>.\n    return:\n      type: System.String\n      description: A string that is equivalent to the current string except that all instances of <code>oldValue</code> are replaced with <code>newValue</code>. If <code>oldValue</code> is not found in the current instance, the method returns the current instance unchanged.\n  overload: System.String.Replace*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>oldValue</code> is `null`.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>oldValue</code> is the empty string (\"\").\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/String.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.String.Replace(System.String,System.String,System.StringComparison)\n  commentId: M:System.String.Replace(System.String,System.String,System.StringComparison)\n  id: Replace(System.String,System.String,System.StringComparison)\n  parent: System.String\n  langs:\n  - csharp\n  name: Replace(String, String, StringComparison)\n  nameWithType: String.Replace(String, String, StringComparison)\n  fullName: String.Replace(String, String, StringComparison)\n  type: Method\n  assemblies:\n  - System.Runtime\n  namespace: System\n  syntax:\n    content: public string Replace (string oldValue, string newValue, StringComparison comparisonType);\n    parameters:\n    - id: oldValue\n      type: System.String\n      description: ''\n    - id: newValue\n      type: System.String\n      description: ''\n    - id: comparisonType\n      type: System.StringComparison\n      description: ''\n    return:\n      type: System.String\n      description: ''\n  overload: System.String.Replace*\n  exceptions: []\n  version:\n  - netcore-2.0\n  monikers:\n  - netcore-2.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/String.xml\n- uid: System.String.Replace(System.String,System.String,System.Boolean,System.Globalization.CultureInfo)\n  commentId: M:System.String.Replace(System.String,System.String,System.Boolean,System.Globalization.CultureInfo)\n  id: Replace(System.String,System.String,System.Boolean,System.Globalization.CultureInfo)\n  parent: System.String\n  langs:\n  - csharp\n  name: Replace(String, String, Boolean, CultureInfo)\n  nameWithType: String.Replace(String, String, Boolean, CultureInfo)\n  fullName: String.Replace(String, String, Boolean, CultureInfo)\n  type: Method\n  assemblies:\n  - System.Runtime\n  namespace: System\n  syntax:\n    content: public string Replace (string oldValue, string newValue, bool ignoreCase, System.Globalization.CultureInfo culture);\n    parameters:\n    - id: oldValue\n      type: System.String\n      description: ''\n    - id: newValue\n      type: System.String\n      description: ''\n    - id: ignoreCase\n      type: System.Boolean\n      description: ''\n    - id: culture\n      type: System.Globalization.CultureInfo\n      description: ''\n    return:\n      type: System.String\n      description: ''\n  overload: System.String.Replace*\n  exceptions: []\n  version:\n  - netcore-2.0\n  monikers:\n  - netcore-2.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/String.xml\n- uid: System.String.Split(System.String[],System.Int32,System.StringSplitOptions)\n  commentId: M:System.String.Split(System.String[],System.Int32,System.StringSplitOptions)\n  id: Split(System.String[],System.Int32,System.StringSplitOptions)\n  parent: System.String\n  langs:\n  - csharp\n  name: Split(String[], Int32, StringSplitOptions)\n  nameWithType: String.Split(String[], Int32, StringSplitOptions)\n  fullName: String.Split(String[], Int32, StringSplitOptions)\n  type: Method\n  assemblies:\n  - System.Runtime\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Splits a string into a maximum number of substrings based on the strings in an array. You can specify whether the substrings include empty array elements.\n  remarks: \"## Return value details  \\n Delimiter strings are not included in the elements of the returned array.  \\n  \\n If this instance does not contain any of the strings in `separator`, or the `count` parameter is 1, the returned array consists of a single element that contains this instance. If the `separator` parameter is `null` or contains no characters, white-space characters are assumed to be the delimiters. White-space characters are defined by the Unicode standard and return `true` if they are passed to the <xref:System.Char.IsWhiteSpace%2A?displayProperty=fullName> method. However, if the `separator` parameter in the call to this method overload is `null`, compiler overload resolution fails. To unambiguously identify the called method, your code must indicate the type of the `null`. The following example shows several ways to unambiguously identify this overload.  \\n  \\n [!code-csharp[System.String.Split#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Split/cs/split3.cs#4)]\\n [!code-vb[System.String.Split#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Split/vb/split3.vb#4)]  \\n  \\n If the `count` parameter is zero, or the `options` parameter is <xref:System.StringSplitOptions.RemoveEmptyEntries> and the length of this instance is zero, an empty array is returned.  \\n  \\n Each element of `separator` defines a separate delimiter that consists of one or more characters. If the `options` parameter is <xref:System.StringSplitOptions.None>, and two delimiters are adjacent or a delimiter is found at the beginning or end of this instance, the corresponding array element contains <xref:System.String.Empty>.  \\n  \\n If there are more than `count` substrings in this instance, the first `count` minus 1 substrings are returned in the first `count` minus 1 elements of the return value, and the remaining characters in this instance are returned in the last element of the return value.  \\n  \\n If `count` is greater than the number of substrings, the available substrings are returned and no exception is thrown.  \\n  \\n## The separator array  \\n If any of the elements in `separator` consists of multiple characters, the entire substring is considered a delimiter. For example, if one of the elements in `separator` is \\\"10\\\", attempting to split the string \\\"This10is10a10string.\\\" returns this four-element array: { \\\"This\\\", \\\"is\\\", \\\"a\\\", \\\"string.\\\" }.  \\n  \\n## Comparison details  \\n The <xref:System.String.Split%2A> method extracts the substrings in this string that are delimited by one or more of the strings in the `separator` parameter, and returns those substrings as elements of an array.  \\n  \\n The <xref:System.String.Split%2A> method looks for delimiters by performing comparisons using case-sensitive ordinal sort rules. For more information about word, string, and ordinal sorts, see the <xref:System.Globalization.CompareOptions?displayProperty=fullName> enumeration.  \\n  \\n The <xref:System.String.Split%2A> method ignores any element of `separator` whose value is `null` or the empty string (\\\"\\\").  \\n  \\n To avoid ambiguous results when strings in `separator` have characters in common, the <xref:System.String.Split%2A> method proceeds from the beginning to the end of the value of the instance, and matches the first element in `separator` that is equal to a delimiter in the instance. The order in which substrings are encountered in the instance takes precedence over the order of elements in `separator`.  \\n  \\n For example, consider an instance whose value is \\\"abcdef\\\". If the first element in `separator` was \\\"ef\\\" and the second element was \\\"bcde\\\", the result of the split operation would be \\\"a\\\" and \\\"f\\\". This is because the substring in the instance, \\\"bcde\\\", is encountered and matches an element in `separator` before the substring \\\"f\\\" is encountered.  \\n  \\n However, if the first element of `separator` was \\\"bcd\\\" and the second element was \\\"bc\\\", the result of the split operation would be \\\"a\\\" and \\\"ef\\\". This is because \\\"bcd\\\" is the first delimiter in `separator` that matches a delimiter in the instance. If the order of the separators was reversed so the first element was \\\"bc\\\" and the second element was \\\"bcd\\\", the result would be \\\"a\\\" and \\\"def\\\".  \\n  \\n## Performance considerations  \\n The<xref:System.String.Split%2A> methods allocate memory for the returned array object and a <xref:System.String> object for each array element. If your application requires optimal performance or if managing memory allocation is critical in your application, consider using the <xref:System.String.IndexOf%2A> or <xref:System.String.IndexOfAny%2A> method, and optionally the <xref:System.String.Compare%2A> method, to locate a substring within a string.  \\n  \\n If you are splitting a string at a separator character, use the <xref:System.String.IndexOf%2A> or <xref:System.String.IndexOfAny%2A> method to locate a separator character in the string. If you are splitting a string at a separator string, use the <xref:System.String.IndexOf%2A> or <xref:System.String.IndexOfAny%2A> method to locate the first character of the separator string. Then use the <xref:System.String.Compare%2A> method to determine whether the characters after that first character are equal to the remaining characters of the separator string.  \\n  \\n In addition, if the same set of characters is used to split strings in multiple <xref:System.String.Split%2A> method calls, consider creating a single array and referencing it in each method call. This significantly reduces the additional overhead of each method call.\"\n  example:\n  - \"The following example uses the <xref:System.StringSplitOptions> enumeration to include or exclude substrings generated by the <xref:System.String.Split%2A> method.  \\n  \\n [!code-cpp[string.split3#1](~/samples/snippets/cpp/VS_Snippets_CLR/string.split3/CPP/omit.cpp#1)]\\n [!code-csharp[string.split3#1](~/samples/snippets/csharp/VS_Snippets_CLR/string.split3/CS/omit.cs#1)]\\n [!code-vb[string.split3#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/string.split3/VB/omit.vb#1)]\"\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(false)]\n\n      public string[] Split (string[] separator, int count, StringSplitOptions options);\n    parameters:\n    - id: separator\n      type: System.String[]\n      description: A string array that delimits the substrings in this string, an empty array that contains no delimiters, or `null`.\n    - id: count\n      type: System.Int32\n      description: The maximum number of substrings to return.\n    - id: options\n      type: System.StringSplitOptions\n      description: <xref href=\"System.StringSplitOptions.RemoveEmptyEntries\"></xref> to omit empty array elements from the array returned; or <xref href=\"System.StringSplitOptions.None\"></xref> to include empty array elements in the array returned.\n    return:\n      type: System.String[]\n      description: An array whose elements contain the substrings in this string that are delimited by one or more strings in <code>separator</code>. For more information, see the Remarks section.\n  overload: System.String.Split*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>count</code> is negative.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>options</code> is not one of the <xref href=\"System.StringSplitOptions\"></xref> values.\n  attributes:\n  - type: System.Runtime.InteropServices.ComVisibleAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/String.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.String.Split(System.String,System.Int32,System.StringSplitOptions)\n  commentId: M:System.String.Split(System.String,System.Int32,System.StringSplitOptions)\n  id: Split(System.String,System.Int32,System.StringSplitOptions)\n  parent: System.String\n  langs:\n  - csharp\n  name: Split(String, Int32, StringSplitOptions)\n  nameWithType: String.Split(String, Int32, StringSplitOptions)\n  fullName: String.Split(String, Int32, StringSplitOptions)\n  type: Method\n  assemblies:\n  - System.Runtime\n  namespace: System\n  syntax:\n    content: public string[] Split (string separator, int count, StringSplitOptions options = System.StringSplitOptions.None);\n    parameters:\n    - id: separator\n      type: System.String\n      description: ''\n    - id: count\n      type: System.Int32\n      description: ''\n    - id: options\n      type: System.StringSplitOptions\n      description: ''\n    return:\n      type: System.String[]\n      description: ''\n  overload: System.String.Split*\n  exceptions: []\n  version:\n  - netcore-2.0\n  monikers:\n  - netcore-2.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/String.xml\n- uid: System.String.Split(System.Char[],System.Int32,System.StringSplitOptions)\n  commentId: M:System.String.Split(System.Char[],System.Int32,System.StringSplitOptions)\n  id: Split(System.Char[],System.Int32,System.StringSplitOptions)\n  parent: System.String\n  langs:\n  - csharp\n  name: Split(Char[], Int32, StringSplitOptions)\n  nameWithType: String.Split(Char[], Int32, StringSplitOptions)\n  fullName: String.Split(Char[], Int32, StringSplitOptions)\n  type: Method\n  assemblies:\n  - System.Runtime\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Splits a string into a maximum number of substrings based on the characters in an array.\n  remarks: \"Delimiter characters are not included in the elements of the returned array.  \\n  \\n If this instance does not contain any of the characters in `separator`, or the `count` parameter is 1, the returned array consists of a single element that contains this instance. If the `separator` parameter is `null` or contains no characters, white-space characters are assumed to be the delimiters. White-space characters are defined by the Unicode standard and return `true` if they are passed to the <xref:System.Char.IsWhiteSpace%2A?displayProperty=fullName> method. However, if the `separator` parameter in the call to this method overload is `null`, compiler overload resolution fails. To unambiguously identify the called method, your code must indicate the type of the null. The following example shows several ways to unambiguously identify this overload.  \\n  \\n [!code-csharp[System.String.Split#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Split/cs/split3.cs#3)]\\n [!code-vb[System.String.Split#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Split/vb/split3.vb#3)]  \\n  \\n If the `count` parameter is zero, or the `options` parameter is <xref:System.StringSplitOptions.RemoveEmptyEntries> and the length of this instance is zero, an empty array is returned.  \\n  \\n Each element of `separator` defines a separate delimiter character. If the `options` parameter is <xref:System.StringSplitOptions.None>, and two delimiters are adjacent or a delimiter is found at the beginning or end of this instance, the corresponding array element contains <xref:System.String.Empty>.  \\n  \\n If there are more than `count` substrings in this instance, the first `count` minus 1 substrings are returned in the first `count` minus 1 elements of the return value, and the remaining characters in this instance are returned in the last element of the return value.  \\n  \\n If `count` is greater than the number of substrings, the available substrings are returned and no exception is thrown.  \\n  \\n## Performance Considerations  \\n The<xref:System.String.Split%2A> methods allocate memory for the returned array object and a <xref:System.String> object for each array element. If your application requires optimal performance or if managing memory allocation is critical in your application, consider using the <xref:System.String.IndexOf%2A> or <xref:System.String.IndexOfAny%2A> method, and optionally the <xref:System.String.Compare%2A> method, to locate a substring within a string.  \\n  \\n If you are splitting a string at a separator character, use the <xref:System.String.IndexOf%2A> or <xref:System.String.IndexOfAny%2A> method to locate a separator character in the string. If you are splitting a string at a separator string, use the <xref:System.String.IndexOf%2A> or <xref:System.String.IndexOfAny%2A> method to locate the first character of the separator string. Then use the <xref:System.String.Compare%2A> method to determine whether the characters after that first character are equal to the remaining characters of the separator string.  \\n  \\n In addition, if the same set of characters is used to split strings in multiple <xref:System.String.Split%2A> method calls, consider creating a single array and referencing it in each method call. This significantly reduces the additional overhead of each method call.\"\n  example:\n  - \"The following example uses the <xref:System.StringSplitOptions> enumeration to include or exclude substrings generated by the <xref:System.String.Split%2A> method.  \\n  \\n [!code-cpp[string.split3#1](~/samples/snippets/cpp/VS_Snippets_CLR/string.split3/CPP/omit.cpp#1)]\\n [!code-csharp[string.split3#1](~/samples/snippets/csharp/VS_Snippets_CLR/string.split3/CS/omit.cs#1)]\\n [!code-vb[string.split3#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/string.split3/VB/omit.vb#1)]\"\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(false)]\n\n      public string[] Split (char[] separator, int count, StringSplitOptions options);\n    parameters:\n    - id: separator\n      type: System.Char[]\n      description: A character array that delimits the substrings in this string, an empty array that contains no delimiters, or `null`.\n    - id: count\n      type: System.Int32\n      description: The maximum number of substrings to return.\n    - id: options\n      type: System.StringSplitOptions\n      description: <xref href=\"System.StringSplitOptions.RemoveEmptyEntries\"></xref> to omit empty array elements from the array returned; or <xref href=\"System.StringSplitOptions.None\"></xref> to include empty array elements in the array returned.\n    return:\n      type: System.String[]\n      description: An array whose elements contain the substrings in this string that are delimited by one or more characters in <code>separator</code>. For more information, see the Remarks section.\n  overload: System.String.Split*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>count</code> is negative.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>options</code> is not one of the <xref href=\"System.StringSplitOptions\"></xref> values.\n  attributes:\n  - type: System.Runtime.InteropServices.ComVisibleAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/String.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.String.Split(System.Char,System.Int32,System.StringSplitOptions)\n  commentId: M:System.String.Split(System.Char,System.Int32,System.StringSplitOptions)\n  id: Split(System.Char,System.Int32,System.StringSplitOptions)\n  parent: System.String\n  langs:\n  - csharp\n  name: Split(Char, Int32, StringSplitOptions)\n  nameWithType: String.Split(Char, Int32, StringSplitOptions)\n  fullName: String.Split(Char, Int32, StringSplitOptions)\n  type: Method\n  assemblies:\n  - System.Runtime\n  namespace: System\n  syntax:\n    content: public string[] Split (char separator, int count, StringSplitOptions options = System.StringSplitOptions.None);\n    parameters:\n    - id: separator\n      type: System.Char\n      description: ''\n    - id: count\n      type: System.Int32\n      description: ''\n    - id: options\n      type: System.StringSplitOptions\n      description: ''\n    return:\n      type: System.String[]\n      description: ''\n  overload: System.String.Split*\n  exceptions: []\n  version:\n  - netcore-2.0\n  monikers:\n  - netcore-2.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/String.xml\n- uid: System.String.Split(System.String[],System.StringSplitOptions)\n  commentId: M:System.String.Split(System.String[],System.StringSplitOptions)\n  id: Split(System.String[],System.StringSplitOptions)\n  parent: System.String\n  langs:\n  - csharp\n  name: Split(String[], StringSplitOptions)\n  nameWithType: String.Split(String[], StringSplitOptions)\n  fullName: String.Split(String[], StringSplitOptions)\n  type: Method\n  assemblies:\n  - System.Runtime\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Splits a string into substrings based on the strings in an array. You can specify whether the substrings include empty array elements.\n  remarks: \"When a string is delimited by a known set of strings, you can use the <xref:System.String.Split%2A> method to separate it into substrings.  \\n  \\n## Return value details  \\n Delimiter strings are not included in the elements of the returned array. For example, if the `separator` array includes the string \\\"--\\\" and the value of the current string instance is \\\"aa--bb-cc\\\", the method returns an array that contains three elements: \\\"aa\\\", \\\"bb\\\", and \\\"cc\\\".  \\n  \\n If this instance does not contain any of the strings in `separator`, the returned array consists of a single element that contains this instance.  \\n  \\n If the `options` parameter is <xref:System.StringSplitOptions.RemoveEmptyEntries> and the length of this instance is zero, the method returns an empty array.  \\n  \\n Each element of `separator` defines a separate delimiter that consists of one or more characters. If the `options` argument is <xref:System.StringSplitOptions.None>, and two delimiters are adjacent or a delimiter is found at the beginning or end of this instance, the corresponding array element contains <xref:System.String?displayProperty=fullName>. For example, if `separator` includes  two elements, \\\"-\\\" and \\\"_\\\", the value of the string instance is \\\"-_aa-\\\\_\\\", and the value of   the `options` argument is <xref:System.StringSplitOptions.None>, the method returns a sting array with the following five elements:  \\n  \\n1.  <xref:System.String.Empty?displayProperty=fullName>, which represents the empty string that precedes the \\\"-\\\" substring at index 0.  \\n  \\n2.  <xref:System.String.Empty?displayProperty=fullName>, which represents the empty string between the \\\"-\\\" substring at index 0 and the \\\"_\\\" substring at index 1.  \\n  \\n3.  \\\"aa\\\",  \\n  \\n4.  <xref:System.String.Empty?displayProperty=fullName>, which represents the empty string that follows the \\\"_\\\" substring at index 4.  \\n  \\n5.  <xref:System.String.Empty?displayProperty=fullName>, which represents the empty string that follows the \\\"-\\\" substring at index 5.  \\n  \\n## The separator array  \\n If any of the elements in `separator` consists of multiple characters, the entire substring is considered a delimiter. For example, if one of the elements in `separator` is \\\"10\\\", attempting to split the string \\\"This10is10a10string.\\\" returns the following four-element array: { \\\"This\\\", \\\"is\\\", \\\"a\\\", \\\"string.\\\" }.  \\n  \\n If the `separator` parameter is `null` or contains no characters, white-space characters are assumed to be the delimiters. White-space characters are defined by the Unicode standard and return `true` if they are passed to the <xref:System.Char.IsWhiteSpace%2A?displayProperty=fullName> method.  \\n  \\n If the `separator` parameter in the call to this method overload is `null`, compiler overload resolution fails. To unambiguously identify the called method, your code must indicate the type of the `null`. The following example shows several ways to unambiguously identify this overload.  \\n  \\n [!code-csharp[System.String.Split#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Split/cs/split3.cs#6)]\\n [!code-vb[System.String.Split#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Split/vb/split3.vb#6)]  \\n  \\n## Comparison details  \\n The <xref:System.String.Split%2A> method extracts the substrings in this string that are delimited by one or more of the strings in the `separator` parameter, and returns those substrings as elements of an array.  \\n  \\n The <xref:System.String.Split%2A> method looks for delimiters by performing comparisons using case-sensitive ordinal sort rules. For more information about word, string, and ordinal sorts, see the <xref:System.Globalization.CompareOptions?displayProperty=fullName> enumeration.  \\n  \\n The <xref:System.String.Split%2A> method ignores any element of `separator` whose value is `null` or the empty string (\\\"\\\").  \\n  \\n To avoid ambiguous results when strings in `separator` have characters in common, the <xref:System.String.Split%2A> operation proceeds from the beginning to the end of the value of the instance, and matches the first element in `separator` that is equal to a delimiter in the instance. The order in which substrings are encountered in the instance takes precedence over the order of elements in `separator`.  \\n  \\n For example, consider an instance whose value is \\\"abcdef\\\". If the first element in `separator` was \\\"ef\\\" and the second element was \\\"bcde\\\", the result of the split operation would be a string array that contains two elements, \\\"a\\\" and \\\"f\\\". This is because the substring in the instance, \\\"bcde\\\", is encountered and matches an element in `separator` before the substring \\\"f\\\" is encountered.  \\n  \\n However, if the first element of `separator` was \\\"bcd\\\" and the second element was \\\"bc\\\", the result of the split operation would be a string array that contains two elements, \\\"a\\\" and \\\"ef\\\". This is because \\\"bcd\\\" is the first delimiter in `separator` that matches a delimiter in the instance. If the order of the separators was reversed so the first element was \\\"bc\\\" and the second element was \\\"bcd\\\", the result would be a string array that contains two elements,  \\\"a\\\" and \\\"def\\\".  \\n  \\n## Performance considerations  \\n The <xref:System.String.Split%2A> methods allocate memory for the returned array object and a <xref:System.String> object for each array element. If your application requires optimal performance or if managing memory allocation is critical in your application, consider using the <xref:System.String.IndexOf%2A> or <xref:System.String.IndexOfAny%2A> method, and optionally the <xref:System.String.Compare%2A> method, to locate a substring within a string.  \\n  \\n If you are splitting a string at a separator character, use the <xref:System.String.IndexOf%2A> or <xref:System.String.IndexOfAny%2A> method to locate a separator character in the string. If you are splitting a string at a separator string, use the <xref:System.String.IndexOf%2A> or <xref:System.String.IndexOfAny%2A> method to locate the first character of the separator string. Then use the <xref:System.String.Compare%2A> method to determine whether the characters after that first character are equal to the remaining characters of the separator string.  \\n  \\n In addition, if the same set of characters is used to split strings in multiple <xref:System.String.Split%2A> method calls, consider creating a single array and referencing it in each method call. This significantly reduces the additional overhead of each method call.\"\n  example:\n  - \"The following example illustrates the difference in the arrays returned by calling a string's <xref:System.String.Split%28System.String%5B%5D%2CSystem.StringSplitOptions%29?displayProperty=fullName> method with its `options` parameter equal to <xref:System.StringSplitOptions?displayProperty=fullName> and <xref:System.StringSplitOptions?displayProperty=fullName>.  \\n  \\n [!code-csharp[System.String.Split#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Split/cs/Split.cs#1)]\\n [!code-vb[System.String.Split#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Split/vb/Split.vb#1)]  \\n  \\n The following example defines an array of separators that include punctuation and white-space characters. Passing this array along with a value of <xref:System.StringSplitOptions?displayProperty=fullName> to the <xref:System.String.Split%28System.String%5B%5D%2CSystem.StringSplitOptions%29> method returns an array that consists of the individual words from the string.  \\n  \\n [!code-csharp[System.String.Split#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Split/cs/split7.cs#7)]\\n [!code-vb[System.String.Split#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Split/vb/split7.vb#7)]  \\n  \\n Note that the method is called with the `options` argument set to <xref:System.StringSplitOptions?displayProperty=fullName>. This prevents the returned array from including<xref:System.String.Empty?displayProperty=fullName> values that represent empty substring matches between punctuation marks and white-space characters.\"\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(false)]\n\n      public string[] Split (string[] separator, StringSplitOptions options);\n    parameters:\n    - id: separator\n      type: System.String[]\n      description: A string array that delimits the substrings in this string, an empty array that contains no delimiters, or `null`.\n    - id: options\n      type: System.StringSplitOptions\n      description: <xref href=\"System.StringSplitOptions.RemoveEmptyEntries\"></xref> to omit empty array elements from the array returned; or <xref href=\"System.StringSplitOptions.None\"></xref> to include empty array elements in the array returned.\n    return:\n      type: System.String[]\n      description: An array whose elements contain the substrings in this string that are delimited by one or more strings in <code>separator</code>. For more information, see the Remarks section.\n  overload: System.String.Split*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>options</code> is not one of the <xref href=\"System.StringSplitOptions\"></xref> values.\n  attributes:\n  - type: System.Runtime.InteropServices.ComVisibleAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/String.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.String.Split(System.Char,System.StringSplitOptions)\n  commentId: M:System.String.Split(System.Char,System.StringSplitOptions)\n  id: Split(System.Char,System.StringSplitOptions)\n  parent: System.String\n  langs:\n  - csharp\n  name: Split(Char, StringSplitOptions)\n  nameWithType: String.Split(Char, StringSplitOptions)\n  fullName: String.Split(Char, StringSplitOptions)\n  type: Method\n  assemblies:\n  - System.Runtime\n  namespace: System\n  syntax:\n    content: public string[] Split (char separator, StringSplitOptions options = System.StringSplitOptions.None);\n    parameters:\n    - id: separator\n      type: System.Char\n      description: ''\n    - id: options\n      type: System.StringSplitOptions\n      description: ''\n    return:\n      type: System.String[]\n      description: ''\n  overload: System.String.Split*\n  exceptions: []\n  version:\n  - netcore-2.0\n  monikers:\n  - netcore-2.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/String.xml\n- uid: System.String.Split(System.Char[],System.StringSplitOptions)\n  commentId: M:System.String.Split(System.Char[],System.StringSplitOptions)\n  id: Split(System.Char[],System.StringSplitOptions)\n  parent: System.String\n  langs:\n  - csharp\n  name: Split(Char[], StringSplitOptions)\n  nameWithType: String.Split(Char[], StringSplitOptions)\n  fullName: String.Split(Char[], StringSplitOptions)\n  type: Method\n  assemblies:\n  - System.Runtime\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Splits a string into substrings based on the characters in an array. You can specify whether the substrings include empty array elements.\n  remarks: \"## Return value details  \\n Delimiter characters (the characters in the `separator` array) are not included in the elements of the returned array. For example, if the `separator` array includes the character \\\"-\\\" and the value of the current string instance is \\\"aa-bb-cc\\\", the method returns an array that contains three elements: \\\"aa\\\", \\\"bb\\\", and \\\"cc\\\".  \\n  \\n If this instance does not contain any of the characters in `separator`, the returned array consists of a single element that contains this instance.  \\n  \\n If the `options` parameter is <xref:System.StringSplitOptions.RemoveEmptyEntries> and the length of this instance is zero, the method returns an empty array.  \\n  \\n Each element of `separator` defines a separate delimiter that consists of a single character. If the `options` argument is <xref:System.StringSplitOptions.None>, and two delimiters are adjacent or a delimiter is found at the beginning or end of this instance, the corresponding array element contains <xref:System.String?displayProperty=fullName>. For example, if `separator` includes  two elements, \\\"-\\\" and \\\"_\\\", the value of the string instance is \\\"-_aa-\\\\_\\\", and the value of   the `options` argument is <xref:System.StringSplitOptions.None>, the method returns a string array with the following five elements:  \\n  \\n1.  <xref:System.String.Empty?displayProperty=fullName>, which represents the empty string that precedes the \\\"-\\\" character at index 0.  \\n  \\n2.  <xref:System.String.Empty?displayProperty=fullName>, which represents the empty string between the \\\"-\\\" character at index 0 and the \\\"_\\\" character at index 1.  \\n  \\n3.  \\\"aa\\\",  \\n  \\n4.  <xref:System.String.Empty?displayProperty=fullName>, which represents the empty string that follows the \\\"_\\\" character at index 4.  \\n  \\n5.  <xref:System.String.Empty?displayProperty=fullName>, which represents the empty string that follows the \\\"-\\\" character at index 5.  \\n  \\n## The separator array  \\n If the `separator` parameter is `null` or contains no characters, white-space characters are assumed to be the delimiters. White-space characters are defined by the Unicode standard and return `true` if they are passed to the <xref:System.Char.IsWhiteSpace%2A?displayProperty=fullName> method.  \\n  \\n If the `separator` parameter in the call to this method overload is `null`, compiler overload resolution fails. To unambiguously identify the called method, your code must indicate the type of the `null`. The following example shows several ways to unambiguously identify this overload.  \\n  \\n [!code-csharp[System.String.Split#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Split/cs/split3.cs#5)]\\n [!code-vb[System.String.Split#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Split/vb/split3.vb#5)]  \\n  \\n## Comparison details  \\n The <xref:System.String.Split%2A> method extracts the substrings in this string that are delimited by one or more of the characters in the `separator` parameter, and returns those substrings as elements of an array.  \\n  \\n The <xref:System.String.Split%2A> method looks for delimiters by performing comparisons using case-sensitive ordinal sort rules. For more information about word, string, and ordinal sorts, see the <xref:System.Globalization.CompareOptions?displayProperty=fullName> enumeration.  \\n  \\n## Performance Considerations  \\n The<xref:System.String.Split%2A> methods allocate memory for the returned array object and a <xref:System.String> object for each array element. If your application requires optimal performance or if managing memory allocation is critical in your application, consider using the <xref:System.String.IndexOf%2A> or <xref:System.String.IndexOfAny%2A> method, and optionally the <xref:System.String.Compare%2A> method, to locate a substring within a string.  \\n  \\n If you are splitting a string at a separator character, use the <xref:System.String.IndexOf%2A> or <xref:System.String.IndexOfAny%2A> method to locate a separator character in the string. If you are splitting a string at a separator string, use the <xref:System.String.IndexOf%2A> or <xref:System.String.IndexOfAny%2A> method to locate the first character of the separator string. Then use the <xref:System.String.Compare%2A> method to determine whether the characters after that first character are equal to the remaining characters of the separator string.  \\n  \\n In addition, if the same set of characters is used to split strings in multiple <xref:System.String.Split%2A> method calls, consider creating a single array and referencing it in each method call. This significantly reduces the additional overhead of each method call.\"\n  example:\n  - \"The following example uses the <xref:System.StringSplitOptions> enumeration to include or exclude substrings generated by the <xref:System.String.Split%2A> method.  \\n  \\n [!code-cpp[string.split3#1](~/samples/snippets/cpp/VS_Snippets_CLR/string.split3/CPP/omit.cpp#1)]\\n [!code-csharp[string.split3#1](~/samples/snippets/csharp/VS_Snippets_CLR/string.split3/CS/omit.cs#1)]\\n [!code-vb[string.split3#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/string.split3/VB/omit.vb#1)]\"\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(false)]\n\n      public string[] Split (char[] separator, StringSplitOptions options);\n    parameters:\n    - id: separator\n      type: System.Char[]\n      description: A character array that delimits the substrings in this string, an empty array that contains no delimiters, or `null`.\n    - id: options\n      type: System.StringSplitOptions\n      description: <xref href=\"System.StringSplitOptions.RemoveEmptyEntries\"></xref> to omit empty array elements from the array returned; or <xref href=\"System.StringSplitOptions.None\"></xref> to include empty array elements in the array returned.\n    return:\n      type: System.String[]\n      description: An array whose elements contain the substrings in this string that are delimited by one or more characters in <code>separator</code>. For more information, see the Remarks section.\n  overload: System.String.Split*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>options</code> is not one of the <xref href=\"System.StringSplitOptions\"></xref> values.\n  attributes:\n  - type: System.Runtime.InteropServices.ComVisibleAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/String.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.String.Split(System.Char[],System.Int32)\n  commentId: M:System.String.Split(System.Char[],System.Int32)\n  id: Split(System.Char[],System.Int32)\n  parent: System.String\n  langs:\n  - csharp\n  name: Split(Char[], Int32)\n  nameWithType: String.Split(Char[], Int32)\n  fullName: String.Split(Char[], Int32)\n  type: Method\n  assemblies:\n  - System.Runtime\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Splits a string into a maximum number of substrings based on the characters in an array. You also specify the maximum number of substrings to return.\n  remarks: \"Delimiter characters are not included in the elements of the returned array.  \\n  \\n If this instance does not contain any of the characters in `separator`, the returned array consists of a single element that contains this instance. If `count` is zero, an empty array is returned.  \\n  \\n If the `separator` parameter is `null` or contains no characters, white-space characters are assumed to be the delimiters. White-space characters are defined by the Unicode standard and return `true` if they are passed to the <xref:System.Char.IsWhiteSpace%2A?displayProperty=fullName> method.  \\n  \\n Each element of `separator` defines a separate delimiter character. If two delimiters are adjacent, or a delimiter is found at the beginning or end of this instance, the corresponding array element contains <xref:System.String.Empty>.  \\n  \\n If there are more than `count` substrings in this instance, the first `count` minus 1 substrings are returned in the first `count` minus 1 elements of the return value, and the remaining characters in this instance are returned in the last element of the return value.  \\n  \\n If `count` is greater than the number of substrings, the available substrings are returned and no exception is thrown.  \\n  \\n The following table provides examples.  \\n  \\n|String value|Separator|Count|Returned array|  \\n|------------------|---------------|-----------|--------------------|  \\n|\\\"42, 12, 19\\\"|new Char[] {',', ' '} (C#)<br /><br /> Char() = {\\\",\\\"c, \\\" \\\"c} (Visual Basic)|2|{\\\"42\\\", \\\" 12, 19\\\"}|  \\n|\\\"42..12..19\\\"|new Char[] {'.'} (C#)<br /><br /> Char() = {\\\".\\\"c} (Visual Basic)|4|{\\\"42\\\", \\\"\\\", \\\"12\\\", \\\".19\\\"}|  \\n|\\\"Banana\\\"|new Char[] {'.'} (C#)<br /><br /> Char() = {\\\".\\\"c} (Visual Basic)|2|{\\\"Banana\\\"}|  \\n|\\\"Darb\\\\nSmarba\\\" (C#)<br /><br /> \\\"Darb\\\" & vbLf & \\\"Smarba\\\" (Visual Basic)|new Char[] {} (C#)<br /><br /> Char() = {} (Visual Basic)|1|{\\\"Darb\\\\nSmarba\\\"} (C#)<br /><br /> \\\"Darb\\\" & vbLf & \\\"Smarba\\\" (Visual Basic)|  \\n|\\\"Darb\\\\nSmarba\\\" (C#)<br /><br /> \\\"Darb\\\" & vbLf & \\\"Smarba\\\" (Visual Basic)|new Char[] null (C#)<br /><br /> Char() = Nothing|2|{\\\"Darb\\\", \\\"Smarba\\\"}|  \\n|\\\"Darb\\\\nSmarba\\\" (C#)<br /><br /> \\\"Darb\\\" & vbLf & \\\"Smarba\\\" (Visual Basic)|new Char[] null (C#)<br /><br /> Char() = Nothing|100|{\\\"Darb\\\", \\\"Smarba\\\"}|  \\n  \\n## Performance Considerations  \\n The<xref:System.String.Split%2A> methods allocate memory for the returned array object and a <xref:System.String> object for each array element. If your application requires optimal performance or if managing memory allocation is critical in your application, consider using the <xref:System.String.IndexOf%2A> or <xref:System.String.IndexOfAny%2A> method, and optionally the <xref:System.String.Compare%2A> method, to locate a substring within a string.  \\n  \\n If you are splitting a string at a separator character, use the <xref:System.String.IndexOf%2A> or <xref:System.String.IndexOfAny%2A> method to locate a separator character in the string. If you are splitting a string at a separator string, use the <xref:System.String.IndexOf%2A> or <xref:System.String.IndexOfAny%2A> method to locate the first character of the separator string. Then use the <xref:System.String.Compare%2A> method to determine whether the characters after that first character are equal to the remaining characters of the separator string.  \\n  \\n In addition, if the same set of characters is used to split strings in multiple <xref:System.String.Split%2A> method calls, consider creating a single array and referencing it in each method call. This significantly reduces the additional overhead of each method call.\"\n  example:\n  - \"The following example demonstrates how `count` affects the number of strings returned by <xref:System.String.Split%2A>.  \\n  \\n [!code-csharp[StringSplit2#10](~/samples/snippets/csharp/VS_Snippets_CLR/StringSplit2/CS/StringSplit10.cs#10)]\\n [!code-vb[StringSplit2#10](~/samples/snippets/visualbasic/VS_Snippets_CLR/StringSplit2/VB/stringsplit10.vb#10)]\"\n  syntax:\n    content: public string[] Split (char[] separator, int count);\n    parameters:\n    - id: separator\n      type: System.Char[]\n      description: A character array that delimits the substrings in this string, an empty array that contains no delimiters, or `null`.\n    - id: count\n      type: System.Int32\n      description: The maximum number of substrings to return.\n    return:\n      type: System.String[]\n      description: An array whose elements contain the substrings in this instance that are delimited by one or more characters in <code>separator</code>. For more information, see the Remarks section.\n  overload: System.String.Split*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>count</code> is negative.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/String.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.String.Split(System.String,System.StringSplitOptions)\n  commentId: M:System.String.Split(System.String,System.StringSplitOptions)\n  id: Split(System.String,System.StringSplitOptions)\n  parent: System.String\n  langs:\n  - csharp\n  name: Split(String, StringSplitOptions)\n  nameWithType: String.Split(String, StringSplitOptions)\n  fullName: String.Split(String, StringSplitOptions)\n  type: Method\n  assemblies:\n  - System.Runtime\n  namespace: System\n  syntax:\n    content: public string[] Split (string separator, StringSplitOptions options = System.StringSplitOptions.None);\n    parameters:\n    - id: separator\n      type: System.String\n      description: ''\n    - id: options\n      type: System.StringSplitOptions\n      description: ''\n    return:\n      type: System.String[]\n      description: ''\n  overload: System.String.Split*\n  exceptions: []\n  version:\n  - netcore-2.0\n  monikers:\n  - netcore-2.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/String.xml\n- uid: System.String.Split(System.Char[])\n  commentId: M:System.String.Split(System.Char[])\n  id: Split(System.Char[])\n  parent: System.String\n  langs:\n  - csharp\n  name: Split(Char[])\n  nameWithType: String.Split(Char[])\n  fullName: String.Split(Char[])\n  type: Method\n  assemblies:\n  - System.Runtime\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Splits a string into substrings that are based on the characters in an array.\n  remarks: \"When a string is delimited by a known set of characters, you can use the <xref:System.String.Split%28System.Char%5B%5D%29> method to separate it into substrings. For other ways to extract substrings from a string, see the [Alternatives to String.Split](#Alternatives) section.  \\n  \\n## Return value details  \\n Delimiter characters are not included in the elements of the returned array. For example, if the separator array includes the character \\\"-\\\" and the value of the current string instance is \\\"aa-bb-cc\\\", the method returns an array that contains three elements: \\\"aa\\\", \\\"bb\\\", and \\\"cc\\\".  \\n  \\n If this instance does not contain any of the characters in `separator`, the returned array consists of a single element that contains this instance.  \\n  \\n Each element of `separator` defines a separate delimiter character. If two delimiters are adjacent, or a delimiter is found at the beginning or end of this instance, the corresponding element in the returned array contains <xref:System.String.Empty>. Here are some examples:  \\n  \\n|String value|Separator|Returned array|  \\n|------------------|---------------|--------------------|  \\n|\\\"42, 12, 19\\\"|new Char[] {',', ' '} (C#)<br /><br /> Char() = {\\\",\\\"c, \\\" \\\"c}) (Visual Basic)|{\\\"42\\\", \\\"\\\", \\\"12\\\", \\\"\\\", \\\"19\\\"}|  \\n|\\\"42..12..19\\\"|new Char[] {'.'} (C#)<br /><br /> Char() = {\\\".\\\"c} (Visual Basic)|{\\\"42\\\", \\\"\\\", \\\"12\\\", \\\"\\\", \\\"19\\\"}|  \\n|\\\"Banana\\\"|new Char[] {'.'} (C#)<br /><br /> Char() = {\\\".\\\"c} (Visual Basic)|{\\\"Banana\\\"}|  \\n|\\\"Darb\\\\nSmarba\\\" (C#)<br /><br /> \\\"Darb\\\" & vbLf & \\\"Smarba\\\" (Visual Basic)|new Char[] {} (C#)<br /><br /> Char() = {} (Visual Basic)|{\\\"Darb\\\", \\\"Smarba\\\"}|  \\n|\\\"Darb\\\\nSmarba\\\" (C#)<br /><br /> \\\"Darb\\\" & vbLf & \\\"Smarba\\\" (Visual Basic)|null (C#)<br /><br /> Nothing (Visual Basic)|{\\\"Darb\\\", \\\"Smarba\\\"}|  \\n  \\n## The separator array  \\n Each element of separator defines a separate delimiter that consists of a single character. If the `separator` argument is `null` or contains no characters, the method treats white-space characters as the delimiters. White-space characters are defined by the Unicode standard; they return `true` if they are passed to the <xref:System.Char.IsWhiteSpace%2A?displayProperty=fullName> method.  \\n  \\n## String.Split(Char[]) and compiler overload resolution  \\n Although the single parameter for this overload of <xref:System.String.Split%2A?displayProperty=fullName> is a character array, you can call it with a single character, as the following example shows.  \\n  \\n [!code-csharp[System.String.Split#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Split/cs/Split_CompilerResolution1.cs#12)]\\n [!code-vb[System.String.Split#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Split/vb/Split_CompilerResolution1.vb#12)]  \\n  \\n Because the `separator` parameter is decorated  with the <xref:System.ParamArrayAttribute> attribute, compilers will interpret a single character as a single-element character array. This is not the case for other <xref:System.String.Split%2A?displayProperty=fullName> overloads that include a `separator` parameter; you must explicitly pass these overloads a character array as the `separator` argument.  \\n  \\n## Comparison details  \\n The <xref:System.String.Split%28System.Char%5B%5D%29> method extracts the substrings in this string that are delimited by one or more of the characters in the `separator` array, and returns those substrings as elements of an array.  \\n  \\n The <xref:System.String.Split%28System.Char%5B%5D%29> method looks for delimiters by performing comparisons using case-sensitive ordinal sort rules. For more information about word, string, and ordinal sorts, see the <xref:System.Globalization.CompareOptions?displayProperty=fullName> enumeration.  \\n  \\n<a name=\\\"Alternatives\\\"></a>   \\n## Alternatives to String.Split  \\n The <xref:System.String.Split%2A> method is not always the best way to break a delimited string into substrings. If you don't want to extract all of the substrings of a delimited string, or if you want to parse a string based on a pattern instead of a set of delimiter characters, consider the following alternatives.  \\n  \\n### Regular expressions  \\n If your strings conform to a fixed pattern, you can use a regular expression to extract and handle their elements. For example, if strings take the form \\\"*number* *operand* *number*\\\" you can use a [regular expression](~/docs/standard/base-types/regular-expressions.md) to extract and handle the string's elements. Here's an example:  \\n  \\n [!code-csharp[System.String.Split#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Split/cs/splitalt1.cs#8)]\\n [!code-vb[System.String.Split#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Split/vb/splitalt1.vb#8)]  \\n  \\n The regular expression pattern `(\\\\d+)\\\\s+([-+*/])\\\\s+(\\\\d+)` is defined like this:  \\n  \\n|Pattern|Description|  \\n|-------------|-----------------|  \\n|`(\\\\d+)`|Match one or more decimal digits. This is the first capturing group.|  \\n|`\\\\s+`|Match one or more whitespace characters.|  \\n|`([-+*/])`|Match an arithmetic operator sign (+, -, *, or /). This is the second capturing group.|  \\n|`\\\\s+`|Match one or more whitespace characters.|  \\n|`(\\\\d+)`|Match one or more decimal digits. This is the third capturing group.|  \\n  \\n You can also use a regular expression to extract substrings from a string based on a pattern rather than a fixed set of characters. This is a common scenario when either of these conditions occurs:  \\n  \\n-   One or more of the delimiter characters does not always serve as a delimiter in the <xref:System.String> instance.  \\n  \\n-   The sequence and number of delimiter characters is variable or unknown.  \\n  \\n For example, the <xref:System.String.Split%2A> method cannot be used to split the following string, because the number of `\\\\n` (in C#) or `vbCrLf` (in Visual Basic) characters is variable, and they do not always serve as delimiters.  \\n  \\n```  \\n  \\n[This is captured\\\\ntext.]\\\\n\\\\n[\\\\n[This is more captured text.]\\\\n]  \\n\\\\n[Some more captured text:\\\\n   Option1\\\\n   Option2][Terse text.]  \\n  \\n```  \\n  \\n A regular expression can split this string easily, as the following example shows.  \\n  \\n [!code-csharp[System.String.Split#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Split/cs/splitalt2.cs#9)]\\n [!code-vb[System.String.Split#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Split/vb/splitalt2.vb#9)]  \\n  \\n The regular expression pattern `\\\\[([^\\\\[\\\\]]+)\\\\]` is defined like this:  \\n  \\n|Pattern|Description|  \\n|-------------|-----------------|  \\n|`\\\\[`|Match an opening bracket.|  \\n|`([^\\\\[\\\\]]+)`|Match any character that is not an opening or a closing bracket one or more times. This is the first capturing group.|  \\n|`\\\\]`|Match a closing bracket.|  \\n  \\n The <xref:System.Text.RegularExpressions.Regex.Split%2A?displayProperty=fullName> method is almost identical to <xref:System.String.Split%2A?displayProperty=fullName>, except that it splits a string based on a regular expression pattern instead of a fixed character set. For example, the following example uses the <xref:System.Text.RegularExpressions.Regex.Split%2A?displayProperty=fullName>method to split a string that contains substrings delimited by various combinations of hyphens and other characters.  \\n  \\n [!code-csharp[System.String.Split#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Split/cs/splitalt3.cs#10)]\\n [!code-vb[System.String.Split#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Split/vb/splitalt3.vb#10)]  \\n  \\n The regular expression pattern `\\\\s-\\\\s?[+*]?\\\\s?-\\\\s` is defined like this:  \\n  \\n|Pattern|Description|  \\n|-------------|-----------------|  \\n|`\\\\s-`|Match a whitespace character followed by a hyphen.|  \\n|`\\\\s?`|Match zero or one whitespace character.|  \\n|`[+*]?`|Match zero or one occurrence of either the + or * character.|  \\n|`\\\\s?`|Match zero or one whitespace character.|  \\n|`-\\\\s`|Match a hyphen followed by a whitespace character.|  \\n  \\n### Search methods and the Substring method  \\n If you aren't interested in all of the substrings in a string, you might prefer to work with one of the string comparison methods that returns the index at which the match begins. You can then call the <xref:System.String.Substring%2A> method to extract the substring that you want. The string comparison methods include:  \\n  \\n-   <xref:System.String.IndexOf%2A>, which returns the zero-based index of the first occurrence of a character or string in a string instance.  \\n  \\n-   <xref:System.String.IndexOfAny%2A>, which returns the zero-based index in the current string instance of the first occurrence of any character in a character array.  \\n  \\n-   <xref:System.String.LastIndexOf%2A>, which returns the zero-based index of the last occurrence of a character or string in a string instance.  \\n  \\n-   <xref:System.String.LastIndexOfAny%2A>, which returns a zero-based index in the current string instance of the last occurrence of any character in a character array.  \\n  \\n The following example uses the <xref:System.String.IndexOf%2A> method to find the periods in a string. It then uses the <xref:System.String.Substring%2A> method to return full sentences.  \\n  \\n [!code-csharp[System.String.Split#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Split/cs/splitalt4.cs#11)]\\n [!code-vb[System.String.Split#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Split/vb/splitalt4.vb#11)]  \\n  \\n## Performance Considerations  \\n The<xref:System.String.Split%2A> methods allocate memory for the returned array object and a <xref:System.String> object for each array element. If your application requires optimal performance or if managing memory allocation is critical in your application, consider using the <xref:System.String.IndexOf%2A> or <xref:System.String.IndexOfAny%2A> method. You also have the option of using the <xref:System.String.Compare%2A> method to locate a substring within a string.  \\n  \\n To split a string at a separator character, use the <xref:System.String.IndexOf%2A> or <xref:System.String.IndexOfAny%2A> method to locate a separator character in the string. To split a string at a separator string, use the <xref:System.String.IndexOf%2A> or <xref:System.String.IndexOfAny%2A> method to locate the first character of the separator string. Then use the <xref:System.String.Compare%2A> method to determine whether the characters after that first character are equal to the remaining characters of the separator string.  \\n  \\n In addition, if the same set of characters is used to split strings in multiple <xref:System.String.Split%2A> method calls, consider creating a single array and referencing it in each method call. This significantly reduces the additional overhead of each method call.\"\n  example:\n  - \"The following example demonstrates how to extract individual words from a block of text by treating white space and punctuation marks as delimiters. The character array passed to the `separator` parameter of the <xref:System.String.Split%28System.Char%5B%5D%29?displayProperty=fullName> method consists of a space character and a tab character, together with some common punctuation symbols.  \\n  \\n [!code-csharp[System.String.Split#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Split/cs/split2.cs#2)]\\n [!code-vb[System.String.Split#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Split/vb/split2.vb#2)]\"\n  syntax:\n    content: public string[] Split (char[] separator);\n    parameters:\n    - id: separator\n      type: System.Char[]\n      description: A character array that delimits the substrings in this string, an empty array that contains no delimiters, or `null`.\n    return:\n      type: System.String[]\n      description: An array whose elements contain the substrings from this instance that are delimited by one or more characters in <code>separator</code>. For more information, see the Remarks section.\n  overload: System.String.Split*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/String.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.String.StartsWith(System.String,System.Boolean,System.Globalization.CultureInfo)\n  commentId: M:System.String.StartsWith(System.String,System.Boolean,System.Globalization.CultureInfo)\n  id: StartsWith(System.String,System.Boolean,System.Globalization.CultureInfo)\n  parent: System.String\n  langs:\n  - csharp\n  name: StartsWith(String, Boolean, CultureInfo)\n  nameWithType: String.StartsWith(String, Boolean, CultureInfo)\n  fullName: String.StartsWith(String, Boolean, CultureInfo)\n  type: Method\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System\n  summary: Determines whether the beginning of this string instance matches the specified string when compared using the specified culture.\n  remarks: \"This method compares the `value` parameter to the substring at the beginning of this string that is the same length as `value`, and returns a value that indicates whether they are equal. To be equal, `value` must be an empty string (<xref:System.String?displayProperty=fullName>), must be a reference to this same instance, or must match the beginning of this instance.  \\n  \\n This method performs a comparison using the specified casing and culture.\"\n  example:\n  - \"The following example determines whether a string occurs at the beginning of another string. The <xref:System.String.StartsWith%2A> method is called several times using case sensitivity, case insensitivity, and different cultures that influence the results of the search.  \\n  \\n [!code-csharp[system.string.StartsWithCI#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.StartsWithCI/cs/swci.cs#1)]\\n [!code-vb[system.string.StartsWithCI#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.string.StartsWithCI/vb/swci.vb#1)]\"\n  syntax:\n    content: public bool StartsWith (string value, bool ignoreCase, System.Globalization.CultureInfo culture);\n    parameters:\n    - id: value\n      type: System.String\n      description: The string to compare.\n    - id: ignoreCase\n      type: System.Boolean\n      description: '`true` to ignore case during the comparison; otherwise, `false`.'\n    - id: culture\n      type: System.Globalization.CultureInfo\n      description: Cultural information that determines how this string and <code>value</code> are compared. If <code>culture</code> is `null`, the current culture is used.\n    return:\n      type: System.Boolean\n      description: '`true` if the <code>value</code> parameter matches the beginning of this string; otherwise, `false`.'\n  overload: System.String.StartsWith*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>value</code> is `null`.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/String.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.String.StartsWith(System.String,System.StringComparison)\n  commentId: M:System.String.StartsWith(System.String,System.StringComparison)\n  id: StartsWith(System.String,System.StringComparison)\n  parent: System.String\n  langs:\n  - csharp\n  name: StartsWith(String, StringComparison)\n  nameWithType: String.StartsWith(String, StringComparison)\n  fullName: String.StartsWith(String, StringComparison)\n  type: Method\n  assemblies:\n  - System.Runtime\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Determines whether the beginning of this string instance matches the specified string when compared using the specified comparison option.\n  remarks: The <xref:System.String.StartsWith%2A> method compares the `value` parameter to the substring at the beginning of this string and returns a value that indicates whether they are equal. To be equal, `value` must be a reference to this same string, must be the empty string (\"\"), or must match the beginning of this string. The type of comparison performed by the <xref:System.String.StartsWith%2A> method depends on the value of the `comparisonType` parameter. The comparison can use the conventions of the current culture (<xref:System.StringComparison?displayProperty=fullName> and <xref:System.StringComparison?displayProperty=fullName>) or the invariant culture (<xref:System.StringComparison?displayProperty=fullName> and <xref:System.StringComparison?displayProperty=fullName>), or it can consist of a character-by-character comparison of code points (<xref:System.StringComparison?displayProperty=fullName> or <xref:System.StringComparison?displayProperty=fullName>). The comparison can also be case-sensitive (<xref:System.StringComparison?displayProperty=fullName>, <xref:System.StringComparison?displayProperty=fullName>, or <xref:System.StringComparison?displayProperty=fullName>), or it can ignore case (<xref:System.StringComparison?displayProperty=fullName>, <xref:System.StringComparison?displayProperty=fullName>, <xref:System.StringComparison?displayProperty=fullName>).\n  example:\n  - \"The following example searches for the string \\\"the\\\" at the beginning of a longer string that begins with the word \\\"The\\\". As the output from the example shows, a call to the <xref:System.String.StartsWith%28System.String%2CSystem.StringComparison%29> method that performs a culture-insensitive but case-sensitive comparison fails to match the string, while a call that performs a culture- and case-insensitive comparison matches the string.  \\n  \\n [!code-cpp[System.String.StartsWith#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.string.startswith/cpp/StartsWith2.cpp#2)]\\n [!code-csharp[System.String.StartsWith#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.startswith/cs/StartsWith2.cs#2)]\\n [!code-vb[System.String.StartsWith#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.string.startswith/vb/StartsWith2.vb#2)]  \\n  \\n The following example determines whether a string starts with a particular substring. It initializes a two-dimensional string array. The first element in the second dimension contains a string, and the second element contains the string to search for at the start of the first string. The results are affected by the choice of culture, whether case is ignored, and whether an ordinal comparison is performed. Note that when the string instance contains a ligature, culture-sensitive comparisons with its consecutive characters successfully match.  \\n  \\n [!code-cpp[System.String.StartsWith#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.string.startswith/cpp/startswith1.cpp#1)]\\n [!code-csharp[System.String.StartsWith#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.startswith/cs/startswith1.cs#1)]\\n [!code-vb[System.String.StartsWith#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.string.startswith/vb/startswith1.vb#1)]\"\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(false)]\n\n      public bool StartsWith (string value, StringComparison comparisonType);\n    parameters:\n    - id: value\n      type: System.String\n      description: The string to compare.\n    - id: comparisonType\n      type: System.StringComparison\n      description: One of the enumeration values that determines how this string and <code>value</code> are compared.\n    return:\n      type: System.Boolean\n      description: '`true` if this instance begins with <code>value</code>; otherwise, `false`.'\n  overload: System.String.StartsWith*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>value</code> is `null`.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>comparisonType</code> is not a <xref href=\"System.StringComparison\"></xref> value.\n  attributes:\n  - type: System.Runtime.InteropServices.ComVisibleAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/String.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.String.StartsWith(System.String)\n  commentId: M:System.String.StartsWith(System.String)\n  id: StartsWith(System.String)\n  parent: System.String\n  langs:\n  - csharp\n  name: StartsWith(String)\n  nameWithType: String.StartsWith(String)\n  fullName: String.StartsWith(String)\n  type: Method\n  assemblies:\n  - System.Runtime\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Determines whether the beginning of this string instance matches the specified string.\n  remarks: \"This method compares `value` to the substring at the beginning of this instance that is the same length as `value`, and returns an indication whether they are equal. To be equal, `value` must be an empty string (<xref:System.String?displayProperty=fullName>), must be a reference to this same instance, or must match the beginning of this instance.  \\n  \\n This method performs a word (case-sensitive and culture-sensitive) comparison using the current culture.\"\n  example:\n  - \"The following example defines a `StripStartTags` method that uses the <xref:System.String.StartsWith%28System.String%29> method to remove HTML start tags from the beginning of a string. Note that the `StripStartTags` method is called recursively to ensure that multiple HTML start tags at the beginning of the line are removed. The example does not remove HTML tags embedded in a string.  \\n  \\n [!code-cpp[stringstartswith#1](~/samples/snippets/cpp/VS_Snippets_CLR/stringstartswith/CPP/stringstartswith.cpp#1)]\\n [!code-csharp[stringstartswith#1](~/samples/snippets/csharp/VS_Snippets_CLR/stringstartswith/CS/stringstartswith.cs#1)]\\n [!code-vb[stringstartswith#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/stringstartswith/VB/stringstartswith.vb#1)]\"\n  syntax:\n    content: public bool StartsWith (string value);\n    parameters:\n    - id: value\n      type: System.String\n      description: The string to compare.\n    return:\n      type: System.Boolean\n      description: '`true` if <code>value</code> matches the beginning of this string; otherwise, `false`.'\n  overload: System.String.StartsWith*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>value</code> is `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/String.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.String.StartsWith(System.Char)\n  commentId: M:System.String.StartsWith(System.Char)\n  id: StartsWith(System.Char)\n  parent: System.String\n  langs:\n  - csharp\n  name: StartsWith(Char)\n  nameWithType: String.StartsWith(Char)\n  fullName: String.StartsWith(Char)\n  type: Method\n  assemblies:\n  - System.Runtime\n  namespace: System\n  syntax:\n    content: public bool StartsWith (char value);\n    parameters:\n    - id: value\n      type: System.Char\n      description: ''\n    return:\n      type: System.Boolean\n      description: ''\n  overload: System.String.StartsWith*\n  exceptions: []\n  version:\n  - netcore-2.0\n  monikers:\n  - netcore-2.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/String.xml\n- uid: System.String.Substring(System.Int32)\n  commentId: M:System.String.Substring(System.Int32)\n  id: Substring(System.Int32)\n  parent: System.String\n  langs:\n  - csharp\n  name: Substring(Int32)\n  nameWithType: String.Substring(Int32)\n  fullName: String.Substring(Int32)\n  type: Method\n  assemblies:\n  - System.Runtime\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Retrieves a substring from this instance. The substring starts at a specified character position and continues to the end of the string.\n  remarks: \"You call the <xref:System.String.Substring%2A> method to extract a substring from a string that begins at a specified character position and ends at the end of the string. The starting character position is a zero-based; in other words, the first character in the string is at index 0, not index 1. To extract a substring that begins at a specified character position and ends before to the end of the string, call the <xref:System.String.Substring%2A> method.  \\n  \\n> [!NOTE]\\n>  This method does not modify the value of the current instance. Instead, it returns a new string that begins at the `startIndex` position in the current string.  \\n  \\n To extract a substring that begins with a particular character or character sequence, call a method such as  <xref:System.String.IndexOf%2A> or <xref:System.String.IndexOf%2A> to get the value of `startIndex`. The second example illustrates this; it extracts a key value that begins one character position after the \\\"=\\\" character.  \\n  \\n If `startIndex` is equal to zero, the method returns the original string unchanged.\"\n  example:\n  - \"The following example demonstrates obtaining a substring from a string.  \\n  \\n [!code-cpp[System.String.Substring#10](~/samples/snippets/cpp/VS_Snippets_CLR_System/System.String.Substring/cpp/Substring10.cpp#10)]\\n [!code-csharp[System.String.Substring#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.String.Substring/cs/Substring10.cs#10)]\\n [!code-vb[System.String.Substring#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.String.Substring/vb/Substring10.vb#10)]  \\n  \\n The following example uses the <xref:System.String.Substring%2A> method to separate key/value pairs that are delimited by an equals (\\\"=\\\") character.  \\n  \\n [!code-csharp[System.String.Substring#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.String.Substring/cs/Substring1.cs#1)]\\n [!code-vb[System.String.Substring#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.String.Substring/vb/Substring1.vb#1)]  \\n  \\n The <xref:System.String.IndexOf%2A> method is used to get the position of the equals character in the string.. The call to the <xref:System.String.Substring%28System.Int32%2CSystem.Int32%29> method extracts the key name., which starts from the first character in the string and extends for the number of characters returned by the call to the    <xref:System.String.IndexOf%2A> method. The call to the <xref:System.String.Substring%28System.Int32%29> method then extracts the value assigned to the key. It starts at one character position beyond the equals character and extends to the end of the string.\"\n  syntax:\n    content: public string Substring (int startIndex);\n    parameters:\n    - id: startIndex\n      type: System.Int32\n      description: The zero-based starting character position of a substring in this instance.\n    return:\n      type: System.String\n      description: A string that is equivalent to the substring that begins at <code>startIndex</code> in this instance, or <xref href=\"System.String.Empty\"></xref> if <code>startIndex</code> is equal to the length of this instance.\n  overload: System.String.Substring*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>startIndex</code> is less than zero or greater than the length of this instance.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/String.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.String.Substring(System.Int32,System.Int32)\n  commentId: M:System.String.Substring(System.Int32,System.Int32)\n  id: Substring(System.Int32,System.Int32)\n  parent: System.String\n  langs:\n  - csharp\n  name: Substring(Int32, Int32)\n  nameWithType: String.Substring(Int32, Int32)\n  fullName: String.Substring(Int32, Int32)\n  type: Method\n  assemblies:\n  - System.Runtime\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Retrieves a substring from this instance. The substring starts at a specified character position and has a specified length.\n  remarks: \"You call the <xref:System.String.Substring%28System.Int32%2CSystem.Int32%29> method to extract a substring from a string that begins at a specified character position and ends before the end of the string. The starting character position is a zero-based; in other words, the first character in the string is at index 0, not index 1. To extract a substring that begins at a specified character position and continues to the end of the string, call the <xref:System.String.Substring%28System.Int32%29> method.  \\n  \\n> [!NOTE]\\n>  This method does not modify the value of the current instance. Instead, it returns a new string with `length` characters starting from the `startIndex` position in the current string.  \\n  \\n The `length` parameter represents the total number of characters to extract from the current string instance. This includes the starting character found at index  `startIndex`.  In other words, the <xref:System.String.Substring%2A> method attempts to extract characters from index `startIndex` to index `startIndex` + `length` - 1.  \\n  \\n To extract a substring that begins with a particular character or character sequence, call a method such as  <xref:System.String.IndexOf%2A> or <xref:System.String.LastIndexOf%2A> to get the value of `startIndex`.  \\n  \\n If the substring extends from `startIndex` to a specified character sequence, you can call a method such as  <xref:System.String.IndexOf%2A> or <xref:System.String.LastIndexOf%2A> to get the index of the ending character or character sequence.  You can then convert that value to an index position in the string as follows:  \\n  \\n-   If you've searched for a single character that is to mark the end of the substring, the `length` parameter equals  `endIndex` - `startIndex` + 1, where `endIndex` is the return value of the <xref:System.String.IndexOf%2A> or <xref:System.String.IndexOf%2A> method. The following example extracts a continuous block of \\\"b\\\" characters from a string.  \\n  \\n     [!code-csharp[System.String.Substring#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.String.Substring/cs/Substring2.cs#2)]\\n     [!code-vb[System.String.Substring#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.String.Substring/vb/Substring2.vb#2)]  \\n  \\n-   If you've searched for multiple characters that are to mark the end of the substring, the `length` parameter equals  `endIndex` + `endMatchLength` - `startIndex`, where `endIndex` is the return value of the <xref:System.String.IndexOf%2A> or <xref:System.String.IndexOf%2A> method., and `endMatchLength` is the length of the character sequence that marks the end of the substring. The following example extracts a block of text that contains an XML `<definition>` element.  \\n  \\n     [!code-csharp[System.String.Substring#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.String.Substring/cs/Substring3.cs#3)]\\n     [!code-vb[System.String.Substring#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.String.Substring/vb/Substring3.vb#3)]  \\n  \\n-   If the character or character sequence is not included in the end of the substring, the `length` parameter equals `endIndex` - `startIndex`, where `endIndex` is the return value of the <xref:System.String.IndexOf%2A> or <xref:System.String.IndexOf%2A> method.  \\n  \\n If `startIndex` is equal to zero and  equals the length of the current string, the method returns the original string unchanged.\"\n  example:\n  - \"The following example illustrates a simple call to the <xref:System.String.Substring%28System.Int32%2CSystem.Int32%29> method that extracts two characters from a string starting at the sixth character position (that is, at index five).  \\n  \\n [!code-csharp[System.String.Substring#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.String.Substring/cs/Substring4.cs#4)]\\n [!code-vb[System.String.Substring#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.String.Substring/vb/Substring4.vb#4)]  \\n  \\n The following example uses the <xref:System.String.Substring%28System.Int32%2CSystem.Int32%29> method in the following three cases to isolate substrings within a string. In two cases the substrings are used in comparisons, and in the third case an exception is thrown because invalid parameters are specified.  \\n  \\n-   It extracts the single character and the third position in the string (at index 2) and compares it with a \\\"c\\\". This comparison returns `true`.  \\n  \\n-   It extracts zero characters starting at the fourth position in the string (at index 3) and passes it to the <xref:System.String.IsNullOrEmpty%2A> method. This returns true because the call to the <xref:System.String.Substring%2A> method returns <xref:System.String.Empty?displayProperty=fullName>.  \\n  \\n-   It attempts to extract one character starting at the fourth position in the string. Because there is no character at that position, the method call throws an <xref:System.ArgumentOutOfRangeException> exception.  \\n  \\n [!code-csharp[Classic String.Substring1 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic String.Substring1 Example/CS/source.cs#1)]\\n [!code-vb[Classic String.Substring1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic String.Substring1 Example/VB/source.vb#1)]  \\n  \\n The following example uses the <xref:System.String.Substring%2A> method to separate key/value pairs that are delimited by an equals (\\\"=\\\") character.  \\n  \\n [!code-csharp[System.String.Substring#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.String.Substring/cs/Substring1.cs#1)]\\n [!code-vb[System.String.Substring#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.String.Substring/vb/Substring1.vb#1)]  \\n  \\n The <xref:System.String.IndexOf%2A> method is used to get the position of the equals character in the string.. The call to the <xref:System.String.Substring%28System.Int32%2CSystem.Int32%29> method extracts the key name., which starts from the first character in the string and extends for the number of characters returned by the call to the    <xref:System.String.IndexOf%2A> method. The call to the <xref:System.String.Substring%28System.Int32%29> method then extracts the value assigned to the key. It starts at one character position beyond the equals character and extends to the end of the string.\"\n  syntax:\n    content: public string Substring (int startIndex, int length);\n    parameters:\n    - id: startIndex\n      type: System.Int32\n      description: The zero-based starting character position of a substring in this instance.\n    - id: length\n      type: System.Int32\n      description: The number of characters in the substring.\n    return:\n      type: System.String\n      description: A string that is equivalent to the substring of length <code>length</code> that begins at <code>startIndex</code> in this instance, or <xref href=\"System.String.Empty\"></xref> if <code>startIndex</code> is equal to the length of this instance and <code>length</code> is zero.\n  overload: System.String.Substring*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"<code>startIndex</code> plus <code>length</code> indicates a position not within this instance.  \\n  \\n -or-  \\n  \\n <code>startIndex</code> or <code>length</code> is less than zero.\"\n  attributes: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/String.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.String.ToCharArray(System.Int32,System.Int32)\n  commentId: M:System.String.ToCharArray(System.Int32,System.Int32)\n  id: ToCharArray(System.Int32,System.Int32)\n  parent: System.String\n  langs:\n  - csharp\n  name: ToCharArray(Int32, Int32)\n  nameWithType: String.ToCharArray(Int32, Int32)\n  fullName: String.ToCharArray(Int32, Int32)\n  type: Method\n  assemblies:\n  - System.Runtime\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Copies the characters in a specified substring in this instance to a Unicode character array.\n  remarks: \"This method copies the characters in a portion of a string to a character array. To create a string from a range of characters in a character array, call the  <xref:System.String.%23ctor%28System.Char%5B%5D%2CSystem.Int32%2CSystem.Int32%29> constructor.  \\n  \\n The `startIndex` parameter is zero-based. That is, the index of the first character in the string instance is zero.  \\n  \\n If `length` is zero, the returned array is empty and has a zero length. If this instance is `null` or an empty string (\\\"\\\"), the returned array is empty and has a zero length.  \\n  \\n To create a byte array that contains the encoded characters in a portion of a string, instantiate the appropriate <xref:System.Text.Encoding> object and call its <xref:System.Text.Encoding.GetBytes%28System.String%2CSystem.Int32%2CSystem.Int32%2CSystem.Byte%5B%5D%2CSystem.Int32%29> method. Some of the standard encodings available in the .NET Framework include the following:  \\n  \\n|Encoding|Object|  \\n|--------------|------------|  \\n|ASCII|<xref:System.Text.ASCIIEncoding>|  \\n|UTF-7|<xref:System.Text.UTF7Encoding>|  \\n|UTF-8|<xref:System.Text.UTF8Encoding>|  \\n|UTF-16|<xref:System.Text.UnicodeEncoding>|  \\n|UTF-32|<xref:System.Text.UTF32Encoding>|  \\n  \\n For more information, see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md).\"\n  example:\n  - \"The following example converts a substring within a string to an array of characters, then enumerates and displays the elements of the array.  \\n  \\n [!code-cpp[string.tochararray1#1](~/samples/snippets/cpp/VS_Snippets_CLR/string.ToCharArray1/CPP/tocharry1.cpp#1)]\\n [!code-csharp[string.tochararray1#1](~/samples/snippets/csharp/VS_Snippets_CLR/string.ToCharArray1/CS/tocharry1.cs#1)]\\n [!code-vb[string.tochararray1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/string.ToCharArray1/VB/tocharry1.vb#1)]\"\n  syntax:\n    content: public char[] ToCharArray (int startIndex, int length);\n    parameters:\n    - id: startIndex\n      type: System.Int32\n      description: The starting position of a substring in this instance.\n    - id: length\n      type: System.Int32\n      description: The length of the substring in this instance.\n    return:\n      type: System.Char[]\n      description: A Unicode character array whose elements are the <code>length</code> number of characters in this instance starting from character position <code>startIndex</code>.\n  overload: System.String.ToCharArray*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"<code>startIndex</code> or <code>length</code> is less than zero.  \\n  \\n -or-  \\n  \\n <code>startIndex</code> plus <code>length</code> is greater than the length of this instance.\"\n  attributes: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/String.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.String.ToCharArray\n  commentId: M:System.String.ToCharArray\n  id: ToCharArray\n  parent: System.String\n  langs:\n  - csharp\n  name: ToCharArray()\n  nameWithType: String.ToCharArray()\n  fullName: String.ToCharArray()\n  type: Method\n  assemblies:\n  - System.Runtime\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Copies the characters in this instance to a Unicode character array.\n  remarks: \"This method copies each character (that is, each <xref:System.Char> object) in a string to a character array. The first character copied is at index zero of the returned character array; the last character copied is at index <xref:System.Array.Length%2A?displayProperty=fullName> â 1.  \\n  \\n To create a string from the characters in a character array, call the <xref:System.String.%23ctor%28System.Char%5B%5D%29> constructor.  \\n  \\n To create a byte array that contains the encoded characters in a string, instantiate the appropriate <xref:System.Text.Encoding> object and call its <xref:System.Text.Encoding.GetBytes%28System.String%29?displayProperty=fullName> method. Some of the standard encodings available in the .NET Framework include the following:  \\n  \\n|Encoding|Object|  \\n|--------------|------------|  \\n|ASCII|<xref:System.Text.ASCIIEncoding>|  \\n|UTF-7|<xref:System.Text.UTF7Encoding>|  \\n|UTF-8|<xref:System.Text.UTF8Encoding>|  \\n|UTF-16|<xref:System.Text.UnicodeEncoding>|  \\n|UTF-32|<xref:System.Text.UTF32Encoding>|  \\n  \\n For more information, see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md).\"\n  example:\n  - \"The following example calls the <xref:System.String.ToCharArray%2A> method to extract the characters in a string to a character array. It then displays the original string and the elements in the array.  \\n  \\n [!code-csharp[System.String.ToCharArray#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.tochararray/cs/ToCharArray1.cs#1)]\\n [!code-vb[System.String.ToCharArray#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.string.tochararray/vb/ToCharArray1.vb#1)]  \\n  \\n The following example defines a string containing the characters that serve as delimiters in a delimited string. It then calls the <xref:System.String.ToCharArray%2A> method to create a character array that can be passed to the <xref:System.String.Split%28System.Char%5B%5D%29> method to separate the delimited string into its individual substrings.  \\n  \\n [!code-cpp[StringSplit2#1](~/samples/snippets/cpp/VS_Snippets_CLR/StringSplit2/CPP/stringsplit2.cpp#1)] \\n [!code-csharp[StringSplit2#1](~/samples/snippets/csharp/VS_Snippets_CLR/StringSplit2/CS/stringsplit2.cs#1)] \\n [!code-vb[StringSplit2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/StringSplit2/VB/stringsplit2.vb#1)]\"\n  syntax:\n    content: public char[] ToCharArray ();\n    parameters: []\n    return:\n      type: System.Char[]\n      description: A Unicode character array whose elements are the individual characters of this instance. If this instance is an empty string, the returned array is empty and has a zero length.\n  overload: System.String.ToCharArray*\n  exceptions: []\n  attributes: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/String.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.String.ToLower\n  commentId: M:System.String.ToLower\n  id: ToLower\n  parent: System.String\n  langs:\n  - csharp\n  name: ToLower()\n  nameWithType: String.ToLower()\n  fullName: String.ToLower()\n  type: Method\n  assemblies:\n  - System.Runtime\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Returns a copy of this string converted to lowercase.\n  remarks: \"This method takes into account the casing rules of the current culture.  \\n  \\n> [!NOTE]\\n>  This method does not modify the value of the current instance. Instead, it returns a new string in which all characters in the current instance are converted to lowercase.  \\n  \\n## Security Considerations  \\n The casing operation that results from calling the <xref:System.String.ToLower> method takes the casing conventions of the current culture into account. If you need the lowercase or uppercase version of an operating system identifier, such as a file name, named pipe, or registry key, use the <xref:System.String.ToLowerInvariant%2A> or <xref:System.String.ToUpperInvariant%2A> methods. This produces the same result in every culture (unlike the <xref:System.String.ToLower> method) and performs more efficiently.\"\n  example:\n  - \"The following example converts several mixed case strings to lowercase.  \\n  \\n [!code-cpp[stringlowerupper#1](~/samples/snippets/cpp/VS_Snippets_CLR/stringlowerupper/CPP/stringtolower.cpp#1)]\\n [!code-csharp[stringlowerupper#1](~/samples/snippets/csharp/VS_Snippets_CLR/stringlowerupper/CS/stringtolower.cs#1)]\\n [!code-vb[stringlowerupper#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/stringlowerupper/VB/stringtolower.vb#1)]\"\n  syntax:\n    content: public string ToLower ();\n    parameters: []\n    return:\n      type: System.String\n      description: A string in lowercase.\n  overload: System.String.ToLower*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/String.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.String.ToLower(System.Globalization.CultureInfo)\n  commentId: M:System.String.ToLower(System.Globalization.CultureInfo)\n  id: ToLower(System.Globalization.CultureInfo)\n  parent: System.String\n  langs:\n  - csharp\n  name: ToLower(CultureInfo)\n  nameWithType: String.ToLower(CultureInfo)\n  fullName: String.ToLower(CultureInfo)\n  type: Method\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System\n  summary: Returns a copy of this string converted to lowercase, using the casing rules of the specified culture.\n  remarks: \"The casing rules of the culture specified by the `culture` parameter determine the way the case of the string is changed.  \\n  \\n> [!NOTE]\\n>  This method does not modify the value of the current instance. Instead, it returns a new string in which all characters in the current instance are converted to lowercase.  \\n  \\n## Security Considerations  \\n If you pass the <xref:System.String.ToLower%28System.Globalization.CultureInfo%29> method a <xref:System.Globalization.CultureInfo> object other than <xref:System.Globalization.CultureInfo.InvariantCulture%2A?displayProperty=fullName>, the casing operation will take culture-specific rules into account. If you need the lowercase or uppercase version of an operating system identifier, such as a file name, named pipe, or registry key, use the <xref:System.String.ToLowerInvariant%2A> or <xref:System.String.ToUpperInvariant%2A> method. This produces the same result in every culture and performs more efficiently.\"\n  example:\n  - \"The following example converts two strings of uppercase characters to lowercase characters using the English-United States and Turkish-Turkey cultures, then compares the lowercase strings. The uppercase strings are identical except that for each occurrence of the Unicode LATIN CAPITAL LETTER I in one string, the other string contains LATIN CAPITAL LETTER I WITH DOT ABOVE.  \\n  \\n [!code-cpp[string.tolower1#1](~/samples/snippets/cpp/VS_Snippets_CLR/string.tolower1/CPP/tolower.cpp#1)]\\n [!code-csharp[string.tolower1#1](~/samples/snippets/csharp/VS_Snippets_CLR/string.tolower1/CS/tolower.cs#1)]\\n [!code-vb[string.tolower1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/string.tolower1/VB/tolower.vb#1)]\"\n  syntax:\n    content: public string ToLower (System.Globalization.CultureInfo culture);\n    parameters:\n    - id: culture\n      type: System.Globalization.CultureInfo\n      description: An object that supplies culture-specific casing rules.\n    return:\n      type: System.String\n      description: The lowercase equivalent of the current string.\n  overload: System.String.ToLower*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>culture</code> is `null`.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/String.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.String.ToLowerInvariant\n  commentId: M:System.String.ToLowerInvariant\n  id: ToLowerInvariant\n  parent: System.String\n  langs:\n  - csharp\n  name: ToLowerInvariant()\n  nameWithType: String.ToLowerInvariant()\n  fullName: String.ToLowerInvariant()\n  type: Method\n  assemblies:\n  - System.Runtime\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Returns a copy of this <xref href=\"System.String\"></xref> object converted to lowercase using the casing rules of the invariant culture.\n  remarks: \"The invariant culture represents a culture that is culture-insensitive. It is associated with the English language but not with a specific country or region. For more information, see the <xref:System.Globalization.CultureInfo.InvariantCulture%2A?displayProperty=fullName> property.  \\n  \\n If your application depends on the case of a string changing in a predictable way that is unaffected by the current culture, use the <xref:System.String.ToLowerInvariant%2A> method. The <xref:System.String.ToLowerInvariant%2A> method is equivalent to `ToLower(CultureInfo.InvariantCulture)`. The method is recommended when a collection of strings must appear in a predictable order in a user interface control.  \\n  \\n> [!NOTE]\\n>  This method does not modify the value of the current instance. Instead, it returns a new string in which all characters in the current instance are converted to lowercase.  \\n  \\n## Security Considerations  \\n If you need the lowercase or uppercase version of an operating system identifier, such as a file name, named pipe, or registry key, use the <xref:System.String.ToLowerInvariant%2A> or <xref:System.String.ToUpperInvariant%2A> methods.\"\n  example:\n  - \"The following example defines a string array that contains a single word in a number of languages. The <xref:System.String.ToLowerInvariant%2A> method is used to populate the elements of a parallel array with the case-insensitive version of each word. The <xref:System.Array.Sort%60%602%28%60%600%5B%5D%2C%60%601%5B%5D%2CSystem.Collections.Generic.IComparer%7B%60%600%7D%29?displayProperty=fullName> method is used to sort the case-sensitive array based on the order of elements in the lowercase array to ensure that elements appear in the same order regardless of language.  \\n  \\n [!code-csharp[System.String.ToLowerInvariant#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.tolowerinvariant/cs/tolowerinvariant.cs#1)]\\n [!code-vb[System.String.ToLowerInvariant#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.string.tolowerinvariant/vb/tolowerinvariant.vb#1)]\"\n  syntax:\n    content: public string ToLowerInvariant ();\n    parameters: []\n    return:\n      type: System.String\n      description: The lowercase equivalent of the current string.\n  overload: System.String.ToLowerInvariant*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/String.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.String.ToString\n  commentId: M:System.String.ToString\n  id: ToString\n  parent: System.String\n  langs:\n  - csharp\n  name: ToString()\n  nameWithType: String.ToString()\n  fullName: String.ToString()\n  type: Method\n  assemblies:\n  - System.Runtime\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Returns this instance of <xref href=\"System.String\"></xref>; no actual conversion is performed.\n  remarks: Because this method simply returns the current string unchanged, there is no need to call it directly. It is usually called implicitly in a composite formatting operation, as the example shows.\n  example:\n  - \"The following example demonstrates the <xref:System.String.ToString%2A> method.Note that the example does not explicitly call the <xref:System.String.ToString%2A> method. Instead, the method is called implicitly by the [composite formatting](~/docs/standard/base-types/composite-formatting.md) feature.  \\n  \\n [!code-cpp[string.tostring#1](~/samples/snippets/cpp/VS_Snippets_CLR/string.tostring/CPP/string.tostring.cpp#1)]\\n [!code-csharp[string.tostring#1](~/samples/snippets/csharp/VS_Snippets_CLR/string.tostring/CS/string.tostring.cs#1)]\\n [!code-vb[string.tostring#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/string.tostring/VB/string.tostring.vb#1)]\"\n  syntax:\n    content: public override string ToString ();\n    parameters: []\n    return:\n      type: System.String\n      description: The current string.\n  overload: System.String.ToString*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/String.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.String.ToString(System.IFormatProvider)\n  commentId: M:System.String.ToString(System.IFormatProvider)\n  id: ToString(System.IFormatProvider)\n  parent: System.String\n  langs:\n  - csharp\n  name: ToString(IFormatProvider)\n  nameWithType: String.ToString(IFormatProvider)\n  fullName: String.ToString(IFormatProvider)\n  type: Method\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System\n  summary: Returns this instance of <xref href=\"System.String\"></xref>; no actual conversion is performed.\n  remarks: \"`provider` is reserved, and does not currently participate in this operation.  \\n  \\n Because this method simply returns the current string unchanged, there is no need to call it directly.\"\n  syntax:\n    content: public string ToString (IFormatProvider provider);\n    parameters:\n    - id: provider\n      type: System.IFormatProvider\n      description: (Reserved) An object that supplies culture-specific formatting information.\n    return:\n      type: System.String\n      description: The current string.\n  overload: System.String.ToString*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/String.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.String.ToUpper\n  commentId: M:System.String.ToUpper\n  id: ToUpper\n  parent: System.String\n  langs:\n  - csharp\n  name: ToUpper()\n  nameWithType: String.ToUpper()\n  fullName: String.ToUpper()\n  type: Method\n  assemblies:\n  - System.Runtime\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Returns a copy of this string converted to uppercase.\n  remarks: \"This method uses the casing rules of the current culture to convert each character in the current instance to its uppercase equivalent. If a character does not have an uppercase equivalent, it is included unchanged in the returned string.  \\n  \\n> [!NOTE]\\n>  This method does not modify the value of the current instance. Instead, it returns a new string in which all characters in the current instance are converted to uppercase.  \\n  \\n The <xref:System.String.ToUpper%2A> method is often used to convert a string to uppercase so that it can be used in a case-insensitive comparison. A better method to perform case-insensitive comparison is to call a string comparison method that has a <xref:System.StringComparison> parameter whose value you set to <xref:System.StringComparison?displayProperty=fullName> for a culture-sensitive, case-insensitive comparison.  \\n  \\n## Security Considerations  \\n The casing operation that results from calling the <xref:System.String.ToUpper> method takes the casing conventions of the current culture into account. If you need the lowercase or uppercase version of an operating system identifier, such as a file name, named pipe, or registry key, use the <xref:System.String.ToLowerInvariant%2A> or <xref:System.String.ToUpperInvariant%2A> method. This produces the same result in every culture (unlike the <xref:System.String.ToUpper> method) and performs more efficiently.\"\n  example:\n  - \"The following example calls the <xref:System.String.ToUpper%2A> method to convert a series of one-character strings that contain each character in the Basic Latin, Latin-1 Supplement, and Latin Extended-A character sets. It then displays each string whose uppercase character is different from its lowercase character.  \\n  \\n [!code-cpp[System.String.ToUpper#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.ToUpper/cpp/ToUpperEx.cpp#1)]\\n [!code-csharp[System.String.ToUpper#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.ToUpper/cs/ToUpperEx.cs#1)]\\n [!code-vb[System.String.ToUpper#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.ToUpper/vb/ToUpperEx.vb#1)]\"\n  syntax:\n    content: public string ToUpper ();\n    parameters: []\n    return:\n      type: System.String\n      description: The uppercase equivalent of the current string.\n  overload: System.String.ToUpper*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/String.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.String.ToUpper(System.Globalization.CultureInfo)\n  commentId: M:System.String.ToUpper(System.Globalization.CultureInfo)\n  id: ToUpper(System.Globalization.CultureInfo)\n  parent: System.String\n  langs:\n  - csharp\n  name: ToUpper(CultureInfo)\n  nameWithType: String.ToUpper(CultureInfo)\n  fullName: String.ToUpper(CultureInfo)\n  type: Method\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System\n  summary: Returns a copy of this string converted to uppercase, using the casing rules of the specified culture.\n  remarks: \"The casing rules of the culture specified by the `culture` parameter determine the way the case of a string is changed.  \\n  \\n> [!NOTE]\\n>  This method does not modify the value of the current instance. Instead, it returns a new string in which all characters in the current instance are converted to uppercase.  \\n  \\n## Security Considerations  \\n If you pass the <xref:System.String.ToUpper%28System.Globalization.CultureInfo%29> method a <xref:System.Globalization.CultureInfo> object other than <xref:System.Globalization.CultureInfo.InvariantCulture%2A?displayProperty=fullName>, the casing operation will take culture-specific rules into account. If you need the lowercase or uppercase version of an operating system identifier, such as a file name, named pipe, or registry key, use the <xref:System.String.ToLowerInvariant%2A> or <xref:System.String.ToUpperInvariant%2A> method. This produces the same result in every culture and performs more efficiently.\"\n  example:\n  - \"The following example converts a string of lowercase characters to two strings of uppercase characters using the English-United States and Turkish-Turkey cultures, then compares the uppercase strings. The uppercase strings are identical except that for each occurrence of the Unicode LATIN CAPITAL LETTER I in one string, the other string contains LATIN CAPITAL LETTER I WITH DOT ABOVE.  \\n  \\n [!code-csharp[string.toupper1#1](~/samples/snippets/csharp/VS_Snippets_CLR/string.toupper1/CS/toupper.cs#1)]\\n [!code-vb[string.toupper1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/string.toupper1/VB/toupper.vb#1)]\"\n  syntax:\n    content: public string ToUpper (System.Globalization.CultureInfo culture);\n    parameters:\n    - id: culture\n      type: System.Globalization.CultureInfo\n      description: An object that supplies culture-specific casing rules.\n    return:\n      type: System.String\n      description: The uppercase equivalent of the current string.\n  overload: System.String.ToUpper*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>culture</code> is `null`.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/String.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.String.ToUpperInvariant\n  commentId: M:System.String.ToUpperInvariant\n  id: ToUpperInvariant\n  parent: System.String\n  langs:\n  - csharp\n  name: ToUpperInvariant()\n  nameWithType: String.ToUpperInvariant()\n  fullName: String.ToUpperInvariant()\n  type: Method\n  assemblies:\n  - System.Runtime\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Returns a copy of this <xref href=\"System.String\"></xref> object converted to uppercase using the casing rules of the invariant culture.\n  remarks: \"The invariant culture represents a culture that is culture-insensitive. It is associated with the English language but not with a specific country or region. For more information, see the <xref:System.Globalization.CultureInfo.InvariantCulture%2A?displayProperty=fullName> property.  \\n  \\n If your application depends on the case of a string changing in a predictable way that is unaffected by the current culture, use the <xref:System.String.ToUpperInvariant%2A> method. The <xref:System.String.ToUpperInvariant%2A> method is equivalent to `ToUpper(CultureInfo.InvariantCulture)`. The method is recommended when a collection of strings must appear in a predictable order in a user interface control.  \\n  \\n> [!NOTE]\\n>  This method does not modify the value of the current instance. Instead, it returns a new string in which all characters in the current instance are converted to uppercase.  \\n  \\n## Security Considerations  \\n If you need the lowercase or uppercase version of an operating system identifier, such as a file name, named pipe, or registry key, use the <xref:System.String.ToLowerInvariant%2A> or <xref:System.String.ToUpperInvariant%2A> methods.\"\n  example:\n  - \"The following example defines a string array that contains a single word in a number of languages. The <xref:System.String.ToUpperInvariant%2A> method is used to populate the elements of a parallel array with the case-insensitive version of each word. The <xref:System.Array.Sort%60%602%28%60%600%5B%5D%2C%60%601%5B%5D%2CSystem.Collections.Generic.IComparer%7B%60%600%7D%29?displayProperty=fullName> method is used to sort the case-sensitive array based on the order of elements in the uppercase array to ensure that elements appear in the same order regardless of language.  \\n  \\n [!code-csharp[System.String.ToUpperInvariant#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.toupperinvariant/cs/toupperinvariant.cs#1)]\\n [!code-vb[System.String.ToUpperInvariant#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.string.toupperinvariant/vb/toupperinvariant.vb#1)]\"\n  syntax:\n    content: public string ToUpperInvariant ();\n    parameters: []\n    return:\n      type: System.String\n      description: The uppercase equivalent of the current string.\n  overload: System.String.ToUpperInvariant*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/String.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.String.Trim(System.Char)\n  commentId: M:System.String.Trim(System.Char)\n  id: Trim(System.Char)\n  parent: System.String\n  langs:\n  - csharp\n  name: Trim(Char)\n  nameWithType: String.Trim(Char)\n  fullName: String.Trim(Char)\n  type: Method\n  assemblies:\n  - System.Runtime\n  namespace: System\n  syntax:\n    content: public string Trim (char trimChar);\n    parameters:\n    - id: trimChar\n      type: System.Char\n      description: ''\n    return:\n      type: System.String\n      description: ''\n  overload: System.String.Trim*\n  exceptions: []\n  version:\n  - netcore-2.0\n  monikers:\n  - netcore-2.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/String.xml\n- uid: System.String.Trim(System.Char[])\n  commentId: M:System.String.Trim(System.Char[])\n  id: Trim(System.Char[])\n  parent: System.String\n  langs:\n  - csharp\n  name: Trim(Char[])\n  nameWithType: String.Trim(Char[])\n  fullName: String.Trim(Char[])\n  type: Method\n  assemblies:\n  - System.Runtime\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Removes all leading and trailing occurrences of a set of characters specified in an array from the current <xref href=\"System.String\"></xref> object.\n  remarks: \"The <xref:System.String.Trim%2A> method removes from the current string all leading and trailing characters that are in the `trimChars` parameter. Each leading and trailing trim operation stops when a character that is not in `trimChars` is encountered. For example, if the current string is \\\"123abc456xyz789\\\" and `trimChars` contains the digits from \\\"1\\\" through \\\"9\\\", the <xref:System.String.Trim%2A> method returns \\\"abc456xyz\\\".  \\n  \\n> [!NOTE]\\n>  If the <xref:System.String.Trim%2A> method removes any characters from the current instance, this method does not modify the value of the current instance. Instead, it returns a new string in which all leading and trailing `trimChars` characters found in the current instance are removed.  \\n  \\n If the current string equals <xref:System.String.Empty> or all the characters in the current instance consist of characters in the `trimChars` array, the method returns <xref:System.String.Empty>.  \\n  \\n If `trimChars` is `null` or an empty array, this method removes any leading or trailing characters that result in the method returning `true` when they are passed to the <xref:System.Char.IsWhiteSpace%2A?displayProperty=fullName> method,\"\n  example:\n  - \"The following example uses the <xref:System.String.Trim%28System.Char%5B%5D%29?displayProperty=fullName> method to remove space, asterisk (*), and apostrophe (') characters from a string.  \\n  \\n [!code-cpp[System.String.Trim#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Trim/cpp/trim1.cpp#1)]\\n [!code-csharp[System.String.Trim#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Trim/cs/Trim1.cs#1)]\\n [!code-vb[System.String.Trim#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Trim/vb/Trim1.vb#1)]\"\n  syntax:\n    content: public string Trim (char[] trimChars);\n    parameters:\n    - id: trimChars\n      type: System.Char[]\n      description: An array of Unicode characters to remove, or `null`.\n    return:\n      type: System.String\n      description: The string that remains after all occurrences of the characters in the <code>trimChars</code> parameter are removed from the start and end of the current string. If <code>trimChars</code> is `null` or an empty array, white-space characters are removed instead. If no characters can be trimmed from the current instance, the method returns the current instance unchanged.\n  overload: System.String.Trim*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/String.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.String.Trim\n  commentId: M:System.String.Trim\n  id: Trim\n  parent: System.String\n  langs:\n  - csharp\n  name: Trim()\n  nameWithType: String.Trim()\n  fullName: String.Trim()\n  type: Method\n  assemblies:\n  - System.Runtime\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Removes all leading and trailing white-space characters from the current <xref href=\"System.String\"></xref> object.\n  remarks: \"The <xref:System.String.Trim%2A> method removes from the current string all leading and trailing white-space characters. Each leading and trailing trim operation stops when a non-white-space character is encountered. For example, if the current string is \\\"   abc   xyz   \\\", the <xref:System.String.Trim%2A> method returns \\\"abc   xyz\\\". To remove white-space characters between words in a string, use a [.NET Framework Regular Expressions](~/docs/standard/base-types/regular-expressions.md).  \\n  \\n> [!NOTE]\\n>  If the <xref:System.String.Trim%2A> method removes any characters from the current instance, this method does not modify the value of the current instance. Instead, it returns a new string in which all leading and trailing white space characters found in the current instance are removed.  \\n  \\n If the current string equals <xref:System.String.Empty> or all the characters in the current instance consist of white-space characters, the method returns <xref:System.String.Empty>.  \\n  \\n White-space characters are defined by the Unicode standard. The <xref:System.String.Trim> method removes any leading and trailing characters that produce a return value of `true` when they are passed to the <xref:System.Char.IsWhiteSpace%2A?displayProperty=fullName> method.\"\n  example:\n  - \"The following example uses the <xref:System.String.Trim?displayProperty=fullName> method to remove any extra white space from strings entered by the user before concatenating them.  \\n  \\n [!code-cpp[System.String.Trim#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Trim/cpp/trim2.cpp#2)]\\n [!code-csharp[System.String.Trim#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Trim/cs/Trim2.cs#2)]\\n [!code-vb[System.String.Trim#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Trim/vb/Trim2.vb#2)]\"\n  syntax:\n    content: public string Trim ();\n    parameters: []\n    return:\n      type: System.String\n      description: The string that remains after all white-space characters are removed from the start and end of the current string. If no characters can be trimmed from the current instance, the method returns the current instance unchanged.\n  overload: System.String.Trim*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/String.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.String.TrimEnd\n  commentId: M:System.String.TrimEnd\n  id: TrimEnd\n  parent: System.String\n  langs:\n  - csharp\n  name: TrimEnd()\n  nameWithType: String.TrimEnd()\n  fullName: String.TrimEnd()\n  type: Method\n  assemblies:\n  - System.Runtime\n  namespace: System\n  syntax:\n    content: public string TrimEnd ();\n    parameters: []\n    return:\n      type: System.String\n      description: ''\n  overload: System.String.TrimEnd*\n  exceptions: []\n  version:\n  - netcore-2.0\n  monikers:\n  - netcore-2.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/String.xml\n- uid: System.String.TrimEnd(System.Char)\n  commentId: M:System.String.TrimEnd(System.Char)\n  id: TrimEnd(System.Char)\n  parent: System.String\n  langs:\n  - csharp\n  name: TrimEnd(Char)\n  nameWithType: String.TrimEnd(Char)\n  fullName: String.TrimEnd(Char)\n  type: Method\n  assemblies:\n  - System.Runtime\n  namespace: System\n  syntax:\n    content: public string TrimEnd (char trimChar);\n    parameters:\n    - id: trimChar\n      type: System.Char\n      description: ''\n    return:\n      type: System.String\n      description: ''\n  overload: System.String.TrimEnd*\n  exceptions: []\n  version:\n  - netcore-2.0\n  monikers:\n  - netcore-2.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/String.xml\n- uid: System.String.TrimEnd(System.Char[])\n  commentId: M:System.String.TrimEnd(System.Char[])\n  id: TrimEnd(System.Char[])\n  parent: System.String\n  langs:\n  - csharp\n  name: TrimEnd(Char[])\n  nameWithType: String.TrimEnd(Char[])\n  fullName: String.TrimEnd(Char[])\n  type: Method\n  assemblies:\n  - System.Runtime\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Removes all trailing occurrences of a set of characters specified in an array from the current <xref href=\"System.String\"></xref> object.\n  remarks: \"The <xref:System.String.TrimEnd%2A> method removes from the current string all trailing characters that are in the `trimChars` parameter. The trim operation stops when the first character that is not in `trimChars` is encountered at the end of the string. For example, if the current string is \\\"123abc456xyz789\\\" and `trimChars` contains the digits from \\\"1\\\" through \\\"9\\\", the <xref:System.String.TrimEnd%2A> method returns \\\"123abc456xyz\\\".  \\n  \\n> [!NOTE]\\n>  If the <xref:System.String.TrimEnd%2A> method removes any characters from the current instance, this method does not modify the value of the current instance. Instead, it returns a new string in which all trailing characters found in `trimChars` are removed from the current string.\"\n  example:\n  - \"The following example demonstrates how you can use the <xref:System.String.TrimEnd%28System.Char%5B%5D%29> method to trim white space or punctuation marks from the end of a string.  \\n  \\n [!code-csharp[System.String.TrimEnd#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.TrimEnd/cs/sample2.cs#2)]\\n [!code-vb[System.String.TrimEnd#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.TrimEnd/vb/Sample2.vb#2)]\"\n  syntax:\n    content: public string TrimEnd (char[] trimChars);\n    parameters:\n    - id: trimChars\n      type: System.Char[]\n      description: An array of Unicode characters to remove, or `null`.\n    return:\n      type: System.String\n      description: The string that remains after all occurrences of the characters in the <code>trimChars</code> parameter are removed from the end of the current string. If <code>trimChars</code> is `null` or an empty array, Unicode white-space characters are removed instead. If no characters can be trimmed from the current instance, the method returns the current instance unchanged.\n  overload: System.String.TrimEnd*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/String.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.String.TrimStart\n  commentId: M:System.String.TrimStart\n  id: TrimStart\n  parent: System.String\n  langs:\n  - csharp\n  name: TrimStart()\n  nameWithType: String.TrimStart()\n  fullName: String.TrimStart()\n  type: Method\n  assemblies:\n  - System.Runtime\n  namespace: System\n  syntax:\n    content: public string TrimStart ();\n    parameters: []\n    return:\n      type: System.String\n      description: ''\n  overload: System.String.TrimStart*\n  exceptions: []\n  version:\n  - netcore-2.0\n  monikers:\n  - netcore-2.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/String.xml\n- uid: System.String.TrimStart(System.Char)\n  commentId: M:System.String.TrimStart(System.Char)\n  id: TrimStart(System.Char)\n  parent: System.String\n  langs:\n  - csharp\n  name: TrimStart(Char)\n  nameWithType: String.TrimStart(Char)\n  fullName: String.TrimStart(Char)\n  type: Method\n  assemblies:\n  - System.Runtime\n  namespace: System\n  syntax:\n    content: public string TrimStart (char trimChar);\n    parameters:\n    - id: trimChar\n      type: System.Char\n      description: ''\n    return:\n      type: System.String\n      description: ''\n  overload: System.String.TrimStart*\n  exceptions: []\n  version:\n  - netcore-2.0\n  monikers:\n  - netcore-2.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/String.xml\n- uid: System.String.TrimStart(System.Char[])\n  commentId: M:System.String.TrimStart(System.Char[])\n  id: TrimStart(System.Char[])\n  parent: System.String\n  langs:\n  - csharp\n  name: TrimStart(Char[])\n  nameWithType: String.TrimStart(Char[])\n  fullName: String.TrimStart(Char[])\n  type: Method\n  assemblies:\n  - System.Runtime\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Removes all leading occurrences of a set of characters specified in an array from the current <xref href=\"System.String\"></xref> object.\n  remarks: \"The <xref:System.String.TrimStart%2A> method removes from the current string all leading characters that are in the `trimChars` parameter. The trim operation stops when a character that is not in `trimChars` is encountered. For example, if the current string is \\\"123abc456xyz789\\\" and `trimChars` contains the digits from \\\"1\\\" through \\\"9\\\", the <xref:System.String.TrimStart%2A> method returns \\\"abc456xyz789\\\".  \\n  \\n> [!NOTE]\\n>  If the <xref:System.String.TrimStart%2A> method removes any characters from the current instance, this method does not modify the value of the current instance. Instead, it returns a new string in which all leading white space characters found in the current instance are removed.\"\n  example:\n  - \"The following example uses the <xref:System.String.TrimStart%2A> method to trim white space and comment characters from lines of source code. The `StripComments` method wraps a call to <xref:System.String.TrimStart%2A> and passes it a character array that contains a space and the comment character, which is an apostrophe ( ' ) in Visual Basic and a slash ( / ) in C#. The <xref:System.String.TrimStart%2A> method is also called to remove leading white space when evaluating whether a string is a comment.  \\n  \\n [!code-csharp[System.String.TrimStart#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.TrimStart/cs/sample.cs#1)]\\n [!code-vb[System.String.TrimStart#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.TrimStart/vb/sample.vb#1)]  \\n  \\n The following example then illustrates a call to the `StripComments` method.  \\n  \\n [!code-csharp[System.String.TrimStart#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.TrimStart/cs/sample.cs#2)]\\n [!code-vb[System.String.TrimStart#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.TrimStart/vb/sample.vb#2)]\"\n  syntax:\n    content: public string TrimStart (char[] trimChars);\n    parameters:\n    - id: trimChars\n      type: System.Char[]\n      description: An array of Unicode characters to remove, or `null`.\n    return:\n      type: System.String\n      description: The string that remains after all occurrences of characters in the <code>trimChars</code> parameter are removed from the start of the current string. If <code>trimChars</code> is `null` or an empty array, white-space characters are removed instead.\n  overload: System.String.TrimStart*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/String.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.String.System#Collections#Generic#IEnumerable{System#Char}#GetEnumerator\n  commentId: M:System.String.System#Collections#Generic#IEnumerable<char>#GetEnumerator\n  id: System#Collections#Generic#IEnumerable{System#Char}#GetEnumerator\n  isEii: true\n  parent: System.String\n  langs:\n  - csharp\n  name: IEnumerable<Char>.GetEnumerator()\n  nameWithType: String.IEnumerable<Char>.GetEnumerator()\n  fullName: String.IEnumerable<Char>.GetEnumerator()\n  type: Method\n  assemblies:\n  - System.Runtime\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Returns an enumerator that iterates through the current <xref href=\"System.String\"></xref> object.\n  remarks: This member is an explicit interface member implementation. It can be used only when the <xref:System.String> instance is cast to an <xref:System.Collections.Generic.IEnumerable%601> interface object. For more information, see the <xref:System.Collections.Generic.IEnumerable%601.GetEnumerator%2A> method.\n  syntax:\n    content: System.Collections.Generic.IEnumerator<char> IEnumerable<char>.GetEnumerator ();\n    parameters: []\n    return:\n      type: System.Collections.Generic.IEnumerator{System.Char}\n      description: A strongly-typed enumerator that can be used to iterate through the current <xref href=\"System.String\"></xref> object.\n  overload: System.String.System#Collections#Generic#IEnumerable{System#Char}#GetEnumerator*\n  exceptions: []\n  version:\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/String.xml\n  ms.technology:\n  - dotnet-standard\n- uid: System.String.System#Collections#IEnumerable#GetEnumerator\n  commentId: M:System.String.System#Collections#IEnumerable#GetEnumerator\n  id: System#Collections#IEnumerable#GetEnumerator\n  isEii: true\n  parent: System.String\n  langs:\n  - csharp\n  name: IEnumerable.GetEnumerator()\n  nameWithType: String.IEnumerable.GetEnumerator()\n  fullName: String.IEnumerable.GetEnumerator()\n  type: Method\n  assemblies:\n  - System.Runtime\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Returns an enumerator that iterates through the current <xref href=\"System.String\"></xref> object.\n  remarks: This member is an explicit interface member implementation. It can be used only when the <xref:System.String> instance is cast to an <xref:System.Collections.IEnumerable> interface. For more information, see the <xref:System.Collections.IEnumerable.GetEnumerator%2A?displayProperty=fullName> method.\n  syntax:\n    content: System.Collections.IEnumerator IEnumerable.GetEnumerator ();\n    parameters: []\n    return:\n      type: System.Collections.IEnumerator\n      description: An enumerator that can be used to iterate through the current string.\n  overload: System.String.System#Collections#IEnumerable#GetEnumerator*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/String.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.String.System#IComparable#CompareTo(System.Object)\n  commentId: M:System.String.System#IComparable#CompareTo(System.Object)\n  id: System#IComparable#CompareTo(System.Object)\n  isEii: true\n  parent: System.String\n  langs:\n  - csharp\n  name: IComparable.CompareTo(Object)\n  nameWithType: String.IComparable.CompareTo(Object)\n  fullName: String.IComparable.CompareTo(Object)\n  type: Method\n  assemblies:\n  - System.Runtime\n  namespace: System\n  syntax:\n    content: int IComparable.CompareTo (object value);\n    parameters:\n    - id: value\n      type: System.Object\n      description: ''\n    return:\n      type: System.Int32\n      description: ''\n  overload: System.String.System#IComparable#CompareTo*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/String.xml\n- uid: System.String.System#IConvertible#GetTypeCode\n  commentId: M:System.String.System#IConvertible#GetTypeCode\n  id: System#IConvertible#GetTypeCode\n  isEii: true\n  parent: System.String\n  langs:\n  - csharp\n  name: IConvertible.GetTypeCode()\n  nameWithType: String.IConvertible.GetTypeCode()\n  fullName: String.IConvertible.GetTypeCode()\n  type: Method\n  assemblies:\n  - System.Runtime\n  namespace: System\n  syntax:\n    content: TypeCode IConvertible.GetTypeCode ();\n    parameters: []\n    return:\n      type: System.TypeCode\n      description: ''\n  overload: System.String.System#IConvertible#GetTypeCode*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/String.xml\n- uid: System.String.System#IConvertible#ToBoolean(System.IFormatProvider)\n  commentId: M:System.String.System#IConvertible#ToBoolean(System.IFormatProvider)\n  id: System#IConvertible#ToBoolean(System.IFormatProvider)\n  isEii: true\n  parent: System.String\n  langs:\n  - csharp\n  name: IConvertible.ToBoolean(IFormatProvider)\n  nameWithType: String.IConvertible.ToBoolean(IFormatProvider)\n  fullName: String.IConvertible.ToBoolean(IFormatProvider)\n  type: Method\n  assemblies:\n  - System.Runtime\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: For a description of this member, see <xref href=\"System.IConvertible.ToBoolean(System.IFormatProvider)\"></xref>.\n  remarks: This member is an explicit interface member implementation. It can be used only when the <xref:System.String> instance is cast to an <xref:System.IConvertible> interface. The recommended alternative is to call the <xref:System.Convert.ToBoolean%28System.String%29?displayProperty=fullName> method.\n  syntax:\n    content: bool IConvertible.ToBoolean (IFormatProvider provider);\n    parameters:\n    - id: provider\n      type: System.IFormatProvider\n      description: This parameter is ignored.\n    return:\n      type: System.Boolean\n      description: '`true` if the value of the current string is <xref href=\"System.Boolean.TrueString\"></xref>; `false` if the value of the current string is <xref href=\"System.Boolean.FalseString\"></xref>.'\n  overload: System.String.System#IConvertible#ToBoolean*\n  exceptions:\n  - type: System.FormatException\n    commentId: T:System.FormatException\n    description: The value of the current string is not <xref href=\"System.Boolean.TrueString\"></xref> or <xref href=\"System.Boolean.FalseString\"></xref>.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/String.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.String.System#IConvertible#ToByte(System.IFormatProvider)\n  commentId: M:System.String.System#IConvertible#ToByte(System.IFormatProvider)\n  id: System#IConvertible#ToByte(System.IFormatProvider)\n  isEii: true\n  parent: System.String\n  langs:\n  - csharp\n  name: IConvertible.ToByte(IFormatProvider)\n  nameWithType: String.IConvertible.ToByte(IFormatProvider)\n  fullName: String.IConvertible.ToByte(IFormatProvider)\n  type: Method\n  assemblies:\n  - System.Runtime\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: For a description of this member, see <xref href=\"System.IConvertible.ToByte(System.IFormatProvider)\"></xref>.\n  remarks: This member is an explicit interface member implementation. It can be used only when the <xref:System.String> instance is cast to an <xref:System.IConvertible> interface. The recommended alternative is to call the <xref:System.Convert.ToByte%28System.String%2CSystem.IFormatProvider%29?displayProperty=fullName> method.\n  syntax:\n    content: byte IConvertible.ToByte (IFormatProvider provider);\n    parameters:\n    - id: provider\n      type: System.IFormatProvider\n      description: An object that provides culture-specific formatting information.\n    return:\n      type: System.Byte\n      description: The converted value of the current <xref href=\"System.String\"></xref> object.\n  overload: System.String.System#IConvertible#ToByte*\n  exceptions:\n  - type: System.FormatException\n    commentId: T:System.FormatException\n    description: The value of the current <xref href=\"System.String\"></xref> object cannot be parsed.\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: The value of the current <xref href=\"System.String\"></xref> object is a number greater than <xref href=\"System.Byte.MaxValue\"></xref> or less than <xref href=\"System.Byte.MinValue\"></xref>.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/String.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.String.System#IConvertible#ToChar(System.IFormatProvider)\n  commentId: M:System.String.System#IConvertible#ToChar(System.IFormatProvider)\n  id: System#IConvertible#ToChar(System.IFormatProvider)\n  isEii: true\n  parent: System.String\n  langs:\n  - csharp\n  name: IConvertible.ToChar(IFormatProvider)\n  nameWithType: String.IConvertible.ToChar(IFormatProvider)\n  fullName: String.IConvertible.ToChar(IFormatProvider)\n  type: Method\n  assemblies:\n  - System.Runtime\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: For a description of this member, see <xref href=\"System.IConvertible.ToChar(System.IFormatProvider)\"></xref>.\n  remarks: This member is an explicit interface member implementation. It can be used only when the <xref:System.String> instance is cast to an <xref:System.IConvertible> interface. The recommended alternative is to call the <xref:System.Convert.ToChar%28System.String%2CSystem.IFormatProvider%29?displayProperty=fullName> method.\n  syntax:\n    content: char IConvertible.ToChar (IFormatProvider provider);\n    parameters:\n    - id: provider\n      type: System.IFormatProvider\n      description: An object that provides culture-specific formatting information.\n    return:\n      type: System.Char\n      description: The character at index 0 in the current <xref href=\"System.String\"></xref> object.\n  overload: System.String.System#IConvertible#ToChar*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/String.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.String.System#IConvertible#ToDateTime(System.IFormatProvider)\n  commentId: M:System.String.System#IConvertible#ToDateTime(System.IFormatProvider)\n  id: System#IConvertible#ToDateTime(System.IFormatProvider)\n  isEii: true\n  parent: System.String\n  langs:\n  - csharp\n  name: IConvertible.ToDateTime(IFormatProvider)\n  nameWithType: String.IConvertible.ToDateTime(IFormatProvider)\n  fullName: String.IConvertible.ToDateTime(IFormatProvider)\n  type: Method\n  assemblies:\n  - System.Runtime\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: For a description of this member, see <xref href=\"System.IConvertible.ToDateTime(System.IFormatProvider)\"></xref>.\n  remarks: This member is an explicit interface member implementation. It can be used only when the <xref:System.String> instance is cast to an <xref:System.IConvertible> interface. The recommended alternative is to call the <xref:System.Convert.ToDateTime%28System.String%2CSystem.IFormatProvider%29?displayProperty=fullName> method.\n  syntax:\n    content: DateTime IConvertible.ToDateTime (IFormatProvider provider);\n    parameters:\n    - id: provider\n      type: System.IFormatProvider\n      description: An object that provides culture-specific formatting information.\n    return:\n      type: System.DateTime\n      description: The converted value of the current <xref href=\"System.String\"></xref> object.\n  overload: System.String.System#IConvertible#ToDateTime*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/String.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.String.System#IConvertible#ToDecimal(System.IFormatProvider)\n  commentId: M:System.String.System#IConvertible#ToDecimal(System.IFormatProvider)\n  id: System#IConvertible#ToDecimal(System.IFormatProvider)\n  isEii: true\n  parent: System.String\n  langs:\n  - csharp\n  name: IConvertible.ToDecimal(IFormatProvider)\n  nameWithType: String.IConvertible.ToDecimal(IFormatProvider)\n  fullName: String.IConvertible.ToDecimal(IFormatProvider)\n  type: Method\n  assemblies:\n  - System.Runtime\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: For a description of this member, see <xref href=\"System.IConvertible.ToDecimal(System.IFormatProvider)\"></xref>.\n  remarks: This member is an explicit interface member implementation. It can be used only when the <xref:System.String> instance is cast to an <xref:System.IConvertible> interface. The recommended alternative is to call the <xref:System.Convert.ToDecimal%28System.String%2CSystem.IFormatProvider%29?displayProperty=fullName> method.\n  syntax:\n    content: decimal IConvertible.ToDecimal (IFormatProvider provider);\n    parameters:\n    - id: provider\n      type: System.IFormatProvider\n      description: An object that provides culture-specific formatting information.\n    return:\n      type: System.Decimal\n      description: The converted value of the current <xref href=\"System.String\"></xref> object.\n  overload: System.String.System#IConvertible#ToDecimal*\n  exceptions:\n  - type: System.FormatException\n    commentId: T:System.FormatException\n    description: The value of the current <xref href=\"System.String\"></xref> object cannot be parsed.\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: The value of the current <xref href=\"System.String\"></xref> object is a number less than <xref href=\"System.Decimal.MinValue\"></xref> or than <xref href=\"System.Decimal.MaxValue\"></xref> greater.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/String.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.String.System#IConvertible#ToDouble(System.IFormatProvider)\n  commentId: M:System.String.System#IConvertible#ToDouble(System.IFormatProvider)\n  id: System#IConvertible#ToDouble(System.IFormatProvider)\n  isEii: true\n  parent: System.String\n  langs:\n  - csharp\n  name: IConvertible.ToDouble(IFormatProvider)\n  nameWithType: String.IConvertible.ToDouble(IFormatProvider)\n  fullName: String.IConvertible.ToDouble(IFormatProvider)\n  type: Method\n  assemblies:\n  - System.Runtime\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: For a description of this member, see <xref href=\"System.IConvertible.ToDouble(System.IFormatProvider)\"></xref>.\n  remarks: This member is an explicit interface member implementation. It can be used only when the <xref:System.String> instance is cast to an <xref:System.IConvertible> interface. The recommended alternative is to call the <xref:System.Convert.ToDouble%28System.String%2CSystem.IFormatProvider%29?displayProperty=fullName> method.\n  syntax:\n    content: double IConvertible.ToDouble (IFormatProvider provider);\n    parameters:\n    - id: provider\n      type: System.IFormatProvider\n      description: An object that provides culture-specific formatting information.\n    return:\n      type: System.Double\n      description: The converted value of the current <xref href=\"System.String\"></xref> object.\n  overload: System.String.System#IConvertible#ToDouble*\n  exceptions:\n  - type: System.FormatException\n    commentId: T:System.FormatException\n    description: The value of the current <xref href=\"System.String\"></xref> object cannot be parsed.\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: The value of the current <xref href=\"System.String\"></xref> object is a number less than <xref href=\"System.Double.MinValue\"></xref> or greater than <xref href=\"System.Double.MaxValue\"></xref>.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/String.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.String.System#IConvertible#ToInt16(System.IFormatProvider)\n  commentId: M:System.String.System#IConvertible#ToInt16(System.IFormatProvider)\n  id: System#IConvertible#ToInt16(System.IFormatProvider)\n  isEii: true\n  parent: System.String\n  langs:\n  - csharp\n  name: IConvertible.ToInt16(IFormatProvider)\n  nameWithType: String.IConvertible.ToInt16(IFormatProvider)\n  fullName: String.IConvertible.ToInt16(IFormatProvider)\n  type: Method\n  assemblies:\n  - System.Runtime\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: For a description of this member, see <xref href=\"System.IConvertible.ToInt16(System.IFormatProvider)\"></xref>.\n  remarks: This member is an explicit interface member implementation. It can be used only when the <xref:System.String> instance is cast to an <xref:System.IConvertible> interface. The recommended alternative is to call the <xref:System.Convert.ToInt16%28System.String%2CSystem.IFormatProvider%29?displayProperty=fullName> method.\n  syntax:\n    content: short IConvertible.ToInt16 (IFormatProvider provider);\n    parameters:\n    - id: provider\n      type: System.IFormatProvider\n      description: An object that provides culture-specific formatting information.\n    return:\n      type: System.Int16\n      description: The converted value of the current <xref href=\"System.String\"></xref> object.\n  overload: System.String.System#IConvertible#ToInt16*\n  exceptions:\n  - type: System.FormatException\n    commentId: T:System.FormatException\n    description: The value of the current <xref href=\"System.String\"></xref> object cannot be parsed.\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: The value of the current <xref href=\"System.String\"></xref> object is a number greater than <xref href=\"System.Int16.MaxValue\"></xref> or less than <xref href=\"System.Int16.MinValue\"></xref>.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/String.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.String.System#IConvertible#ToInt32(System.IFormatProvider)\n  commentId: M:System.String.System#IConvertible#ToInt32(System.IFormatProvider)\n  id: System#IConvertible#ToInt32(System.IFormatProvider)\n  isEii: true\n  parent: System.String\n  langs:\n  - csharp\n  name: IConvertible.ToInt32(IFormatProvider)\n  nameWithType: String.IConvertible.ToInt32(IFormatProvider)\n  fullName: String.IConvertible.ToInt32(IFormatProvider)\n  type: Method\n  assemblies:\n  - System.Runtime\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: For a description of this member, see <xref href=\"System.IConvertible.ToInt32(System.IFormatProvider)\"></xref>.\n  remarks: This member is an explicit interface member implementation. It can be used only when the <xref:System.String> instance is cast to an <xref:System.IConvertible> interface. The recommended alternative is to call the <xref:System.Convert.ToInt32%28System.String%2CSystem.IFormatProvider%29?displayProperty=fullName> method.\n  syntax:\n    content: int IConvertible.ToInt32 (IFormatProvider provider);\n    parameters:\n    - id: provider\n      type: System.IFormatProvider\n      description: An object that provides culture-specific formatting information.\n    return:\n      type: System.Int32\n      description: The converted value of the current <xref href=\"System.String\"></xref> object.\n  overload: System.String.System#IConvertible#ToInt32*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/String.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.String.System#IConvertible#ToInt64(System.IFormatProvider)\n  commentId: M:System.String.System#IConvertible#ToInt64(System.IFormatProvider)\n  id: System#IConvertible#ToInt64(System.IFormatProvider)\n  isEii: true\n  parent: System.String\n  langs:\n  - csharp\n  name: IConvertible.ToInt64(IFormatProvider)\n  nameWithType: String.IConvertible.ToInt64(IFormatProvider)\n  fullName: String.IConvertible.ToInt64(IFormatProvider)\n  type: Method\n  assemblies:\n  - System.Runtime\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: For a description of this member, see <xref href=\"System.IConvertible.ToInt64(System.IFormatProvider)\"></xref>.\n  remarks: This member is an explicit interface member implementation. It can be used only when the <xref:System.String> instance is cast to an <xref:System.IConvertible> interface. The recommended alternative is to call the <xref:System.Convert.ToInt64%28System.String%2CSystem.IFormatProvider%29?displayProperty=fullName> method.\n  syntax:\n    content: long IConvertible.ToInt64 (IFormatProvider provider);\n    parameters:\n    - id: provider\n      type: System.IFormatProvider\n      description: An object that provides culture-specific formatting information.\n    return:\n      type: System.Int64\n      description: The converted value of the current <xref href=\"System.String\"></xref> object.\n  overload: System.String.System#IConvertible#ToInt64*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/String.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.String.System#IConvertible#ToSByte(System.IFormatProvider)\n  commentId: M:System.String.System#IConvertible#ToSByte(System.IFormatProvider)\n  id: System#IConvertible#ToSByte(System.IFormatProvider)\n  isEii: true\n  parent: System.String\n  langs:\n  - csharp\n  name: IConvertible.ToSByte(IFormatProvider)\n  nameWithType: String.IConvertible.ToSByte(IFormatProvider)\n  fullName: String.IConvertible.ToSByte(IFormatProvider)\n  type: Method\n  assemblies:\n  - System.Runtime\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: For a description of this member, see <xref href=\"System.IConvertible.ToSByte(System.IFormatProvider)\"></xref>.\n  remarks: This member is an explicit interface member implementation. It can be used only when the <xref:System.String> instance is cast to an <xref:System.IConvertible> interface. The recommended alternative is to call the <xref:System.Convert.ToSByte%28System.String%2CSystem.IFormatProvider%29?displayProperty=fullName> method.\n  syntax:\n    content: sbyte IConvertible.ToSByte (IFormatProvider provider);\n    parameters:\n    - id: provider\n      type: System.IFormatProvider\n      description: An object that provides culture-specific formatting information.\n    return:\n      type: System.SByte\n      description: The converted value of the current <xref href=\"System.String\"></xref> object.\n  overload: System.String.System#IConvertible#ToSByte*\n  exceptions:\n  - type: System.FormatException\n    commentId: T:System.FormatException\n    description: The value of the current <xref href=\"System.String\"></xref> object cannot be parsed.\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: The value of the current <xref href=\"System.String\"></xref> object is a number greater than <xref href=\"System.SByte.MaxValue\"></xref> or less than <xref href=\"System.SByte.MinValue\"></xref>.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/String.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.String.System#IConvertible#ToSingle(System.IFormatProvider)\n  commentId: M:System.String.System#IConvertible#ToSingle(System.IFormatProvider)\n  id: System#IConvertible#ToSingle(System.IFormatProvider)\n  isEii: true\n  parent: System.String\n  langs:\n  - csharp\n  name: IConvertible.ToSingle(IFormatProvider)\n  nameWithType: String.IConvertible.ToSingle(IFormatProvider)\n  fullName: String.IConvertible.ToSingle(IFormatProvider)\n  type: Method\n  assemblies:\n  - System.Runtime\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: For a description of this member, see <xref href=\"System.IConvertible.ToSingle(System.IFormatProvider)\"></xref>.\n  remarks: This member is an explicit interface member implementation. It can be used only when the <xref:System.String> instance is cast to an <xref:System.IConvertible> interface. The recommended alternative is to call the <xref:System.Convert.ToSingle%28System.String%2CSystem.IFormatProvider%29?displayProperty=fullName> method.\n  syntax:\n    content: float IConvertible.ToSingle (IFormatProvider provider);\n    parameters:\n    - id: provider\n      type: System.IFormatProvider\n      description: An object that provides culture-specific formatting information.\n    return:\n      type: System.Single\n      description: The converted value of the current <xref href=\"System.String\"></xref> object.\n  overload: System.String.System#IConvertible#ToSingle*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/String.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.String.System#IConvertible#ToString(System.IFormatProvider)\n  commentId: M:System.String.System#IConvertible#ToString(System.IFormatProvider)\n  id: System#IConvertible#ToString(System.IFormatProvider)\n  isEii: true\n  parent: System.String\n  langs:\n  - csharp\n  name: IConvertible.ToString(IFormatProvider)\n  nameWithType: String.IConvertible.ToString(IFormatProvider)\n  fullName: String.IConvertible.ToString(IFormatProvider)\n  type: Method\n  assemblies:\n  - System.Runtime\n  namespace: System\n  syntax:\n    content: string IConvertible.ToString (IFormatProvider provider);\n    parameters:\n    - id: provider\n      type: System.IFormatProvider\n      description: ''\n    return:\n      type: System.String\n      description: ''\n  overload: System.String.System#IConvertible#ToString*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/String.xml\n- uid: System.String.System#IConvertible#ToType(System.Type,System.IFormatProvider)\n  commentId: M:System.String.System#IConvertible#ToType(System.Type,System.IFormatProvider)\n  id: System#IConvertible#ToType(System.Type,System.IFormatProvider)\n  isEii: true\n  parent: System.String\n  langs:\n  - csharp\n  name: IConvertible.ToType(Type, IFormatProvider)\n  nameWithType: String.IConvertible.ToType(Type, IFormatProvider)\n  fullName: String.IConvertible.ToType(Type, IFormatProvider)\n  type: Method\n  assemblies:\n  - System.Runtime\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: For a description of this member, see <xref href=\"System.IConvertible.ToType(System.Type,System.IFormatProvider)\"></xref>.\n  remarks: This member is an explicit interface member implementation. It can be used only when the <xref:System.String> instance is cast to an <xref:System.IConvertible> interface. The recommended alternative is to call the <xref:System.Convert.ChangeType%2A> method.\n  syntax:\n    content: object IConvertible.ToType (Type type, IFormatProvider provider);\n    parameters:\n    - id: type\n      type: System.Type\n      description: The type of the returned object.\n    - id: provider\n      type: System.IFormatProvider\n      description: An object that provides culture-specific formatting information.\n    return:\n      type: System.Object\n      description: The converted value of the current <xref href=\"System.String\"></xref> object.\n  overload: System.String.System#IConvertible#ToType*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>type</code> is `null`.\n  - type: System.InvalidCastException\n    commentId: T:System.InvalidCastException\n    description: The value of the current <xref href=\"System.String\"></xref> object cannot be converted to the type specified by the <code>type</code> parameter.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/String.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.String.System#IConvertible#ToUInt16(System.IFormatProvider)\n  commentId: M:System.String.System#IConvertible#ToUInt16(System.IFormatProvider)\n  id: System#IConvertible#ToUInt16(System.IFormatProvider)\n  isEii: true\n  parent: System.String\n  langs:\n  - csharp\n  name: IConvertible.ToUInt16(IFormatProvider)\n  nameWithType: String.IConvertible.ToUInt16(IFormatProvider)\n  fullName: String.IConvertible.ToUInt16(IFormatProvider)\n  type: Method\n  assemblies:\n  - System.Runtime\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: For a description of this member, see <xref href=\"System.IConvertible.ToUInt16(System.IFormatProvider)\"></xref>.\n  remarks: This member is an explicit interface member implementation. It can be used only when the <xref:System.String> instance is cast to an <xref:System.IConvertible> interface. The recommended alternative is to call the <xref:System.Convert.ToUInt16%28System.String%2CSystem.IFormatProvider%29?displayProperty=fullName> method.\n  syntax:\n    content: ushort IConvertible.ToUInt16 (IFormatProvider provider);\n    parameters:\n    - id: provider\n      type: System.IFormatProvider\n      description: An object that provides culture-specific formatting information.\n    return:\n      type: System.UInt16\n      description: The converted value of the current <xref href=\"System.String\"></xref> object.\n  overload: System.String.System#IConvertible#ToUInt16*\n  exceptions:\n  - type: System.FormatException\n    commentId: T:System.FormatException\n    description: The value of the current <xref href=\"System.String\"></xref> object cannot be parsed.\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: The value of the current <xref href=\"System.String\"></xref> object is a number greater than <xref href=\"System.UInt16.MaxValue\"></xref> or less than <xref href=\"System.UInt16.MinValue\"></xref>.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/String.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.String.System#IConvertible#ToUInt32(System.IFormatProvider)\n  commentId: M:System.String.System#IConvertible#ToUInt32(System.IFormatProvider)\n  id: System#IConvertible#ToUInt32(System.IFormatProvider)\n  isEii: true\n  parent: System.String\n  langs:\n  - csharp\n  name: IConvertible.ToUInt32(IFormatProvider)\n  nameWithType: String.IConvertible.ToUInt32(IFormatProvider)\n  fullName: String.IConvertible.ToUInt32(IFormatProvider)\n  type: Method\n  assemblies:\n  - System.Runtime\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: For a description of this member, see <xref href=\"System.IConvertible.ToUInt32(System.IFormatProvider)\"></xref>.\n  remarks: This member is an explicit interface member implementation. It can be used only when the <xref:System.String> instance is cast to an <xref:System.IConvertible> interface. The recommended alternative is to call the <xref:System.Convert.ToUInt32%28System.String%2CSystem.IFormatProvider%29?displayProperty=fullName> method.\n  syntax:\n    content: uint IConvertible.ToUInt32 (IFormatProvider provider);\n    parameters:\n    - id: provider\n      type: System.IFormatProvider\n      description: An object that provides culture-specific formatting information.\n    return:\n      type: System.UInt32\n      description: The converted value of the current <xref href=\"System.String\"></xref> object.\n  overload: System.String.System#IConvertible#ToUInt32*\n  exceptions:\n  - type: System.FormatException\n    commentId: T:System.FormatException\n    description: The value of the current <xref href=\"System.String\"></xref> object cannot be parsed.\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: The value of the current <xref href=\"System.String\"></xref> object is a number greater <xref href=\"System.UInt32.MaxValue\"></xref> or less than <xref href=\"System.UInt32.MinValue\"></xref>\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/String.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.String.System#IConvertible#ToUInt64(System.IFormatProvider)\n  commentId: M:System.String.System#IConvertible#ToUInt64(System.IFormatProvider)\n  id: System#IConvertible#ToUInt64(System.IFormatProvider)\n  isEii: true\n  parent: System.String\n  langs:\n  - csharp\n  name: IConvertible.ToUInt64(IFormatProvider)\n  nameWithType: String.IConvertible.ToUInt64(IFormatProvider)\n  fullName: String.IConvertible.ToUInt64(IFormatProvider)\n  type: Method\n  assemblies:\n  - System.Runtime\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: For a description of this member, see <xref href=\"System.IConvertible.ToUInt64(System.IFormatProvider)\"></xref>.\n  remarks: This member is an explicit interface member implementation. It can be used only when the <xref:System.String> instance is cast to an <xref:System.IConvertible> interface. The recommended alternative is to call the <xref:System.Convert.ToUInt64%28System.String%2CSystem.IFormatProvider%29?displayProperty=fullName> method.\n  syntax:\n    content: ulong IConvertible.ToUInt64 (IFormatProvider provider);\n    parameters:\n    - id: provider\n      type: System.IFormatProvider\n      description: An object that provides culture-specific formatting information.\n    return:\n      type: System.UInt64\n      description: The converted value of the current <xref href=\"System.String\"></xref> object.\n  overload: System.String.System#IConvertible#ToUInt64*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/String.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\nreferences:\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.ArgumentOutOfRangeException\n  parent: System\n  isExternal: false\n  name: ArgumentOutOfRangeException\n  nameWithType: ArgumentOutOfRangeException\n  fullName: System.ArgumentOutOfRangeException\n- uid: System.ArgumentException\n  parent: System\n  isExternal: false\n  name: ArgumentException\n  nameWithType: ArgumentException\n  fullName: System.ArgumentException\n- uid: System.ArgumentNullException\n  parent: System\n  isExternal: false\n  name: ArgumentNullException\n  nameWithType: ArgumentNullException\n  fullName: System.ArgumentNullException\n- uid: System.AccessViolationException\n  parent: System\n  isExternal: false\n  name: AccessViolationException\n  nameWithType: AccessViolationException\n  fullName: System.AccessViolationException\n- uid: System.IndexOutOfRangeException\n  parent: System\n  isExternal: false\n  name: IndexOutOfRangeException\n  nameWithType: IndexOutOfRangeException\n  fullName: System.IndexOutOfRangeException\n- uid: System.NotSupportedException\n  parent: System\n  isExternal: false\n  name: NotSupportedException\n  nameWithType: NotSupportedException\n  fullName: System.NotSupportedException\n- uid: System.OutOfMemoryException\n  parent: System\n  isExternal: false\n  name: OutOfMemoryException\n  nameWithType: OutOfMemoryException\n  fullName: System.OutOfMemoryException\n- uid: System.FormatException\n  parent: System\n  isExternal: false\n  name: FormatException\n  nameWithType: FormatException\n  fullName: System.FormatException\n- uid: System.OverflowException\n  parent: System\n  isExternal: false\n  name: OverflowException\n  nameWithType: OverflowException\n  fullName: System.OverflowException\n- uid: System.InvalidCastException\n  parent: System\n  isExternal: false\n  name: InvalidCastException\n  nameWithType: InvalidCastException\n  fullName: System.InvalidCastException\n- uid: System.String.#ctor(System.Char*)\n  parent: System.String\n  isExternal: false\n  name: String(Char*)\n  nameWithType: String.String(Char*)\n  fullName: String.String(Char*)\n- uid: System.Char\n  name: Char\n  nameWithType: Char\n  fullName: System.Char\n- uid: System.Char*\n  parent: System\n  isExternal: false\n  name: Char*\n  nameWithType: Char*\n  fullName: System.Char*\n  spec.csharp:\n  - uid: System.Char\n    name: Char\n    nameWithType: Char\n    fullName: System.Char\n  - name: '*'\n    nameWithType: '*'\n    fullName: '*'\n- uid: System.String.#ctor(System.Char[])\n  parent: System.String\n  isExternal: false\n  name: String(Char[])\n  nameWithType: String.String(Char[])\n  fullName: String.String(Char[])\n- uid: System.Char[]\n  parent: System\n  isExternal: false\n  name: Char[]\n  nameWithType: Char[]\n  fullName: System.Char[]\n  spec.csharp:\n  - uid: System.Char\n    name: Char\n    nameWithType: Char\n    fullName: System.Char\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.String.#ctor(System.SByte*)\n  parent: System.String\n  isExternal: false\n  name: String(SByte*)\n  nameWithType: String.String(SByte*)\n  fullName: String.String(SByte*)\n- uid: System.SByte\n  name: SByte\n  nameWithType: SByte\n  fullName: System.SByte\n- uid: System.SByte*\n  parent: System\n  isExternal: false\n  name: SByte*\n  nameWithType: SByte*\n  fullName: System.SByte*\n  spec.csharp:\n  - uid: System.SByte\n    name: SByte\n    nameWithType: SByte\n    fullName: System.SByte\n  - name: '*'\n    nameWithType: '*'\n    fullName: '*'\n- uid: System.String.#ctor(System.Char,System.Int32)\n  parent: System.String\n  isExternal: false\n  name: String(Char, Int32)\n  nameWithType: String.String(Char, Int32)\n  fullName: String.String(Char, Int32)\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.String.#ctor(System.Char*,System.Int32,System.Int32)\n  parent: System.String\n  isExternal: false\n  name: String(Char*, Int32, Int32)\n  nameWithType: String.String(Char*, Int32, Int32)\n  fullName: String.String(Char*, Int32, Int32)\n- uid: System.String.#ctor(System.Char[],System.Int32,System.Int32)\n  parent: System.String\n  isExternal: false\n  name: String(Char[], Int32, Int32)\n  nameWithType: String.String(Char[], Int32, Int32)\n  fullName: String.String(Char[], Int32, Int32)\n- uid: System.String.#ctor(System.SByte*,System.Int32,System.Int32)\n  parent: System.String\n  isExternal: false\n  name: String(SByte*, Int32, Int32)\n  nameWithType: String.String(SByte*, Int32, Int32)\n  fullName: String.String(SByte*, Int32, Int32)\n- uid: System.String.#ctor(System.SByte*,System.Int32,System.Int32,System.Text.Encoding)\n  parent: System.String\n  isExternal: false\n  name: String(SByte*, Int32, Int32, Encoding)\n  nameWithType: String.String(SByte*, Int32, Int32, Encoding)\n  fullName: String.String(SByte*, Int32, Int32, Encoding)\n- uid: System.Text.Encoding\n  parent: System.Text\n  isExternal: false\n  name: Encoding\n  nameWithType: Encoding\n  fullName: System.Text.Encoding\n- uid: System.String.Chars(System.Int32)\n  parent: System.String\n  isExternal: false\n  name: Chars(Int32)\n  nameWithType: String.Chars(Int32)\n  fullName: String.Chars(Int32)\n- uid: System.String.Clone\n  parent: System.String\n  isExternal: false\n  name: Clone()\n  nameWithType: String.Clone()\n  fullName: String.Clone()\n- uid: System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.Boolean,System.Globalization.CultureInfo)\n  parent: System.String\n  isExternal: false\n  name: Compare(String, Int32, String, Int32, Int32, Boolean, CultureInfo)\n  nameWithType: String.Compare(String, Int32, String, Int32, Int32, Boolean, CultureInfo)\n  fullName: String.Compare(String, Int32, String, Int32, Int32, Boolean, CultureInfo)\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Globalization.CultureInfo\n  parent: System.Globalization\n  isExternal: false\n  name: CultureInfo\n  nameWithType: CultureInfo\n  fullName: System.Globalization.CultureInfo\n- uid: System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.StringComparison)\n  parent: System.String\n  isExternal: false\n  name: Compare(String, Int32, String, Int32, Int32, StringComparison)\n  nameWithType: String.Compare(String, Int32, String, Int32, Int32, StringComparison)\n  fullName: String.Compare(String, Int32, String, Int32, Int32, StringComparison)\n- uid: System.StringComparison\n  parent: System\n  isExternal: false\n  name: StringComparison\n  nameWithType: StringComparison\n  fullName: System.StringComparison\n- uid: System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.Boolean)\n  parent: System.String\n  isExternal: false\n  name: Compare(String, Int32, String, Int32, Int32, Boolean)\n  nameWithType: String.Compare(String, Int32, String, Int32, Int32, Boolean)\n  fullName: String.Compare(String, Int32, String, Int32, Int32, Boolean)\n- uid: System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32)\n  parent: System.String\n  isExternal: false\n  name: Compare(String, Int32, String, Int32, Int32)\n  nameWithType: String.Compare(String, Int32, String, Int32, Int32)\n  fullName: String.Compare(String, Int32, String, Int32, Int32)\n- uid: System.String.Compare(System.String,System.String)\n  parent: System.String\n  isExternal: false\n  name: Compare(String, String)\n  nameWithType: String.Compare(String, String)\n  fullName: String.Compare(String, String)\n- uid: System.String.Compare(System.String,System.String,System.Boolean,System.Globalization.CultureInfo)\n  parent: System.String\n  isExternal: false\n  name: Compare(String, String, Boolean, CultureInfo)\n  nameWithType: String.Compare(String, String, Boolean, CultureInfo)\n  fullName: String.Compare(String, String, Boolean, CultureInfo)\n- uid: System.String.Compare(System.String,System.String,System.StringComparison)\n  parent: System.String\n  isExternal: false\n  name: Compare(String, String, StringComparison)\n  nameWithType: String.Compare(String, String, StringComparison)\n  fullName: String.Compare(String, String, StringComparison)\n- uid: System.String.Compare(System.String,System.String,System.Boolean)\n  parent: System.String\n  isExternal: false\n  name: Compare(String, String, Boolean)\n  nameWithType: String.Compare(String, String, Boolean)\n  fullName: String.Compare(String, String, Boolean)\n- uid: System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.Globalization.CultureInfo,System.Globalization.CompareOptions)\n  parent: System.String\n  isExternal: false\n  name: Compare(String, Int32, String, Int32, Int32, CultureInfo, CompareOptions)\n  nameWithType: String.Compare(String, Int32, String, Int32, Int32, CultureInfo, CompareOptions)\n  fullName: String.Compare(String, Int32, String, Int32, Int32, CultureInfo, CompareOptions)\n- uid: System.Globalization.CompareOptions\n  parent: System.Globalization\n  isExternal: false\n  name: CompareOptions\n  nameWithType: CompareOptions\n  fullName: System.Globalization.CompareOptions\n- uid: System.String.Compare(System.String,System.String,System.Globalization.CultureInfo,System.Globalization.CompareOptions)\n  parent: System.String\n  isExternal: false\n  name: Compare(String, String, CultureInfo, CompareOptions)\n  nameWithType: String.Compare(String, String, CultureInfo, CompareOptions)\n  fullName: String.Compare(String, String, CultureInfo, CompareOptions)\n- uid: System.String.CompareOrdinal(System.String,System.Int32,System.String,System.Int32,System.Int32)\n  parent: System.String\n  isExternal: false\n  name: CompareOrdinal(String, Int32, String, Int32, Int32)\n  nameWithType: String.CompareOrdinal(String, Int32, String, Int32, Int32)\n  fullName: String.CompareOrdinal(String, Int32, String, Int32, Int32)\n- uid: System.String.CompareOrdinal(System.String,System.String)\n  parent: System.String\n  isExternal: false\n  name: CompareOrdinal(String, String)\n  nameWithType: String.CompareOrdinal(String, String)\n  fullName: String.CompareOrdinal(String, String)\n- uid: System.String.CompareTo(System.Object)\n  parent: System.String\n  isExternal: false\n  name: CompareTo(Object)\n  nameWithType: String.CompareTo(Object)\n  fullName: String.CompareTo(Object)\n- uid: System.String.CompareTo(System.String)\n  parent: System.String\n  isExternal: false\n  name: CompareTo(String)\n  nameWithType: String.CompareTo(String)\n  fullName: String.CompareTo(String)\n- uid: System.String.Concat(System.String,System.String,System.String,System.String)\n  parent: System.String\n  isExternal: false\n  name: Concat(String, String, String, String)\n  nameWithType: String.Concat(String, String, String, String)\n  fullName: String.Concat(String, String, String, String)\n- uid: System.String.Concat(System.Object,System.Object,System.Object,System.Object)\n  parent: System.String\n  isExternal: false\n  name: Concat(Object, Object, Object, Object)\n  nameWithType: String.Concat(Object, Object, Object, Object)\n  fullName: String.Concat(Object, Object, Object, Object)\n- uid: System.String.Concat(System.Object,System.Object,System.Object)\n  parent: System.String\n  isExternal: false\n  name: Concat(Object, Object, Object)\n  nameWithType: String.Concat(Object, Object, Object)\n  fullName: String.Concat(Object, Object, Object)\n- uid: System.String.Concat(System.String,System.String)\n  parent: System.String\n  isExternal: false\n  name: Concat(String, String)\n  nameWithType: String.Concat(String, String)\n  fullName: String.Concat(String, String)\n- uid: System.String.Concat(System.String,System.String,System.String)\n  parent: System.String\n  isExternal: false\n  name: Concat(String, String, String)\n  nameWithType: String.Concat(String, String, String)\n  fullName: String.Concat(String, String, String)\n- uid: System.String.Concat(System.String[])\n  parent: System.String\n  isExternal: false\n  name: Concat(String[])\n  nameWithType: String.Concat(String[])\n  fullName: String.Concat(String[])\n- uid: System.String[]\n  parent: System\n  isExternal: false\n  name: String[]\n  nameWithType: String[]\n  fullName: System.String[]\n  spec.csharp:\n  - uid: System.String\n    name: String\n    nameWithType: String\n    fullName: System.String\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.String.Concat(System.Object[])\n  parent: System.String\n  isExternal: false\n  name: Concat(Object[])\n  nameWithType: String.Concat(Object[])\n  fullName: String.Concat(Object[])\n- uid: System.Object[]\n  parent: System\n  isExternal: false\n  name: Object[]\n  nameWithType: Object[]\n  fullName: System.Object[]\n  spec.csharp:\n  - uid: System.Object\n    name: Object\n    nameWithType: Object\n    fullName: System.Object\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.String.Concat(System.Object)\n  parent: System.String\n  isExternal: false\n  name: Concat(Object)\n  nameWithType: String.Concat(Object)\n  fullName: String.Concat(Object)\n- uid: System.String.Concat(System.Collections.Generic.IEnumerable{System.String})\n  parent: System.String\n  isExternal: false\n  name: Concat(IEnumerable<String>)\n  nameWithType: String.Concat(IEnumerable<String>)\n  fullName: String.Concat(IEnumerable<String>)\n- uid: System.Collections.Generic.IEnumerable`1\n  name: IEnumerable<T>\n  nameWithType: IEnumerable<T>\n  fullName: System.Collections.Generic.IEnumerable<T>\n- uid: System.Collections.Generic.IEnumerable{System.String}\n  parent: System.Collections.Generic\n  isExternal: false\n  name: IEnumerable<String>\n  nameWithType: IEnumerable<String>\n  fullName: System.Collections.Generic.IEnumerable<System.String>\n  spec.csharp:\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    nameWithType: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.String\n    name: String\n    nameWithType: String\n    fullName: System.String\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.String.Concat(System.Object,System.Object)\n  parent: System.String\n  isExternal: false\n  name: Concat(Object, Object)\n  nameWithType: String.Concat(Object, Object)\n  fullName: String.Concat(Object, Object)\n- uid: System.String.Concat``1(System.Collections.Generic.IEnumerable{``0})\n  parent: System.String\n  isExternal: false\n  name: Concat<T>(IEnumerable<T>)\n  nameWithType: String.Concat<T>(IEnumerable<T>)\n  fullName: String.Concat<T>(IEnumerable<T>)\n- uid: System.String.Contains(System.String)\n  parent: System.String\n  isExternal: false\n  name: Contains(String)\n  nameWithType: String.Contains(String)\n  fullName: String.Contains(String)\n- uid: System.String.Copy(System.String)\n  parent: System.String\n  isExternal: false\n  name: Copy(String)\n  nameWithType: String.Copy(String)\n  fullName: String.Copy(String)\n- uid: System.String.CopyTo(System.Int32,System.Char[],System.Int32,System.Int32)\n  parent: System.String\n  isExternal: false\n  name: CopyTo(Int32, Char[], Int32, Int32)\n  nameWithType: String.CopyTo(Int32, Char[], Int32, Int32)\n  fullName: String.CopyTo(Int32, Char[], Int32, Int32)\n- uid: System.String.Empty\n  parent: System.String\n  isExternal: false\n  name: Empty\n  nameWithType: String.Empty\n  fullName: String.Empty\n- uid: System.String.EndsWith(System.String,System.Boolean,System.Globalization.CultureInfo)\n  parent: System.String\n  isExternal: false\n  name: EndsWith(String, Boolean, CultureInfo)\n  nameWithType: String.EndsWith(String, Boolean, CultureInfo)\n  fullName: String.EndsWith(String, Boolean, CultureInfo)\n- uid: System.String.EndsWith(System.String,System.StringComparison)\n  parent: System.String\n  isExternal: false\n  name: EndsWith(String, StringComparison)\n  nameWithType: String.EndsWith(String, StringComparison)\n  fullName: String.EndsWith(String, StringComparison)\n- uid: System.String.EndsWith(System.String)\n  parent: System.String\n  isExternal: false\n  name: EndsWith(String)\n  nameWithType: String.EndsWith(String)\n  fullName: String.EndsWith(String)\n- uid: System.String.EndsWith(System.Char)\n  parent: System.String\n  isExternal: false\n  name: EndsWith(Char)\n  nameWithType: String.EndsWith(Char)\n  fullName: String.EndsWith(Char)\n- uid: System.String.Equals(System.Object)\n  parent: System.String\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: String.Equals(Object)\n  fullName: String.Equals(Object)\n- uid: System.String.Equals(System.String)\n  parent: System.String\n  isExternal: false\n  name: Equals(String)\n  nameWithType: String.Equals(String)\n  fullName: String.Equals(String)\n- uid: System.String.Equals(System.String,System.String)\n  parent: System.String\n  isExternal: false\n  name: Equals(String, String)\n  nameWithType: String.Equals(String, String)\n  fullName: String.Equals(String, String)\n- uid: System.String.Equals(System.String,System.StringComparison)\n  parent: System.String\n  isExternal: false\n  name: Equals(String, StringComparison)\n  nameWithType: String.Equals(String, StringComparison)\n  fullName: String.Equals(String, StringComparison)\n- uid: System.String.Equals(System.String,System.String,System.StringComparison)\n  parent: System.String\n  isExternal: false\n  name: Equals(String, String, StringComparison)\n  nameWithType: String.Equals(String, String, StringComparison)\n  fullName: String.Equals(String, String, StringComparison)\n- uid: System.String.Format(System.IFormatProvider,System.String,System.Object,System.Object,System.Object)\n  parent: System.String\n  isExternal: false\n  name: Format(IFormatProvider, String, Object, Object, Object)\n  nameWithType: String.Format(IFormatProvider, String, Object, Object, Object)\n  fullName: String.Format(IFormatProvider, String, Object, Object, Object)\n- uid: System.IFormatProvider\n  parent: System\n  isExternal: false\n  name: IFormatProvider\n  nameWithType: IFormatProvider\n  fullName: System.IFormatProvider\n- uid: System.String.Format(System.String,System.Object,System.Object,System.Object)\n  parent: System.String\n  isExternal: false\n  name: Format(String, Object, Object, Object)\n  nameWithType: String.Format(String, Object, Object, Object)\n  fullName: String.Format(String, Object, Object, Object)\n- uid: System.String.Format(System.IFormatProvider,System.String,System.Object,System.Object)\n  parent: System.String\n  isExternal: false\n  name: Format(IFormatProvider, String, Object, Object)\n  nameWithType: String.Format(IFormatProvider, String, Object, Object)\n  fullName: String.Format(IFormatProvider, String, Object, Object)\n- uid: System.String.Format(System.String,System.Object,System.Object)\n  parent: System.String\n  isExternal: false\n  name: Format(String, Object, Object)\n  nameWithType: String.Format(String, Object, Object)\n  fullName: String.Format(String, Object, Object)\n- uid: System.String.Format(System.IFormatProvider,System.String,System.Object)\n  parent: System.String\n  isExternal: false\n  name: Format(IFormatProvider, String, Object)\n  nameWithType: String.Format(IFormatProvider, String, Object)\n  fullName: String.Format(IFormatProvider, String, Object)\n- uid: System.String.Format(System.String,System.Object[])\n  parent: System.String\n  isExternal: false\n  name: Format(String, Object[])\n  nameWithType: String.Format(String, Object[])\n  fullName: String.Format(String, Object[])\n- uid: System.String.Format(System.String,System.Object)\n  parent: System.String\n  isExternal: false\n  name: Format(String, Object)\n  nameWithType: String.Format(String, Object)\n  fullName: String.Format(String, Object)\n- uid: System.String.Format(System.IFormatProvider,System.String,System.Object[])\n  parent: System.String\n  isExternal: false\n  name: Format(IFormatProvider, String, Object[])\n  nameWithType: String.Format(IFormatProvider, String, Object[])\n  fullName: String.Format(IFormatProvider, String, Object[])\n- uid: System.String.GetEnumerator\n  parent: System.String\n  isExternal: false\n  name: GetEnumerator()\n  nameWithType: String.GetEnumerator()\n  fullName: String.GetEnumerator()\n- uid: System.CharEnumerator\n  parent: System\n  isExternal: false\n  name: CharEnumerator\n  nameWithType: CharEnumerator\n  fullName: System.CharEnumerator\n- uid: System.String.GetHashCode\n  parent: System.String\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: String.GetHashCode()\n  fullName: String.GetHashCode()\n- uid: System.String.GetHashCode(System.StringComparison)\n  parent: System.String\n  isExternal: false\n  name: GetHashCode(StringComparison)\n  nameWithType: String.GetHashCode(StringComparison)\n  fullName: String.GetHashCode(StringComparison)\n- uid: System.String.GetTypeCode\n  parent: System.String\n  isExternal: false\n  name: GetTypeCode()\n  nameWithType: String.GetTypeCode()\n  fullName: String.GetTypeCode()\n- uid: System.TypeCode\n  parent: System\n  isExternal: false\n  name: TypeCode\n  nameWithType: TypeCode\n  fullName: System.TypeCode\n- uid: System.String.IndexOf(System.String,System.Int32,System.Int32)\n  parent: System.String\n  isExternal: false\n  name: IndexOf(String, Int32, Int32)\n  nameWithType: String.IndexOf(String, Int32, Int32)\n  fullName: String.IndexOf(String, Int32, Int32)\n- uid: System.String.IndexOf(System.String,System.Int32,System.Int32,System.StringComparison)\n  parent: System.String\n  isExternal: false\n  name: IndexOf(String, Int32, Int32, StringComparison)\n  nameWithType: String.IndexOf(String, Int32, Int32, StringComparison)\n  fullName: String.IndexOf(String, Int32, Int32, StringComparison)\n- uid: System.String.IndexOf(System.String,System.Int32,System.StringComparison)\n  parent: System.String\n  isExternal: false\n  name: IndexOf(String, Int32, StringComparison)\n  nameWithType: String.IndexOf(String, Int32, StringComparison)\n  fullName: String.IndexOf(String, Int32, StringComparison)\n- uid: System.String.IndexOf(System.Char,System.Int32,System.Int32)\n  parent: System.String\n  isExternal: false\n  name: IndexOf(Char, Int32, Int32)\n  nameWithType: String.IndexOf(Char, Int32, Int32)\n  fullName: String.IndexOf(Char, Int32, Int32)\n- uid: System.String.IndexOf(System.String)\n  parent: System.String\n  isExternal: false\n  name: IndexOf(String)\n  nameWithType: String.IndexOf(String)\n  fullName: String.IndexOf(String)\n- uid: System.String.IndexOf(System.String,System.Int32)\n  parent: System.String\n  isExternal: false\n  name: IndexOf(String, Int32)\n  nameWithType: String.IndexOf(String, Int32)\n  fullName: String.IndexOf(String, Int32)\n- uid: System.String.IndexOf(System.Char,System.Int32)\n  parent: System.String\n  isExternal: false\n  name: IndexOf(Char, Int32)\n  nameWithType: String.IndexOf(Char, Int32)\n  fullName: String.IndexOf(Char, Int32)\n- uid: System.String.IndexOf(System.String,System.StringComparison)\n  parent: System.String\n  isExternal: false\n  name: IndexOf(String, StringComparison)\n  nameWithType: String.IndexOf(String, StringComparison)\n  fullName: String.IndexOf(String, StringComparison)\n- uid: System.String.IndexOf(System.Char)\n  parent: System.String\n  isExternal: false\n  name: IndexOf(Char)\n  nameWithType: String.IndexOf(Char)\n  fullName: String.IndexOf(Char)\n- uid: System.String.IndexOfAny(System.Char[])\n  parent: System.String\n  isExternal: false\n  name: IndexOfAny(Char[])\n  nameWithType: String.IndexOfAny(Char[])\n  fullName: String.IndexOfAny(Char[])\n- uid: System.String.IndexOfAny(System.Char[],System.Int32)\n  parent: System.String\n  isExternal: false\n  name: IndexOfAny(Char[], Int32)\n  nameWithType: String.IndexOfAny(Char[], Int32)\n  fullName: String.IndexOfAny(Char[], Int32)\n- uid: System.String.IndexOfAny(System.Char[],System.Int32,System.Int32)\n  parent: System.String\n  isExternal: false\n  name: IndexOfAny(Char[], Int32, Int32)\n  nameWithType: String.IndexOfAny(Char[], Int32, Int32)\n  fullName: String.IndexOfAny(Char[], Int32, Int32)\n- uid: System.String.Insert(System.Int32,System.String)\n  parent: System.String\n  isExternal: false\n  name: Insert(Int32, String)\n  nameWithType: String.Insert(Int32, String)\n  fullName: String.Insert(Int32, String)\n- uid: System.String.Intern(System.String)\n  parent: System.String\n  isExternal: false\n  name: Intern(String)\n  nameWithType: String.Intern(String)\n  fullName: String.Intern(String)\n- uid: System.String.IsInterned(System.String)\n  parent: System.String\n  isExternal: false\n  name: IsInterned(String)\n  nameWithType: String.IsInterned(String)\n  fullName: String.IsInterned(String)\n- uid: System.String.IsNormalized\n  parent: System.String\n  isExternal: false\n  name: IsNormalized()\n  nameWithType: String.IsNormalized()\n  fullName: String.IsNormalized()\n- uid: System.String.IsNormalized(System.Text.NormalizationForm)\n  parent: System.String\n  isExternal: false\n  name: IsNormalized(NormalizationForm)\n  nameWithType: String.IsNormalized(NormalizationForm)\n  fullName: String.IsNormalized(NormalizationForm)\n- uid: System.Text.NormalizationForm\n  parent: System.Text\n  isExternal: false\n  name: NormalizationForm\n  nameWithType: NormalizationForm\n  fullName: System.Text.NormalizationForm\n- uid: System.String.IsNullOrEmpty(System.String)\n  parent: System.String\n  isExternal: false\n  name: IsNullOrEmpty(String)\n  nameWithType: String.IsNullOrEmpty(String)\n  fullName: String.IsNullOrEmpty(String)\n- uid: System.String.IsNullOrWhiteSpace(System.String)\n  parent: System.String\n  isExternal: false\n  name: IsNullOrWhiteSpace(String)\n  nameWithType: String.IsNullOrWhiteSpace(String)\n  fullName: String.IsNullOrWhiteSpace(String)\n- uid: System.String.Join(System.String,System.String[],System.Int32,System.Int32)\n  parent: System.String\n  isExternal: false\n  name: Join(String, String[], Int32, Int32)\n  nameWithType: String.Join(String, String[], Int32, Int32)\n  fullName: String.Join(String, String[], Int32, Int32)\n- uid: System.String.Join(System.String,System.String[])\n  parent: System.String\n  isExternal: false\n  name: Join(String, String[])\n  nameWithType: String.Join(String, String[])\n  fullName: String.Join(String, String[])\n- uid: System.String.Join(System.String,System.Object[])\n  parent: System.String\n  isExternal: false\n  name: Join(String, Object[])\n  nameWithType: String.Join(String, Object[])\n  fullName: String.Join(String, Object[])\n- uid: System.String.Join(System.Char,System.String[],System.Int32,System.Int32)\n  parent: System.String\n  isExternal: false\n  name: Join(Char, String[], Int32, Int32)\n  nameWithType: String.Join(Char, String[], Int32, Int32)\n  fullName: String.Join(Char, String[], Int32, Int32)\n- uid: System.String.Join(System.Char,System.String[])\n  parent: System.String\n  isExternal: false\n  name: Join(Char, String[])\n  nameWithType: String.Join(Char, String[])\n  fullName: String.Join(Char, String[])\n- uid: System.String.Join(System.Char,System.Object[])\n  parent: System.String\n  isExternal: false\n  name: Join(Char, Object[])\n  nameWithType: String.Join(Char, Object[])\n  fullName: String.Join(Char, Object[])\n- uid: System.String.Join(System.String,System.Collections.Generic.IEnumerable{System.String})\n  parent: System.String\n  isExternal: false\n  name: Join(String, IEnumerable<String>)\n  nameWithType: String.Join(String, IEnumerable<String>)\n  fullName: String.Join(String, IEnumerable<String>)\n- uid: System.String.Join``1(System.Char,System.Collections.Generic.IEnumerable{``0})\n  parent: System.String\n  isExternal: false\n  name: Join<T>(Char, IEnumerable<T>)\n  nameWithType: String.Join<T>(Char, IEnumerable<T>)\n  fullName: String.Join<T>(Char, IEnumerable<T>)\n- uid: System.String.Join``1(System.String,System.Collections.Generic.IEnumerable{``0})\n  parent: System.String\n  isExternal: false\n  name: Join<T>(String, IEnumerable<T>)\n  nameWithType: String.Join<T>(String, IEnumerable<T>)\n  fullName: String.Join<T>(String, IEnumerable<T>)\n- uid: System.String.LastIndexOf(System.String,System.Int32,System.Int32,System.StringComparison)\n  parent: System.String\n  isExternal: false\n  name: LastIndexOf(String, Int32, Int32, StringComparison)\n  nameWithType: String.LastIndexOf(String, Int32, Int32, StringComparison)\n  fullName: String.LastIndexOf(String, Int32, Int32, StringComparison)\n- uid: System.String.LastIndexOf(System.String,System.Int32,System.StringComparison)\n  parent: System.String\n  isExternal: false\n  name: LastIndexOf(String, Int32, StringComparison)\n  nameWithType: String.LastIndexOf(String, Int32, StringComparison)\n  fullName: String.LastIndexOf(String, Int32, StringComparison)\n- uid: System.String.LastIndexOf(System.Char,System.Int32,System.Int32)\n  parent: System.String\n  isExternal: false\n  name: LastIndexOf(Char, Int32, Int32)\n  nameWithType: String.LastIndexOf(Char, Int32, Int32)\n  fullName: String.LastIndexOf(Char, Int32, Int32)\n- uid: System.String.LastIndexOf(System.String,System.StringComparison)\n  parent: System.String\n  isExternal: false\n  name: LastIndexOf(String, StringComparison)\n  nameWithType: String.LastIndexOf(String, StringComparison)\n  fullName: String.LastIndexOf(String, StringComparison)\n- uid: System.String.LastIndexOf(System.String,System.Int32,System.Int32)\n  parent: System.String\n  isExternal: false\n  name: LastIndexOf(String, Int32, Int32)\n  nameWithType: String.LastIndexOf(String, Int32, Int32)\n  fullName: String.LastIndexOf(String, Int32, Int32)\n- uid: System.String.LastIndexOf(System.Char,System.Int32)\n  parent: System.String\n  isExternal: false\n  name: LastIndexOf(Char, Int32)\n  nameWithType: String.LastIndexOf(Char, Int32)\n  fullName: String.LastIndexOf(Char, Int32)\n- uid: System.String.LastIndexOf(System.String)\n  parent: System.String\n  isExternal: false\n  name: LastIndexOf(String)\n  nameWithType: String.LastIndexOf(String)\n  fullName: String.LastIndexOf(String)\n- uid: System.String.LastIndexOf(System.Char)\n  parent: System.String\n  isExternal: false\n  name: LastIndexOf(Char)\n  nameWithType: String.LastIndexOf(Char)\n  fullName: String.LastIndexOf(Char)\n- uid: System.String.LastIndexOf(System.String,System.Int32)\n  parent: System.String\n  isExternal: false\n  name: LastIndexOf(String, Int32)\n  nameWithType: String.LastIndexOf(String, Int32)\n  fullName: String.LastIndexOf(String, Int32)\n- uid: System.String.LastIndexOfAny(System.Char[])\n  parent: System.String\n  isExternal: false\n  name: LastIndexOfAny(Char[])\n  nameWithType: String.LastIndexOfAny(Char[])\n  fullName: String.LastIndexOfAny(Char[])\n- uid: System.String.LastIndexOfAny(System.Char[],System.Int32)\n  parent: System.String\n  isExternal: false\n  name: LastIndexOfAny(Char[], Int32)\n  nameWithType: String.LastIndexOfAny(Char[], Int32)\n  fullName: String.LastIndexOfAny(Char[], Int32)\n- uid: System.String.LastIndexOfAny(System.Char[],System.Int32,System.Int32)\n  parent: System.String\n  isExternal: false\n  name: LastIndexOfAny(Char[], Int32, Int32)\n  nameWithType: String.LastIndexOfAny(Char[], Int32, Int32)\n  fullName: String.LastIndexOfAny(Char[], Int32, Int32)\n- uid: System.String.Length\n  parent: System.String\n  isExternal: false\n  name: Length\n  nameWithType: String.Length\n  fullName: String.Length\n- uid: System.String.Normalize(System.Text.NormalizationForm)\n  parent: System.String\n  isExternal: false\n  name: Normalize(NormalizationForm)\n  nameWithType: String.Normalize(NormalizationForm)\n  fullName: String.Normalize(NormalizationForm)\n- uid: System.String.Normalize\n  parent: System.String\n  isExternal: false\n  name: Normalize()\n  nameWithType: String.Normalize()\n  fullName: String.Normalize()\n- uid: System.String.op_Equality(System.String,System.String)\n  parent: System.String\n  isExternal: false\n  name: op_Equality(String, String)\n  nameWithType: String.op_Equality(String, String)\n  fullName: String.op_Equality(String, String)\n- uid: System.String.op_Inequality(System.String,System.String)\n  parent: System.String\n  isExternal: false\n  name: op_Inequality(String, String)\n  nameWithType: String.op_Inequality(String, String)\n  fullName: String.op_Inequality(String, String)\n- uid: System.String.PadLeft(System.Int32)\n  parent: System.String\n  isExternal: false\n  name: PadLeft(Int32)\n  nameWithType: String.PadLeft(Int32)\n  fullName: String.PadLeft(Int32)\n- uid: System.String.PadLeft(System.Int32,System.Char)\n  parent: System.String\n  isExternal: false\n  name: PadLeft(Int32, Char)\n  nameWithType: String.PadLeft(Int32, Char)\n  fullName: String.PadLeft(Int32, Char)\n- uid: System.String.PadRight(System.Int32)\n  parent: System.String\n  isExternal: false\n  name: PadRight(Int32)\n  nameWithType: String.PadRight(Int32)\n  fullName: String.PadRight(Int32)\n- uid: System.String.PadRight(System.Int32,System.Char)\n  parent: System.String\n  isExternal: false\n  name: PadRight(Int32, Char)\n  nameWithType: String.PadRight(Int32, Char)\n  fullName: String.PadRight(Int32, Char)\n- uid: System.String.Remove(System.Int32)\n  parent: System.String\n  isExternal: false\n  name: Remove(Int32)\n  nameWithType: String.Remove(Int32)\n  fullName: String.Remove(Int32)\n- uid: System.String.Remove(System.Int32,System.Int32)\n  parent: System.String\n  isExternal: false\n  name: Remove(Int32, Int32)\n  nameWithType: String.Remove(Int32, Int32)\n  fullName: String.Remove(Int32, Int32)\n- uid: System.String.Replace(System.Char,System.Char)\n  parent: System.String\n  isExternal: false\n  name: Replace(Char, Char)\n  nameWithType: String.Replace(Char, Char)\n  fullName: String.Replace(Char, Char)\n- uid: System.String.Replace(System.String,System.String)\n  parent: System.String\n  isExternal: false\n  name: Replace(String, String)\n  nameWithType: String.Replace(String, String)\n  fullName: String.Replace(String, String)\n- uid: System.String.Replace(System.String,System.String,System.StringComparison)\n  parent: System.String\n  isExternal: false\n  name: Replace(String, String, StringComparison)\n  nameWithType: String.Replace(String, String, StringComparison)\n  fullName: String.Replace(String, String, StringComparison)\n- uid: System.String.Replace(System.String,System.String,System.Boolean,System.Globalization.CultureInfo)\n  parent: System.String\n  isExternal: false\n  name: Replace(String, String, Boolean, CultureInfo)\n  nameWithType: String.Replace(String, String, Boolean, CultureInfo)\n  fullName: String.Replace(String, String, Boolean, CultureInfo)\n- uid: System.String.Split(System.String[],System.Int32,System.StringSplitOptions)\n  parent: System.String\n  isExternal: false\n  name: Split(String[], Int32, StringSplitOptions)\n  nameWithType: String.Split(String[], Int32, StringSplitOptions)\n  fullName: String.Split(String[], Int32, StringSplitOptions)\n- uid: System.StringSplitOptions\n  parent: System\n  isExternal: false\n  name: StringSplitOptions\n  nameWithType: StringSplitOptions\n  fullName: System.StringSplitOptions\n- uid: System.String.Split(System.String,System.Int32,System.StringSplitOptions)\n  parent: System.String\n  isExternal: false\n  name: Split(String, Int32, StringSplitOptions)\n  nameWithType: String.Split(String, Int32, StringSplitOptions)\n  fullName: String.Split(String, Int32, StringSplitOptions)\n- uid: System.String.Split(System.Char[],System.Int32,System.StringSplitOptions)\n  parent: System.String\n  isExternal: false\n  name: Split(Char[], Int32, StringSplitOptions)\n  nameWithType: String.Split(Char[], Int32, StringSplitOptions)\n  fullName: String.Split(Char[], Int32, StringSplitOptions)\n- uid: System.String.Split(System.Char,System.Int32,System.StringSplitOptions)\n  parent: System.String\n  isExternal: false\n  name: Split(Char, Int32, StringSplitOptions)\n  nameWithType: String.Split(Char, Int32, StringSplitOptions)\n  fullName: String.Split(Char, Int32, StringSplitOptions)\n- uid: System.String.Split(System.String[],System.StringSplitOptions)\n  parent: System.String\n  isExternal: false\n  name: Split(String[], StringSplitOptions)\n  nameWithType: String.Split(String[], StringSplitOptions)\n  fullName: String.Split(String[], StringSplitOptions)\n- uid: System.String.Split(System.Char,System.StringSplitOptions)\n  parent: System.String\n  isExternal: false\n  name: Split(Char, StringSplitOptions)\n  nameWithType: String.Split(Char, StringSplitOptions)\n  fullName: String.Split(Char, StringSplitOptions)\n- uid: System.String.Split(System.Char[],System.StringSplitOptions)\n  parent: System.String\n  isExternal: false\n  name: Split(Char[], StringSplitOptions)\n  nameWithType: String.Split(Char[], StringSplitOptions)\n  fullName: String.Split(Char[], StringSplitOptions)\n- uid: System.String.Split(System.Char[],System.Int32)\n  parent: System.String\n  isExternal: false\n  name: Split(Char[], Int32)\n  nameWithType: String.Split(Char[], Int32)\n  fullName: String.Split(Char[], Int32)\n- uid: System.String.Split(System.String,System.StringSplitOptions)\n  parent: System.String\n  isExternal: false\n  name: Split(String, StringSplitOptions)\n  nameWithType: String.Split(String, StringSplitOptions)\n  fullName: String.Split(String, StringSplitOptions)\n- uid: System.String.Split(System.Char[])\n  parent: System.String\n  isExternal: false\n  name: Split(Char[])\n  nameWithType: String.Split(Char[])\n  fullName: String.Split(Char[])\n- uid: System.String.StartsWith(System.String,System.Boolean,System.Globalization.CultureInfo)\n  parent: System.String\n  isExternal: false\n  name: StartsWith(String, Boolean, CultureInfo)\n  nameWithType: String.StartsWith(String, Boolean, CultureInfo)\n  fullName: String.StartsWith(String, Boolean, CultureInfo)\n- uid: System.String.StartsWith(System.String,System.StringComparison)\n  parent: System.String\n  isExternal: false\n  name: StartsWith(String, StringComparison)\n  nameWithType: String.StartsWith(String, StringComparison)\n  fullName: String.StartsWith(String, StringComparison)\n- uid: System.String.StartsWith(System.String)\n  parent: System.String\n  isExternal: false\n  name: StartsWith(String)\n  nameWithType: String.StartsWith(String)\n  fullName: String.StartsWith(String)\n- uid: System.String.StartsWith(System.Char)\n  parent: System.String\n  isExternal: false\n  name: StartsWith(Char)\n  nameWithType: String.StartsWith(Char)\n  fullName: String.StartsWith(Char)\n- uid: System.String.Substring(System.Int32)\n  parent: System.String\n  isExternal: false\n  name: Substring(Int32)\n  nameWithType: String.Substring(Int32)\n  fullName: String.Substring(Int32)\n- uid: System.String.Substring(System.Int32,System.Int32)\n  parent: System.String\n  isExternal: false\n  name: Substring(Int32, Int32)\n  nameWithType: String.Substring(Int32, Int32)\n  fullName: String.Substring(Int32, Int32)\n- uid: System.String.ToCharArray(System.Int32,System.Int32)\n  parent: System.String\n  isExternal: false\n  name: ToCharArray(Int32, Int32)\n  nameWithType: String.ToCharArray(Int32, Int32)\n  fullName: String.ToCharArray(Int32, Int32)\n- uid: System.String.ToCharArray\n  parent: System.String\n  isExternal: false\n  name: ToCharArray()\n  nameWithType: String.ToCharArray()\n  fullName: String.ToCharArray()\n- uid: System.String.ToLower\n  parent: System.String\n  isExternal: false\n  name: ToLower()\n  nameWithType: String.ToLower()\n  fullName: String.ToLower()\n- uid: System.String.ToLower(System.Globalization.CultureInfo)\n  parent: System.String\n  isExternal: false\n  name: ToLower(CultureInfo)\n  nameWithType: String.ToLower(CultureInfo)\n  fullName: String.ToLower(CultureInfo)\n- uid: System.String.ToLowerInvariant\n  parent: System.String\n  isExternal: false\n  name: ToLowerInvariant()\n  nameWithType: String.ToLowerInvariant()\n  fullName: String.ToLowerInvariant()\n- uid: System.String.ToString\n  parent: System.String\n  isExternal: false\n  name: ToString()\n  nameWithType: String.ToString()\n  fullName: String.ToString()\n- uid: System.String.ToString(System.IFormatProvider)\n  parent: System.String\n  isExternal: false\n  name: ToString(IFormatProvider)\n  nameWithType: String.ToString(IFormatProvider)\n  fullName: String.ToString(IFormatProvider)\n- uid: System.String.ToUpper\n  parent: System.String\n  isExternal: false\n  name: ToUpper()\n  nameWithType: String.ToUpper()\n  fullName: String.ToUpper()\n- uid: System.String.ToUpper(System.Globalization.CultureInfo)\n  parent: System.String\n  isExternal: false\n  name: ToUpper(CultureInfo)\n  nameWithType: String.ToUpper(CultureInfo)\n  fullName: String.ToUpper(CultureInfo)\n- uid: System.String.ToUpperInvariant\n  parent: System.String\n  isExternal: false\n  name: ToUpperInvariant()\n  nameWithType: String.ToUpperInvariant()\n  fullName: String.ToUpperInvariant()\n- uid: System.String.Trim(System.Char)\n  parent: System.String\n  isExternal: false\n  name: Trim(Char)\n  nameWithType: String.Trim(Char)\n  fullName: String.Trim(Char)\n- uid: System.String.Trim(System.Char[])\n  parent: System.String\n  isExternal: false\n  name: Trim(Char[])\n  nameWithType: String.Trim(Char[])\n  fullName: String.Trim(Char[])\n- uid: System.String.Trim\n  parent: System.String\n  isExternal: false\n  name: Trim()\n  nameWithType: String.Trim()\n  fullName: String.Trim()\n- uid: System.String.TrimEnd\n  parent: System.String\n  isExternal: false\n  name: TrimEnd()\n  nameWithType: String.TrimEnd()\n  fullName: String.TrimEnd()\n- uid: System.String.TrimEnd(System.Char)\n  parent: System.String\n  isExternal: false\n  name: TrimEnd(Char)\n  nameWithType: String.TrimEnd(Char)\n  fullName: String.TrimEnd(Char)\n- uid: System.String.TrimEnd(System.Char[])\n  parent: System.String\n  isExternal: false\n  name: TrimEnd(Char[])\n  nameWithType: String.TrimEnd(Char[])\n  fullName: String.TrimEnd(Char[])\n- uid: System.String.TrimStart\n  parent: System.String\n  isExternal: false\n  name: TrimStart()\n  nameWithType: String.TrimStart()\n  fullName: String.TrimStart()\n- uid: System.String.TrimStart(System.Char)\n  parent: System.String\n  isExternal: false\n  name: TrimStart(Char)\n  nameWithType: String.TrimStart(Char)\n  fullName: String.TrimStart(Char)\n- uid: System.String.TrimStart(System.Char[])\n  parent: System.String\n  isExternal: false\n  name: TrimStart(Char[])\n  nameWithType: String.TrimStart(Char[])\n  fullName: String.TrimStart(Char[])\n- uid: System.String.System#Collections#Generic#IEnumerable{System#Char}#GetEnumerator\n  parent: System.String\n  isExternal: false\n  name: IEnumerable<Char>.GetEnumerator()\n  nameWithType: String.IEnumerable<Char>.GetEnumerator()\n  fullName: String.IEnumerable<Char>.GetEnumerator()\n- uid: System.Collections.Generic.IEnumerator`1\n  name: IEnumerator<T>\n  nameWithType: IEnumerator<T>\n  fullName: System.Collections.Generic.IEnumerator<T>\n- uid: System.Collections.Generic.IEnumerator{System.Char}\n  parent: System.Collections.Generic\n  isExternal: false\n  name: IEnumerator<Char>\n  nameWithType: IEnumerator<Char>\n  fullName: System.Collections.Generic.IEnumerator<System.Char>\n  spec.csharp:\n  - uid: System.Collections.Generic.IEnumerator`1\n    name: IEnumerator\n    nameWithType: IEnumerator\n    fullName: System.Collections.Generic.IEnumerator\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Char\n    name: Char\n    nameWithType: Char\n    fullName: System.Char\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.String.System#Collections#IEnumerable#GetEnumerator\n  parent: System.String\n  isExternal: false\n  name: IEnumerable.GetEnumerator()\n  nameWithType: String.IEnumerable.GetEnumerator()\n  fullName: String.IEnumerable.GetEnumerator()\n- uid: System.Collections.IEnumerator\n  parent: System.Collections\n  isExternal: false\n  name: IEnumerator\n  nameWithType: IEnumerator\n  fullName: System.Collections.IEnumerator\n- uid: System.String.System#IComparable#CompareTo(System.Object)\n  parent: System.String\n  isExternal: false\n  name: IComparable.CompareTo(Object)\n  nameWithType: String.IComparable.CompareTo(Object)\n  fullName: String.IComparable.CompareTo(Object)\n- uid: System.String.System#IConvertible#GetTypeCode\n  parent: System.String\n  isExternal: false\n  name: IConvertible.GetTypeCode()\n  nameWithType: String.IConvertible.GetTypeCode()\n  fullName: String.IConvertible.GetTypeCode()\n- uid: System.String.System#IConvertible#ToBoolean(System.IFormatProvider)\n  parent: System.String\n  isExternal: false\n  name: IConvertible.ToBoolean(IFormatProvider)\n  nameWithType: String.IConvertible.ToBoolean(IFormatProvider)\n  fullName: String.IConvertible.ToBoolean(IFormatProvider)\n- uid: System.String.System#IConvertible#ToByte(System.IFormatProvider)\n  parent: System.String\n  isExternal: false\n  name: IConvertible.ToByte(IFormatProvider)\n  nameWithType: String.IConvertible.ToByte(IFormatProvider)\n  fullName: String.IConvertible.ToByte(IFormatProvider)\n- uid: System.Byte\n  parent: System\n  isExternal: false\n  name: Byte\n  nameWithType: Byte\n  fullName: System.Byte\n- uid: System.String.System#IConvertible#ToChar(System.IFormatProvider)\n  parent: System.String\n  isExternal: false\n  name: IConvertible.ToChar(IFormatProvider)\n  nameWithType: String.IConvertible.ToChar(IFormatProvider)\n  fullName: String.IConvertible.ToChar(IFormatProvider)\n- uid: System.String.System#IConvertible#ToDateTime(System.IFormatProvider)\n  parent: System.String\n  isExternal: false\n  name: IConvertible.ToDateTime(IFormatProvider)\n  nameWithType: String.IConvertible.ToDateTime(IFormatProvider)\n  fullName: String.IConvertible.ToDateTime(IFormatProvider)\n- uid: System.DateTime\n  parent: System\n  isExternal: false\n  name: DateTime\n  nameWithType: DateTime\n  fullName: System.DateTime\n- uid: System.String.System#IConvertible#ToDecimal(System.IFormatProvider)\n  parent: System.String\n  isExternal: false\n  name: IConvertible.ToDecimal(IFormatProvider)\n  nameWithType: String.IConvertible.ToDecimal(IFormatProvider)\n  fullName: String.IConvertible.ToDecimal(IFormatProvider)\n- uid: System.Decimal\n  parent: System\n  isExternal: false\n  name: Decimal\n  nameWithType: Decimal\n  fullName: System.Decimal\n- uid: System.String.System#IConvertible#ToDouble(System.IFormatProvider)\n  parent: System.String\n  isExternal: false\n  name: IConvertible.ToDouble(IFormatProvider)\n  nameWithType: String.IConvertible.ToDouble(IFormatProvider)\n  fullName: String.IConvertible.ToDouble(IFormatProvider)\n- uid: System.Double\n  parent: System\n  isExternal: false\n  name: Double\n  nameWithType: Double\n  fullName: System.Double\n- uid: System.String.System#IConvertible#ToInt16(System.IFormatProvider)\n  parent: System.String\n  isExternal: false\n  name: IConvertible.ToInt16(IFormatProvider)\n  nameWithType: String.IConvertible.ToInt16(IFormatProvider)\n  fullName: String.IConvertible.ToInt16(IFormatProvider)\n- uid: System.Int16\n  parent: System\n  isExternal: false\n  name: Int16\n  nameWithType: Int16\n  fullName: System.Int16\n- uid: System.String.System#IConvertible#ToInt32(System.IFormatProvider)\n  parent: System.String\n  isExternal: false\n  name: IConvertible.ToInt32(IFormatProvider)\n  nameWithType: String.IConvertible.ToInt32(IFormatProvider)\n  fullName: String.IConvertible.ToInt32(IFormatProvider)\n- uid: System.String.System#IConvertible#ToInt64(System.IFormatProvider)\n  parent: System.String\n  isExternal: false\n  name: IConvertible.ToInt64(IFormatProvider)\n  nameWithType: String.IConvertible.ToInt64(IFormatProvider)\n  fullName: String.IConvertible.ToInt64(IFormatProvider)\n- uid: System.Int64\n  parent: System\n  isExternal: false\n  name: Int64\n  nameWithType: Int64\n  fullName: System.Int64\n- uid: System.String.System#IConvertible#ToSByte(System.IFormatProvider)\n  parent: System.String\n  isExternal: false\n  name: IConvertible.ToSByte(IFormatProvider)\n  nameWithType: String.IConvertible.ToSByte(IFormatProvider)\n  fullName: String.IConvertible.ToSByte(IFormatProvider)\n- uid: System.String.System#IConvertible#ToSingle(System.IFormatProvider)\n  parent: System.String\n  isExternal: false\n  name: IConvertible.ToSingle(IFormatProvider)\n  nameWithType: String.IConvertible.ToSingle(IFormatProvider)\n  fullName: String.IConvertible.ToSingle(IFormatProvider)\n- uid: System.Single\n  parent: System\n  isExternal: false\n  name: Single\n  nameWithType: Single\n  fullName: System.Single\n- uid: System.String.System#IConvertible#ToString(System.IFormatProvider)\n  parent: System.String\n  isExternal: false\n  name: IConvertible.ToString(IFormatProvider)\n  nameWithType: String.IConvertible.ToString(IFormatProvider)\n  fullName: String.IConvertible.ToString(IFormatProvider)\n- uid: System.String.System#IConvertible#ToType(System.Type,System.IFormatProvider)\n  parent: System.String\n  isExternal: false\n  name: IConvertible.ToType(Type, IFormatProvider)\n  nameWithType: String.IConvertible.ToType(Type, IFormatProvider)\n  fullName: String.IConvertible.ToType(Type, IFormatProvider)\n- uid: System.Type\n  parent: System\n  isExternal: false\n  name: Type\n  nameWithType: Type\n  fullName: System.Type\n- uid: System.String.System#IConvertible#ToUInt16(System.IFormatProvider)\n  parent: System.String\n  isExternal: false\n  name: IConvertible.ToUInt16(IFormatProvider)\n  nameWithType: String.IConvertible.ToUInt16(IFormatProvider)\n  fullName: String.IConvertible.ToUInt16(IFormatProvider)\n- uid: System.UInt16\n  parent: System\n  isExternal: false\n  name: UInt16\n  nameWithType: UInt16\n  fullName: System.UInt16\n- uid: System.String.System#IConvertible#ToUInt32(System.IFormatProvider)\n  parent: System.String\n  isExternal: false\n  name: IConvertible.ToUInt32(IFormatProvider)\n  nameWithType: String.IConvertible.ToUInt32(IFormatProvider)\n  fullName: String.IConvertible.ToUInt32(IFormatProvider)\n- uid: System.UInt32\n  parent: System\n  isExternal: false\n  name: UInt32\n  nameWithType: UInt32\n  fullName: System.UInt32\n- uid: System.String.System#IConvertible#ToUInt64(System.IFormatProvider)\n  parent: System.String\n  isExternal: false\n  name: IConvertible.ToUInt64(IFormatProvider)\n  nameWithType: String.IConvertible.ToUInt64(IFormatProvider)\n  fullName: String.IConvertible.ToUInt64(IFormatProvider)\n- uid: System.UInt64\n  parent: System\n  isExternal: false\n  name: UInt64\n  nameWithType: UInt64\n  fullName: System.UInt64\n- uid: System.String.#ctor*\n  parent: System.String\n  isExternal: false\n  name: String\n  nameWithType: String.String\n  fullName: String.String\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/String.xml\n- uid: System.String.Compare*\n  parent: System.String\n  isExternal: false\n  name: Compare\n  nameWithType: String.Compare\n  fullName: String.Compare\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  - netcore-1.0\n  - netcore-1.1\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/String.xml\n- uid: System.String.CompareTo*\n  parent: System.String\n  isExternal: false\n  name: CompareTo\n  nameWithType: String.CompareTo\n  fullName: String.CompareTo\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  - netcore-1.0\n  - netcore-1.1\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/String.xml\n- uid: System.String.Format*\n  parent: System.String\n  isExternal: false\n  name: Format\n  nameWithType: String.Format\n  fullName: String.Format\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/String.xml\n- uid: System.String.Split*\n  parent: System.String\n  isExternal: false\n  name: Split\n  nameWithType: String.Split\n  fullName: String.Split\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/String.xml\n- uid: System.String.Chars*\n  parent: System.String\n  isExternal: false\n  name: Chars\n  nameWithType: String.Chars\n  fullName: String.Chars\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/String.xml\n- uid: System.String.Clone*\n  parent: System.String\n  isExternal: false\n  name: Clone\n  nameWithType: String.Clone\n  fullName: String.Clone\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/String.xml\n- uid: System.String.CompareOrdinal*\n  parent: System.String\n  isExternal: false\n  name: CompareOrdinal\n  nameWithType: String.CompareOrdinal\n  fullName: String.CompareOrdinal\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/String.xml\n- uid: System.String.Concat*\n  parent: System.String\n  isExternal: false\n  name: Concat\n  nameWithType: String.Concat\n  fullName: String.Concat\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/String.xml\n- uid: System.String.Concat``1*\n  parent: System.String\n  isExternal: false\n  name: Concat<T>\n  nameWithType: String.Concat<T>\n  fullName: String.Concat<T>\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/String.xml\n- uid: System.String.Contains*\n  parent: System.String\n  isExternal: false\n  name: Contains\n  nameWithType: String.Contains\n  fullName: String.Contains\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/String.xml\n- uid: System.String.Copy*\n  parent: System.String\n  isExternal: false\n  name: Copy\n  nameWithType: String.Copy\n  fullName: String.Copy\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/String.xml\n- uid: System.String.CopyTo*\n  parent: System.String\n  isExternal: false\n  name: CopyTo\n  nameWithType: String.CopyTo\n  fullName: String.CopyTo\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/String.xml\n- uid: System.String.EndsWith*\n  parent: System.String\n  isExternal: false\n  name: EndsWith\n  nameWithType: String.EndsWith\n  fullName: String.EndsWith\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  - netcore-1.0\n  - netcore-1.1\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/String.xml\n- uid: System.String.Equals*\n  parent: System.String\n  isExternal: false\n  name: Equals\n  nameWithType: String.Equals\n  fullName: String.Equals\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/String.xml\n- uid: System.String.GetEnumerator*\n  parent: System.String\n  isExternal: false\n  name: GetEnumerator\n  nameWithType: String.GetEnumerator\n  fullName: String.GetEnumerator\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/String.xml\n- uid: System.String.GetHashCode*\n  parent: System.String\n  isExternal: false\n  name: GetHashCode\n  nameWithType: String.GetHashCode\n  fullName: String.GetHashCode\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/String.xml\n- uid: System.String.GetTypeCode*\n  parent: System.String\n  isExternal: false\n  name: GetTypeCode\n  nameWithType: String.GetTypeCode\n  fullName: String.GetTypeCode\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/String.xml\n- uid: System.String.IndexOf*\n  parent: System.String\n  isExternal: false\n  name: IndexOf\n  nameWithType: String.IndexOf\n  fullName: String.IndexOf\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/String.xml\n- uid: System.String.IndexOfAny*\n  parent: System.String\n  isExternal: false\n  name: IndexOfAny\n  nameWithType: String.IndexOfAny\n  fullName: String.IndexOfAny\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/String.xml\n- uid: System.String.Insert*\n  parent: System.String\n  isExternal: false\n  name: Insert\n  nameWithType: String.Insert\n  fullName: String.Insert\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/String.xml\n- uid: System.String.Intern*\n  parent: System.String\n  isExternal: false\n  name: Intern\n  nameWithType: String.Intern\n  fullName: String.Intern\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/String.xml\n- uid: System.String.IsInterned*\n  parent: System.String\n  isExternal: false\n  name: IsInterned\n  nameWithType: String.IsInterned\n  fullName: String.IsInterned\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/String.xml\n- uid: System.String.IsNormalized*\n  parent: System.String\n  isExternal: false\n  name: IsNormalized\n  nameWithType: String.IsNormalized\n  fullName: String.IsNormalized\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/String.xml\n- uid: System.String.IsNullOrEmpty*\n  parent: System.String\n  isExternal: false\n  name: IsNullOrEmpty\n  nameWithType: String.IsNullOrEmpty\n  fullName: String.IsNullOrEmpty\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/String.xml\n- uid: System.String.IsNullOrWhiteSpace*\n  parent: System.String\n  isExternal: false\n  name: IsNullOrWhiteSpace\n  nameWithType: String.IsNullOrWhiteSpace\n  fullName: String.IsNullOrWhiteSpace\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/String.xml\n- uid: System.String.Join*\n  parent: System.String\n  isExternal: false\n  name: Join\n  nameWithType: String.Join\n  fullName: String.Join\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/String.xml\n- uid: System.String.Join``1*\n  parent: System.String\n  isExternal: false\n  name: Join<T>\n  nameWithType: String.Join<T>\n  fullName: String.Join<T>\n  monikers:\n  - netcore-2.0\n  - netcore-1.0\n  - netcore-1.1\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/String.xml\n- uid: System.String.LastIndexOf*\n  parent: System.String\n  isExternal: false\n  name: LastIndexOf\n  nameWithType: String.LastIndexOf\n  fullName: String.LastIndexOf\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/String.xml\n- uid: System.String.LastIndexOfAny*\n  parent: System.String\n  isExternal: false\n  name: LastIndexOfAny\n  nameWithType: String.LastIndexOfAny\n  fullName: String.LastIndexOfAny\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/String.xml\n- uid: System.String.Length*\n  parent: System.String\n  isExternal: false\n  name: Length\n  nameWithType: String.Length\n  fullName: String.Length\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/String.xml\n- uid: System.String.Normalize*\n  parent: System.String\n  isExternal: false\n  name: Normalize\n  nameWithType: String.Normalize\n  fullName: String.Normalize\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/String.xml\n- uid: System.String.op_Equality*\n  parent: System.String\n  isExternal: false\n  name: op_Equality\n  nameWithType: String.op_Equality\n  fullName: String.op_Equality\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/String.xml\n- uid: System.String.op_Inequality*\n  parent: System.String\n  isExternal: false\n  name: op_Inequality\n  nameWithType: String.op_Inequality\n  fullName: String.op_Inequality\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/String.xml\n- uid: System.String.PadLeft*\n  parent: System.String\n  isExternal: false\n  name: PadLeft\n  nameWithType: String.PadLeft\n  fullName: String.PadLeft\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/String.xml\n- uid: System.String.PadRight*\n  parent: System.String\n  isExternal: false\n  name: PadRight\n  nameWithType: String.PadRight\n  fullName: String.PadRight\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/String.xml\n- uid: System.String.Remove*\n  parent: System.String\n  isExternal: false\n  name: Remove\n  nameWithType: String.Remove\n  fullName: String.Remove\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/String.xml\n- uid: System.String.Replace*\n  parent: System.String\n  isExternal: false\n  name: Replace\n  nameWithType: String.Replace\n  fullName: String.Replace\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/String.xml\n- uid: System.String.StartsWith*\n  parent: System.String\n  isExternal: false\n  name: StartsWith\n  nameWithType: String.StartsWith\n  fullName: String.StartsWith\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  - netcore-1.0\n  - netcore-1.1\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/String.xml\n- uid: System.String.Substring*\n  parent: System.String\n  isExternal: false\n  name: Substring\n  nameWithType: String.Substring\n  fullName: String.Substring\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/String.xml\n- uid: System.String.ToCharArray*\n  parent: System.String\n  isExternal: false\n  name: ToCharArray\n  nameWithType: String.ToCharArray\n  fullName: String.ToCharArray\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/String.xml\n- uid: System.String.ToLower*\n  parent: System.String\n  isExternal: false\n  name: ToLower\n  nameWithType: String.ToLower\n  fullName: String.ToLower\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/String.xml\n- uid: System.String.ToLowerInvariant*\n  parent: System.String\n  isExternal: false\n  name: ToLowerInvariant\n  nameWithType: String.ToLowerInvariant\n  fullName: String.ToLowerInvariant\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/String.xml\n- uid: System.String.ToString*\n  parent: System.String\n  isExternal: false\n  name: ToString\n  nameWithType: String.ToString\n  fullName: String.ToString\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/String.xml\n- uid: System.String.ToUpper*\n  parent: System.String\n  isExternal: false\n  name: ToUpper\n  nameWithType: String.ToUpper\n  fullName: String.ToUpper\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/String.xml\n- uid: System.String.ToUpperInvariant*\n  parent: System.String\n  isExternal: false\n  name: ToUpperInvariant\n  nameWithType: String.ToUpperInvariant\n  fullName: String.ToUpperInvariant\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/String.xml\n- uid: System.String.Trim*\n  parent: System.String\n  isExternal: false\n  name: Trim\n  nameWithType: String.Trim\n  fullName: String.Trim\n  monikers:\n  - netcore-2.0\n  - netcore-1.0\n  - netcore-1.1\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/String.xml\n- uid: System.String.TrimEnd*\n  parent: System.String\n  isExternal: false\n  name: TrimEnd\n  nameWithType: String.TrimEnd\n  fullName: String.TrimEnd\n  monikers:\n  - netcore-2.0\n  - netcore-1.0\n  - netcore-1.1\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/String.xml\n- uid: System.String.TrimStart*\n  parent: System.String\n  isExternal: false\n  name: TrimStart\n  nameWithType: String.TrimStart\n  fullName: String.TrimStart\n  monikers:\n  - netcore-2.0\n  - netcore-1.0\n  - netcore-1.1\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/String.xml\n- uid: System.String.System#Collections#Generic#IEnumerable{System#Char}#GetEnumerator*\n  parent: System.String\n  isExternal: false\n  name: System.Collections.Generic.IEnumerable<System.Char>.GetEnumerator\n  nameWithType: String.System.Collections.Generic.IEnumerable<System.Char>.GetEnumerator\n  fullName: String.System.Collections.Generic.IEnumerable<System.Char>.GetEnumerator\n  monikers:\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/String.xml\n- uid: System.String.System#Collections#IEnumerable#GetEnumerator*\n  parent: System.String\n  isExternal: false\n  name: System.Collections.IEnumerable.GetEnumerator\n  nameWithType: String.System.Collections.IEnumerable.GetEnumerator\n  fullName: String.System.Collections.IEnumerable.GetEnumerator\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/String.xml\n- uid: System.String.System#IComparable#CompareTo*\n  parent: System.String\n  isExternal: false\n  name: System.IComparable.CompareTo\n  nameWithType: String.System.IComparable.CompareTo\n  fullName: String.System.IComparable.CompareTo\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/String.xml\n- uid: System.String.System#IConvertible#GetTypeCode*\n  parent: System.String\n  isExternal: false\n  name: System.IConvertible.GetTypeCode\n  nameWithType: String.System.IConvertible.GetTypeCode\n  fullName: String.System.IConvertible.GetTypeCode\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/String.xml\n- uid: System.String.System#IConvertible#ToBoolean*\n  parent: System.String\n  isExternal: false\n  name: System.IConvertible.ToBoolean\n  nameWithType: String.System.IConvertible.ToBoolean\n  fullName: String.System.IConvertible.ToBoolean\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/String.xml\n- uid: System.String.System#IConvertible#ToByte*\n  parent: System.String\n  isExternal: false\n  name: System.IConvertible.ToByte\n  nameWithType: String.System.IConvertible.ToByte\n  fullName: String.System.IConvertible.ToByte\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/String.xml\n- uid: System.String.System#IConvertible#ToChar*\n  parent: System.String\n  isExternal: false\n  name: System.IConvertible.ToChar\n  nameWithType: String.System.IConvertible.ToChar\n  fullName: String.System.IConvertible.ToChar\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/String.xml\n- uid: System.String.System#IConvertible#ToDateTime*\n  parent: System.String\n  isExternal: false\n  name: System.IConvertible.ToDateTime\n  nameWithType: String.System.IConvertible.ToDateTime\n  fullName: String.System.IConvertible.ToDateTime\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/String.xml\n- uid: System.String.System#IConvertible#ToDecimal*\n  parent: System.String\n  isExternal: false\n  name: System.IConvertible.ToDecimal\n  nameWithType: String.System.IConvertible.ToDecimal\n  fullName: String.System.IConvertible.ToDecimal\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/String.xml\n- uid: System.String.System#IConvertible#ToDouble*\n  parent: System.String\n  isExternal: false\n  name: System.IConvertible.ToDouble\n  nameWithType: String.System.IConvertible.ToDouble\n  fullName: String.System.IConvertible.ToDouble\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/String.xml\n- uid: System.String.System#IConvertible#ToInt16*\n  parent: System.String\n  isExternal: false\n  name: System.IConvertible.ToInt16\n  nameWithType: String.System.IConvertible.ToInt16\n  fullName: String.System.IConvertible.ToInt16\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/String.xml\n- uid: System.String.System#IConvertible#ToInt32*\n  parent: System.String\n  isExternal: false\n  name: System.IConvertible.ToInt32\n  nameWithType: String.System.IConvertible.ToInt32\n  fullName: String.System.IConvertible.ToInt32\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/String.xml\n- uid: System.String.System#IConvertible#ToInt64*\n  parent: System.String\n  isExternal: false\n  name: System.IConvertible.ToInt64\n  nameWithType: String.System.IConvertible.ToInt64\n  fullName: String.System.IConvertible.ToInt64\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/String.xml\n- uid: System.String.System#IConvertible#ToSByte*\n  parent: System.String\n  isExternal: false\n  name: System.IConvertible.ToSByte\n  nameWithType: String.System.IConvertible.ToSByte\n  fullName: String.System.IConvertible.ToSByte\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/String.xml\n- uid: System.String.System#IConvertible#ToSingle*\n  parent: System.String\n  isExternal: false\n  name: System.IConvertible.ToSingle\n  nameWithType: String.System.IConvertible.ToSingle\n  fullName: String.System.IConvertible.ToSingle\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/String.xml\n- uid: System.String.System#IConvertible#ToString*\n  parent: System.String\n  isExternal: false\n  name: System.IConvertible.ToString\n  nameWithType: String.System.IConvertible.ToString\n  fullName: String.System.IConvertible.ToString\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/String.xml\n- uid: System.String.System#IConvertible#ToType*\n  parent: System.String\n  isExternal: false\n  name: System.IConvertible.ToType\n  nameWithType: String.System.IConvertible.ToType\n  fullName: String.System.IConvertible.ToType\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/String.xml\n- uid: System.String.System#IConvertible#ToUInt16*\n  parent: System.String\n  isExternal: false\n  name: System.IConvertible.ToUInt16\n  nameWithType: String.System.IConvertible.ToUInt16\n  fullName: String.System.IConvertible.ToUInt16\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/String.xml\n- uid: System.String.System#IConvertible#ToUInt32*\n  parent: System.String\n  isExternal: false\n  name: System.IConvertible.ToUInt32\n  nameWithType: String.System.IConvertible.ToUInt32\n  fullName: String.System.IConvertible.ToUInt32\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/String.xml\n- uid: System.String.System#IConvertible#ToUInt64*\n  parent: System.String\n  isExternal: false\n  name: System.IConvertible.ToUInt64\n  nameWithType: String.System.IConvertible.ToUInt64\n  fullName: String.System.IConvertible.ToUInt64\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/String.xml\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: false\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n- uid: System.Collections.Immutable.ImmutableArray.ToImmutableArray``1(System.Collections.Generic.IEnumerable{``0})\n  parent: System.Collections.Immutable.ImmutableArray\n  isExternal: false\n  name: ToImmutableArray<TSource>(IEnumerable<TSource>)\n  nameWithType: ImmutableArray.ToImmutableArray<TSource>(IEnumerable<TSource>)\n  fullName: ImmutableArray.ToImmutableArray<TSource>(IEnumerable<TSource>)\n- uid: System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})\n  parent: System.Collections.Immutable.ImmutableDictionary\n  isExternal: false\n  name: ToImmutableDictionary<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>)\n  nameWithType: ImmutableDictionary.ToImmutableDictionary<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>)\n  fullName: ImmutableDictionary.ToImmutableDictionary<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>)\n- uid: System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})\n  parent: System.Collections.Immutable.ImmutableDictionary\n  isExternal: false\n  name: ToImmutableDictionary<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>, IEqualityComparer<TKey>)\n  nameWithType: ImmutableDictionary.ToImmutableDictionary<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>, IEqualityComparer<TKey>)\n  fullName: ImmutableDictionary.ToImmutableDictionary<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>, IEqualityComparer<TKey>)\n- uid: System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}})\n  parent: System.Collections.Immutable.ImmutableDictionary\n  isExternal: false\n  name: ToImmutableDictionary<TKey,TValue>(IEnumerable<KeyValuePair<TKey,TValue>>)\n  nameWithType: ImmutableDictionary.ToImmutableDictionary<TKey,TValue>(IEnumerable<KeyValuePair<TKey,TValue>>)\n  fullName: ImmutableDictionary.ToImmutableDictionary<TKey,TValue>(IEnumerable<KeyValuePair<TKey,TValue>>)\n- uid: System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}},System.Collections.Generic.IEqualityComparer{``0})\n  parent: System.Collections.Immutable.ImmutableDictionary\n  isExternal: false\n  name: ToImmutableDictionary<TKey,TValue>(IEnumerable<KeyValuePair<TKey,TValue>>, IEqualityComparer<TKey>)\n  nameWithType: ImmutableDictionary.ToImmutableDictionary<TKey,TValue>(IEnumerable<KeyValuePair<TKey,TValue>>, IEqualityComparer<TKey>)\n  fullName: ImmutableDictionary.ToImmutableDictionary<TKey,TValue>(IEnumerable<KeyValuePair<TKey,TValue>>, IEqualityComparer<TKey>)\n- uid: System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}},System.Collections.Generic.IEqualityComparer{``0},System.Collections.Generic.IEqualityComparer{``1})\n  parent: System.Collections.Immutable.ImmutableDictionary\n  isExternal: false\n  name: ToImmutableDictionary<TKey,TValue>(IEnumerable<KeyValuePair<TKey,TValue>>, IEqualityComparer<TKey>, IEqualityComparer<TValue>)\n  nameWithType: ImmutableDictionary.ToImmutableDictionary<TKey,TValue>(IEnumerable<KeyValuePair<TKey,TValue>>, IEqualityComparer<TKey>, IEqualityComparer<TValue>)\n  fullName: ImmutableDictionary.ToImmutableDictionary<TKey,TValue>(IEnumerable<KeyValuePair<TKey,TValue>>, IEqualityComparer<TKey>, IEqualityComparer<TValue>)\n- uid: System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})\n  parent: System.Collections.Immutable.ImmutableDictionary\n  isExternal: false\n  name: ToImmutableDictionary<TSource,TKey,TValue>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TValue>)\n  nameWithType: ImmutableDictionary.ToImmutableDictionary<TSource,TKey,TValue>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TValue>)\n  fullName: ImmutableDictionary.ToImmutableDictionary<TSource,TKey,TValue>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TValue>)\n- uid: System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})\n  parent: System.Collections.Immutable.ImmutableDictionary\n  isExternal: false\n  name: ToImmutableDictionary<TSource,TKey,TValue>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TValue>, IEqualityComparer<TKey>)\n  nameWithType: ImmutableDictionary.ToImmutableDictionary<TSource,TKey,TValue>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TValue>, IEqualityComparer<TKey>)\n  fullName: ImmutableDictionary.ToImmutableDictionary<TSource,TKey,TValue>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TValue>, IEqualityComparer<TKey>)\n- uid: System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1},System.Collections.Generic.IEqualityComparer{``2})\n  parent: System.Collections.Immutable.ImmutableDictionary\n  isExternal: false\n  name: ToImmutableDictionary<TSource,TKey,TValue>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TValue>, IEqualityComparer<TKey>, IEqualityComparer<TValue>)\n  nameWithType: ImmutableDictionary.ToImmutableDictionary<TSource,TKey,TValue>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TValue>, IEqualityComparer<TKey>, IEqualityComparer<TValue>)\n  fullName: ImmutableDictionary.ToImmutableDictionary<TSource,TKey,TValue>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TValue>, IEqualityComparer<TKey>, IEqualityComparer<TValue>)\n- uid: System.Collections.Immutable.ImmutableHashSet.ToImmutableHashSet``1(System.Collections.Generic.IEnumerable{``0})\n  parent: System.Collections.Immutable.ImmutableHashSet\n  isExternal: false\n  name: ToImmutableHashSet<TSource>(IEnumerable<TSource>)\n  nameWithType: ImmutableHashSet.ToImmutableHashSet<TSource>(IEnumerable<TSource>)\n  fullName: ImmutableHashSet.ToImmutableHashSet<TSource>(IEnumerable<TSource>)\n- uid: System.Collections.Immutable.ImmutableHashSet.ToImmutableHashSet``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})\n  parent: System.Collections.Immutable.ImmutableHashSet\n  isExternal: false\n  name: ToImmutableHashSet<TSource>(IEnumerable<TSource>, IEqualityComparer<TSource>)\n  nameWithType: ImmutableHashSet.ToImmutableHashSet<TSource>(IEnumerable<TSource>, IEqualityComparer<TSource>)\n  fullName: ImmutableHashSet.ToImmutableHashSet<TSource>(IEnumerable<TSource>, IEqualityComparer<TSource>)\n- uid: System.Collections.Immutable.ImmutableList.ToImmutableList``1(System.Collections.Generic.IEnumerable{``0})\n  parent: System.Collections.Immutable.ImmutableList\n  isExternal: false\n  name: ToImmutableList<TSource>(IEnumerable<TSource>)\n  nameWithType: ImmutableList.ToImmutableList<TSource>(IEnumerable<TSource>)\n  fullName: ImmutableList.ToImmutableList<TSource>(IEnumerable<TSource>)\n- uid: System.Collections.Immutable.ImmutableSortedDictionary.ToImmutableSortedDictionary``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}})\n  parent: System.Collections.Immutable.ImmutableSortedDictionary\n  isExternal: false\n  name: ToImmutableSortedDictionary<TKey,TValue>(IEnumerable<KeyValuePair<TKey,TValue>>)\n  nameWithType: ImmutableSortedDictionary.ToImmutableSortedDictionary<TKey,TValue>(IEnumerable<KeyValuePair<TKey,TValue>>)\n  fullName: ImmutableSortedDictionary.ToImmutableSortedDictionary<TKey,TValue>(IEnumerable<KeyValuePair<TKey,TValue>>)\n- uid: System.Collections.Immutable.ImmutableSortedDictionary.ToImmutableSortedDictionary``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}},System.Collections.Generic.IComparer{``0})\n  parent: System.Collections.Immutable.ImmutableSortedDictionary\n  isExternal: false\n  name: ToImmutableSortedDictionary<TKey,TValue>(IEnumerable<KeyValuePair<TKey,TValue>>, IComparer<TKey>)\n  nameWithType: ImmutableSortedDictionary.ToImmutableSortedDictionary<TKey,TValue>(IEnumerable<KeyValuePair<TKey,TValue>>, IComparer<TKey>)\n  fullName: ImmutableSortedDictionary.ToImmutableSortedDictionary<TKey,TValue>(IEnumerable<KeyValuePair<TKey,TValue>>, IComparer<TKey>)\n- uid: System.Collections.Immutable.ImmutableSortedDictionary.ToImmutableSortedDictionary``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}},System.Collections.Generic.IComparer{``0},System.Collections.Generic.IEqualityComparer{``1})\n  parent: System.Collections.Immutable.ImmutableSortedDictionary\n  isExternal: false\n  name: ToImmutableSortedDictionary<TKey,TValue>(IEnumerable<KeyValuePair<TKey,TValue>>, IComparer<TKey>, IEqualityComparer<TValue>)\n  nameWithType: ImmutableSortedDictionary.ToImmutableSortedDictionary<TKey,TValue>(IEnumerable<KeyValuePair<TKey,TValue>>, IComparer<TKey>, IEqualityComparer<TValue>)\n  fullName: ImmutableSortedDictionary.ToImmutableSortedDictionary<TKey,TValue>(IEnumerable<KeyValuePair<TKey,TValue>>, IComparer<TKey>, IEqualityComparer<TValue>)\n- uid: System.Collections.Immutable.ImmutableSortedDictionary.ToImmutableSortedDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})\n  parent: System.Collections.Immutable.ImmutableSortedDictionary\n  isExternal: false\n  name: ToImmutableSortedDictionary<TSource,TKey,TValue>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TValue>)\n  nameWithType: ImmutableSortedDictionary.ToImmutableSortedDictionary<TSource,TKey,TValue>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TValue>)\n  fullName: ImmutableSortedDictionary.ToImmutableSortedDictionary<TSource,TKey,TValue>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TValue>)\n- uid: System.Collections.Immutable.ImmutableSortedDictionary.ToImmutableSortedDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IComparer{``1})\n  parent: System.Collections.Immutable.ImmutableSortedDictionary\n  isExternal: false\n  name: ToImmutableSortedDictionary<TSource,TKey,TValue>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TValue>, IComparer<TKey>)\n  nameWithType: ImmutableSortedDictionary.ToImmutableSortedDictionary<TSource,TKey,TValue>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TValue>, IComparer<TKey>)\n  fullName: ImmutableSortedDictionary.ToImmutableSortedDictionary<TSource,TKey,TValue>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TValue>, IComparer<TKey>)\n- uid: System.Collections.Immutable.ImmutableSortedDictionary.ToImmutableSortedDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IComparer{``1},System.Collections.Generic.IEqualityComparer{``2})\n  parent: System.Collections.Immutable.ImmutableSortedDictionary\n  isExternal: false\n  name: ToImmutableSortedDictionary<TSource,TKey,TValue>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TValue>, IComparer<TKey>, IEqualityComparer<TValue>)\n  nameWithType: ImmutableSortedDictionary.ToImmutableSortedDictionary<TSource,TKey,TValue>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TValue>, IComparer<TKey>, IEqualityComparer<TValue>)\n  fullName: ImmutableSortedDictionary.ToImmutableSortedDictionary<TSource,TKey,TValue>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TValue>, IComparer<TKey>, IEqualityComparer<TValue>)\n- uid: System.Collections.Immutable.ImmutableSortedSet.ToImmutableSortedSet``1(System.Collections.Generic.IEnumerable{``0})\n  parent: System.Collections.Immutable.ImmutableSortedSet\n  isExternal: false\n  name: ToImmutableSortedSet<TSource>(IEnumerable<TSource>)\n  nameWithType: ImmutableSortedSet.ToImmutableSortedSet<TSource>(IEnumerable<TSource>)\n  fullName: ImmutableSortedSet.ToImmutableSortedSet<TSource>(IEnumerable<TSource>)\n- uid: System.Collections.Immutable.ImmutableSortedSet.ToImmutableSortedSet``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IComparer{``0})\n  parent: System.Collections.Immutable.ImmutableSortedSet\n  isExternal: false\n  name: ToImmutableSortedSet<TSource>(IEnumerable<TSource>, IComparer<TSource>)\n  nameWithType: ImmutableSortedSet.ToImmutableSortedSet<TSource>(IEnumerable<TSource>, IComparer<TSource>)\n  fullName: ImmutableSortedSet.ToImmutableSortedSet<TSource>(IEnumerable<TSource>, IComparer<TSource>)\n- uid: System.Data.DataTableExtensions.CopyToDataTable``1(System.Collections.Generic.IEnumerable{``0})\n  parent: System.Data.DataTableExtensions\n  isExternal: false\n  name: CopyToDataTable<T>(IEnumerable<T>)\n  nameWithType: DataTableExtensions.CopyToDataTable<T>(IEnumerable<T>)\n  fullName: DataTableExtensions.CopyToDataTable<T>(IEnumerable<T>)\n- uid: System.Data.DataTableExtensions.CopyToDataTable``1(System.Collections.Generic.IEnumerable{``0},System.Data.DataTable,System.Data.LoadOption)\n  parent: System.Data.DataTableExtensions\n  isExternal: false\n  name: CopyToDataTable<T>(IEnumerable<T>, DataTable, LoadOption)\n  nameWithType: DataTableExtensions.CopyToDataTable<T>(IEnumerable<T>, DataTable, LoadOption)\n  fullName: DataTableExtensions.CopyToDataTable<T>(IEnumerable<T>, DataTable, LoadOption)\n- uid: System.Data.DataTableExtensions.CopyToDataTable``1(System.Collections.Generic.IEnumerable{``0},System.Data.DataTable,System.Data.LoadOption,System.Data.FillErrorEventHandler)\n  parent: System.Data.DataTableExtensions\n  isExternal: false\n  name: CopyToDataTable<T>(IEnumerable<T>, DataTable, LoadOption, FillErrorEventHandler)\n  nameWithType: DataTableExtensions.CopyToDataTable<T>(IEnumerable<T>, DataTable, LoadOption, FillErrorEventHandler)\n  fullName: DataTableExtensions.CopyToDataTable<T>(IEnumerable<T>, DataTable, LoadOption, FillErrorEventHandler)\n- uid: System.Linq.Enumerable.Aggregate``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,``0})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Aggregate<TSource>(IEnumerable<TSource>, Func<TSource,TSource,TSource>)\n  nameWithType: Enumerable.Aggregate<TSource>(IEnumerable<TSource>, Func<TSource,TSource,TSource>)\n  fullName: Enumerable.Aggregate<TSource>(IEnumerable<TSource>, Func<TSource,TSource,TSource>)\n- uid: System.Linq.Enumerable.Aggregate``2(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Aggregate<TSource,TAccumulate>(IEnumerable<TSource>, TAccumulate, Func<TAccumulate,TSource,TAccumulate>)\n  nameWithType: Enumerable.Aggregate<TSource,TAccumulate>(IEnumerable<TSource>, TAccumulate, Func<TAccumulate,TSource,TAccumulate>)\n  fullName: Enumerable.Aggregate<TSource,TAccumulate>(IEnumerable<TSource>, TAccumulate, Func<TAccumulate,TSource,TAccumulate>)\n- uid: System.Linq.Enumerable.Aggregate``3(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``2})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Aggregate<TSource,TAccumulate,TResult>(IEnumerable<TSource>, TAccumulate, Func<TAccumulate,TSource,TAccumulate>, Func<TAccumulate,TResult>)\n  nameWithType: Enumerable.Aggregate<TSource,TAccumulate,TResult>(IEnumerable<TSource>, TAccumulate, Func<TAccumulate,TSource,TAccumulate>, Func<TAccumulate,TResult>)\n  fullName: Enumerable.Aggregate<TSource,TAccumulate,TResult>(IEnumerable<TSource>, TAccumulate, Func<TAccumulate,TSource,TAccumulate>, Func<TAccumulate,TResult>)\n- uid: System.Linq.Enumerable.All``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: All<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n  nameWithType: Enumerable.All<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n  fullName: Enumerable.All<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n- uid: System.Linq.Enumerable.Any``1(System.Collections.Generic.IEnumerable{``0})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Any<TSource>(IEnumerable<TSource>)\n  nameWithType: Enumerable.Any<TSource>(IEnumerable<TSource>)\n  fullName: Enumerable.Any<TSource>(IEnumerable<TSource>)\n- uid: System.Linq.Enumerable.Any``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Any<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n  nameWithType: Enumerable.Any<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n  fullName: Enumerable.Any<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n- uid: System.Linq.Enumerable.Append``1(System.Collections.Generic.IEnumerable{``0},``0)\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Append<TSource>(IEnumerable<TSource>, TSource)\n  nameWithType: Enumerable.Append<TSource>(IEnumerable<TSource>, TSource)\n  fullName: Enumerable.Append<TSource>(IEnumerable<TSource>, TSource)\n- uid: System.Linq.Enumerable.AsEnumerable``1(System.Collections.Generic.IEnumerable{``0})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: AsEnumerable<TSource>(IEnumerable<TSource>)\n  nameWithType: Enumerable.AsEnumerable<TSource>(IEnumerable<TSource>)\n  fullName: Enumerable.AsEnumerable<TSource>(IEnumerable<TSource>)\n- uid: System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Decimal})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Average(IEnumerable<Decimal>)\n  nameWithType: Enumerable.Average(IEnumerable<Decimal>)\n  fullName: Enumerable.Average(IEnumerable<Decimal>)\n- uid: System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Double})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Average(IEnumerable<Double>)\n  nameWithType: Enumerable.Average(IEnumerable<Double>)\n  fullName: Enumerable.Average(IEnumerable<Double>)\n- uid: System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Int32})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Average(IEnumerable<Int32>)\n  nameWithType: Enumerable.Average(IEnumerable<Int32>)\n  fullName: Enumerable.Average(IEnumerable<Int32>)\n- uid: System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Int64})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Average(IEnumerable<Int64>)\n  nameWithType: Enumerable.Average(IEnumerable<Int64>)\n  fullName: Enumerable.Average(IEnumerable<Int64>)\n- uid: System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Average(IEnumerable<Nullable<Decimal>>)\n  nameWithType: Enumerable.Average(IEnumerable<Nullable<Decimal>>)\n  fullName: Enumerable.Average(IEnumerable<Nullable<Decimal>>)\n- uid: System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Average(IEnumerable<Nullable<Double>>)\n  nameWithType: Enumerable.Average(IEnumerable<Nullable<Double>>)\n  fullName: Enumerable.Average(IEnumerable<Nullable<Double>>)\n- uid: System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Average(IEnumerable<Nullable<Int32>>)\n  nameWithType: Enumerable.Average(IEnumerable<Nullable<Int32>>)\n  fullName: Enumerable.Average(IEnumerable<Nullable<Int32>>)\n- uid: System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Average(IEnumerable<Nullable<Int64>>)\n  nameWithType: Enumerable.Average(IEnumerable<Nullable<Int64>>)\n  fullName: Enumerable.Average(IEnumerable<Nullable<Int64>>)\n- uid: System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Average(IEnumerable<Nullable<Single>>)\n  nameWithType: Enumerable.Average(IEnumerable<Nullable<Single>>)\n  fullName: Enumerable.Average(IEnumerable<Nullable<Single>>)\n- uid: System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Single})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Average(IEnumerable<Single>)\n  nameWithType: Enumerable.Average(IEnumerable<Single>)\n  fullName: Enumerable.Average(IEnumerable<Single>)\n- uid: System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Average<TSource>(IEnumerable<TSource>, Func<TSource,Decimal>)\n  nameWithType: Enumerable.Average<TSource>(IEnumerable<TSource>, Func<TSource,Decimal>)\n  fullName: Enumerable.Average<TSource>(IEnumerable<TSource>, Func<TSource,Decimal>)\n- uid: System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Average<TSource>(IEnumerable<TSource>, Func<TSource,Double>)\n  nameWithType: Enumerable.Average<TSource>(IEnumerable<TSource>, Func<TSource,Double>)\n  fullName: Enumerable.Average<TSource>(IEnumerable<TSource>, Func<TSource,Double>)\n- uid: System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Average<TSource>(IEnumerable<TSource>, Func<TSource,Int32>)\n  nameWithType: Enumerable.Average<TSource>(IEnumerable<TSource>, Func<TSource,Int32>)\n  fullName: Enumerable.Average<TSource>(IEnumerable<TSource>, Func<TSource,Int32>)\n- uid: System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Average<TSource>(IEnumerable<TSource>, Func<TSource,Int64>)\n  nameWithType: Enumerable.Average<TSource>(IEnumerable<TSource>, Func<TSource,Int64>)\n  fullName: Enumerable.Average<TSource>(IEnumerable<TSource>, Func<TSource,Int64>)\n- uid: System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Average<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Decimal>>)\n  nameWithType: Enumerable.Average<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Decimal>>)\n  fullName: Enumerable.Average<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Decimal>>)\n- uid: System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Average<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Double>>)\n  nameWithType: Enumerable.Average<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Double>>)\n  fullName: Enumerable.Average<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Double>>)\n- uid: System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Average<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Int32>>)\n  nameWithType: Enumerable.Average<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Int32>>)\n  fullName: Enumerable.Average<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Int32>>)\n- uid: System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Average<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Int64>>)\n  nameWithType: Enumerable.Average<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Int64>>)\n  fullName: Enumerable.Average<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Int64>>)\n- uid: System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Average<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Single>>)\n  nameWithType: Enumerable.Average<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Single>>)\n  fullName: Enumerable.Average<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Single>>)\n- uid: System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Average<TSource>(IEnumerable<TSource>, Func<TSource,Single>)\n  nameWithType: Enumerable.Average<TSource>(IEnumerable<TSource>, Func<TSource,Single>)\n  fullName: Enumerable.Average<TSource>(IEnumerable<TSource>, Func<TSource,Single>)\n- uid: System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Cast<TResult>(IEnumerable)\n  nameWithType: Enumerable.Cast<TResult>(IEnumerable)\n  fullName: Enumerable.Cast<TResult>(IEnumerable)\n- uid: System.Linq.Enumerable.Concat``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Concat<TSource>(IEnumerable<TSource>, IEnumerable<TSource>)\n  nameWithType: Enumerable.Concat<TSource>(IEnumerable<TSource>, IEnumerable<TSource>)\n  fullName: Enumerable.Concat<TSource>(IEnumerable<TSource>, IEnumerable<TSource>)\n- uid: System.Linq.Enumerable.Contains``1(System.Collections.Generic.IEnumerable{``0},``0)\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Contains<TSource>(IEnumerable<TSource>, TSource)\n  nameWithType: Enumerable.Contains<TSource>(IEnumerable<TSource>, TSource)\n  fullName: Enumerable.Contains<TSource>(IEnumerable<TSource>, TSource)\n- uid: System.Linq.Enumerable.Contains``1(System.Collections.Generic.IEnumerable{``0},``0,System.Collections.Generic.IEqualityComparer{``0})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Contains<TSource>(IEnumerable<TSource>, TSource, IEqualityComparer<TSource>)\n  nameWithType: Enumerable.Contains<TSource>(IEnumerable<TSource>, TSource, IEqualityComparer<TSource>)\n  fullName: Enumerable.Contains<TSource>(IEnumerable<TSource>, TSource, IEqualityComparer<TSource>)\n- uid: System.Linq.Enumerable.Count``1(System.Collections.Generic.IEnumerable{``0})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Count<TSource>(IEnumerable<TSource>)\n  nameWithType: Enumerable.Count<TSource>(IEnumerable<TSource>)\n  fullName: Enumerable.Count<TSource>(IEnumerable<TSource>)\n- uid: System.Linq.Enumerable.Count``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Count<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n  nameWithType: Enumerable.Count<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n  fullName: Enumerable.Count<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n- uid: System.Linq.Enumerable.DefaultIfEmpty``1(System.Collections.Generic.IEnumerable{``0})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: DefaultIfEmpty<TSource>(IEnumerable<TSource>)\n  nameWithType: Enumerable.DefaultIfEmpty<TSource>(IEnumerable<TSource>)\n  fullName: Enumerable.DefaultIfEmpty<TSource>(IEnumerable<TSource>)\n- uid: System.Linq.Enumerable.DefaultIfEmpty``1(System.Collections.Generic.IEnumerable{``0},``0)\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: DefaultIfEmpty<TSource>(IEnumerable<TSource>, TSource)\n  nameWithType: Enumerable.DefaultIfEmpty<TSource>(IEnumerable<TSource>, TSource)\n  fullName: Enumerable.DefaultIfEmpty<TSource>(IEnumerable<TSource>, TSource)\n- uid: System.Linq.Enumerable.Distinct``1(System.Collections.Generic.IEnumerable{``0})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Distinct<TSource>(IEnumerable<TSource>)\n  nameWithType: Enumerable.Distinct<TSource>(IEnumerable<TSource>)\n  fullName: Enumerable.Distinct<TSource>(IEnumerable<TSource>)\n- uid: System.Linq.Enumerable.Distinct``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Distinct<TSource>(IEnumerable<TSource>, IEqualityComparer<TSource>)\n  nameWithType: Enumerable.Distinct<TSource>(IEnumerable<TSource>, IEqualityComparer<TSource>)\n  fullName: Enumerable.Distinct<TSource>(IEnumerable<TSource>, IEqualityComparer<TSource>)\n- uid: System.Linq.Enumerable.ElementAt``1(System.Collections.Generic.IEnumerable{``0},System.Int32)\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: ElementAt<TSource>(IEnumerable<TSource>, Int32)\n  nameWithType: Enumerable.ElementAt<TSource>(IEnumerable<TSource>, Int32)\n  fullName: Enumerable.ElementAt<TSource>(IEnumerable<TSource>, Int32)\n- uid: System.Linq.Enumerable.ElementAtOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Int32)\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: ElementAtOrDefault<TSource>(IEnumerable<TSource>, Int32)\n  nameWithType: Enumerable.ElementAtOrDefault<TSource>(IEnumerable<TSource>, Int32)\n  fullName: Enumerable.ElementAtOrDefault<TSource>(IEnumerable<TSource>, Int32)\n- uid: System.Linq.Enumerable.Except``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Except<TSource>(IEnumerable<TSource>, IEnumerable<TSource>)\n  nameWithType: Enumerable.Except<TSource>(IEnumerable<TSource>, IEnumerable<TSource>)\n  fullName: Enumerable.Except<TSource>(IEnumerable<TSource>, IEnumerable<TSource>)\n- uid: System.Linq.Enumerable.Except``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Except<TSource>(IEnumerable<TSource>, IEnumerable<TSource>, IEqualityComparer<TSource>)\n  nameWithType: Enumerable.Except<TSource>(IEnumerable<TSource>, IEnumerable<TSource>, IEqualityComparer<TSource>)\n  fullName: Enumerable.Except<TSource>(IEnumerable<TSource>, IEnumerable<TSource>, IEqualityComparer<TSource>)\n- uid: System.Linq.Enumerable.First``1(System.Collections.Generic.IEnumerable{``0})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: First<TSource>(IEnumerable<TSource>)\n  nameWithType: Enumerable.First<TSource>(IEnumerable<TSource>)\n  fullName: Enumerable.First<TSource>(IEnumerable<TSource>)\n- uid: System.Linq.Enumerable.First``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: First<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n  nameWithType: Enumerable.First<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n  fullName: Enumerable.First<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n- uid: System.Linq.Enumerable.FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: FirstOrDefault<TSource>(IEnumerable<TSource>)\n  nameWithType: Enumerable.FirstOrDefault<TSource>(IEnumerable<TSource>)\n  fullName: Enumerable.FirstOrDefault<TSource>(IEnumerable<TSource>)\n- uid: System.Linq.Enumerable.FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: FirstOrDefault<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n  nameWithType: Enumerable.FirstOrDefault<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n  fullName: Enumerable.FirstOrDefault<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n- uid: System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: GroupBy<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>)\n  nameWithType: Enumerable.GroupBy<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>)\n  fullName: Enumerable.GroupBy<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>)\n- uid: System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: GroupBy<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>, IEqualityComparer<TKey>)\n  nameWithType: Enumerable.GroupBy<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>, IEqualityComparer<TKey>)\n  fullName: Enumerable.GroupBy<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>, IEqualityComparer<TKey>)\n- uid: System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: GroupBy<TSource,TKey,TElement>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TElement>)\n  nameWithType: Enumerable.GroupBy<TSource,TKey,TElement>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TElement>)\n  fullName: Enumerable.GroupBy<TSource,TKey,TElement>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TElement>)\n- uid: System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: GroupBy<TSource,TKey,TElement>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TElement>, IEqualityComparer<TKey>)\n  nameWithType: Enumerable.GroupBy<TSource,TKey,TElement>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TElement>, IEqualityComparer<TKey>)\n  fullName: Enumerable.GroupBy<TSource,TKey,TElement>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TElement>, IEqualityComparer<TKey>)\n- uid: System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: GroupBy<TSource,TKey,TResult>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TKey,IEnumerable<TSource>,TResult>)\n  nameWithType: Enumerable.GroupBy<TSource,TKey,TResult>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TKey,IEnumerable<TSource>,TResult>)\n  fullName: Enumerable.GroupBy<TSource,TKey,TResult>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TKey,IEnumerable<TSource>,TResult>)\n- uid: System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2},System.Collections.Generic.IEqualityComparer{``1})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: GroupBy<TSource,TKey,TResult>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TKey,IEnumerable<TSource>,TResult>, IEqualityComparer<TKey>)\n  nameWithType: Enumerable.GroupBy<TSource,TKey,TResult>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TKey,IEnumerable<TSource>,TResult>, IEqualityComparer<TKey>)\n  fullName: Enumerable.GroupBy<TSource,TKey,TResult>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TKey,IEnumerable<TSource>,TResult>, IEqualityComparer<TKey>)\n- uid: System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: GroupBy<TSource,TKey,TElement,TResult>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TElement>, Func<TKey,IEnumerable<TElement>,TResult>)\n  nameWithType: Enumerable.GroupBy<TSource,TKey,TElement,TResult>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TElement>, Func<TKey,IEnumerable<TElement>,TResult>)\n  fullName: Enumerable.GroupBy<TSource,TKey,TElement,TResult>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TElement>, Func<TKey,IEnumerable<TElement>,TResult>)\n- uid: System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3},System.Collections.Generic.IEqualityComparer{``1})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: GroupBy<TSource,TKey,TElement,TResult>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TElement>, Func<TKey,IEnumerable<TElement>,TResult>, IEqualityComparer<TKey>)\n  nameWithType: Enumerable.GroupBy<TSource,TKey,TElement,TResult>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TElement>, Func<TKey,IEnumerable<TElement>,TResult>, IEqualityComparer<TKey>)\n  fullName: Enumerable.GroupBy<TSource,TKey,TElement,TResult>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TElement>, Func<TKey,IEnumerable<TElement>,TResult>, IEqualityComparer<TKey>)\n- uid: System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: GroupJoin<TOuter,TInner,TKey,TResult>(IEnumerable<TOuter>, IEnumerable<TInner>, Func<TOuter,TKey>, Func<TInner,TKey>, Func<TOuter,IEnumerable<TInner>,TResult>)\n  nameWithType: Enumerable.GroupJoin<TOuter,TInner,TKey,TResult>(IEnumerable<TOuter>, IEnumerable<TInner>, Func<TOuter,TKey>, Func<TInner,TKey>, Func<TOuter,IEnumerable<TInner>,TResult>)\n  fullName: Enumerable.GroupJoin<TOuter,TInner,TKey,TResult>(IEnumerable<TOuter>, IEnumerable<TInner>, Func<TOuter,TKey>, Func<TInner,TKey>, Func<TOuter,IEnumerable<TInner>,TResult>)\n- uid: System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: GroupJoin<TOuter,TInner,TKey,TResult>(IEnumerable<TOuter>, IEnumerable<TInner>, Func<TOuter,TKey>, Func<TInner,TKey>, Func<TOuter,IEnumerable<TInner>,TResult>, IEqualityComparer<TKey>)\n  nameWithType: Enumerable.GroupJoin<TOuter,TInner,TKey,TResult>(IEnumerable<TOuter>, IEnumerable<TInner>, Func<TOuter,TKey>, Func<TInner,TKey>, Func<TOuter,IEnumerable<TInner>,TResult>, IEqualityComparer<TKey>)\n  fullName: Enumerable.GroupJoin<TOuter,TInner,TKey,TResult>(IEnumerable<TOuter>, IEnumerable<TInner>, Func<TOuter,TKey>, Func<TInner,TKey>, Func<TOuter,IEnumerable<TInner>,TResult>, IEqualityComparer<TKey>)\n- uid: System.Linq.Enumerable.Intersect``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Intersect<TSource>(IEnumerable<TSource>, IEnumerable<TSource>)\n  nameWithType: Enumerable.Intersect<TSource>(IEnumerable<TSource>, IEnumerable<TSource>)\n  fullName: Enumerable.Intersect<TSource>(IEnumerable<TSource>, IEnumerable<TSource>)\n- uid: System.Linq.Enumerable.Intersect``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Intersect<TSource>(IEnumerable<TSource>, IEnumerable<TSource>, IEqualityComparer<TSource>)\n  nameWithType: Enumerable.Intersect<TSource>(IEnumerable<TSource>, IEnumerable<TSource>, IEqualityComparer<TSource>)\n  fullName: Enumerable.Intersect<TSource>(IEnumerable<TSource>, IEnumerable<TSource>, IEqualityComparer<TSource>)\n- uid: System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Join<TOuter,TInner,TKey,TResult>(IEnumerable<TOuter>, IEnumerable<TInner>, Func<TOuter,TKey>, Func<TInner,TKey>, Func<TOuter,TInner,TResult>)\n  nameWithType: Enumerable.Join<TOuter,TInner,TKey,TResult>(IEnumerable<TOuter>, IEnumerable<TInner>, Func<TOuter,TKey>, Func<TInner,TKey>, Func<TOuter,TInner,TResult>)\n  fullName: Enumerable.Join<TOuter,TInner,TKey,TResult>(IEnumerable<TOuter>, IEnumerable<TInner>, Func<TOuter,TKey>, Func<TInner,TKey>, Func<TOuter,TInner,TResult>)\n- uid: System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Join<TOuter,TInner,TKey,TResult>(IEnumerable<TOuter>, IEnumerable<TInner>, Func<TOuter,TKey>, Func<TInner,TKey>, Func<TOuter,TInner,TResult>, IEqualityComparer<TKey>)\n  nameWithType: Enumerable.Join<TOuter,TInner,TKey,TResult>(IEnumerable<TOuter>, IEnumerable<TInner>, Func<TOuter,TKey>, Func<TInner,TKey>, Func<TOuter,TInner,TResult>, IEqualityComparer<TKey>)\n  fullName: Enumerable.Join<TOuter,TInner,TKey,TResult>(IEnumerable<TOuter>, IEnumerable<TInner>, Func<TOuter,TKey>, Func<TInner,TKey>, Func<TOuter,TInner,TResult>, IEqualityComparer<TKey>)\n- uid: System.Linq.Enumerable.Last``1(System.Collections.Generic.IEnumerable{``0})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Last<TSource>(IEnumerable<TSource>)\n  nameWithType: Enumerable.Last<TSource>(IEnumerable<TSource>)\n  fullName: Enumerable.Last<TSource>(IEnumerable<TSource>)\n- uid: System.Linq.Enumerable.Last``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Last<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n  nameWithType: Enumerable.Last<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n  fullName: Enumerable.Last<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n- uid: System.Linq.Enumerable.LastOrDefault``1(System.Collections.Generic.IEnumerable{``0})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: LastOrDefault<TSource>(IEnumerable<TSource>)\n  nameWithType: Enumerable.LastOrDefault<TSource>(IEnumerable<TSource>)\n  fullName: Enumerable.LastOrDefault<TSource>(IEnumerable<TSource>)\n- uid: System.Linq.Enumerable.LastOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: LastOrDefault<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n  nameWithType: Enumerable.LastOrDefault<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n  fullName: Enumerable.LastOrDefault<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n- uid: System.Linq.Enumerable.LongCount``1(System.Collections.Generic.IEnumerable{``0})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: LongCount<TSource>(IEnumerable<TSource>)\n  nameWithType: Enumerable.LongCount<TSource>(IEnumerable<TSource>)\n  fullName: Enumerable.LongCount<TSource>(IEnumerable<TSource>)\n- uid: System.Linq.Enumerable.LongCount``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: LongCount<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n  nameWithType: Enumerable.LongCount<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n  fullName: Enumerable.LongCount<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n- uid: System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Decimal})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Max(IEnumerable<Decimal>)\n  nameWithType: Enumerable.Max(IEnumerable<Decimal>)\n  fullName: Enumerable.Max(IEnumerable<Decimal>)\n- uid: System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Double})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Max(IEnumerable<Double>)\n  nameWithType: Enumerable.Max(IEnumerable<Double>)\n  fullName: Enumerable.Max(IEnumerable<Double>)\n- uid: System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Int32})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Max(IEnumerable<Int32>)\n  nameWithType: Enumerable.Max(IEnumerable<Int32>)\n  fullName: Enumerable.Max(IEnumerable<Int32>)\n- uid: System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Int64})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Max(IEnumerable<Int64>)\n  nameWithType: Enumerable.Max(IEnumerable<Int64>)\n  fullName: Enumerable.Max(IEnumerable<Int64>)\n- uid: System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Max(IEnumerable<Nullable<Decimal>>)\n  nameWithType: Enumerable.Max(IEnumerable<Nullable<Decimal>>)\n  fullName: Enumerable.Max(IEnumerable<Nullable<Decimal>>)\n- uid: System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Max(IEnumerable<Nullable<Double>>)\n  nameWithType: Enumerable.Max(IEnumerable<Nullable<Double>>)\n  fullName: Enumerable.Max(IEnumerable<Nullable<Double>>)\n- uid: System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Max(IEnumerable<Nullable<Int32>>)\n  nameWithType: Enumerable.Max(IEnumerable<Nullable<Int32>>)\n  fullName: Enumerable.Max(IEnumerable<Nullable<Int32>>)\n- uid: System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Max(IEnumerable<Nullable<Int64>>)\n  nameWithType: Enumerable.Max(IEnumerable<Nullable<Int64>>)\n  fullName: Enumerable.Max(IEnumerable<Nullable<Int64>>)\n- uid: System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Max(IEnumerable<Nullable<Single>>)\n  nameWithType: Enumerable.Max(IEnumerable<Nullable<Single>>)\n  fullName: Enumerable.Max(IEnumerable<Nullable<Single>>)\n- uid: System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Single})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Max(IEnumerable<Single>)\n  nameWithType: Enumerable.Max(IEnumerable<Single>)\n  fullName: Enumerable.Max(IEnumerable<Single>)\n- uid: System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Max<TSource>(IEnumerable<TSource>)\n  nameWithType: Enumerable.Max<TSource>(IEnumerable<TSource>)\n  fullName: Enumerable.Max<TSource>(IEnumerable<TSource>)\n- uid: System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Max<TSource>(IEnumerable<TSource>, Func<TSource,Decimal>)\n  nameWithType: Enumerable.Max<TSource>(IEnumerable<TSource>, Func<TSource,Decimal>)\n  fullName: Enumerable.Max<TSource>(IEnumerable<TSource>, Func<TSource,Decimal>)\n- uid: System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Max<TSource>(IEnumerable<TSource>, Func<TSource,Double>)\n  nameWithType: Enumerable.Max<TSource>(IEnumerable<TSource>, Func<TSource,Double>)\n  fullName: Enumerable.Max<TSource>(IEnumerable<TSource>, Func<TSource,Double>)\n- uid: System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Max<TSource>(IEnumerable<TSource>, Func<TSource,Int32>)\n  nameWithType: Enumerable.Max<TSource>(IEnumerable<TSource>, Func<TSource,Int32>)\n  fullName: Enumerable.Max<TSource>(IEnumerable<TSource>, Func<TSource,Int32>)\n- uid: System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Max<TSource>(IEnumerable<TSource>, Func<TSource,Int64>)\n  nameWithType: Enumerable.Max<TSource>(IEnumerable<TSource>, Func<TSource,Int64>)\n  fullName: Enumerable.Max<TSource>(IEnumerable<TSource>, Func<TSource,Int64>)\n- uid: System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Max<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Decimal>>)\n  nameWithType: Enumerable.Max<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Decimal>>)\n  fullName: Enumerable.Max<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Decimal>>)\n- uid: System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Max<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Double>>)\n  nameWithType: Enumerable.Max<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Double>>)\n  fullName: Enumerable.Max<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Double>>)\n- uid: System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Max<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Int32>>)\n  nameWithType: Enumerable.Max<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Int32>>)\n  fullName: Enumerable.Max<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Int32>>)\n- uid: System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Max<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Int64>>)\n  nameWithType: Enumerable.Max<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Int64>>)\n  fullName: Enumerable.Max<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Int64>>)\n- uid: System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Max<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Single>>)\n  nameWithType: Enumerable.Max<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Single>>)\n  fullName: Enumerable.Max<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Single>>)\n- uid: System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Max<TSource>(IEnumerable<TSource>, Func<TSource,Single>)\n  nameWithType: Enumerable.Max<TSource>(IEnumerable<TSource>, Func<TSource,Single>)\n  fullName: Enumerable.Max<TSource>(IEnumerable<TSource>, Func<TSource,Single>)\n- uid: System.Linq.Enumerable.Max``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Max<TSource,TResult>(IEnumerable<TSource>, Func<TSource,TResult>)\n  nameWithType: Enumerable.Max<TSource,TResult>(IEnumerable<TSource>, Func<TSource,TResult>)\n  fullName: Enumerable.Max<TSource,TResult>(IEnumerable<TSource>, Func<TSource,TResult>)\n- uid: System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Decimal})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Min(IEnumerable<Decimal>)\n  nameWithType: Enumerable.Min(IEnumerable<Decimal>)\n  fullName: Enumerable.Min(IEnumerable<Decimal>)\n- uid: System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Double})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Min(IEnumerable<Double>)\n  nameWithType: Enumerable.Min(IEnumerable<Double>)\n  fullName: Enumerable.Min(IEnumerable<Double>)\n- uid: System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Int32})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Min(IEnumerable<Int32>)\n  nameWithType: Enumerable.Min(IEnumerable<Int32>)\n  fullName: Enumerable.Min(IEnumerable<Int32>)\n- uid: System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Int64})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Min(IEnumerable<Int64>)\n  nameWithType: Enumerable.Min(IEnumerable<Int64>)\n  fullName: Enumerable.Min(IEnumerable<Int64>)\n- uid: System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Min(IEnumerable<Nullable<Decimal>>)\n  nameWithType: Enumerable.Min(IEnumerable<Nullable<Decimal>>)\n  fullName: Enumerable.Min(IEnumerable<Nullable<Decimal>>)\n- uid: System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Min(IEnumerable<Nullable<Double>>)\n  nameWithType: Enumerable.Min(IEnumerable<Nullable<Double>>)\n  fullName: Enumerable.Min(IEnumerable<Nullable<Double>>)\n- uid: System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Min(IEnumerable<Nullable<Int32>>)\n  nameWithType: Enumerable.Min(IEnumerable<Nullable<Int32>>)\n  fullName: Enumerable.Min(IEnumerable<Nullable<Int32>>)\n- uid: System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Min(IEnumerable<Nullable<Int64>>)\n  nameWithType: Enumerable.Min(IEnumerable<Nullable<Int64>>)\n  fullName: Enumerable.Min(IEnumerable<Nullable<Int64>>)\n- uid: System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Min(IEnumerable<Nullable<Single>>)\n  nameWithType: Enumerable.Min(IEnumerable<Nullable<Single>>)\n  fullName: Enumerable.Min(IEnumerable<Nullable<Single>>)\n- uid: System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Single})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Min(IEnumerable<Single>)\n  nameWithType: Enumerable.Min(IEnumerable<Single>)\n  fullName: Enumerable.Min(IEnumerable<Single>)\n- uid: System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Min<TSource>(IEnumerable<TSource>)\n  nameWithType: Enumerable.Min<TSource>(IEnumerable<TSource>)\n  fullName: Enumerable.Min<TSource>(IEnumerable<TSource>)\n- uid: System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Min<TSource>(IEnumerable<TSource>, Func<TSource,Decimal>)\n  nameWithType: Enumerable.Min<TSource>(IEnumerable<TSource>, Func<TSource,Decimal>)\n  fullName: Enumerable.Min<TSource>(IEnumerable<TSource>, Func<TSource,Decimal>)\n- uid: System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Min<TSource>(IEnumerable<TSource>, Func<TSource,Double>)\n  nameWithType: Enumerable.Min<TSource>(IEnumerable<TSource>, Func<TSource,Double>)\n  fullName: Enumerable.Min<TSource>(IEnumerable<TSource>, Func<TSource,Double>)\n- uid: System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Min<TSource>(IEnumerable<TSource>, Func<TSource,Int32>)\n  nameWithType: Enumerable.Min<TSource>(IEnumerable<TSource>, Func<TSource,Int32>)\n  fullName: Enumerable.Min<TSource>(IEnumerable<TSource>, Func<TSource,Int32>)\n- uid: System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Min<TSource>(IEnumerable<TSource>, Func<TSource,Int64>)\n  nameWithType: Enumerable.Min<TSource>(IEnumerable<TSource>, Func<TSource,Int64>)\n  fullName: Enumerable.Min<TSource>(IEnumerable<TSource>, Func<TSource,Int64>)\n- uid: System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Min<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Decimal>>)\n  nameWithType: Enumerable.Min<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Decimal>>)\n  fullName: Enumerable.Min<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Decimal>>)\n- uid: System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Min<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Double>>)\n  nameWithType: Enumerable.Min<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Double>>)\n  fullName: Enumerable.Min<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Double>>)\n- uid: System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Min<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Int32>>)\n  nameWithType: Enumerable.Min<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Int32>>)\n  fullName: Enumerable.Min<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Int32>>)\n- uid: System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Min<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Int64>>)\n  nameWithType: Enumerable.Min<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Int64>>)\n  fullName: Enumerable.Min<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Int64>>)\n- uid: System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Min<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Single>>)\n  nameWithType: Enumerable.Min<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Single>>)\n  fullName: Enumerable.Min<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Single>>)\n- uid: System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Min<TSource>(IEnumerable<TSource>, Func<TSource,Single>)\n  nameWithType: Enumerable.Min<TSource>(IEnumerable<TSource>, Func<TSource,Single>)\n  fullName: Enumerable.Min<TSource>(IEnumerable<TSource>, Func<TSource,Single>)\n- uid: System.Linq.Enumerable.Min``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Min<TSource,TResult>(IEnumerable<TSource>, Func<TSource,TResult>)\n  nameWithType: Enumerable.Min<TSource,TResult>(IEnumerable<TSource>, Func<TSource,TResult>)\n  fullName: Enumerable.Min<TSource,TResult>(IEnumerable<TSource>, Func<TSource,TResult>)\n- uid: System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: OfType<TResult>(IEnumerable)\n  nameWithType: Enumerable.OfType<TResult>(IEnumerable)\n  fullName: Enumerable.OfType<TResult>(IEnumerable)\n- uid: System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: OrderBy<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>)\n  nameWithType: Enumerable.OrderBy<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>)\n  fullName: Enumerable.OrderBy<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>)\n- uid: System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: OrderBy<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>, IComparer<TKey>)\n  nameWithType: Enumerable.OrderBy<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>, IComparer<TKey>)\n  fullName: Enumerable.OrderBy<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>, IComparer<TKey>)\n- uid: System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: OrderByDescending<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>)\n  nameWithType: Enumerable.OrderByDescending<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>)\n  fullName: Enumerable.OrderByDescending<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>)\n- uid: System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: OrderByDescending<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>, IComparer<TKey>)\n  nameWithType: Enumerable.OrderByDescending<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>, IComparer<TKey>)\n  fullName: Enumerable.OrderByDescending<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>, IComparer<TKey>)\n- uid: System.Linq.Enumerable.Prepend``1(System.Collections.Generic.IEnumerable{``0},``0)\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Prepend<TSource>(IEnumerable<TSource>, TSource)\n  nameWithType: Enumerable.Prepend<TSource>(IEnumerable<TSource>, TSource)\n  fullName: Enumerable.Prepend<TSource>(IEnumerable<TSource>, TSource)\n- uid: System.Linq.Enumerable.Reverse``1(System.Collections.Generic.IEnumerable{``0})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Reverse<TSource>(IEnumerable<TSource>)\n  nameWithType: Enumerable.Reverse<TSource>(IEnumerable<TSource>)\n  fullName: Enumerable.Reverse<TSource>(IEnumerable<TSource>)\n- uid: System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Select<TSource,TResult>(IEnumerable<TSource>, Func<TSource,TResult>)\n  nameWithType: Enumerable.Select<TSource,TResult>(IEnumerable<TSource>, Func<TSource,TResult>)\n  fullName: Enumerable.Select<TSource,TResult>(IEnumerable<TSource>, Func<TSource,TResult>)\n- uid: System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,``1})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Select<TSource,TResult>(IEnumerable<TSource>, Func<TSource,Int32,TResult>)\n  nameWithType: Enumerable.Select<TSource,TResult>(IEnumerable<TSource>, Func<TSource,Int32,TResult>)\n  fullName: Enumerable.Select<TSource,TResult>(IEnumerable<TSource>, Func<TSource,Int32,TResult>)\n- uid: System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: SelectMany<TSource,TResult>(IEnumerable<TSource>, Func<TSource,IEnumerable<TResult>>)\n  nameWithType: Enumerable.SelectMany<TSource,TResult>(IEnumerable<TSource>, Func<TSource,IEnumerable<TResult>>)\n  fullName: Enumerable.SelectMany<TSource,TResult>(IEnumerable<TSource>, Func<TSource,IEnumerable<TResult>>)\n- uid: System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: SelectMany<TSource,TResult>(IEnumerable<TSource>, Func<TSource,Int32,IEnumerable<TResult>>)\n  nameWithType: Enumerable.SelectMany<TSource,TResult>(IEnumerable<TSource>, Func<TSource,Int32,IEnumerable<TResult>>)\n  fullName: Enumerable.SelectMany<TSource,TResult>(IEnumerable<TSource>, Func<TSource,Int32,IEnumerable<TResult>>)\n- uid: System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: SelectMany<TSource,TCollection,TResult>(IEnumerable<TSource>, Func<TSource,IEnumerable<TCollection>>, Func<TSource,TCollection,TResult>)\n  nameWithType: Enumerable.SelectMany<TSource,TCollection,TResult>(IEnumerable<TSource>, Func<TSource,IEnumerable<TCollection>>, Func<TSource,TCollection,TResult>)\n  fullName: Enumerable.SelectMany<TSource,TCollection,TResult>(IEnumerable<TSource>, Func<TSource,IEnumerable<TCollection>>, Func<TSource,TCollection,TResult>)\n- uid: System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: SelectMany<TSource,TCollection,TResult>(IEnumerable<TSource>, Func<TSource,Int32,IEnumerable<TCollection>>, Func<TSource,TCollection,TResult>)\n  nameWithType: Enumerable.SelectMany<TSource,TCollection,TResult>(IEnumerable<TSource>, Func<TSource,Int32,IEnumerable<TCollection>>, Func<TSource,TCollection,TResult>)\n  fullName: Enumerable.SelectMany<TSource,TCollection,TResult>(IEnumerable<TSource>, Func<TSource,Int32,IEnumerable<TCollection>>, Func<TSource,TCollection,TResult>)\n- uid: System.Linq.Enumerable.SequenceEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: SequenceEqual<TSource>(IEnumerable<TSource>, IEnumerable<TSource>)\n  nameWithType: Enumerable.SequenceEqual<TSource>(IEnumerable<TSource>, IEnumerable<TSource>)\n  fullName: Enumerable.SequenceEqual<TSource>(IEnumerable<TSource>, IEnumerable<TSource>)\n- uid: System.Linq.Enumerable.SequenceEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: SequenceEqual<TSource>(IEnumerable<TSource>, IEnumerable<TSource>, IEqualityComparer<TSource>)\n  nameWithType: Enumerable.SequenceEqual<TSource>(IEnumerable<TSource>, IEnumerable<TSource>, IEqualityComparer<TSource>)\n  fullName: Enumerable.SequenceEqual<TSource>(IEnumerable<TSource>, IEnumerable<TSource>, IEqualityComparer<TSource>)\n- uid: System.Linq.Enumerable.Single``1(System.Collections.Generic.IEnumerable{``0})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Single<TSource>(IEnumerable<TSource>)\n  nameWithType: Enumerable.Single<TSource>(IEnumerable<TSource>)\n  fullName: Enumerable.Single<TSource>(IEnumerable<TSource>)\n- uid: System.Linq.Enumerable.Single``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Single<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n  nameWithType: Enumerable.Single<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n  fullName: Enumerable.Single<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n- uid: System.Linq.Enumerable.SingleOrDefault``1(System.Collections.Generic.IEnumerable{``0})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: SingleOrDefault<TSource>(IEnumerable<TSource>)\n  nameWithType: Enumerable.SingleOrDefault<TSource>(IEnumerable<TSource>)\n  fullName: Enumerable.SingleOrDefault<TSource>(IEnumerable<TSource>)\n- uid: System.Linq.Enumerable.SingleOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: SingleOrDefault<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n  nameWithType: Enumerable.SingleOrDefault<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n  fullName: Enumerable.SingleOrDefault<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n- uid: System.Linq.Enumerable.Skip``1(System.Collections.Generic.IEnumerable{``0},System.Int32)\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Skip<TSource>(IEnumerable<TSource>, Int32)\n  nameWithType: Enumerable.Skip<TSource>(IEnumerable<TSource>, Int32)\n  fullName: Enumerable.Skip<TSource>(IEnumerable<TSource>, Int32)\n- uid: System.Linq.Enumerable.SkipLast``1(System.Collections.Generic.IEnumerable{``0},System.Int32)\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: SkipLast<TSource>(IEnumerable<TSource>, Int32)\n  nameWithType: Enumerable.SkipLast<TSource>(IEnumerable<TSource>, Int32)\n  fullName: Enumerable.SkipLast<TSource>(IEnumerable<TSource>, Int32)\n- uid: System.Linq.Enumerable.SkipWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: SkipWhile<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n  nameWithType: Enumerable.SkipWhile<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n  fullName: Enumerable.SkipWhile<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n- uid: System.Linq.Enumerable.SkipWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: SkipWhile<TSource>(IEnumerable<TSource>, Func<TSource,Int32,Boolean>)\n  nameWithType: Enumerable.SkipWhile<TSource>(IEnumerable<TSource>, Func<TSource,Int32,Boolean>)\n  fullName: Enumerable.SkipWhile<TSource>(IEnumerable<TSource>, Func<TSource,Int32,Boolean>)\n- uid: System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Decimal})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Sum(IEnumerable<Decimal>)\n  nameWithType: Enumerable.Sum(IEnumerable<Decimal>)\n  fullName: Enumerable.Sum(IEnumerable<Decimal>)\n- uid: System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Double})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Sum(IEnumerable<Double>)\n  nameWithType: Enumerable.Sum(IEnumerable<Double>)\n  fullName: Enumerable.Sum(IEnumerable<Double>)\n- uid: System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Int32})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Sum(IEnumerable<Int32>)\n  nameWithType: Enumerable.Sum(IEnumerable<Int32>)\n  fullName: Enumerable.Sum(IEnumerable<Int32>)\n- uid: System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Int64})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Sum(IEnumerable<Int64>)\n  nameWithType: Enumerable.Sum(IEnumerable<Int64>)\n  fullName: Enumerable.Sum(IEnumerable<Int64>)\n- uid: System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Sum(IEnumerable<Nullable<Decimal>>)\n  nameWithType: Enumerable.Sum(IEnumerable<Nullable<Decimal>>)\n  fullName: Enumerable.Sum(IEnumerable<Nullable<Decimal>>)\n- uid: System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Sum(IEnumerable<Nullable<Double>>)\n  nameWithType: Enumerable.Sum(IEnumerable<Nullable<Double>>)\n  fullName: Enumerable.Sum(IEnumerable<Nullable<Double>>)\n- uid: System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Sum(IEnumerable<Nullable<Int32>>)\n  nameWithType: Enumerable.Sum(IEnumerable<Nullable<Int32>>)\n  fullName: Enumerable.Sum(IEnumerable<Nullable<Int32>>)\n- uid: System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Sum(IEnumerable<Nullable<Int64>>)\n  nameWithType: Enumerable.Sum(IEnumerable<Nullable<Int64>>)\n  fullName: Enumerable.Sum(IEnumerable<Nullable<Int64>>)\n- uid: System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Sum(IEnumerable<Nullable<Single>>)\n  nameWithType: Enumerable.Sum(IEnumerable<Nullable<Single>>)\n  fullName: Enumerable.Sum(IEnumerable<Nullable<Single>>)\n- uid: System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Single})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Sum(IEnumerable<Single>)\n  nameWithType: Enumerable.Sum(IEnumerable<Single>)\n  fullName: Enumerable.Sum(IEnumerable<Single>)\n- uid: System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Sum<TSource>(IEnumerable<TSource>, Func<TSource,Decimal>)\n  nameWithType: Enumerable.Sum<TSource>(IEnumerable<TSource>, Func<TSource,Decimal>)\n  fullName: Enumerable.Sum<TSource>(IEnumerable<TSource>, Func<TSource,Decimal>)\n- uid: System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Sum<TSource>(IEnumerable<TSource>, Func<TSource,Double>)\n  nameWithType: Enumerable.Sum<TSource>(IEnumerable<TSource>, Func<TSource,Double>)\n  fullName: Enumerable.Sum<TSource>(IEnumerable<TSource>, Func<TSource,Double>)\n- uid: System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Sum<TSource>(IEnumerable<TSource>, Func<TSource,Int32>)\n  nameWithType: Enumerable.Sum<TSource>(IEnumerable<TSource>, Func<TSource,Int32>)\n  fullName: Enumerable.Sum<TSource>(IEnumerable<TSource>, Func<TSource,Int32>)\n- uid: System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Sum<TSource>(IEnumerable<TSource>, Func<TSource,Int64>)\n  nameWithType: Enumerable.Sum<TSource>(IEnumerable<TSource>, Func<TSource,Int64>)\n  fullName: Enumerable.Sum<TSource>(IEnumerable<TSource>, Func<TSource,Int64>)\n- uid: System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Sum<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Decimal>>)\n  nameWithType: Enumerable.Sum<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Decimal>>)\n  fullName: Enumerable.Sum<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Decimal>>)\n- uid: System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Sum<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Double>>)\n  nameWithType: Enumerable.Sum<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Double>>)\n  fullName: Enumerable.Sum<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Double>>)\n- uid: System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Sum<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Int32>>)\n  nameWithType: Enumerable.Sum<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Int32>>)\n  fullName: Enumerable.Sum<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Int32>>)\n- uid: System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Sum<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Int64>>)\n  nameWithType: Enumerable.Sum<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Int64>>)\n  fullName: Enumerable.Sum<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Int64>>)\n- uid: System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Sum<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Single>>)\n  nameWithType: Enumerable.Sum<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Single>>)\n  fullName: Enumerable.Sum<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Single>>)\n- uid: System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Sum<TSource>(IEnumerable<TSource>, Func<TSource,Single>)\n  nameWithType: Enumerable.Sum<TSource>(IEnumerable<TSource>, Func<TSource,Single>)\n  fullName: Enumerable.Sum<TSource>(IEnumerable<TSource>, Func<TSource,Single>)\n- uid: System.Linq.Enumerable.Take``1(System.Collections.Generic.IEnumerable{``0},System.Int32)\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Take<TSource>(IEnumerable<TSource>, Int32)\n  nameWithType: Enumerable.Take<TSource>(IEnumerable<TSource>, Int32)\n  fullName: Enumerable.Take<TSource>(IEnumerable<TSource>, Int32)\n- uid: System.Linq.Enumerable.TakeLast``1(System.Collections.Generic.IEnumerable{``0},System.Int32)\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: TakeLast<TSource>(IEnumerable<TSource>, Int32)\n  nameWithType: Enumerable.TakeLast<TSource>(IEnumerable<TSource>, Int32)\n  fullName: Enumerable.TakeLast<TSource>(IEnumerable<TSource>, Int32)\n- uid: System.Linq.Enumerable.TakeWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: TakeWhile<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n  nameWithType: Enumerable.TakeWhile<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n  fullName: Enumerable.TakeWhile<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n- uid: System.Linq.Enumerable.TakeWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: TakeWhile<TSource>(IEnumerable<TSource>, Func<TSource,Int32,Boolean>)\n  nameWithType: Enumerable.TakeWhile<TSource>(IEnumerable<TSource>, Func<TSource,Int32,Boolean>)\n  fullName: Enumerable.TakeWhile<TSource>(IEnumerable<TSource>, Func<TSource,Int32,Boolean>)\n- uid: System.Linq.Enumerable.ToArray``1(System.Collections.Generic.IEnumerable{``0})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: ToArray<TSource>(IEnumerable<TSource>)\n  nameWithType: Enumerable.ToArray<TSource>(IEnumerable<TSource>)\n  fullName: Enumerable.ToArray<TSource>(IEnumerable<TSource>)\n- uid: System.Linq.Enumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: ToDictionary<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>)\n  nameWithType: Enumerable.ToDictionary<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>)\n  fullName: Enumerable.ToDictionary<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>)\n- uid: System.Linq.Enumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: ToDictionary<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>, IEqualityComparer<TKey>)\n  nameWithType: Enumerable.ToDictionary<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>, IEqualityComparer<TKey>)\n  fullName: Enumerable.ToDictionary<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>, IEqualityComparer<TKey>)\n- uid: System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: ToDictionary<TSource,TKey,TElement>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TElement>)\n  nameWithType: Enumerable.ToDictionary<TSource,TKey,TElement>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TElement>)\n  fullName: Enumerable.ToDictionary<TSource,TKey,TElement>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TElement>)\n- uid: System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: ToDictionary<TSource,TKey,TElement>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TElement>, IEqualityComparer<TKey>)\n  nameWithType: Enumerable.ToDictionary<TSource,TKey,TElement>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TElement>, IEqualityComparer<TKey>)\n  fullName: Enumerable.ToDictionary<TSource,TKey,TElement>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TElement>, IEqualityComparer<TKey>)\n- uid: System.Linq.Enumerable.ToHashSet``1(System.Collections.Generic.IEnumerable{``0})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: ToHashSet<TSource>(IEnumerable<TSource>)\n  nameWithType: Enumerable.ToHashSet<TSource>(IEnumerable<TSource>)\n  fullName: Enumerable.ToHashSet<TSource>(IEnumerable<TSource>)\n- uid: System.Linq.Enumerable.ToHashSet``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: ToHashSet<TSource>(IEnumerable<TSource>, IEqualityComparer<TSource>)\n  nameWithType: Enumerable.ToHashSet<TSource>(IEnumerable<TSource>, IEqualityComparer<TSource>)\n  fullName: Enumerable.ToHashSet<TSource>(IEnumerable<TSource>, IEqualityComparer<TSource>)\n- uid: System.Linq.Enumerable.ToList``1(System.Collections.Generic.IEnumerable{``0})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: ToList<TSource>(IEnumerable<TSource>)\n  nameWithType: Enumerable.ToList<TSource>(IEnumerable<TSource>)\n  fullName: Enumerable.ToList<TSource>(IEnumerable<TSource>)\n- uid: System.Linq.Enumerable.ToLookup``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: ToLookup<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>)\n  nameWithType: Enumerable.ToLookup<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>)\n  fullName: Enumerable.ToLookup<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>)\n- uid: System.Linq.Enumerable.ToLookup``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: ToLookup<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>, IEqualityComparer<TKey>)\n  nameWithType: Enumerable.ToLookup<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>, IEqualityComparer<TKey>)\n  fullName: Enumerable.ToLookup<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>, IEqualityComparer<TKey>)\n- uid: System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: ToLookup<TSource,TKey,TElement>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TElement>)\n  nameWithType: Enumerable.ToLookup<TSource,TKey,TElement>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TElement>)\n  fullName: Enumerable.ToLookup<TSource,TKey,TElement>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TElement>)\n- uid: System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: ToLookup<TSource,TKey,TElement>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TElement>, IEqualityComparer<TKey>)\n  nameWithType: Enumerable.ToLookup<TSource,TKey,TElement>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TElement>, IEqualityComparer<TKey>)\n  fullName: Enumerable.ToLookup<TSource,TKey,TElement>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TElement>, IEqualityComparer<TKey>)\n- uid: System.Linq.Enumerable.Union``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Union<TSource>(IEnumerable<TSource>, IEnumerable<TSource>)\n  nameWithType: Enumerable.Union<TSource>(IEnumerable<TSource>, IEnumerable<TSource>)\n  fullName: Enumerable.Union<TSource>(IEnumerable<TSource>, IEnumerable<TSource>)\n- uid: System.Linq.Enumerable.Union``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Union<TSource>(IEnumerable<TSource>, IEnumerable<TSource>, IEqualityComparer<TSource>)\n  nameWithType: Enumerable.Union<TSource>(IEnumerable<TSource>, IEnumerable<TSource>, IEqualityComparer<TSource>)\n  fullName: Enumerable.Union<TSource>(IEnumerable<TSource>, IEnumerable<TSource>, IEqualityComparer<TSource>)\n- uid: System.Linq.Enumerable.Where``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Where<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n  nameWithType: Enumerable.Where<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n  fullName: Enumerable.Where<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n- uid: System.Linq.Enumerable.Where``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Where<TSource>(IEnumerable<TSource>, Func<TSource,Int32,Boolean>)\n  nameWithType: Enumerable.Where<TSource>(IEnumerable<TSource>, Func<TSource,Int32,Boolean>)\n  fullName: Enumerable.Where<TSource>(IEnumerable<TSource>, Func<TSource,Int32,Boolean>)\n- uid: System.Linq.Enumerable.Zip``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,``2})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Zip<TFirst,TSecond,TResult>(IEnumerable<TFirst>, IEnumerable<TSecond>, Func<TFirst,TSecond,TResult>)\n  nameWithType: Enumerable.Zip<TFirst,TSecond,TResult>(IEnumerable<TFirst>, IEnumerable<TSecond>, Func<TFirst,TSecond,TResult>)\n  fullName: Enumerable.Zip<TFirst,TSecond,TResult>(IEnumerable<TFirst>, IEnumerable<TSecond>, Func<TFirst,TSecond,TResult>)\n- uid: System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)\n  parent: System.Linq.ParallelEnumerable\n  isExternal: false\n  name: AsParallel(IEnumerable)\n  nameWithType: ParallelEnumerable.AsParallel(IEnumerable)\n  fullName: ParallelEnumerable.AsParallel(IEnumerable)\n- uid: System.Linq.ParallelEnumerable.AsParallel``1(System.Collections.Generic.IEnumerable{``0})\n  parent: System.Linq.ParallelEnumerable\n  isExternal: false\n  name: AsParallel<TSource>(IEnumerable<TSource>)\n  nameWithType: ParallelEnumerable.AsParallel<TSource>(IEnumerable<TSource>)\n  fullName: ParallelEnumerable.AsParallel<TSource>(IEnumerable<TSource>)\n- uid: System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)\n  parent: System.Linq.Queryable\n  isExternal: false\n  name: AsQueryable(IEnumerable)\n  nameWithType: Queryable.AsQueryable(IEnumerable)\n  fullName: Queryable.AsQueryable(IEnumerable)\n- uid: System.Linq.Queryable.AsQueryable``1(System.Collections.Generic.IEnumerable{``0})\n  parent: System.Linq.Queryable\n  isExternal: false\n  name: AsQueryable<TElement>(IEnumerable<TElement>)\n  nameWithType: Queryable.AsQueryable<TElement>(IEnumerable<TElement>)\n  fullName: Queryable.AsQueryable<TElement>(IEnumerable<TElement>)\n- uid: System.SpanExtensions.AsSpan(System.String)\n  parent: System.SpanExtensions\n  isExternal: false\n  name: AsSpan(String)\n  nameWithType: SpanExtensions.AsSpan(String)\n  fullName: SpanExtensions.AsSpan(String)\n- uid: System.StringNormalizationExtensions.IsNormalized(System.String)\n  parent: System.StringNormalizationExtensions\n  isExternal: false\n  name: IsNormalized(String)\n  nameWithType: StringNormalizationExtensions.IsNormalized(String)\n  fullName: StringNormalizationExtensions.IsNormalized(String)\n- uid: System.StringNormalizationExtensions.IsNormalized(System.String,System.Text.NormalizationForm)\n  parent: System.StringNormalizationExtensions\n  isExternal: false\n  name: IsNormalized(String, NormalizationForm)\n  nameWithType: StringNormalizationExtensions.IsNormalized(String, NormalizationForm)\n  fullName: StringNormalizationExtensions.IsNormalized(String, NormalizationForm)\n- uid: System.StringNormalizationExtensions.Normalize(System.String)\n  parent: System.StringNormalizationExtensions\n  isExternal: false\n  name: Normalize(String)\n  nameWithType: StringNormalizationExtensions.Normalize(String)\n  fullName: StringNormalizationExtensions.Normalize(String)\n- uid: System.StringNormalizationExtensions.Normalize(System.String,System.Text.NormalizationForm)\n  parent: System.StringNormalizationExtensions\n  isExternal: false\n  name: Normalize(String, NormalizationForm)\n  nameWithType: StringNormalizationExtensions.Normalize(String, NormalizationForm)\n  fullName: StringNormalizationExtensions.Normalize(String, NormalizationForm)\n- uid: System.Xml.Linq.Extensions.Ancestors``1(System.Collections.Generic.IEnumerable{``0})\n  parent: System.Xml.Linq.Extensions\n  isExternal: false\n  name: Ancestors<T>(IEnumerable<T>)\n  nameWithType: Extensions.Ancestors<T>(IEnumerable<T>)\n  fullName: Extensions.Ancestors<T>(IEnumerable<T>)\n- uid: System.Xml.Linq.Extensions.Ancestors``1(System.Collections.Generic.IEnumerable{``0},System.Xml.Linq.XName)\n  parent: System.Xml.Linq.Extensions\n  isExternal: false\n  name: Ancestors<T>(IEnumerable<T>, XName)\n  nameWithType: Extensions.Ancestors<T>(IEnumerable<T>, XName)\n  fullName: Extensions.Ancestors<T>(IEnumerable<T>, XName)\n- uid: System.Xml.Linq.Extensions.AncestorsAndSelf(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement})\n  parent: System.Xml.Linq.Extensions\n  isExternal: false\n  name: AncestorsAndSelf(IEnumerable<XElement>)\n  nameWithType: Extensions.AncestorsAndSelf(IEnumerable<XElement>)\n  fullName: Extensions.AncestorsAndSelf(IEnumerable<XElement>)\n- uid: System.Xml.Linq.Extensions.AncestorsAndSelf(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement},System.Xml.Linq.XName)\n  parent: System.Xml.Linq.Extensions\n  isExternal: false\n  name: AncestorsAndSelf(IEnumerable<XElement>, XName)\n  nameWithType: Extensions.AncestorsAndSelf(IEnumerable<XElement>, XName)\n  fullName: Extensions.AncestorsAndSelf(IEnumerable<XElement>, XName)\n- uid: System.Xml.Linq.Extensions.Attributes(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement})\n  parent: System.Xml.Linq.Extensions\n  isExternal: false\n  name: Attributes(IEnumerable<XElement>)\n  nameWithType: Extensions.Attributes(IEnumerable<XElement>)\n  fullName: Extensions.Attributes(IEnumerable<XElement>)\n- uid: System.Xml.Linq.Extensions.Attributes(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement},System.Xml.Linq.XName)\n  parent: System.Xml.Linq.Extensions\n  isExternal: false\n  name: Attributes(IEnumerable<XElement>, XName)\n  nameWithType: Extensions.Attributes(IEnumerable<XElement>, XName)\n  fullName: Extensions.Attributes(IEnumerable<XElement>, XName)\n- uid: System.Xml.Linq.Extensions.DescendantNodes``1(System.Collections.Generic.IEnumerable{``0})\n  parent: System.Xml.Linq.Extensions\n  isExternal: false\n  name: DescendantNodes<T>(IEnumerable<T>)\n  nameWithType: Extensions.DescendantNodes<T>(IEnumerable<T>)\n  fullName: Extensions.DescendantNodes<T>(IEnumerable<T>)\n- uid: System.Xml.Linq.Extensions.DescendantNodesAndSelf(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement})\n  parent: System.Xml.Linq.Extensions\n  isExternal: false\n  name: DescendantNodesAndSelf(IEnumerable<XElement>)\n  nameWithType: Extensions.DescendantNodesAndSelf(IEnumerable<XElement>)\n  fullName: Extensions.DescendantNodesAndSelf(IEnumerable<XElement>)\n- uid: System.Xml.Linq.Extensions.Descendants``1(System.Collections.Generic.IEnumerable{``0})\n  parent: System.Xml.Linq.Extensions\n  isExternal: false\n  name: Descendants<T>(IEnumerable<T>)\n  nameWithType: Extensions.Descendants<T>(IEnumerable<T>)\n  fullName: Extensions.Descendants<T>(IEnumerable<T>)\n- uid: System.Xml.Linq.Extensions.Descendants``1(System.Collections.Generic.IEnumerable{``0},System.Xml.Linq.XName)\n  parent: System.Xml.Linq.Extensions\n  isExternal: false\n  name: Descendants<T>(IEnumerable<T>, XName)\n  nameWithType: Extensions.Descendants<T>(IEnumerable<T>, XName)\n  fullName: Extensions.Descendants<T>(IEnumerable<T>, XName)\n- uid: System.Xml.Linq.Extensions.DescendantsAndSelf(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement})\n  parent: System.Xml.Linq.Extensions\n  isExternal: false\n  name: DescendantsAndSelf(IEnumerable<XElement>)\n  nameWithType: Extensions.DescendantsAndSelf(IEnumerable<XElement>)\n  fullName: Extensions.DescendantsAndSelf(IEnumerable<XElement>)\n- uid: System.Xml.Linq.Extensions.DescendantsAndSelf(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement},System.Xml.Linq.XName)\n  parent: System.Xml.Linq.Extensions\n  isExternal: false\n  name: DescendantsAndSelf(IEnumerable<XElement>, XName)\n  nameWithType: Extensions.DescendantsAndSelf(IEnumerable<XElement>, XName)\n  fullName: Extensions.DescendantsAndSelf(IEnumerable<XElement>, XName)\n- uid: System.Xml.Linq.Extensions.Elements``1(System.Collections.Generic.IEnumerable{``0})\n  parent: System.Xml.Linq.Extensions\n  isExternal: false\n  name: Elements<T>(IEnumerable<T>)\n  nameWithType: Extensions.Elements<T>(IEnumerable<T>)\n  fullName: Extensions.Elements<T>(IEnumerable<T>)\n- uid: System.Xml.Linq.Extensions.Elements``1(System.Collections.Generic.IEnumerable{``0},System.Xml.Linq.XName)\n  parent: System.Xml.Linq.Extensions\n  isExternal: false\n  name: Elements<T>(IEnumerable<T>, XName)\n  nameWithType: Extensions.Elements<T>(IEnumerable<T>, XName)\n  fullName: Extensions.Elements<T>(IEnumerable<T>, XName)\n- uid: System.Xml.Linq.Extensions.InDocumentOrder``1(System.Collections.Generic.IEnumerable{``0})\n  parent: System.Xml.Linq.Extensions\n  isExternal: false\n  name: InDocumentOrder<T>(IEnumerable<T>)\n  nameWithType: Extensions.InDocumentOrder<T>(IEnumerable<T>)\n  fullName: Extensions.InDocumentOrder<T>(IEnumerable<T>)\n- uid: System.Xml.Linq.Extensions.Nodes``1(System.Collections.Generic.IEnumerable{``0})\n  parent: System.Xml.Linq.Extensions\n  isExternal: false\n  name: Nodes<T>(IEnumerable<T>)\n  nameWithType: Extensions.Nodes<T>(IEnumerable<T>)\n  fullName: Extensions.Nodes<T>(IEnumerable<T>)\n- uid: System.Xml.Linq.Extensions.Remove(System.Collections.Generic.IEnumerable{System.Xml.Linq.XAttribute})\n  parent: System.Xml.Linq.Extensions\n  isExternal: false\n  name: Remove(IEnumerable<XAttribute>)\n  nameWithType: Extensions.Remove(IEnumerable<XAttribute>)\n  fullName: Extensions.Remove(IEnumerable<XAttribute>)\n- uid: System.Xml.Linq.Extensions.Remove``1(System.Collections.Generic.IEnumerable{``0})\n  parent: System.Xml.Linq.Extensions\n  isExternal: false\n  name: Remove<T>(IEnumerable<T>)\n  nameWithType: Extensions.Remove<T>(IEnumerable<T>)\n  fullName: Extensions.Remove<T>(IEnumerable<T>)\n- uid: System.Collections.Generic.IEnumerable{System.Char}\n  parent: System.Collections.Generic\n  isExternal: false\n  name: IEnumerable<Char>\n  nameWithType: IEnumerable<Char>\n  fullName: System.Collections.Generic.IEnumerable<System.Char>\n  spec.csharp:\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    nameWithType: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Char\n    name: Char\n    nameWithType: Char\n    fullName: System.Char\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.ICloneable\n  parent: System\n  isExternal: false\n  name: ICloneable\n  nameWithType: ICloneable\n  fullName: System.ICloneable\n- uid: System.IComparable\n  parent: System\n  isExternal: false\n  name: IComparable\n  nameWithType: IComparable\n  fullName: System.IComparable\n- uid: System.IComparable`1\n  name: IComparable<T>\n  nameWithType: IComparable<T>\n  fullName: System.IComparable<T>\n- uid: System.IComparable{System.String}\n  parent: System\n  isExternal: false\n  name: IComparable<String>\n  nameWithType: IComparable<String>\n  fullName: System.IComparable<System.String>\n  spec.csharp:\n  - uid: System.IComparable`1\n    name: IComparable\n    nameWithType: IComparable\n    fullName: System.IComparable\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.String\n    name: String\n    nameWithType: String\n    fullName: System.String\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.IConvertible\n  parent: System\n  isExternal: false\n  name: IConvertible\n  nameWithType: IConvertible\n  fullName: System.IConvertible\n- uid: System.IEquatable`1\n  name: IEquatable<T>\n  nameWithType: IEquatable<T>\n  fullName: System.IEquatable<T>\n- uid: System.IEquatable{System.String}\n  parent: System\n  isExternal: false\n  name: IEquatable<String>\n  nameWithType: IEquatable<String>\n  fullName: System.IEquatable<System.String>\n  spec.csharp:\n  - uid: System.IEquatable`1\n    name: IEquatable\n    nameWithType: IEquatable\n    fullName: System.IEquatable\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.String\n    name: String\n    nameWithType: String\n    fullName: System.String\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n"}