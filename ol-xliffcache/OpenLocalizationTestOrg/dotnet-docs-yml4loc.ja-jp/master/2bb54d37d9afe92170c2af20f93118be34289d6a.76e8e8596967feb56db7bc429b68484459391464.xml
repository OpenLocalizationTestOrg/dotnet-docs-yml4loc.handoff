{"nodes":[{"content":"Provides support for lazy initialization.","nodes":[{"pos":[0,41],"content":"Provides support for lazy initialization.","nodes":[{"content":"Provides support for lazy initialization.","pos":[0,41]}]}],"pos":[720,762],"yaml":true},{"content":"Use lazy initialization to defer the creation of a large or resource-intensive object, or the execution of a resource-intensive task, particularly when such creation or execution might not occur during the lifetime of the program.  \n  \n To prepare for lazy initialization, you create an instance of <xref:System.Lazy%601>. The type argument of the <xref:System.Lazy%601> object that you create specifies the type of the object that you want to initialize lazily. The constructor that you use to create the <xref:System.Lazy%601> object determines the characteristics of the initialization. Lazy initialization occurs the first time the <xref:System.Lazy%601.Value%2A?displayProperty=fullName> property is accessed.  \n  \n In most cases, choosing a constructor depends on your answers to two questions:  \n  \n-   Will the lazily initialized object be accessed from more than one thread? If so, the <xref:System.Lazy%601> object might create it on any thread. You can use one of the simple constructors whose default behavior is to create a thread-safe <xref:System.Lazy%601> object, so that only one instance of the lazily instantiated object is created no matter how many threads try to access it. To create a <xref:System.Lazy%601> object that is not thread safe, you must use a constructor that enables you to specify no thread safety.  \n  \n    > [!CAUTION]\n    >  Making the <xref:System.Lazy%601> object thread safe does not protect the lazily initialized object. If multiple threads can access the lazily initialized object, you must make its properties and methods safe for multithreaded access.  \n  \n-   Does lazy initialization require a lot of code, or does the lazily initialized object have a default constructor that does everything you need and doesn't throw exceptions? If you need to write initialization code or if exceptions need to be handled, use one of the constructors that takes a factory method. Write your initialization code in the factory method.  \n  \n The following table shows which constructor to choose, based on these two factors:  \n  \n|Object will be accessed by|If no initialization code is required (default constructor), use|If initialization code is required, use|  \n|--------------------------------|------------------------------------------------------------------------|---------------------------------------------|  \n|Multiple threads|<xref:System.Lazy%601.%23ctor>|<xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%29>|  \n|One thread|<xref:System.Lazy%601.%23ctor%28System.Boolean%29> with `isThreadSafe` set to `false`.|<xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Boolean%29> with `isThreadSafe` set to `false`.|  \n  \n You can use a lambda expression to specify the factory method. This keeps all the initialization code in one place. The lambda expression captures the context, including any arguments you pass to the lazily initialized object's constructor.  \n  \n **Exception caching** When you use factory methods, exceptions are cached. That is, if the factory method throws an exception the first time a thread tries to access the <xref:System.Lazy%601.Value%2A> property of the <xref:System.Lazy%601> object, the same exception is thrown on every subsequent attempt. This ensures that every call to the <xref:System.Lazy%601.Value%2A> property produces the same result and avoids subtle errors that might arise if different threads get different results. The <xref:System.Lazy%601> stands in for an actual `T` that otherwise would have been initialized at some earlier point, usually during startup. A failure at that earlier point is usually fatal. If there is a potential for a recoverable failure, we recommend that you build the retry logic into the initialization routine (in this case, the factory method), just as you would if you werenâ€™t using lazy initialization.  \n  \n **Alternative to locking** In certain situations, you might want to avoid the overhead of the <xref:System.Lazy%601> object's default locking behavior. In rare situations, there might be a potential for deadlocks. In such cases, you can use the <xref:System.Lazy%601.%23ctor%28System.Threading.LazyThreadSafetyMode%29> or <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29> constructor, and specify <xref:System.Threading.LazyThreadSafetyMode?displayProperty=fullName>. This enables the <xref:System.Lazy%601> object to create a copy of the lazily initialized object on each of several threads if the threads call the <xref:System.Lazy%601.Value%2A> property simultaneously. The <xref:System.Lazy%601> object ensures that all threads use the same instance of the lazily initialized object and discards the instances that are not used. Thus, the cost of reducing the locking overhead is that your program might sometimes create and discard extra copies of an expensive object. In most cases, this is unlikely. The examples for the <xref:System.Lazy%601.%23ctor%28System.Threading.LazyThreadSafetyMode%29> and <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29> constructors demonstrate this behavior.  \n  \n> [!IMPORTANT]\n>  When you specify <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly>, exceptions are never cached, even if you specify a factory method.  \n  \n **Equivalent constructors** In addition to enabling the use of <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly>, the <xref:System.Lazy%601.%23ctor%28System.Threading.LazyThreadSafetyMode%29> and <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29> constructors can duplicate the functionality of the other constructors. The following table shows the parameter values that produce equivalent behavior.  \n  \n|To create a <xref:System.Lazy%601> object that is|For constructors that have a `LazyThreadSafetyMode` `mode` parameter, set `mode` to|For constructors that have a Boolean `isThreadSafe` parameter, set `isThreadSafe` to|For constructors with no thread safety parameters|  \n|-------------------------------------------------------------------------------------------------------------------------------------------------------|-----------------------------------------------------------------------------------------|------------------------------------------------------------------------------------------|-------------------------------------------------------|  \n|Fully thread safe; uses locking to ensure that only one thread initializes the value.|<xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication>|`true`|All such constructors are fully thread safe.|  \n|Not thread safe.|<xref:System.Threading.LazyThreadSafetyMode.None>|`false`|Not applicable.|  \n|Fully thread safe; threads race to initialize the value.|<xref:System.Threading.LazyThreadSafetyMode.PublicationOnly>|Not applicable.|Not applicable.|  \n  \n **Other capabilities** For information about the use of <xref:System.Lazy%601> with thread-static fields, or as the backing store for properties, see [Lazy Initialization](~/docs/framework/performance/lazy-initialization.md).","nodes":[{"pos":[0,230],"content":"Use lazy initialization to defer the creation of a large or resource-intensive object, or the execution of a resource-intensive task, particularly when such creation or execution might not occur during the lifetime of the program.","nodes":[{"content":"Use lazy initialization to defer the creation of a large or resource-intensive object, or the execution of a resource-intensive task, particularly when such creation or execution might not occur during the lifetime of the program.","pos":[0,230]}]},{"pos":[237,714],"content":"To prepare for lazy initialization, you create an instance of <xref:System.Lazy%601>. The type argument of the <xref:System.Lazy%601> object that you create specifies the type of the object that you want to initialize lazily. The constructor that you use to create the <xref:System.Lazy%601> object determines the characteristics of the initialization. Lazy initialization occurs the first time the <xref:System.Lazy%601.Value%2A?displayProperty=fullName> property is accessed.","nodes":[{"content":"To prepare for lazy initialization, you create an instance of <xref:System.Lazy%601>. The type argument of the <xref:System.Lazy%601> object that you create specifies the type of the object that you want to initialize lazily. The constructor that you use to create the <xref:System.Lazy%601> object determines the characteristics of the initialization. Lazy initialization occurs the first time the <xref:System.Lazy%601.Value%2A?displayProperty=fullName> property is accessed.","pos":[0,477],"nodes":[{"content":"To prepare for lazy initialization, you create an instance of <ph id=\"ph1\">&lt;xref:System.Lazy%601&gt;</ph>.","pos":[0,85],"source":"To prepare for lazy initialization, you create an instance of <xref:System.Lazy%601>."},{"content":"The type argument of the <ph id=\"ph1\">&lt;xref:System.Lazy%601&gt;</ph> object that you create specifies the type of the object that you want to initialize lazily.","pos":[86,225],"source":" The type argument of the <xref:System.Lazy%601> object that you create specifies the type of the object that you want to initialize lazily."},{"content":"The constructor that you use to create the <ph id=\"ph1\">&lt;xref:System.Lazy%601&gt;</ph> object determines the characteristics of the initialization.","pos":[226,352],"source":" The constructor that you use to create the <xref:System.Lazy%601> object determines the characteristics of the initialization."},{"content":"Lazy initialization occurs the first time the <ph id=\"ph1\">&lt;xref:System.Lazy%601.Value%2A?displayProperty=fullName&gt;</ph> property is accessed.","pos":[353,477],"source":" Lazy initialization occurs the first time the <xref:System.Lazy%601.Value%2A?displayProperty=fullName> property is accessed."}]}]},{"pos":[721,800],"content":"In most cases, choosing a constructor depends on your answers to two questions:","nodes":[{"content":"In most cases, choosing a constructor depends on your answers to two questions:","pos":[0,79]}]},{"pos":[810,1335],"content":"Will the lazily initialized object be accessed from more than one thread? If so, the <xref:System.Lazy%601> object might create it on any thread. You can use one of the simple constructors whose default behavior is to create a thread-safe <xref:System.Lazy%601> object, so that only one instance of the lazily instantiated object is created no matter how many threads try to access it. To create a <xref:System.Lazy%601> object that is not thread safe, you must use a constructor that enables you to specify no thread safety.","nodes":[{"content":"Will the lazily initialized object be accessed from more than one thread? If so, the <xref:System.Lazy%601> object might create it on any thread. You can use one of the simple constructors whose default behavior is to create a thread-safe <xref:System.Lazy%601> object, so that only one instance of the lazily instantiated object is created no matter how many threads try to access it. To create a <xref:System.Lazy%601> object that is not thread safe, you must use a constructor that enables you to specify no thread safety.","pos":[0,525],"nodes":[{"content":"Will the lazily initialized object be accessed from more than one thread?","pos":[0,73]},{"content":"If so, the <ph id=\"ph1\">&lt;xref:System.Lazy%601&gt;</ph> object might create it on any thread.","pos":[74,145],"source":" If so, the <xref:System.Lazy%601> object might create it on any thread."},{"content":"You can use one of the simple constructors whose default behavior is to create a thread-safe <ph id=\"ph1\">&lt;xref:System.Lazy%601&gt;</ph> object, so that only one instance of the lazily instantiated object is created no matter how many threads try to access it.","pos":[146,385],"source":" You can use one of the simple constructors whose default behavior is to create a thread-safe <xref:System.Lazy%601> object, so that only one instance of the lazily instantiated object is created no matter how many threads try to access it."},{"content":"To create a <ph id=\"ph1\">&lt;xref:System.Lazy%601&gt;</ph> object that is not thread safe, you must use a constructor that enables you to specify no thread safety.","pos":[386,525],"source":" To create a <xref:System.Lazy%601> object that is not thread safe, you must use a constructor that enables you to specify no thread safety."}]}]},{"pos":[1347,1599],"content":"[!CAUTION]\nMaking the <xref:System.Lazy%601> object thread safe does not protect the lazily initialized object. If multiple threads can access the lazily initialized object, you must make its properties and methods safe for multithreaded access.","leadings":["","    >  "],"nodes":[{"content":"Making the <xref:System.Lazy%601> object thread safe does not protect the lazily initialized object. If multiple threads can access the lazily initialized object, you must make its properties and methods safe for multithreaded access.","pos":[11,245],"nodes":[{"content":"Making the <ph id=\"ph1\">&lt;xref:System.Lazy%601&gt;</ph> object thread safe does not protect the lazily initialized object.","pos":[0,100],"source":"Making the <xref:System.Lazy%601> object thread safe does not protect the lazily initialized object."},{"content":"If multiple threads can access the lazily initialized object, you must make its properties and methods safe for multithreaded access.","pos":[101,234]}]}]},{"pos":[1609,1970],"content":"Does lazy initialization require a lot of code, or does the lazily initialized object have a default constructor that does everything you need and doesn't throw exceptions? If you need to write initialization code or if exceptions need to be handled, use one of the constructors that takes a factory method. Write your initialization code in the factory method.","nodes":[{"content":"Does lazy initialization require a lot of code, or does the lazily initialized object have a default constructor that does everything you need and doesn't throw exceptions? If you need to write initialization code or if exceptions need to be handled, use one of the constructors that takes a factory method. Write your initialization code in the factory method.","pos":[0,361],"nodes":[{"content":"Does lazy initialization require a lot of code, or does the lazily initialized object have a default constructor that does everything you need and doesn't throw exceptions?","pos":[0,172]},{"content":"If you need to write initialization code or if exceptions need to be handled, use one of the constructors that takes a factory method.","pos":[173,307]},{"content":"Write your initialization code in the factory method.","pos":[308,361]}]}]},{"pos":[1977,2059],"content":"The following table shows which constructor to choose, based on these two factors:","nodes":[{"content":"The following table shows which constructor to choose, based on these two factors:","pos":[0,82]}]},{"pos":[2066,2092],"content":"Object will be accessed by","nodes":[{"content":"Object will be accessed by","pos":[0,26]}]},{"pos":[2093,2157],"content":"If no initialization code is required (default constructor), use","nodes":[{"content":"If no initialization code is required (default constructor), use","pos":[0,64]}]},{"pos":[2158,2197],"content":"If initialization code is required, use","nodes":[{"content":"If initialization code is required, use","pos":[0,39]}]},{"pos":[2358,2374],"content":"Multiple threads","nodes":[{"content":"Multiple threads","pos":[0,16]}]},{"pos":[2375,2405],"content":"<xref:System.Lazy%601.%23ctor>","nodes":[]},{"pos":[2406,2463],"content":"<xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%29>","nodes":[]},{"pos":[2468,2478],"content":"One thread","nodes":[{"content":"One thread","pos":[0,10]}]},{"pos":[2479,2565],"content":"<ph id=\"ph1\">&lt;xref:System.Lazy%601.%23ctor%28System.Boolean%29&gt;</ph> with <ph id=\"ph2\">`isThreadSafe`</ph> set to <ph id=\"ph3\">`false`</ph>.","source":"<xref:System.Lazy%601.%23ctor%28System.Boolean%29> with `isThreadSafe` set to `false`."},{"pos":[2566,2676],"content":"<ph id=\"ph1\">&lt;xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Boolean%29&gt;</ph> with <ph id=\"ph2\">`isThreadSafe`</ph> set to <ph id=\"ph3\">`false`</ph>.","source":"<xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Boolean%29> with `isThreadSafe` set to `false`."},{"pos":[2684,2924],"content":"You can use a lambda expression to specify the factory method. This keeps all the initialization code in one place. The lambda expression captures the context, including any arguments you pass to the lazily initialized object's constructor.","nodes":[{"content":"You can use a lambda expression to specify the factory method. This keeps all the initialization code in one place. The lambda expression captures the context, including any arguments you pass to the lazily initialized object's constructor.","pos":[0,240],"nodes":[{"content":"You can use a lambda expression to specify the factory method.","pos":[0,62]},{"content":"This keeps all the initialization code in one place.","pos":[63,115]},{"content":"The lambda expression captures the context, including any arguments you pass to the lazily initialized object's constructor.","pos":[116,240]}]}]},{"pos":[2931,3843],"content":"**Exception caching** When you use factory methods, exceptions are cached. That is, if the factory method throws an exception the first time a thread tries to access the <xref:System.Lazy%601.Value%2A> property of the <xref:System.Lazy%601> object, the same exception is thrown on every subsequent attempt. This ensures that every call to the <xref:System.Lazy%601.Value%2A> property produces the same result and avoids subtle errors that might arise if different threads get different results. The <xref:System.Lazy%601> stands in for an actual `T` that otherwise would have been initialized at some earlier point, usually during startup. A failure at that earlier point is usually fatal. If there is a potential for a recoverable failure, we recommend that you build the retry logic into the initialization routine (in this case, the factory method), just as you would if you werenâ€™t using lazy initialization.","nodes":[{"content":"<bpt id=\"p1\">**</bpt>Exception caching<ept id=\"p1\">**</ept> When you use factory methods, exceptions are cached.","pos":[0,74],"source":"**Exception caching** When you use factory methods, exceptions are cached."},{"content":"That is, if the factory method throws an exception the first time a thread tries to access the <ph id=\"ph1\">&lt;xref:System.Lazy%601.Value%2A&gt;</ph> property of the <ph id=\"ph2\">&lt;xref:System.Lazy%601&gt;</ph> object, the same exception is thrown on every subsequent attempt.","pos":[75,306],"source":" That is, if the factory method throws an exception the first time a thread tries to access the <xref:System.Lazy%601.Value%2A> property of the <xref:System.Lazy%601> object, the same exception is thrown on every subsequent attempt."},{"content":"This ensures that every call to the <ph id=\"ph1\">&lt;xref:System.Lazy%601.Value%2A&gt;</ph> property produces the same result and avoids subtle errors that might arise if different threads get different results.","pos":[307,494],"source":" This ensures that every call to the <xref:System.Lazy%601.Value%2A> property produces the same result and avoids subtle errors that might arise if different threads get different results."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Lazy%601&gt;</ph> stands in for an actual <ph id=\"ph2\">`T`</ph> that otherwise would have been initialized at some earlier point, usually during startup.","pos":[495,639],"source":" The <xref:System.Lazy%601> stands in for an actual `T` that otherwise would have been initialized at some earlier point, usually during startup."},{"content":"A failure at that earlier point is usually fatal.","pos":[640,689]},{"content":"If there is a potential for a recoverable failure, we recommend that you build the retry logic into the initialization routine (in this case, the factory method), just as you would if you werenâ€™t using lazy initialization.","pos":[690,912]}]},{"pos":[3850,5141],"content":"**Alternative to locking** In certain situations, you might want to avoid the overhead of the <xref:System.Lazy%601> object's default locking behavior. In rare situations, there might be a potential for deadlocks. In such cases, you can use the <xref:System.Lazy%601.%23ctor%28System.Threading.LazyThreadSafetyMode%29> or <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29> constructor, and specify <xref:System.Threading.LazyThreadSafetyMode?displayProperty=fullName>. This enables the <xref:System.Lazy%601> object to create a copy of the lazily initialized object on each of several threads if the threads call the <xref:System.Lazy%601.Value%2A> property simultaneously. The <xref:System.Lazy%601> object ensures that all threads use the same instance of the lazily initialized object and discards the instances that are not used. Thus, the cost of reducing the locking overhead is that your program might sometimes create and discard extra copies of an expensive object. In most cases, this is unlikely. The examples for the <xref:System.Lazy%601.%23ctor%28System.Threading.LazyThreadSafetyMode%29> and <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29> constructors demonstrate this behavior.","nodes":[{"content":"<bpt id=\"p1\">**</bpt>Alternative to locking<ept id=\"p1\">**</ept> In certain situations, you might want to avoid the overhead of the <ph id=\"ph1\">&lt;xref:System.Lazy%601&gt;</ph> object's default locking behavior.","pos":[0,151],"source":"**Alternative to locking** In certain situations, you might want to avoid the overhead of the <xref:System.Lazy%601> object's default locking behavior."},{"content":"In rare situations, there might be a potential for deadlocks.","pos":[152,213]},{"content":"In such cases, you can use the <ph id=\"ph1\">&lt;xref:System.Lazy%601.%23ctor%28System.Threading.LazyThreadSafetyMode%29&gt;</ph> or <ph id=\"ph2\">&lt;xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29&gt;</ph> constructor, and specify <ph id=\"ph3\">&lt;xref:System.Threading.LazyThreadSafetyMode?displayProperty=fullName&gt;</ph>.","pos":[214,515],"source":" In such cases, you can use the <xref:System.Lazy%601.%23ctor%28System.Threading.LazyThreadSafetyMode%29> or <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29> constructor, and specify <xref:System.Threading.LazyThreadSafetyMode?displayProperty=fullName>."},{"content":"This enables the <ph id=\"ph1\">&lt;xref:System.Lazy%601&gt;</ph> object to create a copy of the lazily initialized object on each of several threads if the threads call the <ph id=\"ph2\">&lt;xref:System.Lazy%601.Value%2A&gt;</ph> property simultaneously.","pos":[516,720],"source":" This enables the <xref:System.Lazy%601> object to create a copy of the lazily initialized object on each of several threads if the threads call the <xref:System.Lazy%601.Value%2A> property simultaneously."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Lazy%601&gt;</ph> object ensures that all threads use the same instance of the lazily initialized object and discards the instances that are not used.","pos":[721,880],"source":" The <xref:System.Lazy%601> object ensures that all threads use the same instance of the lazily initialized object and discards the instances that are not used."},{"content":"Thus, the cost of reducing the locking overhead is that your program might sometimes create and discard extra copies of an expensive object.","pos":[881,1021]},{"content":"In most cases, this is unlikely.","pos":[1022,1054]},{"content":"The examples for the <ph id=\"ph1\">&lt;xref:System.Lazy%601.%23ctor%28System.Threading.LazyThreadSafetyMode%29&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29&gt;</ph> constructors demonstrate this behavior.","pos":[1055,1291],"source":" The examples for the <xref:System.Lazy%601.%23ctor%28System.Threading.LazyThreadSafetyMode%29> and <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29> constructors demonstrate this behavior."}]},{"pos":[5149,5310],"content":"[!IMPORTANT]\n When you specify <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly>, exceptions are never cached, even if you specify a factory method.","leadings":["","> "],"nodes":[{"content":"When you specify <ph id=\"ph1\">&lt;xref:System.Threading.LazyThreadSafetyMode.PublicationOnly&gt;</ph>, exceptions are never cached, even if you specify a factory method.","pos":[14,159],"source":" When you specify <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly>, exceptions are never cached, even if you specify a factory method."}]},{"pos":[5317,5774],"content":"**Equivalent constructors** In addition to enabling the use of <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly>, the <xref:System.Lazy%601.%23ctor%28System.Threading.LazyThreadSafetyMode%29> and <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29> constructors can duplicate the functionality of the other constructors. The following table shows the parameter values that produce equivalent behavior.","nodes":[{"content":"<bpt id=\"p1\">**</bpt>Equivalent constructors<ept id=\"p1\">**</ept> In addition to enabling the use of <ph id=\"ph1\">&lt;xref:System.Threading.LazyThreadSafetyMode.PublicationOnly&gt;</ph>, the <ph id=\"ph2\">&lt;xref:System.Lazy%601.%23ctor%28System.Threading.LazyThreadSafetyMode%29&gt;</ph> and <ph id=\"ph3\">&lt;xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29&gt;</ph> constructors can duplicate the functionality of the other constructors.","pos":[0,376],"source":"**Equivalent constructors** In addition to enabling the use of <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly>, the <xref:System.Lazy%601.%23ctor%28System.Threading.LazyThreadSafetyMode%29> and <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29> constructors can duplicate the functionality of the other constructors."},{"content":"The following table shows the parameter values that produce equivalent behavior.","pos":[377,457]}]},{"pos":[5781,5830],"content":"To create a <xref:System.Lazy%601> object that is","nodes":[{"content":"To create a <ph id=\"ph1\">&lt;xref:System.Lazy%601&gt;</ph> object that is","pos":[0,49],"source":"To create a <xref:System.Lazy%601> object that is"}]},{"pos":[5831,5914],"content":"For constructors that have a <ph id=\"ph1\">`LazyThreadSafetyMode`</ph> <ph id=\"ph2\">`mode`</ph> parameter, set <ph id=\"ph3\">`mode`</ph> to","source":"For constructors that have a `LazyThreadSafetyMode` `mode` parameter, set `mode` to"},{"pos":[5915,5999],"content":"For constructors that have a Boolean <ph id=\"ph1\">`isThreadSafe`</ph> parameter, set <ph id=\"ph2\">`isThreadSafe`</ph> to","source":"For constructors that have a Boolean `isThreadSafe` parameter, set `isThreadSafe` to"},{"pos":[6000,6049],"content":"For constructors with no thread safety parameters","nodes":[{"content":"For constructors with no thread safety parameters","pos":[0,49]}]},{"pos":[6447,6532],"content":"Fully thread safe; uses locking to ensure that only one thread initializes the value.","nodes":[{"content":"Fully thread safe; uses locking to ensure that only one thread initializes the value.","pos":[0,85]}]},{"pos":[6533,6601],"content":"<xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication>","nodes":[]},{"pos":[6609,6653],"content":"All such constructors are fully thread safe.","nodes":[{"content":"All such constructors are fully thread safe.","pos":[0,44]}]},{"pos":[6658,6674],"content":"Not thread safe.","nodes":[{"content":"Not thread safe.","pos":[0,16]}]},{"pos":[6675,6724],"content":"<xref:System.Threading.LazyThreadSafetyMode.None>","nodes":[]},{"pos":[6733,6748],"content":"Not applicable.","nodes":[{"content":"Not applicable.","pos":[0,15]}]},{"pos":[6753,6809],"content":"Fully thread safe; threads race to initialize the value.","nodes":[{"content":"Fully thread safe; threads race to initialize the value.","pos":[0,56]}]},{"pos":[6810,6870],"content":"<xref:System.Threading.LazyThreadSafetyMode.PublicationOnly>","nodes":[]},{"pos":[6871,6886],"content":"Not applicable.","nodes":[{"content":"Not applicable.","pos":[0,15]}]},{"pos":[6887,6902],"content":"Not applicable.","nodes":[{"content":"Not applicable.","pos":[0,15]}]},{"pos":[6910,7135],"content":"<bpt id=\"p1\">**</bpt>Other capabilities<ept id=\"p1\">**</ept> For information about the use of <ph id=\"ph1\">&lt;xref:System.Lazy%601&gt;</ph> with thread-static fields, or as the backing store for properties, see <bpt id=\"p2\">[</bpt>Lazy Initialization<ept id=\"p2\">](~/docs/framework/performance/lazy-initialization.md)</ept>.","source":"**Other capabilities** For information about the use of <xref:System.Lazy%601> with thread-static fields, or as the backing store for properties, see [Lazy Initialization](~/docs/framework/performance/lazy-initialization.md)."}],"pos":[773,7948],"yaml":true,"extradata":"MT"},{"content":"The type of object that is being lazily initialized.","nodes":[{"pos":[0,52],"content":"The type of object that is being lazily initialized.","nodes":[{"content":"The type of object that is being lazily initialized.","pos":[0,52]}]}],"pos":[12134,12187],"yaml":true},{"content":"Initializes a new instance of the <xref href=\"System.Lazy`1\"></xref> class. When lazy initialization occurs, the default constructor of the target type is used.","nodes":[{"pos":[0,160],"content":"Initializes a new instance of the <xref href=\"System.Lazy`1\"></xref> class. When lazy initialization occurs, the default constructor of the target type is used.","nodes":[{"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Lazy`1\"&gt;&lt;/xref&gt;</ph> class.","pos":[0,75],"source":"Initializes a new instance of the <xref href=\"System.Lazy`1\"></xref> class."},{"content":"When lazy initialization occurs, the default constructor of the target type is used.","pos":[76,160]}]}],"pos":[13984,14145],"yaml":true},{"content":"An instance that is created with this constructor may be used concurrently from multiple threads.  \n  \n The thread safety mode of a <xref:System.Lazy%601> instance that is initialized with this constructor is <xref:System.Threading.LazyThreadSafetyMode?displayProperty=fullName>. The thread safety mode describes the behavior when multiple threads try to initialize the <xref:System.Lazy%601> instance.  \n  \n A <xref:System.Lazy%601> instance that is created with this constructor does not cache exceptions. For more information, see the <xref:System.Lazy%601>class or the <xref:System.Threading.LazyThreadSafetyMode?displayProperty=fullName> enumeration.","nodes":[{"pos":[0,97],"content":"An instance that is created with this constructor may be used concurrently from multiple threads.","nodes":[{"content":"An instance that is created with this constructor may be used concurrently from multiple threads.","pos":[0,97]}]},{"pos":[104,402],"content":"The thread safety mode of a <xref:System.Lazy%601> instance that is initialized with this constructor is <xref:System.Threading.LazyThreadSafetyMode?displayProperty=fullName>. The thread safety mode describes the behavior when multiple threads try to initialize the <xref:System.Lazy%601> instance.","nodes":[{"content":"The thread safety mode of a <xref:System.Lazy%601> instance that is initialized with this constructor is <xref:System.Threading.LazyThreadSafetyMode?displayProperty=fullName>. The thread safety mode describes the behavior when multiple threads try to initialize the <xref:System.Lazy%601> instance.","pos":[0,298],"nodes":[{"content":"The thread safety mode of a <ph id=\"ph1\">&lt;xref:System.Lazy%601&gt;</ph> instance that is initialized with this constructor is <ph id=\"ph2\">&lt;xref:System.Threading.LazyThreadSafetyMode?displayProperty=fullName&gt;</ph>.","pos":[0,175],"source":"The thread safety mode of a <xref:System.Lazy%601> instance that is initialized with this constructor is <xref:System.Threading.LazyThreadSafetyMode?displayProperty=fullName>."},{"content":"The thread safety mode describes the behavior when multiple threads try to initialize the <ph id=\"ph1\">&lt;xref:System.Lazy%601&gt;</ph> instance.","pos":[176,298],"source":" The thread safety mode describes the behavior when multiple threads try to initialize the <xref:System.Lazy%601> instance."}]}]},{"pos":[409,655],"content":"A <xref:System.Lazy%601> instance that is created with this constructor does not cache exceptions. For more information, see the <xref:System.Lazy%601>class or the <xref:System.Threading.LazyThreadSafetyMode?displayProperty=fullName> enumeration.","nodes":[{"content":"A <xref:System.Lazy%601> instance that is created with this constructor does not cache exceptions. For more information, see the <xref:System.Lazy%601>class or the <xref:System.Threading.LazyThreadSafetyMode?displayProperty=fullName> enumeration.","pos":[0,246],"nodes":[{"content":"A <ph id=\"ph1\">&lt;xref:System.Lazy%601&gt;</ph> instance that is created with this constructor does not cache exceptions.","pos":[0,98],"source":"A <xref:System.Lazy%601> instance that is created with this constructor does not cache exceptions."},{"content":"For more information, see the <ph id=\"ph1\">&lt;xref:System.Lazy%601&gt;</ph>class or the <ph id=\"ph2\">&lt;xref:System.Threading.LazyThreadSafetyMode?displayProperty=fullName&gt;</ph> enumeration.","pos":[99,246],"source":" For more information, see the <xref:System.Lazy%601>class or the <xref:System.Threading.LazyThreadSafetyMode?displayProperty=fullName> enumeration."}]}]}],"pos":[14156,14818],"yaml":true,"extradata":"MT"},{"content":"Initializes a new instance of the <xref href=\"System.Lazy`1\"></xref> class. When lazy initialization occurs, the default constructor of the target type and the specified initialization mode are used.","nodes":[{"pos":[0,199],"content":"Initializes a new instance of the <xref href=\"System.Lazy`1\"></xref> class. When lazy initialization occurs, the default constructor of the target type and the specified initialization mode are used.","nodes":[{"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Lazy`1\"&gt;&lt;/xref&gt;</ph> class.","pos":[0,75],"source":"Initializes a new instance of the <xref href=\"System.Lazy`1\"></xref> class."},{"content":"When lazy initialization occurs, the default constructor of the target type and the specified initialization mode are used.","pos":[76,199]}]}],"pos":[18778,18978],"yaml":true},{"content":"The thread safety mode of a <xref:System.Lazy%601> instance that is initialized with this constructor is <xref:System.Threading.LazyThreadSafetyMode?displayProperty=fullName> if `isThreadSafe` is `true`; otherwise, the mode is <xref:System.Threading.LazyThreadSafetyMode?displayProperty=fullName>. The thread safety mode describes the behavior when multiple threads try to initialize the <xref:System.Lazy%601> instance. To specify the <xref:System.Threading.LazyThreadSafetyMode?displayProperty=fullName> mode, use the <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29> or <xref:System.Lazy%601.%23ctor%28System.Threading.LazyThreadSafetyMode%29> constructor.  \n  \n A <xref:System.Lazy%601> instance that is created with this constructor does not cache exceptions. For more information, see the<xref:System.Lazy%601> class or the <xref:System.Threading.LazyThreadSafetyMode?displayProperty=fullName> enumeration.","nodes":[{"pos":[0,707],"content":"The thread safety mode of a <xref:System.Lazy%601> instance that is initialized with this constructor is <xref:System.Threading.LazyThreadSafetyMode?displayProperty=fullName> if `isThreadSafe` is `true`; otherwise, the mode is <xref:System.Threading.LazyThreadSafetyMode?displayProperty=fullName>. The thread safety mode describes the behavior when multiple threads try to initialize the <xref:System.Lazy%601> instance. To specify the <xref:System.Threading.LazyThreadSafetyMode?displayProperty=fullName> mode, use the <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29> or <xref:System.Lazy%601.%23ctor%28System.Threading.LazyThreadSafetyMode%29> constructor.","nodes":[{"content":"The thread safety mode of a <ph id=\"ph1\">&lt;xref:System.Lazy%601&gt;</ph> instance that is initialized with this constructor is <ph id=\"ph2\">&lt;xref:System.Threading.LazyThreadSafetyMode?displayProperty=fullName&gt;</ph> if <ph id=\"ph3\">`isThreadSafe`</ph> is <ph id=\"ph4\">`true`</ph>; otherwise, the mode is <ph id=\"ph5\">&lt;xref:System.Threading.LazyThreadSafetyMode?displayProperty=fullName&gt;</ph>.","pos":[0,297],"source":"The thread safety mode of a <xref:System.Lazy%601> instance that is initialized with this constructor is <xref:System.Threading.LazyThreadSafetyMode?displayProperty=fullName> if `isThreadSafe` is `true`; otherwise, the mode is <xref:System.Threading.LazyThreadSafetyMode?displayProperty=fullName>."},{"content":"The thread safety mode describes the behavior when multiple threads try to initialize the <ph id=\"ph1\">&lt;xref:System.Lazy%601&gt;</ph> instance.","pos":[298,420],"source":" The thread safety mode describes the behavior when multiple threads try to initialize the <xref:System.Lazy%601> instance."},{"content":"To specify the <ph id=\"ph1\">&lt;xref:System.Threading.LazyThreadSafetyMode?displayProperty=fullName&gt;</ph> mode, use the <ph id=\"ph2\">&lt;xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29&gt;</ph> or <ph id=\"ph3\">&lt;xref:System.Lazy%601.%23ctor%28System.Threading.LazyThreadSafetyMode%29&gt;</ph> constructor.","pos":[421,707],"source":" To specify the <xref:System.Threading.LazyThreadSafetyMode?displayProperty=fullName> mode, use the <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29> or <xref:System.Lazy%601.%23ctor%28System.Threading.LazyThreadSafetyMode%29> constructor."}]},{"pos":[714,960],"content":"A <xref:System.Lazy%601> instance that is created with this constructor does not cache exceptions. For more information, see the<xref:System.Lazy%601> class or the <xref:System.Threading.LazyThreadSafetyMode?displayProperty=fullName> enumeration.","nodes":[{"content":"A <xref:System.Lazy%601> instance that is created with this constructor does not cache exceptions. For more information, see the<xref:System.Lazy%601> class or the <xref:System.Threading.LazyThreadSafetyMode?displayProperty=fullName> enumeration.","pos":[0,246],"nodes":[{"content":"A <ph id=\"ph1\">&lt;xref:System.Lazy%601&gt;</ph> instance that is created with this constructor does not cache exceptions.","pos":[0,98],"source":"A <xref:System.Lazy%601> instance that is created with this constructor does not cache exceptions."},{"content":"For more information, see the<ph id=\"ph1\">&lt;xref:System.Lazy%601&gt;</ph> class or the <ph id=\"ph2\">&lt;xref:System.Threading.LazyThreadSafetyMode?displayProperty=fullName&gt;</ph> enumeration.","pos":[99,246],"source":" For more information, see the<xref:System.Lazy%601> class or the <xref:System.Threading.LazyThreadSafetyMode?displayProperty=fullName> enumeration."}]}]}],"pos":[18989,19954],"yaml":true,"extradata":"MT"},{"content":"`true` to make this instance usable concurrently by multiple threads; `false` to make the instance usable by only one thread at a time.","nodes":[{"pos":[0,135],"content":"<ph id=\"ph1\">`true`</ph> to make this instance usable concurrently by multiple threads; <ph id=\"ph2\">`false`</ph> to make the instance usable by only one thread at a time.","source":"`true` to make this instance usable concurrently by multiple threads; `false` to make the instance usable by only one thread at a time."}],"pos":[21765,21903],"yaml":true},{"content":"Initializes a new instance of the <xref href=\"System.Lazy`1\"></xref> class. When lazy initialization occurs, the specified initialization function is used.","nodes":[{"pos":[0,155],"content":"Initializes a new instance of the <xref href=\"System.Lazy`1\"></xref> class. When lazy initialization occurs, the specified initialization function is used.","nodes":[{"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Lazy`1\"&gt;&lt;/xref&gt;</ph> class.","pos":[0,75],"source":"Initializes a new instance of the <xref href=\"System.Lazy`1\"></xref> class."},{"content":"When lazy initialization occurs, the specified initialization function is used.","pos":[76,155]}]}],"pos":[23394,23550],"yaml":true},{"content":"An instance that is created with this constructor may be used concurrently from multiple threads.  \n  \n The thread safety mode of a <xref:System.Lazy%601> instance that is initialized with this constructor is <xref:System.Threading.LazyThreadSafetyMode?displayProperty=fullName>. The thread safety mode describes the behavior when multiple threads try to initialize the <xref:System.Lazy%601> instance.  \n  \n Exceptions that are thrown by `valueFactory` are cached. For more information, see the <xref:System.Lazy%601> class or the <xref:System.Threading.LazyThreadSafetyMode?displayProperty=fullName> enumeration.","nodes":[{"pos":[0,97],"content":"An instance that is created with this constructor may be used concurrently from multiple threads.","nodes":[{"content":"An instance that is created with this constructor may be used concurrently from multiple threads.","pos":[0,97]}]},{"pos":[104,402],"content":"The thread safety mode of a <xref:System.Lazy%601> instance that is initialized with this constructor is <xref:System.Threading.LazyThreadSafetyMode?displayProperty=fullName>. The thread safety mode describes the behavior when multiple threads try to initialize the <xref:System.Lazy%601> instance.","nodes":[{"content":"The thread safety mode of a <xref:System.Lazy%601> instance that is initialized with this constructor is <xref:System.Threading.LazyThreadSafetyMode?displayProperty=fullName>. The thread safety mode describes the behavior when multiple threads try to initialize the <xref:System.Lazy%601> instance.","pos":[0,298],"nodes":[{"content":"The thread safety mode of a <ph id=\"ph1\">&lt;xref:System.Lazy%601&gt;</ph> instance that is initialized with this constructor is <ph id=\"ph2\">&lt;xref:System.Threading.LazyThreadSafetyMode?displayProperty=fullName&gt;</ph>.","pos":[0,175],"source":"The thread safety mode of a <xref:System.Lazy%601> instance that is initialized with this constructor is <xref:System.Threading.LazyThreadSafetyMode?displayProperty=fullName>."},{"content":"The thread safety mode describes the behavior when multiple threads try to initialize the <ph id=\"ph1\">&lt;xref:System.Lazy%601&gt;</ph> instance.","pos":[176,298],"source":" The thread safety mode describes the behavior when multiple threads try to initialize the <xref:System.Lazy%601> instance."}]}]},{"pos":[409,614],"content":"Exceptions that are thrown by `valueFactory` are cached. For more information, see the <xref:System.Lazy%601> class or the <xref:System.Threading.LazyThreadSafetyMode?displayProperty=fullName> enumeration.","nodes":[{"content":"Exceptions that are thrown by <ph id=\"ph1\">`valueFactory`</ph> are cached.","pos":[0,56],"source":"Exceptions that are thrown by `valueFactory` are cached."},{"content":"For more information, see the <ph id=\"ph1\">&lt;xref:System.Lazy%601&gt;</ph> class or the <ph id=\"ph2\">&lt;xref:System.Threading.LazyThreadSafetyMode?displayProperty=fullName&gt;</ph> enumeration.","pos":[57,205],"source":" For more information, see the <xref:System.Lazy%601> class or the <xref:System.Threading.LazyThreadSafetyMode?displayProperty=fullName> enumeration."}]}],"pos":[23561,24182],"yaml":true,"extradata":"MT"},{"content":"The delegate that is invoked to produce the lazily initialized value when it is needed.","nodes":[{"pos":[0,87],"content":"The delegate that is invoked to produce the lazily initialized value when it is needed.","nodes":[{"content":"The delegate that is invoked to produce the lazily initialized value when it is needed.","pos":[0,87]}]}],"pos":[27489,27577],"yaml":true},{"content":"<code>valueFactory</code> is `null`.","nodes":[{"pos":[0,36],"content":"<ph id=\"ph1\">&lt;code&gt;valueFactory&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>valueFactory</code> is `null`."}],"pos":[27726,27763],"yaml":true},{"content":"Initializes a new instance of the <xref href=\"System.Lazy`1\"></xref> class that uses the default constructor of <code>T</code> and the specified thread-safety mode.","nodes":[{"pos":[0,164],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Lazy`1\"&gt;&lt;/xref&gt;</ph> class that uses the default constructor of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">T</ph><ept id=\"p1\">&lt;/code&gt;</ept> and the specified thread-safety mode.","source":"Initializes a new instance of the <xref href=\"System.Lazy`1\"></xref> class that uses the default constructor of <code>T</code> and the specified thread-safety mode."}],"pos":[29309,29474],"yaml":true},{"content":"The thread safety mode of a <xref:System.Lazy%601> instance describes the behavior when multiple threads try to initialize the <xref:System.Lazy%601> instance.  \n  \n A <xref:System.Lazy%601> instance that is created with this constructor does not cache exceptions. For more information, see the <xref:System.Lazy%601> class or the <xref:System.Threading.LazyThreadSafetyMode?displayProperty=fullName> enumeration.","nodes":[{"pos":[0,159],"content":"The thread safety mode of a <xref:System.Lazy%601> instance describes the behavior when multiple threads try to initialize the <xref:System.Lazy%601> instance.","nodes":[{"content":"The thread safety mode of a <ph id=\"ph1\">&lt;xref:System.Lazy%601&gt;</ph> instance describes the behavior when multiple threads try to initialize the <ph id=\"ph2\">&lt;xref:System.Lazy%601&gt;</ph> instance.","pos":[0,159],"source":"The thread safety mode of a <xref:System.Lazy%601> instance describes the behavior when multiple threads try to initialize the <xref:System.Lazy%601> instance."}]},{"pos":[166,413],"content":"A <xref:System.Lazy%601> instance that is created with this constructor does not cache exceptions. For more information, see the <xref:System.Lazy%601> class or the <xref:System.Threading.LazyThreadSafetyMode?displayProperty=fullName> enumeration.","nodes":[{"content":"A <xref:System.Lazy%601> instance that is created with this constructor does not cache exceptions. For more information, see the <xref:System.Lazy%601> class or the <xref:System.Threading.LazyThreadSafetyMode?displayProperty=fullName> enumeration.","pos":[0,247],"nodes":[{"content":"A <ph id=\"ph1\">&lt;xref:System.Lazy%601&gt;</ph> instance that is created with this constructor does not cache exceptions.","pos":[0,98],"source":"A <xref:System.Lazy%601> instance that is created with this constructor does not cache exceptions."},{"content":"For more information, see the <ph id=\"ph1\">&lt;xref:System.Lazy%601&gt;</ph> class or the <ph id=\"ph2\">&lt;xref:System.Threading.LazyThreadSafetyMode?displayProperty=fullName&gt;</ph> enumeration.","pos":[99,247],"source":" For more information, see the <xref:System.Lazy%601> class or the <xref:System.Threading.LazyThreadSafetyMode?displayProperty=fullName> enumeration."}]}]}],"pos":[29485,29903],"yaml":true,"extradata":"MT"},{"content":"One of the enumeration values that specifies the thread safety mode.","nodes":[{"pos":[0,68],"content":"One of the enumeration values that specifies the thread safety mode.","nodes":[{"content":"One of the enumeration values that specifies the thread safety mode.","pos":[0,68]}]}],"pos":[33729,33798],"yaml":true},{"content":"<code>mode</code> contains an invalid value.","nodes":[{"pos":[0,44],"content":"<ph id=\"ph1\">&lt;code&gt;mode&lt;/code&gt;</ph> contains an invalid value.","source":"<code>mode</code> contains an invalid value."}],"pos":[33959,34004],"yaml":true},{"content":"Initializes a new instance of the <xref href=\"System.Lazy`1\"></xref> class. When lazy initialization occurs, the specified initialization function and initialization mode are used.","nodes":[{"pos":[0,180],"content":"Initializes a new instance of the <xref href=\"System.Lazy`1\"></xref> class. When lazy initialization occurs, the specified initialization function and initialization mode are used.","nodes":[{"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Lazy`1\"&gt;&lt;/xref&gt;</ph> class.","pos":[0,75],"source":"Initializes a new instance of the <xref href=\"System.Lazy`1\"></xref> class."},{"content":"When lazy initialization occurs, the specified initialization function and initialization mode are used.","pos":[76,180]}]}],"pos":[36110,36291],"yaml":true},{"content":"The thread safety mode of a <xref:System.Lazy%601> instance that is initialized with this constructor is <xref:System.Threading.LazyThreadSafetyMode?displayProperty=fullName> if `isThreadSafe` is `true`; otherwise, the mode is <xref:System.Threading.LazyThreadSafetyMode?displayProperty=fullName>. The thread safety mode describes the behavior when multiple threads try to initialize the <xref:System.Lazy%601> instance.  \n  \n To specify the <xref:System.Threading.LazyThreadSafetyMode?displayProperty=fullName> mode, use the <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29> or <xref:System.Lazy%601.%23ctor%28System.Threading.LazyThreadSafetyMode%29> constructor.  \n  \n Exceptions that are thrown by `valueFactory` are cached. For more information, see the <xref:System.Lazy%601> class or the <xref:System.Threading.LazyThreadSafetyMode?displayProperty=fullName> enumeration.","nodes":[{"pos":[0,420],"content":"The thread safety mode of a <xref:System.Lazy%601> instance that is initialized with this constructor is <xref:System.Threading.LazyThreadSafetyMode?displayProperty=fullName> if `isThreadSafe` is `true`; otherwise, the mode is <xref:System.Threading.LazyThreadSafetyMode?displayProperty=fullName>. The thread safety mode describes the behavior when multiple threads try to initialize the <xref:System.Lazy%601> instance.","nodes":[{"content":"The thread safety mode of a <ph id=\"ph1\">&lt;xref:System.Lazy%601&gt;</ph> instance that is initialized with this constructor is <ph id=\"ph2\">&lt;xref:System.Threading.LazyThreadSafetyMode?displayProperty=fullName&gt;</ph> if <ph id=\"ph3\">`isThreadSafe`</ph> is <ph id=\"ph4\">`true`</ph>; otherwise, the mode is <ph id=\"ph5\">&lt;xref:System.Threading.LazyThreadSafetyMode?displayProperty=fullName&gt;</ph>.","pos":[0,297],"source":"The thread safety mode of a <xref:System.Lazy%601> instance that is initialized with this constructor is <xref:System.Threading.LazyThreadSafetyMode?displayProperty=fullName> if `isThreadSafe` is `true`; otherwise, the mode is <xref:System.Threading.LazyThreadSafetyMode?displayProperty=fullName>."},{"content":"The thread safety mode describes the behavior when multiple threads try to initialize the <ph id=\"ph1\">&lt;xref:System.Lazy%601&gt;</ph> instance.","pos":[298,420],"source":" The thread safety mode describes the behavior when multiple threads try to initialize the <xref:System.Lazy%601> instance."}]},{"pos":[427,713],"content":"To specify the <xref:System.Threading.LazyThreadSafetyMode?displayProperty=fullName> mode, use the <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29> or <xref:System.Lazy%601.%23ctor%28System.Threading.LazyThreadSafetyMode%29> constructor.","nodes":[{"content":"To specify the <ph id=\"ph1\">&lt;xref:System.Threading.LazyThreadSafetyMode?displayProperty=fullName&gt;</ph> mode, use the <ph id=\"ph2\">&lt;xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29&gt;</ph> or <ph id=\"ph3\">&lt;xref:System.Lazy%601.%23ctor%28System.Threading.LazyThreadSafetyMode%29&gt;</ph> constructor.","pos":[0,286],"source":"To specify the <xref:System.Threading.LazyThreadSafetyMode?displayProperty=fullName> mode, use the <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29> or <xref:System.Lazy%601.%23ctor%28System.Threading.LazyThreadSafetyMode%29> constructor."}]},{"pos":[720,925],"content":"Exceptions that are thrown by `valueFactory` are cached. For more information, see the <xref:System.Lazy%601> class or the <xref:System.Threading.LazyThreadSafetyMode?displayProperty=fullName> enumeration.","nodes":[{"content":"Exceptions that are thrown by <ph id=\"ph1\">`valueFactory`</ph> are cached.","pos":[0,56],"source":"Exceptions that are thrown by `valueFactory` are cached."},{"content":"For more information, see the <ph id=\"ph1\">&lt;xref:System.Lazy%601&gt;</ph> class or the <ph id=\"ph2\">&lt;xref:System.Threading.LazyThreadSafetyMode?displayProperty=fullName&gt;</ph> enumeration.","pos":[57,205],"source":" For more information, see the <xref:System.Lazy%601> class or the <xref:System.Threading.LazyThreadSafetyMode?displayProperty=fullName> enumeration."}]}],"pos":[36302,37234],"yaml":true,"extradata":"MT"},{"content":"The delegate that is invoked to produce the lazily initialized value when it is needed.","nodes":[{"pos":[0,87],"content":"The delegate that is invoked to produce the lazily initialized value when it is needed.","nodes":[{"content":"The delegate that is invoked to produce the lazily initialized value when it is needed.","pos":[0,87]}]}],"pos":[40718,40806],"yaml":true},{"content":"`true` to make this instance usable concurrently by multiple threads; `false` to make this instance usable by only one thread at a time.","nodes":[{"pos":[0,136],"content":"<ph id=\"ph1\">`true`</ph> to make this instance usable concurrently by multiple threads; <ph id=\"ph2\">`false`</ph> to make this instance usable by only one thread at a time.","source":"`true` to make this instance usable concurrently by multiple threads; `false` to make this instance usable by only one thread at a time."}],"pos":[40875,41014],"yaml":true},{"content":"<code>valueFactory</code> is `null`.","nodes":[{"pos":[0,36],"content":"<ph id=\"ph1\">&lt;code&gt;valueFactory&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>valueFactory</code> is `null`."}],"pos":[41163,41200],"yaml":true},{"content":"Initializes a new instance of the <xref href=\"System.Lazy`1\"></xref> class that uses the specified initialization function and thread-safety mode.","nodes":[{"pos":[0,146],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Lazy`1\"&gt;&lt;/xref&gt;</ph> class that uses the specified initialization function and thread-safety mode.","source":"Initializes a new instance of the <xref href=\"System.Lazy`1\"></xref> class that uses the specified initialization function and thread-safety mode."}],"pos":[42821,42968],"yaml":true},{"content":"The thread safety mode of a <xref:System.Lazy%601> instance describes the behavior when multiple threads try to initialize the <xref:System.Lazy%601> instance.  \n  \n Exceptions that are thrown by `valueFactory` are cached, unless `mode` is <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly>. For more information, see the <xref:System.Lazy%601> class or the <xref:System.Threading.LazyThreadSafetyMode?displayProperty=fullName> enumeration.","nodes":[{"pos":[0,159],"content":"The thread safety mode of a <xref:System.Lazy%601> instance describes the behavior when multiple threads try to initialize the <xref:System.Lazy%601> instance.","nodes":[{"content":"The thread safety mode of a <ph id=\"ph1\">&lt;xref:System.Lazy%601&gt;</ph> instance describes the behavior when multiple threads try to initialize the <ph id=\"ph2\">&lt;xref:System.Lazy%601&gt;</ph> instance.","pos":[0,159],"source":"The thread safety mode of a <xref:System.Lazy%601> instance describes the behavior when multiple threads try to initialize the <xref:System.Lazy%601> instance."}]},{"pos":[166,450],"content":"Exceptions that are thrown by `valueFactory` are cached, unless `mode` is <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly>. For more information, see the <xref:System.Lazy%601> class or the <xref:System.Threading.LazyThreadSafetyMode?displayProperty=fullName> enumeration.","nodes":[{"content":"Exceptions that are thrown by <ph id=\"ph1\">`valueFactory`</ph> are cached, unless <ph id=\"ph2\">`mode`</ph> is <ph id=\"ph3\">&lt;xref:System.Threading.LazyThreadSafetyMode.PublicationOnly&gt;</ph>.","pos":[0,135],"source":"Exceptions that are thrown by `valueFactory` are cached, unless `mode` is <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly>."},{"content":"For more information, see the <ph id=\"ph1\">&lt;xref:System.Lazy%601&gt;</ph> class or the <ph id=\"ph2\">&lt;xref:System.Threading.LazyThreadSafetyMode?displayProperty=fullName&gt;</ph> enumeration.","pos":[136,284],"source":" For more information, see the <xref:System.Lazy%601> class or the <xref:System.Threading.LazyThreadSafetyMode?displayProperty=fullName> enumeration."}]}],"pos":[42979,43434],"yaml":true,"extradata":"MT"},{"content":"The delegate that is invoked to produce the lazily initialized value when it is needed.","nodes":[{"pos":[0,87],"content":"The delegate that is invoked to produce the lazily initialized value when it is needed.","nodes":[{"content":"The delegate that is invoked to produce the lazily initialized value when it is needed.","pos":[0,87]}]}],"pos":[48839,48927],"yaml":true},{"content":"One of the enumeration values that specifies the thread safety mode.","nodes":[{"pos":[0,68],"content":"One of the enumeration values that specifies the thread safety mode.","nodes":[{"content":"One of the enumeration values that specifies the thread safety mode.","pos":[0,68]}]}],"pos":[49011,49080],"yaml":true},{"content":"<code>mode</code> contains an invalid value.","nodes":[{"pos":[0,44],"content":"<ph id=\"ph1\">&lt;code&gt;mode&lt;/code&gt;</ph> contains an invalid value.","source":"<code>mode</code> contains an invalid value."}],"pos":[49241,49286],"yaml":true},{"content":"<code>valueFactory</code> is `null`.","nodes":[{"pos":[0,36],"content":"<ph id=\"ph1\">&lt;code&gt;valueFactory&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>valueFactory</code> is `null`."}],"pos":[49388,49425],"yaml":true},{"content":"Gets a value that indicates whether a value has been created for this <xref href=\"System.Lazy`1\"></xref> instance.","nodes":[{"pos":[0,114],"content":"Gets a value that indicates whether a value has been created for this <ph id=\"ph1\">&lt;xref href=\"System.Lazy`1\"&gt;&lt;/xref&gt;</ph> instance.","source":"Gets a value that indicates whether a value has been created for this <xref href=\"System.Lazy`1\"></xref> instance."}],"pos":[50831,50946],"yaml":true},{"content":"When lazy initialization occurs for a <xref:System.Lazy%601> instance, it may result in either a value being created or an exception being thrown. If an exception is thrown, subsequent behavior of the <xref:System.Lazy%601> instance depends on whether exception caching is in effect. If the <xref:System.Lazy%601> instance was created by using a constructor that does not specify an initialization function, then exception caching is not in effect. A subsequent attempt to initialize the <xref:System.Lazy%601> might succeed, and after successful initialization the <xref:System.Lazy%601.IsValueCreated%2A> property returns `true`. If the <xref:System.Lazy%601> instance was created with an initialization function (specified by the `valueFactory` parameter of the <xref:System.Lazy%601> constructor), then exception caching is controlled by the thread safety mode.  \n  \n-   If the mode is <xref:System.Threading.LazyThreadSafetyMode?displayProperty=fullName> or <xref:System.Threading.LazyThreadSafetyMode?displayProperty=fullName>, there is no second chance to initialize the <xref:System.Lazy%601> instance. If an exception occurs and is unhandled in the initialization function, that exception is cached and rethrown on subsequent accesses of the <xref:System.Lazy%601.Value%2A?displayProperty=fullName>property. No value is created if an exception is thrown, so in such cases <xref:System.Lazy%601.IsValueCreated%2A> returns `false`.  \n  \n-   If the mode is <xref:System.Threading.LazyThreadSafetyMode?displayProperty=fullName>, the first thread that succeeds in running the initialization function (or the default constructor) creates the value for the <xref:System.Lazy%601> instance. If the initialization function throws an exception on one thread, other threads can still try to initialize the <xref:System.Lazy%601> instance. Until the value is created, the <xref:System.Lazy%601.IsValueCreated%2A> property returns `false`.","nodes":[{"pos":[0,865],"content":"When lazy initialization occurs for a <xref:System.Lazy%601> instance, it may result in either a value being created or an exception being thrown. If an exception is thrown, subsequent behavior of the <xref:System.Lazy%601> instance depends on whether exception caching is in effect. If the <xref:System.Lazy%601> instance was created by using a constructor that does not specify an initialization function, then exception caching is not in effect. A subsequent attempt to initialize the <xref:System.Lazy%601> might succeed, and after successful initialization the <xref:System.Lazy%601.IsValueCreated%2A> property returns `true`. If the <xref:System.Lazy%601> instance was created with an initialization function (specified by the `valueFactory` parameter of the <xref:System.Lazy%601> constructor), then exception caching is controlled by the thread safety mode.","nodes":[{"content":"When lazy initialization occurs for a <ph id=\"ph1\">&lt;xref:System.Lazy%601&gt;</ph> instance, it may result in either a value being created or an exception being thrown.","pos":[0,146],"source":"When lazy initialization occurs for a <xref:System.Lazy%601> instance, it may result in either a value being created or an exception being thrown."},{"content":"If an exception is thrown, subsequent behavior of the <ph id=\"ph1\">&lt;xref:System.Lazy%601&gt;</ph> instance depends on whether exception caching is in effect.","pos":[147,283],"source":" If an exception is thrown, subsequent behavior of the <xref:System.Lazy%601> instance depends on whether exception caching is in effect."},{"content":"If the <ph id=\"ph1\">&lt;xref:System.Lazy%601&gt;</ph> instance was created by using a constructor that does not specify an initialization function, then exception caching is not in effect.","pos":[284,448],"source":" If the <xref:System.Lazy%601> instance was created by using a constructor that does not specify an initialization function, then exception caching is not in effect."},{"content":"A subsequent attempt to initialize the <ph id=\"ph1\">&lt;xref:System.Lazy%601&gt;</ph> might succeed, and after successful initialization the <ph id=\"ph2\">&lt;xref:System.Lazy%601.IsValueCreated%2A&gt;</ph> property returns <ph id=\"ph3\">`true`</ph>.","pos":[449,631],"source":" A subsequent attempt to initialize the <xref:System.Lazy%601> might succeed, and after successful initialization the <xref:System.Lazy%601.IsValueCreated%2A> property returns `true`."},{"content":"If the <ph id=\"ph1\">&lt;xref:System.Lazy%601&gt;</ph> instance was created with an initialization function (specified by the <ph id=\"ph2\">`valueFactory`</ph> parameter of the <ph id=\"ph3\">&lt;xref:System.Lazy%601&gt;</ph> constructor), then exception caching is controlled by the thread safety mode.","pos":[632,865],"source":" If the <xref:System.Lazy%601> instance was created with an initialization function (specified by the `valueFactory` parameter of the <xref:System.Lazy%601> constructor), then exception caching is controlled by the thread safety mode."}]},{"pos":[875,1438],"content":"If the mode is <xref:System.Threading.LazyThreadSafetyMode?displayProperty=fullName> or <xref:System.Threading.LazyThreadSafetyMode?displayProperty=fullName>, there is no second chance to initialize the <xref:System.Lazy%601> instance. If an exception occurs and is unhandled in the initialization function, that exception is cached and rethrown on subsequent accesses of the <xref:System.Lazy%601.Value%2A?displayProperty=fullName>property. No value is created if an exception is thrown, so in such cases <xref:System.Lazy%601.IsValueCreated%2A> returns `false`.","nodes":[{"content":"If the mode is <ph id=\"ph1\">&lt;xref:System.Threading.LazyThreadSafetyMode?displayProperty=fullName&gt;</ph> or <ph id=\"ph2\">&lt;xref:System.Threading.LazyThreadSafetyMode?displayProperty=fullName&gt;</ph>, there is no second chance to initialize the <ph id=\"ph3\">&lt;xref:System.Lazy%601&gt;</ph> instance.","pos":[0,235],"source":"If the mode is <xref:System.Threading.LazyThreadSafetyMode?displayProperty=fullName> or <xref:System.Threading.LazyThreadSafetyMode?displayProperty=fullName>, there is no second chance to initialize the <xref:System.Lazy%601> instance."},{"content":"If an exception occurs and is unhandled in the initialization function, that exception is cached and rethrown on subsequent accesses of the <ph id=\"ph1\">&lt;xref:System.Lazy%601.Value%2A?displayProperty=fullName&gt;</ph>property.","pos":[236,441],"source":" If an exception occurs and is unhandled in the initialization function, that exception is cached and rethrown on subsequent accesses of the <xref:System.Lazy%601.Value%2A?displayProperty=fullName>property."},{"content":"No value is created if an exception is thrown, so in such cases <ph id=\"ph1\">&lt;xref:System.Lazy%601.IsValueCreated%2A&gt;</ph> returns <ph id=\"ph2\">`false`</ph>.","pos":[442,563],"source":" No value is created if an exception is thrown, so in such cases <xref:System.Lazy%601.IsValueCreated%2A> returns `false`."}]},{"pos":[1448,1935],"content":"If the mode is <xref:System.Threading.LazyThreadSafetyMode?displayProperty=fullName>, the first thread that succeeds in running the initialization function (or the default constructor) creates the value for the <xref:System.Lazy%601> instance. If the initialization function throws an exception on one thread, other threads can still try to initialize the <xref:System.Lazy%601> instance. Until the value is created, the <xref:System.Lazy%601.IsValueCreated%2A> property returns `false`.","nodes":[{"content":"If the mode is <ph id=\"ph1\">&lt;xref:System.Threading.LazyThreadSafetyMode?displayProperty=fullName&gt;</ph>, the first thread that succeeds in running the initialization function (or the default constructor) creates the value for the <ph id=\"ph2\">&lt;xref:System.Lazy%601&gt;</ph> instance.","pos":[0,243],"source":"If the mode is <xref:System.Threading.LazyThreadSafetyMode?displayProperty=fullName>, the first thread that succeeds in running the initialization function (or the default constructor) creates the value for the <xref:System.Lazy%601> instance."},{"content":"If the initialization function throws an exception on one thread, other threads can still try to initialize the <ph id=\"ph1\">&lt;xref:System.Lazy%601&gt;</ph> instance.","pos":[244,388],"source":" If the initialization function throws an exception on one thread, other threads can still try to initialize the <xref:System.Lazy%601> instance."},{"content":"Until the value is created, the <ph id=\"ph1\">&lt;xref:System.Lazy%601.IsValueCreated%2A&gt;</ph> property returns <ph id=\"ph2\">`false`</ph>.","pos":[389,487],"source":" Until the value is created, the <xref:System.Lazy%601.IsValueCreated%2A> property returns `false`."}]}],"pos":[50957,52899],"yaml":true,"extradata":"MT"},{"content":"`true` if a value has been created for this <xref href=\"System.Lazy`1\"></xref> instance; otherwise, `false`.","nodes":[{"pos":[0,108],"content":"<ph id=\"ph1\">`true`</ph> if a value has been created for this <ph id=\"ph2\">&lt;xref href=\"System.Lazy`1\"&gt;&lt;/xref&gt;</ph> instance; otherwise, <ph id=\"ph3\">`false`</ph>.","source":"`true` if a value has been created for this <xref href=\"System.Lazy`1\"></xref> instance; otherwise, `false`."}],"pos":[53016,53127],"yaml":true},{"content":"Creates and returns a string representation of the <xref href=\"System.Lazy`1.Value\"></xref> property for this instance.","nodes":[{"pos":[0,119],"content":"Creates and returns a string representation of the <ph id=\"ph1\">&lt;xref href=\"System.Lazy`1.Value\"&gt;&lt;/xref&gt;</ph> property for this instance.","source":"Creates and returns a string representation of the <xref href=\"System.Lazy`1.Value\"></xref> property for this instance."}],"pos":[54560,54680],"yaml":true},{"content":"Calling this method does not cause initialization.  \n  \n The <xref:System.Lazy%601.Value%2A?displayProperty=fullName> property can be `null` after lazy initialization if the factory method that was specified for the `valueFactory` parameter of the <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%29>, <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29>, or <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Boolean%29> constructor returns `null`.","nodes":[{"pos":[0,50],"content":"Calling this method does not cause initialization.","nodes":[{"content":"Calling this method does not cause initialization.","pos":[0,50]}]},{"pos":[57,511],"content":"The <ph id=\"ph1\">&lt;xref:System.Lazy%601.Value%2A?displayProperty=fullName&gt;</ph> property can be <ph id=\"ph2\">`null`</ph> after lazy initialization if the factory method that was specified for the <ph id=\"ph3\">`valueFactory`</ph> parameter of the <ph id=\"ph4\">&lt;xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%29&gt;</ph>, <ph id=\"ph5\">&lt;xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29&gt;</ph>, or <ph id=\"ph6\">&lt;xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Boolean%29&gt;</ph> constructor returns <ph id=\"ph7\">`null`</ph>.","source":"The <xref:System.Lazy%601.Value%2A?displayProperty=fullName> property can be `null` after lazy initialization if the factory method that was specified for the `valueFactory` parameter of the <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%29>, <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29>, or <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Boolean%29> constructor returns `null`."}],"pos":[54691,55207],"yaml":true,"extradata":"MT"},{"content":"The result of calling the <xref href=\"System.Object.ToString\"></xref> method on the <xref href=\"System.Lazy`1.Value\"></xref> property for this instance, if the value has been created (that is, if the <xref href=\"System.Lazy`1.IsValueCreated\"></xref> property returns `true`). Otherwise, a string indicating that the value has not been created.","nodes":[{"pos":[0,343],"content":"The result of calling the <xref href=\"System.Object.ToString\"></xref> method on the <xref href=\"System.Lazy`1.Value\"></xref> property for this instance, if the value has been created (that is, if the <xref href=\"System.Lazy`1.IsValueCreated\"></xref> property returns `true`). Otherwise, a string indicating that the value has not been created.","nodes":[{"content":"The result of calling the <ph id=\"ph1\">&lt;xref href=\"System.Object.ToString\"&gt;&lt;/xref&gt;</ph> method on the <ph id=\"ph2\">&lt;xref href=\"System.Lazy`1.Value\"&gt;&lt;/xref&gt;</ph> property for this instance, if the value has been created (that is, if the <ph id=\"ph3\">&lt;xref href=\"System.Lazy`1.IsValueCreated\"&gt;&lt;/xref&gt;</ph> property returns <ph id=\"ph4\">`true`</ph>).","pos":[0,275],"source":"The result of calling the <xref href=\"System.Object.ToString\"></xref> method on the <xref href=\"System.Lazy`1.Value\"></xref> property for this instance, if the value has been created (that is, if the <xref href=\"System.Lazy`1.IsValueCreated\"></xref> property returns `true`)."},{"content":"Otherwise, a string indicating that the value has not been created.","pos":[276,343]}]}],"pos":[55342,55686],"yaml":true},{"content":"The <xref href=\"System.Lazy`1.Value\"></xref> property is `null`.","nodes":[{"pos":[0,64],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Lazy`1.Value\"&gt;&lt;/xref&gt;</ph> property is <ph id=\"ph2\">`null`</ph>.","source":"The <xref href=\"System.Lazy`1.Value\"></xref> property is `null`."}],"pos":[55840,55905],"yaml":true},{"content":"Gets the lazily initialized value of the current <xref href=\"System.Lazy`1\"></xref> instance.","nodes":[{"pos":[0,93],"content":"Gets the lazily initialized value of the current <ph id=\"ph1\">&lt;xref href=\"System.Lazy`1\"&gt;&lt;/xref&gt;</ph> instance.","source":"Gets the lazily initialized value of the current <xref href=\"System.Lazy`1\"></xref> instance."}],"pos":[57257,57351],"yaml":true},{"content":"If the <xref:System.Lazy%601.IsValueCreated%2A?displayProperty=fullName> property is `false`, accessing the <xref:System.Lazy%601.Value%2A> property forces initialization.  \n  \n In addition to the exceptions that are listed, the <xref:System.Lazy%601.Value%2A> property can throw any unhandled exception that is thrown by the factory method that was passed to the `valueFactory` parameter of the <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%29>, <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29>, or <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Boolean%29> constructor.","nodes":[{"pos":[0,171],"content":"If the <ph id=\"ph1\">&lt;xref:System.Lazy%601.IsValueCreated%2A?displayProperty=fullName&gt;</ph> property is <ph id=\"ph2\">`false`</ph>, accessing the <ph id=\"ph3\">&lt;xref:System.Lazy%601.Value%2A&gt;</ph> property forces initialization.","source":"If the <xref:System.Lazy%601.IsValueCreated%2A?displayProperty=fullName> property is `false`, accessing the <xref:System.Lazy%601.Value%2A> property forces initialization."},{"pos":[178,644],"content":"In addition to the exceptions that are listed, the <ph id=\"ph1\">&lt;xref:System.Lazy%601.Value%2A&gt;</ph> property can throw any unhandled exception that is thrown by the factory method that was passed to the <ph id=\"ph2\">`valueFactory`</ph> parameter of the <ph id=\"ph3\">&lt;xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%29&gt;</ph>, <ph id=\"ph4\">&lt;xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29&gt;</ph>, or <ph id=\"ph5\">&lt;xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Boolean%29&gt;</ph> constructor.","source":"In addition to the exceptions that are listed, the <xref:System.Lazy%601.Value%2A> property can throw any unhandled exception that is thrown by the factory method that was passed to the `valueFactory` parameter of the <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%29>, <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29>, or <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Boolean%29> constructor."}],"pos":[57362,58011],"yaml":true,"extradata":"MT"},{"content":"The lazily initialized value of the current <xref href=\"System.Lazy`1\"></xref> instance.","nodes":[{"pos":[0,88],"content":"The lazily initialized value of the current <ph id=\"ph1\">&lt;xref href=\"System.Lazy`1\"&gt;&lt;/xref&gt;</ph> instance.","source":"The lazily initialized value of the current <xref href=\"System.Lazy`1\"></xref> instance."}],"pos":[58103,58192],"yaml":true},{"content":"The <xref href=\"System.Lazy`1\"></xref> instance is initialized to use the default constructor of the type that is being lazily initialized, and permissions to access the constructor are missing.","nodes":[{"pos":[0,194],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Lazy`1\"&gt;&lt;/xref&gt;</ph> instance is initialized to use the default constructor of the type that is being lazily initialized, and permissions to access the constructor are missing.","source":"The <xref href=\"System.Lazy`1\"></xref> instance is initialized to use the default constructor of the type that is being lazily initialized, and permissions to access the constructor are missing."}],"pos":[58341,58536],"yaml":true},{"content":"The <xref href=\"System.Lazy`1\"></xref> instance is initialized to use the default constructor of the type that is being lazily initialized, and that type does not have a public, parameterless constructor.","nodes":[{"pos":[0,204],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Lazy`1\"&gt;&lt;/xref&gt;</ph> instance is initialized to use the default constructor of the type that is being lazily initialized, and that type does not have a public, parameterless constructor.","source":"The <xref href=\"System.Lazy`1\"></xref> instance is initialized to use the default constructor of the type that is being lazily initialized, and that type does not have a public, parameterless constructor."}],"pos":[58640,58845],"yaml":true},{"content":"The initialization function tries to access <xref href=\"System.Lazy`1.Value\"></xref> on this instance.","nodes":[{"pos":[0,102],"content":"The initialization function tries to access <ph id=\"ph1\">&lt;xref href=\"System.Lazy`1.Value\"&gt;&lt;/xref&gt;</ph> on this instance.","source":"The initialization function tries to access <xref href=\"System.Lazy`1.Value\"></xref> on this instance."}],"pos":[58955,59058],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Lazy`1\n  commentId: T:System.Lazy`1\n  id: Lazy`1\n  children:\n  - System.Lazy`1.#ctor\n  - System.Lazy`1.#ctor(System.Boolean)\n  - System.Lazy`1.#ctor(System.Func{`0})\n  - System.Lazy`1.#ctor(System.Threading.LazyThreadSafetyMode)\n  - System.Lazy`1.#ctor(`0)\n  - System.Lazy`1.#ctor(System.Func{`0},System.Boolean)\n  - System.Lazy`1.#ctor(System.Func{`0},System.Threading.LazyThreadSafetyMode)\n  - System.Lazy`1.IsValueCreated\n  - System.Lazy`1.ToString\n  - System.Lazy`1.Value\n  langs:\n  - csharp\n  name: Lazy<T>\n  nameWithType: Lazy<T>\n  fullName: System.Lazy<T>\n  type: Class\n  assemblies:\n  - System.Runtime\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Provides support for lazy initialization.\n  remarks: \"Use lazy initialization to defer the creation of a large or resource-intensive object, or the execution of a resource-intensive task, particularly when such creation or execution might not occur during the lifetime of the program.  \\n  \\n To prepare for lazy initialization, you create an instance of <xref:System.Lazy%601>. The type argument of the <xref:System.Lazy%601> object that you create specifies the type of the object that you want to initialize lazily. The constructor that you use to create the <xref:System.Lazy%601> object determines the characteristics of the initialization. Lazy initialization occurs the first time the <xref:System.Lazy%601.Value%2A?displayProperty=fullName> property is accessed.  \\n  \\n In most cases, choosing a constructor depends on your answers to two questions:  \\n  \\n-   Will the lazily initialized object be accessed from more than one thread? If so, the <xref:System.Lazy%601> object might create it on any thread. You can use one of the simple constructors whose default behavior is to create a thread-safe <xref:System.Lazy%601> object, so that only one instance of the lazily instantiated object is created no matter how many threads try to access it. To create a <xref:System.Lazy%601> object that is not thread safe, you must use a constructor that enables you to specify no thread safety.  \\n  \\n    > [!CAUTION]\\n    >  Making the <xref:System.Lazy%601> object thread safe does not protect the lazily initialized object. If multiple threads can access the lazily initialized object, you must make its properties and methods safe for multithreaded access.  \\n  \\n-   Does lazy initialization require a lot of code, or does the lazily initialized object have a default constructor that does everything you need and doesn't throw exceptions? If you need to write initialization code or if exceptions need to be handled, use one of the constructors that takes a factory method. Write your initialization code in the factory method.  \\n  \\n The following table shows which constructor to choose, based on these two factors:  \\n  \\n|Object will be accessed by|If no initialization code is required (default constructor), use|If initialization code is required, use|  \\n|--------------------------------|------------------------------------------------------------------------|---------------------------------------------|  \\n|Multiple threads|<xref:System.Lazy%601.%23ctor>|<xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%29>|  \\n|One thread|<xref:System.Lazy%601.%23ctor%28System.Boolean%29> with `isThreadSafe` set to `false`.|<xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Boolean%29> with `isThreadSafe` set to `false`.|  \\n  \\n You can use a lambda expression to specify the factory method. This keeps all the initialization code in one place. The lambda expression captures the context, including any arguments you pass to the lazily initialized object's constructor.  \\n  \\n **Exception caching** When you use factory methods, exceptions are cached. That is, if the factory method throws an exception the first time a thread tries to access the <xref:System.Lazy%601.Value%2A> property of the <xref:System.Lazy%601> object, the same exception is thrown on every subsequent attempt. This ensures that every call to the <xref:System.Lazy%601.Value%2A> property produces the same result and avoids subtle errors that might arise if different threads get different results. The <xref:System.Lazy%601> stands in for an actual `T` that otherwise would have been initialized at some earlier point, usually during startup. A failure at that earlier point is usually fatal. If there is a potential for a recoverable failure, we recommend that you build the retry logic into the initialization routine (in this case, the factory method), just as you would if you werenâ€™t using lazy initialization.  \\n  \\n **Alternative to locking** In certain situations, you might want to avoid the overhead of the <xref:System.Lazy%601> object's default locking behavior. In rare situations, there might be a potential for deadlocks. In such cases, you can use the <xref:System.Lazy%601.%23ctor%28System.Threading.LazyThreadSafetyMode%29> or <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29> constructor, and specify <xref:System.Threading.LazyThreadSafetyMode?displayProperty=fullName>. This enables the <xref:System.Lazy%601> object to create a copy of the lazily initialized object on each of several threads if the threads call the <xref:System.Lazy%601.Value%2A> property simultaneously. The <xref:System.Lazy%601> object ensures that all threads use the same instance of the lazily initialized object and discards the instances that are not used. Thus, the cost of reducing the locking overhead is that your program might sometimes create and discard extra copies of an expensive object. In most cases, this is unlikely. The examples for the <xref:System.Lazy%601.%23ctor%28System.Threading.LazyThreadSafetyMode%29> and <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29> constructors demonstrate this behavior.  \\n  \\n> [!IMPORTANT]\\n>  When you specify <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly>, exceptions are never cached, even if you specify a factory method.  \\n  \\n **Equivalent constructors** In addition to enabling the use of <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly>, the <xref:System.Lazy%601.%23ctor%28System.Threading.LazyThreadSafetyMode%29> and <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29> constructors can duplicate the functionality of the other constructors. The following table shows the parameter values that produce equivalent behavior.  \\n  \\n|To create a <xref:System.Lazy%601> object that is|For constructors that have a `LazyThreadSafetyMode` `mode` parameter, set `mode` to|For constructors that have a Boolean `isThreadSafe` parameter, set `isThreadSafe` to|For constructors with no thread safety parameters|  \\n|-------------------------------------------------------------------------------------------------------------------------------------------------------|-----------------------------------------------------------------------------------------|------------------------------------------------------------------------------------------|-------------------------------------------------------|  \\n|Fully thread safe; uses locking to ensure that only one thread initializes the value.|<xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication>|`true`|All such constructors are fully thread safe.|  \\n|Not thread safe.|<xref:System.Threading.LazyThreadSafetyMode.None>|`false`|Not applicable.|  \\n|Fully thread safe; threads race to initialize the value.|<xref:System.Threading.LazyThreadSafetyMode.PublicationOnly>|Not applicable.|Not applicable.|  \\n  \\n **Other capabilities** For information about the use of <xref:System.Lazy%601> with thread-static fields, or as the backing store for properties, see [Lazy Initialization](~/docs/framework/performance/lazy-initialization.md).\"\n  example:\n  - \"The following example demonstrates the use of the <xref:System.Lazy%601> class to provide lazy initialization with access from multiple threads.  \\n  \\n> [!NOTE]\\n>  The example uses the <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%29> constructor. It also demonstrates the use of the <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Boolean%29> constructor (specifying `true` for `isThreadSafe`) and the <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29> constructor (specifying <xref:System.Threading.LazyThreadSafetyMode?displayProperty=fullName> for `mode`). To switch to a different constructor, just change which constructors are commented out.  \\n>   \\n>  For an example that demonstrates exception caching using the same constructors, see the <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%29> constructor.  \\n  \\n The example defines a `LargeObject` class that will be initialized lazily by one of several threads. The four key sections of code illustrate the creation of the initializer, the factory method, the actual initialization, and the constructor of the `LargeObject` class, which displays a message when the object is created. At the beginning of the `Main` method, the example creates the thread-safe lazy initializer for `LargeObject`:  \\n  \\n [!code-csharp[System.Lazy\\\\`1#NewLazy](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1/cs/example.cs#newlazy)]\\n [!code-vb[System.Lazy\\\\`1#NewLazy](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1/vb/example.vb#newlazy)]  \\n  \\n The factory method shows the creation of the object, with a placeholder for further initialization:  \\n  \\n [!code-csharp[System.Lazy\\\\`1#FactoryFunc](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1/cs/example.cs#factoryfunc)]\\n [!code-vb[System.Lazy\\\\`1#FactoryFunc](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1/vb/example.vb#factoryfunc)]  \\n  \\n Note that the first two code sections could be combined by using a lambda function, as shown here:  \\n  \\n [!code-csharp[System.Lazy\\\\`1#InitWithLambda](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1/cs/lambda.cs#initwithlambda)]\\n [!code-vb[System.Lazy\\\\`1#InitWithLambda](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1/vb/lambda.vb#initwithlambda)]  \\n  \\n The example pauses, to indicate that an indeterminate period may elapse before lazy initialization occurs. When you press the **Enter** key, the example creates and starts three threads. The `ThreadProc` method that's used by all three threads calls the <xref:System.Lazy%601.Value%2A> property. The first time this happens, the `LargeObject` instance is created:  \\n  \\n [!code-csharp[System.Lazy\\\\`1#ValueProp](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1/cs/example.cs#valueprop)]\\n [!code-vb[System.Lazy\\\\`1#ValueProp](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1/vb/example.vb#valueprop)]  \\n  \\n The constructor of the `LargeObject` class, which includes the last key section of code, displays a message and records the identity of the initializing thread. The output from the program appears at the end of the full code listing.  \\n  \\n [!code-csharp[System.Lazy\\\\`1#LargeCtor](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1/cs/example.cs#largector)]\\n [!code-vb[System.Lazy\\\\`1#LargeCtor](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1/vb/example.vb#largector)]  \\n  \\n> [!NOTE]\\n>  For simplicity, this example uses a global instance of <xref:System.Lazy%601>, and all the methods are `static` (`Shared` in Visual Basic). These are not requirements for the use of lazy initialization.  \\n  \\n [!code-csharp[System.Lazy\\\\`1#All](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1/cs/example.cs#all)]\\n [!code-vb[System.Lazy\\\\`1#All](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1/vb/example.vb#all)]\"\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(false)]\n\n      public class Lazy<T>\n    typeParameters:\n    - id: T\n      description: The type of object that is being lazily initialized.\n  inheritance:\n  - System.Object\n  derivedClasses:\n  - System.Lazy`2\n  implements: []\n  inheritedMembers:\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  attributes:\n  - type: System.Runtime.InteropServices.ComVisibleAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Lazy`1.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Lazy`1.#ctor\n  commentId: M:System.Lazy`1.#ctor\n  id: '#ctor'\n  parent: System.Lazy`1\n  langs:\n  - csharp\n  name: Lazy<T>()\n  nameWithType: Lazy<T>.Lazy<T>()\n  fullName: Lazy<T>.Lazy<T>()\n  type: Constructor\n  assemblies:\n  - System.Runtime\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Initializes a new instance of the <xref href=\"System.Lazy`1\"></xref> class. When lazy initialization occurs, the default constructor of the target type is used.\n  remarks: \"An instance that is created with this constructor may be used concurrently from multiple threads.  \\n  \\n The thread safety mode of a <xref:System.Lazy%601> instance that is initialized with this constructor is <xref:System.Threading.LazyThreadSafetyMode?displayProperty=fullName>. The thread safety mode describes the behavior when multiple threads try to initialize the <xref:System.Lazy%601> instance.  \\n  \\n A <xref:System.Lazy%601> instance that is created with this constructor does not cache exceptions. For more information, see the <xref:System.Lazy%601>class or the <xref:System.Threading.LazyThreadSafetyMode?displayProperty=fullName> enumeration.\"\n  example:\n  - \"The following example demonstrates the use of this constructor. It also illustrates the use of the <xref:System.Lazy%601.%23ctor%28System.Boolean%29> constructor (specifying `true` for `isThreadSafe`) and the <xref:System.Lazy%601.%23ctor%28System.Threading.LazyThreadSafetyMode%29> constructor (specifying <xref:System.Threading.LazyThreadSafetyMode?displayProperty=fullName> for `mode`). To switch to a different constructor, just change which constructors are commented out.  \\n  \\n The example defines a `LargeObject` class that will be initialized lazily by one of several threads. The two key lines of code in this example are the creation of the initializer and the actual initialization. At the beginning of the `Main` method, the example creates the thread-safe lazy initializer for `LargeObject`:  \\n  \\n [!code-csharp[System.Lazy\\\\`1.ctor#NewLazy](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctor/cs/example.cs#newlazy)]\\n [!code-vb[System.Lazy\\\\`1.ctor#NewLazy](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctor/vb/example.vb#newlazy)]  \\n  \\n The example creates and starts three threads that block on a <xref:System.Threading.ManualResetEvent> object, so that the example can release the threads all at once. The `ThreadProc` method that's used by all three threads calls the <xref:System.Lazy%601.Value%2A> property to get the `LargeObject` instance:  \\n  \\n [!code-csharp[System.Lazy\\\\`1.ctor#ValueProp](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctor/cs/example.cs#valueprop)]\\n [!code-vb[System.Lazy\\\\`1.ctor#ValueProp](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctor/vb/example.vb#valueprop)]  \\n  \\n The <xref:System.Lazy%601> class provides locking, so that only one thread is allowed to create the `LargeObject` instance. The example demonstrates that the other threads all get the same instance.  \\n  \\n> [!NOTE]\\n>  For simplicity, this example uses a global instance of <xref:System.Lazy%601>, and all the methods are `static` (`Shared` in Visual Basic). These are not requirements for the use of lazy initialization.  \\n  \\n [!code-csharp[System.Lazy\\\\`1.ctor#All](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctor/cs/example.cs#all)]\\n [!code-vb[System.Lazy\\\\`1.ctor#All](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctor/vb/example.vb#all)]\"\n  syntax:\n    content: public Lazy ();\n    parameters: []\n  overload: System.Lazy`1.#ctor*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Lazy`1.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Lazy`1.#ctor(System.Boolean)\n  commentId: M:System.Lazy`1.#ctor(System.Boolean)\n  id: '#ctor(System.Boolean)'\n  parent: System.Lazy`1\n  langs:\n  - csharp\n  name: Lazy<T>(Boolean)\n  nameWithType: Lazy<T>.Lazy<T>(Boolean)\n  fullName: Lazy<T>.Lazy<T>(Boolean)\n  type: Constructor\n  assemblies:\n  - System.Runtime\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Initializes a new instance of the <xref href=\"System.Lazy`1\"></xref> class. When lazy initialization occurs, the default constructor of the target type and the specified initialization mode are used.\n  remarks: \"The thread safety mode of a <xref:System.Lazy%601> instance that is initialized with this constructor is <xref:System.Threading.LazyThreadSafetyMode?displayProperty=fullName> if `isThreadSafe` is `true`; otherwise, the mode is <xref:System.Threading.LazyThreadSafetyMode?displayProperty=fullName>. The thread safety mode describes the behavior when multiple threads try to initialize the <xref:System.Lazy%601> instance. To specify the <xref:System.Threading.LazyThreadSafetyMode?displayProperty=fullName> mode, use the <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29> or <xref:System.Lazy%601.%23ctor%28System.Threading.LazyThreadSafetyMode%29> constructor.  \\n  \\n A <xref:System.Lazy%601> instance that is created with this constructor does not cache exceptions. For more information, see the<xref:System.Lazy%601> class or the <xref:System.Threading.LazyThreadSafetyMode?displayProperty=fullName> enumeration.\"\n  example:\n  - \"The following example demonstrates the use of this constructor to create a lazy initializer that is not thread safe, for scenarios where all access to the lazily initialized object occurs on the same thread. It also demonstrates the use of the <xref:System.Lazy%601.%23ctor%28System.Threading.LazyThreadSafetyMode%29> constructor (specifying <xref:System.Threading.LazyThreadSafetyMode?displayProperty=fullName> for `mode`. To switch to a different constructor, just change which constructor is commented out.  \\n  \\n> [!NOTE]\\n>  For code that demonstrates how to use this constructor in multithreaded scenarios (specifying `true` for `isThreadSafe`), see the example for the <xref:System.Lazy%601.%23ctor> constructor.  \\n  \\n The example defines a `LargeObject` class that will be initialized lazily. In the `Main` method, the example creates a <xref:System.Lazy%601> instance and then pauses. When you press the **Enter** key, the example accesses the <xref:System.Lazy%601.Value%2A> property of the <xref:System.Lazy%601> instance, which causes initialization to occur. The constructor of the `LargeObject` class displays a console message.  \\n  \\n> [!NOTE]\\n>  For simplicity, this example uses a global instance of <xref:System.Lazy%601>, and all the methods are `static` (`Shared` in Visual Basic). These are not requirements for the use of lazy initialization.  \\n  \\n [!code-csharp[System.Lazy\\\\`1.ctorBool#All](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorbool/cs/example.cs#all)]\\n [!code-vb[System.Lazy\\\\`1.ctorBool#All](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorbool/vb/example.vb#all)]\"\n  syntax:\n    content: public Lazy (bool isThreadSafe);\n    parameters:\n    - id: isThreadSafe\n      type: System.Boolean\n      description: '`true` to make this instance usable concurrently by multiple threads; `false` to make the instance usable by only one thread at a time.'\n  overload: System.Lazy`1.#ctor*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Lazy`1.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Lazy`1.#ctor(System.Func{`0})\n  commentId: M:System.Lazy`1.#ctor(System.Func{`0})\n  id: '#ctor(System.Func{`0})'\n  parent: System.Lazy`1\n  langs:\n  - csharp\n  name: Lazy<T>(Func<T>)\n  nameWithType: Lazy<T>.Lazy<T>(Func<T>)\n  fullName: Lazy<T>.Lazy<T>(Func<T>)\n  type: Constructor\n  assemblies:\n  - System.Runtime\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Initializes a new instance of the <xref href=\"System.Lazy`1\"></xref> class. When lazy initialization occurs, the specified initialization function is used.\n  remarks: \"An instance that is created with this constructor may be used concurrently from multiple threads.  \\n  \\n The thread safety mode of a <xref:System.Lazy%601> instance that is initialized with this constructor is <xref:System.Threading.LazyThreadSafetyMode?displayProperty=fullName>. The thread safety mode describes the behavior when multiple threads try to initialize the <xref:System.Lazy%601> instance.  \\n  \\n Exceptions that are thrown by `valueFactory` are cached. For more information, see the <xref:System.Lazy%601> class or the <xref:System.Threading.LazyThreadSafetyMode?displayProperty=fullName> enumeration.\"\n  example:\n  - \"The following example demonstrates the use of this constructor to provide lazy initialization with exception caching. It also demonstrates the use of the <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Boolean%29> constructor (specifying `true` for `isThreadSafe`) and the <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29> constructor (specifying <xref:System.Threading.LazyThreadSafetyMode?displayProperty=fullName> for `mode`). To switch to a different constructor, just change which constructors are commented out.  \\n  \\n The example defines a `LargeObject` class that will be initialized lazily by one of several threads. The three key sections of code illustrate the creation of the initializer, the actual initialization, and the constructor of the `LargeObject` class, which demonstrates exception caching. At the beginning of the `Main` method, the example creates the thread-safe lazy initializer for `LargeObject`:  \\n  \\n [!code-csharp[System.Lazy\\\\`1.ctorFunc#NewLazy](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorfunc/cs/example.cs#newlazy)]\\n [!code-vb[System.Lazy\\\\`1.ctorFunc#NewLazy](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorfunc/vb/example.vb#newlazy)]  \\n  \\n The example creates and starts three threads. The `ThreadProc` method that's used by all three threads calls the <xref:System.Lazy%601.Value%2A> property to get the `LargeObject` instance:  \\n  \\n [!code-csharp[System.Lazy\\\\`1.ctorFunc#ValueProp](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorfunc/cs/example.cs#valueprop)]\\n [!code-vb[System.Lazy\\\\`1.ctorFunc#ValueProp](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorfunc/vb/example.vb#valueprop)]  \\n  \\n In the constructor of the `LargeObject` class, the third key section of code throws an exception the first time a `LargeObject` instance is created, but thereafter allows instance creation to occur:  \\n  \\n [!code-csharp[System.Lazy\\\\`1.ctorFunc#LargeCtor](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorfunc/cs/example.cs#largector)]\\n [!code-vb[System.Lazy\\\\`1.ctorFunc#LargeCtor](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorfunc/vb/example.vb#largector)]  \\n  \\n When the example is run, the first thread that tries to create an instance of `LargeObject` fails, and the exception is caught. You might expect that the next thread would successfully create an instance, but the <xref:System.Lazy%601> object has cached the exception. Because of this, all three threads throw the exception.  \\n  \\n> [!NOTE]\\n>  For simplicity, this example uses a global instance of <xref:System.Lazy%601>, and all the methods are `static` (`Shared` in Visual Basic). These are not requirements for the use of lazy initialization.  \\n  \\n [!code-csharp[System.Lazy\\\\`1.ctorFunc#All](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorfunc/cs/example.cs#all)]\\n [!code-vb[System.Lazy\\\\`1.ctorFunc#All](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorfunc/vb/example.vb#all)]\"\n  syntax:\n    content: public Lazy (Func<T> valueFactory);\n    parameters:\n    - id: valueFactory\n      type: System.Func{T}\n      description: The delegate that is invoked to produce the lazily initialized value when it is needed.\n  overload: System.Lazy`1.#ctor*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>valueFactory</code> is `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Lazy`1.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Lazy`1.#ctor(System.Threading.LazyThreadSafetyMode)\n  commentId: M:System.Lazy`1.#ctor(System.Threading.LazyThreadSafetyMode)\n  id: '#ctor(System.Threading.LazyThreadSafetyMode)'\n  parent: System.Lazy`1\n  langs:\n  - csharp\n  name: Lazy<T>(LazyThreadSafetyMode)\n  nameWithType: Lazy<T>.Lazy<T>(LazyThreadSafetyMode)\n  fullName: Lazy<T>.Lazy<T>(LazyThreadSafetyMode)\n  type: Constructor\n  assemblies:\n  - System.Runtime\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Initializes a new instance of the <xref href=\"System.Lazy`1\"></xref> class that uses the default constructor of <code>T</code> and the specified thread-safety mode.\n  remarks: \"The thread safety mode of a <xref:System.Lazy%601> instance describes the behavior when multiple threads try to initialize the <xref:System.Lazy%601> instance.  \\n  \\n A <xref:System.Lazy%601> instance that is created with this constructor does not cache exceptions. For more information, see the <xref:System.Lazy%601> class or the <xref:System.Threading.LazyThreadSafetyMode?displayProperty=fullName> enumeration.\"\n  example:\n  - \"The following example demonstrates the use of this constructor to create a lazy initializer that enables multiple threads to race to create an object lazily. Multiple threads might succeed in creating instances, but all threads use the instance that was created first.  \\n  \\n> [!NOTE]\\n>  For an example that demonstrates how to use this constructor in single-threaded scenarios (specifying <xref:System.Threading.LazyThreadSafetyMode?displayProperty=fullName> for `mode`), see the <xref:System.Lazy%601.%23ctor%28System.Boolean%29> constructor. For an example that demonstrates how to use this constructor to provide locking instead of race conditions in multithreaded scenarios (specifying <xref:System.Threading.LazyThreadSafetyMode?displayProperty=fullName> for `mode`), see the <xref:System.Lazy%601.%23ctor> constructor.  \\n  \\n The example defines a `LargeObject` class that will be initialized lazily by any of several threads. The three key sections of code illustrate the creation of the initializer, the actual initialization, and the constructor and finalizer of the `LargeObject` class. At the beginning of the `Main` method, the example creates the <xref:System.Lazy%601> object that performs lazy initialization of the `LargeObject`:  \\n  \\n [!code-csharp[System.Lazy\\\\`1.ctorLTSM#NewLazy](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorltsm/cs/example.cs#newlazy)]\\n [!code-vb[System.Lazy\\\\`1.ctorLTSM#NewLazy](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorltsm/vb/example.vb#newlazy)]  \\n  \\n The example creates and starts three threads that block on a <xref:System.Threading.ManualResetEvent> object, so that the example can release the threads all at once. In the `ThreadProc` method that's used by all three threads, calling the <xref:System.Lazy%601.Value%2A> property creates the `LargeObject` instance:  \\n  \\n [!code-csharp[System.Lazy\\\\`1.ctorLTSM#ValueProp](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorltsm/cs/example.cs#valueprop)]\\n [!code-vb[System.Lazy\\\\`1.ctorLTSM#ValueProp](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorltsm/vb/example.vb#valueprop)]  \\n  \\n Because the constructor for the <xref:System.Lazy%601> instance specified <xref:System.Threading.LazyThreadSafetyMode?displayProperty=fullName>, all three threads are allowed to create `LargeObject` instances. The example demonstrates this by displaying console messages in the constructor and in the finalizer of the `LargeObject` class:  \\n  \\n [!code-csharp[System.Lazy\\\\`1.ctorLTSM#CtorFinalizer](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorltsm/cs/example.cs#ctorfinalizer)]\\n [!code-vb[System.Lazy\\\\`1.ctorLTSM#CtorFinalizer](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorltsm/vb/example.vb#ctorfinalizer)]  \\n  \\n However, the <xref:System.Lazy%601> object ensures that only one instance is used by all threads. The output from the example shows that all three threads use the same instance, and also shows that the other two instances can be reclaimed by garbage collection.  \\n  \\n> [!NOTE]\\n>  For simplicity, this example uses a global instance of <xref:System.Lazy%601>, and all the methods are `static` (`Shared` in Visual Basic). These are not requirements for the use of lazy initialization.  \\n  \\n [!code-csharp[System.Lazy\\\\`1.ctorLTSM#All](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorltsm/cs/example.cs#all)]\\n [!code-vb[System.Lazy\\\\`1.ctorLTSM#All](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorltsm/vb/example.vb#all)]\"\n  syntax:\n    content: public Lazy (System.Threading.LazyThreadSafetyMode mode);\n    parameters:\n    - id: mode\n      type: System.Threading.LazyThreadSafetyMode\n      description: One of the enumeration values that specifies the thread safety mode.\n  overload: System.Lazy`1.#ctor*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>mode</code> contains an invalid value.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Lazy`1.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Lazy`1.#ctor(`0)\n  commentId: M:System.Lazy`1.#ctor(`0)\n  id: '#ctor(`0)'\n  parent: System.Lazy`1\n  langs:\n  - csharp\n  name: Lazy<T>(T)\n  nameWithType: Lazy<T>.Lazy<T>(T)\n  fullName: Lazy<T>.Lazy<T>(T)\n  type: Constructor\n  assemblies:\n  - System.Runtime\n  namespace: System\n  syntax:\n    content: public Lazy (T value);\n    parameters:\n    - id: value\n      type: T\n      description: ''\n  overload: System.Lazy`1.#ctor*\n  exceptions: []\n  version:\n  - netcore-2.0\n  monikers:\n  - netcore-2.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Lazy`1.xml\n- uid: System.Lazy`1.#ctor(System.Func{`0},System.Boolean)\n  commentId: M:System.Lazy`1.#ctor(System.Func{`0},System.Boolean)\n  id: '#ctor(System.Func{`0},System.Boolean)'\n  parent: System.Lazy`1\n  langs:\n  - csharp\n  name: Lazy<T>(Func<T>, Boolean)\n  nameWithType: Lazy<T>.Lazy<T>(Func<T>, Boolean)\n  fullName: Lazy<T>.Lazy<T>(Func<T>, Boolean)\n  type: Constructor\n  assemblies:\n  - System.Runtime\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Initializes a new instance of the <xref href=\"System.Lazy`1\"></xref> class. When lazy initialization occurs, the specified initialization function and initialization mode are used.\n  remarks: \"The thread safety mode of a <xref:System.Lazy%601> instance that is initialized with this constructor is <xref:System.Threading.LazyThreadSafetyMode?displayProperty=fullName> if `isThreadSafe` is `true`; otherwise, the mode is <xref:System.Threading.LazyThreadSafetyMode?displayProperty=fullName>. The thread safety mode describes the behavior when multiple threads try to initialize the <xref:System.Lazy%601> instance.  \\n  \\n To specify the <xref:System.Threading.LazyThreadSafetyMode?displayProperty=fullName> mode, use the <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29> or <xref:System.Lazy%601.%23ctor%28System.Threading.LazyThreadSafetyMode%29> constructor.  \\n  \\n Exceptions that are thrown by `valueFactory` are cached. For more information, see the <xref:System.Lazy%601> class or the <xref:System.Threading.LazyThreadSafetyMode?displayProperty=fullName> enumeration.\"\n  example:\n  - \"The following example demonstrates the use of this constructor to provide lazy initialization with exception caching, in a scenario with a single thread. It also demonstrates the use of the  <xref:System.Lazy%601.%23ctor%2A>constructor (specifying <xref:System.Threading.LazyThreadSafetyMode?displayProperty=fullName> for `mode`). To switch to that constructor, just change which constructor is commented out.  \\n  \\n> [!NOTE]\\n>  For code that demonstrates how to use this constructor in multithreaded scenarios (specifying `true` for `isThreadSafe`), see the example for the <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%29> constructor.  \\n  \\n The example defines a `LargeObject` class that will be initialized lazily by one of several threads. The three key sections of code illustrate the creation of the initializer, the actual initialization, and the constructor of the `LargeObject` class, which demonstrates exception caching. At the beginning of the `Main` method, the example creates the thread-safe lazy initializer for `LargeObject`:  \\n  \\n [!code-csharp[System.Lazy\\\\`1.ctorFuncBool#NewLazy](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorfuncbool/cs/example.cs#newlazy)]\\n [!code-vb[System.Lazy\\\\`1.ctorFuncBool#NewLazy](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorfuncbool/vb/example.vb#newlazy)]  \\n  \\n In the call to the constructor, the `isThreadSafe` parameter is `false`, so the <xref:System.Lazy%601> is not thread safe. Because it's not thread safe, the example calls the <xref:System.Lazy%601.Value%2A> property three times on the same thread:  \\n  \\n [!code-csharp[System.Lazy\\\\`1.ctorFuncBool#ValueProp](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorfuncbool/cs/example.cs#valueprop)]\\n [!code-vb[System.Lazy\\\\`1.ctorFuncBool#ValueProp](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorfuncbool/vb/example.vb#valueprop)]  \\n  \\n In the constructor of the `LargeObject` class, the third key section of code throws an exception the first time a `LargeObject` instance is created, but thereafter allows instance creation to occur:  \\n  \\n [!code-csharp[System.Lazy\\\\`1.ctorFuncBool#LargeCtor](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorfuncbool/cs/example.cs#largector)]\\n [!code-vb[System.Lazy\\\\`1.ctorFuncBool#LargeCtor](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorfuncbool/vb/example.vb#largector)]  \\n  \\n When the example is run, the first attempt to create an instance of `LargeObject` fails, and the exception is caught. You might expect that the next attempt would succeed, but the <xref:System.Lazy%601> object has cached the exception. Because of this, all three attempts throw the exception.  \\n  \\n> [!NOTE]\\n>  For simplicity, this example uses a global instance of <xref:System.Lazy%601>, and all the methods are `static` (`Shared` in Visual Basic). These are not requirements for the use of lazy initialization.  \\n  \\n [!code-csharp[System.Lazy\\\\`1.ctorFuncBool#All](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorfuncbool/cs/example.cs#all)]\\n [!code-vb[System.Lazy\\\\`1.ctorFuncBool#All](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorfuncbool/vb/example.vb#all)]\"\n  syntax:\n    content: public Lazy (Func<T> valueFactory, bool isThreadSafe);\n    parameters:\n    - id: valueFactory\n      type: System.Func{T}\n      description: The delegate that is invoked to produce the lazily initialized value when it is needed.\n    - id: isThreadSafe\n      type: System.Boolean\n      description: '`true` to make this instance usable concurrently by multiple threads; `false` to make this instance usable by only one thread at a time.'\n  overload: System.Lazy`1.#ctor*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>valueFactory</code> is `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Lazy`1.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Lazy`1.#ctor(System.Func{`0},System.Threading.LazyThreadSafetyMode)\n  commentId: M:System.Lazy`1.#ctor(System.Func{`0},System.Threading.LazyThreadSafetyMode)\n  id: '#ctor(System.Func{`0},System.Threading.LazyThreadSafetyMode)'\n  parent: System.Lazy`1\n  langs:\n  - csharp\n  name: Lazy<T>(Func<T>, LazyThreadSafetyMode)\n  nameWithType: Lazy<T>.Lazy<T>(Func<T>, LazyThreadSafetyMode)\n  fullName: Lazy<T>.Lazy<T>(Func<T>, LazyThreadSafetyMode)\n  type: Constructor\n  assemblies:\n  - System.Runtime\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Initializes a new instance of the <xref href=\"System.Lazy`1\"></xref> class that uses the specified initialization function and thread-safety mode.\n  remarks: \"The thread safety mode of a <xref:System.Lazy%601> instance describes the behavior when multiple threads try to initialize the <xref:System.Lazy%601> instance.  \\n  \\n Exceptions that are thrown by `valueFactory` are cached, unless `mode` is <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly>. For more information, see the <xref:System.Lazy%601> class or the <xref:System.Threading.LazyThreadSafetyMode?displayProperty=fullName> enumeration.\"\n  example:\n  - \"The following example demonstrates the use of this constructor to create a lazy initializer that enables multiple threads to race to create an object lazily. Multiple threads might succeed in creating instances, but all threads use the instance that was created first. In addition, the example demonstrates that exceptions are never cached when you specify <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly>, even if initialization is performed by a function instead of by the default constructor of the lazily created type.  \\n  \\n> [!NOTE]\\n>  For an example that demonstrates how to use this constructor in single-threaded scenarios (specifying <xref:System.Threading.LazyThreadSafetyMode?displayProperty=fullName> for `mode`), see the <xref:System.Lazy%601.%23ctor%28System.Boolean%29> constructor. For an example that demonstrates how to use this constructor to provide locking instead of race conditions in multithreaded scenarios (specifying <xref:System.Threading.LazyThreadSafetyMode?displayProperty=fullName> for `mode`), see the <xref:System.Lazy%601.%23ctor> constructor.  \\n  \\n The example defines a `LargeObject` class that will be initialized lazily by any of several threads. The four key sections of code illustrate the creation of the initializer, the actual initialization, the initialization function, and the constructor and finalizer of the `LargeObject` class. At the beginning of the `Main` method, the example creates the <xref:System.Lazy%601> object that performs lazy initialization of the `LargeObject`:  \\n  \\n [!code-csharp[System.Lazy\\\\`1.ctorFuncLTSM#NewLazy](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorfuncltsm/cs/example.cs#newlazy)]\\n [!code-vb[System.Lazy\\\\`1.ctorFuncLTSM#NewLazy](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorfuncltsm/vb/example.vb#newlazy)]  \\n  \\n The lazy initializer uses a function to perform the initialization. In this case, a function is required because there is no default constructor for the `LargeObject` class.  \\n  \\n The example creates and starts three threads that block on a <xref:System.Threading.ManualResetEvent> object, so that the example can release the threads all at once. In the `ThreadProc` method that's used by all three threads, calling the <xref:System.Lazy%601.Value%2A> property creates the `LargeObject` instance:  \\n  \\n [!code-csharp[System.Lazy\\\\`1.ctorFuncLTSM#ValueProp](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorfuncltsm/cs/example.cs#valueprop)]\\n [!code-vb[System.Lazy\\\\`1.ctorFuncLTSM#ValueProp](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorfuncltsm/vb/example.vb#valueprop)]  \\n  \\n In the third key section of code, the lazy initialization function is called to create the `LargeObject` instance. The function throws an exception the first time it's called:  \\n  \\n [!code-csharp[System.Lazy\\\\`1.ctorFuncLTSM#FactoryFunc](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorfuncltsm/cs/example.cs#factoryfunc)]\\n [!code-vb[System.Lazy\\\\`1.ctorFuncLTSM#FactoryFunc](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorfuncltsm/vb/example.vb#factoryfunc)]  \\n  \\n With any other <xref:System.Threading.LazyThreadSafetyMode> setting, an unhandled exception in the initialization function would be cached. However, <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly> suppresses exception caching. The output from the example demonstrates that a subsequent attempt to initialize the object succeeds.  \\n  \\n> [!NOTE]\\n>  The exception message usually appears after messages indicating that other threads have successfully initialized the object. This is because of the delay introduced by throwing and catching the exception.  \\n  \\n Because the constructor for the <xref:System.Lazy%601> instance specified <xref:System.Threading.LazyThreadSafetyMode?displayProperty=fullName>, all three threads are allowed to create `LargeObject` instances. The example demonstrates this by displaying console messages in the constructor and in the finalizer of the `LargeObject` class:  \\n  \\n [!code-csharp[System.Lazy\\\\`1.ctorFuncLTSM#CtorFinalizer](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorfuncltsm/cs/example.cs#ctorfinalizer)]\\n [!code-vb[System.Lazy\\\\`1.ctorFuncLTSM#CtorFinalizer](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorfuncltsm/vb/example.vb#ctorfinalizer)]  \\n  \\n The <xref:System.Lazy%601> object ensures that only one instance is used by all threads (except the thread where the initialization function throws an exception). The output from the example shows this.  \\n  \\n> [!NOTE]\\n>  For simplicity, this example uses a global instance of <xref:System.Lazy%601>, and all the methods are `static` (`Shared` in Visual Basic). These are not requirements for the use of lazy initialization.  \\n  \\n [!code-csharp[System.Lazy\\\\`1.ctorFuncLTSM#All](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorfuncltsm/cs/example.cs#all)]\\n [!code-vb[System.Lazy\\\\`1.ctorFuncLTSM#All](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorfuncltsm/vb/example.vb#all)]\"\n  syntax:\n    content: public Lazy (Func<T> valueFactory, System.Threading.LazyThreadSafetyMode mode);\n    parameters:\n    - id: valueFactory\n      type: System.Func{T}\n      description: The delegate that is invoked to produce the lazily initialized value when it is needed.\n    - id: mode\n      type: System.Threading.LazyThreadSafetyMode\n      description: One of the enumeration values that specifies the thread safety mode.\n  overload: System.Lazy`1.#ctor*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>mode</code> contains an invalid value.\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>valueFactory</code> is `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Lazy`1.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Lazy`1.IsValueCreated\n  commentId: P:System.Lazy`1.IsValueCreated\n  id: IsValueCreated\n  parent: System.Lazy`1\n  langs:\n  - csharp\n  name: IsValueCreated\n  nameWithType: Lazy<T>.IsValueCreated\n  fullName: Lazy<T>.IsValueCreated\n  type: Property\n  assemblies:\n  - System.Runtime\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Gets a value that indicates whether a value has been created for this <xref href=\"System.Lazy`1\"></xref> instance.\n  remarks: \"When lazy initialization occurs for a <xref:System.Lazy%601> instance, it may result in either a value being created or an exception being thrown. If an exception is thrown, subsequent behavior of the <xref:System.Lazy%601> instance depends on whether exception caching is in effect. If the <xref:System.Lazy%601> instance was created by using a constructor that does not specify an initialization function, then exception caching is not in effect. A subsequent attempt to initialize the <xref:System.Lazy%601> might succeed, and after successful initialization the <xref:System.Lazy%601.IsValueCreated%2A> property returns `true`. If the <xref:System.Lazy%601> instance was created with an initialization function (specified by the `valueFactory` parameter of the <xref:System.Lazy%601> constructor), then exception caching is controlled by the thread safety mode.  \\n  \\n-   If the mode is <xref:System.Threading.LazyThreadSafetyMode?displayProperty=fullName> or <xref:System.Threading.LazyThreadSafetyMode?displayProperty=fullName>, there is no second chance to initialize the <xref:System.Lazy%601> instance. If an exception occurs and is unhandled in the initialization function, that exception is cached and rethrown on subsequent accesses of the <xref:System.Lazy%601.Value%2A?displayProperty=fullName>property. No value is created if an exception is thrown, so in such cases <xref:System.Lazy%601.IsValueCreated%2A> returns `false`.  \\n  \\n-   If the mode is <xref:System.Threading.LazyThreadSafetyMode?displayProperty=fullName>, the first thread that succeeds in running the initialization function (or the default constructor) creates the value for the <xref:System.Lazy%601> instance. If the initialization function throws an exception on one thread, other threads can still try to initialize the <xref:System.Lazy%601> instance. Until the value is created, the <xref:System.Lazy%601.IsValueCreated%2A> property returns `false`.\"\n  syntax:\n    content: public bool IsValueCreated { get; }\n    return:\n      type: System.Boolean\n      description: '`true` if a value has been created for this <xref href=\"System.Lazy`1\"></xref> instance; otherwise, `false`.'\n  overload: System.Lazy`1.IsValueCreated*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Lazy`1.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Lazy`1.ToString\n  commentId: M:System.Lazy`1.ToString\n  id: ToString\n  parent: System.Lazy`1\n  langs:\n  - csharp\n  name: ToString()\n  nameWithType: Lazy<T>.ToString()\n  fullName: Lazy<T>.ToString()\n  type: Method\n  assemblies:\n  - System.Runtime\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Creates and returns a string representation of the <xref href=\"System.Lazy`1.Value\"></xref> property for this instance.\n  remarks: \"Calling this method does not cause initialization.  \\n  \\n The <xref:System.Lazy%601.Value%2A?displayProperty=fullName> property can be `null` after lazy initialization if the factory method that was specified for the `valueFactory` parameter of the <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%29>, <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29>, or <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Boolean%29> constructor returns `null`.\"\n  syntax:\n    content: public override string ToString ();\n    parameters: []\n    return:\n      type: System.String\n      description: The result of calling the <xref href=\"System.Object.ToString\"></xref> method on the <xref href=\"System.Lazy`1.Value\"></xref> property for this instance, if the value has been created (that is, if the <xref href=\"System.Lazy`1.IsValueCreated\"></xref> property returns `true`). Otherwise, a string indicating that the value has not been created.\n  overload: System.Lazy`1.ToString*\n  exceptions:\n  - type: System.NullReferenceException\n    commentId: T:System.NullReferenceException\n    description: The <xref href=\"System.Lazy`1.Value\"></xref> property is `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Lazy`1.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Lazy`1.Value\n  commentId: P:System.Lazy`1.Value\n  id: Value\n  parent: System.Lazy`1\n  langs:\n  - csharp\n  name: Value\n  nameWithType: Lazy<T>.Value\n  fullName: Lazy<T>.Value\n  type: Property\n  assemblies:\n  - System.Runtime\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Gets the lazily initialized value of the current <xref href=\"System.Lazy`1\"></xref> instance.\n  remarks: \"If the <xref:System.Lazy%601.IsValueCreated%2A?displayProperty=fullName> property is `false`, accessing the <xref:System.Lazy%601.Value%2A> property forces initialization.  \\n  \\n In addition to the exceptions that are listed, the <xref:System.Lazy%601.Value%2A> property can throw any unhandled exception that is thrown by the factory method that was passed to the `valueFactory` parameter of the <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%29>, <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29>, or <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Boolean%29> constructor.\"\n  syntax:\n    content: public T Value { get; }\n    return:\n      type: T\n      description: The lazily initialized value of the current <xref href=\"System.Lazy`1\"></xref> instance.\n  overload: System.Lazy`1.Value*\n  exceptions:\n  - type: System.MemberAccessException\n    commentId: T:System.MemberAccessException\n    description: The <xref href=\"System.Lazy`1\"></xref> instance is initialized to use the default constructor of the type that is being lazily initialized, and permissions to access the constructor are missing.\n  - type: System.MissingMemberException\n    commentId: T:System.MissingMemberException\n    description: The <xref href=\"System.Lazy`1\"></xref> instance is initialized to use the default constructor of the type that is being lazily initialized, and that type does not have a public, parameterless constructor.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The initialization function tries to access <xref href=\"System.Lazy`1.Value\"></xref> on this instance.\n  attributes: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Lazy`1.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\nreferences:\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.ArgumentNullException\n  parent: System\n  isExternal: false\n  name: ArgumentNullException\n  nameWithType: ArgumentNullException\n  fullName: System.ArgumentNullException\n- uid: System.ArgumentOutOfRangeException\n  parent: System\n  isExternal: false\n  name: ArgumentOutOfRangeException\n  nameWithType: ArgumentOutOfRangeException\n  fullName: System.ArgumentOutOfRangeException\n- uid: System.NullReferenceException\n  parent: System\n  isExternal: false\n  name: NullReferenceException\n  nameWithType: NullReferenceException\n  fullName: System.NullReferenceException\n- uid: System.MemberAccessException\n  parent: System\n  isExternal: false\n  name: MemberAccessException\n  nameWithType: MemberAccessException\n  fullName: System.MemberAccessException\n- uid: System.MissingMemberException\n  parent: System\n  isExternal: false\n  name: MissingMemberException\n  nameWithType: MissingMemberException\n  fullName: System.MissingMemberException\n- uid: System.InvalidOperationException\n  parent: System\n  isExternal: false\n  name: InvalidOperationException\n  nameWithType: InvalidOperationException\n  fullName: System.InvalidOperationException\n- uid: System.Lazy`1.#ctor\n  parent: System.Lazy`1\n  isExternal: false\n  name: Lazy<T>()\n  nameWithType: Lazy<T>.Lazy<T>()\n  fullName: Lazy<T>.Lazy<T>()\n- uid: System.Lazy`1.#ctor(System.Boolean)\n  parent: System.Lazy`1\n  isExternal: false\n  name: Lazy<T>(Boolean)\n  nameWithType: Lazy<T>.Lazy<T>(Boolean)\n  fullName: Lazy<T>.Lazy<T>(Boolean)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Lazy`1.#ctor(System.Func{`0})\n  parent: System.Lazy`1\n  isExternal: false\n  name: Lazy<T>(Func<T>)\n  nameWithType: Lazy<T>.Lazy<T>(Func<T>)\n  fullName: Lazy<T>.Lazy<T>(Func<T>)\n- uid: System.Func`1\n  name: Func<TResult>\n  nameWithType: Func<TResult>\n  fullName: System.Func<TResult>\n- uid: T\n  name: T\n  nameWithType: T\n  fullName: T\n- uid: System.Func{T}\n  parent: System\n  isExternal: false\n  name: Func<T>\n  nameWithType: Func<T>\n  fullName: System.Func<T>\n  spec.csharp:\n  - uid: System.Func`1\n    name: Func\n    nameWithType: Func\n    fullName: System.Func\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: T\n    name: T\n    nameWithType: T\n    fullName: T\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Lazy`1.#ctor(System.Threading.LazyThreadSafetyMode)\n  parent: System.Lazy`1\n  isExternal: false\n  name: Lazy<T>(LazyThreadSafetyMode)\n  nameWithType: Lazy<T>.Lazy<T>(LazyThreadSafetyMode)\n  fullName: Lazy<T>.Lazy<T>(LazyThreadSafetyMode)\n- uid: System.Threading.LazyThreadSafetyMode\n  parent: System.Threading\n  isExternal: false\n  name: LazyThreadSafetyMode\n  nameWithType: LazyThreadSafetyMode\n  fullName: System.Threading.LazyThreadSafetyMode\n- uid: System.Lazy`1.#ctor(`0)\n  parent: System.Lazy`1\n  isExternal: false\n  name: Lazy<T>(T)\n  nameWithType: Lazy<T>.Lazy<T>(T)\n  fullName: Lazy<T>.Lazy<T>(T)\n- uid: System.Lazy`1.#ctor(System.Func{`0},System.Boolean)\n  parent: System.Lazy`1\n  isExternal: false\n  name: Lazy<T>(Func<T>, Boolean)\n  nameWithType: Lazy<T>.Lazy<T>(Func<T>, Boolean)\n  fullName: Lazy<T>.Lazy<T>(Func<T>, Boolean)\n- uid: System.Lazy`1.#ctor(System.Func{`0},System.Threading.LazyThreadSafetyMode)\n  parent: System.Lazy`1\n  isExternal: false\n  name: Lazy<T>(Func<T>, LazyThreadSafetyMode)\n  nameWithType: Lazy<T>.Lazy<T>(Func<T>, LazyThreadSafetyMode)\n  fullName: Lazy<T>.Lazy<T>(Func<T>, LazyThreadSafetyMode)\n- uid: System.Lazy`1.IsValueCreated\n  parent: System.Lazy`1\n  isExternal: false\n  name: IsValueCreated\n  nameWithType: Lazy<T>.IsValueCreated\n  fullName: Lazy<T>.IsValueCreated\n- uid: System.Lazy`1.ToString\n  parent: System.Lazy`1\n  isExternal: false\n  name: ToString()\n  nameWithType: Lazy<T>.ToString()\n  fullName: Lazy<T>.ToString()\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Lazy`1.Value\n  parent: System.Lazy`1\n  isExternal: false\n  name: Value\n  nameWithType: Lazy<T>.Value\n  fullName: Lazy<T>.Value\n- uid: System.Lazy`1.#ctor*\n  parent: System.Lazy`1\n  isExternal: false\n  name: Lazy<T>\n  nameWithType: Lazy<T>.Lazy<T>\n  fullName: Lazy<T>.Lazy<T>\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Lazy`1.xml\n- uid: System.Lazy`1.IsValueCreated*\n  parent: System.Lazy`1\n  isExternal: false\n  name: IsValueCreated\n  nameWithType: Lazy<T>.IsValueCreated\n  fullName: Lazy<T>.IsValueCreated\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Lazy`1.xml\n- uid: System.Lazy`1.ToString*\n  parent: System.Lazy`1\n  isExternal: false\n  name: ToString\n  nameWithType: Lazy<T>.ToString\n  fullName: Lazy<T>.ToString\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Lazy`1.xml\n- uid: System.Lazy`1.Value*\n  parent: System.Lazy`1\n  isExternal: false\n  name: Value\n  nameWithType: Lazy<T>.Value\n  fullName: Lazy<T>.Value\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Lazy`1.xml\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: Object.Equals(Object)\n  fullName: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: Object.GetHashCode()\n  fullName: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: false\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n"}