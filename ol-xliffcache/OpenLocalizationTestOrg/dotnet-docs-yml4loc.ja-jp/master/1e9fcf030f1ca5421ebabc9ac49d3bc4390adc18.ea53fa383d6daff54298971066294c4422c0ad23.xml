{"nodes":[{"content":"Serves as the property entry for read/write and read-only properties such as templates.","nodes":[{"pos":[0,87],"content":"Serves as the property entry for read/write and read-only properties such as templates.","nodes":[{"content":"Serves as the property entry for read/write and read-only properties such as templates.","pos":[0,87]}]}],"pos":[485,573],"yaml":true},{"content":"A complex property entry represents an item such as a template.  \n  \n The page parser uses property entry classes during parsing to represent expressions found within server control tags.","nodes":[{"pos":[0,63],"content":"A complex property entry represents an item such as a template.","nodes":[{"content":"A complex property entry represents an item such as a template.","pos":[0,63]}]},{"pos":[70,187],"content":"The page parser uses property entry classes during parsing to represent expressions found within server control tags.","nodes":[{"content":"The page parser uses property entry classes during parsing to represent expressions found within server control tags.","pos":[0,117]}]}],"pos":[584,776],"yaml":true,"extradata":"MT"},{"content":"Gets a value indicating whether the property is a collection object.","nodes":[{"pos":[0,68],"content":"Gets a value indicating whether the property is a collection object.","nodes":[{"content":"Gets a value indicating whether the property is a collection object.","pos":[0,68]}]}],"pos":[2506,2575],"yaml":true},{"content":"`true` if the property entry represents an item that contains a collection of values; otherwise, `false`.","nodes":[{"pos":[0,105],"content":"<ph id=\"ph1\">`true`</ph> if the property entry represents an item that contains a collection of values; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` if the property entry represents an item that contains a collection of values; otherwise, `false`."}],"pos":[2694,2802],"yaml":true},{"content":"Gets or sets a value indicating whether the item represented in the property entry contains a method for setting its value.","nodes":[{"pos":[0,123],"content":"Gets or sets a value indicating whether the item represented in the property entry contains a method for setting its value.","nodes":[{"content":"Gets or sets a value indicating whether the item represented in the property entry contains a method for setting its value.","pos":[0,123]}]}],"pos":[3804,3928],"yaml":true},{"content":"`true` if the item represented by the property entry does not contain a set method; otherwise, `false`.","nodes":[{"pos":[0,103],"content":"<ph id=\"ph1\">`true`</ph> if the item represented by the property entry does not contain a set method; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` if the item represented by the property entry does not contain a set method; otherwise, `false`."}],"pos":[4044,4150],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Web.UI.ComplexPropertyEntry\n  commentId: T:System.Web.UI.ComplexPropertyEntry\n  id: ComplexPropertyEntry\n  children:\n  - System.Web.UI.ComplexPropertyEntry.IsCollectionItem\n  - System.Web.UI.ComplexPropertyEntry.ReadOnly\n  langs:\n  - csharp\n  name: ComplexPropertyEntry\n  nameWithType: ComplexPropertyEntry\n  fullName: System.Web.UI.ComplexPropertyEntry\n  type: Class\n  assemblies:\n  - System.Web\n  namespace: System.Web.UI\n  summary: Serves as the property entry for read/write and read-only properties such as templates.\n  remarks: \"A complex property entry represents an item such as a template.  \\n  \\n The page parser uses property entry classes during parsing to represent expressions found within server control tags.\"\n  syntax:\n    content: 'public class ComplexPropertyEntry : System.Web.UI.BuilderPropertyEntry'\n  inheritance:\n  - System.Object\n  - System.Web.UI.PropertyEntry\n  - System.Web.UI.BuilderPropertyEntry\n  implements: []\n  inheritedMembers:\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.ToString\n  - System.Web.UI.BuilderPropertyEntry.Builder\n  - System.Web.UI.PropertyEntry.DeclaringType\n  - System.Web.UI.PropertyEntry.Filter\n  - System.Web.UI.PropertyEntry.Name\n  - System.Web.UI.PropertyEntry.PropertyInfo\n  - System.Web.UI.PropertyEntry.Type\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  internal_use_only: true\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Web.UI/ComplexPropertyEntry.xml\n  ms.technology:\n  - dotnet-webforms\n  ms.author: riande\n  manager: wpickett\n- uid: System.Web.UI.ComplexPropertyEntry.IsCollectionItem\n  commentId: P:System.Web.UI.ComplexPropertyEntry.IsCollectionItem\n  id: IsCollectionItem\n  parent: System.Web.UI.ComplexPropertyEntry\n  langs:\n  - csharp\n  name: IsCollectionItem\n  nameWithType: ComplexPropertyEntry.IsCollectionItem\n  fullName: ComplexPropertyEntry.IsCollectionItem\n  type: Property\n  assemblies:\n  - System.Web\n  namespace: System.Web.UI\n  summary: Gets a value indicating whether the property is a collection object.\n  syntax:\n    content: public bool IsCollectionItem { get; }\n    return:\n      type: System.Boolean\n      description: '`true` if the property entry represents an item that contains a collection of values; otherwise, `false`.'\n  overload: System.Web.UI.ComplexPropertyEntry.IsCollectionItem*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  internal_use_only: true\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Web.UI/ComplexPropertyEntry.xml\n  ms.technology:\n  - dotnet-webforms\n  ms.author: riande\n  manager: wpickett\n- uid: System.Web.UI.ComplexPropertyEntry.ReadOnly\n  commentId: P:System.Web.UI.ComplexPropertyEntry.ReadOnly\n  id: ReadOnly\n  parent: System.Web.UI.ComplexPropertyEntry\n  langs:\n  - csharp\n  name: ReadOnly\n  nameWithType: ComplexPropertyEntry.ReadOnly\n  fullName: ComplexPropertyEntry.ReadOnly\n  type: Property\n  assemblies:\n  - System.Web\n  namespace: System.Web.UI\n  summary: Gets or sets a value indicating whether the item represented in the property entry contains a method for setting its value.\n  syntax:\n    content: public bool ReadOnly { get; set; }\n    return:\n      type: System.Boolean\n      description: '`true` if the item represented by the property entry does not contain a set method; otherwise, `false`.'\n  overload: System.Web.UI.ComplexPropertyEntry.ReadOnly*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  internal_use_only: true\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Web.UI/ComplexPropertyEntry.xml\n  ms.technology:\n  - dotnet-webforms\n  ms.author: riande\n  manager: wpickett\nreferences:\n- uid: System.Web.UI.BuilderPropertyEntry\n  parent: System.Web.UI\n  isExternal: false\n  name: BuilderPropertyEntry\n  nameWithType: BuilderPropertyEntry\n  fullName: System.Web.UI.BuilderPropertyEntry\n- uid: System.Web.UI.ComplexPropertyEntry.IsCollectionItem\n  parent: System.Web.UI.ComplexPropertyEntry\n  isExternal: false\n  name: IsCollectionItem\n  nameWithType: ComplexPropertyEntry.IsCollectionItem\n  fullName: ComplexPropertyEntry.IsCollectionItem\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Web.UI.ComplexPropertyEntry.ReadOnly\n  parent: System.Web.UI.ComplexPropertyEntry\n  isExternal: false\n  name: ReadOnly\n  nameWithType: ComplexPropertyEntry.ReadOnly\n  fullName: ComplexPropertyEntry.ReadOnly\n- uid: System.Web.UI.ComplexPropertyEntry.IsCollectionItem*\n  parent: System.Web.UI.ComplexPropertyEntry\n  isExternal: false\n  name: IsCollectionItem\n  nameWithType: ComplexPropertyEntry.IsCollectionItem\n  fullName: ComplexPropertyEntry.IsCollectionItem\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Web.UI/ComplexPropertyEntry.xml\n- uid: System.Web.UI.ComplexPropertyEntry.ReadOnly*\n  parent: System.Web.UI.ComplexPropertyEntry\n  isExternal: false\n  name: ReadOnly\n  nameWithType: ComplexPropertyEntry.ReadOnly\n  fullName: ComplexPropertyEntry.ReadOnly\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Web.UI/ComplexPropertyEntry.xml\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: Object.Equals(Object)\n  fullName: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: Object.GetHashCode()\n  fullName: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: false\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: false\n  name: ToString()\n  nameWithType: Object.ToString()\n  fullName: Object.ToString()\n- uid: System.Web.UI.PropertyEntry.DeclaringType\n  parent: System.Web.UI.PropertyEntry\n  isExternal: false\n  name: DeclaringType\n  nameWithType: PropertyEntry.DeclaringType\n  fullName: PropertyEntry.DeclaringType\n- uid: System.Web.UI.PropertyEntry.Filter\n  parent: System.Web.UI.PropertyEntry\n  isExternal: false\n  name: Filter\n  nameWithType: PropertyEntry.Filter\n  fullName: PropertyEntry.Filter\n- uid: System.Web.UI.PropertyEntry.Name\n  parent: System.Web.UI.PropertyEntry\n  isExternal: false\n  name: Name\n  nameWithType: PropertyEntry.Name\n  fullName: PropertyEntry.Name\n- uid: System.Web.UI.PropertyEntry.PropertyInfo\n  parent: System.Web.UI.PropertyEntry\n  isExternal: false\n  name: PropertyInfo\n  nameWithType: PropertyEntry.PropertyInfo\n  fullName: PropertyEntry.PropertyInfo\n- uid: System.Web.UI.PropertyEntry.Type\n  parent: System.Web.UI.PropertyEntry\n  isExternal: false\n  name: Type\n  nameWithType: PropertyEntry.Type\n  fullName: PropertyEntry.Type\n- uid: System.Web.UI.BuilderPropertyEntry.Builder\n  parent: System.Web.UI.BuilderPropertyEntry\n  isExternal: false\n  name: Builder\n  nameWithType: BuilderPropertyEntry.Builder\n  fullName: BuilderPropertyEntry.Builder\n"}