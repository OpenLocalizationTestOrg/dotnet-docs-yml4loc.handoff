{"nodes":[{"content":"Provides a generic view of a sequence of bytes. This is an abstract class.","nodes":[{"pos":[0,74],"content":"Provides a generic view of a sequence of bytes. This is an abstract class.","nodes":[{"content":"Provides a generic view of a sequence of bytes. This is an abstract class.","pos":[0,74],"nodes":[{"content":"Provides a generic view of a sequence of bytes.","pos":[0,47]},{"content":"This is an abstract class.","pos":[48,74]}]}]}],"pos":[2291,2366],"yaml":true},{"content":"> [!NOTE]\n>  To view the .NET Framework source code for this type, see the [Reference Source](http://referencesource.microsoft.com/#mscorlib/system/io/stream.cs#f956b0c07e86df64). You can browse through the source code online, download the reference for offline viewing, and step through the sources (including patches and updates) during debugging; see [instructions](http://referencesource.microsoft.com/).  \n  \n <xref:System.IO.Stream> is the abstract base class of all streams. A stream is an abstraction of a sequence of bytes, such as a file, an input/output device, an inter-process communication pipe, or a TCP/IP socket. The <xref:System.IO.Stream> class and its derived classes provide a generic view of these different types of input and output, and isolate the programmer from the specific details of the operating system and the underlying devices.  \n  \n Streams involve three fundamental operations:  \n  \n-   You can read from streams. Reading is the transfer of data from a stream into a data structure, such as an array of bytes.  \n  \n-   You can write to streams. Writing is the transfer of data from a data structure into a stream.  \n  \n-   Streams can support seeking. Seeking refers to querying and modifying the current position within a stream. Seek capability depends on the kind of backing store a stream has. For example, network streams have no unified concept of a current position, and therefore typically do not support seeking.  \n  \n Some of the more commonly used streams that inherit from <xref:System.IO.Stream> are <xref:System.IO.FileStream>, and <xref:System.IO.MemoryStream>.  \n  \n Depending on the underlying data source or repository, streams might support only some of these capabilities. You can query a stream for its capabilities by using the <xref:System.IO.Stream.CanRead%2A>, <xref:System.IO.Stream.CanWrite%2A>, and <xref:System.IO.Stream.CanSeek%2A> properties of the <xref:System.IO.Stream> class.  \n  \n The <xref:System.IO.Stream.Read%2A> and <xref:System.IO.Stream.Write%2A> methods read and write data in a variety of formats. For streams that support seeking, use the <xref:System.IO.Stream.Seek%2A> and <xref:System.IO.Stream.SetLength%2A> methods and the <xref:System.IO.Stream.Position%2A> and <xref:System.IO.Stream.Length%2A> properties to query and modify the current position and length of a stream.  \n  \n This type implements the <xref:System.IDisposable> interface. When you have finished using the type, you should dispose of it either directly or indirectly. To dispose of the type directly, call its <xref:System.IDisposable.Dispose%2A> method in a `try`/`catch` block. To dispose of it indirectly, use a language construct such as `using` (in C#) or `Using` (in Visual Basic). For more information, see the \"Using an Object that Implements IDisposable\" section in the <xref:System.IDisposable> interface topic.  \n  \n Disposing a <xref:System.IO.Stream> object flushes any buffered data, and essentially calls the <xref:System.IO.Stream.Flush%2A> method for you. <xref:System.IO.Stream.Dispose%2A> also releases operating system resources such as file handles, network connections, or memory used for any internal buffering. The <xref:System.IO.BufferedStream> class provides the capability of wrapping a buffered stream around another stream in order to improve read and write performance.  \n  \n Starting with the [!INCLUDE[net_v45](~/includes/net-v45-md.md)], the <xref:System.IO.Stream> class includes async methods to simplify asynchronous operations. An async method contains `Async` in its name, such as <xref:System.IO.Stream.ReadAsync%2A>, <xref:System.IO.Stream.WriteAsync%2A>, <xref:System.IO.Stream.CopyToAsync%2A>, and <xref:System.IO.Stream.FlushAsync%2A>. These methods enable you to perform resource-intensive I/O operations without blocking the main thread. This performance consideration is particularly important in a [!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)] app or [!INCLUDE[desktop_appname](~/includes/desktop-appname-md.md)] app where a time-consuming stream operation can block the UI thread and make your app appear as if it is not working. The async methods are used in conjunction with the `async` and `await` keywords in Visual Basic and C#.  \n  \n When used in a [!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)] app, <xref:System.IO.Stream> includes two extension methods: <xref:System.IO.WindowsRuntimeStreamExtensions.AsInputStream%2A> and <xref:System.IO.WindowsRuntimeStreamExtensions.AsOutputStream%2A>. These methods convert a <xref:System.IO.Stream> object to a stream in the [!INCLUDE[wrt](~/includes/wrt-md.md)]. You can also convert a stream in the [!INCLUDE[wrt](~/includes/wrt-md.md)] to a <xref:System.IO.Stream> object by using the <xref:System.IO.WindowsRuntimeStreamExtensions.AsStreamForRead%2A> and <xref:System.IO.WindowsRuntimeStreamExtensions.AsStreamForWrite%2A> methods. For more information, see [How to: Convert Between .NET Framework Streams and Windows Runtime Streams](~/docs/standard/io/how-to-convert-between-dotnet-streams-and-winrt-streams.md)  \n  \n Some stream implementations perform local buffering of the underlying data to improve performance. For such streams, you can use the <xref:System.IO.Stream.Flush%2A> or <xref:System.IO.Stream.FlushAsync%2A> method to clear any internal buffers and ensure that all data has been written to the underlying data source or repository.  \n  \n If you need a stream with no backing store (also known as a bit bucket), use the <xref:System.IO.Stream.Null> field to retrieve an instance of a stream that is designed for this purpose.","nodes":[{"pos":[2,408],"content":"[!NOTE]\n To view the .NET Framework source code for this type, see the [Reference Source](http://referencesource.microsoft.com/#mscorlib/system/io/stream.cs#f956b0c07e86df64). You can browse through the source code online, download the reference for offline viewing, and step through the sources (including patches and updates) during debugging; see [instructions](http://referencesource.microsoft.com/).","leadings":["","> "],"nodes":[{"content":" To view the .NET Framework source code for this type, see the [Reference Source](http://referencesource.microsoft.com/#mscorlib/system/io/stream.cs#f956b0c07e86df64). You can browse through the source code online, download the reference for offline viewing, and step through the sources (including patches and updates) during debugging; see [instructions](http://referencesource.microsoft.com/).","pos":[8,404],"nodes":[{"content":"To view the .NET Framework source code for this type, see the <bpt id=\"p1\">[</bpt>Reference Source<ept id=\"p1\">](http://referencesource.microsoft.com/#mscorlib/system/io/stream.cs#f956b0c07e86df64)</ept>.","pos":[1,167],"source":" To view the .NET Framework source code for this type, see the [Reference Source](http://referencesource.microsoft.com/#mscorlib/system/io/stream.cs#f956b0c07e86df64)."},{"content":"You can browse through the source code online, download the reference for offline viewing, and step through the sources (including patches and updates) during debugging; see <bpt id=\"p1\">[</bpt>instructions<ept id=\"p1\">](http://referencesource.microsoft.com/)</ept>.","pos":[168,396],"source":" You can browse through the source code online, download the reference for offline viewing, and step through the sources (including patches and updates) during debugging; see [instructions](http://referencesource.microsoft.com/)."}]}]},{"pos":[415,861],"content":"<xref:System.IO.Stream> is the abstract base class of all streams. A stream is an abstraction of a sequence of bytes, such as a file, an input/output device, an inter-process communication pipe, or a TCP/IP socket. The <xref:System.IO.Stream> class and its derived classes provide a generic view of these different types of input and output, and isolate the programmer from the specific details of the operating system and the underlying devices.","nodes":[{"content":"<xref:System.IO.Stream> is the abstract base class of all streams. A stream is an abstraction of a sequence of bytes, such as a file, an input/output device, an inter-process communication pipe, or a TCP/IP socket. The <xref:System.IO.Stream> class and its derived classes provide a generic view of these different types of input and output, and isolate the programmer from the specific details of the operating system and the underlying devices.","pos":[0,446],"nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.IO.Stream&gt;</ph> is the abstract base class of all streams.","pos":[0,66],"source":"<xref:System.IO.Stream> is the abstract base class of all streams."},{"content":"A stream is an abstraction of a sequence of bytes, such as a file, an input/output device, an inter-process communication pipe, or a TCP/IP socket.","pos":[67,214]},{"content":"The <ph id=\"ph1\">&lt;xref:System.IO.Stream&gt;</ph> class and its derived classes provide a generic view of these different types of input and output, and isolate the programmer from the specific details of the operating system and the underlying devices.","pos":[215,446],"source":" The <xref:System.IO.Stream> class and its derived classes provide a generic view of these different types of input and output, and isolate the programmer from the specific details of the operating system and the underlying devices."}]}]},{"pos":[868,913],"content":"Streams involve three fundamental operations:","nodes":[{"content":"Streams involve three fundamental operations:","pos":[0,45]}]},{"pos":[923,1045],"content":"You can read from streams. Reading is the transfer of data from a stream into a data structure, such as an array of bytes.","nodes":[{"content":"You can read from streams. Reading is the transfer of data from a stream into a data structure, such as an array of bytes.","pos":[0,122],"nodes":[{"content":"You can read from streams.","pos":[0,26]},{"content":"Reading is the transfer of data from a stream into a data structure, such as an array of bytes.","pos":[27,122]}]}]},{"pos":[1055,1149],"content":"You can write to streams. Writing is the transfer of data from a data structure into a stream.","nodes":[{"content":"You can write to streams. Writing is the transfer of data from a data structure into a stream.","pos":[0,94],"nodes":[{"content":"You can write to streams.","pos":[0,25]},{"content":"Writing is the transfer of data from a data structure into a stream.","pos":[26,94]}]}]},{"pos":[1159,1457],"content":"Streams can support seeking. Seeking refers to querying and modifying the current position within a stream. Seek capability depends on the kind of backing store a stream has. For example, network streams have no unified concept of a current position, and therefore typically do not support seeking.","nodes":[{"content":"Streams can support seeking. Seeking refers to querying and modifying the current position within a stream. Seek capability depends on the kind of backing store a stream has. For example, network streams have no unified concept of a current position, and therefore typically do not support seeking.","pos":[0,298],"nodes":[{"content":"Streams can support seeking.","pos":[0,28]},{"content":"Seeking refers to querying and modifying the current position within a stream.","pos":[29,107]},{"content":"Seek capability depends on the kind of backing store a stream has.","pos":[108,174]},{"content":"For example, network streams have no unified concept of a current position, and therefore typically do not support seeking.","pos":[175,298]}]}]},{"pos":[1464,1612],"content":"Some of the more commonly used streams that inherit from <xref:System.IO.Stream> are <xref:System.IO.FileStream>, and <xref:System.IO.MemoryStream>.","nodes":[{"content":"Some of the more commonly used streams that inherit from <ph id=\"ph1\">&lt;xref:System.IO.Stream&gt;</ph> are <ph id=\"ph2\">&lt;xref:System.IO.FileStream&gt;</ph>, and <ph id=\"ph3\">&lt;xref:System.IO.MemoryStream&gt;</ph>.","pos":[0,148],"source":"Some of the more commonly used streams that inherit from <xref:System.IO.Stream> are <xref:System.IO.FileStream>, and <xref:System.IO.MemoryStream>."}]},{"pos":[1619,1946],"content":"Depending on the underlying data source or repository, streams might support only some of these capabilities. You can query a stream for its capabilities by using the <xref:System.IO.Stream.CanRead%2A>, <xref:System.IO.Stream.CanWrite%2A>, and <xref:System.IO.Stream.CanSeek%2A> properties of the <xref:System.IO.Stream> class.","nodes":[{"content":"Depending on the underlying data source or repository, streams might support only some of these capabilities. You can query a stream for its capabilities by using the <xref:System.IO.Stream.CanRead%2A>, <xref:System.IO.Stream.CanWrite%2A>, and <xref:System.IO.Stream.CanSeek%2A> properties of the <xref:System.IO.Stream> class.","pos":[0,327],"nodes":[{"content":"Depending on the underlying data source or repository, streams might support only some of these capabilities.","pos":[0,109]},{"content":"You can query a stream for its capabilities by using the <ph id=\"ph1\">&lt;xref:System.IO.Stream.CanRead%2A&gt;</ph>, <ph id=\"ph2\">&lt;xref:System.IO.Stream.CanWrite%2A&gt;</ph>, and <ph id=\"ph3\">&lt;xref:System.IO.Stream.CanSeek%2A&gt;</ph> properties of the <ph id=\"ph4\">&lt;xref:System.IO.Stream&gt;</ph> class.","pos":[110,327],"source":" You can query a stream for its capabilities by using the <xref:System.IO.Stream.CanRead%2A>, <xref:System.IO.Stream.CanWrite%2A>, and <xref:System.IO.Stream.CanSeek%2A> properties of the <xref:System.IO.Stream> class."}]}]},{"pos":[1953,2359],"content":"The <xref:System.IO.Stream.Read%2A> and <xref:System.IO.Stream.Write%2A> methods read and write data in a variety of formats. For streams that support seeking, use the <xref:System.IO.Stream.Seek%2A> and <xref:System.IO.Stream.SetLength%2A> methods and the <xref:System.IO.Stream.Position%2A> and <xref:System.IO.Stream.Length%2A> properties to query and modify the current position and length of a stream.","nodes":[{"content":"The <xref:System.IO.Stream.Read%2A> and <xref:System.IO.Stream.Write%2A> methods read and write data in a variety of formats. For streams that support seeking, use the <xref:System.IO.Stream.Seek%2A> and <xref:System.IO.Stream.SetLength%2A> methods and the <xref:System.IO.Stream.Position%2A> and <xref:System.IO.Stream.Length%2A> properties to query and modify the current position and length of a stream.","pos":[0,406],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.IO.Stream.Read%2A&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.IO.Stream.Write%2A&gt;</ph> methods read and write data in a variety of formats.","pos":[0,125],"source":"The <xref:System.IO.Stream.Read%2A> and <xref:System.IO.Stream.Write%2A> methods read and write data in a variety of formats."},{"content":"For streams that support seeking, use the <ph id=\"ph1\">&lt;xref:System.IO.Stream.Seek%2A&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.IO.Stream.SetLength%2A&gt;</ph> methods and the <ph id=\"ph3\">&lt;xref:System.IO.Stream.Position%2A&gt;</ph> and <ph id=\"ph4\">&lt;xref:System.IO.Stream.Length%2A&gt;</ph> properties to query and modify the current position and length of a stream.","pos":[126,406],"source":" For streams that support seeking, use the <xref:System.IO.Stream.Seek%2A> and <xref:System.IO.Stream.SetLength%2A> methods and the <xref:System.IO.Stream.Position%2A> and <xref:System.IO.Stream.Length%2A> properties to query and modify the current position and length of a stream."}]}]},{"pos":[2366,2876],"content":"This type implements the <xref:System.IDisposable> interface. When you have finished using the type, you should dispose of it either directly or indirectly. To dispose of the type directly, call its <xref:System.IDisposable.Dispose%2A> method in a `try`/`catch` block. To dispose of it indirectly, use a language construct such as `using` (in C#) or `Using` (in Visual Basic). For more information, see the \"Using an Object that Implements IDisposable\" section in the <xref:System.IDisposable> interface topic.","nodes":[{"content":"This type implements the <ph id=\"ph1\">&lt;xref:System.IDisposable&gt;</ph> interface.","pos":[0,61],"source":"This type implements the <xref:System.IDisposable> interface."},{"content":"When you have finished using the type, you should dispose of it either directly or indirectly.","pos":[62,156]},{"content":"To dispose of the type directly, call its <ph id=\"ph1\">&lt;xref:System.IDisposable.Dispose%2A&gt;</ph> method in a <ph id=\"ph2\">`try`</ph><ph id=\"ph3\">/</ph><ph id=\"ph4\">`catch`</ph> block.","pos":[157,268],"source":" To dispose of the type directly, call its <xref:System.IDisposable.Dispose%2A> method in a `try`/`catch` block."},{"content":"To dispose of it indirectly, use a language construct such as <ph id=\"ph1\">`using`</ph> (in C#) or <ph id=\"ph2\">`Using`</ph> (in Visual Basic).","pos":[269,376],"source":" To dispose of it indirectly, use a language construct such as `using` (in C#) or `Using` (in Visual Basic)."},{"content":"For more information, see the \"Using an Object that Implements IDisposable\" section in the <ph id=\"ph1\">&lt;xref:System.IDisposable&gt;</ph> interface topic.","pos":[377,510],"source":" For more information, see the \"Using an Object that Implements IDisposable\" section in the <xref:System.IDisposable> interface topic."}]},{"pos":[2883,3355],"content":"Disposing a <xref:System.IO.Stream> object flushes any buffered data, and essentially calls the <xref:System.IO.Stream.Flush%2A> method for you. <xref:System.IO.Stream.Dispose%2A> also releases operating system resources such as file handles, network connections, or memory used for any internal buffering. The <xref:System.IO.BufferedStream> class provides the capability of wrapping a buffered stream around another stream in order to improve read and write performance.","nodes":[{"content":"Disposing a <xref:System.IO.Stream> object flushes any buffered data, and essentially calls the <xref:System.IO.Stream.Flush%2A> method for you. <xref:System.IO.Stream.Dispose%2A> also releases operating system resources such as file handles, network connections, or memory used for any internal buffering. The <xref:System.IO.BufferedStream> class provides the capability of wrapping a buffered stream around another stream in order to improve read and write performance.","pos":[0,472],"nodes":[{"content":"Disposing a <ph id=\"ph1\">&lt;xref:System.IO.Stream&gt;</ph> object flushes any buffered data, and essentially calls the <ph id=\"ph2\">&lt;xref:System.IO.Stream.Flush%2A&gt;</ph> method for you.","pos":[0,144],"source":"Disposing a <xref:System.IO.Stream> object flushes any buffered data, and essentially calls the <xref:System.IO.Stream.Flush%2A> method for you."},{"content":"<ph id=\"ph1\">&lt;xref:System.IO.Stream.Dispose%2A&gt;</ph> also releases operating system resources such as file handles, network connections, or memory used for any internal buffering.","pos":[145,306],"source":" <xref:System.IO.Stream.Dispose%2A> also releases operating system resources such as file handles, network connections, or memory used for any internal buffering."},{"content":"The <ph id=\"ph1\">&lt;xref:System.IO.BufferedStream&gt;</ph> class provides the capability of wrapping a buffered stream around another stream in order to improve read and write performance.","pos":[307,472],"source":" The <xref:System.IO.BufferedStream> class provides the capability of wrapping a buffered stream around another stream in order to improve read and write performance."}]}]},{"pos":[3362,4257],"content":"Starting with the [!INCLUDE[net_v45](~/includes/net-v45-md.md)], the <xref:System.IO.Stream> class includes async methods to simplify asynchronous operations. An async method contains `Async` in its name, such as <xref:System.IO.Stream.ReadAsync%2A>, <xref:System.IO.Stream.WriteAsync%2A>, <xref:System.IO.Stream.CopyToAsync%2A>, and <xref:System.IO.Stream.FlushAsync%2A>. These methods enable you to perform resource-intensive I/O operations without blocking the main thread. This performance consideration is particularly important in a [!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)] app or [!INCLUDE[desktop_appname](~/includes/desktop-appname-md.md)] app where a time-consuming stream operation can block the UI thread and make your app appear as if it is not working. The async methods are used in conjunction with the `async` and `await` keywords in Visual Basic and C#.","nodes":[{"content":"Starting with the <ph id=\"ph1\">[!INCLUDE[net_v45](~/includes/net-v45-md.md)]</ph>, the <ph id=\"ph2\">&lt;xref:System.IO.Stream&gt;</ph> class includes async methods to simplify asynchronous operations.","pos":[0,158],"source":"Starting with the [!INCLUDE[net_v45](~/includes/net-v45-md.md)], the <xref:System.IO.Stream> class includes async methods to simplify asynchronous operations."},{"content":"An async method contains <ph id=\"ph1\">`Async`</ph> in its name, such as <ph id=\"ph2\">&lt;xref:System.IO.Stream.ReadAsync%2A&gt;</ph>, <ph id=\"ph3\">&lt;xref:System.IO.Stream.WriteAsync%2A&gt;</ph>, <ph id=\"ph4\">&lt;xref:System.IO.Stream.CopyToAsync%2A&gt;</ph>, and <ph id=\"ph5\">&lt;xref:System.IO.Stream.FlushAsync%2A&gt;</ph>.","pos":[159,372],"source":" An async method contains `Async` in its name, such as <xref:System.IO.Stream.ReadAsync%2A>, <xref:System.IO.Stream.WriteAsync%2A>, <xref:System.IO.Stream.CopyToAsync%2A>, and <xref:System.IO.Stream.FlushAsync%2A>."},{"content":"These methods enable you to perform resource-intensive I/O operations without blocking the main thread.","pos":[373,476]},{"content":"This performance consideration is particularly important in a <ph id=\"ph1\">[!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)]</ph> app or <ph id=\"ph2\">[!INCLUDE[desktop_appname](~/includes/desktop-appname-md.md)]</ph> app where a time-consuming stream operation can block the UI thread and make your app appear as if it is not working.","pos":[477,791],"source":" This performance consideration is particularly important in a [!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)] app or [!INCLUDE[desktop_appname](~/includes/desktop-appname-md.md)] app where a time-consuming stream operation can block the UI thread and make your app appear as if it is not working."},{"content":"The async methods are used in conjunction with the <ph id=\"ph1\">`async`</ph> and <ph id=\"ph2\">`await`</ph> keywords in Visual Basic and C#.","pos":[792,895],"source":" The async methods are used in conjunction with the `async` and `await` keywords in Visual Basic and C#."}]},{"pos":[4264,5108],"content":"When used in a [!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)] app, <xref:System.IO.Stream> includes two extension methods: <xref:System.IO.WindowsRuntimeStreamExtensions.AsInputStream%2A> and <xref:System.IO.WindowsRuntimeStreamExtensions.AsOutputStream%2A>. These methods convert a <xref:System.IO.Stream> object to a stream in the [!INCLUDE[wrt](~/includes/wrt-md.md)]. You can also convert a stream in the [!INCLUDE[wrt](~/includes/wrt-md.md)] to a <xref:System.IO.Stream> object by using the <xref:System.IO.WindowsRuntimeStreamExtensions.AsStreamForRead%2A> and <xref:System.IO.WindowsRuntimeStreamExtensions.AsStreamForWrite%2A> methods. For more information, see [How to: Convert Between .NET Framework Streams and Windows Runtime Streams](~/docs/standard/io/how-to-convert-between-dotnet-streams-and-winrt-streams.md)","nodes":[{"content":"When used in a <ph id=\"ph1\">[!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)]</ph> app, <ph id=\"ph2\">&lt;xref:System.IO.Stream&gt;</ph> includes two extension methods: <ph id=\"ph3\">&lt;xref:System.IO.WindowsRuntimeStreamExtensions.AsInputStream%2A&gt;</ph> and <ph id=\"ph4\">&lt;xref:System.IO.WindowsRuntimeStreamExtensions.AsOutputStream%2A&gt;</ph>.","pos":[0,277],"source":"When used in a [!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)] app, <xref:System.IO.Stream> includes two extension methods: <xref:System.IO.WindowsRuntimeStreamExtensions.AsInputStream%2A> and <xref:System.IO.WindowsRuntimeStreamExtensions.AsOutputStream%2A>."},{"content":"These methods convert a <ph id=\"ph1\">&lt;xref:System.IO.Stream&gt;</ph> object to a stream in the <ph id=\"ph2\">[!INCLUDE[wrt](~/includes/wrt-md.md)]</ph>.","pos":[278,390],"source":" These methods convert a <xref:System.IO.Stream> object to a stream in the [!INCLUDE[wrt](~/includes/wrt-md.md)]."},{"content":"You can also convert a stream in the <ph id=\"ph1\">[!INCLUDE[wrt](~/includes/wrt-md.md)]</ph> to a <ph id=\"ph2\">&lt;xref:System.IO.Stream&gt;</ph> object by using the <ph id=\"ph3\">&lt;xref:System.IO.WindowsRuntimeStreamExtensions.AsStreamForRead%2A&gt;</ph> and <ph id=\"ph4\">&lt;xref:System.IO.WindowsRuntimeStreamExtensions.AsStreamForWrite%2A&gt;</ph> methods.","pos":[391,662],"source":" You can also convert a stream in the [!INCLUDE[wrt](~/includes/wrt-md.md)] to a <xref:System.IO.Stream> object by using the <xref:System.IO.WindowsRuntimeStreamExtensions.AsStreamForRead%2A> and <xref:System.IO.WindowsRuntimeStreamExtensions.AsStreamForWrite%2A> methods."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>How to: Convert Between .NET Framework Streams and Windows Runtime Streams<ept id=\"p1\">](~/docs/standard/io/how-to-convert-between-dotnet-streams-and-winrt-streams.md)</ept>","pos":[663,844],"source":" For more information, see [How to: Convert Between .NET Framework Streams and Windows Runtime Streams](~/docs/standard/io/how-to-convert-between-dotnet-streams-and-winrt-streams.md)"}]},{"pos":[5115,5445],"content":"Some stream implementations perform local buffering of the underlying data to improve performance. For such streams, you can use the <xref:System.IO.Stream.Flush%2A> or <xref:System.IO.Stream.FlushAsync%2A> method to clear any internal buffers and ensure that all data has been written to the underlying data source or repository.","nodes":[{"content":"Some stream implementations perform local buffering of the underlying data to improve performance. For such streams, you can use the <xref:System.IO.Stream.Flush%2A> or <xref:System.IO.Stream.FlushAsync%2A> method to clear any internal buffers and ensure that all data has been written to the underlying data source or repository.","pos":[0,330],"nodes":[{"content":"Some stream implementations perform local buffering of the underlying data to improve performance.","pos":[0,98]},{"content":"For such streams, you can use the <ph id=\"ph1\">&lt;xref:System.IO.Stream.Flush%2A&gt;</ph> or <ph id=\"ph2\">&lt;xref:System.IO.Stream.FlushAsync%2A&gt;</ph> method to clear any internal buffers and ensure that all data has been written to the underlying data source or repository.","pos":[99,330],"source":" For such streams, you can use the <xref:System.IO.Stream.Flush%2A> or <xref:System.IO.Stream.FlushAsync%2A> method to clear any internal buffers and ensure that all data has been written to the underlying data source or repository."}]}]},{"pos":[5452,5638],"content":"If you need a stream with no backing store (also known as a bit bucket), use the <xref:System.IO.Stream.Null> field to retrieve an instance of a stream that is designed for this purpose.","nodes":[{"content":"If you need a stream with no backing store (also known as a bit bucket), use the <ph id=\"ph1\">&lt;xref:System.IO.Stream.Null&gt;</ph> field to retrieve an instance of a stream that is designed for this purpose.","pos":[0,186],"source":"If you need a stream with no backing store (also known as a bit bucket), use the <xref:System.IO.Stream.Null> field to retrieve an instance of a stream that is designed for this purpose."}]}],"pos":[2377,8049],"yaml":true,"extradata":"MT"},{"content":"Initializes a new instance of the <xref href=\"System.IO.Stream\"></xref> class.","nodes":[{"pos":[0,78],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.IO.Stream\"&gt;&lt;/xref&gt;</ph> class.","source":"Initializes a new instance of the <xref href=\"System.IO.Stream\"></xref> class."}],"pos":[11335,11414],"yaml":true},{"content":"<xref:System.IO.Stream> is the abstract base class of all streams.  \n  \n Some of the more commonly used streams that inherit from <xref:System.IO.Stream> are <xref:System.IO.FileStream>, and <xref:System.IO.MemoryStream>.","nodes":[{"pos":[0,66],"content":"<xref:System.IO.Stream> is the abstract base class of all streams.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.IO.Stream&gt;</ph> is the abstract base class of all streams.","pos":[0,66],"source":"<xref:System.IO.Stream> is the abstract base class of all streams."}]},{"pos":[73,221],"content":"Some of the more commonly used streams that inherit from <xref:System.IO.Stream> are <xref:System.IO.FileStream>, and <xref:System.IO.MemoryStream>.","nodes":[{"content":"Some of the more commonly used streams that inherit from <ph id=\"ph1\">&lt;xref:System.IO.Stream&gt;</ph> are <ph id=\"ph2\">&lt;xref:System.IO.FileStream&gt;</ph>, and <ph id=\"ph3\">&lt;xref:System.IO.MemoryStream&gt;</ph>.","pos":[0,148],"source":"Some of the more commonly used streams that inherit from <xref:System.IO.Stream> are <xref:System.IO.FileStream>, and <xref:System.IO.MemoryStream>."}]}],"pos":[11425,11651],"yaml":true,"extradata":"MT"},{"content":"Begins an asynchronous read operation. (Consider using <xref href=\"System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32)\"></xref> instead.)","nodes":[{"pos":[0,153],"content":"Begins an asynchronous read operation. (Consider using <xref href=\"System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32)\"></xref> instead.)","nodes":[{"content":"Begins an asynchronous read operation.","pos":[0,38]},{"content":"(Consider using <ph id=\"ph1\">&lt;xref href=\"System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32)\"&gt;&lt;/xref&gt;</ph> instead.)","pos":[39,153],"source":" (Consider using <xref href=\"System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32)\"></xref> instead.)"}]}],"pos":[13514,13668],"yaml":true},{"content":"In the .NET Framework 4 and earlier versions, you have to use methods such as <xref:System.IO.Stream.BeginRead%2A> and <xref:System.IO.Stream.EndRead%2A> to implement asynchronous I/O operations. These methods are still available in the [!INCLUDE[net_v45](~/includes/net-v45-md.md)] to support legacy code; however, the new async methods, such as <xref:System.IO.Stream.ReadAsync%2A>, <xref:System.IO.Stream.WriteAsync%2A>, <xref:System.IO.Stream.CopyToAsync%2A>, and <xref:System.IO.Stream.FlushAsync%2A>, help you implement asynchronous I/O operations more easily.  \n  \n The default implementation of `BeginRead` on a stream calls the <xref:System.IO.Stream.Read%2A> method synchronously, which means that `Read` might block on some streams. However, instances of classes such as `FileStream` and `NetworkStream` fully support asynchronous operations if the instances have been opened asynchronously. Therefore, calls to `BeginRead` will not block on those streams. You can override `BeginRead` (by using async delegates, for example) to provide asynchronous behavior.  \n  \n Pass the `IAsyncResult` return value to the <xref:System.IO.Stream.EndRead%2A> method of the stream to determine how many bytes were read and to release operating system resources used for reading. <xref:System.IO.Stream.EndRead%2A> must be called once for every call to <xref:System.IO.Stream.BeginRead%2A>. You can do this either by using the same code that called `BeginRead` or in a callback passed to `BeginRead`.  \n  \n The current position in the stream is updated when the asynchronous read or write is issued, not when the I/O operation completes.  \n  \n Multiple simultaneous asynchronous requests render the request completion order uncertain.  \n  \n Use the <xref:System.IO.Stream.CanRead%2A> property to determine whether the current instance supports reading.  \n  \n If a stream is closed or you pass an invalid argument, exceptions are thrown immediately from `BeginRead`. Errors that occur during an asynchronous read request, such as a disk failure during the I/O request, occur on the thread pool thread and throw exceptions when calling `EndRead`.","nodes":[{"pos":[0,566],"content":"In the .NET Framework 4 and earlier versions, you have to use methods such as <xref:System.IO.Stream.BeginRead%2A> and <xref:System.IO.Stream.EndRead%2A> to implement asynchronous I/O operations. These methods are still available in the [!INCLUDE[net_v45](~/includes/net-v45-md.md)] to support legacy code; however, the new async methods, such as <xref:System.IO.Stream.ReadAsync%2A>, <xref:System.IO.Stream.WriteAsync%2A>, <xref:System.IO.Stream.CopyToAsync%2A>, and <xref:System.IO.Stream.FlushAsync%2A>, help you implement asynchronous I/O operations more easily.","nodes":[{"content":"In the .NET Framework 4 and earlier versions, you have to use methods such as <ph id=\"ph1\">&lt;xref:System.IO.Stream.BeginRead%2A&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.IO.Stream.EndRead%2A&gt;</ph> to implement asynchronous I/O operations.","pos":[0,195],"source":"In the .NET Framework 4 and earlier versions, you have to use methods such as <xref:System.IO.Stream.BeginRead%2A> and <xref:System.IO.Stream.EndRead%2A> to implement asynchronous I/O operations."},{"content":"These methods are still available in the <ph id=\"ph1\">[!INCLUDE[net_v45](~/includes/net-v45-md.md)]</ph> to support legacy code; however, the new async methods, such as <ph id=\"ph2\">&lt;xref:System.IO.Stream.ReadAsync%2A&gt;</ph>, <ph id=\"ph3\">&lt;xref:System.IO.Stream.WriteAsync%2A&gt;</ph>, <ph id=\"ph4\">&lt;xref:System.IO.Stream.CopyToAsync%2A&gt;</ph>, and <ph id=\"ph5\">&lt;xref:System.IO.Stream.FlushAsync%2A&gt;</ph>, help you implement asynchronous I/O operations more easily.","pos":[196,566],"source":" These methods are still available in the [!INCLUDE[net_v45](~/includes/net-v45-md.md)] to support legacy code; however, the new async methods, such as <xref:System.IO.Stream.ReadAsync%2A>, <xref:System.IO.Stream.WriteAsync%2A>, <xref:System.IO.Stream.CopyToAsync%2A>, and <xref:System.IO.Stream.FlushAsync%2A>, help you implement asynchronous I/O operations more easily."}]},{"pos":[573,1070],"content":"The default implementation of `BeginRead` on a stream calls the <xref:System.IO.Stream.Read%2A> method synchronously, which means that `Read` might block on some streams. However, instances of classes such as `FileStream` and `NetworkStream` fully support asynchronous operations if the instances have been opened asynchronously. Therefore, calls to `BeginRead` will not block on those streams. You can override `BeginRead` (by using async delegates, for example) to provide asynchronous behavior.","nodes":[{"content":"The default implementation of <ph id=\"ph1\">`BeginRead`</ph> on a stream calls the <ph id=\"ph2\">&lt;xref:System.IO.Stream.Read%2A&gt;</ph> method synchronously, which means that <ph id=\"ph3\">`Read`</ph> might block on some streams.","pos":[0,170],"source":"The default implementation of `BeginRead` on a stream calls the <xref:System.IO.Stream.Read%2A> method synchronously, which means that `Read` might block on some streams."},{"content":"However, instances of classes such as <ph id=\"ph1\">`FileStream`</ph> and <ph id=\"ph2\">`NetworkStream`</ph> fully support asynchronous operations if the instances have been opened asynchronously.","pos":[171,329],"source":" However, instances of classes such as `FileStream` and `NetworkStream` fully support asynchronous operations if the instances have been opened asynchronously."},{"content":"Therefore, calls to <ph id=\"ph1\">`BeginRead`</ph> will not block on those streams.","pos":[330,394],"source":" Therefore, calls to `BeginRead` will not block on those streams."},{"content":"You can override <ph id=\"ph1\">`BeginRead`</ph> (by using async delegates, for example) to provide asynchronous behavior.","pos":[395,497],"source":" You can override `BeginRead` (by using async delegates, for example) to provide asynchronous behavior."}]},{"pos":[1077,1495],"content":"Pass the `IAsyncResult` return value to the <xref:System.IO.Stream.EndRead%2A> method of the stream to determine how many bytes were read and to release operating system resources used for reading. <xref:System.IO.Stream.EndRead%2A> must be called once for every call to <xref:System.IO.Stream.BeginRead%2A>. You can do this either by using the same code that called `BeginRead` or in a callback passed to `BeginRead`.","nodes":[{"content":"Pass the <ph id=\"ph1\">`IAsyncResult`</ph> return value to the <ph id=\"ph2\">&lt;xref:System.IO.Stream.EndRead%2A&gt;</ph> method of the stream to determine how many bytes were read and to release operating system resources used for reading.","pos":[0,197],"source":"Pass the `IAsyncResult` return value to the <xref:System.IO.Stream.EndRead%2A> method of the stream to determine how many bytes were read and to release operating system resources used for reading."},{"content":"<ph id=\"ph1\">&lt;xref:System.IO.Stream.EndRead%2A&gt;</ph> must be called once for every call to <ph id=\"ph2\">&lt;xref:System.IO.Stream.BeginRead%2A&gt;</ph>.","pos":[198,308],"source":" <xref:System.IO.Stream.EndRead%2A> must be called once for every call to <xref:System.IO.Stream.BeginRead%2A>."},{"content":"You can do this either by using the same code that called <ph id=\"ph1\">`BeginRead`</ph> or in a callback passed to <ph id=\"ph2\">`BeginRead`</ph>.","pos":[309,418],"source":" You can do this either by using the same code that called `BeginRead` or in a callback passed to `BeginRead`."}]},{"pos":[1502,1632],"content":"The current position in the stream is updated when the asynchronous read or write is issued, not when the I/O operation completes.","nodes":[{"content":"The current position in the stream is updated when the asynchronous read or write is issued, not when the I/O operation completes.","pos":[0,130]}]},{"pos":[1639,1729],"content":"Multiple simultaneous asynchronous requests render the request completion order uncertain.","nodes":[{"content":"Multiple simultaneous asynchronous requests render the request completion order uncertain.","pos":[0,90]}]},{"pos":[1736,1847],"content":"Use the <xref:System.IO.Stream.CanRead%2A> property to determine whether the current instance supports reading.","nodes":[{"content":"Use the <ph id=\"ph1\">&lt;xref:System.IO.Stream.CanRead%2A&gt;</ph> property to determine whether the current instance supports reading.","pos":[0,111],"source":"Use the <xref:System.IO.Stream.CanRead%2A> property to determine whether the current instance supports reading."}]},{"pos":[1854,2139],"content":"If a stream is closed or you pass an invalid argument, exceptions are thrown immediately from `BeginRead`. Errors that occur during an asynchronous read request, such as a disk failure during the I/O request, occur on the thread pool thread and throw exceptions when calling `EndRead`.","nodes":[{"content":"If a stream is closed or you pass an invalid argument, exceptions are thrown immediately from <ph id=\"ph1\">`BeginRead`</ph>.","pos":[0,106],"source":"If a stream is closed or you pass an invalid argument, exceptions are thrown immediately from `BeginRead`."},{"content":"Errors that occur during an asynchronous read request, such as a disk failure during the I/O request, occur on the thread pool thread and throw exceptions when calling <ph id=\"ph1\">`EndRead`</ph>.","pos":[107,285],"source":" Errors that occur during an asynchronous read request, such as a disk failure during the I/O request, occur on the thread pool thread and throw exceptions when calling `EndRead`."}]}],"pos":[13679,15833],"yaml":true,"extradata":"MT"},{"content":"The buffer to read the data into.","nodes":[{"pos":[0,33],"content":"The buffer to read the data into.","nodes":[{"content":"The buffer to read the data into.","pos":[0,33]}]}],"pos":[16050,16084],"yaml":true},{"content":"The byte offset in <code>buffer</code> at which to begin writing data read from the stream.","nodes":[{"pos":[0,91],"content":"The byte offset in <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">buffer</ph><ept id=\"p1\">&lt;/code&gt;</ept> at which to begin writing data read from the stream.","source":"The byte offset in <code>buffer</code> at which to begin writing data read from the stream."}],"pos":[16145,16237],"yaml":true},{"content":"The maximum number of bytes to read.","nodes":[{"pos":[0,36],"content":"The maximum number of bytes to read.","nodes":[{"content":"The maximum number of bytes to read.","pos":[0,36]}]}],"pos":[16297,16334],"yaml":true},{"content":"An optional asynchronous callback, to be called when the read is complete.","nodes":[{"pos":[0,74],"content":"An optional asynchronous callback, to be called when the read is complete.","nodes":[{"content":"An optional asynchronous callback, to be called when the read is complete.","pos":[0,74]}]}],"pos":[16405,16480],"yaml":true},{"content":"A user-provided object that distinguishes this particular asynchronous read request from other requests.","nodes":[{"pos":[0,104],"content":"A user-provided object that distinguishes this particular asynchronous read request from other requests.","nodes":[{"content":"A user-provided object that distinguishes this particular asynchronous read request from other requests.","pos":[0,104]}]}],"pos":[16541,16646],"yaml":true},{"content":"An <xref href=\"System.IAsyncResult\"></xref> that represents the asynchronous read, which could still be pending.","nodes":[{"pos":[0,112],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.IAsyncResult\"&gt;&lt;/xref&gt;</ph> that represents the asynchronous read, which could still be pending.","source":"An <xref href=\"System.IAsyncResult\"></xref> that represents the asynchronous read, which could still be pending."}],"pos":[16709,16822],"yaml":true},{"content":"Attempted an asynchronous read past the end of the stream, or a disk error occurs.","nodes":[{"pos":[0,82],"content":"Attempted an asynchronous read past the end of the stream, or a disk error occurs.","nodes":[{"content":"Attempted an asynchronous read past the end of the stream, or a disk error occurs.","pos":[0,82]}]}],"pos":[16964,17047],"yaml":true},{"content":"One or more of the arguments is invalid.","nodes":[{"pos":[0,40],"content":"One or more of the arguments is invalid.","nodes":[{"content":"One or more of the arguments is invalid.","pos":[0,40]}]}],"pos":[17141,17182],"yaml":true},{"content":"Methods were called after the stream was closed.","nodes":[{"pos":[0,48],"content":"Methods were called after the stream was closed.","nodes":[{"content":"Methods were called after the stream was closed.","pos":[0,48]}]}],"pos":[17288,17337],"yaml":true},{"content":"The current `Stream` implementation does not support the read operation.","nodes":[{"pos":[0,72],"content":"The current <ph id=\"ph1\">`Stream`</ph> implementation does not support the read operation.","source":"The current `Stream` implementation does not support the read operation."}],"pos":[17439,17512],"yaml":true},{"content":"Begins an asynchronous write operation. (Consider using <xref href=\"System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32)\"></xref> instead.)","nodes":[{"pos":[0,155],"content":"Begins an asynchronous write operation. (Consider using <xref href=\"System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32)\"></xref> instead.)","nodes":[{"content":"Begins an asynchronous write operation.","pos":[0,39]},{"content":"(Consider using <ph id=\"ph1\">&lt;xref href=\"System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32)\"&gt;&lt;/xref&gt;</ph> instead.)","pos":[40,155],"source":" (Consider using <xref href=\"System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32)\"></xref> instead.)"}]}],"pos":[18921,19077],"yaml":true},{"content":"In the .NET Framework 4 and earlier versions, you have to use methods such as <xref:System.IO.Stream.BeginWrite%2A> and <xref:System.IO.Stream.EndWrite%2A> to implement asynchronous I/O operations. These methods are still available in the [!INCLUDE[net_v45](~/includes/net-v45-md.md)] to support legacy code; however, the new async methods, such as <xref:System.IO.Stream.ReadAsync%2A>, <xref:System.IO.Stream.WriteAsync%2A>, <xref:System.IO.Stream.CopyToAsync%2A>, and <xref:System.IO.Stream.FlushAsync%2A>, help you implement asynchronous I/O operations more easily.  \n  \n The default implementation of `BeginWrite` on a stream calls the <xref:System.IO.Stream.Write%2A> method synchronously, which means that `Write` might block on some streams. However, instances of classes such as `FileStream` and `NetworkStream` fully support asynchronous operations if the instances have been opened asynchronously. Therefore, calls to `BeginWrite` will not block on those streams. You can override `BeginWrite` (by using async delegates, for example) to provide asynchronous behavior.  \n  \n Pass the `IAsyncResult` returned by the current method to <xref:System.IO.Stream.EndWrite%2A> to ensure that the write completes and frees resources appropriately. <xref:System.IO.Stream.EndWrite%2A> must be called once for every call to <xref:System.IO.Stream.BeginWrite%2A>. You can do this either by using the same code that called `BeginWrite` or in a callback passed to `BeginWrite`. If an error occurs during an asynchronous write, an exception will not be thrown until `EndWrite` is called with the `IAsyncResult` returned by this method.  \n  \n If a stream is writable, writing at the end of the stream expands the stream.  \n  \n The current position in the stream is updated when you issue the asynchronous read or write, not when the I/O operation completes. Multiple simultaneous asynchronous requests render the request completion order uncertain.  \n  \n Use the <xref:System.IO.Stream.CanWrite%2A> property to determine whether the current instance supports writing.  \n  \n If a stream is closed or you pass an invalid argument, exceptions are thrown immediately from `BeginWrite`. Errors that occur during an asynchronous write request, such as a disk failure during the I/O request, occur on the thread pool thread and throw exceptions when calling `EndWrite`.","nodes":[{"pos":[0,568],"content":"In the .NET Framework 4 and earlier versions, you have to use methods such as <xref:System.IO.Stream.BeginWrite%2A> and <xref:System.IO.Stream.EndWrite%2A> to implement asynchronous I/O operations. These methods are still available in the [!INCLUDE[net_v45](~/includes/net-v45-md.md)] to support legacy code; however, the new async methods, such as <xref:System.IO.Stream.ReadAsync%2A>, <xref:System.IO.Stream.WriteAsync%2A>, <xref:System.IO.Stream.CopyToAsync%2A>, and <xref:System.IO.Stream.FlushAsync%2A>, help you implement asynchronous I/O operations more easily.","nodes":[{"content":"In the .NET Framework 4 and earlier versions, you have to use methods such as <ph id=\"ph1\">&lt;xref:System.IO.Stream.BeginWrite%2A&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.IO.Stream.EndWrite%2A&gt;</ph> to implement asynchronous I/O operations.","pos":[0,197],"source":"In the .NET Framework 4 and earlier versions, you have to use methods such as <xref:System.IO.Stream.BeginWrite%2A> and <xref:System.IO.Stream.EndWrite%2A> to implement asynchronous I/O operations."},{"content":"These methods are still available in the <ph id=\"ph1\">[!INCLUDE[net_v45](~/includes/net-v45-md.md)]</ph> to support legacy code; however, the new async methods, such as <ph id=\"ph2\">&lt;xref:System.IO.Stream.ReadAsync%2A&gt;</ph>, <ph id=\"ph3\">&lt;xref:System.IO.Stream.WriteAsync%2A&gt;</ph>, <ph id=\"ph4\">&lt;xref:System.IO.Stream.CopyToAsync%2A&gt;</ph>, and <ph id=\"ph5\">&lt;xref:System.IO.Stream.FlushAsync%2A&gt;</ph>, help you implement asynchronous I/O operations more easily.","pos":[198,568],"source":" These methods are still available in the [!INCLUDE[net_v45](~/includes/net-v45-md.md)] to support legacy code; however, the new async methods, such as <xref:System.IO.Stream.ReadAsync%2A>, <xref:System.IO.Stream.WriteAsync%2A>, <xref:System.IO.Stream.CopyToAsync%2A>, and <xref:System.IO.Stream.FlushAsync%2A>, help you implement asynchronous I/O operations more easily."}]},{"pos":[575,1077],"content":"The default implementation of `BeginWrite` on a stream calls the <xref:System.IO.Stream.Write%2A> method synchronously, which means that `Write` might block on some streams. However, instances of classes such as `FileStream` and `NetworkStream` fully support asynchronous operations if the instances have been opened asynchronously. Therefore, calls to `BeginWrite` will not block on those streams. You can override `BeginWrite` (by using async delegates, for example) to provide asynchronous behavior.","nodes":[{"content":"The default implementation of <ph id=\"ph1\">`BeginWrite`</ph> on a stream calls the <ph id=\"ph2\">&lt;xref:System.IO.Stream.Write%2A&gt;</ph> method synchronously, which means that <ph id=\"ph3\">`Write`</ph> might block on some streams.","pos":[0,173],"source":"The default implementation of `BeginWrite` on a stream calls the <xref:System.IO.Stream.Write%2A> method synchronously, which means that `Write` might block on some streams."},{"content":"However, instances of classes such as <ph id=\"ph1\">`FileStream`</ph> and <ph id=\"ph2\">`NetworkStream`</ph> fully support asynchronous operations if the instances have been opened asynchronously.","pos":[174,332],"source":" However, instances of classes such as `FileStream` and `NetworkStream` fully support asynchronous operations if the instances have been opened asynchronously."},{"content":"Therefore, calls to <ph id=\"ph1\">`BeginWrite`</ph> will not block on those streams.","pos":[333,398],"source":" Therefore, calls to `BeginWrite` will not block on those streams."},{"content":"You can override <ph id=\"ph1\">`BeginWrite`</ph> (by using async delegates, for example) to provide asynchronous behavior.","pos":[399,502],"source":" You can override `BeginWrite` (by using async delegates, for example) to provide asynchronous behavior."}]},{"pos":[1084,1629],"content":"Pass the `IAsyncResult` returned by the current method to <xref:System.IO.Stream.EndWrite%2A> to ensure that the write completes and frees resources appropriately. <xref:System.IO.Stream.EndWrite%2A> must be called once for every call to <xref:System.IO.Stream.BeginWrite%2A>. You can do this either by using the same code that called `BeginWrite` or in a callback passed to `BeginWrite`. If an error occurs during an asynchronous write, an exception will not be thrown until `EndWrite` is called with the `IAsyncResult` returned by this method.","nodes":[{"content":"Pass the <ph id=\"ph1\">`IAsyncResult`</ph> returned by the current method to <ph id=\"ph2\">&lt;xref:System.IO.Stream.EndWrite%2A&gt;</ph> to ensure that the write completes and frees resources appropriately.","pos":[0,163],"source":"Pass the `IAsyncResult` returned by the current method to <xref:System.IO.Stream.EndWrite%2A> to ensure that the write completes and frees resources appropriately."},{"content":"<ph id=\"ph1\">&lt;xref:System.IO.Stream.EndWrite%2A&gt;</ph> must be called once for every call to <ph id=\"ph2\">&lt;xref:System.IO.Stream.BeginWrite%2A&gt;</ph>.","pos":[164,276],"source":" <xref:System.IO.Stream.EndWrite%2A> must be called once for every call to <xref:System.IO.Stream.BeginWrite%2A>."},{"content":"You can do this either by using the same code that called <ph id=\"ph1\">`BeginWrite`</ph> or in a callback passed to <ph id=\"ph2\">`BeginWrite`</ph>.","pos":[277,388],"source":" You can do this either by using the same code that called `BeginWrite` or in a callback passed to `BeginWrite`."},{"content":"If an error occurs during an asynchronous write, an exception will not be thrown until <ph id=\"ph1\">`EndWrite`</ph> is called with the <ph id=\"ph2\">`IAsyncResult`</ph> returned by this method.","pos":[389,545],"source":" If an error occurs during an asynchronous write, an exception will not be thrown until `EndWrite` is called with the `IAsyncResult` returned by this method."}]},{"pos":[1636,1713],"content":"If a stream is writable, writing at the end of the stream expands the stream.","nodes":[{"content":"If a stream is writable, writing at the end of the stream expands the stream.","pos":[0,77]}]},{"pos":[1720,1941],"content":"The current position in the stream is updated when you issue the asynchronous read or write, not when the I/O operation completes. Multiple simultaneous asynchronous requests render the request completion order uncertain.","nodes":[{"content":"The current position in the stream is updated when you issue the asynchronous read or write, not when the I/O operation completes. Multiple simultaneous asynchronous requests render the request completion order uncertain.","pos":[0,221],"nodes":[{"content":"The current position in the stream is updated when you issue the asynchronous read or write, not when the I/O operation completes.","pos":[0,130]},{"content":"Multiple simultaneous asynchronous requests render the request completion order uncertain.","pos":[131,221]}]}]},{"pos":[1948,2060],"content":"Use the <xref:System.IO.Stream.CanWrite%2A> property to determine whether the current instance supports writing.","nodes":[{"content":"Use the <ph id=\"ph1\">&lt;xref:System.IO.Stream.CanWrite%2A&gt;</ph> property to determine whether the current instance supports writing.","pos":[0,112],"source":"Use the <xref:System.IO.Stream.CanWrite%2A> property to determine whether the current instance supports writing."}]},{"pos":[2067,2355],"content":"If a stream is closed or you pass an invalid argument, exceptions are thrown immediately from `BeginWrite`. Errors that occur during an asynchronous write request, such as a disk failure during the I/O request, occur on the thread pool thread and throw exceptions when calling `EndWrite`.","nodes":[{"content":"If a stream is closed or you pass an invalid argument, exceptions are thrown immediately from <ph id=\"ph1\">`BeginWrite`</ph>.","pos":[0,107],"source":"If a stream is closed or you pass an invalid argument, exceptions are thrown immediately from `BeginWrite`."},{"content":"Errors that occur during an asynchronous write request, such as a disk failure during the I/O request, occur on the thread pool thread and throw exceptions when calling <ph id=\"ph1\">`EndWrite`</ph>.","pos":[108,288],"source":" Errors that occur during an asynchronous write request, such as a disk failure during the I/O request, occur on the thread pool thread and throw exceptions when calling `EndWrite`."}]}],"pos":[19088,21458],"yaml":true,"extradata":"MT"},{"content":"The buffer to write data from.","nodes":[{"pos":[0,30],"content":"The buffer to write data from.","nodes":[{"content":"The buffer to write data from.","pos":[0,30]}]}],"pos":[21676,21707],"yaml":true},{"content":"The byte offset in <code>buffer</code> from which to begin writing.","nodes":[{"pos":[0,67],"content":"The byte offset in <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">buffer</ph><ept id=\"p1\">&lt;/code&gt;</ept> from which to begin writing.","source":"The byte offset in <code>buffer</code> from which to begin writing."}],"pos":[21768,21836],"yaml":true},{"content":"The maximum number of bytes to write.","nodes":[{"pos":[0,37],"content":"The maximum number of bytes to write.","nodes":[{"content":"The maximum number of bytes to write.","pos":[0,37]}]}],"pos":[21896,21934],"yaml":true},{"content":"An optional asynchronous callback, to be called when the write is complete.","nodes":[{"pos":[0,75],"content":"An optional asynchronous callback, to be called when the write is complete.","nodes":[{"content":"An optional asynchronous callback, to be called when the write is complete.","pos":[0,75]}]}],"pos":[22005,22081],"yaml":true},{"content":"A user-provided object that distinguishes this particular asynchronous write request from other requests.","nodes":[{"pos":[0,105],"content":"A user-provided object that distinguishes this particular asynchronous write request from other requests.","nodes":[{"content":"A user-provided object that distinguishes this particular asynchronous write request from other requests.","pos":[0,105]}]}],"pos":[22142,22248],"yaml":true},{"content":"An `IAsyncResult` that represents the asynchronous write, which could still be pending.","nodes":[{"pos":[0,87],"content":"An <ph id=\"ph1\">`IAsyncResult`</ph> that represents the asynchronous write, which could still be pending.","source":"An `IAsyncResult` that represents the asynchronous write, which could still be pending."}],"pos":[22311,22399],"yaml":true},{"content":"Attempted an asynchronous write past the end of the stream, or a disk error occurs.","nodes":[{"pos":[0,83],"content":"Attempted an asynchronous write past the end of the stream, or a disk error occurs.","nodes":[{"content":"Attempted an asynchronous write past the end of the stream, or a disk error occurs.","pos":[0,83]}]}],"pos":[22542,22626],"yaml":true},{"content":"One or more of the arguments is invalid.","nodes":[{"pos":[0,40],"content":"One or more of the arguments is invalid.","nodes":[{"content":"One or more of the arguments is invalid.","pos":[0,40]}]}],"pos":[22720,22761],"yaml":true},{"content":"Methods were called after the stream was closed.","nodes":[{"pos":[0,48],"content":"Methods were called after the stream was closed.","nodes":[{"content":"Methods were called after the stream was closed.","pos":[0,48]}]}],"pos":[22867,22916],"yaml":true},{"content":"The current `Stream` implementation does not support the write operation.","nodes":[{"pos":[0,73],"content":"The current <ph id=\"ph1\">`Stream`</ph> implementation does not support the write operation.","source":"The current `Stream` implementation does not support the write operation."}],"pos":[23018,23092],"yaml":true},{"content":"When overridden in a derived class, gets a value indicating whether the current stream supports reading.","nodes":[{"pos":[0,104],"content":"When overridden in a derived class, gets a value indicating whether the current stream supports reading.","nodes":[{"content":"When overridden in a derived class, gets a value indicating whether the current stream supports reading.","pos":[0,104]}]}],"pos":[24136,24241],"yaml":true},{"content":"If a class derived from <xref:System.IO.Stream> does not support reading, calls to the <xref:System.IO.Stream.Read%2A>, <xref:System.IO.Stream.ReadByte%2A>, and <xref:System.IO.Stream.BeginRead%2A> methods throw a <xref:System.NotSupportedException>.  \n  \n If the stream is closed, this property returns `false`.","nodes":[{"pos":[0,250],"content":"If a class derived from <xref:System.IO.Stream> does not support reading, calls to the <xref:System.IO.Stream.Read%2A>, <xref:System.IO.Stream.ReadByte%2A>, and <xref:System.IO.Stream.BeginRead%2A> methods throw a <xref:System.NotSupportedException>.","nodes":[{"content":"If a class derived from <ph id=\"ph1\">&lt;xref:System.IO.Stream&gt;</ph> does not support reading, calls to the <ph id=\"ph2\">&lt;xref:System.IO.Stream.Read%2A&gt;</ph>, <ph id=\"ph3\">&lt;xref:System.IO.Stream.ReadByte%2A&gt;</ph>, and <ph id=\"ph4\">&lt;xref:System.IO.Stream.BeginRead%2A&gt;</ph> methods throw a <ph id=\"ph5\">&lt;xref:System.NotSupportedException&gt;</ph>.","pos":[0,250],"source":"If a class derived from <xref:System.IO.Stream> does not support reading, calls to the <xref:System.IO.Stream.Read%2A>, <xref:System.IO.Stream.ReadByte%2A>, and <xref:System.IO.Stream.BeginRead%2A> methods throw a <xref:System.NotSupportedException>."}]},{"pos":[257,312],"content":"If the stream is closed, this property returns <ph id=\"ph1\">`false`</ph>.","source":"If the stream is closed, this property returns `false`."}],"pos":[24252,24569],"yaml":true,"extradata":"MT"},{"content":"`true` if the stream supports reading; otherwise, `false`.","nodes":[{"pos":[0,58],"content":"<ph id=\"ph1\">`true`</ph> if the stream supports reading; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` if the stream supports reading; otherwise, `false`."}],"pos":[25237,25298],"yaml":true},{"content":"When overridden in a derived class, gets a value indicating whether the current stream supports seeking.","nodes":[{"pos":[0,104],"content":"When overridden in a derived class, gets a value indicating whether the current stream supports seeking.","nodes":[{"content":"When overridden in a derived class, gets a value indicating whether the current stream supports seeking.","pos":[0,104]}]}],"pos":[26741,26846],"yaml":true},{"content":"If a class derived from <xref:System.IO.Stream> does not support seeking, calls to <xref:System.IO.Stream.Length%2A>, <xref:System.IO.Stream.SetLength%2A>, <xref:System.IO.Stream.Position%2A>, and <xref:System.IO.Stream.Seek%2A> throw a <xref:System.NotSupportedException>.  \n  \n If the stream is closed, this property returns `false`.","nodes":[{"pos":[0,273],"content":"If a class derived from <xref:System.IO.Stream> does not support seeking, calls to <xref:System.IO.Stream.Length%2A>, <xref:System.IO.Stream.SetLength%2A>, <xref:System.IO.Stream.Position%2A>, and <xref:System.IO.Stream.Seek%2A> throw a <xref:System.NotSupportedException>.","nodes":[{"content":"If a class derived from <ph id=\"ph1\">&lt;xref:System.IO.Stream&gt;</ph> does not support seeking, calls to <ph id=\"ph2\">&lt;xref:System.IO.Stream.Length%2A&gt;</ph>, <ph id=\"ph3\">&lt;xref:System.IO.Stream.SetLength%2A&gt;</ph>, <ph id=\"ph4\">&lt;xref:System.IO.Stream.Position%2A&gt;</ph>, and <ph id=\"ph5\">&lt;xref:System.IO.Stream.Seek%2A&gt;</ph> throw a <ph id=\"ph6\">&lt;xref:System.NotSupportedException&gt;</ph>.","pos":[0,273],"source":"If a class derived from <xref:System.IO.Stream> does not support seeking, calls to <xref:System.IO.Stream.Length%2A>, <xref:System.IO.Stream.SetLength%2A>, <xref:System.IO.Stream.Position%2A>, and <xref:System.IO.Stream.Seek%2A> throw a <xref:System.NotSupportedException>."}]},{"pos":[280,335],"content":"If the stream is closed, this property returns <ph id=\"ph1\">`false`</ph>.","source":"If the stream is closed, this property returns `false`."}],"pos":[26857,27197],"yaml":true,"extradata":"MT"},{"content":"`true` if the stream supports seeking; otherwise, `false`.","nodes":[{"pos":[0,58],"content":"<ph id=\"ph1\">`true`</ph> if the stream supports seeking; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` if the stream supports seeking; otherwise, `false`."}],"pos":[27316,27377],"yaml":true},{"content":"Gets a value that determines whether the current stream can time out.","nodes":[{"pos":[0,69],"content":"Gets a value that determines whether the current stream can time out.","nodes":[{"content":"Gets a value that determines whether the current stream can time out.","pos":[0,69]}]}],"pos":[28838,28908],"yaml":true},{"content":"The <xref:System.IO.Stream.CanTimeout%2A> property always returns `false`. Some stream implementations require different behavior, such as <xref:System.Net.Sockets.NetworkStream>, which times out if network connectivity is interrupted or lost. If you are implementing a stream that must be able to time out, this property should be overridden to return `true`.","nodes":[{"pos":[0,360],"content":"The <xref:System.IO.Stream.CanTimeout%2A> property always returns `false`. Some stream implementations require different behavior, such as <xref:System.Net.Sockets.NetworkStream>, which times out if network connectivity is interrupted or lost. If you are implementing a stream that must be able to time out, this property should be overridden to return `true`.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.IO.Stream.CanTimeout%2A&gt;</ph> property always returns <ph id=\"ph2\">`false`</ph>.","pos":[0,74],"source":"The <xref:System.IO.Stream.CanTimeout%2A> property always returns `false`."},{"content":"Some stream implementations require different behavior, such as <ph id=\"ph1\">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph>, which times out if network connectivity is interrupted or lost.","pos":[75,243],"source":" Some stream implementations require different behavior, such as <xref:System.Net.Sockets.NetworkStream>, which times out if network connectivity is interrupted or lost."},{"content":"If you are implementing a stream that must be able to time out, this property should be overridden to return <ph id=\"ph1\">`true`</ph>.","pos":[244,360],"source":" If you are implementing a stream that must be able to time out, this property should be overridden to return `true`."}]}],"pos":[28919,29280],"yaml":true,"extradata":"MT"},{"content":"A value that determines whether the current stream can time out.","nodes":[{"pos":[0,64],"content":"A value that determines whether the current stream can time out.","nodes":[{"content":"A value that determines whether the current stream can time out.","pos":[0,64]}]}],"pos":[29468,29533],"yaml":true},{"content":"When overridden in a derived class, gets a value indicating whether the current stream supports writing.","nodes":[{"pos":[0,104],"content":"When overridden in a derived class, gets a value indicating whether the current stream supports writing.","nodes":[{"content":"When overridden in a derived class, gets a value indicating whether the current stream supports writing.","pos":[0,104]}]}],"pos":[31060,31165],"yaml":true},{"content":"If a class derived from <xref:System.IO.Stream> does not support writing, a call to <xref:System.IO.Stream.Write%2A>, <xref:System.IO.Stream.BeginWrite%2A>, or <xref:System.IO.Stream.WriteByte%2A> throws a <xref:System.NotSupportedException>. In such cases, <xref:System.IO.Stream.Flush%2A> is typically implemented as an empty method to ensure full compatibility with other <xref:System.IO.Stream> types since it's valid to flush a read-only stream.   \n  \n If the stream is closed, this property returns `false`.","nodes":[{"pos":[0,450],"content":"If a class derived from <xref:System.IO.Stream> does not support writing, a call to <xref:System.IO.Stream.Write%2A>, <xref:System.IO.Stream.BeginWrite%2A>, or <xref:System.IO.Stream.WriteByte%2A> throws a <xref:System.NotSupportedException>. In such cases, <xref:System.IO.Stream.Flush%2A> is typically implemented as an empty method to ensure full compatibility with other <xref:System.IO.Stream> types since it's valid to flush a read-only stream.","nodes":[{"content":"If a class derived from <xref:System.IO.Stream> does not support writing, a call to <xref:System.IO.Stream.Write%2A>, <xref:System.IO.Stream.BeginWrite%2A>, or <xref:System.IO.Stream.WriteByte%2A> throws a <xref:System.NotSupportedException>. In such cases, <xref:System.IO.Stream.Flush%2A> is typically implemented as an empty method to ensure full compatibility with other <xref:System.IO.Stream> types since it's valid to flush a read-only stream.","pos":[0,450],"nodes":[{"content":"If a class derived from <ph id=\"ph1\">&lt;xref:System.IO.Stream&gt;</ph> does not support writing, a call to <ph id=\"ph2\">&lt;xref:System.IO.Stream.Write%2A&gt;</ph>, <ph id=\"ph3\">&lt;xref:System.IO.Stream.BeginWrite%2A&gt;</ph>, or <ph id=\"ph4\">&lt;xref:System.IO.Stream.WriteByte%2A&gt;</ph> throws a <ph id=\"ph5\">&lt;xref:System.NotSupportedException&gt;</ph>.","pos":[0,242],"source":"If a class derived from <xref:System.IO.Stream> does not support writing, a call to <xref:System.IO.Stream.Write%2A>, <xref:System.IO.Stream.BeginWrite%2A>, or <xref:System.IO.Stream.WriteByte%2A> throws a <xref:System.NotSupportedException>."},{"content":"In such cases, <ph id=\"ph1\">&lt;xref:System.IO.Stream.Flush%2A&gt;</ph> is typically implemented as an empty method to ensure full compatibility with other <ph id=\"ph2\">&lt;xref:System.IO.Stream&gt;</ph> types since it's valid to flush a read-only stream.","pos":[243,450],"source":" In such cases, <xref:System.IO.Stream.Flush%2A> is typically implemented as an empty method to ensure full compatibility with other <xref:System.IO.Stream> types since it's valid to flush a read-only stream."}]}]},{"pos":[458,513],"content":"If the stream is closed, this property returns <ph id=\"ph1\">`false`</ph>.","source":"If the stream is closed, this property returns `false`."}],"pos":[31176,31694],"yaml":true,"extradata":"MT"},{"content":"`true` if the stream supports writing; otherwise, `false`.","nodes":[{"pos":[0,58],"content":"<ph id=\"ph1\">`true`</ph> if the stream supports writing; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` if the stream supports writing; otherwise, `false`."}],"pos":[32346,32407],"yaml":true},{"content":"Closes the current stream and releases any resources (such as sockets and file handles) associated with the current stream. Instead of calling this method, ensure that the stream is properly disposed.","nodes":[{"pos":[0,200],"content":"Closes the current stream and releases any resources (such as sockets and file handles) associated with the current stream. Instead of calling this method, ensure that the stream is properly disposed.","nodes":[{"content":"Closes the current stream and releases any resources (such as sockets and file handles) associated with the current stream. Instead of calling this method, ensure that the stream is properly disposed.","pos":[0,200],"nodes":[{"content":"Closes the current stream and releases any resources (such as sockets and file handles) associated with the current stream.","pos":[0,123]},{"content":"Instead of calling this method, ensure that the stream is properly disposed.","pos":[124,200]}]}]}],"pos":[33829,34030],"yaml":true},{"content":"This method calls <xref:System.IO.Stream.Dispose%2A>, specifying `true` to release all resources. You do not have to specifically call the <xref:System.IO.Stream.Close%2A> method. Instead, ensure that every <xref:System.IO.Stream> object is properly disposed. You can declare <xref:System.IO.Stream> objects within a `using` block (or `Using` block in Visual Basic) to ensure that the stream and all of its resources are disposed, or you can explicitly call the <xref:System.IO.Stream.Dispose%2A> method.  \n  \n Flushing the stream will not flush its underlying encoder unless you explicitly call an implementation of <xref:System.IO.Stream.Flush%2A> or `Close`. Setting <xref:System.IO.StreamWriter.AutoFlush%2A> to `true` means that data will be flushed from the buffer to the stream, but the encoder state will not be flushed. This allows the encoder to keep its state (partial characters) so that it can encode the next block of characters correctly. This scenario affects UTF8 and UTF7 where certain characters can be encoded only after the encoder receives the adjacent character or characters.  \n  \n Attempts to manipulate the stream after the stream has been closed might throw an <xref:System.ObjectDisposedException>.","nodes":[{"pos":[0,504],"content":"This method calls <xref:System.IO.Stream.Dispose%2A>, specifying `true` to release all resources. You do not have to specifically call the <xref:System.IO.Stream.Close%2A> method. Instead, ensure that every <xref:System.IO.Stream> object is properly disposed. You can declare <xref:System.IO.Stream> objects within a `using` block (or `Using` block in Visual Basic) to ensure that the stream and all of its resources are disposed, or you can explicitly call the <xref:System.IO.Stream.Dispose%2A> method.","nodes":[{"content":"This method calls <ph id=\"ph1\">&lt;xref:System.IO.Stream.Dispose%2A&gt;</ph>, specifying <ph id=\"ph2\">`true`</ph> to release all resources.","pos":[0,97],"source":"This method calls <xref:System.IO.Stream.Dispose%2A>, specifying `true` to release all resources."},{"content":"You do not have to specifically call the <ph id=\"ph1\">&lt;xref:System.IO.Stream.Close%2A&gt;</ph> method.","pos":[98,179],"source":" You do not have to specifically call the <xref:System.IO.Stream.Close%2A> method."},{"content":"Instead, ensure that every <ph id=\"ph1\">&lt;xref:System.IO.Stream&gt;</ph> object is properly disposed.","pos":[180,259],"source":" Instead, ensure that every <xref:System.IO.Stream> object is properly disposed."},{"content":"You can declare <ph id=\"ph1\">&lt;xref:System.IO.Stream&gt;</ph> objects within a <ph id=\"ph2\">`using`</ph> block (or <ph id=\"ph3\">`Using`</ph> block in Visual Basic) to ensure that the stream and all of its resources are disposed, or you can explicitly call the <ph id=\"ph4\">&lt;xref:System.IO.Stream.Dispose%2A&gt;</ph> method.","pos":[260,504],"source":" You can declare <xref:System.IO.Stream> objects within a `using` block (or `Using` block in Visual Basic) to ensure that the stream and all of its resources are disposed, or you can explicitly call the <xref:System.IO.Stream.Dispose%2A> method."}]},{"pos":[511,1099],"content":"Flushing the stream will not flush its underlying encoder unless you explicitly call an implementation of <xref:System.IO.Stream.Flush%2A> or `Close`. Setting <xref:System.IO.StreamWriter.AutoFlush%2A> to `true` means that data will be flushed from the buffer to the stream, but the encoder state will not be flushed. This allows the encoder to keep its state (partial characters) so that it can encode the next block of characters correctly. This scenario affects UTF8 and UTF7 where certain characters can be encoded only after the encoder receives the adjacent character or characters.","nodes":[{"content":"Flushing the stream will not flush its underlying encoder unless you explicitly call an implementation of <ph id=\"ph1\">&lt;xref:System.IO.Stream.Flush%2A&gt;</ph> or <ph id=\"ph2\">`Close`</ph>.","pos":[0,150],"source":"Flushing the stream will not flush its underlying encoder unless you explicitly call an implementation of <xref:System.IO.Stream.Flush%2A> or `Close`."},{"content":"Setting <ph id=\"ph1\">&lt;xref:System.IO.StreamWriter.AutoFlush%2A&gt;</ph> to <ph id=\"ph2\">`true`</ph> means that data will be flushed from the buffer to the stream, but the encoder state will not be flushed.","pos":[151,317],"source":" Setting <xref:System.IO.StreamWriter.AutoFlush%2A> to `true` means that data will be flushed from the buffer to the stream, but the encoder state will not be flushed."},{"content":"This allows the encoder to keep its state (partial characters) so that it can encode the next block of characters correctly.","pos":[318,442]},{"content":"This scenario affects UTF8 and UTF7 where certain characters can be encoded only after the encoder receives the adjacent character or characters.","pos":[443,588]}]},{"pos":[1106,1226],"content":"Attempts to manipulate the stream after the stream has been closed might throw an <xref:System.ObjectDisposedException>.","nodes":[{"content":"Attempts to manipulate the stream after the stream has been closed might throw an <ph id=\"ph1\">&lt;xref:System.ObjectDisposedException&gt;</ph>.","pos":[0,120],"source":"Attempts to manipulate the stream after the stream has been closed might throw an <xref:System.ObjectDisposedException>."}]}],"pos":[34041,35274],"yaml":true,"extradata":"MT"},{"content":"Reads the bytes from the current stream and writes them to another stream, using a specified buffer size.","nodes":[{"pos":[0,105],"content":"Reads the bytes from the current stream and writes them to another stream, using a specified buffer size.","nodes":[{"content":"Reads the bytes from the current stream and writes them to another stream, using a specified buffer size.","pos":[0,105]}]}],"pos":[36573,36679],"yaml":true},{"content":"Copying begins at the current position in the current stream, and does not reset the position of the destination stream after the copy operation is complete.","nodes":[{"pos":[0,157],"content":"Copying begins at the current position in the current stream, and does not reset the position of the destination stream after the copy operation is complete.","nodes":[{"content":"Copying begins at the current position in the current stream, and does not reset the position of the destination stream after the copy operation is complete.","pos":[0,157]}]}],"pos":[36690,36848],"yaml":true,"extradata":"MT"},{"content":"The stream to which the contents of the current stream will be copied.","nodes":[{"pos":[0,70],"content":"The stream to which the contents of the current stream will be copied.","nodes":[{"content":"The stream to which the contents of the current stream will be copied.","pos":[0,70]}]}],"pos":[37024,37095],"yaml":true},{"content":"The size of the buffer. This value must be greater than zero. The default size is 81920.","nodes":[{"pos":[0,88],"content":"The size of the buffer. This value must be greater than zero. The default size is 81920.","nodes":[{"content":"The size of the buffer. This value must be greater than zero. The default size is 81920.","pos":[0,88],"nodes":[{"content":"The size of the buffer.","pos":[0,23]},{"content":"This value must be greater than zero.","pos":[24,61]},{"content":"The default size is 81920.","pos":[62,88]}]}]}],"pos":[37160,37249],"yaml":true},{"content":"<code>destination</code> is `null`.","nodes":[{"pos":[0,35],"content":"<ph id=\"ph1\">&lt;code&gt;destination&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>destination</code> is `null`."}],"pos":[37402,37438],"yaml":true},{"content":"<code>bufferSize</code> is negative or zero.","nodes":[{"pos":[0,44],"content":"<ph id=\"ph1\">&lt;code&gt;bufferSize&lt;/code&gt;</ph> is negative or zero.","source":"<code>bufferSize</code> is negative or zero."}],"pos":[37552,37597],"yaml":true},{"content":"The current stream does not support reading.  \n  \n -or-  \n  \n <code>destination</code> does not support writing.","nodes":[{"pos":[0,44],"content":"The current stream does not support reading.","nodes":[{"content":"The current stream does not support reading.","pos":[0,44]}]},{"pos":[51,55],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[62,112],"content":"<ph id=\"ph1\">&lt;code&gt;destination&lt;/code&gt;</ph> does not support writing.","source":"<code>destination</code> does not support writing."}],"pos":[37699,37818],"yaml":true},{"content":"Either the current stream or <code>destination</code> were closed before the <xref href=\"System.IO.Stream.CopyTo(System.IO.Stream)\"></xref> method was called.","nodes":[{"pos":[0,158],"content":"Either the current stream or <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">destination</ph><ept id=\"p1\">&lt;/code&gt;</ept> were closed before the <ph id=\"ph2\">&lt;xref href=\"System.IO.Stream.CopyTo(System.IO.Stream)\"&gt;&lt;/xref&gt;</ph> method was called.","source":"Either the current stream or <code>destination</code> were closed before the <xref href=\"System.IO.Stream.CopyTo(System.IO.Stream)\"></xref> method was called."}],"pos":[37924,38083],"yaml":true},{"content":"An I/O error occurred.","nodes":[{"pos":[0,22],"content":"An I/O error occurred.","nodes":[{"content":"An I/O error occurred.","pos":[0,22]}]}],"pos":[38171,38194],"yaml":true},{"content":"Reads the bytes from the current stream and writes them to another stream.","nodes":[{"pos":[0,74],"content":"Reads the bytes from the current stream and writes them to another stream.","nodes":[{"content":"Reads the bytes from the current stream and writes them to another stream.","pos":[0,74]}]}],"pos":[39652,39727],"yaml":true},{"content":"Copying begins at the current position in the current stream, and does not reset the position of the destination stream after the copy operation is complete.","nodes":[{"pos":[0,157],"content":"Copying begins at the current position in the current stream, and does not reset the position of the destination stream after the copy operation is complete.","nodes":[{"content":"Copying begins at the current position in the current stream, and does not reset the position of the destination stream after the copy operation is complete.","pos":[0,157]}]}],"pos":[39738,39896],"yaml":true,"extradata":"MT"},{"content":"The stream to which the contents of the current stream will be copied.","nodes":[{"pos":[0,70],"content":"The stream to which the contents of the current stream will be copied.","nodes":[{"content":"The stream to which the contents of the current stream will be copied.","pos":[0,70]}]}],"pos":[40459,40530],"yaml":true},{"content":"<code>destination</code> is `null`.","nodes":[{"pos":[0,35],"content":"<ph id=\"ph1\">&lt;code&gt;destination&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>destination</code> is `null`."}],"pos":[40683,40719],"yaml":true},{"content":"The current stream does not support reading.  \n  \n -or-  \n  \n <code>destination</code> does not support writing.","nodes":[{"pos":[0,44],"content":"The current stream does not support reading.","nodes":[{"content":"The current stream does not support reading.","pos":[0,44]}]},{"pos":[51,55],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[62,112],"content":"<ph id=\"ph1\">&lt;code&gt;destination&lt;/code&gt;</ph> does not support writing.","source":"<code>destination</code> does not support writing."}],"pos":[40821,40940],"yaml":true},{"content":"Either the current stream or <code>destination</code> were closed before the <xref href=\"System.IO.Stream.CopyTo(System.IO.Stream)\"></xref> method was called.","nodes":[{"pos":[0,158],"content":"Either the current stream or <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">destination</ph><ept id=\"p1\">&lt;/code&gt;</ept> were closed before the <ph id=\"ph2\">&lt;xref href=\"System.IO.Stream.CopyTo(System.IO.Stream)\"&gt;&lt;/xref&gt;</ph> method was called.","source":"Either the current stream or <code>destination</code> were closed before the <xref href=\"System.IO.Stream.CopyTo(System.IO.Stream)\"></xref> method was called."}],"pos":[41046,41205],"yaml":true},{"content":"An I/O error occurred.","nodes":[{"pos":[0,22],"content":"An I/O error occurred.","nodes":[{"content":"An I/O error occurred.","pos":[0,22]}]}],"pos":[41293,41316],"yaml":true},{"content":"Asynchronously reads the bytes from the current stream and writes them to another stream.","nodes":[{"pos":[0,89],"content":"Asynchronously reads the bytes from the current stream and writes them to another stream.","nodes":[{"content":"Asynchronously reads the bytes from the current stream and writes them to another stream.","pos":[0,89]}]}],"pos":[42804,42894],"yaml":true},{"content":"The <xref:System.IO.Stream.CopyToAsync%2A> method enables you to perform resource-intensive I/O operations without blocking the main thread. This performance consideration is particularly important in a [!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)] app or [!INCLUDE[desktop_appname](~/includes/desktop-appname-md.md)] app where a time-consuming stream operation can block the UI thread and make your app appear as if it is not working. The async methods are used in conjunction with the `async` and `await` keywords in Visual Basic and C#.  \n  \n Copying begins at the current position in the current stream.","nodes":[{"pos":[0,559],"content":"The <xref:System.IO.Stream.CopyToAsync%2A> method enables you to perform resource-intensive I/O operations without blocking the main thread. This performance consideration is particularly important in a [!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)] app or [!INCLUDE[desktop_appname](~/includes/desktop-appname-md.md)] app where a time-consuming stream operation can block the UI thread and make your app appear as if it is not working. The async methods are used in conjunction with the `async` and `await` keywords in Visual Basic and C#.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.IO.Stream.CopyToAsync%2A&gt;</ph> method enables you to perform resource-intensive I/O operations without blocking the main thread.","pos":[0,140],"source":"The <xref:System.IO.Stream.CopyToAsync%2A> method enables you to perform resource-intensive I/O operations without blocking the main thread."},{"content":"This performance consideration is particularly important in a <ph id=\"ph1\">[!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)]</ph> app or <ph id=\"ph2\">[!INCLUDE[desktop_appname](~/includes/desktop-appname-md.md)]</ph> app where a time-consuming stream operation can block the UI thread and make your app appear as if it is not working.","pos":[141,455],"source":" This performance consideration is particularly important in a [!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)] app or [!INCLUDE[desktop_appname](~/includes/desktop-appname-md.md)] app where a time-consuming stream operation can block the UI thread and make your app appear as if it is not working."},{"content":"The async methods are used in conjunction with the <ph id=\"ph1\">`async`</ph> and <ph id=\"ph2\">`await`</ph> keywords in Visual Basic and C#.","pos":[456,559],"source":" The async methods are used in conjunction with the `async` and `await` keywords in Visual Basic and C#."}]},{"pos":[566,627],"content":"Copying begins at the current position in the current stream.","nodes":[{"content":"Copying begins at the current position in the current stream.","pos":[0,61]}]}],"pos":[42905,43537],"yaml":true,"extradata":"MT"},{"content":"The stream to which the contents of the current stream will be copied.","nodes":[{"pos":[0,70],"content":"The stream to which the contents of the current stream will be copied.","nodes":[{"content":"The stream to which the contents of the current stream will be copied.","pos":[0,70]}]}],"pos":[44525,44596],"yaml":true},{"content":"A task that represents the asynchronous copy operation.","nodes":[{"pos":[0,55],"content":"A task that represents the asynchronous copy operation.","nodes":[{"content":"A task that represents the asynchronous copy operation.","pos":[0,55]}]}],"pos":[44667,44723],"yaml":true},{"content":"<code>destination</code> is `null`.","nodes":[{"pos":[0,35],"content":"<ph id=\"ph1\">&lt;code&gt;destination&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>destination</code> is `null`."}],"pos":[44881,44917],"yaml":true},{"content":"Either the current stream or the destination stream is disposed.","nodes":[{"pos":[0,64],"content":"Either the current stream or the destination stream is disposed.","nodes":[{"content":"Either the current stream or the destination stream is disposed.","pos":[0,64]}]}],"pos":[45023,45088],"yaml":true},{"content":"The current stream does not support reading, or the destination stream does not support writing.","nodes":[{"pos":[0,96],"content":"The current stream does not support reading, or the destination stream does not support writing.","nodes":[{"content":"The current stream does not support reading, or the destination stream does not support writing.","pos":[0,96]}]}],"pos":[45190,45287],"yaml":true},{"content":"Asynchronously reads the bytes from the current stream and writes them to another stream, using a specified buffer size.","nodes":[{"pos":[0,120],"content":"Asynchronously reads the bytes from the current stream and writes them to another stream, using a specified buffer size.","nodes":[{"content":"Asynchronously reads the bytes from the current stream and writes them to another stream, using a specified buffer size.","pos":[0,120]}]}],"pos":[46910,47031],"yaml":true},{"content":"The <xref:System.IO.Stream.CopyToAsync%2A> method enables you to perform resource-intensive I/O operations without blocking the main thread. This performance consideration is particularly important in a [!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)] app or [!INCLUDE[desktop_appname](~/includes/desktop-appname-md.md)] app where a time-consuming stream operation can block the UI thread and make your app appear as if it is not working. The async methods are used in conjunction with the `async` and `await` keywords in Visual Basic and C#.  \n  \n Copying begins at the current position in the current stream.  \n  \n For an example of copying between two streams, see the <xref:System.IO.Stream.CopyToAsync%28System.IO.Stream%29> overload.","nodes":[{"pos":[0,559],"content":"The <xref:System.IO.Stream.CopyToAsync%2A> method enables you to perform resource-intensive I/O operations without blocking the main thread. This performance consideration is particularly important in a [!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)] app or [!INCLUDE[desktop_appname](~/includes/desktop-appname-md.md)] app where a time-consuming stream operation can block the UI thread and make your app appear as if it is not working. The async methods are used in conjunction with the `async` and `await` keywords in Visual Basic and C#.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.IO.Stream.CopyToAsync%2A&gt;</ph> method enables you to perform resource-intensive I/O operations without blocking the main thread.","pos":[0,140],"source":"The <xref:System.IO.Stream.CopyToAsync%2A> method enables you to perform resource-intensive I/O operations without blocking the main thread."},{"content":"This performance consideration is particularly important in a <ph id=\"ph1\">[!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)]</ph> app or <ph id=\"ph2\">[!INCLUDE[desktop_appname](~/includes/desktop-appname-md.md)]</ph> app where a time-consuming stream operation can block the UI thread and make your app appear as if it is not working.","pos":[141,455],"source":" This performance consideration is particularly important in a [!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)] app or [!INCLUDE[desktop_appname](~/includes/desktop-appname-md.md)] app where a time-consuming stream operation can block the UI thread and make your app appear as if it is not working."},{"content":"The async methods are used in conjunction with the <ph id=\"ph1\">`async`</ph> and <ph id=\"ph2\">`await`</ph> keywords in Visual Basic and C#.","pos":[456,559],"source":" The async methods are used in conjunction with the `async` and `await` keywords in Visual Basic and C#."}]},{"pos":[566,627],"content":"Copying begins at the current position in the current stream.","nodes":[{"content":"Copying begins at the current position in the current stream.","pos":[0,61]}]},{"pos":[634,756],"content":"For an example of copying between two streams, see the <xref:System.IO.Stream.CopyToAsync%28System.IO.Stream%29> overload.","nodes":[{"content":"For an example of copying between two streams, see the <ph id=\"ph1\">&lt;xref:System.IO.Stream.CopyToAsync%28System.IO.Stream%29&gt;</ph> overload.","pos":[0,122],"source":"For an example of copying between two streams, see the <xref:System.IO.Stream.CopyToAsync%28System.IO.Stream%29> overload."}]}],"pos":[47042,47805],"yaml":true,"extradata":"MT"},{"content":"The stream to which the contents of the current stream will be copied.","nodes":[{"pos":[0,70],"content":"The stream to which the contents of the current stream will be copied.","nodes":[{"content":"The stream to which the contents of the current stream will be copied.","pos":[0,70]}]}],"pos":[48076,48147],"yaml":true},{"content":"The size, in bytes, of the buffer. This value must be greater than zero. The default size is 81920.","nodes":[{"pos":[0,99],"content":"The size, in bytes, of the buffer. This value must be greater than zero. The default size is 81920.","nodes":[{"content":"The size, in bytes, of the buffer. This value must be greater than zero. The default size is 81920.","pos":[0,99],"nodes":[{"content":"The size, in bytes, of the buffer.","pos":[0,34]},{"content":"This value must be greater than zero.","pos":[35,72]},{"content":"The default size is 81920.","pos":[73,99]}]}]}],"pos":[48212,48312],"yaml":true},{"content":"A task that represents the asynchronous copy operation.","nodes":[{"pos":[0,55],"content":"A task that represents the asynchronous copy operation.","nodes":[{"content":"A task that represents the asynchronous copy operation.","pos":[0,55]}]}],"pos":[48383,48439],"yaml":true},{"content":"<code>destination</code> is `null`.","nodes":[{"pos":[0,35],"content":"<ph id=\"ph1\">&lt;code&gt;destination&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>destination</code> is `null`."}],"pos":[48597,48633],"yaml":true},{"content":"<code>buffersize</code> is negative or zero.","nodes":[{"pos":[0,44],"content":"<ph id=\"ph1\">&lt;code&gt;buffersize&lt;/code&gt;</ph> is negative or zero.","source":"<code>buffersize</code> is negative or zero."}],"pos":[48747,48792],"yaml":true},{"content":"Either the current stream or the destination stream is disposed.","nodes":[{"pos":[0,64],"content":"Either the current stream or the destination stream is disposed.","nodes":[{"content":"Either the current stream or the destination stream is disposed.","pos":[0,64]}]}],"pos":[48898,48963],"yaml":true},{"content":"The current stream does not support reading, or the destination stream does not support writing.","nodes":[{"pos":[0,96],"content":"The current stream does not support reading, or the destination stream does not support writing.","nodes":[{"content":"The current stream does not support reading, or the destination stream does not support writing.","pos":[0,96]}]}],"pos":[49065,49162],"yaml":true},{"content":"Asynchronously reads the bytes from the current stream and writes them to another stream, using a specified buffer size and cancellation token.","nodes":[{"pos":[0,143],"content":"Asynchronously reads the bytes from the current stream and writes them to another stream, using a specified buffer size and cancellation token.","nodes":[{"content":"Asynchronously reads the bytes from the current stream and writes them to another stream, using a specified buffer size and cancellation token.","pos":[0,143]}]}],"pos":[50947,51091],"yaml":true},{"content":"The <xref:System.IO.Stream.CopyToAsync%2A> method enables you to perform resource-intensive I/O operations without blocking the main thread. This performance consideration is particularly important in a [!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)] app or [!INCLUDE[desktop_appname](~/includes/desktop-appname-md.md)] app where a time-consuming stream operation can block the UI thread and make your app appear as if it is not working. The async methods are used in conjunction with the `async` and `await` keywords in Visual Basic and C#.  \n  \n If the operation is canceled before it completes, the returned task contains the <xref:System.Threading.Tasks.TaskStatus.Canceled> value for the <xref:System.Threading.Tasks.Task.Status%2A> property.  \n  \n Copying begins at the current position in the current stream.  \n  \n For an example of copying between two streams, see the <xref:System.IO.Stream.CopyToAsync%28System.IO.Stream%29> overload.","nodes":[{"pos":[0,559],"content":"The <xref:System.IO.Stream.CopyToAsync%2A> method enables you to perform resource-intensive I/O operations without blocking the main thread. This performance consideration is particularly important in a [!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)] app or [!INCLUDE[desktop_appname](~/includes/desktop-appname-md.md)] app where a time-consuming stream operation can block the UI thread and make your app appear as if it is not working. The async methods are used in conjunction with the `async` and `await` keywords in Visual Basic and C#.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.IO.Stream.CopyToAsync%2A&gt;</ph> method enables you to perform resource-intensive I/O operations without blocking the main thread.","pos":[0,140],"source":"The <xref:System.IO.Stream.CopyToAsync%2A> method enables you to perform resource-intensive I/O operations without blocking the main thread."},{"content":"This performance consideration is particularly important in a <ph id=\"ph1\">[!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)]</ph> app or <ph id=\"ph2\">[!INCLUDE[desktop_appname](~/includes/desktop-appname-md.md)]</ph> app where a time-consuming stream operation can block the UI thread and make your app appear as if it is not working.","pos":[141,455],"source":" This performance consideration is particularly important in a [!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)] app or [!INCLUDE[desktop_appname](~/includes/desktop-appname-md.md)] app where a time-consuming stream operation can block the UI thread and make your app appear as if it is not working."},{"content":"The async methods are used in conjunction with the <ph id=\"ph1\">`async`</ph> and <ph id=\"ph2\">`await`</ph> keywords in Visual Basic and C#.","pos":[456,559],"source":" The async methods are used in conjunction with the `async` and `await` keywords in Visual Basic and C#."}]},{"pos":[566,765],"content":"If the operation is canceled before it completes, the returned task contains the <xref:System.Threading.Tasks.TaskStatus.Canceled> value for the <xref:System.Threading.Tasks.Task.Status%2A> property.","nodes":[{"content":"If the operation is canceled before it completes, the returned task contains the <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.TaskStatus.Canceled&gt;</ph> value for the <ph id=\"ph2\">&lt;xref:System.Threading.Tasks.Task.Status%2A&gt;</ph> property.","pos":[0,199],"source":"If the operation is canceled before it completes, the returned task contains the <xref:System.Threading.Tasks.TaskStatus.Canceled> value for the <xref:System.Threading.Tasks.Task.Status%2A> property."}]},{"pos":[772,833],"content":"Copying begins at the current position in the current stream.","nodes":[{"content":"Copying begins at the current position in the current stream.","pos":[0,61]}]},{"pos":[840,962],"content":"For an example of copying between two streams, see the <xref:System.IO.Stream.CopyToAsync%28System.IO.Stream%29> overload.","nodes":[{"content":"For an example of copying between two streams, see the <ph id=\"ph1\">&lt;xref:System.IO.Stream.CopyToAsync%28System.IO.Stream%29&gt;</ph> overload.","pos":[0,122],"source":"For an example of copying between two streams, see the <xref:System.IO.Stream.CopyToAsync%28System.IO.Stream%29> overload."}]}],"pos":[51102,52073],"yaml":true,"extradata":"MT"},{"content":"The stream to which the contents of the current stream will be copied.","nodes":[{"pos":[0,70],"content":"The stream to which the contents of the current stream will be copied.","nodes":[{"content":"The stream to which the contents of the current stream will be copied.","pos":[0,70]}]}],"pos":[52406,52477],"yaml":true},{"content":"The size, in bytes, of the buffer. This value must be greater than zero. The default size is 81920.","nodes":[{"pos":[0,99],"content":"The size, in bytes, of the buffer. This value must be greater than zero. The default size is 81920.","nodes":[{"content":"The size, in bytes, of the buffer. This value must be greater than zero. The default size is 81920.","pos":[0,99],"nodes":[{"content":"The size, in bytes, of the buffer.","pos":[0,34]},{"content":"This value must be greater than zero.","pos":[35,72]},{"content":"The default size is 81920.","pos":[73,99]}]}]}],"pos":[52542,52642],"yaml":true},{"content":"The token to monitor for cancellation requests. The default value is <xref href=\"System.Threading.CancellationToken.None\"></xref>.","nodes":[{"pos":[0,130],"content":"The token to monitor for cancellation requests. The default value is <xref href=\"System.Threading.CancellationToken.None\"></xref>.","nodes":[{"content":"The token to monitor for cancellation requests.","pos":[0,47]},{"content":"The default value is <ph id=\"ph1\">&lt;xref href=\"System.Threading.CancellationToken.None\"&gt;&lt;/xref&gt;</ph>.","pos":[48,130],"source":" The default value is <xref href=\"System.Threading.CancellationToken.None\"></xref>."}]}],"pos":[52736,52867],"yaml":true},{"content":"A task that represents the asynchronous copy operation.","nodes":[{"pos":[0,55],"content":"A task that represents the asynchronous copy operation.","nodes":[{"content":"A task that represents the asynchronous copy operation.","pos":[0,55]}]}],"pos":[52938,52994],"yaml":true},{"content":"<code>destination</code> is `null`.","nodes":[{"pos":[0,35],"content":"<ph id=\"ph1\">&lt;code&gt;destination&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>destination</code> is `null`."}],"pos":[53152,53188],"yaml":true},{"content":"<code>buffersize</code> is negative or zero.","nodes":[{"pos":[0,44],"content":"<ph id=\"ph1\">&lt;code&gt;buffersize&lt;/code&gt;</ph> is negative or zero.","source":"<code>buffersize</code> is negative or zero."}],"pos":[53302,53347],"yaml":true},{"content":"Either the current stream or the destination stream is disposed.","nodes":[{"pos":[0,64],"content":"Either the current stream or the destination stream is disposed.","nodes":[{"content":"Either the current stream or the destination stream is disposed.","pos":[0,64]}]}],"pos":[53453,53518],"yaml":true},{"content":"The current stream does not support reading, or the destination stream does not support writing.","nodes":[{"pos":[0,96],"content":"The current stream does not support reading, or the destination stream does not support writing.","nodes":[{"content":"The current stream does not support reading, or the destination stream does not support writing.","pos":[0,96]}]}],"pos":[53620,53717],"yaml":true},{"content":"Allocates a <xref href=\"System.Threading.WaitHandle\"></xref> object.","nodes":[{"pos":[0,68],"content":"Allocates a <ph id=\"ph1\">&lt;xref href=\"System.Threading.WaitHandle\"&gt;&lt;/xref&gt;</ph> object.","source":"Allocates a <xref href=\"System.Threading.WaitHandle\"></xref> object."}],"pos":[55224,55293],"yaml":true},{"content":"When called for the first time, the current method creates a `WaitHandle` object and returns it. On subsequent calls, `CreateWaitHandle` returns a reference to a new wait handle.  \n  \n Use this method if you implement the asynchronous methods and require a way of blocking in <xref:System.IO.Stream.EndRead%2A> or <xref:System.IO.Stream.EndWrite%2A> until the asynchronous operation is complete.","nodes":[{"pos":[0,178],"content":"When called for the first time, the current method creates a `WaitHandle` object and returns it. On subsequent calls, `CreateWaitHandle` returns a reference to a new wait handle.","nodes":[{"content":"When called for the first time, the current method creates a <ph id=\"ph1\">`WaitHandle`</ph> object and returns it.","pos":[0,96],"source":"When called for the first time, the current method creates a `WaitHandle` object and returns it."},{"content":"On subsequent calls, <ph id=\"ph1\">`CreateWaitHandle`</ph> returns a reference to a new wait handle.","pos":[97,178],"source":" On subsequent calls, `CreateWaitHandle` returns a reference to a new wait handle."}]},{"pos":[185,395],"content":"Use this method if you implement the asynchronous methods and require a way of blocking in <xref:System.IO.Stream.EndRead%2A> or <xref:System.IO.Stream.EndWrite%2A> until the asynchronous operation is complete.","nodes":[{"content":"Use this method if you implement the asynchronous methods and require a way of blocking in <ph id=\"ph1\">&lt;xref:System.IO.Stream.EndRead%2A&gt;</ph> or <ph id=\"ph2\">&lt;xref:System.IO.Stream.EndWrite%2A&gt;</ph> until the asynchronous operation is complete.","pos":[0,210],"source":"Use this method if you implement the asynchronous methods and require a way of blocking in <xref:System.IO.Stream.EndRead%2A> or <xref:System.IO.Stream.EndWrite%2A> until the asynchronous operation is complete."}]}],"pos":[55304,55704],"yaml":true,"extradata":"MT"},{"content":"A reference to the allocated `WaitHandle`.","nodes":[{"pos":[0,42],"content":"A reference to the allocated <ph id=\"ph1\">`WaitHandle`</ph>.","source":"A reference to the allocated `WaitHandle`."}],"pos":[56017,56060],"yaml":true},{"content":"Releases all resources used by the <xref href=\"System.IO.Stream\"></xref>.","nodes":[{"pos":[0,73],"content":"Releases all resources used by the <ph id=\"ph1\">&lt;xref href=\"System.IO.Stream\"&gt;&lt;/xref&gt;</ph>.","source":"Releases all resources used by the <xref href=\"System.IO.Stream\"></xref>."}],"pos":[57221,57295],"yaml":true},{"content":"This method disposes the stream, by writing any changes to the backing store and closing the stream to release resources.  \n  \n Calling `Dispose` allows the resources used by the <xref:System.IO.Stream> to be reallocated for other purposes. For more information about `Dispose`, see [Cleaning Up Unmanaged Resources](~/docs/standard/garbage-collection/unmanaged.md).","nodes":[{"pos":[0,121],"content":"This method disposes the stream, by writing any changes to the backing store and closing the stream to release resources.","nodes":[{"content":"This method disposes the stream, by writing any changes to the backing store and closing the stream to release resources.","pos":[0,121]}]},{"pos":[128,366],"content":"Calling `Dispose` allows the resources used by the <xref:System.IO.Stream> to be reallocated for other purposes. For more information about `Dispose`, see [Cleaning Up Unmanaged Resources](~/docs/standard/garbage-collection/unmanaged.md).","nodes":[{"content":"Calling <ph id=\"ph1\">`Dispose`</ph> allows the resources used by the <ph id=\"ph2\">&lt;xref:System.IO.Stream&gt;</ph> to be reallocated for other purposes.","pos":[0,112],"source":"Calling `Dispose` allows the resources used by the <xref:System.IO.Stream> to be reallocated for other purposes."},{"content":"For more information about <ph id=\"ph1\">`Dispose`</ph>, see <bpt id=\"p1\">[</bpt>Cleaning Up Unmanaged Resources<ept id=\"p1\">](~/docs/standard/garbage-collection/unmanaged.md)</ept>.","pos":[113,238],"source":" For more information about `Dispose`, see [Cleaning Up Unmanaged Resources](~/docs/standard/garbage-collection/unmanaged.md)."}]}],"pos":[57306,57677],"yaml":true,"extradata":"MT"},{"content":"Releases the unmanaged resources used by the <xref href=\"System.IO.Stream\"></xref> and optionally releases the managed resources.","nodes":[{"pos":[0,129],"content":"Releases the unmanaged resources used by the <ph id=\"ph1\">&lt;xref href=\"System.IO.Stream\"&gt;&lt;/xref&gt;</ph> and optionally releases the managed resources.","source":"Releases the unmanaged resources used by the <xref href=\"System.IO.Stream\"></xref> and optionally releases the managed resources."}],"pos":[59259,59389],"yaml":true},{"content":"You should release all resources by specifying `true` for `disposing`. When `disposing` is `true`, the stream can also ensure data is flushed to the underlying buffer, and access other finalizable objects.  This may not be possible when called from a finalizer due a lack of ordering among finalizers.  \n  \n If your stream is using an operating system handle to communicate with its source, consider using a subclass of <xref:System.Runtime.InteropServices.SafeHandle> for this purpose.  \n  \n This method is called by the public <xref:System.ComponentModel.Component.Dispose%2A> method and the <xref:System.Object.Finalize%2A> method. <xref:System.ComponentModel.Component.Dispose%2A> invokes the protected <xref:System.IO.Stream.Dispose%2A> method with the `disposing` parameter set to `true`. <xref:System.Object.Finalize%2A> invokes <xref:System.IO.Stream.Dispose%2A> with `disposing` set to `false`.","nodes":[{"pos":[0,301],"content":"You should release all resources by specifying `true` for `disposing`. When `disposing` is `true`, the stream can also ensure data is flushed to the underlying buffer, and access other finalizable objects.  This may not be possible when called from a finalizer due a lack of ordering among finalizers.","nodes":[{"content":"You should release all resources by specifying <ph id=\"ph1\">`true`</ph> for <ph id=\"ph2\">`disposing`</ph>.","pos":[0,70],"source":"You should release all resources by specifying `true` for `disposing`."},{"content":"When <ph id=\"ph1\">`disposing`</ph> is <ph id=\"ph2\">`true`</ph>, the stream can also ensure data is flushed to the underlying buffer, and access other finalizable objects.","pos":[71,205],"source":" When `disposing` is `true`, the stream can also ensure data is flushed to the underlying buffer, and access other finalizable objects."},{"content":"This may not be possible when called from a finalizer due a lack of ordering among finalizers.","pos":[207,301]}]},{"pos":[308,486],"content":"If your stream is using an operating system handle to communicate with its source, consider using a subclass of <xref:System.Runtime.InteropServices.SafeHandle> for this purpose.","nodes":[{"content":"If your stream is using an operating system handle to communicate with its source, consider using a subclass of <ph id=\"ph1\">&lt;xref:System.Runtime.InteropServices.SafeHandle&gt;</ph> for this purpose.","pos":[0,178],"source":"If your stream is using an operating system handle to communicate with its source, consider using a subclass of <xref:System.Runtime.InteropServices.SafeHandle> for this purpose."}]},{"pos":[493,903],"content":"This method is called by the public <xref:System.ComponentModel.Component.Dispose%2A> method and the <xref:System.Object.Finalize%2A> method. <xref:System.ComponentModel.Component.Dispose%2A> invokes the protected <xref:System.IO.Stream.Dispose%2A> method with the `disposing` parameter set to `true`. <xref:System.Object.Finalize%2A> invokes <xref:System.IO.Stream.Dispose%2A> with `disposing` set to `false`.","nodes":[{"content":"This method is called by the public <ph id=\"ph1\">&lt;xref:System.ComponentModel.Component.Dispose%2A&gt;</ph> method and the <ph id=\"ph2\">&lt;xref:System.Object.Finalize%2A&gt;</ph> method.","pos":[0,141],"source":"This method is called by the public <xref:System.ComponentModel.Component.Dispose%2A> method and the <xref:System.Object.Finalize%2A> method."},{"content":"<ph id=\"ph1\">&lt;xref:System.ComponentModel.Component.Dispose%2A&gt;</ph> invokes the protected <ph id=\"ph2\">&lt;xref:System.IO.Stream.Dispose%2A&gt;</ph> method with the <ph id=\"ph3\">`disposing`</ph> parameter set to <ph id=\"ph4\">`true`</ph>.","pos":[142,301],"source":" <xref:System.ComponentModel.Component.Dispose%2A> invokes the protected <xref:System.IO.Stream.Dispose%2A> method with the `disposing` parameter set to `true`."},{"content":"<ph id=\"ph1\">&lt;xref:System.Object.Finalize%2A&gt;</ph> invokes <ph id=\"ph2\">&lt;xref:System.IO.Stream.Dispose%2A&gt;</ph> with <ph id=\"ph3\">`disposing`</ph> set to <ph id=\"ph4\">`false`</ph>.","pos":[302,410],"source":" <xref:System.Object.Finalize%2A> invokes <xref:System.IO.Stream.Dispose%2A> with `disposing` set to `false`."}]}],"pos":[59400,60310],"yaml":true,"extradata":"MT"},{"content":"`true` to release both managed and unmanaged resources; `false` to release only unmanaged resources.","nodes":[{"pos":[0,100],"content":"<ph id=\"ph1\">`true`</ph> to release both managed and unmanaged resources; <ph id=\"ph2\">`false`</ph> to release only unmanaged resources.","source":"`true` to release both managed and unmanaged resources; `false` to release only unmanaged resources."}],"pos":[60464,60567],"yaml":true},{"content":"Waits for the pending asynchronous read to complete. (Consider using <xref href=\"System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32)\"></xref> instead.)","nodes":[{"pos":[0,167],"content":"Waits for the pending asynchronous read to complete. (Consider using <xref href=\"System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32)\"></xref> instead.)","nodes":[{"content":"Waits for the pending asynchronous read to complete.","pos":[0,52]},{"content":"(Consider using <ph id=\"ph1\">&lt;xref href=\"System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32)\"&gt;&lt;/xref&gt;</ph> instead.)","pos":[53,167],"source":" (Consider using <xref href=\"System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32)\"></xref> instead.)"}]}],"pos":[62099,62267],"yaml":true},{"content":"In the .NET Framework 4 and earlier versions, you have to use methods such as <xref:System.IO.Stream.BeginRead%2A> and <xref:System.IO.Stream.EndRead%2A> to implement asynchronous I/O operations. These methods are still available in the [!INCLUDE[net_v45](~/includes/net-v45-md.md)] to support legacy code; however, the new async methods, such as <xref:System.IO.Stream.ReadAsync%2A>, <xref:System.IO.Stream.WriteAsync%2A>, <xref:System.IO.Stream.CopyToAsync%2A>, and <xref:System.IO.Stream.FlushAsync%2A>, help you implement asynchronous I/O operations more easily.  \n  \n Call `EndRead` to determine how many bytes were read from the stream.  \n  \n `EndRead` can be called once on every <xref:System.IAsyncResult> from <xref:System.IO.Stream.BeginRead%2A>.  \n  \n This method blocks until the I/O operation has completed.","nodes":[{"pos":[0,566],"content":"In the .NET Framework 4 and earlier versions, you have to use methods such as <xref:System.IO.Stream.BeginRead%2A> and <xref:System.IO.Stream.EndRead%2A> to implement asynchronous I/O operations. These methods are still available in the [!INCLUDE[net_v45](~/includes/net-v45-md.md)] to support legacy code; however, the new async methods, such as <xref:System.IO.Stream.ReadAsync%2A>, <xref:System.IO.Stream.WriteAsync%2A>, <xref:System.IO.Stream.CopyToAsync%2A>, and <xref:System.IO.Stream.FlushAsync%2A>, help you implement asynchronous I/O operations more easily.","nodes":[{"content":"In the .NET Framework 4 and earlier versions, you have to use methods such as <ph id=\"ph1\">&lt;xref:System.IO.Stream.BeginRead%2A&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.IO.Stream.EndRead%2A&gt;</ph> to implement asynchronous I/O operations.","pos":[0,195],"source":"In the .NET Framework 4 and earlier versions, you have to use methods such as <xref:System.IO.Stream.BeginRead%2A> and <xref:System.IO.Stream.EndRead%2A> to implement asynchronous I/O operations."},{"content":"These methods are still available in the <ph id=\"ph1\">[!INCLUDE[net_v45](~/includes/net-v45-md.md)]</ph> to support legacy code; however, the new async methods, such as <ph id=\"ph2\">&lt;xref:System.IO.Stream.ReadAsync%2A&gt;</ph>, <ph id=\"ph3\">&lt;xref:System.IO.Stream.WriteAsync%2A&gt;</ph>, <ph id=\"ph4\">&lt;xref:System.IO.Stream.CopyToAsync%2A&gt;</ph>, and <ph id=\"ph5\">&lt;xref:System.IO.Stream.FlushAsync%2A&gt;</ph>, help you implement asynchronous I/O operations more easily.","pos":[196,566],"source":" These methods are still available in the [!INCLUDE[net_v45](~/includes/net-v45-md.md)] to support legacy code; however, the new async methods, such as <xref:System.IO.Stream.ReadAsync%2A>, <xref:System.IO.Stream.WriteAsync%2A>, <xref:System.IO.Stream.CopyToAsync%2A>, and <xref:System.IO.Stream.FlushAsync%2A>, help you implement asynchronous I/O operations more easily."}]},{"pos":[573,642],"content":"Call <ph id=\"ph1\">`EndRead`</ph> to determine how many bytes were read from the stream.","source":"Call `EndRead` to determine how many bytes were read from the stream."},{"pos":[649,756],"content":"<ph id=\"ph1\">`EndRead`</ph> can be called once on every <ph id=\"ph2\">&lt;xref:System.IAsyncResult&gt;</ph> from <ph id=\"ph3\">&lt;xref:System.IO.Stream.BeginRead%2A&gt;</ph>.","source":"`EndRead` can be called once on every <xref:System.IAsyncResult> from <xref:System.IO.Stream.BeginRead%2A>."},{"pos":[763,820],"content":"This method blocks until the I/O operation has completed.","nodes":[{"content":"This method blocks until the I/O operation has completed.","pos":[0,57]}]}],"pos":[62278,63107],"yaml":true,"extradata":"MT"},{"content":"The reference to the pending asynchronous request to finish.","nodes":[{"pos":[0,60],"content":"The reference to the pending asynchronous request to finish.","nodes":[{"content":"The reference to the pending asynchronous request to finish.","pos":[0,60]}]}],"pos":[63274,63335],"yaml":true},{"content":"The number of bytes read from the stream, between zero (0) and the number of bytes you requested. Streams return zero (0) only at the end of the stream, otherwise, they should block until at least one byte is available.","nodes":[{"pos":[0,219],"content":"The number of bytes read from the stream, between zero (0) and the number of bytes you requested. Streams return zero (0) only at the end of the stream, otherwise, they should block until at least one byte is available.","nodes":[{"content":"The number of bytes read from the stream, between zero (0) and the number of bytes you requested. Streams return zero (0) only at the end of the stream, otherwise, they should block until at least one byte is available.","pos":[0,219],"nodes":[{"content":"The number of bytes read from the stream, between zero (0) and the number of bytes you requested.","pos":[0,97]},{"content":"Streams return zero (0) only at the end of the stream, otherwise, they should block until at least one byte is available.","pos":[98,219]}]}]}],"pos":[63391,63611],"yaml":true},{"content":"<code>asyncResult</code> is `null`.","nodes":[{"pos":[0,35],"content":"<ph id=\"ph1\">&lt;code&gt;asyncResult&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>asyncResult</code> is `null`."}],"pos":[63765,63801],"yaml":true},{"content":"A handle to the pending read operation is not available.  \n  \n -or-  \n  \n The pending operation does not support reading.","nodes":[{"pos":[0,56],"content":"A handle to the pending read operation is not available.","nodes":[{"content":"A handle to the pending read operation is not available.","pos":[0,56]}]},{"pos":[63,67],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[74,121],"content":"The pending operation does not support reading.","nodes":[{"content":"The pending operation does not support reading.","pos":[0,47]}]}],"pos":[63895,64023],"yaml":true},{"content":"<code>asyncResult</code> did not originate from a <xref href=\"System.IO.Stream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)\"></xref> method on the current stream.","nodes":[{"pos":[0,203],"content":"<ph id=\"ph1\">&lt;code&gt;asyncResult&lt;/code&gt;</ph> did not originate from a <ph id=\"ph2\">&lt;xref href=\"System.IO.Stream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)\"&gt;&lt;/xref&gt;</ph> method on the current stream.","source":"<code>asyncResult</code> did not originate from a <xref href=\"System.IO.Stream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)\"></xref> method on the current stream."}],"pos":[64133,64337],"yaml":true},{"content":"The stream is closed or an internal error has occurred.","nodes":[{"pos":[0,55],"content":"The stream is closed or an internal error has occurred.","nodes":[{"content":"The stream is closed or an internal error has occurred.","pos":[0,55]}]}],"pos":[64425,64481],"yaml":true},{"content":"Ends an asynchronous write operation. (Consider using <xref href=\"System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32)\"></xref> instead.)","nodes":[{"pos":[0,153],"content":"Ends an asynchronous write operation. (Consider using <xref href=\"System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32)\"></xref> instead.)","nodes":[{"content":"Ends an asynchronous write operation.","pos":[0,37]},{"content":"(Consider using <ph id=\"ph1\">&lt;xref href=\"System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32)\"&gt;&lt;/xref&gt;</ph> instead.)","pos":[38,153],"source":" (Consider using <xref href=\"System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32)\"></xref> instead.)"}]}],"pos":[65620,65774],"yaml":true},{"content":"In the .NET Framework 4 and earlier versions, you have to use methods such as <xref:System.IO.Stream.BeginWrite%2A> and <xref:System.IO.Stream.EndWrite%2A> to implement asynchronous I/O operations. These methods are still available in the [!INCLUDE[net_v45](~/includes/net-v45-md.md)] to support legacy code; however, the new async methods, such as <xref:System.IO.Stream.ReadAsync%2A>, <xref:System.IO.Stream.WriteAsync%2A>, <xref:System.IO.Stream.CopyToAsync%2A>, and <xref:System.IO.Stream.FlushAsync%2A>, help you implement asynchronous I/O operations more easily.  \n  \n `EndWrite` must be called exactly once on every <xref:System.IAsyncResult> from <xref:System.IO.Stream.BeginWrite%2A>.  \n  \n This method blocks until the I/O operation has completed. Errors that occur during an asynchronous write request, such as a disk failure during the I/O request, occur on the thread pool thread and become visible upon a call to `EndWrite`. Exceptions thrown by the thread pool thread will not be visible when calling `EndWrite`.","nodes":[{"pos":[0,568],"content":"In the .NET Framework 4 and earlier versions, you have to use methods such as <xref:System.IO.Stream.BeginWrite%2A> and <xref:System.IO.Stream.EndWrite%2A> to implement asynchronous I/O operations. These methods are still available in the [!INCLUDE[net_v45](~/includes/net-v45-md.md)] to support legacy code; however, the new async methods, such as <xref:System.IO.Stream.ReadAsync%2A>, <xref:System.IO.Stream.WriteAsync%2A>, <xref:System.IO.Stream.CopyToAsync%2A>, and <xref:System.IO.Stream.FlushAsync%2A>, help you implement asynchronous I/O operations more easily.","nodes":[{"content":"In the .NET Framework 4 and earlier versions, you have to use methods such as <ph id=\"ph1\">&lt;xref:System.IO.Stream.BeginWrite%2A&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.IO.Stream.EndWrite%2A&gt;</ph> to implement asynchronous I/O operations.","pos":[0,197],"source":"In the .NET Framework 4 and earlier versions, you have to use methods such as <xref:System.IO.Stream.BeginWrite%2A> and <xref:System.IO.Stream.EndWrite%2A> to implement asynchronous I/O operations."},{"content":"These methods are still available in the <ph id=\"ph1\">[!INCLUDE[net_v45](~/includes/net-v45-md.md)]</ph> to support legacy code; however, the new async methods, such as <ph id=\"ph2\">&lt;xref:System.IO.Stream.ReadAsync%2A&gt;</ph>, <ph id=\"ph3\">&lt;xref:System.IO.Stream.WriteAsync%2A&gt;</ph>, <ph id=\"ph4\">&lt;xref:System.IO.Stream.CopyToAsync%2A&gt;</ph>, and <ph id=\"ph5\">&lt;xref:System.IO.Stream.FlushAsync%2A&gt;</ph>, help you implement asynchronous I/O operations more easily.","pos":[198,568],"source":" These methods are still available in the [!INCLUDE[net_v45](~/includes/net-v45-md.md)] to support legacy code; however, the new async methods, such as <xref:System.IO.Stream.ReadAsync%2A>, <xref:System.IO.Stream.WriteAsync%2A>, <xref:System.IO.Stream.CopyToAsync%2A>, and <xref:System.IO.Stream.FlushAsync%2A>, help you implement asynchronous I/O operations more easily."}]},{"pos":[575,693],"content":"<ph id=\"ph1\">`EndWrite`</ph> must be called exactly once on every <ph id=\"ph2\">&lt;xref:System.IAsyncResult&gt;</ph> from <ph id=\"ph3\">&lt;xref:System.IO.Stream.BeginWrite%2A&gt;</ph>.","source":"`EndWrite` must be called exactly once on every <xref:System.IAsyncResult> from <xref:System.IO.Stream.BeginWrite%2A>."},{"pos":[700,1027],"content":"This method blocks until the I/O operation has completed. Errors that occur during an asynchronous write request, such as a disk failure during the I/O request, occur on the thread pool thread and become visible upon a call to `EndWrite`. Exceptions thrown by the thread pool thread will not be visible when calling `EndWrite`.","nodes":[{"content":"This method blocks until the I/O operation has completed.","pos":[0,57]},{"content":"Errors that occur during an asynchronous write request, such as a disk failure during the I/O request, occur on the thread pool thread and become visible upon a call to <ph id=\"ph1\">`EndWrite`</ph>.","pos":[58,238],"source":" Errors that occur during an asynchronous write request, such as a disk failure during the I/O request, occur on the thread pool thread and become visible upon a call to `EndWrite`."},{"content":"Exceptions thrown by the thread pool thread will not be visible when calling <ph id=\"ph1\">`EndWrite`</ph>.","pos":[239,327],"source":" Exceptions thrown by the thread pool thread will not be visible when calling `EndWrite`."}]}],"pos":[65785,66819],"yaml":true,"extradata":"MT"},{"content":"A reference to the outstanding asynchronous I/O request.","nodes":[{"pos":[0,56],"content":"A reference to the outstanding asynchronous I/O request.","nodes":[{"content":"A reference to the outstanding asynchronous I/O request.","pos":[0,56]}]}],"pos":[66988,67045],"yaml":true},{"content":"<code>asyncResult</code> is `null`.","nodes":[{"pos":[0,35],"content":"<ph id=\"ph1\">&lt;code&gt;asyncResult&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>asyncResult</code> is `null`."}],"pos":[67200,67236],"yaml":true},{"content":"A handle to the pending write operation is not available.  \n  \n -or-  \n  \n The pending operation does not support writing.","nodes":[{"pos":[0,57],"content":"A handle to the pending write operation is not available.","nodes":[{"content":"A handle to the pending write operation is not available.","pos":[0,57]}]},{"pos":[64,68],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[75,122],"content":"The pending operation does not support writing.","nodes":[{"content":"The pending operation does not support writing.","pos":[0,47]}]}],"pos":[67330,67459],"yaml":true},{"content":"<code>asyncResult</code> did not originate from a <xref href=\"System.IO.Stream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)\"></xref> method on the current stream.","nodes":[{"pos":[0,204],"content":"<ph id=\"ph1\">&lt;code&gt;asyncResult&lt;/code&gt;</ph> did not originate from a <ph id=\"ph2\">&lt;xref href=\"System.IO.Stream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)\"&gt;&lt;/xref&gt;</ph> method on the current stream.","source":"<code>asyncResult</code> did not originate from a <xref href=\"System.IO.Stream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)\"></xref> method on the current stream."}],"pos":[67569,67774],"yaml":true},{"content":"The stream is closed or an internal error has occurred.","nodes":[{"pos":[0,55],"content":"The stream is closed or an internal error has occurred.","nodes":[{"content":"The stream is closed or an internal error has occurred.","pos":[0,55]}]}],"pos":[67862,67918],"yaml":true},{"content":"When overridden in a derived class, clears all buffers for this stream and causes any buffered data to be written to the underlying device.","nodes":[{"pos":[0,139],"content":"When overridden in a derived class, clears all buffers for this stream and causes any buffered data to be written to the underlying device.","nodes":[{"content":"When overridden in a derived class, clears all buffers for this stream and causes any buffered data to be written to the underlying device.","pos":[0,139]}]}],"pos":[68954,69094],"yaml":true},{"content":"Override `Flush` on streams that implement a buffer. Use this method to move any information from an underlying buffer to its destination, clear the buffer, or both. Depending upon the state of the object, you might have to modify the current position within the stream (for example, if the underlying stream supports seeking). For additional information see <xref:System.IO.Stream.CanSeek%2A>.  \n  \n In a class derived from <xref:System.IO.Stream> that doesn't support writing, <xref:System.IO.Stream.Flush%2A> is typically implemented as an empty method to ensure full compatibility with other <xref:System.IO.Stream> types since it's valid to flush a read-only stream.  \n  \n When using the <xref:System.IO.StreamWriter> or <xref:System.IO.BinaryWriter> class, do not flush the base <xref:System.IO.Stream> object. Instead, use the class's <xref:System.IO.Stream.Flush%2A> or <xref:System.IO.Stream.Close%2A> method, which makes sure that the data is flushed to the underlying stream first and then written to the file.","nodes":[{"pos":[0,394],"content":"Override `Flush` on streams that implement a buffer. Use this method to move any information from an underlying buffer to its destination, clear the buffer, or both. Depending upon the state of the object, you might have to modify the current position within the stream (for example, if the underlying stream supports seeking). For additional information see <xref:System.IO.Stream.CanSeek%2A>.","nodes":[{"content":"Override <ph id=\"ph1\">`Flush`</ph> on streams that implement a buffer.","pos":[0,52],"source":"Override `Flush` on streams that implement a buffer."},{"content":"Use this method to move any information from an underlying buffer to its destination, clear the buffer, or both.","pos":[53,165]},{"content":"Depending upon the state of the object, you might have to modify the current position within the stream (for example, if the underlying stream supports seeking).","pos":[166,327]},{"content":"For additional information see <ph id=\"ph1\">&lt;xref:System.IO.Stream.CanSeek%2A&gt;</ph>.","pos":[328,394],"source":" For additional information see <xref:System.IO.Stream.CanSeek%2A>."}]},{"pos":[401,671],"content":"In a class derived from <xref:System.IO.Stream> that doesn't support writing, <xref:System.IO.Stream.Flush%2A> is typically implemented as an empty method to ensure full compatibility with other <xref:System.IO.Stream> types since it's valid to flush a read-only stream.","nodes":[{"content":"In a class derived from <ph id=\"ph1\">&lt;xref:System.IO.Stream&gt;</ph> that doesn't support writing, <ph id=\"ph2\">&lt;xref:System.IO.Stream.Flush%2A&gt;</ph> is typically implemented as an empty method to ensure full compatibility with other <ph id=\"ph3\">&lt;xref:System.IO.Stream&gt;</ph> types since it's valid to flush a read-only stream.","pos":[0,270],"source":"In a class derived from <xref:System.IO.Stream> that doesn't support writing, <xref:System.IO.Stream.Flush%2A> is typically implemented as an empty method to ensure full compatibility with other <xref:System.IO.Stream> types since it's valid to flush a read-only stream."}]},{"pos":[678,1021],"content":"When using the <xref:System.IO.StreamWriter> or <xref:System.IO.BinaryWriter> class, do not flush the base <xref:System.IO.Stream> object. Instead, use the class's <xref:System.IO.Stream.Flush%2A> or <xref:System.IO.Stream.Close%2A> method, which makes sure that the data is flushed to the underlying stream first and then written to the file.","nodes":[{"content":"When using the <xref:System.IO.StreamWriter> or <xref:System.IO.BinaryWriter> class, do not flush the base <xref:System.IO.Stream> object. Instead, use the class's <xref:System.IO.Stream.Flush%2A> or <xref:System.IO.Stream.Close%2A> method, which makes sure that the data is flushed to the underlying stream first and then written to the file.","pos":[0,343],"nodes":[{"content":"When using the <ph id=\"ph1\">&lt;xref:System.IO.StreamWriter&gt;</ph> or <ph id=\"ph2\">&lt;xref:System.IO.BinaryWriter&gt;</ph> class, do not flush the base <ph id=\"ph3\">&lt;xref:System.IO.Stream&gt;</ph> object.","pos":[0,138],"source":"When using the <xref:System.IO.StreamWriter> or <xref:System.IO.BinaryWriter> class, do not flush the base <xref:System.IO.Stream> object."},{"content":"Instead, use the class's <ph id=\"ph1\">&lt;xref:System.IO.Stream.Flush%2A&gt;</ph> or <ph id=\"ph2\">&lt;xref:System.IO.Stream.Close%2A&gt;</ph> method, which makes sure that the data is flushed to the underlying stream first and then written to the file.","pos":[139,343],"source":" Instead, use the class's <xref:System.IO.Stream.Flush%2A> or <xref:System.IO.Stream.Close%2A> method, which makes sure that the data is flushed to the underlying stream first and then written to the file."}]}]}],"pos":[69105,70133],"yaml":true,"extradata":"MT"},{"content":"An I/O error occurs.","nodes":[{"pos":[0,20],"content":"An I/O error occurs.","nodes":[{"content":"An I/O error occurs.","pos":[0,20]}]}],"pos":[70344,70365],"yaml":true},{"content":"Asynchronously clears all buffers for this stream and causes any buffered data to be written to the underlying device.","nodes":[{"pos":[0,118],"content":"Asynchronously clears all buffers for this stream and causes any buffered data to be written to the underlying device.","nodes":[{"content":"Asynchronously clears all buffers for this stream and causes any buffered data to be written to the underlying device.","pos":[0,118]}]}],"pos":[71775,71894],"yaml":true},{"content":"If a derived class, such as <xref:System.IO.Compression.DeflateStream> or <xref:System.IO.Compression.GZipStream>, does not flush the buffer in its implementation of the <xref:System.IO.Stream.Flush%2A> method, the <xref:System.IO.Stream.FlushAsync%2A> method will not flush the buffer.","nodes":[{"pos":[0,286],"content":"If a derived class, such as <xref:System.IO.Compression.DeflateStream> or <xref:System.IO.Compression.GZipStream>, does not flush the buffer in its implementation of the <xref:System.IO.Stream.Flush%2A> method, the <xref:System.IO.Stream.FlushAsync%2A> method will not flush the buffer.","nodes":[{"content":"If a derived class, such as <ph id=\"ph1\">&lt;xref:System.IO.Compression.DeflateStream&gt;</ph> or <ph id=\"ph2\">&lt;xref:System.IO.Compression.GZipStream&gt;</ph>, does not flush the buffer in its implementation of the <ph id=\"ph3\">&lt;xref:System.IO.Stream.Flush%2A&gt;</ph> method, the <ph id=\"ph4\">&lt;xref:System.IO.Stream.FlushAsync%2A&gt;</ph> method will not flush the buffer.","pos":[0,286],"source":"If a derived class, such as <xref:System.IO.Compression.DeflateStream> or <xref:System.IO.Compression.GZipStream>, does not flush the buffer in its implementation of the <xref:System.IO.Stream.Flush%2A> method, the <xref:System.IO.Stream.FlushAsync%2A> method will not flush the buffer."}]}],"pos":[71905,72192],"yaml":true,"extradata":"MT"},{"content":"A task that represents the asynchronous flush operation.","nodes":[{"pos":[0,56],"content":"A task that represents the asynchronous flush operation.","nodes":[{"content":"A task that represents the asynchronous flush operation.","pos":[0,56]}]}],"pos":[72422,72479],"yaml":true},{"content":"The stream has been disposed.","nodes":[{"pos":[0,29],"content":"The stream has been disposed.","nodes":[{"content":"The stream has been disposed.","pos":[0,29]}]}],"pos":[72640,72670],"yaml":true},{"content":"Asynchronously clears all buffers for this stream, causes any buffered data to be written to the underlying device, and monitors cancellation requests.","nodes":[{"pos":[0,151],"content":"Asynchronously clears all buffers for this stream, causes any buffered data to be written to the underlying device, and monitors cancellation requests.","nodes":[{"content":"Asynchronously clears all buffers for this stream, causes any buffered data to be written to the underlying device, and monitors cancellation requests.","pos":[0,151]}]}],"pos":[74314,74466],"yaml":true},{"content":"If the operation is canceled before it completes, the returned task contains the <xref:System.Threading.Tasks.TaskStatus.Canceled> value for the <xref:System.Threading.Tasks.Task.Status%2A> property.  \n  \n If a derived class, such as <xref:System.IO.Compression.DeflateStream> or <xref:System.IO.Compression.GZipStream>, does not flush the buffer in its implementation of the <xref:System.IO.Stream.Flush%2A> method, the <xref:System.IO.Stream.FlushAsync%2A> method will not flush the buffer.","nodes":[{"pos":[0,199],"content":"If the operation is canceled before it completes, the returned task contains the <xref:System.Threading.Tasks.TaskStatus.Canceled> value for the <xref:System.Threading.Tasks.Task.Status%2A> property.","nodes":[{"content":"If the operation is canceled before it completes, the returned task contains the <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.TaskStatus.Canceled&gt;</ph> value for the <ph id=\"ph2\">&lt;xref:System.Threading.Tasks.Task.Status%2A&gt;</ph> property.","pos":[0,199],"source":"If the operation is canceled before it completes, the returned task contains the <xref:System.Threading.Tasks.TaskStatus.Canceled> value for the <xref:System.Threading.Tasks.Task.Status%2A> property."}]},{"pos":[206,492],"content":"If a derived class, such as <xref:System.IO.Compression.DeflateStream> or <xref:System.IO.Compression.GZipStream>, does not flush the buffer in its implementation of the <xref:System.IO.Stream.Flush%2A> method, the <xref:System.IO.Stream.FlushAsync%2A> method will not flush the buffer.","nodes":[{"content":"If a derived class, such as <ph id=\"ph1\">&lt;xref:System.IO.Compression.DeflateStream&gt;</ph> or <ph id=\"ph2\">&lt;xref:System.IO.Compression.GZipStream&gt;</ph>, does not flush the buffer in its implementation of the <ph id=\"ph3\">&lt;xref:System.IO.Stream.Flush%2A&gt;</ph> method, the <ph id=\"ph4\">&lt;xref:System.IO.Stream.FlushAsync%2A&gt;</ph> method will not flush the buffer.","pos":[0,286],"source":"If a derived class, such as <xref:System.IO.Compression.DeflateStream> or <xref:System.IO.Compression.GZipStream>, does not flush the buffer in its implementation of the <xref:System.IO.Stream.Flush%2A> method, the <xref:System.IO.Stream.FlushAsync%2A> method will not flush the buffer."}]}],"pos":[74477,74974],"yaml":true,"extradata":"MT"},{"content":"The token to monitor for cancellation requests. The default value is <xref href=\"System.Threading.CancellationToken.None\"></xref>.","nodes":[{"pos":[0,130],"content":"The token to monitor for cancellation requests. The default value is <xref href=\"System.Threading.CancellationToken.None\"></xref>.","nodes":[{"content":"The token to monitor for cancellation requests.","pos":[0,47]},{"content":"The default value is <ph id=\"ph1\">&lt;xref href=\"System.Threading.CancellationToken.None\"&gt;&lt;/xref&gt;</ph>.","pos":[48,130],"source":" The default value is <xref href=\"System.Threading.CancellationToken.None\"></xref>."}]}],"pos":[75284,75415],"yaml":true},{"content":"A task that represents the asynchronous flush operation.","nodes":[{"pos":[0,56],"content":"A task that represents the asynchronous flush operation.","nodes":[{"content":"A task that represents the asynchronous flush operation.","pos":[0,56]}]}],"pos":[75486,75543],"yaml":true},{"content":"The stream has been disposed.","nodes":[{"pos":[0,29],"content":"The stream has been disposed.","nodes":[{"content":"The stream has been disposed.","pos":[0,29]}]}],"pos":[75704,75734],"yaml":true},{"content":"When overridden in a derived class, gets the length in bytes of the stream.","nodes":[{"pos":[0,75],"content":"When overridden in a derived class, gets the length in bytes of the stream.","nodes":[{"content":"When overridden in a derived class, gets the length in bytes of the stream.","pos":[0,75]}]}],"pos":[77191,77267],"yaml":true},{"content":"A long value representing the length of the stream in bytes.","nodes":[{"pos":[0,60],"content":"A long value representing the length of the stream in bytes.","nodes":[{"content":"A long value representing the length of the stream in bytes.","pos":[0,60]}]}],"pos":[77383,77444],"yaml":true},{"content":"A class derived from `Stream` does not support seeking.","nodes":[{"pos":[0,55],"content":"A class derived from <ph id=\"ph1\">`Stream`</ph> does not support seeking.","source":"A class derived from `Stream` does not support seeking."}],"pos":[77597,77653],"yaml":true},{"content":"Methods were called after the stream was closed.","nodes":[{"pos":[0,48],"content":"Methods were called after the stream was closed.","nodes":[{"content":"Methods were called after the stream was closed.","pos":[0,48]}]}],"pos":[77759,77808],"yaml":true},{"content":"A `Stream` with no backing store.","nodes":[{"pos":[0,33],"content":"A <ph id=\"ph1\">`Stream`</ph> with no backing store.","source":"A `Stream` with no backing store."}],"pos":[79179,79213],"yaml":true},{"content":"Use `Null` to redirect output to a stream that will not consume any operating system resources. When the methods of `Stream` that provide writing are invoked on `Null`, the call simply returns, and no data is written. `Null` also implements a `Read` method that returns zero without reading data.","nodes":[{"pos":[0,296],"content":"Use `Null` to redirect output to a stream that will not consume any operating system resources. When the methods of `Stream` that provide writing are invoked on `Null`, the call simply returns, and no data is written. `Null` also implements a `Read` method that returns zero without reading data.","nodes":[{"content":"Use <ph id=\"ph1\">`Null`</ph> to redirect output to a stream that will not consume any operating system resources.","pos":[0,95],"source":"Use `Null` to redirect output to a stream that will not consume any operating system resources."},{"content":"When the methods of <ph id=\"ph1\">`Stream`</ph> that provide writing are invoked on <ph id=\"ph2\">`Null`</ph>, the call simply returns, and no data is written.","pos":[96,217],"source":" When the methods of `Stream` that provide writing are invoked on `Null`, the call simply returns, and no data is written."},{"content":"<ph id=\"ph1\">`Null`</ph> also implements a <ph id=\"ph2\">`Read`</ph> method that returns zero without reading data.","pos":[218,296],"source":"`Null` also implements a `Read` method that returns zero without reading data."}]}],"pos":[79224,79521],"yaml":true,"extradata":"MT"},{"content":"Provides support for a <xref href=\"System.Diagnostics.Contracts.Contract\"></xref>.","nodes":[{"pos":[0,82],"content":"Provides support for a <ph id=\"ph1\">&lt;xref href=\"System.Diagnostics.Contracts.Contract\"&gt;&lt;/xref&gt;</ph>.","source":"Provides support for a <xref href=\"System.Diagnostics.Contracts.Contract\"></xref>."}],"pos":[81096,81179],"yaml":true},{"content":"When overridden in a derived class, gets or sets the position within the current stream.","nodes":[{"pos":[0,88],"content":"When overridden in a derived class, gets or sets the position within the current stream.","nodes":[{"content":"When overridden in a derived class, gets or sets the position within the current stream.","pos":[0,88]}]}],"pos":[82500,82589],"yaml":true},{"content":"The stream must support seeking to get or set the position. Use the <xref:System.IO.Stream.CanSeek%2A> property to determine whether the stream supports seeking.  \n  \n Seeking to any location beyond the length of the stream is supported.  \n  \n The `Position` property does not keep track of the number of bytes from the stream that have been consumed, skipped, or both.","nodes":[{"pos":[0,161],"content":"The stream must support seeking to get or set the position. Use the <xref:System.IO.Stream.CanSeek%2A> property to determine whether the stream supports seeking.","nodes":[{"content":"The stream must support seeking to get or set the position. Use the <xref:System.IO.Stream.CanSeek%2A> property to determine whether the stream supports seeking.","pos":[0,161],"nodes":[{"content":"The stream must support seeking to get or set the position.","pos":[0,59]},{"content":"Use the <ph id=\"ph1\">&lt;xref:System.IO.Stream.CanSeek%2A&gt;</ph> property to determine whether the stream supports seeking.","pos":[60,161],"source":" Use the <xref:System.IO.Stream.CanSeek%2A> property to determine whether the stream supports seeking."}]}]},{"pos":[168,237],"content":"Seeking to any location beyond the length of the stream is supported.","nodes":[{"content":"Seeking to any location beyond the length of the stream is supported.","pos":[0,69]}]},{"pos":[244,369],"content":"The <ph id=\"ph1\">`Position`</ph> property does not keep track of the number of bytes from the stream that have been consumed, skipped, or both.","source":"The `Position` property does not keep track of the number of bytes from the stream that have been consumed, skipped, or both."}],"pos":[82600,82976],"yaml":true,"extradata":"MT"},{"content":"The current position within the stream.","nodes":[{"pos":[0,39],"content":"The current position within the stream.","nodes":[{"content":"The current position within the stream.","pos":[0,39]}]}],"pos":[83099,83139],"yaml":true},{"content":"An I/O error occurs.","nodes":[{"pos":[0,20],"content":"An I/O error occurs.","nodes":[{"content":"An I/O error occurs.","pos":[0,20]}]}],"pos":[83280,83301],"yaml":true},{"content":"The stream does not support seeking.","nodes":[{"pos":[0,36],"content":"The stream does not support seeking.","nodes":[{"content":"The stream does not support seeking.","pos":[0,36]}]}],"pos":[83403,83440],"yaml":true},{"content":"Methods were called after the stream was closed.","nodes":[{"pos":[0,48],"content":"Methods were called after the stream was closed.","nodes":[{"content":"Methods were called after the stream was closed.","pos":[0,48]}]}],"pos":[83546,83595],"yaml":true},{"content":"When overridden in a derived class, reads a sequence of bytes from the current stream and advances the position within the stream by the number of bytes read.","nodes":[{"pos":[0,158],"content":"When overridden in a derived class, reads a sequence of bytes from the current stream and advances the position within the stream by the number of bytes read.","nodes":[{"content":"When overridden in a derived class, reads a sequence of bytes from the current stream and advances the position within the stream by the number of bytes read.","pos":[0,158]}]}],"pos":[85152,85311],"yaml":true},{"content":"Use the <xref:System.IO.Stream.CanRead%2A> property to determine whether the current instance supports reading. Use the <xref:System.IO.Stream.ReadAsync%2A> method to read asynchronously from the current stream.  \n  \n Implementations of this method read a maximum of `count` bytes from the current stream and store them in `buffer` beginning at `offset`. The current position within the stream is advanced by the number of bytes read; however, if an exception occurs, the current position within the stream remains unchanged. Implementations return the number of bytes read. The implementation will block until at least one byte of data can be read, in the event that no data is available. <xref:System.IO.Stream.Read%2A>returns 0 only when there is no more data in the stream and no more is expected (such as a closed socket or end of file). An implementation is free to return fewer bytes than requested even if the end of the stream has not been reached.  \n  \n Use <xref:System.IO.BinaryReader> for reading primitive data types.","nodes":[{"pos":[0,211],"content":"Use the <xref:System.IO.Stream.CanRead%2A> property to determine whether the current instance supports reading. Use the <xref:System.IO.Stream.ReadAsync%2A> method to read asynchronously from the current stream.","nodes":[{"content":"Use the <xref:System.IO.Stream.CanRead%2A> property to determine whether the current instance supports reading. Use the <xref:System.IO.Stream.ReadAsync%2A> method to read asynchronously from the current stream.","pos":[0,211],"nodes":[{"content":"Use the <ph id=\"ph1\">&lt;xref:System.IO.Stream.CanRead%2A&gt;</ph> property to determine whether the current instance supports reading.","pos":[0,111],"source":"Use the <xref:System.IO.Stream.CanRead%2A> property to determine whether the current instance supports reading."},{"content":"Use the <ph id=\"ph1\">&lt;xref:System.IO.Stream.ReadAsync%2A&gt;</ph> method to read asynchronously from the current stream.","pos":[112,211],"source":" Use the <xref:System.IO.Stream.ReadAsync%2A> method to read asynchronously from the current stream."}]}]},{"pos":[218,957],"content":"Implementations of this method read a maximum of `count` bytes from the current stream and store them in `buffer` beginning at `offset`. The current position within the stream is advanced by the number of bytes read; however, if an exception occurs, the current position within the stream remains unchanged. Implementations return the number of bytes read. The implementation will block until at least one byte of data can be read, in the event that no data is available. <xref:System.IO.Stream.Read%2A>returns 0 only when there is no more data in the stream and no more is expected (such as a closed socket or end of file). An implementation is free to return fewer bytes than requested even if the end of the stream has not been reached.","nodes":[{"content":"Implementations of this method read a maximum of <ph id=\"ph1\">`count`</ph> bytes from the current stream and store them in <ph id=\"ph2\">`buffer`</ph> beginning at <ph id=\"ph3\">`offset`</ph>.","pos":[0,136],"source":"Implementations of this method read a maximum of `count` bytes from the current stream and store them in `buffer` beginning at `offset`."},{"content":"The current position within the stream is advanced by the number of bytes read; however, if an exception occurs, the current position within the stream remains unchanged.","pos":[137,307]},{"content":"Implementations return the number of bytes read.","pos":[308,356]},{"content":"The implementation will block until at least one byte of data can be read, in the event that no data is available.","pos":[357,471]},{"content":"<ph id=\"ph1\">&lt;xref:System.IO.Stream.Read%2A&gt;</ph>returns 0 only when there is no more data in the stream and no more is expected (such as a closed socket or end of file).","pos":[472,624],"source":" <xref:System.IO.Stream.Read%2A>returns 0 only when there is no more data in the stream and no more is expected (such as a closed socket or end of file)."},{"content":"An implementation is free to return fewer bytes than requested even if the end of the stream has not been reached.","pos":[625,739]}]},{"pos":[964,1031],"content":"Use <xref:System.IO.BinaryReader> for reading primitive data types.","nodes":[{"content":"Use <ph id=\"ph1\">&lt;xref:System.IO.BinaryReader&gt;</ph> for reading primitive data types.","pos":[0,67],"source":"Use <xref:System.IO.BinaryReader> for reading primitive data types."}]}],"pos":[85322,86360],"yaml":true,"extradata":"MT"},{"content":"An array of bytes. When this method returns, the buffer contains the specified byte array with the values between <code>offset</code> and (<code>offset</code> + <code>count</code> - 1) replaced by the bytes read from the current source.","nodes":[{"pos":[0,236],"content":"An array of bytes. When this method returns, the buffer contains the specified byte array with the values between <code>offset</code> and (<code>offset</code> + <code>count</code> - 1) replaced by the bytes read from the current source.","nodes":[{"content":"An array of bytes.","pos":[0,18]},{"content":"When this method returns, the buffer contains the specified byte array with the values between <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">offset</ph><ept id=\"p1\">&lt;/code&gt;</ept> and (<bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">offset</ph><ept id=\"p2\">&lt;/code&gt;</ept><ph id=\"ph3\"> + </ph><bpt id=\"p3\">&lt;code&gt;</bpt><ph id=\"ph4\">count</ph><ept id=\"p3\">&lt;/code&gt;</ept> - 1) replaced by the bytes read from the current source.","pos":[19,236],"source":" When this method returns, the buffer contains the specified byte array with the values between <code>offset</code> and (<code>offset</code> + <code>count</code> - 1) replaced by the bytes read from the current source."}]}],"pos":[87068,87305],"yaml":true},{"content":"The zero-based byte offset in <code>buffer</code> at which to begin storing the data read from the current stream.","nodes":[{"pos":[0,114],"content":"The zero-based byte offset in <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">buffer</ph><ept id=\"p1\">&lt;/code&gt;</ept> at which to begin storing the data read from the current stream.","source":"The zero-based byte offset in <code>buffer</code> at which to begin storing the data read from the current stream."}],"pos":[87366,87481],"yaml":true},{"content":"The maximum number of bytes to be read from the current stream.","nodes":[{"pos":[0,63],"content":"The maximum number of bytes to be read from the current stream.","nodes":[{"content":"The maximum number of bytes to be read from the current stream.","pos":[0,63]}]}],"pos":[87541,87605],"yaml":true},{"content":"The total number of bytes read into the buffer. This can be less than the number of bytes requested if that many bytes are not currently available, or zero (0) if the end of the stream has been reached.","nodes":[{"pos":[0,202],"content":"The total number of bytes read into the buffer. This can be less than the number of bytes requested if that many bytes are not currently available, or zero (0) if the end of the stream has been reached.","nodes":[{"content":"The total number of bytes read into the buffer. This can be less than the number of bytes requested if that many bytes are not currently available, or zero (0) if the end of the stream has been reached.","pos":[0,202],"nodes":[{"content":"The total number of bytes read into the buffer.","pos":[0,47]},{"content":"This can be less than the number of bytes requested if that many bytes are not currently available, or zero (0) if the end of the stream has been reached.","pos":[48,202]}]}]}],"pos":[87661,87864],"yaml":true},{"content":"The sum of <code>offset</code> and <code>count</code> is larger than the buffer length.","nodes":[{"pos":[0,87],"content":"The sum of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">offset</ph><ept id=\"p1\">&lt;/code&gt;</ept> and <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">count</ph><ept id=\"p2\">&lt;/code&gt;</ept> is larger than the buffer length.","source":"The sum of <code>offset</code> and <code>count</code> is larger than the buffer length."}],"pos":[88007,88095],"yaml":true},{"content":"<code>buffer</code> is `null`.","nodes":[{"pos":[0,30],"content":"<ph id=\"ph1\">&lt;code&gt;buffer&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>buffer</code> is `null`."}],"pos":[88197,88228],"yaml":true},{"content":"<code>offset</code> or <code>count</code> is negative.","nodes":[{"pos":[0,54],"content":"<ph id=\"ph1\">&lt;code&gt;offset&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;count&lt;/code&gt;</ph> is negative.","source":"<code>offset</code> or <code>count</code> is negative."}],"pos":[88342,88397],"yaml":true},{"content":"An I/O error occurs.","nodes":[{"pos":[0,20],"content":"An I/O error occurs.","nodes":[{"content":"An I/O error occurs.","pos":[0,20]}]}],"pos":[88485,88506],"yaml":true},{"content":"The stream does not support reading.","nodes":[{"pos":[0,36],"content":"The stream does not support reading.","nodes":[{"content":"The stream does not support reading.","pos":[0,36]}]}],"pos":[88608,88645],"yaml":true},{"content":"Methods were called after the stream was closed.","nodes":[{"pos":[0,48],"content":"Methods were called after the stream was closed.","nodes":[{"content":"Methods were called after the stream was closed.","pos":[0,48]}]}],"pos":[88751,88800],"yaml":true},{"content":"Asynchronously reads a sequence of bytes from the current stream and advances the position within the stream by the number of bytes read.","nodes":[{"pos":[0,137],"content":"Asynchronously reads a sequence of bytes from the current stream and advances the position within the stream by the number of bytes read.","nodes":[{"content":"Asynchronously reads a sequence of bytes from the current stream and advances the position within the stream by the number of bytes read.","pos":[0,137]}]}],"pos":[90387,90525],"yaml":true},{"content":"The <xref:System.IO.Stream.ReadAsync%2A> method enables you to perform resource-intensive I/O operations without blocking the main thread. This performance consideration is particularly important in a [!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)] app or [!INCLUDE[desktop_appname](~/includes/desktop-appname-md.md)] app where a time-consuming stream operation can block the UI thread and make your app appear as if it is not working. The async methods are used in conjunction with the `async` and `await` keywords in Visual Basic and C#.  \n  \n Use the <xref:System.IO.Stream.CanRead%2A> property to determine whether the current instance supports reading.","nodes":[{"pos":[0,557],"content":"The <xref:System.IO.Stream.ReadAsync%2A> method enables you to perform resource-intensive I/O operations without blocking the main thread. This performance consideration is particularly important in a [!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)] app or [!INCLUDE[desktop_appname](~/includes/desktop-appname-md.md)] app where a time-consuming stream operation can block the UI thread and make your app appear as if it is not working. The async methods are used in conjunction with the `async` and `await` keywords in Visual Basic and C#.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.IO.Stream.ReadAsync%2A&gt;</ph> method enables you to perform resource-intensive I/O operations without blocking the main thread.","pos":[0,138],"source":"The <xref:System.IO.Stream.ReadAsync%2A> method enables you to perform resource-intensive I/O operations without blocking the main thread."},{"content":"This performance consideration is particularly important in a <ph id=\"ph1\">[!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)]</ph> app or <ph id=\"ph2\">[!INCLUDE[desktop_appname](~/includes/desktop-appname-md.md)]</ph> app where a time-consuming stream operation can block the UI thread and make your app appear as if it is not working.","pos":[139,453],"source":" This performance consideration is particularly important in a [!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)] app or [!INCLUDE[desktop_appname](~/includes/desktop-appname-md.md)] app where a time-consuming stream operation can block the UI thread and make your app appear as if it is not working."},{"content":"The async methods are used in conjunction with the <ph id=\"ph1\">`async`</ph> and <ph id=\"ph2\">`await`</ph> keywords in Visual Basic and C#.","pos":[454,557],"source":" The async methods are used in conjunction with the `async` and `await` keywords in Visual Basic and C#."}]},{"pos":[564,675],"content":"Use the <xref:System.IO.Stream.CanRead%2A> property to determine whether the current instance supports reading.","nodes":[{"content":"Use the <ph id=\"ph1\">&lt;xref:System.IO.Stream.CanRead%2A&gt;</ph> property to determine whether the current instance supports reading.","pos":[0,111],"source":"Use the <xref:System.IO.Stream.CanRead%2A> property to determine whether the current instance supports reading."}]}],"pos":[90536,91216],"yaml":true,"extradata":"MT"},{"content":"The buffer to write the data into.","nodes":[{"pos":[0,34],"content":"The buffer to write the data into.","nodes":[{"content":"The buffer to write the data into.","pos":[0,34]}]}],"pos":[91944,91979],"yaml":true},{"content":"The byte offset in <code>buffer</code> at which to begin writing data from the stream.","nodes":[{"pos":[0,86],"content":"The byte offset in <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">buffer</ph><ept id=\"p1\">&lt;/code&gt;</ept> at which to begin writing data from the stream.","source":"The byte offset in <code>buffer</code> at which to begin writing data from the stream."}],"pos":[92040,92127],"yaml":true},{"content":"The maximum number of bytes to read.","nodes":[{"pos":[0,36],"content":"The maximum number of bytes to read.","nodes":[{"content":"The maximum number of bytes to read.","pos":[0,36]}]}],"pos":[92187,92224],"yaml":true},{"content":"A task that represents the asynchronous read operation. The value of the <code>TResult</code> parameter contains the total number of bytes read into the buffer. The result value can be less than the number of bytes requested if the number of bytes currently available is less than the requested number, or it can be 0 (zero) if the end of the stream has been reached.","nodes":[{"pos":[0,367],"content":"A task that represents the asynchronous read operation. The value of the <code>TResult</code> parameter contains the total number of bytes read into the buffer. The result value can be less than the number of bytes requested if the number of bytes currently available is less than the requested number, or it can be 0 (zero) if the end of the stream has been reached.","nodes":[{"content":"A task that represents the asynchronous read operation.","pos":[0,55]},{"content":"The value of the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">TResult</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter contains the total number of bytes read into the buffer.","pos":[56,160],"source":" The value of the <code>TResult</code> parameter contains the total number of bytes read into the buffer."},{"content":"The result value can be less than the number of bytes requested if the number of bytes currently available is less than the requested number, or it can be 0 (zero) if the end of the stream has been reached.","pos":[161,367]}]}],"pos":[92309,92677],"yaml":true},{"content":"<code>buffer</code> is `null`.","nodes":[{"pos":[0,30],"content":"<ph id=\"ph1\">&lt;code&gt;buffer&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>buffer</code> is `null`."}],"pos":[92833,92864],"yaml":true},{"content":"<code>offset</code> or <code>count</code> is negative.","nodes":[{"pos":[0,54],"content":"<ph id=\"ph1\">&lt;code&gt;offset&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;count&lt;/code&gt;</ph> is negative.","source":"<code>offset</code> or <code>count</code> is negative."}],"pos":[92978,93033],"yaml":true},{"content":"The sum of <code>offset</code> and <code>count</code> is larger than the buffer length.","nodes":[{"pos":[0,87],"content":"The sum of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">offset</ph><ept id=\"p1\">&lt;/code&gt;</ept> and <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">count</ph><ept id=\"p2\">&lt;/code&gt;</ept> is larger than the buffer length.","source":"The sum of <code>offset</code> and <code>count</code> is larger than the buffer length."}],"pos":[93127,93215],"yaml":true},{"content":"The stream does not support reading.","nodes":[{"pos":[0,36],"content":"The stream does not support reading.","nodes":[{"content":"The stream does not support reading.","pos":[0,36]}]}],"pos":[93317,93354],"yaml":true},{"content":"The stream has been disposed.","nodes":[{"pos":[0,29],"content":"The stream has been disposed.","nodes":[{"content":"The stream has been disposed.","pos":[0,29]}]}],"pos":[93460,93490],"yaml":true},{"content":"The stream is currently in use by a previous read operation.","nodes":[{"pos":[0,60],"content":"The stream is currently in use by a previous read operation.","nodes":[{"content":"The stream is currently in use by a previous read operation.","pos":[0,60]}]}],"pos":[93600,93661],"yaml":true},{"content":"Asynchronously reads a sequence of bytes from the current stream, advances the position within the stream by the number of bytes read, and monitors cancellation requests.","nodes":[{"pos":[0,170],"content":"Asynchronously reads a sequence of bytes from the current stream, advances the position within the stream by the number of bytes read, and monitors cancellation requests.","nodes":[{"content":"Asynchronously reads a sequence of bytes from the current stream, advances the position within the stream by the number of bytes read, and monitors cancellation requests.","pos":[0,170]}]}],"pos":[95485,95656],"yaml":true},{"content":"The <xref:System.IO.Stream.ReadAsync%2A> method enables you to perform resource-intensive I/O operations without blocking the main thread. This performance consideration is particularly important in a [!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)] app or [!INCLUDE[desktop_appname](~/includes/desktop-appname-md.md)] app where a time-consuming stream operation can block the UI thread and make your app appear as if it is not working. The async methods are used in conjunction with the `async` and `await` keywords in Visual Basic and C#.  \n  \n Use the <xref:System.IO.Stream.CanRead%2A> property to determine whether the current instance supports reading.  \n  \n If the operation is canceled before it completes, the returned task contains the <xref:System.Threading.Tasks.TaskStatus.Canceled> value for the <xref:System.Threading.Tasks.Task.Status%2A> property.  \n  \n For an example, see the <xref:System.IO.Stream.ReadAsync%28System.Byte%5B%5D%2CSystem.Int32%2CSystem.Int32%29> overload.","nodes":[{"pos":[0,557],"content":"The <xref:System.IO.Stream.ReadAsync%2A> method enables you to perform resource-intensive I/O operations without blocking the main thread. This performance consideration is particularly important in a [!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)] app or [!INCLUDE[desktop_appname](~/includes/desktop-appname-md.md)] app where a time-consuming stream operation can block the UI thread and make your app appear as if it is not working. The async methods are used in conjunction with the `async` and `await` keywords in Visual Basic and C#.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.IO.Stream.ReadAsync%2A&gt;</ph> method enables you to perform resource-intensive I/O operations without blocking the main thread.","pos":[0,138],"source":"The <xref:System.IO.Stream.ReadAsync%2A> method enables you to perform resource-intensive I/O operations without blocking the main thread."},{"content":"This performance consideration is particularly important in a <ph id=\"ph1\">[!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)]</ph> app or <ph id=\"ph2\">[!INCLUDE[desktop_appname](~/includes/desktop-appname-md.md)]</ph> app where a time-consuming stream operation can block the UI thread and make your app appear as if it is not working.","pos":[139,453],"source":" This performance consideration is particularly important in a [!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)] app or [!INCLUDE[desktop_appname](~/includes/desktop-appname-md.md)] app where a time-consuming stream operation can block the UI thread and make your app appear as if it is not working."},{"content":"The async methods are used in conjunction with the <ph id=\"ph1\">`async`</ph> and <ph id=\"ph2\">`await`</ph> keywords in Visual Basic and C#.","pos":[454,557],"source":" The async methods are used in conjunction with the `async` and `await` keywords in Visual Basic and C#."}]},{"pos":[564,675],"content":"Use the <xref:System.IO.Stream.CanRead%2A> property to determine whether the current instance supports reading.","nodes":[{"content":"Use the <ph id=\"ph1\">&lt;xref:System.IO.Stream.CanRead%2A&gt;</ph> property to determine whether the current instance supports reading.","pos":[0,111],"source":"Use the <xref:System.IO.Stream.CanRead%2A> property to determine whether the current instance supports reading."}]},{"pos":[682,881],"content":"If the operation is canceled before it completes, the returned task contains the <xref:System.Threading.Tasks.TaskStatus.Canceled> value for the <xref:System.Threading.Tasks.Task.Status%2A> property.","nodes":[{"content":"If the operation is canceled before it completes, the returned task contains the <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.TaskStatus.Canceled&gt;</ph> value for the <ph id=\"ph2\">&lt;xref:System.Threading.Tasks.Task.Status%2A&gt;</ph> property.","pos":[0,199],"source":"If the operation is canceled before it completes, the returned task contains the <xref:System.Threading.Tasks.TaskStatus.Canceled> value for the <xref:System.Threading.Tasks.Task.Status%2A> property."}]},{"pos":[888,1008],"content":"For an example, see the <xref:System.IO.Stream.ReadAsync%28System.Byte%5B%5D%2CSystem.Int32%2CSystem.Int32%29> overload.","nodes":[{"content":"For an example, see the <ph id=\"ph1\">&lt;xref:System.IO.Stream.ReadAsync%28System.Byte%5B%5D%2CSystem.Int32%2CSystem.Int32%29&gt;</ph> overload.","pos":[0,120],"source":"For an example, see the <xref:System.IO.Stream.ReadAsync%28System.Byte%5B%5D%2CSystem.Int32%2CSystem.Int32%29> overload."}]}],"pos":[95667,96684],"yaml":true,"extradata":"MT"},{"content":"The buffer to write the data into.","nodes":[{"pos":[0,34],"content":"The buffer to write the data into.","nodes":[{"content":"The buffer to write the data into.","pos":[0,34]}]}],"pos":[97004,97039],"yaml":true},{"content":"The byte offset in <code>buffer</code> at which to begin writing data from the stream.","nodes":[{"pos":[0,86],"content":"The byte offset in <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">buffer</ph><ept id=\"p1\">&lt;/code&gt;</ept> at which to begin writing data from the stream.","source":"The byte offset in <code>buffer</code> at which to begin writing data from the stream."}],"pos":[97100,97187],"yaml":true},{"content":"The maximum number of bytes to read.","nodes":[{"pos":[0,36],"content":"The maximum number of bytes to read.","nodes":[{"content":"The maximum number of bytes to read.","pos":[0,36]}]}],"pos":[97247,97284],"yaml":true},{"content":"The token to monitor for cancellation requests. The default value is <xref href=\"System.Threading.CancellationToken.None\"></xref>.","nodes":[{"pos":[0,130],"content":"The token to monitor for cancellation requests. The default value is <xref href=\"System.Threading.CancellationToken.None\"></xref>.","nodes":[{"content":"The token to monitor for cancellation requests.","pos":[0,47]},{"content":"The default value is <ph id=\"ph1\">&lt;xref href=\"System.Threading.CancellationToken.None\"&gt;&lt;/xref&gt;</ph>.","pos":[48,130],"source":" The default value is <xref href=\"System.Threading.CancellationToken.None\"></xref>."}]}],"pos":[97378,97509],"yaml":true},{"content":"A task that represents the asynchronous read operation. The value of the <code>TResult</code> parameter contains the total number of bytes read into the buffer. The result value can be less than the number of bytes requested if the number of bytes currently available is less than the requested number, or it can be 0 (zero) if the end of the stream has been reached.","nodes":[{"pos":[0,367],"content":"A task that represents the asynchronous read operation. The value of the <code>TResult</code> parameter contains the total number of bytes read into the buffer. The result value can be less than the number of bytes requested if the number of bytes currently available is less than the requested number, or it can be 0 (zero) if the end of the stream has been reached.","nodes":[{"content":"A task that represents the asynchronous read operation.","pos":[0,55]},{"content":"The value of the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">TResult</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter contains the total number of bytes read into the buffer.","pos":[56,160],"source":" The value of the <code>TResult</code> parameter contains the total number of bytes read into the buffer."},{"content":"The result value can be less than the number of bytes requested if the number of bytes currently available is less than the requested number, or it can be 0 (zero) if the end of the stream has been reached.","pos":[161,367]}]}],"pos":[97594,97962],"yaml":true},{"content":"<code>buffer</code> is `null`.","nodes":[{"pos":[0,30],"content":"<ph id=\"ph1\">&lt;code&gt;buffer&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>buffer</code> is `null`."}],"pos":[98118,98149],"yaml":true},{"content":"<code>offset</code> or <code>count</code> is negative.","nodes":[{"pos":[0,54],"content":"<ph id=\"ph1\">&lt;code&gt;offset&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;count&lt;/code&gt;</ph> is negative.","source":"<code>offset</code> or <code>count</code> is negative."}],"pos":[98263,98318],"yaml":true},{"content":"The sum of <code>offset</code> and <code>count</code> is larger than the buffer length.","nodes":[{"pos":[0,87],"content":"The sum of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">offset</ph><ept id=\"p1\">&lt;/code&gt;</ept> and <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">count</ph><ept id=\"p2\">&lt;/code&gt;</ept> is larger than the buffer length.","source":"The sum of <code>offset</code> and <code>count</code> is larger than the buffer length."}],"pos":[98412,98500],"yaml":true},{"content":"The stream does not support reading.","nodes":[{"pos":[0,36],"content":"The stream does not support reading.","nodes":[{"content":"The stream does not support reading.","pos":[0,36]}]}],"pos":[98602,98639],"yaml":true},{"content":"The stream has been disposed.","nodes":[{"pos":[0,29],"content":"The stream has been disposed.","nodes":[{"content":"The stream has been disposed.","pos":[0,29]}]}],"pos":[98745,98775],"yaml":true},{"content":"The stream is currently in use by a previous read operation.","nodes":[{"pos":[0,60],"content":"The stream is currently in use by a previous read operation.","nodes":[{"content":"The stream is currently in use by a previous read operation.","pos":[0,60]}]}],"pos":[98885,98946],"yaml":true},{"content":"Reads a byte from the stream and advances the position within the stream by one byte, or returns -1 if at the end of the stream.","nodes":[{"pos":[0,128],"content":"Reads a byte from the stream and advances the position within the stream by one byte, or returns -1 if at the end of the stream.","nodes":[{"content":"Reads a byte from the stream and advances the position within the stream by one byte, or returns -1 if at the end of the stream.","pos":[0,128]}]}],"pos":[100419,100548],"yaml":true},{"content":"Use the <xref:System.IO.Stream.CanRead%2A> property to determine whether the current instance supports reading.  \n  \n Attempts to manipulate the stream after the stream has been closed could throw an <xref:System.ObjectDisposedException>.","nodes":[{"pos":[0,111],"content":"Use the <xref:System.IO.Stream.CanRead%2A> property to determine whether the current instance supports reading.","nodes":[{"content":"Use the <ph id=\"ph1\">&lt;xref:System.IO.Stream.CanRead%2A&gt;</ph> property to determine whether the current instance supports reading.","pos":[0,111],"source":"Use the <xref:System.IO.Stream.CanRead%2A> property to determine whether the current instance supports reading."}]},{"pos":[118,238],"content":"Attempts to manipulate the stream after the stream has been closed could throw an <xref:System.ObjectDisposedException>.","nodes":[{"content":"Attempts to manipulate the stream after the stream has been closed could throw an <ph id=\"ph1\">&lt;xref:System.ObjectDisposedException&gt;</ph>.","pos":[0,120],"source":"Attempts to manipulate the stream after the stream has been closed could throw an <xref:System.ObjectDisposedException>."}]}],"pos":[100559,100802],"yaml":true,"extradata":"MT"},{"content":"The unsigned byte cast to an `Int32`, or -1 if at the end of the stream.","nodes":[{"pos":[0,72],"content":"The unsigned byte cast to an <ph id=\"ph1\">`Int32`</ph>, or -1 if at the end of the stream.","source":"The unsigned byte cast to an `Int32`, or -1 if at the end of the stream."}],"pos":[100932,101005],"yaml":true},{"content":"The stream does not support reading.","nodes":[{"pos":[0,36],"content":"The stream does not support reading.","nodes":[{"content":"The stream does not support reading.","pos":[0,36]}]}],"pos":[101160,101197],"yaml":true},{"content":"Methods were called after the stream was closed.","nodes":[{"pos":[0,48],"content":"Methods were called after the stream was closed.","nodes":[{"content":"Methods were called after the stream was closed.","pos":[0,48]}]}],"pos":[101303,101352],"yaml":true},{"content":"Gets or sets a value, in miliseconds, that determines how long the stream will attempt to read before timing out.","nodes":[{"pos":[0,113],"content":"Gets or sets a value, in miliseconds, that determines how long the stream will attempt to read before timing out.","nodes":[{"content":"Gets or sets a value, in miliseconds, that determines how long the stream will attempt to read before timing out.","pos":[0,113]}]}],"pos":[102764,102878],"yaml":true},{"content":"A value, in miliseconds, that determines how long the stream will attempt to read before timing out.","nodes":[{"pos":[0,100],"content":"A value, in miliseconds, that determines how long the stream will attempt to read before timing out.","nodes":[{"content":"A value, in miliseconds, that determines how long the stream will attempt to read before timing out.","pos":[0,100]}]}],"pos":[103069,103170],"yaml":true},{"content":"The <xref href=\"System.IO.Stream.ReadTimeout\"></xref> method always throws an <xref href=\"System.InvalidOperationException\"></xref>.","nodes":[{"pos":[0,132],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.IO.Stream.ReadTimeout\"&gt;&lt;/xref&gt;</ph> method always throws an <ph id=\"ph2\">&lt;xref href=\"System.InvalidOperationException\"&gt;&lt;/xref&gt;</ph>.","source":"The <xref href=\"System.IO.Stream.ReadTimeout\"></xref> method always throws an <xref href=\"System.InvalidOperationException\"></xref>."}],"pos":[103336,103469],"yaml":true},{"content":"When overridden in a derived class, sets the position within the current stream.","nodes":[{"pos":[0,80],"content":"When overridden in a derived class, sets the position within the current stream.","nodes":[{"content":"When overridden in a derived class, sets the position within the current stream.","pos":[0,80]}]}],"pos":[105074,105155],"yaml":true},{"content":"Use the <xref:System.IO.Stream.CanSeek%2A> property to determine whether the current instance supports seeking.  \n  \n If `offset` is negative, the new position is required to precede the position specified by `origin` by the number of bytes specified by `offset`. If `offset` is zero (0), the new position is required to be the position specified by `origin`. If `offset` is positive, the new position is required to follow the position specified by `origin` by the number of bytes specified by `offset`.  \n  \n Classes derived from `Stream` that support seeking must override this method to provide the functionality described above.  \n  \n Seeking to any location beyond the length of the stream is supported.","nodes":[{"pos":[0,111],"content":"Use the <xref:System.IO.Stream.CanSeek%2A> property to determine whether the current instance supports seeking.","nodes":[{"content":"Use the <ph id=\"ph1\">&lt;xref:System.IO.Stream.CanSeek%2A&gt;</ph> property to determine whether the current instance supports seeking.","pos":[0,111],"source":"Use the <xref:System.IO.Stream.CanSeek%2A> property to determine whether the current instance supports seeking."}]},{"pos":[118,504],"content":"If `offset` is negative, the new position is required to precede the position specified by `origin` by the number of bytes specified by `offset`. If `offset` is zero (0), the new position is required to be the position specified by `origin`. If `offset` is positive, the new position is required to follow the position specified by `origin` by the number of bytes specified by `offset`.","nodes":[{"content":"If <ph id=\"ph1\">`offset`</ph> is negative, the new position is required to precede the position specified by <ph id=\"ph2\">`origin`</ph> by the number of bytes specified by <ph id=\"ph3\">`offset`</ph>.","pos":[0,145],"source":"If `offset` is negative, the new position is required to precede the position specified by `origin` by the number of bytes specified by `offset`."},{"content":"If <ph id=\"ph1\">`offset`</ph> is zero (0), the new position is required to be the position specified by <ph id=\"ph2\">`origin`</ph>.","pos":[146,241],"source":" If `offset` is zero (0), the new position is required to be the position specified by `origin`."},{"content":"If <ph id=\"ph1\">`offset`</ph> is positive, the new position is required to follow the position specified by <ph id=\"ph2\">`origin`</ph> by the number of bytes specified by <ph id=\"ph3\">`offset`</ph>.","pos":[242,386],"source":" If `offset` is positive, the new position is required to follow the position specified by `origin` by the number of bytes specified by `offset`."}]},{"pos":[511,633],"content":"Classes derived from <ph id=\"ph1\">`Stream`</ph> that support seeking must override this method to provide the functionality described above.","source":"Classes derived from `Stream` that support seeking must override this method to provide the functionality described above."},{"pos":[640,709],"content":"Seeking to any location beyond the length of the stream is supported.","nodes":[{"content":"Seeking to any location beyond the length of the stream is supported.","pos":[0,69]}]}],"pos":[105166,105884],"yaml":true,"extradata":"MT"},{"content":"A byte offset relative to the <code>origin</code> parameter.","nodes":[{"pos":[0,60],"content":"A byte offset relative to the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">origin</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter.","source":"A byte offset relative to the <code>origin</code> parameter."}],"pos":[106054,106115],"yaml":true},{"content":"A value of type <xref href=\"System.IO.SeekOrigin\"></xref> indicating the reference point used to obtain the new position.","nodes":[{"pos":[0,121],"content":"A value of type <ph id=\"ph1\">&lt;xref href=\"System.IO.SeekOrigin\"&gt;&lt;/xref&gt;</ph> indicating the reference point used to obtain the new position.","source":"A value of type <xref href=\"System.IO.SeekOrigin\"></xref> indicating the reference point used to obtain the new position."}],"pos":[106184,106306],"yaml":true},{"content":"The new position within the current stream.","nodes":[{"pos":[0,43],"content":"The new position within the current stream.","nodes":[{"content":"The new position within the current stream.","pos":[0,43]}]}],"pos":[106362,106406],"yaml":true},{"content":"An I/O error occurs.","nodes":[{"pos":[0,20],"content":"An I/O error occurs.","nodes":[{"content":"An I/O error occurs.","pos":[0,20]}]}],"pos":[106543,106564],"yaml":true},{"content":"The stream does not support seeking, such as if the stream is constructed from a pipe or console output.","nodes":[{"pos":[0,104],"content":"The stream does not support seeking, such as if the stream is constructed from a pipe or console output.","nodes":[{"content":"The stream does not support seeking, such as if the stream is constructed from a pipe or console output.","pos":[0,104]}]}],"pos":[106666,106771],"yaml":true},{"content":"Methods were called after the stream was closed.","nodes":[{"pos":[0,48],"content":"Methods were called after the stream was closed.","nodes":[{"content":"Methods were called after the stream was closed.","pos":[0,48]}]}],"pos":[106877,106926],"yaml":true},{"content":"When overridden in a derived class, sets the length of the current stream.","nodes":[{"pos":[0,74],"content":"When overridden in a derived class, sets the length of the current stream.","nodes":[{"content":"When overridden in a derived class, sets the length of the current stream.","pos":[0,74]}]}],"pos":[108387,108462],"yaml":true},{"content":"If the specified value is less than the current length of the stream, the stream is truncated. If the specified value is larger than the current length of the stream, the stream is expanded. If the stream is expanded, the contents of the stream between the old and the new length are not defined.  \n  \n A stream must support both writing and seeking for `SetLength` to work.  \n  \n Use the <xref:System.IO.Stream.CanWrite%2A> property to determine whether the current instance supports writing, and the <xref:System.IO.Stream.CanSeek%2A> property to determine whether seeking is supported.","nodes":[{"pos":[0,296],"content":"If the specified value is less than the current length of the stream, the stream is truncated. If the specified value is larger than the current length of the stream, the stream is expanded. If the stream is expanded, the contents of the stream between the old and the new length are not defined.","nodes":[{"content":"If the specified value is less than the current length of the stream, the stream is truncated. If the specified value is larger than the current length of the stream, the stream is expanded. If the stream is expanded, the contents of the stream between the old and the new length are not defined.","pos":[0,296],"nodes":[{"content":"If the specified value is less than the current length of the stream, the stream is truncated.","pos":[0,94]},{"content":"If the specified value is larger than the current length of the stream, the stream is expanded.","pos":[95,190]},{"content":"If the stream is expanded, the contents of the stream between the old and the new length are not defined.","pos":[191,296]}]}]},{"pos":[303,374],"content":"A stream must support both writing and seeking for <ph id=\"ph1\">`SetLength`</ph> to work.","source":"A stream must support both writing and seeking for `SetLength` to work."},{"pos":[381,588],"content":"Use the <xref:System.IO.Stream.CanWrite%2A> property to determine whether the current instance supports writing, and the <xref:System.IO.Stream.CanSeek%2A> property to determine whether seeking is supported.","nodes":[{"content":"Use the <ph id=\"ph1\">&lt;xref:System.IO.Stream.CanWrite%2A&gt;</ph> property to determine whether the current instance supports writing, and the <ph id=\"ph2\">&lt;xref:System.IO.Stream.CanSeek%2A&gt;</ph> property to determine whether seeking is supported.","pos":[0,207],"source":"Use the <xref:System.IO.Stream.CanWrite%2A> property to determine whether the current instance supports writing, and the <xref:System.IO.Stream.CanSeek%2A> property to determine whether seeking is supported."}]}],"pos":[108473,109068],"yaml":true,"extradata":"MT"},{"content":"The desired length of the current stream in bytes.","nodes":[{"pos":[0,50],"content":"The desired length of the current stream in bytes.","nodes":[{"content":"The desired length of the current stream in bytes.","pos":[0,50]}]}],"pos":[109212,109263],"yaml":true},{"content":"An I/O error occurs.","nodes":[{"pos":[0,20],"content":"An I/O error occurs.","nodes":[{"content":"An I/O error occurs.","pos":[0,20]}]}],"pos":[109405,109426],"yaml":true},{"content":"The stream does not support both writing and seeking, such as if the stream is constructed from a pipe or console output.","nodes":[{"pos":[0,121],"content":"The stream does not support both writing and seeking, such as if the stream is constructed from a pipe or console output.","nodes":[{"content":"The stream does not support both writing and seeking, such as if the stream is constructed from a pipe or console output.","pos":[0,121]}]}],"pos":[109528,109650],"yaml":true},{"content":"Methods were called after the stream was closed.","nodes":[{"pos":[0,48],"content":"Methods were called after the stream was closed.","nodes":[{"content":"Methods were called after the stream was closed.","pos":[0,48]}]}],"pos":[109756,109805],"yaml":true},{"content":"Creates a thread-safe (synchronized) wrapper around the specified <xref href=\"System.IO.Stream\"></xref> object.","nodes":[{"pos":[0,111],"content":"Creates a thread-safe (synchronized) wrapper around the specified <ph id=\"ph1\">&lt;xref href=\"System.IO.Stream\"&gt;&lt;/xref&gt;</ph> object.","source":"Creates a thread-safe (synchronized) wrapper around the specified <xref href=\"System.IO.Stream\"></xref> object."}],"pos":[111285,111397],"yaml":true},{"content":"This method returns a class that wraps the specified <xref:System.IO.Stream> object and restricts access to it from multiple threads. All access to the <xref:System.IO.Stream> object will be thread safe.","nodes":[{"pos":[0,203],"content":"This method returns a class that wraps the specified <xref:System.IO.Stream> object and restricts access to it from multiple threads. All access to the <xref:System.IO.Stream> object will be thread safe.","nodes":[{"content":"This method returns a class that wraps the specified <xref:System.IO.Stream> object and restricts access to it from multiple threads. All access to the <xref:System.IO.Stream> object will be thread safe.","pos":[0,203],"nodes":[{"content":"This method returns a class that wraps the specified <ph id=\"ph1\">&lt;xref:System.IO.Stream&gt;</ph> object and restricts access to it from multiple threads.","pos":[0,133],"source":"This method returns a class that wraps the specified <xref:System.IO.Stream> object and restricts access to it from multiple threads."},{"content":"All access to the <ph id=\"ph1\">&lt;xref:System.IO.Stream&gt;</ph> object will be thread safe.","pos":[134,203],"source":" All access to the <xref:System.IO.Stream> object will be thread safe."}]}]}],"pos":[111408,111612],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.IO.Stream\"></xref> object to synchronize.","nodes":[{"pos":[0,64],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.IO.Stream\"&gt;&lt;/xref&gt;</ph> object to synchronize.","source":"The <xref href=\"System.IO.Stream\"></xref> object to synchronize."}],"pos":[111787,111852],"yaml":true},{"content":"A thread-safe <xref href=\"System.IO.Stream\"></xref> object.","nodes":[{"pos":[0,59],"content":"A thread-safe <ph id=\"ph1\">&lt;xref href=\"System.IO.Stream\"&gt;&lt;/xref&gt;</ph> object.","source":"A thread-safe <xref href=\"System.IO.Stream\"></xref> object."}],"pos":[111912,111972],"yaml":true},{"content":"<code>stream</code> is `null`.","nodes":[{"pos":[0,30],"content":"<ph id=\"ph1\">&lt;code&gt;stream&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>stream</code> is `null`."}],"pos":[112131,112162],"yaml":true},{"content":"When overridden in a derived class, writes a sequence of bytes to the current stream and advances the current position within this stream by the number of bytes written.","nodes":[{"pos":[0,169],"content":"When overridden in a derived class, writes a sequence of bytes to the current stream and advances the current position within this stream by the number of bytes written.","nodes":[{"content":"When overridden in a derived class, writes a sequence of bytes to the current stream and advances the current position within this stream by the number of bytes written.","pos":[0,169]}]}],"pos":[113381,113551],"yaml":true},{"content":"Use the <xref:System.IO.Stream.CanWrite%2A> property to determine whether the current instance supports writing. Use the <xref:System.IO.Stream.WriteAsync%2A> method to write asynchronously to the current stream.  \n  \n If the write operation is successful, the position within the stream advances by the number of bytes written. If an exception occurs, the position within the stream remains unchanged.","nodes":[{"pos":[0,212],"content":"Use the <xref:System.IO.Stream.CanWrite%2A> property to determine whether the current instance supports writing. Use the <xref:System.IO.Stream.WriteAsync%2A> method to write asynchronously to the current stream.","nodes":[{"content":"Use the <xref:System.IO.Stream.CanWrite%2A> property to determine whether the current instance supports writing. Use the <xref:System.IO.Stream.WriteAsync%2A> method to write asynchronously to the current stream.","pos":[0,212],"nodes":[{"content":"Use the <ph id=\"ph1\">&lt;xref:System.IO.Stream.CanWrite%2A&gt;</ph> property to determine whether the current instance supports writing.","pos":[0,112],"source":"Use the <xref:System.IO.Stream.CanWrite%2A> property to determine whether the current instance supports writing."},{"content":"Use the <ph id=\"ph1\">&lt;xref:System.IO.Stream.WriteAsync%2A&gt;</ph> method to write asynchronously to the current stream.","pos":[113,212],"source":" Use the <xref:System.IO.Stream.WriteAsync%2A> method to write asynchronously to the current stream."}]}]},{"pos":[219,402],"content":"If the write operation is successful, the position within the stream advances by the number of bytes written. If an exception occurs, the position within the stream remains unchanged.","nodes":[{"content":"If the write operation is successful, the position within the stream advances by the number of bytes written. If an exception occurs, the position within the stream remains unchanged.","pos":[0,183],"nodes":[{"content":"If the write operation is successful, the position within the stream advances by the number of bytes written.","pos":[0,109]},{"content":"If an exception occurs, the position within the stream remains unchanged.","pos":[110,183]}]}]}],"pos":[113562,113969],"yaml":true,"extradata":"MT"},{"content":"An array of bytes. This method copies <code>count</code> bytes from <code>buffer</code> to the current stream.","nodes":[{"pos":[0,110],"content":"An array of bytes. This method copies <code>count</code> bytes from <code>buffer</code> to the current stream.","nodes":[{"content":"An array of bytes.","pos":[0,18]},{"content":"This method copies <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">count</ph><ept id=\"p1\">&lt;/code&gt;</ept> bytes from <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">buffer</ph><ept id=\"p2\">&lt;/code&gt;</ept> to the current stream.","pos":[19,110],"source":" This method copies <code>count</code> bytes from <code>buffer</code> to the current stream."}]}],"pos":[114137,114248],"yaml":true},{"content":"The zero-based byte offset in <code>buffer</code> at which to begin copying bytes to the current stream.","nodes":[{"pos":[0,104],"content":"The zero-based byte offset in <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">buffer</ph><ept id=\"p1\">&lt;/code&gt;</ept> at which to begin copying bytes to the current stream.","source":"The zero-based byte offset in <code>buffer</code> at which to begin copying bytes to the current stream."}],"pos":[114309,114414],"yaml":true},{"content":"The number of bytes to be written to the current stream.","nodes":[{"pos":[0,56],"content":"The number of bytes to be written to the current stream.","nodes":[{"content":"The number of bytes to be written to the current stream.","pos":[0,56]}]}],"pos":[114474,114531],"yaml":true},{"content":"The sum of <code>offset</code> and <code>count</code> is greater than the buffer length.","nodes":[{"pos":[0,88],"content":"The sum of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">offset</ph><ept id=\"p1\">&lt;/code&gt;</ept> and <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">count</ph><ept id=\"p2\">&lt;/code&gt;</ept> is greater than the buffer length.","source":"The sum of <code>offset</code> and <code>count</code> is greater than the buffer length."}],"pos":[114675,114764],"yaml":true},{"content":"<code>buffer</code> is `null`.","nodes":[{"pos":[0,30],"content":"<ph id=\"ph1\">&lt;code&gt;buffer&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>buffer</code> is `null`."}],"pos":[114866,114897],"yaml":true},{"content":"<code>offset</code> or <code>count</code> is negative.","nodes":[{"pos":[0,54],"content":"<ph id=\"ph1\">&lt;code&gt;offset&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;count&lt;/code&gt;</ph> is negative.","source":"<code>offset</code> or <code>count</code> is negative."}],"pos":[115011,115066],"yaml":true},{"content":"An I/O error occured, such as the specified file cannot be found.","nodes":[{"pos":[0,65],"content":"An I/O error occured, such as the specified file cannot be found.","nodes":[{"content":"An I/O error occured, such as the specified file cannot be found.","pos":[0,65]}]}],"pos":[115154,115220],"yaml":true},{"content":"The stream does not support writing.","nodes":[{"pos":[0,36],"content":"The stream does not support writing.","nodes":[{"content":"The stream does not support writing.","pos":[0,36]}]}],"pos":[115322,115359],"yaml":true},{"content":"<xref href=\"System.IO.Stream.Write(System.Byte[],System.Int32,System.Int32)\"></xref> was called after the stream was closed.","nodes":[{"pos":[0,124],"content":"<ph id=\"ph1\">&lt;xref href=\"System.IO.Stream.Write(System.Byte[],System.Int32,System.Int32)\"&gt;&lt;/xref&gt;</ph> was called after the stream was closed.","source":"<xref href=\"System.IO.Stream.Write(System.Byte[],System.Int32,System.Int32)\"></xref> was called after the stream was closed."}],"pos":[115465,115590],"yaml":true},{"content":"Asynchronously writes a sequence of bytes to the current stream and advances the current position within this stream by the number of bytes written.","nodes":[{"pos":[0,148],"content":"Asynchronously writes a sequence of bytes to the current stream and advances the current position within this stream by the number of bytes written.","nodes":[{"content":"Asynchronously writes a sequence of bytes to the current stream and advances the current position within this stream by the number of bytes written.","pos":[0,148]}]}],"pos":[117183,117332],"yaml":true},{"content":"The <xref:System.IO.Stream.WriteAsync%2A> method enables you to perform resource-intensive I/O operations without blocking the main thread. This performance consideration is particularly important in a [!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)] app or [!INCLUDE[desktop_appname](~/includes/desktop-appname-md.md)] app where a time-consuming stream operation can block the UI thread and make your app appear as if it is not working. The async methods are used in conjunction with the `async` and `await` keywords in Visual Basic and C#.  \n  \n Use the <xref:System.IO.Stream.CanWrite%2A> property to determine whether the current instance supports writing.","nodes":[{"pos":[0,558],"content":"The <xref:System.IO.Stream.WriteAsync%2A> method enables you to perform resource-intensive I/O operations without blocking the main thread. This performance consideration is particularly important in a [!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)] app or [!INCLUDE[desktop_appname](~/includes/desktop-appname-md.md)] app where a time-consuming stream operation can block the UI thread and make your app appear as if it is not working. The async methods are used in conjunction with the `async` and `await` keywords in Visual Basic and C#.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.IO.Stream.WriteAsync%2A&gt;</ph> method enables you to perform resource-intensive I/O operations without blocking the main thread.","pos":[0,139],"source":"The <xref:System.IO.Stream.WriteAsync%2A> method enables you to perform resource-intensive I/O operations without blocking the main thread."},{"content":"This performance consideration is particularly important in a <ph id=\"ph1\">[!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)]</ph> app or <ph id=\"ph2\">[!INCLUDE[desktop_appname](~/includes/desktop-appname-md.md)]</ph> app where a time-consuming stream operation can block the UI thread and make your app appear as if it is not working.","pos":[140,454],"source":" This performance consideration is particularly important in a [!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)] app or [!INCLUDE[desktop_appname](~/includes/desktop-appname-md.md)] app where a time-consuming stream operation can block the UI thread and make your app appear as if it is not working."},{"content":"The async methods are used in conjunction with the <ph id=\"ph1\">`async`</ph> and <ph id=\"ph2\">`await`</ph> keywords in Visual Basic and C#.","pos":[455,558],"source":" The async methods are used in conjunction with the `async` and `await` keywords in Visual Basic and C#."}]},{"pos":[565,677],"content":"Use the <xref:System.IO.Stream.CanWrite%2A> property to determine whether the current instance supports writing.","nodes":[{"content":"Use the <ph id=\"ph1\">&lt;xref:System.IO.Stream.CanWrite%2A&gt;</ph> property to determine whether the current instance supports writing.","pos":[0,112],"source":"Use the <xref:System.IO.Stream.CanWrite%2A> property to determine whether the current instance supports writing."}]}],"pos":[117343,118025],"yaml":true,"extradata":"MT"},{"content":"The buffer to write data from.","nodes":[{"pos":[0,30],"content":"The buffer to write data from.","nodes":[{"content":"The buffer to write data from.","pos":[0,30]}]}],"pos":[118748,118779],"yaml":true},{"content":"The zero-based byte offset in <code>buffer</code> from which to begin copying bytes to the stream.","nodes":[{"pos":[0,98],"content":"The zero-based byte offset in <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">buffer</ph><ept id=\"p1\">&lt;/code&gt;</ept> from which to begin copying bytes to the stream.","source":"The zero-based byte offset in <code>buffer</code> from which to begin copying bytes to the stream."}],"pos":[118840,118939],"yaml":true},{"content":"The maximum number of bytes to write.","nodes":[{"pos":[0,37],"content":"The maximum number of bytes to write.","nodes":[{"content":"The maximum number of bytes to write.","pos":[0,37]}]}],"pos":[118999,119037],"yaml":true},{"content":"A task that represents the asynchronous write operation.","nodes":[{"pos":[0,56],"content":"A task that represents the asynchronous write operation.","nodes":[{"content":"A task that represents the asynchronous write operation.","pos":[0,56]}]}],"pos":[119108,119165],"yaml":true},{"content":"<code>buffer</code> is `null`.","nodes":[{"pos":[0,30],"content":"<ph id=\"ph1\">&lt;code&gt;buffer&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>buffer</code> is `null`."}],"pos":[119322,119353],"yaml":true},{"content":"<code>offset</code> or <code>count</code> is negative.","nodes":[{"pos":[0,54],"content":"<ph id=\"ph1\">&lt;code&gt;offset&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;count&lt;/code&gt;</ph> is negative.","source":"<code>offset</code> or <code>count</code> is negative."}],"pos":[119467,119522],"yaml":true},{"content":"The sum of <code>offset</code> and <code>count</code> is larger than the buffer length.","nodes":[{"pos":[0,87],"content":"The sum of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">offset</ph><ept id=\"p1\">&lt;/code&gt;</ept> and <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">count</ph><ept id=\"p2\">&lt;/code&gt;</ept> is larger than the buffer length.","source":"The sum of <code>offset</code> and <code>count</code> is larger than the buffer length."}],"pos":[119616,119704],"yaml":true},{"content":"The stream does not support writing.","nodes":[{"pos":[0,36],"content":"The stream does not support writing.","nodes":[{"content":"The stream does not support writing.","pos":[0,36]}]}],"pos":[119806,119843],"yaml":true},{"content":"The stream has been disposed.","nodes":[{"pos":[0,29],"content":"The stream has been disposed.","nodes":[{"content":"The stream has been disposed.","pos":[0,29]}]}],"pos":[119949,119979],"yaml":true},{"content":"The stream is currently in use by a previous write operation.","nodes":[{"pos":[0,61],"content":"The stream is currently in use by a previous write operation.","nodes":[{"content":"The stream is currently in use by a previous write operation.","pos":[0,61]}]}],"pos":[120089,120151],"yaml":true},{"content":"Asynchronously writes a sequence of bytes to the current stream, advances the current position within this stream by the number of bytes written, and monitors cancellation requests.","nodes":[{"pos":[0,181],"content":"Asynchronously writes a sequence of bytes to the current stream, advances the current position within this stream by the number of bytes written, and monitors cancellation requests.","nodes":[{"content":"Asynchronously writes a sequence of bytes to the current stream, advances the current position within this stream by the number of bytes written, and monitors cancellation requests.","pos":[0,181]}]}],"pos":[121981,122163],"yaml":true},{"content":"The <xref:System.IO.Stream.WriteAsync%2A> method enables you to perform resource-intensive I/O operations without blocking the main thread. This performance consideration is particularly important in a [!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)] app or [!INCLUDE[desktop_appname](~/includes/desktop-appname-md.md)] app where a time-consuming stream operation can block the UI thread and make your app appear as if it is not working. The async methods are used in conjunction with the `async` and `await` keywords in Visual Basic and C#.  \n  \n Use the <xref:System.IO.Stream.CanWrite%2A> property to determine whether the current instance supports writing.  \n  \n If the operation is canceled before it completes, the returned task contains the <xref:System.Threading.Tasks.TaskStatus.Canceled> value for the <xref:System.Threading.Tasks.Task.Status%2A> property.  \n  \n For an example, see the <xref:System.IO.Stream.WriteAsync%28System.Byte%5B%5D%2CSystem.Int32%2CSystem.Int32%29> overload.","nodes":[{"pos":[0,558],"content":"The <xref:System.IO.Stream.WriteAsync%2A> method enables you to perform resource-intensive I/O operations without blocking the main thread. This performance consideration is particularly important in a [!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)] app or [!INCLUDE[desktop_appname](~/includes/desktop-appname-md.md)] app where a time-consuming stream operation can block the UI thread and make your app appear as if it is not working. The async methods are used in conjunction with the `async` and `await` keywords in Visual Basic and C#.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.IO.Stream.WriteAsync%2A&gt;</ph> method enables you to perform resource-intensive I/O operations without blocking the main thread.","pos":[0,139],"source":"The <xref:System.IO.Stream.WriteAsync%2A> method enables you to perform resource-intensive I/O operations without blocking the main thread."},{"content":"This performance consideration is particularly important in a <ph id=\"ph1\">[!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)]</ph> app or <ph id=\"ph2\">[!INCLUDE[desktop_appname](~/includes/desktop-appname-md.md)]</ph> app where a time-consuming stream operation can block the UI thread and make your app appear as if it is not working.","pos":[140,454],"source":" This performance consideration is particularly important in a [!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)] app or [!INCLUDE[desktop_appname](~/includes/desktop-appname-md.md)] app where a time-consuming stream operation can block the UI thread and make your app appear as if it is not working."},{"content":"The async methods are used in conjunction with the <ph id=\"ph1\">`async`</ph> and <ph id=\"ph2\">`await`</ph> keywords in Visual Basic and C#.","pos":[455,558],"source":" The async methods are used in conjunction with the `async` and `await` keywords in Visual Basic and C#."}]},{"pos":[565,677],"content":"Use the <xref:System.IO.Stream.CanWrite%2A> property to determine whether the current instance supports writing.","nodes":[{"content":"Use the <ph id=\"ph1\">&lt;xref:System.IO.Stream.CanWrite%2A&gt;</ph> property to determine whether the current instance supports writing.","pos":[0,112],"source":"Use the <xref:System.IO.Stream.CanWrite%2A> property to determine whether the current instance supports writing."}]},{"pos":[684,883],"content":"If the operation is canceled before it completes, the returned task contains the <xref:System.Threading.Tasks.TaskStatus.Canceled> value for the <xref:System.Threading.Tasks.Task.Status%2A> property.","nodes":[{"content":"If the operation is canceled before it completes, the returned task contains the <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.TaskStatus.Canceled&gt;</ph> value for the <ph id=\"ph2\">&lt;xref:System.Threading.Tasks.Task.Status%2A&gt;</ph> property.","pos":[0,199],"source":"If the operation is canceled before it completes, the returned task contains the <xref:System.Threading.Tasks.TaskStatus.Canceled> value for the <xref:System.Threading.Tasks.Task.Status%2A> property."}]},{"pos":[890,1011],"content":"For an example, see the <xref:System.IO.Stream.WriteAsync%28System.Byte%5B%5D%2CSystem.Int32%2CSystem.Int32%29> overload.","nodes":[{"content":"For an example, see the <ph id=\"ph1\">&lt;xref:System.IO.Stream.WriteAsync%28System.Byte%5B%5D%2CSystem.Int32%2CSystem.Int32%29&gt;</ph> overload.","pos":[0,121],"source":"For an example, see the <xref:System.IO.Stream.WriteAsync%28System.Byte%5B%5D%2CSystem.Int32%2CSystem.Int32%29> overload."}]}],"pos":[122174,123194],"yaml":true,"extradata":"MT"},{"content":"The buffer to write data from.","nodes":[{"pos":[0,30],"content":"The buffer to write data from.","nodes":[{"content":"The buffer to write data from.","pos":[0,30]}]}],"pos":[123510,123541],"yaml":true},{"content":"The zero-based byte offset in <code>buffer</code> from which to begin copying bytes to the stream.","nodes":[{"pos":[0,98],"content":"The zero-based byte offset in <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">buffer</ph><ept id=\"p1\">&lt;/code&gt;</ept> from which to begin copying bytes to the stream.","source":"The zero-based byte offset in <code>buffer</code> from which to begin copying bytes to the stream."}],"pos":[123602,123701],"yaml":true},{"content":"The maximum number of bytes to write.","nodes":[{"pos":[0,37],"content":"The maximum number of bytes to write.","nodes":[{"content":"The maximum number of bytes to write.","pos":[0,37]}]}],"pos":[123761,123799],"yaml":true},{"content":"The token to monitor for cancellation requests. The default value is <xref href=\"System.Threading.CancellationToken.None\"></xref>.","nodes":[{"pos":[0,130],"content":"The token to monitor for cancellation requests. The default value is <xref href=\"System.Threading.CancellationToken.None\"></xref>.","nodes":[{"content":"The token to monitor for cancellation requests.","pos":[0,47]},{"content":"The default value is <ph id=\"ph1\">&lt;xref href=\"System.Threading.CancellationToken.None\"&gt;&lt;/xref&gt;</ph>.","pos":[48,130],"source":" The default value is <xref href=\"System.Threading.CancellationToken.None\"></xref>."}]}],"pos":[123893,124024],"yaml":true},{"content":"A task that represents the asynchronous write operation.","nodes":[{"pos":[0,56],"content":"A task that represents the asynchronous write operation.","nodes":[{"content":"A task that represents the asynchronous write operation.","pos":[0,56]}]}],"pos":[124095,124152],"yaml":true},{"content":"<code>buffer</code> is `null`.","nodes":[{"pos":[0,30],"content":"<ph id=\"ph1\">&lt;code&gt;buffer&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>buffer</code> is `null`."}],"pos":[124309,124340],"yaml":true},{"content":"<code>offset</code> or <code>count</code> is negative.","nodes":[{"pos":[0,54],"content":"<ph id=\"ph1\">&lt;code&gt;offset&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;count&lt;/code&gt;</ph> is negative.","source":"<code>offset</code> or <code>count</code> is negative."}],"pos":[124454,124509],"yaml":true},{"content":"The sum of <code>offset</code> and <code>count</code> is larger than the buffer length.","nodes":[{"pos":[0,87],"content":"The sum of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">offset</ph><ept id=\"p1\">&lt;/code&gt;</ept> and <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">count</ph><ept id=\"p2\">&lt;/code&gt;</ept> is larger than the buffer length.","source":"The sum of <code>offset</code> and <code>count</code> is larger than the buffer length."}],"pos":[124603,124691],"yaml":true},{"content":"The stream does not support writing.","nodes":[{"pos":[0,36],"content":"The stream does not support writing.","nodes":[{"content":"The stream does not support writing.","pos":[0,36]}]}],"pos":[124793,124830],"yaml":true},{"content":"The stream has been disposed.","nodes":[{"pos":[0,29],"content":"The stream has been disposed.","nodes":[{"content":"The stream has been disposed.","pos":[0,29]}]}],"pos":[124936,124966],"yaml":true},{"content":"The stream is currently in use by a previous write operation.","nodes":[{"pos":[0,61],"content":"The stream is currently in use by a previous write operation.","nodes":[{"content":"The stream is currently in use by a previous write operation.","pos":[0,61]}]}],"pos":[125076,125138],"yaml":true},{"content":"Writes a byte to the current position in the stream and advances the position within the stream by one byte.","nodes":[{"pos":[0,108],"content":"Writes a byte to the current position in the stream and advances the position within the stream by one byte.","nodes":[{"content":"Writes a byte to the current position in the stream and advances the position within the stream by one byte.","pos":[0,108]}]}],"pos":[126668,126777],"yaml":true},{"content":"Use the <xref:System.IO.Stream.CanWrite%2A> property to determine whether the current instance supports writing.","nodes":[{"pos":[0,112],"content":"Use the <xref:System.IO.Stream.CanWrite%2A> property to determine whether the current instance supports writing.","nodes":[{"content":"Use the <ph id=\"ph1\">&lt;xref:System.IO.Stream.CanWrite%2A&gt;</ph> property to determine whether the current instance supports writing.","pos":[0,112],"source":"Use the <xref:System.IO.Stream.CanWrite%2A> property to determine whether the current instance supports writing."}]}],"pos":[126788,126901],"yaml":true,"extradata":"MT"},{"content":"The byte to write to the stream.","nodes":[{"pos":[0,32],"content":"The byte to write to the stream.","nodes":[{"content":"The byte to write to the stream.","pos":[0,32]}]}],"pos":[127043,127076],"yaml":true},{"content":"An I/O error occurs.","nodes":[{"pos":[0,20],"content":"An I/O error occurs.","nodes":[{"content":"An I/O error occurs.","pos":[0,20]}]}],"pos":[127218,127239],"yaml":true},{"content":"The stream does not support writing, or the stream is already closed.","nodes":[{"pos":[0,69],"content":"The stream does not support writing, or the stream is already closed.","nodes":[{"content":"The stream does not support writing, or the stream is already closed.","pos":[0,69]}]}],"pos":[127341,127411],"yaml":true},{"content":"Methods were called after the stream was closed.","nodes":[{"pos":[0,48],"content":"Methods were called after the stream was closed.","nodes":[{"content":"Methods were called after the stream was closed.","pos":[0,48]}]}],"pos":[127517,127566],"yaml":true},{"content":"Gets or sets a value, in miliseconds, that determines how long the stream will attempt to write before timing out.","nodes":[{"pos":[0,114],"content":"Gets or sets a value, in miliseconds, that determines how long the stream will attempt to write before timing out.","nodes":[{"content":"Gets or sets a value, in miliseconds, that determines how long the stream will attempt to write before timing out.","pos":[0,114]}]}],"pos":[128984,129099],"yaml":true},{"content":"A value, in miliseconds, that determines how long the stream will attempt to write before timing out.","nodes":[{"pos":[0,101],"content":"A value, in miliseconds, that determines how long the stream will attempt to write before timing out.","nodes":[{"content":"A value, in miliseconds, that determines how long the stream will attempt to write before timing out.","pos":[0,101]}]}],"pos":[129291,129393],"yaml":true},{"content":"The <xref href=\"System.IO.Stream.WriteTimeout\"></xref> method always throws an <xref href=\"System.InvalidOperationException\"></xref>.","nodes":[{"pos":[0,133],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.IO.Stream.WriteTimeout\"&gt;&lt;/xref&gt;</ph> method always throws an <ph id=\"ph2\">&lt;xref href=\"System.InvalidOperationException\"&gt;&lt;/xref&gt;</ph>.","source":"The <xref href=\"System.IO.Stream.WriteTimeout\"></xref> method always throws an <xref href=\"System.InvalidOperationException\"></xref>."}],"pos":[129560,129694],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.IO.Stream\n  commentId: T:System.IO.Stream\n  id: Stream\n  children:\n  - System.IO.Stream.#ctor\n  - System.IO.Stream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)\n  - System.IO.Stream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)\n  - System.IO.Stream.CanRead\n  - System.IO.Stream.CanSeek\n  - System.IO.Stream.CanTimeout\n  - System.IO.Stream.CanWrite\n  - System.IO.Stream.Close\n  - System.IO.Stream.CopyTo(System.IO.Stream,System.Int32)\n  - System.IO.Stream.CopyTo(System.IO.Stream)\n  - System.IO.Stream.CopyToAsync(System.IO.Stream)\n  - System.IO.Stream.CopyToAsync(System.IO.Stream,System.Int32)\n  - System.IO.Stream.CopyToAsync(System.IO.Stream,System.Int32,System.Threading.CancellationToken)\n  - System.IO.Stream.CreateWaitHandle\n  - System.IO.Stream.Dispose\n  - System.IO.Stream.Dispose(System.Boolean)\n  - System.IO.Stream.EndRead(System.IAsyncResult)\n  - System.IO.Stream.EndWrite(System.IAsyncResult)\n  - System.IO.Stream.Flush\n  - System.IO.Stream.FlushAsync\n  - System.IO.Stream.FlushAsync(System.Threading.CancellationToken)\n  - System.IO.Stream.Length\n  - System.IO.Stream.Null\n  - System.IO.Stream.ObjectInvariant\n  - System.IO.Stream.Position\n  - System.IO.Stream.Read(System.Byte[],System.Int32,System.Int32)\n  - System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32)\n  - System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)\n  - System.IO.Stream.ReadByte\n  - System.IO.Stream.ReadTimeout\n  - System.IO.Stream.Seek(System.Int64,System.IO.SeekOrigin)\n  - System.IO.Stream.SetLength(System.Int64)\n  - System.IO.Stream.Synchronized(System.IO.Stream)\n  - System.IO.Stream.Write(System.Byte[],System.Int32,System.Int32)\n  - System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32)\n  - System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)\n  - System.IO.Stream.WriteByte(System.Byte)\n  - System.IO.Stream.WriteTimeout\n  langs:\n  - csharp\n  name: Stream\n  nameWithType: Stream\n  fullName: System.IO.Stream\n  type: Class\n  assemblies:\n  - System.IO\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.IO\n  summary: Provides a generic view of a sequence of bytes. This is an abstract class.\n  remarks: \"> [!NOTE]\\n>  To view the .NET Framework source code for this type, see the [Reference Source](http://referencesource.microsoft.com/#mscorlib/system/io/stream.cs#f956b0c07e86df64). You can browse through the source code online, download the reference for offline viewing, and step through the sources (including patches and updates) during debugging; see [instructions](http://referencesource.microsoft.com/).  \\n  \\n <xref:System.IO.Stream> is the abstract base class of all streams. A stream is an abstraction of a sequence of bytes, such as a file, an input/output device, an inter-process communication pipe, or a TCP/IP socket. The <xref:System.IO.Stream> class and its derived classes provide a generic view of these different types of input and output, and isolate the programmer from the specific details of the operating system and the underlying devices.  \\n  \\n Streams involve three fundamental operations:  \\n  \\n-   You can read from streams. Reading is the transfer of data from a stream into a data structure, such as an array of bytes.  \\n  \\n-   You can write to streams. Writing is the transfer of data from a data structure into a stream.  \\n  \\n-   Streams can support seeking. Seeking refers to querying and modifying the current position within a stream. Seek capability depends on the kind of backing store a stream has. For example, network streams have no unified concept of a current position, and therefore typically do not support seeking.  \\n  \\n Some of the more commonly used streams that inherit from <xref:System.IO.Stream> are <xref:System.IO.FileStream>, and <xref:System.IO.MemoryStream>.  \\n  \\n Depending on the underlying data source or repository, streams might support only some of these capabilities. You can query a stream for its capabilities by using the <xref:System.IO.Stream.CanRead%2A>, <xref:System.IO.Stream.CanWrite%2A>, and <xref:System.IO.Stream.CanSeek%2A> properties of the <xref:System.IO.Stream> class.  \\n  \\n The <xref:System.IO.Stream.Read%2A> and <xref:System.IO.Stream.Write%2A> methods read and write data in a variety of formats. For streams that support seeking, use the <xref:System.IO.Stream.Seek%2A> and <xref:System.IO.Stream.SetLength%2A> methods and the <xref:System.IO.Stream.Position%2A> and <xref:System.IO.Stream.Length%2A> properties to query and modify the current position and length of a stream.  \\n  \\n This type implements the <xref:System.IDisposable> interface. When you have finished using the type, you should dispose of it either directly or indirectly. To dispose of the type directly, call its <xref:System.IDisposable.Dispose%2A> method in a `try`/`catch` block. To dispose of it indirectly, use a language construct such as `using` (in C#) or `Using` (in Visual Basic). For more information, see the \\\"Using an Object that Implements IDisposable\\\" section in the <xref:System.IDisposable> interface topic.  \\n  \\n Disposing a <xref:System.IO.Stream> object flushes any buffered data, and essentially calls the <xref:System.IO.Stream.Flush%2A> method for you. <xref:System.IO.Stream.Dispose%2A> also releases operating system resources such as file handles, network connections, or memory used for any internal buffering. The <xref:System.IO.BufferedStream> class provides the capability of wrapping a buffered stream around another stream in order to improve read and write performance.  \\n  \\n Starting with the [!INCLUDE[net_v45](~/includes/net-v45-md.md)], the <xref:System.IO.Stream> class includes async methods to simplify asynchronous operations. An async method contains `Async` in its name, such as <xref:System.IO.Stream.ReadAsync%2A>, <xref:System.IO.Stream.WriteAsync%2A>, <xref:System.IO.Stream.CopyToAsync%2A>, and <xref:System.IO.Stream.FlushAsync%2A>. These methods enable you to perform resource-intensive I/O operations without blocking the main thread. This performance consideration is particularly important in a [!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)] app or [!INCLUDE[desktop_appname](~/includes/desktop-appname-md.md)] app where a time-consuming stream operation can block the UI thread and make your app appear as if it is not working. The async methods are used in conjunction with the `async` and `await` keywords in Visual Basic and C#.  \\n  \\n When used in a [!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)] app, <xref:System.IO.Stream> includes two extension methods: <xref:System.IO.WindowsRuntimeStreamExtensions.AsInputStream%2A> and <xref:System.IO.WindowsRuntimeStreamExtensions.AsOutputStream%2A>. These methods convert a <xref:System.IO.Stream> object to a stream in the [!INCLUDE[wrt](~/includes/wrt-md.md)]. You can also convert a stream in the [!INCLUDE[wrt](~/includes/wrt-md.md)] to a <xref:System.IO.Stream> object by using the <xref:System.IO.WindowsRuntimeStreamExtensions.AsStreamForRead%2A> and <xref:System.IO.WindowsRuntimeStreamExtensions.AsStreamForWrite%2A> methods. For more information, see [How to: Convert Between .NET Framework Streams and Windows Runtime Streams](~/docs/standard/io/how-to-convert-between-dotnet-streams-and-winrt-streams.md)  \\n  \\n Some stream implementations perform local buffering of the underlying data to improve performance. For such streams, you can use the <xref:System.IO.Stream.Flush%2A> or <xref:System.IO.Stream.FlushAsync%2A> method to clear any internal buffers and ensure that all data has been written to the underlying data source or repository.  \\n  \\n If you need a stream with no backing store (also known as a bit bucket), use the <xref:System.IO.Stream.Null> field to retrieve an instance of a stream that is designed for this purpose.\"\n  example:\n  - \"The following example demonstrates how to use two <xref:System.IO.FileStream> objects to asynchronously copy the files from one directory to another directory. The <xref:System.IO.FileStream> class derives from the <xref:System.IO.Stream> class. Notice that the <xref:System.Web.UI.WebControls.Button.Click> event handler for the <xref:System.Windows.Controls.Button> control is marked with the `async` modifier because it calls an asynchronous method.  \\n  \\n [!code-csharp[Asynchronous_File_IO_async#1](~/samples/snippets/csharp/VS_Snippets_CLR/Asynchronous_File_IO_async/cs/example.cs#1)]\\n [!code-vb[Asynchronous_File_IO_async#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Asynchronous_File_IO_async/vb/example.vb#1)]\"\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(true)]\n\n      public abstract class Stream : MarshalByRefObject, IDisposable\n  inheritance:\n  - System.Object\n  derivedClasses:\n  - Microsoft.JScript.COMCharStream\n  - System.Data.OracleClient.OracleBFile\n  - System.Data.OracleClient.OracleLob\n  - System.Data.SqlTypes.SqlFileStream\n  - System.IO.BufferedStream\n  - System.IO.FileStream\n  - System.IO.MemoryStream\n  - System.IO.UnmanagedMemoryStream\n  - System.IO.Compression.DeflateStream\n  - System.IO.Compression.GZipStream\n  - System.IO.Pipes.PipeStream\n  - System.Net.Security.AuthenticatedStream\n  - System.Net.Sockets.NetworkStream\n  - System.Printing.PrintQueueStream\n  - System.Security.Cryptography.CryptoStream\n  implements:\n  - System.IDisposable\n  inheritedMembers:\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.ToString\n  attributes:\n  - type: System.Runtime.InteropServices.ComVisibleAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/Stream.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.IO.Stream.#ctor\n  commentId: M:System.IO.Stream.#ctor\n  id: '#ctor'\n  parent: System.IO.Stream\n  langs:\n  - csharp\n  name: Stream()\n  nameWithType: Stream.Stream()\n  fullName: Stream.Stream()\n  type: Constructor\n  assemblies:\n  - System.IO\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.IO\n  summary: Initializes a new instance of the <xref href=\"System.IO.Stream\"></xref> class.\n  remarks: \"<xref:System.IO.Stream> is the abstract base class of all streams.  \\n  \\n Some of the more commonly used streams that inherit from <xref:System.IO.Stream> are <xref:System.IO.FileStream>, and <xref:System.IO.MemoryStream>.\"\n  syntax:\n    content: protected Stream ();\n    parameters: []\n  overload: System.IO.Stream.#ctor*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/Stream.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.IO.Stream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)\n  commentId: M:System.IO.Stream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)\n  id: BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)\n  parent: System.IO.Stream\n  langs:\n  - csharp\n  name: BeginRead(Byte[], Int32, Int32, AsyncCallback, Object)\n  nameWithType: Stream.BeginRead(Byte[], Int32, Int32, AsyncCallback, Object)\n  fullName: Stream.BeginRead(Byte[], Int32, Int32, AsyncCallback, Object)\n  type: Method\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.IO\n  summary: Begins an asynchronous read operation. (Consider using <xref href=\"System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32)\"></xref> instead.)\n  remarks: \"In the .NET Framework 4 and earlier versions, you have to use methods such as <xref:System.IO.Stream.BeginRead%2A> and <xref:System.IO.Stream.EndRead%2A> to implement asynchronous I/O operations. These methods are still available in the [!INCLUDE[net_v45](~/includes/net-v45-md.md)] to support legacy code; however, the new async methods, such as <xref:System.IO.Stream.ReadAsync%2A>, <xref:System.IO.Stream.WriteAsync%2A>, <xref:System.IO.Stream.CopyToAsync%2A>, and <xref:System.IO.Stream.FlushAsync%2A>, help you implement asynchronous I/O operations more easily.  \\n  \\n The default implementation of `BeginRead` on a stream calls the <xref:System.IO.Stream.Read%2A> method synchronously, which means that `Read` might block on some streams. However, instances of classes such as `FileStream` and `NetworkStream` fully support asynchronous operations if the instances have been opened asynchronously. Therefore, calls to `BeginRead` will not block on those streams. You can override `BeginRead` (by using async delegates, for example) to provide asynchronous behavior.  \\n  \\n Pass the `IAsyncResult` return value to the <xref:System.IO.Stream.EndRead%2A> method of the stream to determine how many bytes were read and to release operating system resources used for reading. <xref:System.IO.Stream.EndRead%2A> must be called once for every call to <xref:System.IO.Stream.BeginRead%2A>. You can do this either by using the same code that called `BeginRead` or in a callback passed to `BeginRead`.  \\n  \\n The current position in the stream is updated when the asynchronous read or write is issued, not when the I/O operation completes.  \\n  \\n Multiple simultaneous asynchronous requests render the request completion order uncertain.  \\n  \\n Use the <xref:System.IO.Stream.CanRead%2A> property to determine whether the current instance supports reading.  \\n  \\n If a stream is closed or you pass an invalid argument, exceptions are thrown immediately from `BeginRead`. Errors that occur during an asynchronous read request, such as a disk failure during the I/O request, occur on the thread pool thread and throw exceptions when calling `EndRead`.\"\n  syntax:\n    content: public virtual IAsyncResult BeginRead (byte[] buffer, int offset, int count, AsyncCallback callback, object state);\n    parameters:\n    - id: buffer\n      type: System.Byte[]\n      description: The buffer to read the data into.\n    - id: offset\n      type: System.Int32\n      description: The byte offset in <code>buffer</code> at which to begin writing data read from the stream.\n    - id: count\n      type: System.Int32\n      description: The maximum number of bytes to read.\n    - id: callback\n      type: System.AsyncCallback\n      description: An optional asynchronous callback, to be called when the read is complete.\n    - id: state\n      type: System.Object\n      description: A user-provided object that distinguishes this particular asynchronous read request from other requests.\n    return:\n      type: System.IAsyncResult\n      description: An <xref href=\"System.IAsyncResult\"></xref> that represents the asynchronous read, which could still be pending.\n  overload: System.IO.Stream.BeginRead*\n  exceptions:\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: Attempted an asynchronous read past the end of the stream, or a disk error occurs.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: One or more of the arguments is invalid.\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: Methods were called after the stream was closed.\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: The current `Stream` implementation does not support the read operation.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/Stream.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.IO.Stream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)\n  commentId: M:System.IO.Stream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)\n  id: BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)\n  parent: System.IO.Stream\n  langs:\n  - csharp\n  name: BeginWrite(Byte[], Int32, Int32, AsyncCallback, Object)\n  nameWithType: Stream.BeginWrite(Byte[], Int32, Int32, AsyncCallback, Object)\n  fullName: Stream.BeginWrite(Byte[], Int32, Int32, AsyncCallback, Object)\n  type: Method\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.IO\n  summary: Begins an asynchronous write operation. (Consider using <xref href=\"System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32)\"></xref> instead.)\n  remarks: \"In the .NET Framework 4 and earlier versions, you have to use methods such as <xref:System.IO.Stream.BeginWrite%2A> and <xref:System.IO.Stream.EndWrite%2A> to implement asynchronous I/O operations. These methods are still available in the [!INCLUDE[net_v45](~/includes/net-v45-md.md)] to support legacy code; however, the new async methods, such as <xref:System.IO.Stream.ReadAsync%2A>, <xref:System.IO.Stream.WriteAsync%2A>, <xref:System.IO.Stream.CopyToAsync%2A>, and <xref:System.IO.Stream.FlushAsync%2A>, help you implement asynchronous I/O operations more easily.  \\n  \\n The default implementation of `BeginWrite` on a stream calls the <xref:System.IO.Stream.Write%2A> method synchronously, which means that `Write` might block on some streams. However, instances of classes such as `FileStream` and `NetworkStream` fully support asynchronous operations if the instances have been opened asynchronously. Therefore, calls to `BeginWrite` will not block on those streams. You can override `BeginWrite` (by using async delegates, for example) to provide asynchronous behavior.  \\n  \\n Pass the `IAsyncResult` returned by the current method to <xref:System.IO.Stream.EndWrite%2A> to ensure that the write completes and frees resources appropriately. <xref:System.IO.Stream.EndWrite%2A> must be called once for every call to <xref:System.IO.Stream.BeginWrite%2A>. You can do this either by using the same code that called `BeginWrite` or in a callback passed to `BeginWrite`. If an error occurs during an asynchronous write, an exception will not be thrown until `EndWrite` is called with the `IAsyncResult` returned by this method.  \\n  \\n If a stream is writable, writing at the end of the stream expands the stream.  \\n  \\n The current position in the stream is updated when you issue the asynchronous read or write, not when the I/O operation completes. Multiple simultaneous asynchronous requests render the request completion order uncertain.  \\n  \\n Use the <xref:System.IO.Stream.CanWrite%2A> property to determine whether the current instance supports writing.  \\n  \\n If a stream is closed or you pass an invalid argument, exceptions are thrown immediately from `BeginWrite`. Errors that occur during an asynchronous write request, such as a disk failure during the I/O request, occur on the thread pool thread and throw exceptions when calling `EndWrite`.\"\n  syntax:\n    content: public virtual IAsyncResult BeginWrite (byte[] buffer, int offset, int count, AsyncCallback callback, object state);\n    parameters:\n    - id: buffer\n      type: System.Byte[]\n      description: The buffer to write data from.\n    - id: offset\n      type: System.Int32\n      description: The byte offset in <code>buffer</code> from which to begin writing.\n    - id: count\n      type: System.Int32\n      description: The maximum number of bytes to write.\n    - id: callback\n      type: System.AsyncCallback\n      description: An optional asynchronous callback, to be called when the write is complete.\n    - id: state\n      type: System.Object\n      description: A user-provided object that distinguishes this particular asynchronous write request from other requests.\n    return:\n      type: System.IAsyncResult\n      description: An `IAsyncResult` that represents the asynchronous write, which could still be pending.\n  overload: System.IO.Stream.BeginWrite*\n  exceptions:\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: Attempted an asynchronous write past the end of the stream, or a disk error occurs.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: One or more of the arguments is invalid.\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: Methods were called after the stream was closed.\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: The current `Stream` implementation does not support the write operation.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/Stream.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.IO.Stream.CanRead\n  commentId: P:System.IO.Stream.CanRead\n  id: CanRead\n  parent: System.IO.Stream\n  langs:\n  - csharp\n  name: CanRead\n  nameWithType: Stream.CanRead\n  fullName: Stream.CanRead\n  type: Property\n  assemblies:\n  - System.IO\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.IO\n  summary: When overridden in a derived class, gets a value indicating whether the current stream supports reading.\n  remarks: \"If a class derived from <xref:System.IO.Stream> does not support reading, calls to the <xref:System.IO.Stream.Read%2A>, <xref:System.IO.Stream.ReadByte%2A>, and <xref:System.IO.Stream.BeginRead%2A> methods throw a <xref:System.NotSupportedException>.  \\n  \\n If the stream is closed, this property returns `false`.\"\n  example:\n  - \"The following is an example of using the `CanRead` property.  \\n  \\n [!code-cpp[Classic FileStream.CanRead Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic FileStream.CanRead Example/CPP/source.cpp#1)]\\n [!code-csharp[Classic FileStream.CanRead Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic FileStream.CanRead Example/CS/source.cs#1)]\\n [!code-vb[Classic FileStream.CanRead Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic FileStream.CanRead Example/VB/source.vb#1)]\"\n  syntax:\n    content: public abstract bool CanRead { get; }\n    return:\n      type: System.Boolean\n      description: '`true` if the stream supports reading; otherwise, `false`.'\n  overload: System.IO.Stream.CanRead*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/Stream.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.IO.Stream.CanSeek\n  commentId: P:System.IO.Stream.CanSeek\n  id: CanSeek\n  parent: System.IO.Stream\n  langs:\n  - csharp\n  name: CanSeek\n  nameWithType: Stream.CanSeek\n  fullName: Stream.CanSeek\n  type: Property\n  assemblies:\n  - System.IO\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.IO\n  summary: When overridden in a derived class, gets a value indicating whether the current stream supports seeking.\n  remarks: \"If a class derived from <xref:System.IO.Stream> does not support seeking, calls to <xref:System.IO.Stream.Length%2A>, <xref:System.IO.Stream.SetLength%2A>, <xref:System.IO.Stream.Position%2A>, and <xref:System.IO.Stream.Seek%2A> throw a <xref:System.NotSupportedException>.  \\n  \\n If the stream is closed, this property returns `false`.\"\n  syntax:\n    content: public abstract bool CanSeek { get; }\n    return:\n      type: System.Boolean\n      description: '`true` if the stream supports seeking; otherwise, `false`.'\n  overload: System.IO.Stream.CanSeek*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/Stream.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.IO.Stream.CanTimeout\n  commentId: P:System.IO.Stream.CanTimeout\n  id: CanTimeout\n  parent: System.IO.Stream\n  langs:\n  - csharp\n  name: CanTimeout\n  nameWithType: Stream.CanTimeout\n  fullName: Stream.CanTimeout\n  type: Property\n  assemblies:\n  - System.IO\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.IO\n  summary: Gets a value that determines whether the current stream can time out.\n  remarks: The <xref:System.IO.Stream.CanTimeout%2A> property always returns `false`. Some stream implementations require different behavior, such as <xref:System.Net.Sockets.NetworkStream>, which times out if network connectivity is interrupted or lost. If you are implementing a stream that must be able to time out, this property should be overridden to return `true`.\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(false)]\n\n      public virtual bool CanTimeout { get; }\n    return:\n      type: System.Boolean\n      description: A value that determines whether the current stream can time out.\n  overload: System.IO.Stream.CanTimeout*\n  exceptions: []\n  attributes:\n  - type: System.Runtime.InteropServices.ComVisibleAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/Stream.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.IO.Stream.CanWrite\n  commentId: P:System.IO.Stream.CanWrite\n  id: CanWrite\n  parent: System.IO.Stream\n  langs:\n  - csharp\n  name: CanWrite\n  nameWithType: Stream.CanWrite\n  fullName: Stream.CanWrite\n  type: Property\n  assemblies:\n  - System.IO\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.IO\n  summary: When overridden in a derived class, gets a value indicating whether the current stream supports writing.\n  remarks: \"If a class derived from <xref:System.IO.Stream> does not support writing, a call to <xref:System.IO.Stream.Write%2A>, <xref:System.IO.Stream.BeginWrite%2A>, or <xref:System.IO.Stream.WriteByte%2A> throws a <xref:System.NotSupportedException>. In such cases, <xref:System.IO.Stream.Flush%2A> is typically implemented as an empty method to ensure full compatibility with other <xref:System.IO.Stream> types since it's valid to flush a read-only stream.   \\n  \\n If the stream is closed, this property returns `false`.\"\n  example:\n  - \"The following is an example of using the `CanWrite` property.  \\n  \\n [!code-cpp[Classic Stream.CanWrite Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Stream.CanWrite Example/CPP/source.cpp#1)]\\n [!code-csharp[Classic Stream.CanWrite Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Stream.CanWrite Example/CS/source.cs#1)]\\n [!code-vb[Classic Stream.CanWrite Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Stream.CanWrite Example/VB/source.vb#1)]\"\n  syntax:\n    content: public abstract bool CanWrite { get; }\n    return:\n      type: System.Boolean\n      description: '`true` if the stream supports writing; otherwise, `false`.'\n  overload: System.IO.Stream.CanWrite*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/Stream.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.IO.Stream.Close\n  commentId: M:System.IO.Stream.Close\n  id: Close\n  parent: System.IO.Stream\n  langs:\n  - csharp\n  name: Close()\n  nameWithType: Stream.Close()\n  fullName: Stream.Close()\n  type: Method\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.IO\n  summary: Closes the current stream and releases any resources (such as sockets and file handles) associated with the current stream. Instead of calling this method, ensure that the stream is properly disposed.\n  remarks: \"This method calls <xref:System.IO.Stream.Dispose%2A>, specifying `true` to release all resources. You do not have to specifically call the <xref:System.IO.Stream.Close%2A> method. Instead, ensure that every <xref:System.IO.Stream> object is properly disposed. You can declare <xref:System.IO.Stream> objects within a `using` block (or `Using` block in Visual Basic) to ensure that the stream and all of its resources are disposed, or you can explicitly call the <xref:System.IO.Stream.Dispose%2A> method.  \\n  \\n Flushing the stream will not flush its underlying encoder unless you explicitly call an implementation of <xref:System.IO.Stream.Flush%2A> or `Close`. Setting <xref:System.IO.StreamWriter.AutoFlush%2A> to `true` means that data will be flushed from the buffer to the stream, but the encoder state will not be flushed. This allows the encoder to keep its state (partial characters) so that it can encode the next block of characters correctly. This scenario affects UTF8 and UTF7 where certain characters can be encoded only after the encoder receives the adjacent character or characters.  \\n  \\n Attempts to manipulate the stream after the stream has been closed might throw an <xref:System.ObjectDisposedException>.\"\n  syntax:\n    content: public virtual void Close ();\n    parameters: []\n  overload: System.IO.Stream.Close*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/Stream.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.IO.Stream.CopyTo(System.IO.Stream,System.Int32)\n  commentId: M:System.IO.Stream.CopyTo(System.IO.Stream,System.Int32)\n  id: CopyTo(System.IO.Stream,System.Int32)\n  parent: System.IO.Stream\n  langs:\n  - csharp\n  name: CopyTo(Stream, Int32)\n  nameWithType: Stream.CopyTo(Stream, Int32)\n  fullName: Stream.CopyTo(Stream, Int32)\n  type: Method\n  assemblies:\n  - System.IO\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.IO\n  summary: Reads the bytes from the current stream and writes them to another stream, using a specified buffer size.\n  remarks: Copying begins at the current position in the current stream, and does not reset the position of the destination stream after the copy operation is complete.\n  syntax:\n    content: public void CopyTo (System.IO.Stream destination, int bufferSize);\n    parameters:\n    - id: destination\n      type: System.IO.Stream\n      description: The stream to which the contents of the current stream will be copied.\n    - id: bufferSize\n      type: System.Int32\n      description: The size of the buffer. This value must be greater than zero. The default size is 81920.\n  overload: System.IO.Stream.CopyTo*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>destination</code> is `null`.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>bufferSize</code> is negative or zero.\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: \"The current stream does not support reading.  \\n  \\n -or-  \\n  \\n <code>destination</code> does not support writing.\"\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: Either the current stream or <code>destination</code> were closed before the <xref href=\"System.IO.Stream.CopyTo(System.IO.Stream)\"></xref> method was called.\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: An I/O error occurred.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/Stream.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.IO.Stream.CopyTo(System.IO.Stream)\n  commentId: M:System.IO.Stream.CopyTo(System.IO.Stream)\n  id: CopyTo(System.IO.Stream)\n  parent: System.IO.Stream\n  langs:\n  - csharp\n  name: CopyTo(Stream)\n  nameWithType: Stream.CopyTo(Stream)\n  fullName: Stream.CopyTo(Stream)\n  type: Method\n  assemblies:\n  - System.IO\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.IO\n  summary: Reads the bytes from the current stream and writes them to another stream.\n  remarks: Copying begins at the current position in the current stream, and does not reset the position of the destination stream after the copy operation is complete.\n  example:\n  - \"The following example copies the contents of a <xref:System.IO.FileStream> to a <xref:System.IO.MemoryStream>.  \\n  \\n [!code-csharp[System.IO.Stream.CopyTo#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.io.stream.copyto/cs/program.cs#1)]\\n [!code-vb[System.IO.Stream.CopyTo#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.io.stream.copyto/vb/program.vb#1)]\"\n  syntax:\n    content: public void CopyTo (System.IO.Stream destination);\n    parameters:\n    - id: destination\n      type: System.IO.Stream\n      description: The stream to which the contents of the current stream will be copied.\n  overload: System.IO.Stream.CopyTo*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>destination</code> is `null`.\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: \"The current stream does not support reading.  \\n  \\n -or-  \\n  \\n <code>destination</code> does not support writing.\"\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: Either the current stream or <code>destination</code> were closed before the <xref href=\"System.IO.Stream.CopyTo(System.IO.Stream)\"></xref> method was called.\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: An I/O error occurred.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/Stream.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.IO.Stream.CopyToAsync(System.IO.Stream)\n  commentId: M:System.IO.Stream.CopyToAsync(System.IO.Stream)\n  id: CopyToAsync(System.IO.Stream)\n  parent: System.IO.Stream\n  langs:\n  - csharp\n  name: CopyToAsync(Stream)\n  nameWithType: Stream.CopyToAsync(Stream)\n  fullName: Stream.CopyToAsync(Stream)\n  type: Method\n  assemblies:\n  - System.IO\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.IO\n  summary: Asynchronously reads the bytes from the current stream and writes them to another stream.\n  remarks: \"The <xref:System.IO.Stream.CopyToAsync%2A> method enables you to perform resource-intensive I/O operations without blocking the main thread. This performance consideration is particularly important in a [!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)] app or [!INCLUDE[desktop_appname](~/includes/desktop-appname-md.md)] app where a time-consuming stream operation can block the UI thread and make your app appear as if it is not working. The async methods are used in conjunction with the `async` and `await` keywords in Visual Basic and C#.  \\n  \\n Copying begins at the current position in the current stream.\"\n  example:\n  - \"The following example demonstrates how to use two <xref:System.IO.FileStream> objects to asynchronously copy the files from one directory to another. The <xref:System.IO.FileStream> class derives from the <xref:System.IO.Stream> class.  Notice that the <xref:System.Web.UI.WebControls.Button.Click> event handler for the <xref:System.Windows.Controls.Button> control is marked with the `async` modifier because it calls an asynchronous method  \\n  \\n [!code-csharp[Asynchronous_File_IO_async#1](~/samples/snippets/csharp/VS_Snippets_CLR/Asynchronous_File_IO_async/cs/example.cs#1)]\\n [!code-vb[Asynchronous_File_IO_async#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Asynchronous_File_IO_async/vb/example.vb#1)]\"\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(false)]\n\n      public System.Threading.Tasks.Task CopyToAsync (System.IO.Stream destination);\n    parameters:\n    - id: destination\n      type: System.IO.Stream\n      description: The stream to which the contents of the current stream will be copied.\n    return:\n      type: System.Threading.Tasks.Task\n      description: A task that represents the asynchronous copy operation.\n  overload: System.IO.Stream.CopyToAsync*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>destination</code> is `null`.\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: Either the current stream or the destination stream is disposed.\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: The current stream does not support reading, or the destination stream does not support writing.\n  attributes:\n  - type: System.Runtime.InteropServices.ComVisibleAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/Stream.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.IO.Stream.CopyToAsync(System.IO.Stream,System.Int32)\n  commentId: M:System.IO.Stream.CopyToAsync(System.IO.Stream,System.Int32)\n  id: CopyToAsync(System.IO.Stream,System.Int32)\n  parent: System.IO.Stream\n  langs:\n  - csharp\n  name: CopyToAsync(Stream, Int32)\n  nameWithType: Stream.CopyToAsync(Stream, Int32)\n  fullName: Stream.CopyToAsync(Stream, Int32)\n  type: Method\n  assemblies:\n  - System.IO\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.IO\n  summary: Asynchronously reads the bytes from the current stream and writes them to another stream, using a specified buffer size.\n  remarks: \"The <xref:System.IO.Stream.CopyToAsync%2A> method enables you to perform resource-intensive I/O operations without blocking the main thread. This performance consideration is particularly important in a [!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)] app or [!INCLUDE[desktop_appname](~/includes/desktop-appname-md.md)] app where a time-consuming stream operation can block the UI thread and make your app appear as if it is not working. The async methods are used in conjunction with the `async` and `await` keywords in Visual Basic and C#.  \\n  \\n Copying begins at the current position in the current stream.  \\n  \\n For an example of copying between two streams, see the <xref:System.IO.Stream.CopyToAsync%28System.IO.Stream%29> overload.\"\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(false)]\n\n      public System.Threading.Tasks.Task CopyToAsync (System.IO.Stream destination, int bufferSize);\n    parameters:\n    - id: destination\n      type: System.IO.Stream\n      description: The stream to which the contents of the current stream will be copied.\n    - id: bufferSize\n      type: System.Int32\n      description: The size, in bytes, of the buffer. This value must be greater than zero. The default size is 81920.\n    return:\n      type: System.Threading.Tasks.Task\n      description: A task that represents the asynchronous copy operation.\n  overload: System.IO.Stream.CopyToAsync*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>destination</code> is `null`.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>buffersize</code> is negative or zero.\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: Either the current stream or the destination stream is disposed.\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: The current stream does not support reading, or the destination stream does not support writing.\n  attributes:\n  - type: System.Runtime.InteropServices.ComVisibleAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/Stream.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.IO.Stream.CopyToAsync(System.IO.Stream,System.Int32,System.Threading.CancellationToken)\n  commentId: M:System.IO.Stream.CopyToAsync(System.IO.Stream,System.Int32,System.Threading.CancellationToken)\n  id: CopyToAsync(System.IO.Stream,System.Int32,System.Threading.CancellationToken)\n  parent: System.IO.Stream\n  langs:\n  - csharp\n  name: CopyToAsync(Stream, Int32, CancellationToken)\n  nameWithType: Stream.CopyToAsync(Stream, Int32, CancellationToken)\n  fullName: Stream.CopyToAsync(Stream, Int32, CancellationToken)\n  type: Method\n  assemblies:\n  - System.IO\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.IO\n  summary: Asynchronously reads the bytes from the current stream and writes them to another stream, using a specified buffer size and cancellation token.\n  remarks: \"The <xref:System.IO.Stream.CopyToAsync%2A> method enables you to perform resource-intensive I/O operations without blocking the main thread. This performance consideration is particularly important in a [!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)] app or [!INCLUDE[desktop_appname](~/includes/desktop-appname-md.md)] app where a time-consuming stream operation can block the UI thread and make your app appear as if it is not working. The async methods are used in conjunction with the `async` and `await` keywords in Visual Basic and C#.  \\n  \\n If the operation is canceled before it completes, the returned task contains the <xref:System.Threading.Tasks.TaskStatus.Canceled> value for the <xref:System.Threading.Tasks.Task.Status%2A> property.  \\n  \\n Copying begins at the current position in the current stream.  \\n  \\n For an example of copying between two streams, see the <xref:System.IO.Stream.CopyToAsync%28System.IO.Stream%29> overload.\"\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(false)]\n\n      public virtual System.Threading.Tasks.Task CopyToAsync (System.IO.Stream destination, int bufferSize, System.Threading.CancellationToken cancellationToken);\n    parameters:\n    - id: destination\n      type: System.IO.Stream\n      description: The stream to which the contents of the current stream will be copied.\n    - id: bufferSize\n      type: System.Int32\n      description: The size, in bytes, of the buffer. This value must be greater than zero. The default size is 81920.\n    - id: cancellationToken\n      type: System.Threading.CancellationToken\n      description: The token to monitor for cancellation requests. The default value is <xref href=\"System.Threading.CancellationToken.None\"></xref>.\n    return:\n      type: System.Threading.Tasks.Task\n      description: A task that represents the asynchronous copy operation.\n  overload: System.IO.Stream.CopyToAsync*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>destination</code> is `null`.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>buffersize</code> is negative or zero.\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: Either the current stream or the destination stream is disposed.\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: The current stream does not support reading, or the destination stream does not support writing.\n  attributes:\n  - type: System.Runtime.InteropServices.ComVisibleAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/Stream.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.IO.Stream.CreateWaitHandle\n  commentId: M:System.IO.Stream.CreateWaitHandle\n  id: CreateWaitHandle\n  parent: System.IO.Stream\n  langs:\n  - csharp\n  name: CreateWaitHandle()\n  nameWithType: Stream.CreateWaitHandle()\n  fullName: Stream.CreateWaitHandle()\n  type: Method\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.IO\n  summary: Allocates a <xref href=\"System.Threading.WaitHandle\"></xref> object.\n  remarks: \"When called for the first time, the current method creates a `WaitHandle` object and returns it. On subsequent calls, `CreateWaitHandle` returns a reference to a new wait handle.  \\n  \\n Use this method if you implement the asynchronous methods and require a way of blocking in <xref:System.IO.Stream.EndRead%2A> or <xref:System.IO.Stream.EndWrite%2A> until the asynchronous operation is complete.\"\n  syntax:\n    content: >-\n      [System.Obsolete(\"CreateWaitHandle will be removed eventually.  Please use \"new ManualResetEvent(false)\" instead.\")]\n\n      protected virtual System.Threading.WaitHandle CreateWaitHandle ();\n    parameters: []\n    return:\n      type: System.Threading.WaitHandle\n      description: A reference to the allocated `WaitHandle`.\n  overload: System.IO.Stream.CreateWaitHandle*\n  exceptions: []\n  attributes:\n  - type: System.ObsoleteAttribute\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/Stream.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.IO.Stream.Dispose\n  commentId: M:System.IO.Stream.Dispose\n  id: Dispose\n  parent: System.IO.Stream\n  langs:\n  - csharp\n  name: Dispose()\n  nameWithType: Stream.Dispose()\n  fullName: Stream.Dispose()\n  type: Method\n  assemblies:\n  - System.IO\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.IO\n  summary: Releases all resources used by the <xref href=\"System.IO.Stream\"></xref>.\n  remarks: \"This method disposes the stream, by writing any changes to the backing store and closing the stream to release resources.  \\n  \\n Calling `Dispose` allows the resources used by the <xref:System.IO.Stream> to be reallocated for other purposes. For more information about `Dispose`, see [Cleaning Up Unmanaged Resources](~/docs/standard/garbage-collection/unmanaged.md).\"\n  syntax:\n    content: public void Dispose ();\n    parameters: []\n  overload: System.IO.Stream.Dispose*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/Stream.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.IO.Stream.Dispose(System.Boolean)\n  commentId: M:System.IO.Stream.Dispose(System.Boolean)\n  id: Dispose(System.Boolean)\n  parent: System.IO.Stream\n  langs:\n  - csharp\n  name: Dispose(Boolean)\n  nameWithType: Stream.Dispose(Boolean)\n  fullName: Stream.Dispose(Boolean)\n  type: Method\n  assemblies:\n  - System.IO\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.IO\n  summary: Releases the unmanaged resources used by the <xref href=\"System.IO.Stream\"></xref> and optionally releases the managed resources.\n  remarks: \"You should release all resources by specifying `true` for `disposing`. When `disposing` is `true`, the stream can also ensure data is flushed to the underlying buffer, and access other finalizable objects.  This may not be possible when called from a finalizer due a lack of ordering among finalizers.  \\n  \\n If your stream is using an operating system handle to communicate with its source, consider using a subclass of <xref:System.Runtime.InteropServices.SafeHandle> for this purpose.  \\n  \\n This method is called by the public <xref:System.ComponentModel.Component.Dispose%2A> method and the <xref:System.Object.Finalize%2A> method. <xref:System.ComponentModel.Component.Dispose%2A> invokes the protected <xref:System.IO.Stream.Dispose%2A> method with the `disposing` parameter set to `true`. <xref:System.Object.Finalize%2A> invokes <xref:System.IO.Stream.Dispose%2A> with `disposing` set to `false`.\"\n  syntax:\n    content: protected virtual void Dispose (bool disposing);\n    parameters:\n    - id: disposing\n      type: System.Boolean\n      description: '`true` to release both managed and unmanaged resources; `false` to release only unmanaged resources.'\n  overload: System.IO.Stream.Dispose*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/Stream.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.IO.Stream.EndRead(System.IAsyncResult)\n  commentId: M:System.IO.Stream.EndRead(System.IAsyncResult)\n  id: EndRead(System.IAsyncResult)\n  parent: System.IO.Stream\n  langs:\n  - csharp\n  name: EndRead(IAsyncResult)\n  nameWithType: Stream.EndRead(IAsyncResult)\n  fullName: Stream.EndRead(IAsyncResult)\n  type: Method\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.IO\n  summary: Waits for the pending asynchronous read to complete. (Consider using <xref href=\"System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32)\"></xref> instead.)\n  remarks: \"In the .NET Framework 4 and earlier versions, you have to use methods such as <xref:System.IO.Stream.BeginRead%2A> and <xref:System.IO.Stream.EndRead%2A> to implement asynchronous I/O operations. These methods are still available in the [!INCLUDE[net_v45](~/includes/net-v45-md.md)] to support legacy code; however, the new async methods, such as <xref:System.IO.Stream.ReadAsync%2A>, <xref:System.IO.Stream.WriteAsync%2A>, <xref:System.IO.Stream.CopyToAsync%2A>, and <xref:System.IO.Stream.FlushAsync%2A>, help you implement asynchronous I/O operations more easily.  \\n  \\n Call `EndRead` to determine how many bytes were read from the stream.  \\n  \\n `EndRead` can be called once on every <xref:System.IAsyncResult> from <xref:System.IO.Stream.BeginRead%2A>.  \\n  \\n This method blocks until the I/O operation has completed.\"\n  syntax:\n    content: public virtual int EndRead (IAsyncResult asyncResult);\n    parameters:\n    - id: asyncResult\n      type: System.IAsyncResult\n      description: The reference to the pending asynchronous request to finish.\n    return:\n      type: System.Int32\n      description: The number of bytes read from the stream, between zero (0) and the number of bytes you requested. Streams return zero (0) only at the end of the stream, otherwise, they should block until at least one byte is available.\n  overload: System.IO.Stream.EndRead*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>asyncResult</code> is `null`.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"A handle to the pending read operation is not available.  \\n  \\n -or-  \\n  \\n The pending operation does not support reading.\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: <code>asyncResult</code> did not originate from a <xref href=\"System.IO.Stream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)\"></xref> method on the current stream.\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: The stream is closed or an internal error has occurred.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/Stream.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.IO.Stream.EndWrite(System.IAsyncResult)\n  commentId: M:System.IO.Stream.EndWrite(System.IAsyncResult)\n  id: EndWrite(System.IAsyncResult)\n  parent: System.IO.Stream\n  langs:\n  - csharp\n  name: EndWrite(IAsyncResult)\n  nameWithType: Stream.EndWrite(IAsyncResult)\n  fullName: Stream.EndWrite(IAsyncResult)\n  type: Method\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.IO\n  summary: Ends an asynchronous write operation. (Consider using <xref href=\"System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32)\"></xref> instead.)\n  remarks: \"In the .NET Framework 4 and earlier versions, you have to use methods such as <xref:System.IO.Stream.BeginWrite%2A> and <xref:System.IO.Stream.EndWrite%2A> to implement asynchronous I/O operations. These methods are still available in the [!INCLUDE[net_v45](~/includes/net-v45-md.md)] to support legacy code; however, the new async methods, such as <xref:System.IO.Stream.ReadAsync%2A>, <xref:System.IO.Stream.WriteAsync%2A>, <xref:System.IO.Stream.CopyToAsync%2A>, and <xref:System.IO.Stream.FlushAsync%2A>, help you implement asynchronous I/O operations more easily.  \\n  \\n `EndWrite` must be called exactly once on every <xref:System.IAsyncResult> from <xref:System.IO.Stream.BeginWrite%2A>.  \\n  \\n This method blocks until the I/O operation has completed. Errors that occur during an asynchronous write request, such as a disk failure during the I/O request, occur on the thread pool thread and become visible upon a call to `EndWrite`. Exceptions thrown by the thread pool thread will not be visible when calling `EndWrite`.\"\n  syntax:\n    content: public virtual void EndWrite (IAsyncResult asyncResult);\n    parameters:\n    - id: asyncResult\n      type: System.IAsyncResult\n      description: A reference to the outstanding asynchronous I/O request.\n  overload: System.IO.Stream.EndWrite*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>asyncResult</code> is `null`.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"A handle to the pending write operation is not available.  \\n  \\n -or-  \\n  \\n The pending operation does not support writing.\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: <code>asyncResult</code> did not originate from a <xref href=\"System.IO.Stream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)\"></xref> method on the current stream.\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: The stream is closed or an internal error has occurred.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/Stream.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.IO.Stream.Flush\n  commentId: M:System.IO.Stream.Flush\n  id: Flush\n  parent: System.IO.Stream\n  langs:\n  - csharp\n  name: Flush()\n  nameWithType: Stream.Flush()\n  fullName: Stream.Flush()\n  type: Method\n  assemblies:\n  - System.IO\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.IO\n  summary: When overridden in a derived class, clears all buffers for this stream and causes any buffered data to be written to the underlying device.\n  remarks: \"Override `Flush` on streams that implement a buffer. Use this method to move any information from an underlying buffer to its destination, clear the buffer, or both. Depending upon the state of the object, you might have to modify the current position within the stream (for example, if the underlying stream supports seeking). For additional information see <xref:System.IO.Stream.CanSeek%2A>.  \\n  \\n In a class derived from <xref:System.IO.Stream> that doesn't support writing, <xref:System.IO.Stream.Flush%2A> is typically implemented as an empty method to ensure full compatibility with other <xref:System.IO.Stream> types since it's valid to flush a read-only stream.  \\n  \\n When using the <xref:System.IO.StreamWriter> or <xref:System.IO.BinaryWriter> class, do not flush the base <xref:System.IO.Stream> object. Instead, use the class's <xref:System.IO.Stream.Flush%2A> or <xref:System.IO.Stream.Close%2A> method, which makes sure that the data is flushed to the underlying stream first and then written to the file.\"\n  syntax:\n    content: public abstract void Flush ();\n    parameters: []\n  overload: System.IO.Stream.Flush*\n  exceptions:\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: An I/O error occurs.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/Stream.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.IO.Stream.FlushAsync\n  commentId: M:System.IO.Stream.FlushAsync\n  id: FlushAsync\n  parent: System.IO.Stream\n  langs:\n  - csharp\n  name: FlushAsync()\n  nameWithType: Stream.FlushAsync()\n  fullName: Stream.FlushAsync()\n  type: Method\n  assemblies:\n  - System.IO\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.IO\n  summary: Asynchronously clears all buffers for this stream and causes any buffered data to be written to the underlying device.\n  remarks: If a derived class, such as <xref:System.IO.Compression.DeflateStream> or <xref:System.IO.Compression.GZipStream>, does not flush the buffer in its implementation of the <xref:System.IO.Stream.Flush%2A> method, the <xref:System.IO.Stream.FlushAsync%2A> method will not flush the buffer.\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(false)]\n\n      public System.Threading.Tasks.Task FlushAsync ();\n    parameters: []\n    return:\n      type: System.Threading.Tasks.Task\n      description: A task that represents the asynchronous flush operation.\n  overload: System.IO.Stream.FlushAsync*\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The stream has been disposed.\n  attributes:\n  - type: System.Runtime.InteropServices.ComVisibleAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/Stream.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.IO.Stream.FlushAsync(System.Threading.CancellationToken)\n  commentId: M:System.IO.Stream.FlushAsync(System.Threading.CancellationToken)\n  id: FlushAsync(System.Threading.CancellationToken)\n  parent: System.IO.Stream\n  langs:\n  - csharp\n  name: FlushAsync(CancellationToken)\n  nameWithType: Stream.FlushAsync(CancellationToken)\n  fullName: Stream.FlushAsync(CancellationToken)\n  type: Method\n  assemblies:\n  - System.IO\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.IO\n  summary: Asynchronously clears all buffers for this stream, causes any buffered data to be written to the underlying device, and monitors cancellation requests.\n  remarks: \"If the operation is canceled before it completes, the returned task contains the <xref:System.Threading.Tasks.TaskStatus.Canceled> value for the <xref:System.Threading.Tasks.Task.Status%2A> property.  \\n  \\n If a derived class, such as <xref:System.IO.Compression.DeflateStream> or <xref:System.IO.Compression.GZipStream>, does not flush the buffer in its implementation of the <xref:System.IO.Stream.Flush%2A> method, the <xref:System.IO.Stream.FlushAsync%2A> method will not flush the buffer.\"\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(false)]\n\n      public virtual System.Threading.Tasks.Task FlushAsync (System.Threading.CancellationToken cancellationToken);\n    parameters:\n    - id: cancellationToken\n      type: System.Threading.CancellationToken\n      description: The token to monitor for cancellation requests. The default value is <xref href=\"System.Threading.CancellationToken.None\"></xref>.\n    return:\n      type: System.Threading.Tasks.Task\n      description: A task that represents the asynchronous flush operation.\n  overload: System.IO.Stream.FlushAsync*\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The stream has been disposed.\n  attributes:\n  - type: System.Runtime.InteropServices.ComVisibleAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/Stream.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.IO.Stream.Length\n  commentId: P:System.IO.Stream.Length\n  id: Length\n  parent: System.IO.Stream\n  langs:\n  - csharp\n  name: Length\n  nameWithType: Stream.Length\n  fullName: Stream.Length\n  type: Property\n  assemblies:\n  - System.IO\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.IO\n  summary: When overridden in a derived class, gets the length in bytes of the stream.\n  syntax:\n    content: public abstract long Length { get; }\n    return:\n      type: System.Int64\n      description: A long value representing the length of the stream in bytes.\n  overload: System.IO.Stream.Length*\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: A class derived from `Stream` does not support seeking.\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: Methods were called after the stream was closed.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/Stream.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.IO.Stream.Null\n  commentId: F:System.IO.Stream.Null\n  id: \"Null\"\n  parent: System.IO.Stream\n  langs:\n  - csharp\n  name: \"Null\"\n  nameWithType: Stream.Null\n  fullName: Stream.Null\n  type: Field\n  assemblies:\n  - System.IO\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.IO\n  summary: A `Stream` with no backing store.\n  remarks: Use `Null` to redirect output to a stream that will not consume any operating system resources. When the methods of `Stream` that provide writing are invoked on `Null`, the call simply returns, and no data is written. `Null` also implements a `Read` method that returns zero without reading data.\n  syntax:\n    content: public static readonly System.IO.Stream Null;\n    return:\n      type: System.IO.Stream\n      description: ''\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/Stream.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.IO.Stream.ObjectInvariant\n  commentId: M:System.IO.Stream.ObjectInvariant\n  id: ObjectInvariant\n  parent: System.IO.Stream\n  langs:\n  - csharp\n  name: ObjectInvariant()\n  nameWithType: Stream.ObjectInvariant()\n  fullName: Stream.ObjectInvariant()\n  type: Method\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.IO\n  summary: Provides support for a <xref href=\"System.Diagnostics.Contracts.Contract\"></xref>.\n  syntax:\n    content: >-\n      [System.Obsolete(\"Do not call or override this method.\")]\n\n      protected virtual void ObjectInvariant ();\n    parameters: []\n  overload: System.IO.Stream.ObjectInvariant*\n  exceptions: []\n  attributes:\n  - type: System.ObsoleteAttribute\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/Stream.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.IO.Stream.Position\n  commentId: P:System.IO.Stream.Position\n  id: Position\n  parent: System.IO.Stream\n  langs:\n  - csharp\n  name: Position\n  nameWithType: Stream.Position\n  fullName: Stream.Position\n  type: Property\n  assemblies:\n  - System.IO\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.IO\n  summary: When overridden in a derived class, gets or sets the position within the current stream.\n  remarks: \"The stream must support seeking to get or set the position. Use the <xref:System.IO.Stream.CanSeek%2A> property to determine whether the stream supports seeking.  \\n  \\n Seeking to any location beyond the length of the stream is supported.  \\n  \\n The `Position` property does not keep track of the number of bytes from the stream that have been consumed, skipped, or both.\"\n  syntax:\n    content: public abstract long Position { get; set; }\n    return:\n      type: System.Int64\n      description: The current position within the stream.\n  overload: System.IO.Stream.Position*\n  exceptions:\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: An I/O error occurs.\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: The stream does not support seeking.\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: Methods were called after the stream was closed.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/Stream.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.IO.Stream.Read(System.Byte[],System.Int32,System.Int32)\n  commentId: M:System.IO.Stream.Read(System.Byte[],System.Int32,System.Int32)\n  id: Read(System.Byte[],System.Int32,System.Int32)\n  parent: System.IO.Stream\n  langs:\n  - csharp\n  name: Read(Byte[], Int32, Int32)\n  nameWithType: Stream.Read(Byte[], Int32, Int32)\n  fullName: Stream.Read(Byte[], Int32, Int32)\n  type: Method\n  assemblies:\n  - System.IO\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.IO\n  summary: When overridden in a derived class, reads a sequence of bytes from the current stream and advances the position within the stream by the number of bytes read.\n  remarks: \"Use the <xref:System.IO.Stream.CanRead%2A> property to determine whether the current instance supports reading. Use the <xref:System.IO.Stream.ReadAsync%2A> method to read asynchronously from the current stream.  \\n  \\n Implementations of this method read a maximum of `count` bytes from the current stream and store them in `buffer` beginning at `offset`. The current position within the stream is advanced by the number of bytes read; however, if an exception occurs, the current position within the stream remains unchanged. Implementations return the number of bytes read. The implementation will block until at least one byte of data can be read, in the event that no data is available. <xref:System.IO.Stream.Read%2A>returns 0 only when there is no more data in the stream and no more is expected (such as a closed socket or end of file). An implementation is free to return fewer bytes than requested even if the end of the stream has not been reached.  \\n  \\n Use <xref:System.IO.BinaryReader> for reading primitive data types.\"\n  example:\n  - \"The following example shows how to use <xref:System.IO.Stream.Read%2A> to read a block of data.  \\n  \\n [!code-cpp[Classic Stream.Read Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Stream.Read Example/CPP/source.cpp#1)]\\n [!code-csharp[Classic Stream.Read Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Stream.Read Example/CS/source.cs#1)]\\n [!code-vb[Classic Stream.Read Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Stream.Read Example/VB/source.vb#1)]\"\n  syntax:\n    content: public abstract int Read (byte[] buffer, int offset, int count);\n    parameters:\n    - id: buffer\n      type: System.Byte[]\n      description: An array of bytes. When this method returns, the buffer contains the specified byte array with the values between <code>offset</code> and (<code>offset</code> + <code>count</code> - 1) replaced by the bytes read from the current source.\n    - id: offset\n      type: System.Int32\n      description: The zero-based byte offset in <code>buffer</code> at which to begin storing the data read from the current stream.\n    - id: count\n      type: System.Int32\n      description: The maximum number of bytes to be read from the current stream.\n    return:\n      type: System.Int32\n      description: The total number of bytes read into the buffer. This can be less than the number of bytes requested if that many bytes are not currently available, or zero (0) if the end of the stream has been reached.\n  overload: System.IO.Stream.Read*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The sum of <code>offset</code> and <code>count</code> is larger than the buffer length.\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>buffer</code> is `null`.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>offset</code> or <code>count</code> is negative.\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: An I/O error occurs.\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: The stream does not support reading.\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: Methods were called after the stream was closed.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/Stream.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32)\n  commentId: M:System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32)\n  id: ReadAsync(System.Byte[],System.Int32,System.Int32)\n  parent: System.IO.Stream\n  langs:\n  - csharp\n  name: ReadAsync(Byte[], Int32, Int32)\n  nameWithType: Stream.ReadAsync(Byte[], Int32, Int32)\n  fullName: Stream.ReadAsync(Byte[], Int32, Int32)\n  type: Method\n  assemblies:\n  - System.IO\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.IO\n  summary: Asynchronously reads a sequence of bytes from the current stream and advances the position within the stream by the number of bytes read.\n  remarks: \"The <xref:System.IO.Stream.ReadAsync%2A> method enables you to perform resource-intensive I/O operations without blocking the main thread. This performance consideration is particularly important in a [!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)] app or [!INCLUDE[desktop_appname](~/includes/desktop-appname-md.md)] app where a time-consuming stream operation can block the UI thread and make your app appear as if it is not working. The async methods are used in conjunction with the `async` and `await` keywords in Visual Basic and C#.  \\n  \\n Use the <xref:System.IO.Stream.CanRead%2A> property to determine whether the current instance supports reading.\"\n  example:\n  - \"The following example shows how to read from a file asynchronously. The example uses the <xref:System.IO.FileStream> class, which derives from the <xref:System.IO.Stream> class.  \\n  \\n [!code-csharp[Asynchronous_File_IO_async#4](~/samples/snippets/csharp/VS_Snippets_CLR/Asynchronous_File_IO_async/cs/example4.cs#4)]\\n [!code-vb[Asynchronous_File_IO_async#4](~/samples/snippets/visualbasic/VS_Snippets_CLR/Asynchronous_File_IO_async/vb/example4.vb#4)]\"\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(false)]\n\n      public System.Threading.Tasks.Task<int> ReadAsync (byte[] buffer, int offset, int count);\n    parameters:\n    - id: buffer\n      type: System.Byte[]\n      description: The buffer to write the data into.\n    - id: offset\n      type: System.Int32\n      description: The byte offset in <code>buffer</code> at which to begin writing data from the stream.\n    - id: count\n      type: System.Int32\n      description: The maximum number of bytes to read.\n    return:\n      type: System.Threading.Tasks.Task{System.Int32}\n      description: A task that represents the asynchronous read operation. The value of the <code>TResult</code> parameter contains the total number of bytes read into the buffer. The result value can be less than the number of bytes requested if the number of bytes currently available is less than the requested number, or it can be 0 (zero) if the end of the stream has been reached.\n  overload: System.IO.Stream.ReadAsync*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>buffer</code> is `null`.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>offset</code> or <code>count</code> is negative.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The sum of <code>offset</code> and <code>count</code> is larger than the buffer length.\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: The stream does not support reading.\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The stream has been disposed.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The stream is currently in use by a previous read operation.\n  attributes:\n  - type: System.Runtime.InteropServices.ComVisibleAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/Stream.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)\n  commentId: M:System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)\n  id: ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)\n  parent: System.IO.Stream\n  langs:\n  - csharp\n  name: ReadAsync(Byte[], Int32, Int32, CancellationToken)\n  nameWithType: Stream.ReadAsync(Byte[], Int32, Int32, CancellationToken)\n  fullName: Stream.ReadAsync(Byte[], Int32, Int32, CancellationToken)\n  type: Method\n  assemblies:\n  - System.IO\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.IO\n  summary: Asynchronously reads a sequence of bytes from the current stream, advances the position within the stream by the number of bytes read, and monitors cancellation requests.\n  remarks: \"The <xref:System.IO.Stream.ReadAsync%2A> method enables you to perform resource-intensive I/O operations without blocking the main thread. This performance consideration is particularly important in a [!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)] app or [!INCLUDE[desktop_appname](~/includes/desktop-appname-md.md)] app where a time-consuming stream operation can block the UI thread and make your app appear as if it is not working. The async methods are used in conjunction with the `async` and `await` keywords in Visual Basic and C#.  \\n  \\n Use the <xref:System.IO.Stream.CanRead%2A> property to determine whether the current instance supports reading.  \\n  \\n If the operation is canceled before it completes, the returned task contains the <xref:System.Threading.Tasks.TaskStatus.Canceled> value for the <xref:System.Threading.Tasks.Task.Status%2A> property.  \\n  \\n For an example, see the <xref:System.IO.Stream.ReadAsync%28System.Byte%5B%5D%2CSystem.Int32%2CSystem.Int32%29> overload.\"\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(false)]\n\n      public virtual System.Threading.Tasks.Task<int> ReadAsync (byte[] buffer, int offset, int count, System.Threading.CancellationToken cancellationToken);\n    parameters:\n    - id: buffer\n      type: System.Byte[]\n      description: The buffer to write the data into.\n    - id: offset\n      type: System.Int32\n      description: The byte offset in <code>buffer</code> at which to begin writing data from the stream.\n    - id: count\n      type: System.Int32\n      description: The maximum number of bytes to read.\n    - id: cancellationToken\n      type: System.Threading.CancellationToken\n      description: The token to monitor for cancellation requests. The default value is <xref href=\"System.Threading.CancellationToken.None\"></xref>.\n    return:\n      type: System.Threading.Tasks.Task{System.Int32}\n      description: A task that represents the asynchronous read operation. The value of the <code>TResult</code> parameter contains the total number of bytes read into the buffer. The result value can be less than the number of bytes requested if the number of bytes currently available is less than the requested number, or it can be 0 (zero) if the end of the stream has been reached.\n  overload: System.IO.Stream.ReadAsync*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>buffer</code> is `null`.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>offset</code> or <code>count</code> is negative.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The sum of <code>offset</code> and <code>count</code> is larger than the buffer length.\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: The stream does not support reading.\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The stream has been disposed.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The stream is currently in use by a previous read operation.\n  attributes:\n  - type: System.Runtime.InteropServices.ComVisibleAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/Stream.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.IO.Stream.ReadByte\n  commentId: M:System.IO.Stream.ReadByte\n  id: ReadByte\n  parent: System.IO.Stream\n  langs:\n  - csharp\n  name: ReadByte()\n  nameWithType: Stream.ReadByte()\n  fullName: Stream.ReadByte()\n  type: Method\n  assemblies:\n  - System.IO\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.IO\n  summary: Reads a byte from the stream and advances the position within the stream by one byte, or returns -1 if at the end of the stream.\n  remarks: \"Use the <xref:System.IO.Stream.CanRead%2A> property to determine whether the current instance supports reading.  \\n  \\n Attempts to manipulate the stream after the stream has been closed could throw an <xref:System.ObjectDisposedException>.\"\n  syntax:\n    content: public virtual int ReadByte ();\n    parameters: []\n    return:\n      type: System.Int32\n      description: The unsigned byte cast to an `Int32`, or -1 if at the end of the stream.\n  overload: System.IO.Stream.ReadByte*\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: The stream does not support reading.\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: Methods were called after the stream was closed.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/Stream.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.IO.Stream.ReadTimeout\n  commentId: P:System.IO.Stream.ReadTimeout\n  id: ReadTimeout\n  parent: System.IO.Stream\n  langs:\n  - csharp\n  name: ReadTimeout\n  nameWithType: Stream.ReadTimeout\n  fullName: Stream.ReadTimeout\n  type: Property\n  assemblies:\n  - System.IO\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.IO\n  summary: Gets or sets a value, in miliseconds, that determines how long the stream will attempt to read before timing out.\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(false)]\n\n      public virtual int ReadTimeout { get; set; }\n    return:\n      type: System.Int32\n      description: A value, in miliseconds, that determines how long the stream will attempt to read before timing out.\n  overload: System.IO.Stream.ReadTimeout*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The <xref href=\"System.IO.Stream.ReadTimeout\"></xref> method always throws an <xref href=\"System.InvalidOperationException\"></xref>.\n  attributes:\n  - type: System.Runtime.InteropServices.ComVisibleAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/Stream.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.IO.Stream.Seek(System.Int64,System.IO.SeekOrigin)\n  commentId: M:System.IO.Stream.Seek(System.Int64,System.IO.SeekOrigin)\n  id: Seek(System.Int64,System.IO.SeekOrigin)\n  parent: System.IO.Stream\n  langs:\n  - csharp\n  name: Seek(Int64, SeekOrigin)\n  nameWithType: Stream.Seek(Int64, SeekOrigin)\n  fullName: Stream.Seek(Int64, SeekOrigin)\n  type: Method\n  assemblies:\n  - System.IO\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.IO\n  summary: When overridden in a derived class, sets the position within the current stream.\n  remarks: \"Use the <xref:System.IO.Stream.CanSeek%2A> property to determine whether the current instance supports seeking.  \\n  \\n If `offset` is negative, the new position is required to precede the position specified by `origin` by the number of bytes specified by `offset`. If `offset` is zero (0), the new position is required to be the position specified by `origin`. If `offset` is positive, the new position is required to follow the position specified by `origin` by the number of bytes specified by `offset`.  \\n  \\n Classes derived from `Stream` that support seeking must override this method to provide the functionality described above.  \\n  \\n Seeking to any location beyond the length of the stream is supported.\"\n  syntax:\n    content: public abstract long Seek (long offset, System.IO.SeekOrigin origin);\n    parameters:\n    - id: offset\n      type: System.Int64\n      description: A byte offset relative to the <code>origin</code> parameter.\n    - id: origin\n      type: System.IO.SeekOrigin\n      description: A value of type <xref href=\"System.IO.SeekOrigin\"></xref> indicating the reference point used to obtain the new position.\n    return:\n      type: System.Int64\n      description: The new position within the current stream.\n  overload: System.IO.Stream.Seek*\n  exceptions:\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: An I/O error occurs.\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: The stream does not support seeking, such as if the stream is constructed from a pipe or console output.\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: Methods were called after the stream was closed.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/Stream.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.IO.Stream.SetLength(System.Int64)\n  commentId: M:System.IO.Stream.SetLength(System.Int64)\n  id: SetLength(System.Int64)\n  parent: System.IO.Stream\n  langs:\n  - csharp\n  name: SetLength(Int64)\n  nameWithType: Stream.SetLength(Int64)\n  fullName: Stream.SetLength(Int64)\n  type: Method\n  assemblies:\n  - System.IO\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.IO\n  summary: When overridden in a derived class, sets the length of the current stream.\n  remarks: \"If the specified value is less than the current length of the stream, the stream is truncated. If the specified value is larger than the current length of the stream, the stream is expanded. If the stream is expanded, the contents of the stream between the old and the new length are not defined.  \\n  \\n A stream must support both writing and seeking for `SetLength` to work.  \\n  \\n Use the <xref:System.IO.Stream.CanWrite%2A> property to determine whether the current instance supports writing, and the <xref:System.IO.Stream.CanSeek%2A> property to determine whether seeking is supported.\"\n  syntax:\n    content: public abstract void SetLength (long value);\n    parameters:\n    - id: value\n      type: System.Int64\n      description: The desired length of the current stream in bytes.\n  overload: System.IO.Stream.SetLength*\n  exceptions:\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: An I/O error occurs.\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: The stream does not support both writing and seeking, such as if the stream is constructed from a pipe or console output.\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: Methods were called after the stream was closed.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/Stream.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.IO.Stream.Synchronized(System.IO.Stream)\n  commentId: M:System.IO.Stream.Synchronized(System.IO.Stream)\n  id: Synchronized(System.IO.Stream)\n  parent: System.IO.Stream\n  langs:\n  - csharp\n  name: Synchronized(Stream)\n  nameWithType: Stream.Synchronized(Stream)\n  fullName: Stream.Synchronized(Stream)\n  type: Method\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.IO\n  summary: Creates a thread-safe (synchronized) wrapper around the specified <xref href=\"System.IO.Stream\"></xref> object.\n  remarks: This method returns a class that wraps the specified <xref:System.IO.Stream> object and restricts access to it from multiple threads. All access to the <xref:System.IO.Stream> object will be thread safe.\n  syntax:\n    content: public static System.IO.Stream Synchronized (System.IO.Stream stream);\n    parameters:\n    - id: stream\n      type: System.IO.Stream\n      description: The <xref href=\"System.IO.Stream\"></xref> object to synchronize.\n    return:\n      type: System.IO.Stream\n      description: A thread-safe <xref href=\"System.IO.Stream\"></xref> object.\n  overload: System.IO.Stream.Synchronized*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>stream</code> is `null`.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/Stream.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.IO.Stream.Write(System.Byte[],System.Int32,System.Int32)\n  commentId: M:System.IO.Stream.Write(System.Byte[],System.Int32,System.Int32)\n  id: Write(System.Byte[],System.Int32,System.Int32)\n  parent: System.IO.Stream\n  langs:\n  - csharp\n  name: Write(Byte[], Int32, Int32)\n  nameWithType: Stream.Write(Byte[], Int32, Int32)\n  fullName: Stream.Write(Byte[], Int32, Int32)\n  type: Method\n  assemblies:\n  - System.IO\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.IO\n  summary: When overridden in a derived class, writes a sequence of bytes to the current stream and advances the current position within this stream by the number of bytes written.\n  remarks: \"Use the <xref:System.IO.Stream.CanWrite%2A> property to determine whether the current instance supports writing. Use the <xref:System.IO.Stream.WriteAsync%2A> method to write asynchronously to the current stream.  \\n  \\n If the write operation is successful, the position within the stream advances by the number of bytes written. If an exception occurs, the position within the stream remains unchanged.\"\n  syntax:\n    content: public abstract void Write (byte[] buffer, int offset, int count);\n    parameters:\n    - id: buffer\n      type: System.Byte[]\n      description: An array of bytes. This method copies <code>count</code> bytes from <code>buffer</code> to the current stream.\n    - id: offset\n      type: System.Int32\n      description: The zero-based byte offset in <code>buffer</code> at which to begin copying bytes to the current stream.\n    - id: count\n      type: System.Int32\n      description: The number of bytes to be written to the current stream.\n  overload: System.IO.Stream.Write*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The sum of <code>offset</code> and <code>count</code> is greater than the buffer length.\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>buffer</code> is `null`.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>offset</code> or <code>count</code> is negative.\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: An I/O error occured, such as the specified file cannot be found.\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: The stream does not support writing.\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: <xref href=\"System.IO.Stream.Write(System.Byte[],System.Int32,System.Int32)\"></xref> was called after the stream was closed.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/Stream.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32)\n  commentId: M:System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32)\n  id: WriteAsync(System.Byte[],System.Int32,System.Int32)\n  parent: System.IO.Stream\n  langs:\n  - csharp\n  name: WriteAsync(Byte[], Int32, Int32)\n  nameWithType: Stream.WriteAsync(Byte[], Int32, Int32)\n  fullName: Stream.WriteAsync(Byte[], Int32, Int32)\n  type: Method\n  assemblies:\n  - System.IO\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.IO\n  summary: Asynchronously writes a sequence of bytes to the current stream and advances the current position within this stream by the number of bytes written.\n  remarks: \"The <xref:System.IO.Stream.WriteAsync%2A> method enables you to perform resource-intensive I/O operations without blocking the main thread. This performance consideration is particularly important in a [!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)] app or [!INCLUDE[desktop_appname](~/includes/desktop-appname-md.md)] app where a time-consuming stream operation can block the UI thread and make your app appear as if it is not working. The async methods are used in conjunction with the `async` and `await` keywords in Visual Basic and C#.  \\n  \\n Use the <xref:System.IO.Stream.CanWrite%2A> property to determine whether the current instance supports writing.\"\n  example:\n  - \"The following example shows how to write asynchronously to a file. The example uses the <xref:System.IO.FileStream> class, which derives from the <xref:System.IO.Stream> class.  \\n  \\n [!code-csharp[Asynchronous_File_IO_async#3](~/samples/snippets/csharp/VS_Snippets_CLR/Asynchronous_File_IO_async/cs/example3.cs#3)]\\n [!code-vb[Asynchronous_File_IO_async#3](~/samples/snippets/visualbasic/VS_Snippets_CLR/Asynchronous_File_IO_async/vb/example3.vb#3)]\"\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(false)]\n\n      public System.Threading.Tasks.Task WriteAsync (byte[] buffer, int offset, int count);\n    parameters:\n    - id: buffer\n      type: System.Byte[]\n      description: The buffer to write data from.\n    - id: offset\n      type: System.Int32\n      description: The zero-based byte offset in <code>buffer</code> from which to begin copying bytes to the stream.\n    - id: count\n      type: System.Int32\n      description: The maximum number of bytes to write.\n    return:\n      type: System.Threading.Tasks.Task\n      description: A task that represents the asynchronous write operation.\n  overload: System.IO.Stream.WriteAsync*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>buffer</code> is `null`.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>offset</code> or <code>count</code> is negative.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The sum of <code>offset</code> and <code>count</code> is larger than the buffer length.\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: The stream does not support writing.\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The stream has been disposed.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The stream is currently in use by a previous write operation.\n  attributes:\n  - type: System.Runtime.InteropServices.ComVisibleAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/Stream.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)\n  commentId: M:System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)\n  id: WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)\n  parent: System.IO.Stream\n  langs:\n  - csharp\n  name: WriteAsync(Byte[], Int32, Int32, CancellationToken)\n  nameWithType: Stream.WriteAsync(Byte[], Int32, Int32, CancellationToken)\n  fullName: Stream.WriteAsync(Byte[], Int32, Int32, CancellationToken)\n  type: Method\n  assemblies:\n  - System.IO\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.IO\n  summary: Asynchronously writes a sequence of bytes to the current stream, advances the current position within this stream by the number of bytes written, and monitors cancellation requests.\n  remarks: \"The <xref:System.IO.Stream.WriteAsync%2A> method enables you to perform resource-intensive I/O operations without blocking the main thread. This performance consideration is particularly important in a [!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)] app or [!INCLUDE[desktop_appname](~/includes/desktop-appname-md.md)] app where a time-consuming stream operation can block the UI thread and make your app appear as if it is not working. The async methods are used in conjunction with the `async` and `await` keywords in Visual Basic and C#.  \\n  \\n Use the <xref:System.IO.Stream.CanWrite%2A> property to determine whether the current instance supports writing.  \\n  \\n If the operation is canceled before it completes, the returned task contains the <xref:System.Threading.Tasks.TaskStatus.Canceled> value for the <xref:System.Threading.Tasks.Task.Status%2A> property.  \\n  \\n For an example, see the <xref:System.IO.Stream.WriteAsync%28System.Byte%5B%5D%2CSystem.Int32%2CSystem.Int32%29> overload.\"\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(false)]\n\n      public virtual System.Threading.Tasks.Task WriteAsync (byte[] buffer, int offset, int count, System.Threading.CancellationToken cancellationToken);\n    parameters:\n    - id: buffer\n      type: System.Byte[]\n      description: The buffer to write data from.\n    - id: offset\n      type: System.Int32\n      description: The zero-based byte offset in <code>buffer</code> from which to begin copying bytes to the stream.\n    - id: count\n      type: System.Int32\n      description: The maximum number of bytes to write.\n    - id: cancellationToken\n      type: System.Threading.CancellationToken\n      description: The token to monitor for cancellation requests. The default value is <xref href=\"System.Threading.CancellationToken.None\"></xref>.\n    return:\n      type: System.Threading.Tasks.Task\n      description: A task that represents the asynchronous write operation.\n  overload: System.IO.Stream.WriteAsync*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>buffer</code> is `null`.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>offset</code> or <code>count</code> is negative.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The sum of <code>offset</code> and <code>count</code> is larger than the buffer length.\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: The stream does not support writing.\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The stream has been disposed.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The stream is currently in use by a previous write operation.\n  attributes:\n  - type: System.Runtime.InteropServices.ComVisibleAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/Stream.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.IO.Stream.WriteByte(System.Byte)\n  commentId: M:System.IO.Stream.WriteByte(System.Byte)\n  id: WriteByte(System.Byte)\n  parent: System.IO.Stream\n  langs:\n  - csharp\n  name: WriteByte(Byte)\n  nameWithType: Stream.WriteByte(Byte)\n  fullName: Stream.WriteByte(Byte)\n  type: Method\n  assemblies:\n  - System.IO\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.IO\n  summary: Writes a byte to the current position in the stream and advances the position within the stream by one byte.\n  remarks: Use the <xref:System.IO.Stream.CanWrite%2A> property to determine whether the current instance supports writing.\n  syntax:\n    content: public virtual void WriteByte (byte value);\n    parameters:\n    - id: value\n      type: System.Byte\n      description: The byte to write to the stream.\n  overload: System.IO.Stream.WriteByte*\n  exceptions:\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: An I/O error occurs.\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: The stream does not support writing, or the stream is already closed.\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: Methods were called after the stream was closed.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/Stream.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.IO.Stream.WriteTimeout\n  commentId: P:System.IO.Stream.WriteTimeout\n  id: WriteTimeout\n  parent: System.IO.Stream\n  langs:\n  - csharp\n  name: WriteTimeout\n  nameWithType: Stream.WriteTimeout\n  fullName: Stream.WriteTimeout\n  type: Property\n  assemblies:\n  - System.IO\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.IO\n  summary: Gets or sets a value, in miliseconds, that determines how long the stream will attempt to write before timing out.\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(false)]\n\n      public virtual int WriteTimeout { get; set; }\n    return:\n      type: System.Int32\n      description: A value, in miliseconds, that determines how long the stream will attempt to write before timing out.\n  overload: System.IO.Stream.WriteTimeout*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The <xref href=\"System.IO.Stream.WriteTimeout\"></xref> method always throws an <xref href=\"System.InvalidOperationException\"></xref>.\n  attributes:\n  - type: System.Runtime.InteropServices.ComVisibleAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/Stream.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\nreferences:\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.IO.IOException\n  parent: System.IO\n  isExternal: false\n  name: IOException\n  nameWithType: IOException\n  fullName: System.IO.IOException\n- uid: System.ArgumentException\n  parent: System\n  isExternal: false\n  name: ArgumentException\n  nameWithType: ArgumentException\n  fullName: System.ArgumentException\n- uid: System.ObjectDisposedException\n  parent: System\n  isExternal: false\n  name: ObjectDisposedException\n  nameWithType: ObjectDisposedException\n  fullName: System.ObjectDisposedException\n- uid: System.NotSupportedException\n  parent: System\n  isExternal: false\n  name: NotSupportedException\n  nameWithType: NotSupportedException\n  fullName: System.NotSupportedException\n- uid: System.ArgumentNullException\n  parent: System\n  isExternal: false\n  name: ArgumentNullException\n  nameWithType: ArgumentNullException\n  fullName: System.ArgumentNullException\n- uid: System.ArgumentOutOfRangeException\n  parent: System\n  isExternal: false\n  name: ArgumentOutOfRangeException\n  nameWithType: ArgumentOutOfRangeException\n  fullName: System.ArgumentOutOfRangeException\n- uid: System.InvalidOperationException\n  parent: System\n  isExternal: false\n  name: InvalidOperationException\n  nameWithType: InvalidOperationException\n  fullName: System.InvalidOperationException\n- uid: System.IO.Stream.#ctor\n  parent: System.IO.Stream\n  isExternal: false\n  name: Stream()\n  nameWithType: Stream.Stream()\n  fullName: Stream.Stream()\n- uid: System.IO.Stream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)\n  parent: System.IO.Stream\n  isExternal: false\n  name: BeginRead(Byte[], Int32, Int32, AsyncCallback, Object)\n  nameWithType: Stream.BeginRead(Byte[], Int32, Int32, AsyncCallback, Object)\n  fullName: Stream.BeginRead(Byte[], Int32, Int32, AsyncCallback, Object)\n- uid: System.IAsyncResult\n  parent: System\n  isExternal: false\n  name: IAsyncResult\n  nameWithType: IAsyncResult\n  fullName: System.IAsyncResult\n- uid: System.Byte\n  name: Byte\n  nameWithType: Byte\n  fullName: System.Byte\n- uid: System.Byte[]\n  parent: System\n  isExternal: false\n  name: Byte[]\n  nameWithType: Byte[]\n  fullName: System.Byte[]\n  spec.csharp:\n  - uid: System.Byte\n    name: Byte\n    nameWithType: Byte\n    fullName: System.Byte\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.AsyncCallback\n  parent: System\n  isExternal: false\n  name: AsyncCallback\n  nameWithType: AsyncCallback\n  fullName: System.AsyncCallback\n- uid: System.IO.Stream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)\n  parent: System.IO.Stream\n  isExternal: false\n  name: BeginWrite(Byte[], Int32, Int32, AsyncCallback, Object)\n  nameWithType: Stream.BeginWrite(Byte[], Int32, Int32, AsyncCallback, Object)\n  fullName: Stream.BeginWrite(Byte[], Int32, Int32, AsyncCallback, Object)\n- uid: System.IO.Stream.CanRead\n  parent: System.IO.Stream\n  isExternal: false\n  name: CanRead\n  nameWithType: Stream.CanRead\n  fullName: Stream.CanRead\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.IO.Stream.CanSeek\n  parent: System.IO.Stream\n  isExternal: false\n  name: CanSeek\n  nameWithType: Stream.CanSeek\n  fullName: Stream.CanSeek\n- uid: System.IO.Stream.CanTimeout\n  parent: System.IO.Stream\n  isExternal: false\n  name: CanTimeout\n  nameWithType: Stream.CanTimeout\n  fullName: Stream.CanTimeout\n- uid: System.IO.Stream.CanWrite\n  parent: System.IO.Stream\n  isExternal: false\n  name: CanWrite\n  nameWithType: Stream.CanWrite\n  fullName: Stream.CanWrite\n- uid: System.IO.Stream.Close\n  parent: System.IO.Stream\n  isExternal: false\n  name: Close()\n  nameWithType: Stream.Close()\n  fullName: Stream.Close()\n- uid: System.IO.Stream.CopyTo(System.IO.Stream,System.Int32)\n  parent: System.IO.Stream\n  isExternal: false\n  name: CopyTo(Stream, Int32)\n  nameWithType: Stream.CopyTo(Stream, Int32)\n  fullName: Stream.CopyTo(Stream, Int32)\n- uid: System.IO.Stream\n  parent: System.IO\n  isExternal: false\n  name: Stream\n  nameWithType: Stream\n  fullName: System.IO.Stream\n- uid: System.IO.Stream.CopyTo(System.IO.Stream)\n  parent: System.IO.Stream\n  isExternal: false\n  name: CopyTo(Stream)\n  nameWithType: Stream.CopyTo(Stream)\n  fullName: Stream.CopyTo(Stream)\n- uid: System.IO.Stream.CopyToAsync(System.IO.Stream)\n  parent: System.IO.Stream\n  isExternal: false\n  name: CopyToAsync(Stream)\n  nameWithType: Stream.CopyToAsync(Stream)\n  fullName: Stream.CopyToAsync(Stream)\n- uid: System.Threading.Tasks.Task\n  parent: System.Threading.Tasks\n  isExternal: false\n  name: Task\n  nameWithType: Task\n  fullName: System.Threading.Tasks.Task\n- uid: System.IO.Stream.CopyToAsync(System.IO.Stream,System.Int32)\n  parent: System.IO.Stream\n  isExternal: false\n  name: CopyToAsync(Stream, Int32)\n  nameWithType: Stream.CopyToAsync(Stream, Int32)\n  fullName: Stream.CopyToAsync(Stream, Int32)\n- uid: System.IO.Stream.CopyToAsync(System.IO.Stream,System.Int32,System.Threading.CancellationToken)\n  parent: System.IO.Stream\n  isExternal: false\n  name: CopyToAsync(Stream, Int32, CancellationToken)\n  nameWithType: Stream.CopyToAsync(Stream, Int32, CancellationToken)\n  fullName: Stream.CopyToAsync(Stream, Int32, CancellationToken)\n- uid: System.Threading.CancellationToken\n  parent: System.Threading\n  isExternal: false\n  name: CancellationToken\n  nameWithType: CancellationToken\n  fullName: System.Threading.CancellationToken\n- uid: System.IO.Stream.CreateWaitHandle\n  parent: System.IO.Stream\n  isExternal: false\n  name: CreateWaitHandle()\n  nameWithType: Stream.CreateWaitHandle()\n  fullName: Stream.CreateWaitHandle()\n- uid: System.Threading.WaitHandle\n  parent: System.Threading\n  isExternal: false\n  name: WaitHandle\n  nameWithType: WaitHandle\n  fullName: System.Threading.WaitHandle\n- uid: System.IO.Stream.Dispose\n  parent: System.IO.Stream\n  isExternal: false\n  name: Dispose()\n  nameWithType: Stream.Dispose()\n  fullName: Stream.Dispose()\n- uid: System.IO.Stream.Dispose(System.Boolean)\n  parent: System.IO.Stream\n  isExternal: false\n  name: Dispose(Boolean)\n  nameWithType: Stream.Dispose(Boolean)\n  fullName: Stream.Dispose(Boolean)\n- uid: System.IO.Stream.EndRead(System.IAsyncResult)\n  parent: System.IO.Stream\n  isExternal: false\n  name: EndRead(IAsyncResult)\n  nameWithType: Stream.EndRead(IAsyncResult)\n  fullName: Stream.EndRead(IAsyncResult)\n- uid: System.IO.Stream.EndWrite(System.IAsyncResult)\n  parent: System.IO.Stream\n  isExternal: false\n  name: EndWrite(IAsyncResult)\n  nameWithType: Stream.EndWrite(IAsyncResult)\n  fullName: Stream.EndWrite(IAsyncResult)\n- uid: System.IO.Stream.Flush\n  parent: System.IO.Stream\n  isExternal: false\n  name: Flush()\n  nameWithType: Stream.Flush()\n  fullName: Stream.Flush()\n- uid: System.IO.Stream.FlushAsync\n  parent: System.IO.Stream\n  isExternal: false\n  name: FlushAsync()\n  nameWithType: Stream.FlushAsync()\n  fullName: Stream.FlushAsync()\n- uid: System.IO.Stream.FlushAsync(System.Threading.CancellationToken)\n  parent: System.IO.Stream\n  isExternal: false\n  name: FlushAsync(CancellationToken)\n  nameWithType: Stream.FlushAsync(CancellationToken)\n  fullName: Stream.FlushAsync(CancellationToken)\n- uid: System.IO.Stream.Length\n  parent: System.IO.Stream\n  isExternal: false\n  name: Length\n  nameWithType: Stream.Length\n  fullName: Stream.Length\n- uid: System.Int64\n  parent: System\n  isExternal: false\n  name: Int64\n  nameWithType: Int64\n  fullName: System.Int64\n- uid: System.IO.Stream.Null\n  parent: System.IO.Stream\n  isExternal: false\n  name: \"Null\"\n  nameWithType: Stream.Null\n  fullName: Stream.Null\n- uid: System.IO.Stream.ObjectInvariant\n  parent: System.IO.Stream\n  isExternal: false\n  name: ObjectInvariant()\n  nameWithType: Stream.ObjectInvariant()\n  fullName: Stream.ObjectInvariant()\n- uid: System.IO.Stream.Position\n  parent: System.IO.Stream\n  isExternal: false\n  name: Position\n  nameWithType: Stream.Position\n  fullName: Stream.Position\n- uid: System.IO.Stream.Read(System.Byte[],System.Int32,System.Int32)\n  parent: System.IO.Stream\n  isExternal: false\n  name: Read(Byte[], Int32, Int32)\n  nameWithType: Stream.Read(Byte[], Int32, Int32)\n  fullName: Stream.Read(Byte[], Int32, Int32)\n- uid: System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32)\n  parent: System.IO.Stream\n  isExternal: false\n  name: ReadAsync(Byte[], Int32, Int32)\n  nameWithType: Stream.ReadAsync(Byte[], Int32, Int32)\n  fullName: Stream.ReadAsync(Byte[], Int32, Int32)\n- uid: System.Threading.Tasks.Task`1\n  name: Task<TResult>\n  nameWithType: Task<TResult>\n  fullName: System.Threading.Tasks.Task<TResult>\n- uid: System.Threading.Tasks.Task{System.Int32}\n  parent: System.Threading.Tasks\n  isExternal: false\n  name: Task<Int32>\n  nameWithType: Task<Int32>\n  fullName: System.Threading.Tasks.Task<System.Int32>\n  spec.csharp:\n  - uid: System.Threading.Tasks.Task`1\n    name: Task\n    nameWithType: Task\n    fullName: System.Threading.Tasks.Task\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Int32\n    name: Int32\n    nameWithType: Int32\n    fullName: System.Int32\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)\n  parent: System.IO.Stream\n  isExternal: false\n  name: ReadAsync(Byte[], Int32, Int32, CancellationToken)\n  nameWithType: Stream.ReadAsync(Byte[], Int32, Int32, CancellationToken)\n  fullName: Stream.ReadAsync(Byte[], Int32, Int32, CancellationToken)\n- uid: System.IO.Stream.ReadByte\n  parent: System.IO.Stream\n  isExternal: false\n  name: ReadByte()\n  nameWithType: Stream.ReadByte()\n  fullName: Stream.ReadByte()\n- uid: System.IO.Stream.ReadTimeout\n  parent: System.IO.Stream\n  isExternal: false\n  name: ReadTimeout\n  nameWithType: Stream.ReadTimeout\n  fullName: Stream.ReadTimeout\n- uid: System.IO.Stream.Seek(System.Int64,System.IO.SeekOrigin)\n  parent: System.IO.Stream\n  isExternal: false\n  name: Seek(Int64, SeekOrigin)\n  nameWithType: Stream.Seek(Int64, SeekOrigin)\n  fullName: Stream.Seek(Int64, SeekOrigin)\n- uid: System.IO.SeekOrigin\n  parent: System.IO\n  isExternal: false\n  name: SeekOrigin\n  nameWithType: SeekOrigin\n  fullName: System.IO.SeekOrigin\n- uid: System.IO.Stream.SetLength(System.Int64)\n  parent: System.IO.Stream\n  isExternal: false\n  name: SetLength(Int64)\n  nameWithType: Stream.SetLength(Int64)\n  fullName: Stream.SetLength(Int64)\n- uid: System.IO.Stream.Synchronized(System.IO.Stream)\n  parent: System.IO.Stream\n  isExternal: false\n  name: Synchronized(Stream)\n  nameWithType: Stream.Synchronized(Stream)\n  fullName: Stream.Synchronized(Stream)\n- uid: System.IO.Stream.Write(System.Byte[],System.Int32,System.Int32)\n  parent: System.IO.Stream\n  isExternal: false\n  name: Write(Byte[], Int32, Int32)\n  nameWithType: Stream.Write(Byte[], Int32, Int32)\n  fullName: Stream.Write(Byte[], Int32, Int32)\n- uid: System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32)\n  parent: System.IO.Stream\n  isExternal: false\n  name: WriteAsync(Byte[], Int32, Int32)\n  nameWithType: Stream.WriteAsync(Byte[], Int32, Int32)\n  fullName: Stream.WriteAsync(Byte[], Int32, Int32)\n- uid: System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)\n  parent: System.IO.Stream\n  isExternal: false\n  name: WriteAsync(Byte[], Int32, Int32, CancellationToken)\n  nameWithType: Stream.WriteAsync(Byte[], Int32, Int32, CancellationToken)\n  fullName: Stream.WriteAsync(Byte[], Int32, Int32, CancellationToken)\n- uid: System.IO.Stream.WriteByte(System.Byte)\n  parent: System.IO.Stream\n  isExternal: false\n  name: WriteByte(Byte)\n  nameWithType: Stream.WriteByte(Byte)\n  fullName: Stream.WriteByte(Byte)\n- uid: System.IO.Stream.WriteTimeout\n  parent: System.IO.Stream\n  isExternal: false\n  name: WriteTimeout\n  nameWithType: Stream.WriteTimeout\n  fullName: Stream.WriteTimeout\n- uid: System.IO.Stream.#ctor*\n  parent: System.IO.Stream\n  isExternal: false\n  name: Stream\n  nameWithType: Stream.Stream\n  fullName: Stream.Stream\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/Stream.xml\n- uid: System.IO.Stream.BeginRead*\n  parent: System.IO.Stream\n  isExternal: false\n  name: BeginRead\n  nameWithType: Stream.BeginRead\n  fullName: Stream.BeginRead\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/Stream.xml\n- uid: System.IO.Stream.BeginWrite*\n  parent: System.IO.Stream\n  isExternal: false\n  name: BeginWrite\n  nameWithType: Stream.BeginWrite\n  fullName: Stream.BeginWrite\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/Stream.xml\n- uid: System.IO.Stream.CanRead*\n  parent: System.IO.Stream\n  isExternal: false\n  name: CanRead\n  nameWithType: Stream.CanRead\n  fullName: Stream.CanRead\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/Stream.xml\n- uid: System.IO.Stream.CanSeek*\n  parent: System.IO.Stream\n  isExternal: false\n  name: CanSeek\n  nameWithType: Stream.CanSeek\n  fullName: Stream.CanSeek\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/Stream.xml\n- uid: System.IO.Stream.CanTimeout*\n  parent: System.IO.Stream\n  isExternal: false\n  name: CanTimeout\n  nameWithType: Stream.CanTimeout\n  fullName: Stream.CanTimeout\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/Stream.xml\n- uid: System.IO.Stream.CanWrite*\n  parent: System.IO.Stream\n  isExternal: false\n  name: CanWrite\n  nameWithType: Stream.CanWrite\n  fullName: Stream.CanWrite\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/Stream.xml\n- uid: System.IO.Stream.Close*\n  parent: System.IO.Stream\n  isExternal: false\n  name: Close\n  nameWithType: Stream.Close\n  fullName: Stream.Close\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/Stream.xml\n- uid: System.IO.Stream.CopyTo*\n  parent: System.IO.Stream\n  isExternal: false\n  name: CopyTo\n  nameWithType: Stream.CopyTo\n  fullName: Stream.CopyTo\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/Stream.xml\n- uid: System.IO.Stream.CopyToAsync*\n  parent: System.IO.Stream\n  isExternal: false\n  name: CopyToAsync\n  nameWithType: Stream.CopyToAsync\n  fullName: Stream.CopyToAsync\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/Stream.xml\n- uid: System.IO.Stream.CreateWaitHandle*\n  parent: System.IO.Stream\n  isExternal: false\n  name: CreateWaitHandle\n  nameWithType: Stream.CreateWaitHandle\n  fullName: Stream.CreateWaitHandle\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/Stream.xml\n- uid: System.IO.Stream.Dispose*\n  parent: System.IO.Stream\n  isExternal: false\n  name: Dispose\n  nameWithType: Stream.Dispose\n  fullName: Stream.Dispose\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/Stream.xml\n- uid: System.IO.Stream.EndRead*\n  parent: System.IO.Stream\n  isExternal: false\n  name: EndRead\n  nameWithType: Stream.EndRead\n  fullName: Stream.EndRead\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/Stream.xml\n- uid: System.IO.Stream.EndWrite*\n  parent: System.IO.Stream\n  isExternal: false\n  name: EndWrite\n  nameWithType: Stream.EndWrite\n  fullName: Stream.EndWrite\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/Stream.xml\n- uid: System.IO.Stream.Flush*\n  parent: System.IO.Stream\n  isExternal: false\n  name: Flush\n  nameWithType: Stream.Flush\n  fullName: Stream.Flush\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/Stream.xml\n- uid: System.IO.Stream.FlushAsync*\n  parent: System.IO.Stream\n  isExternal: false\n  name: FlushAsync\n  nameWithType: Stream.FlushAsync\n  fullName: Stream.FlushAsync\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/Stream.xml\n- uid: System.IO.Stream.Length*\n  parent: System.IO.Stream\n  isExternal: false\n  name: Length\n  nameWithType: Stream.Length\n  fullName: Stream.Length\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/Stream.xml\n- uid: System.IO.Stream.ObjectInvariant*\n  parent: System.IO.Stream\n  isExternal: false\n  name: ObjectInvariant\n  nameWithType: Stream.ObjectInvariant\n  fullName: Stream.ObjectInvariant\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/Stream.xml\n- uid: System.IO.Stream.Position*\n  parent: System.IO.Stream\n  isExternal: false\n  name: Position\n  nameWithType: Stream.Position\n  fullName: Stream.Position\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/Stream.xml\n- uid: System.IO.Stream.Read*\n  parent: System.IO.Stream\n  isExternal: false\n  name: Read\n  nameWithType: Stream.Read\n  fullName: Stream.Read\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/Stream.xml\n- uid: System.IO.Stream.ReadAsync*\n  parent: System.IO.Stream\n  isExternal: false\n  name: ReadAsync\n  nameWithType: Stream.ReadAsync\n  fullName: Stream.ReadAsync\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/Stream.xml\n- uid: System.IO.Stream.ReadByte*\n  parent: System.IO.Stream\n  isExternal: false\n  name: ReadByte\n  nameWithType: Stream.ReadByte\n  fullName: Stream.ReadByte\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/Stream.xml\n- uid: System.IO.Stream.ReadTimeout*\n  parent: System.IO.Stream\n  isExternal: false\n  name: ReadTimeout\n  nameWithType: Stream.ReadTimeout\n  fullName: Stream.ReadTimeout\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/Stream.xml\n- uid: System.IO.Stream.Seek*\n  parent: System.IO.Stream\n  isExternal: false\n  name: Seek\n  nameWithType: Stream.Seek\n  fullName: Stream.Seek\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/Stream.xml\n- uid: System.IO.Stream.SetLength*\n  parent: System.IO.Stream\n  isExternal: false\n  name: SetLength\n  nameWithType: Stream.SetLength\n  fullName: Stream.SetLength\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/Stream.xml\n- uid: System.IO.Stream.Synchronized*\n  parent: System.IO.Stream\n  isExternal: false\n  name: Synchronized\n  nameWithType: Stream.Synchronized\n  fullName: Stream.Synchronized\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/Stream.xml\n- uid: System.IO.Stream.Write*\n  parent: System.IO.Stream\n  isExternal: false\n  name: Write\n  nameWithType: Stream.Write\n  fullName: Stream.Write\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/Stream.xml\n- uid: System.IO.Stream.WriteAsync*\n  parent: System.IO.Stream\n  isExternal: false\n  name: WriteAsync\n  nameWithType: Stream.WriteAsync\n  fullName: Stream.WriteAsync\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/Stream.xml\n- uid: System.IO.Stream.WriteByte*\n  parent: System.IO.Stream\n  isExternal: false\n  name: WriteByte\n  nameWithType: Stream.WriteByte\n  fullName: Stream.WriteByte\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/Stream.xml\n- uid: System.IO.Stream.WriteTimeout*\n  parent: System.IO.Stream\n  isExternal: false\n  name: WriteTimeout\n  nameWithType: Stream.WriteTimeout\n  fullName: Stream.WriteTimeout\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/Stream.xml\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: Object.Equals(Object)\n  fullName: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: Object.GetHashCode()\n  fullName: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: false\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: false\n  name: ToString()\n  nameWithType: Object.ToString()\n  fullName: Object.ToString()\n- uid: System.IDisposable\n  parent: System\n  isExternal: false\n  name: IDisposable\n  nameWithType: IDisposable\n  fullName: System.IDisposable\n"}