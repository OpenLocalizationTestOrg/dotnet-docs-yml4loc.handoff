{"nodes":[{"content":"Specifies the formula used to calculate the <xref href=\"System.Diagnostics.PerformanceCounter.NextValue\"></xref> method for a <xref href=\"System.Diagnostics.PerformanceCounter\"></xref> instance.","nodes":[{"pos":[0,194],"content":"Specifies the formula used to calculate the <ph id=\"ph1\">&lt;xref href=\"System.Diagnostics.PerformanceCounter.NextValue\"&gt;&lt;/xref&gt;</ph> method for a <ph id=\"ph2\">&lt;xref href=\"System.Diagnostics.PerformanceCounter\"&gt;&lt;/xref&gt;</ph> instance.","source":"Specifies the formula used to calculate the <xref href=\"System.Diagnostics.PerformanceCounter.NextValue\"></xref> method for a <xref href=\"System.Diagnostics.PerformanceCounter\"></xref> instance."}],"pos":[2221,2416],"yaml":true},{"content":"Some counter types represent raw data, while others represent calculated values that are based on one or more counter samples. The following categories classify the types of counters available.  \n  \n-   Average: measure a value over time and display the average of the last two measurements. Associated with each average counter is a base counter that tracks the number of samples involved.  \n  \n-   Difference: subtract the last measurement from the previous one and display the difference, if it is positive; if negative, they display a zero.  \n  \n-   Instantaneous: display the most recent measurement.  \n  \n-   Percentage: display calculated values as a percentage.  \n  \n-   Rate: sample an increasing count of events over time and divide the change in count values by the change in time to display a rate of activity.  \n  \n When sampling performance counter data, using a counter type that represents an average can make raw data values meaningful for your use. For example, the raw data counter `NumberOfItems64` can expose data that is fairly random from sample to sample. The formula for an average calculation of the values that the counter returns would be (X 0 +X 1 +…+X n)/n, where each X i is a raw counter sample.  \n  \n Rate counters are similar to average counters, but more useful for situations in which the rate increases as a resource is used. A formula that quickly calculates the average is ((X n -X 0)/(T n -T 0)) / frequency, where each X i is a counter sample and each T i is the time that the corresponding sample was taken. The result is the average usage per second.  \n  \n> [!NOTE]\n>  Unless otherwise indicated, the time base is seconds.  \n  \n When instrumenting applications (creating and writing custom performance counters), you might be working with performance counter types that rely on an accompanying base counter that is used in the calculations. The base counter must be immediately after its associated counter in the <xref:System.Diagnostics.CounterCreationDataCollection> collection your application uses. The following table lists the base counter types with their corresponding performance counter types.  \n  \n|Base counter type|Performance counter types|  \n|-----------------------|-------------------------------|  \n|`AverageBase`|`AverageTimer32`<br /><br /> `AverageCount64`|  \n|`CounterMultiBase`|`CounterMultiTimer`<br /><br /> `CounterMultiTimerInverse`<br /><br /> `CounterMultiTimer100Ns`<br /><br /> `CounterMultiTimer100NsInverse`|  \n|`RawBase`|`RawFraction`|  \n|`SampleBase`|`SampleFraction`|","nodes":[{"pos":[0,193],"content":"Some counter types represent raw data, while others represent calculated values that are based on one or more counter samples. The following categories classify the types of counters available.","nodes":[{"content":"Some counter types represent raw data, while others represent calculated values that are based on one or more counter samples. The following categories classify the types of counters available.","pos":[0,193],"nodes":[{"content":"Some counter types represent raw data, while others represent calculated values that are based on one or more counter samples.","pos":[0,126]},{"content":"The following categories classify the types of counters available.","pos":[127,193]}]}]},{"pos":[203,390],"content":"Average: measure a value over time and display the average of the last two measurements. Associated with each average counter is a base counter that tracks the number of samples involved.","nodes":[{"content":"Average: measure a value over time and display the average of the last two measurements. Associated with each average counter is a base counter that tracks the number of samples involved.","pos":[0,187],"nodes":[{"content":"Average: measure a value over time and display the average of the last two measurements.","pos":[0,88]},{"content":"Associated with each average counter is a base counter that tracks the number of samples involved.","pos":[89,187]}]}]},{"pos":[400,544],"content":"Difference: subtract the last measurement from the previous one and display the difference, if it is positive; if negative, they display a zero.","nodes":[{"content":"Difference: subtract the last measurement from the previous one and display the difference, if it is positive; if negative, they display a zero.","pos":[0,144]}]},{"pos":[554,605],"content":"Instantaneous: display the most recent measurement.","nodes":[{"content":"Instantaneous: display the most recent measurement.","pos":[0,51]}]},{"pos":[615,669],"content":"Percentage: display calculated values as a percentage.","nodes":[{"content":"Percentage: display calculated values as a percentage.","pos":[0,54]}]},{"pos":[679,822],"content":"Rate: sample an increasing count of events over time and divide the change in count values by the change in time to display a rate of activity.","nodes":[{"content":"Rate: sample an increasing count of events over time and divide the change in count values by the change in time to display a rate of activity.","pos":[0,143]}]},{"pos":[829,1227],"content":"When sampling performance counter data, using a counter type that represents an average can make raw data values meaningful for your use. For example, the raw data counter `NumberOfItems64` can expose data that is fairly random from sample to sample. The formula for an average calculation of the values that the counter returns would be (X 0 +X 1 +…+X n)/n, where each X i is a raw counter sample.","nodes":[{"content":"When sampling performance counter data, using a counter type that represents an average can make raw data values meaningful for your use.","pos":[0,137]},{"content":"For example, the raw data counter <ph id=\"ph1\">`NumberOfItems64`</ph> can expose data that is fairly random from sample to sample.","pos":[138,250],"source":" For example, the raw data counter `NumberOfItems64` can expose data that is fairly random from sample to sample."},{"content":"The formula for an average calculation of the values that the counter returns would be (X 0 +X 1 +…+X n)/n, where each X i is a raw counter sample.","pos":[251,398]}]},{"pos":[1234,1593],"content":"Rate counters are similar to average counters, but more useful for situations in which the rate increases as a resource is used. A formula that quickly calculates the average is ((X n -X 0)/(T n -T 0)) / frequency, where each X i is a counter sample and each T i is the time that the corresponding sample was taken. The result is the average usage per second.","nodes":[{"content":"Rate counters are similar to average counters, but more useful for situations in which the rate increases as a resource is used. A formula that quickly calculates the average is ((X n -X 0)/(T n -T 0)) / frequency, where each X i is a counter sample and each T i is the time that the corresponding sample was taken. The result is the average usage per second.","pos":[0,359],"nodes":[{"content":"Rate counters are similar to average counters, but more useful for situations in which the rate increases as a resource is used.","pos":[0,128]},{"content":"A formula that quickly calculates the average is ((X n -X 0)/(T n -T 0)) / frequency, where each X i is a counter sample and each T i is the time that the corresponding sample was taken.","pos":[129,315]},{"content":"The result is the average usage per second.","pos":[316,359]}]}]},{"pos":[1601,1665],"content":"[!NOTE]\n Unless otherwise indicated, the time base is seconds.","leadings":["","> "],"nodes":[{"content":"Unless otherwise indicated, the time base is seconds.","pos":[9,62]}]},{"pos":[1672,2147],"content":"When instrumenting applications (creating and writing custom performance counters), you might be working with performance counter types that rely on an accompanying base counter that is used in the calculations. The base counter must be immediately after its associated counter in the <xref:System.Diagnostics.CounterCreationDataCollection> collection your application uses. The following table lists the base counter types with their corresponding performance counter types.","nodes":[{"content":"When instrumenting applications (creating and writing custom performance counters), you might be working with performance counter types that rely on an accompanying base counter that is used in the calculations. The base counter must be immediately after its associated counter in the <xref:System.Diagnostics.CounterCreationDataCollection> collection your application uses. The following table lists the base counter types with their corresponding performance counter types.","pos":[0,475],"nodes":[{"content":"When instrumenting applications (creating and writing custom performance counters), you might be working with performance counter types that rely on an accompanying base counter that is used in the calculations.","pos":[0,211]},{"content":"The base counter must be immediately after its associated counter in the <ph id=\"ph1\">&lt;xref:System.Diagnostics.CounterCreationDataCollection&gt;</ph> collection your application uses.","pos":[212,374],"source":" The base counter must be immediately after its associated counter in the <xref:System.Diagnostics.CounterCreationDataCollection> collection your application uses."},{"content":"The following table lists the base counter types with their corresponding performance counter types.","pos":[375,475]}]}]},{"pos":[2154,2171],"content":"Base counter type","nodes":[{"content":"Base counter type","pos":[0,17]}]},{"pos":[2172,2197],"content":"Performance counter types","nodes":[{"content":"Performance counter types","pos":[0,25]}]},{"pos":[2276,2321],"content":"`AverageTimer32`<br /><br /> `AverageCount64`","nodes":[]},{"pos":[2345,2484],"content":"`CounterMultiTimer`<br /><br /> `CounterMultiTimerInverse`<br /><br /> `CounterMultiTimer100Ns`<br /><br /> `CounterMultiTimer100NsInverse`","nodes":[]}],"pos":[2427,5003],"yaml":true,"extradata":"MT"},{"content":"A base counter that is used in the calculation of time or count averages, such as `AverageTimer32` and `AverageCount64`. Stores the denominator for calculating a counter to present \"time per operation\" or \"count per operation\".","nodes":[{"pos":[0,227],"content":"A base counter that is used in the calculation of time or count averages, such as `AverageTimer32` and `AverageCount64`. Stores the denominator for calculating a counter to present \"time per operation\" or \"count per operation\".","nodes":[{"content":"A base counter that is used in the calculation of time or count averages, such as <ph id=\"ph1\">`AverageTimer32`</ph> and <ph id=\"ph2\">`AverageCount64`</ph>.","pos":[0,120],"source":"A base counter that is used in the calculation of time or count averages, such as `AverageTimer32` and `AverageCount64`."},{"content":"Stores the denominator for calculating a counter to present \"time per operation\" or \"count per operation\".","pos":[121,227]}]}],"pos":[11123,11351],"yaml":true},{"content":"An average counter that shows how many items are processed, on average, during an operation. Counters of this type display a ratio of the items processed to the number of operations completed. The ratio is calculated by comparing the number of items processed during the last interval to the number of operations completed during the last interval.","nodes":[{"pos":[0,348],"content":"An average counter that shows how many items are processed, on average, during an operation. Counters of this type display a ratio of the items processed to the number of operations completed. The ratio is calculated by comparing the number of items processed during the last interval to the number of operations completed during the last interval.","nodes":[{"content":"An average counter that shows how many items are processed, on average, during an operation. Counters of this type display a ratio of the items processed to the number of operations completed. The ratio is calculated by comparing the number of items processed during the last interval to the number of operations completed during the last interval.","pos":[0,348],"nodes":[{"content":"An average counter that shows how many items are processed, on average, during an operation.","pos":[0,92]},{"content":"Counters of this type display a ratio of the items processed to the number of operations completed.","pos":[93,192]},{"content":"The ratio is calculated by comparing the number of items processed during the last interval to the number of operations completed during the last interval.","pos":[193,348]}]}]}],"pos":[12486,12835],"yaml":true},{"content":"Formula: (N 1 -N 0)/(B 1 -B 0), where N 1 and N 0 are performance counter readings, and the B 1 and B 0 are their corresponding `AverageBase` values. Thus, the numerator represents the numbers of items processed during the sample interval, and the denominator represents the number of operations completed during the sample interval.  \n  \n Counters of this type include PhysicalDisk\\ Avg. Disk Bytes/Transfer.","nodes":[{"pos":[0,333],"content":"Formula: (N 1 -N 0)/(B 1 -B 0), where N 1 and N 0 are performance counter readings, and the B 1 and B 0 are their corresponding `AverageBase` values. Thus, the numerator represents the numbers of items processed during the sample interval, and the denominator represents the number of operations completed during the sample interval.","nodes":[{"content":"Formula: (N 1 -N 0)/(B 1 -B 0), where N 1 and N 0 are performance counter readings, and the B 1 and B 0 are their corresponding <ph id=\"ph1\">`AverageBase`</ph> values.","pos":[0,149],"source":"Formula: (N 1 -N 0)/(B 1 -B 0), where N 1 and N 0 are performance counter readings, and the B 1 and B 0 are their corresponding `AverageBase` values."},{"content":"Thus, the numerator represents the numbers of items processed during the sample interval, and the denominator represents the number of operations completed during the sample interval.","pos":[150,333]}]},{"pos":[340,409],"content":"Counters of this type include PhysicalDisk\\ Avg. Disk Bytes/Transfer.","nodes":[{"content":"Counters of this type include PhysicalDisk\\ Avg. Disk Bytes/Transfer.","pos":[0,69],"nodes":[{"content":"Counters of this type include PhysicalDisk\\ Avg.","pos":[0,48]},{"content":"Disk Bytes/Transfer.","pos":[49,69]}]}]}],"pos":[12846,13261],"yaml":true,"extradata":"MT"},{"content":"An average counter that measures the time it takes, on average, to complete a process or operation. Counters of this type display a ratio of the total elapsed time of the sample interval to the number of processes or operations completed during that time. This counter type measures time in ticks of the system clock.","nodes":[{"pos":[0,317],"content":"An average counter that measures the time it takes, on average, to complete a process or operation. Counters of this type display a ratio of the total elapsed time of the sample interval to the number of processes or operations completed during that time. This counter type measures time in ticks of the system clock.","nodes":[{"content":"An average counter that measures the time it takes, on average, to complete a process or operation. Counters of this type display a ratio of the total elapsed time of the sample interval to the number of processes or operations completed during that time. This counter type measures time in ticks of the system clock.","pos":[0,317],"nodes":[{"content":"An average counter that measures the time it takes, on average, to complete a process or operation.","pos":[0,99]},{"content":"Counters of this type display a ratio of the total elapsed time of the sample interval to the number of processes or operations completed during that time.","pos":[100,255]},{"content":"This counter type measures time in ticks of the system clock.","pos":[256,317]}]}]}],"pos":[14399,14717],"yaml":true},{"content":"Formula: ((N 1 -N 0)/F)/(B 1 -B 0), where N 1 and N 0 are performance counter readings, B 1 and B 0 are their corresponding `AverageBase` values, and F is the number of ticks per second. The value of F is factored into the equation so that the result can be displayed in seconds. Thus, the numerator represents the numbers of ticks counted during the last sample interval, F represents the frequency of the ticks, and the denominator represents the number of operations completed during the last sample interval.  \n  \n Counters of this type include PhysicalDisk\\ Avg. Disk sec/Transfer.","nodes":[{"pos":[0,512],"content":"Formula: ((N 1 -N 0)/F)/(B 1 -B 0), where N 1 and N 0 are performance counter readings, B 1 and B 0 are their corresponding `AverageBase` values, and F is the number of ticks per second. The value of F is factored into the equation so that the result can be displayed in seconds. Thus, the numerator represents the numbers of ticks counted during the last sample interval, F represents the frequency of the ticks, and the denominator represents the number of operations completed during the last sample interval.","nodes":[{"content":"Formula: ((N 1 -N 0)/F)/(B 1 -B 0), where N 1 and N 0 are performance counter readings, B 1 and B 0 are their corresponding <ph id=\"ph1\">`AverageBase`</ph> values, and F is the number of ticks per second.","pos":[0,186],"source":"Formula: ((N 1 -N 0)/F)/(B 1 -B 0), where N 1 and N 0 are performance counter readings, B 1 and B 0 are their corresponding `AverageBase` values, and F is the number of ticks per second."},{"content":"The value of F is factored into the equation so that the result can be displayed in seconds.","pos":[187,279]},{"content":"Thus, the numerator represents the numbers of ticks counted during the last sample interval, F represents the frequency of the ticks, and the denominator represents the number of operations completed during the last sample interval.","pos":[280,512]}]},{"pos":[519,586],"content":"Counters of this type include PhysicalDisk\\ Avg. Disk sec/Transfer.","nodes":[{"content":"Counters of this type include PhysicalDisk\\ Avg. Disk sec/Transfer.","pos":[0,67],"nodes":[{"content":"Counters of this type include PhysicalDisk\\ Avg.","pos":[0,48]},{"content":"Disk sec/Transfer.","pos":[49,67]}]}]}],"pos":[14728,15320],"yaml":true,"extradata":"MT"},{"content":"A difference counter that shows the change in the measured attribute between the two most recent sample intervals.","nodes":[{"pos":[0,114],"content":"A difference counter that shows the change in the measured attribute between the two most recent sample intervals.","nodes":[{"content":"A difference counter that shows the change in the measured attribute between the two most recent sample intervals.","pos":[0,114]}]}],"pos":[16458,16573],"yaml":true},{"content":"Formula: N 1 -N 0, where N 1 and N 0 are performance counter readings.","nodes":[{"pos":[0,70],"content":"Formula: N 1 -N 0, where N 1 and N 0 are performance counter readings.","nodes":[{"content":"Formula: N 1 -N 0, where N 1 and N 0 are performance counter readings.","pos":[0,70]}]}],"pos":[16584,16657],"yaml":true,"extradata":"MT"},{"content":"A difference counter that shows the change in the measured attribute between the two most recent sample intervals. It is the same as the `CounterDelta32` counter type except that is uses larger fields to accomodate larger values.","nodes":[{"pos":[0,229],"content":"A difference counter that shows the change in the measured attribute between the two most recent sample intervals. It is the same as the `CounterDelta32` counter type except that is uses larger fields to accomodate larger values.","nodes":[{"content":"A difference counter that shows the change in the measured attribute between the two most recent sample intervals.","pos":[0,114]},{"content":"It is the same as the <ph id=\"ph1\">`CounterDelta32`</ph> counter type except that is uses larger fields to accomodate larger values.","pos":[115,229],"source":" It is the same as the `CounterDelta32` counter type except that is uses larger fields to accomodate larger values."}]}],"pos":[17795,18025],"yaml":true},{"content":"Formula: N 1 -N 0, where N 1 and N 0 are performance counter readings.","nodes":[{"pos":[0,70],"content":"Formula: N 1 -N 0, where N 1 and N 0 are performance counter readings.","nodes":[{"content":"Formula: N 1 -N 0, where N 1 and N 0 are performance counter readings.","pos":[0,70]}]}],"pos":[18036,18109],"yaml":true,"extradata":"MT"},{"content":"A base counter that indicates the number of items sampled. It is used as the denominator in the calculations to get an average among the items sampled when taking timings of multiple, but similar items. Used with `CounterMultiTimer`, `CounterMultiTimerInverse`, `CounterMultiTimer100Ns`, and `CounterMultiTimer100NsInverse`.","nodes":[{"pos":[0,324],"content":"A base counter that indicates the number of items sampled. It is used as the denominator in the calculations to get an average among the items sampled when taking timings of multiple, but similar items. Used with `CounterMultiTimer`, `CounterMultiTimerInverse`, `CounterMultiTimer100Ns`, and `CounterMultiTimer100NsInverse`.","nodes":[{"content":"A base counter that indicates the number of items sampled.","pos":[0,58]},{"content":"It is used as the denominator in the calculations to get an average among the items sampled when taking timings of multiple, but similar items.","pos":[59,202]},{"content":"Used with <ph id=\"ph1\">`CounterMultiTimer`</ph>, <ph id=\"ph2\">`CounterMultiTimerInverse`</ph>, <ph id=\"ph3\">`CounterMultiTimer100Ns`</ph>, and <ph id=\"ph4\">`CounterMultiTimer100NsInverse`</ph>.","pos":[203,324],"source":" Used with `CounterMultiTimer`, `CounterMultiTimerInverse`, `CounterMultiTimer100Ns`, and `CounterMultiTimer100NsInverse`."}]}],"pos":[19259,19584],"yaml":true},{"content":"A percentage counter that displays the active time of one or more components as a percentage of the total time of the sample interval. Because the numerator records the active time of components operating simultaneously, the resulting percentage can exceed 100 percent.","nodes":[{"pos":[0,269],"content":"A percentage counter that displays the active time of one or more components as a percentage of the total time of the sample interval. Because the numerator records the active time of components operating simultaneously, the resulting percentage can exceed 100 percent.","nodes":[{"content":"A percentage counter that displays the active time of one or more components as a percentage of the total time of the sample interval. Because the numerator records the active time of components operating simultaneously, the resulting percentage can exceed 100 percent.","pos":[0,269],"nodes":[{"content":"A percentage counter that displays the active time of one or more components as a percentage of the total time of the sample interval.","pos":[0,134]},{"content":"Because the numerator records the active time of components operating simultaneously, the resulting percentage can exceed 100 percent.","pos":[135,269]}]}]}],"pos":[20742,21012],"yaml":true},{"content":"This counter is a multitimer. Multitimers collect data from more than one instance of a component, such as a processor or disk. This counter type differs from `CounterMultiTimer100Ns` in that it measures time in units of ticks of the system performance timer, rather than in 100 nanosecond units.  \n  \n Formula: ((N 1 - N 0) / (D 1 - D 0)) x 100 / B, where N 1 and N 0 are performance counter readings, D 1 and D 0 are their corresponding time readings in ticks of the system performance timer, and the variable B denotes the base count for the monitored components (using a base counter of type `CounterMultiBase`). Thus, the numerator represents the portions of the sample interval during which the monitored components were active, and the denominator represents the total elapsed time of the sample interval.","nodes":[{"pos":[0,296],"content":"This counter is a multitimer. Multitimers collect data from more than one instance of a component, such as a processor or disk. This counter type differs from `CounterMultiTimer100Ns` in that it measures time in units of ticks of the system performance timer, rather than in 100 nanosecond units.","nodes":[{"content":"This counter is a multitimer.","pos":[0,29]},{"content":"Multitimers collect data from more than one instance of a component, such as a processor or disk.","pos":[30,127]},{"content":"This counter type differs from <ph id=\"ph1\">`CounterMultiTimer100Ns`</ph> in that it measures time in units of ticks of the system performance timer, rather than in 100 nanosecond units.","pos":[128,296],"source":" This counter type differs from `CounterMultiTimer100Ns` in that it measures time in units of ticks of the system performance timer, rather than in 100 nanosecond units."}]},{"pos":[303,812],"content":"Formula: ((N 1 - N 0) / (D 1 - D 0)) x 100 / B, where N 1 and N 0 are performance counter readings, D 1 and D 0 are their corresponding time readings in ticks of the system performance timer, and the variable B denotes the base count for the monitored components (using a base counter of type `CounterMultiBase`). Thus, the numerator represents the portions of the sample interval during which the monitored components were active, and the denominator represents the total elapsed time of the sample interval.","nodes":[{"content":"Formula: ((N 1 - N 0) / (D 1 - D 0)) x 100 / B, where N 1 and N 0 are performance counter readings, D 1 and D 0 are their corresponding time readings in ticks of the system performance timer, and the variable B denotes the base count for the monitored components (using a base counter of type <ph id=\"ph1\">`CounterMultiBase`</ph>).","pos":[0,313],"source":"Formula: ((N 1 - N 0) / (D 1 - D 0)) x 100 / B, where N 1 and N 0 are performance counter readings, D 1 and D 0 are their corresponding time readings in ticks of the system performance timer, and the variable B denotes the base count for the monitored components (using a base counter of type `CounterMultiBase`)."},{"content":"Thus, the numerator represents the portions of the sample interval during which the monitored components were active, and the denominator represents the total elapsed time of the sample interval.","pos":[314,509]}]}],"pos":[21023,21840],"yaml":true,"extradata":"MT"},{"content":"A percentage counter that shows the active time of one or more components as a percentage of the total time of the sample interval. It measures time in 100 nanosecond (ns) units.","nodes":[{"pos":[0,178],"content":"A percentage counter that shows the active time of one or more components as a percentage of the total time of the sample interval. It measures time in 100 nanosecond (ns) units.","nodes":[{"content":"A percentage counter that shows the active time of one or more components as a percentage of the total time of the sample interval. It measures time in 100 nanosecond (ns) units.","pos":[0,178],"nodes":[{"content":"A percentage counter that shows the active time of one or more components as a percentage of the total time of the sample interval.","pos":[0,131]},{"content":"It measures time in 100 nanosecond (ns) units.","pos":[132,178]}]}]}],"pos":[23029,23208],"yaml":true},{"content":"This counter type is a multitimer. Multitimers are designed to monitor more than one instance of a component, such as a processor or disk.  \n  \n Formula: ((N 1 - N 0) / (D 1 - D 0)) x 100 / B, where N 1 and N 0 are performance counter readings, D 1 and D 0 are their corresponding time readings in 100-nanosecond units, and the variable B denotes the base count for the monitored components (using a base counter of type `CounterMultiBase`). Thus, the numerator represents the portions of the sample interval during which the monitored components were active, and the denominator represents the total elapsed time of the sample interval.","nodes":[{"pos":[0,138],"content":"This counter type is a multitimer. Multitimers are designed to monitor more than one instance of a component, such as a processor or disk.","nodes":[{"content":"This counter type is a multitimer. Multitimers are designed to monitor more than one instance of a component, such as a processor or disk.","pos":[0,138],"nodes":[{"content":"This counter type is a multitimer.","pos":[0,34]},{"content":"Multitimers are designed to monitor more than one instance of a component, such as a processor or disk.","pos":[35,138]}]}]},{"pos":[145,637],"content":"Formula: ((N 1 - N 0) / (D 1 - D 0)) x 100 / B, where N 1 and N 0 are performance counter readings, D 1 and D 0 are their corresponding time readings in 100-nanosecond units, and the variable B denotes the base count for the monitored components (using a base counter of type `CounterMultiBase`). Thus, the numerator represents the portions of the sample interval during which the monitored components were active, and the denominator represents the total elapsed time of the sample interval.","nodes":[{"content":"Formula: ((N 1 - N 0) / (D 1 - D 0)) x 100 / B, where N 1 and N 0 are performance counter readings, D 1 and D 0 are their corresponding time readings in 100-nanosecond units, and the variable B denotes the base count for the monitored components (using a base counter of type <ph id=\"ph1\">`CounterMultiBase`</ph>).","pos":[0,296],"source":"Formula: ((N 1 - N 0) / (D 1 - D 0)) x 100 / B, where N 1 and N 0 are performance counter readings, D 1 and D 0 are their corresponding time readings in 100-nanosecond units, and the variable B denotes the base count for the monitored components (using a base counter of type `CounterMultiBase`)."},{"content":"Thus, the numerator represents the portions of the sample interval during which the monitored components were active, and the denominator represents the total elapsed time of the sample interval.","pos":[297,492]}]}],"pos":[23219,23861],"yaml":true,"extradata":"MT"},{"content":"A percentage counter that shows the active time of one or more components as a percentage of the total time of the sample interval. Counters of this type measure time in 100 nanosecond (ns) units. They derive the active time by measuring the time that the components were not active and subtracting the result from multiplying 100 percent by the number of objects monitored.","nodes":[{"pos":[0,374],"content":"A percentage counter that shows the active time of one or more components as a percentage of the total time of the sample interval. Counters of this type measure time in 100 nanosecond (ns) units. They derive the active time by measuring the time that the components were not active and subtracting the result from multiplying 100 percent by the number of objects monitored.","nodes":[{"content":"A percentage counter that shows the active time of one or more components as a percentage of the total time of the sample interval. Counters of this type measure time in 100 nanosecond (ns) units. They derive the active time by measuring the time that the components were not active and subtracting the result from multiplying 100 percent by the number of objects monitored.","pos":[0,374],"nodes":[{"content":"A percentage counter that shows the active time of one or more components as a percentage of the total time of the sample interval.","pos":[0,131]},{"content":"Counters of this type measure time in 100 nanosecond (ns) units.","pos":[132,196]},{"content":"They derive the active time by measuring the time that the components were not active and subtracting the result from multiplying 100 percent by the number of objects monitored.","pos":[197,374]}]}]}],"pos":[25097,25472],"yaml":true},{"content":"This counter type is an inverse multitimer. Multitimers are designed to monitor more than one instance of a component, such as a processor or disk. Inverse counters measure the time that a component is not active and derive its active time from the measurement of inactive time  \n  \n Formula: (B - ((N 1 - N 0) / (D 1 - D 0))) x 100, where the denominator represents the total elapsed time of the sample interval, the numerator represents the time during the interval when monitored components were inactive, and B represents the number of components being monitored, using a base counter of type `CounterMultiBase`.","nodes":[{"pos":[0,277],"content":"This counter type is an inverse multitimer. Multitimers are designed to monitor more than one instance of a component, such as a processor or disk. Inverse counters measure the time that a component is not active and derive its active time from the measurement of inactive time","nodes":[{"content":"This counter type is an inverse multitimer. Multitimers are designed to monitor more than one instance of a component, such as a processor or disk. Inverse counters measure the time that a component is not active and derive its active time from the measurement of inactive time","pos":[0,277],"nodes":[{"content":"This counter type is an inverse multitimer.","pos":[0,43]},{"content":"Multitimers are designed to monitor more than one instance of a component, such as a processor or disk.","pos":[44,147]},{"content":"Inverse counters measure the time that a component is not active and derive its active time from the measurement of inactive time","pos":[148,277]}]}]},{"pos":[284,616],"content":"Formula: (B - ((N 1 - N 0) / (D 1 - D 0))) x 100, where the denominator represents the total elapsed time of the sample interval, the numerator represents the time during the interval when monitored components were inactive, and B represents the number of components being monitored, using a base counter of type <ph id=\"ph1\">`CounterMultiBase`</ph>.","source":"Formula: (B - ((N 1 - N 0) / (D 1 - D 0))) x 100, where the denominator represents the total elapsed time of the sample interval, the numerator represents the time during the interval when monitored components were inactive, and B represents the number of components being monitored, using a base counter of type `CounterMultiBase`."}],"pos":[25483,26104],"yaml":true,"extradata":"MT"},{"content":"A percentage counter that shows the active time of one or more components as a percentage of the total time of the sample interval. It derives the active time by measuring the time that the components were not active and subtracting the result from 100 percent by the number of objects monitored.","nodes":[{"pos":[0,296],"content":"A percentage counter that shows the active time of one or more components as a percentage of the total time of the sample interval. It derives the active time by measuring the time that the components were not active and subtracting the result from 100 percent by the number of objects monitored.","nodes":[{"content":"A percentage counter that shows the active time of one or more components as a percentage of the total time of the sample interval. It derives the active time by measuring the time that the components were not active and subtracting the result from 100 percent by the number of objects monitored.","pos":[0,296],"nodes":[{"content":"A percentage counter that shows the active time of one or more components as a percentage of the total time of the sample interval.","pos":[0,131]},{"content":"It derives the active time by measuring the time that the components were not active and subtracting the result from 100 percent by the number of objects monitored.","pos":[132,296]}]}]}],"pos":[27317,27614],"yaml":true},{"content":"This counter type is an inverse multitimer. Multitimers monitor more than one instance of a component, such as a processor or disk. Inverse counters measure the time that a component is not active and derive its active time from that measurement.  \n  \n This counter differs from `CounterMultiTimer100NsInverse` in that it measures time in units of ticks of the system performance timer, rather than in 100 nanosecond units.  \n  \n Formula: (B- ((N 1 - N 0) / (D 1 - D 0))) x 100, where the denominator represents the total elapsed time of the sample interval, the numerator represents the time during the interval when monitored components were inactive, and B represents the number of components being monitored, using a base counter of type `CounterMultiBase`.","nodes":[{"pos":[0,246],"content":"This counter type is an inverse multitimer. Multitimers monitor more than one instance of a component, such as a processor or disk. Inverse counters measure the time that a component is not active and derive its active time from that measurement.","nodes":[{"content":"This counter type is an inverse multitimer. Multitimers monitor more than one instance of a component, such as a processor or disk. Inverse counters measure the time that a component is not active and derive its active time from that measurement.","pos":[0,246],"nodes":[{"content":"This counter type is an inverse multitimer.","pos":[0,43]},{"content":"Multitimers monitor more than one instance of a component, such as a processor or disk.","pos":[44,131]},{"content":"Inverse counters measure the time that a component is not active and derive its active time from that measurement.","pos":[132,246]}]}]},{"pos":[253,423],"content":"This counter differs from <ph id=\"ph1\">`CounterMultiTimer100NsInverse`</ph> in that it measures time in units of ticks of the system performance timer, rather than in 100 nanosecond units.","source":"This counter differs from `CounterMultiTimer100NsInverse` in that it measures time in units of ticks of the system performance timer, rather than in 100 nanosecond units."},{"pos":[430,761],"content":"Formula: (B- ((N 1 - N 0) / (D 1 - D 0))) x 100, where the denominator represents the total elapsed time of the sample interval, the numerator represents the time during the interval when monitored components were inactive, and B represents the number of components being monitored, using a base counter of type <ph id=\"ph1\">`CounterMultiBase`</ph>.","source":"Formula: (B- ((N 1 - N 0) / (D 1 - D 0))) x 100, where the denominator represents the total elapsed time of the sample interval, the numerator represents the time during the interval when monitored components were inactive, and B represents the number of components being monitored, using a base counter of type `CounterMultiBase`."}],"pos":[27625,28393],"yaml":true,"extradata":"MT"},{"content":"A percentage counter that shows the average time that a component is active as a percentage of the total sample time.","nodes":[{"pos":[0,117],"content":"A percentage counter that shows the average time that a component is active as a percentage of the total sample time.","nodes":[{"content":"A percentage counter that shows the average time that a component is active as a percentage of the total sample time.","pos":[0,117]}]}],"pos":[29529,29647],"yaml":true},{"content":"Formula: (N 1 - N 0) / (D 1 - D 0), where N 1 and N 0 are performance counter readings, and D 1 and D 0 are their corresponding time readings. Thus, the numerator represents the portions of the sample interval during which the monitored components were active, and the denominator represents the total elapsed time of the sample interval.","nodes":[{"pos":[0,338],"content":"Formula: (N 1 - N 0) / (D 1 - D 0), where N 1 and N 0 are performance counter readings, and D 1 and D 0 are their corresponding time readings. Thus, the numerator represents the portions of the sample interval during which the monitored components were active, and the denominator represents the total elapsed time of the sample interval.","nodes":[{"content":"Formula: (N 1 - N 0) / (D 1 - D 0), where N 1 and N 0 are performance counter readings, and D 1 and D 0 are their corresponding time readings. Thus, the numerator represents the portions of the sample interval during which the monitored components were active, and the denominator represents the total elapsed time of the sample interval.","pos":[0,338],"nodes":[{"content":"Formula: (N 1 - N 0) / (D 1 - D 0), where N 1 and N 0 are performance counter readings, and D 1 and D 0 are their corresponding time readings.","pos":[0,142]},{"content":"Thus, the numerator represents the portions of the sample interval during which the monitored components were active, and the denominator represents the total elapsed time of the sample interval.","pos":[143,338]}]}]}],"pos":[29658,29999],"yaml":true,"extradata":"MT"},{"content":"A percentage counter that displays the average percentage of active time observed during sample interval. The value of these counters is calculated by monitoring the percentage of time that the service was inactive and then subtracting that value from 100 percent.","nodes":[{"pos":[0,264],"content":"A percentage counter that displays the average percentage of active time observed during sample interval. The value of these counters is calculated by monitoring the percentage of time that the service was inactive and then subtracting that value from 100 percent.","nodes":[{"content":"A percentage counter that displays the average percentage of active time observed during sample interval. The value of these counters is calculated by monitoring the percentage of time that the service was inactive and then subtracting that value from 100 percent.","pos":[0,264],"nodes":[{"content":"A percentage counter that displays the average percentage of active time observed during sample interval.","pos":[0,105]},{"content":"The value of these counters is calculated by monitoring the percentage of time that the service was inactive and then subtracting that value from 100 percent.","pos":[106,264]}]}]}],"pos":[31165,31430],"yaml":true},{"content":"This is an inverse counter type. Inverse counters measure the time that a component is note active and derive the active time from that measurement. This counter type is the same as `CounterTimer100NsInv` except that it measures time in units of ticks of the system performance timer rather than in 100 nanosecond units.  \n  \n Formula: (1- ((N 1 - N 0) / (D 1 - D 0))) x 100, where the numerator represents the time during the interval when the monitored components were inactive, and the denominator represents the total elapsed time of the sample interval.","nodes":[{"pos":[0,320],"content":"This is an inverse counter type. Inverse counters measure the time that a component is note active and derive the active time from that measurement. This counter type is the same as `CounterTimer100NsInv` except that it measures time in units of ticks of the system performance timer rather than in 100 nanosecond units.","nodes":[{"content":"This is an inverse counter type.","pos":[0,32]},{"content":"Inverse counters measure the time that a component is note active and derive the active time from that measurement.","pos":[33,148]},{"content":"This counter type is the same as <ph id=\"ph1\">`CounterTimer100NsInv`</ph> except that it measures time in units of ticks of the system performance timer rather than in 100 nanosecond units.","pos":[149,320],"source":" This counter type is the same as `CounterTimer100NsInv` except that it measures time in units of ticks of the system performance timer rather than in 100 nanosecond units."}]},{"pos":[327,558],"content":"Formula: (1- ((N 1 - N 0) / (D 1 - D 0))) x 100, where the numerator represents the time during the interval when the monitored components were inactive, and the denominator represents the total elapsed time of the sample interval.","nodes":[{"content":"Formula: (1- ((N 1 - N 0) / (D 1 - D 0))) x 100, where the numerator represents the time during the interval when the monitored components were inactive, and the denominator represents the total elapsed time of the sample interval.","pos":[0,231]}]}],"pos":[31441,32004],"yaml":true,"extradata":"MT"},{"content":"An average counter designed to monitor the average length of a queue to a resource over time. It shows the difference between the queue lengths observed during the last two sample intervals divided by the duration of the interval. This type of counter is typically used to track the number of items that are queued or waiting.","nodes":[{"pos":[0,326],"content":"An average counter designed to monitor the average length of a queue to a resource over time. It shows the difference between the queue lengths observed during the last two sample intervals divided by the duration of the interval. This type of counter is typically used to track the number of items that are queued or waiting.","nodes":[{"content":"An average counter designed to monitor the average length of a queue to a resource over time. It shows the difference between the queue lengths observed during the last two sample intervals divided by the duration of the interval. This type of counter is typically used to track the number of items that are queued or waiting.","pos":[0,326],"nodes":[{"content":"An average counter designed to monitor the average length of a queue to a resource over time.","pos":[0,93]},{"content":"It shows the difference between the queue lengths observed during the last two sample intervals divided by the duration of the interval.","pos":[94,230]},{"content":"This type of counter is typically used to track the number of items that are queued or waiting.","pos":[231,326]}]}]}],"pos":[33195,33522],"yaml":true},{"content":"Formula: (N 1 - N 0) / (D 1 - D 0), where the numerator represents the number of items in the queue and the denominator represents the time elapsed during the last sample interval.","nodes":[{"pos":[0,180],"content":"Formula: (N 1 - N 0) / (D 1 - D 0), where the numerator represents the number of items in the queue and the denominator represents the time elapsed during the last sample interval.","nodes":[{"content":"Formula: (N 1 - N 0) / (D 1 - D 0), where the numerator represents the number of items in the queue and the denominator represents the time elapsed during the last sample interval.","pos":[0,180]}]}],"pos":[33533,33716],"yaml":true,"extradata":"MT"},{"content":"An average counter that monitors the average length of a queue to a resource over time. Counters of this type display the difference between the queue lengths observed during the last two sample intervals, divided by the duration of the interval. This counter type is the same as `CountPerTimeInterval32` except that it uses larger fields to accommodate larger values. This type of counter is typically used to track a high-volume or very large number of items that are queued or waiting.","nodes":[{"pos":[0,488],"content":"An average counter that monitors the average length of a queue to a resource over time. Counters of this type display the difference between the queue lengths observed during the last two sample intervals, divided by the duration of the interval. This counter type is the same as `CountPerTimeInterval32` except that it uses larger fields to accommodate larger values. This type of counter is typically used to track a high-volume or very large number of items that are queued or waiting.","nodes":[{"content":"An average counter that monitors the average length of a queue to a resource over time.","pos":[0,87]},{"content":"Counters of this type display the difference between the queue lengths observed during the last two sample intervals, divided by the duration of the interval.","pos":[88,246]},{"content":"This counter type is the same as <ph id=\"ph1\">`CountPerTimeInterval32`</ph> except that it uses larger fields to accommodate larger values.","pos":[247,368],"source":" This counter type is the same as `CountPerTimeInterval32` except that it uses larger fields to accommodate larger values."},{"content":"This type of counter is typically used to track a high-volume or very large number of items that are queued or waiting.","pos":[369,488]}]}],"pos":[34910,35399],"yaml":true},{"content":"Formula: (N 1 - N 0) / (D 1 - D 0), where the numerator represents the number of items in a queue and the denominator represents the time elapsed during the sample interval.","nodes":[{"pos":[0,173],"content":"Formula: (N 1 - N 0) / (D 1 - D 0), where the numerator represents the number of items in a queue and the denominator represents the time elapsed during the sample interval.","nodes":[{"content":"Formula: (N 1 - N 0) / (D 1 - D 0), where the numerator represents the number of items in a queue and the denominator represents the time elapsed during the sample interval.","pos":[0,173]}]}],"pos":[35410,35586],"yaml":true,"extradata":"MT"},{"content":"A difference timer that shows the total time between when the component or process started and the time when this value is calculated.","nodes":[{"pos":[0,134],"content":"A difference timer that shows the total time between when the component or process started and the time when this value is calculated.","nodes":[{"content":"A difference timer that shows the total time between when the component or process started and the time when this value is calculated.","pos":[0,134]}]}],"pos":[36714,36849],"yaml":true},{"content":"Formula: (D 0 - N 0) / F, where D 0 represents the current time, N 0 represents the time the object was started, and F represents the number of time units that elapse in one second. The value of F is factored into the equation so that the result can be displayed in seconds.  \n  \n Counters of this type include System\\ System Up Time.","nodes":[{"pos":[0,274],"content":"Formula: (D 0 - N 0) / F, where D 0 represents the current time, N 0 represents the time the object was started, and F represents the number of time units that elapse in one second. The value of F is factored into the equation so that the result can be displayed in seconds.","nodes":[{"content":"Formula: (D 0 - N 0) / F, where D 0 represents the current time, N 0 represents the time the object was started, and F represents the number of time units that elapse in one second. The value of F is factored into the equation so that the result can be displayed in seconds.","pos":[0,274],"nodes":[{"content":"Formula: (D 0 - N 0) / F, where D 0 represents the current time, N 0 represents the time the object was started, and F represents the number of time units that elapse in one second.","pos":[0,181]},{"content":"The value of F is factored into the equation so that the result can be displayed in seconds.","pos":[182,274]}]}]},{"pos":[281,334],"content":"Counters of this type include System\\ System Up Time.","nodes":[{"content":"Counters of this type include System\\ System Up Time.","pos":[0,53]}]}],"pos":[36860,37200],"yaml":true,"extradata":"MT"},{"content":"An instantaneous counter that shows the most recently observed value. Used, for example, to maintain a simple count of items or operations.","nodes":[{"pos":[0,139],"content":"An instantaneous counter that shows the most recently observed value. Used, for example, to maintain a simple count of items or operations.","nodes":[{"content":"An instantaneous counter that shows the most recently observed value. Used, for example, to maintain a simple count of items or operations.","pos":[0,139],"nodes":[{"content":"An instantaneous counter that shows the most recently observed value.","pos":[0,69]},{"content":"Used, for example, to maintain a simple count of items or operations.","pos":[70,139]}]}]}],"pos":[38341,38481],"yaml":true},{"content":"Formula: None. Does not display an average, but shows the raw data as it is collected.  \n  \n Counters of this type include Memory\\Available Bytes.","nodes":[{"pos":[0,86],"content":"Formula: None. Does not display an average, but shows the raw data as it is collected.","nodes":[{"content":"Formula: None. Does not display an average, but shows the raw data as it is collected.","pos":[0,86],"nodes":[{"content":"Formula: None.","pos":[0,14]},{"content":"Does not display an average, but shows the raw data as it is collected.","pos":[15,86]}]}]},{"pos":[93,146],"content":"Counters of this type include Memory\\Available Bytes.","nodes":[{"content":"Counters of this type include Memory\\Available Bytes.","pos":[0,53]}]}],"pos":[38492,38644],"yaml":true,"extradata":"MT"},{"content":"An instantaneous counter that shows the most recently observed value. Used, for example, to maintain a simple count of a very large number of items or operations. It is the same as `NumberOfItems32` except that it uses larger fields to accommodate larger values.","nodes":[{"pos":[0,262],"content":"An instantaneous counter that shows the most recently observed value. Used, for example, to maintain a simple count of a very large number of items or operations. It is the same as `NumberOfItems32` except that it uses larger fields to accommodate larger values.","nodes":[{"content":"An instantaneous counter that shows the most recently observed value.","pos":[0,69]},{"content":"Used, for example, to maintain a simple count of a very large number of items or operations.","pos":[70,162]},{"content":"It is the same as <ph id=\"ph1\">`NumberOfItems32`</ph> except that it uses larger fields to accommodate larger values.","pos":[163,262],"source":" It is the same as `NumberOfItems32` except that it uses larger fields to accommodate larger values."}]}],"pos":[39789,40052],"yaml":true},{"content":"Formula: None. Does not display an average, but shows the raw data as it is collected.","nodes":[{"pos":[0,86],"content":"Formula: None. Does not display an average, but shows the raw data as it is collected.","nodes":[{"content":"Formula: None. Does not display an average, but shows the raw data as it is collected.","pos":[0,86],"nodes":[{"content":"Formula: None.","pos":[0,14]},{"content":"Does not display an average, but shows the raw data as it is collected.","pos":[15,86]}]}]}],"pos":[40063,40152],"yaml":true,"extradata":"MT"},{"content":"An instantaneous counter that shows the most recently observed value in hexadecimal format. Used, for example, to maintain a simple count of items or operations.","nodes":[{"pos":[0,161],"content":"An instantaneous counter that shows the most recently observed value in hexadecimal format. Used, for example, to maintain a simple count of items or operations.","nodes":[{"content":"An instantaneous counter that shows the most recently observed value in hexadecimal format. Used, for example, to maintain a simple count of items or operations.","pos":[0,161],"nodes":[{"content":"An instantaneous counter that shows the most recently observed value in hexadecimal format.","pos":[0,91]},{"content":"Used, for example, to maintain a simple count of items or operations.","pos":[92,161]}]}]}],"pos":[41315,41477],"yaml":true},{"content":"Formula: None. Does not display an average, but shows the raw data as it is collected.","nodes":[{"pos":[0,86],"content":"Formula: None. Does not display an average, but shows the raw data as it is collected.","nodes":[{"content":"Formula: None. Does not display an average, but shows the raw data as it is collected.","pos":[0,86],"nodes":[{"content":"Formula: None.","pos":[0,14]},{"content":"Does not display an average, but shows the raw data as it is collected.","pos":[15,86]}]}]}],"pos":[41488,41577],"yaml":true,"extradata":"MT"},{"content":"An instantaneous counter that shows the most recently observed value. Used, for example, to maintain a simple count of a very large number of items or operations. It is the same as `NumberOfItemsHEX32` except that it uses larger fields to accommodate larger values.","nodes":[{"pos":[0,265],"content":"An instantaneous counter that shows the most recently observed value. Used, for example, to maintain a simple count of a very large number of items or operations. It is the same as `NumberOfItemsHEX32` except that it uses larger fields to accommodate larger values.","nodes":[{"content":"An instantaneous counter that shows the most recently observed value.","pos":[0,69]},{"content":"Used, for example, to maintain a simple count of a very large number of items or operations.","pos":[70,162]},{"content":"It is the same as <ph id=\"ph1\">`NumberOfItemsHEX32`</ph> except that it uses larger fields to accommodate larger values.","pos":[163,265],"source":" It is the same as `NumberOfItemsHEX32` except that it uses larger fields to accommodate larger values."}]}],"pos":[42743,43009],"yaml":true},{"content":"Formula: None. Does not display an average, but shows the raw data as it is collected","nodes":[{"pos":[0,85],"content":"Formula: None. Does not display an average, but shows the raw data as it is collected","nodes":[{"content":"Formula: None. Does not display an average, but shows the raw data as it is collected","pos":[0,85],"nodes":[{"content":"Formula: None.","pos":[0,14]},{"content":"Does not display an average, but shows the raw data as it is collected","pos":[15,85]}]}]}],"pos":[43020,43108],"yaml":true,"extradata":"MT"},{"content":"A difference counter that shows the average number of operations completed during each second of the sample interval. Counters of this type measure time in ticks of the system clock.","nodes":[{"pos":[0,182],"content":"A difference counter that shows the average number of operations completed during each second of the sample interval. Counters of this type measure time in ticks of the system clock.","nodes":[{"content":"A difference counter that shows the average number of operations completed during each second of the sample interval. Counters of this type measure time in ticks of the system clock.","pos":[0,182],"nodes":[{"content":"A difference counter that shows the average number of operations completed during each second of the sample interval.","pos":[0,117]},{"content":"Counters of this type measure time in ticks of the system clock.","pos":[118,182]}]}]}],"pos":[44304,44487],"yaml":true},{"content":"Formula: (N 1 - N 0) / ((D 1 -D 0) / F), where N 1 and N 0 are performance counter readings, D 1 and D 0 are their corresponding time readings, and F represents the number of ticks per second. Thus, the numerator represents the number of operations performed during the last sample interval, the denominator represents the number of ticks elapsed during the last sample interval, and F is the frequency of the ticks. The value of F is factored into the equation so that the result can be displayed in seconds.  \n  \n Counters of this type include System\\ File Read Operations/sec.","nodes":[{"pos":[0,509],"content":"Formula: (N 1 - N 0) / ((D 1 -D 0) / F), where N 1 and N 0 are performance counter readings, D 1 and D 0 are their corresponding time readings, and F represents the number of ticks per second. Thus, the numerator represents the number of operations performed during the last sample interval, the denominator represents the number of ticks elapsed during the last sample interval, and F is the frequency of the ticks. The value of F is factored into the equation so that the result can be displayed in seconds.","nodes":[{"content":"Formula: (N 1 - N 0) / ((D 1 -D 0) / F), where N 1 and N 0 are performance counter readings, D 1 and D 0 are their corresponding time readings, and F represents the number of ticks per second. Thus, the numerator represents the number of operations performed during the last sample interval, the denominator represents the number of ticks elapsed during the last sample interval, and F is the frequency of the ticks. The value of F is factored into the equation so that the result can be displayed in seconds.","pos":[0,509],"nodes":[{"content":"Formula: (N 1 - N 0) / ((D 1 -D 0) / F), where N 1 and N 0 are performance counter readings, D 1 and D 0 are their corresponding time readings, and F represents the number of ticks per second.","pos":[0,192]},{"content":"Thus, the numerator represents the number of operations performed during the last sample interval, the denominator represents the number of ticks elapsed during the last sample interval, and F is the frequency of the ticks.","pos":[193,416]},{"content":"The value of F is factored into the equation so that the result can be displayed in seconds.","pos":[417,509]}]}]},{"pos":[516,579],"content":"Counters of this type include System\\ File Read Operations/sec.","nodes":[{"content":"Counters of this type include System\\ File Read Operations/sec.","pos":[0,63]}]}],"pos":[44498,45083],"yaml":true,"extradata":"MT"},{"content":"A difference counter that shows the average number of operations completed during each second of the sample interval. Counters of this type measure time in ticks of the system clock. This counter type is the same as the `RateOfCountsPerSecond32` type, but it uses larger fields to accommodate larger values to track a high-volume number of items or operations per second, such as a byte-transmission rate.","nodes":[{"pos":[0,405],"content":"A difference counter that shows the average number of operations completed during each second of the sample interval. Counters of this type measure time in ticks of the system clock. This counter type is the same as the `RateOfCountsPerSecond32` type, but it uses larger fields to accommodate larger values to track a high-volume number of items or operations per second, such as a byte-transmission rate.","nodes":[{"content":"A difference counter that shows the average number of operations completed during each second of the sample interval.","pos":[0,117]},{"content":"Counters of this type measure time in ticks of the system clock.","pos":[118,182]},{"content":"This counter type is the same as the <ph id=\"ph1\">`RateOfCountsPerSecond32`</ph> type, but it uses larger fields to accommodate larger values to track a high-volume number of items or operations per second, such as a byte-transmission rate.","pos":[183,405],"source":" This counter type is the same as the `RateOfCountsPerSecond32` type, but it uses larger fields to accommodate larger values to track a high-volume number of items or operations per second, such as a byte-transmission rate."}]}],"pos":[46284,46690],"yaml":true},{"content":"Formula: (N 1 - N 0) / ((D 1 -D 0) / F), where N 1 and N 0 are performance counter readings, D 1 and D 0 are their corresponding time readings, and F represents the number of ticks per second. Thus, the numerator represents the number of operations performed during the last sample interval, the denominator represents the number of ticks elapsed during the last sample interval, and F is the frequency of the ticks. The value of F is factored into the equation so that the result can be displayed in seconds.  \n  \n Counters of this type include System\\ File Read Bytes/sec.","nodes":[{"pos":[0,509],"content":"Formula: (N 1 - N 0) / ((D 1 -D 0) / F), where N 1 and N 0 are performance counter readings, D 1 and D 0 are their corresponding time readings, and F represents the number of ticks per second. Thus, the numerator represents the number of operations performed during the last sample interval, the denominator represents the number of ticks elapsed during the last sample interval, and F is the frequency of the ticks. The value of F is factored into the equation so that the result can be displayed in seconds.","nodes":[{"content":"Formula: (N 1 - N 0) / ((D 1 -D 0) / F), where N 1 and N 0 are performance counter readings, D 1 and D 0 are their corresponding time readings, and F represents the number of ticks per second. Thus, the numerator represents the number of operations performed during the last sample interval, the denominator represents the number of ticks elapsed during the last sample interval, and F is the frequency of the ticks. The value of F is factored into the equation so that the result can be displayed in seconds.","pos":[0,509],"nodes":[{"content":"Formula: (N 1 - N 0) / ((D 1 -D 0) / F), where N 1 and N 0 are performance counter readings, D 1 and D 0 are their corresponding time readings, and F represents the number of ticks per second.","pos":[0,192]},{"content":"Thus, the numerator represents the number of operations performed during the last sample interval, the denominator represents the number of ticks elapsed during the last sample interval, and F is the frequency of the ticks.","pos":[193,416]},{"content":"The value of F is factored into the equation so that the result can be displayed in seconds.","pos":[417,509]}]}]},{"pos":[516,574],"content":"Counters of this type include System\\ File Read Bytes/sec.","nodes":[{"content":"Counters of this type include System\\ File Read Bytes/sec.","pos":[0,58]}]}],"pos":[46701,47281],"yaml":true,"extradata":"MT"},{"content":"A base counter that stores the denominator of a counter that presents a general arithmetic fraction. Check that this value is greater than zero before using it as the denominator in a `RawFraction` value calculation.","nodes":[{"pos":[0,216],"content":"A base counter that stores the denominator of a counter that presents a general arithmetic fraction. Check that this value is greater than zero before using it as the denominator in a `RawFraction` value calculation.","nodes":[{"content":"A base counter that stores the denominator of a counter that presents a general arithmetic fraction.","pos":[0,100]},{"content":"Check that this value is greater than zero before using it as the denominator in a <ph id=\"ph1\">`RawFraction`</ph> value calculation.","pos":[101,216],"source":" Check that this value is greater than zero before using it as the denominator in a `RawFraction` value calculation."}]}],"pos":[48386,48603],"yaml":true},{"content":"An instantaneous percentage counter that shows the ratio of a subset to its set as a percentage. For example, it compares the number of bytes in use on a disk to the total number of bytes on the disk. Counters of this type display the current percentage only, not an average over time.","nodes":[{"pos":[0,285],"content":"An instantaneous percentage counter that shows the ratio of a subset to its set as a percentage. For example, it compares the number of bytes in use on a disk to the total number of bytes on the disk. Counters of this type display the current percentage only, not an average over time.","nodes":[{"content":"An instantaneous percentage counter that shows the ratio of a subset to its set as a percentage. For example, it compares the number of bytes in use on a disk to the total number of bytes on the disk. Counters of this type display the current percentage only, not an average over time.","pos":[0,285],"nodes":[{"content":"An instantaneous percentage counter that shows the ratio of a subset to its set as a percentage.","pos":[0,96]},{"content":"For example, it compares the number of bytes in use on a disk to the total number of bytes on the disk.","pos":[97,200]},{"content":"Counters of this type display the current percentage only, not an average over time.","pos":[201,285]}]}]}],"pos":[49716,50002],"yaml":true},{"content":"Formula: (N 0 / D 0) x 100, where D 0 represents a measured attribute (using a base counter of type `RawBase`) and N 0 represents one component of that attribute.  \n  \n Counters of this type include Paging File\\\\% Usage Peak.","nodes":[{"pos":[0,162],"content":"Formula: (N 0 / D 0) x 100, where D 0 represents a measured attribute (using a base counter of type <ph id=\"ph1\">`RawBase`</ph>) and N 0 represents one component of that attribute.","source":"Formula: (N 0 / D 0) x 100, where D 0 represents a measured attribute (using a base counter of type `RawBase`) and N 0 represents one component of that attribute."},{"pos":[169,225],"content":"Counters of this type include Paging File\\\\% Usage Peak.","nodes":[{"content":"Counters of this type include Paging File<ph id=\"ph1\">\\\\</ph>% Usage Peak.","pos":[0,56],"source":"Counters of this type include Paging File\\\\% Usage Peak."}]}],"pos":[50013,50245],"yaml":true,"extradata":"MT"},{"content":"A base counter that stores the number of sampling interrupts taken and is used as a denominator in the sampling fraction. The sampling fraction is the number of samples that were 1 (or `true`) for a sample interrupt. Check that this value is greater than zero before using it as the denominator in a calculation of `SampleFraction`.","nodes":[{"pos":[0,332],"content":"A base counter that stores the number of sampling interrupts taken and is used as a denominator in the sampling fraction. The sampling fraction is the number of samples that were 1 (or `true`) for a sample interrupt. Check that this value is greater than zero before using it as the denominator in a calculation of `SampleFraction`.","nodes":[{"content":"A base counter that stores the number of sampling interrupts taken and is used as a denominator in the sampling fraction.","pos":[0,121]},{"content":"The sampling fraction is the number of samples that were 1 (or <ph id=\"ph1\">`true`</ph>) for a sample interrupt.","pos":[122,216],"source":" The sampling fraction is the number of samples that were 1 (or `true`) for a sample interrupt."},{"content":"Check that this value is greater than zero before using it as the denominator in a calculation of <ph id=\"ph1\">`SampleFraction`</ph>.","pos":[217,332],"source":" Check that this value is greater than zero before using it as the denominator in a calculation of `SampleFraction`."}]}],"pos":[51356,51689],"yaml":true},{"content":"An average counter that shows the average number of operations completed in one second. When a counter of this type samples the data, each sampling interrupt returns one or zero. The counter data is the number of ones that were sampled. It measures time in units of ticks of the system performance timer.","nodes":[{"pos":[0,304],"content":"An average counter that shows the average number of operations completed in one second. When a counter of this type samples the data, each sampling interrupt returns one or zero. The counter data is the number of ones that were sampled. It measures time in units of ticks of the system performance timer.","nodes":[{"content":"An average counter that shows the average number of operations completed in one second. When a counter of this type samples the data, each sampling interrupt returns one or zero. The counter data is the number of ones that were sampled. It measures time in units of ticks of the system performance timer.","pos":[0,304],"nodes":[{"content":"An average counter that shows the average number of operations completed in one second.","pos":[0,87]},{"content":"When a counter of this type samples the data, each sampling interrupt returns one or zero.","pos":[88,178]},{"content":"The counter data is the number of ones that were sampled.","pos":[179,236]},{"content":"It measures time in units of ticks of the system performance timer.","pos":[237,304]}]}]}],"pos":[52817,53122],"yaml":true},{"content":"Formula: (N 1 – N 0) / ((D 1 – D 0) / F), where the numerator (N) represents the number of operations completed, the denominator (D) represents elapsed time in units of ticks of the system performance timer, and F represents the number of ticks that elapse in one second. F is factored into the equation so that the result can be displayed in seconds.","nodes":[{"pos":[0,351],"content":"Formula: (N 1 – N 0) / ((D 1 – D 0) / F), where the numerator (N) represents the number of operations completed, the denominator (D) represents elapsed time in units of ticks of the system performance timer, and F represents the number of ticks that elapse in one second. F is factored into the equation so that the result can be displayed in seconds.","nodes":[{"content":"Formula: (N 1 – N 0) / ((D 1 – D 0) / F), where the numerator (N) represents the number of operations completed, the denominator (D) represents elapsed time in units of ticks of the system performance timer, and F represents the number of ticks that elapse in one second. F is factored into the equation so that the result can be displayed in seconds.","pos":[0,351],"nodes":[{"content":"Formula: (N 1 – N 0) / ((D 1 – D 0) / F), where the numerator (N) represents the number of operations completed, the denominator (D) represents elapsed time in units of ticks of the system performance timer, and F represents the number of ticks that elapse in one second.","pos":[0,271]},{"content":"F is factored into the equation so that the result can be displayed in seconds.","pos":[272,351]}]}]}],"pos":[53133,53487],"yaml":true,"extradata":"MT"},{"content":"A percentage counter that shows the average ratio of hits to all operations during the last two sample intervals.","nodes":[{"pos":[0,113],"content":"A percentage counter that shows the average ratio of hits to all operations during the last two sample intervals.","nodes":[{"content":"A percentage counter that shows the average ratio of hits to all operations during the last two sample intervals.","pos":[0,113]}]}],"pos":[54624,54738],"yaml":true},{"content":"Formula: ((N 1 - N 0) / (D 1 - D 0)) x 100, where the numerator represents the number of successful operations during the last sample interval, and the denominator represents the change in the number of all operations (of the type measured) completed during the sample interval, using counters of type `SampleBase`.  \n  \n Counters of this type include Cache\\Pin Read Hits %.","nodes":[{"pos":[0,315],"content":"Formula: ((N 1 - N 0) / (D 1 - D 0)) x 100, where the numerator represents the number of successful operations during the last sample interval, and the denominator represents the change in the number of all operations (of the type measured) completed during the sample interval, using counters of type <ph id=\"ph1\">`SampleBase`</ph>.","source":"Formula: ((N 1 - N 0) / (D 1 - D 0)) x 100, where the numerator represents the number of successful operations during the last sample interval, and the denominator represents the change in the number of all operations (of the type measured) completed during the sample interval, using counters of type `SampleBase`."},{"pos":[322,374],"content":"Counters of this type include Cache\\Pin Read Hits %.","nodes":[{"content":"Counters of this type include Cache\\Pin Read Hits %.","pos":[0,52]}]}],"pos":[54749,55129],"yaml":true,"extradata":"MT"},{"content":"A percentage counter that shows the active time of a component as a percentage of the total elapsed time of the sample interval. It measures time in units of 100 nanoseconds (ns). Counters of this type are designed to measure the activity of one component at a time.","nodes":[{"pos":[0,266],"content":"A percentage counter that shows the active time of a component as a percentage of the total elapsed time of the sample interval. It measures time in units of 100 nanoseconds (ns). Counters of this type are designed to measure the activity of one component at a time.","nodes":[{"content":"A percentage counter that shows the active time of a component as a percentage of the total elapsed time of the sample interval. It measures time in units of 100 nanoseconds (ns). Counters of this type are designed to measure the activity of one component at a time.","pos":[0,266],"nodes":[{"content":"A percentage counter that shows the active time of a component as a percentage of the total elapsed time of the sample interval.","pos":[0,128]},{"content":"It measures time in units of 100 nanoseconds (ns).","pos":[129,179]},{"content":"Counters of this type are designed to measure the activity of one component at a time.","pos":[180,266]}]}]}],"pos":[56243,56510],"yaml":true},{"content":"Formula: (N 1 - N 0) / (D 1 - D 0) x 100, where the numerator represents the portions of the sample interval during which the monitored components were active, and the denominator represents the total elapsed time of the sample interval.  \n  \n Counters of this type include Processor\\ % User Time.","nodes":[{"pos":[0,237],"content":"Formula: (N 1 - N 0) / (D 1 - D 0) x 100, where the numerator represents the portions of the sample interval during which the monitored components were active, and the denominator represents the total elapsed time of the sample interval.","nodes":[{"content":"Formula: (N 1 - N 0) / (D 1 - D 0) x 100, where the numerator represents the portions of the sample interval during which the monitored components were active, and the denominator represents the total elapsed time of the sample interval.","pos":[0,237]}]},{"pos":[244,297],"content":"Counters of this type include Processor\\ % User Time.","nodes":[{"content":"Counters of this type include Processor\\ % User Time.","pos":[0,53]}]}],"pos":[56521,56824],"yaml":true,"extradata":"MT"},{"content":"A percentage counter that shows the average percentage of active time observed during the sample interval.","nodes":[{"pos":[0,106],"content":"A percentage counter that shows the average percentage of active time observed during the sample interval.","nodes":[{"content":"A percentage counter that shows the average percentage of active time observed during the sample interval.","pos":[0,106]}]}],"pos":[57976,58083],"yaml":true},{"content":"This is an inverse counter. Counters of this type calculate active time by measuring the time that the service was inactive and then subtracting the percentage of active time from 100 percent.  \n  \n Formula: (1- ((N 1 - N 0) / (D 1 - D 0))) x 100, where the numerator represents the time during the interval when the monitored components were inactive, and the denominator represents the total elapsed time of the sample interval.  \n  \n Counters of this type include Processor\\ % Processor Time.","nodes":[{"pos":[0,192],"content":"This is an inverse counter. Counters of this type calculate active time by measuring the time that the service was inactive and then subtracting the percentage of active time from 100 percent.","nodes":[{"content":"This is an inverse counter. Counters of this type calculate active time by measuring the time that the service was inactive and then subtracting the percentage of active time from 100 percent.","pos":[0,192],"nodes":[{"content":"This is an inverse counter.","pos":[0,27]},{"content":"Counters of this type calculate active time by measuring the time that the service was inactive and then subtracting the percentage of active time from 100 percent.","pos":[28,192]}]}]},{"pos":[199,430],"content":"Formula: (1- ((N 1 - N 0) / (D 1 - D 0))) x 100, where the numerator represents the time during the interval when the monitored components were inactive, and the denominator represents the total elapsed time of the sample interval.","nodes":[{"content":"Formula: (1- ((N 1 - N 0) / (D 1 - D 0))) x 100, where the numerator represents the time during the interval when the monitored components were inactive, and the denominator represents the total elapsed time of the sample interval.","pos":[0,231]}]},{"pos":[437,495],"content":"Counters of this type include Processor\\ % Processor Time.","nodes":[{"content":"Counters of this type include Processor\\ % Processor Time.","pos":[0,58]}]}],"pos":[58094,58597],"yaml":true,"extradata":"MT"}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Diagnostics.PerformanceCounterType\n  commentId: T:System.Diagnostics.PerformanceCounterType\n  id: PerformanceCounterType\n  children:\n  - System.Diagnostics.PerformanceCounterType.AverageBase\n  - System.Diagnostics.PerformanceCounterType.AverageCount64\n  - System.Diagnostics.PerformanceCounterType.AverageTimer32\n  - System.Diagnostics.PerformanceCounterType.CounterDelta32\n  - System.Diagnostics.PerformanceCounterType.CounterDelta64\n  - System.Diagnostics.PerformanceCounterType.CounterMultiBase\n  - System.Diagnostics.PerformanceCounterType.CounterMultiTimer\n  - System.Diagnostics.PerformanceCounterType.CounterMultiTimer100Ns\n  - System.Diagnostics.PerformanceCounterType.CounterMultiTimer100NsInverse\n  - System.Diagnostics.PerformanceCounterType.CounterMultiTimerInverse\n  - System.Diagnostics.PerformanceCounterType.CounterTimer\n  - System.Diagnostics.PerformanceCounterType.CounterTimerInverse\n  - System.Diagnostics.PerformanceCounterType.CountPerTimeInterval32\n  - System.Diagnostics.PerformanceCounterType.CountPerTimeInterval64\n  - System.Diagnostics.PerformanceCounterType.ElapsedTime\n  - System.Diagnostics.PerformanceCounterType.NumberOfItems32\n  - System.Diagnostics.PerformanceCounterType.NumberOfItems64\n  - System.Diagnostics.PerformanceCounterType.NumberOfItemsHEX32\n  - System.Diagnostics.PerformanceCounterType.NumberOfItemsHEX64\n  - System.Diagnostics.PerformanceCounterType.RateOfCountsPerSecond32\n  - System.Diagnostics.PerformanceCounterType.RateOfCountsPerSecond64\n  - System.Diagnostics.PerformanceCounterType.RawBase\n  - System.Diagnostics.PerformanceCounterType.RawFraction\n  - System.Diagnostics.PerformanceCounterType.SampleBase\n  - System.Diagnostics.PerformanceCounterType.SampleCounter\n  - System.Diagnostics.PerformanceCounterType.SampleFraction\n  - System.Diagnostics.PerformanceCounterType.Timer100Ns\n  - System.Diagnostics.PerformanceCounterType.Timer100NsInverse\n  langs:\n  - csharp\n  name: PerformanceCounterType\n  nameWithType: PerformanceCounterType\n  fullName: System.Diagnostics.PerformanceCounterType\n  type: Enum\n  assemblies:\n  - System\n  - System.Diagnostics.PerformanceCounter\n  namespace: System.Diagnostics\n  summary: Specifies the formula used to calculate the <xref href=\"System.Diagnostics.PerformanceCounter.NextValue\"></xref> method for a <xref href=\"System.Diagnostics.PerformanceCounter\"></xref> instance.\n  remarks: \"Some counter types represent raw data, while others represent calculated values that are based on one or more counter samples. The following categories classify the types of counters available.  \\n  \\n-   Average: measure a value over time and display the average of the last two measurements. Associated with each average counter is a base counter that tracks the number of samples involved.  \\n  \\n-   Difference: subtract the last measurement from the previous one and display the difference, if it is positive; if negative, they display a zero.  \\n  \\n-   Instantaneous: display the most recent measurement.  \\n  \\n-   Percentage: display calculated values as a percentage.  \\n  \\n-   Rate: sample an increasing count of events over time and divide the change in count values by the change in time to display a rate of activity.  \\n  \\n When sampling performance counter data, using a counter type that represents an average can make raw data values meaningful for your use. For example, the raw data counter `NumberOfItems64` can expose data that is fairly random from sample to sample. The formula for an average calculation of the values that the counter returns would be (X 0 +X 1 +…+X n)/n, where each X i is a raw counter sample.  \\n  \\n Rate counters are similar to average counters, but more useful for situations in which the rate increases as a resource is used. A formula that quickly calculates the average is ((X n -X 0)/(T n -T 0)) / frequency, where each X i is a counter sample and each T i is the time that the corresponding sample was taken. The result is the average usage per second.  \\n  \\n> [!NOTE]\\n>  Unless otherwise indicated, the time base is seconds.  \\n  \\n When instrumenting applications (creating and writing custom performance counters), you might be working with performance counter types that rely on an accompanying base counter that is used in the calculations. The base counter must be immediately after its associated counter in the <xref:System.Diagnostics.CounterCreationDataCollection> collection your application uses. The following table lists the base counter types with their corresponding performance counter types.  \\n  \\n|Base counter type|Performance counter types|  \\n|-----------------------|-------------------------------|  \\n|`AverageBase`|`AverageTimer32`<br /><br /> `AverageCount64`|  \\n|`CounterMultiBase`|`CounterMultiTimer`<br /><br /> `CounterMultiTimerInverse`<br /><br /> `CounterMultiTimer100Ns`<br /><br /> `CounterMultiTimer100NsInverse`|  \\n|`RawBase`|`RawFraction`|  \\n|`SampleBase`|`SampleFraction`|\"\n  example:\n  - \"The following examples demonstrate several of the counter types in the <xref:System.Diagnostics.PerformanceCounterType> enumeration.  \\n  \\n `AverageCount64`  \\n  \\n [!code-cpp[PerformanceCounterType.AverageCounter64#1](~/samples/snippets/cpp/VS_Snippets_CLR/PerformanceCounterType.AverageCounter64/CPP/averagecount32.cpp#1)]\\n [!code-csharp[PerformanceCounterType.AverageCounter64#1](~/samples/snippets/csharp/VS_Snippets_CLR/PerformanceCounterType.AverageCounter64/CS/averagecount32.cs#1)]\\n [!code-vb[PerformanceCounterType.AverageCounter64#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/PerformanceCounterType.AverageCounter64/VB/averagecount32.vb#1)]  \\n  \\n `AverageTimer32`  \\n  \\n [!code-cpp[PerformanceCounterType.AverageTimer32#2](~/samples/snippets/cpp/VS_Snippets_CLR/PerformanceCounterType.AverageTimer32/CPP/averagetimer32.cpp#2)]\\n [!code-csharp[PerformanceCounterType.AverageTimer32#2](~/samples/snippets/csharp/VS_Snippets_CLR/PerformanceCounterType.AverageTimer32/CS/averagetimer32.cs#2)]\\n [!code-vb[PerformanceCounterType.AverageTimer32#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/PerformanceCounterType.AverageTimer32/VB/averagetimer32.vb#2)]  \\n  \\n `ElapsedTime`  \\n  \\n [!code-cpp[PerformanceCounterType.ElapsedTime#2](~/samples/snippets/cpp/VS_Snippets_CLR/PerformanceCounterType.ElapsedTime/CPP/elapsedtime.cpp#2)]\\n [!code-csharp[PerformanceCounterType.ElapsedTime#2](~/samples/snippets/csharp/VS_Snippets_CLR/PerformanceCounterType.ElapsedTime/CS/elapsedtime.cs#2)]\\n [!code-vb[PerformanceCounterType.ElapsedTime#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/PerformanceCounterType.ElapsedTime/VB/elapsedtime.vb#2)]  \\n  \\n `NumberOfItems32`  \\n  \\n [!code-cpp[PerformanceCounterType.NumberOfItems32#1](~/samples/snippets/cpp/VS_Snippets_CLR/PerformanceCounterType.NumberOfItems32/CPP/numberofitems32.cpp#1)]\\n [!code-csharp[PerformanceCounterType.NumberOfItems32#1](~/samples/snippets/csharp/VS_Snippets_CLR/PerformanceCounterType.NumberOfItems32/CS/numberofitems32.cs#1)]\\n [!code-vb[PerformanceCounterType.NumberOfItems32#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/PerformanceCounterType.NumberOfItems32/VB/numberofitems32.vb#1)]  \\n  \\n `NumberOfItems64`  \\n  \\n [!code-cpp[PerformanceCounterType.NumberOfItems64#1](~/samples/snippets/cpp/VS_Snippets_CLR/PerformanceCounterType.NumberOfItems64/CPP/numberofitems64.cpp#1)]\\n [!code-csharp[PerformanceCounterType.NumberOfItems64#1](~/samples/snippets/csharp/VS_Snippets_CLR/PerformanceCounterType.NumberOfItems64/CS/numberofitems64.cs#1)]\\n [!code-vb[PerformanceCounterType.NumberOfItems64#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/PerformanceCounterType.NumberOfItems64/VB/numberofitems64.vb#1)]  \\n  \\n `SampleFraction`  \\n  \\n [!code-csharp[PerformanceCounterType.SampleFraction#1](~/samples/snippets/csharp/VS_Snippets_CLR/PerformanceCounterType.SampleFraction/CS/program.cs#1)]\\n [!code-vb[PerformanceCounterType.SampleFraction#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/PerformanceCounterType.SampleFraction/VB/program.vb#1)]  \\n  \\n `RateOfCountsPerSecond32`  \\n  \\n [!code-cpp[PerformanceCounterType.RateOfCountsPerSecond#1](~/samples/snippets/cpp/VS_Snippets_CLR/PerformanceCounterType.RateOfCountsPerSecond/CPP/rateofcountspersecond32.cpp#1)]\\n [!code-csharp[PerformanceCounterType.RateOfCountsPerSecond#1](~/samples/snippets/csharp/VS_Snippets_CLR/PerformanceCounterType.RateOfCountsPerSecond/CS/rateofcountspersecond32.cs#1)]\\n [!code-vb[PerformanceCounterType.RateOfCountsPerSecond#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/PerformanceCounterType.RateOfCountsPerSecond/VB/rateofcountspersecond32.vb#1)]  \\n  \\n `RateOfCountsPerSecond64`  \\n  \\n [!code-cpp[PerformanceCounterType.RateOfCountsPerSecond64#1](~/samples/snippets/cpp/VS_Snippets_CLR/PerformanceCounterType.RateOfCountsPerSecond64/CPP/rateofcountspersecond64.cpp#1)]\\n [!code-csharp[PerformanceCounterType.RateOfCountsPerSecond64#1](~/samples/snippets/csharp/VS_Snippets_CLR/PerformanceCounterType.RateOfCountsPerSecond64/CS/rateofcountspersecond64.cs#1)]\\n [!code-vb[PerformanceCounterType.RateOfCountsPerSecond64#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/PerformanceCounterType.RateOfCountsPerSecond64/VB/rateofcountspersecond64.vb#1)]  \\n  \\n `RawFraction`  \\n  \\n [!code-cpp[PerformanceCounterType.RawFraction#1](~/samples/snippets/cpp/VS_Snippets_CLR/PerformanceCounterType.RawFraction/CPP/rawfraction.cpp#1)]\\n [!code-csharp[PerformanceCounterType.RawFraction#1](~/samples/snippets/csharp/VS_Snippets_CLR/PerformanceCounterType.RawFraction/CS/rawfraction.cs#1)]\\n [!code-vb[PerformanceCounterType.RawFraction#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/PerformanceCounterType.RawFraction/VB/rawfraction.vb#1)]\"\n  syntax:\n    content: >-\n      [System.ComponentModel.TypeConverter(typeof(System.Diagnostics.AlphabeticalEnumConverter))]\n\n      public enum PerformanceCounterType\n  inheritance:\n  - System.Object\n  - System.ValueType\n  - System.Enum\n  attributes:\n  - type: System.ComponentModel.TypeConverterAttribute\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics/PerformanceCounterType.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Diagnostics.PerformanceCounterType.AverageBase\n  commentId: F:System.Diagnostics.PerformanceCounterType.AverageBase\n  id: AverageBase\n  parent: System.Diagnostics.PerformanceCounterType\n  langs:\n  - csharp\n  name: AverageBase\n  nameWithType: PerformanceCounterType.AverageBase\n  fullName: PerformanceCounterType.AverageBase\n  type: Field\n  assemblies:\n  - System\n  - System.Diagnostics.PerformanceCounter\n  namespace: System.Diagnostics\n  summary: A base counter that is used in the calculation of time or count averages, such as `AverageTimer32` and `AverageCount64`. Stores the denominator for calculating a counter to present \"time per operation\" or \"count per operation\".\n  syntax:\n    content: AverageBase\n    return:\n      type: System.Diagnostics.PerformanceCounterType\n      description: ''\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics/PerformanceCounterType.xml\n- uid: System.Diagnostics.PerformanceCounterType.AverageCount64\n  commentId: F:System.Diagnostics.PerformanceCounterType.AverageCount64\n  id: AverageCount64\n  parent: System.Diagnostics.PerformanceCounterType\n  langs:\n  - csharp\n  name: AverageCount64\n  nameWithType: PerformanceCounterType.AverageCount64\n  fullName: PerformanceCounterType.AverageCount64\n  type: Field\n  assemblies:\n  - System\n  - System.Diagnostics.PerformanceCounter\n  namespace: System.Diagnostics\n  summary: An average counter that shows how many items are processed, on average, during an operation. Counters of this type display a ratio of the items processed to the number of operations completed. The ratio is calculated by comparing the number of items processed during the last interval to the number of operations completed during the last interval.\n  remarks: \"Formula: (N 1 -N 0)/(B 1 -B 0), where N 1 and N 0 are performance counter readings, and the B 1 and B 0 are their corresponding `AverageBase` values. Thus, the numerator represents the numbers of items processed during the sample interval, and the denominator represents the number of operations completed during the sample interval.  \\n  \\n Counters of this type include PhysicalDisk\\\\ Avg. Disk Bytes/Transfer.\"\n  syntax:\n    content: AverageCount64\n    return:\n      type: System.Diagnostics.PerformanceCounterType\n      description: ''\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics/PerformanceCounterType.xml\n- uid: System.Diagnostics.PerformanceCounterType.AverageTimer32\n  commentId: F:System.Diagnostics.PerformanceCounterType.AverageTimer32\n  id: AverageTimer32\n  parent: System.Diagnostics.PerformanceCounterType\n  langs:\n  - csharp\n  name: AverageTimer32\n  nameWithType: PerformanceCounterType.AverageTimer32\n  fullName: PerformanceCounterType.AverageTimer32\n  type: Field\n  assemblies:\n  - System\n  - System.Diagnostics.PerformanceCounter\n  namespace: System.Diagnostics\n  summary: An average counter that measures the time it takes, on average, to complete a process or operation. Counters of this type display a ratio of the total elapsed time of the sample interval to the number of processes or operations completed during that time. This counter type measures time in ticks of the system clock.\n  remarks: \"Formula: ((N 1 -N 0)/F)/(B 1 -B 0), where N 1 and N 0 are performance counter readings, B 1 and B 0 are their corresponding `AverageBase` values, and F is the number of ticks per second. The value of F is factored into the equation so that the result can be displayed in seconds. Thus, the numerator represents the numbers of ticks counted during the last sample interval, F represents the frequency of the ticks, and the denominator represents the number of operations completed during the last sample interval.  \\n  \\n Counters of this type include PhysicalDisk\\\\ Avg. Disk sec/Transfer.\"\n  syntax:\n    content: AverageTimer32\n    return:\n      type: System.Diagnostics.PerformanceCounterType\n      description: ''\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics/PerformanceCounterType.xml\n- uid: System.Diagnostics.PerformanceCounterType.CounterDelta32\n  commentId: F:System.Diagnostics.PerformanceCounterType.CounterDelta32\n  id: CounterDelta32\n  parent: System.Diagnostics.PerformanceCounterType\n  langs:\n  - csharp\n  name: CounterDelta32\n  nameWithType: PerformanceCounterType.CounterDelta32\n  fullName: PerformanceCounterType.CounterDelta32\n  type: Field\n  assemblies:\n  - System\n  - System.Diagnostics.PerformanceCounter\n  namespace: System.Diagnostics\n  summary: A difference counter that shows the change in the measured attribute between the two most recent sample intervals.\n  remarks: 'Formula: N 1 -N 0, where N 1 and N 0 are performance counter readings.'\n  syntax:\n    content: CounterDelta32\n    return:\n      type: System.Diagnostics.PerformanceCounterType\n      description: ''\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics/PerformanceCounterType.xml\n- uid: System.Diagnostics.PerformanceCounterType.CounterDelta64\n  commentId: F:System.Diagnostics.PerformanceCounterType.CounterDelta64\n  id: CounterDelta64\n  parent: System.Diagnostics.PerformanceCounterType\n  langs:\n  - csharp\n  name: CounterDelta64\n  nameWithType: PerformanceCounterType.CounterDelta64\n  fullName: PerformanceCounterType.CounterDelta64\n  type: Field\n  assemblies:\n  - System\n  - System.Diagnostics.PerformanceCounter\n  namespace: System.Diagnostics\n  summary: A difference counter that shows the change in the measured attribute between the two most recent sample intervals. It is the same as the `CounterDelta32` counter type except that is uses larger fields to accomodate larger values.\n  remarks: 'Formula: N 1 -N 0, where N 1 and N 0 are performance counter readings.'\n  syntax:\n    content: CounterDelta64\n    return:\n      type: System.Diagnostics.PerformanceCounterType\n      description: ''\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics/PerformanceCounterType.xml\n- uid: System.Diagnostics.PerformanceCounterType.CounterMultiBase\n  commentId: F:System.Diagnostics.PerformanceCounterType.CounterMultiBase\n  id: CounterMultiBase\n  parent: System.Diagnostics.PerformanceCounterType\n  langs:\n  - csharp\n  name: CounterMultiBase\n  nameWithType: PerformanceCounterType.CounterMultiBase\n  fullName: PerformanceCounterType.CounterMultiBase\n  type: Field\n  assemblies:\n  - System\n  - System.Diagnostics.PerformanceCounter\n  namespace: System.Diagnostics\n  summary: A base counter that indicates the number of items sampled. It is used as the denominator in the calculations to get an average among the items sampled when taking timings of multiple, but similar items. Used with `CounterMultiTimer`, `CounterMultiTimerInverse`, `CounterMultiTimer100Ns`, and `CounterMultiTimer100NsInverse`.\n  syntax:\n    content: CounterMultiBase\n    return:\n      type: System.Diagnostics.PerformanceCounterType\n      description: ''\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics/PerformanceCounterType.xml\n- uid: System.Diagnostics.PerformanceCounterType.CounterMultiTimer\n  commentId: F:System.Diagnostics.PerformanceCounterType.CounterMultiTimer\n  id: CounterMultiTimer\n  parent: System.Diagnostics.PerformanceCounterType\n  langs:\n  - csharp\n  name: CounterMultiTimer\n  nameWithType: PerformanceCounterType.CounterMultiTimer\n  fullName: PerformanceCounterType.CounterMultiTimer\n  type: Field\n  assemblies:\n  - System\n  - System.Diagnostics.PerformanceCounter\n  namespace: System.Diagnostics\n  summary: A percentage counter that displays the active time of one or more components as a percentage of the total time of the sample interval. Because the numerator records the active time of components operating simultaneously, the resulting percentage can exceed 100 percent.\n  remarks: \"This counter is a multitimer. Multitimers collect data from more than one instance of a component, such as a processor or disk. This counter type differs from `CounterMultiTimer100Ns` in that it measures time in units of ticks of the system performance timer, rather than in 100 nanosecond units.  \\n  \\n Formula: ((N 1 - N 0) / (D 1 - D 0)) x 100 / B, where N 1 and N 0 are performance counter readings, D 1 and D 0 are their corresponding time readings in ticks of the system performance timer, and the variable B denotes the base count for the monitored components (using a base counter of type `CounterMultiBase`). Thus, the numerator represents the portions of the sample interval during which the monitored components were active, and the denominator represents the total elapsed time of the sample interval.\"\n  syntax:\n    content: CounterMultiTimer\n    return:\n      type: System.Diagnostics.PerformanceCounterType\n      description: ''\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics/PerformanceCounterType.xml\n- uid: System.Diagnostics.PerformanceCounterType.CounterMultiTimer100Ns\n  commentId: F:System.Diagnostics.PerformanceCounterType.CounterMultiTimer100Ns\n  id: CounterMultiTimer100Ns\n  parent: System.Diagnostics.PerformanceCounterType\n  langs:\n  - csharp\n  name: CounterMultiTimer100Ns\n  nameWithType: PerformanceCounterType.CounterMultiTimer100Ns\n  fullName: PerformanceCounterType.CounterMultiTimer100Ns\n  type: Field\n  assemblies:\n  - System\n  - System.Diagnostics.PerformanceCounter\n  namespace: System.Diagnostics\n  summary: A percentage counter that shows the active time of one or more components as a percentage of the total time of the sample interval. It measures time in 100 nanosecond (ns) units.\n  remarks: \"This counter type is a multitimer. Multitimers are designed to monitor more than one instance of a component, such as a processor or disk.  \\n  \\n Formula: ((N 1 - N 0) / (D 1 - D 0)) x 100 / B, where N 1 and N 0 are performance counter readings, D 1 and D 0 are their corresponding time readings in 100-nanosecond units, and the variable B denotes the base count for the monitored components (using a base counter of type `CounterMultiBase`). Thus, the numerator represents the portions of the sample interval during which the monitored components were active, and the denominator represents the total elapsed time of the sample interval.\"\n  syntax:\n    content: CounterMultiTimer100Ns\n    return:\n      type: System.Diagnostics.PerformanceCounterType\n      description: ''\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics/PerformanceCounterType.xml\n- uid: System.Diagnostics.PerformanceCounterType.CounterMultiTimer100NsInverse\n  commentId: F:System.Diagnostics.PerformanceCounterType.CounterMultiTimer100NsInverse\n  id: CounterMultiTimer100NsInverse\n  parent: System.Diagnostics.PerformanceCounterType\n  langs:\n  - csharp\n  name: CounterMultiTimer100NsInverse\n  nameWithType: PerformanceCounterType.CounterMultiTimer100NsInverse\n  fullName: PerformanceCounterType.CounterMultiTimer100NsInverse\n  type: Field\n  assemblies:\n  - System\n  - System.Diagnostics.PerformanceCounter\n  namespace: System.Diagnostics\n  summary: A percentage counter that shows the active time of one or more components as a percentage of the total time of the sample interval. Counters of this type measure time in 100 nanosecond (ns) units. They derive the active time by measuring the time that the components were not active and subtracting the result from multiplying 100 percent by the number of objects monitored.\n  remarks: \"This counter type is an inverse multitimer. Multitimers are designed to monitor more than one instance of a component, such as a processor or disk. Inverse counters measure the time that a component is not active and derive its active time from the measurement of inactive time  \\n  \\n Formula: (B - ((N 1 - N 0) / (D 1 - D 0))) x 100, where the denominator represents the total elapsed time of the sample interval, the numerator represents the time during the interval when monitored components were inactive, and B represents the number of components being monitored, using a base counter of type `CounterMultiBase`.\"\n  syntax:\n    content: CounterMultiTimer100NsInverse\n    return:\n      type: System.Diagnostics.PerformanceCounterType\n      description: ''\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics/PerformanceCounterType.xml\n- uid: System.Diagnostics.PerformanceCounterType.CounterMultiTimerInverse\n  commentId: F:System.Diagnostics.PerformanceCounterType.CounterMultiTimerInverse\n  id: CounterMultiTimerInverse\n  parent: System.Diagnostics.PerformanceCounterType\n  langs:\n  - csharp\n  name: CounterMultiTimerInverse\n  nameWithType: PerformanceCounterType.CounterMultiTimerInverse\n  fullName: PerformanceCounterType.CounterMultiTimerInverse\n  type: Field\n  assemblies:\n  - System\n  - System.Diagnostics.PerformanceCounter\n  namespace: System.Diagnostics\n  summary: A percentage counter that shows the active time of one or more components as a percentage of the total time of the sample interval. It derives the active time by measuring the time that the components were not active and subtracting the result from 100 percent by the number of objects monitored.\n  remarks: \"This counter type is an inverse multitimer. Multitimers monitor more than one instance of a component, such as a processor or disk. Inverse counters measure the time that a component is not active and derive its active time from that measurement.  \\n  \\n This counter differs from `CounterMultiTimer100NsInverse` in that it measures time in units of ticks of the system performance timer, rather than in 100 nanosecond units.  \\n  \\n Formula: (B- ((N 1 - N 0) / (D 1 - D 0))) x 100, where the denominator represents the total elapsed time of the sample interval, the numerator represents the time during the interval when monitored components were inactive, and B represents the number of components being monitored, using a base counter of type `CounterMultiBase`.\"\n  syntax:\n    content: CounterMultiTimerInverse\n    return:\n      type: System.Diagnostics.PerformanceCounterType\n      description: ''\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics/PerformanceCounterType.xml\n- uid: System.Diagnostics.PerformanceCounterType.CounterTimer\n  commentId: F:System.Diagnostics.PerformanceCounterType.CounterTimer\n  id: CounterTimer\n  parent: System.Diagnostics.PerformanceCounterType\n  langs:\n  - csharp\n  name: CounterTimer\n  nameWithType: PerformanceCounterType.CounterTimer\n  fullName: PerformanceCounterType.CounterTimer\n  type: Field\n  assemblies:\n  - System\n  - System.Diagnostics.PerformanceCounter\n  namespace: System.Diagnostics\n  summary: A percentage counter that shows the average time that a component is active as a percentage of the total sample time.\n  remarks: 'Formula: (N 1 - N 0) / (D 1 - D 0), where N 1 and N 0 are performance counter readings, and D 1 and D 0 are their corresponding time readings. Thus, the numerator represents the portions of the sample interval during which the monitored components were active, and the denominator represents the total elapsed time of the sample interval.'\n  syntax:\n    content: CounterTimer\n    return:\n      type: System.Diagnostics.PerformanceCounterType\n      description: ''\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics/PerformanceCounterType.xml\n- uid: System.Diagnostics.PerformanceCounterType.CounterTimerInverse\n  commentId: F:System.Diagnostics.PerformanceCounterType.CounterTimerInverse\n  id: CounterTimerInverse\n  parent: System.Diagnostics.PerformanceCounterType\n  langs:\n  - csharp\n  name: CounterTimerInverse\n  nameWithType: PerformanceCounterType.CounterTimerInverse\n  fullName: PerformanceCounterType.CounterTimerInverse\n  type: Field\n  assemblies:\n  - System\n  - System.Diagnostics.PerformanceCounter\n  namespace: System.Diagnostics\n  summary: A percentage counter that displays the average percentage of active time observed during sample interval. The value of these counters is calculated by monitoring the percentage of time that the service was inactive and then subtracting that value from 100 percent.\n  remarks: \"This is an inverse counter type. Inverse counters measure the time that a component is note active and derive the active time from that measurement. This counter type is the same as `CounterTimer100NsInv` except that it measures time in units of ticks of the system performance timer rather than in 100 nanosecond units.  \\n  \\n Formula: (1- ((N 1 - N 0) / (D 1 - D 0))) x 100, where the numerator represents the time during the interval when the monitored components were inactive, and the denominator represents the total elapsed time of the sample interval.\"\n  syntax:\n    content: CounterTimerInverse\n    return:\n      type: System.Diagnostics.PerformanceCounterType\n      description: ''\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics/PerformanceCounterType.xml\n- uid: System.Diagnostics.PerformanceCounterType.CountPerTimeInterval32\n  commentId: F:System.Diagnostics.PerformanceCounterType.CountPerTimeInterval32\n  id: CountPerTimeInterval32\n  parent: System.Diagnostics.PerformanceCounterType\n  langs:\n  - csharp\n  name: CountPerTimeInterval32\n  nameWithType: PerformanceCounterType.CountPerTimeInterval32\n  fullName: PerformanceCounterType.CountPerTimeInterval32\n  type: Field\n  assemblies:\n  - System\n  - System.Diagnostics.PerformanceCounter\n  namespace: System.Diagnostics\n  summary: An average counter designed to monitor the average length of a queue to a resource over time. It shows the difference between the queue lengths observed during the last two sample intervals divided by the duration of the interval. This type of counter is typically used to track the number of items that are queued or waiting.\n  remarks: 'Formula: (N 1 - N 0) / (D 1 - D 0), where the numerator represents the number of items in the queue and the denominator represents the time elapsed during the last sample interval.'\n  syntax:\n    content: CountPerTimeInterval32\n    return:\n      type: System.Diagnostics.PerformanceCounterType\n      description: ''\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics/PerformanceCounterType.xml\n- uid: System.Diagnostics.PerformanceCounterType.CountPerTimeInterval64\n  commentId: F:System.Diagnostics.PerformanceCounterType.CountPerTimeInterval64\n  id: CountPerTimeInterval64\n  parent: System.Diagnostics.PerformanceCounterType\n  langs:\n  - csharp\n  name: CountPerTimeInterval64\n  nameWithType: PerformanceCounterType.CountPerTimeInterval64\n  fullName: PerformanceCounterType.CountPerTimeInterval64\n  type: Field\n  assemblies:\n  - System\n  - System.Diagnostics.PerformanceCounter\n  namespace: System.Diagnostics\n  summary: An average counter that monitors the average length of a queue to a resource over time. Counters of this type display the difference between the queue lengths observed during the last two sample intervals, divided by the duration of the interval. This counter type is the same as `CountPerTimeInterval32` except that it uses larger fields to accommodate larger values. This type of counter is typically used to track a high-volume or very large number of items that are queued or waiting.\n  remarks: 'Formula: (N 1 - N 0) / (D 1 - D 0), where the numerator represents the number of items in a queue and the denominator represents the time elapsed during the sample interval.'\n  syntax:\n    content: CountPerTimeInterval64\n    return:\n      type: System.Diagnostics.PerformanceCounterType\n      description: ''\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics/PerformanceCounterType.xml\n- uid: System.Diagnostics.PerformanceCounterType.ElapsedTime\n  commentId: F:System.Diagnostics.PerformanceCounterType.ElapsedTime\n  id: ElapsedTime\n  parent: System.Diagnostics.PerformanceCounterType\n  langs:\n  - csharp\n  name: ElapsedTime\n  nameWithType: PerformanceCounterType.ElapsedTime\n  fullName: PerformanceCounterType.ElapsedTime\n  type: Field\n  assemblies:\n  - System\n  - System.Diagnostics.PerformanceCounter\n  namespace: System.Diagnostics\n  summary: A difference timer that shows the total time between when the component or process started and the time when this value is calculated.\n  remarks: \"Formula: (D 0 - N 0) / F, where D 0 represents the current time, N 0 represents the time the object was started, and F represents the number of time units that elapse in one second. The value of F is factored into the equation so that the result can be displayed in seconds.  \\n  \\n Counters of this type include System\\\\ System Up Time.\"\n  syntax:\n    content: ElapsedTime\n    return:\n      type: System.Diagnostics.PerformanceCounterType\n      description: ''\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics/PerformanceCounterType.xml\n- uid: System.Diagnostics.PerformanceCounterType.NumberOfItems32\n  commentId: F:System.Diagnostics.PerformanceCounterType.NumberOfItems32\n  id: NumberOfItems32\n  parent: System.Diagnostics.PerformanceCounterType\n  langs:\n  - csharp\n  name: NumberOfItems32\n  nameWithType: PerformanceCounterType.NumberOfItems32\n  fullName: PerformanceCounterType.NumberOfItems32\n  type: Field\n  assemblies:\n  - System\n  - System.Diagnostics.PerformanceCounter\n  namespace: System.Diagnostics\n  summary: An instantaneous counter that shows the most recently observed value. Used, for example, to maintain a simple count of items or operations.\n  remarks: \"Formula: None. Does not display an average, but shows the raw data as it is collected.  \\n  \\n Counters of this type include Memory\\\\Available Bytes.\"\n  syntax:\n    content: NumberOfItems32\n    return:\n      type: System.Diagnostics.PerformanceCounterType\n      description: ''\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics/PerformanceCounterType.xml\n- uid: System.Diagnostics.PerformanceCounterType.NumberOfItems64\n  commentId: F:System.Diagnostics.PerformanceCounterType.NumberOfItems64\n  id: NumberOfItems64\n  parent: System.Diagnostics.PerformanceCounterType\n  langs:\n  - csharp\n  name: NumberOfItems64\n  nameWithType: PerformanceCounterType.NumberOfItems64\n  fullName: PerformanceCounterType.NumberOfItems64\n  type: Field\n  assemblies:\n  - System\n  - System.Diagnostics.PerformanceCounter\n  namespace: System.Diagnostics\n  summary: An instantaneous counter that shows the most recently observed value. Used, for example, to maintain a simple count of a very large number of items or operations. It is the same as `NumberOfItems32` except that it uses larger fields to accommodate larger values.\n  remarks: 'Formula: None. Does not display an average, but shows the raw data as it is collected.'\n  syntax:\n    content: NumberOfItems64\n    return:\n      type: System.Diagnostics.PerformanceCounterType\n      description: ''\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics/PerformanceCounterType.xml\n- uid: System.Diagnostics.PerformanceCounterType.NumberOfItemsHEX32\n  commentId: F:System.Diagnostics.PerformanceCounterType.NumberOfItemsHEX32\n  id: NumberOfItemsHEX32\n  parent: System.Diagnostics.PerformanceCounterType\n  langs:\n  - csharp\n  name: NumberOfItemsHEX32\n  nameWithType: PerformanceCounterType.NumberOfItemsHEX32\n  fullName: PerformanceCounterType.NumberOfItemsHEX32\n  type: Field\n  assemblies:\n  - System\n  - System.Diagnostics.PerformanceCounter\n  namespace: System.Diagnostics\n  summary: An instantaneous counter that shows the most recently observed value in hexadecimal format. Used, for example, to maintain a simple count of items or operations.\n  remarks: 'Formula: None. Does not display an average, but shows the raw data as it is collected.'\n  syntax:\n    content: NumberOfItemsHEX32\n    return:\n      type: System.Diagnostics.PerformanceCounterType\n      description: ''\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics/PerformanceCounterType.xml\n- uid: System.Diagnostics.PerformanceCounterType.NumberOfItemsHEX64\n  commentId: F:System.Diagnostics.PerformanceCounterType.NumberOfItemsHEX64\n  id: NumberOfItemsHEX64\n  parent: System.Diagnostics.PerformanceCounterType\n  langs:\n  - csharp\n  name: NumberOfItemsHEX64\n  nameWithType: PerformanceCounterType.NumberOfItemsHEX64\n  fullName: PerformanceCounterType.NumberOfItemsHEX64\n  type: Field\n  assemblies:\n  - System\n  - System.Diagnostics.PerformanceCounter\n  namespace: System.Diagnostics\n  summary: An instantaneous counter that shows the most recently observed value. Used, for example, to maintain a simple count of a very large number of items or operations. It is the same as `NumberOfItemsHEX32` except that it uses larger fields to accommodate larger values.\n  remarks: 'Formula: None. Does not display an average, but shows the raw data as it is collected'\n  syntax:\n    content: NumberOfItemsHEX64\n    return:\n      type: System.Diagnostics.PerformanceCounterType\n      description: ''\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics/PerformanceCounterType.xml\n- uid: System.Diagnostics.PerformanceCounterType.RateOfCountsPerSecond32\n  commentId: F:System.Diagnostics.PerformanceCounterType.RateOfCountsPerSecond32\n  id: RateOfCountsPerSecond32\n  parent: System.Diagnostics.PerformanceCounterType\n  langs:\n  - csharp\n  name: RateOfCountsPerSecond32\n  nameWithType: PerformanceCounterType.RateOfCountsPerSecond32\n  fullName: PerformanceCounterType.RateOfCountsPerSecond32\n  type: Field\n  assemblies:\n  - System\n  - System.Diagnostics.PerformanceCounter\n  namespace: System.Diagnostics\n  summary: A difference counter that shows the average number of operations completed during each second of the sample interval. Counters of this type measure time in ticks of the system clock.\n  remarks: \"Formula: (N 1 - N 0) / ((D 1 -D 0) / F), where N 1 and N 0 are performance counter readings, D 1 and D 0 are their corresponding time readings, and F represents the number of ticks per second. Thus, the numerator represents the number of operations performed during the last sample interval, the denominator represents the number of ticks elapsed during the last sample interval, and F is the frequency of the ticks. The value of F is factored into the equation so that the result can be displayed in seconds.  \\n  \\n Counters of this type include System\\\\ File Read Operations/sec.\"\n  syntax:\n    content: RateOfCountsPerSecond32\n    return:\n      type: System.Diagnostics.PerformanceCounterType\n      description: ''\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics/PerformanceCounterType.xml\n- uid: System.Diagnostics.PerformanceCounterType.RateOfCountsPerSecond64\n  commentId: F:System.Diagnostics.PerformanceCounterType.RateOfCountsPerSecond64\n  id: RateOfCountsPerSecond64\n  parent: System.Diagnostics.PerformanceCounterType\n  langs:\n  - csharp\n  name: RateOfCountsPerSecond64\n  nameWithType: PerformanceCounterType.RateOfCountsPerSecond64\n  fullName: PerformanceCounterType.RateOfCountsPerSecond64\n  type: Field\n  assemblies:\n  - System\n  - System.Diagnostics.PerformanceCounter\n  namespace: System.Diagnostics\n  summary: A difference counter that shows the average number of operations completed during each second of the sample interval. Counters of this type measure time in ticks of the system clock. This counter type is the same as the `RateOfCountsPerSecond32` type, but it uses larger fields to accommodate larger values to track a high-volume number of items or operations per second, such as a byte-transmission rate.\n  remarks: \"Formula: (N 1 - N 0) / ((D 1 -D 0) / F), where N 1 and N 0 are performance counter readings, D 1 and D 0 are their corresponding time readings, and F represents the number of ticks per second. Thus, the numerator represents the number of operations performed during the last sample interval, the denominator represents the number of ticks elapsed during the last sample interval, and F is the frequency of the ticks. The value of F is factored into the equation so that the result can be displayed in seconds.  \\n  \\n Counters of this type include System\\\\ File Read Bytes/sec.\"\n  syntax:\n    content: RateOfCountsPerSecond64\n    return:\n      type: System.Diagnostics.PerformanceCounterType\n      description: ''\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics/PerformanceCounterType.xml\n- uid: System.Diagnostics.PerformanceCounterType.RawBase\n  commentId: F:System.Diagnostics.PerformanceCounterType.RawBase\n  id: RawBase\n  parent: System.Diagnostics.PerformanceCounterType\n  langs:\n  - csharp\n  name: RawBase\n  nameWithType: PerformanceCounterType.RawBase\n  fullName: PerformanceCounterType.RawBase\n  type: Field\n  assemblies:\n  - System\n  - System.Diagnostics.PerformanceCounter\n  namespace: System.Diagnostics\n  summary: A base counter that stores the denominator of a counter that presents a general arithmetic fraction. Check that this value is greater than zero before using it as the denominator in a `RawFraction` value calculation.\n  syntax:\n    content: RawBase\n    return:\n      type: System.Diagnostics.PerformanceCounterType\n      description: ''\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics/PerformanceCounterType.xml\n- uid: System.Diagnostics.PerformanceCounterType.RawFraction\n  commentId: F:System.Diagnostics.PerformanceCounterType.RawFraction\n  id: RawFraction\n  parent: System.Diagnostics.PerformanceCounterType\n  langs:\n  - csharp\n  name: RawFraction\n  nameWithType: PerformanceCounterType.RawFraction\n  fullName: PerformanceCounterType.RawFraction\n  type: Field\n  assemblies:\n  - System\n  - System.Diagnostics.PerformanceCounter\n  namespace: System.Diagnostics\n  summary: An instantaneous percentage counter that shows the ratio of a subset to its set as a percentage. For example, it compares the number of bytes in use on a disk to the total number of bytes on the disk. Counters of this type display the current percentage only, not an average over time.\n  remarks: \"Formula: (N 0 / D 0) x 100, where D 0 represents a measured attribute (using a base counter of type `RawBase`) and N 0 represents one component of that attribute.  \\n  \\n Counters of this type include Paging File\\\\\\\\% Usage Peak.\"\n  syntax:\n    content: RawFraction\n    return:\n      type: System.Diagnostics.PerformanceCounterType\n      description: ''\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics/PerformanceCounterType.xml\n- uid: System.Diagnostics.PerformanceCounterType.SampleBase\n  commentId: F:System.Diagnostics.PerformanceCounterType.SampleBase\n  id: SampleBase\n  parent: System.Diagnostics.PerformanceCounterType\n  langs:\n  - csharp\n  name: SampleBase\n  nameWithType: PerformanceCounterType.SampleBase\n  fullName: PerformanceCounterType.SampleBase\n  type: Field\n  assemblies:\n  - System\n  - System.Diagnostics.PerformanceCounter\n  namespace: System.Diagnostics\n  summary: A base counter that stores the number of sampling interrupts taken and is used as a denominator in the sampling fraction. The sampling fraction is the number of samples that were 1 (or `true`) for a sample interrupt. Check that this value is greater than zero before using it as the denominator in a calculation of `SampleFraction`.\n  syntax:\n    content: SampleBase\n    return:\n      type: System.Diagnostics.PerformanceCounterType\n      description: ''\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics/PerformanceCounterType.xml\n- uid: System.Diagnostics.PerformanceCounterType.SampleCounter\n  commentId: F:System.Diagnostics.PerformanceCounterType.SampleCounter\n  id: SampleCounter\n  parent: System.Diagnostics.PerformanceCounterType\n  langs:\n  - csharp\n  name: SampleCounter\n  nameWithType: PerformanceCounterType.SampleCounter\n  fullName: PerformanceCounterType.SampleCounter\n  type: Field\n  assemblies:\n  - System\n  - System.Diagnostics.PerformanceCounter\n  namespace: System.Diagnostics\n  summary: An average counter that shows the average number of operations completed in one second. When a counter of this type samples the data, each sampling interrupt returns one or zero. The counter data is the number of ones that were sampled. It measures time in units of ticks of the system performance timer.\n  remarks: 'Formula: (N 1 – N 0) / ((D 1 – D 0) / F), where the numerator (N) represents the number of operations completed, the denominator (D) represents elapsed time in units of ticks of the system performance timer, and F represents the number of ticks that elapse in one second. F is factored into the equation so that the result can be displayed in seconds.'\n  syntax:\n    content: SampleCounter\n    return:\n      type: System.Diagnostics.PerformanceCounterType\n      description: ''\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics/PerformanceCounterType.xml\n- uid: System.Diagnostics.PerformanceCounterType.SampleFraction\n  commentId: F:System.Diagnostics.PerformanceCounterType.SampleFraction\n  id: SampleFraction\n  parent: System.Diagnostics.PerformanceCounterType\n  langs:\n  - csharp\n  name: SampleFraction\n  nameWithType: PerformanceCounterType.SampleFraction\n  fullName: PerformanceCounterType.SampleFraction\n  type: Field\n  assemblies:\n  - System\n  - System.Diagnostics.PerformanceCounter\n  namespace: System.Diagnostics\n  summary: A percentage counter that shows the average ratio of hits to all operations during the last two sample intervals.\n  remarks: \"Formula: ((N 1 - N 0) / (D 1 - D 0)) x 100, where the numerator represents the number of successful operations during the last sample interval, and the denominator represents the change in the number of all operations (of the type measured) completed during the sample interval, using counters of type `SampleBase`.  \\n  \\n Counters of this type include Cache\\\\Pin Read Hits %.\"\n  syntax:\n    content: SampleFraction\n    return:\n      type: System.Diagnostics.PerformanceCounterType\n      description: ''\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics/PerformanceCounterType.xml\n- uid: System.Diagnostics.PerformanceCounterType.Timer100Ns\n  commentId: F:System.Diagnostics.PerformanceCounterType.Timer100Ns\n  id: Timer100Ns\n  parent: System.Diagnostics.PerformanceCounterType\n  langs:\n  - csharp\n  name: Timer100Ns\n  nameWithType: PerformanceCounterType.Timer100Ns\n  fullName: PerformanceCounterType.Timer100Ns\n  type: Field\n  assemblies:\n  - System\n  - System.Diagnostics.PerformanceCounter\n  namespace: System.Diagnostics\n  summary: A percentage counter that shows the active time of a component as a percentage of the total elapsed time of the sample interval. It measures time in units of 100 nanoseconds (ns). Counters of this type are designed to measure the activity of one component at a time.\n  remarks: \"Formula: (N 1 - N 0) / (D 1 - D 0) x 100, where the numerator represents the portions of the sample interval during which the monitored components were active, and the denominator represents the total elapsed time of the sample interval.  \\n  \\n Counters of this type include Processor\\\\ % User Time.\"\n  syntax:\n    content: Timer100Ns\n    return:\n      type: System.Diagnostics.PerformanceCounterType\n      description: ''\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics/PerformanceCounterType.xml\n- uid: System.Diagnostics.PerformanceCounterType.Timer100NsInverse\n  commentId: F:System.Diagnostics.PerformanceCounterType.Timer100NsInverse\n  id: Timer100NsInverse\n  parent: System.Diagnostics.PerformanceCounterType\n  langs:\n  - csharp\n  name: Timer100NsInverse\n  nameWithType: PerformanceCounterType.Timer100NsInverse\n  fullName: PerformanceCounterType.Timer100NsInverse\n  type: Field\n  assemblies:\n  - System\n  - System.Diagnostics.PerformanceCounter\n  namespace: System.Diagnostics\n  summary: A percentage counter that shows the average percentage of active time observed during the sample interval.\n  remarks: \"This is an inverse counter. Counters of this type calculate active time by measuring the time that the service was inactive and then subtracting the percentage of active time from 100 percent.  \\n  \\n Formula: (1- ((N 1 - N 0) / (D 1 - D 0))) x 100, where the numerator represents the time during the interval when the monitored components were inactive, and the denominator represents the total elapsed time of the sample interval.  \\n  \\n Counters of this type include Processor\\\\ % Processor Time.\"\n  syntax:\n    content: Timer100NsInverse\n    return:\n      type: System.Diagnostics.PerformanceCounterType\n      description: ''\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics/PerformanceCounterType.xml\nreferences:\n- uid: System.Enum\n  parent: System\n  isExternal: false\n  name: Enum\n  nameWithType: Enum\n  fullName: System.Enum\n- uid: System.Diagnostics.PerformanceCounterType.AverageBase\n  parent: System.Diagnostics.PerformanceCounterType\n  isExternal: false\n  name: AverageBase\n  nameWithType: PerformanceCounterType.AverageBase\n  fullName: PerformanceCounterType.AverageBase\n- uid: System.Diagnostics.PerformanceCounterType\n  parent: System.Diagnostics\n  isExternal: false\n  name: PerformanceCounterType\n  nameWithType: PerformanceCounterType\n  fullName: System.Diagnostics.PerformanceCounterType\n- uid: System.Diagnostics.PerformanceCounterType.AverageCount64\n  parent: System.Diagnostics.PerformanceCounterType\n  isExternal: false\n  name: AverageCount64\n  nameWithType: PerformanceCounterType.AverageCount64\n  fullName: PerformanceCounterType.AverageCount64\n- uid: System.Diagnostics.PerformanceCounterType.AverageTimer32\n  parent: System.Diagnostics.PerformanceCounterType\n  isExternal: false\n  name: AverageTimer32\n  nameWithType: PerformanceCounterType.AverageTimer32\n  fullName: PerformanceCounterType.AverageTimer32\n- uid: System.Diagnostics.PerformanceCounterType.CounterDelta32\n  parent: System.Diagnostics.PerformanceCounterType\n  isExternal: false\n  name: CounterDelta32\n  nameWithType: PerformanceCounterType.CounterDelta32\n  fullName: PerformanceCounterType.CounterDelta32\n- uid: System.Diagnostics.PerformanceCounterType.CounterDelta64\n  parent: System.Diagnostics.PerformanceCounterType\n  isExternal: false\n  name: CounterDelta64\n  nameWithType: PerformanceCounterType.CounterDelta64\n  fullName: PerformanceCounterType.CounterDelta64\n- uid: System.Diagnostics.PerformanceCounterType.CounterMultiBase\n  parent: System.Diagnostics.PerformanceCounterType\n  isExternal: false\n  name: CounterMultiBase\n  nameWithType: PerformanceCounterType.CounterMultiBase\n  fullName: PerformanceCounterType.CounterMultiBase\n- uid: System.Diagnostics.PerformanceCounterType.CounterMultiTimer\n  parent: System.Diagnostics.PerformanceCounterType\n  isExternal: false\n  name: CounterMultiTimer\n  nameWithType: PerformanceCounterType.CounterMultiTimer\n  fullName: PerformanceCounterType.CounterMultiTimer\n- uid: System.Diagnostics.PerformanceCounterType.CounterMultiTimer100Ns\n  parent: System.Diagnostics.PerformanceCounterType\n  isExternal: false\n  name: CounterMultiTimer100Ns\n  nameWithType: PerformanceCounterType.CounterMultiTimer100Ns\n  fullName: PerformanceCounterType.CounterMultiTimer100Ns\n- uid: System.Diagnostics.PerformanceCounterType.CounterMultiTimer100NsInverse\n  parent: System.Diagnostics.PerformanceCounterType\n  isExternal: false\n  name: CounterMultiTimer100NsInverse\n  nameWithType: PerformanceCounterType.CounterMultiTimer100NsInverse\n  fullName: PerformanceCounterType.CounterMultiTimer100NsInverse\n- uid: System.Diagnostics.PerformanceCounterType.CounterMultiTimerInverse\n  parent: System.Diagnostics.PerformanceCounterType\n  isExternal: false\n  name: CounterMultiTimerInverse\n  nameWithType: PerformanceCounterType.CounterMultiTimerInverse\n  fullName: PerformanceCounterType.CounterMultiTimerInverse\n- uid: System.Diagnostics.PerformanceCounterType.CounterTimer\n  parent: System.Diagnostics.PerformanceCounterType\n  isExternal: false\n  name: CounterTimer\n  nameWithType: PerformanceCounterType.CounterTimer\n  fullName: PerformanceCounterType.CounterTimer\n- uid: System.Diagnostics.PerformanceCounterType.CounterTimerInverse\n  parent: System.Diagnostics.PerformanceCounterType\n  isExternal: false\n  name: CounterTimerInverse\n  nameWithType: PerformanceCounterType.CounterTimerInverse\n  fullName: PerformanceCounterType.CounterTimerInverse\n- uid: System.Diagnostics.PerformanceCounterType.CountPerTimeInterval32\n  parent: System.Diagnostics.PerformanceCounterType\n  isExternal: false\n  name: CountPerTimeInterval32\n  nameWithType: PerformanceCounterType.CountPerTimeInterval32\n  fullName: PerformanceCounterType.CountPerTimeInterval32\n- uid: System.Diagnostics.PerformanceCounterType.CountPerTimeInterval64\n  parent: System.Diagnostics.PerformanceCounterType\n  isExternal: false\n  name: CountPerTimeInterval64\n  nameWithType: PerformanceCounterType.CountPerTimeInterval64\n  fullName: PerformanceCounterType.CountPerTimeInterval64\n- uid: System.Diagnostics.PerformanceCounterType.ElapsedTime\n  parent: System.Diagnostics.PerformanceCounterType\n  isExternal: false\n  name: ElapsedTime\n  nameWithType: PerformanceCounterType.ElapsedTime\n  fullName: PerformanceCounterType.ElapsedTime\n- uid: System.Diagnostics.PerformanceCounterType.NumberOfItems32\n  parent: System.Diagnostics.PerformanceCounterType\n  isExternal: false\n  name: NumberOfItems32\n  nameWithType: PerformanceCounterType.NumberOfItems32\n  fullName: PerformanceCounterType.NumberOfItems32\n- uid: System.Diagnostics.PerformanceCounterType.NumberOfItems64\n  parent: System.Diagnostics.PerformanceCounterType\n  isExternal: false\n  name: NumberOfItems64\n  nameWithType: PerformanceCounterType.NumberOfItems64\n  fullName: PerformanceCounterType.NumberOfItems64\n- uid: System.Diagnostics.PerformanceCounterType.NumberOfItemsHEX32\n  parent: System.Diagnostics.PerformanceCounterType\n  isExternal: false\n  name: NumberOfItemsHEX32\n  nameWithType: PerformanceCounterType.NumberOfItemsHEX32\n  fullName: PerformanceCounterType.NumberOfItemsHEX32\n- uid: System.Diagnostics.PerformanceCounterType.NumberOfItemsHEX64\n  parent: System.Diagnostics.PerformanceCounterType\n  isExternal: false\n  name: NumberOfItemsHEX64\n  nameWithType: PerformanceCounterType.NumberOfItemsHEX64\n  fullName: PerformanceCounterType.NumberOfItemsHEX64\n- uid: System.Diagnostics.PerformanceCounterType.RateOfCountsPerSecond32\n  parent: System.Diagnostics.PerformanceCounterType\n  isExternal: false\n  name: RateOfCountsPerSecond32\n  nameWithType: PerformanceCounterType.RateOfCountsPerSecond32\n  fullName: PerformanceCounterType.RateOfCountsPerSecond32\n- uid: System.Diagnostics.PerformanceCounterType.RateOfCountsPerSecond64\n  parent: System.Diagnostics.PerformanceCounterType\n  isExternal: false\n  name: RateOfCountsPerSecond64\n  nameWithType: PerformanceCounterType.RateOfCountsPerSecond64\n  fullName: PerformanceCounterType.RateOfCountsPerSecond64\n- uid: System.Diagnostics.PerformanceCounterType.RawBase\n  parent: System.Diagnostics.PerformanceCounterType\n  isExternal: false\n  name: RawBase\n  nameWithType: PerformanceCounterType.RawBase\n  fullName: PerformanceCounterType.RawBase\n- uid: System.Diagnostics.PerformanceCounterType.RawFraction\n  parent: System.Diagnostics.PerformanceCounterType\n  isExternal: false\n  name: RawFraction\n  nameWithType: PerformanceCounterType.RawFraction\n  fullName: PerformanceCounterType.RawFraction\n- uid: System.Diagnostics.PerformanceCounterType.SampleBase\n  parent: System.Diagnostics.PerformanceCounterType\n  isExternal: false\n  name: SampleBase\n  nameWithType: PerformanceCounterType.SampleBase\n  fullName: PerformanceCounterType.SampleBase\n- uid: System.Diagnostics.PerformanceCounterType.SampleCounter\n  parent: System.Diagnostics.PerformanceCounterType\n  isExternal: false\n  name: SampleCounter\n  nameWithType: PerformanceCounterType.SampleCounter\n  fullName: PerformanceCounterType.SampleCounter\n- uid: System.Diagnostics.PerformanceCounterType.SampleFraction\n  parent: System.Diagnostics.PerformanceCounterType\n  isExternal: false\n  name: SampleFraction\n  nameWithType: PerformanceCounterType.SampleFraction\n  fullName: PerformanceCounterType.SampleFraction\n- uid: System.Diagnostics.PerformanceCounterType.Timer100Ns\n  parent: System.Diagnostics.PerformanceCounterType\n  isExternal: false\n  name: Timer100Ns\n  nameWithType: PerformanceCounterType.Timer100Ns\n  fullName: PerformanceCounterType.Timer100Ns\n- uid: System.Diagnostics.PerformanceCounterType.Timer100NsInverse\n  parent: System.Diagnostics.PerformanceCounterType\n  isExternal: false\n  name: Timer100NsInverse\n  nameWithType: PerformanceCounterType.Timer100NsInverse\n  fullName: PerformanceCounterType.Timer100NsInverse\n"}