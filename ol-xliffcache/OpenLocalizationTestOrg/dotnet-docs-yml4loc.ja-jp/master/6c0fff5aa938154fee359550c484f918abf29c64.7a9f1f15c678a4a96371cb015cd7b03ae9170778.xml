{"nodes":[{"content":"Provides a thread-safe, read-only collection that contains objects of a type specified by the generic parameter as elements.","nodes":[{"pos":[0,124],"content":"Provides a thread-safe, read-only collection that contains objects of a type specified by the generic parameter as elements.","nodes":[{"content":"Provides a thread-safe, read-only collection that contains objects of a type specified by the generic parameter as elements.","pos":[0,124]}]}],"pos":[3932,4057],"yaml":true},{"content":"The <xref:System.Collections.Generic.SynchronizedReadOnlyCollection%601> stores data in an <xref:System.Collections.Generic.IList%601> container and provides an object that can be set and used to synchronize access to the collection so that it is thread safe. The <xref:System.Collections.Generic.IList%601> container can be recovered using the <xref:System.Collections.Generic.SynchronizedReadOnlyCollection%601.Items%2A> property. The synchronized object can be recovered using the <xref:System.Collections.Generic.SynchronizedReadOnlyCollection%601.System.Collections.ICollection.SyncRoot%2A> property. It can only be set using one of the constructors that take the `syncRoot` parameter.","nodes":[{"pos":[0,690],"content":"The <xref:System.Collections.Generic.SynchronizedReadOnlyCollection%601> stores data in an <xref:System.Collections.Generic.IList%601> container and provides an object that can be set and used to synchronize access to the collection so that it is thread safe. The <xref:System.Collections.Generic.IList%601> container can be recovered using the <xref:System.Collections.Generic.SynchronizedReadOnlyCollection%601.Items%2A> property. The synchronized object can be recovered using the <xref:System.Collections.Generic.SynchronizedReadOnlyCollection%601.System.Collections.ICollection.SyncRoot%2A> property. It can only be set using one of the constructors that take the `syncRoot` parameter.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Collections.Generic.SynchronizedReadOnlyCollection%601&gt;</ph> stores data in an <ph id=\"ph2\">&lt;xref:System.Collections.Generic.IList%601&gt;</ph> container and provides an object that can be set and used to synchronize access to the collection so that it is thread safe.","pos":[0,259],"source":"The <xref:System.Collections.Generic.SynchronizedReadOnlyCollection%601> stores data in an <xref:System.Collections.Generic.IList%601> container and provides an object that can be set and used to synchronize access to the collection so that it is thread safe."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Collections.Generic.IList%601&gt;</ph> container can be recovered using the <ph id=\"ph2\">&lt;xref:System.Collections.Generic.SynchronizedReadOnlyCollection%601.Items%2A&gt;</ph> property.","pos":[260,432],"source":" The <xref:System.Collections.Generic.IList%601> container can be recovered using the <xref:System.Collections.Generic.SynchronizedReadOnlyCollection%601.Items%2A> property."},{"content":"The synchronized object can be recovered using the <ph id=\"ph1\">&lt;xref:System.Collections.Generic.SynchronizedReadOnlyCollection%601.System.Collections.ICollection.SyncRoot%2A&gt;</ph> property.","pos":[433,605],"source":" The synchronized object can be recovered using the <xref:System.Collections.Generic.SynchronizedReadOnlyCollection%601.System.Collections.ICollection.SyncRoot%2A> property."},{"content":"It can only be set using one of the constructors that take the <ph id=\"ph1\">`syncRoot`</ph> parameter.","pos":[606,690],"source":" It can only be set using one of the constructors that take the `syncRoot` parameter."}]}],"pos":[4068,4759],"yaml":true,"extradata":"MT"},{"content":"The type of object contained as items in the thread-safe, read-only collection.","nodes":[{"pos":[0,79],"content":"The type of object contained as items in the thread-safe, read-only collection.","nodes":[{"content":"The type of object contained as items in the thread-safe, read-only collection.","pos":[0,79]}]}],"pos":[5097,5177],"yaml":true},{"content":"Initializes a new instance of the <xref href=\"System.Collections.Generic.SynchronizedReadOnlyCollection`1\"></xref> class.","nodes":[{"pos":[0,121],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.SynchronizedReadOnlyCollection`1\"&gt;&lt;/xref&gt;</ph> class.","source":"Initializes a new instance of the <xref href=\"System.Collections.Generic.SynchronizedReadOnlyCollection`1\"></xref> class."}],"pos":[33883,34005],"yaml":true},{"content":"Initializes a new instance of the <xref href=\"System.Collections.Generic.SynchronizedReadOnlyCollection`1\"></xref> class with the object used to synchronize access to the thread-safe, read-only collection.","nodes":[{"pos":[0,205],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.SynchronizedReadOnlyCollection`1\"&gt;&lt;/xref&gt;</ph> class with the object used to synchronize access to the thread-safe, read-only collection.","source":"Initializes a new instance of the <xref href=\"System.Collections.Generic.SynchronizedReadOnlyCollection`1\"></xref> class with the object used to synchronize access to the thread-safe, read-only collection."}],"pos":[35506,35712],"yaml":true},{"content":"If multiple instances of the <xref:System.Collections.Generic.SynchronizedReadOnlyCollection%601> are created using the same `syncRoot`, then access is protected across all instances.","nodes":[{"pos":[0,183],"content":"If multiple instances of the <ph id=\"ph1\">&lt;xref:System.Collections.Generic.SynchronizedReadOnlyCollection%601&gt;</ph> are created using the same <ph id=\"ph2\">`syncRoot`</ph>, then access is protected across all instances.","source":"If multiple instances of the <xref:System.Collections.Generic.SynchronizedReadOnlyCollection%601> are created using the same `syncRoot`, then access is protected across all instances."}],"pos":[35723,35907],"yaml":true,"extradata":"MT"},{"content":"<code>sync_root</code> is `null`.","nodes":[{"pos":[0,33],"content":"<ph id=\"ph1\">&lt;code&gt;sync_root&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>sync_root</code> is `null`."}],"pos":[36266,36300],"yaml":true},{"content":"Initializes a new instance of the <xref href=\"System.Collections.Generic.SynchronizedReadOnlyCollection`1\"></xref> class from a specified enumerable list of elements and with the object used to synchronize access to the thread-safe, read-only collection.","nodes":[{"pos":[0,254],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.SynchronizedReadOnlyCollection`1\"&gt;&lt;/xref&gt;</ph> class from a specified enumerable list of elements and with the object used to synchronize access to the thread-safe, read-only collection.","source":"Initializes a new instance of the <xref href=\"System.Collections.Generic.SynchronizedReadOnlyCollection`1\"></xref> class from a specified enumerable list of elements and with the object used to synchronize access to the thread-safe, read-only collection."}],"pos":[37798,38053],"yaml":true},{"content":"The <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> collection of elements used to initialize the thread-safe, read-only collection.","nodes":[{"pos":[0,146],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.IEnumerable`1\"&gt;&lt;/xref&gt;</ph> collection of elements used to initialize the thread-safe, read-only collection.","source":"The <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> collection of elements used to initialize the thread-safe, read-only collection."}],"pos":[38352,38499],"yaml":true},{"content":"<code>syncRoot</code> or <code>list</code> is `null`.","nodes":[{"pos":[0,53],"content":"<ph id=\"ph1\">&lt;code&gt;syncRoot&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;list&lt;/code&gt;</ph> is <ph id=\"ph3\">`null`</ph>.","source":"<code>syncRoot</code> or <code>list</code> is `null`."}],"pos":[38694,38748],"yaml":true},{"content":"Initializes a new instance of the <xref href=\"System.Collections.Generic.SynchronizedReadOnlyCollection`1\"></xref> class from a specified array of elements and with the object used to synchronize access to the thread-safe, read-only collection.","nodes":[{"pos":[0,244],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.SynchronizedReadOnlyCollection`1\"&gt;&lt;/xref&gt;</ph> class from a specified array of elements and with the object used to synchronize access to the thread-safe, read-only collection.","source":"Initializes a new instance of the <xref href=\"System.Collections.Generic.SynchronizedReadOnlyCollection`1\"></xref> class from a specified array of elements and with the object used to synchronize access to the thread-safe, read-only collection."}],"pos":[40099,40344],"yaml":true},{"content":"The <xref href=\"System.Array\"></xref> of type <code>T</code> elements used to initialize the thread-safe, read-only collection.","nodes":[{"pos":[0,127],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Array\"&gt;&lt;/xref&gt;</ph> of type <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">T</ph><ept id=\"p1\">&lt;/code&gt;</ept> elements used to initialize the thread-safe, read-only collection.","source":"The <xref href=\"System.Array\"></xref> of type <code>T</code> elements used to initialize the thread-safe, read-only collection."}],"pos":[40568,40696],"yaml":true},{"content":"<code>syncRoot</code> or <code>list</code> is `null`.","nodes":[{"pos":[0,53],"content":"<ph id=\"ph1\">&lt;code&gt;syncRoot&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;list&lt;/code&gt;</ph> is <ph id=\"ph3\">`null`</ph>.","source":"<code>syncRoot</code> or <code>list</code> is `null`."}],"pos":[40891,40945],"yaml":true},{"content":"Determines whether the collection contains an element with a specific value.","nodes":[{"pos":[0,76],"content":"Determines whether the collection contains an element with a specific value.","nodes":[{"content":"Determines whether the collection contains an element with a specific value.","pos":[0,76]}]}],"pos":[43730,43807],"yaml":true},{"content":"The object to locate in the collection.","nodes":[{"pos":[0,39],"content":"The object to locate in the collection.","nodes":[{"content":"The object to locate in the collection.","pos":[0,39]}]}],"pos":[43927,43967],"yaml":true},{"content":"`true` if the element <code>value</code> is found in the collection; otherwise `false`.","nodes":[{"pos":[0,87],"content":"<ph id=\"ph1\">`true`</ph> if the element <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept> is found in the collection; otherwise <ph id=\"ph3\">`false`</ph>.","source":"`true` if the element <code>value</code> is found in the collection; otherwise `false`."}],"pos":[44025,44115],"yaml":true},{"content":"<code>value</code> is not an object of the type contained in the collection.","nodes":[{"pos":[0,76],"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> is not an object of the type contained in the collection.","source":"<code>value</code> is not an object of the type contained in the collection."}],"pos":[44305,44382],"yaml":true},{"content":"Copies the elements of the collection to a specified array, starting at a particular index.","nodes":[{"pos":[0,91],"content":"Copies the elements of the collection to a specified array, starting at a particular index.","nodes":[{"content":"Copies the elements of the collection to a specified array, starting at a particular index.","pos":[0,91]}]}],"pos":[45642,45734],"yaml":true},{"content":"The <xref href=\"System.Array\"></xref> that is the destination for the elements copied from the collection.","nodes":[{"pos":[0,106],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Array\"&gt;&lt;/xref&gt;</ph> that is the destination for the elements copied from the collection.","source":"The <xref href=\"System.Array\"></xref> that is the destination for the elements copied from the collection."}],"pos":[45867,45974],"yaml":true},{"content":"The zero-based index in the array at which copying begins.","nodes":[{"pos":[0,58],"content":"The zero-based index in the array at which copying begins.","nodes":[{"content":"The zero-based index in the array at which copying begins.","pos":[0,58]}]}],"pos":[46034,46093],"yaml":true},{"content":"Gets the number of elements contained in the thread-safe, read-only collection.","nodes":[{"pos":[0,79],"content":"Gets the number of elements contained in the thread-safe, read-only collection.","nodes":[{"content":"Gets the number of elements contained in the thread-safe, read-only collection.","pos":[0,79]}]}],"pos":[47353,47433],"yaml":true},{"content":"The number of elements contained in the thread-safe, read-only collection.","nodes":[{"pos":[0,74],"content":"The number of elements contained in the thread-safe, read-only collection.","nodes":[{"content":"The number of elements contained in the thread-safe, read-only collection.","pos":[0,74]}]}],"pos":[47538,47613],"yaml":true},{"content":"Returns an enumerator that iterates through the synchronized, read-only collection.","nodes":[{"pos":[0,83],"content":"Returns an enumerator that iterates through the synchronized, read-only collection.","nodes":[{"content":"Returns an enumerator that iterates through the synchronized, read-only collection.","pos":[0,83]}]}],"pos":[48924,49008],"yaml":true},{"content":"An <xref href=\"System.Collections.Generic.IEnumerator`1\"></xref> for objects of the type stored in the collection.","nodes":[{"pos":[0,114],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.IEnumerator`1\"&gt;&lt;/xref&gt;</ph> for objects of the type stored in the collection.","source":"An <xref href=\"System.Collections.Generic.IEnumerator`1\"></xref> for objects of the type stored in the collection."}],"pos":[49201,49316],"yaml":true},{"content":"Returns the index of the first occurrence of a value in the collection.","nodes":[{"pos":[0,71],"content":"Returns the index of the first occurrence of a value in the collection.","nodes":[{"content":"Returns the index of the first occurrence of a value in the collection.","pos":[0,71]}]}],"pos":[50614,50686],"yaml":true},{"content":"The element whose index is being retrieved.","nodes":[{"pos":[0,43],"content":"The element whose index is being retrieved.","nodes":[{"content":"The element whose index is being retrieved.","pos":[0,43]}]}],"pos":[50804,50848],"yaml":true},{"content":"The zero-based index of the first occurrence of the <code>value</code> in the collection.","nodes":[{"pos":[0,89],"content":"The zero-based index of the first occurrence of the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept> in the collection.","source":"The zero-based index of the first occurrence of the <code>value</code> in the collection."}],"pos":[50904,50994],"yaml":true},{"content":"Gets an element from the thread-safe, read-only collection with a specified index.","nodes":[{"pos":[0,82],"content":"Gets an element from the thread-safe, read-only collection with a specified index.","nodes":[{"content":"Gets an element from the thread-safe, read-only collection with a specified index.","pos":[0,82]}]}],"pos":[52312,52395],"yaml":true},{"content":"The zero-based index of the element to be retrieved from the collection.","nodes":[{"pos":[0,72],"content":"The zero-based index of the element to be retrieved from the collection.","nodes":[{"content":"The zero-based index of the element to be retrieved from the collection.","pos":[0,72]}]}],"pos":[52528,52601],"yaml":true},{"content":"The object in the collection that has the specified <code>index</code>.","nodes":[{"pos":[0,71],"content":"The object in the collection that has the specified <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">index</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The object in the collection that has the specified <code>index</code>."}],"pos":[52646,52718],"yaml":true},{"content":"Gets the list of elements contained in the thread-safe, read-only collection.","nodes":[{"pos":[0,77],"content":"Gets the list of elements contained in the thread-safe, read-only collection.","nodes":[{"content":"Gets the list of elements contained in the thread-safe, read-only collection.","pos":[0,77]}]}],"pos":[53976,54054],"yaml":true},{"content":"The <xref href=\"System.Collections.Generic.IList`1\"></xref> of elements that are contained in the thread-safe, read-only collection.","nodes":[{"pos":[0,132],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.IList`1\"&gt;&lt;/xref&gt;</ph> of elements that are contained in the thread-safe, read-only collection.","source":"The <xref href=\"System.Collections.Generic.IList`1\"></xref> of elements that are contained in the thread-safe, read-only collection."}],"pos":[54216,54349],"yaml":true},{"content":"Throws a <xref href=\"System.NotSupportedException\"></xref> if called.","nodes":[{"pos":[0,69],"content":"Throws a <ph id=\"ph1\">&lt;xref href=\"System.NotSupportedException\"&gt;&lt;/xref&gt;</ph> if called.","source":"Throws a <xref href=\"System.NotSupportedException\"></xref> if called."}],"pos":[55800,55870],"yaml":true},{"content":"Items cannot be added to a read-only collection.","nodes":[{"pos":[0,48],"content":"Items cannot be added to a read-only collection.","nodes":[{"content":"Items cannot be added to a read-only collection.","pos":[0,48]}]}],"pos":[55881,55930],"yaml":true,"extradata":"MT"},{"content":"The element to be added to the collection.","nodes":[{"pos":[0,42],"content":"The element to be added to the collection.","nodes":[{"content":"The element to be added to the collection.","pos":[0,42]}]}],"pos":[56053,56096],"yaml":true},{"content":"Items cannot be set in a read-only collection.","nodes":[{"pos":[0,46],"content":"Items cannot be set in a read-only collection.","nodes":[{"content":"Items cannot be set in a read-only collection.","pos":[0,46]}]}],"pos":[56331,56378],"yaml":true},{"content":"Throws a <xref href=\"System.NotSupportedException\"></xref> if called.","nodes":[{"pos":[0,69],"content":"Throws a <ph id=\"ph1\">&lt;xref href=\"System.NotSupportedException\"&gt;&lt;/xref&gt;</ph> if called.","source":"Throws a <xref href=\"System.NotSupportedException\"></xref> if called."}],"pos":[57730,57800],"yaml":true},{"content":"Items cannot be cleared from a read-only collection.","nodes":[{"pos":[0,52],"content":"Items cannot be cleared from a read-only collection.","nodes":[{"content":"Items cannot be cleared from a read-only collection.","pos":[0,52]}]}],"pos":[57811,57864],"yaml":true,"extradata":"MT"},{"content":"Items cannot be cleared from a read-only collection.","nodes":[{"pos":[0,52],"content":"Items cannot be cleared from a read-only collection.","nodes":[{"content":"Items cannot be cleared from a read-only collection.","pos":[0,52]}]}],"pos":[58173,58226],"yaml":true},{"content":"This property always returns `true` because the collection is read-only.","nodes":[{"pos":[0,72],"content":"This property always returns <ph id=\"ph1\">`true`</ph> because the collection is read-only.","source":"This property always returns `true` because the collection is read-only."}],"pos":[59604,59677],"yaml":true},{"content":"Returns <xref href=\"System.Boolean\"></xref>.  \n  \n This property always returns `true` because the collection is read-only.","nodes":[{"pos":[0,44],"content":"Returns <ph id=\"ph1\">&lt;xref href=\"System.Boolean\"&gt;&lt;/xref&gt;</ph>.","source":"Returns <xref href=\"System.Boolean\"></xref>."},{"pos":[51,123],"content":"This property always returns <ph id=\"ph1\">`true`</ph> because the collection is read-only.","source":"This property always returns `true` because the collection is read-only."}],"pos":[59825,59955],"yaml":true},{"content":"Returns `false` and throws a <xref href=\"System.NotSupportedException\"></xref> if called.","nodes":[{"pos":[0,89],"content":"Returns <ph id=\"ph1\">`false`</ph> and throws a <ph id=\"ph2\">&lt;xref href=\"System.NotSupportedException\"&gt;&lt;/xref&gt;</ph> if called.","source":"Returns `false` and throws a <xref href=\"System.NotSupportedException\"></xref> if called."}],"pos":[61434,61524],"yaml":true},{"content":"The value to be removed from the collection.","nodes":[{"pos":[0,44],"content":"The value to be removed from the collection.","nodes":[{"content":"The value to be removed from the collection.","pos":[0,44]}]}],"pos":[61650,61695],"yaml":true},{"content":"`False`.  \n  \n The method returns `false` to indicate that the item was not removed from the read-only collection.","nodes":[{"pos":[0,8],"content":"<ph id=\"ph1\">`False`</ph>.","source":"`False`."},{"pos":[15,114],"content":"The method returns <ph id=\"ph1\">`false`</ph> to indicate that the item was not removed from the read-only collection.","source":"The method returns `false` to indicate that the item was not removed from the read-only collection."}],"pos":[61753,61872],"yaml":true},{"content":"Items cannot be removed from a read-only collection.","nodes":[{"pos":[0,52],"content":"Items cannot be removed from a read-only collection.","nodes":[{"content":"Items cannot be removed from a read-only collection.","pos":[0,52]}]}],"pos":[62110,62163],"yaml":true},{"content":"Throws a <xref href=\"System.NotSupportedException\"></xref> if called.","nodes":[{"pos":[0,69],"content":"Throws a <ph id=\"ph1\">&lt;xref href=\"System.NotSupportedException\"&gt;&lt;/xref&gt;</ph> if called.","source":"Throws a <xref href=\"System.NotSupportedException\"></xref> if called."}],"pos":[63560,63630],"yaml":true},{"content":"The zero-based index at which <code>value</code> is to be inserted.","nodes":[{"pos":[0,67],"content":"The zero-based index at which <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept> is to be inserted.","source":"The zero-based index at which <code>value</code> is to be inserted."}],"pos":[63772,63840],"yaml":true},{"content":"The object to insert into the collection.","nodes":[{"pos":[0,41],"content":"The object to insert into the collection.","nodes":[{"content":"The object to insert into the collection.","pos":[0,41]}]}],"pos":[63889,63931],"yaml":true},{"content":"Items cannot be inserted into a read-only collection.","nodes":[{"pos":[0,53],"content":"Items cannot be inserted into a read-only collection.","nodes":[{"content":"Items cannot be inserted into a read-only collection.","pos":[0,53]}]}],"pos":[64163,64217],"yaml":true},{"content":"Returns the object in the collection that has the specified <code>index</code>.","nodes":[{"pos":[0,79],"content":"Returns the object in the collection that has the specified <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">index</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"Returns the object in the collection that has the specified <code>index</code>."}],"pos":[65586,65666],"yaml":true},{"content":"The zero-based index of the element to be retrieved from the collection.","nodes":[{"pos":[0,72],"content":"The zero-based index of the element to be retrieved from the collection.","nodes":[{"content":"The zero-based index of the element to be retrieved from the collection.","pos":[0,72]}]}],"pos":[65833,65906],"yaml":true},{"content":"Returns <xref href=\"System.Boolean\"></xref>.  \n  \n Returns the object in the collection that has the specified <code>index</code>.","nodes":[{"pos":[0,44],"content":"Returns <ph id=\"ph1\">&lt;xref href=\"System.Boolean\"&gt;&lt;/xref&gt;</ph>.","source":"Returns <xref href=\"System.Boolean\"></xref>."},{"pos":[51,130],"content":"Returns the object in the collection that has the specified <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">index</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"Returns the object in the collection that has the specified <code>index</code>."}],"pos":[65951,66088],"yaml":true},{"content":"Throws a <xref href=\"System.NotSupportedException\"></xref> if called.","nodes":[{"pos":[0,69],"content":"Throws a <ph id=\"ph1\">&lt;xref href=\"System.NotSupportedException\"&gt;&lt;/xref&gt;</ph> if called.","source":"Throws a <xref href=\"System.NotSupportedException\"></xref> if called."}],"pos":[67573,67643],"yaml":true},{"content":"The zero-based index of the element to be retrieved from the collection.","nodes":[{"pos":[0,72],"content":"The zero-based index of the element to be retrieved from the collection.","nodes":[{"content":"The zero-based index of the element to be retrieved from the collection.","pos":[0,72]}]}],"pos":[67778,67851],"yaml":true},{"content":"Items cannot be removed from a read-only collection.","nodes":[{"pos":[0,52],"content":"Items cannot be removed from a read-only collection.","nodes":[{"content":"Items cannot be removed from a read-only collection.","pos":[0,52]}]}],"pos":[68085,68138],"yaml":true},{"content":"Copies the elements of the collection to a specified array, starting at a particular index.","nodes":[{"pos":[0,91],"content":"Copies the elements of the collection to a specified array, starting at a particular index.","nodes":[{"content":"Copies the elements of the collection to a specified array, starting at a particular index.","pos":[0,91]}]}],"pos":[69571,69663],"yaml":true},{"content":"The <xref href=\"System.Array\"></xref> that is the destination for the elements copied from the collection.","nodes":[{"pos":[0,106],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Array\"&gt;&lt;/xref&gt;</ph> that is the destination for the elements copied from the collection.","source":"The <xref href=\"System.Array\"></xref> that is the destination for the elements copied from the collection."}],"pos":[69812,69919],"yaml":true},{"content":"The zero-based index in the array at which copying begins.","nodes":[{"pos":[0,58],"content":"The zero-based index in the array at which copying begins.","nodes":[{"content":"The zero-based index in the array at which copying begins.","pos":[0,58]}]}],"pos":[69979,70038],"yaml":true},{"content":"This property always returns `true` because the collection is thread safe.","nodes":[{"pos":[0,74],"content":"This property always returns <ph id=\"ph1\">`true`</ph> because the collection is thread safe.","source":"This property always returns `true` because the collection is thread safe."}],"pos":[71526,71601],"yaml":true},{"content":"Returns <xref href=\"System.Boolean\"></xref>.  \n  \n This property always returns `true` because the collection is thread safe.","nodes":[{"pos":[0,44],"content":"Returns <ph id=\"ph1\">&lt;xref href=\"System.Boolean\"&gt;&lt;/xref&gt;</ph>.","source":"Returns <xref href=\"System.Boolean\"></xref>."},{"pos":[51,125],"content":"This property always returns <ph id=\"ph1\">`true`</ph> because the collection is thread safe.","source":"This property always returns `true` because the collection is thread safe."}],"pos":[71742,71874],"yaml":true},{"content":"Gets the object used to synchronize access to the thread-safe, read-only collection.","nodes":[{"pos":[0,84],"content":"Gets the object used to synchronize access to the thread-safe, read-only collection.","nodes":[{"content":"Gets the object used to synchronize access to the thread-safe, read-only collection.","pos":[0,84]}]}],"pos":[73297,73382],"yaml":true},{"content":"The value of this `syncRoot` object can be set when creating the thread-safe collection using the <xref:System.Collections.Generic.SynchronizedReadOnlyCollection%601.%23ctor%28System.Object%29> constructor.","nodes":[{"pos":[0,206],"content":"The value of this <ph id=\"ph1\">`syncRoot`</ph> object can be set when creating the thread-safe collection using the <ph id=\"ph2\">&lt;xref:System.Collections.Generic.SynchronizedReadOnlyCollection%601.%23ctor%28System.Object%29&gt;</ph> constructor.","source":"The value of this `syncRoot` object can be set when creating the thread-safe collection using the <xref:System.Collections.Generic.SynchronizedReadOnlyCollection%601.%23ctor%28System.Object%29> constructor."}],"pos":[73393,73600],"yaml":true,"extradata":"MT"},{"content":"Returns <xref href=\"System.Object\"></xref>.  \n  \n The object used to synchronize access to the thread-safe, read-only collection.","nodes":[{"pos":[0,43],"content":"Returns <ph id=\"ph1\">&lt;xref href=\"System.Object\"&gt;&lt;/xref&gt;</ph>.","source":"Returns <xref href=\"System.Object\"></xref>."},{"pos":[50,129],"content":"The object used to synchronize access to the thread-safe, read-only collection.","nodes":[{"content":"The object used to synchronize access to the thread-safe, read-only collection.","pos":[0,79]}]}],"pos":[73736,73872],"yaml":true},{"content":"Returns an enumerator that iterates through the synchronized, read-only collection.","nodes":[{"pos":[0,83],"content":"Returns an enumerator that iterates through the synchronized, read-only collection.","nodes":[{"content":"Returns an enumerator that iterates through the synchronized, read-only collection.","pos":[0,83]}]}],"pos":[75323,75407],"yaml":true},{"content":"Returns <xref href=\"System.Collections.IEnumerator\"></xref>.  An enumerator that iterates through the synchronized, read-only collection.","nodes":[{"pos":[0,137],"content":"Returns <xref href=\"System.Collections.IEnumerator\"></xref>.  An enumerator that iterates through the synchronized, read-only collection.","nodes":[{"content":"Returns <ph id=\"ph1\">&lt;xref href=\"System.Collections.IEnumerator\"&gt;&lt;/xref&gt;</ph>.","pos":[0,60],"source":"Returns <xref href=\"System.Collections.IEnumerator\"></xref>."},{"content":"An enumerator that iterates through the synchronized, read-only collection.","pos":[62,137]}]}],"pos":[75584,75722],"yaml":true},{"content":"Adds an element to the collection.","nodes":[{"pos":[0,34],"content":"Adds an element to the collection.","nodes":[{"content":"Adds an element to the collection.","pos":[0,34]}]}],"pos":[77182,77217],"yaml":true},{"content":"Items cannot be added to a read-only collection.","nodes":[{"pos":[0,48],"content":"Items cannot be added to a read-only collection.","nodes":[{"content":"Items cannot be added to a read-only collection.","pos":[0,48]}]}],"pos":[77228,77277],"yaml":true,"extradata":"MT"},{"content":"The element to be added to the collection.","nodes":[{"pos":[0,42],"content":"The element to be added to the collection.","nodes":[{"content":"The element to be added to the collection.","pos":[0,42]}]}],"pos":[77407,77450],"yaml":true},{"content":"Returns <xref href=\"System.Int32\"></xref>. The position into which the new element was inserted.","nodes":[{"pos":[0,96],"content":"Returns <xref href=\"System.Int32\"></xref>. The position into which the new element was inserted.","nodes":[{"content":"Returns <ph id=\"ph1\">&lt;xref href=\"System.Int32\"&gt;&lt;/xref&gt;</ph>.","pos":[0,42],"source":"Returns <xref href=\"System.Int32\"></xref>."},{"content":"The position into which the new element was inserted.","pos":[43,96]}]}],"pos":[77506,77603],"yaml":true},{"content":"Items cannot be set in a read-only collection.","nodes":[{"pos":[0,46],"content":"Items cannot be set in a read-only collection.","nodes":[{"content":"Items cannot be set in a read-only collection.","pos":[0,46]}]}],"pos":[77821,77868],"yaml":true},{"content":"Items cannot be cleared from a read-only collection.","nodes":[{"pos":[0,52],"content":"Items cannot be cleared from a read-only collection.","nodes":[{"content":"Items cannot be cleared from a read-only collection.","pos":[0,52]}]}],"pos":[79142,79195],"yaml":true},{"content":"Items cannot be cleared from a read-only collection.","nodes":[{"pos":[0,52],"content":"Items cannot be cleared from a read-only collection.","nodes":[{"content":"Items cannot be cleared from a read-only collection.","pos":[0,52]}]}],"pos":[79206,79259],"yaml":true,"extradata":"MT"},{"content":"Items cannot be cleared from a read-only collection.","nodes":[{"pos":[0,52],"content":"Items cannot be cleared from a read-only collection.","nodes":[{"content":"Items cannot be cleared from a read-only collection.","pos":[0,52]}]}],"pos":[79542,79595],"yaml":true},{"content":"Checks whether the specified object exists in the collection.","nodes":[{"pos":[0,61],"content":"Checks whether the specified object exists in the collection.","nodes":[{"content":"Checks whether the specified object exists in the collection.","pos":[0,61]}]}],"pos":[80950,81012],"yaml":true},{"content":"Returns `true` if the element `value` is found in the collection; otherwise `false`.","nodes":[{"pos":[0,84],"content":"Returns <ph id=\"ph1\">`true`</ph> if the element <ph id=\"ph2\">`value`</ph> is found in the collection; otherwise <ph id=\"ph3\">`false`</ph>.","source":"Returns `true` if the element `value` is found in the collection; otherwise `false`."}],"pos":[81023,81108],"yaml":true,"extradata":"MT"},{"content":"The object to locate in the collection.","nodes":[{"pos":[0,39],"content":"The object to locate in the collection.","nodes":[{"content":"The object to locate in the collection.","pos":[0,39]}]}],"pos":[81244,81284],"yaml":true},{"content":"Returns <xref href=\"System.Boolean\"></xref>.  \n  \n True if the object is located in the collection; otherwise false.","nodes":[{"pos":[0,44],"content":"Returns <ph id=\"ph1\">&lt;xref href=\"System.Boolean\"&gt;&lt;/xref&gt;</ph>.","source":"Returns <xref href=\"System.Boolean\"></xref>."},{"pos":[51,116],"content":"True if the object is located in the collection; otherwise false.","nodes":[{"content":"True if the object is located in the collection; otherwise false.","pos":[0,65]}]}],"pos":[81342,81465],"yaml":true},{"content":"<code>value</code> is not an object of the type contained in the collection.","nodes":[{"pos":[0,76],"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> is not an object of the type contained in the collection.","source":"<code>value</code> is not an object of the type contained in the collection."}],"pos":[81680,81757],"yaml":true},{"content":"Gets the index of the specified item.","nodes":[{"pos":[0,37],"content":"Gets the index of the specified item.","nodes":[{"content":"Gets the index of the specified item.","pos":[0,37]}]}],"pos":[83106,83144],"yaml":true},{"content":"The element whose index is being retrieved.","nodes":[{"pos":[0,43],"content":"The element whose index is being retrieved.","nodes":[{"content":"The element whose index is being retrieved.","pos":[0,43]}]}],"pos":[83278,83322],"yaml":true},{"content":"Returns <xref href=\"System.Int32\"></xref>.  \n  \n The zero-based index of the first occurrence of the <code>value</code> in the collection.","nodes":[{"pos":[0,42],"content":"Returns <ph id=\"ph1\">&lt;xref href=\"System.Int32\"&gt;&lt;/xref&gt;</ph>.","source":"Returns <xref href=\"System.Int32\"></xref>."},{"pos":[49,138],"content":"The zero-based index of the first occurrence of the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept> in the collection.","source":"The zero-based index of the first occurrence of the <code>value</code> in the collection."}],"pos":[83378,83523],"yaml":true},{"content":"Items cannot be inserted into a read-only collection.","nodes":[{"pos":[0,53],"content":"Items cannot be inserted into a read-only collection.","nodes":[{"content":"Items cannot be inserted into a read-only collection.","pos":[0,53]}]}],"pos":[85049,85103],"yaml":true},{"content":"Throws a <xref:System.NotSupportedException> if called.","nodes":[{"pos":[0,55],"content":"Throws a <xref:System.NotSupportedException> if called.","nodes":[{"content":"Throws a <ph id=\"ph1\">&lt;xref:System.NotSupportedException&gt;</ph> if called.","pos":[0,55],"source":"Throws a <xref:System.NotSupportedException> if called."}]}],"pos":[85114,85170],"yaml":true,"extradata":"MT"},{"content":"The zero-based index at which <code>value</code> is to be inserted.","nodes":[{"pos":[0,67],"content":"The zero-based index at which <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept> is to be inserted.","source":"The zero-based index at which <code>value</code> is to be inserted."}],"pos":[85314,85382],"yaml":true},{"content":"The object to insert into the collection.","nodes":[{"pos":[0,41],"content":"The object to insert into the collection.","nodes":[{"content":"The object to insert into the collection.","pos":[0,41]}]}],"pos":[85443,85485],"yaml":true},{"content":"Items cannot be inserted into a read-only collection.","nodes":[{"pos":[0,53],"content":"Items cannot be inserted into a read-only collection.","nodes":[{"content":"Items cannot be inserted into a read-only collection.","pos":[0,53]}]}],"pos":[85706,85760],"yaml":true},{"content":"This property returns `true` because the read-only collection is always fixed in size.","nodes":[{"pos":[0,86],"content":"This property returns <ph id=\"ph1\">`true`</ph> because the read-only collection is always fixed in size.","source":"This property returns `true` because the read-only collection is always fixed in size."}],"pos":[87066,87153],"yaml":true},{"content":"Returns <xref href=\"System.Boolean\"></xref>.  \n  \n This property returns `true` because the read-only collection is always fixed in size.","nodes":[{"pos":[0,44],"content":"Returns <ph id=\"ph1\">&lt;xref href=\"System.Boolean\"&gt;&lt;/xref&gt;</ph>.","source":"Returns <xref href=\"System.Boolean\"></xref>."},{"pos":[51,137],"content":"This property returns <ph id=\"ph1\">`true`</ph> because the read-only collection is always fixed in size.","source":"This property returns `true` because the read-only collection is always fixed in size."}],"pos":[87285,87429],"yaml":true},{"content":"This property always returns `true` because the collection is read-only.","nodes":[{"pos":[0,72],"content":"This property always returns <ph id=\"ph1\">`true`</ph> because the collection is read-only.","source":"This property always returns `true` because the collection is read-only."}],"pos":[88819,88892],"yaml":true},{"content":"Returns <xref href=\"System.Boolean\"></xref>.  \n  \n This property always returns `true` because the collection is read-only.","nodes":[{"pos":[0,44],"content":"Returns <ph id=\"ph1\">&lt;xref href=\"System.Boolean\"&gt;&lt;/xref&gt;</ph>.","source":"Returns <xref href=\"System.Boolean\"></xref>."},{"pos":[51,123],"content":"This property always returns <ph id=\"ph1\">`true`</ph> because the collection is read-only.","source":"This property always returns `true` because the collection is read-only."}],"pos":[89023,89153],"yaml":true},{"content":"Gets the item at a specified zero-based index.","nodes":[{"pos":[0,46],"content":"Gets the item at a specified zero-based index.","nodes":[{"content":"Gets the item at a specified zero-based index.","pos":[0,46]}]}],"pos":[90569,90616],"yaml":true},{"content":"The zero-based index of the element to be retrieved from the collection.","nodes":[{"pos":[0,72],"content":"The zero-based index of the element to be retrieved from the collection.","nodes":[{"content":"The zero-based index of the element to be retrieved from the collection.","pos":[0,72]}]}],"pos":[90777,90850],"yaml":true},{"content":"Returns <xref href=\"System.Object\"></xref>.  \n  \n Gets the item at a specified zero-based index.","nodes":[{"pos":[0,43],"content":"Returns <ph id=\"ph1\">&lt;xref href=\"System.Object\"&gt;&lt;/xref&gt;</ph>.","source":"Returns <xref href=\"System.Object\"></xref>."},{"pos":[50,96],"content":"Gets the item at a specified zero-based index.","nodes":[{"content":"Gets the item at a specified zero-based index.","pos":[0,46]}]}],"pos":[90907,91010],"yaml":true},{"content":"Items cannot be set in a read-only collection.","nodes":[{"pos":[0,46],"content":"Items cannot be set in a read-only collection.","nodes":[{"content":"Items cannot be set in a read-only collection.","pos":[0,46]}]}],"pos":[91229,91276],"yaml":true},{"content":"Retrieves the specified element from the collection.","nodes":[{"pos":[0,52],"content":"Retrieves the specified element from the collection.","nodes":[{"content":"Retrieves the specified element from the collection.","pos":[0,52]}]}],"pos":[92582,92635],"yaml":true},{"content":"Throws a <xref:System.NotSupportedException> if called.","nodes":[{"pos":[0,55],"content":"Throws a <xref:System.NotSupportedException> if called.","nodes":[{"content":"Throws a <ph id=\"ph1\">&lt;xref:System.NotSupportedException&gt;</ph> if called.","pos":[0,55],"source":"Throws a <xref:System.NotSupportedException> if called."}]}],"pos":[92646,92702],"yaml":true,"extradata":"MT"},{"content":"The zero-based index of the element to be retrieved from the collection.","nodes":[{"pos":[0,72],"content":"The zero-based index of the element to be retrieved from the collection.","nodes":[{"content":"The zero-based index of the element to be retrieved from the collection.","pos":[0,72]}]}],"pos":[92836,92909],"yaml":true},{"content":"Items cannot be removed from a read-only collection.","nodes":[{"pos":[0,52],"content":"Items cannot be removed from a read-only collection.","nodes":[{"content":"Items cannot be removed from a read-only collection.","pos":[0,52]}]}],"pos":[93130,93183],"yaml":true},{"content":"Items cannot be removed from a read-only collection.","nodes":[{"pos":[0,52],"content":"Items cannot be removed from a read-only collection.","nodes":[{"content":"Items cannot be removed from a read-only collection.","pos":[0,52]}]}],"pos":[94532,94585],"yaml":true},{"content":"Throws a <xref:System.NotSupportedException> if called.","nodes":[{"pos":[0,55],"content":"Throws a <xref:System.NotSupportedException> if called.","nodes":[{"content":"Throws a <ph id=\"ph1\">&lt;xref:System.NotSupportedException&gt;</ph> if called.","pos":[0,55],"source":"Throws a <xref:System.NotSupportedException> if called."}]}],"pos":[94596,94652],"yaml":true,"extradata":"MT"},{"content":"The zero-based index of the element to be retrieved from the collection.","nodes":[{"pos":[0,72],"content":"The zero-based index of the element to be retrieved from the collection.","nodes":[{"content":"The zero-based index of the element to be retrieved from the collection.","pos":[0,72]}]}],"pos":[94784,94857],"yaml":true},{"content":"Items cannot be removed from a read-only collection.","nodes":[{"pos":[0,52],"content":"Items cannot be removed from a read-only collection.","nodes":[{"content":"Items cannot be removed from a read-only collection.","pos":[0,52]}]}],"pos":[95080,95133],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1\n  commentId: T:System.Collections.Generic.SynchronizedReadOnlyCollection`1\n  id: SynchronizedReadOnlyCollection`1\n  children:\n  - System.Collections.Generic.SynchronizedReadOnlyCollection`1.#ctor\n  - System.Collections.Generic.SynchronizedReadOnlyCollection`1.#ctor(System.Object)\n  - System.Collections.Generic.SynchronizedReadOnlyCollection`1.#ctor(System.Object,System.Collections.Generic.IEnumerable{`0})\n  - System.Collections.Generic.SynchronizedReadOnlyCollection`1.#ctor(System.Object,`0[])\n  - System.Collections.Generic.SynchronizedReadOnlyCollection`1.#ctor(System.Object,System.Collections.Generic.List{`0},System.Boolean)\n  - System.Collections.Generic.SynchronizedReadOnlyCollection`1.Contains(`0)\n  - System.Collections.Generic.SynchronizedReadOnlyCollection`1.CopyTo(`0[],System.Int32)\n  - System.Collections.Generic.SynchronizedReadOnlyCollection`1.Count\n  - System.Collections.Generic.SynchronizedReadOnlyCollection`1.GetEnumerator\n  - System.Collections.Generic.SynchronizedReadOnlyCollection`1.IndexOf(`0)\n  - System.Collections.Generic.SynchronizedReadOnlyCollection`1.Item(System.Int32)\n  - System.Collections.Generic.SynchronizedReadOnlyCollection`1.Items\n  - System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#Generic#ICollection{T}#Add(`0)\n  - System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#Generic#ICollection{T}#Clear\n  - System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#Generic#ICollection{T}#IsReadOnly\n  - System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#Generic#ICollection{T}#Remove(`0)\n  - System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#Generic#IList{T}#Insert(System.Int32,`0)\n  - System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#Generic#IList{T}#Item(System.Int32)\n  - System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#Generic#IList{T}#RemoveAt(System.Int32)\n  - System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)\n  - System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#ICollection#IsSynchronized\n  - System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#ICollection#SyncRoot\n  - System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#IEnumerable#GetEnumerator\n  - System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#IList#Add(System.Object)\n  - System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#IList#Clear\n  - System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#IList#Contains(System.Object)\n  - System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#IList#IndexOf(System.Object)\n  - System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#IList#Insert(System.Int32,System.Object)\n  - System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#IList#IsFixedSize\n  - System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#IList#IsReadOnly\n  - System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#IList#Item(System.Int32)\n  - System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#IList#Remove(System.Object)\n  - System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#IList#RemoveAt(System.Int32)\n  langs:\n  - csharp\n  name: SynchronizedReadOnlyCollection<T>\n  nameWithType: SynchronizedReadOnlyCollection<T>\n  fullName: System.Collections.Generic.SynchronizedReadOnlyCollection<T>\n  type: Class\n  assemblies:\n  - System.ServiceModel\n  namespace: System.Collections.Generic\n  summary: Provides a thread-safe, read-only collection that contains objects of a type specified by the generic parameter as elements.\n  remarks: The <xref:System.Collections.Generic.SynchronizedReadOnlyCollection%601> stores data in an <xref:System.Collections.Generic.IList%601> container and provides an object that can be set and used to synchronize access to the collection so that it is thread safe. The <xref:System.Collections.Generic.IList%601> container can be recovered using the <xref:System.Collections.Generic.SynchronizedReadOnlyCollection%601.Items%2A> property. The synchronized object can be recovered using the <xref:System.Collections.Generic.SynchronizedReadOnlyCollection%601.System.Collections.ICollection.SyncRoot%2A> property. It can only be set using one of the constructors that take the `syncRoot` parameter.\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(false)]\n\n      public class SynchronizedReadOnlyCollection<T> : System.Collections.Generic.ICollection<T>, System.Collections.Generic.IEnumerable<T>, System.Collections.Generic.IList<T>, System.Collections.IList\n    typeParameters:\n    - id: T\n      description: The type of object contained as items in the thread-safe, read-only collection.\n  inheritance:\n  - System.Object\n  implements:\n  - System.Collections.Generic.ICollection{T}\n  - System.Collections.Generic.IEnumerable{T}\n  - System.Collections.Generic.IList{T}\n  - System.Collections.IList\n  inheritedMembers:\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.ToString\n  extensionMethods:\n  - System.Collections.Immutable.ImmutableArray.ToImmutableArray``1(System.Collections.Generic.IEnumerable{``0})\n  - System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})\n  - System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})\n  - System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}})\n  - System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}},System.Collections.Generic.IEqualityComparer{``0})\n  - System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}},System.Collections.Generic.IEqualityComparer{``0},System.Collections.Generic.IEqualityComparer{``1})\n  - System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})\n  - System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})\n  - System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1},System.Collections.Generic.IEqualityComparer{``2})\n  - System.Collections.Immutable.ImmutableHashSet.ToImmutableHashSet``1(System.Collections.Generic.IEnumerable{``0})\n  - System.Collections.Immutable.ImmutableHashSet.ToImmutableHashSet``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})\n  - System.Collections.Immutable.ImmutableList.ToImmutableList``1(System.Collections.Generic.IEnumerable{``0})\n  - System.Collections.Immutable.ImmutableSortedDictionary.ToImmutableSortedDictionary``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}})\n  - System.Collections.Immutable.ImmutableSortedDictionary.ToImmutableSortedDictionary``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}},System.Collections.Generic.IComparer{``0})\n  - System.Collections.Immutable.ImmutableSortedDictionary.ToImmutableSortedDictionary``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}},System.Collections.Generic.IComparer{``0},System.Collections.Generic.IEqualityComparer{``1})\n  - System.Collections.Immutable.ImmutableSortedDictionary.ToImmutableSortedDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})\n  - System.Collections.Immutable.ImmutableSortedDictionary.ToImmutableSortedDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IComparer{``1})\n  - System.Collections.Immutable.ImmutableSortedDictionary.ToImmutableSortedDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IComparer{``1},System.Collections.Generic.IEqualityComparer{``2})\n  - System.Collections.Immutable.ImmutableSortedSet.ToImmutableSortedSet``1(System.Collections.Generic.IEnumerable{``0})\n  - System.Collections.Immutable.ImmutableSortedSet.ToImmutableSortedSet``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IComparer{``0})\n  - System.Data.DataTableExtensions.CopyToDataTable``1(System.Collections.Generic.IEnumerable{``0})\n  - System.Data.DataTableExtensions.CopyToDataTable``1(System.Collections.Generic.IEnumerable{``0},System.Data.DataTable,System.Data.LoadOption)\n  - System.Data.DataTableExtensions.CopyToDataTable``1(System.Collections.Generic.IEnumerable{``0},System.Data.DataTable,System.Data.LoadOption,System.Data.FillErrorEventHandler)\n  - System.Linq.Enumerable.Aggregate``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,``0})\n  - System.Linq.Enumerable.Aggregate``2(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1})\n  - System.Linq.Enumerable.Aggregate``3(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``2})\n  - System.Linq.Enumerable.All``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})\n  - System.Linq.Enumerable.Any``1(System.Collections.Generic.IEnumerable{``0})\n  - System.Linq.Enumerable.Any``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})\n  - System.Linq.Enumerable.Append``1(System.Collections.Generic.IEnumerable{``0},``0)\n  - System.Linq.Enumerable.AsEnumerable``1(System.Collections.Generic.IEnumerable{``0})\n  - System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Decimal})\n  - System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Double})\n  - System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Int32})\n  - System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Int64})\n  - System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})\n  - System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})\n  - System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})\n  - System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})\n  - System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})\n  - System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Single})\n  - System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})\n  - System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})\n  - System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})\n  - System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})\n  - System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})\n  - System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})\n  - System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})\n  - System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})\n  - System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})\n  - System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})\n  - System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)\n  - System.Linq.Enumerable.Concat``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})\n  - System.Linq.Enumerable.Contains``1(System.Collections.Generic.IEnumerable{``0},``0)\n  - System.Linq.Enumerable.Contains``1(System.Collections.Generic.IEnumerable{``0},``0,System.Collections.Generic.IEqualityComparer{``0})\n  - System.Linq.Enumerable.Count``1(System.Collections.Generic.IEnumerable{``0})\n  - System.Linq.Enumerable.Count``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})\n  - System.Linq.Enumerable.DefaultIfEmpty``1(System.Collections.Generic.IEnumerable{``0})\n  - System.Linq.Enumerable.DefaultIfEmpty``1(System.Collections.Generic.IEnumerable{``0},``0)\n  - System.Linq.Enumerable.Distinct``1(System.Collections.Generic.IEnumerable{``0})\n  - System.Linq.Enumerable.Distinct``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})\n  - System.Linq.Enumerable.ElementAt``1(System.Collections.Generic.IEnumerable{``0},System.Int32)\n  - System.Linq.Enumerable.ElementAtOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Int32)\n  - System.Linq.Enumerable.Except``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})\n  - System.Linq.Enumerable.Except``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})\n  - System.Linq.Enumerable.First``1(System.Collections.Generic.IEnumerable{``0})\n  - System.Linq.Enumerable.First``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})\n  - System.Linq.Enumerable.FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0})\n  - System.Linq.Enumerable.FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})\n  - System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})\n  - System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})\n  - System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})\n  - System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})\n  - System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2})\n  - System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2},System.Collections.Generic.IEqualityComparer{``1})\n  - System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3})\n  - System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3},System.Collections.Generic.IEqualityComparer{``1})\n  - System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})\n  - System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})\n  - System.Linq.Enumerable.Intersect``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})\n  - System.Linq.Enumerable.Intersect``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})\n  - System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})\n  - System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})\n  - System.Linq.Enumerable.Last``1(System.Collections.Generic.IEnumerable{``0})\n  - System.Linq.Enumerable.Last``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})\n  - System.Linq.Enumerable.LastOrDefault``1(System.Collections.Generic.IEnumerable{``0})\n  - System.Linq.Enumerable.LastOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})\n  - System.Linq.Enumerable.LongCount``1(System.Collections.Generic.IEnumerable{``0})\n  - System.Linq.Enumerable.LongCount``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})\n  - System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Decimal})\n  - System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Double})\n  - System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Int32})\n  - System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Int64})\n  - System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})\n  - System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})\n  - System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})\n  - System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})\n  - System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})\n  - System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Single})\n  - System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0})\n  - System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})\n  - System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})\n  - System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})\n  - System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})\n  - System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})\n  - System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})\n  - System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})\n  - System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})\n  - System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})\n  - System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})\n  - System.Linq.Enumerable.Max``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})\n  - System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Decimal})\n  - System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Double})\n  - System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Int32})\n  - System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Int64})\n  - System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})\n  - System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})\n  - System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})\n  - System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})\n  - System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})\n  - System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Single})\n  - System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0})\n  - System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})\n  - System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})\n  - System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})\n  - System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})\n  - System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})\n  - System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})\n  - System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})\n  - System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})\n  - System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})\n  - System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})\n  - System.Linq.Enumerable.Min``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})\n  - System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)\n  - System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})\n  - System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})\n  - System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})\n  - System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})\n  - System.Linq.Enumerable.Prepend``1(System.Collections.Generic.IEnumerable{``0},``0)\n  - System.Linq.Enumerable.Reverse``1(System.Collections.Generic.IEnumerable{``0})\n  - System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})\n  - System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,``1})\n  - System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}})\n  - System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}})\n  - System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})\n  - System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})\n  - System.Linq.Enumerable.SequenceEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})\n  - System.Linq.Enumerable.SequenceEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})\n  - System.Linq.Enumerable.Single``1(System.Collections.Generic.IEnumerable{``0})\n  - System.Linq.Enumerable.Single``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})\n  - System.Linq.Enumerable.SingleOrDefault``1(System.Collections.Generic.IEnumerable{``0})\n  - System.Linq.Enumerable.SingleOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})\n  - System.Linq.Enumerable.Skip``1(System.Collections.Generic.IEnumerable{``0},System.Int32)\n  - System.Linq.Enumerable.SkipLast``1(System.Collections.Generic.IEnumerable{``0},System.Int32)\n  - System.Linq.Enumerable.SkipWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})\n  - System.Linq.Enumerable.SkipWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})\n  - System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Decimal})\n  - System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Double})\n  - System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Int32})\n  - System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Int64})\n  - System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})\n  - System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})\n  - System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})\n  - System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})\n  - System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})\n  - System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Single})\n  - System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})\n  - System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})\n  - System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})\n  - System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})\n  - System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})\n  - System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})\n  - System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})\n  - System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})\n  - System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})\n  - System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})\n  - System.Linq.Enumerable.Take``1(System.Collections.Generic.IEnumerable{``0},System.Int32)\n  - System.Linq.Enumerable.TakeLast``1(System.Collections.Generic.IEnumerable{``0},System.Int32)\n  - System.Linq.Enumerable.TakeWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})\n  - System.Linq.Enumerable.TakeWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})\n  - System.Linq.Enumerable.ToArray``1(System.Collections.Generic.IEnumerable{``0})\n  - System.Linq.Enumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})\n  - System.Linq.Enumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})\n  - System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})\n  - System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})\n  - System.Linq.Enumerable.ToHashSet``1(System.Collections.Generic.IEnumerable{``0})\n  - System.Linq.Enumerable.ToHashSet``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})\n  - System.Linq.Enumerable.ToList``1(System.Collections.Generic.IEnumerable{``0})\n  - System.Linq.Enumerable.ToLookup``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})\n  - System.Linq.Enumerable.ToLookup``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})\n  - System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})\n  - System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})\n  - System.Linq.Enumerable.Union``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})\n  - System.Linq.Enumerable.Union``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})\n  - System.Linq.Enumerable.Where``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})\n  - System.Linq.Enumerable.Where``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})\n  - System.Linq.Enumerable.Zip``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,``2})\n  - System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)\n  - System.Linq.ParallelEnumerable.AsParallel``1(System.Collections.Generic.IEnumerable{``0})\n  - System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)\n  - System.Linq.Queryable.AsQueryable``1(System.Collections.Generic.IEnumerable{``0})\n  - System.Xml.Linq.Extensions.Ancestors``1(System.Collections.Generic.IEnumerable{``0})\n  - System.Xml.Linq.Extensions.Ancestors``1(System.Collections.Generic.IEnumerable{``0},System.Xml.Linq.XName)\n  - System.Xml.Linq.Extensions.AncestorsAndSelf(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement})\n  - System.Xml.Linq.Extensions.AncestorsAndSelf(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement},System.Xml.Linq.XName)\n  - System.Xml.Linq.Extensions.Attributes(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement})\n  - System.Xml.Linq.Extensions.Attributes(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement},System.Xml.Linq.XName)\n  - System.Xml.Linq.Extensions.DescendantNodes``1(System.Collections.Generic.IEnumerable{``0})\n  - System.Xml.Linq.Extensions.DescendantNodesAndSelf(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement})\n  - System.Xml.Linq.Extensions.Descendants``1(System.Collections.Generic.IEnumerable{``0})\n  - System.Xml.Linq.Extensions.Descendants``1(System.Collections.Generic.IEnumerable{``0},System.Xml.Linq.XName)\n  - System.Xml.Linq.Extensions.DescendantsAndSelf(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement})\n  - System.Xml.Linq.Extensions.DescendantsAndSelf(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement},System.Xml.Linq.XName)\n  - System.Xml.Linq.Extensions.Elements``1(System.Collections.Generic.IEnumerable{``0})\n  - System.Xml.Linq.Extensions.Elements``1(System.Collections.Generic.IEnumerable{``0},System.Xml.Linq.XName)\n  - System.Xml.Linq.Extensions.InDocumentOrder``1(System.Collections.Generic.IEnumerable{``0})\n  - System.Xml.Linq.Extensions.Nodes``1(System.Collections.Generic.IEnumerable{``0})\n  - System.Xml.Linq.Extensions.Remove(System.Collections.Generic.IEnumerable{System.Xml.Linq.XAttribute})\n  - System.Xml.Linq.Extensions.Remove``1(System.Collections.Generic.IEnumerable{``0})\n  attributes:\n  - type: System.Runtime.InteropServices.ComVisibleAttribute\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/SynchronizedReadOnlyCollection`1.xml\n  ms.technology:\n  - dotnet-standard\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.#ctor\n  commentId: M:System.Collections.Generic.SynchronizedReadOnlyCollection`1.#ctor\n  id: '#ctor'\n  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1\n  langs:\n  - csharp\n  name: SynchronizedReadOnlyCollection<T>()\n  nameWithType: SynchronizedReadOnlyCollection<T>.SynchronizedReadOnlyCollection<T>()\n  fullName: SynchronizedReadOnlyCollection<T>.SynchronizedReadOnlyCollection<T>()\n  type: Constructor\n  assemblies:\n  - System.ServiceModel\n  namespace: System.Collections.Generic\n  summary: Initializes a new instance of the <xref href=\"System.Collections.Generic.SynchronizedReadOnlyCollection`1\"></xref> class.\n  syntax:\n    content: public SynchronizedReadOnlyCollection ();\n    parameters: []\n  overload: System.Collections.Generic.SynchronizedReadOnlyCollection`1.#ctor*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/SynchronizedReadOnlyCollection`1.xml\n  ms.technology:\n  - dotnet-standard\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.#ctor(System.Object)\n  commentId: M:System.Collections.Generic.SynchronizedReadOnlyCollection`1.#ctor(System.Object)\n  id: '#ctor(System.Object)'\n  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1\n  langs:\n  - csharp\n  name: SynchronizedReadOnlyCollection<T>(Object)\n  nameWithType: SynchronizedReadOnlyCollection<T>.SynchronizedReadOnlyCollection<T>(Object)\n  fullName: SynchronizedReadOnlyCollection<T>.SynchronizedReadOnlyCollection<T>(Object)\n  type: Constructor\n  assemblies:\n  - System.ServiceModel\n  namespace: System.Collections.Generic\n  summary: Initializes a new instance of the <xref href=\"System.Collections.Generic.SynchronizedReadOnlyCollection`1\"></xref> class with the object used to synchronize access to the thread-safe, read-only collection.\n  remarks: If multiple instances of the <xref:System.Collections.Generic.SynchronizedReadOnlyCollection%601> are created using the same `syncRoot`, then access is protected across all instances.\n  syntax:\n    content: public SynchronizedReadOnlyCollection (object sync_root);\n    parameters:\n    - id: syncRoot\n      type: System.Object\n      description: ''\n  overload: System.Collections.Generic.SynchronizedReadOnlyCollection`1.#ctor*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>sync_root</code> is `null`.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/SynchronizedReadOnlyCollection`1.xml\n  ms.technology:\n  - dotnet-standard\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.#ctor(System.Object,System.Collections.Generic.IEnumerable{`0})\n  commentId: M:System.Collections.Generic.SynchronizedReadOnlyCollection`1.#ctor(System.Object,System.Collections.Generic.IEnumerable{`0})\n  id: '#ctor(System.Object,System.Collections.Generic.IEnumerable{`0})'\n  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1\n  langs:\n  - csharp\n  name: SynchronizedReadOnlyCollection<T>(Object, IEnumerable<T>)\n  nameWithType: SynchronizedReadOnlyCollection<T>.SynchronizedReadOnlyCollection<T>(Object, IEnumerable<T>)\n  fullName: SynchronizedReadOnlyCollection<T>.SynchronizedReadOnlyCollection<T>(Object, IEnumerable<T>)\n  type: Constructor\n  assemblies:\n  - System.ServiceModel\n  namespace: System.Collections.Generic\n  summary: Initializes a new instance of the <xref href=\"System.Collections.Generic.SynchronizedReadOnlyCollection`1\"></xref> class from a specified enumerable list of elements and with the object used to synchronize access to the thread-safe, read-only collection.\n  syntax:\n    content: public SynchronizedReadOnlyCollection (object sync_root, System.Collections.Generic.IEnumerable<T> list);\n    parameters:\n    - id: syncRoot\n      type: System.Object\n      description: ''\n    - id: list\n      type: System.Collections.Generic.IEnumerable`1\n      description: The <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> collection of elements used to initialize the thread-safe, read-only collection.\n  overload: System.Collections.Generic.SynchronizedReadOnlyCollection`1.#ctor*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>syncRoot</code> or <code>list</code> is `null`.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/SynchronizedReadOnlyCollection`1.xml\n  ms.technology:\n  - dotnet-standard\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.#ctor(System.Object,`0[])\n  commentId: M:System.Collections.Generic.SynchronizedReadOnlyCollection`1.#ctor(System.Object,`0[])\n  id: '#ctor(System.Object,`0[])'\n  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1\n  langs:\n  - csharp\n  name: SynchronizedReadOnlyCollection<T>(Object, T[])\n  nameWithType: SynchronizedReadOnlyCollection<T>.SynchronizedReadOnlyCollection<T>(Object, T[])\n  fullName: SynchronizedReadOnlyCollection<T>.SynchronizedReadOnlyCollection<T>(Object, T[])\n  type: Constructor\n  assemblies:\n  - System.ServiceModel\n  namespace: System.Collections.Generic\n  summary: Initializes a new instance of the <xref href=\"System.Collections.Generic.SynchronizedReadOnlyCollection`1\"></xref> class from a specified array of elements and with the object used to synchronize access to the thread-safe, read-only collection.\n  syntax:\n    content: public SynchronizedReadOnlyCollection (object sync_root, T[] list);\n    parameters:\n    - id: syncRoot\n      type: System.Object\n      description: ''\n    - id: list\n      type: T[]\n      description: The <xref href=\"System.Array\"></xref> of type <code>T</code> elements used to initialize the thread-safe, read-only collection.\n  overload: System.Collections.Generic.SynchronizedReadOnlyCollection`1.#ctor*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>syncRoot</code> or <code>list</code> is `null`.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/SynchronizedReadOnlyCollection`1.xml\n  ms.technology:\n  - dotnet-standard\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.#ctor(System.Object,System.Collections.Generic.List{`0},System.Boolean)\n  commentId: M:System.Collections.Generic.SynchronizedReadOnlyCollection`1.#ctor(System.Object,System.Collections.Generic.List{`0},System.Boolean)\n  id: '#ctor(System.Object,System.Collections.Generic.List{`0},System.Boolean)'\n  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1\n  langs:\n  - csharp\n  name: SynchronizedReadOnlyCollection<T>(Object, List<T>, Boolean)\n  nameWithType: SynchronizedReadOnlyCollection<T>.SynchronizedReadOnlyCollection<T>(Object, List<T>, Boolean)\n  fullName: SynchronizedReadOnlyCollection<T>.SynchronizedReadOnlyCollection<T>(Object, List<T>, Boolean)\n  type: Constructor\n  assemblies:\n  - System.ServiceModel\n  namespace: System.Collections.Generic\n  syntax:\n    content: public SynchronizedReadOnlyCollection (object sync_root, System.Collections.Generic.List<T> list, bool make_copy);\n    parameters:\n    - id: sync_root\n      type: System.Object\n      description: ''\n    - id: list\n      type: System.Collections.Generic.List`1\n      description: ''\n    - id: make_copy\n      type: System.Boolean\n      description: ''\n  overload: System.Collections.Generic.SynchronizedReadOnlyCollection`1.#ctor*\n  exceptions: []\n  version:\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/SynchronizedReadOnlyCollection`1.xml\n- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.Contains(`0)\n  commentId: M:System.Collections.Generic.SynchronizedReadOnlyCollection`1.Contains(`0)\n  id: Contains(`0)\n  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1\n  langs:\n  - csharp\n  name: Contains(T)\n  nameWithType: SynchronizedReadOnlyCollection<T>.Contains(T)\n  fullName: SynchronizedReadOnlyCollection<T>.Contains(T)\n  type: Method\n  assemblies:\n  - System.ServiceModel\n  namespace: System.Collections.Generic\n  summary: Determines whether the collection contains an element with a specific value.\n  syntax:\n    content: public bool Contains (T value);\n    parameters:\n    - id: value\n      type: T\n      description: The object to locate in the collection.\n    return:\n      type: System.Boolean\n      description: '`true` if the element <code>value</code> is found in the collection; otherwise `false`.'\n  overload: System.Collections.Generic.SynchronizedReadOnlyCollection`1.Contains*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>value</code> is not an object of the type contained in the collection.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/SynchronizedReadOnlyCollection`1.xml\n  ms.technology:\n  - dotnet-standard\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.CopyTo(`0[],System.Int32)\n  commentId: M:System.Collections.Generic.SynchronizedReadOnlyCollection`1.CopyTo(`0[],System.Int32)\n  id: CopyTo(`0[],System.Int32)\n  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1\n  langs:\n  - csharp\n  name: CopyTo(T[], Int32)\n  nameWithType: SynchronizedReadOnlyCollection<T>.CopyTo(T[], Int32)\n  fullName: SynchronizedReadOnlyCollection<T>.CopyTo(T[], Int32)\n  type: Method\n  assemblies:\n  - System.ServiceModel\n  namespace: System.Collections.Generic\n  summary: Copies the elements of the collection to a specified array, starting at a particular index.\n  syntax:\n    content: public void CopyTo (T[] array, int index);\n    parameters:\n    - id: array\n      type: T[]\n      description: The <xref href=\"System.Array\"></xref> that is the destination for the elements copied from the collection.\n    - id: index\n      type: System.Int32\n      description: The zero-based index in the array at which copying begins.\n  overload: System.Collections.Generic.SynchronizedReadOnlyCollection`1.CopyTo*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/SynchronizedReadOnlyCollection`1.xml\n  ms.technology:\n  - dotnet-standard\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.Count\n  commentId: P:System.Collections.Generic.SynchronizedReadOnlyCollection`1.Count\n  id: Count\n  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1\n  langs:\n  - csharp\n  name: Count\n  nameWithType: SynchronizedReadOnlyCollection<T>.Count\n  fullName: SynchronizedReadOnlyCollection<T>.Count\n  type: Property\n  assemblies:\n  - System.ServiceModel\n  namespace: System.Collections.Generic\n  summary: Gets the number of elements contained in the thread-safe, read-only collection.\n  syntax:\n    content: public int Count { get; }\n    return:\n      type: System.Int32\n      description: The number of elements contained in the thread-safe, read-only collection.\n  overload: System.Collections.Generic.SynchronizedReadOnlyCollection`1.Count*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/SynchronizedReadOnlyCollection`1.xml\n  ms.technology:\n  - dotnet-standard\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.GetEnumerator\n  commentId: M:System.Collections.Generic.SynchronizedReadOnlyCollection`1.GetEnumerator\n  id: GetEnumerator\n  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1\n  langs:\n  - csharp\n  name: GetEnumerator()\n  nameWithType: SynchronizedReadOnlyCollection<T>.GetEnumerator()\n  fullName: SynchronizedReadOnlyCollection<T>.GetEnumerator()\n  type: Method\n  assemblies:\n  - System.ServiceModel\n  namespace: System.Collections.Generic\n  summary: Returns an enumerator that iterates through the synchronized, read-only collection.\n  syntax:\n    content: public System.Collections.Generic.IEnumerator<T> GetEnumerator ();\n    parameters: []\n    return:\n      type: System.Collections.Generic.IEnumerator`1\n      description: An <xref href=\"System.Collections.Generic.IEnumerator`1\"></xref> for objects of the type stored in the collection.\n  overload: System.Collections.Generic.SynchronizedReadOnlyCollection`1.GetEnumerator*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/SynchronizedReadOnlyCollection`1.xml\n  ms.technology:\n  - dotnet-standard\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.IndexOf(`0)\n  commentId: M:System.Collections.Generic.SynchronizedReadOnlyCollection`1.IndexOf(`0)\n  id: IndexOf(`0)\n  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1\n  langs:\n  - csharp\n  name: IndexOf(T)\n  nameWithType: SynchronizedReadOnlyCollection<T>.IndexOf(T)\n  fullName: SynchronizedReadOnlyCollection<T>.IndexOf(T)\n  type: Method\n  assemblies:\n  - System.ServiceModel\n  namespace: System.Collections.Generic\n  summary: Returns the index of the first occurrence of a value in the collection.\n  syntax:\n    content: public int IndexOf (T value);\n    parameters:\n    - id: value\n      type: T\n      description: The element whose index is being retrieved.\n    return:\n      type: System.Int32\n      description: The zero-based index of the first occurrence of the <code>value</code> in the collection.\n  overload: System.Collections.Generic.SynchronizedReadOnlyCollection`1.IndexOf*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/SynchronizedReadOnlyCollection`1.xml\n  ms.technology:\n  - dotnet-standard\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.Item(System.Int32)\n  commentId: P:System.Collections.Generic.SynchronizedReadOnlyCollection`1.Item(System.Int32)\n  id: Item(System.Int32)\n  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1\n  langs:\n  - csharp\n  name: Item(Int32)\n  nameWithType: SynchronizedReadOnlyCollection<T>.Item(Int32)\n  fullName: SynchronizedReadOnlyCollection<T>.Item(Int32)\n  type: Property\n  assemblies:\n  - System.ServiceModel\n  namespace: System.Collections.Generic\n  summary: Gets an element from the thread-safe, read-only collection with a specified index.\n  syntax:\n    content: public T this[int index] { get; }\n    parameters:\n    - id: index\n      type: System.Int32\n      description: The zero-based index of the element to be retrieved from the collection.\n    return:\n      type: T\n      description: The object in the collection that has the specified <code>index</code>.\n  overload: System.Collections.Generic.SynchronizedReadOnlyCollection`1.Item*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/SynchronizedReadOnlyCollection`1.xml\n  ms.technology:\n  - dotnet-standard\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.Items\n  commentId: P:System.Collections.Generic.SynchronizedReadOnlyCollection`1.Items\n  id: Items\n  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1\n  langs:\n  - csharp\n  name: Items\n  nameWithType: SynchronizedReadOnlyCollection<T>.Items\n  fullName: SynchronizedReadOnlyCollection<T>.Items\n  type: Property\n  assemblies:\n  - System.ServiceModel\n  namespace: System.Collections.Generic\n  summary: Gets the list of elements contained in the thread-safe, read-only collection.\n  syntax:\n    content: protected System.Collections.Generic.IList<T> Items { get; }\n    return:\n      type: System.Collections.Generic.IList`1\n      description: The <xref href=\"System.Collections.Generic.IList`1\"></xref> of elements that are contained in the thread-safe, read-only collection.\n  overload: System.Collections.Generic.SynchronizedReadOnlyCollection`1.Items*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/SynchronizedReadOnlyCollection`1.xml\n  ms.technology:\n  - dotnet-standard\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#Generic#ICollection{T}#Add(`0)\n  commentId: M:System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#Generic#ICollection<T>#Add(`0)\n  id: System#Collections#Generic#ICollection{T}#Add(`0)\n  isEii: true\n  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1\n  langs:\n  - csharp\n  name: ICollection<T>.Add(T)\n  nameWithType: SynchronizedReadOnlyCollection<T>.ICollection<T>.Add(T)\n  fullName: SynchronizedReadOnlyCollection<T>.ICollection<T>.Add(T)\n  type: Method\n  assemblies:\n  - System.ServiceModel\n  namespace: System.Collections.Generic\n  summary: Throws a <xref href=\"System.NotSupportedException\"></xref> if called.\n  remarks: Items cannot be added to a read-only collection.\n  syntax:\n    content: void ICollection<T>.Add (T value);\n    parameters:\n    - id: value\n      type: T\n      description: The element to be added to the collection.\n  overload: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#Generic#ICollection{T}#Add*\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: Items cannot be set in a read-only collection.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/SynchronizedReadOnlyCollection`1.xml\n  ms.technology:\n  - dotnet-standard\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#Generic#ICollection{T}#Clear\n  commentId: M:System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#Generic#ICollection<T>#Clear\n  id: System#Collections#Generic#ICollection{T}#Clear\n  isEii: true\n  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1\n  langs:\n  - csharp\n  name: ICollection<T>.Clear()\n  nameWithType: SynchronizedReadOnlyCollection<T>.ICollection<T>.Clear()\n  fullName: SynchronizedReadOnlyCollection<T>.ICollection<T>.Clear()\n  type: Method\n  assemblies:\n  - System.ServiceModel\n  namespace: System.Collections.Generic\n  summary: Throws a <xref href=\"System.NotSupportedException\"></xref> if called.\n  remarks: Items cannot be cleared from a read-only collection.\n  syntax:\n    content: void ICollection<T>.Clear ();\n    parameters: []\n  overload: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#Generic#ICollection{T}#Clear*\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: Items cannot be cleared from a read-only collection.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/SynchronizedReadOnlyCollection`1.xml\n  ms.technology:\n  - dotnet-standard\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#Generic#ICollection{T}#IsReadOnly\n  commentId: P:System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#Generic#ICollection<T>#IsReadOnly\n  id: System#Collections#Generic#ICollection{T}#IsReadOnly\n  isEii: true\n  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1\n  langs:\n  - csharp\n  name: ICollection<T>.IsReadOnly\n  nameWithType: SynchronizedReadOnlyCollection<T>.ICollection<T>.IsReadOnly\n  fullName: SynchronizedReadOnlyCollection<T>.ICollection<T>.IsReadOnly\n  type: Property\n  assemblies:\n  - System.ServiceModel\n  namespace: System.Collections.Generic\n  summary: This property always returns `true` because the collection is read-only.\n  syntax:\n    content: bool System.Collections.Generic.ICollection<T>.IsReadOnly { get; }\n    return:\n      type: System.Boolean\n      description: \"Returns <xref href=\\\"System.Boolean\\\"></xref>.  \\n  \\n This property always returns `true` because the collection is read-only.\"\n  overload: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#Generic#ICollection{T}#IsReadOnly*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/SynchronizedReadOnlyCollection`1.xml\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#Generic#ICollection{T}#Remove(`0)\n  commentId: M:System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#Generic#ICollection<T>#Remove(`0)\n  id: System#Collections#Generic#ICollection{T}#Remove(`0)\n  isEii: true\n  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1\n  langs:\n  - csharp\n  name: ICollection<T>.Remove(T)\n  nameWithType: SynchronizedReadOnlyCollection<T>.ICollection<T>.Remove(T)\n  fullName: SynchronizedReadOnlyCollection<T>.ICollection<T>.Remove(T)\n  type: Method\n  assemblies:\n  - System.ServiceModel\n  namespace: System.Collections.Generic\n  summary: Returns `false` and throws a <xref href=\"System.NotSupportedException\"></xref> if called.\n  syntax:\n    content: bool ICollection<T>.Remove (T value);\n    parameters:\n    - id: value\n      type: T\n      description: The value to be removed from the collection.\n    return:\n      type: System.Boolean\n      description: \"`False`.  \\n  \\n The method returns `false` to indicate that the item was not removed from the read-only collection.\"\n  overload: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#Generic#ICollection{T}#Remove*\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: Items cannot be removed from a read-only collection.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/SynchronizedReadOnlyCollection`1.xml\n  ms.technology:\n  - dotnet-standard\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#Generic#IList{T}#Insert(System.Int32,`0)\n  commentId: M:System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#Generic#IList<T>#Insert(System.Int32,`0)\n  id: System#Collections#Generic#IList{T}#Insert(System.Int32,`0)\n  isEii: true\n  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1\n  langs:\n  - csharp\n  name: IList<T>.Insert(Int32, T)\n  nameWithType: SynchronizedReadOnlyCollection<T>.IList<T>.Insert(Int32, T)\n  fullName: SynchronizedReadOnlyCollection<T>.IList<T>.Insert(Int32, T)\n  type: Method\n  assemblies:\n  - System.ServiceModel\n  namespace: System.Collections.Generic\n  summary: Throws a <xref href=\"System.NotSupportedException\"></xref> if called.\n  syntax:\n    content: void IList<T>.Insert (int index, T value);\n    parameters:\n    - id: index\n      type: System.Int32\n      description: The zero-based index at which <code>value</code> is to be inserted.\n    - id: value\n      type: T\n      description: The object to insert into the collection.\n  overload: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#Generic#IList{T}#Insert*\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: Items cannot be inserted into a read-only collection.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/SynchronizedReadOnlyCollection`1.xml\n  ms.technology:\n  - dotnet-standard\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#Generic#IList{T}#Item(System.Int32)\n  commentId: P:System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#Generic#IList<T>#Item(System.Int32)\n  id: System#Collections#Generic#IList{T}#Item(System.Int32)\n  isEii: true\n  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1\n  langs:\n  - csharp\n  name: IList<T>.Item(Int32)\n  nameWithType: SynchronizedReadOnlyCollection<T>.IList<T>.Item(Int32)\n  fullName: SynchronizedReadOnlyCollection<T>.IList<T>.Item(Int32)\n  type: Property\n  assemblies:\n  - System.ServiceModel\n  namespace: System.Collections.Generic\n  summary: Returns the object in the collection that has the specified <code>index</code>.\n  syntax:\n    content: T System.Collections.Generic.IList<T>.Item[int index] { get; set; }\n    parameters:\n    - id: index\n      type: System.Int32\n      description: The zero-based index of the element to be retrieved from the collection.\n    return:\n      type: T\n      description: \"Returns <xref href=\\\"System.Boolean\\\"></xref>.  \\n  \\n Returns the object in the collection that has the specified <code>index</code>.\"\n  overload: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#Generic#IList{T}#Item*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/SynchronizedReadOnlyCollection`1.xml\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#Generic#IList{T}#RemoveAt(System.Int32)\n  commentId: M:System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#Generic#IList<T>#RemoveAt(System.Int32)\n  id: System#Collections#Generic#IList{T}#RemoveAt(System.Int32)\n  isEii: true\n  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1\n  langs:\n  - csharp\n  name: IList<T>.RemoveAt(Int32)\n  nameWithType: SynchronizedReadOnlyCollection<T>.IList<T>.RemoveAt(Int32)\n  fullName: SynchronizedReadOnlyCollection<T>.IList<T>.RemoveAt(Int32)\n  type: Method\n  assemblies:\n  - System.ServiceModel\n  namespace: System.Collections.Generic\n  summary: Throws a <xref href=\"System.NotSupportedException\"></xref> if called.\n  syntax:\n    content: void IList<T>.RemoveAt (int index);\n    parameters:\n    - id: index\n      type: System.Int32\n      description: The zero-based index of the element to be retrieved from the collection.\n  overload: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#Generic#IList{T}#RemoveAt*\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: Items cannot be removed from a read-only collection.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/SynchronizedReadOnlyCollection`1.xml\n  ms.technology:\n  - dotnet-standard\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)\n  commentId: M:System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)\n  id: System#Collections#ICollection#CopyTo(System.Array,System.Int32)\n  isEii: true\n  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1\n  langs:\n  - csharp\n  name: ICollection.CopyTo(Array, Int32)\n  nameWithType: SynchronizedReadOnlyCollection<T>.ICollection.CopyTo(Array, Int32)\n  fullName: SynchronizedReadOnlyCollection<T>.ICollection.CopyTo(Array, Int32)\n  type: Method\n  assemblies:\n  - System.ServiceModel\n  namespace: System.Collections.Generic\n  summary: Copies the elements of the collection to a specified array, starting at a particular index.\n  syntax:\n    content: void ICollection.CopyTo (Array array, int index);\n    parameters:\n    - id: array\n      type: System.Array\n      description: The <xref href=\"System.Array\"></xref> that is the destination for the elements copied from the collection.\n    - id: index\n      type: System.Int32\n      description: The zero-based index in the array at which copying begins.\n  overload: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#ICollection#CopyTo*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/SynchronizedReadOnlyCollection`1.xml\n  ms.technology:\n  - dotnet-standard\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#ICollection#IsSynchronized\n  commentId: P:System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#ICollection#IsSynchronized\n  id: System#Collections#ICollection#IsSynchronized\n  isEii: true\n  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1\n  langs:\n  - csharp\n  name: ICollection.IsSynchronized\n  nameWithType: SynchronizedReadOnlyCollection<T>.ICollection.IsSynchronized\n  fullName: SynchronizedReadOnlyCollection<T>.ICollection.IsSynchronized\n  type: Property\n  assemblies:\n  - System.ServiceModel\n  namespace: System.Collections.Generic\n  summary: This property always returns `true` because the collection is thread safe.\n  syntax:\n    content: bool System.Collections.ICollection.IsSynchronized { get; }\n    return:\n      type: System.Boolean\n      description: \"Returns <xref href=\\\"System.Boolean\\\"></xref>.  \\n  \\n This property always returns `true` because the collection is thread safe.\"\n  overload: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#ICollection#IsSynchronized*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/SynchronizedReadOnlyCollection`1.xml\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#ICollection#SyncRoot\n  commentId: P:System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#ICollection#SyncRoot\n  id: System#Collections#ICollection#SyncRoot\n  isEii: true\n  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1\n  langs:\n  - csharp\n  name: ICollection.SyncRoot\n  nameWithType: SynchronizedReadOnlyCollection<T>.ICollection.SyncRoot\n  fullName: SynchronizedReadOnlyCollection<T>.ICollection.SyncRoot\n  type: Property\n  assemblies:\n  - System.ServiceModel\n  namespace: System.Collections.Generic\n  summary: Gets the object used to synchronize access to the thread-safe, read-only collection.\n  remarks: The value of this `syncRoot` object can be set when creating the thread-safe collection using the <xref:System.Collections.Generic.SynchronizedReadOnlyCollection%601.%23ctor%28System.Object%29> constructor.\n  syntax:\n    content: object System.Collections.ICollection.SyncRoot { get; }\n    return:\n      type: System.Object\n      description: \"Returns <xref href=\\\"System.Object\\\"></xref>.  \\n  \\n The object used to synchronize access to the thread-safe, read-only collection.\"\n  overload: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#ICollection#SyncRoot*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/SynchronizedReadOnlyCollection`1.xml\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#IEnumerable#GetEnumerator\n  commentId: M:System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#IEnumerable#GetEnumerator\n  id: System#Collections#IEnumerable#GetEnumerator\n  isEii: true\n  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1\n  langs:\n  - csharp\n  name: IEnumerable.GetEnumerator()\n  nameWithType: SynchronizedReadOnlyCollection<T>.IEnumerable.GetEnumerator()\n  fullName: SynchronizedReadOnlyCollection<T>.IEnumerable.GetEnumerator()\n  type: Method\n  assemblies:\n  - System.ServiceModel\n  namespace: System.Collections.Generic\n  summary: Returns an enumerator that iterates through the synchronized, read-only collection.\n  syntax:\n    content: System.Collections.IEnumerator IEnumerable.GetEnumerator ();\n    parameters: []\n    return:\n      type: System.Collections.IEnumerator\n      description: Returns <xref href=\"System.Collections.IEnumerator\"></xref>.  An enumerator that iterates through the synchronized, read-only collection.\n  overload: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#IEnumerable#GetEnumerator*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/SynchronizedReadOnlyCollection`1.xml\n  ms.technology:\n  - dotnet-standard\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#IList#Add(System.Object)\n  commentId: M:System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#IList#Add(System.Object)\n  id: System#Collections#IList#Add(System.Object)\n  isEii: true\n  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1\n  langs:\n  - csharp\n  name: IList.Add(Object)\n  nameWithType: SynchronizedReadOnlyCollection<T>.IList.Add(Object)\n  fullName: SynchronizedReadOnlyCollection<T>.IList.Add(Object)\n  type: Method\n  assemblies:\n  - System.ServiceModel\n  namespace: System.Collections.Generic\n  summary: Adds an element to the collection.\n  remarks: Items cannot be added to a read-only collection.\n  syntax:\n    content: int IList.Add (object value);\n    parameters:\n    - id: value\n      type: System.Object\n      description: The element to be added to the collection.\n    return:\n      type: System.Int32\n      description: Returns <xref href=\"System.Int32\"></xref>. The position into which the new element was inserted.\n  overload: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#IList#Add*\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: Items cannot be set in a read-only collection.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/SynchronizedReadOnlyCollection`1.xml\n  ms.technology:\n  - dotnet-standard\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#IList#Clear\n  commentId: M:System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#IList#Clear\n  id: System#Collections#IList#Clear\n  isEii: true\n  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1\n  langs:\n  - csharp\n  name: IList.Clear()\n  nameWithType: SynchronizedReadOnlyCollection<T>.IList.Clear()\n  fullName: SynchronizedReadOnlyCollection<T>.IList.Clear()\n  type: Method\n  assemblies:\n  - System.ServiceModel\n  namespace: System.Collections.Generic\n  summary: Items cannot be cleared from a read-only collection.\n  remarks: Items cannot be cleared from a read-only collection.\n  syntax:\n    content: void IList.Clear ();\n    parameters: []\n  overload: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#IList#Clear*\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: Items cannot be cleared from a read-only collection.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/SynchronizedReadOnlyCollection`1.xml\n  ms.technology:\n  - dotnet-standard\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#IList#Contains(System.Object)\n  commentId: M:System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#IList#Contains(System.Object)\n  id: System#Collections#IList#Contains(System.Object)\n  isEii: true\n  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1\n  langs:\n  - csharp\n  name: IList.Contains(Object)\n  nameWithType: SynchronizedReadOnlyCollection<T>.IList.Contains(Object)\n  fullName: SynchronizedReadOnlyCollection<T>.IList.Contains(Object)\n  type: Method\n  assemblies:\n  - System.ServiceModel\n  namespace: System.Collections.Generic\n  summary: Checks whether the specified object exists in the collection.\n  remarks: Returns `true` if the element `value` is found in the collection; otherwise `false`.\n  syntax:\n    content: bool IList.Contains (object value);\n    parameters:\n    - id: value\n      type: System.Object\n      description: The object to locate in the collection.\n    return:\n      type: System.Boolean\n      description: \"Returns <xref href=\\\"System.Boolean\\\"></xref>.  \\n  \\n True if the object is located in the collection; otherwise false.\"\n  overload: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#IList#Contains*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>value</code> is not an object of the type contained in the collection.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/SynchronizedReadOnlyCollection`1.xml\n  ms.technology:\n  - dotnet-standard\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#IList#IndexOf(System.Object)\n  commentId: M:System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#IList#IndexOf(System.Object)\n  id: System#Collections#IList#IndexOf(System.Object)\n  isEii: true\n  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1\n  langs:\n  - csharp\n  name: IList.IndexOf(Object)\n  nameWithType: SynchronizedReadOnlyCollection<T>.IList.IndexOf(Object)\n  fullName: SynchronizedReadOnlyCollection<T>.IList.IndexOf(Object)\n  type: Method\n  assemblies:\n  - System.ServiceModel\n  namespace: System.Collections.Generic\n  summary: Gets the index of the specified item.\n  syntax:\n    content: int IList.IndexOf (object value);\n    parameters:\n    - id: value\n      type: System.Object\n      description: The element whose index is being retrieved.\n    return:\n      type: System.Int32\n      description: \"Returns <xref href=\\\"System.Int32\\\"></xref>.  \\n  \\n The zero-based index of the first occurrence of the <code>value</code> in the collection.\"\n  overload: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#IList#IndexOf*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/SynchronizedReadOnlyCollection`1.xml\n  ms.technology:\n  - dotnet-standard\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#IList#Insert(System.Int32,System.Object)\n  commentId: M:System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#IList#Insert(System.Int32,System.Object)\n  id: System#Collections#IList#Insert(System.Int32,System.Object)\n  isEii: true\n  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1\n  langs:\n  - csharp\n  name: IList.Insert(Int32, Object)\n  nameWithType: SynchronizedReadOnlyCollection<T>.IList.Insert(Int32, Object)\n  fullName: SynchronizedReadOnlyCollection<T>.IList.Insert(Int32, Object)\n  type: Method\n  assemblies:\n  - System.ServiceModel\n  namespace: System.Collections.Generic\n  summary: Items cannot be inserted into a read-only collection.\n  remarks: Throws a <xref:System.NotSupportedException> if called.\n  syntax:\n    content: void IList.Insert (int index, object value);\n    parameters:\n    - id: index\n      type: System.Int32\n      description: The zero-based index at which <code>value</code> is to be inserted.\n    - id: value\n      type: System.Object\n      description: The object to insert into the collection.\n  overload: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#IList#Insert*\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: Items cannot be inserted into a read-only collection.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/SynchronizedReadOnlyCollection`1.xml\n  ms.technology:\n  - dotnet-standard\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#IList#IsFixedSize\n  commentId: P:System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#IList#IsFixedSize\n  id: System#Collections#IList#IsFixedSize\n  isEii: true\n  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1\n  langs:\n  - csharp\n  name: IList.IsFixedSize\n  nameWithType: SynchronizedReadOnlyCollection<T>.IList.IsFixedSize\n  fullName: SynchronizedReadOnlyCollection<T>.IList.IsFixedSize\n  type: Property\n  assemblies:\n  - System.ServiceModel\n  namespace: System.Collections.Generic\n  summary: This property returns `true` because the read-only collection is always fixed in size.\n  syntax:\n    content: bool System.Collections.IList.IsFixedSize { get; }\n    return:\n      type: System.Boolean\n      description: \"Returns <xref href=\\\"System.Boolean\\\"></xref>.  \\n  \\n This property returns `true` because the read-only collection is always fixed in size.\"\n  overload: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#IList#IsFixedSize*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/SynchronizedReadOnlyCollection`1.xml\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#IList#IsReadOnly\n  commentId: P:System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#IList#IsReadOnly\n  id: System#Collections#IList#IsReadOnly\n  isEii: true\n  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1\n  langs:\n  - csharp\n  name: IList.IsReadOnly\n  nameWithType: SynchronizedReadOnlyCollection<T>.IList.IsReadOnly\n  fullName: SynchronizedReadOnlyCollection<T>.IList.IsReadOnly\n  type: Property\n  assemblies:\n  - System.ServiceModel\n  namespace: System.Collections.Generic\n  summary: This property always returns `true` because the collection is read-only.\n  syntax:\n    content: bool System.Collections.IList.IsReadOnly { get; }\n    return:\n      type: System.Boolean\n      description: \"Returns <xref href=\\\"System.Boolean\\\"></xref>.  \\n  \\n This property always returns `true` because the collection is read-only.\"\n  overload: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#IList#IsReadOnly*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/SynchronizedReadOnlyCollection`1.xml\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#IList#Item(System.Int32)\n  commentId: P:System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#IList#Item(System.Int32)\n  id: System#Collections#IList#Item(System.Int32)\n  isEii: true\n  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1\n  langs:\n  - csharp\n  name: IList.Item(Int32)\n  nameWithType: SynchronizedReadOnlyCollection<T>.IList.Item(Int32)\n  fullName: SynchronizedReadOnlyCollection<T>.IList.Item(Int32)\n  type: Property\n  assemblies:\n  - System.ServiceModel\n  namespace: System.Collections.Generic\n  summary: Gets the item at a specified zero-based index.\n  syntax:\n    content: object System.Collections.IList.Item[int index] { get; set; }\n    parameters:\n    - id: index\n      type: System.Int32\n      description: The zero-based index of the element to be retrieved from the collection.\n    return:\n      type: System.Object\n      description: \"Returns <xref href=\\\"System.Object\\\"></xref>.  \\n  \\n Gets the item at a specified zero-based index.\"\n  overload: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#IList#Item*\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: Items cannot be set in a read-only collection.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/SynchronizedReadOnlyCollection`1.xml\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#IList#Remove(System.Object)\n  commentId: M:System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#IList#Remove(System.Object)\n  id: System#Collections#IList#Remove(System.Object)\n  isEii: true\n  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1\n  langs:\n  - csharp\n  name: IList.Remove(Object)\n  nameWithType: SynchronizedReadOnlyCollection<T>.IList.Remove(Object)\n  fullName: SynchronizedReadOnlyCollection<T>.IList.Remove(Object)\n  type: Method\n  assemblies:\n  - System.ServiceModel\n  namespace: System.Collections.Generic\n  summary: Retrieves the specified element from the collection.\n  remarks: Throws a <xref:System.NotSupportedException> if called.\n  syntax:\n    content: void IList.Remove (object value);\n    parameters:\n    - id: value\n      type: System.Object\n      description: The zero-based index of the element to be retrieved from the collection.\n  overload: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#IList#Remove*\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: Items cannot be removed from a read-only collection.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/SynchronizedReadOnlyCollection`1.xml\n  ms.technology:\n  - dotnet-standard\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#IList#RemoveAt(System.Int32)\n  commentId: M:System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#IList#RemoveAt(System.Int32)\n  id: System#Collections#IList#RemoveAt(System.Int32)\n  isEii: true\n  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1\n  langs:\n  - csharp\n  name: IList.RemoveAt(Int32)\n  nameWithType: SynchronizedReadOnlyCollection<T>.IList.RemoveAt(Int32)\n  fullName: SynchronizedReadOnlyCollection<T>.IList.RemoveAt(Int32)\n  type: Method\n  assemblies:\n  - System.ServiceModel\n  namespace: System.Collections.Generic\n  summary: Items cannot be removed from a read-only collection.\n  remarks: Throws a <xref:System.NotSupportedException> if called.\n  syntax:\n    content: void IList.RemoveAt (int index);\n    parameters:\n    - id: index\n      type: System.Int32\n      description: The zero-based index of the element to be retrieved from the collection.\n  overload: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#IList#RemoveAt*\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: Items cannot be removed from a read-only collection.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/SynchronizedReadOnlyCollection`1.xml\n  ms.technology:\n  - dotnet-standard\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\nreferences:\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.ArgumentNullException\n  parent: System\n  isExternal: false\n  name: ArgumentNullException\n  nameWithType: ArgumentNullException\n  fullName: System.ArgumentNullException\n- uid: System.ArgumentException\n  parent: System\n  isExternal: false\n  name: ArgumentException\n  nameWithType: ArgumentException\n  fullName: System.ArgumentException\n- uid: System.NotSupportedException\n  parent: System\n  isExternal: false\n  name: NotSupportedException\n  nameWithType: NotSupportedException\n  fullName: System.NotSupportedException\n- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.#ctor\n  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1\n  isExternal: false\n  name: SynchronizedReadOnlyCollection<T>()\n  nameWithType: SynchronizedReadOnlyCollection<T>.SynchronizedReadOnlyCollection<T>()\n  fullName: SynchronizedReadOnlyCollection<T>.SynchronizedReadOnlyCollection<T>()\n- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.#ctor(System.Object)\n  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1\n  isExternal: false\n  name: SynchronizedReadOnlyCollection<T>(Object)\n  nameWithType: SynchronizedReadOnlyCollection<T>.SynchronizedReadOnlyCollection<T>(Object)\n  fullName: SynchronizedReadOnlyCollection<T>.SynchronizedReadOnlyCollection<T>(Object)\n- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.#ctor(System.Object,System.Collections.Generic.IEnumerable{`0})\n  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1\n  isExternal: false\n  name: SynchronizedReadOnlyCollection<T>(Object, IEnumerable<T>)\n  nameWithType: SynchronizedReadOnlyCollection<T>.SynchronizedReadOnlyCollection<T>(Object, IEnumerable<T>)\n  fullName: SynchronizedReadOnlyCollection<T>.SynchronizedReadOnlyCollection<T>(Object, IEnumerable<T>)\n- uid: System.Collections.Generic.IEnumerable`1\n  parent: System.Collections.Generic\n  isExternal: false\n  name: IEnumerable<T>\n  nameWithType: IEnumerable<T>\n  fullName: System.Collections.Generic.IEnumerable<T>\n- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.#ctor(System.Object,`0[])\n  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1\n  isExternal: false\n  name: SynchronizedReadOnlyCollection<T>(Object, T[])\n  nameWithType: SynchronizedReadOnlyCollection<T>.SynchronizedReadOnlyCollection<T>(Object, T[])\n  fullName: SynchronizedReadOnlyCollection<T>.SynchronizedReadOnlyCollection<T>(Object, T[])\n- uid: T\n  name: T\n  nameWithType: T\n  fullName: T\n- uid: T[]\n  isExternal: true\n  name: T[]\n  nameWithType: T[]\n  fullName: T[]\n  spec.csharp:\n  - uid: T\n    name: T\n    nameWithType: T\n    fullName: T\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.#ctor(System.Object,System.Collections.Generic.List{`0},System.Boolean)\n  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1\n  isExternal: false\n  name: SynchronizedReadOnlyCollection<T>(Object, List<T>, Boolean)\n  nameWithType: SynchronizedReadOnlyCollection<T>.SynchronizedReadOnlyCollection<T>(Object, List<T>, Boolean)\n  fullName: SynchronizedReadOnlyCollection<T>.SynchronizedReadOnlyCollection<T>(Object, List<T>, Boolean)\n- uid: System.Collections.Generic.List`1\n  parent: System.Collections.Generic\n  isExternal: false\n  name: List<T>\n  nameWithType: List<T>\n  fullName: System.Collections.Generic.List<T>\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.Contains(`0)\n  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1\n  isExternal: false\n  name: Contains(T)\n  nameWithType: SynchronizedReadOnlyCollection<T>.Contains(T)\n  fullName: SynchronizedReadOnlyCollection<T>.Contains(T)\n- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.CopyTo(`0[],System.Int32)\n  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1\n  isExternal: false\n  name: CopyTo(T[], Int32)\n  nameWithType: SynchronizedReadOnlyCollection<T>.CopyTo(T[], Int32)\n  fullName: SynchronizedReadOnlyCollection<T>.CopyTo(T[], Int32)\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.Count\n  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1\n  isExternal: false\n  name: Count\n  nameWithType: SynchronizedReadOnlyCollection<T>.Count\n  fullName: SynchronizedReadOnlyCollection<T>.Count\n- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.GetEnumerator\n  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1\n  isExternal: false\n  name: GetEnumerator()\n  nameWithType: SynchronizedReadOnlyCollection<T>.GetEnumerator()\n  fullName: SynchronizedReadOnlyCollection<T>.GetEnumerator()\n- uid: System.Collections.Generic.IEnumerator`1\n  parent: System.Collections.Generic\n  isExternal: false\n  name: IEnumerator<T>\n  nameWithType: IEnumerator<T>\n  fullName: System.Collections.Generic.IEnumerator<T>\n- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.IndexOf(`0)\n  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1\n  isExternal: false\n  name: IndexOf(T)\n  nameWithType: SynchronizedReadOnlyCollection<T>.IndexOf(T)\n  fullName: SynchronizedReadOnlyCollection<T>.IndexOf(T)\n- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.Item(System.Int32)\n  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1\n  isExternal: false\n  name: Item(Int32)\n  nameWithType: SynchronizedReadOnlyCollection<T>.Item(Int32)\n  fullName: SynchronizedReadOnlyCollection<T>.Item(Int32)\n- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.Items\n  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1\n  isExternal: false\n  name: Items\n  nameWithType: SynchronizedReadOnlyCollection<T>.Items\n  fullName: SynchronizedReadOnlyCollection<T>.Items\n- uid: System.Collections.Generic.IList`1\n  parent: System.Collections.Generic\n  isExternal: false\n  name: IList<T>\n  nameWithType: IList<T>\n  fullName: System.Collections.Generic.IList<T>\n- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#Generic#ICollection{T}#Add(`0)\n  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1\n  isExternal: false\n  name: ICollection<T>.Add(T)\n  nameWithType: SynchronizedReadOnlyCollection<T>.ICollection<T>.Add(T)\n  fullName: SynchronizedReadOnlyCollection<T>.ICollection<T>.Add(T)\n- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#Generic#ICollection{T}#Clear\n  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1\n  isExternal: false\n  name: ICollection<T>.Clear()\n  nameWithType: SynchronizedReadOnlyCollection<T>.ICollection<T>.Clear()\n  fullName: SynchronizedReadOnlyCollection<T>.ICollection<T>.Clear()\n- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#Generic#ICollection{T}#IsReadOnly\n  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1\n  isExternal: false\n  name: ICollection<T>.IsReadOnly\n  nameWithType: SynchronizedReadOnlyCollection<T>.ICollection<T>.IsReadOnly\n  fullName: SynchronizedReadOnlyCollection<T>.ICollection<T>.IsReadOnly\n- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#Generic#ICollection{T}#Remove(`0)\n  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1\n  isExternal: false\n  name: ICollection<T>.Remove(T)\n  nameWithType: SynchronizedReadOnlyCollection<T>.ICollection<T>.Remove(T)\n  fullName: SynchronizedReadOnlyCollection<T>.ICollection<T>.Remove(T)\n- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#Generic#IList{T}#Insert(System.Int32,`0)\n  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1\n  isExternal: false\n  name: IList<T>.Insert(Int32, T)\n  nameWithType: SynchronizedReadOnlyCollection<T>.IList<T>.Insert(Int32, T)\n  fullName: SynchronizedReadOnlyCollection<T>.IList<T>.Insert(Int32, T)\n- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#Generic#IList{T}#Item(System.Int32)\n  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1\n  isExternal: false\n  name: IList<T>.Item(Int32)\n  nameWithType: SynchronizedReadOnlyCollection<T>.IList<T>.Item(Int32)\n  fullName: SynchronizedReadOnlyCollection<T>.IList<T>.Item(Int32)\n- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#Generic#IList{T}#RemoveAt(System.Int32)\n  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1\n  isExternal: false\n  name: IList<T>.RemoveAt(Int32)\n  nameWithType: SynchronizedReadOnlyCollection<T>.IList<T>.RemoveAt(Int32)\n  fullName: SynchronizedReadOnlyCollection<T>.IList<T>.RemoveAt(Int32)\n- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)\n  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1\n  isExternal: false\n  name: ICollection.CopyTo(Array, Int32)\n  nameWithType: SynchronizedReadOnlyCollection<T>.ICollection.CopyTo(Array, Int32)\n  fullName: SynchronizedReadOnlyCollection<T>.ICollection.CopyTo(Array, Int32)\n- uid: System.Array\n  parent: System\n  isExternal: false\n  name: Array\n  nameWithType: Array\n  fullName: System.Array\n- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#ICollection#IsSynchronized\n  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1\n  isExternal: false\n  name: ICollection.IsSynchronized\n  nameWithType: SynchronizedReadOnlyCollection<T>.ICollection.IsSynchronized\n  fullName: SynchronizedReadOnlyCollection<T>.ICollection.IsSynchronized\n- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#ICollection#SyncRoot\n  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1\n  isExternal: false\n  name: ICollection.SyncRoot\n  nameWithType: SynchronizedReadOnlyCollection<T>.ICollection.SyncRoot\n  fullName: SynchronizedReadOnlyCollection<T>.ICollection.SyncRoot\n- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#IEnumerable#GetEnumerator\n  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1\n  isExternal: false\n  name: IEnumerable.GetEnumerator()\n  nameWithType: SynchronizedReadOnlyCollection<T>.IEnumerable.GetEnumerator()\n  fullName: SynchronizedReadOnlyCollection<T>.IEnumerable.GetEnumerator()\n- uid: System.Collections.IEnumerator\n  parent: System.Collections\n  isExternal: false\n  name: IEnumerator\n  nameWithType: IEnumerator\n  fullName: System.Collections.IEnumerator\n- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#IList#Add(System.Object)\n  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1\n  isExternal: false\n  name: IList.Add(Object)\n  nameWithType: SynchronizedReadOnlyCollection<T>.IList.Add(Object)\n  fullName: SynchronizedReadOnlyCollection<T>.IList.Add(Object)\n- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#IList#Clear\n  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1\n  isExternal: false\n  name: IList.Clear()\n  nameWithType: SynchronizedReadOnlyCollection<T>.IList.Clear()\n  fullName: SynchronizedReadOnlyCollection<T>.IList.Clear()\n- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#IList#Contains(System.Object)\n  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1\n  isExternal: false\n  name: IList.Contains(Object)\n  nameWithType: SynchronizedReadOnlyCollection<T>.IList.Contains(Object)\n  fullName: SynchronizedReadOnlyCollection<T>.IList.Contains(Object)\n- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#IList#IndexOf(System.Object)\n  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1\n  isExternal: false\n  name: IList.IndexOf(Object)\n  nameWithType: SynchronizedReadOnlyCollection<T>.IList.IndexOf(Object)\n  fullName: SynchronizedReadOnlyCollection<T>.IList.IndexOf(Object)\n- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#IList#Insert(System.Int32,System.Object)\n  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1\n  isExternal: false\n  name: IList.Insert(Int32, Object)\n  nameWithType: SynchronizedReadOnlyCollection<T>.IList.Insert(Int32, Object)\n  fullName: SynchronizedReadOnlyCollection<T>.IList.Insert(Int32, Object)\n- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#IList#IsFixedSize\n  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1\n  isExternal: false\n  name: IList.IsFixedSize\n  nameWithType: SynchronizedReadOnlyCollection<T>.IList.IsFixedSize\n  fullName: SynchronizedReadOnlyCollection<T>.IList.IsFixedSize\n- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#IList#IsReadOnly\n  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1\n  isExternal: false\n  name: IList.IsReadOnly\n  nameWithType: SynchronizedReadOnlyCollection<T>.IList.IsReadOnly\n  fullName: SynchronizedReadOnlyCollection<T>.IList.IsReadOnly\n- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#IList#Item(System.Int32)\n  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1\n  isExternal: false\n  name: IList.Item(Int32)\n  nameWithType: SynchronizedReadOnlyCollection<T>.IList.Item(Int32)\n  fullName: SynchronizedReadOnlyCollection<T>.IList.Item(Int32)\n- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#IList#Remove(System.Object)\n  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1\n  isExternal: false\n  name: IList.Remove(Object)\n  nameWithType: SynchronizedReadOnlyCollection<T>.IList.Remove(Object)\n  fullName: SynchronizedReadOnlyCollection<T>.IList.Remove(Object)\n- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#IList#RemoveAt(System.Int32)\n  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1\n  isExternal: false\n  name: IList.RemoveAt(Int32)\n  nameWithType: SynchronizedReadOnlyCollection<T>.IList.RemoveAt(Int32)\n  fullName: SynchronizedReadOnlyCollection<T>.IList.RemoveAt(Int32)\n- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.#ctor*\n  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1\n  isExternal: false\n  name: SynchronizedReadOnlyCollection<T>\n  nameWithType: SynchronizedReadOnlyCollection<T>.SynchronizedReadOnlyCollection<T>\n  fullName: SynchronizedReadOnlyCollection<T>.SynchronizedReadOnlyCollection<T>\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/SynchronizedReadOnlyCollection`1.xml\n- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.Contains*\n  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1\n  isExternal: false\n  name: Contains\n  nameWithType: SynchronizedReadOnlyCollection<T>.Contains\n  fullName: SynchronizedReadOnlyCollection<T>.Contains\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/SynchronizedReadOnlyCollection`1.xml\n- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.CopyTo*\n  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1\n  isExternal: false\n  name: CopyTo\n  nameWithType: SynchronizedReadOnlyCollection<T>.CopyTo\n  fullName: SynchronizedReadOnlyCollection<T>.CopyTo\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/SynchronizedReadOnlyCollection`1.xml\n- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.Count*\n  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1\n  isExternal: false\n  name: Count\n  nameWithType: SynchronizedReadOnlyCollection<T>.Count\n  fullName: SynchronizedReadOnlyCollection<T>.Count\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/SynchronizedReadOnlyCollection`1.xml\n- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.GetEnumerator*\n  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1\n  isExternal: false\n  name: GetEnumerator\n  nameWithType: SynchronizedReadOnlyCollection<T>.GetEnumerator\n  fullName: SynchronizedReadOnlyCollection<T>.GetEnumerator\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/SynchronizedReadOnlyCollection`1.xml\n- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.IndexOf*\n  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1\n  isExternal: false\n  name: IndexOf\n  nameWithType: SynchronizedReadOnlyCollection<T>.IndexOf\n  fullName: SynchronizedReadOnlyCollection<T>.IndexOf\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/SynchronizedReadOnlyCollection`1.xml\n- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.Item*\n  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1\n  isExternal: false\n  name: Item\n  nameWithType: SynchronizedReadOnlyCollection<T>.Item\n  fullName: SynchronizedReadOnlyCollection<T>.Item\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/SynchronizedReadOnlyCollection`1.xml\n- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.Items*\n  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1\n  isExternal: false\n  name: Items\n  nameWithType: SynchronizedReadOnlyCollection<T>.Items\n  fullName: SynchronizedReadOnlyCollection<T>.Items\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/SynchronizedReadOnlyCollection`1.xml\n- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#Generic#ICollection{T}#Add*\n  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1\n  isExternal: false\n  name: System.Collections.Generic.ICollection<T>.Add\n  nameWithType: SynchronizedReadOnlyCollection<T>.System.Collections.Generic.ICollection<T>.Add\n  fullName: SynchronizedReadOnlyCollection<T>.System.Collections.Generic.ICollection<T>.Add\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/SynchronizedReadOnlyCollection`1.xml\n- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#Generic#ICollection{T}#Clear*\n  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1\n  isExternal: false\n  name: System.Collections.Generic.ICollection<T>.Clear\n  nameWithType: SynchronizedReadOnlyCollection<T>.System.Collections.Generic.ICollection<T>.Clear\n  fullName: SynchronizedReadOnlyCollection<T>.System.Collections.Generic.ICollection<T>.Clear\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/SynchronizedReadOnlyCollection`1.xml\n- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#Generic#ICollection{T}#IsReadOnly*\n  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1\n  isExternal: false\n  name: System.Collections.Generic.ICollection<T>.IsReadOnly\n  nameWithType: SynchronizedReadOnlyCollection<T>.System.Collections.Generic.ICollection<T>.IsReadOnly\n  fullName: SynchronizedReadOnlyCollection<T>.System.Collections.Generic.ICollection<T>.IsReadOnly\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/SynchronizedReadOnlyCollection`1.xml\n- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#Generic#ICollection{T}#Remove*\n  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1\n  isExternal: false\n  name: System.Collections.Generic.ICollection<T>.Remove\n  nameWithType: SynchronizedReadOnlyCollection<T>.System.Collections.Generic.ICollection<T>.Remove\n  fullName: SynchronizedReadOnlyCollection<T>.System.Collections.Generic.ICollection<T>.Remove\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/SynchronizedReadOnlyCollection`1.xml\n- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#Generic#IList{T}#Insert*\n  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1\n  isExternal: false\n  name: System.Collections.Generic.IList<T>.Insert\n  nameWithType: SynchronizedReadOnlyCollection<T>.System.Collections.Generic.IList<T>.Insert\n  fullName: SynchronizedReadOnlyCollection<T>.System.Collections.Generic.IList<T>.Insert\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/SynchronizedReadOnlyCollection`1.xml\n- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#Generic#IList{T}#Item*\n  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1\n  isExternal: false\n  name: System.Collections.Generic.IList<T>.Item\n  nameWithType: SynchronizedReadOnlyCollection<T>.System.Collections.Generic.IList<T>.Item\n  fullName: SynchronizedReadOnlyCollection<T>.System.Collections.Generic.IList<T>.Item\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/SynchronizedReadOnlyCollection`1.xml\n- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#Generic#IList{T}#RemoveAt*\n  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1\n  isExternal: false\n  name: System.Collections.Generic.IList<T>.RemoveAt\n  nameWithType: SynchronizedReadOnlyCollection<T>.System.Collections.Generic.IList<T>.RemoveAt\n  fullName: SynchronizedReadOnlyCollection<T>.System.Collections.Generic.IList<T>.RemoveAt\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/SynchronizedReadOnlyCollection`1.xml\n- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#ICollection#CopyTo*\n  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1\n  isExternal: false\n  name: System.Collections.ICollection.CopyTo\n  nameWithType: SynchronizedReadOnlyCollection<T>.System.Collections.ICollection.CopyTo\n  fullName: SynchronizedReadOnlyCollection<T>.System.Collections.ICollection.CopyTo\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/SynchronizedReadOnlyCollection`1.xml\n- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#ICollection#IsSynchronized*\n  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1\n  isExternal: false\n  name: System.Collections.ICollection.IsSynchronized\n  nameWithType: SynchronizedReadOnlyCollection<T>.System.Collections.ICollection.IsSynchronized\n  fullName: SynchronizedReadOnlyCollection<T>.System.Collections.ICollection.IsSynchronized\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/SynchronizedReadOnlyCollection`1.xml\n- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#ICollection#SyncRoot*\n  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1\n  isExternal: false\n  name: System.Collections.ICollection.SyncRoot\n  nameWithType: SynchronizedReadOnlyCollection<T>.System.Collections.ICollection.SyncRoot\n  fullName: SynchronizedReadOnlyCollection<T>.System.Collections.ICollection.SyncRoot\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/SynchronizedReadOnlyCollection`1.xml\n- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#IEnumerable#GetEnumerator*\n  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1\n  isExternal: false\n  name: System.Collections.IEnumerable.GetEnumerator\n  nameWithType: SynchronizedReadOnlyCollection<T>.System.Collections.IEnumerable.GetEnumerator\n  fullName: SynchronizedReadOnlyCollection<T>.System.Collections.IEnumerable.GetEnumerator\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/SynchronizedReadOnlyCollection`1.xml\n- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#IList#Add*\n  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1\n  isExternal: false\n  name: System.Collections.IList.Add\n  nameWithType: SynchronizedReadOnlyCollection<T>.System.Collections.IList.Add\n  fullName: SynchronizedReadOnlyCollection<T>.System.Collections.IList.Add\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/SynchronizedReadOnlyCollection`1.xml\n- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#IList#Clear*\n  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1\n  isExternal: false\n  name: System.Collections.IList.Clear\n  nameWithType: SynchronizedReadOnlyCollection<T>.System.Collections.IList.Clear\n  fullName: SynchronizedReadOnlyCollection<T>.System.Collections.IList.Clear\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/SynchronizedReadOnlyCollection`1.xml\n- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#IList#Contains*\n  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1\n  isExternal: false\n  name: System.Collections.IList.Contains\n  nameWithType: SynchronizedReadOnlyCollection<T>.System.Collections.IList.Contains\n  fullName: SynchronizedReadOnlyCollection<T>.System.Collections.IList.Contains\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/SynchronizedReadOnlyCollection`1.xml\n- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#IList#IndexOf*\n  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1\n  isExternal: false\n  name: System.Collections.IList.IndexOf\n  nameWithType: SynchronizedReadOnlyCollection<T>.System.Collections.IList.IndexOf\n  fullName: SynchronizedReadOnlyCollection<T>.System.Collections.IList.IndexOf\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/SynchronizedReadOnlyCollection`1.xml\n- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#IList#Insert*\n  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1\n  isExternal: false\n  name: System.Collections.IList.Insert\n  nameWithType: SynchronizedReadOnlyCollection<T>.System.Collections.IList.Insert\n  fullName: SynchronizedReadOnlyCollection<T>.System.Collections.IList.Insert\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/SynchronizedReadOnlyCollection`1.xml\n- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#IList#IsFixedSize*\n  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1\n  isExternal: false\n  name: System.Collections.IList.IsFixedSize\n  nameWithType: SynchronizedReadOnlyCollection<T>.System.Collections.IList.IsFixedSize\n  fullName: SynchronizedReadOnlyCollection<T>.System.Collections.IList.IsFixedSize\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/SynchronizedReadOnlyCollection`1.xml\n- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#IList#IsReadOnly*\n  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1\n  isExternal: false\n  name: System.Collections.IList.IsReadOnly\n  nameWithType: SynchronizedReadOnlyCollection<T>.System.Collections.IList.IsReadOnly\n  fullName: SynchronizedReadOnlyCollection<T>.System.Collections.IList.IsReadOnly\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/SynchronizedReadOnlyCollection`1.xml\n- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#IList#Item*\n  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1\n  isExternal: false\n  name: System.Collections.IList.Item\n  nameWithType: SynchronizedReadOnlyCollection<T>.System.Collections.IList.Item\n  fullName: SynchronizedReadOnlyCollection<T>.System.Collections.IList.Item\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/SynchronizedReadOnlyCollection`1.xml\n- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#IList#Remove*\n  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1\n  isExternal: false\n  name: System.Collections.IList.Remove\n  nameWithType: SynchronizedReadOnlyCollection<T>.System.Collections.IList.Remove\n  fullName: SynchronizedReadOnlyCollection<T>.System.Collections.IList.Remove\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/SynchronizedReadOnlyCollection`1.xml\n- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#IList#RemoveAt*\n  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1\n  isExternal: false\n  name: System.Collections.IList.RemoveAt\n  nameWithType: SynchronizedReadOnlyCollection<T>.System.Collections.IList.RemoveAt\n  fullName: SynchronizedReadOnlyCollection<T>.System.Collections.IList.RemoveAt\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/SynchronizedReadOnlyCollection`1.xml\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: Object.Equals(Object)\n  fullName: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: Object.GetHashCode()\n  fullName: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: false\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: false\n  name: ToString()\n  nameWithType: Object.ToString()\n  fullName: Object.ToString()\n- uid: System.Collections.Immutable.ImmutableArray.ToImmutableArray``1(System.Collections.Generic.IEnumerable{``0})\n  parent: System.Collections.Immutable.ImmutableArray\n  isExternal: false\n  name: ToImmutableArray<TSource>(IEnumerable<TSource>)\n  nameWithType: ImmutableArray.ToImmutableArray<TSource>(IEnumerable<TSource>)\n  fullName: ImmutableArray.ToImmutableArray<TSource>(IEnumerable<TSource>)\n- uid: System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})\n  parent: System.Collections.Immutable.ImmutableDictionary\n  isExternal: false\n  name: ToImmutableDictionary<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>)\n  nameWithType: ImmutableDictionary.ToImmutableDictionary<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>)\n  fullName: ImmutableDictionary.ToImmutableDictionary<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>)\n- uid: System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})\n  parent: System.Collections.Immutable.ImmutableDictionary\n  isExternal: false\n  name: ToImmutableDictionary<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>, IEqualityComparer<TKey>)\n  nameWithType: ImmutableDictionary.ToImmutableDictionary<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>, IEqualityComparer<TKey>)\n  fullName: ImmutableDictionary.ToImmutableDictionary<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>, IEqualityComparer<TKey>)\n- uid: System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}})\n  parent: System.Collections.Immutable.ImmutableDictionary\n  isExternal: false\n  name: ToImmutableDictionary<TKey,TValue>(IEnumerable<KeyValuePair<TKey,TValue>>)\n  nameWithType: ImmutableDictionary.ToImmutableDictionary<TKey,TValue>(IEnumerable<KeyValuePair<TKey,TValue>>)\n  fullName: ImmutableDictionary.ToImmutableDictionary<TKey,TValue>(IEnumerable<KeyValuePair<TKey,TValue>>)\n- uid: System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}},System.Collections.Generic.IEqualityComparer{``0})\n  parent: System.Collections.Immutable.ImmutableDictionary\n  isExternal: false\n  name: ToImmutableDictionary<TKey,TValue>(IEnumerable<KeyValuePair<TKey,TValue>>, IEqualityComparer<TKey>)\n  nameWithType: ImmutableDictionary.ToImmutableDictionary<TKey,TValue>(IEnumerable<KeyValuePair<TKey,TValue>>, IEqualityComparer<TKey>)\n  fullName: ImmutableDictionary.ToImmutableDictionary<TKey,TValue>(IEnumerable<KeyValuePair<TKey,TValue>>, IEqualityComparer<TKey>)\n- uid: System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}},System.Collections.Generic.IEqualityComparer{``0},System.Collections.Generic.IEqualityComparer{``1})\n  parent: System.Collections.Immutable.ImmutableDictionary\n  isExternal: false\n  name: ToImmutableDictionary<TKey,TValue>(IEnumerable<KeyValuePair<TKey,TValue>>, IEqualityComparer<TKey>, IEqualityComparer<TValue>)\n  nameWithType: ImmutableDictionary.ToImmutableDictionary<TKey,TValue>(IEnumerable<KeyValuePair<TKey,TValue>>, IEqualityComparer<TKey>, IEqualityComparer<TValue>)\n  fullName: ImmutableDictionary.ToImmutableDictionary<TKey,TValue>(IEnumerable<KeyValuePair<TKey,TValue>>, IEqualityComparer<TKey>, IEqualityComparer<TValue>)\n- uid: System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})\n  parent: System.Collections.Immutable.ImmutableDictionary\n  isExternal: false\n  name: ToImmutableDictionary<TSource,TKey,TValue>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TValue>)\n  nameWithType: ImmutableDictionary.ToImmutableDictionary<TSource,TKey,TValue>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TValue>)\n  fullName: ImmutableDictionary.ToImmutableDictionary<TSource,TKey,TValue>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TValue>)\n- uid: System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})\n  parent: System.Collections.Immutable.ImmutableDictionary\n  isExternal: false\n  name: ToImmutableDictionary<TSource,TKey,TValue>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TValue>, IEqualityComparer<TKey>)\n  nameWithType: ImmutableDictionary.ToImmutableDictionary<TSource,TKey,TValue>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TValue>, IEqualityComparer<TKey>)\n  fullName: ImmutableDictionary.ToImmutableDictionary<TSource,TKey,TValue>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TValue>, IEqualityComparer<TKey>)\n- uid: System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1},System.Collections.Generic.IEqualityComparer{``2})\n  parent: System.Collections.Immutable.ImmutableDictionary\n  isExternal: false\n  name: ToImmutableDictionary<TSource,TKey,TValue>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TValue>, IEqualityComparer<TKey>, IEqualityComparer<TValue>)\n  nameWithType: ImmutableDictionary.ToImmutableDictionary<TSource,TKey,TValue>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TValue>, IEqualityComparer<TKey>, IEqualityComparer<TValue>)\n  fullName: ImmutableDictionary.ToImmutableDictionary<TSource,TKey,TValue>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TValue>, IEqualityComparer<TKey>, IEqualityComparer<TValue>)\n- uid: System.Collections.Immutable.ImmutableHashSet.ToImmutableHashSet``1(System.Collections.Generic.IEnumerable{``0})\n  parent: System.Collections.Immutable.ImmutableHashSet\n  isExternal: false\n  name: ToImmutableHashSet<TSource>(IEnumerable<TSource>)\n  nameWithType: ImmutableHashSet.ToImmutableHashSet<TSource>(IEnumerable<TSource>)\n  fullName: ImmutableHashSet.ToImmutableHashSet<TSource>(IEnumerable<TSource>)\n- uid: System.Collections.Immutable.ImmutableHashSet.ToImmutableHashSet``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})\n  parent: System.Collections.Immutable.ImmutableHashSet\n  isExternal: false\n  name: ToImmutableHashSet<TSource>(IEnumerable<TSource>, IEqualityComparer<TSource>)\n  nameWithType: ImmutableHashSet.ToImmutableHashSet<TSource>(IEnumerable<TSource>, IEqualityComparer<TSource>)\n  fullName: ImmutableHashSet.ToImmutableHashSet<TSource>(IEnumerable<TSource>, IEqualityComparer<TSource>)\n- uid: System.Collections.Immutable.ImmutableList.ToImmutableList``1(System.Collections.Generic.IEnumerable{``0})\n  parent: System.Collections.Immutable.ImmutableList\n  isExternal: false\n  name: ToImmutableList<TSource>(IEnumerable<TSource>)\n  nameWithType: ImmutableList.ToImmutableList<TSource>(IEnumerable<TSource>)\n  fullName: ImmutableList.ToImmutableList<TSource>(IEnumerable<TSource>)\n- uid: System.Collections.Immutable.ImmutableSortedDictionary.ToImmutableSortedDictionary``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}})\n  parent: System.Collections.Immutable.ImmutableSortedDictionary\n  isExternal: false\n  name: ToImmutableSortedDictionary<TKey,TValue>(IEnumerable<KeyValuePair<TKey,TValue>>)\n  nameWithType: ImmutableSortedDictionary.ToImmutableSortedDictionary<TKey,TValue>(IEnumerable<KeyValuePair<TKey,TValue>>)\n  fullName: ImmutableSortedDictionary.ToImmutableSortedDictionary<TKey,TValue>(IEnumerable<KeyValuePair<TKey,TValue>>)\n- uid: System.Collections.Immutable.ImmutableSortedDictionary.ToImmutableSortedDictionary``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}},System.Collections.Generic.IComparer{``0})\n  parent: System.Collections.Immutable.ImmutableSortedDictionary\n  isExternal: false\n  name: ToImmutableSortedDictionary<TKey,TValue>(IEnumerable<KeyValuePair<TKey,TValue>>, IComparer<TKey>)\n  nameWithType: ImmutableSortedDictionary.ToImmutableSortedDictionary<TKey,TValue>(IEnumerable<KeyValuePair<TKey,TValue>>, IComparer<TKey>)\n  fullName: ImmutableSortedDictionary.ToImmutableSortedDictionary<TKey,TValue>(IEnumerable<KeyValuePair<TKey,TValue>>, IComparer<TKey>)\n- uid: System.Collections.Immutable.ImmutableSortedDictionary.ToImmutableSortedDictionary``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}},System.Collections.Generic.IComparer{``0},System.Collections.Generic.IEqualityComparer{``1})\n  parent: System.Collections.Immutable.ImmutableSortedDictionary\n  isExternal: false\n  name: ToImmutableSortedDictionary<TKey,TValue>(IEnumerable<KeyValuePair<TKey,TValue>>, IComparer<TKey>, IEqualityComparer<TValue>)\n  nameWithType: ImmutableSortedDictionary.ToImmutableSortedDictionary<TKey,TValue>(IEnumerable<KeyValuePair<TKey,TValue>>, IComparer<TKey>, IEqualityComparer<TValue>)\n  fullName: ImmutableSortedDictionary.ToImmutableSortedDictionary<TKey,TValue>(IEnumerable<KeyValuePair<TKey,TValue>>, IComparer<TKey>, IEqualityComparer<TValue>)\n- uid: System.Collections.Immutable.ImmutableSortedDictionary.ToImmutableSortedDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})\n  parent: System.Collections.Immutable.ImmutableSortedDictionary\n  isExternal: false\n  name: ToImmutableSortedDictionary<TSource,TKey,TValue>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TValue>)\n  nameWithType: ImmutableSortedDictionary.ToImmutableSortedDictionary<TSource,TKey,TValue>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TValue>)\n  fullName: ImmutableSortedDictionary.ToImmutableSortedDictionary<TSource,TKey,TValue>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TValue>)\n- uid: System.Collections.Immutable.ImmutableSortedDictionary.ToImmutableSortedDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IComparer{``1})\n  parent: System.Collections.Immutable.ImmutableSortedDictionary\n  isExternal: false\n  name: ToImmutableSortedDictionary<TSource,TKey,TValue>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TValue>, IComparer<TKey>)\n  nameWithType: ImmutableSortedDictionary.ToImmutableSortedDictionary<TSource,TKey,TValue>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TValue>, IComparer<TKey>)\n  fullName: ImmutableSortedDictionary.ToImmutableSortedDictionary<TSource,TKey,TValue>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TValue>, IComparer<TKey>)\n- uid: System.Collections.Immutable.ImmutableSortedDictionary.ToImmutableSortedDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IComparer{``1},System.Collections.Generic.IEqualityComparer{``2})\n  parent: System.Collections.Immutable.ImmutableSortedDictionary\n  isExternal: false\n  name: ToImmutableSortedDictionary<TSource,TKey,TValue>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TValue>, IComparer<TKey>, IEqualityComparer<TValue>)\n  nameWithType: ImmutableSortedDictionary.ToImmutableSortedDictionary<TSource,TKey,TValue>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TValue>, IComparer<TKey>, IEqualityComparer<TValue>)\n  fullName: ImmutableSortedDictionary.ToImmutableSortedDictionary<TSource,TKey,TValue>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TValue>, IComparer<TKey>, IEqualityComparer<TValue>)\n- uid: System.Collections.Immutable.ImmutableSortedSet.ToImmutableSortedSet``1(System.Collections.Generic.IEnumerable{``0})\n  parent: System.Collections.Immutable.ImmutableSortedSet\n  isExternal: false\n  name: ToImmutableSortedSet<TSource>(IEnumerable<TSource>)\n  nameWithType: ImmutableSortedSet.ToImmutableSortedSet<TSource>(IEnumerable<TSource>)\n  fullName: ImmutableSortedSet.ToImmutableSortedSet<TSource>(IEnumerable<TSource>)\n- uid: System.Collections.Immutable.ImmutableSortedSet.ToImmutableSortedSet``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IComparer{``0})\n  parent: System.Collections.Immutable.ImmutableSortedSet\n  isExternal: false\n  name: ToImmutableSortedSet<TSource>(IEnumerable<TSource>, IComparer<TSource>)\n  nameWithType: ImmutableSortedSet.ToImmutableSortedSet<TSource>(IEnumerable<TSource>, IComparer<TSource>)\n  fullName: ImmutableSortedSet.ToImmutableSortedSet<TSource>(IEnumerable<TSource>, IComparer<TSource>)\n- uid: System.Data.DataTableExtensions.CopyToDataTable``1(System.Collections.Generic.IEnumerable{``0})\n  parent: System.Data.DataTableExtensions\n  isExternal: false\n  name: CopyToDataTable<T>(IEnumerable<T>)\n  nameWithType: DataTableExtensions.CopyToDataTable<T>(IEnumerable<T>)\n  fullName: DataTableExtensions.CopyToDataTable<T>(IEnumerable<T>)\n- uid: System.Data.DataTableExtensions.CopyToDataTable``1(System.Collections.Generic.IEnumerable{``0},System.Data.DataTable,System.Data.LoadOption)\n  parent: System.Data.DataTableExtensions\n  isExternal: false\n  name: CopyToDataTable<T>(IEnumerable<T>, DataTable, LoadOption)\n  nameWithType: DataTableExtensions.CopyToDataTable<T>(IEnumerable<T>, DataTable, LoadOption)\n  fullName: DataTableExtensions.CopyToDataTable<T>(IEnumerable<T>, DataTable, LoadOption)\n- uid: System.Data.DataTableExtensions.CopyToDataTable``1(System.Collections.Generic.IEnumerable{``0},System.Data.DataTable,System.Data.LoadOption,System.Data.FillErrorEventHandler)\n  parent: System.Data.DataTableExtensions\n  isExternal: false\n  name: CopyToDataTable<T>(IEnumerable<T>, DataTable, LoadOption, FillErrorEventHandler)\n  nameWithType: DataTableExtensions.CopyToDataTable<T>(IEnumerable<T>, DataTable, LoadOption, FillErrorEventHandler)\n  fullName: DataTableExtensions.CopyToDataTable<T>(IEnumerable<T>, DataTable, LoadOption, FillErrorEventHandler)\n- uid: System.Linq.Enumerable.Aggregate``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,``0})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Aggregate<TSource>(IEnumerable<TSource>, Func<TSource,TSource,TSource>)\n  nameWithType: Enumerable.Aggregate<TSource>(IEnumerable<TSource>, Func<TSource,TSource,TSource>)\n  fullName: Enumerable.Aggregate<TSource>(IEnumerable<TSource>, Func<TSource,TSource,TSource>)\n- uid: System.Linq.Enumerable.Aggregate``2(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Aggregate<TSource,TAccumulate>(IEnumerable<TSource>, TAccumulate, Func<TAccumulate,TSource,TAccumulate>)\n  nameWithType: Enumerable.Aggregate<TSource,TAccumulate>(IEnumerable<TSource>, TAccumulate, Func<TAccumulate,TSource,TAccumulate>)\n  fullName: Enumerable.Aggregate<TSource,TAccumulate>(IEnumerable<TSource>, TAccumulate, Func<TAccumulate,TSource,TAccumulate>)\n- uid: System.Linq.Enumerable.Aggregate``3(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``2})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Aggregate<TSource,TAccumulate,TResult>(IEnumerable<TSource>, TAccumulate, Func<TAccumulate,TSource,TAccumulate>, Func<TAccumulate,TResult>)\n  nameWithType: Enumerable.Aggregate<TSource,TAccumulate,TResult>(IEnumerable<TSource>, TAccumulate, Func<TAccumulate,TSource,TAccumulate>, Func<TAccumulate,TResult>)\n  fullName: Enumerable.Aggregate<TSource,TAccumulate,TResult>(IEnumerable<TSource>, TAccumulate, Func<TAccumulate,TSource,TAccumulate>, Func<TAccumulate,TResult>)\n- uid: System.Linq.Enumerable.All``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: All<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n  nameWithType: Enumerable.All<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n  fullName: Enumerable.All<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n- uid: System.Linq.Enumerable.Any``1(System.Collections.Generic.IEnumerable{``0})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Any<TSource>(IEnumerable<TSource>)\n  nameWithType: Enumerable.Any<TSource>(IEnumerable<TSource>)\n  fullName: Enumerable.Any<TSource>(IEnumerable<TSource>)\n- uid: System.Linq.Enumerable.Any``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Any<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n  nameWithType: Enumerable.Any<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n  fullName: Enumerable.Any<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n- uid: System.Linq.Enumerable.Append``1(System.Collections.Generic.IEnumerable{``0},``0)\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Append<TSource>(IEnumerable<TSource>, TSource)\n  nameWithType: Enumerable.Append<TSource>(IEnumerable<TSource>, TSource)\n  fullName: Enumerable.Append<TSource>(IEnumerable<TSource>, TSource)\n- uid: System.Linq.Enumerable.AsEnumerable``1(System.Collections.Generic.IEnumerable{``0})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: AsEnumerable<TSource>(IEnumerable<TSource>)\n  nameWithType: Enumerable.AsEnumerable<TSource>(IEnumerable<TSource>)\n  fullName: Enumerable.AsEnumerable<TSource>(IEnumerable<TSource>)\n- uid: System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Decimal})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Average(IEnumerable<Decimal>)\n  nameWithType: Enumerable.Average(IEnumerable<Decimal>)\n  fullName: Enumerable.Average(IEnumerable<Decimal>)\n- uid: System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Double})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Average(IEnumerable<Double>)\n  nameWithType: Enumerable.Average(IEnumerable<Double>)\n  fullName: Enumerable.Average(IEnumerable<Double>)\n- uid: System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Int32})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Average(IEnumerable<Int32>)\n  nameWithType: Enumerable.Average(IEnumerable<Int32>)\n  fullName: Enumerable.Average(IEnumerable<Int32>)\n- uid: System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Int64})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Average(IEnumerable<Int64>)\n  nameWithType: Enumerable.Average(IEnumerable<Int64>)\n  fullName: Enumerable.Average(IEnumerable<Int64>)\n- uid: System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Average(IEnumerable<Nullable<Decimal>>)\n  nameWithType: Enumerable.Average(IEnumerable<Nullable<Decimal>>)\n  fullName: Enumerable.Average(IEnumerable<Nullable<Decimal>>)\n- uid: System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Average(IEnumerable<Nullable<Double>>)\n  nameWithType: Enumerable.Average(IEnumerable<Nullable<Double>>)\n  fullName: Enumerable.Average(IEnumerable<Nullable<Double>>)\n- uid: System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Average(IEnumerable<Nullable<Int32>>)\n  nameWithType: Enumerable.Average(IEnumerable<Nullable<Int32>>)\n  fullName: Enumerable.Average(IEnumerable<Nullable<Int32>>)\n- uid: System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Average(IEnumerable<Nullable<Int64>>)\n  nameWithType: Enumerable.Average(IEnumerable<Nullable<Int64>>)\n  fullName: Enumerable.Average(IEnumerable<Nullable<Int64>>)\n- uid: System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Average(IEnumerable<Nullable<Single>>)\n  nameWithType: Enumerable.Average(IEnumerable<Nullable<Single>>)\n  fullName: Enumerable.Average(IEnumerable<Nullable<Single>>)\n- uid: System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Single})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Average(IEnumerable<Single>)\n  nameWithType: Enumerable.Average(IEnumerable<Single>)\n  fullName: Enumerable.Average(IEnumerable<Single>)\n- uid: System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Average<TSource>(IEnumerable<TSource>, Func<TSource,Decimal>)\n  nameWithType: Enumerable.Average<TSource>(IEnumerable<TSource>, Func<TSource,Decimal>)\n  fullName: Enumerable.Average<TSource>(IEnumerable<TSource>, Func<TSource,Decimal>)\n- uid: System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Average<TSource>(IEnumerable<TSource>, Func<TSource,Double>)\n  nameWithType: Enumerable.Average<TSource>(IEnumerable<TSource>, Func<TSource,Double>)\n  fullName: Enumerable.Average<TSource>(IEnumerable<TSource>, Func<TSource,Double>)\n- uid: System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Average<TSource>(IEnumerable<TSource>, Func<TSource,Int32>)\n  nameWithType: Enumerable.Average<TSource>(IEnumerable<TSource>, Func<TSource,Int32>)\n  fullName: Enumerable.Average<TSource>(IEnumerable<TSource>, Func<TSource,Int32>)\n- uid: System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Average<TSource>(IEnumerable<TSource>, Func<TSource,Int64>)\n  nameWithType: Enumerable.Average<TSource>(IEnumerable<TSource>, Func<TSource,Int64>)\n  fullName: Enumerable.Average<TSource>(IEnumerable<TSource>, Func<TSource,Int64>)\n- uid: System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Average<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Decimal>>)\n  nameWithType: Enumerable.Average<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Decimal>>)\n  fullName: Enumerable.Average<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Decimal>>)\n- uid: System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Average<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Double>>)\n  nameWithType: Enumerable.Average<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Double>>)\n  fullName: Enumerable.Average<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Double>>)\n- uid: System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Average<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Int32>>)\n  nameWithType: Enumerable.Average<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Int32>>)\n  fullName: Enumerable.Average<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Int32>>)\n- uid: System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Average<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Int64>>)\n  nameWithType: Enumerable.Average<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Int64>>)\n  fullName: Enumerable.Average<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Int64>>)\n- uid: System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Average<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Single>>)\n  nameWithType: Enumerable.Average<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Single>>)\n  fullName: Enumerable.Average<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Single>>)\n- uid: System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Average<TSource>(IEnumerable<TSource>, Func<TSource,Single>)\n  nameWithType: Enumerable.Average<TSource>(IEnumerable<TSource>, Func<TSource,Single>)\n  fullName: Enumerable.Average<TSource>(IEnumerable<TSource>, Func<TSource,Single>)\n- uid: System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Cast<TResult>(IEnumerable)\n  nameWithType: Enumerable.Cast<TResult>(IEnumerable)\n  fullName: Enumerable.Cast<TResult>(IEnumerable)\n- uid: System.Linq.Enumerable.Concat``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Concat<TSource>(IEnumerable<TSource>, IEnumerable<TSource>)\n  nameWithType: Enumerable.Concat<TSource>(IEnumerable<TSource>, IEnumerable<TSource>)\n  fullName: Enumerable.Concat<TSource>(IEnumerable<TSource>, IEnumerable<TSource>)\n- uid: System.Linq.Enumerable.Contains``1(System.Collections.Generic.IEnumerable{``0},``0)\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Contains<TSource>(IEnumerable<TSource>, TSource)\n  nameWithType: Enumerable.Contains<TSource>(IEnumerable<TSource>, TSource)\n  fullName: Enumerable.Contains<TSource>(IEnumerable<TSource>, TSource)\n- uid: System.Linq.Enumerable.Contains``1(System.Collections.Generic.IEnumerable{``0},``0,System.Collections.Generic.IEqualityComparer{``0})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Contains<TSource>(IEnumerable<TSource>, TSource, IEqualityComparer<TSource>)\n  nameWithType: Enumerable.Contains<TSource>(IEnumerable<TSource>, TSource, IEqualityComparer<TSource>)\n  fullName: Enumerable.Contains<TSource>(IEnumerable<TSource>, TSource, IEqualityComparer<TSource>)\n- uid: System.Linq.Enumerable.Count``1(System.Collections.Generic.IEnumerable{``0})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Count<TSource>(IEnumerable<TSource>)\n  nameWithType: Enumerable.Count<TSource>(IEnumerable<TSource>)\n  fullName: Enumerable.Count<TSource>(IEnumerable<TSource>)\n- uid: System.Linq.Enumerable.Count``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Count<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n  nameWithType: Enumerable.Count<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n  fullName: Enumerable.Count<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n- uid: System.Linq.Enumerable.DefaultIfEmpty``1(System.Collections.Generic.IEnumerable{``0})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: DefaultIfEmpty<TSource>(IEnumerable<TSource>)\n  nameWithType: Enumerable.DefaultIfEmpty<TSource>(IEnumerable<TSource>)\n  fullName: Enumerable.DefaultIfEmpty<TSource>(IEnumerable<TSource>)\n- uid: System.Linq.Enumerable.DefaultIfEmpty``1(System.Collections.Generic.IEnumerable{``0},``0)\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: DefaultIfEmpty<TSource>(IEnumerable<TSource>, TSource)\n  nameWithType: Enumerable.DefaultIfEmpty<TSource>(IEnumerable<TSource>, TSource)\n  fullName: Enumerable.DefaultIfEmpty<TSource>(IEnumerable<TSource>, TSource)\n- uid: System.Linq.Enumerable.Distinct``1(System.Collections.Generic.IEnumerable{``0})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Distinct<TSource>(IEnumerable<TSource>)\n  nameWithType: Enumerable.Distinct<TSource>(IEnumerable<TSource>)\n  fullName: Enumerable.Distinct<TSource>(IEnumerable<TSource>)\n- uid: System.Linq.Enumerable.Distinct``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Distinct<TSource>(IEnumerable<TSource>, IEqualityComparer<TSource>)\n  nameWithType: Enumerable.Distinct<TSource>(IEnumerable<TSource>, IEqualityComparer<TSource>)\n  fullName: Enumerable.Distinct<TSource>(IEnumerable<TSource>, IEqualityComparer<TSource>)\n- uid: System.Linq.Enumerable.ElementAt``1(System.Collections.Generic.IEnumerable{``0},System.Int32)\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: ElementAt<TSource>(IEnumerable<TSource>, Int32)\n  nameWithType: Enumerable.ElementAt<TSource>(IEnumerable<TSource>, Int32)\n  fullName: Enumerable.ElementAt<TSource>(IEnumerable<TSource>, Int32)\n- uid: System.Linq.Enumerable.ElementAtOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Int32)\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: ElementAtOrDefault<TSource>(IEnumerable<TSource>, Int32)\n  nameWithType: Enumerable.ElementAtOrDefault<TSource>(IEnumerable<TSource>, Int32)\n  fullName: Enumerable.ElementAtOrDefault<TSource>(IEnumerable<TSource>, Int32)\n- uid: System.Linq.Enumerable.Except``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Except<TSource>(IEnumerable<TSource>, IEnumerable<TSource>)\n  nameWithType: Enumerable.Except<TSource>(IEnumerable<TSource>, IEnumerable<TSource>)\n  fullName: Enumerable.Except<TSource>(IEnumerable<TSource>, IEnumerable<TSource>)\n- uid: System.Linq.Enumerable.Except``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Except<TSource>(IEnumerable<TSource>, IEnumerable<TSource>, IEqualityComparer<TSource>)\n  nameWithType: Enumerable.Except<TSource>(IEnumerable<TSource>, IEnumerable<TSource>, IEqualityComparer<TSource>)\n  fullName: Enumerable.Except<TSource>(IEnumerable<TSource>, IEnumerable<TSource>, IEqualityComparer<TSource>)\n- uid: System.Linq.Enumerable.First``1(System.Collections.Generic.IEnumerable{``0})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: First<TSource>(IEnumerable<TSource>)\n  nameWithType: Enumerable.First<TSource>(IEnumerable<TSource>)\n  fullName: Enumerable.First<TSource>(IEnumerable<TSource>)\n- uid: System.Linq.Enumerable.First``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: First<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n  nameWithType: Enumerable.First<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n  fullName: Enumerable.First<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n- uid: System.Linq.Enumerable.FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: FirstOrDefault<TSource>(IEnumerable<TSource>)\n  nameWithType: Enumerable.FirstOrDefault<TSource>(IEnumerable<TSource>)\n  fullName: Enumerable.FirstOrDefault<TSource>(IEnumerable<TSource>)\n- uid: System.Linq.Enumerable.FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: FirstOrDefault<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n  nameWithType: Enumerable.FirstOrDefault<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n  fullName: Enumerable.FirstOrDefault<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n- uid: System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: GroupBy<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>)\n  nameWithType: Enumerable.GroupBy<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>)\n  fullName: Enumerable.GroupBy<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>)\n- uid: System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: GroupBy<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>, IEqualityComparer<TKey>)\n  nameWithType: Enumerable.GroupBy<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>, IEqualityComparer<TKey>)\n  fullName: Enumerable.GroupBy<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>, IEqualityComparer<TKey>)\n- uid: System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: GroupBy<TSource,TKey,TElement>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TElement>)\n  nameWithType: Enumerable.GroupBy<TSource,TKey,TElement>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TElement>)\n  fullName: Enumerable.GroupBy<TSource,TKey,TElement>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TElement>)\n- uid: System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: GroupBy<TSource,TKey,TElement>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TElement>, IEqualityComparer<TKey>)\n  nameWithType: Enumerable.GroupBy<TSource,TKey,TElement>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TElement>, IEqualityComparer<TKey>)\n  fullName: Enumerable.GroupBy<TSource,TKey,TElement>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TElement>, IEqualityComparer<TKey>)\n- uid: System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: GroupBy<TSource,TKey,TResult>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TKey,IEnumerable<TSource>,TResult>)\n  nameWithType: Enumerable.GroupBy<TSource,TKey,TResult>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TKey,IEnumerable<TSource>,TResult>)\n  fullName: Enumerable.GroupBy<TSource,TKey,TResult>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TKey,IEnumerable<TSource>,TResult>)\n- uid: System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2},System.Collections.Generic.IEqualityComparer{``1})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: GroupBy<TSource,TKey,TResult>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TKey,IEnumerable<TSource>,TResult>, IEqualityComparer<TKey>)\n  nameWithType: Enumerable.GroupBy<TSource,TKey,TResult>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TKey,IEnumerable<TSource>,TResult>, IEqualityComparer<TKey>)\n  fullName: Enumerable.GroupBy<TSource,TKey,TResult>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TKey,IEnumerable<TSource>,TResult>, IEqualityComparer<TKey>)\n- uid: System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: GroupBy<TSource,TKey,TElement,TResult>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TElement>, Func<TKey,IEnumerable<TElement>,TResult>)\n  nameWithType: Enumerable.GroupBy<TSource,TKey,TElement,TResult>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TElement>, Func<TKey,IEnumerable<TElement>,TResult>)\n  fullName: Enumerable.GroupBy<TSource,TKey,TElement,TResult>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TElement>, Func<TKey,IEnumerable<TElement>,TResult>)\n- uid: System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3},System.Collections.Generic.IEqualityComparer{``1})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: GroupBy<TSource,TKey,TElement,TResult>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TElement>, Func<TKey,IEnumerable<TElement>,TResult>, IEqualityComparer<TKey>)\n  nameWithType: Enumerable.GroupBy<TSource,TKey,TElement,TResult>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TElement>, Func<TKey,IEnumerable<TElement>,TResult>, IEqualityComparer<TKey>)\n  fullName: Enumerable.GroupBy<TSource,TKey,TElement,TResult>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TElement>, Func<TKey,IEnumerable<TElement>,TResult>, IEqualityComparer<TKey>)\n- uid: System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: GroupJoin<TOuter,TInner,TKey,TResult>(IEnumerable<TOuter>, IEnumerable<TInner>, Func<TOuter,TKey>, Func<TInner,TKey>, Func<TOuter,IEnumerable<TInner>,TResult>)\n  nameWithType: Enumerable.GroupJoin<TOuter,TInner,TKey,TResult>(IEnumerable<TOuter>, IEnumerable<TInner>, Func<TOuter,TKey>, Func<TInner,TKey>, Func<TOuter,IEnumerable<TInner>,TResult>)\n  fullName: Enumerable.GroupJoin<TOuter,TInner,TKey,TResult>(IEnumerable<TOuter>, IEnumerable<TInner>, Func<TOuter,TKey>, Func<TInner,TKey>, Func<TOuter,IEnumerable<TInner>,TResult>)\n- uid: System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: GroupJoin<TOuter,TInner,TKey,TResult>(IEnumerable<TOuter>, IEnumerable<TInner>, Func<TOuter,TKey>, Func<TInner,TKey>, Func<TOuter,IEnumerable<TInner>,TResult>, IEqualityComparer<TKey>)\n  nameWithType: Enumerable.GroupJoin<TOuter,TInner,TKey,TResult>(IEnumerable<TOuter>, IEnumerable<TInner>, Func<TOuter,TKey>, Func<TInner,TKey>, Func<TOuter,IEnumerable<TInner>,TResult>, IEqualityComparer<TKey>)\n  fullName: Enumerable.GroupJoin<TOuter,TInner,TKey,TResult>(IEnumerable<TOuter>, IEnumerable<TInner>, Func<TOuter,TKey>, Func<TInner,TKey>, Func<TOuter,IEnumerable<TInner>,TResult>, IEqualityComparer<TKey>)\n- uid: System.Linq.Enumerable.Intersect``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Intersect<TSource>(IEnumerable<TSource>, IEnumerable<TSource>)\n  nameWithType: Enumerable.Intersect<TSource>(IEnumerable<TSource>, IEnumerable<TSource>)\n  fullName: Enumerable.Intersect<TSource>(IEnumerable<TSource>, IEnumerable<TSource>)\n- uid: System.Linq.Enumerable.Intersect``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Intersect<TSource>(IEnumerable<TSource>, IEnumerable<TSource>, IEqualityComparer<TSource>)\n  nameWithType: Enumerable.Intersect<TSource>(IEnumerable<TSource>, IEnumerable<TSource>, IEqualityComparer<TSource>)\n  fullName: Enumerable.Intersect<TSource>(IEnumerable<TSource>, IEnumerable<TSource>, IEqualityComparer<TSource>)\n- uid: System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Join<TOuter,TInner,TKey,TResult>(IEnumerable<TOuter>, IEnumerable<TInner>, Func<TOuter,TKey>, Func<TInner,TKey>, Func<TOuter,TInner,TResult>)\n  nameWithType: Enumerable.Join<TOuter,TInner,TKey,TResult>(IEnumerable<TOuter>, IEnumerable<TInner>, Func<TOuter,TKey>, Func<TInner,TKey>, Func<TOuter,TInner,TResult>)\n  fullName: Enumerable.Join<TOuter,TInner,TKey,TResult>(IEnumerable<TOuter>, IEnumerable<TInner>, Func<TOuter,TKey>, Func<TInner,TKey>, Func<TOuter,TInner,TResult>)\n- uid: System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Join<TOuter,TInner,TKey,TResult>(IEnumerable<TOuter>, IEnumerable<TInner>, Func<TOuter,TKey>, Func<TInner,TKey>, Func<TOuter,TInner,TResult>, IEqualityComparer<TKey>)\n  nameWithType: Enumerable.Join<TOuter,TInner,TKey,TResult>(IEnumerable<TOuter>, IEnumerable<TInner>, Func<TOuter,TKey>, Func<TInner,TKey>, Func<TOuter,TInner,TResult>, IEqualityComparer<TKey>)\n  fullName: Enumerable.Join<TOuter,TInner,TKey,TResult>(IEnumerable<TOuter>, IEnumerable<TInner>, Func<TOuter,TKey>, Func<TInner,TKey>, Func<TOuter,TInner,TResult>, IEqualityComparer<TKey>)\n- uid: System.Linq.Enumerable.Last``1(System.Collections.Generic.IEnumerable{``0})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Last<TSource>(IEnumerable<TSource>)\n  nameWithType: Enumerable.Last<TSource>(IEnumerable<TSource>)\n  fullName: Enumerable.Last<TSource>(IEnumerable<TSource>)\n- uid: System.Linq.Enumerable.Last``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Last<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n  nameWithType: Enumerable.Last<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n  fullName: Enumerable.Last<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n- uid: System.Linq.Enumerable.LastOrDefault``1(System.Collections.Generic.IEnumerable{``0})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: LastOrDefault<TSource>(IEnumerable<TSource>)\n  nameWithType: Enumerable.LastOrDefault<TSource>(IEnumerable<TSource>)\n  fullName: Enumerable.LastOrDefault<TSource>(IEnumerable<TSource>)\n- uid: System.Linq.Enumerable.LastOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: LastOrDefault<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n  nameWithType: Enumerable.LastOrDefault<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n  fullName: Enumerable.LastOrDefault<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n- uid: System.Linq.Enumerable.LongCount``1(System.Collections.Generic.IEnumerable{``0})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: LongCount<TSource>(IEnumerable<TSource>)\n  nameWithType: Enumerable.LongCount<TSource>(IEnumerable<TSource>)\n  fullName: Enumerable.LongCount<TSource>(IEnumerable<TSource>)\n- uid: System.Linq.Enumerable.LongCount``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: LongCount<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n  nameWithType: Enumerable.LongCount<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n  fullName: Enumerable.LongCount<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n- uid: System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Decimal})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Max(IEnumerable<Decimal>)\n  nameWithType: Enumerable.Max(IEnumerable<Decimal>)\n  fullName: Enumerable.Max(IEnumerable<Decimal>)\n- uid: System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Double})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Max(IEnumerable<Double>)\n  nameWithType: Enumerable.Max(IEnumerable<Double>)\n  fullName: Enumerable.Max(IEnumerable<Double>)\n- uid: System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Int32})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Max(IEnumerable<Int32>)\n  nameWithType: Enumerable.Max(IEnumerable<Int32>)\n  fullName: Enumerable.Max(IEnumerable<Int32>)\n- uid: System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Int64})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Max(IEnumerable<Int64>)\n  nameWithType: Enumerable.Max(IEnumerable<Int64>)\n  fullName: Enumerable.Max(IEnumerable<Int64>)\n- uid: System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Max(IEnumerable<Nullable<Decimal>>)\n  nameWithType: Enumerable.Max(IEnumerable<Nullable<Decimal>>)\n  fullName: Enumerable.Max(IEnumerable<Nullable<Decimal>>)\n- uid: System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Max(IEnumerable<Nullable<Double>>)\n  nameWithType: Enumerable.Max(IEnumerable<Nullable<Double>>)\n  fullName: Enumerable.Max(IEnumerable<Nullable<Double>>)\n- uid: System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Max(IEnumerable<Nullable<Int32>>)\n  nameWithType: Enumerable.Max(IEnumerable<Nullable<Int32>>)\n  fullName: Enumerable.Max(IEnumerable<Nullable<Int32>>)\n- uid: System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Max(IEnumerable<Nullable<Int64>>)\n  nameWithType: Enumerable.Max(IEnumerable<Nullable<Int64>>)\n  fullName: Enumerable.Max(IEnumerable<Nullable<Int64>>)\n- uid: System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Max(IEnumerable<Nullable<Single>>)\n  nameWithType: Enumerable.Max(IEnumerable<Nullable<Single>>)\n  fullName: Enumerable.Max(IEnumerable<Nullable<Single>>)\n- uid: System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Single})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Max(IEnumerable<Single>)\n  nameWithType: Enumerable.Max(IEnumerable<Single>)\n  fullName: Enumerable.Max(IEnumerable<Single>)\n- uid: System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Max<TSource>(IEnumerable<TSource>)\n  nameWithType: Enumerable.Max<TSource>(IEnumerable<TSource>)\n  fullName: Enumerable.Max<TSource>(IEnumerable<TSource>)\n- uid: System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Max<TSource>(IEnumerable<TSource>, Func<TSource,Decimal>)\n  nameWithType: Enumerable.Max<TSource>(IEnumerable<TSource>, Func<TSource,Decimal>)\n  fullName: Enumerable.Max<TSource>(IEnumerable<TSource>, Func<TSource,Decimal>)\n- uid: System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Max<TSource>(IEnumerable<TSource>, Func<TSource,Double>)\n  nameWithType: Enumerable.Max<TSource>(IEnumerable<TSource>, Func<TSource,Double>)\n  fullName: Enumerable.Max<TSource>(IEnumerable<TSource>, Func<TSource,Double>)\n- uid: System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Max<TSource>(IEnumerable<TSource>, Func<TSource,Int32>)\n  nameWithType: Enumerable.Max<TSource>(IEnumerable<TSource>, Func<TSource,Int32>)\n  fullName: Enumerable.Max<TSource>(IEnumerable<TSource>, Func<TSource,Int32>)\n- uid: System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Max<TSource>(IEnumerable<TSource>, Func<TSource,Int64>)\n  nameWithType: Enumerable.Max<TSource>(IEnumerable<TSource>, Func<TSource,Int64>)\n  fullName: Enumerable.Max<TSource>(IEnumerable<TSource>, Func<TSource,Int64>)\n- uid: System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Max<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Decimal>>)\n  nameWithType: Enumerable.Max<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Decimal>>)\n  fullName: Enumerable.Max<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Decimal>>)\n- uid: System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Max<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Double>>)\n  nameWithType: Enumerable.Max<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Double>>)\n  fullName: Enumerable.Max<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Double>>)\n- uid: System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Max<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Int32>>)\n  nameWithType: Enumerable.Max<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Int32>>)\n  fullName: Enumerable.Max<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Int32>>)\n- uid: System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Max<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Int64>>)\n  nameWithType: Enumerable.Max<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Int64>>)\n  fullName: Enumerable.Max<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Int64>>)\n- uid: System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Max<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Single>>)\n  nameWithType: Enumerable.Max<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Single>>)\n  fullName: Enumerable.Max<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Single>>)\n- uid: System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Max<TSource>(IEnumerable<TSource>, Func<TSource,Single>)\n  nameWithType: Enumerable.Max<TSource>(IEnumerable<TSource>, Func<TSource,Single>)\n  fullName: Enumerable.Max<TSource>(IEnumerable<TSource>, Func<TSource,Single>)\n- uid: System.Linq.Enumerable.Max``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Max<TSource,TResult>(IEnumerable<TSource>, Func<TSource,TResult>)\n  nameWithType: Enumerable.Max<TSource,TResult>(IEnumerable<TSource>, Func<TSource,TResult>)\n  fullName: Enumerable.Max<TSource,TResult>(IEnumerable<TSource>, Func<TSource,TResult>)\n- uid: System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Decimal})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Min(IEnumerable<Decimal>)\n  nameWithType: Enumerable.Min(IEnumerable<Decimal>)\n  fullName: Enumerable.Min(IEnumerable<Decimal>)\n- uid: System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Double})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Min(IEnumerable<Double>)\n  nameWithType: Enumerable.Min(IEnumerable<Double>)\n  fullName: Enumerable.Min(IEnumerable<Double>)\n- uid: System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Int32})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Min(IEnumerable<Int32>)\n  nameWithType: Enumerable.Min(IEnumerable<Int32>)\n  fullName: Enumerable.Min(IEnumerable<Int32>)\n- uid: System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Int64})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Min(IEnumerable<Int64>)\n  nameWithType: Enumerable.Min(IEnumerable<Int64>)\n  fullName: Enumerable.Min(IEnumerable<Int64>)\n- uid: System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Min(IEnumerable<Nullable<Decimal>>)\n  nameWithType: Enumerable.Min(IEnumerable<Nullable<Decimal>>)\n  fullName: Enumerable.Min(IEnumerable<Nullable<Decimal>>)\n- uid: System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Min(IEnumerable<Nullable<Double>>)\n  nameWithType: Enumerable.Min(IEnumerable<Nullable<Double>>)\n  fullName: Enumerable.Min(IEnumerable<Nullable<Double>>)\n- uid: System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Min(IEnumerable<Nullable<Int32>>)\n  nameWithType: Enumerable.Min(IEnumerable<Nullable<Int32>>)\n  fullName: Enumerable.Min(IEnumerable<Nullable<Int32>>)\n- uid: System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Min(IEnumerable<Nullable<Int64>>)\n  nameWithType: Enumerable.Min(IEnumerable<Nullable<Int64>>)\n  fullName: Enumerable.Min(IEnumerable<Nullable<Int64>>)\n- uid: System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Min(IEnumerable<Nullable<Single>>)\n  nameWithType: Enumerable.Min(IEnumerable<Nullable<Single>>)\n  fullName: Enumerable.Min(IEnumerable<Nullable<Single>>)\n- uid: System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Single})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Min(IEnumerable<Single>)\n  nameWithType: Enumerable.Min(IEnumerable<Single>)\n  fullName: Enumerable.Min(IEnumerable<Single>)\n- uid: System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Min<TSource>(IEnumerable<TSource>)\n  nameWithType: Enumerable.Min<TSource>(IEnumerable<TSource>)\n  fullName: Enumerable.Min<TSource>(IEnumerable<TSource>)\n- uid: System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Min<TSource>(IEnumerable<TSource>, Func<TSource,Decimal>)\n  nameWithType: Enumerable.Min<TSource>(IEnumerable<TSource>, Func<TSource,Decimal>)\n  fullName: Enumerable.Min<TSource>(IEnumerable<TSource>, Func<TSource,Decimal>)\n- uid: System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Min<TSource>(IEnumerable<TSource>, Func<TSource,Double>)\n  nameWithType: Enumerable.Min<TSource>(IEnumerable<TSource>, Func<TSource,Double>)\n  fullName: Enumerable.Min<TSource>(IEnumerable<TSource>, Func<TSource,Double>)\n- uid: System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Min<TSource>(IEnumerable<TSource>, Func<TSource,Int32>)\n  nameWithType: Enumerable.Min<TSource>(IEnumerable<TSource>, Func<TSource,Int32>)\n  fullName: Enumerable.Min<TSource>(IEnumerable<TSource>, Func<TSource,Int32>)\n- uid: System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Min<TSource>(IEnumerable<TSource>, Func<TSource,Int64>)\n  nameWithType: Enumerable.Min<TSource>(IEnumerable<TSource>, Func<TSource,Int64>)\n  fullName: Enumerable.Min<TSource>(IEnumerable<TSource>, Func<TSource,Int64>)\n- uid: System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Min<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Decimal>>)\n  nameWithType: Enumerable.Min<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Decimal>>)\n  fullName: Enumerable.Min<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Decimal>>)\n- uid: System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Min<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Double>>)\n  nameWithType: Enumerable.Min<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Double>>)\n  fullName: Enumerable.Min<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Double>>)\n- uid: System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Min<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Int32>>)\n  nameWithType: Enumerable.Min<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Int32>>)\n  fullName: Enumerable.Min<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Int32>>)\n- uid: System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Min<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Int64>>)\n  nameWithType: Enumerable.Min<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Int64>>)\n  fullName: Enumerable.Min<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Int64>>)\n- uid: System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Min<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Single>>)\n  nameWithType: Enumerable.Min<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Single>>)\n  fullName: Enumerable.Min<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Single>>)\n- uid: System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Min<TSource>(IEnumerable<TSource>, Func<TSource,Single>)\n  nameWithType: Enumerable.Min<TSource>(IEnumerable<TSource>, Func<TSource,Single>)\n  fullName: Enumerable.Min<TSource>(IEnumerable<TSource>, Func<TSource,Single>)\n- uid: System.Linq.Enumerable.Min``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Min<TSource,TResult>(IEnumerable<TSource>, Func<TSource,TResult>)\n  nameWithType: Enumerable.Min<TSource,TResult>(IEnumerable<TSource>, Func<TSource,TResult>)\n  fullName: Enumerable.Min<TSource,TResult>(IEnumerable<TSource>, Func<TSource,TResult>)\n- uid: System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: OfType<TResult>(IEnumerable)\n  nameWithType: Enumerable.OfType<TResult>(IEnumerable)\n  fullName: Enumerable.OfType<TResult>(IEnumerable)\n- uid: System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: OrderBy<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>)\n  nameWithType: Enumerable.OrderBy<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>)\n  fullName: Enumerable.OrderBy<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>)\n- uid: System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: OrderBy<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>, IComparer<TKey>)\n  nameWithType: Enumerable.OrderBy<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>, IComparer<TKey>)\n  fullName: Enumerable.OrderBy<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>, IComparer<TKey>)\n- uid: System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: OrderByDescending<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>)\n  nameWithType: Enumerable.OrderByDescending<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>)\n  fullName: Enumerable.OrderByDescending<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>)\n- uid: System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: OrderByDescending<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>, IComparer<TKey>)\n  nameWithType: Enumerable.OrderByDescending<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>, IComparer<TKey>)\n  fullName: Enumerable.OrderByDescending<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>, IComparer<TKey>)\n- uid: System.Linq.Enumerable.Prepend``1(System.Collections.Generic.IEnumerable{``0},``0)\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Prepend<TSource>(IEnumerable<TSource>, TSource)\n  nameWithType: Enumerable.Prepend<TSource>(IEnumerable<TSource>, TSource)\n  fullName: Enumerable.Prepend<TSource>(IEnumerable<TSource>, TSource)\n- uid: System.Linq.Enumerable.Reverse``1(System.Collections.Generic.IEnumerable{``0})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Reverse<TSource>(IEnumerable<TSource>)\n  nameWithType: Enumerable.Reverse<TSource>(IEnumerable<TSource>)\n  fullName: Enumerable.Reverse<TSource>(IEnumerable<TSource>)\n- uid: System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Select<TSource,TResult>(IEnumerable<TSource>, Func<TSource,TResult>)\n  nameWithType: Enumerable.Select<TSource,TResult>(IEnumerable<TSource>, Func<TSource,TResult>)\n  fullName: Enumerable.Select<TSource,TResult>(IEnumerable<TSource>, Func<TSource,TResult>)\n- uid: System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,``1})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Select<TSource,TResult>(IEnumerable<TSource>, Func<TSource,Int32,TResult>)\n  nameWithType: Enumerable.Select<TSource,TResult>(IEnumerable<TSource>, Func<TSource,Int32,TResult>)\n  fullName: Enumerable.Select<TSource,TResult>(IEnumerable<TSource>, Func<TSource,Int32,TResult>)\n- uid: System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: SelectMany<TSource,TResult>(IEnumerable<TSource>, Func<TSource,IEnumerable<TResult>>)\n  nameWithType: Enumerable.SelectMany<TSource,TResult>(IEnumerable<TSource>, Func<TSource,IEnumerable<TResult>>)\n  fullName: Enumerable.SelectMany<TSource,TResult>(IEnumerable<TSource>, Func<TSource,IEnumerable<TResult>>)\n- uid: System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: SelectMany<TSource,TResult>(IEnumerable<TSource>, Func<TSource,Int32,IEnumerable<TResult>>)\n  nameWithType: Enumerable.SelectMany<TSource,TResult>(IEnumerable<TSource>, Func<TSource,Int32,IEnumerable<TResult>>)\n  fullName: Enumerable.SelectMany<TSource,TResult>(IEnumerable<TSource>, Func<TSource,Int32,IEnumerable<TResult>>)\n- uid: System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: SelectMany<TSource,TCollection,TResult>(IEnumerable<TSource>, Func<TSource,IEnumerable<TCollection>>, Func<TSource,TCollection,TResult>)\n  nameWithType: Enumerable.SelectMany<TSource,TCollection,TResult>(IEnumerable<TSource>, Func<TSource,IEnumerable<TCollection>>, Func<TSource,TCollection,TResult>)\n  fullName: Enumerable.SelectMany<TSource,TCollection,TResult>(IEnumerable<TSource>, Func<TSource,IEnumerable<TCollection>>, Func<TSource,TCollection,TResult>)\n- uid: System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: SelectMany<TSource,TCollection,TResult>(IEnumerable<TSource>, Func<TSource,Int32,IEnumerable<TCollection>>, Func<TSource,TCollection,TResult>)\n  nameWithType: Enumerable.SelectMany<TSource,TCollection,TResult>(IEnumerable<TSource>, Func<TSource,Int32,IEnumerable<TCollection>>, Func<TSource,TCollection,TResult>)\n  fullName: Enumerable.SelectMany<TSource,TCollection,TResult>(IEnumerable<TSource>, Func<TSource,Int32,IEnumerable<TCollection>>, Func<TSource,TCollection,TResult>)\n- uid: System.Linq.Enumerable.SequenceEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: SequenceEqual<TSource>(IEnumerable<TSource>, IEnumerable<TSource>)\n  nameWithType: Enumerable.SequenceEqual<TSource>(IEnumerable<TSource>, IEnumerable<TSource>)\n  fullName: Enumerable.SequenceEqual<TSource>(IEnumerable<TSource>, IEnumerable<TSource>)\n- uid: System.Linq.Enumerable.SequenceEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: SequenceEqual<TSource>(IEnumerable<TSource>, IEnumerable<TSource>, IEqualityComparer<TSource>)\n  nameWithType: Enumerable.SequenceEqual<TSource>(IEnumerable<TSource>, IEnumerable<TSource>, IEqualityComparer<TSource>)\n  fullName: Enumerable.SequenceEqual<TSource>(IEnumerable<TSource>, IEnumerable<TSource>, IEqualityComparer<TSource>)\n- uid: System.Linq.Enumerable.Single``1(System.Collections.Generic.IEnumerable{``0})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Single<TSource>(IEnumerable<TSource>)\n  nameWithType: Enumerable.Single<TSource>(IEnumerable<TSource>)\n  fullName: Enumerable.Single<TSource>(IEnumerable<TSource>)\n- uid: System.Linq.Enumerable.Single``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Single<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n  nameWithType: Enumerable.Single<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n  fullName: Enumerable.Single<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n- uid: System.Linq.Enumerable.SingleOrDefault``1(System.Collections.Generic.IEnumerable{``0})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: SingleOrDefault<TSource>(IEnumerable<TSource>)\n  nameWithType: Enumerable.SingleOrDefault<TSource>(IEnumerable<TSource>)\n  fullName: Enumerable.SingleOrDefault<TSource>(IEnumerable<TSource>)\n- uid: System.Linq.Enumerable.SingleOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: SingleOrDefault<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n  nameWithType: Enumerable.SingleOrDefault<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n  fullName: Enumerable.SingleOrDefault<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n- uid: System.Linq.Enumerable.Skip``1(System.Collections.Generic.IEnumerable{``0},System.Int32)\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Skip<TSource>(IEnumerable<TSource>, Int32)\n  nameWithType: Enumerable.Skip<TSource>(IEnumerable<TSource>, Int32)\n  fullName: Enumerable.Skip<TSource>(IEnumerable<TSource>, Int32)\n- uid: System.Linq.Enumerable.SkipLast``1(System.Collections.Generic.IEnumerable{``0},System.Int32)\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: SkipLast<TSource>(IEnumerable<TSource>, Int32)\n  nameWithType: Enumerable.SkipLast<TSource>(IEnumerable<TSource>, Int32)\n  fullName: Enumerable.SkipLast<TSource>(IEnumerable<TSource>, Int32)\n- uid: System.Linq.Enumerable.SkipWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: SkipWhile<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n  nameWithType: Enumerable.SkipWhile<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n  fullName: Enumerable.SkipWhile<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n- uid: System.Linq.Enumerable.SkipWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: SkipWhile<TSource>(IEnumerable<TSource>, Func<TSource,Int32,Boolean>)\n  nameWithType: Enumerable.SkipWhile<TSource>(IEnumerable<TSource>, Func<TSource,Int32,Boolean>)\n  fullName: Enumerable.SkipWhile<TSource>(IEnumerable<TSource>, Func<TSource,Int32,Boolean>)\n- uid: System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Decimal})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Sum(IEnumerable<Decimal>)\n  nameWithType: Enumerable.Sum(IEnumerable<Decimal>)\n  fullName: Enumerable.Sum(IEnumerable<Decimal>)\n- uid: System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Double})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Sum(IEnumerable<Double>)\n  nameWithType: Enumerable.Sum(IEnumerable<Double>)\n  fullName: Enumerable.Sum(IEnumerable<Double>)\n- uid: System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Int32})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Sum(IEnumerable<Int32>)\n  nameWithType: Enumerable.Sum(IEnumerable<Int32>)\n  fullName: Enumerable.Sum(IEnumerable<Int32>)\n- uid: System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Int64})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Sum(IEnumerable<Int64>)\n  nameWithType: Enumerable.Sum(IEnumerable<Int64>)\n  fullName: Enumerable.Sum(IEnumerable<Int64>)\n- uid: System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Sum(IEnumerable<Nullable<Decimal>>)\n  nameWithType: Enumerable.Sum(IEnumerable<Nullable<Decimal>>)\n  fullName: Enumerable.Sum(IEnumerable<Nullable<Decimal>>)\n- uid: System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Sum(IEnumerable<Nullable<Double>>)\n  nameWithType: Enumerable.Sum(IEnumerable<Nullable<Double>>)\n  fullName: Enumerable.Sum(IEnumerable<Nullable<Double>>)\n- uid: System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Sum(IEnumerable<Nullable<Int32>>)\n  nameWithType: Enumerable.Sum(IEnumerable<Nullable<Int32>>)\n  fullName: Enumerable.Sum(IEnumerable<Nullable<Int32>>)\n- uid: System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Sum(IEnumerable<Nullable<Int64>>)\n  nameWithType: Enumerable.Sum(IEnumerable<Nullable<Int64>>)\n  fullName: Enumerable.Sum(IEnumerable<Nullable<Int64>>)\n- uid: System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Sum(IEnumerable<Nullable<Single>>)\n  nameWithType: Enumerable.Sum(IEnumerable<Nullable<Single>>)\n  fullName: Enumerable.Sum(IEnumerable<Nullable<Single>>)\n- uid: System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Single})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Sum(IEnumerable<Single>)\n  nameWithType: Enumerable.Sum(IEnumerable<Single>)\n  fullName: Enumerable.Sum(IEnumerable<Single>)\n- uid: System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Sum<TSource>(IEnumerable<TSource>, Func<TSource,Decimal>)\n  nameWithType: Enumerable.Sum<TSource>(IEnumerable<TSource>, Func<TSource,Decimal>)\n  fullName: Enumerable.Sum<TSource>(IEnumerable<TSource>, Func<TSource,Decimal>)\n- uid: System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Sum<TSource>(IEnumerable<TSource>, Func<TSource,Double>)\n  nameWithType: Enumerable.Sum<TSource>(IEnumerable<TSource>, Func<TSource,Double>)\n  fullName: Enumerable.Sum<TSource>(IEnumerable<TSource>, Func<TSource,Double>)\n- uid: System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Sum<TSource>(IEnumerable<TSource>, Func<TSource,Int32>)\n  nameWithType: Enumerable.Sum<TSource>(IEnumerable<TSource>, Func<TSource,Int32>)\n  fullName: Enumerable.Sum<TSource>(IEnumerable<TSource>, Func<TSource,Int32>)\n- uid: System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Sum<TSource>(IEnumerable<TSource>, Func<TSource,Int64>)\n  nameWithType: Enumerable.Sum<TSource>(IEnumerable<TSource>, Func<TSource,Int64>)\n  fullName: Enumerable.Sum<TSource>(IEnumerable<TSource>, Func<TSource,Int64>)\n- uid: System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Sum<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Decimal>>)\n  nameWithType: Enumerable.Sum<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Decimal>>)\n  fullName: Enumerable.Sum<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Decimal>>)\n- uid: System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Sum<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Double>>)\n  nameWithType: Enumerable.Sum<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Double>>)\n  fullName: Enumerable.Sum<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Double>>)\n- uid: System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Sum<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Int32>>)\n  nameWithType: Enumerable.Sum<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Int32>>)\n  fullName: Enumerable.Sum<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Int32>>)\n- uid: System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Sum<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Int64>>)\n  nameWithType: Enumerable.Sum<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Int64>>)\n  fullName: Enumerable.Sum<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Int64>>)\n- uid: System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Sum<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Single>>)\n  nameWithType: Enumerable.Sum<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Single>>)\n  fullName: Enumerable.Sum<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Single>>)\n- uid: System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Sum<TSource>(IEnumerable<TSource>, Func<TSource,Single>)\n  nameWithType: Enumerable.Sum<TSource>(IEnumerable<TSource>, Func<TSource,Single>)\n  fullName: Enumerable.Sum<TSource>(IEnumerable<TSource>, Func<TSource,Single>)\n- uid: System.Linq.Enumerable.Take``1(System.Collections.Generic.IEnumerable{``0},System.Int32)\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Take<TSource>(IEnumerable<TSource>, Int32)\n  nameWithType: Enumerable.Take<TSource>(IEnumerable<TSource>, Int32)\n  fullName: Enumerable.Take<TSource>(IEnumerable<TSource>, Int32)\n- uid: System.Linq.Enumerable.TakeLast``1(System.Collections.Generic.IEnumerable{``0},System.Int32)\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: TakeLast<TSource>(IEnumerable<TSource>, Int32)\n  nameWithType: Enumerable.TakeLast<TSource>(IEnumerable<TSource>, Int32)\n  fullName: Enumerable.TakeLast<TSource>(IEnumerable<TSource>, Int32)\n- uid: System.Linq.Enumerable.TakeWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: TakeWhile<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n  nameWithType: Enumerable.TakeWhile<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n  fullName: Enumerable.TakeWhile<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n- uid: System.Linq.Enumerable.TakeWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: TakeWhile<TSource>(IEnumerable<TSource>, Func<TSource,Int32,Boolean>)\n  nameWithType: Enumerable.TakeWhile<TSource>(IEnumerable<TSource>, Func<TSource,Int32,Boolean>)\n  fullName: Enumerable.TakeWhile<TSource>(IEnumerable<TSource>, Func<TSource,Int32,Boolean>)\n- uid: System.Linq.Enumerable.ToArray``1(System.Collections.Generic.IEnumerable{``0})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: ToArray<TSource>(IEnumerable<TSource>)\n  nameWithType: Enumerable.ToArray<TSource>(IEnumerable<TSource>)\n  fullName: Enumerable.ToArray<TSource>(IEnumerable<TSource>)\n- uid: System.Linq.Enumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: ToDictionary<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>)\n  nameWithType: Enumerable.ToDictionary<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>)\n  fullName: Enumerable.ToDictionary<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>)\n- uid: System.Linq.Enumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: ToDictionary<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>, IEqualityComparer<TKey>)\n  nameWithType: Enumerable.ToDictionary<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>, IEqualityComparer<TKey>)\n  fullName: Enumerable.ToDictionary<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>, IEqualityComparer<TKey>)\n- uid: System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: ToDictionary<TSource,TKey,TElement>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TElement>)\n  nameWithType: Enumerable.ToDictionary<TSource,TKey,TElement>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TElement>)\n  fullName: Enumerable.ToDictionary<TSource,TKey,TElement>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TElement>)\n- uid: System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: ToDictionary<TSource,TKey,TElement>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TElement>, IEqualityComparer<TKey>)\n  nameWithType: Enumerable.ToDictionary<TSource,TKey,TElement>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TElement>, IEqualityComparer<TKey>)\n  fullName: Enumerable.ToDictionary<TSource,TKey,TElement>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TElement>, IEqualityComparer<TKey>)\n- uid: System.Linq.Enumerable.ToHashSet``1(System.Collections.Generic.IEnumerable{``0})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: ToHashSet<TSource>(IEnumerable<TSource>)\n  nameWithType: Enumerable.ToHashSet<TSource>(IEnumerable<TSource>)\n  fullName: Enumerable.ToHashSet<TSource>(IEnumerable<TSource>)\n- uid: System.Linq.Enumerable.ToHashSet``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: ToHashSet<TSource>(IEnumerable<TSource>, IEqualityComparer<TSource>)\n  nameWithType: Enumerable.ToHashSet<TSource>(IEnumerable<TSource>, IEqualityComparer<TSource>)\n  fullName: Enumerable.ToHashSet<TSource>(IEnumerable<TSource>, IEqualityComparer<TSource>)\n- uid: System.Linq.Enumerable.ToList``1(System.Collections.Generic.IEnumerable{``0})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: ToList<TSource>(IEnumerable<TSource>)\n  nameWithType: Enumerable.ToList<TSource>(IEnumerable<TSource>)\n  fullName: Enumerable.ToList<TSource>(IEnumerable<TSource>)\n- uid: System.Linq.Enumerable.ToLookup``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: ToLookup<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>)\n  nameWithType: Enumerable.ToLookup<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>)\n  fullName: Enumerable.ToLookup<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>)\n- uid: System.Linq.Enumerable.ToLookup``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: ToLookup<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>, IEqualityComparer<TKey>)\n  nameWithType: Enumerable.ToLookup<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>, IEqualityComparer<TKey>)\n  fullName: Enumerable.ToLookup<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>, IEqualityComparer<TKey>)\n- uid: System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: ToLookup<TSource,TKey,TElement>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TElement>)\n  nameWithType: Enumerable.ToLookup<TSource,TKey,TElement>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TElement>)\n  fullName: Enumerable.ToLookup<TSource,TKey,TElement>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TElement>)\n- uid: System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: ToLookup<TSource,TKey,TElement>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TElement>, IEqualityComparer<TKey>)\n  nameWithType: Enumerable.ToLookup<TSource,TKey,TElement>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TElement>, IEqualityComparer<TKey>)\n  fullName: Enumerable.ToLookup<TSource,TKey,TElement>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TElement>, IEqualityComparer<TKey>)\n- uid: System.Linq.Enumerable.Union``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Union<TSource>(IEnumerable<TSource>, IEnumerable<TSource>)\n  nameWithType: Enumerable.Union<TSource>(IEnumerable<TSource>, IEnumerable<TSource>)\n  fullName: Enumerable.Union<TSource>(IEnumerable<TSource>, IEnumerable<TSource>)\n- uid: System.Linq.Enumerable.Union``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Union<TSource>(IEnumerable<TSource>, IEnumerable<TSource>, IEqualityComparer<TSource>)\n  nameWithType: Enumerable.Union<TSource>(IEnumerable<TSource>, IEnumerable<TSource>, IEqualityComparer<TSource>)\n  fullName: Enumerable.Union<TSource>(IEnumerable<TSource>, IEnumerable<TSource>, IEqualityComparer<TSource>)\n- uid: System.Linq.Enumerable.Where``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Where<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n  nameWithType: Enumerable.Where<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n  fullName: Enumerable.Where<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n- uid: System.Linq.Enumerable.Where``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Where<TSource>(IEnumerable<TSource>, Func<TSource,Int32,Boolean>)\n  nameWithType: Enumerable.Where<TSource>(IEnumerable<TSource>, Func<TSource,Int32,Boolean>)\n  fullName: Enumerable.Where<TSource>(IEnumerable<TSource>, Func<TSource,Int32,Boolean>)\n- uid: System.Linq.Enumerable.Zip``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,``2})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Zip<TFirst,TSecond,TResult>(IEnumerable<TFirst>, IEnumerable<TSecond>, Func<TFirst,TSecond,TResult>)\n  nameWithType: Enumerable.Zip<TFirst,TSecond,TResult>(IEnumerable<TFirst>, IEnumerable<TSecond>, Func<TFirst,TSecond,TResult>)\n  fullName: Enumerable.Zip<TFirst,TSecond,TResult>(IEnumerable<TFirst>, IEnumerable<TSecond>, Func<TFirst,TSecond,TResult>)\n- uid: System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)\n  parent: System.Linq.ParallelEnumerable\n  isExternal: false\n  name: AsParallel(IEnumerable)\n  nameWithType: ParallelEnumerable.AsParallel(IEnumerable)\n  fullName: ParallelEnumerable.AsParallel(IEnumerable)\n- uid: System.Linq.ParallelEnumerable.AsParallel``1(System.Collections.Generic.IEnumerable{``0})\n  parent: System.Linq.ParallelEnumerable\n  isExternal: false\n  name: AsParallel<TSource>(IEnumerable<TSource>)\n  nameWithType: ParallelEnumerable.AsParallel<TSource>(IEnumerable<TSource>)\n  fullName: ParallelEnumerable.AsParallel<TSource>(IEnumerable<TSource>)\n- uid: System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)\n  parent: System.Linq.Queryable\n  isExternal: false\n  name: AsQueryable(IEnumerable)\n  nameWithType: Queryable.AsQueryable(IEnumerable)\n  fullName: Queryable.AsQueryable(IEnumerable)\n- uid: System.Linq.Queryable.AsQueryable``1(System.Collections.Generic.IEnumerable{``0})\n  parent: System.Linq.Queryable\n  isExternal: false\n  name: AsQueryable<TElement>(IEnumerable<TElement>)\n  nameWithType: Queryable.AsQueryable<TElement>(IEnumerable<TElement>)\n  fullName: Queryable.AsQueryable<TElement>(IEnumerable<TElement>)\n- uid: System.Xml.Linq.Extensions.Ancestors``1(System.Collections.Generic.IEnumerable{``0})\n  parent: System.Xml.Linq.Extensions\n  isExternal: false\n  name: Ancestors<T>(IEnumerable<T>)\n  nameWithType: Extensions.Ancestors<T>(IEnumerable<T>)\n  fullName: Extensions.Ancestors<T>(IEnumerable<T>)\n- uid: System.Xml.Linq.Extensions.Ancestors``1(System.Collections.Generic.IEnumerable{``0},System.Xml.Linq.XName)\n  parent: System.Xml.Linq.Extensions\n  isExternal: false\n  name: Ancestors<T>(IEnumerable<T>, XName)\n  nameWithType: Extensions.Ancestors<T>(IEnumerable<T>, XName)\n  fullName: Extensions.Ancestors<T>(IEnumerable<T>, XName)\n- uid: System.Xml.Linq.Extensions.AncestorsAndSelf(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement})\n  parent: System.Xml.Linq.Extensions\n  isExternal: false\n  name: AncestorsAndSelf(IEnumerable<XElement>)\n  nameWithType: Extensions.AncestorsAndSelf(IEnumerable<XElement>)\n  fullName: Extensions.AncestorsAndSelf(IEnumerable<XElement>)\n- uid: System.Xml.Linq.Extensions.AncestorsAndSelf(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement},System.Xml.Linq.XName)\n  parent: System.Xml.Linq.Extensions\n  isExternal: false\n  name: AncestorsAndSelf(IEnumerable<XElement>, XName)\n  nameWithType: Extensions.AncestorsAndSelf(IEnumerable<XElement>, XName)\n  fullName: Extensions.AncestorsAndSelf(IEnumerable<XElement>, XName)\n- uid: System.Xml.Linq.Extensions.Attributes(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement})\n  parent: System.Xml.Linq.Extensions\n  isExternal: false\n  name: Attributes(IEnumerable<XElement>)\n  nameWithType: Extensions.Attributes(IEnumerable<XElement>)\n  fullName: Extensions.Attributes(IEnumerable<XElement>)\n- uid: System.Xml.Linq.Extensions.Attributes(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement},System.Xml.Linq.XName)\n  parent: System.Xml.Linq.Extensions\n  isExternal: false\n  name: Attributes(IEnumerable<XElement>, XName)\n  nameWithType: Extensions.Attributes(IEnumerable<XElement>, XName)\n  fullName: Extensions.Attributes(IEnumerable<XElement>, XName)\n- uid: System.Xml.Linq.Extensions.DescendantNodes``1(System.Collections.Generic.IEnumerable{``0})\n  parent: System.Xml.Linq.Extensions\n  isExternal: false\n  name: DescendantNodes<T>(IEnumerable<T>)\n  nameWithType: Extensions.DescendantNodes<T>(IEnumerable<T>)\n  fullName: Extensions.DescendantNodes<T>(IEnumerable<T>)\n- uid: System.Xml.Linq.Extensions.DescendantNodesAndSelf(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement})\n  parent: System.Xml.Linq.Extensions\n  isExternal: false\n  name: DescendantNodesAndSelf(IEnumerable<XElement>)\n  nameWithType: Extensions.DescendantNodesAndSelf(IEnumerable<XElement>)\n  fullName: Extensions.DescendantNodesAndSelf(IEnumerable<XElement>)\n- uid: System.Xml.Linq.Extensions.Descendants``1(System.Collections.Generic.IEnumerable{``0})\n  parent: System.Xml.Linq.Extensions\n  isExternal: false\n  name: Descendants<T>(IEnumerable<T>)\n  nameWithType: Extensions.Descendants<T>(IEnumerable<T>)\n  fullName: Extensions.Descendants<T>(IEnumerable<T>)\n- uid: System.Xml.Linq.Extensions.Descendants``1(System.Collections.Generic.IEnumerable{``0},System.Xml.Linq.XName)\n  parent: System.Xml.Linq.Extensions\n  isExternal: false\n  name: Descendants<T>(IEnumerable<T>, XName)\n  nameWithType: Extensions.Descendants<T>(IEnumerable<T>, XName)\n  fullName: Extensions.Descendants<T>(IEnumerable<T>, XName)\n- uid: System.Xml.Linq.Extensions.DescendantsAndSelf(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement})\n  parent: System.Xml.Linq.Extensions\n  isExternal: false\n  name: DescendantsAndSelf(IEnumerable<XElement>)\n  nameWithType: Extensions.DescendantsAndSelf(IEnumerable<XElement>)\n  fullName: Extensions.DescendantsAndSelf(IEnumerable<XElement>)\n- uid: System.Xml.Linq.Extensions.DescendantsAndSelf(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement},System.Xml.Linq.XName)\n  parent: System.Xml.Linq.Extensions\n  isExternal: false\n  name: DescendantsAndSelf(IEnumerable<XElement>, XName)\n  nameWithType: Extensions.DescendantsAndSelf(IEnumerable<XElement>, XName)\n  fullName: Extensions.DescendantsAndSelf(IEnumerable<XElement>, XName)\n- uid: System.Xml.Linq.Extensions.Elements``1(System.Collections.Generic.IEnumerable{``0})\n  parent: System.Xml.Linq.Extensions\n  isExternal: false\n  name: Elements<T>(IEnumerable<T>)\n  nameWithType: Extensions.Elements<T>(IEnumerable<T>)\n  fullName: Extensions.Elements<T>(IEnumerable<T>)\n- uid: System.Xml.Linq.Extensions.Elements``1(System.Collections.Generic.IEnumerable{``0},System.Xml.Linq.XName)\n  parent: System.Xml.Linq.Extensions\n  isExternal: false\n  name: Elements<T>(IEnumerable<T>, XName)\n  nameWithType: Extensions.Elements<T>(IEnumerable<T>, XName)\n  fullName: Extensions.Elements<T>(IEnumerable<T>, XName)\n- uid: System.Xml.Linq.Extensions.InDocumentOrder``1(System.Collections.Generic.IEnumerable{``0})\n  parent: System.Xml.Linq.Extensions\n  isExternal: false\n  name: InDocumentOrder<T>(IEnumerable<T>)\n  nameWithType: Extensions.InDocumentOrder<T>(IEnumerable<T>)\n  fullName: Extensions.InDocumentOrder<T>(IEnumerable<T>)\n- uid: System.Xml.Linq.Extensions.Nodes``1(System.Collections.Generic.IEnumerable{``0})\n  parent: System.Xml.Linq.Extensions\n  isExternal: false\n  name: Nodes<T>(IEnumerable<T>)\n  nameWithType: Extensions.Nodes<T>(IEnumerable<T>)\n  fullName: Extensions.Nodes<T>(IEnumerable<T>)\n- uid: System.Xml.Linq.Extensions.Remove(System.Collections.Generic.IEnumerable{System.Xml.Linq.XAttribute})\n  parent: System.Xml.Linq.Extensions\n  isExternal: false\n  name: Remove(IEnumerable<XAttribute>)\n  nameWithType: Extensions.Remove(IEnumerable<XAttribute>)\n  fullName: Extensions.Remove(IEnumerable<XAttribute>)\n- uid: System.Xml.Linq.Extensions.Remove``1(System.Collections.Generic.IEnumerable{``0})\n  parent: System.Xml.Linq.Extensions\n  isExternal: false\n  name: Remove<T>(IEnumerable<T>)\n  nameWithType: Extensions.Remove<T>(IEnumerable<T>)\n  fullName: Extensions.Remove<T>(IEnumerable<T>)\n- uid: System.Collections.Generic.ICollection`1\n  parent: System.Collections.Generic\n  isExternal: false\n  name: ICollection<T>\n  nameWithType: ICollection<T>\n  fullName: System.Collections.Generic.ICollection<T>\n- uid: System.Collections.IList\n  parent: System.Collections\n  isExternal: false\n  name: IList\n  nameWithType: IList\n  fullName: System.Collections.IList\n"}