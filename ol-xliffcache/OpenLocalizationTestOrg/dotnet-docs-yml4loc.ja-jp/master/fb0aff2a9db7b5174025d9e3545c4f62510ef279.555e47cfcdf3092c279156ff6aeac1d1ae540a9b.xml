{"nodes":[{"content":"Represents a mouse device.","nodes":[{"pos":[0,26],"content":"Represents a mouse device.","nodes":[{"content":"Represents a mouse device.","pos":[0,26]}]}],"pos":[1565,1592],"yaml":true},{"content":"The <xref:System.Windows.Input.MouseDevice> supports the [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] infrastructure and is not intended to be used directly from your code.  \n  \n For mouse related input, use the <xref:System.Windows.Input.Mouse> class.  The <xref:System.Windows.Input.Mouse> class represents the mouse to an application and provides methods, properties, and events that reflect the state of the mouse.","nodes":[{"pos":[0,197],"content":"The <ph id=\"ph1\">&lt;xref:System.Windows.Input.MouseDevice&gt;</ph> supports the <ph id=\"ph2\">[!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)]</ph> infrastructure and is not intended to be used directly from your code.","source":"The <xref:System.Windows.Input.MouseDevice> supports the [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] infrastructure and is not intended to be used directly from your code."},{"pos":[204,443],"content":"For mouse related input, use the <xref:System.Windows.Input.Mouse> class.  The <xref:System.Windows.Input.Mouse> class represents the mouse to an application and provides methods, properties, and events that reflect the state of the mouse.","nodes":[{"content":"For mouse related input, use the <xref:System.Windows.Input.Mouse> class.  The <xref:System.Windows.Input.Mouse> class represents the mouse to an application and provides methods, properties, and events that reflect the state of the mouse.","pos":[0,239],"nodes":[{"content":"For mouse related input, use the <ph id=\"ph1\">&lt;xref:System.Windows.Input.Mouse&gt;</ph> class.","pos":[0,73],"source":"For mouse related input, use the <xref:System.Windows.Input.Mouse> class."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Windows.Input.Mouse&gt;</ph> class represents the mouse to an application and provides methods, properties, and events that reflect the state of the mouse.","pos":[75,239],"source":"  The <xref:System.Windows.Input.Mouse> class represents the mouse to an application and provides methods, properties, and events that reflect the state of the mouse."}]}]}],"pos":[1603,2051],"yaml":true,"extradata":"MT"},{"content":"Gets the <xref href=\"System.Windows.PresentationSource\"></xref> that is reporting input for this device.","nodes":[{"pos":[0,104],"content":"Gets the <ph id=\"ph1\">&lt;xref href=\"System.Windows.PresentationSource\"&gt;&lt;/xref&gt;</ph> that is reporting input for this device.","source":"Gets the <xref href=\"System.Windows.PresentationSource\"></xref> that is reporting input for this device."}],"pos":[3665,3770],"yaml":true},{"content":"The source of input for this device.","nodes":[{"pos":[0,36],"content":"The source of input for this device.","nodes":[{"content":"The source of input for this device.","pos":[0,36]}]}],"pos":[3998,4035],"yaml":true},{"content":"Captures mouse events to the specified element.","nodes":[{"pos":[0,47],"content":"Captures mouse events to the specified element.","nodes":[{"content":"Captures mouse events to the specified element.","pos":[0,47]}]}],"pos":[5175,5223],"yaml":true},{"content":"When an element captures the mouse, it receives mouse input whether the cursor is within its borders  \n  \n If a <xref:System.Windows.Input.CaptureMode> is not specified, the default <xref:System.Windows.Input.CaptureMode> is <xref:System.Windows.Input.CaptureMode.Element>.  \n  \n To release mouse capture, call <xref:System.Windows.Input.MouseDevice.Capture%2A> passing `null` as the element to capture.  \n  \n If the mouse is captured when a <xref:System.Windows.Input.Mouse.MouseDown> or <xref:System.Windows.Input.Mouse.MouseUp> event is raised and the input is not going to the element underneath the mouse, <xref:System.Windows.Input.Mouse.PreviewMouseDownOutsideCapturedElement> and <xref:System.Windows.Input.Mouse.PreviewMouseUpOutsideCapturedElement> are raised first.  This enables the captured element a chance to release capture before the <xref:System.Windows.Input.Mouse.MouseDown> and <xref:System.Windows.Input.Mouse.MouseUp> events are routed.","nodes":[{"pos":[0,100],"content":"When an element captures the mouse, it receives mouse input whether the cursor is within its borders","nodes":[{"content":"When an element captures the mouse, it receives mouse input whether the cursor is within its borders","pos":[0,100]}]},{"pos":[107,273],"content":"If a <xref:System.Windows.Input.CaptureMode> is not specified, the default <xref:System.Windows.Input.CaptureMode> is <xref:System.Windows.Input.CaptureMode.Element>.","nodes":[{"content":"If a <ph id=\"ph1\">&lt;xref:System.Windows.Input.CaptureMode&gt;</ph> is not specified, the default <ph id=\"ph2\">&lt;xref:System.Windows.Input.CaptureMode&gt;</ph> is <ph id=\"ph3\">&lt;xref:System.Windows.Input.CaptureMode.Element&gt;</ph>.","pos":[0,166],"source":"If a <xref:System.Windows.Input.CaptureMode> is not specified, the default <xref:System.Windows.Input.CaptureMode> is <xref:System.Windows.Input.CaptureMode.Element>."}]},{"pos":[280,403],"content":"To release mouse capture, call <ph id=\"ph1\">&lt;xref:System.Windows.Input.MouseDevice.Capture%2A&gt;</ph> passing <ph id=\"ph2\">`null`</ph> as the element to capture.","source":"To release mouse capture, call <xref:System.Windows.Input.MouseDevice.Capture%2A> passing `null` as the element to capture."},{"pos":[410,959],"content":"If the mouse is captured when a <xref:System.Windows.Input.Mouse.MouseDown> or <xref:System.Windows.Input.Mouse.MouseUp> event is raised and the input is not going to the element underneath the mouse, <xref:System.Windows.Input.Mouse.PreviewMouseDownOutsideCapturedElement> and <xref:System.Windows.Input.Mouse.PreviewMouseUpOutsideCapturedElement> are raised first.  This enables the captured element a chance to release capture before the <xref:System.Windows.Input.Mouse.MouseDown> and <xref:System.Windows.Input.Mouse.MouseUp> events are routed.","nodes":[{"content":"If the mouse is captured when a <xref:System.Windows.Input.Mouse.MouseDown> or <xref:System.Windows.Input.Mouse.MouseUp> event is raised and the input is not going to the element underneath the mouse, <xref:System.Windows.Input.Mouse.PreviewMouseDownOutsideCapturedElement> and <xref:System.Windows.Input.Mouse.PreviewMouseUpOutsideCapturedElement> are raised first.  This enables the captured element a chance to release capture before the <xref:System.Windows.Input.Mouse.MouseDown> and <xref:System.Windows.Input.Mouse.MouseUp> events are routed.","pos":[0,549],"nodes":[{"content":"If the mouse is captured when a <ph id=\"ph1\">&lt;xref:System.Windows.Input.Mouse.MouseDown&gt;</ph> or <ph id=\"ph2\">&lt;xref:System.Windows.Input.Mouse.MouseUp&gt;</ph> event is raised and the input is not going to the element underneath the mouse, <ph id=\"ph3\">&lt;xref:System.Windows.Input.Mouse.PreviewMouseDownOutsideCapturedElement&gt;</ph> and <ph id=\"ph4\">&lt;xref:System.Windows.Input.Mouse.PreviewMouseUpOutsideCapturedElement&gt;</ph> are raised first.","pos":[0,366],"source":"If the mouse is captured when a <xref:System.Windows.Input.Mouse.MouseDown> or <xref:System.Windows.Input.Mouse.MouseUp> event is raised and the input is not going to the element underneath the mouse, <xref:System.Windows.Input.Mouse.PreviewMouseDownOutsideCapturedElement> and <xref:System.Windows.Input.Mouse.PreviewMouseUpOutsideCapturedElement> are raised first."},{"content":"This enables the captured element a chance to release capture before the <ph id=\"ph1\">&lt;xref:System.Windows.Input.Mouse.MouseDown&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Windows.Input.Mouse.MouseUp&gt;</ph> events are routed.","pos":[368,549],"source":"  This enables the captured element a chance to release capture before the <xref:System.Windows.Input.Mouse.MouseDown> and <xref:System.Windows.Input.Mouse.MouseUp> events are routed."}]}]}],"pos":[5234,6202],"yaml":true,"extradata":"MT"},{"content":"The element to capture the mouse.","nodes":[{"pos":[0,33],"content":"The element to capture the mouse.","nodes":[{"content":"The element to capture the mouse.","pos":[0,33]}]}],"pos":[6379,6413],"yaml":true},{"content":"`true` if the element was able to capture the mouse; otherwise, `false`.","nodes":[{"pos":[0,72],"content":"<ph id=\"ph1\">`true`</ph> if the element was able to capture the mouse; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` if the element was able to capture the mouse; otherwise, `false`."}],"pos":[6471,6546],"yaml":true},{"content":"<code>element</code> is not a <xref href=\"System.Windows.UIElement\"></xref> or <xref href=\"System.Windows.ContentElement\"></xref>.","nodes":[{"pos":[0,130],"content":"<ph id=\"ph1\">&lt;code&gt;element&lt;/code&gt;</ph> is not a <ph id=\"ph2\">&lt;xref href=\"System.Windows.UIElement\"&gt;&lt;/xref&gt;</ph> or <ph id=\"ph3\">&lt;xref href=\"System.Windows.ContentElement\"&gt;&lt;/xref&gt;</ph>.","source":"<code>element</code> is not a <xref href=\"System.Windows.UIElement\"></xref> or <xref href=\"System.Windows.ContentElement\"></xref>."}],"pos":[6724,6855],"yaml":true},{"content":"Captures mouse input to the specified element using the specified <xref href=\"System.Windows.Input.CaptureMode\"></xref>.","nodes":[{"pos":[0,120],"content":"Captures mouse input to the specified element using the specified <ph id=\"ph1\">&lt;xref href=\"System.Windows.Input.CaptureMode\"&gt;&lt;/xref&gt;</ph>.","source":"Captures mouse input to the specified element using the specified <xref href=\"System.Windows.Input.CaptureMode\"></xref>."}],"pos":[8015,8136],"yaml":true},{"content":"When an element captures the mouse, it receives mouse input whether or not the cursor is within its borders.  \n  \n To release mouse capture, call <xref:System.Windows.Input.MouseDevice.Capture%2A> passing `null` as the element to capture.  \n  \n If the mouse is captured when a <xref:System.Windows.Input.Mouse.MouseDown> or <xref:System.Windows.Input.Mouse.MouseUp> event is raised and the input is not going to the element underneath the mouse, <xref:System.Windows.Input.Mouse.PreviewMouseDownOutsideCapturedElement> and <xref:System.Windows.Input.Mouse.PreviewMouseUpOutsideCapturedElement> are raised first.  This enables the captured element a chance to release capture before the <xref:System.Windows.Input.Mouse.MouseDown> and <xref:System.Windows.Input.Mouse.MouseUp> events are routed.","nodes":[{"pos":[0,108],"content":"When an element captures the mouse, it receives mouse input whether or not the cursor is within its borders.","nodes":[{"content":"When an element captures the mouse, it receives mouse input whether or not the cursor is within its borders.","pos":[0,108]}]},{"pos":[115,238],"content":"To release mouse capture, call <ph id=\"ph1\">&lt;xref:System.Windows.Input.MouseDevice.Capture%2A&gt;</ph> passing <ph id=\"ph2\">`null`</ph> as the element to capture.","source":"To release mouse capture, call <xref:System.Windows.Input.MouseDevice.Capture%2A> passing `null` as the element to capture."},{"pos":[245,794],"content":"If the mouse is captured when a <xref:System.Windows.Input.Mouse.MouseDown> or <xref:System.Windows.Input.Mouse.MouseUp> event is raised and the input is not going to the element underneath the mouse, <xref:System.Windows.Input.Mouse.PreviewMouseDownOutsideCapturedElement> and <xref:System.Windows.Input.Mouse.PreviewMouseUpOutsideCapturedElement> are raised first.  This enables the captured element a chance to release capture before the <xref:System.Windows.Input.Mouse.MouseDown> and <xref:System.Windows.Input.Mouse.MouseUp> events are routed.","nodes":[{"content":"If the mouse is captured when a <xref:System.Windows.Input.Mouse.MouseDown> or <xref:System.Windows.Input.Mouse.MouseUp> event is raised and the input is not going to the element underneath the mouse, <xref:System.Windows.Input.Mouse.PreviewMouseDownOutsideCapturedElement> and <xref:System.Windows.Input.Mouse.PreviewMouseUpOutsideCapturedElement> are raised first.  This enables the captured element a chance to release capture before the <xref:System.Windows.Input.Mouse.MouseDown> and <xref:System.Windows.Input.Mouse.MouseUp> events are routed.","pos":[0,549],"nodes":[{"content":"If the mouse is captured when a <ph id=\"ph1\">&lt;xref:System.Windows.Input.Mouse.MouseDown&gt;</ph> or <ph id=\"ph2\">&lt;xref:System.Windows.Input.Mouse.MouseUp&gt;</ph> event is raised and the input is not going to the element underneath the mouse, <ph id=\"ph3\">&lt;xref:System.Windows.Input.Mouse.PreviewMouseDownOutsideCapturedElement&gt;</ph> and <ph id=\"ph4\">&lt;xref:System.Windows.Input.Mouse.PreviewMouseUpOutsideCapturedElement&gt;</ph> are raised first.","pos":[0,366],"source":"If the mouse is captured when a <xref:System.Windows.Input.Mouse.MouseDown> or <xref:System.Windows.Input.Mouse.MouseUp> event is raised and the input is not going to the element underneath the mouse, <xref:System.Windows.Input.Mouse.PreviewMouseDownOutsideCapturedElement> and <xref:System.Windows.Input.Mouse.PreviewMouseUpOutsideCapturedElement> are raised first."},{"content":"This enables the captured element a chance to release capture before the <ph id=\"ph1\">&lt;xref:System.Windows.Input.Mouse.MouseDown&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Windows.Input.Mouse.MouseUp&gt;</ph> events are routed.","pos":[368,549],"source":"  This enables the captured element a chance to release capture before the <xref:System.Windows.Input.Mouse.MouseDown> and <xref:System.Windows.Input.Mouse.MouseUp> events are routed."}]}]}],"pos":[8147,8948],"yaml":true,"extradata":"MT"},{"content":"The element to capture the mouse..","nodes":[{"pos":[0,34],"content":"The element to capture the mouse..","nodes":[{"content":"The element to capture the mouse..","pos":[0,34]}]}],"pos":[9222,9257],"yaml":true},{"content":"The capture policy to use.","nodes":[{"pos":[0,26],"content":"The capture policy to use.","nodes":[{"content":"The capture policy to use.","pos":[0,26]}]}],"pos":[9343,9370],"yaml":true},{"content":"`true` if the element was able to capture the mouse; otherwise, `false`.","nodes":[{"pos":[0,72],"content":"<ph id=\"ph1\">`true`</ph> if the element was able to capture the mouse; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` if the element was able to capture the mouse; otherwise, `false`."}],"pos":[9428,9503],"yaml":true},{"content":"<code>element</code> is not a <xref href=\"System.Windows.UIElement\"></xref> or <xref href=\"System.Windows.ContentElement\"></xref>.","nodes":[{"pos":[0,130],"content":"<ph id=\"ph1\">&lt;code&gt;element&lt;/code&gt;</ph> is not a <ph id=\"ph2\">&lt;xref href=\"System.Windows.UIElement\"&gt;&lt;/xref&gt;</ph> or <ph id=\"ph3\">&lt;xref href=\"System.Windows.ContentElement\"&gt;&lt;/xref&gt;</ph>.","source":"<code>element</code> is not a <xref href=\"System.Windows.UIElement\"></xref> or <xref href=\"System.Windows.ContentElement\"></xref>."}],"pos":[9681,9812],"yaml":true},{"content":"<code>captureMode</code> is not a valid <xref href=\"System.Windows.Input.CaptureMode\"></xref>.","nodes":[{"pos":[0,94],"content":"<ph id=\"ph1\">&lt;code&gt;captureMode&lt;/code&gt;</ph> is not a valid <ph id=\"ph2\">&lt;xref href=\"System.Windows.Input.CaptureMode\"&gt;&lt;/xref&gt;</ph>.","source":"<code>captureMode</code> is not a valid <xref href=\"System.Windows.Input.CaptureMode\"></xref>."}],"pos":[9958,10053],"yaml":true},{"content":"Gets the <xref href=\"System.Windows.IInputElement\"></xref> that is captured by the mouse.","nodes":[{"pos":[0,89],"content":"Gets the <ph id=\"ph1\">&lt;xref href=\"System.Windows.IInputElement\"&gt;&lt;/xref&gt;</ph> that is captured by the mouse.","source":"Gets the <xref href=\"System.Windows.IInputElement\"></xref> that is captured by the mouse."}],"pos":[11014,11104],"yaml":true},{"content":"When an element captures the mouse, it receives mouse input whether or not the cursor is within its borders.","nodes":[{"pos":[0,108],"content":"When an element captures the mouse, it receives mouse input whether or not the cursor is within its borders.","nodes":[{"content":"When an element captures the mouse, it receives mouse input whether or not the cursor is within its borders.","pos":[0,108]}]}],"pos":[11115,11224],"yaml":true,"extradata":"MT"},{"content":"The element which is captured by the mouse.","nodes":[{"pos":[0,43],"content":"The element which is captured by the mouse.","nodes":[{"content":"The element which is captured by the mouse.","pos":[0,43]}]}],"pos":[11373,11417],"yaml":true},{"content":"Gets the element that the mouse pointer is directly over.","nodes":[{"pos":[0,57],"content":"Gets the element that the mouse pointer is directly over.","nodes":[{"content":"Gets the element that the mouse pointer is directly over.","pos":[0,57]}]}],"pos":[12386,12444],"yaml":true},{"content":"The mouse is considered directly over an element if the mouse has been captured to that element.  \n  \n Controls can be composed of multiple elements. <xref:System.Windows.Input.MouseDevice.DirectlyOver%2A> reports the specific element in the composite control the mouse pointer is over and not the control itself.  For example, depending on which part of a <xref:System.Windows.Controls.Button> the pointer is over, the <xref:System.Windows.Input.MouseDevice.DirectlyOver%2A> property could report the <xref:System.Windows.Controls.TextBox> of the <xref:System.Windows.Controls.ContentControl.Content%2A> property or the <xref:Microsoft.Windows.Themes.ButtonChrome>.  \n  \n Use the <xref:System.Windows.IInputElement.IsMouseOver%2A> property on <xref:System.Windows.UIElement> and <xref:System.Windows.ContentElement> to determine whether the mouse is over an element, which includes its visual child elements or control compositing elements.","nodes":[{"pos":[0,96],"content":"The mouse is considered directly over an element if the mouse has been captured to that element.","nodes":[{"content":"The mouse is considered directly over an element if the mouse has been captured to that element.","pos":[0,96]}]},{"pos":[103,666],"content":"Controls can be composed of multiple elements. <xref:System.Windows.Input.MouseDevice.DirectlyOver%2A> reports the specific element in the composite control the mouse pointer is over and not the control itself.  For example, depending on which part of a <xref:System.Windows.Controls.Button> the pointer is over, the <xref:System.Windows.Input.MouseDevice.DirectlyOver%2A> property could report the <xref:System.Windows.Controls.TextBox> of the <xref:System.Windows.Controls.ContentControl.Content%2A> property or the <xref:Microsoft.Windows.Themes.ButtonChrome>.","nodes":[{"content":"Controls can be composed of multiple elements. <xref:System.Windows.Input.MouseDevice.DirectlyOver%2A> reports the specific element in the composite control the mouse pointer is over and not the control itself.  For example, depending on which part of a <xref:System.Windows.Controls.Button> the pointer is over, the <xref:System.Windows.Input.MouseDevice.DirectlyOver%2A> property could report the <xref:System.Windows.Controls.TextBox> of the <xref:System.Windows.Controls.ContentControl.Content%2A> property or the <xref:Microsoft.Windows.Themes.ButtonChrome>.","pos":[0,563],"nodes":[{"content":"Controls can be composed of multiple elements.","pos":[0,46]},{"content":"<ph id=\"ph1\">&lt;xref:System.Windows.Input.MouseDevice.DirectlyOver%2A&gt;</ph> reports the specific element in the composite control the mouse pointer is over and not the control itself.","pos":[47,210],"source":" <xref:System.Windows.Input.MouseDevice.DirectlyOver%2A> reports the specific element in the composite control the mouse pointer is over and not the control itself."},{"content":"For example, depending on which part of a <ph id=\"ph1\">&lt;xref:System.Windows.Controls.Button&gt;</ph> the pointer is over, the <ph id=\"ph2\">&lt;xref:System.Windows.Input.MouseDevice.DirectlyOver%2A&gt;</ph> property could report the <ph id=\"ph3\">&lt;xref:System.Windows.Controls.TextBox&gt;</ph> of the <ph id=\"ph4\">&lt;xref:System.Windows.Controls.ContentControl.Content%2A&gt;</ph> property or the <ph id=\"ph5\">&lt;xref:Microsoft.Windows.Themes.ButtonChrome&gt;</ph>.","pos":[212,563],"source":"  For example, depending on which part of a <xref:System.Windows.Controls.Button> the pointer is over, the <xref:System.Windows.Input.MouseDevice.DirectlyOver%2A> property could report the <xref:System.Windows.Controls.TextBox> of the <xref:System.Windows.Controls.ContentControl.Content%2A> property or the <xref:Microsoft.Windows.Themes.ButtonChrome>."}]}]},{"pos":[673,941],"content":"Use the <xref:System.Windows.IInputElement.IsMouseOver%2A> property on <xref:System.Windows.UIElement> and <xref:System.Windows.ContentElement> to determine whether the mouse is over an element, which includes its visual child elements or control compositing elements.","nodes":[{"content":"Use the <ph id=\"ph1\">&lt;xref:System.Windows.IInputElement.IsMouseOver%2A&gt;</ph> property on <ph id=\"ph2\">&lt;xref:System.Windows.UIElement&gt;</ph> and <ph id=\"ph3\">&lt;xref:System.Windows.ContentElement&gt;</ph> to determine whether the mouse is over an element, which includes its visual child elements or control compositing elements.","pos":[0,268],"source":"Use the <xref:System.Windows.IInputElement.IsMouseOver%2A> property on <xref:System.Windows.UIElement> and <xref:System.Windows.ContentElement> to determine whether the mouse is over an element, which includes its visual child elements or control compositing elements."}]}],"pos":[12455,13403],"yaml":true,"extradata":"MT"},{"content":"The element the mouse pointer is over.","nodes":[{"pos":[0,38],"content":"The element the mouse pointer is over.","nodes":[{"content":"The element the mouse pointer is over.","pos":[0,38]}]}],"pos":[13556,13595],"yaml":true},{"content":"Gets the state of the specified mouse button.","nodes":[{"pos":[0,45],"content":"Gets the state of the specified mouse button.","nodes":[{"content":"Gets the state of the specified mouse button.","pos":[0,45]}]}],"pos":[14741,14787],"yaml":true},{"content":"The button which is being queried.","nodes":[{"pos":[0,34],"content":"The button which is being queried.","nodes":[{"content":"The button which is being queried.","pos":[0,34]}]}],"pos":[15023,15058],"yaml":true},{"content":"The state of the button.","nodes":[{"pos":[0,24],"content":"The state of the button.","nodes":[{"content":"The state of the button.","pos":[0,24]}]}],"pos":[15139,15164],"yaml":true},{"content":"Calculates the position of the mouse pointer, in client coordinates.","nodes":[{"pos":[0,68],"content":"Calculates the position of the mouse pointer, in client coordinates.","nodes":[{"content":"Calculates the position of the mouse pointer, in client coordinates.","pos":[0,68]}]}],"pos":[16173,16242],"yaml":true},{"content":"The position of the mouse pointer, in client coordinates.","nodes":[{"pos":[0,57],"content":"The position of the mouse pointer, in client coordinates.","nodes":[{"content":"The position of the mouse pointer, in client coordinates.","pos":[0,57]}]}],"pos":[16497,16555],"yaml":true},{"content":"Calculates the position of the mouse pointer, in client coordinates, in the specified <xref href=\"System.Windows.PresentationSource\"></xref>.","nodes":[{"pos":[0,141],"content":"Calculates the position of the mouse pointer, in client coordinates, in the specified <ph id=\"ph1\">&lt;xref href=\"System.Windows.PresentationSource\"&gt;&lt;/xref&gt;</ph>.","source":"Calculates the position of the mouse pointer, in client coordinates, in the specified <xref href=\"System.Windows.PresentationSource\"></xref>."}],"pos":[17869,18011],"yaml":true},{"content":"The source in which to obtain the mouse position.","nodes":[{"pos":[0,49],"content":"The source in which to obtain the mouse position.","nodes":[{"content":"The source in which to obtain the mouse position.","pos":[0,49]}]}],"pos":[18249,18299],"yaml":true},{"content":"The position of the mouse pointer, in client coordinates, in the specified <xref href=\"System.Windows.PresentationSource\"></xref>.","nodes":[{"pos":[0,130],"content":"The position of the mouse pointer, in client coordinates, in the specified <ph id=\"ph1\">&lt;xref href=\"System.Windows.PresentationSource\"&gt;&lt;/xref&gt;</ph>.","source":"The position of the mouse pointer, in client coordinates, in the specified <xref href=\"System.Windows.PresentationSource\"></xref>."}],"pos":[18363,18494],"yaml":true},{"content":"Gets the position of the mouse relative to a specified element.","nodes":[{"pos":[0,63],"content":"Gets the position of the mouse relative to a specified element.","nodes":[{"content":"Gets the position of the mouse relative to a specified element.","pos":[0,63]}]}],"pos":[19621,19685],"yaml":true},{"content":"The position of the mouse pointer is calculated relative to the specified <xref:System.Windows.IInputElement> with the upper-left corner of element being the point of origin, 0,0.","nodes":[{"pos":[0,179],"content":"The position of the mouse pointer is calculated relative to the specified <xref:System.Windows.IInputElement> with the upper-left corner of element being the point of origin, 0,0.","nodes":[{"content":"The position of the mouse pointer is calculated relative to the specified <ph id=\"ph1\">&lt;xref:System.Windows.IInputElement&gt;</ph> with the upper-left corner of element being the point of origin, 0,0.","pos":[0,179],"source":"The position of the mouse pointer is calculated relative to the specified <xref:System.Windows.IInputElement> with the upper-left corner of element being the point of origin, 0,0."}]}],"pos":[19696,19876],"yaml":true,"extradata":"MT"},{"content":"The frame of reference in which to calculate the position of the mouse.","nodes":[{"pos":[0,71],"content":"The frame of reference in which to calculate the position of the mouse.","nodes":[{"content":"The frame of reference in which to calculate the position of the mouse.","pos":[0,71]}]}],"pos":[20130,20202],"yaml":true},{"content":"The position of the mouse relative to the parameter <code>relativeTo</code>.","nodes":[{"pos":[0,76],"content":"The position of the mouse relative to the parameter <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">relativeTo</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The position of the mouse relative to the parameter <code>relativeTo</code>."}],"pos":[20266,20343],"yaml":true},{"content":"<code>relativeTo</code> is `null` or is not a <xref href=\"System.Windows.UIElement\"></xref> or <xref href=\"System.Windows.ContentElement\"></xref>.","nodes":[{"pos":[0,146],"content":"<ph id=\"ph1\">&lt;code&gt;relativeTo&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph> or is not a <ph id=\"ph3\">&lt;xref href=\"System.Windows.UIElement\"&gt;&lt;/xref&gt;</ph> or <ph id=\"ph4\">&lt;xref href=\"System.Windows.ContentElement\"&gt;&lt;/xref&gt;</ph>.","source":"<code>relativeTo</code> is `null` or is not a <xref href=\"System.Windows.UIElement\"></xref> or <xref href=\"System.Windows.ContentElement\"></xref>."}],"pos":[20525,20672],"yaml":true},{"content":"Calculates the screen position of the mouse pointer.","nodes":[{"pos":[0,52],"content":"Calculates the screen position of the mouse pointer.","nodes":[{"content":"Calculates the screen position of the mouse pointer.","pos":[0,52]}]}],"pos":[21691,21744],"yaml":true},{"content":"The position of the mouse pointer.","nodes":[{"pos":[0,34],"content":"The position of the mouse pointer.","nodes":[{"content":"The position of the mouse pointer.","pos":[0,34]}]}],"pos":[21903,21938],"yaml":true},{"content":"Gets the state of the left mouse button of this mouse device.","nodes":[{"pos":[0,61],"content":"Gets the state of the left mouse button of this mouse device.","nodes":[{"content":"Gets the state of the left mouse button of this mouse device.","pos":[0,61]}]}],"pos":[22926,22988],"yaml":true},{"content":"The state of the button.","nodes":[{"pos":[0,24],"content":"The state of the button.","nodes":[{"content":"The state of the button.","pos":[0,24]}]}],"pos":[23157,23182],"yaml":true},{"content":"The state of the middle button of this mouse device.","nodes":[{"pos":[0,52],"content":"The state of the middle button of this mouse device.","nodes":[{"content":"The state of the middle button of this mouse device.","pos":[0,52]}]}],"pos":[24175,24228],"yaml":true},{"content":"The state of the button.","nodes":[{"pos":[0,24],"content":"The state of the button.","nodes":[{"content":"The state of the button.","pos":[0,24]}]}],"pos":[24399,24424],"yaml":true},{"content":"Gets or sets the cursor for the entire application.","nodes":[{"pos":[0,51],"content":"Gets or sets the cursor for the entire application.","nodes":[{"content":"Gets or sets the cursor for the entire application.","pos":[0,51]}]}],"pos":[25409,25461],"yaml":true},{"content":"The <xref:System.Windows.Input.Cursor> that <xref:System.Windows.Input.MouseDevice.OverrideCursor%2A> is set to will be applied to the whole application.  \n  \n To clear the override <xref:System.Windows.Input.Cursor>, set <xref:System.Windows.Input.MouseDevice.OverrideCursor%2A> to `null`.  \n  \n Setting <xref:System.Windows.Input.MouseDevice.OverrideCursor%2A> to <xref:System.Windows.Input.Cursors.None%2A> will force the mouse cursor not to be displayed, but mouse events are still processed.","nodes":[{"pos":[0,153],"content":"The <xref:System.Windows.Input.Cursor> that <xref:System.Windows.Input.MouseDevice.OverrideCursor%2A> is set to will be applied to the whole application.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Windows.Input.Cursor&gt;</ph> that <ph id=\"ph2\">&lt;xref:System.Windows.Input.MouseDevice.OverrideCursor%2A&gt;</ph> is set to will be applied to the whole application.","pos":[0,153],"source":"The <xref:System.Windows.Input.Cursor> that <xref:System.Windows.Input.MouseDevice.OverrideCursor%2A> is set to will be applied to the whole application."}]},{"pos":[160,290],"content":"To clear the override <ph id=\"ph1\">&lt;xref:System.Windows.Input.Cursor&gt;</ph>, set <ph id=\"ph2\">&lt;xref:System.Windows.Input.MouseDevice.OverrideCursor%2A&gt;</ph> to <ph id=\"ph3\">`null`</ph>.","source":"To clear the override <xref:System.Windows.Input.Cursor>, set <xref:System.Windows.Input.MouseDevice.OverrideCursor%2A> to `null`."},{"pos":[297,496],"content":"Setting <xref:System.Windows.Input.MouseDevice.OverrideCursor%2A> to <xref:System.Windows.Input.Cursors.None%2A> will force the mouse cursor not to be displayed, but mouse events are still processed.","nodes":[{"content":"Setting <ph id=\"ph1\">&lt;xref:System.Windows.Input.MouseDevice.OverrideCursor%2A&gt;</ph> to <ph id=\"ph2\">&lt;xref:System.Windows.Input.Cursors.None%2A&gt;</ph> will force the mouse cursor not to be displayed, but mouse events are still processed.","pos":[0,199],"source":"Setting <xref:System.Windows.Input.MouseDevice.OverrideCursor%2A> to <xref:System.Windows.Input.Cursors.None%2A> will force the mouse cursor not to be displayed, but mouse events are still processed."}]}],"pos":[25472,25975],"yaml":true,"extradata":"MT"},{"content":"The override cursor or `null` if <xref href=\"System.Windows.Input.MouseDevice.OverrideCursor\"></xref> is not set.","nodes":[{"pos":[0,113],"content":"The override cursor or <ph id=\"ph1\">`null`</ph> if <ph id=\"ph2\">&lt;xref href=\"System.Windows.Input.MouseDevice.OverrideCursor\"&gt;&lt;/xref&gt;</ph> is not set.","source":"The override cursor or `null` if <xref href=\"System.Windows.Input.MouseDevice.OverrideCursor\"></xref> is not set."}],"pos":[26133,26247],"yaml":true},{"content":"Gets the state of the right button of this mouse device.","nodes":[{"pos":[0,56],"content":"Gets the state of the right button of this mouse device.","nodes":[{"content":"Gets the state of the right button of this mouse device.","pos":[0,56]}]}],"pos":[27238,27295],"yaml":true},{"content":"The state of the button.","nodes":[{"pos":[0,24],"content":"The state of the button.","nodes":[{"content":"The state of the button.","pos":[0,24]}]}],"pos":[27465,27490],"yaml":true},{"content":"Sets the mouse pointer to the specified <xref href=\"System.Windows.Input.Cursor\"></xref>","nodes":[{"pos":[0,88],"content":"Sets the mouse pointer to the specified <ph id=\"ph1\">&lt;xref href=\"System.Windows.Input.Cursor\"&gt;&lt;/xref&gt;</ph>","source":"Sets the mouse pointer to the specified <xref href=\"System.Windows.Input.Cursor\"></xref>"}],"pos":[28575,28664],"yaml":true},{"content":"Note that this cursor does not apply any particular <xref:System.Windows.UIElement>, but rather it applies to the whole application.","nodes":[{"pos":[0,132],"content":"Note that this cursor does not apply any particular <xref:System.Windows.UIElement>, but rather it applies to the whole application.","nodes":[{"content":"Note that this cursor does not apply any particular <ph id=\"ph1\">&lt;xref:System.Windows.UIElement&gt;</ph>, but rather it applies to the whole application.","pos":[0,132],"source":"Note that this cursor does not apply any particular <xref:System.Windows.UIElement>, but rather it applies to the whole application."}]}],"pos":[28675,28808],"yaml":true,"extradata":"MT"},{"content":"The cursor to set the mouse pointer to.","nodes":[{"pos":[0,39],"content":"The cursor to set the mouse pointer to.","nodes":[{"content":"The cursor to set the mouse pointer to.","pos":[0,39]}]}],"pos":[29034,29074],"yaml":true},{"content":"`true` if the mouse cursor is set; otherwise, `false`.","nodes":[{"pos":[0,54],"content":"<ph id=\"ph1\">`true`</ph> if the mouse cursor is set; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` if the mouse cursor is set; otherwise, `false`."}],"pos":[29132,29189],"yaml":true},{"content":"Forces the mouse to resynchronize.","nodes":[{"pos":[0,34],"content":"Forces the mouse to resynchronize.","nodes":[{"content":"Forces the mouse to resynchronize.","pos":[0,34]}]}],"pos":[30245,30280],"yaml":true},{"content":"The <xref:System.Windows.Input.MouseDevice> monitors layout changes and calls <xref:System.Windows.Input.MouseDevice.Synchronize%2A>.  There are cases in which the mouse input system must be forced to update for it to respond to changes.  For example, you must resynchronize the mouse on a timer.","nodes":[{"pos":[0,296],"content":"The <xref:System.Windows.Input.MouseDevice> monitors layout changes and calls <xref:System.Windows.Input.MouseDevice.Synchronize%2A>.  There are cases in which the mouse input system must be forced to update for it to respond to changes.  For example, you must resynchronize the mouse on a timer.","nodes":[{"content":"The <xref:System.Windows.Input.MouseDevice> monitors layout changes and calls <xref:System.Windows.Input.MouseDevice.Synchronize%2A>.  There are cases in which the mouse input system must be forced to update for it to respond to changes.  For example, you must resynchronize the mouse on a timer.","pos":[0,296],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Windows.Input.MouseDevice&gt;</ph> monitors layout changes and calls <ph id=\"ph2\">&lt;xref:System.Windows.Input.MouseDevice.Synchronize%2A&gt;</ph>.","pos":[0,133],"source":"The <xref:System.Windows.Input.MouseDevice> monitors layout changes and calls <xref:System.Windows.Input.MouseDevice.Synchronize%2A>."},{"content":"There are cases in which the mouse input system must be forced to update for it to respond to changes.","pos":[135,237]},{"content":"For example, you must resynchronize the mouse on a timer.","pos":[239,296]}]}]}],"pos":[30291,30588],"yaml":true,"extradata":"MT"},{"content":"Gets the <xref href=\"System.Windows.IInputElement\"></xref> that the input from this mouse device is sent to.","nodes":[{"pos":[0,108],"content":"Gets the <ph id=\"ph1\">&lt;xref href=\"System.Windows.IInputElement\"&gt;&lt;/xref&gt;</ph> that the input from this mouse device is sent to.","source":"Gets the <xref href=\"System.Windows.IInputElement\"></xref> that the input from this mouse device is sent to."}],"pos":[31733,31842],"yaml":true},{"content":"The target for a <xref:System.Windows.Input.MouseDevice> is the object the mouse is over or the object with mouse capture.","nodes":[{"pos":[0,122],"content":"The target for a <xref:System.Windows.Input.MouseDevice> is the object the mouse is over or the object with mouse capture.","nodes":[{"content":"The target for a <ph id=\"ph1\">&lt;xref:System.Windows.Input.MouseDevice&gt;</ph> is the object the mouse is over or the object with mouse capture.","pos":[0,122],"source":"The target for a <xref:System.Windows.Input.MouseDevice> is the object the mouse is over or the object with mouse capture."}]}],"pos":[31853,31976],"yaml":true,"extradata":"MT"},{"content":"The element that receives the input.","nodes":[{"pos":[0,36],"content":"The element that receives the input.","nodes":[{"content":"The element that receives the input.","pos":[0,36]}]}],"pos":[32132,32169],"yaml":true},{"content":"Forces the mouse cursor to update.","nodes":[{"pos":[0,34],"content":"Forces the mouse cursor to update.","nodes":[{"content":"Forces the mouse cursor to update.","pos":[0,34]}]}],"pos":[33162,33197],"yaml":true},{"content":"Gets the state of the first extended button on this mouse device.","nodes":[{"pos":[0,65],"content":"Gets the state of the first extended button on this mouse device.","nodes":[{"content":"Gets the state of the first extended button on this mouse device.","pos":[0,65]}]}],"pos":[34239,34305],"yaml":true},{"content":"The state of the button.","nodes":[{"pos":[0,24],"content":"The state of the button.","nodes":[{"content":"The state of the button.","pos":[0,24]}]}],"pos":[34472,34497],"yaml":true},{"content":"Gets the state of the second extended button of this mouse device.","nodes":[{"pos":[0,66],"content":"Gets the state of the second extended button of this mouse device.","nodes":[{"content":"Gets the state of the second extended button of this mouse device.","pos":[0,66]}]}],"pos":[35464,35531],"yaml":true},{"content":"The state of the button.","nodes":[{"pos":[0,24],"content":"The state of the button.","nodes":[{"content":"The state of the button.","pos":[0,24]}]}],"pos":[35698,35723],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Windows.Input.MouseDevice\n  commentId: T:System.Windows.Input.MouseDevice\n  id: MouseDevice\n  children:\n  - System.Windows.Input.MouseDevice.ActiveSource\n  - System.Windows.Input.MouseDevice.Capture(System.Windows.IInputElement)\n  - System.Windows.Input.MouseDevice.Capture(System.Windows.IInputElement,System.Windows.Input.CaptureMode)\n  - System.Windows.Input.MouseDevice.Captured\n  - System.Windows.Input.MouseDevice.DirectlyOver\n  - System.Windows.Input.MouseDevice.GetButtonState(System.Windows.Input.MouseButton)\n  - System.Windows.Input.MouseDevice.GetClientPosition\n  - System.Windows.Input.MouseDevice.GetClientPosition(System.Windows.PresentationSource)\n  - System.Windows.Input.MouseDevice.GetPosition(System.Windows.IInputElement)\n  - System.Windows.Input.MouseDevice.GetScreenPosition\n  - System.Windows.Input.MouseDevice.LeftButton\n  - System.Windows.Input.MouseDevice.MiddleButton\n  - System.Windows.Input.MouseDevice.OverrideCursor\n  - System.Windows.Input.MouseDevice.RightButton\n  - System.Windows.Input.MouseDevice.SetCursor(System.Windows.Input.Cursor)\n  - System.Windows.Input.MouseDevice.Synchronize\n  - System.Windows.Input.MouseDevice.Target\n  - System.Windows.Input.MouseDevice.UpdateCursor\n  - System.Windows.Input.MouseDevice.XButton1\n  - System.Windows.Input.MouseDevice.XButton2\n  langs:\n  - csharp\n  name: MouseDevice\n  nameWithType: MouseDevice\n  fullName: System.Windows.Input.MouseDevice\n  type: Class\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Input\n  summary: Represents a mouse device.\n  remarks: \"The <xref:System.Windows.Input.MouseDevice> supports the [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] infrastructure and is not intended to be used directly from your code.  \\n  \\n For mouse related input, use the <xref:System.Windows.Input.Mouse> class.  The <xref:System.Windows.Input.Mouse> class represents the mouse to an application and provides methods, properties, and events that reflect the state of the mouse.\"\n  syntax:\n    content: 'public abstract class MouseDevice : System.Windows.Input.InputDevice'\n  inheritance:\n  - System.Object\n  - System.Windows.Threading.DispatcherObject\n  - System.Windows.Input.InputDevice\n  implements: []\n  inheritedMembers:\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.ToString\n  - System.Windows.Threading.DispatcherObject.CheckAccess\n  - System.Windows.Threading.DispatcherObject.Dispatcher\n  - System.Windows.Threading.DispatcherObject.VerifyAccess\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Input/MouseDevice.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.Input.MouseDevice.ActiveSource\n  commentId: P:System.Windows.Input.MouseDevice.ActiveSource\n  id: ActiveSource\n  parent: System.Windows.Input.MouseDevice\n  langs:\n  - csharp\n  name: ActiveSource\n  nameWithType: MouseDevice.ActiveSource\n  fullName: MouseDevice.ActiveSource\n  type: Property\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Input\n  summary: Gets the <xref href=\"System.Windows.PresentationSource\"></xref> that is reporting input for this device.\n  syntax:\n    content: >-\n      [get: System.Security.SecurityCritical]\n\n      public override System.Windows.PresentationSource ActiveSource { get; }\n    return:\n      type: System.Windows.PresentationSource\n      description: The source of input for this device.\n  overload: System.Windows.Input.MouseDevice.ActiveSource*\n  exceptions: []\n  attributes:\n  - type: 'get: System.Security.SecurityCritical'\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Input/MouseDevice.xml\n  ms.technology:\n  - dotnet-wpf\n  ms.author: kempb\n  manager: ghogen\n- uid: System.Windows.Input.MouseDevice.Capture(System.Windows.IInputElement)\n  commentId: M:System.Windows.Input.MouseDevice.Capture(System.Windows.IInputElement)\n  id: Capture(System.Windows.IInputElement)\n  parent: System.Windows.Input.MouseDevice\n  langs:\n  - csharp\n  name: Capture(IInputElement)\n  nameWithType: MouseDevice.Capture(IInputElement)\n  fullName: MouseDevice.Capture(IInputElement)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Input\n  summary: Captures mouse events to the specified element.\n  remarks: \"When an element captures the mouse, it receives mouse input whether the cursor is within its borders  \\n  \\n If a <xref:System.Windows.Input.CaptureMode> is not specified, the default <xref:System.Windows.Input.CaptureMode> is <xref:System.Windows.Input.CaptureMode.Element>.  \\n  \\n To release mouse capture, call <xref:System.Windows.Input.MouseDevice.Capture%2A> passing `null` as the element to capture.  \\n  \\n If the mouse is captured when a <xref:System.Windows.Input.Mouse.MouseDown> or <xref:System.Windows.Input.Mouse.MouseUp> event is raised and the input is not going to the element underneath the mouse, <xref:System.Windows.Input.Mouse.PreviewMouseDownOutsideCapturedElement> and <xref:System.Windows.Input.Mouse.PreviewMouseUpOutsideCapturedElement> are raised first.  This enables the captured element a chance to release capture before the <xref:System.Windows.Input.Mouse.MouseDown> and <xref:System.Windows.Input.Mouse.MouseUp> events are routed.\"\n  syntax:\n    content: public bool Capture (System.Windows.IInputElement element);\n    parameters:\n    - id: element\n      type: System.Windows.IInputElement\n      description: The element to capture the mouse.\n    return:\n      type: System.Boolean\n      description: '`true` if the element was able to capture the mouse; otherwise, `false`.'\n  overload: System.Windows.Input.MouseDevice.Capture*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: <code>element</code> is not a <xref href=\"System.Windows.UIElement\"></xref> or <xref href=\"System.Windows.ContentElement\"></xref>.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Input/MouseDevice.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.Input.MouseDevice.Capture(System.Windows.IInputElement,System.Windows.Input.CaptureMode)\n  commentId: M:System.Windows.Input.MouseDevice.Capture(System.Windows.IInputElement,System.Windows.Input.CaptureMode)\n  id: Capture(System.Windows.IInputElement,System.Windows.Input.CaptureMode)\n  parent: System.Windows.Input.MouseDevice\n  langs:\n  - csharp\n  name: Capture(IInputElement, CaptureMode)\n  nameWithType: MouseDevice.Capture(IInputElement, CaptureMode)\n  fullName: MouseDevice.Capture(IInputElement, CaptureMode)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Input\n  summary: Captures mouse input to the specified element using the specified <xref href=\"System.Windows.Input.CaptureMode\"></xref>.\n  remarks: \"When an element captures the mouse, it receives mouse input whether or not the cursor is within its borders.  \\n  \\n To release mouse capture, call <xref:System.Windows.Input.MouseDevice.Capture%2A> passing `null` as the element to capture.  \\n  \\n If the mouse is captured when a <xref:System.Windows.Input.Mouse.MouseDown> or <xref:System.Windows.Input.Mouse.MouseUp> event is raised and the input is not going to the element underneath the mouse, <xref:System.Windows.Input.Mouse.PreviewMouseDownOutsideCapturedElement> and <xref:System.Windows.Input.Mouse.PreviewMouseUpOutsideCapturedElement> are raised first.  This enables the captured element a chance to release capture before the <xref:System.Windows.Input.Mouse.MouseDown> and <xref:System.Windows.Input.Mouse.MouseUp> events are routed.\"\n  syntax:\n    content: >-\n      [System.Security.SecurityCritical]\n\n      public bool Capture (System.Windows.IInputElement element, System.Windows.Input.CaptureMode captureMode);\n    parameters:\n    - id: element\n      type: System.Windows.IInputElement\n      description: The element to capture the mouse..\n    - id: captureMode\n      type: System.Windows.Input.CaptureMode\n      description: The capture policy to use.\n    return:\n      type: System.Boolean\n      description: '`true` if the element was able to capture the mouse; otherwise, `false`.'\n  overload: System.Windows.Input.MouseDevice.Capture*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: <code>element</code> is not a <xref href=\"System.Windows.UIElement\"></xref> or <xref href=\"System.Windows.ContentElement\"></xref>.\n  - type: System.ComponentModel.InvalidEnumArgumentException\n    commentId: T:System.ComponentModel.InvalidEnumArgumentException\n    description: <code>captureMode</code> is not a valid <xref href=\"System.Windows.Input.CaptureMode\"></xref>.\n  attributes:\n  - type: System.Security.SecurityCriticalAttribute\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Input/MouseDevice.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.Input.MouseDevice.Captured\n  commentId: P:System.Windows.Input.MouseDevice.Captured\n  id: Captured\n  parent: System.Windows.Input.MouseDevice\n  langs:\n  - csharp\n  name: Captured\n  nameWithType: MouseDevice.Captured\n  fullName: MouseDevice.Captured\n  type: Property\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Input\n  summary: Gets the <xref href=\"System.Windows.IInputElement\"></xref> that is captured by the mouse.\n  remarks: When an element captures the mouse, it receives mouse input whether or not the cursor is within its borders.\n  syntax:\n    content: public System.Windows.IInputElement Captured { get; }\n    return:\n      type: System.Windows.IInputElement\n      description: The element which is captured by the mouse.\n  overload: System.Windows.Input.MouseDevice.Captured*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Input/MouseDevice.xml\n  ms.technology:\n  - dotnet-wpf\n  ms.author: kempb\n  manager: ghogen\n- uid: System.Windows.Input.MouseDevice.DirectlyOver\n  commentId: P:System.Windows.Input.MouseDevice.DirectlyOver\n  id: DirectlyOver\n  parent: System.Windows.Input.MouseDevice\n  langs:\n  - csharp\n  name: DirectlyOver\n  nameWithType: MouseDevice.DirectlyOver\n  fullName: MouseDevice.DirectlyOver\n  type: Property\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Input\n  summary: Gets the element that the mouse pointer is directly over.\n  remarks: \"The mouse is considered directly over an element if the mouse has been captured to that element.  \\n  \\n Controls can be composed of multiple elements. <xref:System.Windows.Input.MouseDevice.DirectlyOver%2A> reports the specific element in the composite control the mouse pointer is over and not the control itself.  For example, depending on which part of a <xref:System.Windows.Controls.Button> the pointer is over, the <xref:System.Windows.Input.MouseDevice.DirectlyOver%2A> property could report the <xref:System.Windows.Controls.TextBox> of the <xref:System.Windows.Controls.ContentControl.Content%2A> property or the <xref:Microsoft.Windows.Themes.ButtonChrome>.  \\n  \\n Use the <xref:System.Windows.IInputElement.IsMouseOver%2A> property on <xref:System.Windows.UIElement> and <xref:System.Windows.ContentElement> to determine whether the mouse is over an element, which includes its visual child elements or control compositing elements.\"\n  syntax:\n    content: public System.Windows.IInputElement DirectlyOver { get; }\n    return:\n      type: System.Windows.IInputElement\n      description: The element the mouse pointer is over.\n  overload: System.Windows.Input.MouseDevice.DirectlyOver*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Input/MouseDevice.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.Input.MouseDevice.GetButtonState(System.Windows.Input.MouseButton)\n  commentId: M:System.Windows.Input.MouseDevice.GetButtonState(System.Windows.Input.MouseButton)\n  id: GetButtonState(System.Windows.Input.MouseButton)\n  parent: System.Windows.Input.MouseDevice\n  langs:\n  - csharp\n  name: GetButtonState(MouseButton)\n  nameWithType: MouseDevice.GetButtonState(MouseButton)\n  fullName: MouseDevice.GetButtonState(MouseButton)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Input\n  summary: Gets the state of the specified mouse button.\n  syntax:\n    content: protected System.Windows.Input.MouseButtonState GetButtonState (System.Windows.Input.MouseButton mouseButton);\n    parameters:\n    - id: mouseButton\n      type: System.Windows.Input.MouseButton\n      description: The button which is being queried.\n    return:\n      type: System.Windows.Input.MouseButtonState\n      description: The state of the button.\n  overload: System.Windows.Input.MouseDevice.GetButtonState*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Input/MouseDevice.xml\n  ms.technology:\n  - dotnet-wpf\n  ms.author: kempb\n  manager: ghogen\n- uid: System.Windows.Input.MouseDevice.GetClientPosition\n  commentId: M:System.Windows.Input.MouseDevice.GetClientPosition\n  id: GetClientPosition\n  parent: System.Windows.Input.MouseDevice\n  langs:\n  - csharp\n  name: GetClientPosition()\n  nameWithType: MouseDevice.GetClientPosition()\n  fullName: MouseDevice.GetClientPosition()\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Input\n  summary: Calculates the position of the mouse pointer, in client coordinates.\n  syntax:\n    content: >-\n      [System.Security.SecurityCritical]\n\n      [System.Security.SecurityTreatAsSafe]\n\n      protected System.Windows.Point GetClientPosition ();\n    parameters: []\n    return:\n      type: System.Windows.Point\n      description: The position of the mouse pointer, in client coordinates.\n  overload: System.Windows.Input.MouseDevice.GetClientPosition*\n  exceptions: []\n  attributes:\n  - type: System.Security.SecurityCriticalAttribute\n  - type: System.Security.SecurityTreatAsSafeAttribute\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Input/MouseDevice.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.Input.MouseDevice.GetClientPosition(System.Windows.PresentationSource)\n  commentId: M:System.Windows.Input.MouseDevice.GetClientPosition(System.Windows.PresentationSource)\n  id: GetClientPosition(System.Windows.PresentationSource)\n  parent: System.Windows.Input.MouseDevice\n  langs:\n  - csharp\n  name: GetClientPosition(PresentationSource)\n  nameWithType: MouseDevice.GetClientPosition(PresentationSource)\n  fullName: MouseDevice.GetClientPosition(PresentationSource)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Input\n  summary: Calculates the position of the mouse pointer, in client coordinates, in the specified <xref href=\"System.Windows.PresentationSource\"></xref>.\n  syntax:\n    content: protected System.Windows.Point GetClientPosition (System.Windows.PresentationSource presentationSource);\n    parameters:\n    - id: presentationSource\n      type: System.Windows.PresentationSource\n      description: The source in which to obtain the mouse position.\n    return:\n      type: System.Windows.Point\n      description: The position of the mouse pointer, in client coordinates, in the specified <xref href=\"System.Windows.PresentationSource\"></xref>.\n  overload: System.Windows.Input.MouseDevice.GetClientPosition*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Input/MouseDevice.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.Input.MouseDevice.GetPosition(System.Windows.IInputElement)\n  commentId: M:System.Windows.Input.MouseDevice.GetPosition(System.Windows.IInputElement)\n  id: GetPosition(System.Windows.IInputElement)\n  parent: System.Windows.Input.MouseDevice\n  langs:\n  - csharp\n  name: GetPosition(IInputElement)\n  nameWithType: MouseDevice.GetPosition(IInputElement)\n  fullName: MouseDevice.GetPosition(IInputElement)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Input\n  summary: Gets the position of the mouse relative to a specified element.\n  remarks: The position of the mouse pointer is calculated relative to the specified <xref:System.Windows.IInputElement> with the upper-left corner of element being the point of origin, 0,0.\n  syntax:\n    content: >-\n      [System.Security.SecurityCritical]\n\n      public System.Windows.Point GetPosition (System.Windows.IInputElement relativeTo);\n    parameters:\n    - id: relativeTo\n      type: System.Windows.IInputElement\n      description: The frame of reference in which to calculate the position of the mouse.\n    return:\n      type: System.Windows.Point\n      description: The position of the mouse relative to the parameter <code>relativeTo</code>.\n  overload: System.Windows.Input.MouseDevice.GetPosition*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: <code>relativeTo</code> is `null` or is not a <xref href=\"System.Windows.UIElement\"></xref> or <xref href=\"System.Windows.ContentElement\"></xref>.\n  attributes:\n  - type: System.Security.SecurityCriticalAttribute\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Input/MouseDevice.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.Input.MouseDevice.GetScreenPosition\n  commentId: M:System.Windows.Input.MouseDevice.GetScreenPosition\n  id: GetScreenPosition\n  parent: System.Windows.Input.MouseDevice\n  langs:\n  - csharp\n  name: GetScreenPosition()\n  nameWithType: MouseDevice.GetScreenPosition()\n  fullName: MouseDevice.GetScreenPosition()\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Input\n  summary: Calculates the screen position of the mouse pointer.\n  syntax:\n    content: protected System.Windows.Point GetScreenPosition ();\n    parameters: []\n    return:\n      type: System.Windows.Point\n      description: The position of the mouse pointer.\n  overload: System.Windows.Input.MouseDevice.GetScreenPosition*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Input/MouseDevice.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.Input.MouseDevice.LeftButton\n  commentId: P:System.Windows.Input.MouseDevice.LeftButton\n  id: LeftButton\n  parent: System.Windows.Input.MouseDevice\n  langs:\n  - csharp\n  name: LeftButton\n  nameWithType: MouseDevice.LeftButton\n  fullName: MouseDevice.LeftButton\n  type: Property\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Input\n  summary: Gets the state of the left mouse button of this mouse device.\n  syntax:\n    content: public System.Windows.Input.MouseButtonState LeftButton { get; }\n    return:\n      type: System.Windows.Input.MouseButtonState\n      description: The state of the button.\n  overload: System.Windows.Input.MouseDevice.LeftButton*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Input/MouseDevice.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.Input.MouseDevice.MiddleButton\n  commentId: P:System.Windows.Input.MouseDevice.MiddleButton\n  id: MiddleButton\n  parent: System.Windows.Input.MouseDevice\n  langs:\n  - csharp\n  name: MiddleButton\n  nameWithType: MouseDevice.MiddleButton\n  fullName: MouseDevice.MiddleButton\n  type: Property\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Input\n  summary: The state of the middle button of this mouse device.\n  syntax:\n    content: public System.Windows.Input.MouseButtonState MiddleButton { get; }\n    return:\n      type: System.Windows.Input.MouseButtonState\n      description: The state of the button.\n  overload: System.Windows.Input.MouseDevice.MiddleButton*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Input/MouseDevice.xml\n  ms.technology:\n  - dotnet-wpf\n  ms.author: kempb\n  manager: ghogen\n- uid: System.Windows.Input.MouseDevice.OverrideCursor\n  commentId: P:System.Windows.Input.MouseDevice.OverrideCursor\n  id: OverrideCursor\n  parent: System.Windows.Input.MouseDevice\n  langs:\n  - csharp\n  name: OverrideCursor\n  nameWithType: MouseDevice.OverrideCursor\n  fullName: MouseDevice.OverrideCursor\n  type: Property\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Input\n  summary: Gets or sets the cursor for the entire application.\n  remarks: \"The <xref:System.Windows.Input.Cursor> that <xref:System.Windows.Input.MouseDevice.OverrideCursor%2A> is set to will be applied to the whole application.  \\n  \\n To clear the override <xref:System.Windows.Input.Cursor>, set <xref:System.Windows.Input.MouseDevice.OverrideCursor%2A> to `null`.  \\n  \\n Setting <xref:System.Windows.Input.MouseDevice.OverrideCursor%2A> to <xref:System.Windows.Input.Cursors.None%2A> will force the mouse cursor not to be displayed, but mouse events are still processed.\"\n  syntax:\n    content: public System.Windows.Input.Cursor OverrideCursor { get; set; }\n    return:\n      type: System.Windows.Input.Cursor\n      description: The override cursor or `null` if <xref href=\"System.Windows.Input.MouseDevice.OverrideCursor\"></xref> is not set.\n  overload: System.Windows.Input.MouseDevice.OverrideCursor*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Input/MouseDevice.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.Input.MouseDevice.RightButton\n  commentId: P:System.Windows.Input.MouseDevice.RightButton\n  id: RightButton\n  parent: System.Windows.Input.MouseDevice\n  langs:\n  - csharp\n  name: RightButton\n  nameWithType: MouseDevice.RightButton\n  fullName: MouseDevice.RightButton\n  type: Property\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Input\n  summary: Gets the state of the right button of this mouse device.\n  syntax:\n    content: public System.Windows.Input.MouseButtonState RightButton { get; }\n    return:\n      type: System.Windows.Input.MouseButtonState\n      description: The state of the button.\n  overload: System.Windows.Input.MouseDevice.RightButton*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Input/MouseDevice.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.Input.MouseDevice.SetCursor(System.Windows.Input.Cursor)\n  commentId: M:System.Windows.Input.MouseDevice.SetCursor(System.Windows.Input.Cursor)\n  id: SetCursor(System.Windows.Input.Cursor)\n  parent: System.Windows.Input.MouseDevice\n  langs:\n  - csharp\n  name: SetCursor(Cursor)\n  nameWithType: MouseDevice.SetCursor(Cursor)\n  fullName: MouseDevice.SetCursor(Cursor)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Input\n  summary: Sets the mouse pointer to the specified <xref href=\"System.Windows.Input.Cursor\"></xref>\n  remarks: Note that this cursor does not apply any particular <xref:System.Windows.UIElement>, but rather it applies to the whole application.\n  syntax:\n    content: >-\n      [System.Security.SecurityCritical]\n\n      public bool SetCursor (System.Windows.Input.Cursor cursor);\n    parameters:\n    - id: cursor\n      type: System.Windows.Input.Cursor\n      description: The cursor to set the mouse pointer to.\n    return:\n      type: System.Boolean\n      description: '`true` if the mouse cursor is set; otherwise, `false`.'\n  overload: System.Windows.Input.MouseDevice.SetCursor*\n  exceptions: []\n  attributes:\n  - type: System.Security.SecurityCriticalAttribute\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Input/MouseDevice.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.Input.MouseDevice.Synchronize\n  commentId: M:System.Windows.Input.MouseDevice.Synchronize\n  id: Synchronize\n  parent: System.Windows.Input.MouseDevice\n  langs:\n  - csharp\n  name: Synchronize()\n  nameWithType: MouseDevice.Synchronize()\n  fullName: MouseDevice.Synchronize()\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Input\n  summary: Forces the mouse to resynchronize.\n  remarks: The <xref:System.Windows.Input.MouseDevice> monitors layout changes and calls <xref:System.Windows.Input.MouseDevice.Synchronize%2A>.  There are cases in which the mouse input system must be forced to update for it to respond to changes.  For example, you must resynchronize the mouse on a timer.\n  syntax:\n    content: >-\n      [System.Security.SecurityCritical]\n\n      public void Synchronize ();\n    parameters: []\n  overload: System.Windows.Input.MouseDevice.Synchronize*\n  exceptions: []\n  attributes:\n  - type: System.Security.SecurityCriticalAttribute\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Input/MouseDevice.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.Input.MouseDevice.Target\n  commentId: P:System.Windows.Input.MouseDevice.Target\n  id: Target\n  parent: System.Windows.Input.MouseDevice\n  langs:\n  - csharp\n  name: Target\n  nameWithType: MouseDevice.Target\n  fullName: MouseDevice.Target\n  type: Property\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Input\n  summary: Gets the <xref href=\"System.Windows.IInputElement\"></xref> that the input from this mouse device is sent to.\n  remarks: The target for a <xref:System.Windows.Input.MouseDevice> is the object the mouse is over or the object with mouse capture.\n  syntax:\n    content: public override System.Windows.IInputElement Target { get; }\n    return:\n      type: System.Windows.IInputElement\n      description: The element that receives the input.\n  overload: System.Windows.Input.MouseDevice.Target*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Input/MouseDevice.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.Input.MouseDevice.UpdateCursor\n  commentId: M:System.Windows.Input.MouseDevice.UpdateCursor\n  id: UpdateCursor\n  parent: System.Windows.Input.MouseDevice\n  langs:\n  - csharp\n  name: UpdateCursor()\n  nameWithType: MouseDevice.UpdateCursor()\n  fullName: MouseDevice.UpdateCursor()\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Input\n  summary: Forces the mouse cursor to update.\n  syntax:\n    content: public void UpdateCursor ();\n    parameters: []\n  overload: System.Windows.Input.MouseDevice.UpdateCursor*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Input/MouseDevice.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.Input.MouseDevice.XButton1\n  commentId: P:System.Windows.Input.MouseDevice.XButton1\n  id: XButton1\n  parent: System.Windows.Input.MouseDevice\n  langs:\n  - csharp\n  name: XButton1\n  nameWithType: MouseDevice.XButton1\n  fullName: MouseDevice.XButton1\n  type: Property\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Input\n  summary: Gets the state of the first extended button on this mouse device.\n  syntax:\n    content: public System.Windows.Input.MouseButtonState XButton1 { get; }\n    return:\n      type: System.Windows.Input.MouseButtonState\n      description: The state of the button.\n  overload: System.Windows.Input.MouseDevice.XButton1*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Input/MouseDevice.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.Input.MouseDevice.XButton2\n  commentId: P:System.Windows.Input.MouseDevice.XButton2\n  id: XButton2\n  parent: System.Windows.Input.MouseDevice\n  langs:\n  - csharp\n  name: XButton2\n  nameWithType: MouseDevice.XButton2\n  fullName: MouseDevice.XButton2\n  type: Property\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Input\n  summary: Gets the state of the second extended button of this mouse device.\n  syntax:\n    content: public System.Windows.Input.MouseButtonState XButton2 { get; }\n    return:\n      type: System.Windows.Input.MouseButtonState\n      description: The state of the button.\n  overload: System.Windows.Input.MouseDevice.XButton2*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Input/MouseDevice.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\nreferences:\n- uid: System.Windows.Input.InputDevice\n  parent: System.Windows.Input\n  isExternal: false\n  name: InputDevice\n  nameWithType: InputDevice\n  fullName: System.Windows.Input.InputDevice\n- uid: System.InvalidOperationException\n  parent: System\n  isExternal: false\n  name: InvalidOperationException\n  nameWithType: InvalidOperationException\n  fullName: System.InvalidOperationException\n- uid: System.ComponentModel.InvalidEnumArgumentException\n  parent: System.ComponentModel\n  isExternal: false\n  name: InvalidEnumArgumentException\n  nameWithType: InvalidEnumArgumentException\n  fullName: System.ComponentModel.InvalidEnumArgumentException\n- uid: System.Windows.Input.MouseDevice.ActiveSource\n  parent: System.Windows.Input.MouseDevice\n  isExternal: false\n  name: ActiveSource\n  nameWithType: MouseDevice.ActiveSource\n  fullName: MouseDevice.ActiveSource\n- uid: System.Windows.PresentationSource\n  parent: System.Windows\n  isExternal: false\n  name: PresentationSource\n  nameWithType: PresentationSource\n  fullName: System.Windows.PresentationSource\n- uid: System.Windows.Input.MouseDevice.Capture(System.Windows.IInputElement)\n  parent: System.Windows.Input.MouseDevice\n  isExternal: false\n  name: Capture(IInputElement)\n  nameWithType: MouseDevice.Capture(IInputElement)\n  fullName: MouseDevice.Capture(IInputElement)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Windows.IInputElement\n  parent: System.Windows\n  isExternal: false\n  name: IInputElement\n  nameWithType: IInputElement\n  fullName: System.Windows.IInputElement\n- uid: System.Windows.Input.MouseDevice.Capture(System.Windows.IInputElement,System.Windows.Input.CaptureMode)\n  parent: System.Windows.Input.MouseDevice\n  isExternal: false\n  name: Capture(IInputElement, CaptureMode)\n  nameWithType: MouseDevice.Capture(IInputElement, CaptureMode)\n  fullName: MouseDevice.Capture(IInputElement, CaptureMode)\n- uid: System.Windows.Input.CaptureMode\n  parent: System.Windows.Input\n  isExternal: false\n  name: CaptureMode\n  nameWithType: CaptureMode\n  fullName: System.Windows.Input.CaptureMode\n- uid: System.Windows.Input.MouseDevice.Captured\n  parent: System.Windows.Input.MouseDevice\n  isExternal: false\n  name: Captured\n  nameWithType: MouseDevice.Captured\n  fullName: MouseDevice.Captured\n- uid: System.Windows.Input.MouseDevice.DirectlyOver\n  parent: System.Windows.Input.MouseDevice\n  isExternal: false\n  name: DirectlyOver\n  nameWithType: MouseDevice.DirectlyOver\n  fullName: MouseDevice.DirectlyOver\n- uid: System.Windows.Input.MouseDevice.GetButtonState(System.Windows.Input.MouseButton)\n  parent: System.Windows.Input.MouseDevice\n  isExternal: false\n  name: GetButtonState(MouseButton)\n  nameWithType: MouseDevice.GetButtonState(MouseButton)\n  fullName: MouseDevice.GetButtonState(MouseButton)\n- uid: System.Windows.Input.MouseButtonState\n  parent: System.Windows.Input\n  isExternal: false\n  name: MouseButtonState\n  nameWithType: MouseButtonState\n  fullName: System.Windows.Input.MouseButtonState\n- uid: System.Windows.Input.MouseButton\n  parent: System.Windows.Input\n  isExternal: false\n  name: MouseButton\n  nameWithType: MouseButton\n  fullName: System.Windows.Input.MouseButton\n- uid: System.Windows.Input.MouseDevice.GetClientPosition\n  parent: System.Windows.Input.MouseDevice\n  isExternal: false\n  name: GetClientPosition()\n  nameWithType: MouseDevice.GetClientPosition()\n  fullName: MouseDevice.GetClientPosition()\n- uid: System.Windows.Point\n  parent: System.Windows\n  isExternal: false\n  name: Point\n  nameWithType: Point\n  fullName: System.Windows.Point\n- uid: System.Windows.Input.MouseDevice.GetClientPosition(System.Windows.PresentationSource)\n  parent: System.Windows.Input.MouseDevice\n  isExternal: false\n  name: GetClientPosition(PresentationSource)\n  nameWithType: MouseDevice.GetClientPosition(PresentationSource)\n  fullName: MouseDevice.GetClientPosition(PresentationSource)\n- uid: System.Windows.Input.MouseDevice.GetPosition(System.Windows.IInputElement)\n  parent: System.Windows.Input.MouseDevice\n  isExternal: false\n  name: GetPosition(IInputElement)\n  nameWithType: MouseDevice.GetPosition(IInputElement)\n  fullName: MouseDevice.GetPosition(IInputElement)\n- uid: System.Windows.Input.MouseDevice.GetScreenPosition\n  parent: System.Windows.Input.MouseDevice\n  isExternal: false\n  name: GetScreenPosition()\n  nameWithType: MouseDevice.GetScreenPosition()\n  fullName: MouseDevice.GetScreenPosition()\n- uid: System.Windows.Input.MouseDevice.LeftButton\n  parent: System.Windows.Input.MouseDevice\n  isExternal: false\n  name: LeftButton\n  nameWithType: MouseDevice.LeftButton\n  fullName: MouseDevice.LeftButton\n- uid: System.Windows.Input.MouseDevice.MiddleButton\n  parent: System.Windows.Input.MouseDevice\n  isExternal: false\n  name: MiddleButton\n  nameWithType: MouseDevice.MiddleButton\n  fullName: MouseDevice.MiddleButton\n- uid: System.Windows.Input.MouseDevice.OverrideCursor\n  parent: System.Windows.Input.MouseDevice\n  isExternal: false\n  name: OverrideCursor\n  nameWithType: MouseDevice.OverrideCursor\n  fullName: MouseDevice.OverrideCursor\n- uid: System.Windows.Input.Cursor\n  parent: System.Windows.Input\n  isExternal: false\n  name: Cursor\n  nameWithType: Cursor\n  fullName: System.Windows.Input.Cursor\n- uid: System.Windows.Input.MouseDevice.RightButton\n  parent: System.Windows.Input.MouseDevice\n  isExternal: false\n  name: RightButton\n  nameWithType: MouseDevice.RightButton\n  fullName: MouseDevice.RightButton\n- uid: System.Windows.Input.MouseDevice.SetCursor(System.Windows.Input.Cursor)\n  parent: System.Windows.Input.MouseDevice\n  isExternal: false\n  name: SetCursor(Cursor)\n  nameWithType: MouseDevice.SetCursor(Cursor)\n  fullName: MouseDevice.SetCursor(Cursor)\n- uid: System.Windows.Input.MouseDevice.Synchronize\n  parent: System.Windows.Input.MouseDevice\n  isExternal: false\n  name: Synchronize()\n  nameWithType: MouseDevice.Synchronize()\n  fullName: MouseDevice.Synchronize()\n- uid: System.Windows.Input.MouseDevice.Target\n  parent: System.Windows.Input.MouseDevice\n  isExternal: false\n  name: Target\n  nameWithType: MouseDevice.Target\n  fullName: MouseDevice.Target\n- uid: System.Windows.Input.MouseDevice.UpdateCursor\n  parent: System.Windows.Input.MouseDevice\n  isExternal: false\n  name: UpdateCursor()\n  nameWithType: MouseDevice.UpdateCursor()\n  fullName: MouseDevice.UpdateCursor()\n- uid: System.Windows.Input.MouseDevice.XButton1\n  parent: System.Windows.Input.MouseDevice\n  isExternal: false\n  name: XButton1\n  nameWithType: MouseDevice.XButton1\n  fullName: MouseDevice.XButton1\n- uid: System.Windows.Input.MouseDevice.XButton2\n  parent: System.Windows.Input.MouseDevice\n  isExternal: false\n  name: XButton2\n  nameWithType: MouseDevice.XButton2\n  fullName: MouseDevice.XButton2\n- uid: System.Windows.Input.MouseDevice.Capture*\n  parent: System.Windows.Input.MouseDevice\n  isExternal: false\n  name: Capture\n  nameWithType: MouseDevice.Capture\n  fullName: MouseDevice.Capture\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Input/MouseDevice.xml\n- uid: System.Windows.Input.MouseDevice.ActiveSource*\n  parent: System.Windows.Input.MouseDevice\n  isExternal: false\n  name: ActiveSource\n  nameWithType: MouseDevice.ActiveSource\n  fullName: MouseDevice.ActiveSource\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Input/MouseDevice.xml\n- uid: System.Windows.Input.MouseDevice.Captured*\n  parent: System.Windows.Input.MouseDevice\n  isExternal: false\n  name: Captured\n  nameWithType: MouseDevice.Captured\n  fullName: MouseDevice.Captured\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Input/MouseDevice.xml\n- uid: System.Windows.Input.MouseDevice.DirectlyOver*\n  parent: System.Windows.Input.MouseDevice\n  isExternal: false\n  name: DirectlyOver\n  nameWithType: MouseDevice.DirectlyOver\n  fullName: MouseDevice.DirectlyOver\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Input/MouseDevice.xml\n- uid: System.Windows.Input.MouseDevice.GetButtonState*\n  parent: System.Windows.Input.MouseDevice\n  isExternal: false\n  name: GetButtonState\n  nameWithType: MouseDevice.GetButtonState\n  fullName: MouseDevice.GetButtonState\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Input/MouseDevice.xml\n- uid: System.Windows.Input.MouseDevice.GetClientPosition*\n  parent: System.Windows.Input.MouseDevice\n  isExternal: false\n  name: GetClientPosition\n  nameWithType: MouseDevice.GetClientPosition\n  fullName: MouseDevice.GetClientPosition\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Input/MouseDevice.xml\n- uid: System.Windows.Input.MouseDevice.GetPosition*\n  parent: System.Windows.Input.MouseDevice\n  isExternal: false\n  name: GetPosition\n  nameWithType: MouseDevice.GetPosition\n  fullName: MouseDevice.GetPosition\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Input/MouseDevice.xml\n- uid: System.Windows.Input.MouseDevice.GetScreenPosition*\n  parent: System.Windows.Input.MouseDevice\n  isExternal: false\n  name: GetScreenPosition\n  nameWithType: MouseDevice.GetScreenPosition\n  fullName: MouseDevice.GetScreenPosition\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Input/MouseDevice.xml\n- uid: System.Windows.Input.MouseDevice.LeftButton*\n  parent: System.Windows.Input.MouseDevice\n  isExternal: false\n  name: LeftButton\n  nameWithType: MouseDevice.LeftButton\n  fullName: MouseDevice.LeftButton\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Input/MouseDevice.xml\n- uid: System.Windows.Input.MouseDevice.MiddleButton*\n  parent: System.Windows.Input.MouseDevice\n  isExternal: false\n  name: MiddleButton\n  nameWithType: MouseDevice.MiddleButton\n  fullName: MouseDevice.MiddleButton\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Input/MouseDevice.xml\n- uid: System.Windows.Input.MouseDevice.OverrideCursor*\n  parent: System.Windows.Input.MouseDevice\n  isExternal: false\n  name: OverrideCursor\n  nameWithType: MouseDevice.OverrideCursor\n  fullName: MouseDevice.OverrideCursor\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Input/MouseDevice.xml\n- uid: System.Windows.Input.MouseDevice.RightButton*\n  parent: System.Windows.Input.MouseDevice\n  isExternal: false\n  name: RightButton\n  nameWithType: MouseDevice.RightButton\n  fullName: MouseDevice.RightButton\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Input/MouseDevice.xml\n- uid: System.Windows.Input.MouseDevice.SetCursor*\n  parent: System.Windows.Input.MouseDevice\n  isExternal: false\n  name: SetCursor\n  nameWithType: MouseDevice.SetCursor\n  fullName: MouseDevice.SetCursor\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Input/MouseDevice.xml\n- uid: System.Windows.Input.MouseDevice.Synchronize*\n  parent: System.Windows.Input.MouseDevice\n  isExternal: false\n  name: Synchronize\n  nameWithType: MouseDevice.Synchronize\n  fullName: MouseDevice.Synchronize\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Input/MouseDevice.xml\n- uid: System.Windows.Input.MouseDevice.Target*\n  parent: System.Windows.Input.MouseDevice\n  isExternal: false\n  name: Target\n  nameWithType: MouseDevice.Target\n  fullName: MouseDevice.Target\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Input/MouseDevice.xml\n- uid: System.Windows.Input.MouseDevice.UpdateCursor*\n  parent: System.Windows.Input.MouseDevice\n  isExternal: false\n  name: UpdateCursor\n  nameWithType: MouseDevice.UpdateCursor\n  fullName: MouseDevice.UpdateCursor\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Input/MouseDevice.xml\n- uid: System.Windows.Input.MouseDevice.XButton1*\n  parent: System.Windows.Input.MouseDevice\n  isExternal: false\n  name: XButton1\n  nameWithType: MouseDevice.XButton1\n  fullName: MouseDevice.XButton1\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Input/MouseDevice.xml\n- uid: System.Windows.Input.MouseDevice.XButton2*\n  parent: System.Windows.Input.MouseDevice\n  isExternal: false\n  name: XButton2\n  nameWithType: MouseDevice.XButton2\n  fullName: MouseDevice.XButton2\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Input/MouseDevice.xml\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: Object.Equals(Object)\n  fullName: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: Object.GetHashCode()\n  fullName: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: false\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: false\n  name: ToString()\n  nameWithType: Object.ToString()\n  fullName: Object.ToString()\n- uid: System.Windows.Threading.DispatcherObject.CheckAccess\n  parent: System.Windows.Threading.DispatcherObject\n  isExternal: false\n  name: CheckAccess()\n  nameWithType: DispatcherObject.CheckAccess()\n  fullName: DispatcherObject.CheckAccess()\n- uid: System.Windows.Threading.DispatcherObject.Dispatcher\n  parent: System.Windows.Threading.DispatcherObject\n  isExternal: false\n  name: Dispatcher\n  nameWithType: DispatcherObject.Dispatcher\n  fullName: DispatcherObject.Dispatcher\n- uid: System.Windows.Threading.DispatcherObject.VerifyAccess\n  parent: System.Windows.Threading.DispatcherObject\n  isExternal: false\n  name: VerifyAccess()\n  nameWithType: DispatcherObject.VerifyAccess()\n  fullName: DispatcherObject.VerifyAccess()\n"}