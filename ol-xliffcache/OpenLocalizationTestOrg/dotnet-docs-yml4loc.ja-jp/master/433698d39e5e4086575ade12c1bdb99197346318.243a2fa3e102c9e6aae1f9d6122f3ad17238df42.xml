{"nodes":[{"content":"Encapsulates a method that has four parameters and does not return a value.","nodes":[{"pos":[0,75],"content":"Encapsulates a method that has four parameters and does not return a value.","nodes":[{"content":"Encapsulates a method that has four parameters and does not return a value.","pos":[0,75]}]}],"pos":[338,414],"yaml":true},{"content":"You can use the <xref:System.Action%604> delegate to pass a method as a parameter without explicitly declaring a custom delegate. The encapsulated method must correspond to the method signature that is defined by this delegate. This means that the encapsulated method must have four parameters that are all passed to it by value, and it must not return a value. (In C#, the method must return `void`. In Visual Basic, it must be defined by the `Sub`…`End Sub` construct. It can also be a method that returns a value that is ignored.) Typically, such a method is used to perform an operation.  \n  \n> [!NOTE]\n>  To reference a method that has four parameters and returns a value, use the generic <xref:System.Func%605> delegate instead.  \n  \n When you use the <xref:System.Action%604> delegate, you do not have to explicitly define a delegate that encapsulates a method with four parameters. For example, the following code explicitly declares a delegate named `StringCopy` and assigns a reference to the `CopyStrings` method to its delegate instance.  \n  \n [!code-csharp[System.Action~4#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Action~4/cs/Delegate.cs#1)]\n [!code-vb[System.Action~4#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Action~4/vb/Delegate.vb#1)]  \n  \n The following example simplifies this code by instantiating the <xref:System.Action%604> delegate instead of explicitly defining a new delegate and assigning a named method to it.  \n  \n [!code-csharp[System.Action~4#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Action~4/cs/Action4.cs#2)]\n [!code-vb[System.Action~4#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Action~4/vb/Action4.vb#2)]  \n  \n You can also use the <xref:System.Action%604> delegate with anonymous methods in C#, as the following example illustrates. (For an introduction to anonymous methods, see [Anonymous Methods](~/docs/csharp/programming-guide/statements-expressions-operators/anonymous-methods.md).)  \n  \n [!code-csharp[System.Action~4#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Action~4/cs/Anon.cs#3)]  \n  \n You can also assign a lambda expression to an <xref:System.Action%604> delegate instance, as the following example illustrates. (For an introduction to lambda expressions, see [Lambda Expressions](~/docs/csharp/programming-guide/statements-expressions-operators/lambda-expressions.md).)  \n  \n [!code-csharp[System.Action~4#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Action~4/cs/Lambda.cs#4)]\n [!code-vb[System.Action~4#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Action~4/vb/lambda.vb#4)]","nodes":[{"pos":[0,591],"content":"You can use the <xref:System.Action%604> delegate to pass a method as a parameter without explicitly declaring a custom delegate. The encapsulated method must correspond to the method signature that is defined by this delegate. This means that the encapsulated method must have four parameters that are all passed to it by value, and it must not return a value. (In C#, the method must return `void`. In Visual Basic, it must be defined by the `Sub`…`End Sub` construct. It can also be a method that returns a value that is ignored.) Typically, such a method is used to perform an operation.","nodes":[{"content":"You can use the <ph id=\"ph1\">&lt;xref:System.Action%604&gt;</ph> delegate to pass a method as a parameter without explicitly declaring a custom delegate.","pos":[0,129],"source":"You can use the <xref:System.Action%604> delegate to pass a method as a parameter without explicitly declaring a custom delegate."},{"content":"The encapsulated method must correspond to the method signature that is defined by this delegate.","pos":[130,227]},{"content":"This means that the encapsulated method must have four parameters that are all passed to it by value, and it must not return a value.","pos":[228,361]},{"content":"(In C#, the method must return <ph id=\"ph1\">`void`</ph>.","pos":[362,400],"source":" (In C#, the method must return `void`."},{"content":"In Visual Basic, it must be defined by the <ph id=\"ph1\">`Sub`</ph>…<ph id=\"ph2\">`End Sub`</ph>","pos":[401,459],"source":" In Visual Basic, it must be defined by the `Sub`…`End Sub`"},{"content":"construct.","pos":[460,470]},{"content":"It can also be a method that returns a value that is ignored.) Typically, such a method is used to perform an operation.","pos":[471,591]}]},{"pos":[599,734],"content":"[!NOTE]\n To reference a method that has four parameters and returns a value, use the generic <xref:System.Func%605> delegate instead.","leadings":["","> "],"nodes":[{"content":"To reference a method that has four parameters and returns a value, use the generic <ph id=\"ph1\">&lt;xref:System.Func%605&gt;</ph> delegate instead.","pos":[9,133],"source":" To reference a method that has four parameters and returns a value, use the generic <xref:System.Func%605> delegate instead."}]},{"pos":[741,1049],"content":"When you use the <xref:System.Action%604> delegate, you do not have to explicitly define a delegate that encapsulates a method with four parameters. For example, the following code explicitly declares a delegate named `StringCopy` and assigns a reference to the `CopyStrings` method to its delegate instance.","nodes":[{"content":"When you use the <ph id=\"ph1\">&lt;xref:System.Action%604&gt;</ph> delegate, you do not have to explicitly define a delegate that encapsulates a method with four parameters.","pos":[0,148],"source":"When you use the <xref:System.Action%604> delegate, you do not have to explicitly define a delegate that encapsulates a method with four parameters."},{"content":"For example, the following code explicitly declares a delegate named <ph id=\"ph1\">`StringCopy`</ph> and assigns a reference to the <ph id=\"ph2\">`CopyStrings`</ph> method to its delegate instance.","pos":[149,308],"source":" For example, the following code explicitly declares a delegate named `StringCopy` and assigns a reference to the `CopyStrings` method to its delegate instance."}]},{"pos":[1056,1291],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>System.Action~4#1<ept id=\"p2\">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Action~4/cs/Delegate.cs#1)</ept><ept id=\"p1\">]</ept> <bpt id=\"p3\">[!code-vb</bpt><bpt id=\"p4\">[</bpt>System.Action~4#1<ept id=\"p4\">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Action~4/vb/Delegate.vb#1)</ept><ept id=\"p3\">]</ept>","source":"[!code-csharp[System.Action~4#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Action~4/cs/Delegate.cs#1)]\n [!code-vb[System.Action~4#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Action~4/vb/Delegate.vb#1)]"},{"pos":[1298,1477],"content":"The following example simplifies this code by instantiating the <xref:System.Action%604> delegate instead of explicitly defining a new delegate and assigning a named method to it.","nodes":[{"content":"The following example simplifies this code by instantiating the <ph id=\"ph1\">&lt;xref:System.Action%604&gt;</ph> delegate instead of explicitly defining a new delegate and assigning a named method to it.","pos":[0,179],"source":"The following example simplifies this code by instantiating the <xref:System.Action%604> delegate instead of explicitly defining a new delegate and assigning a named method to it."}]},{"pos":[1484,1717],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>System.Action~4#2<ept id=\"p2\">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Action~4/cs/Action4.cs#2)</ept><ept id=\"p1\">]</ept> <bpt id=\"p3\">[!code-vb</bpt><bpt id=\"p4\">[</bpt>System.Action~4#2<ept id=\"p4\">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Action~4/vb/Action4.vb#2)</ept><ept id=\"p3\">]</ept>","source":"[!code-csharp[System.Action~4#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Action~4/cs/Action4.cs#2)]\n [!code-vb[System.Action~4#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Action~4/vb/Action4.vb#2)]"},{"pos":[1724,2002],"content":"You can also use the <xref:System.Action%604> delegate with anonymous methods in C#, as the following example illustrates. (For an introduction to anonymous methods, see [Anonymous Methods](~/docs/csharp/programming-guide/statements-expressions-operators/anonymous-methods.md).)","nodes":[{"content":"You can also use the <ph id=\"ph1\">&lt;xref:System.Action%604&gt;</ph> delegate with anonymous methods in C#, as the following example illustrates.","pos":[0,122],"source":"You can also use the <xref:System.Action%604> delegate with anonymous methods in C#, as the following example illustrates."},{"content":"(For an introduction to anonymous methods, see <bpt id=\"p1\">[</bpt>Anonymous Methods<ept id=\"p1\">](~/docs/csharp/programming-guide/statements-expressions-operators/anonymous-methods.md)</ept>.)","pos":[123,278],"source":" (For an introduction to anonymous methods, see [Anonymous Methods](~/docs/csharp/programming-guide/statements-expressions-operators/anonymous-methods.md).)"}]},{"pos":[2009,2121],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>System.Action~4#3<ept id=\"p2\">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Action~4/cs/Anon.cs#3)</ept><ept id=\"p1\">]</ept>","source":"[!code-csharp[System.Action~4#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Action~4/cs/Anon.cs#3)]"},{"pos":[2128,2414],"content":"You can also assign a lambda expression to an <xref:System.Action%604> delegate instance, as the following example illustrates. (For an introduction to lambda expressions, see [Lambda Expressions](~/docs/csharp/programming-guide/statements-expressions-operators/lambda-expressions.md).)","nodes":[{"content":"You can also assign a lambda expression to an <ph id=\"ph1\">&lt;xref:System.Action%604&gt;</ph> delegate instance, as the following example illustrates.","pos":[0,127],"source":"You can also assign a lambda expression to an <xref:System.Action%604> delegate instance, as the following example illustrates."},{"content":"(For an introduction to lambda expressions, see <bpt id=\"p1\">[</bpt>Lambda Expressions<ept id=\"p1\">](~/docs/csharp/programming-guide/statements-expressions-operators/lambda-expressions.md)</ept>.)","pos":[128,286],"source":" (For an introduction to lambda expressions, see [Lambda Expressions](~/docs/csharp/programming-guide/statements-expressions-operators/lambda-expressions.md).)"}]},{"pos":[2421,2652],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>System.Action~4#4<ept id=\"p2\">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Action~4/cs/Lambda.cs#4)</ept><ept id=\"p1\">]</ept> <bpt id=\"p3\">[!code-vb</bpt><bpt id=\"p4\">[</bpt>System.Action~4#4<ept id=\"p4\">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Action~4/vb/lambda.vb#4)</ept><ept id=\"p3\">]</ept>","source":"[!code-csharp[System.Action~4#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Action~4/cs/Lambda.cs#4)]\n [!code-vb[System.Action~4#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Action~4/vb/lambda.vb#4)]"}],"pos":[425,3102],"yaml":true,"extradata":"MT"},{"content":"The type of the first parameter of the method that this delegate encapsulates.","nodes":[{"pos":[0,78],"content":"The type of the first parameter of the method that this delegate encapsulates.","nodes":[{"content":"The type of the first parameter of the method that this delegate encapsulates.","pos":[0,78]}]}],"pos":[3267,3346],"yaml":true},{"content":"The type of the second parameter of the method that this delegate encapsulates.","nodes":[{"pos":[0,79],"content":"The type of the second parameter of the method that this delegate encapsulates.","nodes":[{"content":"The type of the second parameter of the method that this delegate encapsulates.","pos":[0,79]}]}],"pos":[3378,3458],"yaml":true},{"content":"The type of the third parameter of the method that this delegate encapsulates.","nodes":[{"pos":[0,78],"content":"The type of the third parameter of the method that this delegate encapsulates.","nodes":[{"content":"The type of the third parameter of the method that this delegate encapsulates.","pos":[0,78]}]}],"pos":[3490,3569],"yaml":true},{"content":"The type of the fourth parameter of the method that this delegate encapsulates.","nodes":[{"pos":[0,79],"content":"The type of the fourth parameter of the method that this delegate encapsulates.","nodes":[{"content":"The type of the fourth parameter of the method that this delegate encapsulates.","pos":[0,79]}]}],"pos":[3601,3681],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Action`4\n  commentId: T:System.Action`4\n  id: Action`4\n  langs:\n  - csharp\n  name: Action<T1,T2,T3,T4>\n  nameWithType: Action<T1,T2,T3,T4>\n  fullName: System.Action<T1,T2,T3,T4>\n  type: Delegate\n  assemblies:\n  - System.Runtime\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Encapsulates a method that has four parameters and does not return a value.\n  remarks: \"You can use the <xref:System.Action%604> delegate to pass a method as a parameter without explicitly declaring a custom delegate. The encapsulated method must correspond to the method signature that is defined by this delegate. This means that the encapsulated method must have four parameters that are all passed to it by value, and it must not return a value. (In C#, the method must return `void`. In Visual Basic, it must be defined by the `Sub`…`End Sub` construct. It can also be a method that returns a value that is ignored.) Typically, such a method is used to perform an operation.  \\n  \\n> [!NOTE]\\n>  To reference a method that has four parameters and returns a value, use the generic <xref:System.Func%605> delegate instead.  \\n  \\n When you use the <xref:System.Action%604> delegate, you do not have to explicitly define a delegate that encapsulates a method with four parameters. For example, the following code explicitly declares a delegate named `StringCopy` and assigns a reference to the `CopyStrings` method to its delegate instance.  \\n  \\n [!code-csharp[System.Action~4#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Action~4/cs/Delegate.cs#1)]\\n [!code-vb[System.Action~4#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Action~4/vb/Delegate.vb#1)]  \\n  \\n The following example simplifies this code by instantiating the <xref:System.Action%604> delegate instead of explicitly defining a new delegate and assigning a named method to it.  \\n  \\n [!code-csharp[System.Action~4#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Action~4/cs/Action4.cs#2)]\\n [!code-vb[System.Action~4#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Action~4/vb/Action4.vb#2)]  \\n  \\n You can also use the <xref:System.Action%604> delegate with anonymous methods in C#, as the following example illustrates. (For an introduction to anonymous methods, see [Anonymous Methods](~/docs/csharp/programming-guide/statements-expressions-operators/anonymous-methods.md).)  \\n  \\n [!code-csharp[System.Action~4#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Action~4/cs/Anon.cs#3)]  \\n  \\n You can also assign a lambda expression to an <xref:System.Action%604> delegate instance, as the following example illustrates. (For an introduction to lambda expressions, see [Lambda Expressions](~/docs/csharp/programming-guide/statements-expressions-operators/lambda-expressions.md).)  \\n  \\n [!code-csharp[System.Action~4#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Action~4/cs/Lambda.cs#4)]\\n [!code-vb[System.Action~4#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Action~4/vb/lambda.vb#4)]\"\n  syntax:\n    content: public delegate void Action<in T1,in T2,in T3,in T4>(T1 arg1, T2 arg2, T3 arg3, T4 arg4);\n    typeParameters:\n    - id: T1\n      description: The type of the first parameter of the method that this delegate encapsulates.\n    - id: T2\n      description: The type of the second parameter of the method that this delegate encapsulates.\n    - id: T3\n      description: The type of the third parameter of the method that this delegate encapsulates.\n    - id: T4\n      description: The type of the fourth parameter of the method that this delegate encapsulates.\n  inheritance:\n  - System.Object\n  - System.Delegate\n  extensionMethods:\n  - System.Reflection.RuntimeReflectionExtensions.GetMethodInfo(System.Delegate)\n  attributes: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Action`4.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\nreferences:\n- uid: System.Delegate\n  parent: System\n  isExternal: false\n  name: Delegate\n  nameWithType: Delegate\n  fullName: System.Delegate\n- uid: System.Reflection.RuntimeReflectionExtensions.GetMethodInfo(System.Delegate)\n  parent: System.Reflection.RuntimeReflectionExtensions\n  isExternal: false\n  name: GetMethodInfo(Delegate)\n  nameWithType: RuntimeReflectionExtensions.GetMethodInfo(Delegate)\n  fullName: RuntimeReflectionExtensions.GetMethodInfo(Delegate)\n"}