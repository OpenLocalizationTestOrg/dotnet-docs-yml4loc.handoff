### YamlMime:ManagedReference
items:
- uid: System.Runtime.GCSettings
  commentId: T:System.Runtime.GCSettings
  id: GCSettings
  children:
  - System.Runtime.GCSettings.IsServerGC
  - System.Runtime.GCSettings.LargeObjectHeapCompactionMode
  - System.Runtime.GCSettings.LatencyMode
  langs:
  - csharp
  name: GCSettings
  nameWithType: GCSettings
  fullName: System.Runtime.GCSettings
  type: Class
  assemblies:
  - System.Runtime
  - mscorlib
  - netstandard
  namespace: System.Runtime
  summary: Specifies the garbage collection settings for the current process.
  remarks: Use the <xref:System.Runtime.GCSettings.IsServerGC%2A> property to determine whether server garbage collection is enabled for the current process.
  syntax:
    content: public static class GCSettings
  inheritance:
  - System.Object
  implements: []
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime/GCSettings.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Runtime.GCSettings.IsServerGC
  commentId: P:System.Runtime.GCSettings.IsServerGC
  id: IsServerGC
  parent: System.Runtime.GCSettings
  langs:
  - csharp
  name: IsServerGC
  nameWithType: GCSettings.IsServerGC
  fullName: GCSettings.IsServerGC
  type: Property
  assemblies:
  - System.Runtime
  - mscorlib
  - netstandard
  namespace: System.Runtime
  summary: Gets a value that indicates whether server garbage collection is enabled.
  remarks: "For information about server garbage collection, see the \"Workstation and Server Garbage Collection\" section in [Fundamentals of Garbage Collection](~/docs/standard/garbage-collection/fundamentals.md).  \n  \n If server garbage collection is not enabled, workstation garbage collection is in effect (with or without concurrent collection). Server garbage collection is available only on multiprocessor computers.  \n  \n An unmanaged host can request server garbage collection, and the host request overrides configuration file settings. If the host does not specify the type of garbage collection, you can use a configuration file setting to specify server garbage collection. This setting is valid only in the application configuration file, not in the machine configuration file (see [Configuring Apps](http://msdn.microsoft.com/library/86bd26d3-737e-4484-9782-19b17f34cd1f)). The following example shows the contents of a sample application configuration file that enables server garbage collection.  \n  \n```  \n<configuration>  \n  <runtime>  \n    <gcServer enabled=\"true\" />  \n  </runtime>  \n</configuration>  \n```"
  example:
  - "The following example indicates whether the host computer is using server or workstation garbage collection.  \n  \n [!code-csharp[Environment.IsServerGC#1](~/samples/snippets/csharp/VS_Snippets_CLR/environment.IsServerGC/CS/isg.cs#1)]\n [!code-vb[Environment.IsServerGC#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/environment.IsServerGC/VB/isg.vb#1)]"
  syntax:
    content: public static bool IsServerGC { get; }
    return:
      type: System.Boolean
      description: '`true` if server garbage collection is enabled; otherwise, `false`.'
  overload: System.Runtime.GCSettings.IsServerGC*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime/GCSettings.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Runtime.GCSettings.LargeObjectHeapCompactionMode
  commentId: P:System.Runtime.GCSettings.LargeObjectHeapCompactionMode
  id: LargeObjectHeapCompactionMode
  parent: System.Runtime.GCSettings
  langs:
  - csharp
  name: LargeObjectHeapCompactionMode
  nameWithType: GCSettings.LargeObjectHeapCompactionMode
  fullName: GCSettings.LargeObjectHeapCompactionMode
  type: Property
  assemblies:
  - System.Runtime
  - mscorlib
  - netstandard
  namespace: System.Runtime
  summary: "[Supported in the .NET Framework 4.5.1 and later versions]  \n  \n Gets or sets a value that indicates whether a full blocking garbage collection compacts the large object heap (LOH)."
  remarks: "The LOH is used for allocating memory for large objects (such as arrays) that require more than 85,000 bytes. Because of the performance impact of copying large blocks of memory, the garbage collector ordinarily sweeps the   LOH, which involves creating a list of the memory locations that were occupied by dead objects and that can be reused to satisfy future requests for allocation of memory for large objects. However, in apps that make extensive use of the LOH to store transient objects, memory fragmentation can also adversely impact performance. In this case, it is possible to use the <xref:System.Runtime.GCSettings.LargeObjectHeapCompactionMode%2A> property to compact rather than simply sweep the LOH during a garbage collection.  \n  \n The default value of the <xref:System.Runtime.GCSettings.LargeObjectHeapCompactionMode%2A> property is <xref:System.Runtime.GCLargeObjectHeapCompactionMode?displayProperty=fullName>, which indicates that the LOH is not compacted during garbage collections. If you assign the property a value of <xref:System.Runtime.GCLargeObjectHeapCompactionMode?displayProperty=fullName>, the LOH is compacted during the next full blocking garbage collection, and the property value is reset to <xref:System.Runtime.GCLargeObjectHeapCompactionMode?displayProperty=fullName>.  \n  \n> [!NOTE]\n>  Background garbage collections are not blocking. This means that, if you set the <xref:System.Runtime.GCSettings.LargeObjectHeapCompactionMode%2A> property to <xref:System.Runtime.GCLargeObjectHeapCompactionMode?displayProperty=fullName>, any background generation 2 collections that occur subsequently do not compact the LOH. Only the first blocking generation 2 collection compacts the LOH.  \n  \n After the <xref:System.Runtime.GCSettings.LargeObjectHeapCompactionMode%2A> property is set to <xref:System.Runtime.GCLargeObjectHeapCompactionMode?displayProperty=fullName>, the next full blocking garbage collection (and compaction of the LOH) occurs at an indeterminate future time. You can compact the LOH immediately by using code like the following:  \n  \n [!code-csharp[System.Runtime.GCSettings#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.gcsettings/cs/lohcompactionmode1.cs#1)]\n [!code-vb[System.Runtime.GCSettings#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.runtime.gcsettings/vb/lohcompactionmode1.vb#1)]"
  syntax:
    content: >-
      [get: System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)]

      [set: System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)]

      public static System.Runtime.GCLargeObjectHeapCompactionMode LargeObjectHeapCompactionMode { get; set; }
    return:
      type: System.Runtime.GCLargeObjectHeapCompactionMode
      description: One of the enumeration values that indicates whether a full blocking garbage collection compacts the LOH.
  overload: System.Runtime.GCSettings.LargeObjectHeapCompactionMode*
  exceptions: []
  attributes:
  - type: 'get: System.Runtime.ConstrainedExecution.ReliabilityContract'
  - type: 'set: System.Runtime.ConstrainedExecution.ReliabilityContract'
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime/GCSettings.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Runtime.GCSettings.LatencyMode
  commentId: P:System.Runtime.GCSettings.LatencyMode
  id: LatencyMode
  parent: System.Runtime.GCSettings
  langs:
  - csharp
  name: LatencyMode
  nameWithType: GCSettings.LatencyMode
  fullName: GCSettings.LatencyMode
  type: Property
  assemblies:
  - System.Runtime
  - mscorlib
  - netstandard
  namespace: System.Runtime
  summary: Gets or sets the current latency mode for garbage collection.
  remarks: "You can reduce the level of intrusiveness of garbage collection in your application by setting the <xref:System.Runtime.GCLatencyMode> to <xref:System.Runtime.GCLatencyMode.LowLatency> during critical operations. After such operations are completed, return to a higher latency mode so that more objects can be reclaimed to increase memory.  \n  \n Ordinarily, you set the value of the <xref:System.Runtime.GCSettings.LatencyMode%2A> property to define the garbage collector's latency mode. However, you cannot set the no GC region latency mode by assigning the <xref:System.Runtime.GCLatencyMode?displayProperty=fullName> enumeration value to the <xref:System.Runtime.GCSettings.LatencyMode%2A> property. Instead, you call the <xref:System.GC.TryStartNoGCRegion%2A?displayProperty=fullName> method to begin the no GC region latency mode, and you call the <xref:System.GC.EndNoGCRegion%2A?displayProperty=fullName> to end it.  \n  \n See [Latency Modes](~/docs/standard/garbage-collection/latency.md) for a discussion of how the runtime configuration settings for garbage collection affect the default value of the <xref:System.Runtime.GCLatencyMode> enumeration."
  syntax:
    content: >-
      [get: System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)]

      [set: System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)]

      public static System.Runtime.GCLatencyMode LatencyMode { get; set; }
    return:
      type: System.Runtime.GCLatencyMode
      description: One of the enumeration values that specifies the latency mode.
  overload: System.Runtime.GCSettings.LatencyMode*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "The <xref href=\"System.Runtime.GCSettings.LatencyMode\"></xref> property is being set to an invalid value.  \n  \n -or-  \n  \n The <xref href=\"System.Runtime.GCSettings.LatencyMode\"></xref> property cannot be set to <xref href=\"System.Runtime.GCLatencyMode.NoGCRegion\"></xref>."
  attributes:
  - type: 'get: System.Runtime.ConstrainedExecution.ReliabilityContract'
  - type: 'set: System.Runtime.ConstrainedExecution.ReliabilityContract'
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime/GCSettings.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
references:
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.ArgumentOutOfRangeException
  parent: System
  isExternal: false
  name: ArgumentOutOfRangeException
  nameWithType: ArgumentOutOfRangeException
  fullName: System.ArgumentOutOfRangeException
- uid: System.Runtime.GCSettings.IsServerGC
  parent: System.Runtime.GCSettings
  isExternal: false
  name: IsServerGC
  nameWithType: GCSettings.IsServerGC
  fullName: GCSettings.IsServerGC
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Runtime.GCSettings.LargeObjectHeapCompactionMode
  parent: System.Runtime.GCSettings
  isExternal: false
  name: LargeObjectHeapCompactionMode
  nameWithType: GCSettings.LargeObjectHeapCompactionMode
  fullName: GCSettings.LargeObjectHeapCompactionMode
- uid: System.Runtime.GCLargeObjectHeapCompactionMode
  parent: System.Runtime
  isExternal: false
  name: GCLargeObjectHeapCompactionMode
  nameWithType: GCLargeObjectHeapCompactionMode
  fullName: System.Runtime.GCLargeObjectHeapCompactionMode
- uid: System.Runtime.GCSettings.LatencyMode
  parent: System.Runtime.GCSettings
  isExternal: false
  name: LatencyMode
  nameWithType: GCSettings.LatencyMode
  fullName: GCSettings.LatencyMode
- uid: System.Runtime.GCLatencyMode
  parent: System.Runtime
  isExternal: false
  name: GCLatencyMode
  nameWithType: GCLatencyMode
  fullName: System.Runtime.GCLatencyMode
- uid: System.Runtime.GCSettings.IsServerGC*
  parent: System.Runtime.GCSettings
  isExternal: false
  name: IsServerGC
  nameWithType: GCSettings.IsServerGC
  fullName: GCSettings.IsServerGC
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime/GCSettings.xml
- uid: System.Runtime.GCSettings.LargeObjectHeapCompactionMode*
  parent: System.Runtime.GCSettings
  isExternal: false
  name: LargeObjectHeapCompactionMode
  nameWithType: GCSettings.LargeObjectHeapCompactionMode
  fullName: GCSettings.LargeObjectHeapCompactionMode
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime/GCSettings.xml
- uid: System.Runtime.GCSettings.LatencyMode*
  parent: System.Runtime.GCSettings
  isExternal: false
  name: LatencyMode
  nameWithType: GCSettings.LatencyMode
  fullName: GCSettings.LatencyMode
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime/GCSettings.xml
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: false
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: Object.Equals(Object)
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: false
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: Object.Equals(Object, Object)
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: false
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: Object.GetHashCode()
- uid: System.Object.GetType
  parent: System.Object
  isExternal: false
  name: GetType()
  nameWithType: Object.GetType()
  fullName: Object.GetType()
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: false
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: Object.MemberwiseClone()
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: false
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: Object.ReferenceEquals(Object, Object)
- uid: System.Object.ToString
  parent: System.Object
  isExternal: false
  name: ToString()
  nameWithType: Object.ToString()
  fullName: Object.ToString()
