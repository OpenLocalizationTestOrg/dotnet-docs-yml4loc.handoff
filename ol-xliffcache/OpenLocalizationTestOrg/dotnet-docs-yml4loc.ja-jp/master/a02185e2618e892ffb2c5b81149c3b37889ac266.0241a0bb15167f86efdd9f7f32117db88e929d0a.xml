{"nodes":[{"content":"Specifies the type of key that is associated with a security token.","nodes":[{"pos":[0,67],"content":"Specifies the type of key that is associated with a security token.","nodes":[{"content":"Specifies the type of key that is associated with a security token.","pos":[0,67]}]}],"pos":[597,665],"yaml":true},{"content":"Use the <xref:System.IdentityModel.Tokens.SecurityKeyType> enumeration to set the <xref:System.IdentityModel.Selectors.SecurityTokenRequirement.KeyType%2A> property.  \n  \n The BearerKey field is used with the <xref:System.ServiceModel.Configuration.IssuedTokenParametersElement.KeyType%2A> property.  \n  \n### BearerKey Requires Wsu:Id or Transport Security with Message Credentials  \n In federation scenarios, an issued token is generally configured as an endorsing supporting token for message security between a client and the relying parties. However, when a Security Token Service (STS) issues a token with no key (BearerKey), [!INCLUDE[indigo2](~/includes/indigo2-md.md)] configures it as a <xref:System.ServiceModel.Security.SecurityTokenAttachmentMode> supporting token ([!INCLUDE[indigo2](~/includes/indigo2-md.md)] cannot endorse without a key). This requires the issued token to be referenced in the signature. [!INCLUDE[indigo2](~/includes/indigo2-md.md)] currently uses the following: http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd:Id as a reference mechanism (Wsu:Id).  \n  \n If an issued token does not have such an attribute, on a client, a <xref:System.ServiceModel.Security.MessageSecurityException> is thrown with the text \"Element to sign must have id\". This happens when a SAML 1.1 token is used as an issued token (the Wsu:Id is not defined in the SAML 1.1 specification).  \n  \n To work around this situation, either use transport security with message credentials (for example, <xref:System.ServiceModel.Configuration.AuthenticationMode>) or an STS must add the http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd:Id (Wsu:Id) to the issued token.  \n  \n Note that if the Wsu:Id is added to a SAML 1.1 token, the resulting XML does not comply to the SAML 1.1 specification. The alternative is to add a Wsu:Id to the `EncryptedData` which is a result of encrypting the issued token. This procedure complies with the SAML 1.1 specification, because the `EncryptedData` element supports the Wsu:Id attribute.  \n  \n So to be compliant with the specification, the bearer token must be encrypted by the STS.","nodes":[{"pos":[0,165],"content":"Use the <xref:System.IdentityModel.Tokens.SecurityKeyType> enumeration to set the <xref:System.IdentityModel.Selectors.SecurityTokenRequirement.KeyType%2A> property.","nodes":[{"content":"Use the <ph id=\"ph1\">&lt;xref:System.IdentityModel.Tokens.SecurityKeyType&gt;</ph> enumeration to set the <ph id=\"ph2\">&lt;xref:System.IdentityModel.Selectors.SecurityTokenRequirement.KeyType%2A&gt;</ph> property.","pos":[0,165],"source":"Use the <xref:System.IdentityModel.Tokens.SecurityKeyType> enumeration to set the <xref:System.IdentityModel.Selectors.SecurityTokenRequirement.KeyType%2A> property."}]},{"pos":[172,299],"content":"The BearerKey field is used with the <xref:System.ServiceModel.Configuration.IssuedTokenParametersElement.KeyType%2A> property.","nodes":[{"content":"The BearerKey field is used with the <ph id=\"ph1\">&lt;xref:System.ServiceModel.Configuration.IssuedTokenParametersElement.KeyType%2A&gt;</ph> property.","pos":[0,127],"source":"The BearerKey field is used with the <xref:System.ServiceModel.Configuration.IssuedTokenParametersElement.KeyType%2A> property."}]},{"pos":[309,381],"content":"BearerKey Requires Wsu:Id or Transport Security with Message Credentials","linkify":"BearerKey Requires Wsu:Id or Transport Security with Message Credentials","nodes":[{"content":"BearerKey Requires Wsu:Id or Transport Security with Message Credentials","pos":[0,72]}]},{"pos":[385,1117],"content":"In federation scenarios, an issued token is generally configured as an endorsing supporting token for message security between a client and the relying parties. However, when a Security Token Service (STS) issues a token with no key (BearerKey), [!INCLUDE[indigo2](~/includes/indigo2-md.md)] configures it as a <xref:System.ServiceModel.Security.SecurityTokenAttachmentMode> supporting token ([!INCLUDE[indigo2](~/includes/indigo2-md.md)] cannot endorse without a key). This requires the issued token to be referenced in the signature. [!INCLUDE[indigo2](~/includes/indigo2-md.md)] currently uses the following: http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd:Id as a reference mechanism (Wsu:Id).","nodes":[{"content":"In federation scenarios, an issued token is generally configured as an endorsing supporting token for message security between a client and the relying parties.","pos":[0,160]},{"content":"However, when a Security Token Service (STS) issues a token with no key (BearerKey), <ph id=\"ph1\">[!INCLUDE[indigo2](~/includes/indigo2-md.md)]</ph> configures it as a <ph id=\"ph2\">&lt;xref:System.ServiceModel.Security.SecurityTokenAttachmentMode&gt;</ph> supporting token (<ph id=\"ph3\">[!INCLUDE[indigo2](~/includes/indigo2-md.md)]</ph> cannot endorse without a key).","pos":[161,469],"source":" However, when a Security Token Service (STS) issues a token with no key (BearerKey), [!INCLUDE[indigo2](~/includes/indigo2-md.md)] configures it as a <xref:System.ServiceModel.Security.SecurityTokenAttachmentMode> supporting token ([!INCLUDE[indigo2](~/includes/indigo2-md.md)] cannot endorse without a key)."},{"content":"This requires the issued token to be referenced in the signature.","pos":[470,535]},{"content":"<ph id=\"ph1\">[!INCLUDE[indigo2](~/includes/indigo2-md.md)]</ph> currently uses the following: http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd:Id as a reference mechanism (Wsu:Id).","pos":[536,732],"source":"[!INCLUDE[indigo2](~/includes/indigo2-md.md)] currently uses the following: http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd:Id as a reference mechanism (Wsu:Id)."}]},{"pos":[1124,1428],"content":"If an issued token does not have such an attribute, on a client, a <xref:System.ServiceModel.Security.MessageSecurityException> is thrown with the text \"Element to sign must have id\". This happens when a SAML 1.1 token is used as an issued token (the Wsu:Id is not defined in the SAML 1.1 specification).","nodes":[{"content":"If an issued token does not have such an attribute, on a client, a <xref:System.ServiceModel.Security.MessageSecurityException> is thrown with the text \"Element to sign must have id\". This happens when a SAML 1.1 token is used as an issued token (the Wsu:Id is not defined in the SAML 1.1 specification).","pos":[0,304],"nodes":[{"content":"If an issued token does not have such an attribute, on a client, a <ph id=\"ph1\">&lt;xref:System.ServiceModel.Security.MessageSecurityException&gt;</ph> is thrown with the text \"Element to sign must have id\".","pos":[0,183],"source":"If an issued token does not have such an attribute, on a client, a <xref:System.ServiceModel.Security.MessageSecurityException> is thrown with the text \"Element to sign must have id\"."},{"content":"This happens when a SAML 1.1 token is used as an issued token (the Wsu:Id is not defined in the SAML 1.1 specification).","pos":[184,304]}]}]},{"pos":[1435,1734],"content":"To work around this situation, either use transport security with message credentials (for example, <xref:System.ServiceModel.Configuration.AuthenticationMode>) or an STS must add the http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd:Id (Wsu:Id) to the issued token.","nodes":[{"content":"To work around this situation, either use transport security with message credentials (for example, <ph id=\"ph1\">&lt;xref:System.ServiceModel.Configuration.AuthenticationMode&gt;</ph>) or an STS must add the http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd:Id (Wsu:Id) to the issued token.","pos":[0,299],"source":"To work around this situation, either use transport security with message credentials (for example, <xref:System.ServiceModel.Configuration.AuthenticationMode>) or an STS must add the http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd:Id (Wsu:Id) to the issued token."}]},{"pos":[1741,2091],"content":"Note that if the Wsu:Id is added to a SAML 1.1 token, the resulting XML does not comply to the SAML 1.1 specification. The alternative is to add a Wsu:Id to the `EncryptedData` which is a result of encrypting the issued token. This procedure complies with the SAML 1.1 specification, because the `EncryptedData` element supports the Wsu:Id attribute.","nodes":[{"content":"Note that if the Wsu:Id is added to a SAML 1.1 token, the resulting XML does not comply to the SAML 1.1 specification.","pos":[0,118]},{"content":"The alternative is to add a Wsu:Id to the <ph id=\"ph1\">`EncryptedData`</ph> which is a result of encrypting the issued token.","pos":[119,226],"source":" The alternative is to add a Wsu:Id to the `EncryptedData` which is a result of encrypting the issued token."},{"content":"This procedure complies with the SAML 1.1 specification, because the <ph id=\"ph1\">`EncryptedData`</ph> element supports the Wsu:Id attribute.","pos":[227,350],"source":" This procedure complies with the SAML 1.1 specification, because the `EncryptedData` element supports the Wsu:Id attribute."}]},{"pos":[2098,2187],"content":"So to be compliant with the specification, the bearer token must be encrypted by the STS.","nodes":[{"content":"So to be compliant with the specification, the bearer token must be encrypted by the STS.","pos":[0,89]}]}],"pos":[676,2881],"yaml":true,"extradata":"MT"},{"content":"Specifies that the key is an asymmetric key.","nodes":[{"pos":[0,44],"content":"Specifies that the key is an asymmetric key.","nodes":[{"content":"Specifies that the key is an asymmetric key.","pos":[0,44]}]}],"pos":[4012,4057],"yaml":true},{"content":"Specifies that the security token does not contain a proof-of-possession key.","nodes":[{"pos":[0,77],"content":"Specifies that the security token does not contain a proof-of-possession key.","nodes":[{"content":"Specifies that the security token does not contain a proof-of-possession key.","pos":[0,77]}]}],"pos":[5109,5187],"yaml":true},{"content":"Specifies that the key is a symmetric key.","nodes":[{"pos":[0,42],"content":"Specifies that the key is a symmetric key.","nodes":[{"content":"Specifies that the key is a symmetric key.","pos":[0,42]}]}],"pos":[6215,6258],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.IdentityModel.Tokens.SecurityKeyType\n  commentId: T:System.IdentityModel.Tokens.SecurityKeyType\n  id: SecurityKeyType\n  children:\n  - System.IdentityModel.Tokens.SecurityKeyType.AsymmetricKey\n  - System.IdentityModel.Tokens.SecurityKeyType.BearerKey\n  - System.IdentityModel.Tokens.SecurityKeyType.SymmetricKey\n  langs:\n  - csharp\n  name: SecurityKeyType\n  nameWithType: SecurityKeyType\n  fullName: System.IdentityModel.Tokens.SecurityKeyType\n  type: Enum\n  assemblies:\n  - System.IdentityModel\n  namespace: System.IdentityModel.Tokens\n  summary: Specifies the type of key that is associated with a security token.\n  remarks: \"Use the <xref:System.IdentityModel.Tokens.SecurityKeyType> enumeration to set the <xref:System.IdentityModel.Selectors.SecurityTokenRequirement.KeyType%2A> property.  \\n  \\n The BearerKey field is used with the <xref:System.ServiceModel.Configuration.IssuedTokenParametersElement.KeyType%2A> property.  \\n  \\n### BearerKey Requires Wsu:Id or Transport Security with Message Credentials  \\n In federation scenarios, an issued token is generally configured as an endorsing supporting token for message security between a client and the relying parties. However, when a Security Token Service (STS) issues a token with no key (BearerKey), [!INCLUDE[indigo2](~/includes/indigo2-md.md)] configures it as a <xref:System.ServiceModel.Security.SecurityTokenAttachmentMode> supporting token ([!INCLUDE[indigo2](~/includes/indigo2-md.md)] cannot endorse without a key). This requires the issued token to be referenced in the signature. [!INCLUDE[indigo2](~/includes/indigo2-md.md)] currently uses the following: http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd:Id as a reference mechanism (Wsu:Id).  \\n  \\n If an issued token does not have such an attribute, on a client, a <xref:System.ServiceModel.Security.MessageSecurityException> is thrown with the text \\\"Element to sign must have id\\\". This happens when a SAML 1.1 token is used as an issued token (the Wsu:Id is not defined in the SAML 1.1 specification).  \\n  \\n To work around this situation, either use transport security with message credentials (for example, <xref:System.ServiceModel.Configuration.AuthenticationMode>) or an STS must add the http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd:Id (Wsu:Id) to the issued token.  \\n  \\n Note that if the Wsu:Id is added to a SAML 1.1 token, the resulting XML does not comply to the SAML 1.1 specification. The alternative is to add a Wsu:Id to the `EncryptedData` which is a result of encrypting the issued token. This procedure complies with the SAML 1.1 specification, because the `EncryptedData` element supports the Wsu:Id attribute.  \\n  \\n So to be compliant with the specification, the bearer token must be encrypted by the STS.\"\n  syntax:\n    content: public enum SecurityKeyType\n  inheritance:\n  - System.Object\n  - System.ValueType\n  - System.Enum\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IdentityModel.Tokens/SecurityKeyType.xml\n  ms.technology:\n  - dotnet-standard\n  ms.author: v-jibran\n  manager: markgal\n- uid: System.IdentityModel.Tokens.SecurityKeyType.AsymmetricKey\n  commentId: F:System.IdentityModel.Tokens.SecurityKeyType.AsymmetricKey\n  id: AsymmetricKey\n  parent: System.IdentityModel.Tokens.SecurityKeyType\n  langs:\n  - csharp\n  name: AsymmetricKey\n  nameWithType: SecurityKeyType.AsymmetricKey\n  fullName: SecurityKeyType.AsymmetricKey\n  type: Field\n  assemblies:\n  - System.IdentityModel\n  namespace: System.IdentityModel.Tokens\n  summary: Specifies that the key is an asymmetric key.\n  syntax:\n    content: AsymmetricKey\n    return:\n      type: System.IdentityModel.Tokens.SecurityKeyType\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IdentityModel.Tokens/SecurityKeyType.xml\n- uid: System.IdentityModel.Tokens.SecurityKeyType.BearerKey\n  commentId: F:System.IdentityModel.Tokens.SecurityKeyType.BearerKey\n  id: BearerKey\n  parent: System.IdentityModel.Tokens.SecurityKeyType\n  langs:\n  - csharp\n  name: BearerKey\n  nameWithType: SecurityKeyType.BearerKey\n  fullName: SecurityKeyType.BearerKey\n  type: Field\n  assemblies:\n  - System.IdentityModel\n  namespace: System.IdentityModel.Tokens\n  summary: Specifies that the security token does not contain a proof-of-possession key.\n  syntax:\n    content: BearerKey\n    return:\n      type: System.IdentityModel.Tokens.SecurityKeyType\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IdentityModel.Tokens/SecurityKeyType.xml\n- uid: System.IdentityModel.Tokens.SecurityKeyType.SymmetricKey\n  commentId: F:System.IdentityModel.Tokens.SecurityKeyType.SymmetricKey\n  id: SymmetricKey\n  parent: System.IdentityModel.Tokens.SecurityKeyType\n  langs:\n  - csharp\n  name: SymmetricKey\n  nameWithType: SecurityKeyType.SymmetricKey\n  fullName: SecurityKeyType.SymmetricKey\n  type: Field\n  assemblies:\n  - System.IdentityModel\n  namespace: System.IdentityModel.Tokens\n  summary: Specifies that the key is a symmetric key.\n  syntax:\n    content: SymmetricKey\n    return:\n      type: System.IdentityModel.Tokens.SecurityKeyType\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IdentityModel.Tokens/SecurityKeyType.xml\nreferences:\n- uid: System.Enum\n  parent: System\n  isExternal: false\n  name: Enum\n  nameWithType: Enum\n  fullName: System.Enum\n- uid: System.IdentityModel.Tokens.SecurityKeyType.AsymmetricKey\n  parent: System.IdentityModel.Tokens.SecurityKeyType\n  isExternal: false\n  name: AsymmetricKey\n  nameWithType: SecurityKeyType.AsymmetricKey\n  fullName: SecurityKeyType.AsymmetricKey\n- uid: System.IdentityModel.Tokens.SecurityKeyType\n  parent: System.IdentityModel.Tokens\n  isExternal: false\n  name: SecurityKeyType\n  nameWithType: SecurityKeyType\n  fullName: System.IdentityModel.Tokens.SecurityKeyType\n- uid: System.IdentityModel.Tokens.SecurityKeyType.BearerKey\n  parent: System.IdentityModel.Tokens.SecurityKeyType\n  isExternal: false\n  name: BearerKey\n  nameWithType: SecurityKeyType.BearerKey\n  fullName: SecurityKeyType.BearerKey\n- uid: System.IdentityModel.Tokens.SecurityKeyType.SymmetricKey\n  parent: System.IdentityModel.Tokens.SecurityKeyType\n  isExternal: false\n  name: SymmetricKey\n  nameWithType: SecurityKeyType.SymmetricKey\n  fullName: SecurityKeyType.SymmetricKey\n"}