{"nodes":[{"content":"Sets the mode for authorization checks when using the <xref href=\"System.Security.Permissions.PrincipalPermissionAttribute\"></xref> to control access to a method.","nodes":[{"pos":[0,162],"content":"Sets the mode for authorization checks when using the <ph id=\"ph1\">&lt;xref href=\"System.Security.Permissions.PrincipalPermissionAttribute\"&gt;&lt;/xref&gt;</ph> to control access to a method.","source":"Sets the mode for authorization checks when using the <xref href=\"System.Security.Permissions.PrincipalPermissionAttribute\"></xref> to control access to a method."}],"pos":[830,993],"yaml":true},{"content":"When applying the <xref:System.Security.Permissions.PrincipalPermissionAttribute> to a method, this mode specifies which set of roles to use when authorizing access. By default, the attribute uses Windows groups (such as `Administrator` or `Users`) to specify the role to which the user must belong.  \n  \n To set the mode programmatically, create an instance of the `ServiceHost` class, then find the <xref:System.ServiceModel.Description.ServiceAuthorizationBehavior> in its collection of behaviors, and set the <xref:System.ServiceModel.Description.ServiceAuthorizationBehavior.PrincipalPermissionMode%2A> to the appropriate enumeration. The following example sets the property to UseAspNetRoles.  \n  \n [!code-csharp[PrincipalPermissionMode#1](~/samples/snippets/csharp/VS_Snippets_CFX/principalpermissionmode/cs/source.cs#1)]\n [!code-vb[PrincipalPermissionMode#1](~/samples/snippets/visualbasic/VS_Snippets_CFX/principalpermissionmode/vb/source.vb#1)]  \n  \n You can also set the behavior in configuration by adding a [\\&lt;serviceAuthorization\\&gt;](~/docs/framework/configure-apps/file-schema/wcf/serviceauthorization-element.md) to the [\\&lt;serviceBehaviors\\&gt;](~/docs/framework/configure-apps/file-schema/wcf/servicebehaviors.md) of a configuration file, as shown in the following code.  \n  \n [!code-csharp[PrincipalPermissionMode#10](~/samples/snippets/csharp/VS_Snippets_CFX/principalpermissionmode/cs/source.cs#10)]\n [!code-vb[PrincipalPermissionMode#10](~/samples/snippets/visualbasic/VS_Snippets_CFX/principalpermissionmode/vb/source.vb#10)]  \n  \n The enumeration affects how the <xref:System.Security.Permissions.PrincipalPermissionAttribute> attribute authorizes a user when it is applied to a method. The following example applies the attribute to a method and demands that the user belong to the Users group on the computer. This code works only when the <xref:System.ServiceModel.Description.ServiceAuthorizationBehavior.PrincipalPermissionMode%2A> is set to `UseWindowsGroup` (the default setting).  \n  \n [!code-csharp[PrincipalPermissionMode#2](~/samples/snippets/csharp/VS_Snippets_CFX/principalpermissionmode/cs/source.cs#2)]\n [!code-vb[PrincipalPermissionMode#2](~/samples/snippets/visualbasic/VS_Snippets_CFX/principalpermissionmode/vb/source.vb#2)]  \n  \n## UseAspNetRoles  \n The UseAspNetRoles value is used for all credential types. This mode enables [!INCLUDE[indigo1](~/includes/indigo1-md.md)] to use the ASP.NET role provider to make authorization decisions.  \n  \n When the credential for a service is an X.509 certificate, you can set the `Name` property of the <xref:System.Security.Permissions.PrincipalPermissionAttribute> to a string that consists of the concatenated values of the Subject field and the Thumbprint field, as shown in the following example.  \n  \n [!code-csharp[PrincipalPermissionMode#3](~/samples/snippets/csharp/VS_Snippets_CFX/principalpermissionmode/cs/source.cs#3)]\n [!code-vb[PrincipalPermissionMode#3](~/samples/snippets/visualbasic/VS_Snippets_CFX/principalpermissionmode/vb/source.vb#3)]  \n  \n The concatenated string consists of the subject and thumbprint values separated by a semicolon and a space.  \n  \n It is also possible for a certificate to have a Subject field set to a null string. In that case, you can set the `Name` property to a semicolon followed by a space and then the thumbprint, as shown in the following example.  \n  \n [!code-csharp[PrincipalPermissionMode#4](~/samples/snippets/csharp/VS_Snippets_CFX/principalpermissionmode/cs/source.cs#4)]\n [!code-vb[PrincipalPermissionMode#4](~/samples/snippets/visualbasic/VS_Snippets_CFX/principalpermissionmode/vb/source.vb#4)]  \n  \n If an ASP.NET role provider is present, you can also set the <xref:System.Security.Permissions.PrincipalPermissionAttribute.Role%2A> property to a role in the database. By default, the database is represented by the <xref:System.Web.Security.SqlRoleProvider>. You can also set a custom role provider with the <xref:System.ServiceModel.Description.ServiceAuthorizationBehavior.RoleProvider%2A> property of the <xref:System.ServiceModel.Description.ServiceAuthorizationBehavior> class. The following code sets the role to `Administrators`. Note that the role provider must map the user account to that role.  \n  \n [!code-csharp[PrincipalPermissionMode#13](~/samples/snippets/csharp/VS_Snippets_CFX/principalpermissionmode/cs/source.cs#13)]\n [!code-vb[PrincipalPermissionMode#13](~/samples/snippets/visualbasic/VS_Snippets_CFX/principalpermissionmode/vb/source.vb#13)]  \n  \n [!INCLUDE[crabout](~/includes/crabout-md.md)] the ASP.NET Role provider, see [How To: Use Role Manager in ASP.NET 2.0](http://go.microsoft.com/fwlink/?LinkId=96692).  \n  \n [!INCLUDE[crabout](~/includes/crabout-md.md)] using [!INCLUDE[indigo2](~/includes/indigo2-md.md)] and the role provider, see [How to: Use the ASP.NET Role Provider with a Service](~/docs/framework/wcf/feature-details/how-to-use-the-aspnet-role-provider-with-a-service.md).  \n  \n## Custom  \n When the property is set to Custom, you must also provide a custom class that implements the <xref:System.IdentityModel.Policy.IAuthorizationPolicy> class. This class is responsible for providing the caller's `IPrincipal` representation inside the <xref:System.IdentityModel.Policy.EvaluationContext.Properties%2A> collection. It must store the `IPrincipal` instance to the properties collection using the \"Principal\" string key, as shown in the following example.  \n  \n```  \nevaluationContext.Properties[\"Principal\"]=new CustomPrincipal(identity);  \n```  \n  \n## Background  \n The role-based security in [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] enables applications to specify authorizations through code. By specifying the <xref:System.Security.Permissions.PrincipalPermission> demand, the <xref:System.Threading.Thread.CurrentPrincipal%2A> must satisfy the `PrincipalPermission` requirement. For example, that the user must be in a specific role or group. Otherwise, the thread is not authorized to execute the code, which results in an exception. [!INCLUDE[indigo2](~/includes/indigo2-md.md)] provides a set of <xref:System.ServiceModel.Description.PrincipalPermissionMode> selections to specify the <xref:System.Threading.Thread.CurrentPrincipal%2A> based on <xref:System.Security.SecurityContext> accordingly.","nodes":[{"pos":[0,299],"content":"When applying the <xref:System.Security.Permissions.PrincipalPermissionAttribute> to a method, this mode specifies which set of roles to use when authorizing access. By default, the attribute uses Windows groups (such as `Administrator` or `Users`) to specify the role to which the user must belong.","nodes":[{"content":"When applying the <ph id=\"ph1\">&lt;xref:System.Security.Permissions.PrincipalPermissionAttribute&gt;</ph> to a method, this mode specifies which set of roles to use when authorizing access.","pos":[0,165],"source":"When applying the <xref:System.Security.Permissions.PrincipalPermissionAttribute> to a method, this mode specifies which set of roles to use when authorizing access."},{"content":"By default, the attribute uses Windows groups (such as <ph id=\"ph1\">`Administrator`</ph> or <ph id=\"ph2\">`Users`</ph>) to specify the role to which the user must belong.","pos":[166,299],"source":" By default, the attribute uses Windows groups (such as `Administrator` or `Users`) to specify the role to which the user must belong."}]},{"pos":[306,698],"content":"To set the mode programmatically, create an instance of the `ServiceHost` class, then find the <xref:System.ServiceModel.Description.ServiceAuthorizationBehavior> in its collection of behaviors, and set the <xref:System.ServiceModel.Description.ServiceAuthorizationBehavior.PrincipalPermissionMode%2A> to the appropriate enumeration. The following example sets the property to UseAspNetRoles.","nodes":[{"content":"To set the mode programmatically, create an instance of the <ph id=\"ph1\">`ServiceHost`</ph> class, then find the <ph id=\"ph2\">&lt;xref:System.ServiceModel.Description.ServiceAuthorizationBehavior&gt;</ph> in its collection of behaviors, and set the <ph id=\"ph3\">&lt;xref:System.ServiceModel.Description.ServiceAuthorizationBehavior.PrincipalPermissionMode%2A&gt;</ph> to the appropriate enumeration.","pos":[0,333],"source":"To set the mode programmatically, create an instance of the `ServiceHost` class, then find the <xref:System.ServiceModel.Description.ServiceAuthorizationBehavior> in its collection of behaviors, and set the <xref:System.ServiceModel.Description.ServiceAuthorizationBehavior.PrincipalPermissionMode%2A> to the appropriate enumeration."},{"content":"The following example sets the property to UseAspNetRoles.","pos":[334,392]}]},{"pos":[705,954],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>PrincipalPermissionMode#1<ept id=\"p2\">](~/samples/snippets/csharp/VS_Snippets_CFX/principalpermissionmode/cs/source.cs#1)</ept><ept id=\"p1\">]</ept> <bpt id=\"p3\">[!code-vb</bpt><bpt id=\"p4\">[</bpt>PrincipalPermissionMode#1<ept id=\"p4\">](~/samples/snippets/visualbasic/VS_Snippets_CFX/principalpermissionmode/vb/source.vb#1)</ept><ept id=\"p3\">]</ept>","source":"[!code-csharp[PrincipalPermissionMode#1](~/samples/snippets/csharp/VS_Snippets_CFX/principalpermissionmode/cs/source.cs#1)]\n [!code-vb[PrincipalPermissionMode#1](~/samples/snippets/visualbasic/VS_Snippets_CFX/principalpermissionmode/vb/source.vb#1)]"},{"pos":[961,1295],"content":"You can also set the behavior in configuration by adding a <bpt id=\"p1\">[</bpt><ph id=\"ph1\">\\&amp;</ph>lt;serviceAuthorization<ph id=\"ph2\">\\&amp;</ph>gt;<ept id=\"p1\">](~/docs/framework/configure-apps/file-schema/wcf/serviceauthorization-element.md)</ept> to the <bpt id=\"p2\">[</bpt><ph id=\"ph3\">\\&amp;</ph>lt;serviceBehaviors<ph id=\"ph4\">\\&amp;</ph>gt;<ept id=\"p2\">](~/docs/framework/configure-apps/file-schema/wcf/servicebehaviors.md)</ept> of a configuration file, as shown in the following code.","source":"You can also set the behavior in configuration by adding a [\\&lt;serviceAuthorization\\&gt;](~/docs/framework/configure-apps/file-schema/wcf/serviceauthorization-element.md) to the [\\&lt;serviceBehaviors\\&gt;](~/docs/framework/configure-apps/file-schema/wcf/servicebehaviors.md) of a configuration file, as shown in the following code."},{"pos":[1302,1555],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>PrincipalPermissionMode#10<ept id=\"p2\">](~/samples/snippets/csharp/VS_Snippets_CFX/principalpermissionmode/cs/source.cs#10)</ept><ept id=\"p1\">]</ept> <bpt id=\"p3\">[!code-vb</bpt><bpt id=\"p4\">[</bpt>PrincipalPermissionMode#10<ept id=\"p4\">](~/samples/snippets/visualbasic/VS_Snippets_CFX/principalpermissionmode/vb/source.vb#10)</ept><ept id=\"p3\">]</ept>","source":"[!code-csharp[PrincipalPermissionMode#10](~/samples/snippets/csharp/VS_Snippets_CFX/principalpermissionmode/cs/source.cs#10)]\n [!code-vb[PrincipalPermissionMode#10](~/samples/snippets/visualbasic/VS_Snippets_CFX/principalpermissionmode/vb/source.vb#10)]"},{"pos":[1562,2018],"content":"The enumeration affects how the <xref:System.Security.Permissions.PrincipalPermissionAttribute> attribute authorizes a user when it is applied to a method. The following example applies the attribute to a method and demands that the user belong to the Users group on the computer. This code works only when the <xref:System.ServiceModel.Description.ServiceAuthorizationBehavior.PrincipalPermissionMode%2A> is set to `UseWindowsGroup` (the default setting).","nodes":[{"content":"The enumeration affects how the <ph id=\"ph1\">&lt;xref:System.Security.Permissions.PrincipalPermissionAttribute&gt;</ph> attribute authorizes a user when it is applied to a method.","pos":[0,155],"source":"The enumeration affects how the <xref:System.Security.Permissions.PrincipalPermissionAttribute> attribute authorizes a user when it is applied to a method."},{"content":"The following example applies the attribute to a method and demands that the user belong to the Users group on the computer.","pos":[156,280]},{"content":"This code works only when the <ph id=\"ph1\">&lt;xref:System.ServiceModel.Description.ServiceAuthorizationBehavior.PrincipalPermissionMode%2A&gt;</ph> is set to <ph id=\"ph2\">`UseWindowsGroup`</ph> (the default setting).","pos":[281,456],"source":" This code works only when the <xref:System.ServiceModel.Description.ServiceAuthorizationBehavior.PrincipalPermissionMode%2A> is set to `UseWindowsGroup` (the default setting)."}]},{"pos":[2025,2274],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>PrincipalPermissionMode#2<ept id=\"p2\">](~/samples/snippets/csharp/VS_Snippets_CFX/principalpermissionmode/cs/source.cs#2)</ept><ept id=\"p1\">]</ept> <bpt id=\"p3\">[!code-vb</bpt><bpt id=\"p4\">[</bpt>PrincipalPermissionMode#2<ept id=\"p4\">](~/samples/snippets/visualbasic/VS_Snippets_CFX/principalpermissionmode/vb/source.vb#2)</ept><ept id=\"p3\">]</ept>","source":"[!code-csharp[PrincipalPermissionMode#2](~/samples/snippets/csharp/VS_Snippets_CFX/principalpermissionmode/cs/source.cs#2)]\n [!code-vb[PrincipalPermissionMode#2](~/samples/snippets/visualbasic/VS_Snippets_CFX/principalpermissionmode/vb/source.vb#2)]"},{"pos":[2283,2297],"content":"UseAspNetRoles","linkify":"UseAspNetRoles","nodes":[{"content":"UseAspNetRoles","pos":[0,14]}]},{"pos":[2301,2489],"content":"The UseAspNetRoles value is used for all credential types. This mode enables [!INCLUDE[indigo1](~/includes/indigo1-md.md)] to use the ASP.NET role provider to make authorization decisions.","nodes":[{"content":"The UseAspNetRoles value is used for all credential types.","pos":[0,58]},{"content":"This mode enables <ph id=\"ph1\">[!INCLUDE[indigo1](~/includes/indigo1-md.md)]</ph> to use the ASP.NET role provider to make authorization decisions.","pos":[59,188],"source":" This mode enables [!INCLUDE[indigo1](~/includes/indigo1-md.md)] to use the ASP.NET role provider to make authorization decisions."}]},{"pos":[2496,2792],"content":"When the credential for a service is an X.509 certificate, you can set the <ph id=\"ph1\">`Name`</ph> property of the <ph id=\"ph2\">&lt;xref:System.Security.Permissions.PrincipalPermissionAttribute&gt;</ph> to a string that consists of the concatenated values of the Subject field and the Thumbprint field, as shown in the following example.","source":"When the credential for a service is an X.509 certificate, you can set the `Name` property of the <xref:System.Security.Permissions.PrincipalPermissionAttribute> to a string that consists of the concatenated values of the Subject field and the Thumbprint field, as shown in the following example."},{"pos":[2799,3048],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>PrincipalPermissionMode#3<ept id=\"p2\">](~/samples/snippets/csharp/VS_Snippets_CFX/principalpermissionmode/cs/source.cs#3)</ept><ept id=\"p1\">]</ept> <bpt id=\"p3\">[!code-vb</bpt><bpt id=\"p4\">[</bpt>PrincipalPermissionMode#3<ept id=\"p4\">](~/samples/snippets/visualbasic/VS_Snippets_CFX/principalpermissionmode/vb/source.vb#3)</ept><ept id=\"p3\">]</ept>","source":"[!code-csharp[PrincipalPermissionMode#3](~/samples/snippets/csharp/VS_Snippets_CFX/principalpermissionmode/cs/source.cs#3)]\n [!code-vb[PrincipalPermissionMode#3](~/samples/snippets/visualbasic/VS_Snippets_CFX/principalpermissionmode/vb/source.vb#3)]"},{"pos":[3055,3162],"content":"The concatenated string consists of the subject and thumbprint values separated by a semicolon and a space.","nodes":[{"content":"The concatenated string consists of the subject and thumbprint values separated by a semicolon and a space.","pos":[0,107]}]},{"pos":[3169,3393],"content":"It is also possible for a certificate to have a Subject field set to a null string. In that case, you can set the `Name` property to a semicolon followed by a space and then the thumbprint, as shown in the following example.","nodes":[{"content":"It is also possible for a certificate to have a Subject field set to a null string.","pos":[0,83]},{"content":"In that case, you can set the <ph id=\"ph1\">`Name`</ph> property to a semicolon followed by a space and then the thumbprint, as shown in the following example.","pos":[84,224],"source":" In that case, you can set the `Name` property to a semicolon followed by a space and then the thumbprint, as shown in the following example."}]},{"pos":[3400,3649],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>PrincipalPermissionMode#4<ept id=\"p2\">](~/samples/snippets/csharp/VS_Snippets_CFX/principalpermissionmode/cs/source.cs#4)</ept><ept id=\"p1\">]</ept> <bpt id=\"p3\">[!code-vb</bpt><bpt id=\"p4\">[</bpt>PrincipalPermissionMode#4<ept id=\"p4\">](~/samples/snippets/visualbasic/VS_Snippets_CFX/principalpermissionmode/vb/source.vb#4)</ept><ept id=\"p3\">]</ept>","source":"[!code-csharp[PrincipalPermissionMode#4](~/samples/snippets/csharp/VS_Snippets_CFX/principalpermissionmode/cs/source.cs#4)]\n [!code-vb[PrincipalPermissionMode#4](~/samples/snippets/visualbasic/VS_Snippets_CFX/principalpermissionmode/vb/source.vb#4)]"},{"pos":[3656,4261],"content":"If an ASP.NET role provider is present, you can also set the <xref:System.Security.Permissions.PrincipalPermissionAttribute.Role%2A> property to a role in the database. By default, the database is represented by the <xref:System.Web.Security.SqlRoleProvider>. You can also set a custom role provider with the <xref:System.ServiceModel.Description.ServiceAuthorizationBehavior.RoleProvider%2A> property of the <xref:System.ServiceModel.Description.ServiceAuthorizationBehavior> class. The following code sets the role to `Administrators`. Note that the role provider must map the user account to that role.","nodes":[{"content":"If an ASP.NET role provider is present, you can also set the <ph id=\"ph1\">&lt;xref:System.Security.Permissions.PrincipalPermissionAttribute.Role%2A&gt;</ph> property to a role in the database.","pos":[0,168],"source":"If an ASP.NET role provider is present, you can also set the <xref:System.Security.Permissions.PrincipalPermissionAttribute.Role%2A> property to a role in the database."},{"content":"By default, the database is represented by the <ph id=\"ph1\">&lt;xref:System.Web.Security.SqlRoleProvider&gt;</ph>.","pos":[169,259],"source":" By default, the database is represented by the <xref:System.Web.Security.SqlRoleProvider>."},{"content":"You can also set a custom role provider with the <ph id=\"ph1\">&lt;xref:System.ServiceModel.Description.ServiceAuthorizationBehavior.RoleProvider%2A&gt;</ph> property of the <ph id=\"ph2\">&lt;xref:System.ServiceModel.Description.ServiceAuthorizationBehavior&gt;</ph> class.","pos":[260,483],"source":" You can also set a custom role provider with the <xref:System.ServiceModel.Description.ServiceAuthorizationBehavior.RoleProvider%2A> property of the <xref:System.ServiceModel.Description.ServiceAuthorizationBehavior> class."},{"content":"The following code sets the role to <ph id=\"ph1\">`Administrators`</ph>.","pos":[484,537],"source":" The following code sets the role to `Administrators`."},{"content":"Note that the role provider must map the user account to that role.","pos":[538,605]}]},{"pos":[4268,4521],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>PrincipalPermissionMode#13<ept id=\"p2\">](~/samples/snippets/csharp/VS_Snippets_CFX/principalpermissionmode/cs/source.cs#13)</ept><ept id=\"p1\">]</ept> <bpt id=\"p3\">[!code-vb</bpt><bpt id=\"p4\">[</bpt>PrincipalPermissionMode#13<ept id=\"p4\">](~/samples/snippets/visualbasic/VS_Snippets_CFX/principalpermissionmode/vb/source.vb#13)</ept><ept id=\"p3\">]</ept>","source":"[!code-csharp[PrincipalPermissionMode#13](~/samples/snippets/csharp/VS_Snippets_CFX/principalpermissionmode/cs/source.cs#13)]\n [!code-vb[PrincipalPermissionMode#13](~/samples/snippets/visualbasic/VS_Snippets_CFX/principalpermissionmode/vb/source.vb#13)]"},{"pos":[4528,4693],"content":"<ph id=\"ph1\">[!INCLUDE[crabout](~/includes/crabout-md.md)]</ph> the ASP.NET Role provider, see <bpt id=\"p1\">[</bpt>How To: Use Role Manager in ASP.NET 2.0<ept id=\"p1\">](http://go.microsoft.com/fwlink/?LinkId=96692)</ept>.","source":"[!INCLUDE[crabout](~/includes/crabout-md.md)] the ASP.NET Role provider, see [How To: Use Role Manager in ASP.NET 2.0](http://go.microsoft.com/fwlink/?LinkId=96692)."},{"pos":[4700,4972],"content":"<ph id=\"ph1\">[!INCLUDE[crabout](~/includes/crabout-md.md)]</ph> using <ph id=\"ph2\">[!INCLUDE[indigo2](~/includes/indigo2-md.md)]</ph> and the role provider, see <bpt id=\"p1\">[</bpt>How to: Use the ASP.NET Role Provider with a Service<ept id=\"p1\">](~/docs/framework/wcf/feature-details/how-to-use-the-aspnet-role-provider-with-a-service.md)</ept>.","source":"[!INCLUDE[crabout](~/includes/crabout-md.md)] using [!INCLUDE[indigo2](~/includes/indigo2-md.md)] and the role provider, see [How to: Use the ASP.NET Role Provider with a Service](~/docs/framework/wcf/feature-details/how-to-use-the-aspnet-role-provider-with-a-service.md)."},{"pos":[4981,4987],"content":"Custom","linkify":"Custom","nodes":[{"content":"Custom","pos":[0,6]}]},{"pos":[4991,5455],"content":"When the property is set to Custom, you must also provide a custom class that implements the <xref:System.IdentityModel.Policy.IAuthorizationPolicy> class. This class is responsible for providing the caller's `IPrincipal` representation inside the <xref:System.IdentityModel.Policy.EvaluationContext.Properties%2A> collection. It must store the `IPrincipal` instance to the properties collection using the \"Principal\" string key, as shown in the following example.","nodes":[{"content":"When the property is set to Custom, you must also provide a custom class that implements the <ph id=\"ph1\">&lt;xref:System.IdentityModel.Policy.IAuthorizationPolicy&gt;</ph> class.","pos":[0,155],"source":"When the property is set to Custom, you must also provide a custom class that implements the <xref:System.IdentityModel.Policy.IAuthorizationPolicy> class."},{"content":"This class is responsible for providing the caller's <ph id=\"ph1\">`IPrincipal`</ph> representation inside the <ph id=\"ph2\">&lt;xref:System.IdentityModel.Policy.EvaluationContext.Properties%2A&gt;</ph> collection.","pos":[156,326],"source":" This class is responsible for providing the caller's `IPrincipal` representation inside the <xref:System.IdentityModel.Policy.EvaluationContext.Properties%2A> collection."},{"content":"It must store the <ph id=\"ph1\">`IPrincipal`</ph> instance to the properties collection using the \"Principal\" string key, as shown in the following example.","pos":[327,464],"source":" It must store the `IPrincipal` instance to the properties collection using the \"Principal\" string key, as shown in the following example."}]},{"pos":[5554,5564],"content":"Background","linkify":"Background","nodes":[{"content":"Background","pos":[0,10]}]},{"pos":[5568,6318],"content":"The role-based security in [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] enables applications to specify authorizations through code. By specifying the <xref:System.Security.Permissions.PrincipalPermission> demand, the <xref:System.Threading.Thread.CurrentPrincipal%2A> must satisfy the `PrincipalPermission` requirement. For example, that the user must be in a specific role or group. Otherwise, the thread is not authorized to execute the code, which results in an exception. [!INCLUDE[indigo2](~/includes/indigo2-md.md)] provides a set of <xref:System.ServiceModel.Description.PrincipalPermissionMode> selections to specify the <xref:System.Threading.Thread.CurrentPrincipal%2A> based on <xref:System.Security.SecurityContext> accordingly.","nodes":[{"content":"The role-based security in <ph id=\"ph1\">[!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)]</ph> enables applications to specify authorizations through code.","pos":[0,141],"source":"The role-based security in [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] enables applications to specify authorizations through code."},{"content":"By specifying the <ph id=\"ph1\">&lt;xref:System.Security.Permissions.PrincipalPermission&gt;</ph> demand, the <ph id=\"ph2\">&lt;xref:System.Threading.Thread.CurrentPrincipal%2A&gt;</ph> must satisfy the <ph id=\"ph3\">`PrincipalPermission`</ph> requirement.","pos":[142,329],"source":" By specifying the <xref:System.Security.Permissions.PrincipalPermission> demand, the <xref:System.Threading.Thread.CurrentPrincipal%2A> must satisfy the `PrincipalPermission` requirement."},{"content":"For example, that the user must be in a specific role or group.","pos":[330,393]},{"content":"Otherwise, the thread is not authorized to execute the code, which results in an exception.","pos":[394,485]},{"content":"<ph id=\"ph1\">[!INCLUDE[indigo2](~/includes/indigo2-md.md)]</ph> provides a set of <ph id=\"ph2\">&lt;xref:System.ServiceModel.Description.PrincipalPermissionMode&gt;</ph> selections to specify the <ph id=\"ph3\">&lt;xref:System.Threading.Thread.CurrentPrincipal%2A&gt;</ph> based on <ph id=\"ph4\">&lt;xref:System.Security.SecurityContext&gt;</ph> accordingly.","pos":[486,750],"source":"[!INCLUDE[indigo2](~/includes/indigo2-md.md)] provides a set of <xref:System.ServiceModel.Description.PrincipalPermissionMode> selections to specify the <xref:System.Threading.Thread.CurrentPrincipal%2A> based on <xref:System.Security.SecurityContext> accordingly."}]}],"pos":[1004,7382],"yaml":true,"extradata":"MT"},{"content":"Always enables the user to specify a <xref href=\"System.Security.Principal.IPrincipal\"></xref> class for <xref href=\"System.Threading.Thread.CurrentPrincipal\"></xref>.","nodes":[{"pos":[0,167],"content":"Always enables the user to specify a <ph id=\"ph1\">&lt;xref href=\"System.Security.Principal.IPrincipal\"&gt;&lt;/xref&gt;</ph> class for <ph id=\"ph2\">&lt;xref href=\"System.Threading.Thread.CurrentPrincipal\"&gt;&lt;/xref&gt;</ph>.","source":"Always enables the user to specify a <xref href=\"System.Security.Principal.IPrincipal\"></xref> class for <xref href=\"System.Threading.Thread.CurrentPrincipal\"></xref>."}],"pos":[9299,9467],"yaml":true},{"content":"Enables the user to specify a custom <xref href=\"System.Security.Principal.IPrincipal\"></xref> class for <xref href=\"System.Threading.Thread.CurrentPrincipal\"></xref>.","nodes":[{"pos":[0,167],"content":"Enables the user to specify a custom <ph id=\"ph1\">&lt;xref href=\"System.Security.Principal.IPrincipal\"&gt;&lt;/xref&gt;</ph> class for <ph id=\"ph2\">&lt;xref href=\"System.Threading.Thread.CurrentPrincipal\"&gt;&lt;/xref&gt;</ph>.","source":"Enables the user to specify a custom <xref href=\"System.Security.Principal.IPrincipal\"></xref> class for <xref href=\"System.Threading.Thread.CurrentPrincipal\"></xref>."}],"pos":[10535,10703],"yaml":true},{"content":"<xref href=\"System.Threading.Thread.CurrentPrincipal\"></xref> is not set.","nodes":[{"pos":[0,73],"content":"<ph id=\"ph1\">&lt;xref href=\"System.Threading.Thread.CurrentPrincipal\"&gt;&lt;/xref&gt;</ph> is not set.","source":"<xref href=\"System.Threading.Thread.CurrentPrincipal\"></xref> is not set."}],"pos":[11883,11957],"yaml":true},{"content":"<xref href=\"System.Threading.Thread.CurrentPrincipal\"></xref> is set based on the [!INCLUDE[vstecasp](~/includes/vstecasp-md.md)] role provider (<xref href=\"System.Web.Security.RoleProvider\"></xref>).","nodes":[{"pos":[0,200],"content":"<ph id=\"ph1\">&lt;xref href=\"System.Threading.Thread.CurrentPrincipal\"&gt;&lt;/xref&gt;</ph> is set based on the <ph id=\"ph2\">[!INCLUDE[vstecasp](~/includes/vstecasp-md.md)]</ph> role provider (<ph id=\"ph3\">&lt;xref href=\"System.Web.Security.RoleProvider\"&gt;&lt;/xref&gt;</ph>).","source":"<xref href=\"System.Threading.Thread.CurrentPrincipal\"></xref> is set based on the [!INCLUDE[vstecasp](~/includes/vstecasp-md.md)] role provider (<xref href=\"System.Web.Security.RoleProvider\"></xref>)."}],"pos":[13195,13396],"yaml":true},{"content":"<xref href=\"System.Threading.Thread.CurrentPrincipal\"></xref> is set based on Windows (<xref href=\"System.Security.Principal.WindowsPrincipal\"></xref>). If the user identity is not associated with a Windows account, anonymous Windows is used.","nodes":[{"pos":[0,242],"content":"<xref href=\"System.Threading.Thread.CurrentPrincipal\"></xref> is set based on Windows (<xref href=\"System.Security.Principal.WindowsPrincipal\"></xref>). If the user identity is not associated with a Windows account, anonymous Windows is used.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref href=\"System.Threading.Thread.CurrentPrincipal\"&gt;&lt;/xref&gt;</ph> is set based on Windows (<ph id=\"ph2\">&lt;xref href=\"System.Security.Principal.WindowsPrincipal\"&gt;&lt;/xref&gt;</ph>).","pos":[0,152],"source":"<xref href=\"System.Threading.Thread.CurrentPrincipal\"></xref> is set based on Windows (<xref href=\"System.Security.Principal.WindowsPrincipal\"></xref>)."},{"content":"If the user identity is not associated with a Windows account, anonymous Windows is used.","pos":[153,242]}]}],"pos":[14656,14899],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.ServiceModel.Description.PrincipalPermissionMode\n  commentId: T:System.ServiceModel.Description.PrincipalPermissionMode\n  id: PrincipalPermissionMode\n  children:\n  - System.ServiceModel.Description.PrincipalPermissionMode.Always\n  - System.ServiceModel.Description.PrincipalPermissionMode.Custom\n  - System.ServiceModel.Description.PrincipalPermissionMode.None\n  - System.ServiceModel.Description.PrincipalPermissionMode.UseAspNetRoles\n  - System.ServiceModel.Description.PrincipalPermissionMode.UseWindowsGroups\n  langs:\n  - csharp\n  name: PrincipalPermissionMode\n  nameWithType: PrincipalPermissionMode\n  fullName: System.ServiceModel.Description.PrincipalPermissionMode\n  type: Enum\n  assemblies:\n  - System.ServiceModel\n  namespace: System.ServiceModel.Description\n  summary: Sets the mode for authorization checks when using the <xref href=\"System.Security.Permissions.PrincipalPermissionAttribute\"></xref> to control access to a method.\n  remarks: \"When applying the <xref:System.Security.Permissions.PrincipalPermissionAttribute> to a method, this mode specifies which set of roles to use when authorizing access. By default, the attribute uses Windows groups (such as `Administrator` or `Users`) to specify the role to which the user must belong.  \\n  \\n To set the mode programmatically, create an instance of the `ServiceHost` class, then find the <xref:System.ServiceModel.Description.ServiceAuthorizationBehavior> in its collection of behaviors, and set the <xref:System.ServiceModel.Description.ServiceAuthorizationBehavior.PrincipalPermissionMode%2A> to the appropriate enumeration. The following example sets the property to UseAspNetRoles.  \\n  \\n [!code-csharp[PrincipalPermissionMode#1](~/samples/snippets/csharp/VS_Snippets_CFX/principalpermissionmode/cs/source.cs#1)]\\n [!code-vb[PrincipalPermissionMode#1](~/samples/snippets/visualbasic/VS_Snippets_CFX/principalpermissionmode/vb/source.vb#1)]  \\n  \\n You can also set the behavior in configuration by adding a [\\\\&lt;serviceAuthorization\\\\&gt;](~/docs/framework/configure-apps/file-schema/wcf/serviceauthorization-element.md) to the [\\\\&lt;serviceBehaviors\\\\&gt;](~/docs/framework/configure-apps/file-schema/wcf/servicebehaviors.md) of a configuration file, as shown in the following code.  \\n  \\n [!code-csharp[PrincipalPermissionMode#10](~/samples/snippets/csharp/VS_Snippets_CFX/principalpermissionmode/cs/source.cs#10)]\\n [!code-vb[PrincipalPermissionMode#10](~/samples/snippets/visualbasic/VS_Snippets_CFX/principalpermissionmode/vb/source.vb#10)]  \\n  \\n The enumeration affects how the <xref:System.Security.Permissions.PrincipalPermissionAttribute> attribute authorizes a user when it is applied to a method. The following example applies the attribute to a method and demands that the user belong to the Users group on the computer. This code works only when the <xref:System.ServiceModel.Description.ServiceAuthorizationBehavior.PrincipalPermissionMode%2A> is set to `UseWindowsGroup` (the default setting).  \\n  \\n [!code-csharp[PrincipalPermissionMode#2](~/samples/snippets/csharp/VS_Snippets_CFX/principalpermissionmode/cs/source.cs#2)]\\n [!code-vb[PrincipalPermissionMode#2](~/samples/snippets/visualbasic/VS_Snippets_CFX/principalpermissionmode/vb/source.vb#2)]  \\n  \\n## UseAspNetRoles  \\n The UseAspNetRoles value is used for all credential types. This mode enables [!INCLUDE[indigo1](~/includes/indigo1-md.md)] to use the ASP.NET role provider to make authorization decisions.  \\n  \\n When the credential for a service is an X.509 certificate, you can set the `Name` property of the <xref:System.Security.Permissions.PrincipalPermissionAttribute> to a string that consists of the concatenated values of the Subject field and the Thumbprint field, as shown in the following example.  \\n  \\n [!code-csharp[PrincipalPermissionMode#3](~/samples/snippets/csharp/VS_Snippets_CFX/principalpermissionmode/cs/source.cs#3)]\\n [!code-vb[PrincipalPermissionMode#3](~/samples/snippets/visualbasic/VS_Snippets_CFX/principalpermissionmode/vb/source.vb#3)]  \\n  \\n The concatenated string consists of the subject and thumbprint values separated by a semicolon and a space.  \\n  \\n It is also possible for a certificate to have a Subject field set to a null string. In that case, you can set the `Name` property to a semicolon followed by a space and then the thumbprint, as shown in the following example.  \\n  \\n [!code-csharp[PrincipalPermissionMode#4](~/samples/snippets/csharp/VS_Snippets_CFX/principalpermissionmode/cs/source.cs#4)]\\n [!code-vb[PrincipalPermissionMode#4](~/samples/snippets/visualbasic/VS_Snippets_CFX/principalpermissionmode/vb/source.vb#4)]  \\n  \\n If an ASP.NET role provider is present, you can also set the <xref:System.Security.Permissions.PrincipalPermissionAttribute.Role%2A> property to a role in the database. By default, the database is represented by the <xref:System.Web.Security.SqlRoleProvider>. You can also set a custom role provider with the <xref:System.ServiceModel.Description.ServiceAuthorizationBehavior.RoleProvider%2A> property of the <xref:System.ServiceModel.Description.ServiceAuthorizationBehavior> class. The following code sets the role to `Administrators`. Note that the role provider must map the user account to that role.  \\n  \\n [!code-csharp[PrincipalPermissionMode#13](~/samples/snippets/csharp/VS_Snippets_CFX/principalpermissionmode/cs/source.cs#13)]\\n [!code-vb[PrincipalPermissionMode#13](~/samples/snippets/visualbasic/VS_Snippets_CFX/principalpermissionmode/vb/source.vb#13)]  \\n  \\n [!INCLUDE[crabout](~/includes/crabout-md.md)] the ASP.NET Role provider, see [How To: Use Role Manager in ASP.NET 2.0](http://go.microsoft.com/fwlink/?LinkId=96692).  \\n  \\n [!INCLUDE[crabout](~/includes/crabout-md.md)] using [!INCLUDE[indigo2](~/includes/indigo2-md.md)] and the role provider, see [How to: Use the ASP.NET Role Provider with a Service](~/docs/framework/wcf/feature-details/how-to-use-the-aspnet-role-provider-with-a-service.md).  \\n  \\n## Custom  \\n When the property is set to Custom, you must also provide a custom class that implements the <xref:System.IdentityModel.Policy.IAuthorizationPolicy> class. This class is responsible for providing the caller's `IPrincipal` representation inside the <xref:System.IdentityModel.Policy.EvaluationContext.Properties%2A> collection. It must store the `IPrincipal` instance to the properties collection using the \\\"Principal\\\" string key, as shown in the following example.  \\n  \\n```  \\nevaluationContext.Properties[\\\"Principal\\\"]=new CustomPrincipal(identity);  \\n```  \\n  \\n## Background  \\n The role-based security in [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] enables applications to specify authorizations through code. By specifying the <xref:System.Security.Permissions.PrincipalPermission> demand, the <xref:System.Threading.Thread.CurrentPrincipal%2A> must satisfy the `PrincipalPermission` requirement. For example, that the user must be in a specific role or group. Otherwise, the thread is not authorized to execute the code, which results in an exception. [!INCLUDE[indigo2](~/includes/indigo2-md.md)] provides a set of <xref:System.ServiceModel.Description.PrincipalPermissionMode> selections to specify the <xref:System.Threading.Thread.CurrentPrincipal%2A> based on <xref:System.Security.SecurityContext> accordingly.\"\n  example:\n  - \"The following example shows how to specify UseAspNetRoles.  \\n  \\n [!code-csharp[PrincipalPermissionMode#7](~/samples/snippets/csharp/VS_Snippets_CFX/principalpermissionmode/cs/source.cs#7)]\\n [!code-vb[PrincipalPermissionMode#7](~/samples/snippets/visualbasic/VS_Snippets_CFX/principalpermissionmode/vb/source.vb#7)]  \\n  \\n The following example shows how to specify Custom.  \\n  \\n [!code-csharp[PrincipalPermissionMode#8](~/samples/snippets/csharp/VS_Snippets_CFX/principalpermissionmode/cs/source.cs#8)]\\n [!code-vb[PrincipalPermissionMode#8](~/samples/snippets/visualbasic/VS_Snippets_CFX/principalpermissionmode/vb/source.vb#8)]\"\n  syntax:\n    content: public enum PrincipalPermissionMode\n  inheritance:\n  - System.Object\n  - System.ValueType\n  - System.Enum\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ServiceModel.Description/PrincipalPermissionMode.xml\n  ms.technology:\n  - dotnet-standard\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.ServiceModel.Description.PrincipalPermissionMode.Always\n  commentId: F:System.ServiceModel.Description.PrincipalPermissionMode.Always\n  id: Always\n  parent: System.ServiceModel.Description.PrincipalPermissionMode\n  langs:\n  - csharp\n  name: Always\n  nameWithType: PrincipalPermissionMode.Always\n  fullName: PrincipalPermissionMode.Always\n  type: Field\n  assemblies:\n  - System.ServiceModel\n  namespace: System.ServiceModel.Description\n  summary: Always enables the user to specify a <xref href=\"System.Security.Principal.IPrincipal\"></xref> class for <xref href=\"System.Threading.Thread.CurrentPrincipal\"></xref>.\n  syntax:\n    content: Always\n    return:\n      type: System.ServiceModel.Description.PrincipalPermissionMode\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ServiceModel.Description/PrincipalPermissionMode.xml\n- uid: System.ServiceModel.Description.PrincipalPermissionMode.Custom\n  commentId: F:System.ServiceModel.Description.PrincipalPermissionMode.Custom\n  id: Custom\n  parent: System.ServiceModel.Description.PrincipalPermissionMode\n  langs:\n  - csharp\n  name: Custom\n  nameWithType: PrincipalPermissionMode.Custom\n  fullName: PrincipalPermissionMode.Custom\n  type: Field\n  assemblies:\n  - System.ServiceModel\n  namespace: System.ServiceModel.Description\n  summary: Enables the user to specify a custom <xref href=\"System.Security.Principal.IPrincipal\"></xref> class for <xref href=\"System.Threading.Thread.CurrentPrincipal\"></xref>.\n  syntax:\n    content: Custom\n    return:\n      type: System.ServiceModel.Description.PrincipalPermissionMode\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ServiceModel.Description/PrincipalPermissionMode.xml\n- uid: System.ServiceModel.Description.PrincipalPermissionMode.None\n  commentId: F:System.ServiceModel.Description.PrincipalPermissionMode.None\n  id: None\n  parent: System.ServiceModel.Description.PrincipalPermissionMode\n  langs:\n  - csharp\n  name: None\n  nameWithType: PrincipalPermissionMode.None\n  fullName: PrincipalPermissionMode.None\n  type: Field\n  assemblies:\n  - System.ServiceModel\n  namespace: System.ServiceModel.Description\n  summary: <xref href=\"System.Threading.Thread.CurrentPrincipal\"></xref> is not set.\n  syntax:\n    content: None\n    return:\n      type: System.ServiceModel.Description.PrincipalPermissionMode\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ServiceModel.Description/PrincipalPermissionMode.xml\n- uid: System.ServiceModel.Description.PrincipalPermissionMode.UseAspNetRoles\n  commentId: F:System.ServiceModel.Description.PrincipalPermissionMode.UseAspNetRoles\n  id: UseAspNetRoles\n  parent: System.ServiceModel.Description.PrincipalPermissionMode\n  langs:\n  - csharp\n  name: UseAspNetRoles\n  nameWithType: PrincipalPermissionMode.UseAspNetRoles\n  fullName: PrincipalPermissionMode.UseAspNetRoles\n  type: Field\n  assemblies:\n  - System.ServiceModel\n  namespace: System.ServiceModel.Description\n  summary: <xref href=\"System.Threading.Thread.CurrentPrincipal\"></xref> is set based on the [!INCLUDE[vstecasp](~/includes/vstecasp-md.md)] role provider (<xref href=\"System.Web.Security.RoleProvider\"></xref>).\n  syntax:\n    content: UseAspNetRoles\n    return:\n      type: System.ServiceModel.Description.PrincipalPermissionMode\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ServiceModel.Description/PrincipalPermissionMode.xml\n- uid: System.ServiceModel.Description.PrincipalPermissionMode.UseWindowsGroups\n  commentId: F:System.ServiceModel.Description.PrincipalPermissionMode.UseWindowsGroups\n  id: UseWindowsGroups\n  parent: System.ServiceModel.Description.PrincipalPermissionMode\n  langs:\n  - csharp\n  name: UseWindowsGroups\n  nameWithType: PrincipalPermissionMode.UseWindowsGroups\n  fullName: PrincipalPermissionMode.UseWindowsGroups\n  type: Field\n  assemblies:\n  - System.ServiceModel\n  namespace: System.ServiceModel.Description\n  summary: <xref href=\"System.Threading.Thread.CurrentPrincipal\"></xref> is set based on Windows (<xref href=\"System.Security.Principal.WindowsPrincipal\"></xref>). If the user identity is not associated with a Windows account, anonymous Windows is used.\n  syntax:\n    content: UseWindowsGroups\n    return:\n      type: System.ServiceModel.Description.PrincipalPermissionMode\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ServiceModel.Description/PrincipalPermissionMode.xml\nreferences:\n- uid: System.Enum\n  parent: System\n  isExternal: false\n  name: Enum\n  nameWithType: Enum\n  fullName: System.Enum\n- uid: System.ServiceModel.Description.PrincipalPermissionMode.Always\n  parent: System.ServiceModel.Description.PrincipalPermissionMode\n  isExternal: false\n  name: Always\n  nameWithType: PrincipalPermissionMode.Always\n  fullName: PrincipalPermissionMode.Always\n- uid: System.ServiceModel.Description.PrincipalPermissionMode\n  parent: System.ServiceModel.Description\n  isExternal: false\n  name: PrincipalPermissionMode\n  nameWithType: PrincipalPermissionMode\n  fullName: System.ServiceModel.Description.PrincipalPermissionMode\n- uid: System.ServiceModel.Description.PrincipalPermissionMode.Custom\n  parent: System.ServiceModel.Description.PrincipalPermissionMode\n  isExternal: false\n  name: Custom\n  nameWithType: PrincipalPermissionMode.Custom\n  fullName: PrincipalPermissionMode.Custom\n- uid: System.ServiceModel.Description.PrincipalPermissionMode.None\n  parent: System.ServiceModel.Description.PrincipalPermissionMode\n  isExternal: false\n  name: None\n  nameWithType: PrincipalPermissionMode.None\n  fullName: PrincipalPermissionMode.None\n- uid: System.ServiceModel.Description.PrincipalPermissionMode.UseAspNetRoles\n  parent: System.ServiceModel.Description.PrincipalPermissionMode\n  isExternal: false\n  name: UseAspNetRoles\n  nameWithType: PrincipalPermissionMode.UseAspNetRoles\n  fullName: PrincipalPermissionMode.UseAspNetRoles\n- uid: System.ServiceModel.Description.PrincipalPermissionMode.UseWindowsGroups\n  parent: System.ServiceModel.Description.PrincipalPermissionMode\n  isExternal: false\n  name: UseWindowsGroups\n  nameWithType: PrincipalPermissionMode.UseWindowsGroups\n  fullName: PrincipalPermissionMode.UseWindowsGroups\n"}