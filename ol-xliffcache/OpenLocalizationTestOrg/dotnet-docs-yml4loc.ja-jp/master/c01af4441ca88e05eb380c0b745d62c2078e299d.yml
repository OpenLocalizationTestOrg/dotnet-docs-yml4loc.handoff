### YamlMime:ManagedReference
items:
- uid: System.Text.Encoder
  commentId: T:System.Text.Encoder
  id: Encoder
  children:
  - System.Text.Encoder.#ctor
  - System.Text.Encoder.Convert(System.Char*,System.Int32,System.Byte*,System.Int32,System.Boolean,System.Int32@,System.Int32@,System.Boolean@)
  - System.Text.Encoder.Convert(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32,System.Int32,System.Boolean,System.Int32@,System.Int32@,System.Boolean@)
  - System.Text.Encoder.Fallback
  - System.Text.Encoder.FallbackBuffer
  - System.Text.Encoder.GetByteCount(System.Char*,System.Int32,System.Boolean)
  - System.Text.Encoder.GetByteCount(System.Char[],System.Int32,System.Int32,System.Boolean)
  - System.Text.Encoder.GetBytes(System.Char*,System.Int32,System.Byte*,System.Int32,System.Boolean)
  - System.Text.Encoder.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32,System.Boolean)
  - System.Text.Encoder.Reset
  langs:
  - csharp
  name: Encoder
  nameWithType: Encoder
  fullName: System.Text.Encoder
  type: Class
  assemblies:
  - System.Text.Encoding
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Text
  summary: Converts a set of characters into a sequence of bytes.
  remarks: "To obtain an instance of an implementation of the <xref:System.Text.Encoder> class, the application should use the <xref:System.Text.Encoding.GetEncoder%2A> method of an <xref:System.Text.Encoding> implementation.  \n  \n The <xref:System.Text.Encoder.GetByteCount%2A> method determines how many bytes result in encoding a set of Unicode characters, and the <xref:System.Text.Encoder.GetBytes%2A> method performs the actual encoding. There are several versions of both of these methods available in the <xref:System.Text.Encoder> class. For more information, see <xref:System.Text.Encoding.GetBytes%2A?displayProperty=fullName>.  \n  \n A <xref:System.Text.Encoder> object maintains state information between successive calls to `GetBytes` or <xref:System.Text.Decoder.Convert%2A> methods so that it can correctly encode character sequences that span blocks. The <xref:System.Text.Encoder> also preserves trailing characters at the end of data blocks and uses the trailing characters in the next encoding operation. For example, a data block might end with an unmatched high surrogate, and the matching low surrogate might be in the next data block. Therefore, <xref:System.Text.Encoding.GetDecoder%2A> and <xref:System.Text.Encoding.GetEncoder%2A> are useful for network transmission and file operations, because those operations often deal with blocks of data instead of a complete data stream.  \n  \n> [!NOTE]\n>  When the application is done with a stream of data it should make sure that the state information is flushed by setting the `flush` parameter to `true` in the appropriate method call. If an exception occurs or if the application switches streams, it should call <xref:System.Text.Encoder.Reset%2A> to clear the internal state of the `Encoder` object.  \n  \n## Version Considerations  \n A <xref:System.Text.Decoder> or <xref:System.Text.Encoder> object can be serialized during a conversion operation. The state of the object is retained if it is deserialized in the same version of the .NET Framework, but lost if it is deserialized in another version."
  example:
  - "The following example demonstrates how to convert an array of Unicode characters into blocks of bytes using a specified encoding. For comparison, the array of characters is first encoded using <xref:System.Text.UTF7Encoding>. Next, the array of characters is encoded using an <xref:System.Text.Encoder>.  \n  \n [!code-cpp[System.Text.Encoder Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.Encoder Example/CPP/snippet.cpp#1)]\n [!code-csharp[System.Text.Encoder Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.Encoder Example/CS/snippet.cs#1)]\n [!code-vb[System.Text.Encoder Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.Encoder Example/VB/snippet.vb#1)]"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public abstract class Encoder
  inheritance:
  - System.Object
  implements: []
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  attributes:
  - type: System.Runtime.InteropServices.ComVisibleAttribute
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/Encoder.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Text.Encoder.#ctor
  commentId: M:System.Text.Encoder.#ctor
  id: '#ctor'
  parent: System.Text.Encoder
  langs:
  - csharp
  name: Encoder()
  nameWithType: Encoder.Encoder()
  fullName: Encoder.Encoder()
  type: Constructor
  assemblies:
  - System.Text.Encoding
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Text
  summary: Initializes a new instance of the <xref href="System.Text.Encoder"></xref> class.
  remarks: To obtain an instance of an implementation of this class, the application should use the <xref:System.Text.Encoding.GetEncoder%2A> method of an <xref:System.Text.Encoding> implementation.
  example:
  - "The following example demonstrates two techniques for initializing a new <xref:System.Text.Encoder> instance.  \n  \n [!code-cpp[System.Text.Encoder.ctor Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.Encoder.ctor Example/CPP/ctor.cpp#1)]\n [!code-csharp[System.Text.Encoder.ctor Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.Encoder.ctor Example/CS/ctor.cs#1)]\n [!code-vb[System.Text.Encoder.ctor Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.Encoder.ctor Example/VB/ctor.vb#1)]"
  syntax:
    content: protected Encoder ();
    parameters: []
  overload: System.Text.Encoder.#ctor*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/Encoder.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Text.Encoder.Convert(System.Char*,System.Int32,System.Byte*,System.Int32,System.Boolean,System.Int32@,System.Int32@,System.Boolean@)
  commentId: M:System.Text.Encoder.Convert(System.Char*,System.Int32,System.Byte*,System.Int32,System.Boolean,System.Int32@,System.Int32@,System.Boolean@)
  id: Convert(System.Char*,System.Int32,System.Byte*,System.Int32,System.Boolean,System.Int32@,System.Int32@,System.Boolean@)
  parent: System.Text.Encoder
  langs:
  - csharp
  name: Convert(Char*, Int32, Byte*, Int32, Boolean, Int32, Int32, Boolean)
  nameWithType: Encoder.Convert(Char*, Int32, Byte*, Int32, Boolean, Int32, Int32, Boolean)
  fullName: Encoder.Convert(Char*, Int32, Byte*, Int32, Boolean, Int32, Int32, Boolean)
  type: Method
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Text
  summary: Converts a buffer of Unicode characters to an encoded byte sequence and stores the result in another buffer.
  remarks: "Remember that the <xref:System.Text.Encoder> object saves state between calls to <xref:System.Text.Encoder.Convert%2A>. When the application is done with a stream of data, it should set the `flush` parameter to `true` to make sure that the state information is flushed. With this setting, the encoder ignores invalid bytes at the end of the data block and clears the internal buffer. Any remaining processed data that is part of a logical unit, such as the high surrogate of a surrogate pair, is converted according to the current fallback settings.  \n  \n The `Convert` method is designed to be used in a loop to encode an arbitrary amount of input, such as data read from a file or stream. It stores the output of the encoding operation in a fixed-size buffer. <xref:System.Text.Encoder.GetBytes%2A> will throw an exception if the output buffer isn't large enough, but <xref:System.Text.Encoder.Convert%2A> will fill as much space as possible and return the chars read and bytes written. Also see the <xref:System.Text.Encoding.GetBytes%2A?displayProperty=fullName> topic for more comments.  \n  \n The `completed` output parameter indicates whether all the data in the input buffer was converted and stored in the output buffer. This parameter is set to `false` if the number of characters specified by the `charCount` parameter cannot be converted without exceeding the number of bytes specified by the `byteCount` parameter. In that situation, the application should use the contents of the output buffer or provide a new output buffer, increment the `chars` parameter by the number of characters specified by the `charsUsed` parameter, then call the `Convert` method again to process the remaining input.  \n  \n The `completed` parameter can also be set to `false`, even though the `charsUsed` and `charCount` parameters are equal. This situation occurs if there is still data in the <xref:System.Text.Encoder> object that has not been stored in the `chars` buffer."
  syntax:
    content: >-
      [System.CLSCompliant(false)]

      [System.Runtime.InteropServices.ComVisible(false)]

      [System.Security.SecurityCritical]

      public virtual void Convert (char* chars, int charCount, byte* bytes, int byteCount, bool flush, out int charsUsed, out int bytesUsed, out bool completed);
    parameters:
    - id: chars
      type: System.Char*
      description: The address of a string of UTF-16 encoded characters to convert.
    - id: charCount
      type: System.Int32
      description: The number of characters in <code>chars</code> to convert.
    - id: bytes
      type: System.Byte*
      description: The address of a buffer to store the converted bytes.
    - id: byteCount
      type: System.Int32
      description: The maximum number of bytes in <code>bytes</code> to use in the conversion.
    - id: flush
      type: System.Boolean
      description: '`true` to indicate no further data is to be converted; otherwise, `false`.'
    - id: charsUsed
      type: System.Int32
      description: When this method returns, contains the number of characters from <code>chars</code> that were used in the conversion. This parameter is passed uninitialized.
    - id: bytesUsed
      type: System.Int32
      description: When this method returns, contains the number of bytes that were used in the conversion. This parameter is passed uninitialized.
    - id: completed
      type: System.Boolean
      description: When this method returns, contains `true` if all the characters specified by <code>charCount</code> were converted; otherwise, `false`. This parameter is passed uninitialized.
  overload: System.Text.Encoder.Convert*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>chars</code> or <code>bytes</code> is `null` (`Nothing`).
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: <code>charCount</code> or <code>byteCount</code> is less than zero.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: The output buffer is too small to contain any of the converted input. The output buffer should be greater than or equal to the size indicated by the <xref href="System.Text.Encoder.GetByteCount*"></xref> method.
  - type: System.Text.EncoderFallbackException
    commentId: T:System.Text.EncoderFallbackException
    description: "A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for fuller explanation)  \n  \n -and-  \n  \n <xref href=\"System.Text.Encoder.Fallback\"></xref> is set to <xref href=\"System.Text.EncoderExceptionFallback\"></xref>."
  attributes:
  - type: System.CLSCompliantAttribute
  - type: System.Runtime.InteropServices.ComVisibleAttribute
  - type: System.Security.SecurityCriticalAttribute
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  altCompliant: System.Text.Encoder.Convert(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32,System.Int32,System.Boolean,System.Int32@,System.Int32@,System.Boolean@)
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/Encoder.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Text.Encoder.Convert(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32,System.Int32,System.Boolean,System.Int32@,System.Int32@,System.Boolean@)
  commentId: M:System.Text.Encoder.Convert(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32,System.Int32,System.Boolean,System.Int32@,System.Int32@,System.Boolean@)
  id: Convert(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32,System.Int32,System.Boolean,System.Int32@,System.Int32@,System.Boolean@)
  parent: System.Text.Encoder
  langs:
  - csharp
  name: Convert(Char[], Int32, Int32, Byte[], Int32, Int32, Boolean, Int32, Int32, Boolean)
  nameWithType: Encoder.Convert(Char[], Int32, Int32, Byte[], Int32, Int32, Boolean, Int32, Int32, Boolean)
  fullName: Encoder.Convert(Char[], Int32, Int32, Byte[], Int32, Int32, Boolean, Int32, Int32, Boolean)
  type: Method
  assemblies:
  - System.Text.Encoding
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Text
  summary: Converts an array of Unicode characters to an encoded byte sequence and stores the result in an array of bytes.
  remarks: "Remember that the <xref:System.Text.Encoder> object saves state between calls to <xref:System.Text.Encoder.Convert%2A>. When the application is done with a stream of data, it should set the `flush` parameter to `true` to make sure that the state information is flushed. With this setting, the encoder ignores invalid bytes at the end of the data block and clears the internal buffer. Any remaining processed data that is part of a logical unit, such as the high surrogate of a surrogate pair, is converted according to the current fallback settings.  \n  \n The `Convert` method is designed to be used in a loop to decode an arbitrary amount of input, such as data read from a file or stream. It stores the output of the encoding operation in a fixed-size buffer. <xref:System.Text.Encoder.GetBytes%2A> will throw an exception if the output buffer isn't large enough, but <xref:System.Text.Encoder.Convert%2A> will fill as much space as possible and return the chars read and bytes written. Also see the <xref:System.Text.Encoding.GetBytes%2A?displayProperty=fullName> topic for more comments.  \n  \n The `completed` output parameter indicates whether all the data in the input buffer was converted and stored in the output buffer. This parameter is set to `false` if the number of characters specified by the `charCount` parameter cannot be converted without exceeding the number of bytes specified by the `byteCount` parameter. In that situation, the application should use the contents of the output buffer or provide a new output buffer, increment the `chars` parameter by the number of characters specified by the `charsUsed` parameter, then call the `Convert` method again to process the remaining input.  \n  \n The `completed` parameter can also be set to `false`, even though the `charsUsed` and `charCount` parameters are equal. This situation occurs if there is still data in the <xref:System.Text.Encoder> object that has not been stored in the `chars` buffer."
  example:
  - "The following example uses the <xref:System.Text.Encoder.Convert%2A> method to convert a file of UTF-16 characters to UTF-8, then uses the <xref:System.Text.Decoder.Convert%2A> method to convert the UTF-8 characters back to UTF-16 characters.  \n  \n [!code-csharp[sys.txt.EncoderDecoder.convert#1](~/samples/snippets/csharp/VS_Snippets_CLR/sys.txt.EncoderDecoder.convert/cs/edCvt.cs#1)]\n [!code-vb[sys.txt.EncoderDecoder.convert#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/sys.txt.EncoderDecoder.convert/vb/edCvt.vb#1)]"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(false)]

      public virtual void Convert (char[] chars, int charIndex, int charCount, byte[] bytes, int byteIndex, int byteCount, bool flush, out int charsUsed, out int bytesUsed, out bool completed);
    parameters:
    - id: chars
      type: System.Char[]
      description: An array of characters to convert.
    - id: charIndex
      type: System.Int32
      description: The first element of <code>chars</code> to convert.
    - id: charCount
      type: System.Int32
      description: The number of elements of <code>chars</code> to convert.
    - id: bytes
      type: System.Byte[]
      description: An array where the converted bytes are stored.
    - id: byteIndex
      type: System.Int32
      description: The first element of <code>bytes</code> in which data is stored.
    - id: byteCount
      type: System.Int32
      description: The maximum number of elements of <code>bytes</code> to use in the conversion.
    - id: flush
      type: System.Boolean
      description: '`true` to indicate no further data is to be converted; otherwise, `false`.'
    - id: charsUsed
      type: System.Int32
      description: When this method returns, contains the number of characters from <code>chars</code> that were used in the conversion. This parameter is passed uninitialized.
    - id: bytesUsed
      type: System.Int32
      description: When this method returns, contains the number of bytes that were produced by the conversion. This parameter is passed uninitialized.
    - id: completed
      type: System.Boolean
      description: When this method returns, contains `true` if all the characters specified by <code>charCount</code> were converted; otherwise, `false`. This parameter is passed uninitialized.
  overload: System.Text.Encoder.Convert*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>chars</code> or <code>bytes</code> is `null` (`Nothing`).
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>charIndex</code>, <code>charCount</code>, <code>byteIndex</code>, or <code>byteCount</code> is less than zero.  \n  \n -or-  \n  \n The length of <code>chars</code> - <code>charIndex</code> is less than <code>charCount</code>.  \n  \n -or-  \n  \n The length of <code>bytes</code> - <code>byteIndex</code> is less than <code>byteCount</code>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: The output buffer is too small to contain any of the converted input. The output buffer should be greater than or equal to the size indicated by the <xref href="System.Text.Encoder.GetByteCount*"></xref> method.
  - type: System.Text.EncoderFallbackException
    commentId: T:System.Text.EncoderFallbackException
    description: "A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for fuller explanation)  \n  \n -and-  \n  \n <xref href=\"System.Text.Encoder.Fallback\"></xref> is set to <xref href=\"System.Text.EncoderExceptionFallback\"></xref>."
  attributes:
  - type: System.Runtime.InteropServices.ComVisibleAttribute
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/Encoder.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Text.Encoder.Fallback
  commentId: P:System.Text.Encoder.Fallback
  id: Fallback
  parent: System.Text.Encoder
  langs:
  - csharp
  name: Fallback
  nameWithType: Encoder.Fallback
  fullName: Encoder.Fallback
  type: Property
  assemblies:
  - System.Text.Encoding
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Text
  summary: Gets or sets a <xref href="System.Text.EncoderFallback"></xref> object for the current <xref href="System.Text.Encoder"></xref> object.
  remarks: The <xref:System.Text.EncoderFallback> object represents an error handler that is invoked when a character cannot be converted into an encoded byte sequence.
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(false)]

      public System.Text.EncoderFallback Fallback { get; set; }
    return:
      type: System.Text.EncoderFallback
      description: A <xref href="System.Text.EncoderFallback"></xref> object.
  overload: System.Text.Encoder.Fallback*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The value in a set operation is `null` (`Nothing`).
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: A new value cannot be assigned in a set operation because the current <xref href="System.Text.EncoderFallbackBuffer"></xref> object contains data that has not been encoded yet.
  - type: System.Text.EncoderFallbackException
    commentId: T:System.Text.EncoderFallbackException
    description: "A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for fuller explanation)  \n  \n -and-  \n  \n <xref href=\"System.Text.Encoder.Fallback\"></xref> is set to <xref href=\"System.Text.EncoderExceptionFallback\"></xref>."
  attributes:
  - type: System.Runtime.InteropServices.ComVisibleAttribute
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/Encoder.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Text.Encoder.FallbackBuffer
  commentId: P:System.Text.Encoder.FallbackBuffer
  id: FallbackBuffer
  parent: System.Text.Encoder
  langs:
  - csharp
  name: FallbackBuffer
  nameWithType: Encoder.FallbackBuffer
  fullName: Encoder.FallbackBuffer
  type: Property
  assemblies:
  - System.Text.Encoding
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Text
  summary: Gets the <xref href="System.Text.EncoderFallbackBuffer"></xref> object associated with the current <xref href="System.Text.Encoder"></xref> object.
  remarks: The <xref:System.Text.Encoder.FallbackBuffer%2A> object represents data used by the <xref:System.Text.EncoderFallback> object. The <xref:System.Text.EncoderFallback> object represents an error handler that is invoked when a character cannot be converted into an encoded byte sequence.
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(false)]

      public System.Text.EncoderFallbackBuffer FallbackBuffer { get; }
    return:
      type: System.Text.EncoderFallbackBuffer
      description: A <xref href="System.Text.EncoderFallbackBuffer"></xref> object.
  overload: System.Text.Encoder.FallbackBuffer*
  exceptions: []
  attributes:
  - type: System.Runtime.InteropServices.ComVisibleAttribute
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/Encoder.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Text.Encoder.GetByteCount(System.Char*,System.Int32,System.Boolean)
  commentId: M:System.Text.Encoder.GetByteCount(System.Char*,System.Int32,System.Boolean)
  id: GetByteCount(System.Char*,System.Int32,System.Boolean)
  parent: System.Text.Encoder
  langs:
  - csharp
  name: GetByteCount(Char*, Int32, Boolean)
  nameWithType: Encoder.GetByteCount(Char*, Int32, Boolean)
  fullName: Encoder.GetByteCount(Char*, Int32, Boolean)
  type: Method
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Text
  summary: When overridden in a derived class, calculates the number of bytes produced by encoding a set of characters starting at the specified character pointer. A parameter indicates whether to clear the internal state of the encoder after the calculation.
  remarks: "This method does not affect the state of the encoder.  \n  \n To calculate the exact array size that <xref:System.Text.Encoder.GetBytes%2A> requires to store the resulting bytes, the application should use <xref:System.Text.Encoder.GetByteCount%2A>.  \n  \n If `GetBytes` is called with `flush` set to `false`, the encoder stores trailing characters at the end of the data block in an internal buffer and uses them in the next encoding operation. The application should call `GetByteCount` on a block of data immediately before calling `GetBytes` on the same block, so that any trailing characters from the previous block are included in the calculation."
  syntax:
    content: >-
      [System.CLSCompliant(false)]

      [System.Runtime.InteropServices.ComVisible(false)]

      [System.Security.SecurityCritical]

      public virtual int GetByteCount (char* chars, int count, bool flush);
    parameters:
    - id: chars
      type: System.Char*
      description: A pointer to the first character to encode.
    - id: count
      type: System.Int32
      description: The number of characters to encode.
    - id: flush
      type: System.Boolean
      description: '`true` to simulate clearing the internal state of the encoder after the calculation; otherwise, `false`.'
    return:
      type: System.Int32
      description: The number of bytes produced by encoding the specified characters and any characters in the internal buffer.
  overload: System.Text.Encoder.GetByteCount*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>chars</code> is `null` (`Nothing` in Visual Basic .NET).
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: <code>count</code> is less than zero.
  - type: System.Text.EncoderFallbackException
    commentId: T:System.Text.EncoderFallbackException
    description: "A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for fuller explanation)  \n  \n -and-  \n  \n <xref href=\"System.Text.Encoder.Fallback\"></xref> is set to <xref href=\"System.Text.EncoderExceptionFallback\"></xref>."
  attributes:
  - type: System.CLSCompliantAttribute
  - type: System.Runtime.InteropServices.ComVisibleAttribute
  - type: System.Security.SecurityCriticalAttribute
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/Encoder.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Text.Encoder.GetByteCount(System.Char[],System.Int32,System.Int32,System.Boolean)
  commentId: M:System.Text.Encoder.GetByteCount(System.Char[],System.Int32,System.Int32,System.Boolean)
  id: GetByteCount(System.Char[],System.Int32,System.Int32,System.Boolean)
  parent: System.Text.Encoder
  langs:
  - csharp
  name: GetByteCount(Char[], Int32, Int32, Boolean)
  nameWithType: Encoder.GetByteCount(Char[], Int32, Int32, Boolean)
  fullName: Encoder.GetByteCount(Char[], Int32, Int32, Boolean)
  type: Method
  assemblies:
  - System.Text.Encoding
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Text
  summary: When overridden in a derived class, calculates the number of bytes produced by encoding a set of characters from the specified character array. A parameter indicates whether to clear the internal state of the encoder after the calculation.
  remarks: "This method does not affect the state of the encoder.  \n  \n To calculate the exact array size that <xref:System.Text.Encoder.GetBytes%2A> requires to store the resulting bytes, the application should use <xref:System.Text.Encoder.GetByteCount%2A>.  \n  \n If `GetBytes` is called with `flush` set to `false`, the encoder stores trailing characters at the end of the data block in an internal buffer and uses them in the next encoding operation. The application should call `GetByteCount` on a block of data immediately before calling `GetBytes` on the same block, so that any trailing characters from the previous block are included in the calculation."
  example:
  - "The following code example demonstrates how to use the <xref:System.Text.Encoder.GetByteCount%2A> method to return the number of bytes required to encode an array of characters using a Unicode <xref:System.Text.Encoder>.  \n  \n [!code-cpp[System.Text.Encoder.GetByteCount Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.Encoder.GetByteCount Example/CPP/getbytecount-char[]-int32-int32.cpp#1)]\n [!code-csharp[System.Text.Encoder.GetByteCount Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.Encoder.GetByteCount Example/CS/getbytecount-char[]-int32-int32.cs#1)]\n [!code-vb[System.Text.Encoder.GetByteCount Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.Encoder.GetByteCount Example/VB/getbytecount-char[]-int32-int32.vb#1)]"
  syntax:
    content: public abstract int GetByteCount (char[] chars, int index, int count, bool flush);
    parameters:
    - id: chars
      type: System.Char[]
      description: The character array containing the set of characters to encode.
    - id: index
      type: System.Int32
      description: The index of the first character to encode.
    - id: count
      type: System.Int32
      description: The number of characters to encode.
    - id: flush
      type: System.Boolean
      description: '`true` to simulate clearing the internal state of the encoder after the calculation; otherwise, `false`.'
    return:
      type: System.Int32
      description: The number of bytes produced by encoding the specified characters and any characters in the internal buffer.
  overload: System.Text.Encoder.GetByteCount*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>chars</code> is `null`.
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>index</code> or <code>count</code> is less than zero.  \n  \n -or-  \n  \n <code>index</code> and <code>count</code> do not denote a valid range in <code>chars</code>."
  - type: System.Text.EncoderFallbackException
    commentId: T:System.Text.EncoderFallbackException
    description: "A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for fuller explanation)  \n  \n -and-  \n  \n <xref href=\"System.Text.Encoder.Fallback\"></xref> is set to <xref href=\"System.Text.EncoderExceptionFallback\"></xref>."
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/Encoder.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Text.Encoder.GetBytes(System.Char*,System.Int32,System.Byte*,System.Int32,System.Boolean)
  commentId: M:System.Text.Encoder.GetBytes(System.Char*,System.Int32,System.Byte*,System.Int32,System.Boolean)
  id: GetBytes(System.Char*,System.Int32,System.Byte*,System.Int32,System.Boolean)
  parent: System.Text.Encoder
  langs:
  - csharp
  name: GetBytes(Char*, Int32, Byte*, Int32, Boolean)
  nameWithType: Encoder.GetBytes(Char*, Int32, Byte*, Int32, Boolean)
  fullName: Encoder.GetBytes(Char*, Int32, Byte*, Int32, Boolean)
  type: Method
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Text
  summary: When overridden in a derived class, encodes a set of characters starting at the specified character pointer and any characters in the internal buffer into a sequence of bytes that are stored starting at the specified byte pointer. A parameter indicates whether to clear the internal state of the encoder after the conversion.
  remarks: "Remember that the <xref:System.Text.Encoder> object saves state between calls to <xref:System.Text.Encoder.GetBytes%2A>. When the application is done with a stream of data, it should set the `flush` parameter to `true` in the last call to `GetBytes` to make sure that the state information is flushed and that the encoded bytes are properly terminated. With this setting, the encoder ignores invalid bytes at the end of the data block, such as unmatched surrogates or incomplete combining sequences, and clears the internal buffer.  \n  \n To calculate the exact buffer size that `GetBytes` requires to store the resulting characters, the application should use <xref:System.Text.Encoder.GetByteCount%2A>.  \n  \n If `GetBytes` is called with `flush` set to `false`, the encoder stores trailing bytes at the end of the data block in an internal buffer and uses them in the next encoding operation. The application should call `GetByteCount` on a block of data immediately before calling `GetBytes` on the same block, so that any trailing characters from the previous block are included in the calculation.  \n  \n If your application is to convert many segments of an input stream, consider using the <xref:System.Text.Encoder.Convert%2A> method. <xref:System.Text.Encoder.GetBytes%2A> will throw an exception if the output buffer isn't large enough, but <xref:System.Text.Encoder.Convert%2A> will fill as much space as possible and return the chars read and bytes written. Also see the <xref:System.Text.Encoding.GetBytes%2A?displayProperty=fullName> topic for more comments."
  syntax:
    content: >-
      [System.CLSCompliant(false)]

      [System.Runtime.InteropServices.ComVisible(false)]

      [System.Security.SecurityCritical]

      public virtual int GetBytes (char* chars, int charCount, byte* bytes, int byteCount, bool flush);
    parameters:
    - id: chars
      type: System.Char*
      description: A pointer to the first character to encode.
    - id: charCount
      type: System.Int32
      description: The number of characters to encode.
    - id: bytes
      type: System.Byte*
      description: A pointer to the location at which to start writing the resulting sequence of bytes.
    - id: byteCount
      type: System.Int32
      description: The maximum number of bytes to write.
    - id: flush
      type: System.Boolean
      description: '`true` to clear the internal state of the encoder after the conversion; otherwise, `false`.'
    return:
      type: System.Int32
      description: The actual number of bytes written at the location indicated by the <code>bytes</code> parameter.
  overload: System.Text.Encoder.GetBytes*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>chars</code> is `null` (`Nothing`).  \n  \n -or-  \n  \n <code>bytes</code> is `null` (`Nothing`)."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: <code>charCount</code> or <code>byteCount</code> is less than zero.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: <code>byteCount</code> is less than the resulting number of bytes.
  - type: System.Text.EncoderFallbackException
    commentId: T:System.Text.EncoderFallbackException
    description: "A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for fuller explanation)  \n  \n -and-  \n  \n <xref href=\"System.Text.Encoder.Fallback\"></xref> is set to <xref href=\"System.Text.EncoderExceptionFallback\"></xref>."
  attributes:
  - type: System.CLSCompliantAttribute
  - type: System.Runtime.InteropServices.ComVisibleAttribute
  - type: System.Security.SecurityCriticalAttribute
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/Encoder.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Text.Encoder.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32,System.Boolean)
  commentId: M:System.Text.Encoder.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32,System.Boolean)
  id: GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32,System.Boolean)
  parent: System.Text.Encoder
  langs:
  - csharp
  name: GetBytes(Char[], Int32, Int32, Byte[], Int32, Boolean)
  nameWithType: Encoder.GetBytes(Char[], Int32, Int32, Byte[], Int32, Boolean)
  fullName: Encoder.GetBytes(Char[], Int32, Int32, Byte[], Int32, Boolean)
  type: Method
  assemblies:
  - System.Text.Encoding
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Text
  summary: When overridden in a derived class, encodes a set of characters from the specified character array and any characters in the internal buffer into the specified byte array. A parameter indicates whether to clear the internal state of the encoder after the conversion.
  remarks: "Remember that the <xref:System.Text.Encoder> object saves state between calls to <xref:System.Text.Encoder.GetBytes%2A>. When the application is done with a stream of data, it should set the `flush` parameter to `true` in the last call to `GetBytes` to make sure that the state information is flushed and that the encoded bytes are properly terminated. With this setting, the encoder ignores invalid bytes at the end of the data block, such as unmatched surrogates or incomplete combining sequences, and clears the internal buffer.  \n  \n To calculate the exact buffer size that `GetBytes` requires to store the resulting characters, the application should use <xref:System.Text.Encoder.GetByteCount%2A>.  \n  \n If `GetBytes` is called with `flush` set to `false`, the encoder stores trailing bytes at the end of the data block in an internal buffer and uses them in the next encoding operation. The application should call `GetByteCount` on a block of data immediately before calling `GetBytes` on the same block, so that any trailing characters from the previous block are included in the calculation.  \n  \n If your application is to convert many segments of an input stream, consider using the <xref:System.Text.Encoder.Convert%2A> method. <xref:System.Text.Encoder.GetBytes%2A> will throw an exception if the output buffer isn't large enough, but <xref:System.Text.Encoder.Convert%2A> will fill as much space as possible and return the chars read and bytes written. Also see the <xref:System.Text.Encoding.GetBytes%2A?displayProperty=fullName> topic for more comments."
  example:
  - "The following example demonstrates how to encode a range of elements from a character array and store the encoded bytes in a range of elements in a byte array. The <xref:System.Text.Encoder.GetByteCount%2A> method is used to determine the size of the array required by <xref:System.Text.Encoder.GetBytes%2A>.  \n  \n [!code-cpp[System.Text.Encoder.GetBytes Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.Encoder.GetBytes Example/CPP/getbytes-char[]-int32-int32-byte[]-int32.cpp#1)]\n [!code-csharp[System.Text.Encoder.GetBytes Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.Encoder.GetBytes Example/CS/getbytes-char[]-int32-int32-byte[]-int32.cs#1)]\n [!code-vb[System.Text.Encoder.GetBytes Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.Encoder.GetBytes Example/VB/getbytes-char[]-int32-int32-byte[]-int32.vb#1)]"
  syntax:
    content: public abstract int GetBytes (char[] chars, int charIndex, int charCount, byte[] bytes, int byteIndex, bool flush);
    parameters:
    - id: chars
      type: System.Char[]
      description: The character array containing the set of characters to encode.
    - id: charIndex
      type: System.Int32
      description: The index of the first character to encode.
    - id: charCount
      type: System.Int32
      description: The number of characters to encode.
    - id: bytes
      type: System.Byte[]
      description: The byte array to contain the resulting sequence of bytes.
    - id: byteIndex
      type: System.Int32
      description: The index at which to start writing the resulting sequence of bytes.
    - id: flush
      type: System.Boolean
      description: '`true` to clear the internal state of the encoder after the conversion; otherwise, `false`.'
    return:
      type: System.Int32
      description: The actual number of bytes written into <code>bytes</code>.
  overload: System.Text.Encoder.GetBytes*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>chars</code> is `null` (`Nothing`).  \n  \n -or-  \n  \n <code>bytes</code> is `null` (`Nothing`)."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>charIndex</code> or <code>charCount</code> or <code>byteIndex</code> is less than zero.  \n  \n -or-  \n  \n <code>charIndex</code> and <code>charCount</code> do not denote a valid range in <code>chars</code>.  \n  \n -or-  \n  \n <code>byteIndex</code> is not a valid index in <code>bytes</code>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: <code>bytes</code> does not have enough capacity from <code>byteIndex</code> to the end of the array to accommodate the resulting bytes.
  - type: System.Text.EncoderFallbackException
    commentId: T:System.Text.EncoderFallbackException
    description: "A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for fuller explanation)  \n  \n -and-  \n  \n <xref href=\"System.Text.Encoder.Fallback\"></xref> is set to <xref href=\"System.Text.EncoderExceptionFallback\"></xref>."
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/Encoder.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Text.Encoder.Reset
  commentId: M:System.Text.Encoder.Reset
  id: Reset
  parent: System.Text.Encoder
  langs:
  - csharp
  name: Reset()
  nameWithType: Encoder.Reset()
  fullName: Encoder.Reset()
  type: Method
  assemblies:
  - System.Text.Encoding
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Text
  summary: When overridden in a derived class, sets the encoder back to its initial state.
  remarks: "This method clears the internal state of the <xref:System.Text.Encoder> object. The method clears any state information preserved from a previous call to <xref:System.Text.Encoder.GetBytes%2A> or <xref:System.Text.Decoder.Convert%2A>, including trailing characters at the end of the previous data block, such as an unmatched high surrogate.  \n  \n Your application should call the `Reset` method if it wants to reuse the same encoder even after an exception is thrown by <xref:System.Text.Encoder.GetBytes%2A> or <xref:System.Text.Encoder.GetByteCount%2A>, or if the application switches streams."
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(false)]

      public virtual void Reset ();
    parameters: []
  overload: System.Text.Encoder.Reset*
  exceptions: []
  attributes:
  - type: System.Runtime.InteropServices.ComVisibleAttribute
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/Encoder.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
references:
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.ArgumentNullException
  parent: System
  isExternal: false
  name: ArgumentNullException
  nameWithType: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: System.ArgumentOutOfRangeException
  parent: System
  isExternal: false
  name: ArgumentOutOfRangeException
  nameWithType: ArgumentOutOfRangeException
  fullName: System.ArgumentOutOfRangeException
- uid: System.ArgumentException
  parent: System
  isExternal: false
  name: ArgumentException
  nameWithType: ArgumentException
  fullName: System.ArgumentException
- uid: System.Text.EncoderFallbackException
  parent: System.Text
  isExternal: false
  name: EncoderFallbackException
  nameWithType: EncoderFallbackException
  fullName: System.Text.EncoderFallbackException
- uid: System.Text.Encoder.#ctor
  parent: System.Text.Encoder
  isExternal: false
  name: Encoder()
  nameWithType: Encoder.Encoder()
  fullName: Encoder.Encoder()
- uid: System.Text.Encoder.Convert(System.Char*,System.Int32,System.Byte*,System.Int32,System.Boolean,System.Int32@,System.Int32@,System.Boolean@)
  parent: System.Text.Encoder
  isExternal: false
  name: Convert(Char*, Int32, Byte*, Int32, Boolean, Int32, Int32, Boolean)
  nameWithType: Encoder.Convert(Char*, Int32, Byte*, Int32, Boolean, Int32, Int32, Boolean)
  fullName: Encoder.Convert(Char*, Int32, Byte*, Int32, Boolean, Int32, Int32, Boolean)
- uid: System.Char
  name: Char
  nameWithType: Char
  fullName: System.Char
- uid: System.Char*
  parent: System
  isExternal: false
  name: Char*
  nameWithType: Char*
  fullName: System.Char*
  spec.csharp:
  - uid: System.Char
    name: Char
    nameWithType: Char
    fullName: System.Char
  - name: '*'
    nameWithType: '*'
    fullName: '*'
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Byte
  name: Byte
  nameWithType: Byte
  fullName: System.Byte
- uid: System.Byte*
  parent: System
  isExternal: false
  name: Byte*
  nameWithType: Byte*
  fullName: System.Byte*
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
  - name: '*'
    nameWithType: '*'
    fullName: '*'
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Text.Encoder.Convert(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32,System.Int32,System.Boolean,System.Int32@,System.Int32@,System.Boolean@)
  parent: System.Text.Encoder
  isExternal: false
  name: Convert(Char[], Int32, Int32, Byte[], Int32, Int32, Boolean, Int32, Int32, Boolean)
  nameWithType: Encoder.Convert(Char[], Int32, Int32, Byte[], Int32, Int32, Boolean, Int32, Int32, Boolean)
  fullName: Encoder.Convert(Char[], Int32, Int32, Byte[], Int32, Int32, Boolean, Int32, Int32, Boolean)
- uid: System.Char[]
  parent: System
  isExternal: false
  name: Char[]
  nameWithType: Char[]
  fullName: System.Char[]
  spec.csharp:
  - uid: System.Char
    name: Char
    nameWithType: Char
    fullName: System.Char
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Byte[]
  parent: System
  isExternal: false
  name: Byte[]
  nameWithType: Byte[]
  fullName: System.Byte[]
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Text.Encoder.Fallback
  parent: System.Text.Encoder
  isExternal: false
  name: Fallback
  nameWithType: Encoder.Fallback
  fullName: Encoder.Fallback
- uid: System.Text.EncoderFallback
  parent: System.Text
  isExternal: false
  name: EncoderFallback
  nameWithType: EncoderFallback
  fullName: System.Text.EncoderFallback
- uid: System.Text.Encoder.FallbackBuffer
  parent: System.Text.Encoder
  isExternal: false
  name: FallbackBuffer
  nameWithType: Encoder.FallbackBuffer
  fullName: Encoder.FallbackBuffer
- uid: System.Text.EncoderFallbackBuffer
  parent: System.Text
  isExternal: false
  name: EncoderFallbackBuffer
  nameWithType: EncoderFallbackBuffer
  fullName: System.Text.EncoderFallbackBuffer
- uid: System.Text.Encoder.GetByteCount(System.Char*,System.Int32,System.Boolean)
  parent: System.Text.Encoder
  isExternal: false
  name: GetByteCount(Char*, Int32, Boolean)
  nameWithType: Encoder.GetByteCount(Char*, Int32, Boolean)
  fullName: Encoder.GetByteCount(Char*, Int32, Boolean)
- uid: System.Text.Encoder.GetByteCount(System.Char[],System.Int32,System.Int32,System.Boolean)
  parent: System.Text.Encoder
  isExternal: false
  name: GetByteCount(Char[], Int32, Int32, Boolean)
  nameWithType: Encoder.GetByteCount(Char[], Int32, Int32, Boolean)
  fullName: Encoder.GetByteCount(Char[], Int32, Int32, Boolean)
- uid: System.Text.Encoder.GetBytes(System.Char*,System.Int32,System.Byte*,System.Int32,System.Boolean)
  parent: System.Text.Encoder
  isExternal: false
  name: GetBytes(Char*, Int32, Byte*, Int32, Boolean)
  nameWithType: Encoder.GetBytes(Char*, Int32, Byte*, Int32, Boolean)
  fullName: Encoder.GetBytes(Char*, Int32, Byte*, Int32, Boolean)
- uid: System.Text.Encoder.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32,System.Boolean)
  parent: System.Text.Encoder
  isExternal: false
  name: GetBytes(Char[], Int32, Int32, Byte[], Int32, Boolean)
  nameWithType: Encoder.GetBytes(Char[], Int32, Int32, Byte[], Int32, Boolean)
  fullName: Encoder.GetBytes(Char[], Int32, Int32, Byte[], Int32, Boolean)
- uid: System.Text.Encoder.Reset
  parent: System.Text.Encoder
  isExternal: false
  name: Reset()
  nameWithType: Encoder.Reset()
  fullName: Encoder.Reset()
- uid: System.Text.Encoder.#ctor*
  parent: System.Text.Encoder
  isExternal: false
  name: Encoder
  nameWithType: Encoder.Encoder
  fullName: Encoder.Encoder
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/Encoder.xml
- uid: System.Text.Encoder.Convert*
  parent: System.Text.Encoder
  isExternal: false
  name: Convert
  nameWithType: Encoder.Convert
  fullName: Encoder.Convert
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  - netcore-1.0
  - netcore-1.1
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/Encoder.xml
- uid: System.Text.Encoder.Fallback*
  parent: System.Text.Encoder
  isExternal: false
  name: Fallback
  nameWithType: Encoder.Fallback
  fullName: Encoder.Fallback
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/Encoder.xml
- uid: System.Text.Encoder.FallbackBuffer*
  parent: System.Text.Encoder
  isExternal: false
  name: FallbackBuffer
  nameWithType: Encoder.FallbackBuffer
  fullName: Encoder.FallbackBuffer
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/Encoder.xml
- uid: System.Text.Encoder.GetByteCount*
  parent: System.Text.Encoder
  isExternal: false
  name: GetByteCount
  nameWithType: Encoder.GetByteCount
  fullName: Encoder.GetByteCount
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  - netcore-1.0
  - netcore-1.1
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/Encoder.xml
- uid: System.Text.Encoder.GetBytes*
  parent: System.Text.Encoder
  isExternal: false
  name: GetBytes
  nameWithType: Encoder.GetBytes
  fullName: Encoder.GetBytes
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  - netcore-1.0
  - netcore-1.1
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/Encoder.xml
- uid: System.Text.Encoder.Reset*
  parent: System.Text.Encoder
  isExternal: false
  name: Reset
  nameWithType: Encoder.Reset
  fullName: Encoder.Reset
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/Encoder.xml
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: false
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: Object.Equals(Object)
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: false
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: Object.Equals(Object, Object)
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: false
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: Object.GetHashCode()
- uid: System.Object.GetType
  parent: System.Object
  isExternal: false
  name: GetType()
  nameWithType: Object.GetType()
  fullName: Object.GetType()
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: false
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: Object.MemberwiseClone()
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: false
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: Object.ReferenceEquals(Object, Object)
- uid: System.Object.ToString
  parent: System.Object
  isExternal: false
  name: ToString()
  nameWithType: Object.ToString()
  fullName: Object.ToString()
