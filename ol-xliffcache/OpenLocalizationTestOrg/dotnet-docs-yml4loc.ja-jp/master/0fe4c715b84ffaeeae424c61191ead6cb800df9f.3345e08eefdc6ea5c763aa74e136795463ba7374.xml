{"nodes":[{"content":"Implements the <xref href=\"System.Collections.IList\"></xref> interface using an array whose size is dynamically increased as required.","nodes":[{"pos":[0,134],"content":"Implements the <ph id=\"ph1\">&lt;xref href=\"System.Collections.IList\"&gt;&lt;/xref&gt;</ph> interface using an array whose size is dynamically increased as required.","source":"Implements the <xref href=\"System.Collections.IList\"></xref> interface using an array whose size is dynamically increased as required."}],"pos":[3687,3822],"yaml":true},{"content":"> [!NOTE]\n>  To view the .NET Framework source code for this type, see the [Reference Source](http://referencesource.microsoft.com/#mscorlib/system/collections/arraylist.cs#3e3f6715773d6643). You can browse through the source code online, download the reference for offline viewing, and step through the sources (including patches and updates) during debugging; see [instructions](http://referencesource.microsoft.com/).  \n  \n The <xref:System.Collections.ArrayList> class is designed to hold heterogeneous collections of objects. However, it does not always offer the best performance. Instead, we recommend the following:  \n  \n-   For a heterogeneous collection of objects, use the `List<Object>` (in C#) or `List(Of Object)` (in Visual Basic) type.  \n  \n-   For a homogeneous collection of objects, use the <xref:System.Collections.Generic.List%601> class.  \n  \n See the \"Performance Considerations\" section in the <xref:System.Collections.Generic.List%601> reference topic for a discussion of the relative performance of these classes.  \n  \n The <xref:System.Collections.ArrayList> is not guaranteed to be sorted.  You must sort the <xref:System.Collections.ArrayList> by calling its <xref:System.Collections.ArrayList.Sort%2A> method prior to performing operations (such as <xref:System.Collections.ArrayList.BinarySearch%2A>) that require the <xref:System.Collections.ArrayList> to be sorted. To maintain a collection that is automatically sorted as new elements are added, you can use the <xref:System.Collections.Generic.SortedSet%601> class.  \n  \n The capacity of an <xref:System.Collections.ArrayList> is the number of elements the <xref:System.Collections.ArrayList> can hold. As elements are added to an <xref:System.Collections.ArrayList>, the capacity is automatically increased as required through reallocation. The capacity can be decreased by calling <xref:System.Collections.ArrayList.TrimToSize%2A> or by setting the <xref:System.Collections.ArrayList.Capacity%2A> property explicitly.  \n  \n For very large <xref:System.Collections.ArrayList> objects, you can increase the maximum capacity to 2 billion elements on a 64-bit system by setting the `enabled` attribute of the  configuration element to `true` in the run-time environment.  \n  \n Elements in this collection can be accessed using an integer index.  Indexes in this collection are zero-based.  \n  \n The <xref:System.Collections.ArrayList> collection accepts `null` as a valid value. It also allows duplicate elements.  \n  \n Using multidimensional arrays as elements in an <xref:System.Collections.ArrayList> collection is not supported.","nodes":[{"pos":[2,420],"content":"[!NOTE]\n To view the .NET Framework source code for this type, see the [Reference Source](http://referencesource.microsoft.com/#mscorlib/system/collections/arraylist.cs#3e3f6715773d6643). You can browse through the source code online, download the reference for offline viewing, and step through the sources (including patches and updates) during debugging; see [instructions](http://referencesource.microsoft.com/).","leadings":["","> "],"nodes":[{"content":" To view the .NET Framework source code for this type, see the [Reference Source](http://referencesource.microsoft.com/#mscorlib/system/collections/arraylist.cs#3e3f6715773d6643). You can browse through the source code online, download the reference for offline viewing, and step through the sources (including patches and updates) during debugging; see [instructions](http://referencesource.microsoft.com/).","pos":[8,416],"nodes":[{"content":"To view the .NET Framework source code for this type, see the <bpt id=\"p1\">[</bpt>Reference Source<ept id=\"p1\">](http://referencesource.microsoft.com/#mscorlib/system/collections/arraylist.cs#3e3f6715773d6643)</ept>.","pos":[1,179],"source":" To view the .NET Framework source code for this type, see the [Reference Source](http://referencesource.microsoft.com/#mscorlib/system/collections/arraylist.cs#3e3f6715773d6643)."},{"content":"You can browse through the source code online, download the reference for offline viewing, and step through the sources (including patches and updates) during debugging; see <bpt id=\"p1\">[</bpt>instructions<ept id=\"p1\">](http://referencesource.microsoft.com/)</ept>.","pos":[180,408],"source":" You can browse through the source code online, download the reference for offline viewing, and step through the sources (including patches and updates) during debugging; see [instructions](http://referencesource.microsoft.com/)."}]}]},{"pos":[427,623],"content":"The <xref:System.Collections.ArrayList> class is designed to hold heterogeneous collections of objects. However, it does not always offer the best performance. Instead, we recommend the following:","nodes":[{"content":"The <xref:System.Collections.ArrayList> class is designed to hold heterogeneous collections of objects. However, it does not always offer the best performance. Instead, we recommend the following:","pos":[0,196],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Collections.ArrayList&gt;</ph> class is designed to hold heterogeneous collections of objects.","pos":[0,103],"source":"The <xref:System.Collections.ArrayList> class is designed to hold heterogeneous collections of objects."},{"content":"However, it does not always offer the best performance.","pos":[104,159]},{"content":"Instead, we recommend the following:","pos":[160,196]}]}]},{"pos":[633,751],"content":"For a heterogeneous collection of objects, use the <ph id=\"ph1\">`List&lt;Object&gt;`</ph> (in C#) or <ph id=\"ph2\">`List(Of Object)`</ph> (in Visual Basic) type.","source":"For a heterogeneous collection of objects, use the `List<Object>` (in C#) or `List(Of Object)` (in Visual Basic) type."},{"pos":[761,859],"content":"For a homogeneous collection of objects, use the <xref:System.Collections.Generic.List%601> class.","nodes":[{"content":"For a homogeneous collection of objects, use the <ph id=\"ph1\">&lt;xref:System.Collections.Generic.List%601&gt;</ph> class.","pos":[0,98],"source":"For a homogeneous collection of objects, use the <xref:System.Collections.Generic.List%601> class."}]},{"pos":[866,1039],"content":"See the \"Performance Considerations\" section in the <xref:System.Collections.Generic.List%601> reference topic for a discussion of the relative performance of these classes.","nodes":[{"content":"See the \"Performance Considerations\" section in the <ph id=\"ph1\">&lt;xref:System.Collections.Generic.List%601&gt;</ph> reference topic for a discussion of the relative performance of these classes.","pos":[0,173],"source":"See the \"Performance Considerations\" section in the <xref:System.Collections.Generic.List%601> reference topic for a discussion of the relative performance of these classes."}]},{"pos":[1046,1550],"content":"The <xref:System.Collections.ArrayList> is not guaranteed to be sorted.  You must sort the <xref:System.Collections.ArrayList> by calling its <xref:System.Collections.ArrayList.Sort%2A> method prior to performing operations (such as <xref:System.Collections.ArrayList.BinarySearch%2A>) that require the <xref:System.Collections.ArrayList> to be sorted. To maintain a collection that is automatically sorted as new elements are added, you can use the <xref:System.Collections.Generic.SortedSet%601> class.","nodes":[{"content":"The <xref:System.Collections.ArrayList> is not guaranteed to be sorted.  You must sort the <xref:System.Collections.ArrayList> by calling its <xref:System.Collections.ArrayList.Sort%2A> method prior to performing operations (such as <xref:System.Collections.ArrayList.BinarySearch%2A>) that require the <xref:System.Collections.ArrayList> to be sorted. To maintain a collection that is automatically sorted as new elements are added, you can use the <xref:System.Collections.Generic.SortedSet%601> class.","pos":[0,504],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Collections.ArrayList&gt;</ph> is not guaranteed to be sorted.","pos":[0,71],"source":"The <xref:System.Collections.ArrayList> is not guaranteed to be sorted."},{"content":"You must sort the <ph id=\"ph1\">&lt;xref:System.Collections.ArrayList&gt;</ph> by calling its <ph id=\"ph2\">&lt;xref:System.Collections.ArrayList.Sort%2A&gt;</ph> method prior to performing operations (such as <ph id=\"ph3\">&lt;xref:System.Collections.ArrayList.BinarySearch%2A&gt;</ph>) that require the <ph id=\"ph4\">&lt;xref:System.Collections.ArrayList&gt;</ph> to be sorted.","pos":[73,352],"source":"  You must sort the <xref:System.Collections.ArrayList> by calling its <xref:System.Collections.ArrayList.Sort%2A> method prior to performing operations (such as <xref:System.Collections.ArrayList.BinarySearch%2A>) that require the <xref:System.Collections.ArrayList> to be sorted."},{"content":"To maintain a collection that is automatically sorted as new elements are added, you can use the <ph id=\"ph1\">&lt;xref:System.Collections.Generic.SortedSet%601&gt;</ph> class.","pos":[353,504],"source":" To maintain a collection that is automatically sorted as new elements are added, you can use the <xref:System.Collections.Generic.SortedSet%601> class."}]}]},{"pos":[1557,2004],"content":"The capacity of an <xref:System.Collections.ArrayList> is the number of elements the <xref:System.Collections.ArrayList> can hold. As elements are added to an <xref:System.Collections.ArrayList>, the capacity is automatically increased as required through reallocation. The capacity can be decreased by calling <xref:System.Collections.ArrayList.TrimToSize%2A> or by setting the <xref:System.Collections.ArrayList.Capacity%2A> property explicitly.","nodes":[{"content":"The capacity of an <xref:System.Collections.ArrayList> is the number of elements the <xref:System.Collections.ArrayList> can hold. As elements are added to an <xref:System.Collections.ArrayList>, the capacity is automatically increased as required through reallocation. The capacity can be decreased by calling <xref:System.Collections.ArrayList.TrimToSize%2A> or by setting the <xref:System.Collections.ArrayList.Capacity%2A> property explicitly.","pos":[0,447],"nodes":[{"content":"The capacity of an <ph id=\"ph1\">&lt;xref:System.Collections.ArrayList&gt;</ph> is the number of elements the <ph id=\"ph2\">&lt;xref:System.Collections.ArrayList&gt;</ph> can hold.","pos":[0,130],"source":"The capacity of an <xref:System.Collections.ArrayList> is the number of elements the <xref:System.Collections.ArrayList> can hold."},{"content":"As elements are added to an <ph id=\"ph1\">&lt;xref:System.Collections.ArrayList&gt;</ph>, the capacity is automatically increased as required through reallocation.","pos":[131,269],"source":" As elements are added to an <xref:System.Collections.ArrayList>, the capacity is automatically increased as required through reallocation."},{"content":"The capacity can be decreased by calling <ph id=\"ph1\">&lt;xref:System.Collections.ArrayList.TrimToSize%2A&gt;</ph> or by setting the <ph id=\"ph2\">&lt;xref:System.Collections.ArrayList.Capacity%2A&gt;</ph> property explicitly.","pos":[270,447],"source":" The capacity can be decreased by calling <xref:System.Collections.ArrayList.TrimToSize%2A> or by setting the <xref:System.Collections.ArrayList.Capacity%2A> property explicitly."}]}]},{"pos":[2011,2253],"content":"For very large <ph id=\"ph1\">&lt;xref:System.Collections.ArrayList&gt;</ph> objects, you can increase the maximum capacity to 2 billion elements on a 64-bit system by setting the <ph id=\"ph2\">`enabled`</ph> attribute of the  configuration element to <ph id=\"ph3\">`true`</ph> in the run-time environment.","source":"For very large <xref:System.Collections.ArrayList> objects, you can increase the maximum capacity to 2 billion elements on a 64-bit system by setting the `enabled` attribute of the  configuration element to `true` in the run-time environment."},{"pos":[2260,2371],"content":"Elements in this collection can be accessed using an integer index.  Indexes in this collection are zero-based.","nodes":[{"content":"Elements in this collection can be accessed using an integer index.  Indexes in this collection are zero-based.","pos":[0,111],"nodes":[{"content":"Elements in this collection can be accessed using an integer index.","pos":[0,67]},{"content":"Indexes in this collection are zero-based.","pos":[69,111]}]}]},{"pos":[2378,2496],"content":"The <xref:System.Collections.ArrayList> collection accepts `null` as a valid value. It also allows duplicate elements.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Collections.ArrayList&gt;</ph> collection accepts <ph id=\"ph2\">`null`</ph> as a valid value.","pos":[0,83],"source":"The <xref:System.Collections.ArrayList> collection accepts `null` as a valid value."},{"content":"It also allows duplicate elements.","pos":[84,118]}]},{"pos":[2503,2615],"content":"Using multidimensional arrays as elements in an <xref:System.Collections.ArrayList> collection is not supported.","nodes":[{"content":"Using multidimensional arrays as elements in an <ph id=\"ph1\">&lt;xref:System.Collections.ArrayList&gt;</ph> collection is not supported.","pos":[0,112],"source":"Using multidimensional arrays as elements in an <xref:System.Collections.ArrayList> collection is not supported."}]}],"pos":[3833,6474],"yaml":true,"extradata":"MT"},{"content":"Initializes a new instance of the <xref href=\"System.Collections.ArrayList\"></xref> class that is empty and has the default initial capacity.","nodes":[{"pos":[0,141],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Collections.ArrayList\"&gt;&lt;/xref&gt;</ph> class that is empty and has the default initial capacity.","source":"Initializes a new instance of the <xref href=\"System.Collections.ArrayList\"></xref> class that is empty and has the default initial capacity."}],"pos":[9258,9400],"yaml":true},{"content":"The capacity of an <xref:System.Collections.ArrayList> is the number of elements that the <xref:System.Collections.ArrayList> can hold. As elements are added to an <xref:System.Collections.ArrayList>, the capacity is automatically increased as required by reallocating the internal array.  \n  \n If the size of the collection can be estimated, specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <xref:System.Collections.ArrayList>.  \n  \n This constructor is an O(1) operation.","nodes":[{"pos":[0,288],"content":"The capacity of an <xref:System.Collections.ArrayList> is the number of elements that the <xref:System.Collections.ArrayList> can hold. As elements are added to an <xref:System.Collections.ArrayList>, the capacity is automatically increased as required by reallocating the internal array.","nodes":[{"content":"The capacity of an <xref:System.Collections.ArrayList> is the number of elements that the <xref:System.Collections.ArrayList> can hold. As elements are added to an <xref:System.Collections.ArrayList>, the capacity is automatically increased as required by reallocating the internal array.","pos":[0,288],"nodes":[{"content":"The capacity of an <ph id=\"ph1\">&lt;xref:System.Collections.ArrayList&gt;</ph> is the number of elements that the <ph id=\"ph2\">&lt;xref:System.Collections.ArrayList&gt;</ph> can hold.","pos":[0,135],"source":"The capacity of an <xref:System.Collections.ArrayList> is the number of elements that the <xref:System.Collections.ArrayList> can hold."},{"content":"As elements are added to an <ph id=\"ph1\">&lt;xref:System.Collections.ArrayList&gt;</ph>, the capacity is automatically increased as required by reallocating the internal array.","pos":[136,288],"source":" As elements are added to an <xref:System.Collections.ArrayList>, the capacity is automatically increased as required by reallocating the internal array."}]}]},{"pos":[295,503],"content":"If the size of the collection can be estimated, specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <xref:System.Collections.ArrayList>.","nodes":[{"content":"If the size of the collection can be estimated, specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <ph id=\"ph1\">&lt;xref:System.Collections.ArrayList&gt;</ph>.","pos":[0,208],"source":"If the size of the collection can be estimated, specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <xref:System.Collections.ArrayList>."}]},{"pos":[510,548],"content":"This constructor is an O(1) operation.","nodes":[{"content":"This constructor is an O(1) operation.","pos":[0,38]}]}],"pos":[9411,9966],"yaml":true,"extradata":"MT"},{"content":"Initializes a new instance of the <xref href=\"System.Collections.ArrayList\"></xref> class that contains elements copied from the specified collection and that has the same initial capacity as the number of elements copied.","nodes":[{"pos":[0,222],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Collections.ArrayList\"&gt;&lt;/xref&gt;</ph> class that contains elements copied from the specified collection and that has the same initial capacity as the number of elements copied.","source":"Initializes a new instance of the <xref href=\"System.Collections.ArrayList\"></xref> class that contains elements copied from the specified collection and that has the same initial capacity as the number of elements copied."}],"pos":[11436,11659],"yaml":true},{"content":"The capacity of an <xref:System.Collections.ArrayList> is the number of elements that the <xref:System.Collections.ArrayList> can hold. As elements are added to an <xref:System.Collections.ArrayList>, the capacity is automatically increased as required by reallocating the internal array.  \n  \n If the size of the collection can be estimated, specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <xref:System.Collections.ArrayList>.  \n  \n The elements are copied onto the <xref:System.Collections.ArrayList> in the same order they are read by the <xref:System.Collections.IEnumerator> of the <xref:System.Collections.ICollection>.  \n  \n This constructor is an O(`n`) operation, where `n` is the number of elements in `c`.","nodes":[{"pos":[0,288],"content":"The capacity of an <xref:System.Collections.ArrayList> is the number of elements that the <xref:System.Collections.ArrayList> can hold. As elements are added to an <xref:System.Collections.ArrayList>, the capacity is automatically increased as required by reallocating the internal array.","nodes":[{"content":"The capacity of an <xref:System.Collections.ArrayList> is the number of elements that the <xref:System.Collections.ArrayList> can hold. As elements are added to an <xref:System.Collections.ArrayList>, the capacity is automatically increased as required by reallocating the internal array.","pos":[0,288],"nodes":[{"content":"The capacity of an <ph id=\"ph1\">&lt;xref:System.Collections.ArrayList&gt;</ph> is the number of elements that the <ph id=\"ph2\">&lt;xref:System.Collections.ArrayList&gt;</ph> can hold.","pos":[0,135],"source":"The capacity of an <xref:System.Collections.ArrayList> is the number of elements that the <xref:System.Collections.ArrayList> can hold."},{"content":"As elements are added to an <ph id=\"ph1\">&lt;xref:System.Collections.ArrayList&gt;</ph>, the capacity is automatically increased as required by reallocating the internal array.","pos":[136,288],"source":" As elements are added to an <xref:System.Collections.ArrayList>, the capacity is automatically increased as required by reallocating the internal array."}]}]},{"pos":[295,503],"content":"If the size of the collection can be estimated, specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <xref:System.Collections.ArrayList>.","nodes":[{"content":"If the size of the collection can be estimated, specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <ph id=\"ph1\">&lt;xref:System.Collections.ArrayList&gt;</ph>.","pos":[0,208],"source":"If the size of the collection can be estimated, specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <xref:System.Collections.ArrayList>."}]},{"pos":[510,701],"content":"The elements are copied onto the <xref:System.Collections.ArrayList> in the same order they are read by the <xref:System.Collections.IEnumerator> of the <xref:System.Collections.ICollection>.","nodes":[{"content":"The elements are copied onto the <ph id=\"ph1\">&lt;xref:System.Collections.ArrayList&gt;</ph> in the same order they are read by the <ph id=\"ph2\">&lt;xref:System.Collections.IEnumerator&gt;</ph> of the <ph id=\"ph3\">&lt;xref:System.Collections.ICollection&gt;</ph>.","pos":[0,191],"source":"The elements are copied onto the <xref:System.Collections.ArrayList> in the same order they are read by the <xref:System.Collections.IEnumerator> of the <xref:System.Collections.ICollection>."}]},{"pos":[708,792],"content":"This constructor is an O(<ph id=\"ph1\">`n`</ph>) operation, where <ph id=\"ph2\">`n`</ph> is the number of elements in <ph id=\"ph3\">`c`</ph>.","source":"This constructor is an O(`n`) operation, where `n` is the number of elements in `c`."}],"pos":[11670,12471],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Collections.ICollection\"></xref> whose elements are copied to the new list.","nodes":[{"pos":[0,98],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Collections.ICollection\"&gt;&lt;/xref&gt;</ph> whose elements are copied to the new list.","source":"The <xref href=\"System.Collections.ICollection\"></xref> whose elements are copied to the new list."}],"pos":[12637,12736],"yaml":true},{"content":"<code>c</code> is `null`.","nodes":[{"pos":[0,25],"content":"<ph id=\"ph1\">&lt;code&gt;c&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>c</code> is `null`."}],"pos":[12900,12926],"yaml":true},{"content":"Initializes a new instance of the <xref href=\"System.Collections.ArrayList\"></xref> class that is empty and has the specified initial capacity.","nodes":[{"pos":[0,143],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Collections.ArrayList\"&gt;&lt;/xref&gt;</ph> class that is empty and has the specified initial capacity.","source":"Initializes a new instance of the <xref href=\"System.Collections.ArrayList\"></xref> class that is empty and has the specified initial capacity."}],"pos":[14196,14340],"yaml":true},{"content":"The capacity of an <xref:System.Collections.ArrayList> is the number of elements that the <xref:System.Collections.ArrayList> can hold. As elements are added to an <xref:System.Collections.ArrayList>, the capacity is automatically increased as required by reallocating the internal array.  \n  \n If the size of the collection can be estimated, specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <xref:System.Collections.ArrayList>.  \n  \n This constructor is an O(`n`) operation, where `n` is `capacity`.","nodes":[{"pos":[0,288],"content":"The capacity of an <xref:System.Collections.ArrayList> is the number of elements that the <xref:System.Collections.ArrayList> can hold. As elements are added to an <xref:System.Collections.ArrayList>, the capacity is automatically increased as required by reallocating the internal array.","nodes":[{"content":"The capacity of an <xref:System.Collections.ArrayList> is the number of elements that the <xref:System.Collections.ArrayList> can hold. As elements are added to an <xref:System.Collections.ArrayList>, the capacity is automatically increased as required by reallocating the internal array.","pos":[0,288],"nodes":[{"content":"The capacity of an <ph id=\"ph1\">&lt;xref:System.Collections.ArrayList&gt;</ph> is the number of elements that the <ph id=\"ph2\">&lt;xref:System.Collections.ArrayList&gt;</ph> can hold.","pos":[0,135],"source":"The capacity of an <xref:System.Collections.ArrayList> is the number of elements that the <xref:System.Collections.ArrayList> can hold."},{"content":"As elements are added to an <ph id=\"ph1\">&lt;xref:System.Collections.ArrayList&gt;</ph>, the capacity is automatically increased as required by reallocating the internal array.","pos":[136,288],"source":" As elements are added to an <xref:System.Collections.ArrayList>, the capacity is automatically increased as required by reallocating the internal array."}]}]},{"pos":[295,503],"content":"If the size of the collection can be estimated, specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <xref:System.Collections.ArrayList>.","nodes":[{"content":"If the size of the collection can be estimated, specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <ph id=\"ph1\">&lt;xref:System.Collections.ArrayList&gt;</ph>.","pos":[0,208],"source":"If the size of the collection can be estimated, specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <xref:System.Collections.ArrayList>."}]},{"pos":[510,575],"content":"This constructor is an O(<ph id=\"ph1\">`n`</ph>) operation, where <ph id=\"ph2\">`n`</ph> is <ph id=\"ph3\">`capacity`</ph>.","source":"This constructor is an O(`n`) operation, where `n` is `capacity`."}],"pos":[14351,14933],"yaml":true,"extradata":"MT"},{"content":"The number of elements that the new list can initially store.","nodes":[{"pos":[0,61],"content":"The number of elements that the new list can initially store.","nodes":[{"content":"The number of elements that the new list can initially store.","pos":[0,61]}]}],"pos":[15068,15130],"yaml":true},{"content":"<code>capacity</code> is less than zero.","nodes":[{"pos":[0,40],"content":"<ph id=\"ph1\">&lt;code&gt;capacity&lt;/code&gt;</ph> is less than zero.","source":"<code>capacity</code> is less than zero."}],"pos":[15306,15347],"yaml":true},{"content":"Creates an <xref href=\"System.Collections.ArrayList\"></xref> wrapper for a specific <xref href=\"System.Collections.IList\"></xref>.","nodes":[{"pos":[0,130],"content":"Creates an <ph id=\"ph1\">&lt;xref href=\"System.Collections.ArrayList\"&gt;&lt;/xref&gt;</ph> wrapper for a specific <ph id=\"ph2\">&lt;xref href=\"System.Collections.IList\"&gt;&lt;/xref&gt;</ph>.","source":"Creates an <xref href=\"System.Collections.ArrayList\"></xref> wrapper for a specific <xref href=\"System.Collections.IList\"></xref>."}],"pos":[16646,16777],"yaml":true},{"content":"<xref:System.Collections.ArrayList.Adapter%2A> does not copy the contents of <xref:System.Collections.IList>. Instead, it only creates an <xref:System.Collections.ArrayList> wrapper around <xref:System.Collections.IList>; therefore, changes to the <xref:System.Collections.IList> also affect the <xref:System.Collections.ArrayList>.  \n  \n The <xref:System.Collections.ArrayList> class provides generic <xref:System.Collections.ArrayList.Reverse%2A>, <xref:System.Collections.ArrayList.BinarySearch%2A> and <xref:System.Collections.ArrayList.Sort%2A> methods. This wrapper can be a means to use those methods on <xref:System.Collections.IList>; however, performing these generic operations through the wrapper might be less efficient than operations applied directly on the <xref:System.Collections.IList>.  \n  \n This method is an O(1) operation.  \n  \n## Version Compatibility  \n In the .NET Framework version 1.0 and 1.1, calling the <xref:System.Collections.ArrayList.GetEnumerator%28System.Int32%2CSystem.Int32%29> method overload on the <xref:System.Collections.ArrayList> wrapper returned an enumerator that treated the second argument as an upper bound rather than as a count. In the [!INCLUDE[dnprdnlong](~/includes/dnprdnlong-md.md)] the second argument is correctly treated as a count.","nodes":[{"pos":[0,332],"content":"<xref:System.Collections.ArrayList.Adapter%2A> does not copy the contents of <xref:System.Collections.IList>. Instead, it only creates an <xref:System.Collections.ArrayList> wrapper around <xref:System.Collections.IList>; therefore, changes to the <xref:System.Collections.IList> also affect the <xref:System.Collections.ArrayList>.","nodes":[{"content":"<xref:System.Collections.ArrayList.Adapter%2A> does not copy the contents of <xref:System.Collections.IList>. Instead, it only creates an <xref:System.Collections.ArrayList> wrapper around <xref:System.Collections.IList>; therefore, changes to the <xref:System.Collections.IList> also affect the <xref:System.Collections.ArrayList>.","pos":[0,332],"nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Collections.ArrayList.Adapter%2A&gt;</ph> does not copy the contents of <ph id=\"ph2\">&lt;xref:System.Collections.IList&gt;</ph>.","pos":[0,109],"source":"<xref:System.Collections.ArrayList.Adapter%2A> does not copy the contents of <xref:System.Collections.IList>."},{"content":"Instead, it only creates an <ph id=\"ph1\">&lt;xref:System.Collections.ArrayList&gt;</ph> wrapper around <ph id=\"ph2\">&lt;xref:System.Collections.IList&gt;</ph>; therefore, changes to the <ph id=\"ph3\">&lt;xref:System.Collections.IList&gt;</ph> also affect the <ph id=\"ph4\">&lt;xref:System.Collections.ArrayList&gt;</ph>.","pos":[110,332],"source":" Instead, it only creates an <xref:System.Collections.ArrayList> wrapper around <xref:System.Collections.IList>; therefore, changes to the <xref:System.Collections.IList> also affect the <xref:System.Collections.ArrayList>."}]}]},{"pos":[339,805],"content":"The <xref:System.Collections.ArrayList> class provides generic <xref:System.Collections.ArrayList.Reverse%2A>, <xref:System.Collections.ArrayList.BinarySearch%2A> and <xref:System.Collections.ArrayList.Sort%2A> methods. This wrapper can be a means to use those methods on <xref:System.Collections.IList>; however, performing these generic operations through the wrapper might be less efficient than operations applied directly on the <xref:System.Collections.IList>.","nodes":[{"content":"The <xref:System.Collections.ArrayList> class provides generic <xref:System.Collections.ArrayList.Reverse%2A>, <xref:System.Collections.ArrayList.BinarySearch%2A> and <xref:System.Collections.ArrayList.Sort%2A> methods. This wrapper can be a means to use those methods on <xref:System.Collections.IList>; however, performing these generic operations through the wrapper might be less efficient than operations applied directly on the <xref:System.Collections.IList>.","pos":[0,466],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Collections.ArrayList&gt;</ph> class provides generic <ph id=\"ph2\">&lt;xref:System.Collections.ArrayList.Reverse%2A&gt;</ph>, <ph id=\"ph3\">&lt;xref:System.Collections.ArrayList.BinarySearch%2A&gt;</ph> and <ph id=\"ph4\">&lt;xref:System.Collections.ArrayList.Sort%2A&gt;</ph> methods.","pos":[0,219],"source":"The <xref:System.Collections.ArrayList> class provides generic <xref:System.Collections.ArrayList.Reverse%2A>, <xref:System.Collections.ArrayList.BinarySearch%2A> and <xref:System.Collections.ArrayList.Sort%2A> methods."},{"content":"This wrapper can be a means to use those methods on <ph id=\"ph1\">&lt;xref:System.Collections.IList&gt;</ph>; however, performing these generic operations through the wrapper might be less efficient than operations applied directly on the <ph id=\"ph2\">&lt;xref:System.Collections.IList&gt;</ph>.","pos":[220,466],"source":" This wrapper can be a means to use those methods on <xref:System.Collections.IList>; however, performing these generic operations through the wrapper might be less efficient than operations applied directly on the <xref:System.Collections.IList>."}]}]},{"pos":[812,845],"content":"This method is an O(1) operation.","nodes":[{"content":"This method is an O(1) operation.","pos":[0,33]}]},{"pos":[854,875],"content":"Version Compatibility","linkify":"Version Compatibility","nodes":[{"content":"Version Compatibility","pos":[0,21]}]},{"pos":[879,1293],"content":"In the .NET Framework version 1.0 and 1.1, calling the <xref:System.Collections.ArrayList.GetEnumerator%28System.Int32%2CSystem.Int32%29> method overload on the <xref:System.Collections.ArrayList> wrapper returned an enumerator that treated the second argument as an upper bound rather than as a count. In the [!INCLUDE[dnprdnlong](~/includes/dnprdnlong-md.md)] the second argument is correctly treated as a count.","nodes":[{"content":"In the .NET Framework version 1.0 and 1.1, calling the <ph id=\"ph1\">&lt;xref:System.Collections.ArrayList.GetEnumerator%28System.Int32%2CSystem.Int32%29&gt;</ph> method overload on the <ph id=\"ph2\">&lt;xref:System.Collections.ArrayList&gt;</ph> wrapper returned an enumerator that treated the second argument as an upper bound rather than as a count.","pos":[0,302],"source":"In the .NET Framework version 1.0 and 1.1, calling the <xref:System.Collections.ArrayList.GetEnumerator%28System.Int32%2CSystem.Int32%29> method overload on the <xref:System.Collections.ArrayList> wrapper returned an enumerator that treated the second argument as an upper bound rather than as a count."},{"content":"In the <ph id=\"ph1\">[!INCLUDE[dnprdnlong](~/includes/dnprdnlong-md.md)]</ph> the second argument is correctly treated as a count.","pos":[303,414],"source":" In the [!INCLUDE[dnprdnlong](~/includes/dnprdnlong-md.md)] the second argument is correctly treated as a count."}]}],"pos":[16788,18091],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Collections.IList\"></xref> to wrap.","nodes":[{"pos":[0,58],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Collections.IList\"&gt;&lt;/xref&gt;</ph> to wrap.","source":"The <xref href=\"System.Collections.IList\"></xref> to wrap."}],"pos":[18285,18344],"yaml":true},{"content":"The <xref href=\"System.Collections.ArrayList\"></xref> wrapper around the <xref href=\"System.Collections.IList\"></xref>.","nodes":[{"pos":[0,119],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Collections.ArrayList\"&gt;&lt;/xref&gt;</ph> wrapper around the <ph id=\"ph2\">&lt;xref href=\"System.Collections.IList\"&gt;&lt;/xref&gt;</ph>.","source":"The <xref href=\"System.Collections.ArrayList\"></xref> wrapper around the <xref href=\"System.Collections.IList\"></xref>."}],"pos":[18416,18536],"yaml":true},{"content":"<code>list</code> is `null`.","nodes":[{"pos":[0,28],"content":"<ph id=\"ph1\">&lt;code&gt;list&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>list</code> is `null`."}],"pos":[18702,18731],"yaml":true},{"content":"Adds an object to the end of the <xref href=\"System.Collections.ArrayList\"></xref>.","nodes":[{"pos":[0,83],"content":"Adds an object to the end of the <ph id=\"ph1\">&lt;xref href=\"System.Collections.ArrayList\"&gt;&lt;/xref&gt;</ph>.","source":"Adds an object to the end of the <xref href=\"System.Collections.ArrayList\"></xref>."}],"pos":[19976,20060],"yaml":true},{"content":"<xref:System.Collections.ArrayList> accepts `null` as a valid value and allows duplicate elements.  \n  \n If <xref:System.Collections.ArrayList.Count%2A> already equals <xref:System.Collections.ArrayList.Capacity%2A>, the capacity of the <xref:System.Collections.ArrayList> is increased by automatically reallocating the internal array, and the existing elements are copied to the new array before the new element is added.  \n  \n If <xref:System.Collections.ArrayList.Count%2A> is less than <xref:System.Collections.ArrayList.Capacity%2A>, this method is an O(1) operation. If the capacity needs to be increased to accommodate the new element, this method becomes an O(`n`) operation, where `n` is <xref:System.Collections.ArrayList.Count%2A>.","nodes":[{"pos":[0,98],"content":"<ph id=\"ph1\">&lt;xref:System.Collections.ArrayList&gt;</ph> accepts <ph id=\"ph2\">`null`</ph> as a valid value and allows duplicate elements.","source":"<xref:System.Collections.ArrayList> accepts `null` as a valid value and allows duplicate elements."},{"pos":[105,422],"content":"If <xref:System.Collections.ArrayList.Count%2A> already equals <xref:System.Collections.ArrayList.Capacity%2A>, the capacity of the <xref:System.Collections.ArrayList> is increased by automatically reallocating the internal array, and the existing elements are copied to the new array before the new element is added.","nodes":[{"content":"If <ph id=\"ph1\">&lt;xref:System.Collections.ArrayList.Count%2A&gt;</ph> already equals <ph id=\"ph2\">&lt;xref:System.Collections.ArrayList.Capacity%2A&gt;</ph>, the capacity of the <ph id=\"ph3\">&lt;xref:System.Collections.ArrayList&gt;</ph> is increased by automatically reallocating the internal array, and the existing elements are copied to the new array before the new element is added.","pos":[0,317],"source":"If <xref:System.Collections.ArrayList.Count%2A> already equals <xref:System.Collections.ArrayList.Capacity%2A>, the capacity of the <xref:System.Collections.ArrayList> is increased by automatically reallocating the internal array, and the existing elements are copied to the new array before the new element is added."}]},{"pos":[429,742],"content":"If <xref:System.Collections.ArrayList.Count%2A> is less than <xref:System.Collections.ArrayList.Capacity%2A>, this method is an O(1) operation. If the capacity needs to be increased to accommodate the new element, this method becomes an O(`n`) operation, where `n` is <xref:System.Collections.ArrayList.Count%2A>.","nodes":[{"content":"If <ph id=\"ph1\">&lt;xref:System.Collections.ArrayList.Count%2A&gt;</ph> is less than <ph id=\"ph2\">&lt;xref:System.Collections.ArrayList.Capacity%2A&gt;</ph>, this method is an O(1) operation.","pos":[0,143],"source":"If <xref:System.Collections.ArrayList.Count%2A> is less than <xref:System.Collections.ArrayList.Capacity%2A>, this method is an O(1) operation."},{"content":"If the capacity needs to be increased to accommodate the new element, this method becomes an O(<ph id=\"ph1\">`n`</ph>) operation, where <ph id=\"ph2\">`n`</ph> is <ph id=\"ph3\">&lt;xref:System.Collections.ArrayList.Count%2A&gt;</ph>.","pos":[144,313],"source":" If the capacity needs to be increased to accommodate the new element, this method becomes an O(`n`) operation, where `n` is <xref:System.Collections.ArrayList.Count%2A>."}]}],"pos":[20071,20820],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Object\"></xref> to be added to the end of the <xref href=\"System.Collections.ArrayList\"></xref>. The value can be `null`.","nodes":[{"pos":[0,144],"content":"The <xref href=\"System.Object\"></xref> to be added to the end of the <xref href=\"System.Collections.ArrayList\"></xref>. The value can be `null`.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Object\"&gt;&lt;/xref&gt;</ph> to be added to the end of the <ph id=\"ph2\">&lt;xref href=\"System.Collections.ArrayList\"&gt;&lt;/xref&gt;</ph>.","pos":[0,119],"source":"The <xref href=\"System.Object\"></xref> to be added to the end of the <xref href=\"System.Collections.ArrayList\"></xref>."},{"content":"The value can be <ph id=\"ph1\">`null`</ph>.","pos":[120,144],"source":" The value can be `null`."}]}],"pos":[21514,21659],"yaml":true},{"content":"The <xref href=\"System.Collections.ArrayList\"></xref> index at which the <code>value</code> has been added.","nodes":[{"pos":[0,107],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Collections.ArrayList\"&gt;&lt;/xref&gt;</ph> index at which the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept> has been added.","source":"The <xref href=\"System.Collections.ArrayList\"></xref> index at which the <code>value</code> has been added."}],"pos":[21715,21823],"yaml":true},{"content":"The <xref href=\"System.Collections.ArrayList\"></xref> is read-only.  \n  \n -or-  \n  \n The <xref href=\"System.Collections.ArrayList\"></xref> has a fixed size.","nodes":[{"pos":[0,67],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Collections.ArrayList\"&gt;&lt;/xref&gt;</ph> is read-only.","source":"The <xref href=\"System.Collections.ArrayList\"></xref> is read-only."},{"pos":[74,78],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[85,156],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Collections.ArrayList\"&gt;&lt;/xref&gt;</ph> has a fixed size.","source":"The <xref href=\"System.Collections.ArrayList\"></xref> has a fixed size."}],"pos":[21985,22152],"yaml":true},{"content":"Adds the elements of an <xref href=\"System.Collections.ICollection\"></xref> to the end of the <xref href=\"System.Collections.ArrayList\"></xref>.","nodes":[{"pos":[0,144],"content":"Adds the elements of an <ph id=\"ph1\">&lt;xref href=\"System.Collections.ICollection\"&gt;&lt;/xref&gt;</ph> to the end of the <ph id=\"ph2\">&lt;xref href=\"System.Collections.ArrayList\"&gt;&lt;/xref&gt;</ph>.","source":"Adds the elements of an <xref href=\"System.Collections.ICollection\"></xref> to the end of the <xref href=\"System.Collections.ArrayList\"></xref>."}],"pos":[23493,23638],"yaml":true},{"content":"<xref:System.Collections.ArrayList> accepts `null` as a valid value and allows duplicate elements.  \n  \n The order of the elements in the <xref:System.Collections.ICollection> is preserved in the <xref:System.Collections.ArrayList>.  \n  \n If the new <xref:System.Collections.ArrayList.Count%2A> (the current <xref:System.Collections.ArrayList.Count%2A> plus the size of the collection) will be greater than <xref:System.Collections.ArrayList.Capacity%2A>, the capacity of the <xref:System.Collections.ArrayList> is increased by automatically reallocating the internal array to accommodate the new elements, and the existing elements are copied to the new array before the new elements are added.  \n  \n If the <xref:System.Collections.ArrayList> can accommodate the new elements without increasing the <xref:System.Collections.ArrayList.Capacity%2A>, this method is an O(`n`) operation, where `n` is the number of elements to be added. If the capacity needs to be increased to accommodate the new elements, this method becomes an O(`n` + `m`) operation, where `n` is the number of elements to be added and `m` is <xref:System.Collections.ArrayList.Count%2A>.","nodes":[{"pos":[0,98],"content":"<ph id=\"ph1\">&lt;xref:System.Collections.ArrayList&gt;</ph> accepts <ph id=\"ph2\">`null`</ph> as a valid value and allows duplicate elements.","source":"<xref:System.Collections.ArrayList> accepts `null` as a valid value and allows duplicate elements."},{"pos":[105,232],"content":"The order of the elements in the <xref:System.Collections.ICollection> is preserved in the <xref:System.Collections.ArrayList>.","nodes":[{"content":"The order of the elements in the <ph id=\"ph1\">&lt;xref:System.Collections.ICollection&gt;</ph> is preserved in the <ph id=\"ph2\">&lt;xref:System.Collections.ArrayList&gt;</ph>.","pos":[0,127],"source":"The order of the elements in the <xref:System.Collections.ICollection> is preserved in the <xref:System.Collections.ArrayList>."}]},{"pos":[239,695],"content":"If the new <xref:System.Collections.ArrayList.Count%2A> (the current <xref:System.Collections.ArrayList.Count%2A> plus the size of the collection) will be greater than <xref:System.Collections.ArrayList.Capacity%2A>, the capacity of the <xref:System.Collections.ArrayList> is increased by automatically reallocating the internal array to accommodate the new elements, and the existing elements are copied to the new array before the new elements are added.","nodes":[{"content":"If the new <ph id=\"ph1\">&lt;xref:System.Collections.ArrayList.Count%2A&gt;</ph> (the current <ph id=\"ph2\">&lt;xref:System.Collections.ArrayList.Count%2A&gt;</ph> plus the size of the collection) will be greater than <ph id=\"ph3\">&lt;xref:System.Collections.ArrayList.Capacity%2A&gt;</ph>, the capacity of the <ph id=\"ph4\">&lt;xref:System.Collections.ArrayList&gt;</ph> is increased by automatically reallocating the internal array to accommodate the new elements, and the existing elements are copied to the new array before the new elements are added.","pos":[0,456],"source":"If the new <xref:System.Collections.ArrayList.Count%2A> (the current <xref:System.Collections.ArrayList.Count%2A> plus the size of the collection) will be greater than <xref:System.Collections.ArrayList.Capacity%2A>, the capacity of the <xref:System.Collections.ArrayList> is increased by automatically reallocating the internal array to accommodate the new elements, and the existing elements are copied to the new array before the new elements are added."}]},{"pos":[702,1157],"content":"If the <xref:System.Collections.ArrayList> can accommodate the new elements without increasing the <xref:System.Collections.ArrayList.Capacity%2A>, this method is an O(`n`) operation, where `n` is the number of elements to be added. If the capacity needs to be increased to accommodate the new elements, this method becomes an O(`n` + `m`) operation, where `n` is the number of elements to be added and `m` is <xref:System.Collections.ArrayList.Count%2A>.","nodes":[{"content":"If the <ph id=\"ph1\">&lt;xref:System.Collections.ArrayList&gt;</ph> can accommodate the new elements without increasing the <ph id=\"ph2\">&lt;xref:System.Collections.ArrayList.Capacity%2A&gt;</ph>, this method is an O(<ph id=\"ph3\">`n`</ph>) operation, where <ph id=\"ph4\">`n`</ph> is the number of elements to be added.","pos":[0,232],"source":"If the <xref:System.Collections.ArrayList> can accommodate the new elements without increasing the <xref:System.Collections.ArrayList.Capacity%2A>, this method is an O(`n`) operation, where `n` is the number of elements to be added."},{"content":"If the capacity needs to be increased to accommodate the new elements, this method becomes an O(<ph id=\"ph1\">`n`</ph><ph id=\"ph2\"> + </ph><ph id=\"ph3\">`m`</ph>) operation, where <ph id=\"ph4\">`n`</ph> is the number of elements to be added and <ph id=\"ph5\">`m`</ph> is <ph id=\"ph6\">&lt;xref:System.Collections.ArrayList.Count%2A&gt;</ph>.","pos":[233,455],"source":" If the capacity needs to be increased to accommodate the new elements, this method becomes an O(`n` + `m`) operation, where `n` is the number of elements to be added and `m` is <xref:System.Collections.ArrayList.Count%2A>."}]}],"pos":[23649,24815],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Collections.ICollection\"></xref> whose elements should be added to the end of the <xref href=\"System.Collections.ArrayList\"></xref>. The collection itself cannot be `null`, but it can contain elements that are `null`.","nodes":[{"pos":[0,240],"content":"The <xref href=\"System.Collections.ICollection\"></xref> whose elements should be added to the end of the <xref href=\"System.Collections.ArrayList\"></xref>. The collection itself cannot be `null`, but it can contain elements that are `null`.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Collections.ICollection\"&gt;&lt;/xref&gt;</ph> whose elements should be added to the end of the <ph id=\"ph2\">&lt;xref href=\"System.Collections.ArrayList\"&gt;&lt;/xref&gt;</ph>.","pos":[0,155],"source":"The <xref href=\"System.Collections.ICollection\"></xref> whose elements should be added to the end of the <xref href=\"System.Collections.ArrayList\"></xref>."},{"content":"The collection itself cannot be <ph id=\"ph1\">`null`</ph>, but it can contain elements that are <ph id=\"ph2\">`null`</ph>.","pos":[156,240],"source":" The collection itself cannot be `null`, but it can contain elements that are `null`."}]}],"pos":[25548,25789],"yaml":true},{"content":"<code>c</code> is `null`.","nodes":[{"pos":[0,25],"content":"<ph id=\"ph1\">&lt;code&gt;c&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>c</code> is `null`."}],"pos":[25956,25982],"yaml":true},{"content":"The <xref href=\"System.Collections.ArrayList\"></xref> is read-only.  \n  \n -or-  \n  \n The <xref href=\"System.Collections.ArrayList\"></xref> has a fixed size.","nodes":[{"pos":[0,67],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Collections.ArrayList\"&gt;&lt;/xref&gt;</ph> is read-only.","source":"The <xref href=\"System.Collections.ArrayList\"></xref> is read-only."},{"pos":[74,78],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[85,156],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Collections.ArrayList\"&gt;&lt;/xref&gt;</ph> has a fixed size.","source":"The <xref href=\"System.Collections.ArrayList\"></xref> has a fixed size."}],"pos":[26084,26251],"yaml":true},{"content":"Searches the entire sorted <xref href=\"System.Collections.ArrayList\"></xref> for an element using the default comparer and returns the zero-based index of the element.","nodes":[{"pos":[0,167],"content":"Searches the entire sorted <ph id=\"ph1\">&lt;xref href=\"System.Collections.ArrayList\"&gt;&lt;/xref&gt;</ph> for an element using the default comparer and returns the zero-based index of the element.","source":"Searches the entire sorted <xref href=\"System.Collections.ArrayList\"></xref> for an element using the default comparer and returns the zero-based index of the element."}],"pos":[27550,27718],"yaml":true},{"content":"The `value` parameter and each element of the <xref:System.Collections.ArrayList> must implement the <xref:System.IComparable> interface, which is used for comparisons. The elements of the <xref:System.Collections.ArrayList> must already be sorted in increasing value according to the sort order defined by the <xref:System.IComparable> implementation; otherwise, the result might be incorrect.  \n  \n Comparing `null` with any type is allowed and does not generate an exception when using <xref:System.IComparable>. When sorting, `null` is considered to be less than any other object.  \n  \n If the <xref:System.Collections.ArrayList> contains more than one element with the same value, the method returns only one of the occurrences, and it might return any one of the occurrences, not necessarily the first one.  \n  \n If the <xref:System.Collections.ArrayList> does not contain the specified value, the method returns a negative integer. You can apply the bitwise complement operation (~) to this negative integer to get the index of the first element that is larger than the search value. When inserting the value into the <xref:System.Collections.ArrayList>, this index should be used as the insertion point to maintain the sort order.  \n  \n This method is an O(log `n`) operation, where `n` is <xref:System.Collections.ArrayList.Count%2A>.","nodes":[{"pos":[0,394],"content":"The `value` parameter and each element of the <xref:System.Collections.ArrayList> must implement the <xref:System.IComparable> interface, which is used for comparisons. The elements of the <xref:System.Collections.ArrayList> must already be sorted in increasing value according to the sort order defined by the <xref:System.IComparable> implementation; otherwise, the result might be incorrect.","nodes":[{"content":"The <ph id=\"ph1\">`value`</ph> parameter and each element of the <ph id=\"ph2\">&lt;xref:System.Collections.ArrayList&gt;</ph> must implement the <ph id=\"ph3\">&lt;xref:System.IComparable&gt;</ph> interface, which is used for comparisons.","pos":[0,168],"source":"The `value` parameter and each element of the <xref:System.Collections.ArrayList> must implement the <xref:System.IComparable> interface, which is used for comparisons."},{"content":"The elements of the <ph id=\"ph1\">&lt;xref:System.Collections.ArrayList&gt;</ph> must already be sorted in increasing value according to the sort order defined by the <ph id=\"ph2\">&lt;xref:System.IComparable&gt;</ph> implementation; otherwise, the result might be incorrect.","pos":[169,394],"source":" The elements of the <xref:System.Collections.ArrayList> must already be sorted in increasing value according to the sort order defined by the <xref:System.IComparable> implementation; otherwise, the result might be incorrect."}]},{"pos":[401,584],"content":"Comparing `null` with any type is allowed and does not generate an exception when using <xref:System.IComparable>. When sorting, `null` is considered to be less than any other object.","nodes":[{"content":"Comparing <ph id=\"ph1\">`null`</ph> with any type is allowed and does not generate an exception when using <ph id=\"ph2\">&lt;xref:System.IComparable&gt;</ph>.","pos":[0,114],"source":"Comparing `null` with any type is allowed and does not generate an exception when using <xref:System.IComparable>."},{"content":"When sorting, <ph id=\"ph1\">`null`</ph> is considered to be less than any other object.","pos":[115,183],"source":" When sorting, `null` is considered to be less than any other object."}]},{"pos":[591,812],"content":"If the <xref:System.Collections.ArrayList> contains more than one element with the same value, the method returns only one of the occurrences, and it might return any one of the occurrences, not necessarily the first one.","nodes":[{"content":"If the <ph id=\"ph1\">&lt;xref:System.Collections.ArrayList&gt;</ph> contains more than one element with the same value, the method returns only one of the occurrences, and it might return any one of the occurrences, not necessarily the first one.","pos":[0,221],"source":"If the <xref:System.Collections.ArrayList> contains more than one element with the same value, the method returns only one of the occurrences, and it might return any one of the occurrences, not necessarily the first one."}]},{"pos":[819,1238],"content":"If the <xref:System.Collections.ArrayList> does not contain the specified value, the method returns a negative integer. You can apply the bitwise complement operation (~) to this negative integer to get the index of the first element that is larger than the search value. When inserting the value into the <xref:System.Collections.ArrayList>, this index should be used as the insertion point to maintain the sort order.","nodes":[{"content":"If the <xref:System.Collections.ArrayList> does not contain the specified value, the method returns a negative integer. You can apply the bitwise complement operation (~) to this negative integer to get the index of the first element that is larger than the search value. When inserting the value into the <xref:System.Collections.ArrayList>, this index should be used as the insertion point to maintain the sort order.","pos":[0,419],"nodes":[{"content":"If the <ph id=\"ph1\">&lt;xref:System.Collections.ArrayList&gt;</ph> does not contain the specified value, the method returns a negative integer.","pos":[0,119],"source":"If the <xref:System.Collections.ArrayList> does not contain the specified value, the method returns a negative integer."},{"content":"You can apply the bitwise complement operation (~) to this negative integer to get the index of the first element that is larger than the search value.","pos":[120,271]},{"content":"When inserting the value into the <ph id=\"ph1\">&lt;xref:System.Collections.ArrayList&gt;</ph>, this index should be used as the insertion point to maintain the sort order.","pos":[272,419],"source":" When inserting the value into the <xref:System.Collections.ArrayList>, this index should be used as the insertion point to maintain the sort order."}]}]},{"pos":[1245,1343],"content":"This method is an O(log <ph id=\"ph1\">`n`</ph>) operation, where <ph id=\"ph2\">`n`</ph> is <ph id=\"ph3\">&lt;xref:System.Collections.ArrayList.Count%2A&gt;</ph>.","source":"This method is an O(log `n`) operation, where `n` is <xref:System.Collections.ArrayList.Count%2A>."}],"pos":[27729,29083],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Object\"></xref> to locate. The value can be `null`.","nodes":[{"pos":[0,74],"content":"The <xref href=\"System.Object\"></xref> to locate. The value can be `null`.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Object\"&gt;&lt;/xref&gt;</ph> to locate.","pos":[0,49],"source":"The <xref href=\"System.Object\"></xref> to locate."},{"content":"The value can be <ph id=\"ph1\">`null`</ph>.","pos":[50,74],"source":" The value can be `null`."}]}],"pos":[29917,29992],"yaml":true},{"content":"The zero-based index of <code>value</code> in the sorted <xref href=\"System.Collections.ArrayList\"></xref>, if <code>value</code> is found; otherwise, a negative number, which is the bitwise complement of the index of the next element that is larger than <code>value</code> or, if there is no larger element, the bitwise complement of <xref href=\"System.Collections.ArrayList.Count\"></xref>.","nodes":[{"pos":[0,391],"content":"The zero-based index of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept> in the sorted <ph id=\"ph2\">&lt;xref href=\"System.Collections.ArrayList\"&gt;&lt;/xref&gt;</ph>, if <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph3\">value</ph><ept id=\"p2\">&lt;/code&gt;</ept> is found; otherwise, a negative number, which is the bitwise complement of the index of the next element that is larger than <bpt id=\"p3\">&lt;code&gt;</bpt><ph id=\"ph4\">value</ph><ept id=\"p3\">&lt;/code&gt;</ept> or, if there is no larger element, the bitwise complement of <ph id=\"ph5\">&lt;xref href=\"System.Collections.ArrayList.Count\"&gt;&lt;/xref&gt;</ph>.","source":"The zero-based index of <code>value</code> in the sorted <xref href=\"System.Collections.ArrayList\"></xref>, if <code>value</code> is found; otherwise, a negative number, which is the bitwise complement of the index of the next element that is larger than <code>value</code> or, if there is no larger element, the bitwise complement of <xref href=\"System.Collections.ArrayList.Count\"></xref>."}],"pos":[30048,30440],"yaml":true},{"content":"Neither <code>value</code> nor the elements of <xref href=\"System.Collections.ArrayList\"></xref> implement the <xref href=\"System.IComparable\"></xref> interface.","nodes":[{"pos":[0,161],"content":"Neither <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept> nor the elements of <ph id=\"ph2\">&lt;xref href=\"System.Collections.ArrayList\"&gt;&lt;/xref&gt;</ph> implement the <ph id=\"ph3\">&lt;xref href=\"System.IComparable\"&gt;&lt;/xref&gt;</ph> interface.","source":"Neither <code>value</code> nor the elements of <xref href=\"System.Collections.ArrayList\"></xref> implement the <xref href=\"System.IComparable\"></xref> interface."}],"pos":[30603,30765],"yaml":true},{"content":"<code>value</code> is not of the same type as the elements of the <xref href=\"System.Collections.ArrayList\"></xref>.","nodes":[{"pos":[0,116],"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> is not of the same type as the elements of the <ph id=\"ph2\">&lt;xref href=\"System.Collections.ArrayList\"&gt;&lt;/xref&gt;</ph>.","source":"<code>value</code> is not of the same type as the elements of the <xref href=\"System.Collections.ArrayList\"></xref>."}],"pos":[30875,30992],"yaml":true},{"content":"Searches the entire sorted <xref href=\"System.Collections.ArrayList\"></xref> for an element using the specified comparer and returns the zero-based index of the element.","nodes":[{"pos":[0,169],"content":"Searches the entire sorted <ph id=\"ph1\">&lt;xref href=\"System.Collections.ArrayList\"&gt;&lt;/xref&gt;</ph> for an element using the specified comparer and returns the zero-based index of the element.","source":"Searches the entire sorted <xref href=\"System.Collections.ArrayList\"></xref> for an element using the specified comparer and returns the zero-based index of the element."}],"pos":[32411,32581],"yaml":true},{"content":"The comparer customizes how the elements are compared. For example, you can use a <xref:System.Collections.CaseInsensitiveComparer> instance as the comparer to perform case-insensitive string searches.  \n  \n If `comparer` is provided, the elements of the <xref:System.Collections.ArrayList> are compared to the specified value using the specified <xref:System.Collections.IComparer> implementation. The elements of the <xref:System.Collections.ArrayList> must already be sorted in increasing value according to the sort order defined by `comparer`; otherwise, the result might be incorrect.  \n  \n If `comparer` is `null`, the comparison is done using the <xref:System.IComparable> implementation provided by the element itself or by the specified value. The elements of the <xref:System.Collections.ArrayList> must already be sorted in increasing value according to the sort order defined by the <xref:System.IComparable> implementation; otherwise, the result might be incorrect.  \n  \n Comparing `null` with any type is allowed and does not generate an exception when using <xref:System.IComparable>. When sorting, `null` is considered to be less than any other object.  \n  \n If the <xref:System.Collections.ArrayList> contains more than one element with the same value, the method returns only one of the occurrences, and it might return any one of the occurrences, not necessarily the first one.  \n  \n If the <xref:System.Collections.ArrayList> does not contain the specified value, the method returns a negative integer. You can apply the bitwise complement operation (~) to this negative integer to get the index of the first element that is larger than the search value. When inserting the value into the <xref:System.Collections.ArrayList>, this index should be used as the insertion point to maintain the sort order.  \n  \n This method is an O(log `n`) operation, where `n` is <xref:System.Collections.ArrayList.Count%2A>.","nodes":[{"pos":[0,201],"content":"The comparer customizes how the elements are compared. For example, you can use a <xref:System.Collections.CaseInsensitiveComparer> instance as the comparer to perform case-insensitive string searches.","nodes":[{"content":"The comparer customizes how the elements are compared. For example, you can use a <xref:System.Collections.CaseInsensitiveComparer> instance as the comparer to perform case-insensitive string searches.","pos":[0,201],"nodes":[{"content":"The comparer customizes how the elements are compared.","pos":[0,54]},{"content":"For example, you can use a <ph id=\"ph1\">&lt;xref:System.Collections.CaseInsensitiveComparer&gt;</ph> instance as the comparer to perform case-insensitive string searches.","pos":[55,201],"source":" For example, you can use a <xref:System.Collections.CaseInsensitiveComparer> instance as the comparer to perform case-insensitive string searches."}]}]},{"pos":[208,590],"content":"If `comparer` is provided, the elements of the <xref:System.Collections.ArrayList> are compared to the specified value using the specified <xref:System.Collections.IComparer> implementation. The elements of the <xref:System.Collections.ArrayList> must already be sorted in increasing value according to the sort order defined by `comparer`; otherwise, the result might be incorrect.","nodes":[{"content":"If <ph id=\"ph1\">`comparer`</ph> is provided, the elements of the <ph id=\"ph2\">&lt;xref:System.Collections.ArrayList&gt;</ph> are compared to the specified value using the specified <ph id=\"ph3\">&lt;xref:System.Collections.IComparer&gt;</ph> implementation.","pos":[0,190],"source":"If `comparer` is provided, the elements of the <xref:System.Collections.ArrayList> are compared to the specified value using the specified <xref:System.Collections.IComparer> implementation."},{"content":"The elements of the <ph id=\"ph1\">&lt;xref:System.Collections.ArrayList&gt;</ph> must already be sorted in increasing value according to the sort order defined by <ph id=\"ph2\">`comparer`</ph>; otherwise, the result might be incorrect.","pos":[191,382],"source":" The elements of the <xref:System.Collections.ArrayList> must already be sorted in increasing value according to the sort order defined by `comparer`; otherwise, the result might be incorrect."}]},{"pos":[597,979],"content":"If `comparer` is `null`, the comparison is done using the <xref:System.IComparable> implementation provided by the element itself or by the specified value. The elements of the <xref:System.Collections.ArrayList> must already be sorted in increasing value according to the sort order defined by the <xref:System.IComparable> implementation; otherwise, the result might be incorrect.","nodes":[{"content":"If <ph id=\"ph1\">`comparer`</ph> is <ph id=\"ph2\">`null`</ph>, the comparison is done using the <ph id=\"ph3\">&lt;xref:System.IComparable&gt;</ph> implementation provided by the element itself or by the specified value.","pos":[0,156],"source":"If `comparer` is `null`, the comparison is done using the <xref:System.IComparable> implementation provided by the element itself or by the specified value."},{"content":"The elements of the <ph id=\"ph1\">&lt;xref:System.Collections.ArrayList&gt;</ph> must already be sorted in increasing value according to the sort order defined by the <ph id=\"ph2\">&lt;xref:System.IComparable&gt;</ph> implementation; otherwise, the result might be incorrect.","pos":[157,382],"source":" The elements of the <xref:System.Collections.ArrayList> must already be sorted in increasing value according to the sort order defined by the <xref:System.IComparable> implementation; otherwise, the result might be incorrect."}]},{"pos":[986,1169],"content":"Comparing `null` with any type is allowed and does not generate an exception when using <xref:System.IComparable>. When sorting, `null` is considered to be less than any other object.","nodes":[{"content":"Comparing <ph id=\"ph1\">`null`</ph> with any type is allowed and does not generate an exception when using <ph id=\"ph2\">&lt;xref:System.IComparable&gt;</ph>.","pos":[0,114],"source":"Comparing `null` with any type is allowed and does not generate an exception when using <xref:System.IComparable>."},{"content":"When sorting, <ph id=\"ph1\">`null`</ph> is considered to be less than any other object.","pos":[115,183],"source":" When sorting, `null` is considered to be less than any other object."}]},{"pos":[1176,1397],"content":"If the <xref:System.Collections.ArrayList> contains more than one element with the same value, the method returns only one of the occurrences, and it might return any one of the occurrences, not necessarily the first one.","nodes":[{"content":"If the <ph id=\"ph1\">&lt;xref:System.Collections.ArrayList&gt;</ph> contains more than one element with the same value, the method returns only one of the occurrences, and it might return any one of the occurrences, not necessarily the first one.","pos":[0,221],"source":"If the <xref:System.Collections.ArrayList> contains more than one element with the same value, the method returns only one of the occurrences, and it might return any one of the occurrences, not necessarily the first one."}]},{"pos":[1404,1823],"content":"If the <xref:System.Collections.ArrayList> does not contain the specified value, the method returns a negative integer. You can apply the bitwise complement operation (~) to this negative integer to get the index of the first element that is larger than the search value. When inserting the value into the <xref:System.Collections.ArrayList>, this index should be used as the insertion point to maintain the sort order.","nodes":[{"content":"If the <xref:System.Collections.ArrayList> does not contain the specified value, the method returns a negative integer. You can apply the bitwise complement operation (~) to this negative integer to get the index of the first element that is larger than the search value. When inserting the value into the <xref:System.Collections.ArrayList>, this index should be used as the insertion point to maintain the sort order.","pos":[0,419],"nodes":[{"content":"If the <ph id=\"ph1\">&lt;xref:System.Collections.ArrayList&gt;</ph> does not contain the specified value, the method returns a negative integer.","pos":[0,119],"source":"If the <xref:System.Collections.ArrayList> does not contain the specified value, the method returns a negative integer."},{"content":"You can apply the bitwise complement operation (~) to this negative integer to get the index of the first element that is larger than the search value.","pos":[120,271]},{"content":"When inserting the value into the <ph id=\"ph1\">&lt;xref:System.Collections.ArrayList&gt;</ph>, this index should be used as the insertion point to maintain the sort order.","pos":[272,419],"source":" When inserting the value into the <xref:System.Collections.ArrayList>, this index should be used as the insertion point to maintain the sort order."}]}]},{"pos":[1830,1928],"content":"This method is an O(log <ph id=\"ph1\">`n`</ph>) operation, where <ph id=\"ph2\">`n`</ph> is <ph id=\"ph3\">&lt;xref:System.Collections.ArrayList.Count%2A&gt;</ph>.","source":"This method is an O(log `n`) operation, where `n` is <xref:System.Collections.ArrayList.Count%2A>."}],"pos":[32592,34535],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Object\"></xref> to locate. The value can be `null`.","nodes":[{"pos":[0,74],"content":"The <xref href=\"System.Object\"></xref> to locate. The value can be `null`.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Object\"&gt;&lt;/xref&gt;</ph> to locate.","pos":[0,49],"source":"The <xref href=\"System.Object\"></xref> to locate."},{"content":"The value can be <ph id=\"ph1\">`null`</ph>.","pos":[50,74],"source":" The value can be `null`."}]}],"pos":[35510,35585],"yaml":true},{"content":"The <xref href=\"System.Collections.IComparer\"></xref> implementation to use when comparing elements.  \n  \n -or-  \n  \n `null` to use the default comparer that is the <xref href=\"System.IComparable\"></xref> implementation of each element.","nodes":[{"pos":[0,100],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Collections.IComparer\"&gt;&lt;/xref&gt;</ph> implementation to use when comparing elements.","source":"The <xref href=\"System.Collections.IComparer\"></xref> implementation to use when comparing elements."},{"pos":[107,111],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[118,236],"content":"<ph id=\"ph1\">`null`</ph> to use the default comparer that is the <ph id=\"ph2\">&lt;xref href=\"System.IComparable\"&gt;&lt;/xref&gt;</ph> implementation of each element.","source":"`null` to use the default comparer that is the <xref href=\"System.IComparable\"></xref> implementation of each element."}],"pos":[35664,35911],"yaml":true},{"content":"The zero-based index of <code>value</code> in the sorted <xref href=\"System.Collections.ArrayList\"></xref>, if <code>value</code> is found; otherwise, a negative number, which is the bitwise complement of the index of the next element that is larger than <code>value</code> or, if there is no larger element, the bitwise complement of <xref href=\"System.Collections.ArrayList.Count\"></xref>.","nodes":[{"pos":[0,391],"content":"The zero-based index of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept> in the sorted <ph id=\"ph2\">&lt;xref href=\"System.Collections.ArrayList\"&gt;&lt;/xref&gt;</ph>, if <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph3\">value</ph><ept id=\"p2\">&lt;/code&gt;</ept> is found; otherwise, a negative number, which is the bitwise complement of the index of the next element that is larger than <bpt id=\"p3\">&lt;code&gt;</bpt><ph id=\"ph4\">value</ph><ept id=\"p3\">&lt;/code&gt;</ept> or, if there is no larger element, the bitwise complement of <ph id=\"ph5\">&lt;xref href=\"System.Collections.ArrayList.Count\"&gt;&lt;/xref&gt;</ph>.","source":"The zero-based index of <code>value</code> in the sorted <xref href=\"System.Collections.ArrayList\"></xref>, if <code>value</code> is found; otherwise, a negative number, which is the bitwise complement of the index of the next element that is larger than <code>value</code> or, if there is no larger element, the bitwise complement of <xref href=\"System.Collections.ArrayList.Count\"></xref>."}],"pos":[35967,36359],"yaml":true},{"content":"<code>comparer</code> is `null` and neither <code>value</code> nor the elements of <xref href=\"System.Collections.ArrayList\"></xref> implement the <xref href=\"System.IComparable\"></xref> interface.","nodes":[{"pos":[0,197],"content":"<ph id=\"ph1\">&lt;code&gt;comparer&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph> and neither <ph id=\"ph3\">&lt;code&gt;value&lt;/code&gt;</ph> nor the elements of <ph id=\"ph4\">&lt;xref href=\"System.Collections.ArrayList\"&gt;&lt;/xref&gt;</ph> implement the <ph id=\"ph5\">&lt;xref href=\"System.IComparable\"&gt;&lt;/xref&gt;</ph> interface.","source":"<code>comparer</code> is `null` and neither <code>value</code> nor the elements of <xref href=\"System.Collections.ArrayList\"></xref> implement the <xref href=\"System.IComparable\"></xref> interface."}],"pos":[36522,36720],"yaml":true},{"content":"<code>comparer</code> is `null` and <code>value</code> is not of the same type as the elements of the <xref href=\"System.Collections.ArrayList\"></xref>.","nodes":[{"pos":[0,152],"content":"<ph id=\"ph1\">&lt;code&gt;comparer&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph> and <ph id=\"ph3\">&lt;code&gt;value&lt;/code&gt;</ph> is not of the same type as the elements of the <ph id=\"ph4\">&lt;xref href=\"System.Collections.ArrayList\"&gt;&lt;/xref&gt;</ph>.","source":"<code>comparer</code> is `null` and <code>value</code> is not of the same type as the elements of the <xref href=\"System.Collections.ArrayList\"></xref>."}],"pos":[36830,36983],"yaml":true},{"content":"Searches a range of elements in the sorted <xref href=\"System.Collections.ArrayList\"></xref> for an element using the specified comparer and returns the zero-based index of the element.","nodes":[{"pos":[0,185],"content":"Searches a range of elements in the sorted <ph id=\"ph1\">&lt;xref href=\"System.Collections.ArrayList\"&gt;&lt;/xref&gt;</ph> for an element using the specified comparer and returns the zero-based index of the element.","source":"Searches a range of elements in the sorted <xref href=\"System.Collections.ArrayList\"></xref> for an element using the specified comparer and returns the zero-based index of the element."}],"pos":[38522,38708],"yaml":true},{"content":"The comparer customizes how the elements are compared. For example, you can use a <xref:System.Collections.CaseInsensitiveComparer> instance as the comparer to perform case-insensitive string searches.  \n  \n If `comparer` is provided, the elements of the <xref:System.Collections.ArrayList> are compared to the specified value using the specified <xref:System.Collections.IComparer> implementation. The elements of the <xref:System.Collections.ArrayList> must already be sorted in increasing value according to the sort order defined by `comparer`; otherwise, the result might be incorrect.  \n  \n If `comparer` is `null`, the comparison is done using the <xref:System.IComparable> implementation provided by the element itself or by the specified value. The elements of the <xref:System.Collections.ArrayList> must already be sorted in increasing value according to the sort order defined by the <xref:System.IComparable> implementation; otherwise, the result might be incorrect.  \n  \n Comparing `null` with any type is allowed and does not generate an exception when using <xref:System.IComparable>. When sorting, `null` is considered to be less than any other object.  \n  \n If the <xref:System.Collections.ArrayList> contains more than one element with the same value, the method returns only one of the occurrences, and it might return any one of the occurrences, not necessarily the first one.  \n  \n If the <xref:System.Collections.ArrayList> does not contain the specified value, the method returns a negative integer. You can apply the bitwise complement operation (~) to this negative integer to get the index of the first element that is larger than the search value. When inserting the value into the <xref:System.Collections.ArrayList>, this index should be used as the insertion point to maintain the sort order.  \n  \n This method is an O(log `n`) operation, where `n` is `count`.","nodes":[{"pos":[0,201],"content":"The comparer customizes how the elements are compared. For example, you can use a <xref:System.Collections.CaseInsensitiveComparer> instance as the comparer to perform case-insensitive string searches.","nodes":[{"content":"The comparer customizes how the elements are compared. For example, you can use a <xref:System.Collections.CaseInsensitiveComparer> instance as the comparer to perform case-insensitive string searches.","pos":[0,201],"nodes":[{"content":"The comparer customizes how the elements are compared.","pos":[0,54]},{"content":"For example, you can use a <ph id=\"ph1\">&lt;xref:System.Collections.CaseInsensitiveComparer&gt;</ph> instance as the comparer to perform case-insensitive string searches.","pos":[55,201],"source":" For example, you can use a <xref:System.Collections.CaseInsensitiveComparer> instance as the comparer to perform case-insensitive string searches."}]}]},{"pos":[208,590],"content":"If `comparer` is provided, the elements of the <xref:System.Collections.ArrayList> are compared to the specified value using the specified <xref:System.Collections.IComparer> implementation. The elements of the <xref:System.Collections.ArrayList> must already be sorted in increasing value according to the sort order defined by `comparer`; otherwise, the result might be incorrect.","nodes":[{"content":"If <ph id=\"ph1\">`comparer`</ph> is provided, the elements of the <ph id=\"ph2\">&lt;xref:System.Collections.ArrayList&gt;</ph> are compared to the specified value using the specified <ph id=\"ph3\">&lt;xref:System.Collections.IComparer&gt;</ph> implementation.","pos":[0,190],"source":"If `comparer` is provided, the elements of the <xref:System.Collections.ArrayList> are compared to the specified value using the specified <xref:System.Collections.IComparer> implementation."},{"content":"The elements of the <ph id=\"ph1\">&lt;xref:System.Collections.ArrayList&gt;</ph> must already be sorted in increasing value according to the sort order defined by <ph id=\"ph2\">`comparer`</ph>; otherwise, the result might be incorrect.","pos":[191,382],"source":" The elements of the <xref:System.Collections.ArrayList> must already be sorted in increasing value according to the sort order defined by `comparer`; otherwise, the result might be incorrect."}]},{"pos":[597,979],"content":"If `comparer` is `null`, the comparison is done using the <xref:System.IComparable> implementation provided by the element itself or by the specified value. The elements of the <xref:System.Collections.ArrayList> must already be sorted in increasing value according to the sort order defined by the <xref:System.IComparable> implementation; otherwise, the result might be incorrect.","nodes":[{"content":"If <ph id=\"ph1\">`comparer`</ph> is <ph id=\"ph2\">`null`</ph>, the comparison is done using the <ph id=\"ph3\">&lt;xref:System.IComparable&gt;</ph> implementation provided by the element itself or by the specified value.","pos":[0,156],"source":"If `comparer` is `null`, the comparison is done using the <xref:System.IComparable> implementation provided by the element itself or by the specified value."},{"content":"The elements of the <ph id=\"ph1\">&lt;xref:System.Collections.ArrayList&gt;</ph> must already be sorted in increasing value according to the sort order defined by the <ph id=\"ph2\">&lt;xref:System.IComparable&gt;</ph> implementation; otherwise, the result might be incorrect.","pos":[157,382],"source":" The elements of the <xref:System.Collections.ArrayList> must already be sorted in increasing value according to the sort order defined by the <xref:System.IComparable> implementation; otherwise, the result might be incorrect."}]},{"pos":[986,1169],"content":"Comparing `null` with any type is allowed and does not generate an exception when using <xref:System.IComparable>. When sorting, `null` is considered to be less than any other object.","nodes":[{"content":"Comparing <ph id=\"ph1\">`null`</ph> with any type is allowed and does not generate an exception when using <ph id=\"ph2\">&lt;xref:System.IComparable&gt;</ph>.","pos":[0,114],"source":"Comparing `null` with any type is allowed and does not generate an exception when using <xref:System.IComparable>."},{"content":"When sorting, <ph id=\"ph1\">`null`</ph> is considered to be less than any other object.","pos":[115,183],"source":" When sorting, `null` is considered to be less than any other object."}]},{"pos":[1176,1397],"content":"If the <xref:System.Collections.ArrayList> contains more than one element with the same value, the method returns only one of the occurrences, and it might return any one of the occurrences, not necessarily the first one.","nodes":[{"content":"If the <ph id=\"ph1\">&lt;xref:System.Collections.ArrayList&gt;</ph> contains more than one element with the same value, the method returns only one of the occurrences, and it might return any one of the occurrences, not necessarily the first one.","pos":[0,221],"source":"If the <xref:System.Collections.ArrayList> contains more than one element with the same value, the method returns only one of the occurrences, and it might return any one of the occurrences, not necessarily the first one."}]},{"pos":[1404,1823],"content":"If the <xref:System.Collections.ArrayList> does not contain the specified value, the method returns a negative integer. You can apply the bitwise complement operation (~) to this negative integer to get the index of the first element that is larger than the search value. When inserting the value into the <xref:System.Collections.ArrayList>, this index should be used as the insertion point to maintain the sort order.","nodes":[{"content":"If the <xref:System.Collections.ArrayList> does not contain the specified value, the method returns a negative integer. You can apply the bitwise complement operation (~) to this negative integer to get the index of the first element that is larger than the search value. When inserting the value into the <xref:System.Collections.ArrayList>, this index should be used as the insertion point to maintain the sort order.","pos":[0,419],"nodes":[{"content":"If the <ph id=\"ph1\">&lt;xref:System.Collections.ArrayList&gt;</ph> does not contain the specified value, the method returns a negative integer.","pos":[0,119],"source":"If the <xref:System.Collections.ArrayList> does not contain the specified value, the method returns a negative integer."},{"content":"You can apply the bitwise complement operation (~) to this negative integer to get the index of the first element that is larger than the search value.","pos":[120,271]},{"content":"When inserting the value into the <ph id=\"ph1\">&lt;xref:System.Collections.ArrayList&gt;</ph>, this index should be used as the insertion point to maintain the sort order.","pos":[272,419],"source":" When inserting the value into the <xref:System.Collections.ArrayList>, this index should be used as the insertion point to maintain the sort order."}]}]},{"pos":[1830,1891],"content":"This method is an O(log <ph id=\"ph1\">`n`</ph>) operation, where <ph id=\"ph2\">`n`</ph> is <ph id=\"ph3\">`count`</ph>.","source":"This method is an O(log `n`) operation, where `n` is `count`."}],"pos":[38719,40625],"yaml":true,"extradata":"MT"},{"content":"The zero-based starting index of the range to search.","nodes":[{"pos":[0,53],"content":"The zero-based starting index of the range to search.","nodes":[{"content":"The zero-based starting index of the range to search.","pos":[0,53]}]}],"pos":[40833,40887],"yaml":true},{"content":"The length of the range to search.","nodes":[{"pos":[0,34],"content":"The length of the range to search.","nodes":[{"content":"The length of the range to search.","pos":[0,34]}]}],"pos":[40947,40982],"yaml":true},{"content":"The <xref href=\"System.Object\"></xref> to locate. The value can be `null`.","nodes":[{"pos":[0,74],"content":"The <xref href=\"System.Object\"></xref> to locate. The value can be `null`.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Object\"&gt;&lt;/xref&gt;</ph> to locate.","pos":[0,49],"source":"The <xref href=\"System.Object\"></xref> to locate."},{"content":"The value can be <ph id=\"ph1\">`null`</ph>.","pos":[50,74],"source":" The value can be `null`."}]}],"pos":[41043,41118],"yaml":true},{"content":"The <xref href=\"System.Collections.IComparer\"></xref> implementation to use when comparing elements.  \n  \n -or-  \n  \n `null` to use the default comparer that is the <xref href=\"System.IComparable\"></xref> implementation of each element.","nodes":[{"pos":[0,100],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Collections.IComparer\"&gt;&lt;/xref&gt;</ph> implementation to use when comparing elements.","source":"The <xref href=\"System.Collections.IComparer\"></xref> implementation to use when comparing elements."},{"pos":[107,111],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[118,236],"content":"<ph id=\"ph1\">`null`</ph> to use the default comparer that is the <ph id=\"ph2\">&lt;xref href=\"System.IComparable\"&gt;&lt;/xref&gt;</ph> implementation of each element.","source":"`null` to use the default comparer that is the <xref href=\"System.IComparable\"></xref> implementation of each element."}],"pos":[41197,41444],"yaml":true},{"content":"The zero-based index of <code>value</code> in the sorted <xref href=\"System.Collections.ArrayList\"></xref>, if <code>value</code> is found; otherwise, a negative number, which is the bitwise complement of the index of the next element that is larger than <code>value</code> or, if there is no larger element, the bitwise complement of <xref href=\"System.Collections.ArrayList.Count\"></xref>.","nodes":[{"pos":[0,391],"content":"The zero-based index of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept> in the sorted <ph id=\"ph2\">&lt;xref href=\"System.Collections.ArrayList\"&gt;&lt;/xref&gt;</ph>, if <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph3\">value</ph><ept id=\"p2\">&lt;/code&gt;</ept> is found; otherwise, a negative number, which is the bitwise complement of the index of the next element that is larger than <bpt id=\"p3\">&lt;code&gt;</bpt><ph id=\"ph4\">value</ph><ept id=\"p3\">&lt;/code&gt;</ept> or, if there is no larger element, the bitwise complement of <ph id=\"ph5\">&lt;xref href=\"System.Collections.ArrayList.Count\"&gt;&lt;/xref&gt;</ph>.","source":"The zero-based index of <code>value</code> in the sorted <xref href=\"System.Collections.ArrayList\"></xref>, if <code>value</code> is found; otherwise, a negative number, which is the bitwise complement of the index of the next element that is larger than <code>value</code> or, if there is no larger element, the bitwise complement of <xref href=\"System.Collections.ArrayList.Count\"></xref>."}],"pos":[41500,41892],"yaml":true},{"content":"<code>index</code> and <code>count</code> do not denote a valid range in the <xref href=\"System.Collections.ArrayList\"></xref>.  \n  \n -or-  \n  \n <code>comparer</code> is `null` and neither <code>value</code> nor the elements of <xref href=\"System.Collections.ArrayList\"></xref> implement the <xref href=\"System.IComparable\"></xref> interface.","nodes":[{"pos":[0,127],"content":"<ph id=\"ph1\">&lt;code&gt;index&lt;/code&gt;</ph> and <ph id=\"ph2\">&lt;code&gt;count&lt;/code&gt;</ph> do not denote a valid range in the <ph id=\"ph3\">&lt;xref href=\"System.Collections.ArrayList\"&gt;&lt;/xref&gt;</ph>.","source":"<code>index</code> and <code>count</code> do not denote a valid range in the <xref href=\"System.Collections.ArrayList\"></xref>."},{"pos":[134,138],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[145,342],"content":"<ph id=\"ph1\">&lt;code&gt;comparer&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph> and neither <ph id=\"ph3\">&lt;code&gt;value&lt;/code&gt;</ph> nor the elements of <ph id=\"ph4\">&lt;xref href=\"System.Collections.ArrayList\"&gt;&lt;/xref&gt;</ph> implement the <ph id=\"ph5\">&lt;xref href=\"System.IComparable\"&gt;&lt;/xref&gt;</ph> interface.","source":"<code>comparer</code> is `null` and neither <code>value</code> nor the elements of <xref href=\"System.Collections.ArrayList\"></xref> implement the <xref href=\"System.IComparable\"></xref> interface."}],"pos":[42055,42410],"yaml":true},{"content":"<code>comparer</code> is `null` and <code>value</code> is not of the same type as the elements of the <xref href=\"System.Collections.ArrayList\"></xref>.","nodes":[{"pos":[0,152],"content":"<ph id=\"ph1\">&lt;code&gt;comparer&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph> and <ph id=\"ph3\">&lt;code&gt;value&lt;/code&gt;</ph> is not of the same type as the elements of the <ph id=\"ph4\">&lt;xref href=\"System.Collections.ArrayList\"&gt;&lt;/xref&gt;</ph>.","source":"<code>comparer</code> is `null` and <code>value</code> is not of the same type as the elements of the <xref href=\"System.Collections.ArrayList\"></xref>."}],"pos":[42520,42673],"yaml":true},{"content":"<code>index</code> is less than zero.  \n  \n -or-  \n  \n <code>count</code> is less than zero.","nodes":[{"pos":[0,37],"content":"<ph id=\"ph1\">&lt;code&gt;index&lt;/code&gt;</ph> is less than zero.","source":"<code>index</code> is less than zero."},{"pos":[44,48],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[55,92],"content":"<ph id=\"ph1\">&lt;code&gt;count&lt;/code&gt;</ph> is less than zero.","source":"<code>count</code> is less than zero."}],"pos":[42787,42886],"yaml":true},{"content":"Gets or sets the number of elements that the <xref href=\"System.Collections.ArrayList\"></xref> can contain.","nodes":[{"pos":[0,107],"content":"Gets or sets the number of elements that the <ph id=\"ph1\">&lt;xref href=\"System.Collections.ArrayList\"&gt;&lt;/xref&gt;</ph> can contain.","source":"Gets or sets the number of elements that the <xref href=\"System.Collections.ArrayList\"></xref> can contain."}],"pos":[44094,44202],"yaml":true},{"content":"<xref:System.Collections.ArrayList.Capacity%2A> is the number of elements that the <xref:System.Collections.ArrayList> can store. <xref:System.Collections.ArrayList.Count%2A> is the number of elements that are actually in the <xref:System.Collections.ArrayList>.  \n  \n <xref:System.Collections.ArrayList.Capacity%2A> is always greater than or equal to <xref:System.Collections.ArrayList.Count%2A>. If <xref:System.Collections.ArrayList.Count%2A> exceeds <xref:System.Collections.ArrayList.Capacity%2A> while adding elements, the capacity is automatically increased by reallocating the internal array before copying the old elements and adding the new elements.  \n  \n The capacity can be decreased by calling <xref:System.Collections.ArrayList.TrimToSize%2A> or by setting the <xref:System.Collections.ArrayList.Capacity%2A> property explicitly. When the value of <xref:System.Collections.ArrayList.Capacity%2A> is set explicitly, the internal array is also reallocated to accommodate the specified capacity.  \n  \n Retrieving the value of this property is an O(1) operation; setting the property is an O(`n`) operation, where `n` is the new capacity.","nodes":[{"pos":[0,262],"content":"<xref:System.Collections.ArrayList.Capacity%2A> is the number of elements that the <xref:System.Collections.ArrayList> can store. <xref:System.Collections.ArrayList.Count%2A> is the number of elements that are actually in the <xref:System.Collections.ArrayList>.","nodes":[{"content":"<xref:System.Collections.ArrayList.Capacity%2A> is the number of elements that the <xref:System.Collections.ArrayList> can store. <xref:System.Collections.ArrayList.Count%2A> is the number of elements that are actually in the <xref:System.Collections.ArrayList>.","pos":[0,262],"nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Collections.ArrayList.Capacity%2A&gt;</ph> is the number of elements that the <ph id=\"ph2\">&lt;xref:System.Collections.ArrayList&gt;</ph> can store.","pos":[0,129],"source":"<xref:System.Collections.ArrayList.Capacity%2A> is the number of elements that the <xref:System.Collections.ArrayList> can store."},{"content":"<ph id=\"ph1\">&lt;xref:System.Collections.ArrayList.Count%2A&gt;</ph> is the number of elements that are actually in the <ph id=\"ph2\">&lt;xref:System.Collections.ArrayList&gt;</ph>.","pos":[130,262],"source":" <xref:System.Collections.ArrayList.Count%2A> is the number of elements that are actually in the <xref:System.Collections.ArrayList>."}]}]},{"pos":[269,660],"content":"<xref:System.Collections.ArrayList.Capacity%2A> is always greater than or equal to <xref:System.Collections.ArrayList.Count%2A>. If <xref:System.Collections.ArrayList.Count%2A> exceeds <xref:System.Collections.ArrayList.Capacity%2A> while adding elements, the capacity is automatically increased by reallocating the internal array before copying the old elements and adding the new elements.","nodes":[{"content":"<xref:System.Collections.ArrayList.Capacity%2A> is always greater than or equal to <xref:System.Collections.ArrayList.Count%2A>. If <xref:System.Collections.ArrayList.Count%2A> exceeds <xref:System.Collections.ArrayList.Capacity%2A> while adding elements, the capacity is automatically increased by reallocating the internal array before copying the old elements and adding the new elements.","pos":[0,391],"nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Collections.ArrayList.Capacity%2A&gt;</ph> is always greater than or equal to <ph id=\"ph2\">&lt;xref:System.Collections.ArrayList.Count%2A&gt;</ph>.","pos":[0,128],"source":"<xref:System.Collections.ArrayList.Capacity%2A> is always greater than or equal to <xref:System.Collections.ArrayList.Count%2A>."},{"content":"If <ph id=\"ph1\">&lt;xref:System.Collections.ArrayList.Count%2A&gt;</ph> exceeds <ph id=\"ph2\">&lt;xref:System.Collections.ArrayList.Capacity%2A&gt;</ph> while adding elements, the capacity is automatically increased by reallocating the internal array before copying the old elements and adding the new elements.","pos":[129,391],"source":" If <xref:System.Collections.ArrayList.Count%2A> exceeds <xref:System.Collections.ArrayList.Capacity%2A> while adding elements, the capacity is automatically increased by reallocating the internal array before copying the old elements and adding the new elements."}]}]},{"pos":[667,1007],"content":"The capacity can be decreased by calling <xref:System.Collections.ArrayList.TrimToSize%2A> or by setting the <xref:System.Collections.ArrayList.Capacity%2A> property explicitly. When the value of <xref:System.Collections.ArrayList.Capacity%2A> is set explicitly, the internal array is also reallocated to accommodate the specified capacity.","nodes":[{"content":"The capacity can be decreased by calling <xref:System.Collections.ArrayList.TrimToSize%2A> or by setting the <xref:System.Collections.ArrayList.Capacity%2A> property explicitly. When the value of <xref:System.Collections.ArrayList.Capacity%2A> is set explicitly, the internal array is also reallocated to accommodate the specified capacity.","pos":[0,340],"nodes":[{"content":"The capacity can be decreased by calling <ph id=\"ph1\">&lt;xref:System.Collections.ArrayList.TrimToSize%2A&gt;</ph> or by setting the <ph id=\"ph2\">&lt;xref:System.Collections.ArrayList.Capacity%2A&gt;</ph> property explicitly.","pos":[0,177],"source":"The capacity can be decreased by calling <xref:System.Collections.ArrayList.TrimToSize%2A> or by setting the <xref:System.Collections.ArrayList.Capacity%2A> property explicitly."},{"content":"When the value of <ph id=\"ph1\">&lt;xref:System.Collections.ArrayList.Capacity%2A&gt;</ph> is set explicitly, the internal array is also reallocated to accommodate the specified capacity.","pos":[178,340],"source":" When the value of <xref:System.Collections.ArrayList.Capacity%2A> is set explicitly, the internal array is also reallocated to accommodate the specified capacity."}]}]},{"pos":[1014,1149],"content":"Retrieving the value of this property is an O(1) operation; setting the property is an O(<ph id=\"ph1\">`n`</ph>) operation, where <ph id=\"ph2\">`n`</ph> is the new capacity.","source":"Retrieving the value of this property is an O(1) operation; setting the property is an O(`n`) operation, where `n` is the new capacity."}],"pos":[44213,45371],"yaml":true,"extradata":"MT"},{"content":"The number of elements that the <xref href=\"System.Collections.ArrayList\"></xref> can contain.","nodes":[{"pos":[0,94],"content":"The number of elements that the <ph id=\"ph1\">&lt;xref href=\"System.Collections.ArrayList\"&gt;&lt;/xref&gt;</ph> can contain.","source":"The number of elements that the <xref href=\"System.Collections.ArrayList\"></xref> can contain."}],"pos":[45492,45587],"yaml":true},{"content":"<xref href=\"System.Collections.ArrayList.Capacity\"></xref> is set to a value that is less than <xref href=\"System.Collections.ArrayList.Count\"></xref>.","nodes":[{"pos":[0,151],"content":"<ph id=\"ph1\">&lt;xref href=\"System.Collections.ArrayList.Capacity\"&gt;&lt;/xref&gt;</ph> is set to a value that is less than <ph id=\"ph2\">&lt;xref href=\"System.Collections.ArrayList.Count\"&gt;&lt;/xref&gt;</ph>.","source":"<xref href=\"System.Collections.ArrayList.Capacity\"></xref> is set to a value that is less than <xref href=\"System.Collections.ArrayList.Count\"></xref>."}],"pos":[45766,45918],"yaml":true},{"content":"There is not enough memory available on the system.","nodes":[{"pos":[0,51],"content":"There is not enough memory available on the system.","nodes":[{"content":"There is not enough memory available on the system.","pos":[0,51]}]}],"pos":[46018,46070],"yaml":true},{"content":"Removes all elements from the <xref href=\"System.Collections.ArrayList\"></xref>.","nodes":[{"pos":[0,80],"content":"Removes all elements from the <ph id=\"ph1\">&lt;xref href=\"System.Collections.ArrayList\"&gt;&lt;/xref&gt;</ph>.","source":"Removes all elements from the <xref href=\"System.Collections.ArrayList\"></xref>."}],"pos":[47264,47345],"yaml":true},{"content":"<xref:System.Collections.ArrayList.Count%2A> is set to zero, and references to other objects from elements of the collection are also released.  \n  \n <xref:System.Collections.ArrayList.Capacity%2A> remains unchanged.  To reset the capacity of the <xref:System.Collections.ArrayList>, call <xref:System.Collections.ArrayList.TrimToSize%2A> or set the <xref:System.Collections.ArrayList.Capacity%2A> property directly. Trimming an empty <xref:System.Collections.ArrayList> sets the capacity of the <xref:System.Collections.ArrayList> to the default capacity.  \n  \n This method is an O(`n`) operation, where `n` is <xref:System.Collections.ArrayList.Count%2A>.","nodes":[{"pos":[0,143],"content":"<xref:System.Collections.ArrayList.Count%2A> is set to zero, and references to other objects from elements of the collection are also released.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Collections.ArrayList.Count%2A&gt;</ph> is set to zero, and references to other objects from elements of the collection are also released.","pos":[0,143],"source":"<xref:System.Collections.ArrayList.Count%2A> is set to zero, and references to other objects from elements of the collection are also released."}]},{"pos":[150,556],"content":"<xref:System.Collections.ArrayList.Capacity%2A> remains unchanged.  To reset the capacity of the <xref:System.Collections.ArrayList>, call <xref:System.Collections.ArrayList.TrimToSize%2A> or set the <xref:System.Collections.ArrayList.Capacity%2A> property directly. Trimming an empty <xref:System.Collections.ArrayList> sets the capacity of the <xref:System.Collections.ArrayList> to the default capacity.","nodes":[{"content":"<xref:System.Collections.ArrayList.Capacity%2A> remains unchanged.  To reset the capacity of the <xref:System.Collections.ArrayList>, call <xref:System.Collections.ArrayList.TrimToSize%2A> or set the <xref:System.Collections.ArrayList.Capacity%2A> property directly. Trimming an empty <xref:System.Collections.ArrayList> sets the capacity of the <xref:System.Collections.ArrayList> to the default capacity.","pos":[0,406],"nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Collections.ArrayList.Capacity%2A&gt;</ph> remains unchanged.","pos":[0,66],"source":"<xref:System.Collections.ArrayList.Capacity%2A> remains unchanged."},{"content":"To reset the capacity of the <ph id=\"ph1\">&lt;xref:System.Collections.ArrayList&gt;</ph>, call <ph id=\"ph2\">&lt;xref:System.Collections.ArrayList.TrimToSize%2A&gt;</ph> or set the <ph id=\"ph3\">&lt;xref:System.Collections.ArrayList.Capacity%2A&gt;</ph> property directly.","pos":[68,266],"source":"  To reset the capacity of the <xref:System.Collections.ArrayList>, call <xref:System.Collections.ArrayList.TrimToSize%2A> or set the <xref:System.Collections.ArrayList.Capacity%2A> property directly."},{"content":"Trimming an empty <ph id=\"ph1\">&lt;xref:System.Collections.ArrayList&gt;</ph> sets the capacity of the <ph id=\"ph2\">&lt;xref:System.Collections.ArrayList&gt;</ph> to the default capacity.","pos":[267,406],"source":" Trimming an empty <xref:System.Collections.ArrayList> sets the capacity of the <xref:System.Collections.ArrayList> to the default capacity."}]}]},{"pos":[563,657],"content":"This method is an O(<ph id=\"ph1\">`n`</ph>) operation, where <ph id=\"ph2\">`n`</ph> is <ph id=\"ph3\">&lt;xref:System.Collections.ArrayList.Count%2A&gt;</ph>.","source":"This method is an O(`n`) operation, where `n` is <xref:System.Collections.ArrayList.Count%2A>."}],"pos":[47356,48020],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Collections.ArrayList\"></xref> is read-only.  \n  \n -or-  \n  \n The <xref href=\"System.Collections.ArrayList\"></xref> has a fixed size.","nodes":[{"pos":[0,67],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Collections.ArrayList\"&gt;&lt;/xref&gt;</ph> is read-only.","source":"The <xref href=\"System.Collections.ArrayList\"></xref> is read-only."},{"pos":[74,78],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[85,156],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Collections.ArrayList\"&gt;&lt;/xref&gt;</ph> has a fixed size.","source":"The <xref href=\"System.Collections.ArrayList\"></xref> has a fixed size."}],"pos":[48906,49073],"yaml":true},{"content":"Creates a shallow copy of the <xref href=\"System.Collections.ArrayList\"></xref>.","nodes":[{"pos":[0,80],"content":"Creates a shallow copy of the <ph id=\"ph1\">&lt;xref href=\"System.Collections.ArrayList\"&gt;&lt;/xref&gt;</ph>.","source":"Creates a shallow copy of the <xref href=\"System.Collections.ArrayList\"></xref>."}],"pos":[50267,50348],"yaml":true},{"content":"A shallow copy of a collection copies only the elements of the collection, whether they are reference types or value types, but it does not copy the objects that the references refer to. The references in the new collection point to the same objects that the references in the original collection point to.  \n  \n In contrast, a deep copy of a collection copies the elements and everything directly or indirectly referenced by the elements.  \n  \n This method is an O(`n`) operation, where `n` is <xref:System.Collections.ArrayList.Count%2A>.","nodes":[{"pos":[0,306],"content":"A shallow copy of a collection copies only the elements of the collection, whether they are reference types or value types, but it does not copy the objects that the references refer to. The references in the new collection point to the same objects that the references in the original collection point to.","nodes":[{"content":"A shallow copy of a collection copies only the elements of the collection, whether they are reference types or value types, but it does not copy the objects that the references refer to. The references in the new collection point to the same objects that the references in the original collection point to.","pos":[0,306],"nodes":[{"content":"A shallow copy of a collection copies only the elements of the collection, whether they are reference types or value types, but it does not copy the objects that the references refer to.","pos":[0,186]},{"content":"The references in the new collection point to the same objects that the references in the original collection point to.","pos":[187,306]}]}]},{"pos":[313,439],"content":"In contrast, a deep copy of a collection copies the elements and everything directly or indirectly referenced by the elements.","nodes":[{"content":"In contrast, a deep copy of a collection copies the elements and everything directly or indirectly referenced by the elements.","pos":[0,126]}]},{"pos":[446,540],"content":"This method is an O(<ph id=\"ph1\">`n`</ph>) operation, where <ph id=\"ph2\">`n`</ph> is <ph id=\"ph3\">&lt;xref:System.Collections.ArrayList.Count%2A&gt;</ph>.","source":"This method is an O(`n`) operation, where `n` is <xref:System.Collections.ArrayList.Count%2A>."}],"pos":[50359,50906],"yaml":true,"extradata":"MT"},{"content":"A shallow copy of the <xref href=\"System.Collections.ArrayList\"></xref>.","nodes":[{"pos":[0,72],"content":"A shallow copy of the <ph id=\"ph1\">&lt;xref href=\"System.Collections.ArrayList\"&gt;&lt;/xref&gt;</ph>.","source":"A shallow copy of the <xref href=\"System.Collections.ArrayList\"></xref>."}],"pos":[51037,51110],"yaml":true},{"content":"Determines whether an element is in the <xref href=\"System.Collections.ArrayList\"></xref>.","nodes":[{"pos":[0,90],"content":"Determines whether an element is in the <ph id=\"ph1\">&lt;xref href=\"System.Collections.ArrayList\"&gt;&lt;/xref&gt;</ph>.","source":"Determines whether an element is in the <xref href=\"System.Collections.ArrayList\"></xref>."}],"pos":[52450,52541],"yaml":true},{"content":"This method performs a linear search; therefore, this method is an O(`n`) operation, where `n` is <xref:System.Collections.ArrayList.Count%2A>.  \n  \n This method determines equality by calling <xref:System.Object.Equals%2A?displayProperty=fullName>.  \n  \n Starting with the .NET Framework 2.0, this method uses the collection’s objects’ <xref:System.Object.Equals%2A> and <xref:System.IComparable.CompareTo%2A> methods on `item` to determine whether item exists. In the earlier versions of the .NET Framework, this determination was made by using the <xref:System.Object.Equals%2A> and <xref:System.IComparable.CompareTo%2A> methods of the `item` parameter on the objects in the collection.","nodes":[{"pos":[0,143],"content":"This method performs a linear search; therefore, this method is an O(<ph id=\"ph1\">`n`</ph>) operation, where <ph id=\"ph2\">`n`</ph> is <ph id=\"ph3\">&lt;xref:System.Collections.ArrayList.Count%2A&gt;</ph>.","source":"This method performs a linear search; therefore, this method is an O(`n`) operation, where `n` is <xref:System.Collections.ArrayList.Count%2A>."},{"pos":[150,249],"content":"This method determines equality by calling <xref:System.Object.Equals%2A?displayProperty=fullName>.","nodes":[{"content":"This method determines equality by calling <ph id=\"ph1\">&lt;xref:System.Object.Equals%2A?displayProperty=fullName&gt;</ph>.","pos":[0,99],"source":"This method determines equality by calling <xref:System.Object.Equals%2A?displayProperty=fullName>."}]},{"pos":[256,690],"content":"Starting with the .NET Framework 2.0, this method uses the collection’s objects’ <xref:System.Object.Equals%2A> and <xref:System.IComparable.CompareTo%2A> methods on `item` to determine whether item exists. In the earlier versions of the .NET Framework, this determination was made by using the <xref:System.Object.Equals%2A> and <xref:System.IComparable.CompareTo%2A> methods of the `item` parameter on the objects in the collection.","nodes":[{"content":"Starting with the .NET Framework 2.0, this method uses the collection’s objects’ <ph id=\"ph1\">&lt;xref:System.Object.Equals%2A&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.IComparable.CompareTo%2A&gt;</ph> methods on <ph id=\"ph3\">`item`</ph> to determine whether item exists.","pos":[0,206],"source":"Starting with the .NET Framework 2.0, this method uses the collection’s objects’ <xref:System.Object.Equals%2A> and <xref:System.IComparable.CompareTo%2A> methods on `item` to determine whether item exists."},{"content":"In the earlier versions of the .NET Framework, this determination was made by using the <ph id=\"ph1\">&lt;xref:System.Object.Equals%2A&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.IComparable.CompareTo%2A&gt;</ph> methods of the <ph id=\"ph3\">`item`</ph> parameter on the objects in the collection.","pos":[207,434],"source":" In the earlier versions of the .NET Framework, this determination was made by using the <xref:System.Object.Equals%2A> and <xref:System.IComparable.CompareTo%2A> methods of the `item` parameter on the objects in the collection."}]}],"pos":[52552,53249],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Object\"></xref> to locate in the <xref href=\"System.Collections.ArrayList\"></xref>. The value can be `null`.","nodes":[{"pos":[0,131],"content":"The <xref href=\"System.Object\"></xref> to locate in the <xref href=\"System.Collections.ArrayList\"></xref>. The value can be `null`.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Object\"&gt;&lt;/xref&gt;</ph> to locate in the <ph id=\"ph2\">&lt;xref href=\"System.Collections.ArrayList\"&gt;&lt;/xref&gt;</ph>.","pos":[0,106],"source":"The <xref href=\"System.Object\"></xref> to locate in the <xref href=\"System.Collections.ArrayList\"></xref>."},{"content":"The value can be <ph id=\"ph1\">`null`</ph>.","pos":[107,131],"source":" The value can be `null`."}]}],"pos":[53392,53524],"yaml":true},{"content":"`true` if <code>item</code> is found in the <xref href=\"System.Collections.ArrayList\"></xref>; otherwise, `false`.","nodes":[{"pos":[0,114],"content":"<ph id=\"ph1\">`true`</ph> if <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">item</ph><ept id=\"p1\">&lt;/code&gt;</ept> is found in the <ph id=\"ph3\">&lt;xref href=\"System.Collections.ArrayList\"&gt;&lt;/xref&gt;</ph>; otherwise, <ph id=\"ph4\">`false`</ph>.","source":"`true` if <code>item</code> is found in the <xref href=\"System.Collections.ArrayList\"></xref>; otherwise, `false`."}],"pos":[53582,53699],"yaml":true},{"content":"Copies the entire <xref href=\"System.Collections.ArrayList\"></xref> to a compatible one-dimensional <xref href=\"System.Array\"></xref>, starting at the beginning of the target array.","nodes":[{"pos":[0,181],"content":"Copies the entire <ph id=\"ph1\">&lt;xref href=\"System.Collections.ArrayList\"&gt;&lt;/xref&gt;</ph> to a compatible one-dimensional <ph id=\"ph2\">&lt;xref href=\"System.Array\"&gt;&lt;/xref&gt;</ph>, starting at the beginning of the target array.","source":"Copies the entire <xref href=\"System.Collections.ArrayList\"></xref> to a compatible one-dimensional <xref href=\"System.Array\"></xref>, starting at the beginning of the target array."}],"pos":[55024,55206],"yaml":true},{"content":"The specified array must be of a compatible type.  \n  \n This method uses <xref:System.Array.Copy%2A?displayProperty=fullName> to copy the elements.  \n  \n The elements are copied to the <xref:System.Array> in the same order in which the enumerator iterates through the <xref:System.Collections.ArrayList>.  \n  \n This method is an O(`n`) operation, where `n` is <xref:System.Collections.ArrayList.Count%2A>.","nodes":[{"pos":[0,49],"content":"The specified array must be of a compatible type.","nodes":[{"content":"The specified array must be of a compatible type.","pos":[0,49]}]},{"pos":[56,147],"content":"This method uses <xref:System.Array.Copy%2A?displayProperty=fullName> to copy the elements.","nodes":[{"content":"This method uses <ph id=\"ph1\">&lt;xref:System.Array.Copy%2A?displayProperty=fullName&gt;</ph> to copy the elements.","pos":[0,91],"source":"This method uses <xref:System.Array.Copy%2A?displayProperty=fullName> to copy the elements."}]},{"pos":[154,304],"content":"The elements are copied to the <xref:System.Array> in the same order in which the enumerator iterates through the <xref:System.Collections.ArrayList>.","nodes":[{"content":"The elements are copied to the <ph id=\"ph1\">&lt;xref:System.Array&gt;</ph> in the same order in which the enumerator iterates through the <ph id=\"ph2\">&lt;xref:System.Collections.ArrayList&gt;</ph>.","pos":[0,150],"source":"The elements are copied to the <xref:System.Array> in the same order in which the enumerator iterates through the <xref:System.Collections.ArrayList>."}]},{"pos":[311,405],"content":"This method is an O(<ph id=\"ph1\">`n`</ph>) operation, where <ph id=\"ph2\">`n`</ph> is <ph id=\"ph3\">&lt;xref:System.Collections.ArrayList.Count%2A&gt;</ph>.","source":"This method is an O(`n`) operation, where `n` is <xref:System.Collections.ArrayList.Count%2A>."}],"pos":[55217,55631],"yaml":true,"extradata":"MT"},{"content":"The one-dimensional <xref href=\"System.Array\"></xref> that is the destination of the elements copied from <xref href=\"System.Collections.ArrayList\"></xref>. The <xref href=\"System.Array\"></xref> must have zero-based indexing.","nodes":[{"pos":[0,225],"content":"The one-dimensional <xref href=\"System.Array\"></xref> that is the destination of the elements copied from <xref href=\"System.Collections.ArrayList\"></xref>. The <xref href=\"System.Array\"></xref> must have zero-based indexing.","nodes":[{"content":"The one-dimensional <ph id=\"ph1\">&lt;xref href=\"System.Array\"&gt;&lt;/xref&gt;</ph> that is the destination of the elements copied from <ph id=\"ph2\">&lt;xref href=\"System.Collections.ArrayList\"&gt;&lt;/xref&gt;</ph>.","pos":[0,156],"source":"The one-dimensional <xref href=\"System.Array\"></xref> that is the destination of the elements copied from <xref href=\"System.Collections.ArrayList\"></xref>."},{"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Array\"&gt;&lt;/xref&gt;</ph> must have zero-based indexing.","pos":[157,225],"source":" The <xref href=\"System.Array\"></xref> must have zero-based indexing."}]}],"pos":[56401,56627],"yaml":true},{"content":"<code>array</code> is `null`.","nodes":[{"pos":[0,29],"content":"<ph id=\"ph1\">&lt;code&gt;array&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>array</code> is `null`."}],"pos":[56792,56822],"yaml":true},{"content":"<code>array</code> is multidimensional.  \n  \n -or-  \n  \n The number of elements in the source <xref href=\"System.Collections.ArrayList\"></xref> is greater than the number of elements that the destination <code>array</code> can contain.","nodes":[{"pos":[0,39],"content":"<ph id=\"ph1\">&lt;code&gt;array&lt;/code&gt;</ph> is multidimensional.","source":"<code>array</code> is multidimensional."},{"pos":[46,50],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[57,235],"content":"The number of elements in the source <ph id=\"ph1\">&lt;xref href=\"System.Collections.ArrayList\"&gt;&lt;/xref&gt;</ph> is greater than the number of elements that the destination <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">array</ph><ept id=\"p1\">&lt;/code&gt;</ept> can contain.","source":"The number of elements in the source <xref href=\"System.Collections.ArrayList\"></xref> is greater than the number of elements that the destination <code>array</code> can contain."}],"pos":[56916,57160],"yaml":true},{"content":"The type of the source <xref href=\"System.Collections.ArrayList\"></xref> cannot be cast automatically to the type of the destination <code>array</code>.","nodes":[{"pos":[0,152],"content":"The type of the source <ph id=\"ph1\">&lt;xref href=\"System.Collections.ArrayList\"&gt;&lt;/xref&gt;</ph> cannot be cast automatically to the type of the destination <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">array</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The type of the source <xref href=\"System.Collections.ArrayList\"></xref> cannot be cast automatically to the type of the destination <code>array</code>."}],"pos":[57260,57413],"yaml":true},{"content":"Copies the entire <xref href=\"System.Collections.ArrayList\"></xref> to a compatible one-dimensional <xref href=\"System.Array\"></xref>, starting at the specified index of the target array.","nodes":[{"pos":[0,187],"content":"Copies the entire <ph id=\"ph1\">&lt;xref href=\"System.Collections.ArrayList\"&gt;&lt;/xref&gt;</ph> to a compatible one-dimensional <ph id=\"ph2\">&lt;xref href=\"System.Array\"&gt;&lt;/xref&gt;</ph>, starting at the specified index of the target array.","source":"Copies the entire <xref href=\"System.Collections.ArrayList\"></xref> to a compatible one-dimensional <xref href=\"System.Array\"></xref>, starting at the specified index of the target array."}],"pos":[58730,58918],"yaml":true},{"content":"The specified array must be of a compatible type.  \n  \n This method uses <xref:System.Array.Copy%2A?displayProperty=fullName> to copy the elements.  \n  \n The elements are copied to the <xref:System.Array> in the same order in which the enumerator iterates through the <xref:System.Collections.ArrayList>.  \n  \n This method is an O(`n`) operation, where `n` is <xref:System.Collections.ArrayList.Count%2A>.","nodes":[{"pos":[0,49],"content":"The specified array must be of a compatible type.","nodes":[{"content":"The specified array must be of a compatible type.","pos":[0,49]}]},{"pos":[56,147],"content":"This method uses <xref:System.Array.Copy%2A?displayProperty=fullName> to copy the elements.","nodes":[{"content":"This method uses <ph id=\"ph1\">&lt;xref:System.Array.Copy%2A?displayProperty=fullName&gt;</ph> to copy the elements.","pos":[0,91],"source":"This method uses <xref:System.Array.Copy%2A?displayProperty=fullName> to copy the elements."}]},{"pos":[154,304],"content":"The elements are copied to the <xref:System.Array> in the same order in which the enumerator iterates through the <xref:System.Collections.ArrayList>.","nodes":[{"content":"The elements are copied to the <ph id=\"ph1\">&lt;xref:System.Array&gt;</ph> in the same order in which the enumerator iterates through the <ph id=\"ph2\">&lt;xref:System.Collections.ArrayList&gt;</ph>.","pos":[0,150],"source":"The elements are copied to the <xref:System.Array> in the same order in which the enumerator iterates through the <xref:System.Collections.ArrayList>."}]},{"pos":[311,405],"content":"This method is an O(<ph id=\"ph1\">`n`</ph>) operation, where <ph id=\"ph2\">`n`</ph> is <ph id=\"ph3\">&lt;xref:System.Collections.ArrayList.Count%2A&gt;</ph>.","source":"This method is an O(`n`) operation, where `n` is <xref:System.Collections.ArrayList.Count%2A>."}],"pos":[58929,59343],"yaml":true,"extradata":"MT"},{"content":"The one-dimensional <xref href=\"System.Array\"></xref> that is the destination of the elements copied from <xref href=\"System.Collections.ArrayList\"></xref>. The <xref href=\"System.Array\"></xref> must have zero-based indexing.","nodes":[{"pos":[0,225],"content":"The one-dimensional <xref href=\"System.Array\"></xref> that is the destination of the elements copied from <xref href=\"System.Collections.ArrayList\"></xref>. The <xref href=\"System.Array\"></xref> must have zero-based indexing.","nodes":[{"content":"The one-dimensional <ph id=\"ph1\">&lt;xref href=\"System.Array\"&gt;&lt;/xref&gt;</ph> that is the destination of the elements copied from <ph id=\"ph2\">&lt;xref href=\"System.Collections.ArrayList\"&gt;&lt;/xref&gt;</ph>.","pos":[0,156],"source":"The one-dimensional <xref href=\"System.Array\"></xref> that is the destination of the elements copied from <xref href=\"System.Collections.ArrayList\"></xref>."},{"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Array\"&gt;&lt;/xref&gt;</ph> must have zero-based indexing.","pos":[157,225],"source":" The <xref href=\"System.Array\"></xref> must have zero-based indexing."}]}],"pos":[60135,60361],"yaml":true},{"content":"The zero-based index in <code>array</code> at which copying begins.","nodes":[{"pos":[0,67],"content":"The zero-based index in <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">array</ph><ept id=\"p1\">&lt;/code&gt;</ept> at which copying begins.","source":"The zero-based index in <code>array</code> at which copying begins."}],"pos":[60426,60494],"yaml":true},{"content":"<code>array</code> is `null`.","nodes":[{"pos":[0,29],"content":"<ph id=\"ph1\">&lt;code&gt;array&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>array</code> is `null`."}],"pos":[60659,60689],"yaml":true},{"content":"<code>arrayIndex</code> is less than zero.","nodes":[{"pos":[0,42],"content":"<ph id=\"ph1\">&lt;code&gt;arrayIndex&lt;/code&gt;</ph> is less than zero.","source":"<code>arrayIndex</code> is less than zero."}],"pos":[60803,60846],"yaml":true},{"content":"<code>array</code> is multidimensional.  \n  \n -or-  \n  \n The number of elements in the source <xref href=\"System.Collections.ArrayList\"></xref> is greater than the available space from <code>arrayIndex</code> to the end of the destination <code>array</code>.","nodes":[{"pos":[0,39],"content":"<ph id=\"ph1\">&lt;code&gt;array&lt;/code&gt;</ph> is multidimensional.","source":"<code>array</code> is multidimensional."},{"pos":[46,50],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[57,258],"content":"The number of elements in the source <ph id=\"ph1\">&lt;xref href=\"System.Collections.ArrayList\"&gt;&lt;/xref&gt;</ph> is greater than the available space from <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">arrayIndex</ph><ept id=\"p1\">&lt;/code&gt;</ept> to the end of the destination <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph3\">array</ph><ept id=\"p2\">&lt;/code&gt;</ept>.","source":"The number of elements in the source <xref href=\"System.Collections.ArrayList\"></xref> is greater than the available space from <code>arrayIndex</code> to the end of the destination <code>array</code>."}],"pos":[60940,61207],"yaml":true},{"content":"The type of the source <xref href=\"System.Collections.ArrayList\"></xref> cannot be cast automatically to the type of the destination <code>array</code>.","nodes":[{"pos":[0,152],"content":"The type of the source <ph id=\"ph1\">&lt;xref href=\"System.Collections.ArrayList\"&gt;&lt;/xref&gt;</ph> cannot be cast automatically to the type of the destination <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">array</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The type of the source <xref href=\"System.Collections.ArrayList\"></xref> cannot be cast automatically to the type of the destination <code>array</code>."}],"pos":[61307,61460],"yaml":true},{"content":"Copies a range of elements from the <xref href=\"System.Collections.ArrayList\"></xref> to a compatible one-dimensional <xref href=\"System.Array\"></xref>, starting at the specified index of the target array.","nodes":[{"pos":[0,205],"content":"Copies a range of elements from the <ph id=\"ph1\">&lt;xref href=\"System.Collections.ArrayList\"&gt;&lt;/xref&gt;</ph> to a compatible one-dimensional <ph id=\"ph2\">&lt;xref href=\"System.Array\"&gt;&lt;/xref&gt;</ph>, starting at the specified index of the target array.","source":"Copies a range of elements from the <xref href=\"System.Collections.ArrayList\"></xref> to a compatible one-dimensional <xref href=\"System.Array\"></xref>, starting at the specified index of the target array."}],"pos":[62897,63103],"yaml":true},{"content":"The specified array must be of a compatible type.  \n  \n This method uses <xref:System.Array.Copy%2A?displayProperty=fullName> to copy the elements.  \n  \n The elements are copied to the <xref:System.Array> in the same order in which the enumerator iterates through the <xref:System.Collections.ArrayList>.  \n  \n This method is an O(`n`) operation, where `n` is `count`.","nodes":[{"pos":[0,49],"content":"The specified array must be of a compatible type.","nodes":[{"content":"The specified array must be of a compatible type.","pos":[0,49]}]},{"pos":[56,147],"content":"This method uses <xref:System.Array.Copy%2A?displayProperty=fullName> to copy the elements.","nodes":[{"content":"This method uses <ph id=\"ph1\">&lt;xref:System.Array.Copy%2A?displayProperty=fullName&gt;</ph> to copy the elements.","pos":[0,91],"source":"This method uses <xref:System.Array.Copy%2A?displayProperty=fullName> to copy the elements."}]},{"pos":[154,304],"content":"The elements are copied to the <xref:System.Array> in the same order in which the enumerator iterates through the <xref:System.Collections.ArrayList>.","nodes":[{"content":"The elements are copied to the <ph id=\"ph1\">&lt;xref:System.Array&gt;</ph> in the same order in which the enumerator iterates through the <ph id=\"ph2\">&lt;xref:System.Collections.ArrayList&gt;</ph>.","pos":[0,150],"source":"The elements are copied to the <xref:System.Array> in the same order in which the enumerator iterates through the <xref:System.Collections.ArrayList>."}]},{"pos":[311,368],"content":"This method is an O(<ph id=\"ph1\">`n`</ph>) operation, where <ph id=\"ph2\">`n`</ph> is <ph id=\"ph3\">`count`</ph>.","source":"This method is an O(`n`) operation, where `n` is `count`."}],"pos":[63114,63491],"yaml":true,"extradata":"MT"},{"content":"The zero-based index in the source <xref href=\"System.Collections.ArrayList\"></xref> at which copying begins.","nodes":[{"pos":[0,109],"content":"The zero-based index in the source <ph id=\"ph1\">&lt;xref href=\"System.Collections.ArrayList\"&gt;&lt;/xref&gt;</ph> at which copying begins.","source":"The zero-based index in the source <xref href=\"System.Collections.ArrayList\"></xref> at which copying begins."}],"pos":[64305,64415],"yaml":true},{"content":"The one-dimensional <xref href=\"System.Array\"></xref> that is the destination of the elements copied from <xref href=\"System.Collections.ArrayList\"></xref>. The <xref href=\"System.Array\"></xref> must have zero-based indexing.","nodes":[{"pos":[0,225],"content":"The one-dimensional <xref href=\"System.Array\"></xref> that is the destination of the elements copied from <xref href=\"System.Collections.ArrayList\"></xref>. The <xref href=\"System.Array\"></xref> must have zero-based indexing.","nodes":[{"content":"The one-dimensional <ph id=\"ph1\">&lt;xref href=\"System.Array\"&gt;&lt;/xref&gt;</ph> that is the destination of the elements copied from <ph id=\"ph2\">&lt;xref href=\"System.Collections.ArrayList\"&gt;&lt;/xref&gt;</ph>.","pos":[0,156],"source":"The one-dimensional <xref href=\"System.Array\"></xref> that is the destination of the elements copied from <xref href=\"System.Collections.ArrayList\"></xref>."},{"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Array\"&gt;&lt;/xref&gt;</ph> must have zero-based indexing.","pos":[157,225],"source":" The <xref href=\"System.Array\"></xref> must have zero-based indexing."}]}],"pos":[64475,64701],"yaml":true},{"content":"The zero-based index in <code>array</code> at which copying begins.","nodes":[{"pos":[0,67],"content":"The zero-based index in <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">array</ph><ept id=\"p1\">&lt;/code&gt;</ept> at which copying begins.","source":"The zero-based index in <code>array</code> at which copying begins."}],"pos":[64766,64834],"yaml":true},{"content":"The number of elements to copy.","nodes":[{"pos":[0,31],"content":"The number of elements to copy.","nodes":[{"content":"The number of elements to copy.","pos":[0,31]}]}],"pos":[64894,64926],"yaml":true},{"content":"<code>array</code> is `null`.","nodes":[{"pos":[0,29],"content":"<ph id=\"ph1\">&lt;code&gt;array&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>array</code> is `null`."}],"pos":[65091,65121],"yaml":true},{"content":"<code>index</code> is less than zero.  \n  \n -or-  \n  \n <code>arrayIndex</code> is less than zero.  \n  \n -or-  \n  \n <code>count</code> is less than zero.","nodes":[{"pos":[0,37],"content":"<ph id=\"ph1\">&lt;code&gt;index&lt;/code&gt;</ph> is less than zero.","source":"<code>index</code> is less than zero."},{"pos":[44,48],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[55,97],"content":"<ph id=\"ph1\">&lt;code&gt;arrayIndex&lt;/code&gt;</ph> is less than zero.","source":"<code>arrayIndex</code> is less than zero."},{"pos":[104,108],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[115,152],"content":"<ph id=\"ph1\">&lt;code&gt;count&lt;/code&gt;</ph> is less than zero.","source":"<code>count</code> is less than zero."}],"pos":[65235,65398],"yaml":true},{"content":"<code>array</code> is multidimensional.  \n  \n -or-  \n  \n <code>index</code> is equal to or greater than the <xref href=\"System.Collections.ArrayList.Count\"></xref> of the source <xref href=\"System.Collections.ArrayList\"></xref>.  \n  \n -or-  \n  \n The number of elements from <code>index</code> to the end of the source <xref href=\"System.Collections.ArrayList\"></xref> is greater than the available space from <code>arrayIndex</code> to the end of the destination <code>array</code>.","nodes":[{"pos":[0,39],"content":"<ph id=\"ph1\">&lt;code&gt;array&lt;/code&gt;</ph> is multidimensional.","source":"<code>array</code> is multidimensional."},{"pos":[46,50],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[57,228],"content":"<ph id=\"ph1\">&lt;code&gt;index&lt;/code&gt;</ph> is equal to or greater than the <ph id=\"ph2\">&lt;xref href=\"System.Collections.ArrayList.Count\"&gt;&lt;/xref&gt;</ph> of the source <ph id=\"ph3\">&lt;xref href=\"System.Collections.ArrayList\"&gt;&lt;/xref&gt;</ph>.","source":"<code>index</code> is equal to or greater than the <xref href=\"System.Collections.ArrayList.Count\"></xref> of the source <xref href=\"System.Collections.ArrayList\"></xref>."},{"pos":[235,239],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[246,482],"content":"The number of elements from <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">index</ph><ept id=\"p1\">&lt;/code&gt;</ept> to the end of the source <ph id=\"ph2\">&lt;xref href=\"System.Collections.ArrayList\"&gt;&lt;/xref&gt;</ph> is greater than the available space from <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph3\">arrayIndex</ph><ept id=\"p2\">&lt;/code&gt;</ept> to the end of the destination <bpt id=\"p3\">&lt;code&gt;</bpt><ph id=\"ph4\">array</ph><ept id=\"p3\">&lt;/code&gt;</ept>.","source":"The number of elements from <code>index</code> to the end of the source <xref href=\"System.Collections.ArrayList\"></xref> is greater than the available space from <code>arrayIndex</code> to the end of the destination <code>array</code>."}],"pos":[65492,65991],"yaml":true},{"content":"The type of the source <xref href=\"System.Collections.ArrayList\"></xref> cannot be cast automatically to the type of the destination <code>array</code>.","nodes":[{"pos":[0,152],"content":"The type of the source <ph id=\"ph1\">&lt;xref href=\"System.Collections.ArrayList\"&gt;&lt;/xref&gt;</ph> cannot be cast automatically to the type of the destination <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">array</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The type of the source <xref href=\"System.Collections.ArrayList\"></xref> cannot be cast automatically to the type of the destination <code>array</code>."}],"pos":[66091,66244],"yaml":true},{"content":"Gets the number of elements actually contained in the <xref href=\"System.Collections.ArrayList\"></xref>.","nodes":[{"pos":[0,104],"content":"Gets the number of elements actually contained in the <ph id=\"ph1\">&lt;xref href=\"System.Collections.ArrayList\"&gt;&lt;/xref&gt;</ph>.","source":"Gets the number of elements actually contained in the <xref href=\"System.Collections.ArrayList\"></xref>."}],"pos":[67434,67539],"yaml":true},{"content":"<xref:System.Collections.ArrayList.Capacity%2A> is the number of elements that the <xref:System.Collections.ArrayList> can store. <xref:System.Collections.ArrayList.Count%2A> is the number of elements that are actually in the <xref:System.Collections.ArrayList>.  \n  \n <xref:System.Collections.ArrayList.Capacity%2A> is always greater than or equal to <xref:System.Collections.ArrayList.Count%2A>. If <xref:System.Collections.ArrayList.Count%2A> exceeds <xref:System.Collections.ArrayList.Capacity%2A> while adding elements, the capacity is automatically increased by reallocating the internal array before copying the old elements and adding the new elements.  \n  \n Retrieving the value of this property is an O(1) operation.","nodes":[{"pos":[0,262],"content":"<xref:System.Collections.ArrayList.Capacity%2A> is the number of elements that the <xref:System.Collections.ArrayList> can store. <xref:System.Collections.ArrayList.Count%2A> is the number of elements that are actually in the <xref:System.Collections.ArrayList>.","nodes":[{"content":"<xref:System.Collections.ArrayList.Capacity%2A> is the number of elements that the <xref:System.Collections.ArrayList> can store. <xref:System.Collections.ArrayList.Count%2A> is the number of elements that are actually in the <xref:System.Collections.ArrayList>.","pos":[0,262],"nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Collections.ArrayList.Capacity%2A&gt;</ph> is the number of elements that the <ph id=\"ph2\">&lt;xref:System.Collections.ArrayList&gt;</ph> can store.","pos":[0,129],"source":"<xref:System.Collections.ArrayList.Capacity%2A> is the number of elements that the <xref:System.Collections.ArrayList> can store."},{"content":"<ph id=\"ph1\">&lt;xref:System.Collections.ArrayList.Count%2A&gt;</ph> is the number of elements that are actually in the <ph id=\"ph2\">&lt;xref:System.Collections.ArrayList&gt;</ph>.","pos":[130,262],"source":" <xref:System.Collections.ArrayList.Count%2A> is the number of elements that are actually in the <xref:System.Collections.ArrayList>."}]}]},{"pos":[269,660],"content":"<xref:System.Collections.ArrayList.Capacity%2A> is always greater than or equal to <xref:System.Collections.ArrayList.Count%2A>. If <xref:System.Collections.ArrayList.Count%2A> exceeds <xref:System.Collections.ArrayList.Capacity%2A> while adding elements, the capacity is automatically increased by reallocating the internal array before copying the old elements and adding the new elements.","nodes":[{"content":"<xref:System.Collections.ArrayList.Capacity%2A> is always greater than or equal to <xref:System.Collections.ArrayList.Count%2A>. If <xref:System.Collections.ArrayList.Count%2A> exceeds <xref:System.Collections.ArrayList.Capacity%2A> while adding elements, the capacity is automatically increased by reallocating the internal array before copying the old elements and adding the new elements.","pos":[0,391],"nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Collections.ArrayList.Capacity%2A&gt;</ph> is always greater than or equal to <ph id=\"ph2\">&lt;xref:System.Collections.ArrayList.Count%2A&gt;</ph>.","pos":[0,128],"source":"<xref:System.Collections.ArrayList.Capacity%2A> is always greater than or equal to <xref:System.Collections.ArrayList.Count%2A>."},{"content":"If <ph id=\"ph1\">&lt;xref:System.Collections.ArrayList.Count%2A&gt;</ph> exceeds <ph id=\"ph2\">&lt;xref:System.Collections.ArrayList.Capacity%2A&gt;</ph> while adding elements, the capacity is automatically increased by reallocating the internal array before copying the old elements and adding the new elements.","pos":[129,391],"source":" If <xref:System.Collections.ArrayList.Count%2A> exceeds <xref:System.Collections.ArrayList.Capacity%2A> while adding elements, the capacity is automatically increased by reallocating the internal array before copying the old elements and adding the new elements."}]}]},{"pos":[667,726],"content":"Retrieving the value of this property is an O(1) operation.","nodes":[{"content":"Retrieving the value of this property is an O(1) operation.","pos":[0,59]}]}],"pos":[67550,68283],"yaml":true,"extradata":"MT"},{"content":"The number of elements actually contained in the <xref href=\"System.Collections.ArrayList\"></xref>.","nodes":[{"pos":[0,99],"content":"The number of elements actually contained in the <ph id=\"ph1\">&lt;xref href=\"System.Collections.ArrayList\"&gt;&lt;/xref&gt;</ph>.","source":"The number of elements actually contained in the <xref href=\"System.Collections.ArrayList\"></xref>."}],"pos":[68396,68496],"yaml":true},{"content":"Returns an <xref href=\"System.Collections.ArrayList\"></xref> wrapper with a fixed size.","nodes":[{"pos":[0,87],"content":"Returns an <ph id=\"ph1\">&lt;xref href=\"System.Collections.ArrayList\"&gt;&lt;/xref&gt;</ph> wrapper with a fixed size.","source":"Returns an <xref href=\"System.Collections.ArrayList\"></xref> wrapper with a fixed size."}],"pos":[69896,69984],"yaml":true},{"content":"This wrapper can be used to prevent additions to and deletions from the original <xref:System.Collections.ArrayList>. The elements can still be modified or replaced.  \n  \n A collection with a fixed size is simply a collection with a wrapper that prevents adding and removing elements; therefore, if changes are made to the underlying collection, including the addition or removal of elements, the fixed-size collection reflects those changes.  \n  \n This method is an O(1) operation.","nodes":[{"pos":[0,165],"content":"This wrapper can be used to prevent additions to and deletions from the original <xref:System.Collections.ArrayList>. The elements can still be modified or replaced.","nodes":[{"content":"This wrapper can be used to prevent additions to and deletions from the original <xref:System.Collections.ArrayList>. The elements can still be modified or replaced.","pos":[0,165],"nodes":[{"content":"This wrapper can be used to prevent additions to and deletions from the original <ph id=\"ph1\">&lt;xref:System.Collections.ArrayList&gt;</ph>.","pos":[0,117],"source":"This wrapper can be used to prevent additions to and deletions from the original <xref:System.Collections.ArrayList>."},{"content":"The elements can still be modified or replaced.","pos":[118,165]}]}]},{"pos":[172,442],"content":"A collection with a fixed size is simply a collection with a wrapper that prevents adding and removing elements; therefore, if changes are made to the underlying collection, including the addition or removal of elements, the fixed-size collection reflects those changes.","nodes":[{"content":"A collection with a fixed size is simply a collection with a wrapper that prevents adding and removing elements; therefore, if changes are made to the underlying collection, including the addition or removal of elements, the fixed-size collection reflects those changes.","pos":[0,270]}]},{"pos":[449,482],"content":"This method is an O(1) operation.","nodes":[{"content":"This method is an O(1) operation.","pos":[0,33]}]}],"pos":[69995,70484],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Collections.ArrayList\"></xref> to wrap.","nodes":[{"pos":[0,62],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Collections.ArrayList\"&gt;&lt;/xref&gt;</ph> to wrap.","source":"The <xref href=\"System.Collections.ArrayList\"></xref> to wrap."}],"pos":[71309,71372],"yaml":true},{"content":"An <xref href=\"System.Collections.ArrayList\"></xref> wrapper with a fixed size.","nodes":[{"pos":[0,79],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Collections.ArrayList\"&gt;&lt;/xref&gt;</ph> wrapper with a fixed size.","source":"An <xref href=\"System.Collections.ArrayList\"></xref> wrapper with a fixed size."}],"pos":[71444,71524],"yaml":true},{"content":"<code>list</code> is `null`.","nodes":[{"pos":[0,28],"content":"<ph id=\"ph1\">&lt;code&gt;list&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>list</code> is `null`."}],"pos":[71692,71721],"yaml":true},{"content":"Returns an <xref href=\"System.Collections.IList\"></xref> wrapper with a fixed size.","nodes":[{"pos":[0,83],"content":"Returns an <ph id=\"ph1\">&lt;xref href=\"System.Collections.IList\"&gt;&lt;/xref&gt;</ph> wrapper with a fixed size.","source":"Returns an <xref href=\"System.Collections.IList\"></xref> wrapper with a fixed size."}],"pos":[73032,73116],"yaml":true},{"content":"This wrapper can be used to prevent additions to and deletions from the original <xref:System.Collections.IList>. The elements can still be modified or replaced.  \n  \n A collection with a fixed size is simply a collection with a wrapper that prevents adding and removing elements; therefore, if changes are made to the underlying collection, including the addition or removal of elements, the fixed-size collection reflects those changes.  \n  \n This method is an O(1) operation.","nodes":[{"pos":[0,161],"content":"This wrapper can be used to prevent additions to and deletions from the original <xref:System.Collections.IList>. The elements can still be modified or replaced.","nodes":[{"content":"This wrapper can be used to prevent additions to and deletions from the original <xref:System.Collections.IList>. The elements can still be modified or replaced.","pos":[0,161],"nodes":[{"content":"This wrapper can be used to prevent additions to and deletions from the original <ph id=\"ph1\">&lt;xref:System.Collections.IList&gt;</ph>.","pos":[0,113],"source":"This wrapper can be used to prevent additions to and deletions from the original <xref:System.Collections.IList>."},{"content":"The elements can still be modified or replaced.","pos":[114,161]}]}]},{"pos":[168,438],"content":"A collection with a fixed size is simply a collection with a wrapper that prevents adding and removing elements; therefore, if changes are made to the underlying collection, including the addition or removal of elements, the fixed-size collection reflects those changes.","nodes":[{"content":"A collection with a fixed size is simply a collection with a wrapper that prevents adding and removing elements; therefore, if changes are made to the underlying collection, including the addition or removal of elements, the fixed-size collection reflects those changes.","pos":[0,270]}]},{"pos":[445,478],"content":"This method is an O(1) operation.","nodes":[{"content":"This method is an O(1) operation.","pos":[0,33]}]}],"pos":[73127,73612],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Collections.IList\"></xref> to wrap.","nodes":[{"pos":[0,58],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Collections.IList\"&gt;&lt;/xref&gt;</ph> to wrap.","source":"The <xref href=\"System.Collections.IList\"></xref> to wrap."}],"pos":[73804,73863],"yaml":true},{"content":"An <xref href=\"System.Collections.IList\"></xref> wrapper with a fixed size.","nodes":[{"pos":[0,75],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Collections.IList\"&gt;&lt;/xref&gt;</ph> wrapper with a fixed size.","source":"An <xref href=\"System.Collections.IList\"></xref> wrapper with a fixed size."}],"pos":[73931,74007],"yaml":true},{"content":"<code>list</code> is `null`.","nodes":[{"pos":[0,28],"content":"<ph id=\"ph1\">&lt;code&gt;list&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>list</code> is `null`."}],"pos":[74175,74204],"yaml":true},{"content":"Returns an enumerator for the entire <xref href=\"System.Collections.ArrayList\"></xref>.","nodes":[{"pos":[0,87],"content":"Returns an enumerator for the entire <ph id=\"ph1\">&lt;xref href=\"System.Collections.ArrayList\"&gt;&lt;/xref&gt;</ph>.","source":"Returns an enumerator for the entire <xref href=\"System.Collections.ArrayList\"></xref>."}],"pos":[75446,75534],"yaml":true},{"content":"The `foreach` statement of the C# language (`for each` in Visual Basic) hides the complexity of the enumerators.  Therefore, using `foreach` is recommended, instead of directly manipulating the enumerator.  \n  \n Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.  \n  \n Initially, the enumerator is positioned before the first element in the collection. <xref:System.Collections.IEnumerator.Reset%2A> also brings the enumerator back to this position.  At this position, <xref:System.Collections.IEnumerator.Current%2A> is undefined. Therefore, you must call <xref:System.Collections.IEnumerator.MoveNext%2A> to advance the enumerator to the first element of the collection before reading the value of <xref:System.Collections.IEnumerator.Current%2A>.  \n  \n <xref:System.Collections.IEnumerator.Current%2A> returns the same object until either <xref:System.Collections.IEnumerator.MoveNext%2A> or <xref:System.Collections.IEnumerator.Reset%2A> is called. <xref:System.Collections.IEnumerator.MoveNext%2A> sets <xref:System.Collections.IEnumerator.Current%2A> to the next element.  \n  \n If <xref:System.Collections.IEnumerator.MoveNext%2A> passes the end of the collection, the enumerator is positioned after the last element in the collection and <xref:System.Collections.IEnumerator.MoveNext%2A> returns `false`. When the enumerator is at this position, subsequent calls to <xref:System.Collections.IEnumerator.MoveNext%2A> also return `false`. If the last call to <xref:System.Collections.IEnumerator.MoveNext%2A> returned `false`, <xref:System.Collections.IEnumerator.Current%2A> is undefined. To set <xref:System.Collections.IEnumerator.Current%2A> to the first element of the collection again, you can call <xref:System.Collections.IEnumerator.Reset%2A> followed by <xref:System.Collections.IEnumerator.MoveNext%2A>.  \n  \n An enumerator remains valid as long as the collection remains unchanged. If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and its behavior is undefined.  \n  \n The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure.  To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.  To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.  \n  \n This method is an O(1) operation.","nodes":[{"pos":[0,205],"content":"The `foreach` statement of the C# language (`for each` in Visual Basic) hides the complexity of the enumerators.  Therefore, using `foreach` is recommended, instead of directly manipulating the enumerator.","nodes":[{"content":"The <ph id=\"ph1\">`foreach`</ph> statement of the C# language (<ph id=\"ph2\">`for each`</ph> in Visual Basic) hides the complexity of the enumerators.","pos":[0,112],"source":"The `foreach` statement of the C# language (`for each` in Visual Basic) hides the complexity of the enumerators."},{"content":"Therefore, using <ph id=\"ph1\">`foreach`</ph> is recommended, instead of directly manipulating the enumerator.","pos":[114,205],"source":"  Therefore, using `foreach` is recommended, instead of directly manipulating the enumerator."}]},{"pos":[212,332],"content":"Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.","nodes":[{"content":"Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.","pos":[0,120]}]},{"pos":[339,819],"content":"Initially, the enumerator is positioned before the first element in the collection. <xref:System.Collections.IEnumerator.Reset%2A> also brings the enumerator back to this position.  At this position, <xref:System.Collections.IEnumerator.Current%2A> is undefined. Therefore, you must call <xref:System.Collections.IEnumerator.MoveNext%2A> to advance the enumerator to the first element of the collection before reading the value of <xref:System.Collections.IEnumerator.Current%2A>.","nodes":[{"content":"Initially, the enumerator is positioned before the first element in the collection. <xref:System.Collections.IEnumerator.Reset%2A> also brings the enumerator back to this position.  At this position, <xref:System.Collections.IEnumerator.Current%2A> is undefined. Therefore, you must call <xref:System.Collections.IEnumerator.MoveNext%2A> to advance the enumerator to the first element of the collection before reading the value of <xref:System.Collections.IEnumerator.Current%2A>.","pos":[0,480],"nodes":[{"content":"Initially, the enumerator is positioned before the first element in the collection.","pos":[0,83]},{"content":"<ph id=\"ph1\">&lt;xref:System.Collections.IEnumerator.Reset%2A&gt;</ph> also brings the enumerator back to this position.","pos":[84,180],"source":" <xref:System.Collections.IEnumerator.Reset%2A> also brings the enumerator back to this position."},{"content":"At this position, <ph id=\"ph1\">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> is undefined.","pos":[182,262],"source":"  At this position, <xref:System.Collections.IEnumerator.Current%2A> is undefined."},{"content":"Therefore, you must call <ph id=\"ph1\">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> to advance the enumerator to the first element of the collection before reading the value of <ph id=\"ph2\">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph>.","pos":[263,480],"source":" Therefore, you must call <xref:System.Collections.IEnumerator.MoveNext%2A> to advance the enumerator to the first element of the collection before reading the value of <xref:System.Collections.IEnumerator.Current%2A>."}]}]},{"pos":[826,1147],"content":"<xref:System.Collections.IEnumerator.Current%2A> returns the same object until either <xref:System.Collections.IEnumerator.MoveNext%2A> or <xref:System.Collections.IEnumerator.Reset%2A> is called. <xref:System.Collections.IEnumerator.MoveNext%2A> sets <xref:System.Collections.IEnumerator.Current%2A> to the next element.","nodes":[{"content":"<xref:System.Collections.IEnumerator.Current%2A> returns the same object until either <xref:System.Collections.IEnumerator.MoveNext%2A> or <xref:System.Collections.IEnumerator.Reset%2A> is called. <xref:System.Collections.IEnumerator.MoveNext%2A> sets <xref:System.Collections.IEnumerator.Current%2A> to the next element.","pos":[0,321],"nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> returns the same object until either <ph id=\"ph2\">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> or <ph id=\"ph3\">&lt;xref:System.Collections.IEnumerator.Reset%2A&gt;</ph> is called.","pos":[0,196],"source":"<xref:System.Collections.IEnumerator.Current%2A> returns the same object until either <xref:System.Collections.IEnumerator.MoveNext%2A> or <xref:System.Collections.IEnumerator.Reset%2A> is called."},{"content":"<ph id=\"ph1\">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> sets <ph id=\"ph2\">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> to the next element.","pos":[197,321],"source":" <xref:System.Collections.IEnumerator.MoveNext%2A> sets <xref:System.Collections.IEnumerator.Current%2A> to the next element."}]}]},{"pos":[1154,1889],"content":"If <xref:System.Collections.IEnumerator.MoveNext%2A> passes the end of the collection, the enumerator is positioned after the last element in the collection and <xref:System.Collections.IEnumerator.MoveNext%2A> returns `false`. When the enumerator is at this position, subsequent calls to <xref:System.Collections.IEnumerator.MoveNext%2A> also return `false`. If the last call to <xref:System.Collections.IEnumerator.MoveNext%2A> returned `false`, <xref:System.Collections.IEnumerator.Current%2A> is undefined. To set <xref:System.Collections.IEnumerator.Current%2A> to the first element of the collection again, you can call <xref:System.Collections.IEnumerator.Reset%2A> followed by <xref:System.Collections.IEnumerator.MoveNext%2A>.","nodes":[{"content":"If <ph id=\"ph1\">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> passes the end of the collection, the enumerator is positioned after the last element in the collection and <ph id=\"ph2\">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> returns <ph id=\"ph3\">`false`</ph>.","pos":[0,227],"source":"If <xref:System.Collections.IEnumerator.MoveNext%2A> passes the end of the collection, the enumerator is positioned after the last element in the collection and <xref:System.Collections.IEnumerator.MoveNext%2A> returns `false`."},{"content":"When the enumerator is at this position, subsequent calls to <ph id=\"ph1\">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> also return <ph id=\"ph2\">`false`</ph>.","pos":[228,359],"source":" When the enumerator is at this position, subsequent calls to <xref:System.Collections.IEnumerator.MoveNext%2A> also return `false`."},{"content":"If the last call to <ph id=\"ph1\">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> returned <ph id=\"ph2\">`false`</ph>, <ph id=\"ph3\">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> is undefined.","pos":[360,510],"source":" If the last call to <xref:System.Collections.IEnumerator.MoveNext%2A> returned `false`, <xref:System.Collections.IEnumerator.Current%2A> is undefined."},{"content":"To set <ph id=\"ph1\">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> to the first element of the collection again, you can call <ph id=\"ph2\">&lt;xref:System.Collections.IEnumerator.Reset%2A&gt;</ph> followed by <ph id=\"ph3\">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph>.","pos":[511,735],"source":" To set <xref:System.Collections.IEnumerator.Current%2A> to the first element of the collection again, you can call <xref:System.Collections.IEnumerator.Reset%2A> followed by <xref:System.Collections.IEnumerator.MoveNext%2A>."}]},{"pos":[1896,2131],"content":"An enumerator remains valid as long as the collection remains unchanged. If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and its behavior is undefined.","nodes":[{"content":"An enumerator remains valid as long as the collection remains unchanged. If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and its behavior is undefined.","pos":[0,235],"nodes":[{"content":"An enumerator remains valid as long as the collection remains unchanged.","pos":[0,72]},{"content":"If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and its behavior is undefined.","pos":[73,235]}]}]},{"pos":[2138,2529],"content":"The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure.  To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.  To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.","nodes":[{"content":"The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure.  To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.  To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.","pos":[0,391],"nodes":[{"content":"The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure.","pos":[0,154]},{"content":"To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.","pos":[156,261]},{"content":"To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.","pos":[263,391]}]}]},{"pos":[2536,2569],"content":"This method is an O(1) operation.","nodes":[{"content":"This method is an O(1) operation.","pos":[0,33]}]}],"pos":[75545,78131],"yaml":true,"extradata":"MT"},{"content":"An <xref href=\"System.Collections.IEnumerator\"></xref> for the entire <xref href=\"System.Collections.ArrayList\"></xref>.","nodes":[{"pos":[0,120],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Collections.IEnumerator\"&gt;&lt;/xref&gt;</ph> for the entire <ph id=\"ph2\">&lt;xref href=\"System.Collections.ArrayList\"&gt;&lt;/xref&gt;</ph>.","source":"An <xref href=\"System.Collections.IEnumerator\"></xref> for the entire <xref href=\"System.Collections.ArrayList\"></xref>."}],"pos":[78810,78931],"yaml":true},{"content":"Returns an enumerator for a range of elements in the <xref href=\"System.Collections.ArrayList\"></xref>.","nodes":[{"pos":[0,103],"content":"Returns an enumerator for a range of elements in the <ph id=\"ph1\">&lt;xref href=\"System.Collections.ArrayList\"&gt;&lt;/xref&gt;</ph>.","source":"Returns an enumerator for a range of elements in the <xref href=\"System.Collections.ArrayList\"></xref>."}],"pos":[80363,80467],"yaml":true},{"content":"The `foreach` statement of the C# language (`for each` in Visual C++, `For Each` Visual Basic) hides the complexity of the enumerators.  Therefore, using `foreach` is recommended, instead of directly manipulating the enumerator.  \n  \n Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.  \n  \n Initially, the enumerator is positioned before the first element in the collection. <xref:System.Collections.IEnumerator.Reset%2A> also brings the enumerator back to this position.  At this position, <xref:System.Collections.IEnumerator.Current%2A> is undefined. Therefore, you must call <xref:System.Collections.IEnumerator.MoveNext%2A> to advance the enumerator to the first element of the collection before reading the value of <xref:System.Collections.IEnumerator.Current%2A>.  \n  \n <xref:System.Collections.IEnumerator.Current%2A> returns the same object until either <xref:System.Collections.IEnumerator.MoveNext%2A> or <xref:System.Collections.IEnumerator.Reset%2A> is called. <xref:System.Collections.IEnumerator.MoveNext%2A> sets <xref:System.Collections.IEnumerator.Current%2A> to the next element.  \n  \n If <xref:System.Collections.IEnumerator.MoveNext%2A> passes the end of the collection, the enumerator is positioned after the last element in the collection and <xref:System.Collections.IEnumerator.MoveNext%2A> returns `false`. When the enumerator is at this position, subsequent calls to <xref:System.Collections.IEnumerator.MoveNext%2A> also return `false`. If the last call to <xref:System.Collections.IEnumerator.MoveNext%2A> returned `false`, <xref:System.Collections.IEnumerator.Current%2A> is undefined. To set <xref:System.Collections.IEnumerator.Current%2A> to the first element of the collection again, you can call <xref:System.Collections.IEnumerator.Reset%2A> followed by <xref:System.Collections.IEnumerator.MoveNext%2A>.  \n  \n An enumerator remains valid as long as the collection remains unchanged. If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and its behavior is undefined.  \n  \n The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure.  To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.  To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.  \n  \n This method is an O(1) operation.  \n  \n## Version Compatibility  \n In the .NET Framework versions 1.0 and 1.1, the enumerator for an <xref:System.Collections.ArrayList> wrapper returned by the <xref:System.Collections.ArrayList.Adapter%2A> method treated the second argument as an upper bound rather than as a count. In the [!INCLUDE[dnprdnlong](~/includes/dnprdnlong-md.md)] the second argument is correctly treated as a count.","nodes":[{"pos":[0,228],"content":"The `foreach` statement of the C# language (`for each` in Visual C++, `For Each` Visual Basic) hides the complexity of the enumerators.  Therefore, using `foreach` is recommended, instead of directly manipulating the enumerator.","nodes":[{"content":"The <ph id=\"ph1\">`foreach`</ph> statement of the C# language (<ph id=\"ph2\">`for each`</ph> in Visual C++, <ph id=\"ph3\">`For Each`</ph> Visual Basic) hides the complexity of the enumerators.","pos":[0,135],"source":"The `foreach` statement of the C# language (`for each` in Visual C++, `For Each` Visual Basic) hides the complexity of the enumerators."},{"content":"Therefore, using <ph id=\"ph1\">`foreach`</ph> is recommended, instead of directly manipulating the enumerator.","pos":[137,228],"source":"  Therefore, using `foreach` is recommended, instead of directly manipulating the enumerator."}]},{"pos":[235,355],"content":"Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.","nodes":[{"content":"Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.","pos":[0,120]}]},{"pos":[362,842],"content":"Initially, the enumerator is positioned before the first element in the collection. <xref:System.Collections.IEnumerator.Reset%2A> also brings the enumerator back to this position.  At this position, <xref:System.Collections.IEnumerator.Current%2A> is undefined. Therefore, you must call <xref:System.Collections.IEnumerator.MoveNext%2A> to advance the enumerator to the first element of the collection before reading the value of <xref:System.Collections.IEnumerator.Current%2A>.","nodes":[{"content":"Initially, the enumerator is positioned before the first element in the collection. <xref:System.Collections.IEnumerator.Reset%2A> also brings the enumerator back to this position.  At this position, <xref:System.Collections.IEnumerator.Current%2A> is undefined. Therefore, you must call <xref:System.Collections.IEnumerator.MoveNext%2A> to advance the enumerator to the first element of the collection before reading the value of <xref:System.Collections.IEnumerator.Current%2A>.","pos":[0,480],"nodes":[{"content":"Initially, the enumerator is positioned before the first element in the collection.","pos":[0,83]},{"content":"<ph id=\"ph1\">&lt;xref:System.Collections.IEnumerator.Reset%2A&gt;</ph> also brings the enumerator back to this position.","pos":[84,180],"source":" <xref:System.Collections.IEnumerator.Reset%2A> also brings the enumerator back to this position."},{"content":"At this position, <ph id=\"ph1\">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> is undefined.","pos":[182,262],"source":"  At this position, <xref:System.Collections.IEnumerator.Current%2A> is undefined."},{"content":"Therefore, you must call <ph id=\"ph1\">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> to advance the enumerator to the first element of the collection before reading the value of <ph id=\"ph2\">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph>.","pos":[263,480],"source":" Therefore, you must call <xref:System.Collections.IEnumerator.MoveNext%2A> to advance the enumerator to the first element of the collection before reading the value of <xref:System.Collections.IEnumerator.Current%2A>."}]}]},{"pos":[849,1170],"content":"<xref:System.Collections.IEnumerator.Current%2A> returns the same object until either <xref:System.Collections.IEnumerator.MoveNext%2A> or <xref:System.Collections.IEnumerator.Reset%2A> is called. <xref:System.Collections.IEnumerator.MoveNext%2A> sets <xref:System.Collections.IEnumerator.Current%2A> to the next element.","nodes":[{"content":"<xref:System.Collections.IEnumerator.Current%2A> returns the same object until either <xref:System.Collections.IEnumerator.MoveNext%2A> or <xref:System.Collections.IEnumerator.Reset%2A> is called. <xref:System.Collections.IEnumerator.MoveNext%2A> sets <xref:System.Collections.IEnumerator.Current%2A> to the next element.","pos":[0,321],"nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> returns the same object until either <ph id=\"ph2\">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> or <ph id=\"ph3\">&lt;xref:System.Collections.IEnumerator.Reset%2A&gt;</ph> is called.","pos":[0,196],"source":"<xref:System.Collections.IEnumerator.Current%2A> returns the same object until either <xref:System.Collections.IEnumerator.MoveNext%2A> or <xref:System.Collections.IEnumerator.Reset%2A> is called."},{"content":"<ph id=\"ph1\">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> sets <ph id=\"ph2\">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> to the next element.","pos":[197,321],"source":" <xref:System.Collections.IEnumerator.MoveNext%2A> sets <xref:System.Collections.IEnumerator.Current%2A> to the next element."}]}]},{"pos":[1177,1912],"content":"If <xref:System.Collections.IEnumerator.MoveNext%2A> passes the end of the collection, the enumerator is positioned after the last element in the collection and <xref:System.Collections.IEnumerator.MoveNext%2A> returns `false`. When the enumerator is at this position, subsequent calls to <xref:System.Collections.IEnumerator.MoveNext%2A> also return `false`. If the last call to <xref:System.Collections.IEnumerator.MoveNext%2A> returned `false`, <xref:System.Collections.IEnumerator.Current%2A> is undefined. To set <xref:System.Collections.IEnumerator.Current%2A> to the first element of the collection again, you can call <xref:System.Collections.IEnumerator.Reset%2A> followed by <xref:System.Collections.IEnumerator.MoveNext%2A>.","nodes":[{"content":"If <ph id=\"ph1\">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> passes the end of the collection, the enumerator is positioned after the last element in the collection and <ph id=\"ph2\">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> returns <ph id=\"ph3\">`false`</ph>.","pos":[0,227],"source":"If <xref:System.Collections.IEnumerator.MoveNext%2A> passes the end of the collection, the enumerator is positioned after the last element in the collection and <xref:System.Collections.IEnumerator.MoveNext%2A> returns `false`."},{"content":"When the enumerator is at this position, subsequent calls to <ph id=\"ph1\">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> also return <ph id=\"ph2\">`false`</ph>.","pos":[228,359],"source":" When the enumerator is at this position, subsequent calls to <xref:System.Collections.IEnumerator.MoveNext%2A> also return `false`."},{"content":"If the last call to <ph id=\"ph1\">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> returned <ph id=\"ph2\">`false`</ph>, <ph id=\"ph3\">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> is undefined.","pos":[360,510],"source":" If the last call to <xref:System.Collections.IEnumerator.MoveNext%2A> returned `false`, <xref:System.Collections.IEnumerator.Current%2A> is undefined."},{"content":"To set <ph id=\"ph1\">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> to the first element of the collection again, you can call <ph id=\"ph2\">&lt;xref:System.Collections.IEnumerator.Reset%2A&gt;</ph> followed by <ph id=\"ph3\">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph>.","pos":[511,735],"source":" To set <xref:System.Collections.IEnumerator.Current%2A> to the first element of the collection again, you can call <xref:System.Collections.IEnumerator.Reset%2A> followed by <xref:System.Collections.IEnumerator.MoveNext%2A>."}]},{"pos":[1919,2154],"content":"An enumerator remains valid as long as the collection remains unchanged. If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and its behavior is undefined.","nodes":[{"content":"An enumerator remains valid as long as the collection remains unchanged. If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and its behavior is undefined.","pos":[0,235],"nodes":[{"content":"An enumerator remains valid as long as the collection remains unchanged.","pos":[0,72]},{"content":"If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and its behavior is undefined.","pos":[73,235]}]}]},{"pos":[2161,2552],"content":"The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure.  To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.  To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.","nodes":[{"content":"The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure.  To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.  To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.","pos":[0,391],"nodes":[{"content":"The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure.","pos":[0,154]},{"content":"To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.","pos":[156,261]},{"content":"To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.","pos":[263,391]}]}]},{"pos":[2559,2592],"content":"This method is an O(1) operation.","nodes":[{"content":"This method is an O(1) operation.","pos":[0,33]}]},{"pos":[2601,2622],"content":"Version Compatibility","linkify":"Version Compatibility","nodes":[{"content":"Version Compatibility","pos":[0,21]}]},{"pos":[2626,2987],"content":"In the .NET Framework versions 1.0 and 1.1, the enumerator for an <xref:System.Collections.ArrayList> wrapper returned by the <xref:System.Collections.ArrayList.Adapter%2A> method treated the second argument as an upper bound rather than as a count. In the [!INCLUDE[dnprdnlong](~/includes/dnprdnlong-md.md)] the second argument is correctly treated as a count.","nodes":[{"content":"In the .NET Framework versions 1.0 and 1.1, the enumerator for an <ph id=\"ph1\">&lt;xref:System.Collections.ArrayList&gt;</ph> wrapper returned by the <ph id=\"ph2\">&lt;xref:System.Collections.ArrayList.Adapter%2A&gt;</ph> method treated the second argument as an upper bound rather than as a count.","pos":[0,249],"source":"In the .NET Framework versions 1.0 and 1.1, the enumerator for an <xref:System.Collections.ArrayList> wrapper returned by the <xref:System.Collections.ArrayList.Adapter%2A> method treated the second argument as an upper bound rather than as a count."},{"content":"In the <ph id=\"ph1\">[!INCLUDE[dnprdnlong](~/includes/dnprdnlong-md.md)]</ph> the second argument is correctly treated as a count.","pos":[250,361],"source":" In the [!INCLUDE[dnprdnlong](~/includes/dnprdnlong-md.md)] the second argument is correctly treated as a count."}]}],"pos":[80478,83485],"yaml":true,"extradata":"MT"},{"content":"The zero-based starting index of the <xref href=\"System.Collections.ArrayList\"></xref> section that the enumerator should refer to.","nodes":[{"pos":[0,131],"content":"The zero-based starting index of the <ph id=\"ph1\">&lt;xref href=\"System.Collections.ArrayList\"&gt;&lt;/xref&gt;</ph> section that the enumerator should refer to.","source":"The zero-based starting index of the <xref href=\"System.Collections.ArrayList\"></xref> section that the enumerator should refer to."}],"pos":[84167,84299],"yaml":true},{"content":"The number of elements in the <xref href=\"System.Collections.ArrayList\"></xref> section that the enumerator should refer to.","nodes":[{"pos":[0,124],"content":"The number of elements in the <ph id=\"ph1\">&lt;xref href=\"System.Collections.ArrayList\"&gt;&lt;/xref&gt;</ph> section that the enumerator should refer to.","source":"The number of elements in the <xref href=\"System.Collections.ArrayList\"></xref> section that the enumerator should refer to."}],"pos":[84359,84484],"yaml":true},{"content":"An <xref href=\"System.Collections.IEnumerator\"></xref> for the specified range of elements in the <xref href=\"System.Collections.ArrayList\"></xref>.","nodes":[{"pos":[0,148],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Collections.IEnumerator\"&gt;&lt;/xref&gt;</ph> for the specified range of elements in the <ph id=\"ph2\">&lt;xref href=\"System.Collections.ArrayList\"&gt;&lt;/xref&gt;</ph>.","source":"An <xref href=\"System.Collections.IEnumerator\"></xref> for the specified range of elements in the <xref href=\"System.Collections.ArrayList\"></xref>."}],"pos":[84558,84707],"yaml":true},{"content":"<code>index</code> is less than zero.  \n  \n -or-  \n  \n <code>count</code> is less than zero.","nodes":[{"pos":[0,37],"content":"<ph id=\"ph1\">&lt;code&gt;index&lt;/code&gt;</ph> is less than zero.","source":"<code>index</code> is less than zero."},{"pos":[44,48],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[55,92],"content":"<ph id=\"ph1\">&lt;code&gt;count&lt;/code&gt;</ph> is less than zero.","source":"<code>count</code> is less than zero."}],"pos":[84891,84990],"yaml":true},{"content":"<code>index</code> and <code>count</code> do not specify a valid range in the <xref href=\"System.Collections.ArrayList\"></xref>.","nodes":[{"pos":[0,128],"content":"<ph id=\"ph1\">&lt;code&gt;index&lt;/code&gt;</ph> and <ph id=\"ph2\">&lt;code&gt;count&lt;/code&gt;</ph> do not specify a valid range in the <ph id=\"ph3\">&lt;xref href=\"System.Collections.ArrayList\"&gt;&lt;/xref&gt;</ph>.","source":"<code>index</code> and <code>count</code> do not specify a valid range in the <xref href=\"System.Collections.ArrayList\"></xref>."}],"pos":[85084,85213],"yaml":true},{"content":"Returns an <xref href=\"System.Collections.ArrayList\"></xref> which represents a subset of the elements in the source <xref href=\"System.Collections.ArrayList\"></xref>.","nodes":[{"pos":[0,167],"content":"Returns an <ph id=\"ph1\">&lt;xref href=\"System.Collections.ArrayList\"&gt;&lt;/xref&gt;</ph> which represents a subset of the elements in the source <ph id=\"ph2\">&lt;xref href=\"System.Collections.ArrayList\"&gt;&lt;/xref&gt;</ph>.","source":"Returns an <xref href=\"System.Collections.ArrayList\"></xref> which represents a subset of the elements in the source <xref href=\"System.Collections.ArrayList\"></xref>."}],"pos":[86542,86710],"yaml":true},{"content":"This method does not create copies of the elements. The new <xref:System.Collections.ArrayList> is only a view window into the source <xref:System.Collections.ArrayList>. However, all subsequent changes to the source <xref:System.Collections.ArrayList> must be done through this view window <xref:System.Collections.ArrayList>. If changes are made directly to the source <xref:System.Collections.ArrayList>, the view window <xref:System.Collections.ArrayList> is invalidated and any operations on it will return an <xref:System.InvalidOperationException>.  \n  \n This method is an O(1) operation.","nodes":[{"pos":[0,555],"content":"This method does not create copies of the elements. The new <xref:System.Collections.ArrayList> is only a view window into the source <xref:System.Collections.ArrayList>. However, all subsequent changes to the source <xref:System.Collections.ArrayList> must be done through this view window <xref:System.Collections.ArrayList>. If changes are made directly to the source <xref:System.Collections.ArrayList>, the view window <xref:System.Collections.ArrayList> is invalidated and any operations on it will return an <xref:System.InvalidOperationException>.","nodes":[{"content":"This method does not create copies of the elements. The new <xref:System.Collections.ArrayList> is only a view window into the source <xref:System.Collections.ArrayList>. However, all subsequent changes to the source <xref:System.Collections.ArrayList> must be done through this view window <xref:System.Collections.ArrayList>. If changes are made directly to the source <xref:System.Collections.ArrayList>, the view window <xref:System.Collections.ArrayList> is invalidated and any operations on it will return an <xref:System.InvalidOperationException>.","pos":[0,555],"nodes":[{"content":"This method does not create copies of the elements.","pos":[0,51]},{"content":"The new <ph id=\"ph1\">&lt;xref:System.Collections.ArrayList&gt;</ph> is only a view window into the source <ph id=\"ph2\">&lt;xref:System.Collections.ArrayList&gt;</ph>.","pos":[52,170],"source":" The new <xref:System.Collections.ArrayList> is only a view window into the source <xref:System.Collections.ArrayList>."},{"content":"However, all subsequent changes to the source <ph id=\"ph1\">&lt;xref:System.Collections.ArrayList&gt;</ph> must be done through this view window <ph id=\"ph2\">&lt;xref:System.Collections.ArrayList&gt;</ph>.","pos":[171,327],"source":" However, all subsequent changes to the source <xref:System.Collections.ArrayList> must be done through this view window <xref:System.Collections.ArrayList>."},{"content":"If changes are made directly to the source <ph id=\"ph1\">&lt;xref:System.Collections.ArrayList&gt;</ph>, the view window <ph id=\"ph2\">&lt;xref:System.Collections.ArrayList&gt;</ph> is invalidated and any operations on it will return an <ph id=\"ph3\">&lt;xref:System.InvalidOperationException&gt;</ph>.","pos":[328,555],"source":" If changes are made directly to the source <xref:System.Collections.ArrayList>, the view window <xref:System.Collections.ArrayList> is invalidated and any operations on it will return an <xref:System.InvalidOperationException>."}]}]},{"pos":[562,595],"content":"This method is an O(1) operation.","nodes":[{"content":"This method is an O(1) operation.","pos":[0,33]}]}],"pos":[86721,87321],"yaml":true,"extradata":"MT"},{"content":"The zero-based <xref href=\"System.Collections.ArrayList\"></xref> index at which the range starts.","nodes":[{"pos":[0,97],"content":"The zero-based <ph id=\"ph1\">&lt;xref href=\"System.Collections.ArrayList\"&gt;&lt;/xref&gt;</ph> index at which the range starts.","source":"The zero-based <xref href=\"System.Collections.ArrayList\"></xref> index at which the range starts."}],"pos":[88101,88199],"yaml":true},{"content":"The number of elements in the range.","nodes":[{"pos":[0,36],"content":"The number of elements in the range.","nodes":[{"content":"The number of elements in the range.","pos":[0,36]}]}],"pos":[88259,88296],"yaml":true},{"content":"An <xref href=\"System.Collections.ArrayList\"></xref> which represents a subset of the elements in the source <xref href=\"System.Collections.ArrayList\"></xref>.","nodes":[{"pos":[0,159],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Collections.ArrayList\"&gt;&lt;/xref&gt;</ph> which represents a subset of the elements in the source <ph id=\"ph2\">&lt;xref href=\"System.Collections.ArrayList\"&gt;&lt;/xref&gt;</ph>.","source":"An <xref href=\"System.Collections.ArrayList\"></xref> which represents a subset of the elements in the source <xref href=\"System.Collections.ArrayList\"></xref>."}],"pos":[88368,88528],"yaml":true},{"content":"<code>index</code> is less than zero.  \n  \n -or-  \n  \n <code>count</code> is less than zero.","nodes":[{"pos":[0,37],"content":"<ph id=\"ph1\">&lt;code&gt;index&lt;/code&gt;</ph> is less than zero.","source":"<code>index</code> is less than zero."},{"pos":[44,48],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[55,92],"content":"<ph id=\"ph1\">&lt;code&gt;count&lt;/code&gt;</ph> is less than zero.","source":"<code>count</code> is less than zero."}],"pos":[88707,88806],"yaml":true},{"content":"<code>index</code> and <code>count</code> do not denote a valid range of elements in the <xref href=\"System.Collections.ArrayList\"></xref>.","nodes":[{"pos":[0,139],"content":"<ph id=\"ph1\">&lt;code&gt;index&lt;/code&gt;</ph> and <ph id=\"ph2\">&lt;code&gt;count&lt;/code&gt;</ph> do not denote a valid range of elements in the <ph id=\"ph3\">&lt;xref href=\"System.Collections.ArrayList\"&gt;&lt;/xref&gt;</ph>.","source":"<code>index</code> and <code>count</code> do not denote a valid range of elements in the <xref href=\"System.Collections.ArrayList\"></xref>."}],"pos":[88900,89040],"yaml":true},{"content":"Searches for the specified <xref href=\"System.Object\"></xref> and returns the zero-based index of the first occurrence within the entire <xref href=\"System.Collections.ArrayList\"></xref>.","nodes":[{"pos":[0,187],"content":"Searches for the specified <ph id=\"ph1\">&lt;xref href=\"System.Object\"&gt;&lt;/xref&gt;</ph> and returns the zero-based index of the first occurrence within the entire <ph id=\"ph2\">&lt;xref href=\"System.Collections.ArrayList\"&gt;&lt;/xref&gt;</ph>.","source":"Searches for the specified <xref href=\"System.Object\"></xref> and returns the zero-based index of the first occurrence within the entire <xref href=\"System.Collections.ArrayList\"></xref>."}],"pos":[90309,90497],"yaml":true},{"content":"The <xref:System.Collections.ArrayList> is searched forward starting at the first element and ending at the last element.  \n  \n This method performs a linear search; therefore, this method is an O(`n`) operation, where `n` is <xref:System.Collections.ArrayList.Count%2A>.  \n  \n This method determines equality by calling <xref:System.Object.Equals%2A?displayProperty=fullName>.  \n  \n Starting with the .NET Framework 2.0, this method uses the collection’s objects’ <xref:System.Object.Equals%2A> and <xref:System.IComparable.CompareTo%2A> methods on `item` to determine whether item exists. In the earlier versions of the .NET Framework, this determination was made by using the <xref:System.Object.Equals%2A> and <xref:System.IComparable.CompareTo%2A> methods of the `item` parameter on the objects in the collection.","nodes":[{"pos":[0,121],"content":"The <xref:System.Collections.ArrayList> is searched forward starting at the first element and ending at the last element.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Collections.ArrayList&gt;</ph> is searched forward starting at the first element and ending at the last element.","pos":[0,121],"source":"The <xref:System.Collections.ArrayList> is searched forward starting at the first element and ending at the last element."}]},{"pos":[128,271],"content":"This method performs a linear search; therefore, this method is an O(<ph id=\"ph1\">`n`</ph>) operation, where <ph id=\"ph2\">`n`</ph> is <ph id=\"ph3\">&lt;xref:System.Collections.ArrayList.Count%2A&gt;</ph>.","source":"This method performs a linear search; therefore, this method is an O(`n`) operation, where `n` is <xref:System.Collections.ArrayList.Count%2A>."},{"pos":[278,377],"content":"This method determines equality by calling <xref:System.Object.Equals%2A?displayProperty=fullName>.","nodes":[{"content":"This method determines equality by calling <ph id=\"ph1\">&lt;xref:System.Object.Equals%2A?displayProperty=fullName&gt;</ph>.","pos":[0,99],"source":"This method determines equality by calling <xref:System.Object.Equals%2A?displayProperty=fullName>."}]},{"pos":[384,818],"content":"Starting with the .NET Framework 2.0, this method uses the collection’s objects’ <xref:System.Object.Equals%2A> and <xref:System.IComparable.CompareTo%2A> methods on `item` to determine whether item exists. In the earlier versions of the .NET Framework, this determination was made by using the <xref:System.Object.Equals%2A> and <xref:System.IComparable.CompareTo%2A> methods of the `item` parameter on the objects in the collection.","nodes":[{"content":"Starting with the .NET Framework 2.0, this method uses the collection’s objects’ <ph id=\"ph1\">&lt;xref:System.Object.Equals%2A&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.IComparable.CompareTo%2A&gt;</ph> methods on <ph id=\"ph3\">`item`</ph> to determine whether item exists.","pos":[0,206],"source":"Starting with the .NET Framework 2.0, this method uses the collection’s objects’ <xref:System.Object.Equals%2A> and <xref:System.IComparable.CompareTo%2A> methods on `item` to determine whether item exists."},{"content":"In the earlier versions of the .NET Framework, this determination was made by using the <ph id=\"ph1\">&lt;xref:System.Object.Equals%2A&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.IComparable.CompareTo%2A&gt;</ph> methods of the <ph id=\"ph3\">`item`</ph> parameter on the objects in the collection.","pos":[207,434],"source":" In the earlier versions of the .NET Framework, this determination was made by using the <xref:System.Object.Equals%2A> and <xref:System.IComparable.CompareTo%2A> methods of the `item` parameter on the objects in the collection."}]}],"pos":[90508,91335],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Object\"></xref> to locate in the <xref href=\"System.Collections.ArrayList\"></xref>. The value can be `null`.","nodes":[{"pos":[0,131],"content":"The <xref href=\"System.Object\"></xref> to locate in the <xref href=\"System.Collections.ArrayList\"></xref>. The value can be `null`.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Object\"&gt;&lt;/xref&gt;</ph> to locate in the <ph id=\"ph2\">&lt;xref href=\"System.Collections.ArrayList\"&gt;&lt;/xref&gt;</ph>.","pos":[0,106],"source":"The <xref href=\"System.Object\"></xref> to locate in the <xref href=\"System.Collections.ArrayList\"></xref>."},{"content":"The value can be <ph id=\"ph1\">`null`</ph>.","pos":[107,131],"source":" The value can be `null`."}]}],"pos":[92068,92200],"yaml":true},{"content":"The zero-based index of the first occurrence of <code>value</code> within the entire <xref href=\"System.Collections.ArrayList\"></xref>, if found; otherwise, -1.","nodes":[{"pos":[0,160],"content":"The zero-based index of the first occurrence of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept> within the entire <ph id=\"ph2\">&lt;xref href=\"System.Collections.ArrayList\"&gt;&lt;/xref&gt;</ph>, if found; otherwise, -1.","source":"The zero-based index of the first occurrence of <code>value</code> within the entire <xref href=\"System.Collections.ArrayList\"></xref>, if found; otherwise, -1."}],"pos":[92256,92417],"yaml":true},{"content":"Searches for the specified <xref href=\"System.Object\"></xref> and returns the zero-based index of the first occurrence within the range of elements in the <xref href=\"System.Collections.ArrayList\"></xref> that extends from the specified index to the last element.","nodes":[{"pos":[0,263],"content":"Searches for the specified <ph id=\"ph1\">&lt;xref href=\"System.Object\"&gt;&lt;/xref&gt;</ph> and returns the zero-based index of the first occurrence within the range of elements in the <ph id=\"ph2\">&lt;xref href=\"System.Collections.ArrayList\"&gt;&lt;/xref&gt;</ph> that extends from the specified index to the last element.","source":"Searches for the specified <xref href=\"System.Object\"></xref> and returns the zero-based index of the first occurrence within the range of elements in the <xref href=\"System.Collections.ArrayList\"></xref> that extends from the specified index to the last element."}],"pos":[93813,94077],"yaml":true},{"content":"The <xref:System.Collections.ArrayList> is searched forward starting at `startIndex` and ending at the last element.  \n  \n This method performs a linear search; therefore, this method is an O(`n`) operation, where `n` is the number of elements from `startIndex` to the end of the <xref:System.Collections.ArrayList>.  \n  \n This method determines equality by calling <xref:System.Object.Equals%2A?displayProperty=fullName>.  \n  \n Starting with the .NET Framework 2.0, this method uses the collection’s objects’ <xref:System.Object.Equals%2A> and <xref:System.IComparable.CompareTo%2A> methods on `item` to determine whether item exists. In the earlier versions of the .NET Framework, this determination was made by using the <xref:System.Object.Equals%2A> and <xref:System.IComparable.CompareTo%2A> methods of the `item` parameter on the objects in the collection.","nodes":[{"pos":[0,116],"content":"The <ph id=\"ph1\">&lt;xref:System.Collections.ArrayList&gt;</ph> is searched forward starting at <ph id=\"ph2\">`startIndex`</ph> and ending at the last element.","source":"The <xref:System.Collections.ArrayList> is searched forward starting at `startIndex` and ending at the last element."},{"pos":[123,316],"content":"This method performs a linear search; therefore, this method is an O(<ph id=\"ph1\">`n`</ph>) operation, where <ph id=\"ph2\">`n`</ph> is the number of elements from <ph id=\"ph3\">`startIndex`</ph> to the end of the <ph id=\"ph4\">&lt;xref:System.Collections.ArrayList&gt;</ph>.","source":"This method performs a linear search; therefore, this method is an O(`n`) operation, where `n` is the number of elements from `startIndex` to the end of the <xref:System.Collections.ArrayList>."},{"pos":[323,422],"content":"This method determines equality by calling <xref:System.Object.Equals%2A?displayProperty=fullName>.","nodes":[{"content":"This method determines equality by calling <ph id=\"ph1\">&lt;xref:System.Object.Equals%2A?displayProperty=fullName&gt;</ph>.","pos":[0,99],"source":"This method determines equality by calling <xref:System.Object.Equals%2A?displayProperty=fullName>."}]},{"pos":[429,863],"content":"Starting with the .NET Framework 2.0, this method uses the collection’s objects’ <xref:System.Object.Equals%2A> and <xref:System.IComparable.CompareTo%2A> methods on `item` to determine whether item exists. In the earlier versions of the .NET Framework, this determination was made by using the <xref:System.Object.Equals%2A> and <xref:System.IComparable.CompareTo%2A> methods of the `item` parameter on the objects in the collection.","nodes":[{"content":"Starting with the .NET Framework 2.0, this method uses the collection’s objects’ <ph id=\"ph1\">&lt;xref:System.Object.Equals%2A&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.IComparable.CompareTo%2A&gt;</ph> methods on <ph id=\"ph3\">`item`</ph> to determine whether item exists.","pos":[0,206],"source":"Starting with the .NET Framework 2.0, this method uses the collection’s objects’ <xref:System.Object.Equals%2A> and <xref:System.IComparable.CompareTo%2A> methods on `item` to determine whether item exists."},{"content":"In the earlier versions of the .NET Framework, this determination was made by using the <ph id=\"ph1\">&lt;xref:System.Object.Equals%2A&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.IComparable.CompareTo%2A&gt;</ph> methods of the <ph id=\"ph3\">`item`</ph> parameter on the objects in the collection.","pos":[207,434],"source":" In the earlier versions of the .NET Framework, this determination was made by using the <xref:System.Object.Equals%2A> and <xref:System.IComparable.CompareTo%2A> methods of the `item` parameter on the objects in the collection."}]}],"pos":[94088,94960],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Object\"></xref> to locate in the <xref href=\"System.Collections.ArrayList\"></xref>. The value can be `null`.","nodes":[{"pos":[0,131],"content":"The <xref href=\"System.Object\"></xref> to locate in the <xref href=\"System.Collections.ArrayList\"></xref>. The value can be `null`.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Object\"&gt;&lt;/xref&gt;</ph> to locate in the <ph id=\"ph2\">&lt;xref href=\"System.Collections.ArrayList\"&gt;&lt;/xref&gt;</ph>.","pos":[0,106],"source":"The <xref href=\"System.Object\"></xref> to locate in the <xref href=\"System.Collections.ArrayList\"></xref>."},{"content":"The value can be <ph id=\"ph1\">`null`</ph>.","pos":[107,131],"source":" The value can be `null`."}]}],"pos":[95709,95841],"yaml":true},{"content":"The zero-based starting index of the search. 0 (zero) is valid in an empty list.","nodes":[{"pos":[0,80],"content":"The zero-based starting index of the search. 0 (zero) is valid in an empty list.","nodes":[{"content":"The zero-based starting index of the search. 0 (zero) is valid in an empty list.","pos":[0,80],"nodes":[{"content":"The zero-based starting index of the search.","pos":[0,44]},{"content":"0 (zero) is valid in an empty list.","pos":[45,80]}]}]}],"pos":[95906,95987],"yaml":true},{"content":"The zero-based index of the first occurrence of <code>value</code> within the range of elements in the <xref href=\"System.Collections.ArrayList\"></xref> that extends from <code>startIndex</code> to the last element, if found; otherwise, -1.","nodes":[{"pos":[0,240],"content":"The zero-based index of the first occurrence of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept> within the range of elements in the <ph id=\"ph2\">&lt;xref href=\"System.Collections.ArrayList\"&gt;&lt;/xref&gt;</ph> that extends from <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph3\">startIndex</ph><ept id=\"p2\">&lt;/code&gt;</ept> to the last element, if found; otherwise, -1.","source":"The zero-based index of the first occurrence of <code>value</code> within the range of elements in the <xref href=\"System.Collections.ArrayList\"></xref> that extends from <code>startIndex</code> to the last element, if found; otherwise, -1."}],"pos":[96043,96284],"yaml":true},{"content":"<code>startIndex</code> is outside the range of valid indexes for the <xref href=\"System.Collections.ArrayList\"></xref>.","nodes":[{"pos":[0,120],"content":"<ph id=\"ph1\">&lt;code&gt;startIndex&lt;/code&gt;</ph> is outside the range of valid indexes for the <ph id=\"ph2\">&lt;xref href=\"System.Collections.ArrayList\"&gt;&lt;/xref&gt;</ph>.","source":"<code>startIndex</code> is outside the range of valid indexes for the <xref href=\"System.Collections.ArrayList\"></xref>."}],"pos":[96462,96583],"yaml":true},{"content":"Searches for the specified <xref href=\"System.Object\"></xref> and returns the zero-based index of the first occurrence within the range of elements in the <xref href=\"System.Collections.ArrayList\"></xref> that starts at the specified index and contains the specified number of elements.","nodes":[{"pos":[0,286],"content":"Searches for the specified <ph id=\"ph1\">&lt;xref href=\"System.Object\"&gt;&lt;/xref&gt;</ph> and returns the zero-based index of the first occurrence within the range of elements in the <ph id=\"ph2\">&lt;xref href=\"System.Collections.ArrayList\"&gt;&lt;/xref&gt;</ph> that starts at the specified index and contains the specified number of elements.","source":"Searches for the specified <xref href=\"System.Object\"></xref> and returns the zero-based index of the first occurrence within the range of elements in the <xref href=\"System.Collections.ArrayList\"></xref> that starts at the specified index and contains the specified number of elements."}],"pos":[97972,98259],"yaml":true},{"content":"The <xref:System.Collections.ArrayList> is searched forward starting at `startIndex` and ending at `startIndex` plus `count` minus 1, if `count` is greater than 0.  \n  \n This method performs a linear search; therefore, this method is an O(`n`) operation, where `n` is `count`.  \n  \n This method determines equality by calling <xref:System.Object.Equals%2A?displayProperty=fullName>.  \n  \n Starting with the .NET Framework 2.0, this method uses the collection’s objects’ <xref:System.Object.Equals%2A> and <xref:System.IComparable.CompareTo%2A> methods on `item` to determine whether item exists. In the earlier versions of the .NET Framework, this determination was made by using the <xref:System.Object.Equals%2A> and <xref:System.IComparable.CompareTo%2A> methods of the `item` parameter on the objects in the collection.","nodes":[{"pos":[0,163],"content":"The <ph id=\"ph1\">&lt;xref:System.Collections.ArrayList&gt;</ph> is searched forward starting at <ph id=\"ph2\">`startIndex`</ph> and ending at <ph id=\"ph3\">`startIndex`</ph> plus <ph id=\"ph4\">`count`</ph> minus 1, if <ph id=\"ph5\">`count`</ph> is greater than 0.","source":"The <xref:System.Collections.ArrayList> is searched forward starting at `startIndex` and ending at `startIndex` plus `count` minus 1, if `count` is greater than 0."},{"pos":[170,276],"content":"This method performs a linear search; therefore, this method is an O(<ph id=\"ph1\">`n`</ph>) operation, where <ph id=\"ph2\">`n`</ph> is <ph id=\"ph3\">`count`</ph>.","source":"This method performs a linear search; therefore, this method is an O(`n`) operation, where `n` is `count`."},{"pos":[283,382],"content":"This method determines equality by calling <xref:System.Object.Equals%2A?displayProperty=fullName>.","nodes":[{"content":"This method determines equality by calling <ph id=\"ph1\">&lt;xref:System.Object.Equals%2A?displayProperty=fullName&gt;</ph>.","pos":[0,99],"source":"This method determines equality by calling <xref:System.Object.Equals%2A?displayProperty=fullName>."}]},{"pos":[389,823],"content":"Starting with the .NET Framework 2.0, this method uses the collection’s objects’ <xref:System.Object.Equals%2A> and <xref:System.IComparable.CompareTo%2A> methods on `item` to determine whether item exists. In the earlier versions of the .NET Framework, this determination was made by using the <xref:System.Object.Equals%2A> and <xref:System.IComparable.CompareTo%2A> methods of the `item` parameter on the objects in the collection.","nodes":[{"content":"Starting with the .NET Framework 2.0, this method uses the collection’s objects’ <ph id=\"ph1\">&lt;xref:System.Object.Equals%2A&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.IComparable.CompareTo%2A&gt;</ph> methods on <ph id=\"ph3\">`item`</ph> to determine whether item exists.","pos":[0,206],"source":"Starting with the .NET Framework 2.0, this method uses the collection’s objects’ <xref:System.Object.Equals%2A> and <xref:System.IComparable.CompareTo%2A> methods on `item` to determine whether item exists."},{"content":"In the earlier versions of the .NET Framework, this determination was made by using the <ph id=\"ph1\">&lt;xref:System.Object.Equals%2A&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.IComparable.CompareTo%2A&gt;</ph> methods of the <ph id=\"ph3\">`item`</ph> parameter on the objects in the collection.","pos":[207,434],"source":" In the earlier versions of the .NET Framework, this determination was made by using the <xref:System.Object.Equals%2A> and <xref:System.IComparable.CompareTo%2A> methods of the `item` parameter on the objects in the collection."}]}],"pos":[98270,99102],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Object\"></xref> to locate in the <xref href=\"System.Collections.ArrayList\"></xref>. The value can be `null`.","nodes":[{"pos":[0,131],"content":"The <xref href=\"System.Object\"></xref> to locate in the <xref href=\"System.Collections.ArrayList\"></xref>. The value can be `null`.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Object\"&gt;&lt;/xref&gt;</ph> to locate in the <ph id=\"ph2\">&lt;xref href=\"System.Collections.ArrayList\"&gt;&lt;/xref&gt;</ph>.","pos":[0,106],"source":"The <xref href=\"System.Object\"></xref> to locate in the <xref href=\"System.Collections.ArrayList\"></xref>."},{"content":"The value can be <ph id=\"ph1\">`null`</ph>.","pos":[107,131],"source":" The value can be `null`."}]}],"pos":[99862,99994],"yaml":true},{"content":"The zero-based starting index of the search. 0 (zero) is valid in an empty list.","nodes":[{"pos":[0,80],"content":"The zero-based starting index of the search. 0 (zero) is valid in an empty list.","nodes":[{"content":"The zero-based starting index of the search. 0 (zero) is valid in an empty list.","pos":[0,80],"nodes":[{"content":"The zero-based starting index of the search.","pos":[0,44]},{"content":"0 (zero) is valid in an empty list.","pos":[45,80]}]}]}],"pos":[100059,100140],"yaml":true},{"content":"The number of elements in the section to search.","nodes":[{"pos":[0,48],"content":"The number of elements in the section to search.","nodes":[{"content":"The number of elements in the section to search.","pos":[0,48]}]}],"pos":[100200,100249],"yaml":true},{"content":"The zero-based index of the first occurrence of <code>value</code> within the range of elements in the <xref href=\"System.Collections.ArrayList\"></xref> that starts at <code>startIndex</code> and contains <code>count</code> number of elements, if found; otherwise, -1.","nodes":[{"pos":[0,268],"content":"The zero-based index of the first occurrence of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept> within the range of elements in the <ph id=\"ph2\">&lt;xref href=\"System.Collections.ArrayList\"&gt;&lt;/xref&gt;</ph> that starts at <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph3\">startIndex</ph><ept id=\"p2\">&lt;/code&gt;</ept> and contains <bpt id=\"p3\">&lt;code&gt;</bpt><ph id=\"ph4\">count</ph><ept id=\"p3\">&lt;/code&gt;</ept> number of elements, if found; otherwise, -1.","source":"The zero-based index of the first occurrence of <code>value</code> within the range of elements in the <xref href=\"System.Collections.ArrayList\"></xref> that starts at <code>startIndex</code> and contains <code>count</code> number of elements, if found; otherwise, -1."}],"pos":[100305,100574],"yaml":true},{"content":"<code>startIndex</code> is outside the range of valid indexes for the <xref href=\"System.Collections.ArrayList\"></xref>.  \n  \n -or-  \n  \n <code>count</code> is less than zero.  \n  \n -or-  \n  \n <code>startIndex</code> and <code>count</code> do not specify a valid section in the <xref href=\"System.Collections.ArrayList\"></xref>.","nodes":[{"pos":[0,120],"content":"<ph id=\"ph1\">&lt;code&gt;startIndex&lt;/code&gt;</ph> is outside the range of valid indexes for the <ph id=\"ph2\">&lt;xref href=\"System.Collections.ArrayList\"&gt;&lt;/xref&gt;</ph>.","source":"<code>startIndex</code> is outside the range of valid indexes for the <xref href=\"System.Collections.ArrayList\"></xref>."},{"pos":[127,131],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[138,175],"content":"<ph id=\"ph1\">&lt;code&gt;count&lt;/code&gt;</ph> is less than zero.","source":"<code>count</code> is less than zero."},{"pos":[182,186],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[193,328],"content":"<ph id=\"ph1\">&lt;code&gt;startIndex&lt;/code&gt;</ph> and <ph id=\"ph2\">&lt;code&gt;count&lt;/code&gt;</ph> do not specify a valid section in the <ph id=\"ph3\">&lt;xref href=\"System.Collections.ArrayList\"&gt;&lt;/xref&gt;</ph>.","source":"<code>startIndex</code> and <code>count</code> do not specify a valid section in the <xref href=\"System.Collections.ArrayList\"></xref>."}],"pos":[100752,101095],"yaml":true},{"content":"Inserts an element into the <xref href=\"System.Collections.ArrayList\"></xref> at the specified index.","nodes":[{"pos":[0,101],"content":"Inserts an element into the <ph id=\"ph1\">&lt;xref href=\"System.Collections.ArrayList\"&gt;&lt;/xref&gt;</ph> at the specified index.","source":"Inserts an element into the <xref href=\"System.Collections.ArrayList\"></xref> at the specified index."}],"pos":[102418,102520],"yaml":true},{"content":"<xref:System.Collections.ArrayList> accepts `null` as a valid value and allows duplicate elements.  \n  \n If <xref:System.Collections.ArrayList.Count%2A> already equals <xref:System.Collections.ArrayList.Capacity%2A>, the capacity of the <xref:System.Collections.ArrayList> is increased by automatically reallocating the internal array, and the existing elements are copied to the new array before the new element is added.  \n  \n If `index` is equal to <xref:System.Collections.ArrayList.Count%2A>, `value` is added to the end of <xref:System.Collections.ArrayList>.  \n  \n In collections of contiguous elements, such as lists, the elements that follow the insertion point move down to accommodate the new element. If the collection is indexed, the indexes of the elements that are moved are also updated. This behavior does not apply to collections where elements are conceptually grouped into buckets, such as a hash table.  \n  \n This method is an O(`n`) operation, where `n` is <xref:System.Collections.ArrayList.Count%2A>.","nodes":[{"pos":[0,98],"content":"<ph id=\"ph1\">&lt;xref:System.Collections.ArrayList&gt;</ph> accepts <ph id=\"ph2\">`null`</ph> as a valid value and allows duplicate elements.","source":"<xref:System.Collections.ArrayList> accepts `null` as a valid value and allows duplicate elements."},{"pos":[105,422],"content":"If <xref:System.Collections.ArrayList.Count%2A> already equals <xref:System.Collections.ArrayList.Capacity%2A>, the capacity of the <xref:System.Collections.ArrayList> is increased by automatically reallocating the internal array, and the existing elements are copied to the new array before the new element is added.","nodes":[{"content":"If <ph id=\"ph1\">&lt;xref:System.Collections.ArrayList.Count%2A&gt;</ph> already equals <ph id=\"ph2\">&lt;xref:System.Collections.ArrayList.Capacity%2A&gt;</ph>, the capacity of the <ph id=\"ph3\">&lt;xref:System.Collections.ArrayList&gt;</ph> is increased by automatically reallocating the internal array, and the existing elements are copied to the new array before the new element is added.","pos":[0,317],"source":"If <xref:System.Collections.ArrayList.Count%2A> already equals <xref:System.Collections.ArrayList.Capacity%2A>, the capacity of the <xref:System.Collections.ArrayList> is increased by automatically reallocating the internal array, and the existing elements are copied to the new array before the new element is added."}]},{"pos":[429,565],"content":"If <ph id=\"ph1\">`index`</ph> is equal to <ph id=\"ph2\">&lt;xref:System.Collections.ArrayList.Count%2A&gt;</ph>, <ph id=\"ph3\">`value`</ph> is added to the end of <ph id=\"ph4\">&lt;xref:System.Collections.ArrayList&gt;</ph>.","source":"If `index` is equal to <xref:System.Collections.ArrayList.Count%2A>, `value` is added to the end of <xref:System.Collections.ArrayList>."},{"pos":[572,923],"content":"In collections of contiguous elements, such as lists, the elements that follow the insertion point move down to accommodate the new element. If the collection is indexed, the indexes of the elements that are moved are also updated. This behavior does not apply to collections where elements are conceptually grouped into buckets, such as a hash table.","nodes":[{"content":"In collections of contiguous elements, such as lists, the elements that follow the insertion point move down to accommodate the new element. If the collection is indexed, the indexes of the elements that are moved are also updated. This behavior does not apply to collections where elements are conceptually grouped into buckets, such as a hash table.","pos":[0,351],"nodes":[{"content":"In collections of contiguous elements, such as lists, the elements that follow the insertion point move down to accommodate the new element.","pos":[0,140]},{"content":"If the collection is indexed, the indexes of the elements that are moved are also updated.","pos":[141,231]},{"content":"This behavior does not apply to collections where elements are conceptually grouped into buckets, such as a hash table.","pos":[232,351]}]}]},{"pos":[930,1024],"content":"This method is an O(<ph id=\"ph1\">`n`</ph>) operation, where <ph id=\"ph2\">`n`</ph> is <ph id=\"ph3\">&lt;xref:System.Collections.ArrayList.Count%2A&gt;</ph>.","source":"This method is an O(`n`) operation, where `n` is <xref:System.Collections.ArrayList.Count%2A>."}],"pos":[102531,103566],"yaml":true,"extradata":"MT"},{"content":"The zero-based index at which <code>value</code> should be inserted.","nodes":[{"pos":[0,68],"content":"The zero-based index at which <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept> should be inserted.","source":"The zero-based index at which <code>value</code> should be inserted."}],"pos":[104297,104366],"yaml":true},{"content":"The <xref href=\"System.Object\"></xref> to insert. The value can be `null`.","nodes":[{"pos":[0,74],"content":"The <xref href=\"System.Object\"></xref> to insert. The value can be `null`.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Object\"&gt;&lt;/xref&gt;</ph> to insert.","pos":[0,49],"source":"The <xref href=\"System.Object\"></xref> to insert."},{"content":"The value can be <ph id=\"ph1\">`null`</ph>.","pos":[50,74],"source":" The value can be `null`."}]}],"pos":[104427,104502],"yaml":true},{"content":"<code>index</code> is less than zero.  \n  \n -or-  \n  \n <code>index</code> is greater than <xref href=\"System.Collections.ArrayList.Count\"></xref>.","nodes":[{"pos":[0,37],"content":"<ph id=\"ph1\">&lt;code&gt;index&lt;/code&gt;</ph> is less than zero.","source":"<code>index</code> is less than zero."},{"pos":[44,48],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[55,146],"content":"<ph id=\"ph1\">&lt;code&gt;index&lt;/code&gt;</ph> is greater than <ph id=\"ph2\">&lt;xref href=\"System.Collections.ArrayList.Count\"&gt;&lt;/xref&gt;</ph>.","source":"<code>index</code> is greater than <xref href=\"System.Collections.ArrayList.Count\"></xref>."}],"pos":[104679,104834],"yaml":true},{"content":"The <xref href=\"System.Collections.ArrayList\"></xref> is read-only.  \n  \n -or-  \n  \n The <xref href=\"System.Collections.ArrayList\"></xref> has a fixed size.","nodes":[{"pos":[0,67],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Collections.ArrayList\"&gt;&lt;/xref&gt;</ph> is read-only.","source":"The <xref href=\"System.Collections.ArrayList\"></xref> is read-only."},{"pos":[74,78],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[85,156],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Collections.ArrayList\"&gt;&lt;/xref&gt;</ph> has a fixed size.","source":"The <xref href=\"System.Collections.ArrayList\"></xref> has a fixed size."}],"pos":[104936,105103],"yaml":true},{"content":"Inserts the elements of a collection into the <xref href=\"System.Collections.ArrayList\"></xref> at the specified index.","nodes":[{"pos":[0,119],"content":"Inserts the elements of a collection into the <ph id=\"ph1\">&lt;xref href=\"System.Collections.ArrayList\"&gt;&lt;/xref&gt;</ph> at the specified index.","source":"Inserts the elements of a collection into the <xref href=\"System.Collections.ArrayList\"></xref> at the specified index."}],"pos":[106522,106642],"yaml":true},{"content":"<xref:System.Collections.ArrayList> accepts `null` as a valid value and allows duplicate elements.  \n  \n If the new <xref:System.Collections.ArrayList.Count%2A> (the current <xref:System.Collections.ArrayList.Count%2A> plus the size of the collection) will be greater than <xref:System.Collections.ArrayList.Capacity%2A>, the capacity of the <xref:System.Collections.ArrayList> is increased by automatically reallocating the internal array to accommodate the new elements, and the existing elements are copied to the new array before the new elements are added.  \n  \n If `index` is equal to <xref:System.Collections.ArrayList.Count%2A>, the elements are added to the end of <xref:System.Collections.ArrayList>.  \n  \n The order of the elements in the <xref:System.Collections.ICollection> is preserved in the <xref:System.Collections.ArrayList>.  \n  \n In collections of contiguous elements, such as lists, the elements that follow the insertion point move down to accommodate the new element. If the collection is indexed, the indexes of the elements that are moved are also updated. This behavior does not apply to collections where elements are conceptually grouped into buckets, such as a hash table.  \n  \n This method is an O(`n` + `m`) operation, where `n` is the number of elements to be added and `m` is <xref:System.Collections.ArrayList.Count%2A>.","nodes":[{"pos":[0,98],"content":"<ph id=\"ph1\">&lt;xref:System.Collections.ArrayList&gt;</ph> accepts <ph id=\"ph2\">`null`</ph> as a valid value and allows duplicate elements.","source":"<xref:System.Collections.ArrayList> accepts `null` as a valid value and allows duplicate elements."},{"pos":[105,561],"content":"If the new <xref:System.Collections.ArrayList.Count%2A> (the current <xref:System.Collections.ArrayList.Count%2A> plus the size of the collection) will be greater than <xref:System.Collections.ArrayList.Capacity%2A>, the capacity of the <xref:System.Collections.ArrayList> is increased by automatically reallocating the internal array to accommodate the new elements, and the existing elements are copied to the new array before the new elements are added.","nodes":[{"content":"If the new <ph id=\"ph1\">&lt;xref:System.Collections.ArrayList.Count%2A&gt;</ph> (the current <ph id=\"ph2\">&lt;xref:System.Collections.ArrayList.Count%2A&gt;</ph> plus the size of the collection) will be greater than <ph id=\"ph3\">&lt;xref:System.Collections.ArrayList.Capacity%2A&gt;</ph>, the capacity of the <ph id=\"ph4\">&lt;xref:System.Collections.ArrayList&gt;</ph> is increased by automatically reallocating the internal array to accommodate the new elements, and the existing elements are copied to the new array before the new elements are added.","pos":[0,456],"source":"If the new <xref:System.Collections.ArrayList.Count%2A> (the current <xref:System.Collections.ArrayList.Count%2A> plus the size of the collection) will be greater than <xref:System.Collections.ArrayList.Capacity%2A>, the capacity of the <xref:System.Collections.ArrayList> is increased by automatically reallocating the internal array to accommodate the new elements, and the existing elements are copied to the new array before the new elements are added."}]},{"pos":[568,710],"content":"If <ph id=\"ph1\">`index`</ph> is equal to <ph id=\"ph2\">&lt;xref:System.Collections.ArrayList.Count%2A&gt;</ph>, the elements are added to the end of <ph id=\"ph3\">&lt;xref:System.Collections.ArrayList&gt;</ph>.","source":"If `index` is equal to <xref:System.Collections.ArrayList.Count%2A>, the elements are added to the end of <xref:System.Collections.ArrayList>."},{"pos":[717,844],"content":"The order of the elements in the <xref:System.Collections.ICollection> is preserved in the <xref:System.Collections.ArrayList>.","nodes":[{"content":"The order of the elements in the <ph id=\"ph1\">&lt;xref:System.Collections.ICollection&gt;</ph> is preserved in the <ph id=\"ph2\">&lt;xref:System.Collections.ArrayList&gt;</ph>.","pos":[0,127],"source":"The order of the elements in the <xref:System.Collections.ICollection> is preserved in the <xref:System.Collections.ArrayList>."}]},{"pos":[851,1202],"content":"In collections of contiguous elements, such as lists, the elements that follow the insertion point move down to accommodate the new element. If the collection is indexed, the indexes of the elements that are moved are also updated. This behavior does not apply to collections where elements are conceptually grouped into buckets, such as a hash table.","nodes":[{"content":"In collections of contiguous elements, such as lists, the elements that follow the insertion point move down to accommodate the new element. If the collection is indexed, the indexes of the elements that are moved are also updated. This behavior does not apply to collections where elements are conceptually grouped into buckets, such as a hash table.","pos":[0,351],"nodes":[{"content":"In collections of contiguous elements, such as lists, the elements that follow the insertion point move down to accommodate the new element.","pos":[0,140]},{"content":"If the collection is indexed, the indexes of the elements that are moved are also updated.","pos":[141,231]},{"content":"This behavior does not apply to collections where elements are conceptually grouped into buckets, such as a hash table.","pos":[232,351]}]}]},{"pos":[1209,1355],"content":"This method is an O(<ph id=\"ph1\">`n`</ph><ph id=\"ph2\"> + </ph><ph id=\"ph3\">`m`</ph>) operation, where <ph id=\"ph4\">`n`</ph> is the number of elements to be added and <ph id=\"ph5\">`m`</ph> is <ph id=\"ph6\">&lt;xref:System.Collections.ArrayList.Count%2A&gt;</ph>.","source":"This method is an O(`n` + `m`) operation, where `n` is the number of elements to be added and `m` is <xref:System.Collections.ArrayList.Count%2A>."}],"pos":[106653,108021],"yaml":true,"extradata":"MT"},{"content":"The zero-based index at which the new elements should be inserted.","nodes":[{"pos":[0,66],"content":"The zero-based index at which the new elements should be inserted.","nodes":[{"content":"The zero-based index at which the new elements should be inserted.","pos":[0,66]}]}],"pos":[108777,108844],"yaml":true},{"content":"The <xref href=\"System.Collections.ICollection\"></xref> whose elements should be inserted into the <xref href=\"System.Collections.ArrayList\"></xref>. The collection itself cannot be `null`, but it can contain elements that are `null`.","nodes":[{"pos":[0,234],"content":"The <xref href=\"System.Collections.ICollection\"></xref> whose elements should be inserted into the <xref href=\"System.Collections.ArrayList\"></xref>. The collection itself cannot be `null`, but it can contain elements that are `null`.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Collections.ICollection\"&gt;&lt;/xref&gt;</ph> whose elements should be inserted into the <ph id=\"ph2\">&lt;xref href=\"System.Collections.ArrayList\"&gt;&lt;/xref&gt;</ph>.","pos":[0,149],"source":"The <xref href=\"System.Collections.ICollection\"></xref> whose elements should be inserted into the <xref href=\"System.Collections.ArrayList\"></xref>."},{"content":"The collection itself cannot be <ph id=\"ph1\">`null`</ph>, but it can contain elements that are <ph id=\"ph2\">`null`</ph>.","pos":[150,234],"source":" The collection itself cannot be `null`, but it can contain elements that are `null`."}]}],"pos":[108918,109153],"yaml":true},{"content":"<code>c</code> is `null`.","nodes":[{"pos":[0,25],"content":"<ph id=\"ph1\">&lt;code&gt;c&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>c</code> is `null`."}],"pos":[109323,109349],"yaml":true},{"content":"<code>index</code> is less than zero.  \n  \n -or-  \n  \n <code>index</code> is greater than <xref href=\"System.Collections.ArrayList.Count\"></xref>.","nodes":[{"pos":[0,37],"content":"<ph id=\"ph1\">&lt;code&gt;index&lt;/code&gt;</ph> is less than zero.","source":"<code>index</code> is less than zero."},{"pos":[44,48],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[55,146],"content":"<ph id=\"ph1\">&lt;code&gt;index&lt;/code&gt;</ph> is greater than <ph id=\"ph2\">&lt;xref href=\"System.Collections.ArrayList.Count\"&gt;&lt;/xref&gt;</ph>.","source":"<code>index</code> is greater than <xref href=\"System.Collections.ArrayList.Count\"></xref>."}],"pos":[109463,109618],"yaml":true},{"content":"The <xref href=\"System.Collections.ArrayList\"></xref> is read-only.  \n  \n -or-  \n  \n The <xref href=\"System.Collections.ArrayList\"></xref> has a fixed size.","nodes":[{"pos":[0,67],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Collections.ArrayList\"&gt;&lt;/xref&gt;</ph> is read-only.","source":"The <xref href=\"System.Collections.ArrayList\"></xref> is read-only."},{"pos":[74,78],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[85,156],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Collections.ArrayList\"&gt;&lt;/xref&gt;</ph> has a fixed size.","source":"The <xref href=\"System.Collections.ArrayList\"></xref> has a fixed size."}],"pos":[109720,109887],"yaml":true},{"content":"Gets a value indicating whether the <xref href=\"System.Collections.ArrayList\"></xref> has a fixed size.","nodes":[{"pos":[0,103],"content":"Gets a value indicating whether the <ph id=\"ph1\">&lt;xref href=\"System.Collections.ArrayList\"&gt;&lt;/xref&gt;</ph> has a fixed size.","source":"Gets a value indicating whether the <xref href=\"System.Collections.ArrayList\"></xref> has a fixed size."}],"pos":[111113,111217],"yaml":true},{"content":"A collection with a fixed size does not allow the addition or removal of elements after the collection is created, but it allows the modification of existing elements.  \n  \n A collection with a fixed size is simply a collection with a wrapper that prevents adding and removing elements; therefore, if changes are made to the underlying collection, including the addition or removal of elements, the fixed-size collection reflects those changes.  \n  \n Retrieving the value of this property is an O(1) operation.","nodes":[{"pos":[0,167],"content":"A collection with a fixed size does not allow the addition or removal of elements after the collection is created, but it allows the modification of existing elements.","nodes":[{"content":"A collection with a fixed size does not allow the addition or removal of elements after the collection is created, but it allows the modification of existing elements.","pos":[0,167]}]},{"pos":[174,444],"content":"A collection with a fixed size is simply a collection with a wrapper that prevents adding and removing elements; therefore, if changes are made to the underlying collection, including the addition or removal of elements, the fixed-size collection reflects those changes.","nodes":[{"content":"A collection with a fixed size is simply a collection with a wrapper that prevents adding and removing elements; therefore, if changes are made to the underlying collection, including the addition or removal of elements, the fixed-size collection reflects those changes.","pos":[0,270]}]},{"pos":[451,510],"content":"Retrieving the value of this property is an O(1) operation.","nodes":[{"content":"Retrieving the value of this property is an O(1) operation.","pos":[0,59]}]}],"pos":[111228,111745],"yaml":true,"extradata":"MT"},{"content":"`true` if the <xref href=\"System.Collections.ArrayList\"></xref> has a fixed size; otherwise, `false`. The default is `false`.","nodes":[{"pos":[0,125],"content":"`true` if the <xref href=\"System.Collections.ArrayList\"></xref> has a fixed size; otherwise, `false`. The default is `false`.","nodes":[{"content":"<ph id=\"ph1\">`true`</ph> if the <ph id=\"ph2\">&lt;xref href=\"System.Collections.ArrayList\"&gt;&lt;/xref&gt;</ph> has a fixed size; otherwise, <ph id=\"ph3\">`false`</ph>.","pos":[0,101],"source":"`true` if the <xref href=\"System.Collections.ArrayList\"></xref> has a fixed size; otherwise, `false`."},{"content":"The default is <ph id=\"ph1\">`false`</ph>.","pos":[102,125],"source":" The default is `false`."}]}],"pos":[112488,112616],"yaml":true},{"content":"Gets a value indicating whether the <xref href=\"System.Collections.ArrayList\"></xref> is read-only.","nodes":[{"pos":[0,99],"content":"Gets a value indicating whether the <ph id=\"ph1\">&lt;xref href=\"System.Collections.ArrayList\"&gt;&lt;/xref&gt;</ph> is read-only.","source":"Gets a value indicating whether the <xref href=\"System.Collections.ArrayList\"></xref> is read-only."}],"pos":[113907,114007],"yaml":true},{"content":"A collection that is read-only does not allow the addition, removal, or modification of elements after the collection is created.  \n  \n A collection that is read-only is simply a collection with a wrapper that prevents modifying the collection; therefore, if changes are made to the underlying collection, the read-only collection reflects those changes.  \n  \n Retrieving the value of this property is an O(1) operation.","nodes":[{"pos":[0,129],"content":"A collection that is read-only does not allow the addition, removal, or modification of elements after the collection is created.","nodes":[{"content":"A collection that is read-only does not allow the addition, removal, or modification of elements after the collection is created.","pos":[0,129]}]},{"pos":[136,354],"content":"A collection that is read-only is simply a collection with a wrapper that prevents modifying the collection; therefore, if changes are made to the underlying collection, the read-only collection reflects those changes.","nodes":[{"content":"A collection that is read-only is simply a collection with a wrapper that prevents modifying the collection; therefore, if changes are made to the underlying collection, the read-only collection reflects those changes.","pos":[0,218]}]},{"pos":[361,420],"content":"Retrieving the value of this property is an O(1) operation.","nodes":[{"content":"Retrieving the value of this property is an O(1) operation.","pos":[0,59]}]}],"pos":[114018,114445],"yaml":true,"extradata":"MT"},{"content":"`true` if the <xref href=\"System.Collections.ArrayList\"></xref> is read-only; otherwise, `false`. The default is `false`.","nodes":[{"pos":[0,121],"content":"`true` if the <xref href=\"System.Collections.ArrayList\"></xref> is read-only; otherwise, `false`. The default is `false`.","nodes":[{"content":"<ph id=\"ph1\">`true`</ph> if the <ph id=\"ph2\">&lt;xref href=\"System.Collections.ArrayList\"&gt;&lt;/xref&gt;</ph> is read-only; otherwise, <ph id=\"ph3\">`false`</ph>.","pos":[0,97],"source":"`true` if the <xref href=\"System.Collections.ArrayList\"></xref> is read-only; otherwise, `false`."},{"content":"The default is <ph id=\"ph1\">`false`</ph>.","pos":[98,121],"source":" The default is `false`."}]}],"pos":[115250,115374],"yaml":true},{"content":"Gets a value indicating whether access to the <xref href=\"System.Collections.ArrayList\"></xref> is synchronized (thread safe).","nodes":[{"pos":[0,126],"content":"Gets a value indicating whether access to the <ph id=\"ph1\">&lt;xref href=\"System.Collections.ArrayList\"&gt;&lt;/xref&gt;</ph> is synchronized (thread safe).","source":"Gets a value indicating whether access to the <xref href=\"System.Collections.ArrayList\"></xref> is synchronized (thread safe)."}],"pos":[116688,116815],"yaml":true},{"content":"To guarantee the thread safety of the <xref:System.Collections.ArrayList>, all operations must be done through the wrapper returned by the <xref:System.Collections.ArrayList.Synchronized%2A> method.  \n  \n Enumerating through a collection is intrinsically not a thread-safe procedure. Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception. To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.","nodes":[{"pos":[0,198],"content":"To guarantee the thread safety of the <xref:System.Collections.ArrayList>, all operations must be done through the wrapper returned by the <xref:System.Collections.ArrayList.Synchronized%2A> method.","nodes":[{"content":"To guarantee the thread safety of the <ph id=\"ph1\">&lt;xref:System.Collections.ArrayList&gt;</ph>, all operations must be done through the wrapper returned by the <ph id=\"ph2\">&lt;xref:System.Collections.ArrayList.Synchronized%2A&gt;</ph> method.","pos":[0,198],"source":"To guarantee the thread safety of the <xref:System.Collections.ArrayList>, all operations must be done through the wrapper returned by the <xref:System.Collections.ArrayList.Synchronized%2A> method."}]},{"pos":[205,603],"content":"Enumerating through a collection is intrinsically not a thread-safe procedure. Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception. To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.","nodes":[{"content":"Enumerating through a collection is intrinsically not a thread-safe procedure. Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception. To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.","pos":[0,398],"nodes":[{"content":"Enumerating through a collection is intrinsically not a thread-safe procedure.","pos":[0,78]},{"content":"Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception.","pos":[79,216]},{"content":"To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.","pos":[217,398]}]}]}],"pos":[116826,117434],"yaml":true,"extradata":"MT"},{"content":"`true` if access to the <xref href=\"System.Collections.ArrayList\"></xref> is synchronized (thread safe); otherwise, `false`. The default is `false`.","nodes":[{"pos":[0,148],"content":"`true` if access to the <xref href=\"System.Collections.ArrayList\"></xref> is synchronized (thread safe); otherwise, `false`. The default is `false`.","nodes":[{"content":"<ph id=\"ph1\">`true`</ph> if access to the <ph id=\"ph2\">&lt;xref href=\"System.Collections.ArrayList\"&gt;&lt;/xref&gt;</ph> is synchronized (thread safe); otherwise, <ph id=\"ph3\">`false`</ph>.","pos":[0,124],"source":"`true` if access to the <xref href=\"System.Collections.ArrayList\"></xref> is synchronized (thread safe); otherwise, `false`."},{"content":"The default is <ph id=\"ph1\">`false`</ph>.","pos":[125,148],"source":" The default is `false`."}]}],"pos":[119038,119189],"yaml":true},{"content":"Gets or sets the element at the specified index.","nodes":[{"pos":[0,48],"content":"Gets or sets the element at the specified index.","nodes":[{"content":"Gets or sets the element at the specified index.","pos":[0,48]}]}],"pos":[120510,120559],"yaml":true},{"content":"The <xref:System.Collections.ArrayList.Item%2A> returns an <xref:System.Object>, so you may need to cast the returned value to the original type in order to manipulate it. It is important to note that <xref:System.Collections.ArrayList> is not a strongly-typed collection. For a strongly-typed alternative, see <xref:System.Collections.Generic.List%601>.  \n  \n <xref:System.Collections.ArrayList> accepts `null` as a valid value and allows duplicate elements.  \n  \n This property provides the ability to access a specific element in the collection by using the following syntax: `myCollection[index]`.  \n  \n The C# language uses the  keyword to define the indexers instead of implementing the <xref:System.Collections.ArrayList.Item%2A> property. Visual Basic implements <xref:System.Collections.ArrayList.Item%2A> as a default property, which provides the same indexing functionality.  \n  \n Retrieving the value of this property is an O(1) operation; setting the property is also an O(1) operation.","nodes":[{"pos":[0,354],"content":"The <xref:System.Collections.ArrayList.Item%2A> returns an <xref:System.Object>, so you may need to cast the returned value to the original type in order to manipulate it. It is important to note that <xref:System.Collections.ArrayList> is not a strongly-typed collection. For a strongly-typed alternative, see <xref:System.Collections.Generic.List%601>.","nodes":[{"content":"The <xref:System.Collections.ArrayList.Item%2A> returns an <xref:System.Object>, so you may need to cast the returned value to the original type in order to manipulate it. It is important to note that <xref:System.Collections.ArrayList> is not a strongly-typed collection. For a strongly-typed alternative, see <xref:System.Collections.Generic.List%601>.","pos":[0,354],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Collections.ArrayList.Item%2A&gt;</ph> returns an <ph id=\"ph2\">&lt;xref:System.Object&gt;</ph>, so you may need to cast the returned value to the original type in order to manipulate it.","pos":[0,171],"source":"The <xref:System.Collections.ArrayList.Item%2A> returns an <xref:System.Object>, so you may need to cast the returned value to the original type in order to manipulate it."},{"content":"It is important to note that <ph id=\"ph1\">&lt;xref:System.Collections.ArrayList&gt;</ph> is not a strongly-typed collection.","pos":[172,272],"source":" It is important to note that <xref:System.Collections.ArrayList> is not a strongly-typed collection."},{"content":"For a strongly-typed alternative, see <ph id=\"ph1\">&lt;xref:System.Collections.Generic.List%601&gt;</ph>.","pos":[273,354],"source":" For a strongly-typed alternative, see <xref:System.Collections.Generic.List%601>."}]}]},{"pos":[361,459],"content":"<ph id=\"ph1\">&lt;xref:System.Collections.ArrayList&gt;</ph> accepts <ph id=\"ph2\">`null`</ph> as a valid value and allows duplicate elements.","source":"<xref:System.Collections.ArrayList> accepts `null` as a valid value and allows duplicate elements."},{"pos":[466,601],"content":"This property provides the ability to access a specific element in the collection by using the following syntax: <ph id=\"ph1\">`myCollection[index]`</ph>.","source":"This property provides the ability to access a specific element in the collection by using the following syntax: `myCollection[index]`."},{"pos":[608,885],"content":"The C# language uses the  keyword to define the indexers instead of implementing the <xref:System.Collections.ArrayList.Item%2A> property. Visual Basic implements <xref:System.Collections.ArrayList.Item%2A> as a default property, which provides the same indexing functionality.","nodes":[{"content":"The C# language uses the  keyword to define the indexers instead of implementing the <xref:System.Collections.ArrayList.Item%2A> property. Visual Basic implements <xref:System.Collections.ArrayList.Item%2A> as a default property, which provides the same indexing functionality.","pos":[0,277],"nodes":[{"content":"The C# language uses the  keyword to define the indexers instead of implementing the <ph id=\"ph1\">&lt;xref:System.Collections.ArrayList.Item%2A&gt;</ph> property.","pos":[0,138],"source":"The C# language uses the  keyword to define the indexers instead of implementing the <xref:System.Collections.ArrayList.Item%2A> property."},{"content":"Visual Basic implements <ph id=\"ph1\">&lt;xref:System.Collections.ArrayList.Item%2A&gt;</ph> as a default property, which provides the same indexing functionality.","pos":[139,277],"source":" Visual Basic implements <xref:System.Collections.ArrayList.Item%2A> as a default property, which provides the same indexing functionality."}]}]},{"pos":[892,999],"content":"Retrieving the value of this property is an O(1) operation; setting the property is also an O(1) operation.","nodes":[{"content":"Retrieving the value of this property is an O(1) operation; setting the property is also an O(1) operation.","pos":[0,107]}]}],"pos":[120570,121580],"yaml":true,"extradata":"MT"},{"content":"The zero-based index of the element to get or set.","nodes":[{"pos":[0,50],"content":"The zero-based index of the element to get or set.","nodes":[{"content":"The zero-based index of the element to get or set.","pos":[0,50]}]}],"pos":[123465,123516],"yaml":true},{"content":"The element at the specified index.","nodes":[{"pos":[0,35],"content":"The element at the specified index.","nodes":[{"content":"The element at the specified index.","pos":[0,35]}]}],"pos":[123573,123609],"yaml":true},{"content":"<code>index</code> is less than zero.  \n  \n -or-  \n  \n <code>index</code> is equal to or greater than <xref href=\"System.Collections.ArrayList.Count\"></xref>.","nodes":[{"pos":[0,37],"content":"<ph id=\"ph1\">&lt;code&gt;index&lt;/code&gt;</ph> is less than zero.","source":"<code>index</code> is less than zero."},{"pos":[44,48],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[55,158],"content":"<ph id=\"ph1\">&lt;code&gt;index&lt;/code&gt;</ph> is equal to or greater than <ph id=\"ph2\">&lt;xref href=\"System.Collections.ArrayList.Count\"&gt;&lt;/xref&gt;</ph>.","source":"<code>index</code> is equal to or greater than <xref href=\"System.Collections.ArrayList.Count\"></xref>."}],"pos":[123784,123951],"yaml":true},{"content":"Searches for the specified <xref href=\"System.Object\"></xref> and returns the zero-based index of the last occurrence within the entire <xref href=\"System.Collections.ArrayList\"></xref>.","nodes":[{"pos":[0,186],"content":"Searches for the specified <ph id=\"ph1\">&lt;xref href=\"System.Object\"&gt;&lt;/xref&gt;</ph> and returns the zero-based index of the last occurrence within the entire <ph id=\"ph2\">&lt;xref href=\"System.Collections.ArrayList\"&gt;&lt;/xref&gt;</ph>.","source":"Searches for the specified <xref href=\"System.Object\"></xref> and returns the zero-based index of the last occurrence within the entire <xref href=\"System.Collections.ArrayList\"></xref>."}],"pos":[125244,125431],"yaml":true},{"content":"The <xref:System.Collections.ArrayList> is searched backward starting at the last element and ending at the first element.  \n  \n This method performs a linear search; therefore, this method is an O(`n`) operation, where `n` is <xref:System.Collections.ArrayList.Count%2A>.  \n  \n Starting with the .NET Framework 2.0, this method uses the collection’s objects’ <xref:System.Object.Equals%2A> and <xref:System.IComparable.CompareTo%2A> methods on `item` to determine whether item exists. In the earlier versions of the .NET Framework, this determination was made by using the <xref:System.Object.Equals%2A> and <xref:System.IComparable.CompareTo%2A> methods of the `item` parameter on the objects in the collection.","nodes":[{"pos":[0,122],"content":"The <xref:System.Collections.ArrayList> is searched backward starting at the last element and ending at the first element.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Collections.ArrayList&gt;</ph> is searched backward starting at the last element and ending at the first element.","pos":[0,122],"source":"The <xref:System.Collections.ArrayList> is searched backward starting at the last element and ending at the first element."}]},{"pos":[129,272],"content":"This method performs a linear search; therefore, this method is an O(<ph id=\"ph1\">`n`</ph>) operation, where <ph id=\"ph2\">`n`</ph> is <ph id=\"ph3\">&lt;xref:System.Collections.ArrayList.Count%2A&gt;</ph>.","source":"This method performs a linear search; therefore, this method is an O(`n`) operation, where `n` is <xref:System.Collections.ArrayList.Count%2A>."},{"pos":[279,713],"content":"Starting with the .NET Framework 2.0, this method uses the collection’s objects’ <xref:System.Object.Equals%2A> and <xref:System.IComparable.CompareTo%2A> methods on `item` to determine whether item exists. In the earlier versions of the .NET Framework, this determination was made by using the <xref:System.Object.Equals%2A> and <xref:System.IComparable.CompareTo%2A> methods of the `item` parameter on the objects in the collection.","nodes":[{"content":"Starting with the .NET Framework 2.0, this method uses the collection’s objects’ <ph id=\"ph1\">&lt;xref:System.Object.Equals%2A&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.IComparable.CompareTo%2A&gt;</ph> methods on <ph id=\"ph3\">`item`</ph> to determine whether item exists.","pos":[0,206],"source":"Starting with the .NET Framework 2.0, this method uses the collection’s objects’ <xref:System.Object.Equals%2A> and <xref:System.IComparable.CompareTo%2A> methods on `item` to determine whether item exists."},{"content":"In the earlier versions of the .NET Framework, this determination was made by using the <ph id=\"ph1\">&lt;xref:System.Object.Equals%2A&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.IComparable.CompareTo%2A&gt;</ph> methods of the <ph id=\"ph3\">`item`</ph> parameter on the objects in the collection.","pos":[207,434],"source":" In the earlier versions of the .NET Framework, this determination was made by using the <xref:System.Object.Equals%2A> and <xref:System.IComparable.CompareTo%2A> methods of the `item` parameter on the objects in the collection."}]}],"pos":[125442,126162],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Object\"></xref> to locate in the <xref href=\"System.Collections.ArrayList\"></xref>. The value can be `null`.","nodes":[{"pos":[0,131],"content":"The <xref href=\"System.Object\"></xref> to locate in the <xref href=\"System.Collections.ArrayList\"></xref>. The value can be `null`.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Object\"&gt;&lt;/xref&gt;</ph> to locate in the <ph id=\"ph2\">&lt;xref href=\"System.Collections.ArrayList\"&gt;&lt;/xref&gt;</ph>.","pos":[0,106],"source":"The <xref href=\"System.Object\"></xref> to locate in the <xref href=\"System.Collections.ArrayList\"></xref>."},{"content":"The value can be <ph id=\"ph1\">`null`</ph>.","pos":[107,131],"source":" The value can be `null`."}]}],"pos":[126922,127054],"yaml":true},{"content":"The zero-based index of the last occurrence of <code>value</code> within the entire the <xref href=\"System.Collections.ArrayList\"></xref>, if found; otherwise, -1.","nodes":[{"pos":[0,163],"content":"The zero-based index of the last occurrence of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept> within the entire the <ph id=\"ph2\">&lt;xref href=\"System.Collections.ArrayList\"&gt;&lt;/xref&gt;</ph>, if found; otherwise, -1.","source":"The zero-based index of the last occurrence of <code>value</code> within the entire the <xref href=\"System.Collections.ArrayList\"></xref>, if found; otherwise, -1."}],"pos":[127110,127274],"yaml":true},{"content":"Searches for the specified <xref href=\"System.Object\"></xref> and returns the zero-based index of the last occurrence within the range of elements in the <xref href=\"System.Collections.ArrayList\"></xref> that extends from the first element to the specified index.","nodes":[{"pos":[0,263],"content":"Searches for the specified <ph id=\"ph1\">&lt;xref href=\"System.Object\"&gt;&lt;/xref&gt;</ph> and returns the zero-based index of the last occurrence within the range of elements in the <ph id=\"ph2\">&lt;xref href=\"System.Collections.ArrayList\"&gt;&lt;/xref&gt;</ph> that extends from the first element to the specified index.","source":"Searches for the specified <xref href=\"System.Object\"></xref> and returns the zero-based index of the last occurrence within the range of elements in the <xref href=\"System.Collections.ArrayList\"></xref> that extends from the first element to the specified index."}],"pos":[128698,128962],"yaml":true},{"content":"The <xref:System.Collections.ArrayList> is searched backward starting at `startIndex` and ending at the first element.  \n  \n This method performs a linear search; therefore, this method is an O(`n`) operation, where `n` is the number of elements from the beginning of the <xref:System.Collections.ArrayList> to `startIndex`.  \n  \n This method determines equality by calling <xref:System.Object.Equals%2A?displayProperty=fullName>.  \n  \n Starting with the .NET Framework 2.0, this method uses the collection’s objects’ <xref:System.Object.Equals%2A> and <xref:System.IComparable.CompareTo%2A> methods on `item` to determine whether item exists. In the earlier versions of the .NET Framework, this determination was made by using the <xref:System.Object.Equals%2A> and <xref:System.IComparable.CompareTo%2A> methods of the `item` parameter on the objects in the collection.","nodes":[{"pos":[0,118],"content":"The <ph id=\"ph1\">&lt;xref:System.Collections.ArrayList&gt;</ph> is searched backward starting at <ph id=\"ph2\">`startIndex`</ph> and ending at the first element.","source":"The <xref:System.Collections.ArrayList> is searched backward starting at `startIndex` and ending at the first element."},{"pos":[125,324],"content":"This method performs a linear search; therefore, this method is an O(<ph id=\"ph1\">`n`</ph>) operation, where <ph id=\"ph2\">`n`</ph> is the number of elements from the beginning of the <ph id=\"ph3\">&lt;xref:System.Collections.ArrayList&gt;</ph> to <ph id=\"ph4\">`startIndex`</ph>.","source":"This method performs a linear search; therefore, this method is an O(`n`) operation, where `n` is the number of elements from the beginning of the <xref:System.Collections.ArrayList> to `startIndex`."},{"pos":[331,430],"content":"This method determines equality by calling <xref:System.Object.Equals%2A?displayProperty=fullName>.","nodes":[{"content":"This method determines equality by calling <ph id=\"ph1\">&lt;xref:System.Object.Equals%2A?displayProperty=fullName&gt;</ph>.","pos":[0,99],"source":"This method determines equality by calling <xref:System.Object.Equals%2A?displayProperty=fullName>."}]},{"pos":[437,871],"content":"Starting with the .NET Framework 2.0, this method uses the collection’s objects’ <xref:System.Object.Equals%2A> and <xref:System.IComparable.CompareTo%2A> methods on `item` to determine whether item exists. In the earlier versions of the .NET Framework, this determination was made by using the <xref:System.Object.Equals%2A> and <xref:System.IComparable.CompareTo%2A> methods of the `item` parameter on the objects in the collection.","nodes":[{"content":"Starting with the .NET Framework 2.0, this method uses the collection’s objects’ <ph id=\"ph1\">&lt;xref:System.Object.Equals%2A&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.IComparable.CompareTo%2A&gt;</ph> methods on <ph id=\"ph3\">`item`</ph> to determine whether item exists.","pos":[0,206],"source":"Starting with the .NET Framework 2.0, this method uses the collection’s objects’ <xref:System.Object.Equals%2A> and <xref:System.IComparable.CompareTo%2A> methods on `item` to determine whether item exists."},{"content":"In the earlier versions of the .NET Framework, this determination was made by using the <ph id=\"ph1\">&lt;xref:System.Object.Equals%2A&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.IComparable.CompareTo%2A&gt;</ph> methods of the <ph id=\"ph3\">`item`</ph> parameter on the objects in the collection.","pos":[207,434],"source":" In the earlier versions of the .NET Framework, this determination was made by using the <xref:System.Object.Equals%2A> and <xref:System.IComparable.CompareTo%2A> methods of the `item` parameter on the objects in the collection."}]}],"pos":[128973,129853],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Object\"></xref> to locate in the <xref href=\"System.Collections.ArrayList\"></xref>. The value can be `null`.","nodes":[{"pos":[0,131],"content":"The <xref href=\"System.Object\"></xref> to locate in the <xref href=\"System.Collections.ArrayList\"></xref>. The value can be `null`.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Object\"&gt;&lt;/xref&gt;</ph> to locate in the <ph id=\"ph2\">&lt;xref href=\"System.Collections.ArrayList\"&gt;&lt;/xref&gt;</ph>.","pos":[0,106],"source":"The <xref href=\"System.Object\"></xref> to locate in the <xref href=\"System.Collections.ArrayList\"></xref>."},{"content":"The value can be <ph id=\"ph1\">`null`</ph>.","pos":[107,131],"source":" The value can be `null`."}]}],"pos":[130629,130761],"yaml":true},{"content":"The zero-based starting index of the backward search.","nodes":[{"pos":[0,53],"content":"The zero-based starting index of the backward search.","nodes":[{"content":"The zero-based starting index of the backward search.","pos":[0,53]}]}],"pos":[130826,130880],"yaml":true},{"content":"The zero-based index of the last occurrence of <code>value</code> within the range of elements in the <xref href=\"System.Collections.ArrayList\"></xref> that extends from the first element to <code>startIndex</code>, if found; otherwise, -1.","nodes":[{"pos":[0,240],"content":"The zero-based index of the last occurrence of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept> within the range of elements in the <ph id=\"ph2\">&lt;xref href=\"System.Collections.ArrayList\"&gt;&lt;/xref&gt;</ph> that extends from the first element to <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph3\">startIndex</ph><ept id=\"p2\">&lt;/code&gt;</ept>, if found; otherwise, -1.","source":"The zero-based index of the last occurrence of <code>value</code> within the range of elements in the <xref href=\"System.Collections.ArrayList\"></xref> that extends from the first element to <code>startIndex</code>, if found; otherwise, -1."}],"pos":[130936,131177],"yaml":true},{"content":"<code>startIndex</code> is outside the range of valid indexes for the <xref href=\"System.Collections.ArrayList\"></xref>.","nodes":[{"pos":[0,120],"content":"<ph id=\"ph1\">&lt;code&gt;startIndex&lt;/code&gt;</ph> is outside the range of valid indexes for the <ph id=\"ph2\">&lt;xref href=\"System.Collections.ArrayList\"&gt;&lt;/xref&gt;</ph>.","source":"<code>startIndex</code> is outside the range of valid indexes for the <xref href=\"System.Collections.ArrayList\"></xref>."}],"pos":[131359,131480],"yaml":true},{"content":"Searches for the specified <xref href=\"System.Object\"></xref> and returns the zero-based index of the last occurrence within the range of elements in the <xref href=\"System.Collections.ArrayList\"></xref> that contains the specified number of elements and ends at the specified index.","nodes":[{"pos":[0,283],"content":"Searches for the specified <ph id=\"ph1\">&lt;xref href=\"System.Object\"&gt;&lt;/xref&gt;</ph> and returns the zero-based index of the last occurrence within the range of elements in the <ph id=\"ph2\">&lt;xref href=\"System.Collections.ArrayList\"&gt;&lt;/xref&gt;</ph> that contains the specified number of elements and ends at the specified index.","source":"Searches for the specified <xref href=\"System.Object\"></xref> and returns the zero-based index of the last occurrence within the range of elements in the <xref href=\"System.Collections.ArrayList\"></xref> that contains the specified number of elements and ends at the specified index."}],"pos":[132893,133177],"yaml":true},{"content":"The <xref:System.Collections.ArrayList> is searched backward starting at `startIndex` and ending at `startIndex` minus `count` plus 1, if `count` is greater than 0.  \n  \n This method performs a linear search; therefore, this method is an O(`n`) operation, where `n` is `count`.  \n  \n This method determines equality by calling <xref:System.Object.Equals%2A?displayProperty=fullName>.  \n  \n Starting with the .NET Framework 2.0, this method uses the collection’s objects’ <xref:System.Object.Equals%2A> and <xref:System.IComparable.CompareTo%2A> methods on `item` to determine whether item exists. In the earlier versions of the .NET Framework, this determination was made by using the <xref:System.Object.Equals%2A> and <xref:System.IComparable.CompareTo%2A> methods of the `item` parameter on the objects in the collection.","nodes":[{"pos":[0,164],"content":"The <ph id=\"ph1\">&lt;xref:System.Collections.ArrayList&gt;</ph> is searched backward starting at <ph id=\"ph2\">`startIndex`</ph> and ending at <ph id=\"ph3\">`startIndex`</ph> minus <ph id=\"ph4\">`count`</ph> plus 1, if <ph id=\"ph5\">`count`</ph> is greater than 0.","source":"The <xref:System.Collections.ArrayList> is searched backward starting at `startIndex` and ending at `startIndex` minus `count` plus 1, if `count` is greater than 0."},{"pos":[171,277],"content":"This method performs a linear search; therefore, this method is an O(<ph id=\"ph1\">`n`</ph>) operation, where <ph id=\"ph2\">`n`</ph> is <ph id=\"ph3\">`count`</ph>.","source":"This method performs a linear search; therefore, this method is an O(`n`) operation, where `n` is `count`."},{"pos":[284,383],"content":"This method determines equality by calling <xref:System.Object.Equals%2A?displayProperty=fullName>.","nodes":[{"content":"This method determines equality by calling <ph id=\"ph1\">&lt;xref:System.Object.Equals%2A?displayProperty=fullName&gt;</ph>.","pos":[0,99],"source":"This method determines equality by calling <xref:System.Object.Equals%2A?displayProperty=fullName>."}]},{"pos":[390,824],"content":"Starting with the .NET Framework 2.0, this method uses the collection’s objects’ <xref:System.Object.Equals%2A> and <xref:System.IComparable.CompareTo%2A> methods on `item` to determine whether item exists. In the earlier versions of the .NET Framework, this determination was made by using the <xref:System.Object.Equals%2A> and <xref:System.IComparable.CompareTo%2A> methods of the `item` parameter on the objects in the collection.","nodes":[{"content":"Starting with the .NET Framework 2.0, this method uses the collection’s objects’ <ph id=\"ph1\">&lt;xref:System.Object.Equals%2A&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.IComparable.CompareTo%2A&gt;</ph> methods on <ph id=\"ph3\">`item`</ph> to determine whether item exists.","pos":[0,206],"source":"Starting with the .NET Framework 2.0, this method uses the collection’s objects’ <xref:System.Object.Equals%2A> and <xref:System.IComparable.CompareTo%2A> methods on `item` to determine whether item exists."},{"content":"In the earlier versions of the .NET Framework, this determination was made by using the <ph id=\"ph1\">&lt;xref:System.Object.Equals%2A&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.IComparable.CompareTo%2A&gt;</ph> methods of the <ph id=\"ph3\">`item`</ph> parameter on the objects in the collection.","pos":[207,434],"source":" In the earlier versions of the .NET Framework, this determination was made by using the <xref:System.Object.Equals%2A> and <xref:System.IComparable.CompareTo%2A> methods of the `item` parameter on the objects in the collection."}]}],"pos":[133188,134021],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Object\"></xref> to locate in the <xref href=\"System.Collections.ArrayList\"></xref>. The value can be `null`.","nodes":[{"pos":[0,131],"content":"The <xref href=\"System.Object\"></xref> to locate in the <xref href=\"System.Collections.ArrayList\"></xref>. The value can be `null`.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Object\"&gt;&lt;/xref&gt;</ph> to locate in the <ph id=\"ph2\">&lt;xref href=\"System.Collections.ArrayList\"&gt;&lt;/xref&gt;</ph>.","pos":[0,106],"source":"The <xref href=\"System.Object\"></xref> to locate in the <xref href=\"System.Collections.ArrayList\"></xref>."},{"content":"The value can be <ph id=\"ph1\">`null`</ph>.","pos":[107,131],"source":" The value can be `null`."}]}],"pos":[134921,135053],"yaml":true},{"content":"The zero-based starting index of the backward search.","nodes":[{"pos":[0,53],"content":"The zero-based starting index of the backward search.","nodes":[{"content":"The zero-based starting index of the backward search.","pos":[0,53]}]}],"pos":[135118,135172],"yaml":true},{"content":"The number of elements in the section to search.","nodes":[{"pos":[0,48],"content":"The number of elements in the section to search.","nodes":[{"content":"The number of elements in the section to search.","pos":[0,48]}]}],"pos":[135232,135281],"yaml":true},{"content":"The zero-based index of the last occurrence of <code>value</code> within the range of elements in the <xref href=\"System.Collections.ArrayList\"></xref> that contains <code>count</code> number of elements and ends at <code>startIndex</code>, if found; otherwise, -1.","nodes":[{"pos":[0,265],"content":"The zero-based index of the last occurrence of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept> within the range of elements in the <ph id=\"ph2\">&lt;xref href=\"System.Collections.ArrayList\"&gt;&lt;/xref&gt;</ph> that contains <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph3\">count</ph><ept id=\"p2\">&lt;/code&gt;</ept> number of elements and ends at <bpt id=\"p3\">&lt;code&gt;</bpt><ph id=\"ph4\">startIndex</ph><ept id=\"p3\">&lt;/code&gt;</ept>, if found; otherwise, -1.","source":"The zero-based index of the last occurrence of <code>value</code> within the range of elements in the <xref href=\"System.Collections.ArrayList\"></xref> that contains <code>count</code> number of elements and ends at <code>startIndex</code>, if found; otherwise, -1."}],"pos":[135337,135603],"yaml":true},{"content":"<code>startIndex</code> is outside the range of valid indexes for the <xref href=\"System.Collections.ArrayList\"></xref>.  \n  \n -or-  \n  \n <code>count</code> is less than zero.  \n  \n -or-  \n  \n <code>startIndex</code> and <code>count</code> do not specify a valid section in the <xref href=\"System.Collections.ArrayList\"></xref>.","nodes":[{"pos":[0,120],"content":"<ph id=\"ph1\">&lt;code&gt;startIndex&lt;/code&gt;</ph> is outside the range of valid indexes for the <ph id=\"ph2\">&lt;xref href=\"System.Collections.ArrayList\"&gt;&lt;/xref&gt;</ph>.","source":"<code>startIndex</code> is outside the range of valid indexes for the <xref href=\"System.Collections.ArrayList\"></xref>."},{"pos":[127,131],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[138,175],"content":"<ph id=\"ph1\">&lt;code&gt;count&lt;/code&gt;</ph> is less than zero.","source":"<code>count</code> is less than zero."},{"pos":[182,186],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[193,328],"content":"<ph id=\"ph1\">&lt;code&gt;startIndex&lt;/code&gt;</ph> and <ph id=\"ph2\">&lt;code&gt;count&lt;/code&gt;</ph> do not specify a valid section in the <ph id=\"ph3\">&lt;xref href=\"System.Collections.ArrayList\"&gt;&lt;/xref&gt;</ph>.","source":"<code>startIndex</code> and <code>count</code> do not specify a valid section in the <xref href=\"System.Collections.ArrayList\"></xref>."}],"pos":[135785,136128],"yaml":true},{"content":"Returns a read-only <xref href=\"System.Collections.ArrayList\"></xref> wrapper.","nodes":[{"pos":[0,78],"content":"Returns a read-only <ph id=\"ph1\">&lt;xref href=\"System.Collections.ArrayList\"&gt;&lt;/xref&gt;</ph> wrapper.","source":"Returns a read-only <xref href=\"System.Collections.ArrayList\"></xref> wrapper."}],"pos":[137457,137536],"yaml":true},{"content":"To prevent any modifications to `list`, expose `list` only through this wrapper.  \n  \n A collection that is read-only is simply a collection with a wrapper that prevents modifying the collection. If changes are made to the underlying collection, the read-only collection reflects those changes.  \n  \n This method is an O(1) operation.","nodes":[{"pos":[0,80],"content":"To prevent any modifications to <ph id=\"ph1\">`list`</ph>, expose <ph id=\"ph2\">`list`</ph> only through this wrapper.","source":"To prevent any modifications to `list`, expose `list` only through this wrapper."},{"pos":[87,294],"content":"A collection that is read-only is simply a collection with a wrapper that prevents modifying the collection. If changes are made to the underlying collection, the read-only collection reflects those changes.","nodes":[{"content":"A collection that is read-only is simply a collection with a wrapper that prevents modifying the collection. If changes are made to the underlying collection, the read-only collection reflects those changes.","pos":[0,207],"nodes":[{"content":"A collection that is read-only is simply a collection with a wrapper that prevents modifying the collection.","pos":[0,108]},{"content":"If changes are made to the underlying collection, the read-only collection reflects those changes.","pos":[109,207]}]}]},{"pos":[301,334],"content":"This method is an O(1) operation.","nodes":[{"content":"This method is an O(1) operation.","pos":[0,33]}]}],"pos":[137547,137888],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Collections.ArrayList\"></xref> to wrap.","nodes":[{"pos":[0,62],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Collections.ArrayList\"&gt;&lt;/xref&gt;</ph> to wrap.","source":"The <xref href=\"System.Collections.ArrayList\"></xref> to wrap."}],"pos":[138775,138838],"yaml":true},{"content":"A read-only <xref href=\"System.Collections.ArrayList\"></xref> wrapper around <code>list</code>.","nodes":[{"pos":[0,95],"content":"A read-only <ph id=\"ph1\">&lt;xref href=\"System.Collections.ArrayList\"&gt;&lt;/xref&gt;</ph> wrapper around <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">list</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"A read-only <xref href=\"System.Collections.ArrayList\"></xref> wrapper around <code>list</code>."}],"pos":[138910,139006],"yaml":true},{"content":"<code>list</code> is `null`.","nodes":[{"pos":[0,28],"content":"<ph id=\"ph1\">&lt;code&gt;list&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>list</code> is `null`."}],"pos":[139173,139202],"yaml":true},{"content":"Returns a read-only <xref href=\"System.Collections.IList\"></xref> wrapper.","nodes":[{"pos":[0,74],"content":"Returns a read-only <ph id=\"ph1\">&lt;xref href=\"System.Collections.IList\"&gt;&lt;/xref&gt;</ph> wrapper.","source":"Returns a read-only <xref href=\"System.Collections.IList\"></xref> wrapper."}],"pos":[140507,140582],"yaml":true},{"content":"To prevent any modifications to `list`, expose `list` only through this wrapper.  \n  \n A collection that is read-only is simply a collection with a wrapper that prevents modifying the collection. If changes are made to the underlying collection, the read-only collection reflects those changes.  \n  \n This method is an O(1) operation.","nodes":[{"pos":[0,80],"content":"To prevent any modifications to <ph id=\"ph1\">`list`</ph>, expose <ph id=\"ph2\">`list`</ph> only through this wrapper.","source":"To prevent any modifications to `list`, expose `list` only through this wrapper."},{"pos":[87,294],"content":"A collection that is read-only is simply a collection with a wrapper that prevents modifying the collection. If changes are made to the underlying collection, the read-only collection reflects those changes.","nodes":[{"content":"A collection that is read-only is simply a collection with a wrapper that prevents modifying the collection. If changes are made to the underlying collection, the read-only collection reflects those changes.","pos":[0,207],"nodes":[{"content":"A collection that is read-only is simply a collection with a wrapper that prevents modifying the collection.","pos":[0,108]},{"content":"If changes are made to the underlying collection, the read-only collection reflects those changes.","pos":[109,207]}]}]},{"pos":[301,334],"content":"This method is an O(1) operation.","nodes":[{"content":"This method is an O(1) operation.","pos":[0,33]}]}],"pos":[140593,140934],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Collections.IList\"></xref> to wrap.","nodes":[{"pos":[0,58],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Collections.IList\"&gt;&lt;/xref&gt;</ph> to wrap.","source":"The <xref href=\"System.Collections.IList\"></xref> to wrap."}],"pos":[141125,141184],"yaml":true},{"content":"A read-only <xref href=\"System.Collections.IList\"></xref> wrapper around <code>list</code>.","nodes":[{"pos":[0,91],"content":"A read-only <ph id=\"ph1\">&lt;xref href=\"System.Collections.IList\"&gt;&lt;/xref&gt;</ph> wrapper around <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">list</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"A read-only <xref href=\"System.Collections.IList\"></xref> wrapper around <code>list</code>."}],"pos":[141252,141344],"yaml":true},{"content":"<code>list</code> is `null`.","nodes":[{"pos":[0,28],"content":"<ph id=\"ph1\">&lt;code&gt;list&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>list</code> is `null`."}],"pos":[141511,141540],"yaml":true},{"content":"Removes the first occurrence of a specific object from the <xref href=\"System.Collections.ArrayList\"></xref>.","nodes":[{"pos":[0,109],"content":"Removes the first occurrence of a specific object from the <ph id=\"ph1\">&lt;xref href=\"System.Collections.ArrayList\"&gt;&lt;/xref&gt;</ph>.","source":"Removes the first occurrence of a specific object from the <xref href=\"System.Collections.ArrayList\"></xref>."}],"pos":[142803,142913],"yaml":true},{"content":"If the <xref:System.Collections.ArrayList> does not contain the specified object, the <xref:System.Collections.ArrayList> remains unchanged. No exception is thrown.  \n  \n This method performs a linear search; therefore, this method is an O(`n`) operation, where `n` is <xref:System.Collections.ArrayList.Count%2A>.  \n  \n This method determines equality by calling <xref:System.Object.Equals%2A?displayProperty=fullName>.  \n  \n In collections of contiguous elements, such as lists, the elements that follow the removed element move up to occupy the vacated spot. If the collection is indexed, the indexes of the elements that are moved are also updated. This behavior does not apply to collections where elements are conceptually grouped into buckets, such as a hash table.","nodes":[{"pos":[0,164],"content":"If the <xref:System.Collections.ArrayList> does not contain the specified object, the <xref:System.Collections.ArrayList> remains unchanged. No exception is thrown.","nodes":[{"content":"If the <xref:System.Collections.ArrayList> does not contain the specified object, the <xref:System.Collections.ArrayList> remains unchanged. No exception is thrown.","pos":[0,164],"nodes":[{"content":"If the <ph id=\"ph1\">&lt;xref:System.Collections.ArrayList&gt;</ph> does not contain the specified object, the <ph id=\"ph2\">&lt;xref:System.Collections.ArrayList&gt;</ph> remains unchanged.","pos":[0,140],"source":"If the <xref:System.Collections.ArrayList> does not contain the specified object, the <xref:System.Collections.ArrayList> remains unchanged."},{"content":"No exception is thrown.","pos":[141,164]}]}]},{"pos":[171,314],"content":"This method performs a linear search; therefore, this method is an O(<ph id=\"ph1\">`n`</ph>) operation, where <ph id=\"ph2\">`n`</ph> is <ph id=\"ph3\">&lt;xref:System.Collections.ArrayList.Count%2A&gt;</ph>.","source":"This method performs a linear search; therefore, this method is an O(`n`) operation, where `n` is <xref:System.Collections.ArrayList.Count%2A>."},{"pos":[321,420],"content":"This method determines equality by calling <xref:System.Object.Equals%2A?displayProperty=fullName>.","nodes":[{"content":"This method determines equality by calling <ph id=\"ph1\">&lt;xref:System.Object.Equals%2A?displayProperty=fullName&gt;</ph>.","pos":[0,99],"source":"This method determines equality by calling <xref:System.Object.Equals%2A?displayProperty=fullName>."}]},{"pos":[427,772],"content":"In collections of contiguous elements, such as lists, the elements that follow the removed element move up to occupy the vacated spot. If the collection is indexed, the indexes of the elements that are moved are also updated. This behavior does not apply to collections where elements are conceptually grouped into buckets, such as a hash table.","nodes":[{"content":"In collections of contiguous elements, such as lists, the elements that follow the removed element move up to occupy the vacated spot. If the collection is indexed, the indexes of the elements that are moved are also updated. This behavior does not apply to collections where elements are conceptually grouped into buckets, such as a hash table.","pos":[0,345],"nodes":[{"content":"In collections of contiguous elements, such as lists, the elements that follow the removed element move up to occupy the vacated spot.","pos":[0,134]},{"content":"If the collection is indexed, the indexes of the elements that are moved are also updated.","pos":[135,225]},{"content":"This behavior does not apply to collections where elements are conceptually grouped into buckets, such as a hash table.","pos":[226,345]}]}]}],"pos":[142924,143705],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Object\"></xref> to remove from the <xref href=\"System.Collections.ArrayList\"></xref>. The value can be `null`.","nodes":[{"pos":[0,133],"content":"The <xref href=\"System.Object\"></xref> to remove from the <xref href=\"System.Collections.ArrayList\"></xref>. The value can be `null`.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Object\"&gt;&lt;/xref&gt;</ph> to remove from the <ph id=\"ph2\">&lt;xref href=\"System.Collections.ArrayList\"&gt;&lt;/xref&gt;</ph>.","pos":[0,108],"source":"The <xref href=\"System.Object\"></xref> to remove from the <xref href=\"System.Collections.ArrayList\"></xref>."},{"content":"The value can be <ph id=\"ph1\">`null`</ph>.","pos":[109,133],"source":" The value can be `null`."}]}],"pos":[144422,144556],"yaml":true},{"content":"The <xref href=\"System.Collections.ArrayList\"></xref> is read-only.  \n  \n -or-  \n  \n The <xref href=\"System.Collections.ArrayList\"></xref> has a fixed size.","nodes":[{"pos":[0,67],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Collections.ArrayList\"&gt;&lt;/xref&gt;</ph> is read-only.","source":"The <xref href=\"System.Collections.ArrayList\"></xref> is read-only."},{"pos":[74,78],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[85,156],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Collections.ArrayList\"&gt;&lt;/xref&gt;</ph> has a fixed size.","source":"The <xref href=\"System.Collections.ArrayList\"></xref> has a fixed size."}],"pos":[144721,144888],"yaml":true},{"content":"Removes the element at the specified index of the <xref href=\"System.Collections.ArrayList\"></xref>.","nodes":[{"pos":[0,100],"content":"Removes the element at the specified index of the <ph id=\"ph1\">&lt;xref href=\"System.Collections.ArrayList\"&gt;&lt;/xref&gt;</ph>.","source":"Removes the element at the specified index of the <xref href=\"System.Collections.ArrayList\"></xref>."}],"pos":[146157,146258],"yaml":true},{"content":"After the element is removed, the size of the collection is adjusted and the value of the <xref:System.Collections.ArrayList.Count%2A> property is decreased by one.  \n  \n In collections of contiguous elements, such as lists, the elements that follow the removed element move up to occupy the vacated spot. If the collection is indexed, the indexes of the elements that are moved are also updated. This behavior does not apply to collections where elements are conceptually grouped into buckets, such as a hash table.  \n  \n This method is an O(`n`) operation, where `n` is <xref:System.Collections.ArrayList.Count%2A>.","nodes":[{"pos":[0,164],"content":"After the element is removed, the size of the collection is adjusted and the value of the <xref:System.Collections.ArrayList.Count%2A> property is decreased by one.","nodes":[{"content":"After the element is removed, the size of the collection is adjusted and the value of the <ph id=\"ph1\">&lt;xref:System.Collections.ArrayList.Count%2A&gt;</ph> property is decreased by one.","pos":[0,164],"source":"After the element is removed, the size of the collection is adjusted and the value of the <xref:System.Collections.ArrayList.Count%2A> property is decreased by one."}]},{"pos":[171,516],"content":"In collections of contiguous elements, such as lists, the elements that follow the removed element move up to occupy the vacated spot. If the collection is indexed, the indexes of the elements that are moved are also updated. This behavior does not apply to collections where elements are conceptually grouped into buckets, such as a hash table.","nodes":[{"content":"In collections of contiguous elements, such as lists, the elements that follow the removed element move up to occupy the vacated spot. If the collection is indexed, the indexes of the elements that are moved are also updated. This behavior does not apply to collections where elements are conceptually grouped into buckets, such as a hash table.","pos":[0,345],"nodes":[{"content":"In collections of contiguous elements, such as lists, the elements that follow the removed element move up to occupy the vacated spot.","pos":[0,134]},{"content":"If the collection is indexed, the indexes of the elements that are moved are also updated.","pos":[135,225]},{"content":"This behavior does not apply to collections where elements are conceptually grouped into buckets, such as a hash table.","pos":[226,345]}]}]},{"pos":[523,617],"content":"This method is an O(<ph id=\"ph1\">`n`</ph>) operation, where <ph id=\"ph2\">`n`</ph> is <ph id=\"ph3\">&lt;xref:System.Collections.ArrayList.Count%2A&gt;</ph>.","source":"This method is an O(`n`) operation, where `n` is <xref:System.Collections.ArrayList.Count%2A>."}],"pos":[146269,146893],"yaml":true,"extradata":"MT"},{"content":"The zero-based index of the element to remove.","nodes":[{"pos":[0,46],"content":"The zero-based index of the element to remove.","nodes":[{"content":"The zero-based index of the element to remove.","pos":[0,46]}]}],"pos":[147612,147659],"yaml":true},{"content":"<code>index</code> is less than zero.  \n  \n -or-  \n  \n <code>index</code> is equal to or greater than <xref href=\"System.Collections.ArrayList.Count\"></xref>.","nodes":[{"pos":[0,37],"content":"<ph id=\"ph1\">&lt;code&gt;index&lt;/code&gt;</ph> is less than zero.","source":"<code>index</code> is less than zero."},{"pos":[44,48],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[55,158],"content":"<ph id=\"ph1\">&lt;code&gt;index&lt;/code&gt;</ph> is equal to or greater than <ph id=\"ph2\">&lt;xref href=\"System.Collections.ArrayList.Count\"&gt;&lt;/xref&gt;</ph>.","source":"<code>index</code> is equal to or greater than <xref href=\"System.Collections.ArrayList.Count\"></xref>."}],"pos":[147838,148005],"yaml":true},{"content":"The <xref href=\"System.Collections.ArrayList\"></xref> is read-only.  \n  \n -or-  \n  \n The <xref href=\"System.Collections.ArrayList\"></xref> has a fixed size.","nodes":[{"pos":[0,67],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Collections.ArrayList\"&gt;&lt;/xref&gt;</ph> is read-only.","source":"The <xref href=\"System.Collections.ArrayList\"></xref> is read-only."},{"pos":[74,78],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[85,156],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Collections.ArrayList\"&gt;&lt;/xref&gt;</ph> has a fixed size.","source":"The <xref href=\"System.Collections.ArrayList\"></xref> has a fixed size."}],"pos":[148107,148274],"yaml":true},{"content":"Removes a range of elements from the <xref href=\"System.Collections.ArrayList\"></xref>.","nodes":[{"pos":[0,87],"content":"Removes a range of elements from the <ph id=\"ph1\">&lt;xref href=\"System.Collections.ArrayList\"&gt;&lt;/xref&gt;</ph>.","source":"Removes a range of elements from the <xref href=\"System.Collections.ArrayList\"></xref>."}],"pos":[149621,149709],"yaml":true},{"content":"In collections of contiguous elements, such as lists, the elements that follow the removed element move up to occupy the vacated spot. If the collection is indexed, the indexes of the elements that are moved are also updated. This behavior does not apply to collections where elements are conceptually grouped into buckets, such as a hash table.  \n  \n This method is an O(`n`) operation, where `n` is <xref:System.Collections.ArrayList.Count%2A>.","nodes":[{"pos":[0,345],"content":"In collections of contiguous elements, such as lists, the elements that follow the removed element move up to occupy the vacated spot. If the collection is indexed, the indexes of the elements that are moved are also updated. This behavior does not apply to collections where elements are conceptually grouped into buckets, such as a hash table.","nodes":[{"content":"In collections of contiguous elements, such as lists, the elements that follow the removed element move up to occupy the vacated spot. If the collection is indexed, the indexes of the elements that are moved are also updated. This behavior does not apply to collections where elements are conceptually grouped into buckets, such as a hash table.","pos":[0,345],"nodes":[{"content":"In collections of contiguous elements, such as lists, the elements that follow the removed element move up to occupy the vacated spot.","pos":[0,134]},{"content":"If the collection is indexed, the indexes of the elements that are moved are also updated.","pos":[135,225]},{"content":"This behavior does not apply to collections where elements are conceptually grouped into buckets, such as a hash table.","pos":[226,345]}]}]},{"pos":[352,446],"content":"This method is an O(<ph id=\"ph1\">`n`</ph>) operation, where <ph id=\"ph2\">`n`</ph> is <ph id=\"ph3\">&lt;xref:System.Collections.ArrayList.Count%2A&gt;</ph>.","source":"This method is an O(`n`) operation, where `n` is <xref:System.Collections.ArrayList.Count%2A>."}],"pos":[149720,150171],"yaml":true,"extradata":"MT"},{"content":"The zero-based starting index of the range of elements to remove.","nodes":[{"pos":[0,65],"content":"The zero-based starting index of the range of elements to remove.","nodes":[{"content":"The zero-based starting index of the range of elements to remove.","pos":[0,65]}]}],"pos":[150904,150970],"yaml":true},{"content":"The number of elements to remove.","nodes":[{"pos":[0,33],"content":"The number of elements to remove.","nodes":[{"content":"The number of elements to remove.","pos":[0,33]}]}],"pos":[151030,151064],"yaml":true},{"content":"<code>index</code> is less than zero.  \n  \n -or-  \n  \n <code>count</code> is less than zero.","nodes":[{"pos":[0,37],"content":"<ph id=\"ph1\">&lt;code&gt;index&lt;/code&gt;</ph> is less than zero.","source":"<code>index</code> is less than zero."},{"pos":[44,48],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[55,92],"content":"<ph id=\"ph1\">&lt;code&gt;count&lt;/code&gt;</ph> is less than zero.","source":"<code>count</code> is less than zero."}],"pos":[151246,151345],"yaml":true},{"content":"<code>index</code> and <code>count</code> do not denote a valid range of elements in the <xref href=\"System.Collections.ArrayList\"></xref>.","nodes":[{"pos":[0,139],"content":"<ph id=\"ph1\">&lt;code&gt;index&lt;/code&gt;</ph> and <ph id=\"ph2\">&lt;code&gt;count&lt;/code&gt;</ph> do not denote a valid range of elements in the <ph id=\"ph3\">&lt;xref href=\"System.Collections.ArrayList\"&gt;&lt;/xref&gt;</ph>.","source":"<code>index</code> and <code>count</code> do not denote a valid range of elements in the <xref href=\"System.Collections.ArrayList\"></xref>."}],"pos":[151439,151579],"yaml":true},{"content":"The <xref href=\"System.Collections.ArrayList\"></xref> is read-only.  \n  \n -or-  \n  \n The <xref href=\"System.Collections.ArrayList\"></xref> has a fixed size.","nodes":[{"pos":[0,67],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Collections.ArrayList\"&gt;&lt;/xref&gt;</ph> is read-only.","source":"The <xref href=\"System.Collections.ArrayList\"></xref> is read-only."},{"pos":[74,78],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[85,156],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Collections.ArrayList\"&gt;&lt;/xref&gt;</ph> has a fixed size.","source":"The <xref href=\"System.Collections.ArrayList\"></xref> has a fixed size."}],"pos":[151681,151848],"yaml":true},{"content":"Returns an <xref href=\"System.Collections.ArrayList\"></xref> whose elements are copies of the specified value.","nodes":[{"pos":[0,110],"content":"Returns an <ph id=\"ph1\">&lt;xref href=\"System.Collections.ArrayList\"&gt;&lt;/xref&gt;</ph> whose elements are copies of the specified value.","source":"Returns an <xref href=\"System.Collections.ArrayList\"></xref> whose elements are copies of the specified value."}],"pos":[153171,153282],"yaml":true},{"content":"<xref:System.Collections.ArrayList> accepts `null` as a valid value and allows duplicate elements.  \n  \n This method is an O(`n`) operation, where `n` is `count`.","nodes":[{"pos":[0,98],"content":"<ph id=\"ph1\">&lt;xref:System.Collections.ArrayList&gt;</ph> accepts <ph id=\"ph2\">`null`</ph> as a valid value and allows duplicate elements.","source":"<xref:System.Collections.ArrayList> accepts `null` as a valid value and allows duplicate elements."},{"pos":[105,162],"content":"This method is an O(<ph id=\"ph1\">`n`</ph>) operation, where <ph id=\"ph2\">`n`</ph> is <ph id=\"ph3\">`count`</ph>.","source":"This method is an O(`n`) operation, where `n` is `count`."}],"pos":[153293,153460],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Object\"></xref> to copy multiple times in the new <xref href=\"System.Collections.ArrayList\"></xref>. The value can be `null`.","nodes":[{"pos":[0,148],"content":"The <xref href=\"System.Object\"></xref> to copy multiple times in the new <xref href=\"System.Collections.ArrayList\"></xref>. The value can be `null`.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Object\"&gt;&lt;/xref&gt;</ph> to copy multiple times in the new <ph id=\"ph2\">&lt;xref href=\"System.Collections.ArrayList\"&gt;&lt;/xref&gt;</ph>.","pos":[0,123],"source":"The <xref href=\"System.Object\"></xref> to copy multiple times in the new <xref href=\"System.Collections.ArrayList\"></xref>."},{"content":"The value can be <ph id=\"ph1\">`null`</ph>.","pos":[124,148],"source":" The value can be `null`."}]}],"pos":[154238,154387],"yaml":true},{"content":"The number of times <code>value</code> should be copied.","nodes":[{"pos":[0,56],"content":"The number of times <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept> should be copied.","source":"The number of times <code>value</code> should be copied."}],"pos":[154447,154504],"yaml":true},{"content":"An <xref href=\"System.Collections.ArrayList\"></xref> with <code>count</code> number of elements, all of which are copies of <code>value</code>.","nodes":[{"pos":[0,143],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Collections.ArrayList\"&gt;&lt;/xref&gt;</ph> with <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">count</ph><ept id=\"p1\">&lt;/code&gt;</ept> number of elements, all of which are copies of <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph3\">value</ph><ept id=\"p2\">&lt;/code&gt;</ept>.","source":"An <xref href=\"System.Collections.ArrayList\"></xref> with <code>count</code> number of elements, all of which are copies of <code>value</code>."}],"pos":[154576,154720],"yaml":true},{"content":"<code>count</code> is less than zero.","nodes":[{"pos":[0,37],"content":"<ph id=\"ph1\">&lt;code&gt;count&lt;/code&gt;</ph> is less than zero.","source":"<code>count</code> is less than zero."}],"pos":[154897,154935],"yaml":true},{"content":"Reverses the order of the elements in the entire <xref href=\"System.Collections.ArrayList\"></xref>.","nodes":[{"pos":[0,99],"content":"Reverses the order of the elements in the entire <ph id=\"ph1\">&lt;xref href=\"System.Collections.ArrayList\"&gt;&lt;/xref&gt;</ph>.","source":"Reverses the order of the elements in the entire <xref href=\"System.Collections.ArrayList\"></xref>."}],"pos":[156141,156241],"yaml":true},{"content":"This method uses <xref:System.Array.Reverse%2A?displayProperty=fullName> to reverse the order of the elements, such that the element at <xref:System.Collections.ArrayList> [i], where i is any index within the range, moves to <xref:System.Collections.ArrayList> [j], where j equals `index` + `index` + `count` - i - 1.  \n  \n This method is an O(`n`) operation, where `n` is <xref:System.Collections.ArrayList.Count%2A>.","nodes":[{"pos":[0,317],"content":"This method uses <ph id=\"ph1\">&lt;xref:System.Array.Reverse%2A?displayProperty=fullName&gt;</ph> to reverse the order of the elements, such that the element at <ph id=\"ph2\">&lt;xref:System.Collections.ArrayList&gt;</ph> [i], where i is any index within the range, moves to <ph id=\"ph3\">&lt;xref:System.Collections.ArrayList&gt;</ph> [j], where j equals <ph id=\"ph4\">`index`</ph><ph id=\"ph5\"> + </ph><ph id=\"ph6\">`index`</ph><ph id=\"ph7\"> + </ph><ph id=\"ph8\">`count`</ph> - i - 1.","source":"This method uses <xref:System.Array.Reverse%2A?displayProperty=fullName> to reverse the order of the elements, such that the element at <xref:System.Collections.ArrayList> [i], where i is any index within the range, moves to <xref:System.Collections.ArrayList> [j], where j equals `index` + `index` + `count` - i - 1."},{"pos":[324,418],"content":"This method is an O(<ph id=\"ph1\">`n`</ph>) operation, where <ph id=\"ph2\">`n`</ph> is <ph id=\"ph3\">&lt;xref:System.Collections.ArrayList.Count%2A&gt;</ph>.","source":"This method is an O(`n`) operation, where `n` is <xref:System.Collections.ArrayList.Count%2A>."}],"pos":[156252,156675],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Collections.ArrayList\"></xref> is read-only.","nodes":[{"pos":[0,67],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Collections.ArrayList\"&gt;&lt;/xref&gt;</ph> is read-only.","source":"The <xref href=\"System.Collections.ArrayList\"></xref> is read-only."}],"pos":[157517,157585],"yaml":true},{"content":"Reverses the order of the elements in the specified range.","nodes":[{"pos":[0,58],"content":"Reverses the order of the elements in the specified range.","nodes":[{"content":"Reverses the order of the elements in the specified range.","pos":[0,58]}]}],"pos":[158908,158967],"yaml":true},{"content":"This method uses <xref:System.Array.Reverse%2A?displayProperty=fullName> to reverse the order of the elements, such that the element at <xref:System.Collections.ArrayList> [i], where i is any index within the range, moves to <xref:System.Collections.ArrayList> [j], where j equals `index` + `index` + `count` - i - 1.  \n  \n This method is an O(`n`) operation, where `n` is `count`.","nodes":[{"pos":[0,317],"content":"This method uses <ph id=\"ph1\">&lt;xref:System.Array.Reverse%2A?displayProperty=fullName&gt;</ph> to reverse the order of the elements, such that the element at <ph id=\"ph2\">&lt;xref:System.Collections.ArrayList&gt;</ph> [i], where i is any index within the range, moves to <ph id=\"ph3\">&lt;xref:System.Collections.ArrayList&gt;</ph> [j], where j equals <ph id=\"ph4\">`index`</ph><ph id=\"ph5\"> + </ph><ph id=\"ph6\">`index`</ph><ph id=\"ph7\"> + </ph><ph id=\"ph8\">`count`</ph> - i - 1.","source":"This method uses <xref:System.Array.Reverse%2A?displayProperty=fullName> to reverse the order of the elements, such that the element at <xref:System.Collections.ArrayList> [i], where i is any index within the range, moves to <xref:System.Collections.ArrayList> [j], where j equals `index` + `index` + `count` - i - 1."},{"pos":[324,381],"content":"This method is an O(<ph id=\"ph1\">`n`</ph>) operation, where <ph id=\"ph2\">`n`</ph> is <ph id=\"ph3\">`count`</ph>.","source":"This method is an O(`n`) operation, where `n` is `count`."}],"pos":[158978,159364],"yaml":true,"extradata":"MT"},{"content":"The zero-based starting index of the range to reverse.","nodes":[{"pos":[0,54],"content":"The zero-based starting index of the range to reverse.","nodes":[{"content":"The zero-based starting index of the range to reverse.","pos":[0,54]}]}],"pos":[160146,160201],"yaml":true},{"content":"The number of elements in the range to reverse.","nodes":[{"pos":[0,47],"content":"The number of elements in the range to reverse.","nodes":[{"content":"The number of elements in the range to reverse.","pos":[0,47]}]}],"pos":[160261,160309],"yaml":true},{"content":"<code>index</code> is less than zero.  \n  \n -or-  \n  \n <code>count</code> is less than zero.","nodes":[{"pos":[0,37],"content":"<ph id=\"ph1\">&lt;code&gt;index&lt;/code&gt;</ph> is less than zero.","source":"<code>index</code> is less than zero."},{"pos":[44,48],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[55,92],"content":"<ph id=\"ph1\">&lt;code&gt;count&lt;/code&gt;</ph> is less than zero.","source":"<code>count</code> is less than zero."}],"pos":[160487,160586],"yaml":true},{"content":"<code>index</code> and <code>count</code> do not denote a valid range of elements in the <xref href=\"System.Collections.ArrayList\"></xref>.","nodes":[{"pos":[0,139],"content":"<ph id=\"ph1\">&lt;code&gt;index&lt;/code&gt;</ph> and <ph id=\"ph2\">&lt;code&gt;count&lt;/code&gt;</ph> do not denote a valid range of elements in the <ph id=\"ph3\">&lt;xref href=\"System.Collections.ArrayList\"&gt;&lt;/xref&gt;</ph>.","source":"<code>index</code> and <code>count</code> do not denote a valid range of elements in the <xref href=\"System.Collections.ArrayList\"></xref>."}],"pos":[160680,160820],"yaml":true},{"content":"The <xref href=\"System.Collections.ArrayList\"></xref> is read-only.","nodes":[{"pos":[0,67],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Collections.ArrayList\"&gt;&lt;/xref&gt;</ph> is read-only.","source":"The <xref href=\"System.Collections.ArrayList\"></xref> is read-only."}],"pos":[160922,160990],"yaml":true},{"content":"Copies the elements of a collection over a range of elements in the <xref href=\"System.Collections.ArrayList\"></xref>.","nodes":[{"pos":[0,118],"content":"Copies the elements of a collection over a range of elements in the <ph id=\"ph1\">&lt;xref href=\"System.Collections.ArrayList\"&gt;&lt;/xref&gt;</ph>.","source":"Copies the elements of a collection over a range of elements in the <xref href=\"System.Collections.ArrayList\"></xref>."}],"pos":[162391,162510],"yaml":true},{"content":"<xref:System.Collections.ArrayList> accepts `null` as a valid value and allows duplicate elements.  \n  \n The order of the elements in the <xref:System.Collections.ICollection> is preserved in the <xref:System.Collections.ArrayList>.  \n  \n This method is an O(`n` + 1) operation, where `n` is <xref:System.Collections.ArrayList.Count%2A>.","nodes":[{"pos":[0,98],"content":"<ph id=\"ph1\">&lt;xref:System.Collections.ArrayList&gt;</ph> accepts <ph id=\"ph2\">`null`</ph> as a valid value and allows duplicate elements.","source":"<xref:System.Collections.ArrayList> accepts `null` as a valid value and allows duplicate elements."},{"pos":[105,232],"content":"The order of the elements in the <xref:System.Collections.ICollection> is preserved in the <xref:System.Collections.ArrayList>.","nodes":[{"content":"The order of the elements in the <ph id=\"ph1\">&lt;xref:System.Collections.ICollection&gt;</ph> is preserved in the <ph id=\"ph2\">&lt;xref:System.Collections.ArrayList&gt;</ph>.","pos":[0,127],"source":"The order of the elements in the <xref:System.Collections.ICollection> is preserved in the <xref:System.Collections.ArrayList>."}]},{"pos":[239,337],"content":"This method is an O(<ph id=\"ph1\">`n`</ph> + 1) operation, where <ph id=\"ph2\">`n`</ph> is <ph id=\"ph3\">&lt;xref:System.Collections.ArrayList.Count%2A&gt;</ph>.","source":"This method is an O(`n` + 1) operation, where `n` is <xref:System.Collections.ArrayList.Count%2A>."}],"pos":[162521,162865],"yaml":true,"extradata":"MT"},{"content":"The zero-based <xref href=\"System.Collections.ArrayList\"></xref> index at which to start copying the elements of <code>c</code>.","nodes":[{"pos":[0,128],"content":"The zero-based <ph id=\"ph1\">&lt;xref href=\"System.Collections.ArrayList\"&gt;&lt;/xref&gt;</ph> index at which to start copying the elements of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">c</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The zero-based <xref href=\"System.Collections.ArrayList\"></xref> index at which to start copying the elements of <code>c</code>."}],"pos":[163644,163773],"yaml":true},{"content":"The <xref href=\"System.Collections.ICollection\"></xref> whose elements to copy to the <xref href=\"System.Collections.ArrayList\"></xref>. The collection itself cannot be `null`, but it can contain elements that are `null`.","nodes":[{"pos":[0,221],"content":"The <xref href=\"System.Collections.ICollection\"></xref> whose elements to copy to the <xref href=\"System.Collections.ArrayList\"></xref>. The collection itself cannot be `null`, but it can contain elements that are `null`.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Collections.ICollection\"&gt;&lt;/xref&gt;</ph> whose elements to copy to the <ph id=\"ph2\">&lt;xref href=\"System.Collections.ArrayList\"&gt;&lt;/xref&gt;</ph>.","pos":[0,136],"source":"The <xref href=\"System.Collections.ICollection\"></xref> whose elements to copy to the <xref href=\"System.Collections.ArrayList\"></xref>."},{"content":"The collection itself cannot be <ph id=\"ph1\">`null`</ph>, but it can contain elements that are <ph id=\"ph2\">`null`</ph>.","pos":[137,221],"source":" The collection itself cannot be `null`, but it can contain elements that are `null`."}]}],"pos":[163847,164069],"yaml":true},{"content":"<code>index</code> is less than zero.  \n  \n -or-  \n  \n <code>index</code> plus the number of elements in <code>c</code> is greater than <xref href=\"System.Collections.ArrayList.Count\"></xref>.","nodes":[{"pos":[0,37],"content":"<ph id=\"ph1\">&lt;code&gt;index&lt;/code&gt;</ph> is less than zero.","source":"<code>index</code> is less than zero."},{"pos":[44,48],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[55,192],"content":"<ph id=\"ph1\">&lt;code&gt;index&lt;/code&gt;</ph> plus the number of elements in <ph id=\"ph2\">&lt;code&gt;c&lt;/code&gt;</ph> is greater than <ph id=\"ph3\">&lt;xref href=\"System.Collections.ArrayList.Count\"&gt;&lt;/xref&gt;</ph>.","source":"<code>index</code> plus the number of elements in <code>c</code> is greater than <xref href=\"System.Collections.ArrayList.Count\"></xref>."}],"pos":[164248,164449],"yaml":true},{"content":"<code>c</code> is `null`.","nodes":[{"pos":[0,25],"content":"<ph id=\"ph1\">&lt;code&gt;c&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>c</code> is `null`."}],"pos":[164551,164577],"yaml":true},{"content":"The <xref href=\"System.Collections.ArrayList\"></xref> is read-only.","nodes":[{"pos":[0,67],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Collections.ArrayList\"&gt;&lt;/xref&gt;</ph> is read-only.","source":"The <xref href=\"System.Collections.ArrayList\"></xref> is read-only."}],"pos":[164679,164747],"yaml":true},{"content":"Sorts the elements in the entire <xref href=\"System.Collections.ArrayList\"></xref>.","nodes":[{"pos":[0,83],"content":"Sorts the elements in the entire <ph id=\"ph1\">&lt;xref href=\"System.Collections.ArrayList\"&gt;&lt;/xref&gt;</ph>.","source":"Sorts the elements in the entire <xref href=\"System.Collections.ArrayList\"></xref>."}],"pos":[165935,166019],"yaml":true},{"content":"This method uses <xref:System.Array.Sort%2A?displayProperty=fullName>, which uses the QuickSort algorithm. The QuickSort algorithm is a comparison sort (also called an unstable sort), which means that a \"less than or equal to\" comparison operation determines which of two elements should occur first in the final sorted list. However, if two elements are equal, their original order might not be preserved. In contrast, a stable sort preserves the order of elements that are equal. To perform a stable sort, you must implement a custom <xref:System.Collections.IComparer> interface to use with the other overloads of this method.  \n  \n On average, this method is an O(`n` log `n`) operation, where `n` is <xref:System.Collections.ArrayList.Count%2A>; in the worst case it is an O(`n`^2) operation.","nodes":[{"pos":[0,629],"content":"This method uses <xref:System.Array.Sort%2A?displayProperty=fullName>, which uses the QuickSort algorithm. The QuickSort algorithm is a comparison sort (also called an unstable sort), which means that a \"less than or equal to\" comparison operation determines which of two elements should occur first in the final sorted list. However, if two elements are equal, their original order might not be preserved. In contrast, a stable sort preserves the order of elements that are equal. To perform a stable sort, you must implement a custom <xref:System.Collections.IComparer> interface to use with the other overloads of this method.","nodes":[{"content":"This method uses <xref:System.Array.Sort%2A?displayProperty=fullName>, which uses the QuickSort algorithm. The QuickSort algorithm is a comparison sort (also called an unstable sort), which means that a \"less than or equal to\" comparison operation determines which of two elements should occur first in the final sorted list. However, if two elements are equal, their original order might not be preserved. In contrast, a stable sort preserves the order of elements that are equal. To perform a stable sort, you must implement a custom <xref:System.Collections.IComparer> interface to use with the other overloads of this method.","pos":[0,629],"nodes":[{"content":"This method uses <ph id=\"ph1\">&lt;xref:System.Array.Sort%2A?displayProperty=fullName&gt;</ph>, which uses the QuickSort algorithm.","pos":[0,106],"source":"This method uses <xref:System.Array.Sort%2A?displayProperty=fullName>, which uses the QuickSort algorithm."},{"content":"The QuickSort algorithm is a comparison sort (also called an unstable sort), which means that a \"less than or equal to\" comparison operation determines which of two elements should occur first in the final sorted list.","pos":[107,325]},{"content":"However, if two elements are equal, their original order might not be preserved.","pos":[326,406]},{"content":"In contrast, a stable sort preserves the order of elements that are equal.","pos":[407,481]},{"content":"To perform a stable sort, you must implement a custom <ph id=\"ph1\">&lt;xref:System.Collections.IComparer&gt;</ph> interface to use with the other overloads of this method.","pos":[482,629],"source":" To perform a stable sort, you must implement a custom <xref:System.Collections.IComparer> interface to use with the other overloads of this method."}]}]},{"pos":[636,797],"content":"On average, this method is an O(<ph id=\"ph1\">`n`</ph> log <ph id=\"ph2\">`n`</ph>) operation, where <ph id=\"ph3\">`n`</ph> is <ph id=\"ph4\">&lt;xref:System.Collections.ArrayList.Count%2A&gt;</ph>; in the worst case it is an O(<ph id=\"ph5\">`n`</ph>^2) operation.","source":"On average, this method is an O(`n` log `n`) operation, where `n` is <xref:System.Collections.ArrayList.Count%2A>; in the worst case it is an O(`n`^2) operation."}],"pos":[166030,166834],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Collections.ArrayList\"></xref> is read-only.","nodes":[{"pos":[0,67],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Collections.ArrayList\"&gt;&lt;/xref&gt;</ph> is read-only.","source":"The <xref href=\"System.Collections.ArrayList\"></xref> is read-only."}],"pos":[167631,167699],"yaml":true},{"content":"Sorts the elements in the entire <xref href=\"System.Collections.ArrayList\"></xref> using the specified comparer.","nodes":[{"pos":[0,112],"content":"Sorts the elements in the entire <ph id=\"ph1\">&lt;xref href=\"System.Collections.ArrayList\"&gt;&lt;/xref&gt;</ph> using the specified comparer.","source":"Sorts the elements in the entire <xref href=\"System.Collections.ArrayList\"></xref> using the specified comparer."}],"pos":[169004,169117],"yaml":true},{"content":"Use the <xref:System.Collections.ArrayList.Sort%2A> method to  sort a list of objects with a custom comparer that implements the <xref:System.Collections.IComparer> interface. If you pass `null` for `comparer`, this method uses the <xref:System.IComparable> implementation of each element. In this case, you must make sure that the objects contained in the list implement the <xref:System.Collections.IComparer> interface or an exception will occur.  \n  \n In addition, using the <xref:System.IComparable> implementation means the list performs a comparison sort (also called an unstable sort); that is, if two elements are equal, their order might not be preserved. In contrast, a stable sort preserves the order of elements that are equal. To perform a stable sort, you must implement a custom <xref:System.Collections.IComparer> interface.  \n  \n On average, this method is an O(`n` log `n`) operation, where `n` is <xref:System.Collections.ArrayList.Count%2A>; in the worst case it is an O(`n`^2) operation.","nodes":[{"pos":[0,449],"content":"Use the <xref:System.Collections.ArrayList.Sort%2A> method to  sort a list of objects with a custom comparer that implements the <xref:System.Collections.IComparer> interface. If you pass `null` for `comparer`, this method uses the <xref:System.IComparable> implementation of each element. In this case, you must make sure that the objects contained in the list implement the <xref:System.Collections.IComparer> interface or an exception will occur.","nodes":[{"content":"Use the <ph id=\"ph1\">&lt;xref:System.Collections.ArrayList.Sort%2A&gt;</ph> method to  sort a list of objects with a custom comparer that implements the <ph id=\"ph2\">&lt;xref:System.Collections.IComparer&gt;</ph> interface.","pos":[0,175],"source":"Use the <xref:System.Collections.ArrayList.Sort%2A> method to  sort a list of objects with a custom comparer that implements the <xref:System.Collections.IComparer> interface."},{"content":"If you pass <ph id=\"ph1\">`null`</ph> for <ph id=\"ph2\">`comparer`</ph>, this method uses the <ph id=\"ph3\">&lt;xref:System.IComparable&gt;</ph> implementation of each element.","pos":[176,289],"source":" If you pass `null` for `comparer`, this method uses the <xref:System.IComparable> implementation of each element."},{"content":"In this case, you must make sure that the objects contained in the list implement the <ph id=\"ph1\">&lt;xref:System.Collections.IComparer&gt;</ph> interface or an exception will occur.","pos":[290,449],"source":" In this case, you must make sure that the objects contained in the list implement the <xref:System.Collections.IComparer> interface or an exception will occur."}]},{"pos":[456,841],"content":"In addition, using the <xref:System.IComparable> implementation means the list performs a comparison sort (also called an unstable sort); that is, if two elements are equal, their order might not be preserved. In contrast, a stable sort preserves the order of elements that are equal. To perform a stable sort, you must implement a custom <xref:System.Collections.IComparer> interface.","nodes":[{"content":"In addition, using the <xref:System.IComparable> implementation means the list performs a comparison sort (also called an unstable sort); that is, if two elements are equal, their order might not be preserved. In contrast, a stable sort preserves the order of elements that are equal. To perform a stable sort, you must implement a custom <xref:System.Collections.IComparer> interface.","pos":[0,385],"nodes":[{"content":"In addition, using the <ph id=\"ph1\">&lt;xref:System.IComparable&gt;</ph> implementation means the list performs a comparison sort (also called an unstable sort); that is, if two elements are equal, their order might not be preserved.","pos":[0,209],"source":"In addition, using the <xref:System.IComparable> implementation means the list performs a comparison sort (also called an unstable sort); that is, if two elements are equal, their order might not be preserved."},{"content":"In contrast, a stable sort preserves the order of elements that are equal.","pos":[210,284]},{"content":"To perform a stable sort, you must implement a custom <ph id=\"ph1\">&lt;xref:System.Collections.IComparer&gt;</ph> interface.","pos":[285,385],"source":" To perform a stable sort, you must implement a custom <xref:System.Collections.IComparer> interface."}]}]},{"pos":[848,1009],"content":"On average, this method is an O(<ph id=\"ph1\">`n`</ph> log <ph id=\"ph2\">`n`</ph>) operation, where <ph id=\"ph3\">`n`</ph> is <ph id=\"ph4\">&lt;xref:System.Collections.ArrayList.Count%2A&gt;</ph>; in the worst case it is an O(<ph id=\"ph5\">`n`</ph>^2) operation.","source":"On average, this method is an O(`n` log `n`) operation, where `n` is <xref:System.Collections.ArrayList.Count%2A>; in the worst case it is an O(`n`^2) operation."}],"pos":[169128,170144],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Collections.IComparer\"></xref> implementation to use when comparing elements.  \n  \n -or-  \n  \n A null reference (`Nothing` in Visual Basic) to use the <xref href=\"System.IComparable\"></xref> implementation of each element.","nodes":[{"pos":[0,100],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Collections.IComparer\"&gt;&lt;/xref&gt;</ph> implementation to use when comparing elements.","source":"The <xref href=\"System.Collections.IComparer\"></xref> implementation to use when comparing elements."},{"pos":[107,111],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[118,245],"content":"A null reference (<ph id=\"ph1\">`Nothing`</ph> in Visual Basic) to use the <ph id=\"ph2\">&lt;xref href=\"System.IComparable\"&gt;&lt;/xref&gt;</ph> implementation of each element.","source":"A null reference (`Nothing` in Visual Basic) to use the <xref href=\"System.IComparable\"></xref> implementation of each element."}],"pos":[171023,171279],"yaml":true},{"content":"The <xref href=\"System.Collections.ArrayList\"></xref> is read-only.","nodes":[{"pos":[0,67],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Collections.ArrayList\"&gt;&lt;/xref&gt;</ph> is read-only.","source":"The <xref href=\"System.Collections.ArrayList\"></xref> is read-only."}],"pos":[171442,171510],"yaml":true},{"content":"An error occurred while comparing two elements.","nodes":[{"pos":[0,47],"content":"An error occurred while comparing two elements.","nodes":[{"content":"An error occurred while comparing two elements.","pos":[0,47]}]}],"pos":[171620,171668],"yaml":true},{"content":"`null` is passed for <code>comparer</code>, and the elements in the list do not implement <xref href=\"System.IComparable\"></xref>.","nodes":[{"pos":[0,130],"content":"<ph id=\"ph1\">`null`</ph> is passed for <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">comparer</ph><ept id=\"p1\">&lt;/code&gt;</ept>, and the elements in the list do not implement <ph id=\"ph3\">&lt;xref href=\"System.IComparable\"&gt;&lt;/xref&gt;</ph>.","source":"`null` is passed for <code>comparer</code>, and the elements in the list do not implement <xref href=\"System.IComparable\"></xref>."}],"pos":[171762,171895],"yaml":true},{"content":"Sorts the elements in a range of elements in <xref href=\"System.Collections.ArrayList\"></xref> using the specified comparer.","nodes":[{"pos":[0,124],"content":"Sorts the elements in a range of elements in <ph id=\"ph1\">&lt;xref href=\"System.Collections.ArrayList\"&gt;&lt;/xref&gt;</ph> using the specified comparer.","source":"Sorts the elements in a range of elements in <xref href=\"System.Collections.ArrayList\"></xref> using the specified comparer."}],"pos":[173320,173445],"yaml":true},{"content":"If `comparer` is set to `null`, this method performs a comparison sort (also called an unstable sort); that is, if two elements are equal, their order might not be preserved. In contrast, a stable sort preserves the order of elements that are equal. To perform a stable sort, you must implement a custom <xref:System.Collections.IComparer> interface.  \n  \n On average, this method is an O(`n` log `n`) operation, where `n` is `count`; in the worst case it is an O(n^2) operation.","nodes":[{"pos":[0,350],"content":"If `comparer` is set to `null`, this method performs a comparison sort (also called an unstable sort); that is, if two elements are equal, their order might not be preserved. In contrast, a stable sort preserves the order of elements that are equal. To perform a stable sort, you must implement a custom <xref:System.Collections.IComparer> interface.","nodes":[{"content":"If <ph id=\"ph1\">`comparer`</ph> is set to <ph id=\"ph2\">`null`</ph>, this method performs a comparison sort (also called an unstable sort); that is, if two elements are equal, their order might not be preserved.","pos":[0,174],"source":"If `comparer` is set to `null`, this method performs a comparison sort (also called an unstable sort); that is, if two elements are equal, their order might not be preserved."},{"content":"In contrast, a stable sort preserves the order of elements that are equal.","pos":[175,249]},{"content":"To perform a stable sort, you must implement a custom <ph id=\"ph1\">&lt;xref:System.Collections.IComparer&gt;</ph> interface.","pos":[250,350],"source":" To perform a stable sort, you must implement a custom <xref:System.Collections.IComparer> interface."}]},{"pos":[357,479],"content":"On average, this method is an O(<ph id=\"ph1\">`n`</ph> log <ph id=\"ph2\">`n`</ph>) operation, where <ph id=\"ph3\">`n`</ph> is <ph id=\"ph4\">`count`</ph>; in the worst case it is an O(n^2) operation.","source":"On average, this method is an O(`n` log `n`) operation, where `n` is `count`; in the worst case it is an O(n^2) operation."}],"pos":[173456,173940],"yaml":true,"extradata":"MT"},{"content":"The zero-based starting index of the range to sort.","nodes":[{"pos":[0,51],"content":"The zero-based starting index of the range to sort.","nodes":[{"content":"The zero-based starting index of the range to sort.","pos":[0,51]}]}],"pos":[174845,174897],"yaml":true},{"content":"The length of the range to sort.","nodes":[{"pos":[0,32],"content":"The length of the range to sort.","nodes":[{"content":"The length of the range to sort.","pos":[0,32]}]}],"pos":[174957,174990],"yaml":true},{"content":"The <xref href=\"System.Collections.IComparer\"></xref> implementation to use when comparing elements.  \n  \n -or-  \n  \n A null reference (`Nothing` in Visual Basic) to use the <xref href=\"System.IComparable\"></xref> implementation of each element.","nodes":[{"pos":[0,100],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Collections.IComparer\"&gt;&lt;/xref&gt;</ph> implementation to use when comparing elements.","source":"The <xref href=\"System.Collections.IComparer\"></xref> implementation to use when comparing elements."},{"pos":[107,111],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[118,245],"content":"A null reference (<ph id=\"ph1\">`Nothing`</ph> in Visual Basic) to use the <ph id=\"ph2\">&lt;xref href=\"System.IComparable\"&gt;&lt;/xref&gt;</ph> implementation of each element.","source":"A null reference (`Nothing` in Visual Basic) to use the <xref href=\"System.IComparable\"></xref> implementation of each element."}],"pos":[175069,175325],"yaml":true},{"content":"<code>index</code> is less than zero.  \n  \n -or-  \n  \n <code>count</code> is less than zero.","nodes":[{"pos":[0,37],"content":"<ph id=\"ph1\">&lt;code&gt;index&lt;/code&gt;</ph> is less than zero.","source":"<code>index</code> is less than zero."},{"pos":[44,48],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[55,92],"content":"<ph id=\"ph1\">&lt;code&gt;count&lt;/code&gt;</ph> is less than zero.","source":"<code>count</code> is less than zero."}],"pos":[175500,175599],"yaml":true},{"content":"<code>index</code> and <code>count</code> do not specify a valid range in the <xref href=\"System.Collections.ArrayList\"></xref>.","nodes":[{"pos":[0,128],"content":"<ph id=\"ph1\">&lt;code&gt;index&lt;/code&gt;</ph> and <ph id=\"ph2\">&lt;code&gt;count&lt;/code&gt;</ph> do not specify a valid range in the <ph id=\"ph3\">&lt;xref href=\"System.Collections.ArrayList\"&gt;&lt;/xref&gt;</ph>.","source":"<code>index</code> and <code>count</code> do not specify a valid range in the <xref href=\"System.Collections.ArrayList\"></xref>."}],"pos":[175693,175822],"yaml":true},{"content":"The <xref href=\"System.Collections.ArrayList\"></xref> is read-only.","nodes":[{"pos":[0,67],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Collections.ArrayList\"&gt;&lt;/xref&gt;</ph> is read-only.","source":"The <xref href=\"System.Collections.ArrayList\"></xref> is read-only."}],"pos":[175924,175992],"yaml":true},{"content":"An error occurred while comparing two elements.","nodes":[{"pos":[0,47],"content":"An error occurred while comparing two elements.","nodes":[{"content":"An error occurred while comparing two elements.","pos":[0,47]}]}],"pos":[176102,176150],"yaml":true},{"content":"Returns an <xref href=\"System.Collections.ArrayList\"></xref> wrapper that is synchronized (thread safe).","nodes":[{"pos":[0,104],"content":"Returns an <ph id=\"ph1\">&lt;xref href=\"System.Collections.ArrayList\"&gt;&lt;/xref&gt;</ph> wrapper that is synchronized (thread safe).","source":"Returns an <xref href=\"System.Collections.ArrayList\"></xref> wrapper that is synchronized (thread safe)."}],"pos":[177503,177608],"yaml":true},{"content":"To guarantee the thread safety of the <xref:System.Collections.ArrayList>, all operations must be done through this wrapper.  \n  \n Enumerating through a collection is intrinsically not a thread-safe procedure. Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception. To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.","nodes":[{"pos":[0,124],"content":"To guarantee the thread safety of the <xref:System.Collections.ArrayList>, all operations must be done through this wrapper.","nodes":[{"content":"To guarantee the thread safety of the <ph id=\"ph1\">&lt;xref:System.Collections.ArrayList&gt;</ph>, all operations must be done through this wrapper.","pos":[0,124],"source":"To guarantee the thread safety of the <xref:System.Collections.ArrayList>, all operations must be done through this wrapper."}]},{"pos":[131,529],"content":"Enumerating through a collection is intrinsically not a thread-safe procedure. Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception. To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.","nodes":[{"content":"Enumerating through a collection is intrinsically not a thread-safe procedure. Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception. To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.","pos":[0,398],"nodes":[{"content":"Enumerating through a collection is intrinsically not a thread-safe procedure.","pos":[0,78]},{"content":"Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception.","pos":[79,216]},{"content":"To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.","pos":[217,398]}]}]}],"pos":[177619,178153],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Collections.ArrayList\"></xref> to synchronize.","nodes":[{"pos":[0,69],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Collections.ArrayList\"&gt;&lt;/xref&gt;</ph> to synchronize.","source":"The <xref href=\"System.Collections.ArrayList\"></xref> to synchronize."}],"pos":[179813,179883],"yaml":true},{"content":"An <xref href=\"System.Collections.ArrayList\"></xref> wrapper that is synchronized (thread safe).","nodes":[{"pos":[0,96],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Collections.ArrayList\"&gt;&lt;/xref&gt;</ph> wrapper that is synchronized (thread safe).","source":"An <xref href=\"System.Collections.ArrayList\"></xref> wrapper that is synchronized (thread safe)."}],"pos":[179955,180052],"yaml":true},{"content":"<code>list</code> is `null`.","nodes":[{"pos":[0,28],"content":"<ph id=\"ph1\">&lt;code&gt;list&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>list</code> is `null`."}],"pos":[180223,180252],"yaml":true},{"content":"Returns an <xref href=\"System.Collections.IList\"></xref> wrapper that is synchronized (thread safe).","nodes":[{"pos":[0,100],"content":"Returns an <ph id=\"ph1\">&lt;xref href=\"System.Collections.IList\"&gt;&lt;/xref&gt;</ph> wrapper that is synchronized (thread safe).","source":"Returns an <xref href=\"System.Collections.IList\"></xref> wrapper that is synchronized (thread safe)."}],"pos":[181581,181682],"yaml":true},{"content":"To guarantee the thread safety of the <xref:System.Collections.ArrayList>, all operations must be done through this wrapper.  \n  \n Enumerating through a collection is intrinsically not a thread-safe procedure. Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception. To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.","nodes":[{"pos":[0,124],"content":"To guarantee the thread safety of the <xref:System.Collections.ArrayList>, all operations must be done through this wrapper.","nodes":[{"content":"To guarantee the thread safety of the <ph id=\"ph1\">&lt;xref:System.Collections.ArrayList&gt;</ph>, all operations must be done through this wrapper.","pos":[0,124],"source":"To guarantee the thread safety of the <xref:System.Collections.ArrayList>, all operations must be done through this wrapper."}]},{"pos":[131,529],"content":"Enumerating through a collection is intrinsically not a thread-safe procedure. Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception. To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.","nodes":[{"content":"Enumerating through a collection is intrinsically not a thread-safe procedure. Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception. To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.","pos":[0,398],"nodes":[{"content":"Enumerating through a collection is intrinsically not a thread-safe procedure.","pos":[0,78]},{"content":"Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception.","pos":[79,216]},{"content":"To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.","pos":[217,398]}]}]}],"pos":[181693,182227],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Collections.IList\"></xref> to synchronize.","nodes":[{"pos":[0,65],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Collections.IList\"&gt;&lt;/xref&gt;</ph> to synchronize.","source":"The <xref href=\"System.Collections.IList\"></xref> to synchronize."}],"pos":[183140,183206],"yaml":true},{"content":"An <xref href=\"System.Collections.IList\"></xref> wrapper that is synchronized (thread safe).","nodes":[{"pos":[0,92],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Collections.IList\"&gt;&lt;/xref&gt;</ph> wrapper that is synchronized (thread safe).","source":"An <xref href=\"System.Collections.IList\"></xref> wrapper that is synchronized (thread safe)."}],"pos":[183274,183367],"yaml":true},{"content":"<code>list</code> is `null`.","nodes":[{"pos":[0,28],"content":"<ph id=\"ph1\">&lt;code&gt;list&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>list</code> is `null`."}],"pos":[183538,183567],"yaml":true},{"content":"Gets an object that can be used to synchronize access to the <xref href=\"System.Collections.ArrayList\"></xref>.","nodes":[{"pos":[0,111],"content":"Gets an object that can be used to synchronize access to the <ph id=\"ph1\">&lt;xref href=\"System.Collections.ArrayList\"&gt;&lt;/xref&gt;</ph>.","source":"Gets an object that can be used to synchronize access to the <xref href=\"System.Collections.ArrayList\"></xref>."}],"pos":[184775,184887],"yaml":true},{"content":"To create a synchronized version of the <xref:System.Collections.ArrayList>, use the <xref:System.Collections.ArrayList.Synchronized%2A> method. However, derived classes can provide their own synchronized version of the <xref:System.Collections.ArrayList> using the <xref:System.Collections.ArrayList.SyncRoot%2A> property. The synchronizing code must perform operations on the <xref:System.Collections.ArrayList.SyncRoot%2A> of the <xref:System.Collections.ArrayList>, not directly on the <xref:System.Collections.ArrayList>. This ensures proper operation of collections that are derived from other objects. Specifically, it maintains proper synchronization with other threads that might be simultaneously modifying the <xref:System.Collections.ArrayList> object.  \n  \n Enumerating through a collection is intrinsically not a thread-safe procedure. Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception. To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.","nodes":[{"pos":[0,764],"content":"To create a synchronized version of the <xref:System.Collections.ArrayList>, use the <xref:System.Collections.ArrayList.Synchronized%2A> method. However, derived classes can provide their own synchronized version of the <xref:System.Collections.ArrayList> using the <xref:System.Collections.ArrayList.SyncRoot%2A> property. The synchronizing code must perform operations on the <xref:System.Collections.ArrayList.SyncRoot%2A> of the <xref:System.Collections.ArrayList>, not directly on the <xref:System.Collections.ArrayList>. This ensures proper operation of collections that are derived from other objects. Specifically, it maintains proper synchronization with other threads that might be simultaneously modifying the <xref:System.Collections.ArrayList> object.","nodes":[{"content":"To create a synchronized version of the <xref:System.Collections.ArrayList>, use the <xref:System.Collections.ArrayList.Synchronized%2A> method. However, derived classes can provide their own synchronized version of the <xref:System.Collections.ArrayList> using the <xref:System.Collections.ArrayList.SyncRoot%2A> property. The synchronizing code must perform operations on the <xref:System.Collections.ArrayList.SyncRoot%2A> of the <xref:System.Collections.ArrayList>, not directly on the <xref:System.Collections.ArrayList>. This ensures proper operation of collections that are derived from other objects. Specifically, it maintains proper synchronization with other threads that might be simultaneously modifying the <xref:System.Collections.ArrayList> object.","pos":[0,764],"nodes":[{"content":"To create a synchronized version of the <ph id=\"ph1\">&lt;xref:System.Collections.ArrayList&gt;</ph>, use the <ph id=\"ph2\">&lt;xref:System.Collections.ArrayList.Synchronized%2A&gt;</ph> method.","pos":[0,144],"source":"To create a synchronized version of the <xref:System.Collections.ArrayList>, use the <xref:System.Collections.ArrayList.Synchronized%2A> method."},{"content":"However, derived classes can provide their own synchronized version of the <ph id=\"ph1\">&lt;xref:System.Collections.ArrayList&gt;</ph> using the <ph id=\"ph2\">&lt;xref:System.Collections.ArrayList.SyncRoot%2A&gt;</ph> property.","pos":[145,323],"source":" However, derived classes can provide their own synchronized version of the <xref:System.Collections.ArrayList> using the <xref:System.Collections.ArrayList.SyncRoot%2A> property."},{"content":"The synchronizing code must perform operations on the <ph id=\"ph1\">&lt;xref:System.Collections.ArrayList.SyncRoot%2A&gt;</ph> of the <ph id=\"ph2\">&lt;xref:System.Collections.ArrayList&gt;</ph>, not directly on the <ph id=\"ph3\">&lt;xref:System.Collections.ArrayList&gt;</ph>.","pos":[324,526],"source":" The synchronizing code must perform operations on the <xref:System.Collections.ArrayList.SyncRoot%2A> of the <xref:System.Collections.ArrayList>, not directly on the <xref:System.Collections.ArrayList>."},{"content":"This ensures proper operation of collections that are derived from other objects.","pos":[527,608]},{"content":"Specifically, it maintains proper synchronization with other threads that might be simultaneously modifying the <ph id=\"ph1\">&lt;xref:System.Collections.ArrayList&gt;</ph> object.","pos":[609,764],"source":" Specifically, it maintains proper synchronization with other threads that might be simultaneously modifying the <xref:System.Collections.ArrayList> object."}]}]},{"pos":[771,1169],"content":"Enumerating through a collection is intrinsically not a thread-safe procedure. Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception. To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.","nodes":[{"content":"Enumerating through a collection is intrinsically not a thread-safe procedure. Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception. To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.","pos":[0,398],"nodes":[{"content":"Enumerating through a collection is intrinsically not a thread-safe procedure.","pos":[0,78]},{"content":"Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception.","pos":[79,216]},{"content":"To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.","pos":[217,398]}]}]}],"pos":[184898,186072],"yaml":true,"extradata":"MT"},{"content":"An object that can be used to synchronize access to the <xref href=\"System.Collections.ArrayList\"></xref>.","nodes":[{"pos":[0,106],"content":"An object that can be used to synchronize access to the <ph id=\"ph1\">&lt;xref href=\"System.Collections.ArrayList\"&gt;&lt;/xref&gt;</ph>.","source":"An object that can be used to synchronize access to the <xref href=\"System.Collections.ArrayList\"></xref>."}],"pos":[186936,187043],"yaml":true},{"content":"Copies the elements of the <xref href=\"System.Collections.ArrayList\"></xref> to a new <xref href=\"System.Object\"></xref> array.","nodes":[{"pos":[0,127],"content":"Copies the elements of the <ph id=\"ph1\">&lt;xref href=\"System.Collections.ArrayList\"&gt;&lt;/xref&gt;</ph> to a new <ph id=\"ph2\">&lt;xref href=\"System.Object\"&gt;&lt;/xref&gt;</ph> array.","source":"Copies the elements of the <xref href=\"System.Collections.ArrayList\"></xref> to a new <xref href=\"System.Object\"></xref> array."}],"pos":[188317,188445],"yaml":true},{"content":"The elements are copied using <xref:System.Array.Copy%2A?displayProperty=fullName>, which is an O(`n`) operation, where `n` is <xref:System.Collections.ArrayList.Count%2A>.","nodes":[{"pos":[0,172],"content":"The elements are copied using <ph id=\"ph1\">&lt;xref:System.Array.Copy%2A?displayProperty=fullName&gt;</ph>, which is an O(<ph id=\"ph2\">`n`</ph>) operation, where <ph id=\"ph3\">`n`</ph> is <ph id=\"ph4\">&lt;xref:System.Collections.ArrayList.Count%2A&gt;</ph>.","source":"The elements are copied using <xref:System.Array.Copy%2A?displayProperty=fullName>, which is an O(`n`) operation, where `n` is <xref:System.Collections.ArrayList.Count%2A>."}],"pos":[188456,188629],"yaml":true,"extradata":"MT"},{"content":"An <xref href=\"System.Object\"></xref> array containing copies of the elements of the <xref href=\"System.Collections.ArrayList\"></xref>.","nodes":[{"pos":[0,135],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Object\"&gt;&lt;/xref&gt;</ph> array containing copies of the elements of the <ph id=\"ph2\">&lt;xref href=\"System.Collections.ArrayList\"&gt;&lt;/xref&gt;</ph>.","source":"An <xref href=\"System.Object\"></xref> array containing copies of the elements of the <xref href=\"System.Collections.ArrayList\"></xref>."}],"pos":[188766,188902],"yaml":true},{"content":"Copies the elements of the <xref href=\"System.Collections.ArrayList\"></xref> to a new array of the specified element type.","nodes":[{"pos":[0,122],"content":"Copies the elements of the <ph id=\"ph1\">&lt;xref href=\"System.Collections.ArrayList\"&gt;&lt;/xref&gt;</ph> to a new array of the specified element type.","source":"Copies the elements of the <xref href=\"System.Collections.ArrayList\"></xref> to a new array of the specified element type."}],"pos":[190226,190349],"yaml":true},{"content":"All of the objects in the <xref:System.Collections.ArrayList> object will be cast to the <xref:System.Type> specified in the `type` parameter.  \n  \n The elements are copied using <xref:System.Array.Copy%2A?displayProperty=fullName>, which is an O(`n`) operation, where `n` is <xref:System.Collections.ArrayList.Count%2A>.","nodes":[{"pos":[0,142],"content":"All of the objects in the <ph id=\"ph1\">&lt;xref:System.Collections.ArrayList&gt;</ph> object will be cast to the <ph id=\"ph2\">&lt;xref:System.Type&gt;</ph> specified in the <ph id=\"ph3\">`type`</ph> parameter.","source":"All of the objects in the <xref:System.Collections.ArrayList> object will be cast to the <xref:System.Type> specified in the `type` parameter."},{"pos":[149,321],"content":"The elements are copied using <ph id=\"ph1\">&lt;xref:System.Array.Copy%2A?displayProperty=fullName&gt;</ph>, which is an O(<ph id=\"ph2\">`n`</ph>) operation, where <ph id=\"ph3\">`n`</ph> is <ph id=\"ph4\">&lt;xref:System.Collections.ArrayList.Count%2A&gt;</ph>.","source":"The elements are copied using <xref:System.Array.Copy%2A?displayProperty=fullName>, which is an O(`n`) operation, where `n` is <xref:System.Collections.ArrayList.Count%2A>."}],"pos":[190360,190686],"yaml":true,"extradata":"MT"},{"content":"The element <xref href=\"System.Type\"></xref> of the destination array to create and copy elements to.","nodes":[{"pos":[0,101],"content":"The element <ph id=\"ph1\">&lt;xref href=\"System.Type\"&gt;&lt;/xref&gt;</ph> of the destination array to create and copy elements to.","source":"The element <xref href=\"System.Type\"></xref> of the destination array to create and copy elements to."}],"pos":[191474,191576],"yaml":true},{"content":"An array of the specified element type containing copies of the elements of the <xref href=\"System.Collections.ArrayList\"></xref>.","nodes":[{"pos":[0,130],"content":"An array of the specified element type containing copies of the elements of the <ph id=\"ph1\">&lt;xref href=\"System.Collections.ArrayList\"&gt;&lt;/xref&gt;</ph>.","source":"An array of the specified element type containing copies of the elements of the <xref href=\"System.Collections.ArrayList\"></xref>."}],"pos":[191632,191763],"yaml":true},{"content":"<code>type</code> is `null`.","nodes":[{"pos":[0,28],"content":"<ph id=\"ph1\">&lt;code&gt;type&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>type</code> is `null`."}],"pos":[191929,191958],"yaml":true},{"content":"The type of the source <xref href=\"System.Collections.ArrayList\"></xref> cannot be cast automatically to the specified type.","nodes":[{"pos":[0,124],"content":"The type of the source <ph id=\"ph1\">&lt;xref href=\"System.Collections.ArrayList\"&gt;&lt;/xref&gt;</ph> cannot be cast automatically to the specified type.","source":"The type of the source <xref href=\"System.Collections.ArrayList\"></xref> cannot be cast automatically to the specified type."}],"pos":[192058,192183],"yaml":true},{"content":"Sets the capacity to the actual number of elements in the <xref href=\"System.Collections.ArrayList\"></xref>.","nodes":[{"pos":[0,108],"content":"Sets the capacity to the actual number of elements in the <ph id=\"ph1\">&lt;xref href=\"System.Collections.ArrayList\"&gt;&lt;/xref&gt;</ph>.","source":"Sets the capacity to the actual number of elements in the <xref href=\"System.Collections.ArrayList\"></xref>."}],"pos":[193424,193533],"yaml":true},{"content":"This method can be used to minimize a collection's memory overhead if no new elements will be added to the collection.  \n  \n To reset a <xref:System.Collections.ArrayList> to its initial state, call the <xref:System.Collections.ArrayList.Clear%2A> method before calling <xref:System.Collections.ArrayList.TrimToSize%2A>. Trimming an empty <xref:System.Collections.ArrayList> sets the capacity of the <xref:System.Collections.ArrayList> to the default capacity.  \n  \n This method is an O(`n`) operation, where `n` is <xref:System.Collections.ArrayList.Count%2A>.","nodes":[{"pos":[0,118],"content":"This method can be used to minimize a collection's memory overhead if no new elements will be added to the collection.","nodes":[{"content":"This method can be used to minimize a collection's memory overhead if no new elements will be added to the collection.","pos":[0,118]}]},{"pos":[125,460],"content":"To reset a <xref:System.Collections.ArrayList> to its initial state, call the <xref:System.Collections.ArrayList.Clear%2A> method before calling <xref:System.Collections.ArrayList.TrimToSize%2A>. Trimming an empty <xref:System.Collections.ArrayList> sets the capacity of the <xref:System.Collections.ArrayList> to the default capacity.","nodes":[{"content":"To reset a <xref:System.Collections.ArrayList> to its initial state, call the <xref:System.Collections.ArrayList.Clear%2A> method before calling <xref:System.Collections.ArrayList.TrimToSize%2A>. Trimming an empty <xref:System.Collections.ArrayList> sets the capacity of the <xref:System.Collections.ArrayList> to the default capacity.","pos":[0,335],"nodes":[{"content":"To reset a <ph id=\"ph1\">&lt;xref:System.Collections.ArrayList&gt;</ph> to its initial state, call the <ph id=\"ph2\">&lt;xref:System.Collections.ArrayList.Clear%2A&gt;</ph> method before calling <ph id=\"ph3\">&lt;xref:System.Collections.ArrayList.TrimToSize%2A&gt;</ph>.","pos":[0,195],"source":"To reset a <xref:System.Collections.ArrayList> to its initial state, call the <xref:System.Collections.ArrayList.Clear%2A> method before calling <xref:System.Collections.ArrayList.TrimToSize%2A>."},{"content":"Trimming an empty <ph id=\"ph1\">&lt;xref:System.Collections.ArrayList&gt;</ph> sets the capacity of the <ph id=\"ph2\">&lt;xref:System.Collections.ArrayList&gt;</ph> to the default capacity.","pos":[196,335],"source":" Trimming an empty <xref:System.Collections.ArrayList> sets the capacity of the <xref:System.Collections.ArrayList> to the default capacity."}]}]},{"pos":[467,561],"content":"This method is an O(<ph id=\"ph1\">`n`</ph>) operation, where <ph id=\"ph2\">`n`</ph> is <ph id=\"ph3\">&lt;xref:System.Collections.ArrayList.Count%2A&gt;</ph>.","source":"This method is an O(`n`) operation, where `n` is <xref:System.Collections.ArrayList.Count%2A>."}],"pos":[193544,194112],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Collections.ArrayList\"></xref> is read-only.  \n  \n -or-  \n  \n The <xref href=\"System.Collections.ArrayList\"></xref> has a fixed size.","nodes":[{"pos":[0,67],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Collections.ArrayList\"&gt;&lt;/xref&gt;</ph> is read-only.","source":"The <xref href=\"System.Collections.ArrayList\"></xref> is read-only."},{"pos":[74,78],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[85,156],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Collections.ArrayList\"&gt;&lt;/xref&gt;</ph> has a fixed size.","source":"The <xref href=\"System.Collections.ArrayList\"></xref> has a fixed size."}],"pos":[195008,195175],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Collections.ArrayList\n  commentId: T:System.Collections.ArrayList\n  id: ArrayList\n  children:\n  - System.Collections.ArrayList.#ctor\n  - System.Collections.ArrayList.#ctor(System.Collections.ICollection)\n  - System.Collections.ArrayList.#ctor(System.Int32)\n  - System.Collections.ArrayList.Adapter(System.Collections.IList)\n  - System.Collections.ArrayList.Add(System.Object)\n  - System.Collections.ArrayList.AddRange(System.Collections.ICollection)\n  - System.Collections.ArrayList.BinarySearch(System.Object)\n  - System.Collections.ArrayList.BinarySearch(System.Object,System.Collections.IComparer)\n  - System.Collections.ArrayList.BinarySearch(System.Int32,System.Int32,System.Object,System.Collections.IComparer)\n  - System.Collections.ArrayList.Capacity\n  - System.Collections.ArrayList.Clear\n  - System.Collections.ArrayList.Clone\n  - System.Collections.ArrayList.Contains(System.Object)\n  - System.Collections.ArrayList.CopyTo(System.Array)\n  - System.Collections.ArrayList.CopyTo(System.Array,System.Int32)\n  - System.Collections.ArrayList.CopyTo(System.Int32,System.Array,System.Int32,System.Int32)\n  - System.Collections.ArrayList.Count\n  - System.Collections.ArrayList.FixedSize(System.Collections.ArrayList)\n  - System.Collections.ArrayList.FixedSize(System.Collections.IList)\n  - System.Collections.ArrayList.GetEnumerator\n  - System.Collections.ArrayList.GetEnumerator(System.Int32,System.Int32)\n  - System.Collections.ArrayList.GetRange(System.Int32,System.Int32)\n  - System.Collections.ArrayList.IndexOf(System.Object)\n  - System.Collections.ArrayList.IndexOf(System.Object,System.Int32)\n  - System.Collections.ArrayList.IndexOf(System.Object,System.Int32,System.Int32)\n  - System.Collections.ArrayList.Insert(System.Int32,System.Object)\n  - System.Collections.ArrayList.InsertRange(System.Int32,System.Collections.ICollection)\n  - System.Collections.ArrayList.IsFixedSize\n  - System.Collections.ArrayList.IsReadOnly\n  - System.Collections.ArrayList.IsSynchronized\n  - System.Collections.ArrayList.Item(System.Int32)\n  - System.Collections.ArrayList.LastIndexOf(System.Object)\n  - System.Collections.ArrayList.LastIndexOf(System.Object,System.Int32)\n  - System.Collections.ArrayList.LastIndexOf(System.Object,System.Int32,System.Int32)\n  - System.Collections.ArrayList.ReadOnly(System.Collections.ArrayList)\n  - System.Collections.ArrayList.ReadOnly(System.Collections.IList)\n  - System.Collections.ArrayList.Remove(System.Object)\n  - System.Collections.ArrayList.RemoveAt(System.Int32)\n  - System.Collections.ArrayList.RemoveRange(System.Int32,System.Int32)\n  - System.Collections.ArrayList.Repeat(System.Object,System.Int32)\n  - System.Collections.ArrayList.Reverse\n  - System.Collections.ArrayList.Reverse(System.Int32,System.Int32)\n  - System.Collections.ArrayList.SetRange(System.Int32,System.Collections.ICollection)\n  - System.Collections.ArrayList.Sort\n  - System.Collections.ArrayList.Sort(System.Collections.IComparer)\n  - System.Collections.ArrayList.Sort(System.Int32,System.Int32,System.Collections.IComparer)\n  - System.Collections.ArrayList.Synchronized(System.Collections.ArrayList)\n  - System.Collections.ArrayList.Synchronized(System.Collections.IList)\n  - System.Collections.ArrayList.SyncRoot\n  - System.Collections.ArrayList.ToArray\n  - System.Collections.ArrayList.ToArray(System.Type)\n  - System.Collections.ArrayList.TrimToSize\n  langs:\n  - csharp\n  name: ArrayList\n  nameWithType: ArrayList\n  fullName: System.Collections.ArrayList\n  type: Class\n  assemblies:\n  - System.Collections.NonGeneric\n  - mscorlib\n  - netstandard\n  - System.Runtime.Extensions\n  namespace: System.Collections\n  summary: Implements the <xref href=\"System.Collections.IList\"></xref> interface using an array whose size is dynamically increased as required.\n  remarks: \"> [!NOTE]\\n>  To view the .NET Framework source code for this type, see the [Reference Source](http://referencesource.microsoft.com/#mscorlib/system/collections/arraylist.cs#3e3f6715773d6643). You can browse through the source code online, download the reference for offline viewing, and step through the sources (including patches and updates) during debugging; see [instructions](http://referencesource.microsoft.com/).  \\n  \\n The <xref:System.Collections.ArrayList> class is designed to hold heterogeneous collections of objects. However, it does not always offer the best performance. Instead, we recommend the following:  \\n  \\n-   For a heterogeneous collection of objects, use the `List<Object>` (in C#) or `List(Of Object)` (in Visual Basic) type.  \\n  \\n-   For a homogeneous collection of objects, use the <xref:System.Collections.Generic.List%601> class.  \\n  \\n See the \\\"Performance Considerations\\\" section in the <xref:System.Collections.Generic.List%601> reference topic for a discussion of the relative performance of these classes.  \\n  \\n The <xref:System.Collections.ArrayList> is not guaranteed to be sorted.  You must sort the <xref:System.Collections.ArrayList> by calling its <xref:System.Collections.ArrayList.Sort%2A> method prior to performing operations (such as <xref:System.Collections.ArrayList.BinarySearch%2A>) that require the <xref:System.Collections.ArrayList> to be sorted. To maintain a collection that is automatically sorted as new elements are added, you can use the <xref:System.Collections.Generic.SortedSet%601> class.  \\n  \\n The capacity of an <xref:System.Collections.ArrayList> is the number of elements the <xref:System.Collections.ArrayList> can hold. As elements are added to an <xref:System.Collections.ArrayList>, the capacity is automatically increased as required through reallocation. The capacity can be decreased by calling <xref:System.Collections.ArrayList.TrimToSize%2A> or by setting the <xref:System.Collections.ArrayList.Capacity%2A> property explicitly.  \\n  \\n For very large <xref:System.Collections.ArrayList> objects, you can increase the maximum capacity to 2 billion elements on a 64-bit system by setting the `enabled` attribute of the  configuration element to `true` in the run-time environment.  \\n  \\n Elements in this collection can be accessed using an integer index.  Indexes in this collection are zero-based.  \\n  \\n The <xref:System.Collections.ArrayList> collection accepts `null` as a valid value. It also allows duplicate elements.  \\n  \\n Using multidimensional arrays as elements in an <xref:System.Collections.ArrayList> collection is not supported.\"\n  example:\n  - \"The following code example shows how to create and initialize an <xref:System.Collections.ArrayList> and how to display its values.  \\n  \\n [!code-cpp[Classic ArrayList Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic ArrayList Example/CPP/source.cpp#1)]\\n [!code-csharp[Classic ArrayList Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic ArrayList Example/CS/source.cs#1)]\\n [!code-vb[Classic ArrayList Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic ArrayList Example/VB/source.vb#1)]\"\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(true)]\n\n      public class ArrayList : ICloneable, System.Collections.IList\n  inheritance:\n  - System.Object\n  derivedClasses:\n  - System.Windows.Forms.DomainUpDown.DomainUpDownItemCollection\n  implements:\n  - System.Collections.IList\n  - System.ICloneable\n  inheritedMembers:\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.ToString\n  extensionMethods:\n  - System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)\n  - System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)\n  - System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)\n  - System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)\n  attributes:\n  - type: System.Runtime.InteropServices.ComVisibleAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections/ArrayList.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.ArrayList.#ctor\n  commentId: M:System.Collections.ArrayList.#ctor\n  id: '#ctor'\n  parent: System.Collections.ArrayList\n  langs:\n  - csharp\n  name: ArrayList()\n  nameWithType: ArrayList.ArrayList()\n  fullName: ArrayList.ArrayList()\n  type: Constructor\n  assemblies:\n  - System.Collections.NonGeneric\n  - mscorlib\n  - netstandard\n  - System.Runtime.Extensions\n  namespace: System.Collections\n  summary: Initializes a new instance of the <xref href=\"System.Collections.ArrayList\"></xref> class that is empty and has the default initial capacity.\n  remarks: \"The capacity of an <xref:System.Collections.ArrayList> is the number of elements that the <xref:System.Collections.ArrayList> can hold. As elements are added to an <xref:System.Collections.ArrayList>, the capacity is automatically increased as required by reallocating the internal array.  \\n  \\n If the size of the collection can be estimated, specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <xref:System.Collections.ArrayList>.  \\n  \\n This constructor is an O(1) operation.\"\n  syntax:\n    content: public ArrayList ();\n    parameters: []\n  overload: System.Collections.ArrayList.#ctor*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections/ArrayList.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.ArrayList.#ctor(System.Collections.ICollection)\n  commentId: M:System.Collections.ArrayList.#ctor(System.Collections.ICollection)\n  id: '#ctor(System.Collections.ICollection)'\n  parent: System.Collections.ArrayList\n  langs:\n  - csharp\n  name: ArrayList(ICollection)\n  nameWithType: ArrayList.ArrayList(ICollection)\n  fullName: ArrayList.ArrayList(ICollection)\n  type: Constructor\n  assemblies:\n  - System.Collections.NonGeneric\n  - mscorlib\n  - netstandard\n  - System.Runtime.Extensions\n  namespace: System.Collections\n  summary: Initializes a new instance of the <xref href=\"System.Collections.ArrayList\"></xref> class that contains elements copied from the specified collection and that has the same initial capacity as the number of elements copied.\n  remarks: \"The capacity of an <xref:System.Collections.ArrayList> is the number of elements that the <xref:System.Collections.ArrayList> can hold. As elements are added to an <xref:System.Collections.ArrayList>, the capacity is automatically increased as required by reallocating the internal array.  \\n  \\n If the size of the collection can be estimated, specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <xref:System.Collections.ArrayList>.  \\n  \\n The elements are copied onto the <xref:System.Collections.ArrayList> in the same order they are read by the <xref:System.Collections.IEnumerator> of the <xref:System.Collections.ICollection>.  \\n  \\n This constructor is an O(`n`) operation, where `n` is the number of elements in `c`.\"\n  syntax:\n    content: public ArrayList (System.Collections.ICollection c);\n    parameters:\n    - id: c\n      type: System.Collections.ICollection\n      description: The <xref href=\"System.Collections.ICollection\"></xref> whose elements are copied to the new list.\n  overload: System.Collections.ArrayList.#ctor*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>c</code> is `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections/ArrayList.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.ArrayList.#ctor(System.Int32)\n  commentId: M:System.Collections.ArrayList.#ctor(System.Int32)\n  id: '#ctor(System.Int32)'\n  parent: System.Collections.ArrayList\n  langs:\n  - csharp\n  name: ArrayList(Int32)\n  nameWithType: ArrayList.ArrayList(Int32)\n  fullName: ArrayList.ArrayList(Int32)\n  type: Constructor\n  assemblies:\n  - System.Collections.NonGeneric\n  - mscorlib\n  - netstandard\n  - System.Runtime.Extensions\n  namespace: System.Collections\n  summary: Initializes a new instance of the <xref href=\"System.Collections.ArrayList\"></xref> class that is empty and has the specified initial capacity.\n  remarks: \"The capacity of an <xref:System.Collections.ArrayList> is the number of elements that the <xref:System.Collections.ArrayList> can hold. As elements are added to an <xref:System.Collections.ArrayList>, the capacity is automatically increased as required by reallocating the internal array.  \\n  \\n If the size of the collection can be estimated, specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <xref:System.Collections.ArrayList>.  \\n  \\n This constructor is an O(`n`) operation, where `n` is `capacity`.\"\n  syntax:\n    content: public ArrayList (int capacity);\n    parameters:\n    - id: capacity\n      type: System.Int32\n      description: The number of elements that the new list can initially store.\n  overload: System.Collections.ArrayList.#ctor*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>capacity</code> is less than zero.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections/ArrayList.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.ArrayList.Adapter(System.Collections.IList)\n  commentId: M:System.Collections.ArrayList.Adapter(System.Collections.IList)\n  id: Adapter(System.Collections.IList)\n  parent: System.Collections.ArrayList\n  langs:\n  - csharp\n  name: Adapter(IList)\n  nameWithType: ArrayList.Adapter(IList)\n  fullName: ArrayList.Adapter(IList)\n  type: Method\n  assemblies:\n  - System.Collections.NonGeneric\n  - mscorlib\n  - netstandard\n  - System.Runtime.Extensions\n  namespace: System.Collections\n  summary: Creates an <xref href=\"System.Collections.ArrayList\"></xref> wrapper for a specific <xref href=\"System.Collections.IList\"></xref>.\n  remarks: \"<xref:System.Collections.ArrayList.Adapter%2A> does not copy the contents of <xref:System.Collections.IList>. Instead, it only creates an <xref:System.Collections.ArrayList> wrapper around <xref:System.Collections.IList>; therefore, changes to the <xref:System.Collections.IList> also affect the <xref:System.Collections.ArrayList>.  \\n  \\n The <xref:System.Collections.ArrayList> class provides generic <xref:System.Collections.ArrayList.Reverse%2A>, <xref:System.Collections.ArrayList.BinarySearch%2A> and <xref:System.Collections.ArrayList.Sort%2A> methods. This wrapper can be a means to use those methods on <xref:System.Collections.IList>; however, performing these generic operations through the wrapper might be less efficient than operations applied directly on the <xref:System.Collections.IList>.  \\n  \\n This method is an O(1) operation.  \\n  \\n## Version Compatibility  \\n In the .NET Framework version 1.0 and 1.1, calling the <xref:System.Collections.ArrayList.GetEnumerator%28System.Int32%2CSystem.Int32%29> method overload on the <xref:System.Collections.ArrayList> wrapper returned an enumerator that treated the second argument as an upper bound rather than as a count. In the [!INCLUDE[dnprdnlong](~/includes/dnprdnlong-md.md)] the second argument is correctly treated as a count.\"\n  syntax:\n    content: public static System.Collections.ArrayList Adapter (System.Collections.IList list);\n    parameters:\n    - id: list\n      type: System.Collections.IList\n      description: The <xref href=\"System.Collections.IList\"></xref> to wrap.\n    return:\n      type: System.Collections.ArrayList\n      description: The <xref href=\"System.Collections.ArrayList\"></xref> wrapper around the <xref href=\"System.Collections.IList\"></xref>.\n  overload: System.Collections.ArrayList.Adapter*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>list</code> is `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections/ArrayList.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.ArrayList.Add(System.Object)\n  commentId: M:System.Collections.ArrayList.Add(System.Object)\n  id: Add(System.Object)\n  parent: System.Collections.ArrayList\n  langs:\n  - csharp\n  name: Add(Object)\n  nameWithType: ArrayList.Add(Object)\n  fullName: ArrayList.Add(Object)\n  type: Method\n  assemblies:\n  - System.Collections.NonGeneric\n  - mscorlib\n  - netstandard\n  - System.Runtime.Extensions\n  namespace: System.Collections\n  summary: Adds an object to the end of the <xref href=\"System.Collections.ArrayList\"></xref>.\n  remarks: \"<xref:System.Collections.ArrayList> accepts `null` as a valid value and allows duplicate elements.  \\n  \\n If <xref:System.Collections.ArrayList.Count%2A> already equals <xref:System.Collections.ArrayList.Capacity%2A>, the capacity of the <xref:System.Collections.ArrayList> is increased by automatically reallocating the internal array, and the existing elements are copied to the new array before the new element is added.  \\n  \\n If <xref:System.Collections.ArrayList.Count%2A> is less than <xref:System.Collections.ArrayList.Capacity%2A>, this method is an O(1) operation. If the capacity needs to be increased to accommodate the new element, this method becomes an O(`n`) operation, where `n` is <xref:System.Collections.ArrayList.Count%2A>.\"\n  example:\n  - \"The following code example shows how to add elements to the <xref:System.Collections.ArrayList>.  \\n  \\n [!code-cpp[Classic ArrayList.Add Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic ArrayList.Add Example/CPP/source.cpp#1)]\\n [!code-csharp[Classic ArrayList.Add Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic ArrayList.Add Example/CS/source.cs#1)]\\n [!code-vb[Classic ArrayList.Add Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic ArrayList.Add Example/VB/source.vb#1)]\"\n  syntax:\n    content: public virtual int Add (object value);\n    parameters:\n    - id: value\n      type: System.Object\n      description: The <xref href=\"System.Object\"></xref> to be added to the end of the <xref href=\"System.Collections.ArrayList\"></xref>. The value can be `null`.\n    return:\n      type: System.Int32\n      description: The <xref href=\"System.Collections.ArrayList\"></xref> index at which the <code>value</code> has been added.\n  overload: System.Collections.ArrayList.Add*\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: \"The <xref href=\\\"System.Collections.ArrayList\\\"></xref> is read-only.  \\n  \\n -or-  \\n  \\n The <xref href=\\\"System.Collections.ArrayList\\\"></xref> has a fixed size.\"\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections/ArrayList.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.ArrayList.AddRange(System.Collections.ICollection)\n  commentId: M:System.Collections.ArrayList.AddRange(System.Collections.ICollection)\n  id: AddRange(System.Collections.ICollection)\n  parent: System.Collections.ArrayList\n  langs:\n  - csharp\n  name: AddRange(ICollection)\n  nameWithType: ArrayList.AddRange(ICollection)\n  fullName: ArrayList.AddRange(ICollection)\n  type: Method\n  assemblies:\n  - System.Collections.NonGeneric\n  - mscorlib\n  - netstandard\n  - System.Runtime.Extensions\n  namespace: System.Collections\n  summary: Adds the elements of an <xref href=\"System.Collections.ICollection\"></xref> to the end of the <xref href=\"System.Collections.ArrayList\"></xref>.\n  remarks: \"<xref:System.Collections.ArrayList> accepts `null` as a valid value and allows duplicate elements.  \\n  \\n The order of the elements in the <xref:System.Collections.ICollection> is preserved in the <xref:System.Collections.ArrayList>.  \\n  \\n If the new <xref:System.Collections.ArrayList.Count%2A> (the current <xref:System.Collections.ArrayList.Count%2A> plus the size of the collection) will be greater than <xref:System.Collections.ArrayList.Capacity%2A>, the capacity of the <xref:System.Collections.ArrayList> is increased by automatically reallocating the internal array to accommodate the new elements, and the existing elements are copied to the new array before the new elements are added.  \\n  \\n If the <xref:System.Collections.ArrayList> can accommodate the new elements without increasing the <xref:System.Collections.ArrayList.Capacity%2A>, this method is an O(`n`) operation, where `n` is the number of elements to be added. If the capacity needs to be increased to accommodate the new elements, this method becomes an O(`n` + `m`) operation, where `n` is the number of elements to be added and `m` is <xref:System.Collections.ArrayList.Count%2A>.\"\n  example:\n  - \"The following code example shows how to add elements to the <xref:System.Collections.ArrayList>.  \\n  \\n [!code-cpp[Classic ArrayList.Add Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic ArrayList.Add Example/CPP/source.cpp#1)]\\n [!code-csharp[Classic ArrayList.Add Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic ArrayList.Add Example/CS/source.cs#1)]\\n [!code-vb[Classic ArrayList.Add Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic ArrayList.Add Example/VB/source.vb#1)]\"\n  syntax:\n    content: public virtual void AddRange (System.Collections.ICollection c);\n    parameters:\n    - id: c\n      type: System.Collections.ICollection\n      description: The <xref href=\"System.Collections.ICollection\"></xref> whose elements should be added to the end of the <xref href=\"System.Collections.ArrayList\"></xref>. The collection itself cannot be `null`, but it can contain elements that are `null`.\n  overload: System.Collections.ArrayList.AddRange*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>c</code> is `null`.\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: \"The <xref href=\\\"System.Collections.ArrayList\\\"></xref> is read-only.  \\n  \\n -or-  \\n  \\n The <xref href=\\\"System.Collections.ArrayList\\\"></xref> has a fixed size.\"\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections/ArrayList.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.ArrayList.BinarySearch(System.Object)\n  commentId: M:System.Collections.ArrayList.BinarySearch(System.Object)\n  id: BinarySearch(System.Object)\n  parent: System.Collections.ArrayList\n  langs:\n  - csharp\n  name: BinarySearch(Object)\n  nameWithType: ArrayList.BinarySearch(Object)\n  fullName: ArrayList.BinarySearch(Object)\n  type: Method\n  assemblies:\n  - System.Collections.NonGeneric\n  - mscorlib\n  - netstandard\n  - System.Runtime.Extensions\n  namespace: System.Collections\n  summary: Searches the entire sorted <xref href=\"System.Collections.ArrayList\"></xref> for an element using the default comparer and returns the zero-based index of the element.\n  remarks: \"The `value` parameter and each element of the <xref:System.Collections.ArrayList> must implement the <xref:System.IComparable> interface, which is used for comparisons. The elements of the <xref:System.Collections.ArrayList> must already be sorted in increasing value according to the sort order defined by the <xref:System.IComparable> implementation; otherwise, the result might be incorrect.  \\n  \\n Comparing `null` with any type is allowed and does not generate an exception when using <xref:System.IComparable>. When sorting, `null` is considered to be less than any other object.  \\n  \\n If the <xref:System.Collections.ArrayList> contains more than one element with the same value, the method returns only one of the occurrences, and it might return any one of the occurrences, not necessarily the first one.  \\n  \\n If the <xref:System.Collections.ArrayList> does not contain the specified value, the method returns a negative integer. You can apply the bitwise complement operation (~) to this negative integer to get the index of the first element that is larger than the search value. When inserting the value into the <xref:System.Collections.ArrayList>, this index should be used as the insertion point to maintain the sort order.  \\n  \\n This method is an O(log `n`) operation, where `n` is <xref:System.Collections.ArrayList.Count%2A>.\"\n  example:\n  - \"The following code example shows how to use <xref:System.Collections.ArrayList.BinarySearch%2A> to locate a specific object in the <xref:System.Collections.ArrayList>.  \\n  \\n [!code-cpp[Classic ArrayList.BinarySearch1 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic ArrayList.BinarySearch1 Example/CPP/source.cpp#1)]\\n [!code-csharp[Classic ArrayList.BinarySearch1 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic ArrayList.BinarySearch1 Example/CS/source.cs#1)]\\n [!code-vb[Classic ArrayList.BinarySearch1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic ArrayList.BinarySearch1 Example/VB/source.vb#1)]\"\n  syntax:\n    content: public virtual int BinarySearch (object value);\n    parameters:\n    - id: value\n      type: System.Object\n      description: The <xref href=\"System.Object\"></xref> to locate. The value can be `null`.\n    return:\n      type: System.Int32\n      description: The zero-based index of <code>value</code> in the sorted <xref href=\"System.Collections.ArrayList\"></xref>, if <code>value</code> is found; otherwise, a negative number, which is the bitwise complement of the index of the next element that is larger than <code>value</code> or, if there is no larger element, the bitwise complement of <xref href=\"System.Collections.ArrayList.Count\"></xref>.\n  overload: System.Collections.ArrayList.BinarySearch*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: Neither <code>value</code> nor the elements of <xref href=\"System.Collections.ArrayList\"></xref> implement the <xref href=\"System.IComparable\"></xref> interface.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: <code>value</code> is not of the same type as the elements of the <xref href=\"System.Collections.ArrayList\"></xref>.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections/ArrayList.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.ArrayList.BinarySearch(System.Object,System.Collections.IComparer)\n  commentId: M:System.Collections.ArrayList.BinarySearch(System.Object,System.Collections.IComparer)\n  id: BinarySearch(System.Object,System.Collections.IComparer)\n  parent: System.Collections.ArrayList\n  langs:\n  - csharp\n  name: BinarySearch(Object, IComparer)\n  nameWithType: ArrayList.BinarySearch(Object, IComparer)\n  fullName: ArrayList.BinarySearch(Object, IComparer)\n  type: Method\n  assemblies:\n  - System.Collections.NonGeneric\n  - mscorlib\n  - netstandard\n  - System.Runtime.Extensions\n  namespace: System.Collections\n  summary: Searches the entire sorted <xref href=\"System.Collections.ArrayList\"></xref> for an element using the specified comparer and returns the zero-based index of the element.\n  remarks: \"The comparer customizes how the elements are compared. For example, you can use a <xref:System.Collections.CaseInsensitiveComparer> instance as the comparer to perform case-insensitive string searches.  \\n  \\n If `comparer` is provided, the elements of the <xref:System.Collections.ArrayList> are compared to the specified value using the specified <xref:System.Collections.IComparer> implementation. The elements of the <xref:System.Collections.ArrayList> must already be sorted in increasing value according to the sort order defined by `comparer`; otherwise, the result might be incorrect.  \\n  \\n If `comparer` is `null`, the comparison is done using the <xref:System.IComparable> implementation provided by the element itself or by the specified value. The elements of the <xref:System.Collections.ArrayList> must already be sorted in increasing value according to the sort order defined by the <xref:System.IComparable> implementation; otherwise, the result might be incorrect.  \\n  \\n Comparing `null` with any type is allowed and does not generate an exception when using <xref:System.IComparable>. When sorting, `null` is considered to be less than any other object.  \\n  \\n If the <xref:System.Collections.ArrayList> contains more than one element with the same value, the method returns only one of the occurrences, and it might return any one of the occurrences, not necessarily the first one.  \\n  \\n If the <xref:System.Collections.ArrayList> does not contain the specified value, the method returns a negative integer. You can apply the bitwise complement operation (~) to this negative integer to get the index of the first element that is larger than the search value. When inserting the value into the <xref:System.Collections.ArrayList>, this index should be used as the insertion point to maintain the sort order.  \\n  \\n This method is an O(log `n`) operation, where `n` is <xref:System.Collections.ArrayList.Count%2A>.\"\n  example:\n  - \"The following example creates an <xref:System.Collections.ArrayList> of colored animals. The provided <xref:System.Collections.IComparer> performs the string comparison for the binary search. The results of both an iterative search and a binary search are displayed.  \\n  \\n [!code-cpp[Classic ArrayList.BinarySearch1 Example#2](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic ArrayList.BinarySearch1 Example/CPP/source2.cpp#2)]\\n [!code-csharp[Classic ArrayList.BinarySearch1 Example#2](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic ArrayList.BinarySearch1 Example/CS/source2.cs#2)]\\n [!code-vb[Classic ArrayList.BinarySearch1 Example#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic ArrayList.BinarySearch1 Example/VB/source2.vb#2)]\"\n  syntax:\n    content: public virtual int BinarySearch (object value, System.Collections.IComparer comparer);\n    parameters:\n    - id: value\n      type: System.Object\n      description: The <xref href=\"System.Object\"></xref> to locate. The value can be `null`.\n    - id: comparer\n      type: System.Collections.IComparer\n      description: \"The <xref href=\\\"System.Collections.IComparer\\\"></xref> implementation to use when comparing elements.  \\n  \\n -or-  \\n  \\n `null` to use the default comparer that is the <xref href=\\\"System.IComparable\\\"></xref> implementation of each element.\"\n    return:\n      type: System.Int32\n      description: The zero-based index of <code>value</code> in the sorted <xref href=\"System.Collections.ArrayList\"></xref>, if <code>value</code> is found; otherwise, a negative number, which is the bitwise complement of the index of the next element that is larger than <code>value</code> or, if there is no larger element, the bitwise complement of <xref href=\"System.Collections.ArrayList.Count\"></xref>.\n  overload: System.Collections.ArrayList.BinarySearch*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>comparer</code> is `null` and neither <code>value</code> nor the elements of <xref href=\"System.Collections.ArrayList\"></xref> implement the <xref href=\"System.IComparable\"></xref> interface.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: <code>comparer</code> is `null` and <code>value</code> is not of the same type as the elements of the <xref href=\"System.Collections.ArrayList\"></xref>.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections/ArrayList.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.ArrayList.BinarySearch(System.Int32,System.Int32,System.Object,System.Collections.IComparer)\n  commentId: M:System.Collections.ArrayList.BinarySearch(System.Int32,System.Int32,System.Object,System.Collections.IComparer)\n  id: BinarySearch(System.Int32,System.Int32,System.Object,System.Collections.IComparer)\n  parent: System.Collections.ArrayList\n  langs:\n  - csharp\n  name: BinarySearch(Int32, Int32, Object, IComparer)\n  nameWithType: ArrayList.BinarySearch(Int32, Int32, Object, IComparer)\n  fullName: ArrayList.BinarySearch(Int32, Int32, Object, IComparer)\n  type: Method\n  assemblies:\n  - System.Collections.NonGeneric\n  - mscorlib\n  - netstandard\n  - System.Runtime.Extensions\n  namespace: System.Collections\n  summary: Searches a range of elements in the sorted <xref href=\"System.Collections.ArrayList\"></xref> for an element using the specified comparer and returns the zero-based index of the element.\n  remarks: \"The comparer customizes how the elements are compared. For example, you can use a <xref:System.Collections.CaseInsensitiveComparer> instance as the comparer to perform case-insensitive string searches.  \\n  \\n If `comparer` is provided, the elements of the <xref:System.Collections.ArrayList> are compared to the specified value using the specified <xref:System.Collections.IComparer> implementation. The elements of the <xref:System.Collections.ArrayList> must already be sorted in increasing value according to the sort order defined by `comparer`; otherwise, the result might be incorrect.  \\n  \\n If `comparer` is `null`, the comparison is done using the <xref:System.IComparable> implementation provided by the element itself or by the specified value. The elements of the <xref:System.Collections.ArrayList> must already be sorted in increasing value according to the sort order defined by the <xref:System.IComparable> implementation; otherwise, the result might be incorrect.  \\n  \\n Comparing `null` with any type is allowed and does not generate an exception when using <xref:System.IComparable>. When sorting, `null` is considered to be less than any other object.  \\n  \\n If the <xref:System.Collections.ArrayList> contains more than one element with the same value, the method returns only one of the occurrences, and it might return any one of the occurrences, not necessarily the first one.  \\n  \\n If the <xref:System.Collections.ArrayList> does not contain the specified value, the method returns a negative integer. You can apply the bitwise complement operation (~) to this negative integer to get the index of the first element that is larger than the search value. When inserting the value into the <xref:System.Collections.ArrayList>, this index should be used as the insertion point to maintain the sort order.  \\n  \\n This method is an O(log `n`) operation, where `n` is `count`.\"\n  syntax:\n    content: public virtual int BinarySearch (int index, int count, object value, System.Collections.IComparer comparer);\n    parameters:\n    - id: index\n      type: System.Int32\n      description: The zero-based starting index of the range to search.\n    - id: count\n      type: System.Int32\n      description: The length of the range to search.\n    - id: value\n      type: System.Object\n      description: The <xref href=\"System.Object\"></xref> to locate. The value can be `null`.\n    - id: comparer\n      type: System.Collections.IComparer\n      description: \"The <xref href=\\\"System.Collections.IComparer\\\"></xref> implementation to use when comparing elements.  \\n  \\n -or-  \\n  \\n `null` to use the default comparer that is the <xref href=\\\"System.IComparable\\\"></xref> implementation of each element.\"\n    return:\n      type: System.Int32\n      description: The zero-based index of <code>value</code> in the sorted <xref href=\"System.Collections.ArrayList\"></xref>, if <code>value</code> is found; otherwise, a negative number, which is the bitwise complement of the index of the next element that is larger than <code>value</code> or, if there is no larger element, the bitwise complement of <xref href=\"System.Collections.ArrayList.Count\"></xref>.\n  overload: System.Collections.ArrayList.BinarySearch*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"<code>index</code> and <code>count</code> do not denote a valid range in the <xref href=\\\"System.Collections.ArrayList\\\"></xref>.  \\n  \\n -or-  \\n  \\n <code>comparer</code> is `null` and neither <code>value</code> nor the elements of <xref href=\\\"System.Collections.ArrayList\\\"></xref> implement the <xref href=\\\"System.IComparable\\\"></xref> interface.\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: <code>comparer</code> is `null` and <code>value</code> is not of the same type as the elements of the <xref href=\"System.Collections.ArrayList\"></xref>.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"<code>index</code> is less than zero.  \\n  \\n -or-  \\n  \\n <code>count</code> is less than zero.\"\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections/ArrayList.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.ArrayList.Capacity\n  commentId: P:System.Collections.ArrayList.Capacity\n  id: Capacity\n  parent: System.Collections.ArrayList\n  langs:\n  - csharp\n  name: Capacity\n  nameWithType: ArrayList.Capacity\n  fullName: ArrayList.Capacity\n  type: Property\n  assemblies:\n  - System.Collections.NonGeneric\n  - mscorlib\n  - netstandard\n  - System.Runtime.Extensions\n  namespace: System.Collections\n  summary: Gets or sets the number of elements that the <xref href=\"System.Collections.ArrayList\"></xref> can contain.\n  remarks: \"<xref:System.Collections.ArrayList.Capacity%2A> is the number of elements that the <xref:System.Collections.ArrayList> can store. <xref:System.Collections.ArrayList.Count%2A> is the number of elements that are actually in the <xref:System.Collections.ArrayList>.  \\n  \\n <xref:System.Collections.ArrayList.Capacity%2A> is always greater than or equal to <xref:System.Collections.ArrayList.Count%2A>. If <xref:System.Collections.ArrayList.Count%2A> exceeds <xref:System.Collections.ArrayList.Capacity%2A> while adding elements, the capacity is automatically increased by reallocating the internal array before copying the old elements and adding the new elements.  \\n  \\n The capacity can be decreased by calling <xref:System.Collections.ArrayList.TrimToSize%2A> or by setting the <xref:System.Collections.ArrayList.Capacity%2A> property explicitly. When the value of <xref:System.Collections.ArrayList.Capacity%2A> is set explicitly, the internal array is also reallocated to accommodate the specified capacity.  \\n  \\n Retrieving the value of this property is an O(1) operation; setting the property is an O(`n`) operation, where `n` is the new capacity.\"\n  syntax:\n    content: public virtual int Capacity { get; set; }\n    return:\n      type: System.Int32\n      description: The number of elements that the <xref href=\"System.Collections.ArrayList\"></xref> can contain.\n  overload: System.Collections.ArrayList.Capacity*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <xref href=\"System.Collections.ArrayList.Capacity\"></xref> is set to a value that is less than <xref href=\"System.Collections.ArrayList.Count\"></xref>.\n  - type: System.OutOfMemoryException\n    commentId: T:System.OutOfMemoryException\n    description: There is not enough memory available on the system.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections/ArrayList.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.ArrayList.Clear\n  commentId: M:System.Collections.ArrayList.Clear\n  id: Clear\n  parent: System.Collections.ArrayList\n  langs:\n  - csharp\n  name: Clear()\n  nameWithType: ArrayList.Clear()\n  fullName: ArrayList.Clear()\n  type: Method\n  assemblies:\n  - System.Collections.NonGeneric\n  - mscorlib\n  - netstandard\n  - System.Runtime.Extensions\n  namespace: System.Collections\n  summary: Removes all elements from the <xref href=\"System.Collections.ArrayList\"></xref>.\n  remarks: \"<xref:System.Collections.ArrayList.Count%2A> is set to zero, and references to other objects from elements of the collection are also released.  \\n  \\n <xref:System.Collections.ArrayList.Capacity%2A> remains unchanged.  To reset the capacity of the <xref:System.Collections.ArrayList>, call <xref:System.Collections.ArrayList.TrimToSize%2A> or set the <xref:System.Collections.ArrayList.Capacity%2A> property directly. Trimming an empty <xref:System.Collections.ArrayList> sets the capacity of the <xref:System.Collections.ArrayList> to the default capacity.  \\n  \\n This method is an O(`n`) operation, where `n` is <xref:System.Collections.ArrayList.Count%2A>.\"\n  example:\n  - \"The following code example shows how to trim the unused portions of the <xref:System.Collections.ArrayList> and how to clear the values of the <xref:System.Collections.ArrayList>.  \\n  \\n [!code-cpp[Classic ArrayList.Clear Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic ArrayList.Clear Example/CPP/source.cpp#1)]\\n [!code-csharp[Classic ArrayList.Clear Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic ArrayList.Clear Example/CS/source.cs#1)]\\n [!code-vb[Classic ArrayList.Clear Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic ArrayList.Clear Example/VB/source.vb#1)]\"\n  syntax:\n    content: public virtual void Clear ();\n    parameters: []\n  overload: System.Collections.ArrayList.Clear*\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: \"The <xref href=\\\"System.Collections.ArrayList\\\"></xref> is read-only.  \\n  \\n -or-  \\n  \\n The <xref href=\\\"System.Collections.ArrayList\\\"></xref> has a fixed size.\"\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections/ArrayList.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.ArrayList.Clone\n  commentId: M:System.Collections.ArrayList.Clone\n  id: Clone\n  parent: System.Collections.ArrayList\n  langs:\n  - csharp\n  name: Clone()\n  nameWithType: ArrayList.Clone()\n  fullName: ArrayList.Clone()\n  type: Method\n  assemblies:\n  - System.Collections.NonGeneric\n  - mscorlib\n  - netstandard\n  - System.Runtime.Extensions\n  namespace: System.Collections\n  summary: Creates a shallow copy of the <xref href=\"System.Collections.ArrayList\"></xref>.\n  remarks: \"A shallow copy of a collection copies only the elements of the collection, whether they are reference types or value types, but it does not copy the objects that the references refer to. The references in the new collection point to the same objects that the references in the original collection point to.  \\n  \\n In contrast, a deep copy of a collection copies the elements and everything directly or indirectly referenced by the elements.  \\n  \\n This method is an O(`n`) operation, where `n` is <xref:System.Collections.ArrayList.Count%2A>.\"\n  syntax:\n    content: public virtual object Clone ();\n    parameters: []\n    return:\n      type: System.Object\n      description: A shallow copy of the <xref href=\"System.Collections.ArrayList\"></xref>.\n  overload: System.Collections.ArrayList.Clone*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections/ArrayList.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.ArrayList.Contains(System.Object)\n  commentId: M:System.Collections.ArrayList.Contains(System.Object)\n  id: Contains(System.Object)\n  parent: System.Collections.ArrayList\n  langs:\n  - csharp\n  name: Contains(Object)\n  nameWithType: ArrayList.Contains(Object)\n  fullName: ArrayList.Contains(Object)\n  type: Method\n  assemblies:\n  - System.Collections.NonGeneric\n  - mscorlib\n  - netstandard\n  - System.Runtime.Extensions\n  namespace: System.Collections\n  summary: Determines whether an element is in the <xref href=\"System.Collections.ArrayList\"></xref>.\n  remarks: \"This method performs a linear search; therefore, this method is an O(`n`) operation, where `n` is <xref:System.Collections.ArrayList.Count%2A>.  \\n  \\n This method determines equality by calling <xref:System.Object.Equals%2A?displayProperty=fullName>.  \\n  \\n Starting with the .NET Framework 2.0, this method uses the collection’s objects’ <xref:System.Object.Equals%2A> and <xref:System.IComparable.CompareTo%2A> methods on `item` to determine whether item exists. In the earlier versions of the .NET Framework, this determination was made by using the <xref:System.Object.Equals%2A> and <xref:System.IComparable.CompareTo%2A> methods of the `item` parameter on the objects in the collection.\"\n  syntax:\n    content: public virtual bool Contains (object item);\n    parameters:\n    - id: item\n      type: System.Object\n      description: The <xref href=\"System.Object\"></xref> to locate in the <xref href=\"System.Collections.ArrayList\"></xref>. The value can be `null`.\n    return:\n      type: System.Boolean\n      description: '`true` if <code>item</code> is found in the <xref href=\"System.Collections.ArrayList\"></xref>; otherwise, `false`.'\n  overload: System.Collections.ArrayList.Contains*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections/ArrayList.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.ArrayList.CopyTo(System.Array)\n  commentId: M:System.Collections.ArrayList.CopyTo(System.Array)\n  id: CopyTo(System.Array)\n  parent: System.Collections.ArrayList\n  langs:\n  - csharp\n  name: CopyTo(Array)\n  nameWithType: ArrayList.CopyTo(Array)\n  fullName: ArrayList.CopyTo(Array)\n  type: Method\n  assemblies:\n  - System.Collections.NonGeneric\n  - mscorlib\n  - netstandard\n  - System.Runtime.Extensions\n  namespace: System.Collections\n  summary: Copies the entire <xref href=\"System.Collections.ArrayList\"></xref> to a compatible one-dimensional <xref href=\"System.Array\"></xref>, starting at the beginning of the target array.\n  remarks: \"The specified array must be of a compatible type.  \\n  \\n This method uses <xref:System.Array.Copy%2A?displayProperty=fullName> to copy the elements.  \\n  \\n The elements are copied to the <xref:System.Array> in the same order in which the enumerator iterates through the <xref:System.Collections.ArrayList>.  \\n  \\n This method is an O(`n`) operation, where `n` is <xref:System.Collections.ArrayList.Count%2A>.\"\n  example:\n  - \"The following code example shows how to copy an <xref:System.Collections.ArrayList> into a one-dimensional <xref:System.Array?displayProperty=fullName>.  \\n  \\n [!code-cpp[Classic ArrayList.CopyTo Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic ArrayList.CopyTo Example/CPP/source.cpp#1)]\\n [!code-csharp[Classic ArrayList.CopyTo Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic ArrayList.CopyTo Example/CS/source.cs#1)]\\n [!code-vb[Classic ArrayList.CopyTo Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic ArrayList.CopyTo Example/VB/source.vb#1)]\"\n  syntax:\n    content: public virtual void CopyTo (Array array);\n    parameters:\n    - id: array\n      type: System.Array\n      description: The one-dimensional <xref href=\"System.Array\"></xref> that is the destination of the elements copied from <xref href=\"System.Collections.ArrayList\"></xref>. The <xref href=\"System.Array\"></xref> must have zero-based indexing.\n  overload: System.Collections.ArrayList.CopyTo*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>array</code> is `null`.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"<code>array</code> is multidimensional.  \\n  \\n -or-  \\n  \\n The number of elements in the source <xref href=\\\"System.Collections.ArrayList\\\"></xref> is greater than the number of elements that the destination <code>array</code> can contain.\"\n  - type: System.InvalidCastException\n    commentId: T:System.InvalidCastException\n    description: The type of the source <xref href=\"System.Collections.ArrayList\"></xref> cannot be cast automatically to the type of the destination <code>array</code>.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections/ArrayList.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.ArrayList.CopyTo(System.Array,System.Int32)\n  commentId: M:System.Collections.ArrayList.CopyTo(System.Array,System.Int32)\n  id: CopyTo(System.Array,System.Int32)\n  parent: System.Collections.ArrayList\n  langs:\n  - csharp\n  name: CopyTo(Array, Int32)\n  nameWithType: ArrayList.CopyTo(Array, Int32)\n  fullName: ArrayList.CopyTo(Array, Int32)\n  type: Method\n  assemblies:\n  - System.Collections.NonGeneric\n  - mscorlib\n  - netstandard\n  - System.Runtime.Extensions\n  namespace: System.Collections\n  summary: Copies the entire <xref href=\"System.Collections.ArrayList\"></xref> to a compatible one-dimensional <xref href=\"System.Array\"></xref>, starting at the specified index of the target array.\n  remarks: \"The specified array must be of a compatible type.  \\n  \\n This method uses <xref:System.Array.Copy%2A?displayProperty=fullName> to copy the elements.  \\n  \\n The elements are copied to the <xref:System.Array> in the same order in which the enumerator iterates through the <xref:System.Collections.ArrayList>.  \\n  \\n This method is an O(`n`) operation, where `n` is <xref:System.Collections.ArrayList.Count%2A>.\"\n  example:\n  - \"The following code example shows how to copy an <xref:System.Collections.ArrayList> into a one-dimensional <xref:System.Array?displayProperty=fullName>.  \\n  \\n [!code-cpp[Classic ArrayList.CopyTo1 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic ArrayList.CopyTo1 Example/CPP/source.cpp#1)]\\n [!code-csharp[Classic ArrayList.CopyTo1 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic ArrayList.CopyTo1 Example/CS/source.cs#1)]\\n [!code-vb[Classic ArrayList.CopyTo1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic ArrayList.CopyTo1 Example/VB/source.vb#1)]\"\n  syntax:\n    content: public virtual void CopyTo (Array array, int arrayIndex);\n    parameters:\n    - id: array\n      type: System.Array\n      description: The one-dimensional <xref href=\"System.Array\"></xref> that is the destination of the elements copied from <xref href=\"System.Collections.ArrayList\"></xref>. The <xref href=\"System.Array\"></xref> must have zero-based indexing.\n    - id: arrayIndex\n      type: System.Int32\n      description: The zero-based index in <code>array</code> at which copying begins.\n  overload: System.Collections.ArrayList.CopyTo*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>array</code> is `null`.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>arrayIndex</code> is less than zero.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"<code>array</code> is multidimensional.  \\n  \\n -or-  \\n  \\n The number of elements in the source <xref href=\\\"System.Collections.ArrayList\\\"></xref> is greater than the available space from <code>arrayIndex</code> to the end of the destination <code>array</code>.\"\n  - type: System.InvalidCastException\n    commentId: T:System.InvalidCastException\n    description: The type of the source <xref href=\"System.Collections.ArrayList\"></xref> cannot be cast automatically to the type of the destination <code>array</code>.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections/ArrayList.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.ArrayList.CopyTo(System.Int32,System.Array,System.Int32,System.Int32)\n  commentId: M:System.Collections.ArrayList.CopyTo(System.Int32,System.Array,System.Int32,System.Int32)\n  id: CopyTo(System.Int32,System.Array,System.Int32,System.Int32)\n  parent: System.Collections.ArrayList\n  langs:\n  - csharp\n  name: CopyTo(Int32, Array, Int32, Int32)\n  nameWithType: ArrayList.CopyTo(Int32, Array, Int32, Int32)\n  fullName: ArrayList.CopyTo(Int32, Array, Int32, Int32)\n  type: Method\n  assemblies:\n  - System.Collections.NonGeneric\n  - mscorlib\n  - netstandard\n  - System.Runtime.Extensions\n  namespace: System.Collections\n  summary: Copies a range of elements from the <xref href=\"System.Collections.ArrayList\"></xref> to a compatible one-dimensional <xref href=\"System.Array\"></xref>, starting at the specified index of the target array.\n  remarks: \"The specified array must be of a compatible type.  \\n  \\n This method uses <xref:System.Array.Copy%2A?displayProperty=fullName> to copy the elements.  \\n  \\n The elements are copied to the <xref:System.Array> in the same order in which the enumerator iterates through the <xref:System.Collections.ArrayList>.  \\n  \\n This method is an O(`n`) operation, where `n` is `count`.\"\n  example:\n  - \"The following code example shows how to copy an <xref:System.Collections.ArrayList> into a one-dimensional <xref:System.Array?displayProperty=fullName>.  \\n  \\n [!code-cpp[Classic ArrayList.CopyTo1 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic ArrayList.CopyTo1 Example/CPP/source.cpp#1)]\\n [!code-csharp[Classic ArrayList.CopyTo1 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic ArrayList.CopyTo1 Example/CS/source.cs#1)]\\n [!code-vb[Classic ArrayList.CopyTo1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic ArrayList.CopyTo1 Example/VB/source.vb#1)]\"\n  syntax:\n    content: public virtual void CopyTo (int index, Array array, int arrayIndex, int count);\n    parameters:\n    - id: index\n      type: System.Int32\n      description: The zero-based index in the source <xref href=\"System.Collections.ArrayList\"></xref> at which copying begins.\n    - id: array\n      type: System.Array\n      description: The one-dimensional <xref href=\"System.Array\"></xref> that is the destination of the elements copied from <xref href=\"System.Collections.ArrayList\"></xref>. The <xref href=\"System.Array\"></xref> must have zero-based indexing.\n    - id: arrayIndex\n      type: System.Int32\n      description: The zero-based index in <code>array</code> at which copying begins.\n    - id: count\n      type: System.Int32\n      description: The number of elements to copy.\n  overload: System.Collections.ArrayList.CopyTo*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>array</code> is `null`.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"<code>index</code> is less than zero.  \\n  \\n -or-  \\n  \\n <code>arrayIndex</code> is less than zero.  \\n  \\n -or-  \\n  \\n <code>count</code> is less than zero.\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"<code>array</code> is multidimensional.  \\n  \\n -or-  \\n  \\n <code>index</code> is equal to or greater than the <xref href=\\\"System.Collections.ArrayList.Count\\\"></xref> of the source <xref href=\\\"System.Collections.ArrayList\\\"></xref>.  \\n  \\n -or-  \\n  \\n The number of elements from <code>index</code> to the end of the source <xref href=\\\"System.Collections.ArrayList\\\"></xref> is greater than the available space from <code>arrayIndex</code> to the end of the destination <code>array</code>.\"\n  - type: System.InvalidCastException\n    commentId: T:System.InvalidCastException\n    description: The type of the source <xref href=\"System.Collections.ArrayList\"></xref> cannot be cast automatically to the type of the destination <code>array</code>.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections/ArrayList.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.ArrayList.Count\n  commentId: P:System.Collections.ArrayList.Count\n  id: Count\n  parent: System.Collections.ArrayList\n  langs:\n  - csharp\n  name: Count\n  nameWithType: ArrayList.Count\n  fullName: ArrayList.Count\n  type: Property\n  assemblies:\n  - System.Collections.NonGeneric\n  - mscorlib\n  - netstandard\n  - System.Runtime.Extensions\n  namespace: System.Collections\n  summary: Gets the number of elements actually contained in the <xref href=\"System.Collections.ArrayList\"></xref>.\n  remarks: \"<xref:System.Collections.ArrayList.Capacity%2A> is the number of elements that the <xref:System.Collections.ArrayList> can store. <xref:System.Collections.ArrayList.Count%2A> is the number of elements that are actually in the <xref:System.Collections.ArrayList>.  \\n  \\n <xref:System.Collections.ArrayList.Capacity%2A> is always greater than or equal to <xref:System.Collections.ArrayList.Count%2A>. If <xref:System.Collections.ArrayList.Count%2A> exceeds <xref:System.Collections.ArrayList.Capacity%2A> while adding elements, the capacity is automatically increased by reallocating the internal array before copying the old elements and adding the new elements.  \\n  \\n Retrieving the value of this property is an O(1) operation.\"\n  syntax:\n    content: public virtual int Count { get; }\n    return:\n      type: System.Int32\n      description: The number of elements actually contained in the <xref href=\"System.Collections.ArrayList\"></xref>.\n  overload: System.Collections.ArrayList.Count*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections/ArrayList.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.ArrayList.FixedSize(System.Collections.ArrayList)\n  commentId: M:System.Collections.ArrayList.FixedSize(System.Collections.ArrayList)\n  id: FixedSize(System.Collections.ArrayList)\n  parent: System.Collections.ArrayList\n  langs:\n  - csharp\n  name: FixedSize(ArrayList)\n  nameWithType: ArrayList.FixedSize(ArrayList)\n  fullName: ArrayList.FixedSize(ArrayList)\n  type: Method\n  assemblies:\n  - System.Collections.NonGeneric\n  - mscorlib\n  - netstandard\n  - System.Runtime.Extensions\n  namespace: System.Collections\n  summary: Returns an <xref href=\"System.Collections.ArrayList\"></xref> wrapper with a fixed size.\n  remarks: \"This wrapper can be used to prevent additions to and deletions from the original <xref:System.Collections.ArrayList>. The elements can still be modified or replaced.  \\n  \\n A collection with a fixed size is simply a collection with a wrapper that prevents adding and removing elements; therefore, if changes are made to the underlying collection, including the addition or removal of elements, the fixed-size collection reflects those changes.  \\n  \\n This method is an O(1) operation.\"\n  example:\n  - \"The following code example shows how to create a fixed-size wrapper around an <xref:System.Collections.ArrayList>.  \\n  \\n [!code-cpp[Classic ArrayList.IsFixedSize Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic ArrayList.IsFixedSize Example/CPP/source.cpp#1)]\\n [!code-csharp[Classic ArrayList.IsFixedSize Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic ArrayList.IsFixedSize Example/CS/source.cs#1)]\\n [!code-vb[Classic ArrayList.IsFixedSize Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic ArrayList.IsFixedSize Example/VB/source.vb#1)]\"\n  syntax:\n    content: public static System.Collections.ArrayList FixedSize (System.Collections.ArrayList list);\n    parameters:\n    - id: list\n      type: System.Collections.ArrayList\n      description: The <xref href=\"System.Collections.ArrayList\"></xref> to wrap.\n    return:\n      type: System.Collections.ArrayList\n      description: An <xref href=\"System.Collections.ArrayList\"></xref> wrapper with a fixed size.\n  overload: System.Collections.ArrayList.FixedSize*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>list</code> is `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections/ArrayList.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.ArrayList.FixedSize(System.Collections.IList)\n  commentId: M:System.Collections.ArrayList.FixedSize(System.Collections.IList)\n  id: FixedSize(System.Collections.IList)\n  parent: System.Collections.ArrayList\n  langs:\n  - csharp\n  name: FixedSize(IList)\n  nameWithType: ArrayList.FixedSize(IList)\n  fullName: ArrayList.FixedSize(IList)\n  type: Method\n  assemblies:\n  - System.Collections.NonGeneric\n  - mscorlib\n  - netstandard\n  - System.Runtime.Extensions\n  namespace: System.Collections\n  summary: Returns an <xref href=\"System.Collections.IList\"></xref> wrapper with a fixed size.\n  remarks: \"This wrapper can be used to prevent additions to and deletions from the original <xref:System.Collections.IList>. The elements can still be modified or replaced.  \\n  \\n A collection with a fixed size is simply a collection with a wrapper that prevents adding and removing elements; therefore, if changes are made to the underlying collection, including the addition or removal of elements, the fixed-size collection reflects those changes.  \\n  \\n This method is an O(1) operation.\"\n  syntax:\n    content: public static System.Collections.IList FixedSize (System.Collections.IList list);\n    parameters:\n    - id: list\n      type: System.Collections.IList\n      description: The <xref href=\"System.Collections.IList\"></xref> to wrap.\n    return:\n      type: System.Collections.IList\n      description: An <xref href=\"System.Collections.IList\"></xref> wrapper with a fixed size.\n  overload: System.Collections.ArrayList.FixedSize*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>list</code> is `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections/ArrayList.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.ArrayList.GetEnumerator\n  commentId: M:System.Collections.ArrayList.GetEnumerator\n  id: GetEnumerator\n  parent: System.Collections.ArrayList\n  langs:\n  - csharp\n  name: GetEnumerator()\n  nameWithType: ArrayList.GetEnumerator()\n  fullName: ArrayList.GetEnumerator()\n  type: Method\n  assemblies:\n  - System.Collections.NonGeneric\n  - mscorlib\n  - netstandard\n  - System.Runtime.Extensions\n  namespace: System.Collections\n  summary: Returns an enumerator for the entire <xref href=\"System.Collections.ArrayList\"></xref>.\n  remarks: \"The `foreach` statement of the C# language (`for each` in Visual Basic) hides the complexity of the enumerators.  Therefore, using `foreach` is recommended, instead of directly manipulating the enumerator.  \\n  \\n Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.  \\n  \\n Initially, the enumerator is positioned before the first element in the collection. <xref:System.Collections.IEnumerator.Reset%2A> also brings the enumerator back to this position.  At this position, <xref:System.Collections.IEnumerator.Current%2A> is undefined. Therefore, you must call <xref:System.Collections.IEnumerator.MoveNext%2A> to advance the enumerator to the first element of the collection before reading the value of <xref:System.Collections.IEnumerator.Current%2A>.  \\n  \\n <xref:System.Collections.IEnumerator.Current%2A> returns the same object until either <xref:System.Collections.IEnumerator.MoveNext%2A> or <xref:System.Collections.IEnumerator.Reset%2A> is called. <xref:System.Collections.IEnumerator.MoveNext%2A> sets <xref:System.Collections.IEnumerator.Current%2A> to the next element.  \\n  \\n If <xref:System.Collections.IEnumerator.MoveNext%2A> passes the end of the collection, the enumerator is positioned after the last element in the collection and <xref:System.Collections.IEnumerator.MoveNext%2A> returns `false`. When the enumerator is at this position, subsequent calls to <xref:System.Collections.IEnumerator.MoveNext%2A> also return `false`. If the last call to <xref:System.Collections.IEnumerator.MoveNext%2A> returned `false`, <xref:System.Collections.IEnumerator.Current%2A> is undefined. To set <xref:System.Collections.IEnumerator.Current%2A> to the first element of the collection again, you can call <xref:System.Collections.IEnumerator.Reset%2A> followed by <xref:System.Collections.IEnumerator.MoveNext%2A>.  \\n  \\n An enumerator remains valid as long as the collection remains unchanged. If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and its behavior is undefined.  \\n  \\n The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure.  To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.  To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.  \\n  \\n This method is an O(1) operation.\"\n  example:\n  - \"The following example gets the enumerator for an <xref:System.Collections.ArrayList>, and the enumerator for a range of elements in the <xref:System.Collections.ArrayList>.  \\n  \\n [!code-csharp[Collections.ArrayList.GetEnumerator#1](~/samples/snippets/csharp/VS_Snippets_CLR/collections.arraylist.getenumerator/cs/program.cs#1)]\\n [!code-vb[Collections.ArrayList.GetEnumerator#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/collections.arraylist.getenumerator/vb/program.vb#1)]\"\n  syntax:\n    content: public virtual System.Collections.IEnumerator GetEnumerator ();\n    parameters: []\n    return:\n      type: System.Collections.IEnumerator\n      description: An <xref href=\"System.Collections.IEnumerator\"></xref> for the entire <xref href=\"System.Collections.ArrayList\"></xref>.\n  overload: System.Collections.ArrayList.GetEnumerator*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections/ArrayList.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.ArrayList.GetEnumerator(System.Int32,System.Int32)\n  commentId: M:System.Collections.ArrayList.GetEnumerator(System.Int32,System.Int32)\n  id: GetEnumerator(System.Int32,System.Int32)\n  parent: System.Collections.ArrayList\n  langs:\n  - csharp\n  name: GetEnumerator(Int32, Int32)\n  nameWithType: ArrayList.GetEnumerator(Int32, Int32)\n  fullName: ArrayList.GetEnumerator(Int32, Int32)\n  type: Method\n  assemblies:\n  - System.Collections.NonGeneric\n  - mscorlib\n  - netstandard\n  - System.Runtime.Extensions\n  namespace: System.Collections\n  summary: Returns an enumerator for a range of elements in the <xref href=\"System.Collections.ArrayList\"></xref>.\n  remarks: \"The `foreach` statement of the C# language (`for each` in Visual C++, `For Each` Visual Basic) hides the complexity of the enumerators.  Therefore, using `foreach` is recommended, instead of directly manipulating the enumerator.  \\n  \\n Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.  \\n  \\n Initially, the enumerator is positioned before the first element in the collection. <xref:System.Collections.IEnumerator.Reset%2A> also brings the enumerator back to this position.  At this position, <xref:System.Collections.IEnumerator.Current%2A> is undefined. Therefore, you must call <xref:System.Collections.IEnumerator.MoveNext%2A> to advance the enumerator to the first element of the collection before reading the value of <xref:System.Collections.IEnumerator.Current%2A>.  \\n  \\n <xref:System.Collections.IEnumerator.Current%2A> returns the same object until either <xref:System.Collections.IEnumerator.MoveNext%2A> or <xref:System.Collections.IEnumerator.Reset%2A> is called. <xref:System.Collections.IEnumerator.MoveNext%2A> sets <xref:System.Collections.IEnumerator.Current%2A> to the next element.  \\n  \\n If <xref:System.Collections.IEnumerator.MoveNext%2A> passes the end of the collection, the enumerator is positioned after the last element in the collection and <xref:System.Collections.IEnumerator.MoveNext%2A> returns `false`. When the enumerator is at this position, subsequent calls to <xref:System.Collections.IEnumerator.MoveNext%2A> also return `false`. If the last call to <xref:System.Collections.IEnumerator.MoveNext%2A> returned `false`, <xref:System.Collections.IEnumerator.Current%2A> is undefined. To set <xref:System.Collections.IEnumerator.Current%2A> to the first element of the collection again, you can call <xref:System.Collections.IEnumerator.Reset%2A> followed by <xref:System.Collections.IEnumerator.MoveNext%2A>.  \\n  \\n An enumerator remains valid as long as the collection remains unchanged. If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and its behavior is undefined.  \\n  \\n The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure.  To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.  To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.  \\n  \\n This method is an O(1) operation.  \\n  \\n## Version Compatibility  \\n In the .NET Framework versions 1.0 and 1.1, the enumerator for an <xref:System.Collections.ArrayList> wrapper returned by the <xref:System.Collections.ArrayList.Adapter%2A> method treated the second argument as an upper bound rather than as a count. In the [!INCLUDE[dnprdnlong](~/includes/dnprdnlong-md.md)] the second argument is correctly treated as a count.\"\n  example:\n  - \"The following example gets the enumerator for an <xref:System.Collections.ArrayList>, and the enumerator for a range of elements in the <xref:System.Collections.ArrayList>.  \\n  \\n [!code-csharp[Collections.ArrayList.GetEnumerator#1](~/samples/snippets/csharp/VS_Snippets_CLR/collections.arraylist.getenumerator/cs/program.cs#1)]\\n [!code-vb[Collections.ArrayList.GetEnumerator#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/collections.arraylist.getenumerator/vb/program.vb#1)]\"\n  syntax:\n    content: public virtual System.Collections.IEnumerator GetEnumerator (int index, int count);\n    parameters:\n    - id: index\n      type: System.Int32\n      description: The zero-based starting index of the <xref href=\"System.Collections.ArrayList\"></xref> section that the enumerator should refer to.\n    - id: count\n      type: System.Int32\n      description: The number of elements in the <xref href=\"System.Collections.ArrayList\"></xref> section that the enumerator should refer to.\n    return:\n      type: System.Collections.IEnumerator\n      description: An <xref href=\"System.Collections.IEnumerator\"></xref> for the specified range of elements in the <xref href=\"System.Collections.ArrayList\"></xref>.\n  overload: System.Collections.ArrayList.GetEnumerator*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"<code>index</code> is less than zero.  \\n  \\n -or-  \\n  \\n <code>count</code> is less than zero.\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>index</code> and <code>count</code> do not specify a valid range in the <xref href=\"System.Collections.ArrayList\"></xref>.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections/ArrayList.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.ArrayList.GetRange(System.Int32,System.Int32)\n  commentId: M:System.Collections.ArrayList.GetRange(System.Int32,System.Int32)\n  id: GetRange(System.Int32,System.Int32)\n  parent: System.Collections.ArrayList\n  langs:\n  - csharp\n  name: GetRange(Int32, Int32)\n  nameWithType: ArrayList.GetRange(Int32, Int32)\n  fullName: ArrayList.GetRange(Int32, Int32)\n  type: Method\n  assemblies:\n  - System.Collections.NonGeneric\n  - mscorlib\n  - netstandard\n  - System.Runtime.Extensions\n  namespace: System.Collections\n  summary: Returns an <xref href=\"System.Collections.ArrayList\"></xref> which represents a subset of the elements in the source <xref href=\"System.Collections.ArrayList\"></xref>.\n  remarks: \"This method does not create copies of the elements. The new <xref:System.Collections.ArrayList> is only a view window into the source <xref:System.Collections.ArrayList>. However, all subsequent changes to the source <xref:System.Collections.ArrayList> must be done through this view window <xref:System.Collections.ArrayList>. If changes are made directly to the source <xref:System.Collections.ArrayList>, the view window <xref:System.Collections.ArrayList> is invalidated and any operations on it will return an <xref:System.InvalidOperationException>.  \\n  \\n This method is an O(1) operation.\"\n  example:\n  - \"The following code example shows how to set and get a range of elements in the <xref:System.Collections.ArrayList>.  \\n  \\n [!code-cpp[Classic ArrayList.SetRange Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic ArrayList.SetRange Example/CPP/source.cpp#1)]\\n [!code-csharp[Classic ArrayList.SetRange Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic ArrayList.SetRange Example/CS/source.cs#1)]\\n [!code-vb[Classic ArrayList.SetRange Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic ArrayList.SetRange Example/VB/source.vb#1)]\"\n  syntax:\n    content: public virtual System.Collections.ArrayList GetRange (int index, int count);\n    parameters:\n    - id: index\n      type: System.Int32\n      description: The zero-based <xref href=\"System.Collections.ArrayList\"></xref> index at which the range starts.\n    - id: count\n      type: System.Int32\n      description: The number of elements in the range.\n    return:\n      type: System.Collections.ArrayList\n      description: An <xref href=\"System.Collections.ArrayList\"></xref> which represents a subset of the elements in the source <xref href=\"System.Collections.ArrayList\"></xref>.\n  overload: System.Collections.ArrayList.GetRange*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"<code>index</code> is less than zero.  \\n  \\n -or-  \\n  \\n <code>count</code> is less than zero.\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>index</code> and <code>count</code> do not denote a valid range of elements in the <xref href=\"System.Collections.ArrayList\"></xref>.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections/ArrayList.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.ArrayList.IndexOf(System.Object)\n  commentId: M:System.Collections.ArrayList.IndexOf(System.Object)\n  id: IndexOf(System.Object)\n  parent: System.Collections.ArrayList\n  langs:\n  - csharp\n  name: IndexOf(Object)\n  nameWithType: ArrayList.IndexOf(Object)\n  fullName: ArrayList.IndexOf(Object)\n  type: Method\n  assemblies:\n  - System.Collections.NonGeneric\n  - mscorlib\n  - netstandard\n  - System.Runtime.Extensions\n  namespace: System.Collections\n  summary: Searches for the specified <xref href=\"System.Object\"></xref> and returns the zero-based index of the first occurrence within the entire <xref href=\"System.Collections.ArrayList\"></xref>.\n  remarks: \"The <xref:System.Collections.ArrayList> is searched forward starting at the first element and ending at the last element.  \\n  \\n This method performs a linear search; therefore, this method is an O(`n`) operation, where `n` is <xref:System.Collections.ArrayList.Count%2A>.  \\n  \\n This method determines equality by calling <xref:System.Object.Equals%2A?displayProperty=fullName>.  \\n  \\n Starting with the .NET Framework 2.0, this method uses the collection’s objects’ <xref:System.Object.Equals%2A> and <xref:System.IComparable.CompareTo%2A> methods on `item` to determine whether item exists. In the earlier versions of the .NET Framework, this determination was made by using the <xref:System.Object.Equals%2A> and <xref:System.IComparable.CompareTo%2A> methods of the `item` parameter on the objects in the collection.\"\n  example:\n  - \"The following code example shows how to determine the index of the first occurrence of a specified element.  \\n  \\n [!code-cpp[Classic ArrayList.IndexOf Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic ArrayList.IndexOf Example/CPP/source.cpp#1)]\\n [!code-csharp[Classic ArrayList.IndexOf Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic ArrayList.IndexOf Example/CS/source.cs#1)]\\n [!code-vb[Classic ArrayList.IndexOf Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic ArrayList.IndexOf Example/VB/source.vb#1)]\"\n  syntax:\n    content: public virtual int IndexOf (object value);\n    parameters:\n    - id: value\n      type: System.Object\n      description: The <xref href=\"System.Object\"></xref> to locate in the <xref href=\"System.Collections.ArrayList\"></xref>. The value can be `null`.\n    return:\n      type: System.Int32\n      description: The zero-based index of the first occurrence of <code>value</code> within the entire <xref href=\"System.Collections.ArrayList\"></xref>, if found; otherwise, -1.\n  overload: System.Collections.ArrayList.IndexOf*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections/ArrayList.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.ArrayList.IndexOf(System.Object,System.Int32)\n  commentId: M:System.Collections.ArrayList.IndexOf(System.Object,System.Int32)\n  id: IndexOf(System.Object,System.Int32)\n  parent: System.Collections.ArrayList\n  langs:\n  - csharp\n  name: IndexOf(Object, Int32)\n  nameWithType: ArrayList.IndexOf(Object, Int32)\n  fullName: ArrayList.IndexOf(Object, Int32)\n  type: Method\n  assemblies:\n  - System.Collections.NonGeneric\n  - mscorlib\n  - netstandard\n  - System.Runtime.Extensions\n  namespace: System.Collections\n  summary: Searches for the specified <xref href=\"System.Object\"></xref> and returns the zero-based index of the first occurrence within the range of elements in the <xref href=\"System.Collections.ArrayList\"></xref> that extends from the specified index to the last element.\n  remarks: \"The <xref:System.Collections.ArrayList> is searched forward starting at `startIndex` and ending at the last element.  \\n  \\n This method performs a linear search; therefore, this method is an O(`n`) operation, where `n` is the number of elements from `startIndex` to the end of the <xref:System.Collections.ArrayList>.  \\n  \\n This method determines equality by calling <xref:System.Object.Equals%2A?displayProperty=fullName>.  \\n  \\n Starting with the .NET Framework 2.0, this method uses the collection’s objects’ <xref:System.Object.Equals%2A> and <xref:System.IComparable.CompareTo%2A> methods on `item` to determine whether item exists. In the earlier versions of the .NET Framework, this determination was made by using the <xref:System.Object.Equals%2A> and <xref:System.IComparable.CompareTo%2A> methods of the `item` parameter on the objects in the collection.\"\n  example:\n  - \"The following code example shows how to determine the index of the first occurrence of a specified element.  \\n  \\n [!code-cpp[Classic ArrayList.IndexOf Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic ArrayList.IndexOf Example/CPP/source.cpp#1)]\\n [!code-csharp[Classic ArrayList.IndexOf Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic ArrayList.IndexOf Example/CS/source.cs#1)]\\n [!code-vb[Classic ArrayList.IndexOf Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic ArrayList.IndexOf Example/VB/source.vb#1)]\"\n  syntax:\n    content: public virtual int IndexOf (object value, int startIndex);\n    parameters:\n    - id: value\n      type: System.Object\n      description: The <xref href=\"System.Object\"></xref> to locate in the <xref href=\"System.Collections.ArrayList\"></xref>. The value can be `null`.\n    - id: startIndex\n      type: System.Int32\n      description: The zero-based starting index of the search. 0 (zero) is valid in an empty list.\n    return:\n      type: System.Int32\n      description: The zero-based index of the first occurrence of <code>value</code> within the range of elements in the <xref href=\"System.Collections.ArrayList\"></xref> that extends from <code>startIndex</code> to the last element, if found; otherwise, -1.\n  overload: System.Collections.ArrayList.IndexOf*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>startIndex</code> is outside the range of valid indexes for the <xref href=\"System.Collections.ArrayList\"></xref>.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections/ArrayList.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.ArrayList.IndexOf(System.Object,System.Int32,System.Int32)\n  commentId: M:System.Collections.ArrayList.IndexOf(System.Object,System.Int32,System.Int32)\n  id: IndexOf(System.Object,System.Int32,System.Int32)\n  parent: System.Collections.ArrayList\n  langs:\n  - csharp\n  name: IndexOf(Object, Int32, Int32)\n  nameWithType: ArrayList.IndexOf(Object, Int32, Int32)\n  fullName: ArrayList.IndexOf(Object, Int32, Int32)\n  type: Method\n  assemblies:\n  - System.Collections.NonGeneric\n  - mscorlib\n  - netstandard\n  - System.Runtime.Extensions\n  namespace: System.Collections\n  summary: Searches for the specified <xref href=\"System.Object\"></xref> and returns the zero-based index of the first occurrence within the range of elements in the <xref href=\"System.Collections.ArrayList\"></xref> that starts at the specified index and contains the specified number of elements.\n  remarks: \"The <xref:System.Collections.ArrayList> is searched forward starting at `startIndex` and ending at `startIndex` plus `count` minus 1, if `count` is greater than 0.  \\n  \\n This method performs a linear search; therefore, this method is an O(`n`) operation, where `n` is `count`.  \\n  \\n This method determines equality by calling <xref:System.Object.Equals%2A?displayProperty=fullName>.  \\n  \\n Starting with the .NET Framework 2.0, this method uses the collection’s objects’ <xref:System.Object.Equals%2A> and <xref:System.IComparable.CompareTo%2A> methods on `item` to determine whether item exists. In the earlier versions of the .NET Framework, this determination was made by using the <xref:System.Object.Equals%2A> and <xref:System.IComparable.CompareTo%2A> methods of the `item` parameter on the objects in the collection.\"\n  example:\n  - \"The following code example shows how to determine the index of the first occurrence of a specified element.  \\n  \\n [!code-cpp[Classic ArrayList.IndexOf Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic ArrayList.IndexOf Example/CPP/source.cpp#1)]\\n [!code-csharp[Classic ArrayList.IndexOf Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic ArrayList.IndexOf Example/CS/source.cs#1)]\\n [!code-vb[Classic ArrayList.IndexOf Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic ArrayList.IndexOf Example/VB/source.vb#1)]\"\n  syntax:\n    content: public virtual int IndexOf (object value, int startIndex, int count);\n    parameters:\n    - id: value\n      type: System.Object\n      description: The <xref href=\"System.Object\"></xref> to locate in the <xref href=\"System.Collections.ArrayList\"></xref>. The value can be `null`.\n    - id: startIndex\n      type: System.Int32\n      description: The zero-based starting index of the search. 0 (zero) is valid in an empty list.\n    - id: count\n      type: System.Int32\n      description: The number of elements in the section to search.\n    return:\n      type: System.Int32\n      description: The zero-based index of the first occurrence of <code>value</code> within the range of elements in the <xref href=\"System.Collections.ArrayList\"></xref> that starts at <code>startIndex</code> and contains <code>count</code> number of elements, if found; otherwise, -1.\n  overload: System.Collections.ArrayList.IndexOf*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"<code>startIndex</code> is outside the range of valid indexes for the <xref href=\\\"System.Collections.ArrayList\\\"></xref>.  \\n  \\n -or-  \\n  \\n <code>count</code> is less than zero.  \\n  \\n -or-  \\n  \\n <code>startIndex</code> and <code>count</code> do not specify a valid section in the <xref href=\\\"System.Collections.ArrayList\\\"></xref>.\"\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections/ArrayList.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.ArrayList.Insert(System.Int32,System.Object)\n  commentId: M:System.Collections.ArrayList.Insert(System.Int32,System.Object)\n  id: Insert(System.Int32,System.Object)\n  parent: System.Collections.ArrayList\n  langs:\n  - csharp\n  name: Insert(Int32, Object)\n  nameWithType: ArrayList.Insert(Int32, Object)\n  fullName: ArrayList.Insert(Int32, Object)\n  type: Method\n  assemblies:\n  - System.Collections.NonGeneric\n  - mscorlib\n  - netstandard\n  - System.Runtime.Extensions\n  namespace: System.Collections\n  summary: Inserts an element into the <xref href=\"System.Collections.ArrayList\"></xref> at the specified index.\n  remarks: \"<xref:System.Collections.ArrayList> accepts `null` as a valid value and allows duplicate elements.  \\n  \\n If <xref:System.Collections.ArrayList.Count%2A> already equals <xref:System.Collections.ArrayList.Capacity%2A>, the capacity of the <xref:System.Collections.ArrayList> is increased by automatically reallocating the internal array, and the existing elements are copied to the new array before the new element is added.  \\n  \\n If `index` is equal to <xref:System.Collections.ArrayList.Count%2A>, `value` is added to the end of <xref:System.Collections.ArrayList>.  \\n  \\n In collections of contiguous elements, such as lists, the elements that follow the insertion point move down to accommodate the new element. If the collection is indexed, the indexes of the elements that are moved are also updated. This behavior does not apply to collections where elements are conceptually grouped into buckets, such as a hash table.  \\n  \\n This method is an O(`n`) operation, where `n` is <xref:System.Collections.ArrayList.Count%2A>.\"\n  example:\n  - \"The following code example shows how to insert elements into the <xref:System.Collections.ArrayList>.  \\n  \\n [!code-cpp[Classic ArrayList.Insert Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic ArrayList.Insert Example/CPP/source.cpp#1)]\\n [!code-csharp[Classic ArrayList.Insert Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic ArrayList.Insert Example/CS/source.cs#1)]\\n [!code-vb[Classic ArrayList.Insert Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic ArrayList.Insert Example/VB/source.vb#1)]\"\n  syntax:\n    content: public virtual void Insert (int index, object value);\n    parameters:\n    - id: index\n      type: System.Int32\n      description: The zero-based index at which <code>value</code> should be inserted.\n    - id: value\n      type: System.Object\n      description: The <xref href=\"System.Object\"></xref> to insert. The value can be `null`.\n  overload: System.Collections.ArrayList.Insert*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"<code>index</code> is less than zero.  \\n  \\n -or-  \\n  \\n <code>index</code> is greater than <xref href=\\\"System.Collections.ArrayList.Count\\\"></xref>.\"\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: \"The <xref href=\\\"System.Collections.ArrayList\\\"></xref> is read-only.  \\n  \\n -or-  \\n  \\n The <xref href=\\\"System.Collections.ArrayList\\\"></xref> has a fixed size.\"\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections/ArrayList.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.ArrayList.InsertRange(System.Int32,System.Collections.ICollection)\n  commentId: M:System.Collections.ArrayList.InsertRange(System.Int32,System.Collections.ICollection)\n  id: InsertRange(System.Int32,System.Collections.ICollection)\n  parent: System.Collections.ArrayList\n  langs:\n  - csharp\n  name: InsertRange(Int32, ICollection)\n  nameWithType: ArrayList.InsertRange(Int32, ICollection)\n  fullName: ArrayList.InsertRange(Int32, ICollection)\n  type: Method\n  assemblies:\n  - System.Collections.NonGeneric\n  - mscorlib\n  - netstandard\n  - System.Runtime.Extensions\n  namespace: System.Collections\n  summary: Inserts the elements of a collection into the <xref href=\"System.Collections.ArrayList\"></xref> at the specified index.\n  remarks: \"<xref:System.Collections.ArrayList> accepts `null` as a valid value and allows duplicate elements.  \\n  \\n If the new <xref:System.Collections.ArrayList.Count%2A> (the current <xref:System.Collections.ArrayList.Count%2A> plus the size of the collection) will be greater than <xref:System.Collections.ArrayList.Capacity%2A>, the capacity of the <xref:System.Collections.ArrayList> is increased by automatically reallocating the internal array to accommodate the new elements, and the existing elements are copied to the new array before the new elements are added.  \\n  \\n If `index` is equal to <xref:System.Collections.ArrayList.Count%2A>, the elements are added to the end of <xref:System.Collections.ArrayList>.  \\n  \\n The order of the elements in the <xref:System.Collections.ICollection> is preserved in the <xref:System.Collections.ArrayList>.  \\n  \\n In collections of contiguous elements, such as lists, the elements that follow the insertion point move down to accommodate the new element. If the collection is indexed, the indexes of the elements that are moved are also updated. This behavior does not apply to collections where elements are conceptually grouped into buckets, such as a hash table.  \\n  \\n This method is an O(`n` + `m`) operation, where `n` is the number of elements to be added and `m` is <xref:System.Collections.ArrayList.Count%2A>.\"\n  example:\n  - \"The following code example shows how to insert elements into the <xref:System.Collections.ArrayList>.  \\n  \\n [!code-cpp[Classic ArrayList.Insert Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic ArrayList.Insert Example/CPP/source.cpp#1)]\\n [!code-csharp[Classic ArrayList.Insert Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic ArrayList.Insert Example/CS/source.cs#1)]\\n [!code-vb[Classic ArrayList.Insert Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic ArrayList.Insert Example/VB/source.vb#1)]\"\n  syntax:\n    content: public virtual void InsertRange (int index, System.Collections.ICollection c);\n    parameters:\n    - id: index\n      type: System.Int32\n      description: The zero-based index at which the new elements should be inserted.\n    - id: c\n      type: System.Collections.ICollection\n      description: The <xref href=\"System.Collections.ICollection\"></xref> whose elements should be inserted into the <xref href=\"System.Collections.ArrayList\"></xref>. The collection itself cannot be `null`, but it can contain elements that are `null`.\n  overload: System.Collections.ArrayList.InsertRange*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>c</code> is `null`.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"<code>index</code> is less than zero.  \\n  \\n -or-  \\n  \\n <code>index</code> is greater than <xref href=\\\"System.Collections.ArrayList.Count\\\"></xref>.\"\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: \"The <xref href=\\\"System.Collections.ArrayList\\\"></xref> is read-only.  \\n  \\n -or-  \\n  \\n The <xref href=\\\"System.Collections.ArrayList\\\"></xref> has a fixed size.\"\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections/ArrayList.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.ArrayList.IsFixedSize\n  commentId: P:System.Collections.ArrayList.IsFixedSize\n  id: IsFixedSize\n  parent: System.Collections.ArrayList\n  langs:\n  - csharp\n  name: IsFixedSize\n  nameWithType: ArrayList.IsFixedSize\n  fullName: ArrayList.IsFixedSize\n  type: Property\n  assemblies:\n  - System.Collections.NonGeneric\n  - mscorlib\n  - netstandard\n  - System.Runtime.Extensions\n  namespace: System.Collections\n  summary: Gets a value indicating whether the <xref href=\"System.Collections.ArrayList\"></xref> has a fixed size.\n  remarks: \"A collection with a fixed size does not allow the addition or removal of elements after the collection is created, but it allows the modification of existing elements.  \\n  \\n A collection with a fixed size is simply a collection with a wrapper that prevents adding and removing elements; therefore, if changes are made to the underlying collection, including the addition or removal of elements, the fixed-size collection reflects those changes.  \\n  \\n Retrieving the value of this property is an O(1) operation.\"\n  example:\n  - \"The following code example shows how to create a fixed-size wrapper around an <xref:System.Collections.ArrayList>.  \\n  \\n [!code-cpp[Classic ArrayList.IsFixedSize Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic ArrayList.IsFixedSize Example/CPP/source.cpp#1)]\\n [!code-csharp[Classic ArrayList.IsFixedSize Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic ArrayList.IsFixedSize Example/CS/source.cs#1)]\\n [!code-vb[Classic ArrayList.IsFixedSize Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic ArrayList.IsFixedSize Example/VB/source.vb#1)]\"\n  syntax:\n    content: public virtual bool IsFixedSize { get; }\n    return:\n      type: System.Boolean\n      description: '`true` if the <xref href=\"System.Collections.ArrayList\"></xref> has a fixed size; otherwise, `false`. The default is `false`.'\n  overload: System.Collections.ArrayList.IsFixedSize*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections/ArrayList.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.ArrayList.IsReadOnly\n  commentId: P:System.Collections.ArrayList.IsReadOnly\n  id: IsReadOnly\n  parent: System.Collections.ArrayList\n  langs:\n  - csharp\n  name: IsReadOnly\n  nameWithType: ArrayList.IsReadOnly\n  fullName: ArrayList.IsReadOnly\n  type: Property\n  assemblies:\n  - System.Collections.NonGeneric\n  - mscorlib\n  - netstandard\n  - System.Runtime.Extensions\n  namespace: System.Collections\n  summary: Gets a value indicating whether the <xref href=\"System.Collections.ArrayList\"></xref> is read-only.\n  remarks: \"A collection that is read-only does not allow the addition, removal, or modification of elements after the collection is created.  \\n  \\n A collection that is read-only is simply a collection with a wrapper that prevents modifying the collection; therefore, if changes are made to the underlying collection, the read-only collection reflects those changes.  \\n  \\n Retrieving the value of this property is an O(1) operation.\"\n  example:\n  - \"The following code example shows how to create a read-only wrapper around an <xref:System.Collections.ArrayList> and how to determine if an <xref:System.Collections.ArrayList> is read-only.  \\n  \\n [!code-cpp[Classic ArrayList.ReadOnly1 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic ArrayList.ReadOnly1 Example/CPP/source.cpp#1)]\\n [!code-csharp[Classic ArrayList.ReadOnly1 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic ArrayList.ReadOnly1 Example/CS/source.cs#1)]\\n [!code-vb[Classic ArrayList.ReadOnly1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic ArrayList.ReadOnly1 Example/VB/source.vb#1)]\"\n  syntax:\n    content: public virtual bool IsReadOnly { get; }\n    return:\n      type: System.Boolean\n      description: '`true` if the <xref href=\"System.Collections.ArrayList\"></xref> is read-only; otherwise, `false`. The default is `false`.'\n  overload: System.Collections.ArrayList.IsReadOnly*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections/ArrayList.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.ArrayList.IsSynchronized\n  commentId: P:System.Collections.ArrayList.IsSynchronized\n  id: IsSynchronized\n  parent: System.Collections.ArrayList\n  langs:\n  - csharp\n  name: IsSynchronized\n  nameWithType: ArrayList.IsSynchronized\n  fullName: ArrayList.IsSynchronized\n  type: Property\n  assemblies:\n  - System.Collections.NonGeneric\n  - mscorlib\n  - netstandard\n  - System.Runtime.Extensions\n  namespace: System.Collections\n  summary: Gets a value indicating whether access to the <xref href=\"System.Collections.ArrayList\"></xref> is synchronized (thread safe).\n  remarks: \"To guarantee the thread safety of the <xref:System.Collections.ArrayList>, all operations must be done through the wrapper returned by the <xref:System.Collections.ArrayList.Synchronized%2A> method.  \\n  \\n Enumerating through a collection is intrinsically not a thread-safe procedure. Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception. To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.\"\n  example:\n  - \"The following code example shows how to lock the collection using the <xref:System.Collections.ArrayList.SyncRoot%2A> during the entire enumeration.  \\n  \\n [!code-cpp[Classic ArrayList.IsSynchronized Example#2](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic ArrayList.IsSynchronized Example/CPP/source2.cpp#2)]\\n [!code-csharp[Classic ArrayList.IsSynchronized Example#2](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic ArrayList.IsSynchronized Example/CS/source2.cs#2)]\\n [!code-vb[Classic ArrayList.IsSynchronized Example#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic ArrayList.IsSynchronized Example/VB/source2.vb#2)]  \\n  \\n Retrieving the value of this property is an O(1) operation.  \\n  \\n The following code example shows how to synchronize an <xref:System.Collections.ArrayList>, determine if an <xref:System.Collections.ArrayList> is synchronized and use a synchronized <xref:System.Collections.ArrayList>.  \\n  \\n [!code-cpp[Classic ArrayList.IsSynchronized Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic ArrayList.IsSynchronized Example/CPP/source.cpp#1)]\\n [!code-csharp[Classic ArrayList.IsSynchronized Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic ArrayList.IsSynchronized Example/CS/source.cs#1)]\\n [!code-vb[Classic ArrayList.IsSynchronized Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic ArrayList.IsSynchronized Example/VB/source.vb#1)]\"\n  syntax:\n    content: public virtual bool IsSynchronized { get; }\n    return:\n      type: System.Boolean\n      description: '`true` if access to the <xref href=\"System.Collections.ArrayList\"></xref> is synchronized (thread safe); otherwise, `false`. The default is `false`.'\n  overload: System.Collections.ArrayList.IsSynchronized*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections/ArrayList.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.ArrayList.Item(System.Int32)\n  commentId: P:System.Collections.ArrayList.Item(System.Int32)\n  id: Item(System.Int32)\n  parent: System.Collections.ArrayList\n  langs:\n  - csharp\n  name: Item(Int32)\n  nameWithType: ArrayList.Item(Int32)\n  fullName: ArrayList.Item(Int32)\n  type: Property\n  assemblies:\n  - System.Collections.NonGeneric\n  - mscorlib\n  - netstandard\n  - System.Runtime.Extensions\n  namespace: System.Collections\n  summary: Gets or sets the element at the specified index.\n  remarks: \"The <xref:System.Collections.ArrayList.Item%2A> returns an <xref:System.Object>, so you may need to cast the returned value to the original type in order to manipulate it. It is important to note that <xref:System.Collections.ArrayList> is not a strongly-typed collection. For a strongly-typed alternative, see <xref:System.Collections.Generic.List%601>.  \\n  \\n <xref:System.Collections.ArrayList> accepts `null` as a valid value and allows duplicate elements.  \\n  \\n This property provides the ability to access a specific element in the collection by using the following syntax: `myCollection[index]`.  \\n  \\n The C# language uses the  keyword to define the indexers instead of implementing the <xref:System.Collections.ArrayList.Item%2A> property. Visual Basic implements <xref:System.Collections.ArrayList.Item%2A> as a default property, which provides the same indexing functionality.  \\n  \\n Retrieving the value of this property is an O(1) operation; setting the property is also an O(1) operation.\"\n  example:\n  - \"The following code example creates an <xref:System.Collections.ArrayList> and adds several items. The example demonstrates accessing elements with the <xref:System.Collections.ArrayList.Item%2A> property (the indexer in C#), and changing an element by assigning a new value to the <xref:System.Collections.ArrayList.Item%2A> property for a specified index. The example also shows that the <xref:System.Collections.ArrayList.Item%2A> property cannot be used to access or add elements outside the current size of the list.  \\n  \\n [!code-cpp[System.Collections.ArrayList.Item#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Collections.ArrayList.Item/cpp/source.cpp#1)]\\n [!code-csharp[System.Collections.ArrayList.Item#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Collections.ArrayList.Item/CS/source.cs#1)]\\n [!code-vb[System.Collections.ArrayList.Item#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Collections.ArrayList.Item/VB/source.vb#1)]  \\n  \\n The following example uses the <xref:System.Collections.ArrayList.Item%2A> property explicitly to assign values to items in the list. The example defines a class that inherits an <xref:System.Collections.ArrayList> and adds a method to scramble the list items.  \\n  \\n [!code-cpp[System.Collections.ArrayList.Item#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Collections.ArrayList.Item/cpp/source2.cpp#2)]\\n [!code-csharp[System.Collections.ArrayList.Item#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Collections.ArrayList.Item/CS/source2.cs#2)]\\n [!code-vb[System.Collections.ArrayList.Item#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Collections.ArrayList.Item/VB/source2.vb#2)]\"\n  syntax:\n    content: public virtual object this[int index] { get; set; }\n    parameters:\n    - id: index\n      type: System.Int32\n      description: The zero-based index of the element to get or set.\n    return:\n      type: System.Object\n      description: The element at the specified index.\n  overload: System.Collections.ArrayList.Item*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"<code>index</code> is less than zero.  \\n  \\n -or-  \\n  \\n <code>index</code> is equal to or greater than <xref href=\\\"System.Collections.ArrayList.Count\\\"></xref>.\"\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections/ArrayList.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.ArrayList.LastIndexOf(System.Object)\n  commentId: M:System.Collections.ArrayList.LastIndexOf(System.Object)\n  id: LastIndexOf(System.Object)\n  parent: System.Collections.ArrayList\n  langs:\n  - csharp\n  name: LastIndexOf(Object)\n  nameWithType: ArrayList.LastIndexOf(Object)\n  fullName: ArrayList.LastIndexOf(Object)\n  type: Method\n  assemblies:\n  - System.Collections.NonGeneric\n  - mscorlib\n  - netstandard\n  - System.Runtime.Extensions\n  namespace: System.Collections\n  summary: Searches for the specified <xref href=\"System.Object\"></xref> and returns the zero-based index of the last occurrence within the entire <xref href=\"System.Collections.ArrayList\"></xref>.\n  remarks: \"The <xref:System.Collections.ArrayList> is searched backward starting at the last element and ending at the first element.  \\n  \\n This method performs a linear search; therefore, this method is an O(`n`) operation, where `n` is <xref:System.Collections.ArrayList.Count%2A>.  \\n  \\n Starting with the .NET Framework 2.0, this method uses the collection’s objects’ <xref:System.Object.Equals%2A> and <xref:System.IComparable.CompareTo%2A> methods on `item` to determine whether item exists. In the earlier versions of the .NET Framework, this determination was made by using the <xref:System.Object.Equals%2A> and <xref:System.IComparable.CompareTo%2A> methods of the `item` parameter on the objects in the collection.\"\n  example:\n  - \"The following code example shows how to determine the index of the last occurrence of a specified element.  \\n  \\n [!code-cpp[Classic ArrayList.LastIndexOf Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic ArrayList.LastIndexOf Example/CPP/source.cpp#1)]\\n [!code-csharp[Classic ArrayList.LastIndexOf Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic ArrayList.LastIndexOf Example/CS/source.cs#1)]\\n [!code-vb[Classic ArrayList.LastIndexOf Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic ArrayList.LastIndexOf Example/VB/source.vb#1)]\"\n  syntax:\n    content: public virtual int LastIndexOf (object value);\n    parameters:\n    - id: value\n      type: System.Object\n      description: The <xref href=\"System.Object\"></xref> to locate in the <xref href=\"System.Collections.ArrayList\"></xref>. The value can be `null`.\n    return:\n      type: System.Int32\n      description: The zero-based index of the last occurrence of <code>value</code> within the entire the <xref href=\"System.Collections.ArrayList\"></xref>, if found; otherwise, -1.\n  overload: System.Collections.ArrayList.LastIndexOf*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections/ArrayList.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.ArrayList.LastIndexOf(System.Object,System.Int32)\n  commentId: M:System.Collections.ArrayList.LastIndexOf(System.Object,System.Int32)\n  id: LastIndexOf(System.Object,System.Int32)\n  parent: System.Collections.ArrayList\n  langs:\n  - csharp\n  name: LastIndexOf(Object, Int32)\n  nameWithType: ArrayList.LastIndexOf(Object, Int32)\n  fullName: ArrayList.LastIndexOf(Object, Int32)\n  type: Method\n  assemblies:\n  - System.Collections.NonGeneric\n  - mscorlib\n  - netstandard\n  - System.Runtime.Extensions\n  namespace: System.Collections\n  summary: Searches for the specified <xref href=\"System.Object\"></xref> and returns the zero-based index of the last occurrence within the range of elements in the <xref href=\"System.Collections.ArrayList\"></xref> that extends from the first element to the specified index.\n  remarks: \"The <xref:System.Collections.ArrayList> is searched backward starting at `startIndex` and ending at the first element.  \\n  \\n This method performs a linear search; therefore, this method is an O(`n`) operation, where `n` is the number of elements from the beginning of the <xref:System.Collections.ArrayList> to `startIndex`.  \\n  \\n This method determines equality by calling <xref:System.Object.Equals%2A?displayProperty=fullName>.  \\n  \\n Starting with the .NET Framework 2.0, this method uses the collection’s objects’ <xref:System.Object.Equals%2A> and <xref:System.IComparable.CompareTo%2A> methods on `item` to determine whether item exists. In the earlier versions of the .NET Framework, this determination was made by using the <xref:System.Object.Equals%2A> and <xref:System.IComparable.CompareTo%2A> methods of the `item` parameter on the objects in the collection.\"\n  example:\n  - \"The following code example shows how to determine the index of the last occurrence of a specified element.  \\n  \\n [!code-cpp[Classic ArrayList.LastIndexOf Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic ArrayList.LastIndexOf Example/CPP/source.cpp#1)]\\n [!code-csharp[Classic ArrayList.LastIndexOf Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic ArrayList.LastIndexOf Example/CS/source.cs#1)]\\n [!code-vb[Classic ArrayList.LastIndexOf Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic ArrayList.LastIndexOf Example/VB/source.vb#1)]\"\n  syntax:\n    content: public virtual int LastIndexOf (object value, int startIndex);\n    parameters:\n    - id: value\n      type: System.Object\n      description: The <xref href=\"System.Object\"></xref> to locate in the <xref href=\"System.Collections.ArrayList\"></xref>. The value can be `null`.\n    - id: startIndex\n      type: System.Int32\n      description: The zero-based starting index of the backward search.\n    return:\n      type: System.Int32\n      description: The zero-based index of the last occurrence of <code>value</code> within the range of elements in the <xref href=\"System.Collections.ArrayList\"></xref> that extends from the first element to <code>startIndex</code>, if found; otherwise, -1.\n  overload: System.Collections.ArrayList.LastIndexOf*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>startIndex</code> is outside the range of valid indexes for the <xref href=\"System.Collections.ArrayList\"></xref>.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections/ArrayList.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.ArrayList.LastIndexOf(System.Object,System.Int32,System.Int32)\n  commentId: M:System.Collections.ArrayList.LastIndexOf(System.Object,System.Int32,System.Int32)\n  id: LastIndexOf(System.Object,System.Int32,System.Int32)\n  parent: System.Collections.ArrayList\n  langs:\n  - csharp\n  name: LastIndexOf(Object, Int32, Int32)\n  nameWithType: ArrayList.LastIndexOf(Object, Int32, Int32)\n  fullName: ArrayList.LastIndexOf(Object, Int32, Int32)\n  type: Method\n  assemblies:\n  - System.Collections.NonGeneric\n  - mscorlib\n  - netstandard\n  - System.Runtime.Extensions\n  namespace: System.Collections\n  summary: Searches for the specified <xref href=\"System.Object\"></xref> and returns the zero-based index of the last occurrence within the range of elements in the <xref href=\"System.Collections.ArrayList\"></xref> that contains the specified number of elements and ends at the specified index.\n  remarks: \"The <xref:System.Collections.ArrayList> is searched backward starting at `startIndex` and ending at `startIndex` minus `count` plus 1, if `count` is greater than 0.  \\n  \\n This method performs a linear search; therefore, this method is an O(`n`) operation, where `n` is `count`.  \\n  \\n This method determines equality by calling <xref:System.Object.Equals%2A?displayProperty=fullName>.  \\n  \\n Starting with the .NET Framework 2.0, this method uses the collection’s objects’ <xref:System.Object.Equals%2A> and <xref:System.IComparable.CompareTo%2A> methods on `item` to determine whether item exists. In the earlier versions of the .NET Framework, this determination was made by using the <xref:System.Object.Equals%2A> and <xref:System.IComparable.CompareTo%2A> methods of the `item` parameter on the objects in the collection.\"\n  example:\n  - \"The following code example shows how to determine the index of the last occurrence of a specified element. Note that `LastIndexOf` is a backward search; therefore, `count` must be less than or equal to `startIndex` + 1.  \\n  \\n [!code-cpp[Classic ArrayList.LastIndexOf Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic ArrayList.LastIndexOf Example/CPP/source.cpp#1)]\\n [!code-csharp[Classic ArrayList.LastIndexOf Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic ArrayList.LastIndexOf Example/CS/source.cs#1)]\\n [!code-vb[Classic ArrayList.LastIndexOf Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic ArrayList.LastIndexOf Example/VB/source.vb#1)]\"\n  syntax:\n    content: public virtual int LastIndexOf (object value, int startIndex, int count);\n    parameters:\n    - id: value\n      type: System.Object\n      description: The <xref href=\"System.Object\"></xref> to locate in the <xref href=\"System.Collections.ArrayList\"></xref>. The value can be `null`.\n    - id: startIndex\n      type: System.Int32\n      description: The zero-based starting index of the backward search.\n    - id: count\n      type: System.Int32\n      description: The number of elements in the section to search.\n    return:\n      type: System.Int32\n      description: The zero-based index of the last occurrence of <code>value</code> within the range of elements in the <xref href=\"System.Collections.ArrayList\"></xref> that contains <code>count</code> number of elements and ends at <code>startIndex</code>, if found; otherwise, -1.\n  overload: System.Collections.ArrayList.LastIndexOf*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"<code>startIndex</code> is outside the range of valid indexes for the <xref href=\\\"System.Collections.ArrayList\\\"></xref>.  \\n  \\n -or-  \\n  \\n <code>count</code> is less than zero.  \\n  \\n -or-  \\n  \\n <code>startIndex</code> and <code>count</code> do not specify a valid section in the <xref href=\\\"System.Collections.ArrayList\\\"></xref>.\"\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections/ArrayList.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.ArrayList.ReadOnly(System.Collections.ArrayList)\n  commentId: M:System.Collections.ArrayList.ReadOnly(System.Collections.ArrayList)\n  id: ReadOnly(System.Collections.ArrayList)\n  parent: System.Collections.ArrayList\n  langs:\n  - csharp\n  name: ReadOnly(ArrayList)\n  nameWithType: ArrayList.ReadOnly(ArrayList)\n  fullName: ArrayList.ReadOnly(ArrayList)\n  type: Method\n  assemblies:\n  - System.Collections.NonGeneric\n  - mscorlib\n  - netstandard\n  - System.Runtime.Extensions\n  namespace: System.Collections\n  summary: Returns a read-only <xref href=\"System.Collections.ArrayList\"></xref> wrapper.\n  remarks: \"To prevent any modifications to `list`, expose `list` only through this wrapper.  \\n  \\n A collection that is read-only is simply a collection with a wrapper that prevents modifying the collection. If changes are made to the underlying collection, the read-only collection reflects those changes.  \\n  \\n This method is an O(1) operation.\"\n  example:\n  - \"The following code example shows how to create a read-only wrapper around an <xref:System.Collections.ArrayList> and how to determine if an <xref:System.Collections.ArrayList> is read-only.  \\n  \\n [!code-cpp[Classic ArrayList.ReadOnly1 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic ArrayList.ReadOnly1 Example/CPP/source.cpp#1)]\\n [!code-csharp[Classic ArrayList.ReadOnly1 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic ArrayList.ReadOnly1 Example/CS/source.cs#1)]\\n [!code-vb[Classic ArrayList.ReadOnly1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic ArrayList.ReadOnly1 Example/VB/source.vb#1)]\"\n  syntax:\n    content: public static System.Collections.ArrayList ReadOnly (System.Collections.ArrayList list);\n    parameters:\n    - id: list\n      type: System.Collections.ArrayList\n      description: The <xref href=\"System.Collections.ArrayList\"></xref> to wrap.\n    return:\n      type: System.Collections.ArrayList\n      description: A read-only <xref href=\"System.Collections.ArrayList\"></xref> wrapper around <code>list</code>.\n  overload: System.Collections.ArrayList.ReadOnly*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>list</code> is `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections/ArrayList.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.ArrayList.ReadOnly(System.Collections.IList)\n  commentId: M:System.Collections.ArrayList.ReadOnly(System.Collections.IList)\n  id: ReadOnly(System.Collections.IList)\n  parent: System.Collections.ArrayList\n  langs:\n  - csharp\n  name: ReadOnly(IList)\n  nameWithType: ArrayList.ReadOnly(IList)\n  fullName: ArrayList.ReadOnly(IList)\n  type: Method\n  assemblies:\n  - System.Collections.NonGeneric\n  - mscorlib\n  - netstandard\n  - System.Runtime.Extensions\n  namespace: System.Collections\n  summary: Returns a read-only <xref href=\"System.Collections.IList\"></xref> wrapper.\n  remarks: \"To prevent any modifications to `list`, expose `list` only through this wrapper.  \\n  \\n A collection that is read-only is simply a collection with a wrapper that prevents modifying the collection. If changes are made to the underlying collection, the read-only collection reflects those changes.  \\n  \\n This method is an O(1) operation.\"\n  syntax:\n    content: public static System.Collections.IList ReadOnly (System.Collections.IList list);\n    parameters:\n    - id: list\n      type: System.Collections.IList\n      description: The <xref href=\"System.Collections.IList\"></xref> to wrap.\n    return:\n      type: System.Collections.IList\n      description: A read-only <xref href=\"System.Collections.IList\"></xref> wrapper around <code>list</code>.\n  overload: System.Collections.ArrayList.ReadOnly*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>list</code> is `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections/ArrayList.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.ArrayList.Remove(System.Object)\n  commentId: M:System.Collections.ArrayList.Remove(System.Object)\n  id: Remove(System.Object)\n  parent: System.Collections.ArrayList\n  langs:\n  - csharp\n  name: Remove(Object)\n  nameWithType: ArrayList.Remove(Object)\n  fullName: ArrayList.Remove(Object)\n  type: Method\n  assemblies:\n  - System.Collections.NonGeneric\n  - mscorlib\n  - netstandard\n  - System.Runtime.Extensions\n  namespace: System.Collections\n  summary: Removes the first occurrence of a specific object from the <xref href=\"System.Collections.ArrayList\"></xref>.\n  remarks: \"If the <xref:System.Collections.ArrayList> does not contain the specified object, the <xref:System.Collections.ArrayList> remains unchanged. No exception is thrown.  \\n  \\n This method performs a linear search; therefore, this method is an O(`n`) operation, where `n` is <xref:System.Collections.ArrayList.Count%2A>.  \\n  \\n This method determines equality by calling <xref:System.Object.Equals%2A?displayProperty=fullName>.  \\n  \\n In collections of contiguous elements, such as lists, the elements that follow the removed element move up to occupy the vacated spot. If the collection is indexed, the indexes of the elements that are moved are also updated. This behavior does not apply to collections where elements are conceptually grouped into buckets, such as a hash table.\"\n  example:\n  - \"The following code example shows how to remove elements from the <xref:System.Collections.ArrayList>.  \\n  \\n [!code-cpp[Classic ArrayList.Remove Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic ArrayList.Remove Example/CPP/source.cpp#1)]\\n [!code-csharp[Classic ArrayList.Remove Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic ArrayList.Remove Example/CS/source.cs#1)]\\n [!code-vb[Classic ArrayList.Remove Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic ArrayList.Remove Example/VB/source.vb#1)]\"\n  syntax:\n    content: public virtual void Remove (object obj);\n    parameters:\n    - id: obj\n      type: System.Object\n      description: The <xref href=\"System.Object\"></xref> to remove from the <xref href=\"System.Collections.ArrayList\"></xref>. The value can be `null`.\n  overload: System.Collections.ArrayList.Remove*\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: \"The <xref href=\\\"System.Collections.ArrayList\\\"></xref> is read-only.  \\n  \\n -or-  \\n  \\n The <xref href=\\\"System.Collections.ArrayList\\\"></xref> has a fixed size.\"\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections/ArrayList.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.ArrayList.RemoveAt(System.Int32)\n  commentId: M:System.Collections.ArrayList.RemoveAt(System.Int32)\n  id: RemoveAt(System.Int32)\n  parent: System.Collections.ArrayList\n  langs:\n  - csharp\n  name: RemoveAt(Int32)\n  nameWithType: ArrayList.RemoveAt(Int32)\n  fullName: ArrayList.RemoveAt(Int32)\n  type: Method\n  assemblies:\n  - System.Collections.NonGeneric\n  - mscorlib\n  - netstandard\n  - System.Runtime.Extensions\n  namespace: System.Collections\n  summary: Removes the element at the specified index of the <xref href=\"System.Collections.ArrayList\"></xref>.\n  remarks: \"After the element is removed, the size of the collection is adjusted and the value of the <xref:System.Collections.ArrayList.Count%2A> property is decreased by one.  \\n  \\n In collections of contiguous elements, such as lists, the elements that follow the removed element move up to occupy the vacated spot. If the collection is indexed, the indexes of the elements that are moved are also updated. This behavior does not apply to collections where elements are conceptually grouped into buckets, such as a hash table.  \\n  \\n This method is an O(`n`) operation, where `n` is <xref:System.Collections.ArrayList.Count%2A>.\"\n  example:\n  - \"The following code example shows how to remove elements from the <xref:System.Collections.ArrayList>.  \\n  \\n [!code-cpp[Classic ArrayList.Remove Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic ArrayList.Remove Example/CPP/source.cpp#1)]\\n [!code-csharp[Classic ArrayList.Remove Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic ArrayList.Remove Example/CS/source.cs#1)]\\n [!code-vb[Classic ArrayList.Remove Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic ArrayList.Remove Example/VB/source.vb#1)]\"\n  syntax:\n    content: public virtual void RemoveAt (int index);\n    parameters:\n    - id: index\n      type: System.Int32\n      description: The zero-based index of the element to remove.\n  overload: System.Collections.ArrayList.RemoveAt*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"<code>index</code> is less than zero.  \\n  \\n -or-  \\n  \\n <code>index</code> is equal to or greater than <xref href=\\\"System.Collections.ArrayList.Count\\\"></xref>.\"\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: \"The <xref href=\\\"System.Collections.ArrayList\\\"></xref> is read-only.  \\n  \\n -or-  \\n  \\n The <xref href=\\\"System.Collections.ArrayList\\\"></xref> has a fixed size.\"\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections/ArrayList.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.ArrayList.RemoveRange(System.Int32,System.Int32)\n  commentId: M:System.Collections.ArrayList.RemoveRange(System.Int32,System.Int32)\n  id: RemoveRange(System.Int32,System.Int32)\n  parent: System.Collections.ArrayList\n  langs:\n  - csharp\n  name: RemoveRange(Int32, Int32)\n  nameWithType: ArrayList.RemoveRange(Int32, Int32)\n  fullName: ArrayList.RemoveRange(Int32, Int32)\n  type: Method\n  assemblies:\n  - System.Collections.NonGeneric\n  - mscorlib\n  - netstandard\n  - System.Runtime.Extensions\n  namespace: System.Collections\n  summary: Removes a range of elements from the <xref href=\"System.Collections.ArrayList\"></xref>.\n  remarks: \"In collections of contiguous elements, such as lists, the elements that follow the removed element move up to occupy the vacated spot. If the collection is indexed, the indexes of the elements that are moved are also updated. This behavior does not apply to collections where elements are conceptually grouped into buckets, such as a hash table.  \\n  \\n This method is an O(`n`) operation, where `n` is <xref:System.Collections.ArrayList.Count%2A>.\"\n  example:\n  - \"The following code example shows how to remove elements from the <xref:System.Collections.ArrayList>.  \\n  \\n [!code-cpp[Classic ArrayList.Remove Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic ArrayList.Remove Example/CPP/source.cpp#1)]\\n [!code-csharp[Classic ArrayList.Remove Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic ArrayList.Remove Example/CS/source.cs#1)]\\n [!code-vb[Classic ArrayList.Remove Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic ArrayList.Remove Example/VB/source.vb#1)]\"\n  syntax:\n    content: public virtual void RemoveRange (int index, int count);\n    parameters:\n    - id: index\n      type: System.Int32\n      description: The zero-based starting index of the range of elements to remove.\n    - id: count\n      type: System.Int32\n      description: The number of elements to remove.\n  overload: System.Collections.ArrayList.RemoveRange*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"<code>index</code> is less than zero.  \\n  \\n -or-  \\n  \\n <code>count</code> is less than zero.\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>index</code> and <code>count</code> do not denote a valid range of elements in the <xref href=\"System.Collections.ArrayList\"></xref>.\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: \"The <xref href=\\\"System.Collections.ArrayList\\\"></xref> is read-only.  \\n  \\n -or-  \\n  \\n The <xref href=\\\"System.Collections.ArrayList\\\"></xref> has a fixed size.\"\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections/ArrayList.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.ArrayList.Repeat(System.Object,System.Int32)\n  commentId: M:System.Collections.ArrayList.Repeat(System.Object,System.Int32)\n  id: Repeat(System.Object,System.Int32)\n  parent: System.Collections.ArrayList\n  langs:\n  - csharp\n  name: Repeat(Object, Int32)\n  nameWithType: ArrayList.Repeat(Object, Int32)\n  fullName: ArrayList.Repeat(Object, Int32)\n  type: Method\n  assemblies:\n  - System.Collections.NonGeneric\n  - mscorlib\n  - netstandard\n  - System.Runtime.Extensions\n  namespace: System.Collections\n  summary: Returns an <xref href=\"System.Collections.ArrayList\"></xref> whose elements are copies of the specified value.\n  remarks: \"<xref:System.Collections.ArrayList> accepts `null` as a valid value and allows duplicate elements.  \\n  \\n This method is an O(`n`) operation, where `n` is `count`.\"\n  example:\n  - \"The following code example shows how to create and initialize a new <xref:System.Collections.ArrayList> with the same value.  \\n  \\n [!code-cpp[Classic ArrayList.Repeat Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic ArrayList.Repeat Example/CPP/source.cpp#1)]\\n [!code-csharp[Classic ArrayList.Repeat Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic ArrayList.Repeat Example/CS/source.cs#1)]\\n [!code-vb[Classic ArrayList.Repeat Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic ArrayList.Repeat Example/VB/source.vb#1)]\"\n  syntax:\n    content: public static System.Collections.ArrayList Repeat (object value, int count);\n    parameters:\n    - id: value\n      type: System.Object\n      description: The <xref href=\"System.Object\"></xref> to copy multiple times in the new <xref href=\"System.Collections.ArrayList\"></xref>. The value can be `null`.\n    - id: count\n      type: System.Int32\n      description: The number of times <code>value</code> should be copied.\n    return:\n      type: System.Collections.ArrayList\n      description: An <xref href=\"System.Collections.ArrayList\"></xref> with <code>count</code> number of elements, all of which are copies of <code>value</code>.\n  overload: System.Collections.ArrayList.Repeat*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>count</code> is less than zero.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections/ArrayList.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.ArrayList.Reverse\n  commentId: M:System.Collections.ArrayList.Reverse\n  id: Reverse\n  parent: System.Collections.ArrayList\n  langs:\n  - csharp\n  name: Reverse()\n  nameWithType: ArrayList.Reverse()\n  fullName: ArrayList.Reverse()\n  type: Method\n  assemblies:\n  - System.Collections.NonGeneric\n  - mscorlib\n  - netstandard\n  - System.Runtime.Extensions\n  namespace: System.Collections\n  summary: Reverses the order of the elements in the entire <xref href=\"System.Collections.ArrayList\"></xref>.\n  remarks: \"This method uses <xref:System.Array.Reverse%2A?displayProperty=fullName> to reverse the order of the elements, such that the element at <xref:System.Collections.ArrayList> [i], where i is any index within the range, moves to <xref:System.Collections.ArrayList> [j], where j equals `index` + `index` + `count` - i - 1.  \\n  \\n This method is an O(`n`) operation, where `n` is <xref:System.Collections.ArrayList.Count%2A>.\"\n  example:\n  - \"The following code example shows how to reverse the sort order of the values in an <xref:System.Collections.ArrayList>.  \\n  \\n [!code-cpp[Classic ArrayList.Reverse Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic ArrayList.Reverse Example/CPP/source.cpp#1)]\\n [!code-csharp[Classic ArrayList.Reverse Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic ArrayList.Reverse Example/CS/source.cs#1)]\\n [!code-vb[Classic ArrayList.Reverse Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic ArrayList.Reverse Example/VB/source.vb#1)]\"\n  syntax:\n    content: public virtual void Reverse ();\n    parameters: []\n  overload: System.Collections.ArrayList.Reverse*\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: The <xref href=\"System.Collections.ArrayList\"></xref> is read-only.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections/ArrayList.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.ArrayList.Reverse(System.Int32,System.Int32)\n  commentId: M:System.Collections.ArrayList.Reverse(System.Int32,System.Int32)\n  id: Reverse(System.Int32,System.Int32)\n  parent: System.Collections.ArrayList\n  langs:\n  - csharp\n  name: Reverse(Int32, Int32)\n  nameWithType: ArrayList.Reverse(Int32, Int32)\n  fullName: ArrayList.Reverse(Int32, Int32)\n  type: Method\n  assemblies:\n  - System.Collections.NonGeneric\n  - mscorlib\n  - netstandard\n  - System.Runtime.Extensions\n  namespace: System.Collections\n  summary: Reverses the order of the elements in the specified range.\n  remarks: \"This method uses <xref:System.Array.Reverse%2A?displayProperty=fullName> to reverse the order of the elements, such that the element at <xref:System.Collections.ArrayList> [i], where i is any index within the range, moves to <xref:System.Collections.ArrayList> [j], where j equals `index` + `index` + `count` - i - 1.  \\n  \\n This method is an O(`n`) operation, where `n` is `count`.\"\n  example:\n  - \"The following code example shows how to reverse the sort order of the values in a range of elements in an <xref:System.Collections.ArrayList>.  \\n  \\n [!code-cpp[Classic ArrayList.Reverse1 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic ArrayList.Reverse1 Example/CPP/source.cpp#1)]\\n [!code-csharp[Classic ArrayList.Reverse1 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic ArrayList.Reverse1 Example/CS/source.cs#1)]\\n [!code-vb[Classic ArrayList.Reverse1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic ArrayList.Reverse1 Example/VB/source.vb#1)]\"\n  syntax:\n    content: public virtual void Reverse (int index, int count);\n    parameters:\n    - id: index\n      type: System.Int32\n      description: The zero-based starting index of the range to reverse.\n    - id: count\n      type: System.Int32\n      description: The number of elements in the range to reverse.\n  overload: System.Collections.ArrayList.Reverse*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"<code>index</code> is less than zero.  \\n  \\n -or-  \\n  \\n <code>count</code> is less than zero.\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>index</code> and <code>count</code> do not denote a valid range of elements in the <xref href=\"System.Collections.ArrayList\"></xref>.\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: The <xref href=\"System.Collections.ArrayList\"></xref> is read-only.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections/ArrayList.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.ArrayList.SetRange(System.Int32,System.Collections.ICollection)\n  commentId: M:System.Collections.ArrayList.SetRange(System.Int32,System.Collections.ICollection)\n  id: SetRange(System.Int32,System.Collections.ICollection)\n  parent: System.Collections.ArrayList\n  langs:\n  - csharp\n  name: SetRange(Int32, ICollection)\n  nameWithType: ArrayList.SetRange(Int32, ICollection)\n  fullName: ArrayList.SetRange(Int32, ICollection)\n  type: Method\n  assemblies:\n  - System.Collections.NonGeneric\n  - mscorlib\n  - netstandard\n  - System.Runtime.Extensions\n  namespace: System.Collections\n  summary: Copies the elements of a collection over a range of elements in the <xref href=\"System.Collections.ArrayList\"></xref>.\n  remarks: \"<xref:System.Collections.ArrayList> accepts `null` as a valid value and allows duplicate elements.  \\n  \\n The order of the elements in the <xref:System.Collections.ICollection> is preserved in the <xref:System.Collections.ArrayList>.  \\n  \\n This method is an O(`n` + 1) operation, where `n` is <xref:System.Collections.ArrayList.Count%2A>.\"\n  example:\n  - \"The following code example shows how to set and get a range of elements in the <xref:System.Collections.ArrayList>.  \\n  \\n [!code-cpp[Classic ArrayList.SetRange Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic ArrayList.SetRange Example/CPP/source.cpp#1)]\\n [!code-csharp[Classic ArrayList.SetRange Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic ArrayList.SetRange Example/CS/source.cs#1)]\\n [!code-vb[Classic ArrayList.SetRange Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic ArrayList.SetRange Example/VB/source.vb#1)]\"\n  syntax:\n    content: public virtual void SetRange (int index, System.Collections.ICollection c);\n    parameters:\n    - id: index\n      type: System.Int32\n      description: The zero-based <xref href=\"System.Collections.ArrayList\"></xref> index at which to start copying the elements of <code>c</code>.\n    - id: c\n      type: System.Collections.ICollection\n      description: The <xref href=\"System.Collections.ICollection\"></xref> whose elements to copy to the <xref href=\"System.Collections.ArrayList\"></xref>. The collection itself cannot be `null`, but it can contain elements that are `null`.\n  overload: System.Collections.ArrayList.SetRange*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"<code>index</code> is less than zero.  \\n  \\n -or-  \\n  \\n <code>index</code> plus the number of elements in <code>c</code> is greater than <xref href=\\\"System.Collections.ArrayList.Count\\\"></xref>.\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>c</code> is `null`.\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: The <xref href=\"System.Collections.ArrayList\"></xref> is read-only.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections/ArrayList.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.ArrayList.Sort\n  commentId: M:System.Collections.ArrayList.Sort\n  id: Sort\n  parent: System.Collections.ArrayList\n  langs:\n  - csharp\n  name: Sort()\n  nameWithType: ArrayList.Sort()\n  fullName: ArrayList.Sort()\n  type: Method\n  assemblies:\n  - System.Collections.NonGeneric\n  - mscorlib\n  - netstandard\n  - System.Runtime.Extensions\n  namespace: System.Collections\n  summary: Sorts the elements in the entire <xref href=\"System.Collections.ArrayList\"></xref>.\n  remarks: \"This method uses <xref:System.Array.Sort%2A?displayProperty=fullName>, which uses the QuickSort algorithm. The QuickSort algorithm is a comparison sort (also called an unstable sort), which means that a \\\"less than or equal to\\\" comparison operation determines which of two elements should occur first in the final sorted list. However, if two elements are equal, their original order might not be preserved. In contrast, a stable sort preserves the order of elements that are equal. To perform a stable sort, you must implement a custom <xref:System.Collections.IComparer> interface to use with the other overloads of this method.  \\n  \\n On average, this method is an O(`n` log `n`) operation, where `n` is <xref:System.Collections.ArrayList.Count%2A>; in the worst case it is an O(`n`^2) operation.\"\n  example:\n  - \"The following code example shows how to sort the values in an <xref:System.Collections.ArrayList>.  \\n  \\n [!code-cpp[Classic ArrayList.Sort Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic ArrayList.Sort Example/CPP/source.cpp#1)]\\n [!code-csharp[Classic ArrayList.Sort Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic ArrayList.Sort Example/CS/source.cs#1)]\\n [!code-vb[Classic ArrayList.Sort Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic ArrayList.Sort Example/VB/source.vb#1)]\"\n  syntax:\n    content: public virtual void Sort ();\n    parameters: []\n  overload: System.Collections.ArrayList.Sort*\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: The <xref href=\"System.Collections.ArrayList\"></xref> is read-only.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections/ArrayList.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.ArrayList.Sort(System.Collections.IComparer)\n  commentId: M:System.Collections.ArrayList.Sort(System.Collections.IComparer)\n  id: Sort(System.Collections.IComparer)\n  parent: System.Collections.ArrayList\n  langs:\n  - csharp\n  name: Sort(IComparer)\n  nameWithType: ArrayList.Sort(IComparer)\n  fullName: ArrayList.Sort(IComparer)\n  type: Method\n  assemblies:\n  - System.Collections.NonGeneric\n  - mscorlib\n  - netstandard\n  - System.Runtime.Extensions\n  namespace: System.Collections\n  summary: Sorts the elements in the entire <xref href=\"System.Collections.ArrayList\"></xref> using the specified comparer.\n  remarks: \"Use the <xref:System.Collections.ArrayList.Sort%2A> method to  sort a list of objects with a custom comparer that implements the <xref:System.Collections.IComparer> interface. If you pass `null` for `comparer`, this method uses the <xref:System.IComparable> implementation of each element. In this case, you must make sure that the objects contained in the list implement the <xref:System.Collections.IComparer> interface or an exception will occur.  \\n  \\n In addition, using the <xref:System.IComparable> implementation means the list performs a comparison sort (also called an unstable sort); that is, if two elements are equal, their order might not be preserved. In contrast, a stable sort preserves the order of elements that are equal. To perform a stable sort, you must implement a custom <xref:System.Collections.IComparer> interface.  \\n  \\n On average, this method is an O(`n` log `n`) operation, where `n` is <xref:System.Collections.ArrayList.Count%2A>; in the worst case it is an O(`n`^2) operation.\"\n  example:\n  - \"The following code example shows how to sort the values in an <xref:System.Collections.ArrayList> using the default comparer and a custom comparer that reverses the sort order.  \\n  \\n [!code-cpp[System.Collections.ArrayList.Sort_2#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Collections.ArrayList.Sort_2/CPP/arraylist_sort2.cpp#1)]\\n [!code-csharp[System.Collections.ArrayList.Sort_2#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Collections.ArrayList.Sort_2/CS/arraylist_sort2.cs#1)]\\n [!code-vb[System.Collections.ArrayList.Sort_2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Collections.ArrayList.Sort_2/VB/arraylist_sort2.vb#1)]\"\n  syntax:\n    content: public virtual void Sort (System.Collections.IComparer comparer);\n    parameters:\n    - id: comparer\n      type: System.Collections.IComparer\n      description: \"The <xref href=\\\"System.Collections.IComparer\\\"></xref> implementation to use when comparing elements.  \\n  \\n -or-  \\n  \\n A null reference (`Nothing` in Visual Basic) to use the <xref href=\\\"System.IComparable\\\"></xref> implementation of each element.\"\n  overload: System.Collections.ArrayList.Sort*\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: The <xref href=\"System.Collections.ArrayList\"></xref> is read-only.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: An error occurred while comparing two elements.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: '`null` is passed for <code>comparer</code>, and the elements in the list do not implement <xref href=\"System.IComparable\"></xref>.'\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections/ArrayList.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.ArrayList.Sort(System.Int32,System.Int32,System.Collections.IComparer)\n  commentId: M:System.Collections.ArrayList.Sort(System.Int32,System.Int32,System.Collections.IComparer)\n  id: Sort(System.Int32,System.Int32,System.Collections.IComparer)\n  parent: System.Collections.ArrayList\n  langs:\n  - csharp\n  name: Sort(Int32, Int32, IComparer)\n  nameWithType: ArrayList.Sort(Int32, Int32, IComparer)\n  fullName: ArrayList.Sort(Int32, Int32, IComparer)\n  type: Method\n  assemblies:\n  - System.Collections.NonGeneric\n  - mscorlib\n  - netstandard\n  - System.Runtime.Extensions\n  namespace: System.Collections\n  summary: Sorts the elements in a range of elements in <xref href=\"System.Collections.ArrayList\"></xref> using the specified comparer.\n  remarks: \"If `comparer` is set to `null`, this method performs a comparison sort (also called an unstable sort); that is, if two elements are equal, their order might not be preserved. In contrast, a stable sort preserves the order of elements that are equal. To perform a stable sort, you must implement a custom <xref:System.Collections.IComparer> interface.  \\n  \\n On average, this method is an O(`n` log `n`) operation, where `n` is `count`; in the worst case it is an O(n^2) operation.\"\n  example:\n  - \"The following code example shows how to sort the values in a range of elements in an <xref:System.Collections.ArrayList> using the default comparer and a custom comparer that reverses the sort order.  \\n  \\n [!code-cpp[System.Collections.ArrayList.Sort_3#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Collections.ArrayList.Sort_3/CPP/arraylist_sort3.cpp#1)]\\n [!code-csharp[System.Collections.ArrayList.Sort_3#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Collections.ArrayList.Sort_3/CS/arraylist_sort3.cs#1)]\\n [!code-vb[System.Collections.ArrayList.Sort_3#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Collections.ArrayList.Sort_3/VB/arraylist_sort3.vb#1)]\"\n  syntax:\n    content: public virtual void Sort (int index, int count, System.Collections.IComparer comparer);\n    parameters:\n    - id: index\n      type: System.Int32\n      description: The zero-based starting index of the range to sort.\n    - id: count\n      type: System.Int32\n      description: The length of the range to sort.\n    - id: comparer\n      type: System.Collections.IComparer\n      description: \"The <xref href=\\\"System.Collections.IComparer\\\"></xref> implementation to use when comparing elements.  \\n  \\n -or-  \\n  \\n A null reference (`Nothing` in Visual Basic) to use the <xref href=\\\"System.IComparable\\\"></xref> implementation of each element.\"\n  overload: System.Collections.ArrayList.Sort*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"<code>index</code> is less than zero.  \\n  \\n -or-  \\n  \\n <code>count</code> is less than zero.\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>index</code> and <code>count</code> do not specify a valid range in the <xref href=\"System.Collections.ArrayList\"></xref>.\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: The <xref href=\"System.Collections.ArrayList\"></xref> is read-only.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: An error occurred while comparing two elements.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections/ArrayList.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.ArrayList.Synchronized(System.Collections.ArrayList)\n  commentId: M:System.Collections.ArrayList.Synchronized(System.Collections.ArrayList)\n  id: Synchronized(System.Collections.ArrayList)\n  parent: System.Collections.ArrayList\n  langs:\n  - csharp\n  name: Synchronized(ArrayList)\n  nameWithType: ArrayList.Synchronized(ArrayList)\n  fullName: ArrayList.Synchronized(ArrayList)\n  type: Method\n  assemblies:\n  - System.Collections.NonGeneric\n  - mscorlib\n  - netstandard\n  - System.Runtime.Extensions\n  namespace: System.Collections\n  summary: Returns an <xref href=\"System.Collections.ArrayList\"></xref> wrapper that is synchronized (thread safe).\n  remarks: \"To guarantee the thread safety of the <xref:System.Collections.ArrayList>, all operations must be done through this wrapper.  \\n  \\n Enumerating through a collection is intrinsically not a thread-safe procedure. Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception. To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.\"\n  example:\n  - \"The following code example shows how to lock the collection using the <xref:System.Collections.ArrayList.SyncRoot%2A> during the entire enumeration.  \\n  \\n [!code-cpp[Classic ArrayList.IsSynchronized Example#2](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic ArrayList.IsSynchronized Example/CPP/source2.cpp#2)]\\n [!code-csharp[Classic ArrayList.IsSynchronized Example#2](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic ArrayList.IsSynchronized Example/CS/source2.cs#2)]\\n [!code-vb[Classic ArrayList.IsSynchronized Example#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic ArrayList.IsSynchronized Example/VB/source2.vb#2)]  \\n  \\n This method is an O(1) operation.  \\n  \\n The following code example shows how to synchronize an <xref:System.Collections.ArrayList>, determine if an <xref:System.Collections.ArrayList> is synchronized and use a synchronized <xref:System.Collections.ArrayList>.  \\n  \\n [!code-cpp[Classic ArrayList.IsSynchronized Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic ArrayList.IsSynchronized Example/CPP/source.cpp#1)]\\n [!code-csharp[Classic ArrayList.IsSynchronized Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic ArrayList.IsSynchronized Example/CS/source.cs#1)]\\n [!code-vb[Classic ArrayList.IsSynchronized Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic ArrayList.IsSynchronized Example/VB/source.vb#1)]\"\n  syntax:\n    content: public static System.Collections.ArrayList Synchronized (System.Collections.ArrayList list);\n    parameters:\n    - id: list\n      type: System.Collections.ArrayList\n      description: The <xref href=\"System.Collections.ArrayList\"></xref> to synchronize.\n    return:\n      type: System.Collections.ArrayList\n      description: An <xref href=\"System.Collections.ArrayList\"></xref> wrapper that is synchronized (thread safe).\n  overload: System.Collections.ArrayList.Synchronized*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>list</code> is `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections/ArrayList.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.ArrayList.Synchronized(System.Collections.IList)\n  commentId: M:System.Collections.ArrayList.Synchronized(System.Collections.IList)\n  id: Synchronized(System.Collections.IList)\n  parent: System.Collections.ArrayList\n  langs:\n  - csharp\n  name: Synchronized(IList)\n  nameWithType: ArrayList.Synchronized(IList)\n  fullName: ArrayList.Synchronized(IList)\n  type: Method\n  assemblies:\n  - System.Collections.NonGeneric\n  - mscorlib\n  - netstandard\n  - System.Runtime.Extensions\n  namespace: System.Collections\n  summary: Returns an <xref href=\"System.Collections.IList\"></xref> wrapper that is synchronized (thread safe).\n  remarks: \"To guarantee the thread safety of the <xref:System.Collections.ArrayList>, all operations must be done through this wrapper.  \\n  \\n Enumerating through a collection is intrinsically not a thread-safe procedure. Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception. To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.\"\n  example:\n  - \"The following code example shows how to lock the collection using the <xref:System.Collections.ArrayList.SyncRoot%2A> during the entire enumeration.  \\n  \\n [!code-cpp[Classic ArrayList.IsSynchronized Example#2](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic ArrayList.IsSynchronized Example/CPP/source2.cpp#2)]\\n [!code-csharp[Classic ArrayList.IsSynchronized Example#2](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic ArrayList.IsSynchronized Example/CS/source2.cs#2)]\\n [!code-vb[Classic ArrayList.IsSynchronized Example#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic ArrayList.IsSynchronized Example/VB/source2.vb#2)]  \\n  \\n This method is an O(1) operation.\"\n  syntax:\n    content: public static System.Collections.IList Synchronized (System.Collections.IList list);\n    parameters:\n    - id: list\n      type: System.Collections.IList\n      description: The <xref href=\"System.Collections.IList\"></xref> to synchronize.\n    return:\n      type: System.Collections.IList\n      description: An <xref href=\"System.Collections.IList\"></xref> wrapper that is synchronized (thread safe).\n  overload: System.Collections.ArrayList.Synchronized*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>list</code> is `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections/ArrayList.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.ArrayList.SyncRoot\n  commentId: P:System.Collections.ArrayList.SyncRoot\n  id: SyncRoot\n  parent: System.Collections.ArrayList\n  langs:\n  - csharp\n  name: SyncRoot\n  nameWithType: ArrayList.SyncRoot\n  fullName: ArrayList.SyncRoot\n  type: Property\n  assemblies:\n  - System.Collections.NonGeneric\n  - mscorlib\n  - netstandard\n  - System.Runtime.Extensions\n  namespace: System.Collections\n  summary: Gets an object that can be used to synchronize access to the <xref href=\"System.Collections.ArrayList\"></xref>.\n  remarks: \"To create a synchronized version of the <xref:System.Collections.ArrayList>, use the <xref:System.Collections.ArrayList.Synchronized%2A> method. However, derived classes can provide their own synchronized version of the <xref:System.Collections.ArrayList> using the <xref:System.Collections.ArrayList.SyncRoot%2A> property. The synchronizing code must perform operations on the <xref:System.Collections.ArrayList.SyncRoot%2A> of the <xref:System.Collections.ArrayList>, not directly on the <xref:System.Collections.ArrayList>. This ensures proper operation of collections that are derived from other objects. Specifically, it maintains proper synchronization with other threads that might be simultaneously modifying the <xref:System.Collections.ArrayList> object.  \\n  \\n Enumerating through a collection is intrinsically not a thread-safe procedure. Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception. To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.\"\n  example:\n  - \"The following code example shows how to lock the collection using the <xref:System.Collections.ArrayList.SyncRoot%2A> during the entire enumeration.  \\n  \\n [!code-cpp[Classic ArrayList.IsSynchronized Example#2](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic ArrayList.IsSynchronized Example/CPP/source2.cpp#2)]\\n [!code-csharp[Classic ArrayList.IsSynchronized Example#2](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic ArrayList.IsSynchronized Example/CS/source2.cs#2)]\\n [!code-vb[Classic ArrayList.IsSynchronized Example#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic ArrayList.IsSynchronized Example/VB/source2.vb#2)]  \\n  \\n Retrieving the value of this property is an O(1) operation.\"\n  syntax:\n    content: public virtual object SyncRoot { get; }\n    return:\n      type: System.Object\n      description: An object that can be used to synchronize access to the <xref href=\"System.Collections.ArrayList\"></xref>.\n  overload: System.Collections.ArrayList.SyncRoot*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections/ArrayList.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.ArrayList.ToArray\n  commentId: M:System.Collections.ArrayList.ToArray\n  id: ToArray\n  parent: System.Collections.ArrayList\n  langs:\n  - csharp\n  name: ToArray()\n  nameWithType: ArrayList.ToArray()\n  fullName: ArrayList.ToArray()\n  type: Method\n  assemblies:\n  - System.Collections.NonGeneric\n  - mscorlib\n  - netstandard\n  - System.Runtime.Extensions\n  namespace: System.Collections\n  summary: Copies the elements of the <xref href=\"System.Collections.ArrayList\"></xref> to a new <xref href=\"System.Object\"></xref> array.\n  remarks: The elements are copied using <xref:System.Array.Copy%2A?displayProperty=fullName>, which is an O(`n`) operation, where `n` is <xref:System.Collections.ArrayList.Count%2A>.\n  syntax:\n    content: public virtual object[] ToArray ();\n    parameters: []\n    return:\n      type: System.Object[]\n      description: An <xref href=\"System.Object\"></xref> array containing copies of the elements of the <xref href=\"System.Collections.ArrayList\"></xref>.\n  overload: System.Collections.ArrayList.ToArray*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections/ArrayList.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.ArrayList.ToArray(System.Type)\n  commentId: M:System.Collections.ArrayList.ToArray(System.Type)\n  id: ToArray(System.Type)\n  parent: System.Collections.ArrayList\n  langs:\n  - csharp\n  name: ToArray(Type)\n  nameWithType: ArrayList.ToArray(Type)\n  fullName: ArrayList.ToArray(Type)\n  type: Method\n  assemblies:\n  - System.Collections.NonGeneric\n  - mscorlib\n  - netstandard\n  - System.Runtime.Extensions\n  namespace: System.Collections\n  summary: Copies the elements of the <xref href=\"System.Collections.ArrayList\"></xref> to a new array of the specified element type.\n  remarks: \"All of the objects in the <xref:System.Collections.ArrayList> object will be cast to the <xref:System.Type> specified in the `type` parameter.  \\n  \\n The elements are copied using <xref:System.Array.Copy%2A?displayProperty=fullName>, which is an O(`n`) operation, where `n` is <xref:System.Collections.ArrayList.Count%2A>.\"\n  example:\n  - \"The following copy example shows how to copy the elements of an <xref:System.Collections.ArrayList> to a string array.  \\n  \\n [!code-cpp[System.Collections.ArrayList.ToArray#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Collections.ArrayList.ToArray/CPP/arraylist_toarray.cpp#1)]\\n [!code-csharp[System.Collections.ArrayList.ToArray#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Collections.ArrayList.ToArray/CS/arraylist_toarray.cs#1)]\\n [!code-vb[System.Collections.ArrayList.ToArray#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Collections.ArrayList.ToArray/VB/arraylist_toarray.vb#1)]\"\n  syntax:\n    content: public virtual Array ToArray (Type type);\n    parameters:\n    - id: type\n      type: System.Type\n      description: The element <xref href=\"System.Type\"></xref> of the destination array to create and copy elements to.\n    return:\n      type: System.Array\n      description: An array of the specified element type containing copies of the elements of the <xref href=\"System.Collections.ArrayList\"></xref>.\n  overload: System.Collections.ArrayList.ToArray*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>type</code> is `null`.\n  - type: System.InvalidCastException\n    commentId: T:System.InvalidCastException\n    description: The type of the source <xref href=\"System.Collections.ArrayList\"></xref> cannot be cast automatically to the specified type.\n  attributes: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections/ArrayList.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.ArrayList.TrimToSize\n  commentId: M:System.Collections.ArrayList.TrimToSize\n  id: TrimToSize\n  parent: System.Collections.ArrayList\n  langs:\n  - csharp\n  name: TrimToSize()\n  nameWithType: ArrayList.TrimToSize()\n  fullName: ArrayList.TrimToSize()\n  type: Method\n  assemblies:\n  - System.Collections.NonGeneric\n  - mscorlib\n  - netstandard\n  - System.Runtime.Extensions\n  namespace: System.Collections\n  summary: Sets the capacity to the actual number of elements in the <xref href=\"System.Collections.ArrayList\"></xref>.\n  remarks: \"This method can be used to minimize a collection's memory overhead if no new elements will be added to the collection.  \\n  \\n To reset a <xref:System.Collections.ArrayList> to its initial state, call the <xref:System.Collections.ArrayList.Clear%2A> method before calling <xref:System.Collections.ArrayList.TrimToSize%2A>. Trimming an empty <xref:System.Collections.ArrayList> sets the capacity of the <xref:System.Collections.ArrayList> to the default capacity.  \\n  \\n This method is an O(`n`) operation, where `n` is <xref:System.Collections.ArrayList.Count%2A>.\"\n  example:\n  - \"The following code example shows how to trim the unused portions of the <xref:System.Collections.ArrayList> and how to clear the values of the <xref:System.Collections.ArrayList>.  \\n  \\n [!code-cpp[Classic ArrayList.Clear Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic ArrayList.Clear Example/CPP/source.cpp#1)]\\n [!code-csharp[Classic ArrayList.Clear Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic ArrayList.Clear Example/CS/source.cs#1)]\\n [!code-vb[Classic ArrayList.Clear Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic ArrayList.Clear Example/VB/source.vb#1)]\"\n  syntax:\n    content: public virtual void TrimToSize ();\n    parameters: []\n  overload: System.Collections.ArrayList.TrimToSize*\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: \"The <xref href=\\\"System.Collections.ArrayList\\\"></xref> is read-only.  \\n  \\n -or-  \\n  \\n The <xref href=\\\"System.Collections.ArrayList\\\"></xref> has a fixed size.\"\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections/ArrayList.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\nreferences:\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.ArgumentNullException\n  parent: System\n  isExternal: false\n  name: ArgumentNullException\n  nameWithType: ArgumentNullException\n  fullName: System.ArgumentNullException\n- uid: System.ArgumentOutOfRangeException\n  parent: System\n  isExternal: false\n  name: ArgumentOutOfRangeException\n  nameWithType: ArgumentOutOfRangeException\n  fullName: System.ArgumentOutOfRangeException\n- uid: System.NotSupportedException\n  parent: System\n  isExternal: false\n  name: NotSupportedException\n  nameWithType: NotSupportedException\n  fullName: System.NotSupportedException\n- uid: System.ArgumentException\n  parent: System\n  isExternal: false\n  name: ArgumentException\n  nameWithType: ArgumentException\n  fullName: System.ArgumentException\n- uid: System.InvalidOperationException\n  parent: System\n  isExternal: false\n  name: InvalidOperationException\n  nameWithType: InvalidOperationException\n  fullName: System.InvalidOperationException\n- uid: System.OutOfMemoryException\n  parent: System\n  isExternal: false\n  name: OutOfMemoryException\n  nameWithType: OutOfMemoryException\n  fullName: System.OutOfMemoryException\n- uid: System.InvalidCastException\n  parent: System\n  isExternal: false\n  name: InvalidCastException\n  nameWithType: InvalidCastException\n  fullName: System.InvalidCastException\n- uid: System.Collections.ArrayList.#ctor\n  parent: System.Collections.ArrayList\n  isExternal: false\n  name: ArrayList()\n  nameWithType: ArrayList.ArrayList()\n  fullName: ArrayList.ArrayList()\n- uid: System.Collections.ArrayList.#ctor(System.Collections.ICollection)\n  parent: System.Collections.ArrayList\n  isExternal: false\n  name: ArrayList(ICollection)\n  nameWithType: ArrayList.ArrayList(ICollection)\n  fullName: ArrayList.ArrayList(ICollection)\n- uid: System.Collections.ICollection\n  parent: System.Collections\n  isExternal: false\n  name: ICollection\n  nameWithType: ICollection\n  fullName: System.Collections.ICollection\n- uid: System.Collections.ArrayList.#ctor(System.Int32)\n  parent: System.Collections.ArrayList\n  isExternal: false\n  name: ArrayList(Int32)\n  nameWithType: ArrayList.ArrayList(Int32)\n  fullName: ArrayList.ArrayList(Int32)\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Collections.ArrayList.Adapter(System.Collections.IList)\n  parent: System.Collections.ArrayList\n  isExternal: false\n  name: Adapter(IList)\n  nameWithType: ArrayList.Adapter(IList)\n  fullName: ArrayList.Adapter(IList)\n- uid: System.Collections.ArrayList\n  parent: System.Collections\n  isExternal: false\n  name: ArrayList\n  nameWithType: ArrayList\n  fullName: System.Collections.ArrayList\n- uid: System.Collections.IList\n  parent: System.Collections\n  isExternal: false\n  name: IList\n  nameWithType: IList\n  fullName: System.Collections.IList\n- uid: System.Collections.ArrayList.Add(System.Object)\n  parent: System.Collections.ArrayList\n  isExternal: false\n  name: Add(Object)\n  nameWithType: ArrayList.Add(Object)\n  fullName: ArrayList.Add(Object)\n- uid: System.Collections.ArrayList.AddRange(System.Collections.ICollection)\n  parent: System.Collections.ArrayList\n  isExternal: false\n  name: AddRange(ICollection)\n  nameWithType: ArrayList.AddRange(ICollection)\n  fullName: ArrayList.AddRange(ICollection)\n- uid: System.Collections.ArrayList.BinarySearch(System.Object)\n  parent: System.Collections.ArrayList\n  isExternal: false\n  name: BinarySearch(Object)\n  nameWithType: ArrayList.BinarySearch(Object)\n  fullName: ArrayList.BinarySearch(Object)\n- uid: System.Collections.ArrayList.BinarySearch(System.Object,System.Collections.IComparer)\n  parent: System.Collections.ArrayList\n  isExternal: false\n  name: BinarySearch(Object, IComparer)\n  nameWithType: ArrayList.BinarySearch(Object, IComparer)\n  fullName: ArrayList.BinarySearch(Object, IComparer)\n- uid: System.Collections.IComparer\n  parent: System.Collections\n  isExternal: false\n  name: IComparer\n  nameWithType: IComparer\n  fullName: System.Collections.IComparer\n- uid: System.Collections.ArrayList.BinarySearch(System.Int32,System.Int32,System.Object,System.Collections.IComparer)\n  parent: System.Collections.ArrayList\n  isExternal: false\n  name: BinarySearch(Int32, Int32, Object, IComparer)\n  nameWithType: ArrayList.BinarySearch(Int32, Int32, Object, IComparer)\n  fullName: ArrayList.BinarySearch(Int32, Int32, Object, IComparer)\n- uid: System.Collections.ArrayList.Capacity\n  parent: System.Collections.ArrayList\n  isExternal: false\n  name: Capacity\n  nameWithType: ArrayList.Capacity\n  fullName: ArrayList.Capacity\n- uid: System.Collections.ArrayList.Clear\n  parent: System.Collections.ArrayList\n  isExternal: false\n  name: Clear()\n  nameWithType: ArrayList.Clear()\n  fullName: ArrayList.Clear()\n- uid: System.Collections.ArrayList.Clone\n  parent: System.Collections.ArrayList\n  isExternal: false\n  name: Clone()\n  nameWithType: ArrayList.Clone()\n  fullName: ArrayList.Clone()\n- uid: System.Collections.ArrayList.Contains(System.Object)\n  parent: System.Collections.ArrayList\n  isExternal: false\n  name: Contains(Object)\n  nameWithType: ArrayList.Contains(Object)\n  fullName: ArrayList.Contains(Object)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Collections.ArrayList.CopyTo(System.Array)\n  parent: System.Collections.ArrayList\n  isExternal: false\n  name: CopyTo(Array)\n  nameWithType: ArrayList.CopyTo(Array)\n  fullName: ArrayList.CopyTo(Array)\n- uid: System.Array\n  parent: System\n  isExternal: false\n  name: Array\n  nameWithType: Array\n  fullName: System.Array\n- uid: System.Collections.ArrayList.CopyTo(System.Array,System.Int32)\n  parent: System.Collections.ArrayList\n  isExternal: false\n  name: CopyTo(Array, Int32)\n  nameWithType: ArrayList.CopyTo(Array, Int32)\n  fullName: ArrayList.CopyTo(Array, Int32)\n- uid: System.Collections.ArrayList.CopyTo(System.Int32,System.Array,System.Int32,System.Int32)\n  parent: System.Collections.ArrayList\n  isExternal: false\n  name: CopyTo(Int32, Array, Int32, Int32)\n  nameWithType: ArrayList.CopyTo(Int32, Array, Int32, Int32)\n  fullName: ArrayList.CopyTo(Int32, Array, Int32, Int32)\n- uid: System.Collections.ArrayList.Count\n  parent: System.Collections.ArrayList\n  isExternal: false\n  name: Count\n  nameWithType: ArrayList.Count\n  fullName: ArrayList.Count\n- uid: System.Collections.ArrayList.FixedSize(System.Collections.ArrayList)\n  parent: System.Collections.ArrayList\n  isExternal: false\n  name: FixedSize(ArrayList)\n  nameWithType: ArrayList.FixedSize(ArrayList)\n  fullName: ArrayList.FixedSize(ArrayList)\n- uid: System.Collections.ArrayList.FixedSize(System.Collections.IList)\n  parent: System.Collections.ArrayList\n  isExternal: false\n  name: FixedSize(IList)\n  nameWithType: ArrayList.FixedSize(IList)\n  fullName: ArrayList.FixedSize(IList)\n- uid: System.Collections.ArrayList.GetEnumerator\n  parent: System.Collections.ArrayList\n  isExternal: false\n  name: GetEnumerator()\n  nameWithType: ArrayList.GetEnumerator()\n  fullName: ArrayList.GetEnumerator()\n- uid: System.Collections.IEnumerator\n  parent: System.Collections\n  isExternal: false\n  name: IEnumerator\n  nameWithType: IEnumerator\n  fullName: System.Collections.IEnumerator\n- uid: System.Collections.ArrayList.GetEnumerator(System.Int32,System.Int32)\n  parent: System.Collections.ArrayList\n  isExternal: false\n  name: GetEnumerator(Int32, Int32)\n  nameWithType: ArrayList.GetEnumerator(Int32, Int32)\n  fullName: ArrayList.GetEnumerator(Int32, Int32)\n- uid: System.Collections.ArrayList.GetRange(System.Int32,System.Int32)\n  parent: System.Collections.ArrayList\n  isExternal: false\n  name: GetRange(Int32, Int32)\n  nameWithType: ArrayList.GetRange(Int32, Int32)\n  fullName: ArrayList.GetRange(Int32, Int32)\n- uid: System.Collections.ArrayList.IndexOf(System.Object)\n  parent: System.Collections.ArrayList\n  isExternal: false\n  name: IndexOf(Object)\n  nameWithType: ArrayList.IndexOf(Object)\n  fullName: ArrayList.IndexOf(Object)\n- uid: System.Collections.ArrayList.IndexOf(System.Object,System.Int32)\n  parent: System.Collections.ArrayList\n  isExternal: false\n  name: IndexOf(Object, Int32)\n  nameWithType: ArrayList.IndexOf(Object, Int32)\n  fullName: ArrayList.IndexOf(Object, Int32)\n- uid: System.Collections.ArrayList.IndexOf(System.Object,System.Int32,System.Int32)\n  parent: System.Collections.ArrayList\n  isExternal: false\n  name: IndexOf(Object, Int32, Int32)\n  nameWithType: ArrayList.IndexOf(Object, Int32, Int32)\n  fullName: ArrayList.IndexOf(Object, Int32, Int32)\n- uid: System.Collections.ArrayList.Insert(System.Int32,System.Object)\n  parent: System.Collections.ArrayList\n  isExternal: false\n  name: Insert(Int32, Object)\n  nameWithType: ArrayList.Insert(Int32, Object)\n  fullName: ArrayList.Insert(Int32, Object)\n- uid: System.Collections.ArrayList.InsertRange(System.Int32,System.Collections.ICollection)\n  parent: System.Collections.ArrayList\n  isExternal: false\n  name: InsertRange(Int32, ICollection)\n  nameWithType: ArrayList.InsertRange(Int32, ICollection)\n  fullName: ArrayList.InsertRange(Int32, ICollection)\n- uid: System.Collections.ArrayList.IsFixedSize\n  parent: System.Collections.ArrayList\n  isExternal: false\n  name: IsFixedSize\n  nameWithType: ArrayList.IsFixedSize\n  fullName: ArrayList.IsFixedSize\n- uid: System.Collections.ArrayList.IsReadOnly\n  parent: System.Collections.ArrayList\n  isExternal: false\n  name: IsReadOnly\n  nameWithType: ArrayList.IsReadOnly\n  fullName: ArrayList.IsReadOnly\n- uid: System.Collections.ArrayList.IsSynchronized\n  parent: System.Collections.ArrayList\n  isExternal: false\n  name: IsSynchronized\n  nameWithType: ArrayList.IsSynchronized\n  fullName: ArrayList.IsSynchronized\n- uid: System.Collections.ArrayList.Item(System.Int32)\n  parent: System.Collections.ArrayList\n  isExternal: false\n  name: Item(Int32)\n  nameWithType: ArrayList.Item(Int32)\n  fullName: ArrayList.Item(Int32)\n- uid: System.Collections.ArrayList.LastIndexOf(System.Object)\n  parent: System.Collections.ArrayList\n  isExternal: false\n  name: LastIndexOf(Object)\n  nameWithType: ArrayList.LastIndexOf(Object)\n  fullName: ArrayList.LastIndexOf(Object)\n- uid: System.Collections.ArrayList.LastIndexOf(System.Object,System.Int32)\n  parent: System.Collections.ArrayList\n  isExternal: false\n  name: LastIndexOf(Object, Int32)\n  nameWithType: ArrayList.LastIndexOf(Object, Int32)\n  fullName: ArrayList.LastIndexOf(Object, Int32)\n- uid: System.Collections.ArrayList.LastIndexOf(System.Object,System.Int32,System.Int32)\n  parent: System.Collections.ArrayList\n  isExternal: false\n  name: LastIndexOf(Object, Int32, Int32)\n  nameWithType: ArrayList.LastIndexOf(Object, Int32, Int32)\n  fullName: ArrayList.LastIndexOf(Object, Int32, Int32)\n- uid: System.Collections.ArrayList.ReadOnly(System.Collections.ArrayList)\n  parent: System.Collections.ArrayList\n  isExternal: false\n  name: ReadOnly(ArrayList)\n  nameWithType: ArrayList.ReadOnly(ArrayList)\n  fullName: ArrayList.ReadOnly(ArrayList)\n- uid: System.Collections.ArrayList.ReadOnly(System.Collections.IList)\n  parent: System.Collections.ArrayList\n  isExternal: false\n  name: ReadOnly(IList)\n  nameWithType: ArrayList.ReadOnly(IList)\n  fullName: ArrayList.ReadOnly(IList)\n- uid: System.Collections.ArrayList.Remove(System.Object)\n  parent: System.Collections.ArrayList\n  isExternal: false\n  name: Remove(Object)\n  nameWithType: ArrayList.Remove(Object)\n  fullName: ArrayList.Remove(Object)\n- uid: System.Collections.ArrayList.RemoveAt(System.Int32)\n  parent: System.Collections.ArrayList\n  isExternal: false\n  name: RemoveAt(Int32)\n  nameWithType: ArrayList.RemoveAt(Int32)\n  fullName: ArrayList.RemoveAt(Int32)\n- uid: System.Collections.ArrayList.RemoveRange(System.Int32,System.Int32)\n  parent: System.Collections.ArrayList\n  isExternal: false\n  name: RemoveRange(Int32, Int32)\n  nameWithType: ArrayList.RemoveRange(Int32, Int32)\n  fullName: ArrayList.RemoveRange(Int32, Int32)\n- uid: System.Collections.ArrayList.Repeat(System.Object,System.Int32)\n  parent: System.Collections.ArrayList\n  isExternal: false\n  name: Repeat(Object, Int32)\n  nameWithType: ArrayList.Repeat(Object, Int32)\n  fullName: ArrayList.Repeat(Object, Int32)\n- uid: System.Collections.ArrayList.Reverse\n  parent: System.Collections.ArrayList\n  isExternal: false\n  name: Reverse()\n  nameWithType: ArrayList.Reverse()\n  fullName: ArrayList.Reverse()\n- uid: System.Collections.ArrayList.Reverse(System.Int32,System.Int32)\n  parent: System.Collections.ArrayList\n  isExternal: false\n  name: Reverse(Int32, Int32)\n  nameWithType: ArrayList.Reverse(Int32, Int32)\n  fullName: ArrayList.Reverse(Int32, Int32)\n- uid: System.Collections.ArrayList.SetRange(System.Int32,System.Collections.ICollection)\n  parent: System.Collections.ArrayList\n  isExternal: false\n  name: SetRange(Int32, ICollection)\n  nameWithType: ArrayList.SetRange(Int32, ICollection)\n  fullName: ArrayList.SetRange(Int32, ICollection)\n- uid: System.Collections.ArrayList.Sort\n  parent: System.Collections.ArrayList\n  isExternal: false\n  name: Sort()\n  nameWithType: ArrayList.Sort()\n  fullName: ArrayList.Sort()\n- uid: System.Collections.ArrayList.Sort(System.Collections.IComparer)\n  parent: System.Collections.ArrayList\n  isExternal: false\n  name: Sort(IComparer)\n  nameWithType: ArrayList.Sort(IComparer)\n  fullName: ArrayList.Sort(IComparer)\n- uid: System.Collections.ArrayList.Sort(System.Int32,System.Int32,System.Collections.IComparer)\n  parent: System.Collections.ArrayList\n  isExternal: false\n  name: Sort(Int32, Int32, IComparer)\n  nameWithType: ArrayList.Sort(Int32, Int32, IComparer)\n  fullName: ArrayList.Sort(Int32, Int32, IComparer)\n- uid: System.Collections.ArrayList.Synchronized(System.Collections.ArrayList)\n  parent: System.Collections.ArrayList\n  isExternal: false\n  name: Synchronized(ArrayList)\n  nameWithType: ArrayList.Synchronized(ArrayList)\n  fullName: ArrayList.Synchronized(ArrayList)\n- uid: System.Collections.ArrayList.Synchronized(System.Collections.IList)\n  parent: System.Collections.ArrayList\n  isExternal: false\n  name: Synchronized(IList)\n  nameWithType: ArrayList.Synchronized(IList)\n  fullName: ArrayList.Synchronized(IList)\n- uid: System.Collections.ArrayList.SyncRoot\n  parent: System.Collections.ArrayList\n  isExternal: false\n  name: SyncRoot\n  nameWithType: ArrayList.SyncRoot\n  fullName: ArrayList.SyncRoot\n- uid: System.Collections.ArrayList.ToArray\n  parent: System.Collections.ArrayList\n  isExternal: false\n  name: ToArray()\n  nameWithType: ArrayList.ToArray()\n  fullName: ArrayList.ToArray()\n- uid: System.Object[]\n  parent: System\n  isExternal: false\n  name: Object[]\n  nameWithType: Object[]\n  fullName: System.Object[]\n  spec.csharp:\n  - uid: System.Object\n    name: Object\n    nameWithType: Object\n    fullName: System.Object\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Collections.ArrayList.ToArray(System.Type)\n  parent: System.Collections.ArrayList\n  isExternal: false\n  name: ToArray(Type)\n  nameWithType: ArrayList.ToArray(Type)\n  fullName: ArrayList.ToArray(Type)\n- uid: System.Type\n  parent: System\n  isExternal: false\n  name: Type\n  nameWithType: Type\n  fullName: System.Type\n- uid: System.Collections.ArrayList.TrimToSize\n  parent: System.Collections.ArrayList\n  isExternal: false\n  name: TrimToSize()\n  nameWithType: ArrayList.TrimToSize()\n  fullName: ArrayList.TrimToSize()\n- uid: System.Collections.ArrayList.#ctor*\n  parent: System.Collections.ArrayList\n  isExternal: false\n  name: ArrayList\n  nameWithType: ArrayList.ArrayList\n  fullName: ArrayList.ArrayList\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections/ArrayList.xml\n- uid: System.Collections.ArrayList.Adapter*\n  parent: System.Collections.ArrayList\n  isExternal: false\n  name: Adapter\n  nameWithType: ArrayList.Adapter\n  fullName: ArrayList.Adapter\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections/ArrayList.xml\n- uid: System.Collections.ArrayList.Add*\n  parent: System.Collections.ArrayList\n  isExternal: false\n  name: Add\n  nameWithType: ArrayList.Add\n  fullName: ArrayList.Add\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections/ArrayList.xml\n- uid: System.Collections.ArrayList.AddRange*\n  parent: System.Collections.ArrayList\n  isExternal: false\n  name: AddRange\n  nameWithType: ArrayList.AddRange\n  fullName: ArrayList.AddRange\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections/ArrayList.xml\n- uid: System.Collections.ArrayList.BinarySearch*\n  parent: System.Collections.ArrayList\n  isExternal: false\n  name: BinarySearch\n  nameWithType: ArrayList.BinarySearch\n  fullName: ArrayList.BinarySearch\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections/ArrayList.xml\n- uid: System.Collections.ArrayList.Capacity*\n  parent: System.Collections.ArrayList\n  isExternal: false\n  name: Capacity\n  nameWithType: ArrayList.Capacity\n  fullName: ArrayList.Capacity\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections/ArrayList.xml\n- uid: System.Collections.ArrayList.Clear*\n  parent: System.Collections.ArrayList\n  isExternal: false\n  name: Clear\n  nameWithType: ArrayList.Clear\n  fullName: ArrayList.Clear\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections/ArrayList.xml\n- uid: System.Collections.ArrayList.Clone*\n  parent: System.Collections.ArrayList\n  isExternal: false\n  name: Clone\n  nameWithType: ArrayList.Clone\n  fullName: ArrayList.Clone\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections/ArrayList.xml\n- uid: System.Collections.ArrayList.Contains*\n  parent: System.Collections.ArrayList\n  isExternal: false\n  name: Contains\n  nameWithType: ArrayList.Contains\n  fullName: ArrayList.Contains\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections/ArrayList.xml\n- uid: System.Collections.ArrayList.CopyTo*\n  parent: System.Collections.ArrayList\n  isExternal: false\n  name: CopyTo\n  nameWithType: ArrayList.CopyTo\n  fullName: ArrayList.CopyTo\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections/ArrayList.xml\n- uid: System.Collections.ArrayList.Count*\n  parent: System.Collections.ArrayList\n  isExternal: false\n  name: Count\n  nameWithType: ArrayList.Count\n  fullName: ArrayList.Count\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections/ArrayList.xml\n- uid: System.Collections.ArrayList.FixedSize*\n  parent: System.Collections.ArrayList\n  isExternal: false\n  name: FixedSize\n  nameWithType: ArrayList.FixedSize\n  fullName: ArrayList.FixedSize\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections/ArrayList.xml\n- uid: System.Collections.ArrayList.GetEnumerator*\n  parent: System.Collections.ArrayList\n  isExternal: false\n  name: GetEnumerator\n  nameWithType: ArrayList.GetEnumerator\n  fullName: ArrayList.GetEnumerator\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections/ArrayList.xml\n- uid: System.Collections.ArrayList.GetRange*\n  parent: System.Collections.ArrayList\n  isExternal: false\n  name: GetRange\n  nameWithType: ArrayList.GetRange\n  fullName: ArrayList.GetRange\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections/ArrayList.xml\n- uid: System.Collections.ArrayList.IndexOf*\n  parent: System.Collections.ArrayList\n  isExternal: false\n  name: IndexOf\n  nameWithType: ArrayList.IndexOf\n  fullName: ArrayList.IndexOf\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections/ArrayList.xml\n- uid: System.Collections.ArrayList.Insert*\n  parent: System.Collections.ArrayList\n  isExternal: false\n  name: Insert\n  nameWithType: ArrayList.Insert\n  fullName: ArrayList.Insert\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections/ArrayList.xml\n- uid: System.Collections.ArrayList.InsertRange*\n  parent: System.Collections.ArrayList\n  isExternal: false\n  name: InsertRange\n  nameWithType: ArrayList.InsertRange\n  fullName: ArrayList.InsertRange\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections/ArrayList.xml\n- uid: System.Collections.ArrayList.IsFixedSize*\n  parent: System.Collections.ArrayList\n  isExternal: false\n  name: IsFixedSize\n  nameWithType: ArrayList.IsFixedSize\n  fullName: ArrayList.IsFixedSize\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections/ArrayList.xml\n- uid: System.Collections.ArrayList.IsReadOnly*\n  parent: System.Collections.ArrayList\n  isExternal: false\n  name: IsReadOnly\n  nameWithType: ArrayList.IsReadOnly\n  fullName: ArrayList.IsReadOnly\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections/ArrayList.xml\n- uid: System.Collections.ArrayList.IsSynchronized*\n  parent: System.Collections.ArrayList\n  isExternal: false\n  name: IsSynchronized\n  nameWithType: ArrayList.IsSynchronized\n  fullName: ArrayList.IsSynchronized\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections/ArrayList.xml\n- uid: System.Collections.ArrayList.Item*\n  parent: System.Collections.ArrayList\n  isExternal: false\n  name: Item\n  nameWithType: ArrayList.Item\n  fullName: ArrayList.Item\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections/ArrayList.xml\n- uid: System.Collections.ArrayList.LastIndexOf*\n  parent: System.Collections.ArrayList\n  isExternal: false\n  name: LastIndexOf\n  nameWithType: ArrayList.LastIndexOf\n  fullName: ArrayList.LastIndexOf\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections/ArrayList.xml\n- uid: System.Collections.ArrayList.ReadOnly*\n  parent: System.Collections.ArrayList\n  isExternal: false\n  name: ReadOnly\n  nameWithType: ArrayList.ReadOnly\n  fullName: ArrayList.ReadOnly\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections/ArrayList.xml\n- uid: System.Collections.ArrayList.Remove*\n  parent: System.Collections.ArrayList\n  isExternal: false\n  name: Remove\n  nameWithType: ArrayList.Remove\n  fullName: ArrayList.Remove\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections/ArrayList.xml\n- uid: System.Collections.ArrayList.RemoveAt*\n  parent: System.Collections.ArrayList\n  isExternal: false\n  name: RemoveAt\n  nameWithType: ArrayList.RemoveAt\n  fullName: ArrayList.RemoveAt\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections/ArrayList.xml\n- uid: System.Collections.ArrayList.RemoveRange*\n  parent: System.Collections.ArrayList\n  isExternal: false\n  name: RemoveRange\n  nameWithType: ArrayList.RemoveRange\n  fullName: ArrayList.RemoveRange\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections/ArrayList.xml\n- uid: System.Collections.ArrayList.Repeat*\n  parent: System.Collections.ArrayList\n  isExternal: false\n  name: Repeat\n  nameWithType: ArrayList.Repeat\n  fullName: ArrayList.Repeat\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections/ArrayList.xml\n- uid: System.Collections.ArrayList.Reverse*\n  parent: System.Collections.ArrayList\n  isExternal: false\n  name: Reverse\n  nameWithType: ArrayList.Reverse\n  fullName: ArrayList.Reverse\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections/ArrayList.xml\n- uid: System.Collections.ArrayList.SetRange*\n  parent: System.Collections.ArrayList\n  isExternal: false\n  name: SetRange\n  nameWithType: ArrayList.SetRange\n  fullName: ArrayList.SetRange\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections/ArrayList.xml\n- uid: System.Collections.ArrayList.Sort*\n  parent: System.Collections.ArrayList\n  isExternal: false\n  name: Sort\n  nameWithType: ArrayList.Sort\n  fullName: ArrayList.Sort\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections/ArrayList.xml\n- uid: System.Collections.ArrayList.Synchronized*\n  parent: System.Collections.ArrayList\n  isExternal: false\n  name: Synchronized\n  nameWithType: ArrayList.Synchronized\n  fullName: ArrayList.Synchronized\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections/ArrayList.xml\n- uid: System.Collections.ArrayList.SyncRoot*\n  parent: System.Collections.ArrayList\n  isExternal: false\n  name: SyncRoot\n  nameWithType: ArrayList.SyncRoot\n  fullName: ArrayList.SyncRoot\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections/ArrayList.xml\n- uid: System.Collections.ArrayList.ToArray*\n  parent: System.Collections.ArrayList\n  isExternal: false\n  name: ToArray\n  nameWithType: ArrayList.ToArray\n  fullName: ArrayList.ToArray\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections/ArrayList.xml\n- uid: System.Collections.ArrayList.TrimToSize*\n  parent: System.Collections.ArrayList\n  isExternal: false\n  name: TrimToSize\n  nameWithType: ArrayList.TrimToSize\n  fullName: ArrayList.TrimToSize\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections/ArrayList.xml\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: Object.Equals(Object)\n  fullName: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: Object.GetHashCode()\n  fullName: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: false\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: false\n  name: ToString()\n  nameWithType: Object.ToString()\n  fullName: Object.ToString()\n- uid: System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Cast<TResult>(IEnumerable)\n  nameWithType: Enumerable.Cast<TResult>(IEnumerable)\n  fullName: Enumerable.Cast<TResult>(IEnumerable)\n- uid: System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: OfType<TResult>(IEnumerable)\n  nameWithType: Enumerable.OfType<TResult>(IEnumerable)\n  fullName: Enumerable.OfType<TResult>(IEnumerable)\n- uid: System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)\n  parent: System.Linq.ParallelEnumerable\n  isExternal: false\n  name: AsParallel(IEnumerable)\n  nameWithType: ParallelEnumerable.AsParallel(IEnumerable)\n  fullName: ParallelEnumerable.AsParallel(IEnumerable)\n- uid: System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)\n  parent: System.Linq.Queryable\n  isExternal: false\n  name: AsQueryable(IEnumerable)\n  nameWithType: Queryable.AsQueryable(IEnumerable)\n  fullName: Queryable.AsQueryable(IEnumerable)\n- uid: System.ICloneable\n  parent: System\n  isExternal: false\n  name: ICloneable\n  nameWithType: ICloneable\n  fullName: System.ICloneable\n"}