### YamlMime:ManagedReference
items:
- uid: System.Text.Decoder
  commentId: T:System.Text.Decoder
  id: Decoder
  children:
  - System.Text.Decoder.#ctor
  - System.Text.Decoder.Convert(System.Byte*,System.Int32,System.Char*,System.Int32,System.Boolean,System.Int32@,System.Int32@,System.Boolean@)
  - System.Text.Decoder.Convert(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32,System.Int32,System.Boolean,System.Int32@,System.Int32@,System.Boolean@)
  - System.Text.Decoder.Fallback
  - System.Text.Decoder.FallbackBuffer
  - System.Text.Decoder.GetCharCount(System.Byte*,System.Int32,System.Boolean)
  - System.Text.Decoder.GetCharCount(System.Byte[],System.Int32,System.Int32)
  - System.Text.Decoder.GetCharCount(System.Byte[],System.Int32,System.Int32,System.Boolean)
  - System.Text.Decoder.GetChars(System.Byte*,System.Int32,System.Char*,System.Int32,System.Boolean)
  - System.Text.Decoder.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)
  - System.Text.Decoder.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32,System.Boolean)
  - System.Text.Decoder.Reset
  langs:
  - csharp
  name: Decoder
  nameWithType: Decoder
  fullName: System.Text.Decoder
  type: Class
  assemblies:
  - System.Text.Encoding
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Text
  summary: Converts a sequence of encoded bytes into a set of characters.
  remarks: "To obtain an instance of an implementation of the <xref:System.Text.Decoder> class, the application should use the <xref:System.Text.Encoding.GetDecoder%2A> method of an <xref:System.Text.Encoding> implementation.  \n  \n The <xref:System.Text.Decoder.GetCharCount%2A> method determines how many characters result in decoding a sequence of bytes, and the <xref:System.Text.Decoder.GetChars%2A> method performs the actual decoding. There are several versions of both of these methods available in the <xref:System.Text.Decoder> class. For more information, see <xref:System.Text.Encoding.GetChars%2A?displayProperty=fullName>. A <xref:System.Text.Decoder> object maintains state information between successive calls to `GetChars` or <xref:System.Text.Decoder.Convert%2A> methods so it can correctly decode byte sequences that span blocks. The <xref:System.Text.Decoder> also preserves trailing bytes at the end of data blocks and uses the trailing bytes in the next decoding operation. Therefore, <xref:System.Text.Encoding.GetDecoder%2A> and <xref:System.Text.Encoding.GetEncoder%2A> are useful for network transmission and file operations because those operations often deal with blocks of data instead of a complete data stream.  \n  \n> [!NOTE]\n>  When the application is done with a stream of data, it should make sure that the state information is flushed by setting the `flush` parameter to `true` in the appropriate method call. If an exception occurs or if the application switches streams, it should call <xref:System.Text.Decoder.Reset%2A> to clear the internal state of the `Decoder` object.  \n  \n## Version Considerations  \n A <xref:System.Text.Decoder> or <xref:System.Text.Encoder> object can be serialized during a conversion operation. The state of the object is retained if it is deserialized in the same version of the .NET Framework, but lost if it is deserialized in another version."
  example:
  - "The following example demonstrates the use of a <xref:System.Text.Decoder> to convert two different byte arrays into a character array. One of the character's bytes spans the arrays. This is similar to what a <xref:System.IO.StreamReader> object does internally when reading a stream.  \n  \n [!code-cpp[Classic Decoder Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Decoder Example/CPP/source.cpp#1)]\n [!code-csharp[Classic Decoder Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Decoder Example/CS/source.cs#1)]\n [!code-vb[Classic Decoder Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Decoder Example/VB/source.vb#1)]"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public abstract class Decoder
  inheritance:
  - System.Object
  implements: []
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  attributes:
  - type: System.Runtime.InteropServices.ComVisibleAttribute
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/Decoder.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Text.Decoder.#ctor
  commentId: M:System.Text.Decoder.#ctor
  id: '#ctor'
  parent: System.Text.Decoder
  langs:
  - csharp
  name: Decoder()
  nameWithType: Decoder.Decoder()
  fullName: Decoder.Decoder()
  type: Constructor
  assemblies:
  - System.Text.Encoding
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Text
  summary: Initializes a new instance of the <xref href="System.Text.Decoder"></xref> class.
  remarks: To obtain an instance of an implementation of this class, the application should use the <xref:System.Text.Encoding.GetDecoder%2A> method of a <xref:System.Text.Encoding> implementation.
  example:
  - "The following example demonstrates two techniques for initializing a new <xref:System.Text.Decoder> instance.  \n  \n [!code-cpp[System.Text.Decoder.ctor Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.Decoder.ctor Example/CPP/ctor.cpp#1)]\n [!code-csharp[System.Text.Decoder.ctor Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.Decoder.ctor Example/CS/ctor.cs#1)]\n [!code-vb[System.Text.Decoder.ctor Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.Decoder.ctor Example/VB/ctor.vb#1)]"
  syntax:
    content: protected Decoder ();
    parameters: []
  overload: System.Text.Decoder.#ctor*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/Decoder.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Text.Decoder.Convert(System.Byte*,System.Int32,System.Char*,System.Int32,System.Boolean,System.Int32@,System.Int32@,System.Boolean@)
  commentId: M:System.Text.Decoder.Convert(System.Byte*,System.Int32,System.Char*,System.Int32,System.Boolean,System.Int32@,System.Int32@,System.Boolean@)
  id: Convert(System.Byte*,System.Int32,System.Char*,System.Int32,System.Boolean,System.Int32@,System.Int32@,System.Boolean@)
  parent: System.Text.Decoder
  langs:
  - csharp
  name: Convert(Byte*, Int32, Char*, Int32, Boolean, Int32, Int32, Boolean)
  nameWithType: Decoder.Convert(Byte*, Int32, Char*, Int32, Boolean, Int32, Int32, Boolean)
  fullName: Decoder.Convert(Byte*, Int32, Char*, Int32, Boolean, Int32, Int32, Boolean)
  type: Method
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Text
  summary: Converts a buffer of encoded bytes to UTF-16 encoded characters and stores the result in another buffer.
  remarks: "Remember that the <xref:System.Text.Decoder> object saves state between calls to <xref:System.Text.Decoder.Convert%2A>. When the application is done with a stream of data, it should set the `flush` parameter to `true` to make sure that the state information is flushed. With this setting, the decoder ignores invalid bytes at the end of the data block and clears the internal buffer. Any remaining processed data that is part of a logical unit, such as the high surrogate of a surrogate pair, is converted according to the current fallback settings.  \n  \n The `Convert` method is designed to be used in a loop to decode an arbitrary amount of input, such as data read from a file or stream. It stores the output of the decoding operation in a fixed-size buffer. <xref:System.Text.Decoder.GetChars%2A> will throw an exception if the output buffer isn't large enough, but <xref:System.Text.Decoder.Convert%2A> will fill as much space as possible and return the bytes read and chars written. Also see the <xref:System.Text.Encoding.GetChars%2A?displayProperty=fullName> topic for more comments.  \n  \n The `completed` output parameter indicates whether all the data in the input buffer was converted and stored in the output buffer. This parameter is set to `false` if the number of bytes specified by the `byteCount` parameter cannot be converted without exceeding the number of characters specified by the `charCount` parameter. In that situation, the application should use the contents of the output buffer or provide a new output buffer, increment the `bytes` parameter by the number of bytes specified by the `bytesUsed` parameter, then call the `Convert` method again to process the remaining input.  \n  \n The `completed` parameter can also be set to `false`, even though the `bytesUsed` and `byteCount` parameters are equal. This situation occurs if there is still data in the <xref:System.Text.Decoder> object that has not been stored in the `bytes` buffer."
  syntax:
    content: >-
      [System.CLSCompliant(false)]

      [System.Runtime.InteropServices.ComVisible(false)]

      [System.Security.SecurityCritical]

      public virtual void Convert (byte* bytes, int byteCount, char* chars, int charCount, bool flush, out int bytesUsed, out int charsUsed, out bool completed);
    parameters:
    - id: bytes
      type: System.Byte*
      description: The address of a buffer that contains the byte sequences to convert.
    - id: byteCount
      type: System.Int32
      description: The number of bytes in <code>bytes</code> to convert.
    - id: chars
      type: System.Char*
      description: The address of a buffer to store the converted characters.
    - id: charCount
      type: System.Int32
      description: The maximum number of characters in <code>chars</code> to use in the conversion.
    - id: flush
      type: System.Boolean
      description: '`true` to indicate no further data is to be converted; otherwise, `false`.'
    - id: bytesUsed
      type: System.Int32
      description: When this method returns, contains the number of bytes that were produced by the conversion. This parameter is passed uninitialized.
    - id: charsUsed
      type: System.Int32
      description: When this method returns, contains the number of characters from <code>chars</code> that were used in the conversion. This parameter is passed uninitialized.
    - id: completed
      type: System.Boolean
      description: When this method returns, contains `true` if all the characters specified by <code>byteCount</code> were converted; otherwise, `false`. This parameter is passed uninitialized.
  overload: System.Text.Decoder.Convert*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>chars</code> or <code>bytes</code> is `null` (`Nothing`).
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: <code>charCount</code> or <code>byteCount</code> is less than zero.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: The output buffer is too small to contain any of the converted input. The output buffer should be greater than or equal to the size indicated by the <xref href="System.Text.Decoder.GetCharCount*"></xref> method.
  - type: System.Text.DecoderFallbackException
    commentId: T:System.Text.DecoderFallbackException
    description: "A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for fuller explanation)  \n  \n -and-  \n  \n <xref href=\"System.Text.Decoder.Fallback\"></xref> is set to <xref href=\"System.Text.DecoderExceptionFallback\"></xref>."
  attributes:
  - type: System.CLSCompliantAttribute
  - type: System.Runtime.InteropServices.ComVisibleAttribute
  - type: System.Security.SecurityCriticalAttribute
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  altCompliant: System.Text.Decoder.Convert(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32,System.Int32,System.Boolean,System.Int32@,System.Int32@,System.Boolean@)
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/Decoder.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Text.Decoder.Convert(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32,System.Int32,System.Boolean,System.Int32@,System.Int32@,System.Boolean@)
  commentId: M:System.Text.Decoder.Convert(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32,System.Int32,System.Boolean,System.Int32@,System.Int32@,System.Boolean@)
  id: Convert(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32,System.Int32,System.Boolean,System.Int32@,System.Int32@,System.Boolean@)
  parent: System.Text.Decoder
  langs:
  - csharp
  name: Convert(Byte[], Int32, Int32, Char[], Int32, Int32, Boolean, Int32, Int32, Boolean)
  nameWithType: Decoder.Convert(Byte[], Int32, Int32, Char[], Int32, Int32, Boolean, Int32, Int32, Boolean)
  fullName: Decoder.Convert(Byte[], Int32, Int32, Char[], Int32, Int32, Boolean, Int32, Int32, Boolean)
  type: Method
  assemblies:
  - System.Text.Encoding
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Text
  summary: Converts an array of encoded bytes to UTF-16 encoded characters and stores the result in a character array.
  remarks: "Remember that the <xref:System.Text.Decoder> object saves state between calls to <xref:System.Text.Decoder.Convert%2A>. When the application is done with a stream of data, it should set the `flush` parameter to `true` to make sure that the state information is flushed. With this setting, the decoder ignores invalid bytes at the end of the data block and clears the internal buffer. Any remaining processed data that is part of a logical unit, such as the high surrogate of a surrogate pair, is converted according to the current fallback settings.  \n  \n The `Convert` method is designed to be used in a loop to decode an arbitrary amount of input, such as data read from a file or stream. It stores the output of the decoding operation in a fixed-size buffer. <xref:System.Text.Decoder.GetChars%2A> will throw an exception if the output buffer isn't large enough, but <xref:System.Text.Decoder.Convert%2A> will fill as much space as possible and return the bytes read and chars written. Also see the <xref:System.Text.Encoding.GetChars%2A?displayProperty=fullName> topic for more comments.  \n  \n The `completed` output parameter indicates whether all the data in the input buffer was converted and stored in the output buffer. This parameter is set to `false` if the number of bytes specified by the `byteCount` parameter cannot be converted without exceeding the number of characters specified by the `charCount` parameter. In that situation, the application should use the contents of the output buffer or provide a new output buffer, increment the `bytes` parameter by the number of bytes specified by the `bytesUsed` parameter, then call the `Convert` method again to process the remaining input.  \n  \n The `completed` parameter can also be set to `false`, even though the `bytesUsed` and `byteCount` parameters are equal. This situation occurs if there is still data in the <xref:System.Text.Decoder> object that has not been stored in the `bytes` buffer."
  example:
  - "The following code example uses the <xref:System.Text.Encoder.Convert%2A> method to convert a file of UTF-16 characters to UTF-8. It then uses the <xref:System.Text.Decoder.Convert%2A> method to convert the UTF-8 characters back to UTF-16 characters.  \n  \n [!code-csharp[sys.txt.EncoderDecoder.convert#1](~/samples/snippets/csharp/VS_Snippets_CLR/sys.txt.EncoderDecoder.convert/cs/edCvt.cs#1)]\n [!code-vb[sys.txt.EncoderDecoder.convert#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/sys.txt.EncoderDecoder.convert/vb/edCvt.vb#1)]"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(false)]

      public virtual void Convert (byte[] bytes, int byteIndex, int byteCount, char[] chars, int charIndex, int charCount, bool flush, out int bytesUsed, out int charsUsed, out bool completed);
    parameters:
    - id: bytes
      type: System.Byte[]
      description: A byte array to convert.
    - id: byteIndex
      type: System.Int32
      description: The first element of <code>bytes</code> to convert.
    - id: byteCount
      type: System.Int32
      description: The number of elements of <code>bytes</code> to convert.
    - id: chars
      type: System.Char[]
      description: An array to store the converted characters.
    - id: charIndex
      type: System.Int32
      description: The first element of <code>chars</code> in which data is stored.
    - id: charCount
      type: System.Int32
      description: The maximum number of elements of <code>chars</code> to use in the conversion.
    - id: flush
      type: System.Boolean
      description: '`true` to indicate that no further data is to be converted; otherwise, `false`.'
    - id: bytesUsed
      type: System.Int32
      description: When this method returns, contains the number of bytes that were used in the conversion. This parameter is passed uninitialized.
    - id: charsUsed
      type: System.Int32
      description: When this method returns, contains the number of characters from <code>chars</code> that were produced by the conversion. This parameter is passed uninitialized.
    - id: completed
      type: System.Boolean
      description: When this method returns, contains `true` if all the characters specified by <code>byteCount</code> were converted; otherwise, `false`. This parameter is passed uninitialized.
  overload: System.Text.Decoder.Convert*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>chars</code> or <code>bytes</code> is `null` (`Nothing`).
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>charIndex</code>, <code>charCount</code>, <code>byteIndex</code>, or <code>byteCount</code> is less than zero.  \n  \n -or-  \n  \n The length of <code>chars</code> - <code>charIndex</code> is less than <code>charCount</code>.  \n  \n -or-  \n  \n The length of <code>bytes</code> - <code>byteIndex</code> is less than <code>byteCount</code>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: The output buffer is too small to contain any of the converted input. The output buffer should be greater than or equal to the size indicated by the <xref href="System.Text.Decoder.GetCharCount*"></xref> method.
  - type: System.Text.DecoderFallbackException
    commentId: T:System.Text.DecoderFallbackException
    description: "A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for fuller explanation)  \n  \n -and-  \n  \n <xref href=\"System.Text.Decoder.Fallback\"></xref> is set to <xref href=\"System.Text.DecoderExceptionFallback\"></xref>."
  attributes:
  - type: System.Runtime.InteropServices.ComVisibleAttribute
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/Decoder.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Text.Decoder.Fallback
  commentId: P:System.Text.Decoder.Fallback
  id: Fallback
  parent: System.Text.Decoder
  langs:
  - csharp
  name: Fallback
  nameWithType: Decoder.Fallback
  fullName: Decoder.Fallback
  type: Property
  assemblies:
  - System.Text.Encoding
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Text
  summary: Gets or sets a <xref href="System.Text.DecoderFallback"></xref> object for the current <xref href="System.Text.Decoder"></xref> object.
  remarks: The <xref:System.Text.DecoderFallback> object represents an error handler that is invoked when an encoded byte sequence cannot be converted to a character.
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(false)]

      public System.Text.DecoderFallback Fallback { get; set; }
    return:
      type: System.Text.DecoderFallback
      description: A <xref href="System.Text.DecoderFallback"></xref> object.
  overload: System.Text.Decoder.Fallback*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The value in a set operation is `null` (`Nothing`).
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: A new value cannot be assigned in a set operation because the current <xref href="System.Text.DecoderFallbackBuffer"></xref> object contains data that has not been decoded yet.
  attributes:
  - type: System.Runtime.InteropServices.ComVisibleAttribute
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/Decoder.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Text.Decoder.FallbackBuffer
  commentId: P:System.Text.Decoder.FallbackBuffer
  id: FallbackBuffer
  parent: System.Text.Decoder
  langs:
  - csharp
  name: FallbackBuffer
  nameWithType: Decoder.FallbackBuffer
  fullName: Decoder.FallbackBuffer
  type: Property
  assemblies:
  - System.Text.Encoding
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Text
  summary: Gets the <xref href="System.Text.DecoderFallbackBuffer"></xref> object associated with the current <xref href="System.Text.Decoder"></xref> object.
  remarks: The <xref:System.Text.DecoderFallbackBuffer> object represents data used by the <xref:System.Text.DecoderFallback> object. The <xref:System.Text.DecoderFallback> object represents an error handler that is invoked when an encoded byte sequence cannot be converted to a character.
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(false)]

      public System.Text.DecoderFallbackBuffer FallbackBuffer { get; }
    return:
      type: System.Text.DecoderFallbackBuffer
      description: A <xref href="System.Text.DecoderFallbackBuffer"></xref> object.
  overload: System.Text.Decoder.FallbackBuffer*
  exceptions: []
  attributes:
  - type: System.Runtime.InteropServices.ComVisibleAttribute
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/Decoder.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Text.Decoder.GetCharCount(System.Byte*,System.Int32,System.Boolean)
  commentId: M:System.Text.Decoder.GetCharCount(System.Byte*,System.Int32,System.Boolean)
  id: GetCharCount(System.Byte*,System.Int32,System.Boolean)
  parent: System.Text.Decoder
  langs:
  - csharp
  name: GetCharCount(Byte*, Int32, Boolean)
  nameWithType: Decoder.GetCharCount(Byte*, Int32, Boolean)
  fullName: Decoder.GetCharCount(Byte*, Int32, Boolean)
  type: Method
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Text
  summary: When overridden in a derived class, calculates the number of characters produced by decoding a sequence of bytes starting at the specified byte pointer. A parameter indicates whether to clear the internal state of the decoder after the calculation.
  remarks: "This method does not affect the state of the decoder.  \n  \n To calculate the exact array size that <xref:System.Text.Decoder.GetChars%2A> requires to store the resulting characters, the application should use <xref:System.Text.Decoder.GetCharCount%2A>.  \n  \n If `GetChars` is called with `flush` set to `false`, the decoder stores trailing bytes at the end of the data block in an internal buffer and uses them in the next decoding operation. The application should call `GetCharCount` on a block of data immediately before calling `GetChars` on the same block, so that any trailing bytes from the previous block are included in the calculation."
  syntax:
    content: >-
      [System.CLSCompliant(false)]

      [System.Runtime.InteropServices.ComVisible(false)]

      [System.Security.SecurityCritical]

      public virtual int GetCharCount (byte* bytes, int count, bool flush);
    parameters:
    - id: bytes
      type: System.Byte*
      description: A pointer to the first byte to decode.
    - id: count
      type: System.Int32
      description: The number of bytes to decode.
    - id: flush
      type: System.Boolean
      description: '`true` to simulate clearing the internal state of the encoder after the calculation; otherwise, `false`.'
    return:
      type: System.Int32
      description: The number of characters produced by decoding the specified sequence of bytes and any bytes in the internal buffer.
  overload: System.Text.Decoder.GetCharCount*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>bytes</code> is `null` (`Nothing` in Visual Basic .NET).
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: <code>count</code> is less than zero.
  - type: System.Text.DecoderFallbackException
    commentId: T:System.Text.DecoderFallbackException
    description: "A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for fuller explanation)  \n  \n -and-  \n  \n <xref href=\"System.Text.Decoder.Fallback\"></xref> is set to <xref href=\"System.Text.DecoderExceptionFallback\"></xref>."
  attributes:
  - type: System.CLSCompliantAttribute
  - type: System.Runtime.InteropServices.ComVisibleAttribute
  - type: System.Security.SecurityCriticalAttribute
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/Decoder.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Text.Decoder.GetCharCount(System.Byte[],System.Int32,System.Int32)
  commentId: M:System.Text.Decoder.GetCharCount(System.Byte[],System.Int32,System.Int32)
  id: GetCharCount(System.Byte[],System.Int32,System.Int32)
  parent: System.Text.Decoder
  langs:
  - csharp
  name: GetCharCount(Byte[], Int32, Int32)
  nameWithType: Decoder.GetCharCount(Byte[], Int32, Int32)
  fullName: Decoder.GetCharCount(Byte[], Int32, Int32)
  type: Method
  assemblies:
  - System.Text.Encoding
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Text
  summary: When overridden in a derived class, calculates the number of characters produced by decoding a sequence of bytes from the specified byte array.
  remarks: "This method does not affect the state of the decoder.  \n  \n To calculate the exact array size that <xref:System.Text.Decoder.GetChars%2A> requires to store the resulting characters, the application should use <xref:System.Text.Decoder.GetCharCount%2A>.  \n  \n If `GetChars` is called with `flush` set to `false`, the decoder stores trailing bytes at the end of the data block in an internal buffer and uses them in the next decoding operation. The application should call `GetCharCount` on a block of data immediately before calling `GetChars` on the same block, so that any trailing bytes from the previous block are included in the calculation."
  example:
  - "The following code example demonstrates how to use the <xref:System.Text.Decoder.GetCharCount%2A> method to calculate the number of characters required to decode the specified range of bytes in the array.  \n  \n [!code-cpp[System.Text.Decoder.GetCharCount Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.Decoder.GetCharCount Example/CPP/getcharcount-byte[]-int32-int32.cpp#1)]\n [!code-csharp[System.Text.Decoder.GetCharCount Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.Decoder.GetCharCount Example/CS/getcharcount-byte[]-int32-int32.cs#1)]\n [!code-vb[System.Text.Decoder.GetCharCount Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.Decoder.GetCharCount Example/VB/getcharcount-byte[]-int32-int32.vb#1)]"
  syntax:
    content: public abstract int GetCharCount (byte[] bytes, int index, int count);
    parameters:
    - id: bytes
      type: System.Byte[]
      description: The byte array containing the sequence of bytes to decode.
    - id: index
      type: System.Int32
      description: The index of the first byte to decode.
    - id: count
      type: System.Int32
      description: The number of bytes to decode.
    return:
      type: System.Int32
      description: The number of characters produced by decoding the specified sequence of bytes and any bytes in the internal buffer.
  overload: System.Text.Decoder.GetCharCount*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>bytes</code> is `null` (`Nothing`).
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>index</code> or <code>count</code> is less than zero.  \n  \n -or-  \n  \n <code>index</code> and <code>count</code> do not denote a valid range in <code>bytes</code>."
  - type: System.Text.DecoderFallbackException
    commentId: T:System.Text.DecoderFallbackException
    description: "A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for fuller explanation)  \n  \n -and-  \n  \n <xref href=\"System.Text.Decoder.Fallback\"></xref> is set to <xref href=\"System.Text.DecoderExceptionFallback\"></xref>."
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/Decoder.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Text.Decoder.GetCharCount(System.Byte[],System.Int32,System.Int32,System.Boolean)
  commentId: M:System.Text.Decoder.GetCharCount(System.Byte[],System.Int32,System.Int32,System.Boolean)
  id: GetCharCount(System.Byte[],System.Int32,System.Int32,System.Boolean)
  parent: System.Text.Decoder
  langs:
  - csharp
  name: GetCharCount(Byte[], Int32, Int32, Boolean)
  nameWithType: Decoder.GetCharCount(Byte[], Int32, Int32, Boolean)
  fullName: Decoder.GetCharCount(Byte[], Int32, Int32, Boolean)
  type: Method
  assemblies:
  - System.Text.Encoding
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Text
  summary: When overridden in a derived class, calculates the number of characters produced by decoding a sequence of bytes from the specified byte array. A parameter indicates whether to clear the internal state of the decoder after the calculation.
  remarks: "This method does not affect the state of the decoder.  \n  \n To calculate the exact array size that <xref:System.Text.Decoder.GetChars%2A> requires to store the resulting characters, the application should use <xref:System.Text.Decoder.GetCharCount%2A>.  \n  \n If `GetChars` is called with `flush` set to `false`, the decoder stores trailing bytes at the end of the data block in an internal buffer and uses them in the next decoding operation. The application should call `GetCharCount` on a block of data immediately before calling `GetChars` on the same block, so that any trailing bytes from the previous block are included in the calculation."
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(false)]

      public virtual int GetCharCount (byte[] bytes, int index, int count, bool flush);
    parameters:
    - id: bytes
      type: System.Byte[]
      description: The byte array containing the sequence of bytes to decode.
    - id: index
      type: System.Int32
      description: The index of the first byte to decode.
    - id: count
      type: System.Int32
      description: The number of bytes to decode.
    - id: flush
      type: System.Boolean
      description: '`true` to simulate clearing the internal state of the encoder after the calculation; otherwise, `false`.'
    return:
      type: System.Int32
      description: The number of characters produced by decoding the specified sequence of bytes and any bytes in the internal buffer.
  overload: System.Text.Decoder.GetCharCount*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>bytes</code> is `null` (`Nothing`).
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>index</code> or <code>count</code> is less than zero.  \n  \n -or-  \n  \n <code>index</code> and <code>count</code> do not denote a valid range in <code>bytes</code>."
  - type: System.Text.DecoderFallbackException
    commentId: T:System.Text.DecoderFallbackException
    description: "A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for fuller explanation)  \n  \n -and-  \n  \n <xref href=\"System.Text.Decoder.Fallback\"></xref> is set to <xref href=\"System.Text.DecoderExceptionFallback\"></xref>."
  attributes:
  - type: System.Runtime.InteropServices.ComVisibleAttribute
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/Decoder.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Text.Decoder.GetChars(System.Byte*,System.Int32,System.Char*,System.Int32,System.Boolean)
  commentId: M:System.Text.Decoder.GetChars(System.Byte*,System.Int32,System.Char*,System.Int32,System.Boolean)
  id: GetChars(System.Byte*,System.Int32,System.Char*,System.Int32,System.Boolean)
  parent: System.Text.Decoder
  langs:
  - csharp
  name: GetChars(Byte*, Int32, Char*, Int32, Boolean)
  nameWithType: Decoder.GetChars(Byte*, Int32, Char*, Int32, Boolean)
  fullName: Decoder.GetChars(Byte*, Int32, Char*, Int32, Boolean)
  type: Method
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Text
  summary: When overridden in a derived class, decodes a sequence of bytes starting at the specified byte pointer and any bytes in the internal buffer into a set of characters that are stored starting at the specified character pointer. A parameter indicates whether to clear the internal state of the decoder after the conversion.
  remarks: "Remember that the <xref:System.Text.Decoder> object saves state between calls to <xref:System.Text.Decoder.GetChars%2A>. When the application is done with a stream of data, it should set the `flush` parameter to `true` to make sure that the state information is flushed. With this setting, the decoder ignores invalid bytes at the end of the data block and clears the internal buffer.  \n  \n To calculate the exact buffer size that `GetChars` requires to store the resulting characters, the application should use <xref:System.Text.Decoder.GetCharCount%2A>.  \n  \n If `GetChars` is called with `flush` set to `false`, the decoder stores trailing bytes at the end of the data block in an internal buffer and uses them in the next decoding operation. The application should call `GetCharCount` on a block of data immediately before calling `GetChars` on the same block, so that any trailing bytes from the previous block are included in the calculation.  \n  \n If your application is to convert many segments of an input stream, consider using the <xref:System.Text.Decoder.Convert%2A> method. <xref:System.Text.Decoder.GetChars%2A> will throw an exception if the output buffer isn't large enough, but <xref:System.Text.Decoder.Convert%2A> will fill as much space as possible and return the bytes read and chars written. Also see the <xref:System.Text.Encoding.GetChars%2A?displayProperty=fullName> topic for more comments."
  syntax:
    content: >-
      [System.CLSCompliant(false)]

      [System.Runtime.InteropServices.ComVisible(false)]

      [System.Security.SecurityCritical]

      public virtual int GetChars (byte* bytes, int byteCount, char* chars, int charCount, bool flush);
    parameters:
    - id: bytes
      type: System.Byte*
      description: A pointer to the first byte to decode.
    - id: byteCount
      type: System.Int32
      description: The number of bytes to decode.
    - id: chars
      type: System.Char*
      description: A pointer to the location at which to start writing the resulting set of characters.
    - id: charCount
      type: System.Int32
      description: The maximum number of characters to write.
    - id: flush
      type: System.Boolean
      description: '`true` to clear the internal state of the decoder after the conversion; otherwise, `false`.'
    return:
      type: System.Int32
      description: The actual number of characters written at the location indicated by the <code>chars</code> parameter.
  overload: System.Text.Decoder.GetChars*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>bytes</code> is `null` (`Nothing`).  \n  \n -or-  \n  \n <code>chars</code> is `null` (`Nothing`)."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: <code>byteCount</code> or <code>charCount</code> is less than zero.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: <code>charCount</code> is less than the resulting number of characters.
  - type: System.Text.DecoderFallbackException
    commentId: T:System.Text.DecoderFallbackException
    description: "A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for fuller explanation)  \n  \n -and-  \n  \n <xref href=\"System.Text.Decoder.Fallback\"></xref> is set to <xref href=\"System.Text.DecoderExceptionFallback\"></xref>."
  attributes:
  - type: System.CLSCompliantAttribute
  - type: System.Runtime.InteropServices.ComVisibleAttribute
  - type: System.Security.SecurityCriticalAttribute
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/Decoder.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Text.Decoder.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)
  commentId: M:System.Text.Decoder.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)
  id: GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)
  parent: System.Text.Decoder
  langs:
  - csharp
  name: GetChars(Byte[], Int32, Int32, Char[], Int32)
  nameWithType: Decoder.GetChars(Byte[], Int32, Int32, Char[], Int32)
  fullName: Decoder.GetChars(Byte[], Int32, Int32, Char[], Int32)
  type: Method
  assemblies:
  - System.Text.Encoding
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Text
  summary: When overridden in a derived class, decodes a sequence of bytes from the specified byte array and any bytes in the internal buffer into the specified character array.
  remarks: "Remember that the <xref:System.Text.Decoder> object saves state between calls to <xref:System.Text.Decoder.GetChars%2A>. When the application is done with a stream of data, it should set the `flush` parameter to `true` to make sure that the state information is flushed. With this setting, the decoder ignores invalid bytes at the end of the data block and clears the internal buffer.  \n  \n To calculate the exact array size that `GetChars` requires to store the resulting characters, the application should use <xref:System.Text.Decoder.GetCharCount%2A>.  \n  \n If `GetChars` is called with `flush` set to `false`, the decoder stores trailing bytes at the end of the data block in an internal buffer and uses them in the next decoding operation. The application should call `GetCharCount` on a block of data immediately before calling `GetChars` on the same block, so that any trailing bytes from the previous block are included in the calculation.  \n  \n If your application is to convert many segments of an input stream, consider using the <xref:System.Text.Decoder.Convert%2A> method. <xref:System.Text.Decoder.GetChars%2A> will throw an exception if the output buffer isn't large enough, but <xref:System.Text.Decoder.Convert%2A> will fill as much space as possible and return the bytes read and chars written. Also see the <xref:System.Text.Encoding.GetChars%2A?displayProperty=fullName> topic for more comments."
  example:
  - "The following example demonstrates how to decode a range of elements from a byte array and store them in a Unicode character array. The <xref:System.Text.Decoder.GetCharCount%2A> method is used to calculate the number of characters needed to store the decoded elements in the array `bytes`. The <xref:System.Text.Decoder.GetChars%2A> method decodes the specified elements in the byte array and stores them in the new character array.  \n  \n [!code-cpp[System.Text.Decoder.GetChars Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.Decoder.GetChars Example/CPP/getchars-byte[]-int32-int32-char[]-int32.cpp#1)]\n [!code-csharp[System.Text.Decoder.GetChars Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.Decoder.GetChars Example/CS/getchars-byte[]-int32-int32-char[]-int32.cs#1)]\n [!code-vb[System.Text.Decoder.GetChars Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.Decoder.GetChars Example/VB/getchars-byte[]-int32-int32-char[]-int32.vb#1)]"
  syntax:
    content: public abstract int GetChars (byte[] bytes, int byteIndex, int byteCount, char[] chars, int charIndex);
    parameters:
    - id: bytes
      type: System.Byte[]
      description: The byte array containing the sequence of bytes to decode.
    - id: byteIndex
      type: System.Int32
      description: The index of the first byte to decode.
    - id: byteCount
      type: System.Int32
      description: The number of bytes to decode.
    - id: chars
      type: System.Char[]
      description: The character array to contain the resulting set of characters.
    - id: charIndex
      type: System.Int32
      description: The index at which to start writing the resulting set of characters.
    return:
      type: System.Int32
      description: The actual number of characters written into <code>chars</code>.
  overload: System.Text.Decoder.GetChars*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>bytes</code> is `null` (`Nothing`).  \n  \n -or-  \n  \n <code>chars</code> is `null` (`Nothing`)."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>byteIndex</code> or <code>byteCount</code> or <code>charIndex</code> is less than zero.  \n  \n -or-  \n  \n <code>byteindex</code> and <code>byteCount</code> do not denote a valid range in <code>bytes</code>.  \n  \n -or-  \n  \n <code>charIndex</code> is not a valid index in <code>chars</code>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: <code>chars</code> does not have enough capacity from <code>charIndex</code> to the end of the array to accommodate the resulting characters.
  - type: System.Text.DecoderFallbackException
    commentId: T:System.Text.DecoderFallbackException
    description: "A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for fuller explanation)  \n  \n -and-  \n  \n <xref href=\"System.Text.Decoder.Fallback\"></xref> is set to <xref href=\"System.Text.DecoderExceptionFallback\"></xref>."
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/Decoder.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Text.Decoder.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32,System.Boolean)
  commentId: M:System.Text.Decoder.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32,System.Boolean)
  id: GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32,System.Boolean)
  parent: System.Text.Decoder
  langs:
  - csharp
  name: GetChars(Byte[], Int32, Int32, Char[], Int32, Boolean)
  nameWithType: Decoder.GetChars(Byte[], Int32, Int32, Char[], Int32, Boolean)
  fullName: Decoder.GetChars(Byte[], Int32, Int32, Char[], Int32, Boolean)
  type: Method
  assemblies:
  - System.Text.Encoding
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Text
  summary: When overridden in a derived class, decodes a sequence of bytes from the specified byte array and any bytes in the internal buffer into the specified character array. A parameter indicates whether to clear the internal state of the decoder after the conversion.
  remarks: "Remember that the <xref:System.Text.Decoder> object saves state between calls to <xref:System.Text.Decoder.GetChars%2A>. When the application is done with a stream of data, it should set the `flush` parameter to `true` to make sure that the state information is flushed. With this setting, the decoder ignores invalid bytes at the end of the data block and clears the internal buffer.  \n  \n To calculate the exact array size that `GetChars` requires to store the resulting characters, the application should use <xref:System.Text.Decoder.GetCharCount%2A>.  \n  \n If `GetChars` is called with `flush` set to `false`, the decoder stores trailing bytes at the end of the data block in an internal buffer and uses them in the next decoding operation. The application should call `GetCharCount` on a block of data immediately before calling `GetChars` on the same block, so that any trailing bytes from the previous block are included in the calculation.  \n  \n If your application is to convert many segments of an input stream, consider using the <xref:System.Text.Decoder.Convert%2A> method. <xref:System.Text.Decoder.GetChars%2A> will throw an exception if the output buffer isn't large enough, but <xref:System.Text.Decoder.Convert%2A> will fill as much space as possible and return the bytes read and chars written. Also see the <xref:System.Text.Encoding.GetChars%2A?displayProperty=fullName> topic for more comments."
  syntax:
    content: public virtual int GetChars (byte[] bytes, int byteIndex, int byteCount, char[] chars, int charIndex, bool flush);
    parameters:
    - id: bytes
      type: System.Byte[]
      description: The byte array containing the sequence of bytes to decode.
    - id: byteIndex
      type: System.Int32
      description: The index of the first byte to decode.
    - id: byteCount
      type: System.Int32
      description: The number of bytes to decode.
    - id: chars
      type: System.Char[]
      description: The character array to contain the resulting set of characters.
    - id: charIndex
      type: System.Int32
      description: The index at which to start writing the resulting set of characters.
    - id: flush
      type: System.Boolean
      description: '`true` to clear the internal state of the decoder after the conversion; otherwise, `false`.'
    return:
      type: System.Int32
      description: The actual number of characters written into the <code>chars</code> parameter.
  overload: System.Text.Decoder.GetChars*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>bytes</code> is `null` (`Nothing`).  \n  \n -or-  \n  \n <code>chars</code> is `null` (`Nothing`)."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>byteIndex</code> or <code>byteCount</code> or <code>charIndex</code> is less than zero.  \n  \n -or-  \n  \n <code>byteindex</code> and <code>byteCount</code> do not denote a valid range in <code>bytes</code>.  \n  \n -or-  \n  \n <code>charIndex</code> is not a valid index in <code>chars</code>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: <code>chars</code> does not have enough capacity from <code>charIndex</code> to the end of the array to accommodate the resulting characters.
  - type: System.Text.DecoderFallbackException
    commentId: T:System.Text.DecoderFallbackException
    description: "A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for fuller explanation)  \n  \n -and-  \n  \n <xref href=\"System.Text.Decoder.Fallback\"></xref> is set to <xref href=\"System.Text.DecoderExceptionFallback\"></xref>."
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/Decoder.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Text.Decoder.Reset
  commentId: M:System.Text.Decoder.Reset
  id: Reset
  parent: System.Text.Decoder
  langs:
  - csharp
  name: Reset()
  nameWithType: Decoder.Reset()
  fullName: Decoder.Reset()
  type: Method
  assemblies:
  - System.Text.Encoding
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Text
  summary: When overridden in a derived class, sets the decoder back to its initial state.
  remarks: "This method clears the internal state of the <xref:System.Text.Decoder> object. The method clears any state information preserved from a previous call to <xref:System.Text.Decoder.GetChars%2A> or <xref:System.Text.Decoder.Convert%2A>, including trailing bytes at the end of the previous data block.  \n  \n Your application should call the <xref:System.Text.Decoder.Reset%2A> method if it wants to reuse the same decoder even after an exception is thrown by <xref:System.Text.Decoder.GetChars%2A>, <xref:System.Text.Decoder.Convert%2A>, or <xref:System.Text.Decoder.GetCharCount%2A>, or if the decoder switches streams and begins to decode another stream."
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(false)]

      public virtual void Reset ();
    parameters: []
  overload: System.Text.Decoder.Reset*
  exceptions: []
  attributes:
  - type: System.Runtime.InteropServices.ComVisibleAttribute
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/Decoder.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
references:
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.ArgumentNullException
  parent: System
  isExternal: false
  name: ArgumentNullException
  nameWithType: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: System.ArgumentOutOfRangeException
  parent: System
  isExternal: false
  name: ArgumentOutOfRangeException
  nameWithType: ArgumentOutOfRangeException
  fullName: System.ArgumentOutOfRangeException
- uid: System.ArgumentException
  parent: System
  isExternal: false
  name: ArgumentException
  nameWithType: ArgumentException
  fullName: System.ArgumentException
- uid: System.Text.DecoderFallbackException
  parent: System.Text
  isExternal: false
  name: DecoderFallbackException
  nameWithType: DecoderFallbackException
  fullName: System.Text.DecoderFallbackException
- uid: System.Text.Decoder.#ctor
  parent: System.Text.Decoder
  isExternal: false
  name: Decoder()
  nameWithType: Decoder.Decoder()
  fullName: Decoder.Decoder()
- uid: System.Text.Decoder.Convert(System.Byte*,System.Int32,System.Char*,System.Int32,System.Boolean,System.Int32@,System.Int32@,System.Boolean@)
  parent: System.Text.Decoder
  isExternal: false
  name: Convert(Byte*, Int32, Char*, Int32, Boolean, Int32, Int32, Boolean)
  nameWithType: Decoder.Convert(Byte*, Int32, Char*, Int32, Boolean, Int32, Int32, Boolean)
  fullName: Decoder.Convert(Byte*, Int32, Char*, Int32, Boolean, Int32, Int32, Boolean)
- uid: System.Byte
  name: Byte
  nameWithType: Byte
  fullName: System.Byte
- uid: System.Byte*
  parent: System
  isExternal: false
  name: Byte*
  nameWithType: Byte*
  fullName: System.Byte*
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
  - name: '*'
    nameWithType: '*'
    fullName: '*'
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Char
  name: Char
  nameWithType: Char
  fullName: System.Char
- uid: System.Char*
  parent: System
  isExternal: false
  name: Char*
  nameWithType: Char*
  fullName: System.Char*
  spec.csharp:
  - uid: System.Char
    name: Char
    nameWithType: Char
    fullName: System.Char
  - name: '*'
    nameWithType: '*'
    fullName: '*'
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Text.Decoder.Convert(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32,System.Int32,System.Boolean,System.Int32@,System.Int32@,System.Boolean@)
  parent: System.Text.Decoder
  isExternal: false
  name: Convert(Byte[], Int32, Int32, Char[], Int32, Int32, Boolean, Int32, Int32, Boolean)
  nameWithType: Decoder.Convert(Byte[], Int32, Int32, Char[], Int32, Int32, Boolean, Int32, Int32, Boolean)
  fullName: Decoder.Convert(Byte[], Int32, Int32, Char[], Int32, Int32, Boolean, Int32, Int32, Boolean)
- uid: System.Byte[]
  parent: System
  isExternal: false
  name: Byte[]
  nameWithType: Byte[]
  fullName: System.Byte[]
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Char[]
  parent: System
  isExternal: false
  name: Char[]
  nameWithType: Char[]
  fullName: System.Char[]
  spec.csharp:
  - uid: System.Char
    name: Char
    nameWithType: Char
    fullName: System.Char
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Text.Decoder.Fallback
  parent: System.Text.Decoder
  isExternal: false
  name: Fallback
  nameWithType: Decoder.Fallback
  fullName: Decoder.Fallback
- uid: System.Text.DecoderFallback
  parent: System.Text
  isExternal: false
  name: DecoderFallback
  nameWithType: DecoderFallback
  fullName: System.Text.DecoderFallback
- uid: System.Text.Decoder.FallbackBuffer
  parent: System.Text.Decoder
  isExternal: false
  name: FallbackBuffer
  nameWithType: Decoder.FallbackBuffer
  fullName: Decoder.FallbackBuffer
- uid: System.Text.DecoderFallbackBuffer
  parent: System.Text
  isExternal: false
  name: DecoderFallbackBuffer
  nameWithType: DecoderFallbackBuffer
  fullName: System.Text.DecoderFallbackBuffer
- uid: System.Text.Decoder.GetCharCount(System.Byte*,System.Int32,System.Boolean)
  parent: System.Text.Decoder
  isExternal: false
  name: GetCharCount(Byte*, Int32, Boolean)
  nameWithType: Decoder.GetCharCount(Byte*, Int32, Boolean)
  fullName: Decoder.GetCharCount(Byte*, Int32, Boolean)
- uid: System.Text.Decoder.GetCharCount(System.Byte[],System.Int32,System.Int32)
  parent: System.Text.Decoder
  isExternal: false
  name: GetCharCount(Byte[], Int32, Int32)
  nameWithType: Decoder.GetCharCount(Byte[], Int32, Int32)
  fullName: Decoder.GetCharCount(Byte[], Int32, Int32)
- uid: System.Text.Decoder.GetCharCount(System.Byte[],System.Int32,System.Int32,System.Boolean)
  parent: System.Text.Decoder
  isExternal: false
  name: GetCharCount(Byte[], Int32, Int32, Boolean)
  nameWithType: Decoder.GetCharCount(Byte[], Int32, Int32, Boolean)
  fullName: Decoder.GetCharCount(Byte[], Int32, Int32, Boolean)
- uid: System.Text.Decoder.GetChars(System.Byte*,System.Int32,System.Char*,System.Int32,System.Boolean)
  parent: System.Text.Decoder
  isExternal: false
  name: GetChars(Byte*, Int32, Char*, Int32, Boolean)
  nameWithType: Decoder.GetChars(Byte*, Int32, Char*, Int32, Boolean)
  fullName: Decoder.GetChars(Byte*, Int32, Char*, Int32, Boolean)
- uid: System.Text.Decoder.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)
  parent: System.Text.Decoder
  isExternal: false
  name: GetChars(Byte[], Int32, Int32, Char[], Int32)
  nameWithType: Decoder.GetChars(Byte[], Int32, Int32, Char[], Int32)
  fullName: Decoder.GetChars(Byte[], Int32, Int32, Char[], Int32)
- uid: System.Text.Decoder.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32,System.Boolean)
  parent: System.Text.Decoder
  isExternal: false
  name: GetChars(Byte[], Int32, Int32, Char[], Int32, Boolean)
  nameWithType: Decoder.GetChars(Byte[], Int32, Int32, Char[], Int32, Boolean)
  fullName: Decoder.GetChars(Byte[], Int32, Int32, Char[], Int32, Boolean)
- uid: System.Text.Decoder.Reset
  parent: System.Text.Decoder
  isExternal: false
  name: Reset()
  nameWithType: Decoder.Reset()
  fullName: Decoder.Reset()
- uid: System.Text.Decoder.#ctor*
  parent: System.Text.Decoder
  isExternal: false
  name: Decoder
  nameWithType: Decoder.Decoder
  fullName: Decoder.Decoder
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/Decoder.xml
- uid: System.Text.Decoder.Convert*
  parent: System.Text.Decoder
  isExternal: false
  name: Convert
  nameWithType: Decoder.Convert
  fullName: Decoder.Convert
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  - netcore-1.0
  - netcore-1.1
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/Decoder.xml
- uid: System.Text.Decoder.Fallback*
  parent: System.Text.Decoder
  isExternal: false
  name: Fallback
  nameWithType: Decoder.Fallback
  fullName: Decoder.Fallback
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/Decoder.xml
- uid: System.Text.Decoder.FallbackBuffer*
  parent: System.Text.Decoder
  isExternal: false
  name: FallbackBuffer
  nameWithType: Decoder.FallbackBuffer
  fullName: Decoder.FallbackBuffer
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/Decoder.xml
- uid: System.Text.Decoder.GetCharCount*
  parent: System.Text.Decoder
  isExternal: false
  name: GetCharCount
  nameWithType: Decoder.GetCharCount
  fullName: Decoder.GetCharCount
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  - netcore-1.0
  - netcore-1.1
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/Decoder.xml
- uid: System.Text.Decoder.GetChars*
  parent: System.Text.Decoder
  isExternal: false
  name: GetChars
  nameWithType: Decoder.GetChars
  fullName: Decoder.GetChars
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  - netcore-1.0
  - netcore-1.1
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/Decoder.xml
- uid: System.Text.Decoder.Reset*
  parent: System.Text.Decoder
  isExternal: false
  name: Reset
  nameWithType: Decoder.Reset
  fullName: Decoder.Reset
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/Decoder.xml
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: false
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: Object.Equals(Object)
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: false
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: Object.Equals(Object, Object)
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: false
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: Object.GetHashCode()
- uid: System.Object.GetType
  parent: System.Object
  isExternal: false
  name: GetType()
  nameWithType: Object.GetType()
  fullName: Object.GetType()
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: false
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: Object.MemberwiseClone()
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: false
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: Object.ReferenceEquals(Object, Object)
- uid: System.Object.ToString
  parent: System.Object
  isExternal: false
  name: ToString()
  nameWithType: Object.ToString()
  fullName: Object.ToString()
