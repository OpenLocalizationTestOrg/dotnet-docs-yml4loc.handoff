{"nodes":[{"content":"Represents the class that describes how to marshal a field from managed to unmanaged code. This class cannot be inherited.","nodes":[{"pos":[0,122],"content":"Represents the class that describes how to marshal a field from managed to unmanaged code. This class cannot be inherited.","nodes":[{"content":"Represents the class that describes how to marshal a field from managed to unmanaged code. This class cannot be inherited.","pos":[0,122],"nodes":[{"content":"Represents the class that describes how to marshal a field from managed to unmanaged code.","pos":[0,90]},{"content":"This class cannot be inherited.","pos":[91,122]}]}]}],"pos":[1086,1209],"yaml":true},{"content":"The code example shows the workaround for this obsolete type.  \n  \n Marshaling is the process of packaging and unpackaging parameters so remote procedure calls can occur. During marshaling, a field might undergo a format conversion when the format of the managed type is different from the format of the corresponding unmanaged type. For example, you might want to marshal a `String` type as an unmanaged BSTR. Some format conversions are handled automatically by the runtime. To override the default behavior, you must use the `UnmanagedMarshal` class to define the format conversion.","nodes":[{"pos":[0,61],"content":"The code example shows the workaround for this obsolete type.","nodes":[{"content":"The code example shows the workaround for this obsolete type.","pos":[0,61]}]},{"pos":[68,585],"content":"Marshaling is the process of packaging and unpackaging parameters so remote procedure calls can occur. During marshaling, a field might undergo a format conversion when the format of the managed type is different from the format of the corresponding unmanaged type. For example, you might want to marshal a `String` type as an unmanaged BSTR. Some format conversions are handled automatically by the runtime. To override the default behavior, you must use the `UnmanagedMarshal` class to define the format conversion.","nodes":[{"content":"Marshaling is the process of packaging and unpackaging parameters so remote procedure calls can occur.","pos":[0,102]},{"content":"During marshaling, a field might undergo a format conversion when the format of the managed type is different from the format of the corresponding unmanaged type.","pos":[103,265]},{"content":"For example, you might want to marshal a <ph id=\"ph1\">`String`</ph> type as an unmanaged BSTR.","pos":[266,342],"source":" For example, you might want to marshal a `String` type as an unmanaged BSTR."},{"content":"Some format conversions are handled automatically by the runtime.","pos":[343,408]},{"content":"To override the default behavior, you must use the <ph id=\"ph1\">`UnmanagedMarshal`</ph> class to define the format conversion.","pos":[409,517],"source":" To override the default behavior, you must use the `UnmanagedMarshal` class to define the format conversion."}]}],"pos":[1220,1810],"yaml":true,"extradata":"MT"},{"content":"Gets an unmanaged base type. This property is read-only.","nodes":[{"pos":[0,56],"content":"Gets an unmanaged base type. This property is read-only.","nodes":[{"content":"Gets an unmanaged base type. This property is read-only.","pos":[0,56],"nodes":[{"content":"Gets an unmanaged base type.","pos":[0,28]},{"content":"This property is read-only.","pos":[29,56]}]}]}],"pos":[4609,4666],"yaml":true},{"content":"An `UnmanagedType` object.","nodes":[{"pos":[0,26],"content":"An <ph id=\"ph1\">`UnmanagedType`</ph> object.","source":"An `UnmanagedType` object."}],"pos":[4847,4874],"yaml":true},{"content":"The unmanaged type is not an `LPArray` or a `SafeArray`.","nodes":[{"pos":[0,56],"content":"The unmanaged type is not an <ph id=\"ph1\">`LPArray`</ph> or a <ph id=\"ph2\">`SafeArray`</ph>.","source":"The unmanaged type is not an `LPArray` or a `SafeArray`."}],"pos":[5044,5101],"yaml":true},{"content":"Specifies a fixed-length array (ByValArray) to marshal to unmanaged code.","nodes":[{"pos":[0,73],"content":"Specifies a fixed-length array (ByValArray) to marshal to unmanaged code.","nodes":[{"content":"Specifies a fixed-length array (ByValArray) to marshal to unmanaged code.","pos":[0,73]}]}],"pos":[6227,6301],"yaml":true},{"content":"The `DefineByValArray` method is not a simple native marshal.  \n  \n Only unmanaged marshal constructs can be made using these static constructors.  \n  \n Marshaling an array is a more complex process than marshaling an integer parameter. Array members are copied in a specific order so that the other side can reconstruct the array exactly.","nodes":[{"pos":[0,61],"content":"The <ph id=\"ph1\">`DefineByValArray`</ph> method is not a simple native marshal.","source":"The `DefineByValArray` method is not a simple native marshal."},{"pos":[68,146],"content":"Only unmanaged marshal constructs can be made using these static constructors.","nodes":[{"content":"Only unmanaged marshal constructs can be made using these static constructors.","pos":[0,78]}]},{"pos":[153,339],"content":"Marshaling an array is a more complex process than marshaling an integer parameter. Array members are copied in a specific order so that the other side can reconstruct the array exactly.","nodes":[{"content":"Marshaling an array is a more complex process than marshaling an integer parameter. Array members are copied in a specific order so that the other side can reconstruct the array exactly.","pos":[0,186],"nodes":[{"content":"Marshaling an array is a more complex process than marshaling an integer parameter.","pos":[0,83]},{"content":"Array members are copied in a specific order so that the other side can reconstruct the array exactly.","pos":[84,186]}]}]}],"pos":[6312,6658],"yaml":true,"extradata":"MT"},{"content":"The number of elements in the fixed-length array.","nodes":[{"pos":[0,49],"content":"The number of elements in the fixed-length array.","nodes":[{"content":"The number of elements in the fixed-length array.","pos":[0,49]}]}],"pos":[6849,6899],"yaml":true},{"content":"An <xref href=\"System.Reflection.Emit.UnmanagedMarshal\"></xref> object.","nodes":[{"pos":[0,71],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Reflection.Emit.UnmanagedMarshal\"&gt;&lt;/xref&gt;</ph> object.","source":"An <xref href=\"System.Reflection.Emit.UnmanagedMarshal\"></xref> object."}],"pos":[6982,7054],"yaml":true},{"content":"The argument is not a simple native type.","nodes":[{"pos":[0,41],"content":"The argument is not a simple native type.","nodes":[{"content":"The argument is not a simple native type.","pos":[0,41]}]}],"pos":[7232,7274],"yaml":true},{"content":"Specifies a string in a fixed array buffer (ByValTStr) to marshal to unmanaged code.","nodes":[{"pos":[0,84],"content":"Specifies a string in a fixed array buffer (ByValTStr) to marshal to unmanaged code.","nodes":[{"content":"Specifies a string in a fixed array buffer (ByValTStr) to marshal to unmanaged code.","pos":[0,84]}]}],"pos":[8394,8479],"yaml":true},{"content":"The `DefineByValStr` method is not a simple native marshal.  \n  \n Only unmanaged marshal constructs can be made using these static constructors.  \n  \n Marshaling an array is a more complex process than marshaling an integer parameter. Array members are copied in a specific order so that the other side can reconstruct the array exactly.","nodes":[{"pos":[0,59],"content":"The <ph id=\"ph1\">`DefineByValStr`</ph> method is not a simple native marshal.","source":"The `DefineByValStr` method is not a simple native marshal."},{"pos":[66,144],"content":"Only unmanaged marshal constructs can be made using these static constructors.","nodes":[{"content":"Only unmanaged marshal constructs can be made using these static constructors.","pos":[0,78]}]},{"pos":[151,337],"content":"Marshaling an array is a more complex process than marshaling an integer parameter. Array members are copied in a specific order so that the other side can reconstruct the array exactly.","nodes":[{"content":"Marshaling an array is a more complex process than marshaling an integer parameter. Array members are copied in a specific order so that the other side can reconstruct the array exactly.","pos":[0,186],"nodes":[{"content":"Marshaling an array is a more complex process than marshaling an integer parameter.","pos":[0,83]},{"content":"Array members are copied in a specific order so that the other side can reconstruct the array exactly.","pos":[84,186]}]}]}],"pos":[8490,8834],"yaml":true,"extradata":"MT"},{"content":"The number of elements in the fixed array buffer.","nodes":[{"pos":[0,49],"content":"The number of elements in the fixed array buffer.","nodes":[{"content":"The number of elements in the fixed array buffer.","pos":[0,49]}]}],"pos":[9024,9074],"yaml":true},{"content":"An <xref href=\"System.Reflection.Emit.UnmanagedMarshal\"></xref> object.","nodes":[{"pos":[0,71],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Reflection.Emit.UnmanagedMarshal\"&gt;&lt;/xref&gt;</ph> object.","source":"An <xref href=\"System.Reflection.Emit.UnmanagedMarshal\"></xref> object."}],"pos":[9157,9229],"yaml":true},{"content":"The argument is not a simple native type.","nodes":[{"pos":[0,41],"content":"The argument is not a simple native type.","nodes":[{"content":"The argument is not a simple native type.","pos":[0,41]}]}],"pos":[9406,9448],"yaml":true},{"content":"Specifies an `LPArray` to marshal to unmanaged code. The length of an `LPArray` is determined at runtime by the size of the actual marshaled array.","nodes":[{"pos":[0,147],"content":"Specifies an `LPArray` to marshal to unmanaged code. The length of an `LPArray` is determined at runtime by the size of the actual marshaled array.","nodes":[{"content":"Specifies an <ph id=\"ph1\">`LPArray`</ph> to marshal to unmanaged code.","pos":[0,52],"source":"Specifies an `LPArray` to marshal to unmanaged code."},{"content":"The length of an <ph id=\"ph1\">`LPArray`</ph> is determined at runtime by the size of the actual marshaled array.","pos":[53,147],"source":" The length of an `LPArray` is determined at runtime by the size of the actual marshaled array."}]}],"pos":[10676,10824],"yaml":true},{"content":"The `DefineLPArray` method is not a simple native marshal.  \n  \n Only unmanaged marshal constructs can be made using these static constructors.  \n  \n Marshaling an array is a more complex process than marshaling an integer parameter. Array members are copied in a specific order so that the other side can reconstruct the array exactly.","nodes":[{"pos":[0,58],"content":"The <ph id=\"ph1\">`DefineLPArray`</ph> method is not a simple native marshal.","source":"The `DefineLPArray` method is not a simple native marshal."},{"pos":[65,143],"content":"Only unmanaged marshal constructs can be made using these static constructors.","nodes":[{"content":"Only unmanaged marshal constructs can be made using these static constructors.","pos":[0,78]}]},{"pos":[150,336],"content":"Marshaling an array is a more complex process than marshaling an integer parameter. Array members are copied in a specific order so that the other side can reconstruct the array exactly.","nodes":[{"content":"Marshaling an array is a more complex process than marshaling an integer parameter. Array members are copied in a specific order so that the other side can reconstruct the array exactly.","pos":[0,186],"nodes":[{"content":"Marshaling an array is a more complex process than marshaling an integer parameter.","pos":[0,83]},{"content":"Array members are copied in a specific order so that the other side can reconstruct the array exactly.","pos":[84,186]}]}]}],"pos":[10835,11178],"yaml":true,"extradata":"MT"},{"content":"The unmanaged type to which to marshal the array.","nodes":[{"pos":[0,49],"content":"The unmanaged type to which to marshal the array.","nodes":[{"content":"The unmanaged type to which to marshal the array.","pos":[0,49]}]}],"pos":[11437,11487],"yaml":true},{"content":"An <xref href=\"System.Reflection.Emit.UnmanagedMarshal\"></xref> object.","nodes":[{"pos":[0,71],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Reflection.Emit.UnmanagedMarshal\"&gt;&lt;/xref&gt;</ph> object.","source":"An <xref href=\"System.Reflection.Emit.UnmanagedMarshal\"></xref> object."}],"pos":[11570,11642],"yaml":true},{"content":"The argument is not a simple native type.","nodes":[{"pos":[0,41],"content":"The argument is not a simple native type.","nodes":[{"content":"The argument is not a simple native type.","pos":[0,41]}]}],"pos":[11817,11859],"yaml":true},{"content":"Specifies a `SafeArray` to marshal to unmanaged code.","nodes":[{"pos":[0,53],"content":"Specifies a <ph id=\"ph1\">`SafeArray`</ph> to marshal to unmanaged code.","source":"Specifies a `SafeArray` to marshal to unmanaged code."}],"pos":[13099,13153],"yaml":true},{"content":"The `DefineSafeArray` method is not a simple native marshal.  \n  \n Only unmanaged marshal constructs can be made using these static constructors.  \n  \n Marshaling an array is a more complex process than marshaling an integer parameter. Array members are copied in a specific order so that the other side can reconstruct the array exactly.","nodes":[{"pos":[0,60],"content":"The <ph id=\"ph1\">`DefineSafeArray`</ph> method is not a simple native marshal.","source":"The `DefineSafeArray` method is not a simple native marshal."},{"pos":[67,145],"content":"Only unmanaged marshal constructs can be made using these static constructors.","nodes":[{"content":"Only unmanaged marshal constructs can be made using these static constructors.","pos":[0,78]}]},{"pos":[152,338],"content":"Marshaling an array is a more complex process than marshaling an integer parameter. Array members are copied in a specific order so that the other side can reconstruct the array exactly.","nodes":[{"content":"Marshaling an array is a more complex process than marshaling an integer parameter. Array members are copied in a specific order so that the other side can reconstruct the array exactly.","pos":[0,186],"nodes":[{"content":"Marshaling an array is a more complex process than marshaling an integer parameter.","pos":[0,83]},{"content":"Array members are copied in a specific order so that the other side can reconstruct the array exactly.","pos":[84,186]}]}]}],"pos":[13164,13509],"yaml":true,"extradata":"MT"},{"content":"The base type or the `UnmanagedType` of each element of the array.","nodes":[{"pos":[0,66],"content":"The base type or the <ph id=\"ph1\">`UnmanagedType`</ph> of each element of the array.","source":"The base type or the `UnmanagedType` of each element of the array."}],"pos":[13770,13837],"yaml":true},{"content":"An <xref href=\"System.Reflection.Emit.UnmanagedMarshal\"></xref> object.","nodes":[{"pos":[0,71],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Reflection.Emit.UnmanagedMarshal\"&gt;&lt;/xref&gt;</ph> object.","source":"An <xref href=\"System.Reflection.Emit.UnmanagedMarshal\"></xref> object."}],"pos":[13920,13992],"yaml":true},{"content":"The argument is not a simple native type.","nodes":[{"pos":[0,41],"content":"The argument is not a simple native type.","nodes":[{"content":"The argument is not a simple native type.","pos":[0,41]}]}],"pos":[14169,14211],"yaml":true},{"content":"Specifies a given type that is to be marshaled to unmanaged code.","nodes":[{"pos":[0,65],"content":"Specifies a given type that is to be marshaled to unmanaged code.","nodes":[{"content":"Specifies a given type that is to be marshaled to unmanaged code.","pos":[0,65]}]}],"pos":[15493,15559],"yaml":true},{"content":"The <xref:System.Runtime.InteropServices.UnmanagedType> passed to this method must be a simple native type. None of the following values may be used: <xref:System.Runtime.InteropServices.UnmanagedType?displayProperty=fullName>, <xref:System.Runtime.InteropServices.UnmanagedType?displayProperty=fullName>, <xref:System.Runtime.InteropServices.UnmanagedType?displayProperty=fullName>, <xref:System.Runtime.InteropServices.UnmanagedType?displayProperty=fullName>, or <xref:System.Runtime.InteropServices.UnmanagedType?displayProperty=fullName>.  \n  \n Only unmanaged marshal constructs can be made using this method.","nodes":[{"pos":[0,542],"content":"The <xref:System.Runtime.InteropServices.UnmanagedType> passed to this method must be a simple native type. None of the following values may be used: <xref:System.Runtime.InteropServices.UnmanagedType?displayProperty=fullName>, <xref:System.Runtime.InteropServices.UnmanagedType?displayProperty=fullName>, <xref:System.Runtime.InteropServices.UnmanagedType?displayProperty=fullName>, <xref:System.Runtime.InteropServices.UnmanagedType?displayProperty=fullName>, or <xref:System.Runtime.InteropServices.UnmanagedType?displayProperty=fullName>.","nodes":[{"content":"The <xref:System.Runtime.InteropServices.UnmanagedType> passed to this method must be a simple native type. None of the following values may be used: <xref:System.Runtime.InteropServices.UnmanagedType?displayProperty=fullName>, <xref:System.Runtime.InteropServices.UnmanagedType?displayProperty=fullName>, <xref:System.Runtime.InteropServices.UnmanagedType?displayProperty=fullName>, <xref:System.Runtime.InteropServices.UnmanagedType?displayProperty=fullName>, or <xref:System.Runtime.InteropServices.UnmanagedType?displayProperty=fullName>.","pos":[0,542],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Runtime.InteropServices.UnmanagedType&gt;</ph> passed to this method must be a simple native type.","pos":[0,107],"source":"The <xref:System.Runtime.InteropServices.UnmanagedType> passed to this method must be a simple native type."},{"content":"None of the following values may be used: <ph id=\"ph1\">&lt;xref:System.Runtime.InteropServices.UnmanagedType?displayProperty=fullName&gt;</ph>, <ph id=\"ph2\">&lt;xref:System.Runtime.InteropServices.UnmanagedType?displayProperty=fullName&gt;</ph>, <ph id=\"ph3\">&lt;xref:System.Runtime.InteropServices.UnmanagedType?displayProperty=fullName&gt;</ph>, <ph id=\"ph4\">&lt;xref:System.Runtime.InteropServices.UnmanagedType?displayProperty=fullName&gt;</ph>, or <ph id=\"ph5\">&lt;xref:System.Runtime.InteropServices.UnmanagedType?displayProperty=fullName&gt;</ph>.","pos":[108,542],"source":" None of the following values may be used: <xref:System.Runtime.InteropServices.UnmanagedType?displayProperty=fullName>, <xref:System.Runtime.InteropServices.UnmanagedType?displayProperty=fullName>, <xref:System.Runtime.InteropServices.UnmanagedType?displayProperty=fullName>, <xref:System.Runtime.InteropServices.UnmanagedType?displayProperty=fullName>, or <xref:System.Runtime.InteropServices.UnmanagedType?displayProperty=fullName>."}]}]},{"pos":[549,613],"content":"Only unmanaged marshal constructs can be made using this method.","nodes":[{"content":"Only unmanaged marshal constructs can be made using this method.","pos":[0,64]}]}],"pos":[15570,16188],"yaml":true,"extradata":"MT"},{"content":"The unmanaged type to which the type is to be marshaled.","nodes":[{"pos":[0,56],"content":"The unmanaged type to which the type is to be marshaled.","nodes":[{"content":"The unmanaged type to which the type is to be marshaled.","pos":[0,56]}]}],"pos":[16466,16523],"yaml":true},{"content":"An <xref href=\"System.Reflection.Emit.UnmanagedMarshal\"></xref> object.","nodes":[{"pos":[0,71],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Reflection.Emit.UnmanagedMarshal\"&gt;&lt;/xref&gt;</ph> object.","source":"An <xref href=\"System.Reflection.Emit.UnmanagedMarshal\"></xref> object."}],"pos":[16606,16678],"yaml":true},{"content":"The argument is not a simple native type.","nodes":[{"pos":[0,41],"content":"The argument is not a simple native type.","nodes":[{"content":"The argument is not a simple native type.","pos":[0,41]}]}],"pos":[16862,16904],"yaml":true},{"content":"Gets a number element. This property is read-only.","nodes":[{"pos":[0,50],"content":"Gets a number element. This property is read-only.","nodes":[{"content":"Gets a number element. This property is read-only.","pos":[0,50],"nodes":[{"content":"Gets a number element.","pos":[0,22]},{"content":"This property is read-only.","pos":[23,50]}]}]}],"pos":[17945,17996],"yaml":true},{"content":"There is an `ElementCount` only if there is a `NativeTypeFixedArray`.","nodes":[{"pos":[0,69],"content":"There is an <ph id=\"ph1\">`ElementCount`</ph> only if there is a <ph id=\"ph2\">`NativeTypeFixedArray`</ph>.","source":"There is an `ElementCount` only if there is a `NativeTypeFixedArray`."}],"pos":[18007,18077],"yaml":true,"extradata":"MT"},{"content":"An integer indicating the element count.","nodes":[{"pos":[0,40],"content":"An integer indicating the element count.","nodes":[{"content":"An integer indicating the element count.","pos":[0,40]}]}],"pos":[18189,18230],"yaml":true},{"content":"The argument is not an unmanaged element count.","nodes":[{"pos":[0,47],"content":"The argument is not an unmanaged element count.","nodes":[{"content":"The argument is not an unmanaged element count.","pos":[0,47]}]}],"pos":[18404,18452],"yaml":true},{"content":"Indicates an unmanaged type. This property is read-only.","nodes":[{"pos":[0,56],"content":"Indicates an unmanaged type. This property is read-only.","nodes":[{"content":"Indicates an unmanaged type. This property is read-only.","pos":[0,56],"nodes":[{"content":"Indicates an unmanaged type.","pos":[0,28]},{"content":"This property is read-only.","pos":[29,56]}]}]}],"pos":[19517,19574],"yaml":true},{"content":"The `GetUnmanagedType` property is an accessor function for the native type.","nodes":[{"pos":[0,76],"content":"The <ph id=\"ph1\">`GetUnmanagedType`</ph> property is an accessor function for the native type.","source":"The `GetUnmanagedType` property is an accessor function for the native type."}],"pos":[19585,19662],"yaml":true,"extradata":"MT"},{"content":"An <xref href=\"System.Runtime.InteropServices.UnmanagedType\"></xref> object.","nodes":[{"pos":[0,76],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Runtime.InteropServices.UnmanagedType\"&gt;&lt;/xref&gt;</ph> object.","source":"An <xref href=\"System.Runtime.InteropServices.UnmanagedType\"></xref> object."}],"pos":[19851,19928],"yaml":true},{"content":"Gets a GUID. This property is read-only.","nodes":[{"pos":[0,40],"content":"Gets a GUID. This property is read-only.","nodes":[{"content":"Gets a GUID. This property is read-only.","pos":[0,40],"nodes":[{"content":"Gets a GUID.","pos":[0,12]},{"content":"This property is read-only.","pos":[13,40]}]}]}],"pos":[21026,21067],"yaml":true},{"content":"This property always returns Guid.Empty. This property might be removed in a future release.","nodes":[{"pos":[0,92],"content":"This property always returns Guid.Empty. This property might be removed in a future release.","nodes":[{"content":"This property always returns Guid.Empty. This property might be removed in a future release.","pos":[0,92],"nodes":[{"content":"This property always returns Guid.Empty.","pos":[0,40]},{"content":"This property might be removed in a future release.","pos":[41,92]}]}]}],"pos":[21078,21171],"yaml":true,"extradata":"MT"},{"content":"A <xref href=\"System.Guid\"></xref> object.","nodes":[{"pos":[0,42],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Guid\"&gt;&lt;/xref&gt;</ph> object.","source":"A <xref href=\"System.Guid\"></xref> object."}],"pos":[21278,21321],"yaml":true},{"content":"The argument is not a custom marshaler.","nodes":[{"pos":[0,39],"content":"The argument is not a custom marshaler.","nodes":[{"content":"The argument is not a custom marshaler.","pos":[0,39]}]}],"pos":[21490,21530],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Reflection.Emit.UnmanagedMarshal\n  commentId: T:System.Reflection.Emit.UnmanagedMarshal\n  id: UnmanagedMarshal\n  children:\n  - System.Reflection.Emit.UnmanagedMarshal.BaseType\n  - System.Reflection.Emit.UnmanagedMarshal.DefineByValArray(System.Int32)\n  - System.Reflection.Emit.UnmanagedMarshal.DefineByValTStr(System.Int32)\n  - System.Reflection.Emit.UnmanagedMarshal.DefineLPArray(System.Runtime.InteropServices.UnmanagedType)\n  - System.Reflection.Emit.UnmanagedMarshal.DefineSafeArray(System.Runtime.InteropServices.UnmanagedType)\n  - System.Reflection.Emit.UnmanagedMarshal.DefineUnmanagedMarshal(System.Runtime.InteropServices.UnmanagedType)\n  - System.Reflection.Emit.UnmanagedMarshal.ElementCount\n  - System.Reflection.Emit.UnmanagedMarshal.GetUnmanagedType\n  - System.Reflection.Emit.UnmanagedMarshal.IIDGuid\n  langs:\n  - csharp\n  name: UnmanagedMarshal\n  nameWithType: UnmanagedMarshal\n  fullName: System.Reflection.Emit.UnmanagedMarshal\n  type: Class\n  assemblies:\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Represents the class that describes how to marshal a field from managed to unmanaged code. This class cannot be inherited.\n  remarks: \"The code example shows the workaround for this obsolete type.  \\n  \\n Marshaling is the process of packaging and unpackaging parameters so remote procedure calls can occur. During marshaling, a field might undergo a format conversion when the format of the managed type is different from the format of the corresponding unmanaged type. For example, you might want to marshal a `String` type as an unmanaged BSTR. Some format conversions are handled automatically by the runtime. To override the default behavior, you must use the `UnmanagedMarshal` class to define the format conversion.\"\n  example:\n  - \"The following code example shows replacement code for the obsolete <xref:System.Reflection.Emit.UnmanagedMarshal> type. The example emits a single-module assembly named `EmitMarshalAs.dll`, containing a type named `Sample`. The type has a method named `Test`, with one parameter of type <xref:System.String>. The code example applies the <xref:System.Runtime.InteropServices.MarshalAsAttribute> with <xref:System.Runtime.InteropServices.UnmanagedType?displayProperty=fullName> to the parameter.  \\n  \\n You can use the [Ildasm.exe (IL Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md) to examine the emitted assembly and observe that the parameter is marked `marshal(bstr)`.  \\n  \\n [!code-cpp[UnmanagedMarshalObsolete#1](~/samples/snippets/cpp/VS_Snippets_CLR/UnmanagedMarshalObsolete/cpp/source.cpp#1)]\\n [!code-csharp[UnmanagedMarshalObsolete#1](~/samples/snippets/csharp/VS_Snippets_CLR/UnmanagedMarshalObsolete/cs/source.cs#1)]\\n [!code-vb[UnmanagedMarshalObsolete#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/UnmanagedMarshalObsolete/vb/source.vb#1)]\"\n  syntax:\n    content: >-\n      [System.Obsolete(\"An alternate API is available: Emit the MarshalAs custom attribute instead.\")]\n\n      [System.Runtime.InteropServices.ComVisible(true)]\n\n      public sealed class UnmanagedMarshal\n  inheritance:\n  - System.Object\n  implements: []\n  inheritedMembers:\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.ToString\n  attributes:\n  - type: System.ObsoleteAttribute\n  - type: System.Runtime.InteropServices.ComVisibleAttribute\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/UnmanagedMarshal.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.UnmanagedMarshal.BaseType\n  commentId: P:System.Reflection.Emit.UnmanagedMarshal.BaseType\n  id: BaseType\n  parent: System.Reflection.Emit.UnmanagedMarshal\n  langs:\n  - csharp\n  name: BaseType\n  nameWithType: UnmanagedMarshal.BaseType\n  fullName: UnmanagedMarshal.BaseType\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Gets an unmanaged base type. This property is read-only.\n  syntax:\n    content: public System.Runtime.InteropServices.UnmanagedType BaseType { get; }\n    return:\n      type: System.Runtime.InteropServices.UnmanagedType\n      description: An `UnmanagedType` object.\n  overload: System.Reflection.Emit.UnmanagedMarshal.BaseType*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The unmanaged type is not an `LPArray` or a `SafeArray`.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/UnmanagedMarshal.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.UnmanagedMarshal.DefineByValArray(System.Int32)\n  commentId: M:System.Reflection.Emit.UnmanagedMarshal.DefineByValArray(System.Int32)\n  id: DefineByValArray(System.Int32)\n  parent: System.Reflection.Emit.UnmanagedMarshal\n  langs:\n  - csharp\n  name: DefineByValArray(Int32)\n  nameWithType: UnmanagedMarshal.DefineByValArray(Int32)\n  fullName: UnmanagedMarshal.DefineByValArray(Int32)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Specifies a fixed-length array (ByValArray) to marshal to unmanaged code.\n  remarks: \"The `DefineByValArray` method is not a simple native marshal.  \\n  \\n Only unmanaged marshal constructs can be made using these static constructors.  \\n  \\n Marshaling an array is a more complex process than marshaling an integer parameter. Array members are copied in a specific order so that the other side can reconstruct the array exactly.\"\n  syntax:\n    content: public static System.Reflection.Emit.UnmanagedMarshal DefineByValArray (int elemCount);\n    parameters:\n    - id: elemCount\n      type: System.Int32\n      description: The number of elements in the fixed-length array.\n    return:\n      type: System.Reflection.Emit.UnmanagedMarshal\n      description: An <xref href=\"System.Reflection.Emit.UnmanagedMarshal\"></xref> object.\n  overload: System.Reflection.Emit.UnmanagedMarshal.DefineByValArray*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The argument is not a simple native type.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/UnmanagedMarshal.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.UnmanagedMarshal.DefineByValTStr(System.Int32)\n  commentId: M:System.Reflection.Emit.UnmanagedMarshal.DefineByValTStr(System.Int32)\n  id: DefineByValTStr(System.Int32)\n  parent: System.Reflection.Emit.UnmanagedMarshal\n  langs:\n  - csharp\n  name: DefineByValTStr(Int32)\n  nameWithType: UnmanagedMarshal.DefineByValTStr(Int32)\n  fullName: UnmanagedMarshal.DefineByValTStr(Int32)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Specifies a string in a fixed array buffer (ByValTStr) to marshal to unmanaged code.\n  remarks: \"The `DefineByValStr` method is not a simple native marshal.  \\n  \\n Only unmanaged marshal constructs can be made using these static constructors.  \\n  \\n Marshaling an array is a more complex process than marshaling an integer parameter. Array members are copied in a specific order so that the other side can reconstruct the array exactly.\"\n  syntax:\n    content: public static System.Reflection.Emit.UnmanagedMarshal DefineByValTStr (int elemCount);\n    parameters:\n    - id: elemCount\n      type: System.Int32\n      description: The number of elements in the fixed array buffer.\n    return:\n      type: System.Reflection.Emit.UnmanagedMarshal\n      description: An <xref href=\"System.Reflection.Emit.UnmanagedMarshal\"></xref> object.\n  overload: System.Reflection.Emit.UnmanagedMarshal.DefineByValTStr*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The argument is not a simple native type.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/UnmanagedMarshal.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.UnmanagedMarshal.DefineLPArray(System.Runtime.InteropServices.UnmanagedType)\n  commentId: M:System.Reflection.Emit.UnmanagedMarshal.DefineLPArray(System.Runtime.InteropServices.UnmanagedType)\n  id: DefineLPArray(System.Runtime.InteropServices.UnmanagedType)\n  parent: System.Reflection.Emit.UnmanagedMarshal\n  langs:\n  - csharp\n  name: DefineLPArray(UnmanagedType)\n  nameWithType: UnmanagedMarshal.DefineLPArray(UnmanagedType)\n  fullName: UnmanagedMarshal.DefineLPArray(UnmanagedType)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Specifies an `LPArray` to marshal to unmanaged code. The length of an `LPArray` is determined at runtime by the size of the actual marshaled array.\n  remarks: \"The `DefineLPArray` method is not a simple native marshal.  \\n  \\n Only unmanaged marshal constructs can be made using these static constructors.  \\n  \\n Marshaling an array is a more complex process than marshaling an integer parameter. Array members are copied in a specific order so that the other side can reconstruct the array exactly.\"\n  syntax:\n    content: public static System.Reflection.Emit.UnmanagedMarshal DefineLPArray (System.Runtime.InteropServices.UnmanagedType elemType);\n    parameters:\n    - id: elemType\n      type: System.Runtime.InteropServices.UnmanagedType\n      description: The unmanaged type to which to marshal the array.\n    return:\n      type: System.Reflection.Emit.UnmanagedMarshal\n      description: An <xref href=\"System.Reflection.Emit.UnmanagedMarshal\"></xref> object.\n  overload: System.Reflection.Emit.UnmanagedMarshal.DefineLPArray*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The argument is not a simple native type.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/UnmanagedMarshal.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.UnmanagedMarshal.DefineSafeArray(System.Runtime.InteropServices.UnmanagedType)\n  commentId: M:System.Reflection.Emit.UnmanagedMarshal.DefineSafeArray(System.Runtime.InteropServices.UnmanagedType)\n  id: DefineSafeArray(System.Runtime.InteropServices.UnmanagedType)\n  parent: System.Reflection.Emit.UnmanagedMarshal\n  langs:\n  - csharp\n  name: DefineSafeArray(UnmanagedType)\n  nameWithType: UnmanagedMarshal.DefineSafeArray(UnmanagedType)\n  fullName: UnmanagedMarshal.DefineSafeArray(UnmanagedType)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Specifies a `SafeArray` to marshal to unmanaged code.\n  remarks: \"The `DefineSafeArray` method is not a simple native marshal.  \\n  \\n Only unmanaged marshal constructs can be made using these static constructors.  \\n  \\n Marshaling an array is a more complex process than marshaling an integer parameter. Array members are copied in a specific order so that the other side can reconstruct the array exactly.\"\n  syntax:\n    content: public static System.Reflection.Emit.UnmanagedMarshal DefineSafeArray (System.Runtime.InteropServices.UnmanagedType elemType);\n    parameters:\n    - id: elemType\n      type: System.Runtime.InteropServices.UnmanagedType\n      description: The base type or the `UnmanagedType` of each element of the array.\n    return:\n      type: System.Reflection.Emit.UnmanagedMarshal\n      description: An <xref href=\"System.Reflection.Emit.UnmanagedMarshal\"></xref> object.\n  overload: System.Reflection.Emit.UnmanagedMarshal.DefineSafeArray*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The argument is not a simple native type.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/UnmanagedMarshal.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.UnmanagedMarshal.DefineUnmanagedMarshal(System.Runtime.InteropServices.UnmanagedType)\n  commentId: M:System.Reflection.Emit.UnmanagedMarshal.DefineUnmanagedMarshal(System.Runtime.InteropServices.UnmanagedType)\n  id: DefineUnmanagedMarshal(System.Runtime.InteropServices.UnmanagedType)\n  parent: System.Reflection.Emit.UnmanagedMarshal\n  langs:\n  - csharp\n  name: DefineUnmanagedMarshal(UnmanagedType)\n  nameWithType: UnmanagedMarshal.DefineUnmanagedMarshal(UnmanagedType)\n  fullName: UnmanagedMarshal.DefineUnmanagedMarshal(UnmanagedType)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Specifies a given type that is to be marshaled to unmanaged code.\n  remarks: \"The <xref:System.Runtime.InteropServices.UnmanagedType> passed to this method must be a simple native type. None of the following values may be used: <xref:System.Runtime.InteropServices.UnmanagedType?displayProperty=fullName>, <xref:System.Runtime.InteropServices.UnmanagedType?displayProperty=fullName>, <xref:System.Runtime.InteropServices.UnmanagedType?displayProperty=fullName>, <xref:System.Runtime.InteropServices.UnmanagedType?displayProperty=fullName>, or <xref:System.Runtime.InteropServices.UnmanagedType?displayProperty=fullName>.  \\n  \\n Only unmanaged marshal constructs can be made using this method.\"\n  syntax:\n    content: public static System.Reflection.Emit.UnmanagedMarshal DefineUnmanagedMarshal (System.Runtime.InteropServices.UnmanagedType unmanagedType);\n    parameters:\n    - id: unmanagedType\n      type: System.Runtime.InteropServices.UnmanagedType\n      description: The unmanaged type to which the type is to be marshaled.\n    return:\n      type: System.Reflection.Emit.UnmanagedMarshal\n      description: An <xref href=\"System.Reflection.Emit.UnmanagedMarshal\"></xref> object.\n  overload: System.Reflection.Emit.UnmanagedMarshal.DefineUnmanagedMarshal*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The argument is not a simple native type.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/UnmanagedMarshal.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.UnmanagedMarshal.ElementCount\n  commentId: P:System.Reflection.Emit.UnmanagedMarshal.ElementCount\n  id: ElementCount\n  parent: System.Reflection.Emit.UnmanagedMarshal\n  langs:\n  - csharp\n  name: ElementCount\n  nameWithType: UnmanagedMarshal.ElementCount\n  fullName: UnmanagedMarshal.ElementCount\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Gets a number element. This property is read-only.\n  remarks: There is an `ElementCount` only if there is a `NativeTypeFixedArray`.\n  syntax:\n    content: public int ElementCount { get; }\n    return:\n      type: System.Int32\n      description: An integer indicating the element count.\n  overload: System.Reflection.Emit.UnmanagedMarshal.ElementCount*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The argument is not an unmanaged element count.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/UnmanagedMarshal.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.UnmanagedMarshal.GetUnmanagedType\n  commentId: P:System.Reflection.Emit.UnmanagedMarshal.GetUnmanagedType\n  id: GetUnmanagedType\n  parent: System.Reflection.Emit.UnmanagedMarshal\n  langs:\n  - csharp\n  name: GetUnmanagedType\n  nameWithType: UnmanagedMarshal.GetUnmanagedType\n  fullName: UnmanagedMarshal.GetUnmanagedType\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Indicates an unmanaged type. This property is read-only.\n  remarks: The `GetUnmanagedType` property is an accessor function for the native type.\n  syntax:\n    content: public System.Runtime.InteropServices.UnmanagedType GetUnmanagedType { get; }\n    return:\n      type: System.Runtime.InteropServices.UnmanagedType\n      description: An <xref href=\"System.Runtime.InteropServices.UnmanagedType\"></xref> object.\n  overload: System.Reflection.Emit.UnmanagedMarshal.GetUnmanagedType*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/UnmanagedMarshal.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.UnmanagedMarshal.IIDGuid\n  commentId: P:System.Reflection.Emit.UnmanagedMarshal.IIDGuid\n  id: IIDGuid\n  parent: System.Reflection.Emit.UnmanagedMarshal\n  langs:\n  - csharp\n  name: IIDGuid\n  nameWithType: UnmanagedMarshal.IIDGuid\n  fullName: UnmanagedMarshal.IIDGuid\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Gets a GUID. This property is read-only.\n  remarks: This property always returns Guid.Empty. This property might be removed in a future release.\n  syntax:\n    content: public Guid IIDGuid { get; }\n    return:\n      type: System.Guid\n      description: A <xref href=\"System.Guid\"></xref> object.\n  overload: System.Reflection.Emit.UnmanagedMarshal.IIDGuid*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The argument is not a custom marshaler.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/UnmanagedMarshal.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\nreferences:\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.ArgumentException\n  parent: System\n  isExternal: false\n  name: ArgumentException\n  nameWithType: ArgumentException\n  fullName: System.ArgumentException\n- uid: System.Reflection.Emit.UnmanagedMarshal.BaseType\n  parent: System.Reflection.Emit.UnmanagedMarshal\n  isExternal: false\n  name: BaseType\n  nameWithType: UnmanagedMarshal.BaseType\n  fullName: UnmanagedMarshal.BaseType\n- uid: System.Runtime.InteropServices.UnmanagedType\n  parent: System.Runtime.InteropServices\n  isExternal: false\n  name: UnmanagedType\n  nameWithType: UnmanagedType\n  fullName: System.Runtime.InteropServices.UnmanagedType\n- uid: System.Reflection.Emit.UnmanagedMarshal.DefineByValArray(System.Int32)\n  parent: System.Reflection.Emit.UnmanagedMarshal\n  isExternal: false\n  name: DefineByValArray(Int32)\n  nameWithType: UnmanagedMarshal.DefineByValArray(Int32)\n  fullName: UnmanagedMarshal.DefineByValArray(Int32)\n- uid: System.Reflection.Emit.UnmanagedMarshal\n  parent: System.Reflection.Emit\n  isExternal: false\n  name: UnmanagedMarshal\n  nameWithType: UnmanagedMarshal\n  fullName: System.Reflection.Emit.UnmanagedMarshal\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Reflection.Emit.UnmanagedMarshal.DefineByValTStr(System.Int32)\n  parent: System.Reflection.Emit.UnmanagedMarshal\n  isExternal: false\n  name: DefineByValTStr(Int32)\n  nameWithType: UnmanagedMarshal.DefineByValTStr(Int32)\n  fullName: UnmanagedMarshal.DefineByValTStr(Int32)\n- uid: System.Reflection.Emit.UnmanagedMarshal.DefineLPArray(System.Runtime.InteropServices.UnmanagedType)\n  parent: System.Reflection.Emit.UnmanagedMarshal\n  isExternal: false\n  name: DefineLPArray(UnmanagedType)\n  nameWithType: UnmanagedMarshal.DefineLPArray(UnmanagedType)\n  fullName: UnmanagedMarshal.DefineLPArray(UnmanagedType)\n- uid: System.Reflection.Emit.UnmanagedMarshal.DefineSafeArray(System.Runtime.InteropServices.UnmanagedType)\n  parent: System.Reflection.Emit.UnmanagedMarshal\n  isExternal: false\n  name: DefineSafeArray(UnmanagedType)\n  nameWithType: UnmanagedMarshal.DefineSafeArray(UnmanagedType)\n  fullName: UnmanagedMarshal.DefineSafeArray(UnmanagedType)\n- uid: System.Reflection.Emit.UnmanagedMarshal.DefineUnmanagedMarshal(System.Runtime.InteropServices.UnmanagedType)\n  parent: System.Reflection.Emit.UnmanagedMarshal\n  isExternal: false\n  name: DefineUnmanagedMarshal(UnmanagedType)\n  nameWithType: UnmanagedMarshal.DefineUnmanagedMarshal(UnmanagedType)\n  fullName: UnmanagedMarshal.DefineUnmanagedMarshal(UnmanagedType)\n- uid: System.Reflection.Emit.UnmanagedMarshal.ElementCount\n  parent: System.Reflection.Emit.UnmanagedMarshal\n  isExternal: false\n  name: ElementCount\n  nameWithType: UnmanagedMarshal.ElementCount\n  fullName: UnmanagedMarshal.ElementCount\n- uid: System.Reflection.Emit.UnmanagedMarshal.GetUnmanagedType\n  parent: System.Reflection.Emit.UnmanagedMarshal\n  isExternal: false\n  name: GetUnmanagedType\n  nameWithType: UnmanagedMarshal.GetUnmanagedType\n  fullName: UnmanagedMarshal.GetUnmanagedType\n- uid: System.Reflection.Emit.UnmanagedMarshal.IIDGuid\n  parent: System.Reflection.Emit.UnmanagedMarshal\n  isExternal: false\n  name: IIDGuid\n  nameWithType: UnmanagedMarshal.IIDGuid\n  fullName: UnmanagedMarshal.IIDGuid\n- uid: System.Guid\n  parent: System\n  isExternal: false\n  name: Guid\n  nameWithType: Guid\n  fullName: System.Guid\n- uid: System.Reflection.Emit.UnmanagedMarshal.BaseType*\n  parent: System.Reflection.Emit.UnmanagedMarshal\n  isExternal: false\n  name: BaseType\n  nameWithType: UnmanagedMarshal.BaseType\n  fullName: UnmanagedMarshal.BaseType\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/UnmanagedMarshal.xml\n- uid: System.Reflection.Emit.UnmanagedMarshal.DefineByValArray*\n  parent: System.Reflection.Emit.UnmanagedMarshal\n  isExternal: false\n  name: DefineByValArray\n  nameWithType: UnmanagedMarshal.DefineByValArray\n  fullName: UnmanagedMarshal.DefineByValArray\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/UnmanagedMarshal.xml\n- uid: System.Reflection.Emit.UnmanagedMarshal.DefineByValTStr*\n  parent: System.Reflection.Emit.UnmanagedMarshal\n  isExternal: false\n  name: DefineByValTStr\n  nameWithType: UnmanagedMarshal.DefineByValTStr\n  fullName: UnmanagedMarshal.DefineByValTStr\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/UnmanagedMarshal.xml\n- uid: System.Reflection.Emit.UnmanagedMarshal.DefineLPArray*\n  parent: System.Reflection.Emit.UnmanagedMarshal\n  isExternal: false\n  name: DefineLPArray\n  nameWithType: UnmanagedMarshal.DefineLPArray\n  fullName: UnmanagedMarshal.DefineLPArray\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/UnmanagedMarshal.xml\n- uid: System.Reflection.Emit.UnmanagedMarshal.DefineSafeArray*\n  parent: System.Reflection.Emit.UnmanagedMarshal\n  isExternal: false\n  name: DefineSafeArray\n  nameWithType: UnmanagedMarshal.DefineSafeArray\n  fullName: UnmanagedMarshal.DefineSafeArray\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/UnmanagedMarshal.xml\n- uid: System.Reflection.Emit.UnmanagedMarshal.DefineUnmanagedMarshal*\n  parent: System.Reflection.Emit.UnmanagedMarshal\n  isExternal: false\n  name: DefineUnmanagedMarshal\n  nameWithType: UnmanagedMarshal.DefineUnmanagedMarshal\n  fullName: UnmanagedMarshal.DefineUnmanagedMarshal\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/UnmanagedMarshal.xml\n- uid: System.Reflection.Emit.UnmanagedMarshal.ElementCount*\n  parent: System.Reflection.Emit.UnmanagedMarshal\n  isExternal: false\n  name: ElementCount\n  nameWithType: UnmanagedMarshal.ElementCount\n  fullName: UnmanagedMarshal.ElementCount\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/UnmanagedMarshal.xml\n- uid: System.Reflection.Emit.UnmanagedMarshal.GetUnmanagedType*\n  parent: System.Reflection.Emit.UnmanagedMarshal\n  isExternal: false\n  name: GetUnmanagedType\n  nameWithType: UnmanagedMarshal.GetUnmanagedType\n  fullName: UnmanagedMarshal.GetUnmanagedType\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/UnmanagedMarshal.xml\n- uid: System.Reflection.Emit.UnmanagedMarshal.IIDGuid*\n  parent: System.Reflection.Emit.UnmanagedMarshal\n  isExternal: false\n  name: IIDGuid\n  nameWithType: UnmanagedMarshal.IIDGuid\n  fullName: UnmanagedMarshal.IIDGuid\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/UnmanagedMarshal.xml\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: Object.Equals(Object)\n  fullName: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: Object.GetHashCode()\n  fullName: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: false\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: false\n  name: ToString()\n  nameWithType: Object.ToString()\n  fullName: Object.ToString()\n"}