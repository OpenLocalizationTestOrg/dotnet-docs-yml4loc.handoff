{"nodes":[{"content":"The abstract base class from which all persistence services are derived.","nodes":[{"pos":[0,72],"content":"The abstract base class from which all persistence services are derived.","nodes":[{"content":"The abstract base class from which all persistence services are derived.","pos":[0,72]}]}],"pos":[1994,2067],"yaml":true},{"content":"> [!NOTE]\n>  [!INCLUDE[DeprecatedContent](~/includes/deprecatedcontent-md.md)]  \n  \n When certain conditions occur while the workflow is running, the workflow runtime engine persists state information about the workflow instance. Persistence can occur, for example, when an atomic transaction finishes, when the workflow instance becomes idle, when the host calls <xref:System.Workflow.Runtime.WorkflowInstance.Unload%2A?displayProperty=fullName> on the workflow instance, or when a workflow instance is terminated or finishes. When the workflow runtime engine semantics dictate that persistence should occur, the workflow runtime engine calls methods that are supplied by a persistence service to save state information about the workflow instance. Likewise, when the workflow runtime engine needs to restore a previously persisted workflow instance, it calls methods that are supplied by the persistence service to load this state information. The workflow runtime engine handles all the semantics regarding when to perform persistence. The persistence service handles actually saving and loading the workflow state information to or from a data store.  \n  \n You can create a persistence service by deriving a class from the <xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService> class.  You can add your persistence service to the workflow runtime engine by calling <xref:System.Workflow.Runtime.WorkflowRuntime.AddService%2A> or by making an appropriate entry in the application configuration file. The <xref:System.Workflow.Runtime.WorkflowRuntime> should only contain one persistence service. Windows Workflow Foundation provides the <xref:System.Workflow.Runtime.Hosting.SqlWorkflowPersistenceService> class, an out-of-box persistence service, which you can use as is or extend.  \n  \n The workflow runtime engine has semantics for locking workflow state information for use in environments where persistence services that run in different processes might have access to a single data store. The <xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService> class provides the capability to support this functionality of the workflow runtime engine by providing a parameter to <xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.SaveWorkflowInstanceState%2A> that specifies whether the state information of a workflow instance should be unlocked in the data store, and by providing a method <xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.UnlockWorkflowInstanceState%2A> to unlock previously locked workflow state information. In a persistence service that implements locking, a call to <xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.LoadWorkflowInstanceState%2A> should lock the state information for a workflow instance.  \n  \n Your persistence service should throw a <xref:System.Workflow.Runtime.Hosting.PersistenceException> if it fails to save state information to its data store or load state information from its data store. The workflow runtime engine expects this behavior.  \n  \n A batching mechanism is provided for services that use a durable store to save workflow state information. It is important in these cases to maintain consistency between the durable store that is used by the persistence service and the internal state of the workflow runtime engine. You can add functionality defined by the <xref:System.Workflow.Runtime.IPendingWork> interface to your service, and then participate in workflow transaction batching provided by the <xref:System.Workflow.Runtime.Hosting.WorkflowCommitWorkBatchService> by adding changes to your data store as work items to the <xref:System.Workflow.Runtime.WorkflowEnvironment.WorkBatch%2A>. The durable store itself should implement the <xref:System.Transactions.IEnlistmentNotification> interface, so that workflow information is not persisted incorrectly in the event of a transaction rollback. For more information, see <xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.SaveCompletedContextActivity%2A> or <xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.SaveWorkflowInstanceState%2A>.","nodes":[{"pos":[2,78],"content":"[!NOTE]\n [!INCLUDE[DeprecatedContent](~/includes/deprecatedcontent-md.md)]","leadings":["","> "],"nodes":[]},{"pos":[85,1154],"content":"When certain conditions occur while the workflow is running, the workflow runtime engine persists state information about the workflow instance. Persistence can occur, for example, when an atomic transaction finishes, when the workflow instance becomes idle, when the host calls <xref:System.Workflow.Runtime.WorkflowInstance.Unload%2A?displayProperty=fullName> on the workflow instance, or when a workflow instance is terminated or finishes. When the workflow runtime engine semantics dictate that persistence should occur, the workflow runtime engine calls methods that are supplied by a persistence service to save state information about the workflow instance. Likewise, when the workflow runtime engine needs to restore a previously persisted workflow instance, it calls methods that are supplied by the persistence service to load this state information. The workflow runtime engine handles all the semantics regarding when to perform persistence. The persistence service handles actually saving and loading the workflow state information to or from a data store.","nodes":[{"content":"When certain conditions occur while the workflow is running, the workflow runtime engine persists state information about the workflow instance. Persistence can occur, for example, when an atomic transaction finishes, when the workflow instance becomes idle, when the host calls <xref:System.Workflow.Runtime.WorkflowInstance.Unload%2A?displayProperty=fullName> on the workflow instance, or when a workflow instance is terminated or finishes. When the workflow runtime engine semantics dictate that persistence should occur, the workflow runtime engine calls methods that are supplied by a persistence service to save state information about the workflow instance. Likewise, when the workflow runtime engine needs to restore a previously persisted workflow instance, it calls methods that are supplied by the persistence service to load this state information. The workflow runtime engine handles all the semantics regarding when to perform persistence. The persistence service handles actually saving and loading the workflow state information to or from a data store.","pos":[0,1069],"nodes":[{"content":"When certain conditions occur while the workflow is running, the workflow runtime engine persists state information about the workflow instance.","pos":[0,144]},{"content":"Persistence can occur, for example, when an atomic transaction finishes, when the workflow instance becomes idle, when the host calls <ph id=\"ph1\">&lt;xref:System.Workflow.Runtime.WorkflowInstance.Unload%2A?displayProperty=fullName&gt;</ph> on the workflow instance, or when a workflow instance is terminated or finishes.","pos":[145,442],"source":" Persistence can occur, for example, when an atomic transaction finishes, when the workflow instance becomes idle, when the host calls <xref:System.Workflow.Runtime.WorkflowInstance.Unload%2A?displayProperty=fullName> on the workflow instance, or when a workflow instance is terminated or finishes."},{"content":"When the workflow runtime engine semantics dictate that persistence should occur, the workflow runtime engine calls methods that are supplied by a persistence service to save state information about the workflow instance.","pos":[443,664]},{"content":"Likewise, when the workflow runtime engine needs to restore a previously persisted workflow instance, it calls methods that are supplied by the persistence service to load this state information.","pos":[665,860]},{"content":"The workflow runtime engine handles all the semantics regarding when to perform persistence.","pos":[861,953]},{"content":"The persistence service handles actually saving and loading the workflow state information to or from a data store.","pos":[954,1069]}]}]},{"pos":[1161,1796],"content":"You can create a persistence service by deriving a class from the <xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService> class.  You can add your persistence service to the workflow runtime engine by calling <xref:System.Workflow.Runtime.WorkflowRuntime.AddService%2A> or by making an appropriate entry in the application configuration file. The <xref:System.Workflow.Runtime.WorkflowRuntime> should only contain one persistence service. Windows Workflow Foundation provides the <xref:System.Workflow.Runtime.Hosting.SqlWorkflowPersistenceService> class, an out-of-box persistence service, which you can use as is or extend.","nodes":[{"content":"You can create a persistence service by deriving a class from the <xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService> class.  You can add your persistence service to the workflow runtime engine by calling <xref:System.Workflow.Runtime.WorkflowRuntime.AddService%2A> or by making an appropriate entry in the application configuration file. The <xref:System.Workflow.Runtime.WorkflowRuntime> should only contain one persistence service. Windows Workflow Foundation provides the <xref:System.Workflow.Runtime.Hosting.SqlWorkflowPersistenceService> class, an out-of-box persistence service, which you can use as is or extend.","pos":[0,635],"nodes":[{"content":"You can create a persistence service by deriving a class from the <ph id=\"ph1\">&lt;xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService&gt;</ph> class.","pos":[0,138],"source":"You can create a persistence service by deriving a class from the <xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService> class."},{"content":"You can add your persistence service to the workflow runtime engine by calling <ph id=\"ph1\">&lt;xref:System.Workflow.Runtime.WorkflowRuntime.AddService%2A&gt;</ph> or by making an appropriate entry in the application configuration file.","pos":[140,352],"source":"  You can add your persistence service to the workflow runtime engine by calling <xref:System.Workflow.Runtime.WorkflowRuntime.AddService%2A> or by making an appropriate entry in the application configuration file."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Workflow.Runtime.WorkflowRuntime&gt;</ph> should only contain one persistence service.","pos":[353,448],"source":" The <xref:System.Workflow.Runtime.WorkflowRuntime> should only contain one persistence service."},{"content":"Windows Workflow Foundation provides the <ph id=\"ph1\">&lt;xref:System.Workflow.Runtime.Hosting.SqlWorkflowPersistenceService&gt;</ph> class, an out-of-box persistence service, which you can use as is or extend.","pos":[449,635],"source":" Windows Workflow Foundation provides the <xref:System.Workflow.Runtime.Hosting.SqlWorkflowPersistenceService> class, an out-of-box persistence service, which you can use as is or extend."}]}]},{"pos":[1803,2791],"content":"The workflow runtime engine has semantics for locking workflow state information for use in environments where persistence services that run in different processes might have access to a single data store. The <xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService> class provides the capability to support this functionality of the workflow runtime engine by providing a parameter to <xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.SaveWorkflowInstanceState%2A> that specifies whether the state information of a workflow instance should be unlocked in the data store, and by providing a method <xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.UnlockWorkflowInstanceState%2A> to unlock previously locked workflow state information. In a persistence service that implements locking, a call to <xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.LoadWorkflowInstanceState%2A> should lock the state information for a workflow instance.","nodes":[{"content":"The workflow runtime engine has semantics for locking workflow state information for use in environments where persistence services that run in different processes might have access to a single data store. The <xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService> class provides the capability to support this functionality of the workflow runtime engine by providing a parameter to <xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.SaveWorkflowInstanceState%2A> that specifies whether the state information of a workflow instance should be unlocked in the data store, and by providing a method <xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.UnlockWorkflowInstanceState%2A> to unlock previously locked workflow state information. In a persistence service that implements locking, a call to <xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.LoadWorkflowInstanceState%2A> should lock the state information for a workflow instance.","pos":[0,988],"nodes":[{"content":"The workflow runtime engine has semantics for locking workflow state information for use in environments where persistence services that run in different processes might have access to a single data store.","pos":[0,205]},{"content":"The <ph id=\"ph1\">&lt;xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService&gt;</ph> class provides the capability to support this functionality of the workflow runtime engine by providing a parameter to <ph id=\"ph2\">&lt;xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.SaveWorkflowInstanceState%2A&gt;</ph> that specifies whether the state information of a workflow instance should be unlocked in the data store, and by providing a method <ph id=\"ph3\">&lt;xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.UnlockWorkflowInstanceState%2A&gt;</ph> to unlock previously locked workflow state information.","pos":[206,774],"source":" The <xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService> class provides the capability to support this functionality of the workflow runtime engine by providing a parameter to <xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.SaveWorkflowInstanceState%2A> that specifies whether the state information of a workflow instance should be unlocked in the data store, and by providing a method <xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.UnlockWorkflowInstanceState%2A> to unlock previously locked workflow state information."},{"content":"In a persistence service that implements locking, a call to <ph id=\"ph1\">&lt;xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.LoadWorkflowInstanceState%2A&gt;</ph> should lock the state information for a workflow instance.","pos":[775,988],"source":" In a persistence service that implements locking, a call to <xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.LoadWorkflowInstanceState%2A> should lock the state information for a workflow instance."}]}]},{"pos":[2798,3051],"content":"Your persistence service should throw a <xref:System.Workflow.Runtime.Hosting.PersistenceException> if it fails to save state information to its data store or load state information from its data store. The workflow runtime engine expects this behavior.","nodes":[{"content":"Your persistence service should throw a <xref:System.Workflow.Runtime.Hosting.PersistenceException> if it fails to save state information to its data store or load state information from its data store. The workflow runtime engine expects this behavior.","pos":[0,253],"nodes":[{"content":"Your persistence service should throw a <ph id=\"ph1\">&lt;xref:System.Workflow.Runtime.Hosting.PersistenceException&gt;</ph> if it fails to save state information to its data store or load state information from its data store.","pos":[0,202],"source":"Your persistence service should throw a <xref:System.Workflow.Runtime.Hosting.PersistenceException> if it fails to save state information to its data store or load state information from its data store."},{"content":"The workflow runtime engine expects this behavior.","pos":[203,253]}]}]},{"pos":[3058,4144],"content":"A batching mechanism is provided for services that use a durable store to save workflow state information. It is important in these cases to maintain consistency between the durable store that is used by the persistence service and the internal state of the workflow runtime engine. You can add functionality defined by the <xref:System.Workflow.Runtime.IPendingWork> interface to your service, and then participate in workflow transaction batching provided by the <xref:System.Workflow.Runtime.Hosting.WorkflowCommitWorkBatchService> by adding changes to your data store as work items to the <xref:System.Workflow.Runtime.WorkflowEnvironment.WorkBatch%2A>. The durable store itself should implement the <xref:System.Transactions.IEnlistmentNotification> interface, so that workflow information is not persisted incorrectly in the event of a transaction rollback. For more information, see <xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.SaveCompletedContextActivity%2A> or <xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.SaveWorkflowInstanceState%2A>.","nodes":[{"content":"A batching mechanism is provided for services that use a durable store to save workflow state information. It is important in these cases to maintain consistency between the durable store that is used by the persistence service and the internal state of the workflow runtime engine. You can add functionality defined by the <xref:System.Workflow.Runtime.IPendingWork> interface to your service, and then participate in workflow transaction batching provided by the <xref:System.Workflow.Runtime.Hosting.WorkflowCommitWorkBatchService> by adding changes to your data store as work items to the <xref:System.Workflow.Runtime.WorkflowEnvironment.WorkBatch%2A>. The durable store itself should implement the <xref:System.Transactions.IEnlistmentNotification> interface, so that workflow information is not persisted incorrectly in the event of a transaction rollback. For more information, see <xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.SaveCompletedContextActivity%2A> or <xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.SaveWorkflowInstanceState%2A>.","pos":[0,1086],"nodes":[{"content":"A batching mechanism is provided for services that use a durable store to save workflow state information.","pos":[0,106]},{"content":"It is important in these cases to maintain consistency between the durable store that is used by the persistence service and the internal state of the workflow runtime engine.","pos":[107,282]},{"content":"You can add functionality defined by the <ph id=\"ph1\">&lt;xref:System.Workflow.Runtime.IPendingWork&gt;</ph> interface to your service, and then participate in workflow transaction batching provided by the <ph id=\"ph2\">&lt;xref:System.Workflow.Runtime.Hosting.WorkflowCommitWorkBatchService&gt;</ph> by adding changes to your data store as work items to the <ph id=\"ph3\">&lt;xref:System.Workflow.Runtime.WorkflowEnvironment.WorkBatch%2A&gt;</ph>.","pos":[283,657],"source":" You can add functionality defined by the <xref:System.Workflow.Runtime.IPendingWork> interface to your service, and then participate in workflow transaction batching provided by the <xref:System.Workflow.Runtime.Hosting.WorkflowCommitWorkBatchService> by adding changes to your data store as work items to the <xref:System.Workflow.Runtime.WorkflowEnvironment.WorkBatch%2A>."},{"content":"The durable store itself should implement the <ph id=\"ph1\">&lt;xref:System.Transactions.IEnlistmentNotification&gt;</ph> interface, so that workflow information is not persisted incorrectly in the event of a transaction rollback.","pos":[658,863],"source":" The durable store itself should implement the <xref:System.Transactions.IEnlistmentNotification> interface, so that workflow information is not persisted incorrectly in the event of a transaction rollback."},{"content":"For more information, see <ph id=\"ph1\">&lt;xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.SaveCompletedContextActivity%2A&gt;</ph> or <ph id=\"ph2\">&lt;xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.SaveWorkflowInstanceState%2A&gt;</ph>.","pos":[864,1086],"source":" For more information, see <xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.SaveCompletedContextActivity%2A> or <xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.SaveWorkflowInstanceState%2A>."}]}]}],"pos":[2078,6236],"yaml":true,"extradata":"MT"},{"content":"When implemented in a derived class, initializes a new instance of the <xref href=\"System.Workflow.Runtime.Hosting.WorkflowPersistenceService\"></xref> class.","nodes":[{"pos":[0,157],"content":"When implemented in a derived class, initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Workflow.Runtime.Hosting.WorkflowPersistenceService\"&gt;&lt;/xref&gt;</ph> class.","source":"When implemented in a derived class, initializes a new instance of the <xref href=\"System.Workflow.Runtime.Hosting.WorkflowPersistenceService\"></xref> class."}],"pos":[8635,8793],"yaml":true},{"content":"Retrieves the serialized default form of the <xref href=\"System.Workflow.ComponentModel.Activity\"></xref>.","nodes":[{"pos":[0,106],"content":"Retrieves the serialized default form of the <ph id=\"ph1\">&lt;xref href=\"System.Workflow.ComponentModel.Activity\"&gt;&lt;/xref&gt;</ph>.","source":"Retrieves the serialized default form of the <xref href=\"System.Workflow.ComponentModel.Activity\"></xref>."}],"pos":[10856,10963],"yaml":true},{"content":"The <xref href=\"System.Workflow.ComponentModel.Activity\"></xref> whose serialized form is requested.","nodes":[{"pos":[0,100],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Workflow.ComponentModel.Activity\"&gt;&lt;/xref&gt;</ph> whose serialized form is requested.","source":"The <xref href=\"System.Workflow.ComponentModel.Activity\"></xref> whose serialized form is requested."}],"pos":[11193,11294],"yaml":true},{"content":"The serialized default form of the <xref href=\"System.Workflow.ComponentModel.Activity\"></xref>.","nodes":[{"pos":[0,96],"content":"The serialized default form of the <ph id=\"ph1\">&lt;xref href=\"System.Workflow.ComponentModel.Activity\"&gt;&lt;/xref&gt;</ph>.","source":"The serialized default form of the <xref href=\"System.Workflow.ComponentModel.Activity\"></xref>."}],"pos":[11351,11448],"yaml":true},{"content":"Indicates whether the given activity is blocked.","nodes":[{"pos":[0,48],"content":"Indicates whether the given activity is blocked.","nodes":[{"content":"Indicates whether the given activity is blocked.","pos":[0,48]}]}],"pos":[12748,12797],"yaml":true},{"content":"The root activity of the workflow instance.","nodes":[{"pos":[0,43],"content":"The root activity of the workflow instance.","nodes":[{"content":"The root activity of the workflow instance.","pos":[0,43]}]}],"pos":[13021,13065],"yaml":true},{"content":"`true` if the given activity is blocked; otherwise, `false`.","nodes":[{"pos":[0,60],"content":"<ph id=\"ph1\">`true`</ph> if the given activity is blocked; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` if the given activity is blocked; otherwise, `false`."}],"pos":[13123,13186],"yaml":true},{"content":"Retrieves the termination or suspend information of the given activity.","nodes":[{"pos":[0,71],"content":"Retrieves the termination or suspend information of the given activity.","nodes":[{"content":"Retrieves the termination or suspend information of the given activity.","pos":[0,71]}]}],"pos":[14552,14624],"yaml":true},{"content":"The root activity of the workflow instance.","nodes":[{"pos":[0,43],"content":"The root activity of the workflow instance.","nodes":[{"content":"The root activity of the workflow instance.","pos":[0,43]}]}],"pos":[14863,14907],"yaml":true},{"content":"A <xref href=\"System.String\"></xref> that contains the termination or suspend information.","nodes":[{"pos":[0,90],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.String\"&gt;&lt;/xref&gt;</ph> that contains the termination or suspend information.","source":"A <xref href=\"System.String\"></xref> that contains the termination or suspend information."}],"pos":[14964,15055],"yaml":true},{"content":"Retrieves the status of the workflow.","nodes":[{"pos":[0,37],"content":"Retrieves the status of the workflow.","nodes":[{"content":"Retrieves the status of the workflow.","pos":[0,37]}]}],"pos":[16386,16424],"yaml":true},{"content":"The root activity of the workflow instance.","nodes":[{"pos":[0,43],"content":"The root activity of the workflow instance.","nodes":[{"content":"The root activity of the workflow instance.","pos":[0,43]}]}],"pos":[16687,16731],"yaml":true},{"content":"A <xref href=\"System.Workflow.Runtime.WorkflowStatus\"></xref> enumeration value that denotes the status of the workflow.","nodes":[{"pos":[0,120],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Workflow.Runtime.WorkflowStatus\"&gt;&lt;/xref&gt;</ph> enumeration value that denotes the status of the workflow.","source":"A <xref href=\"System.Workflow.Runtime.WorkflowStatus\"></xref> enumeration value that denotes the status of the workflow."}],"pos":[16813,16934],"yaml":true},{"content":"When implemented in a derived class, loads the specified completed scope back into memory.","nodes":[{"pos":[0,90],"content":"When implemented in a derived class, loads the specified completed scope back into memory.","nodes":[{"content":"When implemented in a derived class, loads the specified completed scope back into memory.","pos":[0,90]}]}],"pos":[18377,18468],"yaml":true},{"content":"The workflow runtime engine uses <xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.LoadCompletedContextActivity%2A> to implement compensation. You must restore an identical copy of the completed scope. To do this, you must restore a valid <xref:System.IO.Stream> from your representation of the completed scope in the data store. Then you must pass this <xref:System.IO.Stream> to one of the overloaded methods of <xref:System.Workflow.ComponentModel.Activity.Load%2A> to perform deserialization of the scope.  \n  \n If your persistence service cannot load the completed scope from its data store, it should throw a <xref:System.Workflow.Runtime.Hosting.PersistenceException> with an appropriate message.","nodes":[{"pos":[0,524],"content":"The workflow runtime engine uses <xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.LoadCompletedContextActivity%2A> to implement compensation. You must restore an identical copy of the completed scope. To do this, you must restore a valid <xref:System.IO.Stream> from your representation of the completed scope in the data store. Then you must pass this <xref:System.IO.Stream> to one of the overloaded methods of <xref:System.Workflow.ComponentModel.Activity.Load%2A> to perform deserialization of the scope.","nodes":[{"content":"The workflow runtime engine uses <xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.LoadCompletedContextActivity%2A> to implement compensation. You must restore an identical copy of the completed scope. To do this, you must restore a valid <xref:System.IO.Stream> from your representation of the completed scope in the data store. Then you must pass this <xref:System.IO.Stream> to one of the overloaded methods of <xref:System.Workflow.ComponentModel.Activity.Load%2A> to perform deserialization of the scope.","pos":[0,524],"nodes":[{"content":"The workflow runtime engine uses <ph id=\"ph1\">&lt;xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.LoadCompletedContextActivity%2A&gt;</ph> to implement compensation.","pos":[0,157],"source":"The workflow runtime engine uses <xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.LoadCompletedContextActivity%2A> to implement compensation."},{"content":"You must restore an identical copy of the completed scope.","pos":[158,216]},{"content":"To do this, you must restore a valid <ph id=\"ph1\">&lt;xref:System.IO.Stream&gt;</ph> from your representation of the completed scope in the data store.","pos":[217,344],"source":" To do this, you must restore a valid <xref:System.IO.Stream> from your representation of the completed scope in the data store."},{"content":"Then you must pass this <ph id=\"ph1\">&lt;xref:System.IO.Stream&gt;</ph> to one of the overloaded methods of <ph id=\"ph2\">&lt;xref:System.Workflow.ComponentModel.Activity.Load%2A&gt;</ph> to perform deserialization of the scope.","pos":[345,524],"source":" Then you must pass this <xref:System.IO.Stream> to one of the overloaded methods of <xref:System.Workflow.ComponentModel.Activity.Load%2A> to perform deserialization of the scope."}]}]},{"pos":[531,718],"content":"If your persistence service cannot load the completed scope from its data store, it should throw a <xref:System.Workflow.Runtime.Hosting.PersistenceException> with an appropriate message.","nodes":[{"content":"If your persistence service cannot load the completed scope from its data store, it should throw a <ph id=\"ph1\">&lt;xref:System.Workflow.Runtime.Hosting.PersistenceException&gt;</ph> with an appropriate message.","pos":[0,187],"source":"If your persistence service cannot load the completed scope from its data store, it should throw a <xref:System.Workflow.Runtime.Hosting.PersistenceException> with an appropriate message."}]}],"pos":[18479,19202],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Guid\"></xref> of the completed scope.","nodes":[{"pos":[0,60],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Guid\"&gt;&lt;/xref&gt;</ph> of the completed scope.","source":"The <xref href=\"System.Guid\"></xref> of the completed scope."}],"pos":[20034,20095],"yaml":true},{"content":"An <xref href=\"System.Workflow.ComponentModel.Activity\"></xref> that represents the activity that encloses the completed scope.","nodes":[{"pos":[0,127],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Workflow.ComponentModel.Activity\"&gt;&lt;/xref&gt;</ph> that represents the activity that encloses the completed scope.","source":"An <xref href=\"System.Workflow.ComponentModel.Activity\"></xref> that represents the activity that encloses the completed scope."}],"pos":[20190,20318],"yaml":true},{"content":"An <xref href=\"System.Workflow.ComponentModel.Activity\"></xref> that represents the completed scope.","nodes":[{"pos":[0,100],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Workflow.ComponentModel.Activity\"&gt;&lt;/xref&gt;</ph> that represents the completed scope.","source":"An <xref href=\"System.Workflow.ComponentModel.Activity\"></xref> that represents the completed scope."}],"pos":[20401,20502],"yaml":true},{"content":"When implemented in a derived class, loads the specified state of the workflow instance back into memory.","nodes":[{"pos":[0,105],"content":"When implemented in a derived class, loads the specified state of the workflow instance back into memory.","nodes":[{"content":"When implemented in a derived class, loads the specified state of the workflow instance back into memory.","pos":[0,105]}]}],"pos":[21788,21894],"yaml":true},{"content":"You must restore an identical copy of the activity. To do this, you must restore a valid <xref:System.IO.Stream> from your representation of the workflow instance in the data store; then you must pass this <xref:System.IO.Stream> to one of the overloaded <xref:System.Workflow.ComponentModel.Activity.Load%2A> methods to deserialize the workflow instance state. If your persistence service cannot load the workflow instance state from its data store, it should throw a <xref:System.Workflow.Runtime.Hosting.PersistenceException> with an appropriate message.  \n  \n The workflow runtime engine implements locking semantics to restrict access to a workflow instance state that is saved in a data store. This can be accessed by persistence services that run in multiple processes. The locking semantics are designed to prevent persistence services that run in two different processes from loading the same workflow instance into memory at the same time. Depending on the type of environment that your persistence service is designed to support, you may choose whether to support this functionality. If you choose to support the runtime locking semantics, and if this workflow instance state has been previously locked by another process, then you should throw a <xref:System.Workflow.Runtime.WorkflowOwnershipException>. Otherwise, you should lock access to the workflow instance state in your data store. The workflow instance state can be unlocked by a call to <xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.UnlockWorkflowInstanceState%2A> or a call to <xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.SaveWorkflowInstanceState%2A> with the unlock parameter set to `true`.","nodes":[{"pos":[0,557],"content":"You must restore an identical copy of the activity. To do this, you must restore a valid <xref:System.IO.Stream> from your representation of the workflow instance in the data store; then you must pass this <xref:System.IO.Stream> to one of the overloaded <xref:System.Workflow.ComponentModel.Activity.Load%2A> methods to deserialize the workflow instance state. If your persistence service cannot load the workflow instance state from its data store, it should throw a <xref:System.Workflow.Runtime.Hosting.PersistenceException> with an appropriate message.","nodes":[{"content":"You must restore an identical copy of the activity. To do this, you must restore a valid <xref:System.IO.Stream> from your representation of the workflow instance in the data store; then you must pass this <xref:System.IO.Stream> to one of the overloaded <xref:System.Workflow.ComponentModel.Activity.Load%2A> methods to deserialize the workflow instance state. If your persistence service cannot load the workflow instance state from its data store, it should throw a <xref:System.Workflow.Runtime.Hosting.PersistenceException> with an appropriate message.","pos":[0,557],"nodes":[{"content":"You must restore an identical copy of the activity.","pos":[0,51]},{"content":"To do this, you must restore a valid <ph id=\"ph1\">&lt;xref:System.IO.Stream&gt;</ph> from your representation of the workflow instance in the data store; then you must pass this <ph id=\"ph2\">&lt;xref:System.IO.Stream&gt;</ph> to one of the overloaded <ph id=\"ph3\">&lt;xref:System.Workflow.ComponentModel.Activity.Load%2A&gt;</ph> methods to deserialize the workflow instance state.","pos":[52,361],"source":" To do this, you must restore a valid <xref:System.IO.Stream> from your representation of the workflow instance in the data store; then you must pass this <xref:System.IO.Stream> to one of the overloaded <xref:System.Workflow.ComponentModel.Activity.Load%2A> methods to deserialize the workflow instance state."},{"content":"If your persistence service cannot load the workflow instance state from its data store, it should throw a <ph id=\"ph1\">&lt;xref:System.Workflow.Runtime.Hosting.PersistenceException&gt;</ph> with an appropriate message.","pos":[362,557],"source":" If your persistence service cannot load the workflow instance state from its data store, it should throw a <xref:System.Workflow.Runtime.Hosting.PersistenceException> with an appropriate message."}]}]},{"pos":[564,1704],"content":"The workflow runtime engine implements locking semantics to restrict access to a workflow instance state that is saved in a data store. This can be accessed by persistence services that run in multiple processes. The locking semantics are designed to prevent persistence services that run in two different processes from loading the same workflow instance into memory at the same time. Depending on the type of environment that your persistence service is designed to support, you may choose whether to support this functionality. If you choose to support the runtime locking semantics, and if this workflow instance state has been previously locked by another process, then you should throw a <xref:System.Workflow.Runtime.WorkflowOwnershipException>. Otherwise, you should lock access to the workflow instance state in your data store. The workflow instance state can be unlocked by a call to <xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.UnlockWorkflowInstanceState%2A> or a call to <xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.SaveWorkflowInstanceState%2A> with the unlock parameter set to `true`.","nodes":[{"content":"The workflow runtime engine implements locking semantics to restrict access to a workflow instance state that is saved in a data store.","pos":[0,135]},{"content":"This can be accessed by persistence services that run in multiple processes.","pos":[136,212]},{"content":"The locking semantics are designed to prevent persistence services that run in two different processes from loading the same workflow instance into memory at the same time.","pos":[213,385]},{"content":"Depending on the type of environment that your persistence service is designed to support, you may choose whether to support this functionality.","pos":[386,530]},{"content":"If you choose to support the runtime locking semantics, and if this workflow instance state has been previously locked by another process, then you should throw a <ph id=\"ph1\">&lt;xref:System.Workflow.Runtime.WorkflowOwnershipException&gt;</ph>.","pos":[531,752],"source":" If you choose to support the runtime locking semantics, and if this workflow instance state has been previously locked by another process, then you should throw a <xref:System.Workflow.Runtime.WorkflowOwnershipException>."},{"content":"Otherwise, you should lock access to the workflow instance state in your data store.","pos":[753,837]},{"content":"The workflow instance state can be unlocked by a call to <ph id=\"ph1\">&lt;xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.UnlockWorkflowInstanceState%2A&gt;</ph> or a call to <ph id=\"ph2\">&lt;xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.SaveWorkflowInstanceState%2A&gt;</ph> with the unlock parameter set to <ph id=\"ph3\">`true`</ph>.","pos":[838,1140],"source":" The workflow instance state can be unlocked by a call to <xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.UnlockWorkflowInstanceState%2A> or a call to <xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.SaveWorkflowInstanceState%2A> with the unlock parameter set to `true`."}]}],"pos":[21905,23614],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Guid\"></xref> of the root activity of the workflow instance.","nodes":[{"pos":[0,83],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Guid\"&gt;&lt;/xref&gt;</ph> of the root activity of the workflow instance.","source":"The <xref href=\"System.Guid\"></xref> of the root activity of the workflow instance."}],"pos":[24391,24475],"yaml":true},{"content":"An <xref href=\"System.Workflow.ComponentModel.Activity\"></xref> that represents the root activity of the workflow instance.","nodes":[{"pos":[0,123],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Workflow.ComponentModel.Activity\"&gt;&lt;/xref&gt;</ph> that represents the root activity of the workflow instance.","source":"An <xref href=\"System.Workflow.ComponentModel.Activity\"></xref> that represents the root activity of the workflow instance."}],"pos":[24558,24682],"yaml":true},{"content":"Restores the <xref href=\"System.Workflow.ComponentModel.Activity\"></xref> from its serialized form.","nodes":[{"pos":[0,99],"content":"Restores the <ph id=\"ph1\">&lt;xref href=\"System.Workflow.ComponentModel.Activity\"&gt;&lt;/xref&gt;</ph> from its serialized form.","source":"Restores the <xref href=\"System.Workflow.ComponentModel.Activity\"></xref> from its serialized form."}],"pos":[26169,26269],"yaml":true},{"content":"The serialized form of <xref href=\"System.Workflow.ComponentModel.Activity\"></xref>.","nodes":[{"pos":[0,84],"content":"The serialized form of <ph id=\"ph1\">&lt;xref href=\"System.Workflow.ComponentModel.Activity\"&gt;&lt;/xref&gt;</ph>.","source":"The serialized form of <xref href=\"System.Workflow.ComponentModel.Activity\"></xref>."}],"pos":[27137,27222],"yaml":true},{"content":"The outer <xref href=\"System.Workflow.ComponentModel.Activity\"></xref>, containing the <xref href=\"System.Workflow.ComponentModel.Activity\"></xref> to restore.","nodes":[{"pos":[0,159],"content":"The outer <ph id=\"ph1\">&lt;xref href=\"System.Workflow.ComponentModel.Activity\"&gt;&lt;/xref&gt;</ph>, containing the <ph id=\"ph2\">&lt;xref href=\"System.Workflow.ComponentModel.Activity\"&gt;&lt;/xref&gt;</ph> to restore.","source":"The outer <xref href=\"System.Workflow.ComponentModel.Activity\"></xref>, containing the <xref href=\"System.Workflow.ComponentModel.Activity\"></xref> to restore."}],"pos":[27317,27477],"yaml":true},{"content":"The restored <xref href=\"System.Workflow.ComponentModel.Activity\"></xref>.","nodes":[{"pos":[0,74],"content":"The restored <ph id=\"ph1\">&lt;xref href=\"System.Workflow.ComponentModel.Activity\"&gt;&lt;/xref&gt;</ph>.","source":"The restored <xref href=\"System.Workflow.ComponentModel.Activity\"></xref>."}],"pos":[27560,27635],"yaml":true},{"content":"When implemented in a derived class, saves the specified completed scope to a data store.","nodes":[{"pos":[0,89],"content":"When implemented in a derived class, saves the specified completed scope to a data store.","nodes":[{"content":"When implemented in a derived class, saves the specified completed scope to a data store.","pos":[0,89]}]}],"pos":[29039,29129],"yaml":true},{"content":"The workflow runtime engine saves the state of completed scope activities in order to implement compensation. You must call one of the overloaded <xref:System.Workflow.ComponentModel.Activity.Save%2A> methods to serialize `activity` into a <xref:System.IO.Stream>; you may then choose to additionally process the <xref:System.IO.Stream> before writing it to your data store. However, when the workflow runtime engine calls <xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.LoadCompletedContextActivity%2A>, you must restore an identical copy of the activity.  \n  \n You must be able to associate the completed scope with its enclosing workflow instance to mark the scope as unneeded in your data store when the workflow instance finishes or is terminated. Therefore, you should also save the <xref:System.Guid> of the workflow instance that is associated with the completed scope; this can be obtained from the <xref:System.Workflow.Runtime.WorkflowInstance.InstanceId%2A> property of the <xref:System.Workflow.Runtime.WorkflowInstance> associated with `activity`.  \n  \n <xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.LoadCompletedContextActivity%2A> takes the <xref:System.Guid> of the completed scope as a parameter. Therefore, you must also save the <xref:System.Workflow.ComponentModel.ActivityExecutionContext.ContextGuid%2A> property associated with `activity`. This property can be referenced through the <xref:System.Workflow.ComponentModel.Activity.ActivityContextGuidProperty> field of `activity`.  \n  \n If you are implementing a persistence service that uses a durable store, to maintain consistency with the internal state of the workflow runtime engine, you should participate in workflow transaction batching to defer the actual write to your durable store until a workflow commit point. To participate in batching, add a work item to the <xref:System.Workflow.Runtime.WorkflowEnvironment.WorkBatch%2A> property that represents the pending changes to the database, and implement the <xref:System.Workflow.Runtime.IPendingWork> interface in your persistence service.  \n  \n If you cannot save the completed scope to your data store, you should throw a <xref:System.Workflow.Runtime.Hosting.PersistenceException> with an appropriate error message.","nodes":[{"pos":[0,573],"content":"The workflow runtime engine saves the state of completed scope activities in order to implement compensation. You must call one of the overloaded <xref:System.Workflow.ComponentModel.Activity.Save%2A> methods to serialize `activity` into a <xref:System.IO.Stream>; you may then choose to additionally process the <xref:System.IO.Stream> before writing it to your data store. However, when the workflow runtime engine calls <xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.LoadCompletedContextActivity%2A>, you must restore an identical copy of the activity.","nodes":[{"content":"The workflow runtime engine saves the state of completed scope activities in order to implement compensation.","pos":[0,109]},{"content":"You must call one of the overloaded <ph id=\"ph1\">&lt;xref:System.Workflow.ComponentModel.Activity.Save%2A&gt;</ph> methods to serialize <ph id=\"ph2\">`activity`</ph> into a <ph id=\"ph3\">&lt;xref:System.IO.Stream&gt;</ph>; you may then choose to additionally process the <ph id=\"ph4\">&lt;xref:System.IO.Stream&gt;</ph> before writing it to your data store.","pos":[110,374],"source":" You must call one of the overloaded <xref:System.Workflow.ComponentModel.Activity.Save%2A> methods to serialize `activity` into a <xref:System.IO.Stream>; you may then choose to additionally process the <xref:System.IO.Stream> before writing it to your data store."},{"content":"However, when the workflow runtime engine calls <ph id=\"ph1\">&lt;xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.LoadCompletedContextActivity%2A&gt;</ph>, you must restore an identical copy of the activity.","pos":[375,573],"source":" However, when the workflow runtime engine calls <xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.LoadCompletedContextActivity%2A>, you must restore an identical copy of the activity."}]},{"pos":[580,1078],"content":"You must be able to associate the completed scope with its enclosing workflow instance to mark the scope as unneeded in your data store when the workflow instance finishes or is terminated. Therefore, you should also save the <xref:System.Guid> of the workflow instance that is associated with the completed scope; this can be obtained from the <xref:System.Workflow.Runtime.WorkflowInstance.InstanceId%2A> property of the <xref:System.Workflow.Runtime.WorkflowInstance> associated with `activity`.","nodes":[{"content":"You must be able to associate the completed scope with its enclosing workflow instance to mark the scope as unneeded in your data store when the workflow instance finishes or is terminated.","pos":[0,189]},{"content":"Therefore, you should also save the <ph id=\"ph1\">&lt;xref:System.Guid&gt;</ph> of the workflow instance that is associated with the completed scope; this can be obtained from the <ph id=\"ph2\">&lt;xref:System.Workflow.Runtime.WorkflowInstance.InstanceId%2A&gt;</ph> property of the <ph id=\"ph3\">&lt;xref:System.Workflow.Runtime.WorkflowInstance&gt;</ph> associated with <ph id=\"ph4\">`activity`</ph>.","pos":[190,498],"source":" Therefore, you should also save the <xref:System.Guid> of the workflow instance that is associated with the completed scope; this can be obtained from the <xref:System.Workflow.Runtime.WorkflowInstance.InstanceId%2A> property of the <xref:System.Workflow.Runtime.WorkflowInstance> associated with `activity`."}]},{"pos":[1085,1539],"content":"<xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.LoadCompletedContextActivity%2A> takes the <xref:System.Guid> of the completed scope as a parameter. Therefore, you must also save the <xref:System.Workflow.ComponentModel.ActivityExecutionContext.ContextGuid%2A> property associated with `activity`. This property can be referenced through the <xref:System.Workflow.ComponentModel.Activity.ActivityContextGuidProperty> field of `activity`.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.LoadCompletedContextActivity%2A&gt;</ph> takes the <ph id=\"ph2\">&lt;xref:System.Guid&gt;</ph> of the completed scope as a parameter.","pos":[0,165],"source":"<xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.LoadCompletedContextActivity%2A> takes the <xref:System.Guid> of the completed scope as a parameter."},{"content":"Therefore, you must also save the <ph id=\"ph1\">&lt;xref:System.Workflow.ComponentModel.ActivityExecutionContext.ContextGuid%2A&gt;</ph> property associated with <ph id=\"ph2\">`activity`</ph>.","pos":[166,314],"source":" Therefore, you must also save the <xref:System.Workflow.ComponentModel.ActivityExecutionContext.ContextGuid%2A> property associated with `activity`."},{"content":"This property can be referenced through the <ph id=\"ph1\">&lt;xref:System.Workflow.ComponentModel.Activity.ActivityContextGuidProperty&gt;</ph> field of <ph id=\"ph2\">`activity`</ph>.","pos":[315,454],"source":" This property can be referenced through the <xref:System.Workflow.ComponentModel.Activity.ActivityContextGuidProperty> field of `activity`."}]},{"pos":[1546,2111],"content":"If you are implementing a persistence service that uses a durable store, to maintain consistency with the internal state of the workflow runtime engine, you should participate in workflow transaction batching to defer the actual write to your durable store until a workflow commit point. To participate in batching, add a work item to the <xref:System.Workflow.Runtime.WorkflowEnvironment.WorkBatch%2A> property that represents the pending changes to the database, and implement the <xref:System.Workflow.Runtime.IPendingWork> interface in your persistence service.","nodes":[{"content":"If you are implementing a persistence service that uses a durable store, to maintain consistency with the internal state of the workflow runtime engine, you should participate in workflow transaction batching to defer the actual write to your durable store until a workflow commit point. To participate in batching, add a work item to the <xref:System.Workflow.Runtime.WorkflowEnvironment.WorkBatch%2A> property that represents the pending changes to the database, and implement the <xref:System.Workflow.Runtime.IPendingWork> interface in your persistence service.","pos":[0,565],"nodes":[{"content":"If you are implementing a persistence service that uses a durable store, to maintain consistency with the internal state of the workflow runtime engine, you should participate in workflow transaction batching to defer the actual write to your durable store until a workflow commit point.","pos":[0,287]},{"content":"To participate in batching, add a work item to the <ph id=\"ph1\">&lt;xref:System.Workflow.Runtime.WorkflowEnvironment.WorkBatch%2A&gt;</ph> property that represents the pending changes to the database, and implement the <ph id=\"ph2\">&lt;xref:System.Workflow.Runtime.IPendingWork&gt;</ph> interface in your persistence service.","pos":[288,565],"source":" To participate in batching, add a work item to the <xref:System.Workflow.Runtime.WorkflowEnvironment.WorkBatch%2A> property that represents the pending changes to the database, and implement the <xref:System.Workflow.Runtime.IPendingWork> interface in your persistence service."}]}]},{"pos":[2118,2290],"content":"If you cannot save the completed scope to your data store, you should throw a <xref:System.Workflow.Runtime.Hosting.PersistenceException> with an appropriate error message.","nodes":[{"content":"If you cannot save the completed scope to your data store, you should throw a <ph id=\"ph1\">&lt;xref:System.Workflow.Runtime.Hosting.PersistenceException&gt;</ph> with an appropriate error message.","pos":[0,172],"source":"If you cannot save the completed scope to your data store, you should throw a <xref:System.Workflow.Runtime.Hosting.PersistenceException> with an appropriate error message."}]}],"pos":[29140,31441],"yaml":true,"extradata":"MT"},{"content":"An <xref href=\"System.Workflow.ComponentModel.Activity\"></xref> that represents the completed scope.","nodes":[{"pos":[0,100],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Workflow.ComponentModel.Activity\"&gt;&lt;/xref&gt;</ph> that represents the completed scope.","source":"An <xref href=\"System.Workflow.ComponentModel.Activity\"></xref> that represents the completed scope."}],"pos":[32248,32349],"yaml":true},{"content":"When implemented in a derived class, saves the workflow instance state to a data store.","nodes":[{"pos":[0,87],"content":"When implemented in a derived class, saves the workflow instance state to a data store.","nodes":[{"content":"When implemented in a derived class, saves the workflow instance state to a data store.","pos":[0,87]}]}],"pos":[33803,33891],"yaml":true},{"content":"You must call one of the overloaded <xref:System.Workflow.ComponentModel.Activity.Save%2A> methods to serialize `rootActivity` into a <xref:System.IO.Stream>. You can then choose to additionally process the <xref:System.IO.Stream> before writing it to your data store. However, when the workflow runtime engine calls <xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.LoadWorkflowInstanceState%2A>, you must restore an identical copy of the root activity. If you cannot save the workflow instance state to your data store, you should throw a <xref:System.Workflow.Runtime.Hosting.PersistenceException> with an appropriate error message.  \n  \n The workflow runtime engine provides locking semantics to restrict access to a workflow instance state that is saved in the data store. This can be accessed by the persistence services running in multiple hosts and pointing to the same data store. The locking semantics are designed to prevent persistence services that run in two different workflow runtimes from loading the same workflow instance into memory at the same time. Depending on the type of environment your persistence service is designed to support, you can choose whether to support this functionality. If you choose to support the runtime locking semantics, then, if a persistence service tries to save a workflow instance state that has been previously locked by another persistence service, you should throw a <xref:System.Workflow.Runtime.WorkflowOwnershipException>. If `unlock` is `true`, you should unlock access to the workflow instance state after you save it.  \n  \n <xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.LoadWorkflowInstanceState%2A> takes the <xref:System.Guid> of the workflow instance as a parameter. Therefore, you should save this <xref:System.Guid>. You can also use this <xref:System.Guid> to associate the workflow instance with the saved states of its completed scopes. You must do this because you must be able to mark these completed scopes as unneeded when the workflow instance completes.  \n  \n The workflow runtime engine calls <xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.SaveWorkflowInstanceState%2A> a final time when the workflow instance is completed or terminated. Therefore, if <xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.GetWorkflowStatus%2A> is equal to <xref:System.Workflow.Runtime.WorkflowStatus.Completed> or <xref:System.Workflow.Runtime.WorkflowStatus.Terminated>, you can safely delete the workflow instance and all its associated completed scopes from your data store. Alternatively, you can subscribe to the <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowCompleted> or <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowTerminated> events to determine when it is safe to delete records associated with the workflow instance. Whether you actually delete the records from your data store depends on your implementation.  \n  \n If you implement a persistence service that uses a durable store, then, to maintain consistency with the internal state of the workflow runtime engine, you should participate in workflow transaction batching to defer the actual write to your durable store until a workflow commit point. To participate in batching, add a work item that represents the pending changes to your durable store to the <xref:System.Workflow.Runtime.WorkflowEnvironment.WorkBatch%2A> property, and implement the <xref:System.Workflow.Runtime.IPendingWork> interface in your persistence service.","nodes":[{"pos":[0,650],"content":"You must call one of the overloaded <xref:System.Workflow.ComponentModel.Activity.Save%2A> methods to serialize `rootActivity` into a <xref:System.IO.Stream>. You can then choose to additionally process the <xref:System.IO.Stream> before writing it to your data store. However, when the workflow runtime engine calls <xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.LoadWorkflowInstanceState%2A>, you must restore an identical copy of the root activity. If you cannot save the workflow instance state to your data store, you should throw a <xref:System.Workflow.Runtime.Hosting.PersistenceException> with an appropriate error message.","nodes":[{"content":"You must call one of the overloaded <ph id=\"ph1\">&lt;xref:System.Workflow.ComponentModel.Activity.Save%2A&gt;</ph> methods to serialize <ph id=\"ph2\">`rootActivity`</ph> into a <ph id=\"ph3\">&lt;xref:System.IO.Stream&gt;</ph>.","pos":[0,158],"source":"You must call one of the overloaded <xref:System.Workflow.ComponentModel.Activity.Save%2A> methods to serialize `rootActivity` into a <xref:System.IO.Stream>."},{"content":"You can then choose to additionally process the <ph id=\"ph1\">&lt;xref:System.IO.Stream&gt;</ph> before writing it to your data store.","pos":[159,268],"source":" You can then choose to additionally process the <xref:System.IO.Stream> before writing it to your data store."},{"content":"However, when the workflow runtime engine calls <ph id=\"ph1\">&lt;xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.LoadWorkflowInstanceState%2A&gt;</ph>, you must restore an identical copy of the root activity.","pos":[269,469],"source":" However, when the workflow runtime engine calls <xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.LoadWorkflowInstanceState%2A>, you must restore an identical copy of the root activity."},{"content":"If you cannot save the workflow instance state to your data store, you should throw a <ph id=\"ph1\">&lt;xref:System.Workflow.Runtime.Hosting.PersistenceException&gt;</ph> with an appropriate error message.","pos":[470,650],"source":" If you cannot save the workflow instance state to your data store, you should throw a <xref:System.Workflow.Runtime.Hosting.PersistenceException> with an appropriate error message."}]},{"pos":[657,1592],"content":"The workflow runtime engine provides locking semantics to restrict access to a workflow instance state that is saved in the data store. This can be accessed by the persistence services running in multiple hosts and pointing to the same data store. The locking semantics are designed to prevent persistence services that run in two different workflow runtimes from loading the same workflow instance into memory at the same time. Depending on the type of environment your persistence service is designed to support, you can choose whether to support this functionality. If you choose to support the runtime locking semantics, then, if a persistence service tries to save a workflow instance state that has been previously locked by another persistence service, you should throw a <xref:System.Workflow.Runtime.WorkflowOwnershipException>. If `unlock` is `true`, you should unlock access to the workflow instance state after you save it.","nodes":[{"content":"The workflow runtime engine provides locking semantics to restrict access to a workflow instance state that is saved in the data store.","pos":[0,135]},{"content":"This can be accessed by the persistence services running in multiple hosts and pointing to the same data store.","pos":[136,247]},{"content":"The locking semantics are designed to prevent persistence services that run in two different workflow runtimes from loading the same workflow instance into memory at the same time.","pos":[248,428]},{"content":"Depending on the type of environment your persistence service is designed to support, you can choose whether to support this functionality.","pos":[429,568]},{"content":"If you choose to support the runtime locking semantics, then, if a persistence service tries to save a workflow instance state that has been previously locked by another persistence service, you should throw a <ph id=\"ph1\">&lt;xref:System.Workflow.Runtime.WorkflowOwnershipException&gt;</ph>.","pos":[569,837],"source":" If you choose to support the runtime locking semantics, then, if a persistence service tries to save a workflow instance state that has been previously locked by another persistence service, you should throw a <xref:System.Workflow.Runtime.WorkflowOwnershipException>."},{"content":"If <ph id=\"ph1\">`unlock`</ph> is <ph id=\"ph2\">`true`</ph>, you should unlock access to the workflow instance state after you save it.","pos":[838,935],"source":" If `unlock` is `true`, you should unlock access to the workflow instance state after you save it."}]},{"pos":[1599,2061],"content":"<xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.LoadWorkflowInstanceState%2A> takes the <xref:System.Guid> of the workflow instance as a parameter. Therefore, you should save this <xref:System.Guid>. You can also use this <xref:System.Guid> to associate the workflow instance with the saved states of its completed scopes. You must do this because you must be able to mark these completed scopes as unneeded when the workflow instance completes.","nodes":[{"content":"<xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.LoadWorkflowInstanceState%2A> takes the <xref:System.Guid> of the workflow instance as a parameter. Therefore, you should save this <xref:System.Guid>. You can also use this <xref:System.Guid> to associate the workflow instance with the saved states of its completed scopes. You must do this because you must be able to mark these completed scopes as unneeded when the workflow instance completes.","pos":[0,462],"nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.LoadWorkflowInstanceState%2A&gt;</ph> takes the <ph id=\"ph2\">&lt;xref:System.Guid&gt;</ph> of the workflow instance as a parameter.","pos":[0,164],"source":"<xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.LoadWorkflowInstanceState%2A> takes the <xref:System.Guid> of the workflow instance as a parameter."},{"content":"Therefore, you should save this <ph id=\"ph1\">&lt;xref:System.Guid&gt;</ph>.","pos":[165,216],"source":" Therefore, you should save this <xref:System.Guid>."},{"content":"You can also use this <ph id=\"ph1\">&lt;xref:System.Guid&gt;</ph> to associate the workflow instance with the saved states of its completed scopes.","pos":[217,339],"source":" You can also use this <xref:System.Guid> to associate the workflow instance with the saved states of its completed scopes."},{"content":"You must do this because you must be able to mark these completed scopes as unneeded when the workflow instance completes.","pos":[340,462]}]}]},{"pos":[2068,2960],"content":"The workflow runtime engine calls <xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.SaveWorkflowInstanceState%2A> a final time when the workflow instance is completed or terminated. Therefore, if <xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.GetWorkflowStatus%2A> is equal to <xref:System.Workflow.Runtime.WorkflowStatus.Completed> or <xref:System.Workflow.Runtime.WorkflowStatus.Terminated>, you can safely delete the workflow instance and all its associated completed scopes from your data store. Alternatively, you can subscribe to the <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowCompleted> or <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowTerminated> events to determine when it is safe to delete records associated with the workflow instance. Whether you actually delete the records from your data store depends on your implementation.","nodes":[{"content":"The workflow runtime engine calls <xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.SaveWorkflowInstanceState%2A> a final time when the workflow instance is completed or terminated. Therefore, if <xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.GetWorkflowStatus%2A> is equal to <xref:System.Workflow.Runtime.WorkflowStatus.Completed> or <xref:System.Workflow.Runtime.WorkflowStatus.Terminated>, you can safely delete the workflow instance and all its associated completed scopes from your data store. Alternatively, you can subscribe to the <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowCompleted> or <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowTerminated> events to determine when it is safe to delete records associated with the workflow instance. Whether you actually delete the records from your data store depends on your implementation.","pos":[0,892],"nodes":[{"content":"The workflow runtime engine calls <ph id=\"ph1\">&lt;xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.SaveWorkflowInstanceState%2A&gt;</ph> a final time when the workflow instance is completed or terminated.","pos":[0,196],"source":"The workflow runtime engine calls <xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.SaveWorkflowInstanceState%2A> a final time when the workflow instance is completed or terminated."},{"content":"Therefore, if <ph id=\"ph1\">&lt;xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.GetWorkflowStatus%2A&gt;</ph> is equal to <ph id=\"ph2\">&lt;xref:System.Workflow.Runtime.WorkflowStatus.Completed&gt;</ph> or <ph id=\"ph3\">&lt;xref:System.Workflow.Runtime.WorkflowStatus.Terminated&gt;</ph>, you can safely delete the workflow instance and all its associated completed scopes from your data store.","pos":[197,532],"source":" Therefore, if <xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.GetWorkflowStatus%2A> is equal to <xref:System.Workflow.Runtime.WorkflowStatus.Completed> or <xref:System.Workflow.Runtime.WorkflowStatus.Terminated>, you can safely delete the workflow instance and all its associated completed scopes from your data store."},{"content":"Alternatively, you can subscribe to the <ph id=\"ph1\">&lt;xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowCompleted&gt;</ph> or <ph id=\"ph2\">&lt;xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowTerminated&gt;</ph> events to determine when it is safe to delete records associated with the workflow instance.","pos":[533,799],"source":" Alternatively, you can subscribe to the <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowCompleted> or <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowTerminated> events to determine when it is safe to delete records associated with the workflow instance."},{"content":"Whether you actually delete the records from your data store depends on your implementation.","pos":[800,892]}]}]},{"pos":[2967,3537],"content":"If you implement a persistence service that uses a durable store, then, to maintain consistency with the internal state of the workflow runtime engine, you should participate in workflow transaction batching to defer the actual write to your durable store until a workflow commit point. To participate in batching, add a work item that represents the pending changes to your durable store to the <xref:System.Workflow.Runtime.WorkflowEnvironment.WorkBatch%2A> property, and implement the <xref:System.Workflow.Runtime.IPendingWork> interface in your persistence service.","nodes":[{"content":"If you implement a persistence service that uses a durable store, then, to maintain consistency with the internal state of the workflow runtime engine, you should participate in workflow transaction batching to defer the actual write to your durable store until a workflow commit point. To participate in batching, add a work item that represents the pending changes to your durable store to the <xref:System.Workflow.Runtime.WorkflowEnvironment.WorkBatch%2A> property, and implement the <xref:System.Workflow.Runtime.IPendingWork> interface in your persistence service.","pos":[0,570],"nodes":[{"content":"If you implement a persistence service that uses a durable store, then, to maintain consistency with the internal state of the workflow runtime engine, you should participate in workflow transaction batching to defer the actual write to your durable store until a workflow commit point.","pos":[0,286]},{"content":"To participate in batching, add a work item that represents the pending changes to your durable store to the <ph id=\"ph1\">&lt;xref:System.Workflow.Runtime.WorkflowEnvironment.WorkBatch%2A&gt;</ph> property, and implement the <ph id=\"ph2\">&lt;xref:System.Workflow.Runtime.IPendingWork&gt;</ph> interface in your persistence service.","pos":[287,570],"source":" To participate in batching, add a work item that represents the pending changes to your durable store to the <xref:System.Workflow.Runtime.WorkflowEnvironment.WorkBatch%2A> property, and implement the <xref:System.Workflow.Runtime.IPendingWork> interface in your persistence service."}]}]}],"pos":[33902,37450],"yaml":true,"extradata":"MT"},{"content":"The root activity of the workflow instance.","nodes":[{"pos":[0,43],"content":"The root activity of the workflow instance.","nodes":[{"content":"The root activity of the workflow instance.","pos":[0,43]}]}],"pos":[38272,38316],"yaml":true},{"content":"`true` if the workflow instance should not be locked; `false` if the workflow instance should be locked.","nodes":[{"pos":[0,104],"content":"<ph id=\"ph1\">`true`</ph> if the workflow instance should not be locked; <ph id=\"ph2\">`false`</ph> if the workflow instance should be locked.","source":"`true` if the workflow instance should not be locked; `false` if the workflow instance should be locked."}],"pos":[38379,38486],"yaml":true},{"content":"Determines whether a workflow should be unloaded when idle.","nodes":[{"pos":[0,59],"content":"Determines whether a workflow should be unloaded when idle.","nodes":[{"content":"Determines whether a workflow should be unloaded when idle.","pos":[0,59]}]}],"pos":[39787,39847],"yaml":true},{"content":"An <xref href=\"System.Workflow.ComponentModel.Activity\"></xref> that represents the completed scope.","nodes":[{"pos":[0,100],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Workflow.ComponentModel.Activity\"&gt;&lt;/xref&gt;</ph> that represents the completed scope.","source":"An <xref href=\"System.Workflow.ComponentModel.Activity\"></xref> that represents the completed scope."}],"pos":[40636,40737],"yaml":true},{"content":"If `true`, the workflow runtime engine unloads the specified workflow when it becomes idle.","nodes":[{"pos":[0,91],"content":"If <ph id=\"ph1\">`true`</ph>, the workflow runtime engine unloads the specified workflow when it becomes idle.","source":"If `true`, the workflow runtime engine unloads the specified workflow when it becomes idle."}],"pos":[40795,40887],"yaml":true},{"content":"When overridden in a derived class, unlocks the workflow instance state.","nodes":[{"pos":[0,72],"content":"When overridden in a derived class, unlocks the workflow instance state.","nodes":[{"content":"When overridden in a derived class, unlocks the workflow instance state.","pos":[0,72]}]}],"pos":[42265,42338],"yaml":true},{"content":"This method is abstract, so it does not contain a default implementation on locking and unlocking.  \n  \n While implementing a custom persistence service, if you want to implement a locking scheme you will need to override this method and provide a locking-unlocking mechanism in the <xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.SaveWorkflowInstanceState%2A> method based on the value of the unlock parameter.","nodes":[{"pos":[0,98],"content":"This method is abstract, so it does not contain a default implementation on locking and unlocking.","nodes":[{"content":"This method is abstract, so it does not contain a default implementation on locking and unlocking.","pos":[0,98]}]},{"pos":[105,428],"content":"While implementing a custom persistence service, if you want to implement a locking scheme you will need to override this method and provide a locking-unlocking mechanism in the <xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.SaveWorkflowInstanceState%2A> method based on the value of the unlock parameter.","nodes":[{"content":"While implementing a custom persistence service, if you want to implement a locking scheme you will need to override this method and provide a locking-unlocking mechanism in the <ph id=\"ph1\">&lt;xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.SaveWorkflowInstanceState%2A&gt;</ph> method based on the value of the unlock parameter.","pos":[0,323],"source":"While implementing a custom persistence service, if you want to implement a locking scheme you will need to override this method and provide a locking-unlocking mechanism in the <xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.SaveWorkflowInstanceState%2A> method based on the value of the unlock parameter."}]}],"pos":[42349,42782],"yaml":true,"extradata":"MT"},{"content":"The root activity of the workflow instance.","nodes":[{"pos":[0,43],"content":"The root activity of the workflow instance.","nodes":[{"content":"The root activity of the workflow instance.","pos":[0,43]}]}],"pos":[43595,43639],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Workflow.Runtime.Hosting.WorkflowPersistenceService\n  commentId: T:System.Workflow.Runtime.Hosting.WorkflowPersistenceService\n  id: WorkflowPersistenceService\n  children:\n  - System.Workflow.Runtime.Hosting.WorkflowPersistenceService.#ctor\n  - System.Workflow.Runtime.Hosting.WorkflowPersistenceService.GetDefaultSerializedForm(System.Workflow.ComponentModel.Activity)\n  - System.Workflow.Runtime.Hosting.WorkflowPersistenceService.GetIsBlocked(System.Workflow.ComponentModel.Activity)\n  - System.Workflow.Runtime.Hosting.WorkflowPersistenceService.GetSuspendOrTerminateInfo(System.Workflow.ComponentModel.Activity)\n  - System.Workflow.Runtime.Hosting.WorkflowPersistenceService.GetWorkflowStatus(System.Workflow.ComponentModel.Activity)\n  - System.Workflow.Runtime.Hosting.WorkflowPersistenceService.LoadCompletedContextActivity(System.Guid,System.Workflow.ComponentModel.Activity)\n  - System.Workflow.Runtime.Hosting.WorkflowPersistenceService.LoadWorkflowInstanceState(System.Guid)\n  - System.Workflow.Runtime.Hosting.WorkflowPersistenceService.RestoreFromDefaultSerializedForm(System.Byte[],System.Workflow.ComponentModel.Activity)\n  - System.Workflow.Runtime.Hosting.WorkflowPersistenceService.SaveCompletedContextActivity(System.Workflow.ComponentModel.Activity)\n  - System.Workflow.Runtime.Hosting.WorkflowPersistenceService.SaveWorkflowInstanceState(System.Workflow.ComponentModel.Activity,System.Boolean)\n  - System.Workflow.Runtime.Hosting.WorkflowPersistenceService.UnloadOnIdle(System.Workflow.ComponentModel.Activity)\n  - System.Workflow.Runtime.Hosting.WorkflowPersistenceService.UnlockWorkflowInstanceState(System.Workflow.ComponentModel.Activity)\n  langs:\n  - csharp\n  name: WorkflowPersistenceService\n  nameWithType: WorkflowPersistenceService\n  fullName: System.Workflow.Runtime.Hosting.WorkflowPersistenceService\n  type: Class\n  assemblies:\n  - System.Workflow.Runtime\n  namespace: System.Workflow.Runtime.Hosting\n  summary: The abstract base class from which all persistence services are derived.\n  remarks: \"> [!NOTE]\\n>  [!INCLUDE[DeprecatedContent](~/includes/deprecatedcontent-md.md)]  \\n  \\n When certain conditions occur while the workflow is running, the workflow runtime engine persists state information about the workflow instance. Persistence can occur, for example, when an atomic transaction finishes, when the workflow instance becomes idle, when the host calls <xref:System.Workflow.Runtime.WorkflowInstance.Unload%2A?displayProperty=fullName> on the workflow instance, or when a workflow instance is terminated or finishes. When the workflow runtime engine semantics dictate that persistence should occur, the workflow runtime engine calls methods that are supplied by a persistence service to save state information about the workflow instance. Likewise, when the workflow runtime engine needs to restore a previously persisted workflow instance, it calls methods that are supplied by the persistence service to load this state information. The workflow runtime engine handles all the semantics regarding when to perform persistence. The persistence service handles actually saving and loading the workflow state information to or from a data store.  \\n  \\n You can create a persistence service by deriving a class from the <xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService> class.  You can add your persistence service to the workflow runtime engine by calling <xref:System.Workflow.Runtime.WorkflowRuntime.AddService%2A> or by making an appropriate entry in the application configuration file. The <xref:System.Workflow.Runtime.WorkflowRuntime> should only contain one persistence service. Windows Workflow Foundation provides the <xref:System.Workflow.Runtime.Hosting.SqlWorkflowPersistenceService> class, an out-of-box persistence service, which you can use as is or extend.  \\n  \\n The workflow runtime engine has semantics for locking workflow state information for use in environments where persistence services that run in different processes might have access to a single data store. The <xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService> class provides the capability to support this functionality of the workflow runtime engine by providing a parameter to <xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.SaveWorkflowInstanceState%2A> that specifies whether the state information of a workflow instance should be unlocked in the data store, and by providing a method <xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.UnlockWorkflowInstanceState%2A> to unlock previously locked workflow state information. In a persistence service that implements locking, a call to <xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.LoadWorkflowInstanceState%2A> should lock the state information for a workflow instance.  \\n  \\n Your persistence service should throw a <xref:System.Workflow.Runtime.Hosting.PersistenceException> if it fails to save state information to its data store or load state information from its data store. The workflow runtime engine expects this behavior.  \\n  \\n A batching mechanism is provided for services that use a durable store to save workflow state information. It is important in these cases to maintain consistency between the durable store that is used by the persistence service and the internal state of the workflow runtime engine. You can add functionality defined by the <xref:System.Workflow.Runtime.IPendingWork> interface to your service, and then participate in workflow transaction batching provided by the <xref:System.Workflow.Runtime.Hosting.WorkflowCommitWorkBatchService> by adding changes to your data store as work items to the <xref:System.Workflow.Runtime.WorkflowEnvironment.WorkBatch%2A>. The durable store itself should implement the <xref:System.Transactions.IEnlistmentNotification> interface, so that workflow information is not persisted incorrectly in the event of a transaction rollback. For more information, see <xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.SaveCompletedContextActivity%2A> or <xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.SaveWorkflowInstanceState%2A>.\"\n  syntax:\n    content: >-\n      [System.Obsolete(\"The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*\")]\n\n      public abstract class WorkflowPersistenceService : System.Workflow.Runtime.Hosting.WorkflowRuntimeService\n  inheritance:\n  - System.Object\n  - System.Workflow.Runtime.Hosting.WorkflowRuntimeService\n  derivedClasses:\n  - System.Workflow.Runtime.Hosting.SqlWorkflowPersistenceService\n  implements: []\n  inheritedMembers:\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.ToString\n  - System.Workflow.Runtime.Hosting.WorkflowRuntimeService.OnStarted\n  - System.Workflow.Runtime.Hosting.WorkflowRuntimeService.OnStopped\n  - System.Workflow.Runtime.Hosting.WorkflowRuntimeService.RaiseServicesExceptionNotHandledEvent(System.Exception,System.Guid)\n  - System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Runtime\n  - System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Start\n  - System.Workflow.Runtime.Hosting.WorkflowRuntimeService.State\n  - System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Stop\n  attributes:\n  - type: System.ObsoleteAttribute\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Workflow.Runtime.Hosting/WorkflowPersistenceService.xml\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.Workflow.Runtime.Hosting.WorkflowPersistenceService.#ctor\n  commentId: M:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.#ctor\n  id: '#ctor'\n  parent: System.Workflow.Runtime.Hosting.WorkflowPersistenceService\n  langs:\n  - csharp\n  name: WorkflowPersistenceService()\n  nameWithType: WorkflowPersistenceService.WorkflowPersistenceService()\n  fullName: WorkflowPersistenceService.WorkflowPersistenceService()\n  type: Constructor\n  assemblies:\n  - System.Workflow.Runtime\n  namespace: System.Workflow.Runtime.Hosting\n  summary: When implemented in a derived class, initializes a new instance of the <xref href=\"System.Workflow.Runtime.Hosting.WorkflowPersistenceService\"></xref> class.\n  remarks: ''\n  example:\n  - \"The following example demonstrates creating an instance of the `SqlWorkflowPersistenceService` class (derived from `WorkflowPersistenceService`). This example is from the Nested Exception Handlers SDK sample, from the Program.cs class.  For more information, see the [Nested Exception Handlers Sample](http://msdn.microsoft.com/en-us/d1da0209-842b-41c8-9b7c-0cbaa1034265).  \\n  \\n [!code-csharp[WF_Samples#161](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets11.cs#161)]\\n [!code-vb[WF_Samples#161](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets11.vb#161)]\"\n  syntax:\n    content: protected WorkflowPersistenceService ();\n    parameters: []\n  overload: System.Workflow.Runtime.Hosting.WorkflowPersistenceService.#ctor*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Workflow.Runtime.Hosting/WorkflowPersistenceService.xml\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.Workflow.Runtime.Hosting.WorkflowPersistenceService.GetDefaultSerializedForm(System.Workflow.ComponentModel.Activity)\n  commentId: M:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.GetDefaultSerializedForm(System.Workflow.ComponentModel.Activity)\n  id: GetDefaultSerializedForm(System.Workflow.ComponentModel.Activity)\n  parent: System.Workflow.Runtime.Hosting.WorkflowPersistenceService\n  langs:\n  - csharp\n  name: GetDefaultSerializedForm(Activity)\n  nameWithType: WorkflowPersistenceService.GetDefaultSerializedForm(Activity)\n  fullName: WorkflowPersistenceService.GetDefaultSerializedForm(Activity)\n  type: Method\n  assemblies:\n  - System.Workflow.Runtime\n  namespace: System.Workflow.Runtime.Hosting\n  summary: Retrieves the serialized default form of the <xref href=\"System.Workflow.ComponentModel.Activity\"></xref>.\n  syntax:\n    content: protected static byte[] GetDefaultSerializedForm (System.Workflow.ComponentModel.Activity activity);\n    parameters:\n    - id: activity\n      type: System.Workflow.ComponentModel.Activity\n      description: The <xref href=\"System.Workflow.ComponentModel.Activity\"></xref> whose serialized form is requested.\n    return:\n      type: System.Byte[]\n      description: The serialized default form of the <xref href=\"System.Workflow.ComponentModel.Activity\"></xref>.\n  overload: System.Workflow.Runtime.Hosting.WorkflowPersistenceService.GetDefaultSerializedForm*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Workflow.Runtime.Hosting/WorkflowPersistenceService.xml\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.Workflow.Runtime.Hosting.WorkflowPersistenceService.GetIsBlocked(System.Workflow.ComponentModel.Activity)\n  commentId: M:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.GetIsBlocked(System.Workflow.ComponentModel.Activity)\n  id: GetIsBlocked(System.Workflow.ComponentModel.Activity)\n  parent: System.Workflow.Runtime.Hosting.WorkflowPersistenceService\n  langs:\n  - csharp\n  name: GetIsBlocked(Activity)\n  nameWithType: WorkflowPersistenceService.GetIsBlocked(Activity)\n  fullName: WorkflowPersistenceService.GetIsBlocked(Activity)\n  type: Method\n  assemblies:\n  - System.Workflow.Runtime\n  namespace: System.Workflow.Runtime.Hosting\n  summary: Indicates whether the given activity is blocked.\n  syntax:\n    content: protected static bool GetIsBlocked (System.Workflow.ComponentModel.Activity rootActivity);\n    parameters:\n    - id: rootActivity\n      type: System.Workflow.ComponentModel.Activity\n      description: The root activity of the workflow instance.\n    return:\n      type: System.Boolean\n      description: '`true` if the given activity is blocked; otherwise, `false`.'\n  overload: System.Workflow.Runtime.Hosting.WorkflowPersistenceService.GetIsBlocked*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Workflow.Runtime.Hosting/WorkflowPersistenceService.xml\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.Workflow.Runtime.Hosting.WorkflowPersistenceService.GetSuspendOrTerminateInfo(System.Workflow.ComponentModel.Activity)\n  commentId: M:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.GetSuspendOrTerminateInfo(System.Workflow.ComponentModel.Activity)\n  id: GetSuspendOrTerminateInfo(System.Workflow.ComponentModel.Activity)\n  parent: System.Workflow.Runtime.Hosting.WorkflowPersistenceService\n  langs:\n  - csharp\n  name: GetSuspendOrTerminateInfo(Activity)\n  nameWithType: WorkflowPersistenceService.GetSuspendOrTerminateInfo(Activity)\n  fullName: WorkflowPersistenceService.GetSuspendOrTerminateInfo(Activity)\n  type: Method\n  assemblies:\n  - System.Workflow.Runtime\n  namespace: System.Workflow.Runtime.Hosting\n  summary: Retrieves the termination or suspend information of the given activity.\n  syntax:\n    content: protected static string GetSuspendOrTerminateInfo (System.Workflow.ComponentModel.Activity rootActivity);\n    parameters:\n    - id: rootActivity\n      type: System.Workflow.ComponentModel.Activity\n      description: The root activity of the workflow instance.\n    return:\n      type: System.String\n      description: A <xref href=\"System.String\"></xref> that contains the termination or suspend information.\n  overload: System.Workflow.Runtime.Hosting.WorkflowPersistenceService.GetSuspendOrTerminateInfo*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Workflow.Runtime.Hosting/WorkflowPersistenceService.xml\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.Workflow.Runtime.Hosting.WorkflowPersistenceService.GetWorkflowStatus(System.Workflow.ComponentModel.Activity)\n  commentId: M:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.GetWorkflowStatus(System.Workflow.ComponentModel.Activity)\n  id: GetWorkflowStatus(System.Workflow.ComponentModel.Activity)\n  parent: System.Workflow.Runtime.Hosting.WorkflowPersistenceService\n  langs:\n  - csharp\n  name: GetWorkflowStatus(Activity)\n  nameWithType: WorkflowPersistenceService.GetWorkflowStatus(Activity)\n  fullName: WorkflowPersistenceService.GetWorkflowStatus(Activity)\n  type: Method\n  assemblies:\n  - System.Workflow.Runtime\n  namespace: System.Workflow.Runtime.Hosting\n  summary: Retrieves the status of the workflow.\n  syntax:\n    content: protected static System.Workflow.Runtime.WorkflowStatus GetWorkflowStatus (System.Workflow.ComponentModel.Activity rootActivity);\n    parameters:\n    - id: rootActivity\n      type: System.Workflow.ComponentModel.Activity\n      description: The root activity of the workflow instance.\n    return:\n      type: System.Workflow.Runtime.WorkflowStatus\n      description: A <xref href=\"System.Workflow.Runtime.WorkflowStatus\"></xref> enumeration value that denotes the status of the workflow.\n  overload: System.Workflow.Runtime.Hosting.WorkflowPersistenceService.GetWorkflowStatus*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Workflow.Runtime.Hosting/WorkflowPersistenceService.xml\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.Workflow.Runtime.Hosting.WorkflowPersistenceService.LoadCompletedContextActivity(System.Guid,System.Workflow.ComponentModel.Activity)\n  commentId: M:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.LoadCompletedContextActivity(System.Guid,System.Workflow.ComponentModel.Activity)\n  id: LoadCompletedContextActivity(System.Guid,System.Workflow.ComponentModel.Activity)\n  parent: System.Workflow.Runtime.Hosting.WorkflowPersistenceService\n  langs:\n  - csharp\n  name: LoadCompletedContextActivity(Guid, Activity)\n  nameWithType: WorkflowPersistenceService.LoadCompletedContextActivity(Guid, Activity)\n  fullName: WorkflowPersistenceService.LoadCompletedContextActivity(Guid, Activity)\n  type: Method\n  assemblies:\n  - System.Workflow.Runtime\n  namespace: System.Workflow.Runtime.Hosting\n  summary: When implemented in a derived class, loads the specified completed scope back into memory.\n  remarks: \"The workflow runtime engine uses <xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.LoadCompletedContextActivity%2A> to implement compensation. You must restore an identical copy of the completed scope. To do this, you must restore a valid <xref:System.IO.Stream> from your representation of the completed scope in the data store. Then you must pass this <xref:System.IO.Stream> to one of the overloaded methods of <xref:System.Workflow.ComponentModel.Activity.Load%2A> to perform deserialization of the scope.  \\n  \\n If your persistence service cannot load the completed scope from its data store, it should throw a <xref:System.Workflow.Runtime.Hosting.PersistenceException> with an appropriate message.\"\n  example:\n  - \"The following example demonstrates an implementation of the `LoadCompletedContextActivity` method. This example is from the Custom Persistence Service sample, from the FilePersistenceService.cs file. For more information, see [Custom Persistence Service Sample](http://msdn.microsoft.com/en-us/869dfadf-5298-4551-bc80-f4cf7918729d).  \\n  \\n [!code-csharp[WF_Samples#269](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets24.cs#269)]\\n [!code-vb[WF_Samples#269](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets24.vb#269)]\"\n  syntax:\n    content: protected abstract System.Workflow.ComponentModel.Activity LoadCompletedContextActivity (Guid scopeId, System.Workflow.ComponentModel.Activity outerActivity);\n    parameters:\n    - id: scopeId\n      type: System.Guid\n      description: The <xref href=\"System.Guid\"></xref> of the completed scope.\n    - id: outerActivity\n      type: System.Workflow.ComponentModel.Activity\n      description: An <xref href=\"System.Workflow.ComponentModel.Activity\"></xref> that represents the activity that encloses the completed scope.\n    return:\n      type: System.Workflow.ComponentModel.Activity\n      description: An <xref href=\"System.Workflow.ComponentModel.Activity\"></xref> that represents the completed scope.\n  overload: System.Workflow.Runtime.Hosting.WorkflowPersistenceService.LoadCompletedContextActivity*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Workflow.Runtime.Hosting/WorkflowPersistenceService.xml\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.Workflow.Runtime.Hosting.WorkflowPersistenceService.LoadWorkflowInstanceState(System.Guid)\n  commentId: M:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.LoadWorkflowInstanceState(System.Guid)\n  id: LoadWorkflowInstanceState(System.Guid)\n  parent: System.Workflow.Runtime.Hosting.WorkflowPersistenceService\n  langs:\n  - csharp\n  name: LoadWorkflowInstanceState(Guid)\n  nameWithType: WorkflowPersistenceService.LoadWorkflowInstanceState(Guid)\n  fullName: WorkflowPersistenceService.LoadWorkflowInstanceState(Guid)\n  type: Method\n  assemblies:\n  - System.Workflow.Runtime\n  namespace: System.Workflow.Runtime.Hosting\n  summary: When implemented in a derived class, loads the specified state of the workflow instance back into memory.\n  remarks: \"You must restore an identical copy of the activity. To do this, you must restore a valid <xref:System.IO.Stream> from your representation of the workflow instance in the data store; then you must pass this <xref:System.IO.Stream> to one of the overloaded <xref:System.Workflow.ComponentModel.Activity.Load%2A> methods to deserialize the workflow instance state. If your persistence service cannot load the workflow instance state from its data store, it should throw a <xref:System.Workflow.Runtime.Hosting.PersistenceException> with an appropriate message.  \\n  \\n The workflow runtime engine implements locking semantics to restrict access to a workflow instance state that is saved in a data store. This can be accessed by persistence services that run in multiple processes. The locking semantics are designed to prevent persistence services that run in two different processes from loading the same workflow instance into memory at the same time. Depending on the type of environment that your persistence service is designed to support, you may choose whether to support this functionality. If you choose to support the runtime locking semantics, and if this workflow instance state has been previously locked by another process, then you should throw a <xref:System.Workflow.Runtime.WorkflowOwnershipException>. Otherwise, you should lock access to the workflow instance state in your data store. The workflow instance state can be unlocked by a call to <xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.UnlockWorkflowInstanceState%2A> or a call to <xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.SaveWorkflowInstanceState%2A> with the unlock parameter set to `true`.\"\n  example:\n  - \"The following example demonstrates an implementation of the `LoadWorkflowInstanceState` method. This example is from the Custom Persistence Service sample, from the FilePersistenceService.cs file. For more information, see [Custom Persistence Service Sample](http://msdn.microsoft.com/en-us/869dfadf-5298-4551-bc80-f4cf7918729d).  \\n  \\n [!code-csharp[WF_Samples#266](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets24.cs#266)]\\n [!code-vb[WF_Samples#266](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets24.vb#266)]\"\n  syntax:\n    content: protected abstract System.Workflow.ComponentModel.Activity LoadWorkflowInstanceState (Guid instanceId);\n    parameters:\n    - id: instanceId\n      type: System.Guid\n      description: The <xref href=\"System.Guid\"></xref> of the root activity of the workflow instance.\n    return:\n      type: System.Workflow.ComponentModel.Activity\n      description: An <xref href=\"System.Workflow.ComponentModel.Activity\"></xref> that represents the root activity of the workflow instance.\n  overload: System.Workflow.Runtime.Hosting.WorkflowPersistenceService.LoadWorkflowInstanceState*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Workflow.Runtime.Hosting/WorkflowPersistenceService.xml\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.Workflow.Runtime.Hosting.WorkflowPersistenceService.RestoreFromDefaultSerializedForm(System.Byte[],System.Workflow.ComponentModel.Activity)\n  commentId: M:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.RestoreFromDefaultSerializedForm(System.Byte[],System.Workflow.ComponentModel.Activity)\n  id: RestoreFromDefaultSerializedForm(System.Byte[],System.Workflow.ComponentModel.Activity)\n  parent: System.Workflow.Runtime.Hosting.WorkflowPersistenceService\n  langs:\n  - csharp\n  name: RestoreFromDefaultSerializedForm(Byte[], Activity)\n  nameWithType: WorkflowPersistenceService.RestoreFromDefaultSerializedForm(Byte[], Activity)\n  fullName: WorkflowPersistenceService.RestoreFromDefaultSerializedForm(Byte[], Activity)\n  type: Method\n  assemblies:\n  - System.Workflow.Runtime\n  namespace: System.Workflow.Runtime.Hosting\n  summary: Restores the <xref href=\"System.Workflow.ComponentModel.Activity\"></xref> from its serialized form.\n  remarks: ''\n  example:\n  - \"The following example demonstrates an implementation of the `RestoreFromDefaultSerializedForm` method. This example is from the Custom Persistence Service sample, from the FilePersistenceService.cs file. For more information, see [Custom Persistence Service Sample](http://msdn.microsoft.com/en-us/869dfadf-5298-4551-bc80-f4cf7918729d).  \\n  \\n [!code-csharp[WF_Samples#269](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets24.cs#269)]\\n [!code-vb[WF_Samples#269](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets24.vb#269)]\"\n  syntax:\n    content: protected static System.Workflow.ComponentModel.Activity RestoreFromDefaultSerializedForm (byte[] activityBytes, System.Workflow.ComponentModel.Activity outerActivity);\n    parameters:\n    - id: activityBytes\n      type: System.Byte[]\n      description: The serialized form of <xref href=\"System.Workflow.ComponentModel.Activity\"></xref>.\n    - id: outerActivity\n      type: System.Workflow.ComponentModel.Activity\n      description: The outer <xref href=\"System.Workflow.ComponentModel.Activity\"></xref>, containing the <xref href=\"System.Workflow.ComponentModel.Activity\"></xref> to restore.\n    return:\n      type: System.Workflow.ComponentModel.Activity\n      description: The restored <xref href=\"System.Workflow.ComponentModel.Activity\"></xref>.\n  overload: System.Workflow.Runtime.Hosting.WorkflowPersistenceService.RestoreFromDefaultSerializedForm*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Workflow.Runtime.Hosting/WorkflowPersistenceService.xml\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.Workflow.Runtime.Hosting.WorkflowPersistenceService.SaveCompletedContextActivity(System.Workflow.ComponentModel.Activity)\n  commentId: M:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.SaveCompletedContextActivity(System.Workflow.ComponentModel.Activity)\n  id: SaveCompletedContextActivity(System.Workflow.ComponentModel.Activity)\n  parent: System.Workflow.Runtime.Hosting.WorkflowPersistenceService\n  langs:\n  - csharp\n  name: SaveCompletedContextActivity(Activity)\n  nameWithType: WorkflowPersistenceService.SaveCompletedContextActivity(Activity)\n  fullName: WorkflowPersistenceService.SaveCompletedContextActivity(Activity)\n  type: Method\n  assemblies:\n  - System.Workflow.Runtime\n  namespace: System.Workflow.Runtime.Hosting\n  summary: When implemented in a derived class, saves the specified completed scope to a data store.\n  remarks: \"The workflow runtime engine saves the state of completed scope activities in order to implement compensation. You must call one of the overloaded <xref:System.Workflow.ComponentModel.Activity.Save%2A> methods to serialize `activity` into a <xref:System.IO.Stream>; you may then choose to additionally process the <xref:System.IO.Stream> before writing it to your data store. However, when the workflow runtime engine calls <xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.LoadCompletedContextActivity%2A>, you must restore an identical copy of the activity.  \\n  \\n You must be able to associate the completed scope with its enclosing workflow instance to mark the scope as unneeded in your data store when the workflow instance finishes or is terminated. Therefore, you should also save the <xref:System.Guid> of the workflow instance that is associated with the completed scope; this can be obtained from the <xref:System.Workflow.Runtime.WorkflowInstance.InstanceId%2A> property of the <xref:System.Workflow.Runtime.WorkflowInstance> associated with `activity`.  \\n  \\n <xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.LoadCompletedContextActivity%2A> takes the <xref:System.Guid> of the completed scope as a parameter. Therefore, you must also save the <xref:System.Workflow.ComponentModel.ActivityExecutionContext.ContextGuid%2A> property associated with `activity`. This property can be referenced through the <xref:System.Workflow.ComponentModel.Activity.ActivityContextGuidProperty> field of `activity`.  \\n  \\n If you are implementing a persistence service that uses a durable store, to maintain consistency with the internal state of the workflow runtime engine, you should participate in workflow transaction batching to defer the actual write to your durable store until a workflow commit point. To participate in batching, add a work item to the <xref:System.Workflow.Runtime.WorkflowEnvironment.WorkBatch%2A> property that represents the pending changes to the database, and implement the <xref:System.Workflow.Runtime.IPendingWork> interface in your persistence service.  \\n  \\n If you cannot save the completed scope to your data store, you should throw a <xref:System.Workflow.Runtime.Hosting.PersistenceException> with an appropriate error message.\"\n  example:\n  - \"The following example demonstrates an implementation of the `SaveCompletedContextActivity` method. This example is from the Custom Persistence Service sample, from the FilePersistenceService.cs file. For more information, see [Custom Persistence Service Sample](http://msdn.microsoft.com/en-us/869dfadf-5298-4551-bc80-f4cf7918729d).  \\n  \\n [!code-csharp[WF_Samples#268](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets24.cs#268)]\\n [!code-vb[WF_Samples#268](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets24.vb#268)]\"\n  syntax:\n    content: protected abstract void SaveCompletedContextActivity (System.Workflow.ComponentModel.Activity activity);\n    parameters:\n    - id: activity\n      type: System.Workflow.ComponentModel.Activity\n      description: An <xref href=\"System.Workflow.ComponentModel.Activity\"></xref> that represents the completed scope.\n  overload: System.Workflow.Runtime.Hosting.WorkflowPersistenceService.SaveCompletedContextActivity*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Workflow.Runtime.Hosting/WorkflowPersistenceService.xml\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.Workflow.Runtime.Hosting.WorkflowPersistenceService.SaveWorkflowInstanceState(System.Workflow.ComponentModel.Activity,System.Boolean)\n  commentId: M:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.SaveWorkflowInstanceState(System.Workflow.ComponentModel.Activity,System.Boolean)\n  id: SaveWorkflowInstanceState(System.Workflow.ComponentModel.Activity,System.Boolean)\n  parent: System.Workflow.Runtime.Hosting.WorkflowPersistenceService\n  langs:\n  - csharp\n  name: SaveWorkflowInstanceState(Activity, Boolean)\n  nameWithType: WorkflowPersistenceService.SaveWorkflowInstanceState(Activity, Boolean)\n  fullName: WorkflowPersistenceService.SaveWorkflowInstanceState(Activity, Boolean)\n  type: Method\n  assemblies:\n  - System.Workflow.Runtime\n  namespace: System.Workflow.Runtime.Hosting\n  summary: When implemented in a derived class, saves the workflow instance state to a data store.\n  remarks: \"You must call one of the overloaded <xref:System.Workflow.ComponentModel.Activity.Save%2A> methods to serialize `rootActivity` into a <xref:System.IO.Stream>. You can then choose to additionally process the <xref:System.IO.Stream> before writing it to your data store. However, when the workflow runtime engine calls <xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.LoadWorkflowInstanceState%2A>, you must restore an identical copy of the root activity. If you cannot save the workflow instance state to your data store, you should throw a <xref:System.Workflow.Runtime.Hosting.PersistenceException> with an appropriate error message.  \\n  \\n The workflow runtime engine provides locking semantics to restrict access to a workflow instance state that is saved in the data store. This can be accessed by the persistence services running in multiple hosts and pointing to the same data store. The locking semantics are designed to prevent persistence services that run in two different workflow runtimes from loading the same workflow instance into memory at the same time. Depending on the type of environment your persistence service is designed to support, you can choose whether to support this functionality. If you choose to support the runtime locking semantics, then, if a persistence service tries to save a workflow instance state that has been previously locked by another persistence service, you should throw a <xref:System.Workflow.Runtime.WorkflowOwnershipException>. If `unlock` is `true`, you should unlock access to the workflow instance state after you save it.  \\n  \\n <xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.LoadWorkflowInstanceState%2A> takes the <xref:System.Guid> of the workflow instance as a parameter. Therefore, you should save this <xref:System.Guid>. You can also use this <xref:System.Guid> to associate the workflow instance with the saved states of its completed scopes. You must do this because you must be able to mark these completed scopes as unneeded when the workflow instance completes.  \\n  \\n The workflow runtime engine calls <xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.SaveWorkflowInstanceState%2A> a final time when the workflow instance is completed or terminated. Therefore, if <xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.GetWorkflowStatus%2A> is equal to <xref:System.Workflow.Runtime.WorkflowStatus.Completed> or <xref:System.Workflow.Runtime.WorkflowStatus.Terminated>, you can safely delete the workflow instance and all its associated completed scopes from your data store. Alternatively, you can subscribe to the <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowCompleted> or <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowTerminated> events to determine when it is safe to delete records associated with the workflow instance. Whether you actually delete the records from your data store depends on your implementation.  \\n  \\n If you implement a persistence service that uses a durable store, then, to maintain consistency with the internal state of the workflow runtime engine, you should participate in workflow transaction batching to defer the actual write to your durable store until a workflow commit point. To participate in batching, add a work item that represents the pending changes to your durable store to the <xref:System.Workflow.Runtime.WorkflowEnvironment.WorkBatch%2A> property, and implement the <xref:System.Workflow.Runtime.IPendingWork> interface in your persistence service.\"\n  example:\n  - \"The following example demonstrates an implementation of the `SaveWorkflowInstanceState` method. This example is from the Custom Persistence Service sample, from the FilePersistenceService.cs file. For more information, see [Custom Persistence Service Sample](http://msdn.microsoft.com/en-us/869dfadf-5298-4551-bc80-f4cf7918729d).  \\n  \\n [!code-csharp[WF_Samples#264](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets24.cs#264)]\\n [!code-vb[WF_Samples#264](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets24.vb#264)]\"\n  syntax:\n    content: protected abstract void SaveWorkflowInstanceState (System.Workflow.ComponentModel.Activity rootActivity, bool unlock);\n    parameters:\n    - id: rootActivity\n      type: System.Workflow.ComponentModel.Activity\n      description: The root activity of the workflow instance.\n    - id: unlock\n      type: System.Boolean\n      description: '`true` if the workflow instance should not be locked; `false` if the workflow instance should be locked.'\n  overload: System.Workflow.Runtime.Hosting.WorkflowPersistenceService.SaveWorkflowInstanceState*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Workflow.Runtime.Hosting/WorkflowPersistenceService.xml\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.Workflow.Runtime.Hosting.WorkflowPersistenceService.UnloadOnIdle(System.Workflow.ComponentModel.Activity)\n  commentId: M:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.UnloadOnIdle(System.Workflow.ComponentModel.Activity)\n  id: UnloadOnIdle(System.Workflow.ComponentModel.Activity)\n  parent: System.Workflow.Runtime.Hosting.WorkflowPersistenceService\n  langs:\n  - csharp\n  name: UnloadOnIdle(Activity)\n  nameWithType: WorkflowPersistenceService.UnloadOnIdle(Activity)\n  fullName: WorkflowPersistenceService.UnloadOnIdle(Activity)\n  type: Method\n  assemblies:\n  - System.Workflow.Runtime\n  namespace: System.Workflow.Runtime.Hosting\n  summary: Determines whether a workflow should be unloaded when idle.\n  remarks: ''\n  example:\n  - \"The following example demonstrates an implementation of the `UnloadOnIdle` method. This example is from the Custom Persistence Service sample, from the FilePersistenceService.cs file. For more information, see [Custom Persistence Service Sample](http://msdn.microsoft.com/en-us/869dfadf-5298-4551-bc80-f4cf7918729d).  \\n  \\n [!code-csharp[WF_Samples#270](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets24.cs#270)]\\n [!code-vb[WF_Samples#270](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets24.vb#270)]\"\n  syntax:\n    content: protected abstract bool UnloadOnIdle (System.Workflow.ComponentModel.Activity activity);\n    parameters:\n    - id: activity\n      type: System.Workflow.ComponentModel.Activity\n      description: An <xref href=\"System.Workflow.ComponentModel.Activity\"></xref> that represents the completed scope.\n    return:\n      type: System.Boolean\n      description: If `true`, the workflow runtime engine unloads the specified workflow when it becomes idle.\n  overload: System.Workflow.Runtime.Hosting.WorkflowPersistenceService.UnloadOnIdle*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Workflow.Runtime.Hosting/WorkflowPersistenceService.xml\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.Workflow.Runtime.Hosting.WorkflowPersistenceService.UnlockWorkflowInstanceState(System.Workflow.ComponentModel.Activity)\n  commentId: M:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.UnlockWorkflowInstanceState(System.Workflow.ComponentModel.Activity)\n  id: UnlockWorkflowInstanceState(System.Workflow.ComponentModel.Activity)\n  parent: System.Workflow.Runtime.Hosting.WorkflowPersistenceService\n  langs:\n  - csharp\n  name: UnlockWorkflowInstanceState(Activity)\n  nameWithType: WorkflowPersistenceService.UnlockWorkflowInstanceState(Activity)\n  fullName: WorkflowPersistenceService.UnlockWorkflowInstanceState(Activity)\n  type: Method\n  assemblies:\n  - System.Workflow.Runtime\n  namespace: System.Workflow.Runtime.Hosting\n  summary: When overridden in a derived class, unlocks the workflow instance state.\n  remarks: \"This method is abstract, so it does not contain a default implementation on locking and unlocking.  \\n  \\n While implementing a custom persistence service, if you want to implement a locking scheme you will need to override this method and provide a locking-unlocking mechanism in the <xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.SaveWorkflowInstanceState%2A> method based on the value of the unlock parameter.\"\n  example:\n  - \"The following example demonstrates an implementation of the `UnlockWorkflowInstanceState` method. This example is from the Custom Persistence Service sample, from the FilePersistenceService.cs file. For more information, see [Custom Persistence Service Sample](http://msdn.microsoft.com/en-us/869dfadf-5298-4551-bc80-f4cf7918729d).  \\n  \\n [!code-csharp[WF_Samples#267](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets24.cs#267)]\\n [!code-vb[WF_Samples#267](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets24.vb#267)]\"\n  syntax:\n    content: protected abstract void UnlockWorkflowInstanceState (System.Workflow.ComponentModel.Activity rootActivity);\n    parameters:\n    - id: rootActivity\n      type: System.Workflow.ComponentModel.Activity\n      description: The root activity of the workflow instance.\n  overload: System.Workflow.Runtime.Hosting.WorkflowPersistenceService.UnlockWorkflowInstanceState*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Workflow.Runtime.Hosting/WorkflowPersistenceService.xml\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\nreferences:\n- uid: System.Workflow.Runtime.Hosting.WorkflowRuntimeService\n  parent: System.Workflow.Runtime.Hosting\n  isExternal: false\n  name: WorkflowRuntimeService\n  nameWithType: WorkflowRuntimeService\n  fullName: System.Workflow.Runtime.Hosting.WorkflowRuntimeService\n- uid: System.Workflow.Runtime.Hosting.WorkflowPersistenceService.#ctor\n  parent: System.Workflow.Runtime.Hosting.WorkflowPersistenceService\n  isExternal: false\n  name: WorkflowPersistenceService()\n  nameWithType: WorkflowPersistenceService.WorkflowPersistenceService()\n  fullName: WorkflowPersistenceService.WorkflowPersistenceService()\n- uid: System.Workflow.Runtime.Hosting.WorkflowPersistenceService.GetDefaultSerializedForm(System.Workflow.ComponentModel.Activity)\n  parent: System.Workflow.Runtime.Hosting.WorkflowPersistenceService\n  isExternal: false\n  name: GetDefaultSerializedForm(Activity)\n  nameWithType: WorkflowPersistenceService.GetDefaultSerializedForm(Activity)\n  fullName: WorkflowPersistenceService.GetDefaultSerializedForm(Activity)\n- uid: System.Byte\n  name: Byte\n  nameWithType: Byte\n  fullName: System.Byte\n- uid: System.Byte[]\n  parent: System\n  isExternal: false\n  name: Byte[]\n  nameWithType: Byte[]\n  fullName: System.Byte[]\n  spec.csharp:\n  - uid: System.Byte\n    name: Byte\n    nameWithType: Byte\n    fullName: System.Byte\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Workflow.ComponentModel.Activity\n  parent: System.Workflow.ComponentModel\n  isExternal: false\n  name: Activity\n  nameWithType: Activity\n  fullName: System.Workflow.ComponentModel.Activity\n- uid: System.Workflow.Runtime.Hosting.WorkflowPersistenceService.GetIsBlocked(System.Workflow.ComponentModel.Activity)\n  parent: System.Workflow.Runtime.Hosting.WorkflowPersistenceService\n  isExternal: false\n  name: GetIsBlocked(Activity)\n  nameWithType: WorkflowPersistenceService.GetIsBlocked(Activity)\n  fullName: WorkflowPersistenceService.GetIsBlocked(Activity)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Workflow.Runtime.Hosting.WorkflowPersistenceService.GetSuspendOrTerminateInfo(System.Workflow.ComponentModel.Activity)\n  parent: System.Workflow.Runtime.Hosting.WorkflowPersistenceService\n  isExternal: false\n  name: GetSuspendOrTerminateInfo(Activity)\n  nameWithType: WorkflowPersistenceService.GetSuspendOrTerminateInfo(Activity)\n  fullName: WorkflowPersistenceService.GetSuspendOrTerminateInfo(Activity)\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Workflow.Runtime.Hosting.WorkflowPersistenceService.GetWorkflowStatus(System.Workflow.ComponentModel.Activity)\n  parent: System.Workflow.Runtime.Hosting.WorkflowPersistenceService\n  isExternal: false\n  name: GetWorkflowStatus(Activity)\n  nameWithType: WorkflowPersistenceService.GetWorkflowStatus(Activity)\n  fullName: WorkflowPersistenceService.GetWorkflowStatus(Activity)\n- uid: System.Workflow.Runtime.WorkflowStatus\n  parent: System.Workflow.Runtime\n  isExternal: false\n  name: WorkflowStatus\n  nameWithType: WorkflowStatus\n  fullName: System.Workflow.Runtime.WorkflowStatus\n- uid: System.Workflow.Runtime.Hosting.WorkflowPersistenceService.LoadCompletedContextActivity(System.Guid,System.Workflow.ComponentModel.Activity)\n  parent: System.Workflow.Runtime.Hosting.WorkflowPersistenceService\n  isExternal: false\n  name: LoadCompletedContextActivity(Guid, Activity)\n  nameWithType: WorkflowPersistenceService.LoadCompletedContextActivity(Guid, Activity)\n  fullName: WorkflowPersistenceService.LoadCompletedContextActivity(Guid, Activity)\n- uid: System.Guid\n  parent: System\n  isExternal: false\n  name: Guid\n  nameWithType: Guid\n  fullName: System.Guid\n- uid: System.Workflow.Runtime.Hosting.WorkflowPersistenceService.LoadWorkflowInstanceState(System.Guid)\n  parent: System.Workflow.Runtime.Hosting.WorkflowPersistenceService\n  isExternal: false\n  name: LoadWorkflowInstanceState(Guid)\n  nameWithType: WorkflowPersistenceService.LoadWorkflowInstanceState(Guid)\n  fullName: WorkflowPersistenceService.LoadWorkflowInstanceState(Guid)\n- uid: System.Workflow.Runtime.Hosting.WorkflowPersistenceService.RestoreFromDefaultSerializedForm(System.Byte[],System.Workflow.ComponentModel.Activity)\n  parent: System.Workflow.Runtime.Hosting.WorkflowPersistenceService\n  isExternal: false\n  name: RestoreFromDefaultSerializedForm(Byte[], Activity)\n  nameWithType: WorkflowPersistenceService.RestoreFromDefaultSerializedForm(Byte[], Activity)\n  fullName: WorkflowPersistenceService.RestoreFromDefaultSerializedForm(Byte[], Activity)\n- uid: System.Workflow.Runtime.Hosting.WorkflowPersistenceService.SaveCompletedContextActivity(System.Workflow.ComponentModel.Activity)\n  parent: System.Workflow.Runtime.Hosting.WorkflowPersistenceService\n  isExternal: false\n  name: SaveCompletedContextActivity(Activity)\n  nameWithType: WorkflowPersistenceService.SaveCompletedContextActivity(Activity)\n  fullName: WorkflowPersistenceService.SaveCompletedContextActivity(Activity)\n- uid: System.Workflow.Runtime.Hosting.WorkflowPersistenceService.SaveWorkflowInstanceState(System.Workflow.ComponentModel.Activity,System.Boolean)\n  parent: System.Workflow.Runtime.Hosting.WorkflowPersistenceService\n  isExternal: false\n  name: SaveWorkflowInstanceState(Activity, Boolean)\n  nameWithType: WorkflowPersistenceService.SaveWorkflowInstanceState(Activity, Boolean)\n  fullName: WorkflowPersistenceService.SaveWorkflowInstanceState(Activity, Boolean)\n- uid: System.Workflow.Runtime.Hosting.WorkflowPersistenceService.UnloadOnIdle(System.Workflow.ComponentModel.Activity)\n  parent: System.Workflow.Runtime.Hosting.WorkflowPersistenceService\n  isExternal: false\n  name: UnloadOnIdle(Activity)\n  nameWithType: WorkflowPersistenceService.UnloadOnIdle(Activity)\n  fullName: WorkflowPersistenceService.UnloadOnIdle(Activity)\n- uid: System.Workflow.Runtime.Hosting.WorkflowPersistenceService.UnlockWorkflowInstanceState(System.Workflow.ComponentModel.Activity)\n  parent: System.Workflow.Runtime.Hosting.WorkflowPersistenceService\n  isExternal: false\n  name: UnlockWorkflowInstanceState(Activity)\n  nameWithType: WorkflowPersistenceService.UnlockWorkflowInstanceState(Activity)\n  fullName: WorkflowPersistenceService.UnlockWorkflowInstanceState(Activity)\n- uid: System.Workflow.Runtime.Hosting.WorkflowPersistenceService.#ctor*\n  parent: System.Workflow.Runtime.Hosting.WorkflowPersistenceService\n  isExternal: false\n  name: WorkflowPersistenceService\n  nameWithType: WorkflowPersistenceService.WorkflowPersistenceService\n  fullName: WorkflowPersistenceService.WorkflowPersistenceService\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Workflow.Runtime.Hosting/WorkflowPersistenceService.xml\n- uid: System.Workflow.Runtime.Hosting.WorkflowPersistenceService.GetDefaultSerializedForm*\n  parent: System.Workflow.Runtime.Hosting.WorkflowPersistenceService\n  isExternal: false\n  name: GetDefaultSerializedForm\n  nameWithType: WorkflowPersistenceService.GetDefaultSerializedForm\n  fullName: WorkflowPersistenceService.GetDefaultSerializedForm\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Workflow.Runtime.Hosting/WorkflowPersistenceService.xml\n- uid: System.Workflow.Runtime.Hosting.WorkflowPersistenceService.GetIsBlocked*\n  parent: System.Workflow.Runtime.Hosting.WorkflowPersistenceService\n  isExternal: false\n  name: GetIsBlocked\n  nameWithType: WorkflowPersistenceService.GetIsBlocked\n  fullName: WorkflowPersistenceService.GetIsBlocked\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Workflow.Runtime.Hosting/WorkflowPersistenceService.xml\n- uid: System.Workflow.Runtime.Hosting.WorkflowPersistenceService.GetSuspendOrTerminateInfo*\n  parent: System.Workflow.Runtime.Hosting.WorkflowPersistenceService\n  isExternal: false\n  name: GetSuspendOrTerminateInfo\n  nameWithType: WorkflowPersistenceService.GetSuspendOrTerminateInfo\n  fullName: WorkflowPersistenceService.GetSuspendOrTerminateInfo\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Workflow.Runtime.Hosting/WorkflowPersistenceService.xml\n- uid: System.Workflow.Runtime.Hosting.WorkflowPersistenceService.GetWorkflowStatus*\n  parent: System.Workflow.Runtime.Hosting.WorkflowPersistenceService\n  isExternal: false\n  name: GetWorkflowStatus\n  nameWithType: WorkflowPersistenceService.GetWorkflowStatus\n  fullName: WorkflowPersistenceService.GetWorkflowStatus\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Workflow.Runtime.Hosting/WorkflowPersistenceService.xml\n- uid: System.Workflow.Runtime.Hosting.WorkflowPersistenceService.LoadCompletedContextActivity*\n  parent: System.Workflow.Runtime.Hosting.WorkflowPersistenceService\n  isExternal: false\n  name: LoadCompletedContextActivity\n  nameWithType: WorkflowPersistenceService.LoadCompletedContextActivity\n  fullName: WorkflowPersistenceService.LoadCompletedContextActivity\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Workflow.Runtime.Hosting/WorkflowPersistenceService.xml\n- uid: System.Workflow.Runtime.Hosting.WorkflowPersistenceService.LoadWorkflowInstanceState*\n  parent: System.Workflow.Runtime.Hosting.WorkflowPersistenceService\n  isExternal: false\n  name: LoadWorkflowInstanceState\n  nameWithType: WorkflowPersistenceService.LoadWorkflowInstanceState\n  fullName: WorkflowPersistenceService.LoadWorkflowInstanceState\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Workflow.Runtime.Hosting/WorkflowPersistenceService.xml\n- uid: System.Workflow.Runtime.Hosting.WorkflowPersistenceService.RestoreFromDefaultSerializedForm*\n  parent: System.Workflow.Runtime.Hosting.WorkflowPersistenceService\n  isExternal: false\n  name: RestoreFromDefaultSerializedForm\n  nameWithType: WorkflowPersistenceService.RestoreFromDefaultSerializedForm\n  fullName: WorkflowPersistenceService.RestoreFromDefaultSerializedForm\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Workflow.Runtime.Hosting/WorkflowPersistenceService.xml\n- uid: System.Workflow.Runtime.Hosting.WorkflowPersistenceService.SaveCompletedContextActivity*\n  parent: System.Workflow.Runtime.Hosting.WorkflowPersistenceService\n  isExternal: false\n  name: SaveCompletedContextActivity\n  nameWithType: WorkflowPersistenceService.SaveCompletedContextActivity\n  fullName: WorkflowPersistenceService.SaveCompletedContextActivity\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Workflow.Runtime.Hosting/WorkflowPersistenceService.xml\n- uid: System.Workflow.Runtime.Hosting.WorkflowPersistenceService.SaveWorkflowInstanceState*\n  parent: System.Workflow.Runtime.Hosting.WorkflowPersistenceService\n  isExternal: false\n  name: SaveWorkflowInstanceState\n  nameWithType: WorkflowPersistenceService.SaveWorkflowInstanceState\n  fullName: WorkflowPersistenceService.SaveWorkflowInstanceState\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Workflow.Runtime.Hosting/WorkflowPersistenceService.xml\n- uid: System.Workflow.Runtime.Hosting.WorkflowPersistenceService.UnloadOnIdle*\n  parent: System.Workflow.Runtime.Hosting.WorkflowPersistenceService\n  isExternal: false\n  name: UnloadOnIdle\n  nameWithType: WorkflowPersistenceService.UnloadOnIdle\n  fullName: WorkflowPersistenceService.UnloadOnIdle\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Workflow.Runtime.Hosting/WorkflowPersistenceService.xml\n- uid: System.Workflow.Runtime.Hosting.WorkflowPersistenceService.UnlockWorkflowInstanceState*\n  parent: System.Workflow.Runtime.Hosting.WorkflowPersistenceService\n  isExternal: false\n  name: UnlockWorkflowInstanceState\n  nameWithType: WorkflowPersistenceService.UnlockWorkflowInstanceState\n  fullName: WorkflowPersistenceService.UnlockWorkflowInstanceState\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Workflow.Runtime.Hosting/WorkflowPersistenceService.xml\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: Object.Equals(Object)\n  fullName: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: Object.GetHashCode()\n  fullName: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: false\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: false\n  name: ToString()\n  nameWithType: Object.ToString()\n  fullName: Object.ToString()\n- uid: System.Workflow.Runtime.Hosting.WorkflowRuntimeService.OnStarted\n  parent: System.Workflow.Runtime.Hosting.WorkflowRuntimeService\n  isExternal: false\n  name: OnStarted()\n  nameWithType: WorkflowRuntimeService.OnStarted()\n  fullName: WorkflowRuntimeService.OnStarted()\n- uid: System.Workflow.Runtime.Hosting.WorkflowRuntimeService.OnStopped\n  parent: System.Workflow.Runtime.Hosting.WorkflowRuntimeService\n  isExternal: false\n  name: OnStopped()\n  nameWithType: WorkflowRuntimeService.OnStopped()\n  fullName: WorkflowRuntimeService.OnStopped()\n- uid: System.Workflow.Runtime.Hosting.WorkflowRuntimeService.RaiseServicesExceptionNotHandledEvent(System.Exception,System.Guid)\n  parent: System.Workflow.Runtime.Hosting.WorkflowRuntimeService\n  isExternal: false\n  name: RaiseServicesExceptionNotHandledEvent(Exception, Guid)\n  nameWithType: WorkflowRuntimeService.RaiseServicesExceptionNotHandledEvent(Exception, Guid)\n  fullName: WorkflowRuntimeService.RaiseServicesExceptionNotHandledEvent(Exception, Guid)\n- uid: System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Runtime\n  parent: System.Workflow.Runtime.Hosting.WorkflowRuntimeService\n  isExternal: false\n  name: Runtime\n  nameWithType: WorkflowRuntimeService.Runtime\n  fullName: WorkflowRuntimeService.Runtime\n- uid: System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Start\n  parent: System.Workflow.Runtime.Hosting.WorkflowRuntimeService\n  isExternal: false\n  name: Start()\n  nameWithType: WorkflowRuntimeService.Start()\n  fullName: WorkflowRuntimeService.Start()\n- uid: System.Workflow.Runtime.Hosting.WorkflowRuntimeService.State\n  parent: System.Workflow.Runtime.Hosting.WorkflowRuntimeService\n  isExternal: false\n  name: State\n  nameWithType: WorkflowRuntimeService.State\n  fullName: WorkflowRuntimeService.State\n- uid: System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Stop\n  parent: System.Workflow.Runtime.Hosting.WorkflowRuntimeService\n  isExternal: false\n  name: Stop()\n  nameWithType: WorkflowRuntimeService.Stop()\n  fullName: WorkflowRuntimeService.Stop()\n"}