{"nodes":[{"content":"Generates Microsoft intermediate language (MSIL) instructions.","nodes":[{"pos":[0,62],"content":"Generates Microsoft intermediate language (MSIL) instructions.","nodes":[{"content":"Generates Microsoft intermediate language (MSIL) instructions.","pos":[0,62]}]}],"pos":[4394,4457],"yaml":true},{"content":"<xref:System.Reflection.Emit.ILGenerator> is used to generate method bodies for methods and constructors in dynamic assemblies (represented by the <xref:System.Reflection.Emit.MethodBuilder> and <xref:System.Reflection.Emit.ConstructorBuilder> classes) and for standalone dynamic methods (represented by the <xref:System.Reflection.Emit.DynamicMethod> class). To obtain an <xref:System.Reflection.Emit.ILGenerator>, use the <xref:System.Reflection.Emit.ConstructorBuilder.GetILGenerator%2A?displayProperty=fullName>, <xref:System.Reflection.Emit.DynamicMethod.GetILGenerator%2A?displayProperty=fullName>, and <xref:System.Reflection.Emit.MethodBuilder.GetILGenerator%2A?displayProperty=fullName> methods.  \n  \n MSIL is used as input to a just-in-time (JIT) compiler.","nodes":[{"pos":[0,704],"content":"<xref:System.Reflection.Emit.ILGenerator> is used to generate method bodies for methods and constructors in dynamic assemblies (represented by the <xref:System.Reflection.Emit.MethodBuilder> and <xref:System.Reflection.Emit.ConstructorBuilder> classes) and for standalone dynamic methods (represented by the <xref:System.Reflection.Emit.DynamicMethod> class). To obtain an <xref:System.Reflection.Emit.ILGenerator>, use the <xref:System.Reflection.Emit.ConstructorBuilder.GetILGenerator%2A?displayProperty=fullName>, <xref:System.Reflection.Emit.DynamicMethod.GetILGenerator%2A?displayProperty=fullName>, and <xref:System.Reflection.Emit.MethodBuilder.GetILGenerator%2A?displayProperty=fullName> methods.","nodes":[{"content":"<xref:System.Reflection.Emit.ILGenerator> is used to generate method bodies for methods and constructors in dynamic assemblies (represented by the <xref:System.Reflection.Emit.MethodBuilder> and <xref:System.Reflection.Emit.ConstructorBuilder> classes) and for standalone dynamic methods (represented by the <xref:System.Reflection.Emit.DynamicMethod> class). To obtain an <xref:System.Reflection.Emit.ILGenerator>, use the <xref:System.Reflection.Emit.ConstructorBuilder.GetILGenerator%2A?displayProperty=fullName>, <xref:System.Reflection.Emit.DynamicMethod.GetILGenerator%2A?displayProperty=fullName>, and <xref:System.Reflection.Emit.MethodBuilder.GetILGenerator%2A?displayProperty=fullName> methods.","pos":[0,704],"nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Reflection.Emit.ILGenerator&gt;</ph> is used to generate method bodies for methods and constructors in dynamic assemblies (represented by the <ph id=\"ph2\">&lt;xref:System.Reflection.Emit.MethodBuilder&gt;</ph> and <ph id=\"ph3\">&lt;xref:System.Reflection.Emit.ConstructorBuilder&gt;</ph> classes) and for standalone dynamic methods (represented by the <ph id=\"ph4\">&lt;xref:System.Reflection.Emit.DynamicMethod&gt;</ph> class).","pos":[0,359],"source":"<xref:System.Reflection.Emit.ILGenerator> is used to generate method bodies for methods and constructors in dynamic assemblies (represented by the <xref:System.Reflection.Emit.MethodBuilder> and <xref:System.Reflection.Emit.ConstructorBuilder> classes) and for standalone dynamic methods (represented by the <xref:System.Reflection.Emit.DynamicMethod> class)."},{"content":"To obtain an <ph id=\"ph1\">&lt;xref:System.Reflection.Emit.ILGenerator&gt;</ph>, use the <ph id=\"ph2\">&lt;xref:System.Reflection.Emit.ConstructorBuilder.GetILGenerator%2A?displayProperty=fullName&gt;</ph>, <ph id=\"ph3\">&lt;xref:System.Reflection.Emit.DynamicMethod.GetILGenerator%2A?displayProperty=fullName&gt;</ph>, and <ph id=\"ph4\">&lt;xref:System.Reflection.Emit.MethodBuilder.GetILGenerator%2A?displayProperty=fullName&gt;</ph> methods.","pos":[360,704],"source":" To obtain an <xref:System.Reflection.Emit.ILGenerator>, use the <xref:System.Reflection.Emit.ConstructorBuilder.GetILGenerator%2A?displayProperty=fullName>, <xref:System.Reflection.Emit.DynamicMethod.GetILGenerator%2A?displayProperty=fullName>, and <xref:System.Reflection.Emit.MethodBuilder.GetILGenerator%2A?displayProperty=fullName> methods."}]}]},{"pos":[711,766],"content":"MSIL is used as input to a just-in-time (JIT) compiler.","nodes":[{"content":"MSIL is used as input to a just-in-time (JIT) compiler.","pos":[0,55]}]}],"pos":[4468,5239],"yaml":true,"extradata":"MT"},{"content":"Begins a catch block.","nodes":[{"pos":[0,21],"content":"Begins a catch block.","nodes":[{"content":"Begins a catch block.","pos":[0,21]}]}],"pos":[7299,7321],"yaml":true},{"content":"Emits a branch instruction to the end of the current exception block.  \n  \n> [!NOTE]\n>  If the filter exception block returns the `constant exception_execute_handler` (see the documentation for the Common Language Infrastructure Instruction Set), the argument to the `BeginCatchBlock` is not checked.","nodes":[{"pos":[0,69],"content":"Emits a branch instruction to the end of the current exception block.","nodes":[{"content":"Emits a branch instruction to the end of the current exception block.","pos":[0,69]}]},{"pos":[77,300],"content":"[!NOTE]\n If the filter exception block returns the `constant exception_execute_handler` (see the documentation for the Common Language Infrastructure Instruction Set), the argument to the `BeginCatchBlock` is not checked.","leadings":["","> "],"nodes":[{"content":"If the filter exception block returns the <ph id=\"ph1\">`constant exception_execute_handler`</ph> (see the documentation for the Common Language Infrastructure Instruction Set), the argument to the <ph id=\"ph2\">`BeginCatchBlock`</ph> is not checked.","pos":[9,221],"source":" If the filter exception block returns the `constant exception_execute_handler` (see the documentation for the Common Language Infrastructure Instruction Set), the argument to the `BeginCatchBlock` is not checked."}]}],"pos":[7332,7638],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Type\"></xref> object that represents the exception.","nodes":[{"pos":[0,74],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Type\"&gt;&lt;/xref&gt;</ph> object that represents the exception.","source":"The <xref href=\"System.Type\"></xref> object that represents the exception."}],"pos":[8514,8589],"yaml":true},{"content":"The catch block is within a filtered exception.","nodes":[{"pos":[0,47],"content":"The catch block is within a filtered exception.","nodes":[{"content":"The catch block is within a filtered exception.","pos":[0,47]}]}],"pos":[8761,8809],"yaml":true},{"content":"<code>exceptionType</code> is `null`, and the exception filter block has not returned a value that indicates that finally blocks should be run until this catch block is located.","nodes":[{"pos":[0,177],"content":"<ph id=\"ph1\">&lt;code&gt;exceptionType&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>, and the exception filter block has not returned a value that indicates that finally blocks should be run until this catch block is located.","source":"<code>exceptionType</code> is `null`, and the exception filter block has not returned a value that indicates that finally blocks should be run until this catch block is located."}],"pos":[8911,9089],"yaml":true},{"content":"The Microsoft intermediate language (MSIL) being generated is not currently in an exception block.","nodes":[{"pos":[0,98],"content":"The Microsoft intermediate language (MSIL) being generated is not currently in an exception block.","nodes":[{"content":"The Microsoft intermediate language (MSIL) being generated is not currently in an exception block.","pos":[0,98]}]}],"pos":[9191,9290],"yaml":true},{"content":"Begins an exception block for a filtered exception.","nodes":[{"pos":[0,51],"content":"Begins an exception block for a filtered exception.","nodes":[{"content":"Begins an exception block for a filtered exception.","pos":[0,51]}]}],"pos":[10541,10593],"yaml":true},{"content":"Emits a branch instruction to the end of the current exception block.  \n  \n If the current <xref:System.Reflection.Emit.ILGenerator> is associated with a <xref:System.Reflection.Emit.DynamicMethod> object, emitting filtered exception blocks is not supported. <xref:System.Reflection.Emit.DynamicILInfo> can be used to construct a dynamic method that uses filtered exception blocks.","nodes":[{"pos":[0,69],"content":"Emits a branch instruction to the end of the current exception block.","nodes":[{"content":"Emits a branch instruction to the end of the current exception block.","pos":[0,69]}]},{"pos":[76,381],"content":"If the current <xref:System.Reflection.Emit.ILGenerator> is associated with a <xref:System.Reflection.Emit.DynamicMethod> object, emitting filtered exception blocks is not supported. <xref:System.Reflection.Emit.DynamicILInfo> can be used to construct a dynamic method that uses filtered exception blocks.","nodes":[{"content":"If the current <xref:System.Reflection.Emit.ILGenerator> is associated with a <xref:System.Reflection.Emit.DynamicMethod> object, emitting filtered exception blocks is not supported. <xref:System.Reflection.Emit.DynamicILInfo> can be used to construct a dynamic method that uses filtered exception blocks.","pos":[0,305],"nodes":[{"content":"If the current <ph id=\"ph1\">&lt;xref:System.Reflection.Emit.ILGenerator&gt;</ph> is associated with a <ph id=\"ph2\">&lt;xref:System.Reflection.Emit.DynamicMethod&gt;</ph> object, emitting filtered exception blocks is not supported.","pos":[0,182],"source":"If the current <xref:System.Reflection.Emit.ILGenerator> is associated with a <xref:System.Reflection.Emit.DynamicMethod> object, emitting filtered exception blocks is not supported."},{"content":"<ph id=\"ph1\">&lt;xref:System.Reflection.Emit.DynamicILInfo&gt;</ph> can be used to construct a dynamic method that uses filtered exception blocks.","pos":[183,305],"source":" <xref:System.Reflection.Emit.DynamicILInfo> can be used to construct a dynamic method that uses filtered exception blocks."}]}]}],"pos":[10604,10990],"yaml":true,"extradata":"MT"},{"content":"The Microsoft intermediate language (MSIL) being generated is not currently in an exception block.  \n  \n -or-  \n  \n This <xref href=\"System.Reflection.Emit.ILGenerator\"></xref> belongs to a <xref href=\"System.Reflection.Emit.DynamicMethod\"></xref>.","nodes":[{"pos":[0,98],"content":"The Microsoft intermediate language (MSIL) being generated is not currently in an exception block.","nodes":[{"content":"The Microsoft intermediate language (MSIL) being generated is not currently in an exception block.","pos":[0,98]}]},{"pos":[105,109],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[116,248],"content":"This <ph id=\"ph1\">&lt;xref href=\"System.Reflection.Emit.ILGenerator\"&gt;&lt;/xref&gt;</ph> belongs to a <ph id=\"ph2\">&lt;xref href=\"System.Reflection.Emit.DynamicMethod\"&gt;&lt;/xref&gt;</ph>.","source":"This <xref href=\"System.Reflection.Emit.ILGenerator\"></xref> belongs to a <xref href=\"System.Reflection.Emit.DynamicMethod\"></xref>."}],"pos":[11266,11525],"yaml":true},{"content":"Begins an exception block for a non-filtered exception.","nodes":[{"pos":[0,55],"content":"Begins an exception block for a non-filtered exception.","nodes":[{"content":"Begins an exception block for a non-filtered exception.","pos":[0,55]}]}],"pos":[12758,12814],"yaml":true},{"content":"Creating an exception block records some information, but does not actually emit any Microsoft intermediate language (MSIL) onto the stream.","nodes":[{"pos":[0,140],"content":"Creating an exception block records some information, but does not actually emit any Microsoft intermediate language (MSIL) onto the stream.","nodes":[{"content":"Creating an exception block records some information, but does not actually emit any Microsoft intermediate language (MSIL) onto the stream.","pos":[0,140]}]}],"pos":[12825,12966],"yaml":true,"extradata":"MT"},{"content":"The label for the end of the block. This will leave you in the correct place to execute finally blocks or to finish the try.","nodes":[{"pos":[0,124],"content":"The label for the end of the block. This will leave you in the correct place to execute finally blocks or to finish the try.","nodes":[{"content":"The label for the end of the block. This will leave you in the correct place to execute finally blocks or to finish the try.","pos":[0,124],"nodes":[{"content":"The label for the end of the block.","pos":[0,35]},{"content":"This will leave you in the correct place to execute finally blocks or to finish the try.","pos":[36,124]}]}]}],"pos":[13864,13989],"yaml":true},{"content":"Begins an exception fault block in the Microsoft intermediate language (MSIL) stream.","nodes":[{"pos":[0,85],"content":"Begins an exception fault block in the Microsoft intermediate language (MSIL) stream.","nodes":[{"content":"Begins an exception fault block in the Microsoft intermediate language (MSIL) stream.","pos":[0,85]}]}],"pos":[15283,15369],"yaml":true},{"content":"If the current <xref:System.Reflection.Emit.ILGenerator> is associated with a <xref:System.Reflection.Emit.DynamicMethod> object, emitting exception fault blocks is not supported. <xref:System.Reflection.Emit.DynamicILInfo> can be used to construct a dynamic method that uses exception fault blocks.","nodes":[{"pos":[0,299],"content":"If the current <xref:System.Reflection.Emit.ILGenerator> is associated with a <xref:System.Reflection.Emit.DynamicMethod> object, emitting exception fault blocks is not supported. <xref:System.Reflection.Emit.DynamicILInfo> can be used to construct a dynamic method that uses exception fault blocks.","nodes":[{"content":"If the current <xref:System.Reflection.Emit.ILGenerator> is associated with a <xref:System.Reflection.Emit.DynamicMethod> object, emitting exception fault blocks is not supported. <xref:System.Reflection.Emit.DynamicILInfo> can be used to construct a dynamic method that uses exception fault blocks.","pos":[0,299],"nodes":[{"content":"If the current <ph id=\"ph1\">&lt;xref:System.Reflection.Emit.ILGenerator&gt;</ph> is associated with a <ph id=\"ph2\">&lt;xref:System.Reflection.Emit.DynamicMethod&gt;</ph> object, emitting exception fault blocks is not supported.","pos":[0,179],"source":"If the current <xref:System.Reflection.Emit.ILGenerator> is associated with a <xref:System.Reflection.Emit.DynamicMethod> object, emitting exception fault blocks is not supported."},{"content":"<ph id=\"ph1\">&lt;xref:System.Reflection.Emit.DynamicILInfo&gt;</ph> can be used to construct a dynamic method that uses exception fault blocks.","pos":[180,299],"source":" <xref:System.Reflection.Emit.DynamicILInfo> can be used to construct a dynamic method that uses exception fault blocks."}]}]}],"pos":[15380,15680],"yaml":true,"extradata":"MT"},{"content":"The MSIL being generated is not currently in an exception block.  \n  \n -or-  \n  \n This <xref href=\"System.Reflection.Emit.ILGenerator\"></xref> belongs to a <xref href=\"System.Reflection.Emit.DynamicMethod\"></xref>.","nodes":[{"pos":[0,64],"content":"The MSIL being generated is not currently in an exception block.","nodes":[{"content":"The MSIL being generated is not currently in an exception block.","pos":[0,64]}]},{"pos":[71,75],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[82,214],"content":"This <ph id=\"ph1\">&lt;xref href=\"System.Reflection.Emit.ILGenerator\"&gt;&lt;/xref&gt;</ph> belongs to a <ph id=\"ph2\">&lt;xref href=\"System.Reflection.Emit.DynamicMethod\"&gt;&lt;/xref&gt;</ph>.","source":"This <xref href=\"System.Reflection.Emit.ILGenerator\"></xref> belongs to a <xref href=\"System.Reflection.Emit.DynamicMethod\"></xref>."}],"pos":[16495,16720],"yaml":true},{"content":"Begins a finally block in the Microsoft intermediate language (MSIL) instruction stream.","nodes":[{"pos":[0,88],"content":"Begins a finally block in the Microsoft intermediate language (MSIL) instruction stream.","nodes":[{"content":"Begins a finally block in the Microsoft intermediate language (MSIL) instruction stream.","pos":[0,88]}]}],"pos":[17941,18030],"yaml":true},{"content":"The MSIL being generated is not currently in an exception block.","nodes":[{"pos":[0,64],"content":"The MSIL being generated is not currently in an exception block.","nodes":[{"content":"The MSIL being generated is not currently in an exception block.","pos":[0,64]}]}],"pos":[18901,18966],"yaml":true},{"content":"Begins a lexical scope.","nodes":[{"pos":[0,23],"content":"Begins a lexical scope.","nodes":[{"content":"Begins a lexical scope.","pos":[0,23]}]}],"pos":[20145,20169],"yaml":true},{"content":"This method is used to emit symbolic information. Local variables declared after <xref:System.Reflection.Emit.ILGenerator.BeginScope%2A> are scoped until the corresponding <xref:System.Reflection.Emit.ILGenerator.EndScope%2A> is called.  \n  \n If the current <xref:System.Reflection.Emit.ILGenerator> is associated with a <xref:System.Reflection.Emit.DynamicMethod> object, it does not support symbolic information.","nodes":[{"pos":[0,236],"content":"This method is used to emit symbolic information. Local variables declared after <xref:System.Reflection.Emit.ILGenerator.BeginScope%2A> are scoped until the corresponding <xref:System.Reflection.Emit.ILGenerator.EndScope%2A> is called.","nodes":[{"content":"This method is used to emit symbolic information. Local variables declared after <xref:System.Reflection.Emit.ILGenerator.BeginScope%2A> are scoped until the corresponding <xref:System.Reflection.Emit.ILGenerator.EndScope%2A> is called.","pos":[0,236],"nodes":[{"content":"This method is used to emit symbolic information.","pos":[0,49]},{"content":"Local variables declared after <ph id=\"ph1\">&lt;xref:System.Reflection.Emit.ILGenerator.BeginScope%2A&gt;</ph> are scoped until the corresponding <ph id=\"ph2\">&lt;xref:System.Reflection.Emit.ILGenerator.EndScope%2A&gt;</ph> is called.","pos":[50,236],"source":" Local variables declared after <xref:System.Reflection.Emit.ILGenerator.BeginScope%2A> are scoped until the corresponding <xref:System.Reflection.Emit.ILGenerator.EndScope%2A> is called."}]}]},{"pos":[243,414],"content":"If the current <xref:System.Reflection.Emit.ILGenerator> is associated with a <xref:System.Reflection.Emit.DynamicMethod> object, it does not support symbolic information.","nodes":[{"content":"If the current <ph id=\"ph1\">&lt;xref:System.Reflection.Emit.ILGenerator&gt;</ph> is associated with a <ph id=\"ph2\">&lt;xref:System.Reflection.Emit.DynamicMethod&gt;</ph> object, it does not support symbolic information.","pos":[0,171],"source":"If the current <xref:System.Reflection.Emit.ILGenerator> is associated with a <xref:System.Reflection.Emit.DynamicMethod> object, it does not support symbolic information."}]}],"pos":[20180,20599],"yaml":true,"extradata":"MT"},{"content":"This <xref href=\"System.Reflection.Emit.ILGenerator\"></xref> belongs to a <xref href=\"System.Reflection.Emit.DynamicMethod\"></xref>.","nodes":[{"pos":[0,132],"content":"This <ph id=\"ph1\">&lt;xref href=\"System.Reflection.Emit.ILGenerator\"&gt;&lt;/xref&gt;</ph> belongs to a <ph id=\"ph2\">&lt;xref href=\"System.Reflection.Emit.DynamicMethod\"&gt;&lt;/xref&gt;</ph>.","source":"This <xref href=\"System.Reflection.Emit.ILGenerator\"></xref> belongs to a <xref href=\"System.Reflection.Emit.DynamicMethod\"></xref>."}],"pos":[21405,21538],"yaml":true},{"content":"Declares a local variable of the specified type.","nodes":[{"pos":[0,48],"content":"Declares a local variable of the specified type.","nodes":[{"content":"Declares a local variable of the specified type.","pos":[0,48]}]}],"pos":[22780,22829],"yaml":true},{"content":"The local variable is created in the current lexical scope; for example, if code is being emitted in a `for` loop (`For` loop in Visual Basic), the scope of the variable is the loop.  \n  \n A local variable created with this overload is not pinned. To create a pinned variable for use with unmanaged pointers, use the <xref:System.Reflection.Emit.ILGenerator.DeclareLocal%28System.Type%2CSystem.Boolean%29> method overload.","nodes":[{"pos":[0,182],"content":"The local variable is created in the current lexical scope; for example, if code is being emitted in a <ph id=\"ph1\">`for`</ph> loop (<ph id=\"ph2\">`For`</ph> loop in Visual Basic), the scope of the variable is the loop.","source":"The local variable is created in the current lexical scope; for example, if code is being emitted in a `for` loop (`For` loop in Visual Basic), the scope of the variable is the loop."},{"pos":[189,422],"content":"A local variable created with this overload is not pinned. To create a pinned variable for use with unmanaged pointers, use the <xref:System.Reflection.Emit.ILGenerator.DeclareLocal%28System.Type%2CSystem.Boolean%29> method overload.","nodes":[{"content":"A local variable created with this overload is not pinned. To create a pinned variable for use with unmanaged pointers, use the <xref:System.Reflection.Emit.ILGenerator.DeclareLocal%28System.Type%2CSystem.Boolean%29> method overload.","pos":[0,233],"nodes":[{"content":"A local variable created with this overload is not pinned.","pos":[0,58]},{"content":"To create a pinned variable for use with unmanaged pointers, use the <ph id=\"ph1\">&lt;xref:System.Reflection.Emit.ILGenerator.DeclareLocal%28System.Type%2CSystem.Boolean%29&gt;</ph> method overload.","pos":[59,233],"source":" To create a pinned variable for use with unmanaged pointers, use the <xref:System.Reflection.Emit.ILGenerator.DeclareLocal%28System.Type%2CSystem.Boolean%29> method overload."}]}]}],"pos":[22840,23267],"yaml":true,"extradata":"MT"},{"content":"A <xref href=\"System.Type\"></xref> object that represents the type of the local variable.","nodes":[{"pos":[0,89],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Type\"&gt;&lt;/xref&gt;</ph> object that represents the type of the local variable.","source":"A <xref href=\"System.Type\"></xref> object that represents the type of the local variable."}],"pos":[24145,24235],"yaml":true},{"content":"The declared local variable.","nodes":[{"pos":[0,28],"content":"The declared local variable.","nodes":[{"content":"The declared local variable.","pos":[0,28]}]}],"pos":[24314,24343],"yaml":true},{"content":"<code>localType</code> is `null`.","nodes":[{"pos":[0,33],"content":"<ph id=\"ph1\">&lt;code&gt;localType&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>localType</code> is `null`."}],"pos":[24520,24554],"yaml":true},{"content":"The containing type has been created by the <xref href=\"System.Reflection.Emit.TypeBuilder.CreateType\"></xref> method.","nodes":[{"pos":[0,118],"content":"The containing type has been created by the <ph id=\"ph1\">&lt;xref href=\"System.Reflection.Emit.TypeBuilder.CreateType\"&gt;&lt;/xref&gt;</ph> method.","source":"The containing type has been created by the <xref href=\"System.Reflection.Emit.TypeBuilder.CreateType\"></xref> method."}],"pos":[24664,24783],"yaml":true},{"content":"Declares a local variable of the specified type, optionally pinning the object referred to by the variable.","nodes":[{"pos":[0,107],"content":"Declares a local variable of the specified type, optionally pinning the object referred to by the variable.","nodes":[{"content":"Declares a local variable of the specified type, optionally pinning the object referred to by the variable.","pos":[0,107]}]}],"pos":[26097,26205],"yaml":true},{"content":"The local variable is created in the current lexical scope; for example, if code is being emitted in a `for` loop (`For` loop in Visual Basic), the scope of the variable is the loop.  \n  \n In unsafe code, an object must be pinned before it can be referred to by an unmanaged pointer. While the referenced object is pinned, it cannot be moved by garbage collection.","nodes":[{"pos":[0,182],"content":"The local variable is created in the current lexical scope; for example, if code is being emitted in a <ph id=\"ph1\">`for`</ph> loop (<ph id=\"ph2\">`For`</ph> loop in Visual Basic), the scope of the variable is the loop.","source":"The local variable is created in the current lexical scope; for example, if code is being emitted in a `for` loop (`For` loop in Visual Basic), the scope of the variable is the loop."},{"pos":[189,364],"content":"In unsafe code, an object must be pinned before it can be referred to by an unmanaged pointer. While the referenced object is pinned, it cannot be moved by garbage collection.","nodes":[{"content":"In unsafe code, an object must be pinned before it can be referred to by an unmanaged pointer. While the referenced object is pinned, it cannot be moved by garbage collection.","pos":[0,175],"nodes":[{"content":"In unsafe code, an object must be pinned before it can be referred to by an unmanaged pointer.","pos":[0,94]},{"content":"While the referenced object is pinned, it cannot be moved by garbage collection.","pos":[95,175]}]}]}],"pos":[26216,26585],"yaml":true,"extradata":"MT"},{"content":"A <xref href=\"System.Type\"></xref> object that represents the type of the local variable.","nodes":[{"pos":[0,89],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Type\"&gt;&lt;/xref&gt;</ph> object that represents the type of the local variable.","source":"A <xref href=\"System.Type\"></xref> object that represents the type of the local variable."}],"pos":[26782,26872],"yaml":true},{"content":"`true` to pin the object in memory; otherwise, `false`.","nodes":[{"pos":[0,55],"content":"<ph id=\"ph1\">`true`</ph> to pin the object in memory; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` to pin the object in memory; otherwise, `false`."}],"pos":[26935,26993],"yaml":true},{"content":"A <xref href=\"System.Reflection.Emit.LocalBuilder\"></xref> object that represents the local variable.","nodes":[{"pos":[0,101],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Reflection.Emit.LocalBuilder\"&gt;&lt;/xref&gt;</ph> object that represents the local variable.","source":"A <xref href=\"System.Reflection.Emit.LocalBuilder\"></xref> object that represents the local variable."}],"pos":[27072,27174],"yaml":true},{"content":"<code>localType</code> is `null`.","nodes":[{"pos":[0,33],"content":"<ph id=\"ph1\">&lt;code&gt;localType&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>localType</code> is `null`."}],"pos":[27351,27385],"yaml":true},{"content":"The containing type has been created by the <xref href=\"System.Reflection.Emit.TypeBuilder.CreateType\"></xref> method.  \n  \n -or-  \n  \n The method body of the enclosing method has been created by the <xref href=\"System.Reflection.Emit.MethodBuilder.CreateMethodBody(System.Byte[],System.Int32)\"></xref> method.","nodes":[{"pos":[0,118],"content":"The containing type has been created by the <ph id=\"ph1\">&lt;xref href=\"System.Reflection.Emit.TypeBuilder.CreateType\"&gt;&lt;/xref&gt;</ph> method.","source":"The containing type has been created by the <xref href=\"System.Reflection.Emit.TypeBuilder.CreateType\"></xref> method."},{"pos":[125,129],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[136,310],"content":"The method body of the enclosing method has been created by the <ph id=\"ph1\">&lt;xref href=\"System.Reflection.Emit.MethodBuilder.CreateMethodBody(System.Byte[],System.Int32)\"&gt;&lt;/xref&gt;</ph> method.","source":"The method body of the enclosing method has been created by the <xref href=\"System.Reflection.Emit.MethodBuilder.CreateMethodBody(System.Byte[],System.Int32)\"></xref> method."}],"pos":[27495,27816],"yaml":true},{"content":"The method with which this <xref href=\"System.Reflection.Emit.ILGenerator\"></xref> is associated is not represented by a <xref href=\"System.Reflection.Emit.MethodBuilder\"></xref>.","nodes":[{"pos":[0,179],"content":"The method with which this <ph id=\"ph1\">&lt;xref href=\"System.Reflection.Emit.ILGenerator\"&gt;&lt;/xref&gt;</ph> is associated is not represented by a <ph id=\"ph2\">&lt;xref href=\"System.Reflection.Emit.MethodBuilder\"&gt;&lt;/xref&gt;</ph>.","source":"The method with which this <xref href=\"System.Reflection.Emit.ILGenerator\"></xref> is associated is not represented by a <xref href=\"System.Reflection.Emit.MethodBuilder\"></xref>."}],"pos":[27918,28098],"yaml":true},{"content":"Declares a new label.","nodes":[{"pos":[0,21],"content":"Declares a new label.","nodes":[{"content":"Declares a new label.","pos":[0,21]}]}],"pos":[29283,29305],"yaml":true},{"content":"To set the position of the label within the stream, you must call <xref:System.Reflection.Emit.ILGenerator.MarkLabel%2A>.  \n  \n This is just a token and does not yet represent any particular location within the stream.","nodes":[{"pos":[0,121],"content":"To set the position of the label within the stream, you must call <xref:System.Reflection.Emit.ILGenerator.MarkLabel%2A>.","nodes":[{"content":"To set the position of the label within the stream, you must call <ph id=\"ph1\">&lt;xref:System.Reflection.Emit.ILGenerator.MarkLabel%2A&gt;</ph>.","pos":[0,121],"source":"To set the position of the label within the stream, you must call <xref:System.Reflection.Emit.ILGenerator.MarkLabel%2A>."}]},{"pos":[128,218],"content":"This is just a token and does not yet represent any particular location within the stream.","nodes":[{"content":"This is just a token and does not yet represent any particular location within the stream.","pos":[0,90]}]}],"pos":[29316,29539],"yaml":true,"extradata":"MT"},{"content":"Returns a new label that can be used as a token for branching.","nodes":[{"pos":[0,62],"content":"Returns a new label that can be used as a token for branching.","nodes":[{"content":"Returns a new label that can be used as a token for branching.","pos":[0,62]}]}],"pos":[30295,30358],"yaml":true},{"content":"Puts the specified instruction onto the Microsoft intermediate language (MSIL) stream followed by the metadata token for the given type.","nodes":[{"pos":[0,136],"content":"Puts the specified instruction onto the Microsoft intermediate language (MSIL) stream followed by the metadata token for the given type.","nodes":[{"content":"Puts the specified instruction onto the Microsoft intermediate language (MSIL) stream followed by the metadata token for the given type.","pos":[0,136]}]}],"pos":[31743,31880],"yaml":true},{"content":"The instruction values are defined in the `OpCodes` enumeration. The location of `cls` is recorded so that the token can be patched if necessary when persisting the module to a portable executable (PE) file.","nodes":[{"pos":[0,207],"content":"The instruction values are defined in the `OpCodes` enumeration. The location of `cls` is recorded so that the token can be patched if necessary when persisting the module to a portable executable (PE) file.","nodes":[{"content":"The instruction values are defined in the <ph id=\"ph1\">`OpCodes`</ph> enumeration.","pos":[0,64],"source":"The instruction values are defined in the `OpCodes` enumeration."},{"content":"The location of <ph id=\"ph1\">`cls`</ph> is recorded so that the token can be patched if necessary when persisting the module to a portable executable (PE) file.","pos":[65,207],"source":" The location of `cls` is recorded so that the token can be patched if necessary when persisting the module to a portable executable (PE) file."}]}],"pos":[31891,32099],"yaml":true,"extradata":"MT"},{"content":"The MSIL instruction to be put onto the stream.","nodes":[{"pos":[0,47],"content":"The MSIL instruction to be put onto the stream.","nodes":[{"content":"The MSIL instruction to be put onto the stream.","pos":[0,47]}]}],"pos":[32291,32339],"yaml":true},{"content":"A `Type`.","nodes":[{"pos":[0,9],"content":"A <ph id=\"ph1\">`Type`</ph>.","source":"A `Type`."}],"pos":[32396,32406],"yaml":true},{"content":"<code>cls</code> is `null`.","nodes":[{"pos":[0,27],"content":"<ph id=\"ph1\">&lt;code&gt;cls&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>cls</code> is `null`."}],"pos":[32575,32603],"yaml":true},{"content":"Puts the specified instruction onto the Microsoft intermediate language (MSIL) stream followed by the metadata token for the given string.","nodes":[{"pos":[0,138],"content":"Puts the specified instruction onto the Microsoft intermediate language (MSIL) stream followed by the metadata token for the given string.","nodes":[{"content":"Puts the specified instruction onto the Microsoft intermediate language (MSIL) stream followed by the metadata token for the given string.","pos":[0,138]}]}],"pos":[33923,34062],"yaml":true},{"content":"The instruction values are defined in the `OpCodes` enumeration. The location of `str` is recorded for future fixups if the module is persisted to a portable executable (PE) file.","nodes":[{"pos":[0,179],"content":"The instruction values are defined in the `OpCodes` enumeration. The location of `str` is recorded for future fixups if the module is persisted to a portable executable (PE) file.","nodes":[{"content":"The instruction values are defined in the <ph id=\"ph1\">`OpCodes`</ph> enumeration.","pos":[0,64],"source":"The instruction values are defined in the `OpCodes` enumeration."},{"content":"The location of <ph id=\"ph1\">`str`</ph> is recorded for future fixups if the module is persisted to a portable executable (PE) file.","pos":[65,179],"source":" The location of `str` is recorded for future fixups if the module is persisted to a portable executable (PE) file."}]}],"pos":[34073,34253],"yaml":true,"extradata":"MT"},{"content":"The MSIL instruction to be emitted onto the stream.","nodes":[{"pos":[0,51],"content":"The MSIL instruction to be emitted onto the stream.","nodes":[{"content":"The MSIL instruction to be emitted onto the stream.","pos":[0,51]}]}],"pos":[34447,34499],"yaml":true},{"content":"The `String` to be emitted.","nodes":[{"pos":[0,27],"content":"The <ph id=\"ph1\">`String`</ph> to be emitted.","source":"The `String` to be emitted."}],"pos":[34558,34586],"yaml":true},{"content":"Puts the specified instruction and numerical argument onto the Microsoft intermediate language (MSIL) stream of instructions.","nodes":[{"pos":[0,125],"content":"Puts the specified instruction and numerical argument onto the Microsoft intermediate language (MSIL) stream of instructions.","nodes":[{"content":"Puts the specified instruction and numerical argument onto the Microsoft intermediate language (MSIL) stream of instructions.","pos":[0,125]}]}],"pos":[35976,36102],"yaml":true},{"content":"The instruction values are defined in the `OpCodes` enumeration.","nodes":[{"pos":[0,64],"content":"The instruction values are defined in the <ph id=\"ph1\">`OpCodes`</ph> enumeration.","source":"The instruction values are defined in the `OpCodes` enumeration."}],"pos":[36113,36178],"yaml":true,"extradata":"MT"},{"content":"The MSIL instruction to be put onto the stream.","nodes":[{"pos":[0,47],"content":"The MSIL instruction to be put onto the stream.","nodes":[{"content":"The MSIL instruction to be put onto the stream.","pos":[0,47]}]}],"pos":[36371,36419],"yaml":true},{"content":"The `Single` argument pushed onto the stream immediately after the instruction.","nodes":[{"pos":[0,79],"content":"The <ph id=\"ph1\">`Single`</ph> argument pushed onto the stream immediately after the instruction.","source":"The `Single` argument pushed onto the stream immediately after the instruction."}],"pos":[36478,36558],"yaml":true},{"content":"Puts the specified instruction and character argument onto the Microsoft intermediate language (MSIL) stream of instructions.","nodes":[{"pos":[0,125],"content":"Puts the specified instruction and character argument onto the Microsoft intermediate language (MSIL) stream of instructions.","nodes":[{"content":"Puts the specified instruction and character argument onto the Microsoft intermediate language (MSIL) stream of instructions.","pos":[0,125]}]}],"pos":[37942,38068],"yaml":true},{"content":"The instruction values are defined in the `OpCodes` enumeration.","nodes":[{"pos":[0,64],"content":"The instruction values are defined in the <ph id=\"ph1\">`OpCodes`</ph> enumeration.","source":"The instruction values are defined in the `OpCodes` enumeration."}],"pos":[38079,38144],"yaml":true,"extradata":"MT"},{"content":"The MSIL instruction to be put onto the stream.","nodes":[{"pos":[0,47],"content":"The MSIL instruction to be put onto the stream.","nodes":[{"content":"The MSIL instruction to be put onto the stream.","pos":[0,47]}]}],"pos":[38374,38422],"yaml":true},{"content":"The character argument pushed onto the stream immediately after the instruction.","nodes":[{"pos":[0,80],"content":"The character argument pushed onto the stream immediately after the instruction.","nodes":[{"content":"The character argument pushed onto the stream immediately after the instruction.","pos":[0,80]}]}],"pos":[38480,38561],"yaml":true},{"content":"Puts the specified instruction and metadata token for the specified field onto the Microsoft intermediate language (MSIL) stream of instructions.","nodes":[{"pos":[0,145],"content":"Puts the specified instruction and metadata token for the specified field onto the Microsoft intermediate language (MSIL) stream of instructions.","nodes":[{"content":"Puts the specified instruction and metadata token for the specified field onto the Microsoft intermediate language (MSIL) stream of instructions.","pos":[0,145]}]}],"pos":[40055,40201],"yaml":true},{"content":"The instruction values are defined in the `OpCodes` enumeration. The location of `field` is recorded so that the instruction stream can be patched if necessary when persisting the module to a portable executable (PE) file.","nodes":[{"pos":[0,222],"content":"The instruction values are defined in the `OpCodes` enumeration. The location of `field` is recorded so that the instruction stream can be patched if necessary when persisting the module to a portable executable (PE) file.","nodes":[{"content":"The instruction values are defined in the <ph id=\"ph1\">`OpCodes`</ph> enumeration.","pos":[0,64],"source":"The instruction values are defined in the `OpCodes` enumeration."},{"content":"The location of <ph id=\"ph1\">`field`</ph> is recorded so that the instruction stream can be patched if necessary when persisting the module to a portable executable (PE) file.","pos":[65,222],"source":" The location of `field` is recorded so that the instruction stream can be patched if necessary when persisting the module to a portable executable (PE) file."}]}],"pos":[40212,40435],"yaml":true,"extradata":"MT"},{"content":"The MSIL instruction to be emitted onto the stream.","nodes":[{"pos":[0,51],"content":"The MSIL instruction to be emitted onto the stream.","nodes":[{"content":"The MSIL instruction to be emitted onto the stream.","pos":[0,51]}]}],"pos":[40652,40704],"yaml":true},{"content":"A `FieldInfo` representing a field.","nodes":[{"pos":[0,35],"content":"A <ph id=\"ph1\">`FieldInfo`</ph> representing a field.","source":"A `FieldInfo` representing a field."}],"pos":[40779,40815],"yaml":true},{"content":"Puts the specified instruction and a signature token onto the Microsoft intermediate language (MSIL) stream of instructions.","nodes":[{"pos":[0,124],"content":"Puts the specified instruction and a signature token onto the Microsoft intermediate language (MSIL) stream of instructions.","nodes":[{"content":"Puts the specified instruction and a signature token onto the Microsoft intermediate language (MSIL) stream of instructions.","pos":[0,124]}]}],"pos":[42307,42432],"yaml":true},{"content":"The instruction values are defined in the `OpCodes` enumeration.","nodes":[{"pos":[0,64],"content":"The instruction values are defined in the <ph id=\"ph1\">`OpCodes`</ph> enumeration.","source":"The instruction values are defined in the `OpCodes` enumeration."}],"pos":[42443,42508],"yaml":true,"extradata":"MT"},{"content":"The MSIL instruction to be emitted onto the stream.","nodes":[{"pos":[0,51],"content":"The MSIL instruction to be emitted onto the stream.","nodes":[{"content":"The MSIL instruction to be emitted onto the stream.","pos":[0,51]}]}],"pos":[42740,42792],"yaml":true},{"content":"A helper for constructing a signature token.","nodes":[{"pos":[0,44],"content":"A helper for constructing a signature token.","nodes":[{"content":"A helper for constructing a signature token.","pos":[0,44]}]}],"pos":[42882,42927],"yaml":true},{"content":"<code>signature</code> is `null`.","nodes":[{"pos":[0,33],"content":"<ph id=\"ph1\">&lt;code&gt;signature&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>signature</code> is `null`."}],"pos":[43096,43130],"yaml":true},{"content":"Puts the specified instruction onto the Microsoft intermediate language (MSIL) stream followed by the index of the given local variable.","nodes":[{"pos":[0,136],"content":"Puts the specified instruction onto the Microsoft intermediate language (MSIL) stream followed by the index of the given local variable.","nodes":[{"content":"Puts the specified instruction onto the Microsoft intermediate language (MSIL) stream followed by the index of the given local variable.","pos":[0,136]}]}],"pos":[44534,44671],"yaml":true},{"content":"The instruction values are defined in the `OpCodes` enumeration.","nodes":[{"pos":[0,64],"content":"The instruction values are defined in the <ph id=\"ph1\">`OpCodes`</ph> enumeration.","source":"The instruction values are defined in the `OpCodes` enumeration."}],"pos":[44682,44747],"yaml":true,"extradata":"MT"},{"content":"The MSIL instruction to be emitted onto the stream.","nodes":[{"pos":[0,51],"content":"The MSIL instruction to be emitted onto the stream.","nodes":[{"content":"The MSIL instruction to be emitted onto the stream.","pos":[0,51]}]}],"pos":[44972,45024],"yaml":true},{"content":"A local variable.","nodes":[{"pos":[0,17],"content":"A local variable.","nodes":[{"content":"A local variable.","pos":[0,17]}]}],"pos":[45107,45125],"yaml":true},{"content":"The parent method of the <code>local</code> parameter does not match the method associated with this <xref href=\"System.Reflection.Emit.ILGenerator\"></xref>.","nodes":[{"pos":[0,157],"content":"The parent method of the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">local</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter does not match the method associated with this <ph id=\"ph2\">&lt;xref href=\"System.Reflection.Emit.ILGenerator\"&gt;&lt;/xref&gt;</ph>.","source":"The parent method of the <code>local</code> parameter does not match the method associated with this <xref href=\"System.Reflection.Emit.ILGenerator\"></xref>."}],"pos":[45286,45444],"yaml":true},{"content":"<code>local</code> is `null`.","nodes":[{"pos":[0,29],"content":"<ph id=\"ph1\">&lt;code&gt;local&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>local</code> is `null`."}],"pos":[45546,45576],"yaml":true},{"content":"<code>opcode</code> is a single-byte instruction, and <code>local</code> represents a local variable with an index greater than `Byte.MaxValue`.","nodes":[{"pos":[0,144],"content":"<ph id=\"ph1\">&lt;code&gt;opcode&lt;/code&gt;</ph> is a single-byte instruction, and <ph id=\"ph2\">&lt;code&gt;local&lt;/code&gt;</ph> represents a local variable with an index greater than <ph id=\"ph3\">`Byte.MaxValue`</ph>.","source":"<code>opcode</code> is a single-byte instruction, and <code>local</code> represents a local variable with an index greater than `Byte.MaxValue`."}],"pos":[45686,45831],"yaml":true},{"content":"Puts the specified instruction onto the Microsoft intermediate language (MSIL) stream and leaves space to include a label when fixes are done.","nodes":[{"pos":[0,142],"content":"Puts the specified instruction onto the Microsoft intermediate language (MSIL) stream and leaves space to include a label when fixes are done.","nodes":[{"content":"Puts the specified instruction onto the Microsoft intermediate language (MSIL) stream and leaves space to include a label when fixes are done.","pos":[0,142]}]}],"pos":[47205,47348],"yaml":true},{"content":"Emits a switch table.  \n  \n The instruction values are defined in the `OpCodes` enumeration.  \n  \n Labels are created using <xref:System.Reflection.Emit.ILGenerator.DefineLabel%2A> and their location within the stream is fixed by using <xref:System.Reflection.Emit.ILGenerator.MarkLabel%2A>. If a single-byte instruction is used, the label can represent a jump of at most 127 bytes along the stream. `opcode` must represent a branch instruction. Because branches are relative instructions, `label` will be replaced with the correct offset to branch during the fixup process.","nodes":[{"pos":[0,21],"content":"Emits a switch table.","nodes":[{"content":"Emits a switch table.","pos":[0,21]}]},{"pos":[28,92],"content":"The instruction values are defined in the <ph id=\"ph1\">`OpCodes`</ph> enumeration.","source":"The instruction values are defined in the `OpCodes` enumeration."},{"pos":[99,574],"content":"Labels are created using <xref:System.Reflection.Emit.ILGenerator.DefineLabel%2A> and their location within the stream is fixed by using <xref:System.Reflection.Emit.ILGenerator.MarkLabel%2A>. If a single-byte instruction is used, the label can represent a jump of at most 127 bytes along the stream. `opcode` must represent a branch instruction. Because branches are relative instructions, `label` will be replaced with the correct offset to branch during the fixup process.","nodes":[{"content":"Labels are created using <ph id=\"ph1\">&lt;xref:System.Reflection.Emit.ILGenerator.DefineLabel%2A&gt;</ph> and their location within the stream is fixed by using <ph id=\"ph2\">&lt;xref:System.Reflection.Emit.ILGenerator.MarkLabel%2A&gt;</ph>.","pos":[0,192],"source":"Labels are created using <xref:System.Reflection.Emit.ILGenerator.DefineLabel%2A> and their location within the stream is fixed by using <xref:System.Reflection.Emit.ILGenerator.MarkLabel%2A>."},{"content":"If a single-byte instruction is used, the label can represent a jump of at most 127 bytes along the stream.","pos":[193,300]},{"content":"<ph id=\"ph1\">`opcode`</ph> must represent a branch instruction.","pos":[301,346],"source":"`opcode` must represent a branch instruction."},{"content":"Because branches are relative instructions, <ph id=\"ph1\">`label`</ph> will be replaced with the correct offset to branch during the fixup process.","pos":[347,475],"source":" Because branches are relative instructions, `label` will be replaced with the correct offset to branch during the fixup process."}]}],"pos":[47359,47940],"yaml":true,"extradata":"MT"},{"content":"The MSIL instruction to be emitted onto the stream.","nodes":[{"pos":[0,51],"content":"The MSIL instruction to be emitted onto the stream.","nodes":[{"content":"The MSIL instruction to be emitted onto the stream.","pos":[0,51]}]}],"pos":[48901,48953],"yaml":true},{"content":"The array of label objects to which to branch from this location. All of the labels will be used.","nodes":[{"pos":[0,97],"content":"The array of label objects to which to branch from this location. All of the labels will be used.","nodes":[{"content":"The array of label objects to which to branch from this location. All of the labels will be used.","pos":[0,97],"nodes":[{"content":"The array of label objects to which to branch from this location.","pos":[0,65]},{"content":"All of the labels will be used.","pos":[66,97]}]}]}],"pos":[49032,49130],"yaml":true},{"content":"<code>con</code> is `null`. This exception is new in the [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)].","nodes":[{"pos":[0,113],"content":"<code>con</code> is `null`. This exception is new in the [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)].","nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;con&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","pos":[0,27],"source":"<code>con</code> is `null`."},{"content":"This exception is new in the <ph id=\"ph1\">[!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]</ph>.","pos":[28,113],"source":" This exception is new in the [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]."}]}],"pos":[49299,49413],"yaml":true},{"content":"Puts the specified instruction onto the Microsoft intermediate language (MSIL) stream followed by the metadata token for the given method.","nodes":[{"pos":[0,138],"content":"Puts the specified instruction onto the Microsoft intermediate language (MSIL) stream followed by the metadata token for the given method.","nodes":[{"content":"Puts the specified instruction onto the Microsoft intermediate language (MSIL) stream followed by the metadata token for the given method.","pos":[0,138]}]}],"pos":[50790,50929],"yaml":true},{"content":"The instruction values are defined in the `OpCodes` enumeration.  \n  \n The location of `meth` is recorded so that the instruction stream can be patched if necessary when persisting the module to a portable executable (PE) file.  \n  \n If `meth` represents a generic method, it must be a generic method definition. That is, its <xref:System.Reflection.MethodInfo.IsGenericMethodDefinition%2A?displayProperty=fullName> property must be `true`.","nodes":[{"pos":[0,64],"content":"The instruction values are defined in the <ph id=\"ph1\">`OpCodes`</ph> enumeration.","source":"The instruction values are defined in the `OpCodes` enumeration."},{"pos":[71,227],"content":"The location of <ph id=\"ph1\">`meth`</ph> is recorded so that the instruction stream can be patched if necessary when persisting the module to a portable executable (PE) file.","source":"The location of `meth` is recorded so that the instruction stream can be patched if necessary when persisting the module to a portable executable (PE) file."},{"pos":[234,440],"content":"If `meth` represents a generic method, it must be a generic method definition. That is, its <xref:System.Reflection.MethodInfo.IsGenericMethodDefinition%2A?displayProperty=fullName> property must be `true`.","nodes":[{"content":"If <ph id=\"ph1\">`meth`</ph> represents a generic method, it must be a generic method definition.","pos":[0,78],"source":"If `meth` represents a generic method, it must be a generic method definition."},{"content":"That is, its <ph id=\"ph1\">&lt;xref:System.Reflection.MethodInfo.IsGenericMethodDefinition%2A?displayProperty=fullName&gt;</ph> property must be <ph id=\"ph2\">`true`</ph>.","pos":[79,206],"source":" That is, its <xref:System.Reflection.MethodInfo.IsGenericMethodDefinition%2A?displayProperty=fullName> property must be `true`."}]}],"pos":[50940,51387],"yaml":true,"extradata":"MT"},{"content":"The MSIL instruction to be emitted onto the stream.","nodes":[{"pos":[0,51],"content":"The MSIL instruction to be emitted onto the stream.","nodes":[{"content":"The MSIL instruction to be emitted onto the stream.","pos":[0,51]}]}],"pos":[51604,51656],"yaml":true},{"content":"A `MethodInfo` representing a method.","nodes":[{"pos":[0,37],"content":"A <ph id=\"ph1\">`MethodInfo`</ph> representing a method.","source":"A `MethodInfo` representing a method."}],"pos":[51731,51769],"yaml":true},{"content":"<code>meth</code> is `null`.","nodes":[{"pos":[0,28],"content":"<ph id=\"ph1\">&lt;code&gt;meth&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>meth</code> is `null`."}],"pos":[51938,51967],"yaml":true},{"content":"<code>meth</code> is a generic method for which the <xref href=\"System.Reflection.MethodInfo.IsGenericMethodDefinition\"></xref> property is `false`.","nodes":[{"pos":[0,148],"content":"<ph id=\"ph1\">&lt;code&gt;meth&lt;/code&gt;</ph> is a generic method for which the <ph id=\"ph2\">&lt;xref href=\"System.Reflection.MethodInfo.IsGenericMethodDefinition\"&gt;&lt;/xref&gt;</ph> property is <ph id=\"ph3\">`false`</ph>.","source":"<code>meth</code> is a generic method for which the <xref href=\"System.Reflection.MethodInfo.IsGenericMethodDefinition\"></xref> property is `false`."}],"pos":[52069,52218],"yaml":true},{"content":"Puts the specified instruction and metadata token for the specified constructor onto the Microsoft intermediate language (MSIL) stream of instructions.","nodes":[{"pos":[0,151],"content":"Puts the specified instruction and metadata token for the specified constructor onto the Microsoft intermediate language (MSIL) stream of instructions.","nodes":[{"content":"Puts the specified instruction and metadata token for the specified constructor onto the Microsoft intermediate language (MSIL) stream of instructions.","pos":[0,151]}]}],"pos":[53625,53777],"yaml":true},{"content":"The instruction values are defined in the `OpCodes` enumeration.  \n  \n The location of `con` is recorded so that the instruction stream can be patched if necessary when persisting the module to a portable executable (PE) file.","nodes":[{"pos":[0,64],"content":"The instruction values are defined in the <ph id=\"ph1\">`OpCodes`</ph> enumeration.","source":"The instruction values are defined in the `OpCodes` enumeration."},{"pos":[71,226],"content":"The location of <ph id=\"ph1\">`con`</ph> is recorded so that the instruction stream can be patched if necessary when persisting the module to a portable executable (PE) file.","source":"The location of `con` is recorded so that the instruction stream can be patched if necessary when persisting the module to a portable executable (PE) file."}],"pos":[53788,54019],"yaml":true,"extradata":"MT"},{"content":"The MSIL instruction to be emitted onto the stream.","nodes":[{"pos":[0,51],"content":"The MSIL instruction to be emitted onto the stream.","nodes":[{"content":"The MSIL instruction to be emitted onto the stream.","pos":[0,51]}]}],"pos":[54306,54358],"yaml":true},{"content":"A `ConstructorInfo` representing a constructor.","nodes":[{"pos":[0,47],"content":"A <ph id=\"ph1\">`ConstructorInfo`</ph> representing a constructor.","source":"A `ConstructorInfo` representing a constructor."}],"pos":[54437,54485],"yaml":true},{"content":"<code>con</code> is `null`. This exception is new in the [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)].","nodes":[{"pos":[0,113],"content":"<code>con</code> is `null`. This exception is new in the [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)].","nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;con&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","pos":[0,27],"source":"<code>con</code> is `null`."},{"content":"This exception is new in the <ph id=\"ph1\">[!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]</ph>.","pos":[28,113],"source":" This exception is new in the [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]."}]}],"pos":[54654,54768],"yaml":true},{"content":"Puts the specified instruction and numerical argument onto the Microsoft intermediate language (MSIL) stream of instructions.","nodes":[{"pos":[0,125],"content":"Puts the specified instruction and numerical argument onto the Microsoft intermediate language (MSIL) stream of instructions.","nodes":[{"content":"Puts the specified instruction and numerical argument onto the Microsoft intermediate language (MSIL) stream of instructions.","pos":[0,125]}]}],"pos":[56157,56283],"yaml":true},{"content":"The instruction values are defined in the `OpCodes` enumeration.","nodes":[{"pos":[0,64],"content":"The instruction values are defined in the <ph id=\"ph1\">`OpCodes`</ph> enumeration.","source":"The instruction values are defined in the `OpCodes` enumeration."}],"pos":[56294,56359],"yaml":true,"extradata":"MT"},{"content":"The MSIL instruction to be put onto the stream.","nodes":[{"pos":[0,47],"content":"The MSIL instruction to be put onto the stream.","nodes":[{"content":"The MSIL instruction to be put onto the stream.","pos":[0,47]}]}],"pos":[56551,56599],"yaml":true},{"content":"The numerical argument pushed onto the stream immediately after the instruction.","nodes":[{"pos":[0,80],"content":"The numerical argument pushed onto the stream immediately after the instruction.","nodes":[{"content":"The numerical argument pushed onto the stream immediately after the instruction.","pos":[0,80]}]}],"pos":[56657,56738],"yaml":true},{"content":"Puts the specified instruction and numerical argument onto the Microsoft intermediate language (MSIL) stream of instructions.","nodes":[{"pos":[0,125],"content":"Puts the specified instruction and numerical argument onto the Microsoft intermediate language (MSIL) stream of instructions.","nodes":[{"content":"Puts the specified instruction and numerical argument onto the Microsoft intermediate language (MSIL) stream of instructions.","pos":[0,125]}]}],"pos":[58122,58248],"yaml":true},{"content":"The instruction values are defined in the `OpCodes` enumeration.","nodes":[{"pos":[0,64],"content":"The instruction values are defined in the <ph id=\"ph1\">`OpCodes`</ph> enumeration.","source":"The instruction values are defined in the `OpCodes` enumeration."}],"pos":[58259,58324],"yaml":true,"extradata":"MT"},{"content":"The MSIL instruction to be put onto the stream.","nodes":[{"pos":[0,47],"content":"The MSIL instruction to be put onto the stream.","nodes":[{"content":"The MSIL instruction to be put onto the stream.","pos":[0,47]}]}],"pos":[58515,58563],"yaml":true},{"content":"The numerical argument pushed onto the stream immediately after the instruction.","nodes":[{"pos":[0,80],"content":"The numerical argument pushed onto the stream immediately after the instruction.","nodes":[{"content":"The numerical argument pushed onto the stream immediately after the instruction.","pos":[0,80]}]}],"pos":[58621,58702],"yaml":true},{"content":"Puts the specified instruction and numerical argument onto the Microsoft intermediate language (MSIL) stream of instructions.","nodes":[{"pos":[0,125],"content":"Puts the specified instruction and numerical argument onto the Microsoft intermediate language (MSIL) stream of instructions.","nodes":[{"content":"Puts the specified instruction and numerical argument onto the Microsoft intermediate language (MSIL) stream of instructions.","pos":[0,125]}]}],"pos":[60086,60212],"yaml":true},{"content":"The instruction values are defined in the `OpCodes` enumeration.","nodes":[{"pos":[0,64],"content":"The instruction values are defined in the <ph id=\"ph1\">`OpCodes`</ph> enumeration.","source":"The instruction values are defined in the `OpCodes` enumeration."}],"pos":[60223,60288],"yaml":true,"extradata":"MT"},{"content":"The MSIL instruction to be emitted onto the stream.","nodes":[{"pos":[0,51],"content":"The MSIL instruction to be emitted onto the stream.","nodes":[{"content":"The MSIL instruction to be emitted onto the stream.","pos":[0,51]}]}],"pos":[60481,60533],"yaml":true},{"content":"The `Int` argument pushed onto the stream immediately after the instruction.","nodes":[{"pos":[0,76],"content":"The <ph id=\"ph1\">`Int`</ph> argument pushed onto the stream immediately after the instruction.","source":"The `Int` argument pushed onto the stream immediately after the instruction."}],"pos":[60591,60668],"yaml":true},{"content":"Puts the specified instruction and numerical argument onto the Microsoft intermediate language (MSIL) stream of instructions.","nodes":[{"pos":[0,125],"content":"Puts the specified instruction and numerical argument onto the Microsoft intermediate language (MSIL) stream of instructions.","nodes":[{"content":"Puts the specified instruction and numerical argument onto the Microsoft intermediate language (MSIL) stream of instructions.","pos":[0,125]}]}],"pos":[62058,62184],"yaml":true},{"content":"The instruction values are defined in the `OpCodes` enumeration.","nodes":[{"pos":[0,64],"content":"The instruction values are defined in the <ph id=\"ph1\">`OpCodes`</ph> enumeration.","source":"The instruction values are defined in the `OpCodes` enumeration."}],"pos":[62195,62260],"yaml":true,"extradata":"MT"},{"content":"The MSIL instruction to be put onto the stream. Defined in the `OpCodes` enumeration.","nodes":[{"pos":[0,85],"content":"The MSIL instruction to be put onto the stream. Defined in the `OpCodes` enumeration.","nodes":[{"content":"The MSIL instruction to be put onto the stream.","pos":[0,47]},{"content":"Defined in the <ph id=\"ph1\">`OpCodes`</ph> enumeration.","pos":[48,85],"source":" Defined in the `OpCodes` enumeration."}]}],"pos":[62454,62540],"yaml":true},{"content":"The numerical argument pushed onto the stream immediately after the instruction.","nodes":[{"pos":[0,80],"content":"The numerical argument pushed onto the stream immediately after the instruction.","nodes":[{"content":"The numerical argument pushed onto the stream immediately after the instruction.","pos":[0,80]}]}],"pos":[62599,62680],"yaml":true},{"content":"Puts the specified instruction and character argument onto the Microsoft intermediate language (MSIL) stream of instructions.","nodes":[{"pos":[0,125],"content":"Puts the specified instruction and character argument onto the Microsoft intermediate language (MSIL) stream of instructions.","nodes":[{"content":"Puts the specified instruction and character argument onto the Microsoft intermediate language (MSIL) stream of instructions.","pos":[0,125]}]}],"pos":[64058,64184],"yaml":true},{"content":"The instruction values are defined in the `OpCodes` enumeration.","nodes":[{"pos":[0,64],"content":"The instruction values are defined in the <ph id=\"ph1\">`OpCodes`</ph> enumeration.","source":"The instruction values are defined in the `OpCodes` enumeration."}],"pos":[64195,64260],"yaml":true,"extradata":"MT"},{"content":"The MSIL instruction to be put onto the stream.","nodes":[{"pos":[0,47],"content":"The MSIL instruction to be put onto the stream.","nodes":[{"content":"The MSIL instruction to be put onto the stream.","pos":[0,47]}]}],"pos":[64452,64500],"yaml":true},{"content":"The character argument pushed onto the stream immediately after the instruction.","nodes":[{"pos":[0,80],"content":"The character argument pushed onto the stream immediately after the instruction.","nodes":[{"content":"The character argument pushed onto the stream immediately after the instruction.","pos":[0,80]}]}],"pos":[64557,64638],"yaml":true},{"content":"Puts the specified instruction onto the stream of instructions.","nodes":[{"pos":[0,63],"content":"Puts the specified instruction onto the stream of instructions.","nodes":[{"content":"Puts the specified instruction onto the stream of instructions.","pos":[0,63]}]}],"pos":[65962,66026],"yaml":true},{"content":"If the `opcode` parameter requires an argument, the caller must ensure that the argument length matches the length of the declared parameter. Otherwise, results will be unpredictable. For example, if the Emit instruction requires a 2-byte operand and the caller supplies a 4-byte operand, the runtime will emit two additional bytes to the instruction stream. These extra bytes will be <xref:System.Reflection.Emit.OpCodes.Nop> instructions.  \n  \n The instruction values are defined in <xref:System.Reflection.Emit.OpCodes>.","nodes":[{"pos":[0,440],"content":"If the `opcode` parameter requires an argument, the caller must ensure that the argument length matches the length of the declared parameter. Otherwise, results will be unpredictable. For example, if the Emit instruction requires a 2-byte operand and the caller supplies a 4-byte operand, the runtime will emit two additional bytes to the instruction stream. These extra bytes will be <xref:System.Reflection.Emit.OpCodes.Nop> instructions.","nodes":[{"content":"If the <ph id=\"ph1\">`opcode`</ph> parameter requires an argument, the caller must ensure that the argument length matches the length of the declared parameter.","pos":[0,141],"source":"If the `opcode` parameter requires an argument, the caller must ensure that the argument length matches the length of the declared parameter."},{"content":"Otherwise, results will be unpredictable.","pos":[142,183]},{"content":"For example, if the Emit instruction requires a 2-byte operand and the caller supplies a 4-byte operand, the runtime will emit two additional bytes to the instruction stream.","pos":[184,358]},{"content":"These extra bytes will be <ph id=\"ph1\">&lt;xref:System.Reflection.Emit.OpCodes.Nop&gt;</ph> instructions.","pos":[359,440],"source":" These extra bytes will be <xref:System.Reflection.Emit.OpCodes.Nop> instructions."}]},{"pos":[447,523],"content":"The instruction values are defined in <xref:System.Reflection.Emit.OpCodes>.","nodes":[{"content":"The instruction values are defined in <ph id=\"ph1\">&lt;xref:System.Reflection.Emit.OpCodes&gt;</ph>.","pos":[0,76],"source":"The instruction values are defined in <xref:System.Reflection.Emit.OpCodes>."}]}],"pos":[66037,66565],"yaml":true,"extradata":"MT"},{"content":"The Microsoft Intermediate Language (MSIL) instruction to be put onto the stream.","nodes":[{"pos":[0,81],"content":"The Microsoft Intermediate Language (MSIL) instruction to be put onto the stream.","nodes":[{"content":"The Microsoft Intermediate Language (MSIL) instruction to be put onto the stream.","pos":[0,81]}]}],"pos":[67461,67543],"yaml":true},{"content":"Puts the specified instruction onto the Microsoft intermediate language (MSIL) stream and leaves space to include a label when fixes are done.","nodes":[{"pos":[0,142],"content":"Puts the specified instruction onto the Microsoft intermediate language (MSIL) stream and leaves space to include a label when fixes are done.","nodes":[{"content":"Puts the specified instruction onto the Microsoft intermediate language (MSIL) stream and leaves space to include a label when fixes are done.","pos":[0,142]}]}],"pos":[68975,69118],"yaml":true},{"content":"The instruction values are defined in the `OpCodes` enumeration.  \n  \n Labels are created using <xref:System.Reflection.Emit.ILGenerator.DefineLabel%2A>, and their location within the stream is fixed by using <xref:System.Reflection.Emit.ILGenerator.MarkLabel%2A>. If a single-byte instruction is used, the label can represent a jump of at most 127 bytes along the stream. `opcode` must represent a branch instruction. Because branches are relative instructions, `label` will be replaced with the correct offset to branch during the fixup process.","nodes":[{"pos":[0,64],"content":"The instruction values are defined in the <ph id=\"ph1\">`OpCodes`</ph> enumeration.","source":"The instruction values are defined in the `OpCodes` enumeration."},{"pos":[71,547],"content":"Labels are created using <xref:System.Reflection.Emit.ILGenerator.DefineLabel%2A>, and their location within the stream is fixed by using <xref:System.Reflection.Emit.ILGenerator.MarkLabel%2A>. If a single-byte instruction is used, the label can represent a jump of at most 127 bytes along the stream. `opcode` must represent a branch instruction. Because branches are relative instructions, `label` will be replaced with the correct offset to branch during the fixup process.","nodes":[{"content":"Labels are created using <ph id=\"ph1\">&lt;xref:System.Reflection.Emit.ILGenerator.DefineLabel%2A&gt;</ph>, and their location within the stream is fixed by using <ph id=\"ph2\">&lt;xref:System.Reflection.Emit.ILGenerator.MarkLabel%2A&gt;</ph>.","pos":[0,193],"source":"Labels are created using <xref:System.Reflection.Emit.ILGenerator.DefineLabel%2A>, and their location within the stream is fixed by using <xref:System.Reflection.Emit.ILGenerator.MarkLabel%2A>."},{"content":"If a single-byte instruction is used, the label can represent a jump of at most 127 bytes along the stream.","pos":[194,301]},{"content":"<ph id=\"ph1\">`opcode`</ph> must represent a branch instruction.","pos":[302,347],"source":"`opcode` must represent a branch instruction."},{"content":"Because branches are relative instructions, <ph id=\"ph1\">`label`</ph> will be replaced with the correct offset to branch during the fixup process.","pos":[348,476],"source":" Because branches are relative instructions, `label` will be replaced with the correct offset to branch during the fixup process."}]}],"pos":[69129,69681],"yaml":true,"extradata":"MT"},{"content":"The MSIL instruction to be emitted onto the stream.","nodes":[{"pos":[0,51],"content":"The MSIL instruction to be emitted onto the stream.","nodes":[{"content":"The MSIL instruction to be emitted onto the stream.","pos":[0,51]}]}],"pos":[70639,70691],"yaml":true},{"content":"The label to which to branch from this location.","nodes":[{"pos":[0,48],"content":"The label to which to branch from this location.","nodes":[{"content":"The label to which to branch from this location.","pos":[0,48]}]}],"pos":[70767,70816],"yaml":true},{"content":"Puts a `call` or `callvirt` instruction onto the Microsoft intermediate language (MSIL) stream to call a `varargs` method.","nodes":[{"pos":[0,122],"content":"Puts a <ph id=\"ph1\">`call`</ph> or <ph id=\"ph2\">`callvirt`</ph> instruction onto the Microsoft intermediate language (MSIL) stream to call a <ph id=\"ph3\">`varargs`</ph> method.","source":"Puts a `call` or `callvirt` instruction onto the Microsoft intermediate language (MSIL) stream to call a `varargs` method."}],"pos":[72353,72476],"yaml":true},{"content":"The <xref:System.Reflection.Emit.ILGenerator.EmitCall%2A> method is used to emit calls to `varargs` methods because there is no overload of the <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method that specifies the parameter types of the variable arguments.  \n  \n To emit calls to methods that do not use the <xref:System.Reflection.CallingConventions.VarArgs> calling convention, use the <xref:System.Reflection.Emit.ILGenerator.Emit%28System.Reflection.Emit.OpCode%2CSystem.Reflection.MethodInfo%29> method overload.  \n  \n## Version Information  \n Beginning with the .NET Framework version 2.0, the <xref:System.Reflection.Emit.ILGenerator.EmitCall%2A> method does not throw an exception when optional parameter types are specified for a method that is not `varargs`. <xref:System.InvalidProgramException> is thrown when the call is executed.","nodes":[{"pos":[0,262],"content":"The <ph id=\"ph1\">&lt;xref:System.Reflection.Emit.ILGenerator.EmitCall%2A&gt;</ph> method is used to emit calls to <ph id=\"ph2\">`varargs`</ph> methods because there is no overload of the <ph id=\"ph3\">&lt;xref:System.Reflection.Emit.ILGenerator.Emit%2A&gt;</ph> method that specifies the parameter types of the variable arguments.","source":"The <xref:System.Reflection.Emit.ILGenerator.EmitCall%2A> method is used to emit calls to `varargs` methods because there is no overload of the <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method that specifies the parameter types of the variable arguments."},{"pos":[269,523],"content":"To emit calls to methods that do not use the <xref:System.Reflection.CallingConventions.VarArgs> calling convention, use the <xref:System.Reflection.Emit.ILGenerator.Emit%28System.Reflection.Emit.OpCode%2CSystem.Reflection.MethodInfo%29> method overload.","nodes":[{"content":"To emit calls to methods that do not use the <ph id=\"ph1\">&lt;xref:System.Reflection.CallingConventions.VarArgs&gt;</ph> calling convention, use the <ph id=\"ph2\">&lt;xref:System.Reflection.Emit.ILGenerator.Emit%28System.Reflection.Emit.OpCode%2CSystem.Reflection.MethodInfo%29&gt;</ph> method overload.","pos":[0,254],"source":"To emit calls to methods that do not use the <xref:System.Reflection.CallingConventions.VarArgs> calling convention, use the <xref:System.Reflection.Emit.ILGenerator.Emit%28System.Reflection.Emit.OpCode%2CSystem.Reflection.MethodInfo%29> method overload."}]},{"pos":[532,551],"content":"Version Information","linkify":"Version Information","nodes":[{"content":"Version Information","pos":[0,19]}]},{"pos":[555,849],"content":"Beginning with the .NET Framework version 2.0, the <xref:System.Reflection.Emit.ILGenerator.EmitCall%2A> method does not throw an exception when optional parameter types are specified for a method that is not `varargs`. <xref:System.InvalidProgramException> is thrown when the call is executed.","nodes":[{"content":"Beginning with the .NET Framework version 2.0, the <ph id=\"ph1\">&lt;xref:System.Reflection.Emit.ILGenerator.EmitCall%2A&gt;</ph> method does not throw an exception when optional parameter types are specified for a method that is not <ph id=\"ph2\">`varargs`</ph>.","pos":[0,219],"source":"Beginning with the .NET Framework version 2.0, the <xref:System.Reflection.Emit.ILGenerator.EmitCall%2A> method does not throw an exception when optional parameter types are specified for a method that is not `varargs`."},{"content":"<ph id=\"ph1\">&lt;xref:System.InvalidProgramException&gt;</ph> is thrown when the call is executed.","pos":[220,294],"source":" <xref:System.InvalidProgramException> is thrown when the call is executed."}]}],"pos":[72487,73344],"yaml":true,"extradata":"MT"},{"content":"The MSIL instruction to be emitted onto the stream. Must be <xref href=\"System.Reflection.Emit.OpCodes.Call\"></xref>, <xref href=\"System.Reflection.Emit.OpCodes.Callvirt\"></xref>, or <xref href=\"System.Reflection.Emit.OpCodes.Newobj\"></xref>.","nodes":[{"pos":[0,242],"content":"The MSIL instruction to be emitted onto the stream. Must be <xref href=\"System.Reflection.Emit.OpCodes.Call\"></xref>, <xref href=\"System.Reflection.Emit.OpCodes.Callvirt\"></xref>, or <xref href=\"System.Reflection.Emit.OpCodes.Newobj\"></xref>.","nodes":[{"content":"The MSIL instruction to be emitted onto the stream.","pos":[0,51]},{"content":"Must be <ph id=\"ph1\">&lt;xref href=\"System.Reflection.Emit.OpCodes.Call\"&gt;&lt;/xref&gt;</ph>, <ph id=\"ph2\">&lt;xref href=\"System.Reflection.Emit.OpCodes.Callvirt\"&gt;&lt;/xref&gt;</ph>, or <ph id=\"ph3\">&lt;xref href=\"System.Reflection.Emit.OpCodes.Newobj\"&gt;&lt;/xref&gt;</ph>.","pos":[52,242],"source":" Must be <xref href=\"System.Reflection.Emit.OpCodes.Call\"></xref>, <xref href=\"System.Reflection.Emit.OpCodes.Callvirt\"></xref>, or <xref href=\"System.Reflection.Emit.OpCodes.Newobj\"></xref>."}]}],"pos":[74141,74384],"yaml":true},{"content":"The `varargs` method to be called.","nodes":[{"pos":[0,34],"content":"The <ph id=\"ph1\">`varargs`</ph> method to be called.","source":"The `varargs` method to be called."}],"pos":[74465,74500],"yaml":true},{"content":"The types of the optional arguments if the method is a `varargs` method; otherwise, `null`.","nodes":[{"pos":[0,91],"content":"The types of the optional arguments if the method is a <ph id=\"ph1\">`varargs`</ph> method; otherwise, <ph id=\"ph2\">`null`</ph>.","source":"The types of the optional arguments if the method is a `varargs` method; otherwise, `null`."}],"pos":[74578,74670],"yaml":true},{"content":"<code>opcode</code> does not specify a method call.","nodes":[{"pos":[0,51],"content":"<ph id=\"ph1\">&lt;code&gt;opcode&lt;/code&gt;</ph> does not specify a method call.","source":"<code>opcode</code> does not specify a method call."}],"pos":[74835,74887],"yaml":true},{"content":"<code>methodInfo</code> is `null`.","nodes":[{"pos":[0,34],"content":"<ph id=\"ph1\">&lt;code&gt;methodInfo&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>methodInfo</code> is `null`."}],"pos":[74989,75024],"yaml":true},{"content":"The calling convention for the method is not `varargs`, but optional parameter types are supplied. This exception is thrown in the .NET Framework versions 1.0 and 1.1, In subsequent versions, no exception is thrown.","nodes":[{"pos":[0,215],"content":"The calling convention for the method is not `varargs`, but optional parameter types are supplied. This exception is thrown in the .NET Framework versions 1.0 and 1.1, In subsequent versions, no exception is thrown.","nodes":[{"content":"The calling convention for the method is not <ph id=\"ph1\">`varargs`</ph>, but optional parameter types are supplied.","pos":[0,98],"source":"The calling convention for the method is not `varargs`, but optional parameter types are supplied."},{"content":"This exception is thrown in the .NET Framework versions 1.0 and 1.1, In subsequent versions, no exception is thrown.","pos":[99,215]}]}],"pos":[75134,75350],"yaml":true},{"content":"Puts a <xref href=\"System.Reflection.Emit.OpCodes.Calli\"></xref> instruction onto the Microsoft intermediate language (MSIL) stream, specifying an unmanaged calling convention for the indirect call.","nodes":[{"pos":[0,198],"content":"Puts a <ph id=\"ph1\">&lt;xref href=\"System.Reflection.Emit.OpCodes.Calli\"&gt;&lt;/xref&gt;</ph> instruction onto the Microsoft intermediate language (MSIL) stream, specifying an unmanaged calling convention for the indirect call.","source":"Puts a <xref href=\"System.Reflection.Emit.OpCodes.Calli\"></xref> instruction onto the Microsoft intermediate language (MSIL) stream, specifying an unmanaged calling convention for the indirect call."}],"pos":[76918,77117],"yaml":true},{"content":"Use<xref:System.Reflection.Emit.ILGenerator.EmitCalli%2A> to put a <xref:System.Reflection.Emit.OpCodes.Calli> instruction onto the stream. Do not use <xref:System.Reflection.Emit.ILGenerator.Emit%2A>.","nodes":[{"pos":[0,201],"content":"Use<xref:System.Reflection.Emit.ILGenerator.EmitCalli%2A> to put a <xref:System.Reflection.Emit.OpCodes.Calli> instruction onto the stream. Do not use <xref:System.Reflection.Emit.ILGenerator.Emit%2A>.","nodes":[{"content":"Use<xref:System.Reflection.Emit.ILGenerator.EmitCalli%2A> to put a <xref:System.Reflection.Emit.OpCodes.Calli> instruction onto the stream. Do not use <xref:System.Reflection.Emit.ILGenerator.Emit%2A>.","pos":[0,201],"nodes":[{"content":"Use<ph id=\"ph1\">&lt;xref:System.Reflection.Emit.ILGenerator.EmitCalli%2A&gt;</ph> to put a <ph id=\"ph2\">&lt;xref:System.Reflection.Emit.OpCodes.Calli&gt;</ph> instruction onto the stream.","pos":[0,139],"source":"Use<xref:System.Reflection.Emit.ILGenerator.EmitCalli%2A> to put a <xref:System.Reflection.Emit.OpCodes.Calli> instruction onto the stream."},{"content":"Do not use <ph id=\"ph1\">&lt;xref:System.Reflection.Emit.ILGenerator.Emit%2A&gt;</ph>.","pos":[140,201],"source":" Do not use <xref:System.Reflection.Emit.ILGenerator.Emit%2A>."}]}]}],"pos":[77128,77330],"yaml":true,"extradata":"MT"},{"content":"The MSIL instruction to be emitted onto the stream. Must be <xref href=\"System.Reflection.Emit.OpCodes.Calli\"></xref>.","nodes":[{"pos":[0,118],"content":"The MSIL instruction to be emitted onto the stream. Must be <xref href=\"System.Reflection.Emit.OpCodes.Calli\"></xref>.","nodes":[{"content":"The MSIL instruction to be emitted onto the stream.","pos":[0,51]},{"content":"Must be <ph id=\"ph1\">&lt;xref href=\"System.Reflection.Emit.OpCodes.Calli\"&gt;&lt;/xref&gt;</ph>.","pos":[52,118],"source":" Must be <xref href=\"System.Reflection.Emit.OpCodes.Calli\"></xref>."}]}],"pos":[78411,78530],"yaml":true},{"content":"The unmanaged calling convention to be used.","nodes":[{"pos":[0,44],"content":"The unmanaged calling convention to be used.","nodes":[{"content":"The unmanaged calling convention to be used.","pos":[0,44]}]}],"pos":[78638,78683],"yaml":true},{"content":"The <xref href=\"System.Type\"></xref> of the result.","nodes":[{"pos":[0,51],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Type\"&gt;&lt;/xref&gt;</ph> of the result.","source":"The <xref href=\"System.Type\"></xref> of the result."}],"pos":[78747,78799],"yaml":true},{"content":"The types of the required arguments to the instruction.","nodes":[{"pos":[0,55],"content":"The types of the required arguments to the instruction.","nodes":[{"content":"The types of the required arguments to the instruction.","pos":[0,55]}]}],"pos":[78869,78925],"yaml":true},{"content":"Puts a <xref href=\"System.Reflection.Emit.OpCodes.Calli\"></xref> instruction onto the Microsoft intermediate language (MSIL) stream, specifying a managed calling convention for the indirect call.","nodes":[{"pos":[0,195],"content":"Puts a <ph id=\"ph1\">&lt;xref href=\"System.Reflection.Emit.OpCodes.Calli\"&gt;&lt;/xref&gt;</ph> instruction onto the Microsoft intermediate language (MSIL) stream, specifying a managed calling convention for the indirect call.","source":"Puts a <xref href=\"System.Reflection.Emit.OpCodes.Calli\"></xref> instruction onto the Microsoft intermediate language (MSIL) stream, specifying a managed calling convention for the indirect call."}],"pos":[80505,80701],"yaml":true},{"content":"Use <xref:System.Reflection.Emit.ILGenerator.EmitCalli%2A> to put a <xref:System.Reflection.Emit.OpCodes.Calli> instruction onto the stream. Do not use <xref:System.Reflection.Emit.ILGenerator.Emit%2A>.  \n  \n If `optionalParameterTypes` specifies optional arguments, `callingConvention` must include the <xref:System.Reflection.CallingConventions?displayProperty=fullName> flag.","nodes":[{"pos":[0,202],"content":"Use <xref:System.Reflection.Emit.ILGenerator.EmitCalli%2A> to put a <xref:System.Reflection.Emit.OpCodes.Calli> instruction onto the stream. Do not use <xref:System.Reflection.Emit.ILGenerator.Emit%2A>.","nodes":[{"content":"Use <xref:System.Reflection.Emit.ILGenerator.EmitCalli%2A> to put a <xref:System.Reflection.Emit.OpCodes.Calli> instruction onto the stream. Do not use <xref:System.Reflection.Emit.ILGenerator.Emit%2A>.","pos":[0,202],"nodes":[{"content":"Use <ph id=\"ph1\">&lt;xref:System.Reflection.Emit.ILGenerator.EmitCalli%2A&gt;</ph> to put a <ph id=\"ph2\">&lt;xref:System.Reflection.Emit.OpCodes.Calli&gt;</ph> instruction onto the stream.","pos":[0,140],"source":"Use <xref:System.Reflection.Emit.ILGenerator.EmitCalli%2A> to put a <xref:System.Reflection.Emit.OpCodes.Calli> instruction onto the stream."},{"content":"Do not use <ph id=\"ph1\">&lt;xref:System.Reflection.Emit.ILGenerator.Emit%2A&gt;</ph>.","pos":[141,202],"source":" Do not use <xref:System.Reflection.Emit.ILGenerator.Emit%2A>."}]}]},{"pos":[209,378],"content":"If <ph id=\"ph1\">`optionalParameterTypes`</ph> specifies optional arguments, <ph id=\"ph2\">`callingConvention`</ph> must include the <ph id=\"ph3\">&lt;xref:System.Reflection.CallingConventions?displayProperty=fullName&gt;</ph> flag.","source":"If `optionalParameterTypes` specifies optional arguments, `callingConvention` must include the <xref:System.Reflection.CallingConventions?displayProperty=fullName> flag."}],"pos":[80712,81095],"yaml":true,"extradata":"MT"},{"content":"The MSIL instruction to be emitted onto the stream. Must be <xref href=\"System.Reflection.Emit.OpCodes.Calli\"></xref>.","nodes":[{"pos":[0,118],"content":"The MSIL instruction to be emitted onto the stream. Must be <xref href=\"System.Reflection.Emit.OpCodes.Calli\"></xref>.","nodes":[{"content":"The MSIL instruction to be emitted onto the stream.","pos":[0,51]},{"content":"Must be <ph id=\"ph1\">&lt;xref href=\"System.Reflection.Emit.OpCodes.Calli\"&gt;&lt;/xref&gt;</ph>.","pos":[52,118],"source":" Must be <xref href=\"System.Reflection.Emit.OpCodes.Calli\"></xref>."}]}],"pos":[81409,81528],"yaml":true},{"content":"The managed calling convention to be used.","nodes":[{"pos":[0,42],"content":"The managed calling convention to be used.","nodes":[{"content":"The managed calling convention to be used.","pos":[0,42]}]}],"pos":[81624,81667],"yaml":true},{"content":"The <xref href=\"System.Type\"></xref> of the result.","nodes":[{"pos":[0,51],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Type\"&gt;&lt;/xref&gt;</ph> of the result.","source":"The <xref href=\"System.Type\"></xref> of the result."}],"pos":[81731,81783],"yaml":true},{"content":"The types of the required arguments to the instruction.","nodes":[{"pos":[0,55],"content":"The types of the required arguments to the instruction.","nodes":[{"content":"The types of the required arguments to the instruction.","pos":[0,55]}]}],"pos":[81853,81909],"yaml":true},{"content":"The types of the optional arguments for `varargs` calls.","nodes":[{"pos":[0,56],"content":"The types of the optional arguments for <ph id=\"ph1\">`varargs`</ph> calls.","source":"The types of the optional arguments for `varargs` calls."}],"pos":[81987,82044],"yaml":true},{"content":"<code>optionalParameterTypes</code> is not `null`, but <code>callingConvention</code> does not include the <xref href=\"System.Reflection.CallingConventions.VarArgs\"></xref> flag.","nodes":[{"pos":[0,178],"content":"<ph id=\"ph1\">&lt;code&gt;optionalParameterTypes&lt;/code&gt;</ph> is not <ph id=\"ph2\">`null`</ph>, but <ph id=\"ph3\">&lt;code&gt;callingConvention&lt;/code&gt;</ph> does not include the <ph id=\"ph4\">&lt;xref href=\"System.Reflection.CallingConventions.VarArgs\"&gt;&lt;/xref&gt;</ph> flag.","source":"<code>optionalParameterTypes</code> is not `null`, but <code>callingConvention</code> does not include the <xref href=\"System.Reflection.CallingConventions.VarArgs\"></xref> flag."}],"pos":[82226,82405],"yaml":true},{"content":"Emits the Microsoft intermediate language (MSIL) to call <xref href=\"System.Console.WriteLine*\"></xref> with a string.","nodes":[{"pos":[0,118],"content":"Emits the Microsoft intermediate language (MSIL) to call <ph id=\"ph1\">&lt;xref href=\"System.Console.WriteLine*\"&gt;&lt;/xref&gt;</ph> with a string.","source":"Emits the Microsoft intermediate language (MSIL) to call <xref href=\"System.Console.WriteLine*\"></xref> with a string."}],"pos":[83665,83784],"yaml":true},{"content":"The string must have already been defined.","nodes":[{"pos":[0,42],"content":"The string must have already been defined.","nodes":[{"content":"The string must have already been defined.","pos":[0,42]}]}],"pos":[83795,83838],"yaml":true,"extradata":"MT"},{"content":"The string to be printed.","nodes":[{"pos":[0,25],"content":"The string to be printed.","nodes":[{"content":"The string to be printed.","pos":[0,25]}]}],"pos":[84709,84735],"yaml":true},{"content":"Emits the Microsoft intermediate language (MSIL) necessary to call <xref href=\"System.Console.WriteLine*\"></xref> with the given field.","nodes":[{"pos":[0,135],"content":"Emits the Microsoft intermediate language (MSIL) necessary to call <ph id=\"ph1\">&lt;xref href=\"System.Console.WriteLine*\"&gt;&lt;/xref&gt;</ph> with the given field.","source":"Emits the Microsoft intermediate language (MSIL) necessary to call <xref href=\"System.Console.WriteLine*\"></xref> with the given field."}],"pos":[86125,86261],"yaml":true},{"content":"The type of `fld` must match the parameter type of an overload of the <xref:System.Console.WriteLine%2A?displayProperty=fullName> method.","nodes":[{"pos":[0,137],"content":"The type of <ph id=\"ph1\">`fld`</ph> must match the parameter type of an overload of the <ph id=\"ph2\">&lt;xref:System.Console.WriteLine%2A?displayProperty=fullName&gt;</ph> method.","source":"The type of `fld` must match the parameter type of an overload of the <xref:System.Console.WriteLine%2A?displayProperty=fullName> method."}],"pos":[86272,86410],"yaml":true,"extradata":"MT"},{"content":"The field whose value is to be written to the console.","nodes":[{"pos":[0,54],"content":"The field whose value is to be written to the console.","nodes":[{"content":"The field whose value is to be written to the console.","pos":[0,54]}]}],"pos":[87346,87401],"yaml":true},{"content":"There is no overload of the <xref href=\"System.Console.WriteLine*\"></xref> method that accepts the type of the specified field.","nodes":[{"pos":[0,127],"content":"There is no overload of the <ph id=\"ph1\">&lt;xref href=\"System.Console.WriteLine*\"&gt;&lt;/xref&gt;</ph> method that accepts the type of the specified field.","source":"There is no overload of the <xref href=\"System.Console.WriteLine*\"></xref> method that accepts the type of the specified field."}],"pos":[87571,87699],"yaml":true},{"content":"<code>fld</code> is `null`.","nodes":[{"pos":[0,27],"content":"<ph id=\"ph1\">&lt;code&gt;fld&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>fld</code> is `null`."}],"pos":[87801,87829],"yaml":true},{"content":"The type of the field is <xref href=\"System.Reflection.Emit.TypeBuilder\"></xref> or <xref href=\"System.Reflection.Emit.EnumBuilder\"></xref>, which are not supported.","nodes":[{"pos":[0,165],"content":"The type of the field is <ph id=\"ph1\">&lt;xref href=\"System.Reflection.Emit.TypeBuilder\"&gt;&lt;/xref&gt;</ph> or <ph id=\"ph2\">&lt;xref href=\"System.Reflection.Emit.EnumBuilder\"&gt;&lt;/xref&gt;</ph>, which are not supported.","source":"The type of the field is <xref href=\"System.Reflection.Emit.TypeBuilder\"></xref> or <xref href=\"System.Reflection.Emit.EnumBuilder\"></xref>, which are not supported."}],"pos":[87931,88097],"yaml":true},{"content":"Emits the Microsoft intermediate language (MSIL) necessary to call <xref href=\"System.Console.WriteLine*\"></xref> with the given local variable.","nodes":[{"pos":[0,144],"content":"Emits the Microsoft intermediate language (MSIL) necessary to call <ph id=\"ph1\">&lt;xref href=\"System.Console.WriteLine*\"&gt;&lt;/xref&gt;</ph> with the given local variable.","source":"Emits the Microsoft intermediate language (MSIL) necessary to call <xref href=\"System.Console.WriteLine*\"></xref> with the given local variable."}],"pos":[89441,89586],"yaml":true},{"content":"The type of `localBuilder` must match the parameter type of an overload of the <xref:System.Console.WriteLine%2A?displayProperty=fullName> method.","nodes":[{"pos":[0,146],"content":"The type of <ph id=\"ph1\">`localBuilder`</ph> must match the parameter type of an overload of the <ph id=\"ph2\">&lt;xref:System.Console.WriteLine%2A?displayProperty=fullName&gt;</ph> method.","source":"The type of `localBuilder` must match the parameter type of an overload of the <xref:System.Console.WriteLine%2A?displayProperty=fullName> method."}],"pos":[89597,89744],"yaml":true,"extradata":"MT"},{"content":"The local variable whose value is to be written to the console.","nodes":[{"pos":[0,63],"content":"The local variable whose value is to be written to the console.","nodes":[{"content":"The local variable whose value is to be written to the console.","pos":[0,63]}]}],"pos":[90723,90787],"yaml":true},{"content":"The type of <code>localBuilder</code> is <xref href=\"System.Reflection.Emit.TypeBuilder\"></xref> or <xref href=\"System.Reflection.Emit.EnumBuilder\"></xref>, which are not supported.  \n  \n -or-  \n  \n There is no overload of <xref href=\"System.Console.WriteLine*\"></xref> that accepts the type of <code>localBuilder</code>.","nodes":[{"pos":[0,181],"content":"The type of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">localBuilder</ph><ept id=\"p1\">&lt;/code&gt;</ept> is <ph id=\"ph2\">&lt;xref href=\"System.Reflection.Emit.TypeBuilder\"&gt;&lt;/xref&gt;</ph> or <ph id=\"ph3\">&lt;xref href=\"System.Reflection.Emit.EnumBuilder\"&gt;&lt;/xref&gt;</ph>, which are not supported.","source":"The type of <code>localBuilder</code> is <xref href=\"System.Reflection.Emit.TypeBuilder\"></xref> or <xref href=\"System.Reflection.Emit.EnumBuilder\"></xref>, which are not supported."},{"pos":[188,192],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[199,321],"content":"There is no overload of <ph id=\"ph1\">&lt;xref href=\"System.Console.WriteLine*\"&gt;&lt;/xref&gt;</ph> that accepts the type of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">localBuilder</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"There is no overload of <xref href=\"System.Console.WriteLine*\"></xref> that accepts the type of <code>localBuilder</code>."}],"pos":[90957,91291],"yaml":true},{"content":"<code>localBuilder</code> is `null`.","nodes":[{"pos":[0,36],"content":"<ph id=\"ph1\">&lt;code&gt;localBuilder&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>localBuilder</code> is `null`."}],"pos":[91393,91430],"yaml":true},{"content":"Ends an exception block.","nodes":[{"pos":[0,24],"content":"Ends an exception block.","nodes":[{"content":"Ends an exception block.","pos":[0,24]}]}],"pos":[92651,92676],"yaml":true},{"content":"The end exception block occurs in an unexpected place in the code stream.","nodes":[{"pos":[0,73],"content":"The end exception block occurs in an unexpected place in the code stream.","nodes":[{"content":"The end exception block occurs in an unexpected place in the code stream.","pos":[0,73]}]}],"pos":[93678,93752],"yaml":true},{"content":"The Microsoft intermediate language (MSIL) being generated is not currently in an exception block.","nodes":[{"pos":[0,98],"content":"The Microsoft intermediate language (MSIL) being generated is not currently in an exception block.","nodes":[{"content":"The Microsoft intermediate language (MSIL) being generated is not currently in an exception block.","pos":[0,98]}]}],"pos":[93854,93953],"yaml":true},{"content":"Ends a lexical scope.","nodes":[{"pos":[0,21],"content":"Ends a lexical scope.","nodes":[{"content":"Ends a lexical scope.","pos":[0,21]}]}],"pos":[95120,95142],"yaml":true},{"content":"This method is used to emit symbolic information. It is used with <xref:System.Reflection.Emit.ILGenerator.BeginScope%2A>.  \n  \n If the current <xref:System.Reflection.Emit.ILGenerator> is associated with a <xref:System.Reflection.Emit.DynamicMethod> object, it does not support symbolic information.","nodes":[{"pos":[0,122],"content":"This method is used to emit symbolic information. It is used with <xref:System.Reflection.Emit.ILGenerator.BeginScope%2A>.","nodes":[{"content":"This method is used to emit symbolic information. It is used with <xref:System.Reflection.Emit.ILGenerator.BeginScope%2A>.","pos":[0,122],"nodes":[{"content":"This method is used to emit symbolic information.","pos":[0,49]},{"content":"It is used with <ph id=\"ph1\">&lt;xref:System.Reflection.Emit.ILGenerator.BeginScope%2A&gt;</ph>.","pos":[50,122],"source":" It is used with <xref:System.Reflection.Emit.ILGenerator.BeginScope%2A>."}]}]},{"pos":[129,300],"content":"If the current <xref:System.Reflection.Emit.ILGenerator> is associated with a <xref:System.Reflection.Emit.DynamicMethod> object, it does not support symbolic information.","nodes":[{"content":"If the current <ph id=\"ph1\">&lt;xref:System.Reflection.Emit.ILGenerator&gt;</ph> is associated with a <ph id=\"ph2\">&lt;xref:System.Reflection.Emit.DynamicMethod&gt;</ph> object, it does not support symbolic information.","pos":[0,171],"source":"If the current <xref:System.Reflection.Emit.ILGenerator> is associated with a <xref:System.Reflection.Emit.DynamicMethod> object, it does not support symbolic information."}]}],"pos":[95153,95458],"yaml":true,"extradata":"MT"},{"content":"This <xref href=\"System.Reflection.Emit.ILGenerator\"></xref> belongs to a <xref href=\"System.Reflection.Emit.DynamicMethod\"></xref>.","nodes":[{"pos":[0,132],"content":"This <ph id=\"ph1\">&lt;xref href=\"System.Reflection.Emit.ILGenerator\"&gt;&lt;/xref&gt;</ph> belongs to a <ph id=\"ph2\">&lt;xref href=\"System.Reflection.Emit.DynamicMethod\"&gt;&lt;/xref&gt;</ph>.","source":"This <xref href=\"System.Reflection.Emit.ILGenerator\"></xref> belongs to a <xref href=\"System.Reflection.Emit.DynamicMethod\"></xref>."}],"pos":[96260,96393],"yaml":true},{"content":"Gets the current offset, in bytes, in the Microsoft intermediate language (MSIL) stream that is being emitted by the <xref href=\"System.Reflection.Emit.ILGenerator\"></xref>.","nodes":[{"pos":[0,173],"content":"Gets the current offset, in bytes, in the Microsoft intermediate language (MSIL) stream that is being emitted by the <ph id=\"ph1\">&lt;xref href=\"System.Reflection.Emit.ILGenerator\"&gt;&lt;/xref&gt;</ph>.","source":"Gets the current offset, in bytes, in the Microsoft intermediate language (MSIL) stream that is being emitted by the <xref href=\"System.Reflection.Emit.ILGenerator\"></xref>."}],"pos":[97556,97730],"yaml":true},{"content":"This method is transparent, and can be called from partially trusted code.  \n  \n If the <xref:System.Reflection.Emit.ILGenerator.ILOffset%2A> property is accessed before any MSIL instructions have been emitted, it returns 0 (zero).  \n  \n When MSIL is generated for dynamic languages, this property can be used to map offsets in the MSIL stream to source code line numbers. The resulting information can be used to provide stack traces when exceptions are thrown.","nodes":[{"pos":[0,74],"content":"This method is transparent, and can be called from partially trusted code.","nodes":[{"content":"This method is transparent, and can be called from partially trusted code.","pos":[0,74]}]},{"pos":[81,231],"content":"If the <xref:System.Reflection.Emit.ILGenerator.ILOffset%2A> property is accessed before any MSIL instructions have been emitted, it returns 0 (zero).","nodes":[{"content":"If the <ph id=\"ph1\">&lt;xref:System.Reflection.Emit.ILGenerator.ILOffset%2A&gt;</ph> property is accessed before any MSIL instructions have been emitted, it returns 0 (zero).","pos":[0,150],"source":"If the <xref:System.Reflection.Emit.ILGenerator.ILOffset%2A> property is accessed before any MSIL instructions have been emitted, it returns 0 (zero)."}]},{"pos":[238,462],"content":"When MSIL is generated for dynamic languages, this property can be used to map offsets in the MSIL stream to source code line numbers. The resulting information can be used to provide stack traces when exceptions are thrown.","nodes":[{"content":"When MSIL is generated for dynamic languages, this property can be used to map offsets in the MSIL stream to source code line numbers. The resulting information can be used to provide stack traces when exceptions are thrown.","pos":[0,224],"nodes":[{"content":"When MSIL is generated for dynamic languages, this property can be used to map offsets in the MSIL stream to source code line numbers.","pos":[0,134]},{"content":"The resulting information can be used to provide stack traces when exceptions are thrown.","pos":[135,224]}]}]}],"pos":[97741,98210],"yaml":true,"extradata":"MT"},{"content":"The offset in the MSIL stream at which the next instruction will be emitted.","nodes":[{"pos":[0,76],"content":"The offset in the MSIL stream at which the next instruction will be emitted.","nodes":[{"content":"The offset in the MSIL stream at which the next instruction will be emitted.","pos":[0,76]}]}],"pos":[98326,98403],"yaml":true},{"content":"Marks the Microsoft intermediate language (MSIL) stream's current position with the given label.","nodes":[{"pos":[0,96],"content":"Marks the Microsoft intermediate language (MSIL) stream's current position with the given label.","nodes":[{"content":"Marks the Microsoft intermediate language (MSIL) stream's current position with the given label.","pos":[0,96]}]}],"pos":[99755,99852],"yaml":true},{"content":"A label cannot be defined more than once.","nodes":[{"pos":[0,41],"content":"A label cannot be defined more than once.","nodes":[{"content":"A label cannot be defined more than once.","pos":[0,41]}]}],"pos":[99863,99905],"yaml":true,"extradata":"MT"},{"content":"The label for which to set an index.","nodes":[{"pos":[0,36],"content":"The label for which to set an index.","nodes":[{"content":"The label for which to set an index.","pos":[0,36]}]}],"pos":[100779,100816],"yaml":true},{"content":"<code>loc</code> represents an invalid index into the label array.  \n  \n -or-  \n  \n An index for <code>loc</code> has already been defined.","nodes":[{"pos":[0,66],"content":"<ph id=\"ph1\">&lt;code&gt;loc&lt;/code&gt;</ph> represents an invalid index into the label array.","source":"<code>loc</code> represents an invalid index into the label array."},{"pos":[73,77],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[84,139],"content":"An index for <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">loc</ph><ept id=\"p1\">&lt;/code&gt;</ept> has already been defined.","source":"An index for <code>loc</code> has already been defined."}],"pos":[100982,101128],"yaml":true},{"content":"Marks a sequence point in the Microsoft intermediate language (MSIL) stream.","nodes":[{"pos":[0,76],"content":"Marks a sequence point in the Microsoft intermediate language (MSIL) stream.","nodes":[{"content":"Marks a sequence point in the Microsoft intermediate language (MSIL) stream.","pos":[0,76]}]}],"pos":[102774,102851],"yaml":true},{"content":"Line numbers are indexed from 1. Columns are indexed from 0.  \n  \n The symbolic information normally includes at least one MSIL offset for each source line. When the just-in-time (JIT) compiler is about to compile a method, it asks the profiling services for a list of MSIL offsets that should be preserved. These MSIL offsets are called *sequence points*.  \n  \n If the current <xref:System.Reflection.Emit.ILGenerator> is associated with a <xref:System.Reflection.Emit.DynamicMethod> object, it does not support symbolic information.","nodes":[{"pos":[0,60],"content":"Line numbers are indexed from 1. Columns are indexed from 0.","nodes":[{"content":"Line numbers are indexed from 1. Columns are indexed from 0.","pos":[0,60],"nodes":[{"content":"Line numbers are indexed from 1.","pos":[0,32]},{"content":"Columns are indexed from 0.","pos":[33,60]}]}]},{"pos":[67,356],"content":"The symbolic information normally includes at least one MSIL offset for each source line. When the just-in-time (JIT) compiler is about to compile a method, it asks the profiling services for a list of MSIL offsets that should be preserved. These MSIL offsets are called *sequence points*.","nodes":[{"content":"The symbolic information normally includes at least one MSIL offset for each source line.","pos":[0,89]},{"content":"When the just-in-time (JIT) compiler is about to compile a method, it asks the profiling services for a list of MSIL offsets that should be preserved.","pos":[90,240]},{"content":"These MSIL offsets are called <bpt id=\"p1\">*</bpt>sequence points<ept id=\"p1\">*</ept>.","pos":[241,289],"source":" These MSIL offsets are called *sequence points*."}]},{"pos":[363,534],"content":"If the current <xref:System.Reflection.Emit.ILGenerator> is associated with a <xref:System.Reflection.Emit.DynamicMethod> object, it does not support symbolic information.","nodes":[{"content":"If the current <ph id=\"ph1\">&lt;xref:System.Reflection.Emit.ILGenerator&gt;</ph> is associated with a <ph id=\"ph2\">&lt;xref:System.Reflection.Emit.DynamicMethod&gt;</ph> object, it does not support symbolic information.","pos":[0,171],"source":"If the current <xref:System.Reflection.Emit.ILGenerator> is associated with a <xref:System.Reflection.Emit.DynamicMethod> object, it does not support symbolic information."}]}],"pos":[102862,103403],"yaml":true,"extradata":"MT"},{"content":"The document for which the sequence point is being defined.","nodes":[{"pos":[0,59],"content":"The document for which the sequence point is being defined.","nodes":[{"content":"The document for which the sequence point is being defined.","pos":[0,59]}]}],"pos":[103708,103768],"yaml":true},{"content":"The line where the sequence point begins.","nodes":[{"pos":[0,41],"content":"The line where the sequence point begins.","nodes":[{"content":"The line where the sequence point begins.","pos":[0,41]}]}],"pos":[103832,103874],"yaml":true},{"content":"The column in the line where the sequence point begins.","nodes":[{"pos":[0,55],"content":"The column in the line where the sequence point begins.","nodes":[{"content":"The column in the line where the sequence point begins.","pos":[0,55]}]}],"pos":[103940,103996],"yaml":true},{"content":"The line where the sequence point ends.","nodes":[{"pos":[0,39],"content":"The line where the sequence point ends.","nodes":[{"content":"The line where the sequence point ends.","pos":[0,39]}]}],"pos":[104058,104098],"yaml":true},{"content":"The column in the line where the sequence point ends.","nodes":[{"pos":[0,53],"content":"The column in the line where the sequence point ends.","nodes":[{"content":"The column in the line where the sequence point ends.","pos":[0,53]}]}],"pos":[104162,104216],"yaml":true},{"content":"<code>startLine</code> or <code>endLine</code> is <= 0.","nodes":[{"pos":[0,55],"content":"<ph id=\"ph1\">&lt;code&gt;startLine&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;endLine&lt;/code&gt;</ph> is <ph id=\"ph3\">&lt;= 0.</ph>","source":"<code>startLine</code> or <code>endLine</code> is <= 0."}],"pos":[104410,104466],"yaml":true},{"content":"This <xref href=\"System.Reflection.Emit.ILGenerator\"></xref> belongs to a <xref href=\"System.Reflection.Emit.DynamicMethod\"></xref>.","nodes":[{"pos":[0,132],"content":"This <ph id=\"ph1\">&lt;xref href=\"System.Reflection.Emit.ILGenerator\"&gt;&lt;/xref&gt;</ph> belongs to a <ph id=\"ph2\">&lt;xref href=\"System.Reflection.Emit.DynamicMethod\"&gt;&lt;/xref&gt;</ph>.","source":"This <xref href=\"System.Reflection.Emit.ILGenerator\"></xref> belongs to a <xref href=\"System.Reflection.Emit.DynamicMethod\"></xref>."}],"pos":[104568,104701],"yaml":true},{"content":"Emits an instruction to throw an exception.","nodes":[{"pos":[0,43],"content":"Emits an instruction to throw an exception.","nodes":[{"content":"Emits an instruction to throw an exception.","pos":[0,43]}]}],"pos":[105819,105863],"yaml":true},{"content":"The class of the type of exception to throw.","nodes":[{"pos":[0,44],"content":"The class of the type of exception to throw.","nodes":[{"content":"The class of the type of exception to throw.","pos":[0,44]}]}],"pos":[106790,106835],"yaml":true},{"content":"<code>excType</code> is not the <xref href=\"System.Exception\"></xref> class or a derived class of <xref href=\"System.Exception\"></xref>.  \n  \n -or-  \n  \n The type does not have a default constructor.","nodes":[{"pos":[0,136],"content":"<ph id=\"ph1\">&lt;code&gt;excType&lt;/code&gt;</ph> is not the <ph id=\"ph2\">&lt;xref href=\"System.Exception\"&gt;&lt;/xref&gt;</ph> class or a derived class of <ph id=\"ph3\">&lt;xref href=\"System.Exception\"&gt;&lt;/xref&gt;</ph>.","source":"<code>excType</code> is not the <xref href=\"System.Exception\"></xref> class or a derived class of <xref href=\"System.Exception\"></xref>."},{"pos":[143,147],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[154,199],"content":"The type does not have a default constructor.","nodes":[{"content":"The type does not have a default constructor.","pos":[0,45]}]}],"pos":[107006,107216],"yaml":true},{"content":"<code>excType</code> is `null`.","nodes":[{"pos":[0,31],"content":"<ph id=\"ph1\">&lt;code&gt;excType&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>excType</code> is `null`."}],"pos":[107318,107350],"yaml":true},{"content":"Specifies the namespace to be used in evaluating locals and watches for the current active lexical scope.","nodes":[{"pos":[0,105],"content":"Specifies the namespace to be used in evaluating locals and watches for the current active lexical scope.","nodes":[{"content":"Specifies the namespace to be used in evaluating locals and watches for the current active lexical scope.","pos":[0,105]}]}],"pos":[108616,108722],"yaml":true},{"content":"If the current <xref:System.Reflection.Emit.ILGenerator> is associated with a <xref:System.Reflection.Emit.DynamicMethod> object, this method is not supported.","nodes":[{"pos":[0,159],"content":"If the current <xref:System.Reflection.Emit.ILGenerator> is associated with a <xref:System.Reflection.Emit.DynamicMethod> object, this method is not supported.","nodes":[{"content":"If the current <ph id=\"ph1\">&lt;xref:System.Reflection.Emit.ILGenerator&gt;</ph> is associated with a <ph id=\"ph2\">&lt;xref:System.Reflection.Emit.DynamicMethod&gt;</ph> object, this method is not supported.","pos":[0,159],"source":"If the current <xref:System.Reflection.Emit.ILGenerator> is associated with a <xref:System.Reflection.Emit.DynamicMethod> object, this method is not supported."}]}],"pos":[108733,108893],"yaml":true,"extradata":"MT"},{"content":"The namespace to be used in evaluating locals and watches for the current active lexical scope","nodes":[{"pos":[0,94],"content":"The namespace to be used in evaluating locals and watches for the current active lexical scope","nodes":[{"content":"The namespace to be used in evaluating locals and watches for the current active lexical scope","pos":[0,94]}]}],"pos":[109062,109157],"yaml":true},{"content":"Length of <code>usingNamespace</code> is zero.","nodes":[{"pos":[0,46],"content":"Length of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">usingNamespace</ph><ept id=\"p1\">&lt;/code&gt;</ept> is zero.","source":"Length of <code>usingNamespace</code> is zero."}],"pos":[109328,109375],"yaml":true},{"content":"<code>usingNamespace</code> is `null`.","nodes":[{"pos":[0,38],"content":"<ph id=\"ph1\">&lt;code&gt;usingNamespace&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>usingNamespace</code> is `null`."}],"pos":[109477,109516],"yaml":true},{"content":"This <xref href=\"System.Reflection.Emit.ILGenerator\"></xref> belongs to a <xref href=\"System.Reflection.Emit.DynamicMethod\"></xref>.","nodes":[{"pos":[0,132],"content":"This <ph id=\"ph1\">&lt;xref href=\"System.Reflection.Emit.ILGenerator\"&gt;&lt;/xref&gt;</ph> belongs to a <ph id=\"ph2\">&lt;xref href=\"System.Reflection.Emit.DynamicMethod\"&gt;&lt;/xref&gt;</ph>.","source":"This <xref href=\"System.Reflection.Emit.ILGenerator\"></xref> belongs to a <xref href=\"System.Reflection.Emit.DynamicMethod\"></xref>."}],"pos":[109618,109751],"yaml":true},{"content":"Maps a set of names to a corresponding set of dispatch identifiers.","nodes":[{"pos":[0,67],"content":"Maps a set of names to a corresponding set of dispatch identifiers.","nodes":[{"content":"Maps a set of names to a corresponding set of dispatch identifiers.","pos":[0,67]}]}],"pos":[111411,111479],"yaml":true},{"content":"This method is for accessing managed classes from unmanaged code, and should not be called from managed code. For more information about `IDispatch::GetIDsOfNames`, see the MSDN Library.","nodes":[{"pos":[0,186],"content":"This method is for accessing managed classes from unmanaged code, and should not be called from managed code. For more information about `IDispatch::GetIDsOfNames`, see the MSDN Library.","nodes":[{"content":"This method is for accessing managed classes from unmanaged code, and should not be called from managed code.","pos":[0,109]},{"content":"For more information about <ph id=\"ph1\">`IDispatch::GetIDsOfNames`</ph>, see the MSDN Library.","pos":[110,186],"source":" For more information about `IDispatch::GetIDsOfNames`, see the MSDN Library."}]}],"pos":[111490,111677],"yaml":true,"extradata":"MT"},{"content":"Reserved for future use. Must be IID_NULL.","nodes":[{"pos":[0,42],"content":"Reserved for future use. Must be IID_NULL.","nodes":[{"content":"Reserved for future use. Must be IID_NULL.","pos":[0,42],"nodes":[{"content":"Reserved for future use.","pos":[0,24]},{"content":"Must be IID_NULL.","pos":[25,42]}]}]}],"pos":[111882,111925],"yaml":true},{"content":"Passed-in array of names to be mapped.","nodes":[{"pos":[0,38],"content":"Passed-in array of names to be mapped.","nodes":[{"content":"Passed-in array of names to be mapped.","pos":[0,38]}]}],"pos":[111990,112029],"yaml":true},{"content":"Count of the names to be mapped.","nodes":[{"pos":[0,32],"content":"Count of the names to be mapped.","nodes":[{"content":"Count of the names to be mapped.","pos":[0,32]}]}],"pos":[112091,112124],"yaml":true},{"content":"The locale context in which to interpret the names.","nodes":[{"pos":[0,51],"content":"The locale context in which to interpret the names.","nodes":[{"content":"The locale context in which to interpret the names.","pos":[0,51]}]}],"pos":[112184,112236],"yaml":true},{"content":"Caller-allocated array that receives the IDs corresponding to the names.","nodes":[{"pos":[0,72],"content":"Caller-allocated array that receives the IDs corresponding to the names.","nodes":[{"content":"Caller-allocated array that receives the IDs corresponding to the names.","pos":[0,72]}]}],"pos":[112300,112373],"yaml":true},{"content":"The method is called late-bound using the COM <code>IDispatch</code> interface.","nodes":[{"pos":[0,79],"content":"The method is called late-bound using the COM <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">IDispatch</ph><ept id=\"p1\">&lt;/code&gt;</ept> interface.","source":"The method is called late-bound using the COM <code>IDispatch</code> interface."}],"pos":[112599,112679],"yaml":true},{"content":"Retrieves the type information for an object, which can then be used to get the type information for an interface.","nodes":[{"pos":[0,114],"content":"Retrieves the type information for an object, which can then be used to get the type information for an interface.","nodes":[{"content":"Retrieves the type information for an object, which can then be used to get the type information for an interface.","pos":[0,114]}]}],"pos":[114068,114183],"yaml":true},{"content":"This method is for accessing managed classes from unmanaged code, and should not be called from managed code. For more information about `IDispatch::GetTypeInfo`, see the MSDN Library.","nodes":[{"pos":[0,184],"content":"This method is for accessing managed classes from unmanaged code, and should not be called from managed code. For more information about `IDispatch::GetTypeInfo`, see the MSDN Library.","nodes":[{"content":"This method is for accessing managed classes from unmanaged code, and should not be called from managed code.","pos":[0,109]},{"content":"For more information about <ph id=\"ph1\">`IDispatch::GetTypeInfo`</ph>, see the MSDN Library.","pos":[110,184],"source":" For more information about `IDispatch::GetTypeInfo`, see the MSDN Library."}]}],"pos":[114194,114379],"yaml":true,"extradata":"MT"},{"content":"The type information to return.","nodes":[{"pos":[0,31],"content":"The type information to return.","nodes":[{"content":"The type information to return.","pos":[0,31]}]}],"pos":[114552,114584],"yaml":true},{"content":"The locale identifier for the type information.","nodes":[{"pos":[0,47],"content":"The locale identifier for the type information.","nodes":[{"content":"The locale identifier for the type information.","pos":[0,47]}]}],"pos":[114644,114692],"yaml":true},{"content":"Receives a pointer to the requested type information object.","nodes":[{"pos":[0,60],"content":"Receives a pointer to the requested type information object.","nodes":[{"content":"Receives a pointer to the requested type information object.","pos":[0,60]}]}],"pos":[114755,114816],"yaml":true},{"content":"The method is called late-bound using the COM <code>IDispatch</code> interface.","nodes":[{"pos":[0,79],"content":"The method is called late-bound using the COM <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">IDispatch</ph><ept id=\"p1\">&lt;/code&gt;</ept> interface.","source":"The method is called late-bound using the COM <code>IDispatch</code> interface."}],"pos":[115040,115120],"yaml":true},{"content":"Retrieves the number of type information interfaces that an object provides (either 0 or 1).","nodes":[{"pos":[0,92],"content":"Retrieves the number of type information interfaces that an object provides (either 0 or 1).","nodes":[{"content":"Retrieves the number of type information interfaces that an object provides (either 0 or 1).","pos":[0,92]}]}],"pos":[116410,116503],"yaml":true},{"content":"This method is for accessing managed classes from unmanaged code, and should not be called from managed code. For more information about `IDispatch::GetTypeInfoCount`, see the MSDN Library.","nodes":[{"pos":[0,189],"content":"This method is for accessing managed classes from unmanaged code, and should not be called from managed code. For more information about `IDispatch::GetTypeInfoCount`, see the MSDN Library.","nodes":[{"content":"This method is for accessing managed classes from unmanaged code, and should not be called from managed code.","pos":[0,109]},{"content":"For more information about <ph id=\"ph1\">`IDispatch::GetTypeInfoCount`</ph>, see the MSDN Library.","pos":[110,189],"source":" For more information about `IDispatch::GetTypeInfoCount`, see the MSDN Library."}]}],"pos":[116514,116704],"yaml":true,"extradata":"MT"},{"content":"Points to a location that receives the number of type information interfaces provided by the object.","nodes":[{"pos":[0,100],"content":"Points to a location that receives the number of type information interfaces provided by the object.","nodes":[{"content":"Points to a location that receives the number of type information interfaces provided by the object.","pos":[0,100]}]}],"pos":[116861,116962],"yaml":true},{"content":"The method is called late-bound using the COM <code>IDispatch</code> interface.","nodes":[{"pos":[0,79],"content":"The method is called late-bound using the COM <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">IDispatch</ph><ept id=\"p1\">&lt;/code&gt;</ept> interface.","source":"The method is called late-bound using the COM <code>IDispatch</code> interface."}],"pos":[117191,117271],"yaml":true},{"content":"Provides access to properties and methods exposed by an object.","nodes":[{"pos":[0,63],"content":"Provides access to properties and methods exposed by an object.","nodes":[{"content":"Provides access to properties and methods exposed by an object.","pos":[0,63]}]}],"pos":[118945,119009],"yaml":true},{"content":"This method is for accessing managed classes from unmanaged code, and should not be called from managed code. For more information about `IDispatch::Invoke`, see the MSDN Library.","nodes":[{"pos":[0,179],"content":"This method is for accessing managed classes from unmanaged code, and should not be called from managed code. For more information about `IDispatch::Invoke`, see the MSDN Library.","nodes":[{"content":"This method is for accessing managed classes from unmanaged code, and should not be called from managed code.","pos":[0,109]},{"content":"For more information about <ph id=\"ph1\">`IDispatch::Invoke`</ph>, see the MSDN Library.","pos":[110,179],"source":" For more information about `IDispatch::Invoke`, see the MSDN Library."}]}],"pos":[119020,119200],"yaml":true,"extradata":"MT"},{"content":"Identifies the member.","nodes":[{"pos":[0,22],"content":"Identifies the member.","nodes":[{"content":"Identifies the member.","pos":[0,22]}]}],"pos":[119468,119491],"yaml":true},{"content":"Reserved for future use. Must be IID_NULL.","nodes":[{"pos":[0,42],"content":"Reserved for future use. Must be IID_NULL.","nodes":[{"content":"Reserved for future use. Must be IID_NULL.","pos":[0,42],"nodes":[{"content":"Reserved for future use.","pos":[0,24]},{"content":"Must be IID_NULL.","pos":[25,42]}]}]}],"pos":[119549,119592],"yaml":true},{"content":"The locale context in which to interpret arguments.","nodes":[{"pos":[0,51],"content":"The locale context in which to interpret arguments.","nodes":[{"content":"The locale context in which to interpret arguments.","pos":[0,51]}]}],"pos":[119652,119704],"yaml":true},{"content":"Flags describing the context of the call.","nodes":[{"pos":[0,41],"content":"Flags describing the context of the call.","nodes":[{"content":"Flags describing the context of the call.","pos":[0,41]}]}],"pos":[119765,119807],"yaml":true},{"content":"Pointer to a structure containing an array of arguments, an array of argument DISPIDs for named arguments, and counts for the number of elements in the arrays.","nodes":[{"pos":[0,159],"content":"Pointer to a structure containing an array of arguments, an array of argument DISPIDs for named arguments, and counts for the number of elements in the arrays.","nodes":[{"content":"Pointer to a structure containing an array of arguments, an array of argument DISPIDs for named arguments, and counts for the number of elements in the arrays.","pos":[0,159]}]}],"pos":[119874,120034],"yaml":true},{"content":"Pointer to the location where the result is to be stored.","nodes":[{"pos":[0,57],"content":"Pointer to the location where the result is to be stored.","nodes":[{"content":"Pointer to the location where the result is to be stored.","pos":[0,57]}]}],"pos":[120100,120158],"yaml":true},{"content":"Pointer to a structure that contains exception information.","nodes":[{"pos":[0,59],"content":"Pointer to a structure that contains exception information.","nodes":[{"content":"Pointer to a structure that contains exception information.","pos":[0,59]}]}],"pos":[120224,120284],"yaml":true},{"content":"The index of the first argument that has an error.","nodes":[{"pos":[0,50],"content":"The index of the first argument that has an error.","nodes":[{"content":"The index of the first argument that has an error.","pos":[0,50]}]}],"pos":[120348,120399],"yaml":true},{"content":"The method is called late-bound using the COM <code>IDispatch</code> interface.","nodes":[{"pos":[0,79],"content":"The method is called late-bound using the COM <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">IDispatch</ph><ept id=\"p1\">&lt;/code&gt;</ept> interface.","source":"The method is called late-bound using the COM <code>IDispatch</code> interface."}],"pos":[120618,120698],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Reflection.Emit.ILGenerator\n  commentId: T:System.Reflection.Emit.ILGenerator\n  id: ILGenerator\n  children:\n  - System.Reflection.Emit.ILGenerator.BeginCatchBlock(System.Type)\n  - System.Reflection.Emit.ILGenerator.BeginExceptFilterBlock\n  - System.Reflection.Emit.ILGenerator.BeginExceptionBlock\n  - System.Reflection.Emit.ILGenerator.BeginFaultBlock\n  - System.Reflection.Emit.ILGenerator.BeginFinallyBlock\n  - System.Reflection.Emit.ILGenerator.BeginScope\n  - System.Reflection.Emit.ILGenerator.DeclareLocal(System.Type)\n  - System.Reflection.Emit.ILGenerator.DeclareLocal(System.Type,System.Boolean)\n  - System.Reflection.Emit.ILGenerator.DefineLabel\n  - System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Type)\n  - System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.String)\n  - System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Single)\n  - System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.SByte)\n  - System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.FieldInfo)\n  - System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.SignatureHelper)\n  - System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.LocalBuilder)\n  - System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.Label[])\n  - System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.MethodInfo)\n  - System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.ConstructorInfo)\n  - System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Int64)\n  - System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Int32)\n  - System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Int16)\n  - System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Double)\n  - System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Byte)\n  - System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)\n  - System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.Label)\n  - System.Reflection.Emit.ILGenerator.EmitCall(System.Reflection.Emit.OpCode,System.Reflection.MethodInfo,System.Type[])\n  - System.Reflection.Emit.ILGenerator.EmitCalli(System.Reflection.Emit.OpCode,System.Runtime.InteropServices.CallingConvention,System.Type,System.Type[])\n  - System.Reflection.Emit.ILGenerator.EmitCalli(System.Reflection.Emit.OpCode,System.Reflection.CallingConventions,System.Type,System.Type[],System.Type[])\n  - System.Reflection.Emit.ILGenerator.EmitWriteLine(System.String)\n  - System.Reflection.Emit.ILGenerator.EmitWriteLine(System.Reflection.FieldInfo)\n  - System.Reflection.Emit.ILGenerator.EmitWriteLine(System.Reflection.Emit.LocalBuilder)\n  - System.Reflection.Emit.ILGenerator.EndExceptionBlock\n  - System.Reflection.Emit.ILGenerator.EndScope\n  - System.Reflection.Emit.ILGenerator.ILOffset\n  - System.Reflection.Emit.ILGenerator.MarkLabel(System.Reflection.Emit.Label)\n  - System.Reflection.Emit.ILGenerator.MarkSequencePoint(System.Diagnostics.SymbolStore.ISymbolDocumentWriter,System.Int32,System.Int32,System.Int32,System.Int32)\n  - System.Reflection.Emit.ILGenerator.ThrowException(System.Type)\n  - System.Reflection.Emit.ILGenerator.UsingNamespace(System.String)\n  - System.Reflection.Emit.ILGenerator.System#Runtime#InteropServices#_ILGenerator#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)\n  - System.Reflection.Emit.ILGenerator.System#Runtime#InteropServices#_ILGenerator#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)\n  - System.Reflection.Emit.ILGenerator.System#Runtime#InteropServices#_ILGenerator#GetTypeInfoCount(System.UInt32@)\n  - System.Reflection.Emit.ILGenerator.System#Runtime#InteropServices#_ILGenerator#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)\n  langs:\n  - csharp\n  name: ILGenerator\n  nameWithType: ILGenerator\n  fullName: System.Reflection.Emit.ILGenerator\n  type: Class\n  assemblies:\n  - System.Reflection.Emit.ILGeneration\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Generates Microsoft intermediate language (MSIL) instructions.\n  remarks: \"<xref:System.Reflection.Emit.ILGenerator> is used to generate method bodies for methods and constructors in dynamic assemblies (represented by the <xref:System.Reflection.Emit.MethodBuilder> and <xref:System.Reflection.Emit.ConstructorBuilder> classes) and for standalone dynamic methods (represented by the <xref:System.Reflection.Emit.DynamicMethod> class). To obtain an <xref:System.Reflection.Emit.ILGenerator>, use the <xref:System.Reflection.Emit.ConstructorBuilder.GetILGenerator%2A?displayProperty=fullName>, <xref:System.Reflection.Emit.DynamicMethod.GetILGenerator%2A?displayProperty=fullName>, and <xref:System.Reflection.Emit.MethodBuilder.GetILGenerator%2A?displayProperty=fullName> methods.  \\n  \\n MSIL is used as input to a just-in-time (JIT) compiler.\"\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ClassInterface(System.Runtime.InteropServices.ClassInterfaceType.None)]\n\n      [System.Runtime.InteropServices.ComVisible(true)]\n\n      public class ILGenerator : System.Runtime.InteropServices._ILGenerator\n  inheritance:\n  - System.Object\n  implements:\n  - System.Runtime.InteropServices._ILGenerator\n  inheritedMembers:\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.ToString\n  attributes:\n  - type: System.Runtime.InteropServices.ClassInterfaceAttribute\n  - type: System.Runtime.InteropServices.ComVisibleAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/ILGenerator.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.ILGenerator.BeginCatchBlock(System.Type)\n  commentId: M:System.Reflection.Emit.ILGenerator.BeginCatchBlock(System.Type)\n  id: BeginCatchBlock(System.Type)\n  parent: System.Reflection.Emit.ILGenerator\n  langs:\n  - csharp\n  name: BeginCatchBlock(Type)\n  nameWithType: ILGenerator.BeginCatchBlock(Type)\n  fullName: ILGenerator.BeginCatchBlock(Type)\n  type: Method\n  assemblies:\n  - System.Reflection.Emit.ILGeneration\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Begins a catch block.\n  remarks: \"Emits a branch instruction to the end of the current exception block.  \\n  \\n> [!NOTE]\\n>  If the filter exception block returns the `constant exception_execute_handler` (see the documentation for the Common Language Infrastructure Instruction Set), the argument to the `BeginCatchBlock` is not checked.\"\n  example:\n  - \"The code sample below demonstrates the contextual usage of the `BeginCatchBlock` method.  \\n  \\n [!code-cpp[System.Reflection.Emit.ILGenerator.ThrowException Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Reflection.Emit.ILGenerator.ThrowException Example/CPP/source.cpp#1)]\\n [!code-csharp[System.Reflection.Emit.ILGenerator.ThrowException Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Reflection.Emit.ILGenerator.ThrowException Example/CS/source.cs#1)]\\n [!code-vb[System.Reflection.Emit.ILGenerator.ThrowException Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Reflection.Emit.ILGenerator.ThrowException Example/VB/source.vb#1)]\"\n  syntax:\n    content: public virtual void BeginCatchBlock (Type exceptionType);\n    parameters:\n    - id: exceptionType\n      type: System.Type\n      description: The <xref href=\"System.Type\"></xref> object that represents the exception.\n  overload: System.Reflection.Emit.ILGenerator.BeginCatchBlock*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The catch block is within a filtered exception.\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>exceptionType</code> is `null`, and the exception filter block has not returned a value that indicates that finally blocks should be run until this catch block is located.\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: The Microsoft intermediate language (MSIL) being generated is not currently in an exception block.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/ILGenerator.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.ILGenerator.BeginExceptFilterBlock\n  commentId: M:System.Reflection.Emit.ILGenerator.BeginExceptFilterBlock\n  id: BeginExceptFilterBlock\n  parent: System.Reflection.Emit.ILGenerator\n  langs:\n  - csharp\n  name: BeginExceptFilterBlock()\n  nameWithType: ILGenerator.BeginExceptFilterBlock()\n  fullName: ILGenerator.BeginExceptFilterBlock()\n  type: Method\n  assemblies:\n  - System.Reflection.Emit.ILGeneration\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Begins an exception block for a filtered exception.\n  remarks: \"Emits a branch instruction to the end of the current exception block.  \\n  \\n If the current <xref:System.Reflection.Emit.ILGenerator> is associated with a <xref:System.Reflection.Emit.DynamicMethod> object, emitting filtered exception blocks is not supported. <xref:System.Reflection.Emit.DynamicILInfo> can be used to construct a dynamic method that uses filtered exception blocks.\"\n  syntax:\n    content: public virtual void BeginExceptFilterBlock ();\n    parameters: []\n  overload: System.Reflection.Emit.ILGenerator.BeginExceptFilterBlock*\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: \"The Microsoft intermediate language (MSIL) being generated is not currently in an exception block.  \\n  \\n -or-  \\n  \\n This <xref href=\\\"System.Reflection.Emit.ILGenerator\\\"></xref> belongs to a <xref href=\\\"System.Reflection.Emit.DynamicMethod\\\"></xref>.\"\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/ILGenerator.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.ILGenerator.BeginExceptionBlock\n  commentId: M:System.Reflection.Emit.ILGenerator.BeginExceptionBlock\n  id: BeginExceptionBlock\n  parent: System.Reflection.Emit.ILGenerator\n  langs:\n  - csharp\n  name: BeginExceptionBlock()\n  nameWithType: ILGenerator.BeginExceptionBlock()\n  fullName: ILGenerator.BeginExceptionBlock()\n  type: Method\n  assemblies:\n  - System.Reflection.Emit.ILGeneration\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Begins an exception block for a non-filtered exception.\n  remarks: Creating an exception block records some information, but does not actually emit any Microsoft intermediate language (MSIL) onto the stream.\n  example:\n  - \"The code sample below demonstrates the contextual usage of the `BeginExceptionBlock` method.  \\n  \\n [!code-cpp[System.Reflection.Emit.ILGenerator.ThrowException Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Reflection.Emit.ILGenerator.ThrowException Example/CPP/source.cpp#1)]\\n [!code-csharp[System.Reflection.Emit.ILGenerator.ThrowException Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Reflection.Emit.ILGenerator.ThrowException Example/CS/source.cs#1)]\\n [!code-vb[System.Reflection.Emit.ILGenerator.ThrowException Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Reflection.Emit.ILGenerator.ThrowException Example/VB/source.vb#1)]\"\n  syntax:\n    content: public virtual System.Reflection.Emit.Label BeginExceptionBlock ();\n    parameters: []\n    return:\n      type: System.Reflection.Emit.Label\n      description: The label for the end of the block. This will leave you in the correct place to execute finally blocks or to finish the try.\n  overload: System.Reflection.Emit.ILGenerator.BeginExceptionBlock*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/ILGenerator.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.ILGenerator.BeginFaultBlock\n  commentId: M:System.Reflection.Emit.ILGenerator.BeginFaultBlock\n  id: BeginFaultBlock\n  parent: System.Reflection.Emit.ILGenerator\n  langs:\n  - csharp\n  name: BeginFaultBlock()\n  nameWithType: ILGenerator.BeginFaultBlock()\n  fullName: ILGenerator.BeginFaultBlock()\n  type: Method\n  assemblies:\n  - System.Reflection.Emit.ILGeneration\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Begins an exception fault block in the Microsoft intermediate language (MSIL) stream.\n  remarks: If the current <xref:System.Reflection.Emit.ILGenerator> is associated with a <xref:System.Reflection.Emit.DynamicMethod> object, emitting exception fault blocks is not supported. <xref:System.Reflection.Emit.DynamicILInfo> can be used to construct a dynamic method that uses exception fault blocks.\n  example:\n  - \"The following code sample illustrates the use of `BeginFaultBlock`.  \\n  \\n [!code-cpp[ILGenerator_BeginFaultBlock#1](~/samples/snippets/cpp/VS_Snippets_CLR/ILGenerator_BeginFaultBlock/CPP/ilgenerator_beginfaultblock.cpp#1)]\\n [!code-csharp[ILGenerator_BeginFaultBlock#1](~/samples/snippets/csharp/VS_Snippets_CLR/ILGenerator_BeginFaultBlock/CS/ilgenerator_beginfaultblock.cs#1)]\\n [!code-vb[ILGenerator_BeginFaultBlock#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/ILGenerator_BeginFaultBlock/VB/ilgenerator_beginfaultblock.vb#1)]\"\n  syntax:\n    content: public virtual void BeginFaultBlock ();\n    parameters: []\n  overload: System.Reflection.Emit.ILGenerator.BeginFaultBlock*\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: \"The MSIL being generated is not currently in an exception block.  \\n  \\n -or-  \\n  \\n This <xref href=\\\"System.Reflection.Emit.ILGenerator\\\"></xref> belongs to a <xref href=\\\"System.Reflection.Emit.DynamicMethod\\\"></xref>.\"\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/ILGenerator.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.ILGenerator.BeginFinallyBlock\n  commentId: M:System.Reflection.Emit.ILGenerator.BeginFinallyBlock\n  id: BeginFinallyBlock\n  parent: System.Reflection.Emit.ILGenerator\n  langs:\n  - csharp\n  name: BeginFinallyBlock()\n  nameWithType: ILGenerator.BeginFinallyBlock()\n  fullName: ILGenerator.BeginFinallyBlock()\n  type: Method\n  assemblies:\n  - System.Reflection.Emit.ILGeneration\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Begins a finally block in the Microsoft intermediate language (MSIL) instruction stream.\n  remarks: ''\n  example:\n  - \"The following code sample illustrates the use of `BeginFinallyBlock`.  \\n  \\n [!code-cpp[ILGenerator_BeginFinallyBlock_2#2](~/samples/snippets/cpp/VS_Snippets_CLR/ILGenerator_BeginFinallyBlock_2/CPP/ILGenerator_BeginFinallyBlock_2.cpp#2)]\\n [!code-csharp[ILGenerator_BeginFinallyBlock_2#2](~/samples/snippets/csharp/VS_Snippets_CLR/ILGenerator_BeginFinallyBlock_2/CS/ilgenerator_beginfinallyblock_2.cs#2)]\\n [!code-vb[ILGenerator_BeginFinallyBlock_2#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/ILGenerator_BeginFinallyBlock_2/VB/ilgenerator_beginfinallyblock_2.vb#2)]\"\n  syntax:\n    content: public virtual void BeginFinallyBlock ();\n    parameters: []\n  overload: System.Reflection.Emit.ILGenerator.BeginFinallyBlock*\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: The MSIL being generated is not currently in an exception block.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/ILGenerator.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.ILGenerator.BeginScope\n  commentId: M:System.Reflection.Emit.ILGenerator.BeginScope\n  id: BeginScope\n  parent: System.Reflection.Emit.ILGenerator\n  langs:\n  - csharp\n  name: BeginScope()\n  nameWithType: ILGenerator.BeginScope()\n  fullName: ILGenerator.BeginScope()\n  type: Method\n  assemblies:\n  - System.Reflection.Emit.ILGeneration\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Begins a lexical scope.\n  remarks: \"This method is used to emit symbolic information. Local variables declared after <xref:System.Reflection.Emit.ILGenerator.BeginScope%2A> are scoped until the corresponding <xref:System.Reflection.Emit.ILGenerator.EndScope%2A> is called.  \\n  \\n If the current <xref:System.Reflection.Emit.ILGenerator> is associated with a <xref:System.Reflection.Emit.DynamicMethod> object, it does not support symbolic information.\"\n  example:\n  - \"The following code sample illustrates the use of `BeginScope` and `EndScope`.  \\n  \\n [!code-cpp[ILGenerator_Begin_EndScope#2](~/samples/snippets/cpp/VS_Snippets_CLR/ILGenerator_Begin_EndScope/CPP/ilgenerator_begin_endscope.cpp#2)]\\n [!code-csharp[ILGenerator_Begin_EndScope#2](~/samples/snippets/csharp/VS_Snippets_CLR/ILGenerator_Begin_EndScope/CS/ilgenerator_begin_endscope.cs#2)]\\n [!code-vb[ILGenerator_Begin_EndScope#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/ILGenerator_Begin_EndScope/VB/ilgenerator_begin_endscope.vb#2)]\"\n  syntax:\n    content: public virtual void BeginScope ();\n    parameters: []\n  overload: System.Reflection.Emit.ILGenerator.BeginScope*\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: This <xref href=\"System.Reflection.Emit.ILGenerator\"></xref> belongs to a <xref href=\"System.Reflection.Emit.DynamicMethod\"></xref>.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/ILGenerator.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.ILGenerator.DeclareLocal(System.Type)\n  commentId: M:System.Reflection.Emit.ILGenerator.DeclareLocal(System.Type)\n  id: DeclareLocal(System.Type)\n  parent: System.Reflection.Emit.ILGenerator\n  langs:\n  - csharp\n  name: DeclareLocal(Type)\n  nameWithType: ILGenerator.DeclareLocal(Type)\n  fullName: ILGenerator.DeclareLocal(Type)\n  type: Method\n  assemblies:\n  - System.Reflection.Emit.ILGeneration\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Declares a local variable of the specified type.\n  remarks: \"The local variable is created in the current lexical scope; for example, if code is being emitted in a `for` loop (`For` loop in Visual Basic), the scope of the variable is the loop.  \\n  \\n A local variable created with this overload is not pinned. To create a pinned variable for use with unmanaged pointers, use the <xref:System.Reflection.Emit.ILGenerator.DeclareLocal%28System.Type%2CSystem.Boolean%29> method overload.\"\n  example:\n  - \"The following code example demonstrates the use of the `DeclareLocal` method. This code is part of a larger code example for the <xref:System.Reflection.Emit.LocalBuilder> class.  \\n  \\n [!code-cpp[LocalBuilder_Sample_SetLocalSymInfo#2](~/samples/snippets/cpp/VS_Snippets_CLR/LocalBuilder_Sample_SetLocalSymInfo/CPP/localbuilder_sample_4.cpp#2)]\\n [!code-csharp[LocalBuilder_Sample_SetLocalSymInfo#2](~/samples/snippets/csharp/VS_Snippets_CLR/LocalBuilder_Sample_SetLocalSymInfo/CS/localbuilder_sample_4.cs#2)]\\n [!code-vb[LocalBuilder_Sample_SetLocalSymInfo#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/LocalBuilder_Sample_SetLocalSymInfo/VB/localbuilder_sample_4.vb#2)]\"\n  syntax:\n    content: public virtual System.Reflection.Emit.LocalBuilder DeclareLocal (Type localType);\n    parameters:\n    - id: localType\n      type: System.Type\n      description: A <xref href=\"System.Type\"></xref> object that represents the type of the local variable.\n    return:\n      type: System.Reflection.Emit.LocalBuilder\n      description: The declared local variable.\n  overload: System.Reflection.Emit.ILGenerator.DeclareLocal*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>localType</code> is `null`.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The containing type has been created by the <xref href=\"System.Reflection.Emit.TypeBuilder.CreateType\"></xref> method.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/ILGenerator.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.ILGenerator.DeclareLocal(System.Type,System.Boolean)\n  commentId: M:System.Reflection.Emit.ILGenerator.DeclareLocal(System.Type,System.Boolean)\n  id: DeclareLocal(System.Type,System.Boolean)\n  parent: System.Reflection.Emit.ILGenerator\n  langs:\n  - csharp\n  name: DeclareLocal(Type, Boolean)\n  nameWithType: ILGenerator.DeclareLocal(Type, Boolean)\n  fullName: ILGenerator.DeclareLocal(Type, Boolean)\n  type: Method\n  assemblies:\n  - System.Reflection.Emit.ILGeneration\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Declares a local variable of the specified type, optionally pinning the object referred to by the variable.\n  remarks: \"The local variable is created in the current lexical scope; for example, if code is being emitted in a `for` loop (`For` loop in Visual Basic), the scope of the variable is the loop.  \\n  \\n In unsafe code, an object must be pinned before it can be referred to by an unmanaged pointer. While the referenced object is pinned, it cannot be moved by garbage collection.\"\n  syntax:\n    content: public virtual System.Reflection.Emit.LocalBuilder DeclareLocal (Type localType, bool pinned);\n    parameters:\n    - id: localType\n      type: System.Type\n      description: A <xref href=\"System.Type\"></xref> object that represents the type of the local variable.\n    - id: pinned\n      type: System.Boolean\n      description: '`true` to pin the object in memory; otherwise, `false`.'\n    return:\n      type: System.Reflection.Emit.LocalBuilder\n      description: A <xref href=\"System.Reflection.Emit.LocalBuilder\"></xref> object that represents the local variable.\n  overload: System.Reflection.Emit.ILGenerator.DeclareLocal*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>localType</code> is `null`.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"The containing type has been created by the <xref href=\\\"System.Reflection.Emit.TypeBuilder.CreateType\\\"></xref> method.  \\n  \\n -or-  \\n  \\n The method body of the enclosing method has been created by the <xref href=\\\"System.Reflection.Emit.MethodBuilder.CreateMethodBody(System.Byte[],System.Int32)\\\"></xref> method.\"\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: The method with which this <xref href=\"System.Reflection.Emit.ILGenerator\"></xref> is associated is not represented by a <xref href=\"System.Reflection.Emit.MethodBuilder\"></xref>.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/ILGenerator.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.ILGenerator.DefineLabel\n  commentId: M:System.Reflection.Emit.ILGenerator.DefineLabel\n  id: DefineLabel\n  parent: System.Reflection.Emit.ILGenerator\n  langs:\n  - csharp\n  name: DefineLabel()\n  nameWithType: ILGenerator.DefineLabel()\n  fullName: ILGenerator.DefineLabel()\n  type: Method\n  assemblies:\n  - System.Reflection.Emit.ILGeneration\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Declares a new label.\n  remarks: \"To set the position of the label within the stream, you must call <xref:System.Reflection.Emit.ILGenerator.MarkLabel%2A>.  \\n  \\n This is just a token and does not yet represent any particular location within the stream.\"\n  example:\n  - \"The code sample below demonstrates the contextual usage of the `DefineLabel` method.  \\n  \\n [!code-cpp[System.Reflection.Emit.Label Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Reflection.Emit.Label Example/CPP/source.cpp#1)]\\n [!code-csharp[System.Reflection.Emit.Label Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Reflection.Emit.Label Example/CS/source.cs#1)]\\n [!code-vb[System.Reflection.Emit.Label Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Reflection.Emit.Label Example/VB/source.vb#1)]\"\n  syntax:\n    content: public virtual System.Reflection.Emit.Label DefineLabel ();\n    parameters: []\n    return:\n      type: System.Reflection.Emit.Label\n      description: Returns a new label that can be used as a token for branching.\n  overload: System.Reflection.Emit.ILGenerator.DefineLabel*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/ILGenerator.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Type)\n  commentId: M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Type)\n  id: Emit(System.Reflection.Emit.OpCode,System.Type)\n  parent: System.Reflection.Emit.ILGenerator\n  langs:\n  - csharp\n  name: Emit(OpCode, Type)\n  nameWithType: ILGenerator.Emit(OpCode, Type)\n  fullName: ILGenerator.Emit(OpCode, Type)\n  type: Method\n  assemblies:\n  - System.Reflection.Emit.ILGeneration\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Puts the specified instruction onto the Microsoft intermediate language (MSIL) stream followed by the metadata token for the given type.\n  remarks: The instruction values are defined in the `OpCodes` enumeration. The location of `cls` is recorded so that the token can be patched if necessary when persisting the module to a portable executable (PE) file.\n  syntax:\n    content: public virtual void Emit (System.Reflection.Emit.OpCode opcode, Type cls);\n    parameters:\n    - id: opcode\n      type: System.Reflection.Emit.OpCode\n      description: The MSIL instruction to be put onto the stream.\n    - id: cls\n      type: System.Type\n      description: A `Type`.\n  overload: System.Reflection.Emit.ILGenerator.Emit*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>cls</code> is `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/ILGenerator.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.String)\n  commentId: M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.String)\n  id: Emit(System.Reflection.Emit.OpCode,System.String)\n  parent: System.Reflection.Emit.ILGenerator\n  langs:\n  - csharp\n  name: Emit(OpCode, String)\n  nameWithType: ILGenerator.Emit(OpCode, String)\n  fullName: ILGenerator.Emit(OpCode, String)\n  type: Method\n  assemblies:\n  - System.Reflection.Emit.ILGeneration\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Puts the specified instruction onto the Microsoft intermediate language (MSIL) stream followed by the metadata token for the given string.\n  remarks: The instruction values are defined in the `OpCodes` enumeration. The location of `str` is recorded for future fixups if the module is persisted to a portable executable (PE) file.\n  syntax:\n    content: public virtual void Emit (System.Reflection.Emit.OpCode opcode, string str);\n    parameters:\n    - id: opcode\n      type: System.Reflection.Emit.OpCode\n      description: The MSIL instruction to be emitted onto the stream.\n    - id: str\n      type: System.String\n      description: The `String` to be emitted.\n  overload: System.Reflection.Emit.ILGenerator.Emit*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/ILGenerator.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Single)\n  commentId: M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Single)\n  id: Emit(System.Reflection.Emit.OpCode,System.Single)\n  parent: System.Reflection.Emit.ILGenerator\n  langs:\n  - csharp\n  name: Emit(OpCode, Single)\n  nameWithType: ILGenerator.Emit(OpCode, Single)\n  fullName: ILGenerator.Emit(OpCode, Single)\n  type: Method\n  assemblies:\n  - System.Reflection.Emit.ILGeneration\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Puts the specified instruction and numerical argument onto the Microsoft intermediate language (MSIL) stream of instructions.\n  remarks: The instruction values are defined in the `OpCodes` enumeration.\n  syntax:\n    content: public virtual void Emit (System.Reflection.Emit.OpCode opcode, float arg);\n    parameters:\n    - id: opcode\n      type: System.Reflection.Emit.OpCode\n      description: The MSIL instruction to be put onto the stream.\n    - id: arg\n      type: System.Single\n      description: The `Single` argument pushed onto the stream immediately after the instruction.\n  overload: System.Reflection.Emit.ILGenerator.Emit*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/ILGenerator.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.SByte)\n  commentId: M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.SByte)\n  id: Emit(System.Reflection.Emit.OpCode,System.SByte)\n  parent: System.Reflection.Emit.ILGenerator\n  langs:\n  - csharp\n  name: Emit(OpCode, SByte)\n  nameWithType: ILGenerator.Emit(OpCode, SByte)\n  fullName: ILGenerator.Emit(OpCode, SByte)\n  type: Method\n  assemblies:\n  - System.Reflection.Emit.ILGeneration\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Puts the specified instruction and character argument onto the Microsoft intermediate language (MSIL) stream of instructions.\n  remarks: The instruction values are defined in the `OpCodes` enumeration.\n  syntax:\n    content: >-\n      [System.CLSCompliant(false)]\n\n      public void Emit (System.Reflection.Emit.OpCode opcode, sbyte arg);\n    parameters:\n    - id: opcode\n      type: System.Reflection.Emit.OpCode\n      description: The MSIL instruction to be put onto the stream.\n    - id: arg\n      type: System.SByte\n      description: The character argument pushed onto the stream immediately after the instruction.\n  overload: System.Reflection.Emit.ILGenerator.Emit*\n  exceptions: []\n  attributes:\n  - type: System.CLSCompliantAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/ILGenerator.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.FieldInfo)\n  commentId: M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.FieldInfo)\n  id: Emit(System.Reflection.Emit.OpCode,System.Reflection.FieldInfo)\n  parent: System.Reflection.Emit.ILGenerator\n  langs:\n  - csharp\n  name: Emit(OpCode, FieldInfo)\n  nameWithType: ILGenerator.Emit(OpCode, FieldInfo)\n  fullName: ILGenerator.Emit(OpCode, FieldInfo)\n  type: Method\n  assemblies:\n  - System.Reflection.Emit.ILGeneration\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Puts the specified instruction and metadata token for the specified field onto the Microsoft intermediate language (MSIL) stream of instructions.\n  remarks: The instruction values are defined in the `OpCodes` enumeration. The location of `field` is recorded so that the instruction stream can be patched if necessary when persisting the module to a portable executable (PE) file.\n  syntax:\n    content: public virtual void Emit (System.Reflection.Emit.OpCode opcode, System.Reflection.FieldInfo field);\n    parameters:\n    - id: opcode\n      type: System.Reflection.Emit.OpCode\n      description: The MSIL instruction to be emitted onto the stream.\n    - id: field\n      type: System.Reflection.FieldInfo\n      description: A `FieldInfo` representing a field.\n  overload: System.Reflection.Emit.ILGenerator.Emit*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/ILGenerator.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.SignatureHelper)\n  commentId: M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.SignatureHelper)\n  id: Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.SignatureHelper)\n  parent: System.Reflection.Emit.ILGenerator\n  langs:\n  - csharp\n  name: Emit(OpCode, SignatureHelper)\n  nameWithType: ILGenerator.Emit(OpCode, SignatureHelper)\n  fullName: ILGenerator.Emit(OpCode, SignatureHelper)\n  type: Method\n  assemblies:\n  - System.Reflection.Emit.ILGeneration\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Puts the specified instruction and a signature token onto the Microsoft intermediate language (MSIL) stream of instructions.\n  remarks: The instruction values are defined in the `OpCodes` enumeration.\n  syntax:\n    content: public virtual void Emit (System.Reflection.Emit.OpCode opcode, System.Reflection.Emit.SignatureHelper signature);\n    parameters:\n    - id: opcode\n      type: System.Reflection.Emit.OpCode\n      description: The MSIL instruction to be emitted onto the stream.\n    - id: signature\n      type: System.Reflection.Emit.SignatureHelper\n      description: A helper for constructing a signature token.\n  overload: System.Reflection.Emit.ILGenerator.Emit*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>signature</code> is `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/ILGenerator.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.LocalBuilder)\n  commentId: M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.LocalBuilder)\n  id: Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.LocalBuilder)\n  parent: System.Reflection.Emit.ILGenerator\n  langs:\n  - csharp\n  name: Emit(OpCode, LocalBuilder)\n  nameWithType: ILGenerator.Emit(OpCode, LocalBuilder)\n  fullName: ILGenerator.Emit(OpCode, LocalBuilder)\n  type: Method\n  assemblies:\n  - System.Reflection.Emit.ILGeneration\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Puts the specified instruction onto the Microsoft intermediate language (MSIL) stream followed by the index of the given local variable.\n  remarks: The instruction values are defined in the `OpCodes` enumeration.\n  syntax:\n    content: public virtual void Emit (System.Reflection.Emit.OpCode opcode, System.Reflection.Emit.LocalBuilder local);\n    parameters:\n    - id: opcode\n      type: System.Reflection.Emit.OpCode\n      description: The MSIL instruction to be emitted onto the stream.\n    - id: local\n      type: System.Reflection.Emit.LocalBuilder\n      description: A local variable.\n  overload: System.Reflection.Emit.ILGenerator.Emit*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The parent method of the <code>local</code> parameter does not match the method associated with this <xref href=\"System.Reflection.Emit.ILGenerator\"></xref>.\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>local</code> is `null`.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: <code>opcode</code> is a single-byte instruction, and <code>local</code> represents a local variable with an index greater than `Byte.MaxValue`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/ILGenerator.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.Label[])\n  commentId: M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.Label[])\n  id: Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.Label[])\n  parent: System.Reflection.Emit.ILGenerator\n  langs:\n  - csharp\n  name: Emit(OpCode, Label[])\n  nameWithType: ILGenerator.Emit(OpCode, Label[])\n  fullName: ILGenerator.Emit(OpCode, Label[])\n  type: Method\n  assemblies:\n  - System.Reflection.Emit.ILGeneration\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Puts the specified instruction onto the Microsoft intermediate language (MSIL) stream and leaves space to include a label when fixes are done.\n  remarks: \"Emits a switch table.  \\n  \\n The instruction values are defined in the `OpCodes` enumeration.  \\n  \\n Labels are created using <xref:System.Reflection.Emit.ILGenerator.DefineLabel%2A> and their location within the stream is fixed by using <xref:System.Reflection.Emit.ILGenerator.MarkLabel%2A>. If a single-byte instruction is used, the label can represent a jump of at most 127 bytes along the stream. `opcode` must represent a branch instruction. Because branches are relative instructions, `label` will be replaced with the correct offset to branch during the fixup process.\"\n  example:\n  - \"The code sample below illustrates the creation of a dynamic method with a jump table. The jump table is built using an array of <xref:System.Reflection.Emit.Label>.  \\n  \\n [!code-cpp[System.Reflection.Emit.ILGenerator.Emit Example 2#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Reflection.Emit.ILGenerator.Emit Example 2/CPP/source.cpp#1)]\\n [!code-csharp[System.Reflection.Emit.ILGenerator.Emit Example 2#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Reflection.Emit.ILGenerator.Emit Example 2/CS/source.cs#1)]\\n [!code-vb[System.Reflection.Emit.ILGenerator.Emit Example 2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Reflection.Emit.ILGenerator.Emit Example 2/VB/source.vb#1)]\"\n  syntax:\n    content: public virtual void Emit (System.Reflection.Emit.OpCode opcode, System.Reflection.Emit.Label[] labels);\n    parameters:\n    - id: opcode\n      type: System.Reflection.Emit.OpCode\n      description: The MSIL instruction to be emitted onto the stream.\n    - id: labels\n      type: System.Reflection.Emit.Label[]\n      description: The array of label objects to which to branch from this location. All of the labels will be used.\n  overload: System.Reflection.Emit.ILGenerator.Emit*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>con</code> is `null`. This exception is new in the [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)].\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/ILGenerator.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.MethodInfo)\n  commentId: M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.MethodInfo)\n  id: Emit(System.Reflection.Emit.OpCode,System.Reflection.MethodInfo)\n  parent: System.Reflection.Emit.ILGenerator\n  langs:\n  - csharp\n  name: Emit(OpCode, MethodInfo)\n  nameWithType: ILGenerator.Emit(OpCode, MethodInfo)\n  fullName: ILGenerator.Emit(OpCode, MethodInfo)\n  type: Method\n  assemblies:\n  - System.Reflection.Emit.ILGeneration\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Puts the specified instruction onto the Microsoft intermediate language (MSIL) stream followed by the metadata token for the given method.\n  remarks: \"The instruction values are defined in the `OpCodes` enumeration.  \\n  \\n The location of `meth` is recorded so that the instruction stream can be patched if necessary when persisting the module to a portable executable (PE) file.  \\n  \\n If `meth` represents a generic method, it must be a generic method definition. That is, its <xref:System.Reflection.MethodInfo.IsGenericMethodDefinition%2A?displayProperty=fullName> property must be `true`.\"\n  syntax:\n    content: public virtual void Emit (System.Reflection.Emit.OpCode opcode, System.Reflection.MethodInfo meth);\n    parameters:\n    - id: opcode\n      type: System.Reflection.Emit.OpCode\n      description: The MSIL instruction to be emitted onto the stream.\n    - id: meth\n      type: System.Reflection.MethodInfo\n      description: A `MethodInfo` representing a method.\n  overload: System.Reflection.Emit.ILGenerator.Emit*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>meth</code> is `null`.\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: <code>meth</code> is a generic method for which the <xref href=\"System.Reflection.MethodInfo.IsGenericMethodDefinition\"></xref> property is `false`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/ILGenerator.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.ConstructorInfo)\n  commentId: M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.ConstructorInfo)\n  id: Emit(System.Reflection.Emit.OpCode,System.Reflection.ConstructorInfo)\n  parent: System.Reflection.Emit.ILGenerator\n  langs:\n  - csharp\n  name: Emit(OpCode, ConstructorInfo)\n  nameWithType: ILGenerator.Emit(OpCode, ConstructorInfo)\n  fullName: ILGenerator.Emit(OpCode, ConstructorInfo)\n  type: Method\n  assemblies:\n  - System.Reflection.Emit.ILGeneration\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Puts the specified instruction and metadata token for the specified constructor onto the Microsoft intermediate language (MSIL) stream of instructions.\n  remarks: \"The instruction values are defined in the `OpCodes` enumeration.  \\n  \\n The location of `con` is recorded so that the instruction stream can be patched if necessary when persisting the module to a portable executable (PE) file.\"\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(true)]\n\n      public virtual void Emit (System.Reflection.Emit.OpCode opcode, System.Reflection.ConstructorInfo con);\n    parameters:\n    - id: opcode\n      type: System.Reflection.Emit.OpCode\n      description: The MSIL instruction to be emitted onto the stream.\n    - id: con\n      type: System.Reflection.ConstructorInfo\n      description: A `ConstructorInfo` representing a constructor.\n  overload: System.Reflection.Emit.ILGenerator.Emit*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>con</code> is `null`. This exception is new in the [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)].\n  attributes:\n  - type: System.Runtime.InteropServices.ComVisibleAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/ILGenerator.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Int64)\n  commentId: M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Int64)\n  id: Emit(System.Reflection.Emit.OpCode,System.Int64)\n  parent: System.Reflection.Emit.ILGenerator\n  langs:\n  - csharp\n  name: Emit(OpCode, Int64)\n  nameWithType: ILGenerator.Emit(OpCode, Int64)\n  fullName: ILGenerator.Emit(OpCode, Int64)\n  type: Method\n  assemblies:\n  - System.Reflection.Emit.ILGeneration\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Puts the specified instruction and numerical argument onto the Microsoft intermediate language (MSIL) stream of instructions.\n  remarks: The instruction values are defined in the `OpCodes` enumeration.\n  syntax:\n    content: public virtual void Emit (System.Reflection.Emit.OpCode opcode, long arg);\n    parameters:\n    - id: opcode\n      type: System.Reflection.Emit.OpCode\n      description: The MSIL instruction to be put onto the stream.\n    - id: arg\n      type: System.Int64\n      description: The numerical argument pushed onto the stream immediately after the instruction.\n  overload: System.Reflection.Emit.ILGenerator.Emit*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/ILGenerator.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Int32)\n  commentId: M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Int32)\n  id: Emit(System.Reflection.Emit.OpCode,System.Int32)\n  parent: System.Reflection.Emit.ILGenerator\n  langs:\n  - csharp\n  name: Emit(OpCode, Int32)\n  nameWithType: ILGenerator.Emit(OpCode, Int32)\n  fullName: ILGenerator.Emit(OpCode, Int32)\n  type: Method\n  assemblies:\n  - System.Reflection.Emit.ILGeneration\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Puts the specified instruction and numerical argument onto the Microsoft intermediate language (MSIL) stream of instructions.\n  remarks: The instruction values are defined in the `OpCodes` enumeration.\n  syntax:\n    content: public virtual void Emit (System.Reflection.Emit.OpCode opcode, int arg);\n    parameters:\n    - id: opcode\n      type: System.Reflection.Emit.OpCode\n      description: The MSIL instruction to be put onto the stream.\n    - id: arg\n      type: System.Int32\n      description: The numerical argument pushed onto the stream immediately after the instruction.\n  overload: System.Reflection.Emit.ILGenerator.Emit*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/ILGenerator.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Int16)\n  commentId: M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Int16)\n  id: Emit(System.Reflection.Emit.OpCode,System.Int16)\n  parent: System.Reflection.Emit.ILGenerator\n  langs:\n  - csharp\n  name: Emit(OpCode, Int16)\n  nameWithType: ILGenerator.Emit(OpCode, Int16)\n  fullName: ILGenerator.Emit(OpCode, Int16)\n  type: Method\n  assemblies:\n  - System.Reflection.Emit.ILGeneration\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Puts the specified instruction and numerical argument onto the Microsoft intermediate language (MSIL) stream of instructions.\n  remarks: The instruction values are defined in the `OpCodes` enumeration.\n  syntax:\n    content: public virtual void Emit (System.Reflection.Emit.OpCode opcode, short arg);\n    parameters:\n    - id: opcode\n      type: System.Reflection.Emit.OpCode\n      description: The MSIL instruction to be emitted onto the stream.\n    - id: arg\n      type: System.Int16\n      description: The `Int` argument pushed onto the stream immediately after the instruction.\n  overload: System.Reflection.Emit.ILGenerator.Emit*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/ILGenerator.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Double)\n  commentId: M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Double)\n  id: Emit(System.Reflection.Emit.OpCode,System.Double)\n  parent: System.Reflection.Emit.ILGenerator\n  langs:\n  - csharp\n  name: Emit(OpCode, Double)\n  nameWithType: ILGenerator.Emit(OpCode, Double)\n  fullName: ILGenerator.Emit(OpCode, Double)\n  type: Method\n  assemblies:\n  - System.Reflection.Emit.ILGeneration\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Puts the specified instruction and numerical argument onto the Microsoft intermediate language (MSIL) stream of instructions.\n  remarks: The instruction values are defined in the `OpCodes` enumeration.\n  syntax:\n    content: public virtual void Emit (System.Reflection.Emit.OpCode opcode, double arg);\n    parameters:\n    - id: opcode\n      type: System.Reflection.Emit.OpCode\n      description: The MSIL instruction to be put onto the stream. Defined in the `OpCodes` enumeration.\n    - id: arg\n      type: System.Double\n      description: The numerical argument pushed onto the stream immediately after the instruction.\n  overload: System.Reflection.Emit.ILGenerator.Emit*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/ILGenerator.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Byte)\n  commentId: M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Byte)\n  id: Emit(System.Reflection.Emit.OpCode,System.Byte)\n  parent: System.Reflection.Emit.ILGenerator\n  langs:\n  - csharp\n  name: Emit(OpCode, Byte)\n  nameWithType: ILGenerator.Emit(OpCode, Byte)\n  fullName: ILGenerator.Emit(OpCode, Byte)\n  type: Method\n  assemblies:\n  - System.Reflection.Emit.ILGeneration\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Puts the specified instruction and character argument onto the Microsoft intermediate language (MSIL) stream of instructions.\n  remarks: The instruction values are defined in the `OpCodes` enumeration.\n  syntax:\n    content: public virtual void Emit (System.Reflection.Emit.OpCode opcode, byte arg);\n    parameters:\n    - id: opcode\n      type: System.Reflection.Emit.OpCode\n      description: The MSIL instruction to be put onto the stream.\n    - id: arg\n      type: System.Byte\n      description: The character argument pushed onto the stream immediately after the instruction.\n  overload: System.Reflection.Emit.ILGenerator.Emit*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/ILGenerator.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)\n  commentId: M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)\n  id: Emit(System.Reflection.Emit.OpCode)\n  parent: System.Reflection.Emit.ILGenerator\n  langs:\n  - csharp\n  name: Emit(OpCode)\n  nameWithType: ILGenerator.Emit(OpCode)\n  fullName: ILGenerator.Emit(OpCode)\n  type: Method\n  assemblies:\n  - System.Reflection.Emit.ILGeneration\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Puts the specified instruction onto the stream of instructions.\n  remarks: \"If the `opcode` parameter requires an argument, the caller must ensure that the argument length matches the length of the declared parameter. Otherwise, results will be unpredictable. For example, if the Emit instruction requires a 2-byte operand and the caller supplies a 4-byte operand, the runtime will emit two additional bytes to the instruction stream. These extra bytes will be <xref:System.Reflection.Emit.OpCodes.Nop> instructions.  \\n  \\n The instruction values are defined in <xref:System.Reflection.Emit.OpCodes>.\"\n  example:\n  - \"The code sample below demonstrates the use of `Emit` to generate MSIL output via an instance of <xref:System.Reflection.Emit.ILGenerator>.  \\n  \\n [!code-cpp[System.Reflection.Emit.ILGenerator.Emit Example 2#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Reflection.Emit.ILGenerator.Emit Example 2/CPP/source.cpp#1)]\\n [!code-csharp[System.Reflection.Emit.ILGenerator.Emit Example 2#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Reflection.Emit.ILGenerator.Emit Example 2/CS/source.cs#1)]\\n [!code-vb[System.Reflection.Emit.ILGenerator.Emit Example 2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Reflection.Emit.ILGenerator.Emit Example 2/VB/source.vb#1)]\"\n  syntax:\n    content: public virtual void Emit (System.Reflection.Emit.OpCode opcode);\n    parameters:\n    - id: opcode\n      type: System.Reflection.Emit.OpCode\n      description: The Microsoft Intermediate Language (MSIL) instruction to be put onto the stream.\n  overload: System.Reflection.Emit.ILGenerator.Emit*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/ILGenerator.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.Label)\n  commentId: M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.Label)\n  id: Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.Label)\n  parent: System.Reflection.Emit.ILGenerator\n  langs:\n  - csharp\n  name: Emit(OpCode, Label)\n  nameWithType: ILGenerator.Emit(OpCode, Label)\n  fullName: ILGenerator.Emit(OpCode, Label)\n  type: Method\n  assemblies:\n  - System.Reflection.Emit.ILGeneration\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Puts the specified instruction onto the Microsoft intermediate language (MSIL) stream and leaves space to include a label when fixes are done.\n  remarks: \"The instruction values are defined in the `OpCodes` enumeration.  \\n  \\n Labels are created using <xref:System.Reflection.Emit.ILGenerator.DefineLabel%2A>, and their location within the stream is fixed by using <xref:System.Reflection.Emit.ILGenerator.MarkLabel%2A>. If a single-byte instruction is used, the label can represent a jump of at most 127 bytes along the stream. `opcode` must represent a branch instruction. Because branches are relative instructions, `label` will be replaced with the correct offset to branch during the fixup process.\"\n  example:\n  - \"The code sample below illustrates the creation of a dynamic method with a jump table. The jump table is built using an array of <xref:System.Reflection.Emit.Label>.  \\n  \\n [!code-cpp[System.Reflection.Emit.ILGenerator.Emit Example 2#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Reflection.Emit.ILGenerator.Emit Example 2/CPP/source.cpp#1)]\\n [!code-csharp[System.Reflection.Emit.ILGenerator.Emit Example 2#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Reflection.Emit.ILGenerator.Emit Example 2/CS/source.cs#1)]\\n [!code-vb[System.Reflection.Emit.ILGenerator.Emit Example 2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Reflection.Emit.ILGenerator.Emit Example 2/VB/source.vb#1)]\"\n  syntax:\n    content: public virtual void Emit (System.Reflection.Emit.OpCode opcode, System.Reflection.Emit.Label label);\n    parameters:\n    - id: opcode\n      type: System.Reflection.Emit.OpCode\n      description: The MSIL instruction to be emitted onto the stream.\n    - id: label\n      type: System.Reflection.Emit.Label\n      description: The label to which to branch from this location.\n  overload: System.Reflection.Emit.ILGenerator.Emit*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/ILGenerator.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.ILGenerator.EmitCall(System.Reflection.Emit.OpCode,System.Reflection.MethodInfo,System.Type[])\n  commentId: M:System.Reflection.Emit.ILGenerator.EmitCall(System.Reflection.Emit.OpCode,System.Reflection.MethodInfo,System.Type[])\n  id: EmitCall(System.Reflection.Emit.OpCode,System.Reflection.MethodInfo,System.Type[])\n  parent: System.Reflection.Emit.ILGenerator\n  langs:\n  - csharp\n  name: EmitCall(OpCode, MethodInfo, Type[])\n  nameWithType: ILGenerator.EmitCall(OpCode, MethodInfo, Type[])\n  fullName: ILGenerator.EmitCall(OpCode, MethodInfo, Type[])\n  type: Method\n  assemblies:\n  - System.Reflection.Emit.ILGeneration\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Puts a `call` or `callvirt` instruction onto the Microsoft intermediate language (MSIL) stream to call a `varargs` method.\n  remarks: \"The <xref:System.Reflection.Emit.ILGenerator.EmitCall%2A> method is used to emit calls to `varargs` methods because there is no overload of the <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method that specifies the parameter types of the variable arguments.  \\n  \\n To emit calls to methods that do not use the <xref:System.Reflection.CallingConventions.VarArgs> calling convention, use the <xref:System.Reflection.Emit.ILGenerator.Emit%28System.Reflection.Emit.OpCode%2CSystem.Reflection.MethodInfo%29> method overload.  \\n  \\n## Version Information  \\n Beginning with the .NET Framework version 2.0, the <xref:System.Reflection.Emit.ILGenerator.EmitCall%2A> method does not throw an exception when optional parameter types are specified for a method that is not `varargs`. <xref:System.InvalidProgramException> is thrown when the call is executed.\"\n  example:\n  - \"The following code example emits two methods, a `varargs` method and a method that calls the `varargs` method. The `EmitCall` method is used to emit the call to the `varargs` method.  \\n  \\n [!code-cpp[Emit.ArgIterator#1](~/samples/snippets/cpp/VS_Snippets_CLR/Emit.ArgIterator/cpp/source.cpp#1)]\\n [!code-csharp[Emit.ArgIterator#1](~/samples/snippets/csharp/VS_Snippets_CLR/Emit.ArgIterator/cs/source.cs#1)]\\n [!code-vb[Emit.ArgIterator#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Emit.ArgIterator/vb/source.vb#1)]\"\n  syntax:\n    content: public virtual void EmitCall (System.Reflection.Emit.OpCode opcode, System.Reflection.MethodInfo methodInfo, Type[] optionalParameterTypes);\n    parameters:\n    - id: opcode\n      type: System.Reflection.Emit.OpCode\n      description: The MSIL instruction to be emitted onto the stream. Must be <xref href=\"System.Reflection.Emit.OpCodes.Call\"></xref>, <xref href=\"System.Reflection.Emit.OpCodes.Callvirt\"></xref>, or <xref href=\"System.Reflection.Emit.OpCodes.Newobj\"></xref>.\n    - id: methodInfo\n      type: System.Reflection.MethodInfo\n      description: The `varargs` method to be called.\n    - id: optionalParameterTypes\n      type: System.Type[]\n      description: The types of the optional arguments if the method is a `varargs` method; otherwise, `null`.\n  overload: System.Reflection.Emit.ILGenerator.EmitCall*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>opcode</code> does not specify a method call.\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>methodInfo</code> is `null`.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The calling convention for the method is not `varargs`, but optional parameter types are supplied. This exception is thrown in the .NET Framework versions 1.0 and 1.1, In subsequent versions, no exception is thrown.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/ILGenerator.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.ILGenerator.EmitCalli(System.Reflection.Emit.OpCode,System.Runtime.InteropServices.CallingConvention,System.Type,System.Type[])\n  commentId: M:System.Reflection.Emit.ILGenerator.EmitCalli(System.Reflection.Emit.OpCode,System.Runtime.InteropServices.CallingConvention,System.Type,System.Type[])\n  id: EmitCalli(System.Reflection.Emit.OpCode,System.Runtime.InteropServices.CallingConvention,System.Type,System.Type[])\n  parent: System.Reflection.Emit.ILGenerator\n  langs:\n  - csharp\n  name: EmitCalli(OpCode, CallingConvention, Type, Type[])\n  nameWithType: ILGenerator.EmitCalli(OpCode, CallingConvention, Type, Type[])\n  fullName: ILGenerator.EmitCalli(OpCode, CallingConvention, Type, Type[])\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Puts a <xref href=\"System.Reflection.Emit.OpCodes.Calli\"></xref> instruction onto the Microsoft intermediate language (MSIL) stream, specifying an unmanaged calling convention for the indirect call.\n  remarks: Use<xref:System.Reflection.Emit.ILGenerator.EmitCalli%2A> to put a <xref:System.Reflection.Emit.OpCodes.Calli> instruction onto the stream. Do not use <xref:System.Reflection.Emit.ILGenerator.Emit%2A>.\n  example:\n  - \"The following code sample demonstrates the contextual usage of the <xref:System.Reflection.Emit.ILGenerator.EmitCalli%2A> method to call an unmanaged type method external to the dynamic class.  \\n  \\n [!code-cpp[System.Reflection.Emit.ILGenerator.EmitCalli Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Reflection.Emit.ILGenerator.EmitCalli Example/CPP/source.cpp#1)]\\n [!code-csharp[System.Reflection.Emit.ILGenerator.EmitCalli Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Reflection.Emit.ILGenerator.EmitCalli Example/CS/source.cs#1)]\\n [!code-vb[System.Reflection.Emit.ILGenerator.EmitCalli Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Reflection.Emit.ILGenerator.EmitCalli Example/VB/source.vb#1)]\"\n  syntax:\n    content: public virtual void EmitCalli (System.Reflection.Emit.OpCode opcode, System.Runtime.InteropServices.CallingConvention unmanagedCallConv, Type returnType, Type[] parameterTypes);\n    parameters:\n    - id: opcode\n      type: System.Reflection.Emit.OpCode\n      description: The MSIL instruction to be emitted onto the stream. Must be <xref href=\"System.Reflection.Emit.OpCodes.Calli\"></xref>.\n    - id: unmanagedCallConv\n      type: System.Runtime.InteropServices.CallingConvention\n      description: The unmanaged calling convention to be used.\n    - id: returnType\n      type: System.Type\n      description: The <xref href=\"System.Type\"></xref> of the result.\n    - id: parameterTypes\n      type: System.Type[]\n      description: The types of the required arguments to the instruction.\n  overload: System.Reflection.Emit.ILGenerator.EmitCalli*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/ILGenerator.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.ILGenerator.EmitCalli(System.Reflection.Emit.OpCode,System.Reflection.CallingConventions,System.Type,System.Type[],System.Type[])\n  commentId: M:System.Reflection.Emit.ILGenerator.EmitCalli(System.Reflection.Emit.OpCode,System.Reflection.CallingConventions,System.Type,System.Type[],System.Type[])\n  id: EmitCalli(System.Reflection.Emit.OpCode,System.Reflection.CallingConventions,System.Type,System.Type[],System.Type[])\n  parent: System.Reflection.Emit.ILGenerator\n  langs:\n  - csharp\n  name: EmitCalli(OpCode, CallingConventions, Type, Type[], Type[])\n  nameWithType: ILGenerator.EmitCalli(OpCode, CallingConventions, Type, Type[], Type[])\n  fullName: ILGenerator.EmitCalli(OpCode, CallingConventions, Type, Type[], Type[])\n  type: Method\n  assemblies:\n  - System.Reflection.Emit.ILGeneration\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Puts a <xref href=\"System.Reflection.Emit.OpCodes.Calli\"></xref> instruction onto the Microsoft intermediate language (MSIL) stream, specifying a managed calling convention for the indirect call.\n  remarks: \"Use <xref:System.Reflection.Emit.ILGenerator.EmitCalli%2A> to put a <xref:System.Reflection.Emit.OpCodes.Calli> instruction onto the stream. Do not use <xref:System.Reflection.Emit.ILGenerator.Emit%2A>.  \\n  \\n If `optionalParameterTypes` specifies optional arguments, `callingConvention` must include the <xref:System.Reflection.CallingConventions?displayProperty=fullName> flag.\"\n  syntax:\n    content: public virtual void EmitCalli (System.Reflection.Emit.OpCode opcode, System.Reflection.CallingConventions callingConvention, Type returnType, Type[] parameterTypes, Type[] optionalParameterTypes);\n    parameters:\n    - id: opcode\n      type: System.Reflection.Emit.OpCode\n      description: The MSIL instruction to be emitted onto the stream. Must be <xref href=\"System.Reflection.Emit.OpCodes.Calli\"></xref>.\n    - id: callingConvention\n      type: System.Reflection.CallingConventions\n      description: The managed calling convention to be used.\n    - id: returnType\n      type: System.Type\n      description: The <xref href=\"System.Type\"></xref> of the result.\n    - id: parameterTypes\n      type: System.Type[]\n      description: The types of the required arguments to the instruction.\n    - id: optionalParameterTypes\n      type: System.Type[]\n      description: The types of the optional arguments for `varargs` calls.\n  overload: System.Reflection.Emit.ILGenerator.EmitCalli*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: <code>optionalParameterTypes</code> is not `null`, but <code>callingConvention</code> does not include the <xref href=\"System.Reflection.CallingConventions.VarArgs\"></xref> flag.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/ILGenerator.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.ILGenerator.EmitWriteLine(System.String)\n  commentId: M:System.Reflection.Emit.ILGenerator.EmitWriteLine(System.String)\n  id: EmitWriteLine(System.String)\n  parent: System.Reflection.Emit.ILGenerator\n  langs:\n  - csharp\n  name: EmitWriteLine(String)\n  nameWithType: ILGenerator.EmitWriteLine(String)\n  fullName: ILGenerator.EmitWriteLine(String)\n  type: Method\n  assemblies:\n  - System.Reflection.Emit.ILGeneration\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Emits the Microsoft intermediate language (MSIL) to call <xref href=\"System.Console.WriteLine*\"></xref> with a string.\n  remarks: The string must have already been defined.\n  example:\n  - \"The code sample below demonstrates the contextual usage of the `EmitWriteLine` method to write a string to the console in a dynamic method.  \\n  \\n [!code-cpp[System.Reflection.Emit.ILGenerator.OpCodes Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Reflection.Emit.ILGenerator.OpCodes Example/CPP/source.cpp#1)]\\n [!code-csharp[System.Reflection.Emit.ILGenerator.OpCodes Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Reflection.Emit.ILGenerator.OpCodes Example/CS/source.cs#1)]\\n [!code-vb[System.Reflection.Emit.ILGenerator.OpCodes Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Reflection.Emit.ILGenerator.OpCodes Example/VB/source.vb#1)]\"\n  syntax:\n    content: public virtual void EmitWriteLine (string value);\n    parameters:\n    - id: value\n      type: System.String\n      description: The string to be printed.\n  overload: System.Reflection.Emit.ILGenerator.EmitWriteLine*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/ILGenerator.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.ILGenerator.EmitWriteLine(System.Reflection.FieldInfo)\n  commentId: M:System.Reflection.Emit.ILGenerator.EmitWriteLine(System.Reflection.FieldInfo)\n  id: EmitWriteLine(System.Reflection.FieldInfo)\n  parent: System.Reflection.Emit.ILGenerator\n  langs:\n  - csharp\n  name: EmitWriteLine(FieldInfo)\n  nameWithType: ILGenerator.EmitWriteLine(FieldInfo)\n  fullName: ILGenerator.EmitWriteLine(FieldInfo)\n  type: Method\n  assemblies:\n  - System.Reflection.Emit.ILGeneration\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Emits the Microsoft intermediate language (MSIL) necessary to call <xref href=\"System.Console.WriteLine*\"></xref> with the given field.\n  remarks: The type of `fld` must match the parameter type of an overload of the <xref:System.Console.WriteLine%2A?displayProperty=fullName> method.\n  example:\n  - \"The following code sample demonstrates the use of the <xref:System.Reflection.Emit.ILGenerator.EmitWriteLine%2A> method to write a string to the console in a dynamic method.  \\n  \\n [!code-cpp[System.Reflection.Emit.ILGenerator.OpCodes Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Reflection.Emit.ILGenerator.OpCodes Example/CPP/source.cpp#1)]\\n [!code-csharp[System.Reflection.Emit.ILGenerator.OpCodes Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Reflection.Emit.ILGenerator.OpCodes Example/CS/source.cs#1)]\\n [!code-vb[System.Reflection.Emit.ILGenerator.OpCodes Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Reflection.Emit.ILGenerator.OpCodes Example/VB/source.vb#1)]\"\n  syntax:\n    content: public virtual void EmitWriteLine (System.Reflection.FieldInfo fld);\n    parameters:\n    - id: fld\n      type: System.Reflection.FieldInfo\n      description: The field whose value is to be written to the console.\n  overload: System.Reflection.Emit.ILGenerator.EmitWriteLine*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: There is no overload of the <xref href=\"System.Console.WriteLine*\"></xref> method that accepts the type of the specified field.\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>fld</code> is `null`.\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: The type of the field is <xref href=\"System.Reflection.Emit.TypeBuilder\"></xref> or <xref href=\"System.Reflection.Emit.EnumBuilder\"></xref>, which are not supported.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/ILGenerator.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.ILGenerator.EmitWriteLine(System.Reflection.Emit.LocalBuilder)\n  commentId: M:System.Reflection.Emit.ILGenerator.EmitWriteLine(System.Reflection.Emit.LocalBuilder)\n  id: EmitWriteLine(System.Reflection.Emit.LocalBuilder)\n  parent: System.Reflection.Emit.ILGenerator\n  langs:\n  - csharp\n  name: EmitWriteLine(LocalBuilder)\n  nameWithType: ILGenerator.EmitWriteLine(LocalBuilder)\n  fullName: ILGenerator.EmitWriteLine(LocalBuilder)\n  type: Method\n  assemblies:\n  - System.Reflection.Emit.ILGeneration\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Emits the Microsoft intermediate language (MSIL) necessary to call <xref href=\"System.Console.WriteLine*\"></xref> with the given local variable.\n  remarks: The type of `localBuilder` must match the parameter type of an overload of the <xref:System.Console.WriteLine%2A?displayProperty=fullName> method.\n  example:\n  - \"The code sample below demonstrates the contextual usage of the <xref:System.Reflection.Emit.ILGenerator.EmitWriteLine%2A> method to write a string to the console in a dynamic method.  \\n  \\n [!code-cpp[System.Reflection.Emit.ILGenerator.OpCodes Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Reflection.Emit.ILGenerator.OpCodes Example/CPP/source.cpp#1)]\\n [!code-csharp[System.Reflection.Emit.ILGenerator.OpCodes Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Reflection.Emit.ILGenerator.OpCodes Example/CS/source.cs#1)]\\n [!code-vb[System.Reflection.Emit.ILGenerator.OpCodes Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Reflection.Emit.ILGenerator.OpCodes Example/VB/source.vb#1)]\"\n  syntax:\n    content: public virtual void EmitWriteLine (System.Reflection.Emit.LocalBuilder localBuilder);\n    parameters:\n    - id: localBuilder\n      type: System.Reflection.Emit.LocalBuilder\n      description: The local variable whose value is to be written to the console.\n  overload: System.Reflection.Emit.ILGenerator.EmitWriteLine*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"The type of <code>localBuilder</code> is <xref href=\\\"System.Reflection.Emit.TypeBuilder\\\"></xref> or <xref href=\\\"System.Reflection.Emit.EnumBuilder\\\"></xref>, which are not supported.  \\n  \\n -or-  \\n  \\n There is no overload of <xref href=\\\"System.Console.WriteLine*\\\"></xref> that accepts the type of <code>localBuilder</code>.\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>localBuilder</code> is `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/ILGenerator.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.ILGenerator.EndExceptionBlock\n  commentId: M:System.Reflection.Emit.ILGenerator.EndExceptionBlock\n  id: EndExceptionBlock\n  parent: System.Reflection.Emit.ILGenerator\n  langs:\n  - csharp\n  name: EndExceptionBlock()\n  nameWithType: ILGenerator.EndExceptionBlock()\n  fullName: ILGenerator.EndExceptionBlock()\n  type: Method\n  assemblies:\n  - System.Reflection.Emit.ILGeneration\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Ends an exception block.\n  remarks: ''\n  example:\n  - \"The code sample below demonstrates the contextual usage of the `EndExceptionBlock` method.  \\n  \\n [!code-cpp[System.Reflection.Emit.ILGenerator.ThrowException Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Reflection.Emit.ILGenerator.ThrowException Example/CPP/source.cpp#1)]\\n [!code-csharp[System.Reflection.Emit.ILGenerator.ThrowException Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Reflection.Emit.ILGenerator.ThrowException Example/CS/source.cs#1)]\\n [!code-vb[System.Reflection.Emit.ILGenerator.ThrowException Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Reflection.Emit.ILGenerator.ThrowException Example/VB/source.vb#1)]\"\n  syntax:\n    content: public virtual void EndExceptionBlock ();\n    parameters: []\n  overload: System.Reflection.Emit.ILGenerator.EndExceptionBlock*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The end exception block occurs in an unexpected place in the code stream.\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: The Microsoft intermediate language (MSIL) being generated is not currently in an exception block.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/ILGenerator.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.ILGenerator.EndScope\n  commentId: M:System.Reflection.Emit.ILGenerator.EndScope\n  id: EndScope\n  parent: System.Reflection.Emit.ILGenerator\n  langs:\n  - csharp\n  name: EndScope()\n  nameWithType: ILGenerator.EndScope()\n  fullName: ILGenerator.EndScope()\n  type: Method\n  assemblies:\n  - System.Reflection.Emit.ILGeneration\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Ends a lexical scope.\n  remarks: \"This method is used to emit symbolic information. It is used with <xref:System.Reflection.Emit.ILGenerator.BeginScope%2A>.  \\n  \\n If the current <xref:System.Reflection.Emit.ILGenerator> is associated with a <xref:System.Reflection.Emit.DynamicMethod> object, it does not support symbolic information.\"\n  example:\n  - \"The following code sample illustrates the use of `BeginScope` and `EndScope`.  \\n  \\n [!code-cpp[ILGenerator_Begin_EndScope#2](~/samples/snippets/cpp/VS_Snippets_CLR/ILGenerator_Begin_EndScope/CPP/ilgenerator_begin_endscope.cpp#2)]\\n [!code-csharp[ILGenerator_Begin_EndScope#2](~/samples/snippets/csharp/VS_Snippets_CLR/ILGenerator_Begin_EndScope/CS/ilgenerator_begin_endscope.cs#2)]\\n [!code-vb[ILGenerator_Begin_EndScope#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/ILGenerator_Begin_EndScope/VB/ilgenerator_begin_endscope.vb#2)]\"\n  syntax:\n    content: public virtual void EndScope ();\n    parameters: []\n  overload: System.Reflection.Emit.ILGenerator.EndScope*\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: This <xref href=\"System.Reflection.Emit.ILGenerator\"></xref> belongs to a <xref href=\"System.Reflection.Emit.DynamicMethod\"></xref>.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/ILGenerator.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.ILGenerator.ILOffset\n  commentId: P:System.Reflection.Emit.ILGenerator.ILOffset\n  id: ILOffset\n  parent: System.Reflection.Emit.ILGenerator\n  langs:\n  - csharp\n  name: ILOffset\n  nameWithType: ILGenerator.ILOffset\n  fullName: ILGenerator.ILOffset\n  type: Property\n  assemblies:\n  - System.Reflection.Emit.ILGeneration\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Gets the current offset, in bytes, in the Microsoft intermediate language (MSIL) stream that is being emitted by the <xref href=\"System.Reflection.Emit.ILGenerator\"></xref>.\n  remarks: \"This method is transparent, and can be called from partially trusted code.  \\n  \\n If the <xref:System.Reflection.Emit.ILGenerator.ILOffset%2A> property is accessed before any MSIL instructions have been emitted, it returns 0 (zero).  \\n  \\n When MSIL is generated for dynamic languages, this property can be used to map offsets in the MSIL stream to source code line numbers. The resulting information can be used to provide stack traces when exceptions are thrown.\"\n  syntax:\n    content: public virtual int ILOffset { get; }\n    return:\n      type: System.Int32\n      description: The offset in the MSIL stream at which the next instruction will be emitted.\n  overload: System.Reflection.Emit.ILGenerator.ILOffset*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/ILGenerator.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.ILGenerator.MarkLabel(System.Reflection.Emit.Label)\n  commentId: M:System.Reflection.Emit.ILGenerator.MarkLabel(System.Reflection.Emit.Label)\n  id: MarkLabel(System.Reflection.Emit.Label)\n  parent: System.Reflection.Emit.ILGenerator\n  langs:\n  - csharp\n  name: MarkLabel(Label)\n  nameWithType: ILGenerator.MarkLabel(Label)\n  fullName: ILGenerator.MarkLabel(Label)\n  type: Method\n  assemblies:\n  - System.Reflection.Emit.ILGeneration\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Marks the Microsoft intermediate language (MSIL) stream's current position with the given label.\n  remarks: A label cannot be defined more than once.\n  example:\n  - \"The code sample below demonstrates the contextual usage of `MarkLabel` to implement MSIL branching in a dynamic method.  \\n  \\n [!code-cpp[System.Reflection.Emit.ILGenerator.Emit Example 2#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Reflection.Emit.ILGenerator.Emit Example 2/CPP/source.cpp#1)]\\n [!code-csharp[System.Reflection.Emit.ILGenerator.Emit Example 2#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Reflection.Emit.ILGenerator.Emit Example 2/CS/source.cs#1)]\\n [!code-vb[System.Reflection.Emit.ILGenerator.Emit Example 2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Reflection.Emit.ILGenerator.Emit Example 2/VB/source.vb#1)]\"\n  syntax:\n    content: public virtual void MarkLabel (System.Reflection.Emit.Label loc);\n    parameters:\n    - id: loc\n      type: System.Reflection.Emit.Label\n      description: The label for which to set an index.\n  overload: System.Reflection.Emit.ILGenerator.MarkLabel*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"<code>loc</code> represents an invalid index into the label array.  \\n  \\n -or-  \\n  \\n An index for <code>loc</code> has already been defined.\"\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/ILGenerator.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.ILGenerator.MarkSequencePoint(System.Diagnostics.SymbolStore.ISymbolDocumentWriter,System.Int32,System.Int32,System.Int32,System.Int32)\n  commentId: M:System.Reflection.Emit.ILGenerator.MarkSequencePoint(System.Diagnostics.SymbolStore.ISymbolDocumentWriter,System.Int32,System.Int32,System.Int32,System.Int32)\n  id: MarkSequencePoint(System.Diagnostics.SymbolStore.ISymbolDocumentWriter,System.Int32,System.Int32,System.Int32,System.Int32)\n  parent: System.Reflection.Emit.ILGenerator\n  langs:\n  - csharp\n  name: MarkSequencePoint(ISymbolDocumentWriter, Int32, Int32, Int32, Int32)\n  nameWithType: ILGenerator.MarkSequencePoint(ISymbolDocumentWriter, Int32, Int32, Int32, Int32)\n  fullName: ILGenerator.MarkSequencePoint(ISymbolDocumentWriter, Int32, Int32, Int32, Int32)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Marks a sequence point in the Microsoft intermediate language (MSIL) stream.\n  remarks: \"Line numbers are indexed from 1. Columns are indexed from 0.  \\n  \\n The symbolic information normally includes at least one MSIL offset for each source line. When the just-in-time (JIT) compiler is about to compile a method, it asks the profiling services for a list of MSIL offsets that should be preserved. These MSIL offsets are called *sequence points*.  \\n  \\n If the current <xref:System.Reflection.Emit.ILGenerator> is associated with a <xref:System.Reflection.Emit.DynamicMethod> object, it does not support symbolic information.\"\n  syntax:\n    content: public virtual void MarkSequencePoint (System.Diagnostics.SymbolStore.ISymbolDocumentWriter document, int startLine, int startColumn, int endLine, int endColumn);\n    parameters:\n    - id: document\n      type: System.Diagnostics.SymbolStore.ISymbolDocumentWriter\n      description: The document for which the sequence point is being defined.\n    - id: startLine\n      type: System.Int32\n      description: The line where the sequence point begins.\n    - id: startColumn\n      type: System.Int32\n      description: The column in the line where the sequence point begins.\n    - id: endLine\n      type: System.Int32\n      description: The line where the sequence point ends.\n    - id: endColumn\n      type: System.Int32\n      description: The column in the line where the sequence point ends.\n  overload: System.Reflection.Emit.ILGenerator.MarkSequencePoint*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>startLine</code> or <code>endLine</code> is <= 0.\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: This <xref href=\"System.Reflection.Emit.ILGenerator\"></xref> belongs to a <xref href=\"System.Reflection.Emit.DynamicMethod\"></xref>.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/ILGenerator.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.ILGenerator.ThrowException(System.Type)\n  commentId: M:System.Reflection.Emit.ILGenerator.ThrowException(System.Type)\n  id: ThrowException(System.Type)\n  parent: System.Reflection.Emit.ILGenerator\n  langs:\n  - csharp\n  name: ThrowException(Type)\n  nameWithType: ILGenerator.ThrowException(Type)\n  fullName: ILGenerator.ThrowException(Type)\n  type: Method\n  assemblies:\n  - System.Reflection.Emit.ILGeneration\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Emits an instruction to throw an exception.\n  remarks: ''\n  example:\n  - \"The following code sample demonstrates the contextual usage of `ThrowException` to throw an exception inside the MSIL of a dynamic method.  \\n  \\n [!code-cpp[System.Reflection.Emit.ILGenerator.ThrowException Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Reflection.Emit.ILGenerator.ThrowException Example/CPP/source.cpp#1)]\\n [!code-csharp[System.Reflection.Emit.ILGenerator.ThrowException Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Reflection.Emit.ILGenerator.ThrowException Example/CS/source.cs#1)]\\n [!code-vb[System.Reflection.Emit.ILGenerator.ThrowException Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Reflection.Emit.ILGenerator.ThrowException Example/VB/source.vb#1)]\"\n  syntax:\n    content: public virtual void ThrowException (Type excType);\n    parameters:\n    - id: excType\n      type: System.Type\n      description: The class of the type of exception to throw.\n  overload: System.Reflection.Emit.ILGenerator.ThrowException*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"<code>excType</code> is not the <xref href=\\\"System.Exception\\\"></xref> class or a derived class of <xref href=\\\"System.Exception\\\"></xref>.  \\n  \\n -or-  \\n  \\n The type does not have a default constructor.\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>excType</code> is `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/ILGenerator.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.ILGenerator.UsingNamespace(System.String)\n  commentId: M:System.Reflection.Emit.ILGenerator.UsingNamespace(System.String)\n  id: UsingNamespace(System.String)\n  parent: System.Reflection.Emit.ILGenerator\n  langs:\n  - csharp\n  name: UsingNamespace(String)\n  nameWithType: ILGenerator.UsingNamespace(String)\n  fullName: ILGenerator.UsingNamespace(String)\n  type: Method\n  assemblies:\n  - System.Reflection.Emit.ILGeneration\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Specifies the namespace to be used in evaluating locals and watches for the current active lexical scope.\n  remarks: If the current <xref:System.Reflection.Emit.ILGenerator> is associated with a <xref:System.Reflection.Emit.DynamicMethod> object, this method is not supported.\n  syntax:\n    content: public virtual void UsingNamespace (string usingNamespace);\n    parameters:\n    - id: usingNamespace\n      type: System.String\n      description: The namespace to be used in evaluating locals and watches for the current active lexical scope\n  overload: System.Reflection.Emit.ILGenerator.UsingNamespace*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: Length of <code>usingNamespace</code> is zero.\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>usingNamespace</code> is `null`.\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: This <xref href=\"System.Reflection.Emit.ILGenerator\"></xref> belongs to a <xref href=\"System.Reflection.Emit.DynamicMethod\"></xref>.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/ILGenerator.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.ILGenerator.System#Runtime#InteropServices#_ILGenerator#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)\n  commentId: M:System.Reflection.Emit.ILGenerator.System#Runtime#InteropServices#_ILGenerator#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)\n  id: System#Runtime#InteropServices#_ILGenerator#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)\n  isEii: true\n  parent: System.Reflection.Emit.ILGenerator\n  langs:\n  - csharp\n  name: _ILGenerator.GetIDsOfNames(Guid, IntPtr, UInt32, UInt32, IntPtr)\n  nameWithType: ILGenerator._ILGenerator.GetIDsOfNames(Guid, IntPtr, UInt32, UInt32, IntPtr)\n  fullName: ILGenerator._ILGenerator.GetIDsOfNames(Guid, IntPtr, UInt32, UInt32, IntPtr)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Maps a set of names to a corresponding set of dispatch identifiers.\n  remarks: This method is for accessing managed classes from unmanaged code, and should not be called from managed code. For more information about `IDispatch::GetIDsOfNames`, see the MSDN Library.\n  syntax:\n    content: void _ILGenerator.GetIDsOfNames (ref Guid riid, IntPtr rgszNames, uint cNames, uint lcid, IntPtr rgDispId);\n    parameters:\n    - id: riid\n      type: System.Guid\n      description: Reserved for future use. Must be IID_NULL.\n    - id: rgszNames\n      type: System.IntPtr\n      description: Passed-in array of names to be mapped.\n    - id: cNames\n      type: System.UInt32\n      description: Count of the names to be mapped.\n    - id: lcid\n      type: System.UInt32\n      description: The locale context in which to interpret the names.\n    - id: rgDispId\n      type: System.IntPtr\n      description: Caller-allocated array that receives the IDs corresponding to the names.\n  overload: System.Reflection.Emit.ILGenerator.System#Runtime#InteropServices#_ILGenerator#GetIDsOfNames*\n  exceptions:\n  - type: System.NotImplementedException\n    commentId: T:System.NotImplementedException\n    description: The method is called late-bound using the COM <code>IDispatch</code> interface.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/ILGenerator.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.ILGenerator.System#Runtime#InteropServices#_ILGenerator#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)\n  commentId: M:System.Reflection.Emit.ILGenerator.System#Runtime#InteropServices#_ILGenerator#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)\n  id: System#Runtime#InteropServices#_ILGenerator#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)\n  isEii: true\n  parent: System.Reflection.Emit.ILGenerator\n  langs:\n  - csharp\n  name: _ILGenerator.GetTypeInfo(UInt32, UInt32, IntPtr)\n  nameWithType: ILGenerator._ILGenerator.GetTypeInfo(UInt32, UInt32, IntPtr)\n  fullName: ILGenerator._ILGenerator.GetTypeInfo(UInt32, UInt32, IntPtr)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Retrieves the type information for an object, which can then be used to get the type information for an interface.\n  remarks: This method is for accessing managed classes from unmanaged code, and should not be called from managed code. For more information about `IDispatch::GetTypeInfo`, see the MSDN Library.\n  syntax:\n    content: void _ILGenerator.GetTypeInfo (uint iTInfo, uint lcid, IntPtr ppTInfo);\n    parameters:\n    - id: iTInfo\n      type: System.UInt32\n      description: The type information to return.\n    - id: lcid\n      type: System.UInt32\n      description: The locale identifier for the type information.\n    - id: ppTInfo\n      type: System.IntPtr\n      description: Receives a pointer to the requested type information object.\n  overload: System.Reflection.Emit.ILGenerator.System#Runtime#InteropServices#_ILGenerator#GetTypeInfo*\n  exceptions:\n  - type: System.NotImplementedException\n    commentId: T:System.NotImplementedException\n    description: The method is called late-bound using the COM <code>IDispatch</code> interface.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/ILGenerator.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.ILGenerator.System#Runtime#InteropServices#_ILGenerator#GetTypeInfoCount(System.UInt32@)\n  commentId: M:System.Reflection.Emit.ILGenerator.System#Runtime#InteropServices#_ILGenerator#GetTypeInfoCount(System.UInt32@)\n  id: System#Runtime#InteropServices#_ILGenerator#GetTypeInfoCount(System.UInt32@)\n  isEii: true\n  parent: System.Reflection.Emit.ILGenerator\n  langs:\n  - csharp\n  name: _ILGenerator.GetTypeInfoCount(UInt32)\n  nameWithType: ILGenerator._ILGenerator.GetTypeInfoCount(UInt32)\n  fullName: ILGenerator._ILGenerator.GetTypeInfoCount(UInt32)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Retrieves the number of type information interfaces that an object provides (either 0 or 1).\n  remarks: This method is for accessing managed classes from unmanaged code, and should not be called from managed code. For more information about `IDispatch::GetTypeInfoCount`, see the MSDN Library.\n  syntax:\n    content: void _ILGenerator.GetTypeInfoCount (out uint pcTInfo);\n    parameters:\n    - id: pcTInfo\n      type: System.UInt32\n      description: Points to a location that receives the number of type information interfaces provided by the object.\n  overload: System.Reflection.Emit.ILGenerator.System#Runtime#InteropServices#_ILGenerator#GetTypeInfoCount*\n  exceptions:\n  - type: System.NotImplementedException\n    commentId: T:System.NotImplementedException\n    description: The method is called late-bound using the COM <code>IDispatch</code> interface.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/ILGenerator.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.ILGenerator.System#Runtime#InteropServices#_ILGenerator#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)\n  commentId: M:System.Reflection.Emit.ILGenerator.System#Runtime#InteropServices#_ILGenerator#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)\n  id: System#Runtime#InteropServices#_ILGenerator#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)\n  isEii: true\n  parent: System.Reflection.Emit.ILGenerator\n  langs:\n  - csharp\n  name: _ILGenerator.Invoke(UInt32, Guid, UInt32, Int16, IntPtr, IntPtr, IntPtr, IntPtr)\n  nameWithType: ILGenerator._ILGenerator.Invoke(UInt32, Guid, UInt32, Int16, IntPtr, IntPtr, IntPtr, IntPtr)\n  fullName: ILGenerator._ILGenerator.Invoke(UInt32, Guid, UInt32, Int16, IntPtr, IntPtr, IntPtr, IntPtr)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Provides access to properties and methods exposed by an object.\n  remarks: This method is for accessing managed classes from unmanaged code, and should not be called from managed code. For more information about `IDispatch::Invoke`, see the MSDN Library.\n  syntax:\n    content: void _ILGenerator.Invoke (uint dispIdMember, ref Guid riid, uint lcid, short wFlags, IntPtr pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, IntPtr puArgErr);\n    parameters:\n    - id: dispIdMember\n      type: System.UInt32\n      description: Identifies the member.\n    - id: riid\n      type: System.Guid\n      description: Reserved for future use. Must be IID_NULL.\n    - id: lcid\n      type: System.UInt32\n      description: The locale context in which to interpret arguments.\n    - id: wFlags\n      type: System.Int16\n      description: Flags describing the context of the call.\n    - id: pDispParams\n      type: System.IntPtr\n      description: Pointer to a structure containing an array of arguments, an array of argument DISPIDs for named arguments, and counts for the number of elements in the arrays.\n    - id: pVarResult\n      type: System.IntPtr\n      description: Pointer to the location where the result is to be stored.\n    - id: pExcepInfo\n      type: System.IntPtr\n      description: Pointer to a structure that contains exception information.\n    - id: puArgErr\n      type: System.IntPtr\n      description: The index of the first argument that has an error.\n  overload: System.Reflection.Emit.ILGenerator.System#Runtime#InteropServices#_ILGenerator#Invoke*\n  exceptions:\n  - type: System.NotImplementedException\n    commentId: T:System.NotImplementedException\n    description: The method is called late-bound using the COM <code>IDispatch</code> interface.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/ILGenerator.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\nreferences:\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.ArgumentException\n  parent: System\n  isExternal: false\n  name: ArgumentException\n  nameWithType: ArgumentException\n  fullName: System.ArgumentException\n- uid: System.ArgumentNullException\n  parent: System\n  isExternal: false\n  name: ArgumentNullException\n  nameWithType: ArgumentNullException\n  fullName: System.ArgumentNullException\n- uid: System.NotSupportedException\n  parent: System\n  isExternal: false\n  name: NotSupportedException\n  nameWithType: NotSupportedException\n  fullName: System.NotSupportedException\n- uid: System.InvalidOperationException\n  parent: System\n  isExternal: false\n  name: InvalidOperationException\n  nameWithType: InvalidOperationException\n  fullName: System.InvalidOperationException\n- uid: System.ArgumentOutOfRangeException\n  parent: System\n  isExternal: false\n  name: ArgumentOutOfRangeException\n  nameWithType: ArgumentOutOfRangeException\n  fullName: System.ArgumentOutOfRangeException\n- uid: System.NotImplementedException\n  parent: System\n  isExternal: false\n  name: NotImplementedException\n  nameWithType: NotImplementedException\n  fullName: System.NotImplementedException\n- uid: System.Reflection.Emit.ILGenerator.BeginCatchBlock(System.Type)\n  parent: System.Reflection.Emit.ILGenerator\n  isExternal: false\n  name: BeginCatchBlock(Type)\n  nameWithType: ILGenerator.BeginCatchBlock(Type)\n  fullName: ILGenerator.BeginCatchBlock(Type)\n- uid: System.Type\n  parent: System\n  isExternal: false\n  name: Type\n  nameWithType: Type\n  fullName: System.Type\n- uid: System.Reflection.Emit.ILGenerator.BeginExceptFilterBlock\n  parent: System.Reflection.Emit.ILGenerator\n  isExternal: false\n  name: BeginExceptFilterBlock()\n  nameWithType: ILGenerator.BeginExceptFilterBlock()\n  fullName: ILGenerator.BeginExceptFilterBlock()\n- uid: System.Reflection.Emit.ILGenerator.BeginExceptionBlock\n  parent: System.Reflection.Emit.ILGenerator\n  isExternal: false\n  name: BeginExceptionBlock()\n  nameWithType: ILGenerator.BeginExceptionBlock()\n  fullName: ILGenerator.BeginExceptionBlock()\n- uid: System.Reflection.Emit.Label\n  parent: System.Reflection.Emit\n  isExternal: false\n  name: Label\n  nameWithType: Label\n  fullName: System.Reflection.Emit.Label\n- uid: System.Reflection.Emit.ILGenerator.BeginFaultBlock\n  parent: System.Reflection.Emit.ILGenerator\n  isExternal: false\n  name: BeginFaultBlock()\n  nameWithType: ILGenerator.BeginFaultBlock()\n  fullName: ILGenerator.BeginFaultBlock()\n- uid: System.Reflection.Emit.ILGenerator.BeginFinallyBlock\n  parent: System.Reflection.Emit.ILGenerator\n  isExternal: false\n  name: BeginFinallyBlock()\n  nameWithType: ILGenerator.BeginFinallyBlock()\n  fullName: ILGenerator.BeginFinallyBlock()\n- uid: System.Reflection.Emit.ILGenerator.BeginScope\n  parent: System.Reflection.Emit.ILGenerator\n  isExternal: false\n  name: BeginScope()\n  nameWithType: ILGenerator.BeginScope()\n  fullName: ILGenerator.BeginScope()\n- uid: System.Reflection.Emit.ILGenerator.DeclareLocal(System.Type)\n  parent: System.Reflection.Emit.ILGenerator\n  isExternal: false\n  name: DeclareLocal(Type)\n  nameWithType: ILGenerator.DeclareLocal(Type)\n  fullName: ILGenerator.DeclareLocal(Type)\n- uid: System.Reflection.Emit.LocalBuilder\n  parent: System.Reflection.Emit\n  isExternal: false\n  name: LocalBuilder\n  nameWithType: LocalBuilder\n  fullName: System.Reflection.Emit.LocalBuilder\n- uid: System.Reflection.Emit.ILGenerator.DeclareLocal(System.Type,System.Boolean)\n  parent: System.Reflection.Emit.ILGenerator\n  isExternal: false\n  name: DeclareLocal(Type, Boolean)\n  nameWithType: ILGenerator.DeclareLocal(Type, Boolean)\n  fullName: ILGenerator.DeclareLocal(Type, Boolean)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Reflection.Emit.ILGenerator.DefineLabel\n  parent: System.Reflection.Emit.ILGenerator\n  isExternal: false\n  name: DefineLabel()\n  nameWithType: ILGenerator.DefineLabel()\n  fullName: ILGenerator.DefineLabel()\n- uid: System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Type)\n  parent: System.Reflection.Emit.ILGenerator\n  isExternal: false\n  name: Emit(OpCode, Type)\n  nameWithType: ILGenerator.Emit(OpCode, Type)\n  fullName: ILGenerator.Emit(OpCode, Type)\n- uid: System.Reflection.Emit.OpCode\n  parent: System.Reflection.Emit\n  isExternal: false\n  name: OpCode\n  nameWithType: OpCode\n  fullName: System.Reflection.Emit.OpCode\n- uid: System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.String)\n  parent: System.Reflection.Emit.ILGenerator\n  isExternal: false\n  name: Emit(OpCode, String)\n  nameWithType: ILGenerator.Emit(OpCode, String)\n  fullName: ILGenerator.Emit(OpCode, String)\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Single)\n  parent: System.Reflection.Emit.ILGenerator\n  isExternal: false\n  name: Emit(OpCode, Single)\n  nameWithType: ILGenerator.Emit(OpCode, Single)\n  fullName: ILGenerator.Emit(OpCode, Single)\n- uid: System.Single\n  parent: System\n  isExternal: false\n  name: Single\n  nameWithType: Single\n  fullName: System.Single\n- uid: System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.SByte)\n  parent: System.Reflection.Emit.ILGenerator\n  isExternal: false\n  name: Emit(OpCode, SByte)\n  nameWithType: ILGenerator.Emit(OpCode, SByte)\n  fullName: ILGenerator.Emit(OpCode, SByte)\n- uid: System.SByte\n  parent: System\n  isExternal: false\n  name: SByte\n  nameWithType: SByte\n  fullName: System.SByte\n- uid: System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.FieldInfo)\n  parent: System.Reflection.Emit.ILGenerator\n  isExternal: false\n  name: Emit(OpCode, FieldInfo)\n  nameWithType: ILGenerator.Emit(OpCode, FieldInfo)\n  fullName: ILGenerator.Emit(OpCode, FieldInfo)\n- uid: System.Reflection.FieldInfo\n  parent: System.Reflection\n  isExternal: false\n  name: FieldInfo\n  nameWithType: FieldInfo\n  fullName: System.Reflection.FieldInfo\n- uid: System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.SignatureHelper)\n  parent: System.Reflection.Emit.ILGenerator\n  isExternal: false\n  name: Emit(OpCode, SignatureHelper)\n  nameWithType: ILGenerator.Emit(OpCode, SignatureHelper)\n  fullName: ILGenerator.Emit(OpCode, SignatureHelper)\n- uid: System.Reflection.Emit.SignatureHelper\n  parent: System.Reflection.Emit\n  isExternal: false\n  name: SignatureHelper\n  nameWithType: SignatureHelper\n  fullName: System.Reflection.Emit.SignatureHelper\n- uid: System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.LocalBuilder)\n  parent: System.Reflection.Emit.ILGenerator\n  isExternal: false\n  name: Emit(OpCode, LocalBuilder)\n  nameWithType: ILGenerator.Emit(OpCode, LocalBuilder)\n  fullName: ILGenerator.Emit(OpCode, LocalBuilder)\n- uid: System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.Label[])\n  parent: System.Reflection.Emit.ILGenerator\n  isExternal: false\n  name: Emit(OpCode, Label[])\n  nameWithType: ILGenerator.Emit(OpCode, Label[])\n  fullName: ILGenerator.Emit(OpCode, Label[])\n- uid: System.Reflection.Emit.Label[]\n  parent: System.Reflection.Emit\n  isExternal: false\n  name: Label[]\n  nameWithType: Label[]\n  fullName: System.Reflection.Emit.Label[]\n  spec.csharp:\n  - uid: System.Reflection.Emit.Label\n    name: Label\n    nameWithType: Label\n    fullName: System.Reflection.Emit.Label\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.MethodInfo)\n  parent: System.Reflection.Emit.ILGenerator\n  isExternal: false\n  name: Emit(OpCode, MethodInfo)\n  nameWithType: ILGenerator.Emit(OpCode, MethodInfo)\n  fullName: ILGenerator.Emit(OpCode, MethodInfo)\n- uid: System.Reflection.MethodInfo\n  parent: System.Reflection\n  isExternal: false\n  name: MethodInfo\n  nameWithType: MethodInfo\n  fullName: System.Reflection.MethodInfo\n- uid: System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.ConstructorInfo)\n  parent: System.Reflection.Emit.ILGenerator\n  isExternal: false\n  name: Emit(OpCode, ConstructorInfo)\n  nameWithType: ILGenerator.Emit(OpCode, ConstructorInfo)\n  fullName: ILGenerator.Emit(OpCode, ConstructorInfo)\n- uid: System.Reflection.ConstructorInfo\n  parent: System.Reflection\n  isExternal: false\n  name: ConstructorInfo\n  nameWithType: ConstructorInfo\n  fullName: System.Reflection.ConstructorInfo\n- uid: System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Int64)\n  parent: System.Reflection.Emit.ILGenerator\n  isExternal: false\n  name: Emit(OpCode, Int64)\n  nameWithType: ILGenerator.Emit(OpCode, Int64)\n  fullName: ILGenerator.Emit(OpCode, Int64)\n- uid: System.Int64\n  parent: System\n  isExternal: false\n  name: Int64\n  nameWithType: Int64\n  fullName: System.Int64\n- uid: System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Int32)\n  parent: System.Reflection.Emit.ILGenerator\n  isExternal: false\n  name: Emit(OpCode, Int32)\n  nameWithType: ILGenerator.Emit(OpCode, Int32)\n  fullName: ILGenerator.Emit(OpCode, Int32)\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Int16)\n  parent: System.Reflection.Emit.ILGenerator\n  isExternal: false\n  name: Emit(OpCode, Int16)\n  nameWithType: ILGenerator.Emit(OpCode, Int16)\n  fullName: ILGenerator.Emit(OpCode, Int16)\n- uid: System.Int16\n  parent: System\n  isExternal: false\n  name: Int16\n  nameWithType: Int16\n  fullName: System.Int16\n- uid: System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Double)\n  parent: System.Reflection.Emit.ILGenerator\n  isExternal: false\n  name: Emit(OpCode, Double)\n  nameWithType: ILGenerator.Emit(OpCode, Double)\n  fullName: ILGenerator.Emit(OpCode, Double)\n- uid: System.Double\n  parent: System\n  isExternal: false\n  name: Double\n  nameWithType: Double\n  fullName: System.Double\n- uid: System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Byte)\n  parent: System.Reflection.Emit.ILGenerator\n  isExternal: false\n  name: Emit(OpCode, Byte)\n  nameWithType: ILGenerator.Emit(OpCode, Byte)\n  fullName: ILGenerator.Emit(OpCode, Byte)\n- uid: System.Byte\n  parent: System\n  isExternal: false\n  name: Byte\n  nameWithType: Byte\n  fullName: System.Byte\n- uid: System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)\n  parent: System.Reflection.Emit.ILGenerator\n  isExternal: false\n  name: Emit(OpCode)\n  nameWithType: ILGenerator.Emit(OpCode)\n  fullName: ILGenerator.Emit(OpCode)\n- uid: System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.Label)\n  parent: System.Reflection.Emit.ILGenerator\n  isExternal: false\n  name: Emit(OpCode, Label)\n  nameWithType: ILGenerator.Emit(OpCode, Label)\n  fullName: ILGenerator.Emit(OpCode, Label)\n- uid: System.Reflection.Emit.ILGenerator.EmitCall(System.Reflection.Emit.OpCode,System.Reflection.MethodInfo,System.Type[])\n  parent: System.Reflection.Emit.ILGenerator\n  isExternal: false\n  name: EmitCall(OpCode, MethodInfo, Type[])\n  nameWithType: ILGenerator.EmitCall(OpCode, MethodInfo, Type[])\n  fullName: ILGenerator.EmitCall(OpCode, MethodInfo, Type[])\n- uid: System.Type[]\n  parent: System\n  isExternal: false\n  name: Type[]\n  nameWithType: Type[]\n  fullName: System.Type[]\n  spec.csharp:\n  - uid: System.Type\n    name: Type\n    nameWithType: Type\n    fullName: System.Type\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Reflection.Emit.ILGenerator.EmitCalli(System.Reflection.Emit.OpCode,System.Runtime.InteropServices.CallingConvention,System.Type,System.Type[])\n  parent: System.Reflection.Emit.ILGenerator\n  isExternal: false\n  name: EmitCalli(OpCode, CallingConvention, Type, Type[])\n  nameWithType: ILGenerator.EmitCalli(OpCode, CallingConvention, Type, Type[])\n  fullName: ILGenerator.EmitCalli(OpCode, CallingConvention, Type, Type[])\n- uid: System.Runtime.InteropServices.CallingConvention\n  parent: System.Runtime.InteropServices\n  isExternal: false\n  name: CallingConvention\n  nameWithType: CallingConvention\n  fullName: System.Runtime.InteropServices.CallingConvention\n- uid: System.Reflection.Emit.ILGenerator.EmitCalli(System.Reflection.Emit.OpCode,System.Reflection.CallingConventions,System.Type,System.Type[],System.Type[])\n  parent: System.Reflection.Emit.ILGenerator\n  isExternal: false\n  name: EmitCalli(OpCode, CallingConventions, Type, Type[], Type[])\n  nameWithType: ILGenerator.EmitCalli(OpCode, CallingConventions, Type, Type[], Type[])\n  fullName: ILGenerator.EmitCalli(OpCode, CallingConventions, Type, Type[], Type[])\n- uid: System.Reflection.CallingConventions\n  parent: System.Reflection\n  isExternal: false\n  name: CallingConventions\n  nameWithType: CallingConventions\n  fullName: System.Reflection.CallingConventions\n- uid: System.Reflection.Emit.ILGenerator.EmitWriteLine(System.String)\n  parent: System.Reflection.Emit.ILGenerator\n  isExternal: false\n  name: EmitWriteLine(String)\n  nameWithType: ILGenerator.EmitWriteLine(String)\n  fullName: ILGenerator.EmitWriteLine(String)\n- uid: System.Reflection.Emit.ILGenerator.EmitWriteLine(System.Reflection.FieldInfo)\n  parent: System.Reflection.Emit.ILGenerator\n  isExternal: false\n  name: EmitWriteLine(FieldInfo)\n  nameWithType: ILGenerator.EmitWriteLine(FieldInfo)\n  fullName: ILGenerator.EmitWriteLine(FieldInfo)\n- uid: System.Reflection.Emit.ILGenerator.EmitWriteLine(System.Reflection.Emit.LocalBuilder)\n  parent: System.Reflection.Emit.ILGenerator\n  isExternal: false\n  name: EmitWriteLine(LocalBuilder)\n  nameWithType: ILGenerator.EmitWriteLine(LocalBuilder)\n  fullName: ILGenerator.EmitWriteLine(LocalBuilder)\n- uid: System.Reflection.Emit.ILGenerator.EndExceptionBlock\n  parent: System.Reflection.Emit.ILGenerator\n  isExternal: false\n  name: EndExceptionBlock()\n  nameWithType: ILGenerator.EndExceptionBlock()\n  fullName: ILGenerator.EndExceptionBlock()\n- uid: System.Reflection.Emit.ILGenerator.EndScope\n  parent: System.Reflection.Emit.ILGenerator\n  isExternal: false\n  name: EndScope()\n  nameWithType: ILGenerator.EndScope()\n  fullName: ILGenerator.EndScope()\n- uid: System.Reflection.Emit.ILGenerator.ILOffset\n  parent: System.Reflection.Emit.ILGenerator\n  isExternal: false\n  name: ILOffset\n  nameWithType: ILGenerator.ILOffset\n  fullName: ILGenerator.ILOffset\n- uid: System.Reflection.Emit.ILGenerator.MarkLabel(System.Reflection.Emit.Label)\n  parent: System.Reflection.Emit.ILGenerator\n  isExternal: false\n  name: MarkLabel(Label)\n  nameWithType: ILGenerator.MarkLabel(Label)\n  fullName: ILGenerator.MarkLabel(Label)\n- uid: System.Reflection.Emit.ILGenerator.MarkSequencePoint(System.Diagnostics.SymbolStore.ISymbolDocumentWriter,System.Int32,System.Int32,System.Int32,System.Int32)\n  parent: System.Reflection.Emit.ILGenerator\n  isExternal: false\n  name: MarkSequencePoint(ISymbolDocumentWriter, Int32, Int32, Int32, Int32)\n  nameWithType: ILGenerator.MarkSequencePoint(ISymbolDocumentWriter, Int32, Int32, Int32, Int32)\n  fullName: ILGenerator.MarkSequencePoint(ISymbolDocumentWriter, Int32, Int32, Int32, Int32)\n- uid: System.Diagnostics.SymbolStore.ISymbolDocumentWriter\n  parent: System.Diagnostics.SymbolStore\n  isExternal: false\n  name: ISymbolDocumentWriter\n  nameWithType: ISymbolDocumentWriter\n  fullName: System.Diagnostics.SymbolStore.ISymbolDocumentWriter\n- uid: System.Reflection.Emit.ILGenerator.ThrowException(System.Type)\n  parent: System.Reflection.Emit.ILGenerator\n  isExternal: false\n  name: ThrowException(Type)\n  nameWithType: ILGenerator.ThrowException(Type)\n  fullName: ILGenerator.ThrowException(Type)\n- uid: System.Reflection.Emit.ILGenerator.UsingNamespace(System.String)\n  parent: System.Reflection.Emit.ILGenerator\n  isExternal: false\n  name: UsingNamespace(String)\n  nameWithType: ILGenerator.UsingNamespace(String)\n  fullName: ILGenerator.UsingNamespace(String)\n- uid: System.Reflection.Emit.ILGenerator.System#Runtime#InteropServices#_ILGenerator#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)\n  parent: System.Reflection.Emit.ILGenerator\n  isExternal: false\n  name: _ILGenerator.GetIDsOfNames(Guid, IntPtr, UInt32, UInt32, IntPtr)\n  nameWithType: ILGenerator._ILGenerator.GetIDsOfNames(Guid, IntPtr, UInt32, UInt32, IntPtr)\n  fullName: ILGenerator._ILGenerator.GetIDsOfNames(Guid, IntPtr, UInt32, UInt32, IntPtr)\n- uid: System.Guid\n  parent: System\n  isExternal: false\n  name: Guid\n  nameWithType: Guid\n  fullName: System.Guid\n- uid: System.IntPtr\n  parent: System\n  isExternal: false\n  name: IntPtr\n  nameWithType: IntPtr\n  fullName: System.IntPtr\n- uid: System.UInt32\n  parent: System\n  isExternal: false\n  name: UInt32\n  nameWithType: UInt32\n  fullName: System.UInt32\n- uid: System.Reflection.Emit.ILGenerator.System#Runtime#InteropServices#_ILGenerator#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)\n  parent: System.Reflection.Emit.ILGenerator\n  isExternal: false\n  name: _ILGenerator.GetTypeInfo(UInt32, UInt32, IntPtr)\n  nameWithType: ILGenerator._ILGenerator.GetTypeInfo(UInt32, UInt32, IntPtr)\n  fullName: ILGenerator._ILGenerator.GetTypeInfo(UInt32, UInt32, IntPtr)\n- uid: System.Reflection.Emit.ILGenerator.System#Runtime#InteropServices#_ILGenerator#GetTypeInfoCount(System.UInt32@)\n  parent: System.Reflection.Emit.ILGenerator\n  isExternal: false\n  name: _ILGenerator.GetTypeInfoCount(UInt32)\n  nameWithType: ILGenerator._ILGenerator.GetTypeInfoCount(UInt32)\n  fullName: ILGenerator._ILGenerator.GetTypeInfoCount(UInt32)\n- uid: System.Reflection.Emit.ILGenerator.System#Runtime#InteropServices#_ILGenerator#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)\n  parent: System.Reflection.Emit.ILGenerator\n  isExternal: false\n  name: _ILGenerator.Invoke(UInt32, Guid, UInt32, Int16, IntPtr, IntPtr, IntPtr, IntPtr)\n  nameWithType: ILGenerator._ILGenerator.Invoke(UInt32, Guid, UInt32, Int16, IntPtr, IntPtr, IntPtr, IntPtr)\n  fullName: ILGenerator._ILGenerator.Invoke(UInt32, Guid, UInt32, Int16, IntPtr, IntPtr, IntPtr, IntPtr)\n- uid: System.Reflection.Emit.ILGenerator.BeginCatchBlock*\n  parent: System.Reflection.Emit.ILGenerator\n  isExternal: false\n  name: BeginCatchBlock\n  nameWithType: ILGenerator.BeginCatchBlock\n  fullName: ILGenerator.BeginCatchBlock\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/ILGenerator.xml\n- uid: System.Reflection.Emit.ILGenerator.BeginExceptFilterBlock*\n  parent: System.Reflection.Emit.ILGenerator\n  isExternal: false\n  name: BeginExceptFilterBlock\n  nameWithType: ILGenerator.BeginExceptFilterBlock\n  fullName: ILGenerator.BeginExceptFilterBlock\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/ILGenerator.xml\n- uid: System.Reflection.Emit.ILGenerator.BeginExceptionBlock*\n  parent: System.Reflection.Emit.ILGenerator\n  isExternal: false\n  name: BeginExceptionBlock\n  nameWithType: ILGenerator.BeginExceptionBlock\n  fullName: ILGenerator.BeginExceptionBlock\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/ILGenerator.xml\n- uid: System.Reflection.Emit.ILGenerator.BeginFaultBlock*\n  parent: System.Reflection.Emit.ILGenerator\n  isExternal: false\n  name: BeginFaultBlock\n  nameWithType: ILGenerator.BeginFaultBlock\n  fullName: ILGenerator.BeginFaultBlock\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/ILGenerator.xml\n- uid: System.Reflection.Emit.ILGenerator.BeginFinallyBlock*\n  parent: System.Reflection.Emit.ILGenerator\n  isExternal: false\n  name: BeginFinallyBlock\n  nameWithType: ILGenerator.BeginFinallyBlock\n  fullName: ILGenerator.BeginFinallyBlock\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/ILGenerator.xml\n- uid: System.Reflection.Emit.ILGenerator.BeginScope*\n  parent: System.Reflection.Emit.ILGenerator\n  isExternal: false\n  name: BeginScope\n  nameWithType: ILGenerator.BeginScope\n  fullName: ILGenerator.BeginScope\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/ILGenerator.xml\n- uid: System.Reflection.Emit.ILGenerator.DeclareLocal*\n  parent: System.Reflection.Emit.ILGenerator\n  isExternal: false\n  name: DeclareLocal\n  nameWithType: ILGenerator.DeclareLocal\n  fullName: ILGenerator.DeclareLocal\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/ILGenerator.xml\n- uid: System.Reflection.Emit.ILGenerator.DefineLabel*\n  parent: System.Reflection.Emit.ILGenerator\n  isExternal: false\n  name: DefineLabel\n  nameWithType: ILGenerator.DefineLabel\n  fullName: ILGenerator.DefineLabel\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/ILGenerator.xml\n- uid: System.Reflection.Emit.ILGenerator.Emit*\n  parent: System.Reflection.Emit.ILGenerator\n  isExternal: false\n  name: Emit\n  nameWithType: ILGenerator.Emit\n  fullName: ILGenerator.Emit\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/ILGenerator.xml\n- uid: System.Reflection.Emit.ILGenerator.EmitCall*\n  parent: System.Reflection.Emit.ILGenerator\n  isExternal: false\n  name: EmitCall\n  nameWithType: ILGenerator.EmitCall\n  fullName: ILGenerator.EmitCall\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/ILGenerator.xml\n- uid: System.Reflection.Emit.ILGenerator.EmitCalli*\n  parent: System.Reflection.Emit.ILGenerator\n  isExternal: false\n  name: EmitCalli\n  nameWithType: ILGenerator.EmitCalli\n  fullName: ILGenerator.EmitCalli\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - xamarinios-10.8\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/ILGenerator.xml\n- uid: System.Reflection.Emit.ILGenerator.EmitWriteLine*\n  parent: System.Reflection.Emit.ILGenerator\n  isExternal: false\n  name: EmitWriteLine\n  nameWithType: ILGenerator.EmitWriteLine\n  fullName: ILGenerator.EmitWriteLine\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/ILGenerator.xml\n- uid: System.Reflection.Emit.ILGenerator.EndExceptionBlock*\n  parent: System.Reflection.Emit.ILGenerator\n  isExternal: false\n  name: EndExceptionBlock\n  nameWithType: ILGenerator.EndExceptionBlock\n  fullName: ILGenerator.EndExceptionBlock\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/ILGenerator.xml\n- uid: System.Reflection.Emit.ILGenerator.EndScope*\n  parent: System.Reflection.Emit.ILGenerator\n  isExternal: false\n  name: EndScope\n  nameWithType: ILGenerator.EndScope\n  fullName: ILGenerator.EndScope\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/ILGenerator.xml\n- uid: System.Reflection.Emit.ILGenerator.ILOffset*\n  parent: System.Reflection.Emit.ILGenerator\n  isExternal: false\n  name: ILOffset\n  nameWithType: ILGenerator.ILOffset\n  fullName: ILGenerator.ILOffset\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/ILGenerator.xml\n- uid: System.Reflection.Emit.ILGenerator.MarkLabel*\n  parent: System.Reflection.Emit.ILGenerator\n  isExternal: false\n  name: MarkLabel\n  nameWithType: ILGenerator.MarkLabel\n  fullName: ILGenerator.MarkLabel\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/ILGenerator.xml\n- uid: System.Reflection.Emit.ILGenerator.MarkSequencePoint*\n  parent: System.Reflection.Emit.ILGenerator\n  isExternal: false\n  name: MarkSequencePoint\n  nameWithType: ILGenerator.MarkSequencePoint\n  fullName: ILGenerator.MarkSequencePoint\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/ILGenerator.xml\n- uid: System.Reflection.Emit.ILGenerator.ThrowException*\n  parent: System.Reflection.Emit.ILGenerator\n  isExternal: false\n  name: ThrowException\n  nameWithType: ILGenerator.ThrowException\n  fullName: ILGenerator.ThrowException\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/ILGenerator.xml\n- uid: System.Reflection.Emit.ILGenerator.UsingNamespace*\n  parent: System.Reflection.Emit.ILGenerator\n  isExternal: false\n  name: UsingNamespace\n  nameWithType: ILGenerator.UsingNamespace\n  fullName: ILGenerator.UsingNamespace\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/ILGenerator.xml\n- uid: System.Reflection.Emit.ILGenerator.System#Runtime#InteropServices#_ILGenerator#GetIDsOfNames*\n  parent: System.Reflection.Emit.ILGenerator\n  isExternal: false\n  name: System.Runtime.InteropServices._ILGenerator.GetIDsOfNames\n  nameWithType: ILGenerator.System.Runtime.InteropServices._ILGenerator.GetIDsOfNames\n  fullName: ILGenerator.System.Runtime.InteropServices._ILGenerator.GetIDsOfNames\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/ILGenerator.xml\n- uid: System.Reflection.Emit.ILGenerator.System#Runtime#InteropServices#_ILGenerator#GetTypeInfo*\n  parent: System.Reflection.Emit.ILGenerator\n  isExternal: false\n  name: System.Runtime.InteropServices._ILGenerator.GetTypeInfo\n  nameWithType: ILGenerator.System.Runtime.InteropServices._ILGenerator.GetTypeInfo\n  fullName: ILGenerator.System.Runtime.InteropServices._ILGenerator.GetTypeInfo\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/ILGenerator.xml\n- uid: System.Reflection.Emit.ILGenerator.System#Runtime#InteropServices#_ILGenerator#GetTypeInfoCount*\n  parent: System.Reflection.Emit.ILGenerator\n  isExternal: false\n  name: System.Runtime.InteropServices._ILGenerator.GetTypeInfoCount\n  nameWithType: ILGenerator.System.Runtime.InteropServices._ILGenerator.GetTypeInfoCount\n  fullName: ILGenerator.System.Runtime.InteropServices._ILGenerator.GetTypeInfoCount\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/ILGenerator.xml\n- uid: System.Reflection.Emit.ILGenerator.System#Runtime#InteropServices#_ILGenerator#Invoke*\n  parent: System.Reflection.Emit.ILGenerator\n  isExternal: false\n  name: System.Runtime.InteropServices._ILGenerator.Invoke\n  nameWithType: ILGenerator.System.Runtime.InteropServices._ILGenerator.Invoke\n  fullName: ILGenerator.System.Runtime.InteropServices._ILGenerator.Invoke\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/ILGenerator.xml\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: Object.Equals(Object)\n  fullName: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: Object.GetHashCode()\n  fullName: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: false\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: false\n  name: ToString()\n  nameWithType: Object.ToString()\n  fullName: Object.ToString()\n- uid: System.Runtime.InteropServices._ILGenerator\n  parent: System.Runtime.InteropServices\n  isExternal: false\n  name: _ILGenerator\n  nameWithType: _ILGenerator\n  fullName: System.Runtime.InteropServices._ILGenerator\n"}