{"nodes":[{"content":"Represents a combination of a user's identity, an access mask, and an access control type (allow or deny). An AccessRule`1 object also contains information about the how the rule is inherited by child objects and how that inheritance is propagated.","nodes":[{"pos":[0,248],"content":"Represents a combination of a user's identity, an access mask, and an access control type (allow or deny). An AccessRule`1 object also contains information about the how the rule is inherited by child objects and how that inheritance is propagated.","nodes":[{"content":"Represents a combination of a user's identity, an access mask, and an access control type (allow or deny). An AccessRule`1 object also contains information about the how the rule is inherited by child objects and how that inheritance is propagated.","pos":[0,248],"nodes":[{"content":"Represents a combination of a user's identity, an access mask, and an access control type (allow or deny).","pos":[0,106]},{"content":"An AccessRule`1 object also contains information about the how the rule is inherited by child objects and how that inheritance is propagated.","pos":[107,248]}]}]}],"pos":[1210,1459],"yaml":true},{"content":"Access rights (permissions) are type T, which you can type-cast to or from an int. For example, you can cast a <xref:System.Security.AccessControl.FileSystemRights> as the access rights type, and then use the instance normally. In contrast, <xref:System.Security.AccessControl.AccessRule> always takes access rights of type int.","nodes":[{"pos":[0,328],"content":"Access rights (permissions) are type T, which you can type-cast to or from an int. For example, you can cast a <xref:System.Security.AccessControl.FileSystemRights> as the access rights type, and then use the instance normally. In contrast, <xref:System.Security.AccessControl.AccessRule> always takes access rights of type int.","nodes":[{"content":"Access rights (permissions) are type T, which you can type-cast to or from an int. For example, you can cast a <xref:System.Security.AccessControl.FileSystemRights> as the access rights type, and then use the instance normally. In contrast, <xref:System.Security.AccessControl.AccessRule> always takes access rights of type int.","pos":[0,328],"nodes":[{"content":"Access rights (permissions) are type T, which you can type-cast to or from an int.","pos":[0,82]},{"content":"For example, you can cast a <ph id=\"ph1\">&lt;xref:System.Security.AccessControl.FileSystemRights&gt;</ph> as the access rights type, and then use the instance normally.","pos":[83,227],"source":" For example, you can cast a <xref:System.Security.AccessControl.FileSystemRights> as the access rights type, and then use the instance normally."},{"content":"In contrast, <ph id=\"ph1\">&lt;xref:System.Security.AccessControl.AccessRule&gt;</ph> always takes access rights of type int.","pos":[228,328],"source":" In contrast, <xref:System.Security.AccessControl.AccessRule> always takes access rights of type int."}]}]}],"pos":[1470,1799],"yaml":true,"extradata":"MT"},{"content":"The access rights type for the access rule.","nodes":[{"pos":[0,43],"content":"The access rights type for the access rule.","nodes":[{"content":"The access rights type for the access rule.","pos":[0,43]}]}],"pos":[1962,2006],"yaml":true},{"content":"Initializes a new instance of the AccessRule’1 class by using the specified values.","nodes":[{"pos":[0,83],"content":"Initializes a new instance of the AccessRule’1 class by using the specified values.","nodes":[{"content":"Initializes a new instance of the AccessRule’1 class by using the specified values.","pos":[0,83]}]}],"pos":[4464,4548],"yaml":true},{"content":"The identity to which the access rule applies.","nodes":[{"pos":[0,46],"content":"The identity to which the access rule applies.","nodes":[{"content":"The identity to which the access rule applies.","pos":[0,46]}]}],"pos":[4819,4866],"yaml":true},{"content":"The rights of the access rule.","nodes":[{"pos":[0,30],"content":"The rights of the access rule.","nodes":[{"content":"The rights of the access rule.","pos":[0,30]}]}],"pos":[4916,4947],"yaml":true},{"content":"The valid access control type.","nodes":[{"pos":[0,30],"content":"The valid access control type.","nodes":[{"content":"The valid access control type.","pos":[0,30]}]}],"pos":[5041,5072],"yaml":true},{"content":"Initializes a new instance of the AccessRule’1 class by using the specified values.","nodes":[{"pos":[0,83],"content":"Initializes a new instance of the AccessRule’1 class by using the specified values.","nodes":[{"content":"Initializes a new instance of the AccessRule’1 class by using the specified values.","pos":[0,83]}]}],"pos":[6647,6731],"yaml":true},{"content":"The identity to which the access rule applies.","nodes":[{"pos":[0,46],"content":"The identity to which the access rule applies.","nodes":[{"content":"The identity to which the access rule applies.","pos":[0,46]}]}],"pos":[6935,6982],"yaml":true},{"content":"The rights of the access rule.","nodes":[{"pos":[0,30],"content":"The rights of the access rule.","nodes":[{"content":"The rights of the access rule.","pos":[0,30]}]}],"pos":[7032,7063],"yaml":true},{"content":"The valid access control type.","nodes":[{"pos":[0,30],"content":"The valid access control type.","nodes":[{"content":"The valid access control type.","pos":[0,30]}]}],"pos":[7157,7188],"yaml":true},{"content":"Initializes a new instance of the AccessRule’1 class by using the specified values.","nodes":[{"pos":[0,83],"content":"Initializes a new instance of the AccessRule’1 class by using the specified values.","nodes":[{"content":"Initializes a new instance of the AccessRule’1 class by using the specified values.","pos":[0,83]}]}],"pos":[9276,9360],"yaml":true},{"content":"The identity to which the access rule applies.","nodes":[{"pos":[0,46],"content":"The identity to which the access rule applies.","nodes":[{"content":"The identity to which the access rule applies.","pos":[0,46]}]}],"pos":[9761,9808],"yaml":true},{"content":"The rights of the access rule.","nodes":[{"pos":[0,30],"content":"The rights of the access rule.","nodes":[{"content":"The rights of the access rule.","pos":[0,30]}]}],"pos":[9858,9889],"yaml":true},{"content":"The inheritance properties of the access rule.","nodes":[{"pos":[0,46],"content":"The inheritance properties of the access rule.","nodes":[{"content":"The inheritance properties of the access rule.","pos":[0,46]}]}],"pos":[9994,10041],"yaml":true},{"content":"Whether inherited access rules are automatically propagated. The propagation flags are ignored if <code>inheritanceFlags</code> is set to <xref href=\"System.Security.AccessControl.InheritanceFlags.None\"></xref>.","nodes":[{"pos":[0,211],"content":"Whether inherited access rules are automatically propagated. The propagation flags are ignored if <code>inheritanceFlags</code> is set to <xref href=\"System.Security.AccessControl.InheritanceFlags.None\"></xref>.","nodes":[{"content":"Whether inherited access rules are automatically propagated.","pos":[0,60]},{"content":"The propagation flags are ignored if <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">inheritanceFlags</ph><ept id=\"p1\">&lt;/code&gt;</ept> is set to <ph id=\"ph2\">&lt;xref href=\"System.Security.AccessControl.InheritanceFlags.None\"&gt;&lt;/xref&gt;</ph>.","pos":[61,211],"source":" The propagation flags are ignored if <code>inheritanceFlags</code> is set to <xref href=\"System.Security.AccessControl.InheritanceFlags.None\"></xref>."}]}],"pos":[10146,10358],"yaml":true},{"content":"The valid access control type.","nodes":[{"pos":[0,30],"content":"The valid access control type.","nodes":[{"content":"The valid access control type.","pos":[0,30]}]}],"pos":[10452,10483],"yaml":true},{"content":"Initializes a new instance of the AccessRule’1 class by using the specified values.","nodes":[{"pos":[0,83],"content":"Initializes a new instance of the AccessRule’1 class by using the specified values.","nodes":[{"content":"Initializes a new instance of the AccessRule’1 class by using the specified values.","pos":[0,83]}]}],"pos":[12448,12532],"yaml":true},{"content":"The identity to which the access rule applies.","nodes":[{"pos":[0,46],"content":"The identity to which the access rule applies.","nodes":[{"content":"The identity to which the access rule applies.","pos":[0,46]}]}],"pos":[12866,12913],"yaml":true},{"content":"The rights of the access rule.","nodes":[{"pos":[0,30],"content":"The rights of the access rule.","nodes":[{"content":"The rights of the access rule.","pos":[0,30]}]}],"pos":[12963,12994],"yaml":true},{"content":"The inheritance properties of the access rule.","nodes":[{"pos":[0,46],"content":"The inheritance properties of the access rule.","nodes":[{"content":"The inheritance properties of the access rule.","pos":[0,46]}]}],"pos":[13099,13146],"yaml":true},{"content":"Whether inherited access rules are automatically propagated. The propagation flags are ignored if <code>inheritanceFlags</code> is set to <xref href=\"System.Security.AccessControl.InheritanceFlags.None\"></xref>.","nodes":[{"pos":[0,211],"content":"Whether inherited access rules are automatically propagated. The propagation flags are ignored if <code>inheritanceFlags</code> is set to <xref href=\"System.Security.AccessControl.InheritanceFlags.None\"></xref>.","nodes":[{"content":"Whether inherited access rules are automatically propagated.","pos":[0,60]},{"content":"The propagation flags are ignored if <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">inheritanceFlags</ph><ept id=\"p1\">&lt;/code&gt;</ept> is set to <ph id=\"ph2\">&lt;xref href=\"System.Security.AccessControl.InheritanceFlags.None\"&gt;&lt;/xref&gt;</ph>.","pos":[61,211],"source":" The propagation flags are ignored if <code>inheritanceFlags</code> is set to <xref href=\"System.Security.AccessControl.InheritanceFlags.None\"></xref>."}]}],"pos":[13251,13463],"yaml":true},{"content":"The valid access control type.","nodes":[{"pos":[0,30],"content":"The valid access control type.","nodes":[{"content":"The valid access control type.","pos":[0,30]}]}],"pos":[13557,13588],"yaml":true},{"content":"Gets the rights of the current instance.","nodes":[{"pos":[0,40],"content":"Gets the rights of the current instance.","nodes":[{"content":"Gets the rights of the current instance.","pos":[0,40]}]}],"pos":[14852,14893],"yaml":true},{"content":"This property contains the same information as the AccessMask property, but cast as type \\<T>.","nodes":[{"pos":[0,94],"content":"This property contains the same information as the AccessMask property, but cast as type \\<T>.","nodes":[{"content":"This property contains the same information as the AccessMask property, but cast as type <ph id=\"ph1\">\\&lt;</ph>T&gt;.","pos":[0,94],"source":"This property contains the same information as the AccessMask property, but cast as type \\<T>."}]}],"pos":[14904,14999],"yaml":true,"extradata":"MT"},{"content":"The rights, cast as type <T>, of the current instance.","nodes":[{"pos":[0,54],"content":"The rights, cast as type <ph id=\"ph1\">&lt;T&gt;</ph>, of the current instance.","source":"The rights, cast as type <T>, of the current instance."}],"pos":[15092,15147],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Security.AccessControl.AccessRule`1\n  commentId: T:System.Security.AccessControl.AccessRule`1\n  id: AccessRule`1\n  children:\n  - System.Security.AccessControl.AccessRule`1.#ctor(System.Security.Principal.IdentityReference,`0,System.Security.AccessControl.AccessControlType)\n  - System.Security.AccessControl.AccessRule`1.#ctor(System.String,`0,System.Security.AccessControl.AccessControlType)\n  - System.Security.AccessControl.AccessRule`1.#ctor(System.Security.Principal.IdentityReference,`0,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)\n  - System.Security.AccessControl.AccessRule`1.#ctor(System.String,`0,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)\n  - System.Security.AccessControl.AccessRule`1.Rights\n  langs:\n  - csharp\n  name: AccessRule<T>\n  nameWithType: AccessRule<T>\n  fullName: System.Security.AccessControl.AccessRule<T>\n  type: Class\n  assemblies:\n  - System.Security.AccessControl\n  - mscorlib\n  namespace: System.Security.AccessControl\n  summary: Represents a combination of a user's identity, an access mask, and an access control type (allow or deny). An AccessRule`1 object also contains information about the how the rule is inherited by child objects and how that inheritance is propagated.\n  remarks: Access rights (permissions) are type T, which you can type-cast to or from an int. For example, you can cast a <xref:System.Security.AccessControl.FileSystemRights> as the access rights type, and then use the instance normally. In contrast, <xref:System.Security.AccessControl.AccessRule> always takes access rights of type int.\n  syntax:\n    content: 'public class AccessRule<T> : System.Security.AccessControl.AccessRule where T : struct'\n    typeParameters:\n    - id: T\n      description: The access rights type for the access rule.\n  inheritance:\n  - System.Object\n  - System.Security.AccessControl.AuthorizationRule\n  - System.Security.AccessControl.AccessRule\n  implements: []\n  inheritedMembers:\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.ToString\n  - System.Security.AccessControl.AccessRule.AccessControlType\n  - System.Security.AccessControl.AuthorizationRule.AccessMask\n  - System.Security.AccessControl.AuthorizationRule.IdentityReference\n  - System.Security.AccessControl.AuthorizationRule.InheritanceFlags\n  - System.Security.AccessControl.AuthorizationRule.IsInherited\n  - System.Security.AccessControl.AuthorizationRule.PropagationFlags\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.AccessControl/AccessRule`1.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.AccessControl.AccessRule`1.#ctor(System.Security.Principal.IdentityReference,`0,System.Security.AccessControl.AccessControlType)\n  commentId: M:System.Security.AccessControl.AccessRule`1.#ctor(System.Security.Principal.IdentityReference,`0,System.Security.AccessControl.AccessControlType)\n  id: '#ctor(System.Security.Principal.IdentityReference,`0,System.Security.AccessControl.AccessControlType)'\n  parent: System.Security.AccessControl.AccessRule`1\n  langs:\n  - csharp\n  name: AccessRule<T>(IdentityReference, T, AccessControlType)\n  nameWithType: AccessRule<T>.AccessRule<T>(IdentityReference, T, AccessControlType)\n  fullName: AccessRule<T>.AccessRule<T>(IdentityReference, T, AccessControlType)\n  type: Constructor\n  assemblies:\n  - System.Security.AccessControl\n  - mscorlib\n  namespace: System.Security.AccessControl\n  summary: Initializes a new instance of the AccessRule’1 class by using the specified values.\n  syntax:\n    content: public AccessRule (System.Security.Principal.IdentityReference identity, T rights, System.Security.AccessControl.AccessControlType type);\n    parameters:\n    - id: identity\n      type: System.Security.Principal.IdentityReference\n      description: The identity to which the access rule applies.\n    - id: rights\n      type: T\n      description: The rights of the access rule.\n    - id: type\n      type: System.Security.AccessControl.AccessControlType\n      description: The valid access control type.\n  overload: System.Security.AccessControl.AccessRule`1.#ctor*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.AccessControl/AccessRule`1.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.AccessControl.AccessRule`1.#ctor(System.String,`0,System.Security.AccessControl.AccessControlType)\n  commentId: M:System.Security.AccessControl.AccessRule`1.#ctor(System.String,`0,System.Security.AccessControl.AccessControlType)\n  id: '#ctor(System.String,`0,System.Security.AccessControl.AccessControlType)'\n  parent: System.Security.AccessControl.AccessRule`1\n  langs:\n  - csharp\n  name: AccessRule<T>(String, T, AccessControlType)\n  nameWithType: AccessRule<T>.AccessRule<T>(String, T, AccessControlType)\n  fullName: AccessRule<T>.AccessRule<T>(String, T, AccessControlType)\n  type: Constructor\n  assemblies:\n  - System.Security.AccessControl\n  - mscorlib\n  namespace: System.Security.AccessControl\n  summary: Initializes a new instance of the AccessRule’1 class by using the specified values.\n  syntax:\n    content: public AccessRule (string identity, T rights, System.Security.AccessControl.AccessControlType type);\n    parameters:\n    - id: identity\n      type: System.String\n      description: The identity to which the access rule applies.\n    - id: rights\n      type: T\n      description: The rights of the access rule.\n    - id: type\n      type: System.Security.AccessControl.AccessControlType\n      description: The valid access control type.\n  overload: System.Security.AccessControl.AccessRule`1.#ctor*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.AccessControl/AccessRule`1.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.AccessControl.AccessRule`1.#ctor(System.Security.Principal.IdentityReference,`0,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)\n  commentId: M:System.Security.AccessControl.AccessRule`1.#ctor(System.Security.Principal.IdentityReference,`0,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)\n  id: '#ctor(System.Security.Principal.IdentityReference,`0,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)'\n  parent: System.Security.AccessControl.AccessRule`1\n  langs:\n  - csharp\n  name: AccessRule<T>(IdentityReference, T, InheritanceFlags, PropagationFlags, AccessControlType)\n  nameWithType: AccessRule<T>.AccessRule<T>(IdentityReference, T, InheritanceFlags, PropagationFlags, AccessControlType)\n  fullName: AccessRule<T>.AccessRule<T>(IdentityReference, T, InheritanceFlags, PropagationFlags, AccessControlType)\n  type: Constructor\n  assemblies:\n  - System.Security.AccessControl\n  - mscorlib\n  namespace: System.Security.AccessControl\n  summary: Initializes a new instance of the AccessRule’1 class by using the specified values.\n  syntax:\n    content: public AccessRule (System.Security.Principal.IdentityReference identity, T rights, System.Security.AccessControl.InheritanceFlags inheritanceFlags, System.Security.AccessControl.PropagationFlags propagationFlags, System.Security.AccessControl.AccessControlType type);\n    parameters:\n    - id: identity\n      type: System.Security.Principal.IdentityReference\n      description: The identity to which the access rule applies.\n    - id: rights\n      type: T\n      description: The rights of the access rule.\n    - id: inheritanceFlags\n      type: System.Security.AccessControl.InheritanceFlags\n      description: The inheritance properties of the access rule.\n    - id: propagationFlags\n      type: System.Security.AccessControl.PropagationFlags\n      description: Whether inherited access rules are automatically propagated. The propagation flags are ignored if <code>inheritanceFlags</code> is set to <xref href=\"System.Security.AccessControl.InheritanceFlags.None\"></xref>.\n    - id: type\n      type: System.Security.AccessControl.AccessControlType\n      description: The valid access control type.\n  overload: System.Security.AccessControl.AccessRule`1.#ctor*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.AccessControl/AccessRule`1.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.AccessControl.AccessRule`1.#ctor(System.String,`0,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)\n  commentId: M:System.Security.AccessControl.AccessRule`1.#ctor(System.String,`0,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)\n  id: '#ctor(System.String,`0,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)'\n  parent: System.Security.AccessControl.AccessRule`1\n  langs:\n  - csharp\n  name: AccessRule<T>(String, T, InheritanceFlags, PropagationFlags, AccessControlType)\n  nameWithType: AccessRule<T>.AccessRule<T>(String, T, InheritanceFlags, PropagationFlags, AccessControlType)\n  fullName: AccessRule<T>.AccessRule<T>(String, T, InheritanceFlags, PropagationFlags, AccessControlType)\n  type: Constructor\n  assemblies:\n  - System.Security.AccessControl\n  - mscorlib\n  namespace: System.Security.AccessControl\n  summary: Initializes a new instance of the AccessRule’1 class by using the specified values.\n  syntax:\n    content: public AccessRule (string identity, T rights, System.Security.AccessControl.InheritanceFlags inheritanceFlags, System.Security.AccessControl.PropagationFlags propagationFlags, System.Security.AccessControl.AccessControlType type);\n    parameters:\n    - id: identity\n      type: System.String\n      description: The identity to which the access rule applies.\n    - id: rights\n      type: T\n      description: The rights of the access rule.\n    - id: inheritanceFlags\n      type: System.Security.AccessControl.InheritanceFlags\n      description: The inheritance properties of the access rule.\n    - id: propagationFlags\n      type: System.Security.AccessControl.PropagationFlags\n      description: Whether inherited access rules are automatically propagated. The propagation flags are ignored if <code>inheritanceFlags</code> is set to <xref href=\"System.Security.AccessControl.InheritanceFlags.None\"></xref>.\n    - id: type\n      type: System.Security.AccessControl.AccessControlType\n      description: The valid access control type.\n  overload: System.Security.AccessControl.AccessRule`1.#ctor*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.AccessControl/AccessRule`1.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.AccessControl.AccessRule`1.Rights\n  commentId: P:System.Security.AccessControl.AccessRule`1.Rights\n  id: Rights\n  parent: System.Security.AccessControl.AccessRule`1\n  langs:\n  - csharp\n  name: Rights\n  nameWithType: AccessRule<T>.Rights\n  fullName: AccessRule<T>.Rights\n  type: Property\n  assemblies:\n  - System.Security.AccessControl\n  - mscorlib\n  namespace: System.Security.AccessControl\n  summary: Gets the rights of the current instance.\n  remarks: This property contains the same information as the AccessMask property, but cast as type \\<T>.\n  syntax:\n    content: public T Rights { get; }\n    return:\n      type: T\n      description: The rights, cast as type <T>, of the current instance.\n  overload: System.Security.AccessControl.AccessRule`1.Rights*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.AccessControl/AccessRule`1.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\nreferences:\n- uid: System.Security.AccessControl.AccessRule\n  parent: System.Security.AccessControl\n  isExternal: false\n  name: AccessRule\n  nameWithType: AccessRule\n  fullName: System.Security.AccessControl.AccessRule\n- uid: System.Security.AccessControl.AccessRule`1.#ctor(System.Security.Principal.IdentityReference,`0,System.Security.AccessControl.AccessControlType)\n  parent: System.Security.AccessControl.AccessRule`1\n  isExternal: false\n  name: AccessRule<T>(IdentityReference, T, AccessControlType)\n  nameWithType: AccessRule<T>.AccessRule<T>(IdentityReference, T, AccessControlType)\n  fullName: AccessRule<T>.AccessRule<T>(IdentityReference, T, AccessControlType)\n- uid: System.Security.Principal.IdentityReference\n  parent: System.Security.Principal\n  isExternal: false\n  name: IdentityReference\n  nameWithType: IdentityReference\n  fullName: System.Security.Principal.IdentityReference\n- uid: T\n  isExternal: true\n  name: T\n  nameWithType: T\n  fullName: T\n- uid: System.Security.AccessControl.AccessControlType\n  parent: System.Security.AccessControl\n  isExternal: false\n  name: AccessControlType\n  nameWithType: AccessControlType\n  fullName: System.Security.AccessControl.AccessControlType\n- uid: System.Security.AccessControl.AccessRule`1.#ctor(System.String,`0,System.Security.AccessControl.AccessControlType)\n  parent: System.Security.AccessControl.AccessRule`1\n  isExternal: false\n  name: AccessRule<T>(String, T, AccessControlType)\n  nameWithType: AccessRule<T>.AccessRule<T>(String, T, AccessControlType)\n  fullName: AccessRule<T>.AccessRule<T>(String, T, AccessControlType)\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Security.AccessControl.AccessRule`1.#ctor(System.Security.Principal.IdentityReference,`0,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)\n  parent: System.Security.AccessControl.AccessRule`1\n  isExternal: false\n  name: AccessRule<T>(IdentityReference, T, InheritanceFlags, PropagationFlags, AccessControlType)\n  nameWithType: AccessRule<T>.AccessRule<T>(IdentityReference, T, InheritanceFlags, PropagationFlags, AccessControlType)\n  fullName: AccessRule<T>.AccessRule<T>(IdentityReference, T, InheritanceFlags, PropagationFlags, AccessControlType)\n- uid: System.Security.AccessControl.InheritanceFlags\n  parent: System.Security.AccessControl\n  isExternal: false\n  name: InheritanceFlags\n  nameWithType: InheritanceFlags\n  fullName: System.Security.AccessControl.InheritanceFlags\n- uid: System.Security.AccessControl.PropagationFlags\n  parent: System.Security.AccessControl\n  isExternal: false\n  name: PropagationFlags\n  nameWithType: PropagationFlags\n  fullName: System.Security.AccessControl.PropagationFlags\n- uid: System.Security.AccessControl.AccessRule`1.#ctor(System.String,`0,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)\n  parent: System.Security.AccessControl.AccessRule`1\n  isExternal: false\n  name: AccessRule<T>(String, T, InheritanceFlags, PropagationFlags, AccessControlType)\n  nameWithType: AccessRule<T>.AccessRule<T>(String, T, InheritanceFlags, PropagationFlags, AccessControlType)\n  fullName: AccessRule<T>.AccessRule<T>(String, T, InheritanceFlags, PropagationFlags, AccessControlType)\n- uid: System.Security.AccessControl.AccessRule`1.Rights\n  parent: System.Security.AccessControl.AccessRule`1\n  isExternal: false\n  name: Rights\n  nameWithType: AccessRule<T>.Rights\n  fullName: AccessRule<T>.Rights\n- uid: System.Security.AccessControl.AccessRule`1.#ctor*\n  parent: System.Security.AccessControl.AccessRule`1\n  isExternal: false\n  name: AccessRule<T>\n  nameWithType: AccessRule<T>.AccessRule<T>\n  fullName: AccessRule<T>.AccessRule<T>\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.AccessControl/AccessRule`1.xml\n- uid: System.Security.AccessControl.AccessRule`1.Rights*\n  parent: System.Security.AccessControl.AccessRule`1\n  isExternal: false\n  name: Rights\n  nameWithType: AccessRule<T>.Rights\n  fullName: AccessRule<T>.Rights\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.AccessControl/AccessRule`1.xml\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: Object.Equals(Object)\n  fullName: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: Object.GetHashCode()\n  fullName: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: false\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: false\n  name: ToString()\n  nameWithType: Object.ToString()\n  fullName: Object.ToString()\n- uid: System.Security.AccessControl.AuthorizationRule.AccessMask\n  parent: System.Security.AccessControl.AuthorizationRule\n  isExternal: false\n  name: AccessMask\n  nameWithType: AuthorizationRule.AccessMask\n  fullName: AuthorizationRule.AccessMask\n- uid: System.Security.AccessControl.AuthorizationRule.IdentityReference\n  parent: System.Security.AccessControl.AuthorizationRule\n  isExternal: false\n  name: IdentityReference\n  nameWithType: AuthorizationRule.IdentityReference\n  fullName: AuthorizationRule.IdentityReference\n- uid: System.Security.AccessControl.AuthorizationRule.InheritanceFlags\n  parent: System.Security.AccessControl.AuthorizationRule\n  isExternal: false\n  name: InheritanceFlags\n  nameWithType: AuthorizationRule.InheritanceFlags\n  fullName: AuthorizationRule.InheritanceFlags\n- uid: System.Security.AccessControl.AuthorizationRule.IsInherited\n  parent: System.Security.AccessControl.AuthorizationRule\n  isExternal: false\n  name: IsInherited\n  nameWithType: AuthorizationRule.IsInherited\n  fullName: AuthorizationRule.IsInherited\n- uid: System.Security.AccessControl.AuthorizationRule.PropagationFlags\n  parent: System.Security.AccessControl.AuthorizationRule\n  isExternal: false\n  name: PropagationFlags\n  nameWithType: AuthorizationRule.PropagationFlags\n  fullName: AuthorizationRule.PropagationFlags\n- uid: System.Security.AccessControl.AccessRule.AccessControlType\n  parent: System.Security.AccessControl.AccessRule\n  isExternal: false\n  name: AccessControlType\n  nameWithType: AccessRule.AccessControlType\n  fullName: AccessRule.AccessControlType\n"}