{"nodes":[{"content":"Provides filtering functionality for a property editing host.","nodes":[{"pos":[0,61],"content":"Provides filtering functionality for a property editing host.","nodes":[{"content":"Provides filtering functionality for a property editing host.","pos":[0,61]}]}],"pos":[984,1046],"yaml":true},{"content":"Contains a list of strings, called *predicates*, that are compared against a target property name until a match is found.","nodes":[{"pos":[0,121],"content":"Contains a list of strings, called <bpt id=\"p1\">*</bpt>predicates<ept id=\"p1\">*</ept>, that are compared against a target property name until a match is found.","source":"Contains a list of strings, called *predicates*, that are compared against a target property name until a match is found."}],"pos":[1057,1179],"yaml":true,"extradata":"MT"},{"content":"Creates a new instance of the <xref href=\"System.Activities.Presentation.PropertyEditing.PropertyFilter\"></xref> class that includes an enumeration of filtering strings, called *predicates*, that can be compared against a target property name until a match is found.","nodes":[{"pos":[0,266],"content":"Creates a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Activities.Presentation.PropertyEditing.PropertyFilter\"&gt;&lt;/xref&gt;</ph> class that includes an enumeration of filtering strings, called <bpt id=\"p1\">*</bpt>predicates<ept id=\"p1\">*</ept>, that can be compared against a target property name until a match is found.","source":"Creates a new instance of the <xref href=\"System.Activities.Presentation.PropertyEditing.PropertyFilter\"></xref> class that includes an enumeration of filtering strings, called *predicates*, that can be compared against a target property name until a match is found."}],"pos":[3096,3363],"yaml":true},{"content":"An <xref href=\"System.Collections.IEnumerable\"></xref> list of predicates, or strings used for matching.","nodes":[{"pos":[0,104],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Collections.IEnumerable\"&gt;&lt;/xref&gt;</ph> list of predicates, or strings used for matching.","source":"An <xref href=\"System.Collections.IEnumerable\"></xref> list of predicates, or strings used for matching."}],"pos":[3712,3817],"yaml":true},{"content":"Creates a new instance of the <xref href=\"System.Activities.Presentation.PropertyEditing.PropertyFilter\"></xref> class that includes a <xref href=\"System.String\"></xref> that contains a space-delimited sequence of filtering phrases, called *predicates*, that can be compared against a target property name until a match is found.","nodes":[{"pos":[0,329],"content":"Creates a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Activities.Presentation.PropertyEditing.PropertyFilter\"&gt;&lt;/xref&gt;</ph> class that includes a <ph id=\"ph2\">&lt;xref href=\"System.String\"&gt;&lt;/xref&gt;</ph> that contains a space-delimited sequence of filtering phrases, called <bpt id=\"p1\">*</bpt>predicates<ept id=\"p1\">*</ept>, that can be compared against a target property name until a match is found.","source":"Creates a new instance of the <xref href=\"System.Activities.Presentation.PropertyEditing.PropertyFilter\"></xref> class that includes a <xref href=\"System.String\"></xref> that contains a space-delimited sequence of filtering phrases, called *predicates*, that can be compared against a target property name until a match is found."}],"pos":[5056,5386],"yaml":true},{"content":"A <xref href=\"System.String\"></xref> that contains space-delimited predicates for property filtering.","nodes":[{"pos":[0,101],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.String\"&gt;&lt;/xref&gt;</ph> that contains space-delimited predicates for property filtering.","source":"A <xref href=\"System.String\"></xref> that contains space-delimited predicates for property filtering."}],"pos":[5534,5636],"yaml":true},{"content":"Read-only property that indicates whether this <xref href=\"System.Activities.Design.PropertyEditing.PropertyFilter\"></xref> does not have any filtering predicates.","nodes":[{"pos":[0,163],"content":"Read-only property that indicates whether this <ph id=\"ph1\">&lt;xref href=\"System.Activities.Design.PropertyEditing.PropertyFilter\"&gt;&lt;/xref&gt;</ph> does not have any filtering predicates.","source":"Read-only property that indicates whether this <xref href=\"System.Activities.Design.PropertyEditing.PropertyFilter\"></xref> does not have any filtering predicates."}],"pos":[6786,6950],"yaml":true},{"content":"`true` if predicates are absent; otherwise, `false`.","nodes":[{"pos":[0,52],"content":"<ph id=\"ph1\">`true`</ph> if predicates are absent; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` if predicates are absent; otherwise, `false`."}],"pos":[7060,7115],"yaml":true},{"content":"Matches the predicate strings of the current filtering object against the specified target property name and returns a Boolean that indicates whether one or more of the predicate strings matches the target name or whether this <xref href=\"System.Activities.Presentation.PropertyEditing.PropertyFilter\"></xref> does not have any predicates.","nodes":[{"pos":[0,339],"content":"Matches the predicate strings of the current filtering object against the specified target property name and returns a Boolean that indicates whether one or more of the predicate strings matches the target name or whether this <ph id=\"ph1\">&lt;xref href=\"System.Activities.Presentation.PropertyEditing.PropertyFilter\"&gt;&lt;/xref&gt;</ph> does not have any predicates.","source":"Matches the predicate strings of the current filtering object against the specified target property name and returns a Boolean that indicates whether one or more of the predicate strings matches the target name or whether this <xref href=\"System.Activities.Presentation.PropertyEditing.PropertyFilter\"></xref> does not have any predicates."}],"pos":[8532,8872],"yaml":true},{"content":"The name of the property that the current filter will be compared against when looking for a match.","nodes":[{"pos":[0,99],"content":"The name of the property that the current filter will be compared against when looking for a match.","nodes":[{"content":"The name of the property that the current filter will be compared against when looking for a match.","pos":[0,99]}]}],"pos":[9125,9225],"yaml":true},{"content":"`true` if there is a filter/target match or if there is nothing to use for the comparison; otherwise, `false`.","nodes":[{"pos":[0,110],"content":"<ph id=\"ph1\">`true`</ph> if there is a filter/target match or if there is nothing to use for the comparison; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` if there is a filter/target match or if there is nothing to use for the comparison; otherwise, `false`."}],"pos":[9283,9396],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Activities.Presentation.PropertyEditing.PropertyFilter\n  commentId: T:System.Activities.Presentation.PropertyEditing.PropertyFilter\n  id: PropertyFilter\n  children:\n  - System.Activities.Presentation.PropertyEditing.PropertyFilter.#ctor(System.Collections.Generic.IEnumerable{System.Activities.Presentation.PropertyEditing.PropertyFilterPredicate})\n  - System.Activities.Presentation.PropertyEditing.PropertyFilter.#ctor(System.String)\n  - System.Activities.Presentation.PropertyEditing.PropertyFilter.IsEmpty\n  - System.Activities.Presentation.PropertyEditing.PropertyFilter.Match(System.Activities.Presentation.PropertyEditing.IPropertyFilterTarget)\n  langs:\n  - csharp\n  name: PropertyFilter\n  nameWithType: PropertyFilter\n  fullName: System.Activities.Presentation.PropertyEditing.PropertyFilter\n  type: Class\n  assemblies:\n  - System.Activities.Presentation\n  namespace: System.Activities.Presentation.PropertyEditing\n  summary: Provides filtering functionality for a property editing host.\n  remarks: Contains a list of strings, called *predicates*, that are compared against a target property name until a match is found.\n  syntax:\n    content: public class PropertyFilter\n  inheritance:\n  - System.Object\n  implements: []\n  inheritedMembers:\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.ToString\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Activities.Presentation.PropertyEditing/PropertyFilter.xml\n  ms.technology:\n  - dotnet-standard\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.Activities.Presentation.PropertyEditing.PropertyFilter.#ctor(System.Collections.Generic.IEnumerable{System.Activities.Presentation.PropertyEditing.PropertyFilterPredicate})\n  commentId: M:System.Activities.Presentation.PropertyEditing.PropertyFilter.#ctor(System.Collections.Generic.IEnumerable{System.Activities.Presentation.PropertyEditing.PropertyFilterPredicate})\n  id: '#ctor(System.Collections.Generic.IEnumerable{System.Activities.Presentation.PropertyEditing.PropertyFilterPredicate})'\n  parent: System.Activities.Presentation.PropertyEditing.PropertyFilter\n  langs:\n  - csharp\n  name: PropertyFilter(IEnumerable<PropertyFilterPredicate>)\n  nameWithType: PropertyFilter.PropertyFilter(IEnumerable<PropertyFilterPredicate>)\n  fullName: PropertyFilter.PropertyFilter(IEnumerable<PropertyFilterPredicate>)\n  type: Constructor\n  assemblies:\n  - System.Activities.Presentation\n  namespace: System.Activities.Presentation.PropertyEditing\n  summary: Creates a new instance of the <xref href=\"System.Activities.Presentation.PropertyEditing.PropertyFilter\"></xref> class that includes an enumeration of filtering strings, called *predicates*, that can be compared against a target property name until a match is found.\n  syntax:\n    content: public PropertyFilter (System.Collections.Generic.IEnumerable<System.Activities.Presentation.PropertyEditing.PropertyFilterPredicate> predicates);\n    parameters:\n    - id: predicates\n      type: System.Collections.Generic.IEnumerable{System.Activities.Presentation.PropertyEditing.PropertyFilterPredicate}\n      description: An <xref href=\"System.Collections.IEnumerable\"></xref> list of predicates, or strings used for matching.\n  overload: System.Activities.Presentation.PropertyEditing.PropertyFilter.#ctor*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Activities.Presentation.PropertyEditing/PropertyFilter.xml\n  ms.technology:\n  - dotnet-standard\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.Activities.Presentation.PropertyEditing.PropertyFilter.#ctor(System.String)\n  commentId: M:System.Activities.Presentation.PropertyEditing.PropertyFilter.#ctor(System.String)\n  id: '#ctor(System.String)'\n  parent: System.Activities.Presentation.PropertyEditing.PropertyFilter\n  langs:\n  - csharp\n  name: PropertyFilter(String)\n  nameWithType: PropertyFilter.PropertyFilter(String)\n  fullName: PropertyFilter.PropertyFilter(String)\n  type: Constructor\n  assemblies:\n  - System.Activities.Presentation\n  namespace: System.Activities.Presentation.PropertyEditing\n  summary: Creates a new instance of the <xref href=\"System.Activities.Presentation.PropertyEditing.PropertyFilter\"></xref> class that includes a <xref href=\"System.String\"></xref> that contains a space-delimited sequence of filtering phrases, called *predicates*, that can be compared against a target property name until a match is found.\n  syntax:\n    content: public PropertyFilter (string filterText);\n    parameters:\n    - id: filterText\n      type: System.String\n      description: A <xref href=\"System.String\"></xref> that contains space-delimited predicates for property filtering.\n  overload: System.Activities.Presentation.PropertyEditing.PropertyFilter.#ctor*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Activities.Presentation.PropertyEditing/PropertyFilter.xml\n  ms.technology:\n  - dotnet-standard\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.Activities.Presentation.PropertyEditing.PropertyFilter.IsEmpty\n  commentId: P:System.Activities.Presentation.PropertyEditing.PropertyFilter.IsEmpty\n  id: IsEmpty\n  parent: System.Activities.Presentation.PropertyEditing.PropertyFilter\n  langs:\n  - csharp\n  name: IsEmpty\n  nameWithType: PropertyFilter.IsEmpty\n  fullName: PropertyFilter.IsEmpty\n  type: Property\n  assemblies:\n  - System.Activities.Presentation\n  namespace: System.Activities.Presentation.PropertyEditing\n  summary: Read-only property that indicates whether this <xref href=\"System.Activities.Design.PropertyEditing.PropertyFilter\"></xref> does not have any filtering predicates.\n  syntax:\n    content: public bool IsEmpty { get; }\n    return:\n      type: System.Boolean\n      description: '`true` if predicates are absent; otherwise, `false`.'\n  overload: System.Activities.Presentation.PropertyEditing.PropertyFilter.IsEmpty*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Activities.Presentation.PropertyEditing/PropertyFilter.xml\n  ms.technology:\n  - dotnet-standard\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.Activities.Presentation.PropertyEditing.PropertyFilter.Match(System.Activities.Presentation.PropertyEditing.IPropertyFilterTarget)\n  commentId: M:System.Activities.Presentation.PropertyEditing.PropertyFilter.Match(System.Activities.Presentation.PropertyEditing.IPropertyFilterTarget)\n  id: Match(System.Activities.Presentation.PropertyEditing.IPropertyFilterTarget)\n  parent: System.Activities.Presentation.PropertyEditing.PropertyFilter\n  langs:\n  - csharp\n  name: Match(IPropertyFilterTarget)\n  nameWithType: PropertyFilter.Match(IPropertyFilterTarget)\n  fullName: PropertyFilter.Match(IPropertyFilterTarget)\n  type: Method\n  assemblies:\n  - System.Activities.Presentation\n  namespace: System.Activities.Presentation.PropertyEditing\n  summary: Matches the predicate strings of the current filtering object against the specified target property name and returns a Boolean that indicates whether one or more of the predicate strings matches the target name or whether this <xref href=\"System.Activities.Presentation.PropertyEditing.PropertyFilter\"></xref> does not have any predicates.\n  syntax:\n    content: public bool Match (System.Activities.Presentation.PropertyEditing.IPropertyFilterTarget target);\n    parameters:\n    - id: target\n      type: System.Activities.Presentation.PropertyEditing.IPropertyFilterTarget\n      description: The name of the property that the current filter will be compared against when looking for a match.\n    return:\n      type: System.Boolean\n      description: '`true` if there is a filter/target match or if there is nothing to use for the comparison; otherwise, `false`.'\n  overload: System.Activities.Presentation.PropertyEditing.PropertyFilter.Match*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Activities.Presentation.PropertyEditing/PropertyFilter.xml\n  ms.technology:\n  - dotnet-standard\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\nreferences:\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.Activities.Presentation.PropertyEditing.PropertyFilter.#ctor(System.Collections.Generic.IEnumerable{System.Activities.Presentation.PropertyEditing.PropertyFilterPredicate})\n  parent: System.Activities.Presentation.PropertyEditing.PropertyFilter\n  isExternal: false\n  name: PropertyFilter(IEnumerable<PropertyFilterPredicate>)\n  nameWithType: PropertyFilter.PropertyFilter(IEnumerable<PropertyFilterPredicate>)\n  fullName: PropertyFilter.PropertyFilter(IEnumerable<PropertyFilterPredicate>)\n- uid: System.Collections.Generic.IEnumerable`1\n  name: IEnumerable<T>\n  nameWithType: IEnumerable<T>\n  fullName: System.Collections.Generic.IEnumerable<T>\n- uid: System.Activities.Presentation.PropertyEditing.PropertyFilterPredicate\n  name: PropertyFilterPredicate\n  nameWithType: PropertyFilterPredicate\n  fullName: System.Activities.Presentation.PropertyEditing.PropertyFilterPredicate\n- uid: System.Collections.Generic.IEnumerable{System.Activities.Presentation.PropertyEditing.PropertyFilterPredicate}\n  parent: System.Collections.Generic\n  isExternal: false\n  name: IEnumerable<PropertyFilterPredicate>\n  nameWithType: IEnumerable<PropertyFilterPredicate>\n  fullName: System.Collections.Generic.IEnumerable<System.Activities.Presentation.PropertyEditing.PropertyFilterPredicate>\n  spec.csharp:\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    nameWithType: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Activities.Presentation.PropertyEditing.PropertyFilterPredicate\n    name: PropertyFilterPredicate\n    nameWithType: PropertyFilterPredicate\n    fullName: System.Activities.Presentation.PropertyEditing.PropertyFilterPredicate\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Activities.Presentation.PropertyEditing.PropertyFilter.#ctor(System.String)\n  parent: System.Activities.Presentation.PropertyEditing.PropertyFilter\n  isExternal: false\n  name: PropertyFilter(String)\n  nameWithType: PropertyFilter.PropertyFilter(String)\n  fullName: PropertyFilter.PropertyFilter(String)\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Activities.Presentation.PropertyEditing.PropertyFilter.IsEmpty\n  parent: System.Activities.Presentation.PropertyEditing.PropertyFilter\n  isExternal: false\n  name: IsEmpty\n  nameWithType: PropertyFilter.IsEmpty\n  fullName: PropertyFilter.IsEmpty\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Activities.Presentation.PropertyEditing.PropertyFilter.Match(System.Activities.Presentation.PropertyEditing.IPropertyFilterTarget)\n  parent: System.Activities.Presentation.PropertyEditing.PropertyFilter\n  isExternal: false\n  name: Match(IPropertyFilterTarget)\n  nameWithType: PropertyFilter.Match(IPropertyFilterTarget)\n  fullName: PropertyFilter.Match(IPropertyFilterTarget)\n- uid: System.Activities.Presentation.PropertyEditing.IPropertyFilterTarget\n  parent: System.Activities.Presentation.PropertyEditing\n  isExternal: false\n  name: IPropertyFilterTarget\n  nameWithType: IPropertyFilterTarget\n  fullName: System.Activities.Presentation.PropertyEditing.IPropertyFilterTarget\n- uid: System.Activities.Presentation.PropertyEditing.PropertyFilter.#ctor*\n  parent: System.Activities.Presentation.PropertyEditing.PropertyFilter\n  isExternal: false\n  name: PropertyFilter\n  nameWithType: PropertyFilter.PropertyFilter\n  fullName: PropertyFilter.PropertyFilter\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Activities.Presentation.PropertyEditing/PropertyFilter.xml\n- uid: System.Activities.Presentation.PropertyEditing.PropertyFilter.IsEmpty*\n  parent: System.Activities.Presentation.PropertyEditing.PropertyFilter\n  isExternal: false\n  name: IsEmpty\n  nameWithType: PropertyFilter.IsEmpty\n  fullName: PropertyFilter.IsEmpty\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Activities.Presentation.PropertyEditing/PropertyFilter.xml\n- uid: System.Activities.Presentation.PropertyEditing.PropertyFilter.Match*\n  parent: System.Activities.Presentation.PropertyEditing.PropertyFilter\n  isExternal: false\n  name: Match\n  nameWithType: PropertyFilter.Match\n  fullName: PropertyFilter.Match\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Activities.Presentation.PropertyEditing/PropertyFilter.xml\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: Object.Equals(Object)\n  fullName: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: Object.GetHashCode()\n  fullName: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: false\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: false\n  name: ToString()\n  nameWithType: Object.ToString()\n  fullName: Object.ToString()\n"}