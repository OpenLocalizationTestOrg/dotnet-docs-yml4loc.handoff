{"nodes":[{"content":"Represents the method that will handle the *MethodName*`Completed` event of an asynchronous operation.","nodes":[{"pos":[0,102],"content":"Represents the method that will handle the <bpt id=\"p1\">*</bpt>MethodName<ept id=\"p1\">*</ept><ph id=\"ph1\">`Completed`</ph> event of an asynchronous operation.","source":"Represents the method that will handle the *MethodName*`Completed` event of an asynchronous operation."}],"pos":[494,597],"yaml":true},{"content":"When you create an <xref:System.ComponentModel.AsyncCompletedEventHandler> delegate, you identify the method that will handle the event. To associate the event with your event handler, add an instance of the delegate to the event. The event-handler method is called whenever the event occurs, unless you remove the delegate. For more information about event-handler delegates, see [NIB: Events and Delegates](http://msdn.microsoft.com/en-us/d98fd58b-fa4f-4598-8378-addf4355a115).  \n  \n For an asynchronous method, called *MethodName*, in your component, you will have a corresponding *MethodName*`Completed` event, and an optional *MethodName*`CompletedEventArgs` class.  \n  \n For a component that supports multiple concurrent invocations of its asynchronous methods, the client can supply a unique token, or task ID, to distinguish which asynchronous task is raising particular events. The client's <xref:System.ComponentModel.AsyncCompletedEventHandler> can read the <xref:System.ComponentModel.AsyncCompletedEventArgs.UserState%2A?displayProperty=fullName> property to determine which task is reporting completion. Your implementation should use the <xref:System.ComponentModel.AsyncOperationManager?displayProperty=fullName> to create an <xref:System.ComponentModel.AsyncOperation?displayProperty=fullName> that associates the client's task IDs with pending asynchronous tasks.","nodes":[{"pos":[0,479],"content":"When you create an <xref:System.ComponentModel.AsyncCompletedEventHandler> delegate, you identify the method that will handle the event. To associate the event with your event handler, add an instance of the delegate to the event. The event-handler method is called whenever the event occurs, unless you remove the delegate. For more information about event-handler delegates, see [NIB: Events and Delegates](http://msdn.microsoft.com/en-us/d98fd58b-fa4f-4598-8378-addf4355a115).","nodes":[{"content":"When you create an <ph id=\"ph1\">&lt;xref:System.ComponentModel.AsyncCompletedEventHandler&gt;</ph> delegate, you identify the method that will handle the event.","pos":[0,136],"source":"When you create an <xref:System.ComponentModel.AsyncCompletedEventHandler> delegate, you identify the method that will handle the event."},{"content":"To associate the event with your event handler, add an instance of the delegate to the event.","pos":[137,230]},{"content":"The event-handler method is called whenever the event occurs, unless you remove the delegate.","pos":[231,324]},{"content":"For more information about event-handler delegates, see <bpt id=\"p1\">[</bpt>NIB: Events and Delegates<ept id=\"p1\">](http://msdn.microsoft.com/en-us/d98fd58b-fa4f-4598-8378-addf4355a115)</ept>.","pos":[325,479],"source":" For more information about event-handler delegates, see [NIB: Events and Delegates](http://msdn.microsoft.com/en-us/d98fd58b-fa4f-4598-8378-addf4355a115)."}]},{"pos":[486,670],"content":"For an asynchronous method, called <bpt id=\"p1\">*</bpt>MethodName<ept id=\"p1\">*</ept>, in your component, you will have a corresponding <bpt id=\"p2\">*</bpt>MethodName<ept id=\"p2\">*</ept><ph id=\"ph1\">`Completed`</ph> event, and an optional <bpt id=\"p3\">*</bpt>MethodName<ept id=\"p3\">*</ept><ph id=\"ph2\">`CompletedEventArgs`</ph> class.","source":"For an asynchronous method, called *MethodName*, in your component, you will have a corresponding *MethodName*`Completed` event, and an optional *MethodName*`CompletedEventArgs` class."},{"pos":[677,1381],"content":"For a component that supports multiple concurrent invocations of its asynchronous methods, the client can supply a unique token, or task ID, to distinguish which asynchronous task is raising particular events. The client's <xref:System.ComponentModel.AsyncCompletedEventHandler> can read the <xref:System.ComponentModel.AsyncCompletedEventArgs.UserState%2A?displayProperty=fullName> property to determine which task is reporting completion. Your implementation should use the <xref:System.ComponentModel.AsyncOperationManager?displayProperty=fullName> to create an <xref:System.ComponentModel.AsyncOperation?displayProperty=fullName> that associates the client's task IDs with pending asynchronous tasks.","nodes":[{"content":"For a component that supports multiple concurrent invocations of its asynchronous methods, the client can supply a unique token, or task ID, to distinguish which asynchronous task is raising particular events. The client's <xref:System.ComponentModel.AsyncCompletedEventHandler> can read the <xref:System.ComponentModel.AsyncCompletedEventArgs.UserState%2A?displayProperty=fullName> property to determine which task is reporting completion. Your implementation should use the <xref:System.ComponentModel.AsyncOperationManager?displayProperty=fullName> to create an <xref:System.ComponentModel.AsyncOperation?displayProperty=fullName> that associates the client's task IDs with pending asynchronous tasks.","pos":[0,704],"nodes":[{"content":"For a component that supports multiple concurrent invocations of its asynchronous methods, the client can supply a unique token, or task ID, to distinguish which asynchronous task is raising particular events.","pos":[0,209]},{"content":"The client's <ph id=\"ph1\">&lt;xref:System.ComponentModel.AsyncCompletedEventHandler&gt;</ph> can read the <ph id=\"ph2\">&lt;xref:System.ComponentModel.AsyncCompletedEventArgs.UserState%2A?displayProperty=fullName&gt;</ph> property to determine which task is reporting completion.","pos":[210,440],"source":" The client's <xref:System.ComponentModel.AsyncCompletedEventHandler> can read the <xref:System.ComponentModel.AsyncCompletedEventArgs.UserState%2A?displayProperty=fullName> property to determine which task is reporting completion."},{"content":"Your implementation should use the <ph id=\"ph1\">&lt;xref:System.ComponentModel.AsyncOperationManager?displayProperty=fullName&gt;</ph> to create an <ph id=\"ph2\">&lt;xref:System.ComponentModel.AsyncOperation?displayProperty=fullName&gt;</ph> that associates the client's task IDs with pending asynchronous tasks.","pos":[441,704],"source":" Your implementation should use the <xref:System.ComponentModel.AsyncOperationManager?displayProperty=fullName> to create an <xref:System.ComponentModel.AsyncOperation?displayProperty=fullName> that associates the client's task IDs with pending asynchronous tasks."}]}]}],"pos":[608,1996],"yaml":true,"extradata":"MT"}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.ComponentModel.AsyncCompletedEventHandler\n  commentId: T:System.ComponentModel.AsyncCompletedEventHandler\n  id: AsyncCompletedEventHandler\n  langs:\n  - csharp\n  name: AsyncCompletedEventHandler\n  nameWithType: AsyncCompletedEventHandler\n  fullName: System.ComponentModel.AsyncCompletedEventHandler\n  type: Delegate\n  assemblies:\n  - System.ComponentModel.EventBasedAsync\n  - System\n  - netstandard\n  namespace: System.ComponentModel\n  summary: Represents the method that will handle the *MethodName*`Completed` event of an asynchronous operation.\n  remarks: \"When you create an <xref:System.ComponentModel.AsyncCompletedEventHandler> delegate, you identify the method that will handle the event. To associate the event with your event handler, add an instance of the delegate to the event. The event-handler method is called whenever the event occurs, unless you remove the delegate. For more information about event-handler delegates, see [NIB: Events and Delegates](http://msdn.microsoft.com/en-us/d98fd58b-fa4f-4598-8378-addf4355a115).  \\n  \\n For an asynchronous method, called *MethodName*, in your component, you will have a corresponding *MethodName*`Completed` event, and an optional *MethodName*`CompletedEventArgs` class.  \\n  \\n For a component that supports multiple concurrent invocations of its asynchronous methods, the client can supply a unique token, or task ID, to distinguish which asynchronous task is raising particular events. The client's <xref:System.ComponentModel.AsyncCompletedEventHandler> can read the <xref:System.ComponentModel.AsyncCompletedEventArgs.UserState%2A?displayProperty=fullName> property to determine which task is reporting completion. Your implementation should use the <xref:System.ComponentModel.AsyncOperationManager?displayProperty=fullName> to create an <xref:System.ComponentModel.AsyncOperation?displayProperty=fullName> that associates the client's task IDs with pending asynchronous tasks.\"\n  example:\n  - For a code example of the <xref:System.ComponentModel.AsyncCompletedEventHandler> delegate, see the example in the <xref:System.ComponentModel.AsyncCompletedEventArgs?displayProperty=fullName> class.\n  syntax:\n    content: public delegate void AsyncCompletedEventHandler(object sender, AsyncCompletedEventArgs e);\n  inheritance:\n  - System.Object\n  - System.Delegate\n  extensionMethods:\n  - System.Reflection.RuntimeReflectionExtensions.GetMethodInfo(System.Delegate)\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ComponentModel/AsyncCompletedEventHandler.xml\n  ms.technology:\n  - dotnet-standard\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\nreferences:\n- uid: System.Delegate\n  parent: System\n  isExternal: false\n  name: Delegate\n  nameWithType: Delegate\n  fullName: System.Delegate\n- uid: System.Reflection.RuntimeReflectionExtensions.GetMethodInfo(System.Delegate)\n  parent: System.Reflection.RuntimeReflectionExtensions\n  isExternal: false\n  name: GetMethodInfo(Delegate)\n  nameWithType: RuntimeReflectionExtensions.GetMethodInfo(Delegate)\n  fullName: RuntimeReflectionExtensions.GetMethodInfo(Delegate)\n"}