{"nodes":[{"content":"Defines an object that knows how to invoke a command.","nodes":[{"pos":[0,53],"content":"Defines an object that knows how to invoke a command.","nodes":[{"content":"Defines an object that knows how to invoke a command.","pos":[0,53]}]}],"pos":[542,596],"yaml":true},{"content":"The command source defines how a command is invoked by that particular object.  For example, if a <xref:System.Windows.Controls.Button> is associated with a command, the command is invoked when the <xref:System.Windows.Controls.Button> is clicked.  \n  \n A command source will normally disable itself if the command it is associated with cannot execute on the current command target.  For example, a <xref:System.Windows.Controls.MenuItem> associated with the <xref:System.Windows.Input.ApplicationCommands.Paste%2A> command will gray itself out when the <xref:System.Windows.Input.ApplicationCommands.Paste%2A> command cannot execute on the current command target.  \n  \n Normally, a command source will listen to the <xref:System.Windows.Input.ICommand.CanExecuteChanged> event on the command.  This informs the command source when conditions change on the command target, such as loss of keyboard focus.  The command source can then query the command using the <xref:System.Windows.Input.ICommand.CanExecute%2A> method.  \n  \n Some of the classes in [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] that implement <xref:System.Windows.Input.ICommandSource> are: <xref:System.Windows.Controls.Primitives.ButtonBase>, <xref:System.Windows.Controls.MenuItem>, and <xref:System.Windows.Documents.Hyperlink>.  \n  \n In the [!INCLUDE[TLA#tla_wpf](~/includes/tlasharptla-wpf-md.md)] commanding system, the <xref:System.Windows.Input.InputBinding.CommandTarget%2A> property on a <xref:System.Windows.Input.ICommandSource> is only applicable when the <xref:System.Windows.Input.ICommand> is a <xref:System.Windows.Input.RoutedCommand>.  If the <xref:System.Windows.Input.InputBinding.CommandTarget%2A> is set on a <xref:System.Windows.Input.ICommandSource> and the corresponding command is not a <xref:System.Windows.Input.RoutedCommand>, the command target is ignored.","nodes":[{"pos":[0,247],"content":"The command source defines how a command is invoked by that particular object.  For example, if a <xref:System.Windows.Controls.Button> is associated with a command, the command is invoked when the <xref:System.Windows.Controls.Button> is clicked.","nodes":[{"content":"The command source defines how a command is invoked by that particular object.  For example, if a <xref:System.Windows.Controls.Button> is associated with a command, the command is invoked when the <xref:System.Windows.Controls.Button> is clicked.","pos":[0,247],"nodes":[{"content":"The command source defines how a command is invoked by that particular object.","pos":[0,78]},{"content":"For example, if a <ph id=\"ph1\">&lt;xref:System.Windows.Controls.Button&gt;</ph> is associated with a command, the command is invoked when the <ph id=\"ph2\">&lt;xref:System.Windows.Controls.Button&gt;</ph> is clicked.","pos":[80,247],"source":"  For example, if a <xref:System.Windows.Controls.Button> is associated with a command, the command is invoked when the <xref:System.Windows.Controls.Button> is clicked."}]}]},{"pos":[254,664],"content":"A command source will normally disable itself if the command it is associated with cannot execute on the current command target.  For example, a <xref:System.Windows.Controls.MenuItem> associated with the <xref:System.Windows.Input.ApplicationCommands.Paste%2A> command will gray itself out when the <xref:System.Windows.Input.ApplicationCommands.Paste%2A> command cannot execute on the current command target.","nodes":[{"content":"A command source will normally disable itself if the command it is associated with cannot execute on the current command target.  For example, a <xref:System.Windows.Controls.MenuItem> associated with the <xref:System.Windows.Input.ApplicationCommands.Paste%2A> command will gray itself out when the <xref:System.Windows.Input.ApplicationCommands.Paste%2A> command cannot execute on the current command target.","pos":[0,410],"nodes":[{"content":"A command source will normally disable itself if the command it is associated with cannot execute on the current command target.","pos":[0,128]},{"content":"For example, a <ph id=\"ph1\">&lt;xref:System.Windows.Controls.MenuItem&gt;</ph> associated with the <ph id=\"ph2\">&lt;xref:System.Windows.Input.ApplicationCommands.Paste%2A&gt;</ph> command will gray itself out when the <ph id=\"ph3\">&lt;xref:System.Windows.Input.ApplicationCommands.Paste%2A&gt;</ph> command cannot execute on the current command target.","pos":[130,410],"source":"  For example, a <xref:System.Windows.Controls.MenuItem> associated with the <xref:System.Windows.Input.ApplicationCommands.Paste%2A> command will gray itself out when the <xref:System.Windows.Input.ApplicationCommands.Paste%2A> command cannot execute on the current command target."}]}]},{"pos":[671,1020],"content":"Normally, a command source will listen to the <xref:System.Windows.Input.ICommand.CanExecuteChanged> event on the command.  This informs the command source when conditions change on the command target, such as loss of keyboard focus.  The command source can then query the command using the <xref:System.Windows.Input.ICommand.CanExecute%2A> method.","nodes":[{"content":"Normally, a command source will listen to the <xref:System.Windows.Input.ICommand.CanExecuteChanged> event on the command.  This informs the command source when conditions change on the command target, such as loss of keyboard focus.  The command source can then query the command using the <xref:System.Windows.Input.ICommand.CanExecute%2A> method.","pos":[0,349],"nodes":[{"content":"Normally, a command source will listen to the <ph id=\"ph1\">&lt;xref:System.Windows.Input.ICommand.CanExecuteChanged&gt;</ph> event on the command.","pos":[0,122],"source":"Normally, a command source will listen to the <xref:System.Windows.Input.ICommand.CanExecuteChanged> event on the command."},{"content":"This informs the command source when conditions change on the command target, such as loss of keyboard focus.","pos":[124,233]},{"content":"The command source can then query the command using the <ph id=\"ph1\">&lt;xref:System.Windows.Input.ICommand.CanExecute%2A&gt;</ph> method.","pos":[235,349],"source":"  The command source can then query the command using the <xref:System.Windows.Input.ICommand.CanExecute%2A> method."}]}]},{"pos":[1027,1326],"content":"Some of the classes in <ph id=\"ph1\">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]</ph> that implement <ph id=\"ph2\">&lt;xref:System.Windows.Input.ICommandSource&gt;</ph> are: <ph id=\"ph3\">&lt;xref:System.Windows.Controls.Primitives.ButtonBase&gt;</ph>, <ph id=\"ph4\">&lt;xref:System.Windows.Controls.MenuItem&gt;</ph>, and <ph id=\"ph5\">&lt;xref:System.Windows.Documents.Hyperlink&gt;</ph>.","source":"Some of the classes in [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] that implement <xref:System.Windows.Input.ICommandSource> are: <xref:System.Windows.Controls.Primitives.ButtonBase>, <xref:System.Windows.Controls.MenuItem>, and <xref:System.Windows.Documents.Hyperlink>."},{"pos":[1333,1882],"content":"In the [!INCLUDE[TLA#tla_wpf](~/includes/tlasharptla-wpf-md.md)] commanding system, the <xref:System.Windows.Input.InputBinding.CommandTarget%2A> property on a <xref:System.Windows.Input.ICommandSource> is only applicable when the <xref:System.Windows.Input.ICommand> is a <xref:System.Windows.Input.RoutedCommand>.  If the <xref:System.Windows.Input.InputBinding.CommandTarget%2A> is set on a <xref:System.Windows.Input.ICommandSource> and the corresponding command is not a <xref:System.Windows.Input.RoutedCommand>, the command target is ignored.","nodes":[{"content":"In the <ph id=\"ph1\">[!INCLUDE[TLA#tla_wpf](~/includes/tlasharptla-wpf-md.md)]</ph> commanding system, the <ph id=\"ph2\">&lt;xref:System.Windows.Input.InputBinding.CommandTarget%2A&gt;</ph> property on a <ph id=\"ph3\">&lt;xref:System.Windows.Input.ICommandSource&gt;</ph> is only applicable when the <ph id=\"ph4\">&lt;xref:System.Windows.Input.ICommand&gt;</ph> is a <ph id=\"ph5\">&lt;xref:System.Windows.Input.RoutedCommand&gt;</ph>.","pos":[0,315],"source":"In the [!INCLUDE[TLA#tla_wpf](~/includes/tlasharptla-wpf-md.md)] commanding system, the <xref:System.Windows.Input.InputBinding.CommandTarget%2A> property on a <xref:System.Windows.Input.ICommandSource> is only applicable when the <xref:System.Windows.Input.ICommand> is a <xref:System.Windows.Input.RoutedCommand>."},{"content":"If the <ph id=\"ph1\">&lt;xref:System.Windows.Input.InputBinding.CommandTarget%2A&gt;</ph> is set on a <ph id=\"ph2\">&lt;xref:System.Windows.Input.ICommandSource&gt;</ph> and the corresponding command is not a <ph id=\"ph3\">&lt;xref:System.Windows.Input.RoutedCommand&gt;</ph>, the command target is ignored.","pos":[317,549],"source":"  If the <xref:System.Windows.Input.InputBinding.CommandTarget%2A> is set on a <xref:System.Windows.Input.ICommandSource> and the corresponding command is not a <xref:System.Windows.Input.RoutedCommand>, the command target is ignored."}]}],"pos":[607,2500],"yaml":true,"extradata":"MT"},{"content":"Gets the command that will be executed when the command source is invoked.","nodes":[{"pos":[0,74],"content":"Gets the command that will be executed when the command source is invoked.","nodes":[{"content":"Gets the command that will be executed when the command source is invoked.","pos":[0,74]}]}],"pos":[3903,3978],"yaml":true},{"content":"The command that will be executed when the command source is invoked.","nodes":[{"pos":[0,69],"content":"The command that will be executed when the command source is invoked.","nodes":[{"content":"The command that will be executed when the command source is invoked.","pos":[0,69]}]}],"pos":[4128,4198],"yaml":true},{"content":"Represents a user defined data value that can be passed to the command when it is executed.","nodes":[{"pos":[0,91],"content":"Represents a user defined data value that can be passed to the command when it is executed.","nodes":[{"content":"Represents a user defined data value that can be passed to the command when it is executed.","pos":[0,91]}]}],"pos":[5233,5325],"yaml":true},{"content":"Normally, the <xref:System.Windows.Input.ICommandSource.CommandParameter%2A> is used to pass specific information to the command when it is executed.  The type of the data is defined by the command.","nodes":[{"pos":[0,198],"content":"Normally, the <xref:System.Windows.Input.ICommandSource.CommandParameter%2A> is used to pass specific information to the command when it is executed.  The type of the data is defined by the command.","nodes":[{"content":"Normally, the <xref:System.Windows.Input.ICommandSource.CommandParameter%2A> is used to pass specific information to the command when it is executed.  The type of the data is defined by the command.","pos":[0,198],"nodes":[{"content":"Normally, the <ph id=\"ph1\">&lt;xref:System.Windows.Input.ICommandSource.CommandParameter%2A&gt;</ph> is used to pass specific information to the command when it is executed.","pos":[0,149],"source":"Normally, the <xref:System.Windows.Input.ICommandSource.CommandParameter%2A> is used to pass specific information to the command when it is executed."},{"content":"The type of the data is defined by the command.","pos":[151,198]}]}]}],"pos":[5336,5535],"yaml":true,"extradata":"MT"},{"content":"The command specific data.","nodes":[{"pos":[0,26],"content":"The command specific data.","nodes":[{"content":"The command specific data.","pos":[0,26]}]}],"pos":[5655,5682],"yaml":true},{"content":"The object that the command is being executed on.","nodes":[{"pos":[0,49],"content":"The object that the command is being executed on.","nodes":[{"content":"The object that the command is being executed on.","pos":[0,49]}]}],"pos":[6708,6758],"yaml":true},{"content":"In the [!INCLUDE[TLA#tla_wpf](~/includes/tlasharptla-wpf-md.md)] commanding system, the <xref:System.Windows.Input.InputBinding.CommandTarget%2A> property on a <xref:System.Windows.Input.ICommandSource> is only applicable when the <xref:System.Windows.Input.ICommand> is a <xref:System.Windows.Input.RoutedCommand>.  If the <xref:System.Windows.Input.InputBinding.CommandTarget%2A> is set on a <xref:System.Windows.Input.ICommandSource> and the corresponding command is not a <xref:System.Windows.Input.RoutedCommand>, the command target is ignored.  \n  \n When used with a <xref:System.Windows.Input.RoutedCommand>, the command target is the object on which the <xref:System.Windows.Input.CommandManager.Executed> and <xref:System.Windows.Input.CommandManager.CanExecute> events are raised. If the <xref:System.Windows.Input.ICommandSource.CommandTarget%2A> property is not set, the element with keyboard focus will be used as the target.","nodes":[{"pos":[0,549],"content":"In the [!INCLUDE[TLA#tla_wpf](~/includes/tlasharptla-wpf-md.md)] commanding system, the <xref:System.Windows.Input.InputBinding.CommandTarget%2A> property on a <xref:System.Windows.Input.ICommandSource> is only applicable when the <xref:System.Windows.Input.ICommand> is a <xref:System.Windows.Input.RoutedCommand>.  If the <xref:System.Windows.Input.InputBinding.CommandTarget%2A> is set on a <xref:System.Windows.Input.ICommandSource> and the corresponding command is not a <xref:System.Windows.Input.RoutedCommand>, the command target is ignored.","nodes":[{"content":"In the <ph id=\"ph1\">[!INCLUDE[TLA#tla_wpf](~/includes/tlasharptla-wpf-md.md)]</ph> commanding system, the <ph id=\"ph2\">&lt;xref:System.Windows.Input.InputBinding.CommandTarget%2A&gt;</ph> property on a <ph id=\"ph3\">&lt;xref:System.Windows.Input.ICommandSource&gt;</ph> is only applicable when the <ph id=\"ph4\">&lt;xref:System.Windows.Input.ICommand&gt;</ph> is a <ph id=\"ph5\">&lt;xref:System.Windows.Input.RoutedCommand&gt;</ph>.","pos":[0,315],"source":"In the [!INCLUDE[TLA#tla_wpf](~/includes/tlasharptla-wpf-md.md)] commanding system, the <xref:System.Windows.Input.InputBinding.CommandTarget%2A> property on a <xref:System.Windows.Input.ICommandSource> is only applicable when the <xref:System.Windows.Input.ICommand> is a <xref:System.Windows.Input.RoutedCommand>."},{"content":"If the <ph id=\"ph1\">&lt;xref:System.Windows.Input.InputBinding.CommandTarget%2A&gt;</ph> is set on a <ph id=\"ph2\">&lt;xref:System.Windows.Input.ICommandSource&gt;</ph> and the corresponding command is not a <ph id=\"ph3\">&lt;xref:System.Windows.Input.RoutedCommand&gt;</ph>, the command target is ignored.","pos":[317,549],"source":"  If the <xref:System.Windows.Input.InputBinding.CommandTarget%2A> is set on a <xref:System.Windows.Input.ICommandSource> and the corresponding command is not a <xref:System.Windows.Input.RoutedCommand>, the command target is ignored."}]},{"pos":[556,938],"content":"When used with a <xref:System.Windows.Input.RoutedCommand>, the command target is the object on which the <xref:System.Windows.Input.CommandManager.Executed> and <xref:System.Windows.Input.CommandManager.CanExecute> events are raised. If the <xref:System.Windows.Input.ICommandSource.CommandTarget%2A> property is not set, the element with keyboard focus will be used as the target.","nodes":[{"content":"When used with a <xref:System.Windows.Input.RoutedCommand>, the command target is the object on which the <xref:System.Windows.Input.CommandManager.Executed> and <xref:System.Windows.Input.CommandManager.CanExecute> events are raised. If the <xref:System.Windows.Input.ICommandSource.CommandTarget%2A> property is not set, the element with keyboard focus will be used as the target.","pos":[0,382],"nodes":[{"content":"When used with a <ph id=\"ph1\">&lt;xref:System.Windows.Input.RoutedCommand&gt;</ph>, the command target is the object on which the <ph id=\"ph2\">&lt;xref:System.Windows.Input.CommandManager.Executed&gt;</ph> and <ph id=\"ph3\">&lt;xref:System.Windows.Input.CommandManager.CanExecute&gt;</ph> events are raised.","pos":[0,234],"source":"When used with a <xref:System.Windows.Input.RoutedCommand>, the command target is the object on which the <xref:System.Windows.Input.CommandManager.Executed> and <xref:System.Windows.Input.CommandManager.CanExecute> events are raised."},{"content":"If the <ph id=\"ph1\">&lt;xref:System.Windows.Input.ICommandSource.CommandTarget%2A&gt;</ph> property is not set, the element with keyboard focus will be used as the target.","pos":[235,382],"source":" If the <xref:System.Windows.Input.ICommandSource.CommandTarget%2A> property is not set, the element with keyboard focus will be used as the target."}]}]}],"pos":[6769,7712],"yaml":true,"extradata":"MT"},{"content":"The object that the command is being executed on.","nodes":[{"pos":[0,49],"content":"The object that the command is being executed on.","nodes":[{"content":"The object that the command is being executed on.","pos":[0,49]}]}],"pos":[7866,7916],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Windows.Input.ICommandSource\n  commentId: T:System.Windows.Input.ICommandSource\n  id: ICommandSource\n  children:\n  - System.Windows.Input.ICommandSource.Command\n  - System.Windows.Input.ICommandSource.CommandParameter\n  - System.Windows.Input.ICommandSource.CommandTarget\n  langs:\n  - csharp\n  name: ICommandSource\n  nameWithType: ICommandSource\n  fullName: System.Windows.Input.ICommandSource\n  type: Interface\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Input\n  summary: Defines an object that knows how to invoke a command.\n  remarks: \"The command source defines how a command is invoked by that particular object.  For example, if a <xref:System.Windows.Controls.Button> is associated with a command, the command is invoked when the <xref:System.Windows.Controls.Button> is clicked.  \\n  \\n A command source will normally disable itself if the command it is associated with cannot execute on the current command target.  For example, a <xref:System.Windows.Controls.MenuItem> associated with the <xref:System.Windows.Input.ApplicationCommands.Paste%2A> command will gray itself out when the <xref:System.Windows.Input.ApplicationCommands.Paste%2A> command cannot execute on the current command target.  \\n  \\n Normally, a command source will listen to the <xref:System.Windows.Input.ICommand.CanExecuteChanged> event on the command.  This informs the command source when conditions change on the command target, such as loss of keyboard focus.  The command source can then query the command using the <xref:System.Windows.Input.ICommand.CanExecute%2A> method.  \\n  \\n Some of the classes in [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] that implement <xref:System.Windows.Input.ICommandSource> are: <xref:System.Windows.Controls.Primitives.ButtonBase>, <xref:System.Windows.Controls.MenuItem>, and <xref:System.Windows.Documents.Hyperlink>.  \\n  \\n In the [!INCLUDE[TLA#tla_wpf](~/includes/tlasharptla-wpf-md.md)] commanding system, the <xref:System.Windows.Input.InputBinding.CommandTarget%2A> property on a <xref:System.Windows.Input.ICommandSource> is only applicable when the <xref:System.Windows.Input.ICommand> is a <xref:System.Windows.Input.RoutedCommand>.  If the <xref:System.Windows.Input.InputBinding.CommandTarget%2A> is set on a <xref:System.Windows.Input.ICommandSource> and the corresponding command is not a <xref:System.Windows.Input.RoutedCommand>, the command target is ignored.\"\n  syntax:\n    content: public interface ICommandSource\n  derivedClasses:\n  - Microsoft.Windows.Input.IPreviewCommandSource\n  - System.Windows.Controls.MenuItem\n  - System.Windows.Controls.Primitives.ButtonBase\n  - System.Windows.Controls.Ribbon.RibbonGallery\n  - System.Windows.Controls.Ribbon.RibbonSplitButton\n  - System.Windows.Controls.Ribbon.RibbonTextBox\n  - System.Windows.Documents.Hyperlink\n  - System.Windows.Input.InputBinding\n  - System.Windows.Shell.ThumbButtonInfo\n  implements: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Input/ICommandSource.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.Input.ICommandSource.Command\n  commentId: P:System.Windows.Input.ICommandSource.Command\n  id: Command\n  parent: System.Windows.Input.ICommandSource\n  langs:\n  - csharp\n  name: Command\n  nameWithType: ICommandSource.Command\n  fullName: ICommandSource.Command\n  type: Property\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Input\n  summary: Gets the command that will be executed when the command source is invoked.\n  syntax:\n    content: public System.Windows.Input.ICommand Command { get; }\n    return:\n      type: System.Windows.Input.ICommand\n      description: The command that will be executed when the command source is invoked.\n  overload: System.Windows.Input.ICommandSource.Command*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Input/ICommandSource.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.Input.ICommandSource.CommandParameter\n  commentId: P:System.Windows.Input.ICommandSource.CommandParameter\n  id: CommandParameter\n  parent: System.Windows.Input.ICommandSource\n  langs:\n  - csharp\n  name: CommandParameter\n  nameWithType: ICommandSource.CommandParameter\n  fullName: ICommandSource.CommandParameter\n  type: Property\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Input\n  summary: Represents a user defined data value that can be passed to the command when it is executed.\n  remarks: Normally, the <xref:System.Windows.Input.ICommandSource.CommandParameter%2A> is used to pass specific information to the command when it is executed.  The type of the data is defined by the command.\n  syntax:\n    content: public object CommandParameter { get; }\n    return:\n      type: System.Object\n      description: The command specific data.\n  overload: System.Windows.Input.ICommandSource.CommandParameter*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Input/ICommandSource.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.Input.ICommandSource.CommandTarget\n  commentId: P:System.Windows.Input.ICommandSource.CommandTarget\n  id: CommandTarget\n  parent: System.Windows.Input.ICommandSource\n  langs:\n  - csharp\n  name: CommandTarget\n  nameWithType: ICommandSource.CommandTarget\n  fullName: ICommandSource.CommandTarget\n  type: Property\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Input\n  summary: The object that the command is being executed on.\n  remarks: \"In the [!INCLUDE[TLA#tla_wpf](~/includes/tlasharptla-wpf-md.md)] commanding system, the <xref:System.Windows.Input.InputBinding.CommandTarget%2A> property on a <xref:System.Windows.Input.ICommandSource> is only applicable when the <xref:System.Windows.Input.ICommand> is a <xref:System.Windows.Input.RoutedCommand>.  If the <xref:System.Windows.Input.InputBinding.CommandTarget%2A> is set on a <xref:System.Windows.Input.ICommandSource> and the corresponding command is not a <xref:System.Windows.Input.RoutedCommand>, the command target is ignored.  \\n  \\n When used with a <xref:System.Windows.Input.RoutedCommand>, the command target is the object on which the <xref:System.Windows.Input.CommandManager.Executed> and <xref:System.Windows.Input.CommandManager.CanExecute> events are raised. If the <xref:System.Windows.Input.ICommandSource.CommandTarget%2A> property is not set, the element with keyboard focus will be used as the target.\"\n  syntax:\n    content: public System.Windows.IInputElement CommandTarget { get; }\n    return:\n      type: System.Windows.IInputElement\n      description: The object that the command is being executed on.\n  overload: System.Windows.Input.ICommandSource.CommandTarget*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Input/ICommandSource.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\nreferences:\n- uid: System.Windows.Input.ICommandSource.Command\n  parent: System.Windows.Input.ICommandSource\n  isExternal: false\n  name: Command\n  nameWithType: ICommandSource.Command\n  fullName: ICommandSource.Command\n- uid: System.Windows.Input.ICommand\n  parent: System.Windows.Input\n  isExternal: false\n  name: ICommand\n  nameWithType: ICommand\n  fullName: System.Windows.Input.ICommand\n- uid: System.Windows.Input.ICommandSource.CommandParameter\n  parent: System.Windows.Input.ICommandSource\n  isExternal: false\n  name: CommandParameter\n  nameWithType: ICommandSource.CommandParameter\n  fullName: ICommandSource.CommandParameter\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.Windows.Input.ICommandSource.CommandTarget\n  parent: System.Windows.Input.ICommandSource\n  isExternal: false\n  name: CommandTarget\n  nameWithType: ICommandSource.CommandTarget\n  fullName: ICommandSource.CommandTarget\n- uid: System.Windows.IInputElement\n  parent: System.Windows\n  isExternal: false\n  name: IInputElement\n  nameWithType: IInputElement\n  fullName: System.Windows.IInputElement\n- uid: System.Windows.Input.ICommandSource.Command*\n  parent: System.Windows.Input.ICommandSource\n  isExternal: false\n  name: Command\n  nameWithType: ICommandSource.Command\n  fullName: ICommandSource.Command\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Input/ICommandSource.xml\n- uid: System.Windows.Input.ICommandSource.CommandParameter*\n  parent: System.Windows.Input.ICommandSource\n  isExternal: false\n  name: CommandParameter\n  nameWithType: ICommandSource.CommandParameter\n  fullName: ICommandSource.CommandParameter\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Input/ICommandSource.xml\n- uid: System.Windows.Input.ICommandSource.CommandTarget*\n  parent: System.Windows.Input.ICommandSource\n  isExternal: false\n  name: CommandTarget\n  nameWithType: ICommandSource.CommandTarget\n  fullName: ICommandSource.CommandTarget\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Input/ICommandSource.xml\n"}