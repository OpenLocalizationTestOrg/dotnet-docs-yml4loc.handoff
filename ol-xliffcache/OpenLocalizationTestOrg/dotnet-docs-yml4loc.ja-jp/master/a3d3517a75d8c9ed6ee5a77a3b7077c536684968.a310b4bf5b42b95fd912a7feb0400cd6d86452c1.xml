{"nodes":[{"content":"Represents a thread-safe collection of key/value pairs that can be accessed by multiple threads concurrently.","nodes":[{"pos":[0,109],"content":"Represents a thread-safe collection of key/value pairs that can be accessed by multiple threads concurrently.","nodes":[{"content":"Represents a thread-safe collection of key/value pairs that can be accessed by multiple threads concurrently.","pos":[0,109]}]}],"pos":[5847,5957],"yaml":true},{"content":"For very large <xref:System.Collections.Concurrent.ConcurrentDictionary%602> objects, you can increase the maximum array size to 2 gigabytes (GB) on a 64-bit system by setting the  configuration element to `true` in the run-time environment.  \n  \n> [!NOTE]\n>  <xref:System.Collections.Concurrent.ConcurrentDictionary%602> implements the <xref:System.Collections.Generic.IReadOnlyCollection%601> and <xref:System.Collections.Generic.IReadOnlyDictionary%602> interfaces starting with the [!INCLUDE[net_v46](~/includes/net-v46-md.md)]; in previous versions of the .NET Framework, the <xref:System.Collections.Concurrent.ConcurrentDictionary%602> class did not implement these interfaces.  \n  \n Like the <xref:System.Collections.Generic.Dictionary%602?displayProperty=fullName> class, <xref:System.Collections.Concurrent.ConcurrentDictionary%602> implements the <xref:System.Collections.Generic.IDictionary%602> interface. In addition, <xref:System.Collections.Concurrent.ConcurrentDictionary%602> provides several methods for adding or updating key/value pairs in the dictionary, as described in the following table.  \n  \n|To do this|Use this method|Usage notes|  \n|----------------|---------------------|-----------------|  \n|Add a new key to the dictionary, if it doesn’t already exist in the dictionary|<xref:System.Collections.Concurrent.ConcurrentDictionary%602.TryAdd%2A>|This method adds the specified key/value pair, if the key doesn’t currently exist in the dictionary. The method returns `true` or `false` depending on whether the new pair was added.|  \n|Update the value for an existing key in the dictionary, if that key has a specific value|<xref:System.Collections.Concurrent.ConcurrentDictionary%602.TryUpdate%2A>|This method checks whether the key has a specified value, and if it does, updates the key with a new value. It's similar to the <xref:System.Threading.Interlocked.CompareExchange%2A> method, except that it's used for dictionary elements.|  \n|Store a key/value pair in the dictionary unconditionally, and overwrite the value of a key that already exists|The indexer’s setter: `dictionary[key] = newValue`||  \n|Add a key/value pair to the dictionary, or if the key already exists, update the value for the key based on the key’s existing value|<xref:System.Collections.Concurrent.ConcurrentDictionary%602.AddOrUpdate%28%600%2CSystem.Func%7B%600%2C%601%7D%2CSystem.Func%7B%600%2C%601%2C%601%7D%29><br /><br /> —or—<br /><br /> <xref:System.Collections.Concurrent.ConcurrentDictionary%602.AddOrUpdate%28%600%2C%601%2CSystem.Func%7B%600%2C%601%2C%601%7D%29>|<xref:System.Collections.Concurrent.ConcurrentDictionary%602.AddOrUpdate%28%600%2CSystem.Func%7B%600%2C%601%7D%2CSystem.Func%7B%600%2C%601%2C%601%7D%29> accepts the key and two delegates. It uses the first delegate if the key doesn’t exist in the dictionary; it accepts the key and returns the value that should be added for the key. It uses the second delegate if the key does exist; it accepts the key and its current value, and it returns the new value that should be set for the key.<br /><br /> <xref:System.Collections.Concurrent.ConcurrentDictionary%602.AddOrUpdate%28%600%2C%601%2CSystem.Func%7B%600%2C%601%2C%601%7D%29> accepts the key, a value to add, and the update delegate. This is the same as the previous overload, except that it doesn't use a delegate to add a key.|  \n|Get the value for a key in the dictionary, adding the value to the dictionary and returning it if the key doesn’t exist|<xref:System.Collections.Concurrent.ConcurrentDictionary%602.GetOrAdd%28%600%2C%601%29><br /><br /> —or—<br /><br /> <xref:System.Collections.Concurrent.ConcurrentDictionary%602.GetOrAdd%28%600%2CSystem.Func%7B%600%2C%601%7D%29>|These overloads provide lazy initialization for a key/value pair in the dictionary, adding the value only if it’s not there.<br /><br /> <xref:System.Collections.Concurrent.ConcurrentDictionary%602.GetOrAdd%28%600%2C%601%29> takes the value to be added if the key doesn’t exist.<br /><br /> <xref:System.Collections.Concurrent.ConcurrentDictionary%602.GetOrAdd%28%600%2CSystem.Func%7B%600%2C%601%7D%29> takes a delegate that will generate the value if the key doesn’t exist.|  \n  \n All these operations are atomic and are thread-safe with regards to all other operations on the <xref:System.Collections.Concurrent.ConcurrentDictionary%602> class. The only exceptions are the methods that accept a delegate, that is, <xref:System.Collections.Concurrent.ConcurrentDictionary%602.AddOrUpdate%2A> and <xref:System.Collections.Concurrent.ConcurrentDictionary%602.GetOrAdd%2A>. For modifications and write operations to the dictionary, <xref:System.Collections.Concurrent.ConcurrentDictionary%602> uses fine-grained locking to ensure thread safety. (Read operations on the dictionary are performed in a lock-free manner.) However, delegates for these methods are called outside the locks to avoid the problems that can arise from executing unknown code under a lock. Therefore, the code executed by these delegates is not subject to the atomicity of the operation.","nodes":[{"pos":[0,241],"content":"For very large <ph id=\"ph1\">&lt;xref:System.Collections.Concurrent.ConcurrentDictionary%602&gt;</ph> objects, you can increase the maximum array size to 2 gigabytes (GB) on a 64-bit system by setting the  configuration element to <ph id=\"ph2\">`true`</ph> in the run-time environment.","source":"For very large <xref:System.Collections.Concurrent.ConcurrentDictionary%602> objects, you can increase the maximum array size to 2 gigabytes (GB) on a 64-bit system by setting the  configuration element to `true` in the run-time environment."},{"pos":[249,684],"content":"[!NOTE]\n <xref:System.Collections.Concurrent.ConcurrentDictionary%602> implements the <xref:System.Collections.Generic.IReadOnlyCollection%601> and <xref:System.Collections.Generic.IReadOnlyDictionary%602> interfaces starting with the [!INCLUDE[net_v46](~/includes/net-v46-md.md)]; in previous versions of the .NET Framework, the <xref:System.Collections.Concurrent.ConcurrentDictionary%602> class did not implement these interfaces.","leadings":["","> "],"nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Collections.Concurrent.ConcurrentDictionary%602&gt;</ph> implements the <ph id=\"ph2\">&lt;xref:System.Collections.Generic.IReadOnlyCollection%601&gt;</ph> and <ph id=\"ph3\">&lt;xref:System.Collections.Generic.IReadOnlyDictionary%602&gt;</ph> interfaces starting with the <ph id=\"ph4\">[!INCLUDE[net_v46](~/includes/net-v46-md.md)]</ph>; in previous versions of the .NET Framework, the <ph id=\"ph5\">&lt;xref:System.Collections.Concurrent.ConcurrentDictionary%602&gt;</ph> class did not implement these interfaces.","pos":[9,433],"source":" <xref:System.Collections.Concurrent.ConcurrentDictionary%602> implements the <xref:System.Collections.Generic.IReadOnlyCollection%601> and <xref:System.Collections.Generic.IReadOnlyDictionary%602> interfaces starting with the [!INCLUDE[net_v46](~/includes/net-v46-md.md)]; in previous versions of the .NET Framework, the <xref:System.Collections.Concurrent.ConcurrentDictionary%602> class did not implement these interfaces."}]},{"pos":[691,1113],"content":"Like the <xref:System.Collections.Generic.Dictionary%602?displayProperty=fullName> class, <xref:System.Collections.Concurrent.ConcurrentDictionary%602> implements the <xref:System.Collections.Generic.IDictionary%602> interface. In addition, <xref:System.Collections.Concurrent.ConcurrentDictionary%602> provides several methods for adding or updating key/value pairs in the dictionary, as described in the following table.","nodes":[{"content":"Like the <xref:System.Collections.Generic.Dictionary%602?displayProperty=fullName> class, <xref:System.Collections.Concurrent.ConcurrentDictionary%602> implements the <xref:System.Collections.Generic.IDictionary%602> interface. In addition, <xref:System.Collections.Concurrent.ConcurrentDictionary%602> provides several methods for adding or updating key/value pairs in the dictionary, as described in the following table.","pos":[0,422],"nodes":[{"content":"Like the <ph id=\"ph1\">&lt;xref:System.Collections.Generic.Dictionary%602?displayProperty=fullName&gt;</ph> class, <ph id=\"ph2\">&lt;xref:System.Collections.Concurrent.ConcurrentDictionary%602&gt;</ph> implements the <ph id=\"ph3\">&lt;xref:System.Collections.Generic.IDictionary%602&gt;</ph> interface.","pos":[0,227],"source":"Like the <xref:System.Collections.Generic.Dictionary%602?displayProperty=fullName> class, <xref:System.Collections.Concurrent.ConcurrentDictionary%602> implements the <xref:System.Collections.Generic.IDictionary%602> interface."},{"content":"In addition, <ph id=\"ph1\">&lt;xref:System.Collections.Concurrent.ConcurrentDictionary%602&gt;</ph> provides several methods for adding or updating key/value pairs in the dictionary, as described in the following table.","pos":[228,422],"source":" In addition, <xref:System.Collections.Concurrent.ConcurrentDictionary%602> provides several methods for adding or updating key/value pairs in the dictionary, as described in the following table."}]}]},{"pos":[1120,1130],"content":"To do this","nodes":[{"content":"To do this","pos":[0,10]}]},{"pos":[1131,1146],"content":"Use this method","nodes":[{"content":"Use this method","pos":[0,15]}]},{"pos":[1147,1158],"content":"Usage notes","nodes":[{"content":"Usage notes","pos":[0,11]}]},{"pos":[1224,1302],"content":"Add a new key to the dictionary, if it doesn’t already exist in the dictionary","nodes":[{"content":"Add a new key to the dictionary, if it doesn’t already exist in the dictionary","pos":[0,78]}]},{"pos":[1303,1374],"content":"<xref:System.Collections.Concurrent.ConcurrentDictionary%602.TryAdd%2A>","nodes":[]},{"pos":[1375,1557],"content":"This method adds the specified key/value pair, if the key doesn’t currently exist in the dictionary. The method returns `true` or `false` depending on whether the new pair was added.","nodes":[{"content":"This method adds the specified key/value pair, if the key doesn’t currently exist in the dictionary.","pos":[0,100]},{"content":"The method returns <ph id=\"ph1\">`true`</ph> or <ph id=\"ph2\">`false`</ph> depending on whether the new pair was added.","pos":[101,182],"source":" The method returns `true` or `false` depending on whether the new pair was added."}]},{"pos":[1562,1650],"content":"Update the value for an existing key in the dictionary, if that key has a specific value","nodes":[{"content":"Update the value for an existing key in the dictionary, if that key has a specific value","pos":[0,88]}]},{"pos":[1651,1725],"content":"<xref:System.Collections.Concurrent.ConcurrentDictionary%602.TryUpdate%2A>","nodes":[]},{"pos":[1726,1963],"content":"This method checks whether the key has a specified value, and if it does, updates the key with a new value. It's similar to the <xref:System.Threading.Interlocked.CompareExchange%2A> method, except that it's used for dictionary elements.","nodes":[{"content":"This method checks whether the key has a specified value, and if it does, updates the key with a new value. It's similar to the <xref:System.Threading.Interlocked.CompareExchange%2A> method, except that it's used for dictionary elements.","pos":[0,237],"nodes":[{"content":"This method checks whether the key has a specified value, and if it does, updates the key with a new value.","pos":[0,107]},{"content":"It's similar to the <ph id=\"ph1\">&lt;xref:System.Threading.Interlocked.CompareExchange%2A&gt;</ph> method, except that it's used for dictionary elements.","pos":[108,237],"source":" It's similar to the <xref:System.Threading.Interlocked.CompareExchange%2A> method, except that it's used for dictionary elements."}]}]},{"pos":[1968,2078],"content":"Store a key/value pair in the dictionary unconditionally, and overwrite the value of a key that already exists","nodes":[{"content":"Store a key/value pair in the dictionary unconditionally, and overwrite the value of a key that already exists","pos":[0,110]}]},{"pos":[2079,2129],"content":"The indexer’s setter: <ph id=\"ph1\">`dictionary[key] = newValue`</ph>","source":"The indexer’s setter: `dictionary[key] = newValue`"},{"pos":[2135,2267],"content":"Add a key/value pair to the dictionary, or if the key already exists, update the value for the key based on the key’s existing value","nodes":[{"content":"Add a key/value pair to the dictionary, or if the key already exists, update the value for the key based on the key’s existing value","pos":[0,132]}]},{"pos":[2268,2578],"content":"<xref:System.Collections.Concurrent.ConcurrentDictionary%602.AddOrUpdate%28%600%2CSystem.Func%7B%600%2C%601%7D%2CSystem.Func%7B%600%2C%601%2C%601%7D%29><br /><br /> —or—<br /><br /> <xref:System.Collections.Concurrent.ConcurrentDictionary%602.AddOrUpdate%28%600%2C%601%2CSystem.Func%7B%600%2C%601%2C%601%7D%29>","nodes":[{"content":"—or—","pos":[165,169]}]},{"pos":[2579,3360],"content":"<xref:System.Collections.Concurrent.ConcurrentDictionary%602.AddOrUpdate%28%600%2CSystem.Func%7B%600%2C%601%7D%2CSystem.Func%7B%600%2C%601%2C%601%7D%29> accepts the key and two delegates. It uses the first delegate if the key doesn’t exist in the dictionary; it accepts the key and returns the value that should be added for the key. It uses the second delegate if the key does exist; it accepts the key and its current value, and it returns the new value that should be set for the key.<br /><br /> <xref:System.Collections.Concurrent.ConcurrentDictionary%602.AddOrUpdate%28%600%2C%601%2CSystem.Func%7B%600%2C%601%2C%601%7D%29> accepts the key, a value to add, and the update delegate. This is the same as the previous overload, except that it doesn't use a delegate to add a key.","nodes":[{"content":"<xref:System.Collections.Concurrent.ConcurrentDictionary%602.AddOrUpdate%28%600%2CSystem.Func%7B%600%2C%601%7D%2CSystem.Func%7B%600%2C%601%2C%601%7D%29> accepts the key and two delegates. It uses the first delegate if the key doesn’t exist in the dictionary; it accepts the key and returns the value that should be added for the key. It uses the second delegate if the key does exist; it accepts the key and its current value, and it returns the new value that should be set for the key.","pos":[0,487],"nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Collections.Concurrent.ConcurrentDictionary%602.AddOrUpdate%28%600%2CSystem.Func%7B%600%2C%601%7D%2CSystem.Func%7B%600%2C%601%2C%601%7D%29&gt;</ph> accepts the key and two delegates.","pos":[0,187],"source":"<xref:System.Collections.Concurrent.ConcurrentDictionary%602.AddOrUpdate%28%600%2CSystem.Func%7B%600%2C%601%7D%2CSystem.Func%7B%600%2C%601%2C%601%7D%29> accepts the key and two delegates."},{"content":"It uses the first delegate if the key doesn’t exist in the dictionary; it accepts the key and returns the value that should be added for the key.","pos":[188,333]},{"content":"It uses the second delegate if the key does exist; it accepts the key and its current value, and it returns the new value that should be set for the key.","pos":[334,487]}]},{"content":"<xref:System.Collections.Concurrent.ConcurrentDictionary%602.AddOrUpdate%28%600%2C%601%2CSystem.Func%7B%600%2C%601%2C%601%7D%29> accepts the key, a value to add, and the update delegate. This is the same as the previous overload, except that it doesn't use a delegate to add a key.","pos":[500,781],"nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Collections.Concurrent.ConcurrentDictionary%602.AddOrUpdate%28%600%2C%601%2CSystem.Func%7B%600%2C%601%2C%601%7D%29&gt;</ph> accepts the key, a value to add, and the update delegate.","pos":[0,186],"source":"<xref:System.Collections.Concurrent.ConcurrentDictionary%602.AddOrUpdate%28%600%2C%601%2CSystem.Func%7B%600%2C%601%2C%601%7D%29> accepts the key, a value to add, and the update delegate."},{"content":"This is the same as the previous overload, except that it doesn't use a delegate to add a key.","pos":[187,281]}]}]},{"pos":[3365,3484],"content":"Get the value for a key in the dictionary, adding the value to the dictionary and returning it if the key doesn’t exist","nodes":[{"content":"Get the value for a key in the dictionary, adding the value to the dictionary and returning it if the key doesn’t exist","pos":[0,119]}]},{"pos":[3485,3713],"content":"<xref:System.Collections.Concurrent.ConcurrentDictionary%602.GetOrAdd%28%600%2C%601%29><br /><br /> —or—<br /><br /> <xref:System.Collections.Concurrent.ConcurrentDictionary%602.GetOrAdd%28%600%2CSystem.Func%7B%600%2C%601%7D%29>","nodes":[{"content":"—or—","pos":[100,104]}]},{"pos":[3714,4188],"content":"These overloads provide lazy initialization for a key/value pair in the dictionary, adding the value only if it’s not there.<br /><br /> <xref:System.Collections.Concurrent.ConcurrentDictionary%602.GetOrAdd%28%600%2C%601%29> takes the value to be added if the key doesn’t exist.<br /><br /> <xref:System.Collections.Concurrent.ConcurrentDictionary%602.GetOrAdd%28%600%2CSystem.Func%7B%600%2C%601%7D%29> takes a delegate that will generate the value if the key doesn’t exist.","nodes":[{"content":"These overloads provide lazy initialization for a key/value pair in the dictionary, adding the value only if it’s not there.","pos":[0,124]},{"content":"<ph id=\"ph1\">&lt;xref:System.Collections.Concurrent.ConcurrentDictionary%602.GetOrAdd%28%600%2C%601%29&gt;</ph> takes the value to be added if the key doesn’t exist.","pos":[137,278],"source":"<xref:System.Collections.Concurrent.ConcurrentDictionary%602.GetOrAdd%28%600%2C%601%29> takes the value to be added if the key doesn’t exist."},{"content":"<ph id=\"ph1\">&lt;xref:System.Collections.Concurrent.ConcurrentDictionary%602.GetOrAdd%28%600%2CSystem.Func%7B%600%2C%601%7D%29&gt;</ph> takes a delegate that will generate the value if the key doesn’t exist.","pos":[291,474],"source":"<xref:System.Collections.Concurrent.ConcurrentDictionary%602.GetOrAdd%28%600%2CSystem.Func%7B%600%2C%601%7D%29> takes a delegate that will generate the value if the key doesn’t exist."}]},{"pos":[4196,5072],"content":"All these operations are atomic and are thread-safe with regards to all other operations on the <xref:System.Collections.Concurrent.ConcurrentDictionary%602> class. The only exceptions are the methods that accept a delegate, that is, <xref:System.Collections.Concurrent.ConcurrentDictionary%602.AddOrUpdate%2A> and <xref:System.Collections.Concurrent.ConcurrentDictionary%602.GetOrAdd%2A>. For modifications and write operations to the dictionary, <xref:System.Collections.Concurrent.ConcurrentDictionary%602> uses fine-grained locking to ensure thread safety. (Read operations on the dictionary are performed in a lock-free manner.) However, delegates for these methods are called outside the locks to avoid the problems that can arise from executing unknown code under a lock. Therefore, the code executed by these delegates is not subject to the atomicity of the operation.","nodes":[{"content":"All these operations are atomic and are thread-safe with regards to all other operations on the <xref:System.Collections.Concurrent.ConcurrentDictionary%602> class. The only exceptions are the methods that accept a delegate, that is, <xref:System.Collections.Concurrent.ConcurrentDictionary%602.AddOrUpdate%2A> and <xref:System.Collections.Concurrent.ConcurrentDictionary%602.GetOrAdd%2A>. For modifications and write operations to the dictionary, <xref:System.Collections.Concurrent.ConcurrentDictionary%602> uses fine-grained locking to ensure thread safety. (Read operations on the dictionary are performed in a lock-free manner.) However, delegates for these methods are called outside the locks to avoid the problems that can arise from executing unknown code under a lock. Therefore, the code executed by these delegates is not subject to the atomicity of the operation.","pos":[0,876],"nodes":[{"content":"All these operations are atomic and are thread-safe with regards to all other operations on the <ph id=\"ph1\">&lt;xref:System.Collections.Concurrent.ConcurrentDictionary%602&gt;</ph> class.","pos":[0,164],"source":"All these operations are atomic and are thread-safe with regards to all other operations on the <xref:System.Collections.Concurrent.ConcurrentDictionary%602> class."},{"content":"The only exceptions are the methods that accept a delegate, that is, <ph id=\"ph1\">&lt;xref:System.Collections.Concurrent.ConcurrentDictionary%602.AddOrUpdate%2A&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Collections.Concurrent.ConcurrentDictionary%602.GetOrAdd%2A&gt;</ph>.","pos":[165,389],"source":" The only exceptions are the methods that accept a delegate, that is, <xref:System.Collections.Concurrent.ConcurrentDictionary%602.AddOrUpdate%2A> and <xref:System.Collections.Concurrent.ConcurrentDictionary%602.GetOrAdd%2A>."},{"content":"For modifications and write operations to the dictionary, <ph id=\"ph1\">&lt;xref:System.Collections.Concurrent.ConcurrentDictionary%602&gt;</ph> uses fine-grained locking to ensure thread safety.","pos":[390,560],"source":" For modifications and write operations to the dictionary, <xref:System.Collections.Concurrent.ConcurrentDictionary%602> uses fine-grained locking to ensure thread safety."},{"content":"(Read operations on the dictionary are performed in a lock-free manner.) However, delegates for these methods are called outside the locks to avoid the problems that can arise from executing unknown code under a lock.","pos":[561,778]},{"content":"Therefore, the code executed by these delegates is not subject to the atomicity of the operation.","pos":[779,876]}]}]}],"pos":[5968,11058],"yaml":true,"extradata":"MT"},{"content":"The type of the keys in the dictionary.","nodes":[{"pos":[0,39],"content":"The type of the keys in the dictionary.","nodes":[{"content":"The type of the keys in the dictionary.","pos":[0,39]}]}],"pos":[12217,12257],"yaml":true},{"content":"The type of the values in the dictionary.","nodes":[{"pos":[0,41],"content":"The type of the values in the dictionary.","nodes":[{"content":"The type of the values in the dictionary.","pos":[0,41]}]}],"pos":[12293,12335],"yaml":true},{"content":"Initializes a new instance of the <xref href=\"System.Collections.Concurrent.ConcurrentDictionary`2\"></xref> class that is empty, has the default concurrency level, has the default initial capacity, and uses the default comparer for the key type.","nodes":[{"pos":[0,245],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Collections.Concurrent.ConcurrentDictionary`2\"&gt;&lt;/xref&gt;</ph> class that is empty, has the default concurrency level, has the default initial capacity, and uses the default comparer for the key type.","source":"Initializes a new instance of the <xref href=\"System.Collections.Concurrent.ConcurrentDictionary`2\"></xref> class that is empty, has the default concurrency level, has the default initial capacity, and uses the default comparer for the key type."}],"pos":[42197,42443],"yaml":true},{"content":"The default concurrency level is the default concurrency multiplier (DEFAULT_CONCURRENCY_MULTIPLIER) times the number of CPUs. The higher the default concurrency multiplier is, the more concurrent write operations can take place without interference and blocking. Higher multiplier values also cause operations that require all locks (for example, table resizing, `ToArray` and `Count`) to become more expensive. The default concurrency multiplier is 4. The default capacity (DEFAULT_CAPACITY), which represents the initial number of buckets, is a trade-off between the size of a very small dictionary and the number of resizes when constructing a large dictionary. Also, the capacity should not be divisible by a small prime number. The default capacity is 31.","nodes":[{"pos":[0,761],"content":"The default concurrency level is the default concurrency multiplier (DEFAULT_CONCURRENCY_MULTIPLIER) times the number of CPUs. The higher the default concurrency multiplier is, the more concurrent write operations can take place without interference and blocking. Higher multiplier values also cause operations that require all locks (for example, table resizing, `ToArray` and `Count`) to become more expensive. The default concurrency multiplier is 4. The default capacity (DEFAULT_CAPACITY), which represents the initial number of buckets, is a trade-off between the size of a very small dictionary and the number of resizes when constructing a large dictionary. Also, the capacity should not be divisible by a small prime number. The default capacity is 31.","nodes":[{"content":"The default concurrency level is the default concurrency multiplier (DEFAULT_CONCURRENCY_MULTIPLIER) times the number of CPUs.","pos":[0,126]},{"content":"The higher the default concurrency multiplier is, the more concurrent write operations can take place without interference and blocking.","pos":[127,263]},{"content":"Higher multiplier values also cause operations that require all locks (for example, table resizing, <ph id=\"ph1\">`ToArray`</ph> and <ph id=\"ph2\">`Count`</ph>) to become more expensive.","pos":[264,412],"source":" Higher multiplier values also cause operations that require all locks (for example, table resizing, `ToArray` and `Count`) to become more expensive."},{"content":"The default concurrency multiplier is 4.","pos":[413,453]},{"content":"The default capacity (DEFAULT_CAPACITY), which represents the initial number of buckets, is a trade-off between the size of a very small dictionary and the number of resizes when constructing a large dictionary.","pos":[454,665]},{"content":"Also, the capacity should not be divisible by a small prime number.","pos":[666,733]},{"content":"The default capacity is 31.","pos":[734,761]}]}],"pos":[42454,43216],"yaml":true,"extradata":"MT"},{"content":"Initializes a new instance of the <xref href=\"System.Collections.Concurrent.ConcurrentDictionary`2\"></xref> class that contains elements copied from the specified <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref>, has the default concurrency level, has the default initial capacity, and uses the default comparer for the key type.","nodes":[{"pos":[0,342],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Collections.Concurrent.ConcurrentDictionary`2\"&gt;&lt;/xref&gt;</ph> class that contains elements copied from the specified <ph id=\"ph2\">&lt;xref href=\"System.Collections.Generic.IEnumerable`1\"&gt;&lt;/xref&gt;</ph>, has the default concurrency level, has the default initial capacity, and uses the default comparer for the key type.","source":"Initializes a new instance of the <xref href=\"System.Collections.Concurrent.ConcurrentDictionary`2\"></xref> class that contains elements copied from the specified <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref>, has the default concurrency level, has the default initial capacity, and uses the default comparer for the key type."}],"pos":[45367,45710],"yaml":true},{"content":"The <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> whose elements are copied to the new <xref href=\"System.Collections.Concurrent.ConcurrentDictionary`2\"></xref>.","nodes":[{"pos":[0,177],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.IEnumerable`1\"&gt;&lt;/xref&gt;</ph> whose elements are copied to the new <ph id=\"ph2\">&lt;xref href=\"System.Collections.Concurrent.ConcurrentDictionary`2\"&gt;&lt;/xref&gt;</ph>.","source":"The <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> whose elements are copied to the new <xref href=\"System.Collections.Concurrent.ConcurrentDictionary`2\"></xref>."}],"pos":[46029,46207],"yaml":true},{"content":"<code>collection</code> or any of its keys is  `null`.","nodes":[{"pos":[0,54],"content":"<ph id=\"ph1\">&lt;code&gt;collection&lt;/code&gt;</ph> or any of its keys is  <ph id=\"ph2\">`null`</ph>.","source":"<code>collection</code> or any of its keys is  `null`."}],"pos":[46395,46450],"yaml":true},{"content":"<code>collection</code> contains one or more duplicate keys.","nodes":[{"pos":[0,60],"content":"<ph id=\"ph1\">&lt;code&gt;collection&lt;/code&gt;</ph> contains one or more duplicate keys.","source":"<code>collection</code> contains one or more duplicate keys."}],"pos":[46544,46605],"yaml":true},{"content":"Initializes a new instance of the <xref href=\"System.Collections.Concurrent.ConcurrentDictionary`2\"></xref> class that is empty, has the default concurrency level and capacity, and uses the specified <xref href=\"System.Collections.Generic.IEqualityComparer`1\"></xref>.","nodes":[{"pos":[0,268],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Collections.Concurrent.ConcurrentDictionary`2\"&gt;&lt;/xref&gt;</ph> class that is empty, has the default concurrency level and capacity, and uses the specified <ph id=\"ph2\">&lt;xref href=\"System.Collections.Generic.IEqualityComparer`1\"&gt;&lt;/xref&gt;</ph>.","source":"Initializes a new instance of the <xref href=\"System.Collections.Concurrent.ConcurrentDictionary`2\"></xref> class that is empty, has the default concurrency level and capacity, and uses the specified <xref href=\"System.Collections.Generic.IEqualityComparer`1\"></xref>."}],"pos":[48434,48703],"yaml":true},{"content":"The equality comparison implementation to use when comparing keys.","nodes":[{"pos":[0,66],"content":"The equality comparison implementation to use when comparing keys.","nodes":[{"content":"The equality comparison implementation to use when comparing keys.","pos":[0,66]}]}],"pos":[48934,49001],"yaml":true},{"content":"<code>comparer</code> is `null`.","nodes":[{"pos":[0,32],"content":"<ph id=\"ph1\">&lt;code&gt;comparer&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>comparer</code> is `null`."}],"pos":[49189,49222],"yaml":true},{"content":"Initializes a new instance of the <xref href=\"System.Collections.Concurrent.ConcurrentDictionary`2\"></xref> class that contains elements copied from the specified <xref href=\"System.Collections.IEnumerable\"></xref> has the default concurrency level, has the default initial capacity, and uses the specified  <xref href=\"System.Collections.Generic.IEqualityComparer`1\"></xref>.","nodes":[{"pos":[0,376],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Collections.Concurrent.ConcurrentDictionary`2\"&gt;&lt;/xref&gt;</ph> class that contains elements copied from the specified <ph id=\"ph2\">&lt;xref href=\"System.Collections.IEnumerable\"&gt;&lt;/xref&gt;</ph> has the default concurrency level, has the default initial capacity, and uses the specified  <ph id=\"ph3\">&lt;xref href=\"System.Collections.Generic.IEqualityComparer`1\"&gt;&lt;/xref&gt;</ph>.","source":"Initializes a new instance of the <xref href=\"System.Collections.Concurrent.ConcurrentDictionary`2\"></xref> class that contains elements copied from the specified <xref href=\"System.Collections.IEnumerable\"></xref> has the default concurrency level, has the default initial capacity, and uses the specified  <xref href=\"System.Collections.Generic.IEqualityComparer`1\"></xref>."}],"pos":[51432,51809],"yaml":true},{"content":"The <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> whose elements are copied to the new <xref href=\"System.Collections.Concurrent.ConcurrentDictionary`2\"></xref>.","nodes":[{"pos":[0,177],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.IEnumerable`1\"&gt;&lt;/xref&gt;</ph> whose elements are copied to the new <ph id=\"ph2\">&lt;xref href=\"System.Collections.Concurrent.ConcurrentDictionary`2\"&gt;&lt;/xref&gt;</ph>.","source":"The <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> whose elements are copied to the new <xref href=\"System.Collections.Concurrent.ConcurrentDictionary`2\"></xref>."}],"pos":[52189,52367],"yaml":true},{"content":"The <xref href=\"System.Collections.Generic.IEqualityComparer`1\"></xref> implementation to use when comparing keys.","nodes":[{"pos":[0,114],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.IEqualityComparer`1\"&gt;&lt;/xref&gt;</ph> implementation to use when comparing keys.","source":"The <xref href=\"System.Collections.Generic.IEqualityComparer`1\"></xref> implementation to use when comparing keys."}],"pos":[52468,52583],"yaml":true},{"content":"<code>collection</code> or <code>comparer</code> is `null`.","nodes":[{"pos":[0,59],"content":"<ph id=\"ph1\">&lt;code&gt;collection&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;comparer&lt;/code&gt;</ph> is <ph id=\"ph3\">`null`</ph>.","source":"<code>collection</code> or <code>comparer</code> is `null`."}],"pos":[52771,52831],"yaml":true},{"content":"Initializes a new instance of the <xref href=\"System.Collections.Concurrent.ConcurrentDictionary`2\"></xref> class that is empty, has the specified concurrency level and capacity, and uses the default comparer for the key type.","nodes":[{"pos":[0,226],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Collections.Concurrent.ConcurrentDictionary`2\"&gt;&lt;/xref&gt;</ph> class that is empty, has the specified concurrency level and capacity, and uses the default comparer for the key type.","source":"Initializes a new instance of the <xref href=\"System.Collections.Concurrent.ConcurrentDictionary`2\"></xref> class that is empty, has the specified concurrency level and capacity, and uses the default comparer for the key type."}],"pos":[54558,54785],"yaml":true},{"content":"The estimated number of threads that will update the <xref href=\"System.Collections.Concurrent.ConcurrentDictionary`2\"></xref> concurrently.","nodes":[{"pos":[0,140],"content":"The estimated number of threads that will update the <ph id=\"ph1\">&lt;xref href=\"System.Collections.Concurrent.ConcurrentDictionary`2\"&gt;&lt;/xref&gt;</ph> concurrently.","source":"The estimated number of threads that will update the <xref href=\"System.Collections.Concurrent.ConcurrentDictionary`2\"></xref> concurrently."}],"pos":[54961,55102],"yaml":true},{"content":"The initial number of elements that the <xref href=\"System.Collections.Concurrent.ConcurrentDictionary`2\"></xref> can contain.","nodes":[{"pos":[0,126],"content":"The initial number of elements that the <ph id=\"ph1\">&lt;xref href=\"System.Collections.Concurrent.ConcurrentDictionary`2\"&gt;&lt;/xref&gt;</ph> can contain.","source":"The initial number of elements that the <xref href=\"System.Collections.Concurrent.ConcurrentDictionary`2\"></xref> can contain."}],"pos":[55165,55292],"yaml":true},{"content":"<code>concurrencyLevel</code> is less than 1.  \n  \n -or-  \n  \n <code>capacity</code> is less than 0.","nodes":[{"pos":[0,45],"content":"<ph id=\"ph1\">&lt;code&gt;concurrencyLevel&lt;/code&gt;</ph> is less than 1.","source":"<code>concurrencyLevel</code> is less than 1."},{"pos":[52,56],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[63,100],"content":"<ph id=\"ph1\">&lt;code&gt;capacity&lt;/code&gt;</ph> is less than 0.","source":"<code>capacity</code> is less than 0."}],"pos":[55492,55599],"yaml":true},{"content":"Initializes a new instance of the <xref href=\"System.Collections.Concurrent.ConcurrentDictionary`2\"></xref> class that contains elements copied from the specified <xref href=\"System.Collections.IEnumerable\"></xref>, and uses the specified <xref href=\"System.Collections.Generic.IEqualityComparer`1\"></xref>.","nodes":[{"pos":[0,307],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Collections.Concurrent.ConcurrentDictionary`2\"&gt;&lt;/xref&gt;</ph> class that contains elements copied from the specified <ph id=\"ph2\">&lt;xref href=\"System.Collections.IEnumerable\"&gt;&lt;/xref&gt;</ph>, and uses the specified <ph id=\"ph3\">&lt;xref href=\"System.Collections.Generic.IEqualityComparer`1\"&gt;&lt;/xref&gt;</ph>.","source":"Initializes a new instance of the <xref href=\"System.Collections.Concurrent.ConcurrentDictionary`2\"></xref> class that contains elements copied from the specified <xref href=\"System.Collections.IEnumerable\"></xref>, and uses the specified <xref href=\"System.Collections.Generic.IEqualityComparer`1\"></xref>."}],"pos":[57869,58177],"yaml":true},{"content":"The estimated number of threads that will update the <xref href=\"System.Collections.Concurrent.ConcurrentDictionary`2\"></xref> concurrently.","nodes":[{"pos":[0,140],"content":"The estimated number of threads that will update the <ph id=\"ph1\">&lt;xref href=\"System.Collections.Concurrent.ConcurrentDictionary`2\"&gt;&lt;/xref&gt;</ph> concurrently.","source":"The estimated number of threads that will update the <xref href=\"System.Collections.Concurrent.ConcurrentDictionary`2\"></xref> concurrently."}],"pos":[58505,58646],"yaml":true},{"content":"The <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> whose elements are copied to the new <xref href=\"System.Collections.Concurrent.ConcurrentDictionary`2\"></xref>.","nodes":[{"pos":[0,177],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.IEnumerable`1\"&gt;&lt;/xref&gt;</ph> whose elements are copied to the new <ph id=\"ph2\">&lt;xref href=\"System.Collections.Concurrent.ConcurrentDictionary`2\"&gt;&lt;/xref&gt;</ph>.","source":"The <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> whose elements are copied to the new <xref href=\"System.Collections.Concurrent.ConcurrentDictionary`2\"></xref>."}],"pos":[58791,58969],"yaml":true},{"content":"The <xref href=\"System.Collections.Generic.IEqualityComparer`1\"></xref> implementation to use when comparing keys.","nodes":[{"pos":[0,114],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.IEqualityComparer`1\"&gt;&lt;/xref&gt;</ph> implementation to use when comparing keys.","source":"The <xref href=\"System.Collections.Generic.IEqualityComparer`1\"></xref> implementation to use when comparing keys."}],"pos":[59070,59185],"yaml":true},{"content":"<code>collection</code> or <code>comparer</code> is `null`.","nodes":[{"pos":[0,59],"content":"<ph id=\"ph1\">&lt;code&gt;collection&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;comparer&lt;/code&gt;</ph> is <ph id=\"ph3\">`null`</ph>.","source":"<code>collection</code> or <code>comparer</code> is `null`."}],"pos":[59373,59433],"yaml":true},{"content":"<code>concurrencyLevel</code> is less than 1.","nodes":[{"pos":[0,45],"content":"<ph id=\"ph1\">&lt;code&gt;concurrencyLevel&lt;/code&gt;</ph> is less than 1.","source":"<code>concurrencyLevel</code> is less than 1."}],"pos":[59547,59593],"yaml":true},{"content":"<code>collection</code> contains one or more duplicate keys.","nodes":[{"pos":[0,60],"content":"<ph id=\"ph1\">&lt;code&gt;collection&lt;/code&gt;</ph> contains one or more duplicate keys.","source":"<code>collection</code> contains one or more duplicate keys."}],"pos":[59687,59748],"yaml":true},{"content":"Initializes a new instance of the <xref href=\"System.Collections.Concurrent.ConcurrentDictionary`2\"></xref> class that is empty, has the specified concurrency level, has the specified initial capacity, and uses the specified <xref href=\"System.Collections.Generic.IEqualityComparer`1\"></xref>.","nodes":[{"pos":[0,293],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Collections.Concurrent.ConcurrentDictionary`2\"&gt;&lt;/xref&gt;</ph> class that is empty, has the specified concurrency level, has the specified initial capacity, and uses the specified <ph id=\"ph2\">&lt;xref href=\"System.Collections.Generic.IEqualityComparer`1\"&gt;&lt;/xref&gt;</ph>.","source":"Initializes a new instance of the <xref href=\"System.Collections.Concurrent.ConcurrentDictionary`2\"></xref> class that is empty, has the specified concurrency level, has the specified initial capacity, and uses the specified <xref href=\"System.Collections.Generic.IEqualityComparer`1\"></xref>."}],"pos":[61697,61991],"yaml":true},{"content":"The estimated number of threads that will update the <xref href=\"System.Collections.Concurrent.ConcurrentDictionary`2\"></xref> concurrently.","nodes":[{"pos":[0,140],"content":"The estimated number of threads that will update the <ph id=\"ph1\">&lt;xref href=\"System.Collections.Concurrent.ConcurrentDictionary`2\"&gt;&lt;/xref&gt;</ph> concurrently.","source":"The estimated number of threads that will update the <xref href=\"System.Collections.Concurrent.ConcurrentDictionary`2\"></xref> concurrently."}],"pos":[62228,62369],"yaml":true},{"content":"The initial number of elements that the <xref href=\"System.Collections.Concurrent.ConcurrentDictionary`2\"></xref> can contain.","nodes":[{"pos":[0,126],"content":"The initial number of elements that the <ph id=\"ph1\">&lt;xref href=\"System.Collections.Concurrent.ConcurrentDictionary`2\"&gt;&lt;/xref&gt;</ph> can contain.","source":"The initial number of elements that the <xref href=\"System.Collections.Concurrent.ConcurrentDictionary`2\"></xref> can contain."}],"pos":[62432,62559],"yaml":true},{"content":"The <xref href=\"System.Collections.Generic.IEqualityComparer`1\"></xref> implementation to use when comparing keys.","nodes":[{"pos":[0,114],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.IEqualityComparer`1\"&gt;&lt;/xref&gt;</ph> implementation to use when comparing keys.","source":"The <xref href=\"System.Collections.Generic.IEqualityComparer`1\"></xref> implementation to use when comparing keys."}],"pos":[62660,62775],"yaml":true},{"content":"<code>comparer</code> is `null`.","nodes":[{"pos":[0,32],"content":"<ph id=\"ph1\">&lt;code&gt;comparer&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>comparer</code> is `null`."}],"pos":[62963,62996],"yaml":true},{"content":"<code>concurrencyLevel</code> or <code>capacity</code> is less than 1.","nodes":[{"pos":[0,70],"content":"<ph id=\"ph1\">&lt;code&gt;concurrencyLevel&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;capacity&lt;/code&gt;</ph> is less than 1.","source":"<code>concurrencyLevel</code> or <code>capacity</code> is less than 1."}],"pos":[63110,63181],"yaml":true},{"content":"Uses the specified functions to add a key/value pair to the <xref href=\"System.Collections.Concurrent.ConcurrentDictionary`2\"></xref> if the key does not already exist, or to update a key/value pair in the <xref href=\"System.Collections.Concurrent.ConcurrentDictionary`2\"></xref> if the key already exists.","nodes":[{"pos":[0,306],"content":"Uses the specified functions to add a key/value pair to the <ph id=\"ph1\">&lt;xref href=\"System.Collections.Concurrent.ConcurrentDictionary`2\"&gt;&lt;/xref&gt;</ph> if the key does not already exist, or to update a key/value pair in the <ph id=\"ph2\">&lt;xref href=\"System.Collections.Concurrent.ConcurrentDictionary`2\"&gt;&lt;/xref&gt;</ph> if the key already exists.","source":"Uses the specified functions to add a key/value pair to the <xref href=\"System.Collections.Concurrent.ConcurrentDictionary`2\"></xref> if the key does not already exist, or to update a key/value pair in the <xref href=\"System.Collections.Concurrent.ConcurrentDictionary`2\"></xref> if the key already exists."}],"pos":[65018,65325],"yaml":true},{"content":"If you call <xref:System.Collections.Concurrent.ConcurrentDictionary%602.AddOrUpdate%2A> simultaneously on different threads, `addValueFactory` may be called multiple times, but its key/value pair might not be added to the dictionary for every call.","nodes":[{"pos":[0,249],"content":"If you call <ph id=\"ph1\">&lt;xref:System.Collections.Concurrent.ConcurrentDictionary%602.AddOrUpdate%2A&gt;</ph> simultaneously on different threads, <ph id=\"ph2\">`addValueFactory`</ph> may be called multiple times, but its key/value pair might not be added to the dictionary for every call.","source":"If you call <xref:System.Collections.Concurrent.ConcurrentDictionary%602.AddOrUpdate%2A> simultaneously on different threads, `addValueFactory` may be called multiple times, but its key/value pair might not be added to the dictionary for every call."}],"pos":[65336,65586],"yaml":true,"extradata":"MT"},{"content":"The key to be added or whose value should be updated","nodes":[{"pos":[0,52],"content":"The key to be added or whose value should be updated","nodes":[{"content":"The key to be added or whose value should be updated","pos":[0,52]}]}],"pos":[65793,65846],"yaml":true},{"content":"The function used to generate a value for an absent key","nodes":[{"pos":[0,55],"content":"The function used to generate a value for an absent key","nodes":[{"content":"The function used to generate a value for an absent key","pos":[0,55]}]}],"pos":[65928,65984],"yaml":true},{"content":"The function used to generate a new value for an existing key based on the key's existing value","nodes":[{"pos":[0,95],"content":"The function used to generate a new value for an existing key based on the key's existing value","nodes":[{"content":"The function used to generate a new value for an existing key based on the key's existing value","pos":[0,95]}]}],"pos":[66076,66172],"yaml":true},{"content":"The new value for the key. This will be either be the result of addValueFactory (if the key was absent) or the result of updateValueFactory (if the key was present).","nodes":[{"pos":[0,165],"content":"The new value for the key. This will be either be the result of addValueFactory (if the key was absent) or the result of updateValueFactory (if the key was present).","nodes":[{"content":"The new value for the key. This will be either be the result of addValueFactory (if the key was absent) or the result of updateValueFactory (if the key was present).","pos":[0,165],"nodes":[{"content":"The new value for the key.","pos":[0,26]},{"content":"This will be either be the result of addValueFactory (if the key was absent) or the result of updateValueFactory (if the key was present).","pos":[27,165]}]}]}],"pos":[66222,66388],"yaml":true},{"content":"<code>key</code>, <code>addValueFactory</code>, or <code>updateValueFactory</code> is `null`.","nodes":[{"pos":[0,93],"content":"<ph id=\"ph1\">&lt;code&gt;key&lt;/code&gt;</ph>, <ph id=\"ph2\">&lt;code&gt;addValueFactory&lt;/code&gt;</ph>, or <ph id=\"ph3\">&lt;code&gt;updateValueFactory&lt;/code&gt;</ph> is <ph id=\"ph4\">`null`</ph>.","source":"<code>key</code>, <code>addValueFactory</code>, or <code>updateValueFactory</code> is `null`."}],"pos":[66582,66676],"yaml":true},{"content":"The dictionary already contains the maximum number of elements (<xref href=\"System.Int32.MaxValue\"></xref>).","nodes":[{"pos":[0,108],"content":"The dictionary already contains the maximum number of elements (<ph id=\"ph1\">&lt;xref href=\"System.Int32.MaxValue\"&gt;&lt;/xref&gt;</ph>).","source":"The dictionary already contains the maximum number of elements (<xref href=\"System.Int32.MaxValue\"></xref>)."}],"pos":[66770,66879],"yaml":true},{"content":"Adds a key/value pair to the <xref href=\"System.Collections.Concurrent.ConcurrentDictionary`2\"></xref> if the key does not already exist, or updates a key/value pair in the <xref href=\"System.Collections.Concurrent.ConcurrentDictionary`2\"></xref> by using the specified function if the key already exists.","nodes":[{"pos":[0,305],"content":"Adds a key/value pair to the <ph id=\"ph1\">&lt;xref href=\"System.Collections.Concurrent.ConcurrentDictionary`2\"&gt;&lt;/xref&gt;</ph> if the key does not already exist, or updates a key/value pair in the <ph id=\"ph2\">&lt;xref href=\"System.Collections.Concurrent.ConcurrentDictionary`2\"&gt;&lt;/xref&gt;</ph> by using the specified function if the key already exists.","source":"Adds a key/value pair to the <xref href=\"System.Collections.Concurrent.ConcurrentDictionary`2\"></xref> if the key does not already exist, or updates a key/value pair in the <xref href=\"System.Collections.Concurrent.ConcurrentDictionary`2\"></xref> by using the specified function if the key already exists."}],"pos":[68635,68941],"yaml":true},{"content":"The key to be added or whose value should be updated","nodes":[{"pos":[0,52],"content":"The key to be added or whose value should be updated","nodes":[{"content":"The key to be added or whose value should be updated","pos":[0,52]}]}],"pos":[69738,69791],"yaml":true},{"content":"The value to be added for an absent key","nodes":[{"pos":[0,39],"content":"The value to be added for an absent key","nodes":[{"content":"The value to be added for an absent key","pos":[0,39]}]}],"pos":[69848,69888],"yaml":true},{"content":"The function used to generate a new value for an existing key based on the key's existing value","nodes":[{"pos":[0,95],"content":"The function used to generate a new value for an existing key based on the key's existing value","nodes":[{"content":"The function used to generate a new value for an existing key based on the key's existing value","pos":[0,95]}]}],"pos":[69980,70076],"yaml":true},{"content":"The new value for the key. This will be either be addValue (if the key was absent) or the result of updateValueFactory (if the key was present).","nodes":[{"pos":[0,144],"content":"The new value for the key. This will be either be addValue (if the key was absent) or the result of updateValueFactory (if the key was present).","nodes":[{"content":"The new value for the key. This will be either be addValue (if the key was absent) or the result of updateValueFactory (if the key was present).","pos":[0,144],"nodes":[{"content":"The new value for the key.","pos":[0,26]},{"content":"This will be either be addValue (if the key was absent) or the result of updateValueFactory (if the key was present).","pos":[27,144]}]}]}],"pos":[70126,70271],"yaml":true},{"content":"<code>key</code> or <code>updateValueFactory</code> is `null`.","nodes":[{"pos":[0,62],"content":"<ph id=\"ph1\">&lt;code&gt;key&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;updateValueFactory&lt;/code&gt;</ph> is <ph id=\"ph3\">`null`</ph>.","source":"<code>key</code> or <code>updateValueFactory</code> is `null`."}],"pos":[70465,70528],"yaml":true},{"content":"The dictionary already contains the maximum number of elements (<xref href=\"System.Int32.MaxValue\"></xref>).","nodes":[{"pos":[0,108],"content":"The dictionary already contains the maximum number of elements (<ph id=\"ph1\">&lt;xref href=\"System.Int32.MaxValue\"&gt;&lt;/xref&gt;</ph>).","source":"The dictionary already contains the maximum number of elements (<xref href=\"System.Int32.MaxValue\"></xref>)."}],"pos":[70622,70731],"yaml":true},{"content":"Removes all keys and values from the <xref href=\"System.Collections.Concurrent.ConcurrentDictionary`2\"></xref>.","nodes":[{"pos":[0,111],"content":"Removes all keys and values from the <ph id=\"ph1\">&lt;xref href=\"System.Collections.Concurrent.ConcurrentDictionary`2\"&gt;&lt;/xref&gt;</ph>.","source":"Removes all keys and values from the <xref href=\"System.Collections.Concurrent.ConcurrentDictionary`2\"></xref>."}],"pos":[74037,74149],"yaml":true},{"content":"Determines whether the <xref href=\"System.Collections.Concurrent.ConcurrentDictionary`2\"></xref> contains the specified key.","nodes":[{"pos":[0,124],"content":"Determines whether the <ph id=\"ph1\">&lt;xref href=\"System.Collections.Concurrent.ConcurrentDictionary`2\"&gt;&lt;/xref&gt;</ph> contains the specified key.","source":"Determines whether the <xref href=\"System.Collections.Concurrent.ConcurrentDictionary`2\"></xref> contains the specified key."}],"pos":[75881,76006],"yaml":true},{"content":"The key to locate in the <xref href=\"System.Collections.Concurrent.ConcurrentDictionary`2\"></xref>.","nodes":[{"pos":[0,99],"content":"The key to locate in the <ph id=\"ph1\">&lt;xref href=\"System.Collections.Concurrent.ConcurrentDictionary`2\"&gt;&lt;/xref&gt;</ph>.","source":"The key to locate in the <xref href=\"System.Collections.Concurrent.ConcurrentDictionary`2\"></xref>."}],"pos":[76131,76231],"yaml":true},{"content":"`true` if the <xref href=\"System.Collections.Concurrent.ConcurrentDictionary`2\"></xref> contains an element with the specified key; otherwise, `false`.","nodes":[{"pos":[0,151],"content":"<ph id=\"ph1\">`true`</ph> if the <ph id=\"ph2\">&lt;xref href=\"System.Collections.Concurrent.ConcurrentDictionary`2\"&gt;&lt;/xref&gt;</ph> contains an element with the specified key; otherwise, <ph id=\"ph3\">`false`</ph>.","source":"`true` if the <xref href=\"System.Collections.Concurrent.ConcurrentDictionary`2\"></xref> contains an element with the specified key; otherwise, `false`."}],"pos":[76289,76443],"yaml":true},{"content":"<code>key</code> is `null`.","nodes":[{"pos":[0,27],"content":"<ph id=\"ph1\">&lt;code&gt;key&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>key</code> is `null`."}],"pos":[76637,76665],"yaml":true},{"content":"Gets the number of key/value pairs contained in the <xref href=\"System.Collections.Concurrent.ConcurrentDictionary`2\"></xref>.","nodes":[{"pos":[0,126],"content":"Gets the number of key/value pairs contained in the <ph id=\"ph1\">&lt;xref href=\"System.Collections.Concurrent.ConcurrentDictionary`2\"&gt;&lt;/xref&gt;</ph>.","source":"Gets the number of key/value pairs contained in the <xref href=\"System.Collections.Concurrent.ConcurrentDictionary`2\"></xref>."}],"pos":[78180,78307],"yaml":true},{"content":"This property has snapshot semantics and represents the number of items in the <xref:System.Collections.Concurrent.ConcurrentDictionary%602?displayProperty=fullName> at the moment when the property was accessed.","nodes":[{"pos":[0,211],"content":"This property has snapshot semantics and represents the number of items in the <xref:System.Collections.Concurrent.ConcurrentDictionary%602?displayProperty=fullName> at the moment when the property was accessed.","nodes":[{"content":"This property has snapshot semantics and represents the number of items in the <ph id=\"ph1\">&lt;xref:System.Collections.Concurrent.ConcurrentDictionary%602?displayProperty=fullName&gt;</ph> at the moment when the property was accessed.","pos":[0,211],"source":"This property has snapshot semantics and represents the number of items in the <xref:System.Collections.Concurrent.ConcurrentDictionary%602?displayProperty=fullName> at the moment when the property was accessed."}]}],"pos":[78318,78530],"yaml":true,"extradata":"MT"},{"content":"The number of key/value pairs contained in the <xref href=\"System.Collections.Concurrent.ConcurrentDictionary`2\"></xref>.","nodes":[{"pos":[0,121],"content":"The number of key/value pairs contained in the <ph id=\"ph1\">&lt;xref href=\"System.Collections.Concurrent.ConcurrentDictionary`2\"&gt;&lt;/xref&gt;</ph>.","source":"The number of key/value pairs contained in the <xref href=\"System.Collections.Concurrent.ConcurrentDictionary`2\"></xref>."}],"pos":[78635,78757],"yaml":true},{"content":"The dictionary already contains the maximum number of elements (<xref href=\"System.Int32.MaxValue\"></xref>).","nodes":[{"pos":[0,108],"content":"The dictionary already contains the maximum number of elements (<ph id=\"ph1\">&lt;xref href=\"System.Int32.MaxValue\"&gt;&lt;/xref&gt;</ph>).","source":"The dictionary already contains the maximum number of elements (<xref href=\"System.Int32.MaxValue\"></xref>)."}],"pos":[78937,79046],"yaml":true},{"content":"Returns an enumerator that iterates through the <xref href=\"System.Collections.Concurrent.ConcurrentDictionary`2\"></xref>.","nodes":[{"pos":[0,122],"content":"Returns an enumerator that iterates through the <ph id=\"ph1\">&lt;xref href=\"System.Collections.Concurrent.ConcurrentDictionary`2\"&gt;&lt;/xref&gt;</ph>.","source":"Returns an enumerator that iterates through the <xref href=\"System.Collections.Concurrent.ConcurrentDictionary`2\"></xref>."}],"pos":[80613,80736],"yaml":true},{"content":"The enumerator returned from the dictionary is safe to use concurrently with reads and writes to the dictionary, however it does not represent a moment-in-time snapshot of the dictionary. The contents exposed through the enumerator may contain modifications made to the dictionary after <xref:System.Collections.Concurrent.ConcurrentDictionary%602.GetEnumerator%2A> was called.","nodes":[{"pos":[0,377],"content":"The enumerator returned from the dictionary is safe to use concurrently with reads and writes to the dictionary, however it does not represent a moment-in-time snapshot of the dictionary. The contents exposed through the enumerator may contain modifications made to the dictionary after <xref:System.Collections.Concurrent.ConcurrentDictionary%602.GetEnumerator%2A> was called.","nodes":[{"content":"The enumerator returned from the dictionary is safe to use concurrently with reads and writes to the dictionary, however it does not represent a moment-in-time snapshot of the dictionary. The contents exposed through the enumerator may contain modifications made to the dictionary after <xref:System.Collections.Concurrent.ConcurrentDictionary%602.GetEnumerator%2A> was called.","pos":[0,377],"nodes":[{"content":"The enumerator returned from the dictionary is safe to use concurrently with reads and writes to the dictionary, however it does not represent a moment-in-time snapshot of the dictionary.","pos":[0,187]},{"content":"The contents exposed through the enumerator may contain modifications made to the dictionary after <ph id=\"ph1\">&lt;xref:System.Collections.Concurrent.ConcurrentDictionary%602.GetEnumerator%2A&gt;</ph> was called.","pos":[188,377],"source":" The contents exposed through the enumerator may contain modifications made to the dictionary after <xref:System.Collections.Concurrent.ConcurrentDictionary%602.GetEnumerator%2A> was called."}]}]}],"pos":[80747,81125],"yaml":true,"extradata":"MT"},{"content":"An enumerator for the <xref href=\"System.Collections.Concurrent.ConcurrentDictionary`2\"></xref>.","nodes":[{"pos":[0,96],"content":"An enumerator for the <ph id=\"ph1\">&lt;xref href=\"System.Collections.Concurrent.ConcurrentDictionary`2\"&gt;&lt;/xref&gt;</ph>.","source":"An enumerator for the <xref href=\"System.Collections.Concurrent.ConcurrentDictionary`2\"></xref>."}],"pos":[81421,81518],"yaml":true},{"content":"Adds a key/value pair to the <xref href=\"System.Collections.Concurrent.ConcurrentDictionary`2\"></xref> by using the specified function if the key does not already exist, or returns the existing value if the key exists.","nodes":[{"pos":[0,218],"content":"Adds a key/value pair to the <ph id=\"ph1\">&lt;xref href=\"System.Collections.Concurrent.ConcurrentDictionary`2\"&gt;&lt;/xref&gt;</ph> by using the specified function if the key does not already exist, or returns the existing value if the key exists.","source":"Adds a key/value pair to the <xref href=\"System.Collections.Concurrent.ConcurrentDictionary`2\"></xref> by using the specified function if the key does not already exist, or returns the existing value if the key exists."}],"pos":[83290,83509],"yaml":true},{"content":"Since a key/value can be inserted by another thread while `valueFactory` is generating a value, you cannot trust that just because `valueFactory` executed, its produced value will be inserted into the dictionary and returned. If you call <xref:System.Collections.Concurrent.ConcurrentDictionary%602.GetOrAdd%2A> simultaneously on different threads, `valueFactory` may be called multiple times, but only one key/value pair will be added to the dictionary. \n \n The return value depends on the presence of the key in the dictionary and whether a key/value is inserted by another thread after <xref:System.Collections.Concurrent.ConcurrentDictionary%602.GetOrAdd%2A> is called but before `valueFactory` generates a value:\n\n | Scenario | Return value |\n | -------- | ------------ |\n | The key is already in the dictionary. | The existing value is returned. |\n | The key is not in the dictionary. `valueFactory` generates a value. On rechecking for the key, no key is found. | The key/value is inserted into the dictionary, and the value is returned. |\n | The key is not in the dictionary. `valueFactory` generates a value. While `valueFactory` is generating the value, a different thread inserts a value for the key. After `valueFactory` executes and upon rechecking for the key, the key inserted by the other thread is found. | The value inserted by the other thread is returned. |","nodes":[{"pos":[0,454],"content":"Since a key/value can be inserted by another thread while `valueFactory` is generating a value, you cannot trust that just because `valueFactory` executed, its produced value will be inserted into the dictionary and returned. If you call <xref:System.Collections.Concurrent.ConcurrentDictionary%602.GetOrAdd%2A> simultaneously on different threads, `valueFactory` may be called multiple times, but only one key/value pair will be added to the dictionary.","nodes":[{"content":"Since a key/value can be inserted by another thread while <ph id=\"ph1\">`valueFactory`</ph> is generating a value, you cannot trust that just because <ph id=\"ph2\">`valueFactory`</ph> executed, its produced value will be inserted into the dictionary and returned.","pos":[0,225],"source":"Since a key/value can be inserted by another thread while `valueFactory` is generating a value, you cannot trust that just because `valueFactory` executed, its produced value will be inserted into the dictionary and returned."},{"content":"If you call <ph id=\"ph1\">&lt;xref:System.Collections.Concurrent.ConcurrentDictionary%602.GetOrAdd%2A&gt;</ph> simultaneously on different threads, <ph id=\"ph2\">`valueFactory`</ph> may be called multiple times, but only one key/value pair will be added to the dictionary.","pos":[226,454],"source":" If you call <xref:System.Collections.Concurrent.ConcurrentDictionary%602.GetOrAdd%2A> simultaneously on different threads, `valueFactory` may be called multiple times, but only one key/value pair will be added to the dictionary."}]},{"pos":[459,717],"content":"The return value depends on the presence of the key in the dictionary and whether a key/value is inserted by another thread after <ph id=\"ph1\">&lt;xref:System.Collections.Concurrent.ConcurrentDictionary%602.GetOrAdd%2A&gt;</ph> is called but before <ph id=\"ph2\">`valueFactory`</ph> generates a value:","source":"The return value depends on the presence of the key in the dictionary and whether a key/value is inserted by another thread after <xref:System.Collections.Concurrent.ConcurrentDictionary%602.GetOrAdd%2A> is called but before `valueFactory` generates a value:"},{"pos":[722,730],"content":"Scenario","nodes":[{"content":"Scenario","pos":[0,8]}]},{"pos":[733,745],"content":"Return value","nodes":[{"content":"Return value","pos":[0,12]}]},{"pos":[780,817],"content":"The key is already in the dictionary.","nodes":[{"content":"The key is already in the dictionary.","pos":[0,37]}]},{"pos":[820,851],"content":"The existing value is returned.","nodes":[{"content":"The existing value is returned.","pos":[0,31]}]},{"pos":[857,968],"content":"The key is not in the dictionary. `valueFactory` generates a value. On rechecking for the key, no key is found.","nodes":[{"content":"The key is not in the dictionary.","pos":[0,33]},{"content":"<ph id=\"ph1\">`valueFactory`</ph> generates a value.","pos":[34,67],"source":"`valueFactory` generates a value."},{"content":"On rechecking for the key, no key is found.","pos":[68,111]}]},{"pos":[971,1044],"content":"The key/value is inserted into the dictionary, and the value is returned.","nodes":[{"content":"The key/value is inserted into the dictionary, and the value is returned.","pos":[0,73]}]},{"pos":[1050,1321],"content":"The key is not in the dictionary. `valueFactory` generates a value. While `valueFactory` is generating the value, a different thread inserts a value for the key. After `valueFactory` executes and upon rechecking for the key, the key inserted by the other thread is found.","nodes":[{"content":"The key is not in the dictionary.","pos":[0,33]},{"content":"<ph id=\"ph1\">`valueFactory`</ph> generates a value.","pos":[34,67],"source":"`valueFactory` generates a value."},{"content":"While <ph id=\"ph1\">`valueFactory`</ph> is generating the value, a different thread inserts a value for the key.","pos":[68,161],"source":" While `valueFactory` is generating the value, a different thread inserts a value for the key."},{"content":"After <ph id=\"ph1\">`valueFactory`</ph> executes and upon rechecking for the key, the key inserted by the other thread is found.","pos":[162,271],"source":" After `valueFactory` executes and upon rechecking for the key, the key inserted by the other thread is found."}]},{"pos":[1324,1375],"content":"The value inserted by the other thread is returned.","nodes":[{"content":"The value inserted by the other thread is returned.","pos":[0,51]}]}],"pos":[83520,84908],"yaml":true,"extradata":"MT"},{"content":"The key of the element to add.","nodes":[{"pos":[0,30],"content":"The key of the element to add.","nodes":[{"content":"The key of the element to add.","pos":[0,30]}]}],"pos":[85064,85095],"yaml":true},{"content":"The function used to generate a value for the key.","nodes":[{"pos":[0,50],"content":"The function used to generate a value for the key.","nodes":[{"content":"The function used to generate a value for the key.","pos":[0,50]}]}],"pos":[85174,85225],"yaml":true},{"content":"The value for the key.","nodes":[{"pos":[0,22],"content":"The value for the key.","nodes":[{"content":"The value for the key.","pos":[0,22]}]}],"pos":[85275,85298],"yaml":true},{"content":"<code>key</code> or <code>valueFactory</code> is `null`.","nodes":[{"pos":[0,56],"content":"<ph id=\"ph1\">&lt;code&gt;key&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;valueFactory&lt;/code&gt;</ph> is <ph id=\"ph3\">`null`</ph>.","source":"<code>key</code> or <code>valueFactory</code> is `null`."}],"pos":[85489,85546],"yaml":true},{"content":"The dictionary already contains the maximum number of elements (<xref href=\"System.Int32.MaxValue\"></xref>).","nodes":[{"pos":[0,108],"content":"The dictionary already contains the maximum number of elements (<ph id=\"ph1\">&lt;xref href=\"System.Int32.MaxValue\"&gt;&lt;/xref&gt;</ph>).","source":"The dictionary already contains the maximum number of elements (<xref href=\"System.Int32.MaxValue\"></xref>)."}],"pos":[85640,85749],"yaml":true},{"content":"Adds a key/value pair to the <xref href=\"System.Collections.Concurrent.ConcurrentDictionary`2\"></xref> if the key does not already exist.","nodes":[{"pos":[0,137],"content":"Adds a key/value pair to the <ph id=\"ph1\">&lt;xref href=\"System.Collections.Concurrent.ConcurrentDictionary`2\"&gt;&lt;/xref&gt;</ph> if the key does not already exist.","source":"Adds a key/value pair to the <xref href=\"System.Collections.Concurrent.ConcurrentDictionary`2\"></xref> if the key does not already exist."}],"pos":[87343,87481],"yaml":true},{"content":"The key of the element to add.","nodes":[{"pos":[0,30],"content":"The key of the element to add.","nodes":[{"content":"The key of the element to add.","pos":[0,30]}]}],"pos":[87619,87650],"yaml":true},{"content":"The value to be added, if the key does not already exist.","nodes":[{"pos":[0,57],"content":"The value to be added, if the key does not already exist.","nodes":[{"content":"The value to be added, if the key does not already exist.","pos":[0,57]}]}],"pos":[87704,87762],"yaml":true},{"content":"The value for the key. This will be either the existing value for the key if the key is already in the dictionary, or the new value if the key was not in the dictionary.","nodes":[{"pos":[0,169],"content":"The value for the key. This will be either the existing value for the key if the key is already in the dictionary, or the new value if the key was not in the dictionary.","nodes":[{"content":"The value for the key. This will be either the existing value for the key if the key is already in the dictionary, or the new value if the key was not in the dictionary.","pos":[0,169],"nodes":[{"content":"The value for the key.","pos":[0,22]},{"content":"This will be either the existing value for the key if the key is already in the dictionary, or the new value if the key was not in the dictionary.","pos":[23,169]}]}]}],"pos":[87812,87982],"yaml":true},{"content":"<code>key</code> is `null`.","nodes":[{"pos":[0,27],"content":"<ph id=\"ph1\">&lt;code&gt;key&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>key</code> is `null`."}],"pos":[88173,88201],"yaml":true},{"content":"The dictionary already contains the maximum number of elements (<xref href=\"System.Int32.MaxValue\"></xref>).","nodes":[{"pos":[0,108],"content":"The dictionary already contains the maximum number of elements (<ph id=\"ph1\">&lt;xref href=\"System.Int32.MaxValue\"&gt;&lt;/xref&gt;</ph>).","source":"The dictionary already contains the maximum number of elements (<xref href=\"System.Int32.MaxValue\"></xref>)."}],"pos":[88295,88404],"yaml":true},{"content":"Gets a value that indicates whether the <xref href=\"System.Collections.Concurrent.ConcurrentDictionary`2\"></xref> is empty.","nodes":[{"pos":[0,123],"content":"Gets a value that indicates whether the <ph id=\"ph1\">&lt;xref href=\"System.Collections.Concurrent.ConcurrentDictionary`2\"&gt;&lt;/xref&gt;</ph> is empty.","source":"Gets a value that indicates whether the <xref href=\"System.Collections.Concurrent.ConcurrentDictionary`2\"></xref> is empty."}],"pos":[91367,91491],"yaml":true},{"content":"`true` if the <xref href=\"System.Collections.Concurrent.ConcurrentDictionary`2\"></xref> is empty; otherwise, `false`.","nodes":[{"pos":[0,117],"content":"<ph id=\"ph1\">`true`</ph> if the <ph id=\"ph2\">&lt;xref href=\"System.Collections.Concurrent.ConcurrentDictionary`2\"&gt;&lt;/xref&gt;</ph> is empty; otherwise, <ph id=\"ph3\">`false`</ph>.","source":"`true` if the <xref href=\"System.Collections.Concurrent.ConcurrentDictionary`2\"></xref> is empty; otherwise, `false`."}],"pos":[91601,91721],"yaml":true},{"content":"Gets or sets the value associated with the specified key.","nodes":[{"pos":[0,57],"content":"Gets or sets the value associated with the specified key.","nodes":[{"content":"Gets or sets the value associated with the specified key.","pos":[0,57]}]}],"pos":[93351,93409],"yaml":true},{"content":"The key of the value to get or set.","nodes":[{"pos":[0,35],"content":"The key of the value to get or set.","nodes":[{"content":"The key of the value to get or set.","pos":[0,35]}]}],"pos":[93541,93577],"yaml":true},{"content":"The value of the key/value pair at the specified index.","nodes":[{"pos":[0,55],"content":"The value of the key/value pair at the specified index.","nodes":[{"content":"The value of the key/value pair at the specified index.","pos":[0,55]}]}],"pos":[93627,93683],"yaml":true},{"content":"<code>key</code> is  `null`.","nodes":[{"pos":[0,28],"content":"<ph id=\"ph1\">&lt;code&gt;key&lt;/code&gt;</ph> is  <ph id=\"ph2\">`null`</ph>.","source":"<code>key</code> is  `null`."}],"pos":[93870,93899],"yaml":true},{"content":"The property is retrieved and <code>key</code> does not exist in the collection.","nodes":[{"pos":[0,80],"content":"The property is retrieved and <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">key</ph><ept id=\"p1\">&lt;/code&gt;</ept> does not exist in the collection.","source":"The property is retrieved and <code>key</code> does not exist in the collection."}],"pos":[94039,94120],"yaml":true},{"content":"Gets a collection containing the keys in the <xref href=\"System.Collections.Generic.Dictionary`2\"></xref>.","nodes":[{"pos":[0,106],"content":"Gets a collection containing the keys in the <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.Dictionary`2\"&gt;&lt;/xref&gt;</ph>.","source":"Gets a collection containing the keys in the <xref href=\"System.Collections.Generic.Dictionary`2\"></xref>."}],"pos":[95629,95736],"yaml":true},{"content":"A collection of keys in the <xref href=\"System.Collections.Generic.Dictionary`2\"></xref>.","nodes":[{"pos":[0,89],"content":"A collection of keys in the <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.Dictionary`2\"&gt;&lt;/xref&gt;</ph>.","source":"A collection of keys in the <xref href=\"System.Collections.Generic.Dictionary`2\"></xref>."}],"pos":[95913,96003],"yaml":true},{"content":"Copies the key and value pairs stored in the <xref href=\"System.Collections.Concurrent.ConcurrentDictionary`2\"></xref> to a new array.","nodes":[{"pos":[0,134],"content":"Copies the key and value pairs stored in the <ph id=\"ph1\">&lt;xref href=\"System.Collections.Concurrent.ConcurrentDictionary`2\"&gt;&lt;/xref&gt;</ph> to a new array.","source":"Copies the key and value pairs stored in the <xref href=\"System.Collections.Concurrent.ConcurrentDictionary`2\"></xref> to a new array."}],"pos":[97622,97757],"yaml":true},{"content":"A new array containing a snapshot of key and value pairs copied from the <xref href=\"System.Collections.Concurrent.ConcurrentDictionary`2\"></xref>.","nodes":[{"pos":[0,147],"content":"A new array containing a snapshot of key and value pairs copied from the <ph id=\"ph1\">&lt;xref href=\"System.Collections.Concurrent.ConcurrentDictionary`2\"&gt;&lt;/xref&gt;</ph>.","source":"A new array containing a snapshot of key and value pairs copied from the <xref href=\"System.Collections.Concurrent.ConcurrentDictionary`2\"></xref>."}],"pos":[97971,98119],"yaml":true},{"content":"Attempts to add the specified key and value to the <xref href=\"System.Collections.Concurrent.ConcurrentDictionary`2\"></xref>.","nodes":[{"pos":[0,125],"content":"Attempts to add the specified key and value to the <ph id=\"ph1\">&lt;xref href=\"System.Collections.Concurrent.ConcurrentDictionary`2\"&gt;&lt;/xref&gt;</ph>.","source":"Attempts to add the specified key and value to the <xref href=\"System.Collections.Concurrent.ConcurrentDictionary`2\"></xref>."}],"pos":[99792,99918],"yaml":true},{"content":"This method returns `false` if the key already exists. Use the <xref:System.Collections.Concurrent.ConcurrentDictionary%602.TryUpdate%2A> or <xref:System.Collections.Concurrent.ConcurrentDictionary%602.AddOrUpdate%2A> method to update the value in case a key already exists.","nodes":[{"pos":[0,274],"content":"This method returns `false` if the key already exists. Use the <xref:System.Collections.Concurrent.ConcurrentDictionary%602.TryUpdate%2A> or <xref:System.Collections.Concurrent.ConcurrentDictionary%602.AddOrUpdate%2A> method to update the value in case a key already exists.","nodes":[{"content":"This method returns <ph id=\"ph1\">`false`</ph> if the key already exists.","pos":[0,54],"source":"This method returns `false` if the key already exists."},{"content":"Use the <ph id=\"ph1\">&lt;xref:System.Collections.Concurrent.ConcurrentDictionary%602.TryUpdate%2A&gt;</ph> or <ph id=\"ph2\">&lt;xref:System.Collections.Concurrent.ConcurrentDictionary%602.AddOrUpdate%2A&gt;</ph> method to update the value in case a key already exists.","pos":[55,274],"source":" Use the <xref:System.Collections.Concurrent.ConcurrentDictionary%602.TryUpdate%2A> or <xref:System.Collections.Concurrent.ConcurrentDictionary%602.AddOrUpdate%2A> method to update the value in case a key already exists."}]}],"pos":[99929,100204],"yaml":true,"extradata":"MT"},{"content":"The key of the element to add.","nodes":[{"pos":[0,30],"content":"The key of the element to add.","nodes":[{"content":"The key of the element to add.","pos":[0,30]}]}],"pos":[100900,100931],"yaml":true},{"content":"The value of the element to add. The value can be  `null` for reference types.","nodes":[{"pos":[0,78],"content":"The value of the element to add. The value can be  `null` for reference types.","nodes":[{"content":"The value of the element to add.","pos":[0,32]},{"content":"The value can be  <ph id=\"ph1\">`null`</ph> for reference types.","pos":[33,78],"source":" The value can be  `null` for reference types."}]}],"pos":[100985,101064],"yaml":true},{"content":"`true` if the key/value pair was added to the <xref href=\"System.Collections.Concurrent.ConcurrentDictionary`2\"></xref> successfully; `false` if the key already exists.","nodes":[{"pos":[0,168],"content":"<ph id=\"ph1\">`true`</ph> if the key/value pair was added to the <ph id=\"ph2\">&lt;xref href=\"System.Collections.Concurrent.ConcurrentDictionary`2\"&gt;&lt;/xref&gt;</ph> successfully; <ph id=\"ph3\">`false`</ph> if the key already exists.","source":"`true` if the key/value pair was added to the <xref href=\"System.Collections.Concurrent.ConcurrentDictionary`2\"></xref> successfully; `false` if the key already exists."}],"pos":[101122,101293],"yaml":true},{"content":"<code>key</code> is  `null`.","nodes":[{"pos":[0,28],"content":"<ph id=\"ph1\">&lt;code&gt;key&lt;/code&gt;</ph> is  <ph id=\"ph2\">`null`</ph>.","source":"<code>key</code> is  `null`."}],"pos":[101482,101511],"yaml":true},{"content":"The dictionary already contains the maximum number of elements (<xref href=\"System.Int32.MaxValue\"></xref>).","nodes":[{"pos":[0,108],"content":"The dictionary already contains the maximum number of elements (<ph id=\"ph1\">&lt;xref href=\"System.Int32.MaxValue\"&gt;&lt;/xref&gt;</ph>).","source":"The dictionary already contains the maximum number of elements (<xref href=\"System.Int32.MaxValue\"></xref>)."}],"pos":[101605,101714],"yaml":true},{"content":"Attempts to get the value associated with the specified key from the <xref href=\"System.Collections.Concurrent.ConcurrentDictionary`2\"></xref>.","nodes":[{"pos":[0,143],"content":"Attempts to get the value associated with the specified key from the <ph id=\"ph1\">&lt;xref href=\"System.Collections.Concurrent.ConcurrentDictionary`2\"&gt;&lt;/xref&gt;</ph>.","source":"Attempts to get the value associated with the specified key from the <xref href=\"System.Collections.Concurrent.ConcurrentDictionary`2\"></xref>."}],"pos":[103329,103473],"yaml":true},{"content":"The key of the value to get.","nodes":[{"pos":[0,28],"content":"The key of the value to get.","nodes":[{"content":"The key of the value to get.","pos":[0,28]}]}],"pos":[103616,103645],"yaml":true},{"content":"When this method returns, contains the object from the <xref href=\"System.Collections.Concurrent.ConcurrentDictionary`2\"></xref> that has the specified key, or the default value of the type if the operation failed.","nodes":[{"pos":[0,214],"content":"When this method returns, contains the object from the <ph id=\"ph1\">&lt;xref href=\"System.Collections.Concurrent.ConcurrentDictionary`2\"&gt;&lt;/xref&gt;</ph> that has the specified key, or the default value of the type if the operation failed.","source":"When this method returns, contains the object from the <xref href=\"System.Collections.Concurrent.ConcurrentDictionary`2\"></xref> that has the specified key, or the default value of the type if the operation failed."}],"pos":[103699,103914],"yaml":true},{"content":"`true` if the key was found in the <xref href=\"System.Collections.Concurrent.ConcurrentDictionary`2\"></xref>; otherwise, `false`.","nodes":[{"pos":[0,129],"content":"<ph id=\"ph1\">`true`</ph> if the key was found in the <ph id=\"ph2\">&lt;xref href=\"System.Collections.Concurrent.ConcurrentDictionary`2\"&gt;&lt;/xref&gt;</ph>; otherwise, <ph id=\"ph3\">`false`</ph>.","source":"`true` if the key was found in the <xref href=\"System.Collections.Concurrent.ConcurrentDictionary`2\"></xref>; otherwise, `false`."}],"pos":[103972,104104],"yaml":true},{"content":"<code>key</code> is  `null`.","nodes":[{"pos":[0,28],"content":"<ph id=\"ph1\">&lt;code&gt;key&lt;/code&gt;</ph> is  <ph id=\"ph2\">`null`</ph>.","source":"<code>key</code> is  `null`."}],"pos":[104298,104327],"yaml":true},{"content":"Attempts to remove and return the value that has the specified key from the <xref href=\"System.Collections.Concurrent.ConcurrentDictionary`2\"></xref>.","nodes":[{"pos":[0,150],"content":"Attempts to remove and return the value that has the specified key from the <ph id=\"ph1\">&lt;xref href=\"System.Collections.Concurrent.ConcurrentDictionary`2\"&gt;&lt;/xref&gt;</ph>.","source":"Attempts to remove and return the value that has the specified key from the <xref href=\"System.Collections.Concurrent.ConcurrentDictionary`2\"></xref>."}],"pos":[105930,106081],"yaml":true},{"content":"The key of the element to remove and return.","nodes":[{"pos":[0,44],"content":"The key of the element to remove and return.","nodes":[{"content":"The key of the element to remove and return.","pos":[0,44]}]}],"pos":[106802,106847],"yaml":true},{"content":"When this method returns, contains the object removed from the <xref href=\"System.Collections.Concurrent.ConcurrentDictionary`2\"></xref>, or the default value of  the `TValue` type if <code>key</code> does not exist.","nodes":[{"pos":[0,216],"content":"When this method returns, contains the object removed from the <ph id=\"ph1\">&lt;xref href=\"System.Collections.Concurrent.ConcurrentDictionary`2\"&gt;&lt;/xref&gt;</ph>, or the default value of  the <ph id=\"ph2\">`TValue`</ph> type if <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph3\">key</ph><ept id=\"p1\">&lt;/code&gt;</ept> does not exist.","source":"When this method returns, contains the object removed from the <xref href=\"System.Collections.Concurrent.ConcurrentDictionary`2\"></xref>, or the default value of  the `TValue` type if <code>key</code> does not exist."}],"pos":[106901,107118],"yaml":true},{"content":"`true` if the object was removed successfully; otherwise, `false`.","nodes":[{"pos":[0,66],"content":"<ph id=\"ph1\">`true`</ph> if the object was removed successfully; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` if the object was removed successfully; otherwise, `false`."}],"pos":[107176,107245],"yaml":true},{"content":"<code>key</code> is  `null`.","nodes":[{"pos":[0,28],"content":"<ph id=\"ph1\">&lt;code&gt;key&lt;/code&gt;</ph> is  <ph id=\"ph2\">`null`</ph>.","source":"<code>key</code> is  `null`."}],"pos":[107437,107466],"yaml":true},{"content":"Compares the existing value for the specified key with a specified value, and if they are equal, updates the key with a third value.","nodes":[{"pos":[0,132],"content":"Compares the existing value for the specified key with a specified value, and if they are equal, updates the key with a third value.","nodes":[{"content":"Compares the existing value for the specified key with a specified value, and if they are equal, updates the key with a third value.","pos":[0,132]}]}],"pos":[109099,109232],"yaml":true},{"content":"The key whose value is compared with <code>comparisonValue</code> and possibly replaced.","nodes":[{"pos":[0,88],"content":"The key whose value is compared with <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">comparisonValue</ph><ept id=\"p1\">&lt;/code&gt;</ept> and possibly replaced.","source":"The key whose value is compared with <code>comparisonValue</code> and possibly replaced."}],"pos":[109951,110040],"yaml":true},{"content":"The value that replaces the value of the element that has the specified <code>key</code> if the comparison results in equality.","nodes":[{"pos":[0,127],"content":"The value that replaces the value of the element that has the specified <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">key</ph><ept id=\"p1\">&lt;/code&gt;</ept> if the comparison results in equality.","source":"The value that replaces the value of the element that has the specified <code>key</code> if the comparison results in equality."}],"pos":[110097,110225],"yaml":true},{"content":"The value that is compared to the value of the element that has the specified <code>key</code>.","nodes":[{"pos":[0,95],"content":"The value that is compared to the value of the element that has the specified <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">key</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The value that is compared to the value of the element that has the specified <code>key</code>."}],"pos":[110289,110385],"yaml":true},{"content":"`true` if the value with <code>key</code> was equal to <code>comparisonValue</code> and was replaced with <code>newValue</code>; otherwise, `false`.","nodes":[{"pos":[0,148],"content":"<ph id=\"ph1\">`true`</ph> if the value with <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">key</ph><ept id=\"p1\">&lt;/code&gt;</ept> was equal to <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph3\">comparisonValue</ph><ept id=\"p2\">&lt;/code&gt;</ept> and was replaced with <bpt id=\"p3\">&lt;code&gt;</bpt><ph id=\"ph4\">newValue</ph><ept id=\"p3\">&lt;/code&gt;</ept>; otherwise, <ph id=\"ph5\">`false`</ph>.","source":"`true` if the value with <code>key</code> was equal to <code>comparisonValue</code> and was replaced with <code>newValue</code>; otherwise, `false`."}],"pos":[110443,110594],"yaml":true},{"content":"<code>key</code> is `null`.","nodes":[{"pos":[0,27],"content":"<ph id=\"ph1\">&lt;code&gt;key&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>key</code> is `null`."}],"pos":[110786,110814],"yaml":true},{"content":"Gets a collection that contains the values in the <xref href=\"System.Collections.Generic.Dictionary`2\"></xref>.","nodes":[{"pos":[0,111],"content":"Gets a collection that contains the values in the <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.Dictionary`2\"&gt;&lt;/xref&gt;</ph>.","source":"Gets a collection that contains the values in the <xref href=\"System.Collections.Generic.Dictionary`2\"></xref>."}],"pos":[112335,112447],"yaml":true},{"content":"A collection that contains the values in the <xref href=\"System.Collections.Generic.Dictionary`2\"></xref>.","nodes":[{"pos":[0,106],"content":"A collection that contains the values in the <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.Dictionary`2\"&gt;&lt;/xref&gt;</ph>.","source":"A collection that contains the values in the <xref href=\"System.Collections.Generic.Dictionary`2\"></xref>."}],"pos":[112630,112737],"yaml":true},{"content":"Copies the elements of the <xref href=\"System.Collections.ICollection\"></xref> to an array, starting at the specified array index.","nodes":[{"pos":[0,130],"content":"Copies the elements of the <ph id=\"ph1\">&lt;xref href=\"System.Collections.ICollection\"&gt;&lt;/xref&gt;</ph> to an array, starting at the specified array index.","source":"Copies the elements of the <xref href=\"System.Collections.ICollection\"></xref> to an array, starting at the specified array index."}],"pos":[134905,135036],"yaml":true},{"content":"The one-dimensional array that is the destination of the elements copied from the <xref href=\"System.Collections.ICollection\"></xref>. The array must have zero-based indexing.","nodes":[{"pos":[0,175],"content":"The one-dimensional array that is the destination of the elements copied from the <xref href=\"System.Collections.ICollection\"></xref>. The array must have zero-based indexing.","nodes":[{"content":"The one-dimensional array that is the destination of the elements copied from the <ph id=\"ph1\">&lt;xref href=\"System.Collections.ICollection\"&gt;&lt;/xref&gt;</ph>.","pos":[0,134],"source":"The one-dimensional array that is the destination of the elements copied from the <xref href=\"System.Collections.ICollection\"></xref>."},{"content":"The array must have zero-based indexing.","pos":[135,175]}]}],"pos":[135185,135361],"yaml":true},{"content":"The zero-based index in <code>array</code> at which copying begins.","nodes":[{"pos":[0,67],"content":"The zero-based index in <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">array</ph><ept id=\"p1\">&lt;/code&gt;</ept> at which copying begins.","source":"The zero-based index in <code>array</code> at which copying begins."}],"pos":[135421,135489],"yaml":true},{"content":"<code>array</code> is `null`.","nodes":[{"pos":[0,29],"content":"<ph id=\"ph1\">&lt;code&gt;array&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>array</code> is `null`."}],"pos":[135709,135739],"yaml":true},{"content":"<code>index</code> is less than 0.","nodes":[{"pos":[0,34],"content":"<ph id=\"ph1\">&lt;code&gt;index&lt;/code&gt;</ph> is less than 0.","source":"<code>index</code> is less than 0."}],"pos":[135853,135888],"yaml":true},{"content":"<code>index</code> is equal to or greater than the length of the <code>array</code>.  \n  \n -or-  \n  \n The number of elements in the source <xref href=\"System.Collections.ICollection\"></xref> is greater than the available space from <code>index</code> to the end of the destination <code>array</code>.","nodes":[{"pos":[0,84],"content":"<ph id=\"ph1\">&lt;code&gt;index&lt;/code&gt;</ph> is equal to or greater than the length of the <ph id=\"ph2\">&lt;code&gt;array&lt;/code&gt;</ph>.","source":"<code>index</code> is equal to or greater than the length of the <code>array</code>."},{"pos":[91,95],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[102,300],"content":"The number of elements in the source <ph id=\"ph1\">&lt;xref href=\"System.Collections.ICollection\"&gt;&lt;/xref&gt;</ph> is greater than the available space from <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">index</ph><ept id=\"p1\">&lt;/code&gt;</ept> to the end of the destination <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph3\">array</ph><ept id=\"p2\">&lt;/code&gt;</ept>.","source":"The number of elements in the source <xref href=\"System.Collections.ICollection\"></xref> is greater than the available space from <code>index</code> to the end of the destination <code>array</code>."}],"pos":[135982,136291],"yaml":true},{"content":"Gets a value indicating whether access to the <xref href=\"System.Collections.ICollection\"></xref> is synchronized with the SyncRoot.","nodes":[{"pos":[0,132],"content":"Gets a value indicating whether access to the <ph id=\"ph1\">&lt;xref href=\"System.Collections.ICollection\"&gt;&lt;/xref&gt;</ph> is synchronized with the SyncRoot.","source":"Gets a value indicating whether access to the <xref href=\"System.Collections.ICollection\"></xref> is synchronized with the SyncRoot."}],"pos":[138003,138136],"yaml":true},{"content":"`true` if access to the <xref href=\"System.Collections.ICollection\"></xref> is synchronized (thread safe); otherwise, `false`. For <xref href=\"System.Collections.Concurrent.ConcurrentDictionary`2\"></xref> this property always returns **false**.","nodes":[{"pos":[0,244],"content":"`true` if access to the <xref href=\"System.Collections.ICollection\"></xref> is synchronized (thread safe); otherwise, `false`. For <xref href=\"System.Collections.Concurrent.ConcurrentDictionary`2\"></xref> this property always returns **false**.","nodes":[{"content":"<ph id=\"ph1\">`true`</ph> if access to the <ph id=\"ph2\">&lt;xref href=\"System.Collections.ICollection\"&gt;&lt;/xref&gt;</ph> is synchronized (thread safe); otherwise, <ph id=\"ph3\">`false`</ph>.","pos":[0,126],"source":"`true` if access to the <xref href=\"System.Collections.ICollection\"></xref> is synchronized (thread safe); otherwise, `false`."},{"content":"For <ph id=\"ph1\">&lt;xref href=\"System.Collections.Concurrent.ConcurrentDictionary`2\"&gt;&lt;/xref&gt;</ph> this property always returns <bpt id=\"p1\">**</bpt>false<ept id=\"p1\">**</ept>.","pos":[127,244],"source":" For <xref href=\"System.Collections.Concurrent.ConcurrentDictionary`2\"></xref> this property always returns **false**."}]}],"pos":[138277,138524],"yaml":true},{"content":"Gets an object that can be used to synchronize access to the <xref href=\"System.Collections.ICollection\"></xref>. This property is not supported.","nodes":[{"pos":[0,145],"content":"Gets an object that can be used to synchronize access to the <xref href=\"System.Collections.ICollection\"></xref>. This property is not supported.","nodes":[{"content":"Gets an object that can be used to synchronize access to the <ph id=\"ph1\">&lt;xref href=\"System.Collections.ICollection\"&gt;&lt;/xref&gt;</ph>.","pos":[0,113],"source":"Gets an object that can be used to synchronize access to the <xref href=\"System.Collections.ICollection\"></xref>."},{"content":"This property is not supported.","pos":[114,145]}]}],"pos":[140292,140438],"yaml":true},{"content":"Always returns null.","nodes":[{"pos":[0,20],"content":"Always returns null.","nodes":[{"content":"Always returns null.","pos":[0,20]}]}],"pos":[140574,140595],"yaml":true},{"content":"This property is not supported.","nodes":[{"pos":[0,31],"content":"This property is not supported.","nodes":[{"content":"This property is not supported.","pos":[0,31]}]}],"pos":[140817,140849],"yaml":true},{"content":"Adds the specified key and value to the dictionary.","nodes":[{"pos":[0,51],"content":"Adds the specified key and value to the dictionary.","nodes":[{"content":"Adds the specified key and value to the dictionary.","pos":[0,51]}]}],"pos":[142591,142643],"yaml":true},{"content":"The object to use as the key.","nodes":[{"pos":[0,29],"content":"The object to use as the key.","nodes":[{"content":"The object to use as the key.","pos":[0,29]}]}],"pos":[142790,142820],"yaml":true},{"content":"The object to use as the value.","nodes":[{"pos":[0,31],"content":"The object to use as the value.","nodes":[{"content":"The object to use as the value.","pos":[0,31]}]}],"pos":[142881,142913],"yaml":true},{"content":"<code>key</code> is `null`.","nodes":[{"pos":[0,27],"content":"<ph id=\"ph1\">&lt;code&gt;key&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>key</code> is `null`."}],"pos":[143130,143158],"yaml":true},{"content":"<code>key</code> is of a type that is not assignable to the key type  of the <xref href=\"System.Collections.Generic.Dictionary`2\"></xref>.  \n  \n -or-  \n  \n <code>value</code> is of a type that is not assignable to the type of values in the <xref href=\"System.Collections.Generic.Dictionary`2\"></xref>.  \n  \n -or-  \n  \n A value with the same key already exists in the <xref href=\"System.Collections.Generic.Dictionary`2\"></xref>.","nodes":[{"pos":[0,138],"content":"<ph id=\"ph1\">&lt;code&gt;key&lt;/code&gt;</ph> is of a type that is not assignable to the key type  of the <ph id=\"ph2\">&lt;xref href=\"System.Collections.Generic.Dictionary`2\"&gt;&lt;/xref&gt;</ph>.","source":"<code>key</code> is of a type that is not assignable to the key type  of the <xref href=\"System.Collections.Generic.Dictionary`2\"></xref>."},{"pos":[145,149],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[156,301],"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> is of a type that is not assignable to the type of values in the <ph id=\"ph2\">&lt;xref href=\"System.Collections.Generic.Dictionary`2\"&gt;&lt;/xref&gt;</ph>.","source":"<code>value</code> is of a type that is not assignable to the type of values in the <xref href=\"System.Collections.Generic.Dictionary`2\"></xref>."},{"pos":[308,312],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[319,428],"content":"A value with the same key already exists in the <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.Dictionary`2\"&gt;&lt;/xref&gt;</ph>.","source":"A value with the same key already exists in the <xref href=\"System.Collections.Generic.Dictionary`2\"></xref>."}],"pos":[143252,143697],"yaml":true},{"content":"The dictionary already contains the maximum number of elements (<xref href=\"System.Int32.MaxValue\"></xref>).","nodes":[{"pos":[0,108],"content":"The dictionary already contains the maximum number of elements (<ph id=\"ph1\">&lt;xref href=\"System.Int32.MaxValue\"&gt;&lt;/xref&gt;</ph>).","source":"The dictionary already contains the maximum number of elements (<xref href=\"System.Int32.MaxValue\"></xref>)."}],"pos":[143791,143900],"yaml":true},{"content":"Gets whether the <xref href=\"System.Collections.Generic.IDictionary`2\"></xref> contains an element with the specified key.","nodes":[{"pos":[0,122],"content":"Gets whether the <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.IDictionary`2\"&gt;&lt;/xref&gt;</ph> contains an element with the specified key.","source":"Gets whether the <xref href=\"System.Collections.Generic.IDictionary`2\"></xref> contains an element with the specified key."}],"pos":[145643,145766],"yaml":true},{"content":"The key to locate in the <xref href=\"System.Collections.Generic.IDictionary`2\"></xref>.","nodes":[{"pos":[0,87],"content":"The key to locate in the <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.IDictionary`2\"&gt;&lt;/xref&gt;</ph>.","source":"The key to locate in the <xref href=\"System.Collections.Generic.IDictionary`2\"></xref>."}],"pos":[145904,145992],"yaml":true},{"content":"`true` if the <xref href=\"System.Collections.Generic.IDictionary`2\"></xref> contains an element with the specified key; otherwise, `false`.","nodes":[{"pos":[0,139],"content":"<ph id=\"ph1\">`true`</ph> if the <ph id=\"ph2\">&lt;xref href=\"System.Collections.Generic.IDictionary`2\"&gt;&lt;/xref&gt;</ph> contains an element with the specified key; otherwise, <ph id=\"ph3\">`false`</ph>.","source":"`true` if the <xref href=\"System.Collections.Generic.IDictionary`2\"></xref> contains an element with the specified key; otherwise, `false`."}],"pos":[146050,146192],"yaml":true},{"content":"<code>key</code> is `null`.","nodes":[{"pos":[0,27],"content":"<ph id=\"ph1\">&lt;code&gt;key&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>key</code> is `null`."}],"pos":[146414,146442],"yaml":true},{"content":"Provides a <xref href=\"System.Collections.IDictionaryEnumerator\"></xref> for the <xref href=\"System.Collections.Generic.IDictionary`2\"></xref>.","nodes":[{"pos":[0,143],"content":"Provides a <ph id=\"ph1\">&lt;xref href=\"System.Collections.IDictionaryEnumerator\"&gt;&lt;/xref&gt;</ph> for the <ph id=\"ph2\">&lt;xref href=\"System.Collections.Generic.IDictionary`2\"&gt;&lt;/xref&gt;</ph>.","source":"Provides a <xref href=\"System.Collections.IDictionaryEnumerator\"></xref> for the <xref href=\"System.Collections.Generic.IDictionary`2\"></xref>."}],"pos":[148152,148296],"yaml":true},{"content":"A <xref href=\"System.Collections.IDictionaryEnumerator\"></xref> for the <xref href=\"System.Collections.Generic.IDictionary`2\"></xref>.","nodes":[{"pos":[0,134],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Collections.IDictionaryEnumerator\"&gt;&lt;/xref&gt;</ph> for the <ph id=\"ph2\">&lt;xref href=\"System.Collections.Generic.IDictionary`2\"&gt;&lt;/xref&gt;</ph>.","source":"A <xref href=\"System.Collections.IDictionaryEnumerator\"></xref> for the <xref href=\"System.Collections.Generic.IDictionary`2\"></xref>."}],"pos":[148493,148628],"yaml":true},{"content":"Gets a value indicating whether the <xref href=\"System.Collections.Generic.IDictionary`2\"></xref> has a fixed size.","nodes":[{"pos":[0,115],"content":"Gets a value indicating whether the <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.IDictionary`2\"&gt;&lt;/xref&gt;</ph> has a fixed size.","source":"Gets a value indicating whether the <xref href=\"System.Collections.Generic.IDictionary`2\"></xref> has a fixed size."}],"pos":[150450,150566],"yaml":true},{"content":"`true` if the <xref href=\"System.Collections.Generic.IDictionary`2\"></xref> has a fixed size; otherwise, `false`. For <xref href=\"System.Collections.Concurrent.ConcurrentDictionary`2\"></xref>, this property always returns `false`.","nodes":[{"pos":[0,230],"content":"`true` if the <xref href=\"System.Collections.Generic.IDictionary`2\"></xref> has a fixed size; otherwise, `false`. For <xref href=\"System.Collections.Concurrent.ConcurrentDictionary`2\"></xref>, this property always returns `false`.","nodes":[{"content":"<ph id=\"ph1\">`true`</ph> if the <ph id=\"ph2\">&lt;xref href=\"System.Collections.Generic.IDictionary`2\"&gt;&lt;/xref&gt;</ph> has a fixed size; otherwise, <ph id=\"ph3\">`false`</ph>.","pos":[0,113],"source":"`true` if the <xref href=\"System.Collections.Generic.IDictionary`2\"></xref> has a fixed size; otherwise, `false`."},{"content":"For <ph id=\"ph1\">&lt;xref href=\"System.Collections.Concurrent.ConcurrentDictionary`2\"&gt;&lt;/xref&gt;</ph>, this property always returns <ph id=\"ph2\">`false`</ph>.","pos":[114,230],"source":" For <xref href=\"System.Collections.Concurrent.ConcurrentDictionary`2\"></xref>, this property always returns `false`."}]}],"pos":[150704,150937],"yaml":true},{"content":"Gets a value indicating whether the <xref href=\"System.Collections.Generic.IDictionary`2\"></xref> is read-only.","nodes":[{"pos":[0,111],"content":"Gets a value indicating whether the <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.IDictionary`2\"&gt;&lt;/xref&gt;</ph> is read-only.","source":"Gets a value indicating whether the <xref href=\"System.Collections.Generic.IDictionary`2\"></xref> is read-only."}],"pos":[152714,152826],"yaml":true},{"content":"`true` if the <xref href=\"System.Collections.Generic.IDictionary`2\"></xref> is read-only; otherwise, `false`. For <xref href=\"System.Collections.Concurrent.ConcurrentDictionary`2\"></xref>, this property always returns `false`.","nodes":[{"pos":[0,226],"content":"`true` if the <xref href=\"System.Collections.Generic.IDictionary`2\"></xref> is read-only; otherwise, `false`. For <xref href=\"System.Collections.Concurrent.ConcurrentDictionary`2\"></xref>, this property always returns `false`.","nodes":[{"content":"<ph id=\"ph1\">`true`</ph> if the <ph id=\"ph2\">&lt;xref href=\"System.Collections.Generic.IDictionary`2\"&gt;&lt;/xref&gt;</ph> is read-only; otherwise, <ph id=\"ph3\">`false`</ph>.","pos":[0,109],"source":"`true` if the <xref href=\"System.Collections.Generic.IDictionary`2\"></xref> is read-only; otherwise, `false`."},{"content":"For <ph id=\"ph1\">&lt;xref href=\"System.Collections.Concurrent.ConcurrentDictionary`2\"&gt;&lt;/xref&gt;</ph>, this property always returns <ph id=\"ph2\">`false`</ph>.","pos":[110,226],"source":" For <xref href=\"System.Collections.Concurrent.ConcurrentDictionary`2\"></xref>, this property always returns `false`."}]}],"pos":[152963,153192],"yaml":true},{"content":"Gets or sets the value associated with the specified key.","nodes":[{"pos":[0,57],"content":"Gets or sets the value associated with the specified key.","nodes":[{"content":"Gets or sets the value associated with the specified key.","pos":[0,57]}]}],"pos":[155001,155059],"yaml":true},{"content":"The key of the value to get or set.","nodes":[{"pos":[0,35],"content":"The key of the value to get or set.","nodes":[{"content":"The key of the value to get or set.","pos":[0,35]}]}],"pos":[155226,155262],"yaml":true},{"content":"The value associated with the specified key, or  `null` if <code>key</code> is not in the dictionary or <code>key</code> is of a type that is not assignable to the key type of the <xref href=\"System.Collections.Concurrent.ConcurrentDictionary`2\"></xref>.","nodes":[{"pos":[0,254],"content":"The value associated with the specified key, or  <ph id=\"ph1\">`null`</ph> if <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">key</ph><ept id=\"p1\">&lt;/code&gt;</ept> is not in the dictionary or <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph3\">key</ph><ept id=\"p2\">&lt;/code&gt;</ept> is of a type that is not assignable to the key type of the <ph id=\"ph4\">&lt;xref href=\"System.Collections.Concurrent.ConcurrentDictionary`2\"&gt;&lt;/xref&gt;</ph>.","source":"The value associated with the specified key, or  `null` if <code>key</code> is not in the dictionary or <code>key</code> is of a type that is not assignable to the key type of the <xref href=\"System.Collections.Concurrent.ConcurrentDictionary`2\"></xref>."}],"pos":[155319,155574],"yaml":true},{"content":"<code>key</code> is  `null`.","nodes":[{"pos":[0,28],"content":"<ph id=\"ph1\">&lt;code&gt;key&lt;/code&gt;</ph> is  <ph id=\"ph2\">`null`</ph>.","source":"<code>key</code> is  `null`."}],"pos":[155792,155821],"yaml":true},{"content":"A value is being assigned, and <code>key</code> is of a type that is not assignable to the key type or the value type of the <xref href=\"System.Collections.Concurrent.ConcurrentDictionary`2\"></xref>.","nodes":[{"pos":[0,199],"content":"A value is being assigned, and <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">key</ph><ept id=\"p1\">&lt;/code&gt;</ept> is of a type that is not assignable to the key type or the value type of the <ph id=\"ph2\">&lt;xref href=\"System.Collections.Concurrent.ConcurrentDictionary`2\"&gt;&lt;/xref&gt;</ph>.","source":"A value is being assigned, and <code>key</code> is of a type that is not assignable to the key type or the value type of the <xref href=\"System.Collections.Concurrent.ConcurrentDictionary`2\"></xref>."}],"pos":[155915,156115],"yaml":true},{"content":"Gets an <xref href=\"System.Collections.ICollection\"></xref> that contains the keys of the  <xref href=\"System.Collections.Generic.IDictionary`2\"></xref>.","nodes":[{"pos":[0,153],"content":"Gets an <ph id=\"ph1\">&lt;xref href=\"System.Collections.ICollection\"&gt;&lt;/xref&gt;</ph> that contains the keys of the  <ph id=\"ph2\">&lt;xref href=\"System.Collections.Generic.IDictionary`2\"&gt;&lt;/xref&gt;</ph>.","source":"Gets an <xref href=\"System.Collections.ICollection\"></xref> that contains the keys of the  <xref href=\"System.Collections.Generic.IDictionary`2\"></xref>."}],"pos":[157730,157884],"yaml":true},{"content":"An interface that contains the keys of the <xref href=\"System.Collections.Generic.IDictionary`2\"></xref>.","nodes":[{"pos":[0,105],"content":"An interface that contains the keys of the <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.IDictionary`2\"&gt;&lt;/xref&gt;</ph>.","source":"An interface that contains the keys of the <xref href=\"System.Collections.Generic.IDictionary`2\"></xref>."}],"pos":[158057,158163],"yaml":true},{"content":"Removes the element with the specified key from the <xref href=\"System.Collections.IDictionary\"></xref>.","nodes":[{"pos":[0,104],"content":"Removes the element with the specified key from the <ph id=\"ph1\">&lt;xref href=\"System.Collections.IDictionary\"&gt;&lt;/xref&gt;</ph>.","source":"Removes the element with the specified key from the <xref href=\"System.Collections.IDictionary\"></xref>."}],"pos":[159976,160081],"yaml":true},{"content":"The key of the element to remove.","nodes":[{"pos":[0,33],"content":"The key of the element to remove.","nodes":[{"content":"The key of the element to remove.","pos":[0,33]}]}],"pos":[160217,160251],"yaml":true},{"content":"<code>key</code> is `null`.","nodes":[{"pos":[0,27],"content":"<ph id=\"ph1\">&lt;code&gt;key&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>key</code> is `null`."}],"pos":[160471,160499],"yaml":true},{"content":"Gets an <xref href=\"System.Collections.ICollection\"></xref> that contains the values in the <xref href=\"System.Collections.IDictionary\"></xref>.","nodes":[{"pos":[0,144],"content":"Gets an <ph id=\"ph1\">&lt;xref href=\"System.Collections.ICollection\"&gt;&lt;/xref&gt;</ph> that contains the values in the <ph id=\"ph2\">&lt;xref href=\"System.Collections.IDictionary\"&gt;&lt;/xref&gt;</ph>.","source":"Gets an <xref href=\"System.Collections.ICollection\"></xref> that contains the values in the <xref href=\"System.Collections.IDictionary\"></xref>."}],"pos":[162163,162308],"yaml":true},{"content":"An interface that contains the values in the <xref href=\"System.Collections.IDictionary\"></xref>.","nodes":[{"pos":[0,97],"content":"An interface that contains the values in the <ph id=\"ph1\">&lt;xref href=\"System.Collections.IDictionary\"&gt;&lt;/xref&gt;</ph>.","source":"An interface that contains the values in the <xref href=\"System.Collections.IDictionary\"></xref>."}],"pos":[162483,162581],"yaml":true},{"content":"Returns an enumerator that iterates through the <xref href=\"System.Collections.Concurrent.ConcurrentDictionary`2\"></xref>.","nodes":[{"pos":[0,122],"content":"Returns an enumerator that iterates through the <ph id=\"ph1\">&lt;xref href=\"System.Collections.Concurrent.ConcurrentDictionary`2\"&gt;&lt;/xref&gt;</ph>.","source":"Returns an enumerator that iterates through the <xref href=\"System.Collections.Concurrent.ConcurrentDictionary`2\"></xref>."}],"pos":[164375,164498],"yaml":true},{"content":"The enumerator returned from the dictionary is safe to use concurrently with reads and writes to the dictionary, however it does not represent a moment-in-time snapshot of the dictionary. The contents exposed through the enumerator may contain modifications made to the dictionary after <xref:System.Collections.Concurrent.ConcurrentDictionary%602.GetEnumerator%2A> was called.","nodes":[{"pos":[0,377],"content":"The enumerator returned from the dictionary is safe to use concurrently with reads and writes to the dictionary, however it does not represent a moment-in-time snapshot of the dictionary. The contents exposed through the enumerator may contain modifications made to the dictionary after <xref:System.Collections.Concurrent.ConcurrentDictionary%602.GetEnumerator%2A> was called.","nodes":[{"content":"The enumerator returned from the dictionary is safe to use concurrently with reads and writes to the dictionary, however it does not represent a moment-in-time snapshot of the dictionary. The contents exposed through the enumerator may contain modifications made to the dictionary after <xref:System.Collections.Concurrent.ConcurrentDictionary%602.GetEnumerator%2A> was called.","pos":[0,377],"nodes":[{"content":"The enumerator returned from the dictionary is safe to use concurrently with reads and writes to the dictionary, however it does not represent a moment-in-time snapshot of the dictionary.","pos":[0,187]},{"content":"The contents exposed through the enumerator may contain modifications made to the dictionary after <ph id=\"ph1\">&lt;xref:System.Collections.Concurrent.ConcurrentDictionary%602.GetEnumerator%2A&gt;</ph> was called.","pos":[188,377],"source":" The contents exposed through the enumerator may contain modifications made to the dictionary after <xref:System.Collections.Concurrent.ConcurrentDictionary%602.GetEnumerator%2A> was called."}]}]}],"pos":[164509,164887],"yaml":true,"extradata":"MT"},{"content":"An enumerator for the <xref href=\"System.Collections.Concurrent.ConcurrentDictionary`2\"></xref>.","nodes":[{"pos":[0,96],"content":"An enumerator for the <ph id=\"ph1\">&lt;xref href=\"System.Collections.Concurrent.ConcurrentDictionary`2\"&gt;&lt;/xref&gt;</ph>.","source":"An enumerator for the <xref href=\"System.Collections.Concurrent.ConcurrentDictionary`2\"></xref>."}],"pos":[165064,165161],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Collections.Concurrent.ConcurrentDictionary`2\n  commentId: T:System.Collections.Concurrent.ConcurrentDictionary`2\n  id: ConcurrentDictionary`2\n  children:\n  - System.Collections.Concurrent.ConcurrentDictionary`2.#ctor\n  - System.Collections.Concurrent.ConcurrentDictionary`2.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})\n  - System.Collections.Concurrent.ConcurrentDictionary`2.#ctor(System.Collections.Generic.IEqualityComparer{`0})\n  - System.Collections.Concurrent.ConcurrentDictionary`2.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}},System.Collections.Generic.IEqualityComparer{`0})\n  - System.Collections.Concurrent.ConcurrentDictionary`2.#ctor(System.Int32,System.Int32)\n  - System.Collections.Concurrent.ConcurrentDictionary`2.#ctor(System.Int32,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}},System.Collections.Generic.IEqualityComparer{`0})\n  - System.Collections.Concurrent.ConcurrentDictionary`2.#ctor(System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})\n  - System.Collections.Concurrent.ConcurrentDictionary`2.AddOrUpdate(`0,System.Func{`0,`1},System.Func{`0,`1,`1})\n  - System.Collections.Concurrent.ConcurrentDictionary`2.AddOrUpdate(`0,`1,System.Func{`0,`1,`1})\n  - System.Collections.Concurrent.ConcurrentDictionary`2.AddOrUpdate``1(`0,System.Func{`0,``0,`1},System.Func{`0,`1,``0,`1},``0)\n  - System.Collections.Concurrent.ConcurrentDictionary`2.Clear\n  - System.Collections.Concurrent.ConcurrentDictionary`2.ContainsKey(`0)\n  - System.Collections.Concurrent.ConcurrentDictionary`2.Count\n  - System.Collections.Concurrent.ConcurrentDictionary`2.GetEnumerator\n  - System.Collections.Concurrent.ConcurrentDictionary`2.GetOrAdd(`0,System.Func{`0,`1})\n  - System.Collections.Concurrent.ConcurrentDictionary`2.GetOrAdd(`0,`1)\n  - System.Collections.Concurrent.ConcurrentDictionary`2.GetOrAdd``1(`0,System.Func{`0,``0,`1},``0)\n  - System.Collections.Concurrent.ConcurrentDictionary`2.IsEmpty\n  - System.Collections.Concurrent.ConcurrentDictionary`2.Item(`0)\n  - System.Collections.Concurrent.ConcurrentDictionary`2.Keys\n  - System.Collections.Concurrent.ConcurrentDictionary`2.ToArray\n  - System.Collections.Concurrent.ConcurrentDictionary`2.TryAdd(`0,`1)\n  - System.Collections.Concurrent.ConcurrentDictionary`2.TryGetValue(`0,`1@)\n  - System.Collections.Concurrent.ConcurrentDictionary`2.TryRemove(`0,`1@)\n  - System.Collections.Concurrent.ConcurrentDictionary`2.TryUpdate(`0,`1,`1)\n  - System.Collections.Concurrent.ConcurrentDictionary`2.Values\n  - System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#Add(System.Collections.Generic.KeyValuePair{`0,`1})\n  - System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#Contains(System.Collections.Generic.KeyValuePair{`0,`1})\n  - System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)\n  - System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#IsReadOnly\n  - System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#Remove(System.Collections.Generic.KeyValuePair{`0,`1})\n  - System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#Generic#IDictionary{TKey,TValue}#Add(`0,`1)\n  - System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#Generic#IDictionary{TKey,TValue}#Remove(`0)\n  - System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#Generic#IReadOnlyDictionary{TKey,TValue}#Keys\n  - System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#Generic#IReadOnlyDictionary{TKey,TValue}#Values\n  - System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#ICollection#CopyTo(System.Array,System.Int32)\n  - System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#ICollection#IsSynchronized\n  - System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#ICollection#SyncRoot\n  - System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#IDictionary#Add(System.Object,System.Object)\n  - System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#IDictionary#Contains(System.Object)\n  - System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#IDictionary#GetEnumerator\n  - System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#IDictionary#IsFixedSize\n  - System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#IDictionary#IsReadOnly\n  - System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#IDictionary#Item(System.Object)\n  - System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#IDictionary#Keys\n  - System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#IDictionary#Remove(System.Object)\n  - System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#IDictionary#Values\n  - System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#IEnumerable#GetEnumerator\n  langs:\n  - csharp\n  name: ConcurrentDictionary<TKey,TValue>\n  nameWithType: ConcurrentDictionary<TKey,TValue>\n  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey,TValue>\n  type: Class\n  assemblies:\n  - System.Collections.Concurrent\n  - mscorlib\n  - netstandard\n  namespace: System.Collections.Concurrent\n  summary: Represents a thread-safe collection of key/value pairs that can be accessed by multiple threads concurrently.\n  remarks: \"For very large <xref:System.Collections.Concurrent.ConcurrentDictionary%602> objects, you can increase the maximum array size to 2 gigabytes (GB) on a 64-bit system by setting the  configuration element to `true` in the run-time environment.  \\n  \\n> [!NOTE]\\n>  <xref:System.Collections.Concurrent.ConcurrentDictionary%602> implements the <xref:System.Collections.Generic.IReadOnlyCollection%601> and <xref:System.Collections.Generic.IReadOnlyDictionary%602> interfaces starting with the [!INCLUDE[net_v46](~/includes/net-v46-md.md)]; in previous versions of the .NET Framework, the <xref:System.Collections.Concurrent.ConcurrentDictionary%602> class did not implement these interfaces.  \\n  \\n Like the <xref:System.Collections.Generic.Dictionary%602?displayProperty=fullName> class, <xref:System.Collections.Concurrent.ConcurrentDictionary%602> implements the <xref:System.Collections.Generic.IDictionary%602> interface. In addition, <xref:System.Collections.Concurrent.ConcurrentDictionary%602> provides several methods for adding or updating key/value pairs in the dictionary, as described in the following table.  \\n  \\n|To do this|Use this method|Usage notes|  \\n|----------------|---------------------|-----------------|  \\n|Add a new key to the dictionary, if it doesn’t already exist in the dictionary|<xref:System.Collections.Concurrent.ConcurrentDictionary%602.TryAdd%2A>|This method adds the specified key/value pair, if the key doesn’t currently exist in the dictionary. The method returns `true` or `false` depending on whether the new pair was added.|  \\n|Update the value for an existing key in the dictionary, if that key has a specific value|<xref:System.Collections.Concurrent.ConcurrentDictionary%602.TryUpdate%2A>|This method checks whether the key has a specified value, and if it does, updates the key with a new value. It's similar to the <xref:System.Threading.Interlocked.CompareExchange%2A> method, except that it's used for dictionary elements.|  \\n|Store a key/value pair in the dictionary unconditionally, and overwrite the value of a key that already exists|The indexer’s setter: `dictionary[key] = newValue`||  \\n|Add a key/value pair to the dictionary, or if the key already exists, update the value for the key based on the key’s existing value|<xref:System.Collections.Concurrent.ConcurrentDictionary%602.AddOrUpdate%28%600%2CSystem.Func%7B%600%2C%601%7D%2CSystem.Func%7B%600%2C%601%2C%601%7D%29><br /><br /> —or—<br /><br /> <xref:System.Collections.Concurrent.ConcurrentDictionary%602.AddOrUpdate%28%600%2C%601%2CSystem.Func%7B%600%2C%601%2C%601%7D%29>|<xref:System.Collections.Concurrent.ConcurrentDictionary%602.AddOrUpdate%28%600%2CSystem.Func%7B%600%2C%601%7D%2CSystem.Func%7B%600%2C%601%2C%601%7D%29> accepts the key and two delegates. It uses the first delegate if the key doesn’t exist in the dictionary; it accepts the key and returns the value that should be added for the key. It uses the second delegate if the key does exist; it accepts the key and its current value, and it returns the new value that should be set for the key.<br /><br /> <xref:System.Collections.Concurrent.ConcurrentDictionary%602.AddOrUpdate%28%600%2C%601%2CSystem.Func%7B%600%2C%601%2C%601%7D%29> accepts the key, a value to add, and the update delegate. This is the same as the previous overload, except that it doesn't use a delegate to add a key.|  \\n|Get the value for a key in the dictionary, adding the value to the dictionary and returning it if the key doesn’t exist|<xref:System.Collections.Concurrent.ConcurrentDictionary%602.GetOrAdd%28%600%2C%601%29><br /><br /> —or—<br /><br /> <xref:System.Collections.Concurrent.ConcurrentDictionary%602.GetOrAdd%28%600%2CSystem.Func%7B%600%2C%601%7D%29>|These overloads provide lazy initialization for a key/value pair in the dictionary, adding the value only if it’s not there.<br /><br /> <xref:System.Collections.Concurrent.ConcurrentDictionary%602.GetOrAdd%28%600%2C%601%29> takes the value to be added if the key doesn’t exist.<br /><br /> <xref:System.Collections.Concurrent.ConcurrentDictionary%602.GetOrAdd%28%600%2CSystem.Func%7B%600%2C%601%7D%29> takes a delegate that will generate the value if the key doesn’t exist.|  \\n  \\n All these operations are atomic and are thread-safe with regards to all other operations on the <xref:System.Collections.Concurrent.ConcurrentDictionary%602> class. The only exceptions are the methods that accept a delegate, that is, <xref:System.Collections.Concurrent.ConcurrentDictionary%602.AddOrUpdate%2A> and <xref:System.Collections.Concurrent.ConcurrentDictionary%602.GetOrAdd%2A>. For modifications and write operations to the dictionary, <xref:System.Collections.Concurrent.ConcurrentDictionary%602> uses fine-grained locking to ensure thread safety. (Read operations on the dictionary are performed in a lock-free manner.) However, delegates for these methods are called outside the locks to avoid the problems that can arise from executing unknown code under a lock. Therefore, the code executed by these delegates is not subject to the atomicity of the operation.\"\n  example:\n  - \"The following example shows how to construct a <xref:System.Collections.Concurrent.ConcurrentDictionary%602> object.  \\n  \\n [!code-csharp[System.Collections.Concurrent.ConcurrentDictionary#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.collections.concurrent.concurrentdictionary/cs/concdictionary.cs#1)]\\n [!code-vb[System.Collections.Concurrent.ConcurrentDictionary#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.collections.concurrent.concurrentdictionary/vb/concdictionary.vb#1)]\"\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(false)]\n\n      public class ConcurrentDictionary<TKey,TValue> : System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>, System.Collections.Generic.IDictionary<TKey,TValue>, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<TKey,TValue>>, System.Collections.Generic.IReadOnlyCollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>, System.Collections.Generic.IReadOnlyDictionary<TKey,TValue>, System.Collections.IDictionary\n    typeParameters:\n    - id: TKey\n      description: The type of the keys in the dictionary.\n    - id: TValue\n      description: The type of the values in the dictionary.\n  inheritance:\n  - System.Object\n  implements:\n  - System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{TKey,TValue}}\n  - System.Collections.Generic.IDictionary{TKey,TValue}\n  - System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{TKey,TValue}}\n  - System.Collections.Generic.IReadOnlyCollection{System.Collections.Generic.KeyValuePair{TKey,TValue}}\n  - System.Collections.Generic.IReadOnlyDictionary{TKey,TValue}\n  - System.Collections.IDictionary\n  inheritedMembers:\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.ToString\n  extensionMethods:\n  - System.Collections.Generic.CollectionExtensions.GetValueOrDefault``2(System.Collections.Generic.IReadOnlyDictionary{``0,``1},``0)\n  - System.Collections.Generic.CollectionExtensions.GetValueOrDefault``2(System.Collections.Generic.IReadOnlyDictionary{``0,``1},``0,``1)\n  - System.Collections.Generic.CollectionExtensions.Remove``2(System.Collections.Generic.IDictionary{``0,``1},``0,``1@)\n  - System.Collections.Generic.CollectionExtensions.TryAdd``2(System.Collections.Generic.IDictionary{``0,``1},``0,``1)\n  - System.Collections.Immutable.ImmutableArray.ToImmutableArray``1(System.Collections.Generic.IEnumerable{``0})\n  - System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})\n  - System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})\n  - System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}})\n  - System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}},System.Collections.Generic.IEqualityComparer{``0})\n  - System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}},System.Collections.Generic.IEqualityComparer{``0},System.Collections.Generic.IEqualityComparer{``1})\n  - System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})\n  - System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})\n  - System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1},System.Collections.Generic.IEqualityComparer{``2})\n  - System.Collections.Immutable.ImmutableHashSet.ToImmutableHashSet``1(System.Collections.Generic.IEnumerable{``0})\n  - System.Collections.Immutable.ImmutableHashSet.ToImmutableHashSet``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})\n  - System.Collections.Immutable.ImmutableList.ToImmutableList``1(System.Collections.Generic.IEnumerable{``0})\n  - System.Collections.Immutable.ImmutableSortedDictionary.ToImmutableSortedDictionary``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}})\n  - System.Collections.Immutable.ImmutableSortedDictionary.ToImmutableSortedDictionary``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}},System.Collections.Generic.IComparer{``0})\n  - System.Collections.Immutable.ImmutableSortedDictionary.ToImmutableSortedDictionary``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}},System.Collections.Generic.IComparer{``0},System.Collections.Generic.IEqualityComparer{``1})\n  - System.Collections.Immutable.ImmutableSortedDictionary.ToImmutableSortedDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})\n  - System.Collections.Immutable.ImmutableSortedDictionary.ToImmutableSortedDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IComparer{``1})\n  - System.Collections.Immutable.ImmutableSortedDictionary.ToImmutableSortedDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IComparer{``1},System.Collections.Generic.IEqualityComparer{``2})\n  - System.Collections.Immutable.ImmutableSortedSet.ToImmutableSortedSet``1(System.Collections.Generic.IEnumerable{``0})\n  - System.Collections.Immutable.ImmutableSortedSet.ToImmutableSortedSet``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IComparer{``0})\n  - System.Data.DataTableExtensions.CopyToDataTable``1(System.Collections.Generic.IEnumerable{``0})\n  - System.Data.DataTableExtensions.CopyToDataTable``1(System.Collections.Generic.IEnumerable{``0},System.Data.DataTable,System.Data.LoadOption)\n  - System.Data.DataTableExtensions.CopyToDataTable``1(System.Collections.Generic.IEnumerable{``0},System.Data.DataTable,System.Data.LoadOption,System.Data.FillErrorEventHandler)\n  - System.Linq.Enumerable.Aggregate``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,``0})\n  - System.Linq.Enumerable.Aggregate``2(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1})\n  - System.Linq.Enumerable.Aggregate``3(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``2})\n  - System.Linq.Enumerable.All``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})\n  - System.Linq.Enumerable.Any``1(System.Collections.Generic.IEnumerable{``0})\n  - System.Linq.Enumerable.Any``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})\n  - System.Linq.Enumerable.Append``1(System.Collections.Generic.IEnumerable{``0},``0)\n  - System.Linq.Enumerable.AsEnumerable``1(System.Collections.Generic.IEnumerable{``0})\n  - System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Decimal})\n  - System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Double})\n  - System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Int32})\n  - System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Int64})\n  - System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})\n  - System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})\n  - System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})\n  - System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})\n  - System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})\n  - System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Single})\n  - System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})\n  - System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})\n  - System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})\n  - System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})\n  - System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})\n  - System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})\n  - System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})\n  - System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})\n  - System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})\n  - System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})\n  - System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)\n  - System.Linq.Enumerable.Concat``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})\n  - System.Linq.Enumerable.Contains``1(System.Collections.Generic.IEnumerable{``0},``0)\n  - System.Linq.Enumerable.Contains``1(System.Collections.Generic.IEnumerable{``0},``0,System.Collections.Generic.IEqualityComparer{``0})\n  - System.Linq.Enumerable.Count``1(System.Collections.Generic.IEnumerable{``0})\n  - System.Linq.Enumerable.Count``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})\n  - System.Linq.Enumerable.DefaultIfEmpty``1(System.Collections.Generic.IEnumerable{``0})\n  - System.Linq.Enumerable.DefaultIfEmpty``1(System.Collections.Generic.IEnumerable{``0},``0)\n  - System.Linq.Enumerable.Distinct``1(System.Collections.Generic.IEnumerable{``0})\n  - System.Linq.Enumerable.Distinct``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})\n  - System.Linq.Enumerable.ElementAt``1(System.Collections.Generic.IEnumerable{``0},System.Int32)\n  - System.Linq.Enumerable.ElementAtOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Int32)\n  - System.Linq.Enumerable.Except``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})\n  - System.Linq.Enumerable.Except``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})\n  - System.Linq.Enumerable.First``1(System.Collections.Generic.IEnumerable{``0})\n  - System.Linq.Enumerable.First``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})\n  - System.Linq.Enumerable.FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0})\n  - System.Linq.Enumerable.FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})\n  - System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})\n  - System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})\n  - System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})\n  - System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})\n  - System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2})\n  - System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2},System.Collections.Generic.IEqualityComparer{``1})\n  - System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3})\n  - System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3},System.Collections.Generic.IEqualityComparer{``1})\n  - System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})\n  - System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})\n  - System.Linq.Enumerable.Intersect``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})\n  - System.Linq.Enumerable.Intersect``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})\n  - System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})\n  - System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})\n  - System.Linq.Enumerable.Last``1(System.Collections.Generic.IEnumerable{``0})\n  - System.Linq.Enumerable.Last``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})\n  - System.Linq.Enumerable.LastOrDefault``1(System.Collections.Generic.IEnumerable{``0})\n  - System.Linq.Enumerable.LastOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})\n  - System.Linq.Enumerable.LongCount``1(System.Collections.Generic.IEnumerable{``0})\n  - System.Linq.Enumerable.LongCount``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})\n  - System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Decimal})\n  - System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Double})\n  - System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Int32})\n  - System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Int64})\n  - System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})\n  - System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})\n  - System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})\n  - System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})\n  - System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})\n  - System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Single})\n  - System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0})\n  - System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})\n  - System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})\n  - System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})\n  - System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})\n  - System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})\n  - System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})\n  - System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})\n  - System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})\n  - System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})\n  - System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})\n  - System.Linq.Enumerable.Max``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})\n  - System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Decimal})\n  - System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Double})\n  - System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Int32})\n  - System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Int64})\n  - System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})\n  - System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})\n  - System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})\n  - System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})\n  - System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})\n  - System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Single})\n  - System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0})\n  - System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})\n  - System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})\n  - System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})\n  - System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})\n  - System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})\n  - System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})\n  - System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})\n  - System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})\n  - System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})\n  - System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})\n  - System.Linq.Enumerable.Min``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})\n  - System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)\n  - System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})\n  - System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})\n  - System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})\n  - System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})\n  - System.Linq.Enumerable.Prepend``1(System.Collections.Generic.IEnumerable{``0},``0)\n  - System.Linq.Enumerable.Reverse``1(System.Collections.Generic.IEnumerable{``0})\n  - System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})\n  - System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,``1})\n  - System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}})\n  - System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}})\n  - System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})\n  - System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})\n  - System.Linq.Enumerable.SequenceEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})\n  - System.Linq.Enumerable.SequenceEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})\n  - System.Linq.Enumerable.Single``1(System.Collections.Generic.IEnumerable{``0})\n  - System.Linq.Enumerable.Single``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})\n  - System.Linq.Enumerable.SingleOrDefault``1(System.Collections.Generic.IEnumerable{``0})\n  - System.Linq.Enumerable.SingleOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})\n  - System.Linq.Enumerable.Skip``1(System.Collections.Generic.IEnumerable{``0},System.Int32)\n  - System.Linq.Enumerable.SkipLast``1(System.Collections.Generic.IEnumerable{``0},System.Int32)\n  - System.Linq.Enumerable.SkipWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})\n  - System.Linq.Enumerable.SkipWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})\n  - System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Decimal})\n  - System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Double})\n  - System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Int32})\n  - System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Int64})\n  - System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})\n  - System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})\n  - System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})\n  - System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})\n  - System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})\n  - System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Single})\n  - System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})\n  - System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})\n  - System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})\n  - System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})\n  - System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})\n  - System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})\n  - System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})\n  - System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})\n  - System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})\n  - System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})\n  - System.Linq.Enumerable.Take``1(System.Collections.Generic.IEnumerable{``0},System.Int32)\n  - System.Linq.Enumerable.TakeLast``1(System.Collections.Generic.IEnumerable{``0},System.Int32)\n  - System.Linq.Enumerable.TakeWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})\n  - System.Linq.Enumerable.TakeWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})\n  - System.Linq.Enumerable.ToArray``1(System.Collections.Generic.IEnumerable{``0})\n  - System.Linq.Enumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})\n  - System.Linq.Enumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})\n  - System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})\n  - System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})\n  - System.Linq.Enumerable.ToHashSet``1(System.Collections.Generic.IEnumerable{``0})\n  - System.Linq.Enumerable.ToHashSet``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})\n  - System.Linq.Enumerable.ToList``1(System.Collections.Generic.IEnumerable{``0})\n  - System.Linq.Enumerable.ToLookup``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})\n  - System.Linq.Enumerable.ToLookup``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})\n  - System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})\n  - System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})\n  - System.Linq.Enumerable.Union``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})\n  - System.Linq.Enumerable.Union``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})\n  - System.Linq.Enumerable.Where``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})\n  - System.Linq.Enumerable.Where``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})\n  - System.Linq.Enumerable.Zip``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,``2})\n  - System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)\n  - System.Linq.ParallelEnumerable.AsParallel``1(System.Collections.Generic.IEnumerable{``0})\n  - System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)\n  - System.Linq.Queryable.AsQueryable``1(System.Collections.Generic.IEnumerable{``0})\n  - System.Xml.Linq.Extensions.Ancestors``1(System.Collections.Generic.IEnumerable{``0})\n  - System.Xml.Linq.Extensions.Ancestors``1(System.Collections.Generic.IEnumerable{``0},System.Xml.Linq.XName)\n  - System.Xml.Linq.Extensions.AncestorsAndSelf(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement})\n  - System.Xml.Linq.Extensions.AncestorsAndSelf(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement},System.Xml.Linq.XName)\n  - System.Xml.Linq.Extensions.Attributes(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement})\n  - System.Xml.Linq.Extensions.Attributes(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement},System.Xml.Linq.XName)\n  - System.Xml.Linq.Extensions.DescendantNodes``1(System.Collections.Generic.IEnumerable{``0})\n  - System.Xml.Linq.Extensions.DescendantNodesAndSelf(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement})\n  - System.Xml.Linq.Extensions.Descendants``1(System.Collections.Generic.IEnumerable{``0})\n  - System.Xml.Linq.Extensions.Descendants``1(System.Collections.Generic.IEnumerable{``0},System.Xml.Linq.XName)\n  - System.Xml.Linq.Extensions.DescendantsAndSelf(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement})\n  - System.Xml.Linq.Extensions.DescendantsAndSelf(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement},System.Xml.Linq.XName)\n  - System.Xml.Linq.Extensions.Elements``1(System.Collections.Generic.IEnumerable{``0})\n  - System.Xml.Linq.Extensions.Elements``1(System.Collections.Generic.IEnumerable{``0},System.Xml.Linq.XName)\n  - System.Xml.Linq.Extensions.InDocumentOrder``1(System.Collections.Generic.IEnumerable{``0})\n  - System.Xml.Linq.Extensions.Nodes``1(System.Collections.Generic.IEnumerable{``0})\n  - System.Xml.Linq.Extensions.Remove(System.Collections.Generic.IEnumerable{System.Xml.Linq.XAttribute})\n  - System.Xml.Linq.Extensions.Remove``1(System.Collections.Generic.IEnumerable{``0})\n  attributes:\n  - type: System.Runtime.InteropServices.ComVisibleAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Concurrent/ConcurrentDictionary`2.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.Concurrent.ConcurrentDictionary`2.#ctor\n  commentId: M:System.Collections.Concurrent.ConcurrentDictionary`2.#ctor\n  id: '#ctor'\n  parent: System.Collections.Concurrent.ConcurrentDictionary`2\n  langs:\n  - csharp\n  name: ConcurrentDictionary<TKey,TValue>()\n  nameWithType: ConcurrentDictionary<TKey,TValue>.ConcurrentDictionary<TKey,TValue>()\n  fullName: ConcurrentDictionary<TKey,TValue>.ConcurrentDictionary<TKey,TValue>()\n  type: Constructor\n  assemblies:\n  - System.Collections.Concurrent\n  - mscorlib\n  - netstandard\n  namespace: System.Collections.Concurrent\n  summary: Initializes a new instance of the <xref href=\"System.Collections.Concurrent.ConcurrentDictionary`2\"></xref> class that is empty, has the default concurrency level, has the default initial capacity, and uses the default comparer for the key type.\n  remarks: The default concurrency level is the default concurrency multiplier (DEFAULT_CONCURRENCY_MULTIPLIER) times the number of CPUs. The higher the default concurrency multiplier is, the more concurrent write operations can take place without interference and blocking. Higher multiplier values also cause operations that require all locks (for example, table resizing, `ToArray` and `Count`) to become more expensive. The default concurrency multiplier is 4. The default capacity (DEFAULT_CAPACITY), which represents the initial number of buckets, is a trade-off between the size of a very small dictionary and the number of resizes when constructing a large dictionary. Also, the capacity should not be divisible by a small prime number. The default capacity is 31.\n  syntax:\n    content: public ConcurrentDictionary ();\n    parameters: []\n  overload: System.Collections.Concurrent.ConcurrentDictionary`2.#ctor*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Concurrent/ConcurrentDictionary`2.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.Concurrent.ConcurrentDictionary`2.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})\n  commentId: M:System.Collections.Concurrent.ConcurrentDictionary`2.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})\n  id: '#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})'\n  parent: System.Collections.Concurrent.ConcurrentDictionary`2\n  langs:\n  - csharp\n  name: ConcurrentDictionary<TKey,TValue>(IEnumerable<KeyValuePair<TKey,TValue>>)\n  nameWithType: ConcurrentDictionary<TKey,TValue>.ConcurrentDictionary<TKey,TValue>(IEnumerable<KeyValuePair<TKey,TValue>>)\n  fullName: ConcurrentDictionary<TKey,TValue>.ConcurrentDictionary<TKey,TValue>(IEnumerable<KeyValuePair<TKey,TValue>>)\n  type: Constructor\n  assemblies:\n  - System.Collections.Concurrent\n  - mscorlib\n  - netstandard\n  namespace: System.Collections.Concurrent\n  summary: Initializes a new instance of the <xref href=\"System.Collections.Concurrent.ConcurrentDictionary`2\"></xref> class that contains elements copied from the specified <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref>, has the default concurrency level, has the default initial capacity, and uses the default comparer for the key type.\n  syntax:\n    content: public ConcurrentDictionary (System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<TKey,TValue>> collection);\n    parameters:\n    - id: collection\n      type: System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{TKey,TValue}}\n      description: The <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> whose elements are copied to the new <xref href=\"System.Collections.Concurrent.ConcurrentDictionary`2\"></xref>.\n  overload: System.Collections.Concurrent.ConcurrentDictionary`2.#ctor*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>collection</code> or any of its keys is  `null`.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>collection</code> contains one or more duplicate keys.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Concurrent/ConcurrentDictionary`2.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.Concurrent.ConcurrentDictionary`2.#ctor(System.Collections.Generic.IEqualityComparer{`0})\n  commentId: M:System.Collections.Concurrent.ConcurrentDictionary`2.#ctor(System.Collections.Generic.IEqualityComparer{`0})\n  id: '#ctor(System.Collections.Generic.IEqualityComparer{`0})'\n  parent: System.Collections.Concurrent.ConcurrentDictionary`2\n  langs:\n  - csharp\n  name: ConcurrentDictionary<TKey,TValue>(IEqualityComparer<TKey>)\n  nameWithType: ConcurrentDictionary<TKey,TValue>.ConcurrentDictionary<TKey,TValue>(IEqualityComparer<TKey>)\n  fullName: ConcurrentDictionary<TKey,TValue>.ConcurrentDictionary<TKey,TValue>(IEqualityComparer<TKey>)\n  type: Constructor\n  assemblies:\n  - System.Collections.Concurrent\n  - mscorlib\n  - netstandard\n  namespace: System.Collections.Concurrent\n  summary: Initializes a new instance of the <xref href=\"System.Collections.Concurrent.ConcurrentDictionary`2\"></xref> class that is empty, has the default concurrency level and capacity, and uses the specified <xref href=\"System.Collections.Generic.IEqualityComparer`1\"></xref>.\n  syntax:\n    content: public ConcurrentDictionary (System.Collections.Generic.IEqualityComparer<TKey> comparer);\n    parameters:\n    - id: comparer\n      type: System.Collections.Generic.IEqualityComparer{TKey}\n      description: The equality comparison implementation to use when comparing keys.\n  overload: System.Collections.Concurrent.ConcurrentDictionary`2.#ctor*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>comparer</code> is `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Concurrent/ConcurrentDictionary`2.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.Concurrent.ConcurrentDictionary`2.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}},System.Collections.Generic.IEqualityComparer{`0})\n  commentId: M:System.Collections.Concurrent.ConcurrentDictionary`2.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}},System.Collections.Generic.IEqualityComparer{`0})\n  id: '#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}},System.Collections.Generic.IEqualityComparer{`0})'\n  parent: System.Collections.Concurrent.ConcurrentDictionary`2\n  langs:\n  - csharp\n  name: ConcurrentDictionary<TKey,TValue>(IEnumerable<KeyValuePair<TKey,TValue>>, IEqualityComparer<TKey>)\n  nameWithType: ConcurrentDictionary<TKey,TValue>.ConcurrentDictionary<TKey,TValue>(IEnumerable<KeyValuePair<TKey,TValue>>, IEqualityComparer<TKey>)\n  fullName: ConcurrentDictionary<TKey,TValue>.ConcurrentDictionary<TKey,TValue>(IEnumerable<KeyValuePair<TKey,TValue>>, IEqualityComparer<TKey>)\n  type: Constructor\n  assemblies:\n  - System.Collections.Concurrent\n  - mscorlib\n  - netstandard\n  namespace: System.Collections.Concurrent\n  summary: Initializes a new instance of the <xref href=\"System.Collections.Concurrent.ConcurrentDictionary`2\"></xref> class that contains elements copied from the specified <xref href=\"System.Collections.IEnumerable\"></xref> has the default concurrency level, has the default initial capacity, and uses the specified  <xref href=\"System.Collections.Generic.IEqualityComparer`1\"></xref>.\n  syntax:\n    content: public ConcurrentDictionary (System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<TKey,TValue>> collection, System.Collections.Generic.IEqualityComparer<TKey> comparer);\n    parameters:\n    - id: collection\n      type: System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{TKey,TValue}}\n      description: The <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> whose elements are copied to the new <xref href=\"System.Collections.Concurrent.ConcurrentDictionary`2\"></xref>.\n    - id: comparer\n      type: System.Collections.Generic.IEqualityComparer{TKey}\n      description: The <xref href=\"System.Collections.Generic.IEqualityComparer`1\"></xref> implementation to use when comparing keys.\n  overload: System.Collections.Concurrent.ConcurrentDictionary`2.#ctor*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>collection</code> or <code>comparer</code> is `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Concurrent/ConcurrentDictionary`2.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.Concurrent.ConcurrentDictionary`2.#ctor(System.Int32,System.Int32)\n  commentId: M:System.Collections.Concurrent.ConcurrentDictionary`2.#ctor(System.Int32,System.Int32)\n  id: '#ctor(System.Int32,System.Int32)'\n  parent: System.Collections.Concurrent.ConcurrentDictionary`2\n  langs:\n  - csharp\n  name: ConcurrentDictionary<TKey,TValue>(Int32, Int32)\n  nameWithType: ConcurrentDictionary<TKey,TValue>.ConcurrentDictionary<TKey,TValue>(Int32, Int32)\n  fullName: ConcurrentDictionary<TKey,TValue>.ConcurrentDictionary<TKey,TValue>(Int32, Int32)\n  type: Constructor\n  assemblies:\n  - System.Collections.Concurrent\n  - mscorlib\n  - netstandard\n  namespace: System.Collections.Concurrent\n  summary: Initializes a new instance of the <xref href=\"System.Collections.Concurrent.ConcurrentDictionary`2\"></xref> class that is empty, has the specified concurrency level and capacity, and uses the default comparer for the key type.\n  syntax:\n    content: public ConcurrentDictionary (int concurrencyLevel, int capacity);\n    parameters:\n    - id: concurrencyLevel\n      type: System.Int32\n      description: The estimated number of threads that will update the <xref href=\"System.Collections.Concurrent.ConcurrentDictionary`2\"></xref> concurrently.\n    - id: capacity\n      type: System.Int32\n      description: The initial number of elements that the <xref href=\"System.Collections.Concurrent.ConcurrentDictionary`2\"></xref> can contain.\n  overload: System.Collections.Concurrent.ConcurrentDictionary`2.#ctor*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"<code>concurrencyLevel</code> is less than 1.  \\n  \\n -or-  \\n  \\n <code>capacity</code> is less than 0.\"\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Concurrent/ConcurrentDictionary`2.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.Concurrent.ConcurrentDictionary`2.#ctor(System.Int32,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}},System.Collections.Generic.IEqualityComparer{`0})\n  commentId: M:System.Collections.Concurrent.ConcurrentDictionary`2.#ctor(System.Int32,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}},System.Collections.Generic.IEqualityComparer{`0})\n  id: '#ctor(System.Int32,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}},System.Collections.Generic.IEqualityComparer{`0})'\n  parent: System.Collections.Concurrent.ConcurrentDictionary`2\n  langs:\n  - csharp\n  name: ConcurrentDictionary<TKey,TValue>(Int32, IEnumerable<KeyValuePair<TKey,TValue>>, IEqualityComparer<TKey>)\n  nameWithType: ConcurrentDictionary<TKey,TValue>.ConcurrentDictionary<TKey,TValue>(Int32, IEnumerable<KeyValuePair<TKey,TValue>>, IEqualityComparer<TKey>)\n  fullName: ConcurrentDictionary<TKey,TValue>.ConcurrentDictionary<TKey,TValue>(Int32, IEnumerable<KeyValuePair<TKey,TValue>>, IEqualityComparer<TKey>)\n  type: Constructor\n  assemblies:\n  - System.Collections.Concurrent\n  - mscorlib\n  - netstandard\n  namespace: System.Collections.Concurrent\n  summary: Initializes a new instance of the <xref href=\"System.Collections.Concurrent.ConcurrentDictionary`2\"></xref> class that contains elements copied from the specified <xref href=\"System.Collections.IEnumerable\"></xref>, and uses the specified <xref href=\"System.Collections.Generic.IEqualityComparer`1\"></xref>.\n  syntax:\n    content: public ConcurrentDictionary (int concurrencyLevel, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<TKey,TValue>> collection, System.Collections.Generic.IEqualityComparer<TKey> comparer);\n    parameters:\n    - id: concurrencyLevel\n      type: System.Int32\n      description: The estimated number of threads that will update the <xref href=\"System.Collections.Concurrent.ConcurrentDictionary`2\"></xref> concurrently.\n    - id: collection\n      type: System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{TKey,TValue}}\n      description: The <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> whose elements are copied to the new <xref href=\"System.Collections.Concurrent.ConcurrentDictionary`2\"></xref>.\n    - id: comparer\n      type: System.Collections.Generic.IEqualityComparer{TKey}\n      description: The <xref href=\"System.Collections.Generic.IEqualityComparer`1\"></xref> implementation to use when comparing keys.\n  overload: System.Collections.Concurrent.ConcurrentDictionary`2.#ctor*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>collection</code> or <code>comparer</code> is `null`.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>concurrencyLevel</code> is less than 1.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>collection</code> contains one or more duplicate keys.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Concurrent/ConcurrentDictionary`2.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.Concurrent.ConcurrentDictionary`2.#ctor(System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})\n  commentId: M:System.Collections.Concurrent.ConcurrentDictionary`2.#ctor(System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})\n  id: '#ctor(System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})'\n  parent: System.Collections.Concurrent.ConcurrentDictionary`2\n  langs:\n  - csharp\n  name: ConcurrentDictionary<TKey,TValue>(Int32, Int32, IEqualityComparer<TKey>)\n  nameWithType: ConcurrentDictionary<TKey,TValue>.ConcurrentDictionary<TKey,TValue>(Int32, Int32, IEqualityComparer<TKey>)\n  fullName: ConcurrentDictionary<TKey,TValue>.ConcurrentDictionary<TKey,TValue>(Int32, Int32, IEqualityComparer<TKey>)\n  type: Constructor\n  assemblies:\n  - System.Collections.Concurrent\n  - mscorlib\n  - netstandard\n  namespace: System.Collections.Concurrent\n  summary: Initializes a new instance of the <xref href=\"System.Collections.Concurrent.ConcurrentDictionary`2\"></xref> class that is empty, has the specified concurrency level, has the specified initial capacity, and uses the specified <xref href=\"System.Collections.Generic.IEqualityComparer`1\"></xref>.\n  syntax:\n    content: public ConcurrentDictionary (int concurrencyLevel, int capacity, System.Collections.Generic.IEqualityComparer<TKey> comparer);\n    parameters:\n    - id: concurrencyLevel\n      type: System.Int32\n      description: The estimated number of threads that will update the <xref href=\"System.Collections.Concurrent.ConcurrentDictionary`2\"></xref> concurrently.\n    - id: capacity\n      type: System.Int32\n      description: The initial number of elements that the <xref href=\"System.Collections.Concurrent.ConcurrentDictionary`2\"></xref> can contain.\n    - id: comparer\n      type: System.Collections.Generic.IEqualityComparer{TKey}\n      description: The <xref href=\"System.Collections.Generic.IEqualityComparer`1\"></xref> implementation to use when comparing keys.\n  overload: System.Collections.Concurrent.ConcurrentDictionary`2.#ctor*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>comparer</code> is `null`.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>concurrencyLevel</code> or <code>capacity</code> is less than 1.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Concurrent/ConcurrentDictionary`2.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.Concurrent.ConcurrentDictionary`2.AddOrUpdate(`0,System.Func{`0,`1},System.Func{`0,`1,`1})\n  commentId: M:System.Collections.Concurrent.ConcurrentDictionary`2.AddOrUpdate(`0,System.Func{`0,`1},System.Func{`0,`1,`1})\n  id: AddOrUpdate(`0,System.Func{`0,`1},System.Func{`0,`1,`1})\n  parent: System.Collections.Concurrent.ConcurrentDictionary`2\n  langs:\n  - csharp\n  name: AddOrUpdate(TKey, Func<TKey,TValue>, Func<TKey,TValue,TValue>)\n  nameWithType: ConcurrentDictionary<TKey,TValue>.AddOrUpdate(TKey, Func<TKey,TValue>, Func<TKey,TValue,TValue>)\n  fullName: ConcurrentDictionary<TKey,TValue>.AddOrUpdate(TKey, Func<TKey,TValue>, Func<TKey,TValue,TValue>)\n  type: Method\n  assemblies:\n  - System.Collections.Concurrent\n  - mscorlib\n  - netstandard\n  namespace: System.Collections.Concurrent\n  summary: Uses the specified functions to add a key/value pair to the <xref href=\"System.Collections.Concurrent.ConcurrentDictionary`2\"></xref> if the key does not already exist, or to update a key/value pair in the <xref href=\"System.Collections.Concurrent.ConcurrentDictionary`2\"></xref> if the key already exists.\n  remarks: If you call <xref:System.Collections.Concurrent.ConcurrentDictionary%602.AddOrUpdate%2A> simultaneously on different threads, `addValueFactory` may be called multiple times, but its key/value pair might not be added to the dictionary for every call.\n  syntax:\n    content: public TValue AddOrUpdate (TKey key, Func<TKey,TValue> addValueFactory, Func<TKey,TValue,TValue> updateValueFactory);\n    parameters:\n    - id: key\n      type: TKey\n      description: The key to be added or whose value should be updated\n    - id: addValueFactory\n      type: System.Func{TKey,TValue}\n      description: The function used to generate a value for an absent key\n    - id: updateValueFactory\n      type: System.Func{TKey,TValue,TValue}\n      description: The function used to generate a new value for an existing key based on the key's existing value\n    return:\n      type: TValue\n      description: The new value for the key. This will be either be the result of addValueFactory (if the key was absent) or the result of updateValueFactory (if the key was present).\n  overload: System.Collections.Concurrent.ConcurrentDictionary`2.AddOrUpdate*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>key</code>, <code>addValueFactory</code>, or <code>updateValueFactory</code> is `null`.\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: The dictionary already contains the maximum number of elements (<xref href=\"System.Int32.MaxValue\"></xref>).\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Concurrent/ConcurrentDictionary`2.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.Concurrent.ConcurrentDictionary`2.AddOrUpdate(`0,`1,System.Func{`0,`1,`1})\n  commentId: M:System.Collections.Concurrent.ConcurrentDictionary`2.AddOrUpdate(`0,`1,System.Func{`0,`1,`1})\n  id: AddOrUpdate(`0,`1,System.Func{`0,`1,`1})\n  parent: System.Collections.Concurrent.ConcurrentDictionary`2\n  langs:\n  - csharp\n  name: AddOrUpdate(TKey, TValue, Func<TKey,TValue,TValue>)\n  nameWithType: ConcurrentDictionary<TKey,TValue>.AddOrUpdate(TKey, TValue, Func<TKey,TValue,TValue>)\n  fullName: ConcurrentDictionary<TKey,TValue>.AddOrUpdate(TKey, TValue, Func<TKey,TValue,TValue>)\n  type: Method\n  assemblies:\n  - System.Collections.Concurrent\n  - mscorlib\n  - netstandard\n  namespace: System.Collections.Concurrent\n  summary: Adds a key/value pair to the <xref href=\"System.Collections.Concurrent.ConcurrentDictionary`2\"></xref> if the key does not already exist, or updates a key/value pair in the <xref href=\"System.Collections.Concurrent.ConcurrentDictionary`2\"></xref> by using the specified function if the key already exists.\n  remarks: ''\n  example:\n  - \"The following code example shows how to initialize an <xref:System.Collections.Concurrent.ConcurrentDictionary%602> and how to use the AddOrUpdate method to add an additional item to the collection, and update the existing items.  \\n  \\n [!code-csharp[System.Collections.ConcurrentColAddUpdate#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.collections.concurrentcoladdupdate/cs/program.cs#1)]\\n [!code-vb[System.Collections.ConcurrentColAddUpdate#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.collections.concurrentcoladdupdate/vb/module1.vb#1)]\"\n  syntax:\n    content: public TValue AddOrUpdate (TKey key, TValue addValue, Func<TKey,TValue,TValue> updateValueFactory);\n    parameters:\n    - id: key\n      type: TKey\n      description: The key to be added or whose value should be updated\n    - id: addValue\n      type: TValue\n      description: The value to be added for an absent key\n    - id: updateValueFactory\n      type: System.Func{TKey,TValue,TValue}\n      description: The function used to generate a new value for an existing key based on the key's existing value\n    return:\n      type: TValue\n      description: The new value for the key. This will be either be addValue (if the key was absent) or the result of updateValueFactory (if the key was present).\n  overload: System.Collections.Concurrent.ConcurrentDictionary`2.AddOrUpdate*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>key</code> or <code>updateValueFactory</code> is `null`.\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: The dictionary already contains the maximum number of elements (<xref href=\"System.Int32.MaxValue\"></xref>).\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Concurrent/ConcurrentDictionary`2.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.Concurrent.ConcurrentDictionary`2.AddOrUpdate``1(`0,System.Func{`0,``0,`1},System.Func{`0,`1,``0,`1},``0)\n  commentId: M:System.Collections.Concurrent.ConcurrentDictionary`2.AddOrUpdate``1(`0,System.Func{`0,``0,`1},System.Func{`0,`1,``0,`1},``0)\n  id: AddOrUpdate``1(`0,System.Func{`0,``0,`1},System.Func{`0,`1,``0,`1},``0)\n  parent: System.Collections.Concurrent.ConcurrentDictionary`2\n  langs:\n  - csharp\n  name: AddOrUpdate<TArg>(TKey, Func<TKey,TArg,TValue>, Func<TKey,TValue,TArg,TValue>, TArg)\n  nameWithType: ConcurrentDictionary<TKey,TValue>.AddOrUpdate<TArg>(TKey, Func<TKey,TArg,TValue>, Func<TKey,TValue,TArg,TValue>, TArg)\n  fullName: ConcurrentDictionary<TKey,TValue>.AddOrUpdate<TArg>(TKey, Func<TKey,TArg,TValue>, Func<TKey,TValue,TArg,TValue>, TArg)\n  type: Method\n  assemblies:\n  - System.Collections.Concurrent\n  namespace: System.Collections.Concurrent\n  syntax:\n    content: public TValue AddOrUpdate<TArg> (TKey key, Func<TKey,TArg,TValue> addValueFactory, Func<TKey,TValue,TArg,TValue> updateValueFactory, TArg factoryArgument);\n    parameters:\n    - id: key\n      type: TKey\n      description: ''\n    - id: addValueFactory\n      type: System.Func{TKey,TArg,TValue}\n      description: ''\n    - id: updateValueFactory\n      type: System.Func{TKey,TValue,TArg,TValue}\n      description: ''\n    - id: factoryArgument\n      type: TArg\n      description: ''\n    typeParameters:\n    - id: TArg\n      description: ''\n    return:\n      type: TValue\n      description: ''\n  overload: System.Collections.Concurrent.ConcurrentDictionary`2.AddOrUpdate``1*\n  exceptions: []\n  version:\n  - netcore-2.0\n  monikers:\n  - netcore-2.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Concurrent/ConcurrentDictionary`2.xml\n- uid: System.Collections.Concurrent.ConcurrentDictionary`2.Clear\n  commentId: M:System.Collections.Concurrent.ConcurrentDictionary`2.Clear\n  id: Clear\n  parent: System.Collections.Concurrent.ConcurrentDictionary`2\n  langs:\n  - csharp\n  name: Clear()\n  nameWithType: ConcurrentDictionary<TKey,TValue>.Clear()\n  fullName: ConcurrentDictionary<TKey,TValue>.Clear()\n  type: Method\n  assemblies:\n  - System.Collections.Concurrent\n  - mscorlib\n  - netstandard\n  namespace: System.Collections.Concurrent\n  summary: Removes all keys and values from the <xref href=\"System.Collections.Concurrent.ConcurrentDictionary`2\"></xref>.\n  syntax:\n    content: public void Clear ();\n    parameters: []\n  overload: System.Collections.Concurrent.ConcurrentDictionary`2.Clear*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Concurrent/ConcurrentDictionary`2.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.Concurrent.ConcurrentDictionary`2.ContainsKey(`0)\n  commentId: M:System.Collections.Concurrent.ConcurrentDictionary`2.ContainsKey(`0)\n  id: ContainsKey(`0)\n  parent: System.Collections.Concurrent.ConcurrentDictionary`2\n  langs:\n  - csharp\n  name: ContainsKey(TKey)\n  nameWithType: ConcurrentDictionary<TKey,TValue>.ContainsKey(TKey)\n  fullName: ConcurrentDictionary<TKey,TValue>.ContainsKey(TKey)\n  type: Method\n  assemblies:\n  - System.Collections.Concurrent\n  - mscorlib\n  - netstandard\n  namespace: System.Collections.Concurrent\n  summary: Determines whether the <xref href=\"System.Collections.Concurrent.ConcurrentDictionary`2\"></xref> contains the specified key.\n  syntax:\n    content: public bool ContainsKey (TKey key);\n    parameters:\n    - id: key\n      type: TKey\n      description: The key to locate in the <xref href=\"System.Collections.Concurrent.ConcurrentDictionary`2\"></xref>.\n    return:\n      type: System.Boolean\n      description: '`true` if the <xref href=\"System.Collections.Concurrent.ConcurrentDictionary`2\"></xref> contains an element with the specified key; otherwise, `false`.'\n  overload: System.Collections.Concurrent.ConcurrentDictionary`2.ContainsKey*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>key</code> is `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Concurrent/ConcurrentDictionary`2.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.Concurrent.ConcurrentDictionary`2.Count\n  commentId: P:System.Collections.Concurrent.ConcurrentDictionary`2.Count\n  id: Count\n  parent: System.Collections.Concurrent.ConcurrentDictionary`2\n  langs:\n  - csharp\n  name: Count\n  nameWithType: ConcurrentDictionary<TKey,TValue>.Count\n  fullName: ConcurrentDictionary<TKey,TValue>.Count\n  type: Property\n  assemblies:\n  - System.Collections.Concurrent\n  - mscorlib\n  - netstandard\n  namespace: System.Collections.Concurrent\n  summary: Gets the number of key/value pairs contained in the <xref href=\"System.Collections.Concurrent.ConcurrentDictionary`2\"></xref>.\n  remarks: This property has snapshot semantics and represents the number of items in the <xref:System.Collections.Concurrent.ConcurrentDictionary%602?displayProperty=fullName> at the moment when the property was accessed.\n  syntax:\n    content: public int Count { get; }\n    return:\n      type: System.Int32\n      description: The number of key/value pairs contained in the <xref href=\"System.Collections.Concurrent.ConcurrentDictionary`2\"></xref>.\n  overload: System.Collections.Concurrent.ConcurrentDictionary`2.Count*\n  exceptions:\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: The dictionary already contains the maximum number of elements (<xref href=\"System.Int32.MaxValue\"></xref>).\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Concurrent/ConcurrentDictionary`2.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.Concurrent.ConcurrentDictionary`2.GetEnumerator\n  commentId: M:System.Collections.Concurrent.ConcurrentDictionary`2.GetEnumerator\n  id: GetEnumerator\n  parent: System.Collections.Concurrent.ConcurrentDictionary`2\n  langs:\n  - csharp\n  name: GetEnumerator()\n  nameWithType: ConcurrentDictionary<TKey,TValue>.GetEnumerator()\n  fullName: ConcurrentDictionary<TKey,TValue>.GetEnumerator()\n  type: Method\n  assemblies:\n  - System.Collections.Concurrent\n  - mscorlib\n  - netstandard\n  namespace: System.Collections.Concurrent\n  summary: Returns an enumerator that iterates through the <xref href=\"System.Collections.Concurrent.ConcurrentDictionary`2\"></xref>.\n  remarks: The enumerator returned from the dictionary is safe to use concurrently with reads and writes to the dictionary, however it does not represent a moment-in-time snapshot of the dictionary. The contents exposed through the enumerator may contain modifications made to the dictionary after <xref:System.Collections.Concurrent.ConcurrentDictionary%602.GetEnumerator%2A> was called.\n  syntax:\n    content: public System.Collections.Generic.IEnumerator<System.Collections.Generic.KeyValuePair<TKey,TValue>> GetEnumerator ();\n    parameters: []\n    return:\n      type: System.Collections.Generic.IEnumerator{System.Collections.Generic.KeyValuePair{TKey,TValue}}\n      description: An enumerator for the <xref href=\"System.Collections.Concurrent.ConcurrentDictionary`2\"></xref>.\n  overload: System.Collections.Concurrent.ConcurrentDictionary`2.GetEnumerator*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Concurrent/ConcurrentDictionary`2.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.Concurrent.ConcurrentDictionary`2.GetOrAdd(`0,System.Func{`0,`1})\n  commentId: M:System.Collections.Concurrent.ConcurrentDictionary`2.GetOrAdd(`0,System.Func{`0,`1})\n  id: GetOrAdd(`0,System.Func{`0,`1})\n  parent: System.Collections.Concurrent.ConcurrentDictionary`2\n  langs:\n  - csharp\n  name: GetOrAdd(TKey, Func<TKey,TValue>)\n  nameWithType: ConcurrentDictionary<TKey,TValue>.GetOrAdd(TKey, Func<TKey,TValue>)\n  fullName: ConcurrentDictionary<TKey,TValue>.GetOrAdd(TKey, Func<TKey,TValue>)\n  type: Method\n  assemblies:\n  - System.Collections.Concurrent\n  - mscorlib\n  - netstandard\n  namespace: System.Collections.Concurrent\n  summary: Adds a key/value pair to the <xref href=\"System.Collections.Concurrent.ConcurrentDictionary`2\"></xref> by using the specified function if the key does not already exist, or returns the existing value if the key exists.\n  remarks: \"Since a key/value can be inserted by another thread while `valueFactory` is generating a value, you cannot trust that just because `valueFactory` executed, its produced value will be inserted into the dictionary and returned. If you call <xref:System.Collections.Concurrent.ConcurrentDictionary%602.GetOrAdd%2A> simultaneously on different threads, `valueFactory` may be called multiple times, but only one key/value pair will be added to the dictionary. \\n \\n The return value depends on the presence of the key in the dictionary and whether a key/value is inserted by another thread after <xref:System.Collections.Concurrent.ConcurrentDictionary%602.GetOrAdd%2A> is called but before `valueFactory` generates a value:\\n\\n | Scenario | Return value |\\n | -------- | ------------ |\\n | The key is already in the dictionary. | The existing value is returned. |\\n | The key is not in the dictionary. `valueFactory` generates a value. On rechecking for the key, no key is found. | The key/value is inserted into the dictionary, and the value is returned. |\\n | The key is not in the dictionary. `valueFactory` generates a value. While `valueFactory` is generating the value, a different thread inserts a value for the key. After `valueFactory` executes and upon rechecking for the key, the key inserted by the other thread is found. | The value inserted by the other thread is returned. |\"\n  syntax:\n    content: public TValue GetOrAdd (TKey key, Func<TKey,TValue> valueFactory);\n    parameters:\n    - id: key\n      type: TKey\n      description: The key of the element to add.\n    - id: valueFactory\n      type: System.Func{TKey,TValue}\n      description: The function used to generate a value for the key.\n    return:\n      type: TValue\n      description: The value for the key.\n  overload: System.Collections.Concurrent.ConcurrentDictionary`2.GetOrAdd*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>key</code> or <code>valueFactory</code> is `null`.\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: The dictionary already contains the maximum number of elements (<xref href=\"System.Int32.MaxValue\"></xref>).\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Concurrent/ConcurrentDictionary`2.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.Concurrent.ConcurrentDictionary`2.GetOrAdd(`0,`1)\n  commentId: M:System.Collections.Concurrent.ConcurrentDictionary`2.GetOrAdd(`0,`1)\n  id: GetOrAdd(`0,`1)\n  parent: System.Collections.Concurrent.ConcurrentDictionary`2\n  langs:\n  - csharp\n  name: GetOrAdd(TKey, TValue)\n  nameWithType: ConcurrentDictionary<TKey,TValue>.GetOrAdd(TKey, TValue)\n  fullName: ConcurrentDictionary<TKey,TValue>.GetOrAdd(TKey, TValue)\n  type: Method\n  assemblies:\n  - System.Collections.Concurrent\n  - mscorlib\n  - netstandard\n  namespace: System.Collections.Concurrent\n  summary: Adds a key/value pair to the <xref href=\"System.Collections.Concurrent.ConcurrentDictionary`2\"></xref> if the key does not already exist.\n  syntax:\n    content: public TValue GetOrAdd (TKey key, TValue value);\n    parameters:\n    - id: key\n      type: TKey\n      description: The key of the element to add.\n    - id: value\n      type: TValue\n      description: The value to be added, if the key does not already exist.\n    return:\n      type: TValue\n      description: The value for the key. This will be either the existing value for the key if the key is already in the dictionary, or the new value if the key was not in the dictionary.\n  overload: System.Collections.Concurrent.ConcurrentDictionary`2.GetOrAdd*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>key</code> is `null`.\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: The dictionary already contains the maximum number of elements (<xref href=\"System.Int32.MaxValue\"></xref>).\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Concurrent/ConcurrentDictionary`2.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.Concurrent.ConcurrentDictionary`2.GetOrAdd``1(`0,System.Func{`0,``0,`1},``0)\n  commentId: M:System.Collections.Concurrent.ConcurrentDictionary`2.GetOrAdd``1(`0,System.Func{`0,``0,`1},``0)\n  id: GetOrAdd``1(`0,System.Func{`0,``0,`1},``0)\n  parent: System.Collections.Concurrent.ConcurrentDictionary`2\n  langs:\n  - csharp\n  name: GetOrAdd<TArg>(TKey, Func<TKey,TArg,TValue>, TArg)\n  nameWithType: ConcurrentDictionary<TKey,TValue>.GetOrAdd<TArg>(TKey, Func<TKey,TArg,TValue>, TArg)\n  fullName: ConcurrentDictionary<TKey,TValue>.GetOrAdd<TArg>(TKey, Func<TKey,TArg,TValue>, TArg)\n  type: Method\n  assemblies:\n  - System.Collections.Concurrent\n  namespace: System.Collections.Concurrent\n  syntax:\n    content: public TValue GetOrAdd<TArg> (TKey key, Func<TKey,TArg,TValue> valueFactory, TArg factoryArgument);\n    parameters:\n    - id: key\n      type: TKey\n      description: ''\n    - id: valueFactory\n      type: System.Func{TKey,TArg,TValue}\n      description: ''\n    - id: factoryArgument\n      type: TArg\n      description: ''\n    typeParameters:\n    - id: TArg\n      description: ''\n    return:\n      type: TValue\n      description: ''\n  overload: System.Collections.Concurrent.ConcurrentDictionary`2.GetOrAdd``1*\n  exceptions: []\n  version:\n  - netcore-2.0\n  monikers:\n  - netcore-2.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Concurrent/ConcurrentDictionary`2.xml\n- uid: System.Collections.Concurrent.ConcurrentDictionary`2.IsEmpty\n  commentId: P:System.Collections.Concurrent.ConcurrentDictionary`2.IsEmpty\n  id: IsEmpty\n  parent: System.Collections.Concurrent.ConcurrentDictionary`2\n  langs:\n  - csharp\n  name: IsEmpty\n  nameWithType: ConcurrentDictionary<TKey,TValue>.IsEmpty\n  fullName: ConcurrentDictionary<TKey,TValue>.IsEmpty\n  type: Property\n  assemblies:\n  - System.Collections.Concurrent\n  - mscorlib\n  - netstandard\n  namespace: System.Collections.Concurrent\n  summary: Gets a value that indicates whether the <xref href=\"System.Collections.Concurrent.ConcurrentDictionary`2\"></xref> is empty.\n  syntax:\n    content: public bool IsEmpty { get; }\n    return:\n      type: System.Boolean\n      description: '`true` if the <xref href=\"System.Collections.Concurrent.ConcurrentDictionary`2\"></xref> is empty; otherwise, `false`.'\n  overload: System.Collections.Concurrent.ConcurrentDictionary`2.IsEmpty*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Concurrent/ConcurrentDictionary`2.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.Concurrent.ConcurrentDictionary`2.Item(`0)\n  commentId: P:System.Collections.Concurrent.ConcurrentDictionary`2.Item(`0)\n  id: Item(`0)\n  parent: System.Collections.Concurrent.ConcurrentDictionary`2\n  langs:\n  - csharp\n  name: Item(TKey)\n  nameWithType: ConcurrentDictionary<TKey,TValue>.Item(TKey)\n  fullName: ConcurrentDictionary<TKey,TValue>.Item(TKey)\n  type: Property\n  assemblies:\n  - System.Collections.Concurrent\n  - mscorlib\n  - netstandard\n  namespace: System.Collections.Concurrent\n  summary: Gets or sets the value associated with the specified key.\n  syntax:\n    content: public TValue this[TKey key] { get; set; }\n    parameters:\n    - id: key\n      type: TKey\n      description: The key of the value to get or set.\n    return:\n      type: TValue\n      description: The value of the key/value pair at the specified index.\n  overload: System.Collections.Concurrent.ConcurrentDictionary`2.Item*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>key</code> is  `null`.\n  - type: System.Collections.Generic.KeyNotFoundException\n    commentId: T:System.Collections.Generic.KeyNotFoundException\n    description: The property is retrieved and <code>key</code> does not exist in the collection.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Concurrent/ConcurrentDictionary`2.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.Concurrent.ConcurrentDictionary`2.Keys\n  commentId: P:System.Collections.Concurrent.ConcurrentDictionary`2.Keys\n  id: Keys\n  parent: System.Collections.Concurrent.ConcurrentDictionary`2\n  langs:\n  - csharp\n  name: Keys\n  nameWithType: ConcurrentDictionary<TKey,TValue>.Keys\n  fullName: ConcurrentDictionary<TKey,TValue>.Keys\n  type: Property\n  assemblies:\n  - System.Collections.Concurrent\n  - mscorlib\n  - netstandard\n  namespace: System.Collections.Concurrent\n  summary: Gets a collection containing the keys in the <xref href=\"System.Collections.Generic.Dictionary`2\"></xref>.\n  syntax:\n    content: public System.Collections.Generic.ICollection<TKey> Keys { get; }\n    return:\n      type: System.Collections.Generic.ICollection{TKey}\n      description: A collection of keys in the <xref href=\"System.Collections.Generic.Dictionary`2\"></xref>.\n  overload: System.Collections.Concurrent.ConcurrentDictionary`2.Keys*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Concurrent/ConcurrentDictionary`2.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.Concurrent.ConcurrentDictionary`2.ToArray\n  commentId: M:System.Collections.Concurrent.ConcurrentDictionary`2.ToArray\n  id: ToArray\n  parent: System.Collections.Concurrent.ConcurrentDictionary`2\n  langs:\n  - csharp\n  name: ToArray()\n  nameWithType: ConcurrentDictionary<TKey,TValue>.ToArray()\n  fullName: ConcurrentDictionary<TKey,TValue>.ToArray()\n  type: Method\n  assemblies:\n  - System.Collections.Concurrent\n  - mscorlib\n  - netstandard\n  namespace: System.Collections.Concurrent\n  summary: Copies the key and value pairs stored in the <xref href=\"System.Collections.Concurrent.ConcurrentDictionary`2\"></xref> to a new array.\n  syntax:\n    content: public System.Collections.Generic.KeyValuePair<TKey,TValue>[] ToArray ();\n    parameters: []\n    return:\n      type: System.Collections.Generic.KeyValuePair{TKey,TValue}[]\n      description: A new array containing a snapshot of key and value pairs copied from the <xref href=\"System.Collections.Concurrent.ConcurrentDictionary`2\"></xref>.\n  overload: System.Collections.Concurrent.ConcurrentDictionary`2.ToArray*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Concurrent/ConcurrentDictionary`2.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.Concurrent.ConcurrentDictionary`2.TryAdd(`0,`1)\n  commentId: M:System.Collections.Concurrent.ConcurrentDictionary`2.TryAdd(`0,`1)\n  id: TryAdd(`0,`1)\n  parent: System.Collections.Concurrent.ConcurrentDictionary`2\n  langs:\n  - csharp\n  name: TryAdd(TKey, TValue)\n  nameWithType: ConcurrentDictionary<TKey,TValue>.TryAdd(TKey, TValue)\n  fullName: ConcurrentDictionary<TKey,TValue>.TryAdd(TKey, TValue)\n  type: Method\n  assemblies:\n  - System.Collections.Concurrent\n  - mscorlib\n  - netstandard\n  namespace: System.Collections.Concurrent\n  summary: Attempts to add the specified key and value to the <xref href=\"System.Collections.Concurrent.ConcurrentDictionary`2\"></xref>.\n  remarks: This method returns `false` if the key already exists. Use the <xref:System.Collections.Concurrent.ConcurrentDictionary%602.TryUpdate%2A> or <xref:System.Collections.Concurrent.ConcurrentDictionary%602.AddOrUpdate%2A> method to update the value in case a key already exists.\n  example:\n  - \"The following example shows how to call the <xref:System.Collections.Concurrent.ConcurrentDictionary%602.TryAdd%2A?displayProperty=fullName>method:  \\n  \\n [!code-csharp[System.Collections.Concurrent.ConcurrentDictionary#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.collections.concurrent.concurrentdictionary/cs/concdictionary.cs#2)]\\n [!code-vb[System.Collections.Concurrent.ConcurrentDictionary#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.collections.concurrent.concurrentdictionary/vb/concdictionary.vb#2)]\"\n  syntax:\n    content: public bool TryAdd (TKey key, TValue value);\n    parameters:\n    - id: key\n      type: TKey\n      description: The key of the element to add.\n    - id: value\n      type: TValue\n      description: The value of the element to add. The value can be  `null` for reference types.\n    return:\n      type: System.Boolean\n      description: '`true` if the key/value pair was added to the <xref href=\"System.Collections.Concurrent.ConcurrentDictionary`2\"></xref> successfully; `false` if the key already exists.'\n  overload: System.Collections.Concurrent.ConcurrentDictionary`2.TryAdd*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>key</code> is  `null`.\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: The dictionary already contains the maximum number of elements (<xref href=\"System.Int32.MaxValue\"></xref>).\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Concurrent/ConcurrentDictionary`2.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.Concurrent.ConcurrentDictionary`2.TryGetValue(`0,`1@)\n  commentId: M:System.Collections.Concurrent.ConcurrentDictionary`2.TryGetValue(`0,`1@)\n  id: TryGetValue(`0,`1@)\n  parent: System.Collections.Concurrent.ConcurrentDictionary`2\n  langs:\n  - csharp\n  name: TryGetValue(TKey, TValue)\n  nameWithType: ConcurrentDictionary<TKey,TValue>.TryGetValue(TKey, TValue)\n  fullName: ConcurrentDictionary<TKey,TValue>.TryGetValue(TKey, TValue)\n  type: Method\n  assemblies:\n  - System.Collections.Concurrent\n  - mscorlib\n  - netstandard\n  namespace: System.Collections.Concurrent\n  summary: Attempts to get the value associated with the specified key from the <xref href=\"System.Collections.Concurrent.ConcurrentDictionary`2\"></xref>.\n  syntax:\n    content: public bool TryGetValue (TKey key, out TValue value);\n    parameters:\n    - id: key\n      type: TKey\n      description: The key of the value to get.\n    - id: value\n      type: TValue\n      description: When this method returns, contains the object from the <xref href=\"System.Collections.Concurrent.ConcurrentDictionary`2\"></xref> that has the specified key, or the default value of the type if the operation failed.\n    return:\n      type: System.Boolean\n      description: '`true` if the key was found in the <xref href=\"System.Collections.Concurrent.ConcurrentDictionary`2\"></xref>; otherwise, `false`.'\n  overload: System.Collections.Concurrent.ConcurrentDictionary`2.TryGetValue*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>key</code> is  `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Concurrent/ConcurrentDictionary`2.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.Concurrent.ConcurrentDictionary`2.TryRemove(`0,`1@)\n  commentId: M:System.Collections.Concurrent.ConcurrentDictionary`2.TryRemove(`0,`1@)\n  id: TryRemove(`0,`1@)\n  parent: System.Collections.Concurrent.ConcurrentDictionary`2\n  langs:\n  - csharp\n  name: TryRemove(TKey, TValue)\n  nameWithType: ConcurrentDictionary<TKey,TValue>.TryRemove(TKey, TValue)\n  fullName: ConcurrentDictionary<TKey,TValue>.TryRemove(TKey, TValue)\n  type: Method\n  assemblies:\n  - System.Collections.Concurrent\n  - mscorlib\n  - netstandard\n  namespace: System.Collections.Concurrent\n  summary: Attempts to remove and return the value that has the specified key from the <xref href=\"System.Collections.Concurrent.ConcurrentDictionary`2\"></xref>.\n  remarks: ''\n  example:\n  - \"The following example shows how to call the <xref:System.Collections.Concurrent.ConcurrentDictionary%602.TryRemove%2A?displayProperty=fullName> method:  \\n  \\n [!code-csharp[System.Collections.Concurrent.ConcurrentDictionary#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.collections.concurrent.concurrentdictionary/cs/concdictionary.cs#2)]\\n [!code-vb[System.Collections.Concurrent.ConcurrentDictionary#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.collections.concurrent.concurrentdictionary/vb/concdictionary.vb#2)]\"\n  syntax:\n    content: public bool TryRemove (TKey key, out TValue value);\n    parameters:\n    - id: key\n      type: TKey\n      description: The key of the element to remove and return.\n    - id: value\n      type: TValue\n      description: When this method returns, contains the object removed from the <xref href=\"System.Collections.Concurrent.ConcurrentDictionary`2\"></xref>, or the default value of  the `TValue` type if <code>key</code> does not exist.\n    return:\n      type: System.Boolean\n      description: '`true` if the object was removed successfully; otherwise, `false`.'\n  overload: System.Collections.Concurrent.ConcurrentDictionary`2.TryRemove*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>key</code> is  `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Concurrent/ConcurrentDictionary`2.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.Concurrent.ConcurrentDictionary`2.TryUpdate(`0,`1,`1)\n  commentId: M:System.Collections.Concurrent.ConcurrentDictionary`2.TryUpdate(`0,`1,`1)\n  id: TryUpdate(`0,`1,`1)\n  parent: System.Collections.Concurrent.ConcurrentDictionary`2\n  langs:\n  - csharp\n  name: TryUpdate(TKey, TValue, TValue)\n  nameWithType: ConcurrentDictionary<TKey,TValue>.TryUpdate(TKey, TValue, TValue)\n  fullName: ConcurrentDictionary<TKey,TValue>.TryUpdate(TKey, TValue, TValue)\n  type: Method\n  assemblies:\n  - System.Collections.Concurrent\n  - mscorlib\n  - netstandard\n  namespace: System.Collections.Concurrent\n  summary: Compares the existing value for the specified key with a specified value, and if they are equal, updates the key with a third value.\n  remarks: ''\n  example:\n  - \"The following example shows how to call the <xref:System.Collections.Concurrent.ConcurrentDictionary%602.TryUpdate%2A> method:  \\n  \\n [!code-csharp[System.Collections.Concurrent.ConcurrentDictionary#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.collections.concurrent.concurrentdictionary/cs/concdictionary.cs#2)]\\n [!code-vb[System.Collections.Concurrent.ConcurrentDictionary#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.collections.concurrent.concurrentdictionary/vb/concdictionary.vb#2)]\"\n  syntax:\n    content: public bool TryUpdate (TKey key, TValue newValue, TValue comparisonValue);\n    parameters:\n    - id: key\n      type: TKey\n      description: The key whose value is compared with <code>comparisonValue</code> and possibly replaced.\n    - id: newValue\n      type: TValue\n      description: The value that replaces the value of the element that has the specified <code>key</code> if the comparison results in equality.\n    - id: comparisonValue\n      type: TValue\n      description: The value that is compared to the value of the element that has the specified <code>key</code>.\n    return:\n      type: System.Boolean\n      description: '`true` if the value with <code>key</code> was equal to <code>comparisonValue</code> and was replaced with <code>newValue</code>; otherwise, `false`.'\n  overload: System.Collections.Concurrent.ConcurrentDictionary`2.TryUpdate*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>key</code> is `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Concurrent/ConcurrentDictionary`2.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.Concurrent.ConcurrentDictionary`2.Values\n  commentId: P:System.Collections.Concurrent.ConcurrentDictionary`2.Values\n  id: Values\n  parent: System.Collections.Concurrent.ConcurrentDictionary`2\n  langs:\n  - csharp\n  name: Values\n  nameWithType: ConcurrentDictionary<TKey,TValue>.Values\n  fullName: ConcurrentDictionary<TKey,TValue>.Values\n  type: Property\n  assemblies:\n  - System.Collections.Concurrent\n  - mscorlib\n  - netstandard\n  namespace: System.Collections.Concurrent\n  summary: Gets a collection that contains the values in the <xref href=\"System.Collections.Generic.Dictionary`2\"></xref>.\n  syntax:\n    content: public System.Collections.Generic.ICollection<TValue> Values { get; }\n    return:\n      type: System.Collections.Generic.ICollection{TValue}\n      description: A collection that contains the values in the <xref href=\"System.Collections.Generic.Dictionary`2\"></xref>.\n  overload: System.Collections.Concurrent.ConcurrentDictionary`2.Values*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Concurrent/ConcurrentDictionary`2.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#Add(System.Collections.Generic.KeyValuePair{`0,`1})\n  commentId: M:System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#Generic#ICollection<System#Collections#Generic#KeyValuePair<TKey,TValue>>#Add(System.Collections.Generic.KeyValuePair{`0,`1})\n  id: System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#Add(System.Collections.Generic.KeyValuePair{`0,`1})\n  isEii: true\n  parent: System.Collections.Concurrent.ConcurrentDictionary`2\n  langs:\n  - csharp\n  name: ICollection<KeyValuePair<TKey,TValue>>.Add(KeyValuePair<TKey,TValue>)\n  nameWithType: ConcurrentDictionary<TKey,TValue>.ICollection<KeyValuePair<TKey,TValue>>.Add(KeyValuePair<TKey,TValue>)\n  fullName: ConcurrentDictionary<TKey,TValue>.ICollection<KeyValuePair<TKey,TValue>>.Add(KeyValuePair<TKey,TValue>)\n  type: Method\n  assemblies:\n  - System.Collections.Concurrent\n  - mscorlib\n  - netstandard\n  namespace: System.Collections.Concurrent\n  syntax:\n    content: void ICollection<KeyValuePair<TKey,TValue>>.Add (System.Collections.Generic.KeyValuePair<TKey,TValue> keyValuePair);\n    parameters:\n    - id: keyValuePair\n      type: System.Collections.Generic.KeyValuePair`2\n      description: ''\n  overload: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#Add*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Concurrent/ConcurrentDictionary`2.xml\n- uid: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#Contains(System.Collections.Generic.KeyValuePair{`0,`1})\n  commentId: M:System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#Generic#ICollection<System#Collections#Generic#KeyValuePair<TKey,TValue>>#Contains(System.Collections.Generic.KeyValuePair{`0,`1})\n  id: System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#Contains(System.Collections.Generic.KeyValuePair{`0,`1})\n  isEii: true\n  parent: System.Collections.Concurrent.ConcurrentDictionary`2\n  langs:\n  - csharp\n  name: ICollection<KeyValuePair<TKey,TValue>>.Contains(KeyValuePair<TKey,TValue>)\n  nameWithType: ConcurrentDictionary<TKey,TValue>.ICollection<KeyValuePair<TKey,TValue>>.Contains(KeyValuePair<TKey,TValue>)\n  fullName: ConcurrentDictionary<TKey,TValue>.ICollection<KeyValuePair<TKey,TValue>>.Contains(KeyValuePair<TKey,TValue>)\n  type: Method\n  assemblies:\n  - System.Collections.Concurrent\n  - mscorlib\n  - netstandard\n  namespace: System.Collections.Concurrent\n  syntax:\n    content: bool ICollection<KeyValuePair<TKey,TValue>>.Contains (System.Collections.Generic.KeyValuePair<TKey,TValue> keyValuePair);\n    parameters:\n    - id: keyValuePair\n      type: System.Collections.Generic.KeyValuePair`2\n      description: ''\n    return:\n      type: System.Boolean\n      description: ''\n  overload: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#Contains*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Concurrent/ConcurrentDictionary`2.xml\n- uid: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)\n  commentId: M:System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#Generic#ICollection<System#Collections#Generic#KeyValuePair<TKey,TValue>>#CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)\n  id: System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)\n  isEii: true\n  parent: System.Collections.Concurrent.ConcurrentDictionary`2\n  langs:\n  - csharp\n  name: ICollection<KeyValuePair<TKey,TValue>>.CopyTo(KeyValuePair<TKey,TValue>[], Int32)\n  nameWithType: ConcurrentDictionary<TKey,TValue>.ICollection<KeyValuePair<TKey,TValue>>.CopyTo(KeyValuePair<TKey,TValue>[], Int32)\n  fullName: ConcurrentDictionary<TKey,TValue>.ICollection<KeyValuePair<TKey,TValue>>.CopyTo(KeyValuePair<TKey,TValue>[], Int32)\n  type: Method\n  assemblies:\n  - System.Collections.Concurrent\n  - mscorlib\n  - netstandard\n  namespace: System.Collections.Concurrent\n  syntax:\n    content: void ICollection<KeyValuePair<TKey,TValue>>.CopyTo (System.Collections.Generic.KeyValuePair<TKey,TValue>[] array, int index);\n    parameters:\n    - id: array\n      type: System.Collections.Generic.KeyValuePair{TKey,TValue}[]\n      description: ''\n    - id: index\n      type: System.Int32\n      description: ''\n  overload: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#CopyTo*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Concurrent/ConcurrentDictionary`2.xml\n- uid: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#IsReadOnly\n  commentId: P:System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#Generic#ICollection<System#Collections#Generic#KeyValuePair<TKey,TValue>>#IsReadOnly\n  id: System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#IsReadOnly\n  isEii: true\n  parent: System.Collections.Concurrent.ConcurrentDictionary`2\n  langs:\n  - csharp\n  name: ICollection<KeyValuePair<TKey,TValue>>.IsReadOnly\n  nameWithType: ConcurrentDictionary<TKey,TValue>.ICollection<KeyValuePair<TKey,TValue>>.IsReadOnly\n  fullName: ConcurrentDictionary<TKey,TValue>.ICollection<KeyValuePair<TKey,TValue>>.IsReadOnly\n  type: Property\n  assemblies:\n  - System.Collections.Concurrent\n  - mscorlib\n  - netstandard\n  namespace: System.Collections.Concurrent\n  syntax:\n    content: bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.IsReadOnly { get; }\n    return:\n      type: System.Boolean\n      description: ''\n  overload: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#IsReadOnly*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Concurrent/ConcurrentDictionary`2.xml\n- uid: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#Remove(System.Collections.Generic.KeyValuePair{`0,`1})\n  commentId: M:System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#Generic#ICollection<System#Collections#Generic#KeyValuePair<TKey,TValue>>#Remove(System.Collections.Generic.KeyValuePair{`0,`1})\n  id: System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#Remove(System.Collections.Generic.KeyValuePair{`0,`1})\n  isEii: true\n  parent: System.Collections.Concurrent.ConcurrentDictionary`2\n  langs:\n  - csharp\n  name: ICollection<KeyValuePair<TKey,TValue>>.Remove(KeyValuePair<TKey,TValue>)\n  nameWithType: ConcurrentDictionary<TKey,TValue>.ICollection<KeyValuePair<TKey,TValue>>.Remove(KeyValuePair<TKey,TValue>)\n  fullName: ConcurrentDictionary<TKey,TValue>.ICollection<KeyValuePair<TKey,TValue>>.Remove(KeyValuePair<TKey,TValue>)\n  type: Method\n  assemblies:\n  - System.Collections.Concurrent\n  - mscorlib\n  - netstandard\n  namespace: System.Collections.Concurrent\n  syntax:\n    content: bool ICollection<KeyValuePair<TKey,TValue>>.Remove (System.Collections.Generic.KeyValuePair<TKey,TValue> keyValuePair);\n    parameters:\n    - id: keyValuePair\n      type: System.Collections.Generic.KeyValuePair`2\n      description: ''\n    return:\n      type: System.Boolean\n      description: ''\n  overload: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#Remove*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Concurrent/ConcurrentDictionary`2.xml\n- uid: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#Generic#IDictionary{TKey,TValue}#Add(`0,`1)\n  commentId: M:System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#Generic#IDictionary<TKey,TValue>#Add(`0,`1)\n  id: System#Collections#Generic#IDictionary{TKey,TValue}#Add(`0,`1)\n  isEii: true\n  parent: System.Collections.Concurrent.ConcurrentDictionary`2\n  langs:\n  - csharp\n  name: IDictionary<TKey,TValue>.Add(TKey, TValue)\n  nameWithType: ConcurrentDictionary<TKey,TValue>.IDictionary<TKey,TValue>.Add(TKey, TValue)\n  fullName: ConcurrentDictionary<TKey,TValue>.IDictionary<TKey,TValue>.Add(TKey, TValue)\n  type: Method\n  assemblies:\n  - System.Collections.Concurrent\n  - mscorlib\n  - netstandard\n  namespace: System.Collections.Concurrent\n  syntax:\n    content: void IDictionary<TKey,TValue>.Add (TKey key, TValue value);\n    parameters:\n    - id: key\n      type: TKey\n      description: ''\n    - id: value\n      type: TValue\n      description: ''\n  overload: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#Generic#IDictionary{TKey,TValue}#Add*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Concurrent/ConcurrentDictionary`2.xml\n- uid: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#Generic#IDictionary{TKey,TValue}#Remove(`0)\n  commentId: M:System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#Generic#IDictionary<TKey,TValue>#Remove(`0)\n  id: System#Collections#Generic#IDictionary{TKey,TValue}#Remove(`0)\n  isEii: true\n  parent: System.Collections.Concurrent.ConcurrentDictionary`2\n  langs:\n  - csharp\n  name: IDictionary<TKey,TValue>.Remove(TKey)\n  nameWithType: ConcurrentDictionary<TKey,TValue>.IDictionary<TKey,TValue>.Remove(TKey)\n  fullName: ConcurrentDictionary<TKey,TValue>.IDictionary<TKey,TValue>.Remove(TKey)\n  type: Method\n  assemblies:\n  - System.Collections.Concurrent\n  - mscorlib\n  - netstandard\n  namespace: System.Collections.Concurrent\n  syntax:\n    content: bool IDictionary<TKey,TValue>.Remove (TKey key);\n    parameters:\n    - id: key\n      type: TKey\n      description: ''\n    return:\n      type: System.Boolean\n      description: ''\n  overload: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#Generic#IDictionary{TKey,TValue}#Remove*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Concurrent/ConcurrentDictionary`2.xml\n- uid: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#Generic#IReadOnlyDictionary{TKey,TValue}#Keys\n  commentId: P:System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#Generic#IReadOnlyDictionary<TKey,TValue>#Keys\n  id: System#Collections#Generic#IReadOnlyDictionary{TKey,TValue}#Keys\n  isEii: true\n  parent: System.Collections.Concurrent.ConcurrentDictionary`2\n  langs:\n  - csharp\n  name: IReadOnlyDictionary<TKey,TValue>.Keys\n  nameWithType: ConcurrentDictionary<TKey,TValue>.IReadOnlyDictionary<TKey,TValue>.Keys\n  fullName: ConcurrentDictionary<TKey,TValue>.IReadOnlyDictionary<TKey,TValue>.Keys\n  type: Property\n  assemblies:\n  - System.Collections.Concurrent\n  - mscorlib\n  - netstandard\n  namespace: System.Collections.Concurrent\n  syntax:\n    content: System.Collections.Generic.IEnumerable<TKey> System.Collections.Generic.IReadOnlyDictionary<TKey,TValue>.Keys { get; }\n    return:\n      type: System.Collections.Generic.IEnumerable{TKey}\n      description: ''\n  overload: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#Generic#IReadOnlyDictionary{TKey,TValue}#Keys*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Concurrent/ConcurrentDictionary`2.xml\n- uid: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#Generic#IReadOnlyDictionary{TKey,TValue}#Values\n  commentId: P:System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#Generic#IReadOnlyDictionary<TKey,TValue>#Values\n  id: System#Collections#Generic#IReadOnlyDictionary{TKey,TValue}#Values\n  isEii: true\n  parent: System.Collections.Concurrent.ConcurrentDictionary`2\n  langs:\n  - csharp\n  name: IReadOnlyDictionary<TKey,TValue>.Values\n  nameWithType: ConcurrentDictionary<TKey,TValue>.IReadOnlyDictionary<TKey,TValue>.Values\n  fullName: ConcurrentDictionary<TKey,TValue>.IReadOnlyDictionary<TKey,TValue>.Values\n  type: Property\n  assemblies:\n  - System.Collections.Concurrent\n  - mscorlib\n  - netstandard\n  namespace: System.Collections.Concurrent\n  syntax:\n    content: System.Collections.Generic.IEnumerable<TValue> System.Collections.Generic.IReadOnlyDictionary<TKey,TValue>.Values { get; }\n    return:\n      type: System.Collections.Generic.IEnumerable{TValue}\n      description: ''\n  overload: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#Generic#IReadOnlyDictionary{TKey,TValue}#Values*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Concurrent/ConcurrentDictionary`2.xml\n- uid: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#ICollection#CopyTo(System.Array,System.Int32)\n  commentId: M:System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#ICollection#CopyTo(System.Array,System.Int32)\n  id: System#Collections#ICollection#CopyTo(System.Array,System.Int32)\n  isEii: true\n  parent: System.Collections.Concurrent.ConcurrentDictionary`2\n  langs:\n  - csharp\n  name: ICollection.CopyTo(Array, Int32)\n  nameWithType: ConcurrentDictionary<TKey,TValue>.ICollection.CopyTo(Array, Int32)\n  fullName: ConcurrentDictionary<TKey,TValue>.ICollection.CopyTo(Array, Int32)\n  type: Method\n  assemblies:\n  - System.Collections.Concurrent\n  - mscorlib\n  - netstandard\n  namespace: System.Collections.Concurrent\n  summary: Copies the elements of the <xref href=\"System.Collections.ICollection\"></xref> to an array, starting at the specified array index.\n  syntax:\n    content: void ICollection.CopyTo (Array array, int index);\n    parameters:\n    - id: array\n      type: System.Array\n      description: The one-dimensional array that is the destination of the elements copied from the <xref href=\"System.Collections.ICollection\"></xref>. The array must have zero-based indexing.\n    - id: index\n      type: System.Int32\n      description: The zero-based index in <code>array</code> at which copying begins.\n  overload: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#ICollection#CopyTo*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>array</code> is `null`.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>index</code> is less than 0.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"<code>index</code> is equal to or greater than the length of the <code>array</code>.  \\n  \\n -or-  \\n  \\n The number of elements in the source <xref href=\\\"System.Collections.ICollection\\\"></xref> is greater than the available space from <code>index</code> to the end of the destination <code>array</code>.\"\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Concurrent/ConcurrentDictionary`2.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#ICollection#IsSynchronized\n  commentId: P:System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#ICollection#IsSynchronized\n  id: System#Collections#ICollection#IsSynchronized\n  isEii: true\n  parent: System.Collections.Concurrent.ConcurrentDictionary`2\n  langs:\n  - csharp\n  name: ICollection.IsSynchronized\n  nameWithType: ConcurrentDictionary<TKey,TValue>.ICollection.IsSynchronized\n  fullName: ConcurrentDictionary<TKey,TValue>.ICollection.IsSynchronized\n  type: Property\n  assemblies:\n  - System.Collections.Concurrent\n  - mscorlib\n  - netstandard\n  namespace: System.Collections.Concurrent\n  summary: Gets a value indicating whether access to the <xref href=\"System.Collections.ICollection\"></xref> is synchronized with the SyncRoot.\n  syntax:\n    content: bool System.Collections.ICollection.IsSynchronized { get; }\n    return:\n      type: System.Boolean\n      description: '`true` if access to the <xref href=\"System.Collections.ICollection\"></xref> is synchronized (thread safe); otherwise, `false`. For <xref href=\"System.Collections.Concurrent.ConcurrentDictionary`2\"></xref> this property always returns **false**.'\n  overload: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#ICollection#IsSynchronized*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Concurrent/ConcurrentDictionary`2.xml\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#ICollection#SyncRoot\n  commentId: P:System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#ICollection#SyncRoot\n  id: System#Collections#ICollection#SyncRoot\n  isEii: true\n  parent: System.Collections.Concurrent.ConcurrentDictionary`2\n  langs:\n  - csharp\n  name: ICollection.SyncRoot\n  nameWithType: ConcurrentDictionary<TKey,TValue>.ICollection.SyncRoot\n  fullName: ConcurrentDictionary<TKey,TValue>.ICollection.SyncRoot\n  type: Property\n  assemblies:\n  - System.Collections.Concurrent\n  - mscorlib\n  - netstandard\n  namespace: System.Collections.Concurrent\n  summary: Gets an object that can be used to synchronize access to the <xref href=\"System.Collections.ICollection\"></xref>. This property is not supported.\n  syntax:\n    content: object System.Collections.ICollection.SyncRoot { get; }\n    return:\n      type: System.Object\n      description: Always returns null.\n  overload: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#ICollection#SyncRoot*\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: This property is not supported.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Concurrent/ConcurrentDictionary`2.xml\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#IDictionary#Add(System.Object,System.Object)\n  commentId: M:System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#IDictionary#Add(System.Object,System.Object)\n  id: System#Collections#IDictionary#Add(System.Object,System.Object)\n  isEii: true\n  parent: System.Collections.Concurrent.ConcurrentDictionary`2\n  langs:\n  - csharp\n  name: IDictionary.Add(Object, Object)\n  nameWithType: ConcurrentDictionary<TKey,TValue>.IDictionary.Add(Object, Object)\n  fullName: ConcurrentDictionary<TKey,TValue>.IDictionary.Add(Object, Object)\n  type: Method\n  assemblies:\n  - System.Collections.Concurrent\n  - mscorlib\n  - netstandard\n  namespace: System.Collections.Concurrent\n  summary: Adds the specified key and value to the dictionary.\n  syntax:\n    content: void IDictionary.Add (object key, object value);\n    parameters:\n    - id: key\n      type: System.Object\n      description: The object to use as the key.\n    - id: value\n      type: System.Object\n      description: The object to use as the value.\n  overload: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#IDictionary#Add*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>key</code> is `null`.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"<code>key</code> is of a type that is not assignable to the key type  of the <xref href=\\\"System.Collections.Generic.Dictionary`2\\\"></xref>.  \\n  \\n -or-  \\n  \\n <code>value</code> is of a type that is not assignable to the type of values in the <xref href=\\\"System.Collections.Generic.Dictionary`2\\\"></xref>.  \\n  \\n -or-  \\n  \\n A value with the same key already exists in the <xref href=\\\"System.Collections.Generic.Dictionary`2\\\"></xref>.\"\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: The dictionary already contains the maximum number of elements (<xref href=\"System.Int32.MaxValue\"></xref>).\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Concurrent/ConcurrentDictionary`2.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#IDictionary#Contains(System.Object)\n  commentId: M:System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#IDictionary#Contains(System.Object)\n  id: System#Collections#IDictionary#Contains(System.Object)\n  isEii: true\n  parent: System.Collections.Concurrent.ConcurrentDictionary`2\n  langs:\n  - csharp\n  name: IDictionary.Contains(Object)\n  nameWithType: ConcurrentDictionary<TKey,TValue>.IDictionary.Contains(Object)\n  fullName: ConcurrentDictionary<TKey,TValue>.IDictionary.Contains(Object)\n  type: Method\n  assemblies:\n  - System.Collections.Concurrent\n  - mscorlib\n  - netstandard\n  namespace: System.Collections.Concurrent\n  summary: Gets whether the <xref href=\"System.Collections.Generic.IDictionary`2\"></xref> contains an element with the specified key.\n  syntax:\n    content: bool IDictionary.Contains (object key);\n    parameters:\n    - id: key\n      type: System.Object\n      description: The key to locate in the <xref href=\"System.Collections.Generic.IDictionary`2\"></xref>.\n    return:\n      type: System.Boolean\n      description: '`true` if the <xref href=\"System.Collections.Generic.IDictionary`2\"></xref> contains an element with the specified key; otherwise, `false`.'\n  overload: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#IDictionary#Contains*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>key</code> is `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Concurrent/ConcurrentDictionary`2.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#IDictionary#GetEnumerator\n  commentId: M:System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#IDictionary#GetEnumerator\n  id: System#Collections#IDictionary#GetEnumerator\n  isEii: true\n  parent: System.Collections.Concurrent.ConcurrentDictionary`2\n  langs:\n  - csharp\n  name: IDictionary.GetEnumerator()\n  nameWithType: ConcurrentDictionary<TKey,TValue>.IDictionary.GetEnumerator()\n  fullName: ConcurrentDictionary<TKey,TValue>.IDictionary.GetEnumerator()\n  type: Method\n  assemblies:\n  - System.Collections.Concurrent\n  - mscorlib\n  - netstandard\n  namespace: System.Collections.Concurrent\n  summary: Provides a <xref href=\"System.Collections.IDictionaryEnumerator\"></xref> for the <xref href=\"System.Collections.Generic.IDictionary`2\"></xref>.\n  syntax:\n    content: System.Collections.IDictionaryEnumerator IDictionary.GetEnumerator ();\n    parameters: []\n    return:\n      type: System.Collections.IDictionaryEnumerator\n      description: A <xref href=\"System.Collections.IDictionaryEnumerator\"></xref> for the <xref href=\"System.Collections.Generic.IDictionary`2\"></xref>.\n  overload: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#IDictionary#GetEnumerator*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Concurrent/ConcurrentDictionary`2.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#IDictionary#IsFixedSize\n  commentId: P:System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#IDictionary#IsFixedSize\n  id: System#Collections#IDictionary#IsFixedSize\n  isEii: true\n  parent: System.Collections.Concurrent.ConcurrentDictionary`2\n  langs:\n  - csharp\n  name: IDictionary.IsFixedSize\n  nameWithType: ConcurrentDictionary<TKey,TValue>.IDictionary.IsFixedSize\n  fullName: ConcurrentDictionary<TKey,TValue>.IDictionary.IsFixedSize\n  type: Property\n  assemblies:\n  - System.Collections.Concurrent\n  - mscorlib\n  - netstandard\n  namespace: System.Collections.Concurrent\n  summary: Gets a value indicating whether the <xref href=\"System.Collections.Generic.IDictionary`2\"></xref> has a fixed size.\n  syntax:\n    content: bool System.Collections.IDictionary.IsFixedSize { get; }\n    return:\n      type: System.Boolean\n      description: '`true` if the <xref href=\"System.Collections.Generic.IDictionary`2\"></xref> has a fixed size; otherwise, `false`. For <xref href=\"System.Collections.Concurrent.ConcurrentDictionary`2\"></xref>, this property always returns `false`.'\n  overload: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#IDictionary#IsFixedSize*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Concurrent/ConcurrentDictionary`2.xml\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#IDictionary#IsReadOnly\n  commentId: P:System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#IDictionary#IsReadOnly\n  id: System#Collections#IDictionary#IsReadOnly\n  isEii: true\n  parent: System.Collections.Concurrent.ConcurrentDictionary`2\n  langs:\n  - csharp\n  name: IDictionary.IsReadOnly\n  nameWithType: ConcurrentDictionary<TKey,TValue>.IDictionary.IsReadOnly\n  fullName: ConcurrentDictionary<TKey,TValue>.IDictionary.IsReadOnly\n  type: Property\n  assemblies:\n  - System.Collections.Concurrent\n  - mscorlib\n  - netstandard\n  namespace: System.Collections.Concurrent\n  summary: Gets a value indicating whether the <xref href=\"System.Collections.Generic.IDictionary`2\"></xref> is read-only.\n  syntax:\n    content: bool System.Collections.IDictionary.IsReadOnly { get; }\n    return:\n      type: System.Boolean\n      description: '`true` if the <xref href=\"System.Collections.Generic.IDictionary`2\"></xref> is read-only; otherwise, `false`. For <xref href=\"System.Collections.Concurrent.ConcurrentDictionary`2\"></xref>, this property always returns `false`.'\n  overload: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#IDictionary#IsReadOnly*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Concurrent/ConcurrentDictionary`2.xml\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#IDictionary#Item(System.Object)\n  commentId: P:System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#IDictionary#Item(System.Object)\n  id: System#Collections#IDictionary#Item(System.Object)\n  isEii: true\n  parent: System.Collections.Concurrent.ConcurrentDictionary`2\n  langs:\n  - csharp\n  name: IDictionary.Item(Object)\n  nameWithType: ConcurrentDictionary<TKey,TValue>.IDictionary.Item(Object)\n  fullName: ConcurrentDictionary<TKey,TValue>.IDictionary.Item(Object)\n  type: Property\n  assemblies:\n  - System.Collections.Concurrent\n  - mscorlib\n  - netstandard\n  namespace: System.Collections.Concurrent\n  summary: Gets or sets the value associated with the specified key.\n  syntax:\n    content: object System.Collections.IDictionary.Item[object key] { get; set; }\n    parameters:\n    - id: key\n      type: System.Object\n      description: The key of the value to get or set.\n    return:\n      type: System.Object\n      description: The value associated with the specified key, or  `null` if <code>key</code> is not in the dictionary or <code>key</code> is of a type that is not assignable to the key type of the <xref href=\"System.Collections.Concurrent.ConcurrentDictionary`2\"></xref>.\n  overload: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#IDictionary#Item*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>key</code> is  `null`.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: A value is being assigned, and <code>key</code> is of a type that is not assignable to the key type or the value type of the <xref href=\"System.Collections.Concurrent.ConcurrentDictionary`2\"></xref>.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Concurrent/ConcurrentDictionary`2.xml\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#IDictionary#Keys\n  commentId: P:System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#IDictionary#Keys\n  id: System#Collections#IDictionary#Keys\n  isEii: true\n  parent: System.Collections.Concurrent.ConcurrentDictionary`2\n  langs:\n  - csharp\n  name: IDictionary.Keys\n  nameWithType: ConcurrentDictionary<TKey,TValue>.IDictionary.Keys\n  fullName: ConcurrentDictionary<TKey,TValue>.IDictionary.Keys\n  type: Property\n  assemblies:\n  - System.Collections.Concurrent\n  - mscorlib\n  - netstandard\n  namespace: System.Collections.Concurrent\n  summary: Gets an <xref href=\"System.Collections.ICollection\"></xref> that contains the keys of the  <xref href=\"System.Collections.Generic.IDictionary`2\"></xref>.\n  syntax:\n    content: System.Collections.ICollection System.Collections.IDictionary.Keys { get; }\n    return:\n      type: System.Collections.ICollection\n      description: An interface that contains the keys of the <xref href=\"System.Collections.Generic.IDictionary`2\"></xref>.\n  overload: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#IDictionary#Keys*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Concurrent/ConcurrentDictionary`2.xml\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#IDictionary#Remove(System.Object)\n  commentId: M:System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#IDictionary#Remove(System.Object)\n  id: System#Collections#IDictionary#Remove(System.Object)\n  isEii: true\n  parent: System.Collections.Concurrent.ConcurrentDictionary`2\n  langs:\n  - csharp\n  name: IDictionary.Remove(Object)\n  nameWithType: ConcurrentDictionary<TKey,TValue>.IDictionary.Remove(Object)\n  fullName: ConcurrentDictionary<TKey,TValue>.IDictionary.Remove(Object)\n  type: Method\n  assemblies:\n  - System.Collections.Concurrent\n  - mscorlib\n  - netstandard\n  namespace: System.Collections.Concurrent\n  summary: Removes the element with the specified key from the <xref href=\"System.Collections.IDictionary\"></xref>.\n  syntax:\n    content: void IDictionary.Remove (object key);\n    parameters:\n    - id: key\n      type: System.Object\n      description: The key of the element to remove.\n  overload: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#IDictionary#Remove*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>key</code> is `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Concurrent/ConcurrentDictionary`2.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#IDictionary#Values\n  commentId: P:System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#IDictionary#Values\n  id: System#Collections#IDictionary#Values\n  isEii: true\n  parent: System.Collections.Concurrent.ConcurrentDictionary`2\n  langs:\n  - csharp\n  name: IDictionary.Values\n  nameWithType: ConcurrentDictionary<TKey,TValue>.IDictionary.Values\n  fullName: ConcurrentDictionary<TKey,TValue>.IDictionary.Values\n  type: Property\n  assemblies:\n  - System.Collections.Concurrent\n  - mscorlib\n  - netstandard\n  namespace: System.Collections.Concurrent\n  summary: Gets an <xref href=\"System.Collections.ICollection\"></xref> that contains the values in the <xref href=\"System.Collections.IDictionary\"></xref>.\n  syntax:\n    content: System.Collections.ICollection System.Collections.IDictionary.Values { get; }\n    return:\n      type: System.Collections.ICollection\n      description: An interface that contains the values in the <xref href=\"System.Collections.IDictionary\"></xref>.\n  overload: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#IDictionary#Values*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Concurrent/ConcurrentDictionary`2.xml\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#IEnumerable#GetEnumerator\n  commentId: M:System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#IEnumerable#GetEnumerator\n  id: System#Collections#IEnumerable#GetEnumerator\n  isEii: true\n  parent: System.Collections.Concurrent.ConcurrentDictionary`2\n  langs:\n  - csharp\n  name: IEnumerable.GetEnumerator()\n  nameWithType: ConcurrentDictionary<TKey,TValue>.IEnumerable.GetEnumerator()\n  fullName: ConcurrentDictionary<TKey,TValue>.IEnumerable.GetEnumerator()\n  type: Method\n  assemblies:\n  - System.Collections.Concurrent\n  - mscorlib\n  - netstandard\n  namespace: System.Collections.Concurrent\n  summary: Returns an enumerator that iterates through the <xref href=\"System.Collections.Concurrent.ConcurrentDictionary`2\"></xref>.\n  remarks: The enumerator returned from the dictionary is safe to use concurrently with reads and writes to the dictionary, however it does not represent a moment-in-time snapshot of the dictionary. The contents exposed through the enumerator may contain modifications made to the dictionary after <xref:System.Collections.Concurrent.ConcurrentDictionary%602.GetEnumerator%2A> was called.\n  syntax:\n    content: System.Collections.IEnumerator IEnumerable.GetEnumerator ();\n    parameters: []\n    return:\n      type: System.Collections.IEnumerator\n      description: An enumerator for the <xref href=\"System.Collections.Concurrent.ConcurrentDictionary`2\"></xref>.\n  overload: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#IEnumerable#GetEnumerator*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Concurrent/ConcurrentDictionary`2.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\nreferences:\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.ArgumentNullException\n  parent: System\n  isExternal: false\n  name: ArgumentNullException\n  nameWithType: ArgumentNullException\n  fullName: System.ArgumentNullException\n- uid: System.ArgumentException\n  parent: System\n  isExternal: false\n  name: ArgumentException\n  nameWithType: ArgumentException\n  fullName: System.ArgumentException\n- uid: System.ArgumentOutOfRangeException\n  parent: System\n  isExternal: false\n  name: ArgumentOutOfRangeException\n  nameWithType: ArgumentOutOfRangeException\n  fullName: System.ArgumentOutOfRangeException\n- uid: System.OverflowException\n  parent: System\n  isExternal: false\n  name: OverflowException\n  nameWithType: OverflowException\n  fullName: System.OverflowException\n- uid: System.Collections.Generic.KeyNotFoundException\n  parent: System.Collections.Generic\n  isExternal: false\n  name: KeyNotFoundException\n  nameWithType: KeyNotFoundException\n  fullName: System.Collections.Generic.KeyNotFoundException\n- uid: System.NotSupportedException\n  parent: System\n  isExternal: false\n  name: NotSupportedException\n  nameWithType: NotSupportedException\n  fullName: System.NotSupportedException\n- uid: System.Collections.Concurrent.ConcurrentDictionary`2.#ctor\n  parent: System.Collections.Concurrent.ConcurrentDictionary`2\n  isExternal: false\n  name: ConcurrentDictionary<TKey,TValue>()\n  nameWithType: ConcurrentDictionary<TKey,TValue>.ConcurrentDictionary<TKey,TValue>()\n  fullName: ConcurrentDictionary<TKey,TValue>.ConcurrentDictionary<TKey,TValue>()\n- uid: System.Collections.Concurrent.ConcurrentDictionary`2.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})\n  parent: System.Collections.Concurrent.ConcurrentDictionary`2\n  isExternal: false\n  name: ConcurrentDictionary<TKey,TValue>(IEnumerable<KeyValuePair<TKey,TValue>>)\n  nameWithType: ConcurrentDictionary<TKey,TValue>.ConcurrentDictionary<TKey,TValue>(IEnumerable<KeyValuePair<TKey,TValue>>)\n  fullName: ConcurrentDictionary<TKey,TValue>.ConcurrentDictionary<TKey,TValue>(IEnumerable<KeyValuePair<TKey,TValue>>)\n- uid: System.Collections.Generic.IEnumerable`1\n  name: IEnumerable<T>\n  nameWithType: IEnumerable<T>\n  fullName: System.Collections.Generic.IEnumerable<T>\n- uid: System.Collections.Generic.KeyValuePair`2\n  name: KeyValuePair<TKey,TValue>\n  nameWithType: KeyValuePair<TKey,TValue>\n  fullName: System.Collections.Generic.KeyValuePair<TKey,TValue>\n- uid: TKey\n  name: TKey\n  nameWithType: TKey\n  fullName: TKey\n- uid: TValue\n  name: TValue\n  nameWithType: TValue\n  fullName: TValue\n- uid: System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{TKey,TValue}}\n  parent: System.Collections.Generic\n  isExternal: false\n  name: IEnumerable<KeyValuePair<TKey,TValue>>\n  nameWithType: IEnumerable<KeyValuePair<TKey,TValue>>\n  fullName: System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<TKey,TValue>>\n  spec.csharp:\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    nameWithType: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Collections.Generic.KeyValuePair`2\n    name: KeyValuePair\n    nameWithType: KeyValuePair\n    fullName: System.Collections.Generic.KeyValuePair\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: TKey\n    name: TKey\n    nameWithType: TKey\n    fullName: TKey\n  - name: ','\n    nameWithType: ','\n    fullName: ','\n  - uid: TValue\n    name: TValue\n    nameWithType: TValue\n    fullName: TValue\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Collections.Concurrent.ConcurrentDictionary`2.#ctor(System.Collections.Generic.IEqualityComparer{`0})\n  parent: System.Collections.Concurrent.ConcurrentDictionary`2\n  isExternal: false\n  name: ConcurrentDictionary<TKey,TValue>(IEqualityComparer<TKey>)\n  nameWithType: ConcurrentDictionary<TKey,TValue>.ConcurrentDictionary<TKey,TValue>(IEqualityComparer<TKey>)\n  fullName: ConcurrentDictionary<TKey,TValue>.ConcurrentDictionary<TKey,TValue>(IEqualityComparer<TKey>)\n- uid: System.Collections.Generic.IEqualityComparer`1\n  name: IEqualityComparer<T>\n  nameWithType: IEqualityComparer<T>\n  fullName: System.Collections.Generic.IEqualityComparer<T>\n- uid: System.Collections.Generic.IEqualityComparer{TKey}\n  parent: System.Collections.Generic\n  isExternal: false\n  name: IEqualityComparer<TKey>\n  nameWithType: IEqualityComparer<TKey>\n  fullName: System.Collections.Generic.IEqualityComparer<TKey>\n  spec.csharp:\n  - uid: System.Collections.Generic.IEqualityComparer`1\n    name: IEqualityComparer\n    nameWithType: IEqualityComparer\n    fullName: System.Collections.Generic.IEqualityComparer\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: TKey\n    name: TKey\n    nameWithType: TKey\n    fullName: TKey\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Collections.Concurrent.ConcurrentDictionary`2.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}},System.Collections.Generic.IEqualityComparer{`0})\n  parent: System.Collections.Concurrent.ConcurrentDictionary`2\n  isExternal: false\n  name: ConcurrentDictionary<TKey,TValue>(IEnumerable<KeyValuePair<TKey,TValue>>, IEqualityComparer<TKey>)\n  nameWithType: ConcurrentDictionary<TKey,TValue>.ConcurrentDictionary<TKey,TValue>(IEnumerable<KeyValuePair<TKey,TValue>>, IEqualityComparer<TKey>)\n  fullName: ConcurrentDictionary<TKey,TValue>.ConcurrentDictionary<TKey,TValue>(IEnumerable<KeyValuePair<TKey,TValue>>, IEqualityComparer<TKey>)\n- uid: System.Collections.Concurrent.ConcurrentDictionary`2.#ctor(System.Int32,System.Int32)\n  parent: System.Collections.Concurrent.ConcurrentDictionary`2\n  isExternal: false\n  name: ConcurrentDictionary<TKey,TValue>(Int32, Int32)\n  nameWithType: ConcurrentDictionary<TKey,TValue>.ConcurrentDictionary<TKey,TValue>(Int32, Int32)\n  fullName: ConcurrentDictionary<TKey,TValue>.ConcurrentDictionary<TKey,TValue>(Int32, Int32)\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Collections.Concurrent.ConcurrentDictionary`2.#ctor(System.Int32,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}},System.Collections.Generic.IEqualityComparer{`0})\n  parent: System.Collections.Concurrent.ConcurrentDictionary`2\n  isExternal: false\n  name: ConcurrentDictionary<TKey,TValue>(Int32, IEnumerable<KeyValuePair<TKey,TValue>>, IEqualityComparer<TKey>)\n  nameWithType: ConcurrentDictionary<TKey,TValue>.ConcurrentDictionary<TKey,TValue>(Int32, IEnumerable<KeyValuePair<TKey,TValue>>, IEqualityComparer<TKey>)\n  fullName: ConcurrentDictionary<TKey,TValue>.ConcurrentDictionary<TKey,TValue>(Int32, IEnumerable<KeyValuePair<TKey,TValue>>, IEqualityComparer<TKey>)\n- uid: System.Collections.Concurrent.ConcurrentDictionary`2.#ctor(System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})\n  parent: System.Collections.Concurrent.ConcurrentDictionary`2\n  isExternal: false\n  name: ConcurrentDictionary<TKey,TValue>(Int32, Int32, IEqualityComparer<TKey>)\n  nameWithType: ConcurrentDictionary<TKey,TValue>.ConcurrentDictionary<TKey,TValue>(Int32, Int32, IEqualityComparer<TKey>)\n  fullName: ConcurrentDictionary<TKey,TValue>.ConcurrentDictionary<TKey,TValue>(Int32, Int32, IEqualityComparer<TKey>)\n- uid: System.Collections.Concurrent.ConcurrentDictionary`2.AddOrUpdate(`0,System.Func{`0,`1},System.Func{`0,`1,`1})\n  parent: System.Collections.Concurrent.ConcurrentDictionary`2\n  isExternal: false\n  name: AddOrUpdate(TKey, Func<TKey,TValue>, Func<TKey,TValue,TValue>)\n  nameWithType: ConcurrentDictionary<TKey,TValue>.AddOrUpdate(TKey, Func<TKey,TValue>, Func<TKey,TValue,TValue>)\n  fullName: ConcurrentDictionary<TKey,TValue>.AddOrUpdate(TKey, Func<TKey,TValue>, Func<TKey,TValue,TValue>)\n- uid: System.Func`2\n  name: Func<T,TResult>\n  nameWithType: Func<T,TResult>\n  fullName: System.Func<T,TResult>\n- uid: System.Func{TKey,TValue}\n  parent: System\n  isExternal: false\n  name: Func<TKey,TValue>\n  nameWithType: Func<TKey,TValue>\n  fullName: System.Func<TKey,TValue>\n  spec.csharp:\n  - uid: System.Func`2\n    name: Func\n    nameWithType: Func\n    fullName: System.Func\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: TKey\n    name: TKey\n    nameWithType: TKey\n    fullName: TKey\n  - name: ','\n    nameWithType: ','\n    fullName: ','\n  - uid: TValue\n    name: TValue\n    nameWithType: TValue\n    fullName: TValue\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Func`3\n  name: Func<T1,T2,TResult>\n  nameWithType: Func<T1,T2,TResult>\n  fullName: System.Func<T1,T2,TResult>\n- uid: System.Func{TKey,TValue,TValue}\n  parent: System\n  isExternal: false\n  name: Func<TKey,TValue,TValue>\n  nameWithType: Func<TKey,TValue,TValue>\n  fullName: System.Func<TKey,TValue,TValue>\n  spec.csharp:\n  - uid: System.Func`3\n    name: Func\n    nameWithType: Func\n    fullName: System.Func\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: TKey\n    name: TKey\n    nameWithType: TKey\n    fullName: TKey\n  - name: ','\n    nameWithType: ','\n    fullName: ','\n  - uid: TValue\n    name: TValue\n    nameWithType: TValue\n    fullName: TValue\n  - name: ','\n    nameWithType: ','\n    fullName: ','\n  - uid: TValue\n    name: TValue\n    nameWithType: TValue\n    fullName: TValue\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Collections.Concurrent.ConcurrentDictionary`2.AddOrUpdate(`0,`1,System.Func{`0,`1,`1})\n  parent: System.Collections.Concurrent.ConcurrentDictionary`2\n  isExternal: false\n  name: AddOrUpdate(TKey, TValue, Func<TKey,TValue,TValue>)\n  nameWithType: ConcurrentDictionary<TKey,TValue>.AddOrUpdate(TKey, TValue, Func<TKey,TValue,TValue>)\n  fullName: ConcurrentDictionary<TKey,TValue>.AddOrUpdate(TKey, TValue, Func<TKey,TValue,TValue>)\n- uid: System.Collections.Concurrent.ConcurrentDictionary`2.AddOrUpdate``1(`0,System.Func{`0,``0,`1},System.Func{`0,`1,``0,`1},``0)\n  parent: System.Collections.Concurrent.ConcurrentDictionary`2\n  isExternal: false\n  name: AddOrUpdate<TArg>(TKey, Func<TKey,TArg,TValue>, Func<TKey,TValue,TArg,TValue>, TArg)\n  nameWithType: ConcurrentDictionary<TKey,TValue>.AddOrUpdate<TArg>(TKey, Func<TKey,TArg,TValue>, Func<TKey,TValue,TArg,TValue>, TArg)\n  fullName: ConcurrentDictionary<TKey,TValue>.AddOrUpdate<TArg>(TKey, Func<TKey,TArg,TValue>, Func<TKey,TValue,TArg,TValue>, TArg)\n- uid: TArg\n  name: TArg\n  nameWithType: TArg\n  fullName: TArg\n- uid: System.Func{TKey,TArg,TValue}\n  parent: System\n  isExternal: false\n  name: Func<TKey,TArg,TValue>\n  nameWithType: Func<TKey,TArg,TValue>\n  fullName: System.Func<TKey,TArg,TValue>\n  spec.csharp:\n  - uid: System.Func`3\n    name: Func\n    nameWithType: Func\n    fullName: System.Func\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: TKey\n    name: TKey\n    nameWithType: TKey\n    fullName: TKey\n  - name: ','\n    nameWithType: ','\n    fullName: ','\n  - uid: TArg\n    name: TArg\n    nameWithType: TArg\n    fullName: TArg\n  - name: ','\n    nameWithType: ','\n    fullName: ','\n  - uid: TValue\n    name: TValue\n    nameWithType: TValue\n    fullName: TValue\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Func`4\n  name: Func<T1,T2,T3,TResult>\n  nameWithType: Func<T1,T2,T3,TResult>\n  fullName: System.Func<T1,T2,T3,TResult>\n- uid: System.Func{TKey,TValue,TArg,TValue}\n  parent: System\n  isExternal: false\n  name: Func<TKey,TValue,TArg,TValue>\n  nameWithType: Func<TKey,TValue,TArg,TValue>\n  fullName: System.Func<TKey,TValue,TArg,TValue>\n  spec.csharp:\n  - uid: System.Func`4\n    name: Func\n    nameWithType: Func\n    fullName: System.Func\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: TKey\n    name: TKey\n    nameWithType: TKey\n    fullName: TKey\n  - name: ','\n    nameWithType: ','\n    fullName: ','\n  - uid: TValue\n    name: TValue\n    nameWithType: TValue\n    fullName: TValue\n  - name: ','\n    nameWithType: ','\n    fullName: ','\n  - uid: TArg\n    name: TArg\n    nameWithType: TArg\n    fullName: TArg\n  - name: ','\n    nameWithType: ','\n    fullName: ','\n  - uid: TValue\n    name: TValue\n    nameWithType: TValue\n    fullName: TValue\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Collections.Concurrent.ConcurrentDictionary`2.Clear\n  parent: System.Collections.Concurrent.ConcurrentDictionary`2\n  isExternal: false\n  name: Clear()\n  nameWithType: ConcurrentDictionary<TKey,TValue>.Clear()\n  fullName: ConcurrentDictionary<TKey,TValue>.Clear()\n- uid: System.Collections.Concurrent.ConcurrentDictionary`2.ContainsKey(`0)\n  parent: System.Collections.Concurrent.ConcurrentDictionary`2\n  isExternal: false\n  name: ContainsKey(TKey)\n  nameWithType: ConcurrentDictionary<TKey,TValue>.ContainsKey(TKey)\n  fullName: ConcurrentDictionary<TKey,TValue>.ContainsKey(TKey)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Collections.Concurrent.ConcurrentDictionary`2.Count\n  parent: System.Collections.Concurrent.ConcurrentDictionary`2\n  isExternal: false\n  name: Count\n  nameWithType: ConcurrentDictionary<TKey,TValue>.Count\n  fullName: ConcurrentDictionary<TKey,TValue>.Count\n- uid: System.Collections.Concurrent.ConcurrentDictionary`2.GetEnumerator\n  parent: System.Collections.Concurrent.ConcurrentDictionary`2\n  isExternal: false\n  name: GetEnumerator()\n  nameWithType: ConcurrentDictionary<TKey,TValue>.GetEnumerator()\n  fullName: ConcurrentDictionary<TKey,TValue>.GetEnumerator()\n- uid: System.Collections.Generic.IEnumerator`1\n  name: IEnumerator<T>\n  nameWithType: IEnumerator<T>\n  fullName: System.Collections.Generic.IEnumerator<T>\n- uid: System.Collections.Generic.IEnumerator{System.Collections.Generic.KeyValuePair{TKey,TValue}}\n  parent: System.Collections.Generic\n  isExternal: false\n  name: IEnumerator<KeyValuePair<TKey,TValue>>\n  nameWithType: IEnumerator<KeyValuePair<TKey,TValue>>\n  fullName: System.Collections.Generic.IEnumerator<System.Collections.Generic.KeyValuePair<TKey,TValue>>\n  spec.csharp:\n  - uid: System.Collections.Generic.IEnumerator`1\n    name: IEnumerator\n    nameWithType: IEnumerator\n    fullName: System.Collections.Generic.IEnumerator\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Collections.Generic.KeyValuePair`2\n    name: KeyValuePair\n    nameWithType: KeyValuePair\n    fullName: System.Collections.Generic.KeyValuePair\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: TKey\n    name: TKey\n    nameWithType: TKey\n    fullName: TKey\n  - name: ','\n    nameWithType: ','\n    fullName: ','\n  - uid: TValue\n    name: TValue\n    nameWithType: TValue\n    fullName: TValue\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Collections.Concurrent.ConcurrentDictionary`2.GetOrAdd(`0,System.Func{`0,`1})\n  parent: System.Collections.Concurrent.ConcurrentDictionary`2\n  isExternal: false\n  name: GetOrAdd(TKey, Func<TKey,TValue>)\n  nameWithType: ConcurrentDictionary<TKey,TValue>.GetOrAdd(TKey, Func<TKey,TValue>)\n  fullName: ConcurrentDictionary<TKey,TValue>.GetOrAdd(TKey, Func<TKey,TValue>)\n- uid: System.Collections.Concurrent.ConcurrentDictionary`2.GetOrAdd(`0,`1)\n  parent: System.Collections.Concurrent.ConcurrentDictionary`2\n  isExternal: false\n  name: GetOrAdd(TKey, TValue)\n  nameWithType: ConcurrentDictionary<TKey,TValue>.GetOrAdd(TKey, TValue)\n  fullName: ConcurrentDictionary<TKey,TValue>.GetOrAdd(TKey, TValue)\n- uid: System.Collections.Concurrent.ConcurrentDictionary`2.GetOrAdd``1(`0,System.Func{`0,``0,`1},``0)\n  parent: System.Collections.Concurrent.ConcurrentDictionary`2\n  isExternal: false\n  name: GetOrAdd<TArg>(TKey, Func<TKey,TArg,TValue>, TArg)\n  nameWithType: ConcurrentDictionary<TKey,TValue>.GetOrAdd<TArg>(TKey, Func<TKey,TArg,TValue>, TArg)\n  fullName: ConcurrentDictionary<TKey,TValue>.GetOrAdd<TArg>(TKey, Func<TKey,TArg,TValue>, TArg)\n- uid: System.Collections.Concurrent.ConcurrentDictionary`2.IsEmpty\n  parent: System.Collections.Concurrent.ConcurrentDictionary`2\n  isExternal: false\n  name: IsEmpty\n  nameWithType: ConcurrentDictionary<TKey,TValue>.IsEmpty\n  fullName: ConcurrentDictionary<TKey,TValue>.IsEmpty\n- uid: System.Collections.Concurrent.ConcurrentDictionary`2.Item(`0)\n  parent: System.Collections.Concurrent.ConcurrentDictionary`2\n  isExternal: false\n  name: Item(TKey)\n  nameWithType: ConcurrentDictionary<TKey,TValue>.Item(TKey)\n  fullName: ConcurrentDictionary<TKey,TValue>.Item(TKey)\n- uid: System.Collections.Concurrent.ConcurrentDictionary`2.Keys\n  parent: System.Collections.Concurrent.ConcurrentDictionary`2\n  isExternal: false\n  name: Keys\n  nameWithType: ConcurrentDictionary<TKey,TValue>.Keys\n  fullName: ConcurrentDictionary<TKey,TValue>.Keys\n- uid: System.Collections.Generic.ICollection`1\n  name: ICollection<T>\n  nameWithType: ICollection<T>\n  fullName: System.Collections.Generic.ICollection<T>\n- uid: System.Collections.Generic.ICollection{TKey}\n  parent: System.Collections.Generic\n  isExternal: false\n  name: ICollection<TKey>\n  nameWithType: ICollection<TKey>\n  fullName: System.Collections.Generic.ICollection<TKey>\n  spec.csharp:\n  - uid: System.Collections.Generic.ICollection`1\n    name: ICollection\n    nameWithType: ICollection\n    fullName: System.Collections.Generic.ICollection\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: TKey\n    name: TKey\n    nameWithType: TKey\n    fullName: TKey\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Collections.Concurrent.ConcurrentDictionary`2.ToArray\n  parent: System.Collections.Concurrent.ConcurrentDictionary`2\n  isExternal: false\n  name: ToArray()\n  nameWithType: ConcurrentDictionary<TKey,TValue>.ToArray()\n  fullName: ConcurrentDictionary<TKey,TValue>.ToArray()\n- uid: System.Collections.Generic.KeyValuePair{TKey,TValue}[]\n  parent: System.Collections.Generic\n  isExternal: false\n  name: KeyValuePair<TKey,TValue>[]\n  nameWithType: KeyValuePair<TKey,TValue>[]\n  fullName: System.Collections.Generic.KeyValuePair<TKey,TValue>[]\n  spec.csharp:\n  - uid: System.Collections.Generic.KeyValuePair`2\n    name: KeyValuePair\n    nameWithType: KeyValuePair\n    fullName: System.Collections.Generic.KeyValuePair\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: TKey\n    name: TKey\n    nameWithType: TKey\n    fullName: TKey\n  - name: ','\n    nameWithType: ','\n    fullName: ','\n  - uid: TValue\n    name: TValue\n    nameWithType: TValue\n    fullName: TValue\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Collections.Concurrent.ConcurrentDictionary`2.TryAdd(`0,`1)\n  parent: System.Collections.Concurrent.ConcurrentDictionary`2\n  isExternal: false\n  name: TryAdd(TKey, TValue)\n  nameWithType: ConcurrentDictionary<TKey,TValue>.TryAdd(TKey, TValue)\n  fullName: ConcurrentDictionary<TKey,TValue>.TryAdd(TKey, TValue)\n- uid: System.Collections.Concurrent.ConcurrentDictionary`2.TryGetValue(`0,`1@)\n  parent: System.Collections.Concurrent.ConcurrentDictionary`2\n  isExternal: false\n  name: TryGetValue(TKey, TValue)\n  nameWithType: ConcurrentDictionary<TKey,TValue>.TryGetValue(TKey, TValue)\n  fullName: ConcurrentDictionary<TKey,TValue>.TryGetValue(TKey, TValue)\n- uid: System.Collections.Concurrent.ConcurrentDictionary`2.TryRemove(`0,`1@)\n  parent: System.Collections.Concurrent.ConcurrentDictionary`2\n  isExternal: false\n  name: TryRemove(TKey, TValue)\n  nameWithType: ConcurrentDictionary<TKey,TValue>.TryRemove(TKey, TValue)\n  fullName: ConcurrentDictionary<TKey,TValue>.TryRemove(TKey, TValue)\n- uid: System.Collections.Concurrent.ConcurrentDictionary`2.TryUpdate(`0,`1,`1)\n  parent: System.Collections.Concurrent.ConcurrentDictionary`2\n  isExternal: false\n  name: TryUpdate(TKey, TValue, TValue)\n  nameWithType: ConcurrentDictionary<TKey,TValue>.TryUpdate(TKey, TValue, TValue)\n  fullName: ConcurrentDictionary<TKey,TValue>.TryUpdate(TKey, TValue, TValue)\n- uid: System.Collections.Concurrent.ConcurrentDictionary`2.Values\n  parent: System.Collections.Concurrent.ConcurrentDictionary`2\n  isExternal: false\n  name: Values\n  nameWithType: ConcurrentDictionary<TKey,TValue>.Values\n  fullName: ConcurrentDictionary<TKey,TValue>.Values\n- uid: System.Collections.Generic.ICollection{TValue}\n  parent: System.Collections.Generic\n  isExternal: false\n  name: ICollection<TValue>\n  nameWithType: ICollection<TValue>\n  fullName: System.Collections.Generic.ICollection<TValue>\n  spec.csharp:\n  - uid: System.Collections.Generic.ICollection`1\n    name: ICollection\n    nameWithType: ICollection\n    fullName: System.Collections.Generic.ICollection\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: TValue\n    name: TValue\n    nameWithType: TValue\n    fullName: TValue\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#Add(System.Collections.Generic.KeyValuePair{`0,`1})\n  parent: System.Collections.Concurrent.ConcurrentDictionary`2\n  isExternal: false\n  name: ICollection<KeyValuePair<TKey,TValue>>.Add(KeyValuePair<TKey,TValue>)\n  nameWithType: ConcurrentDictionary<TKey,TValue>.ICollection<KeyValuePair<TKey,TValue>>.Add(KeyValuePair<TKey,TValue>)\n  fullName: ConcurrentDictionary<TKey,TValue>.ICollection<KeyValuePair<TKey,TValue>>.Add(KeyValuePair<TKey,TValue>)\n- uid: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#Contains(System.Collections.Generic.KeyValuePair{`0,`1})\n  parent: System.Collections.Concurrent.ConcurrentDictionary`2\n  isExternal: false\n  name: ICollection<KeyValuePair<TKey,TValue>>.Contains(KeyValuePair<TKey,TValue>)\n  nameWithType: ConcurrentDictionary<TKey,TValue>.ICollection<KeyValuePair<TKey,TValue>>.Contains(KeyValuePair<TKey,TValue>)\n  fullName: ConcurrentDictionary<TKey,TValue>.ICollection<KeyValuePair<TKey,TValue>>.Contains(KeyValuePair<TKey,TValue>)\n- uid: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)\n  parent: System.Collections.Concurrent.ConcurrentDictionary`2\n  isExternal: false\n  name: ICollection<KeyValuePair<TKey,TValue>>.CopyTo(KeyValuePair<TKey,TValue>[], Int32)\n  nameWithType: ConcurrentDictionary<TKey,TValue>.ICollection<KeyValuePair<TKey,TValue>>.CopyTo(KeyValuePair<TKey,TValue>[], Int32)\n  fullName: ConcurrentDictionary<TKey,TValue>.ICollection<KeyValuePair<TKey,TValue>>.CopyTo(KeyValuePair<TKey,TValue>[], Int32)\n- uid: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#IsReadOnly\n  parent: System.Collections.Concurrent.ConcurrentDictionary`2\n  isExternal: false\n  name: ICollection<KeyValuePair<TKey,TValue>>.IsReadOnly\n  nameWithType: ConcurrentDictionary<TKey,TValue>.ICollection<KeyValuePair<TKey,TValue>>.IsReadOnly\n  fullName: ConcurrentDictionary<TKey,TValue>.ICollection<KeyValuePair<TKey,TValue>>.IsReadOnly\n- uid: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#Remove(System.Collections.Generic.KeyValuePair{`0,`1})\n  parent: System.Collections.Concurrent.ConcurrentDictionary`2\n  isExternal: false\n  name: ICollection<KeyValuePair<TKey,TValue>>.Remove(KeyValuePair<TKey,TValue>)\n  nameWithType: ConcurrentDictionary<TKey,TValue>.ICollection<KeyValuePair<TKey,TValue>>.Remove(KeyValuePair<TKey,TValue>)\n  fullName: ConcurrentDictionary<TKey,TValue>.ICollection<KeyValuePair<TKey,TValue>>.Remove(KeyValuePair<TKey,TValue>)\n- uid: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#Generic#IDictionary{TKey,TValue}#Add(`0,`1)\n  parent: System.Collections.Concurrent.ConcurrentDictionary`2\n  isExternal: false\n  name: IDictionary<TKey,TValue>.Add(TKey, TValue)\n  nameWithType: ConcurrentDictionary<TKey,TValue>.IDictionary<TKey,TValue>.Add(TKey, TValue)\n  fullName: ConcurrentDictionary<TKey,TValue>.IDictionary<TKey,TValue>.Add(TKey, TValue)\n- uid: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#Generic#IDictionary{TKey,TValue}#Remove(`0)\n  parent: System.Collections.Concurrent.ConcurrentDictionary`2\n  isExternal: false\n  name: IDictionary<TKey,TValue>.Remove(TKey)\n  nameWithType: ConcurrentDictionary<TKey,TValue>.IDictionary<TKey,TValue>.Remove(TKey)\n  fullName: ConcurrentDictionary<TKey,TValue>.IDictionary<TKey,TValue>.Remove(TKey)\n- uid: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#Generic#IReadOnlyDictionary{TKey,TValue}#Keys\n  parent: System.Collections.Concurrent.ConcurrentDictionary`2\n  isExternal: false\n  name: IReadOnlyDictionary<TKey,TValue>.Keys\n  nameWithType: ConcurrentDictionary<TKey,TValue>.IReadOnlyDictionary<TKey,TValue>.Keys\n  fullName: ConcurrentDictionary<TKey,TValue>.IReadOnlyDictionary<TKey,TValue>.Keys\n- uid: System.Collections.Generic.IEnumerable{TKey}\n  parent: System.Collections.Generic\n  isExternal: false\n  name: IEnumerable<TKey>\n  nameWithType: IEnumerable<TKey>\n  fullName: System.Collections.Generic.IEnumerable<TKey>\n  spec.csharp:\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    nameWithType: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: TKey\n    name: TKey\n    nameWithType: TKey\n    fullName: TKey\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#Generic#IReadOnlyDictionary{TKey,TValue}#Values\n  parent: System.Collections.Concurrent.ConcurrentDictionary`2\n  isExternal: false\n  name: IReadOnlyDictionary<TKey,TValue>.Values\n  nameWithType: ConcurrentDictionary<TKey,TValue>.IReadOnlyDictionary<TKey,TValue>.Values\n  fullName: ConcurrentDictionary<TKey,TValue>.IReadOnlyDictionary<TKey,TValue>.Values\n- uid: System.Collections.Generic.IEnumerable{TValue}\n  parent: System.Collections.Generic\n  isExternal: false\n  name: IEnumerable<TValue>\n  nameWithType: IEnumerable<TValue>\n  fullName: System.Collections.Generic.IEnumerable<TValue>\n  spec.csharp:\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    nameWithType: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: TValue\n    name: TValue\n    nameWithType: TValue\n    fullName: TValue\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#ICollection#CopyTo(System.Array,System.Int32)\n  parent: System.Collections.Concurrent.ConcurrentDictionary`2\n  isExternal: false\n  name: ICollection.CopyTo(Array, Int32)\n  nameWithType: ConcurrentDictionary<TKey,TValue>.ICollection.CopyTo(Array, Int32)\n  fullName: ConcurrentDictionary<TKey,TValue>.ICollection.CopyTo(Array, Int32)\n- uid: System.Array\n  parent: System\n  isExternal: false\n  name: Array\n  nameWithType: Array\n  fullName: System.Array\n- uid: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#ICollection#IsSynchronized\n  parent: System.Collections.Concurrent.ConcurrentDictionary`2\n  isExternal: false\n  name: ICollection.IsSynchronized\n  nameWithType: ConcurrentDictionary<TKey,TValue>.ICollection.IsSynchronized\n  fullName: ConcurrentDictionary<TKey,TValue>.ICollection.IsSynchronized\n- uid: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#ICollection#SyncRoot\n  parent: System.Collections.Concurrent.ConcurrentDictionary`2\n  isExternal: false\n  name: ICollection.SyncRoot\n  nameWithType: ConcurrentDictionary<TKey,TValue>.ICollection.SyncRoot\n  fullName: ConcurrentDictionary<TKey,TValue>.ICollection.SyncRoot\n- uid: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#IDictionary#Add(System.Object,System.Object)\n  parent: System.Collections.Concurrent.ConcurrentDictionary`2\n  isExternal: false\n  name: IDictionary.Add(Object, Object)\n  nameWithType: ConcurrentDictionary<TKey,TValue>.IDictionary.Add(Object, Object)\n  fullName: ConcurrentDictionary<TKey,TValue>.IDictionary.Add(Object, Object)\n- uid: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#IDictionary#Contains(System.Object)\n  parent: System.Collections.Concurrent.ConcurrentDictionary`2\n  isExternal: false\n  name: IDictionary.Contains(Object)\n  nameWithType: ConcurrentDictionary<TKey,TValue>.IDictionary.Contains(Object)\n  fullName: ConcurrentDictionary<TKey,TValue>.IDictionary.Contains(Object)\n- uid: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#IDictionary#GetEnumerator\n  parent: System.Collections.Concurrent.ConcurrentDictionary`2\n  isExternal: false\n  name: IDictionary.GetEnumerator()\n  nameWithType: ConcurrentDictionary<TKey,TValue>.IDictionary.GetEnumerator()\n  fullName: ConcurrentDictionary<TKey,TValue>.IDictionary.GetEnumerator()\n- uid: System.Collections.IDictionaryEnumerator\n  parent: System.Collections\n  isExternal: false\n  name: IDictionaryEnumerator\n  nameWithType: IDictionaryEnumerator\n  fullName: System.Collections.IDictionaryEnumerator\n- uid: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#IDictionary#IsFixedSize\n  parent: System.Collections.Concurrent.ConcurrentDictionary`2\n  isExternal: false\n  name: IDictionary.IsFixedSize\n  nameWithType: ConcurrentDictionary<TKey,TValue>.IDictionary.IsFixedSize\n  fullName: ConcurrentDictionary<TKey,TValue>.IDictionary.IsFixedSize\n- uid: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#IDictionary#IsReadOnly\n  parent: System.Collections.Concurrent.ConcurrentDictionary`2\n  isExternal: false\n  name: IDictionary.IsReadOnly\n  nameWithType: ConcurrentDictionary<TKey,TValue>.IDictionary.IsReadOnly\n  fullName: ConcurrentDictionary<TKey,TValue>.IDictionary.IsReadOnly\n- uid: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#IDictionary#Item(System.Object)\n  parent: System.Collections.Concurrent.ConcurrentDictionary`2\n  isExternal: false\n  name: IDictionary.Item(Object)\n  nameWithType: ConcurrentDictionary<TKey,TValue>.IDictionary.Item(Object)\n  fullName: ConcurrentDictionary<TKey,TValue>.IDictionary.Item(Object)\n- uid: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#IDictionary#Keys\n  parent: System.Collections.Concurrent.ConcurrentDictionary`2\n  isExternal: false\n  name: IDictionary.Keys\n  nameWithType: ConcurrentDictionary<TKey,TValue>.IDictionary.Keys\n  fullName: ConcurrentDictionary<TKey,TValue>.IDictionary.Keys\n- uid: System.Collections.ICollection\n  parent: System.Collections\n  isExternal: false\n  name: ICollection\n  nameWithType: ICollection\n  fullName: System.Collections.ICollection\n- uid: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#IDictionary#Remove(System.Object)\n  parent: System.Collections.Concurrent.ConcurrentDictionary`2\n  isExternal: false\n  name: IDictionary.Remove(Object)\n  nameWithType: ConcurrentDictionary<TKey,TValue>.IDictionary.Remove(Object)\n  fullName: ConcurrentDictionary<TKey,TValue>.IDictionary.Remove(Object)\n- uid: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#IDictionary#Values\n  parent: System.Collections.Concurrent.ConcurrentDictionary`2\n  isExternal: false\n  name: IDictionary.Values\n  nameWithType: ConcurrentDictionary<TKey,TValue>.IDictionary.Values\n  fullName: ConcurrentDictionary<TKey,TValue>.IDictionary.Values\n- uid: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#IEnumerable#GetEnumerator\n  parent: System.Collections.Concurrent.ConcurrentDictionary`2\n  isExternal: false\n  name: IEnumerable.GetEnumerator()\n  nameWithType: ConcurrentDictionary<TKey,TValue>.IEnumerable.GetEnumerator()\n  fullName: ConcurrentDictionary<TKey,TValue>.IEnumerable.GetEnumerator()\n- uid: System.Collections.IEnumerator\n  parent: System.Collections\n  isExternal: false\n  name: IEnumerator\n  nameWithType: IEnumerator\n  fullName: System.Collections.IEnumerator\n- uid: System.Collections.Concurrent.ConcurrentDictionary`2.AddOrUpdate*\n  parent: System.Collections.Concurrent.ConcurrentDictionary`2\n  isExternal: false\n  name: AddOrUpdate\n  nameWithType: ConcurrentDictionary<TKey,TValue>.AddOrUpdate\n  fullName: ConcurrentDictionary<TKey,TValue>.AddOrUpdate\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Concurrent/ConcurrentDictionary`2.xml\n- uid: System.Collections.Concurrent.ConcurrentDictionary`2.GetOrAdd*\n  parent: System.Collections.Concurrent.ConcurrentDictionary`2\n  isExternal: false\n  name: GetOrAdd\n  nameWithType: ConcurrentDictionary<TKey,TValue>.GetOrAdd\n  fullName: ConcurrentDictionary<TKey,TValue>.GetOrAdd\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Concurrent/ConcurrentDictionary`2.xml\n- uid: System.Collections.Concurrent.ConcurrentDictionary`2.#ctor*\n  parent: System.Collections.Concurrent.ConcurrentDictionary`2\n  isExternal: false\n  name: ConcurrentDictionary<TKey,TValue>\n  nameWithType: ConcurrentDictionary<TKey,TValue>.ConcurrentDictionary<TKey,TValue>\n  fullName: ConcurrentDictionary<TKey,TValue>.ConcurrentDictionary<TKey,TValue>\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Concurrent/ConcurrentDictionary`2.xml\n- uid: System.Collections.Concurrent.ConcurrentDictionary`2.AddOrUpdate``1*\n  parent: System.Collections.Concurrent.ConcurrentDictionary`2\n  isExternal: false\n  name: AddOrUpdate<TArg>\n  nameWithType: ConcurrentDictionary<TKey,TValue>.AddOrUpdate<TArg>\n  fullName: ConcurrentDictionary<TKey,TValue>.AddOrUpdate<TArg>\n  monikers:\n  - netcore-2.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Concurrent/ConcurrentDictionary`2.xml\n- uid: System.Collections.Concurrent.ConcurrentDictionary`2.Clear*\n  parent: System.Collections.Concurrent.ConcurrentDictionary`2\n  isExternal: false\n  name: Clear\n  nameWithType: ConcurrentDictionary<TKey,TValue>.Clear\n  fullName: ConcurrentDictionary<TKey,TValue>.Clear\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Concurrent/ConcurrentDictionary`2.xml\n- uid: System.Collections.Concurrent.ConcurrentDictionary`2.ContainsKey*\n  parent: System.Collections.Concurrent.ConcurrentDictionary`2\n  isExternal: false\n  name: ContainsKey\n  nameWithType: ConcurrentDictionary<TKey,TValue>.ContainsKey\n  fullName: ConcurrentDictionary<TKey,TValue>.ContainsKey\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Concurrent/ConcurrentDictionary`2.xml\n- uid: System.Collections.Concurrent.ConcurrentDictionary`2.Count*\n  parent: System.Collections.Concurrent.ConcurrentDictionary`2\n  isExternal: false\n  name: Count\n  nameWithType: ConcurrentDictionary<TKey,TValue>.Count\n  fullName: ConcurrentDictionary<TKey,TValue>.Count\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Concurrent/ConcurrentDictionary`2.xml\n- uid: System.Collections.Concurrent.ConcurrentDictionary`2.GetEnumerator*\n  parent: System.Collections.Concurrent.ConcurrentDictionary`2\n  isExternal: false\n  name: GetEnumerator\n  nameWithType: ConcurrentDictionary<TKey,TValue>.GetEnumerator\n  fullName: ConcurrentDictionary<TKey,TValue>.GetEnumerator\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Concurrent/ConcurrentDictionary`2.xml\n- uid: System.Collections.Concurrent.ConcurrentDictionary`2.GetOrAdd``1*\n  parent: System.Collections.Concurrent.ConcurrentDictionary`2\n  isExternal: false\n  name: GetOrAdd<TArg>\n  nameWithType: ConcurrentDictionary<TKey,TValue>.GetOrAdd<TArg>\n  fullName: ConcurrentDictionary<TKey,TValue>.GetOrAdd<TArg>\n  monikers:\n  - netcore-2.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Concurrent/ConcurrentDictionary`2.xml\n- uid: System.Collections.Concurrent.ConcurrentDictionary`2.IsEmpty*\n  parent: System.Collections.Concurrent.ConcurrentDictionary`2\n  isExternal: false\n  name: IsEmpty\n  nameWithType: ConcurrentDictionary<TKey,TValue>.IsEmpty\n  fullName: ConcurrentDictionary<TKey,TValue>.IsEmpty\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Concurrent/ConcurrentDictionary`2.xml\n- uid: System.Collections.Concurrent.ConcurrentDictionary`2.Item*\n  parent: System.Collections.Concurrent.ConcurrentDictionary`2\n  isExternal: false\n  name: Item\n  nameWithType: ConcurrentDictionary<TKey,TValue>.Item\n  fullName: ConcurrentDictionary<TKey,TValue>.Item\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Concurrent/ConcurrentDictionary`2.xml\n- uid: System.Collections.Concurrent.ConcurrentDictionary`2.Keys*\n  parent: System.Collections.Concurrent.ConcurrentDictionary`2\n  isExternal: false\n  name: Keys\n  nameWithType: ConcurrentDictionary<TKey,TValue>.Keys\n  fullName: ConcurrentDictionary<TKey,TValue>.Keys\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Concurrent/ConcurrentDictionary`2.xml\n- uid: System.Collections.Concurrent.ConcurrentDictionary`2.ToArray*\n  parent: System.Collections.Concurrent.ConcurrentDictionary`2\n  isExternal: false\n  name: ToArray\n  nameWithType: ConcurrentDictionary<TKey,TValue>.ToArray\n  fullName: ConcurrentDictionary<TKey,TValue>.ToArray\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Concurrent/ConcurrentDictionary`2.xml\n- uid: System.Collections.Concurrent.ConcurrentDictionary`2.TryAdd*\n  parent: System.Collections.Concurrent.ConcurrentDictionary`2\n  isExternal: false\n  name: TryAdd\n  nameWithType: ConcurrentDictionary<TKey,TValue>.TryAdd\n  fullName: ConcurrentDictionary<TKey,TValue>.TryAdd\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Concurrent/ConcurrentDictionary`2.xml\n- uid: System.Collections.Concurrent.ConcurrentDictionary`2.TryGetValue*\n  parent: System.Collections.Concurrent.ConcurrentDictionary`2\n  isExternal: false\n  name: TryGetValue\n  nameWithType: ConcurrentDictionary<TKey,TValue>.TryGetValue\n  fullName: ConcurrentDictionary<TKey,TValue>.TryGetValue\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Concurrent/ConcurrentDictionary`2.xml\n- uid: System.Collections.Concurrent.ConcurrentDictionary`2.TryRemove*\n  parent: System.Collections.Concurrent.ConcurrentDictionary`2\n  isExternal: false\n  name: TryRemove\n  nameWithType: ConcurrentDictionary<TKey,TValue>.TryRemove\n  fullName: ConcurrentDictionary<TKey,TValue>.TryRemove\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Concurrent/ConcurrentDictionary`2.xml\n- uid: System.Collections.Concurrent.ConcurrentDictionary`2.TryUpdate*\n  parent: System.Collections.Concurrent.ConcurrentDictionary`2\n  isExternal: false\n  name: TryUpdate\n  nameWithType: ConcurrentDictionary<TKey,TValue>.TryUpdate\n  fullName: ConcurrentDictionary<TKey,TValue>.TryUpdate\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Concurrent/ConcurrentDictionary`2.xml\n- uid: System.Collections.Concurrent.ConcurrentDictionary`2.Values*\n  parent: System.Collections.Concurrent.ConcurrentDictionary`2\n  isExternal: false\n  name: Values\n  nameWithType: ConcurrentDictionary<TKey,TValue>.Values\n  fullName: ConcurrentDictionary<TKey,TValue>.Values\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Concurrent/ConcurrentDictionary`2.xml\n- uid: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#Add*\n  parent: System.Collections.Concurrent.ConcurrentDictionary`2\n  isExternal: false\n  name: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Add\n  nameWithType: ConcurrentDictionary<TKey,TValue>.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Add\n  fullName: ConcurrentDictionary<TKey,TValue>.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Add\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Concurrent/ConcurrentDictionary`2.xml\n- uid: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#Contains*\n  parent: System.Collections.Concurrent.ConcurrentDictionary`2\n  isExternal: false\n  name: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Contains\n  nameWithType: ConcurrentDictionary<TKey,TValue>.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Contains\n  fullName: ConcurrentDictionary<TKey,TValue>.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Contains\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Concurrent/ConcurrentDictionary`2.xml\n- uid: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#CopyTo*\n  parent: System.Collections.Concurrent.ConcurrentDictionary`2\n  isExternal: false\n  name: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.CopyTo\n  nameWithType: ConcurrentDictionary<TKey,TValue>.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.CopyTo\n  fullName: ConcurrentDictionary<TKey,TValue>.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.CopyTo\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Concurrent/ConcurrentDictionary`2.xml\n- uid: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#IsReadOnly*\n  parent: System.Collections.Concurrent.ConcurrentDictionary`2\n  isExternal: false\n  name: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.IsReadOnly\n  nameWithType: ConcurrentDictionary<TKey,TValue>.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.IsReadOnly\n  fullName: ConcurrentDictionary<TKey,TValue>.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.IsReadOnly\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Concurrent/ConcurrentDictionary`2.xml\n- uid: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#Remove*\n  parent: System.Collections.Concurrent.ConcurrentDictionary`2\n  isExternal: false\n  name: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Remove\n  nameWithType: ConcurrentDictionary<TKey,TValue>.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Remove\n  fullName: ConcurrentDictionary<TKey,TValue>.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Remove\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Concurrent/ConcurrentDictionary`2.xml\n- uid: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#Generic#IDictionary{TKey,TValue}#Add*\n  parent: System.Collections.Concurrent.ConcurrentDictionary`2\n  isExternal: false\n  name: System.Collections.Generic.IDictionary<TKey,TValue>.Add\n  nameWithType: ConcurrentDictionary<TKey,TValue>.System.Collections.Generic.IDictionary<TKey,TValue>.Add\n  fullName: ConcurrentDictionary<TKey,TValue>.System.Collections.Generic.IDictionary<TKey,TValue>.Add\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Concurrent/ConcurrentDictionary`2.xml\n- uid: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#Generic#IDictionary{TKey,TValue}#Remove*\n  parent: System.Collections.Concurrent.ConcurrentDictionary`2\n  isExternal: false\n  name: System.Collections.Generic.IDictionary<TKey,TValue>.Remove\n  nameWithType: ConcurrentDictionary<TKey,TValue>.System.Collections.Generic.IDictionary<TKey,TValue>.Remove\n  fullName: ConcurrentDictionary<TKey,TValue>.System.Collections.Generic.IDictionary<TKey,TValue>.Remove\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Concurrent/ConcurrentDictionary`2.xml\n- uid: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#Generic#IReadOnlyDictionary{TKey,TValue}#Keys*\n  parent: System.Collections.Concurrent.ConcurrentDictionary`2\n  isExternal: false\n  name: System.Collections.Generic.IReadOnlyDictionary<TKey,TValue>.Keys\n  nameWithType: ConcurrentDictionary<TKey,TValue>.System.Collections.Generic.IReadOnlyDictionary<TKey,TValue>.Keys\n  fullName: ConcurrentDictionary<TKey,TValue>.System.Collections.Generic.IReadOnlyDictionary<TKey,TValue>.Keys\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Concurrent/ConcurrentDictionary`2.xml\n- uid: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#Generic#IReadOnlyDictionary{TKey,TValue}#Values*\n  parent: System.Collections.Concurrent.ConcurrentDictionary`2\n  isExternal: false\n  name: System.Collections.Generic.IReadOnlyDictionary<TKey,TValue>.Values\n  nameWithType: ConcurrentDictionary<TKey,TValue>.System.Collections.Generic.IReadOnlyDictionary<TKey,TValue>.Values\n  fullName: ConcurrentDictionary<TKey,TValue>.System.Collections.Generic.IReadOnlyDictionary<TKey,TValue>.Values\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Concurrent/ConcurrentDictionary`2.xml\n- uid: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#ICollection#CopyTo*\n  parent: System.Collections.Concurrent.ConcurrentDictionary`2\n  isExternal: false\n  name: System.Collections.ICollection.CopyTo\n  nameWithType: ConcurrentDictionary<TKey,TValue>.System.Collections.ICollection.CopyTo\n  fullName: ConcurrentDictionary<TKey,TValue>.System.Collections.ICollection.CopyTo\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Concurrent/ConcurrentDictionary`2.xml\n- uid: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#ICollection#IsSynchronized*\n  parent: System.Collections.Concurrent.ConcurrentDictionary`2\n  isExternal: false\n  name: System.Collections.ICollection.IsSynchronized\n  nameWithType: ConcurrentDictionary<TKey,TValue>.System.Collections.ICollection.IsSynchronized\n  fullName: ConcurrentDictionary<TKey,TValue>.System.Collections.ICollection.IsSynchronized\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Concurrent/ConcurrentDictionary`2.xml\n- uid: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#ICollection#SyncRoot*\n  parent: System.Collections.Concurrent.ConcurrentDictionary`2\n  isExternal: false\n  name: System.Collections.ICollection.SyncRoot\n  nameWithType: ConcurrentDictionary<TKey,TValue>.System.Collections.ICollection.SyncRoot\n  fullName: ConcurrentDictionary<TKey,TValue>.System.Collections.ICollection.SyncRoot\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Concurrent/ConcurrentDictionary`2.xml\n- uid: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#IDictionary#Add*\n  parent: System.Collections.Concurrent.ConcurrentDictionary`2\n  isExternal: false\n  name: System.Collections.IDictionary.Add\n  nameWithType: ConcurrentDictionary<TKey,TValue>.System.Collections.IDictionary.Add\n  fullName: ConcurrentDictionary<TKey,TValue>.System.Collections.IDictionary.Add\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Concurrent/ConcurrentDictionary`2.xml\n- uid: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#IDictionary#Contains*\n  parent: System.Collections.Concurrent.ConcurrentDictionary`2\n  isExternal: false\n  name: System.Collections.IDictionary.Contains\n  nameWithType: ConcurrentDictionary<TKey,TValue>.System.Collections.IDictionary.Contains\n  fullName: ConcurrentDictionary<TKey,TValue>.System.Collections.IDictionary.Contains\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Concurrent/ConcurrentDictionary`2.xml\n- uid: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#IDictionary#GetEnumerator*\n  parent: System.Collections.Concurrent.ConcurrentDictionary`2\n  isExternal: false\n  name: System.Collections.IDictionary.GetEnumerator\n  nameWithType: ConcurrentDictionary<TKey,TValue>.System.Collections.IDictionary.GetEnumerator\n  fullName: ConcurrentDictionary<TKey,TValue>.System.Collections.IDictionary.GetEnumerator\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Concurrent/ConcurrentDictionary`2.xml\n- uid: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#IDictionary#IsFixedSize*\n  parent: System.Collections.Concurrent.ConcurrentDictionary`2\n  isExternal: false\n  name: System.Collections.IDictionary.IsFixedSize\n  nameWithType: ConcurrentDictionary<TKey,TValue>.System.Collections.IDictionary.IsFixedSize\n  fullName: ConcurrentDictionary<TKey,TValue>.System.Collections.IDictionary.IsFixedSize\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Concurrent/ConcurrentDictionary`2.xml\n- uid: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#IDictionary#IsReadOnly*\n  parent: System.Collections.Concurrent.ConcurrentDictionary`2\n  isExternal: false\n  name: System.Collections.IDictionary.IsReadOnly\n  nameWithType: ConcurrentDictionary<TKey,TValue>.System.Collections.IDictionary.IsReadOnly\n  fullName: ConcurrentDictionary<TKey,TValue>.System.Collections.IDictionary.IsReadOnly\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Concurrent/ConcurrentDictionary`2.xml\n- uid: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#IDictionary#Item*\n  parent: System.Collections.Concurrent.ConcurrentDictionary`2\n  isExternal: false\n  name: System.Collections.IDictionary.Item\n  nameWithType: ConcurrentDictionary<TKey,TValue>.System.Collections.IDictionary.Item\n  fullName: ConcurrentDictionary<TKey,TValue>.System.Collections.IDictionary.Item\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Concurrent/ConcurrentDictionary`2.xml\n- uid: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#IDictionary#Keys*\n  parent: System.Collections.Concurrent.ConcurrentDictionary`2\n  isExternal: false\n  name: System.Collections.IDictionary.Keys\n  nameWithType: ConcurrentDictionary<TKey,TValue>.System.Collections.IDictionary.Keys\n  fullName: ConcurrentDictionary<TKey,TValue>.System.Collections.IDictionary.Keys\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Concurrent/ConcurrentDictionary`2.xml\n- uid: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#IDictionary#Remove*\n  parent: System.Collections.Concurrent.ConcurrentDictionary`2\n  isExternal: false\n  name: System.Collections.IDictionary.Remove\n  nameWithType: ConcurrentDictionary<TKey,TValue>.System.Collections.IDictionary.Remove\n  fullName: ConcurrentDictionary<TKey,TValue>.System.Collections.IDictionary.Remove\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Concurrent/ConcurrentDictionary`2.xml\n- uid: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#IDictionary#Values*\n  parent: System.Collections.Concurrent.ConcurrentDictionary`2\n  isExternal: false\n  name: System.Collections.IDictionary.Values\n  nameWithType: ConcurrentDictionary<TKey,TValue>.System.Collections.IDictionary.Values\n  fullName: ConcurrentDictionary<TKey,TValue>.System.Collections.IDictionary.Values\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Concurrent/ConcurrentDictionary`2.xml\n- uid: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#IEnumerable#GetEnumerator*\n  parent: System.Collections.Concurrent.ConcurrentDictionary`2\n  isExternal: false\n  name: System.Collections.IEnumerable.GetEnumerator\n  nameWithType: ConcurrentDictionary<TKey,TValue>.System.Collections.IEnumerable.GetEnumerator\n  fullName: ConcurrentDictionary<TKey,TValue>.System.Collections.IEnumerable.GetEnumerator\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Concurrent/ConcurrentDictionary`2.xml\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: Object.Equals(Object)\n  fullName: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: Object.GetHashCode()\n  fullName: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: false\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: false\n  name: ToString()\n  nameWithType: Object.ToString()\n  fullName: Object.ToString()\n- uid: System.Collections.Generic.CollectionExtensions.GetValueOrDefault``2(System.Collections.Generic.IReadOnlyDictionary{``0,``1},``0)\n  parent: System.Collections.Generic.CollectionExtensions\n  isExternal: false\n  name: GetValueOrDefault<TKey,TValue>(IReadOnlyDictionary<TKey,TValue>, TKey)\n  nameWithType: CollectionExtensions.GetValueOrDefault<TKey,TValue>(IReadOnlyDictionary<TKey,TValue>, TKey)\n  fullName: CollectionExtensions.GetValueOrDefault<TKey,TValue>(IReadOnlyDictionary<TKey,TValue>, TKey)\n- uid: System.Collections.Generic.CollectionExtensions.GetValueOrDefault``2(System.Collections.Generic.IReadOnlyDictionary{``0,``1},``0,``1)\n  parent: System.Collections.Generic.CollectionExtensions\n  isExternal: false\n  name: GetValueOrDefault<TKey,TValue>(IReadOnlyDictionary<TKey,TValue>, TKey, TValue)\n  nameWithType: CollectionExtensions.GetValueOrDefault<TKey,TValue>(IReadOnlyDictionary<TKey,TValue>, TKey, TValue)\n  fullName: CollectionExtensions.GetValueOrDefault<TKey,TValue>(IReadOnlyDictionary<TKey,TValue>, TKey, TValue)\n- uid: System.Collections.Generic.CollectionExtensions.Remove``2(System.Collections.Generic.IDictionary{``0,``1},``0,``1@)\n  parent: System.Collections.Generic.CollectionExtensions\n  isExternal: false\n  name: Remove<TKey,TValue>(IDictionary<TKey,TValue>, TKey, TValue)\n  nameWithType: CollectionExtensions.Remove<TKey,TValue>(IDictionary<TKey,TValue>, TKey, TValue)\n  fullName: CollectionExtensions.Remove<TKey,TValue>(IDictionary<TKey,TValue>, TKey, TValue)\n- uid: System.Collections.Generic.CollectionExtensions.TryAdd``2(System.Collections.Generic.IDictionary{``0,``1},``0,``1)\n  parent: System.Collections.Generic.CollectionExtensions\n  isExternal: false\n  name: TryAdd<TKey,TValue>(IDictionary<TKey,TValue>, TKey, TValue)\n  nameWithType: CollectionExtensions.TryAdd<TKey,TValue>(IDictionary<TKey,TValue>, TKey, TValue)\n  fullName: CollectionExtensions.TryAdd<TKey,TValue>(IDictionary<TKey,TValue>, TKey, TValue)\n- uid: System.Collections.Immutable.ImmutableArray.ToImmutableArray``1(System.Collections.Generic.IEnumerable{``0})\n  parent: System.Collections.Immutable.ImmutableArray\n  isExternal: false\n  name: ToImmutableArray<TSource>(IEnumerable<TSource>)\n  nameWithType: ImmutableArray.ToImmutableArray<TSource>(IEnumerable<TSource>)\n  fullName: ImmutableArray.ToImmutableArray<TSource>(IEnumerable<TSource>)\n- uid: System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})\n  parent: System.Collections.Immutable.ImmutableDictionary\n  isExternal: false\n  name: ToImmutableDictionary<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>)\n  nameWithType: ImmutableDictionary.ToImmutableDictionary<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>)\n  fullName: ImmutableDictionary.ToImmutableDictionary<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>)\n- uid: System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})\n  parent: System.Collections.Immutable.ImmutableDictionary\n  isExternal: false\n  name: ToImmutableDictionary<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>, IEqualityComparer<TKey>)\n  nameWithType: ImmutableDictionary.ToImmutableDictionary<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>, IEqualityComparer<TKey>)\n  fullName: ImmutableDictionary.ToImmutableDictionary<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>, IEqualityComparer<TKey>)\n- uid: System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}})\n  parent: System.Collections.Immutable.ImmutableDictionary\n  isExternal: false\n  name: ToImmutableDictionary<TKey,TValue>(IEnumerable<KeyValuePair<TKey,TValue>>)\n  nameWithType: ImmutableDictionary.ToImmutableDictionary<TKey,TValue>(IEnumerable<KeyValuePair<TKey,TValue>>)\n  fullName: ImmutableDictionary.ToImmutableDictionary<TKey,TValue>(IEnumerable<KeyValuePair<TKey,TValue>>)\n- uid: System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}},System.Collections.Generic.IEqualityComparer{``0})\n  parent: System.Collections.Immutable.ImmutableDictionary\n  isExternal: false\n  name: ToImmutableDictionary<TKey,TValue>(IEnumerable<KeyValuePair<TKey,TValue>>, IEqualityComparer<TKey>)\n  nameWithType: ImmutableDictionary.ToImmutableDictionary<TKey,TValue>(IEnumerable<KeyValuePair<TKey,TValue>>, IEqualityComparer<TKey>)\n  fullName: ImmutableDictionary.ToImmutableDictionary<TKey,TValue>(IEnumerable<KeyValuePair<TKey,TValue>>, IEqualityComparer<TKey>)\n- uid: System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}},System.Collections.Generic.IEqualityComparer{``0},System.Collections.Generic.IEqualityComparer{``1})\n  parent: System.Collections.Immutable.ImmutableDictionary\n  isExternal: false\n  name: ToImmutableDictionary<TKey,TValue>(IEnumerable<KeyValuePair<TKey,TValue>>, IEqualityComparer<TKey>, IEqualityComparer<TValue>)\n  nameWithType: ImmutableDictionary.ToImmutableDictionary<TKey,TValue>(IEnumerable<KeyValuePair<TKey,TValue>>, IEqualityComparer<TKey>, IEqualityComparer<TValue>)\n  fullName: ImmutableDictionary.ToImmutableDictionary<TKey,TValue>(IEnumerable<KeyValuePair<TKey,TValue>>, IEqualityComparer<TKey>, IEqualityComparer<TValue>)\n- uid: System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})\n  parent: System.Collections.Immutable.ImmutableDictionary\n  isExternal: false\n  name: ToImmutableDictionary<TSource,TKey,TValue>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TValue>)\n  nameWithType: ImmutableDictionary.ToImmutableDictionary<TSource,TKey,TValue>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TValue>)\n  fullName: ImmutableDictionary.ToImmutableDictionary<TSource,TKey,TValue>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TValue>)\n- uid: System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})\n  parent: System.Collections.Immutable.ImmutableDictionary\n  isExternal: false\n  name: ToImmutableDictionary<TSource,TKey,TValue>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TValue>, IEqualityComparer<TKey>)\n  nameWithType: ImmutableDictionary.ToImmutableDictionary<TSource,TKey,TValue>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TValue>, IEqualityComparer<TKey>)\n  fullName: ImmutableDictionary.ToImmutableDictionary<TSource,TKey,TValue>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TValue>, IEqualityComparer<TKey>)\n- uid: System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1},System.Collections.Generic.IEqualityComparer{``2})\n  parent: System.Collections.Immutable.ImmutableDictionary\n  isExternal: false\n  name: ToImmutableDictionary<TSource,TKey,TValue>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TValue>, IEqualityComparer<TKey>, IEqualityComparer<TValue>)\n  nameWithType: ImmutableDictionary.ToImmutableDictionary<TSource,TKey,TValue>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TValue>, IEqualityComparer<TKey>, IEqualityComparer<TValue>)\n  fullName: ImmutableDictionary.ToImmutableDictionary<TSource,TKey,TValue>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TValue>, IEqualityComparer<TKey>, IEqualityComparer<TValue>)\n- uid: System.Collections.Immutable.ImmutableHashSet.ToImmutableHashSet``1(System.Collections.Generic.IEnumerable{``0})\n  parent: System.Collections.Immutable.ImmutableHashSet\n  isExternal: false\n  name: ToImmutableHashSet<TSource>(IEnumerable<TSource>)\n  nameWithType: ImmutableHashSet.ToImmutableHashSet<TSource>(IEnumerable<TSource>)\n  fullName: ImmutableHashSet.ToImmutableHashSet<TSource>(IEnumerable<TSource>)\n- uid: System.Collections.Immutable.ImmutableHashSet.ToImmutableHashSet``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})\n  parent: System.Collections.Immutable.ImmutableHashSet\n  isExternal: false\n  name: ToImmutableHashSet<TSource>(IEnumerable<TSource>, IEqualityComparer<TSource>)\n  nameWithType: ImmutableHashSet.ToImmutableHashSet<TSource>(IEnumerable<TSource>, IEqualityComparer<TSource>)\n  fullName: ImmutableHashSet.ToImmutableHashSet<TSource>(IEnumerable<TSource>, IEqualityComparer<TSource>)\n- uid: System.Collections.Immutable.ImmutableList.ToImmutableList``1(System.Collections.Generic.IEnumerable{``0})\n  parent: System.Collections.Immutable.ImmutableList\n  isExternal: false\n  name: ToImmutableList<TSource>(IEnumerable<TSource>)\n  nameWithType: ImmutableList.ToImmutableList<TSource>(IEnumerable<TSource>)\n  fullName: ImmutableList.ToImmutableList<TSource>(IEnumerable<TSource>)\n- uid: System.Collections.Immutable.ImmutableSortedDictionary.ToImmutableSortedDictionary``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}})\n  parent: System.Collections.Immutable.ImmutableSortedDictionary\n  isExternal: false\n  name: ToImmutableSortedDictionary<TKey,TValue>(IEnumerable<KeyValuePair<TKey,TValue>>)\n  nameWithType: ImmutableSortedDictionary.ToImmutableSortedDictionary<TKey,TValue>(IEnumerable<KeyValuePair<TKey,TValue>>)\n  fullName: ImmutableSortedDictionary.ToImmutableSortedDictionary<TKey,TValue>(IEnumerable<KeyValuePair<TKey,TValue>>)\n- uid: System.Collections.Immutable.ImmutableSortedDictionary.ToImmutableSortedDictionary``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}},System.Collections.Generic.IComparer{``0})\n  parent: System.Collections.Immutable.ImmutableSortedDictionary\n  isExternal: false\n  name: ToImmutableSortedDictionary<TKey,TValue>(IEnumerable<KeyValuePair<TKey,TValue>>, IComparer<TKey>)\n  nameWithType: ImmutableSortedDictionary.ToImmutableSortedDictionary<TKey,TValue>(IEnumerable<KeyValuePair<TKey,TValue>>, IComparer<TKey>)\n  fullName: ImmutableSortedDictionary.ToImmutableSortedDictionary<TKey,TValue>(IEnumerable<KeyValuePair<TKey,TValue>>, IComparer<TKey>)\n- uid: System.Collections.Immutable.ImmutableSortedDictionary.ToImmutableSortedDictionary``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}},System.Collections.Generic.IComparer{``0},System.Collections.Generic.IEqualityComparer{``1})\n  parent: System.Collections.Immutable.ImmutableSortedDictionary\n  isExternal: false\n  name: ToImmutableSortedDictionary<TKey,TValue>(IEnumerable<KeyValuePair<TKey,TValue>>, IComparer<TKey>, IEqualityComparer<TValue>)\n  nameWithType: ImmutableSortedDictionary.ToImmutableSortedDictionary<TKey,TValue>(IEnumerable<KeyValuePair<TKey,TValue>>, IComparer<TKey>, IEqualityComparer<TValue>)\n  fullName: ImmutableSortedDictionary.ToImmutableSortedDictionary<TKey,TValue>(IEnumerable<KeyValuePair<TKey,TValue>>, IComparer<TKey>, IEqualityComparer<TValue>)\n- uid: System.Collections.Immutable.ImmutableSortedDictionary.ToImmutableSortedDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})\n  parent: System.Collections.Immutable.ImmutableSortedDictionary\n  isExternal: false\n  name: ToImmutableSortedDictionary<TSource,TKey,TValue>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TValue>)\n  nameWithType: ImmutableSortedDictionary.ToImmutableSortedDictionary<TSource,TKey,TValue>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TValue>)\n  fullName: ImmutableSortedDictionary.ToImmutableSortedDictionary<TSource,TKey,TValue>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TValue>)\n- uid: System.Collections.Immutable.ImmutableSortedDictionary.ToImmutableSortedDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IComparer{``1})\n  parent: System.Collections.Immutable.ImmutableSortedDictionary\n  isExternal: false\n  name: ToImmutableSortedDictionary<TSource,TKey,TValue>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TValue>, IComparer<TKey>)\n  nameWithType: ImmutableSortedDictionary.ToImmutableSortedDictionary<TSource,TKey,TValue>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TValue>, IComparer<TKey>)\n  fullName: ImmutableSortedDictionary.ToImmutableSortedDictionary<TSource,TKey,TValue>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TValue>, IComparer<TKey>)\n- uid: System.Collections.Immutable.ImmutableSortedDictionary.ToImmutableSortedDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IComparer{``1},System.Collections.Generic.IEqualityComparer{``2})\n  parent: System.Collections.Immutable.ImmutableSortedDictionary\n  isExternal: false\n  name: ToImmutableSortedDictionary<TSource,TKey,TValue>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TValue>, IComparer<TKey>, IEqualityComparer<TValue>)\n  nameWithType: ImmutableSortedDictionary.ToImmutableSortedDictionary<TSource,TKey,TValue>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TValue>, IComparer<TKey>, IEqualityComparer<TValue>)\n  fullName: ImmutableSortedDictionary.ToImmutableSortedDictionary<TSource,TKey,TValue>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TValue>, IComparer<TKey>, IEqualityComparer<TValue>)\n- uid: System.Collections.Immutable.ImmutableSortedSet.ToImmutableSortedSet``1(System.Collections.Generic.IEnumerable{``0})\n  parent: System.Collections.Immutable.ImmutableSortedSet\n  isExternal: false\n  name: ToImmutableSortedSet<TSource>(IEnumerable<TSource>)\n  nameWithType: ImmutableSortedSet.ToImmutableSortedSet<TSource>(IEnumerable<TSource>)\n  fullName: ImmutableSortedSet.ToImmutableSortedSet<TSource>(IEnumerable<TSource>)\n- uid: System.Collections.Immutable.ImmutableSortedSet.ToImmutableSortedSet``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IComparer{``0})\n  parent: System.Collections.Immutable.ImmutableSortedSet\n  isExternal: false\n  name: ToImmutableSortedSet<TSource>(IEnumerable<TSource>, IComparer<TSource>)\n  nameWithType: ImmutableSortedSet.ToImmutableSortedSet<TSource>(IEnumerable<TSource>, IComparer<TSource>)\n  fullName: ImmutableSortedSet.ToImmutableSortedSet<TSource>(IEnumerable<TSource>, IComparer<TSource>)\n- uid: System.Data.DataTableExtensions.CopyToDataTable``1(System.Collections.Generic.IEnumerable{``0})\n  parent: System.Data.DataTableExtensions\n  isExternal: false\n  name: CopyToDataTable<T>(IEnumerable<T>)\n  nameWithType: DataTableExtensions.CopyToDataTable<T>(IEnumerable<T>)\n  fullName: DataTableExtensions.CopyToDataTable<T>(IEnumerable<T>)\n- uid: System.Data.DataTableExtensions.CopyToDataTable``1(System.Collections.Generic.IEnumerable{``0},System.Data.DataTable,System.Data.LoadOption)\n  parent: System.Data.DataTableExtensions\n  isExternal: false\n  name: CopyToDataTable<T>(IEnumerable<T>, DataTable, LoadOption)\n  nameWithType: DataTableExtensions.CopyToDataTable<T>(IEnumerable<T>, DataTable, LoadOption)\n  fullName: DataTableExtensions.CopyToDataTable<T>(IEnumerable<T>, DataTable, LoadOption)\n- uid: System.Data.DataTableExtensions.CopyToDataTable``1(System.Collections.Generic.IEnumerable{``0},System.Data.DataTable,System.Data.LoadOption,System.Data.FillErrorEventHandler)\n  parent: System.Data.DataTableExtensions\n  isExternal: false\n  name: CopyToDataTable<T>(IEnumerable<T>, DataTable, LoadOption, FillErrorEventHandler)\n  nameWithType: DataTableExtensions.CopyToDataTable<T>(IEnumerable<T>, DataTable, LoadOption, FillErrorEventHandler)\n  fullName: DataTableExtensions.CopyToDataTable<T>(IEnumerable<T>, DataTable, LoadOption, FillErrorEventHandler)\n- uid: System.Linq.Enumerable.Aggregate``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,``0})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Aggregate<TSource>(IEnumerable<TSource>, Func<TSource,TSource,TSource>)\n  nameWithType: Enumerable.Aggregate<TSource>(IEnumerable<TSource>, Func<TSource,TSource,TSource>)\n  fullName: Enumerable.Aggregate<TSource>(IEnumerable<TSource>, Func<TSource,TSource,TSource>)\n- uid: System.Linq.Enumerable.Aggregate``2(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Aggregate<TSource,TAccumulate>(IEnumerable<TSource>, TAccumulate, Func<TAccumulate,TSource,TAccumulate>)\n  nameWithType: Enumerable.Aggregate<TSource,TAccumulate>(IEnumerable<TSource>, TAccumulate, Func<TAccumulate,TSource,TAccumulate>)\n  fullName: Enumerable.Aggregate<TSource,TAccumulate>(IEnumerable<TSource>, TAccumulate, Func<TAccumulate,TSource,TAccumulate>)\n- uid: System.Linq.Enumerable.Aggregate``3(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``2})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Aggregate<TSource,TAccumulate,TResult>(IEnumerable<TSource>, TAccumulate, Func<TAccumulate,TSource,TAccumulate>, Func<TAccumulate,TResult>)\n  nameWithType: Enumerable.Aggregate<TSource,TAccumulate,TResult>(IEnumerable<TSource>, TAccumulate, Func<TAccumulate,TSource,TAccumulate>, Func<TAccumulate,TResult>)\n  fullName: Enumerable.Aggregate<TSource,TAccumulate,TResult>(IEnumerable<TSource>, TAccumulate, Func<TAccumulate,TSource,TAccumulate>, Func<TAccumulate,TResult>)\n- uid: System.Linq.Enumerable.All``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: All<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n  nameWithType: Enumerable.All<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n  fullName: Enumerable.All<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n- uid: System.Linq.Enumerable.Any``1(System.Collections.Generic.IEnumerable{``0})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Any<TSource>(IEnumerable<TSource>)\n  nameWithType: Enumerable.Any<TSource>(IEnumerable<TSource>)\n  fullName: Enumerable.Any<TSource>(IEnumerable<TSource>)\n- uid: System.Linq.Enumerable.Any``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Any<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n  nameWithType: Enumerable.Any<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n  fullName: Enumerable.Any<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n- uid: System.Linq.Enumerable.Append``1(System.Collections.Generic.IEnumerable{``0},``0)\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Append<TSource>(IEnumerable<TSource>, TSource)\n  nameWithType: Enumerable.Append<TSource>(IEnumerable<TSource>, TSource)\n  fullName: Enumerable.Append<TSource>(IEnumerable<TSource>, TSource)\n- uid: System.Linq.Enumerable.AsEnumerable``1(System.Collections.Generic.IEnumerable{``0})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: AsEnumerable<TSource>(IEnumerable<TSource>)\n  nameWithType: Enumerable.AsEnumerable<TSource>(IEnumerable<TSource>)\n  fullName: Enumerable.AsEnumerable<TSource>(IEnumerable<TSource>)\n- uid: System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Decimal})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Average(IEnumerable<Decimal>)\n  nameWithType: Enumerable.Average(IEnumerable<Decimal>)\n  fullName: Enumerable.Average(IEnumerable<Decimal>)\n- uid: System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Double})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Average(IEnumerable<Double>)\n  nameWithType: Enumerable.Average(IEnumerable<Double>)\n  fullName: Enumerable.Average(IEnumerable<Double>)\n- uid: System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Int32})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Average(IEnumerable<Int32>)\n  nameWithType: Enumerable.Average(IEnumerable<Int32>)\n  fullName: Enumerable.Average(IEnumerable<Int32>)\n- uid: System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Int64})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Average(IEnumerable<Int64>)\n  nameWithType: Enumerable.Average(IEnumerable<Int64>)\n  fullName: Enumerable.Average(IEnumerable<Int64>)\n- uid: System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Average(IEnumerable<Nullable<Decimal>>)\n  nameWithType: Enumerable.Average(IEnumerable<Nullable<Decimal>>)\n  fullName: Enumerable.Average(IEnumerable<Nullable<Decimal>>)\n- uid: System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Average(IEnumerable<Nullable<Double>>)\n  nameWithType: Enumerable.Average(IEnumerable<Nullable<Double>>)\n  fullName: Enumerable.Average(IEnumerable<Nullable<Double>>)\n- uid: System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Average(IEnumerable<Nullable<Int32>>)\n  nameWithType: Enumerable.Average(IEnumerable<Nullable<Int32>>)\n  fullName: Enumerable.Average(IEnumerable<Nullable<Int32>>)\n- uid: System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Average(IEnumerable<Nullable<Int64>>)\n  nameWithType: Enumerable.Average(IEnumerable<Nullable<Int64>>)\n  fullName: Enumerable.Average(IEnumerable<Nullable<Int64>>)\n- uid: System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Average(IEnumerable<Nullable<Single>>)\n  nameWithType: Enumerable.Average(IEnumerable<Nullable<Single>>)\n  fullName: Enumerable.Average(IEnumerable<Nullable<Single>>)\n- uid: System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Single})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Average(IEnumerable<Single>)\n  nameWithType: Enumerable.Average(IEnumerable<Single>)\n  fullName: Enumerable.Average(IEnumerable<Single>)\n- uid: System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Average<TSource>(IEnumerable<TSource>, Func<TSource,Decimal>)\n  nameWithType: Enumerable.Average<TSource>(IEnumerable<TSource>, Func<TSource,Decimal>)\n  fullName: Enumerable.Average<TSource>(IEnumerable<TSource>, Func<TSource,Decimal>)\n- uid: System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Average<TSource>(IEnumerable<TSource>, Func<TSource,Double>)\n  nameWithType: Enumerable.Average<TSource>(IEnumerable<TSource>, Func<TSource,Double>)\n  fullName: Enumerable.Average<TSource>(IEnumerable<TSource>, Func<TSource,Double>)\n- uid: System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Average<TSource>(IEnumerable<TSource>, Func<TSource,Int32>)\n  nameWithType: Enumerable.Average<TSource>(IEnumerable<TSource>, Func<TSource,Int32>)\n  fullName: Enumerable.Average<TSource>(IEnumerable<TSource>, Func<TSource,Int32>)\n- uid: System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Average<TSource>(IEnumerable<TSource>, Func<TSource,Int64>)\n  nameWithType: Enumerable.Average<TSource>(IEnumerable<TSource>, Func<TSource,Int64>)\n  fullName: Enumerable.Average<TSource>(IEnumerable<TSource>, Func<TSource,Int64>)\n- uid: System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Average<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Decimal>>)\n  nameWithType: Enumerable.Average<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Decimal>>)\n  fullName: Enumerable.Average<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Decimal>>)\n- uid: System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Average<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Double>>)\n  nameWithType: Enumerable.Average<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Double>>)\n  fullName: Enumerable.Average<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Double>>)\n- uid: System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Average<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Int32>>)\n  nameWithType: Enumerable.Average<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Int32>>)\n  fullName: Enumerable.Average<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Int32>>)\n- uid: System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Average<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Int64>>)\n  nameWithType: Enumerable.Average<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Int64>>)\n  fullName: Enumerable.Average<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Int64>>)\n- uid: System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Average<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Single>>)\n  nameWithType: Enumerable.Average<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Single>>)\n  fullName: Enumerable.Average<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Single>>)\n- uid: System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Average<TSource>(IEnumerable<TSource>, Func<TSource,Single>)\n  nameWithType: Enumerable.Average<TSource>(IEnumerable<TSource>, Func<TSource,Single>)\n  fullName: Enumerable.Average<TSource>(IEnumerable<TSource>, Func<TSource,Single>)\n- uid: System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Cast<TResult>(IEnumerable)\n  nameWithType: Enumerable.Cast<TResult>(IEnumerable)\n  fullName: Enumerable.Cast<TResult>(IEnumerable)\n- uid: System.Linq.Enumerable.Concat``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Concat<TSource>(IEnumerable<TSource>, IEnumerable<TSource>)\n  nameWithType: Enumerable.Concat<TSource>(IEnumerable<TSource>, IEnumerable<TSource>)\n  fullName: Enumerable.Concat<TSource>(IEnumerable<TSource>, IEnumerable<TSource>)\n- uid: System.Linq.Enumerable.Contains``1(System.Collections.Generic.IEnumerable{``0},``0)\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Contains<TSource>(IEnumerable<TSource>, TSource)\n  nameWithType: Enumerable.Contains<TSource>(IEnumerable<TSource>, TSource)\n  fullName: Enumerable.Contains<TSource>(IEnumerable<TSource>, TSource)\n- uid: System.Linq.Enumerable.Contains``1(System.Collections.Generic.IEnumerable{``0},``0,System.Collections.Generic.IEqualityComparer{``0})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Contains<TSource>(IEnumerable<TSource>, TSource, IEqualityComparer<TSource>)\n  nameWithType: Enumerable.Contains<TSource>(IEnumerable<TSource>, TSource, IEqualityComparer<TSource>)\n  fullName: Enumerable.Contains<TSource>(IEnumerable<TSource>, TSource, IEqualityComparer<TSource>)\n- uid: System.Linq.Enumerable.Count``1(System.Collections.Generic.IEnumerable{``0})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Count<TSource>(IEnumerable<TSource>)\n  nameWithType: Enumerable.Count<TSource>(IEnumerable<TSource>)\n  fullName: Enumerable.Count<TSource>(IEnumerable<TSource>)\n- uid: System.Linq.Enumerable.Count``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Count<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n  nameWithType: Enumerable.Count<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n  fullName: Enumerable.Count<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n- uid: System.Linq.Enumerable.DefaultIfEmpty``1(System.Collections.Generic.IEnumerable{``0})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: DefaultIfEmpty<TSource>(IEnumerable<TSource>)\n  nameWithType: Enumerable.DefaultIfEmpty<TSource>(IEnumerable<TSource>)\n  fullName: Enumerable.DefaultIfEmpty<TSource>(IEnumerable<TSource>)\n- uid: System.Linq.Enumerable.DefaultIfEmpty``1(System.Collections.Generic.IEnumerable{``0},``0)\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: DefaultIfEmpty<TSource>(IEnumerable<TSource>, TSource)\n  nameWithType: Enumerable.DefaultIfEmpty<TSource>(IEnumerable<TSource>, TSource)\n  fullName: Enumerable.DefaultIfEmpty<TSource>(IEnumerable<TSource>, TSource)\n- uid: System.Linq.Enumerable.Distinct``1(System.Collections.Generic.IEnumerable{``0})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Distinct<TSource>(IEnumerable<TSource>)\n  nameWithType: Enumerable.Distinct<TSource>(IEnumerable<TSource>)\n  fullName: Enumerable.Distinct<TSource>(IEnumerable<TSource>)\n- uid: System.Linq.Enumerable.Distinct``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Distinct<TSource>(IEnumerable<TSource>, IEqualityComparer<TSource>)\n  nameWithType: Enumerable.Distinct<TSource>(IEnumerable<TSource>, IEqualityComparer<TSource>)\n  fullName: Enumerable.Distinct<TSource>(IEnumerable<TSource>, IEqualityComparer<TSource>)\n- uid: System.Linq.Enumerable.ElementAt``1(System.Collections.Generic.IEnumerable{``0},System.Int32)\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: ElementAt<TSource>(IEnumerable<TSource>, Int32)\n  nameWithType: Enumerable.ElementAt<TSource>(IEnumerable<TSource>, Int32)\n  fullName: Enumerable.ElementAt<TSource>(IEnumerable<TSource>, Int32)\n- uid: System.Linq.Enumerable.ElementAtOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Int32)\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: ElementAtOrDefault<TSource>(IEnumerable<TSource>, Int32)\n  nameWithType: Enumerable.ElementAtOrDefault<TSource>(IEnumerable<TSource>, Int32)\n  fullName: Enumerable.ElementAtOrDefault<TSource>(IEnumerable<TSource>, Int32)\n- uid: System.Linq.Enumerable.Except``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Except<TSource>(IEnumerable<TSource>, IEnumerable<TSource>)\n  nameWithType: Enumerable.Except<TSource>(IEnumerable<TSource>, IEnumerable<TSource>)\n  fullName: Enumerable.Except<TSource>(IEnumerable<TSource>, IEnumerable<TSource>)\n- uid: System.Linq.Enumerable.Except``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Except<TSource>(IEnumerable<TSource>, IEnumerable<TSource>, IEqualityComparer<TSource>)\n  nameWithType: Enumerable.Except<TSource>(IEnumerable<TSource>, IEnumerable<TSource>, IEqualityComparer<TSource>)\n  fullName: Enumerable.Except<TSource>(IEnumerable<TSource>, IEnumerable<TSource>, IEqualityComparer<TSource>)\n- uid: System.Linq.Enumerable.First``1(System.Collections.Generic.IEnumerable{``0})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: First<TSource>(IEnumerable<TSource>)\n  nameWithType: Enumerable.First<TSource>(IEnumerable<TSource>)\n  fullName: Enumerable.First<TSource>(IEnumerable<TSource>)\n- uid: System.Linq.Enumerable.First``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: First<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n  nameWithType: Enumerable.First<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n  fullName: Enumerable.First<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n- uid: System.Linq.Enumerable.FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: FirstOrDefault<TSource>(IEnumerable<TSource>)\n  nameWithType: Enumerable.FirstOrDefault<TSource>(IEnumerable<TSource>)\n  fullName: Enumerable.FirstOrDefault<TSource>(IEnumerable<TSource>)\n- uid: System.Linq.Enumerable.FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: FirstOrDefault<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n  nameWithType: Enumerable.FirstOrDefault<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n  fullName: Enumerable.FirstOrDefault<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n- uid: System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: GroupBy<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>)\n  nameWithType: Enumerable.GroupBy<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>)\n  fullName: Enumerable.GroupBy<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>)\n- uid: System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: GroupBy<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>, IEqualityComparer<TKey>)\n  nameWithType: Enumerable.GroupBy<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>, IEqualityComparer<TKey>)\n  fullName: Enumerable.GroupBy<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>, IEqualityComparer<TKey>)\n- uid: System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: GroupBy<TSource,TKey,TElement>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TElement>)\n  nameWithType: Enumerable.GroupBy<TSource,TKey,TElement>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TElement>)\n  fullName: Enumerable.GroupBy<TSource,TKey,TElement>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TElement>)\n- uid: System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: GroupBy<TSource,TKey,TElement>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TElement>, IEqualityComparer<TKey>)\n  nameWithType: Enumerable.GroupBy<TSource,TKey,TElement>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TElement>, IEqualityComparer<TKey>)\n  fullName: Enumerable.GroupBy<TSource,TKey,TElement>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TElement>, IEqualityComparer<TKey>)\n- uid: System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: GroupBy<TSource,TKey,TResult>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TKey,IEnumerable<TSource>,TResult>)\n  nameWithType: Enumerable.GroupBy<TSource,TKey,TResult>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TKey,IEnumerable<TSource>,TResult>)\n  fullName: Enumerable.GroupBy<TSource,TKey,TResult>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TKey,IEnumerable<TSource>,TResult>)\n- uid: System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2},System.Collections.Generic.IEqualityComparer{``1})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: GroupBy<TSource,TKey,TResult>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TKey,IEnumerable<TSource>,TResult>, IEqualityComparer<TKey>)\n  nameWithType: Enumerable.GroupBy<TSource,TKey,TResult>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TKey,IEnumerable<TSource>,TResult>, IEqualityComparer<TKey>)\n  fullName: Enumerable.GroupBy<TSource,TKey,TResult>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TKey,IEnumerable<TSource>,TResult>, IEqualityComparer<TKey>)\n- uid: System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: GroupBy<TSource,TKey,TElement,TResult>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TElement>, Func<TKey,IEnumerable<TElement>,TResult>)\n  nameWithType: Enumerable.GroupBy<TSource,TKey,TElement,TResult>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TElement>, Func<TKey,IEnumerable<TElement>,TResult>)\n  fullName: Enumerable.GroupBy<TSource,TKey,TElement,TResult>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TElement>, Func<TKey,IEnumerable<TElement>,TResult>)\n- uid: System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3},System.Collections.Generic.IEqualityComparer{``1})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: GroupBy<TSource,TKey,TElement,TResult>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TElement>, Func<TKey,IEnumerable<TElement>,TResult>, IEqualityComparer<TKey>)\n  nameWithType: Enumerable.GroupBy<TSource,TKey,TElement,TResult>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TElement>, Func<TKey,IEnumerable<TElement>,TResult>, IEqualityComparer<TKey>)\n  fullName: Enumerable.GroupBy<TSource,TKey,TElement,TResult>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TElement>, Func<TKey,IEnumerable<TElement>,TResult>, IEqualityComparer<TKey>)\n- uid: System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: GroupJoin<TOuter,TInner,TKey,TResult>(IEnumerable<TOuter>, IEnumerable<TInner>, Func<TOuter,TKey>, Func<TInner,TKey>, Func<TOuter,IEnumerable<TInner>,TResult>)\n  nameWithType: Enumerable.GroupJoin<TOuter,TInner,TKey,TResult>(IEnumerable<TOuter>, IEnumerable<TInner>, Func<TOuter,TKey>, Func<TInner,TKey>, Func<TOuter,IEnumerable<TInner>,TResult>)\n  fullName: Enumerable.GroupJoin<TOuter,TInner,TKey,TResult>(IEnumerable<TOuter>, IEnumerable<TInner>, Func<TOuter,TKey>, Func<TInner,TKey>, Func<TOuter,IEnumerable<TInner>,TResult>)\n- uid: System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: GroupJoin<TOuter,TInner,TKey,TResult>(IEnumerable<TOuter>, IEnumerable<TInner>, Func<TOuter,TKey>, Func<TInner,TKey>, Func<TOuter,IEnumerable<TInner>,TResult>, IEqualityComparer<TKey>)\n  nameWithType: Enumerable.GroupJoin<TOuter,TInner,TKey,TResult>(IEnumerable<TOuter>, IEnumerable<TInner>, Func<TOuter,TKey>, Func<TInner,TKey>, Func<TOuter,IEnumerable<TInner>,TResult>, IEqualityComparer<TKey>)\n  fullName: Enumerable.GroupJoin<TOuter,TInner,TKey,TResult>(IEnumerable<TOuter>, IEnumerable<TInner>, Func<TOuter,TKey>, Func<TInner,TKey>, Func<TOuter,IEnumerable<TInner>,TResult>, IEqualityComparer<TKey>)\n- uid: System.Linq.Enumerable.Intersect``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Intersect<TSource>(IEnumerable<TSource>, IEnumerable<TSource>)\n  nameWithType: Enumerable.Intersect<TSource>(IEnumerable<TSource>, IEnumerable<TSource>)\n  fullName: Enumerable.Intersect<TSource>(IEnumerable<TSource>, IEnumerable<TSource>)\n- uid: System.Linq.Enumerable.Intersect``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Intersect<TSource>(IEnumerable<TSource>, IEnumerable<TSource>, IEqualityComparer<TSource>)\n  nameWithType: Enumerable.Intersect<TSource>(IEnumerable<TSource>, IEnumerable<TSource>, IEqualityComparer<TSource>)\n  fullName: Enumerable.Intersect<TSource>(IEnumerable<TSource>, IEnumerable<TSource>, IEqualityComparer<TSource>)\n- uid: System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Join<TOuter,TInner,TKey,TResult>(IEnumerable<TOuter>, IEnumerable<TInner>, Func<TOuter,TKey>, Func<TInner,TKey>, Func<TOuter,TInner,TResult>)\n  nameWithType: Enumerable.Join<TOuter,TInner,TKey,TResult>(IEnumerable<TOuter>, IEnumerable<TInner>, Func<TOuter,TKey>, Func<TInner,TKey>, Func<TOuter,TInner,TResult>)\n  fullName: Enumerable.Join<TOuter,TInner,TKey,TResult>(IEnumerable<TOuter>, IEnumerable<TInner>, Func<TOuter,TKey>, Func<TInner,TKey>, Func<TOuter,TInner,TResult>)\n- uid: System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Join<TOuter,TInner,TKey,TResult>(IEnumerable<TOuter>, IEnumerable<TInner>, Func<TOuter,TKey>, Func<TInner,TKey>, Func<TOuter,TInner,TResult>, IEqualityComparer<TKey>)\n  nameWithType: Enumerable.Join<TOuter,TInner,TKey,TResult>(IEnumerable<TOuter>, IEnumerable<TInner>, Func<TOuter,TKey>, Func<TInner,TKey>, Func<TOuter,TInner,TResult>, IEqualityComparer<TKey>)\n  fullName: Enumerable.Join<TOuter,TInner,TKey,TResult>(IEnumerable<TOuter>, IEnumerable<TInner>, Func<TOuter,TKey>, Func<TInner,TKey>, Func<TOuter,TInner,TResult>, IEqualityComparer<TKey>)\n- uid: System.Linq.Enumerable.Last``1(System.Collections.Generic.IEnumerable{``0})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Last<TSource>(IEnumerable<TSource>)\n  nameWithType: Enumerable.Last<TSource>(IEnumerable<TSource>)\n  fullName: Enumerable.Last<TSource>(IEnumerable<TSource>)\n- uid: System.Linq.Enumerable.Last``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Last<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n  nameWithType: Enumerable.Last<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n  fullName: Enumerable.Last<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n- uid: System.Linq.Enumerable.LastOrDefault``1(System.Collections.Generic.IEnumerable{``0})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: LastOrDefault<TSource>(IEnumerable<TSource>)\n  nameWithType: Enumerable.LastOrDefault<TSource>(IEnumerable<TSource>)\n  fullName: Enumerable.LastOrDefault<TSource>(IEnumerable<TSource>)\n- uid: System.Linq.Enumerable.LastOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: LastOrDefault<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n  nameWithType: Enumerable.LastOrDefault<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n  fullName: Enumerable.LastOrDefault<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n- uid: System.Linq.Enumerable.LongCount``1(System.Collections.Generic.IEnumerable{``0})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: LongCount<TSource>(IEnumerable<TSource>)\n  nameWithType: Enumerable.LongCount<TSource>(IEnumerable<TSource>)\n  fullName: Enumerable.LongCount<TSource>(IEnumerable<TSource>)\n- uid: System.Linq.Enumerable.LongCount``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: LongCount<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n  nameWithType: Enumerable.LongCount<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n  fullName: Enumerable.LongCount<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n- uid: System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Decimal})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Max(IEnumerable<Decimal>)\n  nameWithType: Enumerable.Max(IEnumerable<Decimal>)\n  fullName: Enumerable.Max(IEnumerable<Decimal>)\n- uid: System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Double})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Max(IEnumerable<Double>)\n  nameWithType: Enumerable.Max(IEnumerable<Double>)\n  fullName: Enumerable.Max(IEnumerable<Double>)\n- uid: System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Int32})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Max(IEnumerable<Int32>)\n  nameWithType: Enumerable.Max(IEnumerable<Int32>)\n  fullName: Enumerable.Max(IEnumerable<Int32>)\n- uid: System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Int64})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Max(IEnumerable<Int64>)\n  nameWithType: Enumerable.Max(IEnumerable<Int64>)\n  fullName: Enumerable.Max(IEnumerable<Int64>)\n- uid: System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Max(IEnumerable<Nullable<Decimal>>)\n  nameWithType: Enumerable.Max(IEnumerable<Nullable<Decimal>>)\n  fullName: Enumerable.Max(IEnumerable<Nullable<Decimal>>)\n- uid: System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Max(IEnumerable<Nullable<Double>>)\n  nameWithType: Enumerable.Max(IEnumerable<Nullable<Double>>)\n  fullName: Enumerable.Max(IEnumerable<Nullable<Double>>)\n- uid: System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Max(IEnumerable<Nullable<Int32>>)\n  nameWithType: Enumerable.Max(IEnumerable<Nullable<Int32>>)\n  fullName: Enumerable.Max(IEnumerable<Nullable<Int32>>)\n- uid: System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Max(IEnumerable<Nullable<Int64>>)\n  nameWithType: Enumerable.Max(IEnumerable<Nullable<Int64>>)\n  fullName: Enumerable.Max(IEnumerable<Nullable<Int64>>)\n- uid: System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Max(IEnumerable<Nullable<Single>>)\n  nameWithType: Enumerable.Max(IEnumerable<Nullable<Single>>)\n  fullName: Enumerable.Max(IEnumerable<Nullable<Single>>)\n- uid: System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Single})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Max(IEnumerable<Single>)\n  nameWithType: Enumerable.Max(IEnumerable<Single>)\n  fullName: Enumerable.Max(IEnumerable<Single>)\n- uid: System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Max<TSource>(IEnumerable<TSource>)\n  nameWithType: Enumerable.Max<TSource>(IEnumerable<TSource>)\n  fullName: Enumerable.Max<TSource>(IEnumerable<TSource>)\n- uid: System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Max<TSource>(IEnumerable<TSource>, Func<TSource,Decimal>)\n  nameWithType: Enumerable.Max<TSource>(IEnumerable<TSource>, Func<TSource,Decimal>)\n  fullName: Enumerable.Max<TSource>(IEnumerable<TSource>, Func<TSource,Decimal>)\n- uid: System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Max<TSource>(IEnumerable<TSource>, Func<TSource,Double>)\n  nameWithType: Enumerable.Max<TSource>(IEnumerable<TSource>, Func<TSource,Double>)\n  fullName: Enumerable.Max<TSource>(IEnumerable<TSource>, Func<TSource,Double>)\n- uid: System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Max<TSource>(IEnumerable<TSource>, Func<TSource,Int32>)\n  nameWithType: Enumerable.Max<TSource>(IEnumerable<TSource>, Func<TSource,Int32>)\n  fullName: Enumerable.Max<TSource>(IEnumerable<TSource>, Func<TSource,Int32>)\n- uid: System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Max<TSource>(IEnumerable<TSource>, Func<TSource,Int64>)\n  nameWithType: Enumerable.Max<TSource>(IEnumerable<TSource>, Func<TSource,Int64>)\n  fullName: Enumerable.Max<TSource>(IEnumerable<TSource>, Func<TSource,Int64>)\n- uid: System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Max<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Decimal>>)\n  nameWithType: Enumerable.Max<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Decimal>>)\n  fullName: Enumerable.Max<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Decimal>>)\n- uid: System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Max<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Double>>)\n  nameWithType: Enumerable.Max<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Double>>)\n  fullName: Enumerable.Max<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Double>>)\n- uid: System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Max<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Int32>>)\n  nameWithType: Enumerable.Max<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Int32>>)\n  fullName: Enumerable.Max<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Int32>>)\n- uid: System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Max<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Int64>>)\n  nameWithType: Enumerable.Max<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Int64>>)\n  fullName: Enumerable.Max<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Int64>>)\n- uid: System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Max<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Single>>)\n  nameWithType: Enumerable.Max<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Single>>)\n  fullName: Enumerable.Max<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Single>>)\n- uid: System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Max<TSource>(IEnumerable<TSource>, Func<TSource,Single>)\n  nameWithType: Enumerable.Max<TSource>(IEnumerable<TSource>, Func<TSource,Single>)\n  fullName: Enumerable.Max<TSource>(IEnumerable<TSource>, Func<TSource,Single>)\n- uid: System.Linq.Enumerable.Max``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Max<TSource,TResult>(IEnumerable<TSource>, Func<TSource,TResult>)\n  nameWithType: Enumerable.Max<TSource,TResult>(IEnumerable<TSource>, Func<TSource,TResult>)\n  fullName: Enumerable.Max<TSource,TResult>(IEnumerable<TSource>, Func<TSource,TResult>)\n- uid: System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Decimal})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Min(IEnumerable<Decimal>)\n  nameWithType: Enumerable.Min(IEnumerable<Decimal>)\n  fullName: Enumerable.Min(IEnumerable<Decimal>)\n- uid: System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Double})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Min(IEnumerable<Double>)\n  nameWithType: Enumerable.Min(IEnumerable<Double>)\n  fullName: Enumerable.Min(IEnumerable<Double>)\n- uid: System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Int32})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Min(IEnumerable<Int32>)\n  nameWithType: Enumerable.Min(IEnumerable<Int32>)\n  fullName: Enumerable.Min(IEnumerable<Int32>)\n- uid: System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Int64})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Min(IEnumerable<Int64>)\n  nameWithType: Enumerable.Min(IEnumerable<Int64>)\n  fullName: Enumerable.Min(IEnumerable<Int64>)\n- uid: System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Min(IEnumerable<Nullable<Decimal>>)\n  nameWithType: Enumerable.Min(IEnumerable<Nullable<Decimal>>)\n  fullName: Enumerable.Min(IEnumerable<Nullable<Decimal>>)\n- uid: System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Min(IEnumerable<Nullable<Double>>)\n  nameWithType: Enumerable.Min(IEnumerable<Nullable<Double>>)\n  fullName: Enumerable.Min(IEnumerable<Nullable<Double>>)\n- uid: System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Min(IEnumerable<Nullable<Int32>>)\n  nameWithType: Enumerable.Min(IEnumerable<Nullable<Int32>>)\n  fullName: Enumerable.Min(IEnumerable<Nullable<Int32>>)\n- uid: System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Min(IEnumerable<Nullable<Int64>>)\n  nameWithType: Enumerable.Min(IEnumerable<Nullable<Int64>>)\n  fullName: Enumerable.Min(IEnumerable<Nullable<Int64>>)\n- uid: System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Min(IEnumerable<Nullable<Single>>)\n  nameWithType: Enumerable.Min(IEnumerable<Nullable<Single>>)\n  fullName: Enumerable.Min(IEnumerable<Nullable<Single>>)\n- uid: System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Single})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Min(IEnumerable<Single>)\n  nameWithType: Enumerable.Min(IEnumerable<Single>)\n  fullName: Enumerable.Min(IEnumerable<Single>)\n- uid: System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Min<TSource>(IEnumerable<TSource>)\n  nameWithType: Enumerable.Min<TSource>(IEnumerable<TSource>)\n  fullName: Enumerable.Min<TSource>(IEnumerable<TSource>)\n- uid: System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Min<TSource>(IEnumerable<TSource>, Func<TSource,Decimal>)\n  nameWithType: Enumerable.Min<TSource>(IEnumerable<TSource>, Func<TSource,Decimal>)\n  fullName: Enumerable.Min<TSource>(IEnumerable<TSource>, Func<TSource,Decimal>)\n- uid: System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Min<TSource>(IEnumerable<TSource>, Func<TSource,Double>)\n  nameWithType: Enumerable.Min<TSource>(IEnumerable<TSource>, Func<TSource,Double>)\n  fullName: Enumerable.Min<TSource>(IEnumerable<TSource>, Func<TSource,Double>)\n- uid: System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Min<TSource>(IEnumerable<TSource>, Func<TSource,Int32>)\n  nameWithType: Enumerable.Min<TSource>(IEnumerable<TSource>, Func<TSource,Int32>)\n  fullName: Enumerable.Min<TSource>(IEnumerable<TSource>, Func<TSource,Int32>)\n- uid: System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Min<TSource>(IEnumerable<TSource>, Func<TSource,Int64>)\n  nameWithType: Enumerable.Min<TSource>(IEnumerable<TSource>, Func<TSource,Int64>)\n  fullName: Enumerable.Min<TSource>(IEnumerable<TSource>, Func<TSource,Int64>)\n- uid: System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Min<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Decimal>>)\n  nameWithType: Enumerable.Min<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Decimal>>)\n  fullName: Enumerable.Min<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Decimal>>)\n- uid: System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Min<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Double>>)\n  nameWithType: Enumerable.Min<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Double>>)\n  fullName: Enumerable.Min<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Double>>)\n- uid: System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Min<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Int32>>)\n  nameWithType: Enumerable.Min<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Int32>>)\n  fullName: Enumerable.Min<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Int32>>)\n- uid: System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Min<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Int64>>)\n  nameWithType: Enumerable.Min<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Int64>>)\n  fullName: Enumerable.Min<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Int64>>)\n- uid: System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Min<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Single>>)\n  nameWithType: Enumerable.Min<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Single>>)\n  fullName: Enumerable.Min<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Single>>)\n- uid: System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Min<TSource>(IEnumerable<TSource>, Func<TSource,Single>)\n  nameWithType: Enumerable.Min<TSource>(IEnumerable<TSource>, Func<TSource,Single>)\n  fullName: Enumerable.Min<TSource>(IEnumerable<TSource>, Func<TSource,Single>)\n- uid: System.Linq.Enumerable.Min``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Min<TSource,TResult>(IEnumerable<TSource>, Func<TSource,TResult>)\n  nameWithType: Enumerable.Min<TSource,TResult>(IEnumerable<TSource>, Func<TSource,TResult>)\n  fullName: Enumerable.Min<TSource,TResult>(IEnumerable<TSource>, Func<TSource,TResult>)\n- uid: System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: OfType<TResult>(IEnumerable)\n  nameWithType: Enumerable.OfType<TResult>(IEnumerable)\n  fullName: Enumerable.OfType<TResult>(IEnumerable)\n- uid: System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: OrderBy<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>)\n  nameWithType: Enumerable.OrderBy<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>)\n  fullName: Enumerable.OrderBy<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>)\n- uid: System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: OrderBy<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>, IComparer<TKey>)\n  nameWithType: Enumerable.OrderBy<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>, IComparer<TKey>)\n  fullName: Enumerable.OrderBy<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>, IComparer<TKey>)\n- uid: System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: OrderByDescending<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>)\n  nameWithType: Enumerable.OrderByDescending<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>)\n  fullName: Enumerable.OrderByDescending<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>)\n- uid: System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: OrderByDescending<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>, IComparer<TKey>)\n  nameWithType: Enumerable.OrderByDescending<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>, IComparer<TKey>)\n  fullName: Enumerable.OrderByDescending<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>, IComparer<TKey>)\n- uid: System.Linq.Enumerable.Prepend``1(System.Collections.Generic.IEnumerable{``0},``0)\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Prepend<TSource>(IEnumerable<TSource>, TSource)\n  nameWithType: Enumerable.Prepend<TSource>(IEnumerable<TSource>, TSource)\n  fullName: Enumerable.Prepend<TSource>(IEnumerable<TSource>, TSource)\n- uid: System.Linq.Enumerable.Reverse``1(System.Collections.Generic.IEnumerable{``0})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Reverse<TSource>(IEnumerable<TSource>)\n  nameWithType: Enumerable.Reverse<TSource>(IEnumerable<TSource>)\n  fullName: Enumerable.Reverse<TSource>(IEnumerable<TSource>)\n- uid: System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Select<TSource,TResult>(IEnumerable<TSource>, Func<TSource,TResult>)\n  nameWithType: Enumerable.Select<TSource,TResult>(IEnumerable<TSource>, Func<TSource,TResult>)\n  fullName: Enumerable.Select<TSource,TResult>(IEnumerable<TSource>, Func<TSource,TResult>)\n- uid: System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,``1})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Select<TSource,TResult>(IEnumerable<TSource>, Func<TSource,Int32,TResult>)\n  nameWithType: Enumerable.Select<TSource,TResult>(IEnumerable<TSource>, Func<TSource,Int32,TResult>)\n  fullName: Enumerable.Select<TSource,TResult>(IEnumerable<TSource>, Func<TSource,Int32,TResult>)\n- uid: System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: SelectMany<TSource,TResult>(IEnumerable<TSource>, Func<TSource,IEnumerable<TResult>>)\n  nameWithType: Enumerable.SelectMany<TSource,TResult>(IEnumerable<TSource>, Func<TSource,IEnumerable<TResult>>)\n  fullName: Enumerable.SelectMany<TSource,TResult>(IEnumerable<TSource>, Func<TSource,IEnumerable<TResult>>)\n- uid: System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: SelectMany<TSource,TResult>(IEnumerable<TSource>, Func<TSource,Int32,IEnumerable<TResult>>)\n  nameWithType: Enumerable.SelectMany<TSource,TResult>(IEnumerable<TSource>, Func<TSource,Int32,IEnumerable<TResult>>)\n  fullName: Enumerable.SelectMany<TSource,TResult>(IEnumerable<TSource>, Func<TSource,Int32,IEnumerable<TResult>>)\n- uid: System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: SelectMany<TSource,TCollection,TResult>(IEnumerable<TSource>, Func<TSource,IEnumerable<TCollection>>, Func<TSource,TCollection,TResult>)\n  nameWithType: Enumerable.SelectMany<TSource,TCollection,TResult>(IEnumerable<TSource>, Func<TSource,IEnumerable<TCollection>>, Func<TSource,TCollection,TResult>)\n  fullName: Enumerable.SelectMany<TSource,TCollection,TResult>(IEnumerable<TSource>, Func<TSource,IEnumerable<TCollection>>, Func<TSource,TCollection,TResult>)\n- uid: System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: SelectMany<TSource,TCollection,TResult>(IEnumerable<TSource>, Func<TSource,Int32,IEnumerable<TCollection>>, Func<TSource,TCollection,TResult>)\n  nameWithType: Enumerable.SelectMany<TSource,TCollection,TResult>(IEnumerable<TSource>, Func<TSource,Int32,IEnumerable<TCollection>>, Func<TSource,TCollection,TResult>)\n  fullName: Enumerable.SelectMany<TSource,TCollection,TResult>(IEnumerable<TSource>, Func<TSource,Int32,IEnumerable<TCollection>>, Func<TSource,TCollection,TResult>)\n- uid: System.Linq.Enumerable.SequenceEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: SequenceEqual<TSource>(IEnumerable<TSource>, IEnumerable<TSource>)\n  nameWithType: Enumerable.SequenceEqual<TSource>(IEnumerable<TSource>, IEnumerable<TSource>)\n  fullName: Enumerable.SequenceEqual<TSource>(IEnumerable<TSource>, IEnumerable<TSource>)\n- uid: System.Linq.Enumerable.SequenceEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: SequenceEqual<TSource>(IEnumerable<TSource>, IEnumerable<TSource>, IEqualityComparer<TSource>)\n  nameWithType: Enumerable.SequenceEqual<TSource>(IEnumerable<TSource>, IEnumerable<TSource>, IEqualityComparer<TSource>)\n  fullName: Enumerable.SequenceEqual<TSource>(IEnumerable<TSource>, IEnumerable<TSource>, IEqualityComparer<TSource>)\n- uid: System.Linq.Enumerable.Single``1(System.Collections.Generic.IEnumerable{``0})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Single<TSource>(IEnumerable<TSource>)\n  nameWithType: Enumerable.Single<TSource>(IEnumerable<TSource>)\n  fullName: Enumerable.Single<TSource>(IEnumerable<TSource>)\n- uid: System.Linq.Enumerable.Single``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Single<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n  nameWithType: Enumerable.Single<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n  fullName: Enumerable.Single<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n- uid: System.Linq.Enumerable.SingleOrDefault``1(System.Collections.Generic.IEnumerable{``0})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: SingleOrDefault<TSource>(IEnumerable<TSource>)\n  nameWithType: Enumerable.SingleOrDefault<TSource>(IEnumerable<TSource>)\n  fullName: Enumerable.SingleOrDefault<TSource>(IEnumerable<TSource>)\n- uid: System.Linq.Enumerable.SingleOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: SingleOrDefault<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n  nameWithType: Enumerable.SingleOrDefault<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n  fullName: Enumerable.SingleOrDefault<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n- uid: System.Linq.Enumerable.Skip``1(System.Collections.Generic.IEnumerable{``0},System.Int32)\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Skip<TSource>(IEnumerable<TSource>, Int32)\n  nameWithType: Enumerable.Skip<TSource>(IEnumerable<TSource>, Int32)\n  fullName: Enumerable.Skip<TSource>(IEnumerable<TSource>, Int32)\n- uid: System.Linq.Enumerable.SkipLast``1(System.Collections.Generic.IEnumerable{``0},System.Int32)\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: SkipLast<TSource>(IEnumerable<TSource>, Int32)\n  nameWithType: Enumerable.SkipLast<TSource>(IEnumerable<TSource>, Int32)\n  fullName: Enumerable.SkipLast<TSource>(IEnumerable<TSource>, Int32)\n- uid: System.Linq.Enumerable.SkipWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: SkipWhile<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n  nameWithType: Enumerable.SkipWhile<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n  fullName: Enumerable.SkipWhile<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n- uid: System.Linq.Enumerable.SkipWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: SkipWhile<TSource>(IEnumerable<TSource>, Func<TSource,Int32,Boolean>)\n  nameWithType: Enumerable.SkipWhile<TSource>(IEnumerable<TSource>, Func<TSource,Int32,Boolean>)\n  fullName: Enumerable.SkipWhile<TSource>(IEnumerable<TSource>, Func<TSource,Int32,Boolean>)\n- uid: System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Decimal})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Sum(IEnumerable<Decimal>)\n  nameWithType: Enumerable.Sum(IEnumerable<Decimal>)\n  fullName: Enumerable.Sum(IEnumerable<Decimal>)\n- uid: System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Double})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Sum(IEnumerable<Double>)\n  nameWithType: Enumerable.Sum(IEnumerable<Double>)\n  fullName: Enumerable.Sum(IEnumerable<Double>)\n- uid: System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Int32})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Sum(IEnumerable<Int32>)\n  nameWithType: Enumerable.Sum(IEnumerable<Int32>)\n  fullName: Enumerable.Sum(IEnumerable<Int32>)\n- uid: System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Int64})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Sum(IEnumerable<Int64>)\n  nameWithType: Enumerable.Sum(IEnumerable<Int64>)\n  fullName: Enumerable.Sum(IEnumerable<Int64>)\n- uid: System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Sum(IEnumerable<Nullable<Decimal>>)\n  nameWithType: Enumerable.Sum(IEnumerable<Nullable<Decimal>>)\n  fullName: Enumerable.Sum(IEnumerable<Nullable<Decimal>>)\n- uid: System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Sum(IEnumerable<Nullable<Double>>)\n  nameWithType: Enumerable.Sum(IEnumerable<Nullable<Double>>)\n  fullName: Enumerable.Sum(IEnumerable<Nullable<Double>>)\n- uid: System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Sum(IEnumerable<Nullable<Int32>>)\n  nameWithType: Enumerable.Sum(IEnumerable<Nullable<Int32>>)\n  fullName: Enumerable.Sum(IEnumerable<Nullable<Int32>>)\n- uid: System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Sum(IEnumerable<Nullable<Int64>>)\n  nameWithType: Enumerable.Sum(IEnumerable<Nullable<Int64>>)\n  fullName: Enumerable.Sum(IEnumerable<Nullable<Int64>>)\n- uid: System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Sum(IEnumerable<Nullable<Single>>)\n  nameWithType: Enumerable.Sum(IEnumerable<Nullable<Single>>)\n  fullName: Enumerable.Sum(IEnumerable<Nullable<Single>>)\n- uid: System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Single})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Sum(IEnumerable<Single>)\n  nameWithType: Enumerable.Sum(IEnumerable<Single>)\n  fullName: Enumerable.Sum(IEnumerable<Single>)\n- uid: System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Sum<TSource>(IEnumerable<TSource>, Func<TSource,Decimal>)\n  nameWithType: Enumerable.Sum<TSource>(IEnumerable<TSource>, Func<TSource,Decimal>)\n  fullName: Enumerable.Sum<TSource>(IEnumerable<TSource>, Func<TSource,Decimal>)\n- uid: System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Sum<TSource>(IEnumerable<TSource>, Func<TSource,Double>)\n  nameWithType: Enumerable.Sum<TSource>(IEnumerable<TSource>, Func<TSource,Double>)\n  fullName: Enumerable.Sum<TSource>(IEnumerable<TSource>, Func<TSource,Double>)\n- uid: System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Sum<TSource>(IEnumerable<TSource>, Func<TSource,Int32>)\n  nameWithType: Enumerable.Sum<TSource>(IEnumerable<TSource>, Func<TSource,Int32>)\n  fullName: Enumerable.Sum<TSource>(IEnumerable<TSource>, Func<TSource,Int32>)\n- uid: System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Sum<TSource>(IEnumerable<TSource>, Func<TSource,Int64>)\n  nameWithType: Enumerable.Sum<TSource>(IEnumerable<TSource>, Func<TSource,Int64>)\n  fullName: Enumerable.Sum<TSource>(IEnumerable<TSource>, Func<TSource,Int64>)\n- uid: System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Sum<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Decimal>>)\n  nameWithType: Enumerable.Sum<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Decimal>>)\n  fullName: Enumerable.Sum<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Decimal>>)\n- uid: System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Sum<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Double>>)\n  nameWithType: Enumerable.Sum<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Double>>)\n  fullName: Enumerable.Sum<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Double>>)\n- uid: System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Sum<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Int32>>)\n  nameWithType: Enumerable.Sum<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Int32>>)\n  fullName: Enumerable.Sum<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Int32>>)\n- uid: System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Sum<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Int64>>)\n  nameWithType: Enumerable.Sum<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Int64>>)\n  fullName: Enumerable.Sum<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Int64>>)\n- uid: System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Sum<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Single>>)\n  nameWithType: Enumerable.Sum<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Single>>)\n  fullName: Enumerable.Sum<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Single>>)\n- uid: System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Sum<TSource>(IEnumerable<TSource>, Func<TSource,Single>)\n  nameWithType: Enumerable.Sum<TSource>(IEnumerable<TSource>, Func<TSource,Single>)\n  fullName: Enumerable.Sum<TSource>(IEnumerable<TSource>, Func<TSource,Single>)\n- uid: System.Linq.Enumerable.Take``1(System.Collections.Generic.IEnumerable{``0},System.Int32)\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Take<TSource>(IEnumerable<TSource>, Int32)\n  nameWithType: Enumerable.Take<TSource>(IEnumerable<TSource>, Int32)\n  fullName: Enumerable.Take<TSource>(IEnumerable<TSource>, Int32)\n- uid: System.Linq.Enumerable.TakeLast``1(System.Collections.Generic.IEnumerable{``0},System.Int32)\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: TakeLast<TSource>(IEnumerable<TSource>, Int32)\n  nameWithType: Enumerable.TakeLast<TSource>(IEnumerable<TSource>, Int32)\n  fullName: Enumerable.TakeLast<TSource>(IEnumerable<TSource>, Int32)\n- uid: System.Linq.Enumerable.TakeWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: TakeWhile<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n  nameWithType: Enumerable.TakeWhile<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n  fullName: Enumerable.TakeWhile<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n- uid: System.Linq.Enumerable.TakeWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: TakeWhile<TSource>(IEnumerable<TSource>, Func<TSource,Int32,Boolean>)\n  nameWithType: Enumerable.TakeWhile<TSource>(IEnumerable<TSource>, Func<TSource,Int32,Boolean>)\n  fullName: Enumerable.TakeWhile<TSource>(IEnumerable<TSource>, Func<TSource,Int32,Boolean>)\n- uid: System.Linq.Enumerable.ToArray``1(System.Collections.Generic.IEnumerable{``0})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: ToArray<TSource>(IEnumerable<TSource>)\n  nameWithType: Enumerable.ToArray<TSource>(IEnumerable<TSource>)\n  fullName: Enumerable.ToArray<TSource>(IEnumerable<TSource>)\n- uid: System.Linq.Enumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: ToDictionary<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>)\n  nameWithType: Enumerable.ToDictionary<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>)\n  fullName: Enumerable.ToDictionary<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>)\n- uid: System.Linq.Enumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: ToDictionary<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>, IEqualityComparer<TKey>)\n  nameWithType: Enumerable.ToDictionary<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>, IEqualityComparer<TKey>)\n  fullName: Enumerable.ToDictionary<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>, IEqualityComparer<TKey>)\n- uid: System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: ToDictionary<TSource,TKey,TElement>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TElement>)\n  nameWithType: Enumerable.ToDictionary<TSource,TKey,TElement>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TElement>)\n  fullName: Enumerable.ToDictionary<TSource,TKey,TElement>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TElement>)\n- uid: System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: ToDictionary<TSource,TKey,TElement>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TElement>, IEqualityComparer<TKey>)\n  nameWithType: Enumerable.ToDictionary<TSource,TKey,TElement>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TElement>, IEqualityComparer<TKey>)\n  fullName: Enumerable.ToDictionary<TSource,TKey,TElement>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TElement>, IEqualityComparer<TKey>)\n- uid: System.Linq.Enumerable.ToHashSet``1(System.Collections.Generic.IEnumerable{``0})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: ToHashSet<TSource>(IEnumerable<TSource>)\n  nameWithType: Enumerable.ToHashSet<TSource>(IEnumerable<TSource>)\n  fullName: Enumerable.ToHashSet<TSource>(IEnumerable<TSource>)\n- uid: System.Linq.Enumerable.ToHashSet``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: ToHashSet<TSource>(IEnumerable<TSource>, IEqualityComparer<TSource>)\n  nameWithType: Enumerable.ToHashSet<TSource>(IEnumerable<TSource>, IEqualityComparer<TSource>)\n  fullName: Enumerable.ToHashSet<TSource>(IEnumerable<TSource>, IEqualityComparer<TSource>)\n- uid: System.Linq.Enumerable.ToList``1(System.Collections.Generic.IEnumerable{``0})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: ToList<TSource>(IEnumerable<TSource>)\n  nameWithType: Enumerable.ToList<TSource>(IEnumerable<TSource>)\n  fullName: Enumerable.ToList<TSource>(IEnumerable<TSource>)\n- uid: System.Linq.Enumerable.ToLookup``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: ToLookup<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>)\n  nameWithType: Enumerable.ToLookup<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>)\n  fullName: Enumerable.ToLookup<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>)\n- uid: System.Linq.Enumerable.ToLookup``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: ToLookup<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>, IEqualityComparer<TKey>)\n  nameWithType: Enumerable.ToLookup<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>, IEqualityComparer<TKey>)\n  fullName: Enumerable.ToLookup<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>, IEqualityComparer<TKey>)\n- uid: System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: ToLookup<TSource,TKey,TElement>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TElement>)\n  nameWithType: Enumerable.ToLookup<TSource,TKey,TElement>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TElement>)\n  fullName: Enumerable.ToLookup<TSource,TKey,TElement>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TElement>)\n- uid: System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: ToLookup<TSource,TKey,TElement>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TElement>, IEqualityComparer<TKey>)\n  nameWithType: Enumerable.ToLookup<TSource,TKey,TElement>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TElement>, IEqualityComparer<TKey>)\n  fullName: Enumerable.ToLookup<TSource,TKey,TElement>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TElement>, IEqualityComparer<TKey>)\n- uid: System.Linq.Enumerable.Union``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Union<TSource>(IEnumerable<TSource>, IEnumerable<TSource>)\n  nameWithType: Enumerable.Union<TSource>(IEnumerable<TSource>, IEnumerable<TSource>)\n  fullName: Enumerable.Union<TSource>(IEnumerable<TSource>, IEnumerable<TSource>)\n- uid: System.Linq.Enumerable.Union``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Union<TSource>(IEnumerable<TSource>, IEnumerable<TSource>, IEqualityComparer<TSource>)\n  nameWithType: Enumerable.Union<TSource>(IEnumerable<TSource>, IEnumerable<TSource>, IEqualityComparer<TSource>)\n  fullName: Enumerable.Union<TSource>(IEnumerable<TSource>, IEnumerable<TSource>, IEqualityComparer<TSource>)\n- uid: System.Linq.Enumerable.Where``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Where<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n  nameWithType: Enumerable.Where<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n  fullName: Enumerable.Where<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n- uid: System.Linq.Enumerable.Where``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Where<TSource>(IEnumerable<TSource>, Func<TSource,Int32,Boolean>)\n  nameWithType: Enumerable.Where<TSource>(IEnumerable<TSource>, Func<TSource,Int32,Boolean>)\n  fullName: Enumerable.Where<TSource>(IEnumerable<TSource>, Func<TSource,Int32,Boolean>)\n- uid: System.Linq.Enumerable.Zip``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,``2})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Zip<TFirst,TSecond,TResult>(IEnumerable<TFirst>, IEnumerable<TSecond>, Func<TFirst,TSecond,TResult>)\n  nameWithType: Enumerable.Zip<TFirst,TSecond,TResult>(IEnumerable<TFirst>, IEnumerable<TSecond>, Func<TFirst,TSecond,TResult>)\n  fullName: Enumerable.Zip<TFirst,TSecond,TResult>(IEnumerable<TFirst>, IEnumerable<TSecond>, Func<TFirst,TSecond,TResult>)\n- uid: System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)\n  parent: System.Linq.ParallelEnumerable\n  isExternal: false\n  name: AsParallel(IEnumerable)\n  nameWithType: ParallelEnumerable.AsParallel(IEnumerable)\n  fullName: ParallelEnumerable.AsParallel(IEnumerable)\n- uid: System.Linq.ParallelEnumerable.AsParallel``1(System.Collections.Generic.IEnumerable{``0})\n  parent: System.Linq.ParallelEnumerable\n  isExternal: false\n  name: AsParallel<TSource>(IEnumerable<TSource>)\n  nameWithType: ParallelEnumerable.AsParallel<TSource>(IEnumerable<TSource>)\n  fullName: ParallelEnumerable.AsParallel<TSource>(IEnumerable<TSource>)\n- uid: System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)\n  parent: System.Linq.Queryable\n  isExternal: false\n  name: AsQueryable(IEnumerable)\n  nameWithType: Queryable.AsQueryable(IEnumerable)\n  fullName: Queryable.AsQueryable(IEnumerable)\n- uid: System.Linq.Queryable.AsQueryable``1(System.Collections.Generic.IEnumerable{``0})\n  parent: System.Linq.Queryable\n  isExternal: false\n  name: AsQueryable<TElement>(IEnumerable<TElement>)\n  nameWithType: Queryable.AsQueryable<TElement>(IEnumerable<TElement>)\n  fullName: Queryable.AsQueryable<TElement>(IEnumerable<TElement>)\n- uid: System.Xml.Linq.Extensions.Ancestors``1(System.Collections.Generic.IEnumerable{``0})\n  parent: System.Xml.Linq.Extensions\n  isExternal: false\n  name: Ancestors<T>(IEnumerable<T>)\n  nameWithType: Extensions.Ancestors<T>(IEnumerable<T>)\n  fullName: Extensions.Ancestors<T>(IEnumerable<T>)\n- uid: System.Xml.Linq.Extensions.Ancestors``1(System.Collections.Generic.IEnumerable{``0},System.Xml.Linq.XName)\n  parent: System.Xml.Linq.Extensions\n  isExternal: false\n  name: Ancestors<T>(IEnumerable<T>, XName)\n  nameWithType: Extensions.Ancestors<T>(IEnumerable<T>, XName)\n  fullName: Extensions.Ancestors<T>(IEnumerable<T>, XName)\n- uid: System.Xml.Linq.Extensions.AncestorsAndSelf(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement})\n  parent: System.Xml.Linq.Extensions\n  isExternal: false\n  name: AncestorsAndSelf(IEnumerable<XElement>)\n  nameWithType: Extensions.AncestorsAndSelf(IEnumerable<XElement>)\n  fullName: Extensions.AncestorsAndSelf(IEnumerable<XElement>)\n- uid: System.Xml.Linq.Extensions.AncestorsAndSelf(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement},System.Xml.Linq.XName)\n  parent: System.Xml.Linq.Extensions\n  isExternal: false\n  name: AncestorsAndSelf(IEnumerable<XElement>, XName)\n  nameWithType: Extensions.AncestorsAndSelf(IEnumerable<XElement>, XName)\n  fullName: Extensions.AncestorsAndSelf(IEnumerable<XElement>, XName)\n- uid: System.Xml.Linq.Extensions.Attributes(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement})\n  parent: System.Xml.Linq.Extensions\n  isExternal: false\n  name: Attributes(IEnumerable<XElement>)\n  nameWithType: Extensions.Attributes(IEnumerable<XElement>)\n  fullName: Extensions.Attributes(IEnumerable<XElement>)\n- uid: System.Xml.Linq.Extensions.Attributes(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement},System.Xml.Linq.XName)\n  parent: System.Xml.Linq.Extensions\n  isExternal: false\n  name: Attributes(IEnumerable<XElement>, XName)\n  nameWithType: Extensions.Attributes(IEnumerable<XElement>, XName)\n  fullName: Extensions.Attributes(IEnumerable<XElement>, XName)\n- uid: System.Xml.Linq.Extensions.DescendantNodes``1(System.Collections.Generic.IEnumerable{``0})\n  parent: System.Xml.Linq.Extensions\n  isExternal: false\n  name: DescendantNodes<T>(IEnumerable<T>)\n  nameWithType: Extensions.DescendantNodes<T>(IEnumerable<T>)\n  fullName: Extensions.DescendantNodes<T>(IEnumerable<T>)\n- uid: System.Xml.Linq.Extensions.DescendantNodesAndSelf(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement})\n  parent: System.Xml.Linq.Extensions\n  isExternal: false\n  name: DescendantNodesAndSelf(IEnumerable<XElement>)\n  nameWithType: Extensions.DescendantNodesAndSelf(IEnumerable<XElement>)\n  fullName: Extensions.DescendantNodesAndSelf(IEnumerable<XElement>)\n- uid: System.Xml.Linq.Extensions.Descendants``1(System.Collections.Generic.IEnumerable{``0})\n  parent: System.Xml.Linq.Extensions\n  isExternal: false\n  name: Descendants<T>(IEnumerable<T>)\n  nameWithType: Extensions.Descendants<T>(IEnumerable<T>)\n  fullName: Extensions.Descendants<T>(IEnumerable<T>)\n- uid: System.Xml.Linq.Extensions.Descendants``1(System.Collections.Generic.IEnumerable{``0},System.Xml.Linq.XName)\n  parent: System.Xml.Linq.Extensions\n  isExternal: false\n  name: Descendants<T>(IEnumerable<T>, XName)\n  nameWithType: Extensions.Descendants<T>(IEnumerable<T>, XName)\n  fullName: Extensions.Descendants<T>(IEnumerable<T>, XName)\n- uid: System.Xml.Linq.Extensions.DescendantsAndSelf(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement})\n  parent: System.Xml.Linq.Extensions\n  isExternal: false\n  name: DescendantsAndSelf(IEnumerable<XElement>)\n  nameWithType: Extensions.DescendantsAndSelf(IEnumerable<XElement>)\n  fullName: Extensions.DescendantsAndSelf(IEnumerable<XElement>)\n- uid: System.Xml.Linq.Extensions.DescendantsAndSelf(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement},System.Xml.Linq.XName)\n  parent: System.Xml.Linq.Extensions\n  isExternal: false\n  name: DescendantsAndSelf(IEnumerable<XElement>, XName)\n  nameWithType: Extensions.DescendantsAndSelf(IEnumerable<XElement>, XName)\n  fullName: Extensions.DescendantsAndSelf(IEnumerable<XElement>, XName)\n- uid: System.Xml.Linq.Extensions.Elements``1(System.Collections.Generic.IEnumerable{``0})\n  parent: System.Xml.Linq.Extensions\n  isExternal: false\n  name: Elements<T>(IEnumerable<T>)\n  nameWithType: Extensions.Elements<T>(IEnumerable<T>)\n  fullName: Extensions.Elements<T>(IEnumerable<T>)\n- uid: System.Xml.Linq.Extensions.Elements``1(System.Collections.Generic.IEnumerable{``0},System.Xml.Linq.XName)\n  parent: System.Xml.Linq.Extensions\n  isExternal: false\n  name: Elements<T>(IEnumerable<T>, XName)\n  nameWithType: Extensions.Elements<T>(IEnumerable<T>, XName)\n  fullName: Extensions.Elements<T>(IEnumerable<T>, XName)\n- uid: System.Xml.Linq.Extensions.InDocumentOrder``1(System.Collections.Generic.IEnumerable{``0})\n  parent: System.Xml.Linq.Extensions\n  isExternal: false\n  name: InDocumentOrder<T>(IEnumerable<T>)\n  nameWithType: Extensions.InDocumentOrder<T>(IEnumerable<T>)\n  fullName: Extensions.InDocumentOrder<T>(IEnumerable<T>)\n- uid: System.Xml.Linq.Extensions.Nodes``1(System.Collections.Generic.IEnumerable{``0})\n  parent: System.Xml.Linq.Extensions\n  isExternal: false\n  name: Nodes<T>(IEnumerable<T>)\n  nameWithType: Extensions.Nodes<T>(IEnumerable<T>)\n  fullName: Extensions.Nodes<T>(IEnumerable<T>)\n- uid: System.Xml.Linq.Extensions.Remove(System.Collections.Generic.IEnumerable{System.Xml.Linq.XAttribute})\n  parent: System.Xml.Linq.Extensions\n  isExternal: false\n  name: Remove(IEnumerable<XAttribute>)\n  nameWithType: Extensions.Remove(IEnumerable<XAttribute>)\n  fullName: Extensions.Remove(IEnumerable<XAttribute>)\n- uid: System.Xml.Linq.Extensions.Remove``1(System.Collections.Generic.IEnumerable{``0})\n  parent: System.Xml.Linq.Extensions\n  isExternal: false\n  name: Remove<T>(IEnumerable<T>)\n  nameWithType: Extensions.Remove<T>(IEnumerable<T>)\n  fullName: Extensions.Remove<T>(IEnumerable<T>)\n- uid: System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{TKey,TValue}}\n  parent: System.Collections.Generic\n  isExternal: false\n  name: ICollection<KeyValuePair<TKey,TValue>>\n  nameWithType: ICollection<KeyValuePair<TKey,TValue>>\n  fullName: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>\n  spec.csharp:\n  - uid: System.Collections.Generic.ICollection`1\n    name: ICollection\n    nameWithType: ICollection\n    fullName: System.Collections.Generic.ICollection\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Collections.Generic.KeyValuePair`2\n    name: KeyValuePair\n    nameWithType: KeyValuePair\n    fullName: System.Collections.Generic.KeyValuePair\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: TKey\n    name: TKey\n    nameWithType: TKey\n    fullName: TKey\n  - name: ','\n    nameWithType: ','\n    fullName: ','\n  - uid: TValue\n    name: TValue\n    nameWithType: TValue\n    fullName: TValue\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Collections.Generic.IDictionary`2\n  parent: System.Collections.Generic\n  isExternal: false\n  name: IDictionary<TKey,TValue>\n  nameWithType: IDictionary<TKey,TValue>\n  fullName: System.Collections.Generic.IDictionary<TKey,TValue>\n- uid: System.Collections.Generic.IReadOnlyCollection`1\n  name: IReadOnlyCollection<T>\n  nameWithType: IReadOnlyCollection<T>\n  fullName: System.Collections.Generic.IReadOnlyCollection<T>\n- uid: System.Collections.Generic.IReadOnlyCollection{System.Collections.Generic.KeyValuePair{TKey,TValue}}\n  parent: System.Collections.Generic\n  isExternal: false\n  name: IReadOnlyCollection<KeyValuePair<TKey,TValue>>\n  nameWithType: IReadOnlyCollection<KeyValuePair<TKey,TValue>>\n  fullName: System.Collections.Generic.IReadOnlyCollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>\n  spec.csharp:\n  - uid: System.Collections.Generic.IReadOnlyCollection`1\n    name: IReadOnlyCollection\n    nameWithType: IReadOnlyCollection\n    fullName: System.Collections.Generic.IReadOnlyCollection\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Collections.Generic.KeyValuePair`2\n    name: KeyValuePair\n    nameWithType: KeyValuePair\n    fullName: System.Collections.Generic.KeyValuePair\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: TKey\n    name: TKey\n    nameWithType: TKey\n    fullName: TKey\n  - name: ','\n    nameWithType: ','\n    fullName: ','\n  - uid: TValue\n    name: TValue\n    nameWithType: TValue\n    fullName: TValue\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Collections.Generic.IReadOnlyDictionary`2\n  parent: System.Collections.Generic\n  isExternal: false\n  name: IReadOnlyDictionary<TKey,TValue>\n  nameWithType: IReadOnlyDictionary<TKey,TValue>\n  fullName: System.Collections.Generic.IReadOnlyDictionary<TKey,TValue>\n- uid: System.Collections.IDictionary\n  parent: System.Collections\n  isExternal: false\n  name: IDictionary\n  nameWithType: IDictionary\n  fullName: System.Collections.IDictionary\n"}