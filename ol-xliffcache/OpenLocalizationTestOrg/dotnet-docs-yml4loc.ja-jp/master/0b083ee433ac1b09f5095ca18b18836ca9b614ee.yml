### YamlMime:ManagedReference
items:
- uid: System.Security.Cryptography.ECDsaCng
  commentId: T:System.Security.Cryptography.ECDsaCng
  id: ECDsaCng
  children:
  - System.Security.Cryptography.ECDsaCng.#ctor
  - System.Security.Cryptography.ECDsaCng.#ctor(System.Int32)
  - System.Security.Cryptography.ECDsaCng.#ctor(System.Security.Cryptography.CngKey)
  - System.Security.Cryptography.ECDsaCng.#ctor(System.Security.Cryptography.ECCurve)
  - System.Security.Cryptography.ECDsaCng.Dispose(System.Boolean)
  - System.Security.Cryptography.ECDsaCng.ExportExplicitParameters(System.Boolean)
  - System.Security.Cryptography.ECDsaCng.ExportParameters(System.Boolean)
  - System.Security.Cryptography.ECDsaCng.FromXmlString(System.String)
  - System.Security.Cryptography.ECDsaCng.FromXmlString(System.String,System.Security.Cryptography.ECKeyXmlFormat)
  - System.Security.Cryptography.ECDsaCng.GenerateKey(System.Security.Cryptography.ECCurve)
  - System.Security.Cryptography.ECDsaCng.HashAlgorithm
  - System.Security.Cryptography.ECDsaCng.HashData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName)
  - System.Security.Cryptography.ECDsaCng.HashData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)
  - System.Security.Cryptography.ECDsaCng.ImportParameters(System.Security.Cryptography.ECParameters)
  - System.Security.Cryptography.ECDsaCng.Key
  - System.Security.Cryptography.ECDsaCng.KeySize
  - System.Security.Cryptography.ECDsaCng.LegalKeySizes
  - System.Security.Cryptography.ECDsaCng.SignData(System.Byte[])
  - System.Security.Cryptography.ECDsaCng.SignData(System.IO.Stream)
  - System.Security.Cryptography.ECDsaCng.SignData(System.Byte[],System.Int32,System.Int32)
  - System.Security.Cryptography.ECDsaCng.SignHash(System.Byte[])
  - System.Security.Cryptography.ECDsaCng.ToXmlString(System.Boolean)
  - System.Security.Cryptography.ECDsaCng.ToXmlString(System.Security.Cryptography.ECKeyXmlFormat)
  - System.Security.Cryptography.ECDsaCng.VerifyData(System.Byte[],System.Byte[])
  - System.Security.Cryptography.ECDsaCng.VerifyData(System.IO.Stream,System.Byte[])
  - System.Security.Cryptography.ECDsaCng.VerifyData(System.Byte[],System.Int32,System.Int32,System.Byte[])
  - System.Security.Cryptography.ECDsaCng.VerifyHash(System.Byte[],System.Byte[])
  langs:
  - csharp
  name: ECDsaCng
  nameWithType: ECDsaCng
  fullName: System.Security.Cryptography.ECDsaCng
  type: Class
  assemblies:
  - System.Security.Cryptography.Cng
  - System.Core
  - netstandard
  namespace: System.Security.Cryptography
  summary: Provides a Cryptography Next Generation (CNG) implementation of the Elliptic Curve Digital Signature Algorithm (ECDSA).
  remarks: This class derives from the <xref:System.Security.Cryptography.ECDsa> abstract base class.
  example:
  - "The following example shows how to use the <xref:System.Security.Cryptography.ECDsaCng> class to sign a message and how to use the signature to verify that the message has not been altered.  \n  \n [!code-csharp[ECDsaCng#1](~/samples/snippets/csharp/VS_Snippets_CLR/ecdsacng/cs/program.cs#1)]\n [!code-vb[ECDsaCng#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/ecdsacng/vb/program.vb#1)]"
  syntax:
    content: 'public sealed class ECDsaCng : System.Security.Cryptography.ECDsa'
  inheritance:
  - System.Object
  - System.Security.Cryptography.AsymmetricAlgorithm
  - System.Security.Cryptography.ECDsa
  implements: []
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  - System.Security.Cryptography.AsymmetricAlgorithm.Clear
  - System.Security.Cryptography.AsymmetricAlgorithm.Dispose
  - System.Security.Cryptography.AsymmetricAlgorithm.KeySizeValue
  - System.Security.Cryptography.AsymmetricAlgorithm.LegalKeySizesValue
  - System.Security.Cryptography.ECDsa.Create
  - System.Security.Cryptography.ECDsa.Create(System.Security.Cryptography.ECCurve)
  - System.Security.Cryptography.ECDsa.Create(System.Security.Cryptography.ECParameters)
  - System.Security.Cryptography.ECDsa.Create(System.String)
  - System.Security.Cryptography.ECDsa.KeyExchangeAlgorithm
  - System.Security.Cryptography.ECDsa.SignatureAlgorithm
  - System.Security.Cryptography.ECDsa.SignData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)
  - System.Security.Cryptography.ECDsa.SignData(System.Byte[],System.Security.Cryptography.HashAlgorithmName)
  - System.Security.Cryptography.ECDsa.SignData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName)
  - System.Security.Cryptography.ECDsa.VerifyData(System.Byte[],System.Byte[],System.Security.Cryptography.HashAlgorithmName)
  - System.Security.Cryptography.ECDsa.VerifyData(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Security.Cryptography.HashAlgorithmName)
  - System.Security.Cryptography.ECDsa.VerifyData(System.IO.Stream,System.Byte[],System.Security.Cryptography.HashAlgorithmName)
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/ECDsaCng.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Security.Cryptography.ECDsaCng.#ctor
  commentId: M:System.Security.Cryptography.ECDsaCng.#ctor
  id: '#ctor'
  parent: System.Security.Cryptography.ECDsaCng
  langs:
  - csharp
  name: ECDsaCng()
  nameWithType: ECDsaCng.ECDsaCng()
  fullName: ECDsaCng.ECDsaCng()
  type: Constructor
  assemblies:
  - System.Security.Cryptography.Cng
  - System.Core
  - netstandard
  namespace: System.Security.Cryptography
  summary: Initializes a new instance of the <xref href="System.Security.Cryptography.ECDsaCng"></xref> class with a random key pair.
  remarks: The random key pair has a public key length of 521 bits.
  syntax:
    content: public ECDsaCng ();
    parameters: []
  overload: System.Security.Cryptography.ECDsaCng.#ctor*
  exceptions:
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: Cryptography Next Generation (CNG) classes are not supported on this system.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/ECDsaCng.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Security.Cryptography.ECDsaCng.#ctor(System.Int32)
  commentId: M:System.Security.Cryptography.ECDsaCng.#ctor(System.Int32)
  id: '#ctor(System.Int32)'
  parent: System.Security.Cryptography.ECDsaCng
  langs:
  - csharp
  name: ECDsaCng(Int32)
  nameWithType: ECDsaCng.ECDsaCng(Int32)
  fullName: ECDsaCng.ECDsaCng(Int32)
  type: Constructor
  assemblies:
  - System.Security.Cryptography.Cng
  - System.Core
  - netstandard
  namespace: System.Security.Cryptography
  summary: Initializes a new instance of the <xref href="System.Security.Cryptography.ECDsaCng"></xref> class with a random key pair, using the specified key size.
  remarks: The random key pair will have the public key length defined by the `keySize` parameter.
  syntax:
    content: public ECDsaCng (int keySize);
    parameters:
    - id: keySize
      type: System.Int32
      description: The size of the key. Valid key sizes are 256, 384, and 521 bits.
  overload: System.Security.Cryptography.ECDsaCng.#ctor*
  exceptions:
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: Cryptography Next Generation (CNG) classes are not supported on this system.
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: <code>keySize</code> specifies an invalid length.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/ECDsaCng.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Security.Cryptography.ECDsaCng.#ctor(System.Security.Cryptography.CngKey)
  commentId: M:System.Security.Cryptography.ECDsaCng.#ctor(System.Security.Cryptography.CngKey)
  id: '#ctor(System.Security.Cryptography.CngKey)'
  parent: System.Security.Cryptography.ECDsaCng
  langs:
  - csharp
  name: ECDsaCng(CngKey)
  nameWithType: ECDsaCng.ECDsaCng(CngKey)
  fullName: ECDsaCng.ECDsaCng(CngKey)
  type: Constructor
  assemblies:
  - System.Security.Cryptography.Cng
  - System.Core
  - netstandard
  namespace: System.Security.Cryptography
  summary: Initializes a new instance of the <xref href="System.Security.Cryptography.ECDsaCng"></xref> class by using the specified <xref href="System.Security.Cryptography.CngKey"></xref> object.
  syntax:
    content: public ECDsaCng (System.Security.Cryptography.CngKey key);
    parameters:
    - id: key
      type: System.Security.Cryptography.CngKey
      description: The key that will be used as input to the cryptographic operations performed by the current object.
  overload: System.Security.Cryptography.ECDsaCng.#ctor*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: <code>key</code> does not specify an Elliptic Curve Digital Signature Algorithm (ECDSA) group.
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>key</code> is `null`.
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: Cryptography Next Generation (CNG) classes are not supported on this system.
  attributes: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/ECDsaCng.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Security.Cryptography.ECDsaCng.#ctor(System.Security.Cryptography.ECCurve)
  commentId: M:System.Security.Cryptography.ECDsaCng.#ctor(System.Security.Cryptography.ECCurve)
  id: '#ctor(System.Security.Cryptography.ECCurve)'
  parent: System.Security.Cryptography.ECDsaCng
  langs:
  - csharp
  name: ECDsaCng(ECCurve)
  nameWithType: ECDsaCng.ECDsaCng(ECCurve)
  fullName: ECDsaCng.ECDsaCng(ECCurve)
  type: Constructor
  assemblies:
  - System.Security.Cryptography.Cng
  - System.Core
  - netstandard
  namespace: System.Security.Cryptography
  summary: Initializes a new instance of the <xref href="System.Security.Cryptography.ECDsaCng"></xref> class whose public/private key pair is generated over the specified curve.
  remarks: '`curve` must validate (that is, it must return `true`) when passed to the <xref:System.Security.Cryptography.ECCurve.Validate%2A?displayProperty=fullName> method and must be either a named or explicit prime.'
  syntax:
    content: public ECDsaCng (System.Security.Cryptography.ECCurve curve);
    parameters:
    - id: curve
      type: System.Security.Cryptography.ECCurve
      description: The curve used to generate the public/private key pair.
  overload: System.Security.Cryptography.ECDsaCng.#ctor*
  exceptions:
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: <code>curve</code> does not validate.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/ECDsaCng.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Security.Cryptography.ECDsaCng.Dispose(System.Boolean)
  commentId: M:System.Security.Cryptography.ECDsaCng.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.Security.Cryptography.ECDsaCng
  langs:
  - csharp
  name: Dispose(Boolean)
  nameWithType: ECDsaCng.Dispose(Boolean)
  fullName: ECDsaCng.Dispose(Boolean)
  type: Method
  assemblies:
  - System.Security.Cryptography.Cng
  - System.Core
  - netstandard
  namespace: System.Security.Cryptography
  syntax:
    content: protected override void Dispose (bool disposing);
    parameters:
    - id: disposing
      type: System.Boolean
      description: ''
  overload: System.Security.Cryptography.ECDsaCng.Dispose*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/ECDsaCng.xml
- uid: System.Security.Cryptography.ECDsaCng.ExportExplicitParameters(System.Boolean)
  commentId: M:System.Security.Cryptography.ECDsaCng.ExportExplicitParameters(System.Boolean)
  id: ExportExplicitParameters(System.Boolean)
  parent: System.Security.Cryptography.ECDsaCng
  langs:
  - csharp
  name: ExportExplicitParameters(Boolean)
  nameWithType: ECDsaCng.ExportExplicitParameters(Boolean)
  fullName: ECDsaCng.ExportExplicitParameters(Boolean)
  type: Method
  assemblies:
  - System.Security.Cryptography.Cng
  - System.Core
  - netstandard
  namespace: System.Security.Cryptography
  summary: Exports the key and explicit curve parameters used by the Elliptic curve cryptography (ECC) object into an <xref href="System.Security.Cryptography.ECParameters"></xref> object.
  syntax:
    content: public override System.Security.Cryptography.ECParameters ExportExplicitParameters (bool includePrivateParameters);
    parameters:
    - id: includePrivateParameters
      type: System.Boolean
      description: '`true` to include private parameters; otherwise, `false`.'
    return:
      type: System.Security.Cryptography.ECParameters
      description: The key and explicit curve parameters used by the ECC object.
  overload: System.Security.Cryptography.ECDsaCng.ExportExplicitParameters*
  exceptions:
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: An error occurred while obtaining the curve values.
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: Explicit export is not supported by this platform. Windows 10 or higher is required.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.7
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/ECDsaCng.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Security.Cryptography.ECDsaCng.ExportParameters(System.Boolean)
  commentId: M:System.Security.Cryptography.ECDsaCng.ExportParameters(System.Boolean)
  id: ExportParameters(System.Boolean)
  parent: System.Security.Cryptography.ECDsaCng
  langs:
  - csharp
  name: ExportParameters(Boolean)
  nameWithType: ECDsaCng.ExportParameters(Boolean)
  fullName: ECDsaCng.ExportParameters(Boolean)
  type: Method
  assemblies:
  - System.Security.Cryptography.Cng
  - System.Core
  - netstandard
  namespace: System.Security.Cryptography
  summary: Exports the key used by the Elliptic curve cryptography (ECC) object into an <xref href="System.Security.Cryptography.ECParameters"></xref> object. If the key was created as a named curve, the <xref href="System.Security.Cryptography.ECParameters.Curve"></xref> field contains named curve parameters; otherwise, it contains explicit parameters.
  syntax:
    content: public override System.Security.Cryptography.ECParameters ExportParameters (bool includePrivateParameters);
    parameters:
    - id: includePrivateParameters
      type: System.Boolean
      description: '`true` to include private parameters; otherwise, `false`.'
    return:
      type: System.Security.Cryptography.ECParameters
      description: The key and named curve parameters used by the ECC object.
  overload: System.Security.Cryptography.ECDsaCng.ExportParameters*
  exceptions:
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: An error occurred while obtaining the curve values.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.7
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/ECDsaCng.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Security.Cryptography.ECDsaCng.FromXmlString(System.String)
  commentId: M:System.Security.Cryptography.ECDsaCng.FromXmlString(System.String)
  id: FromXmlString(System.String)
  parent: System.Security.Cryptography.ECDsaCng
  langs:
  - csharp
  name: FromXmlString(String)
  nameWithType: ECDsaCng.FromXmlString(String)
  fullName: ECDsaCng.FromXmlString(String)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Security.Cryptography
  summary: This method is not implemented.
  remarks: To deserialize an XML key, use the <xref:System.Security.Cryptography.ECDsaCng.FromXmlString%28System.String%2CSystem.Security.Cryptography.ECKeyXmlFormat%29> overload instead.
  syntax:
    content: public override void FromXmlString (string xmlString);
    parameters:
    - id: xmlString
      type: System.String
      description: The XML-based key information to be deserialized.
  overload: System.Security.Cryptography.ECDsaCng.FromXmlString*
  exceptions:
  - type: System.NotImplementedException
    commentId: T:System.NotImplementedException
    description: This method was not overridden for this instance.
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/ECDsaCng.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Security.Cryptography.ECDsaCng.FromXmlString(System.String,System.Security.Cryptography.ECKeyXmlFormat)
  commentId: M:System.Security.Cryptography.ECDsaCng.FromXmlString(System.String,System.Security.Cryptography.ECKeyXmlFormat)
  id: FromXmlString(System.String,System.Security.Cryptography.ECKeyXmlFormat)
  parent: System.Security.Cryptography.ECDsaCng
  langs:
  - csharp
  name: FromXmlString(String, ECKeyXmlFormat)
  nameWithType: ECDsaCng.FromXmlString(String, ECKeyXmlFormat)
  fullName: ECDsaCng.FromXmlString(String, ECKeyXmlFormat)
  type: Method
  assemblies:
  - System.Core
  - System.Security.Cryptography.Cng
  namespace: System.Security.Cryptography
  summary: Deserializes the key information from an XML string by using the specified format.
  syntax:
    content: public void FromXmlString (string xml, System.Security.Cryptography.ECKeyXmlFormat format);
    parameters:
    - id: xml
      type: System.String
      description: The XML-based key information to be deserialized.
    - id: format
      type: System.Security.Cryptography.ECKeyXmlFormat
      description: One of the enumeration values that specifies the format of the XML string. The only currently accepted format is <xref href="System.Security.Cryptography.ECKeyXmlFormat.Rfc4050"></xref>.
  overload: System.Security.Cryptography.ECDsaCng.FromXmlString*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>xml</code> is `null`.
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: <code>format</code> specifies an invalid format. The only accepted value is <xref href="System.Security.Cryptography.ECKeyXmlFormat.Rfc4050"></xref>.
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: All other errors.
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/ECDsaCng.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Security.Cryptography.ECDsaCng.GenerateKey(System.Security.Cryptography.ECCurve)
  commentId: M:System.Security.Cryptography.ECDsaCng.GenerateKey(System.Security.Cryptography.ECCurve)
  id: GenerateKey(System.Security.Cryptography.ECCurve)
  parent: System.Security.Cryptography.ECDsaCng
  langs:
  - csharp
  name: GenerateKey(ECCurve)
  nameWithType: ECDsaCng.GenerateKey(ECCurve)
  fullName: ECDsaCng.GenerateKey(ECCurve)
  type: Method
  assemblies:
  - System.Security.Cryptography.Cng
  - System.Core
  - netstandard
  namespace: System.Security.Cryptography
  summary: Generates a key to use for the ECDsaCng algorithm.
  syntax:
    content: public override void GenerateKey (System.Security.Cryptography.ECCurve curve);
    parameters:
    - id: curve
      type: System.Security.Cryptography.ECCurve
      description: The curve to use to generate the key.
  overload: System.Security.Cryptography.ECDsaCng.GenerateKey*
  exceptions:
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: <code>curve</code> does not validate.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.7
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/ECDsaCng.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Security.Cryptography.ECDsaCng.HashAlgorithm
  commentId: P:System.Security.Cryptography.ECDsaCng.HashAlgorithm
  id: HashAlgorithm
  parent: System.Security.Cryptography.ECDsaCng
  langs:
  - csharp
  name: HashAlgorithm
  nameWithType: ECDsaCng.HashAlgorithm
  fullName: ECDsaCng.HashAlgorithm
  type: Property
  assemblies:
  - System.Core
  - System.Security.Cryptography.Cng
  namespace: System.Security.Cryptography
  summary: Gets or sets the hash algorithm to use when signing and verifying data.
  remarks: "This property accepts the following algorithms: <xref:System.Security.Cryptography.CngAlgorithm.MD5%2A>, <xref:System.Security.Cryptography.CngAlgorithm.Sha1%2A>, <xref:System.Security.Cryptography.CngAlgorithm.Sha256%2A>, <xref:System.Security.Cryptography.CngAlgorithm.Sha384%2A>, and <xref:System.Security.Cryptography.CngAlgorithm.Sha512%2A>.  \n  \n Other custom hash algorithms may also be used.  \n  \n The default algorithm is <xref:System.Security.Cryptography.CngAlgorithm.Sha256%2A>.  \n  \n This property is not used if you are signing or verifying data that is already hashed."
  syntax:
    content: public System.Security.Cryptography.CngAlgorithm HashAlgorithm { get; set; }
    return:
      type: System.Security.Cryptography.CngAlgorithm
      description: An object that specifies the hash algorithm.
  overload: System.Security.Cryptography.ECDsaCng.HashAlgorithm*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The value is `null`.
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/ECDsaCng.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Security.Cryptography.ECDsaCng.HashData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName)
  commentId: M:System.Security.Cryptography.ECDsaCng.HashData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName)
  id: HashData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName)
  parent: System.Security.Cryptography.ECDsaCng
  langs:
  - csharp
  name: HashData(Stream, HashAlgorithmName)
  nameWithType: ECDsaCng.HashData(Stream, HashAlgorithmName)
  fullName: ECDsaCng.HashData(Stream, HashAlgorithmName)
  type: Method
  assemblies:
  - System.Security.Cryptography.Cng
  - System.Core
  - netstandard
  namespace: System.Security.Cryptography
  syntax:
    content: protected override byte[] HashData (System.IO.Stream data, System.Security.Cryptography.HashAlgorithmName hashAlgorithm);
    parameters:
    - id: data
      type: System.IO.Stream
      description: ''
    - id: hashAlgorithm
      type: System.Security.Cryptography.HashAlgorithmName
      description: ''
    return:
      type: System.Byte[]
      description: ''
  overload: System.Security.Cryptography.ECDsaCng.HashData*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.7
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/ECDsaCng.xml
- uid: System.Security.Cryptography.ECDsaCng.HashData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)
  commentId: M:System.Security.Cryptography.ECDsaCng.HashData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)
  id: HashData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)
  parent: System.Security.Cryptography.ECDsaCng
  langs:
  - csharp
  name: HashData(Byte[], Int32, Int32, HashAlgorithmName)
  nameWithType: ECDsaCng.HashData(Byte[], Int32, Int32, HashAlgorithmName)
  fullName: ECDsaCng.HashData(Byte[], Int32, Int32, HashAlgorithmName)
  type: Method
  assemblies:
  - System.Security.Cryptography.Cng
  - System.Core
  - netstandard
  namespace: System.Security.Cryptography
  syntax:
    content: protected override byte[] HashData (byte[] data, int offset, int count, System.Security.Cryptography.HashAlgorithmName hashAlgorithm);
    parameters:
    - id: data
      type: System.Byte[]
      description: ''
    - id: offset
      type: System.Int32
      description: ''
    - id: count
      type: System.Int32
      description: ''
    - id: hashAlgorithm
      type: System.Security.Cryptography.HashAlgorithmName
      description: ''
    return:
      type: System.Byte[]
      description: ''
  overload: System.Security.Cryptography.ECDsaCng.HashData*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.7
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/ECDsaCng.xml
- uid: System.Security.Cryptography.ECDsaCng.ImportParameters(System.Security.Cryptography.ECParameters)
  commentId: M:System.Security.Cryptography.ECDsaCng.ImportParameters(System.Security.Cryptography.ECParameters)
  id: ImportParameters(System.Security.Cryptography.ECParameters)
  parent: System.Security.Cryptography.ECDsaCng
  langs:
  - csharp
  name: ImportParameters(ECParameters)
  nameWithType: ECDsaCng.ImportParameters(ECParameters)
  fullName: ECDsaCng.ImportParameters(ECParameters)
  type: Method
  assemblies:
  - System.Security.Cryptography.Cng
  - System.Core
  - netstandard
  namespace: System.Security.Cryptography
  summary: Replaces the existing key that the current instance is working with by creating a new <xref href="System.Security.Cryptography.CngKey"></xref> for the parameters structure.
  remarks: If `parameters` contains only <xref:System.Security.Cryptography.ECParameters.Q>, only a public key is imported. If `parameters` also contains <xref:System.Security.Cryptography.ECParameters.D>, a full key pair is imported. The <xref:System.Security.Cryptography.ECParameters.Curve> field specifies the type of the curve to import.
  syntax:
    content: public override void ImportParameters (System.Security.Cryptography.ECParameters parameters);
    parameters:
    - id: parameters
      type: System.Security.Cryptography.ECParameters
      description: The curve parameters.
  overload: System.Security.Cryptography.ECDsaCng.ImportParameters*
  exceptions:
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: <code>parameters</code> does not contain valid values.
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: <code>parameters</code> references a curve that cannot be imported.
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: <code>parameters</code> references a curve that is not supported by this platform.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.7
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/ECDsaCng.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Security.Cryptography.ECDsaCng.Key
  commentId: P:System.Security.Cryptography.ECDsaCng.Key
  id: Key
  parent: System.Security.Cryptography.ECDsaCng
  langs:
  - csharp
  name: Key
  nameWithType: ECDsaCng.Key
  fullName: ECDsaCng.Key
  type: Property
  assemblies:
  - System.Security.Cryptography.Cng
  - System.Core
  - netstandard
  namespace: System.Security.Cryptography
  summary: Gets or sets the key to use when signing and verifying data.
  syntax:
    content: public System.Security.Cryptography.CngKey Key { get; }
    return:
      type: System.Security.Cryptography.CngKey
      description: An object that specifies the key.
  overload: System.Security.Cryptography.ECDsaCng.Key*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/ECDsaCng.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Security.Cryptography.ECDsaCng.KeySize
  commentId: P:System.Security.Cryptography.ECDsaCng.KeySize
  id: KeySize
  parent: System.Security.Cryptography.ECDsaCng
  langs:
  - csharp
  name: KeySize
  nameWithType: ECDsaCng.KeySize
  fullName: ECDsaCng.KeySize
  type: Property
  assemblies:
  - System.Security.Cryptography.Cng
  - netstandard
  namespace: System.Security.Cryptography
  syntax:
    content: public override int KeySize { get; set; }
    return:
      type: System.Int32
      description: ''
  overload: System.Security.Cryptography.ECDsaCng.KeySize*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/ECDsaCng.xml
- uid: System.Security.Cryptography.ECDsaCng.LegalKeySizes
  commentId: P:System.Security.Cryptography.ECDsaCng.LegalKeySizes
  id: LegalKeySizes
  parent: System.Security.Cryptography.ECDsaCng
  langs:
  - csharp
  name: LegalKeySizes
  nameWithType: ECDsaCng.LegalKeySizes
  fullName: ECDsaCng.LegalKeySizes
  type: Property
  assemblies:
  - System.Security.Cryptography.Cng
  - netstandard
  namespace: System.Security.Cryptography
  syntax:
    content: public override System.Security.Cryptography.KeySizes[] LegalKeySizes { get; }
    return:
      type: System.Security.Cryptography.KeySizes[]
      description: ''
  overload: System.Security.Cryptography.ECDsaCng.LegalKeySizes*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/ECDsaCng.xml
- uid: System.Security.Cryptography.ECDsaCng.SignData(System.Byte[])
  commentId: M:System.Security.Cryptography.ECDsaCng.SignData(System.Byte[])
  id: SignData(System.Byte[])
  parent: System.Security.Cryptography.ECDsaCng
  langs:
  - csharp
  name: SignData(Byte[])
  nameWithType: ECDsaCng.SignData(Byte[])
  fullName: ECDsaCng.SignData(Byte[])
  type: Method
  assemblies:
  - System.Core
  - System.Security.Cryptography.Cng
  namespace: System.Security.Cryptography
  summary: Generates a signature for the specified data.
  remarks: "This method generates a signature for the specified data by hashing the input data using the <xref:System.Security.Cryptography.ECDsaCng.HashAlgorithm%2A> property, and then signing the result.  \n  \n The <xref:System.Security.Permissions.KeyContainerPermissionFlags?displayProperty=fullName> flag is required if the Cryptography Next Generation (CNG) key is not randomly generated by the <xref:System.Security.Cryptography.ECDsaCng> object."
  syntax:
    content: public byte[] SignData (byte[] data);
    parameters:
    - id: data
      type: System.Byte[]
      description: The message data to be signed.
    return:
      type: System.Byte[]
      description: A digital signature for the specified data.
  overload: System.Security.Cryptography.ECDsaCng.SignData*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>data</code> is `null`.
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: The key information that is associated with the instance does not have a private key.
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/ECDsaCng.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Security.Cryptography.ECDsaCng.SignData(System.IO.Stream)
  commentId: M:System.Security.Cryptography.ECDsaCng.SignData(System.IO.Stream)
  id: SignData(System.IO.Stream)
  parent: System.Security.Cryptography.ECDsaCng
  langs:
  - csharp
  name: SignData(Stream)
  nameWithType: ECDsaCng.SignData(Stream)
  fullName: ECDsaCng.SignData(Stream)
  type: Method
  assemblies:
  - System.Core
  - System.Security.Cryptography.Cng
  namespace: System.Security.Cryptography
  summary: Generates a signature for the specified data stream, reading to the end of the stream.
  remarks: "This method generates a signature for the specified data stream by hashing the input data using the <xref:System.Security.Cryptography.ECDsaCng.HashAlgorithm%2A> property, and then signing the result.  \n  \n The <xref:System.Security.Permissions.KeyContainerPermissionFlags?displayProperty=fullName> flag is required if the Cryptography Next Generation (CNG) key is not randomly generated by the <xref:System.Security.Cryptography.ECDsaCng> object."
  syntax:
    content: public byte[] SignData (System.IO.Stream data);
    parameters:
    - id: data
      type: System.IO.Stream
      description: The data stream to be signed.
    return:
      type: System.Byte[]
      description: A digital signature for the specified data stream.
  overload: System.Security.Cryptography.ECDsaCng.SignData*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>data</code> is `null`.
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: The key information that is associated with the instance does not have a private key.
  attributes: []
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/ECDsaCng.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Security.Cryptography.ECDsaCng.SignData(System.Byte[],System.Int32,System.Int32)
  commentId: M:System.Security.Cryptography.ECDsaCng.SignData(System.Byte[],System.Int32,System.Int32)
  id: SignData(System.Byte[],System.Int32,System.Int32)
  parent: System.Security.Cryptography.ECDsaCng
  langs:
  - csharp
  name: SignData(Byte[], Int32, Int32)
  nameWithType: ECDsaCng.SignData(Byte[], Int32, Int32)
  fullName: ECDsaCng.SignData(Byte[], Int32, Int32)
  type: Method
  assemblies:
  - System.Core
  - System.Security.Cryptography.Cng
  namespace: System.Security.Cryptography
  summary: Generates a digital signature for the specified length of data, beginning at the specified offset.
  remarks: "This method generates a signature for the specified data by hashing the input data using the <xref:System.Security.Cryptography.ECDsaCng.HashAlgorithm%2A> property, and then signing the result  \n  \n The <xref:System.Security.Permissions.KeyContainerPermissionFlags?displayProperty=fullName> flag is required if the Cryptography Next Generation (CNG) key is not randomly generated by the <xref:System.Security.Cryptography.ECDsaCng> object."
  syntax:
    content: public byte[] SignData (byte[] data, int offset, int count);
    parameters:
    - id: data
      type: System.Byte[]
      description: The message data to be signed.
    - id: offset
      type: System.Int32
      description: The location in the string at which to start signing.
    - id: count
      type: System.Int32
      description: The length of the string, in characters, following <code>offset</code> that will be signed.
    return:
      type: System.Byte[]
      description: A digital signature for the specified length of data.
  overload: System.Security.Cryptography.ECDsaCng.SignData*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>data</code> is `null`.
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: <code>count</code> or <code>offset</code> caused reading outside the bounds of the data string.
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: The key information that is associated with the instance does not have a private key.
  attributes: []
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/ECDsaCng.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Security.Cryptography.ECDsaCng.SignHash(System.Byte[])
  commentId: M:System.Security.Cryptography.ECDsaCng.SignHash(System.Byte[])
  id: SignHash(System.Byte[])
  parent: System.Security.Cryptography.ECDsaCng
  langs:
  - csharp
  name: SignHash(Byte[])
  nameWithType: ECDsaCng.SignHash(Byte[])
  fullName: ECDsaCng.SignHash(Byte[])
  type: Method
  assemblies:
  - System.Security.Cryptography.Cng
  - System.Core
  - netstandard
  namespace: System.Security.Cryptography
  summary: Generates a signature for the specified hash value.
  remarks: The <xref:System.Security.Permissions.KeyContainerPermissionFlags?displayProperty=fullName> flag is required if the Cryptography Next Generation (CNG) key is not randomly generated by the <xref:System.Security.Cryptography.ECDsaCng> object.
  syntax:
    content: public override byte[] SignHash (byte[] hash);
    parameters:
    - id: hash
      type: System.Byte[]
      description: The hash value of the data to be signed.
    return:
      type: System.Byte[]
      description: A digital signature for the specified hash value.
  overload: System.Security.Cryptography.ECDsaCng.SignHash*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>hash</code> is `null`.
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: The key information that is associated with the instance does not have a private key.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/ECDsaCng.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Security.Cryptography.ECDsaCng.ToXmlString(System.Boolean)
  commentId: M:System.Security.Cryptography.ECDsaCng.ToXmlString(System.Boolean)
  id: ToXmlString(System.Boolean)
  parent: System.Security.Cryptography.ECDsaCng
  langs:
  - csharp
  name: ToXmlString(Boolean)
  nameWithType: ECDsaCng.ToXmlString(Boolean)
  fullName: ECDsaCng.ToXmlString(Boolean)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Security.Cryptography
  summary: This method is not implemented.
  remarks: To convert the current key to an XML representation, use the <xref:System.Security.Cryptography.ECDsaCng.ToXmlString%28System.Security.Cryptography.ECKeyXmlFormat%29> overload instead.
  syntax:
    content: public override string ToXmlString (bool includePrivateParameters);
    parameters:
    - id: includePrivateParameters
      type: System.Boolean
      description: '`true` to include private parameters; otherwise, `false`.'
    return:
      type: System.String
      description: Not applicable.
  overload: System.Security.Cryptography.ECDsaCng.ToXmlString*
  exceptions:
  - type: System.NotImplementedException
    commentId: T:System.NotImplementedException
    description: This method is not implemented.
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/ECDsaCng.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Security.Cryptography.ECDsaCng.ToXmlString(System.Security.Cryptography.ECKeyXmlFormat)
  commentId: M:System.Security.Cryptography.ECDsaCng.ToXmlString(System.Security.Cryptography.ECKeyXmlFormat)
  id: ToXmlString(System.Security.Cryptography.ECKeyXmlFormat)
  parent: System.Security.Cryptography.ECDsaCng
  langs:
  - csharp
  name: ToXmlString(ECKeyXmlFormat)
  nameWithType: ECDsaCng.ToXmlString(ECKeyXmlFormat)
  fullName: ECDsaCng.ToXmlString(ECKeyXmlFormat)
  type: Method
  assemblies:
  - System.Core
  - System.Security.Cryptography.Cng
  namespace: System.Security.Cryptography
  summary: Serializes the key information to an XML string by using the specified format.
  syntax:
    content: public string ToXmlString (System.Security.Cryptography.ECKeyXmlFormat format);
    parameters:
    - id: format
      type: System.Security.Cryptography.ECKeyXmlFormat
      description: One of the enumeration values that specifies the format of the XML string. The only currently accepted format is <xref href="System.Security.Cryptography.ECKeyXmlFormat.Rfc4050"></xref>.
    return:
      type: System.String
      description: A string object that contains the key information, serialized to an XML string according to the requested format.
  overload: System.Security.Cryptography.ECDsaCng.ToXmlString*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: <code>format</code> specifies an invalid format. The only accepted value is <xref href="System.Security.Cryptography.ECKeyXmlFormat.Rfc4050"></xref>.
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: All other errors.
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/ECDsaCng.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Security.Cryptography.ECDsaCng.VerifyData(System.Byte[],System.Byte[])
  commentId: M:System.Security.Cryptography.ECDsaCng.VerifyData(System.Byte[],System.Byte[])
  id: VerifyData(System.Byte[],System.Byte[])
  parent: System.Security.Cryptography.ECDsaCng
  langs:
  - csharp
  name: VerifyData(Byte[], Byte[])
  nameWithType: ECDsaCng.VerifyData(Byte[], Byte[])
  fullName: ECDsaCng.VerifyData(Byte[], Byte[])
  type: Method
  assemblies:
  - System.Core
  - System.Security.Cryptography.Cng
  namespace: System.Security.Cryptography
  summary: Verifies the digital signature of the specified data.
  remarks: This method generates a signature for the given data by hashing the input data using the <xref:System.Security.Cryptography.ECDsaCng.HashAlgorithm%2A> property, and then signing the result.
  syntax:
    content: public bool VerifyData (byte[] data, byte[] signature);
    parameters:
    - id: data
      type: System.Byte[]
      description: The data that was signed.
    - id: signature
      type: System.Byte[]
      description: The signature to be verified.
    return:
      type: System.Boolean
      description: '`true` if the signature is valid; otherwise, `false`.'
  overload: System.Security.Cryptography.ECDsaCng.VerifyData*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>data</code> or <code>signature</code> is `null`.
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/ECDsaCng.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Security.Cryptography.ECDsaCng.VerifyData(System.IO.Stream,System.Byte[])
  commentId: M:System.Security.Cryptography.ECDsaCng.VerifyData(System.IO.Stream,System.Byte[])
  id: VerifyData(System.IO.Stream,System.Byte[])
  parent: System.Security.Cryptography.ECDsaCng
  langs:
  - csharp
  name: VerifyData(Stream, Byte[])
  nameWithType: ECDsaCng.VerifyData(Stream, Byte[])
  fullName: ECDsaCng.VerifyData(Stream, Byte[])
  type: Method
  assemblies:
  - System.Core
  - System.Security.Cryptography.Cng
  namespace: System.Security.Cryptography
  summary: Verifies the digital signature of the specified data stream, reading to the end of the stream.
  remarks: This method hashes the input data by using the <xref:System.Security.Cryptography.ECDsaCng.HashAlgorithm%2A> property before verification.
  syntax:
    content: public bool VerifyData (System.IO.Stream data, byte[] signature);
    parameters:
    - id: data
      type: System.IO.Stream
      description: The data stream that was signed.
    - id: signature
      type: System.Byte[]
      description: The signature to be verified.
    return:
      type: System.Boolean
      description: '`true` if the signature is valid; otherwise, `false`.'
  overload: System.Security.Cryptography.ECDsaCng.VerifyData*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>data</code> or <code>signature</code> is `null`.
  attributes: []
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/ECDsaCng.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Security.Cryptography.ECDsaCng.VerifyData(System.Byte[],System.Int32,System.Int32,System.Byte[])
  commentId: M:System.Security.Cryptography.ECDsaCng.VerifyData(System.Byte[],System.Int32,System.Int32,System.Byte[])
  id: VerifyData(System.Byte[],System.Int32,System.Int32,System.Byte[])
  parent: System.Security.Cryptography.ECDsaCng
  langs:
  - csharp
  name: VerifyData(Byte[], Int32, Int32, Byte[])
  nameWithType: ECDsaCng.VerifyData(Byte[], Int32, Int32, Byte[])
  fullName: ECDsaCng.VerifyData(Byte[], Int32, Int32, Byte[])
  type: Method
  assemblies:
  - System.Core
  - System.Security.Cryptography.Cng
  namespace: System.Security.Cryptography
  summary: Verifies a signature for the specified length of data, beginning at the specified offset.
  remarks: This method hashes the input data by using the <xref:System.Security.Cryptography.ECDsaCng.HashAlgorithm%2A> property before verification.
  syntax:
    content: public bool VerifyData (byte[] data, int offset, int count, byte[] signature);
    parameters:
    - id: data
      type: System.Byte[]
      description: The data that was signed.
    - id: offset
      type: System.Int32
      description: The location in the data at which the signed data begins.
    - id: count
      type: System.Int32
      description: The length of the data, in characters, following <code>offset</code> that will be signed.
    - id: signature
      type: System.Byte[]
      description: The signature to be verified.
    return:
      type: System.Boolean
      description: '`true` if the signature is valid; otherwise, `false`.'
  overload: System.Security.Cryptography.ECDsaCng.VerifyData*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>offset</code> or <code>count</code> is less then zero.  \n  \n -or-  \n  \n <code>offset</code> or <code>count</code> is larger than the length of the byte array passed in the <code>data</code> parameter."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>data</code> or <code>signature</code> is `null`.
  attributes: []
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/ECDsaCng.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Security.Cryptography.ECDsaCng.VerifyHash(System.Byte[],System.Byte[])
  commentId: M:System.Security.Cryptography.ECDsaCng.VerifyHash(System.Byte[],System.Byte[])
  id: VerifyHash(System.Byte[],System.Byte[])
  parent: System.Security.Cryptography.ECDsaCng
  langs:
  - csharp
  name: VerifyHash(Byte[], Byte[])
  nameWithType: ECDsaCng.VerifyHash(Byte[], Byte[])
  fullName: ECDsaCng.VerifyHash(Byte[], Byte[])
  type: Method
  assemblies:
  - System.Security.Cryptography.Cng
  - System.Core
  - netstandard
  namespace: System.Security.Cryptography
  summary: Verifies the specified digital signature against a specified hash value.
  syntax:
    content: public override bool VerifyHash (byte[] hash, byte[] signature);
    parameters:
    - id: hash
      type: System.Byte[]
      description: The hash value of the data to be verified.
    - id: signature
      type: System.Byte[]
      description: The digital signature of the data to be verified against the hash value.
    return:
      type: System.Boolean
      description: '`true` if the signature is valid; otherwise, `false`.'
  overload: System.Security.Cryptography.ECDsaCng.VerifyHash*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>hash</code> or <code>signature</code> is `null`.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/ECDsaCng.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
references:
- uid: System.Security.Cryptography.ECDsa
  parent: System.Security.Cryptography
  isExternal: false
  name: ECDsa
  nameWithType: ECDsa
  fullName: System.Security.Cryptography.ECDsa
- uid: System.PlatformNotSupportedException
  parent: System
  isExternal: false
  name: PlatformNotSupportedException
  nameWithType: PlatformNotSupportedException
  fullName: System.PlatformNotSupportedException
- uid: System.Security.Cryptography.CryptographicException
  parent: System.Security.Cryptography
  isExternal: false
  name: CryptographicException
  nameWithType: CryptographicException
  fullName: System.Security.Cryptography.CryptographicException
- uid: System.ArgumentException
  parent: System
  isExternal: false
  name: ArgumentException
  nameWithType: ArgumentException
  fullName: System.ArgumentException
- uid: System.ArgumentNullException
  parent: System
  isExternal: false
  name: ArgumentNullException
  nameWithType: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: System.NotImplementedException
  parent: System
  isExternal: false
  name: NotImplementedException
  nameWithType: NotImplementedException
  fullName: System.NotImplementedException
- uid: System.ArgumentOutOfRangeException
  parent: System
  isExternal: false
  name: ArgumentOutOfRangeException
  nameWithType: ArgumentOutOfRangeException
  fullName: System.ArgumentOutOfRangeException
- uid: System.NotSupportedException
  parent: System
  isExternal: false
  name: NotSupportedException
  nameWithType: NotSupportedException
  fullName: System.NotSupportedException
- uid: System.Security.Cryptography.ECDsaCng.#ctor
  parent: System.Security.Cryptography.ECDsaCng
  isExternal: false
  name: ECDsaCng()
  nameWithType: ECDsaCng.ECDsaCng()
  fullName: ECDsaCng.ECDsaCng()
- uid: System.Security.Cryptography.ECDsaCng.#ctor(System.Int32)
  parent: System.Security.Cryptography.ECDsaCng
  isExternal: false
  name: ECDsaCng(Int32)
  nameWithType: ECDsaCng.ECDsaCng(Int32)
  fullName: ECDsaCng.ECDsaCng(Int32)
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Security.Cryptography.ECDsaCng.#ctor(System.Security.Cryptography.CngKey)
  parent: System.Security.Cryptography.ECDsaCng
  isExternal: false
  name: ECDsaCng(CngKey)
  nameWithType: ECDsaCng.ECDsaCng(CngKey)
  fullName: ECDsaCng.ECDsaCng(CngKey)
- uid: System.Security.Cryptography.CngKey
  parent: System.Security.Cryptography
  isExternal: false
  name: CngKey
  nameWithType: CngKey
  fullName: System.Security.Cryptography.CngKey
- uid: System.Security.Cryptography.ECDsaCng.#ctor(System.Security.Cryptography.ECCurve)
  parent: System.Security.Cryptography.ECDsaCng
  isExternal: false
  name: ECDsaCng(ECCurve)
  nameWithType: ECDsaCng.ECDsaCng(ECCurve)
  fullName: ECDsaCng.ECDsaCng(ECCurve)
- uid: System.Security.Cryptography.ECCurve
  parent: System.Security.Cryptography
  isExternal: false
  name: ECCurve
  nameWithType: ECCurve
  fullName: System.Security.Cryptography.ECCurve
- uid: System.Security.Cryptography.ECDsaCng.Dispose(System.Boolean)
  parent: System.Security.Cryptography.ECDsaCng
  isExternal: false
  name: Dispose(Boolean)
  nameWithType: ECDsaCng.Dispose(Boolean)
  fullName: ECDsaCng.Dispose(Boolean)
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Security.Cryptography.ECDsaCng.ExportExplicitParameters(System.Boolean)
  parent: System.Security.Cryptography.ECDsaCng
  isExternal: false
  name: ExportExplicitParameters(Boolean)
  nameWithType: ECDsaCng.ExportExplicitParameters(Boolean)
  fullName: ECDsaCng.ExportExplicitParameters(Boolean)
- uid: System.Security.Cryptography.ECParameters
  parent: System.Security.Cryptography
  isExternal: false
  name: ECParameters
  nameWithType: ECParameters
  fullName: System.Security.Cryptography.ECParameters
- uid: System.Security.Cryptography.ECDsaCng.ExportParameters(System.Boolean)
  parent: System.Security.Cryptography.ECDsaCng
  isExternal: false
  name: ExportParameters(Boolean)
  nameWithType: ECDsaCng.ExportParameters(Boolean)
  fullName: ECDsaCng.ExportParameters(Boolean)
- uid: System.Security.Cryptography.ECDsaCng.FromXmlString(System.String)
  parent: System.Security.Cryptography.ECDsaCng
  isExternal: false
  name: FromXmlString(String)
  nameWithType: ECDsaCng.FromXmlString(String)
  fullName: ECDsaCng.FromXmlString(String)
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Security.Cryptography.ECDsaCng.FromXmlString(System.String,System.Security.Cryptography.ECKeyXmlFormat)
  parent: System.Security.Cryptography.ECDsaCng
  isExternal: false
  name: FromXmlString(String, ECKeyXmlFormat)
  nameWithType: ECDsaCng.FromXmlString(String, ECKeyXmlFormat)
  fullName: ECDsaCng.FromXmlString(String, ECKeyXmlFormat)
- uid: System.Security.Cryptography.ECKeyXmlFormat
  parent: System.Security.Cryptography
  isExternal: false
  name: ECKeyXmlFormat
  nameWithType: ECKeyXmlFormat
  fullName: System.Security.Cryptography.ECKeyXmlFormat
- uid: System.Security.Cryptography.ECDsaCng.GenerateKey(System.Security.Cryptography.ECCurve)
  parent: System.Security.Cryptography.ECDsaCng
  isExternal: false
  name: GenerateKey(ECCurve)
  nameWithType: ECDsaCng.GenerateKey(ECCurve)
  fullName: ECDsaCng.GenerateKey(ECCurve)
- uid: System.Security.Cryptography.ECDsaCng.HashAlgorithm
  parent: System.Security.Cryptography.ECDsaCng
  isExternal: false
  name: HashAlgorithm
  nameWithType: ECDsaCng.HashAlgorithm
  fullName: ECDsaCng.HashAlgorithm
- uid: System.Security.Cryptography.CngAlgorithm
  parent: System.Security.Cryptography
  isExternal: false
  name: CngAlgorithm
  nameWithType: CngAlgorithm
  fullName: System.Security.Cryptography.CngAlgorithm
- uid: System.Security.Cryptography.ECDsaCng.HashData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName)
  parent: System.Security.Cryptography.ECDsaCng
  isExternal: false
  name: HashData(Stream, HashAlgorithmName)
  nameWithType: ECDsaCng.HashData(Stream, HashAlgorithmName)
  fullName: ECDsaCng.HashData(Stream, HashAlgorithmName)
- uid: System.Byte
  name: Byte
  nameWithType: Byte
  fullName: System.Byte
- uid: System.Byte[]
  parent: System
  isExternal: false
  name: Byte[]
  nameWithType: Byte[]
  fullName: System.Byte[]
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.IO.Stream
  parent: System.IO
  isExternal: false
  name: Stream
  nameWithType: Stream
  fullName: System.IO.Stream
- uid: System.Security.Cryptography.HashAlgorithmName
  parent: System.Security.Cryptography
  isExternal: false
  name: HashAlgorithmName
  nameWithType: HashAlgorithmName
  fullName: System.Security.Cryptography.HashAlgorithmName
- uid: System.Security.Cryptography.ECDsaCng.HashData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)
  parent: System.Security.Cryptography.ECDsaCng
  isExternal: false
  name: HashData(Byte[], Int32, Int32, HashAlgorithmName)
  nameWithType: ECDsaCng.HashData(Byte[], Int32, Int32, HashAlgorithmName)
  fullName: ECDsaCng.HashData(Byte[], Int32, Int32, HashAlgorithmName)
- uid: System.Security.Cryptography.ECDsaCng.ImportParameters(System.Security.Cryptography.ECParameters)
  parent: System.Security.Cryptography.ECDsaCng
  isExternal: false
  name: ImportParameters(ECParameters)
  nameWithType: ECDsaCng.ImportParameters(ECParameters)
  fullName: ECDsaCng.ImportParameters(ECParameters)
- uid: System.Security.Cryptography.ECDsaCng.Key
  parent: System.Security.Cryptography.ECDsaCng
  isExternal: false
  name: Key
  nameWithType: ECDsaCng.Key
  fullName: ECDsaCng.Key
- uid: System.Security.Cryptography.ECDsaCng.KeySize
  parent: System.Security.Cryptography.ECDsaCng
  isExternal: false
  name: KeySize
  nameWithType: ECDsaCng.KeySize
  fullName: ECDsaCng.KeySize
- uid: System.Security.Cryptography.ECDsaCng.LegalKeySizes
  parent: System.Security.Cryptography.ECDsaCng
  isExternal: false
  name: LegalKeySizes
  nameWithType: ECDsaCng.LegalKeySizes
  fullName: ECDsaCng.LegalKeySizes
- uid: System.Security.Cryptography.KeySizes
  name: KeySizes
  nameWithType: KeySizes
  fullName: System.Security.Cryptography.KeySizes
- uid: System.Security.Cryptography.KeySizes[]
  parent: System.Security.Cryptography
  isExternal: false
  name: KeySizes[]
  nameWithType: KeySizes[]
  fullName: System.Security.Cryptography.KeySizes[]
  spec.csharp:
  - uid: System.Security.Cryptography.KeySizes
    name: KeySizes
    nameWithType: KeySizes
    fullName: System.Security.Cryptography.KeySizes
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Security.Cryptography.ECDsaCng.SignData(System.Byte[])
  parent: System.Security.Cryptography.ECDsaCng
  isExternal: false
  name: SignData(Byte[])
  nameWithType: ECDsaCng.SignData(Byte[])
  fullName: ECDsaCng.SignData(Byte[])
- uid: System.Security.Cryptography.ECDsaCng.SignData(System.IO.Stream)
  parent: System.Security.Cryptography.ECDsaCng
  isExternal: false
  name: SignData(Stream)
  nameWithType: ECDsaCng.SignData(Stream)
  fullName: ECDsaCng.SignData(Stream)
- uid: System.Security.Cryptography.ECDsaCng.SignData(System.Byte[],System.Int32,System.Int32)
  parent: System.Security.Cryptography.ECDsaCng
  isExternal: false
  name: SignData(Byte[], Int32, Int32)
  nameWithType: ECDsaCng.SignData(Byte[], Int32, Int32)
  fullName: ECDsaCng.SignData(Byte[], Int32, Int32)
- uid: System.Security.Cryptography.ECDsaCng.SignHash(System.Byte[])
  parent: System.Security.Cryptography.ECDsaCng
  isExternal: false
  name: SignHash(Byte[])
  nameWithType: ECDsaCng.SignHash(Byte[])
  fullName: ECDsaCng.SignHash(Byte[])
- uid: System.Security.Cryptography.ECDsaCng.ToXmlString(System.Boolean)
  parent: System.Security.Cryptography.ECDsaCng
  isExternal: false
  name: ToXmlString(Boolean)
  nameWithType: ECDsaCng.ToXmlString(Boolean)
  fullName: ECDsaCng.ToXmlString(Boolean)
- uid: System.Security.Cryptography.ECDsaCng.ToXmlString(System.Security.Cryptography.ECKeyXmlFormat)
  parent: System.Security.Cryptography.ECDsaCng
  isExternal: false
  name: ToXmlString(ECKeyXmlFormat)
  nameWithType: ECDsaCng.ToXmlString(ECKeyXmlFormat)
  fullName: ECDsaCng.ToXmlString(ECKeyXmlFormat)
- uid: System.Security.Cryptography.ECDsaCng.VerifyData(System.Byte[],System.Byte[])
  parent: System.Security.Cryptography.ECDsaCng
  isExternal: false
  name: VerifyData(Byte[], Byte[])
  nameWithType: ECDsaCng.VerifyData(Byte[], Byte[])
  fullName: ECDsaCng.VerifyData(Byte[], Byte[])
- uid: System.Security.Cryptography.ECDsaCng.VerifyData(System.IO.Stream,System.Byte[])
  parent: System.Security.Cryptography.ECDsaCng
  isExternal: false
  name: VerifyData(Stream, Byte[])
  nameWithType: ECDsaCng.VerifyData(Stream, Byte[])
  fullName: ECDsaCng.VerifyData(Stream, Byte[])
- uid: System.Security.Cryptography.ECDsaCng.VerifyData(System.Byte[],System.Int32,System.Int32,System.Byte[])
  parent: System.Security.Cryptography.ECDsaCng
  isExternal: false
  name: VerifyData(Byte[], Int32, Int32, Byte[])
  nameWithType: ECDsaCng.VerifyData(Byte[], Int32, Int32, Byte[])
  fullName: ECDsaCng.VerifyData(Byte[], Int32, Int32, Byte[])
- uid: System.Security.Cryptography.ECDsaCng.VerifyHash(System.Byte[],System.Byte[])
  parent: System.Security.Cryptography.ECDsaCng
  isExternal: false
  name: VerifyHash(Byte[], Byte[])
  nameWithType: ECDsaCng.VerifyHash(Byte[], Byte[])
  fullName: ECDsaCng.VerifyHash(Byte[], Byte[])
- uid: System.Security.Cryptography.ECDsaCng.#ctor*
  parent: System.Security.Cryptography.ECDsaCng
  isExternal: false
  name: ECDsaCng
  nameWithType: ECDsaCng.ECDsaCng
  fullName: ECDsaCng.ECDsaCng
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/ECDsaCng.xml
- uid: System.Security.Cryptography.ECDsaCng.Dispose*
  parent: System.Security.Cryptography.ECDsaCng
  isExternal: false
  name: Dispose
  nameWithType: ECDsaCng.Dispose
  fullName: ECDsaCng.Dispose
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/ECDsaCng.xml
- uid: System.Security.Cryptography.ECDsaCng.ExportExplicitParameters*
  parent: System.Security.Cryptography.ECDsaCng
  isExternal: false
  name: ExportExplicitParameters
  nameWithType: ECDsaCng.ExportExplicitParameters
  fullName: ECDsaCng.ExportExplicitParameters
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/ECDsaCng.xml
- uid: System.Security.Cryptography.ECDsaCng.ExportParameters*
  parent: System.Security.Cryptography.ECDsaCng
  isExternal: false
  name: ExportParameters
  nameWithType: ECDsaCng.ExportParameters
  fullName: ECDsaCng.ExportParameters
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/ECDsaCng.xml
- uid: System.Security.Cryptography.ECDsaCng.FromXmlString*
  parent: System.Security.Cryptography.ECDsaCng
  isExternal: false
  name: FromXmlString
  nameWithType: ECDsaCng.FromXmlString
  fullName: ECDsaCng.FromXmlString
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/ECDsaCng.xml
- uid: System.Security.Cryptography.ECDsaCng.GenerateKey*
  parent: System.Security.Cryptography.ECDsaCng
  isExternal: false
  name: GenerateKey
  nameWithType: ECDsaCng.GenerateKey
  fullName: ECDsaCng.GenerateKey
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/ECDsaCng.xml
- uid: System.Security.Cryptography.ECDsaCng.HashAlgorithm*
  parent: System.Security.Cryptography.ECDsaCng
  isExternal: false
  name: HashAlgorithm
  nameWithType: ECDsaCng.HashAlgorithm
  fullName: ECDsaCng.HashAlgorithm
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/ECDsaCng.xml
- uid: System.Security.Cryptography.ECDsaCng.HashData*
  parent: System.Security.Cryptography.ECDsaCng
  isExternal: false
  name: HashData
  nameWithType: ECDsaCng.HashData
  fullName: ECDsaCng.HashData
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/ECDsaCng.xml
- uid: System.Security.Cryptography.ECDsaCng.ImportParameters*
  parent: System.Security.Cryptography.ECDsaCng
  isExternal: false
  name: ImportParameters
  nameWithType: ECDsaCng.ImportParameters
  fullName: ECDsaCng.ImportParameters
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/ECDsaCng.xml
- uid: System.Security.Cryptography.ECDsaCng.Key*
  parent: System.Security.Cryptography.ECDsaCng
  isExternal: false
  name: Key
  nameWithType: ECDsaCng.Key
  fullName: ECDsaCng.Key
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/ECDsaCng.xml
- uid: System.Security.Cryptography.ECDsaCng.KeySize*
  parent: System.Security.Cryptography.ECDsaCng
  isExternal: false
  name: KeySize
  nameWithType: ECDsaCng.KeySize
  fullName: ECDsaCng.KeySize
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/ECDsaCng.xml
- uid: System.Security.Cryptography.ECDsaCng.LegalKeySizes*
  parent: System.Security.Cryptography.ECDsaCng
  isExternal: false
  name: LegalKeySizes
  nameWithType: ECDsaCng.LegalKeySizes
  fullName: ECDsaCng.LegalKeySizes
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/ECDsaCng.xml
- uid: System.Security.Cryptography.ECDsaCng.SignData*
  parent: System.Security.Cryptography.ECDsaCng
  isExternal: false
  name: SignData
  nameWithType: ECDsaCng.SignData
  fullName: ECDsaCng.SignData
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/ECDsaCng.xml
- uid: System.Security.Cryptography.ECDsaCng.SignHash*
  parent: System.Security.Cryptography.ECDsaCng
  isExternal: false
  name: SignHash
  nameWithType: ECDsaCng.SignHash
  fullName: ECDsaCng.SignHash
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/ECDsaCng.xml
- uid: System.Security.Cryptography.ECDsaCng.ToXmlString*
  parent: System.Security.Cryptography.ECDsaCng
  isExternal: false
  name: ToXmlString
  nameWithType: ECDsaCng.ToXmlString
  fullName: ECDsaCng.ToXmlString
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/ECDsaCng.xml
- uid: System.Security.Cryptography.ECDsaCng.VerifyData*
  parent: System.Security.Cryptography.ECDsaCng
  isExternal: false
  name: VerifyData
  nameWithType: ECDsaCng.VerifyData
  fullName: ECDsaCng.VerifyData
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/ECDsaCng.xml
- uid: System.Security.Cryptography.ECDsaCng.VerifyHash*
  parent: System.Security.Cryptography.ECDsaCng
  isExternal: false
  name: VerifyHash
  nameWithType: ECDsaCng.VerifyHash
  fullName: ECDsaCng.VerifyHash
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/ECDsaCng.xml
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: false
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: Object.Equals(Object)
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: false
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: Object.Equals(Object, Object)
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: false
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: Object.GetHashCode()
- uid: System.Object.GetType
  parent: System.Object
  isExternal: false
  name: GetType()
  nameWithType: Object.GetType()
  fullName: Object.GetType()
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: false
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: Object.MemberwiseClone()
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: false
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: Object.ReferenceEquals(Object, Object)
- uid: System.Object.ToString
  parent: System.Object
  isExternal: false
  name: ToString()
  nameWithType: Object.ToString()
  fullName: Object.ToString()
- uid: System.Security.Cryptography.AsymmetricAlgorithm.Clear
  parent: System.Security.Cryptography.AsymmetricAlgorithm
  isExternal: false
  name: Clear()
  nameWithType: AsymmetricAlgorithm.Clear()
  fullName: AsymmetricAlgorithm.Clear()
- uid: System.Security.Cryptography.ECDsa.Create
  parent: System.Security.Cryptography.ECDsa
  isExternal: false
  name: Create()
  nameWithType: ECDsa.Create()
  fullName: ECDsa.Create()
- uid: System.Security.Cryptography.ECDsa.Create(System.String)
  parent: System.Security.Cryptography.ECDsa
  isExternal: false
  name: Create(String)
  nameWithType: ECDsa.Create(String)
  fullName: ECDsa.Create(String)
- uid: System.Security.Cryptography.AsymmetricAlgorithm.Dispose
  parent: System.Security.Cryptography.AsymmetricAlgorithm
  isExternal: false
  name: Dispose()
  nameWithType: AsymmetricAlgorithm.Dispose()
  fullName: AsymmetricAlgorithm.Dispose()
- uid: System.Security.Cryptography.ECDsa.KeyExchangeAlgorithm
  parent: System.Security.Cryptography.ECDsa
  isExternal: false
  name: KeyExchangeAlgorithm
  nameWithType: ECDsa.KeyExchangeAlgorithm
  fullName: ECDsa.KeyExchangeAlgorithm
- uid: System.Security.Cryptography.AsymmetricAlgorithm.KeySizeValue
  parent: System.Security.Cryptography.AsymmetricAlgorithm
  isExternal: false
  name: KeySizeValue
  nameWithType: AsymmetricAlgorithm.KeySizeValue
  fullName: AsymmetricAlgorithm.KeySizeValue
- uid: System.Security.Cryptography.AsymmetricAlgorithm.LegalKeySizesValue
  parent: System.Security.Cryptography.AsymmetricAlgorithm
  isExternal: false
  name: LegalKeySizesValue
  nameWithType: AsymmetricAlgorithm.LegalKeySizesValue
  fullName: AsymmetricAlgorithm.LegalKeySizesValue
- uid: System.Security.Cryptography.ECDsa.SignatureAlgorithm
  parent: System.Security.Cryptography.ECDsa
  isExternal: false
  name: SignatureAlgorithm
  nameWithType: ECDsa.SignatureAlgorithm
  fullName: ECDsa.SignatureAlgorithm
- uid: System.Security.Cryptography.ECDsa.Create(System.Security.Cryptography.ECCurve)
  parent: System.Security.Cryptography.ECDsa
  isExternal: false
  name: Create(ECCurve)
  nameWithType: ECDsa.Create(ECCurve)
  fullName: ECDsa.Create(ECCurve)
- uid: System.Security.Cryptography.ECDsa.Create(System.Security.Cryptography.ECParameters)
  parent: System.Security.Cryptography.ECDsa
  isExternal: false
  name: Create(ECParameters)
  nameWithType: ECDsa.Create(ECParameters)
  fullName: ECDsa.Create(ECParameters)
- uid: System.Security.Cryptography.ECDsa.SignData(System.Byte[],System.Security.Cryptography.HashAlgorithmName)
  parent: System.Security.Cryptography.ECDsa
  isExternal: false
  name: SignData(Byte[], HashAlgorithmName)
  nameWithType: ECDsa.SignData(Byte[], HashAlgorithmName)
  fullName: ECDsa.SignData(Byte[], HashAlgorithmName)
- uid: System.Security.Cryptography.ECDsa.SignData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName)
  parent: System.Security.Cryptography.ECDsa
  isExternal: false
  name: SignData(Stream, HashAlgorithmName)
  nameWithType: ECDsa.SignData(Stream, HashAlgorithmName)
  fullName: ECDsa.SignData(Stream, HashAlgorithmName)
- uid: System.Security.Cryptography.ECDsa.SignData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)
  parent: System.Security.Cryptography.ECDsa
  isExternal: false
  name: SignData(Byte[], Int32, Int32, HashAlgorithmName)
  nameWithType: ECDsa.SignData(Byte[], Int32, Int32, HashAlgorithmName)
  fullName: ECDsa.SignData(Byte[], Int32, Int32, HashAlgorithmName)
- uid: System.Security.Cryptography.ECDsa.VerifyData(System.Byte[],System.Byte[],System.Security.Cryptography.HashAlgorithmName)
  parent: System.Security.Cryptography.ECDsa
  isExternal: false
  name: VerifyData(Byte[], Byte[], HashAlgorithmName)
  nameWithType: ECDsa.VerifyData(Byte[], Byte[], HashAlgorithmName)
  fullName: ECDsa.VerifyData(Byte[], Byte[], HashAlgorithmName)
- uid: System.Security.Cryptography.ECDsa.VerifyData(System.IO.Stream,System.Byte[],System.Security.Cryptography.HashAlgorithmName)
  parent: System.Security.Cryptography.ECDsa
  isExternal: false
  name: VerifyData(Stream, Byte[], HashAlgorithmName)
  nameWithType: ECDsa.VerifyData(Stream, Byte[], HashAlgorithmName)
  fullName: ECDsa.VerifyData(Stream, Byte[], HashAlgorithmName)
- uid: System.Security.Cryptography.ECDsa.VerifyData(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Security.Cryptography.HashAlgorithmName)
  parent: System.Security.Cryptography.ECDsa
  isExternal: false
  name: VerifyData(Byte[], Int32, Int32, Byte[], HashAlgorithmName)
  nameWithType: ECDsa.VerifyData(Byte[], Int32, Int32, Byte[], HashAlgorithmName)
  fullName: ECDsa.VerifyData(Byte[], Int32, Int32, Byte[], HashAlgorithmName)
