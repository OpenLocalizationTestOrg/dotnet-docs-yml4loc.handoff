{"nodes":[{"content":"Provides methods to participate in a work batch.","nodes":[{"pos":[0,48],"content":"Provides methods to participate in a work batch.","nodes":[{"content":"Provides methods to participate in a work batch.","pos":[0,48]}]}],"pos":[683,732],"yaml":true},{"content":"> [!NOTE]\n>  [!INCLUDE[DeprecatedContent](~/includes/deprecatedcontent-md.md)]  \n  \n The <xref:System.Workflow.Runtime.IPendingWork> interface is provided for services that want to participate in the workflow runtime engine batching mechanism. The batching mechanism is especially useful for services that use a durable store. It is often important in these cases to maintain consistency between the durable store used by the service and the internal state of the workflow runtime engine.  \n  \n If you want your service to participate in workflow transaction batching provided by the <xref:System.Workflow.Runtime.Hosting.WorkflowCommitWorkBatchService>, you must implement the methods defined by the <xref:System.Workflow.Runtime.IPendingWork> interface. The workflow runtime engine will call the <xref:System.Workflow.Runtime.IPendingWork.Commit%2A> method on your service to commit the batch.  \n  \n The <xref:System.Workflow.Runtime.Hosting.SqlWorkflowPersistenceService> class implements the <xref:System.Workflow.Runtime.IPendingWork> interface.","nodes":[{"pos":[2,78],"content":"[!NOTE]\n [!INCLUDE[DeprecatedContent](~/includes/deprecatedcontent-md.md)]","leadings":["","> "],"nodes":[]},{"pos":[85,488],"content":"The <xref:System.Workflow.Runtime.IPendingWork> interface is provided for services that want to participate in the workflow runtime engine batching mechanism. The batching mechanism is especially useful for services that use a durable store. It is often important in these cases to maintain consistency between the durable store used by the service and the internal state of the workflow runtime engine.","nodes":[{"content":"The <xref:System.Workflow.Runtime.IPendingWork> interface is provided for services that want to participate in the workflow runtime engine batching mechanism. The batching mechanism is especially useful for services that use a durable store. It is often important in these cases to maintain consistency between the durable store used by the service and the internal state of the workflow runtime engine.","pos":[0,403],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Workflow.Runtime.IPendingWork&gt;</ph> interface is provided for services that want to participate in the workflow runtime engine batching mechanism.","pos":[0,158],"source":"The <xref:System.Workflow.Runtime.IPendingWork> interface is provided for services that want to participate in the workflow runtime engine batching mechanism."},{"content":"The batching mechanism is especially useful for services that use a durable store.","pos":[159,241]},{"content":"It is often important in these cases to maintain consistency between the durable store used by the service and the internal state of the workflow runtime engine.","pos":[242,403]}]}]},{"pos":[495,895],"content":"If you want your service to participate in workflow transaction batching provided by the <xref:System.Workflow.Runtime.Hosting.WorkflowCommitWorkBatchService>, you must implement the methods defined by the <xref:System.Workflow.Runtime.IPendingWork> interface. The workflow runtime engine will call the <xref:System.Workflow.Runtime.IPendingWork.Commit%2A> method on your service to commit the batch.","nodes":[{"content":"If you want your service to participate in workflow transaction batching provided by the <xref:System.Workflow.Runtime.Hosting.WorkflowCommitWorkBatchService>, you must implement the methods defined by the <xref:System.Workflow.Runtime.IPendingWork> interface. The workflow runtime engine will call the <xref:System.Workflow.Runtime.IPendingWork.Commit%2A> method on your service to commit the batch.","pos":[0,400],"nodes":[{"content":"If you want your service to participate in workflow transaction batching provided by the <ph id=\"ph1\">&lt;xref:System.Workflow.Runtime.Hosting.WorkflowCommitWorkBatchService&gt;</ph>, you must implement the methods defined by the <ph id=\"ph2\">&lt;xref:System.Workflow.Runtime.IPendingWork&gt;</ph> interface.","pos":[0,260],"source":"If you want your service to participate in workflow transaction batching provided by the <xref:System.Workflow.Runtime.Hosting.WorkflowCommitWorkBatchService>, you must implement the methods defined by the <xref:System.Workflow.Runtime.IPendingWork> interface."},{"content":"The workflow runtime engine will call the <ph id=\"ph1\">&lt;xref:System.Workflow.Runtime.IPendingWork.Commit%2A&gt;</ph> method on your service to commit the batch.","pos":[261,400],"source":" The workflow runtime engine will call the <xref:System.Workflow.Runtime.IPendingWork.Commit%2A> method on your service to commit the batch."}]}]},{"pos":[902,1050],"content":"The <xref:System.Workflow.Runtime.Hosting.SqlWorkflowPersistenceService> class implements the <xref:System.Workflow.Runtime.IPendingWork> interface.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Workflow.Runtime.Hosting.SqlWorkflowPersistenceService&gt;</ph> class implements the <ph id=\"ph2\">&lt;xref:System.Workflow.Runtime.IPendingWork&gt;</ph> interface.","pos":[0,148],"source":"The <xref:System.Workflow.Runtime.Hosting.SqlWorkflowPersistenceService> class implements the <xref:System.Workflow.Runtime.IPendingWork> interface."}]}],"pos":[743,1803],"yaml":true,"extradata":"MT"},{"content":"Commits the list of work items by using the specified <xref href=\"System.Transactions.Transaction\"></xref> object.","nodes":[{"pos":[0,114],"content":"Commits the list of work items by using the specified <ph id=\"ph1\">&lt;xref href=\"System.Transactions.Transaction\"&gt;&lt;/xref&gt;</ph> object.","source":"Commits the list of work items by using the specified <xref href=\"System.Transactions.Transaction\"></xref> object."}],"pos":[3290,3405],"yaml":true},{"content":"The workflow runtime engine calls the <xref:System.Workflow.Runtime.IPendingWork.Commit%2A> method when its semantics dictate that the pending work in the work batch should be committed. When it reaches a commit point, the workflow runtime engine calls the <xref:System.Workflow.Runtime.IPendingWork.Commit%2A> method on each <xref:System.Workflow.Runtime.IPendingWork> object in its work batch; the workflow runtime engine passes the <xref:System.Workflow.Runtime.IPendingWork.Commit%2A> method the collection of items associated with that <xref:System.Workflow.Runtime.IPendingWork> object. Either all of the work in a batch succeeds or none of it succeeds. You should throw an exception if any of the work items passed to the <xref:System.Workflow.Runtime.IPendingWork.Commit%2A> method in your implementation cannot be committed. Depending on your implementation, you may want to perform some rollback in your <xref:System.Workflow.Runtime.IPendingWork.Commit%2A> method if it cannot commit its work items. If the workflow runtime engine successfully commits all of the work in the work batch, it calls <xref:System.Workflow.Runtime.IPendingWork.Complete%2A> with the `succeeded` parameter set to `true`; otherwise, it calls <xref:System.Workflow.Runtime.IPendingWork.Complete%2A> with `succeeded` set to `false`.","nodes":[{"pos":[0,1317],"content":"The workflow runtime engine calls the <xref:System.Workflow.Runtime.IPendingWork.Commit%2A> method when its semantics dictate that the pending work in the work batch should be committed. When it reaches a commit point, the workflow runtime engine calls the <xref:System.Workflow.Runtime.IPendingWork.Commit%2A> method on each <xref:System.Workflow.Runtime.IPendingWork> object in its work batch; the workflow runtime engine passes the <xref:System.Workflow.Runtime.IPendingWork.Commit%2A> method the collection of items associated with that <xref:System.Workflow.Runtime.IPendingWork> object. Either all of the work in a batch succeeds or none of it succeeds. You should throw an exception if any of the work items passed to the <xref:System.Workflow.Runtime.IPendingWork.Commit%2A> method in your implementation cannot be committed. Depending on your implementation, you may want to perform some rollback in your <xref:System.Workflow.Runtime.IPendingWork.Commit%2A> method if it cannot commit its work items. If the workflow runtime engine successfully commits all of the work in the work batch, it calls <xref:System.Workflow.Runtime.IPendingWork.Complete%2A> with the `succeeded` parameter set to `true`; otherwise, it calls <xref:System.Workflow.Runtime.IPendingWork.Complete%2A> with `succeeded` set to `false`.","nodes":[{"content":"The workflow runtime engine calls the <ph id=\"ph1\">&lt;xref:System.Workflow.Runtime.IPendingWork.Commit%2A&gt;</ph> method when its semantics dictate that the pending work in the work batch should be committed.","pos":[0,186],"source":"The workflow runtime engine calls the <xref:System.Workflow.Runtime.IPendingWork.Commit%2A> method when its semantics dictate that the pending work in the work batch should be committed."},{"content":"When it reaches a commit point, the workflow runtime engine calls the <ph id=\"ph1\">&lt;xref:System.Workflow.Runtime.IPendingWork.Commit%2A&gt;</ph> method on each <ph id=\"ph2\">&lt;xref:System.Workflow.Runtime.IPendingWork&gt;</ph> object in its work batch; the workflow runtime engine passes the <ph id=\"ph3\">&lt;xref:System.Workflow.Runtime.IPendingWork.Commit%2A&gt;</ph> method the collection of items associated with that <ph id=\"ph4\">&lt;xref:System.Workflow.Runtime.IPendingWork&gt;</ph> object.","pos":[187,592],"source":" When it reaches a commit point, the workflow runtime engine calls the <xref:System.Workflow.Runtime.IPendingWork.Commit%2A> method on each <xref:System.Workflow.Runtime.IPendingWork> object in its work batch; the workflow runtime engine passes the <xref:System.Workflow.Runtime.IPendingWork.Commit%2A> method the collection of items associated with that <xref:System.Workflow.Runtime.IPendingWork> object."},{"content":"Either all of the work in a batch succeeds or none of it succeeds.","pos":[593,659]},{"content":"You should throw an exception if any of the work items passed to the <ph id=\"ph1\">&lt;xref:System.Workflow.Runtime.IPendingWork.Commit%2A&gt;</ph> method in your implementation cannot be committed.","pos":[660,833],"source":" You should throw an exception if any of the work items passed to the <xref:System.Workflow.Runtime.IPendingWork.Commit%2A> method in your implementation cannot be committed."},{"content":"Depending on your implementation, you may want to perform some rollback in your <ph id=\"ph1\">&lt;xref:System.Workflow.Runtime.IPendingWork.Commit%2A&gt;</ph> method if it cannot commit its work items.","pos":[834,1010],"source":" Depending on your implementation, you may want to perform some rollback in your <xref:System.Workflow.Runtime.IPendingWork.Commit%2A> method if it cannot commit its work items."},{"content":"If the workflow runtime engine successfully commits all of the work in the work batch, it calls <ph id=\"ph1\">&lt;xref:System.Workflow.Runtime.IPendingWork.Complete%2A&gt;</ph> with the <ph id=\"ph2\">`succeeded`</ph> parameter set to <ph id=\"ph3\">`true`</ph>; otherwise, it calls <ph id=\"ph4\">&lt;xref:System.Workflow.Runtime.IPendingWork.Complete%2A&gt;</ph> with <ph id=\"ph5\">`succeeded`</ph> set to <ph id=\"ph6\">`false`</ph>.","pos":[1011,1317],"source":" If the workflow runtime engine successfully commits all of the work in the work batch, it calls <xref:System.Workflow.Runtime.IPendingWork.Complete%2A> with the `succeeded` parameter set to `true`; otherwise, it calls <xref:System.Workflow.Runtime.IPendingWork.Complete%2A> with `succeeded` set to `false`."}]}],"pos":[3416,4734],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Transactions.Transaction\"></xref> associated with the pending work.","nodes":[{"pos":[0,90],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Transactions.Transaction\"&gt;&lt;/xref&gt;</ph> associated with the pending work.","source":"The <xref href=\"System.Transactions.Transaction\"></xref> associated with the pending work."}],"pos":[4962,5053],"yaml":true},{"content":"The work items to be committed.","nodes":[{"pos":[0,31],"content":"The work items to be committed.","nodes":[{"content":"The work items to be committed.","pos":[0,31]}]}],"pos":[5131,5163],"yaml":true},{"content":"Called when the transaction has completed.","nodes":[{"pos":[0,42],"content":"Called when the transaction has completed.","nodes":[{"content":"Called when the transaction has completed.","pos":[0,42]}]}],"pos":[6329,6372],"yaml":true},{"content":"If `succeeded` is `true`, the transaction succeeded and any resources used by the work batch may be released. If `succeeded` is `false`, the transaction failed. Depending on your implementation, you can perform any appropriate roll back on the work in the work batch when the transaction fails.","nodes":[{"pos":[0,294],"content":"If `succeeded` is `true`, the transaction succeeded and any resources used by the work batch may be released. If `succeeded` is `false`, the transaction failed. Depending on your implementation, you can perform any appropriate roll back on the work in the work batch when the transaction fails.","nodes":[{"content":"If <ph id=\"ph1\">`succeeded`</ph> is <ph id=\"ph2\">`true`</ph>, the transaction succeeded and any resources used by the work batch may be released.","pos":[0,109],"source":"If `succeeded` is `true`, the transaction succeeded and any resources used by the work batch may be released."},{"content":"If <ph id=\"ph1\">`succeeded`</ph> is <ph id=\"ph2\">`false`</ph>, the transaction failed.","pos":[110,160],"source":" If `succeeded` is `false`, the transaction failed."},{"content":"Depending on your implementation, you can perform any appropriate roll back on the work in the work batch when the transaction fails.","pos":[161,294]}]}],"pos":[6383,6678],"yaml":true,"extradata":"MT"},{"content":"`true` if the transaction succeeded; otherwise, `false`.","nodes":[{"pos":[0,56],"content":"<ph id=\"ph1\">`true`</ph> if the transaction succeeded; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` if the transaction succeeded; otherwise, `false`."}],"pos":[6860,6919],"yaml":true},{"content":"An <xref href=\"System.Collections.ICollection\"></xref> of work items.","nodes":[{"pos":[0,69],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Collections.ICollection\"&gt;&lt;/xref&gt;</ph> of work items.","source":"An <xref href=\"System.Collections.ICollection\"></xref> of work items."}],"pos":[6997,7067],"yaml":true},{"content":"Allows the items in the work batch to assert whether they must commit immediately.","nodes":[{"pos":[0,82],"content":"Allows the items in the work batch to assert whether they must commit immediately.","nodes":[{"content":"Allows the items in the work batch to assert whether they must commit immediately.","pos":[0,82]}]}],"pos":[8175,8258],"yaml":true},{"content":"If <xref:System.Workflow.Runtime.IPendingWork.MustCommit%2A> returns `false`, the work can be postponed to a future commit point. If any of the items must be committed, then return `true` and all items will be committed at the current commit point. For a discussion about possible commit points, see the <xref:System.Workflow.Runtime.Hosting.SqlWorkflowPersistenceService> class.","nodes":[{"pos":[0,379],"content":"If <xref:System.Workflow.Runtime.IPendingWork.MustCommit%2A> returns `false`, the work can be postponed to a future commit point. If any of the items must be committed, then return `true` and all items will be committed at the current commit point. For a discussion about possible commit points, see the <xref:System.Workflow.Runtime.Hosting.SqlWorkflowPersistenceService> class.","nodes":[{"content":"If <ph id=\"ph1\">&lt;xref:System.Workflow.Runtime.IPendingWork.MustCommit%2A&gt;</ph> returns <ph id=\"ph2\">`false`</ph>, the work can be postponed to a future commit point.","pos":[0,129],"source":"If <xref:System.Workflow.Runtime.IPendingWork.MustCommit%2A> returns `false`, the work can be postponed to a future commit point."},{"content":"If any of the items must be committed, then return <ph id=\"ph1\">`true`</ph> and all items will be committed at the current commit point.","pos":[130,248],"source":" If any of the items must be committed, then return `true` and all items will be committed at the current commit point."},{"content":"For a discussion about possible commit points, see the <ph id=\"ph1\">&lt;xref:System.Workflow.Runtime.Hosting.SqlWorkflowPersistenceService&gt;</ph> class.","pos":[249,379],"source":" For a discussion about possible commit points, see the <xref:System.Workflow.Runtime.Hosting.SqlWorkflowPersistenceService> class."}]}],"pos":[8269,8649],"yaml":true,"extradata":"MT"},{"content":"An <xref href=\"System.Collections.ICollection\"></xref> of work items.","nodes":[{"pos":[0,69],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Collections.ICollection\"&gt;&lt;/xref&gt;</ph> of work items.","source":"An <xref href=\"System.Collections.ICollection\"></xref> of work items."}],"pos":[8829,8899],"yaml":true},{"content":"`true` if any item in the collection must be committed immediately; otherwise, `false`.","nodes":[{"pos":[0,87],"content":"<ph id=\"ph1\">`true`</ph> if any item in the collection must be committed immediately; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` if any item in the collection must be committed immediately; otherwise, `false`."}],"pos":[8957,9047],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Workflow.Runtime.IPendingWork\n  commentId: T:System.Workflow.Runtime.IPendingWork\n  id: IPendingWork\n  children:\n  - System.Workflow.Runtime.IPendingWork.Commit(System.Transactions.Transaction,System.Collections.ICollection)\n  - System.Workflow.Runtime.IPendingWork.Complete(System.Boolean,System.Collections.ICollection)\n  - System.Workflow.Runtime.IPendingWork.MustCommit(System.Collections.ICollection)\n  langs:\n  - csharp\n  name: IPendingWork\n  nameWithType: IPendingWork\n  fullName: System.Workflow.Runtime.IPendingWork\n  type: Interface\n  assemblies:\n  - System.Workflow.Runtime\n  namespace: System.Workflow.Runtime\n  summary: Provides methods to participate in a work batch.\n  remarks: \"> [!NOTE]\\n>  [!INCLUDE[DeprecatedContent](~/includes/deprecatedcontent-md.md)]  \\n  \\n The <xref:System.Workflow.Runtime.IPendingWork> interface is provided for services that want to participate in the workflow runtime engine batching mechanism. The batching mechanism is especially useful for services that use a durable store. It is often important in these cases to maintain consistency between the durable store used by the service and the internal state of the workflow runtime engine.  \\n  \\n If you want your service to participate in workflow transaction batching provided by the <xref:System.Workflow.Runtime.Hosting.WorkflowCommitWorkBatchService>, you must implement the methods defined by the <xref:System.Workflow.Runtime.IPendingWork> interface. The workflow runtime engine will call the <xref:System.Workflow.Runtime.IPendingWork.Commit%2A> method on your service to commit the batch.  \\n  \\n The <xref:System.Workflow.Runtime.Hosting.SqlWorkflowPersistenceService> class implements the <xref:System.Workflow.Runtime.IPendingWork> interface.\"\n  syntax:\n    content: >-\n      [System.Obsolete(\"The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*\")]\n\n      public interface IPendingWork\n  derivedClasses:\n  - System.Workflow.Runtime.Hosting.SqlWorkflowPersistenceService\n  implements: []\n  attributes:\n  - type: System.ObsoleteAttribute\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Workflow.Runtime/IPendingWork.xml\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.Workflow.Runtime.IPendingWork.Commit(System.Transactions.Transaction,System.Collections.ICollection)\n  commentId: M:System.Workflow.Runtime.IPendingWork.Commit(System.Transactions.Transaction,System.Collections.ICollection)\n  id: Commit(System.Transactions.Transaction,System.Collections.ICollection)\n  parent: System.Workflow.Runtime.IPendingWork\n  langs:\n  - csharp\n  name: Commit(Transaction, ICollection)\n  nameWithType: IPendingWork.Commit(Transaction, ICollection)\n  fullName: IPendingWork.Commit(Transaction, ICollection)\n  type: Method\n  assemblies:\n  - System.Workflow.Runtime\n  namespace: System.Workflow.Runtime\n  summary: Commits the list of work items by using the specified <xref href=\"System.Transactions.Transaction\"></xref> object.\n  remarks: The workflow runtime engine calls the <xref:System.Workflow.Runtime.IPendingWork.Commit%2A> method when its semantics dictate that the pending work in the work batch should be committed. When it reaches a commit point, the workflow runtime engine calls the <xref:System.Workflow.Runtime.IPendingWork.Commit%2A> method on each <xref:System.Workflow.Runtime.IPendingWork> object in its work batch; the workflow runtime engine passes the <xref:System.Workflow.Runtime.IPendingWork.Commit%2A> method the collection of items associated with that <xref:System.Workflow.Runtime.IPendingWork> object. Either all of the work in a batch succeeds or none of it succeeds. You should throw an exception if any of the work items passed to the <xref:System.Workflow.Runtime.IPendingWork.Commit%2A> method in your implementation cannot be committed. Depending on your implementation, you may want to perform some rollback in your <xref:System.Workflow.Runtime.IPendingWork.Commit%2A> method if it cannot commit its work items. If the workflow runtime engine successfully commits all of the work in the work batch, it calls <xref:System.Workflow.Runtime.IPendingWork.Complete%2A> with the `succeeded` parameter set to `true`; otherwise, it calls <xref:System.Workflow.Runtime.IPendingWork.Complete%2A> with `succeeded` set to `false`.\n  syntax:\n    content: public void Commit (System.Transactions.Transaction transaction, System.Collections.ICollection items);\n    parameters:\n    - id: transaction\n      type: System.Transactions.Transaction\n      description: The <xref href=\"System.Transactions.Transaction\"></xref> associated with the pending work.\n    - id: items\n      type: System.Collections.ICollection\n      description: The work items to be committed.\n  overload: System.Workflow.Runtime.IPendingWork.Commit*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Workflow.Runtime/IPendingWork.xml\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.Workflow.Runtime.IPendingWork.Complete(System.Boolean,System.Collections.ICollection)\n  commentId: M:System.Workflow.Runtime.IPendingWork.Complete(System.Boolean,System.Collections.ICollection)\n  id: Complete(System.Boolean,System.Collections.ICollection)\n  parent: System.Workflow.Runtime.IPendingWork\n  langs:\n  - csharp\n  name: Complete(Boolean, ICollection)\n  nameWithType: IPendingWork.Complete(Boolean, ICollection)\n  fullName: IPendingWork.Complete(Boolean, ICollection)\n  type: Method\n  assemblies:\n  - System.Workflow.Runtime\n  namespace: System.Workflow.Runtime\n  summary: Called when the transaction has completed.\n  remarks: If `succeeded` is `true`, the transaction succeeded and any resources used by the work batch may be released. If `succeeded` is `false`, the transaction failed. Depending on your implementation, you can perform any appropriate roll back on the work in the work batch when the transaction fails.\n  syntax:\n    content: public void Complete (bool succeeded, System.Collections.ICollection items);\n    parameters:\n    - id: succeeded\n      type: System.Boolean\n      description: '`true` if the transaction succeeded; otherwise, `false`.'\n    - id: items\n      type: System.Collections.ICollection\n      description: An <xref href=\"System.Collections.ICollection\"></xref> of work items.\n  overload: System.Workflow.Runtime.IPendingWork.Complete*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Workflow.Runtime/IPendingWork.xml\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.Workflow.Runtime.IPendingWork.MustCommit(System.Collections.ICollection)\n  commentId: M:System.Workflow.Runtime.IPendingWork.MustCommit(System.Collections.ICollection)\n  id: MustCommit(System.Collections.ICollection)\n  parent: System.Workflow.Runtime.IPendingWork\n  langs:\n  - csharp\n  name: MustCommit(ICollection)\n  nameWithType: IPendingWork.MustCommit(ICollection)\n  fullName: IPendingWork.MustCommit(ICollection)\n  type: Method\n  assemblies:\n  - System.Workflow.Runtime\n  namespace: System.Workflow.Runtime\n  summary: Allows the items in the work batch to assert whether they must commit immediately.\n  remarks: If <xref:System.Workflow.Runtime.IPendingWork.MustCommit%2A> returns `false`, the work can be postponed to a future commit point. If any of the items must be committed, then return `true` and all items will be committed at the current commit point. For a discussion about possible commit points, see the <xref:System.Workflow.Runtime.Hosting.SqlWorkflowPersistenceService> class.\n  syntax:\n    content: public bool MustCommit (System.Collections.ICollection items);\n    parameters:\n    - id: items\n      type: System.Collections.ICollection\n      description: An <xref href=\"System.Collections.ICollection\"></xref> of work items.\n    return:\n      type: System.Boolean\n      description: '`true` if any item in the collection must be committed immediately; otherwise, `false`.'\n  overload: System.Workflow.Runtime.IPendingWork.MustCommit*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Workflow.Runtime/IPendingWork.xml\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\nreferences:\n- uid: System.Workflow.Runtime.IPendingWork.Commit(System.Transactions.Transaction,System.Collections.ICollection)\n  parent: System.Workflow.Runtime.IPendingWork\n  isExternal: false\n  name: Commit(Transaction, ICollection)\n  nameWithType: IPendingWork.Commit(Transaction, ICollection)\n  fullName: IPendingWork.Commit(Transaction, ICollection)\n- uid: System.Transactions.Transaction\n  parent: System.Transactions\n  isExternal: false\n  name: Transaction\n  nameWithType: Transaction\n  fullName: System.Transactions.Transaction\n- uid: System.Collections.ICollection\n  parent: System.Collections\n  isExternal: false\n  name: ICollection\n  nameWithType: ICollection\n  fullName: System.Collections.ICollection\n- uid: System.Workflow.Runtime.IPendingWork.Complete(System.Boolean,System.Collections.ICollection)\n  parent: System.Workflow.Runtime.IPendingWork\n  isExternal: false\n  name: Complete(Boolean, ICollection)\n  nameWithType: IPendingWork.Complete(Boolean, ICollection)\n  fullName: IPendingWork.Complete(Boolean, ICollection)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Workflow.Runtime.IPendingWork.MustCommit(System.Collections.ICollection)\n  parent: System.Workflow.Runtime.IPendingWork\n  isExternal: false\n  name: MustCommit(ICollection)\n  nameWithType: IPendingWork.MustCommit(ICollection)\n  fullName: IPendingWork.MustCommit(ICollection)\n- uid: System.Workflow.Runtime.IPendingWork.Commit*\n  parent: System.Workflow.Runtime.IPendingWork\n  isExternal: false\n  name: Commit\n  nameWithType: IPendingWork.Commit\n  fullName: IPendingWork.Commit\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Workflow.Runtime/IPendingWork.xml\n- uid: System.Workflow.Runtime.IPendingWork.Complete*\n  parent: System.Workflow.Runtime.IPendingWork\n  isExternal: false\n  name: Complete\n  nameWithType: IPendingWork.Complete\n  fullName: IPendingWork.Complete\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Workflow.Runtime/IPendingWork.xml\n- uid: System.Workflow.Runtime.IPendingWork.MustCommit*\n  parent: System.Workflow.Runtime.IPendingWork\n  isExternal: false\n  name: MustCommit\n  nameWithType: IPendingWork.MustCommit\n  fullName: IPendingWork.MustCommit\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Workflow.Runtime/IPendingWork.xml\n"}