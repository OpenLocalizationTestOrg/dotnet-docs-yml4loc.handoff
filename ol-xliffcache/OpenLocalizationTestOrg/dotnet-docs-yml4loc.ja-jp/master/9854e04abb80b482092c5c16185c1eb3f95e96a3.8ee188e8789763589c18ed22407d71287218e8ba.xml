{"nodes":[{"content":"Enables iterations of parallel loops to interact with other iterations. An instance of this class is provided by the <xref href=\"System.Threading.Tasks.Parallel\"></xref> class to each loop; you can not create instances in your code.","nodes":[{"pos":[0,232],"content":"Enables iterations of parallel loops to interact with other iterations. An instance of this class is provided by the <xref href=\"System.Threading.Tasks.Parallel\"></xref> class to each loop; you can not create instances in your code.","nodes":[{"content":"Enables iterations of parallel loops to interact with other iterations.","pos":[0,71]},{"content":"An instance of this class is provided by the <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Parallel\"&gt;&lt;/xref&gt;</ph> class to each loop; you can not create instances in your code.","pos":[72,232],"source":" An instance of this class is provided by the <xref href=\"System.Threading.Tasks.Parallel\"></xref> class to each loop; you can not create instances in your code."}]}],"pos":[802,1035],"yaml":true},{"content":"Note that you cannot instantiate an instance of this class. It is automatically generated by the compiler as an argument in a call to the <xref:System.Threading.Tasks.Parallel.For%2A?displayProperty=fullName> or <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=fullName> method. The example provides an illustration.  \n  \n Constructs such as `for` and `foreach` (in C#) and `For` and `For Each` (in Visual Basic) execute sequentially from the lowest index to the highest or from the first object in a set to the last. In contrast, the <xref:System.Threading.Tasks.Parallel.For%2A?displayProperty=fullName> and <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=fullName> methods do not. Because individual iterations of the loop run in parallel, they can begin and end in any order. The <xref:System.Threading.Tasks.ParallelLoopState> class allows individual iterations of parallel loops to interact with one another. The <xref:System.Threading.Tasks.ParallelLoopState> class allows you to:  \n  \n-   Exit the current iteration and prevent any additional iterations from starting by calling the <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> method. This does not affect iterations that have already begun execution.  \n  \n-   Prevent any iterations with an index greater than the current index from executing by calling the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method. This does not affect iterations that have already begun execution.  \n  \n-   Determine whether an exception has occurred in any loop iteration by retrieving the value of the <xref:System.Threading.Tasks.ParallelLoopState.IsExceptional%2A> property.  \n  \n-   Determine whether any iteration of the loop has called the <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> method by retrieving the value of the <xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A> property. You can use this property to return from iterations of the loop that started before the call to the <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> method but are still executing.  \n  \n-   Determine whether any iteration of the loop has called the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> or <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A>method or has thrown an exception by retrieving the value of the <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> property.  \n  \n-   Exit from a long-running iteration whose index is greater than the index of an iteration in which Break was called by retrieving the value of the <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> property.","nodes":[{"pos":[0,332],"content":"Note that you cannot instantiate an instance of this class. It is automatically generated by the compiler as an argument in a call to the <xref:System.Threading.Tasks.Parallel.For%2A?displayProperty=fullName> or <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=fullName> method. The example provides an illustration.","nodes":[{"content":"Note that you cannot instantiate an instance of this class. It is automatically generated by the compiler as an argument in a call to the <xref:System.Threading.Tasks.Parallel.For%2A?displayProperty=fullName> or <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=fullName> method. The example provides an illustration.","pos":[0,332],"nodes":[{"content":"Note that you cannot instantiate an instance of this class.","pos":[0,59]},{"content":"It is automatically generated by the compiler as an argument in a call to the <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.Parallel.For%2A?displayProperty=fullName&gt;</ph> or <ph id=\"ph2\">&lt;xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=fullName&gt;</ph> method.","pos":[60,294],"source":" It is automatically generated by the compiler as an argument in a call to the <xref:System.Threading.Tasks.Parallel.For%2A?displayProperty=fullName> or <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=fullName> method."},{"content":"The example provides an illustration.","pos":[295,332]}]}]},{"pos":[339,1020],"content":"Constructs such as `for` and `foreach` (in C#) and `For` and `For Each` (in Visual Basic) execute sequentially from the lowest index to the highest or from the first object in a set to the last. In contrast, the <xref:System.Threading.Tasks.Parallel.For%2A?displayProperty=fullName> and <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=fullName> methods do not. Because individual iterations of the loop run in parallel, they can begin and end in any order. The <xref:System.Threading.Tasks.ParallelLoopState> class allows individual iterations of parallel loops to interact with one another. The <xref:System.Threading.Tasks.ParallelLoopState> class allows you to:","nodes":[{"content":"Constructs such as <ph id=\"ph1\">`for`</ph> and <ph id=\"ph2\">`foreach`</ph> (in C#) and <ph id=\"ph3\">`For`</ph> and <ph id=\"ph4\">`For Each`</ph> (in Visual Basic) execute sequentially from the lowest index to the highest or from the first object in a set to the last.","pos":[0,194],"source":"Constructs such as `for` and `foreach` (in C#) and `For` and `For Each` (in Visual Basic) execute sequentially from the lowest index to the highest or from the first object in a set to the last."},{"content":"In contrast, the <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.Parallel.For%2A?displayProperty=fullName&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=fullName&gt;</ph> methods do not.","pos":[195,377],"source":" In contrast, the <xref:System.Threading.Tasks.Parallel.For%2A?displayProperty=fullName> and <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=fullName> methods do not."},{"content":"Because individual iterations of the loop run in parallel, they can begin and end in any order.","pos":[378,473]},{"content":"The <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.ParallelLoopState&gt;</ph> class allows individual iterations of parallel loops to interact with one another.","pos":[474,608],"source":" The <xref:System.Threading.Tasks.ParallelLoopState> class allows individual iterations of parallel loops to interact with one another."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.ParallelLoopState&gt;</ph> class allows you to:","pos":[609,681],"source":" The <xref:System.Threading.Tasks.ParallelLoopState> class allows you to:"}]},{"pos":[1030,1254],"content":"Exit the current iteration and prevent any additional iterations from starting by calling the <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> method. This does not affect iterations that have already begun execution.","nodes":[{"content":"Exit the current iteration and prevent any additional iterations from starting by calling the <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> method. This does not affect iterations that have already begun execution.","pos":[0,224],"nodes":[{"content":"Exit the current iteration and prevent any additional iterations from starting by calling the <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.ParallelLoopState.Stop%2A&gt;</ph> method.","pos":[0,157],"source":"Exit the current iteration and prevent any additional iterations from starting by calling the <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> method."},{"content":"This does not affect iterations that have already begun execution.","pos":[158,224]}]}]},{"pos":[1264,1493],"content":"Prevent any iterations with an index greater than the current index from executing by calling the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method. This does not affect iterations that have already begun execution.","nodes":[{"content":"Prevent any iterations with an index greater than the current index from executing by calling the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method. This does not affect iterations that have already begun execution.","pos":[0,229],"nodes":[{"content":"Prevent any iterations with an index greater than the current index from executing by calling the <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.ParallelLoopState.Break%2A&gt;</ph> method.","pos":[0,162],"source":"Prevent any iterations with an index greater than the current index from executing by calling the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method."},{"content":"This does not affect iterations that have already begun execution.","pos":[163,229]}]}]},{"pos":[1503,1674],"content":"Determine whether an exception has occurred in any loop iteration by retrieving the value of the <xref:System.Threading.Tasks.ParallelLoopState.IsExceptional%2A> property.","nodes":[{"content":"Determine whether an exception has occurred in any loop iteration by retrieving the value of the <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.ParallelLoopState.IsExceptional%2A&gt;</ph> property.","pos":[0,171],"source":"Determine whether an exception has occurred in any loop iteration by retrieving the value of the <xref:System.Threading.Tasks.ParallelLoopState.IsExceptional%2A> property."}]},{"pos":[1684,2095],"content":"Determine whether any iteration of the loop has called the <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> method by retrieving the value of the <xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A> property. You can use this property to return from iterations of the loop that started before the call to the <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> method but are still executing.","nodes":[{"content":"Determine whether any iteration of the loop has called the <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> method by retrieving the value of the <xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A> property. You can use this property to return from iterations of the loop that started before the call to the <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> method but are still executing.","pos":[0,411],"nodes":[{"content":"Determine whether any iteration of the loop has called the <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.ParallelLoopState.Stop%2A&gt;</ph> method by retrieving the value of the <ph id=\"ph2\">&lt;xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A&gt;</ph> property.","pos":[0,223],"source":"Determine whether any iteration of the loop has called the <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> method by retrieving the value of the <xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A> property."},{"content":"You can use this property to return from iterations of the loop that started before the call to the <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.ParallelLoopState.Stop%2A&gt;</ph> method but are still executing.","pos":[224,411],"source":" You can use this property to return from iterations of the loop that started before the call to the <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> method but are still executing."}]}]},{"pos":[2105,2431],"content":"Determine whether any iteration of the loop has called the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> or <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A>method or has thrown an exception by retrieving the value of the <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> property.","nodes":[{"content":"Determine whether any iteration of the loop has called the <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.ParallelLoopState.Break%2A&gt;</ph> or <ph id=\"ph2\">&lt;xref:System.Threading.Tasks.ParallelLoopState.Stop%2A&gt;</ph>method or has thrown an exception by retrieving the value of the <ph id=\"ph3\">&lt;xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A&gt;</ph> property.","pos":[0,326],"source":"Determine whether any iteration of the loop has called the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> or <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A>method or has thrown an exception by retrieving the value of the <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> property."}]},{"pos":[2441,2668],"content":"Exit from a long-running iteration whose index is greater than the index of an iteration in which Break was called by retrieving the value of the <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> property.","nodes":[{"content":"Exit from a long-running iteration whose index is greater than the index of an iteration in which Break was called by retrieving the value of the <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A&gt;</ph> property.","pos":[0,227],"source":"Exit from a long-running iteration whose index is greater than the index of an iteration in which Break was called by retrieving the value of the <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> property."}]}],"pos":[1046,3731],"yaml":true,"extradata":"MT"},{"content":"Communicates that the <xref href=\"System.Threading.Tasks.Parallel\"></xref> loop should cease execution of iterations beyond the current iteration at the system's earliest convenience.","nodes":[{"pos":[0,183],"content":"Communicates that the <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Parallel\"&gt;&lt;/xref&gt;</ph> loop should cease execution of iterations beyond the current iteration at the system's earliest convenience.","source":"Communicates that the <xref href=\"System.Threading.Tasks.Parallel\"></xref> loop should cease execution of iterations beyond the current iteration at the system's earliest convenience."}],"pos":[6923,7107],"yaml":true},{"content":"<xref:System.Threading.Tasks.ParallelLoopState.Break%2A> indicates that no iterations after the current iteration should be run. It effectively cancels any additional iterations of the loop. However, it does not stop any iterations that have already begun execution. For example, if <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> is called from the 100th iteration of a parallel loop iterating from 0 to 1,000, all iterations less than 100 should still be run, but the iterations from 101 through to 1000 that have not yet started are not executed.  \n  \n For long-running iterations that may already be executing, <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> sets the <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> property to the current iteration's index if the current index is less than the current value of <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A>. To stop iterations whose index is greater than the lowest break iteration from competing execution, you should do the following:  \n  \n1.  Check whether the <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> property is `true`.  \n  \n2.  Exit from the iteration if its index is greater than the <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> property value.  \n  \n The example provides an illustration.  \n  \n <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> is typically employed in search-based algorithms where an ordering is present in the data source.","nodes":[{"pos":[0,558],"content":"<xref:System.Threading.Tasks.ParallelLoopState.Break%2A> indicates that no iterations after the current iteration should be run. It effectively cancels any additional iterations of the loop. However, it does not stop any iterations that have already begun execution. For example, if <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> is called from the 100th iteration of a parallel loop iterating from 0 to 1,000, all iterations less than 100 should still be run, but the iterations from 101 through to 1000 that have not yet started are not executed.","nodes":[{"content":"<xref:System.Threading.Tasks.ParallelLoopState.Break%2A> indicates that no iterations after the current iteration should be run. It effectively cancels any additional iterations of the loop. However, it does not stop any iterations that have already begun execution. For example, if <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> is called from the 100th iteration of a parallel loop iterating from 0 to 1,000, all iterations less than 100 should still be run, but the iterations from 101 through to 1000 that have not yet started are not executed.","pos":[0,558],"nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Threading.Tasks.ParallelLoopState.Break%2A&gt;</ph> indicates that no iterations after the current iteration should be run.","pos":[0,128],"source":"<xref:System.Threading.Tasks.ParallelLoopState.Break%2A> indicates that no iterations after the current iteration should be run."},{"content":"It effectively cancels any additional iterations of the loop.","pos":[129,190]},{"content":"However, it does not stop any iterations that have already begun execution.","pos":[191,266]},{"content":"For example, if <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.ParallelLoopState.Break%2A&gt;</ph> is called from the 100th iteration of a parallel loop iterating from 0 to 1,000, all iterations less than 100 should still be run, but the iterations from 101 through to 1000 that have not yet started are not executed.","pos":[267,558],"source":" For example, if <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> is called from the 100th iteration of a parallel loop iterating from 0 to 1,000, all iterations less than 100 should still be run, but the iterations from 101 through to 1000 that have not yet started are not executed."}]}]},{"pos":[565,1060],"content":"For long-running iterations that may already be executing, <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> sets the <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> property to the current iteration's index if the current index is less than the current value of <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A>. To stop iterations whose index is greater than the lowest break iteration from competing execution, you should do the following:","nodes":[{"content":"For long-running iterations that may already be executing, <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> sets the <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> property to the current iteration's index if the current index is less than the current value of <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A>. To stop iterations whose index is greater than the lowest break iteration from competing execution, you should do the following:","pos":[0,495],"nodes":[{"content":"For long-running iterations that may already be executing, <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.ParallelLoopState.Break%2A&gt;</ph> sets the <ph id=\"ph2\">&lt;xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A&gt;</ph> property to the current iteration's index if the current index is less than the current value of <ph id=\"ph3\">&lt;xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A&gt;</ph>.","pos":[0,366],"source":"For long-running iterations that may already be executing, <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> sets the <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> property to the current iteration's index if the current index is less than the current value of <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A>."},{"content":"To stop iterations whose index is greater than the lowest break iteration from competing execution, you should do the following:","pos":[367,495]}]}]},{"pos":[1070,1185],"content":"Check whether the <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A&gt;</ph> property is <ph id=\"ph2\">`true`</ph>.","source":"Check whether the <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> property is `true`."},{"pos":[1195,1339],"content":"Exit from the iteration if its index is greater than the <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> property value.","nodes":[{"content":"Exit from the iteration if its index is greater than the <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A&gt;</ph> property value.","pos":[0,144],"source":"Exit from the iteration if its index is greater than the <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> property value."}]},{"pos":[1346,1383],"content":"The example provides an illustration.","nodes":[{"content":"The example provides an illustration.","pos":[0,37]}]},{"pos":[1390,1544],"content":"<xref:System.Threading.Tasks.ParallelLoopState.Break%2A> is typically employed in search-based algorithms where an ordering is present in the data source.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Threading.Tasks.ParallelLoopState.Break%2A&gt;</ph> is typically employed in search-based algorithms where an ordering is present in the data source.","pos":[0,154],"source":"<xref:System.Threading.Tasks.ParallelLoopState.Break%2A> is typically employed in search-based algorithms where an ordering is present in the data source."}]}],"pos":[7118,8675],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Threading.Tasks.ParallelLoopState.Stop\"></xref> method was previously called. <xref href=\"System.Threading.Tasks.ParallelLoopState.Break\"></xref> and <xref href=\"System.Threading.Tasks.ParallelLoopState.Stop\"></xref> may not be used in combination by iterations of the same loop.","nodes":[{"pos":[0,302],"content":"The <xref href=\"System.Threading.Tasks.ParallelLoopState.Stop\"></xref> method was previously called. <xref href=\"System.Threading.Tasks.ParallelLoopState.Break\"></xref> and <xref href=\"System.Threading.Tasks.ParallelLoopState.Stop\"></xref> may not be used in combination by iterations of the same loop.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.ParallelLoopState.Stop\"&gt;&lt;/xref&gt;</ph> method was previously called.","pos":[0,100],"source":"The <xref href=\"System.Threading.Tasks.ParallelLoopState.Stop\"></xref> method was previously called."},{"content":"<ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.ParallelLoopState.Break\"&gt;&lt;/xref&gt;</ph> and <ph id=\"ph2\">&lt;xref href=\"System.Threading.Tasks.ParallelLoopState.Stop\"&gt;&lt;/xref&gt;</ph> may not be used in combination by iterations of the same loop.","pos":[101,302],"source":"<xref href=\"System.Threading.Tasks.ParallelLoopState.Break\"></xref> and <xref href=\"System.Threading.Tasks.ParallelLoopState.Stop\"></xref> may not be used in combination by iterations of the same loop."}]}],"pos":[10463,10766],"yaml":true},{"content":"Gets whether any iteration of the loop has thrown an exception that went unhandled by that iteration.","nodes":[{"pos":[0,101],"content":"Gets whether any iteration of the loop has thrown an exception that went unhandled by that iteration.","nodes":[{"content":"Gets whether any iteration of the loop has thrown an exception that went unhandled by that iteration.","pos":[0,101]}]}],"pos":[12047,12149],"yaml":true},{"content":"`true` if an unhandled exception was thrown; otherwise, `false`.","nodes":[{"pos":[0,64],"content":"<ph id=\"ph1\">`true`</ph> if an unhandled exception was thrown; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` if an unhandled exception was thrown; otherwise, `false`."}],"pos":[12265,12332],"yaml":true},{"content":"Gets whether any iteration of the loop has called the <xref href=\"System.Threading.Tasks.ParallelLoopState.Stop\"></xref> method.","nodes":[{"pos":[0,128],"content":"Gets whether any iteration of the loop has called the <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.ParallelLoopState.Stop\"&gt;&lt;/xref&gt;</ph> method.","source":"Gets whether any iteration of the loop has called the <xref href=\"System.Threading.Tasks.ParallelLoopState.Stop\"></xref> method."}],"pos":[13674,13803],"yaml":true},{"content":"For long-running iterations of the loop, you can retrieve the value of the <xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A> property to determine whether any iterations of the loop that began execution before the call to the <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> method are still executing. You can then use the value of the <xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A> property to determine whether they should return immediately or execute normally.","nodes":[{"pos":[0,497],"content":"For long-running iterations of the loop, you can retrieve the value of the <xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A> property to determine whether any iterations of the loop that began execution before the call to the <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> method are still executing. You can then use the value of the <xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A> property to determine whether they should return immediately or execute normally.","nodes":[{"content":"For long-running iterations of the loop, you can retrieve the value of the <xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A> property to determine whether any iterations of the loop that began execution before the call to the <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> method are still executing. You can then use the value of the <xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A> property to determine whether they should return immediately or execute normally.","pos":[0,497],"nodes":[{"content":"For long-running iterations of the loop, you can retrieve the value of the <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A&gt;</ph> property to determine whether any iterations of the loop that began execution before the call to the <ph id=\"ph2\">&lt;xref:System.Threading.Tasks.ParallelLoopState.Stop%2A&gt;</ph> method are still executing.","pos":[0,320],"source":"For long-running iterations of the loop, you can retrieve the value of the <xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A> property to determine whether any iterations of the loop that began execution before the call to the <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> method are still executing."},{"content":"You can then use the value of the <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A&gt;</ph> property to determine whether they should return immediately or execute normally.","pos":[321,497],"source":" You can then use the value of the <xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A> property to determine whether they should return immediately or execute normally."}]}]}],"pos":[13814,14312],"yaml":true,"extradata":"MT"},{"content":"`true` if any iteration has stopped the loop by calling the <xref href=\"System.Threading.Tasks.ParallelLoopState.Stop\"></xref> method; otherwise, `false`.","nodes":[{"pos":[0,154],"content":"<ph id=\"ph1\">`true`</ph> if any iteration has stopped the loop by calling the <ph id=\"ph2\">&lt;xref href=\"System.Threading.Tasks.ParallelLoopState.Stop\"&gt;&lt;/xref&gt;</ph> method; otherwise, <ph id=\"ph3\">`false`</ph>.","source":"`true` if any iteration has stopped the loop by calling the <xref href=\"System.Threading.Tasks.ParallelLoopState.Stop\"></xref> method; otherwise, `false`."}],"pos":[15497,15654],"yaml":true},{"content":"Gets the lowest iteration of the loop from which <xref href=\"System.Threading.Tasks.ParallelLoopState.Break\"></xref> was called.","nodes":[{"pos":[0,128],"content":"Gets the lowest iteration of the loop from which <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.ParallelLoopState.Break\"&gt;&lt;/xref&gt;</ph> was called.","source":"Gets the lowest iteration of the loop from which <xref href=\"System.Threading.Tasks.ParallelLoopState.Break\"></xref> was called."}],"pos":[17058,17187],"yaml":true},{"content":"It is possible for multiple iterations of a parallel loop to call the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method. If they do, this value is the smallest index of an iteration that called <xref:System.Threading.Tasks.ParallelLoopState.Break%2A>. If no iteration of the loop called <xref:System.Threading.Tasks.ParallelLoopState.Break%2A>, this property returns `null`. Note that the property value is unaffected by calls to the <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> method.  \n  \n In long-running iterations in which all iterations after the iteration that calls the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method need not run, the <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> property is used to terminate iterations that began execution before the call to the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method. To stop iterations whose index is greater than the lowest break iteration from competing execution, you should do the following:  \n  \n1.  Check whether the <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> property is `true`.  \n  \n2.  Exit from the iteration if its index is greater than the <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> property value.  \n  \n The example provides an illustration.","nodes":[{"pos":[0,511],"content":"It is possible for multiple iterations of a parallel loop to call the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method. If they do, this value is the smallest index of an iteration that called <xref:System.Threading.Tasks.ParallelLoopState.Break%2A>. If no iteration of the loop called <xref:System.Threading.Tasks.ParallelLoopState.Break%2A>, this property returns `null`. Note that the property value is unaffected by calls to the <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> method.","nodes":[{"content":"It is possible for multiple iterations of a parallel loop to call the <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.ParallelLoopState.Break%2A&gt;</ph> method.","pos":[0,134],"source":"It is possible for multiple iterations of a parallel loop to call the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method."},{"content":"If they do, this value is the smallest index of an iteration that called <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.ParallelLoopState.Break%2A&gt;</ph>.","pos":[135,265],"source":" If they do, this value is the smallest index of an iteration that called <xref:System.Threading.Tasks.ParallelLoopState.Break%2A>."},{"content":"If no iteration of the loop called <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.ParallelLoopState.Break%2A&gt;</ph>, this property returns <ph id=\"ph2\">`null`</ph>.","pos":[266,388],"source":" If no iteration of the loop called <xref:System.Threading.Tasks.ParallelLoopState.Break%2A>, this property returns `null`."},{"content":"Note that the property value is unaffected by calls to the <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.ParallelLoopState.Stop%2A&gt;</ph> method.","pos":[389,511],"source":" Note that the property value is unaffected by calls to the <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> method."}]},{"pos":[518,1036],"content":"In long-running iterations in which all iterations after the iteration that calls the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method need not run, the <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> property is used to terminate iterations that began execution before the call to the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method. To stop iterations whose index is greater than the lowest break iteration from competing execution, you should do the following:","nodes":[{"content":"In long-running iterations in which all iterations after the iteration that calls the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method need not run, the <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> property is used to terminate iterations that began execution before the call to the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method. To stop iterations whose index is greater than the lowest break iteration from competing execution, you should do the following:","pos":[0,518],"nodes":[{"content":"In long-running iterations in which all iterations after the iteration that calls the <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.ParallelLoopState.Break%2A&gt;</ph> method need not run, the <ph id=\"ph2\">&lt;xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A&gt;</ph> property is used to terminate iterations that began execution before the call to the <ph id=\"ph3\">&lt;xref:System.Threading.Tasks.ParallelLoopState.Break%2A&gt;</ph> method.","pos":[0,389],"source":"In long-running iterations in which all iterations after the iteration that calls the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method need not run, the <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> property is used to terminate iterations that began execution before the call to the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method."},{"content":"To stop iterations whose index is greater than the lowest break iteration from competing execution, you should do the following:","pos":[390,518]}]}]},{"pos":[1046,1161],"content":"Check whether the <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A&gt;</ph> property is <ph id=\"ph2\">`true`</ph>.","source":"Check whether the <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> property is `true`."},{"pos":[1171,1315],"content":"Exit from the iteration if its index is greater than the <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> property value.","nodes":[{"content":"Exit from the iteration if its index is greater than the <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A&gt;</ph> property value.","pos":[0,144],"source":"Exit from the iteration if its index is greater than the <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> property value."}]},{"pos":[1322,1359],"content":"The example provides an illustration.","nodes":[{"content":"The example provides an illustration.","pos":[0,37]}]}],"pos":[17198,18568],"yaml":true,"extradata":"MT"},{"content":"The lowest iteration from which <xref href=\"System.Threading.Tasks.ParallelLoopState.Break\"></xref> was called. In the case of a <xref href=\"System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Concurrent.Partitioner{``0},System.Action{``0})\"></xref> loop, the value is based on an internally-generated index.","nodes":[{"pos":[0,318],"content":"The lowest iteration from which <xref href=\"System.Threading.Tasks.ParallelLoopState.Break\"></xref> was called. In the case of a <xref href=\"System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Concurrent.Partitioner{``0},System.Action{``0})\"></xref> loop, the value is based on an internally-generated index.","nodes":[{"content":"The lowest iteration from which <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.ParallelLoopState.Break\"&gt;&lt;/xref&gt;</ph> was called.","pos":[0,111],"source":"The lowest iteration from which <xref href=\"System.Threading.Tasks.ParallelLoopState.Break\"></xref> was called."},{"content":"In the case of a <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Concurrent.Partitioner{``0},System.Action{``0})\"&gt;&lt;/xref&gt;</ph> loop, the value is based on an internally-generated index.","pos":[112,318],"source":" In the case of a <xref href=\"System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Concurrent.Partitioner{``0},System.Action{``0})\"></xref> loop, the value is based on an internally-generated index."}]}],"pos":[20418,20737],"yaml":true},{"content":"Gets whether the current iteration of the loop should exit based on requests made by this or other iterations.","nodes":[{"pos":[0,110],"content":"Gets whether the current iteration of the loop should exit based on requests made by this or other iterations.","nodes":[{"content":"Gets whether the current iteration of the loop should exit based on requests made by this or other iterations.","pos":[0,110]}]}],"pos":[22188,22299],"yaml":true},{"content":"The <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> property is set to `true` under any of the following conditions:  \n  \n-   An iteration of the loop calls <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> or <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A>.  \n  \n-   An iteration of the loop throws an exception.  \n  \n-   The loop is canceled.  \n  \n When this property is `true`, the <xref:System.Threading.Tasks.Parallel> class will proactively attempt to prohibit additional iterations of the loop from starting execution. However, there may be cases where it is unable to prevent additional iterations from starting.  \n  \n It may also be the case that a long-running iteration has already begun execution. In such cases, iterations may explicitly check the <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> property and cease execution if the property returns `true`.","nodes":[{"pos":[0,146],"content":"The <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A&gt;</ph> property is set to <ph id=\"ph2\">`true`</ph> under any of the following conditions:","source":"The <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> property is set to `true` under any of the following conditions:"},{"pos":[156,303],"content":"An iteration of the loop calls <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> or <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A>.","nodes":[{"content":"An iteration of the loop calls <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.ParallelLoopState.Break%2A&gt;</ph> or <ph id=\"ph2\">&lt;xref:System.Threading.Tasks.ParallelLoopState.Stop%2A&gt;</ph>.","pos":[0,147],"source":"An iteration of the loop calls <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> or <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A>."}]},{"pos":[313,358],"content":"An iteration of the loop throws an exception.","nodes":[{"content":"An iteration of the loop throws an exception.","pos":[0,45]}]},{"pos":[368,389],"content":"The loop is canceled.","nodes":[{"content":"The loop is canceled.","pos":[0,21]}]},{"pos":[396,665],"content":"When this property is `true`, the <xref:System.Threading.Tasks.Parallel> class will proactively attempt to prohibit additional iterations of the loop from starting execution. However, there may be cases where it is unable to prevent additional iterations from starting.","nodes":[{"content":"When this property is <ph id=\"ph1\">`true`</ph>, the <ph id=\"ph2\">&lt;xref:System.Threading.Tasks.Parallel&gt;</ph> class will proactively attempt to prohibit additional iterations of the loop from starting execution.","pos":[0,174],"source":"When this property is `true`, the <xref:System.Threading.Tasks.Parallel> class will proactively attempt to prohibit additional iterations of the loop from starting execution."},{"content":"However, there may be cases where it is unable to prevent additional iterations from starting.","pos":[175,269]}]},{"pos":[672,944],"content":"It may also be the case that a long-running iteration has already begun execution. In such cases, iterations may explicitly check the <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> property and cease execution if the property returns `true`.","nodes":[{"content":"It may also be the case that a long-running iteration has already begun execution.","pos":[0,82]},{"content":"In such cases, iterations may explicitly check the <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A&gt;</ph> property and cease execution if the property returns <ph id=\"ph2\">`true`</ph>.","pos":[83,272],"source":" In such cases, iterations may explicitly check the <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> property and cease execution if the property returns `true`."}]}],"pos":[22310,23267],"yaml":true,"extradata":"MT"},{"content":"`true` if the current iteration should exit; otherwise, `false`.","nodes":[{"pos":[0,64],"content":"<ph id=\"ph1\">`true`</ph> if the current iteration should exit; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` if the current iteration should exit; otherwise, `false`."}],"pos":[24839,24906],"yaml":true},{"content":"Communicates that the <xref href=\"System.Threading.Tasks.Parallel\"></xref> loop should cease execution at the system's earliest convenience.","nodes":[{"pos":[0,140],"content":"Communicates that the <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Parallel\"&gt;&lt;/xref&gt;</ph> loop should cease execution at the system's earliest convenience.","source":"Communicates that the <xref href=\"System.Threading.Tasks.Parallel\"></xref> loop should cease execution at the system's earliest convenience."}],"pos":[26235,26376],"yaml":true},{"content":"Calling the <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> method indicates that any iterations of the loop that have not yet started need not be run. It effectively cancels any additional iterations of the loop. However, it does not stop any iterations that have already begun execution.  \n  \n Calling the <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> method causes the <xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A> property to return `true` for any iteration of the loop that is still executing. This is particularly useful for long-running iterations, which can check the <xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A> property and exit early if its value is `true`.  \n  \n <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> is typically employed in search-based algorithms, where once a result is found, no other iterations need be executed.","nodes":[{"pos":[0,297],"content":"Calling the <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> method indicates that any iterations of the loop that have not yet started need not be run. It effectively cancels any additional iterations of the loop. However, it does not stop any iterations that have already begun execution.","nodes":[{"content":"Calling the <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> method indicates that any iterations of the loop that have not yet started need not be run. It effectively cancels any additional iterations of the loop. However, it does not stop any iterations that have already begun execution.","pos":[0,297],"nodes":[{"content":"Calling the <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.ParallelLoopState.Stop%2A&gt;</ph> method indicates that any iterations of the loop that have not yet started need not be run.","pos":[0,159],"source":"Calling the <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> method indicates that any iterations of the loop that have not yet started need not be run."},{"content":"It effectively cancels any additional iterations of the loop.","pos":[160,221]},{"content":"However, it does not stop any iterations that have already begun execution.","pos":[222,297]}]}]},{"pos":[304,717],"content":"Calling the <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> method causes the <xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A> property to return `true` for any iteration of the loop that is still executing. This is particularly useful for long-running iterations, which can check the <xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A> property and exit early if its value is `true`.","nodes":[{"content":"Calling the <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.ParallelLoopState.Stop%2A&gt;</ph> method causes the <ph id=\"ph2\">&lt;xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A&gt;</ph> property to return <ph id=\"ph3\">`true`</ph> for any iteration of the loop that is still executing.","pos":[0,227],"source":"Calling the <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> method causes the <xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A> property to return `true` for any iteration of the loop that is still executing."},{"content":"This is particularly useful for long-running iterations, which can check the <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A&gt;</ph> property and exit early if its value is <ph id=\"ph2\">`true`</ph>.","pos":[228,413],"source":" This is particularly useful for long-running iterations, which can check the <xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A> property and exit early if its value is `true`."}]},{"pos":[724,897],"content":"<xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> is typically employed in search-based algorithms, where once a result is found, no other iterations need be executed.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Threading.Tasks.ParallelLoopState.Stop%2A&gt;</ph> is typically employed in search-based algorithms, where once a result is found, no other iterations need be executed.","pos":[0,173],"source":"<xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> is typically employed in search-based algorithms, where once a result is found, no other iterations need be executed."}]}],"pos":[26387,27291],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Threading.Tasks.ParallelLoopState.Break\"></xref> method was called previously. <xref href=\"System.Threading.Tasks.ParallelLoopState.Break\"></xref> and <xref href=\"System.Threading.Tasks.ParallelLoopState.Stop\"></xref> may not be used in combination by iterations of the same loop.","nodes":[{"pos":[0,303],"content":"The <xref href=\"System.Threading.Tasks.ParallelLoopState.Break\"></xref> method was called previously. <xref href=\"System.Threading.Tasks.ParallelLoopState.Break\"></xref> and <xref href=\"System.Threading.Tasks.ParallelLoopState.Stop\"></xref> may not be used in combination by iterations of the same loop.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.ParallelLoopState.Break\"&gt;&lt;/xref&gt;</ph> method was called previously.","pos":[0,101],"source":"The <xref href=\"System.Threading.Tasks.ParallelLoopState.Break\"></xref> method was called previously."},{"content":"<ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.ParallelLoopState.Break\"&gt;&lt;/xref&gt;</ph> and <ph id=\"ph2\">&lt;xref href=\"System.Threading.Tasks.ParallelLoopState.Stop\"&gt;&lt;/xref&gt;</ph> may not be used in combination by iterations of the same loop.","pos":[102,303],"source":"<xref href=\"System.Threading.Tasks.ParallelLoopState.Break\"></xref> and <xref href=\"System.Threading.Tasks.ParallelLoopState.Stop\"></xref> may not be used in combination by iterations of the same loop."}]}],"pos":[28757,29061],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Threading.Tasks.ParallelLoopState\n  commentId: T:System.Threading.Tasks.ParallelLoopState\n  id: ParallelLoopState\n  children:\n  - System.Threading.Tasks.ParallelLoopState.Break\n  - System.Threading.Tasks.ParallelLoopState.IsExceptional\n  - System.Threading.Tasks.ParallelLoopState.IsStopped\n  - System.Threading.Tasks.ParallelLoopState.LowestBreakIteration\n  - System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration\n  - System.Threading.Tasks.ParallelLoopState.Stop\n  langs:\n  - csharp\n  name: ParallelLoopState\n  nameWithType: ParallelLoopState\n  fullName: System.Threading.Tasks.ParallelLoopState\n  type: Class\n  assemblies:\n  - System.Threading.Tasks.Parallel\n  - mscorlib\n  - netstandard\n  namespace: System.Threading.Tasks\n  summary: Enables iterations of parallel loops to interact with other iterations. An instance of this class is provided by the <xref href=\"System.Threading.Tasks.Parallel\"></xref> class to each loop; you can not create instances in your code.\n  remarks: \"Note that you cannot instantiate an instance of this class. It is automatically generated by the compiler as an argument in a call to the <xref:System.Threading.Tasks.Parallel.For%2A?displayProperty=fullName> or <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=fullName> method. The example provides an illustration.  \\n  \\n Constructs such as `for` and `foreach` (in C#) and `For` and `For Each` (in Visual Basic) execute sequentially from the lowest index to the highest or from the first object in a set to the last. In contrast, the <xref:System.Threading.Tasks.Parallel.For%2A?displayProperty=fullName> and <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=fullName> methods do not. Because individual iterations of the loop run in parallel, they can begin and end in any order. The <xref:System.Threading.Tasks.ParallelLoopState> class allows individual iterations of parallel loops to interact with one another. The <xref:System.Threading.Tasks.ParallelLoopState> class allows you to:  \\n  \\n-   Exit the current iteration and prevent any additional iterations from starting by calling the <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> method. This does not affect iterations that have already begun execution.  \\n  \\n-   Prevent any iterations with an index greater than the current index from executing by calling the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method. This does not affect iterations that have already begun execution.  \\n  \\n-   Determine whether an exception has occurred in any loop iteration by retrieving the value of the <xref:System.Threading.Tasks.ParallelLoopState.IsExceptional%2A> property.  \\n  \\n-   Determine whether any iteration of the loop has called the <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> method by retrieving the value of the <xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A> property. You can use this property to return from iterations of the loop that started before the call to the <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> method but are still executing.  \\n  \\n-   Determine whether any iteration of the loop has called the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> or <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A>method or has thrown an exception by retrieving the value of the <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> property.  \\n  \\n-   Exit from a long-running iteration whose index is greater than the index of an iteration in which Break was called by retrieving the value of the <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> property.\"\n  example:\n  - \"The following example executes up to 100 iterations of a loop in parallel. Each iteration pauses for a random interval from 1 to 1,000 milliseconds. A randomly generated value determines on which iteration of the loop the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method is called. As the output from the example shows, no iterations whose index is greater than the <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> property value start after the call to the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method.  \\n  \\n [!code-csharp[System.Threading.Tasks.ParallelLoopState#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/cs/break1.cs#2)]\\n [!code-vb[System.Threading.Tasks.ParallelLoopState#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/vb/break1.vb#2)]  \\n  \\n Because iterations of the loop are still likely to be executing when the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method is called, each iteration calls the <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> property to check whether another iteration has called the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method. If  the property value is `true`, the iteration checks the value of the <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> property and, if it is greater than the current iteration's index value, returns immediately.\"\n  syntax:\n    content: public class ParallelLoopState\n  inheritance:\n  - System.Object\n  implements: []\n  inheritedMembers:\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.ToString\n  attributes: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/ParallelLoopState.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.Tasks.ParallelLoopState.Break\n  commentId: M:System.Threading.Tasks.ParallelLoopState.Break\n  id: Break\n  parent: System.Threading.Tasks.ParallelLoopState\n  langs:\n  - csharp\n  name: Break()\n  nameWithType: ParallelLoopState.Break()\n  fullName: ParallelLoopState.Break()\n  type: Method\n  assemblies:\n  - System.Threading.Tasks.Parallel\n  - mscorlib\n  - netstandard\n  namespace: System.Threading.Tasks\n  summary: Communicates that the <xref href=\"System.Threading.Tasks.Parallel\"></xref> loop should cease execution of iterations beyond the current iteration at the system's earliest convenience.\n  remarks: \"<xref:System.Threading.Tasks.ParallelLoopState.Break%2A> indicates that no iterations after the current iteration should be run. It effectively cancels any additional iterations of the loop. However, it does not stop any iterations that have already begun execution. For example, if <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> is called from the 100th iteration of a parallel loop iterating from 0 to 1,000, all iterations less than 100 should still be run, but the iterations from 101 through to 1000 that have not yet started are not executed.  \\n  \\n For long-running iterations that may already be executing, <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> sets the <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> property to the current iteration's index if the current index is less than the current value of <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A>. To stop iterations whose index is greater than the lowest break iteration from competing execution, you should do the following:  \\n  \\n1.  Check whether the <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> property is `true`.  \\n  \\n2.  Exit from the iteration if its index is greater than the <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> property value.  \\n  \\n The example provides an illustration.  \\n  \\n <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> is typically employed in search-based algorithms where an ordering is present in the data source.\"\n  example:\n  - \"The following example executes up to 100 iterations of a loop in parallel. Each iteration pauses for a random interval from 1 to 1,000 milliseconds. A randomly generated value determines on which iteration of the loop the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method is called. As the output from the example shows, no iterations whose index is greater than the <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> property value start after the call to the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method.  \\n  \\n [!code-csharp[System.Threading.Tasks.ParallelLoopState#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/cs/break1.cs#2)]\\n [!code-vb[System.Threading.Tasks.ParallelLoopState#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/vb/break1.vb#2)]  \\n  \\n Because iterations of the loop are still likely to be executing when the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method is called, each iteration calls the <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> property to check whether another iteration has called the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method. If  the property value is `true`, the iteration checks the value of the <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> property and, if it is greater than the current iteration's index value, returns immediately.\"\n  syntax:\n    content: public void Break ();\n    parameters: []\n  overload: System.Threading.Tasks.ParallelLoopState.Break*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The <xref href=\"System.Threading.Tasks.ParallelLoopState.Stop\"></xref> method was previously called. <xref href=\"System.Threading.Tasks.ParallelLoopState.Break\"></xref> and <xref href=\"System.Threading.Tasks.ParallelLoopState.Stop\"></xref> may not be used in combination by iterations of the same loop.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/ParallelLoopState.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.Tasks.ParallelLoopState.IsExceptional\n  commentId: P:System.Threading.Tasks.ParallelLoopState.IsExceptional\n  id: IsExceptional\n  parent: System.Threading.Tasks.ParallelLoopState\n  langs:\n  - csharp\n  name: IsExceptional\n  nameWithType: ParallelLoopState.IsExceptional\n  fullName: ParallelLoopState.IsExceptional\n  type: Property\n  assemblies:\n  - System.Threading.Tasks.Parallel\n  - mscorlib\n  - netstandard\n  namespace: System.Threading.Tasks\n  summary: Gets whether any iteration of the loop has thrown an exception that went unhandled by that iteration.\n  syntax:\n    content: public bool IsExceptional { get; }\n    return:\n      type: System.Boolean\n      description: '`true` if an unhandled exception was thrown; otherwise, `false`.'\n  overload: System.Threading.Tasks.ParallelLoopState.IsExceptional*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/ParallelLoopState.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.Tasks.ParallelLoopState.IsStopped\n  commentId: P:System.Threading.Tasks.ParallelLoopState.IsStopped\n  id: IsStopped\n  parent: System.Threading.Tasks.ParallelLoopState\n  langs:\n  - csharp\n  name: IsStopped\n  nameWithType: ParallelLoopState.IsStopped\n  fullName: ParallelLoopState.IsStopped\n  type: Property\n  assemblies:\n  - System.Threading.Tasks.Parallel\n  - mscorlib\n  - netstandard\n  namespace: System.Threading.Tasks\n  summary: Gets whether any iteration of the loop has called the <xref href=\"System.Threading.Tasks.ParallelLoopState.Stop\"></xref> method.\n  remarks: For long-running iterations of the loop, you can retrieve the value of the <xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A> property to determine whether any iterations of the loop that began execution before the call to the <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> method are still executing. You can then use the value of the <xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A> property to determine whether they should return immediately or execute normally.\n  example:\n  - \"The following example executes up to 10,000 iterations of a loop in parallel. Each iteration pauses for a random interval from 1 to 1,000 milliseconds. A randomly generated value determines on which iteration of the loop the <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> method is called. Because iterations of the loop are still likely to be executing when the <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> method is called, the lambda expression calls the <xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A> method to check whether another iteration has called the <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> method. If it returns `true`, the iteration returns immediately.  \\n  \\n [!code-csharp[System.Threading.Tasks.ParallelLoopState#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/cs/stop1.cs#1)]\\n [!code-vb[System.Threading.Tasks.ParallelLoopState#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/vb/stop1.vb#1)]\"\n  syntax:\n    content: public bool IsStopped { get; }\n    return:\n      type: System.Boolean\n      description: '`true` if any iteration has stopped the loop by calling the <xref href=\"System.Threading.Tasks.ParallelLoopState.Stop\"></xref> method; otherwise, `false`.'\n  overload: System.Threading.Tasks.ParallelLoopState.IsStopped*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/ParallelLoopState.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.Tasks.ParallelLoopState.LowestBreakIteration\n  commentId: P:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration\n  id: LowestBreakIteration\n  parent: System.Threading.Tasks.ParallelLoopState\n  langs:\n  - csharp\n  name: LowestBreakIteration\n  nameWithType: ParallelLoopState.LowestBreakIteration\n  fullName: ParallelLoopState.LowestBreakIteration\n  type: Property\n  assemblies:\n  - System.Threading.Tasks.Parallel\n  - mscorlib\n  - netstandard\n  namespace: System.Threading.Tasks\n  summary: Gets the lowest iteration of the loop from which <xref href=\"System.Threading.Tasks.ParallelLoopState.Break\"></xref> was called.\n  remarks: \"It is possible for multiple iterations of a parallel loop to call the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method. If they do, this value is the smallest index of an iteration that called <xref:System.Threading.Tasks.ParallelLoopState.Break%2A>. If no iteration of the loop called <xref:System.Threading.Tasks.ParallelLoopState.Break%2A>, this property returns `null`. Note that the property value is unaffected by calls to the <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> method.  \\n  \\n In long-running iterations in which all iterations after the iteration that calls the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method need not run, the <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> property is used to terminate iterations that began execution before the call to the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method. To stop iterations whose index is greater than the lowest break iteration from competing execution, you should do the following:  \\n  \\n1.  Check whether the <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> property is `true`.  \\n  \\n2.  Exit from the iteration if its index is greater than the <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> property value.  \\n  \\n The example provides an illustration.\"\n  example:\n  - \"The following example executes up to 100 iterations of a loop in parallel. Each iteration pauses for a random interval from 1 to 1,000 milliseconds. A randomly generated value determines on which iteration of the loop the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method is called. This prevents iterations whose index is greater than the <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> property value from starting after the call to the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method, but it does not affect any iterations that have already begun executing. To prevent these from completing, each iteration calls the <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> method to check whether another iteration has called the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method. If so, the iteration checks the value of the <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> property and, if it is greater than the current iteration's index value, returns immediately.  \\n  \\n [!code-csharp[System.Threading.Tasks.ParallelLoopState#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/cs/break1.cs#2)]\\n [!code-vb[System.Threading.Tasks.ParallelLoopState#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/vb/break1.vb#2)]  \\n  \\n Note that, because the <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> value is out of scope outside of the parallel loop, you must assign it to a variable that is visible outside of the loop if you want to preserve its value.\"\n  syntax:\n    content: public Nullable<long> LowestBreakIteration { get; }\n    return:\n      type: System.Nullable{System.Int64}\n      description: The lowest iteration from which <xref href=\"System.Threading.Tasks.ParallelLoopState.Break\"></xref> was called. In the case of a <xref href=\"System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Concurrent.Partitioner{``0},System.Action{``0})\"></xref> loop, the value is based on an internally-generated index.\n  overload: System.Threading.Tasks.ParallelLoopState.LowestBreakIteration*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/ParallelLoopState.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration\n  commentId: P:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration\n  id: ShouldExitCurrentIteration\n  parent: System.Threading.Tasks.ParallelLoopState\n  langs:\n  - csharp\n  name: ShouldExitCurrentIteration\n  nameWithType: ParallelLoopState.ShouldExitCurrentIteration\n  fullName: ParallelLoopState.ShouldExitCurrentIteration\n  type: Property\n  assemblies:\n  - System.Threading.Tasks.Parallel\n  - mscorlib\n  - netstandard\n  namespace: System.Threading.Tasks\n  summary: Gets whether the current iteration of the loop should exit based on requests made by this or other iterations.\n  remarks: \"The <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> property is set to `true` under any of the following conditions:  \\n  \\n-   An iteration of the loop calls <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> or <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A>.  \\n  \\n-   An iteration of the loop throws an exception.  \\n  \\n-   The loop is canceled.  \\n  \\n When this property is `true`, the <xref:System.Threading.Tasks.Parallel> class will proactively attempt to prohibit additional iterations of the loop from starting execution. However, there may be cases where it is unable to prevent additional iterations from starting.  \\n  \\n It may also be the case that a long-running iteration has already begun execution. In such cases, iterations may explicitly check the <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> property and cease execution if the property returns `true`.\"\n  example:\n  - \"The following example executes up to 100 iterations of a loop in parallel. Each iteration pauses for a random interval from 1 to 1,000 milliseconds. A randomly generated value determines on which iteration of the loop the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method is called. This prevents iterations whose index is greater than the <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> property value from starting after the call to the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method, but it does not affect any iterations that have already begun executing. To prevent these from completing, each iteration calls the <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> method to check whether another iteration has called the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method. If so, the iteration checks the value of the <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> property and, if it is greater than the current iteration's index value, returns immediately.  \\n  \\n [!code-csharp[System.Threading.Tasks.ParallelLoopState#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/cs/break1.cs#2)]\\n [!code-vb[System.Threading.Tasks.ParallelLoopState#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/vb/break1.vb#2)]\"\n  syntax:\n    content: public bool ShouldExitCurrentIteration { get; }\n    return:\n      type: System.Boolean\n      description: '`true` if the current iteration should exit; otherwise, `false`.'\n  overload: System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/ParallelLoopState.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.Tasks.ParallelLoopState.Stop\n  commentId: M:System.Threading.Tasks.ParallelLoopState.Stop\n  id: Stop\n  parent: System.Threading.Tasks.ParallelLoopState\n  langs:\n  - csharp\n  name: Stop()\n  nameWithType: ParallelLoopState.Stop()\n  fullName: ParallelLoopState.Stop()\n  type: Method\n  assemblies:\n  - System.Threading.Tasks.Parallel\n  - mscorlib\n  - netstandard\n  namespace: System.Threading.Tasks\n  summary: Communicates that the <xref href=\"System.Threading.Tasks.Parallel\"></xref> loop should cease execution at the system's earliest convenience.\n  remarks: \"Calling the <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> method indicates that any iterations of the loop that have not yet started need not be run. It effectively cancels any additional iterations of the loop. However, it does not stop any iterations that have already begun execution.  \\n  \\n Calling the <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> method causes the <xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A> property to return `true` for any iteration of the loop that is still executing. This is particularly useful for long-running iterations, which can check the <xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A> property and exit early if its value is `true`.  \\n  \\n <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> is typically employed in search-based algorithms, where once a result is found, no other iterations need be executed.\"\n  example:\n  - \"The following example executes up to 10,000 iterations of a loop in parallel. Each iteration pauses for a random interval from 1 to 1,000 milliseconds. A randomly generated value determines on which iteration of the loop the <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> method is called. As the output from the example shows, no iterations execute after the call to the <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> method.  \\n  \\n [!code-csharp[System.Threading.Tasks.ParallelLoopState#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/cs/stop1.cs#1)]\\n [!code-vb[System.Threading.Tasks.ParallelLoopState#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/vb/stop1.vb#1)]  \\n  \\n Because iterations of the loop are still likely to be executing when the <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> method is called, each iteration calls the <xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A> method to check whether another iteration has called the <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> method. If it returns `true`, the iteration returns immediately.\"\n  syntax:\n    content: public void Stop ();\n    parameters: []\n  overload: System.Threading.Tasks.ParallelLoopState.Stop*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The <xref href=\"System.Threading.Tasks.ParallelLoopState.Break\"></xref> method was called previously. <xref href=\"System.Threading.Tasks.ParallelLoopState.Break\"></xref> and <xref href=\"System.Threading.Tasks.ParallelLoopState.Stop\"></xref> may not be used in combination by iterations of the same loop.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/ParallelLoopState.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\nreferences:\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.InvalidOperationException\n  parent: System\n  isExternal: false\n  name: InvalidOperationException\n  nameWithType: InvalidOperationException\n  fullName: System.InvalidOperationException\n- uid: System.Threading.Tasks.ParallelLoopState.Break\n  parent: System.Threading.Tasks.ParallelLoopState\n  isExternal: false\n  name: Break()\n  nameWithType: ParallelLoopState.Break()\n  fullName: ParallelLoopState.Break()\n- uid: System.Threading.Tasks.ParallelLoopState.IsExceptional\n  parent: System.Threading.Tasks.ParallelLoopState\n  isExternal: false\n  name: IsExceptional\n  nameWithType: ParallelLoopState.IsExceptional\n  fullName: ParallelLoopState.IsExceptional\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Threading.Tasks.ParallelLoopState.IsStopped\n  parent: System.Threading.Tasks.ParallelLoopState\n  isExternal: false\n  name: IsStopped\n  nameWithType: ParallelLoopState.IsStopped\n  fullName: ParallelLoopState.IsStopped\n- uid: System.Threading.Tasks.ParallelLoopState.LowestBreakIteration\n  parent: System.Threading.Tasks.ParallelLoopState\n  isExternal: false\n  name: LowestBreakIteration\n  nameWithType: ParallelLoopState.LowestBreakIteration\n  fullName: ParallelLoopState.LowestBreakIteration\n- uid: System.Nullable`1\n  name: Nullable<T>\n  nameWithType: Nullable<T>\n  fullName: System.Nullable<T>\n- uid: System.Int64\n  name: Int64\n  nameWithType: Int64\n  fullName: System.Int64\n- uid: System.Nullable{System.Int64}\n  parent: System\n  isExternal: false\n  name: Nullable<Int64>\n  nameWithType: Nullable<Int64>\n  fullName: System.Nullable<System.Int64>\n  spec.csharp:\n  - uid: System.Nullable`1\n    name: Nullable\n    nameWithType: Nullable\n    fullName: System.Nullable\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Int64\n    name: Int64\n    nameWithType: Int64\n    fullName: System.Int64\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration\n  parent: System.Threading.Tasks.ParallelLoopState\n  isExternal: false\n  name: ShouldExitCurrentIteration\n  nameWithType: ParallelLoopState.ShouldExitCurrentIteration\n  fullName: ParallelLoopState.ShouldExitCurrentIteration\n- uid: System.Threading.Tasks.ParallelLoopState.Stop\n  parent: System.Threading.Tasks.ParallelLoopState\n  isExternal: false\n  name: Stop()\n  nameWithType: ParallelLoopState.Stop()\n  fullName: ParallelLoopState.Stop()\n- uid: System.Threading.Tasks.ParallelLoopState.Break*\n  parent: System.Threading.Tasks.ParallelLoopState\n  isExternal: false\n  name: Break\n  nameWithType: ParallelLoopState.Break\n  fullName: ParallelLoopState.Break\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/ParallelLoopState.xml\n- uid: System.Threading.Tasks.ParallelLoopState.IsExceptional*\n  parent: System.Threading.Tasks.ParallelLoopState\n  isExternal: false\n  name: IsExceptional\n  nameWithType: ParallelLoopState.IsExceptional\n  fullName: ParallelLoopState.IsExceptional\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/ParallelLoopState.xml\n- uid: System.Threading.Tasks.ParallelLoopState.IsStopped*\n  parent: System.Threading.Tasks.ParallelLoopState\n  isExternal: false\n  name: IsStopped\n  nameWithType: ParallelLoopState.IsStopped\n  fullName: ParallelLoopState.IsStopped\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/ParallelLoopState.xml\n- uid: System.Threading.Tasks.ParallelLoopState.LowestBreakIteration*\n  parent: System.Threading.Tasks.ParallelLoopState\n  isExternal: false\n  name: LowestBreakIteration\n  nameWithType: ParallelLoopState.LowestBreakIteration\n  fullName: ParallelLoopState.LowestBreakIteration\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/ParallelLoopState.xml\n- uid: System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration*\n  parent: System.Threading.Tasks.ParallelLoopState\n  isExternal: false\n  name: ShouldExitCurrentIteration\n  nameWithType: ParallelLoopState.ShouldExitCurrentIteration\n  fullName: ParallelLoopState.ShouldExitCurrentIteration\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/ParallelLoopState.xml\n- uid: System.Threading.Tasks.ParallelLoopState.Stop*\n  parent: System.Threading.Tasks.ParallelLoopState\n  isExternal: false\n  name: Stop\n  nameWithType: ParallelLoopState.Stop\n  fullName: ParallelLoopState.Stop\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/ParallelLoopState.xml\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: Object.Equals(Object)\n  fullName: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: Object.GetHashCode()\n  fullName: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: false\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: false\n  name: ToString()\n  nameWithType: Object.ToString()\n  fullName: Object.ToString()\n"}