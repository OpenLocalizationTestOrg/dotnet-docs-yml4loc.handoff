{"nodes":[{"content":"Defines a method that a type implements to compare two objects.","nodes":[{"pos":[0,63],"content":"Defines a method that a type implements to compare two objects.","nodes":[{"content":"Defines a method that a type implements to compare two objects.","pos":[0,63]}]}],"pos":[477,541],"yaml":true},{"content":"This interface is used with the <xref:System.Collections.Generic.List%601.Sort%2A?displayProperty=fullName> and <xref:System.Collections.Generic.List%601.BinarySearch%2A?displayProperty=fullName> methods. It provides a way to customize the sort order of a collection. Classes that implement this interface include the <xref:System.Collections.Generic.SortedDictionary%602> and <xref:System.Collections.Generic.SortedList%602> generic classes.  \n  \n The default implementation of this interface is the <xref:System.Collections.Generic.Comparer%601> class. The <xref:System.StringComparer> class implements this interface for type <xref:System.String>.  \n  \n This interface supports ordering comparisons. That is, when the <xref:System.Collections.Generic.Comparer%601.Compare%2A> method returns 0, it means that two objects sort the same. Implementation of exact equality comparisons is provided by the <xref:System.Collections.Generic.IEqualityComparer%601> generic interface.  \n  \n We recommend that you derive from the <xref:System.Collections.Generic.Comparer%601> class instead of implementing the <xref:System.Collections.Generic.IComparer%601> interface, because the <xref:System.Collections.Generic.Comparer%601> class provides an explicit interface implementation of the <xref:System.Collections.Generic.Comparer%601.System%23Collections%23IComparer%23Compare%2A> method and the <xref:System.Collections.Generic.Comparer%601.Default%2A> property that gets the default comparer for the object.","nodes":[{"pos":[0,442],"content":"This interface is used with the <xref:System.Collections.Generic.List%601.Sort%2A?displayProperty=fullName> and <xref:System.Collections.Generic.List%601.BinarySearch%2A?displayProperty=fullName> methods. It provides a way to customize the sort order of a collection. Classes that implement this interface include the <xref:System.Collections.Generic.SortedDictionary%602> and <xref:System.Collections.Generic.SortedList%602> generic classes.","nodes":[{"content":"This interface is used with the <xref:System.Collections.Generic.List%601.Sort%2A?displayProperty=fullName> and <xref:System.Collections.Generic.List%601.BinarySearch%2A?displayProperty=fullName> methods. It provides a way to customize the sort order of a collection. Classes that implement this interface include the <xref:System.Collections.Generic.SortedDictionary%602> and <xref:System.Collections.Generic.SortedList%602> generic classes.","pos":[0,442],"nodes":[{"content":"This interface is used with the <ph id=\"ph1\">&lt;xref:System.Collections.Generic.List%601.Sort%2A?displayProperty=fullName&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Collections.Generic.List%601.BinarySearch%2A?displayProperty=fullName&gt;</ph> methods.","pos":[0,204],"source":"This interface is used with the <xref:System.Collections.Generic.List%601.Sort%2A?displayProperty=fullName> and <xref:System.Collections.Generic.List%601.BinarySearch%2A?displayProperty=fullName> methods."},{"content":"It provides a way to customize the sort order of a collection.","pos":[205,267]},{"content":"Classes that implement this interface include the <ph id=\"ph1\">&lt;xref:System.Collections.Generic.SortedDictionary%602&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph> generic classes.","pos":[268,442],"source":" Classes that implement this interface include the <xref:System.Collections.Generic.SortedDictionary%602> and <xref:System.Collections.Generic.SortedList%602> generic classes."}]}]},{"pos":[449,650],"content":"The default implementation of this interface is the <xref:System.Collections.Generic.Comparer%601> class. The <xref:System.StringComparer> class implements this interface for type <xref:System.String>.","nodes":[{"content":"The default implementation of this interface is the <xref:System.Collections.Generic.Comparer%601> class. The <xref:System.StringComparer> class implements this interface for type <xref:System.String>.","pos":[0,201],"nodes":[{"content":"The default implementation of this interface is the <ph id=\"ph1\">&lt;xref:System.Collections.Generic.Comparer%601&gt;</ph> class.","pos":[0,105],"source":"The default implementation of this interface is the <xref:System.Collections.Generic.Comparer%601> class."},{"content":"The <ph id=\"ph1\">&lt;xref:System.StringComparer&gt;</ph> class implements this interface for type <ph id=\"ph2\">&lt;xref:System.String&gt;</ph>.","pos":[106,201],"source":" The <xref:System.StringComparer> class implements this interface for type <xref:System.String>."}]}]},{"pos":[657,976],"content":"This interface supports ordering comparisons. That is, when the <xref:System.Collections.Generic.Comparer%601.Compare%2A> method returns 0, it means that two objects sort the same. Implementation of exact equality comparisons is provided by the <xref:System.Collections.Generic.IEqualityComparer%601> generic interface.","nodes":[{"content":"This interface supports ordering comparisons. That is, when the <xref:System.Collections.Generic.Comparer%601.Compare%2A> method returns 0, it means that two objects sort the same. Implementation of exact equality comparisons is provided by the <xref:System.Collections.Generic.IEqualityComparer%601> generic interface.","pos":[0,319],"nodes":[{"content":"This interface supports ordering comparisons.","pos":[0,45]},{"content":"That is, when the <ph id=\"ph1\">&lt;xref:System.Collections.Generic.Comparer%601.Compare%2A&gt;</ph> method returns 0, it means that two objects sort the same.","pos":[46,180],"source":" That is, when the <xref:System.Collections.Generic.Comparer%601.Compare%2A> method returns 0, it means that two objects sort the same."},{"content":"Implementation of exact equality comparisons is provided by the <ph id=\"ph1\">&lt;xref:System.Collections.Generic.IEqualityComparer%601&gt;</ph> generic interface.","pos":[181,319],"source":" Implementation of exact equality comparisons is provided by the <xref:System.Collections.Generic.IEqualityComparer%601> generic interface."}]}]},{"pos":[983,1500],"content":"We recommend that you derive from the <xref:System.Collections.Generic.Comparer%601> class instead of implementing the <xref:System.Collections.Generic.IComparer%601> interface, because the <xref:System.Collections.Generic.Comparer%601> class provides an explicit interface implementation of the <xref:System.Collections.Generic.Comparer%601.System%23Collections%23IComparer%23Compare%2A> method and the <xref:System.Collections.Generic.Comparer%601.Default%2A> property that gets the default comparer for the object.","nodes":[{"content":"We recommend that you derive from the <ph id=\"ph1\">&lt;xref:System.Collections.Generic.Comparer%601&gt;</ph> class instead of implementing the <ph id=\"ph2\">&lt;xref:System.Collections.Generic.IComparer%601&gt;</ph> interface, because the <ph id=\"ph3\">&lt;xref:System.Collections.Generic.Comparer%601&gt;</ph> class provides an explicit interface implementation of the <ph id=\"ph4\">&lt;xref:System.Collections.Generic.Comparer%601.System%23Collections%23IComparer%23Compare%2A&gt;</ph> method and the <ph id=\"ph5\">&lt;xref:System.Collections.Generic.Comparer%601.Default%2A&gt;</ph> property that gets the default comparer for the object.","pos":[0,517],"source":"We recommend that you derive from the <xref:System.Collections.Generic.Comparer%601> class instead of implementing the <xref:System.Collections.Generic.IComparer%601> interface, because the <xref:System.Collections.Generic.Comparer%601> class provides an explicit interface implementation of the <xref:System.Collections.Generic.Comparer%601.System%23Collections%23IComparer%23Compare%2A> method and the <xref:System.Collections.Generic.Comparer%601.Default%2A> property that gets the default comparer for the object."}]}],"pos":[552,2061],"yaml":true,"extradata":"MT"},{"content":"The type of objects to compare.","nodes":[{"pos":[0,31],"content":"The type of objects to compare.","nodes":[{"content":"The type of objects to compare.","pos":[0,31]}]}],"pos":[2787,2819],"yaml":true},{"content":"Compares two objects and returns a value indicating whether one is less than, equal to, or greater than the other.","nodes":[{"pos":[0,114],"content":"Compares two objects and returns a value indicating whether one is less than, equal to, or greater than the other.","nodes":[{"content":"Compares two objects and returns a value indicating whether one is less than, equal to, or greater than the other.","pos":[0,114]}]}],"pos":[4722,4837],"yaml":true},{"content":"Implement this method to provide a customized sort order comparison for type `T`.  \n  \n Comparing `null` with any reference type is allowed and does not generate an exception. A null reference is considered to be less than any reference that is not null.","nodes":[{"pos":[0,81],"content":"Implement this method to provide a customized sort order comparison for type <ph id=\"ph1\">`T`</ph>.","source":"Implement this method to provide a customized sort order comparison for type `T`."},{"pos":[88,254],"content":"Comparing `null` with any reference type is allowed and does not generate an exception. A null reference is considered to be less than any reference that is not null.","nodes":[{"content":"Comparing <ph id=\"ph1\">`null`</ph> with any reference type is allowed and does not generate an exception.","pos":[0,87],"source":"Comparing `null` with any reference type is allowed and does not generate an exception."},{"content":"A null reference is considered to be less than any reference that is not null.","pos":[88,166]}]}],"pos":[4848,5107],"yaml":true,"extradata":"MT"},{"content":"The first object to compare.","nodes":[{"pos":[0,28],"content":"The first object to compare.","nodes":[{"content":"The first object to compare.","pos":[0,28]}]}],"pos":[5841,5870],"yaml":true},{"content":"The second object to compare.","nodes":[{"pos":[0,29],"content":"The second object to compare.","nodes":[{"content":"The second object to compare.","pos":[0,29]}]}],"pos":[5915,5945],"yaml":true},{"content":"A signed integer that indicates the relative values of <code>x</code> and <code>y</code>, as shown in the following table.  \n  \n <table><thead><tr><th> Value  \n  \n </th><th> Meaning  \n  \n </th></tr></thead><tbody><tr><td> Less than zero  \n  \n </td><td><code>x</code> is less than <code>y</code>.  \n  \n </td></tr><tr><td> Zero  \n  \n </td><td><code>x</code> equals <code>y</code>.  \n  \n </td></tr><tr><td> Greater than zero  \n  \n </td><td><code>x</code> is greater than <code>y</code>.  \n  \n </td></tr></tbody></table>","nodes":[{"pos":[0,122],"content":"A signed integer that indicates the relative values of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">x</ph><ept id=\"p1\">&lt;/code&gt;</ept> and <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">y</ph><ept id=\"p2\">&lt;/code&gt;</ept>, as shown in the following table.","source":"A signed integer that indicates the relative values of <code>x</code> and <code>y</code>, as shown in the following table."},{"pos":[129,517],"content":"<table><thead><tr><th> Value  \n  \n </th><th> Meaning  \n  \n </th></tr></thead><tbody><tr><td> Less than zero  \n  \n </td><td><code>x</code> is less than <code>y</code>.  \n  \n </td></tr><tr><td> Zero  \n  \n </td><td><code>x</code> equals <code>y</code>.  \n  \n </td></tr><tr><td> Greater than zero  \n  \n </td><td><code>x</code> is greater than <code>y</code>.  \n  \n </td></tr></tbody></table>","nodes":[{"content":"Value","pos":[23,33],"source":" Value  \n  \n "},{"content":"Meaning","pos":[45,57],"source":" Meaning  \n  \n "},{"content":"Less than zero","pos":[93,112],"source":" Less than zero  \n  \n "},{"content":"<code>x</code> is less than <code>y</code>.  \n  \n ","pos":[123,173],"nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;x&lt;/code&gt;</ph> is less than <ph id=\"ph2\">&lt;code&gt;y&lt;/code&gt;</ph>.","pos":[0,43],"source":"<code>x</code> is less than <code>y</code>."}]},{"content":"Zero","pos":[192,201],"source":" Zero  \n  \n "},{"content":"<code>x</code> equals <code>y</code>.  \n  \n ","pos":[212,256],"nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;x&lt;/code&gt;</ph> equals <ph id=\"ph2\">&lt;code&gt;y&lt;/code&gt;</ph>.","pos":[0,37],"source":"<code>x</code> equals <code>y</code>."}]},{"content":"Greater than zero","pos":[275,297],"source":" Greater than zero  \n  \n "},{"content":"<code>x</code> is greater than <code>y</code>.  \n  \n ","pos":[308,361],"nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;x&lt;/code&gt;</ph> is greater than <ph id=\"ph2\">&lt;code&gt;y&lt;/code&gt;</ph>.","pos":[0,46],"source":"<code>x</code> is greater than <code>y</code>."}]}]}],"pos":[6001,6538],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Collections.Generic.IComparer`1\n  commentId: T:System.Collections.Generic.IComparer`1\n  id: IComparer`1\n  children:\n  - System.Collections.Generic.IComparer`1.Compare(`0,`0)\n  langs:\n  - csharp\n  name: IComparer<T>\n  nameWithType: IComparer<T>\n  fullName: System.Collections.Generic.IComparer<T>\n  type: Interface\n  assemblies:\n  - System.Runtime\n  - mscorlib\n  - netstandard\n  namespace: System.Collections.Generic\n  summary: Defines a method that a type implements to compare two objects.\n  remarks: \"This interface is used with the <xref:System.Collections.Generic.List%601.Sort%2A?displayProperty=fullName> and <xref:System.Collections.Generic.List%601.BinarySearch%2A?displayProperty=fullName> methods. It provides a way to customize the sort order of a collection. Classes that implement this interface include the <xref:System.Collections.Generic.SortedDictionary%602> and <xref:System.Collections.Generic.SortedList%602> generic classes.  \\n  \\n The default implementation of this interface is the <xref:System.Collections.Generic.Comparer%601> class. The <xref:System.StringComparer> class implements this interface for type <xref:System.String>.  \\n  \\n This interface supports ordering comparisons. That is, when the <xref:System.Collections.Generic.Comparer%601.Compare%2A> method returns 0, it means that two objects sort the same. Implementation of exact equality comparisons is provided by the <xref:System.Collections.Generic.IEqualityComparer%601> generic interface.  \\n  \\n We recommend that you derive from the <xref:System.Collections.Generic.Comparer%601> class instead of implementing the <xref:System.Collections.Generic.IComparer%601> interface, because the <xref:System.Collections.Generic.Comparer%601> class provides an explicit interface implementation of the <xref:System.Collections.Generic.Comparer%601.System%23Collections%23IComparer%23Compare%2A> method and the <xref:System.Collections.Generic.Comparer%601.Default%2A> property that gets the default comparer for the object.\"\n  example:\n  - \"The following example implements the <xref:System.Collections.Generic.IComparer%601> interface to compare objects of type `Box` according to their dimensions. This example is part of a larger example provided for the <xref:System.Collections.Generic.Comparer%601> class.  \\n  \\n [!code-csharp[System.Collections.Generic.BoxCompare#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.collections.generic.boxcompare/cs/program.cs#7)]\\n [!code-vb[System.Collections.Generic.BoxCompare#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.collections.generic.boxcompare/vb/program.vb#7)]\"\n  syntax:\n    content: public interface IComparer<in T>\n    typeParameters:\n    - id: T\n      description: The type of objects to compare.\n  derivedClasses:\n  - System.StringComparer\n  - System.Collections.Generic.Comparer`1\n  - System.Reflection.Metadata.HandleComparer\n  - System.Reflection.Metadata.HandleComparer\n  - System.Web.UI.DataVisualization.Charting.DataPointComparer\n  - System.Windows.Forms.DataVisualization.Charting.DataPointComparer\n  - System.Xml.Linq.XNodeDocumentOrderComparer\n  implements: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/IComparer`1.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.Generic.IComparer`1.Compare(`0,`0)\n  commentId: M:System.Collections.Generic.IComparer`1.Compare(`0,`0)\n  id: Compare(`0,`0)\n  parent: System.Collections.Generic.IComparer`1\n  langs:\n  - csharp\n  name: Compare(T, T)\n  nameWithType: IComparer<T>.Compare(T, T)\n  fullName: IComparer<T>.Compare(T, T)\n  type: Method\n  assemblies:\n  - System.Runtime\n  - mscorlib\n  - netstandard\n  namespace: System.Collections.Generic\n  summary: Compares two objects and returns a value indicating whether one is less than, equal to, or greater than the other.\n  remarks: \"Implement this method to provide a customized sort order comparison for type `T`.  \\n  \\n Comparing `null` with any reference type is allowed and does not generate an exception. A null reference is considered to be less than any reference that is not null.\"\n  example:\n  - \"The following example implements the <xref:System.Collections.Generic.IComparer%601> interface to compare objects of type `Box` according to their dimensions. This example is part of a larger example provided for the <xref:System.Collections.Generic.Comparer%601> class.  \\n  \\n [!code-csharp[System.Collections.Generic.BoxCompare#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.collections.generic.boxcompare/cs/program.cs#7)]\\n [!code-vb[System.Collections.Generic.BoxCompare#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.collections.generic.boxcompare/vb/program.vb#7)]\"\n  syntax:\n    content: public int Compare (T x, T y);\n    parameters:\n    - id: x\n      type: T\n      description: The first object to compare.\n    - id: y\n      type: T\n      description: The second object to compare.\n    return:\n      type: System.Int32\n      description: \"A signed integer that indicates the relative values of <code>x</code> and <code>y</code>, as shown in the following table.  \\n  \\n <table><thead><tr><th> Value  \\n  \\n </th><th> Meaning  \\n  \\n </th></tr></thead><tbody><tr><td> Less than zero  \\n  \\n </td><td><code>x</code> is less than <code>y</code>.  \\n  \\n </td></tr><tr><td> Zero  \\n  \\n </td><td><code>x</code> equals <code>y</code>.  \\n  \\n </td></tr><tr><td> Greater than zero  \\n  \\n </td><td><code>x</code> is greater than <code>y</code>.  \\n  \\n </td></tr></tbody></table>\"\n  overload: System.Collections.Generic.IComparer`1.Compare*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/IComparer`1.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\nreferences:\n- uid: System.Collections.Generic.IComparer`1.Compare(`0,`0)\n  parent: System.Collections.Generic.IComparer`1\n  isExternal: false\n  name: Compare(T, T)\n  nameWithType: IComparer<T>.Compare(T, T)\n  fullName: IComparer<T>.Compare(T, T)\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: T\n  isExternal: true\n  name: T\n  nameWithType: T\n  fullName: T\n- uid: System.Collections.Generic.IComparer`1.Compare*\n  parent: System.Collections.Generic.IComparer`1\n  isExternal: false\n  name: Compare\n  nameWithType: IComparer<T>.Compare\n  fullName: IComparer<T>.Compare\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/IComparer`1.xml\n"}