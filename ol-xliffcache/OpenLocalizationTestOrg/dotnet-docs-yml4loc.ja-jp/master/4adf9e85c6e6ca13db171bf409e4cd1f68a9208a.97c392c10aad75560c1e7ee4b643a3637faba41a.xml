{"nodes":[{"content":"Enables collections to be passed between an add-in and its host application.","nodes":[{"pos":[0,76],"content":"Enables collections to be passed between an add-in and its host application.","nodes":[{"content":"Enables collections to be passed between an add-in and its host application.","pos":[0,76]}]}],"pos":[909,986],"yaml":true},{"content":"This class provides methods that enable an <xref:System.Collections.Generic.IList%601> collection to be converted to a <xref:System.AddIn.Contract.IListContract%601> collection. The <xref:System.AddIn.Contract.IListContract%601> collection is passed across the isolation boundary and converted back to an <xref:System.Collections.Generic.IList%601> collection that the add-in or the host application can use.  \n  \n Objects in collections must be remotable. For more information about the object types that you can pass, see [Contracts, Views, and Adapters](http://msdn.microsoft.com/en-us/a6460173-9507-4b87-8c07-d4ee245d715c).","nodes":[{"pos":[0,408],"content":"This class provides methods that enable an <xref:System.Collections.Generic.IList%601> collection to be converted to a <xref:System.AddIn.Contract.IListContract%601> collection. The <xref:System.AddIn.Contract.IListContract%601> collection is passed across the isolation boundary and converted back to an <xref:System.Collections.Generic.IList%601> collection that the add-in or the host application can use.","nodes":[{"content":"This class provides methods that enable an <xref:System.Collections.Generic.IList%601> collection to be converted to a <xref:System.AddIn.Contract.IListContract%601> collection. The <xref:System.AddIn.Contract.IListContract%601> collection is passed across the isolation boundary and converted back to an <xref:System.Collections.Generic.IList%601> collection that the add-in or the host application can use.","pos":[0,408],"nodes":[{"content":"This class provides methods that enable an <ph id=\"ph1\">&lt;xref:System.Collections.Generic.IList%601&gt;</ph> collection to be converted to a <ph id=\"ph2\">&lt;xref:System.AddIn.Contract.IListContract%601&gt;</ph> collection.","pos":[0,177],"source":"This class provides methods that enable an <xref:System.Collections.Generic.IList%601> collection to be converted to a <xref:System.AddIn.Contract.IListContract%601> collection."},{"content":"The <ph id=\"ph1\">&lt;xref:System.AddIn.Contract.IListContract%601&gt;</ph> collection is passed across the isolation boundary and converted back to an <ph id=\"ph2\">&lt;xref:System.Collections.Generic.IList%601&gt;</ph> collection that the add-in or the host application can use.","pos":[178,408],"source":" The <xref:System.AddIn.Contract.IListContract%601> collection is passed across the isolation boundary and converted back to an <xref:System.Collections.Generic.IList%601> collection that the add-in or the host application can use."}]}]},{"pos":[415,627],"content":"Objects in collections must be remotable. For more information about the object types that you can pass, see [Contracts, Views, and Adapters](http://msdn.microsoft.com/en-us/a6460173-9507-4b87-8c07-d4ee245d715c).","nodes":[{"content":"Objects in collections must be remotable.","pos":[0,41]},{"content":"For more information about the object types that you can pass, see <bpt id=\"p1\">[</bpt>Contracts, Views, and Adapters<ept id=\"p1\">](http://msdn.microsoft.com/en-us/a6460173-9507-4b87-8c07-d4ee245d715c)</ept>.","pos":[42,212],"source":" For more information about the object types that you can pass, see [Contracts, Views, and Adapters](http://msdn.microsoft.com/en-us/a6460173-9507-4b87-8c07-d4ee245d715c)."}]}],"pos":[997,1629],"yaml":true,"extradata":"MT"},{"content":"Converts the specified <xref href=\"System.AddIn.Contract.IListContract`1\"></xref> collection to an <xref href=\"System.Collections.Generic.IList`1\"></xref> collection.","nodes":[{"pos":[0,166],"content":"Converts the specified <ph id=\"ph1\">&lt;xref href=\"System.AddIn.Contract.IListContract`1\"&gt;&lt;/xref&gt;</ph> collection to an <ph id=\"ph2\">&lt;xref href=\"System.Collections.Generic.IList`1\"&gt;&lt;/xref&gt;</ph> collection.","source":"Converts the specified <xref href=\"System.AddIn.Contract.IListContract`1\"></xref> collection to an <xref href=\"System.Collections.Generic.IList`1\"></xref> collection."}],"pos":[3169,3336],"yaml":true},{"content":"The host application or add-in can use the returned <xref:System.Collections.Generic.IList%601> collection. The <xref:System.Collections.Generic.IList%601> collection will have a lifetime token for the remote <xref:System.AddIn.Contract.IListContract%601> collection.  \n  \n You should use this method overload only when the contents of the <xref:System.AddIn.Contract.IListContract%601> are serializable types that can be passed directly to the add-in and host (rather than types that must be adapted into views).","nodes":[{"pos":[0,267],"content":"The host application or add-in can use the returned <xref:System.Collections.Generic.IList%601> collection. The <xref:System.Collections.Generic.IList%601> collection will have a lifetime token for the remote <xref:System.AddIn.Contract.IListContract%601> collection.","nodes":[{"content":"The host application or add-in can use the returned <xref:System.Collections.Generic.IList%601> collection. The <xref:System.Collections.Generic.IList%601> collection will have a lifetime token for the remote <xref:System.AddIn.Contract.IListContract%601> collection.","pos":[0,267],"nodes":[{"content":"The host application or add-in can use the returned <ph id=\"ph1\">&lt;xref:System.Collections.Generic.IList%601&gt;</ph> collection.","pos":[0,107],"source":"The host application or add-in can use the returned <xref:System.Collections.Generic.IList%601> collection."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Collections.Generic.IList%601&gt;</ph> collection will have a lifetime token for the remote <ph id=\"ph2\">&lt;xref:System.AddIn.Contract.IListContract%601&gt;</ph> collection.","pos":[108,267],"source":" The <xref:System.Collections.Generic.IList%601> collection will have a lifetime token for the remote <xref:System.AddIn.Contract.IListContract%601> collection."}]}]},{"pos":[274,513],"content":"You should use this method overload only when the contents of the <xref:System.AddIn.Contract.IListContract%601> are serializable types that can be passed directly to the add-in and host (rather than types that must be adapted into views).","nodes":[{"content":"You should use this method overload only when the contents of the <ph id=\"ph1\">&lt;xref:System.AddIn.Contract.IListContract%601&gt;</ph> are serializable types that can be passed directly to the add-in and host (rather than types that must be adapted into views).","pos":[0,239],"source":"You should use this method overload only when the contents of the <xref:System.AddIn.Contract.IListContract%601> are serializable types that can be passed directly to the add-in and host (rather than types that must be adapted into views)."}]}],"pos":[3347,3865],"yaml":true,"extradata":"MT"},{"content":"The collection from the other side of the pipeline.","nodes":[{"pos":[0,51],"content":"The collection from the other side of the pipeline.","nodes":[{"content":"The collection from the other side of the pipeline.","pos":[0,51]}]}],"pos":[4999,5051],"yaml":true},{"content":"The type of objects that are contained in the list. <code>T</code> must be serializable.","nodes":[{"pos":[0,88],"content":"The type of objects that are contained in the list. <code>T</code> must be serializable.","nodes":[{"content":"The type of objects that are contained in the list.","pos":[0,51]},{"content":"<bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">T</ph><ept id=\"p1\">&lt;/code&gt;</ept> must be serializable.","pos":[52,88],"source":"<code>T</code> must be serializable."}]}],"pos":[5102,5191],"yaml":true},{"content":"The converted collection.","nodes":[{"pos":[0,25],"content":"The converted collection.","nodes":[{"content":"The converted collection.","pos":[0,25]}]}],"pos":[5269,5295],"yaml":true},{"content":"Converts a specified <xref href=\"System.AddIn.Contract.IListContract`1\"></xref> collection to an <xref href=\"System.Collections.Generic.IList`1\"></xref> collection by using converter adapters.","nodes":[{"pos":[0,192],"content":"Converts a specified <ph id=\"ph1\">&lt;xref href=\"System.AddIn.Contract.IListContract`1\"&gt;&lt;/xref&gt;</ph> collection to an <ph id=\"ph2\">&lt;xref href=\"System.Collections.Generic.IList`1\"&gt;&lt;/xref&gt;</ph> collection by using converter adapters.","source":"Converts a specified <xref href=\"System.AddIn.Contract.IListContract`1\"></xref> collection to an <xref href=\"System.Collections.Generic.IList`1\"></xref> collection by using converter adapters."}],"pos":[6901,7094],"yaml":true},{"content":"Use this method overload for <xref:System.AddIn.Contract.IListContract%601> collections that contain types that must be adapted before they can be passed to the add-in or host (rather than simple serializable types that can be passed directly). The host application or add-in can use the returned <xref:System.Collections.Generic.IList%601> collection. It will have a lifetime token for the remote <xref:System.AddIn.Contract.IListContract%601>.","nodes":[{"pos":[0,445],"content":"Use this method overload for <xref:System.AddIn.Contract.IListContract%601> collections that contain types that must be adapted before they can be passed to the add-in or host (rather than simple serializable types that can be passed directly). The host application or add-in can use the returned <xref:System.Collections.Generic.IList%601> collection. It will have a lifetime token for the remote <xref:System.AddIn.Contract.IListContract%601>.","nodes":[{"content":"Use this method overload for <xref:System.AddIn.Contract.IListContract%601> collections that contain types that must be adapted before they can be passed to the add-in or host (rather than simple serializable types that can be passed directly). The host application or add-in can use the returned <xref:System.Collections.Generic.IList%601> collection. It will have a lifetime token for the remote <xref:System.AddIn.Contract.IListContract%601>.","pos":[0,445],"nodes":[{"content":"Use this method overload for <ph id=\"ph1\">&lt;xref:System.AddIn.Contract.IListContract%601&gt;</ph> collections that contain types that must be adapted before they can be passed to the add-in or host (rather than simple serializable types that can be passed directly).","pos":[0,244],"source":"Use this method overload for <xref:System.AddIn.Contract.IListContract%601> collections that contain types that must be adapted before they can be passed to the add-in or host (rather than simple serializable types that can be passed directly)."},{"content":"The host application or add-in can use the returned <ph id=\"ph1\">&lt;xref:System.Collections.Generic.IList%601&gt;</ph> collection.","pos":[245,352],"source":" The host application or add-in can use the returned <xref:System.Collections.Generic.IList%601> collection."},{"content":"It will have a lifetime token for the remote <ph id=\"ph1\">&lt;xref:System.AddIn.Contract.IListContract%601&gt;</ph>.","pos":[353,445],"source":" It will have a lifetime token for the remote <xref:System.AddIn.Contract.IListContract%601>."}]}]}],"pos":[7105,7551],"yaml":true,"extradata":"MT"},{"content":"The collection to pass to the other side of the pipeline.","nodes":[{"pos":[0,57],"content":"The collection to pass to the other side of the pipeline.","nodes":[{"content":"The collection to pass to the other side of the pipeline.","pos":[0,57]}]}],"pos":[7925,7983],"yaml":true},{"content":"A converter that adapts the data from the type defined in the contract to the type expected in the view.","nodes":[{"pos":[0,104],"content":"A converter that adapts the data from the type defined in the contract to the type expected in the view.","nodes":[{"content":"A converter that adapts the data from the type defined in the contract to the type expected in the view.","pos":[0,104]}]}],"pos":[8078,8183],"yaml":true},{"content":"A converter that adapts the data from the type defined in the view to the type expected by the contract.","nodes":[{"pos":[0,104],"content":"A converter that adapts the data from the type defined in the view to the type expected by the contract.","nodes":[{"content":"A converter that adapts the data from the type defined in the view to the type expected by the contract.","pos":[0,104]}]}],"pos":[8278,8383],"yaml":true},{"content":"The type that defines the contract for passing objects of type <code>TView</code> across the isolation boundary.","nodes":[{"pos":[0,112],"content":"The type that defines the contract for passing objects of type <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">TView</ph><ept id=\"p1\">&lt;/code&gt;</ept> across the isolation boundary.","source":"The type that defines the contract for passing objects of type <code>TView</code> across the isolation boundary."}],"pos":[8442,8555],"yaml":true},{"content":"The type that defines the view of the objects in the list.","nodes":[{"pos":[0,58],"content":"The type that defines the view of the objects in the list.","nodes":[{"content":"The type that defines the view of the objects in the list.","pos":[0,58]}]}],"pos":[8590,8649],"yaml":true},{"content":"The converted collection.","nodes":[{"pos":[0,25],"content":"The converted collection.","nodes":[{"content":"The converted collection.","pos":[0,25]}]}],"pos":[8732,8758],"yaml":true},{"content":"Converts a specified <xref href=\"System.Collections.Generic.IList`1\"></xref> collection to an <xref href=\"System.AddIn.Contract.IListContract`1\"></xref> collection.","nodes":[{"pos":[0,164],"content":"Converts a specified <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.IList`1\"&gt;&lt;/xref&gt;</ph> collection to an <ph id=\"ph2\">&lt;xref href=\"System.AddIn.Contract.IListContract`1\"&gt;&lt;/xref&gt;</ph> collection.","source":"Converts a specified <xref href=\"System.Collections.Generic.IList`1\"></xref> collection to an <xref href=\"System.AddIn.Contract.IListContract`1\"></xref> collection."}],"pos":[9989,10154],"yaml":true},{"content":"The <xref:System.AddIn.Contract.IListContract%601> collection can be marshaled across the isolation boundary between the add-in and its host application.  \n  \n You should use this method overload only when the contents of the <xref:System.Collections.Generic.IList%601> collection are serializable types that can be passed directly to the contract (rather than types that must be adapted into contracts).","nodes":[{"pos":[0,153],"content":"The <xref:System.AddIn.Contract.IListContract%601> collection can be marshaled across the isolation boundary between the add-in and its host application.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.AddIn.Contract.IListContract%601&gt;</ph> collection can be marshaled across the isolation boundary between the add-in and its host application.","pos":[0,153],"source":"The <xref:System.AddIn.Contract.IListContract%601> collection can be marshaled across the isolation boundary between the add-in and its host application."}]},{"pos":[160,404],"content":"You should use this method overload only when the contents of the <xref:System.Collections.Generic.IList%601> collection are serializable types that can be passed directly to the contract (rather than types that must be adapted into contracts).","nodes":[{"content":"You should use this method overload only when the contents of the <ph id=\"ph1\">&lt;xref:System.Collections.Generic.IList%601&gt;</ph> collection are serializable types that can be passed directly to the contract (rather than types that must be adapted into contracts).","pos":[0,244],"source":"You should use this method overload only when the contents of the <xref:System.Collections.Generic.IList%601> collection are serializable types that can be passed directly to the contract (rather than types that must be adapted into contracts)."}]}],"pos":[10165,10574],"yaml":true,"extradata":"MT"},{"content":"The collection to convert.","nodes":[{"pos":[0,26],"content":"The collection to convert.","nodes":[{"content":"The collection to convert.","pos":[0,26]}]}],"pos":[11616,11643],"yaml":true},{"content":"The type of objects that are contained in the list. <code>T</code> must be serializable.","nodes":[{"pos":[0,88],"content":"The type of objects that are contained in the list. <code>T</code> must be serializable.","nodes":[{"content":"The type of objects that are contained in the list.","pos":[0,51]},{"content":"<bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">T</ph><ept id=\"p1\">&lt;/code&gt;</ept> must be serializable.","pos":[52,88],"source":"<code>T</code> must be serializable."}]}],"pos":[11694,11783],"yaml":true},{"content":"The converted collection.","nodes":[{"pos":[0,25],"content":"The converted collection.","nodes":[{"content":"The converted collection.","pos":[0,25]}]}],"pos":[11864,11890],"yaml":true},{"content":"Converts a specified <xref href=\"System.Collections.Generic.IList`1\"></xref> collection to an <xref href=\"System.AddIn.Contract.IListContract`1\"></xref> collection by using converter adapters.","nodes":[{"pos":[0,192],"content":"Converts a specified <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.IList`1\"&gt;&lt;/xref&gt;</ph> collection to an <ph id=\"ph2\">&lt;xref href=\"System.AddIn.Contract.IListContract`1\"&gt;&lt;/xref&gt;</ph> collection by using converter adapters.","source":"Converts a specified <xref href=\"System.Collections.Generic.IList`1\"></xref> collection to an <xref href=\"System.AddIn.Contract.IListContract`1\"></xref> collection by using converter adapters."}],"pos":[13507,13700],"yaml":true},{"content":"Use this method overload for <xref:System.Collections.Generic.IList%601> collections that contain types that must be adapted into contracts before they can be passed to the contract (rather than simple serializable types that can be passed directly). The <xref:System.AddIn.Contract.IListContract%601> collection can be marshaled across the isolation boundary between an add-in and its host application.","nodes":[{"pos":[0,403],"content":"Use this method overload for <xref:System.Collections.Generic.IList%601> collections that contain types that must be adapted into contracts before they can be passed to the contract (rather than simple serializable types that can be passed directly). The <xref:System.AddIn.Contract.IListContract%601> collection can be marshaled across the isolation boundary between an add-in and its host application.","nodes":[{"content":"Use this method overload for <xref:System.Collections.Generic.IList%601> collections that contain types that must be adapted into contracts before they can be passed to the contract (rather than simple serializable types that can be passed directly). The <xref:System.AddIn.Contract.IListContract%601> collection can be marshaled across the isolation boundary between an add-in and its host application.","pos":[0,403],"nodes":[{"content":"Use this method overload for <ph id=\"ph1\">&lt;xref:System.Collections.Generic.IList%601&gt;</ph> collections that contain types that must be adapted into contracts before they can be passed to the contract (rather than simple serializable types that can be passed directly).","pos":[0,250],"source":"Use this method overload for <xref:System.Collections.Generic.IList%601> collections that contain types that must be adapted into contracts before they can be passed to the contract (rather than simple serializable types that can be passed directly)."},{"content":"The <ph id=\"ph1\">&lt;xref:System.AddIn.Contract.IListContract%601&gt;</ph> collection can be marshaled across the isolation boundary between an add-in and its host application.","pos":[251,403],"source":" The <xref:System.AddIn.Contract.IListContract%601> collection can be marshaled across the isolation boundary between an add-in and its host application."}]}]}],"pos":[13711,14115],"yaml":true,"extradata":"MT"},{"content":"The collection to convert.","nodes":[{"pos":[0,26],"content":"The collection to convert.","nodes":[{"content":"The collection to convert.","pos":[0,26]}]}],"pos":[14490,14517],"yaml":true},{"content":"A converter that adapts the data from the type defined in the view to the type expected by the contract.","nodes":[{"pos":[0,104],"content":"A converter that adapts the data from the type defined in the view to the type expected by the contract.","nodes":[{"content":"A converter that adapts the data from the type defined in the view to the type expected by the contract.","pos":[0,104]}]}],"pos":[14612,14717],"yaml":true},{"content":"A converter that adapts the data from the type defined in the contract to the type expected in the view.","nodes":[{"pos":[0,104],"content":"A converter that adapts the data from the type defined in the contract to the type expected in the view.","nodes":[{"content":"A converter that adapts the data from the type defined in the contract to the type expected in the view.","pos":[0,104]}]}],"pos":[14812,14917],"yaml":true},{"content":"The type that defines the view of the objects in the list.","nodes":[{"pos":[0,58],"content":"The type that defines the view of the objects in the list.","nodes":[{"content":"The type that defines the view of the objects in the list.","pos":[0,58]}]}],"pos":[14972,15031],"yaml":true},{"content":"The type that defines the contract for passing objects of type <code>TView</code> across the isolation boundary.","nodes":[{"pos":[0,112],"content":"The type that defines the contract for passing objects of type <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">TView</ph><ept id=\"p1\">&lt;/code&gt;</ept> across the isolation boundary.","source":"The type that defines the contract for passing objects of type <code>TView</code> across the isolation boundary."}],"pos":[15070,15183],"yaml":true},{"content":"The converted collection.","nodes":[{"pos":[0,25],"content":"The converted collection.","nodes":[{"content":"The converted collection.","pos":[0,25]}]}],"pos":[15273,15299],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.AddIn.Pipeline.CollectionAdapters\n  commentId: T:System.AddIn.Pipeline.CollectionAdapters\n  id: CollectionAdapters\n  children:\n  - System.AddIn.Pipeline.CollectionAdapters.ToIList``1(System.AddIn.Contract.IListContract{``0})\n  - System.AddIn.Pipeline.CollectionAdapters.ToIList``2(System.AddIn.Contract.IListContract{``0},System.Converter{``0,``1},System.Converter{``1,``0})\n  - System.AddIn.Pipeline.CollectionAdapters.ToIListContract``1(System.Collections.Generic.IList{``0})\n  - System.AddIn.Pipeline.CollectionAdapters.ToIListContract``2(System.Collections.Generic.IList{``0},System.Converter{``0,``1},System.Converter{``1,``0})\n  langs:\n  - csharp\n  name: CollectionAdapters\n  nameWithType: CollectionAdapters\n  fullName: System.AddIn.Pipeline.CollectionAdapters\n  type: Class\n  assemblies:\n  - System.AddIn\n  namespace: System.AddIn.Pipeline\n  summary: Enables collections to be passed between an add-in and its host application.\n  remarks: \"This class provides methods that enable an <xref:System.Collections.Generic.IList%601> collection to be converted to a <xref:System.AddIn.Contract.IListContract%601> collection. The <xref:System.AddIn.Contract.IListContract%601> collection is passed across the isolation boundary and converted back to an <xref:System.Collections.Generic.IList%601> collection that the add-in or the host application can use.  \\n  \\n Objects in collections must be remotable. For more information about the object types that you can pass, see [Contracts, Views, and Adapters](http://msdn.microsoft.com/en-us/a6460173-9507-4b87-8c07-d4ee245d715c).\"\n  syntax:\n    content: public static class CollectionAdapters\n  inheritance:\n  - System.Object\n  implements: []\n  inheritedMembers:\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.ToString\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.AddIn.Pipeline/CollectionAdapters.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.AddIn.Pipeline.CollectionAdapters.ToIList``1(System.AddIn.Contract.IListContract{``0})\n  commentId: M:System.AddIn.Pipeline.CollectionAdapters.ToIList``1(System.AddIn.Contract.IListContract{``0})\n  id: ToIList``1(System.AddIn.Contract.IListContract{``0})\n  parent: System.AddIn.Pipeline.CollectionAdapters\n  langs:\n  - csharp\n  name: ToIList<T>(IListContract<T>)\n  nameWithType: CollectionAdapters.ToIList<T>(IListContract<T>)\n  fullName: CollectionAdapters.ToIList<T>(IListContract<T>)\n  type: Method\n  assemblies:\n  - System.AddIn\n  namespace: System.AddIn.Pipeline\n  summary: Converts the specified <xref href=\"System.AddIn.Contract.IListContract`1\"></xref> collection to an <xref href=\"System.Collections.Generic.IList`1\"></xref> collection.\n  remarks: \"The host application or add-in can use the returned <xref:System.Collections.Generic.IList%601> collection. The <xref:System.Collections.Generic.IList%601> collection will have a lifetime token for the remote <xref:System.AddIn.Contract.IListContract%601> collection.  \\n  \\n You should use this method overload only when the contents of the <xref:System.AddIn.Contract.IListContract%601> are serializable types that can be passed directly to the add-in and host (rather than types that must be adapted into views).\"\n  example:\n  - \"The following example implements a host-side adapter pipeline segment as described [Walkthrough: Passing Collections Between Hosts and Add-Ins](http://msdn.microsoft.com/en-us/b532c604-548e-4fab-b11c-377257dd0ee5). The example adapts the custom `ProcessBooks` method by taking the <xref:System.AddIn.Contract.IListContract%601> collection passed from the add-in and converting it to an <xref:System.Collections.Generic.IList%601> collection, which the host application can then use.  \\n  \\n [!code-csharp[AddInCollectionPipelineAddInSideAdapter#3](~/samples/snippets/csharp/VS_Snippets_CLR/AddInCollectionPipelineAddInSideAdapter/cs/LibraryManagerViewToContractAddInAdapter.cs#3)]\\n [!code-vb[AddInCollectionPipelineAddInSideAdapter#3](~/samples/snippets/visualbasic/VS_Snippets_CLR/AddInCollectionPipelineAddInSideAdapter/vb/LibraryManagerViewToContractAddInAdapter.vb#3)]\"\n  syntax:\n    content: public static System.Collections.Generic.IList<T> ToIList<T> (System.AddIn.Contract.IListContract<T> collection);\n    parameters:\n    - id: collection\n      type: System.AddIn.Contract.IListContract`1\n      description: The collection from the other side of the pipeline.\n    typeParameters:\n    - id: T\n      description: The type of objects that are contained in the list. <code>T</code> must be serializable.\n    return:\n      type: System.Collections.Generic.IList`1\n      description: The converted collection.\n  overload: System.AddIn.Pipeline.CollectionAdapters.ToIList``1*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.AddIn.Pipeline/CollectionAdapters.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.AddIn.Pipeline.CollectionAdapters.ToIList``2(System.AddIn.Contract.IListContract{``0},System.Converter{``0,``1},System.Converter{``1,``0})\n  commentId: M:System.AddIn.Pipeline.CollectionAdapters.ToIList``2(System.AddIn.Contract.IListContract{``0},System.Converter{``0,``1},System.Converter{``1,``0})\n  id: ToIList``2(System.AddIn.Contract.IListContract{``0},System.Converter{``0,``1},System.Converter{``1,``0})\n  parent: System.AddIn.Pipeline.CollectionAdapters\n  langs:\n  - csharp\n  name: ToIList<TContract,TView>(IListContract<TContract>, Converter<TContract,TView>, Converter<TView,TContract>)\n  nameWithType: CollectionAdapters.ToIList<TContract,TView>(IListContract<TContract>, Converter<TContract,TView>, Converter<TView,TContract>)\n  fullName: CollectionAdapters.ToIList<TContract,TView>(IListContract<TContract>, Converter<TContract,TView>, Converter<TView,TContract>)\n  type: Method\n  assemblies:\n  - System.AddIn\n  namespace: System.AddIn.Pipeline\n  summary: Converts a specified <xref href=\"System.AddIn.Contract.IListContract`1\"></xref> collection to an <xref href=\"System.Collections.Generic.IList`1\"></xref> collection by using converter adapters.\n  remarks: Use this method overload for <xref:System.AddIn.Contract.IListContract%601> collections that contain types that must be adapted before they can be passed to the add-in or host (rather than simple serializable types that can be passed directly). The host application or add-in can use the returned <xref:System.Collections.Generic.IList%601> collection. It will have a lifetime token for the remote <xref:System.AddIn.Contract.IListContract%601>.\n  syntax:\n    content: public static System.Collections.Generic.IList<TView> ToIList<TContract,TView> (System.AddIn.Contract.IListContract<TContract> collection, Converter<TContract,TView> contractViewAdapter, Converter<TView,TContract> viewContractAdapter);\n    parameters:\n    - id: collection\n      type: System.AddIn.Contract.IListContract{TContract}\n      description: The collection to pass to the other side of the pipeline.\n    - id: contractViewAdapter\n      type: System.Converter{TContract,TView}\n      description: A converter that adapts the data from the type defined in the contract to the type expected in the view.\n    - id: viewContractAdapter\n      type: System.Converter{TView,TContract}\n      description: A converter that adapts the data from the type defined in the view to the type expected by the contract.\n    typeParameters:\n    - id: TContract\n      description: The type that defines the contract for passing objects of type <code>TView</code> across the isolation boundary.\n    - id: TView\n      description: The type that defines the view of the objects in the list.\n    return:\n      type: System.Collections.Generic.IList{TView}\n      description: The converted collection.\n  overload: System.AddIn.Pipeline.CollectionAdapters.ToIList``2*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.AddIn.Pipeline/CollectionAdapters.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.AddIn.Pipeline.CollectionAdapters.ToIListContract``1(System.Collections.Generic.IList{``0})\n  commentId: M:System.AddIn.Pipeline.CollectionAdapters.ToIListContract``1(System.Collections.Generic.IList{``0})\n  id: ToIListContract``1(System.Collections.Generic.IList{``0})\n  parent: System.AddIn.Pipeline.CollectionAdapters\n  langs:\n  - csharp\n  name: ToIListContract<T>(IList<T>)\n  nameWithType: CollectionAdapters.ToIListContract<T>(IList<T>)\n  fullName: CollectionAdapters.ToIListContract<T>(IList<T>)\n  type: Method\n  assemblies:\n  - System.AddIn\n  namespace: System.AddIn.Pipeline\n  summary: Converts a specified <xref href=\"System.Collections.Generic.IList`1\"></xref> collection to an <xref href=\"System.AddIn.Contract.IListContract`1\"></xref> collection.\n  remarks: \"The <xref:System.AddIn.Contract.IListContract%601> collection can be marshaled across the isolation boundary between the add-in and its host application.  \\n  \\n You should use this method overload only when the contents of the <xref:System.Collections.Generic.IList%601> collection are serializable types that can be passed directly to the contract (rather than types that must be adapted into contracts).\"\n  example:\n  - \"The following example implements the class that defines an add-in side adapter pipeline segment. It adapts the custom `ProcessBooks` method by taking the <xref:System.Collections.Generic.IList%601> collection passed from the add-in view segment and converting it to an <xref:System.AddIn.Contract.IListContract%601> collection that can be marshaled across the isolation boundary to the host.  \\n  \\n [!code-csharp[AddInCollectionPipelineHostSideAdapter#4](~/samples/snippets/csharp/VS_Snippets_CLR/AddInCollectionPipelineHostSideAdapter/cs/LibraryManagerContractToViewHostAdapter.cs#4)]\\n [!code-vb[AddInCollectionPipelineHostSideAdapter#4](~/samples/snippets/visualbasic/VS_Snippets_CLR/AddInCollectionPipelineHostSideAdapter/vb/LibraryManagerContractToViewHostAdapter.vb#4)]\"\n  syntax:\n    content: public static System.AddIn.Contract.IListContract<T> ToIListContract<T> (System.Collections.Generic.IList<T> collection);\n    parameters:\n    - id: collection\n      type: System.Collections.Generic.IList`1\n      description: The collection to convert.\n    typeParameters:\n    - id: T\n      description: The type of objects that are contained in the list. <code>T</code> must be serializable.\n    return:\n      type: System.AddIn.Contract.IListContract`1\n      description: The converted collection.\n  overload: System.AddIn.Pipeline.CollectionAdapters.ToIListContract``1*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.AddIn.Pipeline/CollectionAdapters.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.AddIn.Pipeline.CollectionAdapters.ToIListContract``2(System.Collections.Generic.IList{``0},System.Converter{``0,``1},System.Converter{``1,``0})\n  commentId: M:System.AddIn.Pipeline.CollectionAdapters.ToIListContract``2(System.Collections.Generic.IList{``0},System.Converter{``0,``1},System.Converter{``1,``0})\n  id: ToIListContract``2(System.Collections.Generic.IList{``0},System.Converter{``0,``1},System.Converter{``1,``0})\n  parent: System.AddIn.Pipeline.CollectionAdapters\n  langs:\n  - csharp\n  name: ToIListContract<TView,TContract>(IList<TView>, Converter<TView,TContract>, Converter<TContract,TView>)\n  nameWithType: CollectionAdapters.ToIListContract<TView,TContract>(IList<TView>, Converter<TView,TContract>, Converter<TContract,TView>)\n  fullName: CollectionAdapters.ToIListContract<TView,TContract>(IList<TView>, Converter<TView,TContract>, Converter<TContract,TView>)\n  type: Method\n  assemblies:\n  - System.AddIn\n  namespace: System.AddIn.Pipeline\n  summary: Converts a specified <xref href=\"System.Collections.Generic.IList`1\"></xref> collection to an <xref href=\"System.AddIn.Contract.IListContract`1\"></xref> collection by using converter adapters.\n  remarks: Use this method overload for <xref:System.Collections.Generic.IList%601> collections that contain types that must be adapted into contracts before they can be passed to the contract (rather than simple serializable types that can be passed directly). The <xref:System.AddIn.Contract.IListContract%601> collection can be marshaled across the isolation boundary between an add-in and its host application.\n  syntax:\n    content: public static System.AddIn.Contract.IListContract<TContract> ToIListContract<TView,TContract> (System.Collections.Generic.IList<TView> collection, Converter<TView,TContract> viewContractAdapter, Converter<TContract,TView> contractViewAdapter);\n    parameters:\n    - id: collection\n      type: System.Collections.Generic.IList{TView}\n      description: The collection to convert.\n    - id: viewContractAdapter\n      type: System.Converter{TView,TContract}\n      description: A converter that adapts the data from the type defined in the view to the type expected by the contract.\n    - id: contractViewAdapter\n      type: System.Converter{TContract,TView}\n      description: A converter that adapts the data from the type defined in the contract to the type expected in the view.\n    typeParameters:\n    - id: TView\n      description: The type that defines the view of the objects in the list.\n    - id: TContract\n      description: The type that defines the contract for passing objects of type <code>TView</code> across the isolation boundary.\n    return:\n      type: System.AddIn.Contract.IListContract{TContract}\n      description: The converted collection.\n  overload: System.AddIn.Pipeline.CollectionAdapters.ToIListContract``2*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.AddIn.Pipeline/CollectionAdapters.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\nreferences:\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.AddIn.Pipeline.CollectionAdapters.ToIList``1(System.AddIn.Contract.IListContract{``0})\n  parent: System.AddIn.Pipeline.CollectionAdapters\n  isExternal: false\n  name: ToIList<T>(IListContract<T>)\n  nameWithType: CollectionAdapters.ToIList<T>(IListContract<T>)\n  fullName: CollectionAdapters.ToIList<T>(IListContract<T>)\n- uid: System.Collections.Generic.IList`1\n  parent: System.Collections.Generic\n  isExternal: false\n  name: IList<T>\n  nameWithType: IList<T>\n  fullName: System.Collections.Generic.IList<T>\n- uid: System.AddIn.Contract.IListContract`1\n  parent: System.AddIn.Contract\n  isExternal: false\n  name: IListContract<T>\n  nameWithType: IListContract<T>\n  fullName: System.AddIn.Contract.IListContract<T>\n- uid: System.AddIn.Pipeline.CollectionAdapters.ToIList``2(System.AddIn.Contract.IListContract{``0},System.Converter{``0,``1},System.Converter{``1,``0})\n  parent: System.AddIn.Pipeline.CollectionAdapters\n  isExternal: false\n  name: ToIList<TContract,TView>(IListContract<TContract>, Converter<TContract,TView>, Converter<TView,TContract>)\n  nameWithType: CollectionAdapters.ToIList<TContract,TView>(IListContract<TContract>, Converter<TContract,TView>, Converter<TView,TContract>)\n  fullName: CollectionAdapters.ToIList<TContract,TView>(IListContract<TContract>, Converter<TContract,TView>, Converter<TView,TContract>)\n- uid: TView\n  name: TView\n  nameWithType: TView\n  fullName: TView\n- uid: System.Collections.Generic.IList{TView}\n  parent: System.Collections.Generic\n  isExternal: false\n  name: IList<TView>\n  nameWithType: IList<TView>\n  fullName: System.Collections.Generic.IList<TView>\n  spec.csharp:\n  - uid: System.Collections.Generic.IList`1\n    name: IList\n    nameWithType: IList\n    fullName: System.Collections.Generic.IList\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: TView\n    name: TView\n    nameWithType: TView\n    fullName: TView\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: TContract\n  name: TContract\n  nameWithType: TContract\n  fullName: TContract\n- uid: System.AddIn.Contract.IListContract{TContract}\n  parent: System.AddIn.Contract\n  isExternal: false\n  name: IListContract<TContract>\n  nameWithType: IListContract<TContract>\n  fullName: System.AddIn.Contract.IListContract<TContract>\n  spec.csharp:\n  - uid: System.AddIn.Contract.IListContract`1\n    name: IListContract\n    nameWithType: IListContract\n    fullName: System.AddIn.Contract.IListContract\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: TContract\n    name: TContract\n    nameWithType: TContract\n    fullName: TContract\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Converter`2\n  name: Converter<TInput,TOutput>\n  nameWithType: Converter<TInput,TOutput>\n  fullName: System.Converter<TInput,TOutput>\n- uid: System.Converter{TContract,TView}\n  parent: System\n  isExternal: false\n  name: Converter<TContract,TView>\n  nameWithType: Converter<TContract,TView>\n  fullName: System.Converter<TContract,TView>\n  spec.csharp:\n  - uid: System.Converter`2\n    name: Converter\n    nameWithType: Converter\n    fullName: System.Converter\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: TContract\n    name: TContract\n    nameWithType: TContract\n    fullName: TContract\n  - name: ','\n    nameWithType: ','\n    fullName: ','\n  - uid: TView\n    name: TView\n    nameWithType: TView\n    fullName: TView\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Converter{TView,TContract}\n  parent: System\n  isExternal: false\n  name: Converter<TView,TContract>\n  nameWithType: Converter<TView,TContract>\n  fullName: System.Converter<TView,TContract>\n  spec.csharp:\n  - uid: System.Converter`2\n    name: Converter\n    nameWithType: Converter\n    fullName: System.Converter\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: TView\n    name: TView\n    nameWithType: TView\n    fullName: TView\n  - name: ','\n    nameWithType: ','\n    fullName: ','\n  - uid: TContract\n    name: TContract\n    nameWithType: TContract\n    fullName: TContract\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.AddIn.Pipeline.CollectionAdapters.ToIListContract``1(System.Collections.Generic.IList{``0})\n  parent: System.AddIn.Pipeline.CollectionAdapters\n  isExternal: false\n  name: ToIListContract<T>(IList<T>)\n  nameWithType: CollectionAdapters.ToIListContract<T>(IList<T>)\n  fullName: CollectionAdapters.ToIListContract<T>(IList<T>)\n- uid: System.AddIn.Pipeline.CollectionAdapters.ToIListContract``2(System.Collections.Generic.IList{``0},System.Converter{``0,``1},System.Converter{``1,``0})\n  parent: System.AddIn.Pipeline.CollectionAdapters\n  isExternal: false\n  name: ToIListContract<TView,TContract>(IList<TView>, Converter<TView,TContract>, Converter<TContract,TView>)\n  nameWithType: CollectionAdapters.ToIListContract<TView,TContract>(IList<TView>, Converter<TView,TContract>, Converter<TContract,TView>)\n  fullName: CollectionAdapters.ToIListContract<TView,TContract>(IList<TView>, Converter<TView,TContract>, Converter<TContract,TView>)\n- uid: System.AddIn.Pipeline.CollectionAdapters.ToIList``1*\n  parent: System.AddIn.Pipeline.CollectionAdapters\n  isExternal: false\n  name: ToIList<T>\n  nameWithType: CollectionAdapters.ToIList<T>\n  fullName: CollectionAdapters.ToIList<T>\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.AddIn.Pipeline/CollectionAdapters.xml\n- uid: System.AddIn.Pipeline.CollectionAdapters.ToIList``2*\n  parent: System.AddIn.Pipeline.CollectionAdapters\n  isExternal: false\n  name: ToIList<TContract,TView>\n  nameWithType: CollectionAdapters.ToIList<TContract,TView>\n  fullName: CollectionAdapters.ToIList<TContract,TView>\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.AddIn.Pipeline/CollectionAdapters.xml\n- uid: System.AddIn.Pipeline.CollectionAdapters.ToIListContract``1*\n  parent: System.AddIn.Pipeline.CollectionAdapters\n  isExternal: false\n  name: ToIListContract<T>\n  nameWithType: CollectionAdapters.ToIListContract<T>\n  fullName: CollectionAdapters.ToIListContract<T>\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.AddIn.Pipeline/CollectionAdapters.xml\n- uid: System.AddIn.Pipeline.CollectionAdapters.ToIListContract``2*\n  parent: System.AddIn.Pipeline.CollectionAdapters\n  isExternal: false\n  name: ToIListContract<TView,TContract>\n  nameWithType: CollectionAdapters.ToIListContract<TView,TContract>\n  fullName: CollectionAdapters.ToIListContract<TView,TContract>\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.AddIn.Pipeline/CollectionAdapters.xml\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: Object.Equals(Object)\n  fullName: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: Object.GetHashCode()\n  fullName: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: false\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: false\n  name: ToString()\n  nameWithType: Object.ToString()\n  fullName: Object.ToString()\n"}