{"nodes":[{"content":"Defines the basic operations of cryptographic transformations.","nodes":[{"pos":[0,62],"content":"Defines the basic operations of cryptographic transformations.","nodes":[{"content":"Defines the basic operations of cryptographic transformations.","pos":[0,62]}]}],"pos":[999,1062],"yaml":true},{"content":"Hash algorithms are an example of cryptographic transformations (<xref:System.Security.Cryptography.HashAlgorithm>).","nodes":[{"pos":[0,116],"content":"Hash algorithms are an example of cryptographic transformations (<xref:System.Security.Cryptography.HashAlgorithm>).","nodes":[{"content":"Hash algorithms are an example of cryptographic transformations (<ph id=\"ph1\">&lt;xref:System.Security.Cryptography.HashAlgorithm&gt;</ph>).","pos":[0,116],"source":"Hash algorithms are an example of cryptographic transformations (<xref:System.Security.Cryptography.HashAlgorithm>)."}]}],"pos":[1073,1190],"yaml":true,"extradata":"MT"},{"content":"Gets a value indicating whether the current transform can be reused.","nodes":[{"pos":[0,68],"content":"Gets a value indicating whether the current transform can be reused.","nodes":[{"content":"Gets a value indicating whether the current transform can be reused.","pos":[0,68]}]}],"pos":[3172,3241],"yaml":true},{"content":"`true` if the current transform can be reused; otherwise, `false`.","nodes":[{"pos":[0,66],"content":"<ph id=\"ph1\">`true`</ph> if the current transform can be reused; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` if the current transform can be reused; otherwise, `false`."}],"pos":[3361,3430],"yaml":true},{"content":"Gets a value indicating whether multiple blocks can be transformed.","nodes":[{"pos":[0,67],"content":"Gets a value indicating whether multiple blocks can be transformed.","nodes":[{"content":"Gets a value indicating whether multiple blocks can be transformed.","pos":[0,67]}]}],"pos":[5032,5100],"yaml":true},{"content":"`true` if multiple blocks can be transformed; otherwise, `false`.","nodes":[{"pos":[0,65],"content":"<ph id=\"ph1\">`true`</ph> if multiple blocks can be transformed; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` if multiple blocks can be transformed; otherwise, `false`."}],"pos":[5229,5297],"yaml":true},{"content":"Gets the input block size.","nodes":[{"pos":[0,26],"content":"Gets the input block size.","nodes":[{"content":"Gets the input block size.","pos":[0,26]}]}],"pos":[6836,6863],"yaml":true},{"content":"The size of the input data blocks in bytes.","nodes":[{"pos":[0,43],"content":"The size of the input data blocks in bytes.","nodes":[{"content":"The size of the input data blocks in bytes.","pos":[0,43]}]}],"pos":[6977,7021],"yaml":true},{"content":"Gets the output block size.","nodes":[{"pos":[0,27],"content":"Gets the output block size.","nodes":[{"content":"Gets the output block size.","pos":[0,27]}]}],"pos":[8554,8582],"yaml":true},{"content":"The size of the output data blocks in bytes.","nodes":[{"pos":[0,44],"content":"The size of the output data blocks in bytes.","nodes":[{"content":"The size of the output data blocks in bytes.","pos":[0,44]}]}],"pos":[8697,8742],"yaml":true},{"content":"Transforms the specified region of the input byte array and copies the resulting transform to the specified region of the output byte array.","nodes":[{"pos":[0,140],"content":"Transforms the specified region of the input byte array and copies the resulting transform to the specified region of the output byte array.","nodes":[{"content":"Transforms the specified region of the input byte array and copies the resulting transform to the specified region of the output byte array.","pos":[0,140]}]}],"pos":[10583,10724],"yaml":true},{"content":"The return value of <xref:System.Security.Cryptography.ICryptoTransform.TransformBlock%2A> is the number of bytes returned to `outputBuffer` and is always less than or equal to <xref:System.Security.Cryptography.ICryptoTransform.OutputBlockSize>. If <xref:System.Security.Cryptography.ICryptoTransform.CanTransformMultipleBlocks> is `true`, then `inputCount` must be any positive multiple of <xref:System.Security.Cryptography.ICryptoTransform.InputBlockSize>.","nodes":[{"pos":[0,460],"content":"The return value of <xref:System.Security.Cryptography.ICryptoTransform.TransformBlock%2A> is the number of bytes returned to `outputBuffer` and is always less than or equal to <xref:System.Security.Cryptography.ICryptoTransform.OutputBlockSize>. If <xref:System.Security.Cryptography.ICryptoTransform.CanTransformMultipleBlocks> is `true`, then `inputCount` must be any positive multiple of <xref:System.Security.Cryptography.ICryptoTransform.InputBlockSize>.","nodes":[{"content":"The return value of <ph id=\"ph1\">&lt;xref:System.Security.Cryptography.ICryptoTransform.TransformBlock%2A&gt;</ph> is the number of bytes returned to <ph id=\"ph2\">`outputBuffer`</ph> and is always less than or equal to <ph id=\"ph3\">&lt;xref:System.Security.Cryptography.ICryptoTransform.OutputBlockSize&gt;</ph>.","pos":[0,246],"source":"The return value of <xref:System.Security.Cryptography.ICryptoTransform.TransformBlock%2A> is the number of bytes returned to `outputBuffer` and is always less than or equal to <xref:System.Security.Cryptography.ICryptoTransform.OutputBlockSize>."},{"content":"If <ph id=\"ph1\">&lt;xref:System.Security.Cryptography.ICryptoTransform.CanTransformMultipleBlocks&gt;</ph> is <ph id=\"ph2\">`true`</ph>, then <ph id=\"ph3\">`inputCount`</ph> must be any positive multiple of <ph id=\"ph4\">&lt;xref:System.Security.Cryptography.ICryptoTransform.InputBlockSize&gt;</ph>.","pos":[247,460],"source":" If <xref:System.Security.Cryptography.ICryptoTransform.CanTransformMultipleBlocks> is `true`, then `inputCount` must be any positive multiple of <xref:System.Security.Cryptography.ICryptoTransform.InputBlockSize>."}]}],"pos":[10735,11196],"yaml":true,"extradata":"MT"},{"content":"The input for which to compute the transform.","nodes":[{"pos":[0,45],"content":"The input for which to compute the transform.","nodes":[{"content":"The input for which to compute the transform.","pos":[0,45]}]}],"pos":[11422,11468],"yaml":true},{"content":"The offset into the input byte array from which to begin using data.","nodes":[{"pos":[0,68],"content":"The offset into the input byte array from which to begin using data.","nodes":[{"content":"The offset into the input byte array from which to begin using data.","pos":[0,68]}]}],"pos":[11534,11603],"yaml":true},{"content":"The number of bytes in the input byte array to use as data.","nodes":[{"pos":[0,59],"content":"The number of bytes in the input byte array to use as data.","nodes":[{"content":"The number of bytes in the input byte array to use as data.","pos":[0,59]}]}],"pos":[11668,11728],"yaml":true},{"content":"The output to which to write the transform.","nodes":[{"pos":[0,43],"content":"The output to which to write the transform.","nodes":[{"content":"The output to which to write the transform.","pos":[0,43]}]}],"pos":[11796,11840],"yaml":true},{"content":"The offset into the output byte array from which to begin writing data.","nodes":[{"pos":[0,71],"content":"The offset into the output byte array from which to begin writing data.","nodes":[{"content":"The offset into the output byte array from which to begin writing data.","pos":[0,71]}]}],"pos":[11907,11979],"yaml":true},{"content":"The number of bytes written.","nodes":[{"pos":[0,28],"content":"The number of bytes written.","nodes":[{"content":"The number of bytes written.","pos":[0,28]}]}],"pos":[12035,12064],"yaml":true},{"content":"Transforms the specified region of the specified byte array.","nodes":[{"pos":[0,60],"content":"Transforms the specified region of the specified byte array.","nodes":[{"content":"Transforms the specified region of the specified byte array.","pos":[0,60]}]}],"pos":[13808,13869],"yaml":true},{"content":"<xref:System.Security.Cryptography.ICryptoTransform.TransformFinalBlock%2A> is a special function for transforming the last block or a partial block in the stream. It returns a new array that contains the remaining transformed bytes. A new array is returned, because the amount of information returned at the end might be larger than a single block when padding is added.","nodes":[{"pos":[0,371],"content":"<xref:System.Security.Cryptography.ICryptoTransform.TransformFinalBlock%2A> is a special function for transforming the last block or a partial block in the stream. It returns a new array that contains the remaining transformed bytes. A new array is returned, because the amount of information returned at the end might be larger than a single block when padding is added.","nodes":[{"content":"<xref:System.Security.Cryptography.ICryptoTransform.TransformFinalBlock%2A> is a special function for transforming the last block or a partial block in the stream. It returns a new array that contains the remaining transformed bytes. A new array is returned, because the amount of information returned at the end might be larger than a single block when padding is added.","pos":[0,371],"nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Security.Cryptography.ICryptoTransform.TransformFinalBlock%2A&gt;</ph> is a special function for transforming the last block or a partial block in the stream.","pos":[0,163],"source":"<xref:System.Security.Cryptography.ICryptoTransform.TransformFinalBlock%2A> is a special function for transforming the last block or a partial block in the stream."},{"content":"It returns a new array that contains the remaining transformed bytes.","pos":[164,233]},{"content":"A new array is returned, because the amount of information returned at the end might be larger than a single block when padding is added.","pos":[234,371]}]}]}],"pos":[13880,14252],"yaml":true,"extradata":"MT"},{"content":"The input for which to compute the transform.","nodes":[{"pos":[0,45],"content":"The input for which to compute the transform.","nodes":[{"content":"The input for which to compute the transform.","pos":[0,45]}]}],"pos":[14447,14493],"yaml":true},{"content":"The offset into the byte array from which to begin using data.","nodes":[{"pos":[0,62],"content":"The offset into the byte array from which to begin using data.","nodes":[{"content":"The offset into the byte array from which to begin using data.","pos":[0,62]}]}],"pos":[14559,14622],"yaml":true},{"content":"The number of bytes in the byte array to use as data.","nodes":[{"pos":[0,53],"content":"The number of bytes in the byte array to use as data.","nodes":[{"content":"The number of bytes in the byte array to use as data.","pos":[0,53]}]}],"pos":[14687,14741],"yaml":true},{"content":"The computed transform.","nodes":[{"pos":[0,23],"content":"The computed transform.","nodes":[{"content":"The computed transform.","pos":[0,23]}]}],"pos":[14798,14822],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Security.Cryptography.ICryptoTransform\n  commentId: T:System.Security.Cryptography.ICryptoTransform\n  id: ICryptoTransform\n  children:\n  - System.Security.Cryptography.ICryptoTransform.CanReuseTransform\n  - System.Security.Cryptography.ICryptoTransform.CanTransformMultipleBlocks\n  - System.Security.Cryptography.ICryptoTransform.InputBlockSize\n  - System.Security.Cryptography.ICryptoTransform.OutputBlockSize\n  - System.Security.Cryptography.ICryptoTransform.TransformBlock(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)\n  - System.Security.Cryptography.ICryptoTransform.TransformFinalBlock(System.Byte[],System.Int32,System.Int32)\n  langs:\n  - csharp\n  name: ICryptoTransform\n  nameWithType: ICryptoTransform\n  fullName: System.Security.Cryptography.ICryptoTransform\n  type: Interface\n  assemblies:\n  - System.Security.Cryptography.Primitives\n  - mscorlib\n  - netstandard\n  namespace: System.Security.Cryptography\n  summary: Defines the basic operations of cryptographic transformations.\n  remarks: Hash algorithms are an example of cryptographic transformations (<xref:System.Security.Cryptography.HashAlgorithm>).\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(true)]\n\n      public interface ICryptoTransform : IDisposable\n  derivedClasses:\n  - System.Security.Cryptography.CryptoAPITransform\n  - System.Security.Cryptography.FromBase64Transform\n  - System.Security.Cryptography.HashAlgorithm\n  - System.Security.Cryptography.RijndaelManagedTransform\n  - System.Security.Cryptography.ToBase64Transform\n  implements:\n  - System.IDisposable\n  attributes:\n  - type: System.Runtime.InteropServices.ComVisibleAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/ICryptoTransform.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Cryptography.ICryptoTransform.CanReuseTransform\n  commentId: P:System.Security.Cryptography.ICryptoTransform.CanReuseTransform\n  id: CanReuseTransform\n  parent: System.Security.Cryptography.ICryptoTransform\n  langs:\n  - csharp\n  name: CanReuseTransform\n  nameWithType: ICryptoTransform.CanReuseTransform\n  fullName: ICryptoTransform.CanReuseTransform\n  type: Property\n  assemblies:\n  - System.Security.Cryptography.Primitives\n  - mscorlib\n  - netstandard\n  namespace: System.Security.Cryptography\n  summary: Gets a value indicating whether the current transform can be reused.\n  syntax:\n    content: public bool CanReuseTransform { get; }\n    return:\n      type: System.Boolean\n      description: '`true` if the current transform can be reused; otherwise, `false`.'\n  overload: System.Security.Cryptography.ICryptoTransform.CanReuseTransform*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/ICryptoTransform.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Cryptography.ICryptoTransform.CanTransformMultipleBlocks\n  commentId: P:System.Security.Cryptography.ICryptoTransform.CanTransformMultipleBlocks\n  id: CanTransformMultipleBlocks\n  parent: System.Security.Cryptography.ICryptoTransform\n  langs:\n  - csharp\n  name: CanTransformMultipleBlocks\n  nameWithType: ICryptoTransform.CanTransformMultipleBlocks\n  fullName: ICryptoTransform.CanTransformMultipleBlocks\n  type: Property\n  assemblies:\n  - System.Security.Cryptography.Primitives\n  - mscorlib\n  - netstandard\n  namespace: System.Security.Cryptography\n  summary: Gets a value indicating whether multiple blocks can be transformed.\n  syntax:\n    content: public bool CanTransformMultipleBlocks { get; }\n    return:\n      type: System.Boolean\n      description: '`true` if multiple blocks can be transformed; otherwise, `false`.'\n  overload: System.Security.Cryptography.ICryptoTransform.CanTransformMultipleBlocks*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/ICryptoTransform.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Cryptography.ICryptoTransform.InputBlockSize\n  commentId: P:System.Security.Cryptography.ICryptoTransform.InputBlockSize\n  id: InputBlockSize\n  parent: System.Security.Cryptography.ICryptoTransform\n  langs:\n  - csharp\n  name: InputBlockSize\n  nameWithType: ICryptoTransform.InputBlockSize\n  fullName: ICryptoTransform.InputBlockSize\n  type: Property\n  assemblies:\n  - System.Security.Cryptography.Primitives\n  - mscorlib\n  - netstandard\n  namespace: System.Security.Cryptography\n  summary: Gets the input block size.\n  syntax:\n    content: public int InputBlockSize { get; }\n    return:\n      type: System.Int32\n      description: The size of the input data blocks in bytes.\n  overload: System.Security.Cryptography.ICryptoTransform.InputBlockSize*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/ICryptoTransform.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Cryptography.ICryptoTransform.OutputBlockSize\n  commentId: P:System.Security.Cryptography.ICryptoTransform.OutputBlockSize\n  id: OutputBlockSize\n  parent: System.Security.Cryptography.ICryptoTransform\n  langs:\n  - csharp\n  name: OutputBlockSize\n  nameWithType: ICryptoTransform.OutputBlockSize\n  fullName: ICryptoTransform.OutputBlockSize\n  type: Property\n  assemblies:\n  - System.Security.Cryptography.Primitives\n  - mscorlib\n  - netstandard\n  namespace: System.Security.Cryptography\n  summary: Gets the output block size.\n  syntax:\n    content: public int OutputBlockSize { get; }\n    return:\n      type: System.Int32\n      description: The size of the output data blocks in bytes.\n  overload: System.Security.Cryptography.ICryptoTransform.OutputBlockSize*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/ICryptoTransform.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Cryptography.ICryptoTransform.TransformBlock(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)\n  commentId: M:System.Security.Cryptography.ICryptoTransform.TransformBlock(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)\n  id: TransformBlock(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)\n  parent: System.Security.Cryptography.ICryptoTransform\n  langs:\n  - csharp\n  name: TransformBlock(Byte[], Int32, Int32, Byte[], Int32)\n  nameWithType: ICryptoTransform.TransformBlock(Byte[], Int32, Int32, Byte[], Int32)\n  fullName: ICryptoTransform.TransformBlock(Byte[], Int32, Int32, Byte[], Int32)\n  type: Method\n  assemblies:\n  - System.Security.Cryptography.Primitives\n  - mscorlib\n  - netstandard\n  namespace: System.Security.Cryptography\n  summary: Transforms the specified region of the input byte array and copies the resulting transform to the specified region of the output byte array.\n  remarks: The return value of <xref:System.Security.Cryptography.ICryptoTransform.TransformBlock%2A> is the number of bytes returned to `outputBuffer` and is always less than or equal to <xref:System.Security.Cryptography.ICryptoTransform.OutputBlockSize>. If <xref:System.Security.Cryptography.ICryptoTransform.CanTransformMultipleBlocks> is `true`, then `inputCount` must be any positive multiple of <xref:System.Security.Cryptography.ICryptoTransform.InputBlockSize>.\n  syntax:\n    content: public int TransformBlock (byte[] inputBuffer, int inputOffset, int inputCount, byte[] outputBuffer, int outputOffset);\n    parameters:\n    - id: inputBuffer\n      type: System.Byte[]\n      description: The input for which to compute the transform.\n    - id: inputOffset\n      type: System.Int32\n      description: The offset into the input byte array from which to begin using data.\n    - id: inputCount\n      type: System.Int32\n      description: The number of bytes in the input byte array to use as data.\n    - id: outputBuffer\n      type: System.Byte[]\n      description: The output to which to write the transform.\n    - id: outputOffset\n      type: System.Int32\n      description: The offset into the output byte array from which to begin writing data.\n    return:\n      type: System.Int32\n      description: The number of bytes written.\n  overload: System.Security.Cryptography.ICryptoTransform.TransformBlock*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/ICryptoTransform.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Cryptography.ICryptoTransform.TransformFinalBlock(System.Byte[],System.Int32,System.Int32)\n  commentId: M:System.Security.Cryptography.ICryptoTransform.TransformFinalBlock(System.Byte[],System.Int32,System.Int32)\n  id: TransformFinalBlock(System.Byte[],System.Int32,System.Int32)\n  parent: System.Security.Cryptography.ICryptoTransform\n  langs:\n  - csharp\n  name: TransformFinalBlock(Byte[], Int32, Int32)\n  nameWithType: ICryptoTransform.TransformFinalBlock(Byte[], Int32, Int32)\n  fullName: ICryptoTransform.TransformFinalBlock(Byte[], Int32, Int32)\n  type: Method\n  assemblies:\n  - System.Security.Cryptography.Primitives\n  - mscorlib\n  - netstandard\n  namespace: System.Security.Cryptography\n  summary: Transforms the specified region of the specified byte array.\n  remarks: <xref:System.Security.Cryptography.ICryptoTransform.TransformFinalBlock%2A> is a special function for transforming the last block or a partial block in the stream. It returns a new array that contains the remaining transformed bytes. A new array is returned, because the amount of information returned at the end might be larger than a single block when padding is added.\n  syntax:\n    content: public byte[] TransformFinalBlock (byte[] inputBuffer, int inputOffset, int inputCount);\n    parameters:\n    - id: inputBuffer\n      type: System.Byte[]\n      description: The input for which to compute the transform.\n    - id: inputOffset\n      type: System.Int32\n      description: The offset into the byte array from which to begin using data.\n    - id: inputCount\n      type: System.Int32\n      description: The number of bytes in the byte array to use as data.\n    return:\n      type: System.Byte[]\n      description: The computed transform.\n  overload: System.Security.Cryptography.ICryptoTransform.TransformFinalBlock*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/ICryptoTransform.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\nreferences:\n- uid: System.Security.Cryptography.ICryptoTransform.CanReuseTransform\n  parent: System.Security.Cryptography.ICryptoTransform\n  isExternal: false\n  name: CanReuseTransform\n  nameWithType: ICryptoTransform.CanReuseTransform\n  fullName: ICryptoTransform.CanReuseTransform\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Security.Cryptography.ICryptoTransform.CanTransformMultipleBlocks\n  parent: System.Security.Cryptography.ICryptoTransform\n  isExternal: false\n  name: CanTransformMultipleBlocks\n  nameWithType: ICryptoTransform.CanTransformMultipleBlocks\n  fullName: ICryptoTransform.CanTransformMultipleBlocks\n- uid: System.Security.Cryptography.ICryptoTransform.InputBlockSize\n  parent: System.Security.Cryptography.ICryptoTransform\n  isExternal: false\n  name: InputBlockSize\n  nameWithType: ICryptoTransform.InputBlockSize\n  fullName: ICryptoTransform.InputBlockSize\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Security.Cryptography.ICryptoTransform.OutputBlockSize\n  parent: System.Security.Cryptography.ICryptoTransform\n  isExternal: false\n  name: OutputBlockSize\n  nameWithType: ICryptoTransform.OutputBlockSize\n  fullName: ICryptoTransform.OutputBlockSize\n- uid: System.Security.Cryptography.ICryptoTransform.TransformBlock(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)\n  parent: System.Security.Cryptography.ICryptoTransform\n  isExternal: false\n  name: TransformBlock(Byte[], Int32, Int32, Byte[], Int32)\n  nameWithType: ICryptoTransform.TransformBlock(Byte[], Int32, Int32, Byte[], Int32)\n  fullName: ICryptoTransform.TransformBlock(Byte[], Int32, Int32, Byte[], Int32)\n- uid: System.Byte\n  name: Byte\n  nameWithType: Byte\n  fullName: System.Byte\n- uid: System.Byte[]\n  parent: System\n  isExternal: false\n  name: Byte[]\n  nameWithType: Byte[]\n  fullName: System.Byte[]\n  spec.csharp:\n  - uid: System.Byte\n    name: Byte\n    nameWithType: Byte\n    fullName: System.Byte\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Security.Cryptography.ICryptoTransform.TransformFinalBlock(System.Byte[],System.Int32,System.Int32)\n  parent: System.Security.Cryptography.ICryptoTransform\n  isExternal: false\n  name: TransformFinalBlock(Byte[], Int32, Int32)\n  nameWithType: ICryptoTransform.TransformFinalBlock(Byte[], Int32, Int32)\n  fullName: ICryptoTransform.TransformFinalBlock(Byte[], Int32, Int32)\n- uid: System.Security.Cryptography.ICryptoTransform.CanReuseTransform*\n  parent: System.Security.Cryptography.ICryptoTransform\n  isExternal: false\n  name: CanReuseTransform\n  nameWithType: ICryptoTransform.CanReuseTransform\n  fullName: ICryptoTransform.CanReuseTransform\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/ICryptoTransform.xml\n- uid: System.Security.Cryptography.ICryptoTransform.CanTransformMultipleBlocks*\n  parent: System.Security.Cryptography.ICryptoTransform\n  isExternal: false\n  name: CanTransformMultipleBlocks\n  nameWithType: ICryptoTransform.CanTransformMultipleBlocks\n  fullName: ICryptoTransform.CanTransformMultipleBlocks\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/ICryptoTransform.xml\n- uid: System.Security.Cryptography.ICryptoTransform.InputBlockSize*\n  parent: System.Security.Cryptography.ICryptoTransform\n  isExternal: false\n  name: InputBlockSize\n  nameWithType: ICryptoTransform.InputBlockSize\n  fullName: ICryptoTransform.InputBlockSize\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/ICryptoTransform.xml\n- uid: System.Security.Cryptography.ICryptoTransform.OutputBlockSize*\n  parent: System.Security.Cryptography.ICryptoTransform\n  isExternal: false\n  name: OutputBlockSize\n  nameWithType: ICryptoTransform.OutputBlockSize\n  fullName: ICryptoTransform.OutputBlockSize\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/ICryptoTransform.xml\n- uid: System.Security.Cryptography.ICryptoTransform.TransformBlock*\n  parent: System.Security.Cryptography.ICryptoTransform\n  isExternal: false\n  name: TransformBlock\n  nameWithType: ICryptoTransform.TransformBlock\n  fullName: ICryptoTransform.TransformBlock\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/ICryptoTransform.xml\n- uid: System.Security.Cryptography.ICryptoTransform.TransformFinalBlock*\n  parent: System.Security.Cryptography.ICryptoTransform\n  isExternal: false\n  name: TransformFinalBlock\n  nameWithType: ICryptoTransform.TransformFinalBlock\n  fullName: ICryptoTransform.TransformFinalBlock\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/ICryptoTransform.xml\n- uid: System.IDisposable\n  parent: System\n  isExternal: false\n  name: IDisposable\n  nameWithType: IDisposable\n  fullName: System.IDisposable\n"}