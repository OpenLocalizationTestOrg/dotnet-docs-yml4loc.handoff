{"nodes":[{"content":"The exception that is thrown when a call is made to the <xref href=\"System.Threading.Thread.Abort(System.Object)\"></xref> method. This class cannot be inherited.","nodes":[{"pos":[0,161],"content":"The exception that is thrown when a call is made to the <xref href=\"System.Threading.Thread.Abort(System.Object)\"></xref> method. This class cannot be inherited.","nodes":[{"content":"The exception that is thrown when a call is made to the <ph id=\"ph1\">&lt;xref href=\"System.Threading.Thread.Abort(System.Object)\"&gt;&lt;/xref&gt;</ph> method.","pos":[0,129],"source":"The exception that is thrown when a call is made to the <xref href=\"System.Threading.Thread.Abort(System.Object)\"></xref> method."},{"content":"This class cannot be inherited.","pos":[130,161]}]}],"pos":[492,654],"yaml":true},{"content":"When a call is made to the <xref:System.Threading.Thread.Abort%2A> method to destroy a thread, the common language runtime throws a <xref:System.Threading.ThreadAbortException>. <xref:System.Threading.ThreadAbortException> is a special exception that can be caught, but it will automatically be raised again at the end of the `catch` block. When this exception is raised, the runtime executes all the `finally` blocks before ending the thread. Because the thread can do an unbounded computation in the `finally` blocks or call <xref:System.Threading.Thread.ResetAbort%2A?displayProperty=fullName> to cancel the abort, there is no guarantee that the thread will ever end. If you want to wait until the aborted thread has ended, you can call the <xref:System.Threading.Thread.Join%2A?displayProperty=fullName> method. <xref:System.Threading.Thread.Join%2A> is a blocking call that does not return until the thread actually stops executing.  \n  \n> [!NOTE]\n>  When the common language runtime (CLR) stops background threadsafter all foreground threads in a managed executable have ended, it does not use <xref:System.Threading.Thread.Abort%2A?displayProperty=fullName>. Therefore, you cannot use <xref:System.Threading.ThreadAbortException> to detect when background threads are being terminated by the CLR.  \n  \n <xref:System.Threading.ThreadAbortException> uses the HRESULT COR_E_THREADABORTED, which has the value 0x80131530.  \n  \n> [!NOTE]\n>  The value of the inherited <xref:System.Exception.Data%2A> property is always `null`.","nodes":[{"pos":[0,937],"content":"When a call is made to the <xref:System.Threading.Thread.Abort%2A> method to destroy a thread, the common language runtime throws a <xref:System.Threading.ThreadAbortException>. <xref:System.Threading.ThreadAbortException> is a special exception that can be caught, but it will automatically be raised again at the end of the `catch` block. When this exception is raised, the runtime executes all the `finally` blocks before ending the thread. Because the thread can do an unbounded computation in the `finally` blocks or call <xref:System.Threading.Thread.ResetAbort%2A?displayProperty=fullName> to cancel the abort, there is no guarantee that the thread will ever end. If you want to wait until the aborted thread has ended, you can call the <xref:System.Threading.Thread.Join%2A?displayProperty=fullName> method. <xref:System.Threading.Thread.Join%2A> is a blocking call that does not return until the thread actually stops executing.","nodes":[{"content":"When a call is made to the <ph id=\"ph1\">&lt;xref:System.Threading.Thread.Abort%2A&gt;</ph> method to destroy a thread, the common language runtime throws a <ph id=\"ph2\">&lt;xref:System.Threading.ThreadAbortException&gt;</ph>.","pos":[0,177],"source":"When a call is made to the <xref:System.Threading.Thread.Abort%2A> method to destroy a thread, the common language runtime throws a <xref:System.Threading.ThreadAbortException>."},{"content":"<ph id=\"ph1\">&lt;xref:System.Threading.ThreadAbortException&gt;</ph> is a special exception that can be caught, but it will automatically be raised again at the end of the <ph id=\"ph2\">`catch`</ph> block.","pos":[178,340],"source":" <xref:System.Threading.ThreadAbortException> is a special exception that can be caught, but it will automatically be raised again at the end of the `catch` block."},{"content":"When this exception is raised, the runtime executes all the <ph id=\"ph1\">`finally`</ph> blocks before ending the thread.","pos":[341,443],"source":" When this exception is raised, the runtime executes all the `finally` blocks before ending the thread."},{"content":"Because the thread can do an unbounded computation in the <ph id=\"ph1\">`finally`</ph> blocks or call <ph id=\"ph2\">&lt;xref:System.Threading.Thread.ResetAbort%2A?displayProperty=fullName&gt;</ph> to cancel the abort, there is no guarantee that the thread will ever end.","pos":[444,670],"source":" Because the thread can do an unbounded computation in the `finally` blocks or call <xref:System.Threading.Thread.ResetAbort%2A?displayProperty=fullName> to cancel the abort, there is no guarantee that the thread will ever end."},{"content":"If you want to wait until the aborted thread has ended, you can call the <ph id=\"ph1\">&lt;xref:System.Threading.Thread.Join%2A?displayProperty=fullName&gt;</ph> method.","pos":[671,815],"source":" If you want to wait until the aborted thread has ended, you can call the <xref:System.Threading.Thread.Join%2A?displayProperty=fullName> method."},{"content":"<ph id=\"ph1\">&lt;xref:System.Threading.Thread.Join%2A&gt;</ph> is a blocking call that does not return until the thread actually stops executing.","pos":[816,937],"source":" <xref:System.Threading.Thread.Join%2A> is a blocking call that does not return until the thread actually stops executing."}]},{"pos":[945,1303],"content":"[!NOTE]\n When the common language runtime (CLR) stops background threadsafter all foreground threads in a managed executable have ended, it does not use <xref:System.Threading.Thread.Abort%2A?displayProperty=fullName>. Therefore, you cannot use <xref:System.Threading.ThreadAbortException> to detect when background threads are being terminated by the CLR.","leadings":["","> "],"nodes":[{"content":" When the common language runtime (CLR) stops background threadsafter all foreground threads in a managed executable have ended, it does not use <xref:System.Threading.Thread.Abort%2A?displayProperty=fullName>. Therefore, you cannot use <xref:System.Threading.ThreadAbortException> to detect when background threads are being terminated by the CLR.","pos":[8,356],"nodes":[{"content":"When the common language runtime (CLR) stops background threadsafter all foreground threads in a managed executable have ended, it does not use <ph id=\"ph1\">&lt;xref:System.Threading.Thread.Abort%2A?displayProperty=fullName&gt;</ph>.","pos":[1,210],"source":" When the common language runtime (CLR) stops background threadsafter all foreground threads in a managed executable have ended, it does not use <xref:System.Threading.Thread.Abort%2A?displayProperty=fullName>."},{"content":"Therefore, you cannot use <ph id=\"ph1\">&lt;xref:System.Threading.ThreadAbortException&gt;</ph> to detect when background threads are being terminated by the CLR.","pos":[211,348],"source":" Therefore, you cannot use <xref:System.Threading.ThreadAbortException> to detect when background threads are being terminated by the CLR."}]}]},{"pos":[1310,1424],"content":"<xref:System.Threading.ThreadAbortException> uses the HRESULT COR_E_THREADABORTED, which has the value 0x80131530.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Threading.ThreadAbortException&gt;</ph> uses the HRESULT COR_E_THREADABORTED, which has the value 0x80131530.","pos":[0,114],"source":"<xref:System.Threading.ThreadAbortException> uses the HRESULT COR_E_THREADABORTED, which has the value 0x80131530."}]},{"pos":[1432,1528],"content":"[!NOTE]\n The value of the inherited <xref:System.Exception.Data%2A> property is always `null`.","leadings":["","> "],"nodes":[{"content":"The value of the inherited <ph id=\"ph1\">&lt;xref:System.Exception.Data%2A&gt;</ph> property is always <ph id=\"ph2\">`null`</ph>.","pos":[9,94],"source":" The value of the inherited <xref:System.Exception.Data%2A> property is always `null`."}]}],"pos":[665,2204],"yaml":true,"extradata":"MT"},{"content":"Gets an object that contains application-specific information related to the thread abort.","nodes":[{"pos":[0,90],"content":"Gets an object that contains application-specific information related to the thread abort.","nodes":[{"content":"Gets an object that contains application-specific information related to the thread abort.","pos":[0,90]}]}],"pos":[5332,5423],"yaml":true},{"content":"The object returned by this property is specified through the `stateInfo` parameter of the <xref:System.Threading.Thread.Abort%2A> method. The exact content and usage of this object is application defined; it is typically used to convey information that is meaningful to the thread being aborted.","nodes":[{"pos":[0,296],"content":"The object returned by this property is specified through the `stateInfo` parameter of the <xref:System.Threading.Thread.Abort%2A> method. The exact content and usage of this object is application defined; it is typically used to convey information that is meaningful to the thread being aborted.","nodes":[{"content":"The object returned by this property is specified through the <ph id=\"ph1\">`stateInfo`</ph> parameter of the <ph id=\"ph2\">&lt;xref:System.Threading.Thread.Abort%2A&gt;</ph> method.","pos":[0,138],"source":"The object returned by this property is specified through the `stateInfo` parameter of the <xref:System.Threading.Thread.Abort%2A> method."},{"content":"The exact content and usage of this object is application defined; it is typically used to convey information that is meaningful to the thread being aborted.","pos":[139,296]}]}],"pos":[5434,5731],"yaml":true,"extradata":"MT"},{"content":"An object containing application-specific information.","nodes":[{"pos":[0,54],"content":"An object containing application-specific information.","nodes":[{"content":"An object containing application-specific information.","pos":[0,54]}]}],"pos":[6462,6517],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Threading.ThreadAbortException\n  commentId: T:System.Threading.ThreadAbortException\n  id: ThreadAbortException\n  children:\n  - System.Threading.ThreadAbortException.ExceptionState\n  langs:\n  - csharp\n  name: ThreadAbortException\n  nameWithType: ThreadAbortException\n  fullName: System.Threading.ThreadAbortException\n  type: Class\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Threading.Thread\n  namespace: System.Threading\n  summary: The exception that is thrown when a call is made to the <xref href=\"System.Threading.Thread.Abort(System.Object)\"></xref> method. This class cannot be inherited.\n  remarks: \"When a call is made to the <xref:System.Threading.Thread.Abort%2A> method to destroy a thread, the common language runtime throws a <xref:System.Threading.ThreadAbortException>. <xref:System.Threading.ThreadAbortException> is a special exception that can be caught, but it will automatically be raised again at the end of the `catch` block. When this exception is raised, the runtime executes all the `finally` blocks before ending the thread. Because the thread can do an unbounded computation in the `finally` blocks or call <xref:System.Threading.Thread.ResetAbort%2A?displayProperty=fullName> to cancel the abort, there is no guarantee that the thread will ever end. If you want to wait until the aborted thread has ended, you can call the <xref:System.Threading.Thread.Join%2A?displayProperty=fullName> method. <xref:System.Threading.Thread.Join%2A> is a blocking call that does not return until the thread actually stops executing.  \\n  \\n> [!NOTE]\\n>  When the common language runtime (CLR) stops background threadsafter all foreground threads in a managed executable have ended, it does not use <xref:System.Threading.Thread.Abort%2A?displayProperty=fullName>. Therefore, you cannot use <xref:System.Threading.ThreadAbortException> to detect when background threads are being terminated by the CLR.  \\n  \\n <xref:System.Threading.ThreadAbortException> uses the HRESULT COR_E_THREADABORTED, which has the value 0x80131530.  \\n  \\n> [!NOTE]\\n>  The value of the inherited <xref:System.Exception.Data%2A> property is always `null`.\"\n  example:\n  - \"The following example demonstrates aborting a thread. The thread that receives the `ThreadAbortException` uses the <xref:System.Threading.Thread.ResetAbort%2A> method to cancel the abort request and continue executing.  \\n  \\n [!code-cpp[ThreadAbEx#1](~/samples/snippets/cpp/VS_Snippets_CLR/ThreadAbEx/CPP/threadabex.cpp#1)]\\n [!code-csharp[ThreadAbEx#1](~/samples/snippets/csharp/VS_Snippets_CLR/ThreadAbEx/CS/threadabex.cs#1)]\\n [!code-vb[ThreadAbEx#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/ThreadAbEx/VB/threadabex.vb#1)]  \\n  \\n This code produces the following output:  \\n  \\n```  \\nThread - working.  \\nMain - aborting my thread.  \\nThread - caught ThreadAbortException - resetting.  \\nException message: Thread was being aborted.  \\nThread - still alive and working.  \\nThread - finished working.  \\nMain ending.  \\n```\"\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(true)]\n\n      public sealed class ThreadAbortException : SystemException\n  inheritance:\n  - System.Object\n  - System.Exception\n  - System.SystemException\n  implements: []\n  inheritedMembers:\n  - System.Exception.Data\n  - System.Exception.GetBaseException\n  - System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)\n  - System.Exception.GetType\n  - System.Exception.HelpLink\n  - System.Exception.HResult\n  - System.Exception.InnerException\n  - System.Exception.Message\n  - System.Exception.SerializeObjectState\n  - System.Exception.Source\n  - System.Exception.StackTrace\n  - System.Exception.TargetSite\n  - System.Exception.ToString\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  attributes:\n  - type: System.Runtime.InteropServices.ComVisibleAttribute\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/ThreadAbortException.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.ThreadAbortException.ExceptionState\n  commentId: P:System.Threading.ThreadAbortException.ExceptionState\n  id: ExceptionState\n  parent: System.Threading.ThreadAbortException\n  langs:\n  - csharp\n  name: ExceptionState\n  nameWithType: ThreadAbortException.ExceptionState\n  fullName: ThreadAbortException.ExceptionState\n  type: Property\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Threading.Thread\n  namespace: System.Threading\n  summary: Gets an object that contains application-specific information related to the thread abort.\n  remarks: The object returned by this property is specified through the `stateInfo` parameter of the <xref:System.Threading.Thread.Abort%2A> method. The exact content and usage of this object is application defined; it is typically used to convey information that is meaningful to the thread being aborted.\n  example:\n  - \"The following code example shows how to pass information to a thread that is being aborted.  \\n  \\n [!code-cpp[System.Threading.Thread.Abort2#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Thread.Abort2/CPP/source.cpp#1)]\\n [!code-csharp[System.Threading.Thread.Abort2#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Thread.Abort2/CS/source.cs#1)]\\n [!code-vb[System.Threading.Thread.Abort2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Thread.Abort2/VB/source.vb#1)]\"\n  syntax:\n    content: >-\n      [get: System.Security.SecuritySafeCritical]\n\n      public object ExceptionState { get; }\n    return:\n      type: System.Object\n      description: An object containing application-specific information.\n  overload: System.Threading.ThreadAbortException.ExceptionState*\n  exceptions: []\n  attributes:\n  - type: 'get: System.Security.SecuritySafeCritical'\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/ThreadAbortException.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\nreferences:\n- uid: System.SystemException\n  parent: System\n  isExternal: false\n  name: SystemException\n  nameWithType: SystemException\n  fullName: System.SystemException\n- uid: System.Threading.ThreadAbortException.ExceptionState\n  parent: System.Threading.ThreadAbortException\n  isExternal: false\n  name: ExceptionState\n  nameWithType: ThreadAbortException.ExceptionState\n  fullName: ThreadAbortException.ExceptionState\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.Threading.ThreadAbortException.ExceptionState*\n  parent: System.Threading.ThreadAbortException\n  isExternal: false\n  name: ExceptionState\n  nameWithType: ThreadAbortException.ExceptionState\n  fullName: ThreadAbortException.ExceptionState\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/ThreadAbortException.xml\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: Object.Equals(Object)\n  fullName: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: Object.GetHashCode()\n  fullName: Object.GetHashCode()\n- uid: System.Exception.GetType\n  parent: System.Exception\n  isExternal: false\n  name: GetType()\n  nameWithType: Exception.GetType()\n  fullName: Exception.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n- uid: System.Exception.ToString\n  parent: System.Exception\n  isExternal: false\n  name: ToString()\n  nameWithType: Exception.ToString()\n  fullName: Exception.ToString()\n- uid: System.Exception.Data\n  parent: System.Exception\n  isExternal: false\n  name: Data\n  nameWithType: Exception.Data\n  fullName: Exception.Data\n- uid: System.Exception.GetBaseException\n  parent: System.Exception\n  isExternal: false\n  name: GetBaseException()\n  nameWithType: Exception.GetBaseException()\n  fullName: Exception.GetBaseException()\n- uid: System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)\n  parent: System.Exception\n  isExternal: false\n  name: GetObjectData(SerializationInfo, StreamingContext)\n  nameWithType: Exception.GetObjectData(SerializationInfo, StreamingContext)\n  fullName: Exception.GetObjectData(SerializationInfo, StreamingContext)\n- uid: System.Exception.HelpLink\n  parent: System.Exception\n  isExternal: false\n  name: HelpLink\n  nameWithType: Exception.HelpLink\n  fullName: Exception.HelpLink\n- uid: System.Exception.HResult\n  parent: System.Exception\n  isExternal: false\n  name: HResult\n  nameWithType: Exception.HResult\n  fullName: Exception.HResult\n- uid: System.Exception.InnerException\n  parent: System.Exception\n  isExternal: false\n  name: InnerException\n  nameWithType: Exception.InnerException\n  fullName: Exception.InnerException\n- uid: System.Exception.Message\n  parent: System.Exception\n  isExternal: false\n  name: Message\n  nameWithType: Exception.Message\n  fullName: Exception.Message\n- uid: System.Exception.SerializeObjectState\n  parent: System.Exception\n  isExternal: false\n  name: SerializeObjectState\n  nameWithType: Exception.SerializeObjectState\n  fullName: Exception.SerializeObjectState\n- uid: System.Exception.Source\n  parent: System.Exception\n  isExternal: false\n  name: Source\n  nameWithType: Exception.Source\n  fullName: Exception.Source\n- uid: System.Exception.StackTrace\n  parent: System.Exception\n  isExternal: false\n  name: StackTrace\n  nameWithType: Exception.StackTrace\n  fullName: Exception.StackTrace\n- uid: System.Exception.TargetSite\n  parent: System.Exception\n  isExternal: false\n  name: TargetSite\n  nameWithType: Exception.TargetSite\n  fullName: Exception.TargetSite\n"}