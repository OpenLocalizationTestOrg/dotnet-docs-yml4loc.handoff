{"nodes":[{"content":"Reports information about an ambient property, as part of an <xref href=\"System.Xaml.IAmbientProvider\"></xref> implementation.","nodes":[{"pos":[0,126],"content":"Reports information about an ambient property, as part of an <ph id=\"ph1\">&lt;xref href=\"System.Xaml.IAmbientProvider\"&gt;&lt;/xref&gt;</ph> implementation.","source":"Reports information about an ambient property, as part of an <xref href=\"System.Xaml.IAmbientProvider\"></xref> implementation."}],"pos":[553,680],"yaml":true},{"content":"<xref:System.Xaml.AmbientPropertyValue> represents an information item that is returned by calling an <xref:System.Xaml.IAmbientProvider> service method. The `GetAll` methods return enumerations or arrays of <xref:System.Xaml.AmbientPropertyValue> items; the `GetFirst` methods return a single <xref:System.Xaml.AmbientPropertyValue>.  \n  \n## About Ambient Properties  \n An ambient property is a property whose property value should be available to value converter usage in the XAML node structure and to the object graph underneath it. The ambient concept  is relevant for a XAML processor during the object-writing phase of the load path or the serialization phase of a save path.  \n  \n A type can also be attributed as ambient. In this case, all properties that use the attributed type are reported as ambient.  \n  \n In the load path case, the ambient property value might influence the object graph produced value of other properties that exist underneath it in a XAML node structure. When processed as a XAML node stream, the ambient concept implies that the ambient property value must be available to type converters and markup extensions from `StartObject` to `EndObject`. Similarly, a type converter or markup extension that is used for the save path can look up the ambient property and its value. Therefore, the XAML that is produced is a better round-trip representation.  \n  \n By its language definition, XAML does not specify the order in which members of an object must be processed. However, any ambient property value must be processed first by the XAML reader so that the type converter and markup extension usage that are contained in other properties can access it through the <xref:System.Xaml.IAmbientProvider> service.  \n  \n <xref:System.Xaml.XamlMember.DependsOn%2A> is a similar concept that also influences XAML node-processing order. However, <xref:System.Xaml.XamlMember.DependsOn%2A> can only be used for peer member and node relationships; it cannot influence all descendants. Also, <xref:System.Xaml.XamlMember.DependsOn%2A> directly influences object graph property setting, whereas the ambient technique relies on type converters or markup extensions. In the ambient technique, there must also be a specific type converter or markup extension definition. It is up to each type converter or markup extension to determine how the ambient property value should be interpreted and applied to the object graph location where the type converter or markup extension is used.  \n  \n## WPF Usage Notes  \n An ambient property scenario that is illustrated in the [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] feature set is <xref:System.Windows.Style.TargetType%2A?displayProperty=fullName>, which can qualify the necessary property name lookups for other values. In this case, the <xref:System.Windows.Style.TargetType%2A?displayProperty=fullName> value qualifies the <xref:System.Windows.Setter.Property%2A?displayProperty=fullName> values in the XAML nodes underneath it. <xref:System.Windows.Setter.Property%2A?displayProperty=fullName> uses the type converter behavior for a <xref:System.Windows.DependencyProperty>. This behavior accesses the ambient <xref:System.Windows.Style.TargetType%2A?displayProperty=fullName> value by querying <xref:System.Xaml.IAmbientProvider.GetFirstAmbientValue%2A> from a service context that is available to type converters and markup extensions.","nodes":[{"pos":[0,334],"content":"<xref:System.Xaml.AmbientPropertyValue> represents an information item that is returned by calling an <xref:System.Xaml.IAmbientProvider> service method. The `GetAll` methods return enumerations or arrays of <xref:System.Xaml.AmbientPropertyValue> items; the `GetFirst` methods return a single <xref:System.Xaml.AmbientPropertyValue>.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Xaml.AmbientPropertyValue&gt;</ph> represents an information item that is returned by calling an <ph id=\"ph2\">&lt;xref:System.Xaml.IAmbientProvider&gt;</ph> service method.","pos":[0,153],"source":"<xref:System.Xaml.AmbientPropertyValue> represents an information item that is returned by calling an <xref:System.Xaml.IAmbientProvider> service method."},{"content":"The <ph id=\"ph1\">`GetAll`</ph> methods return enumerations or arrays of <ph id=\"ph2\">&lt;xref:System.Xaml.AmbientPropertyValue&gt;</ph> items; the <ph id=\"ph3\">`GetFirst`</ph> methods return a single <ph id=\"ph4\">&lt;xref:System.Xaml.AmbientPropertyValue&gt;</ph>.","pos":[154,334],"source":" The `GetAll` methods return enumerations or arrays of <xref:System.Xaml.AmbientPropertyValue> items; the `GetFirst` methods return a single <xref:System.Xaml.AmbientPropertyValue>."}]},{"pos":[343,367],"content":"About Ambient Properties","linkify":"About Ambient Properties","nodes":[{"content":"About Ambient Properties","pos":[0,24]}]},{"pos":[371,682],"content":"An ambient property is a property whose property value should be available to value converter usage in the XAML node structure and to the object graph underneath it. The ambient concept  is relevant for a XAML processor during the object-writing phase of the load path or the serialization phase of a save path.","nodes":[{"content":"An ambient property is a property whose property value should be available to value converter usage in the XAML node structure and to the object graph underneath it. The ambient concept  is relevant for a XAML processor during the object-writing phase of the load path or the serialization phase of a save path.","pos":[0,311],"nodes":[{"content":"An ambient property is a property whose property value should be available to value converter usage in the XAML node structure and to the object graph underneath it.","pos":[0,165]},{"content":"The ambient concept  is relevant for a XAML processor during the object-writing phase of the load path or the serialization phase of a save path.","pos":[166,311]}]}]},{"pos":[689,813],"content":"A type can also be attributed as ambient. In this case, all properties that use the attributed type are reported as ambient.","nodes":[{"content":"A type can also be attributed as ambient. In this case, all properties that use the attributed type are reported as ambient.","pos":[0,124],"nodes":[{"content":"A type can also be attributed as ambient.","pos":[0,41]},{"content":"In this case, all properties that use the attributed type are reported as ambient.","pos":[42,124]}]}]},{"pos":[820,1383],"content":"In the load path case, the ambient property value might influence the object graph produced value of other properties that exist underneath it in a XAML node structure. When processed as a XAML node stream, the ambient concept implies that the ambient property value must be available to type converters and markup extensions from `StartObject` to `EndObject`. Similarly, a type converter or markup extension that is used for the save path can look up the ambient property and its value. Therefore, the XAML that is produced is a better round-trip representation.","nodes":[{"content":"In the load path case, the ambient property value might influence the object graph produced value of other properties that exist underneath it in a XAML node structure.","pos":[0,168]},{"content":"When processed as a XAML node stream, the ambient concept implies that the ambient property value must be available to type converters and markup extensions from <ph id=\"ph1\">`StartObject`</ph> to <ph id=\"ph2\">`EndObject`</ph>.","pos":[169,360],"source":" When processed as a XAML node stream, the ambient concept implies that the ambient property value must be available to type converters and markup extensions from `StartObject` to `EndObject`."},{"content":"Similarly, a type converter or markup extension that is used for the save path can look up the ambient property and its value.","pos":[361,487]},{"content":"Therefore, the XAML that is produced is a better round-trip representation.","pos":[488,563]}]},{"pos":[1390,1741],"content":"By its language definition, XAML does not specify the order in which members of an object must be processed. However, any ambient property value must be processed first by the XAML reader so that the type converter and markup extension usage that are contained in other properties can access it through the <xref:System.Xaml.IAmbientProvider> service.","nodes":[{"content":"By its language definition, XAML does not specify the order in which members of an object must be processed. However, any ambient property value must be processed first by the XAML reader so that the type converter and markup extension usage that are contained in other properties can access it through the <xref:System.Xaml.IAmbientProvider> service.","pos":[0,351],"nodes":[{"content":"By its language definition, XAML does not specify the order in which members of an object must be processed.","pos":[0,108]},{"content":"However, any ambient property value must be processed first by the XAML reader so that the type converter and markup extension usage that are contained in other properties can access it through the <ph id=\"ph1\">&lt;xref:System.Xaml.IAmbientProvider&gt;</ph> service.","pos":[109,351],"source":" However, any ambient property value must be processed first by the XAML reader so that the type converter and markup extension usage that are contained in other properties can access it through the <xref:System.Xaml.IAmbientProvider> service."}]}]},{"pos":[1748,2500],"content":"<xref:System.Xaml.XamlMember.DependsOn%2A> is a similar concept that also influences XAML node-processing order. However, <xref:System.Xaml.XamlMember.DependsOn%2A> can only be used for peer member and node relationships; it cannot influence all descendants. Also, <xref:System.Xaml.XamlMember.DependsOn%2A> directly influences object graph property setting, whereas the ambient technique relies on type converters or markup extensions. In the ambient technique, there must also be a specific type converter or markup extension definition. It is up to each type converter or markup extension to determine how the ambient property value should be interpreted and applied to the object graph location where the type converter or markup extension is used.","nodes":[{"content":"<xref:System.Xaml.XamlMember.DependsOn%2A> is a similar concept that also influences XAML node-processing order. However, <xref:System.Xaml.XamlMember.DependsOn%2A> can only be used for peer member and node relationships; it cannot influence all descendants. Also, <xref:System.Xaml.XamlMember.DependsOn%2A> directly influences object graph property setting, whereas the ambient technique relies on type converters or markup extensions. In the ambient technique, there must also be a specific type converter or markup extension definition. It is up to each type converter or markup extension to determine how the ambient property value should be interpreted and applied to the object graph location where the type converter or markup extension is used.","pos":[0,752],"nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Xaml.XamlMember.DependsOn%2A&gt;</ph> is a similar concept that also influences XAML node-processing order.","pos":[0,112],"source":"<xref:System.Xaml.XamlMember.DependsOn%2A> is a similar concept that also influences XAML node-processing order."},{"content":"However, <ph id=\"ph1\">&lt;xref:System.Xaml.XamlMember.DependsOn%2A&gt;</ph> can only be used for peer member and node relationships; it cannot influence all descendants.","pos":[113,258],"source":" However, <xref:System.Xaml.XamlMember.DependsOn%2A> can only be used for peer member and node relationships; it cannot influence all descendants."},{"content":"Also, <ph id=\"ph1\">&lt;xref:System.Xaml.XamlMember.DependsOn%2A&gt;</ph> directly influences object graph property setting, whereas the ambient technique relies on type converters or markup extensions.","pos":[259,436],"source":" Also, <xref:System.Xaml.XamlMember.DependsOn%2A> directly influences object graph property setting, whereas the ambient technique relies on type converters or markup extensions."},{"content":"In the ambient technique, there must also be a specific type converter or markup extension definition.","pos":[437,539]},{"content":"It is up to each type converter or markup extension to determine how the ambient property value should be interpreted and applied to the object graph location where the type converter or markup extension is used.","pos":[540,752]}]}]},{"pos":[2509,2524],"content":"WPF Usage Notes","linkify":"WPF Usage Notes","nodes":[{"content":"WPF Usage Notes","pos":[0,15]}]},{"pos":[2528,3431],"content":"An ambient property scenario that is illustrated in the [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] feature set is <xref:System.Windows.Style.TargetType%2A?displayProperty=fullName>, which can qualify the necessary property name lookups for other values. In this case, the <xref:System.Windows.Style.TargetType%2A?displayProperty=fullName> value qualifies the <xref:System.Windows.Setter.Property%2A?displayProperty=fullName> values in the XAML nodes underneath it. <xref:System.Windows.Setter.Property%2A?displayProperty=fullName> uses the type converter behavior for a <xref:System.Windows.DependencyProperty>. This behavior accesses the ambient <xref:System.Windows.Style.TargetType%2A?displayProperty=fullName> value by querying <xref:System.Xaml.IAmbientProvider.GetFirstAmbientValue%2A> from a service context that is available to type converters and markup extensions.","nodes":[{"content":"An ambient property scenario that is illustrated in the <ph id=\"ph1\">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]</ph> feature set is <ph id=\"ph2\">&lt;xref:System.Windows.Style.TargetType%2A?displayProperty=fullName&gt;</ph>, which can qualify the necessary property name lookups for other values.","pos":[0,282],"source":"An ambient property scenario that is illustrated in the [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] feature set is <xref:System.Windows.Style.TargetType%2A?displayProperty=fullName>, which can qualify the necessary property name lookups for other values."},{"content":"In this case, the <ph id=\"ph1\">&lt;xref:System.Windows.Style.TargetType%2A?displayProperty=fullName&gt;</ph> value qualifies the <ph id=\"ph2\">&lt;xref:System.Windows.Setter.Property%2A?displayProperty=fullName&gt;</ph> values in the XAML nodes underneath it.","pos":[283,493],"source":" In this case, the <xref:System.Windows.Style.TargetType%2A?displayProperty=fullName> value qualifies the <xref:System.Windows.Setter.Property%2A?displayProperty=fullName> values in the XAML nodes underneath it."},{"content":"<ph id=\"ph1\">&lt;xref:System.Windows.Setter.Property%2A?displayProperty=fullName&gt;</ph> uses the type converter behavior for a <ph id=\"ph2\">&lt;xref:System.Windows.DependencyProperty&gt;</ph>.","pos":[494,640],"source":" <xref:System.Windows.Setter.Property%2A?displayProperty=fullName> uses the type converter behavior for a <xref:System.Windows.DependencyProperty>."},{"content":"This behavior accesses the ambient <ph id=\"ph1\">&lt;xref:System.Windows.Style.TargetType%2A?displayProperty=fullName&gt;</ph> value by querying <ph id=\"ph2\">&lt;xref:System.Xaml.IAmbientProvider.GetFirstAmbientValue%2A&gt;</ph> from a service context that is available to type converters and markup extensions.","pos":[641,903],"source":" This behavior accesses the ambient <xref:System.Windows.Style.TargetType%2A?displayProperty=fullName> value by querying <xref:System.Xaml.IAmbientProvider.GetFirstAmbientValue%2A> from a service context that is available to type converters and markup extensions."}]}],"pos":[691,4139],"yaml":true,"extradata":"MT"},{"content":"Initializes a new instance of the <xref href=\"System.Xaml.AmbientPropertyValue\"></xref> class.","nodes":[{"pos":[0,94],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Xaml.AmbientPropertyValue\"&gt;&lt;/xref&gt;</ph> class.","source":"Initializes a new instance of the <xref href=\"System.Xaml.AmbientPropertyValue\"></xref> class."}],"pos":[5606,5701],"yaml":true},{"content":"The identifier that represents the ambient property.","nodes":[{"pos":[0,52],"content":"The identifier that represents the ambient property.","nodes":[{"content":"The identifier that represents the ambient property.","pos":[0,52]}]}],"pos":[5890,5943],"yaml":true},{"content":"The value to report.","nodes":[{"pos":[0,20],"content":"The value to report.","nodes":[{"content":"The value to report.","pos":[0,20]}]}],"pos":[6004,6025],"yaml":true},{"content":"Gets the XAML type system identifier (<xref href=\"System.Xaml.XamlMember\"></xref>) that represents the ambient property.","nodes":[{"pos":[0,120],"content":"Gets the XAML type system identifier (<ph id=\"ph1\">&lt;xref href=\"System.Xaml.XamlMember\"&gt;&lt;/xref&gt;</ph>) that represents the ambient property.","source":"Gets the XAML type system identifier (<xref href=\"System.Xaml.XamlMember\"></xref>) that represents the ambient property."}],"pos":[7008,7129],"yaml":true},{"content":"The identifier that represents the ambient property.","nodes":[{"pos":[0,52],"content":"The identifier that represents the ambient property.","nodes":[{"content":"The identifier that represents the ambient property.","pos":[0,52]}]}],"pos":[7275,7328],"yaml":true},{"content":"Gets the value of the ambient property.","nodes":[{"pos":[0,39],"content":"Gets the value of the ambient property.","nodes":[{"content":"Gets the value of the ambient property.","pos":[0,39]}]}],"pos":[8251,8291],"yaml":true},{"content":"The value of the ambient property.","nodes":[{"pos":[0,34],"content":"The value of the ambient property.","nodes":[{"content":"The value of the ambient property.","pos":[0,34]}]}],"pos":[8400,8435],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Xaml.AmbientPropertyValue\n  commentId: T:System.Xaml.AmbientPropertyValue\n  id: AmbientPropertyValue\n  children:\n  - System.Xaml.AmbientPropertyValue.#ctor(System.Xaml.XamlMember,System.Object)\n  - System.Xaml.AmbientPropertyValue.RetrievedProperty\n  - System.Xaml.AmbientPropertyValue.Value\n  langs:\n  - csharp\n  name: AmbientPropertyValue\n  nameWithType: AmbientPropertyValue\n  fullName: System.Xaml.AmbientPropertyValue\n  type: Class\n  assemblies:\n  - System.Xaml\n  namespace: System.Xaml\n  summary: Reports information about an ambient property, as part of an <xref href=\"System.Xaml.IAmbientProvider\"></xref> implementation.\n  remarks: \"<xref:System.Xaml.AmbientPropertyValue> represents an information item that is returned by calling an <xref:System.Xaml.IAmbientProvider> service method. The `GetAll` methods return enumerations or arrays of <xref:System.Xaml.AmbientPropertyValue> items; the `GetFirst` methods return a single <xref:System.Xaml.AmbientPropertyValue>.  \\n  \\n## About Ambient Properties  \\n An ambient property is a property whose property value should be available to value converter usage in the XAML node structure and to the object graph underneath it. The ambient concept  is relevant for a XAML processor during the object-writing phase of the load path or the serialization phase of a save path.  \\n  \\n A type can also be attributed as ambient. In this case, all properties that use the attributed type are reported as ambient.  \\n  \\n In the load path case, the ambient property value might influence the object graph produced value of other properties that exist underneath it in a XAML node structure. When processed as a XAML node stream, the ambient concept implies that the ambient property value must be available to type converters and markup extensions from `StartObject` to `EndObject`. Similarly, a type converter or markup extension that is used for the save path can look up the ambient property and its value. Therefore, the XAML that is produced is a better round-trip representation.  \\n  \\n By its language definition, XAML does not specify the order in which members of an object must be processed. However, any ambient property value must be processed first by the XAML reader so that the type converter and markup extension usage that are contained in other properties can access it through the <xref:System.Xaml.IAmbientProvider> service.  \\n  \\n <xref:System.Xaml.XamlMember.DependsOn%2A> is a similar concept that also influences XAML node-processing order. However, <xref:System.Xaml.XamlMember.DependsOn%2A> can only be used for peer member and node relationships; it cannot influence all descendants. Also, <xref:System.Xaml.XamlMember.DependsOn%2A> directly influences object graph property setting, whereas the ambient technique relies on type converters or markup extensions. In the ambient technique, there must also be a specific type converter or markup extension definition. It is up to each type converter or markup extension to determine how the ambient property value should be interpreted and applied to the object graph location where the type converter or markup extension is used.  \\n  \\n## WPF Usage Notes  \\n An ambient property scenario that is illustrated in the [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] feature set is <xref:System.Windows.Style.TargetType%2A?displayProperty=fullName>, which can qualify the necessary property name lookups for other values. In this case, the <xref:System.Windows.Style.TargetType%2A?displayProperty=fullName> value qualifies the <xref:System.Windows.Setter.Property%2A?displayProperty=fullName> values in the XAML nodes underneath it. <xref:System.Windows.Setter.Property%2A?displayProperty=fullName> uses the type converter behavior for a <xref:System.Windows.DependencyProperty>. This behavior accesses the ambient <xref:System.Windows.Style.TargetType%2A?displayProperty=fullName> value by querying <xref:System.Xaml.IAmbientProvider.GetFirstAmbientValue%2A> from a service context that is available to type converters and markup extensions.\"\n  syntax:\n    content: public class AmbientPropertyValue\n  inheritance:\n  - System.Object\n  implements: []\n  inheritedMembers:\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.ToString\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xaml/AmbientPropertyValue.xml\n  ms.technology:\n  - dotnet-wpf\n  manager: martinek\n- uid: System.Xaml.AmbientPropertyValue.#ctor(System.Xaml.XamlMember,System.Object)\n  commentId: M:System.Xaml.AmbientPropertyValue.#ctor(System.Xaml.XamlMember,System.Object)\n  id: '#ctor(System.Xaml.XamlMember,System.Object)'\n  parent: System.Xaml.AmbientPropertyValue\n  langs:\n  - csharp\n  name: AmbientPropertyValue(XamlMember, Object)\n  nameWithType: AmbientPropertyValue.AmbientPropertyValue(XamlMember, Object)\n  fullName: AmbientPropertyValue.AmbientPropertyValue(XamlMember, Object)\n  type: Constructor\n  assemblies:\n  - System.Xaml\n  namespace: System.Xaml\n  summary: Initializes a new instance of the <xref href=\"System.Xaml.AmbientPropertyValue\"></xref> class.\n  syntax:\n    content: public AmbientPropertyValue (System.Xaml.XamlMember property, object value);\n    parameters:\n    - id: property\n      type: System.Xaml.XamlMember\n      description: The identifier that represents the ambient property.\n    - id: value\n      type: System.Object\n      description: The value to report.\n  overload: System.Xaml.AmbientPropertyValue.#ctor*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xaml/AmbientPropertyValue.xml\n  ms.technology:\n  - dotnet-wpf\n  manager: martinek\n- uid: System.Xaml.AmbientPropertyValue.RetrievedProperty\n  commentId: P:System.Xaml.AmbientPropertyValue.RetrievedProperty\n  id: RetrievedProperty\n  parent: System.Xaml.AmbientPropertyValue\n  langs:\n  - csharp\n  name: RetrievedProperty\n  nameWithType: AmbientPropertyValue.RetrievedProperty\n  fullName: AmbientPropertyValue.RetrievedProperty\n  type: Property\n  assemblies:\n  - System.Xaml\n  namespace: System.Xaml\n  summary: Gets the XAML type system identifier (<xref href=\"System.Xaml.XamlMember\"></xref>) that represents the ambient property.\n  syntax:\n    content: public System.Xaml.XamlMember RetrievedProperty { get; }\n    return:\n      type: System.Xaml.XamlMember\n      description: The identifier that represents the ambient property.\n  overload: System.Xaml.AmbientPropertyValue.RetrievedProperty*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xaml/AmbientPropertyValue.xml\n  ms.technology:\n  - dotnet-wpf\n  manager: martinek\n- uid: System.Xaml.AmbientPropertyValue.Value\n  commentId: P:System.Xaml.AmbientPropertyValue.Value\n  id: Value\n  parent: System.Xaml.AmbientPropertyValue\n  langs:\n  - csharp\n  name: Value\n  nameWithType: AmbientPropertyValue.Value\n  fullName: AmbientPropertyValue.Value\n  type: Property\n  assemblies:\n  - System.Xaml\n  namespace: System.Xaml\n  summary: Gets the value of the ambient property.\n  syntax:\n    content: public object Value { get; }\n    return:\n      type: System.Object\n      description: The value of the ambient property.\n  overload: System.Xaml.AmbientPropertyValue.Value*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xaml/AmbientPropertyValue.xml\n  ms.technology:\n  - dotnet-wpf\n  manager: martinek\nreferences:\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.Xaml.AmbientPropertyValue.#ctor(System.Xaml.XamlMember,System.Object)\n  parent: System.Xaml.AmbientPropertyValue\n  isExternal: false\n  name: AmbientPropertyValue(XamlMember, Object)\n  nameWithType: AmbientPropertyValue.AmbientPropertyValue(XamlMember, Object)\n  fullName: AmbientPropertyValue.AmbientPropertyValue(XamlMember, Object)\n- uid: System.Xaml.XamlMember\n  parent: System.Xaml\n  isExternal: false\n  name: XamlMember\n  nameWithType: XamlMember\n  fullName: System.Xaml.XamlMember\n- uid: System.Xaml.AmbientPropertyValue.RetrievedProperty\n  parent: System.Xaml.AmbientPropertyValue\n  isExternal: false\n  name: RetrievedProperty\n  nameWithType: AmbientPropertyValue.RetrievedProperty\n  fullName: AmbientPropertyValue.RetrievedProperty\n- uid: System.Xaml.AmbientPropertyValue.Value\n  parent: System.Xaml.AmbientPropertyValue\n  isExternal: false\n  name: Value\n  nameWithType: AmbientPropertyValue.Value\n  fullName: AmbientPropertyValue.Value\n- uid: System.Xaml.AmbientPropertyValue.#ctor*\n  parent: System.Xaml.AmbientPropertyValue\n  isExternal: false\n  name: AmbientPropertyValue\n  nameWithType: AmbientPropertyValue.AmbientPropertyValue\n  fullName: AmbientPropertyValue.AmbientPropertyValue\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xaml/AmbientPropertyValue.xml\n- uid: System.Xaml.AmbientPropertyValue.RetrievedProperty*\n  parent: System.Xaml.AmbientPropertyValue\n  isExternal: false\n  name: RetrievedProperty\n  nameWithType: AmbientPropertyValue.RetrievedProperty\n  fullName: AmbientPropertyValue.RetrievedProperty\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xaml/AmbientPropertyValue.xml\n- uid: System.Xaml.AmbientPropertyValue.Value*\n  parent: System.Xaml.AmbientPropertyValue\n  isExternal: false\n  name: Value\n  nameWithType: AmbientPropertyValue.Value\n  fullName: AmbientPropertyValue.Value\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xaml/AmbientPropertyValue.xml\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: Object.Equals(Object)\n  fullName: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: Object.GetHashCode()\n  fullName: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: false\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: false\n  name: ToString()\n  nameWithType: Object.ToString()\n  fullName: Object.ToString()\n"}